// src/hooks/useSmartRecommendations.js
import { useMemo } from 'react';
import { EXERCISE_TYPES } from '../utils/constants';

/**
 * Hook pour g√©n√©rer des recommandations intelligentes bas√©es sur :
 * - Temps pass√© sur chaque type d'exercice
 * - Parcours p√©dagogique optimal
 * - Messages bienveillants style "coach"
 */
const useSmartRecommendations = (lastActivity, exerciseTimeStats = {}, currentLevel) => {

  // Parcours p√©dagogique optimal
  const LEARNING_PATH = {
    vocabulary: 'phrases',
    phrases: 'grammar', 
    grammar: 'reading',
    reading: 'conversations',
    conversations: 'assessment',
    assessment: 'vocabulary', // Cycle vers niveau suivant
    // Exercices de renforcement
    spelling: 'vocabulary', // Retour au vocab
    errorCorrection: 'reading', // Retour √† la lecture
    wordGames: 'vocabulary', // Retour au vocab
  };

  // Messages coach bienveillant
  const RECOMMENDATION_MESSAGES = {
    'vocabulary->phrases': {
      icon: 'üéâ',
      title: 'Belle progression !',
      message: 'Tu as bien enrichi ton vocabulaire ! Que dirais-tu de mettre ces mots en pratique avec des expressions ?',
      button: 'Pratiquer les expressions'
    },
    
    'phrases->grammar': {
      icon: 'üí™', 
      title: 'Bien jou√© !',
      message: 'Tu progresses bien avec les expressions ! Pour √™tre encore plus pr√©cis, on travaille la grammaire ?',
      button: 'Renforcer la grammaire'
    },
    
    'grammar->reading': {
      icon: 'üéØ',
      title: 'Tu avances bien !', 
      message: 'Tu progresses en grammaire ! Pour voir tout en action, que dirais-tu de lire des textes complets ?',
      button: 'Passer √† la lecture'
    },
    
    'reading->conversations': {
      icon: 'üó£Ô∏è',
      title: 'Super entra√Ænement !',
      message: 'Tu progresses bien en lecture ! Pr√™t √† compl√©ter avec de la pratique orale ?',
      button: 'Essayer les dialogues'
    },

    'conversations->assessment': {
      icon: 'üèÜ',
      title: 'Excellent parcours !',
      message: 'Tu as bien travaill√© les dialogues ! Que dirais-tu de tester tes progr√®s globaux ?',
      button: 'Faire le bilan'
    },

    'assessment->vocabulary': {
      icon: 'üöÄ',
      title: 'Bravo pour ce niveau !',
      message: 'Tu as valid√© tes acquis ! Pr√™t √† d√©couvrir du nouveau vocabulaire ?',
      button: 'Nouveau vocabulaire'
    },

    // Messages de retour pour exercices de renforcement
    'spelling->vocabulary': {
      icon: '‚ú®',
      title: 'Orthographe au top !',
      message: 'Tu √©cris mieux ! Que dirais-tu d\'apprendre de nouveaux mots ?',
      button: 'Enrichir le vocabulaire'
    },

    'errorCorrection->reading': {
      icon: 'üîç',
      title: 'Pr√©cision am√©lior√©e !',
      message: 'Tu corriges bien les erreurs ! Pr√™t √† lire des textes complets ?',
      button: 'Reprendre la lecture'
    },

    'wordGames->vocabulary': {
      icon: 'üéÆ',
      title: 'Bien r√©vis√© !',
      message: 'Tu t\'es bien amus√© ! Que dirais-tu d\'apprendre de nouveaux mots ?',
      button: 'Nouveau vocabulaire'
    }
  };

  // Seuil de temps pour d√©clencher une recommandation (en minutes)
  const TIME_THRESHOLD = 15;

  // Calculer la recommandation intelligente
  const smartRecommendation = useMemo(() => {
    // Si pas d'activit√© r√©cente, recommander vocabulary pour commencer
    if (!lastActivity) {
      return {
        id: 'start_vocabulary',
        title: EXERCISE_TYPES.vocabulary.title,
        description: EXERCISE_TYPES.vocabulary.description,
        type: 'vocabulary',
        level: currentLevel,
        icon: EXERCISE_TYPES.vocabulary.icon,
        color: EXERCISE_TYPES.vocabulary.color,
        isRecommendation: true,
        recommendationData: {
          icon: 'üåü',
          title: 'Commen√ßons !',
          message: 'Pr√™t √† d√©buter ton apprentissage ? Commen√ßons par enrichir ton vocabulaire !',
          button: 'Commencer le vocabulaire'
        }
      };
    }

    // V√©rifier le temps pass√© sur le dernier type d'exercice
    const lastExerciseType = lastActivity.type;
    const timeSpent = exerciseTimeStats[lastExerciseType] || 0;

    // Si pas assez de temps pass√©, pas de recommandation
    if (timeSpent < TIME_THRESHOLD) {
      return null;
    }

    // Obtenir le prochain exercice dans le parcours
    const nextExerciseType = LEARNING_PATH[lastExerciseType];
    
    if (!nextExerciseType || !EXERCISE_TYPES[nextExerciseType]) {
      return null;
    }

    // G√©n√©rer la cl√© du message
    const messageKey = `${lastExerciseType}->${nextExerciseType}`;
    const recommendationMessage = RECOMMENDATION_MESSAGES[messageKey];

    if (!recommendationMessage) {
      return null;
    }

    // Cr√©er la recommandation compl√®te
    return {
      id: `recommendation_${nextExerciseType}`,
      title: EXERCISE_TYPES[nextExerciseType].title,
      description: EXERCISE_TYPES[nextExerciseType].description,
      type: nextExerciseType,
      level: currentLevel,
      icon: EXERCISE_TYPES[nextExerciseType].icon,
      color: EXERCISE_TYPES[nextExerciseType].color,
      isRecommendation: true,
      recommendationData: {
        ...recommendationMessage,
        timeSpent: Math.round(timeSpent),
        fromExercise: lastExerciseType
      }
    };

  }, [lastActivity, exerciseTimeStats, currentLevel]);

  // Fonction pour obtenir le temps pass√© sur un type d'exercice
  const getTimeSpent = (exerciseType) => {
    return exerciseTimeStats[exerciseType] || 0;
  };

  // Fonction pour v√©rifier si un exercice peut √™tre recommand√©
  const canRecommend = (exerciseType) => {
    return getTimeSpent(exerciseType) >= TIME_THRESHOLD;
  };

  // Fonction pour obtenir le prochain exercice recommand√©
  const getNextRecommendedExercise = (currentExerciseType) => {
    return LEARNING_PATH[currentExerciseType] || null;
  };

  return {
    smartRecommendation,
    getTimeSpent,
    canRecommend,
    getNextRecommendedExercise,
    timeThreshold: TIME_THRESHOLD,
    learningPath: LEARNING_PATH
  };
};

export default useSmartRecommendations;