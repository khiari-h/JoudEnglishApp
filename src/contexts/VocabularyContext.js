// contexts/VocabularyContext.js
/**
 * Context centralisÃ© pour le module Vocabulary
 * Ã‰limine le props drilling et centralise l'Ã©tat
 */

import React, { createContext, useContext, useMemo } from 'react';
import { getLevelColor } from '../../../utils/vocabulary/vocabularyDataHelper';

// ðŸŽ¯ Context pour les donnÃ©es statiques (ne changent pas)
const VocabularyStaticContext = createContext(null);

// ðŸ”„ Context pour l'Ã©tat dynamique (peut changer)
const VocabularyStateContext = createContext(null);

// ðŸŽ¬ Context pour les actions
const VocabularyActionsContext = createContext(null);

// ðŸ“Š Context pour les donnÃ©es calculÃ©es
const VocabularyComputedContext = createContext(null);

/**
 * Provider qui combine tous les contexts
 */
export const VocabularyProvider = ({ 
  children, 
  level, 
  mode, 
  vocabularyData,
  // Ã‰tat
  categoryIndex,
  wordIndex,
  showTranslation,
  completedWords,
  showDetailedProgress,
  // Actions
  actions,
  // DonnÃ©es calculÃ©es
  computed
}) => {
  
  // ðŸ“‹ DonnÃ©es statiques (ne changent jamais pendant l'exercice)
  const staticData = useMemo(() => ({
    level,
    mode,
    vocabularyData,
    levelColor: getLevelColor(level),
    progressKey: `${level}_${mode}`
  }), [level, mode, vocabularyData]);
  
  // ðŸ”„ Ã‰tat dynamique
  const state = useMemo(() => ({
    categoryIndex,
    wordIndex,
    showTranslation,
    completedWords,
    showDetailedProgress
  }), [categoryIndex, wordIndex, showTranslation, completedWords, showDetailedProgress]);
  
  return (
    <VocabularyStaticContext.Provider value={staticData}>
      <VocabularyStateContext.Provider value={state}>
        <VocabularyActionsContext.Provider value={actions}>
          <VocabularyComputedContext.Provider value={computed}>
            {children}
          </VocabularyComputedContext.Provider>
        </VocabularyActionsContext.Provider>
      </VocabularyStateContext.Provider>
    </VocabularyStaticContext.Provider>
  );
};

/**
 * Hooks pour accÃ©der aux diffÃ©rents contexts
 */

// ðŸ“‹ Hook pour les donnÃ©es statiques
export const useVocabularyStatic = () => {
  const context = useContext(VocabularyStaticContext);
  if (!context) {
    throw new Error('useVocabularyStatic must be used within VocabularyProvider');
  }
  return context;
};

// ðŸ”„ Hook pour l'Ã©tat
export const useVocabularyState = () => {
  const context = useContext(VocabularyStateContext);
  if (!context) {
    throw new Error('useVocabularyState must be used within VocabularyProvider');
  }
  return context;
};

// ðŸŽ¬ Hook pour les actions
export const useVocabularyActions = () => {
  const context = useContext(VocabularyActionsContext);
  if (!context) {
    throw new Error('useVocabularyActions must be used within VocabularyProvider');
  }
  return context;
};

// ðŸ“Š Hook pour les donnÃ©es calculÃ©es
export const useVocabularyComputed = () => {
  const context = useContext(VocabularyComputedContext);
  if (!context) {
    throw new Error('useVocabularyComputed must be used within VocabularyProvider');
  }
  return context;
};

/**
 * Hook composite qui donne accÃ¨s Ã  tout
 * Pour les cas oÃ¹ on a besoin de plusieurs contexts
 */
export const useVocabulary = () => {
  const staticData = useVocabularyStatic();
  const state = useVocabularyState();
  const actions = useVocabularyActions();
  const computed = useVocabularyComputed();
  
  return {
    // DonnÃ©es statiques
    level: staticData.level,
    mode: staticData.mode,
    vocabularyData: staticData.vocabularyData,
    levelColor: staticData.levelColor,
    progressKey: staticData.progressKey,
    
    // Ã‰tat
    categoryIndex: state.categoryIndex,
    wordIndex: state.wordIndex,
    showTranslation: state.showTranslation,
    completedWords: state.completedWords,
    showDetailedProgress: state.showDetailedProgress,
    
    // Actions
    ...actions,
    
    // DonnÃ©es calculÃ©es
    ...computed
  };
};

/**
 * Hook pour des besoins spÃ©cifiques (optimisation)
 */
export const useVocabularyCore = () => {
  const { level, mode, levelColor } = useVocabularyStatic();
  const { categoryIndex, wordIndex, showTranslation } = useVocabularyState();
  
  return {
    level,
    mode,
    levelColor,
    categoryIndex,
    wordIndex,
    showTranslation
  };
};