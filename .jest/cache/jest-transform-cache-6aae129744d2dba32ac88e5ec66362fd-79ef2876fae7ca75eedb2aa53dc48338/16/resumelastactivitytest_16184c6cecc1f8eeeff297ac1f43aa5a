f3a1a03fb890492a05b7ea3f737a3f63
_getJestObj().mock('expo-router', function () {
  return {
    useFocusEffect: jest.fn(function (callback) {
      return callback();
    }),
    router: {
      push: jest.fn()
    },
    Stack: function Stack(_ref) {
      var children = _ref.children;
      return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
        children: children
      });
    },
    useLocalSearchParams: function useLocalSearchParams() {
      return {};
    },
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn(),
        canGoBack: jest.fn(function () {
          return true;
        }),
        addListener: jest.fn(),
        isFocused: jest.fn(function () {
          return true;
        })
      };
    }
  };
});
_getJestObj().mock('../../src/screens/Dashboard/hooks/useDashboardState', function () {
  return {
    useDashboardState: jest.fn(function () {
      return {
        showLevelProgress: false,
        setShowLevelProgress: jest.fn(),
        openLevelProgressModal: jest.fn(),
        closeLevelProgressModal: jest.fn(),
        refreshing: false,
        activeTab: "home",
        setActiveTab: jest.fn(),
        onRefresh: jest.fn().mockResolvedValue()
      };
    })
  };
});
_getJestObj().mock('../../src/hooks/useRealTimeProgress', function () {
  return function () {
    return {
      getLevelProgress: jest.fn(function () {
        return 50;
      }),
      refresh: jest.fn()
    };
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _expoRouter = require("expo-router");
var _Dashboard = _interopRequireDefault(require("../../src/screens/Dashboard"));
var LastActivity = _interopRequireWildcard(require("../../src/hooks/useLastActivity"));
var _ProgressContext = require("../../src/contexts/ProgressContext");
var _ThemeContext = require("../../src/contexts/ThemeContext");
var _CurrentLevelContext = require("../../src/contexts/CurrentLevelContext");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var useLastActivitySpy = jest.spyOn(LastActivity, 'default');
var mockLastActivityData = {
  type: 'grammar',
  level: 'A1',
  title: 'Grammaire de base',
  timestamp: Date.now(),
  metadata: {
    categoryIndex: 1,
    word: 5,
    totalWords: 15
  }
};
describe('Scénario 2: Reprise de la dernière activité', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    useLastActivitySpy.mockClear();
  });
  it('devrait afficher la section "Continuer" et naviguer correctement', (0, _asyncToGenerator2.default)(function* () {
    useLastActivitySpy.mockReturnValue({
      lastActivity: mockLastActivityData,
      isLoading: false,
      saveActivity: jest.fn(),
      clearActivity: jest.fn(),
      reload: jest.fn()
    });
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsx)(_CurrentLevelContext.CurrentLevelProvider, {
            children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
          })
        })
      })),
      getByTestId = _render.getByTestId,
      getByText = _render.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('hero-continue-section')).toBeTruthy();
    });
    expect(getByText('Grammaire de base')).toBeTruthy();
    expect(getByText(/Niv A1/)).toBeTruthy();
    expect(getByText(/Mot 6\/15/)).toBeTruthy();
    var continueButton = getByTestId('continue-activity-button');
    _reactNative.fireEvent.press(continueButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_expoRouter.router.push).toHaveBeenCalledWith({
        pathname: '/tabs/grammarExercise',
        params: {
          level: 'A1'
        }
      });
    });
  }));
  it('devrait afficher la section vide s\'il n\'y a pas de dernière activité', (0, _asyncToGenerator2.default)(function* () {
    useLastActivitySpy.mockReturnValue({
      lastActivity: null,
      isLoading: false,
      saveActivity: jest.fn(),
      clearActivity: jest.fn(),
      reload: jest.fn()
    });
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsx)(_CurrentLevelContext.CurrentLevelProvider, {
            children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
          })
        })
      })),
      getByTestId = _render2.getByTestId,
      getByText = _render2.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('hero-empty-section')).toBeTruthy();
    });
    expect(getByText("Commencer l'apprentissage")).toBeTruthy();
    var startButton = getByTestId('level-selection-button');
    _reactNative.fireEvent.press(startButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_expoRouter.router.push).toHaveBeenCalledWith('/tabs/levelSelection');
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VGb2N1c0VmZmVjdCIsImplc3QiLCJmbiIsImNhbGxiYWNrIiwicm91dGVyIiwicHVzaCIsIlN0YWNrIiwiX3JlZiIsImNoaWxkcmVuIiwiX2pzeFJ1bnRpbWUiLCJqc3giLCJGcmFnbWVudCIsInVzZUxvY2FsU2VhcmNoUGFyYW1zIiwidXNlTmF2aWdhdGlvbiIsIm5hdmlnYXRlIiwiZ29CYWNrIiwiY2FuR29CYWNrIiwiYWRkTGlzdGVuZXIiLCJpc0ZvY3VzZWQiLCJ1c2VEYXNoYm9hcmRTdGF0ZSIsInNob3dMZXZlbFByb2dyZXNzIiwic2V0U2hvd0xldmVsUHJvZ3Jlc3MiLCJvcGVuTGV2ZWxQcm9ncmVzc01vZGFsIiwiY2xvc2VMZXZlbFByb2dyZXNzTW9kYWwiLCJyZWZyZXNoaW5nIiwiYWN0aXZlVGFiIiwic2V0QWN0aXZlVGFiIiwib25SZWZyZXNoIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJnZXRMZXZlbFByb2dyZXNzIiwicmVmcmVzaCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX3JlYWN0IiwiX3JlYWN0TmF0aXZlIiwiX2V4cG9Sb3V0ZXIiLCJfRGFzaGJvYXJkIiwiTGFzdEFjdGl2aXR5IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfUHJvZ3Jlc3NDb250ZXh0IiwiX1RoZW1lQ29udGV4dCIsIl9DdXJyZW50TGV2ZWxDb250ZXh0IiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsIl90IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfcmVxdWlyZSIsInVzZUxhc3RBY3Rpdml0eVNweSIsInNweU9uIiwibW9ja0xhc3RBY3Rpdml0eURhdGEiLCJ0eXBlIiwibGV2ZWwiLCJ0aXRsZSIsInRpbWVzdGFtcCIsIkRhdGUiLCJub3ciLCJtZXRhZGF0YSIsImNhdGVnb3J5SW5kZXgiLCJ3b3JkIiwidG90YWxXb3JkcyIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJtb2NrQ2xlYXIiLCJpdCIsIm1vY2tSZXR1cm5WYWx1ZSIsImxhc3RBY3Rpdml0eSIsImlzTG9hZGluZyIsInNhdmVBY3Rpdml0eSIsImNsZWFyQWN0aXZpdHkiLCJyZWxvYWQiLCJfcmVuZGVyIiwicmVuZGVyIiwiVGhlbWVQcm92aWRlciIsIlByb2dyZXNzUHJvdmlkZXIiLCJDdXJyZW50TGV2ZWxQcm92aWRlciIsImdldEJ5VGVzdElkIiwiZ2V0QnlUZXh0Iiwid2FpdEZvciIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJjb250aW51ZUJ1dHRvbiIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJwYXRobmFtZSIsInBhcmFtcyIsIl9yZW5kZXIyIiwic3RhcnRCdXR0b24iXSwic291cmNlcyI6WyJyZXN1bWUtbGFzdC1hY3Rpdml0eS50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIF9fdGVzdHNfXy9pbnRlZ3JhdGlvbi9yZXN1bWUtbGFzdC1hY3Rpdml0eS50ZXN0LmpzICBcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCwgd2FpdEZvciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IHJvdXRlciB9IGZyb20gJ2V4cG8tcm91dGVyJztcbmltcG9ydCBEYXNoYm9hcmQgZnJvbSAnLi4vLi4vc3JjL3NjcmVlbnMvRGFzaGJvYXJkJztcbmltcG9ydCAqIGFzIExhc3RBY3Rpdml0eSBmcm9tICcuLi8uLi9zcmMvaG9va3MvdXNlTGFzdEFjdGl2aXR5JztcbmltcG9ydCB7IFByb2dyZXNzUHJvdmlkZXIgfSBmcm9tICcuLi8uLi9zcmMvY29udGV4dHMvUHJvZ3Jlc3NDb250ZXh0JztcbmltcG9ydCB7IFRoZW1lUHJvdmlkZXIgfSBmcm9tICcuLi8uLi9zcmMvY29udGV4dHMvVGhlbWVDb250ZXh0JztcbmltcG9ydCB7IEN1cnJlbnRMZXZlbFByb3ZpZGVyIH0gZnJvbSAnLi4vLi4vc3JjL2NvbnRleHRzL0N1cnJlbnRMZXZlbENvbnRleHQnO1xuXG4vLyBNb2NrIGRlIGV4cG8tcm91dGVyXG5qZXN0Lm1vY2soJ2V4cG8tcm91dGVyJywgKCkgPT4gKHtcbiAgdXNlRm9jdXNFZmZlY3Q6IGplc3QuZm4oY2FsbGJhY2sgPT4gY2FsbGJhY2soKSksXG4gIHJvdXRlcjoge1xuICAgIHB1c2g6IGplc3QuZm4oKSxcbiAgfSxcbiAgU3RhY2s6ICh7IGNoaWxkcmVuIH0pID0+IDw+e2NoaWxkcmVufTwvPixcbiAgdXNlTG9jYWxTZWFyY2hQYXJhbXM6ICgpID0+ICh7fSksXG4gIHVzZU5hdmlnYXRpb246ICgpID0+ICh7XG4gICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcbiAgICBnb0JhY2s6IGplc3QuZm4oKSxcbiAgICBjYW5Hb0JhY2s6IGplc3QuZm4oKCkgPT4gdHJ1ZSksXG4gICAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICBpc0ZvY3VzZWQ6IGplc3QuZm4oKCkgPT4gdHJ1ZSksXG4gIH0pLFxufSkpO1xuXG4vLyBNb2NrcyBkZXMgaG9va3MgZXQgY29tcG9zYW50c1xuamVzdC5tb2NrKCcuLi8uLi9zcmMvc2NyZWVucy9EYXNoYm9hcmQvaG9va3MvdXNlRGFzaGJvYXJkU3RhdGUnLCAoKSA9PiAoe1xuICB1c2VEYXNoYm9hcmRTdGF0ZTogamVzdC5mbigoKSA9PiAoe1xuICAgIHNob3dMZXZlbFByb2dyZXNzOiBmYWxzZSxcbiAgICBzZXRTaG93TGV2ZWxQcm9ncmVzczogamVzdC5mbigpLFxuICAgIG9wZW5MZXZlbFByb2dyZXNzTW9kYWw6IGplc3QuZm4oKSxcbiAgICBjbG9zZUxldmVsUHJvZ3Jlc3NNb2RhbDogamVzdC5mbigpLFxuICAgIHJlZnJlc2hpbmc6IGZhbHNlLFxuICAgIGFjdGl2ZVRhYjogXCJob21lXCIsXG4gICAgc2V0QWN0aXZlVGFiOiBqZXN0LmZuKCksXG4gICAgb25SZWZyZXNoOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoKSxcbiAgfSkpLFxufSkpO1xuXG5jb25zdCB1c2VMYXN0QWN0aXZpdHlTcHkgPSBqZXN0LnNweU9uKExhc3RBY3Rpdml0eSwgJ2RlZmF1bHQnKTtcblxuamVzdC5tb2NrKCcuLi8uLi9zcmMvaG9va3MvdXNlUmVhbFRpbWVQcm9ncmVzcycsICgpID0+ICgpID0+ICh7XG4gIGdldExldmVsUHJvZ3Jlc3M6IGplc3QuZm4oKCkgPT4gNTApLFxuICByZWZyZXNoOiBqZXN0LmZuKCksXG59KSk7XG5cbmNvbnN0IG1vY2tMYXN0QWN0aXZpdHlEYXRhID0ge1xuICB0eXBlOiAnZ3JhbW1hcicsXG4gIGxldmVsOiAnQTEnLFxuICB0aXRsZTogJ0dyYW1tYWlyZSBkZSBiYXNlJyxcbiAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICBtZXRhZGF0YToge1xuICAgIGNhdGVnb3J5SW5kZXg6IDEsXG4gICAgd29yZDogNSwgLy8gTCd1dGlsaXNhdGV1ciBhIHRlcm1pbsOpIGxlIG1vdCA1XG4gICAgdG90YWxXb3JkczogMTUsXG4gIH0sXG59O1xuXG5kZXNjcmliZSgnU2PDqW5hcmlvIDI6IFJlcHJpc2UgZGUgbGEgZGVybmnDqHJlIGFjdGl2aXTDqScsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gICAgdXNlTGFzdEFjdGl2aXR5U3B5Lm1vY2tDbGVhcigpO1xuICB9KTtcblxuICBpdCgnZGV2cmFpdCBhZmZpY2hlciBsYSBzZWN0aW9uIFwiQ29udGludWVyXCIgZXQgbmF2aWd1ZXIgY29ycmVjdGVtZW50JywgYXN5bmMgKCkgPT4ge1xuICAgIHVzZUxhc3RBY3Rpdml0eVNweS5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgbGFzdEFjdGl2aXR5OiBtb2NrTGFzdEFjdGl2aXR5RGF0YSxcbiAgICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgICBzYXZlQWN0aXZpdHk6IGplc3QuZm4oKSxcbiAgICAgIGNsZWFyQWN0aXZpdHk6IGplc3QuZm4oKSxcbiAgICAgIHJlbG9hZDogamVzdC5mbigpLFxuICAgIH0pO1xuXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCwgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICA8VGhlbWVQcm92aWRlcj5cbiAgICAgICAgPFByb2dyZXNzUHJvdmlkZXI+XG4gICAgICAgICAgPEN1cnJlbnRMZXZlbFByb3ZpZGVyPlxuICAgICAgICAgICAgPERhc2hib2FyZCAvPlxuICAgICAgICAgIDwvQ3VycmVudExldmVsUHJvdmlkZXI+XG4gICAgICAgIDwvUHJvZ3Jlc3NQcm92aWRlcj5cbiAgICAgIDwvVGhlbWVQcm92aWRlcj5cbiAgICApO1xuXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2hlcm8tY29udGludWUtc2VjdGlvbicpKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG5cbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdHcmFtbWFpcmUgZGUgYmFzZScpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgvTml2IEExLykpLnRvQmVUcnV0aHkoKTtcbiAgICAvLyBMJ3V0aWxpc2F0ZXVyIGEgdGVybWluw6kgbGUgbW90IDUsIGRvbmMgb24gbHVpIHByw6lzZW50ZSBsZSBtb3QgNi5cbiAgICBleHBlY3QoZ2V0QnlUZXh0KC9Nb3QgNlxcLzE1LykpLnRvQmVUcnV0aHkoKTtcblxuICAgIGNvbnN0IGNvbnRpbnVlQnV0dG9uID0gZ2V0QnlUZXN0SWQoJ2NvbnRpbnVlLWFjdGl2aXR5LWJ1dHRvbicpO1xuICAgIGZpcmVFdmVudC5wcmVzcyhjb250aW51ZUJ1dHRvbik7XG5cbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChyb3V0ZXIucHVzaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgICBwYXRobmFtZTogJy90YWJzL2dyYW1tYXJFeGVyY2lzZScsXG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGxldmVsOiAnQTEnLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdkZXZyYWl0IGFmZmljaGVyIGxhIHNlY3Rpb24gdmlkZSBzXFwnaWwgblxcJ3kgYSBwYXMgZGUgZGVybmnDqHJlIGFjdGl2aXTDqScsIGFzeW5jICgpID0+IHtcbiAgICB1c2VMYXN0QWN0aXZpdHlTcHkubW9ja1JldHVyblZhbHVlKHtcbiAgICAgIGxhc3RBY3Rpdml0eTogbnVsbCxcbiAgICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgICBzYXZlQWN0aXZpdHk6IGplc3QuZm4oKSxcbiAgICAgIGNsZWFyQWN0aXZpdHk6IGplc3QuZm4oKSxcbiAgICAgIHJlbG9hZDogamVzdC5mbigpLFxuICAgIH0pO1xuXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCwgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICA8VGhlbWVQcm92aWRlcj5cbiAgICAgICAgPFByb2dyZXNzUHJvdmlkZXI+XG4gICAgICAgICAgPEN1cnJlbnRMZXZlbFByb3ZpZGVyPlxuICAgICAgICAgICAgPERhc2hib2FyZCAvPlxuICAgICAgICAgIDwvQ3VycmVudExldmVsUHJvdmlkZXI+XG4gICAgICAgIDwvUHJvZ3Jlc3NQcm92aWRlcj5cbiAgICAgIDwvVGhlbWVQcm92aWRlcj5cbiAgICApO1xuXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2hlcm8tZW1wdHktc2VjdGlvbicpKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG5cbiAgICBleHBlY3QoZ2V0QnlUZXh0KFwiQ29tbWVuY2VyIGwnYXBwcmVudGlzc2FnZVwiKSkudG9CZVRydXRoeSgpO1xuXG4gICAgY29uc3Qgc3RhcnRCdXR0b24gPSBnZXRCeVRlc3RJZCgnbGV2ZWwtc2VsZWN0aW9uLWJ1dHRvbicpO1xuICAgIGZpcmVFdmVudC5wcmVzcyhzdGFydEJ1dHRvbik7XG5cbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChyb3V0ZXIucHVzaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy90YWJzL2xldmVsU2VsZWN0aW9uJyk7XG4gICAgfSk7XG4gIH0pO1xufSk7Il0sIm1hcHBpbmdzIjoiQUFXQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsYUFBYSxFQUFFO0VBQUEsT0FBTztJQUM5QkMsY0FBYyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxVQUFBQyxRQUFRO01BQUEsT0FBSUEsUUFBUSxDQUFDLENBQUM7SUFBQSxFQUFDO0lBQy9DQyxNQUFNLEVBQUU7TUFDTkMsSUFBSSxFQUFFSixJQUFJLENBQUNDLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBQ0RJLEtBQUssRUFBRSxTQUFQQSxLQUFLQSxDQUFBQyxJQUFBO01BQUEsSUFBS0MsUUFBUSxHQUFBRCxJQUFBLENBQVJDLFFBQVE7TUFBQSxPQUFPLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFBRCxXQUFBLENBQUFFLFFBQUE7UUFBQUgsUUFBQSxFQUFHQTtNQUFRLENBQUcsQ0FBQztJQUFBO0lBQ3hDSSxvQkFBb0IsRUFBRSxTQUF0QkEsb0JBQW9CQSxDQUFBO01BQUEsT0FBUyxDQUFDLENBQUM7SUFBQSxDQUFDO0lBQ2hDQyxhQUFhLEVBQUUsU0FBZkEsYUFBYUEsQ0FBQTtNQUFBLE9BQVM7UUFDcEJDLFFBQVEsRUFBRWIsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztRQUNuQmEsTUFBTSxFQUFFZCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCYyxTQUFTLEVBQUVmLElBQUksQ0FBQ0MsRUFBRSxDQUFDO1VBQUEsT0FBTSxJQUFJO1FBQUEsRUFBQztRQUM5QmUsV0FBVyxFQUFFaEIsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztRQUN0QmdCLFNBQVMsRUFBRWpCLElBQUksQ0FBQ0MsRUFBRSxDQUFDO1VBQUEsT0FBTSxJQUFJO1FBQUE7TUFDL0IsQ0FBQztJQUFBO0VBQ0gsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUdISixXQUFBLEdBQUtDLElBQUksQ0FBQyxxREFBcUQsRUFBRTtFQUFBLE9BQU87SUFDdEVvQixpQkFBaUIsRUFBRWxCLElBQUksQ0FBQ0MsRUFBRSxDQUFDO01BQUEsT0FBTztRQUNoQ2tCLGlCQUFpQixFQUFFLEtBQUs7UUFDeEJDLG9CQUFvQixFQUFFcEIsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztRQUMvQm9CLHNCQUFzQixFQUFFckIsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztRQUNqQ3FCLHVCQUF1QixFQUFFdEIsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztRQUNsQ3NCLFVBQVUsRUFBRSxLQUFLO1FBQ2pCQyxTQUFTLEVBQUUsTUFBTTtRQUNqQkMsWUFBWSxFQUFFekIsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztRQUN2QnlCLFNBQVMsRUFBRTFCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQzBCLGlCQUFpQixDQUFDO01BQ3pDLENBQUM7SUFBQSxDQUFDO0VBQ0osQ0FBQztBQUFBLENBQUMsQ0FBQztBQUlIOUIsV0FBQSxHQUFLQyxJQUFJLENBQUMscUNBQXFDLEVBQUU7RUFBQSxPQUFNO0lBQUEsT0FBTztNQUM1RDhCLGdCQUFnQixFQUFFNUIsSUFBSSxDQUFDQyxFQUFFLENBQUM7UUFBQSxPQUFNLEVBQUU7TUFBQSxFQUFDO01BQ25DNEIsT0FBTyxFQUFFN0IsSUFBSSxDQUFDQyxFQUFFLENBQUM7SUFDbkIsQ0FBQztFQUFBLENBQUM7QUFBQSxFQUFDO0FBQUMsSUFBQTZCLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxrQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBN0NKLElBQUFFLE1BQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLFlBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLFdBQUEsR0FBQUosT0FBQTtBQUNBLElBQUFLLFVBQUEsR0FBQU4sc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFNLFlBQUEsR0FBQUMsdUJBQUEsQ0FBQVAsT0FBQTtBQUNBLElBQUFRLGdCQUFBLEdBQUFSLE9BQUE7QUFDQSxJQUFBUyxhQUFBLEdBQUFULE9BQUE7QUFDQSxJQUFBVSxvQkFBQSxHQUFBVixPQUFBO0FBQThFLElBQUF2QixXQUFBLEdBQUF1QixPQUFBO0FBQUEsU0FBQU8sd0JBQUFJLENBQUEsRUFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFOLHVCQUFBLFlBQUFBLHdCQUFBSSxDQUFBLEVBQUFDLENBQUEsU0FBQUEsQ0FBQSxJQUFBRCxDQUFBLElBQUFBLENBQUEsQ0FBQUssVUFBQSxTQUFBTCxDQUFBLE1BQUFNLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLEtBQUFDLFNBQUEsUUFBQUMsT0FBQSxFQUFBVixDQUFBLGlCQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFNBQUFRLENBQUEsTUFBQUYsQ0FBQSxHQUFBTCxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxRQUFBRyxDQUFBLENBQUFLLEdBQUEsQ0FBQVgsQ0FBQSxVQUFBTSxDQUFBLENBQUFNLEdBQUEsQ0FBQVosQ0FBQSxHQUFBTSxDQUFBLENBQUFPLEdBQUEsQ0FBQWIsQ0FBQSxFQUFBUSxDQUFBLGNBQUFNLEVBQUEsSUFBQWQsQ0FBQSxnQkFBQWMsRUFBQSxPQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWhCLENBQUEsRUFBQWMsRUFBQSxPQUFBUCxDQUFBLElBQUFELENBQUEsR0FBQVcsTUFBQSxDQUFBQyxjQUFBLEtBQUFELE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQW5CLENBQUEsRUFBQWMsRUFBQSxPQUFBUCxDQUFBLENBQUFLLEdBQUEsSUFBQUwsQ0FBQSxDQUFBTSxHQUFBLElBQUFQLENBQUEsQ0FBQUUsQ0FBQSxFQUFBTSxFQUFBLEVBQUFQLENBQUEsSUFBQUMsQ0FBQSxDQUFBTSxFQUFBLElBQUFkLENBQUEsQ0FBQWMsRUFBQSxXQUFBTixDQUFBLEtBQUFSLENBQUEsRUFBQUMsQ0FBQTtBQUFBLFNBQUE5QyxZQUFBO0VBQUEsSUFBQWlFLFFBQUEsR0FBQS9CLE9BQUE7SUFBQS9CLElBQUEsR0FBQThELFFBQUEsQ0FBQTlELElBQUE7RUFBQUgsV0FBQSxZQUFBQSxZQUFBO0lBQUEsT0FBQUcsSUFBQTtFQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBaUM5RSxJQUFNK0Qsa0JBQWtCLEdBQUcvRCxJQUFJLENBQUNnRSxLQUFLLENBQUMzQixZQUFZLEVBQUUsU0FBUyxDQUFDO0FBTzlELElBQU00QixvQkFBb0IsR0FBRztFQUMzQkMsSUFBSSxFQUFFLFNBQVM7RUFDZkMsS0FBSyxFQUFFLElBQUk7RUFDWEMsS0FBSyxFQUFFLG1CQUFtQjtFQUMxQkMsU0FBUyxFQUFFQyxJQUFJLENBQUNDLEdBQUcsQ0FBQyxDQUFDO0VBQ3JCQyxRQUFRLEVBQUU7SUFDUkMsYUFBYSxFQUFFLENBQUM7SUFDaEJDLElBQUksRUFBRSxDQUFDO0lBQ1BDLFVBQVUsRUFBRTtFQUNkO0FBQ0YsQ0FBQztBQUVEQyxRQUFRLENBQUMsNkNBQTZDLEVBQUUsWUFBTTtFQUM1REMsVUFBVSxDQUFDLFlBQU07SUFDZjdFLElBQUksQ0FBQzhFLGFBQWEsQ0FBQyxDQUFDO0lBQ3BCZixrQkFBa0IsQ0FBQ2dCLFNBQVMsQ0FBQyxDQUFDO0VBQ2hDLENBQUMsQ0FBQztFQUVGQyxFQUFFLENBQUMsa0VBQWtFLE1BQUFoRCxrQkFBQSxDQUFBb0IsT0FBQSxFQUFFLGFBQVk7SUFDakZXLGtCQUFrQixDQUFDa0IsZUFBZSxDQUFDO01BQ2pDQyxZQUFZLEVBQUVqQixvQkFBb0I7TUFDbENrQixTQUFTLEVBQUUsS0FBSztNQUNoQkMsWUFBWSxFQUFFcEYsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUN2Qm9GLGFBQWEsRUFBRXJGLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDeEJxRixNQUFNLEVBQUV0RixJQUFJLENBQUNDLEVBQUUsQ0FBQztJQUNsQixDQUFDLENBQUM7SUFFRixJQUFBc0YsT0FBQSxHQUFtQyxJQUFBQyxtQkFBTSxFQUN2QyxJQUFBaEYsV0FBQSxDQUFBQyxHQUFBLEVBQUMrQixhQUFBLENBQUFpRCxhQUFhO1FBQUFsRixRQUFBLEVBQ1osSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUM4QixnQkFBQSxDQUFBbUQsZ0JBQWdCO1VBQUFuRixRQUFBLEVBQ2YsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNnQyxvQkFBQSxDQUFBa0Qsb0JBQW9CO1lBQUFwRixRQUFBLEVBQ25CLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDMkIsVUFBQSxDQUFBZ0IsT0FBUyxJQUFFO1VBQUMsQ0FDTztRQUFDLENBQ1A7TUFBQyxDQUNOLENBQ2pCLENBQUM7TUFST3dDLFdBQVcsR0FBQUwsT0FBQSxDQUFYSyxXQUFXO01BQUVDLFNBQVMsR0FBQU4sT0FBQSxDQUFUTSxTQUFTO0lBVTlCLE1BQU0sSUFBQUMsb0JBQU8sRUFBQyxZQUFNO01BQ2xCQyxNQUFNLENBQUNILFdBQVcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUNJLFVBQVUsQ0FBQyxDQUFDO0lBQzNELENBQUMsQ0FBQztJQUVGRCxNQUFNLENBQUNGLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUNHLFVBQVUsQ0FBQyxDQUFDO0lBQ25ERCxNQUFNLENBQUNGLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDRyxVQUFVLENBQUMsQ0FBQztJQUV4Q0QsTUFBTSxDQUFDRixTQUFTLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQ0csVUFBVSxDQUFDLENBQUM7SUFFM0MsSUFBTUMsY0FBYyxHQUFHTCxXQUFXLENBQUMsMEJBQTBCLENBQUM7SUFDOURNLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0YsY0FBYyxDQUFDO0lBRS9CLE1BQU0sSUFBQUgsb0JBQU8sRUFBQyxZQUFNO01BQ2xCQyxNQUFNLENBQUM1RixrQkFBTSxDQUFDQyxJQUFJLENBQUMsQ0FBQ2dHLG9CQUFvQixDQUFDO1FBQ3ZDQyxRQUFRLEVBQUUsdUJBQXVCO1FBQ2pDQyxNQUFNLEVBQUU7VUFDTm5DLEtBQUssRUFBRTtRQUNUO01BQ0YsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDO0VBQ0osQ0FBQyxFQUFDO0VBRUZhLEVBQUUsQ0FBQyx3RUFBd0UsTUFBQWhELGtCQUFBLENBQUFvQixPQUFBLEVBQUUsYUFBWTtJQUN2Rlcsa0JBQWtCLENBQUNrQixlQUFlLENBQUM7TUFDakNDLFlBQVksRUFBRSxJQUFJO01BQ2xCQyxTQUFTLEVBQUUsS0FBSztNQUNoQkMsWUFBWSxFQUFFcEYsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUN2Qm9GLGFBQWEsRUFBRXJGLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDeEJxRixNQUFNLEVBQUV0RixJQUFJLENBQUNDLEVBQUUsQ0FBQztJQUNsQixDQUFDLENBQUM7SUFFRixJQUFBc0csUUFBQSxHQUFtQyxJQUFBZixtQkFBTSxFQUN2QyxJQUFBaEYsV0FBQSxDQUFBQyxHQUFBLEVBQUMrQixhQUFBLENBQUFpRCxhQUFhO1FBQUFsRixRQUFBLEVBQ1osSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUM4QixnQkFBQSxDQUFBbUQsZ0JBQWdCO1VBQUFuRixRQUFBLEVBQ2YsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNnQyxvQkFBQSxDQUFBa0Qsb0JBQW9CO1lBQUFwRixRQUFBLEVBQ25CLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDMkIsVUFBQSxDQUFBZ0IsT0FBUyxJQUFFO1VBQUMsQ0FDTztRQUFDLENBQ1A7TUFBQyxDQUNOLENBQ2pCLENBQUM7TUFST3dDLFdBQVcsR0FBQVcsUUFBQSxDQUFYWCxXQUFXO01BQUVDLFNBQVMsR0FBQVUsUUFBQSxDQUFUVixTQUFTO0lBVTlCLE1BQU0sSUFBQUMsb0JBQU8sRUFBQyxZQUFNO01BQ2xCQyxNQUFNLENBQUNILFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUNJLFVBQVUsQ0FBQyxDQUFDO0lBQ3hELENBQUMsQ0FBQztJQUVGRCxNQUFNLENBQUNGLFNBQVMsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLENBQUNHLFVBQVUsQ0FBQyxDQUFDO0lBRTNELElBQU1RLFdBQVcsR0FBR1osV0FBVyxDQUFDLHdCQUF3QixDQUFDO0lBQ3pETSxzQkFBUyxDQUFDQyxLQUFLLENBQUNLLFdBQVcsQ0FBQztJQUU1QixNQUFNLElBQUFWLG9CQUFPLEVBQUMsWUFBTTtNQUNsQkMsTUFBTSxDQUFDNUYsa0JBQU0sQ0FBQ0MsSUFBSSxDQUFDLENBQUNnRyxvQkFBb0IsQ0FBQyxzQkFBc0IsQ0FBQztJQUNsRSxDQUFDLENBQUM7RUFDSixDQUFDLEVBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=