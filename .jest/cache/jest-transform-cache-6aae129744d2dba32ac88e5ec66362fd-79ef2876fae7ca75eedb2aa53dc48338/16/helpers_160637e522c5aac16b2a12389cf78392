8cef9c86ba39d397c14f63bd1b3f81d3
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkValidArgs = checkValidArgs;
exports.checkValidInput = checkValidInput;
exports.convertError = convertError;
exports.convertErrors = convertErrors;
function checkValidArgs(keyValuePairs, callback) {
  if (!Array.isArray(keyValuePairs) || keyValuePairs.length === 0 || !Array.isArray(keyValuePairs[0])) {
    throw new Error("[AsyncStorage] Expected array of key-value pairs as first argument to multiSet");
  }
  if (callback && typeof callback !== "function") {
    if (Array.isArray(callback)) {
      throw new Error("[AsyncStorage] Expected function as second argument to multiSet. Did you forget to wrap key-value pairs in an array for the first argument?");
    }
    throw new Error("[AsyncStorage] Expected function as second argument to multiSet");
  }
}
function checkValidInput() {
  for (var _len = arguments.length, input = new Array(_len), _key = 0; _key < _len; _key++) {
    input[_key] = arguments[_key];
  }
  var key = input[0],
    value = input[1];
  if (typeof key !== "string") {
    console.warn(`[AsyncStorage] Using ${typeof key} type for key is not supported. This can lead to unexpected behavior/errors. Use string instead.\nKey passed: ${key}\n`);
  }
  if (input.length > 1 && typeof value !== "string") {
    if (value == null) {
      throw new Error(`[AsyncStorage] Passing null/undefined as value is not supported. If you want to remove value, Use .removeItem method instead.\nPassed value: ${value}\nPassed key: ${key}\n`);
    } else {
      console.warn(`[AsyncStorage] The value for key "${key}" is not a string. This can lead to unexpected behavior/errors. Consider stringifying it.\nPassed value: ${value}\nPassed key: ${key}\n`);
    }
  }
}
function convertError(error) {
  if (!error) {
    return null;
  }
  var out = new Error(error.message);
  out["key"] = error.key;
  return out;
}
function convertErrors(errs) {
  var errors = ensureArray(errs);
  return errors ? errors.map(function (e) {
    return convertError(e);
  }) : null;
}
function ensureArray(e) {
  if (Array.isArray(e)) {
    return e.length === 0 ? null : e;
  } else if (e) {
    return [e];
  } else {
    return null;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjaGVja1ZhbGlkQXJncyIsImtleVZhbHVlUGFpcnMiLCJjYWxsYmFjayIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsIkVycm9yIiwiY2hlY2tWYWxpZElucHV0IiwiX2xlbiIsImFyZ3VtZW50cyIsImlucHV0IiwiX2tleSIsImtleSIsInZhbHVlIiwiY29uc29sZSIsIndhcm4iLCJjb252ZXJ0RXJyb3IiLCJlcnJvciIsIm91dCIsIm1lc3NhZ2UiLCJjb252ZXJ0RXJyb3JzIiwiZXJycyIsImVycm9ycyIsImVuc3VyZUFycmF5IiwibWFwIiwiZSJdLCJzb3VyY2VzIjpbImhlbHBlcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBFcnJvckxpa2UgfSBmcm9tIFwiLi90eXBlc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tWYWxpZEFyZ3Moa2V5VmFsdWVQYWlyczogdW5rbm93bltdLCBjYWxsYmFjazogdW5rbm93bikge1xuICBpZiAoXG4gICAgIUFycmF5LmlzQXJyYXkoa2V5VmFsdWVQYWlycykgfHxcbiAgICBrZXlWYWx1ZVBhaXJzLmxlbmd0aCA9PT0gMCB8fFxuICAgICFBcnJheS5pc0FycmF5KGtleVZhbHVlUGFpcnNbMF0pXG4gICkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiW0FzeW5jU3RvcmFnZV0gRXhwZWN0ZWQgYXJyYXkgb2Yga2V5LXZhbHVlIHBhaXJzIGFzIGZpcnN0IGFyZ3VtZW50IHRvIG11bHRpU2V0XCJcbiAgICApO1xuICB9XG5cbiAgaWYgKGNhbGxiYWNrICYmIHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2FsbGJhY2spKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiW0FzeW5jU3RvcmFnZV0gRXhwZWN0ZWQgZnVuY3Rpb24gYXMgc2Vjb25kIGFyZ3VtZW50IHRvIG11bHRpU2V0LiBEaWQgeW91IGZvcmdldCB0byB3cmFwIGtleS12YWx1ZSBwYWlycyBpbiBhbiBhcnJheSBmb3IgdGhlIGZpcnN0IGFyZ3VtZW50P1wiXG4gICAgICApO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiW0FzeW5jU3RvcmFnZV0gRXhwZWN0ZWQgZnVuY3Rpb24gYXMgc2Vjb25kIGFyZ3VtZW50IHRvIG11bHRpU2V0XCJcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja1ZhbGlkSW5wdXQoLi4uaW5wdXQ6IHVua25vd25bXSkge1xuICBjb25zdCBba2V5LCB2YWx1ZV0gPSBpbnB1dDtcblxuICBpZiAodHlwZW9mIGtleSAhPT0gXCJzdHJpbmdcIikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS53YXJuKFxuICAgICAgYFtBc3luY1N0b3JhZ2VdIFVzaW5nICR7dHlwZW9mIGtleX0gdHlwZSBmb3Iga2V5IGlzIG5vdCBzdXBwb3J0ZWQuIFRoaXMgY2FuIGxlYWQgdG8gdW5leHBlY3RlZCBiZWhhdmlvci9lcnJvcnMuIFVzZSBzdHJpbmcgaW5zdGVhZC5cXG5LZXkgcGFzc2VkOiAke2tleX1cXG5gXG4gICAgKTtcbiAgfVxuXG4gIGlmIChpbnB1dC5sZW5ndGggPiAxICYmIHR5cGVvZiB2YWx1ZSAhPT0gXCJzdHJpbmdcIikge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBbQXN5bmNTdG9yYWdlXSBQYXNzaW5nIG51bGwvdW5kZWZpbmVkIGFzIHZhbHVlIGlzIG5vdCBzdXBwb3J0ZWQuIElmIHlvdSB3YW50IHRvIHJlbW92ZSB2YWx1ZSwgVXNlIC5yZW1vdmVJdGVtIG1ldGhvZCBpbnN0ZWFkLlxcblBhc3NlZCB2YWx1ZTogJHt2YWx1ZX1cXG5QYXNzZWQga2V5OiAke2tleX1cXG5gXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBgW0FzeW5jU3RvcmFnZV0gVGhlIHZhbHVlIGZvciBrZXkgXCIke2tleX1cIiBpcyBub3QgYSBzdHJpbmcuIFRoaXMgY2FuIGxlYWQgdG8gdW5leHBlY3RlZCBiZWhhdmlvci9lcnJvcnMuIENvbnNpZGVyIHN0cmluZ2lmeWluZyBpdC5cXG5QYXNzZWQgdmFsdWU6ICR7dmFsdWV9XFxuUGFzc2VkIGtleTogJHtrZXl9XFxuYFxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRFcnJvcihlcnJvcj86IEVycm9yTGlrZSk6IEVycm9yIHwgbnVsbCB7XG4gIGlmICghZXJyb3IpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IG91dCA9IG5ldyBFcnJvcihlcnJvci5tZXNzYWdlKSBhcyBFcnJvciAmIEVycm9yTGlrZTtcbiAgb3V0W1wia2V5XCJdID0gZXJyb3Iua2V5O1xuICByZXR1cm4gb3V0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udmVydEVycm9ycyhcbiAgZXJycz86IEVycm9yTGlrZVtdXG4pOiBSZWFkb25seUFycmF5PEVycm9yIHwgbnVsbD4gfCBudWxsIHtcbiAgY29uc3QgZXJyb3JzID0gZW5zdXJlQXJyYXkoZXJycyk7XG4gIHJldHVybiBlcnJvcnMgPyBlcnJvcnMubWFwKChlKSA9PiBjb252ZXJ0RXJyb3IoZSkpIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gZW5zdXJlQXJyYXkoZT86IEVycm9yTGlrZSB8IEVycm9yTGlrZVtdKTogRXJyb3JMaWtlW10gfCBudWxsIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICByZXR1cm4gZS5sZW5ndGggPT09IDAgPyBudWxsIDogZTtcbiAgfSBlbHNlIGlmIChlKSB7XG4gICAgcmV0dXJuIFtlXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnVsbDtcbiAg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