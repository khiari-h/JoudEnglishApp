f92d311d7591ca49b481fc6d5374351f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _vectorIcons = require("@expo/vector-icons");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var InstructionBox = function InstructionBox(_ref) {
  var _ref$title = _ref.title,
    title = _ref$title === void 0 ? "Instructions" : _ref$title,
    instructions = _ref.instructions,
    _ref$examples = _ref.examples,
    examples = _ref$examples === void 0 ? [] : _ref$examples,
    _ref$tips = _ref.tips,
    tips = _ref$tips === void 0 ? [] : _ref$tips,
    _ref$initiallyExpande = _ref.initiallyExpanded,
    initiallyExpanded = _ref$initiallyExpande === void 0 ? true : _ref$initiallyExpande,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? "standard" : _ref$variant,
    _ref$primaryColor = _ref.primaryColor,
    primaryColor = _ref$primaryColor === void 0 ? "#5E60CE" : _ref$primaryColor;
  var _useState = (0, _react.useState)(initiallyExpanded),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    expanded = _useState2[0],
    setExpanded = _useState2[1];
  var _useState3 = (0, _react.useState)(new _reactNative.Animated.Value(initiallyExpanded ? 1 : 0)),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 1),
    animation = _useState4[0];
  var toggleExpanded = (0, _react.useCallback)(function () {
    var toValue = expanded ? 0 : 1;
    _reactNative.Animated.timing(animation, {
      toValue: toValue,
      duration: 300,
      useNativeDriver: false
    }).start();
    setExpanded(function (prev) {
      return !prev;
    });
  }, [expanded, animation]);
  var getVariantStyle = function getVariantStyle() {
    switch (variant) {
      case "compact":
        return [_style.default.compactContainer];
      case "highlighted":
        return [_style.default.highlightedContainer, {
          borderColor: primaryColor
        }];
      case "standard":
      default:
        return [_style.default.standardContainer];
    }
  };
  var maxHeight = animation.interpolate({
    inputRange: [0, 1],
    outputRange: [60, 1000]
  });
  var rotateIcon = animation.interpolate({
    inputRange: [0, 1],
    outputRange: ["0deg", "180deg"]
  });
  return (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
    style: [_style.default.container, getVariantStyle(), {
      maxHeight: maxHeight
    }],
    children: [(0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
      style: _style.default.headerContainer,
      onPress: toggleExpanded,
      activeOpacity: 0.7,
      children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: _style.default.titleContainer,
        children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: "information-circle",
          size: 24,
          color: primaryColor,
          style: _style.default.titleIcon
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [_style.default.title, {
            color: primaryColor
          }],
          children: title
        })]
      }), (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
        style: {
          transform: [{
            rotate: rotateIcon
          }]
        },
        children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: "chevron-down",
          size: 24,
          color: "#6B7280"
        })
      })]
    }), expanded && (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: _style.default.contentContainer,
      children: [instructions && (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: _style.default.instructions,
        children: instructions
      }), examples.length > 0 && (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: _style.default.examplesContainer,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: _style.default.sectionTitle,
          children: "Exemples:"
        }), examples.map(function (example) {
          return (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: _style.default.exampleItem,
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: _style.default.exampleText,
              children: example
            })
          }, example);
        })]
      }), tips.length > 0 && (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: _style.default.tipsContainer,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: _style.default.sectionTitle,
          children: "Astuces:"
        }), tips.map(function (tip) {
          return (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: _style.default.tipItem,
            children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: "bulb-outline",
              size: 16,
              color: primaryColor,
              style: _style.default.tipIcon
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: _style.default.tipText,
              children: tip
            })]
          }, tip);
        })]
      })]
    })]
  });
};
InstructionBox.propTypes = {
  title: _propTypes.default.string,
  instructions: _propTypes.default.string,
  examples: _propTypes.default.arrayOf(_propTypes.default.string),
  tips: _propTypes.default.arrayOf(_propTypes.default.string),
  initiallyExpanded: _propTypes.default.bool,
  variant: _propTypes.default.oneOf(['standard', 'compact', 'highlighted']),
  primaryColor: _propTypes.default.string
};
InstructionBox.defaultProps = {
  title: "Instructions",
  instructions: null,
  examples: [],
  tips: [],
  initiallyExpanded: true,
  variant: "standard",
  primaryColor: "#5E60CE"
};
var _default = exports.default = InstructionBox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,