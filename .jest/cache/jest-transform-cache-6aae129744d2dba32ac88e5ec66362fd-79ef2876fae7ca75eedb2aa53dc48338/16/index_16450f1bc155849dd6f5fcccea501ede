82383f9a6256ac82d6150864df78da2f
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
function cov_1t63d9y0y() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\data\\phrases\\5\\index.js";
  var hash = "55c06cf5662bc411fda5d73ff5709b42dd805965";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\data\\phrases\\5\\index.js",
    statementMap: {
      "0": {
        start: {
          line: 33,
          column: 18
        },
        end: {
          line: 61,
          column: 1
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "55c06cf5662bc411fda5d73ff5709b42dd805965"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_1t63d9y0y = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1t63d9y0y();
import { CATEGORIES, DIFFICULTY, CATEGORY_DESCRIPTIONS, USAGE_NOTES, LEVEL_INFO, CONTENT_STATS, LEARNING_SEQUENCE } from './metadata.js';
import negotiationsPersuasion from './categories/negotiations-persuasion.js';
import idiomaticExpressionsAdvanced from './categories/idiomatic-expressions-advanced.js';
import opinionNuances from './categories/opinion-nuances.js';
import critiquesEvaluations from './categories/critiques-evaluations.js';
import humorCulturalSubtleties from './categories/humor-cultural-subtleties.js';
import historicalCulturalReferences from './categories/historical-cultural-references.js';
import complexDebates from './categories/complex-debates.js';
import formalInformalDiscourse from './categories/formal-informal-discourse.js';
import euphemismsDiplomaticLanguage from './categories/euphemisms-diplomatic-language.js';
import certitudeDoubtExpressions from './categories/certitude-doubt-expressions.js';
import literaryExpressions from './categories/literary-expressions.js';
import advancedTechnologyScience from './categories/advanced-technology-science.js';
import internationalRelations from './categories/international-relations.js';
var phrasesC1 = (cov_1t63d9y0y().s[0]++, {
  difficulty: DIFFICULTY,
  categoryDescriptions: CATEGORY_DESCRIPTIONS,
  usageNotes: USAGE_NOTES,
  levelInfo: LEVEL_INFO,
  contentStats: CONTENT_STATS,
  learningSequence: LEARNING_SEQUENCE,
  categories: CATEGORIES,
  phrases: [].concat(_toConsumableArray(negotiationsPersuasion), _toConsumableArray(idiomaticExpressionsAdvanced), _toConsumableArray(opinionNuances), _toConsumableArray(critiquesEvaluations), _toConsumableArray(humorCulturalSubtleties), _toConsumableArray(historicalCulturalReferences), _toConsumableArray(complexDebates), _toConsumableArray(formalInformalDiscourse), _toConsumableArray(euphemismsDiplomaticLanguage), _toConsumableArray(certitudeDoubtExpressions), _toConsumableArray(literaryExpressions), _toConsumableArray(advancedTechnologyScience), _toConsumableArray(internationalRelations))
});
export default phrasesC1;
export { negotiationsPersuasion, idiomaticExpressionsAdvanced, opinionNuances, critiquesEvaluations, humorCulturalSubtleties, historicalCulturalReferences, complexDebates, formalInformalDiscourse, euphemismsDiplomaticLanguage, certitudeDoubtExpressions, literaryExpressions, advancedTechnologyScience, internationalRelations, CATEGORIES, DIFFICULTY, CATEGORY_DESCRIPTIONS, USAGE_NOTES, LEVEL_INFO, CONTENT_STATS, LEARNING_SEQUENCE };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDQVRFR09SSUVTIiwiRElGRklDVUxUWSIsIkNBVEVHT1JZX0RFU0NSSVBUSU9OUyIsIlVTQUdFX05PVEVTIiwiTEVWRUxfSU5GTyIsIkNPTlRFTlRfU1RBVFMiLCJMRUFSTklOR19TRVFVRU5DRSIsIm5lZ290aWF0aW9uc1BlcnN1YXNpb24iLCJpZGlvbWF0aWNFeHByZXNzaW9uc0FkdmFuY2VkIiwib3Bpbmlvbk51YW5jZXMiLCJjcml0aXF1ZXNFdmFsdWF0aW9ucyIsImh1bW9yQ3VsdHVyYWxTdWJ0bGV0aWVzIiwiaGlzdG9yaWNhbEN1bHR1cmFsUmVmZXJlbmNlcyIsImNvbXBsZXhEZWJhdGVzIiwiZm9ybWFsSW5mb3JtYWxEaXNjb3Vyc2UiLCJldXBoZW1pc21zRGlwbG9tYXRpY0xhbmd1YWdlIiwiY2VydGl0dWRlRG91YnRFeHByZXNzaW9ucyIsImxpdGVyYXJ5RXhwcmVzc2lvbnMiLCJhZHZhbmNlZFRlY2hub2xvZ3lTY2llbmNlIiwiaW50ZXJuYXRpb25hbFJlbGF0aW9ucyIsInBocmFzZXNDMSIsImNvdl8xdDYzZDl5MHkiLCJzIiwiZGlmZmljdWx0eSIsImNhdGVnb3J5RGVzY3JpcHRpb25zIiwidXNhZ2VOb3RlcyIsImxldmVsSW5mbyIsImNvbnRlbnRTdGF0cyIsImxlYXJuaW5nU2VxdWVuY2UiLCJjYXRlZ29yaWVzIiwicGhyYXNlcyIsImNvbmNhdCIsIl90b0NvbnN1bWFibGVBcnJheSJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9kYXRhL2V4ZXJjaXNlcy9waHJhc2VzL2MxL2luZGV4LmpzXG4vLyBGaWNoaWVyIGluZGV4IHBvdXIgbGUgbml2ZWF1IEMxXG4vLyBJbXBvcnRlIHRvdXRlcyBsZXMgY2F0w6lnb3JpZXMgZXQgbGVzIGV4cG9ydGUgY29tbWUgdW4gc2V1bCBvYmpldFxuXG5pbXBvcnQgeyBDQVRFR09SSUVTLCBESUZGSUNVTFRZLCBDQVRFR09SWV9ERVNDUklQVElPTlMsIFVTQUdFX05PVEVTLCBMRVZFTF9JTkZPLCBDT05URU5UX1NUQVRTLCBMRUFSTklOR19TRVFVRU5DRSB9IGZyb20gJy4vbWV0YWRhdGEuanMnO1xuaW1wb3J0IG5lZ290aWF0aW9uc1BlcnN1YXNpb24gZnJvbSAnLi9jYXRlZ29yaWVzL25lZ290aWF0aW9ucy1wZXJzdWFzaW9uLmpzJztcbmltcG9ydCBpZGlvbWF0aWNFeHByZXNzaW9uc0FkdmFuY2VkIGZyb20gJy4vY2F0ZWdvcmllcy9pZGlvbWF0aWMtZXhwcmVzc2lvbnMtYWR2YW5jZWQuanMnO1xuaW1wb3J0IG9waW5pb25OdWFuY2VzIGZyb20gJy4vY2F0ZWdvcmllcy9vcGluaW9uLW51YW5jZXMuanMnO1xuaW1wb3J0IGNyaXRpcXVlc0V2YWx1YXRpb25zIGZyb20gJy4vY2F0ZWdvcmllcy9jcml0aXF1ZXMtZXZhbHVhdGlvbnMuanMnO1xuaW1wb3J0IGh1bW9yQ3VsdHVyYWxTdWJ0bGV0aWVzIGZyb20gJy4vY2F0ZWdvcmllcy9odW1vci1jdWx0dXJhbC1zdWJ0bGV0aWVzLmpzJztcbmltcG9ydCBoaXN0b3JpY2FsQ3VsdHVyYWxSZWZlcmVuY2VzIGZyb20gJy4vY2F0ZWdvcmllcy9oaXN0b3JpY2FsLWN1bHR1cmFsLXJlZmVyZW5jZXMuanMnO1xuaW1wb3J0IGNvbXBsZXhEZWJhdGVzIGZyb20gJy4vY2F0ZWdvcmllcy9jb21wbGV4LWRlYmF0ZXMuanMnO1xuaW1wb3J0IGZvcm1hbEluZm9ybWFsRGlzY291cnNlIGZyb20gJy4vY2F0ZWdvcmllcy9mb3JtYWwtaW5mb3JtYWwtZGlzY291cnNlLmpzJztcbmltcG9ydCBldXBoZW1pc21zRGlwbG9tYXRpY0xhbmd1YWdlIGZyb20gJy4vY2F0ZWdvcmllcy9ldXBoZW1pc21zLWRpcGxvbWF0aWMtbGFuZ3VhZ2UuanMnO1xuaW1wb3J0IGNlcnRpdHVkZURvdWJ0RXhwcmVzc2lvbnMgZnJvbSAnLi9jYXRlZ29yaWVzL2NlcnRpdHVkZS1kb3VidC1leHByZXNzaW9ucy5qcyc7XG5pbXBvcnQgbGl0ZXJhcnlFeHByZXNzaW9ucyBmcm9tICcuL2NhdGVnb3JpZXMvbGl0ZXJhcnktZXhwcmVzc2lvbnMuanMnO1xuXG5pbXBvcnQgYWR2YW5jZWRUZWNobm9sb2d5U2NpZW5jZSBmcm9tICcuL2NhdGVnb3JpZXMvYWR2YW5jZWQtdGVjaG5vbG9neS1zY2llbmNlLmpzJztcbmltcG9ydCBpbnRlcm5hdGlvbmFsUmVsYXRpb25zIGZyb20gJy4vY2F0ZWdvcmllcy9pbnRlcm5hdGlvbmFsLXJlbGF0aW9ucy5qcyc7XG5cbi8qKlxuICogQ29udGllbnQgdG91dGVzIGxlcyBkb25uw6llcyBwb3VyIGxlcyBwaHJhc2VzIGRlIG5pdmVhdSBDMVxuICogQHR5cGVkZWYge09iamVjdH0gUGhyYXNlc0MxXG4gKiBAcHJvcGVydHkge0FycmF5PE9iamVjdD59IGNhdGVnb3JpZXMgLSBMaXN0ZSBkZXMgY2F0w6lnb3JpZXNcbiAqIEBwcm9wZXJ0eSB7QXJyYXk8T2JqZWN0Pn0gcGhyYXNlcyAtIExpc3RlIGNvbXBsw6h0ZSBkZXMgcGhyYXNlcyBkZSB0b3V0ZXMgbGVzIGNhdMOpZ29yaWVzXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGlmZmljdWx0eSAtIE5pdmVhdSBkZSBkaWZmaWN1bHTDqSBDRUNSXG4gKiBAcHJvcGVydHkge09iamVjdH0gY2F0ZWdvcnlEZXNjcmlwdGlvbnMgLSBEZXNjcmlwdGlvbnMgZMOpdGFpbGzDqWVzIGRlIGNoYXF1ZSBjYXTDqWdvcmllXG4gKiBAcHJvcGVydHkge09iamVjdH0gdXNhZ2VOb3RlcyAtIE5vdGVzIHN1ciBsJ3V0aWxpc2F0aW9uIGZvcm1lbGxlL2luZm9ybWVsbGVcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBsZXZlbEluZm8gLSBJbmZvcm1hdGlvbnMgc3VyIGxlIG5pdmVhdSBDMVxuICogQHByb3BlcnR5IHtPYmplY3R9IGNvbnRlbnRTdGF0cyAtIFN0YXRpc3RpcXVlcyBzdXIgbGUgY29udGVudVxuICogQHByb3BlcnR5IHtBcnJheTxzdHJpbmc+fSBsZWFybmluZ1NlcXVlbmNlIC0gU8OpcXVlbmNlIGQnYXBwcmVudGlzc2FnZSByZWNvbW1hbmTDqWVcbiAqL1xuY29uc3QgcGhyYXNlc0MxID0ge1xuICAvLyBNw6l0YWRvbm7DqWVzXG4gIGRpZmZpY3VsdHk6IERJRkZJQ1VMVFksXG4gIGNhdGVnb3J5RGVzY3JpcHRpb25zOiBDQVRFR09SWV9ERVNDUklQVElPTlMsXG4gIHVzYWdlTm90ZXM6IFVTQUdFX05PVEVTLFxuICBsZXZlbEluZm86IExFVkVMX0lORk8sXG4gIGNvbnRlbnRTdGF0czogQ09OVEVOVF9TVEFUUyxcbiAgbGVhcm5pbmdTZXF1ZW5jZTogTEVBUk5JTkdfU0VRVUVOQ0UsXG5cbiAgLy8gRG9ubsOpZXMgcHJpbmNpcGFsZXNcbiAgY2F0ZWdvcmllczogQ0FURUdPUklFUyxcbiAgcGhyYXNlczogW1xuICAgIFxuICAgIC4uLm5lZ290aWF0aW9uc1BlcnN1YXNpb24sXG4gICAgLi4uaWRpb21hdGljRXhwcmVzc2lvbnNBZHZhbmNlZCxcbiAgICAuLi5vcGluaW9uTnVhbmNlcyxcbiAgICAuLi5jcml0aXF1ZXNFdmFsdWF0aW9ucyxcbiAgICAuLi5odW1vckN1bHR1cmFsU3VidGxldGllcyxcbiAgICAuLi5oaXN0b3JpY2FsQ3VsdHVyYWxSZWZlcmVuY2VzLFxuICAgIC4uLmNvbXBsZXhEZWJhdGVzLFxuICAgIC4uLmZvcm1hbEluZm9ybWFsRGlzY291cnNlLFxuICAgIC4uLmV1cGhlbWlzbXNEaXBsb21hdGljTGFuZ3VhZ2UsXG4gICAgLi4uY2VydGl0dWRlRG91YnRFeHByZXNzaW9ucyxcbiAgICAuLi5saXRlcmFyeUV4cHJlc3Npb25zLFxuXG4gICAgLi4uYWR2YW5jZWRUZWNobm9sb2d5U2NpZW5jZSxcbiAgICAuLi5pbnRlcm5hdGlvbmFsUmVsYXRpb25zXG4gIF1cbn07XG5cbi8vIEV4cG9ydCBwcmluY2lwYWwgKHBvdXIgaW1wb3J0IGRlZmF1bHQpXG5leHBvcnQgZGVmYXVsdCBwaHJhc2VzQzE7XG5cbi8vIEV4cG9ydHMgbm9tbcOpcyBwb3VyIHBlcm1ldHRyZSBkJ2ltcG9ydGVyIGRlcyBjYXTDqWdvcmllcyBzcMOpY2lmaXF1ZXNcbmV4cG9ydCB7IFxuICBcbiAgbmVnb3RpYXRpb25zUGVyc3Vhc2lvbixcbiAgaWRpb21hdGljRXhwcmVzc2lvbnNBZHZhbmNlZCxcbiAgb3Bpbmlvbk51YW5jZXMsXG4gIGNyaXRpcXVlc0V2YWx1YXRpb25zLFxuICBodW1vckN1bHR1cmFsU3VidGxldGllcyxcbiAgaGlzdG9yaWNhbEN1bHR1cmFsUmVmZXJlbmNlcyxcbiAgY29tcGxleERlYmF0ZXMsXG4gIGZvcm1hbEluZm9ybWFsRGlzY291cnNlLFxuICBldXBoZW1pc21zRGlwbG9tYXRpY0xhbmd1YWdlLFxuICBjZXJ0aXR1ZGVEb3VidEV4cHJlc3Npb25zLFxuICBsaXRlcmFyeUV4cHJlc3Npb25zLFxuXG4gIGFkdmFuY2VkVGVjaG5vbG9neVNjaWVuY2UsXG4gIGludGVybmF0aW9uYWxSZWxhdGlvbnMsXG4gIENBVEVHT1JJRVMsXG4gIERJRkZJQ1VMVFksXG4gIENBVEVHT1JZX0RFU0NSSVBUSU9OUyxcbiAgVVNBR0VfTk9URVMsXG4gIExFVkVMX0lORk8sXG4gIENPTlRFTlRfU1RBVFMsXG4gIExFQVJOSU5HX1NFUVVFTkNFXG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBSUEsU0FBU0EsVUFBVSxFQUFFQyxVQUFVLEVBQUVDLHFCQUFxQixFQUFFQyxXQUFXLEVBQUVDLFVBQVUsRUFBRUMsYUFBYSxFQUFFQyxpQkFBaUIsUUFBUSxlQUFlO0FBQ3hJLE9BQU9DLHNCQUFzQixNQUFNLHlDQUF5QztBQUM1RSxPQUFPQyw0QkFBNEIsTUFBTSxnREFBZ0Q7QUFDekYsT0FBT0MsY0FBYyxNQUFNLGlDQUFpQztBQUM1RCxPQUFPQyxvQkFBb0IsTUFBTSx1Q0FBdUM7QUFDeEUsT0FBT0MsdUJBQXVCLE1BQU0sMkNBQTJDO0FBQy9FLE9BQU9DLDRCQUE0QixNQUFNLGdEQUFnRDtBQUN6RixPQUFPQyxjQUFjLE1BQU0saUNBQWlDO0FBQzVELE9BQU9DLHVCQUF1QixNQUFNLDJDQUEyQztBQUMvRSxPQUFPQyw0QkFBNEIsTUFBTSxnREFBZ0Q7QUFDekYsT0FBT0MseUJBQXlCLE1BQU0sNkNBQTZDO0FBQ25GLE9BQU9DLG1CQUFtQixNQUFNLHNDQUFzQztBQUV0RSxPQUFPQyx5QkFBeUIsTUFBTSw2Q0FBNkM7QUFDbkYsT0FBT0Msc0JBQXNCLE1BQU0seUNBQXlDO0FBYzVFLElBQU1DLFNBQVMsSUFBQUMsYUFBQSxHQUFBQyxDQUFBLE9BQUc7RUFFaEJDLFVBQVUsRUFBRXRCLFVBQVU7RUFDdEJ1QixvQkFBb0IsRUFBRXRCLHFCQUFxQjtFQUMzQ3VCLFVBQVUsRUFBRXRCLFdBQVc7RUFDdkJ1QixTQUFTLEVBQUV0QixVQUFVO0VBQ3JCdUIsWUFBWSxFQUFFdEIsYUFBYTtFQUMzQnVCLGdCQUFnQixFQUFFdEIsaUJBQWlCO0VBR25DdUIsVUFBVSxFQUFFN0IsVUFBVTtFQUN0QjhCLE9BQU8sS0FBQUMsTUFBQSxDQUFBQyxrQkFBQSxDQUVGekIsc0JBQXNCLEdBQUF5QixrQkFBQSxDQUN0QnhCLDRCQUE0QixHQUFBd0Isa0JBQUEsQ0FDNUJ2QixjQUFjLEdBQUF1QixrQkFBQSxDQUNkdEIsb0JBQW9CLEdBQUFzQixrQkFBQSxDQUNwQnJCLHVCQUF1QixHQUFBcUIsa0JBQUEsQ0FDdkJwQiw0QkFBNEIsR0FBQW9CLGtCQUFBLENBQzVCbkIsY0FBYyxHQUFBbUIsa0JBQUEsQ0FDZGxCLHVCQUF1QixHQUFBa0Isa0JBQUEsQ0FDdkJqQiw0QkFBNEIsR0FBQWlCLGtCQUFBLENBQzVCaEIseUJBQXlCLEdBQUFnQixrQkFBQSxDQUN6QmYsbUJBQW1CLEdBQUFlLGtCQUFBLENBRW5CZCx5QkFBeUIsR0FBQWMsa0JBQUEsQ0FDekJiLHNCQUFzQjtBQUU3QixDQUFDO0FBR0QsZUFBZUMsU0FBUztBQUd4QixTQUVFYixzQkFBc0IsRUFDdEJDLDRCQUE0QixFQUM1QkMsY0FBYyxFQUNkQyxvQkFBb0IsRUFDcEJDLHVCQUF1QixFQUN2QkMsNEJBQTRCLEVBQzVCQyxjQUFjLEVBQ2RDLHVCQUF1QixFQUN2QkMsNEJBQTRCLEVBQzVCQyx5QkFBeUIsRUFDekJDLG1CQUFtQixFQUVuQkMseUJBQXlCLEVBQ3pCQyxzQkFBc0IsRUFDdEJuQixVQUFVLEVBQ1ZDLFVBQVUsRUFDVkMscUJBQXFCLEVBQ3JCQyxXQUFXLEVBQ1hDLFVBQVUsRUFDVkMsYUFBYSxFQUNiQyxpQkFBaUIiLCJpZ25vcmVMaXN0IjpbXX0=