f1f3b779dc24b2be2ba7f82b57600d7f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CategorySelector = _interopRequireDefault(require("../../../../components/exercise-common/CategorySelector"));
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
function cov_1rvowhqdue() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\exercises\\vocabulary\\VocabularyCategorySelector\\index.js";
  var hash = "5da3447b0f1108761fcf506a4116a0c6cdddf337";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\exercises\\vocabulary\\VocabularyCategorySelector\\index.js",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 35
        },
        end: {
          line: 40,
          column: 1
        }
      },
      "1": {
        start: {
          line: 16,
          column: 30
        },
        end: {
          line: 19,
          column: 5
        }
      },
      "2": {
        start: {
          line: 16,
          column: 72
        },
        end: {
          line: 19,
          column: 3
        }
      },
      "3": {
        start: {
          line: 23,
          column: 31
        },
        end: {
          line: 30,
          column: 24
        }
      },
      "4": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 29,
          column: 5
        }
      },
      "5": {
        start: {
          line: 26,
          column: 6
        },
        end: {
          line: 26,
          column: 26
        }
      },
      "6": {
        start: {
          line: 28,
          column: 6
        },
        end: {
          line: 28,
          column: 35
        }
      },
      "7": {
        start: {
          line: 32,
          column: 2
        },
        end: {
          line: 39,
          column: 4
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 35
          },
          end: {
            line: 9,
            column: 36
          }
        },
        loc: {
          start: {
            line: 14,
            column: 6
          },
          end: {
            line: 40,
            column: 1
          }
        },
        line: 14
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 45
          },
          end: {
            line: 16,
            column: 46
          }
        },
        loc: {
          start: {
            line: 16,
            column: 72
          },
          end: {
            line: 19,
            column: 3
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 23,
            column: 43
          },
          end: {
            line: 23,
            column: 44
          }
        },
        loc: {
          start: {
            line: 23,
            column: 59
          },
          end: {
            line: 30,
            column: 3
          }
        },
        line: 23
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 2
          },
          end: {
            line: 10,
            column: 17
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 10,
            column: 15
          },
          end: {
            line: 10,
            column: 17
          }
        }],
        line: 10
      },
      "1": {
        loc: {
          start: {
            line: 11,
            column: 2
          },
          end: {
            line: 11,
            column: 19
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 11,
            column: 18
          },
          end: {
            line: 11,
            column: 19
          }
        }],
        line: 11
      },
      "2": {
        loc: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        }, {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 29,
            column: 5
          }
        }],
        line: 25
      },
      "3": {
        loc: {
          start: {
            line: 35,
            column: 24
          },
          end: {
            line: 35,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 35,
            column: 54
          },
          end: {
            line: 35,
            column: 55
          }
        }, {
          start: {
            line: 35,
            column: 58
          },
          end: {
            line: 35,
            column: 71
          }
        }],
        line: 35
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5da3447b0f1108761fcf506a4116a0c6cdddf337"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_1rvowhqdue = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1rvowhqdue();
cov_1rvowhqdue().s[0]++;
var VocabularyCategorySelector = function VocabularyCategorySelector(_ref) {
  var _ref$categories = _ref.categories,
    categories = _ref$categories === void 0 ? (cov_1rvowhqdue().b[0][0]++, []) : _ref$categories,
    _ref$selectedIndex = _ref.selectedIndex,
    selectedIndex = _ref$selectedIndex === void 0 ? (cov_1rvowhqdue().b[1][0]++, 0) : _ref$selectedIndex,
    onSelectCategory = _ref.onSelectCategory,
    levelColor = _ref.levelColor;
  cov_1rvowhqdue().f[0]++;
  var formattedCategories = (cov_1rvowhqdue().s[1]++, categories.map(function (categoryTitle, index) {
    cov_1rvowhqdue().f[1]++;
    cov_1rvowhqdue().s[2]++;
    return {
      id: index,
      name: categoryTitle
    };
  }));
  var handleCategorySelect = (cov_1rvowhqdue().s[3]++, (0, _react.useCallback)(function (categoryId) {
    cov_1rvowhqdue().f[2]++;
    cov_1rvowhqdue().s[4]++;
    if (categoryId === null) {
      cov_1rvowhqdue().b[2][0]++;
      cov_1rvowhqdue().s[5]++;
      onSelectCategory(0);
    } else {
      cov_1rvowhqdue().b[2][1]++;
      cov_1rvowhqdue().s[6]++;
      onSelectCategory(categoryId);
    }
  }, [onSelectCategory]));
  cov_1rvowhqdue().s[7]++;
  return (0, _jsxRuntime.jsx)(_CategorySelector.default, {
    categories: formattedCategories,
    selectedCategory: selectedIndex === undefined ? (cov_1rvowhqdue().b[3][0]++, 0) : (cov_1rvowhqdue().b[3][1]++, selectedIndex),
    onSelectCategory: handleCategorySelect,
    primaryColor: levelColor
  });
};
var _default = exports.default = VocabularyCategorySelector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,