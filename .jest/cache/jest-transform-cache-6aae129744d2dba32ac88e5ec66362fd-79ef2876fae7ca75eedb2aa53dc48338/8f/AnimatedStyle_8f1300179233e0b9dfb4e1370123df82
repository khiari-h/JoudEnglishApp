00c6d77e0492944575da3af335fd6d84
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseBase"));
var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseKey"));
var _NativeAnimatedValidation = require("../../../src/private/animated/NativeAnimatedValidation");
var ReactNativeFeatureFlags = _interopRequireWildcard(require("../../../src/private/featureflags/ReactNativeFeatureFlags"));
var _flattenStyle2 = _interopRequireDefault(require("../../StyleSheet/flattenStyle"));
var _Platform = _interopRequireDefault(require("../../Utilities/Platform"));
var _AnimatedNode = _interopRequireDefault(require("./AnimatedNode"));
var _AnimatedObject = _interopRequireDefault(require("./AnimatedObject"));
var _AnimatedTransform = _interopRequireDefault(require("./AnimatedTransform"));
var _AnimatedWithChildren2 = _interopRequireDefault(require("./AnimatedWithChildren"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
function createAnimatedStyle(inputStyle, keepUnanimatedValues) {
  var nodeKeys = [];
  var nodes = [];
  var style = {};
  var keys = Object.keys(inputStyle);
  for (var ii = 0, length = keys.length; ii < length; ii++) {
    var key = keys[ii];
    var value = inputStyle[key];
    if (value != null && key === 'transform') {
      var node = ReactNativeFeatureFlags.shouldUseAnimatedObjectForTransform() ? _AnimatedObject.default.from(value) : new _AnimatedTransform.default(value);
      if (node == null) {
        if (keepUnanimatedValues) {
          style[key] = value;
        }
      } else {
        nodeKeys.push(key);
        nodes.push(node);
        style[key] = node;
      }
    } else if (value instanceof _AnimatedNode.default) {
      var _node = value;
      nodeKeys.push(key);
      nodes.push(_node);
      style[key] = value;
    } else {
      var _node2 = _AnimatedObject.default.from(value);
      if (_node2 == null) {
        if (keepUnanimatedValues) {
          style[key] = value;
        }
      } else {
        nodeKeys.push(key);
        nodes.push(_node2);
        style[key] = _node2;
      }
    }
  }
  return [nodeKeys, nodes, style];
}
var _nodeKeys = (0, _classPrivateFieldLooseKey2.default)("nodeKeys");
var _nodes = (0, _classPrivateFieldLooseKey2.default)("nodes");
var AnimatedStyle = exports.default = function (_AnimatedWithChildren) {
  function AnimatedStyle(inputStyle) {
    var _flattenStyle;
    var _this;
    (0, _classCallCheck2.default)(this, AnimatedStyle);
    _this = _callSuper(this, AnimatedStyle);
    Object.defineProperty(_this, _nodeKeys, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, _nodes, {
      writable: true,
      value: void 0
    });
    _this._inputStyle = inputStyle;
    var _createAnimatedStyle = createAnimatedStyle((_flattenStyle = (0, _flattenStyle2.default)(inputStyle)) != null ? _flattenStyle : {}, _Platform.default.OS !== 'web'),
      _createAnimatedStyle2 = (0, _slicedToArray2.default)(_createAnimatedStyle, 3),
      nodeKeys = _createAnimatedStyle2[0],
      nodes = _createAnimatedStyle2[1],
      style = _createAnimatedStyle2[2];
    (0, _classPrivateFieldLooseBase2.default)(_this, _nodeKeys)[_nodeKeys] = nodeKeys;
    (0, _classPrivateFieldLooseBase2.default)(_this, _nodes)[_nodes] = nodes;
    _this._style = style;
    return _this;
  }
  (0, _inherits2.default)(AnimatedStyle, _AnimatedWithChildren);
  return (0, _createClass2.default)(AnimatedStyle, [{
    key: "__getValue",
    value: function __getValue() {
      var style = {};
      var keys = Object.keys(this._style);
      for (var ii = 0, length = keys.length; ii < length; ii++) {
        var key = keys[ii];
        var value = this._style[key];
        if (value instanceof _AnimatedNode.default) {
          style[key] = value.__getValue();
        } else {
          style[key] = value;
        }
      }
      return _Platform.default.OS === 'web' ? [this._inputStyle, style] : style;
    }
  }, {
    key: "__getAnimatedValue",
    value: function __getAnimatedValue() {
      var style = {};
      var nodeKeys = (0, _classPrivateFieldLooseBase2.default)(this, _nodeKeys)[_nodeKeys];
      var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
      for (var ii = 0, length = nodes.length; ii < length; ii++) {
        var key = nodeKeys[ii];
        var node = nodes[ii];
        style[key] = node.__getAnimatedValue();
      }
      return style;
    }
  }, {
    key: "__attach",
    value: function __attach() {
      var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
      for (var ii = 0, length = nodes.length; ii < length; ii++) {
        var node = nodes[ii];
        node.__addChild(this);
      }
    }
  }, {
    key: "__detach",
    value: function __detach() {
      var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
      for (var ii = 0, length = nodes.length; ii < length; ii++) {
        var node = nodes[ii];
        node.__removeChild(this);
      }
      _superPropGet(AnimatedStyle, "__detach", this, 3)([]);
    }
  }, {
    key: "__makeNative",
    value: function __makeNative(platformConfig) {
      var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
      for (var ii = 0, length = nodes.length; ii < length; ii++) {
        var node = nodes[ii];
        node.__makeNative(platformConfig);
      }
      _superPropGet(AnimatedStyle, "__makeNative", this, 3)([platformConfig]);
    }
  }, {
    key: "__getNativeConfig",
    value: function __getNativeConfig() {
      var platformConfig = this.__getPlatformConfig();
      var styleConfig = {};
      var nodeKeys = (0, _classPrivateFieldLooseBase2.default)(this, _nodeKeys)[_nodeKeys];
      var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
      for (var ii = 0, length = nodes.length; ii < length; ii++) {
        var key = nodeKeys[ii];
        var node = nodes[ii];
        node.__makeNative(platformConfig);
        styleConfig[key] = node.__getNativeTag();
      }
      if (__DEV__) {
        (0, _NativeAnimatedValidation.validateStyles)(styleConfig);
      }
      return {
        type: 'style',
        style: styleConfig
      };
    }
  }]);
}(_AnimatedWithChildren2.default);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,