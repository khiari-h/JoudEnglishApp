1a44af38015d8c5930f8b2594977dc23
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn()
  };
});
_getJestObj().mock('react-native', function () {
  var ReactNative = jest.requireActual('react-native');
  return Object.assign({}, ReactNative, {
    View: ReactNative.View,
    Text: ReactNative.Text,
    ActivityIndicator: function ActivityIndicator(props) {
      return (0, _jsxRuntime.jsx)(ReactNative.ActivityIndicator, Object.assign({}, props, {
        testID: props.testID || 'activity-indicator'
      }));
    }
  });
});
_getJestObj().mock('../../../../src/screens/exercises/spelling/SpellingHeader', function () {
  var _jest$requireActual = jest.requireActual('react-native'),
    View = _jest$requireActual.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "SpellingHeader"
    }, props));
  };
});
_getJestObj().mock('../../../../src/screens/exercises/spelling/SpellingProgress', function () {
  var _jest$requireActual2 = jest.requireActual('react-native'),
    View = _jest$requireActual2.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "SpellingProgress"
    }, props));
  };
});
_getJestObj().mock('../../../../src/screens/exercises/spelling/SpellingCard', function () {
  var _jest$requireActual3 = jest.requireActual('react-native'),
    View = _jest$requireActual3.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "SpellingCard"
    }, props));
  };
});
_getJestObj().mock('../../../../src/screens/exercises/spelling/SpellingActions', function () {
  var _jest$requireActual4 = jest.requireActual('react-native'),
    View = _jest$requireActual4.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "SpellingActions"
    }, props));
  };
});
_getJestObj().mock('../../../../src/components/layout/Container', function () {
  var _jest$requireActual5 = jest.requireActual('react-native'),
    View = _jest$requireActual5.View;
  return function (_ref) {
    var children = _ref.children,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    return (0, _jsxRuntime.jsx)(View, Object.assign({}, props, {
      children: children
    }));
  };
});
_getJestObj().mock('../../../../src/screens/exercises/spelling/hooks/useSpelling');
_getJestObj().mock('../../../../src/hooks/useLastActivity');
_getJestObj().mock('../../../../src/utils/spelling/spellingDataHelper', function () {
  return {
    getSpellingData: jest.fn(function () {
      return {
        exercises: [{
          id: 'ex1',
          wordToCorrect: 'crocodille',
          correctWord: 'crocodile',
          hint: 'Animal reptile',
          explanation: 'Un seul "l" dans crocodile'
        }, {
          id: 'ex2',
          wordToCorrect: 'elefant',
          correctWord: 'éléphant',
          hint: 'Gros mammifère',
          explanation: 'Il faut des accents sur les "é"'
        }]
      };
    }),
    getLevelColor: jest.fn(function () {
      return '#007AFF';
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _native = require("@react-navigation/native");
var _spelling = _interopRequireDefault(require("../../../../src/screens/exercises/spelling"));
var _useSpelling = _interopRequireDefault(require("../../../../src/screens/exercises/spelling/hooks/useSpelling"));
var _useLastActivity = _interopRequireDefault(require("../../../../src/hooks/useLastActivity"));
var _spellingDataHelper = require("../../../../src/utils/spelling/spellingDataHelper");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children"];
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('SpellingExercise - Comprehensive Tests', function () {
  var mockSaveActivity = jest.fn();
  var mockNavigate = jest.fn();
  var mockGoBack = jest.fn();
  var mockSetUserInput = jest.fn();
  var mockToggleHint = jest.fn();
  var mockCheckAnswer = jest.fn();
  var mockHandleNext = jest.fn();
  var mockRetryExercise = jest.fn();
  var mockSpellingData = {
    exercises: [{
      id: 'ex1',
      wordToCorrect: 'crocodille',
      correctWord: 'crocodile',
      hint: 'Animal reptile',
      explanation: 'Un seul "l" dans crocodile'
    }, {
      id: 'ex2',
      wordToCorrect: 'elefant',
      correctWord: 'éléphant',
      hint: 'Gros mammifère',
      explanation: 'Il faut des accents sur les "é"'
    }]
  };
  var setupMocks = function setupMocks() {
    var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var defaultUseSpelling = Object.assign({
      currentExerciseIndex: 0,
      userInput: '',
      showHint: false,
      showFeedback: false,
      isCorrect: false,
      loaded: true,
      currentExercise: mockSpellingData.exercises[0],
      totalExercises: 2,
      setUserInput: mockSetUserInput,
      toggleHint: mockToggleHint,
      checkAnswer: mockCheckAnswer,
      handleNext: mockHandleNext,
      retryExercise: mockRetryExercise,
      isLastExercise: false,
      hasValidData: true
    }, overrides);
    _useSpelling.default.mockReturnValue(defaultUseSpelling);
    _useLastActivity.default.mockReturnValue({
      saveActivity: mockSaveActivity
    });
    _native.useNavigation.mockReturnValue({
      navigate: mockNavigate,
      goBack: mockGoBack
    });
    _spellingDataHelper.getSpellingData.mockReturnValue(mockSpellingData);
  };
  beforeEach(function () {
    jest.clearAllMocks();
    setupMocks();
  });
  describe('Core Functionality and Rendering', function () {
    it('should render the main spelling exercise view correctly', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_spelling.default, {
        route: {
          params: {
            level: '2',
            exerciseType: 'correction'
          }
        }
      }));
      expect(_reactNative.screen.getByTestId('SpellingHeader')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('SpellingProgress')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('SpellingCard')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('SpellingActions')).toBeTruthy();
    });
    it('should call hooks with correct parameters', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_spelling.default, {
        route: {
          params: {
            level: '3',
            exerciseType: 'rules'
          }
        }
      }));
      expect(_useSpelling.default).toHaveBeenCalledWith(mockSpellingData, '3', 'rules');
      expect(_useLastActivity.default).toHaveBeenCalled();
      expect(_spellingDataHelper.getSpellingData).toHaveBeenCalledWith('3', 'rules');
    });
    it('should save activity on initial render', (0, _asyncToGenerator2.default)(function* () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_spelling.default, {
        route: {
          params: {
            level: '1',
            exerciseType: 'correction'
          }
        }
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockSaveActivity).toHaveBeenCalledWith({
          title: 'Orthographe Correction',
          level: '1',
          type: 'spelling',
          metadata: {
            word: 0,
            totalWords: 2,
            exerciseType: 'correction',
            content: 'crocodille'
          }
        });
      });
    }));
    it('should handle different exercise types correctly', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_spelling.default, {
          route: {
            params: {
              level: '1',
              exerciseType: 'correction'
            }
          }
        })),
        rerender = _render.rerender;
      expect(_reactNative.screen.getByTestId('SpellingHeader')).toBeTruthy();
      rerender((0, _jsxRuntime.jsx)(_spelling.default, {
        route: {
          params: {
            level: '1',
            exerciseType: 'rules'
          }
        }
      }));
      expect(_useSpelling.default).toHaveBeenCalledWith(mockSpellingData, '1', 'rules');
      rerender((0, _jsxRuntime.jsx)(_spelling.default, {
        route: {
          params: {
            level: '1',
            exerciseType: 'homophones'
          }
        }
      }));
      expect(_useSpelling.default).toHaveBeenCalledWith(mockSpellingData, '1', 'homophones');
    });
  });
  describe('States and Edge Cases', function () {
    it('should render loading state when not loaded', function () {
      setupMocks({
        loaded: false
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_spelling.default, {
        route: {
          params: {
            level: '1',
            exerciseType: 'correction'
          }
        }
      }));
      expect(_reactNative.screen.getByTestId('activity-indicator')).toBeTruthy();
      expect(_reactNative.screen.getByText('Chargement des exercices...')).toBeTruthy();
      expect(_reactNative.screen.queryByTestId('SpellingCard')).toBeNull();
    });
    it('should render error state when no valid data', function () {
      setupMocks({
        loaded: true,
        hasValidData: false
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_spelling.default, {
        route: {
          params: {
            level: '1',
            exerciseType: 'correction'
          }
        }
      }));
      expect(_reactNative.screen.getByText('Aucune donnée trouvée pour ce niveau.')).toBeTruthy();
      expect(_reactNative.screen.getByText('Veuillez réessayer plus tard.')).toBeTruthy();
      expect(_reactNative.screen.queryByTestId('SpellingCard')).toBeNull();
    });
    it('should handle missing route params by using defaults', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_spelling.default, {
        route: {}
      }));
      expect(_spellingDataHelper.getSpellingData).toHaveBeenCalledWith('1', 'correction');
    });
    it('should handle getSpellingData throwing error', function () {
      _spellingDataHelper.getSpellingData.mockImplementation(function () {
        throw new Error('Data loading failed');
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_spelling.default, {
        route: {
          params: {
            level: '1',
            exerciseType: 'correction'
          }
        }
      }));
      expect(_reactNative.screen.getByTestId('SpellingHeader')).toBeTruthy();
    });
    it('should render correctly when it is the last exercise', function () {
      setupMocks({
        currentExerciseIndex: 1,
        isLastExercise: true,
        currentExercise: mockSpellingData.exercises[1]
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_spelling.default, {
        route: {
          params: {
            level: '1',
            exerciseType: 'correction'
          }
        }
      }));
      var spellingCard = _reactNative.screen.getByTestId('SpellingCard');
      expect(spellingCard.props.isLastExercise).toBe(true);
    });
  });
  describe('Navigation and User Actions', function () {
    it('should navigate back when back button is pressed', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_spelling.default, {
        route: {
          params: {
            level: '2',
            exerciseType: 'correction'
          }
        }
      }));
      var header = _reactNative.screen.getByTestId('SpellingHeader');
      var onBack = header.props.onBack;
      onBack();
      expect(mockGoBack).toHaveBeenCalled();
    });
    it('should call setUserInput when user input changes', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_spelling.default, {
        route: {
          params: {
            level: '1',
            exerciseType: 'correction'
          }
        }
      }));
      var spellingCard = _reactNative.screen.getByTestId('SpellingCard');
      var onUserInputChange = spellingCard.props.onUserInputChange;
      onUserInputChange('crocodile');
      expect(mockSetUserInput).toHaveBeenCalledWith('crocodile');
    });
    it('should call toggleHint when hint button is pressed', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_spelling.default, {
        route: {
          params: {
            level: '1',
            exerciseType: 'correction'
          }
        }
      }));
      var spellingCard = _reactNative.screen.getByTestId('SpellingCard');
      var onHintToggle = spellingCard.props.onHintToggle;
      onHintToggle();
      expect(mockToggleHint).toHaveBeenCalled();
    });
    it('should call checkAnswer when check answer button is pressed', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_spelling.default, {
        route: {
          params: {
            level: '1',
            exerciseType: 'correction'
          }
        }
      }));
      var spellingCard = _reactNative.screen.getByTestId('SpellingCard');
      var onCheckAnswer = spellingCard.props.onCheckAnswer;
      onCheckAnswer();
      expect(mockCheckAnswer).toHaveBeenCalled();
    });
    it('should call handleNext when next button is pressed', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_spelling.default, {
        route: {
          params: {
            level: '1',
            exerciseType: 'correction'
          }
        }
      }));
      var spellingCard = _reactNative.screen.getByTestId('SpellingCard');
      var onNext = spellingCard.props.onNext;
      onNext();
      expect(mockHandleNext).toHaveBeenCalled();
    });
    it('should call handleNext from SpellingActions when next button is pressed', function () {
      setupMocks({
        isCorrect: true,
        showFeedback: true
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_spelling.default, {
        route: {
          params: {
            level: '1',
            exerciseType: 'correction'
          }
        }
      }));
      var spellingActions = _reactNative.screen.getByTestId('SpellingActions');
      var onNext = spellingActions.props.onNext;
      onNext();
      expect(mockHandleNext).toHaveBeenCalled();
    });
    it('should call retryExercise when retry button is pressed', function () {
      setupMocks({
        isCorrect: false,
        showFeedback: true
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_spelling.default, {
        route: {
          params: {
            level: '1',
            exerciseType: 'correction'
          }
        }
      }));
      var spellingCard = _reactNative.screen.getByTestId('SpellingCard');
      var onRetry = spellingCard.props.onRetry;
      onRetry();
      expect(mockRetryExercise).toHaveBeenCalled();
    });
  });
  describe('Activity Saving', function () {
    it('should save activity when exercise changes', (0, _asyncToGenerator2.default)(function* () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_spelling.default, {
          route: {
            params: {
              level: '1',
              exerciseType: 'correction'
            }
          }
        })),
        rerender = _render2.rerender;
      setupMocks({
        currentExerciseIndex: 1,
        currentExercise: mockSpellingData.exercises[1]
      });
      rerender((0, _jsxRuntime.jsx)(_spelling.default, {
        route: {
          params: {
            level: '1',
            exerciseType: 'correction'
          }
        }
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockSaveActivity).toHaveBeenCalledWith({
          title: 'Orthographe Correction',
          level: '1',
          type: 'spelling',
          metadata: {
            word: 1,
            totalWords: 2,
            exerciseType: 'correction',
            content: 'elefant'
          }
        });
      });
    }));
    it('should save activity with correct title for different exercise types', (0, _asyncToGenerator2.default)(function* () {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_spelling.default, {
          route: {
            params: {
              level: '2',
              exerciseType: 'rules'
            }
          }
        })),
        rerender = _render3.rerender;
      yield (0, _reactNative.waitFor)(function () {
        expect(mockSaveActivity).toHaveBeenCalledWith({
          title: 'Orthographe Règles',
          level: '2',
          type: 'spelling',
          metadata: {
            word: 0,
            totalWords: 2,
            exerciseType: 'rules',
            content: 'crocodille'
          }
        });
      });
      rerender((0, _jsxRuntime.jsx)(_spelling.default, {
        route: {
          params: {
            level: '3',
            exerciseType: 'homophones'
          }
        }
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockSaveActivity).toHaveBeenCalledWith({
          title: 'Orthographe Homophones',
          level: '3',
          type: 'spelling',
          metadata: {
            word: 0,
            totalWords: 2,
            exerciseType: 'homophones',
            content: 'crocodille'
          }
        });
      });
    }));
    it('should not save activity when not loaded', function () {
      setupMocks({
        loaded: false
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_spelling.default, {
        route: {
          params: {
            level: '1',
            exerciseType: 'correction'
          }
        }
      }));
      expect(mockSaveActivity).not.toHaveBeenCalled();
    });
    it('should not save activity when no valid data', function () {
      setupMocks({
        loaded: true,
        hasValidData: false
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_spelling.default, {
        route: {
          params: {
            level: '1',
            exerciseType: 'correction'
          }
        }
      }));
      expect(mockSaveActivity).not.toHaveBeenCalled();
    });
    it('should handle saveActivity error gracefully', (0, _asyncToGenerator2.default)(function* () {
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation(function () {});
      mockSaveActivity.mockImplementation(function () {
        throw new Error('Save failed');
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_spelling.default, {
        route: {
          params: {
            level: '1',
            exerciseType: 'correction'
          }
        }
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(consoleSpy).toHaveBeenCalledWith('Error saving activity:', expect.any(Error));
      });
      consoleSpy.mockRestore();
    }));
  });
  describe('Component Props Validation', function () {
    it('should pass correct props to SpellingHeader', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_spelling.default, {
        route: {
          params: {
            level: '3',
            exerciseType: 'rules'
          }
        }
      }));
      var header = _reactNative.screen.getByTestId('SpellingHeader');
      expect(header.props.title).toBe('Orthographe Règles');
      expect(header.props.level).toBe('3');
      expect(header.props.levelColor).toBe('#007AFF');
      expect(typeof header.props.onBack).toBe('function');
    });
    it('should pass correct props to SpellingProgress', function () {
      setupMocks({
        currentExerciseIndex: 1,
        totalExercises: 3
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_spelling.default, {
        route: {
          params: {
            level: '2',
            exerciseType: 'correction'
          }
        }
      }));
      var progress = _reactNative.screen.getByTestId('SpellingProgress');
      expect(progress.props.currentExerciseIndex).toBe(2);
      expect(progress.props.totalExercises).toBe(3);
      expect(progress.props.levelColor).toBe('#007AFF');
    });
    it('should pass correct props to SpellingCard', function () {
      setupMocks({
        userInput: 'crocodile',
        showHint: true,
        showFeedback: true,
        isCorrect: true,
        isLastExercise: false
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_spelling.default, {
        route: {
          params: {
            level: '1',
            exerciseType: 'correction'
          }
        }
      }));
      var spellingCard = _reactNative.screen.getByTestId('SpellingCard');
      expect(spellingCard.props.currentExercise).toEqual(mockSpellingData.exercises[0]);
      expect(spellingCard.props.userInput).toBe('crocodile');
      expect(spellingCard.props.showHint).toBe(true);
      expect(spellingCard.props.showFeedback).toBe(true);
      expect(spellingCard.props.isCorrect).toBe(true);
      expect(spellingCard.props.isLastExercise).toBe(false);
      expect(spellingCard.props.levelColor).toBe('#007AFF');
    });
    it('should pass correct props to SpellingActions', function () {
      setupMocks({
        isCorrect: false,
        isLastExercise: true
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_spelling.default, {
        route: {
          params: {
            level: '1',
            exerciseType: 'correction'
          }
        }
      }));
      var spellingActions = _reactNative.screen.getByTestId('SpellingActions');
      expect(spellingActions.props.isCorrect).toBe(false);
      expect(spellingActions.props.isLastExercise).toBe(true);
      expect(spellingActions.props.levelColor).toBe('#007AFF');
      expect(typeof spellingActions.props.onNext).toBe('function');
      expect(typeof spellingActions.props.onRetry).toBe('function');
    });
  });
  describe('Exercise Type Names', function () {
    it('should display correct title for correction exercises', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_spelling.default, {
        route: {
          params: {
            level: '1',
            exerciseType: 'correction'
          }
        }
      }));
      var header = _reactNative.screen.getByTestId('SpellingHeader');
      expect(header.props.title).toBe('Orthographe Correction');
    });
    it('should display correct title for rules exercises', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_spelling.default, {
        route: {
          params: {
            level: '1',
            exerciseType: 'rules'
          }
        }
      }));
      var header = _reactNative.screen.getByTestId('SpellingHeader');
      expect(header.props.title).toBe('Orthographe Règles');
    });
    it('should display correct title for homophones exercises', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_spelling.default, {
        route: {
          params: {
            level: '1',
            exerciseType: 'homophones'
          }
        }
      }));
      var header = _reactNative.screen.getByTestId('SpellingHeader');
      expect(header.props.title).toBe('Orthographe Homophones');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,