b3e0c598a93b2b3de85f87b51a6bd8c5
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LockProvider = LockProvider;
exports.useLock = useLock;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var Lock = _interopRequireWildcard(require("../services/lockService"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var LockContext = (0, _react.createContext)(null);
function LockProvider(_ref) {
  var children = _ref.children;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isEnabled = _useState2[0],
    setIsEnabled = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isLocked = _useState4[0],
    setIsLocked = _useState4[1];
  var _useState5 = (0, _react.useState)(true),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    isLoading = _useState6[0],
    setIsLoading = _useState6[1];
  (0, _react.useEffect)(function () {
    (0, _asyncToGenerator2.default)(function* () {
      try {
        var enabled = yield Lock.isEnabled();
        setIsEnabled(enabled);
        setIsLocked(enabled);
      } finally {
        setIsLoading(false);
      }
    })();
  }, []);
  var lockNow = (0, _react.useCallback)(function () {
    if (isEnabled) setIsLocked(true);
  }, [isEnabled]);
  var unlockWithPin = (0, _react.useCallback)(function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (pin) {
      var res = yield Lock.verifyPin(pin);
      if (res.ok) {
        setIsLocked(false);
        return {
          ok: true
        };
      }
      if (res.reason === 'lockout') return {
        ok: false,
        reason: 'lockout'
      };
      return {
        ok: false
      };
    });
    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }(), []);
  var disable = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    yield Lock.disableLock();
    setIsEnabled(false);
    setIsLocked(false);
  }), []);
  var enable = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    yield Lock.enableLock();
    setIsEnabled(true);
    setIsLocked(true);
  }), []);
  var value = {
    isEnabled: isEnabled,
    isLocked: isLocked,
    isLoading: isLoading,
    lockNow: lockNow,
    unlockWithPin: unlockWithPin,
    enable: enable,
    disable: disable
  };
  return (0, _jsxRuntime.jsx)(LockContext.Provider, {
    value: value,
    children: children
  });
}
function useLock() {
  var ctx = (0, _react.useContext)(LockContext);
  if (!ctx) throw new Error('useLock must be used within LockProvider');
  return ctx;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiTG9jayIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2pzeFJ1bnRpbWUiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIkxvY2tDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsIkxvY2tQcm92aWRlciIsIl9yZWYiLCJjaGlsZHJlbiIsIl91c2VTdGF0ZSIsInVzZVN0YXRlIiwiX3VzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5MiIsImlzRW5hYmxlZCIsInNldElzRW5hYmxlZCIsIl91c2VTdGF0ZTMiLCJfdXNlU3RhdGU0IiwiaXNMb2NrZWQiLCJzZXRJc0xvY2tlZCIsIl91c2VTdGF0ZTUiLCJfdXNlU3RhdGU2IiwiaXNMb2FkaW5nIiwic2V0SXNMb2FkaW5nIiwidXNlRWZmZWN0IiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiZW5hYmxlZCIsImxvY2tOb3ciLCJ1c2VDYWxsYmFjayIsInVubG9ja1dpdGhQaW4iLCJfcmVmMyIsInBpbiIsInJlcyIsInZlcmlmeVBpbiIsIm9rIiwicmVhc29uIiwiX3giLCJhcHBseSIsImFyZ3VtZW50cyIsImRpc2FibGUiLCJkaXNhYmxlTG9jayIsImVuYWJsZSIsImVuYWJsZUxvY2siLCJ2YWx1ZSIsImpzeCIsIlByb3ZpZGVyIiwidXNlTG9jayIsImN0eCIsInVzZUNvbnRleHQiLCJFcnJvciJdLCJzb3VyY2VzIjpbIkxvY2tDb250ZXh0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9jb250ZXh0cy9Mb2NrQ29udGV4dC5qc1xyXG5pbXBvcnQgeyBjcmVhdGVDb250ZXh0LCB1c2VDYWxsYmFjaywgdXNlQ29udGV4dCwgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0ICogYXMgTG9jayBmcm9tICcuLi9zZXJ2aWNlcy9sb2NrU2VydmljZSc7XHJcblxyXG5jb25zdCBMb2NrQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQobnVsbCk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gTG9ja1Byb3ZpZGVyKHsgY2hpbGRyZW4gfSkge1xyXG4gIGNvbnN0IFtpc0VuYWJsZWQsIHNldElzRW5hYmxlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgY29uc3QgW2lzTG9ja2VkLCBzZXRJc0xvY2tlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgKGFzeW5jICgpID0+IHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBlbmFibGVkID0gYXdhaXQgTG9jay5pc0VuYWJsZWQoKTtcclxuICAgICAgICBzZXRJc0VuYWJsZWQoZW5hYmxlZCk7XHJcbiAgICAgICAgc2V0SXNMb2NrZWQoZW5hYmxlZCk7XHJcbiAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcclxuICAgICAgfVxyXG4gICAgfSkoKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIGNvbnN0IGxvY2tOb3cgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICBpZiAoaXNFbmFibGVkKSBzZXRJc0xvY2tlZCh0cnVlKTtcclxuICB9LCBbaXNFbmFibGVkXSk7XHJcblxyXG4gIGNvbnN0IHVubG9ja1dpdGhQaW4gPSB1c2VDYWxsYmFjayhhc3luYyAocGluKSA9PiB7XHJcbiAgICBjb25zdCByZXMgPSBhd2FpdCBMb2NrLnZlcmlmeVBpbihwaW4pO1xyXG4gICAgaWYgKHJlcy5vaykge1xyXG4gICAgICBzZXRJc0xvY2tlZChmYWxzZSk7XHJcbiAgICAgIHJldHVybiB7IG9rOiB0cnVlIH07XHJcbiAgICB9XHJcbiAgICBpZiAocmVzLnJlYXNvbiA9PT0gJ2xvY2tvdXQnKSByZXR1cm4geyBvazogZmFsc2UsIHJlYXNvbjogJ2xvY2tvdXQnIH07XHJcbiAgICByZXR1cm4geyBvazogZmFsc2UgfTtcclxuICB9LCBbXSk7XHJcblxyXG4gIGNvbnN0IGRpc2FibGUgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XHJcbiAgICBhd2FpdCBMb2NrLmRpc2FibGVMb2NrKCk7XHJcbiAgICBzZXRJc0VuYWJsZWQoZmFsc2UpO1xyXG4gICAgc2V0SXNMb2NrZWQoZmFsc2UpO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgY29uc3QgZW5hYmxlID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xyXG4gICAgYXdhaXQgTG9jay5lbmFibGVMb2NrKCk7XHJcbiAgICBzZXRJc0VuYWJsZWQodHJ1ZSk7XHJcbiAgICBzZXRJc0xvY2tlZCh0cnVlKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIGNvbnN0IHZhbHVlID0ge1xyXG4gICAgaXNFbmFibGVkLFxyXG4gICAgaXNMb2NrZWQsXHJcbiAgICBpc0xvYWRpbmcsXHJcbiAgICBsb2NrTm93LFxyXG4gICAgdW5sb2NrV2l0aFBpbixcclxuICAgIGVuYWJsZSxcclxuICAgIGRpc2FibGUsXHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxMb2NrQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17dmFsdWV9PntjaGlsZHJlbn08L0xvY2tDb250ZXh0LlByb3ZpZGVyPlxyXG4gICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VMb2NrKCkge1xyXG4gIGNvbnN0IGN0eCA9IHVzZUNvbnRleHQoTG9ja0NvbnRleHQpO1xyXG4gIGlmICghY3R4KSB0aHJvdyBuZXcgRXJyb3IoJ3VzZUxvY2sgbXVzdCBiZSB1c2VkIHdpdGhpbiBMb2NrUHJvdmlkZXInKTtcclxuICByZXR1cm4gY3R4O1xyXG59XHJcblxyXG5cclxu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