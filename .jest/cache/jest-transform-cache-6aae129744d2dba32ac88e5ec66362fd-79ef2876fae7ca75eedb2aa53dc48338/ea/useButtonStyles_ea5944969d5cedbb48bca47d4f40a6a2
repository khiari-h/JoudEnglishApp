1ac53be9ce54c7a05ce8c95d9cb7bba4
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useButtonStyles;
var _style = _interopRequireDefault(require("./style"));
var COLOR_MAP = {
  primary: "#5E60CE",
  secondary: "#6B7280",
  success: "#10B981",
  warning: "#F59E0B",
  danger: "#EF4444",
  info: "#3B82F6"
};
var getSizeStyles = function getSizeStyles(buttonSize) {
  switch (buttonSize) {
    case "small":
      return {
        button: _style.default.smallButton,
        text: _style.default.smallText,
        iconSize: 16,
        loaderSize: "small"
      };
    case "large":
      return {
        button: _style.default.largeButton,
        text: _style.default.largeText,
        iconSize: 24,
        loaderSize: "large"
      };
    case "medium":
    default:
      return {
        button: _style.default.mediumButton,
        text: _style.default.mediumText,
        iconSize: 20,
        loaderSize: "small"
      };
  }
};
var getVariantStyles = function getVariantStyles(_ref) {
  var variant = _ref.variant,
    disabled = _ref.disabled,
    baseColor = _ref.baseColor,
    sizeStyles = _ref.sizeStyles,
    colorName = _ref.colorName;
  switch (variant) {
    case "outlined":
      return {
        button: {
          backgroundColor: "transparent",
          borderWidth: 1,
          borderColor: disabled ? "#D1D5DB" : baseColor
        },
        text: {
          color: disabled ? "#9CA3AF" : baseColor
        },
        icon: disabled ? "#9CA3AF" : baseColor,
        pressed: {
          backgroundColor: `${baseColor}10`
        }
      };
    case "text":
      return {
        button: {
          backgroundColor: "transparent",
          borderWidth: 0,
          paddingHorizontal: 12
        },
        text: {
          color: disabled ? "#9CA3AF" : baseColor
        },
        icon: disabled ? "#9CA3AF" : baseColor,
        pressed: {
          backgroundColor: `${baseColor}10`
        }
      };
    case "tonal":
      return {
        button: {
          backgroundColor: disabled ? "#F3F4F6" : `${baseColor}15`,
          borderWidth: 0
        },
        text: {
          color: disabled ? "#9CA3AF" : baseColor
        },
        icon: disabled ? "#9CA3AF" : baseColor,
        pressed: {
          backgroundColor: `${baseColor}25`
        }
      };
    case "icon":
      {
        var iconSizeValue = (sizeStyles == null ? void 0 : sizeStyles.iconSize) || 24;
        return {
          button: {
            backgroundColor: disabled ? "#F3F4F6" : "transparent",
            borderWidth: 0,
            padding: 0,
            minWidth: 0,
            minHeight: 0
          },
          icon: {
            fontSize: iconSizeValue,
            color: disabled ? "#A1A1AA" : colorName
          }
        };
      }
    case "filled":
    default:
      return {
        button: {
          backgroundColor: disabled ? "#E5E7EB" : baseColor,
          borderWidth: 0
        },
        text: {
          color: "white"
        },
        icon: "white",
        pressed: {
          backgroundColor: disabled ? "#E5E7EB" : `${baseColor}DD`
        }
      };
  }
};
function useButtonStyles(_ref2) {
  var _ref2$variant = _ref2.variant,
    variant = _ref2$variant === void 0 ? "filled" : _ref2$variant,
    _ref2$size = _ref2.size,
    size = _ref2$size === void 0 ? "medium" : _ref2$size,
    _ref2$color = _ref2.color,
    color = _ref2$color === void 0 ? "primary" : _ref2$color,
    _ref2$disabled = _ref2.disabled,
    disabled = _ref2$disabled === void 0 ? false : _ref2$disabled,
    _ref2$elevation = _ref2.elevation,
    elevation = _ref2$elevation === void 0 ? true : _ref2$elevation,
    _ref2$rounded = _ref2.rounded,
    rounded = _ref2$rounded === void 0 ? false : _ref2$rounded,
    _ref2$fullWidth = _ref2.fullWidth,
    fullWidth = _ref2$fullWidth === void 0 ? false : _ref2$fullWidth;
  var baseColor = COLOR_MAP[color] || COLOR_MAP.primary;
  var sizeStyles = getSizeStyles(size);
  var variantStyles = getVariantStyles({
    variant: variant,
    disabled: disabled,
    baseColor: baseColor,
    sizeStyles: sizeStyles,
    colorName: color
  });
  var elevationStyle = elevation && variant === "filled" && !disabled ? _style.default.withElevation : {};
  var radiusStyle = rounded ? _style.default.rounded : {};
  return {
    baseColor: baseColor,
    sizeStyles: sizeStyles,
    variantStyles: variantStyles,
    elevationStyle: elevationStyle,
    radiusStyle: radiusStyle,
    fullWidthStyle: fullWidth ? _style.default.fullWidth : null
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc3R5bGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIkNPTE9SX01BUCIsInByaW1hcnkiLCJzZWNvbmRhcnkiLCJzdWNjZXNzIiwid2FybmluZyIsImRhbmdlciIsImluZm8iLCJnZXRTaXplU3R5bGVzIiwiYnV0dG9uU2l6ZSIsImJ1dHRvbiIsInN0eWxlcyIsInNtYWxsQnV0dG9uIiwidGV4dCIsInNtYWxsVGV4dCIsImljb25TaXplIiwibG9hZGVyU2l6ZSIsImxhcmdlQnV0dG9uIiwibGFyZ2VUZXh0IiwibWVkaXVtQnV0dG9uIiwibWVkaXVtVGV4dCIsImdldFZhcmlhbnRTdHlsZXMiLCJfcmVmIiwidmFyaWFudCIsImRpc2FibGVkIiwiYmFzZUNvbG9yIiwic2l6ZVN0eWxlcyIsImNvbG9yTmFtZSIsImJhY2tncm91bmRDb2xvciIsImJvcmRlcldpZHRoIiwiYm9yZGVyQ29sb3IiLCJjb2xvciIsImljb24iLCJwcmVzc2VkIiwicGFkZGluZ0hvcml6b250YWwiLCJpY29uU2l6ZVZhbHVlIiwicGFkZGluZyIsIm1pbldpZHRoIiwibWluSGVpZ2h0IiwiZm9udFNpemUiLCJ1c2VCdXR0b25TdHlsZXMiLCJfcmVmMiIsIl9yZWYyJHZhcmlhbnQiLCJfcmVmMiRzaXplIiwic2l6ZSIsIl9yZWYyJGNvbG9yIiwiX3JlZjIkZGlzYWJsZWQiLCJfcmVmMiRlbGV2YXRpb24iLCJlbGV2YXRpb24iLCJfcmVmMiRyb3VuZGVkIiwicm91bmRlZCIsIl9yZWYyJGZ1bGxXaWR0aCIsImZ1bGxXaWR0aCIsInZhcmlhbnRTdHlsZXMiLCJlbGV2YXRpb25TdHlsZSIsIndpdGhFbGV2YXRpb24iLCJyYWRpdXNTdHlsZSIsImZ1bGxXaWR0aFN0eWxlIl0sInNvdXJjZXMiOlsidXNlQnV0dG9uU3R5bGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9jb21wb25lbnRzL3VpL0J1dHRvbi91c2VCdXR0b25TdHlsZXMuanNcclxuaW1wb3J0IHN0eWxlcyBmcm9tIFwiLi9zdHlsZVwiO1xyXG5cclxuY29uc3QgQ09MT1JfTUFQID0ge1xyXG4gIHByaW1hcnk6IFwiIzVFNjBDRVwiLFxyXG4gIHNlY29uZGFyeTogXCIjNkI3MjgwXCIsXHJcbiAgc3VjY2VzczogXCIjMTBCOTgxXCIsXHJcbiAgd2FybmluZzogXCIjRjU5RTBCXCIsXHJcbiAgZGFuZ2VyOiBcIiNFRjQ0NDRcIixcclxuICBpbmZvOiBcIiMzQjgyRjZcIixcclxufTtcclxuXHJcbmNvbnN0IGdldFNpemVTdHlsZXMgPSAoYnV0dG9uU2l6ZSkgPT4ge1xyXG4gIHN3aXRjaCAoYnV0dG9uU2l6ZSkge1xyXG4gICAgY2FzZSBcInNtYWxsXCI6XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgYnV0dG9uOiBzdHlsZXMuc21hbGxCdXR0b24sXHJcbiAgICAgICAgdGV4dDogc3R5bGVzLnNtYWxsVGV4dCxcclxuICAgICAgICBpY29uU2l6ZTogMTYsXHJcbiAgICAgICAgbG9hZGVyU2l6ZTogXCJzbWFsbFwiLFxyXG4gICAgICB9O1xyXG4gICAgY2FzZSBcImxhcmdlXCI6XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgYnV0dG9uOiBzdHlsZXMubGFyZ2VCdXR0b24sXHJcbiAgICAgICAgdGV4dDogc3R5bGVzLmxhcmdlVGV4dCxcclxuICAgICAgICBpY29uU2l6ZTogMjQsXHJcbiAgICAgICAgbG9hZGVyU2l6ZTogXCJsYXJnZVwiLFxyXG4gICAgICB9O1xyXG4gICAgY2FzZSBcIm1lZGl1bVwiOlxyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBidXR0b246IHN0eWxlcy5tZWRpdW1CdXR0b24sXHJcbiAgICAgICAgdGV4dDogc3R5bGVzLm1lZGl1bVRleHQsXHJcbiAgICAgICAgaWNvblNpemU6IDIwLFxyXG4gICAgICAgIGxvYWRlclNpemU6IFwic21hbGxcIixcclxuICAgICAgfTtcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBnZXRWYXJpYW50U3R5bGVzID0gKHsgdmFyaWFudCwgZGlzYWJsZWQsIGJhc2VDb2xvciwgc2l6ZVN0eWxlcywgY29sb3JOYW1lIH0pID0+IHtcclxuICBzd2l0Y2ggKHZhcmlhbnQpIHtcclxuICAgIGNhc2UgXCJvdXRsaW5lZFwiOlxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGJ1dHRvbjoge1xyXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcInRyYW5zcGFyZW50XCIsXHJcbiAgICAgICAgICBib3JkZXJXaWR0aDogMSxcclxuICAgICAgICAgIGJvcmRlckNvbG9yOiBkaXNhYmxlZCA/IFwiI0QxRDVEQlwiIDogYmFzZUNvbG9yLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgY29sb3I6IGRpc2FibGVkID8gXCIjOUNBM0FGXCIgOiBiYXNlQ29sb3IsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpY29uOiBkaXNhYmxlZCA/IFwiIzlDQTNBRlwiIDogYmFzZUNvbG9yLFxyXG4gICAgICAgIHByZXNzZWQ6IHtcclxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogYCR7YmFzZUNvbG9yfTEwYCxcclxuICAgICAgICB9LFxyXG4gICAgICB9O1xyXG4gICAgY2FzZSBcInRleHRcIjpcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBidXR0b246IHtcclxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJ0cmFuc3BhcmVudFwiLFxyXG4gICAgICAgICAgYm9yZGVyV2lkdGg6IDAsXHJcbiAgICAgICAgICBwYWRkaW5nSG9yaXpvbnRhbDogMTIsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICBjb2xvcjogZGlzYWJsZWQgPyBcIiM5Q0EzQUZcIiA6IGJhc2VDb2xvcixcclxuICAgICAgICB9LFxyXG4gICAgICAgIGljb246IGRpc2FibGVkID8gXCIjOUNBM0FGXCIgOiBiYXNlQ29sb3IsXHJcbiAgICAgICAgcHJlc3NlZDoge1xyXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBgJHtiYXNlQ29sb3J9MTBgLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH07XHJcbiAgICBjYXNlIFwidG9uYWxcIjpcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBidXR0b246IHtcclxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogZGlzYWJsZWQgPyBcIiNGM0Y0RjZcIiA6IGAke2Jhc2VDb2xvcn0xNWAsXHJcbiAgICAgICAgICBib3JkZXJXaWR0aDogMCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgIGNvbG9yOiBkaXNhYmxlZCA/IFwiIzlDQTNBRlwiIDogYmFzZUNvbG9yLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaWNvbjogZGlzYWJsZWQgPyBcIiM5Q0EzQUZcIiA6IGJhc2VDb2xvcixcclxuICAgICAgICBwcmVzc2VkOiB7XHJcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGAke2Jhc2VDb2xvcn0yNWAsXHJcbiAgICAgICAgfSxcclxuICAgICAgfTtcclxuICAgIGNhc2UgXCJpY29uXCI6IHtcclxuICAgICAgY29uc3QgaWNvblNpemVWYWx1ZSA9IHNpemVTdHlsZXM/Lmljb25TaXplIHx8IDI0O1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGJ1dHRvbjoge1xyXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBkaXNhYmxlZCA/IFwiI0YzRjRGNlwiIDogXCJ0cmFuc3BhcmVudFwiLFxyXG4gICAgICAgICAgYm9yZGVyV2lkdGg6IDAsXHJcbiAgICAgICAgICBwYWRkaW5nOiAwLFxyXG4gICAgICAgICAgbWluV2lkdGg6IDAsXHJcbiAgICAgICAgICBtaW5IZWlnaHQ6IDAsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpY29uOiB7XHJcbiAgICAgICAgICBmb250U2l6ZTogaWNvblNpemVWYWx1ZSxcclxuICAgICAgICAgIC8vIENvbnNlcnZlciBsZSBjb21wb3J0ZW1lbnQgZXhpc3RhbnQ6IHBvdXIgdmFyaWFudCBpY29uLCBsYSBjb3VsZXVyIHV0aWxpc2FpdCBsZSBub20gYnJ1dFxyXG4gICAgICAgICAgY29sb3I6IGRpc2FibGVkID8gXCIjQTFBMUFBXCIgOiBjb2xvck5hbWUsXHJcbiAgICAgICAgfSxcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIGNhc2UgXCJmaWxsZWRcIjpcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgYnV0dG9uOiB7XHJcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGRpc2FibGVkID8gXCIjRTVFN0VCXCIgOiBiYXNlQ29sb3IsXHJcbiAgICAgICAgICBib3JkZXJXaWR0aDogMCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgIGNvbG9yOiBcIndoaXRlXCIsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpY29uOiBcIndoaXRlXCIsXHJcbiAgICAgICAgcHJlc3NlZDoge1xyXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBkaXNhYmxlZCA/IFwiI0U1RTdFQlwiIDogYCR7YmFzZUNvbG9yfUREYCxcclxuICAgICAgICB9LFxyXG4gICAgICB9O1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUJ1dHRvblN0eWxlcyh7XHJcbiAgdmFyaWFudCA9IFwiZmlsbGVkXCIsXHJcbiAgc2l6ZSA9IFwibWVkaXVtXCIsXHJcbiAgY29sb3IgPSBcInByaW1hcnlcIixcclxuICBkaXNhYmxlZCA9IGZhbHNlLFxyXG4gIGVsZXZhdGlvbiA9IHRydWUsXHJcbiAgcm91bmRlZCA9IGZhbHNlLFxyXG4gIGZ1bGxXaWR0aCA9IGZhbHNlLFxyXG59KSB7XHJcbiAgY29uc3QgYmFzZUNvbG9yID0gQ09MT1JfTUFQW2NvbG9yXSB8fCBDT0xPUl9NQVAucHJpbWFyeTtcclxuICBjb25zdCBzaXplU3R5bGVzID0gZ2V0U2l6ZVN0eWxlcyhzaXplKTtcclxuICBjb25zdCB2YXJpYW50U3R5bGVzID0gZ2V0VmFyaWFudFN0eWxlcyh7IHZhcmlhbnQsIGRpc2FibGVkLCBiYXNlQ29sb3IsIHNpemVTdHlsZXMsIGNvbG9yTmFtZTogY29sb3IgfSk7XHJcblxyXG4gIGNvbnN0IGVsZXZhdGlvblN0eWxlID0gZWxldmF0aW9uICYmIHZhcmlhbnQgPT09IFwiZmlsbGVkXCIgJiYgIWRpc2FibGVkID8gc3R5bGVzLndpdGhFbGV2YXRpb24gOiB7fTtcclxuICBjb25zdCByYWRpdXNTdHlsZSA9IHJvdW5kZWQgPyBzdHlsZXMucm91bmRlZCA6IHt9O1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgYmFzZUNvbG9yLFxyXG4gICAgc2l6ZVN0eWxlcyxcclxuICAgIHZhcmlhbnRTdHlsZXMsXHJcbiAgICBlbGV2YXRpb25TdHlsZSxcclxuICAgIHJhZGl1c1N0eWxlLFxyXG4gICAgZnVsbFdpZHRoU3R5bGU6IGZ1bGxXaWR0aCA/IHN0eWxlcy5mdWxsV2lkdGggOiBudWxsLFxyXG4gIH07XHJcbn1cclxuXHJcblxyXG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBTUMsU0FBUyxHQUFHO0VBQ2hCQyxPQUFPLEVBQUUsU0FBUztFQUNsQkMsU0FBUyxFQUFFLFNBQVM7RUFDcEJDLE9BQU8sRUFBRSxTQUFTO0VBQ2xCQyxPQUFPLEVBQUUsU0FBUztFQUNsQkMsTUFBTSxFQUFFLFNBQVM7RUFDakJDLElBQUksRUFBRTtBQUNSLENBQUM7QUFFRCxJQUFNQyxhQUFhLEdBQUcsU0FBaEJBLGFBQWFBLENBQUlDLFVBQVUsRUFBSztFQUNwQyxRQUFRQSxVQUFVO0lBQ2hCLEtBQUssT0FBTztNQUNWLE9BQU87UUFDTEMsTUFBTSxFQUFFQyxjQUFNLENBQUNDLFdBQVc7UUFDMUJDLElBQUksRUFBRUYsY0FBTSxDQUFDRyxTQUFTO1FBQ3RCQyxRQUFRLEVBQUUsRUFBRTtRQUNaQyxVQUFVLEVB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