1bb7b7d2d4912b551e70a8b0a4f97fd7
function cov_1u0u9coehq() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\exercises\\errorCorrection\\ErrorCorrectionWordSection\\index.js";
  var hash = "6f24e06db93513480c6d449a357dde2a3b096cc7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\exercises\\errorCorrection\\ErrorCorrectionWordSection\\index.js",
    statementMap: {
      "0": {
        start: {
          line: 30,
          column: 35
        },
        end: {
          line: 94,
          column: 2
        }
      },
      "1": {
        start: {
          line: 45,
          column: 17
        },
        end: {
          line: 45,
          column: 31
        }
      },
      "2": {
        start: {
          line: 47,
          column: 2
        },
        end: {
          line: 93,
          column: 4
        }
      },
      "3": {
        start: {
          line: 97,
          column: 0
        },
        end: {
          line: 111,
          column: 2
        }
      },
      "4": {
        start: {
          line: 113,
          column: 0
        },
        end: {
          line: 113,
          column: 70
        }
      },
      "5": {
        start: {
          line: 117,
          column: 23
        },
        end: {
          line: 133,
          column: 1
        }
      },
      "6": {
        start: {
          line: 118,
          column: 2
        },
        end: {
          line: 132,
          column: 9
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 30,
            column: 40
          },
          end: {
            line: 30,
            column: 41
          }
        },
        loc: {
          start: {
            line: 44,
            column: 6
          },
          end: {
            line: 94,
            column: 1
          }
        },
        line: 44
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 117,
            column: 23
          },
          end: {
            line: 117,
            column: 24
          }
        },
        loc: {
          start: {
            line: 118,
            column: 2
          },
          end: {
            line: 132,
            column: 9
          }
        },
        line: 118
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 53,
            column: 7
          },
          end: {
            line: 62,
            column: 7
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 7
          },
          end: {
            line: 53,
            column: 32
          }
        }, {
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 61,
            column: 10
          }
        }],
        line: 53
      },
      "1": {
        loc: {
          start: {
            line: 64,
            column: 7
          },
          end: {
            line: 72,
            column: 7
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 64,
            column: 7
          },
          end: {
            line: 64,
            column: 36
          }
        }, {
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 71,
            column: 10
          }
        }],
        line: 64
      },
      "2": {
        loc: {
          start: {
            line: 74,
            column: 7
          },
          end: {
            line: 82,
            column: 7
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 7
          },
          end: {
            line: 74,
            column: 43
          }
        }, {
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 81,
            column: 10
          }
        }],
        line: 74
      },
      "3": {
        loc: {
          start: {
            line: 85,
            column: 7
          },
          end: {
            line: 91,
            column: 7
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 85,
            column: 7
          },
          end: {
            line: 85,
            column: 72
          }
        }, {
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 90,
            column: 15
          }
        }],
        line: 85
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6f24e06db93513480c6d449a357dde2a3b096cc7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_1u0u9coehq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1u0u9coehq();
import { memo } from "react";
import { View, Text } from "react-native";
import { LinearGradient } from "expo-linear-gradient";
import PropTypes from 'prop-types';
import FullCorrectionMode from "../modes/FullCorrectionMode";
import IdentifyErrorsMode from "../modes/IdentifyErrorsMode";
import MultipleChoiceMode from "../modes/MultipleChoiceMode";
import createStyles from "./style";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
var ErrorCorrectionWordSection = (cov_1u0u9coehq().s[0]++, memo(function (_ref) {
  var currentExercise = _ref.currentExercise,
    exerciseCounter = _ref.exerciseCounter,
    correctionMode = _ref.correctionMode,
    levelColor = _ref.levelColor,
    showFeedback = _ref.showFeedback,
    isCorrect = _ref.isCorrect,
    userCorrection = _ref.userCorrection,
    selectedErrorIndices = _ref.selectedErrorIndices,
    selectedChoiceIndex = _ref.selectedChoiceIndex,
    onChangeUserCorrection = _ref.onChangeUserCorrection,
    onToggleErrorIndex = _ref.onToggleErrorIndex,
    onSelectChoice = _ref.onSelectChoice;
  cov_1u0u9coehq().f[0]++;
  var styles = (cov_1u0u9coehq().s[1]++, createStyles());
  cov_1u0u9coehq().s[2]++;
  return _jsxs(View, {
    style: styles.container,
    children: [_jsx(CounterSection, {
      exerciseCounter: exerciseCounter,
      levelColor: levelColor,
      styles: styles
    }), (cov_1u0u9coehq().b[0][0]++, correctionMode === 'full') && (cov_1u0u9coehq().b[0][1]++, _jsx(FullCorrectionMode, {
      exercise: currentExercise,
      userCorrection: userCorrection,
      onChangeUserCorrection: onChangeUserCorrection,
      showFeedback: showFeedback,
      isCorrect: isCorrect,
      levelColor: levelColor
    })), (cov_1u0u9coehq().b[1][0]++, correctionMode === 'identify') && (cov_1u0u9coehq().b[1][1]++, _jsx(IdentifyErrorsMode, {
      exercise: currentExercise,
      selectedErrorIndices: selectedErrorIndices,
      onToggleErrorIndex: onToggleErrorIndex,
      showFeedback: showFeedback,
      levelColor: levelColor
    })), (cov_1u0u9coehq().b[2][0]++, correctionMode === 'multiple_choice') && (cov_1u0u9coehq().b[2][1]++, _jsx(MultipleChoiceMode, {
      exercise: currentExercise,
      selectedChoiceIndex: selectedChoiceIndex,
      onSelectChoice: onSelectChoice,
      showFeedback: showFeedback,
      levelColor: levelColor
    })), (cov_1u0u9coehq().b[3][0]++, !['full', 'identify', 'multiple_choice'].includes(correctionMode)) && (cov_1u0u9coehq().b[3][1]++, _jsx(View, {
      style: styles.errorContainer,
      children: _jsxs(Text, {
        style: styles.errorText,
        children: ["Mode de correction inconnu: ", correctionMode]
      })
    }))]
  });
}));
cov_1u0u9coehq().s[3]++;
ErrorCorrectionWordSection.propTypes = {
  currentExercise: PropTypes.object.isRequired,
  exerciseCounter: PropTypes.string.isRequired,
  correctionMode: PropTypes.oneOf(['full', 'identify', 'multiple_choice']).isRequired,
  levelColor: PropTypes.string.isRequired,
  showFeedback: PropTypes.bool.isRequired,
  isCorrect: PropTypes.bool.isRequired,
  userCorrection: PropTypes.string,
  selectedErrorIndices: PropTypes.arrayOf(PropTypes.number),
  selectedChoiceIndex: PropTypes.number,
  onChangeUserCorrection: PropTypes.func,
  onToggleErrorIndex: PropTypes.func,
  onSelectChoice: PropTypes.func
};
cov_1u0u9coehq().s[4]++;
ErrorCorrectionWordSection.displayName = "ErrorCorrectionWordSection";
export default ErrorCorrectionWordSection;
cov_1u0u9coehq().s[5]++;
var CounterSection = function CounterSection(_ref2) {
  var exerciseCounter = _ref2.exerciseCounter,
    levelColor = _ref2.levelColor,
    styles = _ref2.styles;
  cov_1u0u9coehq().f[1]++;
  cov_1u0u9coehq().s[6]++;
  return _jsx(View, {
    style: styles.counterSection,
    children: _jsx(LinearGradient, {
      colors: [`${levelColor}08`, `${levelColor}04`, 'transparent'],
      start: {
        x: 0,
        y: 0
      },
      end: {
        x: 1,
        y: 1
      },
      style: styles.counterGradient,
      children: _jsx(View, {
        style: [styles.counterBadge, {
          borderColor: `${levelColor}20`
        }],
        children: _jsx(Text, {
          style: [styles.counterText, {
            color: levelColor
          }],
          children: exerciseCounter
        })
      })
    })
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,