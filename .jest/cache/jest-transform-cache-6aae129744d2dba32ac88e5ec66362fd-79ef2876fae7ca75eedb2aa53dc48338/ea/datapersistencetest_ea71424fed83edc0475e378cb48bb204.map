{"version":3,"names":["_getJestObj","mock","setItem","jest","fn","Promise","resolve","getItem","removeItem","clear","useFocusEffect","callback","router","push","Stack","_ref","children","_jsxRuntime","jsx","Fragment","useLocalSearchParams","useNavigation","navigate","goBack","canGoBack","addListener","isFocused","lastActivity","isLoading","saveActivity","clearActivity","reload","currentStreak","wordsToday","timeToday","Object","assign","requireActual","useProgress","progress","mockProgressState","updateExerciseProgress","mockUpdateExerciseProgress","calculateGlobalProgress","levels","values","length","total","reduce","sum","level","completed","Math","round","calculateLevelProgress","_mockProgressState$le","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_reactNative2","_asyncStorage","_ProgressContext","_ThemeContext","_CurrentLevelContext","_require","exercises","stats","exerciseType","FakeDataManager","_progress$levels","_progress$levels2","_progress$levels3","_useProgress","saveData","_ref2","default","AsyncStorage","JSON","stringify","apply","arguments","loadData","_ref3","data","parse","simulateExercise","jsxs","Text","testID","A1","vocabulary","grammar","reading","TouchableOpacity","onPress","describe","beforeEach","clearAllMocks","it","_render","render","ThemeProvider","ProgressProvider","getByTestId","fireEvent","press","waitFor","expect","toHaveBeenCalledWith","savedProgress","mockResolvedValue","_render2","_render3","toBeTruthy","_render4","rerender","toHaveBeenCalled","savedData","mockRejectedValueOnce","Error","_render5","_render6","CurrentLevelProvider","_render7","act"],"sources":["data-persistence.test.js"],"sourcesContent":["// __tests__/integration/data-persistence.test.js\r\nimport React from 'react';\r\nimport { render, fireEvent, waitFor, act } from '@testing-library/react-native';\r\nimport { TouchableOpacity, Text } from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { ProgressProvider, useProgress } from '../../src/contexts/ProgressContext';\r\nimport { ThemeProvider } from '../../src/contexts/ThemeContext';\r\nimport { CurrentLevelProvider } from '../../src/contexts/CurrentLevelContext';\r\n\r\n// Mock AsyncStorage\r\njest.mock('@react-native-async-storage/async-storage', () => ({\r\n  setItem: jest.fn(() => Promise.resolve()),\r\n  getItem: jest.fn(() => Promise.resolve(null)),\r\n  removeItem: jest.fn(() => Promise.resolve()),\r\n  clear: jest.fn(() => Promise.resolve()),\r\n}));\r\n\r\n// Mock de expo-router\r\njest.mock('expo-router', () => ({\r\n  useFocusEffect: jest.fn(callback => callback()),\r\n  router: {\r\n    push: jest.fn(),\r\n  },\r\n  Stack: ({ children }) => <>{children}</>,\r\n  useLocalSearchParams: () => ({}),\r\n  useNavigation: () => ({\r\n    navigate: jest.fn(),\r\n    goBack: jest.fn(),\r\n    canGoBack: jest.fn(() => true),\r\n    addListener: jest.fn(),\r\n    isFocused: jest.fn(() => true),\r\n  }),\r\n}));\r\n\r\n// Mock des hooks\r\njest.mock('../../src/hooks/useLastActivity', () => () => ({\r\n  lastActivity: null,\r\n  isLoading: false,\r\n  saveActivity: jest.fn(),\r\n  clearActivity: jest.fn(),\r\n  reload: jest.fn(),\r\n}));\r\n\r\njest.mock('../../src/hooks/useActivityMetrics', () => () => ({\r\n  currentStreak: 5,\r\n  wordsToday: 0,\r\n  timeToday: 0,\r\n  isLoading: false,\r\n}));\r\n\r\n// Mock du ProgressContext avec état simulé\r\nlet mockProgressState = {\r\n  levels: {},\r\n  exercises: {},\r\n  stats: {},\r\n  lastActivity: {}\r\n};\r\n\r\nconst mockUpdateExerciseProgress = jest.fn((exerciseType, level, completed) => {\r\n  // Simuler la mise à jour de l'état\r\n  if (!mockProgressState.exercises[exerciseType]) {\r\n    mockProgressState.exercises[exerciseType] = {};\r\n  }\r\n  if (!mockProgressState.exercises[exerciseType][level]) {\r\n    mockProgressState.exercises[exerciseType][level] = { completed: 0, total: 100 };\r\n  }\r\n  mockProgressState.exercises[exerciseType][level].completed = completed;\r\n  \r\n  // Mettre à jour la progression du niveau\r\n  if (!mockProgressState.levels[level]) {\r\n    mockProgressState.levels[level] = { completed: 0, total: 100 };\r\n  }\r\n  mockProgressState.levels[level].completed = completed;\r\n});\r\n\r\njest.mock('../../src/contexts/ProgressContext', () => ({\r\n  ...jest.requireActual('../../src/contexts/ProgressContext'),\r\n  useProgress: () => ({\r\n    progress: mockProgressState,\r\n    isLoading: false,\r\n    updateExerciseProgress: mockUpdateExerciseProgress,\r\n    calculateGlobalProgress: () => {\r\n      const levels = Object.values(mockProgressState.levels);\r\n      if (levels.length === 0) return 0;\r\n      const total = levels.reduce((sum, level) => sum + level.completed, 0);\r\n      return Math.round(total / levels.length);\r\n    },\r\n    calculateLevelProgress: (level) => mockProgressState.levels[level]?.completed || 0,\r\n  }),\r\n}));\r\n\r\n// Composant de test pour simuler la sauvegarde et le chargement\r\nconst FakeDataManager = () => {\r\n  const { updateExerciseProgress, progress } = useProgress();\r\n\r\n  const saveData = async () => {\r\n    await AsyncStorage.setItem('progress', JSON.stringify(progress));\r\n  };\r\n\r\n  const loadData = async () => {\r\n    const data = await AsyncStorage.getItem('progress');\r\n    return data ? JSON.parse(data) : null;\r\n  };\r\n\r\n  const simulateExercise = () => {\r\n    updateExerciseProgress('vocabulary', 'A1', 75);\r\n    updateExerciseProgress('grammar', 'A1', 50);\r\n    updateExerciseProgress('reading', 'A1', 25);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Text testID=\"progress-display\">\r\n        Vocabulaire: {progress.levels?.A1?.vocabulary || 0}% | \r\n        Grammaire: {progress.levels?.A1?.grammar || 0}% | \r\n        Lecture: {progress.levels?.A1?.reading || 0}%\r\n      </Text>\r\n      <TouchableOpacity testID=\"simulate-exercise\" onPress={simulateExercise}>\r\n        <Text>Simuler exercice</Text>\r\n      </TouchableOpacity>\r\n      <TouchableOpacity testID=\"save-data\" onPress={saveData}>\r\n        <Text>Sauvegarder</Text>\r\n      </TouchableOpacity>\r\n      <TouchableOpacity testID=\"load-data\" onPress={loadData}>\r\n        <Text>Charger</Text>\r\n      </TouchableOpacity>\r\n    </>\r\n  );\r\n};\r\n\r\ndescribe('Scénario 1: Persistance des données de progression', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    AsyncStorage.clear();\r\n    // Reset de l'état mock\r\n    mockProgressState = {\r\n      levels: {},\r\n      exercises: {},\r\n      stats: {},\r\n      lastActivity: {}\r\n    };\r\n  });\r\n\r\n  it(\"devrait sauvegarder les données de progression dans AsyncStorage\", async () => {\r\n    const { getByTestId } = render(\r\n      <ThemeProvider>\r\n        <ProgressProvider>\r\n          <FakeDataManager />\r\n        </ProgressProvider>\r\n      </ThemeProvider>\r\n    );\r\n\r\n    // Simuler un exercice\r\n    fireEvent.press(getByTestId('simulate-exercise'));\r\n\r\n    // Sauvegarder les données\r\n    fireEvent.press(getByTestId('save-data'));\r\n\r\n    await waitFor(() => {\r\n      expect(mockUpdateExerciseProgress).toHaveBeenCalledWith('vocabulary', 'A1', 75);\r\n      expect(mockUpdateExerciseProgress).toHaveBeenCalledWith('grammar', 'A1', 50);\r\n      expect(mockUpdateExerciseProgress).toHaveBeenCalledWith('reading', 'A1', 25);\r\n    });\r\n  });\r\n\r\n  it(\"devrait charger les données sauvegardées depuis AsyncStorage\", async () => {\r\n    // Préparer des données sauvegardées\r\n    const savedProgress = {\r\n      levels: {\r\n        A1: {\r\n          vocabulary: 80,\r\n          grammar: 60,\r\n          reading: 40\r\n        }\r\n      }\r\n    };\r\n\r\n    AsyncStorage.getItem.mockResolvedValue(JSON.stringify(savedProgress));\r\n\r\n    const { getByTestId } = render(\r\n      <ThemeProvider>\r\n        <ProgressProvider>\r\n          <FakeDataManager />\r\n        </ProgressProvider>\r\n      </ThemeProvider>\r\n    );\r\n\r\n    // Charger les données\r\n    fireEvent.press(getByTestId('load-data'));\r\n\r\n    await waitFor(() => {\r\n      expect(AsyncStorage.getItem).toHaveBeenCalledWith('progress');\r\n    });\r\n  });\r\n\r\n  it(\"devrait gérer les cas où aucune donnée n'est sauvegardée\", async () => {\r\n    AsyncStorage.getItem.mockResolvedValue(null);\r\n\r\n    const { getByTestId } = render(\r\n      <ThemeProvider>\r\n        <ProgressProvider>\r\n          <FakeDataManager />\r\n        </ProgressProvider>\r\n      </ThemeProvider>\r\n    );\r\n\r\n    // Charger les données (aucune sauvegardée)\r\n    fireEvent.press(getByTestId('load-data'));\r\n\r\n    await waitFor(() => {\r\n      expect(AsyncStorage.getItem).toHaveBeenCalledWith('progress');\r\n    });\r\n\r\n    // Vérifier que l'état reste cohérent\r\n    expect(getByTestId('progress-display')).toBeTruthy();\r\n  });\r\n});\r\n\r\ndescribe('Scénario 2: Cohérence des données entre sessions', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    AsyncStorage.clear();\r\n    // Reset de l'état mock\r\n    mockProgressState = {\r\n      levels: {},\r\n      exercises: {},\r\n      stats: {},\r\n      lastActivity: {}\r\n    };\r\n  });\r\n\r\n  it(\"devrait maintenir la cohérence des métriques après redémarrage\", async () => {\r\n    const { getByTestId, rerender } = render(\r\n      <ThemeProvider>\r\n        <ProgressProvider>\r\n          <FakeDataManager />\r\n        </ProgressProvider>\r\n      </ThemeProvider>\r\n    );\r\n\r\n    // Phase 1: Première session - progression\r\n    fireEvent.press(getByTestId('simulate-exercise'));\r\n    \r\n    // Vérifier l'affichage\r\n    expect(getByTestId('progress-display')).toBeTruthy();\r\n    \r\n    // Sauvegarder\r\n    fireEvent.press(getByTestId('save-data'));\r\n\r\n    await waitFor(() => {\r\n      expect(AsyncStorage.setItem).toHaveBeenCalled();\r\n    });\r\n\r\n    // Phase 2: Simuler un redémarrage (nouveau composant)\r\n    const savedData = {\r\n      levels: {\r\n        A1: {\r\n          vocabulary: 75,\r\n          grammar: 50,\r\n          reading: 25\r\n        }\r\n      }\r\n    };\r\n\r\n    AsyncStorage.getItem.mockResolvedValue(JSON.stringify(savedData));\r\n\r\n    // Rerender pour simuler un nouveau démarrage\r\n    rerender(\r\n      <ThemeProvider>\r\n        <ProgressProvider>\r\n          <FakeDataManager />\r\n        </ProgressProvider>\r\n      </ThemeProvider>\r\n    );\r\n\r\n    // Charger les données\r\n    fireEvent.press(getByTestId('load-data'));\r\n\r\n    await waitFor(() => {\r\n      expect(AsyncStorage.getItem).toHaveBeenCalledWith('progress');\r\n    });\r\n  });\r\n\r\n  it(\"devrait gérer les erreurs de sauvegarde/chargement\", async () => {\r\n    // Simuler une erreur de sauvegarde\r\n    AsyncStorage.setItem.mockRejectedValueOnce(new Error('Erreur de sauvegarde'));\r\n\r\n    const { getByTestId } = render(\r\n      <ThemeProvider>\r\n        <ProgressProvider>\r\n          <FakeDataManager />\r\n        </ProgressProvider>\r\n      </ThemeProvider>\r\n    );\r\n\r\n    // Simuler un exercice\r\n    fireEvent.press(getByTestId('simulate-exercise'));\r\n\r\n    // Tenter de sauvegarder (devrait échouer)\r\n    fireEvent.press(getByTestId('save-data'));\r\n\r\n    await waitFor(() => {\r\n      expect(AsyncStorage.setItem).toHaveBeenCalled();\r\n    });\r\n\r\n    // L'application devrait continuer à fonctionner malgré l'erreur\r\n    expect(getByTestId('progress-display')).toBeTruthy();\r\n  });\r\n});\r\n\r\ndescribe('Scénario 3: Intégration avec les composants réels', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    AsyncStorage.clear();\r\n    // Reset de l'état mock\r\n    mockProgressState = {\r\n      levels: {},\r\n      exercises: {},\r\n      stats: {},\r\n      lastActivity: {}\r\n    };\r\n  });\r\n\r\n  it(\"devrait synchroniser les données entre différents composants\", async () => {\r\n    const { getByTestId } = render(\r\n      <ThemeProvider>\r\n        <ProgressProvider>\r\n          <CurrentLevelProvider>\r\n            <FakeDataManager />\r\n          </CurrentLevelProvider>\r\n        </ProgressProvider>\r\n      </ThemeProvider>\r\n    );\r\n\r\n    // Vérifier l'état initial\r\n    expect(getByTestId('progress-display')).toBeTruthy();\r\n\r\n    // Simuler des exercices\r\n    fireEvent.press(getByTestId('simulate-exercise'));\r\n\r\n    // Sauvegarder\r\n    fireEvent.press(getByTestId('save-data'));\r\n\r\n    await waitFor(() => {\r\n      expect(AsyncStorage.setItem).toHaveBeenCalled();\r\n    });\r\n\r\n    // Vérifier que l'affichage est cohérent\r\n    expect(getByTestId('progress-display')).toBeTruthy();\r\n  });\r\n\r\n  it(\"devrait gérer la concurrence des mises à jour\", async () => {\r\n    const { getByTestId } = render(\r\n      <ThemeProvider>\r\n        <ProgressProvider>\r\n          <FakeDataManager />\r\n        </ProgressProvider>\r\n      </ThemeProvider>\r\n    );\r\n\r\n    // Simuler plusieurs exercices rapidement\r\n    act(() => {\r\n      fireEvent.press(getByTestId('simulate-exercise'));\r\n      fireEvent.press(getByTestId('simulate-exercise'));\r\n    });\r\n\r\n    // Sauvegarder\r\n    fireEvent.press(getByTestId('save-data'));\r\n\r\n    await waitFor(() => {\r\n      expect(AsyncStorage.setItem).toHaveBeenCalled();\r\n    });\r\n\r\n    // L'état final devrait être cohérent\r\n    expect(getByTestId('progress-display')).toBeTruthy();\r\n  });\r\n});\r\n"],"mappings":"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","ignoreList":[]}