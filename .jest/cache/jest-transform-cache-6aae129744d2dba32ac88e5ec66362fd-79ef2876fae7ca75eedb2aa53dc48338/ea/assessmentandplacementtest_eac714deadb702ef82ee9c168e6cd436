c9c993c7ba52ab36c0931874380a2d13
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    },
    useRoute: function useRoute() {
      return {
        params: {}
      };
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _layout = _interopRequireDefault(require("../../app/_layout"));
var _AppProvider = require("../../src/contexts/AppProvider");
var _LevelAssessmentContext = require("../../src/contexts/LevelAssessmentContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Assessment and Placement Integration Test', function () {
  it('should place the user at the correct level based on assessment results', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AppProvider.AppProvider, {
        children: (0, _jsxRuntime.jsx)(_LevelAssessmentContext.LevelAssessmentProvider, {
          children: (0, _jsxRuntime.jsx)(_layout.default, {})
        })
      })),
      getByText = _render.getByText,
      findByText = _render.findByText;
    _reactNative.fireEvent.press(getByText(/Commencer le test de niveau/i));
    _reactNative.fireEvent.press(getByText(/Réponse A/i));
    _reactNative.fireEvent.press(getByText(/Réponse B/i));
    _reactNative.fireEvent.press(getByText(/Terminer le test/i));
    var recommendedLevel = yield findByText(/Niveau recommandé : B1/i);
    expect(recommendedLevel).toBeTruthy();
    _reactNative.fireEvent.press(getByText(/Continuer/i));
    var levelB1 = yield findByText(/Niveau B1/i);
    expect(levelB1).toBeTruthy();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsInVzZU5hdmlnYXRpb24iLCJuYXZpZ2F0ZSIsImZuIiwiZ29CYWNrIiwidXNlUm91dGUiLCJwYXJhbXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9sYXlvdXQiLCJfQXBwUHJvdmlkZXIiLCJfTGV2ZWxBc3Nlc3NtZW50Q29udGV4dCIsIl9qc3hSdW50aW1lIiwiX3JlcXVpcmUiLCJkZXNjcmliZSIsIml0IiwiZGVmYXVsdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJBcHBQcm92aWRlciIsImNoaWxkcmVuIiwiTGV2ZWxBc3Nlc3NtZW50UHJvdmlkZXIiLCJnZXRCeVRleHQiLCJmaW5kQnlUZXh0IiwiZmlyZUV2ZW50IiwicHJlc3MiLCJyZWNvbW1lbmRlZExldmVsIiwiZXhwZWN0IiwidG9CZVRydXRoeSIsImxldmVsQjEiXSwic291cmNlcyI6WyJhc3Nlc3NtZW50LWFuZC1wbGFjZW1lbnQudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCwgd2FpdEZvciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCBBcHAgZnJvbSAnLi4vLi4vYXBwL19sYXlvdXQnO1xuaW1wb3J0IHsgQXBwUHJvdmlkZXIgfSBmcm9tICcuLi8uLi9zcmMvY29udGV4dHMvQXBwUHJvdmlkZXInO1xuaW1wb3J0IHsgTGV2ZWxBc3Nlc3NtZW50UHJvdmlkZXIgfSBmcm9tICcuLi8uLi9zcmMvY29udGV4dHMvTGV2ZWxBc3Nlc3NtZW50Q29udGV4dCc7XG5cbmplc3QubW9jaygnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJywgKCkgPT4gKHtcbiAgLi4uamVzdC5yZXF1aXJlQWN0dWFsKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnKSxcbiAgdXNlTmF2aWdhdGlvbjogKCkgPT4gKHtcbiAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxuICAgIGdvQmFjazogamVzdC5mbigpLFxuICB9KSxcbiAgdXNlUm91dGU6ICgpID0+ICh7XG4gICAgcGFyYW1zOiB7fSxcbiAgfSksXG59KSk7XG5cbmRlc2NyaWJlKCdBc3Nlc3NtZW50IGFuZCBQbGFjZW1lbnQgSW50ZWdyYXRpb24gVGVzdCcsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCBwbGFjZSB0aGUgdXNlciBhdCB0aGUgY29ycmVjdCBsZXZlbCBiYXNlZCBvbiBhc3Nlc3NtZW50IHJlc3VsdHMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQsIGZpbmRCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgIDxBcHBQcm92aWRlcj5cbiAgICAgICAgPExldmVsQXNzZXNzbWVudFByb3ZpZGVyPlxuICAgICAgICAgIDxBcHAgLz5cbiAgICAgICAgPC9MZXZlbEFzc2Vzc21lbnRQcm92aWRlcj5cbiAgICAgIDwvQXBwUHJvdmlkZXI+XG4gICAgKTtcblxuICAgIC8vIDEuIETDqW1hcnJlciBsZSB0ZXN0IGRlIG5pdmVhdVxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoL0NvbW1lbmNlciBsZSB0ZXN0IGRlIG5pdmVhdS9pKSk7XG5cbiAgICAvLyAyLiBTaW11bGVyIGxlcyByw6lwb25zZXMgYXUgdGVzdFxuICAgIC8vIChDZXR0ZSBwYXJ0aWUgZMOpcGVuZCBkZSBsYSBzdHJ1Y3R1cmUgZGUgdm90cmUgdGVzdCBkZSBuaXZlYXUpXG4gICAgLy8gRXhlbXBsZSA6IHLDqXBvbmRyZSBjb3JyZWN0ZW1lbnQgw6AgZGVzIHF1ZXN0aW9ucyBwb3VyIHVuIG5pdmVhdSBCMVxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoL1LDqXBvbnNlIEEvaSkpOyAvLyBTaW11bGV6IGxlcyByw6lwb25zZXNcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KC9Sw6lwb25zZSBCL2kpKTtcbiAgICAvLyAuLi4gY29udGludWV6IHBvdXIgdG91dGVzIGxlcyBxdWVzdGlvbnNcblxuICAgIC8vIDMuIFRlcm1pbmVyIGxlIHRlc3RcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KC9UZXJtaW5lciBsZSB0ZXN0L2kpKTtcblxuICAgIC8vIDQuIFbDqXJpZmllciBxdWUgbCd1dGlsaXNhdGV1ciBlc3QgcmVkaXJpZ8OpIHZlcnMgbGUgYm9uIG5pdmVhdVxuICAgIGNvbnN0IHJlY29tbWVuZGVkTGV2ZWwgPSBhd2FpdCBmaW5kQnlUZXh0KC9OaXZlYXUgcmVjb21tYW5kw6kgOiBCMS9pKTtcbiAgICBleHBlY3QocmVjb21tZW5kZWRMZXZlbCkudG9CZVRydXRoeSgpO1xuXG4gICAgLy8gNS4gTmF2aWd1ZXIgdmVycyBsYSBzw6lsZWN0aW9uIGRlIG5pdmVhdSBwb3VyIGNvbmZpcm1lclxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoL0NvbnRpbnVlci9pKSk7XG4gICAgY29uc3QgbGV2ZWxCMSA9IGF3YWl0IGZpbmRCeVRleHQoL05pdmVhdSBCMS9pKTtcbiAgICBleHBlY3QobGV2ZWxCMSkudG9CZVRydXRoeSgpO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFPQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsMEJBQTBCLEVBQUU7RUFBQSxPQUFBQyxNQUFBLENBQUFDLE1BQUEsS0FDakNDLElBQUksQ0FBQ0MsYUFBYSxDQUFDLDBCQUEwQixDQUFDO0lBQ2pEQyxhQUFhLEVBQUUsU0FBZkEsYUFBYUEsQ0FBQTtNQUFBLE9BQVM7UUFDcEJDLFFBQVEsRUFBRUgsSUFBSSxDQUFDSSxFQUFFLENBQUMsQ0FBQztRQUNuQkMsTUFBTSxFQUFFTCxJQUFJLENBQUNJLEVBQUUsQ0FBQztNQUNsQixDQUFDO0lBQUEsQ0FBQztJQUNGRSxRQUFRLEVBQUUsU0FBVkEsUUFBUUEsQ0FBQTtNQUFBLE9BQVM7UUFDZkMsTUFBTSxFQUFFLENBQUM7TUFDWCxDQUFDO0lBQUE7RUFBQztBQUFBLENBQ0YsQ0FBQztBQUFDLElBQUFDLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxrQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBZkosSUFBQUUsTUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsWUFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksT0FBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUssWUFBQSxHQUFBTCxPQUFBO0FBQ0EsSUFBQU0sdUJBQUEsR0FBQU4sT0FBQTtBQUFvRixJQUFBTyxXQUFBLEdBQUFQLE9BQUE7QUFBQSxTQUFBYixZQUFBO0VBQUEsSUFBQXFCLFFBQUEsR0FBQVIsT0FBQTtJQUFBVCxJQUFBLEdBQUFpQixRQUFBLENBQUFqQixJQUFBO0VBQUFKLFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFJLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQWFwRmtCLFFBQVEsQ0FBQywyQ0FBMkMsRUFBRSxZQUFNO0VBQzFEQyxFQUFFLENBQUMsd0VBQXdFLE1BQUFULGtCQUFBLENBQUFVLE9BQUEsRUFBRSxhQUFZO0lBQ3ZGLElBQUFDLE9BQUEsR0FBa0MsSUFBQUMsbUJBQU0sRUFDdEMsSUFBQU4sV0FBQSxDQUFBTyxHQUFBLEVBQUNULFlBQUEsQ0FBQVUsV0FBVztRQUFBQyxRQUFBLEVBQ1YsSUFBQVQsV0FBQSxDQUFBTyxHQUFBLEVBQUNSLHVCQUFBLENBQUFXLHVCQUF1QjtVQUFBRCxRQUFBLEVBQ3RCLElBQUFULFdBQUEsQ0FBQU8sR0FBQSxFQUFDVixPQUFBLENBQUFPLE9BQUcsSUFBRTtRQUFDLENBQ2dCO01BQUMsQ0FDZixDQUNmLENBQUM7TUFOT08sU0FBUyxHQUFBTixPQUFBLENBQVRNLFNBQVM7TUFBRUMsVUFBVSxHQUFBUCxPQUFBLENBQVZPLFVBQVU7SUFTN0JDLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0gsU0FBUyxDQUFDLDhCQUE4QixDQUFDLENBQUM7SUFLMURFLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0gsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3hDRSxzQkFBUyxDQUFDQyxLQUFLLENBQUNILFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUl4Q0Usc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDSCxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUcvQyxJQUFNSSxnQkFBZ0IsU0FBU0gsVUFBVSxDQUFDLHlCQUF5QixDQUFDO0lBQ3BFSSxNQUFNLENBQUNELGdCQUFnQixDQUFDLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0lBR3JDSixzQkFBUyxDQUFDQyxLQUFLLENBQUNILFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN4QyxJQUFNTyxPQUFPLFNBQVNOLFVBQVUsQ0FBQyxZQUFZLENBQUM7SUFDOUNJLE1BQU0sQ0FBQ0UsT0FBTyxDQUFDLENBQUNELFVBQVUsQ0FBQyxDQUFDO0VBQzlCLENBQUMsRUFBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==