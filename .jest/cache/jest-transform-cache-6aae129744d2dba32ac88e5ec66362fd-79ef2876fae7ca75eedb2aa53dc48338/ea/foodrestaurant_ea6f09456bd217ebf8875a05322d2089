fc2a0db25c74dd045521c488f71496c8
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var foodRestaurant = [{
  categoryId: 59,
  english: "I'm absolutely craving [foodType].",
  translation: "J'ai une envie folle de [foodType].",
  context: "Pour exprimer une envie très forte et spécifique pour un certain type de nourriture.",
  examples: [{
    english: "I'm absolutely craving ramen right now, but not just any ramen—I want the kind with a rich, cloudy broth.",
    translation: "J'ai une envie folle de ramen en ce moment, mais pas n'importe lesquels—je veux ceux avec un bouillon riche et trouble."
  }]
}, {
  categoryId: 59,
  english: "The [dish] was mediocre at best.",
  translation: "Le [dish] était médiocre, au mieux.",
  context: "Pour exprimer sa déception face à un plat qui n'était pas à la hauteur des attentes. 'Mediocre at best' est une critique assez forte.",
  examples: [{
    english: "This place is supposed to be the best Italian in town, but honestly, the pasta was mediocre at best. It was just 'meh'.",
    translation: "Cet endroit est censé être le meilleur italien de la ville, mais honnêtement, les pâtes étaient médiocres, au mieux. C'était juste 'bof'."
  }]
}, {
  categoryId: 59,
  english: "This looks way too good to pass up.",
  translation: "Ça a l'air beaucoup trop bon pour refuser.",
  context: "Pour justifier le fait de manger quelque chose de gourmand malgré un régime ou une résolution.",
  examples: [{
    english: "I'm trying to cut back on sugar, but this dessert looks way too good to pass up. What's life without a little indulgence?",
    translation: "J'essaie de réduire ma consommation de sucre, mais ce dessert a l'air beaucoup trop bon pour refuser. Qu'est-ce que la vie sans un petit plaisir ?"
  }]
}, {
  categoryId: 59,
  english: "Can you make sure the [item] is on the side?",
  translation: "Pouvez-vous vous assurer que [item] est à part ?",
  context: "Une demande polie pour un élément spécifique d'un plat (comme la sauce) servi séparément.",
  examples: [{
    english: "Can you make sure the dressing is on the side? I'm super particular about my salads.",
    translation: "Pouvez-vous vous assurer que la vinaigrette est à part ? Je suis très pointilleux(se) sur mes salades."
  }]
}, {
  categoryId: 59,
  english: "I hate to be that person, but my [dish] is [problem].",
  translation: "Je déteste être cette personne, mais mon [dish] est [problem].",
  context: "Une façon polie d'introduire une plainte concernant un plat, pour montrer que vous n'aimez pas vous plaindre.",
  examples: [{
    english: "I hate to be that person, but my steak is completely overcooked. Could we possibly get this fixed?",
    translation: "Je déteste être cette personne, mais mon steak est complètement trop cuit. Pourrait-on arranger ça ?"
  }]
}, {
  categoryId: 59,
  english: "This is hands down the best [dish] I've ever had.",
  translation: "C'est de loin le/la meilleur(e) [dish] que j'aie jamais mangé(e).",
  context: "Pour faire un compliment très fort et enthousiaste sur un plat. 'Hands down' signifie 'sans conteste'.",
  examples: [{
    english: "This is hands down the best pizza I've ever had. The crust is incredible and the cheese just melts in your mouth.",
    translation: "C'est de loin la meilleure pizza que j'aie jamais mangée. La croûte est incroyable et le fromage fond dans la bouche."
  }]
}, {
  categoryId: 59,
  english: "I'm so stuffed, but I still have room for dessert.",
  translation: "Je suis rassasié(e), mais j'ai encore de la place pour le dessert.",
  context: "Une phrase humoristique courante pour dire qu'on a toujours de la place pour le dessert, peu importe à quel point on a mangé.",
  examples: [{
    english: "I'm so stuffed I can barely move, but somehow I still have room for dessert. It's like I have a separate dessert stomach.",
    translation: "Je suis si rassasié(e) que je peux à peine bouger, mais j'ai quand même de la place pour le dessert. C'est comme si j'avais un estomac à part pour les desserts."
  }]
}, {
  categoryId: 59,
  english: "I'm curious if it lives up to the hype.",
  translation: "Je suis curieux(se) de savoir si c'est à la hauteur de sa réputation.",
  context: "Pour exprimer un scepticisme poli à propos d'un lieu ou d'un produit très populaire ('hype').",
  examples: [{
    english: "I've been on a health food kick lately, and this place supposedly has amazing quinoa bowls. I'm curious if it lives up to the hype.",
    translation: "Je suis dans une phase 'nourriture saine' ces derniers temps, et cet endroit est censé avoir des bols de quinoa incroyables. Je suis curieux de savoir si c'est à la hauteur de sa réputation."
  }]
}, {
  categoryId: 59,
  english: "The service is [adjective], but the food makes up for it.",
  translation: "Le service est [adjective], mais la nourriture compense.",
  context: "Pour décrire un restaurant où la qualité de la nourriture est bien meilleure que celle du service.",
  examples: [{
    english: "The service here is absolutely terrible, but the food makes up for it. You come here for the tacos, not the five-star treatment.",
    translation: "Le service ici est absolument terrible, mais la nourriture compense. On vient ici pour les tacos, pas pour un service cinq étoiles."
  }]
}, {
  categoryId: 59,
  english: "It's funny how your palate evolves over time.",
  translation: "C'est drôle comme le palais évolue avec le temps.",
  context: "Pour commenter le fait que ses propres goûts culinaires ont changé au fil des ans.",
  examples: [{
    english: "I used to be obsessed with fast food, but now I'm totally into farm-to-table. It's funny how your palate evolves over time.",
    translation: "Avant, j'étais obsédé(e) par la restauration rapide, mais maintenant je suis à fond dans le 'de la ferme à la table'. C'est drôle comme le palais évolue avec le temps."
  }]
}];
var _default = exports.default = foodRestaurant;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,