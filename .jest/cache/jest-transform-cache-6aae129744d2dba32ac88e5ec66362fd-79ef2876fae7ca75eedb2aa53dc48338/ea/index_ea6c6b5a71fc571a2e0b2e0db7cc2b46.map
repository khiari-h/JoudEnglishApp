{"version":3,"names":["memo","View","Text","LinearGradient","PropTypes","FullCorrectionMode","IdentifyErrorsMode","MultipleChoiceMode","createStyles","jsx","_jsx","jsxs","_jsxs","ErrorCorrectionWordSection","cov_1u0u9coehq","s","_ref","currentExercise","exerciseCounter","correctionMode","levelColor","showFeedback","isCorrect","userCorrection","selectedErrorIndices","selectedChoiceIndex","onChangeUserCorrection","onToggleErrorIndex","onSelectChoice","f","styles","style","container","children","CounterSection","b","exercise","includes","errorContainer","errorText","propTypes","object","isRequired","string","oneOf","bool","arrayOf","number","func","displayName","_ref2","counterSection","colors","start","x","y","end","counterGradient","counterBadge","borderColor","counterText","color"],"sources":["index.js"],"sourcesContent":["// ErrorCorrectionWordSection/index.js - WRAPPER INTELLIGENT (pattern VocabularyWordSection)\r\n\r\nimport { memo } from \"react\";\r\nimport { View, Text } from \"react-native\";\r\nimport { LinearGradient } from \"expo-linear-gradient\";\r\nimport PropTypes from 'prop-types';\r\nimport FullCorrectionMode from \"../modes/FullCorrectionMode\";\r\nimport IdentifyErrorsMode from \"../modes/IdentifyErrorsMode\";\r\nimport MultipleChoiceMode from \"../modes/MultipleChoiceMode\";\r\nimport createStyles from \"./style\";\r\n\r\n/**\r\n * âš¡ ErrorCorrectionWordSection - Wrapper intelligent\r\n * Garde toute la logique mÃ©tier (compteur, mode switching, etc.)\r\n * Pattern identique Ã  VocabularyWordSection\r\n * \r\n * @param {Object} currentExercise - Exercice actuel avec ses propriÃ©tÃ©s\r\n * @param {string} exerciseCounter - Compteur stylÃ© (ex: \"5 / 20\")\r\n * @param {string} correctionMode - Mode de correction (full/identify/multiple_choice)\r\n * @param {string} levelColor - Couleur du niveau\r\n * @param {boolean} showFeedback - Ã‰tat d'affichage du feedback\r\n * @param {boolean} isCorrect - RÃ©ponse correcte ou non\r\n * @param {string} userCorrection - Texte corrigÃ© (mode full)\r\n * @param {Array} selectedErrorIndices - Indices sÃ©lectionnÃ©s (mode identify)\r\n * @param {number} selectedChoiceIndex - Choix sÃ©lectionnÃ© (mode multiple_choice)\r\n * @param {function} onChangeUserCorrection - Callback mode full\r\n * @param {function} onToggleErrorIndex - Callback mode identify\r\n * @param {function} onSelectChoice - Callback mode multiple_choice\r\n */\r\nconst ErrorCorrectionWordSection = memo(({\r\n  currentExercise,\r\n  exerciseCounter,\r\n  correctionMode,\r\n  levelColor,\r\n  showFeedback,\r\n  isCorrect,\r\n  // Mode-specific props\r\n  userCorrection,\r\n  selectedErrorIndices,\r\n  selectedChoiceIndex,\r\n  onChangeUserCorrection,\r\n  onToggleErrorIndex,\r\n  onSelectChoice,\r\n}) => {\r\n  const styles = createStyles();\r\n  \r\n  return (\r\n    <View style={styles.container}>\r\n      {/* ðŸŽ¯ COMPTEUR STYLÃ‰ - Garde la logique existante */}\r\n      <CounterSection exerciseCounter={exerciseCounter} levelColor={levelColor} styles={styles} />\r\n\r\n      {/* ðŸŽ¨ MODE SWITCHING - Affiche le bon composant selon le mode */}\r\n      {correctionMode === 'full' && (\r\n        <FullCorrectionMode\r\n          exercise={currentExercise}\r\n          userCorrection={userCorrection}\r\n          onChangeUserCorrection={onChangeUserCorrection}\r\n          showFeedback={showFeedback}\r\n          isCorrect={isCorrect}\r\n          levelColor={levelColor}\r\n        />\r\n      )}\r\n\r\n      {correctionMode === 'identify' && (\r\n        <IdentifyErrorsMode\r\n          exercise={currentExercise}\r\n          selectedErrorIndices={selectedErrorIndices}\r\n          onToggleErrorIndex={onToggleErrorIndex}\r\n          showFeedback={showFeedback}\r\n          levelColor={levelColor}\r\n        />\r\n      )}\r\n\r\n      {correctionMode === 'multiple_choice' && (\r\n        <MultipleChoiceMode\r\n          exercise={currentExercise}\r\n          selectedChoiceIndex={selectedChoiceIndex}\r\n          onSelectChoice={onSelectChoice}\r\n          showFeedback={showFeedback}\r\n          levelColor={levelColor}\r\n        />\r\n      )}\r\n\r\n      {/* ðŸš¨ MODE INCONNU */}\r\n      {!['full', 'identify', 'multiple_choice'].includes(correctionMode) && (\r\n        <View style={styles.errorContainer}>\r\n          <Text style={styles.errorText}>\r\n            Mode de correction inconnu: {correctionMode}\r\n          </Text>\r\n        </View>\r\n      )}\r\n    </View>\r\n  );\r\n});\r\n\r\n// PropTypes pour le composant principal ErrorCorrectionWordSection\r\nErrorCorrectionWordSection.propTypes = {\r\n  currentExercise: PropTypes.object.isRequired,\r\n  exerciseCounter: PropTypes.string.isRequired,\r\n  correctionMode: PropTypes.oneOf(['full', 'identify', 'multiple_choice']).isRequired,\r\n  levelColor: PropTypes.string.isRequired,\r\n  showFeedback: PropTypes.bool.isRequired,\r\n  isCorrect: PropTypes.bool.isRequired,\r\n  // Mode-specific props\r\n  userCorrection: PropTypes.string,\r\n  selectedErrorIndices: PropTypes.arrayOf(PropTypes.number),\r\n  selectedChoiceIndex: PropTypes.number,\r\n  onChangeUserCorrection: PropTypes.func,\r\n  onToggleErrorIndex: PropTypes.func,\r\n  onSelectChoice: PropTypes.func,\r\n};\r\n\r\nErrorCorrectionWordSection.displayName = \"ErrorCorrectionWordSection\";\r\n\r\nexport default ErrorCorrectionWordSection;\r\n\r\nconst CounterSection = ({ exerciseCounter, levelColor, styles }) => (\r\n  <View style={styles.counterSection}>\r\n    <LinearGradient\r\n      colors={[`${levelColor}08`, `${levelColor}04`, 'transparent']}\r\n      start={{ x: 0, y: 0 }}\r\n      end={{ x: 1, y: 1 }}\r\n      style={styles.counterGradient}\r\n    >\r\n      {/* Compteur principal */}\r\n      <View style={[styles.counterBadge, { borderColor: `${levelColor}20` }]}> \r\n        <Text style={[styles.counterText, { color: levelColor }]}> \r\n          {exerciseCounter}\r\n        </Text>\r\n      </View>\r\n    </LinearGradient>\r\n  </View>\r\n);"],"mappings":"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","ignoreList":[]}