88de73e7f438b572ef36b8578f72aa74
_getJestObj().mock('expo-router', function () {
  return {
    useSegments: jest.fn(function () {
      return [];
    }),
    usePathname: jest.fn(function () {
      return '/';
    })
  };
});
_getJestObj().mock('../../src/hooks/useActivityMetrics', function () {
  return {
    __esModule: true,
    default: jest.fn(function () {
      return {
        startSession: jest.fn(),
        endSession: jest.fn(),
        updateStreak: jest.fn()
      };
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactNative = require("@testing-library/react-native");
var _useRouteActivityTracker = _interopRequireDefault(require("../../src/hooks/useRouteActivityTracker"));
function _getJestObj() {
  var _require0 = require("@jest/globals"),
    jest = _require0.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useRouteActivityTracker', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('Fonctions utilitaires extraites', function () {
    it('devrait détecter correctement les exercices', function () {
      var mockStartSession = jest.fn();
      var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
      useActivityMetrics.mockReturnValue({
        startSession: mockStartSession,
        endSession: jest.fn(),
        updateStreak: jest.fn()
      });
      var _require = require('expo-router'),
        useSegments = _require.useSegments;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');
      jest.clearAllMocks();
      useSegments.mockReturnValue(['level', 'GrammarExercise']);
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('GrammarExercise');
      jest.clearAllMocks();
      useSegments.mockReturnValue(['level', 'Assessment']);
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('Assessment');
    });
    it('devrait gérer les transitions entre exercices', function () {
      var mockStartSession = jest.fn();
      var mockEndSession = jest.fn();
      var mockUpdateStreak = jest.fn();
      var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
      useActivityMetrics.mockReturnValue({
        startSession: mockStartSession,
        endSession: mockEndSession,
        updateStreak: mockUpdateStreak
      });
      var _require2 = require('expo-router'),
        useSegments = _require2.useSegments,
        usePathname = _require2.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');
      expect(mockStartSession).toHaveBeenCalledTimes(1);
      jest.clearAllMocks();
      useSegments.mockReturnValue(['level', 'GrammarExercise']);
      usePathname.mockReturnValue('/level/GrammarExercise');
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('GrammarExercise');
      expect(mockStartSession).toHaveBeenCalledTimes(1);
    });
    it('devrait gérer les erreurs de session gracieusement', function () {
      var mockStartSession = jest.fn().mockImplementation(function () {
        throw new Error('Erreur de session');
      });
      var mockEndSession = jest.fn();
      var mockUpdateStreak = jest.fn();
      var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
      useActivityMetrics.mockReturnValue({
        startSession: mockStartSession,
        endSession: mockEndSession,
        updateStreak: mockUpdateStreak
      });
      var _require3 = require('expo-router'),
        useSegments = _require3.useSegments,
        usePathname = _require3.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      expect(function () {
        (0, _reactNative.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        });
      }).not.toThrow();
    });
    it('devrait éviter les re-déclenchements inutiles', function () {
      var mockStartSession = jest.fn();
      var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
      useActivityMetrics.mockReturnValue({
        startSession: mockStartSession,
        endSession: jest.fn(),
        updateStreak: jest.fn()
      });
      var _require4 = require('expo-router'),
        useSegments = _require4.useSegments,
        usePathname = _require4.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      var hook = (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledTimes(1);
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      hook.rerender();
      expect(mockStartSession).toHaveBeenCalledTimes(1);
    });
  });
  it('devrait s\'initialiser sans erreur', function () {
    var _require5 = require('expo-router'),
      useSegments = _require5.useSegments,
      usePathname = _require5.usePathname;
    useSegments.mockReturnValue(['home']);
    usePathname.mockReturnValue('/home');
    expect(function () {
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
    }).not.toThrow();
  });
  it('devrait détecter un exercice de vocabulaire', function () {
    var mockStartSession = jest.fn();
    var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
    useActivityMetrics.mockReturnValue({
      startSession: mockStartSession,
      endSession: jest.fn(),
      updateStreak: jest.fn()
    });
    var _require6 = require('expo-router'),
      useSegments = _require6.useSegments,
      usePathname = _require6.usePathname;
    useSegments.mockReturnValue(['level', 'VocabularyExercise']);
    usePathname.mockReturnValue('/level/VocabularyExercise');
    (0, _reactNative.renderHook)(function () {
      return (0, _useRouteActivityTracker.default)();
    });
    expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');
  });
  it('devrait détecter un assessment', function () {
    var mockStartSession = jest.fn();
    var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
    useActivityMetrics.mockReturnValue({
      startSession: mockStartSession,
      endSession: jest.fn(),
      updateStreak: jest.fn()
    });
    var _require7 = require('expo-router'),
      useSegments = _require7.useSegments,
      usePathname = _require7.usePathname;
    useSegments.mockReturnValue(['level', 'Assessment']);
    usePathname.mockReturnValue('/level/Assessment');
    (0, _reactNative.renderHook)(function () {
      return (0, _useRouteActivityTracker.default)();
    });
    expect(mockStartSession).toHaveBeenCalledWith('Assessment');
  });
  it('ne devrait pas démarrer de session pour une page normale', function () {
    var mockStartSession = jest.fn();
    var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
    useActivityMetrics.mockReturnValue({
      startSession: mockStartSession,
      endSession: jest.fn(),
      updateStreak: jest.fn()
    });
    var _require8 = require('expo-router'),
      useSegments = _require8.useSegments,
      usePathname = _require8.usePathname;
    useSegments.mockReturnValue(['home', 'dashboard']);
    usePathname.mockReturnValue('/home/dashboard');
    (0, _reactNative.renderHook)(function () {
      return (0, _useRouteActivityTracker.default)();
    });
    expect(mockStartSession).not.toHaveBeenCalled();
  });
  it('devrait gérer les segments vides', function () {
    var mockStartSession = jest.fn();
    var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
    useActivityMetrics.mockReturnValue({
      startSession: mockStartSession,
      endSession: jest.fn(),
      updateStreak: jest.fn()
    });
    var _require9 = require('expo-router'),
      useSegments = _require9.useSegments,
      usePathname = _require9.usePathname;
    useSegments.mockReturnValue([]);
    usePathname.mockReturnValue('/');
    expect(function () {
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
    }).not.toThrow();
    expect(mockStartSession).not.toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VTZWdtZW50cyIsImplc3QiLCJmbiIsInVzZVBhdGhuYW1lIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJzdGFydFNlc3Npb24iLCJlbmRTZXNzaW9uIiwidXBkYXRlU3RyZWFrIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmUiLCJfdXNlUm91dGVBY3Rpdml0eVRyYWNrZXIiLCJfcmVxdWlyZTAiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwiaXQiLCJtb2NrU3RhcnRTZXNzaW9uIiwidXNlQWN0aXZpdHlNZXRyaWNzIiwibW9ja1JldHVyblZhbHVlIiwiX3JlcXVpcmUiLCJyZW5kZXJIb29rIiwidXNlUm91dGVBY3Rpdml0eVRyYWNrZXIiLCJleHBlY3QiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsIm1vY2tFbmRTZXNzaW9uIiwibW9ja1VwZGF0ZVN0cmVhayIsIl9yZXF1aXJlMiIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsIkVycm9yIiwiX3JlcXVpcmUzIiwibm90IiwidG9UaHJvdyIsIl9yZXF1aXJlNCIsImhvb2siLCJyZXJlbmRlciIsIl9yZXF1aXJlNSIsIl9yZXF1aXJlNiIsIl9yZXF1aXJlNyIsIl9yZXF1aXJlOCIsInRvSGF2ZUJlZW5DYWxsZWQiLCJfcmVxdWlyZTkiXSwic291cmNlcyI6WyJ1c2VSb3V0ZUFjdGl2aXR5VHJhY2tlci50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIF9fdGVzdHNfXy9ob29rcy91c2VSb3V0ZUFjdGl2aXR5VHJhY2tlci50ZXN0LmpzXG5pbXBvcnQgeyByZW5kZXJIb29rIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHVzZVJvdXRlQWN0aXZpdHlUcmFja2VyIGZyb20gJy4uLy4uL3NyYy9ob29rcy91c2VSb3V0ZUFjdGl2aXR5VHJhY2tlcic7XG5cbmplc3QubW9jaygnZXhwby1yb3V0ZXInLCAoKSA9PiAoe1xuICB1c2VTZWdtZW50czogamVzdC5mbigoKSA9PiBbXSksXG4gIHVzZVBhdGhuYW1lOiBqZXN0LmZuKCgpID0+ICcvJyksXG59KSk7XG5cbmplc3QubW9jaygnLi4vLi4vc3JjL2hvb2tzL3VzZUFjdGl2aXR5TWV0cmljcycsICgpID0+ICh7XG4gIF9fZXNNb2R1bGU6IHRydWUsXG4gIGRlZmF1bHQ6IGplc3QuZm4oKCkgPT4gKHtcbiAgICBzdGFydFNlc3Npb246IGplc3QuZm4oKSxcbiAgICBlbmRTZXNzaW9uOiBqZXN0LmZuKCksXG4gICAgdXBkYXRlU3RyZWFrOiBqZXN0LmZuKCksXG4gIH0pKSxcbn0pKTtcblxuZGVzY3JpYmUoJ3VzZVJvdXRlQWN0aXZpdHlUcmFja2VyJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0ZvbmN0aW9ucyB1dGlsaXRhaXJlcyBleHRyYWl0ZXMnLCAoKSA9PiB7XG4gICAgaXQoJ2RldnJhaXQgZMOpdGVjdGVyIGNvcnJlY3RlbWVudCBsZXMgZXhlcmNpY2VzJywgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1N0YXJ0U2Vzc2lvbiA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IHVzZUFjdGl2aXR5TWV0cmljcyA9IHJlcXVpcmUoJy4uLy4uL3NyYy9ob29rcy91c2VBY3Rpdml0eU1ldHJpY3MnKS5kZWZhdWx0O1xuICAgICAgdXNlQWN0aXZpdHlNZXRyaWNzLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICAgIHN0YXJ0U2Vzc2lvbjogbW9ja1N0YXJ0U2Vzc2lvbixcbiAgICAgICAgZW5kU2Vzc2lvbjogamVzdC5mbigpLFxuICAgICAgICB1cGRhdGVTdHJlYWs6IGplc3QuZm4oKSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB7IHVzZVNlZ21lbnRzIH0gPSByZXF1aXJlKCdleHBvLXJvdXRlcicpO1xuICAgICAgXG4gICAgICAvLyBUZXN0IGF2ZWMgZGlmZsOpcmVudHMgdHlwZXMgZCdleGVyY2ljZXNcbiAgICAgIHVzZVNlZ21lbnRzLm1vY2tSZXR1cm5WYWx1ZShbJ2xldmVsJywgJ1ZvY2FidWxhcnlFeGVyY2lzZSddKTtcbiAgICAgIHJlbmRlckhvb2soKCkgPT4gdXNlUm91dGVBY3Rpdml0eVRyYWNrZXIoKSk7XG4gICAgICBleHBlY3QobW9ja1N0YXJ0U2Vzc2lvbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ1ZvY2FidWxhcnlFeGVyY2lzZScpO1xuXG4gICAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICAgIFxuICAgICAgdXNlU2VnbWVudHMubW9ja1JldHVyblZhbHVlKFsnbGV2ZWwnLCAnR3JhbW1hckV4ZXJjaXNlJ10pO1xuICAgICAgcmVuZGVySG9vaygoKSA9PiB1c2VSb3V0ZUFjdGl2aXR5VHJhY2tlcigpKTtcbiAgICAgIGV4cGVjdChtb2NrU3RhcnRTZXNzaW9uKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnR3JhbW1hckV4ZXJjaXNlJyk7XG5cbiAgICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICAgICAgXG4gICAgICB1c2VTZWdtZW50cy5tb2NrUmV0dXJuVmFsdWUoWydsZXZlbCcsICdBc3Nlc3NtZW50J10pO1xuICAgICAgcmVuZGVySG9vaygoKSA9PiB1c2VSb3V0ZUFjdGl2aXR5VHJhY2tlcigpKTtcbiAgICAgIGV4cGVjdChtb2NrU3RhcnRTZXNzaW9uKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnQXNzZXNzbWVudCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldnJhaXQgZ8OpcmVyIGxlcyB0cmFuc2l0aW9ucyBlbnRyZSBleGVyY2ljZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrU3RhcnRTZXNzaW9uID0gamVzdC5mbigpO1xuICAgICAgY29uc3QgbW9ja0VuZFNlc3Npb24gPSBqZXN0LmZuKCk7XG4gICAgICBjb25zdCBtb2NrVXBkYXRlU3RyZWFrID0gamVzdC5mbigpO1xuICAgICAgXG4gICAgICBjb25zdCB1c2VBY3Rpdml0eU1ldHJpY3MgPSByZXF1aXJlKCcuLi8uLi9zcmMvaG9va3MvdXNlQWN0aXZpdHlNZXRyaWNzJykuZGVmYXVsdDtcbiAgICAgIHVzZUFjdGl2aXR5TWV0cmljcy5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgICBzdGFydFNlc3Npb246IG1vY2tTdGFydFNlc3Npb24sXG4gICAgICAgIGVuZFNlc3Npb246IG1vY2tFbmRTZXNzaW9uLFxuICAgICAgICB1cGRhdGVTdHJlYWs6IG1vY2tVcGRhdGVTdHJlYWssXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgeyB1c2VTZWdtZW50cywgdXNlUGF0aG5hbWUgfSA9IHJlcXVpcmUoJ2V4cG8tcm91dGVyJyk7XG4gICAgICBcbiAgICAgIC8vIFByZW1pZXIgZXhlcmNpY2VcbiAgICAgIHVzZVNlZ21lbnRzLm1vY2tSZXR1cm5WYWx1ZShbJ2xldmVsJywgJ1ZvY2FidWxhcnlFeGVyY2lzZSddKTtcbiAgICAgIHVzZVBhdGhuYW1lLm1vY2tSZXR1cm5WYWx1ZSgnL2xldmVsL1ZvY2FidWxhcnlFeGVyY2lzZScpO1xuICAgICAgcmVuZGVySG9vaygoKSA9PiB1c2VSb3V0ZUFjdGl2aXR5VHJhY2tlcigpKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KG1vY2tTdGFydFNlc3Npb24pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdWb2NhYnVsYXJ5RXhlcmNpc2UnKTtcbiAgICAgIGV4cGVjdChtb2NrU3RhcnRTZXNzaW9uKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG5cbiAgICAgIC8vIE5ldHRveWVyIGxlcyBtb2NrcyBwb3VyIGxlIHRlc3Qgc3VpdmFudFxuICAgICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gICAgICBcbiAgICAgIC8vIERldXhpw6htZSBleGVyY2ljZSAobm91dmVhdSBob29rLCBub3V2ZWxsZSBpbnN0YW5jZSlcbiAgICAgIHVzZVNlZ21lbnRzLm1vY2tSZXR1cm5WYWx1ZShbJ2xldmVsJywgJ0dyYW1tYXJFeGVyY2lzZSddKTtcbiAgICAgIHVzZVBhdGhuYW1lLm1vY2tSZXR1cm5WYWx1ZSgnL2xldmVsL0dyYW1tYXJFeGVyY2lzZScpO1xuICAgICAgcmVuZGVySG9vaygoKSA9PiB1c2VSb3V0ZUFjdGl2aXR5VHJhY2tlcigpKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KG1vY2tTdGFydFNlc3Npb24pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdHcmFtbWFyRXhlcmNpc2UnKTtcbiAgICAgIGV4cGVjdChtb2NrU3RhcnRTZXNzaW9uKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2cmFpdCBnw6lyZXIgbGVzIGVycmV1cnMgZGUgc2Vzc2lvbiBncmFjaWV1c2VtZW50JywgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1N0YXJ0U2Vzc2lvbiA9IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VycmV1ciBkZSBzZXNzaW9uJyk7XG4gICAgICB9KTtcbiAgICAgIGNvbnN0IG1vY2tFbmRTZXNzaW9uID0gamVzdC5mbigpO1xuICAgICAgY29uc3QgbW9ja1VwZGF0ZVN0cmVhayA9IGplc3QuZm4oKTtcbiAgICAgIFxuICAgICAgY29uc3QgdXNlQWN0aXZpdHlNZXRyaWNzID0gcmVxdWlyZSgnLi4vLi4vc3JjL2hvb2tzL3VzZUFjdGl2aXR5TWV0cmljcycpLmRlZmF1bHQ7XG4gICAgICB1c2VBY3Rpdml0eU1ldHJpY3MubW9ja1JldHVyblZhbHVlKHtcbiAgICAgICAgc3RhcnRTZXNzaW9uOiBtb2NrU3RhcnRTZXNzaW9uLFxuICAgICAgICBlbmRTZXNzaW9uOiBtb2NrRW5kU2Vzc2lvbixcbiAgICAgICAgdXBkYXRlU3RyZWFrOiBtb2NrVXBkYXRlU3RyZWFrLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHsgdXNlU2VnbWVudHMsIHVzZVBhdGhuYW1lIH0gPSByZXF1aXJlKCdleHBvLXJvdXRlcicpO1xuICAgICAgdXNlU2VnbWVudHMubW9ja1JldHVyblZhbHVlKFsnbGV2ZWwnLCAnVm9jYWJ1bGFyeUV4ZXJjaXNlJ10pO1xuICAgICAgdXNlUGF0aG5hbWUubW9ja1JldHVyblZhbHVlKCcvbGV2ZWwvVm9jYWJ1bGFyeUV4ZXJjaXNlJyk7XG5cbiAgICAgIC8vIE5lIGRldnJhaXQgcGFzIHBsYW50ZXIgbWFsZ3LDqSBsJ2VycmV1clxuICAgICAgZXhwZWN0KCgpID0+IHtcbiAgICAgICAgcmVuZGVySG9vaygoKSA9PiB1c2VSb3V0ZUFjdGl2aXR5VHJhY2tlcigpKTtcbiAgICAgIH0pLm5vdC50b1Rocm93KCk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2cmFpdCDDqXZpdGVyIGxlcyByZS1kw6ljbGVuY2hlbWVudHMgaW51dGlsZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrU3RhcnRTZXNzaW9uID0gamVzdC5mbigpO1xuICAgICAgY29uc3QgdXNlQWN0aXZpdHlNZXRyaWNzID0gcmVxdWlyZSgnLi4vLi4vc3JjL2hvb2tzL3VzZUFjdGl2aXR5TWV0cmljcycpLmRlZmF1bHQ7XG4gICAgICB1c2VBY3Rpdml0eU1ldHJpY3MubW9ja1JldHVyblZhbHVlKHtcbiAgICAgICAgc3RhcnRTZXNzaW9uOiBtb2NrU3RhcnRTZXNzaW9uLFxuICAgICAgICBlbmRTZXNzaW9uOiBqZXN0LmZuKCksXG4gICAgICAgIHVwZGF0ZVN0cmVhazogamVzdC5mbigpLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHsgdXNlU2VnbWVudHMsIHVzZVBhdGhuYW1lIH0gPSByZXF1aXJlKCdleHBvLXJvdXRlcicpO1xuICAgICAgdXNlU2VnbWVudHMubW9ja1JldHVyblZhbHVlKFsnbGV2ZWwnLCAnVm9jYWJ1bGFyeUV4ZXJjaXNlJ10pO1xuICAgICAgdXNlUGF0aG5hbWUubW9ja1JldHVyblZhbHVlKCcvbGV2ZWwvVm9jYWJ1bGFyeUV4ZXJjaXNlJyk7XG5cbiAgICAgIC8vIFByZW1pZXIgcmVuZHVcbiAgICAgIGNvbnN0IGhvb2sgPSByZW5kZXJIb29rKCgpID0+IHVzZVJvdXRlQWN0aXZpdHlUcmFja2VyKCkpO1xuICAgICAgZXhwZWN0KG1vY2tTdGFydFNlc3Npb24pLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcblxuICAgICAgLy8gTcOqbWUgcGF0aG5hbWUsIG5lIGRldnJhaXQgcGFzIHJlZMOpbWFycmVyIChtw6ptZSBpbnN0YW5jZSlcbiAgICAgIC8vIFNpbXVsZXIgdW4gY2hhbmdlbWVudCBkZSBzZWdtZW50cyBtYWlzIG3Dqm1lIHBhdGhuYW1lXG4gICAgICB1c2VTZWdtZW50cy5tb2NrUmV0dXJuVmFsdWUoWydsZXZlbCcsICdWb2NhYnVsYXJ5RXhlcmNpc2UnXSk7XG4gICAgICB1c2VQYXRobmFtZS5tb2NrUmV0dXJuVmFsdWUoJy9sZXZlbC9Wb2NhYnVsYXJ5RXhlcmNpc2UnKTtcbiAgICAgIFxuICAgICAgLy8gRm9yY2VyIHVuIHJlLXJlbmRlclxuICAgICAgaG9vay5yZXJlbmRlcigpO1xuICAgICAgXG4gICAgICAvLyBEZXZyYWl0IHRvdWpvdXJzIMOqdHJlIDEgY2FyIG3Dqm1lIHBhdGhuYW1lXG4gICAgICBleHBlY3QobW9ja1N0YXJ0U2Vzc2lvbikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgIH0pO1xuXG5cbiAgfSk7XG5cbiAgaXQoJ2RldnJhaXQgc1xcJ2luaXRpYWxpc2VyIHNhbnMgZXJyZXVyJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgdXNlU2VnbWVudHMsIHVzZVBhdGhuYW1lIH0gPSByZXF1aXJlKCdleHBvLXJvdXRlcicpO1xuICAgIHVzZVNlZ21lbnRzLm1vY2tSZXR1cm5WYWx1ZShbJ2hvbWUnXSk7XG4gICAgdXNlUGF0aG5hbWUubW9ja1JldHVyblZhbHVlKCcvaG9tZScpO1xuXG4gICAgZXhwZWN0KCgpID0+IHtcbiAgICAgIHJlbmRlckhvb2soKCkgPT4gdXNlUm91dGVBY3Rpdml0eVRyYWNrZXIoKSk7XG4gICAgfSkubm90LnRvVGhyb3coKTtcbiAgfSk7XG5cbiAgaXQoJ2RldnJhaXQgZMOpdGVjdGVyIHVuIGV4ZXJjaWNlIGRlIHZvY2FidWxhaXJlJywgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tTdGFydFNlc3Npb24gPSBqZXN0LmZuKCk7XG4gICAgY29uc3QgdXNlQWN0aXZpdHlNZXRyaWNzID0gcmVxdWlyZSgnLi4vLi4vc3JjL2hvb2tzL3VzZUFjdGl2aXR5TWV0cmljcycpLmRlZmF1bHQ7XG4gICAgdXNlQWN0aXZpdHlNZXRyaWNzLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICBzdGFydFNlc3Npb246IG1vY2tTdGFydFNlc3Npb24sXG4gICAgICBlbmRTZXNzaW9uOiBqZXN0LmZuKCksXG4gICAgICB1cGRhdGVTdHJlYWs6IGplc3QuZm4oKSxcbiAgICB9KTtcblxuICAgIGNvbnN0IHsgdXNlU2VnbWVudHMsIHVzZVBhdGhuYW1lIH0gPSByZXF1aXJlKCdleHBvLXJvdXRlcicpO1xuICAgIHVzZVNlZ21lbnRzLm1vY2tSZXR1cm5WYWx1ZShbJ2xldmVsJywgJ1ZvY2FidWxhcnlFeGVyY2lzZSddKTtcbiAgICB1c2VQYXRobmFtZS5tb2NrUmV0dXJuVmFsdWUoJy9sZXZlbC9Wb2NhYnVsYXJ5RXhlcmNpc2UnKTtcblxuICAgIHJlbmRlckhvb2soKCkgPT4gdXNlUm91dGVBY3Rpdml0eVRyYWNrZXIoKSk7XG5cbiAgICBleHBlY3QobW9ja1N0YXJ0U2Vzc2lvbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ1ZvY2FidWxhcnlFeGVyY2lzZScpO1xuICB9KTtcblxuICBpdCgnZGV2cmFpdCBkw6l0ZWN0ZXIgdW4gYXNzZXNzbWVudCcsICgpID0+IHtcbiAgICBjb25zdCBtb2NrU3RhcnRTZXNzaW9uID0gamVzdC5mbigpO1xuICAgIGNvbnN0IHVzZUFjdGl2aXR5TWV0cmljcyA9IHJlcXVpcmUoJy4uLy4uL3NyYy9ob29rcy91c2VBY3Rpdml0eU1ldHJpY3MnKS5kZWZhdWx0O1xuICAgIHVzZUFjdGl2aXR5TWV0cmljcy5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgc3RhcnRTZXNzaW9uOiBtb2NrU3RhcnRTZXNzaW9uLFxuICAgICAgZW5kU2Vzc2lvbjogamVzdC5mbigpLFxuICAgICAgdXBkYXRlU3RyZWFrOiBqZXN0LmZuKCksXG4gICAgfSk7XG5cbiAgICBjb25zdCB7IHVzZVNlZ21lbnRzLCB1c2VQYXRobmFtZSB9ID0gcmVxdWlyZSgnZXhwby1yb3V0ZXInKTtcbiAgICB1c2VTZWdtZW50cy5tb2NrUmV0dXJuVmFsdWUoWydsZXZlbCcsICdBc3Nlc3NtZW50J10pO1xuICAgIHVzZVBhdGhuYW1lLm1vY2tSZXR1cm5WYWx1ZSgnL2xldmVsL0Fzc2Vzc21lbnQnKTtcblxuICAgIHJlbmRlckhvb2soKCkgPT4gdXNlUm91dGVBY3Rpdml0eVRyYWNrZXIoKSk7XG5cbiAgICBleHBlY3QobW9ja1N0YXJ0U2Vzc2lvbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ0Fzc2Vzc21lbnQnKTtcbiAgfSk7XG5cbiAgaXQoJ25lIGRldnJhaXQgcGFzIGTDqW1hcnJlciBkZSBzZXNzaW9uIHBvdXIgdW5lIHBhZ2Ugbm9ybWFsZScsICgpID0+IHtcbiAgICBjb25zdCBtb2NrU3RhcnRTZXNzaW9uID0gamVzdC5mbigpO1xuICAgIGNvbnN0IHVzZUFjdGl2aXR5TWV0cmljcyA9IHJlcXVpcmUoJy4uLy4uL3NyYy9ob29rcy91c2VBY3Rpdml0eU1ldHJpY3MnKS5kZWZhdWx0O1xuICAgIHVzZUFjdGl2aXR5TWV0cmljcy5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgc3RhcnRTZXNzaW9uOiBtb2NrU3RhcnRTZXNzaW9uLFxuICAgICAgZW5kU2Vzc2lvbjogamVzdC5mbigpLFxuICAgICAgdXBkYXRlU3RyZWFrOiBqZXN0LmZuKCksXG4gICAgfSk7XG5cbiAgICBjb25zdCB7IHVzZVNlZ21lbnRzLCB1c2VQYXRobmFtZSB9ID0gcmVxdWlyZSgnZXhwby1yb3V0ZXInKTtcbiAgICB1c2VTZWdtZW50cy5tb2NrUmV0dXJuVmFsdWUoWydob21lJywgJ2Rhc2hib2FyZCddKTtcbiAgICB1c2VQYXRobmFtZS5tb2NrUmV0dXJuVmFsdWUoJy9ob21lL2Rhc2hib2FyZCcpO1xuXG4gICAgcmVuZGVySG9vaygoKSA9PiB1c2VSb3V0ZUFjdGl2aXR5VHJhY2tlcigpKTtcblxuICAgIGV4cGVjdChtb2NrU3RhcnRTZXNzaW9uKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcblxuICBpdCgnZGV2cmFpdCBnw6lyZXIgbGVzIHNlZ21lbnRzIHZpZGVzJywgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tTdGFydFNlc3Npb24gPSBqZXN0LmZuKCk7XG4gICAgY29uc3QgdXNlQWN0aXZpdHlNZXRyaWNzID0gcmVxdWlyZSgnLi4vLi4vc3JjL2hvb2tzL3VzZUFjdGl2aXR5TWV0cmljcycpLmRlZmF1bHQ7XG4gICAgdXNlQWN0aXZpdHlNZXRyaWNzLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICBzdGFydFNlc3Npb246IG1vY2tTdGFydFNlc3Npb24sXG4gICAgICBlbmRTZXNzaW9uOiBqZXN0LmZuKCksXG4gICAgICB1cGRhdGVTdHJlYWs6IGplc3QuZm4oKSxcbiAgICB9KTtcblxuICAgIGNvbnN0IHsgdXNlU2VnbWVudHMsIHVzZVBhdGhuYW1lIH0gPSByZXF1aXJlKCdleHBvLXJvdXRlcicpO1xuICAgIHVzZVNlZ21lbnRzLm1vY2tSZXR1cm5WYWx1ZShbXSk7XG4gICAgdXNlUGF0aG5hbWUubW9ja1JldHVyblZhbHVlKCcvJyk7XG5cbiAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgcmVuZGVySG9vaygoKSA9PiB1c2VSb3V0ZUFjdGl2aXR5VHJhY2tlcigpKTtcbiAgICB9KS5ub3QudG9UaHJvdygpO1xuXG4gICAgZXhwZWN0KG1vY2tTdGFydFNlc3Npb24pLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xufSk7Il0sIm1hcHBpbmdzIjoiQUFJQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsYUFBYSxFQUFFO0VBQUEsT0FBTztJQUM5QkMsV0FBVyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFBLE9BQU0sRUFBRTtJQUFBLEVBQUM7SUFDOUJDLFdBQVcsRUFBRUYsSUFBSSxDQUFDQyxFQUFFLENBQUM7TUFBQSxPQUFNLEdBQUc7SUFBQTtFQUNoQyxDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBRUhKLFdBQUEsR0FBS0MsSUFBSSxDQUFDLG9DQUFvQyxFQUFFO0VBQUEsT0FBTztJQUNyREssVUFBVSxFQUFFLElBQUk7SUFDaEJDLE9BQU8sRUFBRUosSUFBSSxDQUFDQyxFQUFFLENBQUM7TUFBQSxPQUFPO1FBQ3RCSSxZQUFZLEVBQUVMLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7UUFDdkJLLFVBQVUsRUFBRU4sSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztRQUNyQk0sWUFBWSxFQUFFUCxJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUN4QixDQUFDO0lBQUEsQ0FBQztFQUNKLENBQUM7QUFBQSxDQUFDLENBQUM7QUFBQyxJQUFBTyxzQkFBQSxHQUFBQyxPQUFBO0FBZkosSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsd0JBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUE4RSxTQUFBWixZQUFBO0VBQUEsSUFBQWUsU0FBQSxHQUFBSCxPQUFBO0lBQUFULElBQUEsR0FBQVksU0FBQSxDQUFBWixJQUFBO0VBQUFILFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFHLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQWdCOUVhLFFBQVEsQ0FBQyx5QkFBeUIsRUFBRSxZQUFNO0VBQ3hDQyxVQUFVLENBQUMsWUFBTTtJQUNmZCxJQUFJLENBQUNlLGFBQWEsQ0FBQyxDQUFDO0VBQ3RCLENBQUMsQ0FBQztFQUVGRixRQUFRLENBQUMsaUNBQWlDLEVBQUUsWUFBTTtJQUNoREcsRUFBRSxDQUFDLDZDQUE2QyxFQUFFLFlBQU07TUFDdEQsSUFBTUMsZ0JBQWdCLEdBQUdqQixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ2xDLElBQU1pQixrQkFBa0IsR0FBR1QsT0FBTyxDQUFDLG9DQUFvQyxDQUFDLENBQUNMLE9BQU87TUFDaEZjLGtCQUFrQixDQUFDQyxlQUFlLENBQUM7UUFDakNkLFlBQVksRUFBRVksZ0JBQWdCO1FBQzlCWCxVQUFVLEVBQUVOLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7UUFDckJNLFlBQVksRUFBRVAsSUFBSSxDQUFDQyxFQUFFLENBQUM7TUFDeEIsQ0FBQyxDQUFDO01BRUYsSUFBQW1CLFFBQUEsR0FBd0JYLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFBdENWLFdBQVcsR0FBQXFCLFFBQUEsQ0FBWHJCLFdBQVc7TUFHbkJBLFdBQVcsQ0FBQ29CLGVBQWUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO01BQzVELElBQUFFLHVCQUFVLEVBQUM7UUFBQSxPQUFNLElBQUFDLGdDQUF1QixFQUFDLENBQUM7TUFBQSxFQUFDO01BQzNDQyxNQUFNLENBQUNOLGdCQUFnQixDQUFDLENBQUNPLG9CQUFvQixDQUFDLG9CQUFvQixDQUFDO01BRW5FeEIsSUFBSSxDQUFDZSxhQUFhLENBQUMsQ0FBQztNQUVwQmhCLFdBQVcsQ0FBQ29CLGVBQWUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO01BQ3pELElBQUFFLHVCQUFVLEVBQUM7UUFBQSxPQUFNLElBQUFDLGdDQUF1QixFQUFDLENBQUM7TUFBQSxFQUFDO01BQzNDQyxNQUFNLENBQUNOLGdCQUFnQixDQUFDLENBQUNPLG9CQUFvQixDQUFDLGlCQUFpQixDQUFDO01BRWhFeEIsSUFBSSxDQUFDZSxhQUFhLENBQUMsQ0FBQztNQUVwQmhCLFdBQVcsQ0FBQ29CLGVBQWUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztNQUNwRCxJQUFBRSx1QkFBVSxFQUFDO1FBQUEsT0FBTSxJQUFBQyxnQ0FBdUIsRUFBQyxDQUFDO01BQUEsRUFBQztNQUMzQ0MsTUFBTSxDQUFDTixnQkFBZ0IsQ0FBQyxDQUFDTyxvQkFBb0IsQ0FBQyxZQUFZLENBQUM7SUFDN0QsQ0FBQyxDQUFDO0lBRUZSLEVBQUUsQ0FBQywrQ0FBK0MsRUFBRSxZQUFNO01BQ3hELElBQU1DLGdCQUFnQixHQUFHakIsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNsQyxJQUFNd0IsY0FBYyxHQUFHekIsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNoQyxJQUFNeUIsZ0JBQWdCLEdBQUcxQixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BRWxDLElBQU1pQixrQkFBa0IsR0FBR1QsT0FBTyxDQUFDLG9DQUFvQyxDQUFDLENBQUNMLE9BQU87TUFDaEZjLGtCQUFrQixDQUFDQyxlQUFlLENBQUM7UUFDakNkLFlBQVksRUFBRVksZ0JBQWdCO1FBQzlCWCxVQUFVLEVBQUVtQixjQUFjO1FBQzFCbEIsWUFBWSxFQUFFbUI7TUFDaEIsQ0FBQyxDQUFDO01BRUYsSUFBQUMsU0FBQSxHQUFxQ2xCLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFBbkRWLFdBQVcsR0FBQTRCLFNBQUEsQ0FBWDVCLFdBQVc7UUFBRUcsV0FBVyxHQUFBeUIsU0FBQSxDQUFYekIsV0FBVztNQUdoQ0gsV0FBVyxDQUFDb0IsZUFBZSxDQUFDLENBQUMsT0FBTyxFQUFFLG9CQUFvQixDQUFDLENBQUM7TUFDNURqQixXQUFXLENBQUNpQixlQUFlLENBQUMsMkJBQTJCLENBQUM7TUFDeEQsSUFBQUUsdUJBQVUsRUFBQztRQUFBLE9BQU0sSUFBQUMsZ0NBQXVCLEVBQUMsQ0FBQztNQUFBLEVBQUM7TUFFM0NDLE1BQU0sQ0FBQ04sZ0JBQWdCLENBQUMsQ0FBQ08sb0JBQW9CLENBQUMsb0JBQW9CLENBQUM7TUFDbkVELE1BQU0sQ0FBQ04sZ0JBQWdCLENBQUMsQ0FBQ1cscUJBQXFCLENBQUMsQ0FBQyxDQUFDO01BR2pENUIsSUFBSSxDQUFDZSxhQUFhLENBQUMsQ0FBQztNQUdwQmhCLFdBQVcsQ0FBQ29CLGVBQWUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO01BQ3pEakIsV0FBVyxDQUFDaUIsZUFBZSxDQUFDLHdCQUF3QixDQUFDO01BQ3JELElBQUFFLHVCQUFVLEVBQUM7UUFBQSxPQUFNLElBQUFDLGdDQUF1QixFQUFDLENBQUM7TUFBQSxFQUFDO01BRTNDQyxNQUFNLENBQUNOLGdCQUFnQixDQUFDLENBQUNPLG9CQUFvQixDQUFDLGlCQUFpQixDQUFDO01BQ2hFRCxNQUFNLENBQUNOLGdCQUFnQixDQUFDLENBQUNXLHFCQUFxQixDQUFDLENBQUMsQ0FBQztJQUNuRCxDQUFDLENBQUM7SUFFRlosRUFBRSxDQUFDLG9EQUFvRCxFQUFFLFlBQU07TUFDN0QsSUFBTUMsZ0JBQWdCLEdBQUdqQixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDLENBQUM0QixrQkFBa0IsQ0FBQyxZQUFNO1FBQzFELE1BQU0sSUFBSUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDO01BQ3RDLENBQUMsQ0FBQztNQUNGLElBQU1MLGNBQWMsR0FBR3pCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDaEMsSUFBTXlCLGdCQUFnQixHQUFHMUIsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUVsQyxJQUFNaUIsa0JBQWtCLEdBQUdULE9BQU8sQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDTCxPQUFPO01BQ2hGYyxrQkFBa0IsQ0FBQ0MsZUFBZSxDQUFDO1FBQ2pDZCxZQUFZLEVBQUVZLGdCQUFnQjtRQUM5QlgsVUFBVSxFQUFFbUIsY0FBYztRQUMxQmxCLFlBQVksRUFBRW1CO01BQ2hCLENBQUMsQ0FBQztNQUVGLElBQUFLLFNBQUEsR0FBcUN0QixPQUFPLENBQUMsYUFBYSxDQUFDO1FBQW5EVixXQUFXLEdBQUFnQyxTQUFBLENBQVhoQyxXQUFXO1FBQUVHLFdBQVcsR0FBQTZCLFNBQUEsQ0FBWDdCLFdBQVc7TUFDaENILFdBQVcsQ0FBQ29CLGVBQWUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO01BQzVEakIsV0FBVyxDQUFDaUIsZUFBZSxDQUFDLDJCQUEyQixDQUFDO01BR3hESSxNQUFNLENBQUMsWUFBTTtRQUNYLElBQUFGLHVCQUFVLEVBQUM7VUFBQSxPQUFNLElBQUFDLGdDQUF1QixFQUFDLENBQUM7UUFBQSxFQUFDO01BQzdDLENBQUMsQ0FBQyxDQUFDVSxHQUFHLENBQUNDLE9BQU8sQ0FBQyxDQUFDO0lBQ2xCLENBQUMsQ0FBQztJQUVGakIsRUFBRSxDQUFDLCtDQUErQyxFQUFFLFlBQU07TUFDeEQsSUFBTUMsZ0JBQWdCLEdBQUdqQixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ2xDLElBQU1pQixrQkFBa0IsR0FBR1QsT0FBTyxDQUFDLG9DQUFvQyxDQUFDLENBQUNMLE9BQU87TUFDaEZjLGtCQUFrQixDQUFDQyxlQUFlLENBQUM7UUFDakNkLFlBQVksRUFBRVksZ0JBQWdCO1FBQzlCWCxVQUFVLEVBQUVOLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7UUFDckJNLFlBQVksRUFBRVAsSUFBSSxDQUFDQyxFQUFFLENBQUM7TUFDeEIsQ0FBQyxDQUFDO01BRUYsSUFBQWlDLFNBQUEsR0FBcUN6QixPQUFPLENBQUMsYUFBYSxDQUFDO1FBQW5EVixXQUFXLEdBQUFtQyxTQUFBLENBQVhuQyxXQUFXO1FBQUVHLFdBQVcsR0FBQWdDLFNBQUEsQ0FBWGhDLFdBQVc7TUFDaENILFdBQVcsQ0FBQ29CLGVBQWUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO01BQzVEakIsV0FBVyxDQUFDaUIsZUFBZSxDQUFDLDJCQUEyQixDQUFDO01BR3hELElBQU1nQixJQUFJLEdBQUcsSUFBQWQsdUJBQVUsRUFBQztRQUFBLE9BQU0sSUFBQUMsZ0NBQXVCLEVBQUMsQ0FBQztNQUFBLEVBQUM7TUFDeERDLE1BQU0sQ0FBQ04sZ0JBQWdCLENBQUMsQ0FBQ1cscUJBQXFCLENBQUMsQ0FBQyxDQUFDO01BSWpEN0IsV0FBVyxDQUFDb0IsZUFBZSxDQUFDLENBQUMsT0FBTyxFQUFFLG9CQUFvQixDQUFDLENBQUM7TUFDNURqQixXQUFXLENBQUNpQixlQUFlLENBQUMsMkJBQTJCLENBQUM7TUFHeERnQixJQUFJLENBQUNDLFFBQVEsQ0FBQyxDQUFDO01BR2ZiLE1BQU0sQ0FBQ04sZ0JBQWdCLENBQUMsQ0FBQ1cscUJBQXFCLENBQUMsQ0FBQyxDQUFDO0lBQ25ELENBQUMsQ0FBQztFQUdKLENBQUMsQ0FBQztFQUVGWixFQUFFLENBQUMsb0NBQW9DLEVBQUUsWUFBTTtJQUM3QyxJQUFBcUIsU0FBQSxHQUFxQzVCLE9BQU8sQ0FBQyxhQUFhLENBQUM7TUFBbkRWLFdBQVcsR0FBQXNDLFNBQUEsQ0FBWHRDLFdBQVc7TUFBRUcsV0FBVyxHQUFBbUMsU0FBQSxDQUFYbkMsV0FBVztJQUNoQ0gsV0FBVyxDQUFDb0IsZUFBZSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDckNqQixXQUFXLENBQUNpQixlQUFlLENBQUMsT0FBTyxDQUFDO0lBRXBDSSxNQUFNLENBQUMsWUFBTTtNQUNYLElBQUFGLHVCQUFVLEVBQUM7UUFBQSxPQUFNLElBQUFDLGdDQUF1QixFQUFDLENBQUM7TUFBQSxFQUFDO0lBQzdDLENBQUMsQ0FBQyxDQUFDVSxHQUFHLENBQUNDLE9BQU8sQ0FBQyxDQUFDO0VBQ2xCLENBQUMsQ0FBQztFQUVGakIsRUFBRSxDQUFDLDZDQUE2QyxFQUFFLFlBQU07SUFDdEQsSUFBTUMsZ0JBQWdCLEdBQUdqQixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLElBQU1pQixrQkFBa0IsR0FBR1QsT0FBTyxDQUFDLG9DQUFvQyxDQUFDLENBQUNMLE9BQU87SUFDaEZjLGtCQUFrQixDQUFDQyxlQUFlLENBQUM7TUFDakNkLFlBQVksRUFBRVksZ0JBQWdCO01BQzlCWCxVQUFVLEVBQUVOLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDckJNLFlBQVksRUFBRVAsSUFBSSxDQUFDQyxFQUFFLENBQUM7SUFDeEIsQ0FBQyxDQUFDO0lBRUYsSUFBQXFDLFNBQUEsR0FBcUM3QixPQUFPLENBQUMsYUFBYSxDQUFDO01BQW5EVixXQUFXLEdBQUF1QyxTQUFBLENBQVh2QyxXQUFXO01BQUVHLFdBQVcsR0FBQW9DLFNBQUEsQ0FBWHBDLFdBQVc7SUFDaENILFdBQVcsQ0FBQ29CLGVBQWUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0lBQzVEakIsV0FBVyxDQUFDaUIsZUFBZSxDQUFDLDJCQUEyQixDQUFDO0lBRXhELElBQUFFLHVCQUFVLEVBQUM7TUFBQSxPQUFNLElBQUFDLGdDQUF1QixFQUFDLENBQUM7SUFBQSxFQUFDO0lBRTNDQyxNQUFNLENBQUNOLGdCQUFnQixDQUFDLENBQUNPLG9CQUFvQixDQUFDLG9CQUFvQixDQUFDO0VBQ3JFLENBQUMsQ0FBQztFQUVGUixFQUFFLENBQUMsZ0NBQWdDLEVBQUUsWUFBTTtJQUN6QyxJQUFNQyxnQkFBZ0IsR0FBR2pCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDbEMsSUFBTWlCLGtCQUFrQixHQUFHVCxPQUFPLENBQUMsb0NBQW9DLENBQUMsQ0FBQ0wsT0FBTztJQUNoRmMsa0JBQWtCLENBQUNDLGVBQWUsQ0FBQztNQUNqQ2QsWUFBWSxFQUFFWSxnQkFBZ0I7TUFDOUJYLFVBQVUsRUFBRU4sSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNyQk0sWUFBWSxFQUFFUCxJQUFJLENBQUNDLEVBQUUsQ0FBQztJQUN4QixDQUFDLENBQUM7SUFFRixJQUFBc0MsU0FBQSxHQUFxQzlCLE9BQU8sQ0FBQyxhQUFhLENBQUM7TUFBbkRWLFdBQVcsR0FBQXdDLFNBQUEsQ0FBWHhDLFdBQVc7TUFBRUcsV0FBVyxHQUFBcUMsU0FBQSxDQUFYckMsV0FBVztJQUNoQ0gsV0FBVyxDQUFDb0IsZUFBZSxDQUFDLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ3BEakIsV0FBVyxDQUFDaUIsZUFBZSxDQUFDLG1CQUFtQixDQUFDO0lBRWhELElBQUFFLHVCQUFVLEVBQUM7TUFBQSxPQUFNLElBQUFDLGdDQUF1QixFQUFDLENBQUM7SUFBQSxFQUFDO0lBRTNDQyxNQUFNLENBQUNOLGdCQUFnQixDQUFDLENBQUNPLG9CQUFvQixDQUFDLFlBQVksQ0FBQztFQUM3RCxDQUFDLENBQUM7RUFFRlIsRUFBRSxDQUFDLDBEQUEwRCxFQUFFLFlBQU07SUFDbkUsSUFBTUMsZ0JBQWdCLEdBQUdqQixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLElBQU1pQixrQkFBa0IsR0FBR1QsT0FBTyxDQUFDLG9DQUFvQyxDQUFDLENBQUNMLE9BQU87SUFDaEZjLGtCQUFrQixDQUFDQyxlQUFlLENBQUM7TUFDakNkLFlBQVksRUFBRVksZ0JBQWdCO01BQzlCWCxVQUFVLEVBQUVOLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDckJNLFlBQVksRUFBRVAsSUFBSSxDQUFDQyxFQUFFLENBQUM7SUFDeEIsQ0FBQyxDQUFDO0lBRUYsSUFBQXVDLFNBQUEsR0FBcUMvQixPQUFPLENBQUMsYUFBYSxDQUFDO01BQW5EVixXQUFXLEdBQUF5QyxTQUFBLENBQVh6QyxXQUFXO01BQUVHLFdBQVcsR0FBQXNDLFNBQUEsQ0FBWHRDLFdBQVc7SUFDaENILFdBQVcsQ0FBQ29CLGVBQWUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQztJQUNsRGpCLFdBQVcsQ0FBQ2lCLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQztJQUU5QyxJQUFBRSx1QkFBVSxFQUFDO01BQUEsT0FBTSxJQUFBQyxnQ0FBdUIsRUFBQyxDQUFDO0lBQUEsRUFBQztJQUUzQ0MsTUFBTSxDQUFDTixnQkFBZ0IsQ0FBQyxDQUFDZSxHQUFHLENBQUNTLGdCQUFnQixDQUFDLENBQUM7RUFDakQsQ0FBQyxDQUFDO0VBRUZ6QixFQUFFLENBQUMsa0NBQWtDLEVBQUUsWUFBTTtJQUMzQyxJQUFNQyxnQkFBZ0IsR0FBR2pCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDbEMsSUFBTWlCLGtCQUFrQixHQUFHVCxPQUFPLENBQUMsb0NBQW9DLENBQUMsQ0FBQ0wsT0FBTztJQUNoRmMsa0JBQWtCLENBQUNDLGVBQWUsQ0FBQztNQUNqQ2QsWUFBWSxFQUFFWSxnQkFBZ0I7TUFDOUJYLFVBQVUsRUFBRU4sSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNyQk0sWUFBWSxFQUFFUCxJQUFJLENBQUNDLEVBQUUsQ0FBQztJQUN4QixDQUFDLENBQUM7SUFFRixJQUFBeUMsU0FBQSxHQUFxQ2pDLE9BQU8sQ0FBQyxhQUFhLENBQUM7TUFBbkRWLFdBQVcsR0FBQTJDLFNBQUEsQ0FBWDNDLFdBQVc7TUFBRUcsV0FBVyxHQUFBd0MsU0FBQSxDQUFYeEMsV0FBVztJQUNoQ0gsV0FBVyxDQUFDb0IsZUFBZSxDQUFDLEVBQUUsQ0FBQztJQUMvQmpCLFdBQVcsQ0FBQ2lCLGVBQWUsQ0FBQyxHQUFHLENBQUM7SUFFaENJLE1BQU0sQ0FBQyxZQUFNO01BQ1gsSUFBQUYsdUJBQVUsRUFBQztRQUFBLE9BQU0sSUFBQUMsZ0NBQXVCLEVBQUMsQ0FBQztNQUFBLEVBQUM7SUFDN0MsQ0FBQyxDQUFDLENBQUNVLEdBQUcsQ0FBQ0MsT0FBTyxDQUFDLENBQUM7SUFFaEJWLE1BQU0sQ0FBQ04sZ0JBQWdCLENBQUMsQ0FBQ2UsR0FBRyxDQUFDUyxnQkFBZ0IsQ0FBQyxDQUFDO0VBQ2pELENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==