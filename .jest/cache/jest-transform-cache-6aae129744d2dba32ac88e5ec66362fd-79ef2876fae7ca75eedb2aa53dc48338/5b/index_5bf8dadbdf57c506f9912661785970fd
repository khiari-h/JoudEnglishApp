71028bd1e2ecf21c660f0221c175f414
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _NavigationButtons = _interopRequireDefault(require("../../../../components/exercise-common/NavigationButtons"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var AssessmentNavigation = function AssessmentNavigation(_ref) {
  var showFeedback = _ref.showFeedback,
    selectedAnswer = _ref.selectedAnswer,
    isLastQuestionInSection = _ref.isLastQuestionInSection,
    canGoPrevious = _ref.canGoPrevious,
    _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? "#3b82f6" : _ref$levelColor,
    onValidateAnswer = _ref.onValidateAnswer,
    onTryAgain = _ref.onTryAgain,
    onNext = _ref.onNext,
    onPrevious = _ref.onPrevious;
  var styles = (0, _style.default)(levelColor);
  if (!showFeedback) {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.container,
      children: (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: [styles.checkButton, selectedAnswer === null && styles.disabledButton, {
          backgroundColor: selectedAnswer === null ? "#cbd5e1" : levelColor
        }],
        onPress: onValidateAnswer,
        disabled: selectedAnswer === null,
        activeOpacity: 0.8,
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.checkButtonText,
          children: "Check Answer"
        })
      })
    });
  }
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: styles.container,
    children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.feedbackActionsRow,
      children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: [styles.tryAgainButton, {
          borderColor: levelColor
        }],
        onPress: onTryAgain,
        activeOpacity: 0.7,
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [styles.tryAgainButtonText, {
            color: levelColor
          }],
          children: "Try Again"
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.nextButtonContainer,
        children: (0, _jsxRuntime.jsx)(_NavigationButtons.default, {
          onNext: onNext,
          onPrevious: canGoPrevious ? onPrevious : undefined,
          disablePrevious: !canGoPrevious,
          disableNext: false,
          primaryColor: levelColor,
          isLast: false,
          buttonLabels: {
            next: isLastQuestionInSection ? "Next Section" : "Next Question",
            previous: "Previous"
          },
          layout: "minimal"
        })
      })]
    })
  });
};
var _default = exports.default = AssessmentNavigation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,