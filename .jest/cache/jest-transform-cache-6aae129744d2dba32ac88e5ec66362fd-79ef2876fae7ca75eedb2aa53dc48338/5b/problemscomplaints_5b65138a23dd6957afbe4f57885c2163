7892ccb7d24b27d3869e3bbf41ae0745
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var problemsComplaints = [{
  categoryId: 60,
  english: "This is absolutely ridiculous. How is this acceptable?",
  translation: "C'est absolument ridicule. Comment est-ce acceptable ?",
  context: "Pour exprimer une frustration extrême face à un service ou une situation inacceptable.",
  examples: [{
    english: "I've been dealing with this billing error for weeks and nobody seems to care. This is absolutely ridiculous. How is this acceptable?",
    translation: "Je gère cette erreur de facturation depuis des semaines et personne ne semble s'en soucier. C'est absolument ridicule. Comment est-ce acceptable ?"
  }]
}, {
  categoryId: 60,
  english: "I'm at my wit's end with this.",
  translation: "J'en ai plus qu'assez de ça. / Je suis à bout.",
  context: "Pour exprimer un épuisement total face à un problème qui ne semble jamais se résoudre. 'Wit's end' = à court d'idées/patience.",
  examples: [{
    english: "I'm at my wit's end with this car. Every time I fix one thing, something else breaks. It's like it's cursed.",
    translation: "Je suis à bout avec cette voiture. Chaque fois que je répare un truc, autre chose casse. C'est comme si elle était maudite."
  }]
}, {
  categoryId: 60,
  english: "I'm starting to lose my patience.",
  translation: "Je commence à perdre patience.",
  context: "Un avertissement poli mais ferme pour indiquer que votre tolérance atteint ses limites face à un problème récurrent.",
  examples: [{
    english: "Look, I don't want to be difficult, but this is the third time my order is wrong. I'm starting to lose my patience.",
    translation: "Écoutez, je ne veux pas être difficile, mais c'est la troisième fois que ma commande est erronée. Je commence à perdre patience."
  }]
}, {
  categoryId: 60,
  english: "This is completely unacceptable. I expect better.",
  translation: "C'est totalement inacceptable. Je m'attends à mieux.",
  context: "Pour exprimer une forte indignation et souligner qu'un service ou produit est en dessous des standards attendus.",
  examples: [{
    english: "This treatment is completely unacceptable. As a loyal customer, I expect better from your company.",
    translation: "Ce traitement est totalement inacceptable. En tant que client fidèle, je m'attends à mieux de votre entreprise."
  }]
}, {
  categoryId: 60,
  english: "How many times do I have to explain this?",
  translation: "Combien de fois dois-je expliquer cela ?",
  context: "Pour exprimer sa frustration de devoir répéter la même chose plusieurs fois sans être compris ou écouté.",
  examples: [{
    english: "I'm trying to stay calm, but this is testing my limits. How many times do I have to explain the problem before someone listens?",
    translation: "J'essaie de rester calme, mais cela teste mes limites. Combien de fois dois-je expliquer le problème avant que quelqu'un n'écoute ?"
  }]
}, {
  categoryId: 60,
  english: "This is getting beyond a joke now.",
  translation: "Ça dépasse les bornes maintenant.",
  context: "Pour indiquer qu'une situation est devenue si absurde ou mal gérée qu'elle n'est plus tolérable.",
  examples: [{
    english: "I was promised a refund in 5 days, and it's been three weeks. This is getting beyond a joke now.",
    translation: "On m'a promis un remboursement en 5 jours, et ça fait trois semaines. Ça dépasse les bornes maintenant."
  }]
}, {
  categoryId: 60,
  english: "This needs to be addressed immediately.",
  translation: "Cela doit être traité immédiatement.",
  context: "Pour souligner l'urgence d'un problème qui a des conséquences négatives et ne peut plus être ignoré.",
  examples: [{
    english: "I'm not trying to cause trouble, but this noise issue affects my sleep and needs to be addressed immediately.",
    translation: "Je n'essaie pas de causer de problèmes, mais ce problème de bruit affecte mon sommeil et doit être traité immédiatement."
  }]
}, {
  categoryId: 60,
  english: "Can someone explain why [problem happened]?",
  translation: "Quelqu'un peut-il m'expliquer pourquoi [le problème est arrivé] ?",
  context: "Une façon rhétorique et accusatrice de demander une explication pour une erreur qui semble illogique ou négligente.",
  examples: [{
    english: "Can someone explain why I received a damaged product when I specifically asked for careful packaging? It makes no sense.",
    translation: "Quelqu'un peut-il m'expliquer pourquoi j'ai reçu un produit endommagé alors que j'avais spécifiquement demandé un emballage soigné ? Ça n'a aucun sens."
  }]
}, {
  categoryId: 60,
  english: "This is the last straw. I want to speak to a manager.",
  translation: "C'est la goutte d'eau qui fait déborder le vase. Je veux parler à un responsable.",
  context: "Pour indiquer que votre patience est à bout ('last straw') et que vous exigez de parler à un supérieur hiérarchique.",
  examples: [{
    english: "I've been patient, but this is the last straw. I'm done dealing with this representative and I want to speak to a manager.",
    translation: "J'ai été patient, mais c'est la goutte d'eau qui fait déborder le vase. J'en ai fini avec ce représentant et je veux parler à un responsable."
  }]
}, {
  categoryId: 60,
  english: "I need this resolved today. Is that possible?",
  translation: "J'ai besoin que ce soit résolu aujourd'hui. Est-ce possible ?",
  context: "Pour poser un ultimatum clair et non négociable sur le délai de résolution d'un problème urgent.",
  examples: [{
    english: "I hate to be 'that guy', but this outage is affecting my work. I need this resolved today. Is that possible or not?",
    translation: "Je déteste être 'ce gars-là', mais cette panne affecte mon travail. J'ai besoin que ce soit résolu aujourd'hui. Est-ce possible ou non ?"
  }]
}];
var _default = exports.default = problemsComplaints;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,