ea933208e933e06ff24db393d5961678
_getJestObj().mock('../../../../src/components/ui/Card', function () {
  var _require = require('react-native'),
    View = _require.View;
  return function (_ref) {
    var children = _ref.children,
      style = _ref.style,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      style: style
    }, props, {
      testID: "learning-progress-card",
      children: children
    }));
  };
});
_getJestObj().mock('../../../../src/utils/constants', function () {
  return {
    LANGUAGE_LEVELS: {
      '1': {
        title: 'D√©butant',
        color: '#10B981',
        icon: 'üå±'
      },
      '2': {
        title: '√âl√©mentaire',
        color: '#3B82F6',
        icon: 'üìö'
      },
      '3': {
        title: 'Interm√©diaire',
        color: '#8B5CF6',
        icon: 'üéØ'
      },
      '4': {
        title: 'Interm√©diaire+',
        color: '#F59E0B',
        icon: 'üöÄ'
      },
      '5': {
        title: 'Avanc√©',
        color: '#EF4444',
        icon: '‚≠ê'
      },
      '6': {
        title: 'Expert',
        color: '#EC4899',
        icon: 'üëë'
      },
      'bonus': {
        title: 'Bonus',
        color: '#6366F1',
        icon: 'üéÅ'
      }
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _LearningProgress = _interopRequireDefault(require("../../../../src/screens/Dashboard/components/LearningProgress"));
var _ThemeContext = require("../../../../src/contexts/ThemeContext");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "style"];
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('LearningProgress', function () {
  var mockThemeContext = {
    colors: {
      surface: '#FFFFFF',
      text: '#1F2937',
      textSecondary: '#6B7280'
    }
  };
  var mockLevels = [{
    id: '1',
    color: '#10B981',
    progress: 75,
    isActive: true
  }, {
    id: '2',
    color: '#3B82F6',
    progress: 50,
    isActive: false
  }, {
    id: '3',
    color: '#8B5CF6',
    progress: 25,
    isActive: false
  }, {
    id: 'bonus',
    color: '#6366F1',
    progress: 0,
    isActive: false
  }];
  var mockOnSelectLevel = jest.fn();
  var mockOnChangeLevelVisual = jest.fn();
  var renderWithTheme = function renderWithTheme(component) {
    var themeValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : mockThemeContext;
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
      value: themeValue,
      children: component
    }));
  };
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('Rendu de base', function () {
    it('devrait afficher le titre de section', function () {
      var _renderWithTheme = renderWithTheme((0, _jsxRuntime.jsx)(_LearningProgress.default, {
          levels: mockLevels,
          currentLevel: "1",
          globalProgress: 75
        })),
        getByText = _renderWithTheme.getByText;
      expect(getByText('üèÜ Progression g√©n√©rale')).toBeTruthy();
    });
    it('devrait afficher les informations du niveau courant', function () {
      var _renderWithTheme2 = renderWithTheme((0, _jsxRuntime.jsx)(_LearningProgress.default, {
          levels: mockLevels,
          currentLevel: "1",
          globalProgress: 75
        })),
        getByText = _renderWithTheme2.getByText;
      expect(getByText('D√©butant')).toBeTruthy();
      expect(getByText('Continuez votre apprentissage üå±')).toBeTruthy();
      expect(getByText('75%')).toBeTruthy();
    });
    it('devrait afficher la barre de progression globale', function () {
      var _renderWithTheme3 = renderWithTheme((0, _jsxRuntime.jsx)(_LearningProgress.default, {
          levels: mockLevels,
          currentLevel: "2",
          globalProgress: 60
        })),
        getByText = _renderWithTheme3.getByText;
      expect(getByText('Progression globale')).toBeTruthy();
      expect(getByText('60%')).toBeTruthy();
    });
    it('devrait afficher le bouton d\'exploration', function () {
      var _renderWithTheme4 = renderWithTheme((0, _jsxRuntime.jsx)(_LearningProgress.default, {
          levels: mockLevels,
          currentLevel: "3",
          globalProgress: 40
        })),
        getByText = _renderWithTheme4.getByText;
      expect(getByText('Explorer le niveau 3')).toBeTruthy();
    });
  });
  describe('Affichage des niveaux', function () {
    it('devrait afficher tous les cercles de niveau', function () {
      var _renderWithTheme5 = renderWithTheme((0, _jsxRuntime.jsx)(_LearningProgress.default, {
          levels: mockLevels,
          currentLevel: "1",
          globalProgress: 75
        })),
        getByText = _renderWithTheme5.getByText;
      expect(getByText('1')).toBeTruthy();
      expect(getByText('2')).toBeTruthy();
      expect(getByText('3')).toBeTruthy();
      expect(getByText('B')).toBeTruthy();
    });
    it('devrait utiliser les niveaux par d√©faut si aucun niveau fourni', function () {
      var _renderWithTheme6 = renderWithTheme((0, _jsxRuntime.jsx)(_LearningProgress.default, {
          levels: [],
          currentLevel: "2",
          globalProgress: 50
        })),
        getByText = _renderWithTheme6.getByText;
      expect(getByText('1')).toBeTruthy();
      expect(getByText('2')).toBeTruthy();
      expect(getByText('3')).toBeTruthy();
    });
    it('devrait marquer le niveau courant comme actif', function () {
      var _renderWithTheme7 = renderWithTheme((0, _jsxRuntime.jsx)(_LearningProgress.default, {
          levels: mockLevels,
          currentLevel: "2",
          globalProgress: 50
        })),
        getByText = _renderWithTheme7.getByText;
      expect(getByText('√âl√©mentaire')).toBeTruthy();
    });
  });
  describe('Gestion des clics', function () {
    it('devrait appeler onChangeLevelVisual lors du clic sur un cercle de niveau', function () {
      var _renderWithTheme8 = renderWithTheme((0, _jsxRuntime.jsx)(_LearningProgress.default, {
          levels: mockLevels,
          currentLevel: "1",
          globalProgress: 75,
          onChangeLevelVisual: mockOnChangeLevelVisual
        })),
        getByText = _renderWithTheme8.getByText;
      var level2Circle = getByText('2');
      _reactNative.fireEvent.press(level2Circle);
      expect(mockOnChangeLevelVisual).toHaveBeenCalledWith('2');
    });
    it('devrait appeler onSelectLevel lors du clic sur le bouton explorer', function () {
      var _renderWithTheme9 = renderWithTheme((0, _jsxRuntime.jsx)(_LearningProgress.default, {
          levels: mockLevels,
          currentLevel: "3",
          globalProgress: 40,
          onSelectLevel: mockOnSelectLevel
        })),
        getByText = _renderWithTheme9.getByText;
      var exploreButton = getByText('Explorer le niveau 3');
      _reactNative.fireEvent.press(exploreButton);
      expect(mockOnSelectLevel).toHaveBeenCalledWith('3');
    });
    it('ne devrait pas planter si les callbacks ne sont pas fournis', function () {
      var _renderWithTheme0 = renderWithTheme((0, _jsxRuntime.jsx)(_LearningProgress.default, {
          levels: mockLevels,
          currentLevel: "1",
          globalProgress: 75
        })),
        getByText = _renderWithTheme0.getByText;
      var level2Circle = getByText('2');
      var exploreButton = getByText('Explorer le niveau 1');
      expect(function () {
        _reactNative.fireEvent.press(level2Circle);
        _reactNative.fireEvent.press(exploreButton);
      }).not.toThrow();
    });
  });
  describe('Gestion du niveau bonus', function () {
    it('devrait afficher "B" pour le niveau bonus', function () {
      var _renderWithTheme1 = renderWithTheme((0, _jsxRuntime.jsx)(_LearningProgress.default, {
          levels: mockLevels,
          currentLevel: "bonus",
          globalProgress: 10
        })),
        getByText = _renderWithTheme1.getByText;
      expect(getByText('B')).toBeTruthy();
      expect(getByText('Explorer le niveau B')).toBeTruthy();
    });
    it('devrait afficher les informations du niveau bonus', function () {
      var _renderWithTheme10 = renderWithTheme((0, _jsxRuntime.jsx)(_LearningProgress.default, {
          levels: mockLevels,
          currentLevel: "bonus",
          globalProgress: 5
        })),
        getByText = _renderWithTheme10.getByText;
      expect(getByText('Bonus')).toBeTruthy();
      expect(getByText('Continuez votre apprentissage üéÅ')).toBeTruthy();
    });
  });
  describe('Couleurs et th√®me', function () {
    it('devrait utiliser la couleur primaire personnalis√©e', function () {
      var customColor = '#FF5722';
      var _renderWithTheme11 = renderWithTheme((0, _jsxRuntime.jsx)(_LearningProgress.default, {
          levels: mockLevels,
          currentLevel: "1",
          globalProgress: 75,
          primaryColor: customColor
        })),
        getByText = _renderWithTheme11.getByText;
      expect(getByText('75%')).toBeTruthy();
      expect(getByText('Explorer le niveau 1')).toBeTruthy();
    });
    it('devrait utiliser la couleur par d√©faut si aucune couleur n\'est sp√©cifi√©e', function () {
      var _renderWithTheme12 = renderWithTheme((0, _jsxRuntime.jsx)(_LearningProgress.default, {
          levels: mockLevels,
          currentLevel: "2",
          globalProgress: 50
        })),
        getByText = _renderWithTheme12.getByText;
      expect(getByText('50%')).toBeTruthy();
      expect(getByText('Explorer le niveau 2')).toBeTruthy();
    });
    it('devrait fonctionner sans contexte de th√®me', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_LearningProgress.default, {
          levels: mockLevels,
          currentLevel: "1",
          globalProgress: 75
        })),
        getByText = _render.getByText;
      expect(getByText('üèÜ Progression g√©n√©rale')).toBeTruthy();
      expect(getByText('D√©butant')).toBeTruthy();
      expect(getByText('75%')).toBeTruthy();
    });
    it('devrait utiliser les couleurs par d√©faut si le contexte de th√®me est incomplet', function () {
      var incompleteTheme = {
        colors: {
          surface: '#FFFFFF'
        }
      };
      var _renderWithTheme13 = renderWithTheme((0, _jsxRuntime.jsx)(_LearningProgress.default, {
          levels: mockLevels,
          currentLevel: "1",
          globalProgress: 75
        }), incompleteTheme),
        getByText = _renderWithTheme13.getByText;
      expect(getByText('DÔøΩÔøΩbutant')).toBeTruthy();
      expect(getByText('75%')).toBeTruthy();
    });
  });
  describe('Gestion des props par d√©faut', function () {
    it('devrait utiliser les valeurs par d√©faut', function () {
      var _renderWithTheme14 = renderWithTheme((0, _jsxRuntime.jsx)(_LearningProgress.default, {})),
        getByText = _renderWithTheme14.getByText;
      expect(getByText('üèÜ Progression g√©n√©rale')).toBeTruthy();
      expect(getByText('D√©butant')).toBeTruthy();
      expect(getByText('0%')).toBeTruthy();
      expect(getByText('Explorer le niveau 1')).toBeTruthy();
    });
  });
  describe('Gestion des cas limites', function () {
    it('devrait g√©rer une progression sup√©rieure √† 100%', function () {
      var _renderWithTheme15 = renderWithTheme((0, _jsxRuntime.jsx)(_LearningProgress.default, {
          levels: mockLevels,
          currentLevel: "1",
          globalProgress: 150
        })),
        getByText = _renderWithTheme15.getByText;
      expect(getByText('150%')).toBeTruthy();
    });
    it('devrait g√©rer une progression n√©gative', function () {
      var _renderWithTheme16 = renderWithTheme((0, _jsxRuntime.jsx)(_LearningProgress.default, {
          levels: mockLevels,
          currentLevel: "1",
          globalProgress: -10
        })),
        getByText = _renderWithTheme16.getByText;
      expect(getByText('-10%')).toBeTruthy();
    });
    it('devrait g√©rer un niveau courant inexistant', function () {
      var _renderWithTheme17 = renderWithTheme((0, _jsxRuntime.jsx)(_LearningProgress.default, {
          levels: mockLevels,
          currentLevel: "invalid",
          globalProgress: 25
        })),
        getByText = _renderWithTheme17.getByText;
      expect(getByText('D√©butant')).toBeTruthy();
      expect(getByText('Explorer le niveau invalid')).toBeTruthy();
    });
    it('devrait g√©rer des niveaux avec des couleurs manquantes', function () {
      var levelsWithoutColors = [{
        id: '1',
        progress: 50
      }, {
        id: '2',
        progress: 25
      }];
      var _renderWithTheme18 = renderWithTheme((0, _jsxRuntime.jsx)(_LearningProgress.default, {
          levels: levelsWithoutColors,
          currentLevel: "1",
          globalProgress: 50
        })),
        getByText = _renderWithTheme18.getByText;
      expect(getByText('1')).toBeTruthy();
      expect(getByText('2')).toBeTruthy();
    });
  });
  describe('Performance et optimisation', function () {
    it('ne devrait pas recr√©er les handlers √† chaque rendu', function () {
      var _renderWithTheme19 = renderWithTheme((0, _jsxRuntime.jsx)(_LearningProgress.default, {
          levels: mockLevels,
          currentLevel: "1",
          globalProgress: 75,
          onChangeLevelVisual: mockOnChangeLevelVisual
        })),
        rerender = _renderWithTheme19.rerender;
      var level2Circle = getByText('2');
      _reactNative.fireEvent.press(level2Circle);
      expect(mockOnChangeLevelVisual).toHaveBeenCalledTimes(1);
      rerender((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
        value: mockThemeContext,
        children: (0, _jsxRuntime.jsx)(_LearningProgress.default, {
          levels: mockLevels,
          currentLevel: "1",
          globalProgress: 75,
          onChangeLevelVisual: mockOnChangeLevelVisual
        })
      }));
      _reactNative.fireEvent.press(level2Circle);
      expect(mockOnChangeLevelVisual).toHaveBeenCalledTimes(2);
    });
  });
  describe('Accessibilit√©', function () {
    it('devrait avoir les testIDs appropri√©s', function () {
      var _renderWithTheme20 = renderWithTheme((0, _jsxRuntime.jsx)(_LearningProgress.default, {
          levels: mockLevels,
          currentLevel: "1",
          globalProgress: 75
        })),
        getByTestId = _renderWithTheme20.getByTestId;
      expect(getByTestId('learning-progress-card')).toBeTruthy();
    });
    it('devrait permettre l\'interaction avec tous les √©l√©ments cliquables', function () {
      var _renderWithTheme21 = renderWithTheme((0, _jsxRuntime.jsx)(_LearningProgress.default, {
          levels: mockLevels,
          currentLevel: "1",
          globalProgress: 75,
          onChangeLevelVisual: mockOnChangeLevelVisual,
          onSelectLevel: mockOnSelectLevel
        })),
        getByText = _renderWithTheme21.getByText;
      mockLevels.forEach(function (level) {
        var levelText = level.id === 'bonus' ? 'B' : level.id;
        var levelCircle = getByText(levelText);
        _reactNative.fireEvent.press(levelCircle);
      });
      var exploreButton = getByText('Explorer le niveau 1');
      _reactNative.fireEvent.press(exploreButton);
      expect(mockOnChangeLevelVisual).toHaveBeenCalledTimes(4);
      expect(mockOnSelectLevel).toHaveBeenCalledTimes(1);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,