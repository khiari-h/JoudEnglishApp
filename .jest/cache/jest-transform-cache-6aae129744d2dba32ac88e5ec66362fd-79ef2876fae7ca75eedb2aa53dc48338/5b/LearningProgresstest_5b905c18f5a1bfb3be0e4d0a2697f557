3089e814ef249dd262ef252cf4e2bc71
_getJestObj().mock('../../../../src/components/ui/Card', function () {
  var _require = require('react-native'),
    View = _require.View;
  return function (_ref) {
    var children = _ref.children,
      style = _ref.style,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      style: style
    }, props, {
      testID: "learning-progress-card",
      children: children
    }));
  };
});
_getJestObj().mock('../../../../src/utils/constants', function () {
  return {
    LANGUAGE_LEVELS: {
      '1': {
        title: 'D√©butant',
        color: '#10B981',
        icon: 'üå±'
      },
      '2': {
        title: '√âl√©mentaire',
        color: '#3B82F6',
        icon: 'üìö'
      },
      '3': {
        title: 'Interm√©diaire',
        color: '#8B5CF6',
        icon: 'üéØ'
      },
      'bonus': {
        title: 'Bonus',
        color: '#6366F1',
        icon: 'üéÅ'
      }
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _LearningProgress = _interopRequireDefault(require("../../../../src/screens/Dashboard/components/LearningProgress"));
var _ThemeContext = require("../../../../src/contexts/ThemeContext");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "style"];
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('LearningProgress', function () {
  var mockTheme = {
    colors: {
      surface: '#FFFFFF',
      text: '#1F2937',
      textSecondary: '#6B7280'
    }
  };
  var mockLevels = [{
    id: '1',
    color: '#10B981',
    progress: 75
  }, {
    id: '2',
    color: '#3B82F6',
    progress: 50
  }, {
    id: '3',
    color: '#8B5CF6',
    progress: 25
  }];
  var renderComponent = function renderComponent() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
      value: mockTheme,
      children: (0, _jsxRuntime.jsx)(_LearningProgress.default, Object.assign({}, defaultProps, props))
    }));
  };
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('Rendu de base', function () {
    it('devrait rendre le composant sans erreur', function () {
      var _renderComponent = renderComponent(),
        getByText = _renderComponent.getByText;
      expect(getByText('üèÜ Progression g√©n√©rale')).toBeTruthy();
    });
    it('devrait afficher les informations du niveau courant', function () {
      var _renderComponent2 = renderComponent(),
        getByText = _renderComponent2.getByText;
      expect(getByText('D√©butant')).toBeTruthy();
      expect(getByText('75%')).toBeTruthy();
    });
    it('devrait afficher la barre de progression', function () {
      var _renderComponent3 = renderComponent(),
        getByText = _renderComponent3.getByText;
      expect(getByText('Progression globale')).toBeTruthy();
    });
    it('devrait afficher le bouton d\'exploration', function () {
      var _renderComponent4 = renderComponent(),
        getByText = _renderComponent4.getByText;
      expect(getByText('Explorer le niveau 1')).toBeTruthy();
    });
  });
  describe('Gestion des niveaux', function () {
    it('devrait afficher tous les cercles de niveau', function () {
      var _renderComponent5 = renderComponent(),
        getByText = _renderComponent5.getByText;
      expect(getByText('1')).toBeTruthy();
      expect(getByText('2')).toBeTruthy();
      expect(getByText('3')).toBeTruthy();
    });
    it('devrait g√©rer le niveau bonus', function () {
      var levelsWithBonus = [].concat(mockLevels, [{
        id: 'bonus',
        color: '#6366F1',
        progress: 10
      }]);
      var _renderComponent6 = renderComponent({
          levels: levelsWithBonus,
          currentLevel: 'bonus'
        }),
        getByText = _renderComponent6.getByText;
      expect(getByText('B')).toBeTruthy();
      expect(getByText('Bonus')).toBeTruthy();
      expect(getByText('Explorer le niveau B')).toBeTruthy();
    });
  });
  describe('Interactions', function () {
    it('devrait appeler onChangeLevelVisual lors du clic sur un niveau', function () {
      var mockOnChangeLevelVisual = jest.fn();
      var _renderComponent7 = renderComponent({
          onChangeLevelVisual: mockOnChangeLevelVisual
        }),
        getByText = _renderComponent7.getByText;
      _reactNative.fireEvent.press(getByText('2'));
      expect(mockOnChangeLevelVisual).toHaveBeenCalledWith('2');
    });
    it('devrait appeler onSelectLevel lors du clic sur explorer', function () {
      var mockOnSelectLevel = jest.fn();
      var _renderComponent8 = renderComponent({
          onSelectLevel: mockOnSelectLevel
        }),
        getByText = _renderComponent8.getByText;
      _reactNative.fireEvent.press(getByText('Explorer le niveau 1'));
      expect(mockOnSelectLevel).toHaveBeenCalledWith('1');
    });
  });
  describe('Props par d√©faut', function () {
    it('devrait fonctionner avec les props par d√©faut', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
          value: mockTheme,
          children: (0, _jsxRuntime.jsx)(_LearningProgress.default, {})
        })),
        getByText = _render.getByText;
      expect(getByText('üèÜ Progression g√©n√©rale')).toBeTruthy();
      expect(getByText('0%')).toBeTruthy();
    });
    it('devrait fonctionner sans contexte de th√®me', function () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_LearningProgress.default, Object.assign({}, defaultProps))),
        getByText = _render2.getByText;
      expect(getByText('üèÜ Progression g√©n√©rale')).toBeTruthy();
    });
  });
  describe('Cas limites', function () {
    it('devrait g√©rer une progression sup√©rieure √† 100%', function () {
      var _renderComponent9 = renderComponent({
          globalProgress: 150
        }),
        getByText = _renderComponent9.getByText;
      expect(getByText('150%')).toBeTruthy();
    });
    it('devrait g√©rer un niveau inexistant', function () {
      var _renderComponent0 = renderComponent({
          currentLevel: 'invalid'
        }),
        getByText = _renderComponent0.getByText;
      expect(getByText('D√©butant')).toBeTruthy();
    });
    it('devrait g√©rer des niveaux vides', function () {
      var _renderComponent1 = renderComponent({
          levels: []
        }),
        getByText = _renderComponent1.getByText;
      expect(getByText('üèÜ Progression g√©n√©rale')).toBeTruthy();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,