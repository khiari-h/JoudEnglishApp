52e54f94da89acb4508302e38df71a8b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _eventBus = require("../../src/utils/eventBus");
describe('eventBus', function () {
  beforeEach(function () {
    var eventBus = require('../../src/utils/eventBus');
    var listeners = eventBus.listeners || {};
    Object.keys(listeners).forEach(function (key) {
      return delete listeners[key];
    });
  });
  describe('subscribe', function () {
    it('devrait permettre de s\'abonner à un événement', function () {
      var callback = jest.fn();
      var unsubscribe = (0, _eventBus.subscribe)('test-event', callback);
      expect(typeof unsubscribe).toBe('function');
    });
    it('devrait permettre plusieurs abonnements au même événement', function () {
      var callback1 = jest.fn();
      var callback2 = jest.fn();
      (0, _eventBus.subscribe)('test-event', callback1);
      (0, _eventBus.subscribe)('test-event', callback2);
      (0, _eventBus.emit)('test-event', 'test-data');
      expect(callback1).toHaveBeenCalledWith('test-data');
      expect(callback2).toHaveBeenCalledWith('test-data');
    });
    it('devrait retourner une fonction de désabonnement', function () {
      var callback = jest.fn();
      var unsubscribe = (0, _eventBus.subscribe)('test-event', callback);
      (0, _eventBus.emit)('test-event', 'test-data');
      expect(callback).toHaveBeenCalledTimes(1);
      unsubscribe();
      (0, _eventBus.emit)('test-event', 'test-data-2');
      expect(callback).toHaveBeenCalledTimes(1);
    });
    it('devrait gérer les désabonnements multiples sans erreur', function () {
      var callback = jest.fn();
      var unsubscribe = (0, _eventBus.subscribe)('test-event', callback);
      unsubscribe();
      expect(function () {
        return unsubscribe();
      }).not.toThrow();
    });
  });
  describe('emit', function () {
    it('devrait émettre un événement vers les abonnés', function () {
      var callback = jest.fn();
      (0, _eventBus.subscribe)('test-event', callback);
      (0, _eventBus.emit)('test-event', 'test-data');
      expect(callback).toHaveBeenCalledWith('test-data');
      expect(callback).toHaveBeenCalledTimes(1);
    });
    it('devrait émettre vers tous les abonnés', function () {
      var callback1 = jest.fn();
      var callback2 = jest.fn();
      var callback3 = jest.fn();
      (0, _eventBus.subscribe)('test-event', callback1);
      (0, _eventBus.subscribe)('test-event', callback2);
      (0, _eventBus.subscribe)('other-event', callback3);
      (0, _eventBus.emit)('test-event', 'test-data');
      expect(callback1).toHaveBeenCalledWith('test-data');
      expect(callback2).toHaveBeenCalledWith('test-data');
      expect(callback3).not.toHaveBeenCalled();
    });
    it('devrait gérer l\'émission d\'événements sans abonnés', function () {
      expect(function () {
        (0, _eventBus.emit)('non-existent-event', 'data');
      }).not.toThrow();
    });
    it('devrait passer les données correctement', function () {
      var callback = jest.fn();
      (0, _eventBus.subscribe)('test-event', callback);
      var testData = {
        id: 1,
        message: 'hello',
        array: [1, 2, 3]
      };
      (0, _eventBus.emit)('test-event', testData);
      expect(callback).toHaveBeenCalledWith(testData);
    });
    it('devrait gérer les données undefined et null', function () {
      var callback = jest.fn();
      (0, _eventBus.subscribe)('test-event', callback);
      (0, _eventBus.emit)('test-event', undefined);
      expect(callback).toHaveBeenCalledWith(undefined);
      (0, _eventBus.emit)('test-event', null);
      expect(callback).toHaveBeenCalledWith(null);
    });
  });
  describe('Gestion mémoire', function () {
    it('devrait nettoyer correctement les listeners', function () {
      var callback1 = jest.fn();
      var callback2 = jest.fn();
      var callback3 = jest.fn();
      var unsubscribe1 = (0, _eventBus.subscribe)('event1', callback1);
      var unsubscribe2 = (0, _eventBus.subscribe)('event1', callback2);
      (0, _eventBus.subscribe)('event2', callback3);
      unsubscribe1();
      (0, _eventBus.emit)('event1', 'data');
      expect(callback1).not.toHaveBeenCalled();
      expect(callback2).toHaveBeenCalled();
      unsubscribe2();
      (0, _eventBus.emit)('event1', 'data2');
      expect(callback2).toHaveBeenCalledTimes(1);
    });
    it('devrait gérer les événements avec des noms similaires', function () {
      var callback1 = jest.fn();
      var callback2 = jest.fn();
      (0, _eventBus.subscribe)('user-login', callback1);
      (0, _eventBus.subscribe)('user-logout', callback2);
      (0, _eventBus.emit)('user-login', 'login-data');
      expect(callback1).toHaveBeenCalledWith('login-data');
      expect(callback2).not.toHaveBeenCalled();
      (0, _eventBus.emit)('user-logout', 'logout-data');
      expect(callback2).toHaveBeenCalledWith('logout-data');
      expect(callback1).toHaveBeenCalledTimes(1);
    });
  });
  describe('Cas d\'usage réels', function () {
    it('devrait gérer un scénario de progression utilisateur', function () {
      var progressCallback = jest.fn();
      var achievementCallback = jest.fn();
      (0, _eventBus.subscribe)('progress-updated', progressCallback);
      (0, _eventBus.subscribe)('achievement-unlocked', achievementCallback);
      (0, _eventBus.emit)('progress-updated', {
        level: 1,
        score: 85
      });
      expect(progressCallback).toHaveBeenCalledWith({
        level: 1,
        score: 85
      });
      (0, _eventBus.emit)('achievement-unlocked', {
        type: 'streak',
        value: 7
      });
      expect(achievementCallback).toHaveBeenCalledWith({
        type: 'streak',
        value: 7
      });
    });
    it('devrait gérer un scénario de settings mis à jour', function () {
      var settingsCallback = jest.fn();
      var themeCallback = jest.fn();
      (0, _eventBus.subscribe)('settings-updated', settingsCallback);
      (0, _eventBus.subscribe)('theme-changed', themeCallback);
      (0, _eventBus.emit)('settings-updated', {
        theme: 'dark',
        language: 'fr'
      });
      (0, _eventBus.emit)('theme-changed', 'dark');
      expect(settingsCallback).toHaveBeenCalledWith({
        theme: 'dark',
        language: 'fr'
      });
      expect(themeCallback).toHaveBeenCalledWith('dark');
    });
  });
  describe('Fonctionnalités de base', function () {
    it('devrait avoir les fonctions principales', function () {
      expect(typeof _eventBus.subscribe).toBe('function');
      expect(typeof _eventBus.emit).toBe('function');
    });
    it('devrait gérer les callbacks qui ne font rien', function () {
      var emptyCallback = jest.fn();
      (0, _eventBus.subscribe)('test-event', emptyCallback);
      expect(function () {
        (0, _eventBus.emit)('test-event', 'data');
      }).not.toThrow();
      expect(emptyCallback).toHaveBeenCalledWith('data');
    });
    it('devrait gérer les événements avec des noms vides', function () {
      var callback = jest.fn();
      (0, _eventBus.subscribe)('', callback);
      expect(function () {
        (0, _eventBus.emit)('', 'data');
      }).not.toThrow();
      expect(callback).toHaveBeenCalledWith('data');
    });
  });
  describe('Robustesse', function () {
    it('devrait gérer de nombreux abonnés', function () {
      var callbacks = [];
      for (var i = 0; i < 100; i++) {
        var callback = jest.fn();
        callbacks.push(callback);
        (0, _eventBus.subscribe)('mass-event', callback);
      }
      (0, _eventBus.emit)('mass-event', 'mass-data');
      callbacks.forEach(function (callback) {
        expect(callback).toHaveBeenCalledWith('mass-data');
      });
    });
    it('devrait gérer de nombreux événements différents', function () {
      var callbacks = {};
      for (var i = 0; i < 50; i++) {
        var eventName = `event-${i}`;
        var callback = jest.fn();
        callbacks[eventName] = callback;
        (0, _eventBus.subscribe)(eventName, callback);
      }
      Object.keys(callbacks).forEach(function (eventName) {
        (0, _eventBus.emit)(eventName, `data-${eventName}`);
      });
      Object.entries(callbacks).forEach(function (_ref) {
        var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
          eventName = _ref2[0],
          callback = _ref2[1];
        expect(callback).toHaveBeenCalledWith(`data-${eventName}`);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,