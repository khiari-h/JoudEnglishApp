1e76cb4b1de04e9c5f288e899f2c4960
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _useModalAnimation = _interopRequireDefault(require("../../../../src/components/ui/Modal/useModalAnimation"));
var mockAnimatedValue = jest.fn(function () {
  return {
    interpolate: jest.fn(),
    addListener: jest.fn(),
    removeAllListeners: jest.fn(),
    _value: 0
  };
});
jest.spyOn(_reactNative2.Animated, 'Value').mockImplementation(mockAnimatedValue);
var mockStart = jest.fn();
jest.spyOn(_reactNative2.Animated, 'timing').mockImplementation(function () {
  return {
    start: mockStart,
    stop: jest.fn()
  };
});
describe('useModalAnimation', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('devrait d√©marrer l\'animation si isVisible devient vrai', function () {
    var _renderHook = (0, _reactNative.renderHook)(function (_ref) {
        var isVisible = _ref.isVisible;
        return (0, _useModalAnimation.default)({
          isVisible: isVisible
        });
      }, {
        initialProps: {
          isVisible: false
        }
      }),
      rerender = _renderHook.rerender;
    (0, _reactNative.act)(function () {
      rerender({
        isVisible: true
      });
    });
    expect(_reactNative2.Animated.timing).toHaveBeenCalledTimes(1);
    expect(mockStart).toHaveBeenCalledTimes(1);
  });
  it('devrait appeler Animated.timing avec les bonnes valeurs pour la position "top"', function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function (_ref2) {
        var isVisible = _ref2.isVisible,
          position = _ref2.position;
        return (0, _useModalAnimation.default)({
          isVisible: isVisible,
          position: position
        });
      }, {
        initialProps: {
          isVisible: false,
          position: 'top'
        }
      }),
      rerender = _renderHook2.rerender;
    (0, _reactNative.act)(function () {
      rerender({
        isVisible: true,
        position: 'top'
      });
    });
    expect(_reactNative2.Animated.timing).toHaveBeenCalledWith(expect.any(_reactNative2.Animated.Value), expect.objectContaining({
      toValue: 1,
      duration: 300
    }));
  });
  it('devrait retourner les styles de transformation corrects pour la position "top"', function () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useModalAnimation.default)({
          isVisible: true,
          position: 'top'
        });
      }),
      result = _renderHook3.result;
    expect(result.current.transformStyle).toEqual(expect.objectContaining({
      transform: expect.arrayContaining([expect.objectContaining({
        translateY: expect.any(Object)
      })])
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlMiIsIl91c2VNb2RhbEFuaW1hdGlvbiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJtb2NrQW5pbWF0ZWRWYWx1ZSIsImplc3QiLCJmbiIsImludGVycG9sYXRlIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJfdmFsdWUiLCJzcHlPbiIsIkFuaW1hdGVkIiwibW9ja0ltcGxlbWVudGF0aW9uIiwibW9ja1N0YXJ0Iiwic3RhcnQiLCJzdG9wIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIml0IiwiX3JlbmRlckhvb2siLCJyZW5kZXJIb29rIiwiX3JlZiIsImlzVmlzaWJsZSIsInVzZU1vZGFsQW5pbWF0aW9uIiwiaW5pdGlhbFByb3BzIiwicmVyZW5kZXIiLCJhY3QiLCJleHBlY3QiLCJ0aW1pbmciLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJfcmVuZGVySG9vazIiLCJfcmVmMiIsInBvc2l0aW9uIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJhbnkiLCJWYWx1ZSIsIm9iamVjdENvbnRhaW5pbmciLCJ0b1ZhbHVlIiwiZHVyYXRpb24iLCJfcmVuZGVySG9vazMiLCJyZXN1bHQiLCJjdXJyZW50IiwidHJhbnNmb3JtU3R5bGUiLCJ0b0VxdWFsIiwidHJhbnNmb3JtIiwiYXJyYXlDb250YWluaW5nIiwidHJhbnNsYXRlWSIsIk9iamVjdCJdLCJzb3VyY2VzIjpbInVzZU1vZGFsQW5pbWF0aW9uLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVuZGVySG9vaywgYWN0IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgeyBBbmltYXRlZCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCB1c2VNb2RhbEFuaW1hdGlvbiBmcm9tICcuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy91aS9Nb2RhbC91c2VNb2RhbEFuaW1hdGlvbic7XHJcblxyXG4vLyBXZSBjcmVhdGUgYSBtb2NrIGZvciBBbmltYXRlZC5WYWx1ZSB0aGF0IGJlaGF2ZXMgbGlrZSBhIGNvbnN0cnVjdG9yXHJcbmNvbnN0IG1vY2tBbmltYXRlZFZhbHVlID0gamVzdC5mbigoKSA9PiAoe1xyXG4gIGludGVycG9sYXRlOiBqZXN0LmZuKCksXHJcbiAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKSxcclxuICByZW1vdmVBbGxMaXN0ZW5lcnM6IGplc3QuZm4oKSxcclxuICBfdmFsdWU6IDAsIC8vIEEgY3J1Y2lhbCBkZXRhaWw6IGdpdmUgaXQgYSB2YWx1ZSBwcm9wZXJ0eSBmb3Igc29tZSBBbmltYXRlZCBmdW5jdGlvbnNcclxufSkpO1xyXG5qZXN0LnNweU9uKEFuaW1hdGVkLCAnVmFsdWUnKS5tb2NrSW1wbGVtZW50YXRpb24obW9ja0FuaW1hdGVkVmFsdWUpO1xyXG5cclxuLy8gV2Ugc3B5IG9uIEFuaW1hdGVkLnRpbWluZyBhbmQgbW9jayBpdHMgYmVoYXZpb3JcclxuY29uc3QgbW9ja1N0YXJ0ID0gamVzdC5mbigpO1xyXG5qZXN0LnNweU9uKEFuaW1hdGVkLCAndGltaW5nJykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XHJcbiAgc3RhcnQ6IG1vY2tTdGFydCxcclxuICBzdG9wOiBqZXN0LmZuKCksXHJcbn0pKTtcclxuXHJcbmRlc2NyaWJlKCd1c2VNb2RhbEFuaW1hdGlvbicsICgpID0+IHtcclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnZGV2cmFpdCBkw6ltYXJyZXIgbFxcJ2FuaW1hdGlvbiBzaSBpc1Zpc2libGUgZGV2aWVudCB2cmFpJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyByZXJlbmRlciB9ID0gcmVuZGVySG9vaygoeyBpc1Zpc2libGUgfSkgPT4gdXNlTW9kYWxBbmltYXRpb24oeyBpc1Zpc2libGUgfSksIHtcclxuICAgICAgaW5pdGlhbFByb3BzOiB7IGlzVmlzaWJsZTogZmFsc2UgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgIHJlcmVuZGVyKHsgaXNWaXNpYmxlOiB0cnVlIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZXhwZWN0KEFuaW1hdGVkLnRpbWluZykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xyXG4gICAgZXhwZWN0KG1vY2tTdGFydCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnZGV2cmFpdCBhcHBlbGVyIEFuaW1hdGVkLnRpbWluZyBhdmVjIGxlcyBib25uZXMgdmFsZXVycyBwb3VyIGxhIHBvc2l0aW9uIFwidG9wXCInLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IHJlcmVuZGVyIH0gPSByZW5kZXJIb29rKCh7IGlzVmlzaWJsZSwgcG9zaXRpb24gfSkgPT4gdXNlTW9kYWxBbmltYXRpb24oeyBpc1Zpc2libGUsIHBvc2l0aW9uIH0pLCB7XHJcbiAgICAgIGluaXRpYWxQcm9wczogeyBpc1Zpc2libGU6IGZhbHNlLCBwb3NpdGlvbjogJ3RvcCcgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgIHJlcmVuZGVyKHsgaXNWaXNpYmxlOiB0cnVlLCBwb3NpdGlvbjogJ3RvcCcgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBleHBlY3QoQW5pbWF0ZWQudGltaW5nKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcclxuICAgICAgZXhwZWN0LmFueShBbmltYXRlZC5WYWx1ZSksXHJcbiAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcclxuICAgICAgICB0b1ZhbHVlOiAxLFxyXG4gICAgICAgIGR1cmF0aW9uOiAzMDAsXHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnZGV2cmFpdCByZXRvdXJuZXIgbGVzIHN0eWxlcyBkZSB0cmFuc2Zvcm1hdGlvbiBjb3JyZWN0cyBwb3VyIGxhIHBvc2l0aW9uIFwidG9wXCInLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VNb2RhbEFuaW1hdGlvbih7IGlzVmlzaWJsZTogdHJ1ZSwgcG9zaXRpb246ICd0b3AnIH0pKTtcclxuICAgIFxyXG4gICAgLy8gQXNzZXJ0aW5nIG9uIHRoZSByZXR1cm5lZCBzdHlsZSBvYmplY3RcclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC50cmFuc2Zvcm1TdHlsZSkudG9FcXVhbChcclxuICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xyXG4gICAgICAgIHRyYW5zZm9ybTogZXhwZWN0LmFycmF5Q29udGFpbmluZyhbXHJcbiAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XHJcbiAgICAgICAgICAgIHRyYW5zbGF0ZVk6IGV4cGVjdC5hbnkoT2JqZWN0KSxcclxuICAgICAgICAgIH0pLFxyXG4gICAgICAgIF0pLFxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9KTtcclxufSk7Il0sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQUEsWUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsYUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsa0JBQUEsR0FBQUMsc0JBQUEsQ0FBQUgsT0FBQTtBQUdBLElBQU1JLGlCQUFpQixHQUFHQyxJQUFJLENBQUNDLEVBQUUsQ0FBQztFQUFBLE9BQU87SUFDdkNDLFdBQVcsRUFBRUYsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUN0QkUsV0FBVyxFQUFFSCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RCRyxrQkFBa0IsRUFBRUosSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUM3QkksTUFBTSxFQUFFO0VBQ1YsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUNITCxJQUFJLENBQUNNLEtBQUssQ0FBQ0Msc0JBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQ0Msa0JBQWtCLENBQUNULGlCQUFpQixDQUFDO0FBR25FLElBQU1VLFNBQVMsR0FBR1QsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztBQUMzQkQsSUFBSSxDQUFDTSxLQUFLLENBQUNDLHNCQUFRLEVBQUUsUUFBUSxDQUFDLENBQUNDLGtCQUFrQixDQUFDO0VBQUEsT0FBTztJQUN2REUsS0FBSyxFQUFFRCxTQUFTO0lBQ2hCRSxJQUFJLEVBQUVYLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0VBQ2hCLENBQUM7QUFBQSxDQUFDLENBQUM7QUFFSFcsUUFBUSxDQUFDLG1CQUFtQixFQUFFLFlBQU07RUFDbENDLFVBQVUsQ0FBQyxZQUFNO0lBQ2ZiLElBQUksQ0FBQ2MsYUFBYSxDQUFDLENBQUM7RUFDdEIsQ0FBQyxDQUFDO0VBRUZDLEVBQUUsQ0FBQyx5REFBeUQsRUFBRSxZQUFNO0lBQ2xFLElBQUFDLFdBQUEsR0FBcUIsSUFBQUMsdUJBQVUsRUFBQyxVQUFBQyxJQUFBO1FBQUEsSUFBR0MsU0FBUyxHQUFBRCxJQUFBLENBQVRDLFNBQVM7UUFBQSxPQUFPLElBQUFDLDBCQUFpQixFQUFDO1VBQUVELFNBQVMsRUFBVEE7UUFBVSxDQUFDLENBQUM7TUFBQSxHQUFFO1FBQ25GRSxZQUFZLEVBQUU7VUFBRUYsU0FBUyxFQUFFO1FBQU07TUFDbkMsQ0FBQyxDQUFDO01BRk1HLFFBQVEsR0FBQU4sV0FBQSxDQUFSTSxRQUFRO0lBSWhCLElBQUFDLGdCQUFHLEVBQUMsWUFBTTtNQUNSRCxRQUFRLENBQUM7UUFBRUgsU0FBUyxFQUFFO01BQUssQ0FBQyxDQUFDO0lBQy9CLENBQUMsQ0FBQztJQUVGSyxNQUFNLENBQUNqQixzQkFBUSxDQUFDa0IsTUFBTSxDQUFDLENBQUNDLHFCQUFxQixDQUFDLENBQUMsQ0FBQztJQUNoREYsTUFBTSxDQUFDZixTQUFTLENBQUMsQ0FBQ2lCLHFCQUFxQixDQUFDLENBQUMsQ0FBQztFQUM1QyxDQUFDLENBQUM7RUFFRlgsRUFBRSxDQUFDLGdGQUFnRixFQUFFLFlBQU07SUFDekYsSUFBQVksWUFBQSxHQUFxQixJQUFBVix1QkFBVSxFQUFDLFVBQUFXLEtBQUE7UUFBQSxJQUFHVCxTQUFTLEdBQUFTLEtBQUEsQ0FBVFQsU0FBUztVQUFFVSxRQUFRLEdBQUFELEtBQUEsQ0FBUkMsUUFBUTtRQUFBLE9BQU8sSUFBQVQsMEJBQWlCLEVBQUM7VUFBRUQsU0FBUyxFQUFUQSxTQUFTO1VBQUVVLFFBQVEsRUFBUkE7UUFBUyxDQUFDLENBQUM7TUFBQSxHQUFFO1FBQ3ZHUixZQUFZLEVBQUU7VUFBRUYsU0FBUyxFQUFFLEtBQUs7VUFBRVUsUUFBUSxFQUFFO1FBQU07TUFDcEQsQ0FBQyxDQUFDO01BRk1QLFFBQVEsR0FBQUssWUFBQSxDQUFSTCxRQUFRO0lBSWhCLElBQUFDLGdCQUFHLEVBQUMsWUFBTTtNQUNSRCxRQUFRLENBQUM7UUFBRUgsU0FBUyxFQUFFLElBQUk7UUFBRVUsUUFBUSxFQUFFO01BQU0sQ0FBQyxDQUFDO0lBQ2hELENBQUMsQ0FBQztJQUVGTCxNQUFNLENBQUNqQixzQkFBUSxDQUFDa0IsTUFBTSxDQUFDLENBQUNLLG9CQUFvQixDQUMxQ04sTUFBTSxDQUFDTyxHQUFHLENBQUN4QixzQkFBUSxDQUFDeUIsS0FBSyxDQUFDLEVBQzFCUixNQUFNLENBQUNTLGdCQUFnQixDQUFDO01BQ3RCQyxPQUFPLEVBQUUsQ0FBQztNQUNWQyxRQUFRLEVBQUU7SUFDWixDQUFDLENBQ0gsQ0FBQztFQUNILENBQUMsQ0FBQztFQUVGcEIsRUFBRSxDQUFDLGdGQUFnRixFQUFFLFlBQU07SUFDekYsSUFBQXFCLFlBQUEsR0FBbUIsSUFBQW5CLHVCQUFVLEVBQUM7UUFBQSxPQUFNLElBQUFHLDBCQUFpQixFQUFDO1VBQUVELFNBQVMsRUFBRSxJQUFJO1VBQUVVLFFBQVEsRUFBRTtRQUFNLENBQUMsQ0FBQztNQUFBLEVBQUM7TUFBcEZRLE1BQU0sR0FBQUQsWUFBQSxDQUFOQyxNQUFNO0lBR2RiLE1BQU0sQ0FBQ2EsTUFBTSxDQUFDQyxPQUFPLENBQUNDLGNBQWMsQ0FBQyxDQUFDQyxPQUFPLENBQzNDaEIsTUFBTSxDQUFDUyxnQkFBZ0IsQ0FBQztNQUN0QlEsU0FBUyxFQUFFakIsTUFBTSxDQUFDa0IsZUFBZSxDQUFDLENBQ2hDbEIsTUFBTSxDQUFDUyxnQkFBZ0IsQ0FBQztRQUN0QlUsVUFBVSxFQUFFbkIsTUFBTSxDQUFDTyxHQUFHLENBQUNhLE1BQU07TUFDL0IsQ0FBQyxDQUFDLENBQ0g7SUFDSCxDQUFDLENBQ0gsQ0FBQztFQUNILENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==