453cc08e6c1b48ba9b51a673c78cec09
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var useQuizEngine = function useQuizEngine(questions) {
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    currentQuestionIndex = _useState2[0],
    setCurrentQuestionIndex = _useState2[1];
  var _useState3 = (0, _react.useState)(0),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    score = _useState4[0],
    setScore = _useState4[1];
  var _useState5 = (0, _react.useState)(null),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    selectedChoice = _useState6[0],
    setSelectedChoice = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    showResult = _useState8[0],
    setShowResult = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    isFinished = _useState0[0],
    setIsFinished = _useState0[1];
  var _useState1 = (0, _react.useState)([]),
    _useState10 = (0, _slicedToArray2.default)(_useState1, 2),
    userAnswers = _useState10[0],
    setUserAnswers = _useState10[1];
  var totalQuestions = (0, _react.useMemo)(function () {
    if (!Array.isArray(questions)) return 0;
    return questions.length;
  }, [questions]);
  var currentQuestion = (0, _react.useMemo)(function () {
    if (!questions || totalQuestions === 0 || currentQuestionIndex >= totalQuestions) {
      return null;
    }
    return questions[currentQuestionIndex];
  }, [questions, currentQuestionIndex, totalQuestions]);
  var progress = (0, _react.useMemo)(function () {
    if (totalQuestions === 0) return 0;
    return currentQuestionIndex / totalQuestions * 100;
  }, [currentQuestionIndex, totalQuestions]);
  var handleAnswer = (0, _react.useCallback)(function (choice) {
    if (showResult) return false;
    if (!currentQuestion) return false;
    var isCorrect = choice === currentQuestion.correctAnswer;
    if (isCorrect) {
      setScore(function (prevScore) {
        return prevScore + 1;
      });
    }
    setSelectedChoice(choice);
    setUserAnswers(function (prev) {
      return [].concat((0, _toConsumableArray2.default)(prev), [{
        question: currentQuestion.word,
        choice: choice,
        isCorrect: isCorrect
      }]);
    });
    setShowResult(true);
    return isCorrect;
  }, [currentQuestion, showResult]);
  var goToNextQuestion = (0, _react.useCallback)(function () {
    var nextIndex = currentQuestionIndex + 1;
    if (nextIndex < totalQuestions) {
      setCurrentQuestionIndex(nextIndex);
      setSelectedChoice(null);
      setShowResult(false);
    } else {
      setIsFinished(true);
    }
  }, [currentQuestionIndex, totalQuestions]);
  var handleRestart = (0, _react.useCallback)(function () {
    setCurrentQuestionIndex(0);
    setScore(0);
    setSelectedChoice(null);
    setShowResult(false);
    setIsFinished(false);
    setUserAnswers([]);
  }, []);
  return {
    currentQuestionIndex: currentQuestionIndex,
    totalQuestions: totalQuestions,
    score: score,
    progress: progress,
    currentQuestion: currentQuestion,
    selectedChoice: selectedChoice,
    showResult: showResult,
    isFinished: isFinished,
    userAnswers: userAnswers,
    handleAnswer: handleAnswer,
    goToNextQuestion: goToNextQuestion,
    handleRestart: handleRestart
  };
};
var _default = exports.default = useQuizEngine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,