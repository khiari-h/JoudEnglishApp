356178cc2a19e881328ffdea9886fde4
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ProgressCard = _interopRequireDefault(require("../../../src/components/ui/ProgressCard"));
var _jsxRuntime = require("react/jsx-runtime");
describe('ProgressCard', function () {
  it('renders correctly with default props', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressCard.default, {}));
    expect(_reactNative.screen.getByText('Progression')).toBeOnTheScreen();
    expect(_reactNative.screen.getByText('0')).toBeOnTheScreen();
    expect(_reactNative.screen.getByText('/')).toBeOnTheScreen();
    expect(_reactNative.screen.getByText('0%')).toBeOnTheScreen();
  });
  it('renders with custom title and subtitle', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressCard.default, {
      title: "My Progress",
      subtitle: "Daily Goals"
    }));
    expect(_reactNative.screen.getByText('My Progress')).toBeOnTheScreen();
    expect(_reactNative.screen.getByText('Daily Goals')).toBeOnTheScreen();
  });
  it('displays correct progress values', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressCard.default, {
      progress: 50,
      completed: 5,
      total: 10
    }));
    expect(_reactNative.screen.getByText('5')).toBeOnTheScreen();
    expect(_reactNative.screen.getByText('/')).toBeOnTheScreen();
    expect(_reactNative.screen.getByText('10')).toBeOnTheScreen();
    expect(_reactNative.screen.getByText('50%')).toBeOnTheScreen();
  });
  it('expands and collapses when expandable and onToggleExpand are provided', function () {
    var handleToggleExpand = jest.fn();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressCard.default, {
      expandable: true,
      expanded: false,
      onToggleExpand: handleToggleExpand,
      categoryData: [{
        id: '1',
        title: 'Category 1',
        completed: 1,
        total: 2,
        progress: 50
      }]
    }));
    expect(_reactNative.screen.queryByText('Par catégorie')).toBeNull();
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Progression'));
    expect(handleToggleExpand).toHaveBeenCalledTimes(1);
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressCard.default, {
      expandable: true,
      expanded: true,
      onToggleExpand: handleToggleExpand,
      categoryData: [{
        id: '1',
        title: 'Category 1',
        completed: 1,
        total: 2,
        progress: 50
      }]
    }));
    expect(_reactNative.screen.getByText('Par catégorie')).toBeOnTheScreen();
    expect(_reactNative.screen.getByText('Category 1')).toBeOnTheScreen();
  });
  it('calls onCategoryPress when a category is pressed', function () {
    var handleCategoryPress = jest.fn();
    var categoryData = [{
      id: '1',
      title: 'Category 1',
      completed: 1,
      total: 2,
      progress: 50
    }];
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressCard.default, {
      expandable: true,
      expanded: true,
      categoryData: categoryData,
      onCategoryPress: handleCategoryPress
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Category 1'));
    expect(handleCategoryPress).toHaveBeenCalledWith(0);
  });
  it('does not expand when expandable is false', function () {
    var handleToggleExpand = jest.fn();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressCard.default, {
      expandable: false,
      onToggleExpand: handleToggleExpand,
      categoryData: [{
        id: '1',
        title: 'Category 1',
        completed: 1,
        total: 2,
        progress: 50
      }]
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Progression'));
    expect(handleToggleExpand).not.toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,