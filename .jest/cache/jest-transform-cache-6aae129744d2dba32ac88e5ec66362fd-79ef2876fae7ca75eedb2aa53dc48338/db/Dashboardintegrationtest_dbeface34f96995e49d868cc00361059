b817fd3e917b2a32e8f83358dcd8f240
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
  };
});
_getJestObj().mock('expo-linear-gradient', function () {
  return {
    LinearGradient: function LinearGradient(_ref) {
      var children = _ref.children,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      var _require = require('react-native'),
        View = _require.View;
      return (0, _jsxRuntime.jsx)(View, Object.assign({}, props, {
        children: children
      }));
    }
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: mockRouterPush
    }
  };
});
_getJestObj().mock('../../../src/contexts/ProgressContext', function () {
  return {
    useProgress: mockUseProgress
  };
});
_getJestObj().mock('../../../src/contexts/CurrentLevelContext', function () {
  return {
    useCurrentLevel: mockUseCurrentLevel
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/hooks/useDashboardLevel', function () {
  return {
    useDashboardLevel: mockUseDashboardLevel
  };
});
_getJestObj().mock('../../../src/hooks/useRealTimeProgress', function () {
  return {
    __esModule: true,
    default: jest.fn(function () {
      return {
        getLevelProgress: mockGetLevelProgress,
        refresh: mockRefresh
      };
    })
  };
});
_getJestObj().mock('../../../src/hooks/useLastActivity', function () {
  return {
    __esModule: true,
    default: jest.fn(function () {
      return {
        lastActivity: null,
        isLoading: false,
        reload: mockReload
      };
    })
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/HeroContinueSection', function () {
  var _require2 = require('react-native'),
    View = _require2.View,
    Text = _require2.Text,
    TouchableOpacity = _require2.TouchableOpacity;
  return function HeroContinueSection(_ref2) {
    var lastActivity = _ref2.lastActivity,
      _onPress = _ref2.onPress;
    if (lastActivity) {
      return (0, _jsxRuntime.jsx)(View, {
        testID: "hero-continue-section",
        children: (0, _jsxRuntime.jsxs)(TouchableOpacity, {
          onPress: function onPress() {
            return _onPress(lastActivity);
          },
          testID: "continue-activity-button",
          children: [(0, _jsxRuntime.jsx)(Text, {
            children: "Continuer \u25B6\uFE0F"
          }), (0, _jsxRuntime.jsx)(Text, {
            children: lastActivity.title
          })]
        })
      });
    }
    return (0, _jsxRuntime.jsx)(View, {
      testID: "hero-continue-section",
      children: (0, _jsxRuntime.jsx)(TouchableOpacity, {
        onPress: function onPress() {
          return _onPress('levelSelection');
        },
        testID: "start-learning-button",
        children: (0, _jsxRuntime.jsx)(Text, {
          children: "Commencer >"
        })
      })
    });
  };
});
_getJestObj().mock('../../../src/utils/constants', function () {
  return {
    LANGUAGE_LEVELS: {
      '1': {
        title: 'Débutant',
        color: '#10B981'
      },
      '2': {
        title: 'Élémentaire',
        color: '#3B82F6'
      },
      '3': {
        title: 'Intermédiaire',
        color: '#8B5CF6'
      }
    },
    EXERCISES: {
      vocabulary: {
        id: 'vocabulary',
        route: '/tabs/vocabulary'
      }
    },
    CONTAINER_SAFE_EDGES: {
      NO_BOTTOM: ['top', 'left', 'right']
    }
  };
});
_getJestObj().mock('../../../src/components/layout/Container', function () {
  var _require3 = require('react-native'),
    ScrollView = _require3.ScrollView;
  function Container(_ref3) {
    var children = _ref3.children,
      props = (0, _objectWithoutProperties2.default)(_ref3, _excluded2);
    return (0, _jsxRuntime.jsx)(ScrollView, Object.assign({
      testID: "container"
    }, props, {
      children: children
    }));
  }
  Container.CONTAINER_SAFE_EDGES = {
    NO_BOTTOM: ['top', 'left', 'right']
  };
  return Container;
});
_getJestObj().mock('../../../src/screens/VocabularyRevision/RevisionOrchestrator', function () {
  var _require4 = require('react-native'),
    View = _require4.View;
  return function RevisionOrchestrator() {
    return (0, _jsxRuntime.jsx)(View, {
      testID: "revision-orchestrator"
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _Dashboard = _interopRequireDefault(require("../../../src/screens/Dashboard"));
var _ThemeContext = require("../../../src/contexts/ThemeContext");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children"],
  _excluded2 = ["children"];
function _getJestObj() {
  var _require5 = require("@jest/globals"),
    jest = _require5.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockRouterPush = jest.fn();
var mockUseProgress = jest.fn();
var mockUseCurrentLevel = jest.fn();
var mockUseDashboardLevel = jest.fn();
var mockGetLevelProgress = jest.fn();
var mockRefresh = jest.fn();
var mockReload = jest.fn();
describe('Dashboard - Tests d\'intégration', function () {
  var defaultThemeContext = {
    colors: {
      background: '#F8FAFC',
      primary: '#3B82F6',
      surface: '#FFFFFF',
      text: '#1F2937'
    }
  };
  var defaultProgressContext = {
    progress: {},
    isLoading: false
  };
  var defaultCurrentLevelContext = {
    setCurrentLevel: jest.fn(),
    currentLevel: '1'
  };
  var defaultDashboardLevel = {
    currentLevel: '1',
    handleChangeActiveLevel: jest.fn(),
    levelColor: '#10B981',
    isLoaded: true
  };
  var setupMocks = function setupMocks() {
    var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _overrides$progressCo = overrides.progressContext,
      progressContext = _overrides$progressCo === void 0 ? defaultProgressContext : _overrides$progressCo,
      _overrides$currentLev = overrides.currentLevelContext,
      currentLevelContext = _overrides$currentLev === void 0 ? defaultCurrentLevelContext : _overrides$currentLev,
      _overrides$dashboardL = overrides.dashboardLevel,
      dashboardLevel = _overrides$dashboardL === void 0 ? defaultDashboardLevel : _overrides$dashboardL,
      _overrides$lastActivi = overrides.lastActivity,
      lastActivity = _overrides$lastActivi === void 0 ? null : _overrides$lastActivi,
      _overrides$isLoading = overrides.isLoading,
      isLoading = _overrides$isLoading === void 0 ? false : _overrides$isLoading,
      _overrides$levelProgr = overrides.levelProgress,
      levelProgress = _overrides$levelProgr === void 0 ? {
        '1': 25,
        '2': 50,
        '3': 75
      } : _overrides$levelProgr;
    mockUseProgress.mockReturnValue(progressContext);
    mockUseCurrentLevel.mockReturnValue(currentLevelContext);
    mockUseDashboardLevel.mockReturnValue(dashboardLevel);
    var useLastActivity = require('../../../src/hooks/useLastActivity').default;
    useLastActivity.mockReturnValue({
      lastActivity: lastActivity,
      isLoading: isLoading,
      reload: mockReload
    });
    mockGetLevelProgress.mockImplementation(function (level) {
      return levelProgress[level] || 0;
    });
    mockRefresh.mockResolvedValue();
    mockReload.mockResolvedValue();
  };
  var renderDashboard = function renderDashboard() {
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
      value: defaultThemeContext,
      children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
    }));
  };
  beforeEach(function () {
    jest.clearAllMocks();
    _asyncStorage.default.getItem.mockResolvedValue(null);
    _asyncStorage.default.setItem.mockResolvedValue();
    setupMocks();
  });
  afterEach(function () {
    jest.clearAllMocks();
  });
  describe('Navigation sans activité récente', function () {
    it('devrait naviguer vers la sélection de niveau quand aucune activité récente', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        lastActivity: null
      });
      var _renderDashboard = renderDashboard(),
        findByTestId = _renderDashboard.findByTestId;
      var startButton = yield findByTestId('start-learning-button');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(startButton);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockRouterPush).toHaveBeenCalledWith('/(tabs)/levelSelection');
      });
    }));
  });
  describe('Navigation avec activité récente', function () {
    it('devrait permettre de continuer la dernière activité', (0, _asyncToGenerator2.default)(function* () {
      var lastActivity = {
        type: 'vocabulary',
        level: '2',
        title: 'Vocabulaire Famille'
      };
      setupMocks({
        lastActivity: lastActivity
      });
      var _renderDashboard2 = renderDashboard(),
        findByTestId = _renderDashboard2.findByTestId;
      var continueButton = yield findByTestId('continue-activity-button');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(continueButton);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockRouterPush).toHaveBeenCalled();
      });
    }));
  });
  describe('Changement de niveau', function () {
    it('devrait permettre de changer de niveau et naviguer', (0, _asyncToGenerator2.default)(function* () {
      var mockHandleChangeActiveLevel = jest.fn();
      var mockSetCurrentLevel = jest.fn();
      setupMocks({
        currentLevelContext: {
          setCurrentLevel: mockSetCurrentLevel,
          currentLevel: '1'
        },
        dashboardLevel: {
          currentLevel: '1',
          handleChangeActiveLevel: mockHandleChangeActiveLevel,
          levelColor: '#10B981',
          isLoaded: true
        }
      });
      var _renderDashboard3 = renderDashboard(),
        findByText = _renderDashboard3.findByText,
        rerender = _renderDashboard3.rerender;
      var level2Element = yield findByText('2');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(level2Element);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockHandleChangeActiveLevel).toHaveBeenCalledWith('2');
        expect(mockSetCurrentLevel).toHaveBeenCalledWith('2');
      });
      setupMocks({
        currentLevelContext: {
          setCurrentLevel: mockSetCurrentLevel,
          currentLevel: '2'
        },
        dashboardLevel: {
          currentLevel: '2',
          handleChangeActiveLevel: mockHandleChangeActiveLevel,
          levelColor: '#3B82F6',
          isLoaded: true
        }
      });
      rerender((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
        value: defaultThemeContext,
        children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
      }));
      var exploreButton = yield findByText('Explorer le niveau 2');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(exploreButton);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockRouterPush).toHaveBeenCalledWith('/tabs/exerciseSelection?level=2');
      });
    }));
  });
  describe('Gestion des états de chargement', function () {
    it('devrait gérer l\'état de chargement', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        dashboardLevel: Object.assign({}, defaultDashboardLevel, {
          isLoaded: false
        })
      });
      var _renderDashboard4 = renderDashboard(),
        findByTestId = _renderDashboard4.findByTestId;
      var container = yield findByTestId('container');
      expect(container).toBeTruthy();
    }));
  });
  describe('Gestion des erreurs AsyncStorage', function () {
    it('devrait gérer les erreurs AsyncStorage gracieusement', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockRejectedValue(new Error('Storage error'));
      setupMocks();
      var _renderDashboard5 = renderDashboard(),
        findByTestId = _renderDashboard5.findByTestId;
      var container = yield findByTestId('container');
      expect(container).toBeTruthy();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,