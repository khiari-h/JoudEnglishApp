e03ebea9e2cc9af990ae9a0fa2dd99af
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EntryExitTransition = void 0;
exports.combineTransition = combineTransition;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _animationBuilder = require("../animationBuilder");
var _animation = require("../../animation");
var _Fade = require("../defaultAnimations/Fade");
var _logger = require("../../logger");
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var _worklet_7771431138882_init_data = {
  code: "function EntryExitTransitionTs1(values){const{enteringAnimation,exitingAnimation,delayFunction,delay,withSequence,withTiming,exitingDuration,logger,callback}=this.__closure;const enteringValues=enteringAnimation(values);const exitingValues=exitingAnimation(values);const animations={transform:[]};for(const prop of Object.keys(exitingValues.animations)){if(prop==='transform'){if(!Array.isArray(exitingValues.animations.transform)){continue;}exitingValues.animations.transform.forEach(function(value,index){for(const transformProp of Object.keys(value)){animations.transform.push({[transformProp]:delayFunction(delay,withSequence(value[transformProp],withTiming(exitingValues.initialValues.transform?exitingValues.initialValues.transform[index][transformProp]:0,{duration:0})))});}});}else{const sequence=enteringValues.animations[prop]!==undefined?[exitingValues.animations[prop],withTiming(enteringValues.initialValues[prop],{duration:0}),enteringValues.animations[prop]]:[exitingValues.animations[prop],withTiming(Object.keys(values).includes(prop)?values[prop]:exitingValues.initialValues[prop],{duration:0})];animations[prop]=delayFunction(delay,withSequence(...sequence));}}for(const prop of Object.keys(enteringValues.animations)){if(prop==='transform'){if(!Array.isArray(enteringValues.animations.transform)){continue;}enteringValues.animations.transform.forEach(function(value,index){for(const transformProp of Object.keys(value)){animations.transform.push({[transformProp]:delayFunction(delay+exitingDuration,withSequence(withTiming(enteringValues.initialValues.transform?enteringValues.initialValues.transform[index][transformProp]:0,{duration:exitingDuration}),value[transformProp]))});}});}else if(animations[prop]!==undefined){continue;}else{animations[prop]=delayFunction(delay,withSequence(withTiming(enteringValues.initialValues[prop],{duration:0}),enteringValues.animations[prop]));}}const mergedTransform=(Array.isArray(exitingValues.initialValues.transform)?exitingValues.initialValues.transform:[]).concat((Array.isArray(enteringValues.animations.transform)?enteringValues.animations.transform:[]).map(function(value){const objectKeys=Object.keys(value);if((objectKeys===null||objectKeys===void 0?void 0:objectKeys.length)<1){logger.error(\"${value} is not a valid Transform object\");return value;}const transformProp=objectKeys[0];const current=value[transformProp].current;if(typeof current==='string'){if(current.includes('deg')){return{[transformProp]:'0deg'};}else{return{[transformProp]:'0'};}}else if(transformProp.includes('translate')){return{[transformProp]:0};}else{return{[transformProp]:1};}}));return{initialValues:{...exitingValues.initialValues,originX:values.currentOriginX,originY:values.currentOriginY,width:values.currentWidth,height:values.currentHeight,transform:mergedTransform},animations:{originX:delayFunction(delay+exitingDuration,withTiming(values.targetOriginX,{duration:exitingDuration})),originY:delayFunction(delay+exitingDuration,withTiming(values.targetOriginY,{duration:exitingDuration})),width:delayFunction(delay+exitingDuration,withTiming(values.targetWidth,{duration:exitingDuration})),height:delayFunction(delay+exitingDuration,withTiming(values.targetHeight,{duration:exitingDuration})),...animations},callback:callback};}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\layoutReanimation\\defaultTransitions\\EntryExitTransition.ts",
  sourceMap: "{\"version\":3,\"names\":[\"EntryExitTransitionTs1\",\"values\",\"enteringAnimation\",\"exitingAnimation\",\"delayFunction\",\"delay\",\"withSequence\",\"withTiming\",\"exitingDuration\",\"logger\",\"callback\",\"__closure\",\"enteringValues\",\"exitingValues\",\"animations\",\"transform\",\"prop\",\"Object\",\"keys\",\"Array\",\"isArray\",\"forEach\",\"value\",\"index\",\"transformProp\",\"push\",\"initialValues\",\"duration\",\"sequence\",\"undefined\",\"includes\",\"mergedTransform\",\"concat\",\"map\",\"objectKeys\",\"length\",\"error\",\"current\",\"originX\",\"currentOriginX\",\"originY\",\"currentOriginY\",\"width\",\"currentWidth\",\"height\",\"currentHeight\",\"targetOriginX\",\"targetOriginY\",\"targetWidth\",\"targetHeight\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/layoutReanimation/defaultTransitions/EntryExitTransition.ts\"],\"mappings\":\"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\",\"ignoreList\":[]}",
  version: "3.16.7"
};
var EntryExitTransition = exports.EntryExitTransition = function (_BaseAnimationBuilder) {
  function EntryExitTransition() {
    var _this;
    (0, _classCallCheck2.default)(this, EntryExitTransition);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, EntryExitTransition, [].concat(args));
    _this.enteringV = _Fade.FadeIn;
    _this.exitingV = _Fade.FadeOut;
    _this.build = function () {
      var delayFunction = _this.getDelayFunction();
      var callback = _this.callbackV;
      var delay = _this.getDelay();
      var enteringAnimation = _this.enteringV.build();
      var exitingAnimation = _this.exitingV.build();
      var exitingDuration = _this.exitingV.getDuration();
      return function () {
        var _e = [new global.Error(), -10, -27];
        var EntryExitTransitionTs1 = function EntryExitTransitionTs1(values) {
          var enteringValues = enteringAnimation(values);
          var exitingValues = exitingAnimation(values);
          var animations = {
            transform: []
          };
          for (var prop of Object.keys(exitingValues.animations)) {
            if (prop === 'transform') {
              if (!Array.isArray(exitingValues.animations.transform)) {
                continue;
              }
              exitingValues.animations.transform.forEach(function (value, index) {
                for (var transformProp of Object.keys(value)) {
                  animations.transform.push((0, _defineProperty2.default)({}, transformProp, delayFunction(delay, (0, _animation.withSequence)(value[transformProp], (0, _animation.withTiming)(exitingValues.initialValues.transform ? exitingValues.initialValues.transform[index][transformProp] : 0, {
                    duration: 0
                  })))));
                }
              });
            } else {
              var sequence = enteringValues.animations[prop] !== undefined ? [exitingValues.animations[prop], (0, _animation.withTiming)(enteringValues.initialValues[prop], {
                duration: 0
              }), enteringValues.animations[prop]] : [exitingValues.animations[prop], (0, _animation.withTiming)(Object.keys(values).includes(prop) ? values[prop] : exitingValues.initialValues[prop], {
                duration: 0
              })];
              animations[prop] = delayFunction(delay, _animation.withSequence.apply(void 0, sequence));
            }
          }
          for (var _prop of Object.keys(enteringValues.animations)) {
            if (_prop === 'transform') {
              if (!Array.isArray(enteringValues.animations.transform)) {
                continue;
              }
              enteringValues.animations.transform.forEach(function (value, index) {
                for (var transformProp of Object.keys(value)) {
                  animations.transform.push((0, _defineProperty2.default)({}, transformProp, delayFunction(delay + exitingDuration, (0, _animation.withSequence)((0, _animation.withTiming)(enteringValues.initialValues.transform ? enteringValues.initialValues.transform[index][transformProp] : 0, {
                    duration: exitingDuration
                  }), value[transformProp]))));
                }
              });
            } else if (animations[_prop] !== undefined) {
              continue;
            } else {
              animations[_prop] = delayFunction(delay, (0, _animation.withSequence)((0, _animation.withTiming)(enteringValues.initialValues[_prop], {
                duration: 0
              }), enteringValues.animations[_prop]));
            }
          }
          var mergedTransform = (Array.isArray(exitingValues.initialValues.transform) ? exitingValues.initialValues.transform : []).concat((Array.isArray(enteringValues.animations.transform) ? enteringValues.animations.transform : []).map(function (value) {
            var objectKeys = Object.keys(value);
            if ((objectKeys == null ? void 0 : objectKeys.length) < 1) {
              _logger.logger.error(`\${value} is not a valid Transform object`);
              return value;
            }
            var transformProp = objectKeys[0];
            var current = value[transformProp].current;
            if (typeof current === 'string') {
              if (current.includes('deg')) {
                return (0, _defineProperty2.default)({}, transformProp, '0deg');
              } else {
                return (0, _defineProperty2.default)({}, transformProp, '0');
              }
            } else if (transformProp.includes('translate')) {
              return (0, _defineProperty2.default)({}, transformProp, 0);
            } else {
              return (0, _defineProperty2.default)({}, transformProp, 1);
            }
          }));
          return {
            initialValues: Object.assign({}, exitingValues.initialValues, {
              originX: values.currentOriginX,
              originY: values.currentOriginY,
              width: values.currentWidth,
              height: values.currentHeight,
              transform: mergedTransform
            }),
            animations: Object.assign({
              originX: delayFunction(delay + exitingDuration, (0, _animation.withTiming)(values.targetOriginX, {
                duration: exitingDuration
              })),
              originY: delayFunction(delay + exitingDuration, (0, _animation.withTiming)(values.targetOriginY, {
                duration: exitingDuration
              })),
              width: delayFunction(delay + exitingDuration, (0, _animation.withTiming)(values.targetWidth, {
                duration: exitingDuration
              })),
              height: delayFunction(delay + exitingDuration, (0, _animation.withTiming)(values.targetHeight, {
                duration: exitingDuration
              }))
            }, animations),
            callback: callback
          };
        };
        EntryExitTransitionTs1.__closure = {
          enteringAnimation: enteringAnimation,
          exitingAnimation: exitingAnimation,
          delayFunction: delayFunction,
          delay: delay,
          withSequence: _animation.withSequence,
          withTiming: _animation.withTiming,
          exitingDuration: exitingDuration,
          logger: _logger.logger,
          callback: callback
        };
        EntryExitTransitionTs1.__workletHash = 7771431138882;
        EntryExitTransitionTs1.__initData = _worklet_7771431138882_init_data;
        EntryExitTransitionTs1.__stackDetails = _e;
        return EntryExitTransitionTs1;
      }();
    };
    return _this;
  }
  (0, _inherits2.default)(EntryExitTransition, _BaseAnimationBuilder);
  return (0, _createClass2.default)(EntryExitTransition, [{
    key: "entering",
    value: function entering(animation) {
      this.enteringV = animation;
      return this;
    }
  }, {
    key: "exiting",
    value: function exiting(animation) {
      this.exitingV = animation;
      return this;
    }
  }], [{
    key: "createInstance",
    value: function createInstance() {
      return new EntryExitTransition();
    }
  }, {
    key: "entering",
    value: function entering(animation) {
      var instance = this.createInstance();
      return instance.entering(animation);
    }
  }, {
    key: "exiting",
    value: function exiting(animation) {
      var instance = this.createInstance();
      return instance.exiting(animation);
    }
  }]);
}(_animationBuilder.BaseAnimationBuilder);
EntryExitTransition.presetName = 'EntryExitTransition';
function combineTransition(exiting, entering) {
  return EntryExitTransition.entering(entering).exiting(exiting);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,