60b4c066bc80f922aa0f1191f7d4efd4
'use strict';

var _classCallCheck = require("@babel/runtime/helpers/classCallCheck");
var _createClass = require("@babel/runtime/helpers/createClass");
var PixelRatio = require('../Utilities/PixelRatio').default;
var Platform = require('../Utilities/Platform');
var _require = require('./AssetUtils'),
  pickScale = _require.pickScale;
var _require2 = require('@react-native/assets-registry/path-support'),
  getAndroidResourceFolderName = _require2.getAndroidResourceFolderName,
  getAndroidResourceIdentifier = _require2.getAndroidResourceIdentifier,
  getBasePath = _require2.getBasePath;
var invariant = require('invariant');
function getScaledAssetPath(asset) {
  var scale = pickScale(asset.scales, PixelRatio.get());
  var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';
  var assetDir = getBasePath(asset);
  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;
}
function getAssetPathInDrawableFolder(asset) {
  var scale = pickScale(asset.scales, PixelRatio.get());
  var drawableFolder = getAndroidResourceFolderName(asset, scale);
  var fileName = getAndroidResourceIdentifier(asset);
  return drawableFolder + '/' + fileName + '.' + asset.type;
}
var AssetSourceResolver = function () {
  function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {
    _classCallCheck(this, AssetSourceResolver);
    this.serverUrl = serverUrl;
    this.jsbundleUrl = jsbundleUrl;
    this.asset = asset;
  }
  return _createClass(AssetSourceResolver, [{
    key: "isLoadedFromServer",
    value: function isLoadedFromServer() {
      return !!this.serverUrl;
    }
  }, {
    key: "isLoadedFromFileSystem",
    value: function isLoadedFromFileSystem() {
      var _this$jsbundleUrl;
      return this.jsbundleUrl != null && ((_this$jsbundleUrl = this.jsbundleUrl) == null ? void 0 : _this$jsbundleUrl.startsWith('file://'));
    }
  }, {
    key: "defaultAsset",
    value: function defaultAsset() {
      if (this.isLoadedFromServer()) {
        return this.assetServerURL();
      }
      if (this.asset.resolver != null) {
        return this.getAssetUsingResolver(this.asset.resolver);
      }
      if (Platform.OS === 'android') {
        return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
      } else {
        return this.scaledAssetURLNearBundle();
      }
    }
  }, {
    key: "getAssetUsingResolver",
    value: function getAssetUsingResolver(resolver) {
      switch (resolver) {
        case 'android':
          return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
        case 'generic':
          return this.scaledAssetURLNearBundle();
        default:
          throw new Error("Don't know how to get asset via provided resolver: " + resolver + '\nAsset: ' + JSON.stringify(this.asset, null, '\t') + '\nPossible resolvers are:' + JSON.stringify(['android', 'generic'], null, '\t'));
      }
    }
  }, {
    key: "assetServerURL",
    value: function assetServerURL() {
      invariant(this.serverUrl != null, 'need server to load from');
      return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);
    }
  }, {
    key: "scaledAssetPath",
    value: function scaledAssetPath() {
      return this.fromSource(getScaledAssetPath(this.asset));
    }
  }, {
    key: "scaledAssetURLNearBundle",
    value: function scaledAssetURLNearBundle() {
      var _this$jsbundleUrl2;
      var path = (_this$jsbundleUrl2 = this.jsbundleUrl) != null ? _this$jsbundleUrl2 : 'file://';
      return this.fromSource(path + getScaledAssetPath(this.asset).replace(/\.\.\//g, '_'));
    }
  }, {
    key: "resourceIdentifierWithoutScale",
    value: function resourceIdentifierWithoutScale() {
      invariant(Platform.OS === 'android', 'resource identifiers work on Android');
      return this.fromSource(getAndroidResourceIdentifier(this.asset));
    }
  }, {
    key: "drawableFolderInBundle",
    value: function drawableFolderInBundle() {
      var _this$jsbundleUrl3;
      var path = (_this$jsbundleUrl3 = this.jsbundleUrl) != null ? _this$jsbundleUrl3 : 'file://';
      return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));
    }
  }, {
    key: "fromSource",
    value: function fromSource(source) {
      return {
        __packager_asset: true,
        width: this.asset.width,
        height: this.asset.height,
        uri: source,
        scale: pickScale(this.asset.scales, PixelRatio.get())
      };
    }
  }]);
}();
AssetSourceResolver.pickScale = pickScale;
module.exports = AssetSourceResolver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY2xhc3NDYWxsQ2hlY2siLCJyZXF1aXJlIiwiX2NyZWF0ZUNsYXNzIiwiUGl4ZWxSYXRpbyIsImRlZmF1bHQiLCJQbGF0Zm9ybSIsIl9yZXF1aXJlIiwicGlja1NjYWxlIiwiX3JlcXVpcmUyIiwiZ2V0QW5kcm9pZFJlc291cmNlRm9sZGVyTmFtZSIsImdldEFuZHJvaWRSZXNvdXJjZUlkZW50aWZpZXIiLCJnZXRCYXNlUGF0aCIsImludmFyaWFudCIsImdldFNjYWxlZEFzc2V0UGF0aCIsImFzc2V0Iiwic2NhbGUiLCJzY2FsZXMiLCJnZXQiLCJzY2FsZVN1ZmZpeCIsImFzc2V0RGlyIiwibmFtZSIsInR5cGUiLCJnZXRBc3NldFBhdGhJbkRyYXdhYmxlRm9sZGVyIiwiZHJhd2FibGVGb2xkZXIiLCJmaWxlTmFtZSIsIkFzc2V0U291cmNlUmVzb2x2ZXIiLCJzZXJ2ZXJVcmwiLCJqc2J1bmRsZVVybCIsImtleSIsInZhbHVlIiwiaXNMb2FkZWRGcm9tU2VydmVyIiwiaXNMb2FkZWRGcm9tRmlsZVN5c3RlbSIsIl90aGlzJGpzYnVuZGxlVXJsIiwic3RhcnRzV2l0aCIsImRlZmF1bHRBc3NldCIsImFzc2V0U2VydmVyVVJMIiwicmVzb2x2ZXIiLCJnZXRBc3NldFVzaW5nUmVzb2x2ZXIiLCJPUyIsImRyYXdhYmxlRm9sZGVySW5CdW5kbGUiLCJyZXNvdXJjZUlkZW50aWZpZXJXaXRob3V0U2NhbGUiLCJzY2FsZWRBc3NldFVSTE5lYXJCdW5kbGUiLCJFcnJvciIsIkpTT04iLCJzdHJpbmdpZnkiLCJmcm9tU291cmNlIiwiaGFzaCIsInNjYWxlZEFzc2V0UGF0aCIsIl90aGlzJGpzYnVuZGxlVXJsMiIsInBhdGgiLCJyZXBsYWNlIiwiX3RoaXMkanNidW5kbGVVcmwzIiwic291cmNlIiwiX19wYWNrYWdlcl9hc3NldCIsIndpZHRoIiwiaGVpZ2h0IiwidXJpIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkFzc2V0U291cmNlUmVzb2x2ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IHR5cGUgUmVzb2x2ZWRBc3NldFNvdXJjZSA9IHt8XG4gICtfX3BhY2thZ2VyX2Fzc2V0OiBib29sZWFuLFxuICArd2lkdGg6ID9udW1iZXIsXG4gICtoZWlnaHQ6ID9udW1iZXIsXG4gICt1cmk6IHN0cmluZyxcbiAgK3NjYWxlOiBudW1iZXIsXG58fTtcblxuaW1wb3J0IHR5cGUge1xuICBBc3NldERlc3RQYXRoUmVzb2x2ZXIsXG4gIFBhY2thZ2VyQXNzZXQsXG59IGZyb20gJ0ByZWFjdC1uYXRpdmUvYXNzZXRzLXJlZ2lzdHJ5L3JlZ2lzdHJ5JztcblxuY29uc3QgUGl4ZWxSYXRpbyA9IHJlcXVpcmUoJy4uL1V0aWxpdGllcy9QaXhlbFJhdGlvJykuZGVmYXVsdDtcbmNvbnN0IFBsYXRmb3JtID0gcmVxdWlyZSgnLi4vVXRpbGl0aWVzL1BsYXRmb3JtJyk7XG5jb25zdCB7cGlja1NjYWxlfSA9IHJlcXVpcmUoJy4vQXNzZXRVdGlscycpO1xuY29uc3Qge1xuICBnZXRBbmRyb2lkUmVzb3VyY2VGb2xkZXJOYW1lLFxuICBnZXRBbmRyb2lkUmVzb3VyY2VJZGVudGlmaWVyLFxuICBnZXRCYXNlUGF0aCxcbn0gPSByZXF1aXJlKCdAcmVhY3QtbmF0aXZlL2Fzc2V0cy1yZWdpc3RyeS9wYXRoLXN1cHBvcnQnKTtcbmNvbnN0IGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG4vKipcbiAqIFJldHVybnMgYSBwYXRoIGxpa2UgJ2Fzc2V0cy9Bd2Vzb21lTW9kdWxlL2ljb25AMngucG5nJ1xuICovXG5mdW5jdGlvbiBnZXRTY2FsZWRBc3NldFBhdGgoYXNzZXQ6IFBhY2thZ2VyQXNzZXQpOiBzdHJpbmcge1xuICBjb25zdCBzY2FsZSA9IHBpY2tTY2FsZShhc3NldC5zY2FsZXMsIFBpeGVsUmF0aW8uZ2V0KCkpO1xuICBjb25zdCBzY2FsZVN1ZmZpeCA9IHNjYWxlID09PSAxID8gJycgOiAnQCcgKyBzY2FsZSArICd4JztcbiAgY29uc3QgYXNzZXREaXIgPSBnZXRCYXNlUGF0aChhc3NldCk7XG4gIHJldHVybiBhc3NldERpciArICcvJyArIGFzc2V0Lm5hbWUgKyBzY2FsZVN1ZmZpeCArICcuJyArIGFzc2V0LnR5cGU7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHBhdGggbGlrZSAnZHJhd2FibGUtbWRwaS9pY29uLnBuZydcbiAqL1xuZnVuY3Rpb24gZ2V0QXNzZXRQYXRoSW5EcmF3YWJsZUZvbGRlcihhc3NldDogUGFja2FnZXJBc3NldCk6IHN0cmluZyB7XG4gIGNvbnN0IHNjYWxlID0gcGlja1NjYWxlKGFzc2V0LnNjYWxlcywgUGl4ZWxSYXRpby5nZXQoKSk7XG4gIGNvbnN0IGRyYXdhYmxlRm9sZGVyID0gZ2V0QW5kcm9pZFJlc291cmNlRm9sZGVyTmFtZShhc3NldCwgc2NhbGUpO1xuICBjb25zdCBmaWxlTmFtZSA9IGdldEFuZHJvaWRSZXNvdXJjZUlkZW50aWZpZXIoYXNzZXQpO1xuICByZXR1cm4gZHJhd2FibGVGb2xkZXIgKyAnLycgKyBmaWxlTmFtZSArICcuJyArIGFzc2V0LnR5cGU7XG59XG5cbmNsYXNzIEFzc2V0U291cmNlUmVzb2x2ZXIge1xuICBzZXJ2ZXJVcmw6ID9zdHJpbmc7XG4gIC8vIHdoZXJlIHRoZSBqc2J1bmRsZSBpcyBiZWluZyBydW4gZnJvbVxuICBqc2J1bmRsZVVybDogP3N0cmluZztcbiAgLy8gdGhlIGFzc2V0IHRvIHJlc29sdmVcbiAgYXNzZXQ6IFBhY2thZ2VyQXNzZXQ7XG5cbiAgY29uc3RydWN0b3Ioc2VydmVyVXJsOiA/c3RyaW5nLCBqc2J1bmRsZVVybDogP3N0cmluZywgYXNzZXQ6IFBhY2thZ2VyQXNzZXQpIHtcbiAgICB0aGlzLnNlcnZlclVybCA9IHNlcnZlclVybDtcbiAgICB0aGlzLmpzYnVuZGxlVXJsID0ganNidW5kbGVVcmw7XG4gICAgdGhpcy5hc3NldCA9IGFzc2V0O1xuICB9XG5cbiAgaXNMb2FkZWRGcm9tU2VydmVyKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhIXRoaXMuc2VydmVyVXJsO1xuICB9XG5cbiAgaXNMb2FkZWRGcm9tRmlsZVN5c3RlbSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5qc2J1bmRsZVVybCAhPSBudWxsICYmIHRoaXMuanNidW5kbGVVcmw/LnN0YXJ0c1dpdGgoJ2ZpbGU6Ly8nKTtcbiAgfVxuXG4gIGRlZmF1bHRBc3NldCgpOiBSZXNvbHZlZEFzc2V0U291cmNlIHtcbiAgICBpZiAodGhpcy5pc0xvYWRlZEZyb21TZXJ2ZXIoKSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXNzZXRTZXJ2ZXJVUkwoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5hc3NldC5yZXNvbHZlciAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRBc3NldFVzaW5nUmVzb2x2ZXIodGhpcy5hc3NldC5yZXNvbHZlcik7XG4gICAgfVxuXG4gICAgaWYgKFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzTG9hZGVkRnJvbUZpbGVTeXN0ZW0oKVxuICAgICAgICA/IHRoaXMuZHJhd2FibGVGb2xkZXJJbkJ1bmRsZSgpXG4gICAgICAgIDogdGhpcy5yZXNvdXJjZUlkZW50aWZpZXJXaXRob3V0U2NhbGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuc2NhbGVkQXNzZXRVUkxOZWFyQnVuZGxlKCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0QXNzZXRVc2luZ1Jlc29sdmVyKHJlc29sdmVyOiBBc3NldERlc3RQYXRoUmVzb2x2ZXIpOiBSZXNvbHZlZEFzc2V0U291cmNlIHtcbiAgICBzd2l0Y2ggKHJlc29sdmVyKSB7XG4gICAgICBjYXNlICdhbmRyb2lkJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNMb2FkZWRGcm9tRmlsZVN5c3RlbSgpXG4gICAgICAgICAgPyB0aGlzLmRyYXdhYmxlRm9sZGVySW5CdW5kbGUoKVxuICAgICAgICAgIDogdGhpcy5yZXNvdXJjZUlkZW50aWZpZXJXaXRob3V0U2NhbGUoKTtcbiAgICAgIGNhc2UgJ2dlbmVyaWMnOlxuICAgICAgICByZXR1cm4gdGhpcy5zY2FsZWRBc3NldFVSTE5lYXJCdW5kbGUoKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBcIkRvbid0IGtub3cgaG93IHRvIGdldCBhc3NldCB2aWEgcHJvdmlkZWQgcmVzb2x2ZXI6IFwiICtcbiAgICAgICAgICAgIHJlc29sdmVyICtcbiAgICAgICAgICAgICdcXG5Bc3NldDogJyArXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeSh0aGlzLmFzc2V0LCBudWxsLCAnXFx0JykgK1xuICAgICAgICAgICAgJ1xcblBvc3NpYmxlIHJlc29sdmVycyBhcmU6JyArXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShbJ2FuZHJvaWQnLCAnZ2VuZXJpYyddLCBudWxsLCAnXFx0JyksXG4gICAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gYWJzb2x1dGUgVVJMIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGZldGNoIHRoZSBhc3NldFxuICAgKiBmcm9tIHRoZSBkZXZzZXJ2ZXJcbiAgICovXG4gIGFzc2V0U2VydmVyVVJMKCk6IFJlc29sdmVkQXNzZXRTb3VyY2Uge1xuICAgIGludmFyaWFudCh0aGlzLnNlcnZlclVybCAhPSBudWxsLCAnbmVlZCBzZXJ2ZXIgdG8gbG9hZCBmcm9tJyk7XG4gICAgcmV0dXJuIHRoaXMuZnJvbVNvdXJjZShcbiAgICAgIHRoaXMuc2VydmVyVXJsICtcbiAgICAgICAgZ2V0U2NhbGVkQXNzZXRQYXRoKHRoaXMuYXNzZXQpICtcbiAgICAgICAgJz9wbGF0Zm9ybT0nICtcbiAgICAgICAgUGxhdGZvcm0uT1MgK1xuICAgICAgICAnJmhhc2g9JyArXG4gICAgICAgIHRoaXMuYXNzZXQuaGFzaCxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc29sdmVzIHRvIGp1c3QgdGhlIHNjYWxlZCBhc3NldCBmaWxlbmFtZVxuICAgKiBFLmcuICdhc3NldHMvQXdlc29tZU1vZHVsZS9pY29uQDJ4LnBuZydcbiAgICovXG4gIHNjYWxlZEFzc2V0UGF0aCgpOiBSZXNvbHZlZEFzc2V0U291cmNlIHtcbiAgICByZXR1cm4gdGhpcy5mcm9tU291cmNlKGdldFNjYWxlZEFzc2V0UGF0aCh0aGlzLmFzc2V0KSk7XG4gIH1cblxuICAvKipcbiAgICogUmVzb2x2ZXMgdG8gd2hlcmUgdGhlIGJ1bmRsZSBpcyBydW5uaW5nIGZyb20sIHdpdGggYSBzY2FsZWQgYXNzZXQgZmlsZW5hbWVcbiAgICogRS5nLiAnZmlsZTovLy9zZGNhcmQvYnVuZGxlL2Fzc2V0cy9Bd2Vzb21lTW9kdWxlL2ljb25AMngucG5nJ1xuICAgKi9cbiAgc2NhbGVkQXNzZXRVUkxOZWFyQnVuZGxlKCk6IFJlc29sdmVkQXNzZXRTb3VyY2Uge1xuICAgIGNvbnN0IHBhdGggPSB0aGlzLmpzYnVuZGxlVXJsID8/ICdmaWxlOi8vJztcbiAgICByZXR1cm4gdGhpcy5mcm9tU291cmNlKFxuICAgICAgLy8gQXNzZXRzIGNhbiBoYXZlIHJlbGF0aXZlIHBhdGhzIG91dHNpZGUgb2YgdGhlIHByb2plY3Qgcm9vdC5cbiAgICAgIC8vIFdoZW4gYnVuZGxpbmcgdGhlbSB3ZSByZXBsYWNlIGAuLi9gIHdpdGggYF9gIHRvIG1ha2Ugc3VyZSB0aGV5XG4gICAgICAvLyBkb24ndCBlbmQgdXAgb3V0c2lkZSBvZiB0aGUgZXhwZWN0ZWQgYXNzZXRzIGRpcmVjdG9yeS5cbiAgICAgIHBhdGggKyBnZXRTY2FsZWRBc3NldFBhdGgodGhpcy5hc3NldCkucmVwbGFjZSgvXFwuXFwuXFwvL2csICdfJyksXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBsb2NhdGlvbiBvZiBhc3NldHMgYnVuZGxlZCB3aXRoIHRoZSBhcHAsIGxvY2F0ZWQgYnlcbiAgICogcmVzb3VyY2UgaWRlbnRpZmllclxuICAgKiBUaGUgQW5kcm9pZCByZXNvdXJjZSBzeXN0ZW0gcGlja3MgdGhlIGNvcnJlY3Qgc2NhbGUuXG4gICAqIEUuZy4gJ2Fzc2V0c19hd2Vzb21lbW9kdWxlX2ljb24nXG4gICAqL1xuICByZXNvdXJjZUlkZW50aWZpZXJXaXRob3V0U2NhbGUoKTogUmVzb2x2ZWRBc3NldFNvdXJjZSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJyxcbiAgICAgICdyZXNvdXJjZSBpZGVudGlmaWVycyB3b3JrIG9uIEFuZHJvaWQnLFxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuZnJvbVNvdXJjZShnZXRBbmRyb2lkUmVzb3VyY2VJZGVudGlmaWVyKHRoaXMuYXNzZXQpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiB0aGUganNidW5kbGUgaXMgcnVubmluZyBmcm9tIGEgc2lkZWxvYWQgbG9jYXRpb24sIHRoaXMgcmVzb2x2ZXMgYXNzZXRzXG4gICAqIHJlbGF0aXZlIHRvIGl0cyBsb2NhdGlvblxuICAgKiBFLmcuICdmaWxlOi8vL3NkY2FyZC9Bd2Vzb21lTW9kdWxlL2RyYXdhYmxlLW1kcGkvaWNvbi5wbmcnXG4gICAqL1xuICBkcmF3YWJsZUZvbGRlckluQnVuZGxlKCk6IFJlc29sdmVkQXNzZXRTb3VyY2Uge1xuICAgIGNvbnN0IHBhdGggPSB0aGlzLmpzYnVuZGxlVXJsID8/ICdmaWxlOi8vJztcbiAgICByZXR1cm4gdGhpcy5mcm9tU291cmNlKHBhdGggKyBnZXRBc3NldFBhdGhJbkRyYXdhYmxlRm9sZGVyKHRoaXMuYXNzZXQpKTtcbiAgfVxuXG4gIGZyb21Tb3VyY2Uoc291cmNlOiBzdHJpbmcpOiBSZXNvbHZlZEFzc2V0U291cmNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgX19wYWNrYWdlcl9hc3NldDogdHJ1ZSxcbiAgICAgIHdpZHRoOiB0aGlzLmFzc2V0LndpZHRoLFxuICAgICAgaGVpZ2h0OiB0aGlzLmFzc2V0LmhlaWdodCxcbiAgICAgIHVyaTogc291cmNlLFxuICAgICAgc2NhbGU6IHBpY2tTY2FsZSh0aGlzLmFzc2V0LnNjYWxlcywgUGl4ZWxSYXRpby5nZXQoKSksXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBwaWNrU2NhbGU6IChzY2FsZXM6IEFycmF5PG51bWJlcj4sIGRldmljZVNjYWxlPzogbnVtYmVyKSA9PiBudW1iZXIgPVxuICAgIHBpY2tTY2FsZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBc3NldFNvdXJjZVJlc29sdmVyO1xuIl0sIm1hcHBpbmdzIjoiQUFVQSxZQUFZOztBQUFDLElBQUFBLGVBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQWViLElBQU1FLFVBQVUsR0FBR0YsT0FBTyxDQUFDLHlCQUF5QixDQUFDLENBQUNHLE9BQU87QUFDN0QsSUFBTUMsUUFBUSxHQUFHSixPQUFPLENBQUMsdUJBQXVCLENBQUM7QUFDakQsSUFBQUssUUFBQSxHQUFvQkwsT0FBTyxDQUFDLGNBQWMsQ0FBQztFQUFwQ00sU0FBUyxHQUFBRCxRQUFBLENBQVRDLFNBQVM7QUFDaEIsSUFBQUMsU0FBQSxHQUlJUCxPQUFPLENBQUMsNENBQTRDLENBQUM7RUFIdkRRLDRCQUE0QixHQUFBRCxTQUFBLENBQTVCQyw0QkFBNEI7RUFDNUJDLDRCQUE0QixHQUFBRixTQUFBLENBQTVCRSw0QkFBNEI7RUFDNUJDLFdBQVcsR0FBQUgsU0FBQSxDQUFYRyxXQUFXO0FBRWIsSUFBTUMsU0FBUyxHQUFHWCxPQUFPLENBQUMsV0FBVyxDQUFDO0FB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