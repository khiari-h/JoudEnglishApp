d88469e4089de25a3b9e22e7b6aa2f6c
_getJestObj().mock('expo-router', function () {
  return {
    useSegments: jest.fn(function () {
      return [];
    }),
    usePathname: jest.fn(function () {
      return '/';
    })
  };
});
_getJestObj().mock('../../src/hooks/useActivityMetrics', function () {
  return {
    __esModule: true,
    default: jest.fn(function () {
      return {
        startSession: jest.fn(),
        endSession: jest.fn(),
        updateStreak: jest.fn()
      };
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactNative = require("@testing-library/react-native");
var _useRouteActivityTracker = _interopRequireDefault(require("../../src/hooks/useRouteActivityTracker"));
function _getJestObj() {
  var _require6 = require("@jest/globals"),
    jest = _require6.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useRouteActivityTracker', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('devrait s\'initialiser sans erreur', function () {
    var _require = require('expo-router'),
      useSegments = _require.useSegments,
      usePathname = _require.usePathname;
    useSegments.mockReturnValue(['home']);
    usePathname.mockReturnValue('/home');
    expect(function () {
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
    }).not.toThrow();
  });
  it('devrait détecter un exercice de vocabulaire', function () {
    var mockStartSession = jest.fn();
    var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
    useActivityMetrics.mockReturnValue({
      startSession: mockStartSession,
      endSession: jest.fn(),
      updateStreak: jest.fn()
    });
    var _require2 = require('expo-router'),
      useSegments = _require2.useSegments,
      usePathname = _require2.usePathname;
    useSegments.mockReturnValue(['level', 'VocabularyExercise']);
    usePathname.mockReturnValue('/level/VocabularyExercise');
    (0, _reactNative.renderHook)(function () {
      return (0, _useRouteActivityTracker.default)();
    });
    expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');
  });
  it('devrait détecter un assessment', function () {
    var mockStartSession = jest.fn();
    var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
    useActivityMetrics.mockReturnValue({
      startSession: mockStartSession,
      endSession: jest.fn(),
      updateStreak: jest.fn()
    });
    var _require3 = require('expo-router'),
      useSegments = _require3.useSegments,
      usePathname = _require3.usePathname;
    useSegments.mockReturnValue(['level', 'Assessment']);
    usePathname.mockReturnValue('/level/Assessment');
    (0, _reactNative.renderHook)(function () {
      return (0, _useRouteActivityTracker.default)();
    });
    expect(mockStartSession).toHaveBeenCalledWith('Assessment');
  });
  it('ne devrait pas démarrer de session pour une page normale', function () {
    var mockStartSession = jest.fn();
    var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
    useActivityMetrics.mockReturnValue({
      startSession: mockStartSession,
      endSession: jest.fn(),
      updateStreak: jest.fn()
    });
    var _require4 = require('expo-router'),
      useSegments = _require4.useSegments,
      usePathname = _require4.usePathname;
    useSegments.mockReturnValue(['home', 'dashboard']);
    usePathname.mockReturnValue('/home/dashboard');
    (0, _reactNative.renderHook)(function () {
      return (0, _useRouteActivityTracker.default)();
    });
    expect(mockStartSession).not.toHaveBeenCalled();
  });
  it('devrait gérer les segments vides', function () {
    var mockStartSession = jest.fn();
    var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
    useActivityMetrics.mockReturnValue({
      startSession: mockStartSession,
      endSession: jest.fn(),
      updateStreak: jest.fn()
    });
    var _require5 = require('expo-router'),
      useSegments = _require5.useSegments,
      usePathname = _require5.usePathname;
    useSegments.mockReturnValue([]);
    usePathname.mockReturnValue('/');
    expect(function () {
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
    }).not.toThrow();
    expect(mockStartSession).not.toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,