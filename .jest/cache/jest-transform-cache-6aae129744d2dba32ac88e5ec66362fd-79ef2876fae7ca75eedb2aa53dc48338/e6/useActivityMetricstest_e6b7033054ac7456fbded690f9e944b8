e952b73c382b992f6022509b668b15d9
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useActivityMetrics = _interopRequireDefault(require("../../src/hooks/useActivityMetrics"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useActivityMetrics - Refactoris√©', function () {
  var FIXED_DATE = new Date('2022-01-01T12:00:00');
  var YESTERDAY = new Date('2021-12-31T12:00:00');
  var TWO_DAYS_AGO = new Date('2021-12-30T12:00:00');
  var setupMocks = function setupMocks() {
    var initialData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      var data = Object.assign({
        current_streak: '0',
        today_minutes: '0',
        last_time_date: FIXED_DATE.toDateString(),
        last_activity_date: null
      }, initialData);
      return Promise.resolve(data[key] || null);
    });
    _asyncStorage.default.setItem.mockResolvedValue(null);
  };
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
    jest.setSystemTime(FIXED_DATE);
    jest.spyOn(console, 'warn').mockImplementation(function () {});
    setupMocks();
  });
  afterEach(function () {
    jest.useRealTimers();
    jest.restoreAllMocks();
  });
  describe('Chargement initial', function () {
    it('devrait charger les m√©triques existantes correctement', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        current_streak: '5',
        today_minutes: '30',
        last_time_date: FIXED_DATE.toDateString()
      });
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook.result;
      yield (0, _reactNative.waitFor)(function () {
        return expect(result.current.isLoading).toBe(false);
      });
      expect(result.current.currentStreak).toBe(5);
      expect(result.current.todayMinutes).toBe(30);
    }));
    it('devrait r√©initialiser les minutes pour un nouveau jour', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        today_minutes: '45',
        last_time_date: YESTERDAY.toDateString()
      });
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook2.result;
      yield (0, _reactNative.waitFor)(function () {
        return expect(result.current.isLoading).toBe(false);
      });
      expect(result.current.todayMinutes).toBe(0);
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('today_minutes', '0');
    }));
    it('devrait r√©initialiser le streak si la derni√®re activit√© est trop ancienne', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        current_streak: '10',
        last_activity_date: TWO_DAYS_AGO.toDateString()
      });
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook3.result;
      yield (0, _reactNative.waitFor)(function () {
        return expect(result.current.isLoading).toBe(false);
      });
      expect(result.current.currentStreak).toBe(0);
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('current_streak', '0');
    }));
  });
  describe('Gestion des sessions', function () {
    it('devrait d√©marrer et terminer une session avec succ√®s', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook4.result;
      yield (0, _reactNative.waitFor)(function () {
        return expect(result.current.isLoading).toBe(false);
      });
      (0, _reactNative.act)(function () {
        result.current.startSession('vocabulary');
      });
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(119000);
      });
      var sessionResult;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        sessionResult = yield result.current.endSession();
      }));
      expect(sessionResult.success).toBe(true);
      expect(sessionResult.sessionMinutes).toBe(1);
      expect(result.current.todayMinutes).toBe(1);
    }));
    it('devrait fournir le statut de session en temps r√©el', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook5.result;
      yield (0, _reactNative.waitFor)(function () {
        return expect(result.current.isLoading).toBe(false);
      });
      (0, _reactNative.act)(function () {
        result.current.startSession('test');
      });
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(65000);
      });
      yield (0, _reactNative.waitFor)(function () {
        expect(result.current.todayInfo.session.formattedTime).toBe('1:05');
      });
    }));
  });
  describe('Gestion du streak', function () {
    it('devrait incr√©menter le streak si activit√© hier', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        current_streak: '5',
        last_activity_date: YESTERDAY.toDateString(),
        today_minutes: '1'
      });
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook6.result;
      yield (0, _reactNative.waitFor)(function () {
        return expect(result.current.isLoading).toBe(false);
      });
      var streakResult;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        streakResult = yield result.current.updateStreak();
      }));
      expect(streakResult.success).toBe(true);
      expect(streakResult.streak).toBe(6);
      expect(result.current.currentStreak).toBe(6);
    }));
    it('devrait r√©initialiser le streak si pas d\'activit√© hier', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        current_streak: '5',
        last_activity_date: TWO_DAYS_AGO.toDateString(),
        today_minutes: '1'
      });
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook7.result;
      yield (0, _reactNative.waitFor)(function () {
        return expect(result.current.isLoading).toBe(false);
      });
      var streakResult;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        streakResult = yield result.current.updateStreak();
      }));
      expect(streakResult.success).toBe(true);
      expect(streakResult.streak).toBe(1);
      expect(result.current.currentStreak).toBe(1);
    }));
  });
  describe('Formatage et APIs enrichies', function () {
    it('devrait formater correctement diff√©rentes dur√©es', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        today_minutes: '30'
      });
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result1 = _renderHook8.result;
      yield (0, _reactNative.waitFor)(function () {
        return expect(result1.current.isLoading).toBe(false);
      });
      expect(result1.current.formattedTime).toBe('30min');
      setupMocks({
        today_minutes: '90'
      });
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result2 = _renderHook9.result;
      yield (0, _reactNative.waitFor)(function () {
        return expect(result2.current.isLoading).toBe(false);
      });
      expect(result2.current.formattedTime).toBe('1h30min');
      setupMocks({
        today_minutes: '60'
      });
      var _renderHook0 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result3 = _renderHook0.result;
      yield (0, _reactNative.waitFor)(function () {
        return expect(result3.current.isLoading).toBe(false);
      });
      expect(result3.current.formattedTime).toBe('1h');
    }));
    it('devrait retourner les bonnes tendances de streak', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        current_streak: '7'
      });
      var _renderHook1 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook1.result;
      yield (0, _reactNative.waitFor)(function () {
        return expect(result.current.isLoading).toBe(false);
      });
      expect(result.current.streakTrend).toBe('üèÜ Incroyable!');
    }));
  });
  describe('Int√©gration compl√®te', function () {
    it('devrait g√©rer un flow complet d\'activit√©', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        current_streak: '2',
        last_activity_date: YESTERDAY.toDateString(),
        today_minutes: '0'
      });
      var _renderHook10 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook10.result;
      yield (0, _reactNative.waitFor)(function () {
        return expect(result.current.isLoading).toBe(false);
      });
      expect(result.current.currentStreak).toBe(2);
      expect(result.current.todayMinutes).toBe(0);
      (0, _reactNative.act)(function () {
        result.current.startSession('vocabulary');
      });
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(300000);
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.endSession();
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(result.current.todayMinutes).toBe(5);
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.updateStreak();
      }));
      expect(result.current.currentStreak).toBe(3);
      expect(result.current.streakTrend).toBe('üí™ En forme!');
    }));
  });
  describe('Gestion des erreurs', function () {
    it('devrait g√©rer une erreur de lecture lors du chargement initial', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockRejectedValue(new Error('Erreur de lecture simul√©e'));
      var _renderHook11 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook11.result;
      yield (0, _reactNative.waitFor)(function () {
        return expect(result.current.isLoading).toBe(false);
      });
      expect(result.current.currentStreak).toBe(0);
      expect(result.current.todayMinutes).toBe(0);
      expect(console.warn).toHaveBeenCalledWith(expect.stringContaining('getItem'), expect.any(Error));
    }));
    it('devrait g√©rer une erreur de sauvegarde lors de la fin de session', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        today_minutes: '5'
      });
      _asyncStorage.default.setItem.mockRejectedValueOnce(new Error('Erreur de sauvegarde simul√©e'));
      var _renderHook12 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook12.result;
      yield (0, _reactNative.waitFor)(function () {
        return expect(result.current.isLoading).toBe(false);
      });
      (0, _reactNative.act)(function () {
        result.current.startSession();
        jest.advanceTimersByTime(60000);
      });
      var sessionResult = yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        return yield result.current.endSession();
      }));
      expect(sessionResult.success).toBe(false);
      expect(result.current.todayMinutes).toBe(6);
      expect(console.warn).toHaveBeenCalledWith(expect.stringContaining('setMultipleItems'), expect.any(Error));
    }));
    it('devrait g√©rer une erreur de sauvegarde lors de la mise √† jour du streak', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        today_minutes: '10',
        current_streak: '5',
        last_activity_date: TWO_DAYS_AGO.toDateString()
      });
      _asyncStorage.default.setItem.mockRejectedValueOnce(new Error('Erreur de sauvegarde initiale simul√©e'));
      _asyncStorage.default.setItem.mockRejectedValueOnce(new Error('Erreur de sauvegarde de secours simul√©e'));
      var _renderHook13 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook13.result;
      yield (0, _reactNative.waitFor)(function () {
        return expect(result.current.isLoading).toBe(false);
      });
      var streakResult = yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        return yield result.current.updateStreak();
      }));
      expect(streakResult.success).toBe(false);
      expect(streakResult.streak).toBe(1);
      expect(result.current.currentStreak).toBe(1);
      expect(console.warn).toHaveBeenCalledTimes(2);
      expect(console.warn).toHaveBeenCalledWith(expect.stringContaining('setMultipleItems'), expect.any(Error));
      expect(console.warn).toHaveBeenCalledWith(expect.stringContaining('setMultipleItems'), expect.any(Error));
    }));
  });
  describe('Gestion des cas limites', function () {
    it('devrait retourner une erreur si endSession est appel√© sans session active', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook14 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook14.result;
      yield (0, _reactNative.waitFor)(function () {
        return expect(result.current.isLoading).toBe(false);
      });
      var sessionResult = yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        return yield result.current.endSession();
      }));
      expect(sessionResult.success).toBe(false);
      expect(sessionResult.reason).toBe('No active session');
      expect(result.current.todayMinutes).toBe(0);
      expect(_asyncStorage.default.setItem).not.toHaveBeenCalled();
    }));
    it('devrait ignorer une session trop courte (moins d\'une minute)', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook15 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook15.result;
      yield (0, _reactNative.waitFor)(function () {
        return expect(result.current.isLoading).toBe(false);
      });
      (0, _reactNative.act)(function () {
        result.current.startSession();
        jest.advanceTimersByTime(59000);
      });
      var sessionResult = yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        return yield result.current.endSession();
      }));
      expect(sessionResult.success).toBe(false);
      expect(sessionResult.reason).toBe('Session too short');
      expect(result.current.todayMinutes).toBe(0);
      expect(_asyncStorage.default.setItem).not.toHaveBeenCalled();
    }));
    it('devrait ignorer une session de 0 minute', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook16 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook16.result;
      yield (0, _reactNative.waitFor)(function () {
        return expect(result.current.isLoading).toBe(false);
      });
      (0, _reactNative.act)(function () {
        result.current.startSession();
      });
      var sessionResult = yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        return yield result.current.endSession();
      }));
      expect(sessionResult.success).toBe(false);
      expect(sessionResult.reason).toBe('Session too short');
      expect(result.current.todayMinutes).toBe(0);
    }));
    it('devrait r√©initialiser le streak si la derni√®re activit√© est nulle', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        current_streak: '5',
        last_activity_date: null,
        today_minutes: '1'
      });
      var _renderHook17 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook17.result;
      yield (0, _reactNative.waitFor)(function () {
        return expect(result.current.isLoading).toBe(false);
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.updateStreak();
      }));
      expect(result.current.currentStreak).toBe(1);
    }));
  });
  describe('Autres tests de logique', function () {
    it('devrait retourner les bonnes tendances de streak pour toutes les cat√©gories', (0, _asyncToGenerator2.default)(function* () {
      var testCases = [{
        streak: '0',
        trend: null
      }, {
        streak: '1',
        trend: 'üî• Continue!'
      }, {
        streak: '2',
        trend: 'üî• Continue!'
      }, {
        streak: '3',
        trend: 'üí™ En forme!'
      }, {
        streak: '6',
        trend: 'üí™ En forme!'
      }, {
        streak: '7',
        trend: 'üèÜ Incroyable!'
      }, {
        streak: '13',
        trend: 'üèÜ Incroyable!'
      }, {
        streak: '14',
        trend: 'üíé Exceptionnel!'
      }, {
        streak: '29',
        trend: 'üíé Exceptionnel!'
      }, {
        streak: '30',
        trend: 'üèÜ L√©gendaire!'
      }, {
        streak: '100',
        trend: 'üèÜ L√©gendaire!'
      }];
      var _loop = function* _loop() {
        setupMocks({
          current_streak: streak
        });
        var _renderHook18 = (0, _reactNative.renderHook)(function () {
            return (0, _useActivityMetrics.default)();
          }),
          result = _renderHook18.result;
        yield (0, _reactNative.waitFor)(function () {
          return expect(result.current.isLoading).toBe(false);
        });
        expect(result.current.streakTrend).toBe(trend);
      };
      for (var _ref28 of testCases) {
        var streak = _ref28.streak;
        var trend = _ref28.trend;
        yield* _loop();
      }
    }));
    it('devrait formater 0 minute en "0min"', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        today_minutes: '0'
      });
      var _renderHook19 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook19.result;
      yield (0, _reactNative.waitFor)(function () {
        return expect(result.current.isLoading).toBe(false);
      });
      expect(result.current.formattedTime).toBe('0min');
    }));
    it('devrait ne pas mettre a jour le streak si 0 minutes d activite aujourd hui', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        today_minutes: '0',
        last_activity_date: YESTERDAY.toDateString()
      });
      var _renderHook20 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook20.result;
      yield (0, _reactNative.waitFor)(function () {
        return expect(result.current.isLoading).toBe(false);
      });
      var streakResult = yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        return yield result.current.updateStreak();
      }));
      expect(streakResult.success).toBe(true);
      expect(streakResult.reason).toBe('No activity today to update streak');
      expect(result.current.currentStreak).toBe(0);
      expect(_asyncStorage.default.setItem).not.toHaveBeenCalledWith('current_streak', expect.any(String));
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,