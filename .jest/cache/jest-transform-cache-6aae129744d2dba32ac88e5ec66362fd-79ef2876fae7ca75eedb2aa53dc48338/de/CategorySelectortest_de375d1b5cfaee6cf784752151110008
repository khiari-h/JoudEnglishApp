fc1a7eaca85417b2d327a810a768803c
var createMockAnimatedValue = function createMockAnimatedValue() {
  var initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var mockValue = {
    interpolate: jest.fn(function () {
      return {
        __getValue: function __getValue() {
          return initialValue;
        }
      };
    }),
    setValue: jest.fn(),
    addListener: jest.fn(),
    removeListener: jest.fn(),
    removeAllListeners: jest.fn(),
    stopAnimation: jest.fn(),
    resetAnimation: jest.fn(),
    _value: initialValue,
    _offset: 0,
    _animation: null
  };
  return mockValue;
};
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  return Object.assign({}, RN, {
    Animated: Object.assign({}, RN.Animated, {
      Value: jest.fn(function (initialValue) {
        return createMockAnimatedValue(initialValue);
      }),
      timing: mockAnimatedTiming,
      parallel: mockAnimatedParallel,
      View: function View(_ref) {
        var children = _ref.children,
          style = _ref.style,
          props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
        return (0, _jsxRuntime.jsx)(RN.View, Object.assign({
          style: style
        }, props, {
          testID: props.testID,
          children: children
        }));
      }
    }),
    View: RN.View,
    Text: RN.Text,
    TouchableOpacity: function TouchableOpacity(_ref2) {
      var children = _ref2.children,
        onPress = _ref2.onPress,
        props = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
      return (0, _jsxRuntime.jsx)(RN.TouchableOpacity, Object.assign({
        onPress: onPress
      }, props, {
        children: children
      }));
    },
    ScrollView: function ScrollView(_ref3) {
      var children = _ref3.children,
        props = (0, _objectWithoutProperties2.default)(_ref3, _excluded3);
      return (0, _jsxRuntime.jsx)(RN.ScrollView, Object.assign({}, props, {
        children: children
      }));
    }
  });
});
_getJestObj().mock('expo-linear-gradient', function () {
  var _require = require('react-native'),
    View = _require.View;
  return {
    LinearGradient: function LinearGradient(_ref4) {
      var children = _ref4.children,
        props = (0, _objectWithoutProperties2.default)(_ref4, _excluded4);
      return (0, _jsxRuntime.jsx)(View, Object.assign({}, props, {
        children: children
      }));
    }
  };
});
_getJestObj().mock('../../../src/components/exercise-common/CategorySelector/style', function () {
  var _require2 = require('react-native'),
    StyleSheet = _require2.StyleSheet;
  return function () {
    return StyleSheet.create({
      container: {
        flex: 1
      },
      backgroundGradient: {
        flex: 1
      },
      scrollView: {
        flexGrow: 0
      },
      scrollContent: {
        paddingHorizontal: 16
      },
      categoryItemWrapper: {
        marginHorizontal: 6
      },
      categoryTouchable: {
        borderRadius: 25
      },
      selectedCategoryItem: {
        paddingHorizontal: 20,
        paddingVertical: 12,
        borderRadius: 25
      },
      selectedInner: {
        flexDirection: 'row',
        alignItems: 'center'
      },
      selectedCategoryText: {
        fontSize: 14,
        fontWeight: '600',
        color: '#FFFFFF'
      },
      sparkleContainer: {
        marginLeft: 8
      },
      sparkle: {
        fontSize: 12
      },
      categoryItem: {
        paddingHorizontal: 20,
        paddingVertical: 12,
        borderRadius: 25,
        backgroundColor: 'rgba(255,255,255,0.1)'
      },
      categoryInner: {
        alignItems: 'center'
      },
      categoryText: {
        fontSize: 14,
        fontWeight: '500'
      }
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _CategorySelector = _interopRequireWildcard(require("../../../src/components/exercise-common/CategorySelector"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "style"],
  _excluded2 = ["children", "onPress"],
  _excluded3 = ["children"],
  _excluded4 = ["children"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockStart = jest.fn(function (callback) {
  setTimeout(function () {
    return callback && callback();
  }, 0);
});
var mockAnimatedTiming = jest.fn(function () {
  return {
    start: mockStart
  };
});
var mockAnimatedParallel = jest.fn(function (animations) {
  return {
    start: mockStart
  };
});
describe('CategorySelector', function () {
  var categories = [{
    id: '1',
    name: 'Grammar'
  }, {
    id: '2',
    name: 'Vocabulary'
  }, {
    id: '3',
    name: 'Reading'
  }];
  beforeEach(function () {
    jest.clearAllMocks();
  });
  afterEach(function () {
    jest.clearAllTimers();
  });
  it('should render all categories correctly with minimum props', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories
      })),
      getByText = _render.getByText;
    expect(getByText('Grammar')).toBeTruthy();
    expect(getByText('Vocabulary')).toBeTruthy();
    expect(getByText('Reading')).toBeTruthy();
  });
  it('should render nothing when the categories array is empty', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: []
      })),
      queryByText = _render2.queryByText;
    expect(queryByText('Grammar')).toBeNull();
  });
  it('should display the selected category with the sparkle emoji', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: function onSelectCategory() {}
      })),
      getByText = _render3.getByText;
    expect(getByText('âœ¨')).toBeTruthy();
  });
  it('should call onSelectCategory with the correct category id when a category is pressed', function () {
    var onSelectCategory = jest.fn();
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        onSelectCategory: onSelectCategory
      })),
      getByText = _render4.getByText;
    _reactNative.fireEvent.press(getByText('Vocabulary'));
    expect(onSelectCategory).toHaveBeenCalledWith('2');
  });
  it('should deselect the previous category when a new one is selected and trigger animations', (0, _asyncToGenerator2.default)(function* () {
    var onSelectCategory = jest.fn();
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: onSelectCategory
      })),
      getByText = _render5.getByText,
      rerender = _render5.rerender;
    mockStart.mockClear();
    mockAnimatedTiming.mockClear();
    mockAnimatedParallel.mockClear();
    _reactNative.fireEvent.press(getByText('Vocabulary'));
    expect(onSelectCategory).toHaveBeenCalledWith('2');
    rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
      categories: categories,
      selectedCategory: "2",
      onSelectCategory: onSelectCategory
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockAnimatedParallel).toHaveBeenCalledTimes(1);
    });
    expect(mockAnimatedTiming).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({
      toValue: 0,
      duration: 200,
      useNativeDriver: false
    }));
    expect(mockAnimatedTiming).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({
      toValue: 1,
      duration: 300,
      useNativeDriver: false
    }));
  }));
  it('should trigger animations when selectedCategory prop changes', (0, _asyncToGenerator2.default)(function* () {
    var onSelectCategory = jest.fn();
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: onSelectCategory
      })),
      rerender = _render6.rerender;
    mockAnimatedParallel.mockClear();
    mockAnimatedTiming.mockClear();
    rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
      categories: categories,
      selectedCategory: "2",
      onSelectCategory: onSelectCategory
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockAnimatedParallel).toHaveBeenCalledTimes(1);
    });
  }));
  describe('areEqual', function () {
    it('should return true for identical props', function () {
      var props = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: [{
          id: '1',
          name: 'Cat1'
        }]
      };
      var result = (0, _CategorySelector.areEqual)(props, props);
      expect(result).toBe(true);
    });
    it('should return false when selectedCategory changes', function () {
      var prevProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: []
      };
      var nextProps = {
        selectedCategory: '2',
        primaryColor: '#000',
        categories: []
      };
      var result = (0, _CategorySelector.areEqual)(prevProps, nextProps);
      expect(result).toBe(false);
    });
    it('should return false when primaryColor changes', function () {
      var prevProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: []
      };
      var nextProps = {
        selectedCategory: '1',
        primaryColor: '#111',
        categories: []
      };
      var result = (0, _CategorySelector.areEqual)(prevProps, nextProps);
      expect(result).toBe(false);
    });
    it('should return false when categories array reference changes', function () {
      var categories1 = [{
        id: '1',
        name: 'Cat1'
      }];
      var categories2 = [{
        id: '1',
        name: 'Cat1'
      }];
      var prevProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: categories1
      };
      var nextProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: categories2
      };
      var result = (0, _CategorySelector.areEqual)(prevProps, nextProps);
      expect(result).toBe(false);
    });
    it('should return true when only a category name changes but the array reference is the same', function () {
      var categoriesList = [{
        id: '1',
        name: 'Cat1'
      }];
      var prevProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: categoriesList
      };
      var nextProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: categoriesList
      };
      var result = (0, _CategorySelector.areEqual)(prevProps, nextProps);
      expect(result).toBe(true);
    });
    it('should return true for undefined selectedCategory', function () {
      var prevProps = {
        selectedCategory: undefined,
        primaryColor: '#000',
        categories: []
      };
      var nextProps = {
        selectedCategory: undefined,
        primaryColor: '#000',
        categories: []
      };
      var result = (0, _CategorySelector.areEqual)(prevProps, nextProps);
      expect(result).toBe(true);
    });
  });
  describe('Edge cases', function () {
    it('should handle empty categories gracefully', function () {
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: [],
          onSelectCategory: function onSelectCategory() {}
        })),
        container = _render7.container;
      expect(container).toBeTruthy();
    });
    it('should handle undefined selectedCategory', function () {
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: undefined,
          onSelectCategory: function onSelectCategory() {}
        })),
        getByText = _render8.getByText;
      expect(getByText('Grammar')).toBeTruthy();
    });
    it('should not crash when selecting non-existent category', function () {
      var onSelectCategory = jest.fn();
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "999",
          onSelectCategory: onSelectCategory
        })),
        getByText = _render9.getByText;
      _reactNative.fireEvent.press(getByText('Grammar'));
      expect(onSelectCategory).toHaveBeenCalledWith('1');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,