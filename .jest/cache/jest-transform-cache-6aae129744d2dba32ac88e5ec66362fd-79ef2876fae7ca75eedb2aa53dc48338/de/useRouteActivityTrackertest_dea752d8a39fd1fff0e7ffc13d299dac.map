{"version":3,"names":["_getJestObj","mock","useSegments","jest","fn","usePathname","__esModule","default","startSession","endSession","updateStreak","_interopRequireDefault","require","_asyncToGenerator2","_reactNative","_useRouteActivityTracker","_require1","describe","beforeEach","clearAllMocks","it","mockStartSession","useActivityMetrics","mockReturnValue","_require","renderHook","useRouteActivityTracker","expect","toHaveBeenCalledWith","mockEndSession","mockUpdateStreak","_require2","toHaveBeenCalledTimes","mockImplementation","Error","_require3","not","toThrow","_require4","hook","rerender","_require5","Promise","resolve","setTimeout","mockClear","unmount","_require6","_require7","_require8","_require9","toHaveBeenCalled","_require0"],"sources":["useRouteActivityTracker.test.js"],"sourcesContent":["// __tests__/hooks/useRouteActivityTracker.test.js\nimport { renderHook } from '@testing-library/react-native';\nimport useRouteActivityTracker from '../../src/hooks/useRouteActivityTracker';\n\njest.mock('expo-router', () => ({\n  useSegments: jest.fn(() => []),\n  usePathname: jest.fn(() => '/'),\n}));\n\njest.mock('../../src/hooks/useActivityMetrics', () => ({\n  __esModule: true,\n  default: jest.fn(() => ({\n    startSession: jest.fn(),\n    endSession: jest.fn(),\n    updateStreak: jest.fn(),\n  })),\n}));\n\ndescribe('useRouteActivityTracker', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Fonctions utilitaires extraites', () => {\n    it('devrait détecter correctement les exercices', () => {\n      const mockStartSession = jest.fn();\n      const useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;\n      useActivityMetrics.mockReturnValue({\n        startSession: mockStartSession,\n        endSession: jest.fn(),\n        updateStreak: jest.fn(),\n      });\n\n      const { useSegments } = require('expo-router');\n      \n      // Test avec différents types d'exercices\n      useSegments.mockReturnValue(['level', 'VocabularyExercise']);\n      renderHook(() => useRouteActivityTracker());\n      expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');\n\n      jest.clearAllMocks();\n      \n      useSegments.mockReturnValue(['level', 'GrammarExercise']);\n      renderHook(() => useRouteActivityTracker());\n      expect(mockStartSession).toHaveBeenCalledWith('GrammarExercise');\n\n      jest.clearAllMocks();\n      \n      useSegments.mockReturnValue(['level', 'Assessment']);\n      renderHook(() => useRouteActivityTracker());\n      expect(mockStartSession).toHaveBeenCalledWith('Assessment');\n    });\n\n    it('devrait gérer les transitions entre exercices', () => {\n      const mockStartSession = jest.fn();\n      const mockEndSession = jest.fn();\n      const mockUpdateStreak = jest.fn();\n      \n      const useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;\n      useActivityMetrics.mockReturnValue({\n        startSession: mockStartSession,\n        endSession: mockEndSession,\n        updateStreak: mockUpdateStreak,\n      });\n\n      const { useSegments, usePathname } = require('expo-router');\n      \n      // Premier exercice\n      useSegments.mockReturnValue(['level', 'VocabularyExercise']);\n      usePathname.mockReturnValue('/level/VocabularyExercise');\n      renderHook(() => useRouteActivityTracker());\n      \n      expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');\n      expect(mockStartSession).toHaveBeenCalledTimes(1);\n\n      // Nettoyer les mocks pour le test suivant\n      jest.clearAllMocks();\n      \n      // Deuxième exercice (nouveau hook, nouvelle instance)\n      useSegments.mockReturnValue(['level', 'GrammarExercise']);\n      usePathname.mockReturnValue('/level/GrammarExercise');\n      renderHook(() => useRouteActivityTracker());\n      \n      expect(mockStartSession).toHaveBeenCalledWith('GrammarExercise');\n      expect(mockStartSession).toHaveBeenCalledTimes(1);\n    });\n\n    it('devrait gérer les erreurs de session gracieusement', () => {\n      const mockStartSession = jest.fn().mockImplementation(() => {\n        throw new Error('Erreur de session');\n      });\n      const mockEndSession = jest.fn();\n      const mockUpdateStreak = jest.fn();\n      \n      const useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;\n      useActivityMetrics.mockReturnValue({\n        startSession: mockStartSession,\n        endSession: mockEndSession,\n        updateStreak: mockUpdateStreak,\n      });\n\n      const { useSegments, usePathname } = require('expo-router');\n      useSegments.mockReturnValue(['level', 'VocabularyExercise']);\n      usePathname.mockReturnValue('/level/VocabularyExercise');\n\n      // Ne devrait pas planter malgré l'erreur\n      expect(() => {\n        renderHook(() => useRouteActivityTracker());\n      }).not.toThrow();\n    });\n\n    it('devrait éviter les re-déclenchements inutiles', () => {\n      const mockStartSession = jest.fn();\n      const useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;\n      useActivityMetrics.mockReturnValue({\n        startSession: mockStartSession,\n        endSession: jest.fn(),\n        updateStreak: jest.fn(),\n      });\n\n      const { useSegments, usePathname } = require('expo-router');\n      useSegments.mockReturnValue(['level', 'VocabularyExercise']);\n      usePathname.mockReturnValue('/level/VocabularyExercise');\n\n      // Premier rendu\n      const hook = renderHook(() => useRouteActivityTracker());\n      expect(mockStartSession).toHaveBeenCalledTimes(1);\n\n      // Même pathname, ne devrait pas redémarrer (même instance)\n      // Simuler un changement de segments mais même pathname\n      useSegments.mockReturnValue(['level', 'VocabularyExercise']);\n      usePathname.mockReturnValue('/level/VocabularyExercise');\n      \n      // Forcer un re-render\n      hook.rerender();\n      \n      // Devrait toujours être 1 car même pathname\n      expect(mockStartSession).toHaveBeenCalledTimes(1);\n    });\n\n    it('devrait nettoyer correctement lors du démontage', async () => {\n      const mockStartSession = jest.fn();\n      const mockEndSession = jest.fn();\n      const mockUpdateStreak = jest.fn();\n      \n      const useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;\n      \n      // S'assurer que le mock est bien configuré AVANT le renderHook\n      useActivityMetrics.mockReturnValue({\n        startSession: mockStartSession,\n        endSession: mockEndSession,\n        updateStreak: mockUpdateStreak,\n      });\n    \n      const { useSegments, usePathname } = require('expo-router');\n      useSegments.mockReturnValue(['level', 'VocabularyExercise']);\n      usePathname.mockReturnValue('/level/VocabularyExercise');\n    \n      // Démarrer une session\n      const hook = renderHook(() => useRouteActivityTracker());\n      \n      // Vérifier que startSession a été appelé\n      expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');\n      \n      // Attendre un tick pour s'assurer que l'état interne est mis à jour\n      await new Promise(resolve => setTimeout(resolve, 0));\n      \n      // Reset les mocks pour isoler les appels du démontage\n      mockEndSession.mockClear();\n      \n      // Simuler le démontage\n      hook.unmount();\n      \n      // Vérifier que endSession a été appelé lors du démontage\n      expect(mockEndSession).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  it('devrait s\\'initialiser sans erreur', () => {\n    const { useSegments, usePathname } = require('expo-router');\n    useSegments.mockReturnValue(['home']);\n    usePathname.mockReturnValue('/home');\n\n    expect(() => {\n      renderHook(() => useRouteActivityTracker());\n    }).not.toThrow();\n  });\n\n  it('devrait détecter un exercice de vocabulaire', () => {\n    const mockStartSession = jest.fn();\n    const useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;\n    useActivityMetrics.mockReturnValue({\n      startSession: mockStartSession,\n      endSession: jest.fn(),\n      updateStreak: jest.fn(),\n    });\n\n    const { useSegments, usePathname } = require('expo-router');\n    useSegments.mockReturnValue(['level', 'VocabularyExercise']);\n    usePathname.mockReturnValue('/level/VocabularyExercise');\n\n    renderHook(() => useRouteActivityTracker());\n\n    expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');\n  });\n\n  it('devrait détecter un assessment', () => {\n    const mockStartSession = jest.fn();\n    const useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;\n    useActivityMetrics.mockReturnValue({\n      startSession: mockStartSession,\n      endSession: jest.fn(),\n      updateStreak: jest.fn(),\n    });\n\n    const { useSegments, usePathname } = require('expo-router');\n    useSegments.mockReturnValue(['level', 'Assessment']);\n    usePathname.mockReturnValue('/level/Assessment');\n\n    renderHook(() => useRouteActivityTracker());\n\n    expect(mockStartSession).toHaveBeenCalledWith('Assessment');\n  });\n\n  it('ne devrait pas démarrer de session pour une page normale', () => {\n    const mockStartSession = jest.fn();\n    const useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;\n    useActivityMetrics.mockReturnValue({\n      startSession: mockStartSession,\n      endSession: jest.fn(),\n      updateStreak: jest.fn(),\n    });\n\n    const { useSegments, usePathname } = require('expo-router');\n    useSegments.mockReturnValue(['home', 'dashboard']);\n    usePathname.mockReturnValue('/home/dashboard');\n\n    renderHook(() => useRouteActivityTracker());\n\n    expect(mockStartSession).not.toHaveBeenCalled();\n  });\n\n  it('devrait gérer les segments vides', () => {\n    const mockStartSession = jest.fn();\n    const useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;\n    useActivityMetrics.mockReturnValue({\n      startSession: mockStartSession,\n      endSession: jest.fn(),\n      updateStreak: jest.fn(),\n    });\n\n    const { useSegments, usePathname } = require('expo-router');\n    useSegments.mockReturnValue([]);\n    usePathname.mockReturnValue('/');\n\n    expect(() => {\n      renderHook(() => useRouteActivityTracker());\n    }).not.toThrow();\n\n    expect(mockStartSession).not.toHaveBeenCalled();\n  });\n});"],"mappings":"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","ignoreList":[]}