1e9333c93307263f48047d562d95c417
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _RevisionOrchestrator = _interopRequireDefault(require("../../../src/screens/VocabularyRevision/RevisionOrchestrator"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _expoRouter = require("expo-router");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('RevisionOrchestrator', function () {
  it('renders nothing if revisions are disabled', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      queryByTestId = _render.queryByTestId;
    yield (0, _reactNative.waitFor)(function () {
      return expect(_asyncStorage.default.getItem).toHaveBeenCalled();
    });
    expect(queryByTestId('revision-popup')).toBeNull();
  }));
  it('does not show popup if word count is below threshold', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      queryByTestId = _render2.queryByTestId;
    yield (0, _reactNative.waitFor)(function () {
      return expect(_asyncStorage.default.getItem).toHaveBeenCalled();
    });
    expect(queryByTestId('revision-popup')).toBeNull();
  }));
  it('shows the popup when word count reaches the threshold', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      getByTestId = _render3.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      return expect(_asyncStorage.default.getItem).toHaveBeenCalled();
    });
    var popup = getByTestId('revision-popup');
    expect(popup).toBeTruthy();
  }));
  it('calls resetToNextTarget and navigates when "now" is chosen', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      getByTestId = _render4.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      return expect(_asyncStorage.default.getItem).toHaveBeenCalled();
    });
    var nowButton = getByTestId('popup-now');
    _reactNative.fireEvent.press(nowButton);
    yield (0, _reactNative.waitFor)(function () {
      return expect(_expoRouter.router.push).toHaveBeenCalledTimes(1);
    });
  }));
  it('calls updatePreferences when "later_50" is chosen', (0, _asyncToGenerator2.default)(function* () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      getByTestId = _render5.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      return expect(_asyncStorage.default.getItem).toHaveBeenCalled();
    });
    var laterButton = getByTestId('popup-later50');
    _reactNative.fireEvent.press(laterButton);
    yield (0, _reactNative.waitFor)(function () {
      return expect(_asyncStorage.default.setItem).toHaveBeenCalledTimes(1);
    });
  }));
  it('calls disableRevisions when "disable" is chosen', (0, _asyncToGenerator2.default)(function* () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      getByTestId = _render6.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      return expect(_asyncStorage.default.getItem).toHaveBeenCalled();
    });
    var disableButton = getByTestId('popup-disable');
    _reactNative.fireEvent.press(disableButton);
    yield (0, _reactNative.waitFor)(function () {
      return expect(_asyncStorage.default.setItem).toHaveBeenCalledTimes(1);
    });
  }));
  it('handles dismiss by defaulting to "later_50"', (0, _asyncToGenerator2.default)(function* () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      getByTestId = _render7.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      return expect(_asyncStorage.default.getItem).toHaveBeenCalled();
    });
    var dismissButton = getByTestId('popup-dismiss');
    _reactNative.fireEvent.press(dismissButton);
    yield (0, _reactNative.waitFor)(function () {
      return expect(_asyncStorage.default.setItem).toHaveBeenCalledTimes(1);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,