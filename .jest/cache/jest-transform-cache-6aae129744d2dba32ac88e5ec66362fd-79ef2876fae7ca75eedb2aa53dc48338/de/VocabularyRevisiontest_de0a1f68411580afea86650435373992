7bc158e828db826a70c1e2998f2bc3eb
_getJestObj().mock('../../../src/hooks/useRevisionManager', function () {
  return {
    __esModule: true,
    default: jest.fn(function () {
      return {
        markRevisionCompleted: mockMarkRevisionCompleted
      };
    })
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn(function () {
      return {
        goBack: mockGoBack
      };
    })
  };
});
_getJestObj().mock('../../../src/hooks/useRevisionData', function () {
  return {
    __esModule: true,
    default: jest.fn(function () {
      return {
        revisionQuestions: [],
        isLoading: false,
        error: null,
        stats: {
          totalLearned: 0
        },
        hasEnoughWords: false,
        canGenerateQuestions: false
      };
    })
  };
});
_getJestObj().mock('../../../src/hooks/useQuizEngine', function () {
  return {
    __esModule: true,
    default: jest.fn(function () {
      return {
        currentQuestion: null,
        currentQuestionIndex: 0,
        totalQuestions: 0,
        score: 0,
        isFinished: false,
        showResult: false,
        handleAnswer: jest.fn(function () {
          return true;
        }),
        goToNextQuestion: jest.fn(),
        handleRestart: jest.fn()
      };
    })
  };
});
_getJestObj().mock('../../../src/contexts/ThemeContext', function () {
  return {
    ThemeContext: {
      Consumer: function Consumer(_ref) {
        var children = _ref.children;
        return children({
          colors: {
            background: "#F8FAFC",
            surface: "#FFFFFF",
            text: "#1F2937",
            textSecondary: "#6B7280",
            primary: "#3B82F6"
          }
        });
      },
      useContext: function useContext() {
        return {
          colors: {
            background: "#F8FAFC",
            surface: "#FFFFFF",
            text: "#1F2937",
            textSecondary: "#6B7280",
            primary: "#3B82F6"
          }
        };
      }
    }
  };
});
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  RN.Animated.timing = function (value, config) {
    return {
      start: function start(callback) {
        value.setValue(config.toValue);
        callback && callback();
      }
    };
  };
  return RN;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _VocabularyRevision = _interopRequireDefault(require("../../../src/screens/VocabularyRevision"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockMarkRevisionCompleted = jest.fn();
var mockGoBack = jest.fn();
jest.spyOn(_reactNative2.Dimensions, 'get').mockReturnValue({
  width: 300,
  height: 600
});
describe('VocabularyRevision Integration Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
    require('../../../src/hooks/useRevisionData').default.mockImplementation(function () {
      return {
        revisionQuestions: [],
        isLoading: false,
        error: null,
        stats: {
          totalLearned: 0
        },
        hasEnoughWords: false,
        canGenerateQuestions: false
      };
    });
    require('../../../src/hooks/useQuizEngine').default.mockImplementation(function () {
      return {
        currentQuestion: null,
        currentQuestionIndex: 0,
        totalQuestions: 0,
        score: 0,
        isFinished: false,
        showResult: false,
        handleAnswer: jest.fn(function () {
          return true;
        }),
        goToNextQuestion: jest.fn(),
        handleRestart: jest.fn()
      };
    });
    mockMarkRevisionCompleted.mockClear();
    mockGoBack.mockClear();
  });
  afterEach(function () {
    jest.clearAllTimers();
  });
  test('renders loading state initially', (0, _asyncToGenerator2.default)(function* () {
    require('../../../src/hooks/useRevisionData').default.mockImplementation(function () {
      return {
        isLoading: true,
        revisionQuestions: [],
        error: null,
        stats: {
          totalLearned: 0
        },
        hasEnoughWords: false,
        canGenerateQuestions: false
      };
    });
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {})),
      getByText = _render.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('Récupération de vos mots appris')).toBeTruthy();
    });
  }));
  test('renders error state', (0, _asyncToGenerator2.default)(function* () {
    require('../../../src/hooks/useRevisionData').default.mockImplementation(function () {
      return {
        isLoading: false,
        error: 'Failed to load data',
        revisionQuestions: [],
        stats: {
          totalLearned: 0
        },
        hasEnoughWords: false,
        canGenerateQuestions: false
      };
    });
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {})),
      getByText = _render2.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('Failed to load data')).toBeTruthy();
    });
  }));
  test('renders locked state when not enough words', (0, _asyncToGenerator2.default)(function* () {
    require('../../../src/hooks/useRevisionData').default.mockImplementation(function () {
      return {
        isLoading: false,
        error: null,
        revisionQuestions: [],
        stats: {
          totalLearned: 30
        },
        hasEnoughWords: false,
        canGenerateQuestions: false
      };
    });
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {})),
      getByText = _render3.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText(/Apprenez 50 mots pour débloquer le mode révision et tester vos connaissances !/i)).toBeTruthy();
      expect(getByText('30 / 50')).toBeTruthy();
    });
  }));
  test('renders noWords state when enough words but cannot generate questions', (0, _asyncToGenerator2.default)(function* () {
    require('../../../src/hooks/useRevisionData').default.mockImplementation(function () {
      return {
        isLoading: false,
        error: null,
        revisionQuestions: [],
        stats: {
          totalLearned: 60
        },
        hasEnoughWords: true,
        canGenerateQuestions: false
      };
    });
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {
        route: {
          params: {
            questionsCount: 10
          }
        }
      })),
      getByText = _render4.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText(/Continuez d'apprendre pour diversifier les questions !/i)).toBeTruthy();
      expect(getByText(/Un quiz de 10 questions ne peut pas être généré pour ce niveau./i)).toBeTruthy();
    });
  }));
  test('renders QuizScreen and handles answer and continue', (0, _asyncToGenerator2.default)(function* () {
    var mockQuestions = [{
      id: 'q1',
      word: 'Word 1',
      choices: ['A', 'B', 'C'],
      correctAnswer: 'A'
    }, {
      id: 'q2',
      word: 'Word 2',
      choices: ['D', 'E', 'F'],
      correctAnswer: 'D'
    }];
    var useRevisionDataMock = require('../../../src/hooks/useRevisionData').default;
    useRevisionDataMock.mockImplementation(function () {
      return {
        revisionQuestions: mockQuestions,
        isLoading: false,
        error: null,
        stats: {
          totalLearned: 100
        },
        hasEnoughWords: true,
        canGenerateQuestions: true
      };
    });
    var useQuizEngineMock = require('../../../src/hooks/useQuizEngine').default;
    var mockGoToNextQuestion = jest.fn();
    useQuizEngineMock.mockImplementationOnce(function () {
      return {
        currentQuestion: mockQuestions[0],
        currentQuestionIndex: 0,
        totalQuestions: mockQuestions.length,
        score: 0,
        isFinished: false,
        showResult: false,
        handleAnswer: jest.fn(function () {
          return true;
        }),
        goToNextQuestion: mockGoToNextQuestion,
        handleRestart: jest.fn()
      };
    }).mockImplementation(function () {
      return {
        currentQuestion: mockQuestions[0],
        currentQuestionIndex: 0,
        totalQuestions: mockQuestions.length,
        score: 1,
        isFinished: false,
        showResult: true,
        handleAnswer: jest.fn(function () {
          return true;
        }),
        goToNextQuestion: mockGoToNextQuestion,
        handleRestart: jest.fn()
      };
    });
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {})),
      getByText = _render5.getByText,
      queryByText = _render5.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('Word 1')).toBeTruthy();
      expect(queryByText('Result Screen')).toBeNull();
    });
    _reactNative.fireEvent.press(getByText('A'));
    jest.runOnlyPendingTimers();
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('Continuer')).toBeTruthy();
    });
    _reactNative.fireEvent.press(getByText('Continuer'));
    expect(mockGoToNextQuestion).toHaveBeenCalled();
  }));
  test('renders ResultScreen when quiz is finished', (0, _asyncToGenerator2.default)(function* () {
    var mockQuestions = [{
      id: 'q1',
      word: 'Word 1',
      choices: ['A', 'B', 'C'],
      correctAnswer: 'A'
    }];
    require('../../../src/hooks/useRevisionData').default.mockImplementation(function () {
      return {
        revisionQuestions: mockQuestions,
        isLoading: false,
        error: null,
        stats: {
          totalLearned: 100
        },
        hasEnoughWords: true,
        canGenerateQuestions: true
      };
    });
    var useQuizEngineMock = require('../../../src/hooks/useQuizEngine').default;
    useQuizEngineMock.mockImplementation(function () {
      return {
        currentQuestion: null,
        currentQuestionIndex: 1,
        totalQuestions: mockQuestions.length,
        score: 1,
        isFinished: true,
        showResult: true,
        handleAnswer: jest.fn(),
        goToNextQuestion: jest.fn(),
        handleRestart: jest.fn()
      };
    });
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {})),
      getByText = _render6.getByText,
      findByText = _render6.findByText;
    yield findByText('1');
    expect(getByText('/1')).toBeTruthy();
    expect(getByText('Rejouer')).toBeTruthy();
    expect(getByText('Terminer')).toBeTruthy();
  }));
  test('handles restart from ResultScreen', (0, _asyncToGenerator2.default)(function* () {
    var mockQuestions = [{
      id: 'q1',
      word: 'Word 1',
      choices: ['A', 'B', 'C'],
      correctAnswer: 'A'
    }];
    require('../../../src/hooks/useRevisionData').default.mockImplementation(function () {
      return {
        revisionQuestions: mockQuestions,
        isLoading: false,
        error: null,
        stats: {
          totalLearned: 100
        },
        hasEnoughWords: true,
        canGenerateQuestions: true
      };
    });
    var useQuizEngineMock = require('../../../src/hooks/useQuizEngine').default;
    var mockHandleRestart = jest.fn();
    useQuizEngineMock.mockImplementation(function () {
      return {
        currentQuestion: null,
        currentQuestionIndex: 1,
        totalQuestions: mockQuestions.length,
        score: 1,
        isFinished: true,
        showResult: true,
        handleAnswer: jest.fn(),
        goToNextQuestion: jest.fn(),
        handleRestart: mockHandleRestart
      };
    });
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {})),
      getByText = _render7.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('Rejouer')).toBeTruthy();
    });
    _reactNative.fireEvent.press(getByText('Rejouer'));
    expect(mockHandleRestart).toHaveBeenCalled();
  }));
  test('handles finish from ResultScreen', (0, _asyncToGenerator2.default)(function* () {
    var mockQuestions = [{
      id: 'q1',
      word: 'Word 1',
      choices: ['A', 'B', 'C'],
      correctAnswer: 'A'
    }];
    require('../../../src/hooks/useRevisionData').default.mockImplementation(function () {
      return {
        revisionQuestions: mockQuestions,
        isLoading: false,
        error: null,
        stats: {
          totalLearned: 100
        },
        hasEnoughWords: true,
        canGenerateQuestions: true
      };
    });
    var useQuizEngineMock = require('../../../src/hooks/useQuizEngine').default;
    useQuizEngineMock.mockImplementation(function () {
      return {
        currentQuestion: null,
        currentQuestionIndex: 1,
        totalQuestions: mockQuestions.length,
        score: 1,
        isFinished: true,
        showResult: true,
        handleAnswer: jest.fn(),
        goToNextQuestion: jest.fn(),
        handleRestart: jest.fn()
      };
    });
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {})),
      getByText = _render8.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('Terminer')).toBeTruthy();
    });
    _reactNative.fireEvent.press(getByText('Terminer'));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockMarkRevisionCompleted).toHaveBeenCalledWith(mockQuestions, 1, 1);
      expect(mockGoBack).toHaveBeenCalled();
    });
  }));
  test('handleGoBack is called when back button is pressed in QuizScreen', (0, _asyncToGenerator2.default)(function* () {
    var mockQuestions = [{
      id: 'q1',
      word: 'Word 1',
      choices: ['A', 'B', 'C'],
      correctAnswer: 'A'
    }];
    require('../../../src/hooks/useRevisionData').default.mockImplementation(function () {
      return {
        revisionQuestions: mockQuestions,
        isLoading: false,
        error: null,
        stats: {
          totalLearned: 100
        },
        hasEnoughWords: true,
        canGenerateQuestions: true
      };
    });
    var useQuizEngineMock = require('../../../src/hooks/useQuizEngine').default;
    useQuizEngineMock.mockImplementation(function () {
      return {
        currentQuestion: mockQuestions[0],
        currentQuestionIndex: 0,
        totalQuestions: mockQuestions.length,
        score: 0,
        isFinished: false,
        showResult: false,
        handleAnswer: jest.fn(),
        goToNextQuestion: jest.fn(),
        handleRestart: jest.fn()
      };
    });
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {})),
      getByLabelText = _render9.getByLabelText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByLabelText('Retour')).toBeTruthy();
    });
    _reactNative.fireEvent.press(getByLabelText('Retour'));
    expect(mockGoBack).toHaveBeenCalled();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImplc3QiLCJmbiIsIm1hcmtSZXZpc2lvbkNvbXBsZXRlZCIsIm1vY2tNYXJrUmV2aXNpb25Db21wbGV0ZWQiLCJ1c2VOYXZpZ2F0aW9uIiwiZ29CYWNrIiwibW9ja0dvQmFjayIsInJldmlzaW9uUXVlc3Rpb25zIiwiaXNMb2FkaW5nIiwiZXJyb3IiLCJzdGF0cyIsInRvdGFsTGVhcm5lZCIsImhhc0Vub3VnaFdvcmRzIiwiY2FuR2VuZXJhdGVRdWVzdGlvbnMiLCJjdXJyZW50UXVlc3Rpb24iLCJjdXJyZW50UXVlc3Rpb25JbmRleCIsInRvdGFsUXVlc3Rpb25zIiwic2NvcmUiLCJpc0ZpbmlzaGVkIiwic2hvd1Jlc3VsdCIsImhhbmRsZUFuc3dlciIsImdvVG9OZXh0UXVlc3Rpb24iLCJoYW5kbGVSZXN0YXJ0IiwiVGhlbWVDb250ZXh0IiwiQ29uc3VtZXIiLCJfcmVmIiwiY2hpbGRyZW4iLCJjb2xvcnMiLCJiYWNrZ3JvdW5kIiwic3VyZmFjZSIsInRleHQiLCJ0ZXh0U2Vjb25kYXJ5IiwicHJpbWFyeSIsInVzZUNvbnRleHQiLCJSTiIsInJlcXVpcmVBY3R1YWwiLCJBbmltYXRlZCIsInRpbWluZyIsInZhbHVlIiwiY29uZmlnIiwic3RhcnQiLCJjYWxsYmFjayIsInNldFZhbHVlIiwidG9WYWx1ZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX3JlYWN0IiwiX3JlYWN0TmF0aXZlIiwiX3JlYWN0TmF0aXZlMiIsIl9Wb2NhYnVsYXJ5UmV2aXNpb24iLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwic3B5T24iLCJEaW1lbnNpb25zIiwibW9ja1JldHVyblZhbHVlIiwid2lkdGgiLCJoZWlnaHQiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwidXNlRmFrZVRpbWVycyIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsIm1vY2tDbGVhciIsImFmdGVyRWFjaCIsImNsZWFyQWxsVGltZXJzIiwidGVzdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJnZXRCeVRleHQiLCJ3YWl0Rm9yIiwiZXhwZWN0IiwidG9CZVRydXRoeSIsIl9yZW5kZXIyIiwiX3JlbmRlcjMiLCJfcmVuZGVyNCIsInJvdXRlIiwicGFyYW1zIiwicXVlc3Rpb25zQ291bnQiLCJtb2NrUXVlc3Rpb25zIiwiaWQiLCJ3b3JkIiwiY2hvaWNlcyIsImNvcnJlY3RBbnN3ZXIiLCJ1c2VSZXZpc2lvbkRhdGFNb2NrIiwidXNlUXVpekVuZ2luZU1vY2siLCJtb2NrR29Ub05leHRRdWVzdGlvbiIsIm1vY2tJbXBsZW1lbnRhdGlvbk9uY2UiLCJsZW5ndGgiLCJfcmVuZGVyNSIsInF1ZXJ5QnlUZXh0IiwidG9CZU51bGwiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInJ1bk9ubHlQZW5kaW5nVGltZXJzIiwidG9IYXZlQmVlbkNhbGxlZCIsIl9yZW5kZXI2IiwiZmluZEJ5VGV4dCIsIm1vY2tIYW5kbGVSZXN0YXJ0IiwiX3JlbmRlcjciLCJfcmVuZGVyOCIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiX3JlbmRlcjkiLCJnZXRCeUxhYmVsVGV4dCJdLCJzb3VyY2VzIjpbIlZvY2FidWxhcnlSZXZpc2lvbi50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIHdhaXRGb3IsIGZpcmVFdmVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IERpbWVuc2lvbnMgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuXG4vLyBTY3JlZW4gdG8gdGVzdFxuaW1wb3J0IFZvY2FidWxhcnlSZXZpc2lvbiBmcm9tICcuLi8uLi8uLi9zcmMvc2NyZWVucy9Wb2NhYnVsYXJ5UmV2aXNpb24nO1xuXG4vLyBNb2NrIGN1c3RvbSBob29rc1xuY29uc3QgbW9ja01hcmtSZXZpc2lvbkNvbXBsZXRlZCA9IGplc3QuZm4oKTtcbmplc3QubW9jaygnLi4vLi4vLi4vc3JjL2hvb2tzL3VzZVJldmlzaW9uTWFuYWdlcicsICgpID0+ICh7XG4gIF9fZXNNb2R1bGU6IHRydWUsXG4gIGRlZmF1bHQ6IGplc3QuZm4oKCkgPT4gKHtcbiAgICBtYXJrUmV2aXNpb25Db21wbGV0ZWQ6IG1vY2tNYXJrUmV2aXNpb25Db21wbGV0ZWQsXG4gIH0pKSxcbn0pKTtcblxuY29uc3QgbW9ja0dvQmFjayA9IGplc3QuZm4oKTsgLy8gTW92ZWQgdG8gdG9wIGxldmVsXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+ICh7XG4gIHVzZU5hdmlnYXRpb246IGplc3QuZm4oKCkgPT4gKHtcbiAgICBnb0JhY2s6IG1vY2tHb0JhY2ssXG4gIH0pKSxcbn0pKTtcblxuamVzdC5tb2NrKCcuLi8uLi8uLi9zcmMvaG9va3MvdXNlUmV2aXNpb25EYXRhJywgKCkgPT4gKHtcbiAgX19lc01vZHVsZTogdHJ1ZSxcbiAgZGVmYXVsdDogamVzdC5mbigoKSA9PiAoe1xuICAgIHJldmlzaW9uUXVlc3Rpb25zOiBbXSxcbiAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgIGVycm9yOiBudWxsLFxuICAgIHN0YXRzOiB7IHRvdGFsTGVhcm5lZDogMCB9LFxuICAgIGhhc0Vub3VnaFdvcmRzOiBmYWxzZSxcbiAgICBjYW5HZW5lcmF0ZVF1ZXN0aW9uczogZmFsc2UsXG4gIH0pKSxcbn0pKTtcblxuamVzdC5tb2NrKCcuLi8uLi8uLi9zcmMvaG9va3MvdXNlUXVpekVuZ2luZScsICgpID0+ICh7XG4gIF9fZXNNb2R1bGU6IHRydWUsXG4gIGRlZmF1bHQ6IGplc3QuZm4oKCkgPT4gKHtcbiAgICBjdXJyZW50UXVlc3Rpb246IG51bGwsXG4gICAgY3VycmVudFF1ZXN0aW9uSW5kZXg6IDAsXG4gICAgdG90YWxRdWVzdGlvbnM6IDAsXG4gICAgc2NvcmU6IDAsXG4gICAgaXNGaW5pc2hlZDogZmFsc2UsXG4gICAgc2hvd1Jlc3VsdDogZmFsc2UsXG4gICAgaGFuZGxlQW5zd2VyOiBqZXN0LmZuKCgpID0+IHRydWUpLFxuICAgIGdvVG9OZXh0UXVlc3Rpb246IGplc3QuZm4oKSxcbiAgICBoYW5kbGVSZXN0YXJ0OiBqZXN0LmZuKCksXG4gIH0pKSxcbn0pKTtcblxuLy8gTW9jayBUaGVtZUNvbnRleHRcbmplc3QubW9jaygnLi4vLi4vLi4vc3JjL2NvbnRleHRzL1RoZW1lQ29udGV4dCcsICgpID0+ICh7XG4gIFRoZW1lQ29udGV4dDoge1xuICAgIENvbnN1bWVyOiAoeyBjaGlsZHJlbiB9KSA9PiBjaGlsZHJlbih7XG4gICAgICBjb2xvcnM6IHtcbiAgICAgICAgYmFja2dyb3VuZDogXCIjRjhGQUZDXCIsXG4gICAgICAgIHN1cmZhY2U6IFwiI0ZGRkZGRlwiLFxuICAgICAgICB0ZXh0OiBcIiMxRjI5MzdcIixcbiAgICAgICAgdGV4dFNlY29uZGFyeTogXCIjNkI3MjgwXCIsXG4gICAgICAgIHByaW1hcnk6IFwiIzNCODJGNlwiXG4gICAgICB9XG4gICAgfSksXG4gICAgdXNlQ29udGV4dDogKCkgPT4gKHtcbiAgICAgIGNvbG9yczoge1xuICAgICAgICBiYWNrZ3JvdW5kOiBcIiNGOEZBRkNcIixcbiAgICAgICAgc3VyZmFjZTogXCIjRkZGRkZGXCIsXG4gICAgICAgIHRleHQ6IFwiIzFGMjkzN1wiLFxuICAgICAgICB0ZXh0U2Vjb25kYXJ5OiBcIiM2QjcyODBcIixcbiAgICAgICAgcHJpbWFyeTogXCIjM0I4MkY2XCJcbiAgICAgIH1cbiAgICB9KSxcbiAgfSxcbn0pKTtcblxuLy8gTW9jayBEaW1lbnNpb25zIGZvciBBbmltYXRlZCB2YWx1ZXNcbmplc3Quc3B5T24oRGltZW5zaW9ucywgJ2dldCcpLm1vY2tSZXR1cm5WYWx1ZSh7IHdpZHRoOiAzMDAsIGhlaWdodDogNjAwIH0pO1xuXG4vLyBNb2NrIEFuaW1hdGVkLnRpbWluZyB0byBpbW1lZGlhdGVseSBzZXQgdmFsdWUgZm9yIHRlc3RzXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZScsICgpID0+IHtcbiAgY29uc3QgUk4gPSBqZXN0LnJlcXVpcmVBY3R1YWwoJ3JlYWN0LW5hdGl2ZScpO1xuICBSTi5BbmltYXRlZC50aW1pbmcgPSAodmFsdWUsIGNvbmZpZykgPT4gKHtcbiAgICBzdGFydDogKGNhbGxiYWNrKSA9PiB7XG4gICAgICB2YWx1ZS5zZXRWYWx1ZShjb25maWcudG9WYWx1ZSk7XG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICAgIH0sXG4gIH0pO1xuICByZXR1cm4gUk47XG59KTtcblxuZGVzY3JpYmUoJ1ZvY2FidWxhcnlSZXZpc2lvbiBJbnRlZ3JhdGlvbiBUZXN0cycsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gICAgamVzdC51c2VGYWtlVGltZXJzKCk7IC8vIFVzZSBmYWtlIHRpbWVyc1xuICAgIC8vIFJlc2V0IG1vY2sgaW1wbGVtZW50YXRpb25zIGZvciBlYWNoIHRlc3RcbiAgICByZXF1aXJlKCcuLi8uLi8uLi9zcmMvaG9va3MvdXNlUmV2aXNpb25EYXRhJykuZGVmYXVsdC5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICAgIHJldmlzaW9uUXVlc3Rpb25zOiBbXSxcbiAgICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgICBlcnJvcjogbnVsbCxcbiAgICAgIHN0YXRzOiB7IHRvdGFsTGVhcm5lZDogMCB9LFxuICAgICAgaGFzRW5vdWdoV29yZHM6IGZhbHNlLFxuICAgICAgY2FuR2VuZXJhdGVRdWVzdGlvbnM6IGZhbHNlLFxuICAgIH0pKTtcbiAgICByZXF1aXJlKCcuLi8uLi8uLi9zcmMvaG9va3MvdXNlUXVpekVuZ2luZScpLmRlZmF1bHQubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gICAgICBjdXJyZW50UXVlc3Rpb246IG51bGwsXG4gICAgICBjdXJyZW50UXVlc3Rpb25JbmRleDogMCxcbiAgICAgIHRvdGFsUXVlc3Rpb25zOiAwLFxuICAgICAgc2NvcmU6IDAsXG4gICAgICBpc0ZpbmlzaGVkOiBmYWxzZSxcbiAgICAgIHNob3dSZXN1bHQ6IGZhbHNlLFxuICAgICAgaGFuZGxlQW5zd2VyOiBqZXN0LmZuKCgpID0+IHRydWUpLFxuICAgICAgZ29Ub05leHRRdWVzdGlvbjogamVzdC5mbigpLFxuICAgICAgaGFuZGxlUmVzdGFydDogamVzdC5mbigpLFxuICAgIH0pKTtcbiAgICBtb2NrTWFya1JldmlzaW9uQ29tcGxldGVkLm1vY2tDbGVhcigpO1xuICAgIG1vY2tHb0JhY2subW9ja0NsZWFyKCk7IC8vIENsZWFyIG1vY2sgZm9yIGVhY2ggdGVzdFxuICB9KTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxUaW1lcnMoKTsgLy8gQ2xlYXIgYWxsIHRpbWVycyBhZnRlciBlYWNoIHRlc3RcbiAgfSk7XG5cbiAgdGVzdCgncmVuZGVycyBsb2FkaW5nIHN0YXRlIGluaXRpYWxseScsIGFzeW5jICgpID0+IHtcbiAgICByZXF1aXJlKCcuLi8uLi8uLi9zcmMvaG9va3MvdXNlUmV2aXNpb25EYXRhJykuZGVmYXVsdC5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICAgIGlzTG9hZGluZzogdHJ1ZSxcbiAgICAgIHJldmlzaW9uUXVlc3Rpb25zOiBbXSxcbiAgICAgIGVycm9yOiBudWxsLFxuICAgICAgc3RhdHM6IHsgdG90YWxMZWFybmVkOiAwIH0sXG4gICAgICBoYXNFbm91Z2hXb3JkczogZmFsc2UsXG4gICAgICBjYW5HZW5lcmF0ZVF1ZXN0aW9uczogZmFsc2UsXG4gICAgfSkpO1xuXG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcig8Vm9jYWJ1bGFyeVJldmlzaW9uIC8+KTtcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChnZXRCeVRleHQoJ1LDqWN1cMOpcmF0aW9uIGRlIHZvcyBtb3RzIGFwcHJpcycpKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3JlbmRlcnMgZXJyb3Igc3RhdGUnLCBhc3luYyAoKSA9PiB7XG4gICAgcmVxdWlyZSgnLi4vLi4vLi4vc3JjL2hvb2tzL3VzZVJldmlzaW9uRGF0YScpLmRlZmF1bHQubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgZXJyb3I6ICdGYWlsZWQgdG8gbG9hZCBkYXRhJyxcbiAgICAgIHJldmlzaW9uUXVlc3Rpb25zOiBbXSxcbiAgICAgIHN0YXRzOiB7IHRvdGFsTGVhcm5lZDogMCB9LFxuICAgICAgaGFzRW5vdWdoV29yZHM6IGZhbHNlLFxuICAgICAgY2FuR2VuZXJhdGVRdWVzdGlvbnM6IGZhbHNlLFxuICAgIH0pKTtcblxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPFZvY2FidWxhcnlSZXZpc2lvbiAvPik7XG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3QoZ2V0QnlUZXh0KCdGYWlsZWQgdG8gbG9hZCBkYXRhJykpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgncmVuZGVycyBsb2NrZWQgc3RhdGUgd2hlbiBub3QgZW5vdWdoIHdvcmRzJywgYXN5bmMgKCkgPT4ge1xuICAgIHJlcXVpcmUoJy4uLy4uLy4uL3NyYy9ob29rcy91c2VSZXZpc2lvbkRhdGEnKS5kZWZhdWx0Lm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgIGVycm9yOiBudWxsLFxuICAgICAgcmV2aXNpb25RdWVzdGlvbnM6IFtdLFxuICAgICAgc3RhdHM6IHsgdG90YWxMZWFybmVkOiAzMCB9LCAvLyBMZXNzIHRoYW4gTUlOX1dPUkRTX0ZPUl9SRVZJU0lPTl9VTkxPQ0sgKDUwKVxuICAgICAgaGFzRW5vdWdoV29yZHM6IGZhbHNlLFxuICAgICAgY2FuR2VuZXJhdGVRdWVzdGlvbnM6IGZhbHNlLFxuICAgIH0pKTtcblxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPFZvY2FidWxhcnlSZXZpc2lvbiAvPik7XG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAvLyBDb3JyaWfDqTogdXRpbGlzZSBsZSB0ZXh0ZSByw6llbCBhZmZpY2jDqSBkYW5zIFF1aWNrQWN0aW9uc1xuICAgICAgZXhwZWN0KGdldEJ5VGV4dCgvQXBwcmVuZXogNTAgbW90cyBwb3VyIGTDqWJsb3F1ZXIgbGUgbW9kZSByw6l2aXNpb24gZXQgdGVzdGVyIHZvcyBjb25uYWlzc2FuY2VzICEvaSkpLnRvQmVUcnV0aHkoKTtcbiAgICAgIGV4cGVjdChnZXRCeVRleHQoJzMwIC8gNTAnKSkudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdyZW5kZXJzIG5vV29yZHMgc3RhdGUgd2hlbiBlbm91Z2ggd29yZHMgYnV0IGNhbm5vdCBnZW5lcmF0ZSBxdWVzdGlvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgcmVxdWlyZSgnLi4vLi4vLi4vc3JjL2hvb2tzL3VzZVJldmlzaW9uRGF0YScpLmRlZmF1bHQubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgZXJyb3I6IG51bGwsXG4gICAgICByZXZpc2lvblF1ZXN0aW9uczogW10sXG4gICAgICBzdGF0czogeyB0b3RhbExlYXJuZWQ6IDYwIH0sIC8vIE1vcmUgdGhhbiBNSU5fV09SRFNfRk9SX1JFVklTSU9OX1VOTE9DS1xuICAgICAgaGFzRW5vdWdoV29yZHM6IHRydWUsXG4gICAgICBjYW5HZW5lcmF0ZVF1ZXN0aW9uczogZmFsc2UsXG4gICAgfSkpO1xuXG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcig8Vm9jYWJ1bGFyeVJldmlzaW9uIHJvdXRlPXt7IHBhcmFtczogeyBxdWVzdGlvbnNDb3VudDogMTAgfSB9fSAvPik7XG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3QoZ2V0QnlUZXh0KC9Db250aW51ZXogZCdhcHByZW5kcmUgcG91ciBkaXZlcnNpZmllciBsZXMgcXVlc3Rpb25zICEvaSkpLnRvQmVUcnV0aHkoKTtcbiAgICAgIGV4cGVjdChnZXRCeVRleHQoL1VuIHF1aXogZGUgMTAgcXVlc3Rpb25zIG5lIHBldXQgcGFzIMOqdHJlIGfDqW7DqXLDqSBwb3VyIGNlIG5pdmVhdS4vaSkpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgncmVuZGVycyBRdWl6U2NyZWVuIGFuZCBoYW5kbGVzIGFuc3dlciBhbmQgY29udGludWUnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbW9ja1F1ZXN0aW9ucyA9IFtcbiAgICAgIHsgXG4gICAgICAgIGlkOiAncTEnLCBcbiAgICAgICAgd29yZDogJ1dvcmQgMScsIFxuICAgICAgICBjaG9pY2VzOiBbJ0EnLCAnQicsICdDJ10sIC8vIENvcnJpZ8OpOiBjaG9pY2VzIGF1IGxpZXUgZCdvcHRpb25zXG4gICAgICAgIGNvcnJlY3RBbnN3ZXI6ICdBJyBcbiAgICAgIH0sXG4gICAgICB7IFxuICAgICAgICBpZDogJ3EyJywgXG4gICAgICAgIHdvcmQ6ICdXb3JkIDInLCBcbiAgICAgICAgY2hvaWNlczogWydEJywgJ0UnLCAnRiddLCAvLyBDb3JyaWfDqTogY2hvaWNlcyBhdSBsaWV1IGQnb3B0aW9uc1xuICAgICAgICBjb3JyZWN0QW5zd2VyOiAnRCcgXG4gICAgICB9LFxuICAgIF07XG5cbiAgICBjb25zdCB1c2VSZXZpc2lvbkRhdGFNb2NrID0gcmVxdWlyZSgnLi4vLi4vLi4vc3JjL2hvb2tzL3VzZVJldmlzaW9uRGF0YScpLmRlZmF1bHQ7XG4gICAgdXNlUmV2aXNpb25EYXRhTW9jay5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICAgIHJldmlzaW9uUXVlc3Rpb25zOiBtb2NrUXVlc3Rpb25zLFxuICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgIGVycm9yOiBudWxsLFxuICAgICAgc3RhdHM6IHsgdG90YWxMZWFybmVkOiAxMDAgfSxcbiAgICAgIGhhc0Vub3VnaFdvcmRzOiB0cnVlLFxuICAgICAgY2FuR2VuZXJhdGVRdWVzdGlvbnM6IHRydWUsXG4gICAgfSkpO1xuXG4gICAgY29uc3QgdXNlUXVpekVuZ2luZU1vY2sgPSByZXF1aXJlKCcuLi8uLi8uLi9zcmMvaG9va3MvdXNlUXVpekVuZ2luZScpLmRlZmF1bHQ7XG4gICAgY29uc3QgbW9ja0dvVG9OZXh0UXVlc3Rpb24gPSBqZXN0LmZuKCk7XG5cbiAgICAvLyBNb2NrIHVzZVF1aXpFbmdpbmUgdG8gcmV0dXJuIGRpZmZlcmVudCBzdGF0ZXMgZm9yIGluaXRpYWwgcmVuZGVyIGFuZCBhZnRlciBhbnN3ZXJcbiAgICB1c2VRdWl6RW5naW5lTW9ja1xuICAgICAgLm1vY2tJbXBsZW1lbnRhdGlvbk9uY2UoKCkgPT4gKHsgLy8gSW5pdGlhbCBzdGF0ZVxuICAgICAgICBjdXJyZW50UXVlc3Rpb246IG1vY2tRdWVzdGlvbnNbMF0sXG4gICAgICAgIGN1cnJlbnRRdWVzdGlvbkluZGV4OiAwLFxuICAgICAgICB0b3RhbFF1ZXN0aW9uczogbW9ja1F1ZXN0aW9ucy5sZW5ndGgsXG4gICAgICAgIHNjb3JlOiAwLFxuICAgICAgICBpc0ZpbmlzaGVkOiBmYWxzZSxcbiAgICAgICAgc2hvd1Jlc3VsdDogZmFsc2UsXG4gICAgICAgIGhhbmRsZUFuc3dlcjogamVzdC5mbigoKSA9PiB0cnVlKSwgLy8gVGhpcyB3aWxsIGJlIGNhbGxlZCBmaXJzdFxuICAgICAgICBnb1RvTmV4dFF1ZXN0aW9uOiBtb2NrR29Ub05leHRRdWVzdGlvbixcbiAgICAgICAgaGFuZGxlUmVzdGFydDogamVzdC5mbigpLFxuICAgICAgfSkpXG4gICAgICAubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7IC8vIFN0YXRlIGFmdGVyIGFuc3dlcmluZyAoZm9yIHN1YnNlcXVlbnQgcmVuZGVycylcbiAgICAgICAgY3VycmVudFF1ZXN0aW9uOiBtb2NrUXVlc3Rpb25zWzBdLFxuICAgICAgICBjdXJyZW50UXVlc3Rpb25JbmRleDogMCxcbiAgICAgICAgdG90YWxRdWVzdGlvbnM6IG1vY2tRdWVzdGlvbnMubGVuZ3RoLFxuICAgICAgICBzY29yZTogMSwgLy8gQXNzdW1pbmcgY29ycmVjdCBhbnN3ZXJcbiAgICAgICAgaXNGaW5pc2hlZDogZmFsc2UsXG4gICAgICAgIHNob3dSZXN1bHQ6IHRydWUsIC8vIFNob3cgcmVzdWx0IGFmdGVyIGFuc3dlclxuICAgICAgICBoYW5kbGVBbnN3ZXI6IGplc3QuZm4oKCkgPT4gdHJ1ZSksIC8vIFRoaXMgd2lsbCBiZSBjYWxsZWQgaWYgaGFuZGxlQW5zd2VyIGlzIHRyaWdnZXJlZCBhZ2FpblxuICAgICAgICBnb1RvTmV4dFF1ZXN0aW9uOiBtb2NrR29Ub05leHRRdWVzdGlvbixcbiAgICAgICAgaGFuZGxlUmVzdGFydDogamVzdC5mbigpLFxuICAgICAgfSkpO1xuXG5cbiAgICBjb25zdCB7IGdldEJ5VGV4dCwgcXVlcnlCeVRleHQgfSA9IHJlbmRlcig8Vm9jYWJ1bGFyeVJldmlzaW9uIC8+KTtcblxuICAgIC8vIEluaXRpYWwgUXVpelNjcmVlbiBzdGF0ZVxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnV29yZCAxJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgIGV4cGVjdChxdWVyeUJ5VGV4dCgnUmVzdWx0IFNjcmVlbicpKS50b0JlTnVsbCgpO1xuICAgIH0pO1xuXG4gICAgLy8gU2ltdWxhdGUgYW5zd2VyaW5nIGNvcnJlY3RseVxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ0EnKSk7XG4gICAgamVzdC5ydW5Pbmx5UGVuZGluZ1RpbWVycygpOyAvLyBSdW4gdGltZXJzIGZvciBzdGF0ZSB1cGRhdGVcblxuICAgIC8vIFNpbXVsYXRlIGNvbnRpbnVlIHRvIG5leHQgcXVlc3Rpb25cbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHsgLy8gV2FpdCBmb3IgXCJDb250aW51ZXJcIiB0byBhcHBlYXJcbiAgICAgIGV4cGVjdChnZXRCeVRleHQoJ0NvbnRpbnVlcicpKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgnQ29udGludWVyJykpO1xuICAgIGV4cGVjdChtb2NrR29Ub05leHRRdWVzdGlvbikudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcblxuICB0ZXN0KCdyZW5kZXJzIFJlc3VsdFNjcmVlbiB3aGVuIHF1aXogaXMgZmluaXNoZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbW9ja1F1ZXN0aW9ucyA9IFtcbiAgICAgIHsgXG4gICAgICAgIGlkOiAncTEnLCBcbiAgICAgICAgd29yZDogJ1dvcmQgMScsIFxuICAgICAgICBjaG9pY2VzOiBbJ0EnLCAnQicsICdDJ10sIC8vIENvcnJpZ8OpOiBjaG9pY2VzIGF1IGxpZXUgZCdvcHRpb25zXG4gICAgICAgIGNvcnJlY3RBbnN3ZXI6ICdBJyBcbiAgICAgIH0sXG4gICAgXTtcblxuICAgIHJlcXVpcmUoJy4uLy4uLy4uL3NyYy9ob29rcy91c2VSZXZpc2lvbkRhdGEnKS5kZWZhdWx0Lm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgICAgcmV2aXNpb25RdWVzdGlvbnM6IG1vY2tRdWVzdGlvbnMsXG4gICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgZXJyb3I6IG51bGwsXG4gICAgICBzdGF0czogeyB0b3RhbExlYXJuZWQ6IDEwMCB9LFxuICAgICAgaGFzRW5vdWdoV29yZHM6IHRydWUsXG4gICAgICBjYW5HZW5lcmF0ZVF1ZXN0aW9uczogdHJ1ZSxcbiAgICB9KSk7XG5cbiAgICBjb25zdCB1c2VRdWl6RW5naW5lTW9jayA9IHJlcXVpcmUoJy4uLy4uLy4uL3NyYy9ob29rcy91c2VRdWl6RW5naW5lJykuZGVmYXVsdDtcbiAgICB1c2VRdWl6RW5naW5lTW9jay5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICAgIGN1cnJlbnRRdWVzdGlvbjogbnVsbCxcbiAgICAgIGN1cnJlbnRRdWVzdGlvbkluZGV4OiAxLFxuICAgICAgdG90YWxRdWVzdGlvbnM6IG1vY2tRdWVzdGlvbnMubGVuZ3RoLFxuICAgICAgc2NvcmU6IDEsIC8vIEVuc3VyZSBzY29yZSBpcyAxIGZvciB0aGlzIHRlc3RcbiAgICAgIGlzRmluaXNoZWQ6IHRydWUsXG4gICAgICBzaG93UmVzdWx0OiB0cnVlLFxuICAgICAgaGFuZGxlQW5zd2VyOiBqZXN0LmZuKCksXG4gICAgICBnb1RvTmV4dFF1ZXN0aW9uOiBqZXN0LmZuKCksXG4gICAgICBoYW5kbGVSZXN0YXJ0OiBqZXN0LmZuKCksXG4gICAgfSkpO1xuXG4gICAgY29uc3QgeyBnZXRCeVRleHQsIGZpbmRCeVRleHQgfSA9IHJlbmRlcig8Vm9jYWJ1bGFyeVJldmlzaW9uIC8+KTtcblxuICAgIC8vIFdhaXQgZm9yIHRoZSBzY29yZSB0byBiZSAxXG4gICAgYXdhaXQgZmluZEJ5VGV4dCgnMScpOyAvLyBUaGlzIHdpbGwgd2FpdCB1bnRpbCBhbiBlbGVtZW50IHdpdGggdGV4dCAnMScgYXBwZWFyc1xuXG4gICAgLy8gTm93IGNoZWNrIGZvciB0aGUgb3RoZXIgZWxlbWVudHNcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCcvMScpKS50b0JlVHJ1dGh5KCk7IC8vIEZvciB0aGUgdG90YWwgcXVlc3Rpb25zXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnUmVqb3VlcicpKS50b0JlVHJ1dGh5KCk7IC8vIENvcnJpZ8OpOiBcIlJlam91ZXJcIiBhdSBsaWV1IGRlIFwiUmVjb21tZW5jZXJcIlxuICAgIGV4cGVjdChnZXRCeVRleHQoJ1Rlcm1pbmVyJykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgdGVzdCgnaGFuZGxlcyByZXN0YXJ0IGZyb20gUmVzdWx0U2NyZWVuJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tRdWVzdGlvbnMgPSBbXG4gICAgICB7IFxuICAgICAgICBpZDogJ3ExJywgXG4gICAgICAgIHdvcmQ6ICdXb3JkIDEnLCBcbiAgICAgICAgY2hvaWNlczogWydBJywgJ0InLCAnQyddLCAvLyBDb3JyaWfDqTogY2hvaWNlcyBhdSBsaWV1IGQnb3B0aW9uc1xuICAgICAgICBjb3JyZWN0QW5zd2VyOiAnQScgXG4gICAgICB9LFxuICAgIF07XG5cbiAgICByZXF1aXJlKCcuLi8uLi8uLi9zcmMvaG9va3MvdXNlUmV2aXNpb25EYXRhJykuZGVmYXVsdC5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICAgIHJldmlzaW9uUXVlc3Rpb25zOiBtb2NrUXVlc3Rpb25zLFxuICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgIGVycm9yOiBudWxsLFxuICAgICAgc3RhdHM6IHsgdG90YWxMZWFybmVkOiAxMDAgfSxcbiAgICAgIGhhc0Vub3VnaFdvcmRzOiB0cnVlLFxuICAgICAgY2FuR2VuZXJhdGVRdWVzdGlvbnM6IHRydWUsXG4gICAgfSkpO1xuXG4gICAgY29uc3QgdXNlUXVpekVuZ2luZU1vY2sgPSByZXF1aXJlKCcuLi8uLi8uLi9zcmMvaG9va3MvdXNlUXVpekVuZ2luZScpLmRlZmF1bHQ7XG4gICAgY29uc3QgbW9ja0hhbmRsZVJlc3RhcnQgPSBqZXN0LmZuKCk7XG4gICAgdXNlUXVpekVuZ2luZU1vY2subW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gICAgICBjdXJyZW50UXVlc3Rpb246IG51bGwsXG4gICAgICBjdXJyZW50UXVlc3Rpb25JbmRleDogMSxcbiAgICAgIHRvdGFsUXVlc3Rpb25zOiBtb2NrUXVlc3Rpb25zLmxlbmd0aCxcbiAgICAgIHNjb3JlOiAxLFxuICAgICAgaXNGaW5pc2hlZDogdHJ1ZSxcbiAgICAgIHNob3dSZXN1bHQ6IHRydWUsXG4gICAgICBoYW5kbGVBbnN3ZXI6IGplc3QuZm4oKSxcbiAgICAgIGdvVG9OZXh0UXVlc3Rpb246IGplc3QuZm4oKSxcbiAgICAgIGhhbmRsZVJlc3RhcnQ6IG1vY2tIYW5kbGVSZXN0YXJ0LFxuICAgIH0pKTtcblxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPFZvY2FidWxhcnlSZXZpc2lvbiAvPik7XG5cbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChnZXRCeVRleHQoJ1Jlam91ZXInKSkudG9CZVRydXRoeSgpOyAvLyBDb3JyaWfDqTogXCJSZWpvdWVyXCIgYXUgbGlldSBkZSBcIlJlY29tbWVuY2VyXCJcbiAgICB9KTtcblxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ1Jlam91ZXInKSk7XG4gICAgZXhwZWN0KG1vY2tIYW5kbGVSZXN0YXJ0KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xuXG4gIHRlc3QoJ2hhbmRsZXMgZmluaXNoIGZyb20gUmVzdWx0U2NyZWVuJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tRdWVzdGlvbnMgPSBbXG4gICAgICB7IFxuICAgICAgICBpZDogJ3ExJywgXG4gICAgICAgIHdvcmQ6ICdXb3JkIDEnLCBcbiAgICAgICAgY2hvaWNlczogWydBJywgJ0InLCAnQyddLCAvLyBDb3JyaWfDqTogY2hvaWNlcyBhdSBsaWV1IGQnb3B0aW9uc1xuICAgICAgICBjb3JyZWN0QW5zd2VyOiAnQScgXG4gICAgICB9LFxuICAgIF07XG5cbiAgICByZXF1aXJlKCcuLi8uLi8uLi9zcmMvaG9va3MvdXNlUmV2aXNpb25EYXRhJykuZGVmYXVsdC5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICAgIHJldmlzaW9uUXVlc3Rpb25zOiBtb2NrUXVlc3Rpb25zLFxuICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgIGVycm9yOiBudWxsLFxuICAgICAgc3RhdHM6IHsgdG90YWxMZWFybmVkOiAxMDAgfSxcbiAgICAgIGhhc0Vub3VnaFdvcmRzOiB0cnVlLFxuICAgICAgY2FuR2VuZXJhdGVRdWVzdGlvbnM6IHRydWUsXG4gICAgfSkpO1xuXG4gICAgY29uc3QgdXNlUXVpekVuZ2luZU1vY2sgPSByZXF1aXJlKCcuLi8uLi8uLi9zcmMvaG9va3MvdXNlUXVpekVuZ2luZScpLmRlZmF1bHQ7XG4gICAgdXNlUXVpekVuZ2luZU1vY2subW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gICAgICBjdXJyZW50UXVlc3Rpb246IG51bGwsXG4gICAgICBjdXJyZW50UXVlc3Rpb25JbmRleDogMSxcbiAgICAgIHRvdGFsUXVlc3Rpb25zOiBtb2NrUXVlc3Rpb25zLmxlbmd0aCxcbiAgICAgIHNjb3JlOiAxLFxuICAgICAgaXNGaW5pc2hlZDogdHJ1ZSxcbiAgICAgIHNob3dSZXN1bHQ6IHRydWUsXG4gICAgICBoYW5kbGVBbnN3ZXI6IGplc3QuZm4oKSxcbiAgICAgIGdvVG9OZXh0UXVlc3Rpb246IGplc3QuZm4oKSxcbiAgICAgIGhhbmRsZVJlc3RhcnQ6IGplc3QuZm4oKSxcbiAgICB9KSk7XG5cbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKDxWb2NhYnVsYXJ5UmV2aXNpb24gLz4pO1xuXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3QoZ2V0QnlUZXh0KCdUZXJtaW5lcicpKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG5cbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCdUZXJtaW5lcicpKTtcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChtb2NrTWFya1JldmlzaW9uQ29tcGxldGVkKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChtb2NrUXVlc3Rpb25zLCAxLCAxKTtcbiAgICAgIGV4cGVjdChtb2NrR29CYWNrKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2hhbmRsZUdvQmFjayBpcyBjYWxsZWQgd2hlbiBiYWNrIGJ1dHRvbiBpcyBwcmVzc2VkIGluIFF1aXpTY3JlZW4nLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbW9ja1F1ZXN0aW9ucyA9IFtcbiAgICAgIHsgXG4gICAgICAgIGlkOiAncTEnLCBcbiAgICAgICAgd29yZDogJ1dvcmQgMScsIFxuICAgICAgICBjaG9pY2VzOiBbJ0EnLCAnQicsICdDJ10sIC8vIENvcnJpZ8OpOiBjaG9pY2VzIGF1IGxpZXUgZCdvcHRpb25zXG4gICAgICAgIGNvcnJlY3RBbnN3ZXI6ICdBJyBcbiAgICAgIH0sXG4gICAgXTtcblxuICAgIHJlcXVpcmUoJy4uLy4uLy4uL3NyYy9ob29rcy91c2VSZXZpc2lvbkRhdGEnKS5kZWZhdWx0Lm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgICAgcmV2aXNpb25RdWVzdGlvbnM6IG1vY2tRdWVzdGlvbnMsXG4gICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgZXJyb3I6IG51bGwsXG4gICAgICBzdGF0czogeyB0b3RhbExlYXJuZWQ6IDEwMCB9LFxuICAgICAgaGFzRW5vdWdoV29yZHM6IHRydWUsXG4gICAgICBjYW5HZW5lcmF0ZVF1ZXN0aW9uczogdHJ1ZSxcbiAgICB9KSk7XG5cbiAgICBjb25zdCB1c2VRdWl6RW5naW5lTW9jayA9IHJlcXVpcmUoJy4uLy4uLy4uL3NyYy9ob29rcy91c2VRdWl6RW5naW5lJykuZGVmYXVsdDtcbiAgICB1c2VRdWl6RW5naW5lTW9jay5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICAgIGN1cnJlbnRRdWVzdGlvbjogbW9ja1F1ZXN0aW9uc1swXSxcbiAgICAgIGN1cnJlbnRRdWVzdGlvbkluZGV4OiAwLFxuICAgICAgdG90YWxRdWVzdGlvbnM6IG1vY2tRdWVzdGlvbnMubGVuZ3RoLFxuICAgICAgc2NvcmU6IDAsXG4gICAgICBpc0ZpbmlzaGVkOiBmYWxzZSxcbiAgICAgIHNob3dSZXN1bHQ6IGZhbHNlLFxuICAgICAgaGFuZGxlQW5zd2VyOiBqZXN0LmZuKCksXG4gICAgICBnb1RvTmV4dFF1ZXN0aW9uOiBqZXN0LmZuKCksXG4gICAgICBoYW5kbGVSZXN0YXJ0OiBqZXN0LmZuKCksXG4gICAgfSkpO1xuXG4gICAgY29uc3QgeyBnZXRCeUxhYmVsVGV4dCB9ID0gcmVuZGVyKDxWb2NhYnVsYXJ5UmV2aXNpb24gLz4pOyAvLyBDaGFuZ2VkIHRvIGdldEJ5TGFiZWxUZXh0XG5cbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChnZXRCeUxhYmVsVGV4dCgnUmV0b3VyJykpLnRvQmVUcnV0aHkoKTsgLy8gQ2hhbmdlZCB0byBnZXRCeUxhYmVsVGV4dFxuICAgIH0pO1xuXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5TGFiZWxUZXh0KCdSZXRvdXInKSk7IC8vIENoYW5nZWQgdG8gZ2V0QnlMYWJlbFRleHRcbiAgICBleHBlY3QobW9ja0dvQmFjaykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcbn0pOyJdLCJtYXBwaW5ncyI6IkFBU0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLHVDQUF1QyxFQUFFO0VBQUEsT0FBTztJQUN4REMsVUFBVSxFQUFFLElBQUk7SUFDaEJDLE9BQU8sRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUM7TUFBQSxPQUFPO1FBQ3RCQyxxQkFBcUIsRUFBRUM7TUFDekIsQ0FBQztJQUFBLENBQUM7RUFDSixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBR0hQLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDBCQUEwQixFQUFFO0VBQUEsT0FBTztJQUMzQ08sYUFBYSxFQUFFSixJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFBLE9BQU87UUFDNUJJLE1BQU0sRUFBRUM7TUFDVixDQUFDO0lBQUEsQ0FBQztFQUNKLENBQUM7QUFBQSxDQUFDLENBQUM7QUFFSFYsV0FBQSxHQUFLQyxJQUFJLENBQUMsb0NBQW9DLEVBQUU7RUFBQSxPQUFPO0lBQ3JEQyxVQUFVLEVBQUUsSUFBSTtJQUNoQkMsT0FBTyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFBLE9BQU87UUFDdEJNLGlCQUFpQixFQUFFLEVBQUU7UUFDckJDLFNBQVMsRUFBRSxLQUFLO1FBQ2hCQyxLQUFLLEVBQUUsSUFBSTtRQUNYQyxLQUFLLEVBQUU7VUFBRUMsWUFBWSxFQUFFO1FBQUUsQ0FBQztRQUMxQkMsY0FBYyxFQUFFLEtBQUs7UUFDckJDLG9CQUFvQixFQUFFO01BQ3hCLENBQUM7SUFBQSxDQUFDO0VBQ0osQ0FBQztBQUFBLENBQUMsQ0FBQztBQUVIakIsV0FBQSxHQUFLQyxJQUFJLENBQUMsa0NBQWtDLEVBQUU7RUFBQSxPQUFPO0lBQ25EQyxVQUFVLEVBQUUsSUFBSTtJQUNoQkMsT0FBTyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFBLE9BQU87UUFDdEJhLGVBQWUsRUFBRSxJQUFJO1FBQ3JCQyxvQkFBb0IsRUFBRSxDQUFDO1FBQ3ZCQyxjQUFjLEVBQUUsQ0FBQztRQUNqQkMsS0FBSyxFQUFFLENBQUM7UUFDUkMsVUFBVSxFQUFFLEtBQUs7UUFDakJDLFVBQVUsRUFBRSxLQUFLO1FBQ2pCQyxZQUFZLEVBQUVwQixJQUFJLENBQUNDLEVBQUUsQ0FBQztVQUFBLE9BQU0sSUFBSTtRQUFBLEVBQUM7UUFDakNvQixnQkFBZ0IsRUFBRXJCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7UUFDM0JxQixhQUFhLEVBQUV0QixJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUN6QixDQUFDO0lBQUEsQ0FBQztFQUNKLENBQUM7QUFBQSxDQUFDLENBQUM7QUFHSEwsV0FBQSxHQUFLQyxJQUFJLENBQUMsb0NBQW9DLEVBQUU7RUFBQSxPQUFPO0lBQ3JEMEIsWUFBWSxFQUFFO01BQ1pDLFFBQVEsRUFBRSxTQUFWQSxRQUFRQSxDQUFBQyxJQUFBO1FBQUEsSUFBS0MsUUFBUSxHQUFBRCxJQUFBLENBQVJDLFFBQVE7UUFBQSxPQUFPQSxRQUFRLENBQUM7VUFDbkNDLE1BQU0sRUFBRTtZQUNOQyxVQUFVLEVBQUUsU0FBUztZQUNyQkMsT0FBTyxFQUFFLFNBQVM7WUFDbEJDLElBQUksRUFBRSxTQUFTO1lBQ2ZDLGFBQWEsRUFBRSxTQUFTO1lBQ3hCQyxPQUFPLEVBQUU7VUFDWDtRQUNGLENBQUMsQ0FBQztNQUFBO01BQ0ZDLFVBQVUsRUFBRSxTQUFaQSxVQUFVQSxDQUFBO1FBQUEsT0FBUztVQUNqQk4sTUFBTSxFQUFFO1lBQ05DLFVBQVUsRUFBRSxTQUFTO1lBQ3JCQyxPQUFPLEVBQUUsU0FBUztZQUNsQkMsSUFBSSxFQUFFLFNBQVM7WUFDZkMsYUFBYSxFQUFFLFNBQVM7WUFDeEJDLE9BQU8sRUFBRTtVQUNYO1FBQ0YsQ0FBQztNQUFBO0lBQ0g7RUFDRixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBTUhwQyxXQUFBLEdBQUtDLElBQUksQ0FBQyxjQUFjLEVBQUUsWUFBTTtFQUM5QixJQUFNcUMsRUFBRSxHQUFHbEMsSUFBSSxDQUFDbUMsYUFBYSxDQUFDLGNBQWMsQ0FBQztFQUM3Q0QsRUFBRSxDQUFDRSxRQUFRLENBQUNDLE1BQU0sR0FBRyxVQUFDQyxLQUFLLEVBQUVDLE1BQU07SUFBQSxPQUFNO01BQ3ZDQyxLQUFLLEVBQUUsU0FBUEEsS0FBS0EsQ0FBR0MsUUFBUSxFQUFLO1FBQ25CSCxLQUFLLENBQUNJLFFBQVEsQ0FBQ0gsTUFBTSxDQUFDSSxPQUFPLENBQUM7UUFDOUJGLFFBQVEsSUFBSUEsUUFBUSxDQUFDLENBQUM7TUFDeEI7SUFDRixDQUFDO0VBQUEsQ0FBQztFQUNGLE9BQU9QLEVBQUU7QUFDWCxDQUFDLENBQUM7QUFBQyxJQUFBVSxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsa0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQXZGSCxJQUFBRSxNQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxZQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxhQUFBLEdBQUFKLE9BQUE7QUFHQSxJQUFBSyxtQkFBQSxHQUFBTixzQkFBQSxDQUFBQyxPQUFBO0FBQXlFLElBQUFNLFdBQUEsR0FBQU4sT0FBQTtBQUFBLFNBQUFqRCxZQUFBO0VBQUEsSUFBQXdELFFBQUEsR0FBQVAsT0FBQTtJQUFBN0MsSUFBQSxHQUFBb0QsUUFBQSxDQUFBcEQsSUFBQTtFQUFBSixXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBSSxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFHekUsSUFBTUcseUJBQXlCLEdBQUdILElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7QUFRM0MsSUFBTUssVUFBVSxHQUFHTixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0FBMkQ1QkQsSUFBSSxDQUFDcUQsS0FBSyxDQUFDQyx3QkFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDQyxlQUFlLENBQUM7RUFBRUMsS0FBSyxFQUFFLEdBQUc7RUFBRUMsTUFBTSxFQUFFO0FBQUksQ0FBQyxDQUFDO0FBYzFFQyxRQUFRLENBQUMsc0NBQXNDLEVBQUUsWUFBTTtFQUNyREMsVUFBVSxDQUFDLFlBQU07SUFDZjNELElBQUksQ0FBQzRELGFBQWEsQ0FBQyxDQUFDO0lBQ3BCNUQsSUFBSSxDQUFDNkQsYUFBYSxDQUFDLENBQUM7SUFFcEJoQixPQUFPLENBQUMsb0NBQW9DLENBQUMsQ0FBQzlDLE9BQU8sQ0FBQytELGtCQUFrQixDQUFDO01BQUEsT0FBTztRQUM5RXZELGlCQUFpQixFQUFFLEVBQUU7UUFDckJDLFNBQVMsRUFBRSxLQUFLO1FBQ2hCQyxLQUFLLEVBQUUsSUFBSTtRQUNYQyxLQUFLLEVBQUU7VUFBRUMsWUFBWSxFQUFFO1FBQUUsQ0FBQztRQUMxQkMsY0FBYyxFQUFFLEtBQUs7UUFDckJDLG9CQUFvQixFQUFFO01BQ3hCLENBQUM7SUFBQSxDQUFDLENBQUM7SUFDSGdDLE9BQU8sQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDOUMsT0FBTyxDQUFDK0Qsa0JBQWtCLENBQUM7TUFBQSxPQUFPO1FBQzVFaEQsZUFBZSxFQUFFLElBQUk7UUFDckJDLG9CQUFvQixFQUFFLENBQUM7UUFDdkJDLGNBQWMsRUFBRSxDQUFDO1FBQ2pCQyxLQUFLLEVBQUUsQ0FBQztRQUNSQyxVQUFVLEVBQUUsS0FBSztRQUNqQkMsVUFBVSxFQUFFLEtBQUs7UUFDakJDLFlBQVksRUFBRXBCLElBQUksQ0FBQ0MsRUFBRSxDQUFDO1VBQUEsT0FBTSxJQUFJO1FBQUEsRUFBQztRQUNqQ29CLGdCQUFnQixFQUFFckIsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztRQUMzQnFCLGFBQWEsRUFBRXRCLElBQUksQ0FBQ0MsRUFBRSxDQUFDO01BQ3pCLENBQUM7SUFBQSxDQUFDLENBQUM7SUFDSEUseUJBQXlCLENBQUM0RCxTQUFTLENBQUMsQ0FBQztJQUNyQ3pELFVBQVUsQ0FBQ3lELFNBQVMsQ0FBQyxDQUFDO0VBQ3hCLENBQUMsQ0FBQztFQUVGQyxTQUFTLENBQUMsWUFBTTtJQUNkaEUsSUFBSSxDQUFDaUUsY0FBYyxDQUFDLENBQUM7RUFDdkIsQ0FBQyxDQUFDO0VBRUZDLElBQUksQ0FBQyxpQ0FBaUMsTUFBQXBCLGtCQUFBLENBQUEvQyxPQUFBLEVBQUUsYUFBWTtJQUNsRDhDLE9BQU8sQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDOUMsT0FBTyxDQUFDK0Qsa0JBQWtCLENBQUM7TUFBQSxPQUFPO1FBQzlFdEQsU0FBUyxFQUFFLElBQUk7UUFDZkQsaUJBQWlCLEVBQUUsRUFBRTtRQUNyQkUsS0FBSyxFQUFFLElBQUk7UUFDWEMsS0FBSyxFQUFFO1VBQUVDLFlBQVksRUFBRTtRQUFFLENBQUM7UUFDMUJDLGNBQWMsRUFBRSxLQUFLO1FBQ3JCQyxvQkFBb0IsRUFBRTtNQUN4QixDQUFDO0lBQUEsQ0FBQyxDQUFDO0lBRUgsSUFBQXNELE9BQUEsR0FBc0IsSUFBQUMsbUJBQU0sRUFBQyxJQUFBakIsV0FBQSxDQUFBa0IsR0FBQSxFQUFDbkIsbUJBQUEsQ0FBQW5ELE9BQWtCLElBQUUsQ0FBQyxDQUFDO01BQTVDdUUsU0FBUyxHQUFBSCxPQUFBLENBQVRHLFNBQVM7SUFDakIsTUFBTSxJQUFBQyxvQkFBTyxFQUFDLFlBQU07TUFDbEJDLE1BQU0sQ0FBQ0YsU0FBUyxDQUFDLGlDQUFpQyxDQUFDLENBQUMsQ0FBQ0csVUFBVSxDQUFDLENBQUM7SUFDbkUsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxFQUFDO0VBRUZQLElBQUksQ0FBQyxxQkFBcUIsTUFBQXBCLGtCQUFBLENBQUEvQyxPQUFBLEVBQUUsYUFBWTtJQUN0QzhDLE9BQU8sQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDOUMsT0FBTyxDQUFDK0Qsa0JBQWtCLENBQUM7TUFBQSxPQUFPO1FBQzlFdEQsU0FBUyxFQUFFLEtBQUs7UUFDaEJDLEtBQUssRUFBRSxxQkFBcUI7UUFDNUJGLGlCQUFpQixFQUFFLEVBQUU7UUFDckJHLEtBQUssRUFBRTtVQUFFQyxZQUFZLEVBQUU7UUFBRSxDQUFDO1FBQzFCQyxjQUFjLEVBQUUsS0FBSztRQUNyQkMsb0JBQW9CLEVBQUU7TUFDeEIsQ0FBQztJQUFBLENBQUMsQ0FBQztJQUVILElBQUE2RCxRQUFBLEdBQXNCLElBQUFOLG1CQUFNLEVBQUMsSUFBQWpCLFdBQUEsQ0FBQWtCLEdBQUEsRUFBQ25CLG1CQUFBLENBQUFuRCxPQUFrQixJQUFFLENBQUMsQ0FBQztNQUE1Q3VFLFNBQVMsR0FBQUksUUFBQSxDQUFUSixTQUFTO0lBQ2pCLE1BQU0sSUFBQUMsb0JBQU8sRUFBQyxZQUFNO01BQ2xCQyxNQUFNLENBQUNGLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUNHLFVBQVUsQ0FBQyxDQUFDO0lBQ3ZELENBQUMsQ0FBQztFQUNKLENBQUMsRUFBQztFQUVGUCxJQUFJLENBQUMsNENBQTRDLE1BQUFwQixrQkFBQSxDQUFBL0MsT0FBQSxFQUFFLGFBQVk7SUFDN0Q4QyxPQUFPLENBQUMsb0NBQW9DLENBQUMsQ0FBQzlDLE9BQU8sQ0FBQytELGtCQUFrQixDQUFDO01BQUEsT0FBTztRQUM5RXRELFNBQVMsRUFBRSxLQUFLO1FBQ2hCQyxLQUFLLEVBQUUsSUFBSTtRQUNYRixpQkFBaUIsRUFBRSxFQUFFO1FBQ3JCRyxLQUFLLEVBQUU7VUFBRUMsWUFBWSxFQUFFO1FBQUcsQ0FBQztRQUMzQkMsY0FBYyxFQUFFLEtBQUs7UUFDckJDLG9CQUFvQixFQUFFO01BQ3hCLENBQUM7SUFBQSxDQUFDLENBQUM7SUFFSCxJQUFBOEQsUUFBQSxHQUFzQixJQUFBUCxtQkFBTSxFQUFDLElBQUFqQixXQUFBLENBQUFrQixHQUFBLEVBQUNuQixtQkFBQSxDQUFBbkQsT0FBa0IsSUFBRSxDQUFDLENBQUM7TUFBNUN1RSxTQUFTLEdBQUFLLFFBQUEsQ0FBVEwsU0FBUztJQUNqQixNQUFNLElBQUFDLG9CQUFPLEVBQUMsWUFBTTtNQUVsQkMsTUFBTSxDQUFDRixTQUFTLENBQUMsaUZBQWlGLENBQUMsQ0FBQyxDQUFDRyxVQUFVLENBQUMsQ0FBQztNQUNqSEQsTUFBTSxDQUFDRixTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQ0csVUFBVSxDQUFDLENBQUM7SUFDM0MsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxFQUFDO0VBRUZQLElBQUksQ0FBQyx1RUFBdUUsTUFBQXBCLGtCQUFBLENBQUEvQyxPQUFBLEVBQUUsYUFBWTtJQUN4RjhDLE9BQU8sQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDOUMsT0FBTyxDQUFDK0Qsa0JBQWtCLENBQUM7TUFBQSxPQUFPO1FBQzlFdEQsU0FBUyxFQUFFLEtBQUs7UUFDaEJDLEtBQUssRUFBRSxJQUFJO1FBQ1hGLGlCQUFpQixFQUFFLEVBQUU7UUFDckJHLEtBQUssRUFBRTtVQUFFQyxZQUFZLEVBQUU7UUFBRyxDQUFDO1FBQzNCQyxjQUFjLEVBQUUsSUFBSTtRQUNwQkMsb0JBQW9CLEVBQUU7TUFDeEIsQ0FBQztJQUFBLENBQUMsQ0FBQztJQUVILElBQUErRCxRQUFBLEdBQXNCLElBQUFSLG1CQUFNLEVBQUMsSUFBQWpCLFdBQUEsQ0FBQWtCLEdBQUEsRUFBQ25CLG1CQUFBLENBQUFuRCxPQUFrQjtRQUFDOEUsS0FBSyxFQUFFO1VBQUVDLE1BQU0sRUFBRTtZQUFFQyxjQUFjLEVBQUU7VUFBRztRQUFFO01BQUUsQ0FBRSxDQUFDLENBQUM7TUFBdkZULFNBQVMsR0FBQU0sUUFBQSxDQUFUTixTQUFTO0lBQ2pCLE1BQU0sSUFBQUMsb0JBQU8sRUFBQyxZQUFNO01BQ2xCQyxNQUFNLENBQUNGLFNBQVMsQ0FBQyx5REFBeUQsQ0FBQyxDQUFDLENBQUNHLFVBQVUsQ0FBQyxDQUFDO01BQ3pGRCxNQUFNLENBQUNGLFNBQVMsQ0FBQyxrRUFBa0UsQ0FBQyxDQUFDLENBQUNHLFVBQVUsQ0FBQyxDQUFDO0lBQ3BHLENBQUMsQ0FBQztFQUNKLENBQUMsRUFBQztFQUVGUCxJQUFJLENBQUMsb0RBQW9ELE1BQUFwQixrQkFBQSxDQUFBL0MsT0FBQSxFQUFFLGFBQVk7SUFDckUsSUFBTWlGLGFBQWEsR0FBRyxDQUNwQjtNQUNFQyxFQUFFLEVBQUUsSUFBSTtNQUNSQyxJQUFJLEVBQUUsUUFBUTtNQUNkQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQztNQUN4QkMsYUFBYSxFQUFFO0lBQ2pCLENBQUMsRUFDRDtNQUNFSCxFQUFFLEVBQUUsSUFBSTtNQUNSQyxJQUFJLEVBQUUsUUFBUTtNQUNkQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQztNQUN4QkMsYUFBYSxFQUFFO0lBQ2pCLENBQUMsQ0FDRjtJQUVELElBQU1DLG1CQUFtQixHQUFHeEMsT0FBTyxDQUFDLG9DQUFvQyxDQUFDLENBQUM5QyxPQUFPO0lBQ2pGc0YsbUJBQW1CLENBQUN2QixrQkFBa0IsQ0FBQztNQUFBLE9BQU87UUFDNUN2RCxpQkFBaUIsRUFBRXlFLGFBQWE7UUFDaEN4RSxTQUFTLEVBQUUsS0FBSztRQUNoQkMsS0FBSyxFQUFFLElBQUk7UUFDWEMsS0FBSyxFQUFFO1VBQUVDLFlBQVksRUFBRTtRQUFJLENBQUM7UUFDNUJDLGNBQWMsRUFBRSxJQUFJO1FBQ3BCQyxvQkFBb0IsRUFBRTtNQUN4QixDQUFDO0lBQUEsQ0FBQyxDQUFDO0lBRUgsSUFBTXlFLGlCQUFpQixHQUFHekMsT0FBTyxDQUFDLGtDQUFrQyxDQUFDLENBQUM5QyxPQUFPO0lBQzdFLElBQU13RixvQkFBb0IsR0FBR3ZGLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFHdENxRixpQkFBaUIsQ0FDZEUsc0JBQXNCLENBQUM7TUFBQSxPQUFPO1FBQzdCMUUsZUFBZSxFQUFFa0UsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUNqQ2pFLG9CQUFvQixFQUFFLENBQUM7UUFDdkJDLGNBQWMsRUFBRWdFLGFBQWEsQ0FBQ1MsTUFBTTtRQUNwQ3hFLEtBQUssRUFBRSxDQUFDO1FBQ1JDLFVBQVUsRUFBRSxLQUFLO1FBQ2pCQyxVQUFVLEVBQUUsS0FBSztRQUNqQkMsWUFBWSxFQUFFcEIsSUFBSSxDQUFDQyxFQUFFLENBQUM7VUFBQSxPQUFNLElBQUk7UUFBQSxFQUFDO1FBQ2pDb0IsZ0JBQWdCLEVBQUVrRSxvQkFBb0I7UUFDdENqRSxhQUFhLEVBQUV0QixJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUN6QixDQUFDO0lBQUEsQ0FBQyxDQUFDLENBQ0Y2RCxrQkFBa0IsQ0FBQztNQUFBLE9BQU87UUFDekJoRCxlQUFlLEVBQUVrRSxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQ2pDakUsb0JBQW9CLEVBQUUsQ0FBQztRQUN2QkMsY0FBYyxFQUFFZ0UsYUFBYSxDQUFDUyxNQUFNO1FBQ3BDeEUsS0FBSyxFQUFFLENBQUM7UUFDUkMsVUFBVSxFQUFFLEtBQUs7UUFDakJDLFVBQVUsRUFBRSxJQUFJO1FBQ2hCQyxZQUFZLEVBQUVwQixJQUFJLENBQUNDLEVBQUUsQ0FBQztVQUFBLE9BQU0sSUFBSTtRQUFBLEVBQUM7UUFDakNvQixnQkFBZ0IsRUFBRWtFLG9CQUFvQjtRQUN0Q2pFLGFBQWEsRUFBRXRCLElBQUksQ0FBQ0MsRUFBRSxDQUFDO01BQ3pCLENBQUM7SUFBQSxDQUFDLENBQUM7SUFHTCxJQUFBeUYsUUFBQSxHQUFtQyxJQUFBdEIsbUJBQU0sRUFBQyxJQUFBakIsV0FBQSxDQUFBa0IsR0FBQSxFQUFDbkIsbUJBQUEsQ0FBQW5ELE9BQWtCLElBQUUsQ0FBQyxDQUFDO01BQXpEdUUsU0FBUyxHQUFBb0IsUUFBQSxDQUFUcEIsU0FBUztNQUFFcUIsV0FBVyxHQUFBRCxRQUFBLENBQVhDLFdBQVc7SUFHOUIsTUFBTSxJQUFBcEIsb0JBQU8sRUFBQyxZQUFNO01BQ2xCQyxNQUFNLENBQUNGLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDRyxVQUFVLENBQUMsQ0FBQztNQUN4Q0QsTUFBTSxDQUFDbUIsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUNDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pELENBQUMsQ0FBQztJQUdGQyxzQkFBUyxDQUFDQyxLQUFLLENBQUN4QixTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0J0RSxJQUFJLENBQUMrRixvQkFBb0IsQ0FBQyxDQUFDO0lBRzNCLE1BQU0sSUFBQXhCLG9CQUFPLEVBQUMsWUFBTTtNQUNsQkMsTUFBTSxDQUFDRixTQUFTLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQ0csVUFBVSxDQUFDLENBQUM7SUFDN0MsQ0FBQyxDQUFDO0lBQ0ZvQixzQkFBUyxDQUFDQyxLQUFLLENBQUN4QixTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdkNFLE1BQU0sQ0FBQ2Usb0JBQW9CLENBQUMsQ0FBQ1MsZ0JBQWdCLENBQUMsQ0FBQztFQUNqRCxDQUFDLEVBQUM7RUFFRjlCLElBQUksQ0FBQyw0Q0FBNEMsTUFBQXBCLGtCQUFBLENBQUEvQyxPQUFBLEVBQUUsYUFBWTtJQUM3RCxJQUFNaUYsYUFBYSxHQUFHLENBQ3BCO01BQ0VDLEVBQUUsRUFBRSxJQUFJO01BQ1JDLElBQUksRUFBRSxRQUFRO01BQ2RDLE9BQU8sRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO01BQ3hCQyxhQUFhLEVBQUU7SUFDakIsQ0FBQyxDQUNGO0lBRUR2QyxPQUFPLENBQUMsb0NBQW9DLENBQUMsQ0FBQzlDLE9BQU8sQ0FBQytELGtCQUFrQixDQUFDO01BQUEsT0FBTztRQUM5RXZELGlCQUFpQixFQUFFeUUsYUFBYTtRQUNoQ3hFLFNBQVMsRUFBRSxLQUFLO1FBQ2hCQyxLQUFLLEVBQUUsSUFBSTtRQUNYQyxLQUFLLEVBQUU7VUFBRUMsWUFBWSxFQUFFO1FBQUksQ0FBQztRQUM1QkMsY0FBYyxFQUFFLElBQUk7UUFDcEJDLG9CQUFvQixFQUFFO01BQ3hCLENBQUM7SUFBQSxDQUFDLENBQUM7SUFFSCxJQUFNeUUsaUJBQWlCLEdBQUd6QyxPQUFPLENBQUMsa0NBQWtDLENBQUMsQ0FBQzlDLE9BQU87SUFDN0V1RixpQkFBaUIsQ0FBQ3hCLGtCQUFrQixDQUFDO01BQUEsT0FBTztRQUMxQ2hELGVBQWUsRUFBRSxJQUFJO1FBQ3JCQyxvQkFBb0IsRUFBRSxDQUFDO1FBQ3ZCQyxjQUFjLEVBQUVnRSxhQUFhLENBQUNTLE1BQU07UUFDcEN4RSxLQUFLLEVBQUUsQ0FBQztRQUNSQyxVQUFVLEVBQUUsSUFBSTtRQUNoQkMsVUFBVSxFQUFFLElBQUk7UUFDaEJDLFlBQVksRUFBRXBCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7UUFDdkJvQixnQkFBZ0IsRUFBRXJCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7UUFDM0JxQixhQUFhLEVBQUV0QixJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUN6QixDQUFDO0lBQUEsQ0FBQyxDQUFDO0lBRUgsSUFBQWdHLFFBQUEsR0FBa0MsSUFBQTdCLG1CQUFNLEVBQUMsSUFBQWpCLFdBQUEsQ0FBQWtCLEdBQUEsRUFBQ25CLG1CQUFBLENBQUFuRCxPQUFrQixJQUFFLENBQUMsQ0FBQztNQUF4RHVFLFNBQVMsR0FBQTJCLFFBQUEsQ0FBVDNCLFNBQVM7TUFBRTRCLFVBQVUsR0FBQUQsUUFBQSxDQUFWQyxVQUFVO0lBRzdCLE1BQU1BLFVBQVUsQ0FBQyxHQUFHLENBQUM7SUFHckIxQixNQUFNLENBQUNGLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDRyxVQUFVLENBQUMsQ0FBQztJQUNwQ0QsTUFBTSxDQUFDRixTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQ0csVUFBVSxDQUFDLENBQUM7SUFDekNELE1BQU0sQ0FBQ0YsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUNHLFVBQVUsQ0FBQyxDQUFDO0VBQzVDLENBQUMsRUFBQztFQUVGUCxJQUFJLENBQUMsbUNBQW1DLE1BQUFwQixrQkFBQSxDQUFBL0MsT0FBQSxFQUFFLGFBQVk7SUFDcEQsSUFBTWlGLGFBQWEsR0FBRyxDQUNwQjtNQUNFQyxFQUFFLEVBQUUsSUFBSTtNQUNSQyxJQUFJLEVBQUUsUUFBUTtNQUNkQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQztNQUN4QkMsYUFBYSxFQUFFO0lBQ2pCLENBQUMsQ0FDRjtJQUVEdkMsT0FBTyxDQUFDLG9DQUFvQyxDQUFDLENBQUM5QyxPQUFPLENBQUMrRCxrQkFBa0IsQ0FBQztNQUFBLE9BQU87UUFDOUV2RCxpQkFBaUIsRUFBRXlFLGFBQWE7UUFDaEN4RSxTQUFTLEVBQUUsS0FBSztRQUNoQkMsS0FBSyxFQUFFLElBQUk7UUFDWEMsS0FBSyxFQUFFO1VBQUVDLFlBQVksRUFBRTtRQUFJLENBQUM7UUFDNUJDLGNBQWMsRUFBRSxJQUFJO1FBQ3BCQyxvQkFBb0IsRUFBRTtNQUN4QixDQUFDO0lBQUEsQ0FBQyxDQUFDO0lBRUgsSUFBTXlFLGlCQUFpQixHQUFHekMsT0FBTyxDQUFDLGtDQUFrQyxDQUFDLENBQUM5QyxPQUFPO0lBQzdFLElBQU1vRyxpQkFBaUIsR0FBR25HLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDbkNxRixpQkFBaUIsQ0FBQ3hCLGtCQUFrQixDQUFDO01BQUEsT0FBTztRQUMxQ2hELGVBQWUsRUFBRSxJQUFJO1FBQ3JCQyxvQkFBb0IsRUFBRSxDQUFDO1FBQ3ZCQyxjQUFjLEVBQUVnRSxhQUFhLENBQUNTLE1BQU07UUFDcEN4RSxLQUFLLEVBQUUsQ0FBQztRQUNSQyxVQUFVLEVBQUUsSUFBSTtRQUNoQkMsVUFBVSxFQUFFLElBQUk7UUFDaEJDLFlBQVksRUFBRXBCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7UUFDdkJvQixnQkFBZ0IsRUFBRXJCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7UUFDM0JxQixhQUFhLEVBQUU2RTtNQUNqQixDQUFDO0lBQUEsQ0FBQyxDQUFDO0lBRUgsSUFBQUMsUUFBQSxHQUFzQixJQUFBaEMsbUJBQU0sRUFBQyxJQUFBakIsV0FBQSxDQUFBa0IsR0FBQSxFQUFDbkIsbUJBQUEsQ0FBQW5ELE9BQWtCLElBQUUsQ0FBQyxDQUFDO01BQTVDdUUsU0FBUyxHQUFBOEIsUUFBQSxDQUFUOUIsU0FBUztJQUVqQixNQUFNLElBQUFDLG9CQUFPLEVBQUMsWUFBTTtNQUNsQkMsTUFBTSxDQUFDRixTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQ0csVUFBVSxDQUFDLENBQUM7SUFDM0MsQ0FBQyxDQUFDO0lBRUZvQixzQkFBUyxDQUFDQyxLQUFLLENBQUN4QixTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDckNFLE1BQU0sQ0FBQzJCLGlCQUFpQixDQUFDLENBQUNILGdCQUFnQixDQUFDLENBQUM7RUFDOUMsQ0FBQyxFQUFDO0VBRUY5QixJQUFJLENBQUMsa0NBQWtDLE1BQUFwQixrQkFBQSxDQUFBL0MsT0FBQSxFQUFFLGFBQVk7SUFDbkQsSUFBTWlGLGFBQWEsR0FBRyxDQUNwQjtNQUNFQyxFQUFFLEVBQUUsSUFBSTtNQUNSQyxJQUFJLEVBQUUsUUFBUTtNQUNkQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQztNQUN4QkMsYUFBYSxFQUFFO0lBQ2pCLENBQUMsQ0FDRjtJQUVEdkMsT0FBTyxDQUFDLG9DQUFvQyxDQUFDLENBQUM5QyxPQUFPLENBQUMrRCxrQkFBa0IsQ0FBQztNQUFBLE9BQU87UUFDOUV2RCxpQkFBaUIsRUFBRXlFLGFBQWE7UUFDaEN4RSxTQUFTLEVBQUUsS0FBSztRQUNoQkMsS0FBSyxFQUFFLElBQUk7UUFDWEMsS0FBSyxFQUFFO1VBQUVDLFlBQVksRUFBRTtRQUFJLENBQUM7UUFDNUJDLGNBQWMsRUFBRSxJQUFJO1FBQ3BCQyxvQkFBb0IsRUFBRTtNQUN4QixDQUFDO0lBQUEsQ0FBQyxDQUFDO0lBRUgsSUFBTXlFLGlCQUFpQixHQUFHekMsT0FBTyxDQUFDLGtDQUFrQyxDQUFDLENBQUM5QyxPQUFPO0lBQzdFdUYsaUJBQWlCLENBQUN4QixrQkFBa0IsQ0FBQztNQUFBLE9BQU87UUFDMUNoRCxlQUFlLEVBQUUsSUFBSTtRQUNyQkMsb0JBQW9CLEVBQUUsQ0FBQztRQUN2QkMsY0FBYyxFQUFFZ0UsYUFBYSxDQUFDUyxNQUFNO1FBQ3BDeEUsS0FBSyxFQUFFLENBQUM7UUFDUkMsVUFBVSxFQUFFLElBQUk7UUFDaEJDLFVBQVUsRUFBRSxJQUFJO1FBQ2hCQyxZQUFZLEVBQUVwQixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZCb0IsZ0JBQWdCLEVBQUVyQixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO1FBQzNCcUIsYUFBYSxFQUFFdEIsSUFBSSxDQUFDQyxFQUFFLENBQUM7TUFDekIsQ0FBQztJQUFBLENBQUMsQ0FBQztJQUVILElBQUFvRyxRQUFBLEdBQXNCLElBQUFqQyxtQkFBTSxFQUFDLElBQUFqQixXQUFBLENBQUFrQixHQUFBLEVBQUNuQixtQkFBQSxDQUFBbkQsT0FBa0IsSUFBRSxDQUFDLENBQUM7TUFBNUN1RSxTQUFTLEdBQUErQixRQUFBLENBQVQvQixTQUFTO0lBRWpCLE1BQU0sSUFBQUMsb0JBQU8sRUFBQyxZQUFNO01BQ2xCQyxNQUFNLENBQUNGLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDRyxVQUFVLENBQUMsQ0FBQztJQUM1QyxDQUFDLENBQUM7SUFFRm9CLHNCQUFTLENBQUNDLEtBQUssQ0FBQ3hCLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN0QyxNQUFNLElBQUFDLG9CQUFPLEVBQUMsWUFBTTtNQUNsQkMsTUFBTSxDQUFDckUseUJBQXlCLENBQUMsQ0FBQ21HLG9CQUFvQixDQUFDdEIsYUFBYSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7TUFDM0VSLE1BQU0sQ0FBQ2xFLFVBQVUsQ0FBQyxDQUFDMEYsZ0JBQWdCLENBQUMsQ0FBQztJQUN2QyxDQUFDLENBQUM7RUFDSixDQUFDLEVBQUM7RUFFRjlCLElBQUksQ0FBQyxrRUFBa0UsTUFBQXBCLGtCQUFBLENBQUEvQyxPQUFBLEVBQUUsYUFBWTtJQUNuRixJQUFNaUYsYUFBYSxHQUFHLENBQ3BCO01BQ0VDLEVBQUUsRUFBRSxJQUFJO01BQ1JDLElBQUksRUFBRSxRQUFRO01BQ2RDLE9BQU8sRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO01BQ3hCQyxhQUFhLEVBQUU7SUFDakIsQ0FBQyxDQUNGO0lBRUR2QyxPQUFPLENBQUMsb0NBQW9DLENBQUMsQ0FBQzlDLE9BQU8sQ0FBQytELGtCQUFrQixDQUFDO01BQUEsT0FBTztRQUM5RXZELGlCQUFpQixFQUFFeUUsYUFBYTtRQUNoQ3hFLFNBQVMsRUFBRSxLQUFLO1FBQ2hCQyxLQUFLLEVBQUUsSUFBSTtRQUNYQyxLQUFLLEVBQUU7VUFBRUMsWUFBWSxFQUFFO1FBQUksQ0FBQztRQUM1QkMsY0FBYyxFQUFFLElBQUk7UUFDcEJDLG9CQUFvQixFQUFFO01BQ3hCLENBQUM7SUFBQSxDQUFDLENBQUM7SUFFSCxJQUFNeUUsaUJBQWlCLEdBQUd6QyxPQUFPLENBQUMsa0NBQWtDLENBQUMsQ0FBQzlDLE9BQU87SUFDN0V1RixpQkFBaUIsQ0FBQ3hCLGtCQUFrQixDQUFDO01BQUEsT0FBTztRQUMxQ2hELGVBQWUsRUFBRWtFLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFDakNqRSxvQkFBb0IsRUFBRSxDQUFDO1FBQ3ZCQyxjQUFjLEVBQUVnRSxhQUFhLENBQUNTLE1BQU07UUFDcEN4RSxLQUFLLEVBQUUsQ0FBQztRQUNSQyxVQUFVLEVBQUUsS0FBSztRQUNqQkMsVUFBVSxFQUFFLEtBQUs7UUFDakJDLFlBQVksRUFBRXBCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7UUFDdkJvQixnQkFBZ0IsRUFBRXJCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7UUFDM0JxQixhQUFhLEVBQUV0QixJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUN6QixDQUFDO0lBQUEsQ0FBQyxDQUFDO0lBRUgsSUFBQXNHLFFBQUEsR0FBMkIsSUFBQW5DLG1CQUFNLEVBQUMsSUFBQWpCLFdBQUEsQ0FBQWtCLEdBQUEsRUFBQ25CLG1CQUFBLENBQUFuRCxPQUFrQixJQUFFLENBQUMsQ0FBQztNQUFqRHlHLGNBQWMsR0FBQUQsUUFBQSxDQUFkQyxjQUFjO0lBRXRCLE1BQU0sSUFBQWpDLG9CQUFPLEVBQUMsWUFBTTtNQUNsQkMsTUFBTSxDQUFDZ0MsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMvQixVQUFVLENBQUMsQ0FBQztJQUMvQyxDQUFDLENBQUM7SUFFRm9CLHNCQUFTLENBQUNDLEtBQUssQ0FBQ1UsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3pDaEMsTUFBTSxDQUFDbEUsVUFBVSxDQUFDLENBQUMwRixnQkFBZ0IsQ0FBQyxDQUFDO0VBQ3ZDLENBQUMsRUFBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==