{"version":3,"names":["_getJestObj","mock","_require","require","Text","Ionicons","props","_jsxRuntime","jsx","testID","name","children","container","standardContainer","standard","compactContainer","compact","highlightedContainer","highlighted","headerContainer","header","titleContainer","titleIcon","title","contentContainer","instructions","examplesContainer","sectionTitle","exampleItem","exampleText","tipsContainer","tipItem","tipIcon","tipText","_interopRequireDefault","_react","_reactNative","_InstructionBox","_require2","jest","describe","defaultProps","examples","tips","it","_render","render","default","Object","assign","getByText","queryByTestId","expect","toBeTruthy","_render2","variant","_render3","_render4","queryByText","toBeNull","_render5","_render6","customColor","_render7","primaryColor","_render8","_render9","_render0","initiallyExpanded","_render1","fireEvent","press"],"sources":["InstructionBox.test.js"],"sourcesContent":["import React from 'react';\r\nimport { render, fireEvent } from '@testing-library/react-native';\r\nimport InstructionBox from '../../../src/components/exercise-common/InstructionBox';\r\n\r\n// Mock des icônes et styles\r\njest.mock('@expo/vector-icons', () => {\r\n    const { Text } = require('react-native');\r\n    return {\r\n        Ionicons: (props) => <Text testID={`icon-${props.name}`}>{props.name}</Text>,\r\n    };\r\n});\r\n\r\njest.mock('../../../src/components/exercise-common/InstructionBox/style', () => ({\r\n    container: { container: true },\r\n    standardContainer: { standard: true },\r\n    compactContainer: { compact: true },\r\n    highlightedContainer: { highlighted: true },\r\n    headerContainer: { header: true },\r\n    titleContainer: { titleContainer: true },\r\n    titleIcon: { titleIcon: true },\r\n    title: { title: true },\r\n    contentContainer: { contentContainer: true },\r\n    instructions: { instructions: true },\r\n    examplesContainer: { examplesContainer: true },\r\n    sectionTitle: { sectionTitle: true },\r\n    exampleItem: { exampleItem: true },\r\n    exampleText: { exampleText: true },\r\n    tipsContainer: { tipsContainer: true },\r\n    tipItem: { tipItem: true },\r\n    tipIcon: { tipIcon: true },\r\n    tipText: { tipText: true },\r\n}));\r\n\r\n\r\ndescribe('InstructionBox', () => {\r\n    const defaultProps = {\r\n        title: 'Test Instructions',\r\n        instructions: 'Test instruction text',\r\n        examples: ['Example 1', 'Example 2'],\r\n        tips: ['Tip 1', 'Tip 2'],\r\n    };\r\n\r\n    // --- Tests de rendu et de contenu ---\r\n    it('renders with standard variant by default', () => {\r\n        const { getByText, queryByTestId } = render(<InstructionBox {...defaultProps} />);\r\n        expect(getByText('Test Instructions')).toBeTruthy();\r\n        expect(getByText('Test instruction text')).toBeTruthy();\r\n        expect(getByText('Exemples:')).toBeTruthy();\r\n        expect(getByText('Example 1')).toBeTruthy();\r\n        expect(getByText('Astuces:')).toBeTruthy();\r\n        expect(getByText('Tip 1')).toBeTruthy();\r\n        expect(queryByTestId('icon-information-circle')).toBeTruthy();\r\n    });\r\n\r\n    it('renders with compact variant', () => {\r\n        const { getByText } = render(\r\n            <InstructionBox {...defaultProps} variant=\"compact\" />\r\n        );\r\n        expect(getByText('Test Instructions')).toBeTruthy();\r\n    });\r\n\r\n    it('renders with highlighted variant', () => {\r\n        const { getByText } = render(\r\n            <InstructionBox {...defaultProps} variant=\"highlighted\" />\r\n        );\r\n        expect(getByText('Test Instructions')).toBeTruthy();\r\n    });\r\n\r\n    it('renders without instructions when not provided', () => {\r\n        const { queryByText } = render(\r\n            <InstructionBox {...defaultProps} instructions={null} />\r\n        );\r\n        expect(queryByText('Test instruction text')).toBeNull();\r\n    });\r\n\r\n    it('renders without examples when empty array', () => {\r\n        const { queryByText } = render(\r\n            <InstructionBox {...defaultProps} examples={[]} />\r\n        );\r\n        expect(queryByText('Exemples:')).toBeNull();\r\n    });\r\n\r\n    it('renders without tips when empty array', () => {\r\n        const { queryByText } = render(\r\n            <InstructionBox {...defaultProps} tips={[]} />\r\n        );\r\n        expect(queryByText('Astuces:')).toBeNull();\r\n    });\r\n\r\n    it('applies custom primary color', () => {\r\n        const customColor = '#FF0000';\r\n        const { getByText } = render(\r\n            <InstructionBox {...defaultProps} primaryColor={customColor} />\r\n        );\r\n        expect(getByText('Test Instructions')).toBeTruthy();\r\n    });\r\n\r\n    it('renders default title when not provided', () => {\r\n      const { getByText } = render(<InstructionBox />);\r\n      expect(getByText('Instructions')).toBeTruthy();\r\n    });\r\n\r\n    // --- Tests de comportement ---\r\n    it('starts expanded by default', () => {\r\n        const { getByText } = render(<InstructionBox {...defaultProps} />);\r\n        // Le contenu devrait être visible\r\n        expect(getByText('Test instruction text')).toBeTruthy();\r\n    });\r\n\r\n    it('starts collapsed when initiallyExpanded is false', () => {\r\n        const { queryByText } = render(\r\n            <InstructionBox {...defaultProps} initiallyExpanded={false} />\r\n        );\r\n        // Le contenu ne devrait pas être visible\r\n        expect(queryByText('Test instruction text')).toBeNull();\r\n    });\r\n\r\n    it('toggles expansion when header is pressed', () => {\r\n        const { getByText, queryByText } = render(\r\n            <InstructionBox {...defaultProps} initiallyExpanded={false} />\r\n        );\r\n\r\n        // Le contenu est initialement caché\r\n        expect(queryByText('Test instruction text')).toBeNull();\r\n\r\n        // Clique pour expand\r\n        fireEvent.press(getByText('Test Instructions'));\r\n\r\n        // Le contenu devrait maintenant être visible\r\n        expect(getByText('Test instruction text')).toBeTruthy();\r\n\r\n        // Clique de nouveau pour collapse\r\n        fireEvent.press(getByText('Test Instructions'));\r\n\r\n        // Le contenu devrait être à nouveau caché\r\n        expect(queryByText('Test instruction text')).toBeNull();\r\n    });\r\n});"],"mappings":"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","ignoreList":[]}