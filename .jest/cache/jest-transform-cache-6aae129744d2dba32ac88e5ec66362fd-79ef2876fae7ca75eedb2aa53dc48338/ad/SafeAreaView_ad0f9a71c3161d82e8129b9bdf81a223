e01fa51b1fedffd828e03715b952c815
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Platform = _interopRequireDefault(require("../../Utilities/Platform"));
var _View = _interopRequireDefault(require("../View/View"));
var React = _interopRequireWildcard(require("react"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var exported = _Platform.default.select({
  ios: require('./RCTSafeAreaViewNativeComponent').default,
  default: _View.default
});
var _default = exports.default = exported;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfUGxhdGZvcm0iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9WaWV3IiwiUmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZXhwb3J0ZWQiLCJQbGF0Zm9ybSIsInNlbGVjdCIsImlvcyIsIlZpZXciLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJTYWZlQXJlYVZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCB0eXBlIHtWaWV3UHJvcHN9IGZyb20gJy4uL1ZpZXcvVmlld1Byb3BUeXBlcyc7XG5cbmltcG9ydCBQbGF0Zm9ybSBmcm9tICcuLi8uLi9VdGlsaXRpZXMvUGxhdGZvcm0nO1xuaW1wb3J0IFZpZXcgZnJvbSAnLi4vVmlldy9WaWV3JztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBSZW5kZXJzIG5lc3RlZCBjb250ZW50IGFuZCBhdXRvbWF0aWNhbGx5IGFwcGxpZXMgcGFkZGluZ3MgcmVmbGVjdCB0aGUgcG9ydGlvblxuICogb2YgdGhlIHZpZXcgdGhhdCBpcyBub3QgY292ZXJlZCBieSBuYXZpZ2F0aW9uIGJhcnMsIHRhYiBiYXJzLCB0b29sYmFycywgYW5kXG4gKiBvdGhlciBhbmNlc3RvciB2aWV3cy5cbiAqXG4gKiBNb3Jlb3ZlciwgYW5kIG1vc3QgaW1wb3J0YW50bHksIFNhZmUgQXJlYSdzIHBhZGRpbmdzIHJlZmxlY3QgcGh5c2ljYWxcbiAqIGxpbWl0YXRpb24gb2YgdGhlIHNjcmVlbiwgc3VjaCBhcyByb3VuZGVkIGNvcm5lcnMgb3IgY2FtZXJhIG5vdGNoZXMgKGFrYVxuICogc2Vuc29yIGhvdXNpbmcgYXJlYSBvbiBpUGhvbmUgWCkuXG4gKi9cbmNvbnN0IGV4cG9ydGVkOiBSZWFjdC5BYnN0cmFjdENvbXBvbmVudDxcbiAgVmlld1Byb3BzLFxuICBSZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBWaWV3Pixcbj4gPSBQbGF0Zm9ybS5zZWxlY3Qoe1xuICBpb3M6IHJlcXVpcmUoJy4vUkNUU2FmZUFyZWFWaWV3TmF0aXZlQ29tcG9uZW50JykuZGVmYXVsdCxcbiAgZGVmYXVsdDogVmlldyxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBleHBvcnRlZDtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFZQSxJQUFBQSxTQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxLQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxLQUFBLEdBQUFDLHVCQUFBLENBQUFILE9BQUE7QUFBK0IsU0FBQUcsd0JBQUFDLENBQUEsRUFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFILHVCQUFBLFlBQUFBLHdCQUFBQyxDQUFBLEVBQUFDLENBQUEsU0FBQUEsQ0FBQSxJQUFBRCxDQUFBLElBQUFBLENBQUEsQ0FBQUssVUFBQSxTQUFBTCxDQUFBLE1BQUFNLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLEtBQUFDLFNBQUEsUUFBQUMsT0FBQSxFQUFBVixDQUFBLGlCQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFNBQUFRLENBQUEsTUFBQUYsQ0FBQSxHQUFBTCxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxRQUFBRyxDQUFBLENBQUFLLEdBQUEsQ0FBQVgsQ0FBQSxVQUFBTSxDQUFBLENBQUFNLEdBQUEsQ0FBQVosQ0FBQSxHQUFBTSxDQUFBLENBQUFPLEdBQUEsQ0FBQWIsQ0FBQSxFQUFBUSxDQUFBLGNBQUFNLEVBQUEsSUFBQWQsQ0FBQSxnQkFBQWMsRUFBQSxPQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWhCLENBQUEsRUFBQWMsRUFBQSxPQUFBUCxDQUFBLElBQUFELENBQUEsR0FBQVcsTUFBQSxDQUFBQyxjQUFBLEtBQUFELE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQW5CLENBQUEsRUFBQWMsRUFBQSxPQUFBUCxDQUFBLENBQUFLLEdBQUEsSUFBQUwsQ0FBQSxDQUFBTSxHQUFBLElBQUFQLENBQUEsQ0FBQUUsQ0FBQSxFQUFBTSxFQUFBLEVBQUFQLENBQUEsSUFBQUMsQ0FBQSxDQUFBTSxFQUFBLElBQUFkLENBQUEsQ0FBQWMsRUFBQSxXQUFBTixDQUFBLEtBQUFSLENBQUEsRUFBQUMsQ0FBQTtBQVcvQixJQUFNbUIsUUFHTCxHQUFHQyxpQkFBUSxDQUFDQyxNQUFNLENBQUM7RUFDbEJDLEdBQUcsRUFBRTNCLE9BQU8sQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDYyxPQUFPO0VBQ3hEQSxPQUFPLEVBQUVjO0FBQ1gsQ0FBQyxDQUFDO0FBQUMsSUFBQUMsUUFBQSxHQUFBQyxPQUFBLENBQUFoQixPQUFBLEdBRVlVLFFBQVEiLCJpZ25vcmVMaXN0IjpbXX0=