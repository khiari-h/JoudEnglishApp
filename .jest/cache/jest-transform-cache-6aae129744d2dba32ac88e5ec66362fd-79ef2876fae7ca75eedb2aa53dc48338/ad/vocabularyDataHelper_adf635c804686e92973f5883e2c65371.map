{"version":3,"names":["_2","_interopRequireDefault","require","_3","_4","_5","_6","_7","_bonus","_8","_9","_0","_1","_10","_11","_bonus2","formatVocabularyList","exports","data","arguments","length","undefined","map","entry","word","translation","convertFastVocabToExercises","fastVocab","_fastVocab$title","words","exercises","title","getVocabularyData","level","mode","_fastDataMap$level","fastDataMap","fastVocab1","fastVocab2","fastVocab3","fastVocab4","fastVocab5","fastVocab6","fastVocabBonus","classicDataMap","vocabulary1Data","vocabulary2Data","vocabulary3Data","vocabulary4Data","vocabulary5Data","vocabulary6Data","vocabularyBonusData","loadVocabularyData","_ref","_asyncToGenerator2","default","fastLoaders","_","bonus","loadFast","fastModule","vocab","fastExercises","loaders","load","mod","error","console","warn","_x","apply","getAvailableLevels","getLevelColor","_colors$level","colors","getLevelDisplayName","displayNames","getLevelDescription","descriptions","getLevelIcon","icons","isBonusLevel","getVocabularyStats","totalWords","totalExercises","reduce","sum","exercise","_exercise$words$lengt","_exercise$words","averageWordsPerExercise","Math","round"],"sources":["vocabularyDataHelper.js"],"sourcesContent":["/**\n * Formate une liste de mots pour garantir la présence des clés word et translation\n * @param {Array} data\n * @returns {Array}\n */\nexport const formatVocabularyList = (data = []) => {\n  return data.map(entry => ({\n    word: entry.word,\n    translation: entry.translation\n  }));\n};\n// src/utils/vocabulary/vocabularyDataHelper.js\n\n// Import des données de vocabulaire par niveau (6 niveaux + bonus)\nimport vocabulary1Data from \"../../data/vocabulary/1\";\nimport vocabulary2Data from \"../../data/vocabulary/2\";\nimport vocabulary3Data from \"../../data/vocabulary/3\";\nimport vocabulary4Data from \"../../data/vocabulary/4\";\nimport vocabulary5Data from \"../../data/vocabulary/5\";\nimport vocabulary6Data from \"../../data/vocabulary/6\";\nimport vocabularyBonusData from \"../../data/vocabulary/bonus\";\n\n// Import des données Fast Vocabulary (exports nommés, pas default)\nimport { vocab as fastVocab1 } from \"../../data/fastVocabulary/1\";\nimport { vocab as fastVocab2 } from \"../../data/fastVocabulary/2\";\nimport { vocab as fastVocab3 } from \"../../data/fastVocabulary/3\";\nimport { vocab as fastVocab4 } from \"../../data/fastVocabulary/4\";\nimport { vocab as fastVocab5 } from \"../../data/fastVocabulary/5\";\nimport { vocab as fastVocab6 } from \"../../data/fastVocabulary/6\";\nimport { vocab as fastVocabBonus } from \"../../data/fastVocabulary/bonus\";\n\n/**\n * Fonction pour convertir la structure Fast vers la structure attendue\n * @param {Object} fastVocab - Données fast vocabulary\n * @returns {Object} Structure convertie pour l'app\n */\nconst convertFastVocabToExercises = (fastVocab) => {\n  if (!fastVocab?.words) {\n    return { exercises: [] };\n  }\n\n  return {\n    exercises: [\n      {\n        title: fastVocab.title ?? \"Vocabulaire Fast\",\n        words: fastVocab.words,\n      },\n    ],\n  };\n};\n\n/**\n * Récupère les données de vocabulaire en fonction du niveau et du mode\n * @param {string} level - Le niveau de langue (1, 2, 3, 4, 5, 6, bonus)\n * @param {string} mode - Le mode ('classic' ou 'fast')\n * @returns {Object} Les données de vocabulaire pour le niveau et mode spécifiés\n */\nexport const getVocabularyData = (level, mode = \"classic\") => {\n  if (mode === \"fast\") {\n    const fastDataMap = {\n      \"1\": convertFastVocabToExercises(fastVocab1),\n      \"2\": convertFastVocabToExercises(fastVocab2),\n      \"3\": convertFastVocabToExercises(fastVocab3),\n      \"4\": convertFastVocabToExercises(fastVocab4),\n      \"5\": convertFastVocabToExercises(fastVocab5),\n      \"6\": convertFastVocabToExercises(fastVocab6),\n      \"bonus\": convertFastVocabToExercises(fastVocabBonus),\n    };\n\n    return fastDataMap[level] ?? convertFastVocabToExercises(fastVocab1);\n  }\n\n  // Mode classic (6 niveaux standards + bonus)\n  const classicDataMap = {\n    \"1\": vocabulary1Data,\n    \"2\": vocabulary2Data,\n    \"3\": vocabulary3Data,\n    \"4\": vocabulary4Data,\n    \"5\": vocabulary5Data,\n    \"6\": vocabulary6Data,\n    \"bonus\": vocabularyBonusData,\n  };\n\n  return classicDataMap[level] || vocabulary1Data;\n};\n\n/**\n * Chargement dynamique des données de vocabulaire par niveau et mode\n * Utilise import() pour éviter de charger tous les niveaux au démarrage.\n * Conserve getVocabularyData pour compatibilité.\n */\nexport const loadVocabularyData = async (level, mode = \"classic\") => {\n  try {\n    if (mode === \"fast\") {\n      const fastLoaders = {\n        \"1\": () => import(\"../../data/fastVocabulary/1\"),\n        \"2\": () => import(\"../../data/fastVocabulary/2\"),\n        \"3\": () => import(\"../../data/fastVocabulary/3\"),\n        \"4\": () => import(\"../../data/fastVocabulary/4\"),\n        \"5\": () => import(\"../../data/fastVocabulary/5\"),\n        \"6\": () => import(\"../../data/fastVocabulary/6\"),\n        bonus: () => import(\"../../data/fastVocabulary/bonus\"),\n      };\n      const loadFast = fastLoaders[level] || fastLoaders[\"1\"];\n      const fastModule = await loadFast();\n      const fastVocab = fastModule.vocab || fastModule.default || {};\n      return {\n        fastExercises: [  // ✅ STRUCTURE DIFFÉRENTE POUR FAST\n          {\n            title: fastVocab.title || \"Vocabulaire Fast\",\n            words: fastVocab.words || [],\n          },\n        ],\n      };\n    }\n\n    const loaders = {\n      \"1\": () => import(\"../../data/vocabulary/1\"),\n      \"2\": () => import(\"../../data/vocabulary/2\"),\n      \"3\": () => import(\"../../data/vocabulary/3\"),\n      \"4\": () => import(\"../../data/vocabulary/4\"),\n      \"5\": () => import(\"../../data/vocabulary/5\"),\n      \"6\": () => import(\"../../data/vocabulary/6\"),\n      bonus: () => import(\"../../data/vocabulary/bonus\"),\n    };\n\n    const load = loaders[level] || loaders[\"1\"];\n    const mod = await load();\n    return mod.default || mod;\n  } catch (error) {\n    // ✅ Gestion d'erreur appropriée\n    console.warn(`Error loading vocabulary data for level ${level}:`, error);\n    // Fallback: structure vide en cas d'échec\n    return { exercises: [] };\n  }\n};\n\n/**\n * Récupère la liste des niveaux disponibles selon le mode\n * @param {string} mode - Le mode ('classic' ou 'fast')\n * @returns {Array} Liste des niveaux disponibles\n */\nexport const getAvailableLevels = () => {\n  return [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"bonus\"];\n};\n\n/**\n * Récupère la couleur associée à un niveau de langue\n * @param {string} level - Le niveau de langue (1, 2, 3, 4, 5, 6, bonus)\n * @returns {string} Code couleur hexadécimal pour le niveau\n */\nexport const getLevelColor = (level) => {\n  const colors = {\n    \"1\": \"#3b82f6\", // Bleu - Niveau 1\n    \"2\": \"#8b5cf6\", // Violet - Niveau 2\n    \"3\": \"#10b981\", // Vert - Niveau 3\n    \"4\": \"#f59e0b\", // Orange - Niveau 4\n    \"5\": \"#ef4444\", // Rouge - Niveau 5\n    \"6\": \"#6366f1\", // Indigo - Niveau 6\n    \"bonus\": \"#9333EA\", // Violet premium - Bonus\n  };\n  return colors[level] ?? \"#5E60CE\"; // Couleur par défaut\n};\n\n/**\n * Récupère le nom d'affichage d'un niveau\n * @param {string} level - Le niveau de langue\n * @returns {string} Nom d'affichage du niveau\n */\nexport const getLevelDisplayName = (level) => {\n  const displayNames = {\n    \"1\": \"Niveau 1\",\n    \"2\": \"Niveau 2\", \n    \"3\": \"Niveau 3\",\n    \"4\": \"Niveau 4\",\n    \"5\": \"Niveau 5\",\n    \"6\": \"Niveau 6\",\n    \"bonus\": \"Bonus\",\n  };\n  return displayNames[level] || `Niveau ${level}`;\n};\n\n/**\n * Récupère la description d'un niveau\n * @param {string} level - Le niveau de langue\n * @returns {string} Description du niveau\n */\nexport const getLevelDescription = (level) => {\n  const descriptions = {\n    \"1\": \"Communication basique, expressions simples du quotidien\",\n    \"2\": \"Expressions simples, conversations courantes\",\n    \"3\": \"Communication claire sur des sujets familiers\",\n    \"4\": \"Communication complexe, discussions techniques\",\n    \"5\": \"Expression fluide, sujets complexes\",\n    \"6\": \"Niveau proche du locuteur natif, maîtrise de la langue\",\n    \"bonus\": \"Contenu exclusif et avancé\",\n  };\n  return descriptions[level] || \"Niveau de langue\";\n};\n\n/**\n * Récupère l'icône associée à un niveau\n * @param {string} level - Le niveau de langue\n * @returns {string} Emoji icône pour le niveau\n */\nexport const getLevelIcon = (level) => {\n  const icons = {\n    \"1\": \"🌱\",\n    \"2\": \"🌿\",\n    \"3\": \"🌳\",\n    \"4\": \"🚀\",\n    \"5\": \"💎\",\n    \"6\": \"🏆\",\n    \"bonus\": \"🔥\",\n  };\n  return icons[level] || \"📚\";\n};\n\n/**\n * Vérifie si un niveau est un niveau bonus\n * @param {string} level - Le niveau à vérifier\n * @returns {boolean} True si c'est un niveau bonus\n */\nexport const isBonusLevel = (level) => {\n  return level === \"bonus\";\n};\n\n/**\n * Récupère les statistiques d'un niveau de vocabulaire\n * @param {string} level - Le niveau de langue\n * @param {string} mode - Le mode ('classic' ou 'fast')\n * @returns {Object} Statistiques du niveau\n */\nexport const getVocabularyStats = (level, mode = \"classic\") => {\n  const data = getVocabularyData(level, mode);\n  \n  if (!data?.exercises) {\n    return { totalWords: 0, totalExercises: 0 };\n  }\n\n  const totalExercises = data.exercises.length;\n  const totalWords = data.exercises.reduce((sum, exercise) => {\n    return sum + (exercise.words?.length ?? 0);\n  }, 0);\n\n  return {\n    totalWords,\n    totalExercises,\n    averageWordsPerExercise: totalExercises > 0 ? Math.round(totalWords / totalExercises) : 0,\n  };\n};"],"mappings":"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","ignoreList":[]}