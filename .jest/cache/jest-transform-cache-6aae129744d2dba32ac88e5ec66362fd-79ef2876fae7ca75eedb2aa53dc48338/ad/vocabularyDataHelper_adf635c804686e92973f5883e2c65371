5b0e3c44ed4f62a1a85e83e072da81ca
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadVocabularyData = exports.isBonusLevel = exports.getVocabularyStats = exports.getVocabularyData = exports.getLevelIcon = exports.getLevelDisplayName = exports.getLevelDescription = exports.getLevelColor = exports.getAvailableLevels = exports.formatVocabularyList = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _2 = _interopRequireDefault(require("../../data/vocabulary/1"));
var _3 = _interopRequireDefault(require("../../data/vocabulary/2"));
var _4 = _interopRequireDefault(require("../../data/vocabulary/3"));
var _5 = _interopRequireDefault(require("../../data/vocabulary/4"));
var _6 = _interopRequireDefault(require("../../data/vocabulary/5"));
var _7 = _interopRequireDefault(require("../../data/vocabulary/6"));
var _bonus = _interopRequireDefault(require("../../data/vocabulary/bonus"));
var _8 = require("../../data/fastVocabulary/1");
var _9 = require("../../data/fastVocabulary/2");
var _0 = require("../../data/fastVocabulary/3");
var _1 = require("../../data/fastVocabulary/4");
var _10 = require("../../data/fastVocabulary/5");
var _11 = require("../../data/fastVocabulary/6");
var _bonus2 = require("../../data/fastVocabulary/bonus");
var formatVocabularyList = exports.formatVocabularyList = function formatVocabularyList() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return data.map(function (entry) {
    return {
      word: entry.word,
      translation: entry.translation
    };
  });
};
var convertFastVocabToExercises = function convertFastVocabToExercises(fastVocab) {
  var _fastVocab$title;
  if (!(fastVocab != null && fastVocab.words)) {
    return {
      exercises: []
    };
  }
  return {
    exercises: [{
      title: (_fastVocab$title = fastVocab.title) != null ? _fastVocab$title : "Vocabulaire Fast",
      words: fastVocab.words
    }]
  };
};
var getVocabularyData = exports.getVocabularyData = function getVocabularyData(level) {
  var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "classic";
  if (mode === "fast") {
    var _fastDataMap$level;
    var fastDataMap = {
      "1": convertFastVocabToExercises(_8.vocab),
      "2": convertFastVocabToExercises(_9.vocab),
      "3": convertFastVocabToExercises(_0.vocab),
      "4": convertFastVocabToExercises(_1.vocab),
      "5": convertFastVocabToExercises(_10.vocab),
      "6": convertFastVocabToExercises(_11.vocab),
      "bonus": convertFastVocabToExercises(_bonus2.vocab)
    };
    return (_fastDataMap$level = fastDataMap[level]) != null ? _fastDataMap$level : convertFastVocabToExercises(_8.vocab);
  }
  var classicDataMap = {
    "1": _2.default,
    "2": _3.default,
    "3": _4.default,
    "4": _5.default,
    "5": _6.default,
    "6": _7.default,
    "bonus": _bonus.default
  };
  return classicDataMap[level] || _2.default;
};
var loadVocabularyData = exports.loadVocabularyData = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (level) {
    var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "classic";
    try {
      if (mode === "fast") {
        var fastLoaders = {
          "1": function _() {
            return import("../../data/fastVocabulary/1");
          },
          "2": function _() {
            return import("../../data/fastVocabulary/2");
          },
          "3": function _() {
            return import("../../data/fastVocabulary/3");
          },
          "4": function _() {
            return import("../../data/fastVocabulary/4");
          },
          "5": function _() {
            return import("../../data/fastVocabulary/5");
          },
          "6": function _() {
            return import("../../data/fastVocabulary/6");
          },
          bonus: function bonus() {
            return import("../../data/fastVocabulary/bonus");
          }
        };
        var loadFast = fastLoaders[level] || fastLoaders["1"];
        var fastModule = yield loadFast();
        var fastVocab = fastModule.vocab || fastModule.default || {};
        return {
          fastExercises: [{
            title: fastVocab.title || "Vocabulaire Fast",
            words: fastVocab.words || []
          }]
        };
      }
      var loaders = {
        "1": function _() {
          return import("../../data/vocabulary/1");
        },
        "2": function _() {
          return import("../../data/vocabulary/2");
        },
        "3": function _() {
          return import("../../data/vocabulary/3");
        },
        "4": function _() {
          return import("../../data/vocabulary/4");
        },
        "5": function _() {
          return import("../../data/vocabulary/5");
        },
        "6": function _() {
          return import("../../data/vocabulary/6");
        },
        bonus: function bonus() {
          return import("../../data/vocabulary/bonus");
        }
      };
      var load = loaders[level] || loaders["1"];
      var mod = yield load();
      return mod.default || mod;
    } catch (error) {
      console.warn(`Error loading vocabulary data for level ${level}:`, error);
      return {
        exercises: []
      };
    }
  });
  return function loadVocabularyData(_x) {
    return _ref.apply(this, arguments);
  };
}();
var getAvailableLevels = exports.getAvailableLevels = function getAvailableLevels() {
  return ["1", "2", "3", "4", "5", "6", "bonus"];
};
var getLevelColor = exports.getLevelColor = function getLevelColor(level) {
  var _colors$level;
  var colors = {
    "1": "#3b82f6",
    "2": "#8b5cf6",
    "3": "#10b981",
    "4": "#f59e0b",
    "5": "#ef4444",
    "6": "#6366f1",
    "bonus": "#9333EA"
  };
  return (_colors$level = colors[level]) != null ? _colors$level : "#5E60CE";
};
var getLevelDisplayName = exports.getLevelDisplayName = function getLevelDisplayName(level) {
  var displayNames = {
    "1": "Niveau 1",
    "2": "Niveau 2",
    "3": "Niveau 3",
    "4": "Niveau 4",
    "5": "Niveau 5",
    "6": "Niveau 6",
    "bonus": "Bonus"
  };
  return displayNames[level] || `Niveau ${level}`;
};
var getLevelDescription = exports.getLevelDescription = function getLevelDescription(level) {
  var descriptions = {
    "1": "Communication basique, expressions simples du quotidien",
    "2": "Expressions simples, conversations courantes",
    "3": "Communication claire sur des sujets familiers",
    "4": "Communication complexe, discussions techniques",
    "5": "Expression fluide, sujets complexes",
    "6": "Niveau proche du locuteur natif, maîtrise de la langue",
    "bonus": "Contenu exclusif et avancé"
  };
  return descriptions[level] || "Niveau de langue";
};
var getLevelIcon = exports.getLevelIcon = function getLevelIcon(level) {
  var icons = {
    "1": "🌱",
    "2": "🌿",
    "3": "🌳",
    "4": "🚀",
    "5": "💎",
    "6": "🏆",
    "bonus": "🔥"
  };
  return icons[level] || "📚";
};
var isBonusLevel = exports.isBonusLevel = function isBonusLevel(level) {
  return level === "bonus";
};
var getVocabularyStats = exports.getVocabularyStats = function getVocabularyStats(level) {
  var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "classic";
  var data = getVocabularyData(level, mode);
  if (!(data != null && data.exercises)) {
    return {
      totalWords: 0,
      totalExercises: 0
    };
  }
  var totalExercises = data.exercises.length;
  var totalWords = data.exercises.reduce(function (sum, exercise) {
    var _exercise$words$lengt, _exercise$words;
    return sum + ((_exercise$words$lengt = (_exercise$words = exercise.words) == null ? void 0 : _exercise$words.length) != null ? _exercise$words$lengt : 0);
  }, 0);
  return {
    totalWords: totalWords,
    totalExercises: totalExercises,
    averageWordsPerExercise: totalExercises > 0 ? Math.round(totalWords / totalExercises) : 0
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,