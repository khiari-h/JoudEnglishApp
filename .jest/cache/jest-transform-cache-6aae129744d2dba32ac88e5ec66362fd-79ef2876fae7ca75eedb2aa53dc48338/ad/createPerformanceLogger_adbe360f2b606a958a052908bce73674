3e25cd0bf67c42b1abbc85f675069cf2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createPerformanceLogger;
exports.getCurrentTimestamp = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _infoLog = _interopRequireDefault(require("./infoLog"));
var _global$nativeQPLTime;
var PRINT_TO_CONSOLE = false;
var getCurrentTimestamp = exports.getCurrentTimestamp = (_global$nativeQPLTime = global.nativeQPLTimestamp) != null ? _global$nativeQPLTime : function () {
  return global.performance.now();
};
var PerformanceLogger = function () {
  function PerformanceLogger() {
    (0, _classCallCheck2.default)(this, PerformanceLogger);
    this._timespans = {};
    this._extras = {};
    this._points = {};
    this._pointExtras = {};
    this._closed = false;
  }
  return (0, _createClass2.default)(PerformanceLogger, [{
    key: "addTimespan",
    value: function addTimespan(key, startTime, endTime, startExtras, endExtras) {
      if (this._closed) {
        if (PRINT_TO_CONSOLE && __DEV__) {
          (0, _infoLog.default)('PerformanceLogger: addTimespan - has closed ignoring: ', key);
        }
        return;
      }
      if (this._timespans[key]) {
        if (PRINT_TO_CONSOLE && __DEV__) {
          (0, _infoLog.default)('PerformanceLogger: Attempting to add a timespan that already exists ', key);
        }
        return;
      }
      this._timespans[key] = {
        startTime: startTime,
        endTime: endTime,
        totalTime: endTime - (startTime || 0),
        startExtras: startExtras,
        endExtras: endExtras
      };
    }
  }, {
    key: "append",
    value: function append(performanceLogger) {
      this._timespans = Object.assign({}, performanceLogger.getTimespans(), this._timespans);
      this._extras = Object.assign({}, performanceLogger.getExtras(), this._extras);
      this._points = Object.assign({}, performanceLogger.getPoints(), this._points);
      this._pointExtras = Object.assign({}, performanceLogger.getPointExtras(), this._pointExtras);
    }
  }, {
    key: "clear",
    value: function clear() {
      this._timespans = {};
      this._extras = {};
      this._points = {};
      if (PRINT_TO_CONSOLE) {
        (0, _infoLog.default)('PerformanceLogger.js', 'clear');
      }
    }
  }, {
    key: "clearCompleted",
    value: function clearCompleted() {
      for (var _key in this._timespans) {
        var _this$_timespans$_key;
        if (((_this$_timespans$_key = this._timespans[_key]) == null ? void 0 : _this$_timespans$_key.totalTime) != null) {
          delete this._timespans[_key];
        }
      }
      this._extras = {};
      this._points = {};
      if (PRINT_TO_CONSOLE) {
        (0, _infoLog.default)('PerformanceLogger.js', 'clearCompleted');
      }
    }
  }, {
    key: "close",
    value: function close() {
      this._closed = true;
    }
  }, {
    key: "currentTimestamp",
    value: function currentTimestamp() {
      return getCurrentTimestamp();
    }
  }, {
    key: "getExtras",
    value: function getExtras() {
      return this._extras;
    }
  }, {
    key: "getPoints",
    value: function getPoints() {
      return this._points;
    }
  }, {
    key: "getPointExtras",
    value: function getPointExtras() {
      return this._pointExtras;
    }
  }, {
    key: "getTimespans",
    value: function getTimespans() {
      return this._timespans;
    }
  }, {
    key: "hasTimespan",
    value: function hasTimespan(key) {
      return !!this._timespans[key];
    }
  }, {
    key: "isClosed",
    value: function isClosed() {
      return this._closed;
    }
  }, {
    key: "logEverything",
    value: function logEverything() {
      if (PRINT_TO_CONSOLE) {
        for (var _key2 in this._timespans) {
          var _this$_timespans$_key2;
          if (((_this$_timespans$_key2 = this._timespans[_key2]) == null ? void 0 : _this$_timespans$_key2.totalTime) != null) {
            (0, _infoLog.default)(_key2 + ': ' + this._timespans[_key2].totalTime + 'ms');
          }
        }
        (0, _infoLog.default)(this._extras);
        for (var _key3 in this._points) {
          if (this._points[_key3] != null) {
            (0, _infoLog.default)(_key3 + ': ' + this._points[_key3] + 'ms');
          }
        }
      }
    }
  }, {
    key: "markPoint",
    value: function markPoint(key) {
      var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();
      var extras = arguments.length > 2 ? arguments[2] : undefined;
      if (this._closed) {
        if (PRINT_TO_CONSOLE && __DEV__) {
          (0, _infoLog.default)('PerformanceLogger: markPoint - has closed ignoring: ', key);
        }
        return;
      }
      if (this._points[key] != null) {
        if (PRINT_TO_CONSOLE && __DEV__) {
          (0, _infoLog.default)('PerformanceLogger: Attempting to mark a point that has been already logged ', key);
        }
        return;
      }
      this._points[key] = timestamp;
      if (extras) {
        this._pointExtras[key] = extras;
      }
    }
  }, {
    key: "removeExtra",
    value: function removeExtra(key) {
      var value = this._extras[key];
      delete this._extras[key];
      return value;
    }
  }, {
    key: "setExtra",
    value: function setExtra(key, value) {
      if (this._closed) {
        if (PRINT_TO_CONSOLE && __DEV__) {
          (0, _infoLog.default)('PerformanceLogger: setExtra - has closed ignoring: ', key);
        }
        return;
      }
      if (this._extras.hasOwnProperty(key)) {
        if (PRINT_TO_CONSOLE && __DEV__) {
          (0, _infoLog.default)('PerformanceLogger: Attempting to set an extra that already exists ', {
            key: key,
            currentValue: this._extras[key],
            attemptedValue: value
          });
        }
        return;
      }
      this._extras[key] = value;
    }
  }, {
    key: "startTimespan",
    value: function startTimespan(key) {
      var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();
      var extras = arguments.length > 2 ? arguments[2] : undefined;
      if (this._closed) {
        if (PRINT_TO_CONSOLE && __DEV__) {
          (0, _infoLog.default)('PerformanceLogger: startTimespan - has closed ignoring: ', key);
        }
        return;
      }
      if (this._timespans[key]) {
        if (PRINT_TO_CONSOLE && __DEV__) {
          (0, _infoLog.default)('PerformanceLogger: Attempting to start a timespan that already exists ', key);
        }
        return;
      }
      this._timespans[key] = {
        startTime: timestamp,
        startExtras: extras
      };
      if (PRINT_TO_CONSOLE) {
        (0, _infoLog.default)('PerformanceLogger.js', 'start: ' + key);
      }
    }
  }, {
    key: "stopTimespan",
    value: function stopTimespan(key) {
      var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();
      var extras = arguments.length > 2 ? arguments[2] : undefined;
      if (this._closed) {
        if (PRINT_TO_CONSOLE && __DEV__) {
          (0, _infoLog.default)('PerformanceLogger: stopTimespan - has closed ignoring: ', key);
        }
        return;
      }
      var timespan = this._timespans[key];
      if (!timespan || timespan.startTime == null) {
        if (PRINT_TO_CONSOLE && __DEV__) {
          (0, _infoLog.default)('PerformanceLogger: Attempting to end a timespan that has not started ', key);
        }
        return;
      }
      if (timespan.endTime != null) {
        if (PRINT_TO_CONSOLE && __DEV__) {
          (0, _infoLog.default)('PerformanceLogger: Attempting to end a timespan that has already ended ', key);
        }
        return;
      }
      timespan.endExtras = extras;
      timespan.endTime = timestamp;
      timespan.totalTime = timespan.endTime - (timespan.startTime || 0);
      if (PRINT_TO_CONSOLE) {
        (0, _infoLog.default)('PerformanceLogger.js', 'end: ' + key);
      }
    }
  }]);
}();
function createPerformanceLogger() {
  return new PerformanceLogger();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW5mb0xvZyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2dsb2JhbCRuYXRpdmVRUExUaW1lIiwiUFJJTlRfVE9fQ09OU09MRSIsImdldEN1cnJlbnRUaW1lc3RhbXAiLCJleHBvcnRzIiwiZ2xvYmFsIiwibmF0aXZlUVBMVGltZXN0YW1wIiwicGVyZm9ybWFuY2UiLCJub3ciLCJQZXJmb3JtYW5jZUxvZ2dlciIsIl9jbGFzc0NhbGxDaGVjazIiLCJkZWZhdWx0IiwiX3RpbWVzcGFucyIsIl9leHRyYXMiLCJfcG9pbnRzIiwiX3BvaW50RXh0cmFzIiwiX2Nsb3NlZCIsIl9jcmVhdGVDbGFzczIiLCJrZXkiLCJ2YWx1ZSIsImFkZFRpbWVzcGFuIiwic3RhcnRUaW1lIiwiZW5kVGltZSIsInN0YXJ0RXh0cmFzIiwiZW5kRXh0cmFzIiwiX19ERVZfXyIsImluZm9Mb2ciLCJ0b3RhbFRpbWUiLCJhcHBlbmQiLCJwZXJmb3JtYW5jZUxvZ2dlciIsIk9iamVjdCIsImFzc2lnbiIsImdldFRpbWVzcGFucyIsImdldEV4dHJhcyIsImdldFBvaW50cyIsImdldFBvaW50RXh0cmFzIiwiY2xlYXIiLCJjbGVhckNvbXBsZXRlZCIsIl90aGlzJF90aW1lc3BhbnMkX2tleSIsImNsb3NlIiwiY3VycmVudFRpbWVzdGFtcCIsImhhc1RpbWVzcGFuIiwiaXNDbG9zZWQiLCJsb2dFdmVyeXRoaW5nIiwiX3RoaXMkX3RpbWVzcGFucyRfa2V5MiIsIm1hcmtQb2ludCIsInRpbWVzdGFtcCIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsImV4dHJhcyIsInJlbW92ZUV4dHJhIiwic2V0RXh0cmEiLCJoYXNPd25Qcm9wZXJ0eSIsImN1cnJlbnRWYWx1ZSIsImF0dGVtcHRlZFZhbHVlIiwic3RhcnRUaW1lc3BhbiIsInN0b3BUaW1lc3BhbiIsInRpbWVzcGFuIiwiY3JlYXRlUGVyZm9ybWFuY2VMb2dnZXIiXSwic291cmNlcyI6WyJjcmVhdGVQZXJmb3JtYW5jZUxvZ2dlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0XG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IHR5cGUge1xuICBFeHRyYXMsXG4gIEV4dHJhVmFsdWUsXG4gIElQZXJmb3JtYW5jZUxvZ2dlcixcbiAgVGltZXNwYW4sXG59IGZyb20gJy4vSVBlcmZvcm1hbmNlTG9nZ2VyJztcblxuaW1wb3J0IGluZm9Mb2cgZnJvbSAnLi9pbmZvTG9nJztcblxuY29uc3QgUFJJTlRfVE9fQ09OU09MRTogZmFsc2UgPSBmYWxzZTsgLy8gVHlwZSBhcyBmYWxzZSB0byBwcmV2ZW50IGFjY2lkZW50YWxseSBjb21taXR0aW5nIGB0cnVlYDtcblxuZXhwb3J0IGNvbnN0IGdldEN1cnJlbnRUaW1lc3RhbXA6ICgpID0+IG51bWJlciA9XG4gIGdsb2JhbC5uYXRpdmVRUExUaW1lc3RhbXAgPz8gKCgpID0+IGdsb2JhbC5wZXJmb3JtYW5jZS5ub3coKSk7XG5cbmNsYXNzIFBlcmZvcm1hbmNlTG9nZ2VyIGltcGxlbWVudHMgSVBlcmZvcm1hbmNlTG9nZ2VyIHtcbiAgX3RpbWVzcGFuczoge1trZXk6IHN0cmluZ106ID9UaW1lc3Bhbn0gPSB7fTtcbiAgX2V4dHJhczoge1trZXk6IHN0cmluZ106ID9FeHRyYVZhbHVlfSA9IHt9O1xuICBfcG9pbnRzOiB7W2tleTogc3RyaW5nXTogP251bWJlcn0gPSB7fTtcbiAgX3BvaW50RXh0cmFzOiB7W2tleTogc3RyaW5nXTogP0V4dHJhcywgLi4ufSA9IHt9O1xuICBfY2xvc2VkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgYWRkVGltZXNwYW4oXG4gICAga2V5OiBzdHJpbmcsXG4gICAgc3RhcnRUaW1lOiBudW1iZXIsXG4gICAgZW5kVGltZTogbnVtYmVyLFxuICAgIHN0YXJ0RXh0cmFzPzogRXh0cmFzLFxuICAgIGVuZEV4dHJhcz86IEV4dHJhcyxcbiAgKSB7XG4gICAgaWYgKHRoaXMuX2Nsb3NlZCkge1xuICAgICAgaWYgKFBSSU5UX1RPX0NPTlNPTEUgJiYgX19ERVZfXykge1xuICAgICAgICBpbmZvTG9nKCdQZXJmb3JtYW5jZUxvZ2dlcjogYWRkVGltZXNwYW4gLSBoYXMgY2xvc2VkIGlnbm9yaW5nOiAnLCBrZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5fdGltZXNwYW5zW2tleV0pIHtcbiAgICAgIGlmIChQUklOVF9UT19DT05TT0xFICYmIF9fREVWX18pIHtcbiAgICAgICAgaW5mb0xvZyhcbiAgICAgICAgICAnUGVyZm9ybWFuY2VMb2dnZXI6IEF0dGVtcHRpbmcgdG8gYWRkIGEgdGltZXNwYW4gdGhhdCBhbHJlYWR5IGV4aXN0cyAnLFxuICAgICAgICAgIGtleSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl90aW1lc3BhbnNba2V5XSA9IHtcbiAgICAgIHN0YXJ0VGltZSxcbiAgICAgIGVuZFRpbWUsXG4gICAgICB0b3RhbFRpbWU6IGVuZFRpbWUgLSAoc3RhcnRUaW1lIHx8IDApLFxuICAgICAgc3RhcnRFeHRyYXMsXG4gICAgICBlbmRFeHRyYXMsXG4gICAgfTtcbiAgfVxuXG4gIGFwcGVuZChwZXJmb3JtYW5jZUxvZ2dlcjogSVBlcmZvcm1hbmNlTG9nZ2VyKSB7XG4gICAgdGhpcy5fdGltZXNwYW5zID0ge1xuICAgICAgLi4ucGVyZm9ybWFuY2VMb2dnZXIuZ2V0VGltZXNwYW5zKCksXG4gICAgICAuLi50aGlzLl90aW1lc3BhbnMsXG4gICAgfTtcbiAgICB0aGlzLl9leHRyYXMgPSB7Li4ucGVyZm9ybWFuY2VMb2dnZXIuZ2V0RXh0cmFzKCksIC4uLnRoaXMuX2V4dHJhc307XG4gICAgdGhpcy5fcG9pbnRzID0gey4uLnBlcmZvcm1hbmNlTG9nZ2VyLmdldFBvaW50cygpLCAuLi50aGlzLl9wb2ludHN9O1xuICAgIHRoaXMuX3BvaW50RXh0cmFzID0ge1xuICAgICAgLi4ucGVyZm9ybWFuY2VMb2dnZXIuZ2V0UG9pbnRFeHRyYXMoKSxcbiAgICAgIC4uLnRoaXMuX3BvaW50RXh0cmFzLFxuICAgIH07XG4gIH1cblxuICBjbGVhcigpIHtcbiAgICB0aGlzLl90aW1lc3BhbnMgPSB7fTtcbiAgICB0aGlzLl9leHRyYXMgPSB7fTtcbiAgICB0aGlzLl9wb2ludHMgPSB7fTtcbiAgICBpZiAoUFJJTlRfVE9fQ09OU09MRSkge1xuICAgICAgaW5mb0xvZygnUGVyZm9ybWFuY2VMb2dnZXIuanMnLCAnY2xlYXInKTtcbiAgICB9XG4gIH1cblxuICBjbGVhckNvbXBsZXRlZCgpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLl90aW1lc3BhbnMpIHtcbiAgICAgIGlmICh0aGlzLl90aW1lc3BhbnNba2V5XT8udG90YWxUaW1lICE9IG51bGwpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuX3RpbWVzcGFuc1trZXldO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9leHRyYXMgPSB7fTtcbiAgICB0aGlzLl9wb2ludHMgPSB7fTtcbiAgICBpZiAoUFJJTlRfVE9fQ09OU09MRSkge1xuICAgICAgaW5mb0xvZygnUGVyZm9ybWFuY2VMb2dnZXIuanMnLCAnY2xlYXJDb21wbGV0ZWQnKTtcbiAgICB9XG4gIH1cblxuICBjbG9zZSgpIHtcbiAgICB0aGlzLl9jbG9zZWQgPSB0cnVlO1xuICB9XG5cbiAgY3VycmVudFRpbWVzdGFtcCgpOiBudW1iZXIge1xuICAgIHJldHVybiBnZXRDdXJyZW50VGltZXN0YW1wKCk7XG4gIH1cblxuICBnZXRFeHRyYXMoKToge1trZXk6IHN0cmluZ106ID9FeHRyYVZhbHVlfSB7XG4gICAgcmV0dXJuIHRoaXMuX2V4dHJhcztcbiAgfVxuXG4gIGdldFBvaW50cygpOiB7W2tleTogc3RyaW5nXTogP251bWJlcn0ge1xuICAgIHJldHVybiB0aGlzLl9wb2ludHM7XG4gIH1cblxuICBnZXRQb2ludEV4dHJhcygpOiB7W2tleTogc3RyaW5nXTogP0V4dHJhc30ge1xuICAgIHJldHVybiB0aGlzLl9wb2ludEV4dHJhcztcbiAgfVxuXG4gIGdldFRpbWVzcGFucygpOiB7W2tleTogc3RyaW5nXTogP1RpbWVzcGFufSB7XG4gICAgcmV0dXJuIHRoaXMuX3RpbWVzcGFucztcbiAgfVxuXG4gIGhhc1RpbWVzcGFuKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhdGhpcy5fdGltZXNwYW5zW2tleV07XG4gIH1cblxuICBpc0Nsb3NlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fY2xvc2VkO1xuICB9XG5cbiAgbG9nRXZlcnl0aGluZygpIHtcbiAgICBpZiAoUFJJTlRfVE9fQ09OU09MRSkge1xuICAgICAgLy8gbG9nIHRpbWVzcGFuc1xuICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5fdGltZXNwYW5zKSB7XG4gICAgICAgIGlmICh0aGlzLl90aW1lc3BhbnNba2V5XT8udG90YWxUaW1lICE9IG51bGwpIHtcbiAgICAgICAgICBpbmZvTG9nKGtleSArICc6ICcgKyB0aGlzLl90aW1lc3BhbnNba2V5XS50b3RhbFRpbWUgKyAnbXMnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBsb2cgZXh0cmFzXG4gICAgICBpbmZvTG9nKHRoaXMuX2V4dHJhcyk7XG5cbiAgICAgIC8vIGxvZyBwb2ludHNcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuX3BvaW50cykge1xuICAgICAgICBpZiAodGhpcy5fcG9pbnRzW2tleV0gIT0gbnVsbCkge1xuICAgICAgICAgIGluZm9Mb2coa2V5ICsgJzogJyArIHRoaXMuX3BvaW50c1trZXldICsgJ21zJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBtYXJrUG9pbnQoXG4gICAga2V5OiBzdHJpbmcsXG4gICAgdGltZXN0YW1wPzogbnVtYmVyID0gZ2V0Q3VycmVudFRpbWVzdGFtcCgpLFxuICAgIGV4dHJhcz86IEV4dHJhcyxcbiAgKSB7XG4gICAgaWYgKHRoaXMuX2Nsb3NlZCkge1xuICAgICAgaWYgKFBSSU5UX1RPX0NPTlNPTEUgJiYgX19ERVZfXykge1xuICAgICAgICBpbmZvTG9nKCdQZXJmb3JtYW5jZUxvZ2dlcjogbWFya1BvaW50IC0gaGFzIGNsb3NlZCBpZ25vcmluZzogJywga2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3BvaW50c1trZXldICE9IG51bGwpIHtcbiAgICAgIGlmIChQUklOVF9UT19DT05TT0xFICYmIF9fREVWX18pIHtcbiAgICAgICAgaW5mb0xvZyhcbiAgICAgICAgICAnUGVyZm9ybWFuY2VMb2dnZXI6IEF0dGVtcHRpbmcgdG8gbWFyayBhIHBvaW50IHRoYXQgaGFzIGJlZW4gYWxyZWFkeSBsb2dnZWQgJyxcbiAgICAgICAgICBrZXksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX3BvaW50c1trZXldID0gdGltZXN0YW1wO1xuICAgIGlmIChleHRyYXMpIHtcbiAgICAgIHRoaXMuX3BvaW50RXh0cmFzW2tleV0gPSBleHRyYXM7XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlRXh0cmEoa2V5OiBzdHJpbmcpOiA/RXh0cmFWYWx1ZSB7XG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLl9leHRyYXNba2V5XTtcbiAgICBkZWxldGUgdGhpcy5fZXh0cmFzW2tleV07XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgc2V0RXh0cmEoa2V5OiBzdHJpbmcsIHZhbHVlOiBFeHRyYVZhbHVlKSB7XG4gICAgaWYgKHRoaXMuX2Nsb3NlZCkge1xuICAgICAgaWYgKFBSSU5UX1RPX0NPTlNPTEUgJiYgX19ERVZfXykge1xuICAgICAgICBpbmZvTG9nKCdQZXJmb3JtYW5jZUxvZ2dlcjogc2V0RXh0cmEgLSBoYXMgY2xvc2VkIGlnbm9yaW5nOiAnLCBrZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9leHRyYXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgaWYgKFBSSU5UX1RPX0NPTlNPTEUgJiYgX19ERVZfXykge1xuICAgICAgICBpbmZvTG9nKFxuICAgICAgICAgICdQZXJmb3JtYW5jZUxvZ2dlcjogQXR0ZW1wdGluZyB0byBzZXQgYW4gZXh0cmEgdGhhdCBhbHJlYWR5IGV4aXN0cyAnLFxuICAgICAgICAgIHtrZXksIGN1cnJlbnRWYWx1ZTogdGhpcy5fZXh0cmFzW2tleV0sIGF0dGVtcHRlZFZhbHVlOiB2YWx1ZX0sXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX2V4dHJhc1trZXldID0gdmFsdWU7XG4gIH1cblxuICBzdGFydFRpbWVzcGFuKFxuICAgIGtleTogc3RyaW5nLFxuICAgIHRpbWVzdGFtcD86IG51bWJlciA9IGdldEN1cnJlbnRUaW1lc3RhbXAoKSxcbiAgICBleHRyYXM/OiBFeHRyYXMsXG4gICkge1xuICAgIGlmICh0aGlzLl9jbG9zZWQpIHtcbiAgICAgIGlmIChQUklOVF9UT19DT05TT0xFICYmIF9fREVWX18pIHtcbiAgICAgICAgaW5mb0xvZyhcbiAgICAgICAgICAnUGVyZm9ybWFuY2VMb2dnZXI6IHN0YXJ0VGltZXNwYW4gLSBoYXMgY2xvc2VkIGlnbm9yaW5nOiAnLFxuICAgICAgICAgIGtleSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fdGltZXNwYW5zW2tleV0pIHtcbiAgICAgIGlmIChQUklOVF9UT19DT05TT0xFICYmIF9fREVWX18pIHtcbiAgICAgICAgaW5mb0xvZyhcbiAgICAgICAgICAnUGVyZm9ybWFuY2VMb2dnZXI6IEF0dGVtcHRpbmcgdG8gc3RhcnQgYSB0aW1lc3BhbiB0aGF0IGFscmVhZHkgZXhpc3RzICcsXG4gICAgICAgICAga2V5LFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX3RpbWVzcGFuc1trZXldID0ge1xuICAgICAgc3RhcnRUaW1lOiB0aW1lc3RhbXAsXG4gICAgICBzdGFydEV4dHJhczogZXh0cmFzLFxuICAgIH07XG4gICAgaWYgKFBSSU5UX1RPX0NPTlNPTEUpIHtcbiAgICAgIGluZm9Mb2coJ1BlcmZvcm1hbmNlTG9nZ2VyLmpzJywgJ3N0YXJ0OiAnICsga2V5KTtcbiAgICB9XG4gIH1cblxuICBzdG9wVGltZXNwYW4oXG4gICAga2V5OiBzdHJpbmcsXG4gICAgdGltZXN0YW1wPzogbnVtYmVyID0gZ2V0Q3VycmVudFRpbWVzdGFtcCgpLFxuICAgIGV4dHJhcz86IEV4dHJhcyxcbiAgKSB7XG4gICAgaWYgKHRoaXMuX2Nsb3NlZCkge1xuICAgICAgaWYgKFBSSU5UX1RPX0NPTlNPTEUgJiYgX19ERVZfXykge1xuICAgICAgICBpbmZvTG9nKCdQZXJmb3JtYW5jZUxvZ2dlcjogc3RvcFRpbWVzcGFuIC0gaGFzIGNsb3NlZCBpZ25vcmluZzogJywga2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB0aW1lc3BhbiA9IHRoaXMuX3RpbWVzcGFuc1trZXldO1xuICAgIGlmICghdGltZXNwYW4gfHwgdGltZXNwYW4uc3RhcnRUaW1lID09IG51bGwpIHtcbiAgICAgIGlmIChQUklOVF9UT19DT05TT0xFICYmIF9fREVWX18pIHtcbiAgICAgICAgaW5mb0xvZyhcbiAgICAgICAgICAnUGVyZm9ybWFuY2VMb2dnZXI6IEF0dGVtcHRpbmcgdG8gZW5kIGEgdGltZXNwYW4gdGhhdCBoYXMgbm90IHN0YXJ0ZWQgJyxcbiAgICAgICAgICBrZXksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aW1lc3Bhbi5lbmRUaW1lICE9IG51bGwpIHtcbiAgICAgIGlmIChQUklOVF9UT19DT05TT0xFICYmIF9fREVWX18pIHtcbiAgICAgICAgaW5mb0xvZyhcbiAgICAgICAgICAnUGVyZm9ybWFuY2VMb2dnZXI6IEF0dGVtcHRpbmcgdG8gZW5kIGEgdGltZXNwYW4gdGhhdCBoYXMgYWxyZWFkeSBlbmRlZCAnLFxuICAgICAgICAgIGtleSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aW1lc3Bhbi5lbmRFeHRyYXMgPSBleHRyYXM7XG4gICAgdGltZXNwYW4uZW5kVGltZSA9IHRpbWVzdGFtcDtcbiAgICB0aW1lc3Bhbi50b3RhbFRpbWUgPSB0aW1lc3Bhbi5lbmRUaW1lIC0gKHRpbWVzcGFuLnN0YXJ0VGltZSB8fCAwKTtcbiAgICBpZiAoUFJJTlRfVE9fQ09OU09MRSkge1xuICAgICAgaW5mb0xvZygnUGVyZm9ybWFuY2VMb2dnZXIuanMnLCAnZW5kOiAnICsga2V5KTtcbiAgICB9XG4gIH1cbn1cblxuLy8gUmUtZXhwb3J0aW5nIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3aXRoIGFsbCB0aGUgY2xpZW50cyB0aGF0XG4vLyBtYXkgc3RpbGwgaW1wb3J0IGl0IGZyb20gdGhpcyBtb2R1bGUuXG5leHBvcnQgdHlwZSB7RXh0cmFzLCBFeHRyYVZhbHVlLCBJUGVyZm9ybWFuY2VMb2dnZXIsIFRpbWVzcGFufTtcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGNyZWF0ZXMgcGVyZm9ybWFuY2UgbG9nZ2VycyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNvbGxlY3QgYW5kIGxvZ1xuICogdmFyaW91cyBwZXJmb3JtYW5jZSBkYXRhIHN1Y2ggYXMgdGltZXNwYW5zLCBwb2ludHMgYW5kIGV4dHJhcy5cbiAqIFRoZSBsb2dnZXJzIG5lZWQgdG8gaGF2ZSBtaW5pbWFsIG92ZXJoZWFkIHNpbmNlIHRoZXkncmUgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVQZXJmb3JtYW5jZUxvZ2dlcigpOiBJUGVyZm9ybWFuY2VMb2dnZXIge1xuICByZXR1cm4gbmV3IFBlcmZvcm1hbmNlTG9nZ2VyKCk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBaUJBLElBQUFBLFFBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUFnQyxJQUFBQyxxQkFBQTtBQUVoQyxJQUFNQyxnQkFBdUIsR0FBRyxLQUFLO0FBRTlCLElBQU1DLG1CQUFpQyxHQUFBQyxPQUFBLENBQUFELG1CQUFBLElBQUFGLHFCQUFBLEdBQzVDSSxNQUFNLENBQUNDLGtCQUFrQixZQUFBTCxxQkFBQSxHQUFLO0VBQUEsT0FBTUksTUFBTSxDQUFDRSxXQUFXLENBQUNDLEdBQUcsQ0FBQyxDQUFDO0FBQUEsQ0FBQztBQUFDLElBRTFEQyxpQkFBaUI7RUFBQSxTQUFBQSxrQkFBQTtJQUFBLElBQUFDLGdCQUFBLENBQUFDLE9BQUEsUUFBQUYsaUJBQUE7SUFBQSxLQUNyQkcsVUFBVSxHQUErQixDQUFDLENBQUM7SUFBQSxLQUMzQ0MsT0FBTyxHQUFpQyxDQUFDLENBQUM7SUFBQSxLQUMxQ0MsT0FBTyxHQUE2QixDQUFDLENBQUM7SUFBQSxLQUN0Q0MsWUFBWSxHQUFrQyxDQUFDLENBQUM7SUFBQSxLQUNoREMsT0FBTyxHQUFZLEtBQUs7RUFBQTtFQUFBLFdBQUFDLGFBQUEsQ0FBQU4sT0FBQSxFQUFBRixpQkFBQTtJQUFBUyxHQUFBO0lBQUFDLEtBQUEsRUFFeEIsU0FBQUMsV0FBV0EsQ0FDVEYsR0FBVyxFQUNYRyxTQUFpQixFQUNqQkMsT0FBZSxFQUNmQyxXQUFvQixFQUNwQkMsU0FBa0IsRUFDbEI7TUFDQSxJQUFJLElBQUksQ0FBQ1IsT0FBTyxFQUFFO1FBQ2hCLElBQUlkLGdCQUFnQixJQUFJdUIsT0FBTyxFQUFFO1VBQy9C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