d632eeb985c9afc5456f7547d750041a
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  var View = RN.View,
    Text = RN.Text,
    TouchableOpacity = RN.TouchableOpacity,
    TouchableWithoutFeedback = RN.TouchableWithoutFeedback,
    ScrollView = RN.ScrollView,
    KeyboardAvoidingView = RN.KeyboardAvoidingView;
  return Object.assign({}, RN, {
    Modal: function Modal(_ref) {
      var children = _ref.children,
        visible = _ref.visible,
        onRequestClose = _ref.onRequestClose;
      return visible ? (0, _jsxRuntime.jsx)(View, {
        testID: "rn-modal",
        children: children
      }) : null;
    },
    Dimensions: {
      get: function get() {
        return {
          width: 375,
          height: 667
        };
      }
    },
    Platform: {
      OS: 'ios'
    },
    Animated: {
      View: View,
      Value: (0, _createClass2.default)(function Value() {
        (0, _classCallCheck2.default)(this, Value);
        this.interpolate = function () {
          return 0;
        };
      }),
      timing: function timing() {
        return {
          start: jest.fn()
        };
      }
    }
  });
});
_getJestObj().mock('@expo/vector-icons', function () {
  return {
    Ionicons: function Ionicons(_ref2) {
      var name = _ref2.name,
        size = _ref2.size,
        color = _ref2.color,
        props = (0, _objectWithoutProperties2.default)(_ref2, _excluded);
      var React = require('react');
      var _require = require('react-native'),
        Text = _require.Text;
      return React.createElement(Text, Object.assign({}, props, {
        testID: `icon-${name}`
      }), name);
    }
  };
});
_getJestObj().mock('../../../src/components/ui/Modal/style', function () {
  return {
    modalContainer: {},
    backdrop: {},
    contentContainer: {},
    centerPosition: {},
    bottomPosition: {},
    topPosition: {},
    header: {},
    title: {},
    closeButton: {},
    body: {},
    scrollableBody: {},
    scrollableContent: {},
    footer: {},
    keyboardAvoidingView: {}
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Modal = _interopRequireDefault(require("../../../../src/components/ui/Modal"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["name", "size", "color"];
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Modal', function () {
  var mockOnClose = jest.fn();
  beforeEach(function () {
    mockOnClose.mockClear();
  });
  it('ne devrait pas rendre le contenu si visible est faux', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        visible: false,
        onClose: mockOnClose,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Contenu du modal"
        })
      })),
      queryByText = _render.queryByText;
    expect(queryByText('Contenu du modal')).toBeNull();
  });
  it('devrait rendre le contenu si visible est vrai', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        visible: true,
        onClose: mockOnClose,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Contenu du modal"
        })
      })),
      getByText = _render2.getByText;
    expect(getByText('Contenu du modal')).toBeTruthy();
  });
  it('devrait appeler onClose quand le fond est pressé et closeOnBackdropPress est vrai', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        visible: true,
        onClose: mockOnClose,
        closeOnBackdropPress: true,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Contenu du modal"
        })
      })),
      getByTestId = _render3.getByTestId;
    var backdrop = getByTestId('modal-backdrop');
    _reactNative.fireEvent.press(backdrop);
    expect(mockOnClose).toHaveBeenCalledTimes(1);
  });
  it('ne devrait pas appeler onClose quand le fond est pressé et closeOnBackdropPress est faux', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        visible: true,
        onClose: mockOnClose,
        closeOnBackdropPress: false,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Contenu du modal"
        })
      })),
      getByTestId = _render4.getByTestId;
    var backdrop = getByTestId('modal-backdrop');
    _reactNative.fireEvent.press(backdrop);
    expect(mockOnClose).not.toHaveBeenCalled();
  });
  it('devrait rendre le titre si fourni', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        visible: true,
        onClose: mockOnClose,
        title: "Titre du Modal",
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Contenu"
        })
      })),
      getByText = _render5.getByText;
    expect(getByText('Titre du Modal')).toBeTruthy();
  });
  it('devrait afficher le bouton de fermeture par défaut', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        visible: true,
        onClose: mockOnClose,
        title: "Test",
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Contenu"
        })
      })),
      getByTestId = _render6.getByTestId;
    expect(getByTestId('icon-close')).toBeTruthy();
  });
  it('ne devrait pas afficher le bouton de fermeture si showCloseButton est false', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        visible: true,
        onClose: mockOnClose,
        title: "Test",
        showCloseButton: false,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Contenu"
        })
      })),
      queryByTestId = _render7.queryByTestId;
    expect(queryByTestId('icon-close')).toBeNull();
  });
  it('devrait appeler onClose quand le bouton de fermeture est pressé', function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        visible: true,
        onClose: mockOnClose,
        title: "Test",
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Contenu"
        })
      })),
      getByTestId = _render8.getByTestId;
    var closeButton = getByTestId('icon-close').parent;
    _reactNative.fireEvent.press(closeButton);
    expect(mockOnClose).toHaveBeenCalledTimes(1);
  });
  it('devrait rendre le footer si fourni', function () {
    var footer = (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: "Footer content"
    });
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        visible: true,
        onClose: mockOnClose,
        footer: footer,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Contenu"
        })
      })),
      getByText = _render9.getByText;
    expect(getByText('Footer content')).toBeTruthy();
  });
  it('devrait utiliser ScrollView si scrollable est true', function () {
    var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        visible: true,
        onClose: mockOnClose,
        scrollable: true,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "scrollable-content",
          children: "Contenu scrollable"
        })
      })),
      getByTestId = _render0.getByTestId;
    expect(getByTestId('scrollable-content')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,