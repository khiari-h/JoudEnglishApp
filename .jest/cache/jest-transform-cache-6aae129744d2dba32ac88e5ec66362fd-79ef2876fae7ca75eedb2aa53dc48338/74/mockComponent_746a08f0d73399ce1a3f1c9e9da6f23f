c8372010336ca9b274da1e844ceadcd4
'use strict';

var _classCallCheck = require("@babel/runtime/helpers/classCallCheck");
var _createClass = require("@babel/runtime/helpers/createClass");
var _possibleConstructorReturn = require("@babel/runtime/helpers/possibleConstructorReturn");
var _getPrototypeOf = require("@babel/runtime/helpers/getPrototypeOf");
var _inherits = require("@babel/runtime/helpers/inherits");
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
module.exports = function (moduleName, instanceMethods, isESModule) {
  var _Class;
  var RealComponent = isESModule ? jest.requireActual(moduleName).default : jest.requireActual(moduleName);
  var React = require('react');
  var SuperClass = typeof RealComponent === 'function' && RealComponent.prototype.constructor instanceof React.Component ? RealComponent : React.Component;
  var name = RealComponent.displayName || RealComponent.name || (RealComponent.render ? RealComponent.render.displayName || RealComponent.render.name : 'Unknown');
  var nameWithoutPrefix = name.replace(/^(RCT|RK)/, '');
  var Component = (_Class = function (_SuperClass) {
    function Component() {
      _classCallCheck(this, Component);
      return _callSuper(this, Component, arguments);
    }
    _inherits(Component, _SuperClass);
    return _createClass(Component, [{
      key: "render",
      value: function render() {
        var _this = this;
        var props = Object.assign({}, RealComponent.defaultProps);
        if (this.props) {
          Object.keys(this.props).forEach(function (prop) {
            if (_this.props[prop] !== undefined) {
              props[prop] = _this.props[prop];
            }
          });
        }
        return React.createElement(nameWithoutPrefix, props, this.props.children);
      }
    }]);
  }(SuperClass), _Class.displayName = 'Component', _Class);
  Object.defineProperty(Component, 'name', {
    value: name,
    writable: false,
    enumerable: false,
    configurable: true
  });
  Component.displayName = nameWithoutPrefix;
  Object.keys(RealComponent).forEach(function (classStatic) {
    Component[classStatic] = RealComponent[classStatic];
  });
  if (instanceMethods != null) {
    Object.assign(Component.prototype, instanceMethods);
  }
  return Component;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY2xhc3NDYWxsQ2hlY2siLCJyZXF1aXJlIiwiX2NyZWF0ZUNsYXNzIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfZ2V0UHJvdG90eXBlT2YiLCJfaW5oZXJpdHMiLCJfY2FsbFN1cGVyIiwidCIsIm8iLCJlIiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJjb25zdHJ1Y3RvciIsImFwcGx5IiwiQm9vbGVhbiIsInByb3RvdHlwZSIsInZhbHVlT2YiLCJjYWxsIiwibW9kdWxlIiwiZXhwb3J0cyIsIm1vZHVsZU5hbWUiLCJpbnN0YW5jZU1ldGhvZHMiLCJpc0VTTW9kdWxlIiwiX0NsYXNzIiwiUmVhbENvbXBvbmVudCIsImplc3QiLCJyZXF1aXJlQWN0dWFsIiwiZGVmYXVsdCIsIlJlYWN0IiwiU3VwZXJDbGFzcyIsIkNvbXBvbmVudCIsIm5hbWUiLCJkaXNwbGF5TmFtZSIsInJlbmRlciIsIm5hbWVXaXRob3V0UHJlZml4IiwicmVwbGFjZSIsIl9TdXBlckNsYXNzIiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJfdGhpcyIsInByb3BzIiwiT2JqZWN0IiwiYXNzaWduIiwiZGVmYXVsdFByb3BzIiwia2V5cyIsImZvckVhY2giLCJwcm9wIiwidW5kZWZpbmVkIiwiY3JlYXRlRWxlbWVudCIsImNoaWxkcmVuIiwiZGVmaW5lUHJvcGVydHkiLCJ3cml0YWJsZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJjbGFzc1N0YXRpYyJdLCJzb3VyY2VzIjpbIm1vY2tDb21wb25lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gKG1vZHVsZU5hbWUsIGluc3RhbmNlTWV0aG9kcywgaXNFU01vZHVsZSkgPT4ge1xuICBjb25zdCBSZWFsQ29tcG9uZW50ID0gaXNFU01vZHVsZVxuICAgID8gamVzdC5yZXF1aXJlQWN0dWFsKG1vZHVsZU5hbWUpLmRlZmF1bHRcbiAgICA6IGplc3QucmVxdWlyZUFjdHVhbChtb2R1bGVOYW1lKTtcbiAgY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG4gIGNvbnN0IFN1cGVyQ2xhc3MgPVxuICAgIHR5cGVvZiBSZWFsQ29tcG9uZW50ID09PSAnZnVuY3Rpb24nICYmXG4gICAgUmVhbENvbXBvbmVudC5wcm90b3R5cGUuY29uc3RydWN0b3IgaW5zdGFuY2VvZiBSZWFjdC5Db21wb25lbnRcbiAgICAgID8gUmVhbENvbXBvbmVudFxuICAgICAgOiBSZWFjdC5Db21wb25lbnQ7XG5cbiAgY29uc3QgbmFtZSA9XG4gICAgUmVhbENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fFxuICAgIFJlYWxDb21wb25lbnQubmFtZSB8fFxuICAgIChSZWFsQ29tcG9uZW50LnJlbmRlciAvLyBoYW5kbGUgUmVhY3QuZm9yd2FyZFJlZlxuICAgICAgPyBSZWFsQ29tcG9uZW50LnJlbmRlci5kaXNwbGF5TmFtZSB8fCBSZWFsQ29tcG9uZW50LnJlbmRlci5uYW1lXG4gICAgICA6ICdVbmtub3duJyk7XG5cbiAgY29uc3QgbmFtZVdpdGhvdXRQcmVmaXggPSBuYW1lLnJlcGxhY2UoL14oUkNUfFJLKS8sICcnKTtcblxuICBjb25zdCBDb21wb25lbnQgPSBjbGFzcyBleHRlbmRzIFN1cGVyQ2xhc3Mge1xuICAgIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdDb21wb25lbnQnO1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgY29uc3QgcHJvcHMgPSBPYmplY3QuYXNzaWduKHt9LCBSZWFsQ29tcG9uZW50LmRlZmF1bHRQcm9wcyk7XG5cbiAgICAgIGlmICh0aGlzLnByb3BzKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMucHJvcHMpLmZvckVhY2gocHJvcCA9PiB7XG4gICAgICAgICAgLy8gV2UgY2FuJ3QganVzdCBhc3NpZ24gcHJvcHMgb24gdG9wIG9mIGRlZmF1bHRQcm9wc1xuICAgICAgICAgIC8vIGJlY2F1c2UgUmVhY3QgdHJlYXRzIHVuZGVmaW5lZCBhcyBzcGVjaWFsIGFuZCBkaWZmZXJlbnQgZnJvbSBudWxsLlxuICAgICAgICAgIC8vIElmIGEgcHJvcCBpcyBzcGVjaWZpZWQgYnV0IHNldCB0byB1bmRlZmluZWQgaXQgaXMgaWdub3JlZCBhbmQgdGhlXG4gICAgICAgICAgLy8gZGVmYXVsdCBwcm9wIGlzIHVzZWQgaW5zdGVhZC4gSWYgaXQgaXMgc2V0IHRvIG51bGwsIHRoZW4gdGhlXG4gICAgICAgICAgLy8gbnVsbCB2YWx1ZSBvdmVyd3JpdGVzIHRoZSBkZWZhdWx0IHZhbHVlLlxuICAgICAgICAgIGlmICh0aGlzLnByb3BzW3Byb3BdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHByb3BzW3Byb3BdID0gdGhpcy5wcm9wc1twcm9wXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChuYW1lV2l0aG91dFByZWZpeCwgcHJvcHMsIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgIH1cbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29tcG9uZW50LCAnbmFtZScsIHtcbiAgICB2YWx1ZTogbmFtZSxcbiAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICB9KTtcblxuICBDb21wb25lbnQuZGlzcGxheU5hbWUgPSBuYW1lV2l0aG91dFByZWZpeDtcblxuICBPYmplY3Qua2V5cyhSZWFsQ29tcG9uZW50KS5mb3JFYWNoKGNsYXNzU3RhdGljID0+IHtcbiAgICBDb21wb25lbnRbY2xhc3NTdGF0aWNdID0gUmVhbENvbXBvbmVudFtjbGFzc1N0YXRpY107XG4gIH0pO1xuXG4gIGlmIChpbnN0YW5jZU1ldGhvZHMgIT0gbnVsbCkge1xuICAgIE9iamVjdC5hc3NpZ24oQ29tcG9uZW50LnByb3RvdHlwZSwgaW5zdGFuY2VNZXRob2RzKTtcbiAgfVxuXG4gIHJldHVybiBDb21wb25lbnQ7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFTQSxZQUFZOztBQUFDLElBQUFBLGVBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUFBLElBQUFFLDBCQUFBLEdBQUFGLE9BQUE7QUFBQSxJQUFBRyxlQUFBLEdBQUFILE9BQUE7QUFBQSxJQUFBSSxTQUFBLEdBQUFKLE9BQUE7QUFBQSxTQUFBSyxXQUFBQyxDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxXQUFBRCxDQUFBLEdBQUFKLGVBQUEsQ0FBQUksQ0FBQSxHQUFBTCwwQkFBQSxDQUFBSSxDQUFBLEVBQUFHLHlCQUFBLEtBQUFDLE9BQUEsQ0FBQUMsU0FBQSxDQUFBSixDQUFBLEVBQUFDLENBQUEsUUFBQUwsZUFBQSxDQUFBRyxDQUFBLEVBQUFNLFdBQUEsSUFBQUwsQ0FBQSxDQUFBTSxLQUFBLENBQUFQLENBQUEsRUFBQUUsQ0FBQTtBQUFBLFNBQUFDLDBCQUFBLGNBQUFILENBQUEsSUFBQVEsT0FBQSxDQUFBQyxTQUFBLENBQUFDLE9BQUEsQ0FBQUMsSUFBQSxDQUFBUCxPQUFBLENBQUFDLFNBQUEsQ0FBQUcsT0FBQSxpQ0FBQVIsQ0FBQSxhQUFBRyx5QkFBQSxZQUFBQSwwQkFBQSxhQUFBSCxDQUFBO0FBRWJZLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFVBQUNDLFVBQVUsRUFBRUMsZUFBZSxFQUFFQyxVQUFVLEVBQUs7RUFBQSxJQUFBQyxNQUFBO0VBQzVELElBQU1DLGFBQWEsR0FBR0YsVUFB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