f5c964dac38cd5b9c707983b4e106b28
_getJestObj().mock('expo-linear-gradient', function () {
  var _require = require('react-native'),
    View = _require.View;
  return {
    LinearGradient: function LinearGradient(props) {
      return (0, _jsxRuntime.jsx)(View, Object.assign({}, props));
    }
  };
});
_getJestObj().mock('@expo/vector-icons', function () {
  var _require2 = require('react-native'),
    Text = _require2.Text;
  return {
    Ionicons: function Ionicons(props) {
      return (0, _jsxRuntime.jsx)(Text, {
        testID: `icon-${props.name}`,
        children: props.name
      });
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ResultsScreen = _interopRequireDefault(require("../../../src/components/exercise-common/ResultsScreen"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ResultsScreen', function () {
  beforeAll(function () {
    jest.useFakeTimers();
  });
  afterAll(function () {
    jest.useRealTimers();
  });
  beforeEach(function () {
    _reactNative2.Share.share = jest.fn();
  });
  var defaultProps = {
    totalQuestions: 10,
    correctAnswers: 8,
    incorrectAnswers: 1,
    skippedAnswers: 1,
    timeTaken: '01:30',
    exerciseType: 'Vocabulary',
    level: 'B1',
    levelColor: '#3B82F6',
    feedback: '',
    onRetry: jest.fn(),
    onContinue: jest.fn(),
    showDetailedResults: false,
    detailedResults: []
  };
  afterEach(function () {
    jest.clearAllMocks();
    jest.runOnlyPendingTimers();
  });
  it('renders basic statistics correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps))),
      getByText = _render.getByText;
    expect(getByText('80%')).toBeTruthy();
    expect(getByText('8/10')).toBeTruthy();
    expect(getByText('Correctes')).toBeTruthy();
    expect(getByText('8')).toBeTruthy();
    expect(getByText('Incorrectes')).toBeTruthy();
    expect(getByText('1')).toBeTruthy();
    expect(getByText('Passées')).toBeTruthy();
    expect(getByText('1')).toBeTruthy();
    expect(getByText('Temps')).toBeTruthy();
    expect(getByText('01:30')).toBeTruthy();
  });
  it('displays feedback when provided and hides it otherwise', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        feedback: "Great job!"
      }))),
      getByText = _render2.getByText,
      queryByText = _render2.queryByText;
    expect(getByText('Conseils pour progresser')).toBeTruthy();
    expect(getByText('Great job!')).toBeTruthy();
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        feedback: ""
      }))),
      queryByTextNoFeedback = _render3.queryByText;
    expect(queryByTextNoFeedback('Conseils pour progresser')).toBeNull();
  });
  it('shows "Excellent!" and a trophy for >= 80% score', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        correctAnswers: 8,
        totalQuestions: 10
      }))),
      getByText = _render4.getByText,
      getByTestId = _render4.getByTestId;
    expect(getByText('Excellent!')).toBeTruthy();
    expect(getByTestId('icon-trophy')).toBeTruthy();
  });
  it('shows "Bien joué!" and a thumbs-up for >= 60% score', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        correctAnswers: 6,
        totalQuestions: 10
      }))),
      getByText = _render5.getByText,
      getByTestId = _render5.getByTestId;
    expect(getByText('Bien joué!')).toBeTruthy();
    expect(getByTestId('icon-thumbs-up')).toBeTruthy();
  });
  it('shows "Pas mal!" and a fitness icon for >= 40% score', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        correctAnswers: 4,
        totalQuestions: 10
      }))),
      getByText = _render6.getByText,
      getByTestId = _render6.getByTestId;
    expect(getByText('Pas mal!')).toBeTruthy();
    expect(getByTestId('icon-fitness')).toBeTruthy();
  });
  it('shows "Continuez vos efforts" and a school icon for < 40% score', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        correctAnswers: 3,
        totalQuestions: 10
      }))),
      getByText = _render7.getByText,
      getByTestId = _render7.getByTestId;
    expect(getByText('Continuez vos efforts')).toBeTruthy();
    expect(getByTestId('icon-school')).toBeTruthy();
  });
  it('calls onRetry when the retry button is pressed', function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps))),
      getByText = _render8.getByText;
    _reactNative.fireEvent.press(getByText('Réessayer'));
    expect(defaultProps.onRetry).toHaveBeenCalledTimes(1);
  });
  it('calls onContinue when the continue button is pressed', function () {
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps))),
      getByText = _render9.getByText;
    _reactNative.fireEvent.press(getByText('Continuer'));
    expect(defaultProps.onContinue).toHaveBeenCalledTimes(1);
  });
  it('calls Share.share with correct data when share button is pressed', (0, _asyncToGenerator2.default)(function* () {
    var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps))),
      getByText = _render0.getByText;
    _reactNative.fireEvent.press(getByText('Partager'));
    expect(_reactNative2.Share.share).toHaveBeenCalledWith({
      message: 'J\'ai obtenu 8/10 (80%) dans mon exercice de Vocabulary niveau B1 sur l\'application JOUD English!',
      title: 'Mes résultats d\'apprentissage'
    });
  }));
  it('handles share error gracefully without crashing', (0, _asyncToGenerator2.default)(function* () {
    var shareError = new Error('Share operation failed');
    _reactNative2.Share.share.mockRejectedValue(shareError);
    var warnSpy = jest.spyOn(console, 'warn');
    var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps))),
      getByText = _render1.getByText;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(getByText('Partager'));
    }));
    expect(_reactNative2.Share.share).toHaveBeenCalledTimes(1);
    expect(warnSpy).toHaveBeenCalledWith('Error sharing results:', shareError);
    warnSpy.mockRestore();
  }));
  it('displays detailed results when showDetailedResults is true and data is present', function () {
    var detailedResults = [{
      question: 'Q1',
      userAnswer: 'A',
      correctAnswer: 'B',
      isCorrect: false,
      isSkipped: false
    }];
    var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        showDetailedResults: true,
        detailedResults: detailedResults
      }))),
      getByText = _render10.getByText;
    expect(getByText('Détail des réponses')).toBeTruthy();
    expect(getByText('Question 1')).toBeTruthy();
    expect(getByText('Q1')).toBeTruthy();
    expect(getByText('Votre réponse:')).toBeTruthy();
    expect(getByText('A')).toBeTruthy();
    expect(getByText('Réponse correcte:')).toBeTruthy();
    expect(getByText('B')).toBeTruthy();
  });
  it('does not display detailed results when showDetailedResults is false', function () {
    var detailedResults = [{
      question: 'Q1',
      userAnswer: 'A',
      correctAnswer: 'B',
      isCorrect: false,
      isSkipped: false
    }];
    var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        showDetailedResults: false,
        detailedResults: detailedResults
      }))),
      queryByText = _render11.queryByText;
    expect(queryByText('Détail des réponses')).toBeNull();
  });
  it('displays correct detailed result', function () {
    var detailedResults = [{
      question: 'Q1',
      userAnswer: 'A',
      correctAnswer: 'A',
      isCorrect: true,
      isSkipped: false
    }];
    var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        showDetailedResults: true,
        detailedResults: detailedResults
      }))),
      getByText = _render12.getByText,
      queryByText = _render12.queryByText,
      getByTestId = _render12.getByTestId;
    expect(getByText('Détail des réponses')).toBeTruthy();
    expect(getByText('Question 1')).toBeTruthy();
    expect(getByTestId('icon-checkmark-circle')).toBeTruthy();
    expect(queryByText('Réponse correcte:')).toBeNull();
  });
  it('displays skipped detailed result', function () {
    var detailedResults = [{
      question: 'Q1',
      userAnswer: '',
      correctAnswer: 'B',
      isCorrect: false,
      isSkipped: true
    }];
    var _render13 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        showDetailedResults: true,
        detailedResults: detailedResults
      }))),
      getByText = _render13.getByText,
      queryByText = _render13.queryByText,
      getByTestId = _render13.getByTestId;
    expect(getByText('Question 1')).toBeTruthy();
    expect(getByText('Passée')).toBeTruthy();
    expect(getByTestId('icon-play-skip-forward')).toBeTruthy();
    expect(queryByText('Réponse correcte:')).toBeNull();
  });
  it('handles zero questions correctly', function () {
    var _render14 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        totalQuestions: 0,
        correctAnswers: 0
      }))),
      getByText = _render14.getByText,
      queryByText = _render14.queryByText,
      getByTestId = _render14.getByTestId;
    expect(getByText('0%')).toBeTruthy();
    expect(getByText('0/0')).toBeTruthy();
    expect(getByText('Continuez vos efforts')).toBeTruthy();
    expect(getByTestId('icon-school')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfcmVxdWlyZSIsInJlcXVpcmUiLCJWaWV3IiwiTGluZWFyR3JhZGllbnQiLCJwcm9wcyIsIl9qc3hSdW50aW1lIiwianN4IiwiT2JqZWN0IiwiYXNzaWduIiwiX3JlcXVpcmUyIiwiVGV4dCIsIklvbmljb25zIiwidGVzdElEIiwibmFtZSIsImNoaWxkcmVuIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9SZXN1bHRzU2NyZWVuIiwiX3JlYWN0TmF0aXZlMiIsIl9yZXF1aXJlMyIsImplc3QiLCJkZXNjcmliZSIsImJlZm9yZUFsbCIsInVzZUZha2VUaW1lcnMiLCJhZnRlckFsbCIsInVzZVJlYWxUaW1lcnMiLCJiZWZvcmVFYWNoIiwiU2hhcmUiLCJzaGFyZSIsImZuIiwiZGVmYXVsdFByb3BzIiwidG90YWxRdWVzdGlvbnMiLCJjb3JyZWN0QW5zd2VycyIsImluY29ycmVjdEFuc3dlcnMiLCJza2lwcGVkQW5zd2VycyIsInRpbWVUYWtlbiIsImV4ZXJjaXNlVHlwZSIsImxldmVsIiwibGV2ZWxDb2xvciIsImZlZWRiYWNrIiwib25SZXRyeSIsIm9uQ29udGludWUiLCJzaG93RGV0YWlsZWRSZXN1bHRzIiwiZGV0YWlsZWRSZXN1bHRzIiwiYWZ0ZXJFYWNoIiwiY2xlYXJBbGxNb2NrcyIsInJ1bk9ubHlQZW5kaW5nVGltZXJzIiwiaXQiLCJfcmVuZGVyIiwicmVuZGVyIiwiZGVmYXVsdCIsImdldEJ5VGV4dCIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJfcmVuZGVyMiIsInF1ZXJ5QnlUZXh0IiwiX3JlbmRlcjMiLCJxdWVyeUJ5VGV4dE5vRmVlZGJhY2siLCJ0b0JlTnVsbCIsIl9yZW5kZXI0IiwiZ2V0QnlUZXN0SWQiLCJfcmVuZGVyNSIsIl9yZW5kZXI2IiwiX3JlbmRlcjciLCJfcmVuZGVyOCIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIiwiX3JlbmRlcjkiLCJfcmVuZGVyMCIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwibWVzc2FnZSIsInRpdGxlIiwic2hhcmVFcnJvciIsIkVycm9yIiwibW9ja1JlamVjdGVkVmFsdWUiLCJ3YXJuU3B5Iiwic3B5T24iLCJjb25zb2xlIiwiX3JlbmRlcjEiLCJhY3QiLCJtb2NrUmVzdG9yZSIsInF1ZXN0aW9uIiwidXNlckFuc3dlciIsImNvcnJlY3RBbnN3ZXIiLCJpc0NvcnJlY3QiLCJpc1NraXBwZWQiLCJfcmVuZGVyMTAiLCJfcmVuZGVyMTEiLCJfcmVuZGVyMTIiLCJfcmVuZGVyMTMiLCJfcmVuZGVyMTQiXSwic291cmNlcyI6WyJSZXN1bHRzU2NyZWVuLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCBhY3QgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgUmVzdWx0c1NjcmVlbiBmcm9tICcuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9leGVyY2lzZS1jb21tb24vUmVzdWx0c1NjcmVlbic7XG5pbXBvcnQgeyBTaGFyZSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbi8vIE1vY2sgZGVzIGTDqXBlbmRhbmNlc1xuamVzdC5tb2NrKCdleHBvLWxpbmVhci1ncmFkaWVudCcsICgpID0+IHtcbsKgIMKgIGNvbnN0IHsgVmlldyB9ID0gcmVxdWlyZSgncmVhY3QtbmF0aXZlJyk7XG7CoCDCoCByZXR1cm4ge1xuwqAgwqAgwqAgwqAgTGluZWFyR3JhZGllbnQ6IChwcm9wcykgPT4gPFZpZXcgey4uLnByb3BzfSAvPixcbsKgIMKgIH07XG59KTtcbmplc3QubW9jaygnQGV4cG8vdmVjdG9yLWljb25zJywgKCkgPT4ge1xuwqAgwqAgY29uc3QgeyBUZXh0IH0gPSByZXF1aXJlKCdyZWFjdC1uYXRpdmUnKTtcbsKgIMKgIHJldHVybiB7XG7CoCDCoCDCoCDCoCBJb25pY29uczogKHByb3BzKSA9PiA8VGV4dCB0ZXN0SUQ9e2BpY29uLSR7cHJvcHMubmFtZX1gfT57cHJvcHMubmFtZX08L1RleHQ+LFxuwqAgwqAgfTtcbn0pO1xuXG5kZXNjcmliZSgnUmVzdWx0c1NjcmVlbicsICgpID0+IHtcbsKgIMKgIGJlZm9yZUFsbCgoKSA9PiB7XG7CoCDCoCDCoCDCoCBqZXN0LnVzZUZha2VUaW1lcnMoKTtcbsKgIMKgIH0pO1xuXG7CoCDCoCBhZnRlckFsbCgoKSA9PiB7XG7CoCDCoCDCoCDCoCBqZXN0LnVzZVJlYWxUaW1lcnMoKTtcbsKgIMKgIH0pO1xuXG7CoCDCoCBiZWZvcmVFYWNoKCgpID0+IHtcbsKgIMKgIMKgIMKgIFNoYXJlLnNoYXJlID0gamVzdC5mbigpO1xuwqAgwqAgfSk7XG5cbsKgIMKgIGNvbnN0IGRlZmF1bHRQcm9wcyA9IHtcbsKgIMKgIMKgIMKgIHRvdGFsUXVlc3Rpb25zOiAxMCxcbsKgIMKgIMKgIMKgIGNvcnJlY3RBbnN3ZXJzOiA4LFxuwqAgwqAgwqAgwqAgaW5jb3JyZWN0QW5zd2VyczogMSxcbsKgIMKgIMKgIMKgIHNraXBwZWRBbnN3ZXJzOiAxLCAvLyBDb3JyZWN0aW9uIHBvdXIgZmFpcmUgY29ycmVzcG9uZHJlIGxlIHRvdGFsXG7CoCDCoCDCoCDCoCB0aW1lVGFrZW46ICcwMTozMCcsXG7CoCDCoCDCoCDCoCBleGVyY2lzZVR5cGU6ICdWb2NhYnVsYXJ5JyxcbsKgIMKgIMKgIMKgIGxldmVsOiAnQjEnLFxuwqAgwqAgwqAgwqAgbGV2ZWxDb2xvcjogJyMzQjgyRjYnLFxuwqAgwqAgwqAgwqAgZmVlZGJhY2s6ICcnLFxuwqAgwqAgwqAgwqAgb25SZXRyeTogamVzdC5mbigpLFxuwqAgwqAgwqAgwqAgb25Db250aW51ZTogamVzdC5mbigpLFxuwqAgwqAgwqAgwqAgc2hvd0RldGFpbGVkUmVzdWx0czogZmFsc2UsXG7CoCDCoCDCoCDCoCBkZXRhaWxlZFJlc3VsdHM6IFtdLFxuwqAgwqAgfTtcblxuwqAgwqAgYWZ0ZXJFYWNoKCgpID0+IHtcbsKgIMKgIMKgIMKgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuwqAgwqAgwqAgwqAgamVzdC5ydW5Pbmx5UGVuZGluZ1RpbWVycygpO1xuwqAgwqAgfSk7XG5cbsKgIMKgIC8vIC0tLSBUZXN0cyBkZSByZW5kdSBldCBkZSBsb2dpcXVlIGRlIGJhc2UgLS0tXG7CoCDCoCBpdCgncmVuZGVycyBiYXNpYyBzdGF0aXN0aWNzIGNvcnJlY3RseScsICgpID0+IHtcbsKgIMKgIMKgIMKgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPFJlc3VsdHNTY3JlZW4gey4uLmRlZmF1bHRQcm9wc30gLz4pO1xuwqAgwqAgwqAgwqAgZXhwZWN0KGdldEJ5VGV4dCgnODAlJykpLnRvQmVUcnV0aHkoKTtcbsKgIMKgIMKgIMKgIGV4cGVjdChnZXRCeVRleHQoJzgvMTAnKSkudG9CZVRydXRoeSgpO1xuwqAgwqAgwqAgwqAgZXhwZWN0KGdldEJ5VGV4dCgnQ29ycmVjdGVzJykpLnRvQmVUcnV0aHkoKTtcbsKgIMKgIMKgIMKgIGV4cGVjdChnZXRCeVRleHQoJzgnKSkudG9CZVRydXRoeSgpO1xuwqAgwqAgwqAgwqAgZXhwZWN0KGdldEJ5VGV4dCgnSW5jb3JyZWN0ZXMnKSkudG9CZVRydXRoeSgpO1xuwqAgwqAgwqAgwqAgZXhwZWN0KGdldEJ5VGV4dCgnMScpKS50b0JlVHJ1dGh5KCk7XG7CoCDCoCDCoCDCoCBleHBlY3QoZ2V0QnlUZXh0KCdQYXNzw6llcycpKS50b0JlVHJ1dGh5KCk7XG7CoCDCoCDCoCDCoCBleHBlY3QoZ2V0QnlUZXh0KCcxJykpLnRvQmVUcnV0aHkoKTtcbsKgIMKgIMKgIMKgIGV4cGVjdChnZXRCeVRleHQoJ1RlbXBzJykpLnRvQmVUcnV0aHkoKTtcbsKgIMKgIMKgIMKgIGV4cGVjdChnZXRCeVRleHQoJzAxOjMwJykpLnRvQmVUcnV0aHkoKTtcbsKgIMKgIH0pO1xuXG7CoCDCoCBpdCgnZGlzcGxheXMgZmVlZGJhY2sgd2hlbiBwcm92aWRlZCBhbmQgaGlkZXMgaXQgb3RoZXJ3aXNlJywgKCkgPT4ge1xuwqAgwqAgwqAgwqAgY29uc3QgeyBnZXRCeVRleHQsIHF1ZXJ5QnlUZXh0IH0gPSByZW5kZXIoXG7CoCDCoCDCoCDCoCDCoCDCoCA8UmVzdWx0c1NjcmVlbiB7Li4uZGVmYXVsdFByb3BzfSBmZWVkYmFjaz1cIkdyZWF0IGpvYiFcIiAvPlxuwqAgwqAgwqAgwqAgKTtcbsKgIMKgIMKgIMKgIGV4cGVjdChnZXRCeVRleHQoJ0NvbnNlaWxzIHBvdXIgcHJvZ3Jlc3NlcicpKS50b0JlVHJ1dGh5KCk7XG7CoCDCoCDCoCDCoCBleHBlY3QoZ2V0QnlUZXh0KCdHcmVhdCBqb2IhJykpLnRvQmVUcnV0aHkoKTtcbsKgIMKgIMKgIMKgIFxuwqAgwqAgwqAgwqAgY29uc3QgeyBxdWVyeUJ5VGV4dDogcXVlcnlCeVRleHROb0ZlZWRiYWNrIH0gPSByZW5kZXIoPFJlc3VsdHNTY3JlZW4gey4uLmRlZmF1bHRQcm9wc30gZmVlZGJhY2s9XCJcIiAvPik7XG7CoCDCoCDCoCDCoCBleHBlY3QocXVlcnlCeVRleHROb0ZlZWRiYWNrKCdDb25zZWlscyBwb3VyIHByb2dyZXNzZXInKSkudG9CZU51bGwoKTtcbsKgIMKgIH0pO1xuXG7CoCDCoCAvLyAtLS0gVGVzdHMgZGUgbWVzc2FnZXMgZXQgZCdpY8O0bmVzIGVuIGZvbmN0aW9uIGR1IHNjb3JlIC0tLVxuwqAgwqAgaXQoJ3Nob3dzIFwiRXhjZWxsZW50IVwiIGFuZCBhIHRyb3BoeSBmb3IgPj0gODAlIHNjb3JlJywgKCkgPT4ge1xuwqAgwqAgwqAgwqAgY29uc3QgeyBnZXRCeVRleHQsIGdldEJ5VGVzdElkIH0gPSByZW5kZXIoPFJlc3VsdHNTY3JlZW4gey4uLmRlZmF1bHRQcm9wc30gY29ycmVjdEFuc3dlcnM9ezh9IHRvdGFsUXVlc3Rpb25zPXsxMH0gLz4pO1xuwqAgwqAgwqAgwqAgZXhwZWN0KGdldEJ5VGV4dCgnRXhjZWxsZW50IScpKS50b0JlVHJ1dGh5KCk7XG7CoCDCoCDCoCDCoCBleHBlY3QoZ2V0QnlUZXN0SWQoJ2ljb24tdHJvcGh5JykpLnRvQmVUcnV0aHkoKTtcbsKgIMKgIH0pO1xuXG7CoCDCoCBpdCgnc2hvd3MgXCJCaWVuIGpvdcOpIVwiIGFuZCBhIHRodW1icy11cCBmb3IgPj0gNjAlIHNjb3JlJywgKCkgPT4ge1xuwqAgwqAgwqAgwqAgY29uc3QgeyBnZXRCeVRleHQsIGdldEJ5VGVzdElkIH0gPSByZW5kZXIoPFJlc3VsdHNTY3JlZW4gey4uLmRlZmF1bHRQcm9wc30gY29ycmVjdEFuc3dlcnM9ezZ9IHRvdGFsUXVlc3Rpb25zPXsxMH0gLz4pO1xuwqAgwqAgwqAgwqAgZXhwZWN0KGdldEJ5VGV4dCgnQmllbiBqb3XDqSEnKSkudG9CZVRydXRoeSgpO1xuwqAgwqAgwqAgwqAgZXhwZWN0KGdldEJ5VGVzdElkKCdpY29uLXRodW1icy11cCcpKS50b0JlVHJ1dGh5KCk7XG7CoCDCoCB9KTtcblxuwqAgwqAgaXQoJ3Nob3dzIFwiUGFzIG1hbCFcIiBhbmQgYSBmaXRuZXNzIGljb24gZm9yID49IDQwJSBzY29yZScsICgpID0+IHtcbsKgIMKgIMKgIMKgIGNvbnN0IHsgZ2V0QnlUZXh0LCBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxSZXN1bHRzU2NyZWVuIHsuLi5kZWZhdWx0UHJvcHN9IGNvcnJlY3RBbnN3ZXJzPXs0fSB0b3RhbFF1ZXN0aW9ucz17MTB9IC8+KTtcbsKgIMKgIMKgIMKgIGV4cGVjdChnZXRCeVRleHQoJ1BhcyBtYWwhJykpLnRvQmVUcnV0aHkoKTtcbsKgIMKgIMKgIMKgIGV4cGVjdChnZXRCeVRlc3RJZCgnaWNvbi1maXRuZXNzJykpLnRvQmVUcnV0aHkoKTtcbsKgIMKgIH0pO1xuXG7CoCDCoCBpdCgnc2hvd3MgXCJDb250aW51ZXogdm9zIGVmZm9ydHNcIiBhbmQgYSBzY2hvb2wgaWNvbiBmb3IgPCA0MCUgc2NvcmUnLCAoKSA9PiB7XG7CoCDCoCDCoCDCoCBjb25zdCB7IGdldEJ5VGV4dCwgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcig8UmVzdWx0c1NjcmVlbiB7Li4uZGVmYXVsdFByb3BzfSBjb3JyZWN0QW5zd2Vycz17M30gdG90YWxRdWVzdGlvbnM9ezEwfSAvPik7XG7CoCDCoCDCoCDCoCBleHBlY3QoZ2V0QnlUZXh0KCdDb250aW51ZXogdm9zIGVmZm9ydHMnKSkudG9CZVRydXRoeSgpO1xuwqAgwqAgwqAgwqAgZXhwZWN0KGdldEJ5VGVzdElkKCdpY29uLXNjaG9vbCcpKS50b0JlVHJ1dGh5KCk7XG7CoCDCoCB9KTtcblxuwqAgwqAgLy8gLS0tIFRlc3RzIGRlcyBpbnRlcmFjdGlvbnMgdXRpbGlzYXRldXIgLS0tXG7CoCDCoCBpdCgnY2FsbHMgb25SZXRyeSB3aGVuIHRoZSByZXRyeSBidXR0b24gaXMgcHJlc3NlZCcsICgpID0+IHtcbsKgIMKgIMKgIMKgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPFJlc3VsdHNTY3JlZW4gey4uLmRlZmF1bHRQcm9wc30gLz4pO1xuwqAgwqAgwqAgwqAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgnUsOpZXNzYXllcicpKTtcbsKgIMKgIMKgIMKgIGV4cGVjdChkZWZhdWx0UHJvcHMub25SZXRyeSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuwqAgwqAgfSk7XG5cbsKgIMKgIGl0KCdjYWxscyBvbkNvbnRpbnVlIHdoZW4gdGhlIGNvbnRpbnVlIGJ1dHRvbiBpcyBwcmVzc2VkJywgKCkgPT4ge1xuwqAgwqAgwqAgwqAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcig8UmVzdWx0c1NjcmVlbiB7Li4uZGVmYXVsdFByb3BzfSAvPik7XG7CoCDCoCDCoCDCoCBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCdDb250aW51ZXInKSk7XG7CoCDCoCDCoCDCoCBleHBlY3QoZGVmYXVsdFByb3BzLm9uQ29udGludWUpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbsKgIMKgIH0pO1xuICAgIFxuwqAgwqAgaXQoJ2NhbGxzIFNoYXJlLnNoYXJlIHdpdGggY29ycmVjdCBkYXRhIHdoZW4gc2hhcmUgYnV0dG9uIGlzIHByZXNzZWQnLCBhc3luYyAoKSA9PiB7XG7CoCDCoCDCoCDCoCBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKDxSZXN1bHRzU2NyZWVuIHsuLi5kZWZhdWx0UHJvcHN9IC8+KTtcbsKgIMKgIMKgIMKgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ1BhcnRhZ2VyJykpO1xuwqAgwqAgwqAgwqAgZXhwZWN0KFNoYXJlLnNoYXJlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG7CoCDCoCDCoCDCoCDCoCDCoCBtZXNzYWdlOiAnSlxcJ2FpIG9idGVudSA4LzEwICg4MCUpIGRhbnMgbW9uIGV4ZXJjaWNlIGRlIFZvY2FidWxhcnkgbml2ZWF1IEIxIHN1ciBsXFwnYXBwbGljYXRpb24gSk9VRCBFbmdsaXNoIScsXG7CoCDCoCDCoCDCoCDCoCDCoCB0aXRsZTogJ01lcyByw6lzdWx0YXRzIGRcXCdhcHByZW50aXNzYWdlJyxcbsKgIMKgIMKgIMKgIH0pO1xuwqAgwqAgfSk7XG5cbsKgIMKgIGl0KCdoYW5kbGVzIHNoYXJlIGVycm9yIGdyYWNlZnVsbHkgd2l0aG91dCBjcmFzaGluZycsIGFzeW5jICgpID0+IHtcbsKgIMKgIMKgIMKgIGNvbnN0IHNoYXJlRXJyb3IgPSBuZXcgRXJyb3IoJ1NoYXJlIG9wZXJhdGlvbiBmYWlsZWQnKTtcbsKgIMKgIMKgIMKgIFNoYXJlLnNoYXJlLm1vY2tSZWplY3RlZFZhbHVlKHNoYXJlRXJyb3IpO1xuXG7CoCDCoCDCoCDCoCBjb25zdCB3YXJuU3B5ID0gamVzdC5zcHlPbihjb25zb2xlLCAnd2FybicpO1xuwqAgwqAgwqAgwqAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcig8UmVzdWx0c1NjcmVlbiB7Li4uZGVmYXVsdFByb3BzfSAvPik7XG5cbsKgIMKgIMKgIMKgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG7CoCDCoCDCoCDCoCDCoCDCoCBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCdQYXJ0YWdlcicpKTtcbsKgIMKgIMKgIMKgIH0pO1xuXG7CoCDCoCDCoCDCoCBleHBlY3QoU2hhcmUuc2hhcmUpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbsKgIMKgIMKgIMKgIGV4cGVjdCh3YXJuU3B5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnRXJyb3Igc2hhcmluZyByZXN1bHRzOicsIHNoYXJlRXJyb3IpO1xuwqAgwqAgwqAgwqAgd2FyblNweS5tb2NrUmVzdG9yZSgpO1xuwqAgwqAgfSk7XG5cbsKgIMKgIC8vIC0tLSBUZXN0cyBkZSBsYSBzZWN0aW9uIGRlIHLDqXN1bHRhdHMgZMOpdGFpbGzDqXMgLS0tXG7CoCDCoCBpdCgnZGlzcGxheXMgZGV0YWlsZWQgcmVzdWx0cyB3aGVuIHNob3dEZXRhaWxlZFJlc3VsdHMgaXMgdHJ1ZSBhbmQgZGF0YSBpcyBwcmVzZW50JywgKCkgPT4ge1xuwqAgwqAgwqAgwqAgY29uc3QgZGV0YWlsZWRSZXN1bHRzID0gW1xuwqAgwqAgwqAgwqAgwqAgwqAgeyBxdWVzdGlvbjogJ1ExJywgdXNlckFuc3dlcjogJ0EnLCBjb3JyZWN0QW5zd2VyOiAnQicsIGlzQ29ycmVjdDogZmFsc2UsIGlzU2tpcHBlZDogZmFsc2UgfSxcbsKgIMKgIMKgIMKgIF07XG7CoCDCoCDCoCDCoCBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuwqAgwqAgwqAgwqAgwqAgwqAgPFJlc3VsdHNTY3JlZW4gey4uLmRlZmF1bHRQcm9wc30gc2hvd0RldGFpbGVkUmVzdWx0cz17dHJ1ZX0gZGV0YWlsZWRSZXN1bHRzPXtkZXRhaWxlZFJlc3VsdHN9IC8+XG7CoCDCoCDCoCDCoCApO1xuwqAgwqAgwqAgwqAgZXhwZWN0KGdldEJ5VGV4dCgnRMOpdGFpbCBkZXMgcsOpcG9uc2VzJykpLnRvQmVUcnV0aHkoKTtcbsKgIMKgIMKgIMKgIGV4cGVjdChnZXRCeVRleHQoJ1F1ZXN0aW9uIDEnKSkudG9CZVRydXRoeSgpO1xuwqAgwqAgwqAgwqAgZXhwZWN0KGdldEJ5VGV4dCgnUTEnKSkudG9CZVRydXRoeSgpO1xuwqAgwqAgwqAgwqAgZXhwZWN0KGdldEJ5VGV4dCgnVm90cmUgcsOpcG9uc2U6JykpLnRvQmVUcnV0aHkoKTtcbsKgIMKgIMKgIMKgIGV4cGVjdChnZXRCeVRleHQoJ0EnKSkudG9CZVRydXRoeSgpO1xuwqAgwqAgwqAgwqAgZXhwZWN0KGdldEJ5VGV4dCgnUsOpcG9uc2UgY29ycmVjdGU6JykpLnRvQmVUcnV0aHkoKTtcbsKgIMKgIMKgIMKgIGV4cGVjdChnZXRCeVRleHQoJ0InKSkudG9CZVRydXRoeSgpO1xuwqAgwqAgfSk7XG5cbsKgIMKgIGl0KCdkb2VzIG5vdCBkaXNwbGF5IGRldGFpbGVkIHJlc3VsdHMgd2hlbiBzaG93RGV0YWlsZWRSZXN1bHRzIGlzIGZhbHNlJywgKCkgPT4ge1xuwqAgwqAgwqAgwqAgY29uc3QgZGV0YWlsZWRSZXN1bHRzID0gW1xuwqAgwqAgwqAgwqAgwqAgwqAgeyBxdWVzdGlvbjogJ1ExJywgdXNlckFuc3dlcjogJ0EnLCBjb3JyZWN0QW5zd2VyOiAnQicsIGlzQ29ycmVjdDogZmFsc2UsIGlzU2tpcHBlZDogZmFsc2UgfSxcbsKgIMKgIMKgIMKgIF07XG7CoCDCoCDCoCDCoCBjb25zdCB7IHF1ZXJ5QnlUZXh0IH0gPSByZW5kZXIoXG7CoCDCoCDCoCDCoCDCoCDCoCA8UmVzdWx0c1NjcmVlbiB7Li4uZGVmYXVsdFByb3BzfSBzaG93RGV0YWlsZWRSZXN1bHRzPXtmYWxzZX0gZGV0YWlsZWRSZXN1bHRzPXtkZXRhaWxlZFJlc3VsdHN9IC8+XG7CoCDCoCDCoCDCoCApO1xuwqAgwqAgwqAgwqAgZXhwZWN0KHF1ZXJ5QnlUZXh0KCdEw6l0YWlsIGRlcyByw6lwb25zZXMnKSkudG9CZU51bGwoKTtcbsKgIMKgIH0pO1xuICAgIFxuICAgIC8vIC0tLSBOb3V2ZWF1eCB0ZXN0cyBwb3VyIHVuZSBjb3V2ZXJ0dXJlIGNvbXBsw6h0ZSAtLS1cblxuICAgIGl0KCdkaXNwbGF5cyBjb3JyZWN0IGRldGFpbGVkIHJlc3VsdCcsICgpID0+IHtcbiAgICAgICAgY29uc3QgZGV0YWlsZWRSZXN1bHRzID0gW1xuICAgICAgICAgICAgeyBxdWVzdGlvbjogJ1ExJywgdXNlckFuc3dlcjogJ0EnLCBjb3JyZWN0QW5zd2VyOiAnQScsIGlzQ29ycmVjdDogdHJ1ZSwgaXNTa2lwcGVkOiBmYWxzZSB9LFxuICAgICAgICBdO1xuICAgICAgICBjb25zdCB7IGdldEJ5VGV4dCwgcXVlcnlCeVRleHQsIGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICAgICAgICA8UmVzdWx0c1NjcmVlbiB7Li4uZGVmYXVsdFByb3BzfSBzaG93RGV0YWlsZWRSZXN1bHRzPXt0cnVlfSBkZXRhaWxlZFJlc3VsdHM9e2RldGFpbGVkUmVzdWx0c30gLz5cbiAgICAgICAgKTtcblxuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KCdEw6l0YWlsIGRlcyByw6lwb25zZXMnKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KCdRdWVzdGlvbiAxJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgZXhwZWN0KGdldEJ5VGVzdElkKCdpY29uLWNoZWNrbWFyay1jaXJjbGUnKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBleHBlY3QocXVlcnlCeVRleHQoJ1LDqXBvbnNlIGNvcnJlY3RlOicpKS50b0JlTnVsbCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2Rpc3BsYXlzIHNraXBwZWQgZGV0YWlsZWQgcmVzdWx0JywgKCkgPT4ge1xuICAgICAgICBjb25zdCBkZXRhaWxlZFJlc3VsdHMgPSBbXG4gICAgICAgICAgICB7IHF1ZXN0aW9uOiAnUTEnLCB1c2VyQW5zd2VyOiAnJywgY29ycmVjdEFuc3dlcjogJ0InLCBpc0NvcnJlY3Q6IGZhbHNlLCBpc1NraXBwZWQ6IHRydWUgfSxcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgeyBnZXRCeVRleHQsIHF1ZXJ5QnlUZXh0LCBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgICAgICAgPFJlc3VsdHNTY3JlZW4gey4uLmRlZmF1bHRQcm9wc30gc2hvd0RldGFpbGVkUmVzdWx0cz17dHJ1ZX0gZGV0YWlsZWRSZXN1bHRzPXtkZXRhaWxlZFJlc3VsdHN9IC8+XG4gICAgICAgICk7XG5cbiAgICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnUXVlc3Rpb24gMScpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIGV4cGVjdChnZXRCeVRleHQoJ1Bhc3PDqWUnKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2ljb24tcGxheS1za2lwLWZvcndhcmQnKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBleHBlY3QocXVlcnlCeVRleHQoJ1LDqXBvbnNlIGNvcnJlY3RlOicpKS50b0JlTnVsbCgpO1xuICAgIH0pO1xuICAgIFxuICAgIGl0KCdoYW5kbGVzIHplcm8gcXVlc3Rpb25zIGNvcnJlY3RseScsICgpID0+IHtcbiAgICAgICAgY29uc3QgeyBnZXRCeVRleHQsIHF1ZXJ5QnlUZXh0LCBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgICAgICAgPFJlc3VsdHNTY3JlZW4gey4uLmRlZmF1bHRQcm9wc30gdG90YWxRdWVzdGlvbnM9ezB9IGNvcnJlY3RBbnN3ZXJzPXswfSAvPlxuICAgICAgICApO1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KCcwJScpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIGV4cGVjdChnZXRCeVRleHQoJzAvMCcpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIGV4cGVjdChnZXRCeVRleHQoJ0NvbnRpbnVleiB2b3MgZWZmb3J0cycpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnaWNvbi1zY2hvb2wnKSkudG9CZVRydXRoeSgpO1xuICAgIH0pO1xufSk7Il0sIm1hcHBpbmdzIjoiQUFNQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsWUFBTTtFQUNwQyxJQUFBQyxRQUFBLEdBQWlCQyxPQUFPLENBQUMsY0FBYyxDQUFDO0lBQWhDQyxJQUFJLEdBQUFGLFFBQUEsQ0FBSkUsSUFBSTtFQUNa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QUEsRUFBQ2EsY0FBQSxDQUFBaUMsT0FBYSxFQUFBN0MsTUFBQSxDQUFBQyxNQUFBLEtBQUt3QixZQUFZO1FBQUVZLG1CQUFtQixFQUFFLElBQUs7UUFBQ0MsZUFBZSxFQUFFQTtNQUFnQixFQUFFLENBQ25HLENBQUM7TUFGT1EsU0FBUyxHQUFBdUMsU0FBQSxDQUFUdkMsU0FBUztNQUFFSSxXQUFXLEdBQUFtQyxTQUFBLENBQVhuQyxXQUFXO01BQUVLLFdBQVcsR0FBQThCLFNBQUEsQ0FBWDlCLFdBQVc7SUFJM0NSLE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0lBQzVDRCxNQUFNLENBQUNELFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDRSxVQUFVLENBQUMsQ0FBQztJQUN4Q0QsTUFBTSxDQUFDUSxXQUFXLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxDQUFDUCxVQUFVLENBQUMsQ0FBQztJQUMxREQsTUFBTSxDQUFDRyxXQUFXLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDRyxRQUFRLENBQUMsQ0FBQztFQUN2RCxDQUFDLENBQUM7RUFFRlgsRUFBRSxDQUFDLGtDQUFrQyxFQUFFLFlBQU07SUFDekMsSUFBQTRDLFNBQUEsR0FBZ0QsSUFBQTFDLG1CQUFNLEVBQ2xELElBQUE5QyxXQUFBLENBQUFDLEdBQUEsRUFBQ2EsY0FBQSxDQUFBaUMsT0FBYSxFQUFBN0MsTUFBQSxDQUFBQyxNQUFBLEtBQUt3QixZQUFZO1FBQUVDLGNBQWMsRUFBRSxDQUFFO1FBQUNDLGNBQWMsRUFBRTtNQUFFLEVBQUUsQ0FDNUUsQ0FBQztNQUZPbUIsU0FBUyxHQUFBd0MsU0FBQSxDQUFUeEMsU0FBUztNQUFFSSxXQUFXLEdBQUFvQyxTQUFBLENBQVhwQyxXQUFXO01BQUVLLFdBQVcsR0FBQStCLFNBQUEsQ0FBWC9CLFdBQVc7SUFHM0NSLE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0lBQ3BDRCxNQUFNLENBQUNELFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDRSxVQUFVLENBQUMsQ0FBQztJQUNyQ0QsTUFBTSxDQUFDRCxTQUFTLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDRSxVQUFVLENBQUMsQ0FBQztJQUN2REQsTUFBTSxDQUFDUSxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQ1AsVUFBVSxDQUFDLENBQUM7RUFDbkQsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119