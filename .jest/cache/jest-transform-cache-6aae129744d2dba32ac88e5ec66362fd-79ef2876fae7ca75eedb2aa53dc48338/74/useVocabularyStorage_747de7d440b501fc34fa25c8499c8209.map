{"version":3,"names":["_react","require","_asyncStorage","_interopRequireDefault","useVocabularyStorage","_ref","STORAGE_KEY","progressKey","loaded","setLoaded","completedWords","setCompletedWords","setCategoryIndex","setWordIndex","exercises","isInitialized","handleStorageError","error","operation","fallback","arguments","length","undefined","console","warn","useEffect","loadData","_ref2","_asyncToGenerator2","default","saved","AsyncStorage","getItem","_JSON$parse","JSON","parse","savedCompleted","lastPosition","categoryIndex","wordIndex","apply","saveData","useCallback","dataToSave","setItem","stringify","current","newCompletedWords","Object","assign","forEach","_","index"],"sources":["useVocabularyStorage.js"],"sourcesContent":["// src/screens/exercises/vocabulary/hooks/internal/useVocabularyStorage.js - VERSION CORRIGÉE\r\n\r\nimport { useEffect, useCallback } from 'react';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nexport default function useVocabularyStorage({\r\n  STORAGE_KEY,\r\n  progressKey,\r\n  loaded,\r\n  setLoaded,\r\n  completedWords,\r\n  setCompletedWords,\r\n  setCategoryIndex,\r\n  setWordIndex,\r\n  exercises,\r\n  isInitialized,\r\n}) {\r\n  // =================== ERROR HANDLING HELPER ===================\r\n  const handleStorageError = (error, operation, fallback = null) => {\r\n    console.warn(`Vocabulary storage error in ${operation}:`, error);\r\n    return fallback;\r\n  };\r\n\r\n  // Load data from storage\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      try {\r\n        const saved = await AsyncStorage.getItem(STORAGE_KEY);\r\n        if (saved) {\r\n          const { completedWords: savedCompleted, lastPosition } = JSON.parse(saved);\r\n          setCompletedWords(savedCompleted || {});\r\n          if (lastPosition) {\r\n            setCategoryIndex(lastPosition.categoryIndex || 0);\r\n            setWordIndex(lastPosition.wordIndex || 0);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        // ✅ Gestion d'erreur appropriée\r\n        handleStorageError(error, 'loadData');\r\n        // Fallback: utiliser les valeurs par défaut\r\n      } finally {\r\n        setLoaded(true);\r\n      }\r\n    };\r\n    loadData();\r\n  }, [progressKey, STORAGE_KEY, setCompletedWords, setCategoryIndex, setWordIndex, setLoaded]);\r\n\r\n  // Save data to storage\r\n  const saveData = useCallback(async () => {\r\n    try {\r\n      const dataToSave = {\r\n        completedWords,\r\n        lastPosition: { categoryIndex: 0, wordIndex: 0 },\r\n      };\r\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(dataToSave));\r\n    } catch (error) {\r\n      // ✅ Gestion d'erreur appropriée\r\n      handleStorageError(error, 'saveData');\r\n      // Fallback: continuer sans sauvegarde\r\n    }\r\n  }, [completedWords, STORAGE_KEY]);\r\n\r\n  // Auto-save when data changes\r\n  useEffect(() => {\r\n    if (loaded) saveData();\r\n  }, [saveData, loaded]);\r\n\r\n  // Initialize progress for new categories\r\n  useEffect(() => {\r\n    if (loaded && exercises && !isInitialized.current) {\r\n      const newCompletedWords = { ...completedWords };\r\n      exercises.forEach((_, index) => {\r\n        if (!newCompletedWords[index]) newCompletedWords[index] = [];\r\n      });\r\n      setCompletedWords(newCompletedWords);\r\n      isInitialized.current = true;\r\n    }\r\n  }, [loaded, exercises, completedWords, setCompletedWords, isInitialized]);\r\n\r\n  return { saveData };\r\n}\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]}