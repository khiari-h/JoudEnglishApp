{"version":3,"names":["_asyncStorage","_interopRequireDefault","require","_timeConstants","_timeUtils","isStorageAvailable","exports","_ref","_asyncToGenerator2","default","test","AsyncStorage","setItem","removeItem","e","console","warn","message","apply","arguments","storeData","_ref2","key","value","undefined","jsonValue","JSON","stringify","error","_x","_x2","getData","_ref3","getItem","parse","_x3","removeData","_ref4","_x4","getMultipleData","_ref5","keys","items","multiGet","reduce","result","_ref6","_ref7","_slicedToArray2","_x5","clearAllData","_ref8","clear","validateStorageStructure","data","hasVersion","version","hasData","hasTimestamp","lastModified","migrateOldData","oldData","migratedData","Object","assign","DEFAULT_STATS","vocabulary_classic","vocabulary_fast","classicTime","fastTime","vocabulary","forEach","exerciseType","STORAGE_CONFIG","VERSION","sanitizeTimeStats","Date","now","writeToStorage","_ref9","_x6","_x7","readFromStorage","_ref0","length","KEY","available","rawData","parsedData","BACKUP_KEY","backup","info","removeFromStorage","_ref1","resetStorage","getStorageInfo","_ref10","getLastModified","backupData","hasBackup","Boolean","mainData","dataSize","storageService","USER_PROGRESS","USER_SETTINGS","LAST_ACTIVITY","CURRENT_LEVEL","STREAK_DATA","COMPLETED_EXERCISES","saveProgress","progressData","getProgress","saveSettings","settings","getSettings","markExerciseCompleted","_markExerciseCompleted","exerciseId","level","score","completedExercises","completedAt","toISOString","_x8","_x9","_x0","isExerciseCompleted","_isExerciseCompleted","_x1","updateStreak","_updateStreak","streakData","currentStreak","lastLoginDate","maxStreak","today","getFullYear","getMonth","getDate","getTime","lastLogin","oneDayMs","Math","max","getStreak","resetAllData"],"sources":["storageUtils.js"],"sourcesContent":["// src/utils/storageUtils.js\r\n/**\r\n * Utilitaires unifiés pour la gestion du stockage AsyncStorage\r\n * Combine logique métier + utilitaires génériques\r\n */\r\n\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { STORAGE_CONFIG, DEFAULT_STATS } from './timeConstants.js';\r\nimport { sanitizeTimeStats } from './timeUtils.js';\r\n\r\n// =================== UTILITAIRES GÉNÉRIQUES ===================\r\n\r\n/**\r\n * Vérifie si AsyncStorage est disponible\r\n * @returns {Promise<boolean>} True si AsyncStorage est disponible\r\n */\r\nexport const isStorageAvailable = async () => {\r\n  try {\r\n    const test = '__storage_test__';\r\n    await AsyncStorage.setItem(test, test);\r\n    await AsyncStorage.removeItem(test);\r\n    return true;\r\n  } catch (e) {\r\n    console.warn('AsyncStorage not available:', e.message);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Stocker des données génériques\r\n * @param {string} key - Clé de stockage\r\n * @param {any} value - Valeur à stocker (sera convertie en JSON)\r\n * @returns {Promise<boolean>} - true si succès, false si erreur\r\n */\r\nexport const storeData = async (key, value) => {\r\n  try {\r\n    // Si la valeur est null/undefined, on supprime la clé pour éviter l'erreur AsyncStorage\r\n    if (value === undefined || value === null) {\r\n      await AsyncStorage.removeItem(key);\r\n      return true;\r\n    }\r\n\r\n    const jsonValue = JSON.stringify(value);\r\n    await AsyncStorage.setItem(key, jsonValue);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error storing data:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Récupérer des données génériques\r\n * @param {string} key - Clé de stockage\r\n * @returns {Promise<any>} - Données récupérées ou null si non trouvé/erreur\r\n */\r\nexport const getData = async (key) => {\r\n  try {\r\n    const jsonValue = await AsyncStorage.getItem(key);\r\n    return jsonValue != null ? JSON.parse(jsonValue) : null;\r\n  } catch (error) {\r\n    console.error('Error getting data:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Supprimer des données\r\n * @param {string} key - Clé de stockage\r\n * @returns {Promise<boolean>} - true si succès, false si erreur\r\n */\r\nexport const removeData = async (key) => {\r\n  try {\r\n    await AsyncStorage.removeItem(key);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error removing data:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Récupérer plusieurs données depuis AsyncStorage\r\n * @param {Array<string>} keys - Tableau de clés\r\n * @returns {Promise<Object>} - Objet avec les clés et les valeurs\r\n */\r\nexport const getMultipleData = async (keys) => {\r\n  try {\r\n    const items = await AsyncStorage.multiGet(keys);\r\n    return items.reduce((result, [key, value]) => {\r\n      result[key] = value != null ? JSON.parse(value) : null;\r\n      return result;\r\n    }, {});\r\n  } catch (error) {\r\n    console.error('Error getting multiple data:', error);\r\n    return {};\r\n  }\r\n};\r\n\r\n/**\r\n * Effacer toutes les données de l'application\r\n * @returns {Promise<boolean>} - true si succès, false si erreur\r\n */\r\nexport const clearAllData = async () => {\r\n  try {\r\n    await AsyncStorage.clear();\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error clearing all data:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// =================== LOGIQUE MÉTIER SPÉCIFIQUE ===================\r\n\r\n/**\r\n * Valide la structure des données stockées\r\n */\r\nconst validateStorageStructure = (data) => {\r\n  if (!data || typeof data !== 'object') return false;\r\n  \r\n  const hasVersion = typeof data.version === 'string';\r\n  const hasData = typeof data.data === 'object' && data.data !== null;\r\n  const hasTimestamp = typeof data.lastModified === 'number';\r\n  \r\n  return hasVersion && hasData && hasTimestamp;\r\n};\r\n\r\n/**\r\n * Migre les anciennes données vers le nouveau format\r\n */\r\nconst migrateOldData = (oldData) => {\r\n  if (validateStorageStructure(oldData)) {\r\n    return oldData;\r\n  }\r\n  \r\n  const migratedData = { ...DEFAULT_STATS };\r\n  \r\n  if (oldData && typeof oldData === 'object') {\r\n    if (oldData.vocabulary_classic || oldData.vocabulary_fast) {\r\n      const classicTime = oldData.vocabulary_classic || 0;\r\n      const fastTime = oldData.vocabulary_fast || 0;\r\n      migratedData.vocabulary = classicTime + fastTime;\r\n    }\r\n    \r\n    Object.keys(DEFAULT_STATS).forEach(exerciseType => {\r\n      if (exerciseType !== 'vocabulary' && oldData[exerciseType]) {\r\n        migratedData[exerciseType] = oldData[exerciseType];\r\n      }\r\n    });\r\n  }\r\n  \r\n  return {\r\n    version: STORAGE_CONFIG.VERSION,\r\n    data: sanitizeTimeStats(migratedData),\r\n    lastModified: Date.now()\r\n  };\r\n};\r\n\r\n/**\r\n * Écrit les données avec validation\r\n */\r\nconst writeToStorage = async (key, data) => {\r\n  await AsyncStorage.setItem(key, JSON.stringify(data));\r\n};\r\n\r\n/**\r\n * Lit les données avec validation et migration\r\n */\r\nexport const readFromStorage = async (key = STORAGE_CONFIG.KEY) => {\r\n  const available = await isStorageAvailable();\r\n  if (!available) {\r\n    return null;\r\n  }\r\n  \r\n  try {\r\n    const rawData = await AsyncStorage.getItem(key);\r\n    if (!rawData) {\r\n      return null;\r\n    }\r\n    \r\n    const parsedData = JSON.parse(rawData);\r\n    const migratedData = migrateOldData(parsedData);\r\n    \r\n    if (!validateStorageStructure(parsedData)) {\r\n      await writeToStorage(key, migratedData.data);\r\n    }\r\n    \r\n    return migratedData;\r\n    \r\n  } catch (error) {\r\n    console.error(`Error reading from storage (${key}):`, error);\r\n    \r\n    if (key !== STORAGE_CONFIG.BACKUP_KEY) {\r\n      const backup = await readFromStorage(STORAGE_CONFIG.BACKUP_KEY);\r\n      if (backup) {\r\n        console.info('Restored from backup');\r\n        return backup;\r\n      }\r\n    }\r\n    \r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Supprime les données du AsyncStorage\r\n */\r\nexport const removeFromStorage = async (key = STORAGE_CONFIG.KEY) => {\r\n  const available = await isStorageAvailable();\r\n  if (!available) {\r\n    return false;\r\n  }\r\n  \r\n  try {\r\n    await AsyncStorage.removeItem(key);\r\n    return true;\r\n  } catch (error) {\r\n    console.error(`Error removing from storage (${key}):`, error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Remet les données à zéro\r\n */\r\nexport const resetStorage = () => {\r\n  return writeToStorage(STORAGE_CONFIG.KEY, DEFAULT_STATS);\r\n};\r\n\r\n/**\r\n * Obtient les statistiques de stockage pour debug\r\n */\r\nexport const getStorageInfo = async () => {\r\n  const available = await isStorageAvailable();\r\n  if (!available) {\r\n    return { available: false };\r\n  }\r\n  \r\n  // ✅ Extraction de la logique conditionnelle pour améliorer la lisibilité\r\n  const getLastModified = (data) => {\r\n    return data?.lastModified ? new Date(data.lastModified) : null;\r\n  };\r\n  \r\n  try {\r\n    const data = await readFromStorage();\r\n    const backupData = await AsyncStorage.getItem(STORAGE_CONFIG.BACKUP_KEY);\r\n    const hasBackup = Boolean(backupData);\r\n    const mainData = await AsyncStorage.getItem(STORAGE_CONFIG.KEY);\r\n    \r\n    return {\r\n      available: true,\r\n      hasData: Boolean(data),\r\n      hasBackup,\r\n      version: data?.version || 'unknown',\r\n      lastModified: getLastModified(data),\r\n      dataSize: mainData?.length || 0\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      available: true,\r\n      error: error.message\r\n    };\r\n  }\r\n};\r\n\r\n// =================== SERVICE MÉTIER POUR L'APP ===================\r\n\r\n/**\r\n * Service de stockage spécifique pour l'application\r\n */\r\nexport const storageService = {\r\n  // Clés de stockage\r\n  keys: {\r\n    USER_PROGRESS: 'userProgress',\r\n    USER_SETTINGS: 'userSettings',\r\n    LAST_ACTIVITY: 'lastActivity',\r\n    CURRENT_LEVEL: 'currentLevel',\r\n    STREAK_DATA: 'streakData',\r\n    COMPLETED_EXERCISES: 'completedExercises',\r\n  },\r\n\r\n  // Sauvegarder la progression\r\n  saveProgress: (progressData) => {\r\n    return storeData(storageService.keys.USER_PROGRESS, progressData);\r\n  },\r\n\r\n  // Récupérer la progression\r\n  getProgress: () => {\r\n    return getData(storageService.keys.USER_PROGRESS);\r\n  },\r\n\r\n  // Sauvegarder les paramètres\r\n  saveSettings: (settings) => {\r\n    return storeData(storageService.keys.USER_SETTINGS, settings);\r\n  },\r\n\r\n  // Récupérer les paramètres\r\n  getSettings: () => {\r\n    return getData(storageService.keys.USER_SETTINGS);\r\n  },\r\n\r\n  // Marquer un exercice comme complété\r\n  markExerciseCompleted: async (exerciseId, level, score) => {\r\n    try {\r\n      const completedExercises = await getData(storageService.keys.COMPLETED_EXERCISES) || {};\r\n\r\n      completedExercises[exerciseId] = {\r\n        level,\r\n        score,\r\n        completedAt: new Date().toISOString(),\r\n      };\r\n\r\n      await storeData(storageService.keys.COMPLETED_EXERCISES, completedExercises);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error marking exercise completed:', error);\r\n      return false;\r\n    }\r\n  },\r\n\r\n  // Vérifier si un exercice a été complété\r\n  isExerciseCompleted: async (exerciseId) => {\r\n    const completedExercises = await getData(storageService.keys.COMPLETED_EXERCISES) || {};\r\n    return Boolean(completedExercises[exerciseId]);\r\n  },\r\n\r\n  // Mettre à jour la streak\r\n  updateStreak: async () => {\r\n    try {\r\n      const streakData = await getData(storageService.keys.STREAK_DATA) || {\r\n        currentStreak: 0,\r\n        lastLoginDate: null,\r\n        maxStreak: 0,\r\n      };\r\n\r\n      const now = new Date();\r\n      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate()).getTime();\r\n\r\n      if (!streakData.lastLoginDate) {\r\n        streakData.currentStreak = 1;\r\n        streakData.maxStreak = 1;\r\n        streakData.lastLoginDate = today;\r\n      } else {\r\n        const lastLogin = new Date(streakData.lastLoginDate).getTime();\r\n        const oneDayMs = 24 * 60 * 60 * 1000;\r\n\r\n        if (today - lastLogin === oneDayMs) {\r\n          streakData.currentStreak += 1;\r\n          streakData.maxStreak = Math.max(streakData.maxStreak, streakData.currentStreak);\r\n          streakData.lastLoginDate = today;\r\n        } else if (today === lastLogin) {\r\n          // Ne rien faire\r\n        } else {\r\n          streakData.currentStreak = 1;\r\n          streakData.lastLoginDate = today;\r\n        }\r\n      }\r\n\r\n      await storeData(storageService.keys.STREAK_DATA, streakData);\r\n      return streakData;\r\n    } catch (error) {\r\n      console.error('Error updating streak:', error);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  // Récupérer les données de streak\r\n  getStreak: () => {\r\n    return getData(storageService.keys.STREAK_DATA) || {\r\n      currentStreak: 0,\r\n      lastLoginDate: null,\r\n      maxStreak: 0,\r\n    };\r\n  },\r\n\r\n  // Réinitialiser toutes les données\r\n  resetAllData: () => {\r\n    return clearAllData();\r\n  },\r\n};"],"mappings":"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","ignoreList":[]}