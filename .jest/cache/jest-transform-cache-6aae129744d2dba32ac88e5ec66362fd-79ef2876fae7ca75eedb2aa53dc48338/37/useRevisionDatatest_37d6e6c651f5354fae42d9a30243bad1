7144661cd157c3ee9c9f29530a2e94b7
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn()
  };
});
_getJestObj().mock('../../src/utils/vocabulary/vocabularyDataHelper', function () {
  return {
    getVocabularyData: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useRevisionData = _interopRequireDefault(require("../../src/hooks/useRevisionData"));
function _getJestObj() {
  var _require4 = require("@jest/globals"),
    jest = _require4.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useRevisionData', function () {
  var mockOriginalData = {
    exercises: [{
      words: [{
        word: 'hello',
        translation: 'bonjour',
        definition: 'greeting',
        example: 'Hello world'
      }, {
        word: 'goodbye',
        translation: 'au revoir',
        definition: 'farewell',
        example: 'Goodbye friend'
      }]
    }, {
      words: [{
        word: 'cat',
        translation: 'chat',
        definition: 'animal',
        example: 'The cat is sleeping'
      }]
    }]
  };
  beforeEach(function () {
    jest.clearAllMocks();
    var _require = require('../../src/utils/vocabulary/vocabularyDataHelper'),
      getVocabularyData = _require.getVocabularyData;
    getVocabularyData.mockReturnValue(mockOriginalData);
  });
  describe('Initialisation', function () {
    it('devrait initialiser avec les bonnes valeurs par défaut', function () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionData.default)();
        }),
        result = _renderHook.result;
      expect(result.current.isLoading).toBe(true);
      expect(result.current.allLearnedWords).toEqual([]);
      expect(result.current.revisionQuestions).toEqual([]);
      expect(result.current.error).toBeNull();
    });
    it('devrait accepter des paramètres personnalisés', function () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionData.default)('2', 15);
        }),
        result = _renderHook2.result;
      expect(result.current.isLoading).toBe(true);
    });
  });
  describe('Récupération des mots appris', function () {
    it('devrait récupérer les mots appris avec le nouveau format', (0, _asyncToGenerator2.default)(function* () {
      var mockStorageData = {
        completedWords: {
          '0': [{
            wordIndex: 0,
            timestamp: 1640995200000
          }, {
            wordIndex: 1,
            timestamp: 1640995300000
          }],
          '1': [{
            wordIndex: 0,
            timestamp: 1640995400000
          }]
        }
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_1_classic') {
          return Promise.resolve(JSON.stringify(mockStorageData));
        }
        return Promise.resolve(null);
      });
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionData.default)('1');
        }),
        result = _renderHook3.result,
        waitForNextUpdate = _renderHook3.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.allLearnedWords).toHaveLength(3);
      expect(result.current.allLearnedWords[0]).toEqual({
        word: 'hello',
        translation: 'bonjour',
        definition: 'greeting',
        example: 'Hello world',
        fromLevel: '1',
        fromMode: 'classic',
        categoryIndex: 0,
        wordIndex: 0,
        timestamp: 1640995200000,
        uniqueId: '1_classic_0_0'
      });
    }));
    it('devrait supporter l\'ancien format (index numérique)', (0, _asyncToGenerator2.default)(function* () {
      var mockStorageData = {
        completedWords: {
          '0': [0, 1],
          '1': [0]
        }
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_2_fast') {
          return Promise.resolve(JSON.stringify(mockStorageData));
        }
        return Promise.resolve(null);
      });
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionData.default)('2');
        }),
        result = _renderHook4.result,
        waitForNextUpdate = _renderHook4.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.allLearnedWords).toHaveLength(3);
      expect(result.current.allLearnedWords[0].word).toBe('hello');
      expect(result.current.allLearnedWords[0].fromLevel).toBe('2');
      expect(result.current.allLearnedWords[0].fromMode).toBe('fast');
      expect(result.current.allLearnedWords[0].timestamp).toBe(Date.now());
    }));
    it('devrait supporter le très ancien format (string du mot)', (0, _asyncToGenerator2.default)(function* () {
      var mockStorageData = {
        completedWords: {
          '0': ['hello', 'goodbye'],
          '1': ['cat']
        }
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_3_classic') {
          return Promise.resolve(JSON.stringify(mockStorageData));
        }
        return Promise.resolve(null);
      });
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionData.default)('3');
        }),
        result = _renderHook5.result,
        waitForNextUpdate = _renderHook5.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.allLearnedWords).toHaveLength(3);
      expect(result.current.allLearnedWords[0].word).toBe('hello');
      expect(result.current.allLearnedWords[1].word).toBe('goodbye');
      expect(result.current.allLearnedWords[2].word).toBe('cat');
    }));
    it('devrait traiter tous les niveaux en mode mixed', (0, _asyncToGenerator2.default)(function* () {
      var mockStorageData = {
        completedWords: {
          '0': [{
            wordIndex: 0,
            timestamp: 1640995200000
          }]
        }
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key.includes('vocabulary_') && key.includes('_classic')) {
          return Promise.resolve(JSON.stringify(mockStorageData));
        }
        return Promise.resolve(null);
      });
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionData.default)('mixed');
        }),
        result = _renderHook6.result,
        waitForNextUpdate = _renderHook6.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(_asyncStorage.default.getItem).toHaveBeenCalledWith('vocabulary_1_classic');
      expect(_asyncStorage.default.getItem).toHaveBeenCalledWith('vocabulary_1_fast');
      expect(_asyncStorage.default.getItem).toHaveBeenCalledWith('vocabulary_6_classic');
      expect(_asyncStorage.default.getItem).toHaveBeenCalledWith('vocabulary_bonus_classic');
      expect(result.current.allLearnedWords.length).toBeGreaterThan(0);
    }));
  });
  describe('Génération des questions de révision', function () {
    it('devrait générer des questions avec des choix multiples', (0, _asyncToGenerator2.default)(function* () {
      var mockStorageData = {
        completedWords: {
          '0': [{
            wordIndex: 0,
            timestamp: 1640995200000
          }, {
            wordIndex: 1,
            timestamp: 1640995300000
          }],
          '1': [{
            wordIndex: 0,
            timestamp: 1640995400000
          }]
        }
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_1_classic') {
          return Promise.resolve(JSON.stringify(mockStorageData));
        }
        return Promise.resolve(null);
      });
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionData.default)('1', 3);
        }),
        result = _renderHook7.result,
        waitForNextUpdate = _renderHook7.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.revisionQuestions).toHaveLength(3);
      var question = result.current.revisionQuestions[0];
      expect(question.choices).toHaveLength(4);
      expect(question.choices).toContain(question.correctAnswer);
      expect(question.correctAnswer).toBe(question.translation);
    }));
    it('devrait limiter le nombre de questions demandées', (0, _asyncToGenerator2.default)(function* () {
      var mockStorageData = {
        completedWords: {
          '0': [{
            wordIndex: 0,
            timestamp: 1640995200000
          }, {
            wordIndex: 1,
            timestamp: 1640995300000
          }]
        }
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_1_classic') {
          return Promise.resolve(JSON.stringify(mockStorageData));
        }
        return Promise.resolve(null);
      });
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionData.default)('1', 1);
        }),
        result = _renderHook8.result,
        waitForNextUpdate = _renderHook8.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.revisionQuestions).toHaveLength(1);
    }));
    it('devrait utiliser des données de fallback pour les mauvaises réponses', (0, _asyncToGenerator2.default)(function* () {
      var mockStorageData = {
        completedWords: {
          '0': [{
            wordIndex: 0,
            timestamp: 1640995200000
          }]
        }
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_1_classic') {
          return Promise.resolve(JSON.stringify(mockStorageData));
        }
        return Promise.resolve(null);
      });
      var _require2 = require('../../src/utils/vocabulary/vocabularyDataHelper'),
        getVocabularyData = _require2.getVocabularyData;
      getVocabularyData.mockImplementation(function (level, mode) {
        if (level === '1' && mode === 'classic') {
          return mockOriginalData;
        }
        return {
          exercises: [{
            words: [{
              word: 'fallback1',
              translation: 'fallback1_tr'
            }, {
              word: 'fallback2',
              translation: 'fallback2_tr'
            }, {
              word: 'fallback3',
              translation: 'fallback3_tr'
            }]
          }]
        };
      });
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionData.default)('1', 1);
        }),
        result = _renderHook9.result,
        waitForNextUpdate = _renderHook9.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.revisionQuestions).toHaveLength(1);
      expect(result.current.revisionQuestions[0].choices).toHaveLength(4);
    }));
  });
  describe('Suppression des doublons', function () {
    it('devrait supprimer les doublons basés sur uniqueId', (0, _asyncToGenerator2.default)(function* () {
      var mockStorageData1 = {
        completedWords: {
          '0': [{
            wordIndex: 0,
            timestamp: 1640995200000
          }]
        }
      };
      var mockStorageData2 = {
        completedWords: {
          '0': [{
            wordIndex: 0,
            timestamp: 1640995300000
          }]
        }
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_1_classic') {
          return Promise.resolve(JSON.stringify(mockStorageData1));
        }
        if (key === 'vocabulary_1_fast') {
          return Promise.resolve(JSON.stringify(mockStorageData2));
        }
        return Promise.resolve(null);
      });
      var _renderHook0 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionData.default)('1');
        }),
        result = _renderHook0.result,
        waitForNextUpdate = _renderHook0.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.allLearnedWords).toHaveLength(2);
      expect(result.current.allLearnedWords[0].uniqueId).not.toBe(result.current.allLearnedWords[1].uniqueId);
    }));
  });
  describe('Statistiques', function () {
    it('devrait calculer les statistiques correctement', (0, _asyncToGenerator2.default)(function* () {
      var mockStorageData = {
        completedWords: {
          '0': [{
            wordIndex: 0,
            timestamp: 1640995200000
          }, {
            wordIndex: 1,
            timestamp: 1640995300000
          }]
        }
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_1_classic') {
          return Promise.resolve(JSON.stringify(mockStorageData));
        }
        if (key === 'vocabulary_2_fast') {
          return Promise.resolve(JSON.stringify(mockStorageData));
        }
        return Promise.resolve(null);
      });
      var _renderHook1 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionData.default)('mixed', 3);
        }),
        result = _renderHook1.result,
        waitForNextUpdate = _renderHook1.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.stats.totalLearned).toBe(4);
      expect(result.current.stats.byLevel['1']).toBe(2);
      expect(result.current.stats.byLevel['2']).toBe(2);
      expect(result.current.stats.byMode['classic']).toBe(2);
      expect(result.current.stats.byMode['fast']).toBe(2);
      expect(result.current.stats.questionsGenerated).toBe(3);
    }));
  });
  describe('Propriétés utilitaires', function () {
    it('devrait indiquer s\'il y a assez de mots', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook10 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionData.default)();
        }),
        result = _renderHook10.result,
        waitForNextUpdate = _renderHook10.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.hasEnoughWords).toBe(false);
      expect(result.current.canGenerateQuestions).toBe(false);
    }));
    it('devrait indiquer s\'il peut générer des questions', (0, _asyncToGenerator2.default)(function* () {
      var mockStorageData = {
        completedWords: {
          '0': [{
            wordIndex: 0,
            timestamp: 1640995200000
          }]
        }
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_1_classic') {
          return Promise.resolve(JSON.stringify(mockStorageData));
        }
        return Promise.resolve(null);
      });
      var _renderHook11 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionData.default)('1', 1);
        }),
        result = _renderHook11.result,
        waitForNextUpdate = _renderHook11.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.hasEnoughWords).toBe(true);
      expect(result.current.canGenerateQuestions).toBe(true);
    }));
  });
  describe('Gestion des erreurs', function () {
    it('devrait gérer les erreurs AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockRejectedValue(new Error('Storage error'));
      var _renderHook12 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionData.default)();
        }),
        result = _renderHook12.result,
        waitForNextUpdate = _renderHook12.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.error).toBe('Storage error');
      expect(result.current.allLearnedWords).toEqual([]);
      expect(result.current.isLoading).toBe(false);
    }));
    it('devrait continuer même si un niveau échoue', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_1_classic') {
          return Promise.reject(new Error('Level 1 error'));
        }
        if (key === 'vocabulary_2_classic') {
          return Promise.resolve(JSON.stringify({
            completedWords: {
              '0': [{
                wordIndex: 0,
                timestamp: 1640995200000
              }]
            }
          }));
        }
        return Promise.resolve(null);
      });
      var _renderHook13 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionData.default)('mixed');
        }),
        result = _renderHook13.result,
        waitForNextUpdate = _renderHook13.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.allLearnedWords.length).toBeGreaterThan(0);
      expect(result.current.error).toBeNull();
    }));
    it('devrait gérer les données corrompues', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_1_classic') {
          return Promise.resolve('invalid json');
        }
        return Promise.resolve(null);
      });
      var _renderHook14 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionData.default)('1');
        }),
        result = _renderHook14.result,
        waitForNextUpdate = _renderHook14.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.allLearnedWords).toEqual([]);
      expect(result.current.isLoading).toBe(false);
    }));
    it('devrait gérer l\'absence de données originales', (0, _asyncToGenerator2.default)(function* () {
      var mockStorageData = {
        completedWords: {
          '0': [{
            wordIndex: 0,
            timestamp: 1640995200000
          }]
        }
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_1_classic') {
          return Promise.resolve(JSON.stringify(mockStorageData));
        }
        return Promise.resolve(null);
      });
      var _require3 = require('../../src/utils/vocabulary/vocabularyDataHelper'),
        getVocabularyData = _require3.getVocabularyData;
      getVocabularyData.mockReturnValue(null);
      var _renderHook15 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionData.default)('1');
        }),
        result = _renderHook15.result,
        waitForNextUpdate = _renderHook15.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.allLearnedWords).toEqual([]);
    }));
  });
  describe('Rechargement lors du changement de niveau', function () {
    it('devrait recharger quand le niveau change', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook16 = (0, _reactNative.renderHook)(function (_ref15) {
          var level = _ref15.level;
          return (0, _useRevisionData.default)(level);
        }, {
          initialProps: {
            level: '1'
          }
        }),
        result = _renderHook16.result,
        waitForNextUpdate = _renderHook16.waitForNextUpdate,
        rerender = _renderHook16.rerender;
      yield waitForNextUpdate();
      expect(result.current.allLearnedWords).toEqual([]);
      var mockStorageData = {
        completedWords: {
          '0': [{
            wordIndex: 0,
            timestamp: 1640995200000
          }]
        }
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_2_classic') {
          return Promise.resolve(JSON.stringify(mockStorageData));
        }
        return Promise.resolve(null);
      });
      rerender({
        level: '2'
      });
      yield waitForNextUpdate();
      expect(result.current.allLearnedWords.length).toBeGreaterThan(0);
    }));
  });
  describe('Cas limites', function () {
    it('devrait gérer les catégories vides', (0, _asyncToGenerator2.default)(function* () {
      var mockStorageData = {
        completedWords: {
          '0': [],
          '1': null,
          '2': [{
            wordIndex: 0,
            timestamp: 1640995200000
          }]
        }
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_1_classic') {
          return Promise.resolve(JSON.stringify(mockStorageData));
        }
        return Promise.resolve(null);
      });
      var _renderHook17 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionData.default)('1');
        }),
        result = _renderHook17.result,
        waitForNextUpdate = _renderHook17.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.allLearnedWords).toHaveLength(1);
    }));
    it('devrait gérer les index de mots invalides', (0, _asyncToGenerator2.default)(function* () {
      var mockStorageData = {
        completedWords: {
          '0': [{
            wordIndex: 0,
            timestamp: 1640995200000
          }, {
            wordIndex: 999,
            timestamp: 1640995300000
          }, {
            wordIndex: -1,
            timestamp: 1640995400000
          }]
        }
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_1_classic') {
          return Promise.resolve(JSON.stringify(mockStorageData));
        }
        return Promise.resolve(null);
      });
      var _renderHook18 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionData.default)('1');
        }),
        result = _renderHook18.result,
        waitForNextUpdate = _renderHook18.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.allLearnedWords).toHaveLength(1);
      expect(result.current.allLearnedWords[0].wordIndex).toBe(0);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,