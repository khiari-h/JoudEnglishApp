ad112a25a1e0616456c43b85b857197d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _View = _interopRequireDefault(require("../Components/View/View"));
var _UIManager = _interopRequireDefault(require("../ReactNative/UIManager"));
var _StyleSheet = _interopRequireDefault(require("../StyleSheet/StyleSheet"));
var _DebuggingOverlayNativeComponent = _interopRequireWildcard(require("./DebuggingOverlayNativeComponent"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var useRef = React.useRef,
  useImperativeHandle = React.useImperativeHandle;
var isNativeComponentReady = _UIManager.default.hasViewManagerConfig('DebuggingOverlay');
function DebuggingOverlay(_props, ref) {
  useImperativeHandle(ref, function () {
    return {
      highlightTraceUpdates: function highlightTraceUpdates(updates) {
        if (!isNativeComponentReady) {
          return;
        }
        var nonEmptyRectangles = updates.filter(function (_ref) {
          var rectangle = _ref.rectangle,
            color = _ref.color;
          return rectangle.width >= 0 && rectangle.height >= 0;
        });
        if (nativeComponentRef.current != null) {
          _DebuggingOverlayNativeComponent.Commands.highlightTraceUpdates(nativeComponentRef.current, nonEmptyRectangles);
        }
      },
      highlightElements: function highlightElements(elements) {
        if (!isNativeComponentReady) {
          return;
        }
        if (nativeComponentRef.current != null) {
          _DebuggingOverlayNativeComponent.Commands.highlightElements(nativeComponentRef.current, elements);
        }
      },
      clearElementsHighlight: function clearElementsHighlight() {
        if (!isNativeComponentReady) {
          return;
        }
        if (nativeComponentRef.current != null) {
          _DebuggingOverlayNativeComponent.Commands.clearElementsHighlights(nativeComponentRef.current);
        }
      }
    };
  }, []);
  var nativeComponentRef = useRef(null);
  return isNativeComponentReady && (0, _jsxRuntime.jsx)(_View.default, {
    pointerEvents: "none",
    style: styles.overlay,
    children: (0, _jsxRuntime.jsx)(_DebuggingOverlayNativeComponent.default, {
      ref: nativeComponentRef,
      style: styles.overlay
    })
  });
}
var styles = _StyleSheet.default.create({
  overlay: {
    position: 'absolute',
    top: 0,
    bottom: 0,
    left: 0,
    right: 0
  }
});
var DebuggingOverlayWithForwardedRef = React.forwardRef(DebuggingOverlay);
var _default = exports.default = DebuggingOverlayWithForwardedRef;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,