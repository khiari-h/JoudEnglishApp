f762765268ae7c765694efa5e0681c8d
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _reactNative = require("react-native");
var _PlatformChecker = require("../PlatformChecker");
var _threads = require("../threads");
var _NativeReanimatedModule = _interopRequireDefault(require("../specs/NativeReanimatedModule"));
var SHOULD_BE_USE_WEB = (0, _PlatformChecker.shouldBeUseWeb)();
var JSPropsUpdaterPaper = function () {
  function JSPropsUpdaterPaper() {
    (0, _classCallCheck2.default)(this, JSPropsUpdaterPaper);
    this._reanimatedEventEmitter = new _reactNative.NativeEventEmitter(_reactNative.Platform.OS === 'ios' || _reactNative.Platform.OS === 'macos' ? _NativeReanimatedModule.default : undefined);
  }
  return (0, _createClass2.default)(JSPropsUpdaterPaper, [{
    key: "addOnJSPropsChangeListener",
    value: function addOnJSPropsChangeListener(animatedComponent) {
      var viewTag = animatedComponent.getComponentViewTag();
      JSPropsUpdaterPaper._tagToComponentMapping.set(viewTag, animatedComponent);
      if (JSPropsUpdaterPaper._tagToComponentMapping.size === 1) {
        var listener = function listener(data) {
          var component = JSPropsUpdaterPaper._tagToComponentMapping.get(data.viewTag);
          component == null || component._updateFromNative(data.props);
        };
        this._reanimatedEventEmitter.addListener('onReanimatedPropsChange', listener);
      }
    }
  }, {
    key: "removeOnJSPropsChangeListener",
    value: function removeOnJSPropsChangeListener(animatedComponent) {
      var viewTag = animatedComponent.getComponentViewTag();
      JSPropsUpdaterPaper._tagToComponentMapping.delete(viewTag);
      if (JSPropsUpdaterPaper._tagToComponentMapping.size === 0) {
        this._reanimatedEventEmitter.removeAllListeners('onReanimatedPropsChange');
      }
    }
  }]);
}();
JSPropsUpdaterPaper._tagToComponentMapping = new Map();
var _worklet_6931184780683_init_data = {
  code: "function JSPropsUpdaterTs1(){const{runOnJS,updater}=this.__closure;global.updateJSProps=function(viewTag,props){runOnJS(updater)(viewTag,props);};}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\createAnimatedComponent\\JSPropsUpdater.ts",
  sourceMap: "{\"version\":3,\"names\":[\"JSPropsUpdaterTs1\",\"runOnJS\",\"updater\",\"__closure\",\"global\",\"updateJSProps\",\"viewTag\",\"props\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/createAnimatedComponent/JSPropsUpdater.ts\"],\"mappings\":\"AAmFyB,SAAAA,iBAAMA,CAAA,QAAAC,OAAA,CAAAC,OAAA,OAAAC,SAAA,CAEvBC,MAAM,CAACC,aAAa,CAAG,SAACC,OAAe,CAAEC,KAAc,CAAK,CAC1DN,OAAO,CAACC,OAAO,CAAC,CAACI,OAAO,CAAEC,KAAK,CAAC,CAClC,CAAC,CACH\",\"ignoreList\":[]}",
  version: "3.16.7"
};
var JSPropsUpdaterFabric = function () {
  function JSPropsUpdaterFabric() {
    (0, _classCallCheck2.default)(this, JSPropsUpdaterFabric);
    if (!JSPropsUpdaterFabric.isInitialized) {
      var updater = function updater(viewTag, props) {
        var component = JSPropsUpdaterFabric._tagToComponentMapping.get(viewTag);
        component == null || component._updateFromNative(props);
      };
      (0, _threads.runOnUIImmediately)(function () {
        var _e = [new global.Error(), -3, -27];
        var JSPropsUpdaterTs1 = function JSPropsUpdaterTs1() {
          global.updateJSProps = function (viewTag, props) {
            (0, _threads.runOnJS)(updater)(viewTag, props);
          };
        };
        JSPropsUpdaterTs1.__closure = {
          runOnJS: _threads.runOnJS,
          updater: updater
        };
        JSPropsUpdaterTs1.__workletHash = 6931184780683;
        JSPropsUpdaterTs1.__initData = _worklet_6931184780683_init_data;
        JSPropsUpdaterTs1.__stackDetails = _e;
        return JSPropsUpdaterTs1;
      }())();
      JSPropsUpdaterFabric.isInitialized = true;
    }
  }
  return (0, _createClass2.default)(JSPropsUpdaterFabric, [{
    key: "addOnJSPropsChangeListener",
    value: function addOnJSPropsChangeListener(animatedComponent) {
      if (!JSPropsUpdaterFabric.isInitialized) {
        return;
      }
      var viewTag = animatedComponent.getComponentViewTag();
      JSPropsUpdaterFabric._tagToComponentMapping.set(viewTag, animatedComponent);
    }
  }, {
    key: "removeOnJSPropsChangeListener",
    value: function removeOnJSPropsChangeListener(animatedComponent) {
      if (!JSPropsUpdaterFabric.isInitialized) {
        return;
      }
      var viewTag = animatedComponent.getComponentViewTag();
      JSPropsUpdaterFabric._tagToComponentMapping.delete(viewTag);
    }
  }]);
}();
JSPropsUpdaterFabric._tagToComponentMapping = new Map();
JSPropsUpdaterFabric.isInitialized = false;
var JSPropsUpdaterWeb = function () {
  function JSPropsUpdaterWeb() {
    (0, _classCallCheck2.default)(this, JSPropsUpdaterWeb);
  }
  return (0, _createClass2.default)(JSPropsUpdaterWeb, [{
    key: "addOnJSPropsChangeListener",
    value: function addOnJSPropsChangeListener(_animatedComponent) {}
  }, {
    key: "removeOnJSPropsChangeListener",
    value: function removeOnJSPropsChangeListener(_animatedComponent) {}
  }]);
}();
var JSPropsUpdater;
if (SHOULD_BE_USE_WEB) {
  JSPropsUpdater = JSPropsUpdaterWeb;
} else if (global._IS_FABRIC) {
  JSPropsUpdater = JSPropsUpdaterFabric;
} else {
  JSPropsUpdater = JSPropsUpdaterPaper;
}
var _default = exports.default = JSPropsUpdater;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,