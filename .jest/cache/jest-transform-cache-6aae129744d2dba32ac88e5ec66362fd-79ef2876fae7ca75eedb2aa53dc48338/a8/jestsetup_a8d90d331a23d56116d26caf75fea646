9d9283fece15d640891287842dda980d
_getJestObj().mock('react-native/Libraries/Settings/Settings', function () {
  return {
    get: jest.fn(function () {
      return 'light';
    }),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn()
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return require('@react-native-async-storage/async-storage/jest/async-storage-mock');
});
_getJestObj().mock('expo-font', function () {
  return {
    useFonts: function useFonts() {
      return [true];
    },
    isLoaded: function isLoaded() {
      return true;
    }
  };
});
_getJestObj().mock('expo-haptics', function () {
  return {
    impactAsync: jest.fn()
  };
});
_getJestObj().mock('expo-modules-core', function () {
  return {
    NativeModulesProxy: {},
    EventEmitter: jest.fn(),
    requireNativeViewManager: jest.fn(function () {
      return {};
    })
  };
});
_getJestObj().mock('expo-linear-gradient', function () {
  var React = require('react');
  var _require = require('react-native'),
    View = _require.View;
  return {
    LinearGradient: function LinearGradient(_ref) {
      var children = _ref.children,
        _ref$colors = _ref.colors,
        colors = _ref$colors === void 0 ? ['transparent'] : _ref$colors,
        style = _ref.style,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      return (0, _jsxRuntime.jsx)(View, Object.assign({
        style: [style, {
          backgroundColor: colors[0]
        }]
      }, props, {
        children: children
      }));
    }
  };
});
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  var mockAnimatedValue = {
    setValue: jest.fn(),
    addListener: jest.fn(function () {
      return 'mockListenerId';
    }),
    removeListener: jest.fn(),
    removeAllListeners: jest.fn(),
    interpolate: jest.fn(function () {
      return mockAnimatedValue;
    }),
    stopAnimation: jest.fn(),
    resetAnimation: jest.fn(),
    __getValue: jest.fn(function () {
      return 0;
    }),
    _value: 0,
    _offset: 0
  };
  var createMockAnimation = function createMockAnimation() {
    return {
      start: jest.fn(function (cb) {
        return cb && cb({
          finished: true
        });
      }),
      stop: jest.fn(),
      reset: jest.fn()
    };
  };
  return Object.assign({}, RN, {
    Animated: Object.assign({}, RN.Animated, {
      Value: jest.fn(function () {
        return mockAnimatedValue;
      }),
      ValueXY: jest.fn(function () {
        return {
          x: mockAnimatedValue,
          y: mockAnimatedValue,
          setValue: jest.fn(),
          setOffset: jest.fn(),
          flattenOffset: jest.fn(),
          extractOffset: jest.fn(),
          addListener: jest.fn(function () {
            return 'mockListenerId';
          }),
          removeListener: jest.fn(),
          stopAnimation: jest.fn(),
          resetAnimation: jest.fn(),
          getLayout: jest.fn(function () {
            return {
              left: mockAnimatedValue,
              top: mockAnimatedValue
            };
          }),
          getTranslateTransform: jest.fn(function () {
            return [{
              translateX: mockAnimatedValue
            }, {
              translateY: mockAnimatedValue
            }];
          })
        };
      }),
      timing: jest.fn(createMockAnimation),
      spring: jest.fn(createMockAnimation),
      decay: jest.fn(createMockAnimation),
      sequence: jest.fn(function () {
        return createMockAnimation();
      }),
      parallel: jest.fn(function () {
        return createMockAnimation();
      }),
      stagger: jest.fn(function () {
        return createMockAnimation();
      }),
      delay: jest.fn(function () {
        return createMockAnimation();
      }),
      loop: jest.fn(function () {
        return createMockAnimation();
      }),
      add: jest.fn(function () {
        return mockAnimatedValue;
      }),
      subtract: jest.fn(function () {
        return mockAnimatedValue;
      }),
      multiply: jest.fn(function () {
        return mockAnimatedValue;
      }),
      divide: jest.fn(function () {
        return mockAnimatedValue;
      }),
      modulo: jest.fn(function () {
        return mockAnimatedValue;
      }),
      diffClamp: jest.fn(function () {
        return mockAnimatedValue;
      }),
      event: jest.fn(function () {
        return jest.fn();
      }),
      forkEvent: jest.fn(function () {
        return jest.fn();
      }),
      unforkEvent: jest.fn(),
      View: RN.Animated.View,
      Text: RN.Animated.Text,
      ScrollView: RN.Animated.ScrollView,
      Image: RN.Animated.Image,
      Easing: {
        linear: function linear(t) {
          return t;
        },
        ease: function ease(t) {
          return t;
        },
        quad: function quad(t) {
          return t * t;
        },
        cubic: function cubic(t) {
          return t * t * t;
        },
        poly: function poly(n) {
          return function (t) {
            return Math.pow(t, n);
          };
        },
        sin: function sin(t) {
          return 1 - Math.cos(t * Math.PI / 2);
        },
        circle: function circle(t) {
          return 1 - Math.sqrt(1 - t * t);
        },
        exp: function exp(t) {
          return Math.pow(2, 10 * (t - 1));
        },
        elastic: function elastic() {
          return function (t) {
            return t;
          };
        },
        back: function back() {
          return function (t) {
            return t;
          };
        },
        bounce: function bounce(t) {
          return t;
        },
        bezier: function bezier() {
          return function (t) {
            return t;
          };
        },
        in: function _in(easing) {
          return easing;
        },
        out: function out(easing) {
          return function (t) {
            return 1 - easing(1 - t);
          };
        },
        inOut: function inOut(easing) {
          return function (t) {
            return t < 0.5 ? easing(t * 2) / 2 : (2 - easing((1 - t) * 2)) / 2;
          };
        }
      }
    })
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "colors", "style"];
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
_reactNative.NativeModules.SettingsManager = _reactNative.NativeModules.SettingsManager || {
  settings: {
    AppleLocale: 'en_US'
  }
};
if (typeof global.setImmediate === 'undefined') {
  global.setImmediate = function (fn) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return setTimeout.apply(void 0, [fn, 0].concat(args));
  };
}
if (typeof global.clearImmediate === 'undefined') {
  global.clearImmediate = function (id) {
    return clearTimeout(id);
  };
}
var originalConsole = Object.assign({}, console);
global.console = Object.assign({}, console, {
  error: jest.fn(function (message) {
    if (typeof message === 'string' && message.includes('Warning: An update to') && message.includes('was not wrapped in act')) {
      return;
    }
    originalConsole.error(message);
  }),
  warn: jest.fn(function (message) {
    if (typeof message === 'string' && message.includes('Warning: An update to') && message.includes('was not wrapped in act')) {
      return;
    }
    originalConsole.warn(message);
  })
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,