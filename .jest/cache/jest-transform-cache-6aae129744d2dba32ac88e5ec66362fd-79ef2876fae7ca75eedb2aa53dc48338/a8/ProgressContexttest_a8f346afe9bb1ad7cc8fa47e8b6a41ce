cb40ec4037063a407e27f95740b06a65
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    setItem: jest.fn(function () {
      return Promise.resolve();
    }),
    getItem: jest.fn(function () {
      return Promise.resolve(null);
    }),
    removeItem: jest.fn(function () {
      return Promise.resolve();
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _ProgressContext = require("../../src/contexts/ProgressContext");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var constants = _interopRequireWildcard(require("../../src/utils/constants"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var TestComponent = function TestComponent() {
  var _progress$exercises$v;
  var _useProgress = (0, _ProgressContext.useProgress)(),
    progress = _useProgress.progress,
    isLoading = _useProgress.isLoading,
    updateExerciseProgress = _useProgress.updateExerciseProgress,
    updateStats = _useProgress.updateStats,
    calculateGlobalProgress = _useProgress.calculateGlobalProgress,
    calculateLevelProgress = _useProgress.calculateLevelProgress,
    resetProgress = _useProgress.resetProgress;
  if (isLoading) {
    return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "loading-status",
      children: "Loading..."
    });
  }
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    children: [(0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "global-progress",
      children: ["Global: ", calculateGlobalProgress(), "%"]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "level1-progress",
      children: ["Level 1: ", calculateLevelProgress('1'), "%"]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "level-bonus-progress",
      children: ["Level Bonus: ", calculateLevelProgress('bonus'), "%"]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "vocab-level1-completed",
      children: ["Vocab Level 1 Completed: ", ((_progress$exercises$v = progress.exercises.vocabulary) == null || (_progress$exercises$v = _progress$exercises$v['1']) == null ? void 0 : _progress$exercises$v.completed) || 0]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "streak",
      children: ["Streak: ", progress.stats.streak]
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Update Vocab Level 1",
      onPress: function onPress() {
        return updateExerciseProgress('vocabulary', '1', 50);
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Update Streak",
      onPress: function onPress() {
        return updateStats({
          streak: 5
        });
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Reset Progress",
      onPress: resetProgress
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Update Vocab Bonus",
      onPress: function onPress() {
        return updateExerciseProgress('vocabulary', 'bonus', 75);
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Update Grammar Bonus",
      onPress: function onPress() {
        return updateExerciseProgress('grammar', 'bonus', 50);
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Add New Exercise Type",
      onPress: function onPress() {
        return updateExerciseProgress('newType', '1', 25);
      }
    })]
  });
};
var ComponentWithoutUseProgress = function ComponentWithoutUseProgress() {
  (0, _ProgressContext.useProgress)();
  return null;
};
var ComponentWithoutUseProgressRead = function ComponentWithoutUseProgressRead() {
  (0, _ProgressContext.useProgressRead)();
  return null;
};
var ComponentWithoutUseProgressWrite = function ComponentWithoutUseProgressWrite() {
  (0, _ProgressContext.useProgressWrite)();
  return null;
};
var ComponentWithUseProgressRead = function ComponentWithUseProgressRead() {
  var _useProgressRead = (0, _ProgressContext.useProgressRead)(),
    progress = _useProgressRead.progress,
    calculateGlobalProgress = _useProgressRead.calculateGlobalProgress;
  return (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
    testID: "read-hook-test",
    children: ["Global from read hook: ", calculateGlobalProgress(), "%"]
  });
};
var ComponentWithUseProgressWrite = function ComponentWithUseProgressWrite() {
  var _useProgressWrite = (0, _ProgressContext.useProgressWrite)(),
    updateStats = _useProgressWrite.updateStats;
  return (0, _jsxRuntime.jsx)(_reactNative2.Button, {
    testID: "write-hook-test",
    title: "Update from write hook",
    onPress: function onPress() {
      return updateStats({
        streak: 10
      });
    }
  });
};
describe('ProgressContext', function () {
  beforeEach(function () {
    jest.useFakeTimers();
    jest.clearAllMocks();
    _asyncStorage.default.getItem.mockResolvedValue(null);
  });
  afterEach(function () {
    jest.runOnlyPendingTimers();
    jest.useRealTimers();
  });
  it('loads initial progress from AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
    var mockProgress = Object.assign({}, (0, _ProgressContext.createInitialProgress)(), {
      levels: {
        '1': {
          completed: 25,
          total: 100
        }
      },
      exercises: {
        vocabulary: {
          '1': {
            completed: 25,
            total: 100
          }
        }
      },
      stats: {
        streak: 1
      }
    });
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(mockProgress));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    expect(_reactNative.screen.getByTestId('loading-status')).toBeTruthy();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_reactNative.screen.queryByTestId('loading-status')).toBeNull();
    var level1ProgressText = _reactNative.screen.getByTestId('level1-progress').props.children.join('');
    expect(level1ProgressText).toBe('Level 1: 25%');
    var streakDisplay = _reactNative.screen.getByTestId('streak').props.children.join('');
    expect(streakDisplay).toBe('Streak: 1');
  }));
  it('updates exercise progress and recalculates level progress', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Vocab Level 1'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var savedProgress = JSON.parse(_asyncStorage.default.setItem.mock.calls[0][1]);
    expect(savedProgress.exercises.vocabulary['1'].completed).toBe(50);
    expect(savedProgress.levels['1'].completed).toBe(6);
  }));
  it('updates progress for a new exercise type and calculates average', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Add New Exercise Type'));
    var level1Text = _reactNative.screen.getByTestId('level1-progress').props.children.join('');
    expect(level1Text).toBe('Level 1: 3%');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var savedProgress = JSON.parse(_asyncStorage.default.setItem.mock.calls[0][1]);
    expect(savedProgress.exercises.newType['1'].completed).toBe(25);
  }));
  it('updates stats and saves to AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var streakChildren = _reactNative.screen.getByTestId('streak').props.children;
    var streakText = Array.isArray(streakChildren) ? streakChildren.join('') : streakChildren;
    expect(streakText).toBe('Streak: 0');
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Streak'));
    streakChildren = _reactNative.screen.getByTestId('streak').props.children;
    streakText = Array.isArray(streakChildren) ? streakChildren.join('') : streakChildren;
    expect(streakText).toBe('Streak: 5');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_asyncStorage.default.setItem).toHaveBeenCalledTimes(1);
    var savedProgress = JSON.parse(_asyncStorage.default.setItem.mock.calls[0][1]);
    expect(savedProgress.stats.streak).toBe(5);
  }));
  it('resets progress and removes from AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Vocab Level 1'));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Streak'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_asyncStorage.default.setItem).toHaveBeenCalledTimes(1);
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Reset Progress'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield Promise.resolve();
    }));
    expect(_asyncStorage.default.removeItem).toHaveBeenCalledWith(STORAGE_KEYS.USER_PROGRESS);
    var level1Children = _reactNative.screen.getByTestId('level1-progress').props.children;
    var level1Text = Array.isArray(level1Children) ? level1Children.join('') : level1Children;
    expect(level1Text).toBe('Level 1: 0%');
    var streakChildren = _reactNative.screen.getByTestId('streak').props.children;
    var streakText = Array.isArray(streakChildren) ? streakChildren.join('') : streakChildren;
    expect(streakText).toBe('Streak: 0');
  }));
  it('calculates level progress correctly when there are no exercises for a level', (0, _asyncToGenerator2.default)(function* () {
    var mockInitialProgress = (0, _ProgressContext.createInitialProgress)();
    mockInitialProgress.exercises = {};
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(mockInitialProgress));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var level1Text = _reactNative.screen.getByTestId('level1-progress').props.children.join('');
    expect(level1Text).toBe('Level 1: 0%');
  }));
  it('handles errors during initial loading', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockRejectedValueOnce(new Error('Mock AsyncStorage Error'));
    var consoleErrorSpy = jest.spyOn(console, 'error');
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(consoleErrorSpy).toHaveBeenCalledWith('Erreur chargement progression:', expect.any(Error));
    expect(_reactNative.screen.queryByTestId('loading-status')).toBeNull();
    var globalProgressText = _reactNative.screen.getByTestId('global-progress').props.children.join('');
    expect(globalProgressText).toBe('Global: 0%');
    consoleErrorSpy.mockRestore();
  }));
  it('handles errors during saving progress gracefully', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.setItem.mockRejectedValueOnce(new Error('Mock AsyncStorage Save Error'));
    var consoleErrorSpy = jest.spyOn(console, 'error');
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Streak'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(500);
    }));
    expect(consoleErrorSpy).toHaveBeenCalledWith('Erreur sauvegarde progression:', expect.any(Error));
    consoleErrorSpy.mockRestore();
  }));
  it('handles error during progress reset gracefully', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.removeItem.mockRejectedValueOnce(new Error('Mock AsyncStorage removeItem Error'));
    var consoleErrorSpy = jest.spyOn(console, 'error');
    var mockProgress = Object.assign({}, (0, _ProgressContext.createInitialProgress)(), {
      stats: {
        streak: 1
      },
      levels: {
        '1': {
          completed: 50,
          total: 100
        }
      }
    });
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(mockProgress));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_reactNative.screen.getByTestId('streak').props.children.join('')).toBe('Streak: 1');
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Reset Progress'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield Promise.resolve();
    }));
    expect(consoleErrorSpy).toHaveBeenCalledWith('Erreur reset progression:', expect.any(Error));
    var streakText = _reactNative.screen.getByTestId('streak').props.children.join('');
    expect(streakText).toBe('Streak: 1');
    consoleErrorSpy.mockRestore();
  }));
  it('throws an error if useProgress is used outside of ProgressProvider', function () {
    var originalError = console.error;
    console.error = jest.fn();
    expect(function () {
      return (0, _reactNative.render)((0, _jsxRuntime.jsx)(ComponentWithoutUseProgress, {}));
    }).toThrow('useProgress must be used within a ProgressProvider');
    console.error = originalError;
  });
  it('throws an error if useProgressRead is used outside of ProgressProvider', function () {
    var originalError = console.error;
    console.error = jest.fn();
    expect(function () {
      return (0, _reactNative.render)((0, _jsxRuntime.jsx)(ComponentWithoutUseProgressRead, {}));
    }).toThrow('useProgressRead must be used within a ProgressProvider');
    console.error = originalError;
  });
  it('throws an error if useProgressWrite is used outside of ProgressProvider', function () {
    var originalError = console.error;
    console.error = jest.fn();
    expect(function () {
      return (0, _reactNative.render)((0, _jsxRuntime.jsx)(ComponentWithoutUseProgressWrite, {}));
    }).toThrow('useProgressWrite must be used within a ProgressProvider');
    console.error = originalError;
  });
  it('useProgressRead returns context successfully when used within provider', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(ComponentWithUseProgressRead, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var readHookText = _reactNative.screen.getByTestId('read-hook-test').props.children.join('');
    expect(readHookText).toBe('Global from read hook: 0%');
  }));
  it('useProgressWrite returns context successfully when used within provider', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsxs)(_ProgressContext.ProgressProvider, {
      children: [(0, _jsxRuntime.jsx)(ComponentWithUseProgressWrite, {}), (0, _jsxRuntime.jsx)(TestComponent, {})]
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByTestId('write-hook-test'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var streakText = _reactNative.screen.getByTestId('streak').props.children.join('');
    expect(streakText).toBe('Streak: 10');
  }));
  it('should clear previous timeout on rapid updates', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    (0, _reactNative.act)(function () {
      _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Streak'));
    });
    jest.advanceTimersByTime(250);
    (0, _reactNative.act)(function () {
      _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Vocab Level 1'));
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_asyncStorage.default.setItem).toHaveBeenCalledTimes(1);
  }));
  describe('Additional Coverage Tests for ProgressContext', function () {
    var bonusExercisesSpy;
    beforeEach(function () {
      bonusExercisesSpy = jest.spyOn(constants, 'BONUS_EXERCISES', 'get').mockReturnValue([]);
    });
    afterEach(function () {
      bonusExercisesSpy.mockRestore();
    });
    it('should correctly calculate global progress when there are no bonus exercises', (0, _asyncToGenerator2.default)(function* () {
      var mockProgress = Object.assign({}, (0, _ProgressContext.createInitialProgress)(), {
        levels: {
          '1': {
            completed: 50,
            total: 100
          }
        }
      });
      _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(mockProgress));
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
        children: (0, _jsxRuntime.jsx)(TestComponent, {})
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        jest.runAllTimers();
      }));
      var globalProgressText = _reactNative.screen.getByTestId('global-progress').props.children.join('');
      expect(globalProgressText).toBe('Global: 5%');
    }));
    it('should handle undefined levels gracefully in global progress calculation', (0, _asyncToGenerator2.default)(function* () {
      bonusExercisesSpy.mockReturnValue(constants.BONUS_EXERCISES);
      var mockProgressWithUndefinedLevel = Object.assign({}, (0, _ProgressContext.createInitialProgress)(), {
        levels: {
          '1': {
            completed: 50,
            total: 100
          }
        }
      });
      _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(mockProgressWithUndefinedLevel));
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
        children: (0, _jsxRuntime.jsx)(TestComponent, {})
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        jest.runAllTimers();
      }));
      var globalProgressText = _reactNative.screen.getByTestId('global-progress').props.children.join('');
      expect(globalProgressText).toBe('Global: 5%');
    }));
    it('should handle a new exercise type with a non-existent level entry', (0, _asyncToGenerator2.default)(function* () {
      var mockProgress = Object.assign({}, (0, _ProgressContext.createInitialProgress)(), {
        exercises: {}
      });
      _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(mockProgress));
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
        children: (0, _jsxRuntime.jsx)(TestComponent, {})
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        jest.runAllTimers();
      }));
      _reactNative.fireEvent.press(_reactNative.screen.getByText('Add New Exercise Type'));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        jest.runAllTimers();
      }));
      var savedProgress = JSON.parse(_asyncStorage.default.setItem.mock.calls[0][1]);
      expect(savedProgress.exercises.newType['1'].completed).toBe(25);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,