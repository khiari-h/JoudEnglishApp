{"version":3,"names":["calculateTotalWords","exports","exercises","arguments","length","undefined","reduce","total","category","_category$words","words","calculateCompletedWordsCount","completedWords","Object","keys","count","key","_completedWords$key","calculateTotalProgress","totalWords","totalCompleted","Math","min","calculateCategoryProgress","map","index","_category$words2","_completedWords$index","totalInCategory","completedInCategory","progress","round","title"],"sources":["vocabularyStats.js"],"sourcesContent":["// utils/vocabularyStats.js\r\n\r\nexport const calculateTotalWords = (exercises = []) =>\r\n  exercises.reduce(\r\n    (total, category) => total + (category.words?.length || 0),\r\n    0\r\n  );\r\n\r\nexport const calculateCompletedWordsCount = (completedWords = {}) =>\r\n  Object.keys(completedWords).reduce(\r\n    (count, key) => count + (completedWords[key]?.length || 0),\r\n    0\r\n  );\r\n\r\nexport const calculateTotalProgress = (exercises = [], completedWords = {}) => {\r\n  const totalWords = calculateTotalWords(exercises);\r\n  const totalCompleted = calculateCompletedWordsCount(completedWords);\r\n  return totalWords > 0\r\n    ? Math.min(100, (totalCompleted / totalWords) * 100)\r\n    : 0;\r\n};\r\n\r\n// ✅ NOUVELLE FONCTION - Calcul progression par catégorie\r\nexport const calculateCategoryProgress = (exercises = [], completedWords = {}) => {\r\n  return exercises.map((category, index) => {\r\n    const totalInCategory = category.words?.length || 0;\r\n    const completedInCategory = completedWords[index]?.length || 0;\r\n    const progress = totalInCategory > 0 \r\n      ? Math.min(100, Math.round((completedInCategory / totalInCategory) * 100))\r\n      : 0;\r\n\r\n    return {\r\n      title: category.title || `Catégorie ${index + 1}`,\r\n      totalWords: totalInCategory,\r\n      completedWords: completedInCategory,\r\n      progress\r\n    };\r\n  });\r\n};\r\n"],"mappings":"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","ignoreList":[]}