657cd32a2301a71526b47e3c69e15a4d
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    },
    useRoute: function useRoute() {
      return {
        params: {}
      };
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _layout = _interopRequireDefault(require("../../app/_layout"));
var _AppProvider = require("../../src/contexts/AppProvider");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Assessment and Placement Integration Test', function () {
  it('should place the user at the correct level based on assessment results', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AppProvider.AppProvider, {
        children: (0, _jsxRuntime.jsx)(LevelAssessmentProvider, {
          children: (0, _jsxRuntime.jsx)(_layout.default, {})
        })
      })),
      getByText = _render.getByText,
      findByText = _render.findByText;
    _reactNative.fireEvent.press(getByText(/Commencer le test de niveau/i));
    _reactNative.fireEvent.press(getByText(/Réponse A/i));
    _reactNative.fireEvent.press(getByText(/Réponse B/i));
    _reactNative.fireEvent.press(getByText(/Terminer le test/i));
    var recommendedLevel = yield findByText(/Niveau recommandé : B1/i);
    expect(recommendedLevel).toBeTruthy();
    _reactNative.fireEvent.press(getByText(/Continuer/i));
    var levelB1 = yield findByText(/Niveau B1/i);
    expect(levelB1).toBeTruthy();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsInVzZU5hdmlnYXRpb24iLCJuYXZpZ2F0ZSIsImZuIiwiZ29CYWNrIiwidXNlUm91dGUiLCJwYXJhbXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9sYXlvdXQiLCJfQXBwUHJvdmlkZXIiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwiZGVzY3JpYmUiLCJpdCIsImRlZmF1bHQiLCJfcmVuZGVyIiwicmVuZGVyIiwianN4IiwiQXBwUHJvdmlkZXIiLCJjaGlsZHJlbiIsIkxldmVsQXNzZXNzbWVudFByb3ZpZGVyIiwiZ2V0QnlUZXh0IiwiZmluZEJ5VGV4dCIsImZpcmVFdmVudCIsInByZXNzIiwicmVjb21tZW5kZWRMZXZlbCIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJsZXZlbEIxIl0sInNvdXJjZXMiOlsiYXNzZXNzbWVudC1hbmQtcGxhY2VtZW50LnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQsIHdhaXRGb3IgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgQXBwIGZyb20gJy4uLy4uL2FwcC9fbGF5b3V0JztcbmltcG9ydCB7IEFwcFByb3ZpZGVyIH0gZnJvbSAnLi4vLi4vc3JjL2NvbnRleHRzL0FwcFByb3ZpZGVyJztcblxuXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+ICh7XG4gIC4uLmplc3QucmVxdWlyZUFjdHVhbCgnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJyksXG4gIHVzZU5hdmlnYXRpb246ICgpID0+ICh7XG4gICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcbiAgICBnb0JhY2s6IGplc3QuZm4oKSxcbiAgfSksXG4gIHVzZVJvdXRlOiAoKSA9PiAoe1xuICAgIHBhcmFtczoge30sXG4gIH0pLFxufSkpO1xuXG5kZXNjcmliZSgnQXNzZXNzbWVudCBhbmQgUGxhY2VtZW50IEludGVncmF0aW9uIFRlc3QnLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgcGxhY2UgdGhlIHVzZXIgYXQgdGhlIGNvcnJlY3QgbGV2ZWwgYmFzZWQgb24gYXNzZXNzbWVudCByZXN1bHRzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0LCBmaW5kQnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICA8QXBwUHJvdmlkZXI+XG4gICAgICAgIDxMZXZlbEFzc2Vzc21lbnRQcm92aWRlcj5cbiAgICAgICAgICA8QXBwIC8+XG4gICAgICAgIDwvTGV2ZWxBc3Nlc3NtZW50UHJvdmlkZXI+XG4gICAgICA8L0FwcFByb3ZpZGVyPlxuICAgICk7XG5cbiAgICAvLyAxLiBEw6ltYXJyZXIgbGUgdGVzdCBkZSBuaXZlYXVcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KC9Db21tZW5jZXIgbGUgdGVzdCBkZSBuaXZlYXUvaSkpO1xuXG4gICAgLy8gMi4gU2ltdWxlciBsZXMgcsOpcG9uc2VzIGF1IHRlc3RcbiAgICAvLyAoQ2V0dGUgcGFydGllIGTDqXBlbmQgZGUgbGEgc3RydWN0dXJlIGRlIHZvdHJlIHRlc3QgZGUgbml2ZWF1KVxuICAgIC8vIEV4ZW1wbGUgOiByw6lwb25kcmUgY29ycmVjdGVtZW50IMOgIGRlcyBxdWVzdGlvbnMgcG91ciB1biBuaXZlYXUgQjFcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KC9Sw6lwb25zZSBBL2kpKTsgLy8gU2ltdWxleiBsZXMgcsOpcG9uc2VzXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgvUsOpcG9uc2UgQi9pKSk7XG4gICAgLy8gLi4uIGNvbnRpbnVleiBwb3VyIHRvdXRlcyBsZXMgcXVlc3Rpb25zXG5cbiAgICAvLyAzLiBUZXJtaW5lciBsZSB0ZXN0XG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgvVGVybWluZXIgbGUgdGVzdC9pKSk7XG5cbiAgICAvLyA0LiBWw6lyaWZpZXIgcXVlIGwndXRpbGlzYXRldXIgZXN0IHJlZGlyaWfDqSB2ZXJzIGxlIGJvbiBuaXZlYXVcbiAgICBjb25zdCByZWNvbW1lbmRlZExldmVsID0gYXdhaXQgZmluZEJ5VGV4dCgvTml2ZWF1IHJlY29tbWFuZMOpIDogQjEvaSk7XG4gICAgZXhwZWN0KHJlY29tbWVuZGVkTGV2ZWwpLnRvQmVUcnV0aHkoKTtcblxuICAgIC8vIDUuIE5hdmlndWVyIHZlcnMgbGEgc8OpbGVjdGlvbiBkZSBuaXZlYXUgcG91ciBjb25maXJtZXJcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KC9Db250aW51ZXIvaSkpO1xuICAgIGNvbnN0IGxldmVsQjEgPSBhd2FpdCBmaW5kQnlUZXh0KC9OaXZlYXUgQjEvaSk7XG4gICAgZXhwZWN0KGxldmVsQjEpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBT0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDBCQUEwQixFQUFFO0VBQUEsT0FBQUMsTUFBQSxDQUFBQyxNQUFBLEtBQ2pDQyxJQUFJLENBQUNDLGFBQWEsQ0FBQywwQkFBMEIsQ0FBQztJQUNqREMsYUFBYSxFQUFFLFNBQWZBLGFBQWFBLENBQUE7TUFBQSxPQUFTO1FBQ3BCQyxRQUFRLEVBQUVILElBQUksQ0FBQ0ksRUFBRSxDQUFDLENBQUM7UUFDbkJDLE1BQU0sRUFBRUwsSUFBSSxDQUFDSSxFQUFFLENBQUM7TUFDbEIsQ0FBQztJQUFBLENBQUM7SUFDRkUsUUFBUSxFQUFFLFNBQVZBLFFBQVFBLENBQUE7TUFBQSxPQUFTO1FBQ2ZDLE1BQU0sRUFBRSxDQUFDO01BQ1gsQ0FBQztJQUFBO0VBQUM7QUFBQSxDQUNGLENBQUM7QUFBQyxJQUFBQyxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsa0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQWZKLElBQUFFLE1BQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLFlBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLE9BQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFLLFlBQUEsR0FBQUwsT0FBQTtBQUE2RCxJQUFBTSxXQUFBLEdBQUFOLE9BQUE7QUFBQSxTQUFBYixZQUFBO0VBQUEsSUFBQW9CLFFBQUEsR0FBQVAsT0FBQTtJQUFBVCxJQUFBLEdBQUFnQixRQUFBLENBQUFoQixJQUFBO0VBQUFKLFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFJLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQWM3RGlCLFFBQVEsQ0FBQywyQ0FBMkMsRUFBRSxZQUFNO0VBQzFEQyxFQUFFLENBQUMsd0VBQXdFLE1BQUFSLGtCQUFBLENBQUFTLE9BQUEsRUFBRSxhQUFZO0lBQ3ZGLElBQUFDLE9BQUEsR0FBa0MsSUFBQUMsbUJBQU0sRUFDdEMsSUFBQU4sV0FBQSxDQUFBTyxHQUFBLEVBQUNSLFlBQUEsQ0FBQVMsV0FBVztRQUFBQyxRQUFBLEVBQ1YsSUFBQVQsV0FBQSxDQUFBTyxHQUFBLEVBQUNHLHVCQUF1QjtVQUFBRCxRQUFBLEVBQ3RCLElBQUFULFdBQUEsQ0FBQU8sR0FBQSxFQUFDVCxPQUFBLENBQUFNLE9BQUcsSUFBRTtRQUFDLENBQ2dCO01BQUMsQ0FDZixDQUNmLENBQUM7TUFOT08sU0FBUyxHQUFBTixPQUFBLENBQVRNLFNBQVM7TUFBRUMsVUFBVSxHQUFBUCxPQUFBLENBQVZPLFVBQVU7SUFTN0JDLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0gsU0FBUyxDQUFDLDhCQUE4QixDQUFDLENBQUM7SUFLMURFLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0gsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3hDRSxzQkFBUyxDQUFDQyxLQUFLLENBQUNILFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUl4Q0Usc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDSCxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUcvQyxJQUFNSSxnQkFBZ0IsU0FBU0gsVUFBVSxDQUFDLHlCQUF5QixDQUFDO0lBQ3BFSSxNQUFNLENBQUNELGdCQUFnQixDQUFDLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0lBR3JDSixzQkFBUyxDQUFDQyxLQUFLLENBQUNILFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN4QyxJQUFNTyxPQUFPLFNBQVNOLFVBQVUsQ0FBQyxZQUFZLENBQUM7SUFDOUNJLE1BQU0sQ0FBQ0UsT0FBTyxDQUFDLENBQUNELFVBQVUsQ0FBQyxDQUFDO0VBQzlCLENBQUMsRUFBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==