{"version":3,"names":["_react","require","_asyncStorage","_interopRequireDefault","useDailyWords","_useState","useState","_useState2","_slicedToArray2","default","wordsToday","setWordsToday","_useState3","_useState4","isLoading","setIsLoading","getTodayString","Date","toDateString","handleStorageError","error","operation","level","arguments","length","undefined","console","warn","calculateDailyWords","useCallback","_asyncToGenerator2","today","todayCount","levels","_loop","storageKey","savedData","AsyncStorage","getItem","data","JSON","parse","completedWords","Object","keys","reduce","acc","categoryIndex","wordsInCategory","catAcc","word","timestamp","wordDate","useEffect","now","tomorrow","setDate","getDate","setHours","timeUntilMidnight","getTime","midnightTimer","setTimeout","dailyInterval","setInterval","clearInterval","clearTimeout","refresh","_default","exports"],"sources":["useDailyWords.js"],"sourcesContent":["// src/hooks/useDailyWords.js - VERSION CORRIGÃ‰E\n\nimport { useState, useEffect, useCallback } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n/**\n * ðŸ“… Hook pour compter les mots appris AUJOURD'HUI\n * Reset automatique Ã  minuit\n * Focus sur vocabulary CLASSIC uniquement\n * âœ… PLUS DE TREND - juste le nombre\n */\nconst useDailyWords = () => {\n  const [wordsToday, setWordsToday] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // =================== DATES HELPER ===================\n  const getTodayString = () => new Date().toDateString();\n\n  // =================== ERROR HANDLING HELPER ===================\n  const handleStorageError = (error, operation, level = 'unknown') => {\n    console.warn(`Storage error in ${operation} for level ${level}:`, error);\n  };\n\n  // =================== CALCUL DES MOTS QUOTIDIENS ===================\n  const calculateDailyWords = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      const today = getTodayString();\n      let todayCount = 0;\n\n      // Parcourir tous les niveaux (1 Ã  6)\n      const levels = ['1', '2', '3', '4', '5', '6'];\n      \n      for (const level of levels) {\n        try {\n          // âœ… Seulement vocabulary CLASSIC (pas fast)\n          const storageKey = `vocabulary_${level}_classic`;\n          const savedData = await AsyncStorage.getItem(storageKey);\n          \n          if (savedData) {\n            const data = JSON.parse(savedData);\n            const completedWords = data.completedWords || {};\n\n            todayCount += Object.keys(completedWords).reduce((acc, categoryIndex) => {\n              const wordsInCategory = completedWords[categoryIndex] || [];\n              return acc + wordsInCategory.reduce((catAcc, word) => {\n                if (typeof word === 'object' && word.timestamp) {\n                  const wordDate = new Date(word.timestamp).toDateString();\n                  if (wordDate === today) {\n                    return catAcc + 1;\n                  }\n                }\n                return catAcc;\n              }, 0);\n            }, 0);\n          }\n        } catch (error) {\n          // âœ… Gestion d'erreur appropriÃ©e\n          handleStorageError(error, 'calculateDailyWords', level);\n          // Continue avec les autres niveaux si erreur\n        }\n      }\n\n      setWordsToday(todayCount);\n\n    } catch (error) {\n      // âœ… Gestion d'erreur appropriÃ©e\n      console.error('Error calculating daily words:', error);\n      setWordsToday(0);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // =================== CHARGEMENT INITIAL ===================\n  useEffect(() => {\n    calculateDailyWords();\n  }, [calculateDailyWords]);\n\n  // =================== AUTO-REFRESH Ã€ MINUIT ===================\n  useEffect(() => {\n    const now = new Date();\n    const tomorrow = new Date(now);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    tomorrow.setHours(0, 0, 0, 0); // Minuit\n    \n    const timeUntilMidnight = tomorrow.getTime() - now.getTime();\n    \n    // Timer pour refresh Ã  minuit\n    const midnightTimer = setTimeout(() => {\n      calculateDailyWords(); // Reset automatique\n      \n      // Ensuite refresh chaque 24h\n      const dailyInterval = setInterval(calculateDailyWords, 24 * 60 * 60 * 1000);\n      \n      return () => clearInterval(dailyInterval);\n    }, timeUntilMidnight);\n\n    return () => clearTimeout(midnightTimer);\n  }, [calculateDailyWords]);\n\n  // =================== REFRESH MANUEL ===================\n  const refresh = useCallback(() => {\n    calculateDailyWords();\n  }, [calculateDailyWords]);\n\n  return {\n    wordsToday: wordsToday || 0,     // âœ… Juste le nombre\n    isLoading,\n    refresh,\n    // âœ… SUPPRIMÃ‰ : wordsYesterday, trend, getTrend()\n  };\n};\n\nexport default useDailyWords;"],"mappings":"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","ignoreList":[]}