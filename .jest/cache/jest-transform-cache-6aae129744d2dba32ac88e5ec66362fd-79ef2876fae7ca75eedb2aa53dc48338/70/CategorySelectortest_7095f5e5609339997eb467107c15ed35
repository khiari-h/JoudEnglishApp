07d3f25443b5612b8be47e55020212c5
_getJestObj().mock('expo-linear-gradient', function () {
  var _require = require('react-native'),
    View = _require.View;
  return {
    LinearGradient: function LinearGradient(props) {
      return (0, _jsxRuntime.jsx)(View, Object.assign({}, props));
    }
  };
});
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  RN.Animated.Value = jest.fn(function () {
    return {
      interpolate: jest.fn(function (config) {
        return config.outputRange[0];
      }),
      addListener: jest.fn(),
      removeListener: jest.fn(),
      removeAllListeners: jest.fn(),
      stopAnimation: jest.fn(),
      resetAnimation: jest.fn(),
      setValue: jest.fn()
    };
  });
  RN.Animated.timing = jest.fn(function () {
    return {
      start: jest.fn(function (callback) {
        if (callback) {
          callback({
            finished: true
          });
        }
      })
    };
  });
  return RN;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _CategorySelector = _interopRequireDefault(require("../../../src/components/exercise-common/CategorySelector"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('CategorySelector', function () {
  var categories = [{
    id: '1',
    name: 'Grammar'
  }, {
    id: '2',
    name: 'Vocabulary'
  }, {
    id: '3',
    name: 'Reading'
  }];
  it('renders correctly with minimum props', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories
      })),
      getByText = _render.getByText;
    expect(getByText('Grammar')).toBeTruthy();
    expect(getByText('Vocabulary')).toBeTruthy();
    expect(getByText('Reading')).toBeTruthy();
  });
  it('renders nothing when categories array is empty', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: []
      })),
      queryByText = _render2.queryByText;
    expect(queryByText('Grammar')).toBeNull();
  });
  it('displays the selected category with the correct style', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: function onSelectCategory() {}
      })),
      getByText = _render3.getByText;
    expect(getByText('âœ¨')).toBeTruthy();
  });
  it('calls onSelectCategory with the correct category id when a category is pressed', function () {
    var onSelectCategory = jest.fn();
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        onSelectCategory: onSelectCategory
      })),
      getByText = _render4.getByText;
    _reactNative.fireEvent.press(getByText('Vocabulary'));
    expect(onSelectCategory).toHaveBeenCalledWith('2');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfcmVxdWlyZSIsInJlcXVpcmUiLCJWaWV3IiwiTGluZWFyR3JhZGllbnQiLCJwcm9wcyIsIl9qc3hSdW50aW1lIiwianN4IiwiT2JqZWN0IiwiYXNzaWduIiwiUk4iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsIkFuaW1hdGVkIiwiVmFsdWUiLCJmbiIsImludGVycG9sYXRlIiwiY29uZmlnIiwib3V0cHV0UmFuZ2UiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwic3RvcEFuaW1hdGlvbiIsInJlc2V0QW5pbWF0aW9uIiwic2V0VmFsdWUiLCJ0aW1pbmciLCJzdGFydCIsImNhbGxiYWNrIiwiZmluaXNoZWQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3JlYWN0IiwiX3JlYWN0TmF0aXZlIiwiX0NhdGVnb3J5U2VsZWN0b3IiLCJfcmVxdWlyZTIiLCJkZXNjcmliZSIsImNhdGVnb3JpZXMiLCJpZCIsIm5hbWUiLCJpdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJkZWZhdWx0IiwiZ2V0QnlUZXh0IiwiZXhwZWN0IiwidG9CZVRydXRoeSIsIl9yZW5kZXIyIiwicXVlcnlCeVRleHQiLCJ0b0JlTnVsbCIsIl9yZW5kZXIzIiwic2VsZWN0ZWRDYXRlZ29yeSIsIm9uU2VsZWN0Q2F0ZWdvcnkiLCJfcmVuZGVyNCIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiXSwic291cmNlcyI6WyJDYXRlZ29yeVNlbGVjdG9yLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXG4vLyBfX3Rlc3RzX18vY29tcG9uZW50cy9leGVyY2lzZS1jb21tb24vQ2F0ZWdvcnlTZWxlY3Rvci50ZXN0LmpzXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgQ2F0ZWdvcnlTZWxlY3RvciBmcm9tICcuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9leGVyY2lzZS1jb21tb24vQ2F0ZWdvcnlTZWxlY3Rvcic7XG5cbi8vIE1vY2sgZGVzIGTDqXBlbmRhbmNlc1xuamVzdC5tb2NrKCdleHBvLWxpbmVhci1ncmFkaWVudCcsICgpID0+IHtcbiAgY29uc3QgeyBWaWV3IH0gPSByZXF1aXJlKCdyZWFjdC1uYXRpdmUnKTtcbiAgcmV0dXJuIHtcbiAgICBMaW5lYXJHcmFkaWVudDogKHByb3BzKSA9PiA8VmlldyB7Li4ucHJvcHN9IC8+LFxuICB9O1xufSk7XG5cbi8vIE1vY2sgZHUgbW9kdWxlIEFuaW1hdGVkIGRlIFJlYWN0IE5hdGl2ZVxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUnLCAoKSA9PiB7XG4gIGNvbnN0IFJOID0gamVzdC5yZXF1aXJlQWN0dWFsKCdyZWFjdC1uYXRpdmUnKTtcblxuICAvLyBNb2NrIEFuaW1hdGVkXG4gIFJOLkFuaW1hdGVkLlZhbHVlID0gamVzdC5mbigoKSA9PiAoe1xuICAgIGludGVycG9sYXRlOiBqZXN0LmZuKGNvbmZpZyA9PiBjb25maWcub3V0cHV0UmFuZ2VbMF0pLFxuICAgIGFkZExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgcmVtb3ZlTGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICByZW1vdmVBbGxMaXN0ZW5lcnM6IGplc3QuZm4oKSxcbiAgICBzdG9wQW5pbWF0aW9uOiBqZXN0LmZuKCksXG4gICAgcmVzZXRBbmltYXRpb246IGplc3QuZm4oKSxcbiAgICBzZXRWYWx1ZTogamVzdC5mbigpLFxuICB9KSk7XG5cbiAgUk4uQW5pbWF0ZWQudGltaW5nID0gamVzdC5mbigoKSA9PiAoe1xuICAgIHN0YXJ0OiBqZXN0LmZuKGNhbGxiYWNrID0+IHtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjayh7IGZpbmlzaGVkOiB0cnVlIH0pO1xuICAgICAgfVxuICAgIH0pLFxuICB9KSk7XG5cbiAgcmV0dXJuIFJOO1xufSk7XG5cbmRlc2NyaWJlKCdDYXRlZ29yeVNlbGVjdG9yJywgKCkgPT4ge1xuICBjb25zdCBjYXRlZ29yaWVzID0gW1xuICAgIHsgaWQ6ICcxJywgbmFtZTogJ0dyYW1tYXInIH0sXG4gICAgeyBpZDogJzInLCBuYW1lOiAnVm9jYWJ1bGFyeScgfSxcbiAgICB7IGlkOiAnMycsIG5hbWU6ICdSZWFkaW5nJyB9LFxuICBdO1xuXG4gIGl0KCdyZW5kZXJzIGNvcnJlY3RseSB3aXRoIG1pbmltdW0gcHJvcHMnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcig8Q2F0ZWdvcnlTZWxlY3RvciBjYXRlZ29yaWVzPXtjYXRlZ29yaWVzfSAvPik7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnR3JhbW1hcicpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnVm9jYWJ1bGFyeScpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnUmVhZGluZycpKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KCdyZW5kZXJzIG5vdGhpbmcgd2hlbiBjYXRlZ29yaWVzIGFycmF5IGlzIGVtcHR5JywgKCkgPT4ge1xuICAgIGNvbnN0IHsgcXVlcnlCeVRleHQgfSA9IHJlbmRlcig8Q2F0ZWdvcnlTZWxlY3RvciBjYXRlZ29yaWVzPXtbXX0gLz4pO1xuICAgIGV4cGVjdChxdWVyeUJ5VGV4dCgnR3JhbW1hcicpKS50b0JlTnVsbCgpO1xuICB9KTtcblxuICBpdCgnZGlzcGxheXMgdGhlIHNlbGVjdGVkIGNhdGVnb3J5IHdpdGggdGhlIGNvcnJlY3Qgc3R5bGUnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgIDxDYXRlZ29yeVNlbGVjdG9yXG4gICAgICAgIGNhdGVnb3JpZXM9e2NhdGVnb3JpZXN9XG4gICAgICAgIHNlbGVjdGVkQ2F0ZWdvcnk9XCIxXCJcbiAgICAgICAgb25TZWxlY3RDYXRlZ29yeT17KCkgPT4ge319XG4gICAgICAvPlxuICAgICk7XG5cbiAgICAvLyBEYW5zIGxlIGNvbXBvc2FudCwgbGEgY2F0w6lnb3JpZSBzw6lsZWN0aW9ubsOpZSBjb250aWVudCB1biBlbW9qaSBcIuKcqFwiXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgn4pyoJykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ2NhbGxzIG9uU2VsZWN0Q2F0ZWdvcnkgd2l0aCB0aGUgY29ycmVjdCBjYXRlZ29yeSBpZCB3aGVuIGEgY2F0ZWdvcnkgaXMgcHJlc3NlZCcsICgpID0+IHtcbiAgICBjb25zdCBvblNlbGVjdENhdGVnb3J5ID0gamVzdC5mbigpO1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICA8Q2F0ZWdvcnlTZWxlY3RvclxuICAgICAgICBjYXRlZ29yaWVzPXtjYXRlZ29yaWVzfVxuICAgICAgICBvblNlbGVjdENhdGVnb3J5PXtvblNlbGVjdENhdGVnb3J5fVxuICAgICAgLz5cbiAgICApO1xuXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgnVm9jYWJ1bGFyeScpKTtcbiAgICBleHBlY3Qob25TZWxlY3RDYXRlZ29yeSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJzInKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBT0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLHNCQUFzQixFQUFFLFlBQU07RUFDdEMsSUFBQUMsUUFBQSxHQUFpQkMsT0FBTyxDQUFDLGNBQWMsQ0FBQztJQUFoQ0MsSUFBSSxHQUFBRixRQUFBLENBQUpFLElBQUk7RUFDWixPQUFPO0lBQ0xDLGNBQWMsRUFBRSxTQUFoQkEsY0FBY0EsQ0FBR0MsS0FBSztNQUFBLE9BQUssSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNKLElBQUksRUFBQUssTUFBQSxDQUFBQyxNQUFBLEtBQUtKLEtBQUssQ0FBRyxDQUFDO0lBQUE7RUFDaEQsQ0FBQztBQUNILENBQUMsQ0FBQztBQUdGTixXQUFB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