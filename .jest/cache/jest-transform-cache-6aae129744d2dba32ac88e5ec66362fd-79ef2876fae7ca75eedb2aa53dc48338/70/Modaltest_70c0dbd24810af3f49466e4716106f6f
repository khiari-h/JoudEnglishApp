e0022e58e5694603194bc0b2ff9e238e
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  return Object.assign({}, RN, {
    Modal: function Modal(_ref) {
      var children = _ref.children,
        visible = _ref.visible;
      return visible ? children : null;
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Modal = _interopRequireDefault(require("../../../src/components/ui/Modal"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Modal', function () {
  it('ne devrait pas rendre le contenu si isVisible est faux', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        isVisible: false,
        onClose: function onClose() {},
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Contenu du modal"
        })
      })),
      queryByText = _render.queryByText;
    expect(queryByText('Contenu du modal')).toBeNull();
  });
  it('devrait rendre le contenu si isVisible est vrai', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        isVisible: true,
        onClose: function onClose() {},
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Contenu du modal"
        })
      })),
      getByText = _render2.getByText;
    expect(getByText('Contenu du modal')).toBeTruthy();
  });
  it('devrait appeler onClose quand le fond est pressé et backdropDismiss est vrai', function () {
    var mockOnClose = jest.fn();
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        isVisible: true,
        onClose: mockOnClose,
        backdropDismiss: true,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Contenu du modal"
        })
      })),
      getByTestId = _render3.getByTestId;
    _reactNative.fireEvent.press(getByTestId('modal-backdrop'));
    expect(mockOnClose).toHaveBeenCalledTimes(1);
  });
  it('ne devrait pas appeler onClose quand le fond est pressé et backdropDismiss est faux', function () {
    var mockOnClose = jest.fn();
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        isVisible: true,
        onClose: mockOnClose,
        backdropDismiss: false,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Contenu du modal"
        })
      })),
      queryByTestId = _render4.queryByTestId;
    _reactNative.fireEvent.press(queryByTestId('modal-backdrop'));
    expect(mockOnClose).not.toHaveBeenCalled();
  });
  it('devrait rendre le titre si fourni', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        isVisible: true,
        onClose: function onClose() {},
        title: "Titre du Modal",
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Contenu"
        })
      })),
      getByText = _render5.getByText;
    expect(getByText('Titre du Modal')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJSTiIsImplc3QiLCJyZXF1aXJlQWN0dWFsIiwiT2JqZWN0IiwiYXNzaWduIiwiTW9kYWwiLCJfcmVmIiwiY2hpbGRyZW4iLCJ2aXNpYmxlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfTW9kYWwiLCJfcmVhY3ROYXRpdmUyIiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwiaXQiLCJfcmVuZGVyIiwicmVuZGVyIiwianN4IiwiZGVmYXVsdCIsImlzVmlzaWJsZSIsIm9uQ2xvc2UiLCJUZXh0IiwicXVlcnlCeVRleHQiLCJleHBlY3QiLCJ0b0JlTnVsbCIsIl9yZW5kZXIyIiwiZ2V0QnlUZXh0IiwidG9CZVRydXRoeSIsIm1vY2tPbkNsb3NlIiwiZm4iLCJfcmVuZGVyMyIsImJhY2tkcm9wRGlzbWlzcyIsImdldEJ5VGVzdElkIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJfcmVuZGVyNCIsInF1ZXJ5QnlUZXN0SWQiLCJub3QiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwiX3JlbmRlcjUiLCJ0aXRsZSJdLCJzb3VyY2VzIjpbIk1vZGFsLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3VpL01vZGFsJztcbmltcG9ydCB7IFRleHQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuXG4vLyBNb2NrIGR1IGNvbXBvc2FudCBNb2RhbCBkZSByZWFjdC1uYXRpdmVcbmplc3QubW9jaygncmVhY3QtbmF0aXZlJywgKCkgPT4ge1xuICBjb25zdCBSTiA9IGplc3QucmVxdWlyZUFjdHVhbCgncmVhY3QtbmF0aXZlJyk7XG4gIHJldHVybiB7XG4gICAgLi4uUk4sXG4gICAgTW9kYWw6ICh7IGNoaWxkcmVuLCB2aXNpYmxlIH0pID0+ICh2aXNpYmxlID8gY2hpbGRyZW4gOiBudWxsKSxcbiAgfTtcbn0pO1xuXG5kZXNjcmliZSgnTW9kYWwnLCAoKSA9PiB7XG4gIGl0KCduZSBkZXZyYWl0IHBhcyByZW5kcmUgbGUgY29udGVudSBzaSBpc1Zpc2libGUgZXN0IGZhdXgnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBxdWVyeUJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgPE1vZGFsIGlzVmlzaWJsZT17ZmFsc2V9IG9uQ2xvc2U9eygpID0+IHt9fT5cbiAgICAgICAgPFRleHQ+Q29udGVudSBkdSBtb2RhbDwvVGV4dD5cbiAgICAgIDwvTW9kYWw+XG4gICAgKTtcbiAgICBleHBlY3QocXVlcnlCeVRleHQoJ0NvbnRlbnUgZHUgbW9kYWwnKSkudG9CZU51bGwoKTtcbiAgfSk7XG5cbiAgaXQoJ2RldnJhaXQgcmVuZHJlIGxlIGNvbnRlbnUgc2kgaXNWaXNpYmxlIGVzdCB2cmFpJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICA8TW9kYWwgaXNWaXNpYmxlPXt0cnVlfSBvbkNsb3NlPXsoKSA9PiB7fX0+XG4gICAgICAgIDxUZXh0PkNvbnRlbnUgZHUgbW9kYWw8L1RleHQ+XG4gICAgICA8L01vZGFsPlxuICAgICk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnQ29udGVudSBkdSBtb2RhbCcpKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KCdkZXZyYWl0IGFwcGVsZXIgb25DbG9zZSBxdWFuZCBsZSBmb25kIGVzdCBwcmVzc8OpIGV0IGJhY2tkcm9wRGlzbWlzcyBlc3QgdnJhaScsICgpID0+IHtcbiAgICBjb25zdCBtb2NrT25DbG9zZSA9IGplc3QuZm4oKTtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICA8TW9kYWwgaXNWaXNpYmxlPXt0cnVlfSBvbkNsb3NlPXttb2NrT25DbG9zZX0gYmFja2Ryb3BEaXNtaXNzPXt0cnVlfT5cbiAgICAgICAgPFRleHQ+Q29udGVudSBkdSBtb2RhbDwvVGV4dD5cbiAgICAgIDwvTW9kYWw+XG4gICAgKTtcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ21vZGFsLWJhY2tkcm9wJykpO1xuICAgIGV4cGVjdChtb2NrT25DbG9zZSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICB9KTtcblxuICBpdCgnbmUgZGV2cmFpdCBwYXMgYXBwZWxlciBvbkNsb3NlIHF1YW5kIGxlIGZvbmQgZXN0IHByZXNzw6kgZXQgYmFja2Ryb3BEaXNtaXNzIGVzdCBmYXV4JywgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tPbkNsb3NlID0gamVzdC5mbigpO1xuICAgIGNvbnN0IHsgcXVlcnlCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgPE1vZGFsIGlzVmlzaWJsZT17dHJ1ZX0gb25DbG9zZT17bW9ja09uQ2xvc2V9IGJhY2tkcm9wRGlzbWlzcz17ZmFsc2V9PlxuICAgICAgICA8VGV4dD5Db250ZW51IGR1IG1vZGFsPC9UZXh0PlxuICAgICAgPC9Nb2RhbD5cbiAgICApO1xuICAgIGZpcmVFdmVudC5wcmVzcyhxdWVyeUJ5VGVzdElkKCdtb2RhbC1iYWNrZHJvcCcpKTtcbiAgICBleHBlY3QobW9ja09uQ2xvc2UpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xuXG4gIGl0KCdkZXZyYWl0IHJlbmRyZSBsZSB0aXRyZSBzaSBmb3VybmknLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgIDxNb2RhbCBpc1Zpc2libGU9e3RydWV9IG9uQ2xvc2U9eygpID0+IHt9fSB0aXRsZT1cIlRpdHJlIGR1IE1vZGFsXCI+XG4gICAgICAgIDxUZXh0PkNvbnRlbnU8L1RleHQ+XG4gICAgICA8L01vZGFsPlxuICAgICk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnVGl0cmUgZHUgTW9kYWwnKSkudG9CZVRydXRoeSgpO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFNQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsY0FBYyxFQUFFLFlBQU07RUFDOUIsSUFBTUMsRUFBRSxHQUFHQyxJQUFJLENBQUNDLGFBQWEsQ0FBQyxjQUFjLENBQUM7RUFDN0MsT0FBQUMsTUFBQSxDQUFBQyxNQUFBLEtBQ0tKLEVBQUU7SUFDTEssS0FBSyxFQUFFLFNBQVBBLEtBQUtBLENBQUFDLElBQUE7TUFBQSxJQUFLQyxRQUFRLEdBQUFELElBQUEsQ0FBUkMsUUFBUTtRQUFFQyxPQUFPLEdBQUFGLElBQUEsQ0FBUEUsT0FBTztNQUFBLE9BQVFBLE9BQU8sR0FBR0QsUUFBUSxHQUFHLElBQUk7SUFBQTtFQUFDO0FBRWpFLENBQUMsQ0FBQztBQUFDLElBQUFFLHNCQUFBLEdBQUFDLE9BQUE7QUFaSCxJQUFBQyxNQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxZQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxNQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSSxhQUFBLEdBQUFKLE9BQUE7QUFBb0MsSUFBQUssV0FBQSxHQUFBTCxPQUFBO0FBQUEsU0FBQVosWUFBQTtFQUFBLElBQUFrQixRQUFBLEdBQUFOLE9BQUE7SUFBQVQsSUFBQSxHQUFBZSxRQUFBLENBQUFmLElBQUE7RUFBQUgsV0FBQSxZQUFBQSxZQUFBO0lBQUEsT0FBQUcsSUFBQTtFQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBV3BDZ0IsUUFBUSxDQUFDLE9BQU8sRUFBRSxZQUFNO0VBQ3RCQyxFQUFFLENBQUMsd0RBQXdELEVBQUUsWUFBTTtJQUNqRSxJQUFBQyxPQUFBLEdBQXdCLElBQUFDLG1CQUFNLEVBQzVCLElBQUFMLFdBQUEsQ0FBQU0sR0FBQSxFQUFDUixNQUFBLENBQUFTLE9BQUs7UUFBQ0MsU0FBUyxFQUFFLEtBQU07UUFBQ0MsT0FB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