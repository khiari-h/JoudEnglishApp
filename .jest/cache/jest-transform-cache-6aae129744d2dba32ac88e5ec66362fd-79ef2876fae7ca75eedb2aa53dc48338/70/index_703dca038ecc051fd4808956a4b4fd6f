95aa6a28efbaff036a20522c76d0dd51
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var ConversationTypingIndicator = function ConversationTypingIndicator(_ref) {
  var levelColor = _ref.levelColor;
  var typingAnimation = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
  (0, _react.useEffect)(function () {
    var startAnimation = function startAnimation() {
      _reactNative.Animated.loop(_reactNative.Animated.sequence([_reactNative.Animated.timing(typingAnimation, {
        toValue: 1,
        duration: 500,
        useNativeDriver: true
      }), _reactNative.Animated.timing(typingAnimation, {
        toValue: 0,
        duration: 500,
        useNativeDriver: true
      })])).start();
    };
    startAnimation();
    return function () {
      typingAnimation.stopAnimation();
    };
  }, [typingAnimation]);
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: [_style.default.messageBubble, _style.default.botBubble, {
      backgroundColor: `${levelColor}15`
    }],
    children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: _style.default.typingContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
        style: [_style.default.typingDot, {
          opacity: typingAnimation
        }]
      }), (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
        style: [_style.default.typingDot, {
          opacity: typingAnimation,
          marginHorizontal: 4
        }]
      }), (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
        style: [_style.default.typingDot, {
          opacity: typingAnimation
        }]
      })]
    })
  });
};
var _default = exports.default = ConversationTypingIndicator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlIiwiX3N0eWxlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9qc3hSdW50aW1lIiwiQ29udmVyc2F0aW9uVHlwaW5nSW5kaWNhdG9yIiwiX3JlZiIsImxldmVsQ29sb3IiLCJ0eXBpbmdBbmltYXRpb24iLCJ1c2VSZWYiLCJBbmltYXRlZCIsIlZhbHVlIiwiY3VycmVudCIsInVzZUVmZmVjdCIsInN0YXJ0QW5pbWF0aW9uIiwibG9vcCIsInNlcXVlbmNlIiwidGltaW5nIiwidG9WYWx1ZSIsImR1cmF0aW9uIiwidXNlTmF0aXZlRHJpdmVyIiwic3RhcnQiLCJzdG9wQW5pbWF0aW9uIiwianN4IiwiVmlldyIsInN0eWxlIiwic3R5bGVzIiwibWVzc2FnZUJ1YmJsZSIsImJvdEJ1YmJsZSIsImJhY2tncm91bmRDb2xvciIsImNoaWxkcmVuIiwianN4cyIsInR5cGluZ0NvbnRhaW5lciIsInR5cGluZ0RvdCIsIm9wYWNpdHkiLCJtYXJnaW5Ib3Jpem9udGFsIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVJlZiwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBWaWV3LCBBbmltYXRlZCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZSc7XHJcblxyXG4vKipcclxuICogQ29tcG9zYW50IHF1aSBhZmZpY2hlIHVuZSBhbmltYXRpb24gaW5kaXF1YW50IHF1ZSBsZSBib3QgZXN0IGVuIHRyYWluIGRlIHRhcGVyXHJcbiAqIFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbGV2ZWxDb2xvciAtIENvdWxldXIgYXNzb2Npw6llIGF1IG5pdmVhdSBjb3VyYW50XHJcbiAqL1xyXG5jb25zdCBDb252ZXJzYXRpb25UeXBpbmdJbmRpY2F0b3IgPSAoeyBsZXZlbENvbG9yIH0pID0+IHtcclxuICAvLyBBbmltYXRpb24gcG91ciBmYWlyZSBwdWxzZXIgbGVzIHBvaW50c1xyXG4gIGNvbnN0IHR5cGluZ0FuaW1hdGlvbiA9IHVzZVJlZihuZXcgQW5pbWF0ZWQuVmFsdWUoMCkpLmN1cnJlbnQ7XHJcblxyXG4gIC8vIExhbmNlciBsJ2FuaW1hdGlvbiBlbiBib3VjbGVcclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgY29uc3Qgc3RhcnRBbmltYXRpb24gPSAoKSA9PiB7XHJcbiAgICAgIEFuaW1hdGVkLmxvb3AoXHJcbiAgICAgICAgQW5pbWF0ZWQuc2VxdWVuY2UoW1xyXG4gICAgICAgICAgQW5pbWF0ZWQudGltaW5nKHR5cGluZ0FuaW1hdGlvbiwge1xyXG4gICAgICAgICAgICB0b1ZhbHVlOiAxLFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogNTAwLFxyXG4gICAgICAgICAgICB1c2VOYXRpdmVEcml2ZXI6IHRydWUsXHJcbiAgICAgICAgICB9KSxcclxuICAgICAgICAgIEFuaW1hdGVkLnRpbWluZyh0eXBpbmdBbmltYXRpb24sIHtcclxuICAgICAgICAgICAgdG9WYWx1ZTogMCxcclxuICAgICAgICAgICAgZHVyYXRpb246IDUwMCxcclxuICAgICAgICAgICAgdXNlTmF0aXZlRHJpdmVyOiB0cnVlLFxyXG4gICAgICAgICAgfSksXHJcbiAgICAgICAgXSlcclxuICAgICAgKS5zdGFydCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdGFydEFuaW1hdGlvbigpO1xyXG5cclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgIC8vIEFycsOqdGVyIGwnYW5pbWF0aW9uIHF1YW5kIGxlIGNvbXBvc2FudCBlc3QgZMOpbW9udMOpXHJcbiAgICAgIHR5cGluZ0FuaW1hdGlvbi5zdG9wQW5pbWF0aW9uKCk7XHJcbiAgICB9O1xyXG4gIH0sIFt0eXBpbmdBbmltYXRpb25dKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxWaWV3XHJcbiAgICAgIHN0eWxlPXtbXHJcbiAgICAgICAgc3R5bGVzLm1lc3NhZ2VCdWJibGUsXHJcbiAgICAgICAgc3R5bGVzLmJvdEJ1YmJsZSxcclxuICAgICAgICB7IGJhY2tncm91bmRDb2xvcjogYCR7bGV2ZWxDb2xvcn0xNWAgfSxcclxuICAgICAgXX1cclxuICAgID5cclxuICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy50eXBpbmdDb250YWluZXJ9PlxyXG4gICAgICAgIDxBbmltYXRlZC5WaWV3XHJcbiAgICAgICAgICBzdHlsZT17W3N0eWxlcy50eXBpbmdEb3QsIHsgb3BhY2l0eTogdHlwaW5nQW5pbWF0aW9uIH1dfVxyXG4gICAgICAgIC8+XHJcbiAgICAgICAgPEFuaW1hdGVkLlZpZXdcclxuICAgICAgICAgIHN0eWxlPXtbXHJcbiAgICAgICAgICAgIHN0eWxlcy50eXBpbmdEb3QsXHJcbiAgICAgICAgICAgIHsgb3BhY2l0eTogdHlwaW5nQW5pbWF0aW9uLCBtYXJnaW5Ib3Jpem9udGFsOiA0IH0sXHJcbiAgICAgICAgICBdfVxyXG4gICAgICAgIC8+XHJcbiAgICAgICAgPEFuaW1hdGVkLlZpZXdcclxuICAgICAgICAgIHN0eWxlPXtbc3R5bGVzLnR5cGluZ0RvdCwgeyBvcGFjaXR5OiB0eXBpbmdBbmltYXRpb24gfV19XHJcbiAgICAgICAgLz5cclxuICAgICAgPC9WaWV3PlxyXG4gICAgPC9WaWV3PlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb252ZXJzYXRpb25UeXBpbmdJbmRpY2F0b3I7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxNQUFBLEdBQUFDLHNCQUFBLENBQUFILE9BQUE7QUFBNkIsSUFBQUksV0FBQSxHQUFBSixPQUFBO0FBTzdCLElBQU1LLDJCQUEyQixHQUFHLFNBQTlCQSwyQkFBMkJBLENBQUFDLElBQUEsRUFBdUI7RUFBQSxJQUFqQkMsVUFBVSxHQUFBRCxJQUFBLENBQVZDLFVBQVU7RUFFL0MsSUFBTUMsZUFBZSxHQUFHLElBQUFDLGFBQU0sRUFBQyxJQUFJQyxxQkFBUSxDQUFDQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQ0MsT0FBTztFQUc3RCxJQUFBQyxnQkFBUyxFQUFDLFlBQU07SUFDZCxJQUFNQyxjQUFjLEdBQUcsU0FBakJBLGNBQWNBLENBQUEsRUFBUztNQUMzQkoscUJBQVEsQ0FBQ0ssSUFBSSxDQUNYTCxxQkFBUSxDQUFDTSxRQUFRLENBQUMsQ0FDaEJOLHFCQUFRLENBQUNPLE1BQU0sQ0FBQ1QsZUFBZSxFQUFFO1FBQy9CVSxPQUFPLEVBQUUsQ0FBQztRQUNWQyxRQUFRLEVBQUUsR0FBRztRQUNiQyxlQUFlLEVBQUU7TUFDbkIsQ0FBQyxDQUFDLEVBQ0ZWLHFCQUFRLENBQUNPLE1BQU0sQ0FBQ1QsZUFBZSxFQUFFO1FBQy9CVSxPQUFPLEVBQUUsQ0FBQztRQUNWQyxRQUFRLEVBQUUsR0FBRztRQUNiQyxlQUFlLEVBQUU7TUFDbkIsQ0FBQyxDQUFDLENBQ0gsQ0FDSCxDQUFDLENBQUNDLEtBQUssQ0FBQyxDQUFDO0lBQ1gsQ0FBQztJQUVEUCxjQUFjLENBQUMsQ0FBQztJQUVoQixPQUFPLFlBQU07TUFFWE4sZUFBZSxDQUFDYyxhQUFhLENBQUMsQ0FBQztJQUNqQyxDQUFDO0VBQ0gsQ0FBQyxFQUFFLENBQUNkLGVBQWUsQ0FBQyxDQUFDO0VBRXJCLE9BQ0UsSUFBQUosV0FBQSxDQUFBbUIsR0FBQSxFQUFDdEIsWUFBQSxDQUFBdUIsSUFBSTtJQUNIQyxLQUFLLEVBQUUsQ0FDTEMsY0FBTSxDQUFDQyxhQUFhLEVBQ3BCRCxjQUFNLENBQUNFLFNBQVMsRUFDaEI7TUFBRUMsZUFBZSxFQUFFLEdBQUd0QixVQUFVO0lBQUssQ0FBQyxDQUN0QztJQUFBdUIsUUFBQSxFQUVGLElBQUExQixXQUFBLENBQUEyQixJQUFBLEVBQUM5QixZQUFBLENBQUF1QixJQUFJO01BQUNDLEtBQUssRUFBRUMsY0FBTSxDQUFDTSxlQUFnQjtNQUFBRixRQUFBLEdBQ2xDLElBQUExQixXQUFBLENBQUFtQixHQUFBLEVBQUN0QixZQUFBLENBQUFTLFFBQVEsQ0FBQ2MsSUFBSTtRQUNaQyxLQUFLLEVBQUUsQ0FBQ0MsY0FBTSxDQUFDTyxTQUFTLEVBQUU7VUFBRUMsT0FBTyxFQUFFMUI7UUFBZ0IsQ0FBQztNQUFFLENBQ3pELENBQUMsRUFDRixJQUFBSixXQUFBLENBQUFtQixHQUFBLEVBQUN0QixZQUFBLENBQUFTLFFBQVEsQ0FBQ2MsSUFBSTtRQUNaQyxLQUFLLEVBQUUsQ0FDTEMsY0FBTSxDQUFDTyxTQUFTLEVBQ2hCO1VBQUVDLE9BQU8sRUFBRTFCLGVBQWU7VUFBRTJCLGdCQUFnQixFQUFFO1FBQUUsQ0FBQztNQUNqRCxDQUNILENBQUMsRUFDRixJQUFBL0IsV0FBQSxDQUFBbUIsR0FBQSxFQUFDdEIsWUFBQSxDQUFBUyxRQUFRLENBQUNjLElBQUk7UUFDWkMsS0FBSyxFQUFFLENBQUNDLGNBQU0sQ0FBQ08sU0FBUyxFQUFFO1VBQUVDLE9BQU8sRUFBRTFCO1FBQWdCLENBQUM7TUFBRSxDQUN6RCxDQUFDO0lBQUEsQ0FDRTtFQUFDLENBQ0gsQ0FBQztBQUVYLENBQUM7QUFBQyxJQUFBNEIsUUFBQSxHQUFBQyxPQUFBLENBQUFDLE9BQUEsR0FFYWpDLDJCQUEyQiIsImlnbm9yZUxpc3QiOltdfQ==