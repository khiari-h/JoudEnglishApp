4d064767b6debe8d1ad36197dfe77fe3
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn()
  };
});
_getJestObj().mock('../../src/utils/constants', function () {
  return {
    STORAGE_KEYS: {
      LAST_ACTIVITY: 'last_activity'
    }
  };
});
_getJestObj().mock('../../src/utils/eventBus', function () {
  return {
    emit: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useLastActivity = _interopRequireDefault(require("../../src/hooks/useLastActivity"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useLastActivity', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    jest.spyOn(Date, 'now').mockReturnValue(1640995200000);
  });
  afterEach(function () {
    jest.restoreAllMocks();
  });
  describe('Chargement initial', function () {
    it('devrait charger la dernière activité depuis AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
      var mockActivity = {
        type: 'vocabulary',
        level: '1',
        category: 'Animals',
        timestamp: 1640995200000 - 300000
      };
      _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify(mockActivity));
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useLastActivity.default)();
        }),
        result = _renderHook.result,
        waitForNextUpdate = _renderHook.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.lastActivity).toEqual(Object.assign({}, mockActivity, {
        timeElapsed: 'Il y a 5 min'
      }));
      expect(result.current.isLoading).toBe(false);
    }));
    it('devrait retourner null si aucune activité n\'est stockée', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useLastActivity.default)();
        }),
        result = _renderHook2.result,
        waitForNextUpdate = _renderHook2.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.lastActivity).toBeNull();
      expect(result.current.isLoading).toBe(false);
    }));
    it('devrait gérer les erreurs de chargement', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockRejectedValue(new Error('Storage error'));
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useLastActivity.default)();
        }),
        result = _renderHook3.result,
        waitForNextUpdate = _renderHook3.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.lastActivity).toBeNull();
      expect(result.current.isLoading).toBe(false);
    }));
  });
  describe('Calcul du temps écoulé', function () {
    it('devrait afficher "À l\'instant" pour une activité récente', (0, _asyncToGenerator2.default)(function* () {
      var mockActivity = {
        type: 'grammar',
        timestamp: 1640995200000
      };
      _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify(mockActivity));
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useLastActivity.default)();
        }),
        result = _renderHook4.result,
        waitForNextUpdate = _renderHook4.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.lastActivity.timeElapsed).toBe('À l\'instant');
    }));
    it('devrait calculer les minutes correctement', (0, _asyncToGenerator2.default)(function* () {
      var testCases = [{
        minutesAgo: 0,
        expected: 'À l\'instant'
      }, {
        minutesAgo: 1,
        expected: 'Il y a 1 min'
      }, {
        minutesAgo: 30,
        expected: 'Il y a 30 min'
      }, {
        minutesAgo: 59,
        expected: 'Il y a 59 min'
      }];
      for (var testCase of testCases) {
        var mockActivity = {
          type: 'test',
          timestamp: 1640995200000 - testCase.minutesAgo * 60 * 1000
        };
        _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify(mockActivity));
        var _renderHook5 = (0, _reactNative.renderHook)(function () {
            return (0, _useLastActivity.default)();
          }),
          result = _renderHook5.result,
          waitForNextUpdate = _renderHook5.waitForNextUpdate;
        yield waitForNextUpdate();
        expect(result.current.lastActivity.timeElapsed).toBe(testCase.expected);
      }
    }));
    it('devrait calculer les heures correctement', (0, _asyncToGenerator2.default)(function* () {
      var testCases = [{
        hoursAgo: 1,
        expected: 'Il y a 1h'
      }, {
        hoursAgo: 5,
        expected: 'Il y a 5h'
      }, {
        hoursAgo: 23,
        expected: 'Il y a 23h'
      }];
      for (var testCase of testCases) {
        var mockActivity = {
          type: 'test',
          timestamp: 1640995200000 - testCase.hoursAgo * 60 * 60 * 1000
        };
        _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify(mockActivity));
        var _renderHook6 = (0, _reactNative.renderHook)(function () {
            return (0, _useLastActivity.default)();
          }),
          result = _renderHook6.result,
          waitForNextUpdate = _renderHook6.waitForNextUpdate;
        yield waitForNextUpdate();
        expect(result.current.lastActivity.timeElapsed).toBe(testCase.expected);
      }
    }));
    it('devrait calculer les jours correctement', (0, _asyncToGenerator2.default)(function* () {
      var testCases = [{
        daysAgo: 1,
        expected: 'Il y a 1j'
      }, {
        daysAgo: 3,
        expected: 'Il y a 3j'
      }, {
        daysAgo: 30,
        expected: 'Il y a 30j'
      }];
      for (var testCase of testCases) {
        var mockActivity = {
          type: 'test',
          timestamp: 1640995200000 - testCase.daysAgo * 24 * 60 * 60 * 1000
        };
        _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify(mockActivity));
        var _renderHook7 = (0, _reactNative.renderHook)(function () {
            return (0, _useLastActivity.default)();
          }),
          result = _renderHook7.result,
          waitForNextUpdate = _renderHook7.waitForNextUpdate;
        yield waitForNextUpdate();
        expect(result.current.lastActivity.timeElapsed).toBe(testCase.expected);
      }
    }));
  });
  describe('Sauvegarde d\'activité', function () {
    it('devrait sauvegarder une nouvelle activité', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useLastActivity.default)();
        }),
        result = _renderHook8.result,
        waitForNextUpdate = _renderHook8.waitForNextUpdate;
      yield waitForNextUpdate();
      var activityData = {
        type: 'vocabulary',
        level: '2',
        category: 'Food',
        score: 85
      };
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.saveActivity(activityData);
      }));
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('last_activity', JSON.stringify(Object.assign({}, activityData, {
        timestamp: 1640995200000
      })));
      expect(result.current.lastActivity).toEqual(Object.assign({}, activityData, {
        timestamp: 1640995200000,
        timeElapsed: 'À l\'instant'
      }));
    }));
    it('devrait émettre un événement de progression', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _useLastActivity.default)();
        }),
        result = _renderHook9.result,
        waitForNextUpdate = _renderHook9.waitForNextUpdate;
      yield waitForNextUpdate();
      var activityData = {
        type: 'test'
      };
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.saveActivity(activityData);
      }));
      var eventBus = require('../../src/utils/eventBus');
      expect(eventBus.emit).toHaveBeenCalledWith('progress-updated', Object.assign({}, activityData, {
        timestamp: 1640995200000
      }));
    }));
    it('devrait gérer les erreurs de sauvegarde', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      _asyncStorage.default.setItem.mockRejectedValue(new Error('Save error'));
      var _renderHook0 = (0, _reactNative.renderHook)(function () {
          return (0, _useLastActivity.default)();
        }),
        result = _renderHook0.result,
        waitForNextUpdate = _renderHook0.waitForNextUpdate;
      yield waitForNextUpdate();
      var activityData = {
        type: 'test'
      };
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.saveActivity(activityData);
      }));
      expect(result.current.lastActivity).toBeNull();
    }));
  });
  describe('Suppression d\'activité', function () {
    it('devrait supprimer l\'activité stockée', (0, _asyncToGenerator2.default)(function* () {
      var mockActivity = {
        type: 'test',
        timestamp: 1640995200000
      };
      _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify(mockActivity));
      var _renderHook1 = (0, _reactNative.renderHook)(function () {
          return (0, _useLastActivity.default)();
        }),
        result = _renderHook1.result,
        waitForNextUpdate = _renderHook1.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.lastActivity).not.toBeNull();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.clearActivity();
      }));
      expect(_asyncStorage.default.removeItem).toHaveBeenCalledWith('last_activity');
      expect(result.current.lastActivity).toBeNull();
    }));
    it('devrait gérer les erreurs de suppression', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      _asyncStorage.default.removeItem.mockRejectedValue(new Error('Remove error'));
      var _renderHook10 = (0, _reactNative.renderHook)(function () {
          return (0, _useLastActivity.default)();
        }),
        result = _renderHook10.result,
        waitForNextUpdate = _renderHook10.waitForNextUpdate;
      yield waitForNextUpdate();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.clearActivity();
      }));
      expect(result.current.lastActivity).toBeNull();
    }));
  });
  describe('Rechargement', function () {
    it('devrait permettre de recharger les données', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook11 = (0, _reactNative.renderHook)(function () {
          return (0, _useLastActivity.default)();
        }),
        result = _renderHook11.result,
        waitForNextUpdate = _renderHook11.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.lastActivity).toBeNull();
      var mockActivity = {
        type: 'new',
        timestamp: 1640995200000
      };
      _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify(mockActivity));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.reload();
      }));
      expect(result.current.lastActivity).toEqual(Object.assign({}, mockActivity, {
        timeElapsed: 'À l\'instant'
      }));
    }));
  });
  describe('Stabilité des fonctions', function () {
    it('devrait maintenir la stabilité des fonctions entre les renders', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook12 = (0, _reactNative.renderHook)(function () {
          return (0, _useLastActivity.default)();
        }),
        result = _renderHook12.result,
        waitForNextUpdate = _renderHook12.waitForNextUpdate,
        rerender = _renderHook12.rerender;
      yield waitForNextUpdate();
      var initialSaveActivity = result.current.saveActivity;
      var initialClearActivity = result.current.clearActivity;
      var initialReload = result.current.reload;
      rerender();
      expect(result.current.saveActivity).toBe(initialSaveActivity);
      expect(result.current.clearActivity).toBe(initialClearActivity);
      expect(result.current.reload).toBe(initialReload);
    }));
  });
  describe('Gestion des données corrompues', function () {
    it('devrait gérer les données JSON invalides', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue('invalid json');
      var _renderHook13 = (0, _reactNative.renderHook)(function () {
          return (0, _useLastActivity.default)();
        }),
        result = _renderHook13.result,
        waitForNextUpdate = _renderHook13.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.lastActivity).toBeNull();
      expect(result.current.isLoading).toBe(false);
    }));
    it('devrait gérer les activités sans timestamp', (0, _asyncToGenerator2.default)(function* () {
      var mockActivity = {
        type: 'test'
      };
      _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify(mockActivity));
      var _renderHook14 = (0, _reactNative.renderHook)(function () {
          return (0, _useLastActivity.default)();
        }),
        result = _renderHook14.result,
        waitForNextUpdate = _renderHook14.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.lastActivity).toBeDefined();
      expect(result.current.lastActivity.timeElapsed).toBeDefined();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,