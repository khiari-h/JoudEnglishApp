{"version":3,"names":["_react","require","_asyncStorage","_interopRequireDefault","_constants","_calculateProgress","_propTypes","_jsxRuntime","ProgressContext","exports","createContext","ProgressReadContext","ProgressWriteContext","createInitialProgress","exercises","Object","keys","EXERCISES","forEach","exerciseType","LANGUAGE_LEVELS","levelId","BONUS_EXERCISES","includes","completed","total","stats","streak","totalTimeSpent","correctAnswers","totalAnswers","exercisesCompleted","lastLogin","lastActivity","type","level","timestamp","ProgressProvider","_ref","children","_useState","useState","_useState2","_slicedToArray2","default","progress","setProgress","_useState3","_useState4","isLoading","setIsLoading","saveTimeoutRef","useRef","isInitialLoad","useEffect","loadProgress","_ref2","_asyncToGenerator2","_yield$calculateAllPr","calculateAllProgress","levelProgress","exerciseProgress","newProgress","error","console","current","apply","arguments","clearTimeout","setTimeout","AsyncStorage","setItem","STORAGE_KEYS","USER_PROGRESS","JSON","stringify","updateExerciseProgress","useCallback","prev","assign","Math","min","max","Date","toISOString","updateStats","newStats","resetProgress","removeItem","refreshProgress","_yield$calculateAllPr2","getLevelProgressFromContext","getLevelProgress","getExerciseProgressFromContext","getExerciseProgress","hasProgressFromContext","hasProgress","calculateLevelProgress","calculateGlobalProgress","allLevels","length","totalLevelProgress","reduce","sum","round","contextValue","useMemo","readValue","writeValue","jsx","Provider","value","useProgress","context","useContext","Error","useProgressRead","useProgressWrite","propTypes","PropTypes","node","isRequired"],"sources":["ProgressContext.js"],"sourcesContent":["import { createContext, useState, useEffect, useContext, useCallback, useRef, useMemo } from 'react';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { STORAGE_KEYS, LANGUAGE_LEVELS, EXERCISES, BONUS_EXERCISES } from '../utils/constants';\r\nimport { calculateAllProgress, getLevelProgress, getExerciseProgress, hasProgress } from '../utils/progress/calculateProgress';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Créer les contextes pour une meilleure séparation\r\nexport const ProgressContext = createContext();\r\nexport const ProgressReadContext = createContext();\r\nexport const ProgressWriteContext = createContext();\r\n\r\n/**\r\n * Fonction pour générer l'état de progression initial\r\n */\r\nexport const createInitialProgress = () => {\r\n  const exercises = {};\r\n  \r\n  Object.keys(EXERCISES).forEach(exerciseType => {\r\n    exercises[exerciseType] = {};\r\n    Object.keys(LANGUAGE_LEVELS).forEach(levelId => {\r\n      if (levelId === 'bonus') {\r\n        if (BONUS_EXERCISES.includes(exerciseType)) {\r\n          exercises[exerciseType][levelId] = { completed: 0, total: 100 };\r\n        }\r\n      } else {\r\n        exercises[exerciseType][levelId] = { completed: 0, total: 100 };\r\n      }\r\n    });\r\n  });\r\n\r\n  return {\r\n    exercises,\r\n    stats: {\r\n      streak: 0,\r\n      totalTimeSpent: 0,\r\n      correctAnswers: 0,\r\n      totalAnswers: 0,\r\n      exercisesCompleted: 0,\r\n      lastLogin: null,\r\n    },\r\n    lastActivity: {\r\n      type: null,\r\n      level: null,\r\n      timestamp: null,\r\n    },\r\n  };\r\n};\r\n\r\n// Fournisseur du contexte\r\nexport const ProgressProvider = ({ children }) => {\r\n  const [progress, setProgress] = useState(createInitialProgress());\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  \r\n  const saveTimeoutRef = useRef(null);\r\n  const isInitialLoad = useRef(true);\r\n\r\n  // ========== CHARGEMENT INITIAL depuis AsyncStorage ==========\r\n  useEffect(() => {\r\n    const loadProgress = async () => {\r\n      try {\r\n        // Utiliser nos utils pour calculer la progression réelle\r\n        const { levelProgress, exerciseProgress } = await calculateAllProgress();\r\n        \r\n        // Créer la structure de données compatible\r\n        const newProgress = {\r\n          exercises: exerciseProgress,\r\n          stats: {\r\n            streak: 0,\r\n            totalTimeSpent: 0,\r\n            correctAnswers: 0,\r\n            totalAnswers: 0,\r\n            exercisesCompleted: 0,\r\n            lastLogin: null,\r\n          },\r\n          lastActivity: {\r\n            type: null,\r\n            level: null,\r\n            timestamp: null,\r\n          },\r\n        };\r\n        \r\n        setProgress(newProgress);\r\n      } catch (error) {\r\n        console.error('Erreur chargement progression:', error);\r\n        // Fallback vers la structure initiale\r\n        setProgress(createInitialProgress());\r\n      } finally {\r\n        setIsLoading(false);\r\n        isInitialLoad.current = false;\r\n      }\r\n    };\r\n    loadProgress();\r\n  }, []);\r\n\r\n  // ========== SAUVEGARDE AUTOMATIQUE (avec Debounce) ==========\r\n  useEffect(() => {\r\n    if (isLoading || isInitialLoad.current) {\r\n      return;\r\n    }\r\n    if (saveTimeoutRef.current) {\r\n      clearTimeout(saveTimeoutRef.current);\r\n    }\r\n    saveTimeoutRef.current = setTimeout(async () => {\r\n      try {\r\n        await AsyncStorage.setItem(STORAGE_KEYS.USER_PROGRESS, JSON.stringify(progress));\r\n      } catch (error) {\r\n        console.error('Erreur sauvegarde progression:', error);\r\n      }\r\n    }, 500);\r\n    return () => {\r\n      if (saveTimeoutRef.current) {\r\n        clearTimeout(saveTimeoutRef.current);\r\n      }\r\n    };\r\n  }, [progress, isLoading]);\r\n\r\n  // ========== MÉTHODES GESTION DE LA PROGRESSION ==========\r\n\r\n  const updateExerciseProgress = useCallback((exerciseType, level, completed) => {\r\n    setProgress(prev => {\r\n      const newProgress = { ...prev };\r\n      \r\n      // S'assurer que l'objet de progression pour l'exercice existe\r\n      if (!newProgress.exercises[exerciseType]) {\r\n        newProgress.exercises[exerciseType] = {};\r\n      }\r\n      if (!newProgress.exercises[exerciseType][level]) {\r\n        newProgress.exercises[exerciseType][level] = { completed: 0, total: 100 };\r\n      }\r\n      \r\n      // Mettre à jour la progression de l'exercice\r\n      newProgress.exercises[exerciseType][level].completed = Math.min(Math.max(0, completed), 100);\r\n      \r\n      // Mettre à jour la dernière activité\r\n      newProgress.lastActivity = {\r\n        type: exerciseType,\r\n        level,\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n      return newProgress;\r\n    });\r\n  }, []);\r\n\r\n  const updateStats = useCallback((newStats) => {\r\n    setProgress(prev => ({ ...prev, stats: { ...prev.stats, ...newStats } }));\r\n  }, []);\r\n\r\n  const resetProgress = useCallback(async () => {\r\n    try {\r\n      await AsyncStorage.removeItem(STORAGE_KEYS.USER_PROGRESS);\r\n      setProgress(createInitialProgress());\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Erreur reset progression:', error);\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  // ========== FONCTIONS COMPATIBLES AVEC useRealTimeProgress ==========\r\n  \r\n  const refreshProgress = useCallback(async () => {\r\n    try {\r\n      const { levelProgress, exerciseProgress } = await calculateAllProgress();\r\n      setProgress(prev => ({\r\n        ...prev,\r\n        exercises: exerciseProgress,\r\n        levelProgress\r\n      }));\r\n    } catch (error) {\r\n      console.error('Erreur rafraîchissement progression:', error);\r\n    }\r\n  }, []);\r\n\r\n  // Getters compatibles avec useRealTimeProgress\r\n  const getLevelProgressFromContext = useCallback((level) => {\r\n    return getLevelProgress(progress.levelProgress || {}, level);\r\n  }, [progress.levelProgress]);\r\n\r\n  const getExerciseProgressFromContext = useCallback((exerciseType, level) => {\r\n    return getExerciseProgress(progress.exercises || {}, exerciseType, level);\r\n  }, [progress.exercises]);\r\n\r\n  const hasProgressFromContext = useCallback((exerciseType, level) => {\r\n    return hasProgress(progress.exercises || {}, exerciseType, level);\r\n  }, [progress.exercises]);\r\n\r\n  // ========== FONCTIONS DE CALCUL (utilisent nos utils) ==========\r\n\r\n  const calculateLevelProgress = useCallback((level) => {\r\n    return getLevelProgress(progress.levelProgress || {}, level);\r\n  }, [progress.levelProgress]);\r\n\r\n  const calculateGlobalProgress = useCallback(() => {\r\n    const allLevels = Object.keys(LANGUAGE_LEVELS);\r\n    if (allLevels.length === 0) {\r\n      return 0;\r\n    }\r\n\r\n    const totalLevelProgress = allLevels.reduce((sum, levelId) => {\r\n      const levelProgress = calculateLevelProgress(levelId);\r\n      return sum + levelProgress;\r\n    }, 0);\r\n\r\n    return Math.round(totalLevelProgress / allLevels.length);\r\n  }, [calculateLevelProgress]);\r\n  \r\n  // ========== VALEURS DU CONTEXTE MÉMORISÉES ==========\r\n\r\n  const contextValue = useMemo(() => ({\r\n    progress,\r\n    isLoading,\r\n    updateExerciseProgress,\r\n    updateStats,\r\n    calculateGlobalProgress,\r\n    calculateLevelProgress,\r\n    resetProgress,\r\n    // Fonctions compatibles avec useRealTimeProgress\r\n    refreshProgress,\r\n    getLevelProgress: getLevelProgressFromContext,\r\n    getExerciseProgress: getExerciseProgressFromContext,\r\n    hasProgress: hasProgressFromContext,\r\n  }), [\r\n    progress, \r\n    isLoading, \r\n    updateExerciseProgress, \r\n    updateStats, \r\n    calculateGlobalProgress, \r\n    calculateLevelProgress, \r\n    resetProgress,\r\n    refreshProgress,\r\n    getLevelProgressFromContext,\r\n    getExerciseProgressFromContext,\r\n    hasProgressFromContext\r\n  ]);\r\n\r\n  const readValue = useMemo(() => ({\r\n    progress,\r\n    isLoading,\r\n    calculateGlobalProgress,\r\n    calculateLevelProgress,\r\n    // Fonctions compatibles avec useRealTimeProgress\r\n    refreshProgress,\r\n    getLevelProgress: getLevelProgressFromContext,\r\n    getExerciseProgress: getExerciseProgressFromContext,\r\n    hasProgress: hasProgressFromContext,\r\n  }), [\r\n    progress, \r\n    isLoading, \r\n    calculateGlobalProgress, \r\n    calculateLevelProgress,\r\n    refreshProgress,\r\n    getLevelProgressFromContext,\r\n    getExerciseProgressFromContext,\r\n    hasProgressFromContext\r\n  ]);\r\n\r\n  const writeValue = useMemo(() => ({\r\n    updateExerciseProgress,\r\n    updateStats,\r\n    resetProgress,\r\n  }), [updateExerciseProgress, updateStats, resetProgress]);\r\n\r\n  // ========== STRUCTURE DU FOURNISSEUR ==========\r\n  return (\r\n    <ProgressReadContext.Provider value={readValue}>\r\n      <ProgressWriteContext.Provider value={writeValue}>\r\n        <ProgressContext.Provider value={contextValue}>\r\n          {children}\r\n        </ProgressContext.Provider>\r\n      </ProgressWriteContext.Provider>\r\n    </ProgressReadContext.Provider>\r\n  );\r\n};\r\n\r\n// ========== HOOKS POUR CONSOMMER LE CONTEXTE ==========\r\nexport const useProgress = () => {\r\n  const context = useContext(ProgressContext);\r\n  if (!context) {\r\n    throw new Error('useProgress must be used within a ProgressProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const useProgressRead = () => {\r\n  const context = useContext(ProgressReadContext);\r\n  if (!context) {\r\n    throw new Error('useProgressRead must be used within a ProgressProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const useProgressWrite = () => {\r\n  const context = useContext(ProgressWriteContext);\r\n  if (!context) {\r\n    throw new Error('useProgressWrite must be used within a ProgressProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nProgressProvider.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};"],"mappings":"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","ignoreList":[]}