e2d54776086f437e9a83091bb99b2124
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _react = require("react");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _vectorIcons = require("@expo/vector-icons");
var _HeroCard = _interopRequireDefault(require("../../../../components/ui/HeroCard"));
var _ContentSection = _interopRequireDefault(require("../../../../components/ui/ContentSection"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var ReadingQuestionCard = function ReadingQuestionCard(_ref) {
  var question = _ref.question,
    questionIndex = _ref.questionIndex,
    selectedAnswer = _ref.selectedAnswer,
    onSelectAnswer = _ref.onSelectAnswer,
    showFeedback = _ref.showFeedback,
    fadeAnim = _ref.fadeAnim,
    slideAnim = _ref.slideAnim,
    _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? "#3b82f6" : _ref$levelColor;
  var styles = (0, _style.default)(levelColor);
  var handleOptionPressCallback = (0, _react.useCallback)(function (optionIndex) {
    return function () {
      if (!showFeedback) {
        onSelectAnswer(optionIndex);
      }
    };
  }, [onSelectAnswer, showFeedback]);
  if (!question) return null;
  var getOptionState = function getOptionState(optionIndex) {
    if (!showFeedback) {
      return selectedAnswer === optionIndex ? 'selected' : 'default';
    }
    if (optionIndex === question.correctAnswer) {
      return 'correct';
    }
    if (selectedAnswer === optionIndex && selectedAnswer !== question.correctAnswer) {
      return 'incorrect';
    }
    return 'default';
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
    style: [styles.container, {
      opacity: fadeAnim,
      transform: [{
        translateY: slideAnim
      }]
    }],
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.questionHeader,
      children: (0, _jsxRuntime.jsx)(_HeroCard.default, {
        content: `Question ${questionIndex + 1}`,
        fontSize: 18,
        levelColor: levelColor,
        showUnderline: false,
        backgroundColor: "#F8F9FA"
      })
    }), (0, _jsxRuntime.jsx)(_ContentSection.default, {
      title: "\u2753 Question",
      content: question.text,
      levelColor: levelColor,
      backgroundColor: "white",
      contentStyle: {
        fontSize: 18,
        fontWeight: "600",
        color: "#1e293b",
        lineHeight: 26
      }
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.optionsContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [styles.optionsTitle, {
          color: levelColor
        }],
        children: "\uD83D\uDCA1 Choose your answer:"
      }), question.options.map(function (option, index) {
        var optionState = getOptionState(index);
        return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          style: [styles.optionButton, optionState === 'selected' && {
            borderColor: levelColor,
            backgroundColor: `${levelColor}08`
          }, optionState === 'correct' && styles.optionCorrect, optionState === 'incorrect' && styles.optionIncorrect],
          onPress: handleOptionPressCallback(index),
          disabled: showFeedback,
          activeOpacity: 0.8,
          children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.optionContent,
            children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
              style: [styles.optionLetterContainer, {
                backgroundColor: `${levelColor}15`
              }, optionState === 'correct' && {
                backgroundColor: '#10b98120'
              }, optionState === 'incorrect' && {
                backgroundColor: '#ef444420'
              }],
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: [styles.optionLetter, {
                  color: levelColor
                }, optionState === 'correct' && {
                  color: '#10b981'
                }, optionState === 'incorrect' && {
                  color: '#ef4444'
                }],
                children: String.fromCharCode(65 + index)
              })
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: [styles.optionText, optionState === 'selected' && {
                color: levelColor,
                fontWeight: "600"
              }, optionState === 'correct' && styles.optionCorrectText, optionState === 'incorrect' && styles.optionIncorrectText],
              children: option
            }), showFeedback && (0, _jsxRuntime.jsxs)(_reactNative.View, {
              children: [optionState === 'correct' && (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                name: "checkmark-circle",
                size: 24,
                color: "#10b981"
              }), optionState === 'incorrect' && (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                name: "close-circle",
                size: 24,
                color: "#ef4444"
              })]
            })]
          })
        }, option);
      })]
    })]
  });
};
ReadingQuestionCard.propTypes = {
  question: _propTypes.default.object.isRequired,
  questionIndex: _propTypes.default.number.isRequired,
  selectedAnswer: _propTypes.default.number,
  onSelectAnswer: _propTypes.default.func.isRequired,
  showFeedback: _propTypes.default.bool,
  fadeAnim: _propTypes.default.instanceOf(_reactNative.Animated.Value).isRequired,
  slideAnim: _propTypes.default.instanceOf(_reactNative.Animated.Value).isRequired,
  levelColor: _propTypes.default.string
};
var _default = exports.default = ReadingQuestionCard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,