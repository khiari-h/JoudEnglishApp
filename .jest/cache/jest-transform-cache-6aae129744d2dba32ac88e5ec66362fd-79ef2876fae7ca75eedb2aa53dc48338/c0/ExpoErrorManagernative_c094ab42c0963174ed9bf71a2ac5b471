9d2994767f4139ada17715a7cb094a7c
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createErrorHandler = createErrorHandler;
exports.disableErrorHandling = disableErrorHandling;
var isErrorHandlingEnabled = true;
var developmentBuildMessage = `If you're trying to use a module that is not supported in Expo Go, you need to create a development build of your app. See https://docs.expo.dev/development/introduction/ for more info.`;
function customizeUnavailableMessage(error) {
  error.message += '\n\n' + developmentBuildMessage;
}
function customizeModuleIsMissingMessage(error) {
  error.message = `Your JavaScript code tried to access a native module that doesn't exist. 

${developmentBuildMessage}`;
}
function customizeError(error) {
  if ('code' in error && error.code === 'ERR_UNAVAILABLE') {
    customizeUnavailableMessage(error);
  } else if (error.message.includes('Native module cannot be null') || error.message.includes('`new NativeEventEmitter()` requires a non-null argument.')) {
    customizeModuleIsMissingMessage(error);
  }
}
function errorHandler(originalHandler, error, isFatal) {
  if (error instanceof Error) {
    customizeError(error);
  }
  originalHandler(error, isFatal);
}
function createErrorHandler(originalHandler) {
  return function (error, isFatal) {
    if (isErrorHandlingEnabled) {
      errorHandler(originalHandler, error, isFatal);
      return;
    }
    originalHandler(error, isFatal);
  };
}
function disableErrorHandling() {
  isErrorHandlingEnabled = false;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc0Vycm9ySGFuZGxpbmdFbmFibGVkIiwiZGV2ZWxvcG1lbnRCdWlsZE1lc3NhZ2UiLCJjdXN0b21pemVVbmF2YWlsYWJsZU1lc3NhZ2UiLCJlcnJvciIsIm1lc3NhZ2UiLCJjdXN0b21pemVNb2R1bGVJc01pc3NpbmdNZXNzYWdlIiwiY3VzdG9taXplRXJyb3IiLCJjb2RlIiwiaW5jbHVkZXMiLCJlcnJvckhhbmRsZXIiLCJvcmlnaW5hbEhhbmRsZXIiLCJpc0ZhdGFsIiwiRXJyb3IiLCJjcmVhdGVFcnJvckhhbmRsZXIiLCJkaXNhYmxlRXJyb3JIYW5kbGluZyJdLCJzb3VyY2VzIjpbIkV4cG9FcnJvck1hbmFnZXIubmF0aXZlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNpbWlsYXIgaW50ZXJmYWNlIHRvIHRoZSBvbmUgdXNlZCBpbiBleHBvIG1vZHVsZXMuXG50eXBlIENvZGVkRXJyb3IgPSBFcnJvciAmIHsgY29kZT86IHN0cmluZyB9O1xuXG5sZXQgaXNFcnJvckhhbmRsaW5nRW5hYmxlZCA9IHRydWU7XG5cbmNvbnN0IGRldmVsb3BtZW50QnVpbGRNZXNzYWdlID0gYElmIHlvdSdyZSB0cnlpbmcgdG8gdXNlIGEgbW9kdWxlIHRoYXQgaXMgbm90IHN1cHBvcnRlZCBpbiBFeHBvIEdvLCB5b3UgbmVlZCB0byBjcmVhdGUgYSBkZXZlbG9wbWVudCBidWlsZCBvZiB5b3VyIGFwcC4gU2VlIGh0dHBzOi8vZG9jcy5leHBvLmRldi9kZXZlbG9wbWVudC9pbnRyb2R1Y3Rpb24vIGZvciBtb3JlIGluZm8uYDtcblxuZnVuY3Rpb24gY3VzdG9taXplVW5hdmFpbGFibGVNZXNzYWdlKGVycm9yOiBDb2RlZEVycm9yKSB7XG4gIGVycm9yLm1lc3NhZ2UgKz0gJ1xcblxcbicgKyBkZXZlbG9wbWVudEJ1aWxkTWVzc2FnZTtcbn1cblxuZnVuY3Rpb24gY3VzdG9taXplTW9kdWxlSXNNaXNzaW5nTWVzc2FnZShlcnJvcjogRXJyb3IpIHtcbiAgZXJyb3IubWVzc2FnZSA9IGBZb3VyIEphdmFTY3JpcHQgY29kZSB0cmllZCB0byBhY2Nlc3MgYSBuYXRpdmUgbW9kdWxlIHRoYXQgZG9lc24ndCBleGlzdC4gXG5cbiR7ZGV2ZWxvcG1lbnRCdWlsZE1lc3NhZ2V9YDtcbn1cblxuZnVuY3Rpb24gY3VzdG9taXplRXJyb3IoZXJyb3I6IEVycm9yIHwgQ29kZWRFcnJvcikge1xuICBpZiAoJ2NvZGUnIGluIGVycm9yICYmIGVycm9yLmNvZGUgPT09ICdFUlJfVU5BVkFJTEFCTEUnKSB7XG4gICAgY3VzdG9taXplVW5hdmFpbGFibGVNZXNzYWdlKGVycm9yKTtcbiAgfSBlbHNlIGlmIChcbiAgICBlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdOYXRpdmUgbW9kdWxlIGNhbm5vdCBiZSBudWxsJykgfHwgLy8gUk4gMC42NCBhbmQgYmVsb3cgbWVzc2FnZVxuICAgIGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ2BuZXcgTmF0aXZlRXZlbnRFbWl0dGVyKClgIHJlcXVpcmVzIGEgbm9uLW51bGwgYXJndW1lbnQuJykgLy8gUk4gMC42NSsgbWVzc2FnZVxuICApIHtcbiAgICBjdXN0b21pemVNb2R1bGVJc01pc3NpbmdNZXNzYWdlKGVycm9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlcnJvckhhbmRsZXIob3JpZ2luYWxIYW5kbGVyLCBlcnJvciwgaXNGYXRhbCkge1xuICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIGN1c3RvbWl6ZUVycm9yKGVycm9yKTtcbiAgfVxuICBvcmlnaW5hbEhhbmRsZXIoZXJyb3IsIGlzRmF0YWwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRXJyb3JIYW5kbGVyKG9yaWdpbmFsSGFuZGxlcikge1xuICByZXR1cm4gKGVycm9yLCBpc0ZhdGFsKSA9PiB7XG4gICAgaWYgKGlzRXJyb3JIYW5kbGluZ0VuYWJsZWQpIHtcbiAgICAgIGVycm9ySGFuZGxlcihvcmlnaW5hbEhhbmRsZXIsIGVycm9yLCBpc0ZhdGFsKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBvcmlnaW5hbEhhbmRsZXIoZXJyb3IsIGlzRmF0YWwpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGlzYWJsZUVycm9ySGFuZGxpbmcoKSB7XG4gIGlzRXJyb3JIYW5kbGluZ0VuYWJsZWQgPSBmYWxzZTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFHQSxJQUFJQSxzQkFBc0IsR0FBRyxJQUFJO0FBRWpDLElBQU1DLHVCQUF1QixHQUFHLDJMQUEyTDtBQUUzTixTQUFTQywyQkFBMkJBLENBQUNDLEtBQWlCLEVBQUU7RUFDdERBLEtBQUssQ0FBQ0MsT0FBTyxJQUFJLE1BQU0sR0FBR0gsdUJBQXVCO0FBQ25EO0FBRUEsU0FBU0ksK0JBQStCQSxDQUFDRixLQUFZLEVBQUU7RUFDckRBLEtBQUssQ0FBQ0MsT0FBTyxHQUFHO0FBQ2xCO0FBQ0EsRUFBRUgsdUJBQXVCLEVBQUU7QUFDM0I7QUFFQSxTQUFTSyxjQUFjQSxDQUFDSCxLQUF5QixFQUFFO0VBQ2pELElBQUksTUFBTSxJQUFJQSxLQUFLLElBQUlBLEtBQUssQ0FBQ0ksSUFBSSxLQUFLLGlCQUFpQixFQUFFO0lBQ3ZETCwyQkFBMkIsQ0FBQ0MsS0FBSyxDQUFDO0VBQ3BDLENBQUMsTUFBTSxJQUNMQSxLQUFLLENBQUNDLE9BQU8sQ0FBQ0ksUUFBUSxDQUFDLDhCQUE4QixDQUFDLElBQ3RETCxLQUFLLENBQUNDLE9BQU8sQ0FBQ0ksUUFBUSxDQUFDLDBEQUEwRCxDQUFDLEVBQ2xGO0lBQ0FILCtCQUErQixDQUFDRixLQUFLLENBQUM7RUFDeEM7QUFDRjtBQUVBLFNBQVNNLFlBQVlBLENBQUNDLGVBQWUsRUFBRVAsS0FBSyxFQUFFUSxPQUFPLEVBQUU7RUFDckQsSUFBSVIsS0FBSyxZQUFZUyxLQUFLLEVBQUU7SUFDMUJOLGNBQWMsQ0FBQ0gsS0FBSyxDQUFDO0VBQ3ZCO0VBQ0FPLGVBQWUsQ0FBQ1AsS0FBSyxFQUFFUSxPQUFPLENBQUM7QUFDakM7QUFFTyxTQUFTRSxrQkFBa0JBLENBQUNILGVBQWUsRUFBRTtFQUNsRCxPQUFPLFVBQUNQLEtBQUssRUFBRVEsT0FBTyxFQUFLO0lBQ3pCLElBQUlYLHNCQUFzQixFQUFFO01BQzFCUyxZQUFZLENBQUNDLGVBQWUsRUFBRVAsS0FBSyxFQUFFUSxPQUFPLENBQUM7TUFDN0M7SUFDRjtJQUVBRCxlQUFlLENBQUNQLEtBQUssRUFBRVEsT0FBTyxDQUFDO0VBQ2pDLENBQUM7QUFDSDtBQUVPLFNBQVNHLG9CQUFvQkEsQ0FBQSxFQUFHO0VBQ3JDZCxzQkFBc0IsR0FBRyxLQUFLO0FBQ2hDIiwiaWdub3JlTGlzdCI6W119