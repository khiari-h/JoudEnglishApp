684f298f0a5f25e7b7f44c013d8713a6
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useProgressWrite = exports.useProgressRead = exports.useProgress = exports.createInitialProgress = exports.ProgressWriteContext = exports.ProgressReadContext = exports.ProgressProvider = exports.ProgressContext = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _constants = require("../utils/constants");
var _calculateProgress = require("../utils/progress/calculateProgress");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
var ProgressContext = exports.ProgressContext = (0, _react.createContext)();
var ProgressReadContext = exports.ProgressReadContext = (0, _react.createContext)();
var ProgressWriteContext = exports.ProgressWriteContext = (0, _react.createContext)();
var createInitialProgress = exports.createInitialProgress = function createInitialProgress() {
  var exercises = {};
  Object.keys(_constants.EXERCISES).forEach(function (exerciseType) {
    exercises[exerciseType] = {};
    Object.keys(_constants.LANGUAGE_LEVELS).forEach(function (levelId) {
      if (levelId === 'bonus') {
        if (_constants.BONUS_EXERCISES.includes(exerciseType)) {
          exercises[exerciseType][levelId] = {
            completed: 0,
            total: 100
          };
        }
      } else {
        exercises[exerciseType][levelId] = {
          completed: 0,
          total: 100
        };
      }
    });
  });
  return {
    exercises: exercises,
    stats: {
      streak: 0,
      totalTimeSpent: 0,
      correctAnswers: 0,
      totalAnswers: 0,
      exercisesCompleted: 0,
      lastLogin: null
    },
    lastActivity: {
      type: null,
      level: null,
      timestamp: null
    }
  };
};
var ProgressProvider = exports.ProgressProvider = function ProgressProvider(_ref) {
  var children = _ref.children;
  var _useState = (0, _react.useState)(createInitialProgress()),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    progress = _useState2[0],
    setProgress = _useState2[1];
  var _useState3 = (0, _react.useState)(true),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isLoading = _useState4[0],
    setIsLoading = _useState4[1];
  var saveTimeoutRef = (0, _react.useRef)(null);
  var isInitialLoad = (0, _react.useRef)(true);
  (0, _react.useEffect)(function () {
    var loadProgress = function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* () {
        try {
          var _yield$calculateAllPr = yield (0, _calculateProgress.calculateAllProgress)(),
            levelProgress = _yield$calculateAllPr.levelProgress,
            exerciseProgress = _yield$calculateAllPr.exerciseProgress;
          var newProgress = {
            exercises: exerciseProgress,
            stats: {
              streak: 0,
              totalTimeSpent: 0,
              correctAnswers: 0,
              totalAnswers: 0,
              exercisesCompleted: 0,
              lastLogin: null
            },
            lastActivity: {
              type: null,
              level: null,
              timestamp: null
            }
          };
          setProgress(newProgress);
        } catch (error) {
          console.error('Erreur chargement progression:', error);
          setProgress(createInitialProgress());
        } finally {
          setIsLoading(false);
          isInitialLoad.current = false;
        }
      });
      return function loadProgress() {
        return _ref2.apply(this, arguments);
      };
    }();
    loadProgress();
  }, []);
  (0, _react.useEffect)(function () {
    if (isLoading || isInitialLoad.current) {
      return;
    }
    if (saveTimeoutRef.current) {
      clearTimeout(saveTimeoutRef.current);
    }
    saveTimeoutRef.current = setTimeout((0, _asyncToGenerator2.default)(function* () {
      try {
        yield _asyncStorage.default.setItem(_constants.STORAGE_KEYS.USER_PROGRESS, JSON.stringify(progress));
      } catch (error) {
        console.error('Erreur sauvegarde progression:', error);
      }
    }), 500);
    return function () {
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
    };
  }, [progress, isLoading]);
  var updateExerciseProgress = (0, _react.useCallback)(function (exerciseType, level, completed) {
    setProgress(function (prev) {
      var newProgress = Object.assign({}, prev);
      if (!newProgress.exercises[exerciseType]) {
        newProgress.exercises[exerciseType] = {};
      }
      if (!newProgress.exercises[exerciseType][level]) {
        newProgress.exercises[exerciseType][level] = {
          completed: 0,
          total: 100
        };
      }
      newProgress.exercises[exerciseType][level].completed = Math.min(Math.max(0, completed), 100);
      newProgress.lastActivity = {
        type: exerciseType,
        level: level,
        timestamp: new Date().toISOString()
      };
      return newProgress;
    });
  }, []);
  var updateStats = (0, _react.useCallback)(function (newStats) {
    setProgress(function (prev) {
      return Object.assign({}, prev, {
        stats: Object.assign({}, prev.stats, newStats)
      });
    });
  }, []);
  var resetProgress = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      yield _asyncStorage.default.removeItem(_constants.STORAGE_KEYS.USER_PROGRESS);
      setProgress(createInitialProgress());
      return true;
    } catch (error) {
      console.error('Erreur reset progression:', error);
      return false;
    }
  }), []);
  var refreshProgress = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      var _yield$calculateAllPr2 = yield (0, _calculateProgress.calculateAllProgress)(),
        levelProgress = _yield$calculateAllPr2.levelProgress,
        exerciseProgress = _yield$calculateAllPr2.exerciseProgress;
      setProgress(function (prev) {
        return Object.assign({}, prev, {
          exercises: exerciseProgress,
          levelProgress: levelProgress
        });
      });
    } catch (error) {
      console.error('Erreur rafra√Æchissement progression:', error);
    }
  }), []);
  var getLevelProgressFromContext = (0, _react.useCallback)(function (level) {
    return (0, _calculateProgress.getLevelProgress)(progress.levelProgress || {}, level);
  }, [progress.levelProgress]);
  var getExerciseProgressFromContext = (0, _react.useCallback)(function (exerciseType, level) {
    return (0, _calculateProgress.getExerciseProgress)(progress.exercises || {}, exerciseType, level);
  }, [progress.exercises]);
  var hasProgressFromContext = (0, _react.useCallback)(function (exerciseType, level) {
    return (0, _calculateProgress.hasProgress)(progress.exercises || {}, exerciseType, level);
  }, [progress.exercises]);
  var calculateLevelProgress = (0, _react.useCallback)(function (level) {
    return (0, _calculateProgress.getLevelProgress)(progress.levelProgress || {}, level);
  }, [progress.levelProgress]);
  var calculateGlobalProgress = (0, _react.useCallback)(function () {
    var allLevels = Object.keys(_constants.LANGUAGE_LEVELS);
    if (allLevels.length === 0) {
      return 0;
    }
    var totalLevelProgress = allLevels.reduce(function (sum, levelId) {
      var levelProgress = calculateLevelProgress(levelId);
      return sum + levelProgress;
    }, 0);
    return Math.round(totalLevelProgress / allLevels.length);
  }, [calculateLevelProgress]);
  var contextValue = (0, _react.useMemo)(function () {
    return {
      progress: progress,
      isLoading: isLoading,
      updateExerciseProgress: updateExerciseProgress,
      updateStats: updateStats,
      calculateGlobalProgress: calculateGlobalProgress,
      calculateLevelProgress: calculateLevelProgress,
      resetProgress: resetProgress,
      refreshProgress: refreshProgress,
      getLevelProgress: getLevelProgressFromContext,
      getExerciseProgress: getExerciseProgressFromContext,
      hasProgress: hasProgressFromContext
    };
  }, [progress, isLoading, updateExerciseProgress, updateStats, calculateGlobalProgress, calculateLevelProgress, resetProgress, refreshProgress, getLevelProgressFromContext, getExerciseProgressFromContext, hasProgressFromContext]);
  var readValue = (0, _react.useMemo)(function () {
    return {
      progress: progress,
      isLoading: isLoading,
      calculateGlobalProgress: calculateGlobalProgress,
      calculateLevelProgress: calculateLevelProgress,
      refreshProgress: refreshProgress,
      getLevelProgress: getLevelProgressFromContext,
      getExerciseProgress: getExerciseProgressFromContext,
      hasProgress: hasProgressFromContext
    };
  }, [progress, isLoading, calculateGlobalProgress, calculateLevelProgress, refreshProgress, getLevelProgressFromContext, getExerciseProgressFromContext, hasProgressFromContext]);
  var writeValue = (0, _react.useMemo)(function () {
    return {
      updateExerciseProgress: updateExerciseProgress,
      updateStats: updateStats,
      resetProgress: resetProgress
    };
  }, [updateExerciseProgress, updateStats, resetProgress]);
  return (0, _jsxRuntime.jsx)(ProgressReadContext.Provider, {
    value: readValue,
    children: (0, _jsxRuntime.jsx)(ProgressWriteContext.Provider, {
      value: writeValue,
      children: (0, _jsxRuntime.jsx)(ProgressContext.Provider, {
        value: contextValue,
        children: children
      })
    })
  });
};
var useProgress = exports.useProgress = function useProgress() {
  var context = (0, _react.useContext)(ProgressContext);
  if (!context) {
    throw new Error('useProgress must be used within a ProgressProvider');
  }
  return context;
};
var useProgressRead = exports.useProgressRead = function useProgressRead() {
  var context = (0, _react.useContext)(ProgressReadContext);
  if (!context) {
    throw new Error('useProgressRead must be used within a ProgressProvider');
  }
  return context;
};
var useProgressWrite = exports.useProgressWrite = function useProgressWrite() {
  var context = (0, _react.useContext)(ProgressWriteContext);
  if (!context) {
    throw new Error('useProgressWrite must be used within a ProgressProvider');
  }
  return context;
};
ProgressProvider.propTypes = {
  children: _propTypes.default.node.isRequired
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,