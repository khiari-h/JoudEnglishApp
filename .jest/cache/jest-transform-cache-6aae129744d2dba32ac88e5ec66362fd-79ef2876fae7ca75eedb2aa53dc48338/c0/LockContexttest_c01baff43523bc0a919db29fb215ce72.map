{"version":3,"names":["_getJestObj","mock","isEnabled","jest","fn","verifyPin","disableLock","enableLock","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_LockContext","_jsxRuntime","_require","Lock","Consumer","_useLock","useLock","isLocked","unlockWithPin","disable","enable","isLoading","jsxs","Fragment","children","jsx","testID","String","onPress","describe","beforeEach","clearAllMocks","mockResolvedValue","ok","it","default","ui","render","LockProvider","waitFor","expect","queryByTestId","toBeNull","getByTestId","props","toBe","act","fireEvent","press","toHaveBeenCalledWith","toHaveBeenCalled","mockResolvedValueOnce","result","toEqual","reason","LockConsumer","_useLock2","lockNow","button","getByRole","toHaveBeenCalledTimes"],"sources":["LockContext.test.js"],"sourcesContent":["import React from 'react';\r\nimport { render, act, fireEvent, waitFor } from '@testing-library/react-native';\r\nimport { LockProvider, useLock } from '../../src/contexts/LockContext';\r\n\r\n// 1. Mockez le service au tout début du fichier\r\njest.mock('../../src/services/lockService', () => ({\r\n  isEnabled: jest.fn(),\r\n  verifyPin: jest.fn(),\r\n  disableLock: jest.fn(),\r\n  enableLock: jest.fn(),\r\n}));\r\n\r\nconst Lock = require('../../src/services/lockService');\r\n\r\n// Un composant de test pour consommer le contexte\r\nconst Consumer = () => {\r\n  const { isEnabled, isLocked, unlockWithPin, disable, enable, isLoading } = useLock();\r\n  return (\r\n    <>\r\n      {isLoading && <text testID=\"loading\">Loading...</text>}\r\n      <text testID=\"enabled\">{String(isEnabled)}</text>\r\n      <text testID=\"locked\">{String(isLocked)}</text>\r\n      <button testID=\"unlock-correct-pin\" onPress={() => unlockWithPin('1234')} />\r\n      <button testID=\"unlock-wrong-pin\" onPress={() => unlockWithPin('0000')} />\r\n      <button testID=\"unlock-lockout\" onPress={() => unlockWithPin('0000')} />\r\n      <button testID=\"disable\" onPress={disable} />\r\n      <button testID=\"enable\" onPress={enable} />\r\n    </>\r\n  );\r\n};\r\n\r\ndescribe('LockContext', () => {\r\n  // Réinitialise tous les mocks avant chaque test\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    Lock.isEnabled.mockResolvedValue(true);\r\n    Lock.verifyPin.mockResolvedValue({ ok: true });\r\n    Lock.disableLock.mockResolvedValue(true);\r\n    Lock.enableLock.mockResolvedValue(true);\r\n  });\r\n\r\n  // Test 1: Comportement initial, déverrouillage et désactivation\r\n  it('initializes locked when enabled, unlocks with correct PIN, and can disable', async () => {\r\n    const ui = render(<LockProvider><Consumer /></LockProvider>);\r\n    await waitFor(() => expect(ui.queryByTestId('loading')).toBeNull());\r\n\r\n    expect(ui.getByTestId('enabled').props.children).toBe('true');\r\n    expect(ui.getByTestId('locked').props.children).toBe('true');\r\n\r\n    await act(async () => {\r\n      fireEvent.press(ui.getByTestId('unlock-correct-pin'));\r\n    });\r\n\r\n    expect(ui.getByTestId('locked').props.children).toBe('false');\r\n    expect(Lock.verifyPin).toHaveBeenCalledWith('1234');\r\n\r\n    await act(async () => {\r\n      fireEvent.press(ui.getByTestId('disable'));\r\n    });\r\n    expect(ui.getByTestId('enabled').props.children).toBe('false');\r\n    expect(Lock.disableLock).toHaveBeenCalled();\r\n  });\r\n\r\n  // Test 2: Gérer l'état initial désactivé\r\n  it('initializes unlocked when not enabled', async () => {\r\n    Lock.isEnabled.mockResolvedValueOnce(false);\r\n    const ui = render(<LockProvider><Consumer /></LockProvider>);\r\n    await waitFor(() => expect(ui.queryByTestId('loading')).toBeNull());\r\n\r\n    expect(ui.getByTestId('enabled').props.children).toBe('false');\r\n    expect(ui.getByTestId('locked').props.children).toBe('false');\r\n  });\r\n\r\n  // Test 3: Échec simple (couvre le 'return { ok: false };')\r\n  it('should not unlock with an incorrect PIN', async () => {\r\n    Lock.verifyPin.mockResolvedValueOnce({ ok: false });\r\n    const ui = render(<LockProvider><Consumer /></LockProvider>);\r\n    await waitFor(() => expect(ui.queryByTestId('loading')).toBeNull());\r\n\r\n    expect(ui.getByTestId('locked').props.children).toBe('true');\r\n\r\n    let result;\r\n    await act(async () => {\r\n      result = await ui.getByTestId('unlock-wrong-pin').props.onPress();\r\n    });\r\n    \r\n    expect(ui.getByTestId('locked').props.children).toBe('true');\r\n    expect(result).toEqual({ ok: false });\r\n    expect(Lock.verifyPin).toHaveBeenCalledWith('0000');\r\n  });\r\n\r\n  // Test 4: Échec avec raison de verrouillage (couvre le 'if (res.reason === 'lockout')')\r\n  it('should return lockout reason when pin verification fails with lockout', async () => {\r\n    Lock.verifyPin.mockResolvedValueOnce({ ok: false, reason: 'lockout' });\r\n    const ui = render(<LockProvider><Consumer /></LockProvider>);\r\n    await waitFor(() => expect(ui.queryByTestId('loading')).toBeNull());\r\n\r\n    let result;\r\n    await act(async () => {\r\n      result = await ui.getByTestId('unlock-lockout').props.onPress();\r\n    });\r\n    \r\n    expect(ui.getByTestId('locked').props.children).toBe('true');\r\n    expect(result).toEqual({ ok: false, reason: 'lockout' });\r\n    expect(Lock.verifyPin).toHaveBeenCalledWith('0000');\r\n  });\r\n\r\n  // Test 5: Activation du verrouillage\r\n  it('should enable the lock', async () => {\r\n    Lock.isEnabled.mockResolvedValueOnce(false);\r\n    const ui = render(<LockProvider><Consumer /></LockProvider>);\r\n    await waitFor(() => expect(ui.queryByTestId('loading')).toBeNull());\r\n    \r\n    expect(ui.getByTestId('enabled').props.children).toBe('false');\r\n    expect(ui.getByTestId('locked').props.children).toBe('false');\r\n\r\n    await act(async () => {\r\n      fireEvent.press(ui.getByTestId('enable'));\r\n    });\r\n    \r\n    expect(ui.getByTestId('enabled').props.children).toBe('true');\r\n    expect(ui.getByTestId('locked').props.children).toBe('true');\r\n    expect(Lock.enableLock).toHaveBeenCalled();\r\n  });\r\nit('should call lockNow when lock button is pressed', async () => {\r\n  const LockConsumer = () => {\r\n    const { lockNow } = useLock();\r\n    return <button onPress={lockNow}>Lock Now</button>;\r\n  };\r\n\r\n  const ui = render(<LockProvider><LockConsumer /></LockProvider>);\r\n  await waitFor(() => expect(ui.queryByTestId('loading')).toBeNull());\r\n\r\n  const button = ui.getByRole('button');\r\n  await act(async () => {\r\n    fireEvent.press(button);\r\n  });\r\n\r\n  expect(lockNow).toHaveBeenCalledTimes(1);\r\n});\r\n});"],"mappings":"AAKAA,WAAA,GAAKC,IAAI,CAAC,gCAAgC,EAAE;EAAA,OAAO;IACjDC,SAAS,EAAEC,IAAI,CAACC,EAAE,CAAC,CAAC;IACpBC,SAAS,EAAEF,IAAI,CAACC,EAAE,CAAC,CAAC;IACpBE,WAAW,EAAEH,IAAI,CAACC,EAAE,CAAC,CAAC;IACtBG,UAAU,EAAEJ,IAAI,CAACC,EAAE,CAAC;EACtB,CAAC;AAAA,CAAC,CAAC;AAAC,IAAAI,sBAAA,GAAAC,OAAA;AAAA,IAAAC,kBAAA,GAAAF,sBAAA,CAAAC,OAAA;AAVJ,IAAAE,MAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,YAAA,GAAAH,OAAA;AACA,IAAAI,YAAA,GAAAJ,OAAA;AAAuE,IAAAK,WAAA,GAAAL,OAAA;AAAA,SAAAT,YAAA;EAAA,IAAAe,QAAA,GAAAN,OAAA;IAAAN,IAAA,GAAAY,QAAA,CAAAZ,IAAA;EAAAH,WAAA,YAAAA,YAAA;IAAA,OAAAG,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAUvE,IAAMa,IAAI,GAAGP,OAAO,CAAC,gCAAgC,CAAC;AAGtD,IAAMQ,QAAQ,GAAG,SAAXA,QAAQA,CAAA,EAAS;EACrB,IAAAC,QAAA,GAA2E,IAAAC,oBAAO,EAAC,CAAC;IAA5EjB,SAAS,GAAAgB,QAAA,CAAThB,SAAS;IAAEkB,QAAQ,GAAAF,QAAA,CAARE,QAAQ;IAAEC,aAAa,GAAAH,QAAA,CAAbG,aAAa;IAAEC,OAAO,GAAAJ,QAAA,CAAPI,OAAO;IAAEC,MAAM,GAAAL,QAAA,CAANK,MAAM;IAAEC,SAAS,GAAAN,QAAA,CAATM,SAAS;EACtE,OACE,IAAAV,WAAA,CAAAW,IAAA,EAAAX,WAAA,CAAAY,QAAA;IAAAC,QAAA,GAAE,iBACA,EAACH,SAAS,IAAI,IAAAV,WAAA,CAAAc,GAAA;MAAMC,MAAM,EAAC,SAAS;MAAAF,QAAA,EAAC;IAAU,CAAM,CAAC,EAAC,iBACvD,MAAAb,WAAA,CAAAc,GAAA;MAAMC,MAAM,EAAC,SAAS;MAAAF,QAAA,EAAEG,MAAM,CAAC5B,SAAS;IAAC,CAAO,CAAC,mBACjD,MAAAY,WAAA,CAAAc,GAAA;MAAMC,MAAM,EAAC,QAAQ;MAAAF,QAAA,EAAEG,MAAM,CAACV,QAAQ;IAAC,CAAO,CAAC,mBAC/C,MAAAN,WAAA,CAAAc,GAAA;MAAQC,MAAM,EAAC,oBAAoB;MAACE,OAAO,EAAE,SAATA,OAAOA,CAAA;QAAA,OAAQV,aAAa,CAAC,MAAM,CAAC;MAAA;IAAC,CAAE,CAAC,mBAC5E,MAAAP,WAAA,CAAAc,GAAA;MAAQC,MAAM,EAAC,kBAAkB;MAACE,OAAO,EAAE,SAATA,OAAOA,CAAA;QAAA,OAAQV,aAAa,CAAC,MAAM,CAAC;MAAA;IAAC,CAAE,CAAC,mBAC1E,MAAAP,WAAA,CAAAc,GAAA;MAAQC,MAAM,EAAC,gBAAgB;MAACE,OAAO,EAAE,SAATA,OAAOA,CAAA;QAAA,OAAQV,aAAa,CAAC,MAAM,CAAC;MAAA;IAAC,CAAE,CAAC,mBACxE,MAAAP,WAAA,CAAAc,GAAA;MAAQC,MAAM,EAAC,SAAS;MAACE,OAAO,EAAET;IAAQ,CAAE,CAAC,mBAC7C,MAAAR,WAAA,CAAAc,GAAA;MAAQC,MAAM,EAAC,QAAQ;MAACE,OAAO,EAAER;IAAO,CAAE,CAAC,cAC7C;EAAA,CAAE,CAAC;AAEP,CAAC;AAEDS,QAAQ,CAAC,aAAa,EAAE,YAAM;EAE5BC,UAAU,CAAC,YAAM;IACf9B,IAAI,CAAC+B,aAAa,CAAC,CAAC;IACpBlB,IAAI,CAACd,SAAS,CAACiC,iBAAiB,CAAC,IAAI,CAAC;IACtCnB,IAAI,CAACX,SAAS,CAAC8B,iBAAiB,CAAC;MAAEC,EAAE,EAAE;IAAK,CAAC,CAAC;IAC9CpB,IAAI,CAACV,WAAW,CAAC6B,iBAAiB,CAAC,IAAI,CAAC;IACxCnB,IAAI,CAACT,UAAU,CAAC4B,iBAAiB,CAAC,IAAI,CAAC;EACzC,CAAC,CAAC;EAGFE,EAAE,CAAC,4EAA4E,MAAA3B,kBAAA,CAAA4B,OAAA,EAAE,aAAY;IAC3F,IAAMC,EAAE,GAAG,IAAAC,mBAAM,EAAC,IAAA1B,WAAA,CAAAc,GAAA,EAACf,YAAA,CAAA4B,YAAY;MAAAd,QAAA,EAAC,IAAAb,WAAA,CAAAc,GAAA,EAACX,QAAQ,IAAE;IAAC,CAAc,CAAC,CAAC;IAC5D,MAAM,IAAAyB,oBAAO,EAAC;MAAA,OAAMC,MAAM,CAACJ,EAAE,CAACK,aAAa,CAAC,SAAS,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;IAAA,EAAC;IAEnEF,MAAM,CAACJ,EAAE,CAACO,WAAW,CAAC,SAAS,CAAC,CAACC,KAAK,CAACpB,QAAQ,CAAC,CAACqB,IAAI,CAAC,MAAM,CAAC;IAC7DL,MAAM,CAACJ,EAAE,CAACO,WAAW,CAAC,QAAQ,CAAC,CAACC,KAAK,CAACpB,QAAQ,CAAC,CAACqB,IAAI,CAAC,MAAM,CAAC;IAE5D,MAAM,IAAAC,gBAAG,MAAAvC,kBAAA,CAAA4B,OAAA,EAAC,aAAY;MACpBY,sBAAS,CAACC,KAAK,CAACZ,EAAE,CAACO,WAAW,CAAC,oBAAoB,CAAC,CAAC;IACvD,CAAC,EAAC;IAEFH,MAAM,CAACJ,EAAE,CAACO,WAAW,CAAC,QAAQ,CAAC,CAACC,KAAK,CAACpB,QAAQ,CAAC,CAACqB,IAAI,CAAC,OAAO,CAAC;IAC7DL,MAAM,CAAC3B,IAAI,CAACX,SAAS,CAAC,CAAC+C,oBAAoB,CAAC,MAAM,CAAC;IAEnD,MAAM,IAAAH,gBAAG,MAAAvC,kBAAA,CAAA4B,OAAA,EAAC,aAAY;MACpBY,sBAAS,CAACC,KAAK,CAACZ,EAAE,CAACO,WAAW,CAAC,SAAS,CAAC,CAAC;IAC5C,CAAC,EAAC;IACFH,MAAM,CAACJ,EAAE,CAACO,WAAW,CAAC,SAAS,CAAC,CAACC,KAAK,CAACpB,QAAQ,CAAC,CAACqB,IAAI,CAAC,OAAO,CAAC;IAC9DL,MAAM,CAAC3B,IAAI,CAACV,WAAW,CAAC,CAAC+C,gBAAgB,CAAC,CAAC;EAC7C,CAAC,EAAC;EAGFhB,EAAE,CAAC,uCAAuC,MAAA3B,kBAAA,CAAA4B,OAAA,EAAE,aAAY;IACtDtB,IAAI,CAACd,SAAS,CAACoD,qBAAqB,CAAC,KAAK,CAAC;IAC3C,IAAMf,EAAE,GAAG,IAAAC,mBAAM,EAAC,IAAA1B,WAAA,CAAAc,GAAA,EAACf,YAAA,CAAA4B,YAAY;MAAAd,QAAA,EAAC,IAAAb,WAAA,CAAAc,GAAA,EAACX,QAAQ,IAAE;IAAC,CAAc,CAAC,CAAC;IAC5D,MAAM,IAAAyB,oBAAO,EAAC;MAAA,OAAMC,MAAM,CAACJ,EAAE,CAACK,aAAa,CAAC,SAAS,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;IAAA,EAAC;IAEnEF,MAAM,CAACJ,EAAE,CAACO,WAAW,CAAC,SAAS,CAAC,CAACC,KAAK,CAACpB,QAAQ,CAAC,CAACqB,IAAI,CAAC,OAAO,CAAC;IAC9DL,MAAM,CAACJ,EAAE,CAACO,WAAW,CAAC,QAAQ,CAAC,CAACC,KAAK,CAACpB,QAAQ,CAAC,CAACqB,IAAI,CAAC,OAAO,CAAC;EAC/D,CAAC,EAAC;EAGFX,EAAE,CAAC,yCAAyC,MAAA3B,kBAAA,CAAA4B,OAAA,EAAE,aAAY;IACxDtB,IAAI,CAACX,SAAS,CAACiD,qBAAqB,CAAC;MAAElB,EAAE,EAAE;IAAM,CAAC,CAAC;IACnD,IAAMG,EAAE,GAAG,IAAAC,mBAAM,EAAC,IAAA1B,WAAA,CAAAc,GAAA,EAACf,YAAA,CAAA4B,YAAY;MAAAd,QAAA,EAAC,IAAAb,WAAA,CAAAc,GAAA,EAACX,QAAQ,IAAE;IAAC,CAAc,CAAC,CAAC;IAC5D,MAAM,IAAAyB,oBAAO,EAAC;MAAA,OAAMC,MAAM,CAACJ,EAAE,CAACK,aAAa,CAAC,SAAS,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;IAAA,EAAC;IAEnEF,MAAM,CAACJ,EAAE,CAACO,WAAW,CAAC,QAAQ,CAAC,CAACC,KAAK,CAACpB,QAAQ,CAAC,CAACqB,IAAI,CAAC,MAAM,CAAC;IAE5D,IAAIO,MAAM;IACV,MAAM,IAAAN,gBAAG,MAAAvC,kBAAA,CAAA4B,OAAA,EAAC,aAAY;MACpBiB,MAAM,SAAShB,EAAE,CAACO,WAAW,CAAC,kBAAkB,CAAC,CAACC,KAAK,CAAChB,OAAO,CAAC,CAAC;IACnE,CAAC,EAAC;IAEFY,MAAM,CAACJ,EAAE,CAACO,WAAW,CAAC,QAAQ,CAAC,CAACC,KAAK,CAACpB,QAAQ,CAAC,CAACqB,IAAI,CAAC,MAAM,CAAC;IAC5DL,MAAM,CAACY,MAAM,CAAC,CAACC,OAAO,CAAC;MAAEpB,EAAE,EAAE;IAAM,CAAC,CAAC;IACrCO,MAAM,CAAC3B,IAAI,CAACX,SAAS,CAAC,CAAC+C,oBAAoB,CAAC,MAAM,CAAC;EACrD,CAAC,EAAC;EAGFf,EAAE,CAAC,uEAAuE,MAAA3B,kBAAA,CAAA4B,OAAA,EAAE,aAAY;IACtFtB,IAAI,CAACX,SAAS,CAACiD,qBAAqB,CAAC;MAAElB,EAAE,EAAE,KAAK;MAAEqB,MAAM,EAAE;IAAU,CAAC,CAAC;IACtE,IAAMlB,EAAE,GAAG,IAAAC,mBAAM,EAAC,IAAA1B,WAAA,CAAAc,GAAA,EAACf,YAAA,CAAA4B,YAAY;MAAAd,QAAA,EAAC,IAAAb,WAAA,CAAAc,GAAA,EAACX,QAAQ,IAAE;IAAC,CAAc,CAAC,CAAC;IAC5D,MAAM,IAAAyB,oBAAO,EAAC;MAAA,OAAMC,MAAM,CAACJ,EAAE,CAACK,aAAa,CAAC,SAAS,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;IAAA,EAAC;IAEnE,IAAIU,MAAM;IACV,MAAM,IAAAN,gBAAG,MAAAvC,kBAAA,CAAA4B,OAAA,EAAC,aAAY;MACpBiB,MAAM,SAAShB,EAAE,CAACO,WAAW,CAAC,gBAAgB,CAAC,CAACC,KAAK,CAAChB,OAAO,CAAC,CAAC;IACjE,CAAC,EAAC;IAEFY,MAAM,CAACJ,EAAE,CAACO,WAAW,CAAC,QAAQ,CAAC,CAACC,KAAK,CAACpB,QAAQ,CAAC,CAACqB,IAAI,CAAC,MAAM,CAAC;IAC5DL,MAAM,CAACY,MAAM,CAAC,CAACC,OAAO,CAAC;MAAEpB,EAAE,EAAE,KAAK;MAAEqB,MAAM,EAAE;IAAU,CAAC,CAAC;IACxDd,MAAM,CAAC3B,IAAI,CAACX,SAAS,CAAC,CAAC+C,oBAAoB,CAAC,MAAM,CAAC;EACrD,CAAC,EAAC;EAGFf,EAAE,CAAC,wBAAwB,MAAA3B,kBAAA,CAAA4B,OAAA,EAAE,aAAY;IACvCtB,IAAI,CAACd,SAAS,CAACoD,qBAAqB,CAAC,KAAK,CAAC;IAC3C,IAAMf,EAAE,GAAG,IAAAC,mBAAM,EAAC,IAAA1B,WAAA,CAAAc,GAAA,EAACf,YAAA,CAAA4B,YAAY;MAAAd,QAAA,EAAC,IAAAb,WAAA,CAAAc,GAAA,EAACX,QAAQ,IAAE;IAAC,CAAc,CAAC,CAAC;IAC5D,MAAM,IAAAyB,oBAAO,EAAC;MAAA,OAAMC,MAAM,CAACJ,EAAE,CAACK,aAAa,CAAC,SAAS,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;IAAA,EAAC;IAEnEF,MAAM,CAACJ,EAAE,CAACO,WAAW,CAAC,SAAS,CAAC,CAACC,KAAK,CAACpB,QAAQ,CAAC,CAACqB,IAAI,CAAC,OAAO,CAAC;IAC9DL,MAAM,CAACJ,EAAE,CAACO,WAAW,CAAC,QAAQ,CAAC,CAACC,KAAK,CAACpB,QAAQ,CAAC,CAACqB,IAAI,CAAC,OAAO,CAAC;IAE7D,MAAM,IAAAC,gBAAG,MAAAvC,kBAAA,CAAA4B,OAAA,EAAC,aAAY;MACpBY,sBAAS,CAACC,KAAK,CAACZ,EAAE,CAACO,WAAW,CAAC,QAAQ,CAAC,CAAC;IAC3C,CAAC,EAAC;IAEFH,MAAM,CAACJ,EAAE,CAACO,WAAW,CAAC,SAAS,CAAC,CAACC,KAAK,CAACpB,QAAQ,CAAC,CAACqB,IAAI,CAAC,MAAM,CAAC;IAC7DL,MAAM,CAACJ,EAAE,CAACO,WAAW,CAAC,QAAQ,CAAC,CAACC,KAAK,CAACpB,QAAQ,CAAC,CAACqB,IAAI,CAAC,MAAM,CAAC;IAC5DL,MAAM,CAAC3B,IAAI,CAACT,UAAU,CAAC,CAAC8C,gBAAgB,CAAC,CAAC;EAC5C,CAAC,EAAC;EACJhB,EAAE,CAAC,iDAAiD,MAAA3B,kBAAA,CAAA4B,OAAA,EAAE,aAAY;IAChE,IAAMoB,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS;MACzB,IAAAC,SAAA,GAAoB,IAAAxC,oBAAO,EAAC,CAAC;QAArByC,OAAO,GAAAD,SAAA,CAAPC,OAAO;MACf,OAAO,IAAA9C,WAAA,CAAAc,GAAA;QAAQG,OAAO,EAAE6B,OAAQ;QAAAjC,QAAA,EAAC;MAAQ,CAAQ,CAAC;IACpD,CAAC;IAED,IAAMY,EAAE,GAAG,IAAAC,mBAAM,EAAC,IAAA1B,WAAA,CAAAc,GAAA,EAACf,YAAA,CAAA4B,YAAY;MAAAd,QAAA,EAAC,IAAAb,WAAA,CAAAc,GAAA,EAAC8B,YAAY,IAAE;IAAC,CAAc,CAAC,CAAC;IAChE,MAAM,IAAAhB,oBAAO,EAAC;MAAA,OAAMC,MAAM,CAACJ,EAAE,CAACK,aAAa,CAAC,SAAS,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;IAAA,EAAC;IAEnE,IAAMgB,MAAM,GAAGtB,EAAE,CAACuB,SAAS,CAAC,QAAQ,CAAC;IACrC,MAAM,IAAAb,gBAAG,MAAAvC,kBAAA,CAAA4B,OAAA,EAAC,aAAY;MACpBY,sBAAS,CAACC,KAAK,CAACU,MAAM,CAAC;IACzB,CAAC,EAAC;IAEFlB,MAAM,CAACiB,OAAO,CAAC,CAACG,qBAAqB,CAAC,CAAC,CAAC;EAC1C,CAAC,EAAC;AACF,CAAC,CAAC","ignoreList":[]}