844904a32f6a2b465b03e881ae49eeca
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _NavigationButtons = _interopRequireDefault(require("../../../../components/exercise-common/NavigationButtons"));
var _jsxRuntime = require("react/jsx-runtime");
function cov_275i6lzrke() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\exercises\\vocabulary\\VocabularyNavigation\\index.js";
  var hash = "2db82198fa26bad4147f8ecf4c4feadcc093cda0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\exercises\\vocabulary\\VocabularyNavigation\\index.js",
    statementMap: {
      "0": {
        start: {
          line: 11,
          column: 29
        },
        end: {
          line: 34,
          column: 1
        }
      },
      "1": {
        start: {
          line: 18,
          column: 2
        },
        end: {
          line: 33,
          column: 4
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 29
          },
          end: {
            line: 11,
            column: 30
          }
        },
        loc: {
          start: {
            line: 17,
            column: 6
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 17
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 2
          },
          end: {
            line: 14,
            column: 22
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 14,
            column: 18
          },
          end: {
            line: 14,
            column: 22
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 15,
            column: 2
          },
          end: {
            line: 15,
            column: 16
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 15,
            column: 16
          }
        }],
        line: 15
      }
    },
    s: {
      "0": 0,
      "1": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0],
      "1": [0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2db82198fa26bad4147f8ecf4c4feadcc093cda0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_275i6lzrke = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_275i6lzrke();
cov_275i6lzrke().s[0]++;
var VocabularyNavigation = function VocabularyNavigation(_ref) {
  var onPrevious = _ref.onPrevious,
    onNext = _ref.onNext,
    _ref$canGoPrevious = _ref.canGoPrevious,
    canGoPrevious = _ref$canGoPrevious === void 0 ? (cov_275i6lzrke().b[0][0]++, true) : _ref$canGoPrevious,
    _ref$isLast = _ref.isLast,
    isLast = _ref$isLast === void 0 ? (cov_275i6lzrke().b[1][0]++, false) : _ref$isLast,
    levelColor = _ref.levelColor;
  cov_275i6lzrke().f[0]++;
  cov_275i6lzrke().s[1]++;
  return (0, _jsxRuntime.jsx)(_NavigationButtons.default, {
    onNext: onNext,
    onPrevious: onPrevious,
    disablePrevious: !canGoPrevious,
    disableNext: false,
    primaryColor: levelColor,
    isLast: isLast,
    buttonLabels: {
      next: "Suivant",
      previous: "Précédent",
      finish: "Terminer"
    }
  });
};
var _default = exports.default = VocabularyNavigation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfTmF2aWdhdGlvbkJ1dHRvbnMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9qc3hSdW50aW1lIiwiY292XzI3NWk2bHpya2UiLCJwYXRoIiwiaGFzaCIsImdsb2JhbCIsIkZ1bmN0aW9uIiwiZ2N2IiwiY292ZXJhZ2VEYXRhIiwic3RhdGVtZW50TWFwIiwic3RhcnQiLCJsaW5lIiwiY29sdW1uIiwiZW5kIiwiZm5NYXAiLCJuYW1lIiwiZGVjbCIsImxvYyIsImJyYW5jaE1hcCIsInR5cGUiLCJsb2NhdGlvbnMiLCJzIiwiZiIsImIiLCJfY292ZXJhZ2VTY2hlbWEiLCJjb3ZlcmFnZSIsImFjdHVhbENvdmVyYWdlIiwiVm9jYWJ1bGFyeU5hdmlnYXRpb24iLCJfcmVmIiwib25QcmV2aW91cyIsIm9uTmV4dCIsIl9yZWYkY2FuR29QcmV2aW91cyIsImNhbkdvUHJldmlvdXMiLCJfcmVmJGlzTGFzdCIsImlzTGFzdCIsImxldmVsQ29sb3IiLCJqc3giLCJkZWZhdWx0IiwiZGlzYWJsZVByZXZpb3VzIiwiZGlzYWJsZU5leHQiLCJwcmltYXJ5Q29sb3IiLCJidXR0b25MYWJlbHMiLCJuZXh0IiwicHJldmlvdXMiLCJmaW5pc2giLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBWb2NhYnVsYXJ5TmF2aWdhdGlvbi9pbmRleC5qcyAtIFZFUlNJT04gT1BUSU1JU8OJRSAocGx1cyBkZSBcIjEvMlwiIHJlZG9uZGFudClcclxuXHJcbmltcG9ydCBOYXZpZ2F0aW9uQnV0dG9ucyBmcm9tIFwiLi4vLi4vLi4vLi4vY29tcG9uZW50cy9leGVyY2lzZS1jb21tb24vTmF2aWdhdGlvbkJ1dHRvbnNcIjtcclxuXHJcbi8qKlxyXG4gKiDwn46vIFZvY2FidWxhcnlOYXZpZ2F0aW9uIC0gVmVyc2lvbiBVbHRyYS1TaW1wbGlmacOpZVxyXG4gKiAtIFBsdXMgZCdpbmRpY2F0ZXVyIFwiMS8yXCIgcmVkb25kYW50IFxyXG4gKiAtIFBsdXMgZGUgd3JhcHBlciBpbnV0aWxlXHJcbiAqIC0gTmF2aWdhdGlvbkJ1dHRvbnMgZ8OocmUgdG91dCBtYWludGVuYW50XHJcbiAqL1xyXG5jb25zdCBWb2NhYnVsYXJ5TmF2aWdhdGlvbiA9ICh7XHJcbiAgb25QcmV2aW91cyxcclxuICBvbk5leHQsXHJcbiAgY2FuR29QcmV2aW91cyA9IHRydWUsXHJcbiAgaXNMYXN0ID0gZmFsc2UsXHJcbiAgbGV2ZWxDb2xvcixcclxufSkgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8TmF2aWdhdGlvbkJ1dHRvbnNcclxuICAgICAgb25OZXh0PXtvbk5leHR9XHJcbiAgICAgIG9uUHJldmlvdXM9e29uUHJldmlvdXN9XHJcbiAgICAgIGRpc2FibGVQcmV2aW91cz17IWNhbkdvUHJldmlvdXN9XHJcbiAgICAgIGRpc2FibGVOZXh0PXtmYWxzZX1cclxuICAgICAgcHJpbWFyeUNvbG9yPXtsZXZlbENvbG9yfVxyXG4gICAgICBpc0xhc3Q9e2lzTGFzdH0gLy8g4oaQIE5vdXZlYXUgcHJvcCBzaW1wbGVcclxuICAgICAgYnV0dG9uTGFiZWxzPXt7XHJcbiAgICAgICAgbmV4dDogXCJTdWl2YW50XCIsXHJcbiAgICAgICAgcHJldmlvdXM6IFwiUHLDqWPDqWRlbnRcIiwgXHJcbiAgICAgICAgZmluaXNoOiBcIlRlcm1pbmVyXCJcclxuICAgICAgfX1cclxuICAgICAgLy8g8J+nuSBTVVBQUklNw4kgOiBjdXJyZW50SW5kZXgsIHRvdGFsQ291bnQsIHNob3dTa2lwLCB2YXJpYW50LCB3cmFwcGVyIFZpZXdcclxuICAgIC8+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFZvY2FidWxhcnlOYXZpZ2F0aW9uOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSxJQUFBQSxrQkFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQXlGLElBQUFDLFdBQUEsR0FBQUQsT0FBQTtBQUFBLFNBQUFFLGVBQUE7RUFBQSxJQUFBQyxJQUFBO0VBQUEsSUFBQUMsSUFBQTtFQUFBLElBQUFDLE1BQUEsT0FBQUMsUUFBQTtFQUFBLElBQUFDLEdBQUE7RUFBQSxJQUFBQyxZQUFBO0lBQUFMLElBQUE7SUFBQU0sWUFBQTtNQUFBO1FBQUFDLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7SUFBQTtJQUFBRSxLQUFBO01BQUE7UUFBQUMsSUFBQTtRQUFBQyxJQUFBO1VBQUFOLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFLLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO0lBQUE7SUFBQU8sU0FBQTtNQUFBO1FBQUFELEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtJQUFBO0lBQUFVLENBQUE7TUFBQTtNQUFBO0lBQUE7SUFBQUMsQ0FBQTtNQUFBO0lBQUE7SUFBQUMsQ0FBQTtNQUFBO01BQUE7SUFBQTtJQUFBQyxlQUFBO0lBQUFwQixJQUFBO0VBQUE7RUFBQSxJQUFBcUIsUUFBQSxHQUFBcEIsTUFBQSxDQUFBRSxHQUFBLE1BQUFGLE1BQUEsQ0FBQUUsR0FBQTtFQUFBLEtBQUFrQixRQUFBLENBQUF0QixJQUFBLEtBQUFzQixRQUFBLENBQUF0QixJQUFBLEVBQUFDLElBQUEsS0FBQUEsSUFBQTtJQUFBcUIsUUFBQSxDQUFBdEIsSUFBQSxJQUFBSyxZQUFBO0VBQUE7RUFBQSxJQUFBa0IsY0FBQSxHQUFBRCxRQUFBLENBQUF0QixJQUFBO0VBQUE7SUFBQUQsY0FBQSxZQUFBQSxDQUFBO01BQUEsT0FBQXdCLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUF4QixjQUFBO0FBQUFBLGNBQUEsR0FBQW1CLENBQUE7QUFRekYsSUFBTU0sb0JBQW9CLEdBQUcsU0FBdkJBLG9CQUFvQkEsQ0FBQUMsSUFBQSxFQU1wQjtFQUFBLElBTEpDLFVBQVUsR0FBQUQsSUFBQSxDQUFWQyxVQUFVO0lBQ1ZDLE1BQU0sR0FBQUYsSUFBQSxDQUFORSxNQUFNO0lBQUFDLGtCQUFBLEdBQUFILElBQUEsQ0FDTkksYUFBYTtJQUFiQSxhQUFhLEdBQUFELGtCQUFBLGVBQUE3QixjQUFBLEdBQUFxQixDQUFBLFVBQUcsSUFBSSxJQUFBUSxrQkFBQTtJQUFBRSxXQUFBLEdBQUFMLElBQUEsQ0FDcEJNLE1BQU07SUFBTkEsTUFBTSxHQUFBRCxXQUFBLGVBQUEvQixjQUFBLEdBQUFxQixDQUFBLFVBQUcsS0FBSyxJQUFBVSxXQUFBO0lBQ2RFLFVBQVUsR0FBQVAsSUFBQSxDQUFWTyxVQUFVO0VBQUFqQyxjQUFBLEdBQUFvQixDQUFBO0VBQUFwQixjQUFBLEdBQUFtQixDQUFBO0VBRVYsT0FDRSxJQUFBcEIsV0FBQSxDQUFBbUMsR0FBQSxFQUFDdEMsa0JBQUEsQ0FBQXVDLE9BQWlCO0lBQ2hCUCxNQUFNLEVBQUVBLE1BQU87SUFDZkQsVUFBVSxFQUFFQSxVQUFXO0lBQ3ZCUyxlQUFlLEVBQUUsQ0FBQ04sYUFBYztJQUNoQ08sV0FBVyxFQUFFLEtBQU07SUFDbkJDLFlBQVksRUFBRUwsVUFBVztJQUN6QkQsTUFBTSxFQUFFQSxNQUFPO0lBQ2ZPLFlBQVksRUFBRTtNQUNaQyxJQUFJLEVBQUUsU0FBUztNQUNmQyxRQUFRLEVBQUUsV0FBVztNQUNyQkMsTUFBTSxFQUFFO0lBQ1Y7RUFBRSxDQUVILENBQUM7QUFFTixDQUFDO0FBQUMsSUFBQUMsUUFBQSxHQUFBQyxPQUFBLENBQUFULE9BQUEsR0FFYVYsb0JBQW9CIiwiaWdub3JlTGlzdCI6W119