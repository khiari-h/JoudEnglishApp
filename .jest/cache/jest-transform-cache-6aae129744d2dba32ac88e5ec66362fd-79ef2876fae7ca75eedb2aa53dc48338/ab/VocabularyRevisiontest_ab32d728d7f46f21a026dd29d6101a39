9b661f890d07a3e53ba3ab05b87b7f23
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        goBack: jest.fn()
      };
    }
  };
});
_getJestObj().mock('../../../src/hooks/useRevisionManager', function () {
  return {
    __esModule: true,
    default: function _default() {
      return {
        markRevisionCompleted: jest.fn()
      };
    }
  };
});
_getJestObj().mock('../../../src/hooks/useRevisionData', function () {
  return {
    __esModule: true,
    default: function _default() {
      return {
        revisionQuestions: [],
        isLoading: false,
        error: null,
        stats: {
          totalLearned: 0
        },
        hasEnoughWords: false,
        canGenerateQuestions: false
      };
    }
  };
});
_getJestObj().mock('../../../src/hooks/useQuizEngine', function () {
  return {
    __esModule: true,
    default: function _default() {
      return {
        isFinished: false,
        score: 0,
        totalQuestions: 0,
        goToNextQuestion: jest.fn(),
        handleAnswer: jest.fn(),
        handleRestart: jest.fn(),
        showResult: false
      };
    }
  };
});
_getJestObj().mock('../../../src/screens/VocabularyRevision/components/EmptyState', function () {
  var _require = require('react-native'),
    Text = _require.Text;
  return {
    __esModule: true,
    default: function _default(_ref) {
      var type = _ref.type,
        message = _ref.message;
      return (0, _jsxRuntime.jsxs)(Text, {
        children: ["EmptyState Mock: ", type, " ", message]
      });
    }
  };
});
_getJestObj().mock('../../../src/screens/VocabularyRevision/components/QuizScreen', function () {
  var _require2 = require('react-native'),
    Text = _require2.Text;
  return {
    __esModule: true,
    default: function _default() {
      return (0, _jsxRuntime.jsx)(Text, {
        children: "QuizScreen Mock"
      });
    }
  };
});
_getJestObj().mock('../../../src/screens/VocabularyRevision/components/ResultScreen', function () {
  var _require3 = require('react-native'),
    Text = _require3.Text;
  return {
    __esModule: true,
    default: function _default() {
      return (0, _jsxRuntime.jsx)(Text, {
        children: "ResultScreen Mock"
      });
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _VocabularyRevision = _interopRequireDefault(require("../../../src/screens/VocabularyRevision"));
var _ThemeContext = require("../../../src/contexts/ThemeContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require4 = require("@jest/globals"),
    jest = _require4.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('VocabularyRevision', function () {
  var mockTheme = {
    colors: {
      background: "#F8FAFC",
      surface: "#FFFFFF",
      text: "#1F2937",
      textSecondary: "#6B7280",
      primary: "#3B82F6"
    }
  };
  it('should render EmptyState when not enough words', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
      value: mockTheme,
      children: (0, _jsxRuntime.jsx)(_VocabularyRevision.default, {
        route: {
          params: {}
        }
      })
    }));
    expect(_reactNative.screen.getByText(/EmptyState Mock: locked/)).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,