{"version":3,"names":["_getJestObj","mock","useNavigation","goBack","jest","fn","__esModule","default","markRevisionCompleted","revisionQuestions","isLoading","error","stats","totalLearned","hasEnoughWords","canGenerateQuestions","isFinished","score","totalQuestions","goToNextQuestion","handleAnswer","handleRestart","showResult","_require","require","Text","_ref","type","message","_jsxRuntime","jsxs","children","_require2","jsx","_require3","_interopRequireDefault","_react","_reactNative","_VocabularyRevision","_ThemeContext","_require4","describe","mockTheme","colors","background","surface","text","textSecondary","primary","it","render","ThemeContext","Provider","value","route","params","expect","screen","getByText","toBeTruthy"],"sources":["VocabularyRevision.test.js"],"sourcesContent":["import React from 'react';\nimport { render, screen } from '@testing-library/react-native';\nimport VocabularyRevision from '../../../src/screens/VocabularyRevision';\nimport { ThemeContext } from '../../../src/contexts/ThemeContext';\n\n// Mock custom hooks\njest.mock('@react-navigation/native', () => ({\n  useNavigation: () => ({\n    goBack: jest.fn(),\n  }),\n}));\njest.mock('../../../src/hooks/useRevisionManager', () => ({\n  __esModule: true,\n  default: () => ({\n    markRevisionCompleted: jest.fn(),\n  }),\n}));\njest.mock('../../../src/hooks/useRevisionData', () => ({\n  __esModule: true,\n  default: () => ({\n    revisionQuestions: [],\n    isLoading: false,\n    error: null,\n    stats: { totalLearned: 0 },\n    hasEnoughWords: false,\n    canGenerateQuestions: false,\n  }),\n}));\njest.mock('../../../src/hooks/useQuizEngine', () => ({\n  __esModule: true,\n  default: () => ({\n    isFinished: false,\n    score: 0,\n    totalQuestions: 0,\n    goToNextQuestion: jest.fn(),\n    handleAnswer: jest.fn(),\n    handleRestart: jest.fn(),\n    showResult: false,\n  }),\n}));\n\n// Mock sub-components to render identifiable text\njest.mock('../../../src/screens/VocabularyRevision/components/EmptyState', () => {\n  const { Text } = require('react-native');\n  return {\n    __esModule: true,\n    default: ({ type, message }) => <Text>EmptyState Mock: {type} {message}</Text>,\n  };\n});\njest.mock('../../../src/screens/VocabularyRevision/components/QuizScreen', () => {\n  const { Text } = require('react-native');\n  return {\n    __esModule: true,\n    default: () => <Text>QuizScreen Mock</Text>,\n  };\n});\njest.mock('../../../src/screens/VocabularyRevision/components/ResultScreen', () => {\n  const { Text } = require('react-native');\n  return {\n    __esModule: true,\n    default: () => <Text>ResultScreen Mock</Text>,\n  };\n});\n\ndescribe('VocabularyRevision', () => {\n  const mockTheme = {\n    colors: {\n      background: \"#F8FAFC\",\n      surface: \"#FFFFFF\",\n      text: \"#1F2937\",\n      textSecondary: \"#6B7280\",\n      primary: \"#3B82F6\"\n    },\n  };\n\n  it('should render EmptyState when not enough words', () => {\n    render(\n      <ThemeContext.Provider value={mockTheme}>\n        <VocabularyRevision route={{ params: {} }} />\n      </ThemeContext.Provider>\n    );\n    expect(screen.getByText(/EmptyState Mock: locked/)).toBeTruthy();\n  });\n});\n"],"mappings":"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","ignoreList":[]}