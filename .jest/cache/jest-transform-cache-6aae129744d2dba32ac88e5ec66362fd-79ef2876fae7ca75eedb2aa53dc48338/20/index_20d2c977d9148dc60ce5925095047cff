c4dc0018bb794bdffdb52c1cae0fa4a2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _expoLinearGradient = require("expo-linear-gradient");
var _vectorIcons = require("@expo/vector-icons");
var _ContentSection = _interopRequireDefault(require("../../../../components/ui/ContentSection"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var GrammarRuleContent = function GrammarRuleContent(_ref) {
  var rule = _ref.rule,
    _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? "#3b82f6" : _ref$levelColor;
  var styles = (0, _style.default)(levelColor);
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    expanded = _useState2[0],
    setExpanded = _useState2[1];
  var _useState3 = (0, _react.useState)(new _reactNative.Animated.Value(0)),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 1),
    expandAnim = _useState4[0];
  if (!rule) return null;
  var toggleExpanded = (0, _react.useCallback)(function () {
    var toValue = expanded ? 0 : 1;
    _reactNative.Animated.spring(expandAnim, {
      toValue: toValue,
      useNativeDriver: false,
      tension: 100,
      friction: 8
    }).start();
    setExpanded(function (prev) {
      return !prev;
    });
  }, [expanded, expandAnim]);
  var contentHeight = expandAnim.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 600]
  });
  var iconRotation = expandAnim.interpolate({
    inputRange: [0, 1],
    outputRange: ['0deg', '180deg']
  });
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsx)(CollapsibleHeader, {
      expanded: expanded,
      toggleExpanded: toggleExpanded,
      expandAnim: expandAnim,
      iconRotation: iconRotation,
      rule: rule,
      levelColor: levelColor,
      styles: styles
    }), (0, _jsxRuntime.jsx)(RuleContentSection, {
      expandAnim: expandAnim,
      contentHeight: contentHeight,
      rule: rule,
      levelColor: levelColor,
      styles: styles
    })]
  });
};
var CollapsibleHeader = function CollapsibleHeader(_ref2) {
  var expanded = _ref2.expanded,
    toggleExpanded = _ref2.toggleExpanded,
    iconRotation = _ref2.iconRotation,
    rule = _ref2.rule,
    levelColor = _ref2.levelColor,
    styles = _ref2.styles;
  return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
    style: styles.headerContainer,
    onPress: toggleExpanded,
    activeOpacity: 0.8,
    children: (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
      colors: [`${levelColor}08`, `${levelColor}04`, 'transparent'],
      start: {
        x: 0,
        y: 0
      },
      end: {
        x: 1,
        y: 1
      },
      style: styles.headerGradient,
      children: (0, _jsxRuntime.jsx)(HeaderContentSection, {
        expanded: expanded,
        iconRotation: iconRotation,
        rule: rule,
        levelColor: levelColor,
        styles: styles
      })
    })
  });
};
var HeaderContentSection = function HeaderContentSection(_ref3) {
  var expanded = _ref3.expanded,
    iconRotation = _ref3.iconRotation,
    rule = _ref3.rule,
    levelColor = _ref3.levelColor,
    styles = _ref3.styles;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.headerContent,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.headerLeft,
      children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.ruleIcon, {
          backgroundColor: `${levelColor}15`
        }],
        children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: "book-outline",
          size: 16,
          color: levelColor
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.ruleTitle,
        numberOfLines: 1,
        children: rule.title
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.headerRight,
      children: [(0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: [styles.hintText, {
          color: levelColor
        }],
        children: [expanded ? 'Hide' : 'Show', " rule"]
      }), (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
        style: {
          transform: [{
            rotate: iconRotation
          }]
        },
        children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: "chevron-down",
          size: 16,
          color: levelColor
        })
      })]
    })]
  });
};
var RuleContentSection = function RuleContentSection(_ref4) {
  var expandAnim = _ref4.expandAnim,
    contentHeight = _ref4.contentHeight,
    rule = _ref4.rule,
    levelColor = _ref4.levelColor,
    styles = _ref4.styles;
  return (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
    style: [styles.contentWrapper, {
      height: contentHeight,
      opacity: expandAnim
    }],
    children: (0, _jsxRuntime.jsx)(RuleContentInnerSection, {
      rule: rule,
      levelColor: levelColor,
      styles: styles
    })
  });
};
var RuleContentInnerSection = function RuleContentInnerSection(_ref5) {
  var rule = _ref5.rule,
    levelColor = _ref5.levelColor,
    styles = _ref5.styles;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.contentContainer,
    children: [(0, _jsxRuntime.jsx)(_ContentSection.default, {
      title: "Explanation",
      content: rule.explanation,
      levelColor: levelColor,
      backgroundColor: "white",
      showIcon: true
    }), rule.examples && rule.examples.length > 0 && (0, _jsxRuntime.jsx)(_ContentSection.default, {
      title: "Examples",
      content: rule.examples.map(function (example, index) {
        return `${index + 1}. ${example.english}\n   â†’ ${example.french}`;
      }).join('\n\n'),
      levelColor: levelColor,
      backgroundColor: "#F8FAFC",
      showIcon: true,
      isItalic: false
    }), rule.rules && rule.rules.length > 0 && (0, _jsxRuntime.jsx)(_ContentSection.default, {
      title: "Rules",
      content: rule.rules.map(function (ruleItem, index) {
        return `${index + 1}. ${ruleItem}`;
      }).join('\n\n'),
      levelColor: levelColor,
      backgroundColor: "#F1F5F9",
      showIcon: true,
      isItalic: false
    })]
  });
};
var _default = exports.default = GrammarRuleContent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,