b36c9dc544f7a4854b48c2c2edf71d78
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var Lock = _interopRequireWildcard(require("../../services/lockService"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function cov_j9hn4jcv1() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\Lock\\ForgotPinScreen.js";
  var hash = "bf95a29d90975cc809c1b616e6bf7ab4f49a29b9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\Lock\\ForgotPinScreen.js",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 49,
          column: 1
        }
      },
      "1": {
        start: {
          line: 8,
          column: 26
        },
        end: {
          line: 8,
          column: 38
        }
      },
      "2": {
        start: {
          line: 9,
          column: 28
        },
        end: {
          line: 9,
          column: 40
        }
      },
      "3": {
        start: {
          line: 11,
          column: 26
        },
        end: {
          line: 18,
          column: 15
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 49
        }
      },
      "5": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 17,
          column: 5
        }
      },
      "6": {
        start: {
          line: 14,
          column: 6
        },
        end: {
          line: 14,
          column: 18
        }
      },
      "7": {
        start: {
          line: 16,
          column: 6
        },
        end: {
          line: 16,
          column: 53
        }
      },
      "8": {
        start: {
          line: 20,
          column: 25
        },
        end: {
          line: 27,
          column: 21
        }
      },
      "9": {
        start: {
          line: 21,
          column: 15
        },
        end: {
          line: 21,
          column: 46
        }
      },
      "10": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "11": {
        start: {
          line: 23,
          column: 6
        },
        end: {
          line: 23,
          column: 18
        }
      },
      "12": {
        start: {
          line: 25,
          column: 6
        },
        end: {
          line: 25,
          column: 48
        }
      },
      "13": {
        start: {
          line: 29,
          column: 2
        },
        end: {
          line: 48,
          column: 4
        }
      },
      "14": {
        start: {
          line: 52,
          column: 0
        },
        end: {
          line: 54,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 24
          },
          end: {
            line: 7,
            column: 25
          }
        },
        loc: {
          start: {
            line: 7,
            column: 41
          },
          end: {
            line: 49,
            column: 1
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 11,
            column: 38
          },
          end: {
            line: 11,
            column: 39
          }
        },
        loc: {
          start: {
            line: 11,
            column: 50
          },
          end: {
            line: 18,
            column: 3
          }
        },
        line: 11
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 37
          },
          end: {
            line: 20,
            column: 38
          }
        },
        loc: {
          start: {
            line: 20,
            column: 49
          },
          end: {
            line: 27,
            column: 3
          }
        },
        line: 20
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        }, {
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 17,
            column: 5
          }
        }],
        line: 13
      },
      "1": {
        loc: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        }, {
          start: {
            line: 24,
            column: 11
          },
          end: {
            line: 26,
            column: 5
          }
        }],
        line: 22
      },
      "2": {
        loc: {
          start: {
            line: 32,
            column: 7
          },
          end: {
            line: 32,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 7
          },
          end: {
            line: 32,
            column: 14
          }
        }, {
          start: {
            line: 32,
            column: 18
          },
          end: {
            line: 32,
            column: 85
          }
        }],
        line: 32
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bf95a29d90975cc809c1b616e6bf7ab4f49a29b9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_j9hn4jcv1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_j9hn4jcv1();
cov_j9hn4jcv1().s[0]++;
var ForgotPinScreen = function ForgotPinScreen(_ref) {
  var onReset = _ref.onReset;
  cov_j9hn4jcv1().f[0]++;
  var _ref2 = (cov_j9hn4jcv1().s[1]++, (0, _react.useState)('')),
    _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
    code = _ref3[0],
    setCode = _ref3[1];
  var _ref4 = (cov_j9hn4jcv1().s[2]++, (0, _react.useState)('')),
    _ref5 = (0, _slicedToArray2.default)(_ref4, 2),
    error = _ref5[0],
    setError = _ref5[1];
  var handleBiometric = (cov_j9hn4jcv1().s[3]++, (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    cov_j9hn4jcv1().f[1]++;
    var res = (cov_j9hn4jcv1().s[4]++, yield Lock.unlockWithBiometrics());
    cov_j9hn4jcv1().s[5]++;
    if (res.ok) {
      cov_j9hn4jcv1().b[0][0]++;
      cov_j9hn4jcv1().s[6]++;
      onReset == null || onReset();
    } else {
      cov_j9hn4jcv1().b[0][1]++;
      cov_j9hn4jcv1().s[7]++;
      setError('Biométrie indisponible ou refusée.');
    }
  }), [onReset]));
  var handleRecovery = (cov_j9hn4jcv1().s[8]++, (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    cov_j9hn4jcv1().f[2]++;
    var ok = (cov_j9hn4jcv1().s[9]++, yield Lock.verifyRecovery(code));
    cov_j9hn4jcv1().s[10]++;
    if (ok) {
      cov_j9hn4jcv1().b[1][0]++;
      cov_j9hn4jcv1().s[11]++;
      onReset == null || onReset();
    } else {
      cov_j9hn4jcv1().b[1][1]++;
      cov_j9hn4jcv1().s[12]++;
      setError('Code de récupération invalide');
    }
  }), [code, onReset]));
  cov_j9hn4jcv1().s[13]++;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: {
      flex: 1,
      alignItems: 'center',
      justifyContent: 'center',
      padding: 24
    },
    testID: "forgot-pin-screen",
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: {
        fontSize: 20,
        fontWeight: '700',
        marginBottom: 12
      },
      children: "PIN oubli\xE9"
    }), (cov_j9hn4jcv1().b[2][0]++, !!error) && (cov_j9hn4jcv1().b[2][1]++, (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: {
        color: '#DC2626',
        marginBottom: 12
      },
      children: error
    })), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      testID: "biometric-button",
      onPress: handleBiometric,
      style: {
        backgroundColor: '#10B981',
        padding: 12,
        borderRadius: 8,
        marginBottom: 12
      },
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: {
          color: 'white',
          fontWeight: '700'
        },
        children: "Utiliser la biom\xE9trie"
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
      value: code,
      onChangeText: setCode,
      placeholder: "Code de r\xE9cup\xE9ration",
      autoCapitalize: "characters",
      style: {
        width: '80%',
        borderWidth: 1,
        borderColor: '#E5E7EB',
        borderRadius: 8,
        padding: 12,
        marginBottom: 8
      },
      testID: "recovery-input"
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      testID: "recovery-submit",
      onPress: handleRecovery,
      style: {
        backgroundColor: '#3B82F6',
        padding: 12,
        borderRadius: 8
      },
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: {
          color: 'white',
          fontWeight: '700'
        },
        children: "Valider"
      })
    })]
  });
};
cov_j9hn4jcv1().s[14]++;
ForgotPinScreen.propTypes = {
  onReset: _propTypes.default.func.isRequired
};
var _default = exports.default = ForgotPinScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,