a974c5dbbbb4d6cb89407f3dc72dc111
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _vectorIcons = require("@expo/vector-icons");
var _HeroCard = _interopRequireDefault(require("../../../../components/ui/HeroCard"));
var _RevealButton = _interopRequireDefault(require("../../../../components/ui/RevealButton"));
var _style = _interopRequireDefault(require("./style"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
var ReadingText = function ReadingText(_ref) {
  var exercise = _ref.exercise,
    textExpanded = _ref.textExpanded,
    onToggleExpand = _ref.onToggleExpand,
    _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? "#3b82f6" : _ref$levelColor;
  var styles = (0, _style.default)(levelColor);
  if (!exercise) return null;
  var fullText = exercise.text || "";
  var wordCount = fullText.split(' ').filter(function (word) {
    return word.length > 0;
  }).length;
  var estimatedReadingTime = Math.ceil(wordCount / 200);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsx)(_HeroCard.default, {
      content: exercise.title || "Reading Text",
      fontSize: 24,
      levelColor: levelColor,
      showUnderline: false,
      icon: "book-outline"
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.infoContainer,
      children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.infoItem,
        children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: "time-outline",
          size: 16,
          color: levelColor
        }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: [styles.infoText, {
            color: levelColor
          }],
          children: ["~", estimatedReadingTime, " min read"]
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.infoItem,
        children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: "text-outline",
          size: 16,
          color: levelColor
        }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: [styles.infoText, {
            color: levelColor
          }],
          children: [wordCount, " words"]
        })]
      })]
    }), (0, _jsxRuntime.jsx)(_RevealButton.default, {
      isRevealed: textExpanded,
      revealedContent: fullText,
      revealText: "\uD83D\uDCD6 Read Full Text",
      hideText: "\uD83D\uDCD6 Collapse Text",
      onToggle: onToggleExpand,
      levelColor: levelColor,
      contentColor: "#374151",
      contentStyle: {
        fontSize: 16,
        lineHeight: 24,
        textAlign: 'justify'
      }
    })]
  });
};
ReadingText.propTypes = {
  exercise: _propTypes.default.shape({
    title: _propTypes.default.string,
    text: _propTypes.default.string
  }).isRequired,
  textExpanded: _propTypes.default.bool.isRequired,
  onToggleExpand: _propTypes.default.func.isRequired,
  levelColor: _propTypes.default.string
};
var _default = exports.default = ReadingText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,