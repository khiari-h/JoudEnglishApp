{"version":3,"names":["_errorCorrectionA1Full","_interopRequireDefault","require","_errorCorrectionA1Identify","_errorCorrectionA1MultipleChoice","cov_26helk7ymj","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","_coverageSchema","coverage","actualCoverage","allExercises","concat","_toConsumableArray2","default","errorCorrectionA1Full","errorCorrectionA1Identify","errorCorrectionA1MultipleChoice","sort","a","categoryId","typeOrder","errorCorrectionA1","level","totalExercises","length","statistics","full","identify","multiple_choice","byCategory","count","categories","id","description","exerciseCount","difficulty","color","exercises","getExercisesByCategory","filter","exercise","getExercisesByType","getExercisesByCategoryAndType","validateStructure","requiredFields","validTypes","every","hasRequiredFields","field","Object","prototype","hasOwnProperty","call","hasValidType","includes","hasTypeSpecificFields","choices","correctChoiceIndex","errorPositions","Array","isArray","_default","exports"],"sources":["index.js"],"sourcesContent":["// src/data/exercises/errorCorrection/A1/index.js\r\n\r\nimport errorCorrectionA1Full from './categories/errorCorrectionA1Full';\r\nimport errorCorrectionA1Identify from './categories/errorCorrectionA1Identify';\r\nimport errorCorrectionA1MultipleChoice from './categories/errorCorrectionA1MultipleChoice';\r\n\r\n// Combine all exercises from the 3 files\r\nconst allExercises = [\r\n  ...errorCorrectionA1Full,\r\n  ...errorCorrectionA1Identify,\r\n  ...errorCorrectionA1MultipleChoice\r\n];\r\n\r\n// Sort exercises by categoryId to maintain logical order\r\nallExercises.sort((a, b) => {\r\n  if (a.categoryId !== b.categoryId) {\r\n    return a.categoryId - b.categoryId;\r\n  }\r\n  // Within same category, order by type: full, identify, multiple_choice\r\n  const typeOrder = { 'full': 1, 'identify': 2, 'multiple_choice': 3 };\r\n  return typeOrder[a.type] - typeOrder[b.type];\r\n});\r\n\r\nconst errorCorrectionA1 = {\r\n  level: \"A1\",\r\n  totalExercises: allExercises.length,\r\n\r\n  // Statistics by type\r\n  statistics: {\r\n    full: errorCorrectionA1Full.length,\r\n    identify: errorCorrectionA1Identify.length,\r\n    multiple_choice: errorCorrectionA1MultipleChoice.length,\r\n    byCategory: {\r\n      1: { name: \"Articles\", count: 5 },        // 2 full + 2 identify + 1 multiple_choice\r\n      2: { name: \"Verb to Be\", count: 5 },      // 2 full + 2 identify + 1 multiple_choice\r\n      3: { name: \"Simple Present\", count: 5 },  // 1 full + 2 identify + 2 multiple_choice\r\n      4: { name: \"Pronouns\", count: 4 },        // 1 full + 2 identify + 1 multiple_choice\r\n      5: { name: \"Sentence Structure\", count: 5 } // 1 full + 2 identify + 2 multiple_choice\r\n    }\r\n  },\r\n\r\n  // Categories metadata (maintained for compatibility)\r\n  categories: [\r\n    {\r\n      id: 1,\r\n      name: \"Articles\",\r\n      description: \"Practicing correct usage of 'a', 'an', and 'the'\",\r\n      exerciseCount: 5,\r\n      difficulty: \"Basic\",\r\n      color: \"#3b82f6\"\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"Verb to Be\",\r\n      description: \"Correcting errors with the verb 'to be'\",\r\n      exerciseCount: 5,\r\n      difficulty: \"Basic\", \r\n      color: \"#10b981\"\r\n    },\r\n    {\r\n      id: 3,\r\n      name: \"Simple Present\",\r\n      description: \"Fixing mistakes in simple present tense\",\r\n      exerciseCount: 5,\r\n      difficulty: \"Basic\",\r\n      color: \"#f59e0b\"\r\n    },\r\n    {\r\n      id: 4,\r\n      name: \"Pronouns\",\r\n      description: \"Identifying and correcting pronoun errors\",\r\n      exerciseCount: 4,\r\n      difficulty: \"Basic\",\r\n      color: \"#8b5cf6\"\r\n    },\r\n    {\r\n      id: 5,\r\n      name: \"Sentence Structure\",\r\n      description: \"Improving basic sentence construction\",\r\n      exerciseCount: 5,\r\n      difficulty: \"Basic\",\r\n      color: \"#ef4444\"\r\n    },\r\n  ],\r\n\r\n  // All exercises combined and sorted\r\n  exercises: allExercises,\r\n\r\n  // Helper methods for filtering exercises\r\n  getExercisesByCategory: (categoryId) => {\r\n    return allExercises.filter(exercise => exercise.categoryId === categoryId);\r\n  },\r\n\r\n  getExercisesByType: (type) => {\r\n    return allExercises.filter(exercise => exercise.type === type);\r\n  },\r\n\r\n  getExercisesByCategoryAndType: (categoryId, type) => {\r\n    return allExercises.filter(exercise => \r\n      exercise.categoryId === categoryId && exercise.type === type\r\n    );\r\n  },\r\n\r\n  // Validation\r\n  validateStructure: () => {\r\n    const requiredFields = ['categoryId', 'type', 'text', 'correctedText', 'hint', 'explanation'];\r\n    const validTypes = ['full', 'identify', 'multiple_choice'];\r\n\r\n    return allExercises.every(exercise => {\r\n      // Check required fields\r\n      const hasRequiredFields = requiredFields.every(field => \r\n        Object.prototype.hasOwnProperty.call(exercise, field) && exercise[field] !== undefined\r\n      );\r\n\r\n      // Check valid type\r\n      const hasValidType = validTypes.includes(exercise.type);\r\n\r\n      // Check type-specific fields\r\n      let hasTypeSpecificFields = true;\r\n      if (exercise.type === 'multiple_choice') {\r\n        hasTypeSpecificFields = exercise.choices && exercise.correctChoiceIndex !== undefined;\r\n      } else {\r\n        hasTypeSpecificFields = exercise.errorPositions && Array.isArray(exercise.errorPositions);\r\n      }\r\n\r\n      return hasRequiredFields && hasValidType && hasTypeSpecificFields;\r\n    });\r\n  }\r\n};\r\n\r\n// Validate structure on export\r\nif (!errorCorrectionA1.validateStructure()) {\r\n  // empty: structure invalid, handle if needed\r\n}\r\n\r\nexport default errorCorrectionA1;\r\n"],"mappings":";;;;;;AAEA,IAAAA,sBAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,0BAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,gCAAA,GAAAH,sBAAA,CAAAC,OAAA;AAA2F,SAAAG,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;IAAA;IAAAE,KAAA;MAAA;QAAAC,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;IAAA;IAAAO,SAAA;MAAA;QAAAD,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;UAAAR,GAAA;YAAAF,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;QAAA;QAAAV,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;UAAAR,GAAA;YAAAF,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;QAAA;QAAAV,IAAA;MAAA;IAAA;IAAAW,CAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;IAAAC,CAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;IAAAC,CAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;IAAAC,eAAA;IAAArB,IAAA;EAAA;EAAA,IAAAsB,QAAA,GAAArB,MAAA,CAAAE,GAAA,MAAAF,MAAA,CAAAE,GAAA;EAAA,KAAAmB,QAAA,CAAAvB,IAAA,KAAAuB,QAAA,CAAAvB,IAAA,EAAAC,IAAA,KAAAA,IAAA;IAAAsB,QAAA,CAAAvB,IAAA,IAAAK,YAAA;EAAA;EAAA,IAAAmB,cAAA,GAAAD,QAAA,CAAAvB,IAAA;EAAA;IAAAD,cAAA,YAAAA,CAAA;MAAA,OAAAyB,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAzB,cAAA;AAG3F,IAAM0B,YAAY,IAAA1B,cAAA,GAAAoB,CAAA,UAAAO,MAAA,KAAAC,mBAAA,CAAAC,OAAA,EACbC,8BAAqB,OAAAF,mBAAA,CAAAC,OAAA,EACrBE,kCAAyB,OAAAH,mBAAA,CAAAC,OAAA,EACzBG,wCAA+B,GACnC;AAAChC,cAAA,GAAAoB,CAAA;AAGFM,YAAY,CAACO,IAAI,CAAC,UAACC,CAAC,EAAEZ,CAAC,EAAK;EAAAtB,cAAA,GAAAqB,CAAA;EAAArB,cAAA,GAAAoB,CAAA;EAC1B,IAAIc,CAAC,CAACC,UAAU,KAAKb,CAAC,CAACa,UAAU,EAAE;IAAAnC,cAAA,GAAAsB,CAAA;IAAAtB,cAAA,GAAAoB,CAAA;IACjC,OAAOc,CAAC,CAACC,UAAU,GAAGb,CAAC,CAACa,UAAU;EACpC,CAAC;IAAAnC,cAAA,GAAAsB,CAAA;EAAA;EAED,IAAMc,SAAS,IAAApC,cAAA,GAAAoB,CAAA,OAAG;IAAE,MAAM,EAAE,CAAC;IAAE,UAAU,EAAE,CAAC;IAAE,iBAAiB,EAAE;EAAE,CAAC;EAACpB,cAAA,GAAAoB,CAAA;EACrE,OAAOgB,SAAS,CAACF,CAAC,CAACjB,IAAI,CAAC,GAAGmB,SAAS,CAACd,CAAC,CAACL,IAAI,CAAC;AAC9C,CAAC,CAAC;AAEF,IAAMoB,iBAAiB,IAAArC,cAAA,GAAAoB,CAAA,OAAG;EACxBkB,KAAK,EAAE,IAAI;EACXC,cAAc,EAAEb,YAAY,CAACc,MAAM;EAGnCC,UAAU,EAAE;IACVC,IAAI,EAAEZ,8BAAqB,CAACU,MAAM;IAClCG,QAAQ,EAAEZ,kCAAyB,CAACS,MAAM;IAC1CI,eAAe,EAAEZ,wCAA+B,CAACQ,MAAM;IACvDK,UAAU,EAAE;MACV,CAAC,EAAE;QAAEhC,IAAI,EAAE,UAAU;QAAEiC,KAAK,EAAE;MAAE,CAAC;MACjC,CAAC,EAAE;QAAEjC,IAAI,EAAE,YAAY;QAAEiC,KAAK,EAAE;MAAE,CAAC;MACnC,CAAC,EAAE;QAAEjC,IAAI,EAAE,gBAAgB;QAAEiC,KAAK,EAAE;MAAE,CAAC;MACvC,CAAC,EAAE;QAAEjC,IAAI,EAAE,UAAU;QAAEiC,KAAK,EAAE;MAAE,CAAC;MACjC,CAAC,EAAE;QAAEjC,IAAI,EAAE,oBAAoB;QAAEiC,KAAK,EAAE;MAAE;IAC5C;EACF,CAAC;EAGDC,UAAU,EAAE,CACV;IACEC,EAAE,EAAE,CAAC;IACLnC,IAAI,EAAE,UAAU;IAChBoC,WAAW,EAAE,kDAAkD;IAC/DC,aAAa,EAAE,CAAC;IAChBC,UAAU,EAAE,OAAO;IACnBC,KAAK,EAAE;EACT,CAAC,EACD;IACEJ,EAAE,EAAE,CAAC;IACLnC,IAAI,EAAE,YAAY;IAClBoC,WAAW,EAAE,yCAAyC;IACtDC,aAAa,EAAE,CAAC;IAChBC,UAAU,EAAE,OAAO;IACnBC,KAAK,EAAE;EACT,CAAC,EACD;IACEJ,EAAE,EAAE,CAAC;IACLnC,IAAI,EAAE,gBAAgB;IACtBoC,WAAW,EAAE,yCAAyC;IACtDC,aAAa,EAAE,CAAC;IAChBC,UAAU,EAAE,OAAO;IACnBC,KAAK,EAAE;EACT,CAAC,EACD;IACEJ,EAAE,EAAE,CAAC;IACLnC,IAAI,EAAE,UAAU;IAChBoC,WAAW,EAAE,2CAA2C;IACxDC,aAAa,EAAE,CAAC;IAChBC,UAAU,EAAE,OAAO;IACnBC,KAAK,EAAE;EACT,CAAC,EACD;IACEJ,EAAE,EAAE,CAAC;IACLnC,IAAI,EAAE,oBAAoB;IAC1BoC,WAAW,EAAE,uCAAuC;IACpDC,aAAa,EAAE,CAAC;IAChBC,UAAU,EAAE,OAAO;IACnBC,KAAK,EAAE;EACT,CAAC,CACF;EAGDC,SAAS,EAAE3B,YAAY;EAGvB4B,sBAAsB,EAAE,SAAxBA,sBAAsBA,CAAGnB,UAAU,EAAK;IAAAnC,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACtC,OAAOM,YAAY,CAAC6B,MAAM,CAAC,UAAAC,QAAQ,EAAI;MAAAxD,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MAAA,OAAAoC,QAAQ,CAACrB,UAAU,KAAKA,UAAU;IAAD,CAAC,CAAC;EAC5E,CAAC;EAEDsB,kBAAkB,EAAE,SAApBA,kBAAkBA,CAAGxC,IAAI,EAAK;IAAAjB,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAC5B,OAAOM,YAAY,CAAC6B,MAAM,CAAC,UAAAC,QAAQ,EAAI;MAAAxD,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MAAA,OAAAoC,QAAQ,CAACvC,IAAI,KAAKA,IAAI;IAAD,CAAC,CAAC;EAChE,CAAC;EAEDyC,6BAA6B,EAAE,SAA/BA,6BAA6BA,CAAGvB,UAAU,EAAElB,IAAI,EAAK;IAAAjB,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACnD,OAAOM,YAAY,CAAC6B,MAAM,CAAC,UAAAC,QAAQ,EACjC;MAAAxD,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MAAA,QAAApB,cAAA,GAAAsB,CAAA,UAAAkC,QAAQ,CAACrB,UAAU,KAAKA,UAAU,MAAAnC,cAAA,GAAAsB,CAAA,UAAIkC,QAAQ,CAACvC,IAAI,KAAKA,IAAI;IAAD,CAC7D,CAAC;EACH,CAAC;EAGD0C,iBAAiB,EAAE,SAAnBA,iBAAiBA,CAAA,EAAQ;IAAA3D,cAAA,GAAAqB,CAAA;IACvB,IAAMuC,cAAc,IAAA5D,cAAA,GAAAoB,CAAA,QAAG,CAAC,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,eAAe,EAAE,MAAM,EAAE,aAAa,CAAC;IAC7F,IAAMyC,UAAU,IAAA7D,cAAA,GAAAoB,CAAA,QAAG,CAAC,MAAM,EAAE,UAAU,EAAE,iBAAiB,CAAC;IAACpB,cAAA,GAAAoB,CAAA;IAE3D,OAAOM,YAAY,CAACoC,KAAK,CAAC,UAAAN,QAAQ,EAAI;MAAAxD,cAAA,GAAAqB,CAAA;MAEpC,IAAM0C,iBAAiB,IAAA/D,cAAA,GAAAoB,CAAA,QAAGwC,cAAc,CAACE,KAAK,CAAC,UAAAE,KAAK,EAClD;QAAAhE,cAAA,GAAAqB,CAAA;QAAArB,cAAA,GAAAoB,CAAA;QAAA,QAAApB,cAAA,GAAAsB,CAAA,UAAA2C,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACZ,QAAQ,EAAEQ,KAAK,CAAC,MAAAhE,cAAA,GAAAsB,CAAA,UAAIkC,QAAQ,CAACQ,KAAK,CAAC,KAAK7C,SAAS;MAAD,CACvF,CAAC;MAGD,IAAMkD,YAAY,IAAArE,cAAA,GAAAoB,CAAA,QAAGyC,UAAU,CAACS,QAAQ,CAACd,QAAQ,CAACvC,IAAI,CAAC;MAGvD,IAAIsD,qBAAqB,IAAAvE,cAAA,GAAAoB,CAAA,QAAG,IAAI;MAACpB,cAAA,GAAAoB,CAAA;MACjC,IAAIoC,QAAQ,CAACvC,IAAI,KAAK,iBAAiB,EAAE;QAAAjB,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACvCmD,qBAAqB,GAAG,CAAAvE,cAAA,GAAAsB,CAAA,UAAAkC,QAAQ,CAACgB,OAAO,MAAAxE,cAAA,GAAAsB,CAAA,UAAIkC,QAAQ,CAACiB,kBAAkB,KAAKtD,SAAS;MACvF,CAAC,MAAM;QAAAnB,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACLmD,qBAAqB,GAAG,CAAAvE,cAAA,GAAAsB,CAAA,UAAAkC,QAAQ,CAACkB,cAAc,MAAA1E,cAAA,GAAAsB,CAAA,UAAIqD,KAAK,CAACC,OAAO,CAACpB,QAAQ,CAACkB,cAAc,CAAC;MAC3F;MAAC1E,cAAA,GAAAoB,CAAA;MAED,OAAO,CAAApB,cAAA,GAAAsB,CAAA,UAAAyC,iBAAiB,MAAA/D,cAAA,GAAAsB,CAAA,UAAI+C,YAAY,MAAArE,cAAA,GAAAsB,CAAA,UAAIiD,qBAAqB;IACnE,CAAC,CAAC;EACJ;AACF,CAAC;AAACvE,cAAA,GAAAoB,CAAA;AAGF,IAAI,CAACiB,iBAAiB,CAACsB,iBAAiB,CAAC,CAAC,EAAE;EAAA3D,cAAA,GAAAsB,CAAA;AAE5C,CAAC;EAAAtB,cAAA,GAAAsB,CAAA;AAAA;AAAA,IAAAuD,QAAA,GAAAC,OAAA,CAAAjD,OAAA,GAEcQ,iBAAiB","ignoreList":[]}