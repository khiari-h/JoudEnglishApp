db0cafe5b6c6df82cc370a1ecc882146
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn()
  };
});
_getJestObj().mock('../../src/utils/eventBus', function () {
  return {
    emit: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useRevisionSettings = require("../../src/hooks/useRevisionSettings");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useRevisionSettings', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('Initialisation', function () {
    it('devrait initialiser avec les préférences par défaut', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionSettings.useRevisionSettings)();
        }),
        result = _renderHook.result,
        waitForNextUpdate = _renderHook.waitForNextUpdate;
      expect(result.current.isLoading).toBe(true);
      yield waitForNextUpdate();
      expect(result.current.preferences).toEqual({
        isDisabled: false,
        nextRevisionAt: 50,
        frequency: 50,
        questionsCount: 10
      });
      expect(result.current.isLoading).toBe(false);
    }));
    it('devrait charger les préférences sauvegardées', (0, _asyncToGenerator2.default)(function* () {
      var mockPreferences = {
        isDisabled: true,
        nextRevisionAt: 100,
        frequency: 75,
        questionsCount: 15
      };
      _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify(mockPreferences));
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionSettings.useRevisionSettings)();
        }),
        result = _renderHook2.result,
        waitForNextUpdate = _renderHook2.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.preferences).toEqual({
        isDisabled: true,
        nextRevisionAt: 100,
        frequency: 75,
        questionsCount: 15
      });
    }));
    it('devrait gérer les données corrompues', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue('invalid json');
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionSettings.useRevisionSettings)();
        }),
        result = _renderHook3.result,
        waitForNextUpdate = _renderHook3.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.preferences).toEqual({
        isDisabled: false,
        nextRevisionAt: 50,
        frequency: 50,
        questionsCount: 10
      });
    }));
    it('devrait gérer les erreurs de chargement', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockRejectedValue(new Error('Storage error'));
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionSettings.useRevisionSettings)();
        }),
        result = _renderHook4.result,
        waitForNextUpdate = _renderHook4.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.preferences).toEqual({
        isDisabled: false,
        nextRevisionAt: 50,
        frequency: 50,
        questionsCount: 10
      });
      expect(result.current.isLoading).toBe(false);
    }));
  });
  describe('Mise à jour des préférences', function () {
    it('devrait mettre à jour les préférences', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionSettings.useRevisionSettings)();
        }),
        result = _renderHook5.result,
        waitForNextUpdate = _renderHook5.waitForNextUpdate;
      yield waitForNextUpdate();
      var newPrefs = {
        frequency: 100
      };
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.updatePreferences(newPrefs);
        expect(success).toBe(true);
      }));
      expect(result.current.preferences.frequency).toBe(100);
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('revision_preferences', expect.stringContaining('"frequency":100'));
    }));
    it('devrait émettre un événement lors de la mise à jour', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionSettings.useRevisionSettings)();
        }),
        result = _renderHook6.result,
        waitForNextUpdate = _renderHook6.waitForNextUpdate;
      yield waitForNextUpdate();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.updatePreferences({
          frequency: 75
        });
      }));
      var eventBus = require('../../src/utils/eventBus');
      expect(eventBus.emit).toHaveBeenCalledWith('settings-updated', expect.objectContaining({
        frequency: 75
      }));
    }));
    it('devrait ajouter un timestamp lors de la sauvegarde', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      jest.spyOn(Date, 'now').mockReturnValue(1640995200000);
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionSettings.useRevisionSettings)();
        }),
        result = _renderHook7.result,
        waitForNextUpdate = _renderHook7.waitForNextUpdate;
      yield waitForNextUpdate();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.updatePreferences({
          frequency: 60
        });
      }));
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('revision_preferences', expect.stringContaining('"lastUpdate":1640995200000'));
      jest.restoreAllMocks();
    }));
    it('devrait gérer les erreurs de sauvegarde', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      _asyncStorage.default.setItem.mockRejectedValue(new Error('Save error'));
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionSettings.useRevisionSettings)();
        }),
        result = _renderHook8.result,
        waitForNextUpdate = _renderHook8.waitForNextUpdate;
      yield waitForNextUpdate();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.updatePreferences({
          frequency: 80
        });
        expect(success).toBeNull();
      }));
      expect(result.current.preferences.frequency).toBe(50);
    }));
  });
  describe('Activation des révisions', function () {
    it('devrait activer les révisions avec les paramètres par défaut', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify({
        isDisabled: true,
        frequency: 100
      }));
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionSettings.useRevisionSettings)();
        }),
        result = _renderHook9.result,
        waitForNextUpdate = _renderHook9.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.preferences.isDisabled).toBe(true);
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.enableRevisions();
        expect(success).toBe(true);
      }));
      expect(result.current.preferences.isDisabled).toBe(false);
      expect(result.current.preferences.frequency).toBe(50);
      expect(result.current.preferences.questionsCount).toBe(10);
      expect(result.current.preferences.nextRevisionAt).toBe(50);
    }));
    it('devrait activer les révisions avec des paramètres personnalisés', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook0 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionSettings.useRevisionSettings)();
        }),
        result = _renderHook0.result,
        waitForNextUpdate = _renderHook0.waitForNextUpdate;
      yield waitForNextUpdate();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.enableRevisions(75, 12);
      }));
      expect(result.current.preferences.isDisabled).toBe(false);
      expect(result.current.preferences.frequency).toBe(75);
      expect(result.current.preferences.questionsCount).toBe(12);
      expect(result.current.preferences.nextRevisionAt).toBe(75);
    }));
  });
  describe('Désactivation des révisions', function () {
    it('devrait désactiver les révisions', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook1 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionSettings.useRevisionSettings)();
        }),
        result = _renderHook1.result,
        waitForNextUpdate = _renderHook1.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.preferences.isDisabled).toBe(false);
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.disableRevisions();
        expect(success).toBe(true);
      }));
      expect(result.current.preferences.isDisabled).toBe(true);
    }));
  });
  describe('Mise à jour de la fréquence', function () {
    it('devrait mettre à jour la fréquence et reset le target', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify({
        frequency: 50,
        nextRevisionAt: 100
      }));
      var _renderHook10 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionSettings.useRevisionSettings)();
        }),
        result = _renderHook10.result,
        waitForNextUpdate = _renderHook10.waitForNextUpdate;
      yield waitForNextUpdate();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.updateFrequency(80);
        expect(success).toBe(true);
      }));
      expect(result.current.preferences.frequency).toBe(80);
      expect(result.current.preferences.nextRevisionAt).toBe(80);
    }));
  });
  describe('Reset du target de révision', function () {
    it('devrait calculer le prochain target basé sur les mots appris', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify({
        frequency: 50,
        nextRevisionAt: 25
      }));
      var _renderHook11 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionSettings.useRevisionSettings)();
        }),
        result = _renderHook11.result,
        waitForNextUpdate = _renderHook11.waitForNextUpdate;
      yield waitForNextUpdate();
      var wordsLearned = 30;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.resetToNextTarget(wordsLearned);
        expect(success).toBe(true);
      }));
      expect(result.current.preferences.nextRevisionAt).toBe(80);
    }));
  });
  describe('Préservation des données existantes', function () {
    it('devrait préserver les données non modifiées lors des mises à jour', (0, _asyncToGenerator2.default)(function* () {
      var initialPrefs = {
        isDisabled: false,
        nextRevisionAt: 75,
        frequency: 60,
        questionsCount: 12,
        customField: 'preserved'
      };
      _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify(initialPrefs));
      var _renderHook12 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionSettings.useRevisionSettings)();
        }),
        result = _renderHook12.result,
        waitForNextUpdate = _renderHook12.waitForNextUpdate;
      yield waitForNextUpdate();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.updatePreferences({
          frequency: 80
        });
      }));
      expect(result.current.preferences.frequency).toBe(80);
      expect(result.current.preferences.questionsCount).toBe(12);
      expect(result.current.preferences.customField).toBe('preserved');
    }));
  });
  describe('Gestion des valeurs manquantes', function () {
    it('devrait utiliser les valeurs par défaut pour les champs manquants', (0, _asyncToGenerator2.default)(function* () {
      var incompletePrefs = {
        isDisabled: true
      };
      _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify(incompletePrefs));
      var _renderHook13 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionSettings.useRevisionSettings)();
        }),
        result = _renderHook13.result,
        waitForNextUpdate = _renderHook13.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.preferences).toEqual({
        isDisabled: true,
        nextRevisionAt: 50,
        frequency: 50,
        questionsCount: 10
      });
    }));
  });
  describe('Intégration avec eventBus', function () {
    it('devrait gérer l\'absence d\'eventBus gracieusement', (0, _asyncToGenerator2.default)(function* () {
      jest.doMock('../../src/utils/eventBus', function () {
        throw new Error('EventBus not available');
      });
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook14 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionSettings.useRevisionSettings)();
        }),
        result = _renderHook14.result,
        waitForNextUpdate = _renderHook14.waitForNextUpdate;
      yield waitForNextUpdate();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.updatePreferences({
          frequency: 70
        });
        expect(success).toBe(true);
      }));
      expect(result.current.preferences.frequency).toBe(70);
    }));
  });
  describe('Cas limites', function () {
    it('devrait gérer les valeurs nulles et undefined', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify({
        isDisabled: null,
        nextRevisionAt: undefined,
        frequency: 0,
        questionsCount: -1
      }));
      var _renderHook15 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionSettings.useRevisionSettings)();
        }),
        result = _renderHook15.result,
        waitForNextUpdate = _renderHook15.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.preferences).toEqual({
        isDisabled: false,
        nextRevisionAt: 50,
        frequency: 50,
        questionsCount: 10
      });
    }));
    it('devrait gérer les types de données incorrects', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify({
        isDisabled: 'true',
        nextRevisionAt: '100',
        frequency: [],
        questionsCount: {}
      }));
      var _renderHook16 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionSettings.useRevisionSettings)();
        }),
        result = _renderHook16.result,
        waitForNextUpdate = _renderHook16.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.preferences.isDisabled).toBe(false);
      expect(result.current.preferences.nextRevisionAt).toBe(50);
      expect(result.current.preferences.frequency).toBe(50);
      expect(result.current.preferences.questionsCount).toBe(10);
    }));
  });
  describe('Stabilité des fonctions', function () {
    it('devrait maintenir la stabilité des fonctions entre les renders', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook17 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionSettings.useRevisionSettings)();
        }),
        result = _renderHook17.result,
        waitForNextUpdate = _renderHook17.waitForNextUpdate,
        rerender = _renderHook17.rerender;
      yield waitForNextUpdate();
      var initialFunctions = {
        enableRevisions: result.current.enableRevisions,
        disableRevisions: result.current.disableRevisions,
        updateFrequency: result.current.updateFrequency,
        updatePreferences: result.current.updatePreferences,
        resetToNextTarget: result.current.resetToNextTarget
      };
      rerender();
      expect(result.current.enableRevisions).toBe(initialFunctions.enableRevisions);
      expect(result.current.disableRevisions).toBe(initialFunctions.disableRevisions);
      expect(result.current.updateFrequency).toBe(initialFunctions.updateFrequency);
      expect(result.current.updatePreferences).toBe(initialFunctions.updatePreferences);
      expect(result.current.resetToNextTarget).toBe(initialFunctions.resetToNextTarget);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,