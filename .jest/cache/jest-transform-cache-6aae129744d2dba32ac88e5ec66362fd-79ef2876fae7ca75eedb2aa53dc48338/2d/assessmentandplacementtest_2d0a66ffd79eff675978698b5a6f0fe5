b65506a1ecd37850ee44abb068facaaa
var createMockUseAssessment = function createMockUseAssessment() {
  var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return Object.assign({
    currentSection: {
      id: 'grammar',
      title: 'Grammaire'
    },
    currentQuestionIndex: 0,
    selectedAnswer: null,
    showFeedback: false,
    testCompleted: false,
    userAnswers: [],
    loaded: true,
    currentQuestion: {
      id: 'q1',
      text: 'Question d\'évaluation simulée',
      options: ['A', 'B', 'C', 'D'],
      correct: 'A'
    },
    totalSections: 3,
    totalQuestionsInSection: 10,
    handleSelectAnswer: jest.fn(),
    validateAnswer: jest.fn(),
    tryAgain: jest.fn(),
    handleNext: jest.fn(function () {
      return {
        completed: false
      };
    }),
    handlePrevious: jest.fn(),
    saveAssessmentResults: jest.fn(),
    resetAssessment: jest.fn(),
    canGoToPrevious: false,
    isLastQuestionInSection: false,
    stats: {
      correctAnswers: 7,
      totalQuestions: 10,
      totalSections: 3,
      answeredInCurrentSection: 1
    },
    display: {
      currentSectionIndex: 0,
      sectionTitle: 'Grammaire',
      questionNumber: 1
    }
  }, overrides);
};
_getJestObj().mock('expo-font', function () {
  return {
    useFonts: function useFonts() {
      return [true];
    }
  };
});
_getJestObj().mock('expo-splash-screen', function () {
  return {
    hideAsync: jest.fn().mockResolvedValue(undefined)
  };
});
_getJestObj().mock('../../src/hooks/useRouteActivityTracker', function () {
  return jest.fn();
});
_getJestObj().mock('../../src/hooks/useLastActivity', function () {
  return {
    __esModule: true,
    default: function _default() {
      return {
        saveActivity: jest.fn()
      };
    }
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  var actualNav = jest.requireActual('@react-navigation/native');
  return Object.assign({}, actualNav, {
    useNavigation: function useNavigation() {
      return {
        navigate: mockNavigate,
        goBack: mockGoBack
      };
    },
    useRoute: function useRoute() {
      return {
        params: {},
        name: 'levelAssessment'
      };
    }
  });
});
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn(),
      replace: jest.fn()
    }
  };
});
_getJestObj().mock('../../src/utils/assessment/assessmentDataHelper', function () {
  return {
    getLevelColor: jest.fn(function () {
      return '#007AFF';
    })
  };
});
_getJestObj().mock('../../src/components/layout/Container', function () {
  return function MockContainer(_ref) {
    var children = _ref.children,
      testID = _ref.testID;
    return (0, _jsxRuntime.jsx)("div", {
      testID: testID || 'container',
      children: children
    });
  };
});
_getJestObj().mock('../../src/screens/exercises/level-assessment/hooks/useAssessment', function () {
  return jest.fn(function () {
    return createMockUseAssessment();
  });
});
_getJestObj().mock('../../src/screens/exercises/level-assessment/AssessmentHeader', function () {
  return function MockAssessmentHeader(_ref2) {
    var level = _ref2.level,
      onBackPress = _ref2.onBackPress;
    return (0, _jsxRuntime.jsxs)("div", {
      testID: "assessment-header",
      children: [(0, _jsxRuntime.jsx)("button", {
        testID: "back-btn",
        onPress: onBackPress,
        children: "Retour"
      }), (0, _jsxRuntime.jsxs)("text", {
        testID: "header-level",
        children: ["Niveau ", level]
      })]
    });
  };
});
_getJestObj().mock('../../src/screens/exercises/level-assessment/AssessmentProgress', function () {
  return function MockAssessmentProgress(_ref3) {
    var currentQuestion = _ref3.currentQuestion,
      totalQuestions = _ref3.totalQuestions;
    return (0, _jsxRuntime.jsx)("div", {
      testID: "assessment-progress",
      children: (0, _jsxRuntime.jsxs)("text", {
        testID: "progress-text",
        children: ["Question ", currentQuestion, " sur ", totalQuestions]
      })
    });
  };
});
_getJestObj().mock('../../src/screens/exercises/level-assessment/AssessmentQuestion', function () {
  return function MockAssessmentQuestion(_ref4) {
    var question = _ref4.question,
      onSelectAnswer = _ref4.onSelectAnswer;
    return (0, _jsxRuntime.jsxs)("div", {
      testID: "assessment-question",
      children: [(0, _jsxRuntime.jsx)("text", {
        testID: "question-text",
        children: question == null ? void 0 : question.text
      }), (0, _jsxRuntime.jsx)("button", {
        testID: "answer-a",
        onPress: function onPress() {
          return onSelectAnswer('A');
        },
        children: "A"
      }), (0, _jsxRuntime.jsx)("button", {
        testID: "answer-b",
        onPress: function onPress() {
          return onSelectAnswer('B');
        },
        children: "B"
      })]
    });
  };
});
_getJestObj().mock('../../src/screens/exercises/level-assessment/AssessmentNavigation', function () {
  return function MockAssessmentNavigation(_ref5) {
    var onValidateAnswer = _ref5.onValidateAnswer,
      onNext = _ref5.onNext;
    return (0, _jsxRuntime.jsxs)("div", {
      testID: "assessment-navigation",
      children: [(0, _jsxRuntime.jsx)("button", {
        testID: "validate-btn",
        onPress: onValidateAnswer,
        children: "Valider"
      }), (0, _jsxRuntime.jsx)("button", {
        testID: "next-btn",
        onPress: onNext,
        children: "Suivant"
      })]
    });
  };
});
_getJestObj().mock('../../src/screens/exercises/level-assessment/AssessmentResults', function () {
  return function MockAssessmentResults(_ref6) {
    var userScore = _ref6.userScore,
      onContinue = _ref6.onContinue,
      onRetry = _ref6.onRetry;
    var getRecommendedLevel = function getRecommendedLevel(score) {
      var percentage = (score == null ? void 0 : score.correctAnswers) / (score == null ? void 0 : score.totalQuestions) * 100 || 50;
      if (percentage >= 85) return 'B2';
      if (percentage >= 70) return 'B1';
      if (percentage >= 50) return 'A2';
      return 'A1';
    };
    return (0, _jsxRuntime.jsxs)("div", {
      testID: "assessment-results",
      children: [(0, _jsxRuntime.jsxs)("text", {
        testID: "recommended-level",
        children: ["Niveau recommand\xE9 : ", getRecommendedLevel(userScore)]
      }), (0, _jsxRuntime.jsxs)("text", {
        testID: "score-display",
        children: ["Score : ", userScore == null ? void 0 : userScore.correctAnswers, "/", userScore == null ? void 0 : userScore.totalQuestions]
      }), (0, _jsxRuntime.jsx)("button", {
        testID: "continue-btn",
        onPress: onContinue,
        children: "Continuer"
      }), (0, _jsxRuntime.jsx)("button", {
        testID: "retry-btn",
        onPress: onRetry,
        children: "Recommencer"
      })]
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _native = require("@react-navigation/native");
var _AppProvider = _interopRequireDefault(require("../../src/contexts/AppProvider"));
var _index = _interopRequireDefault(require("../../src/screens/exercises/level-assessment/index.js"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigate = jest.fn();
var mockGoBack = jest.fn();
var renderWithProviders = function renderWithProviders(component) {
  var AllTheProviders = function AllTheProviders(_ref7) {
    var children = _ref7.children;
    return (0, _jsxRuntime.jsx)(_native.NavigationContainer, {
      children: (0, _jsxRuntime.jsx)(_AppProvider.default, {
        children: children
      })
    });
  };
  return (0, _reactNative.render)(component, {
    wrapper: AllTheProviders
  });
};
describe('Assessment and Placement Integration Test', function () {
  var mockUseAssessment = require('../../src/screens/exercises/level-assessment/hooks/useAssessment');
  beforeEach(function () {
    jest.clearAllMocks();
    mockUseAssessment.mockImplementation(function () {
      return createMockUseAssessment();
    });
  });
  describe('User Assessment Flow', function () {
    it('should successfully complete assessment workflow', function () {
      var mockRoute = {
        params: {
          level: 'B1'
        }
      };
      renderWithProviders((0, _jsxRuntime.jsx)(_index.default, {
        route: mockRoute
      }));
      expect(_reactNative.screen.getByTestID('assessment-header')).toBeTruthy();
      expect(_reactNative.screen.getByTestID('assessment-question')).toBeTruthy();
      expect(_reactNative.screen.getByTestID('assessment-navigation')).toBeTruthy();
      var answerA = _reactNative.screen.getByTestID('answer-a');
      _reactNative.fireEvent.press(answerA);
      var validateBtn = _reactNative.screen.getByTestID('validate-btn');
      _reactNative.fireEvent.press(validateBtn);
      expect(mockUseAssessment().handleSelectAnswer).toHaveBeenCalledWith('A');
    });
    it('should show results when test completed', function () {
      mockUseAssessment.mockImplementation(function () {
        return createMockUseAssessment({
          testCompleted: true,
          currentSection: null,
          currentQuestion: null
        });
      });
      var mockRoute = {
        params: {
          level: 'B1'
        }
      };
      renderWithProviders((0, _jsxRuntime.jsx)(_index.default, {
        route: mockRoute
      }));
      expect(_reactNative.screen.getByTestID('assessment-results')).toBeTruthy();
      expect(_reactNative.screen.getByTestID('recommended-level')).toBeTruthy();
      expect(_reactNative.screen.getByTestID('score-display')).toBeTruthy();
    });
    it('should show loading when not loaded', function () {
      mockUseAssessment.mockImplementation(function () {
        return createMockUseAssessment({
          loaded: false,
          currentSection: null,
          currentQuestion: null
        });
      });
      var mockRoute = {
        params: {
          level: 'A1'
        }
      };
      renderWithProviders((0, _jsxRuntime.jsx)(_index.default, {
        route: mockRoute
      }));
      expect(_reactNative.screen.getByTestID('activity-indicator')).toBeTruthy();
    });
  });
  describe('Level Placement Scenarios', function () {
    var testCases = [{
      correctAnswers: 9,
      totalQuestions: 10,
      expectedLevel: 'B2',
      description: 'high score (90%)'
    }, {
      correctAnswers: 7,
      totalQuestions: 10,
      expectedLevel: 'B1',
      description: 'good score (70%)'
    }, {
      correctAnswers: 5,
      totalQuestions: 10,
      expectedLevel: 'A2',
      description: 'average score (50%)'
    }, {
      correctAnswers: 3,
      totalQuestions: 10,
      expectedLevel: 'A1',
      description: 'low score (30%)'
    }];
    testCases.forEach(function (_ref8) {
      var correctAnswers = _ref8.correctAnswers,
        totalQuestions = _ref8.totalQuestions,
        expectedLevel = _ref8.expectedLevel;
      it(`should recommend ${expectedLevel} for ${correctAnswers}/${totalQuestions} score`, function () {
        mockUseAssessment.mockImplementation(function () {
          return createMockUseAssessment({
            testCompleted: true,
            currentSection: null,
            currentQuestion: null,
            stats: {
              correctAnswers: correctAnswers,
              totalQuestions: totalQuestions
            }
          });
        });
        var mockRoute = {
          params: {
            level: 'B1'
          }
        };
        renderWithProviders((0, _jsxRuntime.jsx)(_index.default, {
          route: mockRoute
        }));
        var recommendedLevel = _reactNative.screen.getByTestID('recommended-level');
        expect(recommendedLevel.props.children).toContain(`Niveau recommandé : ${expectedLevel}`);
        var scoreDisplay = _reactNative.screen.getByTestID('score-display');
        expect(scoreDisplay.props.children).toContain(`Score : ${correctAnswers}/${totalQuestions}`);
      });
    });
  });
  describe('Navigation and Interactions', function () {
    it('should handle back navigation', function () {
      var mockRoute = {
        params: {
          level: 'B1'
        }
      };
      renderWithProviders((0, _jsxRuntime.jsx)(_index.default, {
        route: mockRoute
      }));
      var backBtn = _reactNative.screen.getByTestID('back-btn');
      _reactNative.fireEvent.press(backBtn);
      expect(backBtn).toBeTruthy();
    });
    it('should handle retry action', function () {
      var mockResetAssessment = jest.fn();
      mockUseAssessment.mockImplementation(function () {
        return createMockUseAssessment({
          testCompleted: true,
          currentSection: null,
          currentQuestion: null,
          resetAssessment: mockResetAssessment
        });
      });
      var mockRoute = {
        params: {
          level: 'A2'
        }
      };
      renderWithProviders((0, _jsxRuntime.jsx)(_index.default, {
        route: mockRoute
      }));
      var retryBtn = _reactNative.screen.getByTestID('retry-btn');
      _reactNative.fireEvent.press(retryBtn);
      expect(mockResetAssessment).toHaveBeenCalled();
    });
    it('should handle continue action', function () {
      mockUseAssessment.mockImplementation(function () {
        return createMockUseAssessment({
          testCompleted: true,
          currentSection: null,
          currentQuestion: null
        });
      });
      var mockRoute = {
        params: {
          level: 'B2'
        }
      };
      renderWithProviders((0, _jsxRuntime.jsx)(_index.default, {
        route: mockRoute
      }));
      var continueBtn = _reactNative.screen.getByTestID('continue-btn');
      _reactNative.fireEvent.press(continueBtn);
      expect(mockNavigate).toHaveBeenCalledWith('Dashboard');
    });
  });
  describe('Performance and Rendering', function () {
    it('should render efficiently with different levels', function () {
      var levels = ['A1', 'A2', 'B1', 'B2'];
      levels.forEach(function (level) {
        var _renderWithProviders = renderWithProviders((0, _jsxRuntime.jsx)(_index.default, {
            route: {
              params: {
                level: level
              }
            }
          })),
          unmount = _renderWithProviders.unmount;
        expect(_reactNative.screen.getByTestID('header-level').props.children).toContain(`Niveau ${level}`);
        unmount();
      });
    });
    it('should have proper test identifiers', function () {
      var mockRoute = {
        params: {
          level: 'A1'
        }
      };
      renderWithProviders((0, _jsxRuntime.jsx)(_index.default, {
        route: mockRoute
      }));
      expect(_reactNative.screen.getByTestID('assessment-header')).toBeTruthy();
      expect(_reactNative.screen.getByTestID('assessment-question')).toBeTruthy();
      expect(_reactNative.screen.getByTestID('assessment-navigation')).toBeTruthy();
      expect(_reactNative.screen.getByTestID('assessment-progress')).toBeTruthy();
    });
  });
});
afterAll(function () {
  jest.clearAllMocks();
  jest.resetModules();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,