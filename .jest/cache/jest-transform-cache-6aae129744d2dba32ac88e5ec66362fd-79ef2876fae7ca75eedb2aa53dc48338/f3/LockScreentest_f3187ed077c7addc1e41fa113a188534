e7a573d1e6b248d0a2523aadd3a99a92
_getJestObj().mock('../../src/services/lockService', function () {
  return {
    isEnabled: jest.fn().mockResolvedValue(true),
    verifyPin: jest.fn(function () {
      var _ref = (0, _asyncToGenerator2.default)(function* (pin) {
        return {
          ok: pin === '1234'
        };
      });
      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }()),
    disableLock: jest.fn().mockResolvedValue(true),
    enableLock: jest.fn().mockResolvedValue(true)
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _LockContext = require("../../src/contexts/LockContext");
var _LockScreen = _interopRequireDefault(require("../../src/screens/Lock/LockScreen"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('LockScreen', function () {
  it('unlocks with valid PIN', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_LockContext.LockProvider, {
        children: (0, _jsxRuntime.jsx)(_LockScreen.default, {})
      })),
      getByTestId = _render.getByTestId,
      queryByTestId = _render.queryByTestId;
    var input = yield (0, _reactNative.waitFor)(function () {
      return getByTestId('pin-input');
    });
    _reactNative.fireEvent.changeText(input, '1234');
    _reactNative.fireEvent.press(getByTestId('pin-submit'));
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJpc0VuYWJsZWQiLCJqZXN0IiwiZm4iLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsInZlcmlmeVBpbiIsIl9yZWYiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJkZWZhdWx0IiwicGluIiwib2siLCJfeCIsImFwcGx5IiwiYXJndW1lbnRzIiwiZGlzYWJsZUxvY2siLCJlbmFibGVMb2NrIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfTG9ja0NvbnRleHQiLCJfTG9ja1NjcmVlbiIsIl9qc3hSdW50aW1lIiwiX3JlcXVpcmUiLCJkZXNjcmliZSIsIml0IiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsIkxvY2tQcm92aWRlciIsImNoaWxkcmVuIiwiZ2V0QnlUZXN0SWQiLCJxdWVyeUJ5VGVzdElkIiwiaW5wdXQiLCJ3YWl0Rm9yIiwiZmlyZUV2ZW50IiwiY2hhbmdlVGV4dCIsInByZXNzIl0sInNvdXJjZXMiOlsiTG9ja1NjcmVlbi50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgeyBMb2NrUHJvdmlkZXIgfSBmcm9tICcuLi8uLi9zcmMvY29udGV4dHMvTG9ja0NvbnRleHQnO1xyXG5pbXBvcnQgTG9ja1NjcmVlbiBmcm9tICcuLi8uLi9zcmMvc2NyZWVucy9Mb2NrL0xvY2tTY3JlZW4nO1xyXG5cclxuamVzdC5tb2NrKCcuLi8uLi9zcmMvc2VydmljZXMvbG9ja1NlcnZpY2UnLCAoKSA9PiAoe1xyXG4gIGlzRW5hYmxlZDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpLFxyXG4gIHZlcmlmeVBpbjogamVzdC5mbihhc3luYyAocGluKSA9PiAoeyBvazogcGluID09PSAnMTIzNCcgfSkpLFxyXG4gIGRpc2FibGVMb2NrOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSksXHJcbiAgZW5hYmxlTG9jazogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpLFxyXG59KSk7XHJcblxyXG5kZXNjcmliZSgnTG9ja1NjcmVlbicsICgpID0+IHtcclxuICBpdCgndW5sb2NrcyB3aXRoIHZhbGlkIFBJTicsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQsIHF1ZXJ5QnlUZXN0SWQgfSA9IHJlbmRlcihcclxuICAgICAgPExvY2tQcm92aWRlcj5cclxuICAgICAgICA8TG9ja1NjcmVlbiAvPlxyXG4gICAgICA8L0xvY2tQcm92aWRlcj5cclxuICAgICk7XHJcbiAgICBjb25zdCBpbnB1dCA9IGF3YWl0IHdhaXRGb3IoKCkgPT4gZ2V0QnlUZXN0SWQoJ3Bpbi1pbnB1dCcpKTtcclxuICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGlucHV0LCAnMTIzNCcpO1xyXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdwaW4tc3VibWl0JykpO1xyXG4gICAgLy8gaGVyZSB3ZSBjYW4ndCBhc3NlcnQgbmF2aWdhdGlvbiwgYnV0IG5vIGVycm9yIHNob3VsZCBiZSB2aXNpYmxlXHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuXHJcbiJdLCJtYXBwaW5ncyI6IkFBS0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLGdDQUFnQyxFQUFFO0VBQUEsT0FBTztJQUNqREMsU0FBUyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDLENBQUNDLGlCQUFpQixDQUFDLElBQUksQ0FBQztJQUM1Q0MsU0FBUyxFQUFFSCxJQUFJLENBQUNDLEVBQUU7TUFBQSxJQUFBRyxJQUFBLE9BQUFDLGtCQUFBLENBQUFDLE9BQUEsRUFBQyxXQUFPQyxHQUFHO1FBQUEsT0FBTTtVQUFFQyxFQUFFLEVBQUVELEdBQUcsS0FBSztRQUFPLENBQUM7TUFBQSxDQUFDO01BQUEsaUJBQUFFLEVBQUE7UUFBQSxPQUFBTCxJQUFBLENBQUFNLEtBQUEsT0FBQUMsU0FBQTtNQUFBO0lBQUEsSUFBQztJQUMzREMsV0FBVyxFQUFFWixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDLENBQUNDLGlCQUFpQixDQUFDLElBQUksQ0FBQztJQUM5Q1csVUFBVSxFQUFFYixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDLENBQUNDLGlCQUFpQixDQUFDLElBQUk7RUFDOUMsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUFDLElBQUFZLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBVixrQkFBQSxHQUFBUyxzQkFBQSxDQUFBQyxPQUFBO0FBVkosSUFBQUMsTUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsWUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsWUFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksV0FBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQTJELElBQUFLLFdBQUEsR0FBQUwsT0FBQTtBQUFBLFNBQUFsQixZQUFBO0VBQUEsSUFBQXdCLFFBQUEsR0FBQU4sT0FBQTtJQUFBZixJQUFBLEdBQUFxQixRQUFBLENBQUFyQixJQUFBO0VBQUFILFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFHLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQVMzRHNCLFFBQVEsQ0FBQyxZQUFZLEVBQUUsWUFBTTtFQUMzQkMsRUFBRSxDQUFDLHdCQUF3QixNQUFBbEIsa0JBQUEsQ0FBQUMsT0FBQSxFQUFFLGFBQVk7SUFDdkMsSUFBQWtCLE9BQUEsR0FBdUMsSUFBQUMsbUJBQU0sRUFDM0MsSUFBQUwsV0FBQSxDQUFBTSxHQUFBLEVBQUNSLFlBQUEsQ0FBQVMsWUFBWTtRQUFBQyxRQUFBLEVBQ1gsSUFBQVIsV0FBQSxDQUFBTSxHQUFBLEVBQUNQLFdBQUEsQ0FBQWIsT0FBVSxJQUFFO01BQUMsQ0FDRixDQUNoQixDQUFDO01BSk91QixXQUFXLEdBQUFMLE9BQUEsQ0FBWEssV0FBVztNQUFFQyxhQUFhLEdBQUFOLE9BQUEsQ0FBYk0sYUFBYTtJQUtsQyxJQUFNQyxLQUFLLFNBQVMsSUFBQUMsb0JBQU8sRUFBQztNQUFBLE9BQU1ILFdBQVcsQ0FBQyxXQUFXLENBQUM7SUFBQSxFQUFDO0lBQzNESSxzQkFBUyxDQUFDQyxVQUFVLENBQUNILEtBQUssRUFBRSxNQUFNLENBQUM7SUFDbkNFLHNCQUFTLENBQUNFLEtBQUssQ0FBQ04sV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO0VBRTVDLENBQUMsRUFBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==