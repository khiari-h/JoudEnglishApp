9143c3151e7f04f9f793841310b14c53
_getJestObj().mock('expo-linear-gradient', function () {
  return {
    LinearGradient: function LinearGradient(_ref) {
      var children = _ref.children,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      var _require = require('react-native'),
        View = _require.View;
      return (0, _jsxRuntime.jsx)(View, Object.assign({}, props, {
        children: children
      }));
    }
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: mockRouterPush
    }
  };
});
_getJestObj().mock('../../../src/contexts/ProgressContext', function () {
  return {
    useProgress: mockUseProgress
  };
});
_getJestObj().mock('../../../src/contexts/CurrentLevelContext', function () {
  return {
    useCurrentLevel: mockUseCurrentLevel
  };
});
_getJestObj().mock('../../../src/hooks/useRealTimeProgress', function () {
  return {
    __esModule: true,
    default: mockUseRealTimeProgress
  };
});
_getJestObj().mock('../../../src/hooks/useLastActivity', function () {
  return {
    __esModule: true,
    default: mockUseLastActivity
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/ModernHeader', function () {
  var _require2 = require('react-native'),
    View = _require2.View,
    Text = _require2.Text,
    TouchableOpacity = _require2.TouchableOpacity;
  return function (_ref2) {
    var level = _ref2.level,
      levelColor = _ref2.levelColor,
      onLevelChange = _ref2.onLevelChange;
    return (0, _jsxRuntime.jsxs)(View, {
      testID: "modern-header",
      children: [(0, _jsxRuntime.jsxs)(Text, {
        testID: "header-level",
        children: ["Niveau: ", level]
      }), (0, _jsxRuntime.jsxs)(Text, {
        testID: "header-color",
        children: ["Couleur: ", levelColor]
      }), onLevelChange && (0, _jsxRuntime.jsx)(TouchableOpacity, {
        testID: "header-level-selector",
        onPress: function onPress() {
          return onLevelChange('2');
        },
        children: (0, _jsxRuntime.jsx)(Text, {
          children: "Changer niveau"
        })
      })]
    });
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/HeroContinueSection', function () {
  var _require3 = require('react-native'),
    View = _require3.View,
    Text = _require3.Text,
    TouchableOpacity = _require3.TouchableOpacity;
  return function (_ref3) {
    var lastActivity = _ref3.lastActivity,
      _onPress = _ref3.onPress,
      isLoading = _ref3.isLoading;
    return (0, _jsxRuntime.jsx)(View, {
      testID: "hero-continue-section",
      children: isLoading ? (0, _jsxRuntime.jsx)(Text, {
        testID: "hero-loading",
        children: "Chargement..."
      }) : (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
        children: [(0, _jsxRuntime.jsx)(TouchableOpacity, {
          onPress: function onPress() {
            return _onPress == null ? void 0 : _onPress(lastActivity);
          },
          testID: "continue-button",
          children: (0, _jsxRuntime.jsx)(Text, {
            testID: "continue-text",
            children: lastActivity ? `Continuer: ${lastActivity.title}` : 'Commencer l\'apprentissage'
          })
        }), lastActivity && (0, _jsxRuntime.jsxs)(Text, {
          testID: "activity-type",
          children: ["Type: ", lastActivity.type]
        })]
      })
    });
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/QuickActions', function () {
  var _require4 = require('react-native'),
    View = _require4.View,
    Text = _require4.Text,
    TouchableOpacity = _require4.TouchableOpacity;
  return function (_ref4) {
    var currentLevel = _ref4.currentLevel,
      onActionPress = _ref4.onActionPress;
    return (0, _jsxRuntime.jsxs)(View, {
      testID: "quick-actions",
      children: [(0, _jsxRuntime.jsxs)(Text, {
        testID: "quick-actions-level",
        children: ["Actions pour niveau: ", currentLevel]
      }), (0, _jsxRuntime.jsx)(TouchableOpacity, {
        testID: "quick-action-vocabulary",
        onPress: function onPress() {
          return onActionPress == null ? void 0 : onActionPress('vocabulary');
        },
        children: (0, _jsxRuntime.jsx)(Text, {
          children: "Vocabulaire"
        })
      }), (0, _jsxRuntime.jsx)(TouchableOpacity, {
        testID: "quick-action-grammar",
        onPress: function onPress() {
          return onActionPress == null ? void 0 : onActionPress('grammar');
        },
        children: (0, _jsxRuntime.jsx)(Text, {
          children: "Grammaire"
        })
      })]
    });
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/SimpleMetrics', function () {
  var _require5 = require('react-native'),
    View = _require5.View,
    Text = _require5.Text;
  return function (_ref5) {
    var accentColor = _ref5.accentColor,
      metrics = _ref5.metrics;
    return (0, _jsxRuntime.jsxs)(View, {
      testID: "simple-metrics",
      children: [(0, _jsxRuntime.jsxs)(Text, {
        testID: "metrics-color",
        children: ["Couleur accent: ", accentColor]
      }), (0, _jsxRuntime.jsxs)(Text, {
        testID: "metrics-streak",
        children: ["S\xE9rie: ", (metrics == null ? void 0 : metrics.streak) || 0, " jours"]
      }), (0, _jsxRuntime.jsxs)(Text, {
        testID: "metrics-total",
        children: ["Total: ", (metrics == null ? void 0 : metrics.totalWords) || 0, " mots"]
      })]
    });
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/LearningProgress', function () {
  var _require6 = require('react-native'),
    View = _require6.View,
    Text = _require6.Text,
    TouchableOpacity = _require6.TouchableOpacity,
    FlatList = _require6.FlatList;
  return function (_ref6) {
    var globalProgress = _ref6.globalProgress,
      levels = _ref6.levels,
      currentLevel = _ref6.currentLevel,
      onSelectLevel = _ref6.onSelectLevel,
      onChangeLevelVisual = _ref6.onChangeLevelVisual;
    return (0, _jsxRuntime.jsxs)(View, {
      testID: "learning-progress",
      children: [(0, _jsxRuntime.jsxs)(Text, {
        testID: "global-progress",
        children: ["Progr\xE8s global: ", globalProgress, "%"]
      }), (0, _jsxRuntime.jsxs)(Text, {
        testID: "current-level-display",
        children: ["Niveau actuel: ", currentLevel]
      }), (0, _jsxRuntime.jsx)(View, {
        testID: "levels-container",
        children: levels == null ? void 0 : levels.map(function (level) {
          return (0, _jsxRuntime.jsx)(TouchableOpacity, {
            onPress: function onPress() {
              return onSelectLevel == null ? void 0 : onSelectLevel(level.id);
            },
            testID: `level-item-${level.id}`,
            children: (0, _jsxRuntime.jsxs)(Text, {
              testID: `level-${level.id}-text`,
              children: ["Niveau ", level.id, ": ", level.progress, "%"]
            })
          }, level.id);
        })
      }), (0, _jsxRuntime.jsx)(TouchableOpacity, {
        onPress: function onPress() {
          return onChangeLevelVisual == null ? void 0 : onChangeLevelVisual('3');
        },
        testID: "change-visual-level",
        children: (0, _jsxRuntime.jsx)(Text, {
          children: "Changer affichage niveau"
        })
      }), (0, _jsxRuntime.jsx)(TouchableOpacity, {
        onPress: function onPress() {
          return onSelectLevel == null ? void 0 : onSelectLevel(currentLevel);
        },
        testID: "explore-current-level",
        children: (0, _jsxRuntime.jsxs)(Text, {
          testID: "explore-level-text",
          children: ["Explorer le niveau ", currentLevel]
        })
      })]
    });
  };
});
_getJestObj().mock('../../../src/components/layout/Container', function () {
  var _require7 = require('react-native'),
    ScrollView = _require7.ScrollView,
    View = _require7.View;
  function Container(_ref7) {
    var children = _ref7.children,
      safeAreaEdges = _ref7.safeAreaEdges,
      refreshControl = _ref7.refreshControl,
      onRefresh = _ref7.onRefresh,
      props = (0, _objectWithoutProperties2.default)(_ref7, _excluded2);
    if (onRefresh) {
      return (0, _jsxRuntime.jsx)(ScrollView, Object.assign({
        testID: "container-scrollable",
        onRefresh: onRefresh,
        refreshing: false
      }, props, {
        children: children
      }));
    }
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "container"
    }, props, {
      children: children
    }));
  }
  Container.CONTAINER_SAFE_EDGES = {
    NO_BOTTOM: ['top', 'left', 'right'],
    ALL: ['top', 'bottom', 'left', 'right']
  };
  return Container;
});
_getJestObj().mock('../../../src/screens/VocabularyRevision/RevisionOrchestrator', function () {
  var _require8 = require('react-native'),
    View = _require8.View,
    Text = _require8.Text,
    TouchableOpacity = _require8.TouchableOpacity;
  return function (_ref8) {
    var currentLevel = _ref8.currentLevel,
      onStartRevision = _ref8.onStartRevision;
    return (0, _jsxRuntime.jsxs)(View, {
      testID: "revision-orchestrator",
      children: [(0, _jsxRuntime.jsxs)(Text, {
        testID: "revision-level",
        children: ["R\xE9visions pour niveau: ", currentLevel]
      }), (0, _jsxRuntime.jsx)(TouchableOpacity, {
        testID: "start-revision-button",
        onPress: function onPress() {
          return onStartRevision == null ? void 0 : onStartRevision(currentLevel);
        },
        children: (0, _jsxRuntime.jsx)(Text, {
          children: "Commencer r\xE9visions"
        })
      })]
    });
  };
});
_getJestObj().mock('../../../src/utils/constants', function () {
  return {
    LANGUAGE_LEVELS: {
      '1': {
        title: 'Débutant',
        color: '#10B981',
        icon: '🌱'
      },
      '2': {
        title: 'Élémentaire',
        color: '#3B82F6',
        icon: '📚'
      },
      '3': {
        title: 'Intermédiaire',
        color: '#8B5CF6',
        icon: '🎯'
      },
      '4': {
        title: 'Intermédiaire+',
        color: '#F59E0B',
        icon: '🚀'
      },
      '5': {
        title: 'Avancé',
        color: '#EF4444',
        icon: '⭐'
      },
      '6': {
        title: 'Expert',
        color: '#EC4899',
        icon: '👑'
      },
      'bonus': {
        title: 'Bonus',
        color: '#6366F1',
        icon: '🎁'
      }
    },
    EXERCISES: {
      vocabulary: {
        id: 'vocabulary',
        route: '/tabs/vocabulary',
        title: 'Vocabulaire'
      },
      grammar: {
        id: 'grammar',
        route: '/tabs/grammar',
        title: 'Grammaire'
      },
      listening: {
        id: 'listening',
        route: '/tabs/listening',
        title: 'Écoute'
      }
    },
    CONTAINER_SAFE_EDGES: {
      NO_BOTTOM: ['top', 'left', 'right'],
      ALL: ['top', 'bottom', 'left', 'right']
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Dashboard = _interopRequireDefault(require("../../../src/screens/Dashboard"));
var _ThemeContext = require("../../../src/contexts/ThemeContext");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children"],
  _excluded2 = ["children", "safeAreaEdges", "refreshControl", "onRefresh"];
function _getJestObj() {
  var _require9 = require("@jest/globals"),
    jest = _require9.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockRouterPush = jest.fn();
var mockUseProgress = jest.fn();
var mockUseCurrentLevel = jest.fn();
var mockUseRealTimeProgress = jest.fn();
var mockUseLastActivity = jest.fn();
describe('Dashboard - Tests unitaires', function () {
  var defaultThemeContext = {
    colors: {
      background: '#F8FAFC',
      primary: '#3B82F6',
      surface: '#FFFFFF',
      text: '#1F2937',
      textSecondary: '#6B7280'
    }
  };
  var defaultProgressContext = {
    progress: {
      level1: 50,
      level2: 30,
      level3: 75
    },
    isLoading: false,
    error: null
  };
  var defaultCurrentLevelContext = {
    currentLevel: '1',
    setCurrentLevel: jest.fn()
  };
  var defaultLastActivity = {
    type: 'vocabulary',
    level: '1',
    title: 'Vocabulaire Animaux',
    metadata: {
      word: 5,
      totalWords: 15
    }
  };
  var defaultMetrics = {
    streak: 5,
    totalWords: 150,
    completedLessons: 12
  };
  var setupMocks = function setupMocks() {
    var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _overrides$progressCo = overrides.progressContext,
      progressContext = _overrides$progressCo === void 0 ? defaultProgressContext : _overrides$progressCo,
      _overrides$currentLev = overrides.currentLevelContext,
      currentLevelContext = _overrides$currentLev === void 0 ? defaultCurrentLevelContext : _overrides$currentLev,
      _overrides$lastActivi = overrides.lastActivity,
      lastActivity = _overrides$lastActivi === void 0 ? defaultLastActivity : _overrides$lastActivi,
      _overrides$isActivity = overrides.isActivityLoading,
      isActivityLoading = _overrides$isActivity === void 0 ? false : _overrides$isActivity,
      _overrides$realTimePr = overrides.realTimeProgressData,
      realTimeProgressData = _overrides$realTimePr === void 0 ? {
        '1': 25,
        '2': 50,
        '3': 75
      } : _overrides$realTimePr,
      _overrides$isRealTime = overrides.isRealTimeLoading,
      isRealTimeLoading = _overrides$isRealTime === void 0 ? false : _overrides$isRealTime,
      _overrides$metrics = overrides.metrics,
      metrics = _overrides$metrics === void 0 ? defaultMetrics : _overrides$metrics;
    mockUseProgress.mockReturnValue(progressContext);
    mockUseCurrentLevel.mockReturnValue(currentLevelContext);
    mockUseLastActivity.mockReturnValue({
      lastActivity: lastActivity,
      isLoading: isActivityLoading,
      reload: jest.fn().mockResolvedValue(),
      error: null
    });
    mockUseRealTimeProgress.mockReturnValue({
      getLevelProgress: jest.fn(function (level) {
        return realTimeProgressData[level] || 0;
      }),
      refresh: jest.fn().mockResolvedValue(),
      isLoading: isRealTimeLoading,
      metrics: metrics
    });
  };
  var renderDashboard = function renderDashboard() {
    var themeValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultThemeContext;
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
      value: themeValue,
      children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
    }));
  };
  beforeEach(function () {
    jest.clearAllMocks();
    mockRouterPush.mockClear();
    setupMocks();
  });
  describe('Rendu initial et composants', function () {
    it('devrait afficher tous les composants principaux', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard = renderDashboard(),
        getByTestId = _renderDashboard.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('modern-header')).toBeTruthy();
        expect(getByTestId('hero-continue-section')).toBeTruthy();
        expect(getByTestId('quick-actions')).toBeTruthy();
        expect(getByTestId('simple-metrics')).toBeTruthy();
        expect(getByTestId('learning-progress')).toBeTruthy();
        expect(getByTestId('revision-orchestrator')).toBeTruthy();
      });
    }));
    it('devrait afficher l\'état de chargement du contexte Progress', function () {
      setupMocks({
        progressContext: Object.assign({}, defaultProgressContext, {
          isLoading: true
        })
      });
      var _renderDashboard2 = renderDashboard(),
        getByText = _renderDashboard2.getByText;
      expect(getByText('Chargement du tableau de bord...')).toBeTruthy();
    });
    it('devrait utiliser le niveau par défaut (1)', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard3 = renderDashboard(),
        getByTestId = _renderDashboard3.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('header-level')).toBeTruthy();
        expect(getByTestId('header-level').children[0]).toBe('Niveau: 1');
      });
    }));
    it('devrait afficher la couleur correspondant au niveau', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard4 = renderDashboard(),
        getByTestId = _renderDashboard4.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var colorElement = getByTestId('header-color');
        expect(colorElement.children[0]).toBe('Couleur: #10B981');
      });
    }));
  });
  describe('Gestion des niveaux', function () {
    it('devrait changer de niveau et mettre à jour le contexte', (0, _asyncToGenerator2.default)(function* () {
      var mockSetCurrentLevel = jest.fn();
      setupMocks({
        currentLevelContext: {
          currentLevel: '1',
          setCurrentLevel: mockSetCurrentLevel
        }
      });
      var _renderDashboard5 = renderDashboard(),
        getByTestId = _renderDashboard5.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var changeButton = getByTestId('change-visual-level');
        _reactNative.fireEvent.press(changeButton);
      });
      expect(mockSetCurrentLevel).toHaveBeenCalledWith('3');
    }));
    it('devrait afficher les bonnes couleurs pour différents niveaux', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        currentLevelContext: {
          currentLevel: '2',
          setCurrentLevel: jest.fn()
        }
      });
      var _renderDashboard6 = renderDashboard(),
        getByTestId = _renderDashboard6.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var colorElement = getByTestId('header-color');
        expect(colorElement.children[0]).toBe('Couleur: #3B82F6');
      });
    }));
    it('devrait naviguer vers la sélection d\'exercices pour un niveau', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard7 = renderDashboard(),
        getByTestId = _renderDashboard7.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var levelButton = getByTestId('level-item-2');
        _reactNative.fireEvent.press(levelButton);
      });
      expect(mockRouterPush).toHaveBeenCalledWith('/tabs/exerciseSelection?level=2');
    }));
  });
  describe('Section Continue/Hero', function () {
    it('devrait afficher la dernière activité quand disponible', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        lastActivity: {
          type: 'vocabulary',
          level: '2',
          title: 'Vocabulaire Famille'
        }
      });
      var _renderDashboard8 = renderDashboard(),
        getByTestId = _renderDashboard8.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var continueText = getByTestId('continue-text');
        expect(continueText.children[0]).toBe('Continuer: Vocabulaire Famille');
        var activityType = getByTestId('activity-type');
        expect(activityType.children[0]).toBe('Type: vocabulary');
      });
    }));
    it('devrait afficher "Commencer l\'apprentissage" sans activité récente', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        lastActivity: null
      });
      var _renderDashboard9 = renderDashboard(),
        getByTestId = _renderDashboard9.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var continueText = getByTestId('continue-text');
        expect(continueText.children[0]).toBe('Commencer l\'apprentissage');
      });
    }));
    it('devrait afficher l\'état de chargement de l\'activité', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        isActivityLoading: true
      });
      var _renderDashboard0 = renderDashboard(),
        getByTestId = _renderDashboard0.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('hero-loading')).toBeTruthy();
      });
    }));
  });
  describe('Navigation Continue', function () {
    it('devrait naviguer vers vocabulary avec les bons paramètres', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        lastActivity: {
          type: 'vocabulary',
          level: '2',
          title: 'Test Vocab'
        }
      });
      var _renderDashboard1 = renderDashboard(),
        getByTestId = _renderDashboard1.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var continueButton = getByTestId('continue-button');
        _reactNative.fireEvent.press(continueButton);
      });
      expect(mockRouterPush).toHaveBeenCalledWith({
        pathname: '/tabs/vocabulary',
        params: {
          level: '2'
        }
      });
    }));
    it('devrait naviguer vers grammar avec les bons paramètres', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        lastActivity: {
          type: 'grammar',
          level: '1',
          title: 'Grammaire de base'
        }
      });
      var _renderDashboard10 = renderDashboard(),
        getByTestId = _renderDashboard10.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var continueButton = getByTestId('continue-button');
        _reactNative.fireEvent.press(continueButton);
      });
      expect(mockRouterPush).toHaveBeenCalledWith({
        pathname: '/tabs/grammar',
        params: {
          level: '1'
        }
      });
    }));
    it('devrait naviguer vers levelSelection pour une activité levelSelection', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        lastActivity: {
          type: 'levelSelection'
        }
      });
      var _renderDashboard11 = renderDashboard(),
        getByTestId = _renderDashboard11.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var continueButton = getByTestId('continue-button');
        _reactNative.fireEvent.press(continueButton);
      });
      expect(mockRouterPush).toHaveBeenCalledWith('/(tabs)/levelSelection');
    }));
    it('devrait naviguer vers levelSelection sans activité', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        lastActivity: null
      });
      var _renderDashboard12 = renderDashboard(),
        getByTestId = _renderDashboard12.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var continueButton = getByTestId('continue-button');
        _reactNative.fireEvent.press(continueButton);
      });
      expect(mockRouterPush).toHaveBeenCalledWith('/(tabs)/levelSelection');
    }));
  });
  describe('Actions rapides', function () {
    it('devrait afficher les actions pour le niveau courant', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard13 = renderDashboard(),
        getByTestId = _renderDashboard13.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var quickActionsLevel = getByTestId('quick-actions-level');
        expect(quickActionsLevel.children[0]).toBe('Actions pour niveau: 1');
      });
    }));
    it('devrait naviguer vers vocabulary depuis les actions rapides', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard14 = renderDashboard(),
        getByTestId = _renderDashboard14.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var vocabAction = getByTestId('quick-action-vocabulary');
        _reactNative.fireEvent.press(vocabAction);
      });
      expect(mockRouterPush).toHaveBeenCalledWith({
        pathname: '/tabs/vocabulary',
        params: {
          level: '1'
        }
      });
    }));
    it('devrait naviguer vers grammar depuis les actions rapides', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard15 = renderDashboard(),
        getByTestId = _renderDashboard15.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var grammarAction = getByTestId('quick-action-grammar');
        _reactNative.fireEvent.press(grammarAction);
      });
      expect(mockRouterPush).toHaveBeenCalledWith({
        pathname: '/tabs/grammar',
        params: {
          level: '1'
        }
      });
    }));
  });
  describe('Métriques simples', function () {
    it('devrait afficher les métriques avec la couleur accent', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard16 = renderDashboard(),
        getByTestId = _renderDashboard16.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var metricsColor = getByTestId('metrics-color');
        expect(metricsColor.children[0]).toBe('Couleur accent: #10B981');
        var streak = getByTestId('metrics-streak');
        expect(streak.children[0]).toBe('Série: 5 jours');
        var total = getByTestId('metrics-total');
        expect(total.children[0]).toBe('Total: 150 mots');
      });
    }));
    it('devrait gérer les métriques manquantes', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        metrics: {}
      });
      var _renderDashboard17 = renderDashboard(),
        getByTestId = _renderDashboard17.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var streak = getByTestId('metrics-streak');
        expect(streak.children[0]).toBe('Série: 0 jours');
        var total = getByTestId('metrics-total');
        expect(total.children[0]).toBe('Total: 0 mots');
      });
    }));
  });
  describe('Progression d\'apprentissage', function () {
    it('devrait afficher la progression globale du niveau courant', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard18 = renderDashboard(),
        getByTestId = _renderDashboard18.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var globalProgress = getByTestId('global-progress');
        expect(globalProgress.children[0]).toBe('Progrès global: 25%');
        var currentLevel = getByTestId('current-level-display');
        expect(currentLevel.children[0]).toBe('Niveau actuel: 1');
      });
    }));
    it('devrait afficher tous les niveaux avec leur progression', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard19 = renderDashboard(),
        getByTestId = _renderDashboard19.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var level1 = getByTestId('level-1-text');
        expect(level1.children[0]).toBe('Niveau 1: 25%');
        var level2 = getByTestId('level-2-text');
        expect(level2.children[0]).toBe('Niveau 2: 50%');
        var level3 = getByTestId('level-3-text');
        expect(level3.children[0]).toBe('Niveau 3: 75%');
      });
    }));
    it('devrait permettre d\'explorer le niveau courant', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard20 = renderDashboard(),
        getByTestId = _renderDashboard20.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var exploreButton = getByTestId('explore-current-level');
        var exploreText = getByTestId('explore-level-text');
        expect(exploreText.children[0]).toBe('Explorer le niveau 1');
        _reactNative.fireEvent.press(exploreButton);
      });
      expect(mockRouterPush).toHaveBeenCalledWith('/tabs/exerciseSelection?level=1');
    }));
  });
  describe('Orchestrateur de révisions', function () {
    it('devrait afficher les révisions pour le niveau courant', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard21 = renderDashboard(),
        getByTestId = _renderDashboard21.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var revisionLevel = getByTestId('revision-level');
        expect(revisionLevel.children[0]).toBe('Révisions pour niveau: 1');
      });
    }));
    it('devrait démarrer les révisions', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard22 = renderDashboard(),
        getByTestId = _renderDashboard22.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var startButton = getByTestId('start-revision-button');
        _reactNative.fireEvent.press(startButton);
      });
      expect(getByTestId('start-revision-button')).toBeTruthy();
    }));
  });
  describe('Gestion des thèmes', function () {
    it('devrait utiliser les couleurs du thème personnalisé', (0, _asyncToGenerator2.default)(function* () {
      var customTheme = {
        colors: {
          background: '#000000',
          primary: '#FF0000',
          surface: '#111111',
          text: '#FFFFFF',
          textSecondary: '#CCCCCC'
        }
      };
      var _renderDashboard23 = renderDashboard(customTheme),
        getByTestId = _renderDashboard23.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('modern-header')).toBeTruthy();
        expect(getByTestId('simple-metrics')).toBeTruthy();
      });
    }));
    it('devrait fonctionner sans contexte de thème', (0, _asyncToGenerator2.default)(function* () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Dashboard.default, {})),
        getByTestId = _render.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('modern-header')).toBeTruthy();
        expect(getByTestId('hero-continue-section')).toBeTruthy();
      });
    }));
  });
  describe('Gestion des erreurs', function () {
    it('devrait gérer les erreurs du contexte Progress', function () {
      setupMocks({
        progressContext: {
          progress: {},
          isLoading: false,
          error: 'Erreur de chargement'
        }
      });
      var _renderDashboard24 = renderDashboard(),
        getByTestId = _renderDashboard24.getByTestId;
      expect(getByTestId('modern-header')).toBeTruthy();
    });
    it('devrait gérer l\'absence de données de progression', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        realTimeProgressData: {}
      });
      var _renderDashboard25 = renderDashboard(),
        getByTestId = _renderDashboard25.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var globalProgress = getByTestId('global-progress');
        expect(globalProgress.children[0]).toBe('Progrès global: 0%');
      });
    }));
    it('devrait gérer l\'absence de contexte CurrentLevel', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        currentLevelContext: {
          setCurrentLevel: jest.fn()
        }
      });
      var _renderDashboard26 = renderDashboard(),
        getByTestId = _renderDashboard26.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('modern-header')).toBeTruthy();
      });
    }));
  });
  describe('États de chargement', function () {
    it('devrait afficher l\'état de chargement des données temps réel', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        isRealTimeLoading: true
      });
      var _renderDashboard27 = renderDashboard(),
        getByTestId = _renderDashboard27.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('learning-progress')).toBeTruthy();
      });
    }));
    it('devrait gérer le rafraîchissement des données', (0, _asyncToGenerator2.default)(function* () {
      var mockRefresh = jest.fn().mockResolvedValue();
      setupMocks();
      mockUseRealTimeProgress.mockReturnValue({
        getLevelProgress: jest.fn(function (level) {
          return {
            '1': 25,
            '2': 50,
            '3': 75
          }[level] || 0;
        }),
        refresh: mockRefresh,
        isLoading: false,
        metrics: defaultMetrics
      });
      var _renderDashboard28 = renderDashboard(),
        getByTestId = _renderDashboard28.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('container')).toBeTruthy();
      });
    }));
  });
  describe('Accessibilité et testIDs', function () {
    it('devrait avoir tous les testIDs nécessaires', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard29 = renderDashboard(),
        getByTestId = _renderDashboard29.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var testIds = ['modern-header', 'hero-continue-section', 'quick-actions', 'simple-metrics', 'learning-progress', 'revision-orchestrator', 'continue-button', 'header-level', 'header-color'];
        testIds.forEach(function (testId) {
          expect(getByTestId(testId)).toBeTruthy();
        });
      });
    }));
  });
  describe('Intégration des composants', function () {
    it('devrait passer les bonnes props aux composants enfants', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard30 = renderDashboard(),
        getByTestId = _renderDashboard30.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('header-level').children[0]).toBe('Niveau: 1');
        expect(getByTestId('quick-actions-level').children[0]).toBe('Actions pour niveau: 1');
        expect(getByTestId('metrics-color').children[0]).toBe('Couleur accent: #10B981');
        expect(getByTestId('current-level-display').children[0]).toBe('Niveau actuel: 1');
        expect(getByTestId('revision-level').children[0]).toBe('Révisions pour niveau: 1');
      });
    }));
    it('devrait synchroniser les changements de niveau entre composants', (0, _asyncToGenerator2.default)(function* () {
      var mockSetCurrentLevel = jest.fn();
      setupMocks({
        currentLevelContext: {
          currentLevel: '1',
          setCurrentLevel: mockSetCurrentLevel
        }
      });
      var _renderDashboard31 = renderDashboard(),
        getByTestId = _renderDashboard31.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var changeButton = getByTestId('change-visual-level');
        _reactNative.fireEvent.press(changeButton);
      });
      expect(mockSetCurrentLevel).toHaveBeenCalledWith('3');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,