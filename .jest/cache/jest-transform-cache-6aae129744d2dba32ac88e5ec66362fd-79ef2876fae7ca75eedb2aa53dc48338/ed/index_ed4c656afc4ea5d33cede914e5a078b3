930d89ab5981c7a42f78960e28c15238
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _ProgressCard = _interopRequireDefault(require("../../../../components/ui/ProgressCard"));
var _vocabularyStats = require("../../../../utils/vocabulary/vocabularyStats");
var _jsxRuntime = require("react/jsx-runtime");
var VocabularyProgress = function VocabularyProgress(_ref) {
  var vocabularyData = _ref.vocabularyData,
    completedWords = _ref.completedWords,
    levelColor = _ref.levelColor,
    _ref$expanded = _ref.expanded,
    expanded = _ref$expanded === void 0 ? false : _ref$expanded,
    onToggleExpand = _ref.onToggleExpand,
    onCategoryPress = _ref.onCategoryPress;
  var getDataArray = function getDataArray() {
    if (vocabularyData != null && vocabularyData.categories && Array.isArray(vocabularyData.categories)) {
      return vocabularyData.categories;
    } else if (vocabularyData != null && vocabularyData.exercises && Array.isArray(vocabularyData.exercises)) {
      return vocabularyData.exercises;
    }
    return [];
  };
  var dataArray = getDataArray();
  var totalWordsCount = (0, _vocabularyStats.calculateTotalWords)(dataArray);
  var completedWordsCount = (0, _vocabularyStats.calculateCompletedWordsCount)(completedWords);
  var totalProgress = (0, _vocabularyStats.calculateTotalProgress)(dataArray, completedWords);
  var categoryProgressData = (0, _vocabularyStats.calculateCategoryProgress)(dataArray, completedWords);
  var formattedCategoryData = categoryProgressData.map(function (category) {
    return {
      title: category.title,
      completed: category.completedWords,
      total: category.totalWords,
      progress: category.progress
    };
  });
  return (0, _jsxRuntime.jsx)(_ProgressCard.default, {
    title: "Progression",
    progress: totalProgress,
    completed: completedWordsCount,
    total: totalWordsCount,
    unit: "mots",
    levelColor: levelColor,
    expandable: true,
    expanded: expanded,
    onToggleExpand: onToggleExpand,
    categoryData: formattedCategoryData,
    onCategoryPress: onCategoryPress
  });
};
VocabularyProgress.propTypes = {
  vocabularyData: _propTypes.default.shape({
    categories: _propTypes.default.arrayOf(_propTypes.default.object),
    exercises: _propTypes.default.arrayOf(_propTypes.default.object)
  }),
  completedWords: _propTypes.default.object,
  levelColor: _propTypes.default.string.isRequired,
  expanded: _propTypes.default.bool,
  onToggleExpand: _propTypes.default.func,
  onCategoryPress: _propTypes.default.func
};
var _default = exports.default = VocabularyProgress;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,