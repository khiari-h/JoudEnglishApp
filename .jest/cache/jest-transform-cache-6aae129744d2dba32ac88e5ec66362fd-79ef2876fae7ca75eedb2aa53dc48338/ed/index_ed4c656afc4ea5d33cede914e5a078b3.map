{"version":3,"names":["_propTypes","_interopRequireDefault","require","_ProgressCard","_vocabularyStats","_jsxRuntime","VocabularyProgress","_ref","vocabularyData","completedWords","levelColor","_ref$expanded","expanded","onToggleExpand","onCategoryPress","getDataArray","categories","Array","isArray","exercises","dataArray","totalWordsCount","calculateTotalWords","completedWordsCount","calculateCompletedWordsCount","totalProgress","calculateTotalProgress","categoryProgressData","calculateCategoryProgress","formattedCategoryData","map","category","title","completed","total","totalWords","progress","jsx","default","unit","expandable","categoryData","propTypes","PropTypes","shape","arrayOf","object","string","isRequired","bool","func","_default","exports"],"sources":["index.js"],"sourcesContent":["// VocabularyProgress/index.js - CORRIGÃ‰ pour Ã©liminer les 12 violations SonarQube\r\n\r\nimport PropTypes from 'prop-types';\r\nimport ProgressCard from \"../../../../components/ui/ProgressCard\";\r\nimport {\r\n  calculateTotalWords,\r\n  calculateCompletedWordsCount,\r\n  calculateTotalProgress,\r\n  calculateCategoryProgress,\r\n} from \"../../../../utils/vocabulary/vocabularyStats\";\r\n\r\n/**\r\n * ðŸ“Š VocabularyProgress - Version CorrigÃ©e pour gÃ©rer categories ET exercises\r\n * âœ… GÃ¨re mode classique (categories) ET mode fast (exercises)\r\n * \r\n * @param {object} vocabularyData - DonnÃ©es du vocabulaire\r\n * @param {object} completedWords - Mots complÃ©tÃ©s par catÃ©gorie\r\n * @param {string} levelColor - Couleur du niveau\r\n * @param {boolean} expanded - Ã‰tat d'expansion\r\n * @param {function} onToggleExpand - Fonction pour toggle expansion\r\n * @param {function} onCategoryPress - Fonction appelÃ©e lors du clic sur catÃ©gorie\r\n */\r\nconst VocabularyProgress = ({\r\n  vocabularyData,\r\n  completedWords,\r\n  levelColor,\r\n  expanded = false,\r\n  onToggleExpand,\r\n  onCategoryPress,\r\n}) => {\r\n  \r\n  // âœ… CORRIGÃ‰ : DÃ©tecte la vraie structure\r\n  const getDataArray = () => {\r\n    if (vocabularyData?.categories && Array.isArray(vocabularyData.categories)) {\r\n      // Mode classique : { categories: [...] }\r\n      return vocabularyData.categories;\r\n    } else if (vocabularyData?.exercises && Array.isArray(vocabularyData.exercises)) {\r\n      // Mode fast : { exercises: [...] }\r\n      return vocabularyData.exercises;\r\n    }\r\n    return [];\r\n  };\r\n\r\n  const dataArray = getDataArray();\r\n  \r\n  // âœ… CORRIGÃ‰ : Utilise la vraie structure dÃ©tectÃ©e\r\n  const totalWordsCount = calculateTotalWords(dataArray);\r\n  const completedWordsCount = calculateCompletedWordsCount(completedWords);\r\n  const totalProgress = calculateTotalProgress(dataArray, completedWords);\r\n  \r\n  // DonnÃ©es des catÃ©gories pour l'expansion\r\n  const categoryProgressData = calculateCategoryProgress(dataArray, completedWords);\r\n\r\n  // Transformation pour le format ProgressCard\r\n  const formattedCategoryData = categoryProgressData.map((category) => ({\r\n    title: category.title,\r\n    completed: category.completedWords,\r\n    total: category.totalWords,\r\n    progress: category.progress,\r\n  }));\r\n\r\n  return (\r\n    <ProgressCard\r\n      title=\"Progression\"\r\n      progress={totalProgress}\r\n      completed={completedWordsCount}\r\n      total={totalWordsCount}\r\n      unit=\"mots\"\r\n      levelColor={levelColor}\r\n      expandable\r\n      expanded={expanded}\r\n      onToggleExpand={onToggleExpand}\r\n      categoryData={formattedCategoryData}\r\n      onCategoryPress={onCategoryPress}\r\n    />\r\n  );\r\n};\r\n\r\n// PropTypes pour VocabularyProgress - CORRIGÃ‰ pour toutes les violations\r\nVocabularyProgress.propTypes = {\r\n  vocabularyData: PropTypes.shape({\r\n    categories: PropTypes.arrayOf(PropTypes.object),\r\n    exercises: PropTypes.arrayOf(PropTypes.object),\r\n  }),\r\n  completedWords: PropTypes.object,\r\n  levelColor: PropTypes.string.isRequired,\r\n  expanded: PropTypes.bool,\r\n  onToggleExpand: PropTypes.func,\r\n  onCategoryPress: PropTypes.func,\r\n};\r\n\r\nexport default VocabularyProgress;"],"mappings":"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","ignoreList":[]}