a870e665fb733b2e3f6fd94053333359
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _expoLinearGradient = require("expo-linear-gradient");
var _VocabularyWordCard = _interopRequireDefault(require("../VocabularyWordCard"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var VocabularyWordSection = (0, _react.memo)(function (_ref) {
  var currentWord = _ref.currentWord,
    wordCounter = _ref.wordCounter,
    levelColor = _ref.levelColor,
    showTranslation = _ref.showTranslation,
    onToggleTranslation = _ref.onToggleTranslation;
  var styles = (0, _style.default)(levelColor);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsx)(CounterSection, {
      wordCounter: wordCounter,
      levelColor: levelColor,
      styles: styles
    }), (0, _jsxRuntime.jsx)(_VocabularyWordCard.default, {
      word: currentWord.word || "",
      translation: currentWord.translation || "",
      definition: currentWord.definition || "",
      example: currentWord.example || "",
      showTranslation: showTranslation,
      onToggleTranslation: onToggleTranslation,
      levelColor: levelColor
    })]
  });
});
var CounterSection = function CounterSection(_ref2) {
  var wordCounter = _ref2.wordCounter,
    levelColor = _ref2.levelColor,
    styles = _ref2.styles;
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: styles.counterSection,
    children: (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
      colors: [`${levelColor}08`, `${levelColor}04`, 'transparent'],
      start: {
        x: 0,
        y: 0
      },
      end: {
        x: 1,
        y: 1
      },
      style: styles.counterGradient,
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.counterBadge, {
          borderColor: `${levelColor}20`
        }],
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [styles.counterText, {
            color: levelColor
          }],
          children: wordCounter
        })
      })
    })
  });
};
VocabularyWordSection.displayName = "VocabularyWordSection";
var _default = exports.default = VocabularyWordSection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlIiwiX2V4cG9MaW5lYXJHcmFkaWVudCIsIl9Wb2NhYnVsYXJ5V29yZENhcmQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3N0eWxlIiwiX2pzeFJ1bnRpbWUiLCJWb2NhYnVsYXJ5V29yZFNlY3Rpb24iLCJtZW1vIiwiX3JlZiIsImN1cnJlbnRXb3JkIiwid29yZENvdW50ZXIiLCJsZXZlbENvbG9yIiwic2hvd1RyYW5zbGF0aW9uIiwib25Ub2dnbGVUcmFuc2xhdGlvbiIsInN0eWxlcyIsImNyZWF0ZVN0eWxlcyIsImpzeHMiLCJWaWV3Iiwic3R5bGUiLCJjb250YWluZXIiLCJjaGlsZHJlbiIsImpzeCIsIkNvdW50ZXJTZWN0aW9uIiwiZGVmYXVsdCIsIndvcmQiLCJ0cmFuc2xhdGlvbiIsImRlZmluaXRpb24iLCJleGFtcGxlIiwiX3JlZjIiLCJjb3VudGVyU2VjdGlvbiIsIkxpbmVhckdyYWRpZW50IiwiY29sb3JzIiwic3RhcnQiLCJ4IiwieSIsImVuZCIsImNvdW50ZXJHcmFkaWVudCIsImNvdW50ZXJCYWRnZSIsImJvcmRlckNvbG9yIiwiVGV4dCIsImNvdW50ZXJUZXh0IiwiY29sb3IiLCJkaXNwbGF5TmFtZSIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFZvY2FidWxhcnlXb3JkU2VjdGlvbi9pbmRleC5qcyAtIFZFUlNJT04gQUpVU1TDiUUgKGdhcmRlIGxhIGxvZ2lxdWUsIHV0aWxpc2UgbGUgbm91dmVhdSBWb2NhYnVsYXJ5V29yZENhcmQpXHJcblxyXG5pbXBvcnQgeyBtZW1vIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IFZpZXcsIFRleHQgfSBmcm9tIFwicmVhY3QtbmF0aXZlXCI7XHJcbmltcG9ydCB7IExpbmVhckdyYWRpZW50IH0gZnJvbSBcImV4cG8tbGluZWFyLWdyYWRpZW50XCI7XHJcbmltcG9ydCBWb2NhYnVsYXJ5V29yZENhcmQgZnJvbSBcIi4uL1ZvY2FidWxhcnlXb3JkQ2FyZFwiOyAvLyDihpAgVXRpbGlzZSBsYSB2ZXJzaW9uIHJlZmFjdG9yaXPDqWVcclxuaW1wb3J0IGNyZWF0ZVN0eWxlcyBmcm9tIFwiLi9zdHlsZVwiO1xyXG5cclxuLyoqXHJcbiAqIOKaoSBWb2NhYnVsYXJ5V29yZFNlY3Rpb24gLSBWZXJzaW9uIGFqdXN0w6llXHJcbiAqIEdhcmRlIHRvdXRlIGxhIGxvZ2lxdWUgbcOpdGllciAoY29tcHRldXIsIG1vZGUsIGV0Yy4pXHJcbiAqIFV0aWxpc2UgbGUgbm91dmVhdSBWb2NhYnVsYXJ5V29yZENhcmQgcmVmYWN0b3Jpc8OpXHJcbiAqIFxyXG4gKiBAcGFyYW0ge29iamVjdH0gY3VycmVudFdvcmQgLSBNb3QgYWN0dWVsIGF2ZWMgc2VzIHByb3ByacOpdMOpc1xyXG4gKiBAcGFyYW0ge3N0cmluZ30gd29yZENvdW50ZXIgLSBDb21wdGV1ciBzdHlsw6kgKGV4OiBcIjM0IC8gODBcIilcclxuICogQHBhcmFtIHtzdHJpbmd9IGxldmVsIC0gTml2ZWF1IGFjdHVlbFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbGV2ZWxDb2xvciAtIENvdWxldXIgZHUgbml2ZWF1XHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gc2hvd1RyYW5zbGF0aW9uIC0gw4l0YXQgZCdhZmZpY2hhZ2UgZGUgbGEgdHJhZHVjdGlvblxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBvblRvZ2dsZVRyYW5zbGF0aW9uIC0gRm9uY3Rpb24gcG91ciB0b2dnbGUgdHJhZHVjdGlvblxyXG4gKi9cclxuY29uc3QgVm9jYWJ1bGFyeVdvcmRTZWN0aW9uID0gbWVtbygoe1xyXG4gIGN1cnJlbnRXb3JkLFxyXG4gIHdvcmRDb3VudGVyLFxyXG4gIGxldmVsQ29sb3IsXHJcbiAgc2hvd1RyYW5zbGF0aW9uLFxyXG4gIG9uVG9nZ2xlVHJhbnNsYXRpb24sXHJcbn0pID0+IHtcclxuICBjb25zdCBzdHlsZXMgPSBjcmVhdGVTdHlsZXMobGV2ZWxDb2xvcik7XHJcbiAgXHJcbiAgcmV0dXJuIChcclxuICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfT5cclxuICAgICAgey8qIPCfjq8gQ09NUFRFVVIgU1RZTMOJIC0gR2FyZGUgbGEgbG9naXF1ZSBleGlzdGFudGUgKi99XHJcbiAgICAgIDxDb3VudGVyU2VjdGlvbiB3b3JkQ291bnRlcj17d29yZENvdW50ZXJ9IGxldmVsQ29sb3I9e2xldmVsQ29sb3J9IHN0eWxlcz17c3R5bGVzfSAvPlxyXG5cclxuICAgICAgey8qIPCfjqggTk9VVkVMTEUgQ0FSVEUgRFUgTU9UIC0gVXRpbGlzZSBsYSB2ZXJzaW9uIHJlZmFjdG9yaXPDqWUgKi99XHJcbiAgICAgIDxWb2NhYnVsYXJ5V29yZENhcmRcclxuICAgICAgICB3b3JkPXtjdXJyZW50V29yZC53b3JkIHx8IFwiXCJ9XHJcbiAgICAgICAgdHJhbnNsYXRpb249e2N1cnJlbnRXb3JkLnRyYW5zbGF0aW9uIHx8IFwiXCJ9XHJcbiAgICAgICAgZGVmaW5pdGlvbj17Y3VycmVudFdvcmQuZGVmaW5pdGlvbiB8fCBcIlwifVxyXG4gICAgICAgIGV4YW1wbGU9e2N1cnJlbnRXb3JkLmV4YW1wbGUgfHwgXCJcIn1cclxuICAgICAgICBzaG93VHJhbnNsYXRpb249e3Nob3dUcmFuc2xhdGlvbn1cclxuICAgICAgICBvblRvZ2dsZVRyYW5zbGF0aW9uPXtvblRvZ2dsZVRyYW5zbGF0aW9ufVxyXG4gICAgICAgIGxldmVsQ29sb3I9e2xldmVsQ29sb3J9XHJcbiAgICAgIC8+XHJcbiAgICA8L1ZpZXc+XHJcbiAgKTtcclxufSk7XHJcblxyXG5jb25zdCBDb3VudGVyU2VjdGlvbiA9ICh7IHdvcmRDb3VudGVyLCBsZXZlbENvbG9yLCBzdHlsZXMgfSkgPT4gKFxyXG4gIDxWaWV3IHN0eWxlPXtzdHlsZXMuY291bnRlclNlY3Rpb259PlxyXG4gICAgPExpbmVhckdyYWRpZW50XHJcbiAgICAgIGNvbG9ycz17W2Ake2xldmVsQ29sb3J9MDhgLCBgJHtsZXZlbENvbG9yfTA0YCwgJ3RyYW5zcGFyZW50J119XHJcbiAgICAgIHN0YXJ0PXt7IHg6IDAsIHk6IDAgfX1cclxuICAgICAgZW5kPXt7IHg6IDEsIHk6IDEgfX1cclxuICAgICAgc3R5bGU9e3N0eWxlcy5jb3VudGVyR3JhZGllbnR9XHJcbiAgICA+XHJcbiAgICAgIHsvKiBDb21wdGV1ciBwcmluY2lwYWwgKi99XHJcbiAgICAgIDxWaWV3IHN0eWxlPXtbc3R5bGVzLmNvdW50ZXJCYWRnZSwgeyBib3JkZXJDb2xvcjogYCR7bGV2ZWxDb2xvcn0yMGAgfV19PiBcclxuICAgICAgICA8VGV4dCBzdHlsZT17W3N0eWxlcy5jb3VudGVyVGV4dCwgeyBjb2xvcjogbGV2ZWxDb2xvciB9XX0+IFxyXG4gICAgICAgICAge3dvcmRDb3VudGVyfVxyXG4gICAgICAgIDwvVGV4dD5cclxuICAgICAgPC9WaWV3PlxyXG4gICAgPC9MaW5lYXJHcmFkaWVudD5cclxuICA8L1ZpZXc+XHJcbik7XHJcblxyXG5Wb2NhYnVsYXJ5V29yZFNlY3Rpb24uZGlzcGxheU5hbWUgPSBcIlZvY2FidWxhcnlXb3JkU2VjdGlvblwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVm9jYWJ1bGFyeVdvcmRTZWN0aW9uOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSxJQUFBQSxNQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxtQkFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsbUJBQUEsR0FBQUMsc0JBQUEsQ0FBQUosT0FBQTtBQUNBLElBQUFLLE1BQUEsR0FBQUQsc0JBQUEsQ0FBQUosT0FBQTtBQUFtQyxJQUFBTSxXQUFBLEdBQUFOLE9BQUE7QUFjbkMsSUFBTU8scUJBQXFCLEdBQUcsSUFBQUMsV0FBSSxFQUFDLFVBQUFDLElBQUEsRUFNN0I7RUFBQSxJQUxKQyxXQUFXLEdBQUFELElBQUEsQ0FBWEMsV0FBVztJQUNYQyxXQUFXLEdBQUFGLElBQUEsQ0FBWEUsV0FB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