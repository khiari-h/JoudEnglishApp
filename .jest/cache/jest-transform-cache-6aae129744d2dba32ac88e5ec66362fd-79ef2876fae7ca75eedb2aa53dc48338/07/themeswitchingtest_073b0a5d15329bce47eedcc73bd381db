a2265111e842e080d226e80046dcf47e
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    },
    useRoute: function useRoute() {
      return {
        params: {}
      };
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _layout = _interopRequireDefault(require("../../app/_layout"));
var _AppProvider = require("../../src/contexts/AppProvider");
var _ThemeContext = require("../../src/contexts/ThemeContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Theme Switching Integration Test', function () {
  it('should apply theme changes across different screens', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AppProvider.AppProvider, {
        children: (0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
          children: (0, _jsxRuntime.jsx)(_layout.default, {})
        })
      })),
      getByText = _render.getByText,
      findByTestId = _render.findByTestId;
    var dashboardContainer = yield findByTestId('dashboard-container');
    var initialStyle = dashboardContainer.props.style;
    _reactNative.fireEvent.press(getByText(/Param√®tres/i));
    var themeSwitch = yield findByTestId('theme-switch');
    _reactNative.fireEvent.press(themeSwitch);
    var navigation = require('@react-navigation/native');
    _reactNative.fireEvent.press(navigation.useNavigation().goBack());
    var updatedDashboardContainer = yield findByTestId('dashboard-container');
    var updatedStyle = updatedDashboardContainer.props.style;
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsInVzZU5hdmlnYXRpb24iLCJuYXZpZ2F0ZSIsImZuIiwiZ29CYWNrIiwidXNlUm91dGUiLCJwYXJhbXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9sYXlvdXQiLCJfQXBwUHJvdmlkZXIiLCJfVGhlbWVDb250ZXh0IiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwiaXQiLCJkZWZhdWx0IiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsIkFwcFByb3ZpZGVyIiwiY2hpbGRyZW4iLCJUaGVtZVByb3ZpZGVyIiwiZ2V0QnlUZXh0IiwiZmluZEJ5VGVzdElkIiwiZGFzaGJvYXJkQ29udGFpbmVyIiwiaW5pdGlhbFN0eWxlIiwicHJvcHMiLCJzdHlsZSIsImZpcmVFdmVudCIsInByZXNzIiwidGhlbWVTd2l0Y2giLCJuYXZpZ2F0aW9uIiwidXBkYXRlZERhc2hib2FyZENvbnRhaW5lciIsInVwZGF0ZWRTdHlsZSJdLCJzb3VyY2VzIjpbInRoZW1lLXN3aXRjaGluZy50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IEFwcCBmcm9tICcuLi8uLi9hcHAvX2xheW91dCc7XG5pbXBvcnQgeyBBcHBQcm92aWRlciB9IGZyb20gJy4uLy4uL3NyYy9jb250ZXh0cy9BcHBQcm92aWRlcic7XG5pbXBvcnQgeyBUaGVtZUNvbnRleHQsIFRoZW1lUHJvdmlkZXIgfSBmcm9tICcuLi8uLi9zcmMvY29udGV4dHMvVGhlbWVDb250ZXh0JztcblxuamVzdC5tb2NrKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnLCAoKSA9PiAoe1xuICAuLi5qZXN0LnJlcXVpcmVBY3R1YWwoJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScpLFxuICB1c2VOYXZpZ2F0aW9uOiAoKSA9PiAoe1xuICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXG4gICAgZ29CYWNrOiBqZXN0LmZuKCksXG4gIH0pLFxuICB1c2VSb3V0ZTogKCkgPT4gKHsgcGFyYW1zOiB7fSB9KSxcbn0pKTtcblxuZGVzY3JpYmUoJ1RoZW1lIFN3aXRjaGluZyBJbnRlZ3JhdGlvbiBUZXN0JywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIGFwcGx5IHRoZW1lIGNoYW5nZXMgYWNyb3NzIGRpZmZlcmVudCBzY3JlZW5zJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0LCBmaW5kQnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICAgIDxBcHBQcm92aWRlcj5cbiAgICAgICAgPFRoZW1lUHJvdmlkZXI+XG4gICAgICAgICAgPEFwcCAvPlxuICAgICAgICA8L1RoZW1lUHJvdmlkZXI+XG4gICAgICA8L0FwcFByb3ZpZGVyPlxuICAgICk7XG5cbiAgICAvLyAxLiBWw6lyaWZpZXIgbGUgdGjDqG1lIGluaXRpYWwgc3VyIGxlIERhc2hib2FyZFxuICAgIGNvbnN0IGRhc2hib2FyZENvbnRhaW5lciA9IGF3YWl0IGZpbmRCeVRlc3RJZCgnZGFzaGJvYXJkLWNvbnRhaW5lcicpOyAvLyBBam91dGV6IGNlIHRlc3RJRCDDoCB2b3RyZSBEYXNoYm9hcmRcbiAgICBjb25zdCBpbml0aWFsU3R5bGUgPSBkYXNoYm9hcmRDb250YWluZXIucHJvcHMuc3R5bGU7XG4gICAgLy8gZXhwZWN0KGluaXRpYWxTdHlsZS5iYWNrZ3JvdW5kQ29sb3IpLnRvQmUoJyNGRkZGRkYnKTsgLy8gRXhlbXBsZSBwb3VyIGxlIHRow6htZSBjbGFpclxuXG4gICAgLy8gMi4gTmF2aWd1ZXIgdmVycyBsZXMgcGFyYW3DqHRyZXMgZXQgY2hhbmdlciBsZSB0aMOobWVcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KC9QYXJhbcOodHJlcy9pKSk7XG4gICAgY29uc3QgdGhlbWVTd2l0Y2ggPSBhd2FpdCBmaW5kQnlUZXN0SWQoJ3RoZW1lLXN3aXRjaCcpOyAvLyBBam91dGV6IGNlIHRlc3RJRCDDoCB2b3RyZSBpbnRlcnJ1cHRldXIgZGUgdGjDqG1lXG4gICAgZmlyZUV2ZW50LnByZXNzKHRoZW1lU3dpdGNoKTtcblxuICAgIC8vIDMuIFJldmVuaXIgYXUgRGFzaGJvYXJkXG4gICAgY29uc3QgbmF2aWdhdGlvbiA9IHJlcXVpcmUoJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScpO1xuICAgIGZpcmVFdmVudC5wcmVzcyhuYXZpZ2F0aW9uLnVzZU5hdmlnYXRpb24oKS5nb0JhY2soKSk7XG5cbiAgICAvLyA0LiBWw6lyaWZpZXIgcXVlIGxlIG5vdXZlYXUgdGjDqG1lIGVzdCBhcHBsaXF1w6lcbiAgICBjb25zdCB1cGRhdGVkRGFzaGJvYXJkQ29udGFpbmVyID0gYXdhaXQgZmluZEJ5VGVzdElkKCdkYXNoYm9hcmQtY29udGFpbmVyJyk7XG4gICAgY29uc3QgdXBkYXRlZFN0eWxlID0gdXBkYXRlZERhc2hib2FyZENvbnRhaW5lci5wcm9wcy5zdHlsZTtcbiAgICAvLyBleHBlY3QodXBkYXRlZFN0eWxlLmJhY2tncm91bmRDb2xvcikudG9CZSgnIzAwMDAwMCcpOyAvLyBFeGVtcGxlIHBvdXIgbGUgdGjDqG1lIHNvbWJyZVxuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFPQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsMEJBQTBCLEVBQUU7RUFBQSxPQUFBQyxNQUFBLENBQUFDLE1BQUEsS0FDakNDLElBQUksQ0FBQ0MsYUFBYSxDQUFDLDBCQUEwQixDQUFDO0lBQ2pEQyxhQUFhLEVBQUUsU0FBZkEsYUFBYUEsQ0FBQTtNQUFBLE9BQVM7UUFDcEJDLFFBQVEsRUFBRUgsSUFBSSxDQUFDSSxFQUFFLENBQUMsQ0FBQztRQUNuQkMsTUFBTSxFQUFFTCxJQUFJLENBQUNJLEVBQUUsQ0FBQztNQUNsQixDQUFDO0lBQUEsQ0FBQztJQUNGRSxRQUFRLEVBQUUsU0FBVkEsUUFBUUEsQ0FBQTtNQUFBLE9BQVM7UUFBRUMsTUFBTSxFQUFFLENBQUM7TUFBRSxDQUFDO0lBQUE7RUFBQztBQUFBLENBQ2hDLENBQUM7QUFBQyxJQUFBQyxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsa0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQWJKLElBQUFFLE1BQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLFlBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLE9BQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFLLFlBQUEsR0FBQUwsT0FBQTtBQUNBLElBQUFNLGFBQUEsR0FBQU4sT0FBQTtBQUE4RSxJQUFBTyxXQUFBLEdBQUFQLE9BQUE7QUFBQSxTQUFBYixZQUFBO0VBQUEsSUFBQXFCLFFBQUEsR0FBQVIsT0FBQTtJQUFBVCxJQUFBLEdBQUFpQixRQUFBLENBQUFqQixJQUFBO0VBQUFKLFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFJLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQVc5RWtCLFFBQVEsQ0FBQyxrQ0FBa0MsRUFBRSxZQUFNO0VBQ2pEQyxFQUFFLENBQUMscURBQXFELE1BQUFULGtCQUFBLENBQUFVLE9BQUEsRUFBRSxhQUFZO0lBQ3BFLElBQUFDLE9BQUEsR0FBb0MsSUFBQUMsbUJBQU0sRUFDeEMsSUFBQU4sV0FBQSxDQUFBTyxHQUFBLEVBQUNULFlBQUEsQ0FBQVUsV0FBVztRQUFBQyxRQUFBLEVBQ1YsSUFBQVQsV0FBQSxDQUFBTyxHQUFBLEVBQUNSLGFBQUEsQ0FBQVcsYUFBYTtVQUFBRCxRQUFBLEVBQ1osSUFBQVQsV0FBQSxDQUFBTyxHQUFBLEVBQUNWLE9BQUEsQ0FBQU8sT0FBRyxJQUFFO1FBQUMsQ0FDTTtNQUFDLENBQ0wsQ0FDZixDQUFDO01BTk9PLFNBQVMsR0FBQU4sT0FBQSxDQUFUTSxTQUFTO01BQUVDLFlBQVksR0FBQVAsT0FBQSxDQUFaTyxZQUFZO0lBUy9CLElBQU1DLGtCQUFrQixTQUFTRCxZQUFZLENBQUMscUJBQXFCLENBQUM7SUFDcEUsSUFBTUUsWUFBWSxHQUFHRCxrQkFBa0IsQ0FBQ0UsS0FBSyxDQUFDQyxLQUFLO0lBSW5EQyxzQkFBUyxDQUFDQyxLQUFLLENBQUNQLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN6QyxJQUFNUSxXQUFXLFNBQVNQLFlBQVksQ0FBQyxjQUFjLENBQUM7SUFDdERLLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0MsV0FBVyxDQUFDO0lBRzVCLElBQU1DLFVBQVUsR0FBRzNCLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQztJQUN0RHdCLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0UsVUFBVSxDQUFDbEMsYUFBYSxDQUFDLENBQUMsQ0FBQ0csTUFBTSxDQUFDLENBQUMsQ0FBQztJQUdwRCxJQUFNZ0MseUJBQXlCLFNBQVNULFlBQVksQ0FBQyxxQkFBcUIsQ0FBQztJQUMzRSxJQUFNVSxZQUFZLEdBQUdELHlCQUF5QixDQUFDTixLQUFLLENBQUNDLEtBQUs7RUFFNUQsQ0FBQyxFQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119