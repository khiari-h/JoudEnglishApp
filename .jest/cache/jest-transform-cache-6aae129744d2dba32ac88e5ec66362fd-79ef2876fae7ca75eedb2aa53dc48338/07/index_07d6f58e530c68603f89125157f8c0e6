ab719b6e0339c6c67fab8aafda81352e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _reactNative = require("react-native");
var _native = require("@react-navigation/native");
var _expoRouter = require("expo-router");
var _react = require("react");
var _Container = _interopRequireWildcard(require("../../../components/layout/Container"));
var _VocabularyHeader = _interopRequireDefault(require("./VocabularyHeader"));
var _VocabularyCategorySelector = _interopRequireDefault(require("./VocabularyCategorySelector"));
var _VocabularyProgress = _interopRequireDefault(require("./VocabularyProgress"));
var _VocabularyWordSection = _interopRequireDefault(require("./VocabularyWordSection"));
var _VocabularyNavigation = _interopRequireDefault(require("./VocabularyNavigation"));
var _useVocabulary2 = _interopRequireDefault(require("./hooks/useVocabulary"));
var _useLastActivity2 = _interopRequireDefault(require("../../../hooks/useLastActivity"));
var _vocabularyDataHelper = require("../../../utils/vocabulary/vocabularyDataHelper");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var VocabularyExercise = function VocabularyExercise(_ref) {
  var route = _ref.route;
  var _ref2 = route.params || {},
    level = _ref2.level,
    mode = _ref2.mode;
  var navigation = (0, _native.useNavigation)();
  var styles = (0, _style.default)();
  var _useLastActivity = (0, _useLastActivity2.default)(),
    saveActivity = _useLastActivity.saveActivity;
  var finalMode = mode || ((0, _vocabularyDataHelper.isBonusLevel)(level) ? "fast" : "classic");
  var levelColor = (0, _vocabularyDataHelper.getLevelColor)(level);
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    vocabularyData = _useState2[0],
    setVocabularyData = _useState2[1];
  (0, _react.useEffect)(function () {
    var isMounted = true;
    var load = function () {
      var _ref3 = (0, _asyncToGenerator2.default)(function* () {
        var data = yield (0, _vocabularyDataHelper.loadVocabularyData)(level, finalMode);
        if (isMounted) setVocabularyData(data);
      });
      return function load() {
        return _ref3.apply(this, arguments);
      };
    }();
    load();
    return function () {
      isMounted = false;
    };
  }, [level, finalMode]);
  var _useVocabulary = (0, _useVocabulary2.default)(vocabularyData, level, finalMode),
    categoryIndex = _useVocabulary.categoryIndex,
    wordIndex = _useVocabulary.wordIndex,
    showTranslation = _useVocabulary.showTranslation,
    completedWords = _useVocabulary.completedWords,
    loaded = _useVocabulary.loaded,
    showDetailedProgress = _useVocabulary.showDetailedProgress,
    currentWord = _useVocabulary.currentWord,
    currentCategory = _useVocabulary.currentCategory,
    changeCategory = _useVocabulary.changeCategory,
    toggleTranslation = _useVocabulary.toggleTranslation,
    toggleDetailedProgress = _useVocabulary.toggleDetailedProgress,
    handleNext = _useVocabulary.handleNext,
    handlePrevious = _useVocabulary.handlePrevious,
    canGoToPrevious = _useVocabulary.canGoToPrevious,
    isLastWordInExercise = _useVocabulary.isLastWordInExercise,
    display = _useVocabulary.display,
    saveData = _useVocabulary.saveData;
  (0, _react.useEffect)(function () {
    if (!loaded || !vocabularyData || !currentWord) return;
    var totalWords = 15;
    if (vocabularyData.categories && Array.isArray(vocabularyData.categories)) {
      totalWords = vocabularyData.categories.reduce(function (total, cat) {
        var _cat$words;
        return total + (((_cat$words = cat.words) == null ? void 0 : _cat$words.length) || 0);
      }, 0);
    } else if (vocabularyData.exercises && Array.isArray(vocabularyData.exercises)) {
      totalWords = vocabularyData.exercises.reduce(function (total, ex) {
        var _ex$words;
        return total + (((_ex$words = ex.words) == null ? void 0 : _ex$words.length) || 0);
      }, 0);
    } else if (vocabularyData.words && Array.isArray(vocabularyData.words)) {
      totalWords = vocabularyData.words.length;
    }
    var activityData = {
      title: `Vocabulaire ${finalMode === "fast" ? "Fast" : ""}`,
      level: level,
      type: "vocabulary",
      mode: finalMode,
      metadata: {
        word: wordIndex,
        totalWords: totalWords,
        category: (currentCategory == null ? void 0 : currentCategory.name) || "Général",
        categoryIndex: categoryIndex,
        wordIndex: wordIndex
      }
    };
    saveActivity(activityData);
  }, [wordIndex]);
  var handleBackPress = (0, _react.useCallback)(function () {
    _expoRouter.router.push({
      pathname: "/tabs/exerciseSelection",
      params: {
        level: level
      }
    });
  }, [level]);
  var handleCategoryChange = (0, _react.useCallback)(function (index) {
    return changeCategory(index);
  }, [changeCategory]);
  var handleCategoryProgressPress = (0, _react.useCallback)(function (index) {
    return changeCategory(index);
  }, [changeCategory]);
  var handleToggleProgressDetails = (0, _react.useCallback)(function () {
    return toggleDetailedProgress();
  }, [toggleDetailedProgress]);
  var handleNextWord = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    var result = handleNext();
    if (typeof saveData === 'function') {
      yield saveData();
    }
    if (result.completed) {
      navigation.goBack();
    }
  }), [handleNext, navigation, saveData]);
  var handlePreviousWord = (0, _react.useCallback)(function () {
    return handlePrevious();
  }, [handlePrevious]);
  if (!loaded || !vocabularyData) {
    return (0, _jsxRuntime.jsx)(_Container.default, {
      safeArea: true,
      safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
      backgroundColor: "#f8fafc",
      statusBarStyle: "dark-content",
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.loadingContainer,
        children: (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
          testID: "activity-indicator",
          size: "large",
          color: levelColor
        })
      })
    });
  }
  return (0, _jsxRuntime.jsxs)(_Container.default, {
    safeArea: true,
    safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
    withScrollView: true,
    backgroundColor: "#f8fafc",
    statusBarStyle: "dark-content",
    withPadding: false,
    scrollViewProps: {
      showsVerticalScrollIndicator: false,
      contentContainerStyle: styles.scrollContent
    },
    children: [(0, _jsxRuntime.jsx)(_VocabularyHeader.default, {
      level: level,
      mode: finalMode,
      onBackPress: handleBackPress
    }), (0, _jsxRuntime.jsx)(_VocabularyProgress.default, {
      vocabularyData: vocabularyData,
      completedWords: completedWords,
      levelColor: levelColor,
      expanded: showDetailedProgress,
      onToggleExpand: handleToggleProgressDetails,
      onCategoryPress: handleCategoryProgressPress
    }), (0, _jsxRuntime.jsx)(_VocabularyCategorySelector.default, {
      categories: display.categories,
      selectedIndex: categoryIndex,
      onSelectCategory: handleCategoryChange,
      levelColor: levelColor
    }), (0, _jsxRuntime.jsx)(_VocabularyWordSection.default, {
      currentWord: currentWord,
      wordCounter: display.wordCounter,
      mode: finalMode,
      level: level,
      levelColor: levelColor,
      showTranslation: showTranslation,
      onToggleTranslation: toggleTranslation
    }), (0, _jsxRuntime.jsx)(_VocabularyNavigation.default, {
      onNext: handleNextWord,
      onPrevious: handlePreviousWord,
      canGoPrevious: canGoToPrevious,
      isLast: isLastWordInExercise,
      levelColor: levelColor
    })]
  });
};
var _default = exports.default = VocabularyExercise;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX25hdGl2ZSIsIl9leHBvUm91dGVyIiwiX3JlYWN0IiwiX0NvbnRhaW5lciIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX1ZvY2FidWxhcnlIZWFkZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX1ZvY2FidWxhcnlDYXRlZ29yeVNlbGVjdG9yIiwiX1ZvY2FidWxhcnlQcm9ncmVzcyIsIl9Wb2NhYnVsYXJ5V29yZFNlY3Rpb24iLCJfVm9jYWJ1bGFyeU5hdmlnYXRpb24iLCJfdXNlVm9jYWJ1bGFyeTIiLCJfdXNlTGFzdEFjdGl2aXR5MiIsIl92b2NhYnVsYXJ5RGF0YUhlbHBlciIsIl9zdHlsZSIsIl9qc3hSdW50aW1lIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsIl90IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJWb2NhYnVsYXJ5RXhlcmNpc2UiLCJfcmVmIiwicm91dGUiLCJfcmVmMiIsInBhcmFtcyIsImxldmVsIiwibW9kZSIsIm5hdmlnYXRpb24iLCJ1c2VOYXZpZ2F0aW9uIiwic3R5bGVzIiwiY3JlYXRlU3R5bGVzIiwiX3VzZUxhc3RBY3Rpdml0eSIsInVzZUxhc3RBY3Rpdml0eSIsInNhdmVBY3Rpdml0eSIsImZpbmFsTW9kZSIsImlzQm9udXNMZXZlbCIsImxldmVsQ29sb3IiLCJnZXRMZXZlbENvbG9yIiwiX3VzZVN0YXRlIiwidXNlU3RhdGUiLCJfdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkyIiwidm9jYWJ1bGFyeURhdGEiLCJzZXRWb2NhYnVsYXJ5RGF0YSIsInVzZUVmZmVjdCIsImlzTW91bnRlZCIsImxvYWQiLCJfcmVmMyIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImRhdGEiLCJsb2FkVm9jYWJ1bGFyeURhdGEiLCJhcHBseSIsImFyZ3VtZW50cyIsIl91c2VWb2NhYnVsYXJ5IiwidXNlVm9jYWJ1bGFyeSIsImNhdGVnb3J5SW5kZXgiLCJ3b3JkSW5kZXgiLCJzaG93VHJhbnNsYXRpb24iLCJjb21wbGV0ZWRXb3JkcyIsImxvYWRlZCIsInNob3dEZXRhaWxlZFByb2dyZXNzIiwiY3VycmVudFdvcmQiLCJjdXJyZW50Q2F0ZWdvcnkiLCJjaGFuZ2VDYXRlZ29yeSIsInRvZ2dsZVRyYW5zbGF0aW9uIiwidG9nZ2xlRGV0YWlsZWRQcm9ncmVzcyIsImhhbmRsZU5leHQiLCJoYW5kbGVQcmV2aW91cyIsImNhbkdvVG9QcmV2aW91cyIsImlzTGFzdFdvcmRJbkV4ZXJjaXNlIiwiZGlzcGxheSIsInNhdmVEYXRhIiwidG90YWxXb3JkcyIsImNhdGVnb3JpZXMiLCJBcnJheSIsImlzQXJyYXkiLCJyZWR1Y2UiLCJ0b3RhbCIsImNhdCIsIl9jYXQkd29yZHMiLCJ3b3JkcyIsImxlbmd0aCIsImV4ZXJjaXNlcyIsImV4IiwiX2V4JHdvcmRzIiwiYWN0aXZpdHlEYXRhIiwidGl0bGUiLCJ0eXBlIiwibWV0YWRhdGEiLCJ3b3JkIiwiY2F0ZWdvcnkiLCJuYW1lIiwiaGFuZGxlQmFja1ByZXNzIiwidXNlQ2FsbGJhY2siLCJyb3V0ZXIiLCJwdXNoIiwicGF0aG5hbWUiLCJoYW5kbGVDYXRlZ29yeUNoYW5nZSIsImluZGV4IiwiaGFuZGxlQ2F0ZWdvcnlQcm9ncmVzc1ByZXNzIiwiaGFuZGxlVG9nZ2xlUHJvZ3Jlc3NEZXRhaWxzIiwiaGFuZGxlTmV4dFdvcmQiLCJyZXN1bHQiLCJjb21wbGV0ZWQiLCJnb0JhY2siLCJoYW5kbGVQcmV2aW91c1dvcmQiLCJqc3giLCJzYWZlQXJlYSIsInNhZmVBcmVhRWRnZXMiLCJDT05UQUlORVJfU0FGRV9FREdFUyIsIkFMTCIsImJhY2tncm91bmRDb2xvciIsInN0YXR1c0JhclN0eWxlIiwiY2hpbGRyZW4iLCJWaWV3Iiwic3R5bGUiLCJsb2FkaW5nQ29udGFpbmVyIiwiQWN0aXZpdHlJbmRpY2F0b3IiLCJ0ZXN0SUQiLCJzaXplIiwiY29sb3IiLCJqc3hzIiwid2l0aFNjcm9sbFZpZXciLCJ3aXRoUGFkZGluZyIsInNjcm9sbFZpZXdQcm9wcyIsInNob3dzVmVydGljYWxTY3JvbGxJbmRpY2F0b3IiLCJjb250ZW50Q29udGFpbmVyU3R5bGUiLCJzY3JvbGxDb250ZW50Iiwib25CYWNrUHJlc3MiLCJleHBhbmRlZCIsIm9uVG9nZ2xlRXhwYW5kIiwib25DYXRlZ29yeVByZXNzIiwic2VsZWN0ZWRJbmRleCIsIm9uU2VsZWN0Q2F0ZWdvcnkiLCJ3b3JkQ291bnRlciIsIm9uVG9nZ2xlVHJhbnNsYXRpb24iLCJvbk5leHQiLCJvblByZXZpb3VzIiwiY2FuR29QcmV2aW91cyIsImlzTGFzdCIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFZvY2FidWxhcnlFeGVyY2lzZS9pbmRleC5qcyAtIEJPVUNMRSBJTkZJTklFIENPUlJJR8OJRVxuXG5pbXBvcnQgeyBWaWV3LCBBY3Rpdml0eUluZGljYXRvciB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcbmltcG9ydCB7IHVzZU5hdmlnYXRpb24gfSBmcm9tIFwiQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlXCI7XG5pbXBvcnQgeyByb3V0ZXIgfSBmcm9tIFwiZXhwby1yb3V0ZXJcIjtcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2ssIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCBDb250YWluZXIsIHsgQ09OVEFJTkVSX1NBRkVfRURHRVMgfSBmcm9tIFwiLi4vLi4vLi4vY29tcG9uZW50cy9sYXlvdXQvQ29udGFpbmVyXCI7XG5pbXBvcnQgVm9jYWJ1bGFyeUhlYWRlciBmcm9tIFwiLi9Wb2NhYnVsYXJ5SGVhZGVyXCI7XG5pbXBvcnQgVm9jYWJ1bGFyeUNhdGVnb3J5U2VsZWN0b3IgZnJvbSBcIi4vVm9jYWJ1bGFyeUNhdGVnb3J5U2VsZWN0b3JcIjtcbmltcG9ydCBWb2NhYnVsYXJ5UHJvZ3Jlc3MgZnJvbSBcIi4vVm9jYWJ1bGFyeVByb2dyZXNzXCI7XG5pbXBvcnQgVm9jYWJ1bGFyeVdvcmRTZWN0aW9uIGZyb20gXCIuL1ZvY2FidWxhcnlXb3JkU2VjdGlvblwiO1xuaW1wb3J0IFZvY2FidWxhcnlOYXZpZ2F0aW9uIGZyb20gXCIuL1ZvY2FidWxhcnlOYXZpZ2F0aW9uXCI7XG5cbmltcG9ydCB1c2VWb2NhYnVsYXJ5IGZyb20gXCIuL2hvb2tzL3VzZVZvY2FidWxhcnlcIjtcbmltcG9ydCB1c2VMYXN0QWN0aXZpdHkgZnJvbSBcIi4uLy4uLy4uL2hvb2tzL3VzZUxhc3RBY3Rpdml0eVwiO1xuaW1wb3J0IHsgaXNCb251c0xldmVsLCBnZXRMZXZlbENvbG9yLCBnZXRWb2NhYnVsYXJ5RGF0YSwgbG9hZFZvY2FidWxhcnlEYXRhIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3ZvY2FidWxhcnkvdm9jYWJ1bGFyeURhdGFIZWxwZXJcIjtcbmltcG9ydCBjcmVhdGVTdHlsZXMgZnJvbSBcIi4vc3R5bGVcIjtcblxuY29uc3QgVm9jYWJ1bGFyeUV4ZXJjaXNlID0gKHsgcm91dGUgfSkgPT4ge1xuICBjb25zdCB7IGxldmVsLCBtb2RlIH0gPSByb3V0ZS5wYXJhbXMgfHwge307XG4gIGNvbnN0IG5hdmlnYXRpb24gPSB1c2VOYXZpZ2F0aW9uKCk7XG4gIGNvbnN0IHN0eWxlcyA9IGNyZWF0ZVN0eWxlcygpO1xuICBjb25zdCB7IHNhdmVBY3Rpdml0eSB9ID0gdXNlTGFzdEFjdGl2aXR5KCk7XG5cbiAgLy8gRGF0YVxuICBjb25zdCBmaW5hbE1vZGUgPSBtb2RlIHx8IChpc0JvbnVzTGV2ZWwobGV2ZWwpID8gXCJmYXN0XCIgOiBcImNsYXNzaWNcIik7XG4gIGNvbnN0IGxldmVsQ29sb3IgPSBnZXRMZXZlbENvbG9yKGxldmVsKTtcbiAgY29uc3QgW3ZvY2FidWxhcnlEYXRhLCBzZXRWb2NhYnVsYXJ5RGF0YV0gPSB1c2VTdGF0ZShudWxsKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBpc01vdW50ZWQgPSB0cnVlO1xuICAgIGNvbnN0IGxvYWQgPSBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgbG9hZFZvY2FidWxhcnlEYXRhKGxldmVsLCBmaW5hbE1vZGUpO1xuICAgICAgaWYgKGlzTW91bnRlZCkgc2V0Vm9jYWJ1bGFyeURhdGEoZGF0YSk7XG4gICAgfTtcbiAgICBsb2FkKCk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlzTW91bnRlZCA9IGZhbHNlO1xuICAgIH07XG4gIH0sIFtsZXZlbCwgZmluYWxNb2RlXSk7XG5cbiAgLy8gSG9vayB1bmlmacOpXG4gIGNvbnN0IHtcbiAgICBjYXRlZ29yeUluZGV4LFxuICAgIHdvcmRJbmRleCxcbiAgICBzaG93VHJhbnNsYXRpb24sXG4gICAgY29tcGxldGVkV29yZHMsXG4gICAgbG9hZGVkLFxuICAgIHNob3dEZXRhaWxlZFByb2dyZXNzLFxuICAgIGN1cnJlbnRXb3JkLFxuICAgIGN1cnJlbnRDYXRlZ29yeSxcbiAgICBjaGFuZ2VDYXRlZ29yeSxcbiAgICB0b2dnbGVUcmFuc2xhdGlvbixcbiAgICB0b2dnbGVEZXRhaWxlZFByb2dyZXNzLFxuICAgIGhhbmRsZU5leHQsXG4gICAgaGFuZGxlUHJldmlvdXMsXG4gICAgY2FuR29Ub1ByZXZpb3VzLFxuICAgIGlzTGFzdFdvcmRJbkV4ZXJjaXNlLFxuICAgIGRpc3BsYXksXG4gICAgc2F2ZURhdGEsIC8vIEFqb3V0w6kgaWNpXG4gIH0gPSB1c2VWb2NhYnVsYXJ5KHZvY2FidWxhcnlEYXRhLCBsZXZlbCwgZmluYWxNb2RlKTtcblxuICAvLyA9PT09PT09PT09PT09PT09PT09IFNBVVZFR0FSREUgQUNUSVZJVMOJIFNJTVBMSUZJw4lFID09PT09PT09PT09PT09PT09PT1cbiAgXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8g4pyFIENPTkRJVElPTiBTSU1QTElGScOJRSBwb3VyIMOpdml0ZXIgYm91Y2xlIGluZmluaWVcbiAgICBpZiAoIWxvYWRlZCB8fCAhdm9jYWJ1bGFyeURhdGEgfHwgIWN1cnJlbnRXb3JkKSByZXR1cm47XG5cbiAgICAvLyDinIUgRMOJUEVOREFOQ0VTIExJTUlUw4lFUyAtIHNldWxlbWVudCB3b3JkSW5kZXggY2hhbmdlXG4gICAgbGV0IHRvdGFsV29yZHMgPSAxNTsgLy8gZmFsbGJhY2tcbiAgICBcbiAgICBpZiAodm9jYWJ1bGFyeURhdGEuY2F0ZWdvcmllcyAmJiBBcnJheS5pc0FycmF5KHZvY2FidWxhcnlEYXRhLmNhdGVnb3JpZXMpKSB7XG4gICAgICB0b3RhbFdvcmRzID0gdm9jYWJ1bGFyeURhdGEuY2F0ZWdvcmllcy5yZWR1Y2UoKHRvdGFsLCBjYXQpID0+IHRvdGFsICsgKGNhdC53b3Jkcz8ubGVuZ3RoIHx8IDApLCAwKTtcbiAgICB9IGVsc2UgaWYgKHZvY2FidWxhcnlEYXRhLmV4ZXJjaXNlcyAmJiBBcnJheS5pc0FycmF5KHZvY2FidWxhcnlEYXRhLmV4ZXJjaXNlcykpIHtcbiAgICAgIHRvdGFsV29yZHMgPSB2b2NhYnVsYXJ5RGF0YS5leGVyY2lzZXMucmVkdWNlKCh0b3RhbCwgZXgpID0+IHRvdGFsICsgKGV4LndvcmRzPy5sZW5ndGggfHwgMCksIDApO1xuICAgIH0gZWxzZSBpZiAodm9jYWJ1bGFyeURhdGEud29yZHMgJiYgQXJyYXkuaXNBcnJheSh2b2NhYnVsYXJ5RGF0YS53b3JkcykpIHtcbiAgICAgIHRvdGFsV29yZHMgPSB2b2NhYnVsYXJ5RGF0YS53b3Jkcy5sZW5ndGg7XG4gICAgfVxuXG4gICAgY29uc3QgYWN0aXZpdHlEYXRhID0ge1xuICAgICAgdGl0bGU6IGBWb2NhYnVsYWlyZSAke2ZpbmFsTW9kZSA9PT0gXCJmYXN0XCIgPyBcIkZhc3RcIiA6IFwiXCJ9YCxcbiAgICAgIGxldmVsLFxuICAgICAgdHlwZTogXCJ2b2NhYnVsYXJ5XCIsXG4gICAgICBtb2RlOiBmaW5hbE1vZGUsXG4gICAgICBtZXRhZGF0YToge1xuICAgICAgICB3b3JkOiB3b3JkSW5kZXgsIC8vIOKchSBJbmRleCBwb3VyIHByb2dyZXNzaW9uICgwLWJhc2VkKVxuICAgICAgICB0b3RhbFdvcmRzLFxuICAgICAgICBjYXRlZ29yeTogY3VycmVudENhdGVnb3J5Py5uYW1lIHx8IFwiR8OpbsOpcmFsXCIsXG4gICAgICAgIGNhdGVnb3J5SW5kZXgsXG4gICAgICAgIHdvcmRJbmRleFxuICAgICAgfVxuICAgIH07XG5cbiAgICBzYXZlQWN0aXZpdHkoYWN0aXZpdHlEYXRhKTtcbiAgfSwgW3dvcmRJbmRleF0pOyAvLyDinIUgU0VVTEVNRU5UIHdvcmRJbmRleCAtIHBsdXMgZGUgYm91Y2xlICFcblxuICAvLyBIYW5kbGVyc1xuICBjb25zdCBoYW5kbGVCYWNrUHJlc3MgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgcm91dGVyLnB1c2goe1xuICAgICAgcGF0aG5hbWU6IFwiL3RhYnMvZXhlcmNpc2VTZWxlY3Rpb25cIixcbiAgICAgIHBhcmFtczogeyBsZXZlbCB9XG4gICAgfSk7XG4gIH0sIFtsZXZlbF0pO1xuXG4gIGNvbnN0IGhhbmRsZUNhdGVnb3J5Q2hhbmdlID0gdXNlQ2FsbGJhY2soKGluZGV4KSA9PiBjaGFuZ2VDYXRlZ29yeShpbmRleCksIFtjaGFuZ2VDYXRlZ29yeV0pO1xuICBjb25zdCBoYW5kbGVDYXRlZ29yeVByb2dyZXNzUHJlc3MgPSB1c2VDYWxsYmFjaygoaW5kZXgpID0+IGNoYW5nZUNhdGVnb3J5KGluZGV4KSwgW2NoYW5nZUNhdGVnb3J5XSk7XG4gIGNvbnN0IGhhbmRsZVRvZ2dsZVByb2dyZXNzRGV0YWlscyA9IHVzZUNhbGxiYWNrKCgpID0+IHRvZ2dsZURldGFpbGVkUHJvZ3Jlc3MoKSwgW3RvZ2dsZURldGFpbGVkUHJvZ3Jlc3NdKTtcblxuICBjb25zdCBoYW5kbGVOZXh0V29yZCA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBoYW5kbGVOZXh0KCk7XG4gICAgLy8gQXR0ZW5kcmUgbGEgc2F1dmVnYXJkZSBhdmFudCBkZSBuYXZpZ3VlclxuICAgIGlmICh0eXBlb2Ygc2F2ZURhdGEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGF3YWl0IHNhdmVEYXRhKCk7XG4gICAgfVxuICAgIGlmIChyZXN1bHQuY29tcGxldGVkKSB7XG4gICAgICBuYXZpZ2F0aW9uLmdvQmFjaygpO1xuICAgIH1cbiAgfSwgW2hhbmRsZU5leHQsIG5hdmlnYXRpb24sIHNhdmVEYXRhXSk7XG5cbiAgY29uc3QgaGFuZGxlUHJldmlvdXNXb3JkID0gdXNlQ2FsbGJhY2soKCkgPT4gaGFuZGxlUHJldmlvdXMoKSwgW2hhbmRsZVByZXZpb3VzXSk7XG5cbiAgLy8gTG9hZGluZyBzdGF0ZVxuICBpZiAoIWxvYWRlZCB8fCAhdm9jYWJ1bGFyeURhdGEpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPENvbnRhaW5lclxuICAgICAgICBzYWZlQXJlYVxuICAgICAgICBzYWZlQXJlYUVkZ2VzPXtDT05UQUlORVJfU0FGRV9FREdFUy5BTEx9XG4gICAgICAgIGJhY2tncm91bmRDb2xvcj1cIiNmOGZhZmNcIlxuICAgICAgICBzdGF0dXNCYXJTdHlsZT1cImRhcmstY29udGVudFwiXG4gICAgICA+XG4gICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMubG9hZGluZ0NvbnRhaW5lcn0+XG4gICAgICAgICAgPEFjdGl2aXR5SW5kaWNhdG9yIHRlc3RJRD1cImFjdGl2aXR5LWluZGljYXRvclwiIHNpemU9XCJsYXJnZVwiIGNvbG9yPXtsZXZlbENvbG9yfSAvPlxuICAgICAgICA8L1ZpZXc+XG4gICAgICA8L0NvbnRhaW5lcj5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8Q29udGFpbmVyXG4gICAgICBzYWZlQXJlYVxuICAgICAgc2FmZUFyZWFFZGdlcz17Q09OVEFJTkVSX1NBRkVfRURHRVMuQUxMfVxuICAgICAgd2l0aFNjcm9sbFZpZXdcbiAgICAgIGJhY2tncm91bmRDb2xvcj1cIiNmOGZhZmNcIlxuICAgICAgc3RhdHVzQmFyU3R5bGU9XCJkYXJrLWNvbnRlbnRcIlxuICAgICAgd2l0aFBhZGRpbmc9e2ZhbHNlfVxuICAgICAgc2Nyb2xsVmlld1Byb3BzPXt7XG4gICAgICAgIHNob3dzVmVydGljYWxTY3JvbGxJbmRpY2F0b3I6IGZhbHNlLFxuICAgICAgICBjb250ZW50Q29udGFpbmVyU3R5bGU6IHN0eWxlcy5zY3JvbGxDb250ZW50LFxuICAgICAgfX1cbiAgICA+XG4gICAgICA8Vm9jYWJ1bGFyeUhlYWRlclxuICAgICAgICBsZXZlbD17bGV2ZWx9XG4gICAgICAgIG1vZGU9e2ZpbmFsTW9kZX1cbiAgICAgICAgb25CYWNrUHJlc3M9e2hhbmRsZUJhY2tQcmVzc31cbiAgICAgIC8+XG5cbiAgICAgIDxWb2NhYnVsYXJ5UHJvZ3Jlc3NcbiAgICAgICAgdm9jYWJ1bGFyeURhdGE9e3ZvY2FidWxhcnlEYXRhfVxuICAgICAgICBjb21wbGV0ZWRXb3Jkcz17Y29tcGxldGVkV29yZHN9XG4gICAgICAgIGxldmVsQ29sb3I9e2xldmVsQ29sb3J9XG4gICAgICAgIGV4cGFuZGVkPXtzaG93RGV0YWlsZWRQcm9ncmVzc31cbiAgICAgICAgb25Ub2dnbGVFeHBhbmQ9e2hhbmRsZVRvZ2dsZVByb2dyZXNzRGV0YWlsc31cbiAgICAgICAgb25DYXRlZ29yeVByZXNzPXtoYW5kbGVDYXRlZ29yeVByb2dyZXNzUHJlc3N9XG4gICAgICAvPlxuXG4gICAgICA8Vm9jYWJ1bGFyeUNhdGVnb3J5U2VsZWN0b3JcbiAgICAgICAgY2F0ZWdvcmllcz17ZGlzcGxheS5jYXRlZ29yaWVzfVxuICAgICAgICBzZWxlY3RlZEluZGV4PXtjYXRlZ29yeUluZGV4fVxuICAgICAgICBvblNlbGVjdENhdGVnb3J5PXtoYW5kbGVDYXRlZ29yeUNoYW5nZX1cbiAgICAgICAgbGV2ZWxDb2xvcj17bGV2ZWxDb2xvcn1cbiAgICAgIC8+XG5cbiAgICAgIDxWb2NhYnVsYXJ5V29yZFNlY3Rpb25cbiAgICAgICAgY3VycmVudFdvcmQ9e2N1cnJlbnRXb3JkfVxuICAgICAgICB3b3JkQ291bnRlcj17ZGlzcGxheS53b3JkQ291bnRlcn1cbiAgICAgICAgbW9kZT17ZmluYWxNb2RlfVxuICAgICAgICBsZXZlbD17bGV2ZWx9XG4gICAgICAgIGxldmVsQ29sb3I9e2xldmVsQ29sb3J9XG4gICAgICAgIHNob3dUcmFuc2xhdGlvbj17c2hvd1RyYW5zbGF0aW9ufVxuICAgICAgICBvblRvZ2dsZVRyYW5zbGF0aW9uPXt0b2dnbGVUcmFuc2xhdGlvbn1cbiAgICAgIC8+XG5cbiAgICAgIDxWb2NhYnVsYXJ5TmF2aWdhdGlvblxuICAgICAgICBvbk5leHQ9e2hhbmRsZU5leHRXb3JkfVxuICAgICAgICBvblByZXZpb3VzPXtoYW5kbGVQcmV2aW91c1dvcmR9XG4gICAgICAgIGNhbkdvUHJldmlvdXM9e2NhbkdvVG9QcmV2aW91c31cbiAgICAgICAgaXNMYXN0PXtpc0xhc3RXb3JkSW5FeGVyY2lzZX1cbiAgICAgICAgbGV2ZWxDb2xvcj17bGV2ZWxDb2xvcn1cbiAgICAgIC8+XG4gICAgPC9Db250YWluZXI+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBWb2NhYnVsYXJ5RXhlcmNpc2U7Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUEsSUFBQUEsWUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsT0FBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsV0FBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsTUFBQSxHQUFBSCxPQUFBO0FBRUEsSUFBQUksVUFBQSxHQUFBQyx1QkFBQSxDQUFBTCxPQUFBO0FBQ0EsSUFBQU0saUJBQUEsR0FBQUMsc0JBQUEsQ0FBQVAsT0FBQTtBQUNBLElBQUFRLDJCQUFBLEdBQUFELHNCQUFBLENBQUFQLE9BQUE7QUFDQSxJQUFBUyxtQkFBQSxHQUFBRixzQkFBQSxDQUFBUCxPQUFBO0FBQ0EsSUFBQVUsc0JBQUEsR0FBQUgsc0JBQUEsQ0FBQVAsT0FBQTtBQUNBLElBQUFXLHFCQUFBLEdBQUFKLHNCQUFB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