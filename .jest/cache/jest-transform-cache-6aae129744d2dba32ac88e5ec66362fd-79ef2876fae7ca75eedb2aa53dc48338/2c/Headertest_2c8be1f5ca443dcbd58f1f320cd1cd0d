f3f209cd99deb27427016248a27bf8f5
_getJestObj().mock('react-native', function () {
  var ActualReactNative = jest.requireActual('react-native');
  return Object.assign({}, ActualReactNative, {
    StatusBar: Object.assign({}, ActualReactNative.StatusBar, {
      setBarStyle: jest.fn(),
      setBackgroundColor: jest.fn()
    })
  });
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn()
  };
});
_getJestObj().mock('@expo/vector-icons', function () {
  return {
    Ionicons: 'Ionicons'
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _native = require("@react-navigation/native");
var _Header = _interopRequireDefault(require("../../../src/components/layout/Header"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Header', function () {
  var mockGoBack = jest.fn();
  var mockCanGoBack = jest.fn(function () {
    return true;
  });
  beforeEach(function () {
    _native.useNavigation.mockReturnValue({
      goBack: mockGoBack,
      canGoBack: mockCanGoBack
    });
    jest.clearAllMocks();
  });
  it('renders correctly with a title', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Test Title"
      })),
      getByText = _render.getByText;
    expect(getByText('Test Title')).toBeTruthy();
  });
  it('calls navigation.goBack when back button is pressed and onBackPress is not provided', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Test Title",
        showBackButton: true
      })),
      getByRole = _render2.getByRole;
    _reactNative.fireEvent.press(getByRole('button', {
      name: 'chevron-back'
    }));
    expect(mockGoBack).toHaveBeenCalledTimes(1);
  });
  it('calls onBackPress when back button is pressed and onBackPress is provided', function () {
    var customBackPress = jest.fn();
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Test Title",
        showBackButton: true,
        onBackPress: customBackPress
      })),
      getByRole = _render3.getByRole;
    _reactNative.fireEvent.press(getByRole('button', {
      name: 'chevron-back'
    }));
    expect(customBackPress).toHaveBeenCalledTimes(1);
    expect(mockGoBack).not.toHaveBeenCalled();
  });
  it('does not render back button when showBackButton is false', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Test Title",
        showBackButton: false
      })),
      queryByRole = _render4.queryByRole;
    expect(queryByRole('button', {
      name: 'chevron-back'
    })).toBeNull();
  });
  it('renders right icon and calls onRightPress when pressed', function () {
    var customRightPress = jest.fn();
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Test Title",
        rightIcon: "settings",
        onRightPress: customRightPress
      })),
      getByText = _render5.getByText;
    _reactNative.fireEvent.press(getByText('Ionicons'));
    expect(customRightPress).toHaveBeenCalledTimes(1);
  });
  it('renders custom leftComponent when provided', function () {
    var CustomLeft = function CustomLeft() {
      return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "Custom Left"
      });
    };
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Test Title",
        leftComponent: (0, _jsxRuntime.jsx)(CustomLeft, {})
      })),
      getByText = _render6.getByText;
    expect(getByText('Custom Left')).toBeTruthy();
    expect((0, _native.useNavigation)().goBack).not.toHaveBeenCalled();
  });
  it('renders custom rightComponent when provided', function () {
    var CustomRight = function CustomRight() {
      return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "Custom Right"
      });
    };
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Test Title",
        rightComponent: (0, _jsxRuntime.jsx)(CustomRight, {})
      })),
      getByText = _render7.getByText;
    expect(getByText('Custom Right')).toBeTruthy();
  });
  it('renders StatusBar with default props', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
      title: "Test Title"
    }));
    expect(_reactNative2.StatusBar.setBarStyle).toHaveBeenCalledWith('dark-content');
    expect(_reactNative2.StatusBar.setBackgroundColor).toHaveBeenCalledWith('#FFFFFF');
  });
  it('renders StatusBar with custom props', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
      title: "Test Title",
      statusBarColor: "#FF0000",
      statusBarStyle: "light-content"
    }));
    expect(_reactNative2.StatusBar.setBarStyle).toHaveBeenCalledWith('light-content');
    expect(_reactNative2.StatusBar.setBackgroundColor).toHaveBeenCalledWith('#FF0000');
  });
  it('does not render StatusBar when withStatusBar is false', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
      title: "Test Title",
      withStatusBar: false
    }));
    expect(_reactNative2.StatusBar.setBarStyle).not.toHaveBeenCalled();
    expect(_reactNative2.StatusBar.setBackgroundColor).not.toHaveBeenCalled();
  });
  it('renders in largeTitleMode with subtitle', function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Large Title",
        largeTitleMode: true,
        subtitle: "Subtitle Text"
      })),
      getByText = _render8.getByText;
    expect(getByText('Large Title')).toBeTruthy();
    expect(getByText('Subtitle Text')).toBeTruthy();
  });
  it('renders custom bottomComponent in largeTitleMode', function () {
    var CustomBottom = function CustomBottom() {
      return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "Custom Bottom"
      });
    };
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Test",
        largeTitleMode: true,
        bottomComponent: (0, _jsxRuntime.jsx)(CustomBottom, {})
      })),
      getByText = _render9.getByText;
    expect(getByText('Custom Bottom')).toBeTruthy();
  });
  it('renders children when provided, overriding other content', function () {
    var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Should Not See This",
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Custom Children"
        })
      })),
      getByText = _render0.getByText,
      queryByText = _render0.queryByText;
    expect(getByText('Custom Children')).toBeTruthy();
    expect(queryByText('Should Not See This')).toBeNull();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,