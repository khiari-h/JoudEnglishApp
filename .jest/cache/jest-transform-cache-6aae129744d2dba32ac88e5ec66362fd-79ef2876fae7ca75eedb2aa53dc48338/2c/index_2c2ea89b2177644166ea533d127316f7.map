{"version":3,"names":["_errorCorrectionB1Full","_interopRequireDefault","require","_errorCorrectionB1Identify","_errorCorrectionB1MultipleChoice","allExercises","concat","_toConsumableArray2","default","errorCorrectionB1Full","errorCorrectionB1Identify","errorCorrectionB1MultipleChoice","sort","a","b","categoryId","typeOrder","type","errorCorrectionB1","level","totalExercises","length","statistics","full","identify","multiple_choice","byCategory","name","count","categories","id","description","exerciseCount","difficulty","color","topics","commonErrors","exercises","getExercisesByCategory","filter","exercise","getExercisesByType","getExercisesByCategoryAndType","getExercisesByTopic","topic","category","find","cat","includes","getExercisesByErrorType","errorType","some","error","getAdvancedExercises","wordCount","text","split","errorCount","errorPositions","validateStructure","requiredFields","validTypes","every","hasRequiredFields","field","Object","prototype","hasOwnProperty","call","undefined","hasValidType","hasValidCategory","hasMinimumComplexity","hasTypeSpecificFields","choices","Array","isArray","correctChoiceIndex","getSummary","totalErrorPositions","ex","reduce","sum","focus","progression","distribution","complexity","averageTextLength","Math","round","averageErrorsPerExercise","_default","exports"],"sources":["index.js"],"sourcesContent":["// src/data/exercises/errorCorrection/B1/index.js\r\n\r\nimport errorCorrectionB1Full from './categories/errorCorrectionB1Full';\r\nimport errorCorrectionB1Identify from './categories/errorCorrectionB1Identify';\r\nimport errorCorrectionB1MultipleChoice from './categories/errorCorrectionB1MultipleChoice';\r\n\r\n// Combine all exercises from the 3 files\r\nconst allExercises = [\r\n  ...errorCorrectionB1Full,\r\n  ...errorCorrectionB1Identify,\r\n  ...errorCorrectionB1MultipleChoice\r\n];\r\n\r\n// Sort exercises by categoryId to maintain logical order\r\nallExercises.sort((a, b) => {\r\n  if (a.categoryId !== b.categoryId) {\r\n    return a.categoryId - b.categoryId;\r\n  }\r\n  // Within same category, order by type: full, identify, multiple_choice\r\n  const typeOrder = { 'full': 1, 'identify': 2, 'multiple_choice': 3 };\r\n  return typeOrder[a.type] - typeOrder[b.type];\r\n});\r\n\r\nconst errorCorrectionB1 = {\r\n  level: \"B1\",\r\n  totalExercises: allExercises.length,\r\n\r\n  // Statistics by type\r\n  statistics: {\r\n    full: errorCorrectionB1Full.length,\r\n    identify: errorCorrectionB1Identify.length,\r\n    multiple_choice: errorCorrectionB1MultipleChoice.length,\r\n    byCategory: {\r\n      1: { name: \"Present Perfect\", count: 7 },      // 2 full + 3 identify + 2 multiple_choice\r\n      2: { name: \"Conditionals\", count: 7 },         // 3 full + 3 identify + 1 multiple_choice\r\n      3: { name: \"Passive Voice\", count: 7 },        // 2 full + 3 identify + 2 multiple_choice\r\n      4: { name: \"Reported Speech\", count: 8 },      // 3 full + 3 identify + 2 multiple_choice\r\n      5: { name: \"Relative Clauses\", count: 7 }      // 2 full + 3 identify + 2 multiple_choice\r\n    }\r\n  },\r\n\r\n  // Categories metadata for B1 intermediate-advanced level\r\n  categories: [\r\n    {\r\n      id: 1,\r\n      name: \"Present Perfect\",\r\n      description: \"Present perfect vs past simple, for/since, already/yet/just\",\r\n      exerciseCount: 7,\r\n      difficulty: \"Intermediate-Advanced\",\r\n      color: \"#3b82f6\",\r\n      topics: [\"present perfect formation\", \"vs past simple\", \"time expressions\", \"experience\", \"duration\"],\r\n      commonErrors: [\"using with specific past times\", \"wrong past participle\", \"confusion with past simple\"]\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"Conditionals\",\r\n      description: \"First, second, and mixed conditionals\",\r\n      exerciseCount: 7,\r\n      difficulty: \"Intermediate-Advanced\", \r\n      color: \"#10b981\",\r\n      topics: [\"first conditional\", \"second conditional\", \"third conditional\", \"mixed conditionals\", \"unless\"],\r\n      commonErrors: [\"will in if-clause\", \"wrong verb forms\", \"mixing conditional types\"]\r\n    },\r\n    {\r\n      id: 3,\r\n      name: \"Passive Voice\",\r\n      description: \"Passive voice in different tenses and contexts\",\r\n      exerciseCount: 7,\r\n      difficulty: \"Intermediate-Advanced\",\r\n      color: \"#f59e0b\",\r\n      topics: [\"passive formation\", \"different tenses\", \"by/with agents\", \"passive reporting\"],\r\n      commonErrors: [\"missing be verb\", \"wrong prepositions\", \"incorrect past participle\"]\r\n    },\r\n    {\r\n      id: 4,\r\n      name: \"Reported Speech\",\r\n      description: \"Direct to indirect speech, reporting verbs\",\r\n      exerciseCount: 8,\r\n      difficulty: \"Intermediate-Advanced\",\r\n      color: \"#8b5cf6\",\r\n      topics: [\"tense changes\", \"pronoun changes\", \"time/place changes\", \"reporting questions\", \"reporting verbs\"],\r\n      commonErrors: [\"wrong tense changes\", \"question word order\", \"incorrect reporting verbs\"]\r\n    },\r\n    {\r\n      id: 5,\r\n      name: \"Relative Clauses\",\r\n      description: \"Defining and non-defining relative clauses\",\r\n      exerciseCount: 7,\r\n      difficulty: \"Intermediate-Advanced\",\r\n      color: \"#ef4444\",\r\n      topics: [\"who/which/that\", \"defining vs non-defining\", \"whose\", \"where/when\", \"prepositions\"],\r\n      commonErrors: [\"wrong relative pronouns\", \"unnecessary prepositions\", \"comma usage\"]\r\n    },\r\n  ],\r\n\r\n  // All exercises combined and sorted\r\n  exercises: allExercises,\r\n\r\n  // Helper methods for filtering exercises\r\n  getExercisesByCategory: (categoryId) => {\r\n    return allExercises.filter(exercise => exercise.categoryId === categoryId);\r\n  },\r\n\r\n  getExercisesByType: (type) => {\r\n    return allExercises.filter(exercise => exercise.type === type);\r\n  },\r\n\r\n  getExercisesByCategoryAndType: (categoryId, type) => {\r\n    return allExercises.filter(exercise => \r\n      exercise.categoryId === categoryId && exercise.type === type\r\n    );\r\n  },\r\n\r\n  // Get exercises by difficulty or topic\r\n  getExercisesByTopic: (topic) => {\r\n    return allExercises.filter(exercise => {\r\n      const category = errorCorrectionB1.categories.find(cat => cat.id === exercise.categoryId);\r\n      return category?.topics.includes(topic);\r\n    });\r\n  },\r\n\r\n  // Get exercises by common error type\r\n  getExercisesByErrorType: (errorType) => {\r\n    return allExercises.filter(exercise => {\r\n      const category = errorCorrectionB1.categories.find(cat => cat.id === exercise.categoryId);\r\n      return category?.commonErrors.some(error => error.includes(errorType));\r\n    });\r\n  },\r\n\r\n  // Advanced filtering for B1 level\r\n  getAdvancedExercises: () => {\r\n    // Return exercises that are more challenging (longer texts, multiple errors)\r\n    return allExercises.filter(exercise => {\r\n      const wordCount = exercise.text.split(' ').length;\r\n      const errorCount = exercise.errorPositions ? exercise.errorPositions.length : 1;\r\n      return wordCount > 8 || errorCount > 2;\r\n    });\r\n  },\r\n\r\n  // Validation with B1-specific checks\r\n  validateStructure: () => {\r\n    const requiredFields = ['categoryId', 'type', 'text', 'correctedText', 'hint', 'explanation'];\r\n    const validTypes = ['full', 'identify', 'multiple_choice'];\r\n\r\n    return allExercises.every(exercise => {\r\n      // Check required fields\r\n      const hasRequiredFields = requiredFields.every(field => \r\n        Object.prototype.hasOwnProperty.call(exercise, field) && exercise[field] !== undefined\r\n      );\r\n\r\n      // Check valid type\r\n      const hasValidType = validTypes.includes(exercise.type);\r\n\r\n      // Check valid category (1-5 for B1)\r\n      const hasValidCategory = exercise.categoryId >= 1 && exercise.categoryId <= 5;\r\n\r\n      // Check B1 level complexity (minimum text length)\r\n      const hasMinimumComplexity = exercise.text.split(' ').length >= 6;\r\n\r\n      // Check type-specific fields\r\n      let hasTypeSpecificFields = true;\r\n      if (exercise.type === 'multiple_choice') {\r\n        hasTypeSpecificFields = exercise.choices && \r\n                               Array.isArray(exercise.choices) &&\r\n                               exercise.choices.length >= 3 && // B1 should have at least 3 choices\r\n                               exercise.correctChoiceIndex !== undefined &&\r\n                               exercise.correctChoiceIndex >= 0 &&\r\n                               exercise.correctChoiceIndex < exercise.choices.length;\r\n      } else {\r\n        hasTypeSpecificFields = exercise.errorPositions && Array.isArray(exercise.errorPositions);\r\n      }\r\n\r\n      return hasRequiredFields && hasValidType && hasValidCategory && \r\n             hasMinimumComplexity && hasTypeSpecificFields;\r\n    });\r\n  },\r\n\r\n  // Get comprehensive summary for B1\r\n  getSummary: () => {\r\n    const totalErrorPositions = allExercises\r\n      .filter(ex => ex.errorPositions)\r\n      .reduce((sum, ex) => sum + ex.errorPositions.length, 0);\r\n\r\n    return {\r\n      level: \"B1\",\r\n      totalExercises: allExercises.length,\r\n      categories: errorCorrectionB1.categories.length,\r\n      difficulty: \"Intermediate-Advanced\",\r\n      focus: \"Complex grammatical structures and tense relationships\",\r\n      progression: \"Builds on A2 with present perfect, conditionals, passive voice, reported speech, and relative clauses\",\r\n      distribution: {\r\n        full: errorCorrectionB1Full.length,\r\n        identify: errorCorrectionB1Identify.length,\r\n        multiple_choice: errorCorrectionB1MultipleChoice.length\r\n      },\r\n      complexity: {\r\n        averageTextLength: Math.round(allExercises.reduce((sum, ex) => sum + ex.text.split(' ').length, 0) / allExercises.length),\r\n        totalErrorPositions,\r\n        averageErrorsPerExercise: Math.round(totalErrorPositions / allExercises.filter(ex => ex.errorPositions).length * 10) / 10\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\n// Validate structure on export\r\nif (!errorCorrectionB1.validateStructure()) {\r\n  // empty: structure invalid, handle if needed\r\n} else {\r\n  // empty: structure valid, nothing to do\r\n}\r\n\r\nexport default errorCorrectionB1;\r\n"],"mappings":";;;;;;AAEA,IAAAA,sBAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,0BAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,gCAAA,GAAAH,sBAAA,CAAAC,OAAA;AAGA,IAAMG,YAAY,MAAAC,MAAA,KAAAC,mBAAA,CAAAC,OAAA,EACbC,8BAAqB,OAAAF,mBAAA,CAAAC,OAAA,EACrBE,kCAAyB,OAAAH,mBAAA,CAAAC,OAAA,EACzBG,wCAA+B,EACnC;AAGDN,YAAY,CAACO,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC,EAAK;EAC1B,IAAID,CAAC,CAACE,UAAU,KAAKD,CAAC,CAACC,UAAU,EAAE;IACjC,OAAOF,CAAC,CAACE,UAAU,GAAGD,CAAC,CAACC,UAAU;EACpC;EAEA,IAAMC,SAAS,GAAG;IAAE,MAAM,EAAE,CAAC;IAAE,UAAU,EAAE,CAAC;IAAE,iBAAiB,EAAE;EAAE,CAAC;EACpE,OAAOA,SAAS,CAACH,CAAC,CAACI,IAAI,CAAC,GAAGD,SAAS,CAACF,CAAC,CAACG,IAAI,CAAC;AAC9C,CAAC,CAAC;AAEF,IAAMC,iBAAiB,GAAG;EACxBC,KAAK,EAAE,IAAI;EACXC,cAAc,EAAEf,YAAY,CAACgB,MAAM;EAGnCC,UAAU,EAAE;IACVC,IAAI,EAAEd,8BAAqB,CAACY,MAAM;IAClCG,QAAQ,EAAEd,kCAAyB,CAACW,MAAM;IAC1CI,eAAe,EAAEd,wCAA+B,CAACU,MAAM;IACvDK,UAAU,EAAE;MACV,CAAC,EAAE;QAAEC,IAAI,EAAE,iBAAiB;QAAEC,KAAK,EAAE;MAAE,CAAC;MACxC,CAAC,EAAE;QAAED,IAAI,EAAE,cAAc;QAAEC,KAAK,EAAE;MAAE,CAAC;MACrC,CAAC,EAAE;QAAED,IAAI,EAAE,eAAe;QAAEC,KAAK,EAAE;MAAE,CAAC;MACtC,CAAC,EAAE;QAAED,IAAI,EAAE,iBAAiB;QAAEC,KAAK,EAAE;MAAE,CAAC;MACxC,CAAC,EAAE;QAAED,IAAI,EAAE,kBAAkB;QAAEC,KAAK,EAAE;MAAE;IAC1C;EACF,CAAC;EAGDC,UAAU,EAAE,CACV;IACEC,EAAE,EAAE,CAAC;IACLH,IAAI,EAAE,iBAAiB;IACvBI,WAAW,EAAE,6DAA6D;IAC1EC,aAAa,EAAE,CAAC;IAChBC,UAAU,EAAE,uBAAuB;IACnCC,KAAK,EAAE,SAAS;IAChBC,MAAM,EAAE,CAAC,2BAA2B,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,YAAY,EAAE,UAAU,CAAC;IACrGC,YAAY,EAAE,CAAC,gCAAgC,EAAE,uBAAuB,EAAE,4BAA4B;EACxG,CAAC,EACD;IACEN,EAAE,EAAE,CAAC;IACLH,IAAI,EAAE,cAAc;IACpBI,WAAW,EAAE,uCAAuC;IACpDC,aAAa,EAAE,CAAC;IAChBC,UAAU,EAAE,uBAAuB;IACnCC,KAAK,EAAE,SAAS;IAChBC,MAAM,EAAE,CAAC,mBAAmB,EAAE,oBAAoB,EAAE,mBAAmB,EAAE,oBAAoB,EAAE,QAAQ,CAAC;IACxGC,YAAY,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,0BAA0B;EACpF,CAAC,EACD;IACEN,EAAE,EAAE,CAAC;IACLH,IAAI,EAAE,eAAe;IACrBI,WAAW,EAAE,gDAAgD;IAC7DC,aAAa,EAAE,CAAC;IAChBC,UAAU,EAAE,uBAAuB;IACnCC,KAAK,EAAE,SAAS;IAChBC,MAAM,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,mBAAmB,CAAC;IACxFC,YAAY,EAAE,CAAC,iBAAiB,EAAE,oBAAoB,EAAE,2BAA2B;EACrF,CAAC,EACD;IACEN,EAAE,EAAE,CAAC;IACLH,IAAI,EAAE,iBAAiB;IACvBI,WAAW,EAAE,4CAA4C;IACzDC,aAAa,EAAE,CAAC;IAChBC,UAAU,EAAE,uBAAuB;IACnCC,KAAK,EAAE,SAAS;IAChBC,MAAM,EAAE,CAAC,eAAe,EAAE,iBAAiB,EAAE,oBAAoB,EAAE,qBAAqB,EAAE,iBAAiB,CAAC;IAC5GC,YAAY,EAAE,CAAC,qBAAqB,EAAE,qBAAqB,EAAE,2BAA2B;EAC1F,CAAC,EACD;IACEN,EAAE,EAAE,CAAC;IACLH,IAAI,EAAE,kBAAkB;IACxBI,WAAW,EAAE,4CAA4C;IACzDC,aAAa,EAAE,CAAC;IAChBC,UAAU,EAAE,uBAAuB;IACnCC,KAAK,EAAE,SAAS;IAChBC,MAAM,EAAE,CAAC,gBAAgB,EAAE,0BAA0B,EAAE,OAAO,EAAE,YAAY,EAAE,cAAc,CAAC;IAC7FC,YAAY,EAAE,CAAC,yBAAyB,EAAE,0BAA0B,EAAE,aAAa;EACrF,CAAC,CACF;EAGDC,SAAS,EAAEhC,YAAY;EAGvBiC,sBAAsB,EAAE,SAAxBA,sBAAsBA,CAAGvB,UAAU,EAAK;IACtC,OAAOV,YAAY,CAACkC,MAAM,CAAC,UAAAC,QAAQ;MAAA,OAAIA,QAAQ,CAACzB,UAAU,KAAKA,UAAU;IAAA,EAAC;EAC5E,CAAC;EAED0B,kBAAkB,EAAE,SAApBA,kBAAkBA,CAAGxB,IAAI,EAAK;IAC5B,OAAOZ,YAAY,CAACkC,MAAM,CAAC,UAAAC,QAAQ;MAAA,OAAIA,QAAQ,CAACvB,IAAI,KAAKA,IAAI;IAAA,EAAC;EAChE,CAAC;EAEDyB,6BAA6B,EAAE,SAA/BA,6BAA6BA,CAAG3B,UAAU,EAAEE,IAAI,EAAK;IACnD,OAAOZ,YAAY,CAACkC,MAAM,CAAC,UAAAC,QAAQ;MAAA,OACjCA,QAAQ,CAACzB,UAAU,KAAKA,UAAU,IAAIyB,QAAQ,CAACvB,IAAI,KAAKA,IAAI;IAAA,CAC9D,CAAC;EACH,CAAC;EAGD0B,mBAAmB,EAAE,SAArBA,mBAAmBA,CAAGC,KAAK,EAAK;IAC9B,OAAOvC,YAAY,CAACkC,MAAM,CAAC,UAAAC,QAAQ,EAAI;MACrC,IAAMK,QAAQ,GAAG3B,iBAAiB,CAACW,UAAU,CAACiB,IAAI,CAAC,UAAAC,GAAG;QAAA,OAAIA,GAAG,CAACjB,EAAE,KAAKU,QAAQ,CAACzB,UAAU;MAAA,EAAC;MACzF,OAAO8B,QAAQ,oBAARA,QAAQ,CAAEV,MAAM,CAACa,QAAQ,CAACJ,KAAK,CAAC;IACzC,CAAC,CAAC;EACJ,CAAC;EAGDK,uBAAuB,EAAE,SAAzBA,uBAAuBA,CAAGC,SAAS,EAAK;IACtC,OAAO7C,YAAY,CAACkC,MAAM,CAAC,UAAAC,QAAQ,EAAI;MACrC,IAAMK,QAAQ,GAAG3B,iBAAiB,CAACW,UAAU,CAACiB,IAAI,CAAC,UAAAC,GAAG;QAAA,OAAIA,GAAG,CAACjB,EAAE,KAAKU,QAAQ,CAACzB,UAAU;MAAA,EAAC;MACzF,OAAO8B,QAAQ,oBAARA,QAAQ,CAAET,YAAY,CAACe,IAAI,CAAC,UAAAC,KAAK;QAAA,OAAIA,KAAK,CAACJ,QAAQ,CAACE,SAAS,CAAC;MAAA,EAAC;IACxE,CAAC,CAAC;EACJ,CAAC;EAGDG,oBAAoB,EAAE,SAAtBA,oBAAoBA,CAAA,EAAQ;IAE1B,OAAOhD,YAAY,CAACkC,MAAM,CAAC,UAAAC,QAAQ,EAAI;MACrC,IAAMc,SAAS,GAAGd,QAAQ,CAACe,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACnC,MAAM;MACjD,IAAMoC,UAAU,GAAGjB,QAAQ,CAACkB,cAAc,GAAGlB,QAAQ,CAACkB,cAAc,CAACrC,MAAM,GAAG,CAAC;MAC/E,OAAOiC,SAAS,GAAG,CAAC,IAAIG,UAAU,GAAG,CAAC;IACxC,CAAC,CAAC;EACJ,CAAC;EAGDE,iBAAiB,EAAE,SAAnBA,iBAAiBA,CAAA,EAAQ;IACvB,IAAMC,cAAc,GAAG,CAAC,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,eAAe,EAAE,MAAM,EAAE,aAAa,CAAC;IAC7F,IAAMC,UAAU,GAAG,CAAC,MAAM,EAAE,UAAU,EAAE,iBAAiB,CAAC;IAE1D,OAAOxD,YAAY,CAACyD,KAAK,CAAC,UAAAtB,QAAQ,EAAI;MAEpC,IAAMuB,iBAAiB,GAAGH,cAAc,CAACE,KAAK,CAAC,UAAAE,KAAK;QAAA,OAClDC,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAAC5B,QAAQ,EAAEwB,KAAK,CAAC,IAAIxB,QAAQ,CAACwB,KAAK,CAAC,KAAKK,SAAS;MAAA,CACxF,CAAC;MAGD,IAAMC,YAAY,GAAGT,UAAU,CAACb,QAAQ,CAACR,QAAQ,CAACvB,IAAI,CAAC;MAGvD,IAAMsD,gBAAgB,GAAG/B,QAAQ,CAACzB,UAAU,IAAI,CAAC,IAAIyB,QAAQ,CAACzB,UAAU,IAAI,CAAC;MAG7E,IAAMyD,oBAAoB,GAAGhC,QAAQ,CAACe,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACnC,MAAM,IAAI,CAAC;MAGjE,IAAIoD,qBAAqB,GAAG,IAAI;MAChC,IAAIjC,QAAQ,CAACvB,IAAI,KAAK,iBAAiB,EAAE;QACvCwD,qBAAqB,GAAGjC,QAAQ,CAACkC,OAAO,IACjBC,KAAK,CAACC,OAAO,CAACpC,QAAQ,CAACkC,OAAO,CAAC,IAC/BlC,QAAQ,CAACkC,OAAO,CAACrD,MAAM,IAAI,CAAC,IAC5BmB,QAAQ,CAACqC,kBAAkB,KAAKR,SAAS,IACzC7B,QAAQ,CAACqC,kBAAkB,IAAI,CAAC,IAChCrC,QAAQ,CAACqC,kBAAkB,GAAGrC,QAAQ,CAACkC,OAAO,CAACrD,MAAM;MAC9E,CAAC,MAAM;QACLoD,qBAAqB,GAAGjC,QAAQ,CAACkB,cAAc,IAAIiB,KAAK,CAACC,OAAO,CAACpC,QAAQ,CAACkB,cAAc,CAAC;MAC3F;MAEA,OAAOK,iBAAiB,IAAIO,YAAY,IAAIC,gBAAgB,IACrDC,oBAAoB,IAAIC,qBAAqB;IACtD,CAAC,CAAC;EACJ,CAAC;EAGDK,UAAU,EAAE,SAAZA,UAAUA,CAAA,EAAQ;IAChB,IAAMC,mBAAmB,GAAG1E,YAAY,CACrCkC,MAAM,CAAC,UAAAyC,EAAE;MAAA,OAAIA,EAAE,CAACtB,cAAc;IAAA,EAAC,CAC/BuB,MAAM,CAAC,UAACC,GAAG,EAAEF,EAAE;MAAA,OAAKE,GAAG,GAAGF,EAAE,CAACtB,cAAc,CAACrC,MAAM;IAAA,GAAE,CAAC,CAAC;IAEzD,OAAO;MACLF,KAAK,EAAE,IAAI;MACXC,cAAc,EAAEf,YAAY,CAACgB,MAAM;MACnCQ,UAAU,EAAEX,iBAAiB,CAACW,UAAU,CAACR,MAAM;MAC/CY,UAAU,EAAE,uBAAuB;MACnCkD,KAAK,EAAE,wDAAwD;MAC/DC,WAAW,EAAE,uGAAuG;MACpHC,YAAY,EAAE;QACZ9D,IAAI,EAAEd,8BAAqB,CAACY,MAAM;QAClCG,QAAQ,EAAEd,kCAAyB,CAACW,MAAM;QAC1CI,eAAe,EAAEd,wCAA+B,CAACU;MACnD,CAAC;MACDiE,UAAU,EAAE;QACVC,iBAAiB,EAAEC,IAAI,CAACC,KAAK,CAACpF,YAAY,CAAC4E,MAAM,CAAC,UAACC,GAAG,EAAEF,EAAE;UAAA,OAAKE,GAAG,GAAGF,EAAE,CAACzB,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACnC,MAAM;QAAA,GAAE,CAAC,CAAC,GAAGhB,YAAY,CAACgB,MAAM,CAAC;QACzH0D,mBAAmB,EAAnBA,mBAAmB;QACnBW,wBAAwB,EAAEF,IAAI,CAACC,KAAK,CAACV,mBAAmB,GAAG1E,YAAY,CAACkC,MAAM,CAAC,UAAAyC,EAAE;UAAA,OAAIA,EAAE,CAACtB,cAAc;QAAA,EAAC,CAACrC,MAAM,GAAG,EAAE,CAAC,GAAG;MACzH;IACF,CAAC;EACH;AACF,CAAC;AAGD,IAAI,CAACH,iBAAiB,CAACyC,iBAAiB,CAAC,CAAC,EAAE,CAE5C,CAAC,MAAM,CAEP;AAAC,IAAAgC,QAAA,GAAAC,OAAA,CAAApF,OAAA,GAEcU,iBAAiB","ignoreList":[]}