1d68e866299f41dd09a3db6375ada42e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _expoLinearGradient = require("expo-linear-gradient");
var _vectorIcons = require("@expo/vector-icons");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _HeroCard = _interopRequireDefault(require("../../../../components/ui/HeroCard"));
var _ContentSection = _interopRequireDefault(require("../../../../components/ui/ContentSection"));
var _style = _interopRequireDefault(require("./style"));
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
var getOptionStyles = function getOptionStyles(showFeedback, isCorrectOption, isSelectedOption, isCorrect, levelColor) {
  if (showFeedback && isCorrectOption) {
    return ['#10B981', '#059669', '#047857'];
  }
  if (showFeedback && isSelectedOption && !isCorrectOption) {
    return ['#EF4444', '#DC2626', '#B91C1C'];
  }
  if (isSelectedOption) {
    return [levelColor, `${levelColor}E6`, `${levelColor}CC`];
  }
  return ['#FFFFFF', '#F8FAFC', '#F1F5F9'];
};
var getOptionIcon = function getOptionIcon(showFeedback, isCorrectOption, isSelectedOption, isCorrect) {
  if (showFeedback && isCorrectOption) {
    return (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
      name: "checkmark-circle",
      size: 20,
      color: "white"
    });
  }
  if (showFeedback && isSelectedOption && !isCorrectOption) {
    return (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
      name: "close-circle",
      size: 20,
      color: "white"
    });
  }
  if (isSelectedOption) {
    return (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
      name: "radio-button-on",
      size: 20,
      color: "white"
    });
  }
  return (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
    name: "radio-button-off",
    size: 20,
    color: "#9CA3AF"
  });
};
var getOptionTextStyles = function getOptionTextStyles(showFeedback, isCorrectOption, isSelectedOption, isCorrect, styles) {
  var textStyles = [styles.optionText];
  if (showFeedback && isCorrectOption) {
    textStyles.push(styles.correctOptionText);
  }
  if (showFeedback && isSelectedOption && !isCorrectOption) {
    textStyles.push(styles.incorrectOptionText);
  }
  if (isSelectedOption && !showFeedback) {
    textStyles.push(styles.selectedOptionText);
  }
  return textStyles;
};
var getInputStyles = function getInputStyles(showFeedback, inputText, exerciseAnswer, isCorrect, styles, baseStyle) {
  var inputStyles = [baseStyle];
  if (showFeedback && inputText.trim().toLowerCase() === exerciseAnswer.toLowerCase()) {
    inputStyles.push(styles.correctInput);
  } else if (showFeedback && !isCorrect) {
    inputStyles.push(styles.incorrectInput);
  } else {
    inputStyles.push(styles.neutralInput);
  }
  return inputStyles;
};
var OptionItem = function OptionItem(_ref) {
  var option = _ref.option,
    index = _ref.index,
    exercise = _ref.exercise,
    selectedOption = _ref.selectedOption,
    showFeedback = _ref.showFeedback,
    isCorrect = _ref.isCorrect,
    onPress = _ref.onPress,
    styles = _ref.styles,
    levelColor = _ref.levelColor;
  var isCorrectOption = index === exercise.answer || option === exercise.answer;
  var isSelectedOption = selectedOption === index;
  var gradientColors = getOptionStyles(showFeedback, isCorrectOption, isSelectedOption, isCorrect, levelColor);
  var optionIcon = getOptionIcon(showFeedback, isCorrectOption, isSelectedOption, isCorrect);
  var textStyles = getOptionTextStyles(showFeedback, isCorrectOption, isSelectedOption, isCorrect, styles);
  return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
    style: styles.optionContainer,
    onPress: onPress,
    disabled: showFeedback && isCorrect,
    activeOpacity: 0.8,
    children: (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
      colors: gradientColors,
      start: {
        x: 0,
        y: 0
      },
      end: {
        x: 1,
        y: 1
      },
      style: styles.optionGradient,
      children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.optionInner,
        children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.optionIconContainer,
          children: optionIcon
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: textStyles,
          children: option
        })]
      })
    })
  }, option);
};
OptionItem.propTypes = {
  option: _propTypes.default.string.isRequired,
  index: _propTypes.default.number.isRequired,
  exercise: _propTypes.default.shape({
    answer: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]).isRequired
  }).isRequired,
  selectedOption: _propTypes.default.number,
  showFeedback: _propTypes.default.bool.isRequired,
  isCorrect: _propTypes.default.bool.isRequired,
  onPress: _propTypes.default.func.isRequired,
  styles: _propTypes.default.shape({
    optionContainer: _propTypes.default.any,
    optionGradient: _propTypes.default.any,
    optionInner: _propTypes.default.any,
    optionIconContainer: _propTypes.default.any,
    optionText: _propTypes.default.any,
    correctOptionText: _propTypes.default.any,
    incorrectOptionText: _propTypes.default.any,
    selectedOptionText: _propTypes.default.any
  }).isRequired,
  levelColor: _propTypes.default.string.isRequired
};
var ExerciseContent = function ExerciseContent(_ref2) {
  var exercise = _ref2.exercise,
    levelColor = _ref2.levelColor,
    title = _ref2.title,
    content = _ref2.content,
    _ref2$isItalic = _ref2.isItalic,
    isItalic = _ref2$isItalic === void 0 ? false : _ref2$isItalic;
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [(0, _jsxRuntime.jsx)(_HeroCard.default, {
      content: exercise.question,
      fontSize: 24,
      levelColor: levelColor,
      showUnderline: true
    }), exercise.sentence && (0, _jsxRuntime.jsx)(_ContentSection.default, {
      title: title,
      content: content || exercise.sentence,
      levelColor: levelColor,
      backgroundColor: "#F8FAFC",
      isItalic: isItalic,
      showIcon: false
    })]
  });
};
ExerciseContent.propTypes = {
  exercise: _propTypes.default.shape({
    question: _propTypes.default.string.isRequired,
    sentence: _propTypes.default.string
  }).isRequired,
  levelColor: _propTypes.default.string.isRequired,
  title: _propTypes.default.string.isRequired,
  content: _propTypes.default.string,
  isItalic: _propTypes.default.bool
};
var GrammarExerciseRenderer = function GrammarExerciseRenderer(_ref3) {
  var exercise = _ref3.exercise,
    selectedOption = _ref3.selectedOption,
    setSelectedOption = _ref3.setSelectedOption,
    inputText = _ref3.inputText,
    setInputText = _ref3.setInputText,
    showFeedback = _ref3.showFeedback,
    isCorrect = _ref3.isCorrect,
    exerciseIndex = _ref3.exerciseIndex,
    attempts = _ref3.attempts;
  var styles = (0, _style.default)();
  var levelColor = "#3b82f6";
  var handleChangeText1 = (0, _react.useCallback)(function (text) {
    if (!showFeedback) setInputText(text);
  }, [showFeedback, setInputText]);
  var handleChangeText2 = (0, _react.useCallback)(function (text) {
    if (!showFeedback) setInputText(text);
  }, [showFeedback, setInputText]);
  var handleOptionPress = (0, _react.useCallback)(function (index) {
    if (!showFeedback) setSelectedOption(index);
  }, [showFeedback, setSelectedOption]);
  var getOptionPressHandler = (0, _react.useCallback)(function (index) {
    return function () {
      return handleOptionPress(index);
    };
  }, [handleOptionPress]);
  if (!exercise) return null;
  var renderMultipleChoiceExercise = function renderMultipleChoiceExercise() {
    var _exercise$sentence;
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.container,
      children: [(0, _jsxRuntime.jsx)(ExerciseContent, {
        exercise: exercise,
        levelColor: levelColor,
        title: "Complete the sentence",
        content: (_exercise$sentence = exercise.sentence) == null ? void 0 : _exercise$sentence.replace("___", "______")
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.optionsSection,
        children: exercise.options.map(function (option, index) {
          return (0, _jsxRuntime.jsx)(OptionItem, {
            option: option,
            index: index,
            exercise: exercise,
            selectedOption: selectedOption,
            showFeedback: showFeedback,
            isCorrect: isCorrect,
            onPress: getOptionPressHandler(index),
            styles: styles,
            levelColor: levelColor
          }, option);
        })
      })]
    });
  };
  var renderFillBlankExercise = function renderFillBlankExercise() {
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.container,
      children: [(0, _jsxRuntime.jsx)(ExerciseContent, {
        exercise: exercise,
        levelColor: levelColor,
        title: "Complete the sentence",
        content: exercise.sentence || "Fill in the blank"
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.inputSection,
        children: (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
          style: getInputStyles(showFeedback, inputText, exercise.answer, isCorrect, styles, styles.fillBlankInput),
          value: inputText,
          onChangeText: handleChangeText1,
          placeholder: "Type your answer...",
          editable: !showFeedback || !isCorrect,
          autoCapitalize: "none",
          autoCorrect: false
        }, `fill-blank-input-${exerciseIndex}-${attempts}`)
      })]
    });
  };
  var renderTransformationExercise = function renderTransformationExercise() {
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.container,
      children: [(0, _jsxRuntime.jsx)(ExerciseContent, {
        exercise: exercise,
        levelColor: levelColor,
        title: "Transform this sentence",
        content: exercise.sentence,
        isItalic: true
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.inputSection,
        children: (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
          style: getInputStyles(showFeedback, inputText, exercise.answer, isCorrect, styles, styles.transformationInput),
          value: inputText,
          onChangeText: handleChangeText2,
          placeholder: "Write your transformed sentence...",
          editable: !showFeedback || !isCorrect,
          multiline: true,
          autoCapitalize: "none",
          autoCorrect: false
        }, `transformation-input-${exerciseIndex}-${attempts}`)
      })]
    });
  };
  if (exercise.type === "fillInTheBlank" && exercise.options) {
    return renderMultipleChoiceExercise();
  } else if (exercise.type === "fillInTheBlank") {
    return renderFillBlankExercise();
  } else if (exercise.type === "transformation") {
    return renderTransformationExercise();
  }
  return null;
};
GrammarExerciseRenderer.propTypes = {
  exercise: _propTypes.default.shape({
    question: _propTypes.default.string.isRequired,
    sentence: _propTypes.default.string,
    options: _propTypes.default.arrayOf(_propTypes.default.string),
    answer: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]).isRequired,
    type: _propTypes.default.oneOf(['fillInTheBlank', 'transformation']).isRequired
  }),
  selectedOption: _propTypes.default.number,
  setSelectedOption: _propTypes.default.func.isRequired,
  inputText: _propTypes.default.string,
  setInputText: _propTypes.default.func.isRequired,
  showFeedback: _propTypes.default.bool,
  isCorrect: _propTypes.default.bool,
  exerciseIndex: _propTypes.default.number,
  attempts: _propTypes.default.number
};
var _default = exports.default = GrammarExerciseRenderer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,