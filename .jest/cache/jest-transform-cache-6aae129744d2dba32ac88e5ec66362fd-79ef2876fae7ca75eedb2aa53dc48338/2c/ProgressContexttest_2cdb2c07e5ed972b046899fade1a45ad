6a8b2152ef8dc81c6e5c504c5d487fb1
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    setItem: jest.fn(function () {
      return Promise.resolve();
    }),
    getItem: jest.fn(function () {
      return Promise.resolve(null);
    }),
    removeItem: jest.fn(function () {
      return Promise.resolve();
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _ProgressContext = require("../../src/contexts/ProgressContext");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _constants = require("../../src/utils/constants");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var TestComponent = function TestComponent() {
  var _progress$exercises$v;
  var _useProgress = (0, _ProgressContext.useProgress)(),
    progress = _useProgress.progress,
    isLoading = _useProgress.isLoading,
    updateExerciseProgress = _useProgress.updateExerciseProgress,
    updateStats = _useProgress.updateStats,
    calculateGlobalProgress = _useProgress.calculateGlobalProgress,
    calculateLevelProgress = _useProgress.calculateLevelProgress,
    resetProgress = _useProgress.resetProgress;
  if (isLoading) {
    return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "loading-status",
      children: "Loading..."
    });
  }
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [(0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "global-progress",
      children: ["Global: ", calculateGlobalProgress(), "%"]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "level1-progress",
      children: ["Level 1: ", calculateLevelProgress('1'), "%"]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "level-bonus-progress",
      children: ["Level Bonus: ", calculateLevelProgress('bonus'), "%"]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "vocab-level1-completed",
      children: ["Vocab Level 1 Completed: ", ((_progress$exercises$v = progress.exercises.vocabulary) == null || (_progress$exercises$v = _progress$exercises$v['1']) == null ? void 0 : _progress$exercises$v.completed) || 0]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "streak",
      children: ["Streak: ", progress.stats.streak]
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Update Vocab Level 1",
      onPress: function onPress() {
        return updateExerciseProgress('vocabulary', '1', 50);
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Update Streak",
      onPress: function onPress() {
        return updateStats({
          streak: 5
        });
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Reset Progress",
      onPress: resetProgress
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Update Vocab Bonus",
      onPress: function onPress() {
        return updateExerciseProgress('vocabulary', 'bonus', 75);
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Update Grammar Bonus",
      onPress: function onPress() {
        return updateExerciseProgress('grammar', 'bonus', 50);
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Add New Exercise Type",
      onPress: function onPress() {
        return updateExerciseProgress('newType', '1', 25);
      }
    })]
  });
};
var ComponentWithoutProvider = function ComponentWithoutProvider() {
  (0, _ProgressContext.useProgress)();
  return null;
};
describe('ProgressContext', function () {
  beforeEach(function () {
    jest.useFakeTimers();
    _asyncStorage.default.getItem.mockClear();
    _asyncStorage.default.setItem.mockClear();
    _asyncStorage.default.removeItem.mockClear();
  });
  afterEach(function () {
    jest.runOnlyPendingTimers();
    jest.useRealTimers();
  });
  it('loads initial progress from AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
    var mockProgress = Object.assign({}, (0, _ProgressContext.createInitialProgress)(), {
      levels: {
        '1': {
          completed: 25,
          total: 100
        }
      },
      exercises: {
        vocabulary: {
          '1': {
            completed: 25,
            total: 100
          }
        }
      },
      stats: {
        streak: 1
      }
    });
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(mockProgress));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    expect(_reactNative.screen.getByTestId('loading-status')).toBeTruthy();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_reactNative.screen.queryByTestId('loading-status')).toBeNull();
    var level1ProgressText = _reactNative.screen.getByTestId('level1-progress').props.children.join('');
    expect(level1ProgressText).toBe('Level 1: 25%');
    var streakDisplay = _reactNative.screen.getByTestId('streak').props.children.join('');
    expect(streakDisplay).toBe('Streak: 1');
  }));
  it('updates exercise progress and recalculates level progress', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Vocab Level 1'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var savedProgress = JSON.parse(_asyncStorage.default.setItem.mock.calls[0][1]);
    expect(savedProgress.exercises.vocabulary['1'].completed).toBe(50);
    expect(savedProgress.levels['1'].completed).toBe(6);
  }));
  it('updates progress for a new exercise type and calculates average', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Add New Exercise Type'));
    var level1Text = _reactNative.screen.getByTestId('level1-progress').props.children.join('');
    expect(level1Text).toBe('Level 1: 3%');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var savedProgress = JSON.parse(_asyncStorage.default.setItem.mock.calls[0][1]);
    expect(savedProgress.exercises.newType['1'].completed).toBe(25);
  }));
  it('updates stats and saves to AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var streakChildren = _reactNative.screen.getByTestId('streak').props.children;
    var streakText = Array.isArray(streakChildren) ? streakChildren.join('') : streakChildren;
    expect(streakText).toBe('Streak: 0');
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Streak'));
    streakChildren = _reactNative.screen.getByTestId('streak').props.children;
    streakText = Array.isArray(streakChildren) ? streakChildren.join('') : streakChildren;
    expect(streakText).toBe('Streak: 5');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_asyncStorage.default.setItem).toHaveBeenCalledTimes(1);
    var savedProgress = JSON.parse(_asyncStorage.default.setItem.mock.calls[0][1]);
    expect(savedProgress.stats.streak).toBe(5);
  }));
  it('resets progress and removes from AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Vocab Level 1'));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Streak'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_asyncStorage.default.setItem).toHaveBeenCalledTimes(1);
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Reset Progress'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield Promise.resolve();
    }));
    expect(_asyncStorage.default.removeItem).toHaveBeenCalledWith(_constants.STORAGE_KEYS.USER_PROGRESS);
    var level1Children = _reactNative.screen.getByTestId('level1-progress').props.children;
    var level1Text = Array.isArray(level1Children) ? level1Children.join('') : level1Children;
    expect(level1Text).toBe('Level 1: 0%');
    var streakChildren = _reactNative.screen.getByTestId('streak').props.children;
    var streakText = Array.isArray(streakChildren) ? streakChildren.join('') : streakChildren;
    expect(streakText).toBe('Streak: 0');
  }));
  it('calculates level progress correctly when there are no exercises for a level', (0, _asyncToGenerator2.default)(function* () {
    var mockInitialProgress = (0, _ProgressContext.createInitialProgress)();
    mockInitialProgress.exercises = {};
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(mockInitialProgress));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var level1Text = _reactNative.screen.getByTestId('level1-progress').props.children.join('');
    expect(level1Text).toBe('Level 1: 0%');
  }));
  it('handles errors during initial loading', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockRejectedValueOnce(new Error('Mock AsyncStorage Error'));
    var consoleErrorSpy = jest.spyOn(console, 'error');
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(consoleErrorSpy).toHaveBeenCalledWith('Erreur chargement progression:', expect.any(Error));
    expect(_reactNative.screen.queryByTestId('loading-status')).toBeNull();
    var globalProgressText = _reactNative.screen.getByTestId('global-progress').props.children.join('');
    expect(globalProgressText).toBe('Global: 0%');
    consoleErrorSpy.mockRestore();
  }));
  it('handles errors during saving progress', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.setItem.mockRejectedValueOnce(new Error('Mock AsyncStorage Save Error'));
    var consoleErrorSpy = jest.spyOn(console, 'error');
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Streak'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(consoleErrorSpy).toHaveBeenCalledWith('Erreur sauvegarde progression:', expect.any(Error));
    consoleErrorSpy.mockRestore();
  }));
  it('throws an error if useProgress is used outside of ProgressProvider', function () {
    var originalError = console.error;
    console.error = jest.fn();
    expect(function () {
      return (0, _reactNative.render)((0, _jsxRuntime.jsx)(ComponentWithoutProvider, {}));
    }).toThrow('useProgress must be used within a ProgressProvider');
    console.error = originalError;
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJzZXRJdGVtIiwiamVzdCIsImZuIiwiUHJvbWlzZSIsInJlc29sdmUiLCJnZXRJdGVtIiwicmVtb3ZlSXRlbSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX3JlYWN0IiwiX3JlYWN0TmF0aXZlIiwiX3JlYWN0TmF0aXZlMiIsIl9Qcm9ncmVzc0NvbnRleHQiLCJfYXN5bmNTdG9yYWdlIiwiX2NvbnN0YW50cyIsIl9qc3hSdW50aW1lIiwiX3JlcXVpcmUiLCJUZXN0Q29tcG9uZW50IiwiX3Byb2dyZXNzJGV4ZXJjaXNlcyR2IiwiX3VzZVByb2dyZXNzIiwidXNlUHJvZ3Jlc3MiLCJwcm9ncmVzcyIsImlzTG9hZGluZyIsInVwZGF0ZUV4ZXJjaXNlUHJvZ3Jlc3MiLCJ1cGRhdGVTdGF0cyIsImNhbGN1bGF0ZUdsb2JhbFByb2dyZXNzIiwiY2FsY3VsYXRlTGV2ZWxQcm9ncmVzcyIsInJlc2V0UHJvZ3Jlc3MiLCJqc3giLCJUZXh0IiwidGVzdElEIiwiY2hpbGRyZW4iLCJqc3hzIiwiRnJhZ21lbnQiLCJleGVyY2lzZXMiLCJ2b2NhYnVsYXJ5IiwiY29tcGxldGVkIiwic3RhdHMiLCJzdHJlYWsiLCJCdXR0b24iLCJ0aXRsZSIsIm9uUHJlc3MiLCJDb21wb25lbnRXaXRob3V0UHJvdmlkZXIiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJ1c2VGYWtlVGltZXJzIiwiQXN5bmNTdG9yYWdlIiwibW9ja0NsZWFyIiwiYWZ0ZXJFYWNoIiwicnVuT25seVBlbmRpbmdUaW1lcnMiLCJ1c2VSZWFsVGltZXJzIiwiaXQiLCJkZWZhdWx0IiwibW9ja1Byb2dyZXNzIiwiT2JqZWN0IiwiYXNzaWduIiwiY3JlYXRlSW5pdGlhbFByb2dyZXNzIiwibGV2ZWxzIiwidG90YWwiLCJtb2NrUmVzb2x2ZWRWYWx1ZU9uY2UiLCJKU09OIiwic3RyaW5naWZ5IiwicmVuZGVyIiwiUHJvZ3Jlc3NQcm92aWRlciIsImV4cGVjdCIsInNjcmVlbiIsImdldEJ5VGVzdElkIiwidG9CZVRydXRoeSIsImFjdCIsInJ1bkFsbFRpbWVycyIsInF1ZXJ5QnlUZXN0SWQiLCJ0b0JlTnVsbCIsImxldmVsMVByb2dyZXNzVGV4dCIsInByb3BzIiwiam9pbiIsInRvQmUiLCJzdHJlYWtEaXNwbGF5IiwiZmlyZUV2ZW50IiwicHJlc3MiLCJnZXRCeVRleHQiLCJzYXZlZFByb2dyZXNzIiwicGFyc2UiLCJjYWxscyIsImxldmVsMVRleHQiLCJuZXdUeXBlIiwic3RyZWFrQ2hpbGRyZW4iLCJzdHJlYWtUZXh0IiwiQXJyYXkiLCJpc0FycmF5IiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJTVE9SQUdFX0tFWVMiLCJVU0VSX1BST0dSRVNTIiwibGV2ZWwxQ2hpbGRyZW4iLCJtb2NrSW5pdGlhbFByb2dyZXNzIiwibW9ja1JlamVjdGVkVmFsdWVPbmNlIiwiRXJyb3IiLCJjb25zb2xlRXJyb3JTcHkiLCJzcHlPbiIsImNvbnNvbGUiLCJhbnkiLCJnbG9iYWxQcm9ncmVzc1RleHQiLCJtb2NrUmVzdG9yZSIsIm9yaWdpbmFsRXJyb3IiLCJlcnJvciIsInRvVGhyb3ciXSwic291cmNlcyI6WyJQcm9ncmVzc0NvbnRleHQudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4sIGFjdCwgZmlyZUV2ZW50IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgVGV4dCwgQnV0dG9uIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IFByb2dyZXNzUHJvdmlkZXIsIHVzZVByb2dyZXNzLCBjcmVhdGVJbml0aWFsUHJvZ3Jlc3MgfSBmcm9tICcuLi8uLi9zcmMvY29udGV4dHMvUHJvZ3Jlc3NDb250ZXh0JztcbmltcG9ydCBBc3luY1N0b3JhZ2UgZnJvbSAnQHJlYWN0LW5hdGl2ZS1hc3luYy1zdG9yYWdlL2FzeW5jLXN0b3JhZ2UnO1xuaW1wb3J0IHsgU1RPUkFHRV9LRVlTLCBFWEVSQ0lTRVMsIExBTkdVQUdFX0xFVkVMUywgQk9OVVNfRVhFUkNJU0VTIH0gZnJvbSAnLi4vLi4vc3JjL3V0aWxzL2NvbnN0YW50cyc7XG5cbi8vIE1vY2sgQXN5bmNTdG9yYWdlXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlJywgKCkgPT4gKHtcbiAgc2V0SXRlbTogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoKSksXG4gIGdldEl0ZW06IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKG51bGwpKSxcbiAgcmVtb3ZlSXRlbTogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoKSksXG59KSk7XG5cbi8vIFVuIGNvbXBvc2FudCBkZSB0ZXN0IHBvdXIgY29uc29tbWVyIGxlIGNvbnRleHRlXG5jb25zdCBUZXN0Q29tcG9uZW50ID0gKCkgPT4ge1xuICBjb25zdCB7XG4gICAgcHJvZ3Jlc3MsXG4gICAgaXNMb2FkaW5nLFxuICAgIHVwZGF0ZUV4ZXJjaXNlUHJvZ3Jlc3MsXG4gICAgdXBkYXRlU3RhdHMsXG4gICAgY2FsY3VsYXRlR2xvYmFsUHJvZ3Jlc3MsXG4gICAgY2FsY3VsYXRlTGV2ZWxQcm9ncmVzcyxcbiAgICByZXNldFByb2dyZXNzLFxuICB9ID0gdXNlUHJvZ3Jlc3MoKTtcblxuICBpZiAoaXNMb2FkaW5nKSB7XG4gICAgcmV0dXJuIDxUZXh0IHRlc3RJRD1cImxvYWRpbmctc3RhdHVzXCI+TG9hZGluZy4uLjwvVGV4dD47XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8VGV4dCB0ZXN0SUQ9XCJnbG9iYWwtcHJvZ3Jlc3NcIj5HbG9iYWw6IHtjYWxjdWxhdGVHbG9iYWxQcm9ncmVzcygpfSU8L1RleHQ+XG4gICAgICA8VGV4dCB0ZXN0SUQ9XCJsZXZlbDEtcHJvZ3Jlc3NcIj5MZXZlbCAxOiB7Y2FsY3VsYXRlTGV2ZWxQcm9ncmVzcygnMScpfSU8L1RleHQ+XG4gICAgICA8VGV4dCB0ZXN0SUQ9XCJsZXZlbC1ib251cy1wcm9ncmVzc1wiPkxldmVsIEJvbnVzOiB7Y2FsY3VsYXRlTGV2ZWxQcm9ncmVzcygnYm9udXMnKX0lPC9UZXh0PlxuICAgICAgPFRleHQgdGVzdElEPVwidm9jYWItbGV2ZWwxLWNvbXBsZXRlZFwiPlxuICAgICAgICBWb2NhYiBMZXZlbCAxIENvbXBsZXRlZDoge3Byb2dyZXNzLmV4ZXJjaXNlcy52b2NhYnVsYXJ5Py5bJzEnXT8uY29tcGxldGVkIHx8IDB9XG4gICAgICA8L1RleHQ+XG4gICAgICA8VGV4dCB0ZXN0SUQ9XCJzdHJlYWtcIj5TdHJlYWs6IHtwcm9ncmVzcy5zdGF0cy5zdHJlYWt9PC9UZXh0PlxuXG4gICAgICA8QnV0dG9uIHRpdGxlPVwiVXBkYXRlIFZvY2FiIExldmVsIDFcIiBvblByZXNzPXsoKSA9PiB1cGRhdGVFeGVyY2lzZVByb2dyZXNzKCd2b2NhYnVsYXJ5JywgJzEnLCA1MCl9IC8+XG4gICAgICA8QnV0dG9uIHRpdGxlPVwiVXBkYXRlIFN0cmVha1wiIG9uUHJlc3M9eygpID0+IHVwZGF0ZVN0YXRzKHsgc3RyZWFrOiA1IH0pfSAvPlxuICAgICAgPEJ1dHRvbiB0aXRsZT1cIlJlc2V0IFByb2dyZXNzXCIgb25QcmVzcz17cmVzZXRQcm9ncmVzc30gLz5cbiAgICAgIDxCdXR0b24gdGl0bGU9XCJVcGRhdGUgVm9jYWIgQm9udXNcIiBvblByZXNzPXsoKSA9PiB1cGRhdGVFeGVyY2lzZVByb2dyZXNzKCd2b2NhYnVsYXJ5JywgJ2JvbnVzJywgNzUpfSAvPlxuICAgICAgPEJ1dHRvbiB0aXRsZT1cIlVwZGF0ZSBHcmFtbWFyIEJvbnVzXCIgb25QcmVzcz17KCkgPT4gdXBkYXRlRXhlcmNpc2VQcm9ncmVzcygnZ3JhbW1hcicsICdib251cycsIDUwKX0gLz5cbiAgICAgIDxCdXR0b24gdGl0bGU9XCJBZGQgTmV3IEV4ZXJjaXNlIFR5cGVcIiBvblByZXNzPXsoKSA9PiB1cGRhdGVFeGVyY2lzZVByb2dyZXNzKCduZXdUeXBlJywgJzEnLCAyNSl9IC8+XG4gICAgPC8+XG4gICk7XG59O1xuXG4vLyBVbiBjb21wb3NhbnQgcG91ciB0ZXN0ZXIgbGUgaG9vayBlbiBkZWhvcnMgZHUgcHJvdmlkZXJcbmNvbnN0IENvbXBvbmVudFdpdGhvdXRQcm92aWRlciA9ICgpID0+IHtcbiAgdXNlUHJvZ3Jlc3MoKTtcbiAgcmV0dXJuIG51bGw7XG59O1xuXG5kZXNjcmliZSgnUHJvZ3Jlc3NDb250ZXh0JywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LnVzZUZha2VUaW1lcnMoKTtcbiAgICBBc3luY1N0b3JhZ2UuZ2V0SXRlbS5tb2NrQ2xlYXIoKTtcbiAgICBBc3luY1N0b3JhZ2Uuc2V0SXRlbS5tb2NrQ2xlYXIoKTtcbiAgICBBc3luY1N0b3JhZ2UucmVtb3ZlSXRlbS5tb2NrQ2xlYXIoKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LnJ1bk9ubHlQZW5kaW5nVGltZXJzKCk7XG4gICAgamVzdC51c2VSZWFsVGltZXJzKCk7XG4gIH0pO1xuXG4gIC8vID09PT09PT09PT0gVGVzdHMgZGUgYmFzZSA9PT09PT09PT09XG5cbiAgaXQoJ2xvYWRzIGluaXRpYWwgcHJvZ3Jlc3MgZnJvbSBBc3luY1N0b3JhZ2UnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbW9ja1Byb2dyZXNzID0ge1xuICAgICAgLi4uY3JlYXRlSW5pdGlhbFByb2dyZXNzKCksXG4gICAgICBsZXZlbHM6IHsgJzEnOiB7IGNvbXBsZXRlZDogMjUsIHRvdGFsOiAxMDAgfSB9LFxuICAgICAgZXhlcmNpc2VzOiB7IHZvY2FidWxhcnk6IHsgJzEnOiB7IGNvbXBsZXRlZDogMjUsIHRvdGFsOiAxMDAgfSB9IH0sXG4gICAgICBzdGF0czogeyBzdHJlYWs6IDEgfSxcbiAgICB9O1xuICAgIEFzeW5jU3RvcmFnZS5nZXRJdGVtLm1vY2tSZXNvbHZlZFZhbHVlT25jZShKU09OLnN0cmluZ2lmeShtb2NrUHJvZ3Jlc3MpKTtcblxuICAgIHJlbmRlcihcbiAgICAgIDxQcm9ncmVzc1Byb3ZpZGVyPlxuICAgICAgICA8VGVzdENvbXBvbmVudCAvPlxuICAgICAgPC9Qcm9ncmVzc1Byb3ZpZGVyPlxuICAgICk7XG5cbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdsb2FkaW5nLXN0YXR1cycpKS50b0JlVHJ1dGh5KCk7XG5cbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgamVzdC5ydW5BbGxUaW1lcnMoKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChzY3JlZW4ucXVlcnlCeVRlc3RJZCgnbG9hZGluZy1zdGF0dXMnKSkudG9CZU51bGwoKTtcbiAgICBjb25zdCBsZXZlbDFQcm9ncmVzc1RleHQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2xldmVsMS1wcm9ncmVzcycpLnByb3BzLmNoaWxkcmVuLmpvaW4oJycpO1xuICAgIGV4cGVjdChsZXZlbDFQcm9ncmVzc1RleHQpLnRvQmUoJ0xldmVsIDE6IDI1JScpO1xuICAgIGNvbnN0IHN0cmVha0Rpc3BsYXkgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ3N0cmVhaycpLnByb3BzLmNoaWxkcmVuLmpvaW4oJycpO1xuICAgIGV4cGVjdChzdHJlYWtEaXNwbGF5KS50b0JlKCdTdHJlYWs6IDEnKTtcbiAgfSk7XG5cbiAgaXQoJ3VwZGF0ZXMgZXhlcmNpc2UgcHJvZ3Jlc3MgYW5kIHJlY2FsY3VsYXRlcyBsZXZlbCBwcm9ncmVzcycsIGFzeW5jICgpID0+IHtcbiAgICByZW5kZXIoXG4gICAgICA8UHJvZ3Jlc3NQcm92aWRlcj5cbiAgICAgICAgPFRlc3RDb21wb25lbnQgLz5cbiAgICAgIDwvUHJvZ3Jlc3NQcm92aWRlcj5cbiAgICApO1xuXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGplc3QucnVuQWxsVGltZXJzKCk7XG4gICAgfSk7XG5cbiAgICBmaXJlRXZlbnQucHJlc3Moc2NyZWVuLmdldEJ5VGV4dCgnVXBkYXRlIFZvY2FiIExldmVsIDEnKSk7XG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGplc3QucnVuQWxsVGltZXJzKCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBzYXZlZFByb2dyZXNzID0gSlNPTi5wYXJzZShBc3luY1N0b3JhZ2Uuc2V0SXRlbS5tb2NrLmNhbGxzWzBdWzFdKTtcbiAgICBleHBlY3Qoc2F2ZWRQcm9ncmVzcy5leGVyY2lzZXMudm9jYWJ1bGFyeVsnMSddLmNvbXBsZXRlZCkudG9CZSg1MCk7XG4gICAgZXhwZWN0KHNhdmVkUHJvZ3Jlc3MubGV2ZWxzWycxJ10uY29tcGxldGVkKS50b0JlKDYpO1xuICB9KTtcblxuICBpdCgndXBkYXRlcyBwcm9ncmVzcyBmb3IgYSBuZXcgZXhlcmNpc2UgdHlwZSBhbmQgY2FsY3VsYXRlcyBhdmVyYWdlJywgYXN5bmMgKCkgPT4ge1xuICAgIHJlbmRlcihcbiAgICAgIDxQcm9ncmVzc1Byb3ZpZGVyPlxuICAgICAgICA8VGVzdENvbXBvbmVudCAvPlxuICAgICAgPC9Qcm9ncmVzc1Byb3ZpZGVyPlxuICAgICk7XG4gICAgXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGplc3QucnVuQWxsVGltZXJzKCk7XG4gICAgfSk7XG5cbiAgICBmaXJlRXZlbnQucHJlc3Moc2NyZWVuLmdldEJ5VGV4dCgnQWRkIE5ldyBFeGVyY2lzZSBUeXBlJykpO1xuICAgIFxuICAgIGNvbnN0IGxldmVsMVRleHQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2xldmVsMS1wcm9ncmVzcycpLnByb3BzLmNoaWxkcmVuLmpvaW4oJycpO1xuICAgIGV4cGVjdChsZXZlbDFUZXh0KS50b0JlKCdMZXZlbCAxOiAzJScpO1xuICAgIFxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBqZXN0LnJ1bkFsbFRpbWVycygpO1xuICAgIH0pO1xuICAgIFxuICAgIGNvbnN0IHNhdmVkUHJvZ3Jlc3MgPSBKU09OLnBhcnNlKEFzeW5jU3RvcmFnZS5zZXRJdGVtLm1vY2suY2FsbHNbMF1bMV0pO1xuICAgIGV4cGVjdChzYXZlZFByb2dyZXNzLmV4ZXJjaXNlcy5uZXdUeXBlWycxJ10uY29tcGxldGVkKS50b0JlKDI1KTtcbiAgfSk7XG5cbiAgaXQoJ3VwZGF0ZXMgc3RhdHMgYW5kIHNhdmVzIHRvIEFzeW5jU3RvcmFnZScsIGFzeW5jICgpID0+IHtcbiAgICByZW5kZXIoXG4gICAgICA8UHJvZ3Jlc3NQcm92aWRlcj5cbiAgICAgICAgPFRlc3RDb21wb25lbnQgLz5cbiAgICAgIDwvUHJvZ3Jlc3NQcm92aWRlcj5cbiAgICApO1xuXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGplc3QucnVuQWxsVGltZXJzKCk7XG4gICAgfSk7XG5cbiAgICBsZXQgc3RyZWFrQ2hpbGRyZW4gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ3N0cmVhaycpLnByb3BzLmNoaWxkcmVuO1xuICAgIGxldCBzdHJlYWtUZXh0ID0gQXJyYXkuaXNBcnJheShzdHJlYWtDaGlsZHJlbikgPyBzdHJlYWtDaGlsZHJlbi5qb2luKCcnKSA6IHN0cmVha0NoaWxkcmVuO1xuICAgIGV4cGVjdChzdHJlYWtUZXh0KS50b0JlKCdTdHJlYWs6IDAnKTtcblxuICAgIGZpcmVFdmVudC5wcmVzcyhzY3JlZW4uZ2V0QnlUZXh0KCdVcGRhdGUgU3RyZWFrJykpO1xuXG4gICAgc3RyZWFrQ2hpbGRyZW4gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ3N0cmVhaycpLnByb3BzLmNoaWxkcmVuO1xuICAgIHN0cmVha1RleHQgPSBBcnJheS5pc0FycmF5KHN0cmVha0NoaWxkcmVuKSA/IHN0cmVha0NoaWxkcmVuLmpvaW4oJycpIDogc3RyZWFrQ2hpbGRyZW47XG4gICAgZXhwZWN0KHN0cmVha1RleHQpLnRvQmUoJ1N0cmVhazogNScpO1xuXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGplc3QucnVuQWxsVGltZXJzKCk7XG4gICAgfSk7XG5cbiAgICBleHBlY3QoQXN5bmNTdG9yYWdlLnNldEl0ZW0pLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICBjb25zdCBzYXZlZFByb2dyZXNzID0gSlNPTi5wYXJzZShBc3luY1N0b3JhZ2Uuc2V0SXRlbS5tb2NrLmNhbGxzWzBdWzFdKTtcbiAgICBleHBlY3Qoc2F2ZWRQcm9ncmVzcy5zdGF0cy5zdHJlYWspLnRvQmUoNSk7XG4gIH0pO1xuICBcbiAgaXQoJ3Jlc2V0cyBwcm9ncmVzcyBhbmQgcmVtb3ZlcyBmcm9tIEFzeW5jU3RvcmFnZScsIGFzeW5jICgpID0+IHtcbiAgICByZW5kZXIoXG4gICAgICA8UHJvZ3Jlc3NQcm92aWRlcj5cbiAgICAgICAgPFRlc3RDb21wb25lbnQgLz5cbiAgICAgIDwvUHJvZ3Jlc3NQcm92aWRlcj5cbiAgICApO1xuXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGplc3QucnVuQWxsVGltZXJzKCk7XG4gICAgfSk7XG5cbiAgICBmaXJlRXZlbnQucHJlc3Moc2NyZWVuLmdldEJ5VGV4dCgnVXBkYXRlIFZvY2FiIExldmVsIDEnKSk7XG4gICAgZmlyZUV2ZW50LnByZXNzKHNjcmVlbi5nZXRCeVRleHQoJ1VwZGF0ZSBTdHJlYWsnKSk7XG5cbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgamVzdC5ydW5BbGxUaW1lcnMoKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChBc3luY1N0b3JhZ2Uuc2V0SXRlbSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuXG4gICAgZmlyZUV2ZW50LnByZXNzKHNjcmVlbi5nZXRCeVRleHQoJ1Jlc2V0IFByb2dyZXNzJykpO1xuXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KEFzeW5jU3RvcmFnZS5yZW1vdmVJdGVtKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChTVE9SQUdFX0tFWVMuVVNFUl9QUk9HUkVTUyk7XG5cbiAgICBjb25zdCBsZXZlbDFDaGlsZHJlbiA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnbGV2ZWwxLXByb2dyZXNzJykucHJvcHMuY2hpbGRyZW47XG4gICAgY29uc3QgbGV2ZWwxVGV4dCA9IEFycmF5LmlzQXJyYXkobGV2ZWwxQ2hpbGRyZW4pID8gbGV2ZWwxQ2hpbGRyZW4uam9pbignJykgOiBsZXZlbDFDaGlsZHJlbjtcbiAgICBleHBlY3QobGV2ZWwxVGV4dCkudG9CZSgnTGV2ZWwgMTogMCUnKTtcblxuICAgIGNvbnN0IHN0cmVha0NoaWxkcmVuID0gc2NyZWVuLmdldEJ5VGVzdElkKCdzdHJlYWsnKS5wcm9wcy5jaGlsZHJlbjtcbiAgICBjb25zdCBzdHJlYWtUZXh0ID0gQXJyYXkuaXNBcnJheShzdHJlYWtDaGlsZHJlbikgPyBzdHJlYWtDaGlsZHJlbi5qb2luKCcnKSA6IHN0cmVha0NoaWxkcmVuO1xuICAgIGV4cGVjdChzdHJlYWtUZXh0KS50b0JlKCdTdHJlYWs6IDAnKTtcbiAgfSk7XG5cbiAgLy8gPT09PT09PT09PSBOb3V2ZWF1eCB0ZXN0cyBwb3VyIGxhIGNvdXZlcnR1cmUgPT09PT09PT09PVxuICAvLyBPbiBzJ2Fzc3VyZSBkZSB0ZXN0ZXIgbGVzIGNhcyBleHRyw6ptZXNcblxuICBpdCgnY2FsY3VsYXRlcyBsZXZlbCBwcm9ncmVzcyBjb3JyZWN0bHkgd2hlbiB0aGVyZSBhcmUgbm8gZXhlcmNpc2VzIGZvciBhIGxldmVsJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIE92ZXJyaWRlIGwnaW5pdGlhbGlzYXRpb24gcG91ciBzaW11bGVyIGwnYWJzZW5jZSBkJ2V4ZXJjaWNlc1xuICAgIGNvbnN0IG1vY2tJbml0aWFsUHJvZ3Jlc3MgPSBjcmVhdGVJbml0aWFsUHJvZ3Jlc3MoKTtcbiAgICBtb2NrSW5pdGlhbFByb2dyZXNzLmV4ZXJjaXNlcyA9IHt9O1xuICAgIFxuICAgIEFzeW5jU3RvcmFnZS5nZXRJdGVtLm1vY2tSZXNvbHZlZFZhbHVlT25jZShKU09OLnN0cmluZ2lmeShtb2NrSW5pdGlhbFByb2dyZXNzKSk7XG5cbiAgICByZW5kZXIoXG4gICAgICA8UHJvZ3Jlc3NQcm92aWRlcj5cbiAgICAgICAgPFRlc3RDb21wb25lbnQgLz5cbiAgICAgIDwvUHJvZ3Jlc3NQcm92aWRlcj5cbiAgICApO1xuXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGplc3QucnVuQWxsVGltZXJzKCk7XG4gICAgfSk7XG5cbiAgICAvLyBMYSBwcm9ncmVzc2lvbiBwb3VyIHVuIG5pdmVhdSBzYW5zIGV4ZXJjaWNlIGRvaXQgw6p0cmUgMFxuICAgIGNvbnN0IGxldmVsMVRleHQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2xldmVsMS1wcm9ncmVzcycpLnByb3BzLmNoaWxkcmVuLmpvaW4oJycpO1xuICAgIGV4cGVjdChsZXZlbDFUZXh0KS50b0JlKCdMZXZlbCAxOiAwJScpO1xuICB9KTtcblxuICBpdCgnaGFuZGxlcyBlcnJvcnMgZHVyaW5nIGluaXRpYWwgbG9hZGluZycsIGFzeW5jICgpID0+IHtcbiAgICAvLyBTaW11bGVyIHVuZSBlcnJldXIgZGUgY2hhcmdlbWVudFxuICAgIEFzeW5jU3RvcmFnZS5nZXRJdGVtLm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoJ01vY2sgQXN5bmNTdG9yYWdlIEVycm9yJykpO1xuICAgIGNvbnN0IGNvbnNvbGVFcnJvclNweSA9IGplc3Quc3B5T24oY29uc29sZSwgJ2Vycm9yJyk7XG5cbiAgICByZW5kZXIoXG4gICAgICA8UHJvZ3Jlc3NQcm92aWRlcj5cbiAgICAgICAgPFRlc3RDb21wb25lbnQgLz5cbiAgICAgIDwvUHJvZ3Jlc3NQcm92aWRlcj5cbiAgICApO1xuXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGplc3QucnVuQWxsVGltZXJzKCk7XG4gICAgfSk7XG5cbiAgICAvLyBDZXMgYXNzZXJ0aW9ucyBjb3V2cmVudCBsZXMgbGlnbmVzIDE3OCBldCAxNzlcbiAgICBleHBlY3QoY29uc29sZUVycm9yU3B5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnRXJyZXVyIGNoYXJnZW1lbnQgcHJvZ3Jlc3Npb246JywgZXhwZWN0LmFueShFcnJvcikpO1xuICAgIGV4cGVjdChzY3JlZW4ucXVlcnlCeVRlc3RJZCgnbG9hZGluZy1zdGF0dXMnKSkudG9CZU51bGwoKTtcbiAgICBjb25zdCBnbG9iYWxQcm9ncmVzc1RleHQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2dsb2JhbC1wcm9ncmVzcycpLnByb3BzLmNoaWxkcmVuLmpvaW4oJycpO1xuICAgIGV4cGVjdChnbG9iYWxQcm9ncmVzc1RleHQpLnRvQmUoJ0dsb2JhbDogMCUnKTtcbiAgICBjb25zb2xlRXJyb3JTcHkubW9ja1Jlc3RvcmUoKTtcbiAgfSk7XG5cbiAgaXQoJ2hhbmRsZXMgZXJyb3JzIGR1cmluZyBzYXZpbmcgcHJvZ3Jlc3MnLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gU2ltdWxlciB1bmUgZXJyZXVyIGRlIHNhdXZlZ2FyZGVcbiAgICBBc3luY1N0b3JhZ2Uuc2V0SXRlbS5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UobmV3IEVycm9yKCdNb2NrIEFzeW5jU3RvcmFnZSBTYXZlIEVycm9yJykpO1xuICAgIGNvbnN0IGNvbnNvbGVFcnJvclNweSA9IGplc3Quc3B5T24oY29uc29sZSwgJ2Vycm9yJyk7XG5cbiAgICByZW5kZXIoXG4gICAgICA8UHJvZ3Jlc3NQcm92aWRlcj5cbiAgICAgICAgPFRlc3RDb21wb25lbnQgLz5cbiAgICAgIDwvUHJvZ3Jlc3NQcm92aWRlcj5cbiAgICApO1xuXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGplc3QucnVuQWxsVGltZXJzKCk7XG4gICAgfSk7XG5cbiAgICBmaXJlRXZlbnQucHJlc3Moc2NyZWVuLmdldEJ5VGV4dCgnVXBkYXRlIFN0cmVhaycpKTtcblxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBqZXN0LnJ1bkFsbFRpbWVycygpO1xuICAgIH0pO1xuXG4gICAgLy8gQ2VzIGFzc2VydGlvbnMgY291dnJlbnQgbGVzIGxpZ25lcyAyNDctMjUxXG4gICAgZXhwZWN0KGNvbnNvbGVFcnJvclNweSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ0VycmV1ciBzYXV2ZWdhcmRlIHByb2dyZXNzaW9uOicsIGV4cGVjdC5hbnkoRXJyb3IpKTtcbiAgICBjb25zb2xlRXJyb3JTcHkubW9ja1Jlc3RvcmUoKTtcbiAgfSk7XG5cbiAgLy8gVGVzdCBkZSBsYSBub24tdXRpbGlzYXRpb24gZHUgUHJvdmlkZXJcbiAgaXQoJ3Rocm93cyBhbiBlcnJvciBpZiB1c2VQcm9ncmVzcyBpcyB1c2VkIG91dHNpZGUgb2YgUHJvZ3Jlc3NQcm92aWRlcicsICgpID0+IHtcbiAgICBjb25zdCBvcmlnaW5hbEVycm9yID0gY29uc29sZS5lcnJvcjtcbiAgICBjb25zb2xlLmVycm9yID0gamVzdC5mbigpO1xuXG4gICAgZXhwZWN0KCgpID0+IHJlbmRlcig8Q29tcG9uZW50V2l0aG91dFByb3ZpZGVyIC8+KSkudG9UaHJvdyhcbiAgICAgICd1c2VQcm9ncmVzcyBtdXN0IGJlIHVzZWQgd2l0aGluIGEgUHJvZ3Jlc3NQcm92aWRlcidcbiAgICApO1xuXG4gICAgY29uc29sZS5lcnJvciA9IG9yaWdpbmFsRXJyb3I7XG4gIH0pO1xufSk7Il0sIm1hcHBpbmdzIjoiQUFRQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsMkNBQTJDLEVBQUU7RUFBQSxPQUFPO0lBQzVEQyxPQUFPLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDO01BQUEsT0FBTUMsT0FBTyxDQUFDQyxPQUFPLENBQUMsQ0FBQztJQUFBLEVBQUM7SUFDekNDLE9BQU8sRUFBRUosSUFBSSxDQUFDQyxFQUFFLENBQUM7TUFBQSxPQUFNQyxPQUFPLENBQUNDLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFBQSxFQUFDO0lBQzdDRSxVQUFVLEVBQUVMLElBQUksQ0FBQ0MsRUFBRSxDQUFDO01BQUEsT0FBTUMs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