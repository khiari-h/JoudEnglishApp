bbb79fa9972742691d3d500a817f1526
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var useSpelling = function useSpelling(spellingData, level, exerciseType) {
  var handleStorageError = function handleStorageError(error, operation) {
    var fallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    console.warn(`Spelling storage error in ${operation}:`, error);
    return fallback;
  };
  var STORAGE_KEY = `spelling_${level}_${exerciseType}`;
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    currentExerciseIndex = _useState2[0],
    setCurrentExerciseIndex = _useState2[1];
  var _useState3 = (0, _react.useState)(''),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    userInput = _useState4[0],
    setUserInput = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    showHint = _useState6[0],
    setShowHint = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    showFeedback = _useState8[0],
    setShowFeedback = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    isCorrect = _useState0[0],
    setIsCorrect = _useState0[1];
  var _useState1 = (0, _react.useState)(false),
    _useState10 = (0, _slicedToArray2.default)(_useState1, 2),
    loaded = _useState10[0],
    setLoaded = _useState10[1];
  var _useState11 = (0, _react.useState)([]),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    completedExercises = _useState12[0],
    setCompletedExercises = _useState12[1];
  var _useState13 = (0, _react.useState)([]),
    _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
    userAnswers = _useState14[0],
    setUserAnswers = _useState14[1];
  var isInitialized = (0, _react.useRef)(false);
  var exercises = (spellingData == null ? void 0 : spellingData.exercises) || [];
  var totalExercises = exercises.length;
  var currentExercise = exercises[currentExerciseIndex];
  var hasValidData = exercises.length > 0;
  var loadStoredData = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      var saved = yield _asyncStorage.default.getItem(STORAGE_KEY);
      if (saved) {
        var _data$lastPosition;
        var data = JSON.parse(saved);
        setCompletedExercises(data.completedExercises || []);
        setUserAnswers(data.userAnswers || []);
        if (((_data$lastPosition = data.lastPosition) == null ? void 0 : _data$lastPosition.exerciseIndex) !== undefined && data.lastPosition.exerciseIndex >= 0 && data.lastPosition.exerciseIndex < totalExercises) {
          setCurrentExerciseIndex(data.lastPosition.exerciseIndex);
        }
      }
    } catch (error) {
      handleStorageError(error, 'loadStoredData');
    } finally {
      setLoaded(true);
    }
  }), [STORAGE_KEY, totalExercises]);
  (0, _react.useEffect)(function () {
    if (!isInitialized.current) {
      loadStoredData();
      isInitialized.current = true;
    }
  }, [loadStoredData]);
  var saveToStorage = (0, _react.useCallback)(function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (dataToSave) {
      try {
        yield _asyncStorage.default.setItem(STORAGE_KEY, JSON.stringify(dataToSave));
      } catch (error) {
        handleStorageError(error, 'saveToStorage');
      }
    });
    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), [STORAGE_KEY]);
  var resetExerciseState = (0, _react.useCallback)(function () {
    setUserInput('');
    setShowHint(false);
    setShowFeedback(false);
    setIsCorrect(false);
  }, []);
  var toggleHint = (0, _react.useCallback)(function () {
    setShowHint(function (prev) {
      return !prev;
    });
  }, []);
  var checkAnswer = (0, _react.useCallback)(function () {
    if (!(currentExercise != null && currentExercise.correctAnswer)) {
      _reactNative.Alert.alert('Erreur', 'Réponse correcte non définie');
      return false;
    }
    try {
      var correct = false;
      switch (currentExercise.type) {
        case 'homophones':
          correct = userInput === currentExercise.correctAnswer;
          break;
        case 'correction':
        case 'spelling_rule':
        default:
          {
            var userAnswer = String(userInput).trim().toLowerCase();
            var correctAnswer = String(currentExercise.correctAnswer).trim().toLowerCase();
            correct = userAnswer === correctAnswer;
            break;
          }
      }
      setIsCorrect(correct);
      setShowFeedback(true);
      return correct;
    } catch (error) {
      setIsCorrect(false);
      setShowFeedback(true);
      return false;
    }
  }, [userInput, currentExercise]);
  var handleNext = (0, _react.useCallback)(function () {
    var newCompleted = completedExercises.includes(currentExerciseIndex) ? completedExercises : [].concat((0, _toConsumableArray2.default)(completedExercises), [currentExerciseIndex]);
    var newAnswer = {
      exerciseIndex: currentExerciseIndex,
      isCorrect: isCorrect,
      userAnswer: userInput,
      correctAnswer: (currentExercise == null ? void 0 : currentExercise.correctAnswer) || '',
      exerciseType: (currentExercise == null ? void 0 : currentExercise.type) || 'correction',
      timestamp: Date.now()
    };
    var newAnswers = [].concat((0, _toConsumableArray2.default)(userAnswers), [newAnswer]);
    var dataToSave = {
      completedExercises: newCompleted,
      userAnswers: newAnswers,
      lastPosition: {
        exerciseIndex: currentExerciseIndex < totalExercises - 1 ? currentExerciseIndex + 1 : currentExerciseIndex,
        exerciseType: exerciseType,
        timestamp: Date.now()
      }
    };
    saveToStorage(dataToSave);
    setCompletedExercises(newCompleted);
    setUserAnswers(newAnswers);
    if (currentExerciseIndex < totalExercises - 1) {
      setCurrentExerciseIndex(function (prev) {
        return prev + 1;
      });
      resetExerciseState();
    } else {
      _reactNative.Alert.alert("Félicitations", `Vous avez terminé tous les exercices d'orthographe ${exerciseType} du niveau ${level} !`);
      return {
        completed: true
      };
    }
    return {
      completed: false
    };
  }, [currentExerciseIndex, totalExercises, isCorrect, userInput, currentExercise, completedExercises, userAnswers, saveToStorage, resetExerciseState, exerciseType, level]);
  var retryExercise = (0, _react.useCallback)(function () {
    resetExerciseState();
  }, [resetExerciseState]);
  var stats = {
    totalExercises: totalExercises,
    completedExercisesCount: completedExercises.length,
    totalProgress: totalExercises > 0 ? Math.round(completedExercises.length / totalExercises * 100) : 0,
    remainingExercises: totalExercises - completedExercises.length,
    performance: {
      total: userAnswers.length,
      correct: userAnswers.filter(function (answer) {
        return answer.isCorrect;
      }).length,
      incorrect: userAnswers.filter(function (answer) {
        return !answer.isCorrect;
      }).length,
      accuracy: userAnswers.length > 0 ? Math.round(userAnswers.filter(function (answer) {
        return answer.isCorrect;
      }).length / userAnswers.length * 100) : 0
    },
    completedExercises: completedExercises,
    userAnswers: userAnswers
  };
  var isLastExercise = currentExerciseIndex === totalExercises - 1;
  return {
    currentExerciseIndex: currentExerciseIndex,
    userInput: userInput,
    showHint: showHint,
    showFeedback: showFeedback,
    isCorrect: isCorrect,
    completedExercises: completedExercises,
    userAnswers: userAnswers,
    loaded: loaded,
    currentExercise: currentExercise,
    totalExercises: totalExercises,
    exercises: exercises,
    setUserInput: setUserInput,
    toggleHint: toggleHint,
    checkAnswer: checkAnswer,
    handleNext: handleNext,
    retryExercise: retryExercise,
    resetExerciseState: resetExerciseState,
    isLastExercise: isLastExercise,
    hasValidData: hasValidData,
    stats: stats
  };
};
var _default = exports.default = useSpelling;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,