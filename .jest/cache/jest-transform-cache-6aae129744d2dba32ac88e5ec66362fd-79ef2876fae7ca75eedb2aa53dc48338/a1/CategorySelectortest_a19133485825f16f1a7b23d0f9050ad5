b6591e68f9a58fbde0b1ae7351eb1a96
_getJestObj().mock('react-native/Libraries/Components/ScrollView/ScrollView', function () {
  var React = require('react');
  var ScrollView = jest.requireActual('react-native/Libraries/Components/ScrollView/ScrollView');
  return Object.assign({}, ScrollView, {
    default: React.forwardRef(function (props, ref) {
      React.useImperativeHandle(ref, function () {
        return {
          scrollTo: jest.fn()
        };
      });
      return (0, _jsxRuntime.jsx)(ScrollView, Object.assign({}, props));
    })
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _CategorySelector = _interopRequireDefault(require("../../../src/components/exercise-common/CategorySelector"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.useFakeTimers();
jest.spyOn(_reactNative2.Animated, 'timing').mockImplementation(function (value, config) {
  var mockTiming = {
    start: function start(callback) {
      setTimeout(function () {
        if (callback) {
          callback({
            finished: true
          });
        }
      }, config.duration);
    },
    stop: jest.fn()
  };
  return mockTiming;
});
describe('CategorySelector Component', function () {
  var mockCategories = [{
    id: '1',
    name: 'Fruits'
  }, {
    id: '2',
    name: 'Vegetables'
  }, {
    id: '3',
    name: 'Dairy Products'
  }, {
    id: '4',
    name: 'Meat & Fish'
  }, {
    id: '5',
    name: 'Beverages'
  }];
  var defaultProps = {
    categories: mockCategories,
    selectedCategory: '1',
    onSelectCategory: jest.fn()
  };
  var renderCategorySelector = function renderCategorySelector() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, props)));
  };
  beforeEach(function () {
    jest.clearAllMocks();
  });
  afterAll(function () {
    jest.useRealTimers();
  });
  describe('Rendering', function () {
    it('should render categories in the correct order', function () {
      var _renderCategorySelect = renderCategorySelector(),
        getAllByRole = _renderCategorySelect.getAllByRole;
      var categoryNames = getAllByRole('button').map(function (element) {
        return element.props.accessibilityLabel;
      });
      expect(categoryNames).toEqual(mockCategories.map(function (cat) {
        return cat.name;
      }));
    });
    it('should highlight the selected category visually', function () {
      var _renderCategorySelect2 = renderCategorySelector({
          selectedCategory: '2'
        }),
        getByRole = _renderCategorySelect2.getByRole;
      var selectedPill = getByRole('button', {
        name: 'Vegetables'
      });
      expect(selectedPill).toHaveAccessibilityState({
        selected: true
      });
    });
  });
  describe('User Interactions', function () {});
  describe('Animations', function () {
    it('should not trigger new animation if one is already in progress', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect3 = renderCategorySelector({
          selectedCategory: '1',
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect3.getByText;
      _reactNative.fireEvent.press(getByText('Vegetables'));
      expect(mockOnSelect).toHaveBeenCalledTimes(1);
      jest.advanceTimersByTime(100);
      _reactNative.fireEvent.press(getByText('Vegetables'));
      expect(mockOnSelect).toHaveBeenCalledTimes(1);
      jest.runAllTimers();
      _reactNative.fireEvent.press(getByText('Vegetables'));
      expect(mockOnSelect).toHaveBeenCalledTimes(2);
    });
  });
  describe('Scrolling Behavior', function () {
    it('should handle scrolling when selectedCategory changes', (0, _asyncToGenerator2.default)(function* () {
      var _renderCategorySelect4 = renderCategorySelector({
          selectedCategory: '1'
        }),
        rerender = _renderCategorySelect4.rerender;
      var scrollToSpy = _reactNative2.ScrollView.prototype.scrollTo;
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
        selectedCategory: "5"
      })));
      yield (0, _reactNative.waitFor)(function () {
        expect(scrollToSpy).toHaveBeenCalled();
      });
    }));
  });
  describe('Performance', function () {
    it('should not re-render unnecessarily when props do not change', function () {
      var renderSpy = jest.fn();
      var TestWrapper = function TestWrapper(props) {
        renderSpy();
        return (0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, props));
      };
      var propsRef = Object.assign({}, defaultProps);
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, Object.assign({}, propsRef))),
        rerender = _render.rerender;
      renderSpy.mockClear();
      rerender((0, _jsxRuntime.jsx)(TestWrapper, Object.assign({}, propsRef)));
      expect(renderSpy).toHaveBeenCalledTimes(0);
    });
  });
  describe('Accessibility', function () {});
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,