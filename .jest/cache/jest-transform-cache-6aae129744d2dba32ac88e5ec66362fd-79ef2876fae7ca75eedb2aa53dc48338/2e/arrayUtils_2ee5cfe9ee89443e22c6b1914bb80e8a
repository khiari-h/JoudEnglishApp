1d0ae2f101dd9f1c3debe0fa9a44b3c8
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shuffleWithFallback = exports.shuffleInPlace = exports.shuffleArray = exports.shuffleAndTake = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var shuffleArray = exports.shuffleArray = function shuffleArray(array) {
  if (!Array.isArray(array)) {
    return [];
  }
  if (array.length <= 1) {
    return (0, _toConsumableArray2.default)(array);
  }
  var shuffled = (0, _toConsumableArray2.default)(array);
  for (var i = shuffled.length - 1; i > 0; i--) {
    var j = Math.floor(Math.random() * (i + 1));
    var _ref = [shuffled[j], shuffled[i]];
    shuffled[i] = _ref[0];
    shuffled[j] = _ref[1];
  }
  return shuffled;
};
var shuffleAndTake = exports.shuffleAndTake = function shuffleAndTake(array, count) {
  if (!Array.isArray(array) || array.length === 0 || count <= 0) {
    return [];
  }
  var shuffled = shuffleArray(array);
  return shuffled.slice(0, Math.min(count, array.length));
};
var shuffleWithFallback = exports.shuffleWithFallback = function shuffleWithFallback(array, fallbackArray, count) {
  if (!Array.isArray(array) || array.length === 0) {
    return shuffleAndTake(fallbackArray, count);
  }
  if (array.length >= count) {
    return shuffleAndTake(array, count);
  }
  var combined = [].concat((0, _toConsumableArray2.default)(array), (0, _toConsumableArray2.default)(fallbackArray));
  return shuffleAndTake(combined, count);
};
var shuffleInPlace = exports.shuffleInPlace = function shuffleInPlace(array) {
  if (!Array.isArray(array) || array.length <= 1) {
    return;
  }
  for (var i = array.length - 1; i > 0; i--) {
    var j = Math.floor(Math.random() * (i + 1));
    var _ref2 = [array[j], array[i]];
    array[i] = _ref2[0];
    array[j] = _ref2[1];
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzaHVmZmxlQXJyYXkiLCJleHBvcnRzIiwiYXJyYXkiLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGgiLCJfdG9Db25zdW1hYmxlQXJyYXkyIiwiZGVmYXVsdCIsInNodWZmbGVkIiwiaSIsImoiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJfcmVmIiwic2h1ZmZsZUFuZFRha2UiLCJjb3VudCIsInNsaWNlIiwibWluIiwic2h1ZmZsZVdpdGhGYWxsYmFjayIsImZhbGxiYWNrQXJyYXkiLCJjb21iaW5lZCIsImNvbmNhdCIsInNodWZmbGVJblBsYWNlIiwiX3JlZjIiXSwic291cmNlcyI6WyJhcnJheVV0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy91dGlscy9hcnJheVV0aWxzLmpzIC0gVXRpbGl0YWlyZXMgcG91ciBsYSBtYW5pcHVsYXRpb24gZCdhcnJheXNcclxuXHJcbi8qKlxyXG4gKiBNw6lsYW5nZSB1biBhcnJheSBlbiB1dGlsaXNhbnQgbCdhbGdvcml0aG1lIEZpc2hlci1ZYXRlcyAoc2h1ZmZsZSlcclxuICogUGx1cyBlZmZpY2FjZSBldCBwcsOpdmlzaWJsZSBxdWUgc29ydCgoKSA9PiBNYXRoLnJhbmRvbSgpIC0gMC41KVxyXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSAtIEwnYXJyYXkgw6AgbcOpbGFuZ2VyXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gLSBVbmUgY29waWUgbcOpbGFuZ8OpZSBkZSBsJ2FycmF5XHJcbiAqL1xyXG5leHBvcnQgY29uc3Qgc2h1ZmZsZUFycmF5ID0gKGFycmF5KSA9PiB7XHJcbiAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkge1xyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxuICBcclxuICBpZiAoYXJyYXkubGVuZ3RoIDw9IDEpIHtcclxuICAgIHJldHVybiBbLi4uYXJyYXldO1xyXG4gIH1cclxuXHJcbiAgY29uc3Qgc2h1ZmZsZWQgPSBbLi4uYXJyYXldO1xyXG4gIGZvciAobGV0IGkgPSBzaHVmZmxlZC5sZW5ndGggLSAxOyBpID4gMDsgaS0tKSB7XHJcbiAgICBjb25zdCBqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGkgKyAxKSk7XHJcbiAgICBbc2h1ZmZsZWRbaV0sIHNodWZmbGVkW2pdXSA9IFtzaHVmZmxlZFtqXSwgc2h1ZmZsZWRbaV1dO1xyXG4gIH1cclxuICBcclxuICByZXR1cm4gc2h1ZmZsZWQ7XHJcbn07XHJcblxyXG4vKipcclxuICogTcOpbGFuZ2UgdW4gYXJyYXkgZXQgcmV0b3VybmUgbGVzIG4gcHJlbWllcnMgw6lsw6ltZW50c1xyXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSAtIEwnYXJyYXkgw6AgbcOpbGFuZ2VyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudCAtIE5vbWJyZSBkJ8OpbMOpbWVudHMgw6AgcmV0b3VybmVyXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gLSBMZXMgbiBwcmVtaWVycyDDqWzDqW1lbnRzIG3DqWxhbmfDqXNcclxuICovXHJcbmV4cG9ydCBjb25zdCBzaHVmZmxlQW5kVGFrZSA9IChhcnJheSwgY291bnQpID0+IHtcclxuICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpIHx8IGFycmF5Lmxlbmd0aCA9PT0gMCB8fCBjb3VudCA8PSAwKSB7XHJcbiAgICByZXR1cm4gW107XHJcbiAgfVxyXG4gIFxyXG4gIGNvbnN0IHNodWZmbGVkID0gc2h1ZmZsZUFycmF5KGFycmF5KTtcclxuICByZXR1cm4gc2h1ZmZsZWQuc2xpY2UoMCwgTWF0aC5taW4oY291bnQsIGFycmF5Lmxlbmd0aCkpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIE3DqWxhbmdlIHVuIGFycmF5IGV0IHJldG91cm5lIGxlcyBuIHByZW1pZXJzIMOpbMOpbWVudHMgYXZlYyBmYWxsYmFja1xyXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSAtIEwnYXJyYXkgcHJpbmNpcGFsXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGZhbGxiYWNrQXJyYXkgLSBBcnJheSBkZSBmYWxsYmFjayBzaSBsZSBwcmluY2lwYWwgZXN0IGluc3VmZmlzYW50XHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudCAtIE5vbWJyZSBkJ8OpbMOpbWVudHMgw6AgcmV0b3VybmVyXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gLSBMZXMgbiBwcmVtaWVycyDDqWzDqW1lbnRzIG3DqWxhbmfDqXNcclxuICovXHJcbmV4cG9ydCBjb25zdCBzaHVmZmxlV2l0aEZhbGxiYWNrID0gKGFycmF5LCBmYWxsYmFja0FycmF5LCBjb3VudCkgPT4ge1xyXG4gIGlmICghQXJyYXkuaXNBcnJheShhcnJheSkgfHwgYXJyYXkubGVuZ3RoID09PSAwKSB7XHJcbiAgICByZXR1cm4gc2h1ZmZsZUFuZFRha2UoZmFsbGJhY2tBcnJheSwgY291bnQpO1xyXG4gIH1cclxuICBcclxuICBpZiAoYXJyYXkubGVuZ3RoID49IGNvdW50KSB7XHJcbiAgICByZXR1cm4gc2h1ZmZsZUFuZFRha2UoYXJyYXksIGNvdW50KTtcclxuICB9XHJcbiAgXHJcbiAgLy8gQ29tYmluZXIgbGVzIGRldXggYXJyYXlzIGV0IG3DqWxhbmdlclxyXG4gIGNvbnN0IGNvbWJpbmVkID0gWy4uLmFycmF5LCAuLi5mYWxsYmFja0FycmF5XTtcclxuICByZXR1cm4gc2h1ZmZsZUFuZFRha2UoY29tYmluZWQsIGNvdW50KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBNw6lsYW5nZSB1biBhcnJheSBlbiBwbGFjZSAobW9kaWZpZSBsJ2FycmF5IG9yaWdpbmFsKVxyXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSAtIEwnYXJyYXkgw6AgbcOpbGFuZ2VyXHJcbiAqL1xyXG5leHBvcnQgY29uc3Qgc2h1ZmZsZUluUGxhY2UgPSAoYXJyYXkpID0+IHtcclxuICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpIHx8IGFycmF5Lmxlbmd0aCA8PSAxKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBmb3IgKGxldCBpID0gYXJyYXkubGVuZ3RoIC0gMTsgaSA+IDA7IGktLSkge1xyXG4gICAgY29uc3QgaiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChpICsgMSkpO1xyXG4gICAgW2FycmF5W2ldLCBhcnJheVtqXV0gPSBbYXJyYXlbal0sIGFycmF5W2ldXTtcclxuICB9XHJcbn07XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBUU8sSUFBTUEsWUFBWSxHQUFBQyxPQUFBLENBQUFELFlBQUEsR0FBRyxTQUFmQSxZQUFZQSxDQUFJRSxLQUFLLEVBQUs7RUFDckMsSUFBSSxDQUFDQyxLQUFLLENBQUNDLE9BQU8sQ0FBQ0YsS0FBSyxDQUFDLEVBQUU7SUFDekIsT0FBTyxFQUFFO0VBQ1g7RUFFQSxJQUFJQSxLQUFLLENBQUNHLE1BQU0sSUFBSSxDQUFDLEVBQUU7SUFDckIsV0FBQUMsbUJBQUEsQ0FBQUMsT0FBQSxFQUFXTCxLQUFLO0VBQ2xCO0VBRUEsSUFBTU0sUUFBUSxPQUFBRixtQkFBQSxDQUFBQyxPQUFBLEVBQU9MLEtBQUssQ0FBQztFQUMzQixLQUFLLElBQUlPLENBQUMsR0FBR0QsUUFBUSxDQUFDSCxNQUFNLEdBQUcsQ0FBQyxFQUFFSSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEVBQUUsRUFBRTtJQUM1QyxJQUFNQyxDQUFDLEdBQUdDLElBQUksQ0FBQ0MsS0FBSyxDQUFDRCxJQUFJLENBQUNFLE1BQU0sQ0FBQyxDQUFDLElBQUlKLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUFDLElBQUFLLElBQUEsR0FDakIsQ0FBQ04sUUFBUSxDQUFDRSxDQUFDLENBQUMsRUFBRUYsUUFBUSxDQUFDQyxDQUFDLENBQUMsQ0FBQztJQUF0REQsUUFBUSxDQUFDQyxDQUFDLENBQUMsR0FBQUssSUFBQTtJQUFFTixRQUFRLENBQUNFLENBQUMsQ0FBQyxHQUFBSSxJQUFBO0VBQzNCO0VBRUEsT0FBT04sUUFBUTtBQUNqQixDQUFDO0FBUU0sSUFBTU8sY0FBYyxHQUFBZCxPQUFBLENBQUFjLGNBQUEsR0FBRyxTQUFqQkEsY0FBY0EsQ0FBSWIsS0FBSyxFQUFFYyxLQUFLLEVBQUs7RUFDOUMsSUFBSSxDQUFDYixLQUFLLENBQUNDLE9BQU8sQ0FBQ0YsS0FBSyxDQUFDLElBQUlBLEtBQUssQ0FBQ0csTUFBTSxLQUFLLENBQUMsSUFBSVcsS0FBSyxJQUFJLENBQUMsRUFBRTtJQUM3RCxPQUFPLEVBQUU7RUFDWDtFQUVBLElBQU1SLFFBQVEsR0FBR1IsWUFBWSxDQUFDRSxLQUFLLENBQUM7RUFDcEMsT0FBT00sUUFBUSxDQUFDUyxLQUFLLENBQUMsQ0FBQyxFQUFFTixJQUFJLENBQUNPLEdBQUcsQ0FBQ0YsS0FBSyxFQUFFZCxLQUFLLENBQUNHLE1BQU0sQ0FBQyxDQUFDO0FBQ3pELENBQUM7QUFTTSxJQUFNYyxtQkFBbUIsR0FBQWxCLE9BQUEsQ0FBQWtCLG1CQUFBLEdBQUcsU0FBdEJBLG1CQUFtQkEsQ0FBSWpCLEtBQUssRUFBRWtCLGFBQWEsRUFBRUosS0FBSyxFQUFLO0VBQ2xFLElBQUksQ0FBQ2IsS0FBSyxDQUFDQyxPQUFPLENBQUNGLEtBQUssQ0FBQyxJQUFJQSxLQUFLLENBQUNHLE1BQU0sS0FBSyxDQUFDLEVBQUU7SUFDL0MsT0FBT1UsY0FBYyxDQUFDSyxhQUFhLEVBQUVKLEtBQUssQ0FBQztFQUM3QztFQUVBLElBQUlkLEtBQUssQ0FBQ0csTUFBTSxJQUFJVyxLQUFLLEVBQUU7SUFDekIsT0FBT0QsY0FBYyxDQUFDYixLQUFLLEVBQUVjLEtBQUssQ0FBQztFQUNyQztFQUdBLElBQU1LLFFBQVEsTUFBQUMsTUFBQSxLQUFBaEIsbUJBQUEsQ0FBQUMsT0FBQSxFQUFPTCxLQUFLLE9BQUFJLG1CQUFBLENBQUFDLE9BQUEsRUFBS2EsYUFBYSxFQUFDO0VBQzdDLE9BQU9MLGNBQWMsQ0FBQ00sUUFBUSxFQUFFTCxLQUFLLENBQUM7QUFDeEMsQ0FBQztBQU1NLElBQU1PLGNBQWMsR0FBQXRCLE9BQUEsQ0FBQXNCLGNBQUEsR0FBRyxTQUFqQkEsY0FBY0EsQ0FBSXJCLEtBQUssRUFBSztFQUN2QyxJQUFJLENBQUNDLEtBQUssQ0FBQ0MsT0FBTyxDQUFDRixLQUFLLENBQUMsSUFBSUEsS0FBSyxDQUFDRyxNQUFNLElBQUksQ0FBQyxFQUFFO0lBQzlDO0VBQ0Y7RUFFQSxLQUFLLElBQUlJLENBQUMsR0FBR1AsS0FBSyxDQUFDRyxNQUFNLEdBQUcsQ0FBQyxFQUFFSSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEVBQUUsRUFBRTtJQUN6QyxJQUFNQyxDQUFDLEdBQUdDLElBQUksQ0FBQ0MsS0FBSyxDQUFDRCxJQUFJLENBQUNFLE1BQU0sQ0FBQyxDQUFDLElBQUlKLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUFDLElBQUFlLEtBQUEsR0FDdkIsQ0FBQ3RCLEtBQUssQ0FBQ1EsQ0FBQyxDQUFDLEVBQUVSLEtBQUssQ0FBQ08sQ0FBQyxDQUFDLENBQUM7SUFBMUNQLEtBQUssQ0FBQ08sQ0FBQyxDQUFDLEdBQUFlLEtBQUE7SUFBRXRCLEtBQUssQ0FBQ1EsQ0FBQyxDQUFDLEdBQUFjLEtBQUE7RUFDckI7QUFDRixDQUFDIiwiaWdub3JlTGlzdCI6W119