{"version":3,"names":["shuffleArray","exports","array","Array","isArray","length","_toConsumableArray2","default","shuffled","i","j","Math","floor","random","_ref","shuffleAndTake","count","slice","min","shuffleWithFallback","fallbackArray","combined","concat","shuffleInPlace","_ref2"],"sources":["arrayUtils.js"],"sourcesContent":["// src/utils/arrayUtils.js - Utilitaires pour la manipulation d'arrays\r\n\r\n/**\r\n * Mélange un array en utilisant l'algorithme Fisher-Yates (shuffle)\r\n * Plus efficace et prévisible que sort(() => Math.random() - 0.5)\r\n * @param {Array} array - L'array à mélanger\r\n * @returns {Array} - Une copie mélangée de l'array\r\n */\r\nexport const shuffleArray = (array) => {\r\n  if (!Array.isArray(array)) {\r\n    return [];\r\n  }\r\n  \r\n  if (array.length <= 1) {\r\n    return [...array];\r\n  }\r\n\r\n  const shuffled = [...array];\r\n  for (let i = shuffled.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\r\n  }\r\n  \r\n  return shuffled;\r\n};\r\n\r\n/**\r\n * Mélange un array et retourne les n premiers éléments\r\n * @param {Array} array - L'array à mélanger\r\n * @param {number} count - Nombre d'éléments à retourner\r\n * @returns {Array} - Les n premiers éléments mélangés\r\n */\r\nexport const shuffleAndTake = (array, count) => {\r\n  if (!Array.isArray(array) || array.length === 0 || count <= 0) {\r\n    return [];\r\n  }\r\n  \r\n  const shuffled = shuffleArray(array);\r\n  return shuffled.slice(0, Math.min(count, array.length));\r\n};\r\n\r\n/**\r\n * Mélange un array et retourne les n premiers éléments avec fallback\r\n * @param {Array} array - L'array principal\r\n * @param {Array} fallbackArray - Array de fallback si le principal est insuffisant\r\n * @param {number} count - Nombre d'éléments à retourner\r\n * @returns {Array} - Les n premiers éléments mélangés\r\n */\r\nexport const shuffleWithFallback = (array, fallbackArray, count) => {\r\n  if (!Array.isArray(array) || array.length === 0) {\r\n    return shuffleAndTake(fallbackArray, count);\r\n  }\r\n  \r\n  if (array.length >= count) {\r\n    return shuffleAndTake(array, count);\r\n  }\r\n  \r\n  // Combiner les deux arrays et mélanger\r\n  const combined = [...array, ...fallbackArray];\r\n  return shuffleAndTake(combined, count);\r\n};\r\n\r\n/**\r\n * Mélange un array en place (modifie l'array original)\r\n * @param {Array} array - L'array à mélanger\r\n */\r\nexport const shuffleInPlace = (array) => {\r\n  if (!Array.isArray(array) || array.length <= 1) {\r\n    return;\r\n  }\r\n\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]}