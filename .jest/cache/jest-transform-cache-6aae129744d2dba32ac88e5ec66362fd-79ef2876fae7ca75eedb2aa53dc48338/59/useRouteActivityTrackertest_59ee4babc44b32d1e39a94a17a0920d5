60f79d0031f47284646c0c4bb7a70626
_getJestObj().mock('expo-router', function () {
  return {
    useSegments: jest.fn(),
    usePathname: jest.fn()
  };
});
_getJestObj().mock('../../src/hooks/useActivityMetrics', function () {
  return {
    __esModule: true,
    default: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactNative = require("@testing-library/react-native");
var _useRouteActivityTracker = _interopRequireDefault(require("../../src/hooks/useRouteActivityTracker"));
function _getJestObj() {
  var _require7 = require("@jest/globals"),
    jest = _require7.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useRouteActivityTracker', function () {
  var mockStartSession = jest.fn();
  var mockEndSession = jest.fn();
  var mockUpdateStreak = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
    var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
    useActivityMetrics.mockReturnValue({
      startSession: mockStartSession,
      endSession: mockEndSession,
      updateStreak: mockUpdateStreak
    });
  });
  it('devrait démarrer une session pour un exercice', function () {
    var _require = require('expo-router'),
      useSegments = _require.useSegments,
      usePathname = _require.usePathname;
    useSegments.mockReturnValue(['level', 'VocabularyExercise']);
    usePathname.mockReturnValue('/level/VocabularyExercise');
    (0, _reactNative.renderHook)(function () {
      return (0, _useRouteActivityTracker.default)();
    });
    expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');
  });
  it('devrait démarrer une session pour un assessment', function () {
    var _require2 = require('expo-router'),
      useSegments = _require2.useSegments,
      usePathname = _require2.usePathname;
    useSegments.mockReturnValue(['level', 'Assessment']);
    usePathname.mockReturnValue('/level/Assessment');
    (0, _reactNative.renderHook)(function () {
      return (0, _useRouteActivityTracker.default)();
    });
    expect(mockStartSession).toHaveBeenCalledWith('Assessment');
  });
  it('ne devrait pas démarrer de session pour une page normale', function () {
    var _require3 = require('expo-router'),
      useSegments = _require3.useSegments,
      usePathname = _require3.usePathname;
    useSegments.mockReturnValue(['home', 'dashboard']);
    usePathname.mockReturnValue('/home/dashboard');
    (0, _reactNative.renderHook)(function () {
      return (0, _useRouteActivityTracker.default)();
    });
    expect(mockStartSession).not.toHaveBeenCalled();
  });
  it('devrait terminer la session en changeant de route', function () {
    var _require4 = require('expo-router'),
      useSegments = _require4.useSegments,
      usePathname = _require4.usePathname;
    useSegments.mockReturnValue(['level', 'VocabularyExercise']);
    usePathname.mockReturnValue('/level/VocabularyExercise');
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      }),
      rerender = _renderHook.rerender;
    expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');
    useSegments.mockReturnValue(['home', 'dashboard']);
    usePathname.mockReturnValue('/home/dashboard');
    rerender();
    expect(mockEndSession).toHaveBeenCalled();
    expect(mockUpdateStreak).toHaveBeenCalled();
  });
  it('devrait gérer les erreurs gracieusement', function () {
    var _require5 = require('expo-router'),
      useSegments = _require5.useSegments,
      usePathname = _require5.usePathname;
    useSegments.mockReturnValue(['level', 'VocabularyExercise']);
    usePathname.mockReturnValue('/level/VocabularyExercise');
    mockStartSession.mockImplementation(function () {
      throw new Error('Start session error');
    });
    expect(function () {
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
    }).not.toThrow();
  });
  it('devrait détecter différents types d\'exercices', function () {
    var exerciseTypes = ['VocabularyExercise', 'GrammarExercise', 'ReadingExercise'];
    exerciseTypes.forEach(function (exerciseType) {
      var _require6 = require('expo-router'),
        useSegments = _require6.useSegments,
        usePathname = _require6.usePathname;
      useSegments.mockReturnValue(['level', exerciseType]);
      usePathname.mockReturnValue(`/level/${exerciseType}`);
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith(exerciseType);
      jest.clearAllMocks();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,