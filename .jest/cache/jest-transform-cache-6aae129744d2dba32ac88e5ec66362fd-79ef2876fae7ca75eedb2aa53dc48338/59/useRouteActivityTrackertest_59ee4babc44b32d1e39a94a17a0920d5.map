{"version":3,"names":["_getJestObj","mock","useSegments","jest","fn","usePathname","__esModule","default","_interopRequireDefault","require","_reactNative","_useRouteActivityTracker","_require7","describe","mockStartSession","mockEndSession","mockUpdateStreak","beforeEach","clearAllMocks","useActivityMetrics","mockReturnValue","startSession","endSession","updateStreak","it","_require","renderHook","useRouteActivityTracker","expect","toHaveBeenCalledWith","_require2","_require3","not","toHaveBeenCalled","_require4","_renderHook","rerender","_require5","mockImplementation","Error","toThrow","exerciseTypes","forEach","exerciseType","_require6"],"sources":["useRouteActivityTracker.test.js"],"sourcesContent":["// __tests__/hooks/useRouteActivityTracker.test.js\nimport { renderHook } from '@testing-library/react-native';\nimport useRouteActivityTracker from '../../src/hooks/useRouteActivityTracker';\n\njest.mock('expo-router', () => ({\n  useSegments: jest.fn(),\n  usePathname: jest.fn(),\n}));\n\njest.mock('../../src/hooks/useActivityMetrics', () => ({\n  __esModule: true,\n  default: jest.fn(),\n}));\n\ndescribe('useRouteActivityTracker', () => {\n  const mockStartSession = jest.fn();\n  const mockEndSession = jest.fn();\n  const mockUpdateStreak = jest.fn();\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    const useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;\n    useActivityMetrics.mockReturnValue({\n      startSession: mockStartSession,\n      endSession: mockEndSession,\n      updateStreak: mockUpdateStreak,\n    });\n  });\n\n  it('devrait démarrer une session pour un exercice', () => {\n    const { useSegments, usePathname } = require('expo-router');\n    useSegments.mockReturnValue(['level', 'VocabularyExercise']);\n    usePathname.mockReturnValue('/level/VocabularyExercise');\n\n    renderHook(() => useRouteActivityTracker());\n\n    expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');\n  });\n\n  it('devrait démarrer une session pour un assessment', () => {\n    const { useSegments, usePathname } = require('expo-router');\n    useSegments.mockReturnValue(['level', 'Assessment']);\n    usePathname.mockReturnValue('/level/Assessment');\n\n    renderHook(() => useRouteActivityTracker());\n\n    expect(mockStartSession).toHaveBeenCalledWith('Assessment');\n  });\n\n  it('ne devrait pas démarrer de session pour une page normale', () => {\n    const { useSegments, usePathname } = require('expo-router');\n    useSegments.mockReturnValue(['home', 'dashboard']);\n    usePathname.mockReturnValue('/home/dashboard');\n\n    renderHook(() => useRouteActivityTracker());\n\n    expect(mockStartSession).not.toHaveBeenCalled();\n  });\n\n  it('devrait terminer la session en changeant de route', () => {\n    const { useSegments, usePathname } = require('expo-router');\n    \n    useSegments.mockReturnValue(['level', 'VocabularyExercise']);\n    usePathname.mockReturnValue('/level/VocabularyExercise');\n\n    const { rerender } = renderHook(() => useRouteActivityTracker());\n\n    expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');\n\n    useSegments.mockReturnValue(['home', 'dashboard']);\n    usePathname.mockReturnValue('/home/dashboard');\n\n    rerender();\n\n    expect(mockEndSession).toHaveBeenCalled();\n    expect(mockUpdateStreak).toHaveBeenCalled();\n  });\n\n  it('devrait gérer les erreurs gracieusement', () => {\n    const { useSegments, usePathname } = require('expo-router');\n    useSegments.mockReturnValue(['level', 'VocabularyExercise']);\n    usePathname.mockReturnValue('/level/VocabularyExercise');\n\n    mockStartSession.mockImplementation(() => {\n      throw new Error('Start session error');\n    });\n\n    expect(() => {\n      renderHook(() => useRouteActivityTracker());\n    }).not.toThrow();\n  });\n\n  it('devrait détecter différents types d\\'exercices', () => {\n    const exerciseTypes = [\n      'VocabularyExercise',\n      'GrammarExercise',\n      'ReadingExercise'\n    ];\n\n    exerciseTypes.forEach(exerciseType => {\n      const { useSegments, usePathname } = require('expo-router');\n      useSegments.mockReturnValue(['level', exerciseType]);\n      usePathname.mockReturnValue(`/level/${exerciseType}`);\n\n      renderHook(() => useRouteActivityTracker());\n\n      expect(mockStartSession).toHaveBeenCalledWith(exerciseType);\n      \n      jest.clearAllMocks();\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}