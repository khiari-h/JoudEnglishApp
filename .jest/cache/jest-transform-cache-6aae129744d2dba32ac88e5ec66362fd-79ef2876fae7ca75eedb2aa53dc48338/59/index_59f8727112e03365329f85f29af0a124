c513684f7b75692680fa24bcae05dc08
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _HeroCard = _interopRequireDefault(require("../../../../components/ui/HeroCard"));
var _RevealButton = _interopRequireDefault(require("../../../../components/ui/RevealButton"));
var _SpellingInput = _interopRequireDefault(require("../SpellingInput"));
var _HomophoneChoices = _interopRequireDefault(require("../HomophoneChoices"));
var _SpellingFeedback = _interopRequireDefault(require("../SpellingFeedback"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var SpellingCard = function SpellingCard(_ref) {
  var exercise = _ref.exercise,
    userInput = _ref.userInput,
    showHint = _ref.showHint,
    showFeedback = _ref.showFeedback,
    isCorrect = _ref.isCorrect,
    isCompleted = _ref.isCompleted,
    onChangeText = _ref.onChangeText,
    onToggleHint = _ref.onToggleHint,
    levelColor = _ref.levelColor;
  if (!exercise) {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.card,
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _style.default.errorContainer,
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: _style.default.errorText,
          children: "Exercice non trouv\xE9"
        })
      })
    });
  }
  var renderExerciseContent = function renderExerciseContent() {
    switch (exercise.type) {
      case "correction":
        return (0, _jsxRuntime.jsx)(_HeroCard.default, {
          content: exercise.wordToCorrect,
          fontSize: 32,
          levelColor: levelColor,
          showUnderline: true
        });
      case "spelling_rule":
        return (0, _jsxRuntime.jsx)(_HeroCard.default, {
          content: exercise.rule,
          fontSize: 18,
          levelColor: levelColor,
          showUnderline: false
        });
      case "homophones":
        return (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: _style.default.homophoneHeader,
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: _style.default.instruction,
            children: exercise.instruction
          })
        });
      default:
        return (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: _style.default.fallbackContainer,
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: _style.default.instruction,
            children: exercise.instruction || "Instructions non disponibles"
          })
        });
    }
  };
  var renderInputArea = function renderInputArea() {
    if (exercise.type === "homophones") {
      return (0, _jsxRuntime.jsx)(_HomophoneChoices.default, {
        sentence: exercise.sentence,
        choices: exercise.choices || [],
        selectedChoice: userInput,
        onSelectChoice: onChangeText,
        disabled: showFeedback,
        levelColor: levelColor
      });
    } else {
      return (0, _jsxRuntime.jsx)(_SpellingInput.default, {
        value: userInput,
        onChangeText: onChangeText,
        disabled: showFeedback,
        levelColor: levelColor
      });
    }
  };
  return (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
    style: _style.default.scrollView,
    showsVerticalScrollIndicator: false,
    children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [_style.default.card, isCompleted && _style.default.completedCard],
      children: [isCompleted && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _style.default.completedBadge,
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: _style.default.completedText,
          children: "\u2713 Compl\xE9t\xE9"
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _style.default.exerciseContent,
        children: renderExerciseContent()
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _style.default.inputSection,
        children: renderInputArea()
      }), exercise.hint && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _style.default.hintSection,
        children: (0, _jsxRuntime.jsx)(_RevealButton.default, {
          isRevealed: showHint,
          revealedContent: exercise.hint,
          revealText: "Afficher l'indice",
          hideText: "Masquer l'indice",
          onToggle: onToggleHint,
          levelColor: levelColor
        })
      }), showFeedback && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _style.default.feedbackSection,
        children: (0, _jsxRuntime.jsx)(_SpellingFeedback.default, {
          isCorrect: isCorrect,
          correctAnswer: exercise.correctAnswer,
          explanation: exercise.explanation,
          levelColor: levelColor
        })
      })]
    })
  });
};
var _default = exports.default = SpellingCard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,