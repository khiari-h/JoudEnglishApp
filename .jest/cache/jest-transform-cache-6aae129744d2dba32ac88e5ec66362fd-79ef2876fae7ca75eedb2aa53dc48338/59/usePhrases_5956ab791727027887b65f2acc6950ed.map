{"version":3,"names":["_react","require","_reactNative","_asyncStorage","_interopRequireDefault","usePhrases","phrasesData","level","handleStorageError","error","operation","fallback","arguments","length","undefined","console","warn","STORAGE_KEY","_useState","useState","_useState2","_slicedToArray2","default","categoryIndex","setCategoryIndex","_useState3","_useState4","phraseIndex","setPhraseIndex","_useState5","_useState6","showTranslation","setShowTranslation","_useState7","_useState8","completedPhrases","setCompletedPhrases","_useState9","_useState0","loaded","setLoaded","_useState1","_useState10","showDetailedProgress","setShowDetailedProgress","isInitialized","useRef","categories","currentCategory","currentPhrases","phrases","currentPhrase","totalPhrasesInCategory","hasValidData","useEffect","loadData","_ref","_asyncToGenerator2","savedData","AsyncStorage","getItem","_JSON$parse","JSON","parse","savedCompleted","lastPosition","apply","saveData","useCallback","dataToSave","setItem","stringify","current","newCompletedPhrases","Object","assign","forEach","_","index","changeCategory","newCategoryIndex","goToNextPhrase","prev","goToPreviousPhrase","toggleTranslation","toggleDetailedProgress","markPhraseAsCompleted","catIndex","pIndex","categoryCompleted","includes","_defineProperty2","concat","_toConsumableArray2","findNextUncompletedCategory","numCategories","_loop","_completedPhrases$nex","nextIndex","i","category","categoryPhrases","filter","p","categoryId","id","completedInCategory","v","_ret","handleNext","nextCategoryIndex","Alert","alert","completed","handlePrevious","getStats","_completedPhrases$cat","totalPhrases","completedPhrasesCount","values","reduce","sum","totalProgress","Math","round","completionProgress","completedInCurrentCategory","totalInCurrentCategory","getDisplayData","phraseCounter","categoriesNames","map","cat","name","canGoToPrevious","isLastPhraseInCategory","totalCategories","stats","display","_default","exports"],"sources":["usePhrases.js"],"sourcesContent":["// src/screens/exercises/phrases/hooks/usePhrases.js - VERSION CORRIGÃ‰E\n\nimport { useState, useEffect, useRef, useCallback } from 'react';\nimport { Alert } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n/**\n * ðŸŽ¯ Hook unifiÃ© pour Phrases Exercise\n * Remplace usePhrasesExerciseState + usePhrasesProgress + usePhrasesDisplay\n * Simple, efficace, maintenable - pattern identique Ã  useReading, useGrammar et useVocabulary\n */\nconst usePhrases = (phrasesData, level) => {\n  // =================== ERROR HANDLING HELPER ===================\n  const handleStorageError = (error, operation, fallback = null) => {\n    console.warn(`Phrases storage error in ${operation}:`, error);\n    return fallback;\n  };\n\n  // =================== STORAGE KEY ===================\n  const STORAGE_KEY = `phrases_${level}`;\n\n  // =================== STATE ===================\n  const [categoryIndex, setCategoryIndex] = useState(0);\n  const [phraseIndex, setPhraseIndex] = useState(0);\n  const [showTranslation, setShowTranslation] = useState(false);\n  const [completedPhrases, setCompletedPhrases] = useState({});\n  const [loaded, setLoaded] = useState(false);\n  const [showDetailedProgress, setShowDetailedProgress] = useState(false);\n\n  const isInitialized = useRef(false);\n\n  // =================== COMPUTED VALUES ===================\n  const categories = phrasesData?.categories || [];\n  const currentCategory = categories[categoryIndex];\n  const currentPhrases = currentCategory?.phrases || [];\n  const currentPhrase = currentPhrases[phraseIndex];\n  const totalPhrasesInCategory = currentPhrases.length;\n  const hasValidData = phrasesData && categories.length > 0 && currentPhrases.length > 0;\n\n  // =================== DATA LOADING ===================\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const savedData = await AsyncStorage.getItem(STORAGE_KEY);\n        if (savedData) {\n          const { completedPhrases: savedCompleted, lastPosition } = JSON.parse(savedData);\n          setCompletedPhrases(savedCompleted || {});\n          if (lastPosition) {\n            setCategoryIndex(lastPosition.categoryIndex || 0);\n            setPhraseIndex(lastPosition.phraseIndex || 0);\n          }\n        }\n      } catch (error) {\n        // âœ… Gestion d'erreur appropriÃ©e\n        handleStorageError(error, 'loadData');\n        // Fallback: utiliser les valeurs par dÃ©faut\n      } finally {\n        setLoaded(true);\n      }\n    };\n    loadData();\n  }, [level]);\n\n  // Save data to storage\n  const saveData = useCallback(async () => {\n    try {\n      const dataToSave = {\n        completedPhrases,\n        lastPosition: {\n          categoryIndex,\n          phraseIndex\n        }\n      };\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(dataToSave));\n    } catch (error) {\n      // âœ… Gestion d'erreur appropriÃ©e\n      handleStorageError(error, 'saveData');\n      // Fallback: continuer sans sauvegarde\n    }\n  }, [completedPhrases, categoryIndex, phraseIndex, STORAGE_KEY]);\n\n  // Auto-save when data changes\n  useEffect(() => {\n    if (loaded) saveData();\n  }, [saveData, loaded]);\n\n  // Initialize progress for new categories\n  useEffect(() => {\n    if (loaded && phrasesData && !isInitialized.current) {\n      const newCompletedPhrases = { ...completedPhrases };\n      categories.forEach((_, index) => {\n        if (!newCompletedPhrases[index]) {\n          newCompletedPhrases[index] = [];\n        }\n      });\n      setCompletedPhrases(newCompletedPhrases);\n      isInitialized.current = true;\n    }\n  }, [loaded, phrasesData, categories, completedPhrases]);\n\n  // =================== NAVIGATION ACTIONS ===================\n  const changeCategory = useCallback((newCategoryIndex) => {\n    if (newCategoryIndex !== categoryIndex && newCategoryIndex >= 0 && newCategoryIndex < categories.length) {\n      setCategoryIndex(newCategoryIndex);\n      setPhraseIndex(0);\n      setShowTranslation(false);\n    }\n  }, [categoryIndex, categories.length]);\n\n  const goToNextPhrase = useCallback(() => {\n    if (phraseIndex < totalPhrasesInCategory - 1) {\n      setPhraseIndex(prev => prev + 1);\n      setShowTranslation(false);\n    }\n  }, [phraseIndex, totalPhrasesInCategory]);\n\n  const goToPreviousPhrase = useCallback(() => {\n    if (phraseIndex > 0) {\n      setPhraseIndex(prev => prev - 1);\n      setShowTranslation(false);\n      return true;\n    }\n    return false;\n  }, [phraseIndex]);\n\n  const toggleTranslation = useCallback(() => {\n    setShowTranslation(prev => !prev);\n  }, []);\n\n  const toggleDetailedProgress = useCallback(() => {\n    setShowDetailedProgress(prev => !prev);\n  }, []);\n\n  // =================== COMPLETION LOGIC ===================\n  const markPhraseAsCompleted = useCallback((catIndex, pIndex) => {\n    setCompletedPhrases(prev => {\n      const categoryCompleted = prev[catIndex] || [];\n      if (!categoryCompleted.includes(pIndex)) {\n        return {\n          ...prev,\n          [catIndex]: [...categoryCompleted, pIndex]\n        };\n      }\n      return prev;\n    });\n  }, []);\n\n  // Find next uncompleted category\n  const findNextUncompletedCategory = useCallback(() => {\n    const numCategories = categories.length;\n    for (let i = 1; i <= numCategories; i++) {\n      const nextIndex = (categoryIndex + i) % numCategories;\n      const category = categories[nextIndex];\n      const categoryPhrases = currentPhrases.filter(p => p.categoryId === category.id);\n      const completedInCategory = completedPhrases[nextIndex]?.length || 0;\n      \n      if (completedInCategory < categoryPhrases.length) {\n        return nextIndex;\n      }\n    }\n    return -1;\n  }, [categories, categoryIndex, currentPhrases, completedPhrases]);\n\n  // =================== MAIN NAVIGATION ===================\n  const handleNext = useCallback(() => {\n    // Mark current phrase as completed\n    markPhraseAsCompleted(categoryIndex, phraseIndex);\n\n    // Check if there are more phrases in current category\n    if (phraseIndex < totalPhrasesInCategory - 1) {\n      goToNextPhrase();\n    } else {\n      // End of category - find next uncompleted category\n      const nextCategoryIndex = findNextUncompletedCategory();\n      if (nextCategoryIndex === -1) {\n        // All done!\n        Alert.alert(\n          \"FÃ©licitations\",\n          \"Vous avez terminÃ© tous les exercices de phrases !\"\n        );\n        return { completed: true };\n      } else {\n        changeCategory(nextCategoryIndex);\n      }\n    }\n    return { completed: false };\n  }, [categoryIndex, phraseIndex, totalPhrasesInCategory, markPhraseAsCompleted, goToNextPhrase, findNextUncompletedCategory, changeCategory]);\n\n  const handlePrevious = useCallback(() => {\n    goToPreviousPhrase();\n  }, [goToPreviousPhrase]);\n\n  // =================== COMPUTED STATS ===================\n  const getStats = useCallback(() => {\n    const totalPhrases = currentPhrases.length;\n    const completedPhrasesCount = Object.values(completedPhrases).reduce((sum, completed) => sum + (completed?.length || 0), 0);\n    const totalProgress = totalPhrases > 0 ? Math.round((completedPhrasesCount / totalPhrases) * 100) : 0;\n    const completionProgress = totalPhrasesInCategory > 0 ? ((phraseIndex + 1) / totalPhrasesInCategory) * 100 : 0;\n\n    return {\n      totalPhrases,\n      completedPhrasesCount,\n      totalProgress,\n      completionProgress,\n      completedInCurrentCategory: completedPhrases[categoryIndex]?.length || 0,\n      totalInCurrentCategory: totalPhrasesInCategory\n    };\n  }, [currentPhrases, completedPhrases, totalPhrasesInCategory, phraseIndex, categoryIndex]);\n\n  // =================== COMPUTED DISPLAY ===================\n  const getDisplayData = useCallback(() => {\n    const phraseCounter = `${phraseIndex + 1} / ${totalPhrasesInCategory || 0}`;\n    const categoriesNames = categories.map(cat => cat.name);\n    \n    return {\n      phraseCounter,\n      categories: categoriesNames,\n      currentPhrase,\n      currentCategory,\n      currentPhrases\n    };\n  }, [phraseIndex, totalPhrasesInCategory, categories, currentPhrase, currentCategory, currentPhrases]);\n\n  // =================== VALIDATION ===================\n  const canGoToPrevious = phraseIndex > 0;\n  const isLastPhraseInCategory = phraseIndex === totalPhrasesInCategory - 1;\n\n  return {\n    // State\n    categoryIndex,\n    phraseIndex,\n    showTranslation,\n    completedPhrases,\n    loaded,\n    showDetailedProgress,\n    \n    // Data\n    currentPhrase,\n    currentCategory,\n    currentPhrases,\n    totalCategories: categories.length,\n    totalPhrasesInCategory,\n    hasValidData,\n    \n    // Actions\n    changeCategory,\n    toggleTranslation,\n    toggleDetailedProgress,\n    handleNext,\n    handlePrevious,\n    \n    // Computed\n    canGoToPrevious,\n    isLastPhraseInCategory,\n    stats: getStats(),\n    display: getDisplayData(),\n  };\n};\n\nexport default usePhrases;"],"mappings":";;;;;;;;;AAEA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AACA,IAAAE,aAAA,GAAAC,sBAAA,CAAAH,OAAA;AAOA,IAAMI,UAAU,GAAG,SAAbA,UAAUA,CAAIC,WAAW,EAAEC,KAAK,EAAK;EAEzC,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAIC,KAAK,EAAEC,SAAS,EAAsB;IAAA,IAApBC,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IAC3DG,OAAO,CAACC,IAAI,CAAC,4BAA4BN,SAAS,GAAG,EAAED,KAAK,CAAC;IAC7D,OAAOE,QAAQ;EACjB,CAAC;EAGD,IAAMM,WAAW,GAAG,WAAWV,KAAK,EAAE;EAGtC,IAAAW,SAAA,GAA0C,IAAAC,eAAQ,EAAC,CAAC,CAAC;IAAAC,UAAA,OAAAC,eAAA,CAAAC,OAAA,EAAAJ,SAAA;IAA9CK,aAAa,GAAAH,UAAA;IAAEI,gBAAgB,GAAAJ,UAAA;EACtC,IAAAK,UAAA,GAAsC,IAAAN,eAAQ,EAAC,CAAC,CAAC;IAAAO,UAAA,OAAAL,eAAA,CAAAC,OAAA,EAAAG,UAAA;IAA1CE,WAAW,GAAAD,UAAA;IAAEE,cAAc,GAAAF,UAAA;EAClC,IAAAG,UAAA,GAA8C,IAAAV,eAAQ,EAAC,KAAK,CAAC;IAAAW,UAAA,OAAAT,eAAA,CAAAC,OAAA,EAAAO,UAAA;IAAtDE,eAAe,GAAAD,UAAA;IAAEE,kBAAkB,GAAAF,UAAA;EAC1C,IAAAG,UAAA,GAAgD,IAAAd,eAAQ,EAAC,CAAC,CAAC,CAAC;IAAAe,UAAA,OAAAb,eAAA,CAAAC,OAAA,EAAAW,UAAA;IAArDE,gBAAgB,GAAAD,UAAA;IAAEE,mBAAmB,GAAAF,UAAA;EAC5C,IAAAG,UAAA,GAA4B,IAAAlB,eAAQ,EAAC,KAAK,CAAC;IAAAmB,UAAA,OAAAjB,eAAA,CAAAC,OAAA,EAAAe,UAAA;IAApCE,MAAM,GAAAD,UAAA;IAAEE,SAAS,GAAAF,UAAA;EACxB,IAAAG,UAAA,GAAwD,IAAAtB,eAAQ,EAAC,KAAK,CAAC;IAAAuB,WAAA,OAAArB,eAAA,CAAAC,OAAA,EAAAmB,UAAA;IAAhEE,oBAAoB,GAAAD,WAAA;IAAEE,uBAAuB,GAAAF,WAAA;EAEpD,IAAMG,aAAa,GAAG,IAAAC,aAAM,EAAC,KAAK,CAAC;EAGnC,IAAMC,UAAU,GAAG,CAAAzC,WAAW,oBAAXA,WAAW,CAAEyC,UAAU,KAAI,EAAE;EAChD,IAAMC,eAAe,GAAGD,UAAU,CAACxB,aAAa,CAAC;EACjD,IAAM0B,cAAc,GAAG,CAAAD,eAAe,oBAAfA,eAAe,CAAEE,OAAO,KAAI,EAAE;EACrD,IAAMC,aAAa,GAAGF,cAAc,CAACtB,WAAW,CAAC;EACjD,IAAMyB,sBAAsB,GAAGH,cAAc,CAACpC,MAAM;EACpD,IAAMwC,YAAY,GAAG/C,WAAW,IAAIyC,UAAU,CAAClC,MAAM,GAAG,CAAC,IAAIoC,cAAc,CAACpC,MAAM,GAAG,CAAC;EAGtF,IAAAyC,gBAAS,EAAC,YAAM;IACd,IAAMC,QAAQ;MAAA,IAAAC,IAAA,OAAAC,kBAAA,CAAAnC,OAAA,EAAG,aAAY;QAC3B,IAAI;UACF,IAAMoC,SAAS,SAASC,qBAAY,CAACC,OAAO,CAAC3C,WAAW,CAAC;UACzD,IAAIyC,SAAS,EAAE;YACb,IAAAG,WAAA,GAA2DC,IAAI,CAACC,KAAK,CAACL,SAAS,CAAC;cAAtDM,cAAc,GAAAH,WAAA,CAAhC1B,gBAAgB;cAAkB8B,YAAY,GAAAJ,WAAA,CAAZI,YAAY;YACtD7B,mBAAmB,CAAC4B,cAAc,IAAI,CAAC,CAAC,CAAC;YACzC,IAAIC,YAAY,EAAE;cAChBzC,gBAAgB,CAACyC,YAAY,CAAC1C,aAAa,IAAI,CAAC,CAAC;cACjDK,cAAc,CAACqC,YAAY,CAACtC,WAAW,IAAI,CAAC,CAAC;YAC/C;UACF;QACF,CAAC,CAAC,OAAOlB,KAAK,EAAE;UAEdD,kBAAkB,CAACC,KAAK,EAAE,UAAU,CAAC;QAEvC,CAAC,SAAS;UACR+B,SAAS,CAAC,IAAI,CAAC;QACjB;MACF,CAAC;MAAA,gBAlBKe,QAAQA,CAAA;QAAA,OAAAC,IAAA,CAAAU,KAAA,OAAAtD,SAAA;MAAA;IAAA,GAkBb;IACD2C,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,CAAChD,KAAK,CAAC,CAAC;EAGX,IAAM4D,QAAQ,GAAG,IAAAC,kBAAW,MAAAX,kBAAA,CAAAnC,OAAA,EAAC,aAAY;IACvC,IAAI;MACF,IAAM+C,UAAU,GAAG;QACjBlC,gBAAgB,EAAhBA,gBAAgB;QAChB8B,YAAY,EAAE;UACZ1C,aAAa,EAAbA,aAAa;UACbI,WAAW,EAAXA;QACF;MACF,CAAC;MACD,MAAMgC,qBAAY,CAACW,OAAO,CAACrD,WAAW,EAAE6C,IAAI,CAACS,SAAS,CAACF,UAAU,CAAC,CAAC;IACrE,CAAC,CAAC,OAAO5D,KAAK,EAAE;MAEdD,kBAAkB,CAACC,KAAK,EAAE,UAAU,CAAC;IAEvC;EACF,CAAC,GAAE,CAAC0B,gBAAgB,EAAEZ,aAAa,EAAEI,WAAW,EAAEV,WAAW,CAAC,CAAC;EAG/D,IAAAqC,gBAAS,EAAC,YAAM;IACd,IAAIf,MAAM,EAAE4B,QAAQ,CAAC,CAAC;EACxB,CAAC,EAAE,CAACA,QAAQ,EAAE5B,MAAM,CAAC,CAAC;EAGtB,IAAAe,gBAAS,EAAC,YAAM;IACd,IAAIf,MAAM,IAAIjC,WAAW,IAAI,CAACuC,aAAa,CAAC2B,OAAO,EAAE;MACnD,IAAMC,mBAAmB,GAAAC,MAAA,CAAAC,MAAA,KAAQxC,gBAAgB,CAAE;MACnDY,UAAU,CAAC6B,OAAO,CAAC,UAACC,CAAC,EAAEC,KAAK,EAAK;QAC/B,IAAI,CAACL,mBAAmB,CAACK,KAAK,CAAC,EAAE;UAC/BL,mBAAmB,CAACK,KAAK,CAAC,GAAG,EAAE;QACjC;MACF,CAAC,CAAC;MACF1C,mBAAmB,CAACqC,mBAAmB,CAAC;MACxC5B,aAAa,CAAC2B,OAAO,GAAG,IAAI;IAC9B;EACF,CAAC,EAAE,CAACjC,MAAM,EAAEjC,WAAW,EAAEyC,UAAU,EAAEZ,gBAAgB,CAAC,CAAC;EAGvD,IAAM4C,cAAc,GAAG,IAAAX,kBAAW,EAAC,UAACY,gBAAgB,EAAK;IACvD,IAAIA,gBAAgB,KAAKzD,aAAa,IAAIyD,gBAAgB,IAAI,CAAC,IAAIA,gBAAgB,GAAGjC,UAAU,CAAClC,MAAM,EAAE;MACvGW,gBAAgB,CAACwD,gBAAgB,CAAC;MAClCpD,cAAc,CAAC,CAAC,CAAC;MACjBI,kBAAkB,CAAC,KAAK,CAAC;IAC3B;EACF,CAAC,EAAE,CAACT,aAAa,EAAEwB,UAAU,CAAClC,MAAM,CAAC,CAAC;EAEtC,IAAMoE,cAAc,GAAG,IAAAb,kBAAW,EAAC,YAAM;IACvC,IAAIzC,WAAW,GAAGyB,sBAAsB,GAAG,CAAC,EAAE;MAC5CxB,cAAc,CAAC,UAAAsD,IAAI;QAAA,OAAIA,IAAI,GAAG,CAAC;MAAA,EAAC;MAChClD,kBAAkB,CAAC,KAAK,CAAC;IAC3B;EACF,CAAC,EAAE,CAACL,WAAW,EAAEyB,sBAAsB,CAAC,CAAC;EAEzC,IAAM+B,kBAAkB,GAAG,IAAAf,kBAAW,EAAC,YAAM;IAC3C,IAAIzC,WAAW,GAAG,CAAC,EAAE;MACnBC,cAAc,CAAC,UAAAsD,IAAI;QAAA,OAAIA,IAAI,GAAG,CAAC;MAAA,EAAC;MAChClD,kBAAkB,CAAC,KAAK,CAAC;MACzB,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd,CAAC,EAAE,CAACL,WAAW,CAAC,CAAC;EAEjB,IAAMyD,iBAAiB,GAAG,IAAAhB,kBAAW,EAAC,YAAM;IAC1CpC,kBAAkB,CAAC,UAAAkD,IAAI;MAAA,OAAI,CAACA,IAAI;IAAA,EAAC;EACnC,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMG,sBAAsB,GAAG,IAAAjB,kBAAW,EAAC,YAAM;IAC/CxB,uBAAuB,CAAC,UAAAsC,IAAI;MAAA,OAAI,CAACA,IAAI;IAAA,EAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAGN,IAAMI,qBAAqB,GAAG,IAAAlB,kBAAW,EAAC,UAACmB,QAAQ,EAAEC,MAAM,EAAK;IAC9DpD,mBAAmB,CAAC,UAAA8C,IAAI,EAAI;MAC1B,IAAMO,iBAAiB,GAAGP,IAAI,CAACK,QAAQ,CAAC,IAAI,EAAE;MAC9C,IAAI,CAACE,iBAAiB,CAACC,QAAQ,CAACF,MAAM,CAAC,EAAE;QACvC,OAAAd,MAAA,CAAAC,MAAA,KACKO,IAAI,MAAAS,gBAAA,CAAArE,OAAA,MACNiE,QAAQ,KAAAK,MAAA,KAAAC,mBAAA,CAAAvE,OAAA,EAAOmE,iBAAiB,IAAED,MAAM;MAE7C;MACA,OAAON,IAAI;IACb,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAGN,IAAMY,2BAA2B,GAAG,IAAA1B,kBAAW,EAAC,YAAM;IACpD,IAAM2B,aAAa,GAAGhD,UAAU,CAAClC,MAAM;IAAC,IAAAmF,KAAA,YAAAA,MAAA,EACC;QAAA,IAAAC,qBAAA;QACvC,IAAMC,SAAS,GAAG,CAAC3E,aAAa,GAAG4E,CAAC,IAAIJ,aAAa;QACrD,IAAMK,QAAQ,GAAGrD,UAAU,CAACmD,SAAS,CAAC;QACtC,IAAMG,eAAe,GAAGpD,cAAc,CAACqD,MAAM,CAAC,UAAAC,CAAC;UAAA,OAAIA,CAAC,CAACC,UAAU,KAAKJ,QAAQ,CAACK,EAAE;QAAA,EAAC;QAChF,IAAMC,mBAAmB,GAAG,EAAAT,qBAAA,GAAA9D,gBAAgB,CAAC+D,SAAS,CAAC,qBAA3BD,qBAAA,CAA6BpF,MAAM,KAAI,CAAC;QAEpE,IAAI6F,mBAAmB,GAAGL,eAAe,CAACxF,MAAM,EAAE;UAAA;YAAA8F,CAAA,EACzCT;UAAS;QAClB;MACF,CAAC;MAAAU,IAAA;IATD,KAAK,IAAIT,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIJ,aAAa,EAAEI,CAAC,EAAE;MAAAS,IAAA,GAAAZ,KAAA;MAAA,IAAAY,IAAA,SAAAA,IAAA,CAAAD,CAAA;IAAA;IAUvC,OAAO,CAAC,CAAC;EACX,CAAC,EAAE,CAAC5D,UAAU,EAAExB,aAAa,EAAE0B,cAAc,EAAEd,gBAAgB,CAAC,CAAC;EAGjE,IAAM0E,UAAU,GAAG,IAAAzC,kBAAW,EAAC,YAAM;IAEnCkB,qBAAqB,CAAC/D,aAAa,EAAEI,WAAW,CAAC;IAGjD,IAAIA,WAAW,GAAGyB,sBAAsB,GAAG,CAAC,EAAE;MAC5C6B,cAAc,CAAC,CAAC;IAClB,CAAC,MAAM;MAEL,IAAM6B,iBAAiB,GAAGhB,2BAA2B,CAAC,CAAC;MACvD,IAAIgB,iBAAiB,KAAK,CAAC,CAAC,EAAE;QAE5BC,kBAAK,CAACC,KAAK,CACT,eAAe,EACf,mDACF,CAAC;QACD,OAAO;UAAEC,SAAS,EAAE;QAAK,CAAC;MAC5B,CAAC,MAAM;QACLlC,cAAc,CAAC+B,iBAAiB,CAAC;MACnC;IACF;IACA,OAAO;MAAEG,SAAS,EAAE;IAAM,CAAC;EAC7B,CAAC,EAAE,CAAC1F,aAAa,EAAEI,WAAW,EAAEyB,sBAAsB,EAAEkC,qBAAqB,EAAEL,cAAc,EAAEa,2BAA2B,EAAEf,cAAc,CAAC,CAAC;EAE5I,IAAMmC,cAAc,GAAG,IAAA9C,kBAAW,EAAC,YAAM;IACvCe,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,CAACA,kBAAkB,CAAC,CAAC;EAGxB,IAAMgC,QAAQ,GAAG,IAAA/C,kBAAW,EAAC,YAAM;IAAA,IAAAgD,qBAAA;IACjC,IAAMC,YAAY,GAAGpE,cAAc,CAACpC,MAAM;IAC1C,IAAMyG,qBAAqB,GAAG5C,MAAM,CAAC6C,MAAM,CAACpF,gBAAgB,CAAC,CAACqF,MAAM,CAAC,UAACC,GAAG,EAAER,SAAS;MAAA,OAAKQ,GAAG,IAAI,CAAAR,SAAS,oBAATA,SAAS,CAAEpG,MAAM,KAAI,CAAC,CAAC;IAAA,GAAE,CAAC,CAAC;IAC3H,IAAM6G,aAAa,GAAGL,YAAY,GAAG,CAAC,GAAGM,IAAI,CAACC,KAAK,CAAEN,qBAAqB,GAAGD,YAAY,GAAI,GAAG,CAAC,GAAG,CAAC;IACrG,IAAMQ,kBAAkB,GAAGzE,sBAAsB,GAAG,CAAC,GAAI,CAACzB,WAAW,GAAG,CAAC,IAAIyB,sBAAsB,GAAI,GAAG,GAAG,CAAC;IAE9G,OAAO;MACLiE,YAAY,EAAZA,YAAY;MACZC,qBAAqB,EAArBA,qBAAqB;MACrBI,aAAa,EAAbA,aAAa;MACbG,kBAAkB,EAAlBA,kBAAkB;MAClBC,0BAA0B,EAAE,EAAAV,qBAAA,GAAAjF,gBAAgB,CAACZ,aAAa,CAAC,qBAA/B6F,qBAAA,CAAiCvG,MAAM,KAAI,CAAC;MACxEkH,sBAAsB,EAAE3E;IAC1B,CAAC;EACH,CAAC,EAAE,CAACH,cAAc,EAAEd,gBAAgB,EAAEiB,sBAAsB,EAAEzB,WAAW,EAAEJ,aAAa,CAAC,CAAC;EAG1F,IAAMyG,cAAc,GAAG,IAAA5D,kBAAW,EAAC,YAAM;IACvC,IAAM6D,aAAa,GAAG,GAAGtG,WAAW,GAAG,CAAC,MAAMyB,sBAAsB,IAAI,CAAC,EAAE;IAC3E,IAAM8E,eAAe,GAAGnF,UAAU,CAACoF,GAAG,CAAC,UAAAC,GAAG;MAAA,OAAIA,GAAG,CAACC,IAAI;IAAA,EAAC;IAEvD,OAAO;MACLJ,aAAa,EAAbA,aAAa;MACblF,UAAU,EAAEmF,eAAe;MAC3B/E,aAAa,EAAbA,aAAa;MACbH,eAAe,EAAfA,eAAe;MACfC,cAAc,EAAdA;IACF,CAAC;EACH,CAAC,EAAE,CAACtB,WAAW,EAAEyB,sBAAsB,EAAEL,UAAU,EAAEI,aAAa,EAAEH,eAAe,EAAEC,cAAc,CAAC,CAAC;EAGrG,IAAMqF,eAAe,GAAG3G,WAAW,GAAG,CAAC;EACvC,IAAM4G,sBAAsB,GAAG5G,WAAW,KAAKyB,sBAAsB,GAAG,CAAC;EAEzE,OAAO;IAEL7B,aAAa,EAAbA,aAAa;IACbI,WAAW,EAAXA,WAAW;IACXI,eAAe,EAAfA,eAAe;IACfI,gBAAgB,EAAhBA,gBAAgB;IAChBI,MAAM,EAANA,MAAM;IACNI,oBAAoB,EAApBA,oBAAoB;IAGpBQ,aAAa,EAAbA,aAAa;IACbH,eAAe,EAAfA,eAAe;IACfC,cAAc,EAAdA,cAAc;IACduF,eAAe,EAAEzF,UAAU,CAAClC,MAAM;IAClCuC,sBAAsB,EAAtBA,sBAAsB;IACtBC,YAAY,EAAZA,YAAY;IAGZ0B,cAAc,EAAdA,cAAc;IACdK,iBAAiB,EAAjBA,iBAAiB;IACjBC,sBAAsB,EAAtBA,sBAAsB;IACtBwB,UAAU,EAAVA,UAAU;IACVK,cAAc,EAAdA,cAAc;IAGdoB,eAAe,EAAfA,eAAe;IACfC,sBAAsB,EAAtBA,sBAAsB;IACtBE,KAAK,EAAEtB,QAAQ,CAAC,CAAC;IACjBuB,OAAO,EAAEV,cAAc,CAAC;EAC1B,CAAC;AACH,CAAC;AAAC,IAAAW,QAAA,GAAAC,OAAA,CAAAtH,OAAA,GAEajB,UAAU","ignoreList":[]}