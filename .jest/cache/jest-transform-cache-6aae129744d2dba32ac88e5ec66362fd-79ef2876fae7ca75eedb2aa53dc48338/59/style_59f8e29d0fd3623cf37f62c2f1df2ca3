48eeb6154c0f854dd600db8b8783e18c
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var createStyles = function createStyles() {
  return _reactNative.StyleSheet.create({
    container: {
      marginHorizontal: 16,
      marginVertical: 8
    },
    optionsSection: {
      marginTop: 16,
      gap: 12
    },
    optionContainer: Object.assign({
      borderRadius: 16,
      overflow: 'hidden'
    }, _reactNative.Platform.select({
      ios: {
        shadowColor: '#000',
        shadowOffset: {
          width: 0,
          height: 2
        },
        shadowOpacity: 0.06,
        shadowRadius: 8
      },
      android: {
        elevation: 2
      }
    })),
    optionGradient: {
      borderRadius: 16,
      overflow: 'hidden'
    },
    optionInner: {
      flexDirection: 'row',
      alignItems: 'center',
      paddingVertical: 16,
      paddingHorizontal: 20,
      backgroundColor: 'rgba(255, 255, 255, 0.8)',
      borderWidth: 1,
      borderColor: 'rgba(255, 255, 255, 0.3)'
    },
    optionIconContainer: {
      marginRight: 12
    },
    optionText: {
      fontSize: 16,
      fontWeight: '500',
      color: '#374151',
      flex: 1,
      letterSpacing: 0.2
    },
    selectedOptionText: {
      color: 'white',
      fontWeight: '600'
    },
    correctOptionText: {
      color: 'white',
      fontWeight: '600'
    },
    incorrectOptionText: {
      color: 'white',
      fontWeight: '600'
    },
    inputSection: Object.assign({
      marginTop: 16,
      borderRadius: 16,
      overflow: 'hidden'
    }, _reactNative.Platform.select({
      ios: {
        shadowColor: '#000',
        shadowOffset: {
          width: 0,
          height: 2
        },
        shadowOpacity: 0.06,
        shadowRadius: 8
      },
      android: {
        elevation: 2
      }
    })),
    fillBlankInput: {
      borderWidth: 1,
      borderRadius: 16,
      padding: 16,
      fontSize: 16,
      color: '#374151',
      backgroundColor: 'white',
      fontWeight: '500',
      textAlign: 'center',
      minHeight: 56
    },
    transformationInput: {
      borderWidth: 1,
      borderRadius: 16,
      padding: 16,
      fontSize: 16,
      color: '#374151',
      minHeight: 120,
      textAlignVertical: 'top',
      backgroundColor: 'white',
      fontWeight: '500',
      lineHeight: 24
    },
    neutralInput: {
      borderColor: '#CBD5E1',
      color: '#374151'
    },
    correctInput: {
      borderColor: '#10B981',
      backgroundColor: '#F0FDF4',
      color: '#10B981'
    },
    incorrectInput: {
      borderColor: '#EF4444',
      backgroundColor: '#FEF2F2',
      color: '#EF4444'
    }
  });
};
var _default = exports.default = createStyles;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,