00296931f4a84f13083d504038362b7d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _NavigationButtons = _interopRequireDefault(require("../../../../components/exercise-common/NavigationButtons"));
var _style = _interopRequireDefault(require("./style"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
function cov_1mt35oje5i() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\exercises\\grammar\\GrammarNavigation\\index.js";
  var hash = "ed48066341e5c00e8e5a364d81d5dde22f180c80";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\exercises\\grammar\\GrammarNavigation\\index.js",
    statementMap: {
      "0": {
        start: {
          line: 14,
          column: 26
        },
        end: {
          line: 101,
          column: 1
        }
      },
      "1": {
        start: {
          line: 31,
          column: 2
        },
        end: {
          line: 52,
          column: 3
        }
      },
      "2": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 51,
          column: 6
        }
      },
      "3": {
        start: {
          line: 55,
          column: 2
        },
        end: {
          line: 77,
          column: 3
        }
      },
      "4": {
        start: {
          line: 56,
          column: 4
        },
        end: {
          line: 76,
          column: 6
        }
      },
      "5": {
        start: {
          line: 80,
          column: 2
        },
        end: {
          line: 100,
          column: 4
        }
      },
      "6": {
        start: {
          line: 104,
          column: 0
        },
        end: {
          line: 127,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 26
          },
          end: {
            line: 14,
            column: 27
          }
        },
        loc: {
          start: {
            line: 26,
            column: 6
          },
          end: {
            line: 101,
            column: 1
          }
        },
        line: 26
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 2
          },
          end: {
            line: 25,
            column: 24
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 25,
            column: 15
          },
          end: {
            line: 25,
            column: 24
          }
        }],
        line: 25
      },
      "1": {
        loc: {
          start: {
            line: 31,
            column: 2
          },
          end: {
            line: 52,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 2
          },
          end: {
            line: 52,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "2": {
        loc: {
          start: {
            line: 55,
            column: 2
          },
          end: {
            line: 77,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 2
          },
          end: {
            line: 77,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "3": {
        loc: {
          start: {
            line: 64,
            column: 24
          },
          end: {
            line: 64,
            column: 46
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 64,
            column: 41
          },
          end: {
            line: 64,
            column: 42
          }
        }, {
          start: {
            line: 64,
            column: 45
          },
          end: {
            line: 64,
            column: 46
          }
        }],
        line: 64
      },
      "4": {
        loc: {
          start: {
            line: 68,
            column: 18
          },
          end: {
            line: 68,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 68,
            column: 35
          },
          end: {
            line: 68,
            column: 43
          }
        }, {
          start: {
            line: 68,
            column: 46
          },
          end: {
            line: 68,
            column: 52
          }
        }],
        line: 68
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ed48066341e5c00e8e5a364d81d5dde22f180c80"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_1mt35oje5i = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1mt35oje5i();
cov_1mt35oje5i().s[0]++;
var GrammarNavigation = function GrammarNavigation(_ref) {
  var showFeedback = _ref.showFeedback,
    isCorrect = _ref.isCorrect,
    canCheckAnswer = _ref.canCheckAnswer,
    onCheckAnswer = _ref.onCheckAnswer,
    onPreviousExercise = _ref.onPreviousExercise,
    onNextExercise = _ref.onNextExercise,
    onRetryExercise = _ref.onRetryExercise,
    onSkipExercise = _ref.onSkipExercise,
    isFirstExercise = _ref.isFirstExercise,
    isLastExercise = _ref.isLastExercise,
    _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? (cov_1mt35oje5i().b[0][0]++, "#3b82f6") : _ref$levelColor;
  cov_1mt35oje5i().f[0]++;
  cov_1mt35oje5i().s[1]++;
  if (!showFeedback) {
    cov_1mt35oje5i().b[1][0]++;
    cov_1mt35oje5i().s[2]++;
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.container,
      children: (0, _jsxRuntime.jsx)(_NavigationButtons.default, {
        onNext: onCheckAnswer,
        disableNext: !canCheckAnswer,
        disablePrevious: true,
        showSkip: false,
        currentIndex: 0,
        totalCount: 1,
        primaryColor: levelColor,
        buttonLabels: {
          next: "Check Answer",
          previous: "",
          skip: "",
          finish: ""
        },
        variant: "centered"
      })
    });
  } else {
    cov_1mt35oje5i().b[1][1]++;
  }
  cov_1mt35oje5i().s[3]++;
  if (isCorrect) {
    cov_1mt35oje5i().b[2][0]++;
    cov_1mt35oje5i().s[4]++;
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.container,
      children: (0, _jsxRuntime.jsx)(_NavigationButtons.default, {
        onNext: onNextExercise,
        onPrevious: onPreviousExercise,
        disablePrevious: isFirstExercise,
        disableNext: false,
        showSkip: false,
        currentIndex: isLastExercise ? (cov_1mt35oje5i().b[3][0]++, 1) : (cov_1mt35oje5i().b[3][1]++, 0),
        totalCount: 2,
        primaryColor: levelColor,
        buttonLabels: {
          next: isLastExercise ? (cov_1mt35oje5i().b[4][0]++, "Finish") : (cov_1mt35oje5i().b[4][1]++, "Next"),
          previous: "Previous",
          skip: "",
          finish: "Finish"
        },
        variant: "standard"
      })
    });
  } else {
    cov_1mt35oje5i().b[2][1]++;
  }
  cov_1mt35oje5i().s[5]++;
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: _style.default.container,
    children: (0, _jsxRuntime.jsx)(_NavigationButtons.default, {
      onNext: onSkipExercise,
      onPrevious: onRetryExercise,
      disablePrevious: false,
      disableNext: false,
      showSkip: false,
      currentIndex: 0,
      totalCount: 1,
      primaryColor: levelColor,
      buttonLabels: {
        next: "Skip",
        previous: "Try Again",
        skip: "",
        finish: ""
      },
      variant: "standard"
    })
  });
};
cov_1mt35oje5i().s[6]++;
GrammarNavigation.propTypes = {
  showFeedback: _propTypes.default.bool,
  isCorrect: _propTypes.default.bool,
  canCheckAnswer: _propTypes.default.bool,
  onCheckAnswer: _propTypes.default.func.isRequired,
  onPreviousExercise: _propTypes.default.func.isRequired,
  onNextExercise: _propTypes.default.func.isRequired,
  onRetryExercise: _propTypes.default.func.isRequired,
  onSkipExercise: _propTypes.default.func.isRequired,
  isFirstExercise: _propTypes.default.bool,
  isLastExercise: _propTypes.default.bool,
  levelColor: _propTypes.default.string
};
var _default = exports.default = GrammarNavigation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,