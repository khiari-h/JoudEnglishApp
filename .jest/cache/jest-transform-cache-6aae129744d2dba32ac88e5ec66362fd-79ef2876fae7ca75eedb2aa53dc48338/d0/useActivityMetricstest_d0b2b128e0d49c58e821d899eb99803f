b48c73f16cd2390d2bb46a270551a137
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useActivityMetrics = _interopRequireDefault(require("../../src/hooks/useActivityMetrics"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockDate = new Date('2024-01-15T10:00:00.000Z');
var originalDate = global.Date;
describe('useActivityMetrics', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _asyncStorage.default.getItem.mockResolvedValue(null);
    _asyncStorage.default.setItem.mockResolvedValue();
    global.Date = jest.fn(function () {
      return mockDate;
    });
    global.Date.now = jest.fn(function () {
      return mockDate.getTime();
    });
    Object.setPrototypeOf(global.Date, originalDate);
    Object.getOwnPropertyNames(originalDate).forEach(function (name) {
      if (name !== 'constructor') {
        global.Date[name] = originalDate[name];
      }
    });
  });
  afterEach(function () {
    global.Date = originalDate;
  });
  describe('Initialisation', function () {
    test('doit initialiser avec des valeurs par défaut quand AsyncStorage est vide', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook.result,
        waitForNextUpdate = _renderHook.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.currentStreak).toBe(0);
      expect(result.current.todayMinutes).toBe(0);
      expect(result.current.formattedTime).toBe('0min');
      expect(result.current.streakTrend).toBeNull();
    }));
    test('doit charger les données existantes du même jour', (0, _asyncToGenerator2.default)(function* () {
      var today = mockDate.toDateString();
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        switch (key) {
          case 'current_streak':
            return Promise.resolve('5');
          case 'today_minutes':
            return Promise.resolve('45');
          case 'last_time_date':
            return Promise.resolve(today);
          default:
            return Promise.resolve(null);
        }
      });
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook2.result,
        waitForNextUpdate = _renderHook2.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.currentStreak).toBe(5);
      expect(result.current.todayMinutes).toBe(45);
      expect(result.current.formattedTime).toBe('45min');
    }));
    test('doit réinitialiser todayMinutes pour un nouveau jour', (0, _asyncToGenerator2.default)(function* () {
      var yesterday = new Date(mockDate);
      yesterday.setDate(yesterday.getDate() - 1);
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        switch (key) {
          case 'current_streak':
            return Promise.resolve('5');
          case 'today_minutes':
            return Promise.resolve('45');
          case 'last_time_date':
            return Promise.resolve(yesterday.toDateString());
          default:
            return Promise.resolve(null);
        }
      });
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook3.result,
        waitForNextUpdate = _renderHook3.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.currentStreak).toBe(5);
      expect(result.current.todayMinutes).toBe(0);
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('today_minutes', '0');
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('last_time_date', mockDate.toDateString());
    }));
  });
  describe('Session Timer', function () {
    test('doit démarrer et arrêter une session correctement', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook4.result,
        waitForNextUpdate = _renderHook4.waitForNextUpdate;
      yield waitForNextUpdate();
      (0, _reactNative.act)(function () {
        result.current.startSession('meditation');
      });
      var sessionEndTime = mockDate.getTime() + 5 * 60 * 1000;
      global.Date.now = jest.fn(function () {
        return sessionEndTime;
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.endSession();
      }));
      expect(result.current.todayMinutes).toBe(5);
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('today_minutes', '5');
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('last_time_date', mockDate.toDateString());
    }));
    test('ne doit pas mettre à jour si la session est trop courte (< 1 minute)', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook5.result,
        waitForNextUpdate = _renderHook5.waitForNextUpdate;
      yield waitForNextUpdate();
      (0, _reactNative.act)(function () {
        result.current.startSession();
      });
      var sessionEndTime = mockDate.getTime() + 30 * 1000;
      global.Date.now = jest.fn(function () {
        return sessionEndTime;
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.endSession();
      }));
      expect(result.current.todayMinutes).toBe(0);
      expect(_asyncStorage.default.setItem).not.toHaveBeenCalledWith('today_minutes', expect.anything());
    }));
    test('ne doit rien faire si endSession est appelé sans startSession', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook6.result,
        waitForNextUpdate = _renderHook6.waitForNextUpdate;
      yield waitForNextUpdate();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.endSession();
      }));
      expect(result.current.todayMinutes).toBe(0);
      expect(_asyncStorage.default.setItem).not.toHaveBeenCalled();
    }));
    test('doit accumuler les minutes de plusieurs sessions', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        switch (key) {
          case 'today_minutes':
            return Promise.resolve('30');
          case 'last_time_date':
            return Promise.resolve(mockDate.toDateString());
          default:
            return Promise.resolve('0');
        }
      });
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook7.result,
        waitForNextUpdate = _renderHook7.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.todayMinutes).toBe(30);
      (0, _reactNative.act)(function () {
        result.current.startSession();
      });
      var sessionEndTime = mockDate.getTime() + 10 * 60 * 1000;
      global.Date.now = jest.fn(function () {
        return sessionEndTime;
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.endSession();
      }));
      expect(result.current.todayMinutes).toBe(40);
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('today_minutes', '40');
    }));
  });
  describe('Streak Logic', function () {
    test('doit commencer un nouveau streak', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'last_activity_date') return Promise.resolve(null);
        return Promise.resolve('0');
      });
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook8.result,
        waitForNextUpdate = _renderHook8.waitForNextUpdate;
      yield waitForNextUpdate();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.updateStreak();
      }));
      expect(result.current.currentStreak).toBe(1);
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('current_streak', '1');
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('last_activity_date', mockDate.toDateString());
    }));
    test('doit continuer le streak si activité hier', (0, _asyncToGenerator2.default)(function* () {
      var yesterday = new Date(mockDate);
      yesterday.setDate(yesterday.getDate() - 1);
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        switch (key) {
          case 'current_streak':
            return Promise.resolve('3');
          case 'last_activity_date':
            return Promise.resolve(yesterday.toDateString());
          default:
            return Promise.resolve('0');
        }
      });
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook9.result,
        waitForNextUpdate = _renderHook9.waitForNextUpdate;
      yield waitForNextUpdate();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.updateStreak();
      }));
      expect(result.current.currentStreak).toBe(4);
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('current_streak', '4');
    }));
    test('doit redémarrer le streak si gap > 1 jour', (0, _asyncToGenerator2.default)(function* () {
      var twoDaysAgo = new Date(mockDate);
      twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        switch (key) {
          case 'current_streak':
            return Promise.resolve('5');
          case 'last_activity_date':
            return Promise.resolve(twoDaysAgo.toDateString());
          default:
            return Promise.resolve('0');
        }
      });
      var _renderHook0 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook0.result,
        waitForNextUpdate = _renderHook0.waitForNextUpdate;
      yield waitForNextUpdate();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.updateStreak();
      }));
      expect(result.current.currentStreak).toBe(1);
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('current_streak', '1');
    }));
    test('ne doit pas mettre à jour le streak si déjà fait aujourd\'hui', (0, _asyncToGenerator2.default)(function* () {
      var today = mockDate.toDateString();
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        switch (key) {
          case 'current_streak':
            return Promise.resolve('3');
          case 'last_activity_date':
            return Promise.resolve(today);
          default:
            return Promise.resolve('0');
        }
      });
      var _renderHook1 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook1.result,
        waitForNextUpdate = _renderHook1.waitForNextUpdate;
      yield waitForNextUpdate();
      var initialStreak = result.current.currentStreak;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.updateStreak();
      }));
      expect(result.current.currentStreak).toBe(initialStreak);
      expect(_asyncStorage.default.setItem).not.toHaveBeenCalledWith('current_streak', expect.anything());
    }));
  });
  describe('Getters et formatage', function () {
    test('getStreakTrend doit retourner les bons messages', (0, _asyncToGenerator2.default)(function* () {
      var testCases = [{
        streak: 0,
        expected: null
      }, {
        streak: 1,
        expected: '🔥 Continue!'
      }, {
        streak: 3,
        expected: '💪 En forme!'
      }, {
        streak: 7,
        expected: '🏆 Incroyable!'
      }, {
        streak: 10,
        expected: '🏆 Incroyable!'
      }];
      var _loop = function* _loop(testCase) {
        _asyncStorage.default.getItem.mockImplementation(function (key) {
          if (key === 'current_streak') return Promise.resolve(testCase.streak.toString());
          return Promise.resolve('0');
        });
        var _renderHook10 = (0, _reactNative.renderHook)(function () {
            return (0, _useActivityMetrics.default)();
          }),
          result = _renderHook10.result,
          waitForNextUpdate = _renderHook10.waitForNextUpdate;
        yield waitForNextUpdate();
        expect(result.current.streakTrend).toBe(testCase.expected);
      };
      for (var testCase of testCases) {
        yield* _loop(testCase);
      }
    }));
    test('getFormattedTime doit formater correctement', (0, _asyncToGenerator2.default)(function* () {
      var testCases = [{
        minutes: 0,
        expected: '0min'
      }, {
        minutes: 30,
        expected: '30min'
      }, {
        minutes: 60,
        expected: '1h'
      }, {
        minutes: 75,
        expected: '1h15min'
      }, {
        minutes: 120,
        expected: '2h'
      }, {
        minutes: 145,
        expected: '2h25min'
      }];
      var _loop2 = function* _loop2(testCase) {
        _asyncStorage.default.getItem.mockImplementation(function (key) {
          if (key === 'today_minutes') return Promise.resolve(testCase.minutes.toString());
          if (key === 'last_time_date') return Promise.resolve(mockDate.toDateString());
          return Promise.resolve('0');
        });
        var _renderHook11 = (0, _reactNative.renderHook)(function () {
            return (0, _useActivityMetrics.default)();
          }),
          result = _renderHook11.result,
          waitForNextUpdate = _renderHook11.waitForNextUpdate;
        yield waitForNextUpdate();
        expect(result.current.formattedTime).toBe(testCase.expected);
      };
      for (var testCase of testCases) {
        yield* _loop2(testCase);
      }
    }));
  });
  describe('Gestion des erreurs', function () {
    test('doit gérer les erreurs AsyncStorage silencieusement', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockRejectedValue(new Error('Storage error'));
      var _renderHook12 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook12.result,
        waitForNextUpdate = _renderHook12.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.currentStreak).toBe(0);
      expect(result.current.todayMinutes).toBe(0);
    }));
    test('doit gérer les erreurs lors de endSession', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.setItem.mockRejectedValue(new Error('Storage error'));
      var _renderHook13 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook13.result,
        waitForNextUpdate = _renderHook13.waitForNextUpdate;
      yield waitForNextUpdate();
      (0, _reactNative.act)(function () {
        result.current.startSession();
      });
      var sessionEndTime = mockDate.getTime() + 5 * 60 * 1000;
      global.Date.now = jest.fn(function () {
        return sessionEndTime;
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.endSession();
      }));
      expect(result.current.todayMinutes).toBe(5);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,