2739a1bb52c239df8ddd60110c82ed58
_getJestObj().mock('expo-router', function () {
  return {
    useFocusEffect: jest.fn(function (callback) {
      return callback();
    }),
    router: {
      push: jest.fn()
    },
    Stack: function Stack(_ref) {
      var children = _ref.children;
      return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
        children: children
      });
    },
    useLocalSearchParams: function useLocalSearchParams() {
      return {};
    },
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn(),
        canGoBack: jest.fn(function () {
          return true;
        }),
        addListener: jest.fn(),
        isFocused: jest.fn(function () {
          return true;
        })
      };
    }
  };
});
_getJestObj().mock('../../src/screens/Dashboard/hooks/useDashboardState', function () {
  return {
    useDashboardState: jest.fn(function () {
      return {
        showLevelProgress: false,
        setShowLevelProgress: jest.fn(),
        openLevelProgressModal: jest.fn(),
        closeLevelProgressModal: jest.fn(),
        refreshing: false,
        activeTab: "home",
        setActiveTab: jest.fn(),
        onRefresh: jest.fn().mockResolvedValue()
      };
    })
  };
});
_getJestObj().mock('../../src/hooks/useLastActivity', function () {
  return function () {
    return {
      lastActivity: null,
      isLoading: false,
      reload: jest.fn()
    };
  };
});
_getJestObj().mock('../../src/hooks/useRealTimeProgress', function () {
  return function () {
    return {
      getLevelProgress: jest.fn(function () {
        return 0;
      }),
      refresh: jest.fn()
    };
  };
});
_getJestObj().mock('../../src/hooks/useActivityMetrics', function () {
  return function () {
    return {
      currentStreak: 3,
      wordsToday: 0,
      timeToday: 0,
      isLoading: false
    };
  };
});
_getJestObj().mock('../../src/contexts/ProgressContext', function () {
  return Object.assign({}, jest.requireActual('../../src/contexts/ProgressContext'), {
    useProgress: function useProgress() {
      return {
        progress: {
          overall: 0,
          levels: {}
        },
        isLoading: false,
        updateProgress: mockUpdateProgress,
        getProgressForLevel: function getProgressForLevel() {
          return 0;
        }
      };
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _ProgressContext = require("../../src/contexts/ProgressContext");
var _ThemeContext = require("../../src/contexts/ThemeContext");
var _CurrentLevelContext = require("../../src/contexts/CurrentLevelContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockUpdateProgress = jest.fn();
var FakeExerciseScreen = function FakeExerciseScreen() {
  var _useProgress = (0, _ProgressContext.useProgress)(),
    updateProgress = _useProgress.updateProgress;
  var handleComplete = function handleComplete() {
    updateProgress('A1', 'vocabulary', 80);
  };
  var handlePartialComplete = function handlePartialComplete() {
    updateProgress('A1', 'vocabulary', 40);
  };
  var handleMultipleUpdates = function handleMultipleUpdates() {
    updateProgress('A1', 'vocabulary', 60);
    updateProgress('A1', 'grammar', 30);
    updateProgress('A1', 'reading', 20);
  };
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [(0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "complete-exercise",
      onPress: handleComplete,
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "Terminer l'exercice"
      })
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "partial-exercise",
      onPress: handlePartialComplete,
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "Exercice partiel"
      })
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "multiple-updates",
      onPress: handleMultipleUpdates,
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "Mises \xE0 jour multiples"
      })
    })]
  });
};
var FakeProgressDisplay = function FakeProgressDisplay() {
  var _useProgress2 = (0, _ProgressContext.useProgress)(),
    progress = _useProgress2.progress,
    isLoading = _useProgress2.isLoading;
  if (isLoading) {
    return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "loading",
      children: "Chargement..."
    });
  }
  return (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
    testID: "progress-display",
    children: ["Progression globale: ", progress.overall, "%"]
  });
};
describe('Scénario 1: Mise à jour de la progression - Tests d\'intégration', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it("devrait appeler updateProgress avec les bonnes données après la fin d'un exercice", (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsx)(FakeExerciseScreen, {})
        })
      })),
      getByTestId = _render.getByTestId;
    _reactNative.fireEvent.press(getByTestId('complete-exercise'));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockUpdateProgress).toHaveBeenCalledWith('A1', 'vocabulary', 80);
      expect(mockUpdateProgress).toHaveBeenCalledTimes(1);
    });
  }));
  it("devrait gérer les mises à jour partielles de progression", (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsx)(FakeExerciseScreen, {})
        })
      })),
      getByTestId = _render2.getByTestId;
    _reactNative.fireEvent.press(getByTestId('partial-exercise'));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockUpdateProgress).toHaveBeenCalledWith('A1', 'vocabulary', 40);
      expect(mockUpdateProgress).toHaveBeenCalledTimes(1);
    });
  }));
  it("devrait gérer plusieurs mises à jour simultanées", (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsx)(FakeExerciseScreen, {})
        })
      })),
      getByTestId = _render3.getByTestId;
    _reactNative.fireEvent.press(getByTestId('multiple-updates'));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockUpdateProgress).toHaveBeenCalledWith('A1', 'vocabulary', 60);
      expect(mockUpdateProgress).toHaveBeenCalledWith('A1', 'grammar', 30);
      expect(mockUpdateProgress).toHaveBeenCalledWith('A1', 'reading', 20);
      expect(mockUpdateProgress).toHaveBeenCalledTimes(3);
    });
  }));
});
describe('Scénario 2: Affichage et mise à jour des métriques en temps réel', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it("devrait afficher la progression mise à jour après modification", (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsx)(FakeProgressDisplay, {})
        })
      })),
      getByTestId = _render4.getByTestId,
      rerender = _render4.rerender;
    expect(getByTestId('progress-display')).toBeTruthy();
    mockUpdateProgress('A1', 'vocabulary', 75);
    rerender((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
        children: (0, _jsxRuntime.jsx)(FakeProgressDisplay, {})
      })
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('progress-display')).toBeTruthy();
    });
  }));
  it("devrait gérer les états de chargement pendant les mises à jour", (0, _asyncToGenerator2.default)(function* () {
    var mockProgressContextWithLoading = Object.assign({}, jest.requireActual('../../src/contexts/ProgressContext'), {
      useProgress: function useProgress() {
        return {
          progress: {
            overall: 0,
            levels: {}
          },
          isLoading: true,
          updateProgress: mockUpdateProgress,
          getProgressForLevel: function getProgressForLevel() {
            return 0;
          }
        };
      }
    });
    jest.doMock('../../src/contexts/ProgressContext', function () {
      return mockProgressContextWithLoading;
    });
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsx)(FakeProgressDisplay, {})
        })
      })),
      getByTestId = _render5.getByTestId;
    expect(getByTestId('loading')).toBeTruthy();
  }));
});
describe('Scénario 3: Intégration avec les composants réels', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it("devrait mettre à jour la progression lors de la navigation entre écrans", (0, _asyncToGenerator2.default)(function* () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsx)(_CurrentLevelContext.CurrentLevelProvider, {
            children: (0, _jsxRuntime.jsx)(FakeExerciseScreen, {})
          })
        })
      })),
      getByTestId = _render6.getByTestId,
      rerender = _render6.rerender;
    _reactNative.fireEvent.press(getByTestId('complete-exercise'));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockUpdateProgress).toHaveBeenCalledWith('A1', 'vocabulary', 80);
    });
    expect(mockUpdateProgress).toHaveBeenCalledTimes(1);
  }));
  it("devrait maintenir la cohérence des données entre les composants", (0, _asyncToGenerator2.default)(function* () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsxs)(_CurrentLevelContext.CurrentLevelProvider, {
            children: [(0, _jsxRuntime.jsx)(FakeExerciseScreen, {}), (0, _jsxRuntime.jsx)(FakeProgressDisplay, {})]
          })
        })
      })),
      getByTestId = _render7.getByTestId;
    expect(getByTestId('complete-exercise')).toBeTruthy();
    expect(getByTestId('progress-display')).toBeTruthy();
    _reactNative.fireEvent.press(getByTestId('complete-exercise'));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockUpdateProgress).toHaveBeenCalledWith('A1', 'vocabulary', 80);
    });
    expect(getByTestId('progress-display')).toBeTruthy();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,