d4b564c8687469101d4eddd0afa5dd3b
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    },
    useFocusEffect: jest.fn(function () {})
  };
});
_getJestObj().mock('../../src/utils/phrases/phrasesDataHelper', function () {
  return {
    getLevelColor: jest.fn(function () {
      return '#007AFF';
    }),
    getPhrasesData: jest.fn(function () {
      return {
        categories: [{
          id: 0,
          name: 'Greetings'
        }],
        phrases: [{
          categoryId: 0,
          text: 'Hello',
          translation: 'Bonjour'
        }]
      };
    }),
    loadPhrasesData: jest.fn((0, _asyncToGenerator2.default)(function* () {
      return {
        categories: [{
          id: 0,
          name: 'Greetings'
        }],
        phrases: [{
          categoryId: 0,
          text: 'Hello',
          translation: 'Bonjour'
        }]
      };
    }))
  };
});
_getJestObj().mock('../../src/screens/exercises/phrases/hooks/usePhrases', function () {
  return {
    __esModule: true,
    default: jest.fn(function () {
      return {
        categoryIndex: 0,
        phraseIndex: 0,
        showTranslation: false,
        completedPhrases: {},
        loaded: true,
        showDetailedProgress: false,
        currentPhrase: {
          text: 'Hello'
        },
        currentPhrases: [{
          text: 'Hello'
        }],
        totalPhrasesInCategory: 1,
        hasValidData: true,
        changeCategory: jest.fn(),
        toggleTranslation: jest.fn(),
        toggleDetailedProgress: jest.fn(),
        handleNext: jest.fn(function () {
          return {
            completed: false
          };
        }),
        handlePrevious: jest.fn(),
        canGoToPrevious: false,
        isLastPhraseInCategory: false,
        stats: {
          completionProgress: 0,
          completedPhrasesCount: 0
        },
        display: {
          categories: [{
            id: 0,
            name: 'Greetings'
          }]
        }
      };
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _phrases = _interopRequireDefault(require("../../src/screens/exercises/phrases"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('PhrasesExercise accessibility', function () {
  it('should render navigation buttons as role button', function () {
    var params = {
      level: '1'
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_phrases.default, {
        route: {
          params: params
        }
      })),
      getAllByRole = _render.getAllByRole;
    var buttons = getAllByRole('button');
    expect(buttons.length).toBeGreaterThan(0);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJyb3V0ZXIiLCJwdXNoIiwiamVzdCIsImZuIiwidXNlRm9jdXNFZmZlY3QiLCJnZXRMZXZlbENvbG9yIiwiZ2V0UGhyYXNlc0RhdGEiLCJjYXRlZ29yaWVzIiwiaWQiLCJuYW1lIiwicGhyYXNlcyIsImNhdGVnb3J5SWQiLCJ0ZXh0IiwidHJhbnNsYXRpb24iLCJsb2FkUGhyYXNlc0RhdGEiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJkZWZhdWx0IiwiX19lc01vZHVsZSIsImNhdGVnb3J5SW5kZXgiLCJwaHJhc2VJbmRleCIsInNob3dUcmFuc2xhdGlvbiIsImNvbXBsZXRlZFBocmFzZXMiLCJsb2FkZWQiLCJzaG93RGV0YWlsZWRQcm9ncmVzcyIsImN1cnJlbnRQaHJhc2UiLCJjdXJyZW50UGhyYXNlcyIsInRvdGFsUGhyYXNlc0luQ2F0ZWdvcnkiLCJoYXNWYWxpZERhdGEiLCJjaGFuZ2VDYXRlZ29yeSIsInRvZ2dsZVRyYW5zbGF0aW9uIiwidG9nZ2xlRGV0YWlsZWRQcm9ncmVzcyIsImhhbmRsZU5leHQiLCJjb21wbGV0ZWQiLCJoYW5kbGVQcmV2aW91cyIsImNhbkdvVG9QcmV2aW91cyIsImlzTGFzdFBocmFzZUluQ2F0ZWdvcnkiLCJzdGF0cyIsImNvbXBsZXRpb25Qcm9ncmVzcyIsImNvbXBsZXRlZFBocmFzZXNDb3VudCIsImRpc3BsYXkiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9waHJhc2VzIiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwiaXQiLCJwYXJhbXMiLCJsZXZlbCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJyb3V0ZSIsImdldEFsbEJ5Um9sZSIsImJ1dHRvbnMiLCJleHBlY3QiLCJsZW5ndGgiLCJ0b0JlR3JlYXRlclRoYW4iXSwic291cmNlcyI6WyJQaHJhc2VzRXhlcmNpc2UuYTExeS50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcclxuaW1wb3J0IFBocmFzZXNFeGVyY2lzZSBmcm9tICcuLi8uLi9zcmMvc2NyZWVucy9leGVyY2lzZXMvcGhyYXNlcyc7XHJcblxyXG5qZXN0Lm1vY2soJ2V4cG8tcm91dGVyJywgKCkgPT4gKHsgcm91dGVyOiB7IHB1c2g6IGplc3QuZm4oKSB9LCB1c2VGb2N1c0VmZmVjdDogamVzdC5mbigoKSA9PiB7fSkgfSkpO1xyXG5cclxuamVzdC5tb2NrKCcuLi8uLi9zcmMvdXRpbHMvcGhyYXNlcy9waHJhc2VzRGF0YUhlbHBlcicsICgpID0+ICh7XHJcbiAgZ2V0TGV2ZWxDb2xvcjogamVzdC5mbigoKSA9PiAnIzAwN0FGRicpLFxyXG4gIGdldFBocmFzZXNEYXRhOiBqZXN0LmZuKCgpID0+ICh7XHJcbiAgICBjYXRlZ29yaWVzOiBbeyBpZDogMCwgbmFtZTogJ0dyZWV0aW5ncycgfV0sXHJcbiAgICBwaHJhc2VzOiBbeyBjYXRlZ29yeUlkOiAwLCB0ZXh0OiAnSGVsbG8nLCB0cmFuc2xhdGlvbjogJ0JvbmpvdXInIH1dXHJcbiAgfSkpLFxyXG4gIGxvYWRQaHJhc2VzRGF0YTogamVzdC5mbihhc3luYyAoKSA9PiAoe1xyXG4gICAgY2F0ZWdvcmllczogW3sgaWQ6IDAsIG5hbWU6ICdHcmVldGluZ3MnIH1dLFxyXG4gICAgcGhyYXNlczogW3sgY2F0ZWdvcnlJZDogMCwgdGV4dDogJ0hlbGxvJywgdHJhbnNsYXRpb246ICdCb25qb3VyJyB9XVxyXG4gIH0pKSxcclxufSkpO1xyXG5cclxuamVzdC5tb2NrKCcuLi8uLi9zcmMvc2NyZWVucy9leGVyY2lzZXMvcGhyYXNlcy9ob29rcy91c2VQaHJhc2VzJywgKCkgPT4gKHtcclxuICBfX2VzTW9kdWxlOiB0cnVlLFxyXG4gIGRlZmF1bHQ6IGplc3QuZm4oKCkgPT4gKHtcclxuICAgIGNhdGVnb3J5SW5kZXg6IDAsXHJcbiAgICBwaHJhc2VJbmRleDogMCxcclxuICAgIHNob3dUcmFuc2xhdGlvbjogZmFsc2UsXHJcbiAgICBjb21wbGV0ZWRQaHJhc2VzOiB7fSxcclxuICAgIGxvYWRlZDogdHJ1ZSxcclxuICAgIHNob3dEZXRhaWxlZFByb2dyZXNzOiBmYWxzZSxcclxuICAgIGN1cnJlbnRQaHJhc2U6IHsgdGV4dDogJ0hlbGxvJyB9LFxyXG4gICAgY3VycmVudFBocmFzZXM6IFt7IHRleHQ6ICdIZWxsbycgfV0sXHJcbiAgICB0b3RhbFBocmFzZXNJbkNhdGVnb3J5OiAxLFxyXG4gICAgaGFzVmFsaWREYXRhOiB0cnVlLFxyXG4gICAgY2hhbmdlQ2F0ZWdvcnk6IGplc3QuZm4oKSxcclxuICAgIHRvZ2dsZVRyYW5zbGF0aW9uOiBqZXN0LmZuKCksXHJcbiAgICB0b2dnbGVEZXRhaWxlZFByb2dyZXNzOiBqZXN0LmZuKCksXHJcbiAgICBoYW5kbGVOZXh0OiBqZXN0LmZuKCgpID0+ICh7IGNvbXBsZXRlZDogZmFsc2UgfSkpLFxyXG4gICAgaGFuZGxlUHJldmlvdXM6IGplc3QuZm4oKSxcclxuICAgIGNhbkdvVG9QcmV2aW91czogZmFsc2UsXHJcbiAgICBpc0xhc3RQaHJhc2VJbkNhdGVnb3J5OiBmYWxzZSxcclxuICAgIHN0YXRzOiB7IGNvbXBsZXRpb25Qcm9ncmVzczogMCwgY29tcGxldGVkUGhyYXNlc0NvdW50OiAwIH0sXHJcbiAgICBkaXNwbGF5OiB7IGNhdGVnb3JpZXM6IFt7IGlkOiAwLCBuYW1lOiAnR3JlZXRpbmdzJyB9XSB9LFxyXG4gIH0pKSxcclxufSkpO1xyXG5cclxuZGVzY3JpYmUoJ1BocmFzZXNFeGVyY2lzZSBhY2Nlc3NpYmlsaXR5JywgKCkgPT4ge1xyXG4gIGl0KCdzaG91bGQgcmVuZGVyIG5hdmlnYXRpb24gYnV0dG9ucyBhcyByb2xlIGJ1dHRvbicsICgpID0+IHtcclxuICAgIGNvbnN0IHBhcmFtcyA9IHsgbGV2ZWw6ICcxJyB9O1xyXG4gICAgY29uc3QgeyBnZXRBbGxCeVJvbGUgfSA9IHJlbmRlcig8UGhyYXNlc0V4ZXJjaXNlIHJvdXRlPXt7IHBhcmFtcyB9fSAvPik7XHJcbiAgICBjb25zdCBidXR0b25zID0gZ2V0QWxsQnlSb2xlKCdidXR0b24nKTtcclxuICAgIGV4cGVjdChidXR0b25zLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcblxyXG4iXSwibWFwcGluZ3MiOiJBQUlBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxhQUFhLEVBQUU7RUFBQSxPQUFPO0lBQUVDLE1BQU0sRUFBRTtNQUFFQyxJQUFJLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0lBQUUsQ0FBQztJQUFFQyxjQUFjLEVBQUVGLElBQUksQ0FBQ0MsRUFBRSxDQUFDLFlBQU0sQ0FBQyxDQUFDO0VBQUUsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUVwR0wsV0FBQSxHQUFLQyxJQUFJLENBQUMsMkNBQTJDLEVBQUU7RUFBQSxPQUFPO0lBQzVETSxhQUFhLEVBQUVILElBQUksQ0FBQ0MsRUFBRSxDQUFDO01BQUEsT0FBTSxTQUFTO0lBQUEsRUFBQztJQUN2Q0csY0FBYyxFQUFFSixJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFBLE9BQU87UUFDN0JJLFVBQVUsRUFBRSxDQUFDO1VBQUVDLEVBQUUsRUFBRSxDQUFDO1VBQUVDLElBQUksRUFBRTtRQUFZLENBQUMsQ0FBQztRQUMxQ0MsT0FBTyxFQUFFLENBQUM7VUFBRUMsVUFBVSxFQUFFLENBQUM7VUFBRUMsSUFBSSxFQUFFLE9BQU87VUFBRUMsV0FBVyxFQUFFO1FBQVUsQ0FBQztNQUNwRSxDQUFDO0lBQUEsQ0FBQyxDQUFDO0lBQ0hDLGVBQWUsRUFBRVosSUFBSSxDQUFDQyxFQUFFLEtBQUFZLGtCQUFBLENBQUFDLE9BQUEsRUFBQztNQUFBLE9BQWE7UUFDcENULFVBQVUsRUFBRSxDQUFDO1VBQUVDLEVBQUUsRUFBRSxDQUFDO1VBQUVDLElBQUksRUFBRTtRQUFZLENBQUMsQ0FB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