71f80de44387c06fdc9c8da6a70e235e
_getJestObj().mock('../../../src/components/exercise-common/CategorySelector/style', function () {
  var _jest$requireActual = jest.requireActual('react-native'),
    StyleSheet = _jest$requireActual.StyleSheet;
  return function () {
    return StyleSheet.create({
      container: {},
      backgroundGradient: {},
      scrollView: {},
      scrollContent: {},
      categoryItemWrapper: {},
      categoryTouchable: {},
      selectedCategoryItem: {},
      selectedInner: {},
      selectedCategoryText: {
        color: '#FFFFFF'
      },
      sparkleContainer: {},
      sparkle: {},
      categoryItem: {},
      categoryInner: {},
      categoryText: {}
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _CategorySelector = _interopRequireWildcard(require("../../../src/components/exercise-common/CategorySelector"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('CategorySelector', function () {
  var categories = [{
    id: '1',
    name: 'Grammar'
  }, {
    id: '2',
    name: 'Vocabulary'
  }, {
    id: '3',
    name: 'Reading'
  }];
  var onSelectCategoryMock = jest.fn();
  beforeEach(function () {
    jest.useFakeTimers();
    jest.clearAllMocks();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  it('should render all categories correctly and call onSelectCategory on press', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "2",
        onSelectCategory: onSelectCategoryMock
      })),
      getByText = _render.getByText,
      queryByText = _render.queryByText;
    expect(getByText('Grammar')).toBeTruthy();
    expect(getByText('Vocabulary')).toBeTruthy();
    expect(getByText('Reading')).toBeTruthy();
    expect(getByText('âœ¨')).toBeTruthy();
    _reactNative.fireEvent.press(getByText('Grammar'));
    expect(onSelectCategoryMock).toHaveBeenCalledWith('1');
    _reactNative.fireEvent.press(getByText('Vocabulary'));
    expect(onSelectCategoryMock).not.toHaveBeenCalledWith('2');
  });
  it('should trigger animation when selectedCategory changes', (0, _asyncToGenerator2.default)(function* () {
    var mockTiming = jest.spyOn(_reactNative2.Animated, 'timing');
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: onSelectCategoryMock
      })),
      rerender = _render2.rerender;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "2",
        onSelectCategory: onSelectCategoryMock
      }));
      jest.advanceTimersByTime(300);
    }));
    expect(mockTiming).toHaveBeenCalledTimes(2);
    expect(mockTiming).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({
      toValue: 0,
      duration: 200
    }));
    expect(mockTiming).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({
      toValue: 1,
      duration: 300
    }));
  }));
  it('should handle new categories correctly and initialize new animations', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1"
      })),
      rerender = _render3.rerender,
      getByText = _render3.getByText,
      getByTestId = _render3.getByTestId;
    var newCategories = [{
      id: '4',
      name: 'Writing'
    }].concat(categories);
    rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
      categories: newCategories,
      selectedCategory: "1"
    }));
    expect(getByText('Writing')).toBeTruthy();
    var allAnimations = _CategorySelector.default.animationsRef.current;
    expect(allAnimations['4']).toBeInstanceOf(_reactNative2.Animated.Value);
  });
  it('should scroll to the selected category on layout', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1"
      })),
      getByText = _render4.getByText,
      rerender = _render4.rerender;
    var mockScrollTo = jest.fn();
    var scrollViewRef = {
      current: {
        scrollTo: mockScrollTo
      }
    };
    rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
      categories: categories,
      selectedCategory: "2",
      scrollViewRef: scrollViewRef
    }));
    (0, _reactNative.fireEvent)(getByText('Vocabulary'), 'layout', {
      nativeEvent: {
        layout: {
          x: 100,
          y: 0,
          width: 80,
          height: 30
        }
      }
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(mockScrollTo).toHaveBeenCalledWith({
      x: 60,
      y: 0,
      animated: true
    });
  }));
  it('should correctly memoize the component based on prop changes', function () {
    var prevProps = {
      categories: [{
        id: '1',
        name: 'Grammar'
      }],
      selectedCategory: '1'
    };
    var nextPropsSame = {
      categories: [{
        id: '1',
        name: 'Grammar'
      }],
      selectedCategory: '1'
    };
    var nextPropsDifferentCat = {
      categories: [{
        id: '2',
        name: 'Vocabulary'
      }],
      selectedCategory: '1'
    };
    var nextPropsDifferentSel = {
      categories: [{
        id: '1',
        name: 'Grammar'
      }],
      selectedCategory: '2'
    };
    expect((0, _CategorySelector.areEqual)(prevProps, nextPropsSame)).toBe(true);
    expect((0, _CategorySelector.areEqual)(prevProps, nextPropsDifferentCat)).toBe(false);
    expect((0, _CategorySelector.areEqual)(prevProps, nextPropsDifferentSel)).toBe(false);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,