ae5a0f62a568ca73f8b99e49c0832904
_getJestObj().mock('../../src/utils/storageUtils', function () {
  return {
    storeData: jest.fn(function () {
      return Promise.resolve();
    }),
    getData: jest.fn(function () {
      return Promise.resolve(null);
    })
  };
});
_getJestObj().mock('../../src/utils/constants', function () {
  return {
    DEFAULT_SETTINGS: {
      notifications: true,
      dailyGoal: 30,
      theme: 'light'
    },
    STORAGE_KEYS: {
      USER_SETTINGS: 'userSettings'
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _SettingContext = require("../../src/contexts/SettingContext");
var _storageUtils = require("../../src/utils/storageUtils");
var _constants = require("../../src/utils/constants");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var flattenChildren = function flattenChildren(children) {
  return Array.isArray(children) ? children.join('') : children;
};
var TestComponent = function TestComponent() {
  var _React$useContext = _react.default.useContext(_SettingContext.SettingsContext),
    settings = _React$useContext.settings,
    isLoading = _React$useContext.isLoading,
    updateSetting = _React$useContext.updateSetting,
    updateSettings = _React$useContext.updateSettings,
    resetSettings = _React$useContext.resetSettings,
    areNotificationsEnabled = _React$useContext.areNotificationsEnabled,
    getDailyGoal = _React$useContext.getDailyGoal,
    setDailyGoal = _React$useContext.setDailyGoal;
  if (isLoading) {
    return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "loading-status",
      children: "Loading..."
    });
  }
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [(0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "notifications-enabled",
      children: ["Notifications: ", settings.notifications ? 'On' : 'Off']
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "daily-goal",
      children: ["Daily Goal: ", settings.dailyGoal, " minutes"]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "theme",
      children: ["Theme: ", settings.theme]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "are-notifications-enabled-func",
      children: ["Func Notifications: ", areNotificationsEnabled() ? 'On' : 'Off']
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "get-daily-goal-func",
      children: ["Func Daily Goal: ", getDailyGoal(), " minutes"]
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Toggle Notifications",
      onPress: function onPress() {
        return updateSetting('notifications', !settings.notifications);
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Set Daily Goal 60",
      onPress: function onPress() {
        return setDailyGoal(60);
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Set Daily Goal 5",
      onPress: function onPress() {
        return setDailyGoal(5);
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Set Daily Goal 150",
      onPress: function onPress() {
        return setDailyGoal(150);
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Update Theme to Dark",
      onPress: function onPress() {
        return updateSetting('theme', 'dark');
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Update Multiple",
      onPress: function onPress() {
        return updateSettings({
          notifications: false,
          dailyGoal: 45
        });
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Reset Settings",
      onPress: resetSettings
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Update Invalid Setting",
      onPress: function onPress() {
        return updateSetting('invalidKey', 'value');
      }
    })]
  });
};
describe('SettingsContext', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _storageUtils.getData.mockResolvedValue(null);
  });
  it('loads default settings if no saved settings are found', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SettingContext.SettingsProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    expect(_reactNative.screen.getByTestId('loading-status')).toBeTruthy();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
    expect(_reactNative.screen.queryByTestId('loading-status')).toBeNull();
    expect(flattenChildren(_reactNative.screen.getByTestId('notifications-enabled').props.children)).toBe('Notifications: On');
    expect(flattenChildren(_reactNative.screen.getByTestId('daily-goal').props.children)).toBe('Daily Goal: 30 minutes');
    expect(flattenChildren(_reactNative.screen.getByTestId('theme').props.children)).toBe('Theme: light');
    expect(_storageUtils.getData).toHaveBeenCalledWith(_constants.STORAGE_KEYS.USER_SETTINGS);
    expect(_storageUtils.storeData).not.toHaveBeenCalled();
  }));
  it('loads saved settings from storage', (0, _asyncToGenerator2.default)(function* () {
    var savedSettings = {
      notifications: false,
      dailyGoal: 60,
      theme: 'dark'
    };
    _storageUtils.getData.mockResolvedValueOnce(savedSettings);
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SettingContext.SettingsProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
    expect(flattenChildren(_reactNative.screen.getByTestId('notifications-enabled').props.children)).toBe('Notifications: Off');
    expect(flattenChildren(_reactNative.screen.getByTestId('daily-goal').props.children)).toBe('Daily Goal: 60 minutes');
    expect(flattenChildren(_reactNative.screen.getByTestId('theme').props.children)).toBe('Theme: dark');
  }));
  it('updates a single setting and saves it', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SettingContext.SettingsProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Toggle Notifications'));
    expect(flattenChildren(_reactNative.screen.getByTestId('notifications-enabled').props.children)).toBe('Notifications: Off');
    expect(_storageUtils.storeData).toHaveBeenCalledWith(_constants.STORAGE_KEYS.USER_SETTINGS, Object.assign({}, _constants.DEFAULT_SETTINGS, {
      notifications: false
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Theme to Dark'));
    expect(flattenChildren(_reactNative.screen.getByTestId('theme').props.children)).toBe('Theme: dark');
    expect(_storageUtils.storeData).toHaveBeenCalledWith(_constants.STORAGE_KEYS.USER_SETTINGS, Object.assign({}, _constants.DEFAULT_SETTINGS, {
      notifications: false,
      theme: 'dark'
    }));
  }));
  it('updates multiple settings and saves them', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SettingContext.SettingsProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Multiple'));
    expect(flattenChildren(_reactNative.screen.getByTestId('notifications-enabled').props.children)).toBe('Notifications: Off');
    expect(flattenChildren(_reactNative.screen.getByTestId('daily-goal').props.children)).toBe('Daily Goal: 45 minutes');
    expect(_storageUtils.storeData).toHaveBeenCalledWith(_constants.STORAGE_KEYS.USER_SETTINGS, Object.assign({}, _constants.DEFAULT_SETTINGS, {
      notifications: false,
      dailyGoal: 45
    }));
  }));
  it('resets settings to default and saves', (0, _asyncToGenerator2.default)(function* () {
    _storageUtils.getData.mockResolvedValueOnce({
      notifications: false,
      dailyGoal: 60,
      theme: 'dark'
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SettingContext.SettingsProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
    expect(flattenChildren(_reactNative.screen.getByTestId('notifications-enabled').props.children)).toBe('Notifications: Off');
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Reset Settings'));
    expect(flattenChildren(_reactNative.screen.getByTestId('notifications-enabled').props.children)).toBe('Notifications: On');
    expect(flattenChildren(_reactNative.screen.getByTestId('daily-goal').props.children)).toBe('Daily Goal: 30 minutes');
    expect(_storageUtils.storeData).toHaveBeenCalledWith(_constants.STORAGE_KEYS.USER_SETTINGS, _constants.DEFAULT_SETTINGS);
  }));
  it('areNotificationsEnabled returns correct value', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SettingContext.SettingsProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
    expect(flattenChildren(_reactNative.screen.getByTestId('are-notifications-enabled-func').props.children)).toBe('Func Notifications: On');
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Toggle Notifications'));
    expect(flattenChildren(_reactNative.screen.getByTestId('are-notifications-enabled-func').props.children)).toBe('Func Notifications: Off');
  }));
  it('getDailyGoal returns correct value', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SettingContext.SettingsProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
    expect(flattenChildren(_reactNative.screen.getByTestId('get-daily-goal-func').props.children)).toBe('Func Daily Goal: 30 minutes');
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Daily Goal 60'));
    expect(flattenChildren(_reactNative.screen.getByTestId('get-daily-goal-func').props.children)).toBe('Func Daily Goal: 60 minutes');
  }));
  it('setDailyGoal clamps values between 1 and 120', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SettingContext.SettingsProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Daily Goal 5'));
    expect(flattenChildren(_reactNative.screen.getByTestId('daily-goal').props.children)).toBe('Daily Goal: 5 minutes');
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Daily Goal 150'));
    expect(flattenChildren(_reactNative.screen.getByTestId('daily-goal').props.children)).toBe('Daily Goal: 120 minutes');
  }));
  it('does not update setting if key is invalid', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SettingContext.SettingsProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Invalid Setting'));
    expect(flattenChildren(_reactNative.screen.getByTestId('notifications-enabled').props.children)).toBe('Notifications: On');
    expect(flattenChildren(_reactNative.screen.getByTestId('daily-goal').props.children)).toBe('Daily Goal: 30 minutes');
    expect(flattenChildren(_reactNative.screen.getByTestId('theme').props.children)).toBe('Theme: light');
    expect(_storageUtils.storeData).toHaveBeenCalledTimes(0);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJzdG9yZURhdGEiLCJqZXN0IiwiZm4iLCJQcm9taXNlIiwicmVzb2x2ZSIsImdldERhdGEiLCJERUZBVUxUX1NFVFRJTkdTIiwibm90aWZpY2F0aW9ucyIsImRhaWx5R29hbCIsInRoZW1lIiwiU1RPUkFHRV9LRVlTIiwiVVNFUl9TRVRUSU5HUyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX3JlYWN0IiwiX3JlYWN0TmF0aXZlIiwiX3JlYWN0TmF0aXZlMiIsIl9TZXR0aW5nQ29udGV4dCIsIl9zdG9yYWdlVXRpbHMiLCJfY29uc3RhbnRzIiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsImZsYXR0ZW5DaGlsZHJlbiIsImNoaWxkcmVuIiwiQXJyYXkiLCJpc0FycmF5Iiwiam9pbiIsIlRlc3RDb21wb25lbnQiLCJfUmVhY3QkdXNlQ29udGV4dCIsIlJlYWN0IiwidXNlQ29udGV4dCIsIlNldHRpbmdzQ29udGV4dCIsInNldHRpbmdzIiwiaXNMb2FkaW5nIiwidXBkYXRlU2V0dGluZyIsInVwZGF0ZVNldHRpbmdzIiwicmVzZXRTZXR0aW5ncyIsImFyZU5vdGlmaWNhdGlvbnNFbmFibGVkIiwiZ2V0RGFpbHlHb2FsIiwic2V0RGFpbHlHb2FsIiwianN4IiwiVGV4dCIsInRlc3RJRCIsImpzeHMiLCJGcmFnbWVudCIsIkJ1dHRvbiIsInRpdGxlIiwib25QcmVzcyIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsIml0IiwiZGVmYXVsdCIsInJlbmRlciIsIlNldHRpbmdzUHJvdmlkZXIiLCJleHBlY3QiLCJzY3JlZW4iLCJnZXRCeVRlc3RJZCIsInRvQmVUcnV0aHkiLCJhY3QiLCJxdWVyeUJ5VGVzdElkIiwidG9CZU51bGwiLCJwcm9wcyIsInRvQmUiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsIm5vdCIsInRvSGF2ZUJlZW5DYWxsZWQiLCJzYXZlZFNldHRpbmdzIiwibW9ja1Jlc29sdmVkVmFsdWVPbmNlIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJnZXRCeVRleHQiLCJPYmplY3QiLCJhc3NpZ24iLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiXSwic291cmNlcyI6WyJTZXR0aW5nQ29udGV4dC50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiwgYWN0LCBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBUZXh0LCBCdXR0b24gfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgU2V0dGluZ3NQcm92aWRlciwgU2V0dGluZ3NDb250ZXh0IH0gZnJvbSAnLi4vLi4vc3JjL2NvbnRleHRzL1NldHRpbmdDb250ZXh0JztcblxuLy8gTW9jayBzdG9yYWdlVXRpbHNcbmplc3QubW9jaygnLi4vLi4vc3JjL3V0aWxzL3N0b3JhZ2VVdGlscycsICgpID0+ICh7XG4gIHN0b3JlRGF0YTogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoKSksXG4gIGdldERhdGE6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKG51bGwpKSxcbn0pKTtcblxuLy8gTW9jayBjb25zdGFudHNcbmplc3QubW9jaygnLi4vLi4vc3JjL3V0aWxzL2NvbnN0YW50cycsICgpID0+ICh7XG4gIERFRkFVTFRfU0VUVElOR1M6IHtcbiAgICBub3RpZmljYXRpb25zOiB0cnVlLFxuICAgIGRhaWx5R29hbDogMzAsXG4gICAgdGhlbWU6ICdsaWdodCcsXG4gIH0sXG4gIFNUT1JBR0VfS0VZUzoge1xuICAgIFVTRVJfU0VUVElOR1M6ICd1c2VyU2V0dGluZ3MnLFxuICB9LFxufSkpO1xuXG4vLyBJbXBvcnQgbW9ja2VkIGZ1bmN0aW9uc1xuaW1wb3J0IHsgc3RvcmVEYXRhLCBnZXREYXRhIH0gZnJvbSAnLi4vLi4vc3JjL3V0aWxzL3N0b3JhZ2VVdGlscyc7XG5pbXBvcnQgeyBERUZBVUxUX1NFVFRJTkdTLCBTVE9SQUdFX0tFWVMgfSBmcm9tICcuLi8uLi9zcmMvdXRpbHMvY29uc3RhbnRzJztcblxuLy8gSGVscGVyOiBmbGF0dGVuIGNoaWxkcmVuIGFycmF5IG9yIHJldHVybiBzdHJpbmdcbmNvbnN0IGZsYXR0ZW5DaGlsZHJlbiA9IChjaGlsZHJlbikgPT5cbiAgQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlbi5qb2luKCcnKSA6IGNoaWxkcmVuO1xuXG5jb25zdCBUZXN0Q29tcG9uZW50ID0gKCkgPT4ge1xuICBjb25zdCB7XG4gICAgc2V0dGluZ3MsXG4gICAgaXNMb2FkaW5nLFxuICAgIHVwZGF0ZVNldHRpbmcsXG4gICAgdXBkYXRlU2V0dGluZ3MsXG4gICAgcmVzZXRTZXR0aW5ncyxcbiAgICBhcmVOb3RpZmljYXRpb25zRW5hYmxlZCxcbiAgICBnZXREYWlseUdvYWwsXG4gICAgc2V0RGFpbHlHb2FsLFxuICB9ID0gUmVhY3QudXNlQ29udGV4dChTZXR0aW5nc0NvbnRleHQpO1xuXG4gIGlmIChpc0xvYWRpbmcpIHtcbiAgICByZXR1cm4gPFRleHQgdGVzdElEPVwibG9hZGluZy1zdGF0dXNcIj5Mb2FkaW5nLi4uPC9UZXh0PjtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxUZXh0IHRlc3RJRD1cIm5vdGlmaWNhdGlvbnMtZW5hYmxlZFwiPk5vdGlmaWNhdGlvbnM6IHtzZXR0aW5ncy5ub3RpZmljYXRpb25zID8gJ09uJyA6ICdPZmYnfTwvVGV4dD5cbiAgICAgIDxUZXh0IHRlc3RJRD1cImRhaWx5LWdvYWxcIj5EYWlseSBHb2FsOiB7c2V0dGluZ3MuZGFpbHlHb2FsfSBtaW51dGVzPC9UZXh0PlxuICAgICAgPFRleHQgdGVzdElEPVwidGhlbWVcIj5UaGVtZToge3NldHRpbmdzLnRoZW1lfTwvVGV4dD5cbiAgICAgIDxUZXh0IHRlc3RJRD1cImFyZS1ub3RpZmljYXRpb25zLWVuYWJsZWQtZnVuY1wiPkZ1bmMgTm90aWZpY2F0aW9uczoge2FyZU5vdGlmaWNhdGlvbnNFbmFibGVkKCkgPyAnT24nIDogJ09mZid9PC9UZXh0PlxuICAgICAgPFRleHQgdGVzdElEPVwiZ2V0LWRhaWx5LWdvYWwtZnVuY1wiPkZ1bmMgRGFpbHkgR29hbDoge2dldERhaWx5R29hbCgpfSBtaW51dGVzPC9UZXh0PlxuXG4gICAgICA8QnV0dG9uIHRpdGxlPVwiVG9nZ2xlIE5vdGlmaWNhdGlvbnNcIiBvblByZXNzPXsoKSA9PiB1cGRhdGVTZXR0aW5nKCdub3RpZmljYXRpb25zJywgIXNldHRpbmdzLm5vdGlmaWNhdGlvbnMpfSAvPlxuICAgICAgPEJ1dHRvbiB0aXRsZT1cIlNldCBEYWlseSBHb2FsIDYwXCIgb25QcmVzcz17KCkgPT4gc2V0RGFpbHlHb2FsKDYwKX0gLz5cbiAgICAgIDxCdXR0b24gdGl0bGU9XCJTZXQgRGFpbHkgR29hbCA1XCIgb25QcmVzcz17KCkgPT4gc2V0RGFpbHlHb2FsKDUpfSAvPlxuICAgICAgPEJ1dHRvbiB0aXRsZT1cIlNldCBEYWlseSBHb2FsIDE1MFwiIG9uUHJlc3M9eygpID0+IHNldERhaWx5R29hbCgxNTApfSAvPlxuICAgICAgPEJ1dHRvbiB0aXRsZT1cIlVwZGF0ZSBUaGVtZSB0byBEYXJrXCIgb25QcmVzcz17KCkgPT4gdXBkYXRlU2V0dGluZygndGhlbWUnLCAnZGFyaycpfSAvPlxuICAgICAgPEJ1dHRvbiB0aXRsZT1cIlVwZGF0ZSBNdWx0aXBsZVwiIG9uUHJlc3M9eygpID0+IHVwZGF0ZVNldHRpbmdzKHsgbm90aWZpY2F0aW9uczogZmFsc2UsIGRhaWx5R29hbDogNDUgfSl9IC8+XG4gICAgICA8QnV0dG9uIHRpdGxlPVwiUmVzZXQgU2V0dGluZ3NcIiBvblByZXNzPXtyZXNldFNldHRpbmdzfSAvPlxuICAgICAgPEJ1dHRvbiB0aXRsZT1cIlVwZGF0ZSBJbnZhbGlkIFNldHRpbmdcIiBvblByZXNzPXsoKSA9PiB1cGRhdGVTZXR0aW5nKCdpbnZhbGlkS2V5JywgJ3ZhbHVlJyl9IC8+XG4gICAgPC8+XG4gICk7XG59O1xuXG5kZXNjcmliZSgnU2V0dGluZ3NDb250ZXh0JywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICBnZXREYXRhLm1vY2tSZXNvbHZlZFZhbHVlKG51bGwpO1xuICB9KTtcblxuICBpdCgnbG9hZHMgZGVmYXVsdCBzZXR0aW5ncyBpZiBubyBzYXZlZCBzZXR0aW5ncyBhcmUgZm91bmQnLCBhc3luYyAoKSA9PiB7XG4gICAgcmVuZGVyKFxuICAgICAgPFNldHRpbmdzUHJvdmlkZXI+XG4gICAgICAgIDxUZXN0Q29tcG9uZW50IC8+XG4gICAgICA8L1NldHRpbmdzUHJvdmlkZXI+XG4gICAgKTtcblxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ2xvYWRpbmctc3RhdHVzJykpLnRvQmVUcnV0aHkoKTtcblxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAvLyBXYWl0IGZvciB1c2VFZmZlY3QgbG9hZFxuICAgIH0pO1xuXG4gICAgZXhwZWN0KHNjcmVlbi5xdWVyeUJ5VGVzdElkKCdsb2FkaW5nLXN0YXR1cycpKS50b0JlTnVsbCgpO1xuICAgIGV4cGVjdChmbGF0dGVuQ2hpbGRyZW4oc2NyZWVuLmdldEJ5VGVzdElkKCdub3RpZmljYXRpb25zLWVuYWJsZWQnKS5wcm9wcy5jaGlsZHJlbikpLnRvQmUoJ05vdGlmaWNhdGlvbnM6IE9uJyk7XG4gICAgZXhwZWN0KGZsYXR0ZW5DaGlsZHJlbihzY3JlZW4uZ2V0QnlUZXN0SWQoJ2RhaWx5LWdvYWwnKS5wcm9wcy5jaGlsZHJlbikpLnRvQmUoJ0RhaWx5IEdvYWw6IDMwIG1pbnV0ZXMnKTtcbiAgICBleHBlY3QoZmxhdHRlbkNoaWxkcmVuKHNjcmVlbi5nZXRCeVRlc3RJZCgndGhlbWUnKS5wcm9wcy5jaGlsZHJlbikpLnRvQmUoJ1RoZW1lOiBsaWdodCcpO1xuICAgIGV4cGVjdChnZXREYXRhKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChTVE9SQUdFX0tFWVMuVVNFUl9TRVRUSU5HUyk7XG4gICAgZXhwZWN0KHN0b3JlRGF0YSkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ2xvYWRzIHNhdmVkIHNldHRpbmdzIGZyb20gc3RvcmFnZScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBzYXZlZFNldHRpbmdzID0geyBub3RpZmljYXRpb25zOiBmYWxzZSwgZGFpbHlHb2FsOiA2MCwgdGhlbWU6ICdkYXJrJyB9O1xuICAgIGdldERhdGEubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHNhdmVkU2V0dGluZ3MpO1xuXG4gICAgcmVuZGVyKFxuICAgICAgPFNldHRpbmdzUHJvdmlkZXI+XG4gICAgICAgIDxUZXN0Q29tcG9uZW50IC8+XG4gICAgICA8L1NldHRpbmdzUHJvdmlkZXI+XG4gICAgKTtcblxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7fSk7XG5cbiAgICBleHBlY3QoZmxhdHRlbkNoaWxkcmVuKHNjcmVlbi5nZXRCeVRlc3RJZCgnbm90aWZpY2F0aW9ucy1lbmFibGVkJykucHJvcHMuY2hpbGRyZW4pKS50b0JlKCdOb3RpZmljYXRpb25zOiBPZmYnKTtcbiAgICBleHBlY3QoZmxhdHRlbkNoaWxkcmVuKHNjcmVlbi5nZXRCeVRlc3RJZCgnZGFpbHktZ29hbCcpLnByb3BzLmNoaWxkcmVuKSkudG9CZSgnRGFpbHkgR29hbDogNjAgbWludXRlcycpO1xuICAgIGV4cGVjdChmbGF0dGVuQ2hpbGRyZW4oc2NyZWVuLmdldEJ5VGVzdElkKCd0aGVtZScpLnByb3BzLmNoaWxkcmVuKSkudG9CZSgnVGhlbWU6IGRhcmsnKTtcbiAgfSk7XG5cbiAgaXQoJ3VwZGF0ZXMgYSBzaW5nbGUgc2V0dGluZyBhbmQgc2F2ZXMgaXQnLCBhc3luYyAoKSA9PiB7XG4gICAgcmVuZGVyKFxuICAgICAgPFNldHRpbmdzUHJvdmlkZXI+XG4gICAgICAgIDxUZXN0Q29tcG9uZW50IC8+XG4gICAgICA8L1NldHRpbmdzUHJvdmlkZXI+XG4gICAgKTtcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge30pO1xuXG4gICAgZmlyZUV2ZW50LnByZXNzKHNjcmVlbi5nZXRCeVRleHQoJ1RvZ2dsZSBOb3RpZmljYXRpb25zJykpO1xuICAgIGV4cGVjdChmbGF0dGVuQ2hpbGRyZW4oc2NyZWVuLmdldEJ5VGVzdElkKCdub3RpZmljYXRpb25zLWVuYWJsZWQnKS5wcm9wcy5jaGlsZHJlbikpLnRvQmUoJ05vdGlmaWNhdGlvbnM6IE9mZicpO1xuICAgIGV4cGVjdChzdG9yZURhdGEpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFNUT1JBR0VfS0VZUy5VU0VSX1NFVFRJTkdTLCB7IC4uLkRFRkFVTFRfU0VUVElOR1MsIG5vdGlmaWNhdGlvbnM6IGZhbHNlIH0pO1xuXG4gICAgZmlyZUV2ZW50LnByZXNzKHNjcmVlbi5nZXRCeVRleHQoJ1VwZGF0ZSBUaGVtZSB0byBEYXJrJykpO1xuICAgIGV4cGVjdChmbGF0dGVuQ2hpbGRyZW4oc2NyZWVuLmdldEJ5VGVzdElkKCd0aGVtZScpLnByb3BzLmNoaWxkcmVuKSkudG9CZSgnVGhlbWU6IGRhcmsnKTtcbiAgICBleHBlY3Qoc3RvcmVEYXRhKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChTVE9SQUdFX0tFWVMuVVNFUl9TRVRUSU5HUywgeyAuLi5ERUZBVUxUX1NFVFRJTkdTLCBub3RpZmljYXRpb25zOiBmYWxzZSwgdGhlbWU6ICdkYXJrJyB9KTtcbiAgfSk7XG5cbiAgaXQoJ3VwZGF0ZXMgbXVsdGlwbGUgc2V0dGluZ3MgYW5kIHNhdmVzIHRoZW0nLCBhc3luYyAoKSA9PiB7XG4gICAgcmVuZGVyKFxuICAgICAgPFNldHRpbmdzUHJvdmlkZXI+XG4gICAgICAgIDxUZXN0Q29tcG9uZW50IC8+XG4gICAgICA8L1NldHRpbmdzUHJvdmlkZXI+XG4gICAgKTtcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge30pO1xuXG4gICAgZmlyZUV2ZW50LnByZXNzKHNjcmVlbi5nZXRCeVRleHQoJ1VwZGF0ZSBNdWx0aXBsZScpKTtcbiAgICBleHBlY3QoZmxhdHRlbkNoaWxkcmVuKHNjcmVlbi5nZXRCeVRlc3RJZCgnbm90aWZpY2F0aW9ucy1lbmFibGVkJykucHJvcHMuY2hpbGRyZW4pKS50b0JlKCdOb3RpZmljYXRpb25zOiBPZmYnKTtcbiAgICBleHBlY3QoZmxhdHRlbkNoaWxkcmVuKHNjcmVlbi5nZXRCeVRlc3RJZCgnZGFpbHktZ29hbCcpLnByb3BzLmNoaWxkcmVuKSkudG9CZSgnRGFpbHkgR29hbDogNDUgbWludXRlcycpO1xuICAgIGV4cGVjdChzdG9yZURhdGEpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFNUT1JBR0VfS0VZUy5VU0VSX1NFVFRJTkdTLCB7IC4uLkRFRkFVTFRfU0VUVElOR1MsIG5vdGlmaWNhdGlvbnM6IGZhbHNlLCBkYWlseUdvYWw6IDQ1IH0pO1xuICB9KTtcblxuICBpdCgncmVzZXRzIHNldHRpbmdzIHRvIGRlZmF1bHQgYW5kIHNhdmVzJywgYXN5bmMgKCkgPT4ge1xuICAgIGdldERhdGEubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHsgbm90aWZpY2F0aW9uczogZmFsc2UsIGRhaWx5R29hbDogNjAsIHRoZW1lOiAnZGFyaycgfSk7XG4gICAgcmVuZGVyKFxuICAgICAgPFNldHRpbmdzUHJvdmlkZXI+XG4gICAgICAgIDxUZXN0Q29tcG9uZW50IC8+XG4gICAgICA8L1NldHRpbmdzUHJvdmlkZXI+XG4gICAgKTtcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge30pO1xuXG4gICAgZXhwZWN0KGZsYXR0ZW5DaGlsZHJlbihzY3JlZW4uZ2V0QnlUZXN0SWQoJ25vdGlmaWNhdGlvbnMtZW5hYmxlZCcpLnByb3BzLmNoaWxkcmVuKSkudG9CZSgnTm90aWZpY2F0aW9uczogT2ZmJyk7XG5cbiAgICBmaXJlRXZlbnQucHJlc3Moc2NyZWVuLmdldEJ5VGV4dCgnUmVzZXQgU2V0dGluZ3MnKSk7XG4gICAgZXhwZWN0KGZsYXR0ZW5DaGlsZHJlbihzY3JlZW4uZ2V0QnlUZXN0SWQoJ25vdGlmaWNhdGlvbnMtZW5hYmxlZCcpLnByb3BzLmNoaWxkcmVuKSkudG9CZSgnTm90aWZpY2F0aW9uczogT24nKTtcbiAgICBleHBlY3QoZmxhdHRlbkNoaWxkcmVuKHNjcmVlbi5nZXRCeVRlc3RJZCgnZGFpbHktZ29hbCcpLnByb3BzLmNoaWxkcmVuKSkudG9CZSgnRGFpbHkgR29hbDogMzAgbWludXRlcycpO1xuICAgIGV4cGVjdChzdG9yZURhdGEpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFNUT1JBR0VfS0VZUy5VU0VSX1NFVFRJTkdTLCBERUZBVUxUX1NFVFRJTkdTKTtcbiAgfSk7XG5cbiAgaXQoJ2FyZU5vdGlmaWNhdGlvbnNFbmFibGVkIHJldHVybnMgY29ycmVjdCB2YWx1ZScsIGFzeW5jICgpID0+IHtcbiAgICByZW5kZXIoXG4gICAgICA8U2V0dGluZ3NQcm92aWRlcj5cbiAgICAgICAgPFRlc3RDb21wb25lbnQgLz5cbiAgICAgIDwvU2V0dGluZ3NQcm92aWRlcj5cbiAgICApO1xuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7fSk7XG5cbiAgICBleHBlY3QoZmxhdHRlbkNoaWxkcmVuKHNjcmVlbi5nZXRCeVRlc3RJZCgnYXJlLW5vdGlmaWNhdGlvbnMtZW5hYmxlZC1mdW5jJykucHJvcHMuY2hpbGRyZW4pKS50b0JlKCdGdW5jIE5vdGlmaWNhdGlvbnM6IE9uJyk7XG4gICAgZmlyZUV2ZW50LnByZXNzKHNjcmVlbi5nZXRCeVRleHQoJ1RvZ2dsZSBOb3RpZmljYXRpb25zJykpO1xuICAgIGV4cGVjdChmbGF0dGVuQ2hpbGRyZW4oc2NyZWVuLmdldEJ5VGVzdElkKCdhcmUtbm90aWZpY2F0aW9ucy1lbmFibGVkLWZ1bmMnKS5wcm9wcy5jaGlsZHJlbikpLnRvQmUoJ0Z1bmMgTm90aWZpY2F0aW9uczogT2ZmJyk7XG4gIH0pO1xuXG4gIGl0KCdnZXREYWlseUdvYWwgcmV0dXJucyBjb3JyZWN0IHZhbHVlJywgYXN5bmMgKCkgPT4ge1xuICAgIHJlbmRlcihcbiAgICAgIDxTZXR0aW5nc1Byb3ZpZGVyPlxuICAgICAgICA8VGVzdENvbXBvbmVudCAvPlxuICAgICAgPC9TZXR0aW5nc1Byb3ZpZGVyPlxuICAgICk7XG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHt9KTtcblxuICAgIGV4cGVjdChmbGF0dGVuQ2hpbGRyZW4oc2NyZWVuLmdldEJ5VGVzdElkKCdnZXQtZGFpbHktZ29hbC1mdW5jJykucHJvcHMuY2hpbGRyZW4pKS50b0JlKCdGdW5jIERhaWx5IEdvYWw6IDMwIG1pbnV0ZXMnKTtcbiAgICBmaXJlRXZlbnQucHJlc3Moc2NyZWVuLmdldEJ5VGV4dCgnU2V0IERhaWx5IEdvYWwgNjAnKSk7XG4gICAgZXhwZWN0KGZsYXR0ZW5DaGlsZHJlbihzY3JlZW4uZ2V0QnlUZXN0SWQoJ2dldC1kYWlseS1nb2FsLWZ1bmMnKS5wcm9wcy5jaGlsZHJlbikpLnRvQmUoJ0Z1bmMgRGFpbHkgR29hbDogNjAgbWludXRlcycpO1xuICB9KTtcblxuICBpdCgnc2V0RGFpbHlHb2FsIGNsYW1wcyB2YWx1ZXMgYmV0d2VlbiAxIGFuZCAxMjAnLCBhc3luYyAoKSA9PiB7XG4gICAgcmVuZGVyKFxuICAgICAgPFNldHRpbmdzUHJvdmlkZXI+XG4gICAgICAgIDxUZXN0Q29tcG9uZW50IC8+XG4gICAgICA8L1NldHRpbmdzUHJvdmlkZXI+XG4gICAgKTtcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge30pO1xuXG4gICAgZmlyZUV2ZW50LnByZXNzKHNjcmVlbi5nZXRCeVRleHQoJ1NldCBEYWlseSBHb2FsIDUnKSk7XG4gICAgZXhwZWN0KGZsYXR0ZW5DaGlsZHJlbihzY3JlZW4uZ2V0QnlUZXN0SWQoJ2RhaWx5LWdvYWwnKS5wcm9wcy5jaGlsZHJlbikpLnRvQmUoJ0RhaWx5IEdvYWw6IDUgbWludXRlcycpO1xuXG4gICAgZmlyZUV2ZW50LnByZXNzKHNjcmVlbi5nZXRCeVRleHQoJ1NldCBEYWlseSBHb2FsIDE1MCcpKTtcbiAgICBleHBlY3QoZmxhdHRlbkNoaWxkcmVuKHNjcmVlbi5nZXRCeVRlc3RJZCgnZGFpbHktZ29hbCcpLnByb3BzLmNoaWxkcmVuKSkudG9CZSgnRGFpbHkgR29hbDogMTIwIG1pbnV0ZXMnKTtcbiAgfSk7XG5cbiAgaXQoJ2RvZXMgbm90IHVwZGF0ZSBzZXR0aW5nIGlmIGtleSBpcyBpbnZhbGlkJywgYXN5bmMgKCkgPT4ge1xuICAgIHJlbmRlcihcbiAgICAgIDxTZXR0aW5nc1Byb3ZpZGVyPlxuICAgICAgICA8VGVzdENvbXBvbmVudCAvPlxuICAgICAgPC9TZXR0aW5nc1Byb3ZpZGVyPlxuICAgICk7XG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHt9KTtcblxuICAgIGZpcmVFdmVudC5wcmVzcyhzY3JlZW4uZ2V0QnlUZXh0KCdVcGRhdGUgSW52YWxpZCBTZXR0aW5nJykpO1xuXG4gICAgZXhwZWN0KGZsYXR0ZW5DaGlsZHJlbihzY3JlZW4uZ2V0QnlUZXN0SWQoJ25vdGlmaWNhdGlvbnMtZW5hYmxlZCcpLnByb3BzLmNoaWxkcmVuKSkudG9CZSgnTm90aWZpY2F0aW9uczogT24nKTtcbiAgICBleHBlY3QoZmxhdHRlbkNoaWxkcmVuKHNjcmVlbi5nZXRCeVRlc3RJZCgnZGFpbHktZ29hbCcpLnByb3BzLmNoaWxkcmVuKSkudG9CZSgnRGFpbHkgR29hbDogMzAgbWludXRlcycpO1xuICAgIGV4cGVjdChmbGF0dGVuQ2hpbGRyZW4oc2NyZWVuLmdldEJ5VGVzdElkKCd0aGVtZScpLnByb3BzLmNoaWxkcmVuKSkudG9CZSgnVGhlbWU6IGxpZ2h0Jyk7XG5cbiAgICAvLyBzdG9yZURhdGEgc2hvdWxkIG5vdCBiZSBjYWxsZWQgYWdhaW4gZm9yIGludmFsaWQga2V5IHVwZGF0ZVxuICAgIC8vIE9ubHkgaW5pdGlhbCBsb2FkaW5nIGlzIGV4cGVjdGVkIHRvIG5vdCBjYWxsIHN0b3JlRGF0YSBlaXRoZXJcbiAgICBleHBlY3Qoc3RvcmVEYXRhKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMCk7XG4gIH0pO1xu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