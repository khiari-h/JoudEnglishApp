{"version":3,"names":["_errorCorrectionB2Full","_interopRequireDefault","require","_errorCorrectionB2Identify","_errorCorrectionB2MultipleChoice","cov_29gsil21a3","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","_coverageSchema","coverage","actualCoverage","allExercises","concat","_toConsumableArray2","default","errorCorrectionB2Full","errorCorrectionB2Identify","errorCorrectionB2MultipleChoice","sort","a","categoryId","typeOrder","errorCorrectionB2","level","totalExercises","length","statistics","full","identify","multiple_choice","byCategory","count","categories","id","description","exerciseCount","difficulty","color","topics","commonErrors","skillsTargeted","exercises","getExercisesByCategory","filter","exercise","getExercisesByType","getExercisesByCategoryAndType","getExercisesBySkill","skill","category","find","cat","includes","getAdvancedExercises","wordCount","text","split","errorCount","errorPositions","getFormalRegisterExercises","explanation","toLowerCase","getAcademicPreparationExercises","academicKeywords","some","keyword","hint","validateStructure","requiredFields","validTypes","every","hasRequiredFields","field","Object","prototype","hasOwnProperty","call","hasValidType","hasValidCategory","hasMinimumComplexity","hasAdvancedVocabulary","hasTypeSpecificFields","choices","Array","isArray","correctChoiceIndex","getSummary","totalErrorPositions","ex","reduce","sum","totalTextLength","complexExercises","formalExercises","focus","progression","distribution","complexity","averageTextLength","Math","round","averageWordCount","averageErrorsPerExercise","complexExercisesPercentage","formalRegisterFocus","_default","exports"],"sources":["index.js"],"sourcesContent":["// src/data/exercises/errorCorrection/B2/index.js\r\n\r\nimport errorCorrectionB2Full from './categories/errorCorrectionB2Full';\r\nimport errorCorrectionB2Identify from './categories/errorCorrectionB2Identify';\r\nimport errorCorrectionB2MultipleChoice from './categories/errorCorrectionB2MultipleChoice';\r\n\r\n// Combine all exercises from the 3 files\r\nconst allExercises = [\r\n  ...errorCorrectionB2Full,\r\n  ...errorCorrectionB2Identify,\r\n  ...errorCorrectionB2MultipleChoice\r\n];\r\n\r\n// Sort exercises by categoryId to maintain logical order\r\nallExercises.sort((a, b) => {\r\n  if (a.categoryId !== b.categoryId) {\r\n    return a.categoryId - b.categoryId;\r\n  }\r\n  // Within same category, order by type: full, identify, multiple_choice\r\n  const typeOrder = { 'full': 1, 'identify': 2, 'multiple_choice': 3 };\r\n  return typeOrder[a.type] - typeOrder[b.type];\r\n});\r\n\r\nconst errorCorrectionB2 = {\r\n  level: \"B2\",\r\n  totalExercises: allExercises.length,\r\n\r\n  // Statistics by type\r\n  statistics: {\r\n    full: errorCorrectionB2Full.length,\r\n    identify: errorCorrectionB2Identify.length,\r\n    multiple_choice: errorCorrectionB2MultipleChoice.length,\r\n    byCategory: {\r\n      1: { name: \"Advanced Conditionals\", count: 8 },        // 3 full + 3 identify + 2 multiple_choice\r\n      2: { name: \"Subjunctive & Formal Grammar\", count: 8 }, // 3 full + 3 identify + 2 multiple_choice\r\n      3: { name: \"Advanced Passive & Causative\", count: 9 }, // 3 full + 4 identify + 2 multiple_choice\r\n      4: { name: \"Discourse & Cohesion\", count: 9 },         // 3 full + 4 identify + 2 multiple_choice\r\n      5: { name: \"Register & Style\", count: 8 }              // 2 full + 3 identify + 3 multiple_choice\r\n    }\r\n  },\r\n\r\n  // Categories metadata for B2 advanced level\r\n  categories: [\r\n    {\r\n      id: 1,\r\n      name: \"Advanced Conditionals\",\r\n      description: \"Mixed conditionals, complex hypothetical situations, advanced conditional patterns\",\r\n      exerciseCount: 8,\r\n      difficulty: \"Advanced\",\r\n      color: \"#3b82f6\",\r\n      topics: [\"mixed conditionals\", \"complex hypotheticals\", \"conditional with modals\", \"implied conditionals\", \"formal conditional conjunctions\"],\r\n      commonErrors: [\"would have in if-clauses\", \"tense mixing\", \"inappropriate conjunctions\"],\r\n      skillsTargeted: [\"hypothetical reasoning\", \"complex time relationships\", \"formal register\"]\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"Subjunctive & Formal Grammar\",\r\n      description: \"Subjunctive mood, formal constructions, advanced verb patterns\",\r\n      exerciseCount: 8,\r\n      difficulty: \"Advanced\", \r\n      color: \"#10b981\",\r\n      topics: [\"subjunctive mood\", \"formal registers\", \"complex verb patterns\", \"inversion\", \"mandative subjunctive\"],\r\n      commonErrors: [\"indicative instead of subjunctive\", \"incorrect formal inversions\", \"should instead of subjunctive\"],\r\n      skillsTargeted: [\"formal register awareness\", \"advanced grammar structures\", \"academic writing\"]\r\n    },\r\n    {\r\n      id: 3,\r\n      name: \"Advanced Passive & Causative\",\r\n      description: \"Complex passive constructions, causative forms, advanced passive patterns\",\r\n      exerciseCount: 9,\r\n      difficulty: \"Advanced\",\r\n      color: \"#f59e0b\",\r\n      topics: [\"complex passives\", \"causative have/get\", \"passive reporting\", \"perfect infinitives\", \"passive with modals\"],\r\n      commonErrors: [\"incorrect causative structures\", \"wrong infinitive forms\", \"missing auxiliaries\"],\r\n      skillsTargeted: [\"complex sentence transformation\", \"causative understanding\", \"passive mastery\"]\r\n    },\r\n    {\r\n      id: 4,\r\n      name: \"Discourse & Cohesion\",\r\n      description: \"Advanced linking devices, discourse markers, text cohesion\",\r\n      exerciseCount: 9,\r\n      difficulty: \"Advanced\",\r\n      color: \"#8b5cf6\",\r\n      topics: [\"discourse markers\", \"cohesive devices\", \"substitution\", \"ellipsis\", \"advanced connectors\"],\r\n      commonErrors: [\"inappropriate connectors\", \"wordiness\", \"repetition\", \"informal markers in formal text\"],\r\n      skillsTargeted: [\"text organization\", \"coherence\", \"advanced writing skills\", \"academic discourse\"]\r\n    },\r\n    {\r\n      id: 5,\r\n      name: \"Register & Style\",\r\n      description: \"Formal vs informal register, academic writing, stylistic appropriateness\",\r\n      exerciseCount: 8,\r\n      difficulty: \"Advanced\",\r\n      color: \"#ef4444\",\r\n      topics: [\"register awareness\", \"academic style\", \"formal language\", \"appropriateness\", \"professional communication\"],\r\n      commonErrors: [\"mixed registers\", \"inappropriate informality\", \"lack of precision\", \"colloquial expressions\"],\r\n      skillsTargeted: [\"register sensitivity\", \"professional communication\", \"academic writing\", \"stylistic awareness\"]\r\n    },\r\n  ],\r\n\r\n  // All exercises combined and sorted\r\n  exercises: allExercises,\r\n\r\n  // Advanced helper methods for B2 level\r\n  getExercisesByCategory: (categoryId) => {\r\n    return allExercises.filter(exercise => exercise.categoryId === categoryId);\r\n  },\r\n\r\n  getExercisesByType: (type) => {\r\n    return allExercises.filter(exercise => exercise.type === type);\r\n  },\r\n\r\n  getExercisesByCategoryAndType: (categoryId, type) => {\r\n    return allExercises.filter(exercise => \r\n      exercise.categoryId === categoryId && exercise.type === type\r\n    );\r\n  },\r\n\r\n  // Get exercises by specific skills\r\n  getExercisesBySkill: (skill) => {\r\n    return allExercises.filter(exercise => {\r\n      const category = errorCorrectionB2.categories.find(cat => cat.id === exercise.categoryId);\r\n      return category?.skillsTargeted.includes(skill);\r\n    });\r\n  },\r\n\r\n  // Get exercises by difficulty within B2\r\n  getAdvancedExercises: () => {\r\n    return allExercises.filter(exercise => {\r\n      const wordCount = exercise.text.split(' ').length;\r\n      const errorCount = exercise.errorPositions ? exercise.errorPositions.length : 1;\r\n      // B2 advanced: longer texts (10+ words) or multiple errors (3+)\r\n      return wordCount >= 10 || errorCount >= 3;\r\n    });\r\n  },\r\n\r\n  // Get exercises focusing on formal register\r\n  getFormalRegisterExercises: () => {\r\n    return allExercises.filter(exercise => {\r\n      return exercise.categoryId === 2 || exercise.categoryId === 5 || \r\n             exercise.explanation.toLowerCase().includes('formal');\r\n    });\r\n  },\r\n\r\n  // Get exercises for academic preparation\r\n  getAcademicPreparationExercises: () => {\r\n    return allExercises.filter(exercise => {\r\n      const academicKeywords = ['academic', 'formal', 'discourse', 'register', 'subjunctive'];\r\n      return academicKeywords.some(keyword => \r\n        exercise.explanation.toLowerCase().includes(keyword) ||\r\n        exercise.hint.toLowerCase().includes(keyword)\r\n      );\r\n    });\r\n  },\r\n\r\n  // Enhanced validation for B2 level\r\n  validateStructure: () => {\r\n    const requiredFields = ['categoryId', 'type', 'text', 'correctedText', 'hint', 'explanation'];\r\n    const validTypes = ['full', 'identify', 'multiple_choice'];\r\n\r\n    return allExercises.every(exercise => {\r\n      // Check required fields\r\n      const hasRequiredFields = requiredFields.every(field => \r\n        Object.prototype.hasOwnProperty.call(exercise, field) && exercise[field] !== undefined\r\n      );\r\n\r\n      // Check valid type\r\n      const hasValidType = validTypes.includes(exercise.type);\r\n\r\n      // Check valid category (1-5 for B2)\r\n      const hasValidCategory = exercise.categoryId >= 1 && exercise.categoryId <= 5;\r\n\r\n      // Check B2 level complexity (minimum text length and sophistication)\r\n      const hasMinimumComplexity = exercise.text.split(' ').length >= 8;\r\n      const hasAdvancedVocabulary = exercise.text.length > 50; // More sophisticated texts\r\n\r\n      // Check type-specific fields with B2 standards\r\n      let hasTypeSpecificFields = true;\r\n      if (exercise.type === 'multiple_choice') {\r\n        hasTypeSpecificFields = exercise.choices && \r\n                               Array.isArray(exercise.choices) &&\r\n                               exercise.choices.length >= 4 && // B2 should have 4 choices for complexity\r\n                               exercise.correctChoiceIndex !== undefined &&\r\n                               exercise.correctChoiceIndex >= 0 &&\r\n                               exercise.correctChoiceIndex < exercise.choices.length;\r\n      } else {\r\n        hasTypeSpecificFields = exercise.errorPositions && Array.isArray(exercise.errorPositions);\r\n      }\r\n\r\n      return hasRequiredFields && hasValidType && hasValidCategory && \r\n             hasMinimumComplexity && hasAdvancedVocabulary && hasTypeSpecificFields;\r\n    });\r\n  },\r\n\r\n  // Comprehensive B2 summary with advanced metrics\r\n  getSummary: () => {\r\n    const totalErrorPositions = allExercises\r\n      .filter(ex => ex.errorPositions)\r\n      .reduce((sum, ex) => sum + ex.errorPositions.length, 0);\r\n\r\n    const totalTextLength = allExercises.reduce((sum, ex) => sum + ex.text.length, 0);\r\n    const complexExercises = errorCorrectionB2.getAdvancedExercises().length;\r\n    const formalExercises = errorCorrectionB2.getFormalRegisterExercises().length;\r\n\r\n    return {\r\n      level: \"B2\",\r\n      totalExercises: allExercises.length,\r\n      categories: errorCorrectionB2.categories.length,\r\n      difficulty: \"Advanced\",\r\n      focus: \"Complex grammatical structures, register awareness, and discourse competence\",\r\n      progression: \"Builds on B1 with mixed conditionals, subjunctive, advanced passive, discourse markers, and register sensitivity\",\r\n      distribution: {\r\n        full: errorCorrectionB2Full.length,\r\n        identify: errorCorrectionB2Identify.length,\r\n        multiple_choice: errorCorrectionB2MultipleChoice.length\r\n      },\r\n      complexity: {\r\n        averageTextLength: Math.round(totalTextLength / allExercises.length),\r\n        averageWordCount: Math.round(allExercises.reduce((sum, ex) => sum + ex.text.split(' ').length, 0) / allExercises.length),\r\n        totalErrorPositions,\r\n        averageErrorsPerExercise: Math.round(totalErrorPositions / allExercises.filter(ex => ex.errorPositions).length * 10) / 10,\r\n        complexExercisesPercentage: Math.round((complexExercises / allExercises.length) * 100),\r\n        formalRegisterFocus: Math.round((formalExercises / allExercises.length) * 100)\r\n      },\r\n      skillsTargeted: [\r\n        \"Advanced grammatical competence\",\r\n        \"Register and style awareness\", \r\n        \"Discourse organization\",\r\n        \"Academic writing preparation\",\r\n        \"Professional communication\"\r\n      ]\r\n    };\r\n  }\r\n};\r\n\r\n// Validate structure on export\r\nif (!errorCorrectionB2.validateStructure()) {\r\n  // empty: structure invalid, handle if needed\r\n} else {\r\n  // empty: structure valid, nothing to do\r\n}\r\n\r\nexport default errorCorrectionB2;\r\n"],"mappings":"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","ignoreList":[]}