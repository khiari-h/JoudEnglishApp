74a16e9e2fe071a430f0dd9b30fbb64f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _ProgressCard = _interopRequireDefault(require("../../../../components/ui/ProgressCard"));
var _conversationStats = require("../../../../utils/conversation/conversationStats");
var _jsxRuntime = require("react/jsx-runtime");
var ConversationProgress = function ConversationProgress(_ref) {
  var _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? "#5E60CE" : _ref$levelColor,
    _ref$conversationData = _ref.conversationData,
    conversationData = _ref$conversationData === void 0 ? [] : _ref$conversationData,
    _ref$completedScenari = _ref.completedScenarios,
    completedScenarios = _ref$completedScenari === void 0 ? {} : _ref$completedScenari,
    _ref$conversationHist = _ref.conversationHistory,
    conversationHistory = _ref$conversationHist === void 0 ? {} : _ref$conversationHist,
    _ref$expanded = _ref.expanded,
    expanded = _ref$expanded === void 0 ? false : _ref$expanded,
    onToggleExpand = _ref.onToggleExpand,
    onScenarioPress = _ref.onScenarioPress;
  var statsData = (0, _react.useMemo)(function () {
    var totalScenarios = (0, _conversationStats.calculateTotalScenarios)(conversationData);
    var completedScenariosCount = (0, _conversationStats.calculateCompletedScenarios)(completedScenarios);
    var totalStepsCount = (0, _conversationStats.calculateTotalSteps)(conversationData);
    var completedStepsCount = (0, _conversationStats.calculateCompletedSteps)(conversationHistory);
    return {
      totalScenarios: totalScenarios,
      completedScenariosCount: completedScenariosCount,
      totalStepsCount: totalStepsCount,
      completedStepsCount: completedStepsCount,
      completionProgress: totalStepsCount > 0 ? Math.round(completedStepsCount / totalStepsCount * 100) : 0,
      scenarioProgressData: conversationData.map(function (scenario, index) {
        var _conversationHistory$, _scenario$steps, _scenario$steps2, _conversationHistory$2;
        return {
          title: scenario.title || `Scénario ${index + 1}`,
          completedSteps: ((_conversationHistory$ = conversationHistory[scenario.id]) == null ? void 0 : _conversationHistory$.length) || 0,
          totalSteps: ((_scenario$steps = scenario.steps) == null ? void 0 : _scenario$steps.length) || 1,
          progress: ((_scenario$steps2 = scenario.steps) == null ? void 0 : _scenario$steps2.length) > 0 ? Math.round((((_conversationHistory$2 = conversationHistory[scenario.id]) == null ? void 0 : _conversationHistory$2.length) || 0) / scenario.steps.length * 100) : 0
        };
      })
    };
  }, [conversationData, completedScenarios, conversationHistory]);
  var formattedScenarioData = (0, _react.useMemo)(function () {
    return statsData.scenarioProgressData.map(function (scenario) {
      return {
        title: scenario.title,
        completed: scenario.completedSteps,
        total: scenario.totalSteps,
        progress: scenario.progress
      };
    });
  }, [statsData.scenarioProgressData]);
  return (0, _jsxRuntime.jsx)(_ProgressCard.default, {
    title: "Progression",
    subtitle: `${statsData.completedScenariosCount}/${statsData.totalScenarios} scénarios • ${statsData.completedStepsCount}/${statsData.totalStepsCount} étapes`,
    progress: statsData.completionProgress,
    completed: statsData.completedStepsCount,
    total: statsData.totalStepsCount,
    unit: "\xE9tapes",
    levelColor: levelColor,
    expandable: true,
    expanded: expanded,
    onToggleExpand: onToggleExpand,
    categoryData: formattedScenarioData,
    onCategoryPress: onScenarioPress
  });
};
var _default = exports.default = ConversationProgress;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,