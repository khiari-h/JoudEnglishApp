5d6facfc1f9d123f8d2ebda686b291d5
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    setItem: jest.fn(function () {
      return Promise.resolve();
    }),
    getItem: jest.fn(function () {
      return Promise.resolve(null);
    }),
    removeItem: jest.fn(function () {
      return Promise.resolve();
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _ProgressContext = require("../../src/contexts/ProgressContext");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _constants = require("../../src/utils/constants");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var TestComponent = function TestComponent() {
  var _progress$exercises$v;
  var _useProgress = (0, _ProgressContext.useProgress)(),
    progress = _useProgress.progress,
    isLoading = _useProgress.isLoading,
    updateExerciseProgress = _useProgress.updateExerciseProgress,
    updateStats = _useProgress.updateStats,
    calculateGlobalProgress = _useProgress.calculateGlobalProgress,
    calculateLevelProgress = _useProgress.calculateLevelProgress,
    resetProgress = _useProgress.resetProgress;
  if (isLoading) {
    return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "loading-status",
      children: "Loading..."
    });
  }
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: ["\xA0 \xA0 \xA0 ", (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "global-progress",
      children: ["Global: ", calculateGlobalProgress(), "%"]
    }), "\xA0 \xA0 \xA0 ", (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "level1-progress",
      children: ["Level 1: ", calculateLevelProgress('1'), "%"]
    }), "\xA0 \xA0 \xA0 ", (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "level-bonus-progress",
      children: ["Level Bonus: ", calculateLevelProgress('bonus'), "%"]
    }), "\xA0 \xA0 \xA0 ", (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "vocab-level1-completed",
      children: ["\xA0 \xA0 \xA0 \xA0 Vocab Level 1 Completed: ", ((_progress$exercises$v = progress.exercises.vocabulary) == null || (_progress$exercises$v = _progress$exercises$v['1']) == null ? void 0 : _progress$exercises$v.completed) || 0, "\xA0 \xA0 \xA0 "]
    }), "\xA0 \xA0 \xA0 ", (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "streak",
      children: ["Streak: ", progress.stats.streak]
    }), "\xA0 \xA0 \xA0 ", (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Update Vocab Level 1",
      onPress: function onPress() {
        return updateExerciseProgress('vocabulary', '1', 50);
      }
    }), "\xA0 \xA0 \xA0 ", (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Update Streak",
      onPress: function onPress() {
        return updateStats({
          streak: 5
        });
      }
    }), "\xA0 \xA0 \xA0 ", (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Reset Progress",
      onPress: resetProgress
    }), "\xA0 \xA0 \xA0 ", (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Update Vocab Bonus",
      onPress: function onPress() {
        return updateExerciseProgress('vocabulary', 'bonus', 75);
      }
    }), "\xA0 \xA0 \xA0 ", (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Update Grammar Bonus",
      onPress: function onPress() {
        return updateExerciseProgress('grammar', 'bonus', 50);
      }
    }), "\xA0 \xA0 \xA0 ", (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Add New Exercise Type",
      onPress: function onPress() {
        return updateExerciseProgress('newType', '1', 25);
      }
    }), "\xA0 \xA0 "]
  });
};
var TestCalculationComponent = function TestCalculationComponent() {
  var _useProgress2 = (0, _ProgressContext.useProgress)(),
    calculateLevelProgress = _useProgress2.calculateLevelProgress;
  return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
    testID: "level-2-progress",
    children: calculateLevelProgress('2')
  });
};
var ComponentWithoutProvider = function ComponentWithoutProvider() {
  (0, _ProgressContext.useProgress)();
  return null;
};
describe('ProgressContext', function () {
  beforeEach(function () {
    jest.useFakeTimers();
    _asyncStorage.default.getItem.mockClear();
    _asyncStorage.default.setItem.mockClear();
    _asyncStorage.default.removeItem.mockClear();
  });
  afterEach(function () {
    jest.runOnlyPendingTimers();
    jest.useRealTimers();
  });
  it('loads initial progress from AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
    var mockProgress = Object.assign({}, (0, _ProgressContext.createInitialProgress)(), {
      levels: {
        '1': {
          completed: 25,
          total: 100
        }
      },
      exercises: {
        vocabulary: {
          '1': {
            completed: 25,
            total: 100
          }
        }
      },
      stats: {
        streak: 1
      }
    });
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(mockProgress));
    (0, _reactNative.render)((0, _jsxRuntime.jsxs)(_ProgressContext.ProgressProvider, {
      children: ["\xA0 \xA0 \xA0 \xA0 ", (0, _jsxRuntime.jsx)(TestComponent, {}), "\xA0 \xA0 \xA0 "]
    }));
    expect(_reactNative.screen.getByTestId('loading-status')).toBeTruthy();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_reactNative.screen.queryByTestId('loading-status')).toBeNull();
    var level1ProgressText = _reactNative.screen.getByTestId('level1-progress').props.children.join('');
    expect(level1ProgressText).toBe('Level 1: 25%');
    var streakDisplay = _reactNative.screen.getByTestId('streak').props.children.join('');
    expect(streakDisplay).toBe('Streak: 1');
  }));
  it('updates exercise progress and recalculates level progress', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsxs)(_ProgressContext.ProgressProvider, {
      children: ["\xA0 \xA0 \xA0 \xA0 ", (0, _jsxRuntime.jsx)(TestComponent, {}), "\xA0 \xA0 \xA0 "]
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Vocab Level 1'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var savedProgress = JSON.parse(_asyncStorage.default.setItem.mock.calls[0][1]);
    expect(savedProgress.exercises.vocabulary['1'].completed).toBe(50);
    expect(savedProgress.levels['1'].completed).toBe(6);
  }));
  it('updates progress for a new exercise type and calculates average', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsxs)(_ProgressContext.ProgressProvider, {
      children: ["\xA0 \xA0 \xA0 \xA0 ", (0, _jsxRuntime.jsx)(TestComponent, {}), "\xA0 \xA0 \xA0 "]
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Add New Exercise Type'));
    var level1Text = _reactNative.screen.getByTestId('level1-progress').props.children.join('');
    expect(level1Text).toBe('Level 1: 3%');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var savedProgress = JSON.parse(_asyncStorage.default.setItem.mock.calls[0][1]);
    expect(savedProgress.exercises.newType['1'].completed).toBe(25);
  }));
  it('updates stats and saves to AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsxs)(_ProgressContext.ProgressProvider, {
      children: ["\xA0 \xA0 \xA0 \xA0 ", (0, _jsxRuntime.jsx)(TestComponent, {}), "\xA0 \xA0 \xA0 "]
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var streakChildren = _reactNative.screen.getByTestId('streak').props.children;
    var streakText = Array.isArray(streakChildren) ? streakChildren.join('') : streakChildren;
    expect(streakText).toBe('Streak: 0');
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Streak'));
    streakChildren = _reactNative.screen.getByTestId('streak').props.children;
    streakText = Array.isArray(streakChildren) ? streakChildren.join('') : streakChildren;
    expect(streakText).toBe('Streak: 5');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_asyncStorage.default.setItem).toHaveBeenCalledTimes(1);
    var savedProgress = JSON.parse(_asyncStorage.default.setItem.mock.calls[0][1]);
    expect(savedProgress.stats.streak).toBe(5);
  }));
  it('resets progress and removes from AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsxs)(_ProgressContext.ProgressProvider, {
      children: ["\xA0 \xA0 \xA0 \xA0 ", (0, _jsxRuntime.jsx)(TestComponent, {}), "\xA0 \xA0 \xA0 "]
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Vocab Level 1'));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Streak'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_asyncStorage.default.setItem).toHaveBeenCalledTimes(1);
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Reset Progress'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield Promise.resolve();
    }));
    expect(_asyncStorage.default.removeItem).toHaveBeenCalledWith(_constants.STORAGE_KEYS.USER_PROGRESS);
    var level1Children = _reactNative.screen.getByTestId('level1-progress').props.children;
    var level1Text = Array.isArray(level1Children) ? level1Children.join('') : level1Children;
    expect(level1Text).toBe('Level 1: 0%');
    var streakChildren = _reactNative.screen.getByTestId('streak').props.children;
    var streakText = Array.isArray(streakChildren) ? streakChildren.join('') : streakChildren;
    expect(streakText).toBe('Streak: 0');
  }));
  it('calculates level progress correctly when there are no exercises for a level', (0, _asyncToGenerator2.default)(function* () {
    var mockInitialProgress = (0, _ProgressContext.createInitialProgress)();
    mockInitialProgress.exercises = {};
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(mockInitialProgress));
    (0, _reactNative.render)((0, _jsxRuntime.jsxs)(_ProgressContext.ProgressProvider, {
      children: ["\xA0 \xA0 \xA0 \xA0 ", (0, _jsxRuntime.jsx)(TestComponent, {}), "\xA0 \xA0 \xA0 "]
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var level1Text = _reactNative.screen.getByTestId('level1-progress').props.children.join('');
    expect(level1Text).toBe('Level 1: 0%');
  }));
  it('handles errors during initial loading', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockRejectedValueOnce(new Error('Mock AsyncStorage Error'));
    var consoleErrorSpy = jest.spyOn(console, 'error');
    (0, _reactNative.render)((0, _jsxRuntime.jsxs)(_ProgressContext.ProgressProvider, {
      children: ["\xA0 \xA0 \xA0 \xA0 ", (0, _jsxRuntime.jsx)(TestComponent, {}), "\xA0 \xA0 \xA0 "]
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(consoleErrorSpy).toHaveBeenCalledWith('Erreur chargement progression:', expect.any(Error));
    expect(_reactNative.screen.queryByTestId('loading-status')).toBeNull();
    var globalProgressText = _reactNative.screen.getByTestId('global-progress').props.children.join('');
    expect(globalProgressText).toBe('Global: 0%');
    consoleErrorSpy.mockRestore();
  }));
  it('handles errors during saving progress', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.setItem.mockRejectedValueOnce(new Error('Mock AsyncStorage Save Error'));
    var consoleErrorSpy = jest.spyOn(console, 'error');
    (0, _reactNative.render)((0, _jsxRuntime.jsxs)(_ProgressContext.ProgressProvider, {
      children: ["\xA0 \xA0 \xA0 \xA0 ", (0, _jsxRuntime.jsx)(TestComponent, {}), "\xA0 \xA0 \xA0 "]
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Streak'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(consoleErrorSpy).toHaveBeenCalledWith('Erreur sauvegarde progression:', expect.any(Error));
    consoleErrorSpy.mockRestore();
  }));
  it('handles error during progress reset gracefully', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.removeItem.mockRejectedValueOnce(new Error('Mock AsyncStorage removeItem Error'));
    var consoleErrorSpy = jest.spyOn(console, 'error');
    var mockProgress = Object.assign({}, (0, _ProgressContext.createInitialProgress)(), {
      stats: {
        streak: 1
      },
      levels: {
        '1': {
          completed: 50,
          total: 100
        }
      }
    });
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(mockProgress));
    (0, _reactNative.render)((0, _jsxRuntime.jsxs)(_ProgressContext.ProgressProvider, {
      children: ["\xA0 \xA0 \xA0 \xA0 ", (0, _jsxRuntime.jsx)(TestComponent, {}), "\xA0 \xA0 \xA0 "]
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_reactNative.screen.getByTestId('streak').props.children.join('')).toBe('Streak: 1');
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Reset Progress'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield Promise.resolve();
    }));
    expect(consoleErrorSpy).toHaveBeenCalledWith('Erreur reset progression:', expect.any(Error));
    var streakText = _reactNative.screen.getByTestId('streak').props.children.join('');
    expect(streakText).toBe('Streak: 1');
    consoleErrorSpy.mockRestore();
  }));
  it('throws an error if useProgress is used outside of ProgressProvider', function () {
    var originalError = console.error;
    console.error = jest.fn();
    expect(function () {
      return (0, _reactNative.render)((0, _jsxRuntime.jsx)(ComponentWithoutProvider, {}));
    }).toThrow('useProgress must be used within a ProgressProvider');
    console.error = originalError;
  });
  it('should calculate level progress as 0% when there are no exercises for that level', (0, _asyncToGenerator2.default)(function* () {
    var mockProgress = Object.assign({}, (0, _ProgressContext.createInitialProgress)(), {
      exercises: {
        vocabulary: {
          '1': {
            completed: 50,
            total: 100
          }
        }
      },
      stats: {
        streak: 1
      }
    });
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(mockProgress));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var levelBonusText = _reactNative.screen.getByTestId('level-bonus-progress').props.children.join('');
    expect(levelBonusText).toBe('Level Bonus: 0%');
  }));
  it('handles errors during saving progress gracefully', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.setItem.mockRejectedValueOnce(new Error('Mock AsyncStorage Save Error'));
    var consoleErrorSpy = jest.spyOn(console, 'error');
    (0, _reactNative.render)((0, _jsxRuntime.jsxs)(_ProgressContext.ProgressProvider, {
      children: ["\xA0 \xA0 \xA0 \xA0 ", (0, _jsxRuntime.jsx)(TestComponent, {}), "\xA0 \xA0 \xA0 "]
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Streak'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(consoleErrorSpy).toHaveBeenCalledWith('Erreur sauvegarde progression:', expect.any(Error));
    consoleErrorSpy.mockRestore();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJzZXRJdGVtIiwiamVzdCIsImZuIiwiUHJvbWlzZSIsInJlc29sdmUiLCJnZXRJdGVtIiwicmVtb3ZlSXRlbSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX3JlYWN0IiwiX3JlYWN0TmF0aXZlIiwiX3JlYWN0TmF0aXZlMiIsIl9Qcm9ncmVzc0NvbnRleHQiLCJfYXN5bmNTdG9yYWdlIiwiX2NvbnN0YW50cyIsIl9qc3hSdW50aW1lIiwiX3JlcXVpcmUiLCJUZXN0Q29tcG9uZW50IiwiX3Byb2dyZXNzJGV4ZXJjaXNlcyR2IiwiX3VzZVByb2dyZXNzIiwidXNlUHJvZ3Jlc3MiLCJwcm9ncmVzcyIsImlzTG9hZGluZyIsInVwZGF0ZUV4ZXJjaXNlUHJvZ3Jlc3MiLCJ1cGRhdGVTdGF0cyIsImNhbGN1bGF0ZUdsb2JhbFByb2dyZXNzIiwiY2FsY3VsYXRlTGV2ZWxQcm9ncmVzcyIsInJlc2V0UHJvZ3Jlc3MiLCJqc3giLCJUZXh0IiwidGVzdElEIiwiY2hpbGRyZW4iLCJqc3hzIiwiRnJhZ21lbnQiLCJleGVyY2lzZXMiLCJ2b2NhYnVsYXJ5IiwiY29tcGxldGVkIiwic3RhdHMiLCJzdHJlYWsiLCJCdXR0b24iLCJ0aXRsZSIsIm9uUHJlc3MiLCJUZXN0Q2FsY3VsYXRpb25Db21wb25lbnQiLCJfdXNlUHJvZ3Jlc3MyIiwiQ29tcG9uZW50V2l0aG91dFByb3ZpZGVyIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwidXNlRmFrZVRpbWVycyIsIkFzeW5jU3RvcmFnZSIsIm1vY2tDbGVhciIsImFmdGVyRWFjaCIsInJ1bk9ubHlQZW5kaW5nVGltZXJzIiwidXNlUmVhbFRpbWVycyIsIml0IiwiZGVmYXVsdCIsIm1vY2tQcm9ncmVzcyIsIk9iamVjdCIsImFzc2lnbiIsImNyZWF0ZUluaXRpYWxQcm9ncmVzcyIsImxldmVscyIsInRvdGFsIiwibW9ja1Jlc29sdmVkVmFsdWVPbmNlIiwiSlNPTiIsInN0cmluZ2lmeSIsInJlbmRlciIsIlByb2dyZXNzUHJvdmlkZXIiLCJleHBlY3QiLCJzY3JlZW4iLCJnZXRCeVRlc3RJZCIsInRvQmVUcnV0aHkiLCJhY3QiLCJydW5BbGxUaW1lcnMiLCJxdWVyeUJ5VGVzdElkIiwidG9CZU51bGwiLCJsZXZlbDFQcm9ncmVzc1RleHQiLCJwcm9wcyIsImpvaW4iLCJ0b0JlIiwic3RyZWFrRGlzcGxheSIsImZpcmVFdmVudCIsInByZXNzIiwiZ2V0QnlUZXh0Iiwic2F2ZWRQcm9ncmVzcyIsInBhcnNlIiwiY2FsbHMiLCJsZXZlbDFUZXh0IiwibmV3VHlwZSIsInN0cmVha0NoaWxkcmVuIiwic3RyZWFrVGV4dCIsIkFycmF5IiwiaXNBcnJheSIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiU1RPUkFHRV9LRVlTIiwiVVNFUl9QUk9HUkVTUyIsImxldmVsMUNoaWxkcmVuIiwibW9ja0luaXRpYWxQcm9ncmVzcyIsIm1vY2tSZWplY3RlZFZhbHVlT25jZSIsIkVycm9yIiwiY29uc29sZUVycm9yU3B5Iiwic3B5T24iLCJjb25zb2xlIiwiYW55IiwiZ2xvYmFsUHJvZ3Jlc3NUZXh0IiwibW9ja1Jlc3RvcmUiLCJvcmlnaW5hbEVycm9yIiwiZXJyb3IiLCJ0b1Rocm93IiwibGV2ZWxCb251c1RleHQiXSwic291cmNlcyI6WyJQcm9ncmVzc0NvbnRleHQudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4sIGFjdCwgZmlyZUV2ZW50IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgVGV4dCwgQnV0dG9uIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IFByb2dyZXNzUHJvdmlkZXIsIHVzZVByb2dyZXNzLCBjcmVhdGVJbml0aWFsUHJvZ3Jlc3MgfSBmcm9tICcuLi8uLi9zcmMvY29udGV4dHMvUHJvZ3Jlc3NDb250ZXh0JztcbmltcG9ydCBBc3luY1N0b3JhZ2UgZnJvbSAnQHJlYWN0LW5hdGl2ZS1hc3luYy1zdG9yYWdlL2FzeW5jLXN0b3JhZ2UnO1xuaW1wb3J0IHsgU1RPUkFHRV9LRVlTIH0gZnJvbSAnLi4vLi4vc3JjL3V0aWxzL2NvbnN0YW50cyc7XG5cbi8vIE1vY2sgQXN5bmNTdG9yYWdlXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlJywgKCkgPT4gKHtcbsKgIHNldEl0ZW06IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkpLFxuwqAgZ2V0SXRlbTogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUobnVsbCkpLFxuwqAgcmVtb3ZlSXRlbTogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoKSksXG59KSk7XG5cbi8vIEEgdGVzdCBjb21wb25lbnQgdG8gY29uc3VtZSB0aGUgY29udGV4dFxuY29uc3QgVGVzdENvbXBvbmVudCA9ICgpID0+IHtcbsKgIGNvbnN0IHtcbsKgIMKgIHByb2dyZXNzLFxuwqAgwqAgaXNMb2FkaW5nLFxuwqAgwqAgdXBkYXRlRXhlcmNpc2VQcm9ncmVzcyxcbsKgIMKgIHVwZGF0ZVN0YXRzLFxuwqAgwqAgY2FsY3VsYXRlR2xvYmFsUHJvZ3Jlc3MsXG7CoCDCoCBjYWxjdWxhdGVMZXZlbFByb2dyZXNzLFxuwqAgwqAgcmVzZXRQcm9ncmVzcyxcbsKgIH0gPSB1c2VQcm9ncmVzcygpO1xuXG7CoCBpZiAoaXNMb2FkaW5nKSB7XG7CoCDCoCByZXR1cm4gPFRleHQgdGVzdElEPVwibG9hZGluZy1zdGF0dXNcIj5Mb2FkaW5nLi4uPC9UZXh0PjtcbsKgIH1cblxuwqAgcmV0dXJuIChcbsKgIMKgIDw+XG7CoCDCoCDCoCA8VGV4dCB0ZXN0SUQ9XCJnbG9iYWwtcHJvZ3Jlc3NcIj5HbG9iYWw6IHtjYWxjdWxhdGVHbG9iYWxQcm9ncmVzcygpfSU8L1RleHQ+XG7CoCDCoCDCoCA8VGV4dCB0ZXN0SUQ9XCJsZXZlbDEtcHJvZ3Jlc3NcIj5MZXZlbCAxOiB7Y2FsY3VsYXRlTGV2ZWxQcm9ncmVzcygnMScpfSU8L1RleHQ+XG7CoCDCoCDCoCA8VGV4dCB0ZXN0SUQ9XCJsZXZlbC1ib251cy1wcm9ncmVzc1wiPkxldmVsIEJvbnVzOiB7Y2FsY3VsYXRlTGV2ZWxQcm9ncmVzcygnYm9udXMnKX0lPC9UZXh0PlxuwqAgwqAgwqAgPFRleHQgdGVzdElEPVwidm9jYWItbGV2ZWwxLWNvbXBsZXRlZFwiPlxuwqAgwqAgwqAgwqAgVm9jYWIgTGV2ZWwgMSBDb21wbGV0ZWQ6IHtwcm9ncmVzcy5leGVyY2lzZXMudm9jYWJ1bGFyeT8uWycxJ10/LmNvbXBsZXRlZCB8fCAwfVxuwqAgwqAgwqAgPC9UZXh0PlxuwqAgwqAgwqAgPFRleHQgdGVzdElEPVwic3RyZWFrXCI+U3RyZWFrOiB7cHJvZ3Jlc3Muc3RhdHMuc3RyZWFrfTwvVGV4dD5cblxuwqAgwqAgwqAgPEJ1dHRvbiB0aXRsZT1cIlVwZGF0ZSBWb2NhYiBMZXZlbCAxXCIgb25QcmVzcz17KCkgPT4gdXBkYXRlRXhlcmNpc2VQcm9ncmVzcygndm9jYWJ1bGFyeScsICcxJywgNTApfSAvPlxuwqAgwqAgwqAgPEJ1dHRvbiB0aXRsZT1cIlVwZGF0ZSBTdHJlYWtcIiBvblByZXNzPXsoKSA9PiB1cGRhdGVTdGF0cyh7IHN0cmVhazogNSB9KX0gLz5cbsKgIMKgIMKgIDxCdXR0b24gdGl0bGU9XCJSZXNldCBQcm9ncmVzc1wiIG9uUHJlc3M9e3Jlc2V0UHJvZ3Jlc3N9IC8+XG7CoCDCoCDCoCA8QnV0dG9uIHRpdGxlPVwiVXBkYXRlIFZvY2FiIEJvbnVzXCIgb25QcmVzcz17KCkgPT4gdXBkYXRlRXhlcmNpc2VQcm9ncmVzcygndm9jYWJ1bGFyeScsICdib251cycsIDc1KX0gLz5cbsKgIMKgIMKgIDxCdXR0b24gdGl0bGU9XCJVcGRhdGUgR3JhbW1hciBCb251c1wiIG9uUHJlc3M9eygpID0+IHVwZGF0ZUV4ZXJjaXNlUHJvZ3Jlc3MoJ2dyYW1tYXInLCAnYm9udXMnLCA1MCl9IC8+XG7CoCDCoCDCoCA8QnV0dG9uIHRpdGxlPVwiQWRkIE5ldyBFeGVyY2lzZSBUeXBlXCIgb25QcmVzcz17KCkgPT4gdXBkYXRlRXhlcmNpc2VQcm9ncmVzcygnbmV3VHlwZScsICcxJywgMjUpfSAvPlxuwqAgwqAgPC8+XG7CoCApO1xufTtcblxuLy8gQ29tcG9zYW50IGRlIHRlc3QgcG91ciBsZXMgY2FsY3Vsc1xuY29uc3QgVGVzdENhbGN1bGF0aW9uQ29tcG9uZW50ID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgY2FsY3VsYXRlTGV2ZWxQcm9ncmVzcyB9ID0gdXNlUHJvZ3Jlc3MoKTtcbiAgICByZXR1cm4gKFxuICAgICAgICA8VGV4dCB0ZXN0SUQ9XCJsZXZlbC0yLXByb2dyZXNzXCI+XG4gICAgICAgICAgICB7Y2FsY3VsYXRlTGV2ZWxQcm9ncmVzcygnMicpfVxuICAgICAgICA8L1RleHQ+XG4gICAgKTtcbn07XG5cbi8vIEEgY29tcG9uZW50IHRvIHRlc3QgdGhlIGhvb2sgb3V0c2lkZSB0aGUgcHJvdmlkZXJcbmNvbnN0IENvbXBvbmVudFdpdGhvdXRQcm92aWRlciA9ICgpID0+IHtcbsKgIHVzZVByb2dyZXNzKCk7XG7CoCByZXR1cm4gbnVsbDtcbn07XG5cbmRlc2NyaWJlKCdQcm9ncmVzc0NvbnRleHQnLCAoKSA9PiB7XG7CoCBiZWZvcmVFYWNoKCgpID0+IHtcbsKgIMKgIGplc3QudXNlRmFrZVRpbWVycygpO1xuwqAgwqAgQXN5bmNTdG9yYWdlLmdldEl0ZW0ubW9ja0NsZWFyKCk7XG7CoCDCoCBBc3luY1N0b3JhZ2Uuc2V0SXRlbS5tb2NrQ2xlYXIoKTtcbsKgIMKgIEFzeW5jU3RvcmFnZS5yZW1vdmVJdGVtLm1vY2tDbGVhcigpO1xuwqAgfSk7XG5cbsKgIGFmdGVyRWFjaCgoKSA9PiB7XG7CoCDCoCBqZXN0LnJ1bk9ubHlQZW5kaW5nVGltZXJzKCk7XG7CoCDCoCBqZXN0LnVzZVJlYWxUaW1lcnMoKTtcbsKgIH0pO1xuXG7CoCAvLyA9PT09PT09PT09IEJhc2UgVGVzdHMgPT09PT09PT09PVxuXG7CoCBpdCgnbG9hZHMgaW5pdGlhbCBwcm9ncmVzcyBmcm9tIEFzeW5jU3RvcmFnZScsIGFzeW5jICgpID0+IHtcbsKgIMKgIGNvbnN0IG1vY2tQcm9ncmVzcyA9IHtcbsKgIMKgIMKgIC4uLmNyZWF0ZUluaXRpYWxQcm9ncmVzcygpLFxuwqAgwqAgwqAgbGV2ZWxzOiB7ICcxJzogeyBjb21wbGV0ZWQ6IDI1LCB0b3RhbDogMTAwIH0gfSxcbsKgIMKgIMKgIGV4ZXJjaXNlczogeyB2b2NhYnVsYXJ5OiB7ICcxJzogeyBjb21wbGV0ZWQ6IDI1LCB0b3RhbDogMTAwIH0gfSB9LFxuwqAgwqAgwqAgc3RhdHM6IHsgc3RyZWFrOiAxIH0sXG7CoCDCoCB9O1xuwqAgwqAgQXN5bmNTdG9yYWdlLmdldEl0ZW0ubW9ja1Jlc29sdmVkVmFsdWVPbmNlKEpTT04uc3RyaW5naWZ5KG1vY2tQcm9ncmVzcykpO1xuXG7CoCDCoCByZW5kZXIoXG7CoCDCoCDCoCA8UHJvZ3Jlc3NQcm92aWRlcj5cbsKgIMKgIMKgIMKgIDxUZXN0Q29tcG9uZW50IC8+XG7CoCDCoCDCoCA8L1Byb2dyZXNzUHJvdmlkZXI+XG7CoCDCoCApO1xuXG7CoCDCoCBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdsb2FkaW5nLXN0YXR1cycpKS50b0JlVHJ1dGh5KCk7XG5cbsKgIMKgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG7CoCDCoCDCoCBqZXN0LnJ1bkFsbFRpbWVycygpO1xuwqAgwqAgfSk7XG5cbsKgIMKgIGV4cGVjdChzY3JlZW4ucXVlcnlCeVRlc3RJZCgnbG9hZGluZy1zdGF0dXMnKSkudG9CZU51bGwoKTtcbsKgIMKgIGNvbnN0IGxldmVsMVByb2dyZXNzVGV4dCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnbGV2ZWwxLXByb2dyZXNzJykucHJvcHMuY2hpbGRyZW4uam9pbignJyk7XG7CoCDCoCBleHBlY3QobGV2ZWwxUHJvZ3Jlc3NUZXh0KS50b0JlKCdMZXZlbCAxOiAyNSUnKTtcbsKgIMKgIGNvbnN0IHN0cmVha0Rpc3BsYXkgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ3N0cmVhaycpLnByb3BzLmNoaWxkcmVuLmpvaW4oJycpO1xuwqAgwqAgZXhwZWN0KHN0cmVha0Rpc3BsYXkpLnRvQmUoJ1N0cmVhazogMScpO1xuwqAgfSk7XG5cbsKgIGl0KCd1cGRhdGVzIGV4ZXJjaXNlIHByb2dyZXNzIGFuZCByZWNhbGN1bGF0ZXMgbGV2ZWwgcHJvZ3Jlc3MnLCBhc3luYyAoKSA9PiB7XG7CoCDCoCByZW5kZXIoXG7CoCDCoCDCoCA8UHJvZ3Jlc3NQcm92aWRlcj5cbsKgIMKgIMKgIMKgIDxUZXN0Q29tcG9uZW50IC8+XG7CoCDCoCDCoCA8L1Byb2dyZXNzUHJvdmlkZXI+XG7CoCDCoCApO1xuXG7CoCDCoCBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuwqAgwqAgwqAgamVzdC5ydW5BbGxUaW1lcnMoKTtcbsKgIMKgIH0pO1xuXG7CoCDCoCBmaXJlRXZlbnQucHJlc3Moc2NyZWVuLmdldEJ5VGV4dCgnVXBkYXRlIFZvY2FiIExldmVsIDEnKSk7XG7CoCDCoCBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuwqAgwqAgwqAgamVzdC5ydW5BbGxUaW1lcnMoKTtcbsKgIMKgIH0pO1xuXG7CoCDCoCBjb25zdCBzYXZlZFByb2dyZXNzID0gSlNPTi5wYXJzZShBc3luY1N0b3JhZ2Uuc2V0SXRlbS5tb2NrLmNhbGxzWzBdWzFdKTtcbsKgIMKgIGV4cGVjdChzYXZlZFByb2dyZXNzLmV4ZXJjaXNlcy52b2NhYnVsYXJ5WycxJ10uY29tcGxldGVkKS50b0JlKDUwKTtcbsKgIMKgIGV4cGVjdChzYXZlZFByb2dyZXNzLmxldmVsc1snMSddLmNvbXBsZXRlZCkudG9CZSg2KTtcbsKgIH0pO1xuXG7CoCBpdCgndXBkYXRlcyBwcm9ncmVzcyBmb3IgYSBuZXcgZXhlcmNpc2UgdHlwZSBhbmQgY2FsY3VsYXRlcyBhdmVyYWdlJywgYXN5bmMgKCkgPT4ge1xuwqAgwqAgcmVuZGVyKFxuwqAgwqAgwqAgPFByb2dyZXNzUHJvdmlkZXI+XG7CoCDCoCDCoCDCoCA8VGVzdENvbXBvbmVudCAvPlxuwqAgwqAgwqAgPC9Qcm9ncmVzc1Byb3ZpZGVyPlxuwqAgwqAgKTtcbsKgIMKgIFxuwqAgwqAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbsKgIMKgIMKgIGplc3QucnVuQWxsVGltZXJzKCk7XG7CoCDCoCB9KTtcblxuwqAgwqAgZmlyZUV2ZW50LnByZXNzKHNjcmVlbi5nZXRCeVRleHQoJ0FkZCBOZXcgRXhlcmNpc2UgVHlwZScpKTtcbsKgIMKgIFxuwqAgwqAgY29uc3QgbGV2ZWwxVGV4dCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnbGV2ZWwxLXByb2dyZXNzJykucHJvcHMuY2hpbGRyZW4uam9pbignJyk7XG7CoCDCoCBleHBlY3QobGV2ZWwxVGV4dCkudG9CZSgnTGV2ZWwgMTogMyUnKTtcbsKgIMKgIFxuwqAgwqAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbsKgIMKgIMKgIGplc3QucnVuQWxsVGltZXJzKCk7XG7CoCDCoCB9KTtcbsKgIMKgIFxuwqAgwqAgY29uc3Qgc2F2ZWRQcm9ncmVzcyA9IEpTT04ucGFyc2UoQXN5bmNTdG9yYWdlLnNldEl0ZW0ubW9jay5jYWxsc1swXVsxXSk7XG7CoCDCoCBleHBlY3Qoc2F2ZWRQcm9ncmVzcy5leGVyY2lzZXMubmV3VHlwZVsnMSddLmNvbXBsZXRlZCkudG9CZSgyNSk7XG7CoCB9KTtcblxuwqAgaXQoJ3VwZGF0ZXMgc3RhdHMgYW5kIHNhdmVzIHRvIEFzeW5jU3RvcmFnZScsIGFzeW5jICgpID0+IHtcbsKgIMKgIHJlbmRlcihcbsKgIMKgIMKgIDxQcm9ncmVzc1Byb3ZpZGVyPlxuwqAgwqAgwqAgwqAgPFRlc3RDb21wb25lbnQgLz5cbsKgIMKgIMKgIDwvUHJvZ3Jlc3NQcm92aWRlcj5cbsKgIMKgICk7XG5cbsKgIMKgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG7CoCDCoCDCoCBqZXN0LnJ1bkFsbFRpbWVycygpO1xuwqAgwqAgfSk7XG5cbsKgIMKgIGxldCBzdHJlYWtDaGlsZHJlbiA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnc3RyZWFrJykucHJvcHMuY2hpbGRyZW47XG7CoCDCoCBsZXQgc3RyZWFrVGV4dCA9IEFycmF5LmlzQXJyYXkoc3RyZWFrQ2hpbGRyZW4pID8gc3RyZWFrQ2hpbGRyZW4uam9pbignJykgOiBzdHJlYWtDaGlsZHJlbjtcbsKgIMKgIGV4cGVjdChzdHJlYWtUZXh0KS50b0JlKCdTdHJlYWs6IDAnKTtcblxuwqAgwqAgZmlyZUV2ZW50LnByZXNzKHNjcmVlbi5nZXRCeVRleHQoJ1VwZGF0ZSBTdHJlYWsnKSk7XG5cbsKgIMKgIHN0cmVha0NoaWxkcmVuID0gc2NyZWVuLmdldEJ5VGVzdElkKCdzdHJlYWsnKS5wcm9wcy5jaGlsZHJlbjtcbsKgIMKgIHN0cmVha1RleHQgPSBBcnJheS5pc0FycmF5KHN0cmVha0NoaWxkcmVuKSA/IHN0cmVha0NoaWxkcmVuLmpvaW4oJycpIDogc3RyZWFrQ2hpbGRyZW47XG7CoCDCoCBleHBlY3Qoc3RyZWFrVGV4dCkudG9CZSgnU3RyZWFrOiA1Jyk7XG5cbsKgIMKgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG7CoCDCoCDCoCBqZXN0LnJ1bkFsbFRpbWVycygpO1xuwqAgwqAgfSk7XG5cbsKgIMKgIGV4cGVjdChBc3luY1N0b3JhZ2Uuc2V0SXRlbSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuwqAgwqAgY29uc3Qgc2F2ZWRQcm9ncmVzcyA9IEpTT04ucGFyc2UoQXN5bmNTdG9yYWdlLnNldEl0ZW0ubW9jay5jYWxsc1swXVsxXSk7XG7CoCDCoCBleHBlY3Qoc2F2ZWRQcm9ncmVzcy5zdGF0cy5zdHJlYWspLnRvQmUoNSk7XG7CoCB9KTtcbsKgIFxuwqAgaXQoJ3Jlc2V0cyBwcm9ncmVzcyBhbmQgcmVtb3ZlcyBmcm9tIEFzeW5jU3RvcmFnZScsIGFzeW5jICgpID0+IHtcbsKgIMKgIHJlbmRlcihcbsKgIMKgIMKgIDxQcm9ncmVzc1Byb3ZpZGVyPlxuwqAgwqAgwqAgwqAgPFRlc3RDb21wb25lbnQgLz5cbsKgIMKgIMKgIDwvUHJvZ3Jlc3NQcm92aWRlcj5cbsKgIMKgICk7XG5cbsKgIMKgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG7CoCDCoCDCoCBqZXN0LnJ1bkFsbFRpbWVycygpO1xuwqAgwqAgfSk7XG5cbsKgIMKgIGZpcmVFdmVudC5wcmVzcyhzY3JlZW4uZ2V0QnlUZXh0KCdVcGRhdGUgVm9jYWIgTGV2ZWwgMScpKTtcbsKgIMKgIGZpcmVFdmVudC5wcmVzcyhzY3JlZW4uZ2V0QnlUZXh0KCdVcGRhdGUgU3RyZWFrJykpO1xuXG7CoCDCoCBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuwqAgwqAgwqAgamVzdC5ydW5BbGxUaW1lcnMoKTtcbsKgIMKgIH0pO1xuXG7CoCDCoCBleHBlY3QoQXN5bmNTdG9yYWdlLnNldEl0ZW0pLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcblxuwqAgwqAgZmlyZUV2ZW50LnByZXNzKHNjcmVlbi5nZXRCeVRleHQoJ1Jlc2V0IFByb2dyZXNzJykpO1xuXG7CoCDCoCBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuwqAgwqAgwqAgYXdhaXQgUHJvbWlzZS5yZXNvbHZlKCk7XG7CoCDCoCB9KTtcblxuwqAgwqAgZXhwZWN0KEFzeW5jU3RvcmFnZS5yZW1vdmVJdGVtKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChTVE9SQUdFX0tFWVMuVVNFUl9QUk9HUkVTUyk7XG5cbsKgIMKgIGNvbnN0IGxldmVsMUNoaWxkcmVuID0gc2NyZWVuLmdldEJ5VGVzdElkKCdsZXZlbDEtcHJvZ3Jlc3MnKS5wcm9wcy5jaGlsZHJlbjtcbsKgIMKgIGNvbnN0IGxldmVsMVRleHQgPSBBcnJheS5pc0FycmF5KGxldmVsMUNoaWxkcmVuKSA/IGxldmVsMUNoaWxkcmVuLmpvaW4oJycpIDogbGV2ZWwxQ2hpbGRyZW47XG7CoCDCoCBleHBlY3QobGV2ZWwxVGV4dCkudG9CZSgnTGV2ZWwgMTogMCUnKTtcblxuwqAgwqAgY29uc3Qgc3RyZWFrQ2hpbGRyZW4gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ3N0cmVhaycpLnByb3BzLmNoaWxkcmVuO1xuwqAgwqAgY29uc3Qgc3RyZWFrVGV4dCA9IEFycmF5LmlzQXJyYXkoc3RyZWFrQ2hpbGRyZW4pID8gc3RyZWFrQ2hpbGRyZW4uam9pbignJykgOiBzdHJlYWtDaGlsZHJlbjtcbsKgIMKgIGV4cGVjdChzdHJlYWtUZXh0KS50b0JlKCdTdHJlYWs6IDAnKTtcbsKgIH0pO1xuXG7CoCAvLyA9PT09PT09PT09IE5ldyBUZXN0cyBmb3IgQ292ZXJhZ2UgPT09PT09PT09PVxuXG7CoCBpdCgnY2FsY3VsYXRlcyBsZXZlbCBwcm9ncmVzcyBjb3JyZWN0bHkgd2hlbiB0aGVyZSBhcmUgbm8gZXhlcmNpc2VzIGZvciBhIGxldmVsJywgYXN5bmMgKCkgPT4ge1xuwqAgwqAgY29uc3QgbW9ja0luaXRpYWxQcm9ncmVzcyA9IGNyZWF0ZUluaXRpYWxQcm9ncmVzcygpO1xuwqAgwqAgLy8gQ3JlYXRlIGFuIGVtcHR5IHByb2dyZXNzIG9iamVjdCB0byBzaW11bGF0ZSB0aGUgbm8tZXhlcmNpc2VzIGNhc2VcbsKgIMKgIG1vY2tJbml0aWFsUHJvZ3Jlc3MuZXhlcmNpc2VzID0ge307IFxuwqAgwqAgXG7CoCDCoCBBc3luY1N0b3JhZ2UuZ2V0SXRlbS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoSlNPTi5zdHJpbmdpZnkobW9ja0luaXRpYWxQcm9ncmVzcykpO1xuXG7CoCDCoCByZW5kZXIoXG7CoCDCoCDCoCA8UHJvZ3Jlc3NQcm92aWRlcj5cbsKgIMKgIMKgIMKgIDxUZXN0Q29tcG9uZW50IC8+XG7CoCDCoCDCoCA8L1Byb2dyZXNzUHJvdmlkZXI+XG7CoCDCoCApO1xuXG7CoCDCoCBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuwqAgwqAgwqAgamVzdC5ydW5BbGxUaW1lcnMoKTtcbsKgIMKgIH0pO1xuXG7CoCDCoCBjb25zdCBsZXZlbDFUZXh0ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdsZXZlbDEtcHJvZ3Jlc3MnKS5wcm9wcy5jaGlsZHJlbi5qb2luKCcnKTtcbsKgIMKgIGV4cGVjdChsZXZlbDFUZXh0KS50b0JlKCdMZXZlbCAxOiAwJScpO1xuwqAgfSk7XG5cbsKgIGl0KCdoYW5kbGVzIGVycm9ycyBkdXJpbmcgaW5pdGlhbCBsb2FkaW5nJywgYXN5bmMgKCkgPT4ge1xuwqAgwqAgQXN5bmNTdG9yYWdlLmdldEl0ZW0ubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignTW9jayBBc3luY1N0b3JhZ2UgRXJyb3InKSk7XG7CoCDCoCBjb25zdCBjb25zb2xlRXJyb3JTcHkgPSBqZXN0LnNweU9uKGNvbnNvbGUsICdlcnJvcicpO1xuXG7CoCDCoCByZW5kZXIoXG7CoCDCoCDCoCA8UHJvZ3Jlc3NQcm92aWRlcj5cbsKgIMKgIMKgIMKgIDxUZXN0Q29tcG9uZW50IC8+XG7CoCDCoCDCoCA8L1Byb2dyZXNzUHJvdmlkZXI+XG7CoCDCoCApO1xuXG7CoCDCoCBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuwqAgwqAgwqAgamVzdC5ydW5BbGxUaW1lcnMoKTtcbsKgIMKgIH0pO1xuXG7CoCDCoCBleHBlY3QoY29uc29sZUVycm9yU3B5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnRXJyZXVyIGNoYXJnZW1lbnQgcHJvZ3Jlc3Npb246JywgZXhwZWN0LmFueShFcnJvcikpO1xuwqAgwqAgZXhwZWN0KHNjcmVlbi5xdWVyeUJ5VGVzdElkKCdsb2FkaW5nLXN0YXR1cycpKS50b0JlTnVsbCgpO1xuwqAgwqAgY29uc3QgZ2xvYmFsUHJvZ3Jlc3NUZXh0ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdnbG9iYWwtcHJvZ3Jlc3MnKS5wcm9wcy5jaGlsZHJlbi5qb2luKCcnKTtcbsKgIMKgIGV4cGVjdChnbG9iYWxQcm9ncmVzc1RleHQpLnRvQmUoJ0dsb2JhbDogMCUnKTtcbsKgIMKgIGNvbnNvbGVFcnJvclNweS5tb2NrUmVzdG9yZSgpO1xuwqAgfSk7XG5cbsKgIGl0KCdoYW5kbGVzIGVycm9ycyBkdXJpbmcgc2F2aW5nIHByb2dyZXNzJywgYXN5bmMgKCkgPT4ge1xuwqAgwqAgQXN5bmNTdG9yYWdlLnNldEl0ZW0ubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignTW9jayBBc3luY1N0b3JhZ2UgU2F2ZSBFcnJvcicpKTtcbsKgIMKgIGNvbnN0IGNvbnNvbGVFcnJvclNweSA9IGplc3Quc3B5T24oY29uc29sZSwgJ2Vycm9yJyk7XG5cbsKgIMKgIHJlbmRlcihcbsKgIMKgIMKgIDxQcm9ncmVzc1Byb3ZpZGVyPlxuwqAgwqAgwqAgwqAgPFRlc3RDb21wb25lbnQgLz5cbsKgIMKgIMKgIDwvUHJvZ3Jlc3NQcm92aWRlcj5cbsKgIMKgICk7XG5cbsKgIMKgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG7CoCDCoCDCoCBqZXN0LnJ1bkFsbFRpbWVycygpO1xuwqAgwqAgfSk7XG5cbsKgIMKgIGZpcmVFdmVudC5wcmVzcyhzY3JlZW4uZ2V0QnlUZXh0KCdVcGRhdGUgU3RyZWFrJykpO1xuXG7CoCDCoCBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuwqAgwqAgwqAgamVzdC5ydW5BbGxUaW1lcnMoKTtcbsKgIMKgIH0pO1xuXG7CoCDCoCBleHBlY3QoY29uc29sZUVycm9yU3B5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnRXJyZXVyIHNhdXZlZ2FyZGUgcHJvZ3Jlc3Npb246JywgZXhwZWN0LmFueShFcnJvcikpO1xuwqAgwqAgY29uc29sZUVycm9yU3B5Lm1vY2tSZXN0b3JlKCk7XG7CoCB9KTtcblxuwqAgaXQoJ2hhbmRsZXMgZXJyb3IgZHVyaW5nIHByb2dyZXNzIHJlc2V0IGdyYWNlZnVsbHknLCBhc3luYyAoKSA9PiB7XG7CoCDCoCBBc3luY1N0b3JhZ2UucmVtb3ZlSXRlbS5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UobmV3IEVycm9yKCdNb2NrIEFzeW5jU3RvcmFnZSByZW1vdmVJdGVtIEVycm9yJykpO1xuwqAgwqAgY29uc3QgY29uc29sZUVycm9yU3B5ID0gamVzdC5zcHlPbihjb25zb2xlLCAnZXJyb3InKTtcbsKgIMKgIFxuwqAgwqAgLy8gRmlyc3QsIGxvYWQgaW5pdGlhbCBwcm9ncmVzcyB0byBoYXZlIHNvbWV0aGluZyB0byAncmVzZXQnXG7CoCDCoCBjb25zdCBtb2NrUHJvZ3Jlc3MgPSB7XG7CoCDCoCDCoCAuLi5jcmVhdGVJbml0aWFsUHJvZ3Jlc3MoKSxcbsKgIMKgIMKgIHN0YXRzOiB7IHN0cmVhazogMSB9LFxuwqAgwqAgwqAgbGV2ZWxzOiB7ICcxJzogeyBjb21wbGV0ZWQ6IDUwLCB0b3RhbDogMTAwIH0gfVxuwqAgwqAgfTtcbsKgIMKgIEFzeW5jU3RvcmFnZS5nZXRJdGVtLm1vY2tSZXNvbHZlZFZhbHVlT25jZShKU09OLnN0cmluZ2lmeShtb2NrUHJvZ3Jlc3MpKTtcbsKgIMKgIFxuwqAgwqAgcmVuZGVyKFxuwqAgwqAgwqAgPFByb2dyZXNzUHJvdmlkZXI+XG7CoCDCoCDCoCDCoCA8VGVzdENvbXBvbmVudCAvPlxuwqAgwqAgwqAgPC9Qcm9ncmVzc1Byb3ZpZGVyPlxuwqAgwqAgKTtcblxuwqAgwqAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbsKgIMKgIMKgIGplc3QucnVuQWxsVGltZXJzKCk7XG7CoCDCoCB9KTtcblxuwqAgwqAgLy8gVmVyaWZ5IGluaXRpYWwgc3RhdGUgaXMgbG9hZGVkXG7CoCDCoCBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdzdHJlYWsnKS5wcm9wcy5jaGlsZHJlbi5qb2luKCcnKSkudG9CZSgnU3RyZWFrOiAxJyk7XG5cbsKgIMKgIC8vIEF0dGVtcHQgdG8gcmVzZXQgcHJvZ3Jlc3MsIHdoaWNoIHdpbGwgbm93IGZhaWxcbsKgIMKgIGZpcmVFdmVudC5wcmVzcyhzY3JlZW4uZ2V0QnlUZXh0KCdSZXNldCBQcm9ncmVzcycpKTtcblxuwqAgwqAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbsKgIMKgIMKgIGF3YWl0IFByb21pc2UucmVzb2x2ZSgpO1xuwqAgwqAgfSk7XG5cbsKgIMKgIC8vIENoZWNrIHRoYXQgdGhlIGVycm9yIHdhcyBjYXVnaHQgYW5kIGxvZ2dlZFxuwqAgwqAgZXhwZWN0KGNvbnNvbGVFcnJvclNweSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ0VycmV1ciByZXNldCBwcm9ncmVzc2lvbjonLCBleHBlY3QuYW55KEVycm9yKSk7XG7CoCDCoCBcbsKgIMKgIC8vIFRoZSBwcm9ncmVzcyBzaG91bGQgTk9UIGhhdmUgYmVlbiByZXNldCBpbiB0aGUgVUlcbsKgIMKgIGNvbnN0IHN0cmVha1RleHQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ3N0cmVhaycpLnByb3BzLmNoaWxkcmVuLmpvaW4oJycpO1xuwqAgwqAgZXhwZWN0KHN0cmVha1RleHQpLnRvQmUoJ1N0cmVhazogMScpO1xuXG7CoCDCoCBjb25zb2xlRXJyb3JTcHkubW9ja1Jlc3RvcmUoKTtcbsKgIH0pO1xuXG7CoCAvLyA9PT09PT09PT09IFRlc3QgZm9yIG91dC1vZi1wcm92aWRlciB1c2FnZSA9PT09PT09PT09XG7CoCBpdCgndGhyb3dzIGFuIGVycm9yIGlmIHVzZVByb2dyZXNzIGlzIHVzZWQgb3V0c2lkZSBvZiBQcm9ncmVzc1Byb3ZpZGVyJywgKCkgPT4ge1xuwqAgwqAgY29uc3Qgb3JpZ2luYWxFcnJvciA9IGNvbnNvbGUuZXJyb3I7XG7CoCDCoCBjb25zb2xlLmVycm9yID0gamVzdC5mbigpO1xuXG7CoCDCoCBleHBlY3QoKCkgPT4gcmVuZGVyKDxDb21wb25lbnRXaXRob3V0UHJvdmlkZXIgLz4pKS50b1Rocm93KFxuwqAgwqAgwqAgJ3VzZVByb2dyZXNzIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBQcm9ncmVzc1Byb3ZpZGVyJ1xuwqAgwqAgKTtcblxuwqAgwqAgY29uc29sZS5lcnJvciA9IG9yaWdpbmFsRXJyb3I7XG7CoCB9KTtcbml0KCdzaG91bGQgY2FsY3VsYXRlIGxldmVsIHByb2dyZXNzIGFzIDAlIHdoZW4gdGhlcmUgYXJlIG5vIGV4ZXJjaXNlcyBmb3IgdGhhdCBsZXZlbCcsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgbW9ja1Byb2dyZXNzID0ge1xuICAgIC4uLmNyZWF0ZUluaXRpYWxQcm9ncmVzcygpLFxuICAgIGV4ZXJjaXNlczoge1xuICAgICAgdm9jYWJ1bGFyeTogeyAnMSc6IHsgY29tcGxldGVkOiA1MCwgdG90YWw6IDEwMCB9IH1cbiAgICB9LFxuICAgIHN0YXRzOiB7IHN0cmVhazogMSB9XG4gIH07XG4gIEFzeW5jU3RvcmFnZS5nZXRJdGVtLm1vY2tSZXNvbHZlZFZhbHVlT25jZShKU09OLnN0cmluZ2lmeShtb2NrUHJvZ3Jlc3MpKTtcblxuICByZW5kZXIoXG4gICAgPFByb2dyZXNzUHJvdmlkZXI+XG4gICAgICA8VGVzdENvbXBvbmVudCAvPlxuICAgIDwvUHJvZ3Jlc3NQcm92aWRlcj5cbiAgKTtcblxuICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgIGplc3QucnVuQWxsVGltZXJzKCk7XG4gIH0pO1xuICBcbiAgLy8gQ2V0dGUgcGFydGllIGVzdCBjcnVjaWFsZSBwb3VyIGNvdXZyaXIgbGVzIGxpZ25lcyAyMzktMjQzLlxuICAvLyBPbiBhcHBlbGxlIGNhbGN1bGF0ZUxldmVsUHJvZ3Jlc3MgYXZlYyB1biBuaXZlYXUgKCdib251cycpIHF1aSBuJ2EgcGFzIGQnZXhlcmNpY2VzLlxuICBjb25zdCBsZXZlbEJvbnVzVGV4dCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnbGV2ZWwtYm9udXMtcHJvZ3Jlc3MnKS5wcm9wcy5jaGlsZHJlbi5qb2luKCcnKTtcbiAgZXhwZWN0KGxldmVsQm9udXNUZXh0KS50b0JlKCdMZXZlbCBCb251czogMCUnKTtcblxuICAvLyBEZSBsYSBtw6ptZSBtYW5pw6hyZSwgb24gcGV1dCB2w6lyaWZpZXIgdW4gYXV0cmUgbml2ZWF1IHNhbnMgZXhlcmNpY2VzXG4gIC8vIHBvdXIgcydhc3N1cmVyIHF1ZSBsZSBjYWxjdWwgZm9uY3Rpb25uZSBkYW5zIHRvdXMgbGVzIGNhcy5cbiAgLy8gQ3LDqWV6IHVuIG5vdXZlYXUgYm91dG9uIGRhbnMgVGVzdENvbXBvbmVudCBzaSB2b3VzIG4nYXZleiBwYXMgZGUgY29tcG9zYW50IGV4aXN0YW50XG4gIC8vIHBvdXIgYWZmaWNoZXIgbGUgbml2ZWF1IDIsIG91IHbDqXJpZmlleiBxdWUgbGEgdmFsZXVyIGVzdCAwIHNpIGVsbGUgZXN0IGTDqWrDoCByZW5kdWUuXG59KTtcbml0KCdoYW5kbGVzIGVycm9ycyBkdXJpbmcgc2F2aW5nIHByb2dyZXNzIGdyYWNlZnVsbHknLCBhc3luYyAoKSA9PiB7XG7CoCDCoCAvLyBTaW11bGVyIHVuZSBlcnJldXIgZGUgc2F1dmVnYXJkZVxuwqAgwqAgQXN5bmNTdG9yYWdlLnNldEl0ZW0ubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignTW9jayBBc3luY1N0b3JhZ2UgU2F2ZSBFcnJvcicpKTtcbsKgIMKgIGNvbnN0IGNvbnNvbGVFcnJvclNweSA9IGplc3Quc3B5T24oY29uc29sZSwgJ2Vycm9yJyk7XG5cbsKgIMKgIHJlbmRlcihcbsKgIMKgIMKgIDxQcm9ncmVzc1Byb3ZpZGVyPlxuwqAgwqAgwqAgwqAgPFRlc3RDb21wb25lbnQgLz5cbsKgIMKgIMKgIDwvUHJvZ3Jlc3NQcm92aWRlcj5cbsKgIMKgICk7XG5cbsKgIMKgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG7CoCDCoCDCoCBqZXN0LnJ1bkFsbFRpbWVycygpO1xuwqAgwqAgfSk7XG5cbsKgIMKgIC8vIETDqWNsZW5jaGUgdW5lIG1pc2Ugw6Agam91ciBxdWkgw6ljaG91ZXJhXG7CoCDCoCBmaXJlRXZlbnQucHJlc3Moc2NyZWVuLmdldEJ5VGV4dCgnVXBkYXRlIFN0cmVhaycpKTtcblxuwqAgwqAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbsKgIMKgIMKgIGplc3QucnVuQWxsVGltZXJzKCk7XG7CoCDCoCB9KTtcblxuwqAgwqAgLy8gVsOpcmlmaWUgcXVlIGwnZXJyZXVyIGEgw6l0w6kgY29ycmVjdGVtZW50IGxvZ3XDqWVcbsKgIMKgIGV4cGVjdChjb25zb2xlRXJyb3JTcHkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdFcnJldXIgc2F1dmVnYXJkZSBwcm9ncmVzc2lvbjonLCBleHBlY3QuYW55KEVycm9yKSk7XG7C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