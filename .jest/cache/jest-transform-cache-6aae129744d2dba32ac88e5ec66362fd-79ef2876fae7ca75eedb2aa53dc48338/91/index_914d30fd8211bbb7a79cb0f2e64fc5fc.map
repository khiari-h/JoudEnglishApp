{"version":3,"names":["View","TouchableOpacity","Text","PropTypes","HeroCard","ContentSection","createStyles","useCallback","jsx","_jsx","jsxs","_jsxs","cov_x33cl11b1","s","AssessmentQuestion","_ref","question","selectedAnswer","showFeedback","_ref$levelColor","levelColor","b","onSelectAnswer","f","styles","options","handlePress","idx","isCorrect","correctAnswer","feedbackText","style","container","children","content","text","fontSize","showUnderline","backgroundColor","padding","optionsContainer","map","option","index","optionButton","selectedOption","borderColor","correctOption","onPress","disabled","activeOpacity","optionText","color","fontWeight","title","icon","explanation","isItalic","propTypes","shape","string","isRequired","arrayOf","number","bool","func"],"sources":["index.js"],"sourcesContent":["// AssessmentQuestion/index.js - VERSION REFACTORIS√âE avec composants g√©n√©riques\r\n\r\nimport { View, TouchableOpacity, Text } from \"react-native\";\r\nimport PropTypes from 'prop-types';\r\nimport HeroCard from \"../../../../components/ui/HeroCard\";\r\nimport ContentSection from \"../../../../components/ui/ContentSection\";\r\nimport createStyles from \"./style\";\r\nimport { useCallback } from 'react';\r\n\r\n/**\r\n * üéØ AssessmentQuestion - Version Refactoris√©e avec composants g√©n√©riques\r\n * Utilise HeroCard pour la question + ContentSection pour le feedback\r\n * \r\n * @param {object} question - Question avec text, options, correctAnswer, explanation\r\n * @param {number} selectedAnswer - Index de la r√©ponse s√©lectionn√©e\r\n * @param {boolean} showFeedback - Afficher le feedback ou non\r\n * @param {string} levelColor - Couleur du niveau\r\n * @param {function} onSelectAnswer - Callback s√©lection r√©ponse\r\n */\r\nconst AssessmentQuestion = ({\r\n  question,\r\n  selectedAnswer,\r\n  showFeedback,\r\n  levelColor = \"#3b82f6\",\r\n  onSelectAnswer,\r\n}) => {\r\n  const styles = createStyles(levelColor);\r\n\r\n  if (!question || !question.options) {\r\n    return null;\r\n  }\r\n\r\n  const handlePress = useCallback((idx) => () => onSelectAnswer(idx), [onSelectAnswer]);\r\n\r\n  // D√©terminer le feedback √† afficher\r\n  const isCorrect = selectedAnswer === question.correctAnswer;\r\n  const feedbackText = isCorrect \r\n    ? \"‚úÖ Correct! Great job.\" \r\n    : \"‚ùå Oops! The correct answer is different.\";\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      {/* üéØ QUESTION PRINCIPALE - HeroCard */}\r\n      <HeroCard \r\n        content={question.text}\r\n        fontSize={20}\r\n        levelColor={levelColor}\r\n        showUnderline={false}\r\n        backgroundColor=\"white\"\r\n        padding={24}\r\n      />\r\n      \r\n      {/* üìù OPTIONS DE R√âPONSE */}\r\n      <View style={styles.optionsContainer}>\r\n        {question.options.map((option, index) => (\r\n          <TouchableOpacity\r\n            key={option}\r\n            style={[\r\n              styles.optionButton,\r\n              selectedAnswer === index && [\r\n                styles.selectedOption,\r\n                { borderColor: levelColor, backgroundColor: `${levelColor}08` }\r\n              ],\r\n              showFeedback && index === question.correctAnswer && [\r\n                styles.correctOption,\r\n                { borderColor: '#10b981', backgroundColor: '#f0fdf4' }\r\n              ],\r\n            ]}\r\n            onPress={handlePress(index)}\r\n            disabled={showFeedback}\r\n            activeOpacity={0.7}\r\n          >\r\n            <Text\r\n              style={[\r\n                styles.optionText,\r\n                selectedAnswer === index && { color: levelColor, fontWeight: '600' },\r\n                showFeedback && index === question.correctAnswer && { \r\n                  color: '#10b981', \r\n                  fontWeight: '600' \r\n                },\r\n              ]}\r\n            >\r\n              {option}\r\n            </Text>\r\n          </TouchableOpacity>\r\n        ))}\r\n      </View>\r\n\r\n      {/* üìñ FEEDBACK - ContentSection */}\r\n      {showFeedback && (\r\n        <ContentSection\r\n          title=\"Feedback\"\r\n          content={feedbackText}\r\n          levelColor={isCorrect ? '#10b981' : '#ef4444'}\r\n          backgroundColor={isCorrect ? '#f0fdf4' : '#fef2f2'}\r\n          icon={isCorrect ? '‚úÖ' : '‚ùå'}\r\n        />\r\n      )}\r\n\r\n      {/* üìù EXPLICATION - ContentSection (si disponible) */}\r\n      {showFeedback && question.explanation && (\r\n        <ContentSection\r\n          title=\"Explanation\"\r\n          content={question.explanation}\r\n          levelColor=\"#6366f1\"\r\n          backgroundColor=\"#f8fafc\"\r\n          isItalic\r\n        />\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\n// PropTypes pour le composant AssessmentQuestion\r\nAssessmentQuestion.propTypes = {\r\n  question: PropTypes.shape({\r\n    text: PropTypes.string.isRequired,\r\n    options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    correctAnswer: PropTypes.number.isRequired,\r\n    explanation: PropTypes.string,\r\n  }).isRequired,\r\n  selectedAnswer: PropTypes.number,\r\n  showFeedback: PropTypes.bool.isRequired,\r\n  levelColor: PropTypes.string,\r\n  onSelectAnswer: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AssessmentQuestion;"],"mappingsgBAAgB,EAAEC,IAAI,QAAQ,cAAc;AAC3D,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,QAAQ,MAAM,oCAAoC;AACzD,OAAOC,cAAc,MAAM,0CAA0C;AACrE,OAAOC,YAAY,MAAM,SAAS;AAClC,SAASC,WAAW,QAAQ,OAAO;AAAC,SAAAC,GAAA,IAAAC,IAAA,EAAAC,IAAA,IAAAC,KAAA;AAAAC,aAAA,GAAAC,CAAA;AAYpC,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAAC,IAAA,EAMlB;EAAA,IALJC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;IACRC,cAAc,GAAAF,IAAA,CAAdE,cAAc;IACdC,YAAY,GAAAH,IAAA,CAAZG,YAAY;IAAAC,eAAA,GAAAJ,IAAA,CACZK,UAAU;IAAVA,UAAU,GAAAD,eAAA,eAAAP,aAAA,GAAAS,CAAA,UAAG,SAAS,IAAAF,eAAA;IACtBG,cAAc,GAAAP,IAAA,CAAdO,cAAc;EAAAV,aAAA,GAAAW,CAAA;EAEd,IAAMC,MAAM,IAAAZ,aAAA,GAAAC,CAAA,OAAGP,YAAY,CAACc,UAAU,CAAC;EAACR,aAAA,GAAAC,CAAA;EAExC,IAAI,CAAAD,aAAA,GAAAS,CAAA,WAACL,QAAQ,MAAAJ,aAAA,GAAAS,CAAA,UAAI,CAACL,QAAQ,CAACS,OAAO,GAAE;IAAAb,aAAA,GAAAS,CAAA;IAAAT,aAAA,GAAAC,CAAA;IAClC,OAAO,IAAI;EACb,CAAC;IAAAD,aAAA,GAAAS,CAAA;EAAA;EAED,IAAMK,WAAW,IAAAd,aAAA,GAAAC,CAAA,OAAGN,WAAW,CAAC,UAACoB,GAAG,EAAK;IAAAf,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAC,CAAA;IAAA,mBAAM;MAAAD,aAAA,GAAAW,CAAA;MAAAX,aAAA,GAAAC,CAAA;MAAA,OAAAS,cAAc,CAACK,GAAG,CAAC;IAAD,CAAC;EAAD,CAAC,EAAE,CAACL,cAAc,CAAC,CAAC;EAGrF,IAAMM,SAAS,IAAAhB,aAAA,GAAAC,CAAA,OAAGI,cAAc,KAAKD,QAAQ,CAACa,aAAa;EAC3D,IAAMC,YAAY,IAAAlB,aAAA,GAAAC,CAAA,OAAGe,SAAS,IAAAhB,aAAA,GAAAS,CAAA,UAC1B,uBAAuB,KAAAT,aAAA,GAAAS,CAAA,UACvB,0CAA0C;EAACT,aAAA,GAAAC,CAAA;EAE/C,OACEF,KAAA,CAACX,IAAI;IAAC+B,KAAK,EAAEP,MAAM,CAACQ,SAAU;IAAAC,QAAA,GAE5BxB,IAAA,CAACL,QAAQ;MACP8B,OAAO,EAAElB,QAAQ,CAACmB,IAAK;MACvBC,QAAQ,EAAE,EAAG;MACbhB,UAAU,EAAEA,UAAW;MACvBiB,aAAa,EAAE,KAAM;MACrBC,eAAe,EAAC,OAAO;MACvBC,OAAO,EAAE;IAAG,CACb,CAAC,EAGF9B,IAAA,CAACT,IAAI;MAAC+B,KAAK,EAAEP,MAAM,CAACgB,gBAAiB;MAAAP,QAAA,EAClCjB,QAAQ,CAACS,OAAO,CAACgB,GAAG,CAAC,UAACC,MAAM,EAAEC,KAAK,EAClC;QAAA/B,aAAA,GAAAW,CAAA;QAAAX,aAAA,GAAAC,CAAA;QAAA,OAAAJ,IAAA,CAACR,gBAAgB;UAEf8B,KAAK,EAAE,CACLP,MAAM,CAACoB,YAAY,EACnB,CAAAhC,aAAA,GAAAS,CAAA,UAAAJ,cAAc,KAAK0B,KAAK,MAAA/B,aAAA,GAAAS,CAAA,UAAI,CAC1BG,MAAM,CAACqB,cAAc,EACrB;YAAEC,WAAW,EAAE1B,UAAU;YAAEkB,eAAe,EAAE,GAAGlB,UAAU;UAAK,CAAC,CAChE,GACD,CAAAR,aAAA,GAAAS,CAAA,UAAAH,YAAY,MAAAN,aAAA,GAAAS,CAAA,UAAIsB,KAAK,KAAK3B,QAAQ,CAACa,aAAa,MAAAjB,aAAA,GAAAS,CAAA,UAAI,CAClDG,MAAM,CAACuB,aAAa,EACpB;YAAED,WAAW,EAAE,SAAS;YAAER,eAAe,EAAE;UAAU,CAAC,CACvD,EACD;UACFU,OAAO,EAAEtB,WAAW,CAACiB,KAAK,CAAE;UAC5BM,QAAQ,EAAE/B,YAAa;UACvBgC,aAAa,EAAE,GAAI;UAAAjB,QAAA,EAEnBxB,IAAA,CAACP,IAAI;YACH6B,KAAK,EAAE,CACLP,MAAM,CAAC2B,UAAU,EACjB,CAAAvC,aAAA,GAAAS,CAAA,UAAAJ,cAAc,KAAK0B,KAAK,MAAA/B,aAAA,GAAAS,CAAA,UAAI;cAAE+B,KAAK,EAAEhC,UAAU;cAAEiC,UAAU,EAAE;YAAM,CAAC,GACpE,CAAAzC,aAAA,GAAAS,CAAA,UAAAH,YAAY,MAAAN,aAAA,GAAAS,CAAA,UAAIsB,KAAK,KAAK3B,QAAQ,CAACa,aAAa,MAAAjB,aAAA,GAAAS,CAAA,UAAI;cAClD+B,KAAK,EAAE,SAAS;cAChBC,UAAU,EAAE;YACd,CAAC,EACD;YAAApB,QAAA,EAEDS;UAAM,CACH;QAAC,GA3BFA,MA4BW,CAAC;MAAD,CACnB;IAAC,CACE,CAAC,EAGN,CAAA9B,aAAA,GAAAS,CAAA,UAAAH,YAAY,MAAAN,aAAA,GAAAS,CAAA,UACXZ,IAAA,CAACJ,cAAc;MACbiD,KAAK,EAAC,UAAU;MAChBpB,OAAO,EAAEJ,YAAa;MACtBV,UAAU,EAAEQ,SAAS,IAAAhB,aAAA,GAAAS,CAAA,UAAG,SAAS,KAAAT,aAAA,GAAAS,CAAA,UAAG,SAAS,CAAC;MAC9CiB,eAAe,EAAEV,SAAS,IAAAhB,aAAA,GAAAS,CAAA,WAAG,SAAS,KAAAT,aAAA,GAAAS,CAAA,WAAG,SAAS,CAAC;MACnDkC,IAAI,EAAE3B,SAAS,IAAAhB,aAAA,GAAAS,CAAA,WAAG,GAAG,KAAAT,aAAA,GAAAS,CAAA,WAAG,GAAG;IAAC,CAC7B,CAAC,CACH,EAGA,CAAAT,aAAA,GAAAS,CAAA,WAAAH,YAAY,MAAAN,aAAA,GAAAS,CAAA,WAAIL,QAAQ,CAACwC,WAAW,MAAA5C,aAAA,GAAAS,CAAA,WACnCZ,IAAA,CAACJ,cAAc;MACbiD,KAAK,EAAC,aAAa;MACnBpB,OAAO,EAAElB,QAAQ,CAACwC,WAAY;MAC9BpC,UAAU,EAAC,SAAS;MACpBkB,eAAe,EAAC,SAAS;MACzBmB,QAAQ;IAAA,CACT,CAAC,CACH;EAAA,CACG,CAAC;AAEX,CAAC;AAAC7C,aAAA,GAAAC,CAAA;AAGFC,kBAAkB,CAAC4C,SAAS,GAAG;EAC7B1C,QAAQ,EAAEb,SAAS,CAACwD,KAAK,CAAC;IACxBxB,IAAI,EAAEhC,SAAS,CAACyD,MAAM,CAACC,UAAU;IACjCpC,OAAO,EAAEtB,SAAS,CAAC2D,OAAO,CAAC3D,SAAS,CAACyD,MAAM,CAAC,CAACC,UAAU;IACvDhC,aAAa,EAAE1B,SAAS,CAAC4D,MAAM,CAACF,UAAU;IAC1CL,WAAW,EAAErD,SAAS,CAACyD;EACzB,CAAC,CAAC,CAACC,UAAU;EACb5C,cAAc,EAAEd,SAAS,CAAC4D,MAAM;EAChC7C,YAAY,EAAEf,SAAS,CAAC6D,IAAI,CAACH,UAAU;EACvCzC,UAAU,EAAEjB,SAAS,CAACyD,MAAM;EAC5BtC,cAAc,EAAEnB,SAAS,CAAC8D,IAAI,CAACJ;AACjC,CAAC;AAED,eAAe/C,kBAAkB","ignoreList":[]}