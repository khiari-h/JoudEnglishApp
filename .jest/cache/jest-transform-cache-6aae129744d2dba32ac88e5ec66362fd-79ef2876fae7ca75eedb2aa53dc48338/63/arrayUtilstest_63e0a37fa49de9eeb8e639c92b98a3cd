884fbbb2d5c6cf10e6108c9d83a37f4a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _arrayUtils = require("../../src/utils/arrayUtils");
var mockMath = Object.create(global.Math);
mockMath.random = function () {
  return 0.5;
};
global.Math = mockMath;
describe('arrayUtils', function () {
  beforeEach(function () {
    mockMath.random = function () {
      return 0.5;
    };
  });
  describe('shuffleArray', function () {
    it('devrait retourner une copie de l\'array pour un array vide', function () {
      var input = [];
      var result = (0, _arrayUtils.shuffleArray)(input);
      expect(result).toEqual([]);
      expect(result).not.toBe(input);
    });
    it('devrait retourner une copie de l\'array pour un array avec un seul élément', function () {
      var input = [1];
      var result = (0, _arrayUtils.shuffleArray)(input);
      expect(result).toEqual([1]);
      expect(result).not.toBe(input);
    });
    it('devrait mélanger un array avec plusieurs éléments', function () {
      var input = [1, 2, 3, 4, 5];
      var result = (0, _arrayUtils.shuffleArray)(input);
      expect(result).toHaveLength(5);
      expect(result).not.toBe(input);
      expect(result.sort()).toEqual(input.sort());
    });
    it('devrait gérer les arrays avec des éléments de différents types', function () {
      var input = [1, 'hello', {
        key: 'value'
      }, [1, 2, 3]];
      var result = (0, _arrayUtils.shuffleArray)(input);
      expect(result).toHaveLength(4);
      expect(result).not.toBe(input);
      expect(result.sort()).toEqual(input.sort());
    });
    it('devrait retourner un array vide pour des entrées invalides', function () {
      expect((0, _arrayUtils.shuffleArray)(null)).toEqual([]);
      expect((0, _arrayUtils.shuffleArray)(undefined)).toEqual([]);
      expect((0, _arrayUtils.shuffleArray)('not an array')).toEqual([]);
      expect((0, _arrayUtils.shuffleArray)(123)).toEqual([]);
    });
  });
  describe('shuffleAndTake', function () {
    it('devrait retourner un array vide pour un array vide', function () {
      var result = (0, _arrayUtils.shuffleAndTake)([], 5);
      expect(result).toEqual([]);
    });
    it('devrait retourner tous les éléments si count est supérieur à la taille', function () {
      var input = [1, 2, 3];
      var result = (0, _arrayUtils.shuffleAndTake)(input, 5);
      expect(result).toHaveLength(3);
      expect(result.sort()).toEqual(input.sort());
    });
    it('devrait retourner exactement count éléments', function () {
      var input = [1, 2, 3, 4, 5];
      var result = (0, _arrayUtils.shuffleAndTake)(input, 3);
      expect(result).toHaveLength(3);
      expect(result.sort()).toEqual([1, 2, 3, 4, 5].slice(0, 3).sort());
    });
    it('devrait gérer count = 0', function () {
      var input = [1, 2, 3, 4, 5];
      var result = (0, _arrayUtils.shuffleAndTake)(input, 0);
      expect(result).toEqual([]);
    });
    it('devrait gérer count négatif', function () {
      var input = [1, 2, 3, 4, 5];
      var result = (0, _arrayUtils.shuffleAndTake)(input, -1);
      expect(result).toEqual([]);
    });
  });
  describe('shuffleWithFallback', function () {
    it('devrait utiliser l\'array principal s\'il a assez d\'éléments', function () {
      var mainArray = [1, 2, 3, 4, 5];
      var fallbackArray = [10, 20, 30];
      var result = (0, _arrayUtils.shuffleWithFallback)(mainArray, fallbackArray, 3);
      expect(result).toHaveLength(3);
      expect(result.every(function (item) {
        return mainArray.includes(item);
      })).toBe(true);
    });
    it('devrait utiliser le fallback si l\'array principal est vide', function () {
      var mainArray = [];
      var fallbackArray = [10, 20, 30];
      var result = (0, _arrayUtils.shuffleWithFallback)(mainArray, fallbackArray, 2);
      expect(result).toHaveLength(2);
      expect(result.every(function (item) {
        return fallbackArray.includes(item);
      })).toBe(true);
    });
    it('devrait combiner les deux arrays si nécessaire', function () {
      var mainArray = [1, 2];
      var fallbackArray = [10, 20, 30];
      var result = (0, _arrayUtils.shuffleWithFallback)(mainArray, fallbackArray, 4);
      expect(result).toHaveLength(4);
      expect(result.every(function (item) {
        return [].concat(mainArray, fallbackArray).includes(item);
      })).toBe(true);
    });
    it('devrait gérer les arrays vides', function () {
      var result = (0, _arrayUtils.shuffleWithFallback)([], [], 5);
      expect(result).toEqual([]);
    });
  });
  describe('shuffleInPlace', function () {
    it('devrait modifier l\'array original', function () {
      var input = [1, 2, 3, 4, 5];
      var originalReference = input;
      var originalContent = [].concat(input);
      (0, _arrayUtils.shuffleInPlace)(input);
      expect(input).toBe(originalReference);
      expect(input).toHaveLength(5);
      expect(input.sort()).toEqual(originalContent.sort());
    });
    it('devrait ne rien faire pour un array vide', function () {
      var input = [];
      var originalReference = input;
      (0, _arrayUtils.shuffleInPlace)(input);
      expect(input).toBe(originalReference);
      expect(input).toEqual([]);
    });
    it('devrait ne rien faire pour un array avec un seul élément', function () {
      var input = [1];
      var originalReference = input;
      (0, _arrayUtils.shuffleInPlace)(input);
      expect(input).toBe(originalReference);
      expect(input).toEqual([1]);
    });
    it('devrait gérer les arrays avec des objets', function () {
      var input = [{
        id: 1
      }, {
        id: 2
      }, {
        id: 3
      }];
      var originalReference = input;
      var originalContent = [].concat(input);
      (0, _arrayUtils.shuffleInPlace)(input);
      expect(input).toBe(originalReference);
      expect(input).toHaveLength(3);
      expect(input.sort(function (a, b) {
        return a.id - b.id;
      })).toEqual(originalContent.sort(function (a, b) {
        return a.id - b.id;
      }));
    });
  });
  describe('Intégration - Utilisation réelle', function () {
    it('devrait simuler l\'utilisation dans useRevisionData', function () {
      var learnedWords = [{
        id: 1,
        word: 'hello',
        translation: 'bonjour'
      }, {
        id: 2,
        word: 'world',
        translation: 'monde'
      }, {
        id: 3,
        word: 'test',
        translation: 'test'
      }, {
        id: 4,
        word: 'example',
        translation: 'exemple'
      }, {
        id: 5,
        word: 'sample',
        translation: 'échantillon'
      }];
      var shuffledWords = (0, _arrayUtils.shuffleArray)(learnedWords);
      var selectedWords = (0, _arrayUtils.shuffleAndTake)(shuffledWords, 3);
      expect(selectedWords).toHaveLength(3);
      expect(selectedWords.every(function (word) {
        return learnedWords.includes(word);
      })).toBe(true);
    });
    it('devrait simuler l\'utilisation dans useWordGames', function () {
      var gameWords = ['apple', 'banana', 'cherry', 'date', 'elderberry'];
      var shuffledOptions = (0, _arrayUtils.shuffleArray)(gameWords);
      expect(shuffledOptions).toHaveLength(5);
      expect(shuffledOptions.sort()).toEqual(gameWords.sort());
    });
    it('devrait simuler l\'utilisation dans useRevisionManager', function () {
      var oldWords = [{
        id: 1,
        word: 'old1'
      }, {
        id: 2,
        word: 'old2'
      }];
      var newWords = [{
        id: 3,
        word: 'new1'
      }, {
        id: 4,
        word: 'new2'
      }, {
        id: 5,
        word: 'new3'
      }];
      var randomNewWords = (0, _arrayUtils.shuffleAndTake)(newWords, 2);
      var finalSelection = (0, _arrayUtils.shuffleArray)([].concat(oldWords, (0, _toConsumableArray2.default)(randomNewWords)));
      expect(finalSelection).toHaveLength(4);
      expect(finalSelection.every(function (word) {
        return [].concat(oldWords, newWords).includes(word);
      })).toBe(true);
    });
  });
  describe('Performance et stabilité', function () {
    it('devrait gérer les grands arrays', function () {
      var largeArray = Array.from({
        length: 1000
      }, function (_, i) {
        return i;
      });
      var result = (0, _arrayUtils.shuffleArray)(largeArray);
      expect(result).toHaveLength(1000);
      expect(result).not.toBe(largeArray);
      expect(result.sort()).toEqual(largeArray.sort());
    });
    it('devrait être déterministe avec le même seed Math.random', function () {
      mockMath.random = function () {
        return 0.1;
      };
      var input = [1, 2, 3, 4, 5];
      var result1 = (0, _arrayUtils.shuffleArray)(input);
      mockMath.random = function () {
        return 0.1;
      };
      var result2 = (0, _arrayUtils.shuffleArray)(input);
      expect(result1).toEqual(result2);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,