{"version":3,"names":["Object","defineProperty","exports","value","useComposedEventHandler","_useEvent","require","_useHandler2","_WorkletEventHandler","_worklet_1580845925693_init_data","code","location","sourceMap","version","handlers","workletsRecord","composedEventNames","Set","workletsMap","filter","h","forEach","handler","_ref","workletEventHandler","WorkletEventHandler","eventNames","eventName","add","push","worklet","handlerName","length","_useHandler","useHandler","doDependenciesDiffer","useEvent","_e","global","Error","useComposedEventHandlerTs1","event","__closure","__workletHash","__initData","__stackDetails","Array","from"],"sources":["useComposedEventHandler.ts"],"sourcesContent":["'use strict';\nimport { useEvent } from './useEvent';\nimport { useHandler } from './useHandler';\nimport { WorkletEventHandler } from '../WorkletEventHandler';\nimport type { ReanimatedEvent } from './commonTypes';\nimport type { WorkletFunction } from '../commonTypes';\nimport type { EventHandlerProcessed, EventHandlerInternal } from './useEvent';\n\ntype ComposedHandlerProcessed<\n  Event extends object,\n  Context extends Record<string, unknown> = Record<string, unknown>,\n> = EventHandlerProcessed<Event, Context>;\n\ntype ComposedHandlerInternal<Event extends object> =\n  EventHandlerInternal<Event>;\n\n/**\n * Lets you compose multiple event handlers based on\n * [useEvent](https://docs.swmansion.com/react-native-reanimated/docs/advanced/useEvent)\n * hook.\n *\n * @param handlers - An array of event handlers created using\n *   [useEvent](https://docs.swmansion.com/react-native-reanimated/docs/advanced/useEvent)\n *   hook.\n * @returns An object you need to pass to a coresponding \"onEvent\" prop on an\n *   `Animated` component (for example handlers responsible for `onScroll` event\n *   go to `onScroll` prop).\n * @see https://docs.swmansion.com/react-native-reanimated/docs/advanced/useComposedEventHandler\n */\n// @ts-expect-error This overload is required by our API.\nexport function useComposedEventHandler<\n  Event extends object,\n  Context extends Record<string, unknown>,\n>(\n  handlers: (EventHandlerProcessed<Event, Context> | null)[]\n): ComposedHandlerProcessed<Event, Context>;\n\nexport function useComposedEventHandler<\n  Event extends object,\n  Context extends Record<string, unknown>,\n>(handlers: (EventHandlerProcessed<Event, Context> | null)[]) {\n  // Record of handlers' worklets to calculate deps diffs. We use the record type to match the useHandler API requirements\n  const workletsRecord: Record<string, WorkletFunction> = {};\n  // Summed event names for registration\n  const composedEventNames = new Set<string>();\n  // Map that holds worklets for specific handled events\n  const workletsMap: {\n    [key: string]: ((event: ReanimatedEvent<Event>) => void)[];\n  } = {};\n\n  handlers\n    .filter((h) => h !== null)\n    .forEach((handler) => {\n      // EventHandlerProcessed is the return type of useEvent and has to be force casted to EventHandlerInternal, because we need WorkletEventHandler object\n      const { workletEventHandler } =\n        handler as unknown as EventHandlerInternal<Context>;\n      if (workletEventHandler instanceof WorkletEventHandler) {\n        workletEventHandler.eventNames.forEach((eventName) => {\n          composedEventNames.add(eventName);\n\n          if (workletsMap[eventName]) {\n            workletsMap[eventName].push(workletEventHandler.worklet);\n          } else {\n            workletsMap[eventName] = [workletEventHandler.worklet];\n          }\n\n          const handlerName = eventName + `${workletsMap[eventName].length}`;\n          workletsRecord[handlerName] =\n            workletEventHandler.worklet as WorkletFunction;\n        });\n      }\n    });\n\n  const { doDependenciesDiffer } = useHandler(workletsRecord);\n\n  return useEvent<Event, Context>(\n    (event) => {\n      'worklet';\n      if (workletsMap[event.eventName]) {\n        workletsMap[event.eventName].forEach((worklet) => worklet(event));\n      }\n    },\n    Array.from(composedEventNames),\n    doDependenciesDiffer\n  ) as unknown as ComposedHandlerInternal<Event>;\n}\n"],"mappings":"AAAA,YAAY;;AAACA,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,KAAA;AAAA;AAAAD,OAAA,CAAAE,uBAAA,GAAAA,uBAAA;AACb,IAAAC,SAAA,GAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AACA,IAAAE,oBAAA,GAAAF,OAAA;AAA6D,IAAAG,gCAAA;EAAAC,IAAA;EAAAC,QAAA;EAAAC,SAAA;EAAAC,OAAA;AAAA;AAkCtD,SAAST,uBAAuBA,CAGrCU,QAA0D,EAAE;EAE5D,IAAMC,cAA+C,GAAG,CAAC,CAAC;EAE1D,IAAMC,kBAAkB,GAAG,IAAIC,GAAG,CAAS,CAAC;EAE5C,IAAMC,WAEL,GAAG,CAAC,CAAC;EAENJ,QAAQ,CACLK,MAAM,CAAC,UAACC,CAAC;IAAA,OAAKA,CAAC,KAAK,IAAI;EAAA,EAAC,CACzBC,OAAO,CAAC,UAACC,OAAO,EAAK;IAEpB,IAAAC,IAAA,GACED,OAAO;MADDE,mBAAmB,GAAAD,IAAA,CAAnBC,mBAAmB;IAE3B,IAAIA,mBAAmB,YAAYC,wCAAmB,EAAE;MACtDD,mBAAmB,CAACE,UAAU,CAACL,OAAO,CAAC,UAACM,SAAS,EAAK;QACpDX,kBAAkB,CAACY,GAAG,CAACD,SAAS,CAAC;QAEjC,IAAIT,WAAW,CAACS,SAAS,CAAC,EAAE;UAC1BT,WAAW,CAACS,SAAS,CAAC,CAACE,IAAI,CAACL,mBAAmB,CAACM,OAAO,CAAC;QAC1D,CAAC,MAAM;UACLZ,WAAW,CAACS,SAAS,CAAC,GAAG,CAACH,mBAAmB,CAACM,OAAO,CAAC;QACxD;QAEA,IAAMC,WAAW,GAAGJ,SAAS,GAAG,GAAGT,WAAW,CAACS,SAAS,CAAC,CAACK,MAAM,EAAE;QAClEjB,cAAc,CAACgB,WAAW,CAAC,GACzBP,mBAAmB,CAACM,OAA0B;MAClD,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EAEJ,IAAAG,WAAA,GAAiC,IAAAC,uBAAU,EAACnB,cAAc,CAAC;IAAnDoB,oBAAoB,GAAAF,WAAA,CAApBE,oBAAoB;EAE5B,OAAO,IAAAC,kBAAQ,EACb;IAAA,IAAAC,EAAA,QAAAC,MAAA,CAAAC,KAAA;IAAA,IAAAC,0BAAA,YAAAA,2BAACC,KAAK,EAAK;MAET,IAAIvB,WAAW,CAACuB,KAAK,CAACd,SAAS,CAAC,EAAE;QAChCT,WAAW,CAACuB,KAAK,CAACd,SAAS,CAAC,CAACN,OAAO,CAAC,UAACS,OAAO;UAAA,OAAKA,OAAO,CAACW,KAAK,CAAC;QAAA,EAAC;MACnE;IACF,CAAC;IAAAD,0BAAA,CAAAE,SAAA;MAAAxB,WAAA,EAHKA;IAAW;IAAAsB,0BAAA,CAAAG,aAAA;IAAAH,0BAAA,CAAAI,UAAA,GAAAnC,gCAAA;IAAA+B,0BAAA,CAAAK,cAAA,GAAAR,EAAA;IAAA,OAAAG,0BAAA;EAAA,CAFjB,IAMAM,KAAK,CAACC,IAAI,CAAC/B,kBAAkB,CAAC,EAC9BmB,oBACF,CAAC;AACH","ignoreList":[]}