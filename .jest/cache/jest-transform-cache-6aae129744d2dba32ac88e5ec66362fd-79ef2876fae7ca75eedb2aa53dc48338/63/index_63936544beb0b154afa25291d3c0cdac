3e0de0b59083b4b100e31adb80d911e9
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ProgressCard = _interopRequireDefault(require("../../../../components/ui/ProgressCard"));
var _grammarStats = require("../../../../utils/grammar/grammarStats");
var _react = require("react");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
var GrammarProgress = function GrammarProgress(_ref) {
  var grammarData = _ref.grammarData,
    completedExercises = _ref.completedExercises,
    levelColor = _ref.levelColor,
    _ref$expanded = _ref.expanded,
    expanded = _ref$expanded === void 0 ? false : _ref$expanded,
    onToggleExpand = _ref.onToggleExpand,
    onRulePress = _ref.onRulePress;
  var dataArray = (0, _react.useMemo)(function () {
    if (!grammarData) return [];
    if (Array.isArray(grammarData)) {
      return grammarData;
    }
    if (typeof grammarData === 'object') {
      return grammarData.rules || grammarData.categories || grammarData.exercises || grammarData.grammar || grammarData.items || [];
    }
    return [];
  }, [grammarData]);
  var statsData = (0, _react.useMemo)(function () {
    var totalExercisesCount = (0, _grammarStats.calculateTotalExercises)(dataArray);
    var completedExercisesCount = (0, _grammarStats.calculateCompletedExercisesCount)(completedExercises);
    var totalProgress = (0, _grammarStats.calculateTotalProgress)(dataArray, completedExercises);
    var ruleProgressData = (0, _grammarStats.calculateRuleProgress)(dataArray, completedExercises);
    return {
      totalExercisesCount: totalExercisesCount,
      completedExercisesCount: completedExercisesCount,
      totalProgress: totalProgress,
      ruleProgressData: ruleProgressData
    };
  }, [dataArray, completedExercises]);
  var formattedRuleData = (0, _react.useMemo)(function () {
    return statsData.ruleProgressData.map(function (rule) {
      return {
        title: rule.title,
        completed: rule.completedExercises,
        total: rule.totalExercises,
        progress: rule.progress
      };
    });
  }, [statsData.ruleProgressData]);
  return (0, _jsxRuntime.jsx)(_ProgressCard.default, {
    title: "Progression",
    progress: statsData.totalProgress,
    completed: statsData.completedExercisesCount,
    total: statsData.totalExercisesCount,
    unit: "exercices",
    levelColor: levelColor,
    expandable: true,
    expanded: expanded,
    onToggleExpand: onToggleExpand,
    categoryData: formattedRuleData,
    onCategoryPress: onRulePress
  });
};
GrammarProgress.propTypes = {
  grammarData: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.shape({
    rules: _propTypes.default.array,
    categories: _propTypes.default.array,
    exercises: _propTypes.default.array,
    grammar: _propTypes.default.array,
    items: _propTypes.default.array
  })]).isRequired,
  completedExercises: _propTypes.default.object,
  levelColor: _propTypes.default.string,
  expanded: _propTypes.default.bool,
  onToggleExpand: _propTypes.default.func,
  onRulePress: _propTypes.default.func
};
var _default = exports.default = GrammarProgress;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,