c7a2df6aa8a1364516118b4add55339c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.storeData = exports.storageService = exports.resetStorage = exports.removeFromStorage = exports.removeData = exports.readFromStorage = exports.isStorageAvailable = exports.getStorageInfo = exports.getMultipleData = exports.getData = exports.clearAllData = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _timeConstants = require("./timeConstants.js");
var _timeUtils = require("./timeUtils.js");
var isStorageAvailable = exports.isStorageAvailable = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* () {
    try {
      var test = '__storage_test__';
      yield _asyncStorage.default.setItem(test, test);
      yield _asyncStorage.default.removeItem(test);
      return true;
    } catch (e) {
      console.warn('AsyncStorage not available:', e.message);
      return false;
    }
  });
  return function isStorageAvailable() {
    return _ref.apply(this, arguments);
  };
}();
var storeData = exports.storeData = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (key, value) {
    try {
      if (value === undefined || value === null) {
        yield _asyncStorage.default.removeItem(key);
        return true;
      }
      var jsonValue = JSON.stringify(value);
      yield _asyncStorage.default.setItem(key, jsonValue);
      return true;
    } catch (error) {
      console.error('Error storing data:', error);
      return false;
    }
  });
  return function storeData(_x, _x2) {
    return _ref2.apply(this, arguments);
  };
}();
var getData = exports.getData = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (key) {
    try {
      var jsonValue = yield _asyncStorage.default.getItem(key);
      return jsonValue != null ? JSON.parse(jsonValue) : null;
    } catch (error) {
      console.error('Error getting data:', error);
      return null;
    }
  });
  return function getData(_x3) {
    return _ref3.apply(this, arguments);
  };
}();
var removeData = exports.removeData = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (key) {
    try {
      yield _asyncStorage.default.removeItem(key);
      return true;
    } catch (error) {
      console.error('Error removing data:', error);
      return false;
    }
  });
  return function removeData(_x4) {
    return _ref4.apply(this, arguments);
  };
}();
var getMultipleData = exports.getMultipleData = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (keys) {
    try {
      var items = yield _asyncStorage.default.multiGet(keys);
      return items.reduce(function (result, _ref6) {
        var _ref7 = (0, _slicedToArray2.default)(_ref6, 2),
          key = _ref7[0],
          value = _ref7[1];
        result[key] = value != null ? JSON.parse(value) : null;
        return result;
      }, {});
    } catch (error) {
      console.error('Error getting multiple data:', error);
      return {};
    }
  });
  return function getMultipleData(_x5) {
    return _ref5.apply(this, arguments);
  };
}();
var clearAllData = exports.clearAllData = function () {
  var _ref8 = (0, _asyncToGenerator2.default)(function* () {
    try {
      yield _asyncStorage.default.clear();
      return true;
    } catch (error) {
      console.error('Error clearing all data:', error);
      return false;
    }
  });
  return function clearAllData() {
    return _ref8.apply(this, arguments);
  };
}();
var validateStorageStructure = function validateStorageStructure(data) {
  if (!data || typeof data !== 'object') return false;
  var hasVersion = typeof data.version === 'string';
  var hasData = typeof data.data === 'object' && data.data !== null;
  var hasTimestamp = typeof data.lastModified === 'number';
  return hasVersion && hasData && hasTimestamp;
};
var migrateOldData = function migrateOldData(oldData) {
  if (validateStorageStructure(oldData)) {
    return oldData;
  }
  var migratedData = Object.assign({}, _timeConstants.DEFAULT_STATS);
  if (oldData && typeof oldData === 'object') {
    if (oldData.vocabulary_classic || oldData.vocabulary_fast) {
      var classicTime = oldData.vocabulary_classic || 0;
      var fastTime = oldData.vocabulary_fast || 0;
      migratedData.vocabulary = classicTime + fastTime;
    }
    Object.keys(_timeConstants.DEFAULT_STATS).forEach(function (exerciseType) {
      if (exerciseType !== 'vocabulary' && oldData[exerciseType]) {
        migratedData[exerciseType] = oldData[exerciseType];
      }
    });
  }
  return {
    version: _timeConstants.STORAGE_CONFIG.VERSION,
    data: (0, _timeUtils.sanitizeTimeStats)(migratedData),
    lastModified: Date.now()
  };
};
var writeToStorage = function () {
  var _ref9 = (0, _asyncToGenerator2.default)(function* (key, data) {
    yield _asyncStorage.default.setItem(key, JSON.stringify(data));
  });
  return function writeToStorage(_x6, _x7) {
    return _ref9.apply(this, arguments);
  };
}();
var _readFromStorage = exports.readFromStorage = function () {
  var _ref0 = (0, _asyncToGenerator2.default)(function* () {
    var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _timeConstants.STORAGE_CONFIG.KEY;
    var available = yield isStorageAvailable();
    if (!available) {
      return null;
    }
    try {
      var rawData = yield _asyncStorage.default.getItem(key);
      if (!rawData) {
        return null;
      }
      var parsedData = JSON.parse(rawData);
      var migratedData = migrateOldData(parsedData);
      if (!validateStorageStructure(parsedData)) {
        yield writeToStorage(key, migratedData.data);
      }
      return migratedData;
    } catch (error) {
      console.error(`Error reading from storage (${key}):`, error);
      if (key !== _timeConstants.STORAGE_CONFIG.BACKUP_KEY) {
        var backup = yield _readFromStorage(_timeConstants.STORAGE_CONFIG.BACKUP_KEY);
        if (backup) {
          console.info('Restored from backup');
          return backup;
        }
      }
      return null;
    }
  });
  return function readFromStorage() {
    return _ref0.apply(this, arguments);
  };
}();
var removeFromStorage = exports.removeFromStorage = function () {
  var _ref1 = (0, _asyncToGenerator2.default)(function* () {
    var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _timeConstants.STORAGE_CONFIG.KEY;
    var available = yield isStorageAvailable();
    if (!available) {
      return false;
    }
    try {
      yield _asyncStorage.default.removeItem(key);
      return true;
    } catch (error) {
      console.error(`Error removing from storage (${key}):`, error);
      return false;
    }
  });
  return function removeFromStorage() {
    return _ref1.apply(this, arguments);
  };
}();
var resetStorage = exports.resetStorage = function resetStorage() {
  return writeToStorage(_timeConstants.STORAGE_CONFIG.KEY, _timeConstants.DEFAULT_STATS);
};
var getStorageInfo = exports.getStorageInfo = function () {
  var _ref10 = (0, _asyncToGenerator2.default)(function* () {
    var available = yield isStorageAvailable();
    if (!available) {
      return {
        available: false
      };
    }
    try {
      var data = yield _readFromStorage();
      var backupData = yield _asyncStorage.default.getItem(_timeConstants.STORAGE_CONFIG.BACKUP_KEY);
      var hasBackup = Boolean(backupData);
      var mainData = yield _asyncStorage.default.getItem(_timeConstants.STORAGE_CONFIG.KEY);
      return {
        available: true,
        hasData: Boolean(data),
        hasBackup: hasBackup,
        version: (data == null ? void 0 : data.version) || 'unknown',
        lastModified: data != null && data.lastModified ? new Date(data.lastModified) : null,
        dataSize: (mainData == null ? void 0 : mainData.length) || 0
      };
    } catch (error) {
      return {
        available: true,
        error: error.message
      };
    }
  });
  return function getStorageInfo() {
    return _ref10.apply(this, arguments);
  };
}();
var storageService = exports.storageService = {
  keys: {
    USER_PROGRESS: 'userProgress',
    USER_SETTINGS: 'userSettings',
    LAST_ACTIVITY: 'lastActivity',
    CURRENT_LEVEL: 'currentLevel',
    STREAK_DATA: 'streakData',
    COMPLETED_EXERCISES: 'completedExercises'
  },
  saveProgress: function saveProgress(progressData) {
    return storeData(storageService.keys.USER_PROGRESS, progressData);
  },
  getProgress: function getProgress() {
    return getData(storageService.keys.USER_PROGRESS);
  },
  saveSettings: function saveSettings(settings) {
    return storeData(storageService.keys.USER_SETTINGS, settings);
  },
  getSettings: function getSettings() {
    return getData(storageService.keys.USER_SETTINGS);
  },
  markExerciseCompleted: function () {
    var _markExerciseCompleted = (0, _asyncToGenerator2.default)(function* (exerciseId, level, score) {
      try {
        var completedExercises = (yield getData(storageService.keys.COMPLETED_EXERCISES)) || {};
        completedExercises[exerciseId] = {
          level: level,
          score: score,
          completedAt: new Date().toISOString()
        };
        yield storeData(storageService.keys.COMPLETED_EXERCISES, completedExercises);
        return true;
      } catch (error) {
        console.error('Error marking exercise completed:', error);
        return false;
      }
    });
    function markExerciseCompleted(_x8, _x9, _x0) {
      return _markExerciseCompleted.apply(this, arguments);
    }
    return markExerciseCompleted;
  }(),
  isExerciseCompleted: function () {
    var _isExerciseCompleted = (0, _asyncToGenerator2.default)(function* (exerciseId) {
      var completedExercises = (yield getData(storageService.keys.COMPLETED_EXERCISES)) || {};
      return Boolean(completedExercises[exerciseId]);
    });
    function isExerciseCompleted(_x1) {
      return _isExerciseCompleted.apply(this, arguments);
    }
    return isExerciseCompleted;
  }(),
  updateStreak: function () {
    var _updateStreak = (0, _asyncToGenerator2.default)(function* () {
      try {
        var streakData = (yield getData(storageService.keys.STREAK_DATA)) || {
          currentStreak: 0,
          lastLoginDate: null,
          maxStreak: 0
        };
        var now = new Date();
        var today = new Date(now.getFullYear(), now.getMonth(), now.getDate()).getTime();
        if (!streakData.lastLoginDate) {
          streakData.currentStreak = 1;
          streakData.maxStreak = 1;
          streakData.lastLoginDate = today;
        } else {
          var lastLogin = new Date(streakData.lastLoginDate).getTime();
          var oneDayMs = 24 * 60 * 60 * 1000;
          if (today - lastLogin === oneDayMs) {
            streakData.currentStreak += 1;
            streakData.maxStreak = Math.max(streakData.maxStreak, streakData.currentStreak);
            streakData.lastLoginDate = today;
          } else if (today === lastLogin) {} else {
            streakData.currentStreak = 1;
            streakData.lastLoginDate = today;
          }
        }
        yield storeData(storageService.keys.STREAK_DATA, streakData);
        return streakData;
      } catch (error) {
        console.error('Error updating streak:', error);
        return null;
      }
    });
    function updateStreak() {
      return _updateStreak.apply(this, arguments);
    }
    return updateStreak;
  }(),
  getStreak: function getStreak() {
    return getData(storageService.keys.STREAK_DATA) || {
      currentStreak: 0,
      lastLoginDate: null,
      maxStreak: 0
    };
  },
  resetAllData: function resetAllData() {
    return clearAllData();
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,