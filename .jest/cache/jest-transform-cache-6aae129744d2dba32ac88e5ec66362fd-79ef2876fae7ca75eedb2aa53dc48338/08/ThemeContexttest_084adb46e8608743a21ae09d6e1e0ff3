39d62909a083639f35e17a2392b52eb6
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  return Object.assign({}, RN, {
    useColorScheme: jest.fn(function () {
      return 'light';
    })
  });
});
_getJestObj().mock('../../src/utils/storageUtils', function () {
  return {
    storeData: jest.fn(function () {
      return Promise.resolve();
    }),
    getData: jest.fn(function () {
      return Promise.resolve(null);
    })
  };
});
_getJestObj().mock('../../src/utils/constants', function () {
  return {
    COLORS: {
      background: '#FFFFFF',
      surface: '#F0F0F0',
      primary: '#007AFF',
      text: '#000000',
      textSecondary: '#666666',
      border: '#CCCCCC',
      divider: '#E0E0E0',
      disabled: '#999999',
      icon: '#000000',
      error: '#ff3b30'
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _ThemeContext = require("../../src/contexts/ThemeContext");
var _storageUtils = require("../../src/utils/storageUtils");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var TestComponent = function TestComponent() {
  var _React$useContext = _react.default.useContext(_ThemeContext.ThemeContext),
    theme = _React$useContext.theme,
    isDarkTheme = _React$useContext.isDarkTheme,
    colors = _React$useContext.colors,
    loaded = _React$useContext.loaded,
    spacing = _React$useContext.spacing,
    typography = _React$useContext.typography,
    borderRadius = _React$useContext.borderRadius,
    shadows = _React$useContext.shadows,
    setTheme = _React$useContext.setTheme,
    toggleTheme = _React$useContext.toggleTheme,
    resetToSystemTheme = _React$useContext.resetToSystemTheme;
  if (!loaded) {
    return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "loading-status",
      children: "Loading Theme..."
    });
  }
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [(0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "current-theme",
      children: ["Theme: ", theme]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "is-dark-theme",
      children: ["Is Dark: ", isDarkTheme ? 'Yes' : 'No']
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "background-color",
      children: ["Background: ", colors.background]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "text-color",
      children: ["Text: ", colors.text]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "spacing-md",
      children: ["Spacing: ", spacing.md]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "typography-md-font-size",
      children: ["Font Size: ", typography.fontSizes.md]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "border-radius-md",
      children: ["Border Radius: ", borderRadius.md]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "shadows-md-elevation",
      children: ["Shadows: ", shadows.md.elevation]
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Set Light",
      onPress: function onPress() {
        return setTheme('light');
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Set Dark",
      onPress: function onPress() {
        return setTheme('dark');
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Set System",
      onPress: function onPress() {
        return setTheme('system');
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Toggle Theme",
      onPress: toggleTheme
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Reset to System",
      onPress: resetToSystemTheme
    })]
  });
};
var flattenChildren = function flattenChildren(children) {
  return Array.isArray(children) ? children.join('') : children;
};
describe('ThemeProvider', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _storageUtils.getData.mockResolvedValue(null);
    _reactNative2.useColorScheme.mockReturnValue('light');
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.runOnlyPendingTimers();
    jest.useRealTimers();
  });
  it('should load default system theme when no saved theme exists', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    expect(_reactNative.screen.getByTestId('loading-status')).toBeTruthy();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    expect(_reactNative.screen.queryByTestId('loading-status')).toBeNull();
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: system');
    expect(flattenChildren(_reactNative.screen.getByTestId('is-dark-theme').props.children)).toBe('Is Dark: No');
    expect(flattenChildren(_reactNative.screen.getByTestId('background-color').props.children)).toBe('Background: #FFFFFF');
    expect(_storageUtils.getData).toHaveBeenCalledWith('appTheme');
  }));
  it('should load saved theme from storage', (0, _asyncToGenerator2.default)(function* () {
    _storageUtils.getData.mockResolvedValueOnce('dark');
    _reactNative2.useColorScheme.mockReturnValue('light');
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: dark');
    expect(flattenChildren(_reactNative.screen.getByTestId('is-dark-theme').props.children)).toBe('Is Dark: Yes');
    expect(flattenChildren(_reactNative.screen.getByTestId('background-color').props.children)).toBe('Background: #121212');
    expect(flattenChildren(_reactNative.screen.getByTestId('text-color').props.children)).toBe('Text: #FFFFFF');
  }));
  it('should set theme to light and save it', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Light'));
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: light');
    expect(flattenChildren(_reactNative.screen.getByTestId('background-color').props.children)).toBe('Background: #FFFFFF');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    expect(_storageUtils.storeData).toHaveBeenCalledWith('appTheme', 'light');
  }));
  it('should set theme to dark and save it', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Dark'));
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: dark');
    expect(flattenChildren(_reactNative.screen.getByTestId('background-color').props.children)).toBe('Background: #121212');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    expect(_storageUtils.storeData).toHaveBeenCalledWith('appTheme', 'dark');
  }));
  it('should reset to system theme and save it', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Dark'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Reset to System'));
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: system');
    expect(flattenChildren(_reactNative.screen.getByTestId('is-dark-theme').props.children)).toBe('Is Dark: No');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    expect(_storageUtils.storeData).toHaveBeenCalledWith('appTheme', 'system');
  }));
  it('should toggle from light to dark theme', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Light'));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Toggle Theme'));
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: dark');
  }));
  it('should toggle from dark to light theme', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Dark'));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Toggle Theme'));
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: light');
  }));
  it('should toggle from system to light theme if systemColorScheme is dark', (0, _asyncToGenerator2.default)(function* () {
    _reactNative2.useColorScheme.mockReturnValue('dark');
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: system');
    expect(flattenChildren(_reactNative.screen.getByTestId('is-dark-theme').props.children)).toBe('Is Dark: Yes');
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Toggle Theme'));
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: light');
    expect(flattenChildren(_reactNative.screen.getByTestId('is-dark-theme').props.children)).toBe('Is Dark: No');
  }));
  it('should toggle from system to dark theme if systemColorScheme is light', (0, _asyncToGenerator2.default)(function* () {
    _reactNative2.useColorScheme.mockReturnValue('light');
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: system');
    expect(flattenChildren(_reactNative.screen.getByTestId('is-dark-theme').props.children)).toBe('Is Dark: No');
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Toggle Theme'));
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: dark');
    expect(flattenChildren(_reactNative.screen.getByTestId('is-dark-theme').props.children)).toBe('Is Dark: Yes');
  }));
  it('should correctly provide static memoized values', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    expect(flattenChildren(_reactNative.screen.getByTestId('spacing-md').props.children)).toBe('Spacing: 16');
    expect(flattenChildren(_reactNative.screen.getByTestId('typography-md-font-size').props.children)).toBe('Font Size: 16');
    expect(flattenChildren(_reactNative.screen.getByTestId('border-radius-md').props.children)).toBe('Border Radius: 8');
  }));
  it('should apply correct shadows based on theme', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    expect(flattenChildren(_reactNative.screen.getByTestId('is-dark-theme').props.children)).toBe('Is Dark: No');
    expect(flattenChildren(_reactNative.screen.getByTestId('shadows-md-elevation').props.children)).toBe('Shadows: 4');
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Dark'));
    expect(flattenChildren(_reactNative.screen.getByTestId('is-dark-theme').props.children)).toBe('Is Dark: Yes');
    expect(flattenChildren(_reactNative.screen.getByTestId('shadows-md-elevation').props.children)).toBe('Shadows: 4');
  }));
  it('should handle storage read error gracefully and proceed with default theme', (0, _asyncToGenerator2.default)(function* () {
    _storageUtils.getData.mockRejectedValueOnce(new Error('Storage read failed'));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    expect(_reactNative.screen.queryByTestId('loading-status')).toBeNull();
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: system');
  }));
  it('should not save theme if not loaded', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    expect(_reactNative.screen.queryByText('Set Dark')).toBeNull();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Dark'));
    expect(_storageUtils.storeData).not.toHaveBeenCalled();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_storageUtils.storeData).toHaveBeenCalledTimes(1);
    expect(_storageUtils.storeData).toHaveBeenCalledWith('appTheme', 'dark');
  }));
  it('should debounce theme saving', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Light'));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Dark'));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set System'));
    expect(_storageUtils.storeData).not.toHaveBeenCalled();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.advanceTimersByTime(300);
    }));
    expect(_storageUtils.storeData).toHaveBeenCalledTimes(1);
    expect(_storageUtils.storeData).toHaveBeenCalledWith('appTheme', 'system');
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJSTiIsImplc3QiLCJyZXF1aXJlQWN0dWFsIiwiT2JqZWN0IiwiYXNzaWduIiwidXNlQ29sb3JTY2hlbWUiLCJmbiIsInN0b3JlRGF0YSIsIlByb21pc2UiLCJyZXNvbHZlIiwiZ2V0RGF0YSIsIkNPTE9SUyIsImJhY2tncm91bmQiLCJzdXJmYWNlIiwicHJpbWFyeSIsInRleHQiLCJ0ZXh0U2Vjb25kYXJ5IiwiYm9yZGVyIiwiZGl2aWRlciIsImRpc2FibGVkIiwiaWNvbiIsImVycm9yIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfcmVhY3ROYXRpdmUyIiwiX1RoZW1lQ29udGV4dCIsIl9zdG9yYWdlVXRpbHMiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwiVGVzdENvbXBvbmVudCIsIl9SZWFjdCR1c2VDb250ZXh0IiwiUmVhY3QiLCJ1c2VDb250ZXh0IiwiVGhlbWVDb250ZXh0IiwidGhlbWUiLCJpc0RhcmtUaGVtZSIsImNvbG9ycyIsImxvYWRlZCIsInNwYWNpbmciLCJ0eXBvZ3JhcGh5IiwiYm9yZGVyUmFkaXVzIiwic2hhZG93cyIsInNldFRoZW1lIiwidG9nZ2xlVGhlbWUiLCJyZXNldFRvU3lzdGVtVGhlbWUiLCJqc3giLCJUZXh0IiwidGVzdElEIiwiY2hpbGRyZW4iLCJqc3hzIiwiRnJhZ21lbnQiLCJtZCIsImZvbnRTaXplcyIsImVsZXZhdGlvbiIsIkJ1dHRvbiIsInRpdGxlIiwib25QcmVzcyIsImZsYXR0ZW5DaGlsZHJlbiIsIkFycmF5IiwiaXNBcnJheSIsImpvaW4iLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJtb2NrUmV0dXJuVmFsdWUiLCJ1c2VGYWtlVGltZXJzIiwiYWZ0ZXJFYWNoIiwicnVuT25seVBlbmRpbmdUaW1lcnMiLCJ1c2VSZWFsVGltZXJzIiwiaXQiLCJkZWZhdWx0IiwicmVuZGVyIiwiVGhlbWVQcm92aWRlciIsImV4cGVjdCIsInNjcmVlbiIsImdldEJ5VGVzdElkIiwidG9CZVRydXRoeSIsImFjdCIsInJ1bkFsbFRpbWVycyIsInF1ZXJ5QnlUZXN0SWQiLCJ0b0JlTnVsbCIsInByb3BzIiwidG9CZSIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwibW9ja1Jlc29sdmVkVmFsdWVPbmNlIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJnZXRCeVRleHQiLCJtb2NrUmVqZWN0ZWRWYWx1ZU9uY2UiLCJFcnJvciIsInF1ZXJ5QnlUZXh0Iiwibm90IiwidG9IYXZlQmVlbkNhbGxlZCIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsImFkdmFuY2VUaW1lcnNCeVRpbWUiXSwic291cmNlcyI6WyJUaGVtZUNvbnRleHQudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvX190ZXN0c19fL1RoZW1lQ29udGV4dC50ZXN0LmpzIC0gVkVSU0lPTiBBTcOJTElPUsOJRVxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgc2NyZWVuLCBhY3QsIGZpcmVFdmVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IFRleHQsIEJ1dHRvbiB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBUaGVtZVByb3ZpZGVyLCBUaGVtZUNvbnRleHQgfSBmcm9tICcuLi8uLi9zcmMvY29udGV4dHMvVGhlbWVDb250ZXh0JztcbmltcG9ydCB7IHVzZUNvbG9yU2NoZW1lIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IHN0b3JlRGF0YSwgZ2V0RGF0YSB9IGZyb20gJy4uLy4uL3NyYy91dGlscy9zdG9yYWdlVXRpbHMnO1xuXG4vLyBNb2NrIGRlIGB1c2VDb2xvclNjaGVtZWAgZGUgUmVhY3QgTmF0aXZlXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZScsICgpID0+IHtcbiAgICBjb25zdCBSTiA9IGplc3QucmVxdWlyZUFjdHVhbCgncmVhY3QtbmF0aXZlJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4uUk4sXG4gICAgICAgIHVzZUNvbG9yU2NoZW1lOiBqZXN0LmZuKCgpID0+ICdsaWdodCcpLFxuICAgIH07XG59KTtcblxuLy8gTW9jayBkZXMgZm9uY3Rpb25zIGRlIGdlc3Rpb24gZGUgc3RvY2thZ2Vcbmplc3QubW9jaygnLi4vLi4vc3JjL3V0aWxzL3N0b3JhZ2VVdGlscycsICgpID0+ICh7XG4gICAgc3RvcmVEYXRhOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgpKSxcbiAgICBnZXREYXRhOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZShudWxsKSksXG59KSk7XG5cbi8vIE1vY2sgZGVzIGNvbnN0YW50ZXMgZGUgY291bGV1cnNcbmplc3QubW9jaygnLi4vLi4vc3JjL3V0aWxzL2NvbnN0YW50cycsICgpID0+ICh7XG4gICAgQ09MT1JTOiB7XG4gICAgICAgIGJhY2tncm91bmQ6ICcjRkZGRkZGJyxcbiAgICAgICAgc3VyZmFjZTogJyNGMEYwRjAnLFxuICAgICAgICBwcmltYXJ5OiAnIzAwN0FGRicsXG4gICAgICAgIHRleHQ6ICcjMDAwMDAwJyxcbiAgICAgICAgdGV4dFNlY29uZGFyeTogJyM2NjY2NjYnLFxuICAgICAgICBib3JkZXI6ICcjQ0NDQ0NDJyxcbiAgICAgICAgZGl2aWRlcjogJyNFMEUwRTAnLFxuICAgICAgICBkaXNhYmxlZDogJyM5OTk5OTknLFxuICAgICAgICBpY29uOiAnIzAwMDAwMCcsXG4gICAgICAgIGVycm9yOiAnI2ZmM2IzMCcsXG4gICAgfSxcbn0pKTtcblxuLy8gQ29tcG9zYW50IGRlIHRlc3QgcXVpIHV0aWxpc2UgbGUgY29udGV4dGVcbmNvbnN0IFRlc3RDb21wb25lbnQgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgICB0aGVtZSxcbiAgICAgICAgaXNEYXJrVGhlbWUsXG4gICAgICAgIGNvbG9ycyxcbiAgICAgICAgbG9hZGVkLFxuICAgICAgICBzcGFjaW5nLFxuICAgICAgICB0eXBvZ3JhcGh5LFxuICAgICAgICBib3JkZXJSYWRpdXMsXG4gICAgICAgIHNoYWRvd3MsXG4gICAgICAgIHNldFRoZW1lLFxuICAgICAgICB0b2dnbGVUaGVtZSxcbiAgICAgICAgcmVzZXRUb1N5c3RlbVRoZW1lLFxuICAgIH0gPSBSZWFjdC51c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG5cbiAgICBpZiAoIWxvYWRlZCkge1xuICAgICAgICByZXR1cm4gPFRleHQgdGVzdElEPVwibG9hZGluZy1zdGF0dXNcIj5Mb2FkaW5nIFRoZW1lLi4uPC9UZXh0PjtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8PlxuICAgICAgICAgICAgPFRleHQgdGVzdElEPVwiY3VycmVudC10aGVtZVwiPlRoZW1lOiB7dGhlbWV9PC9UZXh0PlxuICAgICAgICAgICAgPFRleHQgdGVzdElEPVwiaXMtZGFyay10aGVtZVwiPklzIERhcms6IHtpc0RhcmtUaGVtZSA/ICdZZXMnIDogJ05vJ308L1RleHQ+XG4gICAgICAgICAgICA8VGV4dCB0ZXN0SUQ9XCJiYWNrZ3JvdW5kLWNvbG9yXCI+QmFja2dyb3VuZDoge2NvbG9ycy5iYWNrZ3JvdW5kfTwvVGV4dD5cbiAgICAgICAgICAgIDxUZXh0IHRlc3RJRD1cInRleHQtY29sb3JcIj5UZXh0OiB7Y29sb3JzLnRleHR9PC9UZXh0PlxuICAgICAgICAgICAgPFRleHQgdGVzdElEPVwic3BhY2luZy1tZFwiPlNwYWNpbmc6IHtzcGFjaW5nLm1kfTwvVGV4dD5cbiAgICAgICAgICAgIDxUZXh0IHRlc3RJRD1cInR5cG9ncmFwaHktbWQtZm9udC1zaXplXCI+Rm9udCBTaXplOiB7dHlwb2dyYXBoeS5mb250U2l6ZXMubWR9PC9UZXh0PlxuICAgICAgICAgICAgPFRleHQgdGVzdElEPVwiYm9yZGVyLXJhZGl1cy1tZFwiPkJvcmRlciBSYWRpdXM6IHtib3JkZXJSYWRpdXMubWR9PC9UZXh0PlxuICAgICAgICAgICAgPFRleHQgdGVzdElEPVwic2hhZG93cy1tZC1lbGV2YXRpb25cIj5TaGFkb3dzOiB7c2hhZG93cy5tZC5lbGV2YXRpb259PC9UZXh0PlxuXG4gICAgICAgICAgICA8QnV0dG9uIHRpdGxlPVwiU2V0IExpZ2h0XCIgb25QcmVzcz17KCkgPT4gc2V0VGhlbWUoJ2xpZ2h0Jyl9IC8+XG4gICAgICAgICAgICA8QnV0dG9uIHRpdGxlPVwiU2V0IERhcmtcIiBvblByZXNzPXsoKSA9PiBzZXRUaGVtZSgnZGFyaycpfSAvPlxuICAgICAgICAgICAgPEJ1dHRvbiB0aXRsZT1cIlNldCBTeXN0ZW1cIiBvblByZXNzPXsoKSA9PiBzZXRUaGVtZSgnc3lzdGVtJyl9IC8+XG4gICAgICAgICAgICA8QnV0dG9uIHRpdGxlPVwiVG9nZ2xlIFRoZW1lXCIgb25QcmVzcz17dG9nZ2xlVGhlbWV9IC8+XG4gICAgICAgICAgICA8QnV0dG9uIHRpdGxlPVwiUmVzZXQgdG8gU3lzdGVtXCIgb25QcmVzcz17cmVzZXRUb1N5c3RlbVRoZW1lfSAvPlxuICAgICAgICA8Lz5cbiAgICApO1xufTtcblxuLy8gSGVscGVyIHBvdXIgYXBsYXRpciBsZXMgZW5mYW50cyBkJ3VuIGNvbXBvc2FudCBUZXh0XG5jb25zdCBmbGF0dGVuQ2hpbGRyZW4gPSAoY2hpbGRyZW4pID0+XG4gICAgQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlbi5qb2luKCcnKSA6IGNoaWxkcmVuO1xuXG5kZXNjcmliZSgnVGhlbWVQcm92aWRlcicsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gICAgICAgIGdldERhdGEubW9ja1Jlc29sdmVkVmFsdWUobnVsbCk7XG4gICAgICAgIHVzZUNvbG9yU2NoZW1lLm1vY2tSZXR1cm5WYWx1ZSgnbGlnaHQnKTtcbiAgICAgICAgamVzdC51c2VGYWtlVGltZXJzKCk7XG4gICAgfSk7XG5cbiAgICBhZnRlckVhY2goKCkgPT4ge1xuICAgICAgICBqZXN0LnJ1bk9ubHlQZW5kaW5nVGltZXJzKCk7XG4gICAgICAgIGplc3QudXNlUmVhbFRpbWVycygpO1xuICAgIH0pO1xuXG4gICAgLy8gMS4gVGVzdHMgaW5pdGlhdXhcbiAgICBpdCgnc2hvdWxkIGxvYWQgZGVmYXVsdCBzeXN0ZW0gdGhlbWUgd2hlbiBubyBzYXZlZCB0aGVtZSBleGlzdHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIHJlbmRlcihcbiAgICAgICAgICAgIDxUaGVtZVByb3ZpZGVyPlxuICAgICAgICAgICAgICAgIDxUZXN0Q29tcG9uZW50IC8+XG4gICAgICAgICAgICA8L1RoZW1lUHJvdmlkZXI+XG4gICAgICAgICk7XG5cbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnbG9hZGluZy1zdGF0dXMnKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4gamVzdC5ydW5BbGxUaW1lcnMoKSk7XG4gICAgICAgIGV4cGVjdChzY3JlZW4ucXVlcnlCeVRlc3RJZCgnbG9hZGluZy1zdGF0dXMnKSkudG9CZU51bGwoKTtcblxuICAgICAgICBleHBlY3QoZmxhdHRlbkNoaWxkcmVuKHNjcmVlbi5nZXRCeVRlc3RJZCgnY3VycmVudC10aGVtZScpLnByb3BzLmNoaWxkcmVuKSkudG9CZSgnVGhlbWU6IHN5c3RlbScpO1xuICAgICAgICBleHBlY3QoZmxhdHRlbkNoaWxkcmVuKHNjcmVlbi5nZXRCeVRlc3RJZCgnaXMtZGFyay10aGVtZScpLnByb3BzLmNoaWxkcmVuKSkudG9CZSgnSXMgRGFyazogTm8nKTtcbiAgICAgICAgZXhwZWN0KGZsYXR0ZW5DaGlsZHJlbihzY3JlZW4uZ2V0QnlUZXN0SWQoJ2JhY2tncm91bmQtY29sb3InKS5wcm9wcy5jaGlsZHJlbikpLnRvQmUoJ0JhY2tncm91bmQ6ICNGRkZGRkYnKTtcbiAgICAgICAgZXhwZWN0KGdldERhdGEpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdhcHBUaGVtZScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBsb2FkIHNhdmVkIHRoZW1lIGZyb20gc3RvcmFnZScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgZ2V0RGF0YS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoJ2RhcmsnKTtcbiAgICAgICAgdXNlQ29sb3JTY2hlbWUubW9ja1JldHVyblZhbHVlKCdsaWdodCcpO1xuXG4gICAgICAgIHJlbmRlcihcbiAgICAgICAgICAgIDxUaGVtZVByb3ZpZGVyPlxuICAgICAgICAgICAgICAgIDxUZXN0Q29tcG9uZW50IC8+XG4gICAgICAgICAgICA8L1RoZW1lUHJvdmlkZXI+XG4gICAgICAgICk7XG5cbiAgICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IGplc3QucnVuQWxsVGltZXJzKCkpO1xuXG4gICAgICAgIGV4cGVjdChmbGF0dGVuQ2hpbGRyZW4oc2NyZWVuLmdldEJ5VGVzdElkKCdjdXJyZW50LXRoZW1lJykucHJvcHMuY2hpbGRyZW4pKS50b0JlKCdUaGVtZTogZGFyaycpO1xuICAgICAgICBleHBlY3QoZmxhdHRlbkNoaWxkcmVuKHNjcmVlbi5nZXRCeVRlc3RJZCgnaXMtZGFyay10aGVtZScpLnByb3BzLmNoaWxkcmVuKSkudG9CZSgnSXMgRGFyazogWWVzJyk7XG4gICAgICAgIGV4cGVjdChmbGF0dGVuQ2hpbGRyZW4oc2NyZWVuLmdldEJ5VGVzdElkKCdiYWNrZ3JvdW5kLWNvbG9yJykucHJvcHMuY2hpbGRyZW4pKS50b0JlKCdCYWNrZ3JvdW5kOiAjMTIxMjEyJyk7XG4gICAgICAgIGV4cGVjdChmbGF0dGVuQ2hpbGRyZW4oc2NyZWVuLmdldEJ5VGVzdElkKCd0ZXh0LWNvbG9yJykucHJvcHMuY2hpbGRyZW4pKS50b0JlKCdUZXh0OiAjRkZGRkZGJyk7XG4gICAgfSk7XG5cbiAgICAvLyAyLiBUZXN0IGRlcyBjaGFuZ2VtZW50cyBkZSB0aMOobWVcbiAgICBpdCgnc2hvdWxkIHNldCB0aGVtZSB0byBsaWdodCBhbmQgc2F2ZSBpdCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgcmVuZGVyKFxuICAgICAgICAgICAgPFRoZW1lUHJvdmlkZXI+XG4gICAgICAgICAgICAgICAgPFRlc3RDb21wb25lbnQgLz5cbiAgICAgICAgICAgIDwvVGhlbWVQcm92aWRlcj5cbiAgICAgICAgKTtcbiAgICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IGplc3QucnVuQWxsVGltZXJzKCkpO1xuXG4gICAgICAgIGZpcmVFdmVudC5wcmVzcyhzY3JlZW4uZ2V0QnlUZXh0KCdTZXQgTGlnaHQnKSk7XG5cbiAgICAgICAgZXhwZWN0KGZsYXR0ZW5DaGlsZHJlbihzY3JlZW4uZ2V0QnlUZXN0SWQoJ2N1cnJlbnQtdGhlbWUnKS5wcm9wcy5jaGlsZHJlbikpLnRvQmUoJ1RoZW1lOiBsaWdodCcpO1xuICAgICAgICBleHBlY3QoZmxhdHRlbkNoaWxkcmVuKHNjcmVlbi5nZXRCeVRlc3RJZCgnYmFja2dyb3VuZC1jb2xvcicpLnByb3BzLmNoaWxkcmVuKSkudG9CZSgnQmFja2dyb3VuZDogI0ZGRkZGRicpO1xuICAgICAgICBcbiAgICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IGplc3QucnVuQWxsVGltZXJzKCkpO1xuICAgICAgICBleHBlY3Qoc3RvcmVEYXRhKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnYXBwVGhlbWUnLCAnbGlnaHQnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgc2V0IHRoZW1lIHRvIGRhcmsgYW5kIHNhdmUgaXQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIHJlbmRlcihcbiAgICAgICAgICAgIDxUaGVtZVByb3ZpZGVyPlxuICAgICAgICAgICAgICAgIDxUZXN0Q29tcG9uZW50IC8+XG4gICAgICAgICAgICA8L1RoZW1lUHJvdmlkZXI+XG4gICAgICAgICk7XG4gICAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiBqZXN0LnJ1bkFsbFRpbWVycygpKTtcblxuICAgICAgICBmaXJlRXZlbnQucHJlc3Moc2NyZWVuLmdldEJ5VGV4dCgnU2V0IERhcmsnKSk7XG5cbiAgICAgICAgZXhwZWN0KGZsYXR0ZW5DaGlsZHJlbihzY3JlZW4uZ2V0QnlUZXN0SWQoJ2N1cnJlbnQtdGhlbWUnKS5wcm9wcy5jaGlsZHJlbikpLnRvQmUoJ1RoZW1lOiBkYXJrJyk7XG4gICAgICAgIGV4cGVjdChmbGF0dGVuQ2hpbGRyZW4oc2NyZWVuLmdldEJ5VGVzdElkKCdiYWNrZ3JvdW5kLWNvbG9yJykucHJvcHMuY2hpbGRyZW4pKS50b0JlKCdCYWNrZ3JvdW5kOiAjMTIxMjEyJyk7XG4gICAgICAgIFxuICAgICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4gamVzdC5ydW5BbGxUaW1lcnMoKSk7XG4gICAgICAgIGV4cGVjdChzdG9yZURhdGEpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdhcHBUaGVtZScsICdkYXJrJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlc2V0IHRvIHN5c3RlbSB0aGVtZSBhbmQgc2F2ZSBpdCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgcmVuZGVyKFxuICAgICAgICAgICAgPFRoZW1lUHJvdmlkZXI+XG4gICAgICAgICAgICAgICAgPFRlc3RDb21wb25lbnQgLz5cbiAgICAgICAgICAgIDwvVGhlbWVQcm92aWRlcj5cbiAgICAgICAgKTtcbiAgICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IGplc3QucnVuQWxsVGltZXJzKCkpO1xuICAgICAgICBmaXJlRXZlbnQucHJlc3Moc2NyZWVuLmdldEJ5VGV4dCgnU2V0IERhcmsnKSk7XG4gICAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiBqZXN0LnJ1bkFsbFRpbWVycygpKTtcbiAgICAgICAgXG4gICAgICAgIGZpcmVFdmVudC5wcmVzcyhzY3JlZW4uZ2V0QnlUZXh0KCdSZXNldCB0byBTeXN0ZW0nKSk7XG4gICAgICAgIFxuICAgICAgICBleHBlY3QoZmxhdHRlbkNoaWxkcmVuKHNjcmVlbi5nZXRCeVRlc3RJZCgnY3VycmVudC10aGVtZScpLnByb3BzLmNoaWxkcmVuKSkudG9CZSgnVGhlbWU6IHN5c3RlbScpO1xuICAgICAgICBleHBlY3QoZmxhdHRlbkNoaWxkcmVuKHNjcmVlbi5nZXRCeVRlc3RJZCgnaXMtZGFyay10aGVtZScpLnByb3BzLmNoaWxkcmVuKSkudG9CZSgnSXMgRGFyazogTm8nKTtcbiAgICAgICAgXG4gICAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiBqZXN0LnJ1bkFsbFRpbWVycygpKTtcbiAgICAgICAgZXhwZWN0KHN0b3JlRGF0YSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2FwcFRoZW1lJywgJ3N5c3RlbScpO1xuICAgIH0pO1xuXG4gICAgLy8gMy4gVGVzdHMgZGUgbGEgZm9uY3Rpb24gYHRvZ2dsZVRoZW1lYFxuICAgIGl0KCdzaG91bGQgdG9nZ2xlIGZyb20gbGlnaHQgdG8gZGFyayB0aGVtZScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgcmVuZGVyKFxuICAgICAgICAgICAgPFRoZW1lUHJvdmlkZXI+XG4gICAgICAgICAgICAgICAgPFRlc3RDb21wb25lbnQgLz5cbiAgICAgICAgICAgIDwvVGhlbWVQcm92aWRlcj5cbiAgICAgICAgKTtcbiAgICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IGplc3QucnVuQWxsVGltZXJzKCkpO1xuICAgICAgICBmaXJlRXZlbnQucHJlc3Moc2NyZWVuLmdldEJ5VGV4dCgnU2V0IExpZ2h0JykpO1xuXG4gICAgICAgIGZpcmVFdmVudC5wcmVzcyhzY3JlZW4uZ2V0QnlUZXh0KCdUb2dnbGUgVGhlbWUnKSk7XG4gICAgICAgIGV4cGVjdChmbGF0dGVuQ2hpbGRyZW4oc2NyZWVuLmdldEJ5VGVzdElkKCdjdXJyZW50LXRoZW1lJykucHJvcHMuY2hpbGRyZW4pKS50b0JlKCdUaGVtZTogZGFyaycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB0b2dnbGUgZnJvbSBkYXJrIHRvIGxpZ2h0IHRoZW1lJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICByZW5kZXIoXG4gICAgICAgICAgICA8VGhlbWVQcm92aWRlcj5cbiAgICAgICAgICAgICAgICA8VGVzdENvbXBvbmVudCAvPlxuICAgICAgICAgICAgPC9UaGVtZVByb3ZpZGVyPlxuICAgICAgICApO1xuICAgICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4gamVzdC5ydW5BbGxUaW1lcnMoKSk7XG4gICAgICAgIGZpcmVFdmVudC5wcmVzcyhzY3JlZW4uZ2V0QnlUZXh0KCdTZXQgRGFyaycpKTtcblxuICAgICAgICBmaXJlRXZlbnQucHJlc3Moc2NyZWVuLmdldEJ5VGV4dCgnVG9nZ2xlIFRoZW1lJykpO1xuICAgICAgICBleHBlY3QoZmxhdHRlbkNoaWxkcmVuKHNjcmVlbi5nZXRCeVRlc3RJZCgnY3VycmVudC10aGVtZScpLnByb3BzLmNoaWxkcmVuKSkudG9CZSgnVGhlbWU6IGxpZ2h0Jyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHRvZ2dsZSBmcm9tIHN5c3RlbSB0byBsaWdodCB0aGVtZSBpZiBzeXN0ZW1Db2xvclNjaGVtZSBpcyBkYXJrJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICB1c2VDb2xvclNjaGVtZS5tb2NrUmV0dXJuVmFsdWUoJ2RhcmsnKTtcbiAgICAgICAgcmVuZGVyKFxuICAgICAgICAgICAgPFRoZW1lUHJvdmlkZXI+XG4gICAgICAgICAgICAgICAgPFRlc3RDb21wb25lbnQgLz5cbiAgICAgICAgICAgIDwvVGhlbWVQcm92aWRlcj5cbiAgICAgICAgKTtcbiAgICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IGplc3QucnVuQWxsVGltZXJzKCkpO1xuXG4gICAgICAgIGV4cGVjdChmbGF0dGVuQ2hpbGRyZW4oc2NyZWVuLmdldEJ5VGVzdElkKCdjdXJyZW50LXRoZW1lJykucHJvcHMuY2hpbGRyZW4pKS50b0JlKCdUaGVtZTogc3lzdGVtJyk7XG4gICAgICAgIGV4cGVjdChmbGF0dGVuQ2hpbGRyZW4oc2NyZWVuLmdldEJ5VGVzdElkKCdpcy1kYXJrLXRoZW1lJykucHJvcHMuY2hpbGRyZW4pKS50b0JlKCdJcyBEYXJrOiBZZXMnKTtcblxuICAgICAgICBmaXJlRXZlbnQucHJlc3Moc2NyZWVuLmdldEJ5VGV4dCgnVG9nZ2xlIFRoZW1lJykpO1xuICAgICAgICBleHBlY3QoZmxhdHRlbkNoaWxkcmVuKHNjcmVlbi5nZXRCeVRlc3RJZCgnY3VycmVudC10aGVtZScpLnByb3BzLmNoaWxkcmVuKSkudG9CZSgnVGhlbWU6IGxpZ2h0Jyk7XG4gICAgICAgIGV4cGVjdChmbGF0dGVuQ2hpbGRyZW4oc2NyZWVuLmdldEJ5VGVzdElkKCdpcy1kYXJrLXRoZW1lJykucHJvcHMuY2hpbGRyZW4pKS50b0JlKCdJcyBEYXJrOiBObycpO1xuICAgIH0pO1xuICAgIFxuICAgIGl0KCdzaG91bGQgdG9nZ2xlIGZyb20gc3lzdGVtIHRvIGRhcmsgdGhlbWUgaWYgc3lzdGVtQ29sb3JTY2hlbWUgaXMgbGlnaHQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIHVzZUNvbG9yU2NoZW1lLm1vY2tSZXR1cm5WYWx1ZSgnbGlnaHQnKTtcbiAgICAgICAgcmVuZGVyKFxuICAgICAgICAgICAgPFRoZW1lUHJvdmlkZXI+XG4gICAgICAgICAgICAgICAgPFRlc3RDb21wb25lbnQgLz5cbiAgICAgICAgICAgIDwvVGhlbWVQcm92aWRlcj5cbiAgICAgICAgKTtcbiAgICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IGplc3QucnVuQWxsVGltZXJzKCkpO1xuXG4gICAgICAgIGV4cGVjdChmbGF0dGVuQ2hpbGRyZW4oc2NyZWVuLmdldEJ5VGVzdElkKCdjdXJyZW50LXRoZW1lJykucHJvcHMuY2hpbGRyZW4pKS50b0JlKCdUaGVtZTogc3lzdGVtJyk7XG4gICAgICAgIGV4cGVjdChmbGF0dGVuQ2hpbGRyZW4oc2NyZWVuLmdldEJ5VGVzdElkKCdpcy1kYXJrLXRoZW1lJykucHJvcHMuY2hpbGRyZW4pKS50b0JlKCdJcyBEYXJrOiBObycpO1xuXG4gICAgICAgIGZpcmVFdmVudC5wcmVzcyhzY3JlZW4uZ2V0QnlUZXh0KCdUb2dnbGUgVGhlbWUnKSk7XG4gICAgICAgIGV4cGVjdChmbGF0dGVuQ2hpbGRyZW4oc2NyZWVuLmdldEJ5VGVzdElkKCdjdXJyZW50LXRoZW1lJykucHJvcHMuY2hpbGRyZW4pKS50b0JlKCdUaGVtZTogZGFyaycpO1xuICAgICAgICBleHBlY3QoZmxhdHRlbkNoaWxkcmVuKHNjcmVlbi5nZXRCeVRlc3RJZCgnaXMtZGFyay10aGVtZScpLnByb3BzLmNoaWxkcmVuKSkudG9CZSgnSXMgRGFyazogWWVzJyk7XG4gICAgfSk7XG5cbiAgICAvLyA0LiBUZXN0IGRlcyB2YWxldXJzIG3DqW1vw69zw6llcyAoYHVzZU1lbW9gKVxuICAgIGl0KCdzaG91bGQgY29ycmVjdGx5IHByb3ZpZGUgc3RhdGljIG1lbW9pemVkIHZhbHVlcycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgcmVuZGVyKFxuICAgICAgICAgICAgPFRoZW1lUHJvdmlkZXI+XG4gICAgICAgICAgICAgICAgPFRlc3RDb21wb25lbnQgLz5cbiAgICAgICAgICAgIDwvVGhlbWVQcm92aWRlcj5cbiAgICAgICAgKTtcbiAgICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IGplc3QucnVuQWxsVGltZXJzKCkpO1xuXG4gICAgICAgIGV4cGVjdChmbGF0dGVuQ2hpbGRyZW4oc2NyZWVuLmdldEJ5VGVzdElkKCdzcGFjaW5nLW1kJykucHJvcHMuY2hpbGRyZW4pKS50b0JlKCdTcGFjaW5nOiAxNicpO1xuICAgICAgICBleHBlY3QoZmxhdHRlbkNoaWxkcmVuKHNjcmVlbi5nZXRCeVRlc3RJZCgndHlwb2dyYXBoeS1tZC1mb250LXNpemUnKS5wcm9wcy5jaGlsZHJlbikpLnRvQmUoJ0ZvbnQgU2l6ZTogMTYnKTtcbiAgICAgICAgZXhwZWN0KGZsYXR0ZW5DaGlsZHJlbihzY3JlZW4uZ2V0QnlUZXN0SWQoJ2JvcmRlci1yYWRpdXMtbWQnKS5wcm9wcy5jaGlsZHJlbikpLnRvQmUoJ0JvcmRlciBSYWRpdXM6IDgnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgYXBwbHkgY29ycmVjdCBzaGFkb3dzIGJhc2VkIG9uIHRoZW1lJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICByZW5kZXIoXG4gICAgICAgICAgICA8VGhlbWVQcm92aWRlcj5cbiAgICAgICAgICAgICAgICA8VGVzdENvbXBvbmVudCAvPlxuICAgICAgICAgICAgPC9UaGVtZVByb3ZpZGVyPlxuICAgICAgICApO1xuICAgICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4gamVzdC5ydW5BbGxUaW1lcnMoKSk7XG4gICAgICAgIFxuICAgICAgICAvLyBUaMOobWUgY2xhaXIgcGFyIGTDqWZhdXQgKHN5c3RlbSwgd2l0aCB1c2VDb2xvclNjaGVtZSA9ICdsaWdodCcpXG4gICAgICAgIGV4cGVjdChmbGF0dGVuQ2hpbGRyZW4oc2NyZWVuLmdldEJ5VGVzdElkKCdpcy1kYXJrLXRoZW1lJykucHJvcHMuY2hpbGRyZW4pKS50b0JlKCdJcyBEYXJrOiBObycpO1xuICAgICAgICBleHBlY3QoZmxhdHRlbkNoaWxkcmVuKHNjcmVlbi5nZXRCeVRlc3RJZCgnc2hhZG93cy1tZC1lbGV2YXRpb24nKS5wcm9wcy5jaGlsZHJlbikpLnRvQmUoJ1NoYWRvd3M6IDQnKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFBhc3NlciBhdSB0aMOobWUgc29tYnJlXG4gICAgICAgIGZpcmVFdmVudC5wcmVzcyhzY3JlZW4uZ2V0QnlUZXh0KCdTZXQgRGFyaycpKTtcbiAgICAgICAgZXhwZWN0KGZsYXR0ZW5DaGlsZHJlbihzY3JlZW4uZ2V0QnlUZXN0SWQoJ2lzLWRhcmstdGhlbWUnKS5wcm9wcy5jaGlsZHJlbikpLnRvQmUoJ0lzIERhcms6IFllcycpO1xuICAgICAgICAvLyBWw6lyaWZpZXIgcXVlIGwnw6lsw6l2YXRpb24gZGUgbCdvbWJyZSBjaGFuZ2VcbiAgICAgICAgZXhwZWN0KGZsYXR0ZW5DaGlsZHJlbihzY3JlZW4uZ2V0QnlUZXN0SWQoJ3NoYWRvd3MtbWQtZWxldmF0aW9uJykucHJvcHMuY2hpbGRyZW4pKS50b0JlKCdTaGFkb3dzOiA0Jyk7IC8vIE5vdGUgOiBsYSB2YWxldXIgZXN0IGxhIG3Dqm1lIHBvdXIgbCfDqWzDqXZhdGlvbiwgbWFpcyBsZXMgYXV0cmVzIHByb3BzIGNoYW5nZW50LiBPbiBwZXV0IHRlc3RlciBgc2hhZG93T3BhY2l0eWAgc2kgb24gbGUgc291aGFpdGUuXG4gICAgfSk7XG5cbiAgICAvLyA1LiBUZXN0IGRlIGxhIGdlc3Rpb24gZGVzIGVycmV1cnNcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBzdG9yYWdlIHJlYWQgZXJyb3IgZ3JhY2VmdWxseSBhbmQgcHJvY2VlZCB3aXRoIGRlZmF1bHQgdGhlbWUnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGdldERhdGEubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignU3RvcmFnZSByZWFkIGZhaWxlZCcpKTtcbiAgICAgICAgXG4gICAgICAgIHJlbmRlcihcbiAgICAgICAgICAgIDxUaGVtZVByb3ZpZGVyPlxuICAgICAgICAgICAgICAgIDxUZXN0Q29tcG9uZW50IC8+XG4gICAgICAgICAgICA8L1RoZW1lUHJvdmlkZXI+XG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICAvLyBMZSBjb21wb3NhbnQgZG9pdCB0b3Vqb3VycyDDqnRyZSBjYXBhYmxlIGRlIGNoYXJnZXIsIG3Dqm1lIHMnaWwgeSBhIHVuZSBlcnJldXJcbiAgICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IGplc3QucnVuQWxsVGltZXJzKCkpO1xuICAgICAgICBcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5xdWVyeUJ5VGVzdElkKCdsb2FkaW5nLXN0YXR1cycpKS50b0JlTnVsbCgpO1xuICAgICAgICBleHBlY3QoZmxhdHRlbkNoaWxkcmVuKHNjcmVlbi5nZXRCeVRlc3RJZCgnY3VycmVudC10aGVtZScpLnByb3BzLmNoaWxkcmVuKSkudG9CZSgnVGhlbWU6IHN5c3RlbScpO1xuICAgIH0pO1xuXG4vLyBSZW1wbGFjZXogdm90cmUgdGVzdCBxdWkgw6ljaG91ZSBwYXIgY2VsdWktY2kgOlxuaXQoJ3Nob3VsZCBub3Qgc2F2ZSB0aGVtZSBpZiBub3QgbG9hZGVkJywgYXN5bmMgKCkgPT4ge1xuICAgIHJlbmRlcihcbiAgICAgICAgPFRoZW1lUHJvdmlkZXI+XG4gICAgICAgICAgICA8VGVzdENvbXBvbmVudCAvPlxuICAgICAgICA8L1RoZW1lUHJvdmlkZXI+XG4gICAgKTtcblxuICAgIC8vIDEuIEQnYWJvcmQsIHNpbXVsZXogdW4gY2xpYyBhdmFudCBsZSBjaGFyZ2VtZW50IGNvbXBsZXRcbiAgICAvLyAgICBDZWNpIHZhIGZhaXJlIMOpY2hvdWVyIGdldEJ5VGV4dCwgZG9uYyBpbCBmYXV0IHV0aWxpc2VyIHF1ZXJ5QnlUZXh0IHF1aSBuZSBsw6h2ZSBwYXMgZCdlcnJldXJcbiAgICBleHBlY3Qoc2NyZWVuLnF1ZXJ5QnlUZXh0KCdTZXQgRGFyaycpKS50b0JlTnVsbCgpO1xuXG4gICAgLy8gMi4gRmFpdGVzIGF2YW5jZXIgbGVzIHRpbWVycyBwb3VyIHNpbXVsZXIgbGEgZmluIGR1IGNoYXJnZW1lbnRcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBqZXN0LnJ1bkFsbFRpbWVycygpO1xuICAgIH0pO1xuXG4gICAgLy8gMy4gTWFpbnRlbmFudCwgbGVzIGJvdXRvbnMgc29udCBwcsOpc2VudHMuIFNpbXVsZXogbCdhY3Rpb25cbiAgICBmaXJlRXZlbnQucHJlc3Moc2NyZWVuLmdldEJ5VGV4dCgnU2V0IERhcmsnKSk7XG5cbiAgICAvLyA0LiBMZSBzdG9yZURhdGEgbmUgZGV2cmFpdCBwYXMgZW5jb3JlIGF2b2lyIMOpdMOpIGFwcGVsw6kgY2FyIGxlIGRlYm91bmNlIG4nYSBwYXMgZXhwaXLDqVxuICAgIGV4cGVjdChzdG9yZURhdGEpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG5cbiAgICAvLyA1LiBGYWl0ZXMgYXZhbmNlciBsZXMgdGltZXJzIHBvdXIgcXVlIGxlIGRlYm91bmNlIHNlIGTDqWNsZW5jaGVcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBqZXN0LnJ1bkFsbFRpbWVycygpO1xuICAgIH0pO1xuXG4gICAgLy8gNi4gTWFpbnRlbmFudCwgbGUgc3RvcmVEYXRhIGEgw6l0w6kgYXBwZWzDqSB1bmUgZm9pc1xuICAgIGV4cGVjdChzdG9yZURhdGEpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICBleHBlY3Qoc3RvcmVEYXRhKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnYXBwVGhlbWUnLCAnZGFyaycpO1xufSk7XG5cbiAgICAvLyA2LiBUZXN0IGR1IGRlYm91bmNlIHBvdXIgbGEgc2F1dmVnYXJkZVxuICAgIGl0KCdzaG91bGQgZGVib3VuY2UgdGhlbWUgc2F2aW5nJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICByZW5kZXIoXG4gICAgICAgICAgICA8VGhlbWVQcm92aWRlcj5cbiAgICAgICAgICAgICAgICA8VGVzdENvbXBvbmVudCAvPlxuICAgICAgICAgICAgPC9UaGVtZVByb3ZpZGVyPlxuICAgICAgICApO1xuICAgICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4gamVzdC5ydW5BbGxUaW1lcnMoKSk7IC8vIENoYXJnZXIgbGUgY29tcG9zYW50XG5cbiAgICAgICAgZmlyZUV2ZW50LnByZXNzKHNjcmVlbi5nZXRCeVRleHQoJ1NldCBMaWdodCcpKTtcbiAgICAgICAgZmlyZUV2ZW50LnByZXNzKHNjcmVlbi5nZXRCeVRleHQoJ1NldCBEYXJrJykpO1xuICAgICAgICBmaXJlRXZlbnQucHJlc3Moc2NyZWVuLmdldEJ5VGV4dCgnU2V0IFN5c3RlbScpKTtcblxuICAgICAgICAvLyBPbiB2w6lyaWZpZSBxdWUgYHN0b3JlRGF0YWAgbidhIHBhcyBlbmNvcmUgw6l0w6kgYXBwZWzDqSBjYXIgbGUgdGltZXIgbidhIHBhcyBleHBpcsOpXG4gICAgICAgIGV4cGVjdChzdG9yZURhdGEpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG5cbiAgICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSgzMDApKTtcbiAgICAgICAgXG4gICAgICAgIC8vIE9uIHbDqXJpZmllIHF1ZSBgc3RvcmVEYXRhYCBhIMOpdMOpIGFwcGVsw6kgdW5lIHNldWxlIGZvaXMgYXZlYyBsYSBkZXJuacOocmUgdmFsZXVyXG4gICAgICAgIGV4cGVjdChzdG9yZURhdGEpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICAgICAgZXhwZWN0KHN0b3JlRGF0YSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2FwcFRoZW1lJywgJ3N5c3RlbScpO1xuICAgIH0pO1xufSk7Il0sIm1hcHBpbmdzIjoiQUFTQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsY0FBYyxFQUFFLFlBQU07RUFDNUIsSUFBTUMsRUFBRSxHQUFHQyxJQUFJLENBQUNDLGFBQWEsQ0FBQyxjQUFjLENBQUM7RUFDN0MsT0FBQUMsTUFBQSxDQUFBQyxNQUFBLEtBQ09KLEVBQUU7SUFDTEssY0FBYyxFQUFFSixJQUFJLENBQUNLLEVBQUUsQ0FBQztNQUFBLE9BQU0sT0FBTztJQUFBO0VBQUM7QUFFOUMsQ0FBQyxDQUFDO0FBR0ZSLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDhCQUE4QixFQUFFO0VBQUEsT0FBTztJQUM3Q1EsU0FBUyxFQUFFTixJQUFJLENBQUNLLEVBQUUsQ0FBQztNQUFBLE9BQU1FLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLENBQUM7SUFBQSxFQUFDO0lBQzNDQyxPQUFPLEVBQUVULElBQUksQ0FBQ0ssRUFBRSxDQUFDO01BQUEsT0FBTUUsT0FBTyxDQUFDQyxPQUFPLENBQUMsSUFBSSxDQUFDO0lBQUE7RUFDaEQsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUdIWCxXQUFBLEdBQUtDLElBQUksQ0FBQywyQkFBMkIsRUFBRTtFQUFBLE9BQU87SUFDMUNZLE1BQU0sRUFBRTtNQUNKQyxVQUFVLEVBQUUsU0FBUztNQUNyQkMsT0FBTyxFQUFFLFNBQVM7TUFDbEJDLE9BQU8sRUFBRSxTQUFTO01BQ2xCQyxJQUFJLEVBQUUsU0FBUztNQUNm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