8b567e21f891576c70fbc85a7ac1403b
_getJestObj().mock('expo-router', function () {
  return {
    useFocusEffect: jest.fn(function (callback) {
      return callback();
    }),
    router: {
      push: jest.fn(),
      back: jest.fn()
    },
    Stack: function Stack(_ref) {
      var children = _ref.children;
      return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
        children: children
      });
    },
    useLocalSearchParams: function useLocalSearchParams() {
      return {};
    },
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn(),
        canGoBack: jest.fn(function () {
          return true;
        }),
        addListener: jest.fn(),
        isFocused: jest.fn(function () {
          return true;
        })
      };
    }
  };
});
_getJestObj().mock('../../src/contexts/CurrentLevelContext', function () {
  return {
    useCurrentLevel: mockUseCurrentLevel
  };
});
_getJestObj().mock('../../src/screens/exercises/vocabulary/hooks/useVocabulary', function () {
  var actualUseVocabulary = jest.requireActual('../../src/screens/exercises/vocabulary/hooks/useVocabulary').default;
  return jest.fn(function (vocabularyData, level, mode) {
    if (!vocabularyData) {
      return {
        loaded: false
      };
    }
    return Object.assign({}, actualUseVocabulary(vocabularyData, level, mode), {
      loaded: true,
      currentWord: vocabularyData.exercises[0].words[0],
      display: {
        wordCounter: '1 / 1',
        categories: vocabularyData.exercises.map(function (ex) {
          return ex.title;
        })
      }
    });
  });
});
_getJestObj().mock('../../src/utils/vocabulary/vocabularyDataHelper', function () {
  return {
    isBonusLevel: jest.fn(function () {
      return false;
    }),
    getLevelColor: jest.fn(function (level) {
      if (!level) return 'gray';
      return 'blue';
    }),
    getVocabularyData: jest.fn(function (level, mode) {
      if (!level || level === 'invalid' || level === undefined) {
        return null;
      }
      if (level === 'A1' || level === '1') {
        return {
          exercises: [{
            title: 'Identité & informations personnelles',
            words: [{
              word: 'name',
              translation: 'nom',
              example: 'My name is Sarah.'
            }]
          }]
        };
      }
      return null;
    })
  };
});
_getJestObj().mock('../../src/hooks/useLastActivity', function () {
  return jest.fn(function () {
    return {
      saveActivity: jest.fn()
    };
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ExerciseSelection = _interopRequireDefault(require("../../src/screens/ExerciseSelection"));
var _vocabulary = _interopRequireDefault(require("../../src/screens/exercises/vocabulary"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockUseCurrentLevel = jest.fn();
var MOCK_LANGUAGE_LEVELS = {
  1: {
    title: 'Niveau Débutant A1',
    color: 'blue'
  },
  2: {
    title: 'Niveau Élémentaire A2',
    color: 'green'
  },
  3: {
    title: 'Niveau Intermédiaire B1',
    color: 'orange'
  }
};
describe('Test d\'intégration: Robustesse de la navigation', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('ExerciseSelection - Gestion des niveaux manquants', function () {
    test('Affiche un état contrôlé quand aucun niveau n\'est fourni', (0, _asyncToGenerator2.default)(function* () {
      mockUseCurrentLevel.mockReturnValue({
        currentLevel: undefined
      });
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseSelection.default, {})),
        queryByText = _render.queryByText,
        getByText = _render.getByText,
        toJSON = _render.toJSON;
      yield (0, _reactNative.waitFor)(function () {
        expect(toJSON()).toBeNull();
      });
    }));
    test('Affiche un état contrôlé avec un niveau invalide', (0, _asyncToGenerator2.default)(function* () {
      mockUseCurrentLevel.mockReturnValue({
        currentLevel: 'invalid_level'
      });
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseSelection.default, {})),
        queryByText = _render2.queryByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByText('name')).toBeNull();
        expect(queryByText('rhetoric')).toBeNull();
      });
    }));
  });
  describe('VocabularyExercise - Gestion des paramètres manquants', function () {
    test('Affiche un indicateur de chargement sans paramètre de niveau', (0, _asyncToGenerator2.default)(function* () {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
          route: {
            params: {}
          }
        })),
        getByTestId = _render3.getByTestId,
        queryByText = _render3.queryByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('activity-indicator')).toBeTruthy();
        expect(queryByText('name')).toBeNull();
        expect(queryByText('rhetoric')).toBeNull();
      });
    }));
    test('Affiche un indicateur de chargement avec un niveau undefined', (0, _asyncToGenerator2.default)(function* () {
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
          route: {
            params: {
              level: undefined,
              mode: 'classic'
            }
          }
        })),
        getByTestId = _render4.getByTestId,
        queryByText = _render4.queryByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('activity-indicator')).toBeTruthy();
        expect(queryByText('name')).toBeNull();
      });
    }));
    test('Affiche un indicateur de chargement avec un niveau invalide', (0, _asyncToGenerator2.default)(function* () {
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
          route: {
            params: {
              level: 'invalid_level',
              mode: 'classic'
            }
          }
        })),
        getByTestId = _render5.getByTestId,
        queryByText = _render5.queryByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('activity-indicator')).toBeTruthy();
        expect(queryByText('name')).toBeNull();
        expect(queryByText('rhetoric')).toBeNull();
      });
    }));
    test('Gère correctement les paramètres de route malformés', (0, _asyncToGenerator2.default)(function* () {
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
          route: {}
        })),
        getByTestId = _render6.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('activity-indicator')).toBeTruthy();
      });
    }));
    test('Fonctionne correctement avec des paramètres valides', (0, _asyncToGenerator2.default)(function* () {
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
          route: {
            params: {
              level: '1',
              mode: 'classic'
            }
          }
        })),
        getByText = _render7.getByText,
        queryByTestId = _render7.queryByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('name')).toBeTruthy();
        expect(getByText('nom')).toBeTruthy();
        expect(queryByTestId('activity-indicator')).toBeNull();
      });
    }));
  });
  describe('Cas limites et edge cases', function () {
    test('Gère les valeurs null dans les paramètres', (0, _asyncToGenerator2.default)(function* () {
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
          route: {
            params: {
              level: null,
              mode: null
            }
          }
        })),
        getByTestId = _render8.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('activity-indicator')).toBeTruthy();
      });
    }));
    test('Gère les chaînes vides dans les paramètres', (0, _asyncToGenerator2.default)(function* () {
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
          route: {
            params: {
              level: '',
              mode: ''
            }
          }
        })),
        getByTestId = _render9.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('activity-indicator')).toBeTruthy();
      });
    }));
    test('Gère les types de données inattendus', (0, _asyncToGenerator2.default)(function* () {
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
          route: {
            params: {
              level: 123,
              mode: {}
            }
          }
        })),
        getByTestId = _render0.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('activity-indicator')).toBeTruthy();
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,