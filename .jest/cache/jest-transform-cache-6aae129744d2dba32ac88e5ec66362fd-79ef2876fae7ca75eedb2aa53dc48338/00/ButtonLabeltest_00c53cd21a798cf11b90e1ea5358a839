068ca82f352123741ffc23fb27ca4f5c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ButtonLabel = _interopRequireDefault(require("../../../src/components/ui/Button/ButtonLabel"));
var _jsxRuntime = require("react/jsx-runtime");
var mockSizeStyles = {
  text: {
    fontSize: 16
  }
};
var mockVariantStyles = {
  text: {
    color: 'blue'
  }
};
describe('ButtonLabel', function () {
  it('devrait rendre le titre en majuscules si la prop uppercase est vraie', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ButtonLabel.default, {
        title: "mon bouton",
        sizeStyles: mockSizeStyles,
        variantStyles: mockVariantStyles,
        uppercase: true
      })),
      getByText = _render.getByText;
    expect(getByText('MON BOUTON')).toBeTruthy();
  });
  it('ne devrait pas rendre le titre en majuscules si la prop uppercase est fausse', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ButtonLabel.default, {
        title: "mon bouton",
        sizeStyles: mockSizeStyles,
        variantStyles: mockVariantStyles,
        uppercase: false
      })),
      getByText = _render2.getByText;
    expect(getByText('mon bouton')).toBeTruthy();
  });
  it('devrait appliquer le style de texte correct', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ButtonLabel.default, {
        title: "Titre",
        sizeStyles: mockSizeStyles,
        variantStyles: mockVariantStyles,
        uppercase: false
      })),
      getByText = _render3.getByText;
    var textComponent = getByText('Titre');
    expect(textComponent.props.style).toContain(mockSizeStyles.text);
    expect(textComponent.props.style).toContain(mockVariantStyles.text);
  });
  it('devrait appliquer un style de texte personnalis√© si fourni', function () {
    var customTextStyle = {
      fontWeight: 'bold'
    };
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ButtonLabel.default, {
        title: "Titre",
        sizeStyles: mockSizeStyles,
        variantStyles: mockVariantStyles,
        textStyle: customTextStyle
      })),
      getByText = _render4.getByText;
    var textComponent = getByText('Titre');
    expect(textComponent.props.style).toContain(customTextStyle);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9CdXR0b25MYWJlbCIsIl9qc3hSdW50aW1lIiwibW9ja1NpemVTdHlsZXMiLCJ0ZXh0IiwiZm9udFNpemUiLCJtb2NrVmFyaWFudFN0eWxlcyIsImNvbG9yIiwiZGVzY3JpYmUiLCJpdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJkZWZhdWx0IiwidGl0bGUiLCJzaXplU3R5bGVzIiwidmFyaWFudFN0eWxlcyIsInVwcGVyY2FzZSIsImdldEJ5VGV4dCIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJfcmVuZGVyMiIsIl9yZW5kZXIzIiwidGV4dENvbXBvbmVudCIsInByb3BzIiwic3R5bGUiLCJ0b0NvbnRhaW4iLCJjdXN0b21UZXh0U3R5bGUiLCJmb250V2VpZ2h0IiwiX3JlbmRlcjQiLCJ0ZXh0U3R5bGUiXSwic291cmNlcyI6WyJCdXR0b25MYWJlbC50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcclxuaW1wb3J0IEJ1dHRvbkxhYmVsIGZyb20gJy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3VpL0J1dHRvbi9CdXR0b25MYWJlbCc7XHJcblxyXG4vLyBNb2NrcyBkZXMgc3R5bGVzIHBvdXIgc2ltcGxpZmllciBsZXMgYXNzZXJ0aW9uc1xyXG5jb25zdCBtb2NrU2l6ZVN0eWxlcyA9IHsgdGV4dDogeyBmb250U2l6ZTogMTYgfSB9O1xyXG5jb25zdCBtb2NrVmFyaWFudFN0eWxlcyA9IHsgdGV4dDogeyBjb2xvcjogJ2JsdWUnIH0gfTtcclxuXHJcbmRlc2NyaWJlKCdCdXR0b25MYWJlbCcsICgpID0+IHtcclxuICBpdCgnZGV2cmFpdCByZW5kcmUgbGUgdGl0cmUgZW4gbWFqdXNjdWxlcyBzaSBsYSBwcm9wIHVwcGVyY2FzZSBlc3QgdnJhaWUnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxyXG4gICAgICA8QnV0dG9uTGFiZWxcclxuICAgICAgICB0aXRsZT1cIm1vbiBib3V0b25cIlxyXG4gICAgICAgIHNpemVTdHlsZXM9e21vY2tTaXplU3R5bGVzfVxyXG4gICAgICAgIHZhcmlhbnRTdHlsZXM9e21vY2tWYXJpYW50U3R5bGVzfVxyXG4gICAgICAgIHVwcGVyY2FzZT17dHJ1ZX1cclxuICAgICAgLz5cclxuICAgICk7XHJcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdNT04gQk9VVE9OJykpLnRvQmVUcnV0aHkoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ25lIGRldnJhaXQgcGFzIHJlbmRyZSBsZSB0aXRyZSBlbiBtYWp1c2N1bGVzIHNpIGxhIHByb3AgdXBwZXJjYXNlIGVzdCBmYXVzc2UnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxyXG4gICAgICA8QnV0dG9uTGFiZWxcclxuICAgICAgICB0aXRsZT1cIm1vbiBib3V0b25cIlxyXG4gICAgICAgIHNpemVTdHlsZXM9e21vY2tTaXplU3R5bGVzfVxyXG4gICAgICAgIHZhcmlhbnRTdHlsZXM9e21vY2tWYXJpYW50U3R5bGVzfVxyXG4gICAgICAgIHVwcGVyY2FzZT17ZmFsc2V9XHJcbiAgICAgIC8+XHJcbiAgICApO1xyXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnbW9uIGJvdXRvbicpKS50b0JlVHJ1dGh5KCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdkZXZyYWl0IGFwcGxpcXVlciBsZSBzdHlsZSBkZSB0ZXh0ZSBjb3JyZWN0JywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcclxuICAgICAgPEJ1dHRvbkxhYmVsXHJcbiAgICAgICAgdGl0bGU9XCJUaXRyZVwiXHJcbiAgICAgICAgc2l6ZVN0eWxlcz17bW9ja1NpemVTdHlsZXN9XHJcbiAgICAgICAgdmFyaWFudFN0eWxlcz17bW9ja1ZhcmlhbnRTdHlsZXN9XHJcbiAgICAgICAgdXBwZXJjYXNlPXtmYWxzZX1cclxuICAgICAgLz5cclxuICAgICk7XHJcbiAgICBjb25zdCB0ZXh0Q29tcG9uZW50ID0gZ2V0QnlUZXh0KCdUaXRyZScpO1xyXG4gICAgZXhwZWN0KHRleHRDb21wb25lbnQucHJvcHMuc3R5bGUpLnRvQ29udGFpbihtb2NrU2l6ZVN0eWxlcy50ZXh0KTtcclxuICAgIGV4cGVjdCh0ZXh0Q29tcG9uZW50LnByb3BzLnN0eWxlKS50b0NvbnRhaW4obW9ja1ZhcmlhbnRTdHlsZXMudGV4dCk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgaXQoJ2RldnJhaXQgYXBwbGlxdWVyIHVuIHN0eWxlIGRlIHRleHRlIHBlcnNvbm5hbGlzw6kgc2kgZm91cm5pJywgKCkgPT4ge1xyXG4gICAgY29uc3QgY3VzdG9tVGV4dFN0eWxlID0geyBmb250V2VpZ2h0OiAnYm9sZCcgfTtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXHJcbiAgICAgIDxCdXR0b25MYWJlbFxyXG4gICAgICAgIHRpdGxlPVwiVGl0cmVcIlxyXG4gICAgICAgIHNpemVTdHlsZXM9e21vY2tTaXplU3R5bGVzfVxyXG4gICAgICAgIHZhcmlhbnRTdHlsZXM9e21vY2tWYXJpYW50U3R5bGVzfVxyXG4gICAgICAgIHRleHRTdHlsZT17Y3VzdG9tVGV4dFN0eWxlfVxyXG4gICAgICAvPlxyXG4gICAgKTtcclxuICAgIGNvbnN0IHRleHRDb21wb25lbnQgPSBnZXRCeVRleHQoJ1RpdHJlJyk7XHJcbiAgICBleHBlY3QodGV4dENvbXBvbmVudC5wcm9wcy5zdHlsZSkudG9Db250YWluKGN1c3RvbVRleHRTdHlsZSk7XHJcbiAgfSk7XHJcbn0pOyJdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNB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