d357e989eaacfbd259b4ec9d24c6f8a2
var _reactNative = require("react-native");
var _scaling = require("../../src/utils/scaling");
describe('scaling', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('scale (horizontal)', function () {
    it('devrait calculer le scaling horizontal', function () {
      jest.spyOn(_reactNative.Dimensions, 'get').mockReturnValue({
        width: 375,
        height: 667
      });
      expect((0, _scaling.scale)(10)).toBe(10);
      expect((0, _scaling.scale)(20)).toBe(20);
      expect((0, _scaling.scale)(0)).toBe(0);
    });
    it('devrait scaler sur des écrans différents', function () {
      jest.spyOn(_reactNative.Dimensions, 'get').mockReturnValue({
        width: 414,
        height: 736
      });
      var result = (0, _scaling.scale)(10);
      expect(typeof result).toBe('number');
      expect(result).toBeGreaterThan(10);
    });
    it('devrait gérer les valeurs négatives', function () {
      jest.spyOn(_reactNative.Dimensions, 'get').mockReturnValue({
        width: 375,
        height: 667
      });
      expect((0, _scaling.scale)(-10)).toBe(-10);
    });
    it('devrait gérer les valeurs décimales', function () {
      jest.spyOn(_reactNative.Dimensions, 'get').mockReturnValue({
        width: 375,
        height: 667
      });
      expect((0, _scaling.scale)(10.5)).toBe(10.5);
    });
  });
  describe('verticalScale', function () {
    it('devrait calculer le scaling vertical', function () {
      jest.spyOn(_reactNative.Dimensions, 'get').mockReturnValue({
        width: 375,
        height: 667
      });
      expect((0, _scaling.verticalScale)(10)).toBe(10);
      expect((0, _scaling.verticalScale)(20)).toBe(20);
      expect((0, _scaling.verticalScale)(0)).toBe(0);
    });
    it('devrait scaler sur des écrans plus hauts', function () {
      jest.spyOn(_reactNative.Dimensions, 'get').mockReturnValue({
        width: 375,
        height: 812
      });
      var result = (0, _scaling.verticalScale)(10);
      expect(typeof result).toBe('number');
      expect(result).toBeGreaterThan(10);
    });
    it('devrait gérer les valeurs négatives', function () {
      jest.spyOn(_reactNative.Dimensions, 'get').mockReturnValue({
        width: 375,
        height: 667
      });
      expect((0, _scaling.verticalScale)(-10)).toBe(-10);
    });
  });
  describe('moderateScale', function () {
    it('devrait appliquer un scaling modéré', function () {
      jest.spyOn(_reactNative.Dimensions, 'get').mockReturnValue({
        width: 375,
        height: 667
      });
      var result = (0, _scaling.moderateScale)(20);
      expect(typeof result).toBe('number');
      expect(result).toBe(20);
    });
    it('devrait respecter le facteur personnalisé', function () {
      jest.spyOn(_reactNative.Dimensions, 'get').mockReturnValue({
        width: 414,
        height: 736
      });
      var result1 = (0, _scaling.moderateScale)(20, 0);
      var result2 = (0, _scaling.moderateScale)(20, 1);
      expect(result1).toBe(20);
      expect(typeof result2).toBe('number');
    });
    it('devrait utiliser le facteur par défaut 0.5', function () {
      jest.spyOn(_reactNative.Dimensions, 'get').mockReturnValue({
        width: 414,
        height: 736
      });
      var result = (0, _scaling.moderateScale)(20);
      expect(typeof result).toBe('number');
    });
  });
  describe('pixelRound', function () {
    it('devrait arrondir au pixel le plus proche', function () {
      jest.spyOn(_reactNative.PixelRatio, 'get').mockReturnValue(2);
      var result1 = (0, _scaling.pixelRound)(10.3);
      var result2 = (0, _scaling.pixelRound)(10.7);
      expect(typeof result1).toBe('number');
      expect(typeof result2).toBe('number');
    });
    it('devrait gérer différentes densités de pixels', function () {
      jest.spyOn(_reactNative.PixelRatio, 'get').mockReturnValue(3);
      var result = (0, _scaling.pixelRound)(10.2);
      expect(typeof result).toBe('number');
    });
    it('devrait gérer la densité 1x', function () {
      jest.spyOn(_reactNative.PixelRatio, 'get').mockReturnValue(1);
      var result = (0, _scaling.pixelRound)(10.3);
      expect(typeof result).toBe('number');
    });
    it('devrait gérer les valeurs nulles et négatives', function () {
      jest.spyOn(_reactNative.PixelRatio, 'get').mockReturnValue(2);
      expect((0, _scaling.pixelRound)(0)).toBe(0);
      expect(typeof (0, _scaling.pixelRound)(-10.3)).toBe('number');
    });
  });
  describe('Scénarios d\'appareils réels', function () {
    var devices = [{
      name: 'iPhone SE',
      width: 320,
      height: 568,
      pixelRatio: 2
    }, {
      name: 'iPhone 6/7/8',
      width: 375,
      height: 667,
      pixelRatio: 2
    }, {
      name: 'iPhone X/XS',
      width: 375,
      height: 812,
      pixelRatio: 3
    }, {
      name: 'iPad',
      width: 768,
      height: 1024,
      pixelRatio: 2
    }];
    devices.forEach(function (device) {
      it(`devrait scaler correctement sur ${device.name}`, function () {
        jest.spyOn(_reactNative.Dimensions, 'get').mockReturnValue({
          width: device.width,
          height: device.height
        });
        jest.spyOn(_reactNative.PixelRatio, 'get').mockReturnValue(device.pixelRatio);
        var baseSize = 16;
        expect(typeof (0, _scaling.scale)(baseSize)).toBe('number');
        expect(typeof (0, _scaling.verticalScale)(baseSize)).toBe('number');
        expect(typeof (0, _scaling.moderateScale)(baseSize)).toBe('number');
        expect(typeof (0, _scaling.pixelRound)(baseSize)).toBe('number');
        expect(isFinite((0, _scaling.scale)(baseSize))).toBe(true);
        expect(isFinite((0, _scaling.verticalScale)(baseSize))).toBe(true);
        expect(isFinite((0, _scaling.moderateScale)(baseSize))).toBe(true);
        expect(isFinite((0, _scaling.pixelRound)(baseSize))).toBe(true);
        expect((0, _scaling.scale)(baseSize)).toBeGreaterThan(0);
        expect((0, _scaling.verticalScale)(baseSize)).toBeGreaterThan(0);
        expect((0, _scaling.moderateScale)(baseSize)).toBeGreaterThan(0);
        expect((0, _scaling.pixelRound)(baseSize)).toBeGreaterThan(0);
      });
    });
  });
  describe('Edge cases et robustesse', function () {
    it('devrait gérer les dimensions nulles', function () {
      jest.spyOn(_reactNative.Dimensions, 'get').mockReturnValue({
        width: 0,
        height: 0
      });
      expect((0, _scaling.scale)(10)).toBe(0);
      expect((0, _scaling.verticalScale)(10)).toBe(0);
    });
    it('devrait gérer les très grandes valeurs', function () {
      jest.spyOn(_reactNative.Dimensions, 'get').mockReturnValue({
        width: 375,
        height: 667
      });
      var largeValue = 10000;
      expect(typeof (0, _scaling.scale)(largeValue)).toBe('number');
      expect(typeof (0, _scaling.verticalScale)(largeValue)).toBe('number');
      expect(typeof (0, _scaling.moderateScale)(largeValue)).toBe('number');
      expect(isFinite((0, _scaling.scale)(largeValue))).toBe(true);
    });
    it('devrait gérer les très petites valeurs', function () {
      jest.spyOn(_reactNative.Dimensions, 'get').mockReturnValue({
        width: 375,
        height: 667
      });
      var smallValue = 0.1;
      expect(typeof (0, _scaling.scale)(smallValue)).toBe('number');
      expect(typeof (0, _scaling.verticalScale)(smallValue)).toBe('number');
      expect(typeof (0, _scaling.moderateScale)(smallValue)).toBe('number');
      expect(isFinite((0, _scaling.scale)(smallValue))).toBe(true);
    });
    it('devrait gérer un PixelRatio de 0', function () {
      jest.spyOn(_reactNative.PixelRatio, 'get').mockReturnValue(0);
      expect(function () {
        return (0, _scaling.pixelRound)(10);
      }).not.toThrow();
    });
    it('devrait être cohérent entre les appels', function () {
      jest.spyOn(_reactNative.Dimensions, 'get').mockReturnValue({
        width: 375,
        height: 667
      });
      var size = 15;
      var result1 = (0, _scaling.scale)(size);
      var result2 = (0, _scaling.scale)(size);
      expect(result1).toBe(result2);
    });
  });
  describe('Performance', function () {
    it('devrait être rapide pour de nombreux calculs', function () {
      jest.spyOn(_reactNative.Dimensions, 'get').mockReturnValue({
        width: 375,
        height: 667
      });
      jest.spyOn(_reactNative.PixelRatio, 'get').mockReturnValue(2);
      var iterations = 100;
      var start = Date.now();
      for (var i = 0; i < iterations; i++) {
        (0, _scaling.scale)(10 + i);
        (0, _scaling.verticalScale)(10 + i);
        (0, _scaling.moderateScale)(10 + i);
        (0, _scaling.pixelRound)(10 + i);
      }
      var end = Date.now();
      var duration = end - start;
      expect(duration).toBeLessThan(1000);
    });
  });
  describe('Fonctions disponibles', function () {
    it('devrait exporter toutes les fonctions nécessaires', function () {
      expect(typeof _scaling.scale).toBe('function');
      expect(typeof _scaling.verticalScale).toBe('function');
      expect(typeof _scaling.moderateScale).toBe('function');
      expect(typeof _scaling.pixelRound).toBe('function');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,