c939d66979a49bd0262a5b4ba0a900ac
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var createStyles = function createStyles() {
  var levelColor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "#5E60CE";
  return _reactNative.StyleSheet.create({
    card: {
      marginBottom: 20,
      backgroundColor: 'white'
    },
    cardContent: {
      padding: 20
    },
    revealedContainer: {
      alignItems: 'center'
    },
    contentWrapper: {
      alignItems: 'center',
      marginBottom: 20,
      paddingHorizontal: 8
    },
    revealedText: {
      fontSize: 24,
      fontWeight: '700',
      textAlign: 'center',
      lineHeight: 32,
      letterSpacing: 0.4
    },
    hideButton: Object.assign({
      paddingVertical: 12,
      paddingHorizontal: 18,
      backgroundColor: 'white',
      borderRadius: 16,
      borderWidth: 1.5,
      borderColor: `${levelColor}25`,
      alignSelf: 'center'
    }, _reactNative.Platform.select({
      ios: {
        shadowColor: '#000',
        shadowOffset: {
          width: 0,
          height: 2
        },
        shadowOpacity: 0.08,
        shadowRadius: 8
      },
      android: {
        elevation: 3
      }
    })),
    hideButtonText: {
      fontSize: 15,
      fontWeight: '600',
      letterSpacing: 0.2
    },
    revealButtonContainer: Object.assign({
      borderRadius: 18,
      overflow: 'hidden',
      alignSelf: 'center'
    }, _reactNative.Platform.select({
      ios: {
        shadowColor: levelColor,
        shadowOffset: {
          width: 0,
          height: 4
        },
        shadowOpacity: 0.2,
        shadowRadius: 12
      },
      android: {
        elevation: 6
      }
    })),
    revealButton: {
      alignItems: 'center',
      justifyContent: 'center',
      paddingVertical: 16,
      paddingHorizontal: 28,
      borderRadius: 18
    },
    revealButtonText: {
      fontSize: 16,
      fontWeight: '700',
      color: 'white',
      letterSpacing: 0.3
    }
  });
};
var _default = exports.default = createStyles;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiY3JlYXRlU3R5bGVzIiwibGV2ZWxDb2xvciIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJjYXJkIiwibWFyZ2luQm90dG9tIiwiYmFja2dyb3VuZENvbG9yIiwiY2FyZENvbnRlbnQiLCJwYWRkaW5nIiwicmV2ZWFsZWRDb250YWluZXIiLCJhbGlnbkl0ZW1zIiwiY29udGVudFdyYXBwZXIiLCJwYWRkaW5nSG9yaXpvbnRhbCIsInJldmVhbGVkVGV4dCIsImZvbnRTaXplIiwiZm9udFdlaWdodCIsInRleHRBbGlnbiIsImxpbmVIZWlnaHQiLCJsZXR0ZXJTcGFjaW5nIiwiaGlkZUJ1dHRvbiIsIk9iamVjdCIsImFzc2lnbiIsInBhZGRpbmdWZXJ0aWNhbCIsImJvcmRlclJhZGl1cyIsImJvcmRlcldpZHRoIiwiYm9yZGVyQ29sb3IiLCJhbGlnblNlbGYiLCJQbGF0Zm9ybSIsInNlbGVjdCIsImlvcyIsInNoYWRvd0NvbG9yIiwic2hhZG93T2Zmc2V0Iiwid2lkdGgiLCJoZWlnaHQiLCJzaGFkb3dPcGFjaXR5Iiwic2hhZG93UmFkaXVzIiwiYW5kcm9pZCIsImVsZXZhdGlvbiIsImhpZGVCdXR0b25UZXh0IiwicmV2ZWFsQnV0dG9uQ29udGFpbmVyIiwib3ZlcmZsb3ciLCJyZXZlYWxCdXR0b24iLCJqdXN0aWZ5Q29udGVudCIsInJldmVhbEJ1dHRvblRleHQiLCJjb2xvciIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlcyI6WyJzdHlsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvY29tcG9uZW50cy91aS9SZXZlYWxCdXR0b24vc3R5bGUuanMgLSBERVNJR04gQkFCQkVMIDIwMjUg8J+Or1xuXG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBQbGF0Zm9ybSB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcblxuLyoqXG4gKiDwn5SYIFN0eWxlcyBCYWJiZWwgMjAyNSBwb3VyIFJldmVhbEJ1dHRvblxuICogLSBTaW1wbGUgZXQgY29ow6lyZW50IGF2ZWMgTmF2aWdhdGlvbkJ1dHRvbnNcbiAqIC0gUGFzIGRlIGTDqWxpcmUgc2hpbW1lci9nbGFzc21vcnBoaXNtXG4gKiAtIEp1c3RlIHByb3ByZSBldCBlZmZpY2FjZVxuICovXG5jb25zdCBjcmVhdGVTdHlsZXMgPSAobGV2ZWxDb2xvciA9IFwiIzVFNjBDRVwiKSA9PlxuICBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gICAgXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PSBDQVJEIENPTlRBSU5FUiA9PT09PT09PT09PT09PT09PT09XG4gICAgY2FyZDoge1xuICAgICAgbWFyZ2luQm90dG9tOiAyMCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICB9LFxuICAgIGNhcmRDb250ZW50OiB7XG4gICAgICBwYWRkaW5nOiAyMCxcbiAgICB9LFxuXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PSBDT05URU5VIFLDiVbDiUzDiSA9PT09PT09PT09PT09PT09PT09XG4gICAgcmV2ZWFsZWRDb250YWluZXI6IHtcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIH0sXG4gICAgXG4gICAgY29udGVudFdyYXBwZXI6IHtcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgbWFyZ2luQm90dG9tOiAyMCxcbiAgICAgIHBhZGRpbmdIb3Jpem9udGFsOiA4LFxuICAgIH0sXG4gICAgXG4gICAgcmV2ZWFsZWRUZXh0OiB7XG4gICAgICBmb250U2l6ZTogMjQsXG4gICAgICBmb250V2VpZ2h0OiAnNzAwJyxcbiAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICBsaW5lSGVpZ2h0OiAzMixcbiAgICAgIGxldHRlclNwYWNpbmc6IDAuNCxcbiAgICB9LFxuXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PSBCT1VUT04gSElERSAtIFN0eWxlIGdob3N0IGNvbW1lIFwiUHLDqWPDqWRlbnRcIiA9PT09PT09PT09PT09PT09PT09XG4gICAgaGlkZUJ1dHRvbjoge1xuICAgICAgcGFkZGluZ1ZlcnRpY2FsOiAxMixcbiAgICAgIHBhZGRpbmdIb3Jpem9udGFsOiAxOCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICAgIGJvcmRlclJhZGl1czogMTYsXG4gICAgICBib3JkZXJXaWR0aDogMS41LFxuICAgICAgYm9yZGVyQ29sb3I6IGAke2xldmVsQ29sb3J9MjVgLFxuICAgICAgYWxpZ25TZWxmOiAnY2VudGVyJyxcbiAgICAgIFxuICAgICAgLy8gT21icmUgc3VidGlsZSBjb21tZSBsZXMgYXV0cmVzIGJvdXRvbnNcbiAgICAgIC4uLlBsYXRmb3JtLnNlbGVjdCh7XG4gICAgICAgIGlvczoge1xuICAgICAgICAgIHNoYWRvd0NvbG9yOiAnIzAwMCcsXG4gICAgICAgICAgc2hhZG93T2Zmc2V0OiB7IHdpZHRoOiAwLCBoZWlnaHQ6IDIgfSxcbiAgICAgICAgICBzaGFkb3dPcGFjaXR5OiAwLjA4LFxuICAgICAgICAgIHNoYWRvd1JhZGl1czogOCxcbiAgICAgICAgfSxcbiAgICAgICAgYW5kcm9pZDoge1xuICAgICAgICAgIGVsZXZhdGlvbjogMyxcbiAgICAgICAgfSxcbiAgICAgIH0pLFxuICAgIH0sXG4gICAgXG4gICAgaGlkZUJ1dHRvblRleHQ6IHtcbiAgICAgIGZvbnRTaXplOiAxNSxcbiAgICAgIGZvbnRXZWlnaHQ6ICc2MDAnLFxuICAgICAgbGV0dGVyU3BhY2luZzogMC4yLFxuICAgIH0sXG5cbiAgICAvLyA9PT09PT09PT09PT09PT09PT09IEJPVVRPTiBSRVZFQUwgLSBTdHlsZSBjb2jDqXJlbnQgYXZlYyBcIlN1aXZhbnRcIiA9PT09PT09PT09PT09PT09PT09XG4gICAgcmV2ZWFsQnV0dG9uQ29udGFpbmVyOiB7XG4gICAgICBib3JkZXJSYWRpdXM6IDE4LFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgYWxpZ25TZWxmOiAnY2VudGVyJyxcbiAgICAgIFxuICAgICAgLy8gT21icmUgY29sb3LDqWUgY29tbWUgbGUgYm91dG9uIFwiU3VpdmFudFwiXG4gICAgICAuLi5QbGF0Zm9ybS5zZWxlY3Qoe1xuICAgICAgICBpb3M6IHtcbiAgICAgICAgICBzaGFkb3dDb2xvcjogbGV2ZWxDb2xvcixcbiAgICAgICAgICBzaGFkb3dPZmZzZXQ6IHsgd2lkdGg6IDAsIGhlaWdodDogNCB9LFxuICAgICAgICAgIHNoYWRvd09wYWNpdHk6IDAuMixcbiAgICAgICAgICBzaGFkb3dSYWRpdXM6IDEyLFxuICAgICAgICB9LFxuICAgICAgICBhbmRyb2lkOiB7XG4gICAgICAgICAgZWxldmF0aW9uOiA2LFxuICAgICAgICB9LFxuICAgICAgfSksXG4gICAgfSxcbiAgICBcbiAgICByZXZlYWxCdXR0b246IHtcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgcGFkZGluZ1ZlcnRpY2FsOiAxNixcbiAgICAgIHBhZGRpbmdIb3Jpem9udGFsOiAyOCxcbiAgICAgIGJvcmRlclJhZGl1czogMTgsXG4gICAgfSxcbiAgICBcbiAgICByZXZlYWxCdXR0b25UZXh0OiB7XG4gICAgICBmb250U2l6ZTogMTYsXG4gICAgICBmb250V2VpZ2h0OiAnNzAwJyxcbiAgICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgICAgbGV0dGVyU3BhY2luZzogMC4zLFxuICAgIH0sXG4gIH0pO1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdHlsZXM7Il0sIm1hcHBpbmdzIjoiOzs7O0FBRUEsSUFBQUEsWUFBQSxHQUFBQyxPQUFBO0FBUUEsSUFBTUMsWUFBWSxHQUFHLFNBQWZBLFlBQVlBLENBQUE7RUFBQSxJQUFJQyxVQUFVLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLFNBQVM7RUFBQSxPQUMxQ0csdUJBQVUs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