{"version":3,"names":["calculateTotalQuestions","exports","readingData","cov_129dud7k3b","f","s","reduce","total","exercise","_exercise$questions","b","questions","length","calculateCompletedQuestionsCount","completedQuestions","Object","values","calculateTotalProgress","totalQuestions","completedCount","Math","round","calculateExerciseProgress","map","index","_exercise$questions2","_completedQuestions$i","progress","title"],"sources":["readingStats.js"],"sourcesContent":["// utils/reading/readingStats.js - Fonctions utilitaires (pattern identique Ã  vocabularyStats)\n\n/**\n * ðŸ“Š Utilitaires de calcul pour Reading\n * Pattern identique Ã  utils/vocabulary/vocabularyStats.js\n * Garde la logique mÃ©tier sÃ©parÃ©e des composants\n */\n\n/**\n * Calculer le nombre total de questions\n * @param {Array} readingData - DonnÃ©es de lecture [{ questions: [...] }]\n * @returns {number} Nombre total de questions\n */\nexport const calculateTotalQuestions = (readingData) => {\n  return readingData.reduce((total, exercise) => {\n    return total + (exercise.questions?.length || 0);\n  }, 0);\n};\n\n/**\n * Calculer le nombre de questions complÃ©tÃ©es\n * @param {Object} completedQuestions - Questions complÃ©tÃ©es {0: [0,1,2], 1: [0]}\n * @returns {number} Nombre de questions complÃ©tÃ©es\n */\nexport const calculateCompletedQuestionsCount = (completedQuestions) => {\n  return Object.values(completedQuestions).reduce((total, questions) => {\n    return total + (questions?.length || 0);\n  }, 0);\n};\n\n/**\n * Calculer la progression totale en pourcentage\n * @param {Array} readingData - DonnÃ©es de lecture\n * @param {Object} completedQuestions - Questions complÃ©tÃ©es\n * @returns {number} Pourcentage de progression (0-100)\n */\nexport const calculateTotalProgress = (readingData, completedQuestions) => {\n  const totalQuestions = calculateTotalQuestions(readingData);\n  const completedCount = calculateCompletedQuestionsCount(completedQuestions);\n  \n  return totalQuestions > 0 ? Math.round((completedCount / totalQuestions) * 100) : 0;\n};\n\n/**\n * Calculer la progression par exercice de lecture\n * @param {Array} readingData - DonnÃ©es de lecture\n * @param {Object} completedQuestions - Questions complÃ©tÃ©es\n * @returns {Array} Progression par exercice\n */\nexport const calculateExerciseProgress = (readingData, completedQuestions) => {\n  return readingData.map((exercise, index) => {\n    const totalQuestions = exercise.questions?.length || 0;\n    const completedCount = completedQuestions[index]?.length || 0;\n    const progress = totalQuestions > 0 ? (completedCount / totalQuestions) * 100 : 0;\n    \n    return {\n      title: exercise.title,\n      totalQuestions,\n      completedQuestions: completedCount,\n      progress: Math.round(progress),\n    };\n  });\n};"],"mappings":"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","ignoreList":[]}