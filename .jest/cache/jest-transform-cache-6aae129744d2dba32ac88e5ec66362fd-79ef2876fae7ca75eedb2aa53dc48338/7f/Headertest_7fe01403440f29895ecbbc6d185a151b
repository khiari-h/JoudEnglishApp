06316222f7d51eb6f370509587738e5c
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  return Object.assign({}, RN, {
    StatusBar: jest.fn(function () {
      return null;
    }),
    Text: 'Text'
  });
});
_getJestObj().mock('@expo/vector-icons', function () {
  var _require = require('react-native'),
    View = _require.View;
  return {
    Ionicons: function Ionicons(_ref) {
      var name = _ref.name,
        onPress = _ref.onPress;
      return View;
    }
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        goBack: jest.fn(),
        canGoBack: function canGoBack() {
          return true;
        }
      };
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Header = _interopRequireDefault(require("../../../src/components/layout/Header"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Header', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('renders correctly with title', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Test Title"
      })),
      getByText = _render.getByText;
    expect(getByText('Test Title')).toBeTruthy();
  });
  it('calls goBack when back button is pressed', function () {
    var mockGoBack = jest.fn();
    jest.spyOn(require('@react-navigation/native'), 'useNavigation').mockReturnValue({
      goBack: mockGoBack,
      canGoBack: function canGoBack() {
        return true;
      }
    });
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Test",
        showBackButton: true
      })),
      getByTestId = _render2.getByTestId;
    _reactNative.fireEvent.press(getByTestId('back-button'));
    expect(mockGoBack).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJSTiIsImplc3QiLCJyZXF1aXJlQWN0dWFsIiwiT2JqZWN0IiwiYXNzaWduIiwiU3RhdHVzQmFyIiwiZm4iLCJUZXh0IiwiX3JlcXVpcmUiLCJyZXF1aXJlIiwiVmlldyIsIklvbmljb25zIiwiX3JlZiIsIm5hbWUiLCJvblByZXNzIiwidXNlTmF2aWdhdGlvbiIsImdvQmFjayIsImNhbkdvQmFjayIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfSGVhZGVyIiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZTIiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwiaXQiLCJfcmVuZGVyIiwicmVuZGVyIiwianN4IiwiZGVmYXVsdCIsInRpdGxlIiwiZ2V0QnlUZXh0IiwiZXhwZWN0IiwidG9CZVRydXRoeSIsIm1vY2tHb0JhY2siLCJzcHlPbiIsIm1vY2tSZXR1cm5WYWx1ZSIsIl9yZW5kZXIyIiwic2hvd0JhY2tCdXR0b24iLCJnZXRCeVRlc3RJZCIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZCJdLCJzb3VyY2VzIjpbIkhlYWRlci50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCBIZWFkZXIgZnJvbSAnLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvbGF5b3V0L0hlYWRlcic7XG5cbi8vIE1vY2sgZGUgcmVhY3QtbmF0aXZlXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZScsICgpID0+IHtcbiAgY29uc3QgUk4gPSBqZXN0LnJlcXVpcmVBY3R1YWwoJ3JlYWN0LW5hdGl2ZScpO1xuICByZXR1cm4ge1xuICAgIC4uLlJOLFxuICAgIFN0YXR1c0JhcjogamVzdC5mbigoKSA9PiBudWxsKSxcbiAgICBUZXh0OiAnVGV4dCcsIC8vIEFqb3V0ZXogY2V0dGUgbGlnbmVcbiAgfTtcbn0pO1xuXG4vLyBNb2NrIHNpbXBsaWZpw6kgcG91ciBsZXMgaWPDtG5lc1xuamVzdC5tb2NrKCdAZXhwby92ZWN0b3ItaWNvbnMnLCAoKSA9PiB7XG4gIGNvbnN0IHsgVmlldyB9ID0gcmVxdWlyZSgncmVhY3QtbmF0aXZlJyk7XG4gIHJldHVybiB7XG4gICAgSW9uaWNvbnM6ICh7IG5hbWUsIG9uUHJlc3MgfSkgPT4gVmlldyxcbiAgfTtcbn0pO1xuXG4vLyBNb2NrIGRlIG5hdmlnYXRpb25cbmplc3QubW9jaygnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJywgKCkgPT4gKHtcbiAgdXNlTmF2aWdhdGlvbjogKCkgPT4gKHtcbiAgICBnb0JhY2s6IGplc3QuZm4oKSxcbiAgICBjYW5Hb0JhY2s6ICgpID0+IHRydWUsXG4gIH0pLFxufSkpO1xuXG5kZXNjcmliZSgnSGVhZGVyJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgY29ycmVjdGx5IHdpdGggdGl0bGUnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcig8SGVhZGVyIHRpdGxlPVwiVGVzdCBUaXRsZVwiIC8+KTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdUZXN0IFRpdGxlJykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ2NhbGxzIGdvQmFjayB3aGVuIGJhY2sgYnV0dG9uIGlzIHByZXNzZWQnLCAoKSA9PiB7XG4gICAgY29uc3QgbW9ja0dvQmFjayA9IGplc3QuZm4oKTtcbiAgICBqZXN0LnNweU9uKHJlcXVpcmUoJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScpLCAndXNlTmF2aWdhdGlvbicpLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICBnb0JhY2s6IG1vY2tHb0JhY2ssXG4gICAgICBjYW5Hb0JhY2s6ICgpID0+IHRydWUsXG4gICAgfSk7XG4gICAgXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxIZWFkZXIgdGl0bGU9XCJUZXN0XCIgc2hvd0JhY2tCdXR0b249e3RydWV9IC8+KTtcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ2JhY2stYnV0dG9uJykpO1xuICAgIGV4cGVjdChtb2NrR29CYWNrKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xuXG4gIC8vIEFqb3V0ZXogZCdhdXRyZXMgdGVzdHMgYXUgYmVzb2luLi4uXG59KTsiXSwibWFwcGluZ3MiOiJBQUtBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxjQUFjLEVBQUUsWUFBTTtFQUM5QixJQUFNQyxFQUFFLEdBQUdDLElBQUksQ0FBQ0MsYUFBYSxDQUFDLGNBQWMsQ0FBQztFQUM3QyxPQUFBQyxNQUFBLENBQUFDLE1BQUEsS0FDS0osRUFBRTtJQUNMSyxTQUFTLEVBQUVKLElBQUksQ0FBQ0ssRUFBRSxDQUFDO01BQUEsT0FBTSxJQUFJO0lBQUEsRUFBQztJQUM5QkMsSUFBSSxFQUFFO0VBQU07QUFFaEIsQ0FBQyxDQUFDO0FBR0ZULFdBQUEsR0FBS0MsSUFBSSxDQUFDLG9CQUFvQixFQUFFLFlBQU07RUFDcEMsSUFBQVMsUUFBQSxHQUFpQkMsT0FBTyxDQUFDLGNBQWMsQ0FBQztJQUFoQ0MsSUFBSSxHQUFBRixRQUFBLENBQUpFLElBQUk7RUFDWixPQUFPO0lBQ0xDLFFBQVEsRUFBRSxTQUFWQSxRQUFRQSxDQUFBQyxJQUFBO01BQUEsSUFBS0MsSUFBSSxHQUFBRCxJQUFBLENBQUpDLElBQUk7UUFBRUMsT0FBTyxHQUFBRixJQUFBLENBQVBFLE9BQU87TUFBQSxPQUFPSixJQUFJO0lBQUE7RUFDdkMsQ0FBQztBQUNILENBQUMsQ0FBQztBQUdGWixXQUFBLEdBQUtDLElBQUksQ0FBQywwQkFBMEIsRUFBRTtFQUFBLE9BQU87SUFDM0NnQixhQUFhLEVBQUUsU0FBZkEsYUFBYUEsQ0FBQTtNQUFBLE9BQVM7UUFDcEJDLE1BQU0sRUFBRWYsSUFBSSxDQUFDSyxFQUFFLENBQUMsQ0FBQztRQUNqQlcsU0FBUyxFQUFFLFNBQVhBLFNBQVNBLENBQUE7VUFBQSxPQUFRLElBQUk7UUFBQTtNQUN2QixDQUFDO0lBQUE7RUFDSCxDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBQUMsSUFBQUMsc0JBQUEsR0FBQVQsT0FBQTtBQTVCSixJQUFBVSxNQUFBLEdBQUFELHNCQUFBLENBQUFULE9BQUE7QUFDQSxJQUFBVyxZQUFBLEdBQUFYLE9BQUE7QUFDQSxJQUFBWSxPQUFBLEdBQUFILHNCQUFBLENBQUFULE9BQUE7QUFBMkQsSUFBQWEsV0FBQSxHQUFBYixPQUFBO0FBQUEsU0FBQVgsWUFBQTtFQUFBLElBQUF5QixTQUFBLEdBQUFkLE9BQUE7SUFBQVIsSUFBQSxHQUFBc0IsU0FBQSxDQUFBdEIsSUFBQTtFQUFBSCxXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBRyxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUE0QjNEdUIsUUFBUSxDQUFDLFFBQVEsRUFBRSxZQUFNO0VBQ3ZCQyxVQUFVLENBQUMsWUFBTTtJQUNmeEIsSUFBSSxDQUFDeUIsYUFBYSxDQUFDLENBQUM7RUFDdEIsQ0FBQyxDQUFDO0VBRUZDLEVBQUUsQ0FBQyw4QkFBOEIsRUFBRSxZQUFNO0lBQ3ZDLElBQUFDLE9BQUEsR0FBc0IsSUFBQUMsbUJBQU0sRUFBQyxJQUFBUCxXQUFBLENBQUFRLEdBQUEsRUFBQ1QsT0FBQSxDQUFBVSxPQUFNO1FBQUNDLEtBQUssRUFBQztNQUFZLENBQUUsQ0FBQyxDQUFDO01BQW5EQyxTQUFTLEdBQUFMLE9BQUEsQ0FBVEssU0FBUztJQUNqQkMsTUFBTSxDQUFDRCxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQ0UsVUFBVSxDQUFDLENBQUM7RUFDOUMsQ0FBQyxDQUFDO0VBRUZSLEVBQUUsQ0FBQywwQ0FBMEMsRUFBRSxZQUFNO0lBQ25ELElBQU1TLFVBQVUsR0FBR25DLElBQUksQ0FBQ0ssRUFBRSxDQUFDLENBQUM7SUFDNUJMLElBQUksQ0FBQ29DLEtBQUssQ0FBQzVCLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxFQUFFLGVBQWUsQ0FBQyxDQUFDNkIsZUFBZSxDQUFDO01BQy9FdEIsTUFBTSxFQUFFb0IsVUFBVTtNQUNsQm5CLFNBQVMsRUFBRSxTQUFYQSxTQUFTQSxDQUFBO1FBQUEsT0FBUSxJQUFJO01BQUE7SUFDdkIsQ0FBQyxDQUFDO0lBRUYsSUFBQXNCLFFBQUEsR0FBd0IsSUFBQVYsbUJBQU0sRUFBQyxJQUFBUCxXQUFBLENBQUFRLEdBQUEsRUFBQ1QsT0FBQSxDQUFBVSxPQUFNO1FBQUNDLEtBQUssRUFBQyxNQUFNO1FBQUNRLGNBQWMsRUFBRTtNQUFLLENBQUUsQ0FBQyxDQUFDO01BQXJFQyxXQUFXLEdBQUFGLFFBQUEsQ0FBWEUsV0FBVztJQUNuQkMsc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDRixXQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDM0NQLE1BQU0sQ0FBQ0UsVUFBVSxDQUFDLENBQUNRLGdCQUFnQixDQUFDLENBQUM7RUFDdkMsQ0FBQyxDQUFDO0FBR0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119