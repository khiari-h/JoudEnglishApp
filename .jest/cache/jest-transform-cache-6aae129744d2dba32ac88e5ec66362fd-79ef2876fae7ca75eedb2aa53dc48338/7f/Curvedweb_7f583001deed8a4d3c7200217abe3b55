5e575896c3fccb4f5b4ae9706cef37a9
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CurvedTransition = CurvedTransition;
exports.prepareCurvedTransition = prepareCurvedTransition;
var _ = require("../..");
var _Easing = require("../Easing.web");
function resetStyle(component) {
  component.style.animationName = '';
  component.style.position = 'absolute';
  component.style.top = '0px';
  component.style.left = '0px';
  component.style.margin = '0px';
  component.style.width = '100%';
  component.style.height = '100%';
}
function showChildren(parent, childrenDisplayProperty, shouldShow) {
  for (var i = 0; i < parent.children.length; ++i) {
    var child = parent.children[i];
    if (shouldShow) {
      child.style.display = childrenDisplayProperty.get(child);
    } else {
      childrenDisplayProperty.set(child, child.style.display);
      child.style.display = 'none';
    }
  }
}
function prepareParent(element, dummy, animationConfig, transitionData) {
  animationConfig.easing = (0, _Easing.getEasingByName)(transitionData.easingX);
  var childrenDisplayProperty = new Map();
  showChildren(element, childrenDisplayProperty, false);
  var originalBackgroundColor = element.style.backgroundColor;
  element.style.backgroundColor = 'transparent';
  var onFinalize = function onFinalize() {
    if (element.contains(dummy)) {
      element.removeChild(dummy);
    }
    showChildren(element, childrenDisplayProperty, true);
    element.style.backgroundColor = originalBackgroundColor;
  };
  var _animationCancelCallback = function animationCancelCallback() {
    onFinalize();
    element.removeEventListener('animationcancel', _animationCancelCallback);
  };
  var _animationEndCallback = function animationEndCallback() {
    onFinalize();
    element.removeEventListener('animationend', _animationEndCallback);
  };
  element.addEventListener('animationend', _animationEndCallback);
  element.addEventListener('animationcancel', _animationCancelCallback);
  element.appendChild(dummy);
}
function prepareDummy(element, animationConfig, transitionData, dummyTransitionKeyframeName) {
  var dummyAnimationConfig = {
    animationName: dummyTransitionKeyframeName,
    animationType: _.LayoutAnimationType.LAYOUT,
    duration: animationConfig.duration,
    delay: animationConfig.delay,
    easing: (0, _Easing.getEasingByName)(transitionData.easingY),
    callback: null,
    reversed: false
  };
  var dummy = element.cloneNode(true);
  resetStyle(dummy);
  return {
    dummy: dummy,
    dummyAnimationConfig: dummyAnimationConfig
  };
}
function prepareCurvedTransition(element, animationConfig, transitionData, dummyTransitionKeyframeName) {
  var _prepareDummy = prepareDummy(element, animationConfig, transitionData, dummyTransitionKeyframeName),
    dummy = _prepareDummy.dummy,
    dummyAnimationConfig = _prepareDummy.dummyAnimationConfig;
  prepareParent(element, dummy, animationConfig, transitionData);
  return {
    dummy: dummy,
    dummyAnimationConfig: dummyAnimationConfig
  };
}
function CurvedTransition(keyframeXName, keyframeYName, transitionData) {
  var keyframeXObj = {
    name: keyframeXName,
    style: {
      0: {
        transform: [{
          translateX: `${transitionData.translateX}px`,
          scale: `${transitionData.scaleX},${transitionData.scaleY}`
        }]
      }
    },
    duration: 300
  };
  var keyframeYObj = {
    name: keyframeYName,
    style: {
      0: {
        transform: [{
          translateY: `${transitionData.translateY}px`,
          scale: `${transitionData.scaleX},${transitionData.scaleY}`
        }]
      }
    },
    duration: 300
  };
  return {
    firstKeyframeObj: keyframeXObj,
    secondKeyframeObj: keyframeYObj
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,