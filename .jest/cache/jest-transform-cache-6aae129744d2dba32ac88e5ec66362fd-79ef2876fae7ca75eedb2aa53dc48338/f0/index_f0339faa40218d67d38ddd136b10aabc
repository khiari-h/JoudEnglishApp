68629b44b5e9c2dc1613e9953b9bcea1
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getB2ExercisesByTopic = exports.getB2ExercisesByDifficulty = exports.getB2ExerciseById = exports.getAllB2Exercises = exports.default = exports.b2Metadata = void 0;
Object.defineProperty(exports, "readingQuestionsB2", {
  enumerable: true,
  get: function get() {
    return _readingQuestionsB.default;
  }
});
Object.defineProperty(exports, "readingTextsB2", {
  enumerable: true,
  get: function get() {
    return _readingTextsB.default;
  }
});
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _readingTextsB = _interopRequireDefault(require("./categories/readingTextsB2.js"));
var _readingQuestionsB = _interopRequireDefault(require("./categories/readingQuestionsB2.js"));
var combineTextWithQuestions = function combineTextWithQuestions(textId) {
  var text = _readingTextsB.default.find(function (t) {
    return t.id === textId;
  });
  var questions = _readingQuestionsB.default.find(function (q) {
    return q.textId === textId;
  });
  if (!text || !questions) {
    return null;
  }
  return Object.assign({}, text, {
    questions: questions.questions
  });
};
var getAllB2Exercises = exports.getAllB2Exercises = function getAllB2Exercises() {
  return _readingTextsB.default.map(function (text) {
    return combineTextWithQuestions(text.id);
  }).filter(Boolean);
};
var getB2ExerciseById = exports.getB2ExerciseById = function getB2ExerciseById(textId) {
  return combineTextWithQuestions(textId);
};
var getB2ExercisesByDifficulty = exports.getB2ExercisesByDifficulty = function getB2ExercisesByDifficulty(difficulty) {
  var filteredTexts = _readingTextsB.default.filter(function (text) {
    return text.difficulty === difficulty;
  });
  return filteredTexts.map(function (text) {
    return combineTextWithQuestions(text.id);
  }).filter(Boolean);
};
var getB2ExercisesByTopic = exports.getB2ExercisesByTopic = function getB2ExercisesByTopic(topic) {
  var filteredTexts = _readingTextsB.default.filter(function (text) {
    var _text$topics;
    return (_text$topics = text.topics) == null ? void 0 : _text$topics.includes(topic);
  });
  return filteredTexts.map(function (text) {
    return combineTextWithQuestions(text.id);
  }).filter(Boolean);
};
var b2Metadata = exports.b2Metadata = {
  level: "B2",
  totalTexts: _readingTextsB.default.length,
  totalQuestions: _readingQuestionsB.default.reduce(function (sum, q) {
    return sum + q.questions.length;
  }, 0),
  averageWordCount: Math.round(_readingTextsB.default.reduce(function (sum, text) {
    return sum + text.wordCount;
  }, 0) / _readingTextsB.default.length),
  difficulties: (0, _toConsumableArray2.default)(new Set(_readingTextsB.default.map(function (text) {
    return text.difficulty;
  }))).sort(),
  topics: (0, _toConsumableArray2.default)(new Set(_readingTextsB.default.flatMap(function (text) {
    return text.topics;
  }))).sort(),
  description: "Upper-intermediate level reading comprehension exercises focusing on complex arguments, detailed analysis, and sophisticated vocabulary in academic and professional contexts."
};
var readingB2Data = {
  metadata: b2Metadata,
  exercises: getAllB2Exercises(),
  getAll: getAllB2Exercises,
  getById: getB2ExerciseById,
  getByDifficulty: getB2ExercisesByDifficulty,
  getByTopic: getB2ExercisesByTopic,
  texts: _readingTextsB.default,
  questions: _readingQuestionsB.default
};
var _default = exports.default = readingB2Data;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,