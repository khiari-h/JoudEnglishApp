{"version":3,"names":["_readingTextsB","_interopRequireDefault","require","_readingQuestionsB","combineTextWithQuestions","textId","text","readingTextsB2","find","t","id","questions","readingQuestionsB2","q","Object","assign","getAllB2Exercises","exports","map","filter","Boolean","getB2ExerciseById","getB2ExercisesByDifficulty","difficulty","filteredTexts","getB2ExercisesByTopic","topic","_text$topics","topics","includes","b2Metadata","level","totalTexts","length","totalQuestions","reduce","sum","averageWordCount","Math","round","wordCount","difficulties","_toConsumableArray2","default","Set","sort","flatMap","description","readingB2Data","metadata","exercises","getAll","getById","getByDifficulty","getByTopic","texts","_default"],"sources":["index.js"],"sourcesContent":["// src/data/exercises/reading/readingB2Index.js\n\nimport readingTextsB2 from './categories/readingTextsB2.js';\nimport readingQuestionsB2 from './categories/readingQuestionsB2.js';\n\n// Fonction pour combiner textes et questions\nconst combineTextWithQuestions = (textId) => {\n  const text = readingTextsB2.find(t => t.id === textId);\n  const questions = readingQuestionsB2.find(q => q.textId === textId);\n\n  if (!text || !questions) {\n\n    return null;\n  }\n\n  return {\n    ...text,\n    questions: questions.questions\n  };\n};\n\n// Fonction pour obtenir tous les exercices combinés\nconst getAllB2Exercises = () => {\n  return readingTextsB2.map(text => combineTextWithQuestions(text.id)).filter(Boolean);\n};\n\n// Fonction pour obtenir un exercice par ID\nconst getB2ExerciseById = (textId) => {\n  return combineTextWithQuestions(textId);\n};\n\n// Fonction pour obtenir des exercices par difficulté\nconst getB2ExercisesByDifficulty = (difficulty) => {\n  const filteredTexts = readingTextsB2.filter(text => text.difficulty === difficulty);\n  return filteredTexts.map(text => combineTextWithQuestions(text.id)).filter(Boolean);\n};\n\n// Fonction pour obtenir des exercices par sujet\nconst getB2ExercisesByTopic = (topic) => {\n  const filteredTexts = readingTextsB2.filter(text => \n    text.topics?.includes(topic)\n  );\n  return filteredTexts.map(text => combineTextWithQuestions(text.id)).filter(Boolean);\n};\n\n// Métadonnées du niveau B2\nconst b2Metadata = {\n  level: \"B2\",\n  totalTexts: readingTextsB2.length,\n  totalQuestions: readingQuestionsB2.reduce((sum, q) => sum + q.questions.length, 0),\n  averageWordCount: Math.round(readingTextsB2.reduce((sum, text) => sum + text.wordCount, 0) / readingTextsB2.length),\n  difficulties: [...new Set(readingTextsB2.map(text => text.difficulty))].sort(),\n  topics: [...new Set(readingTextsB2.flatMap(text => text.topics))].sort(),\n  description: \"Upper-intermediate level reading comprehension exercises focusing on complex arguments, detailed analysis, and sophisticated vocabulary in academic and professional contexts.\"\n};\n\n// Export par défaut avec structure complète\nconst readingB2Data = {\n  metadata: b2Metadata,\n  exercises: getAllB2Exercises(),\n\n  // Fonctions utilitaires\n  getAll: getAllB2Exercises,\n  getById: getB2ExerciseById,\n  getByDifficulty: getB2ExercisesByDifficulty,\n  getByTopic: getB2ExercisesByTopic,\n\n  // Accès séparé aux données brutes\n  texts: readingTextsB2,\n  questions: readingQuestionsB2\n};\n\nexport default readingB2Data;\n\n// Exports nommés pour plus de flexibilité\nexport {\n  readingTextsB2,\n  readingQuestionsB2,\n  getAllB2Exercises,\n  getB2ExerciseById,\n  getB2ExercisesByDifficulty,\n  getB2ExercisesByTopic,\n  b2Metadata\n};\n"],"mappings":"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","ignoreList":[]}