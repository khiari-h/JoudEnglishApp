feede48331c4f644e4ce48afb429b1d9
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var ReactNativeFeatureFlags = _interopRequireWildcard(require("react-native/src/private/featureflags/ReactNativeFeatureFlags"));
var _VirtualizedListContext = require("./VirtualizedListContext.js");
var _invariant = _interopRequireDefault(require("invariant"));
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var CellRenderer = exports.default = function (_React$PureComponent) {
  function CellRenderer() {
    var _this;
    (0, _classCallCheck2.default)(this, CellRenderer);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, CellRenderer, [].concat(args));
    _this.state = {
      separatorProps: {
        highlighted: false,
        leadingItem: _this.props.item
      }
    };
    _this._separators = {
      highlight: function highlight() {
        var _this$props = _this.props,
          cellKey = _this$props.cellKey,
          prevCellKey = _this$props.prevCellKey;
        _this.props.onUpdateSeparators([cellKey, prevCellKey], {
          highlighted: true
        });
      },
      unhighlight: function unhighlight() {
        var _this$props2 = _this.props,
          cellKey = _this$props2.cellKey,
          prevCellKey = _this$props2.prevCellKey;
        _this.props.onUpdateSeparators([cellKey, prevCellKey], {
          highlighted: false
        });
      },
      updateProps: function updateProps(select, newProps) {
        var _this$props3 = _this.props,
          cellKey = _this$props3.cellKey,
          prevCellKey = _this$props3.prevCellKey;
        _this.props.onUpdateSeparators([select === 'leading' ? prevCellKey : cellKey], newProps);
      }
    };
    _this._onLayout = function (nativeEvent) {
      _this.props.onCellLayout == null || _this.props.onCellLayout(nativeEvent, _this.props.cellKey, _this.props.index);
    };
    _this._onCellFocusCapture = function (e) {
      _this.props.onCellFocusCapture == null || _this.props.onCellFocusCapture(_this.props.cellKey);
    };
    return _this;
  }
  (0, _inherits2.default)(CellRenderer, _React$PureComponent);
  return (0, _createClass2.default)(CellRenderer, [{
    key: "updateSeparatorProps",
    value: function updateSeparatorProps(newProps) {
      this.setState(function (state) {
        return {
          separatorProps: Object.assign({}, state.separatorProps, newProps)
        };
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.props.onUnmount(this.props.cellKey);
    }
  }, {
    key: "_renderElement",
    value: function _renderElement(renderItem, ListItemComponent, item, index) {
      if (renderItem && ListItemComponent) {
        console.warn('VirtualizedList: Both ListItemComponent and renderItem props are present. ListItemComponent will take' + ' precedence over renderItem.');
      }
      if (ListItemComponent) {
        return (0, _jsxRuntime.jsx)(ListItemComponent, {
          item: item,
          index: index,
          separators: this._separators
        });
      }
      if (renderItem) {
        return renderItem({
          item: item,
          index: index,
          separators: this._separators
        });
      }
      (0, _invariant.default)(false, 'VirtualizedList: Either ListItemComponent or renderItem props are required but none were found.');
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
        CellRendererComponent = _this$props4.CellRendererComponent,
        ItemSeparatorComponent = _this$props4.ItemSeparatorComponent,
        ListItemComponent = _this$props4.ListItemComponent,
        cellKey = _this$props4.cellKey,
        horizontal = _this$props4.horizontal,
        item = _this$props4.item,
        index = _this$props4.index,
        inversionStyle = _this$props4.inversionStyle,
        onCellLayout = _this$props4.onCellLayout,
        renderItem = _this$props4.renderItem;
      var element = this._renderElement(renderItem, ListItemComponent, item, index);
      var itemSeparator = React.isValidElement(ItemSeparatorComponent) ? ItemSeparatorComponent : ItemSeparatorComponent && (0, _jsxRuntime.jsx)(ItemSeparatorComponent, Object.assign({}, this.state.separatorProps));
      var cellStyle = inversionStyle ? horizontal ? [styles.rowReverse, inversionStyle] : [styles.columnReverse, inversionStyle] : horizontal ? [styles.row, inversionStyle] : inversionStyle;
      var result = !CellRendererComponent ? (0, _jsxRuntime.jsxs)(_reactNative.View, Object.assign({
        style: cellStyle,
        onFocusCapture: this._onCellFocusCapture
      }, onCellLayout && {
        onLayout: this._onLayout
      }, {
        children: [element, itemSeparator]
      })) : (0, _jsxRuntime.jsxs)(CellRendererComponent, Object.assign({
        cellKey: cellKey,
        index: index,
        item: item,
        style: cellStyle,
        onFocusCapture: this._onCellFocusCapture
      }, onCellLayout && {
        onLayout: this._onLayout
      }, {
        children: [element, itemSeparator]
      }));
      return (0, _jsxRuntime.jsx)(_VirtualizedListContext.VirtualizedListCellContextProvider, {
        cellKey: this.props.cellKey,
        children: result
      });
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, prevState) {
      if (ReactNativeFeatureFlags.enableOptimisedVirtualizedCells()) {
        if (props.item !== prevState.separatorProps.leadingItem) {
          return {
            separatorProps: Object.assign({}, prevState.separatorProps, {
              leadingItem: props.item
            })
          };
        }
        return null;
      } else {
        return {
          separatorProps: Object.assign({}, prevState.separatorProps, {
            leadingItem: props.item
          })
        };
      }
    }
  }]);
}(React.PureComponent);
var styles = _reactNative.StyleSheet.create({
  row: {
    flexDirection: 'row'
  },
  rowReverse: {
    flexDirection: 'row-reverse'
  },
  columnReverse: {
    flexDirection: 'column-reverse'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdE5hdGl2ZUZlYXR1cmVGbGFncyIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9WaXJ0dWFsaXplZExpc3RDb250ZXh0IiwiX2ludmFyaWFudCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJSZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9qc3hSdW50aW1lIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsIl90IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfY2FsbFN1cGVyIiwiX2dldFByb3RvdHlwZU9mMiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiY29uc3RydWN0b3IiLCJhcHBseSIsIkJvb2xlYW4iLCJwcm90b3R5cGUiLCJ2YWx1ZU9mIiwiQ2VsbFJlbmRlcmVyIiwiZXhwb3J0cyIsIl9SZWFjdCRQdXJlQ29tcG9uZW50IiwiX3RoaXMiLCJfY2xhc3NDYWxsQ2hlY2syIiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJjb25jYXQiLCJzdGF0ZSIsInNlcGFyYXRvclByb3BzIiwiaGlnaGxpZ2h0ZWQiLCJsZWFkaW5nSXRlbSIsInByb3BzIiwiaXRlbSIsIl9zZXBhcmF0b3JzIiwiaGlnaGxpZ2h0IiwiX3RoaXMkcHJvcHMiLCJjZWxsS2V5IiwicHJldkNlbGxLZXkiLCJvblVwZGF0ZVNlcGFyYXRvcnMiLCJ1bmhpZ2hsaWdodCIsIl90aGlzJHByb3BzMiIsInVwZGF0ZVByb3BzIiwic2VsZWN0IiwibmV3UHJvcHMiLCJfdGhpcyRwcm9wczMiLCJfb25MYXlvdXQiLCJuYXRpdmVFdmVudCIsIm9uQ2VsbExheW91dCIsImluZGV4IiwiX29uQ2VsbEZvY3VzQ2FwdHVyZSIsIm9uQ2VsbEZvY3VzQ2FwdHVyZSIsIl9pbmhlcml0czIiLCJfY3JlYXRlQ2xhc3MyIiwia2V5IiwidmFsdWUiLCJ1cGRhdGVTZXBhcmF0b3JQcm9wcyIsInNldFN0YXRlIiwiYXNzaWduIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJvblVubW91bnQiLCJfcmVuZGVyRWxlbWVudCIsInJlbmRlckl0ZW0iLCJMaXN0SXRlbUNvbXBvbmVudCIsImNvbnNvbGUiLCJ3YXJuIiwianN4Iiwic2VwYXJhdG9ycyIsImludmFyaWFudCIsInJlbmRlciIsIl90aGlzJHByb3BzNCIsIkNlbGxSZW5kZXJlckNvbXBvbmVudCIsIkl0ZW1TZXBhcmF0b3JDb21wb25lbnQiLCJob3Jpem9udGFsIiwiaW52ZXJzaW9uU3R5bGUiLCJlbGVtZW50IiwiaXRlbVNlcGFyYXRvciIsImlzVmFsaWRFbGVtZW50IiwiY2VsbFN0eWxlIiwic3R5bGVzIiwicm93UmV2ZXJzZSIsImNvbHVtblJldmVyc2UiLCJyb3ciLCJyZXN1bHQiLCJqc3hzIiwiVmlldyIsInN0eWxlIiwib25Gb2N1c0NhcHR1cmUiLCJvbkxheW91dCIsImNoaWxkcmVuIiwiVmlydHVhbGl6ZWRMaXN0Q2VsbENvbnRleHRQcm92aWRlciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsInByZXZTdGF0ZSIsImVuYWJsZU9wdGltaXNlZFZpcnR1YWxpemVkQ2VsbHMiLCJQdXJlQ29tcG9uZW50IiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsImZsZXhEaXJlY3Rpb24iXSwic291cmNlcyI6WyJWaXJ0dWFsaXplZExpc3RDZWxsUmVuZGVyZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0ICogYXMgUmVhY3ROYXRpdmVGZWF0dXJlRmxhZ3MgZnJvbSAncmVhY3QtbmF0aXZlL3NyYy9wcml2YXRlL2ZlYXR1cmVmbGFncy9SZWFjdE5hdGl2ZUZlYXR1cmVGbGFncyc7XG5pbXBvcnQgdHlwZSB7Q2VsbFJlbmRlcmVyUHJvcHMsIFJlbmRlckl0ZW1UeXBlfSBmcm9tICcuL1ZpcnR1YWxpemVkTGlzdFByb3BzJztcbmltcG9ydCB0eXBlIHtWaWV3U3R5bGVQcm9wfSBmcm9tICdyZWFjdC1uYXRpdmUvTGlicmFyaWVzL1N0eWxlU2hlZXQvU3R5bGVTaGVldCc7XG5pbXBvcnQgdHlwZSB7XG4gIEZvY3VzRXZlbnQsXG4gIExheW91dEV2ZW50LFxufSBmcm9tICdyZWFjdC1uYXRpdmUvTGlicmFyaWVzL1R5cGVzL0NvcmVFdmVudFR5cGVzJztcblxuaW1wb3J0IHtWaXJ0dWFsaXplZExpc3RDZWxsQ29udGV4dFByb3ZpZGVyfSBmcm9tICcuL1ZpcnR1YWxpemVkTGlzdENvbnRleHQuanMnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtTdHlsZVNoZWV0LCBWaWV3fSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuXG5leHBvcnQgdHlwZSBQcm9wczxJdGVtVD4gPSB7XG4gIENlbGxSZW5kZXJlckNvbXBvbmVudD86ID9SZWFjdC5Db21wb25lbnRUeXBlPENlbGxSZW5kZXJlclByb3BzPEl0ZW1UPj4sXG4gIEl0ZW1TZXBhcmF0b3JDb21wb25lbnQ6ID9SZWFjdC5Db21wb25lbnRUeXBlPFxuICAgIGFueSB8IHtoaWdobGlnaHRlZDogYm9vbGVhbiwgbGVhZGluZ0l0ZW06ID9JdGVtVH0sXG4gID4sXG4gIExpc3RJdGVtQ29tcG9uZW50PzogPyhSZWFjdC5Db21wb25lbnRUeXBlPGFueT4gfCBSZWFjdC5NaXhlZEVsZW1lbnQpLFxuICBjZWxsS2V5OiBzdHJpbmcsXG4gIGhvcml6b250YWw6ID9ib29sZWFuLFxuICBpbmRleDogbnVtYmVyLFxuICBpbnZlcnNpb25TdHlsZTogVmlld1N0eWxlUHJvcCxcbiAgaXRlbTogSXRlbVQsXG4gIG9uQ2VsbExheW91dD86IChldmVudDogTGF5b3V0RXZlbnQsIGNlbGxLZXk6IHN0cmluZywgaW5kZXg6IG51bWJlcikgPT4gdm9pZCxcbiAgb25DZWxsRm9jdXNDYXB0dXJlPzogKGNlbGxLZXk6IHN0cmluZykgPT4gdm9pZCxcbiAgb25Vbm1vdW50OiAoY2VsbEtleTogc3RyaW5nKSA9PiB2b2lkLFxuICBvblVwZGF0ZVNlcGFyYXRvcnM6IChcbiAgICBjZWxsS2V5czogQXJyYXk8P3N0cmluZz4sXG4gICAgcHJvcHM6IFBhcnRpYWw8U2VwYXJhdG9yUHJvcHM8SXRlbVQ+PixcbiAgKSA9PiB2b2lkLFxuICBwcmV2Q2VsbEtleTogP3N0cmluZyxcbiAgcmVuZGVySXRlbT86ID9SZW5kZXJJdGVtVHlwZTxJdGVtVD4sXG4gIC4uLlxufTtcblxudHlwZSBTZXBhcmF0b3JQcm9wczxJdGVtVD4gPSAkUmVhZE9ubHk8e3xcbiAgaGlnaGxpZ2h0ZWQ6IGJvb2xlYW4sXG4gIGxlYWRpbmdJdGVtOiA/SXRlbVQsXG58fT47XG5cbnR5cGUgU3RhdGU8SXRlbVQ+ID0ge1xuICBzZXBhcmF0b3JQcm9wczogU2VwYXJhdG9yUHJvcHM8SXRlbVQ+LFxuICAuLi5cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENlbGxSZW5kZXJlcjxJdGVtVD4gZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PFxuICBQcm9wczxJdGVtVD4sXG4gIFN0YXRlPEl0ZW1UPixcbj4ge1xuICBzdGF0ZTogU3RhdGU8SXRlbVQ+ID0ge1xuICAgIHNlcGFyYXRvclByb3BzOiB7XG4gICAgICBoaWdobGlnaHRlZDogZmFsc2UsXG4gICAgICBsZWFkaW5nSXRlbTogdGhpcy5wcm9wcy5pdGVtLFxuICAgIH0sXG4gIH07XG5cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhcbiAgICBwcm9wczogUHJvcHM8SXRlbVQ+LFxuICAgIHByZXZTdGF0ZTogU3RhdGU8SXRlbVQ+LFxuICApOiA/U3RhdGU8SXRlbVQ+IHtcbiAgICBpZiAoUmVhY3ROYXRpdmVGZWF0dXJlRmxhZ3MuZW5hYmxlT3B0aW1pc2VkVmlydHVhbGl6ZWRDZWxscygpKSB7XG4gICAgICBpZiAocHJvcHMuaXRlbSAhPT0gcHJldlN0YXRlLnNlcGFyYXRvclByb3BzLmxlYWRpbmdJdGVtKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2VwYXJhdG9yUHJvcHM6IHtcbiAgICAgICAgICAgIC4uLnByZXZTdGF0ZS5zZXBhcmF0b3JQcm9wcyxcbiAgICAgICAgICAgIGxlYWRpbmdJdGVtOiBwcm9wcy5pdGVtLFxuICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2VwYXJhdG9yUHJvcHM6IHtcbiAgICAgICAgICAuLi5wcmV2U3RhdGUuc2VwYXJhdG9yUHJvcHMsXG4gICAgICAgICAgbGVhZGluZ0l0ZW06IHByb3BzLml0ZW0sXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIC8vIFRPRE86IGNvbnNpZGVyIGZhY3RvcmluZyBzZXBhcmF0b3Igc3R1ZmYgb3V0IG9mIFZpcnR1YWxpemVkTGlzdCBpbnRvIEZsYXRMaXN0IHNpbmNlIGl0J3Mgbm90XG4gIC8vIHJldXNlZCBieSBTZWN0aW9uTGlzdCBhbmQgd2UgY2FuIGtlZXAgVmlydHVhbGl6ZWRMaXN0IHNpbXBsZXIuXG4gIC8vICRGbG93Rml4TWVbbWlzc2luZy1sb2NhbC1hbm5vdF1cbiAgX3NlcGFyYXRvcnMgPSB7XG4gICAgaGlnaGxpZ2h0OiAoKSA9PiB7XG4gICAgICBjb25zdCB7Y2VsbEtleSwgcHJldkNlbGxLZXl9ID0gdGhpcy5wcm9wcztcbiAgICAgIHRoaXMucHJvcHMub25VcGRhdGVTZXBhcmF0b3JzKFtjZWxsS2V5LCBwcmV2Q2VsbEtleV0sIHtcbiAgICAgICAgaGlnaGxpZ2h0ZWQ6IHRydWUsXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHVuaGlnaGxpZ2h0OiAoKSA9PiB7XG4gICAgICBjb25zdCB7Y2VsbEtleSwgcHJldkNlbGxLZXl9ID0gdGhpcy5wcm9wcztcbiAgICAgIHRoaXMucHJvcHMub25VcGRhdGVTZXBhcmF0b3JzKFtjZWxsS2V5LCBwcmV2Q2VsbEtleV0sIHtcbiAgICAgICAgaGlnaGxpZ2h0ZWQ6IGZhbHNlLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICB1cGRhdGVQcm9wczogKFxuICAgICAgc2VsZWN0OiAnbGVhZGluZycgfCAndHJhaWxpbmcnLFxuICAgICAgbmV3UHJvcHM6IFNlcGFyYXRvclByb3BzPEl0ZW1UPixcbiAgICApID0+IHtcbiAgICAgIGNvbnN0IHtjZWxsS2V5LCBwcmV2Q2VsbEtleX0gPSB0aGlzLnByb3BzO1xuICAgICAgdGhpcy5wcm9wcy5vblVwZGF0ZVNlcGFyYXRvcnMoXG4gICAgICAgIFtzZWxlY3QgPT09ICdsZWFkaW5nJyA/IHByZXZDZWxsS2V5IDogY2VsbEtleV0sXG4gICAgICAgIG5ld1Byb3BzLFxuICAgICAgKTtcbiAgICB9LFxuICB9O1xuXG4gIHVwZGF0ZVNlcGFyYXRvclByb3BzKG5ld1Byb3BzOiBTZXBhcmF0b3JQcm9wczxJdGVtVD4pIHtcbiAgICB0aGlzLnNldFN0YXRlKHN0YXRlID0+ICh7XG4gICAgICBzZXBhcmF0b3JQcm9wczogey4uLnN0YXRlLnNlcGFyYXRvclByb3BzLCAuLi5uZXdQcm9wc30sXG4gICAgfSkpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5wcm9wcy5vblVubW91bnQodGhpcy5wcm9wcy5jZWxsS2V5KTtcbiAgfVxuXG4gIF9vbkxheW91dCA9IChuYXRpdmVFdmVudDogTGF5b3V0RXZlbnQpOiB2b2lkID0+IHtcbiAgICB0aGlzLnByb3BzLm9uQ2VsbExheW91dD8uKFxuICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICB0aGlzLnByb3BzLmNlbGxLZXksXG4gICAgICB0aGlzLnByb3BzLmluZGV4LFxuICAgICk7XG4gIH07XG5cbiAgX29uQ2VsbEZvY3VzQ2FwdHVyZSA9IChlOiBGb2N1c0V2ZW50KTogdm9pZCA9PiB7XG4gICAgdGhpcy5wcm9wcy5vbkNlbGxGb2N1c0NhcHR1cmU/Lih0aGlzLnByb3BzLmNlbGxLZXkpO1xuICB9O1xuXG4gIF9yZW5kZXJFbGVtZW50KFxuICAgIHJlbmRlckl0ZW06ID9SZW5kZXJJdGVtVHlwZTxJdGVtVD4sXG4gICAgTGlzdEl0ZW1Db21wb25lbnQ6IGFueSxcbiAgICBpdGVtOiBJdGVtVCxcbiAgICBpbmRleDogbnVtYmVyLFxuICApOiBSZWFjdC5Ob2RlIHtcbiAgICBpZiAocmVuZGVySXRlbSAmJiBMaXN0SXRlbUNvbXBvbmVudCkge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnVmlydHVhbGl6ZWRMaXN0OiBCb3RoIExpc3RJdGVtQ29tcG9uZW50IGFuZCByZW5kZXJJdGVtIHByb3BzIGFyZSBwcmVzZW50LiBMaXN0SXRlbUNvbXBvbmVudCB3aWxsIHRha2UnICtcbiAgICAgICAgICAnIHByZWNlZGVuY2Ugb3ZlciByZW5kZXJJdGVtLicsXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChMaXN0SXRlbUNvbXBvbmVudCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPExpc3RJdGVtQ29tcG9uZW50XG4gICAgICAgICAgaXRlbT17aXRlbX1cbiAgICAgICAgICBpbmRleD17aW5kZXh9XG4gICAgICAgICAgc2VwYXJhdG9ycz17dGhpcy5fc2VwYXJhdG9yc31cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHJlbmRlckl0ZW0pIHtcbiAgICAgIHJldHVybiByZW5kZXJJdGVtKHtcbiAgICAgICAgaXRlbSxcbiAgICAgICAgaW5kZXgsXG4gICAgICAgIHNlcGFyYXRvcnM6IHRoaXMuX3NlcGFyYXRvcnMsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpbnZhcmlhbnQoXG4gICAgICBmYWxzZSxcbiAgICAgICdWaXJ0dWFsaXplZExpc3Q6IEVpdGhlciBMaXN0SXRlbUNvbXBvbmVudCBvciByZW5kZXJJdGVtIHByb3BzIGFyZSByZXF1aXJlZCBidXQgbm9uZSB3ZXJlIGZvdW5kLicsXG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpOiBSZWFjdC5Ob2RlIHtcbiAgICBjb25zdCB7XG4gICAgICBDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgICBJdGVtU2VwYXJhdG9yQ29tcG9uZW50LFxuICAgICAgTGlzdEl0ZW1Db21wb25lbnQsXG4gICAgICBjZWxsS2V5LFxuICAgICAgaG9yaXpvbnRhbCxcbiAgICAgIGl0ZW0sXG4gICAgICBpbmRleCxcbiAgICAgIGludmVyc2lvblN0eWxlLFxuICAgICAgb25DZWxsTGF5b3V0LFxuICAgICAgcmVuZGVySXRlbSxcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5fcmVuZGVyRWxlbWVudChcbiAgICAgIHJlbmRlckl0ZW0sXG4gICAgICBMaXN0SXRlbUNvbXBvbmVudCxcbiAgICAgIGl0ZW0sXG4gICAgICBpbmRleCxcbiAgICApO1xuXG4gICAgLy8gTk9URTogdGhhdCB3aGVuIHRoaXMgaXMgYSBzdGlja3kgaGVhZGVyLCBgb25MYXlvdXRgIHdpbGwgZ2V0IGF1dG9tYXRpY2FsbHkgZXh0cmFjdGVkIGFuZFxuICAgIC8vIGNhbGxlZCBleHBsaWNpdGx5IGJ5IGBTY3JvbGxWaWV3U3RpY2t5SGVhZGVyYC5cbiAgICBjb25zdCBpdGVtU2VwYXJhdG9yOiBSZWFjdC5Ob2RlID0gUmVhY3QuaXNWYWxpZEVsZW1lbnQoXG4gICAgICBJdGVtU2VwYXJhdG9yQ29tcG9uZW50LFxuICAgIClcbiAgICAgID8gLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdHlwZV1cbiAgICAgICAgSXRlbVNlcGFyYXRvckNvbXBvbmVudFxuICAgICAgOiAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlXVxuICAgICAgICBJdGVtU2VwYXJhdG9yQ29tcG9uZW50ICYmIChcbiAgICAgICAgICA8SXRlbVNlcGFyYXRvckNvbXBvbmVudCB7Li4udGhpcy5zdGF0ZS5zZXBhcmF0b3JQcm9wc30gLz5cbiAgICAgICAgKTtcbiAgICBjb25zdCBjZWxsU3R5bGUgPSBpbnZlcnNpb25TdHlsZVxuICAgICAgPyBob3Jpem9udGFsXG4gICAgICAgID8gW3N0eWxlcy5yb3dSZXZlcnNlLCBpbnZlcnNpb25TdHlsZV1cbiAgICAgICAgOiBbc3R5bGVzLmNvbHVtblJldmVyc2UsIGludmVyc2lvblN0eWxlXVxuICAgICAgOiBob3Jpem9udGFsXG4gICAgICAgID8gW3N0eWxlcy5yb3csIGludmVyc2lvblN0eWxlXVxuICAgICAgICA6IGludmVyc2lvblN0eWxlO1xuICAgIGNvbnN0IHJlc3VsdCA9ICFDZWxsUmVuZGVyZXJDb21wb25lbnQgPyAoXG4gICAgICA8Vmlld1xuICAgICAgICBzdHlsZT17Y2VsbFN0eWxlfVxuICAgICAgICBvbkZvY3VzQ2FwdHVyZT17dGhpcy5fb25DZWxsRm9jdXNDYXB0dXJlfVxuICAgICAgICB7Li4uKG9uQ2VsbExheW91dCAmJiB7b25MYXlvdXQ6IHRoaXMuX29uTGF5b3V0fSl9PlxuICAgICAgICB7ZWxlbWVudH1cbiAgICAgICAge2l0ZW1TZXBhcmF0b3J9XG4gICAgICA8L1ZpZXc+XG4gICAgKSA6IChcbiAgICAgIDxDZWxsUmVuZGVyZXJDb21wb25lbnRcbiAgICAgICAgY2VsbEtleT17Y2VsbEtleX1cbiAgICAgICAgaW5kZXg9e2luZGV4fVxuICAgICAgICBpdGVtPXtpdGVtfVxuICAgICAgICBzdHlsZT17Y2VsbFN0eWxlfVxuICAgICAgICBvbkZvY3VzQ2FwdHVyZT17dGhpcy5fb25DZWxsRm9jdXNDYXB0dXJlfVxuICAgICAgICB7Li4uKG9uQ2VsbExheW91dCAmJiB7b25MYXlvdXQ6IHRoaXMuX29uTGF5b3V0fSl9PlxuICAgICAgICB7ZWxlbWVudH1cbiAgICAgICAge2l0ZW1TZXBhcmF0b3J9XG4gICAgICA8L0NlbGxSZW5kZXJlckNvbXBvbmVudD5cbiAgICApO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxWaXJ0dWFsaXplZExpc3RDZWxsQ29udGV4dFByb3ZpZGVyIGNlbGxLZXk9e3RoaXMucHJvcHMuY2VsbEtleX0+XG4gICAgICAgIHtyZXN1bHR9XG4gICAgICA8L1ZpcnR1YWxpemVkTGlzdENlbGxDb250ZXh0UHJvdmlkZXI+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIHJvdzoge1xuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICB9LFxuICByb3dSZXZlcnNlOiB7XG4gICAgZmxleERpcmVjdGlvbjogJ3Jvdy1yZXZlcnNlJyxcbiAgfSxcbiAgY29sdW1uUmV2ZXJzZToge1xuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4tcmV2ZXJzZScsXG4gIH0sXG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQVVBLElBQUFBLHVCQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFRQSxJQUFBQyx1QkFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsVUFBQSxHQUFBQyxzQkFBQSxDQUFBSCxPQUFBO0FBQ0EsSUFBQUksS0FBQSxHQUFBTCx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUssWUFBQSxHQUFBTCxPQUFBO0FBQThDLElBQUFNLFdBQUEsR0FBQU4sT0FBQTtBQUFBLFNBQUFELHdCQUFBUSxDQUFBLEVBQUFDLENBQUEsNkJBQUFDLE9BQUEsTUFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FB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