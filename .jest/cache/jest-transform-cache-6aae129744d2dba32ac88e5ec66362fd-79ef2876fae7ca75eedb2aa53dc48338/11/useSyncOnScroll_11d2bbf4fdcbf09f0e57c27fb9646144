77654539fb81e7e6aeddec1ec94d6113
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useSyncOnScroll;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var React = _react;
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function useSyncOnScroll(inputRef) {
  var componentRef = (0, _react.useRef)(null);
  var _useState = (0, _react.useState)(),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    enableSyncOnScroll = _useState2[0],
    setEnableSyncOnScroll = _useState2[1];
  (0, _react.useImperativeHandle)(inputRef, function () {
    return {
      componentRef: componentRef,
      unstable_setEnableSyncOnScroll: function unstable_setEnableSyncOnScroll(enabled) {
        setEnableSyncOnScroll(enabled);
      }
    };
  }, []);
  return [componentRef, enableSyncOnScroll];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJSZWFjdCIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidXNlU3luY09uU2Nyb2xsIiwiaW5wdXRSZWYiLCJjb21wb25lbnRSZWYiLCJ1c2VSZWYiLCJfdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsIl91c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheTIiLCJlbmFibGVTeW5jT25TY3JvbGwiLCJzZXRFbmFibGVTeW5jT25TY3JvbGwiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidW5zdGFibGVfc2V0RW5hYmxlU3luY09uU2Nyb2xsIiwiZW5hYmxlZCJdLCJzb3VyY2VzIjpbInVzZVN5bmNPblNjcm9sbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKiBAZm9ybWF0XG4gKiBAb25jYWxsIHJlYWN0X25hdGl2ZVxuICovXG5cbmltcG9ydCB0eXBlIHtTY3JvbGxWaWV3TmF0aXZlUHJvcHN9IGZyb20gJy4uLy4uLy4uL0xpYnJhcmllcy9Db21wb25lbnRzL1Njcm9sbFZpZXcvU2Nyb2xsVmlld05hdGl2ZUNvbXBvbmVudFR5cGUnO1xuaW1wb3J0IHR5cGUge0hvc3RDb21wb25lbnR9IGZyb20gJy4uLy4uLy4uL0xpYnJhcmllcy9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZVR5cGVzJztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHt1c2VJbXBlcmF0aXZlSGFuZGxlLCB1c2VSZWYsIHVzZVN0YXRlfSBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCB0eXBlIFRTY3JvbGxWaWV3TmF0aXZlQ29tcG9uZW50SW5zdGFuY2UgPSBSZWFjdC5FbGVtZW50UmVmPFxuICBIb3N0Q29tcG9uZW50PFNjcm9sbFZpZXdOYXRpdmVQcm9wcz4sXG4+O1xuXG5leHBvcnQgdHlwZSBUU2Nyb2xsVmlld05hdGl2ZUltcGVyYXRpdmVIYW5kbGUgPSB7XG4gIGNvbXBvbmVudFJlZjogUmVhY3QuUmVmT2JqZWN0PFRTY3JvbGxWaWV3TmF0aXZlQ29tcG9uZW50SW5zdGFuY2UgfCBudWxsPixcbiAgdW5zdGFibGVfc2V0RW5hYmxlU3luY09uU2Nyb2xsOiAoZW5hYmxlZDogdHJ1ZSkgPT4gdm9pZCxcbn07XG5cbi8qKlxuICogSG9vayB1c2VkIGJ5IGBIU2Nyb2xsVmlld05hdGl2ZUNvbXBvbmVudGAgYW5kIGBWU2Nyb2xsVmlld05hdGl2ZUNvbXBvbmVudGBcbiAqIHRvIG1ha2UgYW4gaW1wbGVtZW50YXRpb24gb2YgYHVuc3RhYmxlX3NldEVuYWJsZVN5bmNPblNjcm9sbGAgYXZhaWxhYmxlIHRoYXRcbiAqIGRvZXMgbm90IHJlcXVpcmUgdXBkYXRpbmcgYWxsIGBTY3JvbGxWaWV3YCBjaGlsZHJlbi5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlU3luY09uU2Nyb2xsKFxuICBpbnB1dFJlZjogP1JlYWN0LlJlZlNldHRlcjxUU2Nyb2xsVmlld05hdGl2ZUltcGVyYXRpdmVIYW5kbGUgfCBudWxsPixcbik6IFtSZWFjdC5SZWZTZXR0ZXI8VFNjcm9sbFZpZXdOYXRpdmVDb21wb25lbnRJbnN0YW5jZSB8IG51bGw+LCB0cnVlIHwgdm9pZF0ge1xuICBjb25zdCBjb21wb25lbnRSZWYgPSB1c2VSZWY8VFNjcm9sbFZpZXdOYXRpdmVDb21wb25lbnRJbnN0YW5jZSB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbZW5hYmxlU3luY09uU2Nyb2xsLCBzZXRFbmFibGVTeW5jT25TY3JvbGxdID0gdXNlU3RhdGU8dHJ1ZSB8IHZvaWQ+KCk7XG5cbiAgdXNlSW1wZXJhdGl2ZUhhbmRsZTxUU2Nyb2xsVmlld05hdGl2ZUltcGVyYXRpdmVIYW5kbGU+KGlucHV0UmVmLCAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbXBvbmVudFJlZixcbiAgICAgIHVuc3RhYmxlX3NldEVuYWJsZVN5bmNPblNjcm9sbChlbmFibGVkOiB0cnVlKTogdm9pZCB7XG4gICAgICAgIHNldEVuYWJsZVN5bmNPblNjcm9sbChlbmFibGVkKTtcbiAgICAgIH0sXG4gICAgfTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiBbY29tcG9uZW50UmVmLCBlbmFibGVTeW5jT25TY3JvbGxdO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFjQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFBK0IsSUFBQUMsS0FBQSxHQUFBSCxNQUFBO0FBQUEsU0FBQUMsd0JBQUFHLENBQUEsRUFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFMLHVCQUFBLFlBQUFBLHdCQUFBRyxDQUFBLEVBQUFDLENBQUEsU0FBQUEsQ0FBQSxJQUFBRCxDQUFBLElBQUFBLENBQUEsQ0FBQUssVUFBQSxTQUFBTCxDQUFBLE1BQUFNLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLEtBQUFDLFNBQUEsUUFBQUMsT0FBQSxFQUFBVixDQUFBLGlCQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFNBQUFRLENBQUEsTUFBQUYsQ0FBQSxHQUFBTCxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxRQUFBRyxDQUFBLENBQUFLLEdBQUEsQ0FBQVgsQ0FBQSxVQUFBTSxDQUFBLENBQUFNLEdBQUEsQ0FBQVosQ0FBQSxHQUFBTSxDQUFBLENBQUFPLEdBQUEsQ0FBQWIsQ0FBQSxFQUFBUSxDQUFBLGNBQUFNLEVBQUEsSUFBQWQsQ0FBQSxnQkFBQWMsRUFBQSxPQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWhCLENBQUEsRUFBQWMsRUFBQSxPQUFBUCxDQUFBLElBQUFELENBQUEsR0FBQVcsTUFBQSxDQUFBQyxjQUFBLEtBQUFELE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQW5CLENBQUEsRUFBQWMsRUFBQSxPQUFBUCxDQUFBLENBQUFLLEdBQUEsSUFBQUwsQ0FBQSxDQUFBTSxHQUFBLElBQUFQLENBQUEsQ0FBQUUsQ0FBQSxFQUFBTSxFQUFBLEVBQUFQLENBQUEsSUFBQUMsQ0FBQSxDQUFBTSxFQUFBLElBQUFkLENBQUEsQ0FBQWMsRUFBQSxXQUFBTixDQUFBLEtBQUFSLENBQUEsRUFBQUMsQ0FBQTtBQWlCaEIsU0FBU21CLGVBQWVBLENBQ3JDQyxRQUFvRSxFQUNPO0VBQzNFLElBQU1DLFlBQVksR0FBRyxJQUFBQyxhQUFNLEVBQTRDLElBQUksQ0FBQztFQUM1RSxJQUFBQyxTQUFBLEdBQW9ELElBQUFDLGVBQVEsRUFBYyxDQUFDO0lBQUFDLFVBQUEsT0FBQUMsZUFBQSxDQUFBakIsT0FBQSxFQUFBYyxTQUFBO0lBQXBFSSxrQkFBa0IsR0FBQUYsVUFBQTtJQUFFRyxxQkFBcUIsR0FBQUgsVUFBQTtFQUVoRCxJQUFBSSwwQkFBbUIsRUFBb0NULFFBQVEsRUFBRSxZQUFNO0lBQ3JFLE9BQU87TUFDTEMsWUFBWSxFQUFaQSxZQUFZO01BQ1pTLDhCQUE4QixXQUE5QkEsOEJBQThCQSxDQUFDQyxPQUFhLEVBQVE7UUFDbERILHFCQUFxQixDQUFDRyxPQUFPLENBQUM7TUFDaEM7SUFDRixDQUFDO0VBQ0gsQ0FBQyxFQUFFLEVBQUUsQ0FBQztFQUVOLE9BQU8sQ0FBQ1YsWUFBWSxFQUFFTSxrQkFBa0IsQ0FBQztBQUMzQyIsImlnbm9yZUxpc3QiOltdfQ==