30090fdc091dfc23bbb7d81daabdfb36
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDashboardLevel = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _constants = require("../../../utils/constants");
var ACTIVE_LEVEL_KEY = "user_active_level";
var mapOldToNewLevel = function mapOldToNewLevel(level) {
  var mapping = {
    A1: "1",
    A2: "2",
    B1: "3",
    B2: "4",
    C1: "5",
    C2: "6"
  };
  return mapping[level] || level;
};
var useDashboardLevel = exports.useDashboardLevel = function useDashboardLevel(_ref) {
  var _LANGUAGE_LEVELS$curr;
  var progressData = _ref.progress;
  var _useState = (0, _react.useState)("1"),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    currentLevel = _useState2[0],
    setCurrentLevel = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isLoaded = _useState4[0],
    setIsLoaded = _useState4[1];
  var _useState5 = (0, _react.useState)(null),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    levelFoundInStorage = _useState6[0],
    setLevelFoundInStorage = _useState6[1];
  (0, _react.useEffect)(function () {
    var loadFromStorage = function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* () {
        try {
          var savedLevel = yield _asyncStorage.default.getItem(ACTIVE_LEVEL_KEY);
          if (savedLevel && _constants.LANGUAGE_LEVELS[savedLevel]) {
            setCurrentLevel(mapOldToNewLevel(savedLevel));
            setLevelFoundInStorage(true);
          } else {
            setLevelFoundInStorage(false);
          }
        } catch (error) {
          console.error('Erreur chargement niveau actif:', error);
          setLevelFoundInStorage(false);
        } finally {
          setIsLoaded(true);
        }
      });
      return function loadFromStorage() {
        return _ref2.apply(this, arguments);
      };
    }();
    loadFromStorage();
  }, []);
  (0, _react.useEffect)(function () {
    if (isLoaded && !levelFoundInStorage) {
      var levelFromProgress = progressData == null ? void 0 : progressData.currentLevel;
      if (levelFromProgress) {
        var mappedLevel = mapOldToNewLevel(levelFromProgress);
        if (_constants.LANGUAGE_LEVELS[mappedLevel]) {
          setCurrentLevel(mappedLevel);
        }
      }
    }
  }, [isLoaded, levelFoundInStorage, progressData]);
  var handleChangeActiveLevel = (0, _react.useCallback)(function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (newLevel) {
      if (!_constants.LANGUAGE_LEVELS[newLevel]) return;
      setCurrentLevel(newLevel);
      try {
        yield _asyncStorage.default.setItem(ACTIVE_LEVEL_KEY, newLevel);
        setLevelFoundInStorage(true);
      } catch (error) {
        console.error('Erreur sauvegarde niveau actif:', error);
      }
    });
    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }(), []);
  var levelColor = ((_LANGUAGE_LEVELS$curr = _constants.LANGUAGE_LEVELS[currentLevel]) == null ? void 0 : _LANGUAGE_LEVELS$curr.color) || "#3B82F6";
  return {
    currentLevel: currentLevel,
    handleChangeActiveLevel: handleChangeActiveLevel,
    levelColor: levelColor,
    isLoaded: isLoaded
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX2FzeW5jU3RvcmFnZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfY29uc3RhbnRzIiwiQUNUSVZFX0xFVkVMX0tFWSIsIm1hcE9sZFRvTmV3TGV2ZWwiLCJsZXZlbCIsIm1hcHBpbmciLCJBMSIsIkEyIiwiQjEiLCJCMiIsIkMxIiwiQzIiLCJ1c2VEYXNoYm9hcmRMZXZlbCIsImV4cG9ydHMiLCJfcmVmIiwiX0xBTkdVQUdFX0xFVkVMUyRjdXJyIiwicHJvZ3Jlc3NEYXRhIiwicHJvZ3Jlc3MiLCJfdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsIl91c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheTIiLCJkZWZhdWx0IiwiY3VycmVudExldmVsIiwic2V0Q3VycmVudExldmVsIiwiX3VzZVN0YXRlMyIsIl91c2VTdGF0ZTQiLCJpc0xvYWRlZCIsInNldElzTG9hZGVkIiwiX3VzZVN0YXRlNSIsIl91c2VTdGF0ZTYiLCJsZXZlbEZvdW5kSW5TdG9yYWdlIiwic2V0TGV2ZWxGb3VuZEluU3RvcmFnZSIsInVzZUVmZmVjdCIsImxvYWRGcm9tU3RvcmFnZSIsIl9yZWYyIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwic2F2ZWRMZXZlbCIsIkFzeW5jU3RvcmFnZSIsImdldEl0ZW0iLCJMQU5HVUFHRV9MRVZFTFMiLCJlcnJvciIsImNvbnNvbGUiLCJhcHBseSIsImFyZ3VtZW50cyIsImxldmVsRnJvbVByb2dyZXNzIiwibWFwcGVkTGV2ZWwiLCJoYW5kbGVDaGFuZ2VBY3RpdmVMZXZlbCIsInVzZUNhbGxiYWNrIiwiX3JlZjMiLCJuZXdMZXZlbCIsInNldEl0ZW0iLCJfeCIsImxldmVsQ29sb3IiLCJjb2xvciJdLCJzb3VyY2VzIjpbInVzZURhc2hib2FyZExldmVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZUNhbGxiYWNrIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBBc3luY1N0b3JhZ2UgZnJvbSBcIkByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlXCI7XHJcbmltcG9ydCB7IExBTkdVQUdFX0xFVkVMUyB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9jb25zdGFudHNcIjtcclxuXHJcbmNvbnN0IEFDVElWRV9MRVZFTF9LRVkgPSBcInVzZXJfYWN0aXZlX2xldmVsXCI7XHJcblxyXG4vLyBGb25jdGlvbiBkZSBtYXBwaW5nIGRlcyBhbmNpZW5zIG5pdmVhdXggKHBldXQgw6p0cmUgc29ydGllIGR1IGhvb2sgc2kgbm9uIGR5bmFtaXF1ZSlcclxuY29uc3QgbWFwT2xkVG9OZXdMZXZlbCA9IChsZXZlbCkgPT4ge1xyXG4gIGNvbnN0IG1hcHBpbmcgPSB7IEExOiBcIjFcIiwgQTI6IFwiMlwiLCBCMTogXCIzXCIsIEIyOiBcIjRcIiwgQzE6IFwiNVwiLCBDMjogXCI2XCIgfTtcclxuICByZXR1cm4gbWFwcGluZ1tsZXZlbF0gfHwgbGV2ZWw7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgdXNlRGFzaGJvYXJkTGV2ZWwgPSAoeyBwcm9ncmVzczogcHJvZ3Jlc3NEYXRhIH0pID0+IHtcclxuICBjb25zdCBbY3VycmVudExldmVsLCBzZXRDdXJyZW50TGV2ZWxdID0gdXNlU3RhdGUoXCIxXCIpO1xyXG4gIGNvbnN0IFtpc0xvYWRlZCwgc2V0SXNMb2FkZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gIFxyXG4gIC8vIMOJdGF0IHBvdXIgc2F2b2lyIHNpIHVuZSB2YWxldXIgYSDDqXTDqSBjaGFyZ8OpZSBkZXB1aXMgbGUgc3RvY2thZ2UuXHJcbiAgLy8gbnVsbCA9IHBhcyBlbmNvcmUgdsOpcmlmacOpLCB0cnVlID0gdHJvdXbDqWUsIGZhbHNlID0gbm9uIHRyb3V2w6llLlxyXG4gIGNvbnN0IFtsZXZlbEZvdW5kSW5TdG9yYWdlLCBzZXRMZXZlbEZvdW5kSW5TdG9yYWdlXSA9IHVzZVN0YXRlKG51bGwpO1xyXG5cclxuICAvLyBFZmZldCBuwrAxIDogQ2hhcmdlbWVudCBpbml0aWFsIGRlcHVpcyBBc3luY1N0b3JhZ2UuXHJcbiAgLy8gTmUgcydleMOpY3V0ZSBxdSd1bmUgc2V1bGUgZm9pcyBhdSBtb250YWdlIGdyw6JjZSDDoCBgW11gLlxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBjb25zdCBsb2FkRnJvbVN0b3JhZ2UgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3Qgc2F2ZWRMZXZlbCA9IGF3YWl0IEFzeW5jU3RvcmFnZS5nZXRJdGVtKEFDVElWRV9MRVZFTF9LRVkpO1xyXG4gICAgICAgIGlmIChzYXZlZExldmVsICYmIExBTkdVQUdFX0xFVkVMU1tzYXZlZExldmVsXSkge1xyXG4gICAgICAgICAgc2V0Q3VycmVudExldmVsKG1hcE9sZFRvTmV3TGV2ZWwoc2F2ZWRMZXZlbCkpO1xyXG4gICAgICAgICAgc2V0TGV2ZWxGb3VuZEluU3RvcmFnZSh0cnVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc2V0TGV2ZWxGb3VuZEluU3RvcmFnZShmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VycmV1ciBjaGFyZ2VtZW50IG5pdmVhdSBhY3RpZjonLCBlcnJvcik7XHJcbiAgICAgICAgc2V0TGV2ZWxGb3VuZEluU3RvcmFnZShmYWxzZSk7IC8vIEVuIGNhcyBkJ2VycmV1ciwgb24gY29uc2lkw6hyZSBxdWUgcmllbiBuJ2Egw6l0w6kgdHJvdXbDqVxyXG4gICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgIHNldElzTG9hZGVkKHRydWUpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGxvYWRGcm9tU3RvcmFnZSgpO1xyXG4gIH0sIFtdKTsgLy8gPC0tIExhIGTDqXBlbmRhbmNlIHZpZGUgZXN0IGxhIGNsw6lcclxuXHJcbiAgLy8gRWZmZXQgbsKwMiA6IFN5bmNocm9uaXNhdGlvbiBhdmVjIGxlIGNvbnRleHRlIGBwcm9ncmVzc2AuXHJcbiAgLy8gUydleMOpY3V0ZSBzZXVsZW1lbnQgYXByw6hzIGxlIGNoYXJnZW1lbnQgRVQgc2kgYXVjdW4gbml2ZWF1IG4nYSDDqXTDqSB0cm91dsOpIGVuIG3DqW1vaXJlLlxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAvLyBPbiBuJ2FnaXQgcXVlIHNpIGxlIGNoYXJnZW1lbnQgZXN0IGZpbmkgZXQgcXUnYXVjdW4gbml2ZWF1IG4nYSDDqXTDqSBjaGFyZ8OpIGRlcHVpcyBBc3luY1N0b3JhZ2VcclxuICAgIGlmIChpc0xvYWRlZCAmJiAhbGV2ZWxGb3VuZEluU3RvcmFnZSkge1xyXG4gICAgICBjb25zdCBsZXZlbEZyb21Qcm9ncmVzcyA9IHByb2dyZXNzRGF0YT8uY3VycmVudExldmVsO1xyXG4gICAgICBpZiAobGV2ZWxGcm9tUHJvZ3Jlc3MpIHtcclxuICAgICAgICBjb25zdCBtYXBwZWRMZXZlbCA9IG1hcE9sZFRvTmV3TGV2ZWwobGV2ZWxGcm9tUHJvZ3Jlc3MpO1xyXG4gICAgICAgIGlmIChMQU5HVUFHRV9MRVZFTFNbbWFwcGVkTGV2ZWxdKSB7XHJcbiAgICAgICAgICBzZXRDdXJyZW50TGV2ZWwobWFwcGVkTGV2ZWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0sIFtpc0xvYWRlZCwgbGV2ZWxGb3VuZEluU3RvcmFnZSwgcHJvZ3Jlc3NEYXRhXSk7XHJcblxyXG4gIC8vIExlIHJlc3RlIGR1IGhvb2sgZXN0IG3DqW1vcmlzw6kgYXZlYyB1c2VDYWxsYmFjayBwb3VyIGxhIHBlcmZvcm1hbmNlXHJcbiAgY29uc3QgaGFuZGxlQ2hhbmdlQWN0aXZlTGV2ZWwgPSB1c2VDYWxsYmFjayhhc3luYyAobmV3TGV2ZWwpID0+IHtcclxuICAgIGlmICghTEFOR1VBR0VfTEVWRUxTW25ld0xldmVsXSkgcmV0dXJuO1xyXG5cclxuICAgIHNldEN1cnJlbnRMZXZlbChuZXdMZXZlbCk7XHJcbiAgICB0cnkge1xyXG4gICAgICBhd2FpdCBBc3luY1N0b3JhZ2Uuc2V0SXRlbShBQ1RJVkVfTEVWRUxfS0VZLCBuZXdMZXZlbCk7XHJcbiAgICAgIC8vIFNpIGwndXRpbGlzYXRldXIgY2hhbmdlIGRlIG5pdmVhdSwgb24gY29uc2lkw6hyZSBxdWUgbGEgc291cmNlIGRlIHbDqXJpdMOpIGVzdCBtYWludGVuYW50IGxlIHN0b2NrYWdlXHJcbiAgICAgIHNldExldmVsRm91bmRJblN0b3JhZ2UodHJ1ZSk7IFxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyZXVyIHNhdXZlZ2FyZGUgbml2ZWF1IGFjdGlmOicsIGVycm9yKTtcclxuICAgIH1cclxuICB9LCBbXSk7XHJcblxyXG4gIGNvbnN0IGxldmVsQ29sb3IgPSBMQU5HVUFHRV9MRVZFTFNbY3VycmVudExldmVsXT8uY29sb3IgfHwgXCIjM0I4MkY2XCI7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBjdXJyZW50TGV2ZWwsXHJcbiAgICBoYW5kbGVDaGFuZ2VBY3RpdmVMZXZlbCxcclxuICAgIGxldmVsQ29sb3IsXHJcbiAgICBpc0xvYWRlZCxcclxuICB9O1xyXG59OyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLGFBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFHLFVBQUEsR0FBQUgsT0FBQTtBQUVBLElBQU1JLGdCQUFnQixHQUFHLG1CQUFtQjtBQUc1QyxJQUFNQyxnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQWdCQSxDQUFJQyxLQUFLLEVBQUs7RUFDbEMsSUFBTUMsT0FBTyxHQUFHO0lBQUVDLEVBQUUsRUFBRSxHQUFHO0lBQUVDLEVBQUUsRUFBRSxHQUFHO0lBQUVDLEVBQUUsRUFBRSxHQUFHO0lBQUVDLEVBQUUsRUFBRSxHQUFHO0lBQUVDLEVBQUUsRUFBRSxHQUFHO0lBQUVDLEVBQUUsRUFBRTtFQUFJLENBQUM7RUFDeEUsT0FBT04sT0FB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