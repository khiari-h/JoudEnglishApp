c1b7bb0d3812c70bac00858b5ff14459
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var Lock = _interopRequireWildcard(require("../../services/lockService"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var EmergencyResetScreen = function EmergencyResetScreen(_ref) {
  var onDone = _ref.onDone;
  var _useState = (0, _react.useState)(''),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    confirm = _useState2[0],
    setConfirm = _useState2[1];
  var onReset = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    if (confirm !== 'ERASE') return;
    yield Lock.emergencyReset();
    onDone == null || onDone();
  }), [confirm, onDone]);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: {
      flex: 1,
      alignItems: 'center',
      justifyContent: 'center',
      padding: 24
    },
    testID: "emergency-reset-screen",
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: {
        fontSize: 20,
        fontWeight: '700',
        marginBottom: 12
      },
      children: "R\xE9initialisation d'urgence"
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: {
        color: '#6B7280',
        textAlign: 'center',
        marginBottom: 12
      },
      children: "Cette action efface toutes les donn\xE9es locales (verrou, pr\xE9f\xE9rences, progression)."
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: {
        color: '#DC2626',
        marginBottom: 8
      },
      children: "Tape \"ERASE\" pour confirmer"
    }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
      value: confirm,
      onChangeText: setConfirm,
      placeholder: "ERASE",
      autoCapitalize: "characters",
      style: {
        width: '80%',
        borderWidth: 1,
        borderColor: '#E5E7EB',
        borderRadius: 8,
        padding: 12,
        marginBottom: 8
      },
      testID: "reset-confirm-input"
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      testID: "reset-confirm-button",
      onPress: onReset,
      style: {
        backgroundColor: '#DC2626',
        padding: 12,
        borderRadius: 8
      },
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: {
          color: 'white',
          fontWeight: '700'
        },
        children: "Effacer"
      })
    })]
  });
};
var _default = exports.default = EmergencyResetScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlIiwiTG9jayIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2pzeFJ1bnRpbWUiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIkVtZXJnZW5jeVJlc2V0U2NyZWVuIiwiX3JlZiIsIm9uRG9uZSIsIl91c2VTdGF0ZSIsInVzZVN0YXRlIiwiX3VzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5MiIsImNvbmZpcm0iLCJzZXRDb25maXJtIiwib25SZXNldCIsInVzZUNhbGxiYWNrIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiZW1lcmdlbmN5UmVzZXQiLCJqc3hzIiwiVmlldyIsInN0eWxlIiwiZmxleCIsImFsaWduSXRlbXMiLCJqdXN0aWZ5Q29udGVudCIsInBhZGRpbmciLCJ0ZXN0SUQiLCJjaGlsZHJlbiIsImpzeCIsIlRleHQiLCJmb250U2l6ZSIsImZvbnRXZWlnaHQiLCJtYXJnaW5Cb3R0b20iLCJjb2xvciIsInRleHRBbGlnbiIsIlRleHRJbnB1dCIsInZhbHVlIiwib25DaGFuZ2VUZXh0IiwicGxhY2Vob2xkZXIiLCJhdXRvQ2FwaXRhbGl6ZSIsIndpZHRoIiwiYm9yZGVyV2lkdGgiLCJib3JkZXJDb2xvciIsImJvcmRlclJhZGl1cyIsIlRvdWNoYWJsZU9wYWNpdHkiLCJvblByZXNzIiwiYmFja2dyb3VuZENvbG9yIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiRW1lcmdlbmN5UmVzZXRTY3JlZW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3NjcmVlbnMvTG9jay9FbWVyZ2VuY3lSZXNldFNjcmVlbi5qc1xyXG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFZpZXcsIFRleHQsIFRleHRJbnB1dCwgVG91Y2hhYmxlT3BhY2l0eSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCAqIGFzIExvY2sgZnJvbSAnLi4vLi4vc2VydmljZXMvbG9ja1NlcnZpY2UnO1xyXG5cclxuY29uc3QgRW1lcmdlbmN5UmVzZXRTY3JlZW4gPSAoeyBvbkRvbmUgfSkgPT4ge1xyXG4gIGNvbnN0IFtjb25maXJtLCBzZXRDb25maXJtXSA9IHVzZVN0YXRlKCcnKTtcclxuXHJcbiAgY29uc3Qgb25SZXNldCA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcclxuICAgIGlmIChjb25maXJtICE9PSAnRVJBU0UnKSByZXR1cm47XHJcbiAgICBhd2FpdCBMb2NrLmVtZXJnZW5jeVJlc2V0KCk7XHJcbiAgICBvbkRvbmU/LigpO1xyXG4gIH0sIFtjb25maXJtLCBvbkRvbmVdKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxWaWV3IHN0eWxlPXt7IGZsZXg6IDEsIGFsaWduSXRlbXM6ICdjZW50ZXInLCBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsIHBhZGRpbmc6IDI0IH19IHRlc3RJRD1cImVtZXJnZW5jeS1yZXNldC1zY3JlZW5cIj5cclxuICAgICAgPFRleHQgc3R5bGU9e3sgZm9udFNpemU6IDIwLCBmb250V2VpZ2h0OiAnNzAwJywgbWFyZ2luQm90dG9tOiAxMiB9fT5Sw6lpbml0aWFsaXNhdGlvbiBkJ3VyZ2VuY2U8L1RleHQ+XHJcbiAgICAgIDxUZXh0IHN0eWxlPXt7IGNvbG9yOiAnIzZCNzI4MCcsIHRleHRBbGlnbjogJ2NlbnRlcicsIG1hcmdpbkJvdHRvbTogMTIgfX0+XHJcbiAgICAgICAgQ2V0dGUgYWN0aW9uIGVmZmFjZSB0b3V0ZXMgbGVzIGRvbm7DqWVzIGxvY2FsZXMgKHZlcnJvdSwgcHLDqWbDqXJlbmNlcywgcHJvZ3Jlc3Npb24pLlxyXG4gICAgICA8L1RleHQ+XHJcbiAgICAgIDxUZXh0IHN0eWxlPXt7IGNvbG9yOiAnI0RDMjYyNicsIG1hcmdpbkJvdHRvbTogOCB9fT5UYXBlIFwiRVJBU0VcIiBwb3VyIGNvbmZpcm1lcjwvVGV4dD5cclxuICAgICAgPFRleHRJbnB1dFxyXG4gICAgICAgIHZhbHVlPXtjb25maXJtfVxyXG4gICAgICAgIG9uQ2hhbmdlVGV4dD17c2V0Q29uZmlybX1cclxuICAgICAgICBwbGFjZWhvbGRlcj1cIkVSQVNFXCJcclxuICAgICAgICBhdXRvQ2FwaXRhbGl6ZT1cImNoYXJhY3RlcnNcIlxyXG4gICAgICAgIHN0eWxlPXt7IHdpZHRoOiAnODAlJywgYm9yZGVyV2lkdGg6IDEsIGJvcmRlckNvbG9yOiAnI0U1RTdFQicsIGJvcmRlclJhZGl1czogOCwgcGFkZGluZzogMTIsIG1hcmdpbkJvdHRvbTogOCB9fVxyXG4gICAgICAgIHRlc3RJRD1cInJlc2V0LWNvbmZpcm0taW5wdXRcIlxyXG4gICAgICAvPlxyXG4gICAgICA8VG91Y2hhYmxlT3BhY2l0eSB0ZXN0SUQ9XCJyZXNldC1jb25maXJtLWJ1dHRvblwiIG9uUHJlc3M9e29uUmVzZXR9IHN0eWxlPXt7IGJhY2tncm91bmRDb2xvcjogJyNEQzI2MjYnLCBwYWRkaW5nOiAxMiwgYm9yZGVyUmFkaXVzOiA4IH19PlxyXG4gICAgICAgIDxUZXh0IHN0eWxlPXt7IGNvbG9yOiAnd2hpdGUnLCBmb250V2VpZ2h0OiAnNzAwJyB9fT5FZmZhY2VyPC9UZXh0PlxyXG4gICAgICA8L1RvdWNoYWJsZU9wYWNpdHk+XHJcbiAgICA8L1ZpZXc+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEVtZXJnZW5jeVJlc2V0U2NyZWVuO1xyXG5cclxuXHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLElBQUEsR0FBQUMsdUJBQUEsQ0FBQUgsT0FB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