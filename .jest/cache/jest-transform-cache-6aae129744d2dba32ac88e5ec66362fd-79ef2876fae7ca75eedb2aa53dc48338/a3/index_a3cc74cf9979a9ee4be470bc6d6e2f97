f037f3d83d510589e85a7f5320522989
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("react-native");
var _useRevisionSettings2 = require("../../../hooks/useRevisionSettings");
var _react = require("react");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var RevisionSettings = function RevisionSettings() {
  var _useRevisionSettings = (0, _useRevisionSettings2.useRevisionSettings)(),
    preferences = _useRevisionSettings.preferences,
    isLoading = _useRevisionSettings.isLoading,
    enableRevisions = _useRevisionSettings.enableRevisions,
    disableRevisions = _useRevisionSettings.disableRevisions,
    updateFrequency = _useRevisionSettings.updateFrequency;
  var handleToggleRevisions = (0, _react.useCallback)(function () {
    var _ref = (0, _asyncToGenerator2.default)(function* (enabled) {
      if (enabled) {
        yield enableRevisions(preferences.frequency, preferences.questionsCount);
      } else {
        yield disableRevisions();
      }
    });
    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }(), [enableRevisions, disableRevisions, preferences.frequency, preferences.questionsCount]);
  var handleFrequencyPress = (0, _react.useCallback)(function (value) {
    return function () {
      return updateFrequency(value);
    };
  }, [updateFrequency]);
  var frequencyOptions = [{
    value: 25,
    label: "Tous les 25 mots (léger)"
  }, {
    value: 50,
    label: "Tous les 50 mots (standard)"
  }, {
    value: 100,
    label: "Tous les 100 mots (espacé)"
  }];
  if (isLoading) {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.loadingContainer,
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: _style.default.loadingText,
        children: "Chargement des param\xE8tres..."
      })
    });
  }
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: _style.default.container,
    testID: "revision-settings",
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: _style.default.sectionTitle,
      children: "\uD83D\uDD04 R\xE9visions automatiques"
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: _style.default.toggleRow,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: _style.default.toggleLabel,
        children: "R\xE9visions automatiques"
      }), (0, _jsxRuntime.jsx)(_reactNative.Switch, {
        testID: "revisions-toggle",
        value: !preferences.isDisabled,
        onValueChange: handleToggleRevisions
      })]
    }), !preferences.isDisabled && (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: _style.default.frequencySection,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: _style.default.frequencyTitle,
        children: "Fr\xE9quence :"
      }), frequencyOptions.map(function (option) {
        return (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
          testID: `frequency-${option.value}`,
          style: [_style.default.frequencyOption, preferences.frequency === option.value ? _style.default.frequencyOptionSelected : _style.default.frequencyOptionDefault],
          onPress: handleFrequencyPress(option.value),
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [_style.default.frequencyText, preferences.frequency === option.value ? _style.default.frequencyTextSelected : _style.default.frequencyTextDefault],
            children: option.label
          }), preferences.frequency === option.value && (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: _style.default.checkIcon,
            children: "\u2713"
          })]
        }, option.value);
      }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: _style.default.nextRevisionInfo,
        children: ["\uD83D\uDCA1 Prochaine r\xE9vision \xE0 ", preferences.nextRevisionAt, " mots appris"]
      })]
    }), preferences.isDisabled && (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: _style.default.disabledWarning,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: _style.default.warningTitle,
        children: "\u26A0\uFE0F R\xE9visions d\xE9sactiv\xE9es"
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: _style.default.warningMessage,
        children: "R\xE9activez-les pour maintenir votre m\xE9morisation !"
      })]
    })]
  });
};
var _default = exports.default = RevisionSettings;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,