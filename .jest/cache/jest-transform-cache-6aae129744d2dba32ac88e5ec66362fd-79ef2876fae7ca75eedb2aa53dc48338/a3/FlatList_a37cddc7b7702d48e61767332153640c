a79106b957e8dc5a4d35e6a5e0287a04
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReanimatedFlatList = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _View = require("./View");
var _createAnimatedComponent = require("../createAnimatedComponent");
var _LayoutAnimationConfig = require("./LayoutAnimationConfig");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["itemLayoutAnimation", "skipEnteringExitingAnimations"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var AnimatedFlatList = (0, _createAnimatedComponent.createAnimatedComponent)(_reactNative.FlatList);
var createCellRendererComponent = function createCellRendererComponent(itemLayoutAnimationRef) {
  var CellRendererComponent = function CellRendererComponent(props) {
    return (0, _jsxRuntime.jsx)(_View.AnimatedView, {
      layout: itemLayoutAnimationRef == null ? void 0 : itemLayoutAnimationRef.current,
      onLayout: props.onLayout,
      style: props.style,
      children: props.children
    });
  };
  return CellRendererComponent;
};
var FlatListForwardRefRender = function FlatListForwardRefRender(props, ref) {
  var itemLayoutAnimation = props.itemLayoutAnimation,
    skipEnteringExitingAnimations = props.skipEnteringExitingAnimations,
    restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
  if (!('scrollEventThrottle' in restProps)) {
    restProps.scrollEventThrottle = 1;
  }
  var itemLayoutAnimationRef = (0, _react.useRef)(itemLayoutAnimation);
  itemLayoutAnimationRef.current = itemLayoutAnimation;
  var CellRendererComponent = _react.default.useMemo(function () {
    return createCellRendererComponent(itemLayoutAnimationRef);
  }, [itemLayoutAnimationRef]);
  var animatedFlatList = (0, _jsxRuntime.jsx)(AnimatedFlatList, Object.assign({
    ref: ref
  }, restProps, {
    CellRendererComponent: CellRendererComponent
  }));
  if (skipEnteringExitingAnimations === undefined) {
    return animatedFlatList;
  }
  return (0, _jsxRuntime.jsx)(_LayoutAnimationConfig.LayoutAnimationConfig, {
    skipEntering: true,
    skipExiting: true,
    children: animatedFlatList
  });
};
var ReanimatedFlatList = exports.ReanimatedFlatList = (0, _react.forwardRef)(FlatListForwardRefRender);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,