{"version":3,"names":["createMockComponent","name","props","_jsxRuntime","jsx","_reactNative2","View","Object","assign","testID","children","Text","_getJestObj","mock","router","push","jest","fn","mockUseLastActivity","mockReturnValue","saveActivity","getConversationData","getLevelColor","_interopRequireDefault","require","_react","_reactNative","_conversations","_useConversation","_useLastActivity","_expoRouter","_require","describe","mockRoute","params","level","mockSaveActivity","createMockConversationState","overrides","arguments","length","undefined","loaded","hasValidData","currentScenario","title","description","conversation","sender","text","suggestions","message","isTyping","stats","completionProgress","currentStep","totalSteps","isConversationStarted","changeScenario","sendMessage","useSuggestion","toggleHelp","toggleDetailedProgress","setMessage","beforeEach","clearAllMocks","useLastActivity","useConversation","test","_render","render","default","route","queryByTestId","expect","toBeNull","_render2","getByTestId","toBeTruthy","descriptionComponent","toBe","toHaveBeenCalledTimes","toHaveBeenCalledWith","objectContaining","type","metadata","any","not","toHaveBeenCalled","_render3","header","onBackPress","pathname","mockConversationState","_render4","selector","onSelectScenario","_render5","input","onSendMessage","_render6","onPressSuggestion"],"sources":["ConversationExercise.test.js"],"sourcesContent":["import React from 'react';\nimport { render } from '@testing-library/react-native';\nimport { View, Text } from 'react-native'; // Import Text for better debugging of mocked components\nimport ConversationExercise from '../../../../src/screens/exercises/conversations';\n\n// =================================================================\n// MOCKS SETUP\n// =================================================================\n\n// Mock expo-router for navigation\njest.mock('expo-router', () => ({\n  router: {\n    push: jest.fn(),\n  },\n}));\n\n// Mock the core useConversation hook\njest.mock('../../../../src/screens/exercises/conversations/hooks/useConversation');\n\n// Mock useLastActivity hook\njest.mock('../../../../src/hooks/useLastActivity', () => {\n  // This factory function ensures useLastActivity is a jest.fn() from the start\n  const mockUseLastActivity = jest.fn();\n  // Set a default return value for the mock, which can be overridden in tests\n  mockUseLastActivity.mockReturnValue({\n    saveActivity: jest.fn(),\n  });\n  return mockUseLastActivity;\n});\n\njest.mock('../../../../src/utils/conversation/conversationDataHelper', () => ({\n  getConversationData: jest.fn(),\n  getLevelColor: jest.fn(() => '#0000FF'),\n}));\n\n// Helper to create mock components that accept props and can be found with testID\n// We use Text inside View to make it easier to debug if needed\nconst createMockComponent = (name) => (props) => (\n  <View testID={name} {...props}>\n    <Text>{name}</Text>\n  </View>\n);\n\n// Mock all child components to isolate ConversationExercise\njest.mock('../../../../src/screens/exercises/conversations/ConversationHeader', () => createMockComponent('ConversationHeader'));\njest.mock('../../../../src/screens/exercises/conversations/ConversationSelector', () => createMockComponent('ConversationSelector'));\njest.mock('../../../../src/screens/exercises/conversations/ConversationProgress', () => createMockComponent('ConversationProgress'));\njest.mock('../../../../src/screens/exercises/conversations/ConversationScenarioDescription', () => createMockComponent('ConversationScenarioDescription'));\njest.mock('../../../../src/screens/exercises/conversations/ConversationMessageList', () => createMockComponent('ConversationMessageList'));\njest.mock('../../../../src/screens/exercises/conversations/ConversationSuggestions', () => createMockComponent('ConversationSuggestions'));\njest.mock('../../../../src/screens/exercises/conversations/ConversationInput', () => createMockComponent('ConversationInput'));\n\n// Import the mocked hooks to control their behavior\nimport useConversation from '../../../../src/screens/exercises/conversations/hooks/useConversation';\nimport useLastActivity from '../../../../src/hooks/useLastActivity';\nimport { router } from 'expo-router';\n\n// =================================================================\n// TEST SUITE\n// =================================================================\n\ndescribe('ConversationExercise', () => {\n  const mockRoute = { params: { level: 'A1' } };\n  let mockSaveActivity;\n\n  // Helper to create a default mock state for the useConversation hook\n  const createMockConversationState = (overrides = {}) => ({\n    loaded: true,\n    hasValidData: true,\n    currentScenario: {\n      title: 'Scenario de Test',\n      description: 'Description du scenario.',\n    },\n    conversation: [{ sender: 'bot', text: 'Hello!' }],\n    suggestions: ['Hi', 'Hello there'],\n    message: '',\n    isTyping: false,\n    stats: { completionProgress: 50, currentStep: 1, totalSteps: 2 },\n    isConversationStarted: true,\n    // Mock functions that we can spy on\n    changeScenario: jest.fn(),\n    sendMessage: jest.fn(),\n    useSuggestion: jest.fn(),\n    toggleHelp: jest.fn(),\n    toggleDetailedProgress: jest.fn(),\n    setMessage: jest.fn(),\n    ...overrides,\n  });\n\n  beforeEach(() => {\n    // Reset all mocks before each test to ensure isolation\n    jest.clearAllMocks();\n\n    // Setup the mock for useLastActivity correctly\n    // We get the mockSaveActivity from the return value of useLastActivity\n    mockSaveActivity = jest.fn();\n    useLastActivity.mockReturnValue({ saveActivity: mockSaveActivity });\n\n    // Reset the useConversation mock for each test\n    useConversation.mockReturnValue(createMockConversationState());\n  });\n\n  // --- Test Scenarios ---\n\n  test('should render loading state correctly', () => {\n    useConversation.mockReturnValue(createMockConversationState({ loaded: false }));\n    const { queryByTestId } = render(<ConversationExercise route={mockRoute} />);\n    // In loading state, the main content (child components) should not be visible\n    expect(queryByTestId('ConversationHeader')).toBeNull();\n  });\n\n  test('should render main content when data is loaded', () => {\n    // useConversation is already mocked to return loaded: true in beforeEach\n    const { getByTestId } = render(<ConversationExercise route={mockRoute} />);\n\n    // Check that child components are rendered and their props are passed correctly\n    expect(getByTestId('ConversationHeader')).toBeTruthy();\n    const descriptionComponent = getByTestId('ConversationScenarioDescription');\n    expect(descriptionComponent.props.description).toBe('Description du scenario.');\n  });\n\n  test('should call saveActivity on mount if conversation has started', () => {\n    useConversation.mockReturnValue(createMockConversationState({ isConversationStarted: true }));\n    render(<ConversationExercise route={mockRoute} />);\n\n    expect(mockSaveActivity).toHaveBeenCalledTimes(1);\n    expect(mockSaveActivity).toHaveBeenCalledWith(expect.objectContaining({\n      title: 'Conversations',\n      level: 'A1',\n      type: 'conversations',\n      metadata: expect.any(Object),\n    }));\n  });\n\n  test('should NOT call saveActivity on mount if conversation has not started', () => {\n    useConversation.mockReturnValue(createMockConversationState({ isConversationStarted: false }));\n    render(<ConversationExercise route={mockRoute} />);\n\n    expect(mockSaveActivity).not.toHaveBeenCalled();\n  });\n\n  test('should handle back press correctly', () => {\n    const { getByTestId } = render(<ConversationExercise route={mockRoute} />);\n\n    const header = getByTestId('ConversationHeader');\n    // Directly invoke the callback prop to simulate the event\n    header.props.onBackPress();\n\n    expect(router.push).toHaveBeenCalledWith({ \n      pathname: '/tabs/exerciseSelection', \n      params: { level: 'A1' } \n    });\n  });\n\n  test('should handle scenario change correctly', () => {\n    const mockConversationState = createMockConversationState();\n    useConversation.mockReturnValue(mockConversationState);\n    const { getByTestId } = render(<ConversationExercise route={mockRoute} />);\n\n    const selector = getByTestId('ConversationSelector');\n    // Directly invoke the callback prop with the new scenario index\n    selector.props.onSelectScenario(1);\n\n    expect(mockConversationState.changeScenario).toHaveBeenCalledWith(1);\n  });\n\n  test('should handle sending a message correctly', () => {\n    const mockConversationState = createMockConversationState();\n    useConversation.mockReturnValue(mockConversationState);\n    const { getByTestId } = render(<ConversationExercise route={mockRoute} />);\n\n    const input = getByTestId('ConversationInput');\n    // Directly invoke the callback prop\n    input.props.onSendMessage();\n\n    expect(mockConversationState.sendMessage).toHaveBeenCalledTimes(1);\n  });\n\n  test('should handle using a suggestion correctly', () => {\n    const mockConversationState = createMockConversationState();\n    useConversation.mockReturnValue(mockConversationState);\n    const { getByTestId } = render(<ConversationExercise route={mockRoute} />);\n\n    const suggestions = getByTestId('ConversationSuggestions');\n    // Directly invoke the callback prop with a sample suggestion\n    suggestions.props.onPressSuggestion('Hi');\n\n    expect(mockConversationState.useSuggestion).toHaveBeenCalledWith('Hi');\n  });\n});"],"mappings":"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","ignoreList":[]}