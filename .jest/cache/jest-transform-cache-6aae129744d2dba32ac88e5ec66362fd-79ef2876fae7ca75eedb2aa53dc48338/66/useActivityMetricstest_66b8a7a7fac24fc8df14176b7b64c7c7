efb2ed405cdcb910a7d0350f2a8dfbeb
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    setItem: jest.fn(function () {
      return Promise.resolve();
    }),
    getItem: jest.fn(function () {
      return Promise.resolve(null);
    }),
    removeItem: jest.fn(function () {
      return Promise.resolve();
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = require("@testing-library/react");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useActivityMetrics = _interopRequireDefault(require("../../src/hooks/useActivityMetrics"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useActivityMetrics', function () {
  var MOCK_DATE = new Date('2025-01-01T12:00:00.000Z');
  var MOCK_TODAY_STRING = MOCK_DATE.toDateString();
  beforeEach(function () {
    jest.useFakeTimers();
    jest.setSystemTime(MOCK_DATE);
    _asyncStorage.default.getItem.mockClear();
    _asyncStorage.default.setItem.mockClear();
  });
  afterEach(function () {
    jest.runOnlyPendingTimers();
    jest.useRealTimers();
  });
  it('initializes with default values and loads metrics', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify({
      someMetric: 1
    }));
    var _renderHook = (0, _react.renderHook)(function () {
        return (0, _useActivityMetrics.default)();
      }),
      result = _renderHook.result,
      waitForNextUpdate = _renderHook.waitForNextUpdate;
    expect(result.current.isLoading).toBe(true);
    expect(result.current.currentStreak).toBe(0);
    expect(result.current.todayMinutes).toBe(0);
    expect(result.current.formattedTime).toBe('0min');
    yield waitForNextUpdate();
    expect(result.current.isLoading).toBe(false);
    expect(result.current.metrics).toEqual({
      someMetric: 1
    });
    expect(_asyncStorage.default.getItem).toHaveBeenCalledWith('activity_metrics');
  }));
  it('starts and ends a session, updating todayMinutes and saving', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook2 = (0, _react.renderHook)(function () {
        return (0, _useActivityMetrics.default)();
      }),
      result = _renderHook2.result,
      waitForNextUpdate = _renderHook2.waitForNextUpdate;
    yield waitForNextUpdate();
    (0, _react.act)(function () {
      result.current.startSession();
    });
    jest.advanceTimersByTime(120 * 1000);
    yield (0, _react.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.endSession();
    }));
    expect(result.current.todayMinutes).toBe(2);
    expect(result.current.formattedTime).toBe('2min');
    expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('today_minutes', '2');
    expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('last_time_date', MOCK_TODAY_STRING);
  }));
  it('updates streak for a consecutive day', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValueOnce(null).mockResolvedValueOnce(JSON.stringify({
      currentStreak: 1
    })).mockResolvedValueOnce(new Date(MOCK_DATE.getTime() - 24 * 60 * 60 * 1000).toDateString());
    var _renderHook3 = (0, _react.renderHook)(function () {
        return (0, _useActivityMetrics.default)();
      }),
      result = _renderHook3.result,
      waitForNextUpdate = _renderHook3.waitForNextUpdate;
    yield waitForNextUpdate();
    (0, _react.act)(function () {
      result.current.updateStreak();
    });
    yield waitForNextUpdate();
    expect(result.current.currentStreak).toBe(2);
    expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('current_streak', '2');
    expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('last_activity_date', MOCK_TODAY_STRING);
  }));
  it('resets streak if not consecutive day', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValueOnce(null).mockResolvedValueOnce(JSON.stringify({
      currentStreak: 5
    })).mockResolvedValueOnce(new Date(MOCK_DATE.getTime() - 48 * 60 * 60 * 1000).toDateString());
    var _renderHook4 = (0, _react.renderHook)(function () {
        return (0, _useActivityMetrics.default)();
      }),
      result = _renderHook4.result,
      waitForNextUpdate = _renderHook4.waitForNextUpdate;
    yield waitForNextUpdate();
    (0, _react.act)(function () {
      result.current.updateStreak();
    });
    yield waitForNextUpdate();
    expect(result.current.currentStreak).toBe(1);
    expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('current_streak', '1');
    expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('last_activity_date', MOCK_TODAY_STRING);
  }));
  it('does not update streak if already updated today', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValueOnce(null).mockResolvedValueOnce(JSON.stringify({
      currentStreak: 3
    })).mockResolvedValueOnce(MOCK_TODAY_STRING);
    var _renderHook5 = (0, _react.renderHook)(function () {
        return (0, _useActivityMetrics.default)();
      }),
      result = _renderHook5.result,
      waitForNextUpdate = _renderHook5.waitForNextUpdate;
    yield waitForNextUpdate();
    (0, _react.act)(function () {
      result.current.updateStreak();
    });
    yield waitForNextUpdate();
    expect(result.current.currentStreak).toBe(3);
    expect(_asyncStorage.default.setItem).not.toHaveBeenCalledWith('current_streak', expect.any(String));
  }));
  it('returns correct streak trend', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook6 = (0, _react.renderHook)(function () {
        return (0, _useActivityMetrics.default)();
      }),
      result = _renderHook6.result,
      waitForNextUpdate = _renderHook6.waitForNextUpdate,
      rerender = _renderHook6.rerender;
    yield waitForNextUpdate();
    (0, _react.act)(function () {
      result.current.updateStreak();
    });
    yield waitForNextUpdate();
    expect(result.current.streakTrend).toBe('üî• Continue!');
    (0, _react.act)(function () {
      result.current.currentStreak = 3;
    });
    rerender();
    expect(result.current.streakTrend).toBe('üí™ En forme!');
    (0, _react.act)(function () {
      result.current.currentStreak = 7;
    });
    rerender();
    expect(result.current.streakTrend).toBe('üèÜ Incroyable!');
    (0, _react.act)(function () {
      result.current.currentStreak = 0;
    });
    rerender();
    expect(result.current.streakTrend).toBeNull();
  }));
  it('returns correct formatted time', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook7 = (0, _react.renderHook)(function () {
        return (0, _useActivityMetrics.default)();
      }),
      result = _renderHook7.result,
      waitForNextUpdate = _renderHook7.waitForNextUpdate;
    yield waitForNextUpdate();
    (0, _react.act)(function () {
      result.current.startSession();
    });
    jest.advanceTimersByTime(30 * 60 * 1000);
    yield (0, _react.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.endSession();
    }));
    expect(result.current.formattedTime).toBe('30min');
    (0, _react.act)(function () {
      result.current.startSession();
    });
    jest.advanceTimersByTime(60 * 60 * 1000);
    yield (0, _react.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.endSession();
    }));
    expect(result.current.formattedTime).toBe('1h');
    (0, _react.act)(function () {
      result.current.startSession();
    });
    jest.advanceTimersByTime(75 * 60 * 1000);
    yield (0, _react.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.endSession();
    }));
    expect(result.current.formattedTime).toBe('2h15min');
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,