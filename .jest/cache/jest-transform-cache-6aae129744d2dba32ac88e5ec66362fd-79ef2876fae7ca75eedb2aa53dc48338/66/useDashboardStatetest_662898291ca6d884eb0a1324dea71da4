9c443fb94ea69a4294ed57d121d9472b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _useDashboardState = require("../../../../src/screens/Dashboard/hooks/useDashboardState");
describe('useDashboardState', function () {
  var mockLoadLastActivities = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
    mockLoadLastActivities.mockResolvedValue();
  });
  it('devrait initialiser avec les valeurs par défaut', function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardState.useDashboardState)(mockLoadLastActivities);
      }),
      result = _renderHook.result;
    expect(result.current.showLevelProgress).toBe(false);
    expect(result.current.refreshing).toBe(false);
    expect(result.current.activeTab).toBe('home');
  });
  it('devrait ouvrir et fermer la modal de progression', function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardState.useDashboardState)(mockLoadLastActivities);
      }),
      result = _renderHook2.result;
    (0, _reactNative.act)(function () {
      result.current.openLevelProgressModal();
    });
    expect(result.current.showLevelProgress).toBe(true);
    (0, _reactNative.act)(function () {
      result.current.closeLevelProgressModal();
    });
    expect(result.current.showLevelProgress).toBe(false);
  });
  it('devrait changer l\'état de la modal directement', function () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardState.useDashboardState)(mockLoadLastActivities);
      }),
      result = _renderHook3.result;
    (0, _reactNative.act)(function () {
      result.current.setShowLevelProgress(true);
    });
    expect(result.current.showLevelProgress).toBe(true);
    (0, _reactNative.act)(function () {
      result.current.setShowLevelProgress(false);
    });
    expect(result.current.showLevelProgress).toBe(false);
  });
  it('devrait changer l\'onglet actif', function () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardState.useDashboardState)(mockLoadLastActivities);
      }),
      result = _renderHook4.result;
    (0, _reactNative.act)(function () {
      result.current.setActiveTab('progress');
    });
    expect(result.current.activeTab).toBe('progress');
    (0, _reactNative.act)(function () {
      result.current.setActiveTab('settings');
    });
    expect(result.current.activeTab).toBe('settings');
  });
  it('devrait gérer le pull-to-refresh avec succès', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardState.useDashboardState)(mockLoadLastActivities);
      }),
      result = _renderHook5.result;
    expect(result.current.refreshing).toBe(false);
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.onRefresh();
    }));
    expect(result.current.refreshing).toBe(false);
    expect(mockLoadLastActivities).toHaveBeenCalledTimes(1);
  }));
  it('devrait gérer les erreurs de refresh gracieusement', (0, _asyncToGenerator2.default)(function* () {
    mockLoadLastActivities.mockRejectedValue(new Error('Network error'));
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardState.useDashboardState)(mockLoadLastActivities);
      }),
      result = _renderHook6.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.onRefresh();
    }));
    expect(result.current.refreshing).toBe(false);
    expect(mockLoadLastActivities).toHaveBeenCalledTimes(1);
  }));
  it('devrait mémoriser la fonction onRefresh', function () {
    var _renderHook7 = (0, _reactNative.renderHook)(function (_ref5) {
        var loadFn = _ref5.loadFn;
        return (0, _useDashboardState.useDashboardState)(loadFn);
      }, {
        initialProps: {
          loadFn: mockLoadLastActivities
        }
      }),
      result = _renderHook7.result,
      rerender = _renderHook7.rerender;
    var initialOnRefresh = result.current.onRefresh;
    rerender({
      loadFn: mockLoadLastActivities
    });
    expect(result.current.onRefresh).toBe(initialOnRefresh);
    var newMockFn = jest.fn();
    rerender({
      loadFn: newMockFn
    });
    expect(result.current.onRefresh).not.toBe(initialOnRefresh);
  });
  it('devrait mémoriser les fonctions de modal', function () {
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardState.useDashboardState)(mockLoadLastActivities);
      }),
      result = _renderHook8.result,
      rerender = _renderHook8.rerender;
    var initialOpenModal = result.current.openLevelProgressModal;
    var initialCloseModal = result.current.closeLevelProgressModal;
    rerender();
    expect(result.current.openLevelProgressModal).toBe(initialOpenModal);
    expect(result.current.closeLevelProgressModal).toBe(initialCloseModal);
  });
  it('devrait permettre plusieurs refresh simultanés sans conflit', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardState.useDashboardState)(mockLoadLastActivities);
      }),
      result = _renderHook9.result;
    var firstRefresh = (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.onRefresh();
    }));
    var secondRefresh = (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.onRefresh();
    }));
    yield firstRefresh;
    yield secondRefresh;
    expect(result.current.refreshing).toBe(false);
    expect(mockLoadLastActivities).toHaveBeenCalledTimes(2);
  }));
  it('devrait exposer toutes les fonctions et états nécessaires', function () {
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardState.useDashboardState)(mockLoadLastActivities);
      }),
      result = _renderHook0.result;
    expect(typeof result.current.showLevelProgress).toBe('boolean');
    expect(typeof result.current.refreshing).toBe('boolean');
    expect(typeof result.current.activeTab).toBe('string');
    expect(typeof result.current.setShowLevelProgress).toBe('function');
    expect(typeof result.current.openLevelProgressModal).toBe('function');
    expect(typeof result.current.closeLevelProgressModal).toBe('function');
    expect(typeof result.current.setActiveTab).toBe('function');
    expect(typeof result.current.onRefresh).toBe('function');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,