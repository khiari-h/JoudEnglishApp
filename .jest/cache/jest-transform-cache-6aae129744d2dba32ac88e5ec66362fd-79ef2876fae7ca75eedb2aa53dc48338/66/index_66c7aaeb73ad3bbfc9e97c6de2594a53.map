{"version":3,"names":["_readingTextsBonus","_interopRequireDefault","require","_readingQuestionsBonus","combineTextWithQuestions","textId","text","readingTextsBonus","find","t","id","questions","readingQuestionsBonus","q","Object","assign","getAllBonusExercises","exports","map","filter","Boolean","getBonusExerciseById","getBonusExercisesByDifficulty","difficulty","filteredTexts","getBonusExercisesByTopic","topic","_text$topics","topics","includes","bonusMetadata","level","totalTexts","length","totalQuestions","reduce","sum","averageWordCount","Math","round","wordCount","difficulties","_toConsumableArray2","default","Set","sort","flatMap","description","readingBonusData","metadata","exercises","getAll","getById","getByDifficulty","getByTopic","texts","_default"],"sources":["index.js"],"sourcesContent":["// src/data/exercises/reading/readingBonusIndex.js\n\nimport readingTextsBonus from './categories/readingTextsBonus.js';\nimport readingQuestionsBonus from './categories/readingQuestionsBonus.js';\n\n// Fonction pour combiner textes et questions\nconst combineTextWithQuestions = (textId) => {\n  const text = readingTextsBonus.find(t => t.id === textId);\n  const questions = readingQuestionsBonus.find(q => q.textId === textId);\n\n  if (!text || !questions) {\n    return null;\n  }\n\n  return {\n    ...text,\n    questions: questions.questions\n  };\n};\n\n// Fonction pour obtenir tous les exercices combinés\nconst getAllBonusExercises = () => {\n  return readingTextsBonus.map(text => combineTextWithQuestions(text.id)).filter(Boolean);\n};\n\n// Fonction pour obtenir un exercice par ID\nconst getBonusExerciseById = (textId) => {\n  return combineTextWithQuestions(textId);\n};\n\n// Fonction pour obtenir des exercices par difficulté\nconst getBonusExercisesByDifficulty = (difficulty) => {\n  const filteredTexts = readingTextsBonus.filter(text => text.difficulty === difficulty);\n  return filteredTexts.map(text => combineTextWithQuestions(text.id)).filter(Boolean);\n};\n\n// Fonction pour obtenir des exercices par sujet\nconst getBonusExercisesByTopic = (topic) => {\n  const filteredTexts = readingTextsBonus.filter(text => \n    text.topics?.includes(topic)\n  );\n  return filteredTexts.map(text => combineTextWithQuestions(text.id)).filter(Boolean);\n};\n\n// Métadonnées du niveau Bonus\nconst bonusMetadata = {\n  level: \"bonus\",\n  totalTexts: readingTextsBonus.length,\n  totalQuestions: readingQuestionsBonus.reduce((sum, q) => sum + q.questions.length, 0),\n  averageWordCount: Math.round(readingTextsBonus.reduce((sum, text) => sum + text.wordCount, 0) / readingTextsBonus.length),\n  difficulties: [...new Set(readingTextsBonus.map(text => text.difficulty))].sort(),\n  topics: [...new Set(readingTextsBonus.flatMap(text => text.topics))].sort(),\n  description: \"Native-level reading comprehension exercises featuring authentic content that native speakers encounter daily. Focuses on inference, tone analysis, and cultural understanding.\"\n};\n\n// Export par défaut avec structure complète\nconst readingBonusData = {\n  metadata: bonusMetadata,\n  exercises: getAllBonusExercises(),\n\n  // Fonctions utilitaires\n  getAll: getAllBonusExercises,\n  getById: getBonusExerciseById,\n  getByDifficulty: getBonusExercisesByDifficulty,\n  getByTopic: getBonusExercisesByTopic,\n\n  // Accès séparé aux données brutes\n  texts: readingTextsBonus,\n  questions: readingQuestionsBonus\n};\n\nexport default readingBonusData;\n\n// Exports nommés pour plus de flexibilité\nexport {\n  readingTextsBonus,\n  readingQuestionsBonus,\n  getAllBonusExercises,\n  getBonusExerciseById,\n  getBonusExercisesByDifficulty,\n  getBonusExercisesByTopic,\n  bonusMetadata\n};"],"mappings":"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","ignoreList":[]}