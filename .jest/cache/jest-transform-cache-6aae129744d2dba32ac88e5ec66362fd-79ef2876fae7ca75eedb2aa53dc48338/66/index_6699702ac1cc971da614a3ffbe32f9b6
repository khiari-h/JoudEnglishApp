8baa4f7c3e78cdbb4b55e69f412808a7
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _HeroCard = _interopRequireDefault(require("../../../../components/ui/HeroCard"));
var _ContentSection = _interopRequireDefault(require("../../../../components/ui/ContentSection"));
var _style = _interopRequireDefault(require("./style"));
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
var AssessmentQuestion = function AssessmentQuestion(_ref) {
  var question = _ref.question,
    selectedAnswer = _ref.selectedAnswer,
    showFeedback = _ref.showFeedback,
    _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? "#3b82f6" : _ref$levelColor,
    onSelectAnswer = _ref.onSelectAnswer;
  var styles = (0, _style.default)(levelColor);
  if (!question || !question.options) {
    return null;
  }
  var handlePress = (0, _react.useCallback)(function (idx) {
    return function () {
      return onSelectAnswer(idx);
    };
  }, [onSelectAnswer]);
  var isCorrect = selectedAnswer === question.correctAnswer;
  var feedbackText = isCorrect ? "✅ Correct! Great job." : "❌ Oops! The correct answer is different.";
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsx)(_HeroCard.default, {
      content: question.text,
      fontSize: 20,
      levelColor: levelColor,
      showUnderline: false,
      backgroundColor: "white",
      padding: 24
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.optionsContainer,
      children: question.options.map(function (option, index) {
        return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          style: [styles.optionButton, selectedAnswer === index && [styles.selectedOption, {
            borderColor: levelColor,
            backgroundColor: `${levelColor}08`
          }], showFeedback && index === question.correctAnswer && [styles.correctOption, {
            borderColor: '#10b981',
            backgroundColor: '#f0fdf4'
          }]],
          onPress: handlePress(index),
          disabled: showFeedback,
          activeOpacity: 0.7,
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [styles.optionText, selectedAnswer === index && {
              color: levelColor,
              fontWeight: '600'
            }, showFeedback && index === question.correctAnswer && {
              color: '#10b981',
              fontWeight: '600'
            }],
            children: option
          })
        }, option);
      })
    }), showFeedback && (0, _jsxRuntime.jsx)(_ContentSection.default, {
      title: "Feedback",
      content: feedbackText,
      levelColor: isCorrect ? '#10b981' : '#ef4444',
      backgroundColor: isCorrect ? '#f0fdf4' : '#fef2f2',
      icon: isCorrect ? '✅' : '❌'
    }), showFeedback && question.explanation && (0, _jsxRuntime.jsx)(_ContentSection.default, {
      title: "Explanation",
      content: question.explanation,
      levelColor: "#6366f1",
      backgroundColor: "#f8fafc",
      isItalic: true
    })]
  });
};
var _default = exports.default = AssessmentQuestion;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,