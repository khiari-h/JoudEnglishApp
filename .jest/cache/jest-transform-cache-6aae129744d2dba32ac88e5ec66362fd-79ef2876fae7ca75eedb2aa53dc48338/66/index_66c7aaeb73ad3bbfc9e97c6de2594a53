2b3ea87a9b8af651a4f7b887539919c4
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBonusExercisesByTopic = exports.getBonusExercisesByDifficulty = exports.getBonusExerciseById = exports.getAllBonusExercises = exports.default = exports.bonusMetadata = void 0;
Object.defineProperty(exports, "readingQuestionsBonus", {
  enumerable: true,
  get: function get() {
    return _readingQuestionsBonus.default;
  }
});
Object.defineProperty(exports, "readingTextsBonus", {
  enumerable: true,
  get: function get() {
    return _readingTextsBonus.default;
  }
});
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _readingTextsBonus = _interopRequireDefault(require("./categories/readingTextsBonus.js"));
var _readingQuestionsBonus = _interopRequireDefault(require("./categories/readingQuestionsBonus.js"));
var combineTextWithQuestions = function combineTextWithQuestions(textId) {
  var text = _readingTextsBonus.default.find(function (t) {
    return t.id === textId;
  });
  var questions = _readingQuestionsBonus.default.find(function (q) {
    return q.textId === textId;
  });
  if (!text || !questions) {
    return null;
  }
  return Object.assign({}, text, {
    questions: questions.questions
  });
};
var getAllBonusExercises = exports.getAllBonusExercises = function getAllBonusExercises() {
  return _readingTextsBonus.default.map(function (text) {
    return combineTextWithQuestions(text.id);
  }).filter(Boolean);
};
var getBonusExerciseById = exports.getBonusExerciseById = function getBonusExerciseById(textId) {
  return combineTextWithQuestions(textId);
};
var getBonusExercisesByDifficulty = exports.getBonusExercisesByDifficulty = function getBonusExercisesByDifficulty(difficulty) {
  var filteredTexts = _readingTextsBonus.default.filter(function (text) {
    return text.difficulty === difficulty;
  });
  return filteredTexts.map(function (text) {
    return combineTextWithQuestions(text.id);
  }).filter(Boolean);
};
var getBonusExercisesByTopic = exports.getBonusExercisesByTopic = function getBonusExercisesByTopic(topic) {
  var filteredTexts = _readingTextsBonus.default.filter(function (text) {
    var _text$topics;
    return (_text$topics = text.topics) == null ? void 0 : _text$topics.includes(topic);
  });
  return filteredTexts.map(function (text) {
    return combineTextWithQuestions(text.id);
  }).filter(Boolean);
};
var bonusMetadata = exports.bonusMetadata = {
  level: "bonus",
  totalTexts: _readingTextsBonus.default.length,
  totalQuestions: _readingQuestionsBonus.default.reduce(function (sum, q) {
    return sum + q.questions.length;
  }, 0),
  averageWordCount: Math.round(_readingTextsBonus.default.reduce(function (sum, text) {
    return sum + text.wordCount;
  }, 0) / _readingTextsBonus.default.length),
  difficulties: (0, _toConsumableArray2.default)(new Set(_readingTextsBonus.default.map(function (text) {
    return text.difficulty;
  }))).sort(),
  topics: (0, _toConsumableArray2.default)(new Set(_readingTextsBonus.default.flatMap(function (text) {
    return text.topics;
  }))).sort(),
  description: "Native-level reading comprehension exercises featuring authentic content that native speakers encounter daily. Focuses on inference, tone analysis, and cultural understanding."
};
var readingBonusData = {
  metadata: bonusMetadata,
  exercises: getAllBonusExercises(),
  getAll: getAllBonusExercises,
  getById: getBonusExerciseById,
  getByDifficulty: getBonusExercisesByDifficulty,
  getByTopic: getBonusExercisesByTopic,
  texts: _readingTextsBonus.default,
  questions: _readingQuestionsBonus.default
};
var _default = exports.default = readingBonusData;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,