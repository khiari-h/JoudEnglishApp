58c4bcf13d62d9392401387fc61d6a4b
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  return Object.assign({}, RN, {
    Animated: Object.assign({}, RN.Animated, {
      timing: jest.fn(function () {
        return {
          start: mockTimingStart
        };
      })
    }),
    View: RN.View,
    Text: RN.Text,
    TouchableOpacity: RN.TouchableOpacity,
    ScrollView: RN.ScrollView
  });
});
_getJestObj().mock('expo-linear-gradient', function () {
  var _require = require('react-native'),
    View = _require.View;
  return {
    LinearGradient: function LinearGradient(props) {
      return (0, _jsxRuntime.jsx)(View, Object.assign({}, props));
    }
  };
});
_getJestObj().mock('../../../src/components/exercise-common/CategorySelector/style', function () {
  var _require2 = require('react-native'),
    StyleSheet = _require2.StyleSheet;
  return function () {
    return StyleSheet.create({
      container: {},
      backgroundGradient: {},
      scrollView: {},
      scrollContent: {},
      categoryItemWrapper: {},
      categoryTouchable: {},
      selectedCategoryItem: {},
      selectedInner: {},
      selectedCategoryText: {},
      sparkleContainer: {},
      sparkle: {},
      categoryItem: {},
      categoryInner: {},
      categoryText: {}
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _CategorySelector = _interopRequireDefault(require("../../../src/components/exercise-common/CategorySelector"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockTimingStart = jest.fn();
describe('CategorySelector', function () {
  var categories = [{
    id: '1',
    name: 'Grammar'
  }, {
    id: '2',
    name: 'Vocabulary'
  }, {
    id: '3',
    name: 'Reading'
  }];
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('should render all categories correctly with minimum props', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories
      })),
      getByText = _render.getByText;
    expect(getByText('Grammar')).toBeTruthy();
    expect(getByText('Vocabulary')).toBeTruthy();
    expect(getByText('Reading')).toBeTruthy();
  });
  it('should render nothing when the categories array is empty', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: []
      })),
      queryByText = _render2.queryByText;
    expect(queryByText('Grammar')).toBeNull();
  });
  it('should display the selected category with the sparkle emoji', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: function onSelectCategory() {}
      })),
      getByText = _render3.getByText;
    expect(getByText('âœ¨')).toBeTruthy();
  });
  it('should call onSelectCategory with the correct category id when a category is pressed', function () {
    var onSelectCategory = jest.fn();
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        onSelectCategory: onSelectCategory
      })),
      getByText = _render4.getByText;
    _reactNative.fireEvent.press(getByText('Vocabulary'));
    expect(onSelectCategory).toHaveBeenCalledWith('2');
  });
  it('should deselect the previous category when a new one is selected and trigger two animations', function () {
    var onSelectCategory = jest.fn();
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: onSelectCategory
      })),
      getByText = _render5.getByText;
    _reactNative.fireEvent.press(getByText('Vocabulary'));
    expect(onSelectCategory).toHaveBeenCalledWith('2');
    expect(mockTimingStart).toHaveBeenCalledTimes(2);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJSTiIsImplc3QiLCJyZXF1aXJlQWN0dWFsIiwiT2JqZWN0IiwiYXNzaWduIiwiQW5pbWF0ZWQiLCJ0aW1pbmciLCJmbiIsInN0YXJ0IiwibW9ja1RpbWluZ1N0YXJ0IiwiVmlldyIsIlRleHQiLCJUb3VjaGFibGVPcGFjaXR5IiwiU2Nyb2xsVmlldyIsIl9yZXF1aXJlIiwicmVxdWlyZSIsIkxpbmVhckdyYWRpZW50IiwicHJvcHMiLCJfanN4UnVudGltZSIsImpzeCIsIl9yZXF1aXJlMiIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJjb250YWluZXIiLCJiYWNrZ3JvdW5kR3JhZGllbnQiLCJzY3JvbGxWaWV3Iiwic2Nyb2xsQ29udGVudCIsImNhdGVnb3J5SXRlbVdyYXBwZXIiLCJjYXRlZ29yeVRvdWNoYWJsZSIsInNlbGVjdGVkQ2F0ZWdvcnlJdGVtIiwic2VsZWN0ZWRJbm5lciIsInNlbGVjdGVkQ2F0ZWdvcnlUZXh0Iiwic3BhcmtsZUNvbnRhaW5lciIsInNwYXJrbGUiLCJjYXRlZ29yeUl0ZW0iLCJjYXRlZ29yeUlubmVyIiwiY2F0ZWdvcnlUZXh0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9DYXRlZ29yeVNlbGVjdG9yIiwiX3JlcXVpcmUzIiwiZGVzY3JpYmUiLCJjYXRlZ29yaWVzIiwiaWQiLCJuYW1lIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJpdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJkZWZhdWx0IiwiZ2V0QnlUZXh0IiwiZXhwZWN0IiwidG9CZVRydXRoeSIsIl9yZW5kZXIyIiwicXVlcnlCeVRleHQiLCJ0b0JlTnVsbCIsIl9yZW5kZXIzIiwic2VsZWN0ZWRDYXRlZ29yeSIsIm9uU2VsZWN0Q2F0ZWdvcnkiLCJfcmVuZGVyNCIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJfcmVuZGVyNSIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyJdLCJzb3VyY2VzIjpbIkNhdGVnb3J5U2VsZWN0b3IudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBfX3Rlc3RzX18vY29tcG9uZW50cy9leGVyY2lzZS1jb21tb24vQ2F0ZWdvcnlTZWxlY3Rvci50ZXN0LmpzXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgQ2F0ZWdvcnlTZWxlY3RvciBmcm9tICcuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9leGVyY2lzZS1jb21tb24vQ2F0ZWdvcnlTZWxlY3Rvcic7XG5cbi8vIENyw6llIHVuIG1vY2sgcG91ciBBbmltYXRlZC50aW1pbmcuc3RhcnQoKSBhdmFudCBkZSBjaGFyZ2VyIGxlIGNvbXBvc2FudFxuY29uc3QgbW9ja1RpbWluZ1N0YXJ0ID0gamVzdC5mbigpO1xuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUnLCAoKSA9PiB7XG7CoCBjb25zdCBSTiA9IGplc3QucmVxdWlyZUFjdHVhbCgncmVhY3QtbmF0aXZlJyk7XG7CoCByZXR1cm4ge1xuwqAgwqAgLi4uUk4sXG7CoCDCoCBBbmltYXRlZDoge1xuwqAgwqAgwqAgLi4uUk4uQW5pbWF0ZWQsXG7CoCDCoCDCoCB0aW1pbmc6IGplc3QuZm4oKCkgPT4gKHtcbsKgIMKgIMKgIMKgIHN0YXJ0OiBtb2NrVGltaW5nU3RhcnQsXG7CoCDCoCDCoCB9KSksXG7CoCDCoCB9LFxuwqAgwqAgLy8gQXNzdXJlei12b3VzIGQnaW5jbHVyZSBsZXMgYXV0cmVzIGNvbXBvc2FudHMgcXVlIGxlIG1vY2sgcG91cnJhaXQgcmVtcGxhY2VyXG7CoCDCoCBWaWV3OiBSTi5WaWV3LFxuwqAgwqAgVGV4dDogUk4uVGV4dCxcbsKgIMKgIFRvdWNoYWJsZU9wYWNpdHk6IFJOLlRvdWNoYWJsZU9wYWNpdHksXG7CoCDCoCBTY3JvbGxWaWV3OiBSTi5TY3JvbGxWaWV3LFxuwqAgfTtcbn0pO1xuXG4vLyBNb2NrIGQnZXhwby1saW5lYXItZ3JhZGllbnQgY29ycmlnw6lcbmplc3QubW9jaygnZXhwby1saW5lYXItZ3JhZGllbnQnLCAoKSA9PiB7XG7CoCAvLyBPbiBpbXBvcnRlIFZpZXcgaWNpLCDDoCBsJ2ludMOpcmlldXIgZGUgbGEgZm9uY3Rpb24sIGNvbW1lIGwnZXhpZ2UgSmVzdFxuwqAgY29uc3QgeyBWaWV3IH0gPSByZXF1aXJlKCdyZWFjdC1uYXRpdmUnKTtcbsKgIHJldHVybiB7XG7CoCDCoCBMaW5lYXJHcmFkaWVudDogKHByb3BzKSA9PiA8VmlldyB7Li4ucHJvcHN9IC8+LFxuwqAgfTtcbn0pO1xuXG4vLyBNb2NrIGR1IGZpY2hpZXIgZGUgc3R5bGVcbmplc3QubW9jaygnLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvZXhlcmNpc2UtY29tbW9uL0NhdGVnb3J5U2VsZWN0b3Ivc3R5bGUnLCAoKSA9PiB7XG7CoCBjb25zdCB7IFN0eWxlU2hlZXQgfSA9IHJlcXVpcmUoJ3JlYWN0LW5hdGl2ZScpO1xuwqAgcmV0dXJuICgpID0+IFN0eWxlU2hlZXQuY3JlYXRlKHtcbsKgIMKgIGNvbnRhaW5lcjoge30sXG7CoCDCoCBiYWNrZ3JvdW5kR3JhZGllbnQ6IHt9LFxuwqAgwqAgc2Nyb2xsVmlldzoge30sXG7CoCDCoCBzY3JvbGxDb250ZW50OiB7fSxcbsKgIMKgIGNhdGVnb3J5SXRlbVdyYXBwZXI6IHt9LFxuwqAgwqAgY2F0ZWdvcnlUb3VjaGFibGU6IHt9LFxuwqAgwqAgc2VsZWN0ZWRDYXRlZ29yeUl0ZW06IHt9LFxuwqAgwqAgc2VsZWN0ZWRJbm5lcjoge30sXG7CoCDCoCBzZWxlY3RlZENhdGVnb3J5VGV4dDoge30sXG7CoCDCoCBzcGFya2xlQ29udGFpbmVyOiB7fSxcbsKgIMKgIHNwYXJrbGU6IHt9LFxuwqAgwqAgY2F0ZWdvcnlJdGVtOiB7fSxcbsKgIMKgIGNhdGVnb3J5SW5uZXI6IHt9LFxuwqAgwqAgY2F0ZWdvcnlUZXh0OiB7fSxcbsKgIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdDYXRlZ29yeVNlbGVjdG9yJywgKCkgPT4ge1xuwqAgY29uc3QgY2F0ZWdvcmllcyA9IFtcbsKgIMKgIHsgaWQ6ICcxJywgbmFtZTogJ0dyYW1tYXInIH0sXG7CoCDCoCB7IGlkOiAnMicsIG5hbWU6ICdWb2NhYnVsYXJ5JyB9LFxuwqAgwqAgeyBpZDogJzMnLCBuYW1lOiAnUmVhZGluZycgfSxcbsKgIF07XG5cbsKgIGJlZm9yZUVhY2goKCkgPT4ge1xuwqAgwqAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG7CoCB9KTtcblxuwqAgaXQoJ3Nob3VsZCByZW5kZXIgYWxsIGNhdGVnb3JpZXMgY29ycmVjdGx5IHdpdGggbWluaW11bSBwcm9wcycsICgpID0+IHtcbsKgIMKgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPENhdGVnb3J5U2VsZWN0b3IgY2F0ZWdvcmllcz17Y2F0ZWdvcmllc30gLz4pO1xuwqAgwqAgZXhwZWN0KGdldEJ5VGV4dCgnR3JhbW1hcicpKS50b0JlVHJ1dGh5KCk7XG7CoCDCoCBleHBlY3QoZ2V0QnlUZXh0KCdWb2NhYnVsYXJ5JykpLnRvQmVUcnV0aHkoKTtcbsKgIMKgIGV4cGVjdChnZXRCeVRleHQoJ1JlYWRpbmcnKSkudG9CZVRydXRoeSgpO1xuwqAgfSk7XG5cbsKgIGl0KCdzaG91bGQgcmVuZGVyIG5vdGhpbmcgd2hlbiB0aGUgY2F0ZWdvcmllcyBhcnJheSBpcyBlbXB0eScsICgpID0+IHtcbsKgIMKgIGNvbnN0IHsgcXVlcnlCeVRleHQgfSA9IHJlbmRlcig8Q2F0ZWdvcnlTZWxlY3RvciBjYXRlZ29yaWVzPXtbXX0gLz4pO1xuwqAgwqAgZXhwZWN0KHF1ZXJ5QnlUZXh0KCdHcmFtbWFyJykpLnRvQmVOdWxsKCk7XG7CoCB9KTtcblxuwqAgaXQoJ3Nob3VsZCBkaXNwbGF5IHRoZSBzZWxlY3RlZCBjYXRlZ29yeSB3aXRoIHRoZSBzcGFya2xlIGVtb2ppJywgKCkgPT4ge1xuwqAgwqAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcbsKgIMKgIMKgIDxDYXRlZ29yeVNlbGVjdG9yXG7CoCDCoCDCoCDCoCBjYXRlZ29yaWVzPXtjYXRlZ29yaWVzfVxuwqAgwqAgwqAgwqAgc2VsZWN0ZWRDYXRlZ29yeT1cIjFcIlxuwqAgwqAgwqAgwqAgb25TZWxlY3RDYXRlZ29yeT17KCkgPT4ge319XG7CoCDCoCDCoCAvPlxuwqAgwqAgKTtcbsKgIMKgIGV4cGVjdChnZXRCeVRleHQoJ+KcqCcpKS50b0JlVHJ1dGh5KCk7XG7CoCB9KTtcblxuwqAgaXQoJ3Nob3VsZCBjYWxsIG9uU2VsZWN0Q2F0ZWdvcnkgd2l0aCB0aGUgY29ycmVjdCBjYXRlZ29yeSBpZCB3aGVuIGEgY2F0ZWdvcnkgaXMgcHJlc3NlZCcsICgpID0+IHtcbsKgIMKgIGNvbnN0IG9uU2VsZWN0Q2F0ZWdvcnkgPSBqZXN0LmZuKCk7XG7CoCDCoCBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuwqAgwqAgwqAgPENhdGVnb3J5U2VsZWN0b3JcbsKgIMKgIMKgIMKgIGNhdGVnb3JpZXM9e2NhdGVnb3JpZXN9XG7CoCDCoCDCoCDCoCBvblNlbGVjdENhdGVnb3J5PXtvblNlbGVjdENhdGVnb3J5fVxuwqAgwqAgwqAgLz5cbsKgIMKgICk7XG7CoCDCoCBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCdWb2NhYnVsYXJ5JykpO1xuwqAgwqAgZXhwZWN0KG9uU2VsZWN0Q2F0ZWdvcnkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcyJyk7XG7CoCB9KTtcblxuwqAgaXQoJ3Nob3VsZCBkZXNlbGVjdCB0aGUgcHJldmlvdXMgY2F0ZWdvcnkgd2hlbiBhIG5ldyBvbmUgaXMgc2VsZWN0ZWQgYW5kIHRyaWdnZXIgdHdvIGFuaW1hdGlvbnMnLCAoKSA9PiB7XG7CoCDCoCBjb25zdCBvblNlbGVjdENhdGVnb3J5ID0gamVzdC5mbigpO1xuwqAgwqAgLy8gUmVuZCBsZSBjb21wb3NhbnQgYXZlYyB1bmUgY2F0w6lnb3JpZSBkw6lqw6Agc8OpbGVjdGlvbm7DqWVcbsKgIMKgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG7CoCDCoCDCoCA8Q2F0ZWdvcnlTZWxlY3RvclxuwqAgwqAgwqAgwqAgY2F0ZWdvcmllcz17Y2F0ZWdvcmllc31cbsKgIMKgIMKgIMKgIHNlbGVjdGVkQ2F0ZWdvcnk9XCIxXCJcbsKgIMKgIMKgIMKgIG9uU2VsZWN0Q2F0ZWdvcnk9e29uU2VsZWN0Q2F0ZWdvcnl9XG7CoCDCoCDCoCAvPlxuwqAgwqAgKTtcblxuwqAgwqAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgnVm9jYWJ1bGFyeScpKTtcbsKgIMKgIFxuwqAgwqAgZXhwZWN0KG9uU2VsZWN0Q2F0ZWdvcnkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcyJyk7XG7CoCDCoCBleHBlY3QobW9ja1RpbWluZ1N0YXJ0KS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMik7XG7CoCB9KTtcbn0pOyJdLCJtYXBwaW5ncyI6IkFBT0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLGNBQWMsRUFBRSxZQUFNO0VBQzlCLElBQU1DLEVBQUUsR0FBR0MsSUFBSSxDQUFDQyxhQUFhLENBQUMsY0FBYyxDQUFDO0VBQzdDLE9BQUFDLE1BQUEsQ0FBQUMsTUFBQSxLQUNLSixFQUFFO0lBQ0xLLFFBQVEsRUFBQUYsTUFBQSxDQUFBQyxNQUFBLEtBQ0hKLEVBQUUsQ0FBQ0ssUUFBUTtNQUNkQyxNQUFNLEVBQUVMLElBQUksQ0FBQ00sRUFBRSxDQUFDO1FBQUEsT0FBTztVQUNyQkMsS0FBSyxFQUFFQztRQUNULENBQUM7TUFBQSxDQUFDO0lBQUMsRUFDSjtJQUVEQyxJQUFJLEVBQUVWLEVBQUUsQ0FBQ1UsSUFBSTtJQUNiQyxJQUFJLEVBQUVYLEVBQUUsQ0FBQ1csSUFBSTtJQUNiQyxnQkFBZ0IsRUFBRVosRUFBRSxDQUFDWSxnQkFBZ0I7SUFDckNDLFVBQVUsRUFBRWIsRUFBRSxDQUFDYTtFQUFVO0FBRTdCLENBQUMsQ0FBQztBQUdGZixXQUFBLEdBQUtDLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxZQUFNO0VBRXRDLElBQUFlLFFBQUEs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