d35b24eb81b2b75837a77b2380c8875b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _react = require("react");
var _vectorIcons = require("@expo/vector-icons");
var _HeroCard = _interopRequireDefault(require("../../../../components/ui/HeroCard"));
var _ContentSection = _interopRequireDefault(require("../../../../components/ui/ContentSection"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var ReadingQuestionCard = function ReadingQuestionCard(_ref) {
  var question = _ref.question,
    questionIndex = _ref.questionIndex,
    selectedAnswer = _ref.selectedAnswer,
    onSelectAnswer = _ref.onSelectAnswer,
    showFeedback = _ref.showFeedback,
    fadeAnim = _ref.fadeAnim,
    slideAnim = _ref.slideAnim,
    _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? "#3b82f6" : _ref$levelColor;
  var styles = (0, _style.default)(levelColor);
  if (!question) return null;
  var getOptionState = function getOptionState(optionIndex) {
    if (!showFeedback) {
      return selectedAnswer === optionIndex ? 'selected' : 'default';
    }
    if (optionIndex === question.correctAnswer) {
      return 'correct';
    }
    if (selectedAnswer === optionIndex && selectedAnswer !== question.correctAnswer) {
      return 'incorrect';
    }
    return 'default';
  };
  var handleOptionPressCallback = (0, _react.useCallback)(function (optionIndex) {
    return function () {
      if (!showFeedback) {
        onSelectAnswer(optionIndex);
      }
    };
  }, [onSelectAnswer, showFeedback]);
  return (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
    style: [styles.container, {
      opacity: fadeAnim,
      transform: [{
        translateY: slideAnim
      }]
    }],
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.questionHeader,
      children: (0, _jsxRuntime.jsx)(_HeroCard.default, {
        content: `Question ${questionIndex + 1}`,
        fontSize: 18,
        levelColor: levelColor,
        showUnderline: false,
        backgroundColor: "#F8F9FA"
      })
    }), (0, _jsxRuntime.jsx)(_ContentSection.default, {
      title: "\u2753 Question",
      content: question.text,
      levelColor: levelColor,
      backgroundColor: "white",
      contentStyle: {
        fontSize: 18,
        fontWeight: "600",
        color: "#1e293b",
        lineHeight: 26
      }
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.optionsContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [styles.optionsTitle, {
          color: levelColor
        }],
        children: "\uD83D\uDCA1 Choose your answer:"
      }), question.options.map(function (option, index) {
        var optionState = getOptionState(index);
        return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          style: [styles.optionButton, optionState === 'selected' && {
            borderColor: levelColor,
            backgroundColor: `${levelColor}08`
          }, optionState === 'correct' && styles.optionCorrect, optionState === 'incorrect' && styles.optionIncorrect],
          onPress: handleOptionPressCallback(index),
          disabled: showFeedback,
          activeOpacity: 0.8,
          children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.optionContent,
            children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
              style: [styles.optionLetterContainer, {
                backgroundColor: `${levelColor}15`
              }, optionState === 'correct' && {
                backgroundColor: '#10b98120'
              }, optionState === 'incorrect' && {
                backgroundColor: '#ef444420'
              }],
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: [styles.optionLetter, {
                  color: levelColor
                }, optionState === 'correct' && {
                  color: '#10b981'
                }, optionState === 'incorrect' && {
                  color: '#ef4444'
                }],
                children: String.fromCharCode(65 + index)
              })
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: [styles.optionText, optionState === 'selected' && {
                color: levelColor,
                fontWeight: "600"
              }, optionState === 'correct' && styles.optionCorrectText, optionState === 'incorrect' && styles.optionIncorrectText],
              children: option
            }), showFeedback && (0, _jsxRuntime.jsxs)(_reactNative.View, {
              children: [optionState === 'correct' && (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                name: "checkmark-circle",
                size: 24,
                color: "#10b981"
              }), optionState === 'incorrect' && (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                name: "close-circle",
                size: 24,
                color: "#ef4444"
              })]
            })]
          })
        }, option);
      })]
    })]
  });
};
var _default = exports.default = ReadingQuestionCard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX3JlYWN0IiwiX3ZlY3Rvckljb25zIiwiX0hlcm9DYXJkIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9Db250ZW50U2VjdGlvbiIsIl9zdHlsZSIsIl9qc3hSdW50aW1lIiwiUmVhZGluZ1F1ZXN0aW9uQ2FyZCIsIl9yZWYiLCJxdWVzdGlvbiIsInF1ZXN0aW9uSW5kZXgiLCJzZWxlY3RlZEFuc3dlciIsIm9uU2VsZWN0QW5zd2VyIiwic2hvd0ZlZWRiYWNrIiwiZmFkZUFuaW0iLCJzbGlkZUFuaW0iLCJfcmVmJGxldmVsQ29sb3IiLCJsZXZlbENvbG9yIiwic3R5bGVzIiwiY3JlYXRlU3R5bGVzIiwiZ2V0T3B0aW9uU3RhdGUiLCJvcHRpb25JbmRleCIsImNvcnJlY3RBbnN3ZXIiLCJoYW5kbGVPcHRpb25QcmVzc0NhbGxiYWNrIiwidXNlQ2FsbGJhY2siLCJqc3hzIiwiQW5pbWF0ZWQiLCJWaWV3Iiwic3R5bGUiLCJjb250YWluZXIiLCJvcGFjaXR5IiwidHJhbnNmb3JtIiwidHJhbnNsYXRlWSIsImNoaWxkcmVuIiwianN4IiwicXVlc3Rpb25IZWFkZXIiLCJkZWZhdWx0IiwiY29udGVudCIsImZvbnRTaXplIiwic2hvd1VuZGVybGluZSIsImJhY2tncm91bmRDb2xvciIsInRpdGxlIiwidGV4dCIsImNvbnRlbnRTdHlsZSIsImZvbnRXZWlnaHQiLCJjb2xvciIsImxpbmVIZWlnaHQiLCJvcHRpb25zQ29udGFpbmVyIiwiVGV4dCIsIm9wdGlvbnNUaXRsZSIsIm9wdGlvbnMiLCJtYXAiLCJvcHRpb24iLCJpbmRleCIsIm9wdGlvblN0YXRlIiwiVG91Y2hhYmxlT3BhY2l0eSIsIm9wdGlvbkJ1dHRvbiIsImJvcmRlckNvbG9yIiwib3B0aW9uQ29ycmVjdCIsIm9wdGlvbkluY29ycmVjdCIsIm9uUHJlc3MiLCJkaXNhYmxlZCIsImFjdGl2ZU9wYWNpdHkiLCJvcHRpb25Db250ZW50Iiwib3B0aW9uTGV0dGVyQ29udGFpbmVyIiwib3B0aW9uTGV0dGVyIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwib3B0aW9uVGV4dCIsIm9wdGlvbkNvcnJlY3RUZXh0Iiwib3B0aW9uSW5jb3JyZWN0VGV4dCIsIklvbmljb25zIiwibmFtZSIsInNpemUiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBSZWFkaW5nUXVlc3Rpb25DYXJkL2luZGV4LmpzIC0gVkVSU0lPTiBTSU1QTEVcclxuaW1wb3J0IHsgVmlldywgVGV4dCwgVG91Y2hhYmxlT3BhY2l0eSwgQW5pbWF0ZWQgfSBmcm9tIFwicmVhY3QtbmF0aXZlXCI7XHJcbmltcG9ydCB7IHVzZUNhbGxiYWNrIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IElvbmljb25zIH0gZnJvbSBcIkBleHBvL3ZlY3Rvci1pY29uc1wiO1xyXG5pbXBvcnQgSGVyb0NhcmQgZnJvbSBcIi4uLy4uLy4uLy4uL2NvbXBvbmVudHMvdWkvSGVyb0NhcmRcIjtcclxuaW1wb3J0IENvbnRlbnRTZWN0aW9uIGZyb20gXCIuLi8uLi8uLi8uLi9jb21wb25lbnRzL3VpL0NvbnRlbnRTZWN0aW9uXCI7XHJcbmltcG9ydCBjcmVhdGVTdHlsZXMgZnJvbSBcIi4vc3R5bGVcIjtcclxuXHJcbi8qKlxyXG4gKiDinZMgUmVhZGluZ1F1ZXN0aW9uQ2FyZCAtIFZlcnNpb24gU2ltcGxlICYgRWZmaWNhY2VcclxuICog4p2MIENvbmZldHRpIGFuaW1hdGlvbnNcclxuICog4p2MIENvbXBsZXggbWljcm8taW50ZXJhY3Rpb25zXHJcbiAqIOKchSBDbGVhbiwgZnVuY3Rpb25hbCwgbWFpbnRhaW5hYmxlXHJcbiAqL1xyXG5jb25zdCBSZWFkaW5nUXVlc3Rpb25DYXJkID0gKHtcclxuICBxdWVzdGlvbixcclxuICBxdWVzdGlvbkluZGV4LFxyXG4gIHNlbGVjdGVkQW5zd2VyLFxyXG4gIG9uU2VsZWN0QW5zd2VyLFxyXG4gIHNob3dGZWVkYmFjayxcclxuICBmYWRlQW5pbSxcclxuICBzbGlkZUFuaW0sXHJcbiAgbGV2ZWxDb2xvciA9IFwiIzNiODJmNlwiLFxyXG59KSA9PiB7XHJcbiAgY29uc3Qgc3R5bGVzID0gY3JlYXRlU3R5bGVzKGxldmVsQ29sb3IpO1xyXG5cclxuICBpZiAoIXF1ZXN0aW9uKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgLy8gRGV0ZXJtaW5lIG9wdGlvbiBzdGF0ZVxyXG4gIGNvbnN0IGdldE9wdGlvblN0YXRlID0gKG9wdGlvbkluZGV4KSA9PiB7XHJcbiAgICBpZiAoIXNob3dGZWVkYmFjaykge1xyXG4gICAgICByZXR1cm4gc2VsZWN0ZWRBbnN3ZXIgPT09IG9wdGlvbkluZGV4ID8gJ3NlbGVjdGVkJyA6ICdkZWZhdWx0JztcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKG9wdGlvbkluZGV4ID09PSBxdWVzdGlvbi5jb3JyZWN0QW5zd2VyKSB7XHJcbiAgICAgIHJldHVybiAnY29ycmVjdCc7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmIChzZWxlY3RlZEFuc3dlciA9PT0gb3B0aW9uSW5kZXggJiYgc2VsZWN0ZWRBbnN3ZXIgIT09IHF1ZXN0aW9uLmNvcnJlY3RBbnN3ZXIpIHtcclxuICAgICAgcmV0dXJuICdpbmNvcnJlY3QnO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gJ2RlZmF1bHQnO1xyXG4gIH07XHJcblxyXG4gIC8vIEhhbmRsZXIgc3RhYmxlIHBvdXIgbGEgc8OpbGVjdGlvbiBkJ3VuZSBvcHRpb25cclxuICBjb25zdCBoYW5kbGVPcHRpb25QcmVzc0NhbGxiYWNrID0gdXNlQ2FsbGJhY2soXHJcbiAgICAob3B0aW9uSW5kZXgpID0+ICgpID0+IHtcclxuICAgICAgaWYgKCFzaG93RmVlZGJhY2spIHtcclxuICAgICAgICBvblNlbGVjdEFuc3dlcihvcHRpb25JbmRleCk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBbb25TZWxlY3RBbnN3ZXIsIHNob3dGZWVkYmFja11cclxuICApO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPEFuaW1hdGVkLlZpZXdcclxuICAgICAgc3R5bGU9e1tcclxuICAgICAgICBzdHlsZXMuY29udGFpbmVyLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIG9wYWNpdHk6IGZhZGVBbmltLFxyXG4gICAgICAgICAgdHJhbnNmb3JtOiBbeyB0cmFuc2xhdGVZOiBzbGlkZUFuaW0gfV0sXHJcbiAgICAgICAgfSxcclxuICAgICAgXX1cclxuICAgID5cclxuICAgICAgey8qIFF1ZXN0aW9uIEhlYWRlciAqL31cclxuICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5xdWVzdGlvbkhlYWRlcn0+XHJcbiAgICAgICAgPEhlcm9DYXJkIFxyXG4gICAgICAgICAgY29udGVudD17YFF1ZXN0aW9uICR7cXVlc3Rpb25JbmRleCArIDF9YH1cclxuICAgICAgICAgIGZvbnRTaXplPXsxOH1cclxuICAgICAgICAgIGxldmVsQ29sb3I9e2xldmVsQ29sb3J9XHJcbiAgICAgICAgICBzaG93VW5kZXJsaW5lPXtmYWxzZX1cclxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcj1cIiNGOEY5RkFcIlxyXG4gICAgICAgIC8+XHJcbiAgICAgIDwvVmlldz5cclxuICAgICAgXHJcbiAgICAgIHsvKiBRdWVzdGlvbiBUZXh0ICovfVxyXG4gICAgICA8Q29udGVudFNlY3Rpb25cclxuICAgICAgICB0aXRsZT1cIuKdkyBRdWVzdGlvblwiXHJcbiAgICAgICAgY29udGVudD17cXVlc3Rpb24udGV4dH1cclxuICAgICAgICBsZXZlbENvbG9yPXtsZXZlbENvbG9yfVxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcj1cIndoaXRlXCJcclxuICAgICAgICBjb250ZW50U3R5bGU9e3tcclxuICAgICAgICAgIGZvbnRTaXplOiAxOCxcclxuICAgICAgICAgIGZvbnRXZWlnaHQ6IFwiNjAwXCIsXHJcbiAgICAgICAgICBjb2xvcjogXCIjMWUyOTNiXCIsXHJcbiAgICAgICAgICBsaW5lSGVpZ2h0OiAyNixcclxuICAgICAgICB9fVxyXG4gICAgICAvPlxyXG5cclxuICAgICAgey8qIE9wdGlvbnMgKi99XHJcbiAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMub3B0aW9uc0NvbnRhaW5lcn0+XHJcbiAgICAgICAgPFRleHQgc3R5bGU9e1tzdHlsZXMub3B0aW9uc1RpdGxlLCB7IGNvbG9yOiBsZXZlbENvbG9yIH1dfT5cclxuICAgICAgICAgIPCfkqEgQ2hvb3NlIHlvdXIgYW5zd2VyOlxyXG4gICAgICAgIDwvVGV4dD5cclxuICAgICAgICBcclxuICAgICAgICB7cXVlc3Rpb24ub3B0aW9ucy5tYXAoKG9wdGlvbiwgaW5kZXgpID0+IHtcclxuICAgICAgICAgIGNvbnN0IG9wdGlvblN0YXRlID0gZ2V0T3B0aW9uU3RhdGUoaW5kZXgpO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8VG91Y2hhYmxlT3BhY2l0eVxyXG4gICAgICAgICAgICAgIGtleT17b3B0aW9ufVxyXG4gICAgICAgICAgICAgIHN0eWxlPXtbXHJcbiAgICAgICAgICAgICAgICBzdHlsZXMub3B0aW9uQnV0dG9uLFxyXG4gICAgICAgICAgICAgICAgb3B0aW9uU3RhdGUgPT09ICdzZWxlY3RlZCcgJiYgeyBcclxuICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IGxldmVsQ29sb3IsXHJcbiAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogYCR7bGV2ZWxDb2xvcn0wOGAsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgb3B0aW9uU3RhdGUgPT09ICdjb3JyZWN0JyAmJiBzdHlsZXMub3B0aW9uQ29ycmVjdCxcclxuICAgICAgICAgICAgICAgIG9wdGlvblN0YXRlID09PSAnaW5jb3JyZWN0JyAmJiBzdHlsZXMub3B0aW9uSW5jb3JyZWN0LFxyXG4gICAgICAgICAgICAgIF19XHJcbiAgICAgICAgICAgICAgb25QcmVzcz17aGFuZGxlT3B0aW9uUHJlc3NDYWxsYmFjayhpbmRleCl9XHJcbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e3Nob3dGZWVkYmFja31cclxuICAgICAgICAgICAgICBhY3RpdmVPcGFjaXR5PXswLjh9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLm9wdGlvbkNvbnRlbnR9PlxyXG4gICAgICAgICAgICAgICAgey8qIE9wdGlvbiBMZXR0ZXIgKi99XHJcbiAgICAgICAgICAgICAgICA8VmlldyBcclxuICAgICAgICAgICAgICAgICAgc3R5bGU9e1tcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZXMub3B0aW9uTGV0dGVyQ29udGFpbmVyLFxyXG4gICAgICAgICAgICAgICAgICAgIHsgYmFja2dyb3VuZENvbG9yOiBgJHtsZXZlbENvbG9yfTE1YCB9LFxyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvblN0YXRlID09PSAnY29ycmVjdCcgJiYgeyBiYWNrZ3JvdW5kQ29sb3I6ICcjMTBiOTgxMjAnIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uU3RhdGUgPT09ICdpbmNvcnJlY3QnICYmIHsgYmFja2dyb3VuZENvbG9yOiAnI2VmNDQ0NDIwJyB9LFxyXG4gICAgICAgICAgICAgICAgICBdfVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICA8VGV4dCBzdHlsZT17W1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlcy5vcHRpb25MZXR0ZXIsIFxyXG4gICAgICAgICAgICAgICAgICAgIHsgY29sb3I6IGxldmVsQ29sb3IgfSxcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25TdGF0ZSA9PT0gJ2NvcnJlY3QnICYmIHsgY29sb3I6ICcjMTBiOTgxJyB9LFxyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvblN0YXRlID09PSAnaW5jb3JyZWN0JyAmJiB7IGNvbG9yOiAnI2VmNDQ0NCcgfSxcclxuICAgICAgICAgICAgICAgICAgXX0+XHJcbiAgICAgICAgICAgICAgICAgICAge1N0cmluZy5mcm9tQ2hhckNvZGUoNjUgKyBpbmRleCl9XHJcbiAgICAgICAgICAgICAgICAgIDwvVGV4dD5cclxuICAgICAgICAgICAgICAgIDwvVmlldz5cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgey8qIE9wdGlvbiBUZXh0ICovfVxyXG4gICAgICAgICAgICAgICAgPFRleHRcclxuICAgICAgICAgICAgICAgICAgc3R5bGU9e1tcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZXMub3B0aW9uVGV4dCxcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25TdGF0ZSA9PT0gJ3NlbGVjdGVkJyAmJiB7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGxldmVsQ29sb3IsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogXCI2MDBcIiBcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvblN0YXRlID09PSAnY29ycmVjdCcgJiYgc3R5bGVzLm9wdGlvbkNvcnJlY3RUZXh0LFxyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvblN0YXRlID09PSAnaW5jb3JyZWN0JyAmJiBzdHlsZXMub3B0aW9uSW5jb3JyZWN0VGV4dCxcclxuICAgICAgICAgICAgICAgICAgXX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAge29wdGlvbn1cclxuICAgICAgICAgICAgICAgIDwvVGV4dD5cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgey8qIFN0YXR1cyBJY29uICovfVxyXG4gICAgICAgICAgICAgICAge3Nob3dGZWVkYmFjayAmJiAoXHJcbiAgICAgICAgICAgICAgICAgIDxWaWV3PlxyXG4gICAgICAgICAgICAgICAgICAgIHtvcHRpb25TdGF0ZSA9PT0gJ2NvcnJlY3QnICYmIChcclxuICAgICAgICAgICAgICAgICAgICAgIDxJb25pY29ucyBuYW1lPVwiY2hlY2ttYXJrLWNpcmNsZVwiIHNpemU9ezI0fSBjb2xvcj1cIiMxMGI5ODFcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgICAgICAgICAge29wdGlvblN0YXRlID09PSAnaW5jb3JyZWN0JyAmJiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICA8SW9uaWNvbnMgbmFtZT1cImNsb3NlLWNpcmNsZVwiIHNpemU9ezI0fSBjb2xvcj1cIiNlZjQ0NDRcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgICAgICAgIDwvVmlldz5cclxuICAgICAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgICAgPC9WaWV3PlxyXG4gICAgICAgICAgICA8L1RvdWNoYWJsZU9wYWNpdHk+XHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH0pfVxyXG4gICAgICA8L1ZpZXc+XHJcbiAgICA8L0FuaW1hdGVkLlZpZXc+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJlYWRpbmdRdWVzdGlvbkNhcmQ7Il0sIm1hcHBpbmdzIjoiOzs7OztBQUNBLElBQUFBLFlBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLE1BQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFlBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLFNBQUEsR0FBQUMsc0JBQUEsQ0FBQUosT0FBQTtBQUNBLElBQUFLLGVBQUEsR0FBQUQsc0JBQUEsQ0FBQUosT0FBQTtBQUNBLElBQUFNLE1BQUEsR0FBQUYsc0JBQUEsQ0FBQUosT0FBQTtBQUFtQyxJQUFBTyxXQUFBLEdBQUFQLE9BQUE7QUFRbkMsSUFBTVEsbUJBQW1CLEdBQUcsU0FBdEJBLG1CQUFtQkEsQ0FBQUMsSUFBQSxFQVNuQjtFQUFBLElBUkpDLFFBQVEsR0FBQUQsSUFBQSxDQUFSQyxRQUFRO0lBQ1JDLGFBQWEsR0FBQUYsSUFBQSxDQUFiRSxhQUFh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