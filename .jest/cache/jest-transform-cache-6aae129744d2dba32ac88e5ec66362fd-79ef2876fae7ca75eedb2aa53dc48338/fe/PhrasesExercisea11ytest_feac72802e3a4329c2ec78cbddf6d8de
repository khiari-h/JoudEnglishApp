5514fa02f8f963e8ff542342c49cd245
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    },
    useFocusEffect: jest.fn(function () {})
  };
});
_getJestObj().mock('../../src/utils/phrases/phrasesDataHelper', function () {
  return {
    getLevelColor: jest.fn(function () {
      return '#007AFF';
    }),
    getPhrasesData: jest.fn(function () {
      return {
        categories: [{
          id: 0,
          name: 'Greetings'
        }],
        phrases: [{
          categoryId: 0,
          text: 'Hello'
        }]
      };
    }),
    loadPhrasesData: jest.fn((0, _asyncToGenerator2.default)(function* () {
      return {
        categories: [{
          id: 0,
          name: 'Greetings'
        }],
        phrases: [{
          categoryId: 0,
          text: 'Hello'
        }]
      };
    }))
  };
});
_getJestObj().mock('../../src/screens/exercises/phrases/hooks/usePhrases', function () {
  return {
    __esModule: true,
    default: jest.fn(function () {
      return {
        categoryIndex: 0,
        phraseIndex: 0,
        showTranslation: false,
        completedPhrases: {},
        loaded: true,
        showDetailedProgress: false,
        currentPhrase: {
          text: 'Hello'
        },
        currentPhrases: [{
          text: 'Hello'
        }],
        totalPhrasesInCategory: 1,
        hasValidData: true,
        changeCategory: jest.fn(),
        toggleTranslation: jest.fn(),
        toggleDetailedProgress: jest.fn(),
        handleNext: jest.fn(function () {
          return {
            completed: false
          };
        }),
        handlePrevious: jest.fn(),
        canGoToPrevious: false,
        isLastPhraseInCategory: false,
        stats: {
          completionProgress: 0,
          completedPhrasesCount: 0
        },
        display: {
          categories: [{
            name: 'Greetings'
          }]
        }
      };
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _phrases = _interopRequireDefault(require("../../src/screens/exercises/phrases"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('PhrasesExercise accessibility', function () {
  it('should render navigation buttons as role button', function () {
    var params = {
      level: '1'
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_phrases.default, {
        route: {
          params: params
        }
      })),
      getAllByRole = _render.getAllByRole;
    var buttons = getAllByRole('button');
    expect(buttons.length).toBeGreaterThan(0);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJyb3V0ZXIiLCJwdXNoIiwiamVzdCIsImZuIiwidXNlRm9jdXNFZmZlY3QiLCJnZXRMZXZlbENvbG9yIiwiZ2V0UGhyYXNlc0RhdGEiLCJjYXRlZ29yaWVzIiwiaWQiLCJuYW1lIiwicGhyYXNlcyIsImNhdGVnb3J5SWQiLCJ0ZXh0IiwibG9hZFBocmFzZXNEYXRhIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiZGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJjYXRlZ29yeUluZGV4IiwicGhyYXNlSW5kZXgiLCJzaG93VHJhbnNsYXRpb24iLCJjb21wbGV0ZWRQaHJhc2VzIiwibG9hZGVkIiwic2hvd0RldGFpbGVkUHJvZ3Jlc3MiLCJjdXJyZW50UGhyYXNlIiwiY3VycmVudFBocmFzZXMiLCJ0b3RhbFBocmFzZXNJbkNhdGVnb3J5IiwiaGFzVmFsaWREYXRhIiwiY2hhbmdlQ2F0ZWdvcnkiLCJ0b2dnbGVUcmFuc2xhdGlvbiIsInRvZ2dsZURldGFpbGVkUHJvZ3Jlc3MiLCJoYW5kbGVOZXh0IiwiY29tcGxldGVkIiwiaGFuZGxlUHJldmlvdXMiLCJjYW5Hb1RvUHJldmlvdXMiLCJpc0xhc3RQaHJhc2VJbkNhdGVnb3J5Iiwic3RhdHMiLCJjb21wbGV0aW9uUHJvZ3Jlc3MiLCJjb21wbGV0ZWRQaHJhc2VzQ291bnQiLCJkaXNwbGF5IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfcGhyYXNlcyIsIl9qc3hSdW50aW1lIiwiX3JlcXVpcmUiLCJkZXNjcmliZSIsIml0IiwicGFyYW1zIiwibGV2ZWwiLCJfcmVuZGVyIiwicmVuZGVyIiwianN4Iiwicm91dGUiLCJnZXRBbGxCeVJvbGUiLCJidXR0b25zIiwiZXhwZWN0IiwibGVuZ3RoIiwidG9CZUdyZWF0ZXJUaGFuIl0sInNvdXJjZXMiOlsiUGhyYXNlc0V4ZXJjaXNlLmExMXkudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCBQaHJhc2VzRXhlcmNpc2UgZnJvbSAnLi4vLi4vc3JjL3NjcmVlbnMvZXhlcmNpc2VzL3BocmFzZXMnO1xyXG5cclxuamVzdC5tb2NrKCdleHBvLXJvdXRlcicsICgpID0+ICh7IHJvdXRlcjogeyBwdXNoOiBqZXN0LmZuKCkgfSwgdXNlRm9jdXNFZmZlY3Q6IGplc3QuZm4oKCkgPT4ge30pIH0pKTtcclxuXHJcbmplc3QubW9jaygnLi4vLi4vc3JjL3V0aWxzL3BocmFzZXMvcGhyYXNlc0RhdGFIZWxwZXInLCAoKSA9PiAoe1xyXG4gIGdldExldmVsQ29sb3I6IGplc3QuZm4oKCkgPT4gJyMwMDdBRkYnKSxcclxuICBnZXRQaHJhc2VzRGF0YTogamVzdC5mbigoKSA9PiAoe1xyXG4gICAgY2F0ZWdvcmllczogW3sgaWQ6IDAsIG5hbWU6ICdHcmVldGluZ3MnIH1dLFxyXG4gICAgcGhyYXNlczogW3sgY2F0ZWdvcnlJZDogMCwgdGV4dDogJ0hlbGxvJyB9XVxyXG4gIH0pKSxcclxuICBsb2FkUGhyYXNlc0RhdGE6IGplc3QuZm4oYXN5bmMgKCkgPT4gKHtcclxuICAgIGNhdGVnb3JpZXM6IFt7IGlkOiAwLCBuYW1lOiAnR3JlZXRpbmdzJyB9XSxcclxuICAgIHBocmFzZXM6IFt7IGNhdGVnb3J5SWQ6IDAsIHRleHQ6ICdIZWxsbycgfV1cclxuICB9KSksXHJcbn0pKTtcclxuXHJcbmplc3QubW9jaygnLi4vLi4vc3JjL3NjcmVlbnMvZXhlcmNpc2VzL3BocmFzZXMvaG9va3MvdXNlUGhyYXNlcycsICgpID0+ICh7XHJcbiAgX19lc01vZHVsZTogdHJ1ZSxcclxuICBkZWZhdWx0OiBqZXN0LmZuKCgpID0+ICh7XHJcbiAgICBjYXRlZ29yeUluZGV4OiAwLFxyXG4gICAgcGhyYXNlSW5kZXg6IDAsXHJcbiAgICBzaG93VHJhbnNsYXRpb246IGZhbHNlLFxyXG4gICAgY29tcGxldGVkUGhyYXNlczoge30sXHJcbiAgICBsb2FkZWQ6IHRydWUsXHJcbiAgICBzaG93RGV0YWlsZWRQcm9ncmVzczogZmFsc2UsXHJcbiAgICBjdXJyZW50UGhyYXNlOiB7IHRleHQ6ICdIZWxsbycgfSxcclxuICAgIGN1cnJlbnRQaHJhc2VzOiBbeyB0ZXh0OiAnSGVsbG8nIH1dLFxyXG4gICAgdG90YWxQaHJhc2VzSW5DYXRlZ29yeTogMSxcclxuICAgIGhhc1ZhbGlkRGF0YTogdHJ1ZSxcclxuICAgIGNoYW5nZUNhdGVnb3J5OiBqZXN0LmZuKCksXHJcbiAgICB0b2dnbGVUcmFuc2xhdGlvbjogamVzdC5mbigpLFxyXG4gICAgdG9nZ2xlRGV0YWlsZWRQcm9ncmVzczogamVzdC5mbigpLFxyXG4gICAgaGFuZGxlTmV4dDogamVzdC5mbigoKSA9PiAoeyBjb21wbGV0ZWQ6IGZhbHNlIH0pKSxcclxuICAgIGhhbmRsZVByZXZpb3VzOiBqZXN0LmZuKCksXHJcbiAgICBjYW5Hb1RvUHJldmlvdXM6IGZhbHNlLFxyXG4gICAgaXNMYXN0UGhyYXNlSW5DYXRlZ29yeTogZmFsc2UsXHJcbiAgICBzdGF0czogeyBjb21wbGV0aW9uUHJvZ3Jlc3M6IDAsIGNvbXBsZXRlZFBocmFzZXNDb3VudDogMCB9LFxyXG4gICAgZGlzcGxheTogeyBjYXRlZ29yaWVzOiBbeyBuYW1lOiAnR3JlZXRpbmdzJyB9XSB9LFxyXG4gIH0pKSxcclxufSkpO1xyXG5cclxuZGVzY3JpYmUoJ1BocmFzZXNFeGVyY2lzZSBhY2Nlc3NpYmlsaXR5JywgKCkgPT4ge1xyXG4gIGl0KCdzaG91bGQgcmVuZGVyIG5hdmlnYXRpb24gYnV0dG9ucyBhcyByb2xlIGJ1dHRvbicsICgpID0+IHtcclxuICAgIGNvbnN0IHBhcmFtcyA9IHsgbGV2ZWw6ICcxJyB9O1xyXG4gICAgY29uc3QgeyBnZXRBbGxCeVJvbGUgfSA9IHJlbmRlcig8UGhyYXNlc0V4ZXJjaXNlIHJvdXRlPXt7IHBhcmFtcyB9fSAvPik7XHJcbiAgICBjb25zdCBidXR0b25zID0gZ2V0QWxsQnlSb2xlKCdidXR0b24nKTtcclxuICAgIGV4cGVjdChidXR0b25zLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcblxyXG4iXSwibWFwcGluZ3MiOiJBQUlBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxhQUFhLEVBQUU7RUFBQSxPQUFPO0lBQUVDLE1BQU0sRUFBRTtNQUFFQyxJQUFJLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0lBQUUsQ0FBQztJQUFFQyxjQUFjLEVBQUVGLElBQUksQ0FBQ0MsRUFBRSxDQUFDLFlBQU0sQ0FBQyxDQUFDO0VBQUUsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUVwR0wsV0FBQSxHQUFLQyxJQUFJLENBQUMsMkNBQTJDLEVBQUU7RUFBQSxPQUFPO0lBQzVETSxhQUFhLEVBQUVILElBQUksQ0FBQ0MsRUFBRSxDQUFDO01BQUEsT0FBTSxTQUFTO0lBQUEsRUFBQztJQUN2Q0csY0FBYyxFQUFFSixJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFBLE9BQU87UUFDN0JJLFVBQVUsRUFBRSxDQUFDO1VBQUVDLEVBQUUsRUFBRSxDQUFDO1VBQUVDLElBQUksRUFBRTtRQUFZLENBQUMsQ0FBQztRQUMxQ0MsT0FBTyxFQUFFLENBQUM7VUFBRUMsVUFBVSxFQUFFLENBQUM7VUFBRUMsSUFBSSxFQUFFO1FBQVEsQ0FBQztNQUM1QyxDQUFDO0lBQUEsQ0FBQyxDQUFDO0lBQ0hDLGVBQWUsRUFBRVgsSUFBSSxDQUFDQyxFQUFFLEtBQUFXLGtCQUFBLENBQUFDLE9BQUEsRUFBQztNQUFBLE9BQWE7UUFDcENSLFVBQVUsRUFBRSxDQUFDO1VBQUVDLEVBQUUsRUFBRSxDQUFDO1VBQUVDLElBQUksRUFBRTtRQUFZLENBQUMsQ0FBQztRQUMxQ0MsT0FBTyxFQUFFLENBQUM7VUFBRUMsVUFBVSxFQUFFLENBQUM7VUFBRUMsSUFBSSxFQUFFO1FBQVEsQ0FBQztNQUM1QyxDQUFDO0lBQUEsQ0FB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