fdc27ce14e608c9c498571b180fd7169
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.CONTAINER_SAFE_EDGES = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _reactNative = require("react-native");
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _style = _interopRequireDefault(require("./style"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "style", "withScrollView", "safeArea", "statusBarColor", "statusBarStyle", "withStatusBar", "withPadding", "backgroundColor", "scrollViewProps", "safeAreaEdges"];
var Container = function Container(_ref) {
  var children = _ref.children,
    style = _ref.style,
    _ref$withScrollView = _ref.withScrollView,
    withScrollView = _ref$withScrollView === void 0 ? false : _ref$withScrollView,
    _ref$safeArea = _ref.safeArea,
    safeArea = _ref$safeArea === void 0 ? true : _ref$safeArea,
    _ref$statusBarColor = _ref.statusBarColor,
    statusBarColor = _ref$statusBarColor === void 0 ? "#FFFFFF" : _ref$statusBarColor,
    _ref$statusBarStyle = _ref.statusBarStyle,
    statusBarStyle = _ref$statusBarStyle === void 0 ? "dark-content" : _ref$statusBarStyle,
    _ref$withStatusBar = _ref.withStatusBar,
    withStatusBar = _ref$withStatusBar === void 0 ? true : _ref$withStatusBar,
    _ref$withPadding = _ref.withPadding,
    withPadding = _ref$withPadding === void 0 ? true : _ref$withPadding,
    _ref$backgroundColor = _ref.backgroundColor,
    backgroundColor = _ref$backgroundColor === void 0 ? "#F9FAFB" : _ref$backgroundColor,
    _ref$scrollViewProps = _ref.scrollViewProps,
    scrollViewProps = _ref$scrollViewProps === void 0 ? {} : _ref$scrollViewProps,
    _ref$safeAreaEdges = _ref.safeAreaEdges,
    safeAreaEdges = _ref$safeAreaEdges === void 0 ? ['top', 'left', 'right'] : _ref$safeAreaEdges,
    props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var WrapperComponent = safeArea ? _reactNativeSafeAreaContext.SafeAreaView : _reactNative.View;
  var containerStyle = [_style.default.container, {
    backgroundColor: backgroundColor
  }, withPadding && _style.default.withPadding, style];
  var safeAreaProps = safeArea ? Object.assign({
    edges: safeAreaEdges
  }, props) : {};
  var content = (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [withStatusBar && (0, _jsxRuntime.jsx)(_reactNative.StatusBar, {
      backgroundColor: statusBarColor,
      barStyle: statusBarStyle
    }), withScrollView ? (0, _jsxRuntime.jsx)(_reactNative.ScrollView, Object.assign({
      style: _style.default.scrollView,
      contentContainerStyle: [_style.default.scrollViewContent, {
        paddingBottom: safeArea ? 34 : 0
      }],
      showsVerticalScrollIndicator: false
    }, scrollViewProps, {
      children: children
    })) : children]
  });
  return (0, _jsxRuntime.jsx)(WrapperComponent, Object.assign({
    style: containerStyle
  }, safeAreaProps, {
    children: content
  }));
};
Container.propTypes = {
  children: _propTypes.default.node,
  style: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array]),
  withScrollView: _propTypes.default.bool,
  safeArea: _propTypes.default.bool,
  statusBarColor: _propTypes.default.string,
  statusBarStyle: _propTypes.default.oneOf(['default', 'light-content', 'dark-content']),
  withStatusBar: _propTypes.default.bool,
  withPadding: _propTypes.default.bool,
  backgroundColor: _propTypes.default.string,
  scrollViewProps: _propTypes.default.object,
  safeAreaEdges: _propTypes.default.arrayOf(_propTypes.default.oneOf(['top', 'bottom', 'left', 'right']))
};
var CONTAINER_SAFE_EDGES = exports.CONTAINER_SAFE_EDGES = {
  ALL: ['top', 'bottom', 'left', 'right'],
  NO_BOTTOM: ['top', 'left', 'right'],
  NO_TOP: ['bottom', 'left', 'right'],
  HORIZONTAL: ['left', 'right'],
  NONE: []
};
var _default = exports.default = Container;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,