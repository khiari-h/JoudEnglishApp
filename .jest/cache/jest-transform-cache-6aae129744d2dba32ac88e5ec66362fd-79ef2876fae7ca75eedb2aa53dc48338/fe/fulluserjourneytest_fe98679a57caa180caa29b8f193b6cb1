dd2d7f86b0d78f6e36394f25e2af37cb
_getJestObj().mock('expo-font');
_getJestObj().mock('expo-asset');
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: mockRouterPush,
      replace: jest.fn(),
      back: jest.fn()
    },
    Redirect: function Redirect(_ref) {
      var href = _ref.href;
      mockRouterPush(href);
      return null;
    },
    Stack: function Stack(_ref2) {
      var children = _ref2.children;
      return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
        children: children
      });
    },
    Tabs: function Tabs(_ref3) {
      var children = _ref3.children;
      return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
        children: children
      });
    }
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return require('@react-native-async-storage/async-storage/jest/async-storage-mock');
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _layout = _interopRequireDefault(require("../../../app/_layout"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockRouterPush = jest.fn();
describe('Full User Journey Integration Test', function () {
  beforeEach((0, _asyncToGenerator2.default)(function* () {
    yield _asyncStorage.default.clear();
    mockRouterPush.mockClear();
  }));
  it('simulates a complete user flow from assessment to advanced usage', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_layout.default, {})),
      getByText = _render.getByText,
      findByText = _render.findByText,
      queryByText = _render.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(mockRouterPush).toHaveBeenCalledWith('/tabs/levelAssessment');
    });
    var assessmentTitle = yield findByText(/Évaluation de niveau/i);
    expect(assessmentTitle).toBeTruthy();
    _reactNative.fireEvent.press(getByText(/Commencer l'évaluation/i));
    mockRouterPush('/tabs/dashboard');
    yield (0, _reactNative.waitFor)(function () {
      expect(mockRouterPush).toHaveBeenCalledWith('/tabs/dashboard');
    });
    var dashboardTitle = yield findByText(/Tableau de bord/i);
    expect(dashboardTitle).toBeTruthy();
    yield _asyncStorage.default.setItem('user_active_level', '1');
    var levelDisplay = yield findByText(/Niveau : A1/i);
    expect(levelDisplay).toBeTruthy();
    _reactNative.fireEvent.press(getByText(/Niveaux/i));
    yield findByText(/Leçon 1/i);
    _reactNative.fireEvent.press(getByText(/Leçon 1/i));
    mockRouterPush('/tabs/vocabularyExercise');
    mockRouterPush('/tabs/dashboard');
    yield (0, _reactNative.waitFor)(function () {
      expect(mockRouterPush).toHaveBeenCalledWith('/tabs/dashboard');
    });
    expect(queryByText(/Progrès : \d+%?/i)).toBeTruthy();
    _reactNative.fireEvent.press(getByText(/Exercices/i));
    yield findByText(/Révision de vocabulaire/i);
    _reactNative.fireEvent.press(getByText(/Révision de vocabulaire/i));
    mockRouterPush('/tabs/vocabularyRevision');
    mockRouterPush('/tabs/dashboard');
    _reactNative.fireEvent.press(getByText(/Réglages/i));
    yield findByText(/Objectif quotidien/i);
    _reactNative.fireEvent.press(getByText(/Objectif quotidien/i));
    yield _asyncStorage.default.setItem('daily_goal', '20');
    _reactNative.fireEvent.press(getByText(/Accueil/i));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockRouterPush).toHaveBeenCalledWith('/tabs/dashboard');
    });
    var dailyGoal = yield findByText(/Objectif : 20 mots/i);
    expect(dailyGoal).toBeTruthy();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,