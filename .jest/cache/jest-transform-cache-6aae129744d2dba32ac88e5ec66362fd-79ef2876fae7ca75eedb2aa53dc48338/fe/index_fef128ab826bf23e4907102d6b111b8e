c7b628d11449ed2c5923b561622bc8e2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _expoLinearGradient = require("expo-linear-gradient");
var _expoRouter = require("expo-router");
var _ThemeContext = require("../../contexts/ThemeContext");
var _ProgressContext = require("../../contexts/ProgressContext");
var _CurrentLevelContext = require("../../contexts/CurrentLevelContext");
var _useRealTimeProgress2 = _interopRequireDefault(require("../../hooks/useRealTimeProgress"));
var _useDashboardLevel2 = require("./hooks/useDashboardLevel");
var _useDashboardState2 = require("./hooks/useDashboardState");
var _useLastActivity2 = _interopRequireDefault(require("../../hooks/useLastActivity"));
var _Container = _interopRequireWildcard(require("../../components/layout/Container"));
var _ModernHeader = _interopRequireDefault(require("./components/ModernHeader"));
var _HeroContinueSection = _interopRequireDefault(require("./components/HeroContinueSection"));
var _QuickActions = _interopRequireDefault(require("./components/QuickActions"));
var _SimpleMetrics = _interopRequireDefault(require("./components/SimpleMetrics"));
var _LearningProgress = _interopRequireDefault(require("./components/LearningProgress"));
var _RevisionOrchestrator = _interopRequireDefault(require("../VocabularyRevision/RevisionOrchestrator"));
var _constants = require("../../utils/constants");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var Dashboard = function Dashboard() {
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    refreshKey = _useState2[0],
    setRefreshKey = _useState2[1];
  var themeContext = (0, _react.useContext)(_ThemeContext.ThemeContext);
  var progressData = (0, _ProgressContext.useProgress)();
  var _useRealTimeProgress = (0, _useRealTimeProgress2.default)(),
    getLevelProgress = _useRealTimeProgress.getLevelProgress,
    refreshProgress = _useRealTimeProgress.refresh;
  var colors = (themeContext == null ? void 0 : themeContext.colors) || {
    background: "#F8FAFC",
    primary: "#3B82F6",
    surface: "#FFFFFF",
    text: "#1F2937",
    textSecondary: "#6B7280"
  };
  var _useDashboardLevel = (0, _useDashboardLevel2.useDashboardLevel)({
      progress: progressData.progress
    }),
    currentLevel = _useDashboardLevel.currentLevel,
    handleChangeActiveLevel = _useDashboardLevel.handleChangeActiveLevel,
    levelColor = _useDashboardLevel.levelColor;
  var _useCurrentLevel = (0, _CurrentLevelContext.useCurrentLevel)(),
    setCurrentLevel = _useCurrentLevel.setCurrentLevel;
  var _useLastActivity = (0, _useLastActivity2.default)(),
    lastActivity = _useLastActivity.lastActivity,
    isActivityLoading = _useLastActivity.isLoading,
    reloadActivity = _useLastActivity.reload;
  var _useDashboardState = (0, _useDashboardState2.useDashboardState)(reloadActivity),
    refreshing = _useDashboardState.refreshing,
    originalOnRefresh = _useDashboardState.onRefresh;
  var onRefresh = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    yield Promise.all([originalOnRefresh(), refreshProgress()]);
    setRefreshKey(function (prev) {
      return prev + 1;
    });
  }), [originalOnRefresh, refreshProgress]);
  (0, _expoRouter.useFocusEffect)((0, _react.useCallback)(function () {
    onRefresh();
  }, [onRefresh]));
  var handleContinue = (0, _react.useCallback)(function (activity) {
    if (activity === "levelSelection") {
      _expoRouter.router.push("/tabs/levelSelection");
      return;
    }
    var type = activity.type,
      level = activity.level,
      mode = activity.mode;
    var exercise = Object.values(_constants.EXERCISES).find(function (ex) {
      return ex.id === type;
    });
    if (exercise) {
      var params = {
        level: level
      };
      if (mode && type === "vocabulary") params.mode = mode;
      _expoRouter.router.push({
        pathname: exercise.route,
        params: params
      });
    }
  }, []);
  var handleChangeLevelVisual = (0, _react.useCallback)(function (levelId) {
    handleChangeActiveLevel(levelId);
    setCurrentLevel(levelId);
  }, [handleChangeActiveLevel, setCurrentLevel]);
  var handleLevelSelect = (0, _react.useCallback)(function (level) {
    setCurrentLevel(level);
    _expoRouter.router.push(`/tabs/exerciseSelection?level=${level}`);
  }, [setCurrentLevel]);
  var allLevels = ['1', '2', '3', '4', '5', '6', 'bonus'].map(function (levelKey) {
    var levelInfo = _constants.LANGUAGE_LEVELS[levelKey];
    var progress = getLevelProgress(levelKey);
    return {
      id: levelKey,
      title: levelInfo.title,
      color: levelInfo.color,
      icon: levelInfo.icon,
      progress: progress,
      isActive: levelKey === currentLevel,
      isCompleted: progress >= 100
    };
  });
  var globalProgress = getLevelProgress(currentLevel);
  if (progressData.isLoading) {
    return (0, _jsxRuntime.jsx)(_Container.default, {
      safeArea: true,
      backgroundColor: colors.background,
      withPadding: true,
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _style.default.loadingContainer,
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [_style.default.loadingText, {
            color: colors.primary
          }],
          children: "Chargement du tableau de bord..."
        })
      })
    });
  }
  var backgroundGradient = {
    colors: [`${levelColor}05`, colors.background, `${levelColor}08`],
    locations: [0, 0.6, 1]
  };
  return (0, _jsxRuntime.jsx)(_Container.default, {
    safeArea: true,
    safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.NO_BOTTOM,
    withScrollView: false,
    backgroundColor: "transparent",
    statusBarStyle: "light-content",
    withPadding: false,
    children: (0, _jsxRuntime.jsxs)(_expoLinearGradient.LinearGradient, {
      colors: backgroundGradient.colors,
      locations: backgroundGradient.locations,
      start: {
        x: 0,
        y: 0
      },
      end: {
        x: 0,
        y: 1
      },
      style: _style.default.container,
      children: [(0, _jsxRuntime.jsx)(_ModernHeader.default, {
        level: currentLevel,
        levelColor: levelColor
      }), (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
        style: _style.default.scrollView,
        contentContainerStyle: _style.default.scrollContent,
        showsVerticalScrollIndicator: false,
        refreshControl: (0, _jsxRuntime.jsx)(_reactNative.RefreshControl, {
          refreshing: refreshing,
          onRefresh: onRefresh,
          colors: [levelColor],
          tintColor: levelColor
        }),
        children: [(0, _jsxRuntime.jsx)(_HeroContinueSection.default, {
          lastActivity: lastActivity,
          onPress: handleContinue,
          accentColor: levelColor,
          isLoading: isActivityLoading
        }, `continue-${refreshKey}`), (0, _jsxRuntime.jsx)(_QuickActions.default, {
          currentLevel: currentLevel,
          progressContext: progressData,
          accentColor: levelColor
        }, `actions-${refreshKey}`), (0, _jsxRuntime.jsx)(_SimpleMetrics.default, {
          accentColor: levelColor,
          refreshKey: refreshKey
        }, `metrics-${refreshKey}`), (0, _jsxRuntime.jsx)(_LearningProgress.default, {
          globalProgress: globalProgress,
          levels: allLevels,
          currentLevel: currentLevel,
          onSelectLevel: handleLevelSelect,
          onChangeLevelVisual: handleChangeLevelVisual,
          primaryColor: levelColor
        }, `progress-${refreshKey}`), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: _style.default.bottomSpacer
        })]
      }), (0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {
        currentLevel: currentLevel,
        refreshKey: refreshKey
      }, `revision-${refreshKey}`)]
    })
  });
};
var _default = exports.default = Dashboard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlIiwiX2V4cG9MaW5lYXJHcmFkaWVudCIsIl9leHBvUm91dGVyIiwiX1RoZW1lQ29udGV4dCIsIl9Qcm9ncmVzc0NvbnRleHQiLCJfQ3VycmVudExldmVsQ29udGV4dCIsIl91c2VSZWFsVGltZVByb2dyZXNzMiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfdXNlRGFzaGJvYXJkTGV2ZWwyIiwiX3VzZURhc2hib2FyZFN0YXRlMiIsIl91c2VMYXN0QWN0aXZpdHkyIiwiX0NvbnRhaW5lciIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX01vZGVybkhlYWRlciIsIl9IZXJvQ29udGludWVTZWN0aW9uIiwiX1F1aWNrQWN0aW9ucyIsIl9TaW1wbGVNZXRyaWNzIiwiX0xlYXJuaW5nUHJvZ3Jlc3MiLCJfUmV2aXNpb25PcmNoZXN0cmF0b3IiLCJfY29uc3RhbnRzIiwiX3N0eWxlIiwiX2pzeFJ1bnRpbWUiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIkRhc2hib2FyZCIsIl91c2VTdGF0ZSIsInVzZVN0YXRlIiwiX3VzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5MiIsInJlZnJlc2hLZXkiLCJzZXRSZWZyZXNoS2V5IiwidGhlbWVDb250ZXh0IiwidXNlQ29udGV4dCIsIlRoZW1lQ29udGV4dCIsInByb2dyZXNzRGF0YSIsInVzZVByb2dyZXNzIiwiX3VzZVJlYWxUaW1lUHJvZ3Jlc3MiLCJ1c2VSZWFsVGltZVByb2dyZXNzIiwiZ2V0TGV2ZWxQcm9ncmVzcyIsInJlZnJlc2hQcm9ncmVzcyIsInJlZnJlc2giLCJjb2xvcnMiLCJiYWNrZ3JvdW5kIiwicHJpbWFyeSIsInN1cmZhY2UiLCJ0ZXh0IiwidGV4dFNlY29uZGFyeSIsIl91c2VEYXNoYm9hcmRMZXZlbCIsInVzZURhc2hib2FyZExldmVsIiwicHJvZ3Jlc3MiLCJjdXJyZW50TGV2ZWwiLCJoYW5kbGVDaGFuZ2VBY3RpdmVMZXZlbCIsImxldmVsQ29sb3IiLCJfdXNlQ3VycmVudExldmVsIiwidXNlQ3VycmVudExldmVsIiwic2V0Q3VycmVudExldmVsIiwiX3VzZUxhc3RBY3Rpdml0eSIsInVzZUxhc3RBY3Rpdml0eSIsImxhc3RBY3Rpdml0eSIsImlzQWN0aXZpdHlMb2FkaW5nIiwiaXNMb2FkaW5nIiwicmVsb2FkQWN0aXZpdHkiLCJyZWxvYWQiLCJfdXNlRGFzaGJvYXJkU3RhdGUiLCJ1c2VEYXNoYm9hcmRTdGF0ZSIsInJlZnJlc2hpbmciLCJvcmlnaW5hbE9uUmVmcmVzaCIsIm9uUmVmcmVzaCIsInVzZUNhbGxiYWNrIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiUHJvbWlzZSIsImFsbCIsInByZXYiLCJ1c2VGb2N1c0VmZmVjdCIsImhhbmRsZUNvbnRpbnVlIiwiYWN0aXZpdHkiLCJyb3V0ZXIiLCJwdXNoIiwidHlwZSIsImxldmVsIiwibW9kZSIsImV4ZXJjaXNlIiwidmFsdWVzIiwiRVhFUkNJU0VTIiwiZmluZCIsImV4IiwiaWQiLCJwYXJhbXMiLCJwYXRobmFtZSIsInJvdXRlIiwiaGFuZGxlQ2hhbmdlTGV2ZWxWaXN1YWwiLCJsZXZlbElkIiwiaGFuZGxlTGV2ZWxTZWxlY3QiLCJhbGxMZXZlbHMiLCJtYXAiLCJsZXZlbEtleSIsImxldmVsSW5mbyIsIkxBTkdVQUdFX0xFVkVMUyIsInRpdGxlIiwiY29sb3IiLCJpY29uIiwiaXNBY3RpdmUiLCJpc0NvbXBsZXRlZCIsImdsb2JhbFByb2dyZXNzIiwianN4Iiwic2FmZUFyZWEiLCJiYWNrZ3JvdW5kQ29sb3IiLCJ3aXRoUGFkZGluZyIsImNoaWxkcmVuIiwiVmlldyIsInN0eWxlIiwic3R5bGVzIiwibG9hZGluZ0NvbnRhaW5lciIsIlRleHQiLCJsb2FkaW5nVGV4dCIsImJhY2tncm91bmRHcmFkaWVudCIsImxvY2F0aW9ucyIsInNhZmVBcmVhRWRnZXMiLCJDT05UQUlORVJfU0FGRV9FREdFUyIsIk5PX0JPVFRPTSIsIndpdGhTY3JvbGxWaWV3Iiwic3RhdHVzQmFyU3R5bGUiLCJqc3hzIiwiTGluZWFyR3JhZGllbnQiLCJzdGFydCIsIngiLCJ5IiwiZW5kIiwiY29udGFpbmVyIiwiU2Nyb2xsVmlldyIsInNjcm9sbFZpZXciLCJjb250ZW50Q29udGFpbmVyU3R5bGUiLCJzY3JvbGxDb250ZW50Iiwic2hvd3NWZXJ0aWNhbFNjcm9sbEluZGljYXRvciIsInJlZnJlc2hDb250cm9sIiwiUmVmcmVzaENvbnRyb2wiLCJ0aW50Q29sb3IiLCJvblByZXNzIiwiYWNjZW50Q29sb3IiLCJwcm9ncmVzc0NvbnRleHQiLCJsZXZlbHMiLCJvblNlbGVjdExldmVsIiwib25DaGFuZ2VMZXZlbFZpc3VhbCIsInByaW1hcnlDb2xvciIsImJvdHRvbVNwYWNlciIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9zY3JlZW5zL0Rhc2hib2FyZC9pbmRleC5qcyAtIFZFUlNJT04gQ09SUklHw4lFIC0gUkFGUkHDjkNISVNTRU1FTlQgQ09NUExFVFxuXG5pbXBvcnQgeyB1c2VDb250ZXh0LCB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFJlZnJlc2hDb250cm9sLCBUZXh0LCBTY3JvbGxWaWV3LCBWaWV3IH0gZnJvbSBcInJlYWN0LW5hdGl2ZVwiO1xuaW1wb3J0IHsgTGluZWFyR3JhZGllbnQgfSBmcm9tIFwiZXhwby1saW5lYXItZ3JhZGllbnRcIjtcbmltcG9ydCB7IHJvdXRlciwgdXNlRm9jdXNFZmZlY3QgfSBmcm9tIFwiZXhwby1yb3V0ZXJcIjtcblxuLy8gQ29udGV4dGVzXG5pbXBvcnQgeyBUaGVtZUNvbnRleHQgfSBmcm9tIFwiLi4vLi4vY29udGV4dHMvVGhlbWVDb250ZXh0XCI7XG5pbXBvcnQgeyB1c2VQcm9ncmVzcyB9IGZyb20gXCIuLi8uLi9jb250ZXh0cy9Qcm9ncmVzc0NvbnRleHRcIjtcbmltcG9ydCB7IHVzZUN1cnJlbnRMZXZlbCB9IGZyb20gJy4uLy4uL2NvbnRleHRzL0N1cnJlbnRMZXZlbENvbnRleHQnO1xuXG4vLyDwn5qAIEhPT0sgUFJPR1JFU1NJT04gVEVNUFMgUsOJRUwgLSBKVVNURSBQT1VSIExFUyBDSElGRlJFU1xuaW1wb3J0IHVzZVJlYWxUaW1lUHJvZ3Jlc3MgZnJvbSBcIi4uLy4uL2hvb2tzL3VzZVJlYWxUaW1lUHJvZ3Jlc3NcIjtcblxuLy8gSG9va3NcbmltcG9ydCB7IHVzZURhc2hib2FyZExldmVsIH0gZnJvbSBcIi4vaG9va3MvdXNlRGFzaGJvYXJkTGV2ZWxcIjtcbmltcG9ydCB7IHVzZURhc2hib2FyZFN0YXRlIH0gZnJvbSBcIi4vaG9va3MvdXNlRGFzaGJvYXJkU3RhdGVcIjtcbmltcG9ydCB1c2VMYXN0QWN0aXZpdHkgZnJvbSBcIi4uLy4uL2hvb2tzL3VzZUxhc3RBY3Rpdml0eVwiO1xuXG4vLyBDb21wb3NhbnRzIExheW91dFxuaW1wb3J0IENvbnRhaW5lciwgeyBDT05UQUlORVJfU0FGRV9FREdFUyB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL2xheW91dC9Db250YWluZXJcIjtcblxuLy8gQ29tcG9zYW50cyBEYXNoYm9hcmRcbmltcG9ydCBNb2Rlcm5IZWFkZXIgZnJvbSBcIi4vY29tcG9uZW50cy9Nb2Rlcm5IZWFkZXJcIjtcbmltcG9ydCBIZXJvQ29udGludWVTZWN0aW9uIGZyb20gXCIuL2NvbXBvbmVudHMvSGVyb0NvbnRpbnVlU2VjdGlvblwiO1xuaW1wb3J0IFF1aWNrQWN0aW9ucyBmcm9tIFwiLi9jb21wb25lbnRzL1F1aWNrQWN0aW9uc1wiO1xuaW1wb3J0IFNpbXBsZU1ldHJpY3MgZnJvbSBcIi4vY29tcG9uZW50cy9TaW1wbGVNZXRyaWNzXCI7XG5pbXBvcnQgTGVhcm5pbmdQcm9ncmVzcyBmcm9tIFwiLi9jb21wb25lbnRzL0xlYXJuaW5nUHJvZ3Jlc3NcIjtcblxuLy8g8J+agCBSw4lWSVNJT05cbmltcG9ydCBSZXZpc2lvbk9yY2hlc3RyYXRvciBmcm9tIFwiLi4vVm9jYWJ1bGFyeVJldmlzaW9uL1JldmlzaW9uT3JjaGVzdHJhdG9yXCI7XG5cbi8vIENvbnN0YW50ZXNcbmltcG9ydCB7IEVYRVJDSVNFUywgTEFOR1VBR0VfTEVWRUxTIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2NvbnN0YW50c1wiO1xuaW1wb3J0IHN0eWxlcyBmcm9tIFwiLi9zdHlsZVwiO1xuXG5jb25zdCBEYXNoYm9hcmQgPSAoKSA9PiB7XG4gIFxuICAvLyA9PT09PT09PT09PT09PT09PT09IMOJVEFUIExPQ0FMIFJBRlJBw45DSElTU0VNRU5UID09PT09PT09PT09PT09PT09PT1cbiAgY29uc3QgW3JlZnJlc2hLZXksIHNldFJlZnJlc2hLZXldID0gdXNlU3RhdGUoMCk7IC8vIEZvcmNlIGxlIHJlLXJlbmRlciBkZXMgY29tcG9zYW50c1xuICBcbiAgLy8gPT09PT09PT09PT09PT09PT09PSBDT05URVhURVMgPT09PT09PT09PT09PT09PT09PVxuICBjb25zdCB0aGVtZUNvbnRleHQgPSB1c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG4gIGNvbnN0IHByb2dyZXNzRGF0YSA9IHVzZVByb2dyZXNzKCk7XG5cbiAgLy8g8J+agCBQUk9HUkVTU0lPTiBURU1QUyBSw4lFTFxuICBjb25zdCB7IGdldExldmVsUHJvZ3Jlc3MsIHJlZnJlc2g6IHJlZnJlc2hQcm9ncmVzcyB9ID0gdXNlUmVhbFRpbWVQcm9ncmVzcygpO1xuXG4gIGNvbnN0IGNvbG9ycyA9IHRoZW1lQ29udGV4dD8uY29sb3JzIHx8IHtcbiAgICBiYWNrZ3JvdW5kOiBcIiNGOEZBRkNcIixcbiAgICBwcmltYXJ5OiBcIiMzQjgyRjZcIiwgXG4gICAgc3VyZmFjZTogXCIjRkZGRkZGXCIsXG4gICAgdGV4dDogXCIjMUYyOTM3XCIsXG4gICAgdGV4dFNlY29uZGFyeTogXCIjNkI3MjgwXCIsXG4gIH07XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PSBIT09LUyBEQVNIQk9BUkQgPT09PT09PT09PT09PT09PT09PVxuICBjb25zdCB7IGN1cnJlbnRMZXZlbCwgaGFuZGxlQ2hhbmdlQWN0aXZlTGV2ZWwsIGxldmVsQ29sb3IgfSA9IHVzZURhc2hib2FyZExldmVsKHsgXG4gICAgcHJvZ3Jlc3M6IHByb2dyZXNzRGF0YS5wcm9ncmVzcyBcbiAgfSk7XG4gIGNvbnN0IHsgc2V0Q3VycmVudExldmVsIH0gPSB1c2VDdXJyZW50TGV2ZWwoKTtcbiAgXG4gIGNvbnN0IHsgbGFzdEFjdGl2aXR5LCBpc0xvYWRpbmc6IGlzQWN0aXZpdHlMb2FkaW5nLCByZWxvYWQ6IHJlbG9hZEFjdGl2aXR5IH0gPSB1c2VMYXN0QWN0aXZpdHkoKTtcbiAgXG4gIGNvbnN0IHsgcmVmcmVzaGluZywgb25SZWZyZXNoOiBvcmlnaW5hbE9uUmVmcmVzaCB9ID0gdXNlRGFzaGJvYXJkU3RhdGUocmVsb2FkQWN0aXZpdHkpO1xuXG4gIC8vIPCflKUgUkFGUkHDjkNISVNTRU1FTlQgQ09NUExFVCBERSBUT1VURVMgTEVTIFNFQ1RJT05TXG4gIGNvbnN0IG9uUmVmcmVzaCA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICBvcmlnaW5hbE9uUmVmcmVzaCgpLCAgICAvLyBSZWNoYXJnZSBsYXN0QWN0aXZpdHlcbiAgICAgIHJlZnJlc2hQcm9ncmVzcygpICAgICAgIC8vIFJlY2hhcmdlIHByb2dyZXNzaW9uIHRlbXBzIHLDqWVsXG4gICAgXSk7XG4gICAgXG4gICAgLy8gRm9yY2UgbGUgcmUtcmVuZGVyIGRlIHRvdXMgbGVzIGNvbXBvc2FudHMgZW5mYW50c1xuICAgIHNldFJlZnJlc2hLZXkocHJldiA9PiBwcmV2ICsgMSk7XG4gIH0sIFtvcmlnaW5hbE9uUmVmcmVzaCwgcmVmcmVzaFByb2dyZXNzXSk7XG5cbiAgdXNlRm9jdXNFZmZlY3QoXG4gICAgdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgb25SZWZyZXNoKCk7XG4gICAgfSwgW29uUmVmcmVzaF0pXG4gICk7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PSBOQVZJR0FUSU9OID09PT09PT09PT09PT09PT09PT1cbiAgXG4gIGNvbnN0IGhhbmRsZUNvbnRpbnVlID0gdXNlQ2FsbGJhY2soKGFjdGl2aXR5KSA9PiB7XG4gICAgaWYgKGFjdGl2aXR5ID09PSBcImxldmVsU2VsZWN0aW9uXCIpIHtcbiAgICAgIHJvdXRlci5wdXNoKFwiL3RhYnMvbGV2ZWxTZWxlY3Rpb25cIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgeyB0eXBlLCBsZXZlbCwgbW9kZSB9ID0gYWN0aXZpdHk7XG4gICAgY29uc3QgZXhlcmNpc2UgPSBPYmplY3QudmFsdWVzKEVYRVJDSVNFUykuZmluZChleCA9PiBleC5pZCA9PT0gdHlwZSk7XG4gICAgXG4gICAgaWYgKGV4ZXJjaXNlKSB7XG4gICAgICBjb25zdCBwYXJhbXMgPSB7IGxldmVsIH07XG4gICAgICBpZiAobW9kZSAmJiB0eXBlID09PSBcInZvY2FidWxhcnlcIikgcGFyYW1zLm1vZGUgPSBtb2RlO1xuICAgICAgXG4gICAgICByb3V0ZXIucHVzaCh7XG4gICAgICAgIHBhdGhuYW1lOiBleGVyY2lzZS5yb3V0ZSxcbiAgICAgICAgcGFyYW1zXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICBjb25zdCBoYW5kbGVDaGFuZ2VMZXZlbFZpc3VhbCA9IHVzZUNhbGxiYWNrKChsZXZlbElkKSA9PiB7XG4gICAgaGFuZGxlQ2hhbmdlQWN0aXZlTGV2ZWwobGV2ZWxJZCk7XG4gICAgc2V0Q3VycmVudExldmVsKGxldmVsSWQpO1xuICB9LCBbaGFuZGxlQ2hhbmdlQWN0aXZlTGV2ZWwsIHNldEN1cnJlbnRMZXZlbF0pO1xuXG4gIGNvbnN0IGhhbmRsZUxldmVsU2VsZWN0ID0gdXNlQ2FsbGJhY2soKGxldmVsKSA9PiB7XG4gICAgc2V0Q3VycmVudExldmVsKGxldmVsKTtcbiAgICByb3V0ZXIucHVzaChgL3RhYnMvZXhlcmNpc2VTZWxlY3Rpb24/bGV2ZWw9JHtsZXZlbH1gKTtcbiAgfSwgW3NldEN1cnJlbnRMZXZlbF0pO1xuXG4gIC8vID09PT09PT09PT09PT09PT09PT0gTklWRUFVWCA9PT09PT09PT09PT09PT09PT09XG4gIFxuICBjb25zdCBhbGxMZXZlbHMgPSBbJzEnLCAnMicsICczJywgJzQnLCAnNScsICc2JywgJ2JvbnVzJ10ubWFwKGxldmVsS2V5ID0+IHtcbiAgICBjb25zdCBsZXZlbEluZm8gPSBMQU5HVUFHRV9MRVZFTFNbbGV2ZWxLZXldO1xuICAgIGNvbnN0IHByb2dyZXNzID0gZ2V0TGV2ZWxQcm9ncmVzcyhsZXZlbEtleSk7XG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBsZXZlbEtleSxcbiAgICAgIHRpdGxlOiBsZXZlbEluZm8udGl0bGUsXG4gICAgICBjb2xvcjogbGV2ZWxJbmZvLmNvbG9yLFxuICAgICAgaWNvbjogbGV2ZWxJbmZvLmljb24sXG4gICAgICBwcm9ncmVzcyxcbiAgICAgIGlzQWN0aXZlOiBsZXZlbEtleSA9PT0gY3VycmVudExldmVsLFxuICAgICAgaXNDb21wbGV0ZWQ6IHByb2dyZXNzID49IDEwMCxcbiAgICB9O1xuICB9KTtcblxuICBjb25zdCBnbG9iYWxQcm9ncmVzcyA9IGdldExldmVsUHJvZ3Jlc3MoY3VycmVudExldmVsKTtcblxuICAvLyA9PT09PT09PT09PT09PT09PT09IExPQURJTkcgPT09PT09PT09PT09PT09PT09PVxuICBcbiAgaWYgKHByb2dyZXNzRGF0YS5pc0xvYWRpbmcpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPENvbnRhaW5lciBzYWZlQXJlYSBiYWNrZ3JvdW5kQ29sb3I9e2NvbG9ycy5iYWNrZ3JvdW5kfSB3aXRoUGFkZGluZz5cbiAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5sb2FkaW5nQ29udGFpbmVyfT5cbiAgICAgICAgICA8VGV4dCBzdHlsZT17W3N0eWxlcy5sb2FkaW5nVGV4dCwgeyBjb2xvcjogY29sb3JzLnByaW1hcnkgfV19PlxuICAgICAgICAgICAgQ2hhcmdlbWVudCBkdSB0YWJsZWF1IGRlIGJvcmQuLi5cbiAgICAgICAgICA8L1RleHQ+XG4gICAgICAgIDwvVmlldz5cbiAgICAgIDwvQ29udGFpbmVyPlxuICAgICk7XG4gIH1cblxuICAvLyA9PT09PT09PT09PT09PT09PT09IEJBQ0tHUk9VTkQgPT09PT09PT09PT09PT09PT09PVxuICBcbiAgY29uc3QgYmFja2dyb3VuZEdyYWRpZW50ID0ge1xuICAgIGNvbG9yczogW2Ake2xldmVsQ29sb3J9MDVgLCBjb2xvcnMuYmFja2dyb3VuZCwgYCR7bGV2ZWxDb2xvcn0wOGBdLFxuICAgIGxvY2F0aW9uczogWzAsIDAuNiwgMV0sXG4gIH07XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PSBSRU5ERVIgPT09PT09PT09PT09PT09PT09PVxuICBcbiAgcmV0dXJuIChcbiAgICA8Q29udGFpbmVyXG4gICAgICBzYWZlQXJlYVxuICAgICAgc2FmZUFyZWFFZGdlcz17Q09OVEFJTkVSX1NBRkVfRURHRVMuTk9fQk9UVE9NfVxuICAgICAgd2l0aFNjcm9sbFZpZXc9e2ZhbHNlfVxuICAgICAgYmFja2dyb3VuZENvbG9yPVwidHJhbnNwYXJlbnRcIlxuICAgICAgc3RhdHVzQmFyU3R5bGU9XCJsaWdodC1jb250ZW50XCJcbiAgICAgIHdpdGhQYWRkaW5nPXtmYWxzZX1cbiAgICA+XG4gICAgICA8TGluZWFyR3JhZGllbnRcbiAgICAgICAgY29sb3JzPXtiYWNrZ3JvdW5kR3JhZGllbnQuY29sb3JzfVxuICAgICAgICBsb2NhdGlvbnM9e2JhY2tncm91bmRHcmFkaWVudC5sb2NhdGlvbnN9XG4gICAgICAgIHN0YXJ0PXt7IHg6IDAsIHk6IDAgfX1cbiAgICAgICAgZW5kPXt7IHg6IDAsIHk6IDEgfX1cbiAgICAgICAgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9XG4gICAgICA+XG4gICAgICAgIHsvKiBIZWFkZXIgKi99XG4gICAgICAgIDxNb2Rlcm5IZWFkZXJcbiAgICAgICAgICBsZXZlbD17Y3VycmVudExldmVsfVxuICAgICAgICAgIGxldmVsQ29sb3I9e2xldmVsQ29sb3J9XG4gICAgICAgIC8+XG5cbiAgICAgICAgey8qIENvbnRlbnUgcHJpbmNpcGFsICovfVxuICAgICAgICA8U2Nyb2xsVmlld1xuICAgICAgICAgIHN0eWxlPXtzdHlsZXMuc2Nyb2xsVmlld31cbiAgICAgICAgICBjb250ZW50Q29udGFpbmVyU3R5bGU9e3N0eWxlcy5zY3JvbGxDb250ZW50fVxuICAgICAgICAgIHNob3dzVmVydGljYWxTY3JvbGxJbmRpY2F0b3I9e2ZhbHNlfVxuICAgICAgICAgIHJlZnJlc2hDb250cm9sPXtcbiAgICAgICAgICAgIDxSZWZyZXNoQ29udHJvbFxuICAgICAgICAgICAgICByZWZyZXNoaW5nPXtyZWZyZXNoaW5nfVxuICAgICAgICAgICAgICBvblJlZnJlc2g9e29uUmVmcmVzaH1cbiAgICAgICAgICAgICAgY29sb3JzPXtbbGV2ZWxDb2xvcl19XG4gICAgICAgICAgICAgIHRpbnRDb2xvcj17bGV2ZWxDb2xvcn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgfVxuICAgICAgICA+XG4gICAgICAgICAgey8qIFNlY3Rpb24gQ29udGludWUgKi99XG4gICAgICAgICAgPEhlcm9Db250aW51ZVNlY3Rpb25cbiAgICAgICAgICAgIGtleT17YGNvbnRpbnVlLSR7cmVmcmVzaEtleX1gfSAvLyDwn5SlIEZvcmNlIGxlIHJlLXJlbmRlclxuICAgICAgICAgICAgbGFzdEFjdGl2aXR5PXtsYXN0QWN0aXZpdHl9XG4gICAgICAgICAgICBvblByZXNzPXtoYW5kbGVDb250aW51ZX1cbiAgICAgICAgICAgIGFjY2VudENvbG9yPXtsZXZlbENvbG9yfVxuICAgICAgICAgICAgaXNMb2FkaW5nPXtpc0FjdGl2aXR5TG9hZGluZ31cbiAgICAgICAgICAvPlxuXG4gICAgICAgICAgey8qIEFjdGlvbnMgcmFwaWRlcyAqL31cbiAgICAgICAgICA8UXVpY2tBY3Rpb25zXG4gICAgICAgICAgICBrZXk9e2BhY3Rpb25zLSR7cmVmcmVzaEtleX1gfSAvLyDwn5SlIEZvcmNlIGxlIHJlLXJlbmRlclxuICAgICAgICAgICAgY3VycmVudExldmVsPXtjdXJyZW50TGV2ZWx9XG4gICAgICAgICAgICBwcm9ncmVzc0NvbnRleHQ9e3Byb2dyZXNzRGF0YX1cbiAgICAgICAgICAgIGFjY2VudENvbG9yPXtsZXZlbENvbG9yfVxuICAgICAgICAgIC8+XG5cbiAgICAgICAgICB7LyogTcOpdHJpcXVlcyAqL31cbiAgICAgICAgICA8U2ltcGxlTWV0cmljcyBcbiAgICAgICAgICAgIGtleT17YG1ldHJpY3MtJHtyZWZyZXNoS2V5fWB9IC8vIPCflKUgRm9yY2UgbGUgcmUtcmVuZGVyXG4gICAgICAgICAgICBhY2NlbnRDb2xvcj17bGV2ZWxDb2xvcn0gXG4gICAgICAgICAgICByZWZyZXNoS2V5PXtyZWZyZXNoS2V5fSAvLyDwn5SlIFBhc3NlIGxhIGNsw6kgZGUgcmFmcmHDrmNoaXNzZW1lbnRcbiAgICAgICAgICAvPlxuXG4gICAgICAgICAgey8qIFByb2dyZXNzaW9uICovfVxuICAgICAgICAgIDxMZWFybmluZ1Byb2dyZXNzXG4gICAgICAgICAgICBrZXk9e2Bwcm9ncmVzcy0ke3JlZnJlc2hLZXl9YH0gLy8g8J+UpSBGb3JjZSBsZSByZS1yZW5kZXJcbiAgICAgICAgICAgIGdsb2JhbFByb2dyZXNzPXtnbG9iYWxQcm9ncmVzc31cbiAgICAgICAgICAgIGxldmVscz17YWxsTGV2ZWxzfVxuICAgICAgICAgICAgY3VycmVudExldmVsPXtjdXJyZW50TGV2ZWx9XG4gICAgICAgICAgICBvblNlbGVjdExldmVsPXtoYW5kbGVMZXZlbFNlbGVjdH1cbiAgICAgICAgICAgIG9uQ2hhbmdlTGV2ZWxWaXN1YWw9e2hhbmRsZUNoYW5nZUxldmVsVmlzdWFsfVxuICAgICAgICAgICAgcHJpbWFyeUNvbG9yPXtsZXZlbENvbG9yfVxuICAgICAgICAgIC8+XG5cbiAgICAgICAgICB7LyogRXNwYWNlIGVuIGJhcyAqL31cbiAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmJvdHRvbVNwYWNlcn0gLz5cbiAgICAgICAgPC9TY3JvbGxWaWV3PlxuXG4gICAgICAgIHsvKiBTeXN0w6htZSBkZSByw6l2aXNpb24gKi99XG4gICAgICAgIDxSZXZpc2lvbk9yY2hlc3RyYXRvciBcbiAgICAgICAgICBrZXk9e2ByZXZpc2lvbi0ke3JlZnJlc2hLZXl9YH0gLy8g8J+UpSBGb3JjZSBsZSByZS1yZW5kZXJcbiAgICAgICAgICBjdXJyZW50TGV2ZWw9e2N1cnJlbnRMZXZlbH0gXG4gICAgICAgICAgcmVmcmVzaEtleT17cmVmcmVzaEtleX0gLy8g8J+UpSBQYXNzZSBsYSBjbMOpIGRlIHJhZnJhw65jaGlzc2VtZW50XG4gICAgICAgIC8+XG4gICAgICA8L0xpbmVhckdyYWRpZW50PlxuICAgIDwvQ29udGFpbmVyPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRGFzaGJvYXJkOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLG1CQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxXQUFBLEdBQUFILE9BQUE7QUFHQSxJQUFBSSxhQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxnQkFBQSxHQUFBTCxPQUFBO0FBQ0EsSUFBQU0sb0JBQUEsR0FBQU4sT0FBQTtBQUdBLElBQUFPLHFCQUFBLEdBQUFDLHNCQUFBLENBQUFSLE9BQUE7QUFHQSxJQUFBUyxtQkFBQSxHQUFBVCxPQUFBO0FBQ0EsSUFBQVUsbUJBQUEsR0FBQVYsT0FBQTtBQUNBLElBQUFXLGlCQUFBLEdBQUFILHNCQUFBLENBQUFSLE9BQUE7QUFHQSxJQUFBWSxVQUFBLEdBQUFDLHVCQUFBLENB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