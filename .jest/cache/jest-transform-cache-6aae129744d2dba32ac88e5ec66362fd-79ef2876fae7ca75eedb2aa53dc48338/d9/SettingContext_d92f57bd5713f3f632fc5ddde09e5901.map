{"version":3,"names":["_react","require","_storageUtils","_constants","_jsxRuntime","SettingsContext","exports","createContext","SettingsProvider","_ref","children","_useState","useState","DEFAULT_SETTINGS","_useState2","_slicedToArray2","default","settings","setSettings","_useState3","_useState4","isLoading","setIsLoading","useEffect","loadSettings","_ref2","_asyncToGenerator2","savedSettings","getData","Object","assign","error","apply","arguments","storeData","updateSetting","key","value","undefined","prevSettings","_defineProperty2","updateSettings","newSettings","resetSettings","areNotificationsEnabled","notifications","getDailyGoal","dailyGoal","setDailyGoal","minutes","Math","max","min","contextValue","jsx","Provider","_default"],"sources":["SettingContext.js"],"sourcesContent":["// src/contexts/SettingsContext.js\nimport { createContext, useState, useEffect } from 'react';\nimport { storeData, getData } from '../utils/storageUtils';\nimport { DEFAULT_SETTINGS } from '../utils/constants';\n\n// Créer le contexte\nexport const SettingsContext = createContext();\n\n/**\n * Fournisseur de contexte pour gérer les paramètres de l'application\n */\nexport const SettingsProvider = ({ children }) => {\n  // État des paramètres\n  const [settings, setSettings] = useState(DEFAULT_SETTINGS);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Charger les paramètres au démarrage\n  useEffect(() => {\n    const loadSettings = async () => {\n      try {\n        setIsLoading(true);\n        const savedSettings = await getData('userSettings');\n\n        if (savedSettings) {\n          // Fusionner avec les paramètres par défaut pour s'assurer que tous les champs sont présents\n          setSettings({ ...DEFAULT_SETTINGS, ...savedSettings });\n        }\n      } catch (error) {\n        // Ignored on purpose\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadSettings();\n  }, []);\n\n  // Sauvegarder les paramètres lorsqu'ils changent\n  useEffect(() => {\n    if (!isLoading && settings !== DEFAULT_SETTINGS) {\n      storeData('userSettings', settings);\n    }\n  }, [settings, isLoading]);\n\n  // Mettre à jour un paramètre spécifique\n  const updateSetting = (key, value) => {\n    if (settings[key] === undefined) {\n\n      return;\n    }\n\n    setSettings(prevSettings => ({\n      ...prevSettings,\n      [key]: value\n    }));\n  };\n\n  // Mettre à jour plusieurs paramètres à la fois\n  const updateSettings = (newSettings) => {\n    setSettings(prevSettings => ({\n      ...prevSettings,\n      ...newSettings\n    }));\n  };\n\n  // Réinitialiser tous les paramètres\n  const resetSettings = () => {\n    setSettings(DEFAULT_SETTINGS);\n  };\n\n  // Vérifier si les notifications sont activées\n  const areNotificationsEnabled = () => {\n    return settings.notifications;\n  };\n\n  // Obtenir le délai journalier\n  const getDailyGoal = () => {\n    return settings.dailyGoal;\n  };\n\n  // Définir le délai journalier\n  const setDailyGoal = (minutes) => {\n    updateSetting('dailyGoal', Math.max(1, Math.min(120, minutes))); // Entre 1 et 120 minutes\n  };\n\n  // Valeur fournie par le contexte\n  const contextValue = {\n    settings,\n    updateSetting,\n    updateSettings,\n    resetSettings,\n    areNotificationsEnabled,\n    getDailyGoal,\n    setDailyGoal,\n    isLoading,\n  };\n\n  return (\n    <SettingsContext.Provider value={contextValue}>\n      {children}\n    </SettingsContext.Provider>\n  );\n};\n\nexport default SettingsContext;"],"mappings":"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","ignoreList":[]}