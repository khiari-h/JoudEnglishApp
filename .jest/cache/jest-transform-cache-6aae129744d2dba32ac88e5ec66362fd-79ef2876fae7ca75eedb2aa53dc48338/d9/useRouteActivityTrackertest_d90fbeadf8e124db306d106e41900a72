57c454be2fb9f2d249bd345ff179b934
_getJestObj().mock('expo-router', function () {
  return {
    useSegments: jest.fn(function () {
      return [];
    }),
    usePathname: jest.fn(function () {
      return '/';
    })
  };
});
_getJestObj().mock('../../src/hooks/useActivityMetrics', function () {
  return {
    __esModule: true,
    default: jest.fn(function () {
      return {
        startSession: jest.fn(),
        endSession: jest.fn(),
        updateStreak: jest.fn()
      };
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactNative = require("@testing-library/react-native");
var _useRouteActivityTracker = _interopRequireDefault(require("../../src/hooks/useRouteActivityTracker"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useRouteActivityTracker', function () {
  var mockStartSession;
  var mockEndSession;
  var mockUpdateStreak;
  var mockUseSegments;
  var mockUsePathname;
  var mockUseActivityMetrics;
  beforeEach(function () {
    jest.clearAllMocks();
    mockStartSession = jest.fn();
    mockEndSession = jest.fn();
    mockUpdateStreak = jest.fn();
    mockUseSegments = require('expo-router').useSegments;
    mockUsePathname = require('expo-router').usePathname;
    mockUseActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
    mockUseActivityMetrics.mockReturnValue({
      startSession: mockStartSession,
      endSession: mockEndSession,
      updateStreak: mockUpdateStreak
    });
    mockUseSegments.mockReturnValue([]);
    mockUsePathname.mockReturnValue('/');
  });
  describe('Initialisation du hook', function () {
    it('devrait s\'initialiser sans erreur avec des segments vides', function () {
      mockUseSegments.mockReturnValue([]);
      mockUsePathname.mockReturnValue('/');
      expect(function () {
        (0, _reactNative.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        });
      }).not.toThrow();
      expect(mockStartSession).not.toHaveBeenCalled();
      expect(mockEndSession).not.toHaveBeenCalled();
    });
    it('devrait s\'initialiser sans erreur avec une route normale', function () {
      mockUseSegments.mockReturnValue(['home', 'dashboard']);
      mockUsePathname.mockReturnValue('/home/dashboard');
      expect(function () {
        (0, _reactNative.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        });
      }).not.toThrow();
      expect(mockStartSession).not.toHaveBeenCalled();
    });
  });
  describe('Détection des exercices', function () {
    it('devrait détecter un exercice de vocabulaire', function () {
      mockUseSegments.mockReturnValue(['level', 'VocabularyExercise']);
      mockUsePathname.mockReturnValue('/level/VocabularyExercise');
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');
      expect(mockStartSession).toHaveBeenCalledTimes(1);
    });
    it('devrait détecter un exercice de grammaire', function () {
      mockUseSegments.mockReturnValue(['level', 'GrammarExercise']);
      mockUsePathname.mockReturnValue('/level/GrammarExercise');
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('GrammarExercise');
      expect(mockStartSession).toHaveBeenCalledTimes(1);
    });
    it('devrait détecter un assessment', function () {
      mockUseSegments.mockReturnValue(['level', 'Assessment']);
      mockUsePathname.mockReturnValue('/level/Assessment');
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('Assessment');
      expect(mockStartSession).toHaveBeenCalledTimes(1);
    });
    it('devrait détecter les exercices avec une casse différente', function () {
      mockUseSegments.mockReturnValue(['level', 'vocabularyExercise']);
      mockUsePathname.mockReturnValue('/level/vocabularyExercise');
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('vocabularyExercise');
    });
    it('ne devrait pas détecter une route normale comme exercice', function () {
      mockUseSegments.mockReturnValue(['home', 'profile']);
      mockUsePathname.mockReturnValue('/home/profile');
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).not.toHaveBeenCalled();
    });
  });
  describe('Gestion des sessions', function () {
    it('devrait éviter les re-déclenchements avec le même pathname', function () {
      mockUseSegments.mockReturnValue(['level', 'VocabularyExercise']);
      mockUsePathname.mockReturnValue('/level/VocabularyExercise');
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        }),
        rerender = _renderHook.rerender;
      expect(mockStartSession).toHaveBeenCalledTimes(1);
      rerender();
      expect(mockStartSession).toHaveBeenCalledTimes(1);
    });
    it('devrait gérer la transition entre exercices différents', function () {
      mockUseSegments.mockReturnValue(['level', 'VocabularyExercise']);
      mockUsePathname.mockReturnValue('/level/VocabularyExercise');
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        }),
        rerender = _renderHook2.rerender;
      expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');
      expect(mockStartSession).toHaveBeenCalledTimes(1);
      mockUseSegments.mockReturnValue(['level', 'GrammarExercise']);
      mockUsePathname.mockReturnValue('/level/GrammarExercise');
      (0, _reactNative.act)(function () {
        rerender();
      });
      expect(mockEndSession).toHaveBeenCalledTimes(1);
      expect(mockUpdateStreak).toHaveBeenCalledTimes(1);
      expect(mockStartSession).toHaveBeenCalledWith('GrammarExercise');
      expect(mockStartSession).toHaveBeenCalledTimes(2);
    });
    it('devrait terminer la session lors du passage à une route normale', function () {
      mockUseSegments.mockReturnValue(['level', 'VocabularyExercise']);
      mockUsePathname.mockReturnValue('/level/VocabularyExercise');
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        }),
        rerender = _renderHook3.rerender;
      expect(mockStartSession).toHaveBeenCalledTimes(1);
      mockUseSegments.mockReturnValue(['home', 'dashboard']);
      mockUsePathname.mockReturnValue('/home/dashboard');
      (0, _reactNative.act)(function () {
        rerender();
      });
      expect(mockEndSession).toHaveBeenCalledTimes(1);
      expect(mockUpdateStreak).toHaveBeenCalledTimes(1);
    });
  });
  describe('Gestion des erreurs', function () {
    it('devrait gérer les erreurs de startSession gracieusement', function () {
      var mockStartSessionWithError = jest.fn().mockImplementation(function () {
        throw new Error('Erreur de démarrage de session');
      });
      mockUseActivityMetrics.mockReturnValue({
        startSession: mockStartSessionWithError,
        endSession: mockEndSession,
        updateStreak: mockUpdateStreak
      });
      mockUseSegments.mockReturnValue(['level', 'VocabularyExercise']);
      mockUsePathname.mockReturnValue('/level/VocabularyExercise');
      var consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation(function () {});
      expect(function () {
        (0, _reactNative.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        });
      }).not.toThrow();
      expect(mockStartSessionWithError).toHaveBeenCalledWith('VocabularyExercise');
      expect(consoleWarnSpy).toHaveBeenCalled();
      consoleWarnSpy.mockRestore();
    });
    it('devrait gérer les erreurs de endSession gracieusement', function () {
      var mockEndSessionWithError = jest.fn().mockImplementation(function () {
        throw new Error('Erreur de fin de session');
      });
      mockUseActivityMetrics.mockReturnValue({
        startSession: mockStartSession,
        endSession: mockEndSessionWithError,
        updateStreak: mockUpdateStreak
      });
      mockUseSegments.mockReturnValue(['level', 'VocabularyExercise']);
      mockUsePathname.mockReturnValue('/level/VocabularyExercise');
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        }),
        rerender = _renderHook4.rerender;
      mockUseSegments.mockReturnValue(['home', 'dashboard']);
      mockUsePathname.mockReturnValue('/home/dashboard');
      var consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation(function () {});
      expect(function () {
        (0, _reactNative.act)(function () {
          rerender();
        });
      }).not.toThrow();
      expect(mockEndSessionWithError).toHaveBeenCalled();
      expect(consoleWarnSpy).toHaveBeenCalled();
      consoleWarnSpy.mockRestore();
    });
  });
  describe('Nettoyage lors du démontage', function () {
    it('devrait nettoyer correctement une session active lors du démontage', function () {
      mockUseSegments.mockReturnValue(['level', 'VocabularyExercise']);
      mockUsePathname.mockReturnValue('/level/VocabularyExercise');
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        }),
        unmount = _renderHook5.unmount;
      expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');
      expect(mockStartSession).toHaveBeenCalledTimes(1);
      expect(mockEndSession).not.toHaveBeenCalled();
      (0, _reactNative.act)(function () {
        unmount();
      });
      expect(mockEndSession).toHaveBeenCalledTimes(1);
    });
    it('ne devrait pas appeler endSession si aucune session n\'est active', function () {
      mockUseSegments.mockReturnValue(['home', 'dashboard']);
      mockUsePathname.mockReturnValue('/home/dashboard');
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        }),
        unmount = _renderHook6.unmount;
      expect(mockStartSession).not.toHaveBeenCalled();
      (0, _reactNative.act)(function () {
        unmount();
      });
      expect(mockEndSession).not.toHaveBeenCalled();
    });
    it('devrait gérer les erreurs lors du nettoyage', function () {
      var mockEndSessionWithError = jest.fn().mockImplementation(function () {
        throw new Error('Erreur lors du cleanup');
      });
      mockUseActivityMetrics.mockReturnValue({
        startSession: mockStartSession,
        endSession: mockEndSessionWithError,
        updateStreak: mockUpdateStreak
      });
      mockUseSegments.mockReturnValue(['level', 'VocabularyExercise']);
      mockUsePathname.mockReturnValue('/level/VocabularyExercise');
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        }),
        unmount = _renderHook7.unmount;
      expect(mockStartSession).toHaveBeenCalledTimes(1);
      var consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation(function () {});
      expect(function () {
        (0, _reactNative.act)(function () {
          unmount();
        });
      }).not.toThrow();
      expect(mockEndSessionWithError).toHaveBeenCalled();
      expect(consoleWarnSpy).toHaveBeenCalled();
      consoleWarnSpy.mockRestore();
    });
  });
  describe('Cas de figure avancés', function () {
    it('devrait gérer plusieurs changements rapides de routes', function () {
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        }),
        rerender = _renderHook8.rerender;
      mockUseSegments.mockReturnValue(['level', 'VocabularyExercise']);
      mockUsePathname.mockReturnValue('/level/VocabularyExercise');
      (0, _reactNative.act)(function () {
        rerender();
      });
      expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');
      mockUseSegments.mockReturnValue(['level', 'GrammarExercise']);
      mockUsePathname.mockReturnValue('/level/GrammarExercise');
      (0, _reactNative.act)(function () {
        rerender();
      });
      mockUseSegments.mockReturnValue(['home', 'profile']);
      mockUsePathname.mockReturnValue('/home/profile');
      (0, _reactNative.act)(function () {
        rerender();
      });
      expect(mockStartSession).toHaveBeenCalledTimes(2);
      expect(mockEndSession).toHaveBeenCalledTimes(2);
      expect(mockUpdateStreak).toHaveBeenCalledTimes(2);
    });
    it('devrait maintenir l\'état correct lors de re-renders multiples', function () {
      mockUseSegments.mockReturnValue(['level', 'VocabularyExercise']);
      mockUsePathname.mockReturnValue('/level/VocabularyExercise');
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        }),
        rerender = _renderHook9.rerender;
      for (var i = 0; i < 5; i++) {
        rerender();
      }
      expect(mockStartSession).toHaveBeenCalledTimes(1);
      expect(mockEndSession).not.toHaveBeenCalled();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,