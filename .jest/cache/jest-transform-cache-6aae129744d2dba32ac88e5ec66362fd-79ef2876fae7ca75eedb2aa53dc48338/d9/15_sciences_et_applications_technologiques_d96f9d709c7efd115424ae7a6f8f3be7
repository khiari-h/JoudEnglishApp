064949f296b440816f65a12267a86414
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vocab = void 0;
function cov_vqjp0rx2s() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\data\\vocabulary\\4\\categories\\15_sciences_et_applications_technologiques.js";
  var hash = "51a32f10b88bea369cdcba2a1ad23ec3c18573c4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\data\\vocabulary\\4\\categories\\15_sciences_et_applications_technologiques.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 21
        },
        end: {
          line: 461,
          column: 1
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "51a32f10b88bea369cdcba2a1ad23ec3c18573c4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_vqjp0rx2s = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_vqjp0rx2s();
var vocab = exports.vocab = (cov_vqjp0rx2s().s[0]++, {
  title: "Sciences & Applications Technologiques",
  words: [{
    word: "scientific breakthrough",
    translation: "percée scientifique",
    example: "The scientific breakthrough transformed our understanding of genetic inheritance."
  }, {
    word: "cutting-edge research",
    translation: "recherche de pointe",
    example: "Cutting-edge research in quantum computing promises revolutionary applications."
  }, {
    word: "emerging technology",
    translation: "technologie émergente",
    example: "Emerging technologies like CRISPR are reshaping our biological capabilities."
  }, {
    word: "technological advancement",
    translation: "avancée technologique",
    example: "Technological advancements in renewable energy are accelerating the transition from fossil fuels."
  }, {
    word: "scientific frontier",
    translation: "frontière scientifique",
    example: "Exploring the scientific frontier requires creativity and perseverance."
  }, {
    word: "theoretical framework",
    translation: "cadre théorique",
    example: "The theoretical framework helps explain experimental observations."
  }, {
    word: "bioengineering",
    translation: "bio-ingénierie",
    example: "Bioengineering combines biology with engineering to solve complex problems."
  }, {
    word: "quantum technology",
    translation: "technologie quantique",
    example: "Quantum technology harnesses quantum physics for computing and communication."
  }, {
    word: "materials science",
    translation: "science des matériaux",
    example: "Materials science develops new substances with enhanced properties."
  }, {
    word: "scientific method",
    translation: "méthode scientifique",
    example: "The scientific method provides a systematic approach to investigating phenomena."
  }, {
    word: "empirical evidence",
    translation: "preuve empirique",
    example: "Empirical evidence comes from observation and experimentation rather than theory."
  }, {
    word: "experiment",
    translation: "expérience",
    example: "The experiment tested whether the treatment reduced symptoms."
  }, {
    word: "observation",
    translation: "observation",
    example: "Careful observation revealed unexpected patterns in the data."
  }, {
    word: "reproducibility",
    translation: "reproductibilité",
    example: "Reproducibility ensures that different scientists can verify each other's findings."
  }, {
    word: "causation",
    translation: "causalité",
    example: "Establishing causation requires more than showing correlation."
  }, {
    word: "replication",
    translation: "réplication",
    example: "Replication studies determine whether findings can be consistently reproduced."
  }, {
    word: "methodology",
    translation: "méthodologie",
    example: "The methodology section describes exactly how the research was conducted."
  }, {
    word: "scientific debate",
    translation: "débat scientifique",
    example: "Scientific debate drives progress by challenging and refining ideas."
  }, {
    word: "controversy",
    translation: "controverse",
    example: "The controversy centered on competing interpretations of the experimental data."
  }, {
    word: "skepticism",
    translation: "scepticisme",
    example: "Healthy skepticism is fundamental to the scientific process."
  }, {
    word: "scientific uncertainty",
    translation: "incertitude scientifique",
    example: "Scientific uncertainty reflects limitations in current knowledge rather than failure."
  }, {
    word: "competing theory",
    translation: "théorie concurrente",
    example: "Competing theories attempt to explain the same phenomenon differently."
  }, {
    word: "falsifiability",
    translation: "falsifiabilité",
    example: "Falsifiability distinguishes scientific theories from non-scientific claims."
  }, {
    word: "scientific revolution",
    translation: "révolution scientifique",
    example: "Scientific revolutions fundamentally transform our understanding of natural phenomena."
  }, {
    word: "unintended consequence",
    translation: "conséquence imprévue",
    example: "Technological innovations often produce unintended consequences that require attention."
  }, {
    word: "ethics in science",
    translation: "éthique scientifique",
    example: "Ethics in science addresses moral questions raised by research and applications."
  }, {
    word: "technology transfer",
    translation: "transfert de technologie",
    example: "Technology transfer moves innovations from laboratories to commercial applications."
  }, {
    word: "commercialization",
    translation: "commercialisation",
    example: "Commercialization transforms scientific discoveries into marketable products."
  }, {
    word: "patent",
    translation: "brevet",
    example: "The company secured a patent for its innovative manufacturing process."
  }, {
    word: "licensing",
    translation: "licence",
    example: "Licensing agreements allow others to use proprietary technology for a fee."
  }, {
    word: "spinoff company",
    translation: "entreprise dérivée",
    example: "The spinoff company was created to develop technology from university research."
  }, {
    word: "research and development",
    translation: "recherche et développement",
    example: "Research and development departments convert scientific knowledge into practical applications."
  }, {
    word: "prototype",
    translation: "prototype",
    example: "The prototype demonstrated the technology's potential to investors."
  }, {
    word: "scale-up",
    translation: "mise à l'échelle",
    example: "Scale-up involves adapting laboratory processes for industrial production."
  }, {
    word: "innovation ecosystem",
    translation: "écosystème d'innovation",
    example: "A healthy innovation ecosystem connects researchers, entrepreneurs, and investors."
  }, {
    word: "technology incubator",
    translation: "incubateur technologique",
    example: "The technology incubator provides resources for startups to develop their innovations."
  }, {
    word: "interdisciplinary",
    translation: "interdisciplinaire",
    example: "Interdisciplinary research combines insights from multiple academic fields."
  }, {
    word: "convergence",
    translation: "convergence",
    example: "The convergence of biology and engineering creates new biomedical technologies."
  }, {
    word: "systems thinking",
    translation: "pensée systémique",
    example: "Systems thinking examines how components interact within complex wholes."
  }, {
    word: "holistic approach",
    translation: "approche holistique",
    example: "A holistic approach considers problems in their full complexity rather than isolation."
  }, {
    word: "knowledge integration",
    translation: "intégration des connaissances",
    example: "Knowledge integration combines insights from disparate fields to solve problems."
  }, {
    word: "multidisciplinary team",
    translation: "équipe multidisciplinaire",
    example: "The multidisciplinary team included physicists, biologists, and computer scientists."
  }, {
    word: "transdisciplinary",
    translation: "transdisciplinaire",
    example: "Transdisciplinary research creates new conceptual frameworks beyond existing disciplines."
  }, {
    word: "boundary crossing",
    translation: "franchissement des frontières",
    example: "Boundary crossing between disciplines often leads to innovation."
  }, {
    word: "synergy",
    translation: "synergie",
    example: "The collaboration created synergy between computational and experimental approaches."
  }, {
    word: "science and society",
    translation: "science et société",
    example: "The relationship between science and society shapes research priorities and applications."
  }, {
    word: "public engagement",
    translation: "engagement public",
    example: "Public engagement helps citizens participate in scientific discussions."
  }, {
    word: "science communication",
    translation: "communication scientifique",
    example: "Effective science communication makes complex concepts accessible to non-specialists."
  }, {
    word: "science policy",
    translation: "politique scientifique",
    example: "Science policy determines funding priorities and regulatory frameworks."
  }, {
    word: "responsible innovation",
    translation: "innovation responsable",
    example: "Responsible innovation considers societal implications of new technologies."
  }, {
    word: "science literacy",
    translation: "culture scientifique",
    example: "Science literacy enables citizens to understand and evaluate scientific claims."
  }, {
    word: "citizen science",
    translation: "science citoyenne",
    example: "Citizen science involves non-professionals in scientific research projects."
  }, {
    word: "science advocacy",
    translation: "plaidoyer scientifique",
    example: "Science advocacy promotes evidence-based policies and scientific funding."
  }, {
    word: "technological impact",
    translation: "impact technologique",
    example: "Assessing technological impact helps anticipate societal consequences."
  }, {
    word: "science diplomacy",
    translation: "diplomatie scientifique",
    example: "Science diplomacy uses scientific collaboration to build international relationships."
  }, {
    word: "science outreach",
    translation: "vulgarisation scientifique",
    example: "Science outreach activities make research accessible to the general public."
  }, {
    word: "popular science",
    translation: "science populaire",
    example: "Popular science books explain complex theories in understandable language."
  }, {
    word: "science journalism",
    translation: "journalisme scientifique",
    example: "Science journalism reports research findings for non-specialist audiences."
  }, {
    word: "public understanding",
    translation: "compréhension publique",
    example: "Public understanding of science supports informed civic participation."
  }, {
    word: "accessible explanation",
    translation: "explication accessible",
    example: "An accessible explanation avoids jargon while maintaining accuracy."
  }, {
    word: "science education",
    translation: "éducation scientifique",
    example: "Science education develops critical thinking and analytical skills."
  }, {
    word: "science festival",
    translation: "festival scientifique",
    example: "The science festival attracted thousands of visitors to interactive exhibits."
  }, {
    word: "scientific visualization",
    translation: "visualisation scientifique",
    example: "Scientific visualization transforms complex data into comprehensible images."
  }, {
    word: "science museum",
    translation: "musée scientifique",
    example: "Science museums engage visitors through interactive demonstrations."
  }, {
    word: "explainer",
    translation: "vulgarisateur",
    example: "The explainer translated quantum physics concepts into everyday language."
  }, {
    word: "scientific illustration",
    translation: "illustration scientifique",
    example: "Scientific illustration clarifies complex structures and processes."
  }, {
    word: "science podcast",
    translation: "podcast scientifique",
    example: "The science podcast discusses recent discoveries for general audiences."
  }, {
    word: "digitalization",
    translation: "numérisation",
    example: "Digitalization transforms analog information into digital formats."
  }, {
    word: "simulation",
    translation: "simulation",
    example: "Computer simulation models complex systems without physical experiments."
  }, {
    word: "modeling",
    translation: "modélisation",
    example: "Mathematical modeling predicts system behavior under different conditions."
  }, {
    word: "quality control",
    translation: "contrôle qualité",
    example: "Quality control ensures products meet specified standards."
  }]
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,