{"version":3,"names":["_react","require","_asyncStorage","_interopRequireDefault","_assessmentDataHelper","useAssessment","_currentSectionData$q","_currentSectionData$q2","level","arguments","length","undefined","handleStorageError","error","operation","fallback","console","warn","STORAGE_KEY","ANSWERS_KEY","RESULTS_KEY","_useState","useState","_useState2","_slicedToArray2","default","sections","setSections","_useState3","_useState4","currentSection","setCurrentSection","_useState5","_useState6","currentQuestionIndex","setCurrentQuestionIndex","_useState7","_useState8","selectedAnswer","setSelectedAnswer","_useState9","_useState0","showFeedback","setShowFeedback","_useState1","_useState10","testCompleted","setTestCompleted","_useState11","_useState12","userAnswers","setUserAnswers","_useState13","_useState14","assessmentResults","setAssessmentResults","_useState15","_useState16","lastPosition","setLastPosition","_useState17","_useState18","loaded","setLoaded","_useState19","_useState20","assessmentData","setAssessmentData","isInitialized","useRef","useEffect","loadData","_ref","_asyncToGenerator2","log","data","getAssessmentData","hasData","dataKeys","Object","keys","validSections","filter","key","section","questions","Array","isArray","title","savedPosition","AsyncStorage","getItem","position","JSON","parse","positionError","savedAnswers","answers","answersError","savedResults","results","completedAt","resultsError","apply","currentSectionData","currentQuestion","totalSections","totalQuestionsInSection","savePosition","useCallback","dataToSave","sectionIndex","indexOf","questionIndex","timestamp","Date","now","setItem","stringify","saveAnswers","current","timeoutId","setTimeout","clearTimeout","changeSection","sectionKey","includes","changeQuestion","handleSelectAnswer","answerIndex","validateAnswer","isCorrect","correctAnswer","prev","assign","_defineProperty2","tryAgain","handleNext","currentSectionIndex","isLastSection","isLastQuestion","completed","nextSectionIndex","handlePrevious","_prevSectionData$ques","prevSection","prevSectionData","lastQuestionIndex","saveAssessmentResults","_ref4","resultsWithTimestamp","_x","resetAssessment","multiRemove","getStats","totalQuestions","reduce","sum","_assessmentData$secti","correctAnswers","answeredQuestions","values","forEach","answer","answeredInCurrentSection","percentage","getDisplayData","sectionTitle","questionNumber","canGoToPrevious","isLastQuestionInSection","stats","display","_default","exports"],"sources":["useAssessment.js"],"sourcesContent":["// src/screens/exercises/level-assessment/hooks/useAssessment.js - VERSION COMPLÈTE RESTAURÉE\r\n\r\nimport { useState, useEffect, useRef, useCallback } from 'react';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { getAssessmentData } from '../../../../utils/assessment/assessmentDataHelper';\r\n\r\n/**\r\n * 🎯 Hook unifié pour Level Assessment - VERSION COMPLÈTE\r\n * Toutes les fonctionnalités avancées restaurées : sauvegarde, restauration, gestion d'erreurs\r\n */\r\nconst useAssessment = (level = \"1\") => {\r\n  \r\n  // =================== ERROR HANDLING HELPER ===================\r\n  const handleStorageError = (error, operation, fallback = null) => {\r\n    console.warn(`Assessment storage error in ${operation}:`, error);\r\n    return fallback;\r\n  };\r\n\r\n  // =================== STORAGE KEYS ===================\r\n  const STORAGE_KEY = `assessment_${level}_position`;\r\n  const ANSWERS_KEY = `assessment_${level}_answers`;\r\n  const RESULTS_KEY = `assessment_${level}_results`;\r\n\r\n  // =================== STATE ===================\r\n  const [sections, setSections] = useState([]);\r\n  const [currentSection, setCurrentSection] = useState(null);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n  const [showFeedback, setShowFeedback] = useState(false);\r\n  const [testCompleted, setTestCompleted] = useState(false);\r\n  const [userAnswers, setUserAnswers] = useState({});\r\n  const [assessmentResults, setAssessmentResults] = useState({});\r\n  const [lastPosition, setLastPosition] = useState(null);\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [assessmentData, setAssessmentData] = useState({});\r\n\r\n  const isInitialized = useRef(false);\r\n\r\n  // =================== DATA LOADING COMPLET ===================\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      try {\r\n        console.log('🔄 DEBUG: Loading assessment data for level:', level);\r\n        \r\n        // Charger données d'évaluation\r\n        const data = getAssessmentData(level);\r\n        console.log('📊 DEBUG: Assessment data loaded:', {\r\n          hasData: !!data,\r\n          dataKeys: data ? Object.keys(data) : [],\r\n          level\r\n        });\r\n        \r\n        if (!data || Object.keys(data).length === 0) {\r\n          console.error('❌ DEBUG: No assessment data found for level:', level);\r\n          setLoaded(true);\r\n          return;\r\n        }\r\n        \r\n        // Filtrer les sections d'évaluation (exclure les métadonnées)\r\n        const validSections = Object.keys(data).filter(key => {\r\n          const section = data[key];\r\n          return section && \r\n                 typeof section === 'object' && \r\n                 section.questions && \r\n                 Array.isArray(section.questions) &&\r\n                 section.title;\r\n        });\r\n        \r\n        console.log('🔍 DEBUG: Valid sections found:', validSections);\r\n        \r\n        if (validSections.length === 0) {\r\n          console.error('❌ DEBUG: No valid sections found in data');\r\n          setLoaded(true);\r\n          return;\r\n        }\r\n        \r\n        // Initialiser les données\r\n        setAssessmentData(data);\r\n        setSections(validSections);\r\n\r\n        // Charger position sauvegardée\r\n        try {\r\n          const savedPosition = await AsyncStorage.getItem(STORAGE_KEY);\r\n          if (savedPosition) {\r\n            const position = JSON.parse(savedPosition);\r\n            console.log('💾 DEBUG: Position restored:', position);\r\n            setLastPosition(position);\r\n          }\r\n        } catch (positionError) {\r\n          handleStorageError(positionError, 'load position');\r\n        }\r\n\r\n        // Charger réponses sauvegardées\r\n        try {\r\n          const savedAnswers = await AsyncStorage.getItem(ANSWERS_KEY);\r\n          if (savedAnswers) {\r\n            const answers = JSON.parse(savedAnswers);\r\n            console.log('💾 DEBUG: Answers restored:', Object.keys(answers));\r\n            setUserAnswers(answers);\r\n          }\r\n        } catch (answersError) {\r\n          handleStorageError(answersError, 'load answers');\r\n        }\r\n\r\n        // Charger résultats sauvegardés\r\n        try {\r\n          const savedResults = await AsyncStorage.getItem(RESULTS_KEY);\r\n          if (savedResults) {\r\n            const results = JSON.parse(savedResults);\r\n            console.log('💾 DEBUG: Results restored:', results);\r\n            setAssessmentResults(results);\r\n            if (results.completedAt) {\r\n              setTestCompleted(true);\r\n            }\r\n          }\r\n        } catch (resultsError) {\r\n          handleStorageError(resultsError, 'load results');\r\n        }\r\n        \r\n        console.log('✅ DEBUG: Data loading completed successfully');\r\n        \r\n      } catch (error) {\r\n        console.error('❌ DEBUG: Error loading assessment data:', error);\r\n      } finally {\r\n        setLoaded(true);\r\n      }\r\n    };\r\n    \r\n    loadData();\r\n  }, [level]);\r\n\r\n  // =================== COMPUTED VALUES ===================\r\n  const currentSectionData = assessmentData[currentSection] || {};\r\n  const currentQuestion = currentSectionData.questions?.[currentQuestionIndex] || null;\r\n  const totalSections = sections.length;\r\n  const totalQuestionsInSection = currentSectionData.questions?.length || 0;\r\n\r\n  // =================== STORAGE FUNCTIONS ===================\r\n  const savePosition = useCallback(async () => {\r\n    try {\r\n      const dataToSave = {\r\n        sectionIndex: sections.indexOf(currentSection),\r\n        questionIndex: currentQuestionIndex,\r\n        timestamp: Date.now()\r\n      };\r\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(dataToSave));\r\n      console.log('💾 DEBUG: Position saved:', dataToSave);\r\n    } catch (error) {\r\n      handleStorageError(error, 'savePosition');\r\n    }\r\n  }, [currentSection, currentQuestionIndex, sections, STORAGE_KEY]);\r\n\r\n  const saveAnswers = useCallback(async () => {\r\n    try {\r\n      await AsyncStorage.setItem(ANSWERS_KEY, JSON.stringify(userAnswers));\r\n      console.log('💾 DEBUG: Answers saved');\r\n    } catch (error) {\r\n      handleStorageError(error, 'saveAnswers');\r\n    }\r\n  }, [userAnswers, ANSWERS_KEY]);\r\n\r\n  // =================== AUTO-SAVE EFFECTS ===================\r\n  useEffect(() => {\r\n    if (loaded && currentSection && isInitialized.current) {\r\n      savePosition();\r\n    }\r\n  }, [loaded, currentSection, savePosition]);\r\n\r\n  useEffect(() => {\r\n    if (loaded && currentSection && Object.keys(userAnswers).length > 0 && isInitialized.current) {\r\n      const timeoutId = setTimeout(() => {\r\n        saveAnswers();\r\n      }, 1000); // Délai de 1 seconde\r\n      \r\n      return () => clearTimeout(timeoutId);\r\n    }\r\n  }, [loaded, currentSection, userAnswers, saveAnswers]);\r\n\r\n  // =================== INITIALIZATION EFFECT ===================\r\n  useEffect(() => {\r\n    if (loaded && !currentSection && sections.length > 0 && !isInitialized.current) {\r\n      console.log('🚀 DEBUG: Initializing first section');\r\n      \r\n      // Restaurer position ou commencer au début\r\n      if (lastPosition && \r\n          lastPosition.sectionIndex >= 0 && \r\n          lastPosition.sectionIndex < sections.length &&\r\n          sections[lastPosition.sectionIndex]) {\r\n        console.log('🔄 DEBUG: Restoring saved position:', lastPosition);\r\n        setCurrentSection(sections[lastPosition.sectionIndex]);\r\n        setCurrentQuestionIndex(lastPosition.questionIndex || 0);\r\n      } else {\r\n        console.log('🆕 DEBUG: Starting from first section');\r\n        setCurrentSection(sections[0]);\r\n        setCurrentQuestionIndex(0);\r\n      }\r\n      \r\n      isInitialized.current = true;\r\n      console.log('✅ DEBUG: First section initialized successfully');\r\n    }\r\n  }, [loaded, sections, lastPosition]);\r\n\r\n  // =================== NAVIGATION ACTIONS ===================\r\n  const changeSection = useCallback((sectionKey) => {\r\n    if (sections.includes(sectionKey)) {\r\n      setCurrentSection(sectionKey);\r\n      setCurrentQuestionIndex(0);\r\n      setSelectedAnswer(null);\r\n      setShowFeedback(false);\r\n    }\r\n  }, [sections]);\r\n\r\n  const changeQuestion = useCallback((questionIndex) => {\r\n    if (questionIndex >= 0 && questionIndex < totalQuestionsInSection) {\r\n      setCurrentQuestionIndex(questionIndex);\r\n      setSelectedAnswer(null);\r\n      setShowFeedback(false);\r\n    }\r\n  }, [totalQuestionsInSection]);\r\n\r\n  const handleSelectAnswer = useCallback((answerIndex) => {\r\n    if (!showFeedback) {\r\n      setSelectedAnswer(answerIndex);\r\n    }\r\n  }, [showFeedback]);\r\n\r\n  const validateAnswer = useCallback(() => {\r\n    if (selectedAnswer !== null && !showFeedback) {\r\n      setShowFeedback(true);\r\n      \r\n      // Sauvegarder la réponse\r\n      const isCorrect = selectedAnswer === currentQuestion?.correctAnswer;\r\n      setUserAnswers(prev => ({\r\n        ...prev,\r\n        [currentSection]: {\r\n          ...prev[currentSection],\r\n          [currentQuestionIndex]: {\r\n            selectedAnswer,\r\n            isCorrect,\r\n            timestamp: Date.now()\r\n          }\r\n        }\r\n      }));\r\n    }\r\n  }, [selectedAnswer, showFeedback, currentQuestion, currentSection, currentQuestionIndex]);\r\n\r\n  const tryAgain = useCallback(() => {\r\n    setSelectedAnswer(null);\r\n    setShowFeedback(false);\r\n  }, []);\r\n\r\n  // =================== MAIN NAVIGATION ===================\r\n  const handleNext = useCallback(() => {\r\n    // Vérifier si fin de l'évaluation\r\n    const currentSectionIndex = sections.indexOf(currentSection);\r\n    const isLastSection = currentSectionIndex === sections.length - 1;\r\n    const isLastQuestion = currentQuestionIndex === totalQuestionsInSection - 1;\r\n\r\n    if (isLastSection && isLastQuestion) {\r\n      // Calculer et sauvegarder résultats finaux\r\n      setTestCompleted(true);\r\n      return { completed: true };\r\n    }\r\n\r\n    // Navigation normale\r\n    if (currentQuestionIndex < totalQuestionsInSection - 1) {\r\n      // Question suivante dans la section\r\n      setCurrentQuestionIndex(prev => prev + 1);\r\n    } else {\r\n      // Section suivante\r\n      const nextSectionIndex = currentSectionIndex + 1;\r\n      if (nextSectionIndex < sections.length) {\r\n        setCurrentSection(sections[nextSectionIndex]);\r\n        setCurrentQuestionIndex(0);\r\n      }\r\n    }\r\n    \r\n    setSelectedAnswer(null);\r\n    setShowFeedback(false);\r\n    return { completed: false };\r\n  }, [sections, currentSection, currentQuestionIndex, totalQuestionsInSection]);\r\n\r\n  const handlePrevious = useCallback(() => {\r\n    if (currentQuestionIndex > 0) {\r\n      // Question précédente dans la section\r\n      setCurrentQuestionIndex(prev => prev - 1);\r\n    } else {\r\n      // Section précédente\r\n      const currentSectionIndex = sections.indexOf(currentSection);\r\n      if (currentSectionIndex > 0) {\r\n        const prevSection = sections[currentSectionIndex - 1];\r\n        const prevSectionData = assessmentData[prevSection];\r\n        const lastQuestionIndex = (prevSectionData.questions?.length || 1) - 1;\r\n        \r\n        setCurrentSection(prevSection);\r\n        setCurrentQuestionIndex(lastQuestionIndex);\r\n      }\r\n    }\r\n    \r\n    setSelectedAnswer(null);\r\n    setShowFeedback(false);\r\n  }, [currentQuestionIndex, sections, currentSection, assessmentData]);\r\n\r\n  // =================== COMPLETION LOGIC ===================\r\n  const saveAssessmentResults = useCallback(async (results) => {\r\n    try {\r\n      const resultsWithTimestamp = {\r\n        ...results,\r\n        timestamp: Date.now(),\r\n      };\r\n      setAssessmentResults(resultsWithTimestamp);\r\n      await AsyncStorage.setItem(RESULTS_KEY, JSON.stringify(resultsWithTimestamp));\r\n      console.log('💾 DEBUG: Assessment results saved');\r\n    } catch (error) {\r\n      handleStorageError(error, 'saveAssessmentResults');\r\n      // Fallback: garder les résultats en mémoire même si la sauvegarde échoue\r\n    }\r\n  }, [RESULTS_KEY]);\r\n\r\n  const resetAssessment = useCallback(async () => {\r\n    try {\r\n      await AsyncStorage.multiRemove([STORAGE_KEY, RESULTS_KEY, ANSWERS_KEY]);\r\n      setCurrentSection(sections[0]);\r\n      setCurrentQuestionIndex(0);\r\n      setSelectedAnswer(null);\r\n      setShowFeedback(false);\r\n      setTestCompleted(false);\r\n      setUserAnswers({});\r\n      setAssessmentResults({});\r\n      setLastPosition({ sectionIndex: 0, questionIndex: 0 });\r\n      isInitialized.current = false;\r\n      console.log('🔄 DEBUG: Assessment reset successfully');\r\n    } catch (error) {\r\n      handleStorageError(error, 'resetAssessment');\r\n      // Fallback: réinitialiser l'état local même si la suppression échoue\r\n      setCurrentSection(sections[0]);\r\n      setCurrentQuestionIndex(0);\r\n      setSelectedAnswer(null);\r\n      setShowFeedback(false);\r\n      setTestCompleted(false);\r\n      setUserAnswers({});\r\n      setAssessmentResults({});\r\n      setLastPosition({ sectionIndex: 0, questionIndex: 0 });\r\n      isInitialized.current = false;\r\n    }\r\n  }, [STORAGE_KEY, RESULTS_KEY, ANSWERS_KEY, sections]);\r\n\r\n  // =================== COMPUTED STATS ===================\r\n  const getStats = useCallback(() => {\r\n    const totalQuestions = sections.reduce((sum, sectionKey) => {\r\n      return sum + (assessmentData[sectionKey]?.questions?.length || 0);\r\n    }, 0);\r\n\r\n    let correctAnswers = 0;\r\n    let answeredQuestions = 0;\r\n\r\n    Object.values(userAnswers).forEach(section => {\r\n      Object.values(section).forEach(answer => {\r\n        answeredQuestions++;\r\n        if (answer.isCorrect) {\r\n          correctAnswers++;\r\n        }\r\n      });\r\n    });\r\n\r\n    const currentSectionIndex = sections.indexOf(currentSection) + 1;\r\n    const answeredInCurrentSection = Object.keys(userAnswers[currentSection] || {}).length;\r\n\r\n    return {\r\n      totalQuestions,\r\n      answeredQuestions,\r\n      correctAnswers,\r\n      totalSections,\r\n      currentSectionIndex,\r\n      totalQuestionsInSection,\r\n      answeredInCurrentSection,\r\n      percentage: answeredQuestions > 0 ? (correctAnswers / answeredQuestions) * 100 : 0\r\n    };\r\n  }, [sections, assessmentData, userAnswers, currentSection, totalQuestionsInSection]);\r\n\r\n  // =================== COMPUTED DISPLAY ===================\r\n  const getDisplayData = useCallback(() => {\r\n    const currentSectionIndex = sections.indexOf(currentSection) + 1;\r\n    const sectionTitle = currentSectionData.title || `Section ${currentSectionIndex}`;\r\n    const questionNumber = currentQuestionIndex + 1;\r\n\r\n    return {\r\n      currentSectionIndex,\r\n      sectionTitle,\r\n      questionNumber,\r\n      currentQuestion,\r\n      currentSectionData\r\n    };\r\n  }, [sections, currentSection, currentSectionData, currentQuestionIndex, currentQuestion]);\r\n\r\n  // =================== VALIDATION ===================\r\n  const canGoToPrevious = useCallback(() => {\r\n    if (currentQuestionIndex > 0) return true;\r\n    const currentSectionIndex = sections.indexOf(currentSection);\r\n    return currentSectionIndex > 0;\r\n  }, [currentQuestionIndex, sections, currentSection]);\r\n\r\n  const isLastQuestionInSection = currentQuestionIndex === totalQuestionsInSection - 1;\r\n  const isLastSection = sections.indexOf(currentSection) === sections.length - 1;\r\n\r\n  return {\r\n    // State\r\n    currentSection,\r\n    currentQuestionIndex,\r\n    selectedAnswer,\r\n    showFeedback,\r\n    testCompleted,\r\n    userAnswers,\r\n    assessmentResults,\r\n    loaded,\r\n    \r\n    // Data\r\n    currentQuestion,\r\n    currentSectionData,\r\n    totalSections,\r\n    totalQuestionsInSection,\r\n    \r\n    // Actions\r\n    changeSection,\r\n    changeQuestion,\r\n    handleSelectAnswer,\r\n    validateAnswer,\r\n    tryAgain,\r\n    handleNext,\r\n    handlePrevious,\r\n    saveAssessmentResults,\r\n    resetAssessment,\r\n    setTestCompleted,\r\n    \r\n    // Computed\r\n    canGoToPrevious: canGoToPrevious(),\r\n    isLastQuestionInSection,\r\n    isLastSection,\r\n    stats: getStats(),\r\n    display: getDisplayData(),\r\n  };\r\n};\r\n\r\nexport default useAssessment;"],"mappings":"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","ignoreList":[]}