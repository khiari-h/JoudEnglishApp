483eb5cf69993aa23170d9c0c80bdecb
_getJestObj().mock('react-native/Libraries/Components/ScrollView/ScrollView', function () {
  var React = require('react');
  var ScrollView = jest.requireActual('react-native/Libraries/Components/ScrollView/ScrollView');
  var scrollToSpy = jest.fn();
  return Object.assign({}, ScrollView, {
    default: React.forwardRef(function (props, ref) {
      React.useImperativeHandle(ref, function () {
        return {
          scrollTo: scrollToSpy
        };
      });
      return (0, _jsxRuntime.jsx)(ScrollView, Object.assign({}, props));
    }),
    scrollToSpy: scrollToSpy
  });
});
_getJestObj().mock('../../../src/components/exercise-common/CategorySelector', function () {
  return mockComponent;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
require("@testing-library/jest-native");
var _CategorySelector = _interopRequireDefault(require("../../../src/components/exercise-common/CategorySelector"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.useFakeTimers();
jest.spyOn(_reactNative2.Animated, 'timing').mockImplementation(function (value, config) {
  return {
    start: function start(callback) {
      setTimeout(function () {
        if (callback) {
          callback({
            finished: true
          });
        }
      }, config.duration || 300);
    },
    stop: jest.fn()
  };
});
var mockComponent = jest.fn(function (props) {
  return (0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, props));
});
describe('CategorySelector Component', function () {
  var mockCategories = [{
    id: '1',
    name: 'Fruits'
  }, {
    id: '2',
    name: 'Vegetables'
  }, {
    id: '3',
    name: 'Dairy Products'
  }, {
    id: '4',
    name: 'Meat & Fish'
  }, {
    id: '5',
    name: 'Beverages'
  }];
  var stableProps = {
    categories: mockCategories,
    selectedCategory: '1',
    onSelectCategory: jest.fn()
  };
  var renderCategorySelector = function renderCategorySelector() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, stableProps, props)));
  };
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  describe('Rendering', function () {
    it('should render without crashing', function () {
      expect(renderCategorySelector()).toBeTruthy();
    });
    it('should render all categories correctly', function () {
      var _renderCategorySelect = renderCategorySelector(),
        getByText = _renderCategorySelect.getByText;
      mockCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should render categories in the correct order', function () {
      var _renderCategorySelect2 = renderCategorySelector(),
        getAllByRole = _renderCategorySelect2.getAllByRole;
      var categoryNames = getAllByRole('button').map(function (element) {
        return element.props.accessibilityLabel;
      });
      expect(categoryNames).toEqual(mockCategories.map(function (cat) {
        return cat.name;
      }));
    });
    it('should handle empty categories array gracefully', function () {
      var _renderCategorySelect3 = renderCategorySelector({
          categories: []
        }),
        queryByText = _renderCategorySelect3.queryByText;
      mockCategories.forEach(function (category) {
        expect(queryByText(category.name)).toBeNull();
      });
    });
    it('should highlight the selected category visually', function () {
      var _renderCategorySelect4 = renderCategorySelector({
          selectedCategory: '2'
        }),
        getByRole = _renderCategorySelect4.getByRole;
      var selectedPill = getByRole('button', {
        name: 'Vegetables'
      });
      expect(selectedPill).toHaveAccessibilityState({
        selected: true
      });
    });
  });
  describe('User Interactions', function () {
    it('should call onSelectCategory when a different category is pressed', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect5 = renderCategorySelector({
          selectedCategory: '1',
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect5.getByText;
      _reactNative.fireEvent.press(getByText('Vegetables'));
      expect(mockOnSelect).toHaveBeenCalledTimes(1);
      expect(mockOnSelect).toHaveBeenCalledWith('2');
    });
    it('should not call onSelectCategory when the same category is pressed', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect6 = renderCategorySelector({
          selectedCategory: '1',
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect6.getByText;
      _reactNative.fireEvent.press(getByText('Fruits'));
      expect(mockOnSelect).not.toHaveBeenCalled();
    });
    it('should call onSelectCategory with correct category id for each category', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect7 = renderCategorySelector({
          selectedCategory: '1',
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect7.getByText;
      var categoriesToTest = mockCategories.filter(function (cat) {
        return cat.id !== '1';
      });
      categoriesToTest.forEach(function (category) {
        _reactNative.fireEvent.press(getByText(category.name));
        expect(mockOnSelect).toHaveBeenCalledWith(category.id);
      });
      expect(mockOnSelect).toHaveBeenCalledTimes(categoriesToTest.length);
    });
  });
  describe('Animations', function () {
    it('should trigger press animations correctly', function () {
      var _renderCategorySelect8 = renderCategorySelector(),
        getByText = _renderCategorySelect8.getByText;
      var categoryPill = getByText('Vegetables');
      (0, _reactNative.act)(function () {
        (0, _reactNative.fireEvent)(categoryPill, 'pressIn');
        (0, _reactNative.fireEvent)(categoryPill, 'pressOut');
      });
      expect(categoryPill).toBeTruthy();
    });
    it('should handle rapid press interactions without crashing', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect9 = renderCategorySelector({
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect9.getByText;
      var categoryPill = getByText('Vegetables');
      (0, _reactNative.act)(function () {
        (0, _reactNative.fireEvent)(categoryPill, 'pressIn');
        (0, _reactNative.fireEvent)(categoryPill, 'pressOut');
        _reactNative.fireEvent.press(categoryPill);
        (0, _reactNative.fireEvent)(categoryPill, 'pressIn');
        (0, _reactNative.fireEvent)(categoryPill, 'pressOut');
      });
      expect(mockOnSelect).toHaveBeenCalledWith('2');
      expect(categoryPill).toBeTruthy();
    });
    it('should not trigger new animation if one is already in progress', (0, _asyncToGenerator2.default)(function* () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect0 = renderCategorySelector({
          selectedCategory: '1',
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect0.getByText;
      _reactNative.fireEvent.press(getByText('Vegetables'));
      expect(mockOnSelect).toHaveBeenCalledTimes(1);
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(100);
      });
      _reactNative.fireEvent.press(getByText('Dairy Products'));
      expect(mockOnSelect).toHaveBeenCalledTimes(1);
    }));
  });
  describe('Scrolling Behavior', function () {
    it('should scroll to selected category on mount', (0, _asyncToGenerator2.default)(function* () {
      var _renderCategorySelect1 = renderCategorySelector({
          selectedCategory: '4'
        }),
        getByText = _renderCategorySelect1.getByText;
      expect(getByText('Meat & Fish')).toBeTruthy();
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative2.ScrollView.scrollToSpy).toHaveBeenCalled();
      });
    }));
    it('should handle scrolling when selectedCategory changes', (0, _asyncToGenerator2.default)(function* () {
      var _renderCategorySelect10 = renderCategorySelector({
          selectedCategory: '1'
        }),
        rerender = _renderCategorySelect10.rerender;
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, stableProps, {
        selectedCategory: "5"
      })));
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative2.ScrollView.scrollToSpy).toHaveBeenCalledTimes(1);
      });
    }));
  });
  describe('Edge Cases', function () {
    it('should handle undefined selectedCategory gracefully', function () {
      var _renderCategorySelect11 = renderCategorySelector({
          selectedCategory: undefined
        }),
        getByText = _renderCategorySelect11.getByText;
      mockCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should handle null selectedCategory gracefully', function () {
      var _renderCategorySelect12 = renderCategorySelector({
          selectedCategory: null
        }),
        getByText = _renderCategorySelect12.getByText;
      mockCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should handle non-existent selectedCategory id', function () {
      var _renderCategorySelect13 = renderCategorySelector({
          selectedCategory: 'non-existent'
        }),
        getByText = _renderCategorySelect13.getByText;
      mockCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should handle missing onSelectCategory prop gracefully', function () {
      var _renderCategorySelect14 = renderCategorySelector({
          onSelectCategory: undefined
        }),
        getByText = _renderCategorySelect14.getByText;
      expect(function () {
        _reactNative.fireEvent.press(getByText('Vegetables'));
      }).not.toThrow();
    });
    it('should handle categories with special characters in names', function () {
      var specialCategories = [{
        id: '1',
        name: 'Café & Thé'
      }, {
        id: '2',
        name: 'Fruits & Légumes'
      }, {
        id: '3',
        name: 'Viande/Poisson'
      }];
      var _renderCategorySelect15 = renderCategorySelector({
          categories: specialCategories
        }),
        getByText = _renderCategorySelect15.getByText;
      specialCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should handle very long category names', function () {
      var longNameCategories = [{
        id: '1',
        name: 'This is a very long category name that might cause layout issues'
      }, {
        id: '2',
        name: 'Short'
      }];
      var _renderCategorySelect16 = renderCategorySelector({
          categories: longNameCategories
        }),
        getByText = _renderCategorySelect16.getByText;
      longNameCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
  });
  describe('Performance', function () {
    it('should not re-render unnecessarily when props do not change', function () {
      var _renderCategorySelect17 = renderCategorySelector(),
        rerender = _renderCategorySelect17.rerender;
      mockComponent.mockClear();
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, stableProps)));
      expect(mockComponent).toHaveBeenCalledTimes(0);
    });
    it('should handle large number of categories efficiently', function () {
      var manyCategories = Array.from({
        length: 100
      }, function (_, i) {
        return {
          id: `${i + 1}`,
          name: `Category ${i + 1}`
        };
      });
      var startTime = Date.now();
      var _renderCategorySelect18 = renderCategorySelector({
          categories: manyCategories
        }),
        queryAllByText = _renderCategorySelect18.queryAllByText;
      var endTime = Date.now();
      expect(endTime - startTime).toBeLessThan(1000);
      var categoryElements = queryAllByText(/^Category/);
      expect(categoryElements).toHaveLength(100);
    });
  });
  describe('Accessibility', function () {
    it('should have proper accessibility labels', function () {
      var _renderCategorySelect19 = renderCategorySelector(),
        getByLabelText = _renderCategorySelect19.getByLabelText;
      mockCategories.forEach(function (category) {
        var element = getByLabelText(category.name);
        expect(element).toBeTruthy();
      });
    });
    it('should support screen reader navigation', function () {
      var _renderCategorySelect20 = renderCategorySelector(),
        getAllByRole = _renderCategorySelect20.getAllByRole;
      var buttons = getAllByRole('button');
      expect(buttons).toHaveLength(mockCategories.length);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJSZWFjdCIsInJlcXVpcmUiLCJTY3JvbGxWaWV3IiwiamVzdCIsInJlcXVpcmVBY3R1YWwiLCJzY3JvbGxUb1NweSIsImZuIiwiT2JqZWN0IiwiYXNzaWduIiwiZGVmYXVsdCIsImZvcndhcmRSZWYiLCJwcm9wcyIsInJlZiIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJzY3JvbGxUbyIsIl9qc3hSdW50aW1lIiwianN4IiwibW9ja0NvbXBvbmVudCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfcmVhY3ROYXRpdmUyIiwiX0NhdGVnb3J5U2VsZWN0b3IiLCJfcmVxdWlyZSIsInVzZUZha2VUaW1lcnMiLCJzcHlPbiIsIkFuaW1hdGVkIiwibW9ja0ltcGxlbWVudGF0aW9uIiwidmFsdWUiLCJjb25maWciLCJzdGFydCIsImNhbGxiYWNrIiwic2V0VGltZW91dCIsImZpbmlzaGVkIiwiZHVyYXRpb24iLCJzdG9wIiwiZGVzY3JpYmUiLCJtb2NrQ2F0ZWdvcmllcyIsImlkIiwibmFtZSIsInN0YWJsZVByb3BzIiwiY2F0ZWdvcmllcyIsInNlbGVjdGVkQ2F0ZWdvcnkiLCJvblNlbGVjdENhdGVnb3J5IiwicmVuZGVyQ2F0ZWdvcnlTZWxlY3RvciIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsInJlbmRlciIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwiYWZ0ZXJFYWNoIiwidXNlUmVhbFRpbWVycyIsIml0IiwiZXhwZWN0IiwidG9CZVRydXRoeSIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdCIsImdldEJ5VGV4dCIsImZvckVhY2giLCJjYXRlZ29yeSIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDIiLCJnZXRBbGxCeVJvbGUiLCJjYXRlZ29yeU5hbWVzIiwibWFwIiwiZWxlbWVudCIsImFjY2Vzc2liaWxpdHlMYWJlbCIsInRvRXF1YWwiLCJjYXQiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3QzIiwicXVlcnlCeVRleHQiLCJ0b0JlTnVsbCIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDQiLCJnZXRCeVJvbGUiLCJzZWxlY3RlZFBpbGwiLCJ0b0hhdmVBY2Nlc3NpYmlsaXR5U3RhdGUiLCJzZWxlY3RlZCIsIm1vY2tPblNlbGVjdCIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDUiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0NiIsIm5vdCIsInRvSGF2ZUJlZW5DYWxsZWQiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3Q3IiwiY2F0ZWdvcmllc1RvVGVzdCIsImZpbHRlciIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDgiLCJjYXRlZ29yeVBpbGwiLCJhY3QiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3Q5IiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0MCIsImFkdmFuY2VUaW1lcnNCeVRpbWUiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3QxIiwid2FpdEZvciIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDEwIiwicmVyZW5kZXIiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3QxMSIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDEyIiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0MTMiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3QxNCIsInRvVGhyb3ciLCJzcGVjaWFsQ2F0ZWdvcmllcyIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDE1IiwibG9uZ05hbWVDYXRlZ29yaWVzIiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0MTYiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3QxNyIsIm1vY2tDbGVhciIsIm1hbnlDYXRlZ29yaWVzIiwiQXJyYXkiLCJmcm9tIiwiXyIsImkiLCJzdGFydFRpbWUiLCJEYXRlIiwibm93IiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0MTgiLCJxdWVyeUFsbEJ5VGV4dCIsImVuZFRpbWUiLCJ0b0JlTGVzc1RoYW4iLCJjYXRlZ29yeUVsZW1lbnRzIiwidG9IYXZlTGVuZ3RoIiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0MTkiLCJnZXRCeUxhYmVsVGV4dCIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDIwIiwiYnV0dG9ucyJdLCJzb3VyY2VzIjpbIkNhdGVnb3J5U2VsZWN0b3IudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBfX3Rlc3RzX18vY29tcG9uZW50cy9leGVyY2lzZS1jb21tb24vQ2F0ZWdvcnlTZWxlY3Rvci50ZXN0LmpzXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQsIGFjdCwgd2FpdEZvciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IEFuaW1hdGVkLCBTY3JvbGxWaWV3IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LW5hdGl2ZSc7XG5pbXBvcnQgQ2F0ZWdvcnlTZWxlY3RvciBmcm9tICcuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9leGVyY2lzZS1jb21tb24vQ2F0ZWdvcnlTZWxlY3Rvcic7XG5cbi8vIC0tLSBEw6lmaW5pdGlvbiBkZXMgTW9ja3MgcG91ciByw6lzb3VkcmUgbGVzIHByb2Jsw6htZXMgZGUgcmVuZHUvYW5pbWF0aW9uIC0tLVxuXG4vLyBBY3RpdmV6IGxlcyBmYXV4IHRpbWVycyBwb3VyIGNvbnRyw7RsZXIgbGUgdGVtcHMgZGFucyBsZXMgdGVzdHMgZCdhbmltYXRpb25cbmplc3QudXNlRmFrZVRpbWVycygpO1xuXG4vLyBDb3JyZWN0aW9uIDEgOiBNb2NrZXIgQW5pbWF0ZWQudGltaW5nIHBvdXIgc2ltdWxlciB1biBkw6lsYWlcbi8vIExlIG1vY2sgcXVlIGonYXZhaXMgZm91cm5pIMOpdGFpdCBjb3JyZWN0LCBpbCBuJ3kgYSByaWVuIMOgIGNoYW5nZXIgaWNpLlxuamVzdC5zcHlPbihBbmltYXRlZCwgJ3RpbWluZycpLm1vY2tJbXBsZW1lbnRhdGlvbigodmFsdWUsIGNvbmZpZykgPT4ge1xuICByZXR1cm4ge1xuICAgIHN0YXJ0OiAoY2FsbGJhY2spID0+IHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICBjYWxsYmFjayh7IGZpbmlzaGVkOiB0cnVlIH0pO1xuICAgICAgICB9XG4gICAgICB9LCBjb25maWcuZHVyYXRpb24gfHwgMzAwKTtcbiAgICB9LFxuICAgIHN0b3A6IGplc3QuZm4oKSxcbiAgfTtcbn0pO1xuXG4vLyBDb3JyZWN0aW9uIDIgOiBNb2NrZXIgU2Nyb2xsVmlldyBwb3VyIGfDqXJlciBsYSByZWYgZXQgbGEgZm9uY3Rpb24gc2Nyb2xsVG9cbi8vIExlIG1vY2sgcXVlIGonYXZhaXMgZm91cm5pIMOpdGFpdCBjb3JyZWN0LCBpbCBuJ3kgYSByaWVuIMOgIGNoYW5nZXIgaWNpLlxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUvTGlicmFyaWVzL0NvbXBvbmVudHMvU2Nyb2xsVmlldy9TY3JvbGxWaWV3JywgKCkgPT4ge1xuICBjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG4gIGNvbnN0IFNjcm9sbFZpZXcgPSBqZXN0LnJlcXVpcmVBY3R1YWwoJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvQ29tcG9uZW50cy9TY3JvbGxWaWV3L1Njcm9sbFZpZXcnKTtcbiAgY29uc3Qgc2Nyb2xsVG9TcHkgPSBqZXN0LmZuKCk7XG4gIHJldHVybiB7XG4gICAgLi4uU2Nyb2xsVmlldyxcbiAgICBkZWZhdWx0OiBSZWFjdC5mb3J3YXJkUmVmKChwcm9wcywgcmVmKSA9PiB7XG4gICAgICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgKCkgPT4gKHtcbiAgICAgICAgc2Nyb2xsVG86IHNjcm9sbFRvU3B5LFxuICAgICAgfSkpO1xuICAgICAgcmV0dXJuIDxTY3JvbGxWaWV3IHsuLi5wcm9wc30gLz47XG4gICAgfSksXG4gICAgc2Nyb2xsVG9TcHksXG4gIH07XG59KTtcblxuLy8gQ29ycmVjdGlvbiAzIDogTW9ja2VyIGxhIGZvbmN0aW9uIGRlIHJhcHBlbCBkZSByZS1yZW5kdVxuLy8gQ2UgbW9jayBlc3QgZXNzZW50aWVsIHBvdXIgbGUgdGVzdCBkZSBwZXJmb3JtYW5jZSBldCBuZSBkb2l0IHBhcyDDqnRyZSBzdXBwcmltw6kuXG5jb25zdCBtb2NrQ29tcG9uZW50ID0gamVzdC5mbigocHJvcHMpID0+IDxDYXRlZ29yeVNlbGVjdG9yIHsuLi5wcm9wc30gLz4pO1xuamVzdC5tb2NrKCcuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9leGVyY2lzZS1jb21tb24vQ2F0ZWdvcnlTZWxlY3RvcicsICgpID0+IG1vY2tDb21wb25lbnQpO1xuXG5cbmRlc2NyaWJlKCdDYXRlZ29yeVNlbGVjdG9yIENvbXBvbmVudCcsICgpID0+IHtcbiAgY29uc3QgbW9ja0NhdGVnb3JpZXMgPSBbXG4gICAgeyBpZDogJzEnLCBuYW1lOiAnRnJ1aXRzJyB9LFxuICAgIHsgaWQ6ICcyJywgbmFtZTogJ1ZlZ2V0YWJsZXMnIH0sXG4gICAgeyBpZDogJzMnLCBuYW1lOiAnRGFpcnkgUHJvZHVjdHMnIH0sXG4gICAgeyBpZDogJzQnLCBuYW1lOiAnTWVhdCAmIEZpc2gnIH0sXG4gICAgeyBpZDogJzUnLCBuYW1lOiAnQmV2ZXJhZ2VzJyB9LFxuICBdO1xuXG4gIC8vIENvcnJlY3Rpb24gNCA6IFV0aWxpc2F0aW9uIGQndW5lIHZhcmlhYmxlIGRlIHByb3BzIHN0YWJsZVxuICAvLyBBc3N1cmV6LXZvdXMgcXVlIGNldHRlIHZhcmlhYmxlIGVzdCByw6l1dGlsaXPDqWUgZGFucyBsZSB0ZXN0IGRlIHBlcmZvcm1hbmNlLlxuICBjb25zdCBzdGFibGVQcm9wcyA9IHtcbiAgICBjYXRlZ29yaWVzOiBtb2NrQ2F0ZWdvcmllcyxcbiAgICBzZWxlY3RlZENhdGVnb3J5OiAnMScsXG4gICAgb25TZWxlY3RDYXRlZ29yeTogamVzdC5mbigpLFxuICB9O1xuXG4gIGNvbnN0IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IgPSAocHJvcHMgPSB7fSkgPT4ge1xuICAgIHJldHVybiByZW5kZXIoPENhdGVnb3J5U2VsZWN0b3Igey4uLnN0YWJsZVByb3BzfSB7Li4ucHJvcHN9IC8+KTtcbiAgfTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICBqZXN0LnVzZUZha2VUaW1lcnMoKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LnVzZVJlYWxUaW1lcnMoKTtcbiAgfSk7XG5cbiAgLy8gLS0tIFJFTkRFUklORyAtLS1cbiAgZGVzY3JpYmUoJ1JlbmRlcmluZycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJlbmRlciB3aXRob3V0IGNyYXNoaW5nJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoKSkudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgcmVuZGVyIGFsbCBjYXRlZ29yaWVzIGNvcnJlY3RseScsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKCk7XG4gICAgICBtb2NrQ2F0ZWdvcmllcy5mb3JFYWNoKGNhdGVnb3J5ID0+IHtcbiAgICAgICAgZXhwZWN0KGdldEJ5VGV4dChjYXRlZ29yeS5uYW1lKSkudG9CZVRydXRoeSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCByZW5kZXIgY2F0ZWdvcmllcyBpbiB0aGUgY29ycmVjdCBvcmRlcicsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgZ2V0QWxsQnlSb2xlIH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKCk7XG4gICAgICBjb25zdCBjYXRlZ29yeU5hbWVzID0gZ2V0QWxsQnlSb2xlKCdidXR0b24nKS5tYXAoZWxlbWVudCA9PiBlbGVtZW50LnByb3BzLmFjY2Vzc2liaWxpdHlMYWJlbCk7XG4gICAgICBleHBlY3QoY2F0ZWdvcnlOYW1lcykudG9FcXVhbChtb2NrQ2F0ZWdvcmllcy5tYXAoY2F0ID0+IGNhdC5uYW1lKSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZW1wdHkgY2F0ZWdvcmllcyBhcnJheSBncmFjZWZ1bGx5JywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBxdWVyeUJ5VGV4dCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7IGNhdGVnb3JpZXM6IFtdIH0pO1xuICAgICAgbW9ja0NhdGVnb3JpZXMuZm9yRWFjaChjYXRlZ29yeSA9PiB7XG4gICAgICAgIGV4cGVjdChxdWVyeUJ5VGV4dChjYXRlZ29yeS5uYW1lKSkudG9CZU51bGwoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgaGlnaGxpZ2h0IHRoZSBzZWxlY3RlZCBjYXRlZ29yeSB2aXN1YWxseScsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgZ2V0QnlSb2xlIH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKHsgc2VsZWN0ZWRDYXRlZ29yeTogJzInIH0pO1xuICAgICAgY29uc3Qgc2VsZWN0ZWRQaWxsID0gZ2V0QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6ICdWZWdldGFibGVzJyB9KTtcbiAgICAgIGV4cGVjdChzZWxlY3RlZFBpbGwpLnRvSGF2ZUFjY2Vzc2liaWxpdHlTdGF0ZSh7IHNlbGVjdGVkOiB0cnVlIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyAtLS0gVVNFUiBJTlRFUkFDVElPTlMgLS0tXG4gIGRlc2NyaWJlKCdVc2VyIEludGVyYWN0aW9ucycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGNhbGwgb25TZWxlY3RDYXRlZ29yeSB3aGVuIGEgZGlmZmVyZW50IGNhdGVnb3J5IGlzIHByZXNzZWQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrT25TZWxlY3QgPSBqZXN0LmZuKCk7XG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7XG4gICAgICAgIHNlbGVjdGVkQ2F0ZWdvcnk6ICcxJyxcbiAgICAgICAgb25TZWxlY3RDYXRlZ29yeTogbW9ja09uU2VsZWN0XG4gICAgICB9KTtcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ1ZlZ2V0YWJsZXMnKSk7XG4gICAgICBleHBlY3QobW9ja09uU2VsZWN0KS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgICBleHBlY3QobW9ja09uU2VsZWN0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnMicpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgbm90IGNhbGwgb25TZWxlY3RDYXRlZ29yeSB3aGVuIHRoZSBzYW1lIGNhdGVnb3J5IGlzIHByZXNzZWQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrT25TZWxlY3QgPSBqZXN0LmZuKCk7XG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7XG4gICAgICAgIHNlbGVjdGVkQ2F0ZWdvcnk6ICcxJyxcbiAgICAgICAgb25TZWxlY3RDYXRlZ29yeTogbW9ja09uU2VsZWN0XG4gICAgICB9KTtcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ0ZydWl0cycpKTtcbiAgICAgIGV4cGVjdChtb2NrT25TZWxlY3QpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBjYWxsIG9uU2VsZWN0Q2F0ZWdvcnkgd2l0aCBjb3JyZWN0IGNhdGVnb3J5IGlkIGZvciBlYWNoIGNhdGVnb3J5JywgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja09uU2VsZWN0ID0gamVzdC5mbigpO1xuICAgICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3Ioe1xuICAgICAgICBzZWxlY3RlZENhdGVnb3J5OiAnMScsXG4gICAgICAgIG9uU2VsZWN0Q2F0ZWdvcnk6IG1vY2tPblNlbGVjdFxuICAgICAgfSk7XG4gICAgICBjb25zdCBjYXRlZ29yaWVzVG9UZXN0ID0gbW9ja0NhdGVnb3JpZXMuZmlsdGVyKGNhdCA9PiBjYXQuaWQgIT09ICcxJyk7XG4gICAgICBjYXRlZ29yaWVzVG9UZXN0LmZvckVhY2goY2F0ZWdvcnkgPT4ge1xuICAgICAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KGNhdGVnb3J5Lm5hbWUpKTtcbiAgICAgICAgZXhwZWN0KG1vY2tPblNlbGVjdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoY2F0ZWdvcnkuaWQpO1xuICAgICAgfSk7XG4gICAgICBleHBlY3QobW9ja09uU2VsZWN0KS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoY2F0ZWdvcmllc1RvVGVzdC5sZW5ndGgpO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyAtLS0gQU5JTUFUSU9OUyAtLS1cbiAgZGVzY3JpYmUoJ0FuaW1hdGlvbnMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCB0cmlnZ2VyIHByZXNzIGFuaW1hdGlvbnMgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoKTtcbiAgICAgIGNvbnN0IGNhdGVnb3J5UGlsbCA9IGdldEJ5VGV4dCgnVmVnZXRhYmxlcycpO1xuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgZmlyZUV2ZW50KGNhdGVnb3J5UGlsbCwgJ3ByZXNzSW4nKTtcbiAgICAgICAgZmlyZUV2ZW50KGNhdGVnb3J5UGlsbCwgJ3ByZXNzT3V0Jyk7XG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChjYXRlZ29yeVBpbGwpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSByYXBpZCBwcmVzcyBpbnRlcmFjdGlvbnMgd2l0aG91dCBjcmFzaGluZycsICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tPblNlbGVjdCA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKHsgb25TZWxlY3RDYXRlZ29yeTogbW9ja09uU2VsZWN0IH0pO1xuICAgICAgY29uc3QgY2F0ZWdvcnlQaWxsID0gZ2V0QnlUZXh0KCdWZWdldGFibGVzJyk7XG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICBmaXJlRXZlbnQoY2F0ZWdvcnlQaWxsLCAncHJlc3NJbicpO1xuICAgICAgICBmaXJlRXZlbnQoY2F0ZWdvcnlQaWxsLCAncHJlc3NPdXQnKTtcbiAgICAgICAgZmlyZUV2ZW50LnByZXNzKGNhdGVnb3J5UGlsbCk7XG4gICAgICAgIGZpcmVFdmVudChjYXRlZ29yeVBpbGwsICdwcmVzc0luJyk7XG4gICAgICAgIGZpcmVFdmVudChjYXRlZ29yeVBpbGwsICdwcmVzc091dCcpO1xuICAgICAgfSk7XG4gICAgICBleHBlY3QobW9ja09uU2VsZWN0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnMicpO1xuICAgICAgZXhwZWN0KGNhdGVnb3J5UGlsbCkudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuICAgIC8vIENvcnJlY3Rpb24gNSA6IExvZ2lxdWUgZGUgdGVzdCBwb3VyIGwnYW5pbWF0aW9uIGVuIGNvdXJzXG4gICAgLy8gQ2V0dGUgY29ycmVjdGlvbiBlc3QgcHVyZW1lbnQgbGnDqWUgYXUgdGVzdCwgcGFzIGF1IGNvbXBvc2FudCBsdWktbcOqbWUuXG4gICAgLy8gTCfDqWNoZWMgcHLDqWPDqWRlbnQgaW5kaXF1YWl0IHF1ZSBsZSBtb2NrIGRlIGwnYW5pbWF0aW9uIG5lIGJsb3F1YWl0IHBhcyB1biBzZWNvbmQgYXBwZWwuXG4gICAgLy8gRW4gdXRpbGlzYW50IHVzZUZha2VUaW1lcnMsIG9uIGNvbnRyw7RsZSBsJ2F2YW5jZW1lbnQgZHUgdGVtcHMgcG91ciBzaW11bGVyIGxhIGZpbiBkZSBsJ2FuaW1hdGlvbi5cbiAgICBpdCgnc2hvdWxkIG5vdCB0cmlnZ2VyIG5ldyBhbmltYXRpb24gaWYgb25lIGlzIGFscmVhZHkgaW4gcHJvZ3Jlc3MnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrT25TZWxlY3QgPSBqZXN0LmZuKCk7XG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7IHNlbGVjdGVkQ2F0ZWdvcnk6ICcxJywgb25TZWxlY3RDYXRlZ29yeTogbW9ja09uU2VsZWN0IH0pO1xuXG4gICAgICAvLyBQcmVtaWVyIGNsaWMsIGxhbmNlIHVuZSBhbmltYXRpb24uXG4gICAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCdWZWdldGFibGVzJykpO1xuICAgICAgZXhwZWN0KG1vY2tPblNlbGVjdCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuXG4gICAgICAvLyBBdmFuY2VyIGxlIHRlbXBzIGRlIDEwMG1zIChtb2lucyBxdWUgbGEgZHVyw6llIGRlIGwnYW5pbWF0aW9uIG1vY2vDqWUgcXVpIGVzdCAzMDBtcylcbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSgxMDApO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFNlY29uZGUgcHJlc3Npb24sIGVsbGUgZGV2cmFpdCDDqnRyZSBpZ25vcsOpZSBzaSBsYSBsb2dpcXVlIGR1IGNvbXBvc2FudCBlc3QgY29ycmVjdGUuXG4gICAgICAvLyBMZSBtb2NrIGVzdCBkw6lqw6AgY29uZmlndXLDqSBwb3VyIHVuZSBleMOpY3V0aW9uIGluc3RhbnRhbsOpZSwgYydlc3QgcG91cnF1b2kgbm91cyBkZXZvbnNcbiAgICAgIC8vIHbDqXJpZmllciBsYSBsb2dpcXVlIGRlIHZvdHJlIGNvbXBvc2FudC5cbiAgICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ0RhaXJ5IFByb2R1Y3RzJykpO1xuXG4gICAgICAvLyBMZSBub21icmUgZCdhcHBlbHMgbmUgZG9pdCBwYXMgYXZvaXIgY2hhbmfDqS5cbiAgICAgIGV4cGVjdChtb2NrT25TZWxlY3QpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gLS0tIFNDUk9MTElORyBCRUhBVklPUiAtLS1cbiAgZGVzY3JpYmUoJ1Njcm9sbGluZyBCZWhhdmlvcicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHNjcm9sbCB0byBzZWxlY3RlZCBjYXRlZ29yeSBvbiBtb3VudCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKHsgc2VsZWN0ZWRDYXRlZ29yeTogJzQnIH0pO1xuICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnTWVhdCAmIEZpc2gnKSkudG9CZVRydXRoeSgpO1xuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChTY3JvbGxWaWV3LnNjcm9sbFRvU3B5KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBzY3JvbGxpbmcgd2hlbiBzZWxlY3RlZENhdGVnb3J5IGNoYW5nZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlcmVuZGVyIH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKHsgc2VsZWN0ZWRDYXRlZ29yeTogJzEnIH0pO1xuICAgICAgcmVyZW5kZXIoXG4gICAgICAgIDxDYXRlZ29yeVNlbGVjdG9yIFxuICAgICAgICAgIHsuLi5zdGFibGVQcm9wc31cbiAgICAgICAgICBzZWxlY3RlZENhdGVnb3J5PVwiNVwiIFxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QoU2Nyb2xsVmlldy5zY3JvbGxUb1NweSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIC0tLSBFREdFIENBU0VTIC0tLVxuICBkZXNjcmliZSgnRWRnZSBDYXNlcycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSB1bmRlZmluZWQgc2VsZWN0ZWRDYXRlZ29yeSBncmFjZWZ1bGx5JywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoeyBzZWxlY3RlZENhdGVnb3J5OiB1bmRlZmluZWQgfSk7XG4gICAgICBtb2NrQ2F0ZWdvcmllcy5mb3JFYWNoKGNhdGVnb3J5ID0+IHtcbiAgICAgICAgZXhwZWN0KGdldEJ5VGV4dChjYXRlZ29yeS5uYW1lKSkudG9CZVRydXRoeSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbnVsbCBzZWxlY3RlZENhdGVnb3J5IGdyYWNlZnVsbHknLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7IHNlbGVjdGVkQ2F0ZWdvcnk6IG51bGwgfSk7XG4gICAgICBtb2NrQ2F0ZWdvcmllcy5mb3JFYWNoKGNhdGVnb3J5ID0+IHtcbiAgICAgICAgZXhwZWN0KGdldEJ5VGV4dChjYXRlZ29yeS5uYW1lKSkudG9CZVRydXRoeSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbm9uLWV4aXN0ZW50IHNlbGVjdGVkQ2F0ZWdvcnkgaWQnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7IHNlbGVjdGVkQ2F0ZWdvcnk6ICdub24tZXhpc3RlbnQnIH0pO1xuICAgICAgbW9ja0NhdGVnb3JpZXMuZm9yRWFjaChjYXRlZ29yeSA9PiB7XG4gICAgICAgIGV4cGVjdChnZXRCeVRleHQoY2F0ZWdvcnkubmFtZSkpLnRvQmVUcnV0aHkoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgaGFuZGxlIG1pc3Npbmcgb25TZWxlY3RDYXRlZ29yeSBwcm9wIGdyYWNlZnVsbHknLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7IG9uU2VsZWN0Q2F0ZWdvcnk6IHVuZGVmaW5lZCB9KTtcbiAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ1ZlZ2V0YWJsZXMnKSk7XG4gICAgICB9KS5ub3QudG9UaHJvdygpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgaGFuZGxlIGNhdGVnb3JpZXMgd2l0aCBzcGVjaWFsIGNoYXJhY3RlcnMgaW4gbmFtZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBzcGVjaWFsQ2F0ZWdvcmllcyA9IFtcbiAgICAgICAgeyBpZDogJzEnLCBuYW1lOiAnQ2Fmw6kgJiBUaMOpJyB9LFxuICAgICAgICB7IGlkOiAnMicsIG5hbWU6ICdGcnVpdHMgJiBMw6lndW1lcycgfSxcbiAgICAgICAgeyBpZDogJzMnLCBuYW1lOiAnVmlhbmRlL1BvaXNzb24nIH0sXG4gICAgICBdO1xuICAgICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoeyBjYXRlZ29yaWVzOiBzcGVjaWFsQ2F0ZWdvcmllcyB9KTtcbiAgICAgIHNwZWNpYWxDYXRlZ29yaWVzLmZvckVhY2goY2F0ZWdvcnkgPT4ge1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KGNhdGVnb3J5Lm5hbWUpKS50b0JlVHJ1dGh5KCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSB2ZXJ5IGxvbmcgY2F0ZWdvcnkgbmFtZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBsb25nTmFtZUNhdGVnb3JpZXMgPSBbXG4gICAgICAgIHsgaWQ6ICcxJywgbmFtZTogJ1RoaXMgaXMgYSB2ZXJ5IGxvbmcgY2F0ZWdvcnkgbmFtZSB0aGF0IG1pZ2h0IGNhdXNlIGxheW91dCBpc3N1ZXMnIH0sXG4gICAgICAgIHsgaWQ6ICcyJywgbmFtZTogJ1Nob3J0JyB9LFxuICAgICAgXTtcbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKHsgY2F0ZWdvcmllczogbG9uZ05hbWVDYXRlZ29yaWVzIH0pO1xuICAgICAgbG9uZ05hbWVDYXRlZ29yaWVzLmZvckVhY2goY2F0ZWdvcnkgPT4ge1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KGNhdGVnb3J5Lm5hbWUpKS50b0JlVHJ1dGh5KCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gLS0tIFBFUkZPUk1BTkNFIC0tLVxuICBkZXNjcmliZSgnUGVyZm9ybWFuY2UnLCAoKSA9PiB7XG4gICAgLy8gQ29ycmVjdGlvbiA2IDogVGVzdGVyIGxlIHJlLXJlbmR1IGRlIG1hbmnDqHJlIGNvcnJlY3RlXG4gICAgLy8gTGUgdGVzdCBvcmlnaW5hbCDDqWNob3VhaXQgcGFyY2UgcXVlIGxlcyBwcm9wcyDDqXRhaWVudCByZWNyw6nDqWVzLlxuICAgIC8vIEljaSwgbm91cyB1dGlsaXNvbnMgbCdvYmpldCBzdGFibGVQcm9wcyBwb3VyIGdhcmFudGlyIGxhIG3Dqm1lIHLDqWbDqXJlbmNlLlxuICAgIC8vIEwnw6ljaGVjIGQnb3JpZ2luZSDDqXRhaXQgZMO7IMOgIHVuIGJ1ZyBkYW5zIGxlIHRlc3QsIHBhcyBkYW5zIGxlIGNvZGUgZHUgY29tcG9zYW50LlxuICAgIGl0KCdzaG91bGQgbm90IHJlLXJlbmRlciB1bm5lY2Vzc2FyaWx5IHdoZW4gcHJvcHMgZG8gbm90IGNoYW5nZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVyZW5kZXIgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoKTtcbiAgICAgIG1vY2tDb21wb25lbnQubW9ja0NsZWFyKCk7XG4gICAgICByZXJlbmRlcig8Q2F0ZWdvcnlTZWxlY3RvciB7Li4uc3RhYmxlUHJvcHN9IC8+KTtcbiAgICAgIGV4cGVjdChtb2NrQ29tcG9uZW50KS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMCk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbGFyZ2UgbnVtYmVyIG9mIGNhdGVnb3JpZXMgZWZmaWNpZW50bHknLCAoKSA9PiB7XG4gICAgICBjb25zdCBtYW55Q2F0ZWdvcmllcyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDEwMCB9LCAoXywgaSkgPT4gKHtcbiAgICAgICAgaWQ6IGAke2kgKyAxfWAsXG4gICAgICAgIG5hbWU6IGBDYXRlZ29yeSAke2kgKyAxfWAsXG4gICAgICB9KSk7XG4gICAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgY29uc3QgeyBxdWVyeUFsbEJ5VGV4dCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7IGNhdGVnb3JpZXM6IG1hbnlDYXRlZ29yaWVzIH0pO1xuICAgICAgY29uc3QgZW5kVGltZSA9IERhdGUubm93KCk7XG4gICAgICBleHBlY3QoZW5kVGltZSAtIHN0YXJ0VGltZSkudG9CZUxlc3NUaGFuKDEwMDApO1xuICAgICAgY29uc3QgY2F0ZWdvcnlFbGVtZW50cyA9IHF1ZXJ5QWxsQnlUZXh0KC9eQ2F0ZWdvcnkvKTtcbiAgICAgIGV4cGVjdChjYXRlZ29yeUVsZW1lbnRzKS50b0hhdmVMZW5ndGgoMTAwKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gLS0tIEFDQ0VTU0lCSUxJVFkgLS0tXG4gIGRlc2NyaWJlKCdBY2Nlc3NpYmlsaXR5JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaGF2ZSBwcm9wZXIgYWNjZXNzaWJpbGl0eSBsYWJlbHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEJ5TGFiZWxUZXh0IH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKCk7XG4gICAgICBtb2NrQ2F0ZWdvcmllcy5mb3JFYWNoKGNhdGVnb3J5ID0+IHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGdldEJ5TGFiZWxUZXh0KGNhdGVnb3J5Lm5hbWUpO1xuICAgICAgICBleHBlY3QoZWxlbWVudCkudG9CZVRydXRoeSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBzdXBwb3J0IHNjcmVlbiByZWFkZXIgbmF2aWdhdGlvbicsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgZ2V0QWxsQnlSb2xlIH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKCk7XG4gICAgICBjb25zdCBidXR0b25zID0gZ2V0QWxsQnlSb2xlKCdidXR0b24nKTtcbiAgICAgIGV4cGVjdChidXR0b25zKS50b0hhdmVMZW5ndGgobW9ja0NhdGVnb3JpZXMubGVuZ3RoKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiJBQTZCQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMseURBQXlELEVBQUUsWUFBTTtFQUN6RSxJQUFNQyxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUM7RUFDOUIsSUFBTUMsVUFBVSxHQUFHQyxJQUFJLENBQUNDLGFBQWEsQ0FBQyx5REFBeUQsQ0FBQztFQUNoRyxJQUFNQyxXQUFXLEdBQUdGLElBQUksQ0FBQ0csRUFBRSxDQUFDLENBQUM7RUFDN0IsT0FBQUMsTUFBQSxDQUFBQyxNQUFBLEtBQ0tOLFVBQVU7SUFDYk8sT0FBTyxFQUFFVCxLQUFLLENBQUNVLFVBQVUsQ0FBQyxVQUFDQyxLQUFLLEVBQUVDLEdBQUcsRUFBSztNQUN4Q1osS0FBSyxDQUFDYSxtQkFBbUIsQ0FBQ0QsR0FBRyxFQUFFO1FBQUEsT0FBTztVQUNwQ0UsUUFBUSxFQUFFVDtRQUNaLENBQUM7TUFBQSxDQUFDLENBQUM7TUFDSCxPQUFPLElBQUFVLFdBQUEsQ0FBQUMsR0FBQSxFQUFDZCxVQUFVLEVBQUFLLE1BQUEsQ0FBQUMsTUFBQSxLQUFLRyxLQUFLLENBQUcsQ0FBQztJQUNsQyxDQUFDLENBQUM7SUFDRk4sV0FBVyxFQUFYQTtFQUFXO0FBRWYsQ0FBQyxDQUFDO0FBS0ZQLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDBEQUEwRCxFQUFFO0VBQUEsT0FBTWtCLGFBQWE7QUFBQSxFQUFDO0FBQUMsSUFBQUMsc0JBQUEsR0FBQWpCLE9BQUE7QUFBQSxJQUFBa0Isa0JBQUEsR0FBQUQsc0JBQUEsQ0FBQWpCLE9BQUE7QUEvQzNGLElBQUFtQixN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