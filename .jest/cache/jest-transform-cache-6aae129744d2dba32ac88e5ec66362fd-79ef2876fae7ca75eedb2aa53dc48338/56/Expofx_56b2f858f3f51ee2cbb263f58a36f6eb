dbaf881ffb32973dd50a0ec01301df82
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("./winter");
require("expo-asset");
var _expoConstants = _interopRequireDefault(require("expo-constants"));
var _reactNative = require("react-native");
var _ExpoGo = require("./environment/ExpoGo");
var _AppEntryNotFound = require("./errors/AppEntryNotFound");
var _ExpoErrorManager = require("./errors/ExpoErrorManager");
if ((0, _ExpoGo.isRunningInExpoGo)()) {
  var globalHandler = ErrorUtils.getGlobalHandler();
  ErrorUtils.setGlobalHandler((0, _ExpoErrorManager.createErrorHandler)(globalHandler));
}
if (__DEV__ && (0, _ExpoGo.isRunningInExpoGo)() && process.env.NODE_ENV === 'development') {
  ['android', 'ios'].forEach(function (platform) {
    var _Constants$expoConfig, _Constants$expoConfig2;
    if (_reactNative.Platform.OS === platform && ((_Constants$expoConfig = _expoConstants.default.expoConfig) == null || (_Constants$expoConfig = _Constants$expoConfig[platform]) == null ? void 0 : _Constants$expoConfig.newArchEnabled) !== true && ((_Constants$expoConfig2 = _expoConstants.default.expoConfig) == null ? void 0 : _Constants$expoConfig2.newArchEnabled) !== true) {
      requestAnimationFrame(function () {
        console.warn(`ðŸš¨ React Native's New Architecture is always enabled in Expo Go, but it is not explicitly enabled your project app config. This may lead to unexpected behavior when you create a production or development build. Set "newArchEnabled": true in your app.json.\nLearn more: https://docs.expo.dev/guides/new-architecture/`);
      });
    }
  });
}
var IS_RUNNING_IN_DEV_CLIENT = !!_reactNative.NativeModules.EXDevLauncher;
if (__DEV__ && _reactNative.LogBox != null && _reactNative.LogBox.ignoreLogs && ((0, _ExpoGo.isRunningInExpoGo)() || IS_RUNNING_IN_DEV_CLIENT)) {
  _reactNative.LogBox.ignoreLogs([/Open debugger to view warnings/]);
}
if (process.env.NODE_ENV !== 'production') {
  _reactNative.AppRegistry.registerComponent('main', function () {
    return _AppEntryNotFound.AppEntryNotFound;
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwiX2V4cG9Db25zdGFudHMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3JlYWN0TmF0aXZlIiwiX0V4cG9HbyIsIl9BcHBFbnRyeU5vdEZvdW5kIiwiX0V4cG9FcnJvck1hbmFnZXIiLCJpc1J1bm5pbmdJbkV4cG9HbyIsImdsb2JhbEhhbmRsZXIiLCJFcnJvclV0aWxzIiwiZ2V0R2xvYmFsSGFuZGxlciIsInNldEdsb2JhbEhhbmRsZXIiLCJjcmVhdGVFcnJvckhhbmRsZXIiLCJfX0RFVl9fIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiZm9yRWFjaCIsInBsYXRmb3JtIiwiX0NvbnN0YW50cyRleHBvQ29uZmlnIiwiX0NvbnN0YW50cyRleHBvQ29uZmlnMiIsIlBsYXRmb3JtIiwiT1MiLCJDb25zdGFudHMiLCJleHBvQ29uZmlnIiwibmV3QXJjaEVuYWJsZWQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjb25zb2xlIiwid2FybiIsIklTX1JVTk5JTkdfSU5fREVWX0NMSUVOVCIsIk5hdGl2ZU1vZHVsZXMiLCJFWERldkxhdW5jaGVyIiwiTG9nQm94IiwiaWdub3JlTG9ncyIsIkFwcFJlZ2lzdHJ5IiwicmVnaXN0ZXJDb21wb25lbnQiLCJBcHBFbnRyeU5vdEZvdW5kIl0sInNvdXJjZXMiOlsiRXhwby5meC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gbG9hZCBleHBvLWFzc2V0IGltbWVkaWF0ZWx5IHRvIHNldCBhIGN1c3RvbSBgc291cmNlYCB0cmFuc2Zvcm1lciBpbiBSZWFjdCBOYXRpdmVcbmltcG9ydCAnLi93aW50ZXInO1xuaW1wb3J0ICdleHBvLWFzc2V0JztcblxuaW1wb3J0IENvbnN0YW50cyBmcm9tICdleHBvLWNvbnN0YW50cyc7XG5pbXBvcnQgeyBBcHBSZWdpc3RyeSwgTmF0aXZlTW9kdWxlcywgTG9nQm94LCBQbGF0Zm9ybSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbmltcG9ydCB7IGlzUnVubmluZ0luRXhwb0dvIH0gZnJvbSAnLi9lbnZpcm9ubWVudC9FeHBvR28nO1xuaW1wb3J0IHsgQXBwRW50cnlOb3RGb3VuZCB9IGZyb20gJy4vZXJyb3JzL0FwcEVudHJ5Tm90Rm91bmQnO1xuaW1wb3J0IHsgY3JlYXRlRXJyb3JIYW5kbGVyIH0gZnJvbSAnLi9lcnJvcnMvRXhwb0Vycm9yTWFuYWdlcic7XG5cbmlmIChpc1J1bm5pbmdJbkV4cG9HbygpKSB7XG4gIC8vIHNldCB1cCBzb21lIGltcHJvdmVtZW50cyB0byBjb21tb25seSBsb2dnZWQgZXJyb3IgbWVzc2FnZXMgc3RlbW1pbmcgZnJvbSByZWFjdC1uYXRpdmVcbiAgY29uc3QgZ2xvYmFsSGFuZGxlciA9IEVycm9yVXRpbHMuZ2V0R2xvYmFsSGFuZGxlcigpO1xuICBFcnJvclV0aWxzLnNldEdsb2JhbEhhbmRsZXIoY3JlYXRlRXJyb3JIYW5kbGVyKGdsb2JhbEhhbmRsZXIpKTtcbn1cblxuLy8gV2FybiBpZiB0aGUgTmV3IEFyY2hpdGVjdHVyZSBpcyBub3QgZXhwbGljaXRseSBlbmFibGVkIGluIHRoZSBhcHAgY29uZmlnIGFuZCB3ZSBhcmUgcnVubmluZyBpbiBFeHBvIEdvLlxuLy8gVGhpcyBjb3VsZCBiZSBwcm9ibGVtYXRpYyBiZWNhdXNlIHlvdSB3aWxsIGJlIGRldmVsb3BpbmcgeW91ciBhcHAgd2l0aCB0aGUgTmV3IEFyY2hpdGVjdHVyZSBlbmFibGVkIGFuZFxuLy8gYnV0IHlvdXIgYnVpbGRzIHdpbGwgaGF2ZSB0aGUgTmV3IEFyY2hpdGVjdHVyZSBkaXNhYmxlZC5cbmlmIChfX0RFVl9fICYmIGlzUnVubmluZ0luRXhwb0dvKCkgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgWydhbmRyb2lkJywgJ2lvcyddLmZvckVhY2goKHBsYXRmb3JtKSA9PiB7XG4gICAgaWYgKFxuICAgICAgUGxhdGZvcm0uT1MgPT09IHBsYXRmb3JtICYmXG4gICAgICBDb25zdGFudHMuZXhwb0NvbmZpZz8uW3BsYXRmb3JtXT8ubmV3QXJjaEVuYWJsZWQgIT09IHRydWUgJiZcbiAgICAgIENvbnN0YW50cy5leHBvQ29uZmlnPy5uZXdBcmNoRW5hYmxlZCAhPT0gdHJ1ZVxuICAgICkge1xuICAgICAgLy8gV3JhcCBpdCBpbiByQUYgdG8gc2hvdyB0aGUgd2FybmluZyBhZnRlciB0aGUgUmVhY3QgTmF0aXZlIERldlRvb2xzIG1lc3NhZ2VcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICBg8J+aqCBSZWFjdCBOYXRpdmUncyBOZXcgQXJjaGl0ZWN0dXJlIGlzIGFsd2F5cyBlbmFibGVkIGluIEV4cG8gR28sIGJ1dCBpdCBpcyBub3QgZXhwbGljaXRseSBlbmFibGVkIHlvdXIgcHJvamVjdCBhcHAgY29uZmlnLiBUaGlzIG1heSBsZWFkIHRvIHVuZXhwZWN0ZWQgYmVoYXZpb3Igd2hlbiB5b3UgY3JlYXRlIGEgcHJvZHVjdGlvbiBvciBkZXZlbG9wbWVudCBidWlsZC4gU2V0IFwibmV3QXJjaEVuYWJsZWRcIjogdHJ1ZSBpbiB5b3VyIGFwcC5qc29uLlxcbkxlYXJuIG1vcmU6IGh0dHBzOi8vZG9jcy5leHBvLmRldi9ndWlkZXMvbmV3LWFyY2hpdGVjdHVyZS9gXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufVxuXG4vLyBEaXNhYmxlIHRoZSBcIk9wZW4gZGVidWdnZXIgdG8gdmlldyB3YXJuaW5nc1wiIFJlYWN0IE5hdGl2ZSBEZXZUb29scyB3YXJuaW5nIGluXG4vLyBFeHBvIEdvIGFuZCBleHBvLWRldi1jbGllbnQsIGJlY2F1c2UgbGF1bmNoaW5nIHRoZSBkZWJ1Z2dlciBmcm9tIHRoZXJlIHdpbGwgbm90XG4vLyBnZXQgdGhlIGNvcnJlY3QgSlMgdGFyZ2V0LlxuY29uc3QgSVNfUlVOTklOR19JTl9ERVZfQ0xJRU5UID0gISFOYXRpdmVNb2R1bGVzLkVYRGV2TGF1bmNoZXI7XG5pZiAoX19ERVZfXyAmJiBMb2dCb3g/Lmlnbm9yZUxvZ3MgJiYgKGlzUnVubmluZ0luRXhwb0dvKCkgfHwgSVNfUlVOTklOR19JTl9ERVZfQ0xJRU5UKSkge1xuICBMb2dCb3guaWdub3JlTG9ncyhbL09wZW4gZGVidWdnZXIgdG8gdmlldyB3YXJuaW5ncy9dKTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gUmVnaXN0ZXIgYSBkZWZhdWx0IGNvbXBvbmVudCBhbmQgZXhwZWN0IGByZWdpc3RlclJvb3RDb21wb25lbnRgIHRvIGJlIGNhbGxlZCBsYXRlciBhbmQgdXBkYXRlIGl0LlxuICBBcHBSZWdpc3RyeS5yZWdpc3RlckNvbXBvbmVudCgnbWFpbicsICgpID0+IEFwcEVudHJ5Tm90Rm91bmQpO1xufVxuIl0sIm1hcHBpbmdzIjoiO0FBQ0FBLE9BQUE7QUFDQUEsT0FBQTtBQUVBLElBQUFDLGNBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFHLFlBQUEsR0FBQUgsT0FBQTtBQUVBLElBQUFJLE9BQUEsR0FBQUosT0FBQTtBQUNBLElBQUFLLGlCQUFBLEdBQUFMLE9BQUE7QUFDQSxJQUFBTSxpQkFBQSxHQUFBTixPQUFBO0FBRUEsSUFBSSxJQUFBTyx5QkFBaUIsRUFBQyxDQUFDLEVBQUU7RUFFdkIsSUFBTUMsYUFBYSxHQUFHQyxVQUFVLENBQUNDLGdCQUFnQixDQUFDLENBQUM7RUFDbkRELFVBQVUsQ0FBQ0UsZ0JBQWdCLENBQUMsSUFBQUMsb0NBQWtCLEVBQUNKLGFBQWEsQ0FBQyxDQUFDO0FBQ2hFO0FBS0EsSUFBSUssT0FBTyxJQUFJLElBQUFOLHlCQUFpQixFQUFDLENBQUMsSUFBSU8sT0FBTyxDQUFDQyxHQUFHLENBQUNDLFFBQVEsS0FBSyxhQUFhLEVBQUU7RUFDNUUsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUNDLE9BQU8sQ0FBQyxVQUFDQyxRQUFRLEVBQUs7SUFBQSxJQUFBQyxxQkFBQSxFQUFBQyxzQkFBQTtJQUN2QyxJQUNFQyxxQkFBUSxDQUFDQyxFQUFFLEtBQUtKLFFBQVEsSUFDeEIsRUFBQUMscUJBQUEsR0FBQUksc0JBQVMsQ0FBQ0MsVUFBVSxjQUFBTCxxQkFBQSxHQUFwQkEscUJBQUEsQ0FBdUJELFFBQVEsQ0FBQyxxQkFBaENDLHFCQUFBLENBQWtDTSxjQUFjLE1BQUssSUFBSSxJQUN6RCxFQUFBTCxzQkFBQSxHQUFBRyxzQkFBUyxDQUFDQyxVQUFVLHFCQUFwQkosc0JBQUEsQ0FBc0JLLGNBQWMsTUFBSyxJQUFJLEVBQzdDO01BRUFDLHFCQUFxQixDQUFDLFlBQU07UUFDMUJDLE9BQU8sQ0FBQ0MsSUFBSSxDQUNWLDZUQUNGLENBQUM7TUFDSCxDQUFDLENBQUM7SUFDSjtFQUNGLENBQUMsQ0FBQztBQUNKO0FBS0EsSUFBTUMsd0JBQXdCLEdBQUcsQ0FBQyxDQUFDQywwQkFBYSxDQUFDQyxhQUFhO0FBQzlELElBQUlsQixPQUFPLElBQUltQixtQkFBTSxZQUFOQSxtQkFBTSxDQUFFQyxVQUFVLEtBQUssSUFBQTFCLHlCQUFpQixFQUFDLENBQUMsSUFBSXNCLHdCQUF3QixDQUFDLEVBQUU7RUFDdEZHLG1CQUFNLENBQUNDLFVBQVUsQ0FBQyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7QUFDdkQ7QUFFQSxJQUFJbkIsT0FBTyxDQUFDQyxHQUFHLENBQUNDLFFBQVEsS0FBSyxZQUFZLEVBQUU7RUFFekNrQix3QkFBVyxDQUFDQyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUU7SUFBQSxPQUFNQyxrQ0FBZ0I7RUFBQSxFQUFDO0FBQy9EIiwiaWdub3JlTGlzdCI6W119