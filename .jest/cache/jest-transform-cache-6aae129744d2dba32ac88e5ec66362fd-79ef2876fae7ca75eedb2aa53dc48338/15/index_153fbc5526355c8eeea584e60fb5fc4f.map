{"version":3,"names":["_errorCorrectionC1Full","_interopRequireDefault","require","_errorCorrectionC1Identify","_errorCorrectionC1MultipleChoice","allExercises","concat","_toConsumableArray2","default","errorCorrectionC1Full","errorCorrectionC1Identify","errorCorrectionC1MultipleChoice","sort","a","b","categoryId","typeOrder","type","errorCorrectionC1","level","totalExercises","length","statistics","full","identify","multiple_choice","byCategory","name","count","categories","id","description","exerciseCount","difficulty","color","topics","commonErrors","skillsTargeted","exercises","getExercisesByCategory","filter","exercise","getExercisesByType","getExercisesByCategoryAndType","getExpertLevelExercises","wordCount","text","split","hasAdvancedVocab","getCulturalReferenceExercises","culturalKeywords","some","keyword","toLowerCase","includes","getAcademicPrecisionExercises","academicKeywords","getStylisticExercises","explanation","validateStructure","requiredFields","validTypes","every","hasRequiredFields","field","Object","prototype","hasOwnProperty","call","undefined","hasValidType","hasValidCategory","hasExpertComplexity","hasSophisticatedVocab","hasTypeSpecificFields","choices","Array","isArray","correctChoiceIndex","errorPositions","getSummary","totalErrorPositions","ex","reduce","sum","totalTextLength","expertExercises","culturalExercises","academicExercises","focus","progression","distribution","complexity","averageTextLength","Math","round","averageWordCount","averageErrorsPerExercise","expertExercisesPercentage","culturalReferencePercentage","academicFocusPercentage","_default","exports"],"sources":["index.js"],"sourcesContent":["// src/data/exercises/errorCorrection/C1/index.js\r\n\r\nimport errorCorrectionC1Full from './categories/errorCorrectionC1Full';\r\nimport errorCorrectionC1Identify from './categories/errorCorrectionC1Identify';\r\nimport errorCorrectionC1MultipleChoice from './categories/errorCorrectionC1MultipleChoice';\r\n\r\n// Combine all exercises from the 3 files\r\nconst allExercises = [\r\n  ...errorCorrectionC1Full,\r\n  ...errorCorrectionC1Identify,\r\n  ...errorCorrectionC1MultipleChoice\r\n];\r\n\r\n// Sort exercises by categoryId to maintain logical order\r\nallExercises.sort((a, b) => {\r\n  if (a.categoryId !== b.categoryId) {\r\n    return a.categoryId - b.categoryId;\r\n  }\r\n  // Within same category, order by type: full, identify, multiple_choice\r\n  const typeOrder = { 'full': 1, 'identify': 2, 'multiple_choice': 3 };\r\n  return typeOrder[a.type] - typeOrder[b.type];\r\n});\r\n\r\nconst errorCorrectionC1 = {\r\n  level: \"C1\",\r\n  totalExercises: allExercises.length,\r\n\r\n  // Statistics by type\r\n  statistics: {\r\n    full: errorCorrectionC1Full.length,\r\n    identify: errorCorrectionC1Identify.length,\r\n    multiple_choice: errorCorrectionC1MultipleChoice.length,\r\n    byCategory: {\r\n      1: { name: \"Nuanced Grammar & Style\", count: 9 },          // 3 full + 4 identify + 2 multiple_choice\r\n      2: { name: \"Advanced Discourse & Rhetoric\", count: 10 },  // 3 full + 4 identify + 3 multiple_choice\r\n      3: { name: \"Cultural & Contextual Language\", count: 9 },   // 3 full + 4 identify + 2 multiple_choice\r\n      4: { name: \"Complex Argumentation\", count: 11 },          // 4 full + 4 identify + 3 multiple_choice\r\n      5: { name: \"Linguistic Precision\", count: 9 }             // 3 full + 4 identify + 2 multiple_choice\r\n    }\r\n  },\r\n\r\n  // Categories metadata for C1 expert level\r\n  categories: [\r\n    {\r\n      id: 1,\r\n      name: \"Nuanced Grammar & Style\",\r\n      description: \"Sophisticated grammatical structures, stylistic nuances, advanced syntax\",\r\n      exerciseCount: 9,\r\n      difficulty: \"Expert\",\r\n      color: \"#3b82f6\",\r\n      topics: [\"complex inversions\", \"parallel structures\", \"nuanced modality\", \"sophisticated conjunctions\", \"advanced syntax\"],\r\n      commonErrors: [\"tense inconsistency\", \"redundant expressions\", \"inappropriate register\"],\r\n      skillsTargeted: [\"grammatical sophistication\", \"stylistic awareness\", \"syntactic complexity\", \"academic precision\"]\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"Advanced Discourse & Rhetoric\",\r\n      description: \"Rhetorical devices, advanced discourse markers, persuasive language structures\",\r\n      exerciseCount: 10,\r\n      difficulty: \"Expert\",\r\n      color: \"#10b981\",\r\n      topics: [\"rhetorical devices\", \"advanced connectors\", \"discourse sophistication\", \"formal transitions\", \"academic argumentation\"],\r\n      commonErrors: [\"inappropriate connectors\", \"redundant hedging\", \"informal discourse markers\"],\r\n      skillsTargeted: [\"rhetorical competence\", \"advanced argumentation\", \"discourse mastery\", \"academic sophistication\"]\r\n    },\r\n    {\r\n      id: 3,\r\n      name: \"Cultural & Contextual Language\",\r\n      description: \"Cultural references, idiomatic sophistication, contextual appropriateness\",\r\n      exerciseCount: 9,\r\n      difficulty: \"Expert\",\r\n      color: \"#f59e0b\",\r\n      topics: [\"cultural allusions\", \"mythological references\", \"sophisticated idioms\", \"contextual precision\", \"literary references\"],\r\n      commonErrors: [\"incorrect cultural references\", \"inappropriate register\", \"spelling of cultural terms\"],\r\n      skillsTargeted: [\"cultural competence\", \"implicit understanding\", \"contextual sensitivity\", \"literary knowledge\"]\r\n    },\r\n    {\r\n      id: 4,\r\n      name: \"Complex Argumentation\",\r\n      description: \"Advanced argumentative structures, logical precision, academic reasoning\",\r\n      exerciseCount: 11,\r\n      difficulty: \"Expert\",\r\n      color: \"#8b5cf6\",\r\n      topics: [\"complex reasoning\", \"logical structures\", \"academic argumentation\", \"analytical precision\", \"empirical reasoning\"],\r\n      commonErrors: [\"misused logical terms\", \"unsupported claims\", \"redundant qualifications\", \"imprecise terminology\"],\r\n      skillsTargeted: [\"analytical thinking\", \"logical precision\", \"academic discourse\", \"critical reasoning\"]\r\n    },\r\n    {\r\n      id: 5,\r\n      name: \"Linguistic Precision\",\r\n      description: \"Precise word choice, semantic nuances, register mastery, conciseness\",\r\n      exerciseCount: 9,\r\n      difficulty: \"Expert\",\r\n      color: \"#ef4444\",\r\n      topics: [\"semantic precision\", \"register mastery\", \"lexical sophistication\", \"conciseness\", \"elegant expression\"],\r\n      commonErrors: [\"redundant expressions\", \"wordy constructions\", \"imprecise vocabulary\", \"inappropriate formality\"],\r\n      skillsTargeted: [\"lexical precision\", \"semantic awareness\", \"register expertise\", \"expressive economy\"]\r\n    }\r\n  ],\r\n\r\n  // All exercises combined and sorted\r\n  exercises: allExercises,\r\n\r\n  // Advanced helper methods for C1 level\r\n  getExercisesByCategory: (categoryId) => {\r\n    return allExercises.filter(exercise => exercise.categoryId === categoryId);\r\n  },\r\n\r\n  getExercisesByType: (type) => {\r\n    return allExercises.filter(exercise => exercise.type === type);\r\n  },\r\n\r\n  getExercisesByCategoryAndType: (categoryId, type) => {\r\n    return allExercises.filter(exercise => \r\n      exercise.categoryId === categoryId && exercise.type === type\r\n    );\r\n  },\r\n\r\n  // Get exercises by specific expert skills\r\n  getExpertLevelExercises: () => {\r\n    return allExercises.filter(exercise => {\r\n      const wordCount = exercise.text.split(' ').length;\r\n      const hasAdvancedVocab = exercise.text.length > 100;\r\n      return wordCount >= 15 && hasAdvancedVocab; // Very sophisticated texts\r\n    });\r\n  },\r\n\r\n  // Get exercises with cultural references\r\n  getCulturalReferenceExercises: () => {\r\n    return allExercises.filter(exercise => {\r\n      const culturalKeywords = ['Sisyphean', 'Kafkaesque', 'Machiavellian', 'Pyrrhic', 'Achilles', 'quixotic'];\r\n      return culturalKeywords.some(keyword => \r\n        exercise.text.toLowerCase().includes(keyword.toLowerCase())\r\n      );\r\n    });\r\n  },\r\n\r\n  // Get exercises focusing on academic precision\r\n  getAcademicPrecisionExercises: () => {\r\n    return allExercises.filter(exercise => {\r\n      const academicKeywords = ['research', 'methodology', 'hypothesis', 'empirical', 'evidence'];\r\n      return academicKeywords.some(keyword => \r\n        exercise.text.toLowerCase().includes(keyword)\r\n      );\r\n    });\r\n  },\r\n\r\n  // Get exercises for stylistic sophistication\r\n  getStylisticExercises: () => {\r\n    return allExercises.filter(exercise => {\r\n      return exercise.categoryId === 1 || exercise.categoryId === 5 ||\r\n             exercise.explanation.toLowerCase().includes('style') ||\r\n             exercise.explanation.toLowerCase().includes('sophisticated');\r\n    });\r\n  },\r\n\r\n  // Enhanced validation for C1 expert level\r\n  validateStructure: () => {\r\n    const requiredFields = ['categoryId', 'type', 'text', 'correctedText', 'hint', 'explanation'];\r\n    const validTypes = ['full', 'identify', 'multiple_choice'];\r\n\r\n    return allExercises.every(exercise => {\r\n      // Check required fields\r\n      const hasRequiredFields = requiredFields.every(field => \r\n        Object.prototype.hasOwnProperty.call(exercise, field) && exercise[field] !== undefined\r\n      );\r\n\r\n      // Check valid type\r\n      const hasValidType = validTypes.includes(exercise.type);\r\n\r\n      // Check valid category (1-5 for C1)\r\n      const hasValidCategory = exercise.categoryId >= 1 && exercise.categoryId <= 5;\r\n\r\n      // Check C1 level complexity (sophisticated texts and vocabulary)\r\n      const hasExpertComplexity = exercise.text.split(' ').length >= 12;\r\n      const hasSophisticatedVocab = exercise.text.length > 80;\r\n\r\n      // Check type-specific fields with C1 standards\r\n      let hasTypeSpecificFields = true;\r\n      if (exercise.type === 'multiple_choice') {\r\n        hasTypeSpecificFields = exercise.choices && \r\n                               Array.isArray(exercise.choices) &&\r\n                               exercise.choices.length >= 4 && // C1 should have 4 sophisticated choices\r\n                               exercise.correctChoiceIndex !== undefined &&\r\n                               exercise.correctChoiceIndex >= 0 &&\r\n                               exercise.correctChoiceIndex < exercise.choices.length;\r\n      } else {\r\n        hasTypeSpecificFields = exercise.errorPositions && Array.isArray(exercise.errorPositions);\r\n      }\r\n\r\n      return hasRequiredFields && hasValidType && hasValidCategory && \r\n             hasExpertComplexity && hasSophisticatedVocab && hasTypeSpecificFields;\r\n    });\r\n  },\r\n\r\n  // Comprehensive C1 summary with expert metrics\r\n  getSummary: () => {\r\n    const totalErrorPositions = allExercises\r\n      .filter(ex => ex.errorPositions)\r\n      .reduce((sum, ex) => sum + ex.errorPositions.length, 0);\r\n\r\n    const totalTextLength = allExercises.reduce((sum, ex) => sum + ex.text.length, 0);\r\n    const expertExercises = errorCorrectionC1.getExpertLevelExercises().length;\r\n    const culturalExercises = errorCorrectionC1.getCulturalReferenceExercises().length;\r\n    const academicExercises = errorCorrectionC1.getAcademicPrecisionExercises().length;\r\n\r\n    return {\r\n      level: \"C1\",\r\n      totalExercises: allExercises.length,\r\n      categories: errorCorrectionC1.categories.length,\r\n      difficulty: \"Expert\",\r\n      focus: \"Sophisticated grammatical structures, cultural competence, rhetorical mastery, academic precision\",\r\n      progression: \"Builds on B2 with advanced stylistic awareness, cultural sophistication, and expert-level precision\",\r\n      distribution: {\r\n        full: errorCorrectionC1Full.length,\r\n        identify: errorCorrectionC1Identify.length,\r\n        multiple_choice: errorCorrectionC1MultipleChoice.length\r\n      },\r\n      complexity: {\r\n        averageTextLength: Math.round(totalTextLength / allExercises.length),\r\n        averageWordCount: Math.round(allExercises.reduce((sum, ex) => sum + ex.text.split(' ').length, 0) / allExercises.length),\r\n        totalErrorPositions,\r\n        averageErrorsPerExercise: Math.round(totalErrorPositions / allExercises.filter(ex => ex.errorPositions).length * 10) / 10,\r\n        expertExercisesPercentage: Math.round((expertExercises / allExercises.length) * 100),\r\n        culturalReferencePercentage: Math.round((culturalExercises / allExercises.length) * 100),\r\n        academicFocusPercentage: Math.round((academicExercises / allExercises.length) * 100)\r\n      },\r\n      skillsTargeted: [\r\n        \"Expert grammatical competence\",\r\n        \"Cultural and literary sophistication\",\r\n        \"Advanced rhetorical skills\",\r\n        \"Academic precision and register mastery\",\r\n        \"Sophisticated stylistic awareness\"\r\n      ]\r\n    };\r\n  }\r\n};\r\n\r\n// Validate structure on export\r\nif (!errorCorrectionC1.validateStructure()) {\r\n  // empty: structure invalid, handle if needed\r\n} else {\r\n  // empty: structure valid, nothing to do\r\n}\r\n\r\nexport default errorCorrectionC1;\r\n"],"mappings":"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","ignoreList":[]}