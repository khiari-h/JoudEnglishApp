496df3ca4d484186a7487d7ea173194d
_getJestObj().mock('expo-linear-gradient', function () {
  var _require = require('react-native'),
    View = _require.View;
  return {
    LinearGradient: function LinearGradient(props) {
      return (0, _jsxRuntime.jsx)(View, Object.assign({}, props));
    }
  };
});
_getJestObj().mock('@expo/vector-icons', function () {
  var _require2 = require('react-native'),
    Text = _require2.Text;
  return {
    Ionicons: function Ionicons(props) {
      return (0, _jsxRuntime.jsx)(Text, {
        testID: `icon-${props.name}`,
        children: props.name
      });
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ResultsScreen = _interopRequireDefault(require("../../../src/components/exercise-common/ResultsScreen"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ResultsScreen', function () {
  jest.setTimeout(10000);
  beforeAll(function () {
    jest.useFakeTimers();
  });
  afterAll(function () {
    jest.useRealTimers();
  });
  beforeEach(function () {
    _reactNative2.Share.share = jest.fn();
  });
  var defaultProps = {
    totalQuestions: 10,
    correctAnswers: 8,
    incorrectAnswers: 1,
    skippedAnswers: 2,
    timeTaken: '01:30',
    exerciseType: 'Vocabulary',
    level: 'B1',
    levelColor: '#3B82F6',
    feedback: '',
    onRetry: jest.fn(),
    onContinue: jest.fn(),
    showDetailedResults: false,
    detailedResults: []
  };
  afterEach(function () {
    jest.clearAllMocks();
    jest.runOnlyPendingTimers();
  });
  it('renders basic statistics correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps))),
      getByText = _render.getByText;
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    expect(getByText('80%')).toBeTruthy();
    expect(getByText('8/10')).toBeTruthy();
    expect(getByText('Correctes')).toBeTruthy();
    expect(getByText('8')).toBeTruthy();
    expect(getByText('Incorrectes')).toBeTruthy();
    expect(getByText('1')).toBeTruthy();
    expect(getByText('Passées')).toBeTruthy();
    expect(getByText('2')).toBeTruthy();
    expect(getByText('Temps')).toBeTruthy();
    expect(getByText('01:30')).toBeTruthy();
  });
  it('displays feedback when provided', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        feedback: "Great job!"
      }))),
      getByText = _render2.getByText;
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    expect(getByText('Conseils pour progresser')).toBeTruthy();
    expect(getByText('Great job!')).toBeTruthy();
  });
  it('does not display feedback when not provided', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        feedback: ""
      }))),
      queryByText = _render3.queryByText;
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    expect(queryByText('Conseils pour progresser')).toBeNull();
  });
  it('displays detailed results when showDetailedResults is true and data is present', function () {
    var detailedResults = [{
      question: 'Q1',
      userAnswer: 'A',
      correctAnswer: 'B',
      isCorrect: false,
      isSkipped: false
    }];
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        showDetailedResults: true,
        detailedResults: detailedResults
      }))),
      getByText = _render4.getByText;
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    expect(getByText('Détail des réponses')).toBeTruthy();
    expect(getByText('Question 1')).toBeTruthy();
    expect(getByText('Q1')).toBeTruthy();
    expect(getByText('Votre réponse:')).toBeTruthy();
    expect(getByText('A')).toBeTruthy();
    expect(getByText('Réponse correcte:')).toBeTruthy();
    expect(getByText('B')).toBeTruthy();
  });
  it('does not display detailed results when showDetailedResults is false', function () {
    var detailedResults = [{
      question: 'Q1',
      userAnswer: 'A',
      correctAnswer: 'B',
      isCorrect: false,
      isSkipped: false
    }];
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        showDetailedResults: false,
        detailedResults: detailedResults
      }))),
      queryByText = _render5.queryByText;
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    expect(queryByText('Détail des réponses')).toBeNull();
  });
  it('shows "Excellent!" for >= 80% score', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        correctAnswers: 8,
        totalQuestions: 10
      }))),
      getByText = _render6.getByText,
      getByTestId = _render6.getByTestId;
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    expect(getByText('Excellent!')).toBeTruthy();
    expect(getByTestId('icon-trophy')).toBeTruthy();
  });
  it('shows "Bien joué!" for >= 60% score', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        correctAnswers: 6,
        totalQuestions: 10
      }))),
      getByText = _render7.getByText,
      getByTestId = _render7.getByTestId;
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    expect(getByText('Bien joué!')).toBeTruthy();
    expect(getByTestId('icon-thumbs-up')).toBeTruthy();
  });
  it('shows "Pas mal!" for >= 40% score', function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        correctAnswers: 4,
        totalQuestions: 10
      }))),
      getByText = _render8.getByText,
      getByTestId = _render8.getByTestId;
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    expect(getByText('Pas mal!')).toBeTruthy();
    expect(getByTestId('icon-fitness')).toBeTruthy();
  });
  it('shows "Continuez vos efforts" for < 40% score', function () {
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        correctAnswers: 3,
        totalQuestions: 10
      }))),
      getByText = _render9.getByText,
      getByTestId = _render9.getByTestId;
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    expect(getByText('Continuez vos efforts')).toBeTruthy();
    expect(getByTestId('icon-school')).toBeTruthy();
  });
  it('calls onRetry when the retry button is pressed', function () {
    var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps))),
      getByText = _render0.getByText;
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    _reactNative.fireEvent.press(getByText('Réessayer'));
    expect(defaultProps.onRetry).toHaveBeenCalledTimes(1);
  });
  it('calls onContinue when the continue button is pressed', function () {
    var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps))),
      getByText = _render1.getByText;
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    _reactNative.fireEvent.press(getByText('Continuer'));
    expect(defaultProps.onContinue).toHaveBeenCalledTimes(1);
  });
  it('calls Share.share with correct data when share button is pressed', (0, _asyncToGenerator2.default)(function* () {
    var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps))),
      getByText = _render10.getByText;
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    _reactNative.fireEvent.press(getByText('Partager'));
    expect(_reactNative2.Share.share).toHaveBeenCalledWith({
      message: 'J\'ai obtenu 8/10 (80%) dans mon exercice de Vocabulary niveau B1 sur l\'application JOUD English!',
      title: 'Mes résultats d\'apprentissage'
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfcmVxdWlyZSIsInJlcXVpcmUiLCJWaWV3IiwiTGluZWFyR3JhZGllbnQiLCJwcm9wcyIsIl9qc3hSdW50aW1lIiwianN4IiwiT2JqZWN0IiwiYXNzaWduIiwiX3JlcXVpcmUyIiwiVGV4dCIsIklvbmljb25zIiwidGVzdElEIiwibmFtZSIsImNoaWxkcmVuIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9SZXN1bHRzU2NyZWVuIiwiX3JlYWN0TmF0aXZlMiIsIl9yZXF1aXJlMyIsImplc3QiLCJkZXNjcmliZSIsInNldFRpbWVvdXQiLCJiZWZvcmVBbGwiLCJ1c2VGYWtlVGltZXJzIiwiYWZ0ZXJBbGwiLCJ1c2VSZWFsVGltZXJzIiwiYmVmb3JlRWFjaCIsIlNoYXJlIiwic2hhcmUiLCJmbiIsImRlZmF1bHRQcm9wcyIsInRvdGFsUXVlc3Rpb25zIiwiY29ycmVjdEFuc3dlcnMiLCJpbmNvcnJlY3RBbnN3ZXJzIiwic2tpcHBlZEFuc3dlcnMiLCJ0aW1lVGFrZW4iLCJleGVyY2lzZVR5cGUiLCJsZXZlbCIsImxldmVsQ29sb3IiLCJmZWVkYmFjayIsIm9uUmV0cnkiLCJvbkNvbnRpbnVlIiwic2hvd0RldGFpbGVkUmVzdWx0cyIsImRldGFpbGVkUmVzdWx0cyIsImFmdGVyRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJydW5Pbmx5UGVuZGluZ1RpbWVycyIsIml0IiwiX3JlbmRlciIsInJlbmRlciIsImRlZmF1bHQiLCJnZXRCeVRleHQiLCJhY3QiLCJydW5BbGxUaW1lcnMiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwiX3JlbmRlcjIiLCJfcmVuZGVyMyIsInF1ZXJ5QnlUZXh0IiwidG9CZU51bGwiLCJxdWVzdGlvbiIsInVzZXJBbnN3ZXIiLCJjb3JyZWN0QW5zd2VyIiwiaXNDb3JyZWN0IiwiaXNTa2lwcGVkIiwiX3JlbmRlcjQiLCJfcmVuZGVyNSIsIl9yZW5kZXI2IiwiZ2V0QnlUZXN0SWQiLCJfcmVuZGVyNyIsIl9yZW5kZXI4IiwiX3JlbmRlcjkiLCJfcmVuZGVyMCIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIiwiX3JlbmRlcjEiLCJfcmVuZGVyMTAiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsIm1lc3NhZ2UiLCJ0aXRsZSJdLCJzb3VyY2VzIjpbIlJlc3VsdHNTY3JlZW4udGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcblxuLy8gX190ZXN0c19fL2NvbXBvbmVudHMvZXhlcmNpc2UtY29tbW9uL1Jlc3VsdHNTY3JlZW4udGVzdC5qc1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCBhY3QgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgUmVzdWx0c1NjcmVlbiBmcm9tICcuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9leGVyY2lzZS1jb21tb24vUmVzdWx0c1NjcmVlbic7XG5pbXBvcnQgeyBTaGFyZSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbi8vIE1vY2sgZGVzIGTDqXBlbmRhbmNlc1xuamVzdC5tb2NrKCdleHBvLWxpbmVhci1ncmFkaWVudCcsICgpID0+IHtcbiAgY29uc3QgeyBWaWV3IH0gPSByZXF1aXJlKCdyZWFjdC1uYXRpdmUnKTtcbiAgcmV0dXJuIHtcbiAgICBMaW5lYXJHcmFkaWVudDogKHByb3BzKSA9PiA8VmlldyB7Li4ucHJvcHN9IC8+LFxuICB9O1xufSk7XG5qZXN0Lm1vY2soJ0BleHBvL3ZlY3Rvci1pY29ucycsICgpID0+IHtcbiAgY29uc3QgeyBUZXh0IH0gPSByZXF1aXJlKCdyZWFjdC1uYXRpdmUnKTtcbiAgcmV0dXJuIHtcbiAgICBJb25pY29uczogKHByb3BzKSA9PiA8VGV4dCB0ZXN0SUQ9e2BpY29uLSR7cHJvcHMubmFtZX1gfT57cHJvcHMubmFtZX08L1RleHQ+LFxuICB9O1xufSk7XG5cbmRlc2NyaWJlKCdSZXN1bHRzU2NyZWVuJywgKCkgPT4ge1xuICBqZXN0LnNldFRpbWVvdXQoMTAwMDApOyAvLyBJbmNyZWFzZSB0aW1lb3V0IGZvciB0aGlzIHRlc3Qgc3VpdGVcbiAgYmVmb3JlQWxsKCgpID0+IHtcbiAgICBqZXN0LnVzZUZha2VUaW1lcnMoKTtcbiAgfSk7XG5cbiAgYWZ0ZXJBbGwoKCkgPT4ge1xuICAgIGplc3QudXNlUmVhbFRpbWVycygpO1xuICB9KTtcblxuICAvLyBBc3N1cmV6LXZvdXMgcXVlIFNoYXJlLnNoYXJlIGVzdCB1biBtb2NrIGF2YW50IGNoYXF1ZSB0ZXN0XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIFNoYXJlLnNoYXJlID0gamVzdC5mbigpO1xuICB9KTtcblxuICBjb25zdCBkZWZhdWx0UHJvcHMgPSB7XG4gICAgdG90YWxRdWVzdGlvbnM6IDEwLFxuICAgIGNvcnJlY3RBbnN3ZXJzOiA4LFxuICAgIGluY29ycmVjdEFuc3dlcnM6IDEsXG4gICAgc2tpcHBlZEFuc3dlcnM6IDIsIC8vIE1vZGlmacOpIHBvdXIgw6p0cmUgdW5pcXVlXG4gICAgdGltZVRha2VuOiAnMDE6MzAnLFxuICAgIGV4ZXJjaXNlVHlwZTogJ1ZvY2FidWxhcnknLFxuICAgIGxldmVsOiAnQjEnLFxuICAgIGxldmVsQ29sb3I6ICcjM0I4MkY2JyxcbiAgICBmZWVkYmFjazogJycsXG4gICAgb25SZXRyeTogamVzdC5mbigpLFxuICAgIG9uQ29udGludWU6IGplc3QuZm4oKSxcbiAgICBzaG93RGV0YWlsZWRSZXN1bHRzOiBmYWxzZSxcbiAgICBkZXRhaWxlZFJlc3VsdHM6IFtdLFxuICB9O1xuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gICAgamVzdC5ydW5Pbmx5UGVuZGluZ1RpbWVycygpO1xuICB9KTtcblxuICBpdCgncmVuZGVycyBiYXNpYyBzdGF0aXN0aWNzIGNvcnJlY3RseScsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKDxSZXN1bHRzU2NyZWVuIHsuLi5kZWZhdWx0UHJvcHN9IC8+KTtcbiAgICBhY3QoKCkgPT4geyBqZXN0LnJ1bkFsbFRpbWVycygpOyB9KTtcblxuICAgIGV4cGVjdChnZXRCeVRleHQoJzgwJScpKS50b0JlVHJ1dGh5KCk7IC8vIDgvMTBcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCc4LzEwJykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdDb3JyZWN0ZXMnKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJzgnKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ0luY29ycmVjdGVzJykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCcxJykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdQYXNzw6llcycpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnMicpKS50b0JlVHJ1dGh5KCk7IC8vIFbDqXJpZmllIGxhIG5vdXZlbGxlIHZhbGV1clxuICAgIGV4cGVjdChnZXRCeVRleHQoJ1RlbXBzJykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCcwMTozMCcpKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KCdkaXNwbGF5cyBmZWVkYmFjayB3aGVuIHByb3ZpZGVkJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPFJlc3VsdHNTY3JlZW4gey4uLmRlZmF1bHRQcm9wc30gZmVlZGJhY2s9XCJHcmVhdCBqb2IhXCIgLz4pO1xuICAgIGFjdCgoKSA9PiB7IGplc3QucnVuQWxsVGltZXJzKCk7IH0pO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ0NvbnNlaWxzIHBvdXIgcHJvZ3Jlc3NlcicpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnR3JlYXQgam9iIScpKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KCdkb2VzIG5vdCBkaXNwbGF5IGZlZWRiYWNrIHdoZW4gbm90IHByb3ZpZGVkJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgcXVlcnlCeVRleHQgfSA9IHJlbmRlcig8UmVzdWx0c1NjcmVlbiB7Li4uZGVmYXVsdFByb3BzfSBmZWVkYmFjaz1cIlwiIC8+KTtcbiAgICBhY3QoKCkgPT4geyBqZXN0LnJ1bkFsbFRpbWVycygpOyB9KTtcbiAgICBleHBlY3QocXVlcnlCeVRleHQoJ0NvbnNlaWxzIHBvdXIgcHJvZ3Jlc3NlcicpKS50b0JlTnVsbCgpO1xuICB9KTtcblxuICBpdCgnZGlzcGxheXMgZGV0YWlsZWQgcmVzdWx0cyB3aGVuIHNob3dEZXRhaWxlZFJlc3VsdHMgaXMgdHJ1ZSBhbmQgZGF0YSBpcyBwcmVzZW50JywgKCkgPT4ge1xuICAgIGNvbnN0IGRldGFpbGVkUmVzdWx0cyA9IFtcbiAgICAgIHsgcXVlc3Rpb246ICdRMScsIHVzZXJBbnN3ZXI6ICdBJywgY29ycmVjdEFuc3dlcjogJ0InLCBpc0NvcnJlY3Q6IGZhbHNlLCBpc1NraXBwZWQ6IGZhbHNlIH0sXG4gICAgXTtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgPFJlc3VsdHNTY3JlZW4gey4uLmRlZmF1bHRQcm9wc30gc2hvd0RldGFpbGVkUmVzdWx0cz17dHJ1ZX0gZGV0YWlsZWRSZXN1bHRzPXtkZXRhaWxlZFJlc3VsdHN9IC8+XG4gICAgKTtcbiAgICBhY3QoKCkgPT4geyBqZXN0LnJ1bkFsbFRpbWVycygpOyB9KTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdEw6l0YWlsIGRlcyByw6lwb25zZXMnKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ1F1ZXN0aW9uIDEnKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ1ExJykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdWb3RyZSByw6lwb25zZTonKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ0EnKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ1LDqXBvbnNlIGNvcnJlY3RlOicpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnQicpKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KCdkb2VzIG5vdCBkaXNwbGF5IGRldGFpbGVkIHJlc3VsdHMgd2hlbiBzaG93RGV0YWlsZWRSZXN1bHRzIGlzIGZhbHNlJywgKCkgPT4ge1xuICAgIGNvbnN0IGRldGFpbGVkUmVzdWx0cyA9IFtcbiAgICAgIHsgcXVlc3Rpb246ICdRMScsIHVzZXJBbnN3ZXI6ICdBJywgY29ycmVjdEFuc3dlcjogJ0InLCBpc0NvcnJlY3Q6IGZhbHNlLCBpc1NraXBwZWQ6IGZhbHNlIH0sXG4gICAgXTtcbiAgICBjb25zdCB7IHF1ZXJ5QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICA8UmVzdWx0c1NjcmVlbiB7Li4uZGVmYXVsdFByb3BzfSBzaG93RGV0YWlsZWRSZXN1bHRzPXtmYWxzZX0gZGV0YWlsZWRSZXN1bHRzPXtkZXRhaWxlZFJlc3VsdHN9IC8+XG4gICAgKTtcbiAgICBhY3QoKCkgPT4geyBqZXN0LnJ1bkFsbFRpbWVycygpOyB9KTtcbiAgICBleHBlY3QocXVlcnlCeVRleHQoJ0TDqXRhaWwgZGVzIHLDqXBvbnNlcycpKS50b0JlTnVsbCgpO1xuICB9KTtcblxuICBpdCgnc2hvd3MgXCJFeGNlbGxlbnQhXCIgZm9yID49IDgwJSBzY29yZScsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCwgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcig8UmVzdWx0c1NjcmVlbiB7Li4uZGVmYXVsdFByb3BzfSBjb3JyZWN0QW5zd2Vycz17OH0gdG90YWxRdWVzdGlvbnM9ezEwfSAvPik7XG4gICAgYWN0KCgpID0+IHsgamVzdC5ydW5BbGxUaW1lcnMoKTsgfSk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnRXhjZWxsZW50IScpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCdpY29uLXRyb3BoeScpKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KCdzaG93cyBcIkJpZW4gam91w6khXCIgZm9yID49IDYwJSBzY29yZScsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCwgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcig8UmVzdWx0c1NjcmVlbiB7Li4uZGVmYXVsdFByb3BzfSBjb3JyZWN0QW5zd2Vycz17Nn0gdG90YWxRdWVzdGlvbnM9ezEwfSAvPik7XG4gICAgYWN0KCgpID0+IHsgamVzdC5ydW5BbGxUaW1lcnMoKTsgfSk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnQmllbiBqb3XDqSEnKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnaWNvbi10aHVtYnMtdXAnKSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICBpdCgnc2hvd3MgXCJQYXMgbWFsIVwiIGZvciA+PSA0MCUgc2NvcmUnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQsIGdldEJ5VGVzdElkIH0gPSByZW5kZXIoPFJlc3VsdHNTY3JlZW4gey4uLmRlZmF1bHRQcm9wc30gY29ycmVjdEFuc3dlcnM9ezR9IHRvdGFsUXVlc3Rpb25zPXsxMH0gLz4pO1xuICAgIGFjdCgoKSA9PiB7IGplc3QucnVuQWxsVGltZXJzKCk7IH0pO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ1BhcyBtYWwhJykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2ljb24tZml0bmVzcycpKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KCdzaG93cyBcIkNvbnRpbnVleiB2b3MgZWZmb3J0c1wiIGZvciA8IDQwJSBzY29yZScsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCwgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcig8UmVzdWx0c1NjcmVlbiB7Li4uZGVmYXVsdFByb3BzfSBjb3JyZWN0QW5zd2Vycz17M30gdG90YWxRdWVzdGlvbnM9ezEwfSAvPik7XG4gICAgYWN0KCgpID0+IHsgamVzdC5ydW5BbGxUaW1lcnMoKTsgfSk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnQ29udGludWV6IHZvcyBlZmZvcnRzJykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2ljb24tc2Nob29sJykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ2NhbGxzIG9uUmV0cnkgd2hlbiB0aGUgcmV0cnkgYnV0dG9uIGlzIHByZXNzZWQnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcig8UmVzdWx0c1NjcmVlbiB7Li4uZGVmYXVsdFByb3BzfSAvPik7XG4gICAgYWN0KCgpID0+IHsgamVzdC5ydW5BbGxUaW1lcnMoKTsgfSk7XG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgnUsOpZXNzYXllcicpKTtcbiAgICBleHBlY3QoZGVmYXVsdFByb3BzLm9uUmV0cnkpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgfSk7XG5cbiAgaXQoJ2NhbGxzIG9uQ29udGludWUgd2hlbiB0aGUgY29udGludWUgYnV0dG9uIGlzIHByZXNzZWQnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcig8UmVzdWx0c1NjcmVlbiB7Li4uZGVmYXVsdFByb3BzfSAvPik7XG4gICAgYWN0KCgpID0+IHsgamVzdC5ydW5BbGxUaW1lcnMoKTsgfSk7XG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgnQ29udGludWVyJykpO1xuICAgIGV4cGVjdChkZWZhdWx0UHJvcHMub25Db250aW51ZSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICB9KTtcblxuICBpdCgnY2FsbHMgU2hhcmUuc2hhcmUgd2l0aCBjb3JyZWN0IGRhdGEgd2hlbiBzaGFyZSBidXR0b24gaXMgcHJlc3NlZCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKDxSZXN1bHRzU2NyZWVuIHsuLi5kZWZhdWx0UHJvcHN9IC8+KTtcbiAgICBhY3QoKCkgPT4geyBqZXN0LnJ1bkFsbFRpbWVycygpOyB9KTtcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCdQYXJ0YWdlcicpKTtcblxuICAgIGV4cGVjdChTaGFyZS5zaGFyZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgbWVzc2FnZTogJ0pcXCdhaSBvYnRlbnUgOC8xMCAoODAlKSBkYW5zIG1vbiBleGVyY2ljZSBkZSBWb2NhYnVsYXJ5IG5pdmVhdSBCMSBzdXIgbFxcJ2FwcGxpY2F0aW9uIEpPVUQgRW5nbGlzaCEnLFxuICAgICAgdGl0bGU6ICdNZXMgcsOpc3VsdGF0cyBkXFwnYXBwcmVudGlzc2FnZScsXG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQVNBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxZQUFNO0VBQ3RDLElBQUFDLFFBQUEsR0FBaUJDLE9BQU8sQ0FBQyxjQUFjLENBQUM7SUFBaENDLElBQUksR0FBQUYsUUFBQSxDQUFKRSxJQUFJO0VBQ1osT0FBTztJQUNMQyxjQUFjLEVBQUUsU0FBaEJBLGNBQWNBLENBQUdDLEtBQUs7TUFBQSxPQUFLLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDSixJQUFJLEVBQUFLLE1BQUEsQ0FBQUMsTUFBQSxLQUFLSixLQUFLLENBQUcsQ0FBQztJQUFBO0VBQ2hELENBQUM7QUFDSCxDQUFDLENBQUM7QUFDRk4sV0FBQSxHQUFLQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsWUFBTTtFQUNwQyxJQUFBVSxTQUFBLEdBQWlCUixPQUFPLENBQUMsY0FBYyxDQUFDO0lBQWhDUyxJQUFJLEdBQUFELFNBQUEsQ0FBSkMsSUFBSTtFQUNaLE9BQU87SUFDTEMsUUFBUSxFQUFFLFNBQVZBLFFBQVFBLENBQUdQLEtBQUs7TUFBQSxP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