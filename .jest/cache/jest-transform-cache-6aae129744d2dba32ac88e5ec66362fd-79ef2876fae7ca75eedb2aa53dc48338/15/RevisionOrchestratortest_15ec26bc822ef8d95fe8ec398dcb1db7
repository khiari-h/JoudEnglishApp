ca153f8e24c79ae667d6ad11d45a9fc0
_getJestObj().mock('../../../src/hooks/useRevisionSettings');
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn()
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/popup/RevisionPopup', function () {
  var _require = require('react-native'),
    View = _require.View,
    Text = _require.Text,
    Button = _require.Button;
  return function (_ref) {
    var visible = _ref.visible,
      onChoice = _ref.onChoice,
      onDismiss = _ref.onDismiss,
      totalWordsLearned = _ref.totalWordsLearned,
      questionsCount = _ref.questionsCount;
    if (!visible) return null;
    return (0, _jsxRuntime.jsxs)(View, {
      testID: "revision-popup",
      children: [(0, _jsxRuntime.jsxs)(Text, {
        testID: "popup-words",
        children: ["Words: ", totalWordsLearned]
      }), (0, _jsxRuntime.jsxs)(Text, {
        testID: "popup-questions",
        children: ["Questions: ", questionsCount]
      }), (0, _jsxRuntime.jsx)(Button, {
        testID: "popup-now",
        title: "Now",
        onPress: function onPress() {
          return onChoice('now');
        }
      }), (0, _jsxRuntime.jsx)(Button, {
        testID: "popup-later50",
        title: "Later 50",
        onPress: function onPress() {
          return onChoice('later_50');
        }
      }), (0, _jsxRuntime.jsx)(Button, {
        testID: "popup-disable",
        title: "Disable",
        onPress: function onPress() {
          return onChoice('disable');
        }
      }), (0, _jsxRuntime.jsx)(Button, {
        testID: "popup-dismiss",
        title: "Dismiss",
        onPress: onDismiss
      })]
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _RevisionOrchestrator = _interopRequireDefault(require("../../../src/screens/VocabularyRevision/RevisionOrchestrator"));
var RevisionSettingsHook = _interopRequireWildcard(require("../../../src/hooks/useRevisionSettings"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _expoRouter = require("expo-router");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('RevisionOrchestrator', function () {
  var mockUseRevisionSettings;
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
    mockUseRevisionSettings = {
      preferences: {
        isDisabled: false,
        nextRevisionAt: 100,
        questionsCount: 10,
        frequency: 50
      },
      disableRevisions: jest.fn().mockResolvedValue(true),
      resetToNextTarget: jest.fn().mockResolvedValue(true),
      updatePreferences: jest.fn().mockResolvedValue(true)
    };
    RevisionSettingsHook.useRevisionSettings.mockReturnValue(mockUseRevisionSettings);
    _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify({
      completedWords: {
        unit1: ['a', 'b', 'c']
      }
    }));
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  it('renders nothing if revisions are disabled', (0, _asyncToGenerator2.default)(function* () {
    mockUseRevisionSettings.preferences.isDisabled = true;
    RevisionSettingsHook.useRevisionSettings.mockReturnValue(mockUseRevisionSettings);
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      queryByText = _render.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      return expect(_asyncStorage.default.getItem).toHaveBeenCalled();
    });
    expect((0, _reactNative.queryByTestId)('revision-popup')).toBeNull();
  }));
  it('does not show popup if word count is below threshold', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      queryByText = _render2.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      return expect(_asyncStorage.default.getItem).toHaveBeenCalled();
    });
    jest.advanceTimersByTime(1500);
    expect((0, _reactNative.queryByTestId)('revision-popup')).toBeNull();
  }));
  it('shows the popup when word count reaches the threshold', (0, _asyncToGenerator2.default)(function* () {
    var words = Array.from({
      length: 120
    }, function (_, i) {
      return `word${i}`;
    });
    _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify({
      completedWords: {
        unit1: words
      }
    }));
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      findByText = _render3.findByText;
    jest.advanceTimersByTime(1500);
    var popup = yield findByText('RevisionPopup');
    expect(popup).toBeTruthy();
    expect(yield findByText('Words: 120')).toBeTruthy();
    expect(yield findByText('Questions: 10')).toBeTruthy();
  }));
  it('calls resetToNextTarget and navigates when "now" is chosen', (0, _asyncToGenerator2.default)(function* () {
    var words = Array.from({
      length: 120
    }, function (_, i) {
      return `word${i}`;
    });
    _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify({
      completedWords: {
        unit1: words
      }
    }));
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {
        currentLevel: "A1"
      })),
      findByText = _render4.findByText;
    jest.advanceTimersByTime(1500);
    var nowButton = yield findByText('Now');
    _reactNative.fireEvent.press(nowButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(mockUseRevisionSettings.resetToNextTarget).toHaveBeenCalledWith(120);
      expect(_expoRouter.router.push).toHaveBeenCalledWith({
        pathname: "/tabs/vocabularyRevision",
        params: {
          level: "A1",
          questionsCount: 10,
          source: 'popup_trigger'
        }
      });
    });
  }));
  it('calls updatePreferences when "later_50" is chosen', (0, _asyncToGenerator2.default)(function* () {
    var words = Array.from({
      length: 120
    }, function (_, i) {
      return `word${i}`;
    });
    _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify({
      completedWords: {
        unit1: words
      }
    }));
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      findByText = _render5.findByText;
    jest.advanceTimersByTime(1500);
    var laterButton = yield findByText('Later 50');
    _reactNative.fireEvent.press(laterButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(mockUseRevisionSettings.updatePreferences).toHaveBeenCalledWith({
        nextRevisionAt: 170
      });
    });
  }));
  it('calls disableRevisions when "disable" is chosen', (0, _asyncToGenerator2.default)(function* () {
    var words = Array.from({
      length: 120
    }, function (_, i) {
      return `word${i}`;
    });
    _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify({
      completedWords: {
        unit1: words
      }
    }));
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      findByText = _render6.findByText;
    jest.advanceTimersByTime(1500);
    var disableButton = yield findByText('Disable');
    _reactNative.fireEvent.press(disableButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(mockUseRevisionSettings.disableRevisions).toHaveBeenCalled();
    });
  }));
  it('handles dismiss by defaulting to "later_50"', (0, _asyncToGenerator2.default)(function* () {
    var words = Array.from({
      length: 120
    }, function (_, i) {
      return `word${i}`;
    });
    _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify({
      completedWords: {
        unit1: words
      }
    }));
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      findByText = _render7.findByText;
    jest.advanceTimersByTime(1500);
    var dismissButton = yield findByText('Dismiss');
    _reactNative.fireEvent.press(dismissButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(mockUseRevisionSettings.updatePreferences).toHaveBeenCalledWith({
        nextRevisionAt: 170
      });
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,