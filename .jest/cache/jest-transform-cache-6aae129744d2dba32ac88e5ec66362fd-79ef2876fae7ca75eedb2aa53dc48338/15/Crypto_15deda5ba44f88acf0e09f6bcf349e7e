5f76cfb16319ea84991f8ca756b7ac1f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  getRandomBytes: true,
  getRandomBytesAsync: true,
  digestStringAsync: true,
  getRandomValues: true,
  randomUUID: true,
  digest: true
};
exports.digest = digest;
exports.digestStringAsync = digestStringAsync;
exports.getRandomBytes = getRandomBytes;
exports.getRandomBytesAsync = getRandomBytesAsync;
exports.getRandomValues = getRandomValues;
exports.randomUUID = randomUUID;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));
var _base64Js = require("base64-js");
var _expoModulesCore = require("expo-modules-core");
var _Crypto = require("./Crypto.types");
Object.keys(_Crypto).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Crypto[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Crypto[key];
    }
  });
});
var _ExpoCrypto = _interopRequireDefault(require("./ExpoCrypto"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var CryptoError = function (_TypeError) {
  function CryptoError(message) {
    var _this;
    (0, _classCallCheck2.default)(this, CryptoError);
    _this = _callSuper(this, CryptoError, [`expo-crypto: ${message}`]);
    _this.code = 'ERR_CRYPTO';
    return _this;
  }
  (0, _inherits2.default)(CryptoError, _TypeError);
  return (0, _createClass2.default)(CryptoError);
}((0, _wrapNativeSuper2.default)(TypeError));
function getRandomBytes(byteCount) {
  assertByteCount(byteCount, 'getRandomBytes');
  var validByteCount = Math.floor(byteCount);
  if (__DEV__) {
    if (!global.nativeCallSyncHook || global.__REMOTEDEV__) {
      var array = new Uint8Array(validByteCount);
      for (var i = 0; i < validByteCount; i++) {
        array[i] = Math.floor(Math.random() * 256);
      }
      return array;
    }
  }
  if (_ExpoCrypto.default.getRandomValues) {
    var byteArray = new Uint8Array(validByteCount);
    _ExpoCrypto.default.getRandomValues(byteArray);
    return byteArray;
  } else if (_ExpoCrypto.default.getRandomBase64String) {
    var base64 = _ExpoCrypto.default.getRandomBase64String(validByteCount);
    return (0, _base64Js.toByteArray)(base64);
  } else {
    throw new _expoModulesCore.UnavailabilityError('expo-crypto', 'getRandomBytes');
  }
}
function getRandomBytesAsync(_x) {
  return _getRandomBytesAsync.apply(this, arguments);
}
function _getRandomBytesAsync() {
  _getRandomBytesAsync = (0, _asyncToGenerator2.default)(function* (byteCount) {
    assertByteCount(byteCount, 'getRandomBytesAsync');
    var validByteCount = Math.floor(byteCount);
    if (_ExpoCrypto.default.getRandomValues) {
      var byteArray = new Uint8Array(validByteCount);
      _ExpoCrypto.default.getRandomValues(byteArray);
      return byteArray;
    } else if (_ExpoCrypto.default.getRandomBase64StringAsync) {
      var base64 = yield _ExpoCrypto.default.getRandomBase64StringAsync(validByteCount);
      return (0, _base64Js.toByteArray)(base64);
    } else {
      throw new _expoModulesCore.UnavailabilityError('expo-crypto', 'getRandomBytesAsync');
    }
  });
  return _getRandomBytesAsync.apply(this, arguments);
}
function assertByteCount(value, methodName) {
  if (typeof value !== 'number' || isNaN(value) || Math.floor(value) < 0 || Math.floor(value) > 1024) {
    throw new TypeError(`expo-crypto: ${methodName}(${value}) expected a valid number from range 0...1024`);
  }
}
function assertAlgorithm(algorithm) {
  if (!Object.values(_Crypto.CryptoDigestAlgorithm).includes(algorithm)) {
    throw new CryptoError(`Invalid algorithm provided. Expected one of: CryptoDigestAlgorithm.${Object.keys(_Crypto.CryptoDigestAlgorithm).join(', AlgCryptoDigestAlgorithmorithm.')}`);
  }
}
function assertData(data) {
  if (typeof data !== 'string') {
    throw new CryptoError(`Invalid data provided. Expected a string.`);
  }
}
function assertEncoding(encoding) {
  if (!Object.values(_Crypto.CryptoEncoding).includes(encoding)) {
    throw new CryptoError(`Invalid encoding provided. Expected one of: CryptoEncoding.${Object.keys(_Crypto.CryptoEncoding).join(', CryptoEncoding.')}`);
  }
}
function digestStringAsync(_x2, _x3) {
  return _digestStringAsync.apply(this, arguments);
}
function _digestStringAsync() {
  _digestStringAsync = (0, _asyncToGenerator2.default)(function* (algorithm, data) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
      encoding: _Crypto.CryptoEncoding.HEX
    };
    if (!_ExpoCrypto.default.digestStringAsync) {
      throw new _expoModulesCore.UnavailabilityError('expo-crypto', 'digestStringAsync');
    }
    assertAlgorithm(algorithm);
    assertData(data);
    assertEncoding(options.encoding);
    return yield _ExpoCrypto.default.digestStringAsync(algorithm, data, options);
  });
  return _digestStringAsync.apply(this, arguments);
}
function getRandomValues(typedArray) {
  _ExpoCrypto.default.getRandomValues(typedArray);
  return typedArray;
}
function randomUUID() {
  return _ExpoCrypto.default.randomUUID();
}
var digestLengths = (0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)({}, _Crypto.CryptoDigestAlgorithm.SHA1, 20), _Crypto.CryptoDigestAlgorithm.SHA256, 32), _Crypto.CryptoDigestAlgorithm.SHA384, 48), _Crypto.CryptoDigestAlgorithm.SHA512, 64), _Crypto.CryptoDigestAlgorithm.MD2, 16), _Crypto.CryptoDigestAlgorithm.MD4, 16), _Crypto.CryptoDigestAlgorithm.MD5, 16);
function digest(algorithm, data) {
  return new Promise(function (resolve, reject) {
    try {
      if (typeof _ExpoCrypto.default.digestAsync === 'function') {
        resolve(_ExpoCrypto.default.digestAsync(algorithm, data));
      } else {
        var output = new Uint8Array(digestLengths[algorithm]);
        _ExpoCrypto.default.digest(algorithm, output, data);
        resolve(output.buffer);
      }
    } catch (error) {
      reject(error);
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,