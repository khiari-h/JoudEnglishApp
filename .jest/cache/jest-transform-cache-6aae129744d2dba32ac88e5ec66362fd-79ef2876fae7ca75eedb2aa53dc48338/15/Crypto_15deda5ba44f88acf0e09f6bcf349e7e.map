{"version":3,"names":["_base64Js","require","_expoModulesCore","_Crypto","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","_ExpoCrypto","_interopRequireDefault","_callSuper","t","o","e","_getPrototypeOf2","default","_possibleConstructorReturn2","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","valueOf","CryptoError","_TypeError","message","_this","_classCallCheck2","code","_inherits2","_createClass2","_wrapNativeSuper2","TypeError","getRandomBytes","byteCount","assertByteCount","validByteCount","Math","floor","__DEV__","global","nativeCallSyncHook","__REMOTEDEV__","array","Uint8Array","i","random","ExpoCrypto","getRandomValues","byteArray","getRandomBase64String","base64","toByteArray","UnavailabilityError","getRandomBytesAsync","_x","_getRandomBytesAsync","arguments","_asyncToGenerator2","getRandomBase64StringAsync","value","methodName","isNaN","assertAlgorithm","algorithm","values","CryptoDigestAlgorithm","includes","join","assertData","data","assertEncoding","encoding","CryptoEncoding","digestStringAsync","_x2","_x3","_digestStringAsync","options","length","undefined","HEX","typedArray","randomUUID","digestLengths","_defineProperty2","SHA1","SHA256","SHA384","SHA512","MD2","MD4","MD5","digest","Promise","resolve","reject","digestAsync","output","buffer","error"],"sources":["../src/Crypto.ts"],"sourcesContent":["import { toByteArray } from 'base64-js';\nimport { UnavailabilityError, UintBasedTypedArray, IntBasedTypedArray } from 'expo-modules-core';\n\nimport { CryptoDigestAlgorithm, CryptoEncoding, CryptoDigestOptions, Digest } from './Crypto.types';\nimport ExpoCrypto from './ExpoCrypto';\n\ndeclare const global: any;\n\nexport * from './Crypto.types';\n\nclass CryptoError extends TypeError {\n  code = 'ERR_CRYPTO';\n\n  constructor(message: string) {\n    super(`expo-crypto: ${message}`);\n  }\n}\n\n// @needsAudit\n/**\n * Generates completely random bytes using native implementations. The `byteCount` property\n * is a `number` indicating the number of bytes to generate in the form of a `Uint8Array`.\n * Falls back to `Math.random` during development to prevent issues with React Native Debugger.\n * @param byteCount - A number within the range from `0` to `1024`. Anything else will throw a `TypeError`.\n * @return An array of random bytes with the same length as the `byteCount`.\n */\nexport function getRandomBytes(byteCount: number): Uint8Array {\n  assertByteCount(byteCount, 'getRandomBytes');\n  const validByteCount = Math.floor(byteCount);\n  if (__DEV__) {\n    if (!global.nativeCallSyncHook || global.__REMOTEDEV__) {\n      // remote javascript debugging is enabled\n      const array = new Uint8Array(validByteCount);\n      for (let i = 0; i < validByteCount; i++) {\n        array[i] = Math.floor(Math.random() * 256);\n      }\n      return array;\n    }\n  }\n  if (ExpoCrypto.getRandomValues) {\n    const byteArray = new Uint8Array(validByteCount);\n    ExpoCrypto.getRandomValues(byteArray);\n    return byteArray;\n  } else if (ExpoCrypto.getRandomBase64String) {\n    const base64 = ExpoCrypto.getRandomBase64String(validByteCount);\n    return toByteArray(base64);\n  } else {\n    throw new UnavailabilityError('expo-crypto', 'getRandomBytes');\n  }\n}\n\n// @needsAudit\n/**\n * Generates completely random bytes using native implementations. The `byteCount` property\n * is a `number` indicating the number of bytes to generate in the form of a `Uint8Array`.\n * @param byteCount - A number within the range from `0` to `1024`. Anything else will throw a `TypeError`.\n * @return A promise that fulfills with an array of random bytes with the same length as the `byteCount`.\n */\nexport async function getRandomBytesAsync(byteCount: number): Promise<Uint8Array> {\n  assertByteCount(byteCount, 'getRandomBytesAsync');\n  const validByteCount = Math.floor(byteCount);\n  if (ExpoCrypto.getRandomValues) {\n    const byteArray = new Uint8Array(validByteCount);\n    ExpoCrypto.getRandomValues(byteArray);\n    return byteArray;\n  } else if (ExpoCrypto.getRandomBase64StringAsync) {\n    const base64 = await ExpoCrypto.getRandomBase64StringAsync(validByteCount);\n    return toByteArray(base64);\n  } else {\n    throw new UnavailabilityError('expo-crypto', 'getRandomBytesAsync');\n  }\n}\n\nfunction assertByteCount(value: any, methodName: string): void {\n  if (\n    typeof value !== 'number' ||\n    isNaN(value) ||\n    Math.floor(value) < 0 ||\n    Math.floor(value) > 1024\n  ) {\n    throw new TypeError(\n      `expo-crypto: ${methodName}(${value}) expected a valid number from range 0...1024`\n    );\n  }\n}\n\nfunction assertAlgorithm(algorithm: CryptoDigestAlgorithm): void {\n  if (!Object.values(CryptoDigestAlgorithm).includes(algorithm)) {\n    throw new CryptoError(\n      `Invalid algorithm provided. Expected one of: CryptoDigestAlgorithm.${Object.keys(\n        CryptoDigestAlgorithm\n      ).join(', AlgCryptoDigestAlgorithmorithm.')}`\n    );\n  }\n}\n\nfunction assertData(data: string): void {\n  if (typeof data !== 'string') {\n    throw new CryptoError(`Invalid data provided. Expected a string.`);\n  }\n}\n\nfunction assertEncoding(encoding: CryptoEncoding): void {\n  if (!Object.values(CryptoEncoding).includes(encoding)) {\n    throw new CryptoError(\n      `Invalid encoding provided. Expected one of: CryptoEncoding.${Object.keys(\n        CryptoEncoding\n      ).join(', CryptoEncoding.')}`\n    );\n  }\n}\n\n// @needsAudit\n/**\n * The `digestStringAsync()` method of `Crypto` generates a digest of the supplied `data` string with the provided digest `algorithm`.\n * A digest is a short fixed-length value derived from some variable-length input. **Cryptographic digests** should exhibit _collision-resistance_,\n * meaning that it's very difficult to generate multiple inputs that have equal digest values.\n * You can specify the returned string format as one of `CryptoEncoding`. By default, the resolved value will be formatted as a `HEX` string.\n * On web, this method can only be called from a secure origin (HTTPS) otherwise, an error will be thrown.\n *\n * @param algorithm The cryptographic hash function to use to transform a block of data into a fixed-size output.\n * @param data The value that will be used to generate a digest.\n * @param options Format of the digest string. Defaults to: `CryptoDigestOptions.HEX`.\n * @return Return a Promise which fulfills with a value representing the hashed input.\n *\n * @example\n * ```ts\n * const digest = await Crypto.digestStringAsync(\n *   Crypto.CryptoDigestAlgorithm.SHA512,\n *   'ðŸ¥“ Easy to Digest! ðŸ’™'\n * );\n * ```\n */\nexport async function digestStringAsync(\n  algorithm: CryptoDigestAlgorithm,\n  data: string,\n  options: CryptoDigestOptions = { encoding: CryptoEncoding.HEX }\n): Promise<Digest> {\n  if (!ExpoCrypto.digestStringAsync) {\n    throw new UnavailabilityError('expo-crypto', 'digestStringAsync');\n  }\n\n  assertAlgorithm(algorithm);\n  assertData(data);\n  assertEncoding(options.encoding);\n\n  return await ExpoCrypto.digestStringAsync(algorithm, data, options);\n}\n\n/**\n * The `getRandomValues()` method of `Crypto` fills a provided `TypedArray` with cryptographically secure random values.\n *\n * @param typedArray An integer based [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) to fill with cryptographically secure random values. It modifies the input array in place.\n * @return The input array filled with cryptographically secure random values.\n *\n * @example\n * ```ts\n * const byteArray = new Uint8Array(16);\n * Crypto.getRandomValues(byteArray);\n * console.log('Your lucky bytes: ' + byteArray);\n * ```\n */\nexport function getRandomValues<T extends IntBasedTypedArray | UintBasedTypedArray>(\n  typedArray: T\n): T {\n  ExpoCrypto.getRandomValues(typedArray);\n  return typedArray;\n}\n\n/**\n * The `randomUUID()` method returns a unique identifier based on the V4 UUID spec (RFC4122).\n * It uses cryptographically secure random values to generate the UUID.\n *\n * @return A string containing a newly generated UUIDv4 identifier\n * @example\n * ```ts\n * const UUID = Crypto.randomUUID();\n * console.log('Your UUID: ' + UUID);\n * ```\n */\nexport function randomUUID(): string {\n  return ExpoCrypto.randomUUID();\n}\n\nconst digestLengths = {\n  [CryptoDigestAlgorithm.SHA1]: 20,\n  [CryptoDigestAlgorithm.SHA256]: 32,\n  [CryptoDigestAlgorithm.SHA384]: 48,\n  [CryptoDigestAlgorithm.SHA512]: 64,\n  [CryptoDigestAlgorithm.MD2]: 16,\n  [CryptoDigestAlgorithm.MD4]: 16,\n  [CryptoDigestAlgorithm.MD5]: 16,\n};\n\n/**\n * The `digest()` method of `Crypto` generates a digest of the supplied `TypedArray` of bytes `data` with the provided digest `algorithm`.\n * A digest is a short fixed-length value derived from some variable-length input. **Cryptographic digests** should exhibit _collision-resistance_,\n * meaning that it's very difficult to generate multiple inputs that have equal digest values.\n * On web, this method can only be called from a secure origin (HTTPS) otherwise, an error will be thrown.\n *\n * @param algorithm The cryptographic hash function to use to transform a block of data into a fixed-size output.\n * @param data The value that will be used to generate a digest.\n * @return A Promise which fulfills with an ArrayBuffer representing the hashed input.\n * @example\n * ```ts\n * const array = new Uint8Array([1, 2, 3, 4, 5]);\n * const digest = await Crypto.digest(Crypto.CryptoDigestAlgorithm.SHA512, array);\n * console.log('Your digest: ' + digest);\n * ```\n */\nexport function digest(algorithm: CryptoDigestAlgorithm, data: BufferSource): Promise<ArrayBuffer> {\n  return new Promise((resolve, reject) => {\n    try {\n      if (typeof ExpoCrypto.digestAsync === 'function') {\n        resolve(ExpoCrypto.digestAsync(algorithm, data));\n      } else {\n        const output = new Uint8Array(digestLengths[algorithm]);\n        ExpoCrypto.digest(algorithm, output, data);\n        resolve(output.buffer);\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n"],"mappings":"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","ignoreList":[]}