{"version":3,"names":["Object","defineProperty","exports","value","startMapper","stopMapper","_PlatformChecker","require","_threads","_isSharedValue","IS_JEST","isJest","_worklet_3430252739659_init_data","code","location","sourceMap","version","createMapperRegistry","_e","global","Error","mappers","Map","sortedMappers","runRequested","processingMappers","updateMappersOrder","pre","forEach","mapper","outputs","output","preMappers","get","undefined","set","push","visited","Set","newOrder","dfs","add","input","inputs","preMapper","has","mapperRun","size","length","dirty","worklet","maybeRequestUpdates","requestAnimationFrame","queueMicrotask","extractInputs","resultArray","Array","isArray","isSharedValue","getPrototypeOf","prototype","element","values","start","mapperID","id","sv","addListener","stop","delete","removeListener","__closure","__workletHash","__initData","__stackDetails","MAPPER_ID","_worklet_2799358392373_init_data","arguments","runOnUI","mappersTs2","mapperRegistry","__mapperRegistry","_worklet_5914939239065_init_data","mappersTs3"],"sources":["mappers.ts"],"sourcesContent":["'use strict';\nimport type {\n  MapperRawInputs,\n  MapperOutputs,\n  SharedValue,\n} from './commonTypes';\nimport { isJest } from './PlatformChecker';\nimport { runOnUI } from './threads';\nimport { isSharedValue } from './isSharedValue';\n\nconst IS_JEST = isJest();\n\ntype MapperExtractedInputs = SharedValue[];\n\ntype Mapper = {\n  id: number;\n  dirty: boolean;\n  worklet: () => void;\n  inputs: MapperExtractedInputs;\n  outputs?: MapperOutputs;\n};\n\nfunction createMapperRegistry() {\n  'worklet';\n  const mappers = new Map<number, Mapper>();\n  let sortedMappers: Mapper[] = [];\n\n  let runRequested = false;\n  let processingMappers = false;\n\n  function updateMappersOrder() {\n    // sort mappers topologically\n    // the algorithm here takes adventage of a fact that the topological order\n    // of a transposed graph is a reverse topological order of the original graph\n    // The graph in our case consists of mappers and an edge between two mappers\n    // A and B exists if there is a shared value that's on A's output lists and on\n    // B's input list.\n    //\n    // We don't need however to calculate that graph as it is easier to work with\n    // the transposed version of it that can be calculated ad-hoc. For the transposed\n    // version to be traversed we use \"pre\" map that maps share value to mappers that\n    // output that shared value. Then we can infer all the outgoing edges for a given\n    // mapper simply by scanning it's input list and checking if any of the shared values\n    // from that list exists in the \"pre\" map. If they do, then we have an edge between\n    // that mapper and the mappers from the \"pre\" list for the given shared value.\n    //\n    // For topological sorting we use a dfs-based approach that requires the graph to\n    // be traversed in dfs order and each node after being processed lands at the\n    // beginning of the topological order list. Since we traverse a transposed graph,\n    // instead of reversing that order we can use a normal array and push processed\n    // mappers to the end. There is no need to reverse that array after we are done.\n    const pre = new Map(); // map from sv -> mapper that outputs that sv\n    mappers.forEach((mapper) => {\n      if (mapper.outputs) {\n        for (const output of mapper.outputs) {\n          const preMappers = pre.get(output);\n          if (preMappers === undefined) {\n            pre.set(output, [mapper]);\n          } else {\n            preMappers.push(mapper);\n          }\n        }\n      }\n    });\n    const visited = new Set();\n    const newOrder: Mapper[] = [];\n    function dfs(mapper: Mapper) {\n      visited.add(mapper);\n      for (const input of mapper.inputs) {\n        const preMappers = pre.get(input);\n        if (preMappers) {\n          for (const preMapper of preMappers) {\n            if (!visited.has(preMapper)) {\n              dfs(preMapper);\n            }\n          }\n        }\n      }\n      newOrder.push(mapper);\n    }\n    mappers.forEach((mapper) => {\n      if (!visited.has(mapper)) {\n        dfs(mapper);\n      }\n    });\n    sortedMappers = newOrder;\n  }\n\n  function mapperRun() {\n    runRequested = false;\n    if (processingMappers) {\n      return;\n    }\n    try {\n      processingMappers = true;\n      if (mappers.size !== sortedMappers.length) {\n        updateMappersOrder();\n      }\n      for (const mapper of sortedMappers) {\n        if (mapper.dirty) {\n          mapper.dirty = false;\n          mapper.worklet();\n        }\n      }\n    } finally {\n      processingMappers = false;\n    }\n  }\n\n  function maybeRequestUpdates() {\n    if (IS_JEST) {\n      // On Jest environment we avoid using queueMicrotask as that'd require test\n      // to advance the clock manually. This on other hand would require tests\n      // to know how many times mappers need to run. As we don't want tests to\n      // make any assumptions on that number it is easier to execute mappers\n      // immediately for testing purposes and only expect test to advance timers\n      // if they want to make any assertions on the effects of animations being run.\n      mapperRun();\n    } else if (!runRequested) {\n      if (processingMappers) {\n        // In general, we should avoid having mappers trigger updates as this may\n        // result in unpredictable behavior. Specifically, the updated value can\n        // be read by mappers that run later in the same frame but previous mappers\n        // would access the old value. Updating mappers during the mapper-run phase\n        // breaks the order in which we should execute the mappers. However, doing\n        // that is still a possibility and there are some instances where people use\n        // the API in that way, hence we need to prevent mapper-run phase falling into\n        // an infinite loop. We do that by detecting when mapper-run is requested while\n        // we are already in mapper-run phase, and in that case we use `requestAnimationFrame`\n        // instead of `queueMicrotask` which will schedule mapper run for the next\n        // frame instead of queuing another set of updates in the same frame.\n        requestAnimationFrame(mapperRun);\n      } else {\n        queueMicrotask(mapperRun);\n      }\n      runRequested = true;\n    }\n  }\n\n  function extractInputs(\n    inputs: unknown,\n    resultArray: MapperExtractedInputs\n  ): MapperExtractedInputs {\n    if (Array.isArray(inputs)) {\n      for (const input of inputs) {\n        input && extractInputs(input, resultArray);\n      }\n    } else if (isSharedValue(inputs)) {\n      resultArray.push(inputs);\n    } else if (Object.getPrototypeOf(inputs) === Object.prototype) {\n      // we only extract inputs recursively from \"plain\" objects here, if object\n      // is of a derivative class (e.g. HostObject on web, or Map) we don't scan\n      // it recursively\n      for (const element of Object.values(inputs as Record<string, unknown>)) {\n        element && extractInputs(element, resultArray);\n      }\n    }\n    return resultArray;\n  }\n\n  return {\n    start: (\n      mapperID: number,\n      worklet: () => void,\n      inputs: MapperRawInputs,\n      outputs?: MapperOutputs\n    ) => {\n      const mapper: Mapper = {\n        id: mapperID,\n        dirty: true,\n        worklet,\n        inputs: extractInputs(inputs, []),\n        outputs,\n      };\n      mappers.set(mapper.id, mapper);\n      sortedMappers = [];\n      for (const sv of mapper.inputs) {\n        sv.addListener(mapper.id, () => {\n          mapper.dirty = true;\n          maybeRequestUpdates();\n        });\n      }\n      maybeRequestUpdates();\n    },\n    stop: (mapperID: number) => {\n      const mapper = mappers.get(mapperID);\n      if (mapper) {\n        mappers.delete(mapper.id);\n        sortedMappers = [];\n        for (const sv of mapper.inputs) {\n          sv.removeListener(mapper.id);\n        }\n      }\n    },\n  };\n}\n\nlet MAPPER_ID = 9999;\n\nexport function startMapper(\n  worklet: () => void,\n  inputs: MapperRawInputs = [],\n  outputs: MapperOutputs = []\n): number {\n  const mapperID = (MAPPER_ID += 1);\n\n  runOnUI(() => {\n    let mapperRegistry = global.__mapperRegistry;\n    if (mapperRegistry === undefined) {\n      mapperRegistry = global.__mapperRegistry = createMapperRegistry();\n    }\n    mapperRegistry.start(mapperID, worklet, inputs, outputs);\n  })();\n\n  return mapperID;\n}\n\nexport function stopMapper(mapperID: number): void {\n  runOnUI(() => {\n    const mapperRegistry = global.__mapperRegistry;\n    mapperRegistry?.stop(mapperID);\n  })();\n}\n"],"mappings":"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","ignoreList":[]}