12d46a7121f3ad41bf3c30978bad9f35
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ProgressCard = _interopRequireDefault(require("../../../../components/ui/ProgressCard"));
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
var WordGamesProgress = function WordGamesProgress(_ref) {
  var _ref$currentGame = _ref.currentGame,
    currentGame = _ref$currentGame === void 0 ? 1 : _ref$currentGame,
    _ref$totalGames = _ref.totalGames,
    totalGames = _ref$totalGames === void 0 ? 0 : _ref$totalGames,
    _ref$gameTitle = _ref.gameTitle,
    gameTitle = _ref$gameTitle === void 0 ? "" : _ref$gameTitle,
    _ref$completedGames = _ref.completedGames,
    completedGames = _ref$completedGames === void 0 ? 0 : _ref$completedGames,
    _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? "#3b82f6" : _ref$levelColor;
  var globalProgress = (0, _react.useMemo)(function () {
    return totalGames > 0 ? Math.round(completedGames / totalGames * 100) : 0;
  }, [completedGames, totalGames]);
  return (0, _jsxRuntime.jsx)(_ProgressCard.default, {
    title: "Progression",
    subtitle: `${gameTitle} â€¢ Jeu ${currentGame}/${totalGames}`,
    progress: globalProgress,
    completed: completedGames,
    total: totalGames,
    unit: "jeux",
    levelColor: levelColor,
    expandable: false,
    expanded: false,
    onToggleExpand: undefined,
    categoryData: [],
    onCategoryPress: undefined
  });
};
var _default = exports.default = WordGamesProgress;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfUHJvZ3Jlc3NDYXJkIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfanN4UnVudGltZSIsIldvcmRHYW1lc1Byb2dyZXNzIiwiX3JlZiIsIl9yZWYkY3VycmVudEdhbWUiLCJjdXJyZW50R2FtZSIsIl9yZWYkdG90YWxHYW1lcyIsInRvdGFsR2FtZXMiLCJfcmVmJGdhbWVUaXRsZSIsImdhbWVUaXRsZSIsIl9yZWYkY29tcGxldGVkR2FtZXMiLCJjb21wbGV0ZWRHYW1lcyIsIl9yZWYkbGV2ZWxDb2xvciIsImxldmVsQ29sb3IiLCJnbG9iYWxQcm9ncmVzcyIsInVzZU1lbW8iLCJNYXRoIiwicm91bmQiLCJqc3giLCJkZWZhdWx0IiwidGl0bGUiLCJzdWJ0aXRsZSIsInByb2dyZXNzIiwiY29tcGxldGVkIiwidG90YWwiLCJ1bml0IiwiZXhwYW5kYWJsZSIsImV4cGFuZGVkIiwib25Ub2dnbGVFeHBhbmQiLCJ1bmRlZmluZWQiLCJjYXRlZ29yeURhdGEiLCJvbkNhdGVnb3J5UHJlc3MiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBXb3JkR2FtZXNQcm9ncmVzcy9pbmRleC5qcyAtIFZFUlNJT04gQ09SUklHw4lFIEFWRUMgdXNlTWVtb1xyXG5cclxuaW1wb3J0IFByb2dyZXNzQ2FyZCBmcm9tIFwiLi4vLi4vLi4vLi4vY29tcG9uZW50cy91aS9Qcm9ncmVzc0NhcmRcIjtcclxuaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcclxuXHJcbi8qKlxyXG4gKiDwn5OKIFdvcmRHYW1lc1Byb2dyZXNzIC0gVmVyc2lvbiBjb3JyaWfDqWUgYXZlYyBtw6ltb3Jpc2F0aW9uXHJcbiAqIOKchSDDiXZpdGUgbGVzIGJvdWNsZXMgaW5maW5pZXMgYXZlYyB1c2VNZW1vXHJcbiAqIOKchSBQZXJmb3JtYW5jZSBvcHRpbWlzw6llXHJcbiAqL1xyXG5jb25zdCBXb3JkR2FtZXNQcm9ncmVzcyA9ICh7XHJcbiAgY3VycmVudEdhbWUgPSAxLFxyXG4gIHRvdGFsR2FtZXMgPSAwLFxyXG4gIGdhbWVUaXRsZSA9IFwiXCIsXHJcbiAgY29tcGxldGVkR2FtZXMgPSAwLFxyXG4gIGxldmVsQ29sb3IgPSBcIiMzYjgyZjZcIixcclxuICAvLyBnYW1lUmVzdWx0cyA9IFtdLCAvLyBzdXBwcmltw6kgY2FyIGludXRpbGlzw6lcclxuICAvLyBsZXZlbCA9IFwiQTFcIiwgLy8gc3VwcHJpbcOpIGNhciBpbnV0aWxpc8OpXHJcbn0pID0+IHtcclxuICBcclxuICAvLyDinIUgTcOJTU9SSVNFUiBsZSBjYWxjdWwgZGUgcHJvZ3Jlc3Npb24gZ2xvYmFsZVxyXG4gIGNvbnN0IGdsb2JhbFByb2dyZXNzID0gdXNlTWVtbygoKSA9PiB7XHJcbiAgICByZXR1cm4gdG90YWxHYW1lcyA+IDAgXHJcbiAgICAgID8gTWF0aC5yb3VuZCgoY29tcGxldGVkR2FtZXMgLyB0b3RhbEdhbWVzKSAqIDEwMClcclxuICAgICAgOiAwO1xyXG4gIH0sIFtjb21wbGV0ZWRHYW1lcywgdG90YWxHYW1lc10pO1xyXG5cclxuICAvLyDinIUgTcOJTU9SSVNFUiBsZXMgZG9ubsOpZXMgV29yZCBHYW1lc1xyXG4gIC8vIGNvbnN0IHdvcmRHYW1lc0RhdGEgPSB1c2VNZW1vKCgpID0+IHtcclxuICAvLyAgIHJldHVybiBnZXRXb3JkR2FtZXNEYXRhKGxldmVsKTtcclxuICAvLyB9LCBbbGV2ZWxdKTtcclxuXHJcbiAgLy8g4pyFIE3DiU1PUklTRVIgbGVzIGRvbm7DqWVzIGRlIGRlYnVnIChzZXVsZW1lbnQgZW4gZGV2KVxyXG4gIC8vIGNvbnN0IGRlYnVnRGF0YSA9IHVzZU1lbW8oKCkgPT4ge1xyXG4gIC8vICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAnZGV2ZWxvcG1lbnQnKSByZXR1cm4gbnVsbDtcclxuICAvLyAgIFxyXG4gIC8vICAgcmV0dXJuIHtcclxuICAvLyAgICAgY3VycmVudEdhbWUsXHJcbiAgLy8gICAgIHRvdGFsR2FtZXMsXHJcbiAgLy8gICAgIGNvbXBsZXRlZEdhbWVzLFxyXG4gIC8vICAgICBnbG9iYWxQcm9ncmVzcyxcclxuICAvLyAgICAgZ2FtZVJlc3VsdHNMZW5ndGg6IGdhbWVSZXN1bHRzLmxlbmd0aCxcclxuICAvLyAgICAgaGFzV29yZEdhbWVzRGF0YTogISF3b3JkR2FtZXNEYXRhLFxyXG4gIC8vICAgICB3b3JkR2FtZXNEYXRhS2V5czogd29yZEdhbWVzRGF0YSAmJiB0eXBlb2Ygd29yZEdhbWVzRGF0YSA9PT0gJ29iamVjdCcgPyBPYmplY3Qua2V5cyh3b3JkR2FtZXNEYXRhKSA6IFwibm90IG9iamVjdCBvciBudWxsXCIsXHJcbiAgLy8gICAgIGdhbWVUaXRsZVxyXG4gIC8vICAgfTtcclxuICAvLyB9LCBbY3VycmVudEdhbWUsIHRvdGFsR2FtZXMsIGNvbXBsZXRlZEdhbWVzLCBnbG9iYWxQcm9ncmVzcywgZ2FtZVJlc3VsdHMubGVuZ3RoLCB3b3JkR2FtZXNEYXRhLCBnYW1lVGl0bGVdKTtcclxuXHJcbiAgLy8g4pyFIENPUlJFQ1RJT04gRklOQUxFIDogUGFzIGRlIGxvZyBkYW5zIGxlIHJlbmRlciAhXHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8UHJvZ3Jlc3NDYXJkXHJcbiAgICAgIHRpdGxlPVwiUHJvZ3Jlc3Npb25cIlxyXG4gICAgICBzdWJ0aXRsZT17YCR7Z2FtZVRpdGxlfSDigKIgSmV1ICR7Y3VycmVudEdhbWV9LyR7dG90YWxHYW1lc31gfVxyXG4gICAgICBwcm9ncmVzcz17Z2xvYmFsUHJvZ3Jlc3N9XHJcbiAgICAgIGNvbXBsZXRlZD17Y29tcGxldGVkR2FtZXN9XHJcbiAgICAgIHRvdGFsPXt0b3RhbEdhbWVzfVxyXG4gICAgICB1bml0PVwiamV1eFwiXHJcbiAgICAgIGxldmVsQ29sb3I9e2xldmVsQ29sb3J9XHJcbiAgICAgIGV4cGFuZGFibGU9e2ZhbHNlfVxyXG4gICAgICBleHBhbmRlZD17ZmFsc2V9XHJcbiAgICAgIG9uVG9nZ2xlRXhwYW5kPXt1bmRlZmluZWR9XHJcbiAgICAgIGNhdGVnb3J5RGF0YT17W119XHJcbiAgICAgIG9uQ2F0ZWdvcnlQcmVzcz17dW5kZWZpbmVkfVxyXG4gICAgLz5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgV29yZEdhbWVzUHJvZ3Jlc3M7Il0sIm1hcHBpbmdzIjoiOzs7OztBQUVBLElBQUFBLGFBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLE1BQUEsR0FBQUQsT0FBQTtBQUFnQyxJQUFBRSxXQUFBLEdBQUFGLE9BQUE7QUFPaEMsSUFBTUcsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFpQkEsQ0FBQUMsSUFBQSxFQVFqQjtFQUFBLElBQUFDLGdCQUFBLEdBQUFELElBQUEsQ0FQSkUsV0FBVztJQUFYQSxXQUFXLEdBQUFELGdCQUFBLGNBQUcsQ0FBQyxHQUFBQSxnQkFBQTtJQUFBRSxlQUFBLEdBQUFILElBQUEsQ0FDZkksVUFBVTtJQUFWQSxVQUFVLEdBQUFELGVBQUEsY0FBRyxDQUFDLEdBQUFBLGVBQUE7SUFBQUUsY0FBQSxHQUFBTCxJQUFBLENBQ2RNLFNBQVM7SUFBVEEsU0FBUyxHQUFBRCxjQUFBLGNBQUcsRUFBRSxHQUFBQSxjQUFBO0lBQUFFLG1CQUFBLEdBQUFQLElBQUEsQ0FDZFEsY0FBYztJQUFkQSxjQUFjLEdBQUFELG1CQUFBLGNBQUcsQ0FBQyxHQUFBQSxtQkFBQTtJQUFBRSxlQUFBLEdBQUFULElBQUEsQ0FDbEJVLFVBQVU7SUFBVkEsVUFBVSxHQUFBRCxlQUFBLGNBQUcsU0FBUyxHQUFBQSxlQUFBO0VBTXRCLElBQU1FLGNBQWMsR0FBRyxJQUFBQyxjQUFPLEVBQUMsWUFBTTtJQUNuQyxPQUFPUixVQUFVLEdBQUcsQ0FBQyxHQUNqQlMsSUFBSSxDQUFDQyxLQUFLLENBQUVOLGNBQWMsR0FBR0osVUFBVSxHQUFJLEdBQUcsQ0FBQyxHQUMvQyxDQUFDO0VBQ1AsQ0FBQyxFQUFFLENBQUNJLGNBQWMsRUFBRUosVUFBVSxDQUFDLENBQUM7RUF5QmhDLE9BQ0UsSUFBQU4sV0FBQSxDQUFBaUIsR0FBQSxFQUFDckIsYUFBQSxDQUFBc0IsT0FBWTtJQUNYQyxLQUFLLEVBQUMsYUFBYTtJQUNuQkMsUUFBUSxFQUFFLEdBQUdaLFNBQVMsVUFBVUosV0FBVyxJQUFJRSxVQUFVLEVBQUc7SUFDNURlLFFBQVEsRUFBRVIsY0FBZTtJQUN6QlMsU0FBUyxFQUFFWixjQUFlO0lBQzFCYSxLQUFLLEVBQUVqQixVQUFXO0lBQ2xCa0IsSUFBSSxFQUFDLE1BQU07SUFDWFosVUFBVSxFQUFFQSxVQUFXO0lBQ3ZCYSxVQUFVLEVBQUUsS0FBTTtJQUNsQkMsUUFBUSxFQUFFLEtBQU07SUFDaEJDLGNBQWMsRUFBRUMsU0FBVTtJQUMxQkMsWUFBWSxFQUFFLEVBQUc7SUFDakJDLGVBQWUsRUFBRUY7RUFBVSxDQUM1QixDQUFDO0FBRU4sQ0FBQztBQUFDLElBQUFHLFFBQUEsR0FBQUMsT0FBQSxDQUFBZCxPQUFBLEdBRWFqQixpQkFBaUIiLCJpZ25vcmVMaXN0IjpbXX0=