41623e9503cb29cc52549af64bb0a1d5
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var ReactNativeFeatureFlags = _interopRequireWildcard(require("../../../src/private/featureflags/ReactNativeFeatureFlags"));
var _NativeAnimatedHelper = _interopRequireDefault(require("../../../src/private/animated/NativeAnimatedHelper"));
var _AnimatedProps = _interopRequireDefault(require("../nodes/AnimatedProps"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var startNativeAnimationNextId = 1;
var Animation = exports.default = function () {
  function Animation() {
    (0, _classCallCheck2.default)(this, Animation);
  }
  return (0, _createClass2.default)(Animation, [{
    key: "start",
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}
  }, {
    key: "stop",
    value: function stop() {
      if (this._nativeId) {
        _NativeAnimatedHelper.default.API.stopAnimation(this._nativeId);
      }
    }
  }, {
    key: "__getNativeAnimationConfig",
    value: function __getNativeAnimationConfig() {
      throw new Error('This animation type cannot be offloaded to native');
    }
  }, {
    key: "__debouncedOnEnd",
    value: function __debouncedOnEnd(result) {
      var onEnd = this.__onEnd;
      this.__onEnd = null;
      onEnd && onEnd(result);
    }
  }, {
    key: "__findAnimatedPropsNodes",
    value: function __findAnimatedPropsNodes(node) {
      var result = [];
      if (node instanceof _AnimatedProps.default) {
        result.push(node);
        return result;
      }
      for (var child of node.__getChildren()) {
        result.push.apply(result, (0, _toConsumableArray2.default)(this.__findAnimatedPropsNodes(child)));
      }
      return result;
    }
  }, {
    key: "__startNativeAnimation",
    value: function __startNativeAnimation(animatedValue) {
      var _this = this;
      var startNativeAnimationWaitId = `${startNativeAnimationNextId}:startAnimation`;
      startNativeAnimationNextId += 1;
      _NativeAnimatedHelper.default.API.setWaitingForIdentifier(startNativeAnimationWaitId);
      try {
        var config = this.__getNativeAnimationConfig();
        animatedValue.__makeNative(config.platformConfig);
        this._nativeId = _NativeAnimatedHelper.default.generateNewAnimationId();
        _NativeAnimatedHelper.default.API.startAnimatingNode(this._nativeId, animatedValue.__getNativeTag(), config, function (result) {
          _this.__debouncedOnEnd(result);
          var value = result.value;
          if (value != null) {
            animatedValue.__onAnimatedValueUpdateReceived(value);
            if (ReactNativeFeatureFlags.shouldSkipStateUpdatesForLoopingAnimations() && _this.__isLooping) {
              return;
            }
            _this.__findAnimatedPropsNodes(animatedValue).forEach(function (node) {
              return node.update();
            });
          }
        });
      } catch (e) {
        throw e;
      } finally {
        _NativeAnimatedHelper.default.API.unsetWaitingForIdentifier(startNativeAnimationWaitId);
      }
    }
  }]);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,