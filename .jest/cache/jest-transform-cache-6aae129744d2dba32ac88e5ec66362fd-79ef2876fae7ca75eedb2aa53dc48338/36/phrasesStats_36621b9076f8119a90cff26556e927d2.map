{"version":3,"names":["calculateTotalPhrases","exports","categories","arguments","length","undefined","cov_mt8q2kxu0","b","phrases","f","s","reduce","total","category","_category$phrases","calculateCompletedPhrasesCount","completedPhrases","Object","keys","count","key","_completedPhrases$key","calculateTotalPhrasesProgress","totalPhrases","totalCompleted","Math","min","round","calculateCategoryPhrasesProgress","map","index","_completedPhrases$ind","categoryPhrases","filter","phrase","categoryId","id","totalInCategory","completedInCategory","progress","title","name","calculatePhrasesStats","phrasesData","completedCount","totalProgress","categoryProgress","totalCategories","averagePhrasesPerCategory"],"sources":["phrasesStats.js"],"sourcesContent":["// utils/phrases/phrasesStats.js\n\n/**\n * Calcule le nombre total de phrases dans toutes les catégories\n * @param {Array} categories - Tableau des catégories\n * @param {Array} phrases - Tableau de toutes les phrases\n * @returns {number} Nombre total de phrases\n */\nexport const calculateTotalPhrases = (categories = [], phrases = []) => {\n  // Si on a directement les phrases\n  if (phrases.length > 0) {\n    return phrases.length;\n  }\n  \n  // Sinon calculer depuis les catégories\n  return categories.reduce(\n    (total, category) => total + (category.phrases?.length || 0),\n    0\n  );\n};\n\n/**\n * Calcule le nombre de phrases complétées\n * @param {Object} completedPhrases - Phrases complétées par catégorie\n * @returns {number} Nombre total de phrases complétées\n */\nexport const calculateCompletedPhrasesCount = (completedPhrases = {}) =>\n  Object.keys(completedPhrases).reduce(\n    (count, key) => count + (completedPhrases[key]?.length || 0),\n    0\n  );\n\n/**\n * Calcule la progression totale en pourcentage\n * @param {Array} categories - Tableau des catégories\n * @param {Array} phrases - Tableau de toutes les phrases\n * @param {Object} completedPhrases - Phrases complétées par catégorie\n * @returns {number} Pourcentage de progression (0-100)\n */\nexport const calculateTotalPhrasesProgress = (categories = [], phrases = [], completedPhrases = {}) => {\n  const totalPhrases = calculateTotalPhrases(categories, phrases);\n  const totalCompleted = calculateCompletedPhrasesCount(completedPhrases);\n  return totalPhrases > 0\n    ? Math.min(100, Math.round((totalCompleted / totalPhrases) * 100))\n    : 0;\n};\n\n/**\n * Calcule la progression par catégorie\n * @param {Array} categories - Tableau des catégories\n * @param {Array} phrases - Tableau de toutes les phrases\n * @param {Object} completedPhrases - Phrases complétées par catégorie\n * @returns {Array} Progression de chaque catégorie\n */\nexport const calculateCategoryPhrasesProgress = (categories = [], phrases = [], completedPhrases = {}) => {\n  return categories.map((category, index) => {\n    // Trouver les phrases de cette catégorie\n    const categoryPhrases = phrases.filter(phrase => phrase.categoryId === category.id);\n    const totalInCategory = categoryPhrases.length;\n    const completedInCategory = completedPhrases[index]?.length || 0;\n    const progress = totalInCategory > 0 \n      ? Math.min(100, Math.round((completedInCategory / totalInCategory) * 100))\n      : 0;\n\n    return {\n      title: category.name || `Catégorie ${index + 1}`,\n      totalPhrases: totalInCategory,\n      completedPhrases: completedInCategory,\n      progress\n    };\n  });\n};\n\n/**\n * Calcule les statistiques générales pour un niveau\n * @param {Object} phrasesData - Données complètes des phrases\n * @param {Object} completedPhrases - Phrases complétées\n * @returns {Object} Statistiques générales\n */\nexport const calculatePhrasesStats = (phrasesData = {}, completedPhrases = {}) => {\n  const categories = phrasesData.categories || [];\n  const phrases = phrasesData.phrases || [];\n  \n  const totalPhrases = calculateTotalPhrases(categories, phrases);\n  const completedCount = calculateCompletedPhrasesCount(completedPhrases);\n  const totalProgress = calculateTotalPhrasesProgress(categories, phrases, completedPhrases);\n  const categoryProgress = calculateCategoryPhrasesProgress(categories, phrases, completedPhrases);\n\n  return {\n    totalPhrases,\n    completedCount,\n    totalProgress,\n    categoryProgress,\n    totalCategories: categories.length,\n    averagePhrasesPerCategory: categories.length > 0 ? Math.round(totalPhrases / categories.length) : 0\n  };\n};"],"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","ignoreList":[]}