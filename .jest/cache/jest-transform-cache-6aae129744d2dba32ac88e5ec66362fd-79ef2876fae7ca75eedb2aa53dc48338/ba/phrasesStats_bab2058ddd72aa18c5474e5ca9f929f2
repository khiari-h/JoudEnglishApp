cd03d49ed49f370c0c6727a235cbbd7f
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateTotalPhrasesProgress = exports.calculateTotalPhrases = exports.calculatePhrasesStats = exports.calculateCompletedPhrasesCount = exports.calculateCategoryPhrasesProgress = void 0;
var calculateTotalPhrases = exports.calculateTotalPhrases = function calculateTotalPhrases() {
  var categories = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var phrases = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  if (phrases.length > 0) {
    return phrases.length;
  }
  return categories.reduce(function (total, category) {
    var _category$phrases;
    return total + (((_category$phrases = category.phrases) == null ? void 0 : _category$phrases.length) || 0);
  }, 0);
};
var calculateCompletedPhrasesCount = exports.calculateCompletedPhrasesCount = function calculateCompletedPhrasesCount() {
  var completedPhrases = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return Object.keys(completedPhrases).reduce(function (count, key) {
    var _completedPhrases$key;
    return count + (((_completedPhrases$key = completedPhrases[key]) == null ? void 0 : _completedPhrases$key.length) || 0);
  }, 0);
};
var calculateTotalPhrasesProgress = exports.calculateTotalPhrasesProgress = function calculateTotalPhrasesProgress() {
  var categories = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var phrases = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var completedPhrases = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var totalPhrases = calculateTotalPhrases(categories, phrases);
  var totalCompleted = calculateCompletedPhrasesCount(completedPhrases);
  return totalPhrases > 0 ? Math.min(100, Math.round(totalCompleted / totalPhrases * 100)) : 0;
};
var calculateCategoryPhrasesProgress = exports.calculateCategoryPhrasesProgress = function calculateCategoryPhrasesProgress() {
  var categories = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var phrases = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var completedPhrases = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  return categories.map(function (category, index) {
    var _completedPhrases$ind;
    var categoryPhrases = phrases.filter(function (phrase) {
      return phrase.categoryId === category.id;
    });
    var totalInCategory = categoryPhrases.length;
    var completedInCategory = ((_completedPhrases$ind = completedPhrases[index]) == null ? void 0 : _completedPhrases$ind.length) || 0;
    var progress = totalInCategory > 0 ? Math.min(100, Math.round(completedInCategory / totalInCategory * 100)) : 0;
    return {
      title: category.name || `CatÃ©gorie ${index + 1}`,
      totalPhrases: totalInCategory,
      completedPhrases: completedInCategory,
      progress: progress
    };
  });
};
var calculatePhrasesStats = exports.calculatePhrasesStats = function calculatePhrasesStats() {
  var phrasesData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var completedPhrases = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var categories = phrasesData.categories || [];
  var phrases = phrasesData.phrases || [];
  var totalPhrases = calculateTotalPhrases(categories, phrases);
  var completedCount = calculateCompletedPhrasesCount(completedPhrases);
  var totalProgress = calculateTotalPhrasesProgress(categories, phrases, completedPhrases);
  var categoryProgress = calculateCategoryPhrasesProgress(categories, phrases, completedPhrases);
  return {
    totalPhrases: totalPhrases,
    completedCount: completedCount,
    totalProgress: totalProgress,
    categoryProgress: categoryProgress,
    totalCategories: categories.length,
    averagePhrasesPerCategory: categories.length > 0 ? Math.round(totalPhrases / categories.length) : 0
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,