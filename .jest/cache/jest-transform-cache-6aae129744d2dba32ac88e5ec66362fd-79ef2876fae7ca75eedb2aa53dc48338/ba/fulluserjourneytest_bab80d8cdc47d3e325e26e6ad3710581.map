{"version":3,"names":["_getJestObj","mock","Object","assign","jest","requireActual","useFocusEffect","fn","router","push","back","getLevelProgress","level","_mockProgressData$lev","mockProgressData","levelProgress","getExerciseProgress","exercise","_mockProgressData$lev2","hasProgress","_mockProgressData$lev3","refresh","useProgress","updateProgress","mockUpdateProgress","mockUseVocabulary","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_expoRouter","_LevelSelection","_ExerciseSelection","_vocabulary","_jsxRuntime","_require","describe","beforeEach","clearAllMocks","mockReturnValue","loaded","currentWord","word","translation","wordIndex","display","wordCounter","categories","name","words","isLastWordInExercise","handleNext","completed","saveData","mockResolvedValue","undefined","test","default","_render","render","jsx","getByTestId","getByText","rerender","expect","props","children","toBeTruthy","vocabulary","waitFor","continueButton"],"sources":["full-user-journey.test.js"],"sourcesContent":["// __tests__/integration/full-user-journey.test.js\nimport React from 'react';\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\nimport { router } from 'expo-router';\n\n// Écrans\nimport LevelSelection from '../../src/screens/LevelSelection';\nimport ExerciseSelection from '../../src/screens/ExerciseSelection';\nimport VocabularyExercise from '../../src/screens/exercises/vocabulary';\n\n// Mocks\n// Mock de expo-router pour contrôler la navigation\njest.mock('expo-router', () => ({\n  ...jest.requireActual('expo-router'),\n  useFocusEffect: jest.fn(),\n  router: {\n    push: jest.fn(),\n    back: jest.fn(),\n  },\n}));\n\n// Mock des hooks de données et de contexte\nconst mockUpdateProgress = jest.fn();\nlet mockProgressData = {};\n\njest.mock('../../src/hooks/useRealTimeProgress', () => () => ({\n  getLevelProgress: (level) => mockProgressData[level]?.levelProgress || 0,\n  getExerciseProgress: (exercise, level) => mockProgressData[level]?.[exercise] || 0,\n  hasProgress: (exercise, level) => (mockProgressData[level]?.[exercise] || 0) > 0,\n  refresh: jest.fn(),\n}));\n\njest.mock('../../src/contexts/ProgressContext', () => ({\n  ...jest.requireActual('../../src/contexts/ProgressContext'),\n  useProgress: () => ({\n    updateProgress: mockUpdateProgress,\n    // ... autres valeurs si nécessaire\n  }),\n}));\n\n// Mock du hook de vocabulaire pour simplifier l'exercice\nconst mockUseVocabulary = jest.fn();\njest.mock('../../src/screens/exercises/vocabulary/hooks/useVocabulary', () => mockUseVocabulary);\n\n\ndescribe('Parcours utilisateur complet', () => {\n  beforeEach(() => {\n    // Réinitialiser les mocks avant chaque test\n    jest.clearAllMocks();\n    mockProgressData = {}; // Pas de progression au début\n    \n    // Configuration par défaut du mock useVocabulary\n    mockUseVocabulary.mockReturnValue({\n      loaded: true,\n      currentWord: { word: 'Hello', translation: 'Bonjour' },\n      wordIndex: 0,\n      display: {\n        wordCounter: '1 / 2',\n        categories: [{ name: 'Basics', words: [{}, {}] }],\n      },\n      isLastWordInExercise: false,\n      handleNext: jest.fn().mockReturnValue({ completed: false }),\n      saveData: jest.fn().mockResolvedValue(undefined),\n    });\n  });\n\n  test('la complétion d\\'un exercice met à jour la progression sur l\\'écran de sélection de niveau', async () => {\n        // Phase 1: Vérifier l'état initial sur LevelSelection\n    const { getByTestId, getByText, rerender } = render(<LevelSelection />);\n    \n    // Chercher la carte du niveau A1 et vérifier sa progression initiale\n    // Note: On s'attend à ce que le texte \"0%\" soit présent pour le niveau A1\n    expect(getByTestId('level-A1').props.children).toBeTruthy();\n    expect(getByText('0%')).toBeTruthy();\n\n    // Phase 2: Simuler la complétion d'un exercice et la mise à jour de la progression\n    // L'utilisateur termine l'exercice de vocabulaire. Dans la vraie app, `updateProgress` serait appelé.\n    // Ici, on met à jour notre source de vérité (les données mockées) pour simuler ce changement.\n    mockProgressData['A1'] = {\n      levelProgress: 50, // La progression générale du niveau passe à 50%\n      vocabulary: 100,   // L'exercice de vocabulaire est considéré comme terminé\n    };\n\n    // On peut aussi simuler l'appel qui aurait eu lieu\n    mockUpdateProgress('A1', 'vocabulary', 100);\n\n    // Phase 3: Revenir à l'écran de sélection de niveau et vérifier la mise à jour\n    // On utilise rerender pour simuler une nouvelle visite de l'écran avec les données mises à jour\n    rerender(<LevelSelection />);\n\n    // On attend que l'interface se mette à jour pour refléter la nouvelle progression\n    await waitFor(() => {\n      // On vérifie que la carte du niveau A1 affiche maintenant \"50%\"\n      expect(getByText('50%')).toBeTruthy();\n    });\n\n    // Bonus: On vérifie que le texte du bouton est passé à \"Continuer\"\n    const continueButton = getByTestId('level-A1-button');\n    expect(getByText('Continuer')).toBeTruthy();\n  });\n});\n"],"mappings":"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","ignoreList":[]}