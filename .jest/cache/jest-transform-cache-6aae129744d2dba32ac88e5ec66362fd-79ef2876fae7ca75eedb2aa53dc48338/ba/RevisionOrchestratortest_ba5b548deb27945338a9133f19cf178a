eced1f28da4418fd757077f7a6e6475c
_getJestObj().mock('../../../src/hooks/useRevisionSettings');
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn()
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/popup/RevisionPopup', function () {
  var _require = require('react-native'),
    View = _require.View,
    Text = _require.Text,
    Button = _require.Button;
  return function (_ref) {
    var visible = _ref.visible,
      onChoice = _ref.onChoice,
      onDismiss = _ref.onDismiss,
      totalWordsLearned = _ref.totalWordsLearned,
      questionsCount = _ref.questionsCount;
    if (!visible) return null;
    return (0, _jsxRuntime.jsxs)(View, {
      children: [(0, _jsxRuntime.jsx)(Text, {
        children: "RevisionPopup"
      }), (0, _jsxRuntime.jsxs)(Text, {
        children: ["Words: ", totalWordsLearned]
      }), (0, _jsxRuntime.jsxs)(Text, {
        children: ["Questions: ", questionsCount]
      }), (0, _jsxRuntime.jsx)(Button, {
        title: "Now",
        onPress: function onPress() {
          return onChoice('now');
        }
      }), (0, _jsxRuntime.jsx)(Button, {
        title: "Later 50",
        onPress: function onPress() {
          return onChoice('later_50');
        }
      }), (0, _jsxRuntime.jsx)(Button, {
        title: "Disable",
        onPress: function onPress() {
          return onChoice('disable');
        }
      }), (0, _jsxRuntime.jsx)(Button, {
        title: "Dismiss",
        onPress: onDismiss
      })]
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _RevisionOrchestrator = _interopRequireDefault(require("../../../src/screens/VocabularyRevision/RevisionOrchestrator"));
var RevisionSettingsHook = _interopRequireWildcard(require("../../../src/hooks/useRevisionSettings"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _expoRouter = require("expo-router");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('RevisionOrchestrator', function () {
  var mockUseRevisionSettings;
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
    mockUseRevisionSettings = {
      preferences: {
        isDisabled: false,
        nextRevisionAt: 100,
        questionsCount: 10,
        frequency: 50
      },
      disableRevisions: jest.fn().mockResolvedValue(true),
      resetToNextTarget: jest.fn().mockResolvedValue(true),
      updatePreferences: jest.fn().mockResolvedValue(true)
    };
    RevisionSettingsHook.useRevisionSettings.mockReturnValue(mockUseRevisionSettings);
    _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify({
      completedWords: {
        unit1: ['a', 'b', 'c']
      }
    }));
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  it('renders nothing if revisions are disabled', (0, _asyncToGenerator2.default)(function* () {
    mockUseRevisionSettings.preferences.isDisabled = true;
    RevisionSettingsHook.useRevisionSettings.mockReturnValue(mockUseRevisionSettings);
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      queryByText = _render.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      return expect(_asyncStorage.default.getItem).toHaveBeenCalled();
    });
    expect(queryByText('RevisionPopup')).toBeNull();
  }));
  it('does not show popup if word count is below threshold', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      queryByText = _render2.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      return expect(_asyncStorage.default.getItem).toHaveBeenCalled();
    });
    jest.advanceTimersByTime(1500);
    expect(queryByText('RevisionPopup')).toBeNull();
  }));
  it('shows the popup when word count reaches the threshold', (0, _asyncToGenerator2.default)(function* () {
    var words = Array.from({
      length: 120
    }, function (_, i) {
      return `word${i}`;
    });
    _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify({
      completedWords: {
        unit1: words
      }
    }));
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      findByText = _render3.findByText;
    jest.advanceTimersByTime(1500);
    var popup = yield findByText('RevisionPopup');
    expect(popup).toBeTruthy();
    expect(yield findByText('Words: 120')).toBeTruthy();
    expect(yield findByText('Questions: 10')).toBeTruthy();
  }));
  it('calls resetToNextTarget and navigates when "now" is chosen', (0, _asyncToGenerator2.default)(function* () {
    var words = Array.from({
      length: 120
    }, function (_, i) {
      return `word${i}`;
    });
    _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify({
      completedWords: {
        unit1: words
      }
    }));
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {
        currentLevel: "A1"
      })),
      findByText = _render4.findByText;
    jest.advanceTimersByTime(1500);
    var nowButton = yield findByText('Now');
    _reactNative.fireEvent.press(nowButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(mockUseRevisionSettings.resetToNextTarget).toHaveBeenCalledWith(120);
      expect(_expoRouter.router.push).toHaveBeenCalledWith({
        pathname: "/tabs/vocabularyRevision",
        params: {
          level: "A1",
          questionsCount: 10,
          source: 'popup_trigger'
        }
      });
    });
  }));
  it('calls updatePreferences when "later_50" is chosen', (0, _asyncToGenerator2.default)(function* () {
    var words = Array.from({
      length: 120
    }, function (_, i) {
      return `word${i}`;
    });
    _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify({
      completedWords: {
        unit1: words
      }
    }));
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      findByText = _render5.findByText;
    jest.advanceTimersByTime(1500);
    var laterButton = yield findByText('Later 50');
    _reactNative.fireEvent.press(laterButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(mockUseRevisionSettings.updatePreferences).toHaveBeenCalledWith({
        nextRevisionAt: 170
      });
    });
  }));
  it('calls disableRevisions when "disable" is chosen', (0, _asyncToGenerator2.default)(function* () {
    var words = Array.from({
      length: 120
    }, function (_, i) {
      return `word${i}`;
    });
    _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify({
      completedWords: {
        unit1: words
      }
    }));
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      findByText = _render6.findByText;
    jest.advanceTimersByTime(1500);
    var disableButton = yield findByText('Disable');
    _reactNative.fireEvent.press(disableButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(mockUseRevisionSettings.disableRevisions).toHaveBeenCalled();
    });
  }));
  it('handles dismiss by defaulting to "later_50"', (0, _asyncToGenerator2.default)(function* () {
    var words = Array.from({
      length: 120
    }, function (_, i) {
      return `word${i}`;
    });
    _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify({
      completedWords: {
        unit1: words
      }
    }));
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      findByText = _render7.findByText;
    jest.advanceTimersByTime(1500);
    var dismissButton = yield findByText('Dismiss');
    _reactNative.fireEvent.press(dismissButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(mockUseRevisionSettings.updatePreferences).toHaveBeenCalledWith({
        nextRevisionAt: 170
      });
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJyb3V0ZXIiLCJwdXNoIiwiamVzdCIsImZuIiwiZ2V0SXRlbSIsIl9yZXF1aXJlIiwicmVxdWlyZSIsIlZpZXciLCJUZXh0IiwiQnV0dG9uIiwiX3JlZiIsInZpc2libGUiLCJvbkNob2ljZSIsIm9uRGlzbWlzcyIsInRvdGFsV29yZHNMZWFybmVkIiwicXVlc3Rpb25zQ291bnQiLCJfanN4UnVudGltZSIsImpzeHMiLCJjaGlsZHJlbiIsImpzeCIsInRpdGxlIiwib25QcmVzcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfUmV2aXNpb25PcmNoZXN0cmF0b3IiLCJSZXZpc2lvblNldHRpbmdzSG9vayIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2FzeW5jU3RvcmFnZSIsIl9leHBvUm91dGVyIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsIl90IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfcmVxdWlyZTIiLCJkZXNjcmliZSIsIm1vY2tVc2VSZXZpc2lvblNldHRpbmdzIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJ1c2VGYWtlVGltZXJzIiwicHJlZmVyZW5jZXMiLCJpc0Rpc2FibGVkIiwibmV4dFJldmlzaW9uQXQiLCJmcmVxdWVuY3kiLCJkaXNhYmxlUmV2aXNpb25zIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJyZXNldFRvTmV4dFRhcmdldCIsInVwZGF0ZVByZWZlcmVuY2VzIiwidXNlUmV2aXNpb25TZXR0aW5ncyIsIm1vY2tSZXR1cm5WYWx1ZSIsIkFzeW5jU3RvcmFnZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJjb21wbGV0ZWRXb3JkcyIsInVuaXQxIiwiYWZ0ZXJFYWNoIiwidXNlUmVhbFRpbWVycyIsIml0IiwiX3JlbmRlciIsInJlbmRlciIsInF1ZXJ5QnlUZXh0Iiwid2FpdEZvciIsImV4cGVjdCIsInRvSGF2ZUJlZW5DYWxsZWQiLCJ0b0JlTnVsbCIsIl9yZW5kZXIyIiwiYWR2YW5jZVRpbWVyc0J5VGltZSIsIndvcmRzIiwiQXJyYXkiLCJmcm9tIiwibGVuZ3RoIiwiXyIsIl9yZW5kZXIzIiwiZmluZEJ5VGV4dCIsInBvcHVwIiwidG9CZVRydXRoeSIsIl9yZW5kZXI0IiwiY3VycmVudExldmVsIiwibm93QnV0dG9uIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsInBhdGhuYW1lIiwicGFyYW1zIiwibGV2ZWwiLCJzb3VyY2UiLCJfcmVuZGVyNSIsImxhdGVyQnV0dG9uIiwiX3JlbmRlcjYiLCJkaXNhYmxlQnV0dG9uIiwiX3JlbmRlcjciLCJkaXNtaXNzQnV0dG9uIl0sInNvdXJjZXMiOlsiUmV2aXNpb25PcmNoZXN0cmF0b3IudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIHdhaXRGb3IsIGZpcmVFdmVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCBSZXZpc2lvbk9yY2hlc3RyYXRvciBmcm9tICcuLi8uLi8uLi9zcmMvc2NyZWVucy9Wb2NhYnVsYXJ5UmV2aXNpb24vUmV2aXNpb25PcmNoZXN0cmF0b3InO1xuaW1wb3J0ICogYXMgUmV2aXNpb25TZXR0aW5nc0hvb2sgZnJvbSAnLi4vLi4vLi4vc3JjL2hvb2tzL3VzZVJldmlzaW9uU2V0dGluZ3MnO1xuaW1wb3J0IEFzeW5jU3RvcmFnZSBmcm9tICdAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZSc7XG5pbXBvcnQgeyByb3V0ZXIgfSBmcm9tICdleHBvLXJvdXRlcic7XG5cbi8vIE1vY2tpbmcgZGVwZW5kZW5jaWVzXG5qZXN0Lm1vY2soJy4uLy4uLy4uL3NyYy9ob29rcy91c2VSZXZpc2lvblNldHRpbmdzJyk7XG5qZXN0Lm1vY2soJ2V4cG8tcm91dGVyJywgKCkgPT4gKHtcbiAgcm91dGVyOiB7XG4gICAgcHVzaDogamVzdC5mbigpLFxuICB9LFxufSkpO1xuamVzdC5tb2NrKCdAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZScsICgpID0+ICh7XG4gIGdldEl0ZW06IGplc3QuZm4oKSxcbn0pKTtcblxuLy8gTW9jayBwb3VyIGxlIGNvbXBvc2FudCBQb3B1cCwgY2FyIG5vdXMgbmUgdGVzdG9ucyBwYXMgc29uIGltcGzDqW1lbnRhdGlvbiBpY2lcbmplc3QubW9jaygnLi4vLi4vLi4vc3JjL3NjcmVlbnMvRGFzaGJvYXJkL2NvbXBvbmVudHMvcG9wdXAvUmV2aXNpb25Qb3B1cCcsICgpID0+IHtcbiAgY29uc3QgeyBWaWV3LCBUZXh0LCBCdXR0b24gfSA9IHJlcXVpcmUoJ3JlYWN0LW5hdGl2ZScpO1xuICByZXR1cm4gKHsgdmlzaWJsZSwgb25DaG9pY2UsIG9uRGlzbWlzcywgdG90YWxXb3Jkc0xlYXJuZWQsIHF1ZXN0aW9uc0NvdW50IH0pID0+IHtcbiAgICBpZiAoIXZpc2libGUpIHJldHVybiBudWxsO1xuICAgIHJldHVybiAoXG4gICAgICA8Vmlldz5cbiAgICAgICAgPFRleHQ+UmV2aXNpb25Qb3B1cDwvVGV4dD5cbiAgICAgICAgPFRleHQ+V29yZHM6IHt0b3RhbFdvcmRzTGVhcm5lZH08L1RleHQ+XG4gICAgICAgIDxUZXh0PlF1ZXN0aW9uczoge3F1ZXN0aW9uc0NvdW50fTwvVGV4dD5cbiAgICAgICAgPEJ1dHRvbiB0aXRsZT1cIk5vd1wiIG9uUHJlc3M9eygpID0+IG9uQ2hvaWNlKCdub3cnKX0gLz5cbiAgICAgICAgPEJ1dHRvbiB0aXRsZT1cIkxhdGVyIDUwXCIgb25QcmVzcz17KCkgPT4gb25DaG9pY2UoJ2xhdGVyXzUwJyl9IC8+XG4gICAgICAgIDxCdXR0b24gdGl0bGU9XCJEaXNhYmxlXCIgb25QcmVzcz17KCkgPT4gb25DaG9pY2UoJ2Rpc2FibGUnKX0gLz5cbiAgICAgICAgPEJ1dHRvbiB0aXRsZT1cIkRpc21pc3NcIiBvblByZXNzPXtvbkRpc21pc3N9IC8+XG4gICAgICA8L1ZpZXc+XG4gICAgKTtcbiAgfTtcbn0pO1xuXG5kZXNjcmliZSgnUmV2aXNpb25PcmNoZXN0cmF0b3InLCAoKSA9PiB7XG4gIGxldCBtb2NrVXNlUmV2aXNpb25TZXR0aW5ncztcbiAgXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIC8vIFJlc2V0IG1vY2tzIGJlZm9yZSBlYWNoIHRlc3RcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICBqZXN0LnVzZUZha2VUaW1lcnMoKTtcblxuICAgIC8vIERlZmF1bHQgbW9jayBpbXBsZW1lbnRhdGlvbiBmb3IgdGhlIGhvb2tcbiAgICBtb2NrVXNlUmV2aXNpb25TZXR0aW5ncyA9IHtcbiAgICAgIHByZWZlcmVuY2VzOiB7XG4gICAgICAgIGlzRGlzYWJsZWQ6IGZhbHNlLFxuICAgICAgICBuZXh0UmV2aXNpb25BdDogMTAwLFxuICAgICAgICBxdWVzdGlvbnNDb3VudDogMTAsXG4gICAgICAgIGZyZXF1ZW5jeTogNTAsXG4gICAgICB9LFxuICAgICAgZGlzYWJsZVJldmlzaW9uczogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpLFxuICAgICAgcmVzZXRUb05leHRUYXJnZXQ6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh0cnVlKSxcbiAgICAgIHVwZGF0ZVByZWZlcmVuY2VzOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSksXG4gICAgfTtcbiAgICBSZXZpc2lvblNldHRpbmdzSG9vay51c2VSZXZpc2lvblNldHRpbmdzLm1vY2tSZXR1cm5WYWx1ZShtb2NrVXNlUmV2aXNpb25TZXR0aW5ncyk7XG5cbiAgICAvLyBEZWZhdWx0IG1vY2sgZm9yIEFzeW5jU3RvcmFnZVxuICAgIEFzeW5jU3RvcmFnZS5nZXRJdGVtLm1vY2tSZXNvbHZlZFZhbHVlKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIGNvbXBsZXRlZFdvcmRzOiB7IHVuaXQxOiBbJ2EnLCAnYicsICdjJ10gfSAvLyAzIHdvcmRzXG4gICAgfSkpO1xuICB9KTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGplc3QudXNlUmVhbFRpbWVycygpO1xuICB9KTtcblxuICBpdCgncmVuZGVycyBub3RoaW5nIGlmIHJldmlzaW9ucyBhcmUgZGlzYWJsZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgbW9ja1VzZVJldmlzaW9uU2V0dGluZ3MucHJlZmVyZW5jZXMuaXNEaXNhYmxlZCA9IHRydWU7XG4gICAgUmV2aXNpb25TZXR0aW5nc0hvb2sudXNlUmV2aXNpb25TZXR0aW5ncy5tb2NrUmV0dXJuVmFsdWUobW9ja1VzZVJldmlzaW9uU2V0dGluZ3MpO1xuXG4gICAgY29uc3QgeyBxdWVyeUJ5VGV4dCB9ID0gcmVuZGVyKDxSZXZpc2lvbk9yY2hlc3RyYXRvciAvPik7XG4gICAgXG4gICAgLy8gV2FpdCBmb3IgYW55IHBvdGVudGlhbCBzdGF0ZSB1cGRhdGVzXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiBleHBlY3QoQXN5bmNTdG9yYWdlLmdldEl0ZW0pLnRvSGF2ZUJlZW5DYWxsZWQoKSk7XG5cbiAgICBleHBlY3QocXVlcnlCeVRleHQoJ1JldmlzaW9uUG9wdXAnKSkudG9CZU51bGwoKTtcbiAgfSk7XG5cbiAgaXQoJ2RvZXMgbm90IHNob3cgcG9wdXAgaWYgd29yZCBjb3VudCBpcyBiZWxvdyB0aHJlc2hvbGQnLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gVG90YWwgd29yZHMgaXMgMyAoZnJvbSBtb2NrKSwgdGhyZXNob2xkIGlzIDEwMFxuICAgIGNvbnN0IHsgcXVlcnlCeVRleHQgfSA9IHJlbmRlcig8UmV2aXNpb25PcmNoZXN0cmF0b3IgLz4pO1xuICAgIFxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4gZXhwZWN0KEFzeW5jU3RvcmFnZS5nZXRJdGVtKS50b0hhdmVCZWVuQ2FsbGVkKCkpO1xuICAgIFxuICAgIC8vIEFkdmFuY2UgdGltZXJzIHRvIHRyaWdnZXIgcG90ZW50aWFsIHBvcHVwXG4gICAgamVzdC5hZHZhbmNlVGltZXJzQnlUaW1lKDE1MDApO1xuXG4gICAgZXhwZWN0KHF1ZXJ5QnlUZXh0KCdSZXZpc2lvblBvcHVwJykpLnRvQmVOdWxsKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG93cyB0aGUgcG9wdXAgd2hlbiB3b3JkIGNvdW50IHJlYWNoZXMgdGhlIHRocmVzaG9sZCcsIGFzeW5jICgpID0+IHtcbiAgICAvLyBTZXR1cCB3b3JkIGNvdW50IHRvIGJlIGFib3ZlIHRocmVzaG9sZFxuICAgIGNvbnN0IHdvcmRzID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogMTIwIH0sIChfLCBpKSA9PiBgd29yZCR7aX1gKTtcbiAgICBBc3luY1N0b3JhZ2UuZ2V0SXRlbS5tb2NrUmVzb2x2ZWRWYWx1ZShKU09OLnN0cmluZ2lmeSh7XG4gICAgICBjb21wbGV0ZWRXb3JkczogeyB1bml0MTogd29yZHMgfVxuICAgIH0pKTtcblxuICAgIGNvbnN0IHsgZmluZEJ5VGV4dCB9ID0gcmVuZGVyKDxSZXZpc2lvbk9yY2hlc3RyYXRvciAvPik7XG4gICAgXG4gICAgLy8gQWR2YW5jZSB0aW1lcnMgdG8gdHJpZ2dlciB0aGUgcG9wdXAncyBhcHBlYXJhbmNlXG4gICAgamVzdC5hZHZhbmNlVGltZXJzQnlUaW1lKDE1MDApO1xuXG4gICAgY29uc3QgcG9wdXAgPSBhd2FpdCBmaW5kQnlUZXh0KCdSZXZpc2lvblBvcHVwJyk7XG4gICAgZXhwZWN0KHBvcHVwKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGF3YWl0IGZpbmRCeVRleHQoJ1dvcmRzOiAxMjAnKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChhd2FpdCBmaW5kQnlUZXh0KCdRdWVzdGlvbnM6IDEwJykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ2NhbGxzIHJlc2V0VG9OZXh0VGFyZ2V0IGFuZCBuYXZpZ2F0ZXMgd2hlbiBcIm5vd1wiIGlzIGNob3NlbicsIGFzeW5jICgpID0+IHtcbiAgICAvLyBTZXR1cCB0byBzaG93IHBvcHVwXG4gICAgY29uc3Qgd29yZHMgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiAxMjAgfSwgKF8sIGkpID0+IGB3b3JkJHtpfWApO1xuICAgIEFzeW5jU3RvcmFnZS5nZXRJdGVtLm1vY2tSZXNvbHZlZFZhbHVlKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIGNvbXBsZXRlZFdvcmRzOiB7IHVuaXQxOiB3b3JkcyB9XG4gICAgfSkpO1xuXG4gICAgY29uc3QgeyBmaW5kQnlUZXh0IH0gPSByZW5kZXIoPFJldmlzaW9uT3JjaGVzdHJhdG9yIGN1cnJlbnRMZXZlbD1cIkExXCIgLz4pO1xuICAgIGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSgxNTAwKTtcblxuICAgIGNvbnN0IG5vd0J1dHRvbiA9IGF3YWl0IGZpbmRCeVRleHQoJ05vdycpO1xuICAgIGZpcmVFdmVudC5wcmVzcyhub3dCdXR0b24pO1xuXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3QobW9ja1VzZVJldmlzaW9uU2V0dGluZ3MucmVzZXRUb05leHRUYXJnZXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKDEyMCk7XG4gICAgICBleHBlY3Qocm91dGVyLnB1c2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgICAgcGF0aG5hbWU6IFwiL3RhYnMvdm9jYWJ1bGFyeVJldmlzaW9uXCIsXG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGxldmVsOiBcIkExXCIsXG4gICAgICAgICAgcXVlc3Rpb25zQ291bnQ6IDEwLFxuICAgICAgICAgIHNvdXJjZTogJ3BvcHVwX3RyaWdnZXInXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBpdCgnY2FsbHMgdXBkYXRlUHJlZmVyZW5jZXMgd2hlbiBcImxhdGVyXzUwXCIgaXMgY2hvc2VuJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIFNldHVwIHRvIHNob3cgcG9wdXBcbiAgICBjb25zdCB3b3JkcyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDEyMCB9LCAoXywgaSkgPT4gYHdvcmQke2l9YCk7XG4gICAgQXN5bmNTdG9yYWdlLmdldEl0ZW0ubW9ja1Jlc29sdmVkVmFsdWUoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgY29tcGxldGVkV29yZHM6IHsgdW5pdDE6IHdvcmRzIH1cbiAgICB9KSk7XG5cbiAgICBjb25zdCB7IGZpbmRCeVRleHQgfSA9IHJlbmRlcig8UmV2aXNpb25PcmNoZXN0cmF0b3IgLz4pO1xuICAgIGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSgxNTAwKTtcblxuICAgIGNvbnN0IGxhdGVyQnV0dG9uID0gYXdhaXQgZmluZEJ5VGV4dCgnTGF0ZXIgNTAnKTtcbiAgICBmaXJlRXZlbnQucHJlc3MobGF0ZXJCdXR0b24pO1xuXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3QobW9ja1VzZVJldmlzaW9uU2V0dGluZ3MudXBkYXRlUHJlZmVyZW5jZXMpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHsgbmV4dFJldmlzaW9uQXQ6IDE3MCB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ2NhbGxzIGRpc2FibGVSZXZpc2lvbnMgd2hlbiBcImRpc2FibGVcIiBpcyBjaG9zZW4nLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gU2V0dXAgdG8gc2hvdyBwb3B1cFxuICAgIGNvbnN0IHdvcmRzID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogMTIwIH0sIChfLCBpKSA9PiBgd29yZCR7aX1gKTtcbiAgICBBc3luY1N0b3JhZ2UuZ2V0SXRlbS5tb2NrUmVzb2x2ZWRWYWx1ZShKU09OLnN0cmluZ2lmeSh7XG4gICAgICBjb21wbGV0ZWRXb3JkczogeyB1bml0MTogd29yZHMgfVxuICAgIH0pKTtcblxuICAgIGNvbnN0IHsgZmluZEJ5VGV4dCB9ID0gcmVuZGVyKDxSZXZpc2lvbk9yY2hlc3RyYXRvciAvPik7XG4gICAgamVzdC5hZHZhbmNlVGltZXJzQnlUaW1lKDE1MDApO1xuXG4gICAgY29uc3QgZGlzYWJsZUJ1dHRvbiA9IGF3YWl0IGZpbmRCeVRleHQoJ0Rpc2FibGUnKTtcbiAgICBmaXJlRXZlbnQucHJlc3MoZGlzYWJsZUJ1dHRvbik7XG5cbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChtb2NrVXNlUmV2aXNpb25TZXR0aW5ncy5kaXNhYmxlUmV2aXNpb25zKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdoYW5kbGVzIGRpc21pc3MgYnkgZGVmYXVsdGluZyB0byBcImxhdGVyXzUwXCInLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gU2V0dXAgdG8gc2hvdyBwb3B1cFxuICAgIGNvbnN0IHdvcmRzID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogMTIwIH0sIChfLCBpKSA9PiBgd29yZCR7aX1gKTtcbiAgICBBc3luY1N0b3JhZ2UuZ2V0SXRlbS5tb2NrUmVzb2x2ZWRWYWx1ZShKU09OLnN0cmluZ2lmeSh7XG4gICAgICBjb21wbGV0ZWRXb3JkczogeyB1bml0MTogd29yZHMgfVxuICAgIH0pKTtcblxuICAgIGNvbnN0IHsgZmluZEJ5VGV4dCB9ID0gcmVuZGVyKDxSZXZpc2lvbk9yY2hlc3RyYXRvciAvPik7XG4gICAgamVzdC5hZHZhbmNlVGltZXJzQnlUaW1lKDE1MDApO1xuXG4gICAgY29uc3QgZGlzbWlzc0J1dHRvbiA9IGF3YWl0IGZpbmRCeVRleHQoJ0Rpc21pc3MnKTtcbiAgICBmaXJlRXZlbnQucHJlc3MoZGlzbWlzc0J1dHRvbik7XG5cbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChtb2NrVXNlUmV2aXNpb25TZXR0aW5ncy51cGRhdGVQcmVmZXJlbmNlcykudG9IYXZlQmVlbkNhbGxlZFdpdGgoeyBuZXh0UmV2aXNpb25BdDog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