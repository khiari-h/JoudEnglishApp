8daa773bbf1bed72aa0c7cfd4f7364c7
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  return Object.assign({}, RN, {
    Animated: Object.assign({}, RN.Animated, {
      Value: MockAnimatedValue,
      timing: mockTiming,
      parallel: mockParallel,
      multiply: mockMultiply,
      View: function View(_ref) {
        var children = _ref.children,
          style = _ref.style,
          onLayout = _ref.onLayout,
          props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
        var RNView = RN.View;
        return (0, _jsxRuntime.jsx)(RNView, Object.assign({
          style: style,
          onLayout: onLayout
        }, props, {
          children: children
        }));
      }
    }),
    ScrollView: function ScrollView(_ref2) {
      var children = _ref2.children,
        props = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
      var RNScrollView = RN.ScrollView;
      return (0, _jsxRuntime.jsx)(RNScrollView, Object.assign({}, props, {
        children: children
      }));
    },
    TouchableOpacity: RN.TouchableOpacity,
    Text: RN.Text,
    View: RN.View
  });
});
_getJestObj().mock('expo-linear-gradient', function () {
  return {
    LinearGradient: function LinearGradient(_ref3) {
      var children = _ref3.children,
        props = (0, _objectWithoutProperties2.default)(_ref3, _excluded3);
      var _require = require('react-native'),
        View = _require.View;
      return (0, _jsxRuntime.jsx)(View, Object.assign({
        testID: "linear-gradient"
      }, props, {
        children: children
      }));
    }
  };
});
_getJestObj().mock('../../../src/components/exercise-common/CategorySelector/style', function () {
  var _require2 = require('react-native'),
    StyleSheet = _require2.StyleSheet;
  return function () {
    return StyleSheet.create({
      container: {
        flex: 1
      },
      backgroundGradient: {
        flex: 1
      },
      scrollView: {
        flexGrow: 0
      },
      scrollContent: {
        paddingHorizontal: 16
      },
      categoryItemWrapper: {
        marginHorizontal: 4
      },
      categoryTouchable: {
        borderRadius: 20
      },
      selectedCategoryItem: {
        paddingHorizontal: 16,
        paddingVertical: 8,
        borderRadius: 20
      },
      selectedInner: {
        flexDirection: 'row',
        alignItems: 'center'
      },
      selectedCategoryText: {
        color: '#FFFFFF',
        fontWeight: 'bold'
      },
      sparkleContainer: {
        marginLeft: 4
      },
      sparkle: {
        fontSize: 12
      },
      categoryItem: {
        paddingHorizontal: 16,
        paddingVertical: 8,
        borderRadius: 20,
        borderWidth: 1
      },
      categoryInner: {
        alignItems: 'center',
        justifyContent: 'center'
      },
      categoryText: {
        fontWeight: '500'
      }
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _CategorySelector = _interopRequireWildcard(require("../../../src/components/exercise-common/CategorySelector"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "style", "onLayout"],
  _excluded2 = ["children"],
  _excluded3 = ["children"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockStart = jest.fn(function (callback) {
  if (callback) {
    setTimeout(function () {
      (0, _reactNative.act)(function () {
        callback();
      });
    }, 0);
  }
});
var mockTiming = jest.fn(function () {
  return {
    start: mockStart
  };
});
var mockParallel = jest.fn(function () {
  return {
    start: mockStart
  };
});
var mockMultiply = jest.fn(function (scale1, scale2) {
  return {
    interpolate: jest.fn(function (config) {
      return config.outputRange[1];
    })
  };
});
var MockAnimatedValue = jest.fn().mockImplementation(function () {
  var initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var mockValue = {
    interpolate: jest.fn(function (config) {
      var ratio = initialValue / (config.inputRange[config.inputRange.length - 1] || 1);
      var outputIndex = Math.min(Math.floor(ratio * config.outputRange.length), config.outputRange.length - 1);
      return config.outputRange[outputIndex] || config.outputRange[0];
    }),
    _value: initialValue,
    setValue: jest.fn(function (value) {
      mockValue._value = value;
    })
  };
  return mockValue;
});
describe('CategorySelector', function () {
  var categories = [{
    id: '1',
    name: 'Grammar'
  }, {
    id: '2',
    name: 'Vocabulary'
  }, {
    id: '3',
    name: 'Reading'
  }];
  var defaultProps = {
    categories: categories,
    onSelectCategory: jest.fn(),
    primaryColor: '#5E60CE'
  };
  beforeEach(function () {
    jest.clearAllMocks();
    MockAnimatedValue.mockClear();
    mockTiming.mockClear();
    mockParallel.mockClear();
    mockStart.mockClear();
    mockMultiply.mockClear();
  });
  afterEach(function () {
    jest.runOnlyPendingTimers();
    jest.useRealTimers();
  });
  describe('Basic rendering', function () {
    it('should render all categories correctly', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps))),
        getByText = _render.getByText;
      expect(getByText('Grammar')).toBeTruthy();
      expect(getByText('Vocabulary')).toBeTruthy();
      expect(getByText('Reading')).toBeTruthy();
    });
    it('should display sparkle for selected category only', function () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
          selectedCategory: "1"
        }))),
        getByText = _render2.getByText,
        queryByText = _render2.queryByText,
        rerender = _render2.rerender;
      expect(getByText('✨')).toBeTruthy();
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
        selectedCategory: "2"
      })));
      expect(getByText('✨')).toBeTruthy();
    });
    it('should handle empty categories gracefully', function () {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: [],
          onSelectCategory: jest.fn()
        })),
        container = _render3.container;
      expect(container).toBeTruthy();
    });
  });
  describe('User interactions', function () {
    it('should call onSelectCategory when unselected category is pressed', (0, _asyncToGenerator2.default)(function* () {
      var onSelectCategory = jest.fn();
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
          onSelectCategory: onSelectCategory,
          selectedCategory: "1"
        }))),
        getByText = _render4.getByText;
      _reactNative.fireEvent.press(getByText('Vocabulary'));
      yield (0, _reactNative.waitFor)(function () {
        expect(onSelectCategory).toHaveBeenCalledWith('2');
      });
    }));
    it('should not call onSelectCategory for already selected category', function () {
      var onSelectCategory = jest.fn();
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        }))),
        getByText = _render5.getByText;
      _reactNative.fireEvent.press(getByText('Grammar'));
      expect(onSelectCategory).not.toHaveBeenCalled();
    });
    it('should handle press in/out events', function () {
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps))),
        getByText = _render6.getByText;
      var grammarButton = getByText('Grammar');
      expect(function () {
        (0, _reactNative.fireEvent)(grammarButton, 'pressIn');
        (0, _reactNative.fireEvent)(grammarButton, 'pressOut');
      }).not.toThrow();
      expect(mockTiming).toHaveBeenCalled();
    });
  });
  describe('Animations', function () {
    beforeEach(function () {
      jest.useFakeTimers();
    });
    it('should initialize animations for all categories', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps)));
      expect(MockAnimatedValue).toHaveBeenCalledTimes(6);
    });
    it('should trigger animations when selectedCategory changes', (0, _asyncToGenerator2.default)(function* () {
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
          selectedCategory: "1"
        }))),
        rerender = _render7.rerender;
      mockTiming.mockClear();
      mockParallel.mockClear();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
          selectedCategory: "2"
        })));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockParallel).toHaveBeenCalled();
        expect(mockTiming).toHaveBeenCalledTimes(2);
      });
    }));
    it('should prevent multiple simultaneous animations', (0, _asyncToGenerator2.default)(function* () {
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
          selectedCategory: "1"
        }))),
        rerender = _render8.rerender;
      mockParallel.mockClear();
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
        selectedCategory: "2"
      })));
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
        selectedCategory: "3"
      })));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockParallel).toHaveBeenCalledTimes(1);
      });
    }));
  });
  describe('Dynamic category management', function () {
    it('should handle category addition', (0, _asyncToGenerator2.default)(function* () {
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps))),
        rerender = _render9.rerender,
        getByText = _render9.getByText;
      var newCategories = [].concat(categories, [{
        id: '4',
        name: 'Writing'
      }]);
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
          categories: newCategories
        })));
      }));
      expect(getByText('Writing')).toBeTruthy();
    }));
    it('should handle category removal', (0, _asyncToGenerator2.default)(function* () {
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps))),
        rerender = _render0.rerender,
        queryByText = _render0.queryByText;
      var reducedCategories = [categories[0]];
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
          categories: reducedCategories
        })));
      }));
      expect(queryByText('Vocabulary')).toBeFalsy();
      expect(queryByText('Reading')).toBeFalsy();
    }));
    it('should maintain animations when categories change', function () {
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
          selectedCategory: "1"
        }))),
        rerender = _render1.rerender;
      MockAnimatedValue.mockClear();
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
        categories: [].concat(categories, [{
          id: '4',
          name: 'Writing'
        }]),
        selectedCategory: "1"
      })));
      expect(MockAnimatedValue).toHaveBeenCalled();
    });
  });
  describe('Accessibility', function () {
    it('should have proper accessibility attributes', function () {
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
          selectedCategory: "1"
        }))),
        getByText = _render10.getByText;
      var grammarButton = getByText('Grammar').parent;
      expect(grammarButton.props.accessibilityRole).toBe('button');
      expect(grammarButton.props.accessibilityLabel).toBe('Grammar');
      expect(grammarButton.props.accessibilityState).toEqual({
        selected: true
      });
    });
  });
  describe('Styling and colors', function () {
    it('should apply custom primary color', function () {
      var customColor = '#FF6B6B';
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
        primaryColor: customColor
      })));
      expect(function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
          primaryColor: customColor
        })));
      }).not.toThrow();
    });
  });
  describe('areEqual memoization', function () {
    it('should return true for identical props', function () {
      var props = {
        selectedCategory: '1',
        primaryColor: '#5E60CE',
        categories: [{
          id: '1',
          name: 'Cat1'
        }],
        onSelectCategory: jest.fn()
      };
      expect((0, _CategorySelector.areEqual)(props, props)).toBe(true);
    });
    it('should return false for different selectedCategory', function () {
      var props1 = {
        selectedCategory: '1',
        primaryColor: '#5E60CE',
        categories: [{
          id: '1',
          name: 'Cat1'
        }]
      };
      var props2 = {
        selectedCategory: '2',
        primaryColor: '#5E60CE',
        categories: [{
          id: '1',
          name: 'Cat1'
        }]
      };
      expect((0, _CategorySelector.areEqual)(props1, props2)).toBe(false);
    });
    it('should return false for different primaryColor', function () {
      var props1 = {
        selectedCategory: '1',
        primaryColor: '#5E60CE',
        categories: [{
          id: '1',
          name: 'Cat1'
        }]
      };
      var props2 = {
        selectedCategory: '1',
        primaryColor: '#FF0000',
        categories: [{
          id: '1',
          name: 'Cat1'
        }]
      };
      expect((0, _CategorySelector.areEqual)(props1, props2)).toBe(false);
    });
    it('should return true for same category reference', function () {
      var categories = [{
        id: '1',
        name: 'Cat1'
      }];
      var props1 = {
        selectedCategory: '1',
        primaryColor: '#5E60CE',
        categories: categories
      };
      var props2 = {
        selectedCategory: '1',
        primaryColor: '#5E60CE',
        categories: categories
      };
      expect((0, _CategorySelector.areEqual)(props1, props2)).toBe(true);
    });
    it('should return true for equivalent categories with different references', function () {
      var props1 = {
        selectedCategory: '1',
        primaryColor: '#5E60CE',
        categories: [{
          id: '1',
          name: 'Cat1'
        }, {
          id: '2',
          name: 'Cat2'
        }]
      };
      var props2 = {
        selectedCategory: '1',
        primaryColor: '#5E60CE',
        categories: [{
          id: '1',
          name: 'Cat1'
        }, {
          id: '2',
          name: 'Cat2'
        }]
      };
      expect((0, _CategorySelector.areEqual)(props1, props2)).toBe(true);
    });
    it('should return false for different category content', function () {
      var props1 = {
        selectedCategory: '1',
        primaryColor: '#5E60CE',
        categories: [{
          id: '1',
          name: 'Cat1'
        }]
      };
      var props2 = {
        selectedCategory: '1',
        primaryColor: '#5E60CE',
        categories: [{
          id: '1',
          name: 'Cat2'
        }]
      };
      expect((0, _CategorySelector.areEqual)(props1, props2)).toBe(false);
    });
  });
  describe('Performance', function () {
    it('should not recreate animations unnecessarily', function () {
      var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
          selectedCategory: "1"
        }))),
        rerender = _render11.rerender;
      var initialCallCount = MockAnimatedValue.mock.calls.length;
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
        selectedCategory: "1"
      })));
      expect(MockAnimatedValue.mock.calls.length).toBe(initialCallCount);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,