{"version":3,"names":["calculateTotalPhrases","exports","categories","arguments","length","undefined","phrases","reduce","total","category","_category$phrases","calculateCompletedPhrasesCount","completedPhrases","Object","keys","count","key","_completedPhrases$key","calculateTotalPhrasesProgress","totalPhrases","totalCompleted","Math","min","round","calculateCategoryPhrasesProgress","map","index","_completedPhrases$ind","categoryPhrases","filter","phrase","categoryId","id","totalInCategory","completedInCategory","progress","title","name","calculatePhrasesStats","phrasesData","completedCount","totalProgress","categoryProgress","totalCategories","averagePhrasesPerCategory"],"sources":["phrasesStats.js"],"sourcesContent":["// utils/phrases/phrasesStats.js\n\n/**\n * Calcule le nombre total de phrases dans toutes les catégories\n * @param {Array} categories - Tableau des catégories\n * @param {Array} phrases - Tableau de toutes les phrases\n * @returns {number} Nombre total de phrases\n */\nexport const calculateTotalPhrases = (categories = [], phrases = []) => {\n  // Si on a directement les phrases\n  if (phrases.length > 0) {\n    return phrases.length;\n  }\n  \n  // Sinon calculer depuis les catégories\n  return categories.reduce(\n    (total, category) => total + (category.phrases?.length || 0),\n    0\n  );\n};\n\n/**\n * Calcule le nombre de phrases complétées\n * @param {Object} completedPhrases - Phrases complétées par catégorie\n * @returns {number} Nombre total de phrases complétées\n */\nexport const calculateCompletedPhrasesCount = (completedPhrases = {}) =>\n  Object.keys(completedPhrases).reduce(\n    (count, key) => count + (completedPhrases[key]?.length || 0),\n    0\n  );\n\n/**\n * Calcule la progression totale en pourcentage\n * @param {Array} categories - Tableau des catégories\n * @param {Array} phrases - Tableau de toutes les phrases\n * @param {Object} completedPhrases - Phrases complétées par catégorie\n * @returns {number} Pourcentage de progression (0-100)\n */\nexport const calculateTotalPhrasesProgress = (categories = [], phrases = [], completedPhrases = {}) => {\n  const totalPhrases = calculateTotalPhrases(categories, phrases);\n  const totalCompleted = calculateCompletedPhrasesCount(completedPhrases);\n  return totalPhrases > 0\n    ? Math.min(100, Math.round((totalCompleted / totalPhrases) * 100))\n    : 0;\n};\n\n/**\n * Calcule la progression par catégorie\n * @param {Array} categories - Tableau des catégories\n * @param {Array} phrases - Tableau de toutes les phrases\n * @param {Object} completedPhrases - Phrases complétées par catégorie\n * @returns {Array} Progression de chaque catégorie\n */\nexport const calculateCategoryPhrasesProgress = (categories = [], phrases = [], completedPhrases = {}) => {\n  return categories.map((category, index) => {\n    // Trouver les phrases de cette catégorie\n    const categoryPhrases = phrases.filter(phrase => phrase.categoryId === category.id);\n    const totalInCategory = categoryPhrases.length;\n    const completedInCategory = completedPhrases[index]?.length || 0;\n    const progress = totalInCategory > 0 \n      ? Math.min(100, Math.round((completedInCategory / totalInCategory) * 100))\n      : 0;\n\n    return {\n      title: category.name || `Catégorie ${index + 1}`,\n      totalPhrases: totalInCategory,\n      completedPhrases: completedInCategory,\n      progress\n    };\n  });\n};\n\n/**\n * Calcule les statistiques générales pour un niveau\n * @param {Object} phrasesData - Données complètes des phrases\n * @param {Object} completedPhrases - Phrases complétées\n * @returns {Object} Statistiques générales\n */\nexport const calculatePhrasesStats = (phrasesData = {}, completedPhrases = {}) => {\n  const categories = phrasesData.categories || [];\n  const phrases = phrasesData.phrases || [];\n  \n  const totalPhrases = calculateTotalPhrases(categories, phrases);\n  const completedCount = calculateCompletedPhrasesCount(completedPhrases);\n  const totalProgress = calculateTotalPhrasesProgress(categories, phrases, completedPhrases);\n  const categoryProgress = calculateCategoryPhrasesProgress(categories, phrases, completedPhrases);\n\n  return {\n    totalPhrases,\n    completedCount,\n    totalProgress,\n    categoryProgress,\n    totalCategories: categories.length,\n    averagePhrasesPerCategory: categories.length > 0 ? Math.round(totalPhrases / categories.length) : 0\n  };\n};"],"mappings":"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","ignoreList":[]}