eb8645de9734493d30022194b88c6a8a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var LogBoxSymbolication = _interopRequireWildcard(require("./LogBoxSymbolication"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function convertComponentStateToStack(componentStack) {
  return componentStack.map(function (frame) {
    var _frame$location, _frame$location2;
    return {
      column: frame == null || (_frame$location = frame.location) == null ? void 0 : _frame$location.column,
      file: frame.fileName,
      lineNumber: frame == null || (_frame$location2 = frame.location) == null ? void 0 : _frame$location2.row,
      methodName: frame.content,
      collapse: false
    };
  });
}
function convertStackToComponentStack(stack) {
  var componentStack = [];
  for (var i = 0; i < stack.length; i++) {
    var frame = stack[i];
    if (frame.lineNumber != null && frame.column != null) {
      componentStack.push({
        fileName: (frame == null ? void 0 : frame.file) || '',
        location: {
          row: frame.lineNumber,
          column: frame.column
        },
        content: frame.methodName,
        collapse: false
      });
    }
  }
  return componentStack;
}
var LogBoxLog = function () {
  function LogBoxLog(data) {
    (0, _classCallCheck2.default)(this, LogBoxLog);
    this.symbolicated = {
      error: null,
      stack: null,
      status: 'NONE'
    };
    this.symbolicatedComponentStack = {
      error: null,
      componentStack: null,
      status: 'NONE'
    };
    this.level = data.level;
    this.type = data.type;
    this.message = data.message;
    this.stack = data.stack;
    this.category = data.category;
    this.componentStack = data.componentStack;
    this.componentStackType = data.componentStackType || 'legacy';
    this.codeFrame = data.codeFrame;
    this.isComponentError = data.isComponentError;
    this.extraData = data.extraData;
    this.count = 1;
    this.onNotificationPress = data.onNotificationPress;
  }
  return (0, _createClass2.default)(LogBoxLog, [{
    key: "incrementCount",
    value: function incrementCount() {
      this.count += 1;
    }
  }, {
    key: "getAvailableStack",
    value: function getAvailableStack() {
      return this.symbolicated.status === 'COMPLETE' ? this.symbolicated.stack : this.stack;
    }
  }, {
    key: "getAvailableComponentStack",
    value: function getAvailableComponentStack() {
      if (this.componentStackType === 'legacy') {
        return this.componentStack;
      }
      return this.symbolicatedComponentStack.status === 'COMPLETE' ? this.symbolicatedComponentStack.componentStack : this.componentStack;
    }
  }, {
    key: "retrySymbolicate",
    value: function retrySymbolicate(callback) {
      if (this.symbolicated.status !== 'COMPLETE') {
        LogBoxSymbolication.deleteStack(this.stack);
        this.handleSymbolicate(callback);
      }
    }
  }, {
    key: "symbolicate",
    value: function symbolicate(callback) {
      if (this.symbolicated.status === 'NONE') {
        this.handleSymbolicate(callback);
      }
    }
  }, {
    key: "handleSymbolicate",
    value: function handleSymbolicate(callback) {
      var _this = this;
      if (this.symbolicated.status !== 'PENDING') {
        this.updateStatus(null, null, null, callback);
        LogBoxSymbolication.symbolicate(this.stack, this.extraData).then(function (data) {
          _this.updateStatus(null, data == null ? void 0 : data.stack, data == null ? void 0 : data.codeFrame, callback);
        }, function (error) {
          _this.updateStatus(error, null, null, callback);
        });
        if (this.componentStack != null && this.componentStackType === 'stack') {
          this.updateComponentStackStatus(null, null, null, callback);
          var componentStackFrames = convertComponentStateToStack(this.componentStack);
          LogBoxSymbolication.symbolicate(componentStackFrames, []).then(function (data) {
            _this.updateComponentStackStatus(null, convertStackToComponentStack(data.stack), null, callback);
          }, function (error) {
            _this.updateComponentStackStatus(error, null, null, callback);
          });
        }
      }
    }
  }, {
    key: "updateStatus",
    value: function updateStatus(error, stack, codeFrame, callback) {
      var lastStatus = this.symbolicated.status;
      if (error != null) {
        this.symbolicated = {
          error: error,
          stack: null,
          status: 'FAILED'
        };
      } else if (stack != null) {
        if (codeFrame) {
          this.codeFrame = codeFrame;
        }
        this.symbolicated = {
          error: null,
          stack: stack,
          status: 'COMPLETE'
        };
      } else {
        this.symbolicated = {
          error: null,
          stack: null,
          status: 'PENDING'
        };
      }
      if (callback && lastStatus !== this.symbolicated.status) {
        callback(this.symbolicated.status);
      }
    }
  }, {
    key: "updateComponentStackStatus",
    value: function updateComponentStackStatus(error, componentStack, codeFrame, callback) {
      var lastStatus = this.symbolicatedComponentStack.status;
      if (error != null) {
        this.symbolicatedComponentStack = {
          error: error,
          componentStack: null,
          status: 'FAILED'
        };
      } else if (componentStack != null) {
        this.symbolicatedComponentStack = {
          error: null,
          componentStack: componentStack,
          status: 'COMPLETE'
        };
      } else {
        this.symbolicatedComponentStack = {
          error: null,
          componentStack: null,
          status: 'PENDING'
        };
      }
      if (callback && lastStatus !== this.symbolicatedComponentStack.status) {
        callback(this.symbolicatedComponentStack.status);
      }
    }
  }]);
}();
var _default = exports.default = LogBoxLog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,