9a5fff8113cf0f09b3cce005ad446380
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactNative = require("@testing-library/react-native");
var _ButtonLabel = _interopRequireDefault(require("../../../../src/components/ui/Button/ButtonLabel"));
var _jsxRuntime = require("react/jsx-runtime");
var mockSizeStyles = {
  text: {
    fontSize: 16
  }
};
var mockVariantStyles = {
  text: {
    color: 'blue'
  }
};
describe('ButtonLabel', function () {
  it('devrait rendre le titre en majuscules si la prop uppercase est vraie', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ButtonLabel.default, {
        title: "mon bouton",
        sizeStyles: mockSizeStyles,
        variantStyles: mockVariantStyles,
        uppercase: true
      })),
      getByText = _render.getByText;
    var textComponent = getByText('mon bouton');
    expect(textComponent.props.style).toContainEqual({
      textTransform: 'uppercase'
    });
  });
  it('ne devrait pas rendre le titre en majuscules si la prop uppercase est fausse', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ButtonLabel.default, {
        title: "mon bouton",
        sizeStyles: mockSizeStyles,
        variantStyles: mockVariantStyles,
        uppercase: false
      })),
      getByText = _render2.getByText;
    var textComponent = getByText('mon bouton');
    expect(textComponent.props.style).not.toContainEqual({
      textTransform: 'uppercase'
    });
  });
  it('devrait appliquer le style de texte correct', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ButtonLabel.default, {
        title: "Titre",
        sizeStyles: mockSizeStyles,
        variantStyles: mockVariantStyles,
        uppercase: false
      })),
      getByText = _render3.getByText;
    var textComponent = getByText('Titre');
    expect(textComponent.props.style).toContainEqual(mockSizeStyles.text);
    expect(textComponent.props.style).toContainEqual(mockVariantStyles.text);
  });
  it('devrait appliquer un style de texte personnalis√© si fourni', function () {
    var customTextStyle = {
      fontWeight: 'bold'
    };
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ButtonLabel.default, {
        title: "Titre",
        sizeStyles: mockSizeStyles,
        variantStyles: mockVariantStyles,
        textStyle: customTextStyle
      })),
      getByText = _render4.getByText;
    var textComponent = getByText('Titre');
    expect(textComponent.props.style).toContainEqual(customTextStyle);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX0J1dHRvbkxhYmVsIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9qc3hSdW50aW1lIiwibW9ja1NpemVTdHlsZXMiLCJ0ZXh0IiwiZm9udFNpemUiLCJtb2NrVmFyaWFudFN0eWxlcyIsImNvbG9yIiwiZGVzY3JpYmUiLCJpdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJkZWZhdWx0IiwidGl0bGUiLCJzaXplU3R5bGVzIiwidmFyaWFudFN0eWxlcyIsInVwcGVyY2FzZSIsImdldEJ5VGV4dCIsInRleHRDb21wb25lbnQiLCJleHBlY3QiLCJwcm9wcyIsInN0eWxlIiwidG9Db250YWluRXF1YWwiLCJ0ZXh0VHJhbnNmb3JtIiwiX3JlbmRlcjIiLCJub3QiLCJfcmVuZGVyMyIsImN1c3RvbVRleHRTdHlsZSIsImZvbnRXZWlnaHQiLCJfcmVuZGVyNCIsInRleHRTdHlsZSJdLCJzb3VyY2VzIjpbIkJ1dHRvbkxhYmVsLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgQnV0dG9uTGFiZWwgZnJvbSAnLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdWkvQnV0dG9uL0J1dHRvbkxhYmVsJztcclxuXHJcbi8vIE1vY2tzIGRlcyBzdHlsZXMgcG91ciBzaW1wbGlmaWVyIGxlcyBhc3NlcnRpb25zXHJcbmNvbnN0IG1vY2tTaXplU3R5bGVzID0geyB0ZXh0OiB7IGZvbnRTaXplOiAxNiB9IH07XHJcbmNvbnN0IG1vY2tWYXJpYW50U3R5bGVzID0geyB0ZXh0OiB7IGNvbG9yOiAnYmx1ZScgfSB9O1xyXG5cclxuZGVzY3JpYmUoJ0J1dHRvbkxhYmVsJywgKCkgPT4ge1xyXG4gIGl0KCdkZXZyYWl0IHJlbmRyZSBsZSB0aXRyZSBlbiBtYWp1c2N1bGVzIHNpIGxhIHByb3AgdXBwZXJjYXNlIGVzdCB2cmFpZScsICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXHJcbiAgICAgIDxCdXR0b25MYWJlbFxyXG4gICAgICAgIHRpdGxlPVwibW9uIGJvdXRvblwiXHJcbiAgICAgICAgc2l6ZVN0eWxlcz17bW9ja1NpemVTdHlsZXN9XHJcbiAgICAgICAgdmFyaWFudFN0eWxlcz17bW9ja1ZhcmlhbnRTdHlsZXN9XHJcbiAgICAgICAgdXBwZXJjYXNlPXt0cnVlfVxyXG4gICAgICAvPlxyXG4gICAgKTtcclxuICAgIC8vIE9uIHRyb3V2ZSBsZSB0ZXh0ZSBvcmlnaW5hbCBldCBvbiB2w6lyaWZpZSBsYSBwcsOpc2VuY2UgZHUgc3R5bGVcclxuICAgIGNvbnN0IHRleHRDb21wb25lbnQgPSBnZXRCeVRleHQoJ21vbiBib3V0b24nKTtcclxuICAgIGV4cGVjdCh0ZXh0Q29tcG9uZW50LnByb3BzLnN0eWxlKS50b0NvbnRhaW5FcXVhbCh7IHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnIH0pO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnbmUgZGV2cmFpdCBwYXMgcmVuZHJlIGxlIHRpdHJlIGVuIG1hanVzY3VsZXMgc2kgbGEgcHJvcCB1cHBlcmNhc2UgZXN0IGZhdXNzZScsICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXHJcbiAgICAgIDxCdXR0b25MYWJlbFxyXG4gICAgICAgIHRpdGxlPVwibW9uIGJvdXRvblwiXHJcbiAgICAgICAgc2l6ZVN0eWxlcz17bW9ja1NpemVTdHlsZXN9XHJcbiAgICAgICAgdmFyaWFudFN0eWxlcz17bW9ja1ZhcmlhbnRTdHlsZXN9XHJcbiAgICAgICAgdXBwZXJjYXNlPXtmYWxzZX1cclxuICAgICAgLz5cclxuICAgICk7XHJcbiAgICBjb25zdCB0ZXh0Q29tcG9uZW50ID0gZ2V0QnlUZXh0KCdtb24gYm91dG9uJyk7XHJcbiAgICBleHBlY3QodGV4dENvbXBvbmVudC5wcm9wcy5zdHlsZSkubm90LnRvQ29udGFpbkVxdWFsKHsgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdkZXZyYWl0IGFwcGxpcXVlciBsZSBzdHlsZSBkZSB0ZXh0ZSBjb3JyZWN0JywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcclxuICAgICAgPEJ1dHRvbkxhYmVsXHJcbiAgICAgICAgdGl0bGU9XCJUaXRyZVwiXHJcbiAgICAgICAgc2l6ZVN0eWxlcz17bW9ja1NpemVTdHlsZXN9XHJcbiAgICAgICAgdmFyaWFudFN0eWxlcz17bW9ja1ZhcmlhbnRTdHlsZXN9XHJcbiAgICAgICAgdXBwZXJjYXNlPXtmYWxzZX1cclxuICAgICAgLz5cclxuICAgICk7XHJcbiAgICBjb25zdCB0ZXh0Q29tcG9uZW50ID0gZ2V0QnlUZXh0KCdUaXRyZScpO1xyXG4gICAgZXhwZWN0KHRleHRDb21wb25lbnQucHJvcHMuc3R5bGUpLnRvQ29udGFpbkVxdWFsKG1vY2tTaXplU3R5bGVzLnRleHQpO1xyXG4gICAgZXhwZWN0KHRleHRDb21wb25lbnQucHJvcHMuc3R5bGUpLnRvQ29udGFpbkVxdWFsKG1vY2tWYXJpYW50U3R5bGVzLnRleHQpO1xyXG4gIH0pO1xyXG4gIFxyXG4gIGl0KCdkZXZyYWl0IGFwcGxpcXVlciB1biBzdHlsZSBkZSB0ZXh0ZSBwZXJzb25uYWxpc8OpIHNpIGZvdXJuaScsICgpID0+IHtcclxuICAgIGNvbnN0IGN1c3RvbVRleHRTdHlsZSA9IHsgZm9udFdlaWdodDogJ2JvbGQnIH07XHJcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxyXG4gICAgICA8QnV0dG9uTGFiZWxcclxuICAgICAgICB0aXRsZT1cIlRpdHJlXCJcclxuICAgICAgICBzaXplU3R5bGVzPXttb2NrU2l6ZVN0eWxlc31cclxuICAgICAgICB2YXJpYW50U3R5bGVzPXttb2NrVmFyaWFudFN0eWxlc31cclxuICAgICAgICB0ZXh0U3R5bGU9e2N1c3RvbVRleHRTdHlsZX1cclxuICAgICAgLz5cclxuICAgICk7XHJcbiAgICBjb25zdCB0ZXh0Q29tcG9uZW50ID0gZ2V0QnlUZXh0KCdUaXRyZScpO1xyXG4gICAgZXhwZWN0KHRleHRDb21wb25lbnQucHJvcHMuc3R5bGUpLnRvQ29udGFpbkVxdWFsKGN1c3RvbVRleHRTdHlsZSk7XHJcbiAgfSk7XHJcbn0pOyJdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUFBLFlBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUEyRSxJQUFBRyxXQUFBLEdBQUFILE9BQUE7QUFHM0UsSUFBTUksY0FBYyxHQUFHO0VBQUVDLElBQUksRUFBRTtJQUFFQyxRQUFRLEVBQUU7RUFBRztBQUFFLENBQUM7QUFDakQsSUFBTUMsaUJBQWlCLEdBQUc7RUFBRUYsSUFBSSxFQUFFO0lBQUVHLEtBQUssRUFBRTtFQUFPO0FBQUUsQ0FBQztBQUVyREMsUUFBUSxDQUFDLGFBQWEsRUFBRSxZQUFNO0VBQzVCQyxFQUFFLENBQUMsc0VBQXNFLEVBQUUsWUFBTTtJQUMvRSxJQUFBQyxPQUFBLEdBQXNCLElBQUFDLG1CQUFNLEVBQzFCLElBQUFULFdBQUEsQ0FBQVUsR0FBQSxFQUFDWixZQUFBLENBQUFhLE9BQVc7UUFDVkMsS0FBSyxFQUFDLFlBQVk7UUFDbEJDLFVBQVUsRUFBRVosY0FBZTtRQUMzQmEsYUFBYSxFQUFFVixpQkFBa0I7UUFDakNXLFNBQVMsRUFBRTtNQUFLLENBQ2pCLENBQ0gsQ0FBQztNQVBPQyxTQUFTLEdBQUFSLE9BQUEsQ0FBVFEsU0FBUztJQVNqQixJQUFNQyxhQUFhLEdBQUdELFNBQVMsQ0FBQyxZQUFZLENBQUM7SUFDN0NFLE1BQU0sQ0FBQ0QsYUFBYSxDQUFDRSxLQUFLLENBQUNDLEtBQUssQ0FBQyxDQUFDQyxjQUFjLENBQUM7TUFBRUMsYUFBYSxFQUFFO0lBQVksQ0FBQyxDQUFDO0VBQ2xGLENBQUMsQ0FBQztFQUVGZixFQUFFLENBQUMsOEVBQThFLEVBQUUsWUFBTTtJQUN2RixJQUFBZ0IsUUFBQSxHQUFzQixJQUFBZCxtQkFBTSxFQUMxQixJQUFBVCxXQUFBLENBQUFVLEdBQUEsRUFBQ1osWUFBQSxDQUFBYSxPQUFXO1FBQ1ZDLEtBQUssRUFBQyxZQUFZO1FBQ2xCQyxVQUFVLEVBQUVaLGNBQWU7UUFDM0JhLGFBQWEsRUFBRVYsaUJBQWtCO1FBQ2pDVyxTQUFTLEVBQUU7TUFBTSxDQUNsQixDQUNILENBQUM7TUFQT0MsU0FBUyxHQUFBTyxRQUFBLENBQVRQLFNBQVM7SUFRakIsSUFBTUMsYUFBYSxHQUFHRCxTQUFTLENBQUMsWUFBWSxDQUFDO0lBQzdDRSxNQUFNLENBQUNELGFBQWEsQ0FBQ0UsS0FBSyxDQUFDQyxLQUFLLENBQUMsQ0FBQ0ksR0FBRyxDQUFDSCxjQUFjLENBQUM7TUFBRUMsYUFBYSxFQUFFO0lBQVksQ0FBQyxDQUFDO0VBQ3RGLENBQUMsQ0FBQztFQUVGZixFQUFFLENBQUMsNkNBQTZDLEVBQUUsWUFBTTtJQUN0RCxJQUFBa0IsUUFBQSxHQUFzQixJQUFBaEIsbUJBQU0sRUFDMUIsSUFBQVQsV0FBQSxDQUFBVSxHQUFBLEVBQUNaLFlBQUEsQ0FBQWEsT0FBVztRQUNWQyxLQUFLLEVBQUMsT0FBTztRQUNiQyxVQUFVLEVBQUVaLGNBQWU7UUFDM0JhLGFBQWEsRUFBRVYsaUJBQWtCO1FBQ2pDVyxTQUFTLEVBQUU7TUFBTSxDQUNsQixDQUNILENBQUM7TUFQT0MsU0FBUyxHQUFBUyxRQUFBLENBQVRULFNBQVM7SUFRakIsSUFBTUMsYUFBYSxHQUFHRCxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3hDRSxNQUFNLENBQUNELGFBQWEsQ0FBQ0UsS0FBSyxDQUFDQyxLQUFLLENBQUMsQ0FBQ0MsY0FBYyxDQUFDcEIsY0FBYyxDQUFDQyxJQUFJLENBQUM7SUFDckVnQixNQUFNLENBQUNELGFBQWEsQ0FBQ0UsS0FBSyxDQUFDQyxLQUFLLENBQUMsQ0FBQ0MsY0FBYyxDQUFDakIsaUJBQWlCLENBQUNGLElBQUksQ0FBQztFQUMxRSxDQUFDLENBQUM7RUFFRkssRUFBRSxDQUFDLDREQUE0RCxFQUFFLFlBQU07SUFDckUsSUFBTW1CLGVBQWUsR0FBRztNQUFFQyxVQUFVLEVBQUU7SUFBTyxDQUFDO0lBQzlDLElBQUFDLFFBQUEsR0FBc0IsSUFBQW5CLG1CQUFNLEVBQzFCLElBQUFULFdBQUEsQ0FBQVUsR0FBQSxFQUFDWixZQUFBLENBQUFhLE9BQVc7UUFDVkMsS0FBSyxFQUFDLE9BQU87UUFDYkMsVUFBVSxFQUFFWixjQUFlO1FBQzNCYSxhQUFhLEVBQUVWLGlCQUFrQjtRQUNqQ3lCLFNBQVMsRUFBRUg7TUFBZ0IsQ0FDNUIsQ0FDSCxDQUFDO01BUE9WLFNBQVMsR0FBQVksUUFBQSxDQUFUWixTQUFTO0lBUWpCLElBQU1DLGFBQWEsR0FBR0QsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUN4Q0UsTUFBTSxDQUFDRCxhQUFhLENBQUNFLEtBQUssQ0FBQ0MsS0FBSyxDQUFDLENBQUNDLGNBQWMsQ0FBQ0ssZUFBZSxDQUFDO0VBQ25FLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==