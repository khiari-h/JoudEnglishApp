{"version":3,"names":["_react","require","_propTypes","_interopRequireDefault","_jsxRuntime","cov_22z9cams1k","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","_coverageSchema","coverage","actualCoverage","CurrentLevelContext","createContext","CurrentLevelProvider","_ref","children","_ref$initialLevel","initialLevel","_ref2","useState","_ref3","_slicedToArray2","default","currentLevel","setCurrentLevel","contextValue","useMemo","jsx","Provider","value","propTypes","PropTypes","node","isRequired","string","useCurrentLevel","context","useContext","Error"],"sources":["CurrentLevelContext.js"],"sourcesContent":["import { createContext, useContext, useState, useMemo } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\n// Crée le contexte\r\nconst CurrentLevelContext = createContext();\r\n\r\n// Provider pour englober l'app\r\nexport function CurrentLevelProvider({ children, initialLevel = \"1\" }) {\r\n  const [currentLevel, setCurrentLevel] = useState(initialLevel);\r\n\r\n  // Mémorise la valeur du contexte pour éviter les re-rendus inutiles\r\n  const contextValue = useMemo(() => ({\r\n    currentLevel,\r\n    setCurrentLevel\r\n  }), [currentLevel]);\r\n\r\n  return (\r\n    <CurrentLevelContext.Provider value={contextValue}>\r\n      {children}\r\n    </CurrentLevelContext.Provider>\r\n  );\r\n}\r\n\r\nCurrentLevelProvider.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  initialLevel: PropTypes.string,\r\n};\r\n\r\n// Hook d'accès pratique\r\nexport function useCurrentLevel() {\r\n  const context = useContext(CurrentLevelContext);\r\n  if (!context) {\r\n    throw new Error(\"useCurrentLevel doit être utilisé dans CurrentLevelProvider\");\r\n  }\r\n  return context;\r\n} "],"mappings":"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","ignoreList":[]}