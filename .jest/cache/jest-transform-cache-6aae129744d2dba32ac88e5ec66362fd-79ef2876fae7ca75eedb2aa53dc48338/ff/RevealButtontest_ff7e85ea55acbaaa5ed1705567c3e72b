ca8edcf59ba1c1bdfbe5b753b8c2126b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _RevealButton = _interopRequireDefault(require("../../../src/components/ui/RevealButton"));
var _jsxRuntime = require("react/jsx-runtime");
describe('RevealButton', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('renders reveal button when not revealed', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevealButton.default, {
      isRevealed: false,
      onToggle: jest.fn(),
      revealText: "Show Answer"
    }));
    expect(_reactNative.screen.getByText('Show Answer')).toBeOnTheScreen();
    expect(_reactNative.screen.queryByText('Hide Translation')).toBeNull();
  });
  it('renders revealed content and hide button when revealed', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevealButton.default, {
      isRevealed: true,
      onToggle: jest.fn(),
      revealedContent: "The answer is 42",
      hideText: "Hide Answer"
    }));
    expect(_reactNative.screen.getByText('The answer is 42')).toBeOnTheScreen();
    expect(_reactNative.screen.getByText('Hide Answer')).toBeOnTheScreen();
    expect(_reactNative.screen.queryByText('Reveal Translation')).toBeNull();
  });
  it('calls onToggle when reveal button is pressed', (0, _asyncToGenerator2.default)(function* () {
    var handleToggle = jest.fn();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevealButton.default, {
      isRevealed: false,
      onToggle: handleToggle
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Reveal Translation'));
    yield (0, _reactNative.waitFor)(function () {
      expect(handleToggle).toHaveBeenCalledTimes(1);
    }, {
      timeout: 200
    });
  }));
  it('calls onToggle when hide button is pressed', (0, _asyncToGenerator2.default)(function* () {
    var handleToggle = jest.fn();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevealButton.default, {
      isRevealed: true,
      onToggle: handleToggle
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Hide Translation'));
    yield (0, _reactNative.waitFor)(function () {
      expect(handleToggle).toHaveBeenCalledTimes(1);
    }, {
      timeout: 200
    });
  }));
  it('displays custom revealText', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevealButton.default, {
      isRevealed: false,
      onToggle: jest.fn(),
      revealText: "Custom Reveal"
    }));
    expect(_reactNative.screen.getByText('Custom Reveal')).toBeOnTheScreen();
  });
  it('displays custom hideText', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevealButton.default, {
      isRevealed: true,
      onToggle: jest.fn(),
      hideText: "Custom Hide"
    }));
    expect(_reactNative.screen.getByText('Custom Hide')).toBeOnTheScreen();
  });
  it('displays custom revealedContent', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevealButton.default, {
      isRevealed: true,
      onToggle: jest.fn(),
      revealedContent: "Custom Content"
    }));
    expect(_reactNative.screen.getByText('Custom Content')).toBeOnTheScreen();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,