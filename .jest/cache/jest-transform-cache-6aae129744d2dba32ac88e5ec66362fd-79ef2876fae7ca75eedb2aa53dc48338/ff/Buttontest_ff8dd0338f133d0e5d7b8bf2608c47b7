d924bf26bbf9e8c353d544ba4dafcf4a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Button = _interopRequireDefault(require("../../../src/components/ui/Button"));
var _jsxRuntime = require("react/jsx-runtime");
describe('Button', function () {
  it('devrait rendre le texte correct', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        title: "Mon Bouton",
        onPress: function onPress() {}
      })),
      getByText = _render.getByText;
    expect(getByText('Mon Bouton')).toBeTruthy();
  });
  it('devrait appeler la fonction onPress quand le bouton est pressé', function () {
    var mockOnPress = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        title: "Mon Bouton",
        onPress: mockOnPress
      })),
      getByText = _render2.getByText;
    _reactNative.fireEvent.press(getByText('Mon Bouton'));
    expect(mockOnPress).toHaveBeenCalledTimes(1);
  });
  it('ne devrait pas appeler la fonction onPress quand le bouton est désactivé', function () {
    var mockOnPress = jest.fn();
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        title: "Mon Bouton",
        onPress: mockOnPress,
        disabled: true
      })),
      getByText = _render3.getByText;
    _reactNative.fireEvent.press(getByText('Mon Bouton'));
    expect(mockOnPress).not.toHaveBeenCalled();
  });
  it('devrait afficher un indicateur de chargement si loading est vrai', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        title: "Mon Bouton",
        onPress: function onPress() {},
        loading: true
      })),
      queryByRole = _render4.queryByRole;
    expect(queryByRole('progressbar')).toBeTruthy();
  });
  it('ne devrait pas afficher un indicateur de chargement si loading est faux', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        title: "Mon Bouton",
        onPress: function onPress() {},
        loading: false
      })),
      queryByRole = _render5.queryByRole;
    expect(queryByRole('progressbar')).toBeNull();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9CdXR0b24iLCJfanN4UnVudGltZSIsImRlc2NyaWJlIiwiaXQiLCJfcmVuZGVyIiwicmVuZGVyIiwianN4IiwiZGVmYXVsdCIsInRpdGxlIiwib25QcmVzcyIsImdldEJ5VGV4dCIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJtb2NrT25QcmVzcyIsImplc3QiLCJmbiIsIl9yZW5kZXIyIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJfcmVuZGVyMyIsImRpc2FibGVkIiwibm90IiwidG9IYXZlQmVlbkNhbGxlZCIsIl9yZW5kZXI0IiwibG9hZGluZyIsInF1ZXJ5QnlSb2xlIiwiX3JlbmRlcjUiLCJ0b0JlTnVsbCJdLCJzb3VyY2VzIjpbIkJ1dHRvbi50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdWkvQnV0dG9uJztcblxuZGVzY3JpYmUoJ0J1dHRvbicsICgpID0+IHtcbiAgaXQoJ2RldnJhaXQgcmVuZHJlIGxlIHRleHRlIGNvcnJlY3QnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcig8QnV0dG9uIHRpdGxlPVwiTW9uIEJvdXRvblwiIG9uUHJlc3M9eygpID0+IHt9fSAvPik7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnTW9uIEJvdXRvbicpKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KCdkZXZyYWl0IGFwcGVsZXIgbGEgZm9uY3Rpb24gb25QcmVzcyBxdWFuZCBsZSBib3V0b24gZXN0IHByZXNzw6knLCAoKSA9PiB7XG4gICAgY29uc3QgbW9ja09uUHJlc3MgPSBqZXN0LmZuKCk7XG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcig8QnV0dG9uIHRpdGxlPVwiTW9uIEJvdXRvblwiIG9uUHJlc3M9e21vY2tPblByZXNzfSAvPik7XG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgnTW9uIEJvdXRvbicpKTtcbiAgICBleHBlY3QobW9ja09uUHJlc3MpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgfSk7XG5cbiAgaXQoJ25lIGRldnJhaXQgcGFzIGFwcGVsZXIgbGEgZm9uY3Rpb24gb25QcmVzcyBxdWFuZCBsZSBib3V0b24gZXN0IGTDqXNhY3RpdsOpJywgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tPblByZXNzID0gamVzdC5mbigpO1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPEJ1dHRvbiB0aXRsZT1cIk1vbiBCb3V0b25cIiBvblByZXNzPXttb2NrT25QcmVzc30gZGlzYWJsZWQgLz4pO1xuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ01vbiBCb3V0b24nKSk7XG4gICAgZXhwZWN0KG1vY2tPblByZXNzKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcblxuICBpdCgnZGV2cmFpdCBhZmZpY2hlciB1biBpbmRpY2F0ZXVyIGRlIGNoYXJnZW1lbnQgc2kgbG9hZGluZyBlc3QgdnJhaScsICgpID0+IHtcbiAgICBjb25zdCB7IHF1ZXJ5QnlSb2xlIH0gPSByZW5kZXIoPEJ1dHRvbiB0aXRsZT1cIk1vbiBCb3V0b25cIiBvblByZXNzPXsoKSA9PiB7fX0gbG9hZGluZyAvPik7XG4gICAgZXhwZWN0KHF1ZXJ5QnlSb2xlKCdwcm9ncmVzc2JhcicpKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KCduZSBkZXZyYWl0IHBhcyBhZmZpY2hlciB1biBpbmRpY2F0ZXVyIGRlIGNoYXJnZW1lbnQgc2kgbG9hZGluZyBlc3QgZmF1eCcsICgpID0+IHtcbiAgICBjb25zdCB7IHF1ZXJ5QnlSb2xlIH0gPSByZW5kZXIoPEJ1dHRvbiB0aXRsZT1cIk1vbiBCb3V0b25cIiBvblByZXNzPXsoKSA9PiB7fX0gbG9hZGluZz17ZmFsc2V9IC8+KTtcbiAgICBleHBlY3QocXVlcnlCeVJvbGUoJ3Byb2dyZXNzYmFyJykpLnRvQmVOdWxsKCk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFBdUQsSUFBQUcsV0FBQSxHQUFBSCxPQUFBO0FBRXZESSxRQUFRLENBQUMsUUFBUSxFQUFFLFlBQU07RUFDdkJDLEVBQUUsQ0FBQyxpQ0FBaUMsRUFBRSxZQUFNO0lBQzFDLElBQUFDLE9BQUEsR0FBc0IsSUFBQUMsbUJBQU0sRUFBQyxJQUFBSixXQUFBLENBQUFLLEdBQUEsRUFBQ04sT0FBQSxDQUFBTyxPQUFNO1FBQUNDLEtBQUssRUFBQyxZQUFZO1FBQUNDLE9BQU8sRUFBRSxTQUFUQSxPQUFPQSxDQUFBLEVBQVEsQ0FBQztNQUFFLENBQUUsQ0FBQyxDQUFDO01BQXRFQyxTQUFTLEdBQUFOLE9BQUEsQ0FBVE0sU0FBUztJQUNqQkMsTUFBTSxDQUFDRCxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQ0UsVUFBVSxDQUFDLENBQUM7RUFDOUMsQ0FBQyxDQUFDO0VBRUZULEVBQUUsQ0FBQyxnRUFBZ0UsRUFBRSxZQUFNO0lBQ3pFLElBQU1VLFdBQVcsR0FBR0MsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUM3QixJQUFBQyxRQUFBLEdBQXNCLElBQUFYLG1CQUFNLEVBQUMsSUFBQUosV0FBQSxDQUFBSyxHQUFBLEVBQUNOLE9BQUEsQ0FBQU8sT0FBTTtRQUFDQyxLQUFLLEVBQUMsWUFBWTtRQUFDQyxPQUFPLEVBQUVJO01BQVksQ0FBRSxDQUFDLENBQUM7TUFBekVILFNBQVMsR0FBQU0sUUFBQSxDQUFUTixTQUFTO0lBQ2pCTyxzQkFBUyxDQUFDQyxLQUFLLENBQUNSLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN4Q0MsTUFBTSxDQUFDRSxXQUFXLENBQUMsQ0FBQ00scUJBQXFCLENBQUMsQ0FBQyxDQUFDO0VBQzlDLENBQUMsQ0FBQztFQUVGaEIsRUFBRSxDQUFDLDBFQUEwRSxFQUFFLFlBQU07SUFDbkYsSUFBTVUsV0FBVyxHQUFHQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLElBQUFLLFFBQUEsR0FBc0IsSUFBQWYsbUJBQU0sRUFBQyxJQUFBSixXQUFBLENBQUFLLEdBQUEsRUFBQ04sT0FBQSxDQUFBTyxPQUFNO1FBQUNDLEtBQUssRUFBQyxZQUFZO1FBQUNDLE9BQU8sRUFBRUksV0FBWTtRQUFDUSxRQUFRO01BQUEsQ0FBRSxDQUFDLENBQUM7TUFBbEZYLFNBQVMsR0FBQVUsUUFBQSxDQUFUVixTQUFTO0lBQ2pCTyxzQkFBUyxDQUFDQyxLQUFLLENBQUNSLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN4Q0MsTUFBTSxDQUFDRSxXQUFXLENBQUMsQ0FBQ1MsR0FBRyxDQUFDQyxnQkFBZ0IsQ0FBQyxDQUFDO0VBQzVDLENBQUMsQ0FBQztFQUVGcEIsRUFBRSxDQUFDLGtFQUFrRSxFQUFFLFlBQU07SUFDM0UsSUFBQXFCLFFBQUEsR0FBd0IsSUFBQW5CLG1CQUFNLEVBQUMsSUFBQUosV0FBQSxDQUFBSyxHQUFBLEVBQUNOLE9BQUEsQ0FBQU8sT0FBTTtRQUFDQyxLQUFLLEVBQUMsWUFBWTtRQUFDQyxPQUFPLEVBQUUsU0FBVEEsT0FBT0EsQ0FBQSxFQUFRLENBQUMsQ0FBRTtRQUFDZ0IsT0FBTztNQUFBLENBQUUsQ0FBQyxDQUFDO01BQWhGQyxXQUFXLEdBQUFGLFFBQUEsQ0FBWEUsV0FBVztJQUNuQmYsTUFBTSxDQUFDZSxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQ2QsVUFBVSxDQUFDLENBQUM7RUFDakQsQ0FBQyxDQUFDO0VBRUZULEVBQUUsQ0FBQyx5RUFBeUUsRUFBRSxZQUFNO0lBQ2xGLElBQUF3QixRQUFBLEdBQXdCLElBQUF0QixtQkFBTSxFQUFDLElBQUFKLFdBQUEsQ0FBQUssR0FBQSxFQUFDTixPQUFBLENBQUFPLE9BQU07UUFBQ0MsS0FBSyxFQUFDLFlBQVk7UUFBQ0MsT0FBTyxFQUFFLFNBQVRBLE9BQU9BLENBQUEsRUFBUSxDQUFDLENBQUU7UUFBQ2dCLE9BQU8sRUFBRTtNQUFNLENBQUUsQ0FBQyxDQUFDO01BQXhGQyxXQUFXLEdBQUFDLFFBQUEsQ0FBWEQsV0FBVztJQUNuQmYsTUFBTSxDQUFDZSxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQ0UsUUFBUSxDQUFDLENBQUM7RUFDL0MsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119