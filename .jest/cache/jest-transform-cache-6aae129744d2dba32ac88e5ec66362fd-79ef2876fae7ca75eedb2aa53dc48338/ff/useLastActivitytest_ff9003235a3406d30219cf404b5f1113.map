{"version":3,"names":["_getJestObj","mock","getItem","jest","fn","setItem","removeItem","STORAGE_KEYS","LAST_ACTIVITY","emit","_interopRequireDefault","require","_asyncToGenerator2","_reactHooks","_asyncStorage","_useLastActivity","_require","describe","beforeEach","clearAllMocks","spyOn","Date","mockReturnValue","afterEach","restoreAllMocks","it","default","mockActivity","type","level","category","timestamp","AsyncStorage","mockResolvedValue","JSON","stringify","_renderHook","renderHook","useLastActivity","result","waitForNextUpdate","expect","current","lastActivity","toEqual","Object","assign","timeElapsed","isLoading","toBe","_renderHook2","toBeNull","mockRejectedValue","Error","_renderHook3","_renderHook4","testCases","minutesAgo","expected","testCase","_renderHook5","hoursAgo","_renderHook6","daysAgo","_renderHook7","_renderHook8","activityData","score","act","saveActivity","toHaveBeenCalledWith","_renderHook9","eventBus","_renderHook0","_renderHook1","not","clearActivity","_renderHook10","_renderHook11","reload","_renderHook12","rerender","initialSaveActivity","initialClearActivity","initialReload","_renderHook13","_renderHook14","toBeDefined"],"sources":["useLastActivity.test.js"],"sourcesContent":["// __tests__/hooks/useLastActivity.test.js\nimport { renderHook, act } from '@testing-library/react-hooks';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport useLastActivity from '../../src/hooks/useLastActivity';\n\n// Mock AsyncStorage\njest.mock('@react-native-async-storage/async-storage', () => ({\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n}));\n\n// Mock constants\njest.mock('../../src/utils/constants', () => ({\n  STORAGE_KEYS: {\n    LAST_ACTIVITY: 'last_activity'\n  }\n}));\n\n// Mock eventBus\njest.mock('../../src/utils/eventBus', () => ({\n  emit: jest.fn()\n}));\n\ndescribe('useLastActivity', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.spyOn(Date, 'now').mockReturnValue(1640995200000); // 2022-01-01 00:00:00\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  describe('Chargement initial', () => {\n    it('devrait charger la dernière activité depuis AsyncStorage', async () => {\n      const mockActivity = {\n        type: 'vocabulary',\n        level: '1',\n        category: 'Animals',\n        timestamp: 1640995200000 - 300000 // Il y a 5 minutes\n      };\n\n      AsyncStorage.getItem.mockResolvedValue(JSON.stringify(mockActivity));\n\n      const { result, waitForNextUpdate } = renderHook(() => useLastActivity());\n\n      await waitForNextUpdate();\n\n      expect(result.current.lastActivity).toEqual({\n        ...mockActivity,\n        timeElapsed: 'Il y a 5 min'\n      });\n      expect(result.current.isLoading).toBe(false);\n    });\n\n    it('devrait retourner null si aucune activité n\\'est stockée', async () => {\n      AsyncStorage.getItem.mockResolvedValue(null);\n\n      const { result, waitForNextUpdate } = renderHook(() => useLastActivity());\n\n      await waitForNextUpdate();\n\n      expect(result.current.lastActivity).toBeNull();\n      expect(result.current.isLoading).toBe(false);\n    });\n\n    it('devrait gérer les erreurs de chargement', async () => {\n      AsyncStorage.getItem.mockRejectedValue(new Error('Storage error'));\n\n      const { result, waitForNextUpdate } = renderHook(() => useLastActivity());\n\n      await waitForNextUpdate();\n\n      expect(result.current.lastActivity).toBeNull();\n      expect(result.current.isLoading).toBe(false);\n    });\n  });\n\n  describe('Calcul du temps écoulé', () => {\n    it('devrait afficher \"À l\\'instant\" pour une activité récente', async () => {\n      const mockActivity = {\n        type: 'grammar',\n        timestamp: 1640995200000 // Maintenant\n      };\n\n      AsyncStorage.getItem.mockResolvedValue(JSON.stringify(mockActivity));\n\n      const { result, waitForNextUpdate } = renderHook(() => useLastActivity());\n\n      await waitForNextUpdate();\n\n      expect(result.current.lastActivity.timeElapsed).toBe('À l\\'instant');\n    });\n\n    it('devrait calculer les minutes correctement', async () => {\n      const testCases = [\n        { minutesAgo: 0, expected: 'À l\\'instant' },\n        { minutesAgo: 1, expected: 'Il y a 1 min' },\n        { minutesAgo: 30, expected: 'Il y a 30 min' },\n        { minutesAgo: 59, expected: 'Il y a 59 min' }\n      ];\n\n      for (const testCase of testCases) {\n        const mockActivity = {\n          type: 'test',\n          timestamp: 1640995200000 - (testCase.minutesAgo * 60 * 1000)\n        };\n\n        AsyncStorage.getItem.mockResolvedValue(JSON.stringify(mockActivity));\n\n        const { result, waitForNextUpdate } = renderHook(() => useLastActivity());\n        await waitForNextUpdate();\n\n        expect(result.current.lastActivity.timeElapsed).toBe(testCase.expected);\n      }\n    });\n\n    it('devrait calculer les heures correctement', async () => {\n      const testCases = [\n        { hoursAgo: 1, expected: 'Il y a 1h' },\n        { hoursAgo: 5, expected: 'Il y a 5h' },\n        { hoursAgo: 23, expected: 'Il y a 23h' }\n      ];\n\n      for (const testCase of testCases) {\n        const mockActivity = {\n          type: 'test',\n          timestamp: 1640995200000 - (testCase.hoursAgo * 60 * 60 * 1000)\n        };\n\n        AsyncStorage.getItem.mockResolvedValue(JSON.stringify(mockActivity));\n\n        const { result, waitForNextUpdate } = renderHook(() => useLastActivity());\n        await waitForNextUpdate();\n\n        expect(result.current.lastActivity.timeElapsed).toBe(testCase.expected);\n      }\n    });\n\n    it('devrait calculer les jours correctement', async () => {\n      const testCases = [\n        { daysAgo: 1, expected: 'Il y a 1j' },\n        { daysAgo: 3, expected: 'Il y a 3j' },\n        { daysAgo: 30, expected: 'Il y a 30j' }\n      ];\n\n      for (const testCase of testCases) {\n        const mockActivity = {\n          type: 'test',\n          timestamp: 1640995200000 - (testCase.daysAgo * 24 * 60 * 60 * 1000)\n        };\n\n        AsyncStorage.getItem.mockResolvedValue(JSON.stringify(mockActivity));\n\n        const { result, waitForNextUpdate } = renderHook(() => useLastActivity());\n        await waitForNextUpdate();\n\n        expect(result.current.lastActivity.timeElapsed).toBe(testCase.expected);\n      }\n    });\n  });\n\n  describe('Sauvegarde d\\'activité', () => {\n    it('devrait sauvegarder une nouvelle activité', async () => {\n      AsyncStorage.getItem.mockResolvedValue(null);\n      const { result, waitForNextUpdate } = renderHook(() => useLastActivity());\n      await waitForNextUpdate();\n\n      const activityData = {\n        type: 'vocabulary',\n        level: '2',\n        category: 'Food',\n        score: 85\n      };\n\n      await act(async () => {\n        await result.current.saveActivity(activityData);\n      });\n\n      expect(AsyncStorage.setItem).toHaveBeenCalledWith(\n        'last_activity',\n        JSON.stringify({\n          ...activityData,\n          timestamp: 1640995200000\n        })\n      );\n\n      expect(result.current.lastActivity).toEqual({\n        ...activityData,\n        timestamp: 1640995200000,\n        timeElapsed: 'À l\\'instant'\n      });\n    });\n\n    it('devrait émettre un événement de progression', async () => {\n      AsyncStorage.getItem.mockResolvedValue(null);\n      const { result, waitForNextUpdate } = renderHook(() => useLastActivity());\n      await waitForNextUpdate();\n\n      const activityData = { type: 'test' };\n\n      await act(async () => {\n        await result.current.saveActivity(activityData);\n      });\n\n      const eventBus = require('../../src/utils/eventBus');\n      expect(eventBus.emit).toHaveBeenCalledWith('progress-updated', {\n        ...activityData,\n        timestamp: 1640995200000\n      });\n    });\n\n    it('devrait gérer les erreurs de sauvegarde', async () => {\n      AsyncStorage.getItem.mockResolvedValue(null);\n      AsyncStorage.setItem.mockRejectedValue(new Error('Save error'));\n\n      const { result, waitForNextUpdate } = renderHook(() => useLastActivity());\n      await waitForNextUpdate();\n\n      const activityData = { type: 'test' };\n\n      // Ne devrait pas planter\n      await act(async () => {\n        await result.current.saveActivity(activityData);\n      });\n\n      expect(result.current.lastActivity).toBeNull(); // État non mis à jour en cas d'erreur\n    });\n  });\n\n  describe('Suppression d\\'activité', () => {\n    it('devrait supprimer l\\'activité stockée', async () => {\n      const mockActivity = { type: 'test', timestamp: 1640995200000 };\n      AsyncStorage.getItem.mockResolvedValue(JSON.stringify(mockActivity));\n\n      const { result, waitForNextUpdate } = renderHook(() => useLastActivity());\n      await waitForNextUpdate();\n\n      expect(result.current.lastActivity).not.toBeNull();\n\n      await act(async () => {\n        await result.current.clearActivity();\n      });\n\n      expect(AsyncStorage.removeItem).toHaveBeenCalledWith('last_activity');\n      expect(result.current.lastActivity).toBeNull();\n    });\n\n    it('devrait gérer les erreurs de suppression', async () => {\n      AsyncStorage.getItem.mockResolvedValue(null);\n      AsyncStorage.removeItem.mockRejectedValue(new Error('Remove error'));\n\n      const { result, waitForNextUpdate } = renderHook(() => useLastActivity());\n      await waitForNextUpdate();\n\n      // Ne devrait pas planter\n      await act(async () => {\n        await result.current.clearActivity();\n      });\n\n      expect(result.current.lastActivity).toBeNull();\n    });\n  });\n\n  describe('Rechargement', () => {\n    it('devrait permettre de recharger les données', async () => {\n      AsyncStorage.getItem.mockResolvedValue(null);\n      const { result, waitForNextUpdate } = renderHook(() => useLastActivity());\n      await waitForNextUpdate();\n\n      expect(result.current.lastActivity).toBeNull();\n\n      // Changer les données mockées\n      const mockActivity = { type: 'new', timestamp: 1640995200000 };\n      AsyncStorage.getItem.mockResolvedValue(JSON.stringify(mockActivity));\n\n      await act(async () => {\n        await result.current.reload();\n      });\n\n      expect(result.current.lastActivity).toEqual({\n        ...mockActivity,\n        timeElapsed: 'À l\\'instant'\n      });\n    });\n  });\n\n  describe('Stabilité des fonctions', () => {\n    it('devrait maintenir la stabilité des fonctions entre les renders', async () => {\n      AsyncStorage.getItem.mockResolvedValue(null);\n      const { result, waitForNextUpdate, rerender } = renderHook(() => useLastActivity());\n      await waitForNextUpdate();\n\n      const initialSaveActivity = result.current.saveActivity;\n      const initialClearActivity = result.current.clearActivity;\n      const initialReload = result.current.reload;\n\n      rerender();\n\n      expect(result.current.saveActivity).toBe(initialSaveActivity);\n      expect(result.current.clearActivity).toBe(initialClearActivity);\n      expect(result.current.reload).toBe(initialReload);\n    });\n  });\n\n  describe('Gestion des données corrompues', () => {\n    it('devrait gérer les données JSON invalides', async () => {\n      AsyncStorage.getItem.mockResolvedValue('invalid json');\n\n      const { result, waitForNextUpdate } = renderHook(() => useLastActivity());\n\n      await waitForNextUpdate();\n\n      expect(result.current.lastActivity).toBeNull();\n      expect(result.current.isLoading).toBe(false);\n    });\n\n    it('devrait gérer les activités sans timestamp', async () => {\n      const mockActivity = { type: 'test' }; // Pas de timestamp\n      AsyncStorage.getItem.mockResolvedValue(JSON.stringify(mockActivity));\n\n      const { result, waitForNextUpdate } = renderHook(() => useLastActivity());\n\n      await waitForNextUpdate();\n\n      // Devrait calculer le temps écoulé même sans timestamp\n      expect(result.current.lastActivity).toBeDefined();\n      expect(result.current.lastActivity.timeElapsed).toBeDefined();\n    });\n  });\n});"],"mappings":"AAMAA,WAAA,GAAKC,IAAI,CAAC,2CAA2C,EAAE;EAAA,OAAO;IAC5DC,OAAO,EAAEC,IAAI,CAACC,EAAE,CAAC,CAAC;IAClBC,OAAO,EAAEF,IAAI,CAACC,EAAE,CAAC,CAAC;IAClBE,UAAU,EAAEH,IAAI,CAACC,EAAE,CAAC;EACtB,CAAC;AAAA,CAAC,CAAC;AAGHJ,WAAA,GAAKC,IAAI,CAAC,2BAA2B,EAAE;EAAA,OAAO;IAC5CM,YAAY,EAAE;MACZC,aAAa,EAAE;IACjB;EACF,CAAC;AAAA,CAAC,CAAC;AAGHR,WAAA,GAAKC,IAAI,CAAC,0BAA0B,EAAE;EAAA,OAAO;IAC3CQ,IAAI,EAAEN,IAAI,CAACC,EAAE,CAAC;EAChB,CAAC;AAAA,CAAC,CAAC;AAAC,IAAAM,sBAAA,GAAAC,OAAA;AAAA,IAAAC,kBAAA,GAAAF,sBAAA,CAAAC,OAAA;AArBJ,IAAAE,WAAA,GAAAF,OAAA;AACA,IAAAG,aAAA,GAAAJ,sBAAA,CAAAC,OAAA;AACA,IAAAI,gBAAA,GAAAL,sBAAA,CAAAC,OAAA;AAA8D,SAAAX,YAAA;EAAA,IAAAgB,QAAA,GAAAL,OAAA;IAAAR,IAAA,GAAAa,QAAA,CAAAb,IAAA;EAAAH,WAAA,YAAAA,YAAA;IAAA,OAAAG,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAqB9Dc,QAAQ,CAAC,iBAAiB,EAAE,YAAM;EAChCC,UAAU,CAAC,YAAM;IACff,IAAI,CAACgB,aAAa,CAAC,CAAC;IACpBhB,IAAI,CAACiB,KAAK,CAACC,IAAI,EAAE,KAAK,CAAC,CAACC,eAAe,CAAC,aAAa,CAAC;EACxD,CAAC,CAAC;EAEFC,SAAS,CAAC,YAAM;IACdpB,IAAI,CAACqB,eAAe,CAAC,CAAC;EACxB,CAAC,CAAC;EAEFP,QAAQ,CAAC,oBAAoB,EAAE,YAAM;IACnCQ,EAAE,CAAC,0DAA0D,MAAAb,kBAAA,CAAAc,OAAA,EAAE,aAAY;MACzE,IAAMC,YAAY,GAAG;QACnBC,IAAI,EAAE,YAAY;QAClBC,KAAK,EAAE,GAAG;QACVC,QAAQ,EAAE,SAAS;QACnBC,SAAS,EAAE,aAAa,GAAG;MAC7B,CAAC;MAEDC,qBAAY,CAAC9B,OAAO,CAAC+B,iBAAiB,CAACC,IAAI,CAACC,SAAS,CAACR,YAAY,CAAC,CAAC;MAEpE,IAAAS,WAAA,GAAsC,IAAAC,sBAAU,EAAC;UAAA,OAAM,IAAAC,wBAAe,EAAC,CAAC;QAAA,EAAC;QAAjEC,MAAM,GAAAH,WAAA,CAANG,MAAM;QAAEC,iBAAiB,GAAAJ,WAAA,CAAjBI,iBAAiB;MAEjC,MAAMA,iBAAiB,CAAC,CAAC;MAEzBC,MAAM,CAACF,MAAM,CAACG,OAAO,CAACC,YAAY,CAAC,CAACC,OAAO,CAAAC,MAAA,CAAAC,MAAA,KACtCnB,YAAY;QACfoB,WAAW,EAAE;MAAc,EAC5B,CAAC;MACFN,MAAM,CAACF,MAAM,CAACG,OAAO,CAACM,SAAS,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;IAC9C,CAAC,EAAC;IAEFxB,EAAE,CAAC,0DAA0D,MAAAb,kBAAA,CAAAc,OAAA,EAAE,aAAY;MACzEM,qBAAY,CAAC9B,OAAO,CAAC+B,iBAAiB,CAAC,IAAI,CAAC;MAE5C,IAAAiB,YAAA,GAAsC,IAAAb,sBAAU,EAAC;UAAA,OAAM,IAAAC,wBAAe,EAAC,CAAC;QAAA,EAAC;QAAjEC,MAAM,GAAAW,YAAA,CAANX,MAAM;QAAEC,iBAAiB,GAAAU,YAAA,CAAjBV,iBAAiB;MAEjC,MAAMA,iBAAiB,CAAC,CAAC;MAEzBC,MAAM,CAACF,MAAM,CAACG,OAAO,CAACC,YAAY,CAAC,CAACQ,QAAQ,CAAC,CAAC;MAC9CV,MAAM,CAACF,MAAM,CAACG,OAAO,CAACM,SAAS,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;IAC9C,CAAC,EAAC;IAEFxB,EAAE,CAAC,yCAAyC,MAAAb,kBAAA,CAAAc,OAAA,EAAE,aAAY;MACxDM,qBAAY,CAAC9B,OAAO,CAACkD,iBAAiB,CAAC,IAAIC,KAAK,CAAC,eAAe,CAAC,CAAC;MAElE,IAAAC,YAAA,GAAsC,IAAAjB,sBAAU,EAAC;UAAA,OAAM,IAAAC,wBAAe,EAAC,CAAC;QAAA,EAAC;QAAjEC,MAAM,GAAAe,YAAA,CAANf,MAAM;QAAEC,iBAAiB,GAAAc,YAAA,CAAjBd,iBAAiB;MAEjC,MAAMA,iBAAiB,CAAC,CAAC;MAEzBC,MAAM,CAACF,MAAM,CAACG,OAAO,CAACC,YAAY,CAAC,CAACQ,QAAQ,CAAC,CAAC;MAC9CV,MAAM,CAACF,MAAM,CAACG,OAAO,CAACM,SAAS,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;IAC9C,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFhC,QAAQ,CAAC,wBAAwB,EAAE,YAAM;IACvCQ,EAAE,CAAC,2DAA2D,MAAAb,kBAAA,CAAAc,OAAA,EAAE,aAAY;MAC1E,IAAMC,YAAY,GAAG;QACnBC,IAAI,EAAE,SAAS;QACfG,SAAS,EAAE;MACb,CAAC;MAEDC,qBAAY,CAAC9B,OAAO,CAAC+B,iBAAiB,CAACC,IAAI,CAACC,SAAS,CAACR,YAAY,CAAC,CAAC;MAEpE,IAAA4B,YAAA,GAAsC,IAAAlB,sBAAU,EAAC;UAAA,OAAM,IAAAC,wBAAe,EAAC,CAAC;QAAA,EAAC;QAAjEC,MAAM,GAAAgB,YAAA,CAANhB,MAAM;QAAEC,iBAAiB,GAAAe,YAAA,CAAjBf,iBAAiB;MAEjC,MAAMA,iBAAiB,CAAC,CAAC;MAEzBC,MAAM,CAACF,MAAM,CAACG,OAAO,CAACC,YAAY,CAACI,WAAW,CAAC,CAACE,IAAI,CAAC,cAAc,CAAC;IACtE,CAAC,EAAC;IAEFxB,EAAE,CAAC,2CAA2C,MAAAb,kBAAA,CAAAc,OAAA,EAAE,aAAY;MAC1D,IAAM8B,SAAS,GAAG,CAChB;QAAEC,UAAU,EAAE,CAAC;QAAEC,QAAQ,EAAE;MAAe,CAAC,EAC3C;QAAED,UAAU,EAAE,CAAC;QAAEC,QAAQ,EAAE;MAAe,CAAC,EAC3C;QAAED,UAAU,EAAE,EAAE;QAAEC,QAAQ,EAAE;MAAgB,CAAC,EAC7C;QAAED,UAAU,EAAE,EAAE;QAAEC,QAAQ,EAAE;MAAgB,CAAC,CAC9C;MAED,KAAK,IAAMC,QAAQ,IAAIH,SAAS,EAAE;QAChC,IAAM7B,YAAY,GAAG;UACnBC,IAAI,EAAE,MAAM;UACZG,SAAS,EAAE,aAAa,GAAI4B,QAAQ,CAACF,UAAU,GAAG,EAAE,GAAG;QACzD,CAAC;QAEDzB,qBAAY,CAAC9B,OAAO,CAAC+B,iBAAiB,CAACC,IAAI,CAACC,SAAS,CAACR,YAAY,CAAC,CAAC;QAEpE,IAAAiC,YAAA,GAAsC,IAAAvB,sBAAU,EAAC;YAAA,OAAM,IAAAC,wBAAe,EAAC,CAAC;UAAA,EAAC;UAAjEC,MAAM,GAAAqB,YAAA,CAANrB,MAAM;UAAEC,iBAAiB,GAAAoB,YAAA,CAAjBpB,iBAAiB;QACjC,MAAMA,iBAAiB,CAAC,CAAC;QAEzBC,MAAM,CAACF,MAAM,CAACG,OAAO,CAACC,YAAY,CAACI,WAAW,CAAC,CAACE,IAAI,CAACU,QAAQ,CAACD,QAAQ,CAAC;MACzE;IACF,CAAC,EAAC;IAEFjC,EAAE,CAAC,0CAA0C,MAAAb,kBAAA,CAAAc,OAAA,EAAE,aAAY;MACzD,IAAM8B,SAAS,GAAG,CAChB;QAAEK,QAAQ,EAAE,CAAC;QAAEH,QAAQ,EAAE;MAAY,CAAC,EACtC;QAAEG,QAAQ,EAAE,CAAC;QAAEH,QAAQ,EAAE;MAAY,CAAC,EACtC;QAAEG,QAAQ,EAAE,EAAE;QAAEH,QAAQ,EAAE;MAAa,CAAC,CACzC;MAED,KAAK,IAAMC,QAAQ,IAAIH,SAAS,EAAE;QAChC,IAAM7B,YAAY,GAAG;UACnBC,IAAI,EAAE,MAAM;UACZG,SAAS,EAAE,aAAa,GAAI4B,QAAQ,CAACE,QAAQ,GAAG,EAAE,GAAG,EAAE,GAAG;QAC5D,CAAC;QAED7B,qBAAY,CAAC9B,OAAO,CAAC+B,iBAAiB,CAACC,IAAI,CAACC,SAAS,CAACR,YAAY,CAAC,CAAC;QAEpE,IAAAmC,YAAA,GAAsC,IAAAzB,sBAAU,EAAC;YAAA,OAAM,IAAAC,wBAAe,EAAC,CAAC;UAAA,EAAC;UAAjEC,MAAM,GAAAuB,YAAA,CAANvB,MAAM;UAAEC,iBAAiB,GAAAsB,YAAA,CAAjBtB,iBAAiB;QACjC,MAAMA,iBAAiB,CAAC,CAAC;QAEzBC,MAAM,CAACF,MAAM,CAACG,OAAO,CAACC,YAAY,CAACI,WAAW,CAAC,CAACE,IAAI,CAACU,QAAQ,CAACD,QAAQ,CAAC;MACzE;IACF,CAAC,EAAC;IAEFjC,EAAE,CAAC,yCAAyC,MAAAb,kBAAA,CAAAc,OAAA,EAAE,aAAY;MACxD,IAAM8B,SAAS,GAAG,CAChB;QAAEO,OAAO,EAAE,CAAC;QAAEL,QAAQ,EAAE;MAAY,CAAC,EACrC;QAAEK,OAAO,EAAE,CAAC;QAAEL,QAAQ,EAAE;MAAY,CAAC,EACrC;QAAEK,OAAO,EAAE,EAAE;QAAEL,QAAQ,EAAE;MAAa,CAAC,CACxC;MAED,KAAK,IAAMC,QAAQ,IAAIH,SAAS,EAAE;QAChC,IAAM7B,YAAY,GAAG;UACnBC,IAAI,EAAE,MAAM;UACZG,SAAS,EAAE,aAAa,GAAI4B,QAAQ,CAACI,OAAO,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;QAChE,CAAC;QAED/B,qBAAY,CAAC9B,OAAO,CAAC+B,iBAAiB,CAACC,IAAI,CAACC,SAAS,CAACR,YAAY,CAAC,CAAC;QAEpE,IAAAqC,YAAA,GAAsC,IAAA3B,sBAAU,EAAC;YAAA,OAAM,IAAAC,wBAAe,EAAC,CAAC;UAAA,EAAC;UAAjEC,MAAM,GAAAyB,YAAA,CAANzB,MAAM;UAAEC,iBAAiB,GAAAwB,YAAA,CAAjBxB,iBAAiB;QACjC,MAAMA,iBAAiB,CAAC,CAAC;QAEzBC,MAAM,CAACF,MAAM,CAACG,OAAO,CAACC,YAAY,CAACI,WAAW,CAAC,CAACE,IAAI,CAACU,QAAQ,CAACD,QAAQ,CAAC;MACzE;IACF,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFzC,QAAQ,CAAC,wBAAwB,EAAE,YAAM;IACvCQ,EAAE,CAAC,2CAA2C,MAAAb,kBAAA,CAAAc,OAAA,EAAE,aAAY;MAC1DM,qBAAY,CAAC9B,OAAO,CAAC+B,iBAAiB,CAAC,IAAI,CAAC;MAC5C,IAAAgC,YAAA,GAAsC,IAAA5B,sBAAU,EAAC;UAAA,OAAM,IAAAC,wBAAe,EAAC,CAAC;QAAA,EAAC;QAAjEC,MAAM,GAAA0B,YAAA,CAAN1B,MAAM;QAAEC,iBAAiB,GAAAyB,YAAA,CAAjBzB,iBAAiB;MACjC,MAAMA,iBAAiB,CAAC,CAAC;MAEzB,IAAM0B,YAAY,GAAG;QACnBtC,IAAI,EAAE,YAAY;QAClBC,KAAK,EAAE,GAAG;QACVC,QAAQ,EAAE,MAAM;QAChBqC,KAAK,EAAE;MACT,CAAC;MAED,MAAM,IAAAC,eAAG,MAAAxD,kBAAA,CAAAc,OAAA,EAAC,aAAY;QACpB,MAAMa,MAAM,CAACG,OAAO,CAAC2B,YAAY,CAACH,YAAY,CAAC;MACjD,CAAC,EAAC;MAEFzB,MAAM,CAACT,qBAAY,CAAC3B,OAAO,CAAC,CAACiE,oBAAoB,CAC/C,eAAe,EACfpC,IAAI,CAACC,SAAS,CAAAU,MAAA,CAAAC,MAAA,KACToB,YAAY;QACfnC,SAAS,EAAE;MAAa,EACzB,CACH,CAAC;MAEDU,MAAM,CAACF,MAAM,CAACG,OAAO,CAACC,YAAY,CAAC,CAACC,OAAO,CAAAC,MAAA,CAAAC,MAAA,KACtCoB,YAAY;QACfnC,SAAS,EAAE,aAAa;QACxBgB,WAAW,EAAE;MAAc,EAC5B,CAAC;IACJ,CAAC,EAAC;IAEFtB,EAAE,CAAC,6CAA6C,MAAAb,kBAAA,CAAAc,OAAA,EAAE,aAAY;MAC5DM,qBAAY,CAAC9B,OAAO,CAAC+B,iBAAiB,CAAC,IAAI,CAAC;MAC5C,IAAAsC,YAAA,GAAsC,IAAAlC,sBAAU,EAAC;UAAA,OAAM,IAAAC,wBAAe,EAAC,CAAC;QAAA,EAAC;QAAjEC,MAAM,GAAAgC,YAAA,CAANhC,MAAM;QAAEC,iBAAiB,GAAA+B,YAAA,CAAjB/B,iBAAiB;MACjC,MAAMA,iBAAiB,CAAC,CAAC;MAEzB,IAAM0B,YAAY,GAAG;QAAEtC,IAAI,EAAE;MAAO,CAAC;MAErC,MAAM,IAAAwC,eAAG,MAAAxD,kBAAA,CAAAc,OAAA,EAAC,aAAY;QACpB,MAAMa,MAAM,CAACG,OAAO,CAAC2B,YAAY,CAACH,YAAY,CAAC;MACjD,CAAC,EAAC;MAEF,IAAMM,QAAQ,GAAG7D,OAAO,CAAC,0BAA0B,CAAC;MACpD8B,MAAM,CAAC+B,QAAQ,CAAC/D,IAAI,CAAC,CAAC6D,oBAAoB,CAAC,kBAAkB,EAAAzB,MAAA,CAAAC,MAAA,KACxDoB,YAAY;QACfnC,SAAS,EAAE;MAAa,EACzB,CAAC;IACJ,CAAC,EAAC;IAEFN,EAAE,CAAC,yCAAyC,MAAAb,kBAAA,CAAAc,OAAA,EAAE,aAAY;MACxDM,qBAAY,CAAC9B,OAAO,CAAC+B,iBAAiB,CAAC,IAAI,CAAC;MAC5CD,qBAAY,CAAC3B,OAAO,CAAC+C,iBAAiB,CAAC,IAAIC,KAAK,CAAC,YAAY,CAAC,CAAC;MAE/D,IAAAoB,YAAA,GAAsC,IAAApC,sBAAU,EAAC;UAAA,OAAM,IAAAC,wBAAe,EAAC,CAAC;QAAA,EAAC;QAAjEC,MAAM,GAAAkC,YAAA,CAANlC,MAAM;QAAEC,iBAAiB,GAAAiC,YAAA,CAAjBjC,iBAAiB;MACjC,MAAMA,iBAAiB,CAAC,CAAC;MAEzB,IAAM0B,YAAY,GAAG;QAAEtC,IAAI,EAAE;MAAO,CAAC;MAGrC,MAAM,IAAAwC,eAAG,MAAAxD,kBAAA,CAAAc,OAAA,EAAC,aAAY;QACpB,MAAMa,MAAM,CAACG,OAAO,CAAC2B,YAAY,CAACH,YAAY,CAAC;MACjD,CAAC,EAAC;MAEFzB,MAAM,CAACF,MAAM,CAACG,OAAO,CAACC,YAAY,CAAC,CAACQ,QAAQ,CAAC,CAAC;IAChD,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFlC,QAAQ,CAAC,yBAAyB,EAAE,YAAM;IACxCQ,EAAE,CAAC,uCAAuC,MAAAb,kBAAA,CAAAc,OAAA,EAAE,aAAY;MACtD,IAAMC,YAAY,GAAG;QAAEC,IAAI,EAAE,MAAM;QAAEG,SAAS,EAAE;MAAc,CAAC;MAC/DC,qBAAY,CAAC9B,OAAO,CAAC+B,iBAAiB,CAACC,IAAI,CAACC,SAAS,CAACR,YAAY,CAAC,CAAC;MAEpE,IAAA+C,YAAA,GAAsC,IAAArC,sBAAU,EAAC;UAAA,OAAM,IAAAC,wBAAe,EAAC,CAAC;QAAA,EAAC;QAAjEC,MAAM,GAAAmC,YAAA,CAANnC,MAAM;QAAEC,iBAAiB,GAAAkC,YAAA,CAAjBlC,iBAAiB;MACjC,MAAMA,iBAAiB,CAAC,CAAC;MAEzBC,MAAM,CAACF,MAAM,CAACG,OAAO,CAACC,YAAY,CAAC,CAACgC,GAAG,CAACxB,QAAQ,CAAC,CAAC;MAElD,MAAM,IAAAiB,eAAG,MAAAxD,kBAAA,CAAAc,OAAA,EAAC,aAAY;QACpB,MAAMa,MAAM,CAACG,OAAO,CAACkC,aAAa,CAAC,CAAC;MACtC,CAAC,EAAC;MAEFnC,MAAM,CAACT,qBAAY,CAAC1B,UAAU,CAAC,CAACgE,oBAAoB,CAAC,eAAe,CAAC;MACrE7B,MAAM,CAACF,MAAM,CAACG,OAAO,CAACC,YAAY,CAAC,CAACQ,QAAQ,CAAC,CAAC;IAChD,CAAC,EAAC;IAEF1B,EAAE,CAAC,0CAA0C,MAAAb,kBAAA,CAAAc,OAAA,EAAE,aAAY;MACzDM,qBAAY,CAAC9B,OAAO,CAAC+B,iBAAiB,CAAC,IAAI,CAAC;MAC5CD,qBAAY,CAAC1B,UAAU,CAAC8C,iBAAiB,CAAC,IAAIC,KAAK,CAAC,cAAc,CAAC,CAAC;MAEpE,IAAAwB,aAAA,GAAsC,IAAAxC,sBAAU,EAAC;UAAA,OAAM,IAAAC,wBAAe,EAAC,CAAC;QAAA,EAAC;QAAjEC,MAAM,GAAAsC,aAAA,CAANtC,MAAM;QAAEC,iBAAiB,GAAAqC,aAAA,CAAjBrC,iBAAiB;MACjC,MAAMA,iBAAiB,CAAC,CAAC;MAGzB,MAAM,IAAA4B,eAAG,MAAAxD,kBAAA,CAAAc,OAAA,EAAC,aAAY;QACpB,MAAMa,MAAM,CAACG,OAAO,CAACkC,aAAa,CAAC,CAAC;MACtC,CAAC,EAAC;MAEFnC,MAAM,CAACF,MAAM,CAACG,OAAO,CAACC,YAAY,CAAC,CAACQ,QAAQ,CAAC,CAAC;IAChD,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFlC,QAAQ,CAAC,cAAc,EAAE,YAAM;IAC7BQ,EAAE,CAAC,4CAA4C,MAAAb,kBAAA,CAAAc,OAAA,EAAE,aAAY;MAC3DM,qBAAY,CAAC9B,OAAO,CAAC+B,iBAAiB,CAAC,IAAI,CAAC;MAC5C,IAAA6C,aAAA,GAAsC,IAAAzC,sBAAU,EAAC;UAAA,OAAM,IAAAC,wBAAe,EAAC,CAAC;QAAA,EAAC;QAAjEC,MAAM,GAAAuC,aAAA,CAANvC,MAAM;QAAEC,iBAAiB,GAAAsC,aAAA,CAAjBtC,iBAAiB;MACjC,MAAMA,iBAAiB,CAAC,CAAC;MAEzBC,MAAM,CAACF,MAAM,CAACG,OAAO,CAACC,YAAY,CAAC,CAACQ,QAAQ,CAAC,CAAC;MAG9C,IAAMxB,YAAY,GAAG;QAAEC,IAAI,EAAE,KAAK;QAAEG,SAAS,EAAE;MAAc,CAAC;MAC9DC,qBAAY,CAAC9B,OAAO,CAAC+B,iBAAiB,CAACC,IAAI,CAACC,SAAS,CAACR,YAAY,CAAC,CAAC;MAEpE,MAAM,IAAAyC,eAAG,MAAAxD,kBAAA,CAAAc,OAAA,EAAC,aAAY;QACpB,MAAMa,MAAM,CAACG,OAAO,CAACqC,MAAM,CAAC,CAAC;MAC/B,CAAC,EAAC;MAEFtC,MAAM,CAACF,MAAM,CAACG,OAAO,CAACC,YAAY,CAAC,CAACC,OAAO,CAAAC,MAAA,CAAAC,MAAA,KACtCnB,YAAY;QACfoB,WAAW,EAAE;MAAc,EAC5B,CAAC;IACJ,CAAC,EAAC;EACJ,CAAC,CAAC;EAEF9B,QAAQ,CAAC,yBAAyB,EAAE,YAAM;IACxCQ,EAAE,CAAC,gEAAgE,MAAAb,kBAAA,CAAAc,OAAA,EAAE,aAAY;MAC/EM,qBAAY,CAAC9B,OAAO,CAAC+B,iBAAiB,CAAC,IAAI,CAAC;MAC5C,IAAA+C,aAAA,GAAgD,IAAA3C,sBAAU,EAAC;UAAA,OAAM,IAAAC,wBAAe,EAAC,CAAC;QAAA,EAAC;QAA3EC,MAAM,GAAAyC,aAAA,CAANzC,MAAM;QAAEC,iBAAiB,GAAAwC,aAAA,CAAjBxC,iBAAiB;QAAEyC,QAAQ,GAAAD,aAAA,CAARC,QAAQ;MAC3C,MAAMzC,iBAAiB,CAAC,CAAC;MAEzB,IAAM0C,mBAAmB,GAAG3C,MAAM,CAACG,OAAO,CAAC2B,YAAY;MACvD,IAAMc,oBAAoB,GAAG5C,MAAM,CAACG,OAAO,CAACkC,aAAa;MACzD,IAAMQ,aAAa,GAAG7C,MAAM,CAACG,OAAO,CAACqC,MAAM;MAE3CE,QAAQ,CAAC,CAAC;MAEVxC,MAAM,CAACF,MAAM,CAACG,OAAO,CAAC2B,YAAY,CAAC,CAACpB,IAAI,CAACiC,mBAAmB,CAAC;MAC7DzC,MAAM,CAACF,MAAM,CAACG,OAAO,CAACkC,aAAa,CAAC,CAAC3B,IAAI,CAACkC,oBAAoB,CAAC;MAC/D1C,MAAM,CAACF,MAAM,CAACG,OAAO,CAACqC,MAAM,CAAC,CAAC9B,IAAI,CAACmC,aAAa,CAAC;IACnD,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFnE,QAAQ,CAAC,gCAAgC,EAAE,YAAM;IAC/CQ,EAAE,CAAC,0CAA0C,MAAAb,kBAAA,CAAAc,OAAA,EAAE,aAAY;MACzDM,qBAAY,CAAC9B,OAAO,CAAC+B,iBAAiB,CAAC,cAAc,CAAC;MAEtD,IAAAoD,aAAA,GAAsC,IAAAhD,sBAAU,EAAC;UAAA,OAAM,IAAAC,wBAAe,EAAC,CAAC;QAAA,EAAC;QAAjEC,MAAM,GAAA8C,aAAA,CAAN9C,MAAM;QAAEC,iBAAiB,GAAA6C,aAAA,CAAjB7C,iBAAiB;MAEjC,MAAMA,iBAAiB,CAAC,CAAC;MAEzBC,MAAM,CAACF,MAAM,CAACG,OAAO,CAACC,YAAY,CAAC,CAACQ,QAAQ,CAAC,CAAC;MAC9CV,MAAM,CAACF,MAAM,CAACG,OAAO,CAACM,SAAS,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;IAC9C,CAAC,EAAC;IAEFxB,EAAE,CAAC,4CAA4C,MAAAb,kBAAA,CAAAc,OAAA,EAAE,aAAY;MAC3D,IAAMC,YAAY,GAAG;QAAEC,IAAI,EAAE;MAAO,CAAC;MACrCI,qBAAY,CAAC9B,OAAO,CAAC+B,iBAAiB,CAACC,IAAI,CAACC,SAAS,CAACR,YAAY,CAAC,CAAC;MAEpE,IAAA2D,aAAA,GAAsC,IAAAjD,sBAAU,EAAC;UAAA,OAAM,IAAAC,wBAAe,EAAC,CAAC;QAAA,EAAC;QAAjEC,MAAM,GAAA+C,aAAA,CAAN/C,MAAM;QAAEC,iBAAiB,GAAA8C,aAAA,CAAjB9C,iBAAiB;MAEjC,MAAMA,iBAAiB,CAAC,CAAC;MAGzBC,MAAM,CAACF,MAAM,CAACG,OAAO,CAACC,YAAY,CAAC,CAAC4C,WAAW,CAAC,CAAC;MACjD9C,MAAM,CAACF,MAAM,CAACG,OAAO,CAACC,YAAY,CAACI,WAAW,CAAC,CAACwC,WAAW,CAAC,CAAC;IAC/D,CAAC,EAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}