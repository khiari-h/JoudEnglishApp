6443a0b730de54bd2e47bb45256970cc
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sortRoutesWithInitial = exports.sortRoutes = void 0;
var matchers_1 = require("./matchers");
function sortDynamicConvention(a, b) {
  if (a.deep && !b.deep) {
    return 1;
  }
  if (!a.deep && b.deep) {
    return -1;
  }
  return 0;
}
function sortRoutes(a, b) {
  if (a.dynamic && !b.dynamic) {
    return 1;
  }
  if (!a.dynamic && b.dynamic) {
    return -1;
  }
  if (a.dynamic && b.dynamic) {
    if (a.dynamic.length !== b.dynamic.length) {
      return b.dynamic.length - a.dynamic.length;
    }
    for (var i = 0; i < a.dynamic.length; i++) {
      var aDynamic = a.dynamic[i];
      var bDynamic = b.dynamic[i];
      if (aDynamic.notFound && bDynamic.notFound) {
        var _s = sortDynamicConvention(aDynamic, bDynamic);
        if (_s) {
          return _s;
        }
      }
      if (aDynamic.notFound && !bDynamic.notFound) {
        return 1;
      }
      if (!aDynamic.notFound && bDynamic.notFound) {
        return -1;
      }
      var s = sortDynamicConvention(aDynamic, bDynamic);
      if (s) {
        return s;
      }
    }
    return 0;
  }
  var aIndex = a.route === 'index' || (0, matchers_1.matchGroupName)(a.route) != null;
  var bIndex = b.route === 'index' || (0, matchers_1.matchGroupName)(b.route) != null;
  if (aIndex && !bIndex) {
    return -1;
  }
  if (!aIndex && bIndex) {
    return 1;
  }
  return a.route.length - b.route.length;
}
exports.sortRoutes = sortRoutes;
function sortRoutesWithInitial(initialRouteName) {
  return function (a, b) {
    if (initialRouteName) {
      if (a.route === initialRouteName) {
        return -1;
      }
      if (b.route === initialRouteName) {
        return 1;
      }
    }
    return sortRoutes(a, b);
  };
}
exports.sortRoutesWithInitial = sortRoutesWithInitial;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtYXRjaGVyc18xIiwicmVxdWlyZSIsInNvcnREeW5hbWljQ29udmVudGlvbiIsImEiLCJiIiwiZGVlcCIsInNvcnRSb3V0ZXMiLCJkeW5hbWljIiwibGVuZ3RoIiwiaSIsImFEeW5hbWljIiwiYkR5bmFtaWMiLCJub3RGb3VuZCIsInMiLCJhSW5kZXgiLCJyb3V0ZSIsIm1hdGNoR3JvdXBOYW1lIiwiYkluZGV4IiwiZXhwb3J0cyIsInNvcnRSb3V0ZXNXaXRoSW5pdGlhbCIsImluaXRpYWxSb3V0ZU5hbWUiXSwic291cmNlcyI6WyIuLi9zcmMvc29ydFJvdXRlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEeW5hbWljQ29udmVudGlvbiwgUm91dGVOb2RlIH0gZnJvbSAnLi9Sb3V0ZSc7XG5pbXBvcnQgeyBtYXRjaEdyb3VwTmFtZSB9IGZyb20gJy4vbWF0Y2hlcnMnO1xuXG5mdW5jdGlvbiBzb3J0RHluYW1pY0NvbnZlbnRpb24oYTogRHluYW1pY0NvbnZlbnRpb24sIGI6IER5bmFtaWNDb252ZW50aW9uKSB7XG4gIGlmIChhLmRlZXAgJiYgIWIuZGVlcCkge1xuICAgIHJldHVybiAxO1xuICB9XG4gIGlmICghYS5kZWVwICYmIGIuZGVlcCkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICByZXR1cm4gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNvcnRSb3V0ZXMoYTogUm91dGVOb2RlLCBiOiBSb3V0ZU5vZGUpOiBudW1iZXIge1xuICBpZiAoYS5keW5hbWljICYmICFiLmR5bmFtaWMpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuICBpZiAoIWEuZHluYW1pYyAmJiBiLmR5bmFtaWMpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgaWYgKGEuZHluYW1pYyAmJiBiLmR5bmFtaWMpIHtcbiAgICBpZiAoYS5keW5hbWljLmxlbmd0aCAhPT0gYi5keW5hbWljLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGIuZHluYW1pYy5sZW5ndGggLSBhLmR5bmFtaWMubGVuZ3RoO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYS5keW5hbWljLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBhRHluYW1pYyA9IGEuZHluYW1pY1tpXTtcbiAgICAgIGNvbnN0IGJEeW5hbWljID0gYi5keW5hbWljW2ldO1xuXG4gICAgICBpZiAoYUR5bmFtaWMubm90Rm91bmQgJiYgYkR5bmFtaWMubm90Rm91bmQpIHtcbiAgICAgICAgY29uc3QgcyA9IHNvcnREeW5hbWljQ29udmVudGlvbihhRHluYW1pYywgYkR5bmFtaWMpO1xuICAgICAgICBpZiAocykge1xuICAgICAgICAgIHJldHVybiBzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYUR5bmFtaWMubm90Rm91bmQgJiYgIWJEeW5hbWljLm5vdEZvdW5kKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuICAgICAgaWYgKCFhRHluYW1pYy5ub3RGb3VuZCAmJiBiRHluYW1pYy5ub3RGb3VuZCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHMgPSBzb3J0RHluYW1pY0NvbnZlbnRpb24oYUR5bmFtaWMsIGJEeW5hbWljKTtcbiAgICAgIGlmIChzKSB7XG4gICAgICAgIHJldHVybiBzO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGNvbnN0IGFJbmRleCA9IGEucm91dGUgPT09ICdpbmRleCcgfHwgbWF0Y2hHcm91cE5hbWUoYS5yb3V0ZSkgIT0gbnVsbDtcbiAgY29uc3QgYkluZGV4ID0gYi5yb3V0ZSA9PT0gJ2luZGV4JyB8fCBtYXRjaEdyb3VwTmFtZShiLnJvdXRlKSAhPSBudWxsO1xuXG4gIGlmIChhSW5kZXggJiYgIWJJbmRleCkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBpZiAoIWFJbmRleCAmJiBiSW5kZXgpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIHJldHVybiBhLnJvdXRlLmxlbmd0aCAtIGIucm91dGUubGVuZ3RoO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc29ydFJvdXRlc1dpdGhJbml0aWFsKGluaXRpYWxSb3V0ZU5hbWU/OiBzdHJpbmcpIHtcbiAgcmV0dXJuIChhOiBSb3V0ZU5vZGUsIGI6IFJvdXRlTm9kZSk6IG51bWJlciA9PiB7XG4gICAgaWYgKGluaXRpYWxSb3V0ZU5hbWUpIHtcbiAgICAgIGlmIChhLnJvdXRlID09PSBpbml0aWFsUm91dGVOYW1lKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIGlmIChiLnJvdXRlID09PSBpbml0aWFsUm91dGVOYW1lKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc29ydFJvdXRlcyhhLCBiKTtcbiAgfTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsSUFBQUEsVUFBQSxHQUFBQyxPQUFBO0FBRUEsU0FBU0MscUJBQXFCQSxDQUFDQyxDQUFvQixFQUFFQyxDQUFvQjtFQUN2RSxJQUFJRCxDQUFDLENBQUNFLElBQUksSUFBSSxDQUFDRCxDQUFDLENBQUNDLElBQUksRUFBRTtJQUNyQixPQUFPLENBQUM7O0VBRVYsSUFBSSxDQUFDRixDQUFDLENBQUNFLElBQUksSUFBSUQsQ0FBQyxDQUFDQyxJQUFJLEVBQUU7SUFDckIsT0FBTyxDQUFDLENBQUM7O0VBRVgsT0FBTyxDQUFDO0FBQ1Y7QUFFQSxTQUFnQkMsVUFBVUEsQ0FBQ0gsQ0FBWSxFQUFFQyxDQUFZO0VBQ25ELElBQUlELENBQUMsQ0FBQ0ksT0FBTyxJQUFJLENBQUNILENBQUMsQ0FBQ0csT0FBTyxFQUFFO0lBQzNCLE9BQU8sQ0FBQzs7RUFFVixJQUFJLENBQUNKLENBQUMsQ0FBQ0ksT0FBTyxJQUFJSCxDQUFDLENBQUNHLE9BQU8sRUFBRTtJQUMzQixPQUFPLENBQUMsQ0FBQzs7RUFFWCxJQUFJSixDQUFDLENBQUNJLE9BQU8sSUFBSUgsQ0FBQyxDQUFDRyxPQUFPLEVBQUU7SUFDMUIsSUFBSUosQ0FBQyxD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