{"version":3,"names":["calculateTotalScenarios","conversationData","cov_sqgci6z8l","f","s","length","calculateTotalSteps","reduce","total","scenario","_scenario$steps","b","steps","calculateCompletedScenariosCount","completedScenarios","Object","values","filter","Boolean","calculateTotalProgress","totalScenarios","completedCount","Math","round","calculateScenarioProgress","conversationHistory","map","index","_scenario$steps2","totalSteps","isCompleted","completedSteps","_conversationHistory$","conversation","botMessages","msg","sender","min","progress","title","calculateScenarioStats","scenarioIndex","_scenario$steps3","_conversationHistory$2","currentStep","messageCount","hasStarted"],"sources":["conversationStats.js"],"sourcesContent":["// utils/conversation/conversationStats.js - Fonctions utilitaires (pattern identique aux autres exercices)\n\n/**\n * ðŸ“Š Utilitaires de calcul pour Conversation\n * Pattern identique Ã  utils/vocabulary/vocabularyStats.js, utils/grammar/grammarStats.js, etc.\n * Garde la logique mÃ©tier sÃ©parÃ©e des composants\n */\n\n/**\n * Calculer le nombre total de scÃ©narios\n * @param {Array} conversationData - DonnÃ©es de conversation [{ steps: [...] }]\n * @returns {number} Nombre total de scÃ©narios\n */\nexport const calculateTotalScenarios = (conversationData) => {\n  return conversationData.length;\n};\n\n/**\n * Calculer le nombre total d'Ã©tapes\n * @param {Array} conversationData - DonnÃ©es de conversation [{ steps: [...] }]\n * @returns {number} Nombre total d'Ã©tapes\n */\nexport const calculateTotalSteps = (conversationData) => {\n  return conversationData.reduce((total, scenario) => {\n    return total + (scenario.steps?.length || 0);\n  }, 0);\n};\n\n/**\n * Calculer le nombre de scÃ©narios complÃ©tÃ©s\n * @param {Object} completedScenarios - ScÃ©narios complÃ©tÃ©s {0: {...}, 1: {...}}\n * @returns {number} Nombre de scÃ©narios complÃ©tÃ©s\n */\nexport const calculateCompletedScenariosCount = (completedScenarios) => {\n  return Object.values(completedScenarios).filter(Boolean).length;\n};\n\n/**\n * Calculer la progression totale en pourcentage\n * @param {Array} conversationData - DonnÃ©es de conversation\n * @param {Object} completedScenarios - ScÃ©narios complÃ©tÃ©s\n * @returns {number} Pourcentage de progression (0-100)\n */\nexport const calculateTotalProgress = (conversationData, completedScenarios) => {\n  const totalScenarios = calculateTotalScenarios(conversationData);\n  const completedCount = calculateCompletedScenariosCount(completedScenarios);\n  \n  return totalScenarios > 0 ? Math.round((completedCount / totalScenarios) * 100) : 0;\n};\n\n/**\n * Calculer la progression par scÃ©nario\n * @param {Array} conversationData - DonnÃ©es de conversation\n * @param {Object} completedScenarios - ScÃ©narios complÃ©tÃ©s\n * @param {Object} conversationHistory - Historique des conversations\n * @returns {Array} Progression par scÃ©nario\n */\nexport const calculateScenarioProgress = (conversationData, completedScenarios, conversationHistory) => {\n  return conversationData.map((scenario, index) => {\n    const totalSteps = scenario.steps?.length || 0;\n    const isCompleted = Boolean(completedScenarios[index]);\n    \n    let completedSteps = 0;\n    if (isCompleted) {\n      completedSteps = totalSteps;\n    } else if (conversationHistory[index]?.conversation) {\n      // Count bot messages to determine progress\n      const botMessages = conversationHistory[index].conversation.filter(msg => msg.sender === \"bot\");\n      completedSteps = Math.min(botMessages.length, totalSteps);\n    }\n    \n    const progress = totalSteps > 0 ? (completedSteps / totalSteps) * 100 : 0;\n    \n    return {\n      title: scenario.title || `Scenario ${index + 1}`,\n      totalSteps,\n      completedSteps,\n      progress: Math.round(progress),\n      isCompleted,\n    };\n  });\n};\n\n/**\n * Calculer les statistiques d'un scÃ©nario spÃ©cifique\n * @param {Object} scenario - ScÃ©nario spÃ©cifique\n * @param {Object} completedScenarios - ScÃ©narios complÃ©tÃ©s\n * @param {Object} conversationHistory - Historique des conversations\n * @param {number} scenarioIndex - Index du scÃ©nario\n * @returns {Object} Statistiques du scÃ©nario\n */\nexport const calculateScenarioStats = (scenario, completedScenarios, conversationHistory, scenarioIndex) => {\n  const totalSteps = scenario.steps?.length || 0;\n  const isCompleted = Boolean(completedScenarios[scenarioIndex]);\n  \n  let currentStep = 0;\n  let messageCount = 0;\n  \n  if (conversationHistory[scenarioIndex]?.conversation) {\n    const conversation = conversationHistory[scenarioIndex].conversation;\n    messageCount = conversation.length;\n    \n    // Calculate current step based on bot messages\n    const botMessages = conversation.filter(msg => msg.sender === \"bot\");\n    currentStep = Math.min(botMessages.length, totalSteps);\n  }\n  \n  const progress = totalSteps > 0 ? (currentStep / totalSteps) * 100 : 0;\n  \n  return {\n    totalSteps,\n    currentStep,\n    progress: Math.round(progress),\n    messageCount,\n    isCompleted,\n    hasStarted: messageCount > 0,\n  };\n};"],"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","ignoreList":[]}