0a2a9f4dfb71317e97723c698d442740
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var useVocabulary = function useVocabulary() {
  var _currentCategory$word, _currentCategory$word2;
  var vocabularyData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "1";
  var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "classic";
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    categoryIndex = _useState2[0],
    setCategoryIndex = _useState2[1];
  var _useState3 = (0, _react.useState)(0),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    wordIndex = _useState4[0],
    setWordIndex = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    showTranslation = _useState6[0],
    setShowTranslation = _useState6[1];
  var _useState7 = (0, _react.useState)({}),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    completedWords = _useState8[0],
    setCompletedWords = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    loaded = _useState0[0],
    setLoaded = _useState0[1];
  var _useState1 = (0, _react.useState)(false),
    _useState10 = (0, _slicedToArray2.default)(_useState1, 2),
    showDetailedProgress = _useState10[0],
    setShowDetailedProgress = _useState10[1];
  var isInitialized = (0, _react.useRef)(false);
  var exercises = (vocabularyData == null ? void 0 : vocabularyData.exercises) || [];
  var currentCategory = exercises[categoryIndex] || {
    title: "",
    words: []
  };
  var currentWord = ((_currentCategory$word = currentCategory.words) == null ? void 0 : _currentCategory$word[wordIndex]) || {
    word: "",
    translation: "",
    definition: "",
    example: ""
  };
  var totalCategories = exercises.length;
  var totalWordsInCategory = ((_currentCategory$word2 = currentCategory.words) == null ? void 0 : _currentCategory$word2.length) || 0;
  var progressKey = `${level}_${mode}`;
  var STORAGE_KEY = `vocabulary_${progressKey}`;
  (0, _react.useEffect)(function () {
    var loadData = function () {
      var _ref = (0, _asyncToGenerator2.default)(function* () {
        try {
          var saved = yield _asyncStorage.default.getItem(STORAGE_KEY);
          if (saved) {
            var _JSON$parse = JSON.parse(saved),
              savedCompleted = _JSON$parse.completedWords,
              lastPosition = _JSON$parse.lastPosition;
            setCompletedWords(savedCompleted || {});
            if (lastPosition) {
              setCategoryIndex(lastPosition.categoryIndex || 0);
              setWordIndex(lastPosition.wordIndex || 0);
            }
          }
        } catch (error) {} finally {
          setLoaded(true);
        }
      });
      return function loadData() {
        return _ref.apply(this, arguments);
      };
    }();
    loadData();
  }, [progressKey]);
  var saveData = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      var dataToSave = {
        completedWords: completedWords,
        lastPosition: {
          categoryIndex: categoryIndex,
          wordIndex: wordIndex
        }
      };
      yield _asyncStorage.default.setItem(STORAGE_KEY, JSON.stringify(dataToSave));
    } catch (error) {}
  }), [completedWords, categoryIndex, wordIndex, STORAGE_KEY]);
  (0, _react.useEffect)(function () {
    if (loaded) saveData();
  }, [saveData, loaded]);
  (0, _react.useEffect)(function () {
    if (loaded && vocabularyData && !isInitialized.current) {
      var newCompletedWords = Object.assign({}, completedWords);
      exercises.forEach(function (_, index) {
        if (!newCompletedWords[index]) {
          newCompletedWords[index] = [];
        }
      });
      setCompletedWords(newCompletedWords);
      isInitialized.current = true;
    }
  }, [loaded, vocabularyData, exercises, completedWords]);
  var changeCategory = (0, _react.useCallback)(function (newCategoryIndex) {
    setCategoryIndex(newCategoryIndex);
    setWordIndex(0);
    setShowTranslation(false);
  }, []);
  var goToNextWord = (0, _react.useCallback)(function () {
    setWordIndex(function (prev) {
      return prev + 1;
    });
    setShowTranslation(false);
  }, []);
  var goToPreviousWord = (0, _react.useCallback)(function () {
    if (wordIndex > 0) {
      setWordIndex(function (prev) {
        return prev - 1;
      });
      setShowTranslation(false);
      return true;
    }
    return false;
  }, [wordIndex]);
  var toggleTranslation = (0, _react.useCallback)(function () {
    setShowTranslation(function (prev) {
      return !prev;
    });
  }, []);
  var toggleDetailedProgress = (0, _react.useCallback)(function () {
    setShowDetailedProgress(function (prev) {
      return !prev;
    });
  }, []);
  var markWordAsCompleted = (0, _react.useCallback)(function (catIndex, wIndex) {
    setCompletedWords(function (prev) {
      var categoryCompleted = prev[catIndex] || [];
      var isAlreadyCompleted = categoryCompleted.find(function (word) {
        return typeof word === 'number' && word === wIndex || typeof word === 'object' && word.wordIndex === wIndex;
      });
      if (!isAlreadyCompleted) {
        var newWordEntry = {
          wordIndex: wIndex,
          timestamp: Date.now(),
          date: new Date().toDateString()
        };
        return Object.assign({}, prev, (0, _defineProperty2.default)({}, catIndex, [].concat((0, _toConsumableArray2.default)(categoryCompleted), [newWordEntry])));
      }
      return prev;
    });
  }, []);
  var findNextUncompletedCategory = (0, _react.useCallback)(function () {
    var numCategories = exercises.length;
    for (var i = 1; i <= numCategories; i++) {
      var _completedWords$nextI, _category$words;
      var nextIndex = (categoryIndex + i) % numCategories;
      var category = exercises[nextIndex];
      var completedInCategory = ((_completedWords$nextI = completedWords[nextIndex]) == null ? void 0 : _completedWords$nextI.length) || 0;
      var totalInCategory = ((_category$words = category.words) == null ? void 0 : _category$words.length) || 0;
      if (completedInCategory < totalInCategory) {
        return nextIndex;
      }
    }
    return -1;
  }, [exercises, categoryIndex, completedWords]);
  var handleNext = (0, _react.useCallback)(function () {
    markWordAsCompleted(categoryIndex, wordIndex);
    if (wordIndex < totalWordsInCategory - 1) {
      goToNextWord();
    } else {
      var nextCategoryIndex = findNextUncompletedCategory();
      if (nextCategoryIndex === -1) {
        var completionMessage = mode === "fast" ? `Félicitations ! Vous avez terminé le Fast Vocabulary ${level} !` : `Félicitations ! Vous avez terminé le vocabulaire ${level} !`;
        _reactNative.Alert.alert("Félicitations", completionMessage);
        return {
          completed: true
        };
      } else {
        changeCategory(nextCategoryIndex);
      }
    }
    return {
      completed: false
    };
  }, [categoryIndex, wordIndex, totalWordsInCategory, markWordAsCompleted, goToNextWord, findNextUncompletedCategory, changeCategory, mode, level]);
  var handlePrevious = (0, _react.useCallback)(function () {
    if (wordIndex > 0) {
      goToPreviousWord();
      return;
    }
    if (categoryIndex > 0) {
      var _previousCategory$wor;
      var previousCategoryIndex = categoryIndex - 1;
      var previousCategory = exercises[previousCategoryIndex];
      var lastWordIndex = (((_previousCategory$wor = previousCategory.words) == null ? void 0 : _previousCategory$wor.length) || 1) - 1;
      setCategoryIndex(previousCategoryIndex);
      setWordIndex(lastWordIndex);
      setShowTranslation(false);
    }
  }, [wordIndex, categoryIndex, exercises, goToPreviousWord]);
  var getStats = (0, _react.useCallback)(function () {
    var _completedWords$categ;
    var totalWords = exercises.reduce(function (sum, cat) {
      var _cat$words;
      return sum + (((_cat$words = cat.words) == null ? void 0 : _cat$words.length) || 0);
    }, 0);
    var completedWordsCount = Object.values(completedWords).reduce(function (sum, completed) {
      var categoryCount = (completed || []).length;
      return sum + categoryCount;
    }, 0);
    var totalProgress = totalWords > 0 ? Math.round(completedWordsCount / totalWords * 100) : 0;
    return {
      totalWords: totalWords,
      completedWordsCount: completedWordsCount,
      totalProgress: totalProgress,
      completedInCurrentCategory: ((_completedWords$categ = completedWords[categoryIndex]) == null ? void 0 : _completedWords$categ.length) || 0,
      totalInCurrentCategory: totalWordsInCategory
    };
  }, [exercises, completedWords, categoryIndex, totalWordsInCategory]);
  var getDisplayData = (0, _react.useCallback)(function () {
    var wordCounter = `${wordIndex + 1} / ${totalWordsInCategory}`;
    var categories = exercises.map(function (cat) {
      return cat.title;
    });
    return {
      wordCounter: wordCounter,
      categories: categories,
      currentWord: currentWord,
      currentCategory: currentCategory
    };
  }, [wordIndex, totalWordsInCategory, exercises, currentWord, currentCategory]);
  var canGoToPrevious = (0, _react.useCallback)(function () {
    if (wordIndex > 0) return true;
    if (categoryIndex > 0) {
      var previousCategory = exercises[categoryIndex - 1];
      return (previousCategory == null ? void 0 : previousCategory.words) && previousCategory.words.length > 0;
    }
    return false;
  }, [wordIndex, categoryIndex, exercises]);
  var isLastWordInExercise = (0, _react.useCallback)(function () {
    return wordIndex === totalWordsInCategory - 1;
  }, [wordIndex, totalWordsInCategory]);
  return {
    categoryIndex: categoryIndex,
    wordIndex: wordIndex,
    showTranslation: showTranslation,
    completedWords: completedWords,
    loaded: loaded,
    showDetailedProgress: showDetailedProgress,
    currentWord: currentWord,
    currentCategory: currentCategory,
    totalCategories: totalCategories,
    totalWordsInCategory: totalWordsInCategory,
    changeCategory: changeCategory,
    toggleTranslation: toggleTranslation,
    toggleDetailedProgress: toggleDetailedProgress,
    handleNext: handleNext,
    handlePrevious: handlePrevious,
    canGoToPrevious: canGoToPrevious(),
    isLastWordInExercise: isLastWordInExercise(),
    stats: getStats(),
    display: getDisplayData(),
    saveData: saveData
  };
};
var _default = exports.default = useVocabulary;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,