435767146cf08cdddc8f2a85f9e9b778
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ContentSection = _interopRequireDefault(require("../../../../components/ui/ContentSection"));
var _jsxRuntime = require("react/jsx-runtime");
var GrammarFeedback = function GrammarFeedback(_ref) {
  var isVisible = _ref.isVisible,
    isCorrect = _ref.isCorrect,
    explanation = _ref.explanation,
    correctAnswer = _ref.correctAnswer,
    attempts = _ref.attempts;
  if (!isVisible) return null;
  var formatCorrectAnswer = function formatCorrectAnswer() {
    if (!correctAnswer) return "";
    if (typeof correctAnswer === "string" && correctAnswer.includes("/")) {
      return correctAnswer.split("/").map(function (ans) {
        return ans.trim();
      }).join(" ou ");
    }
    return correctAnswer;
  };
  var getTitle = function getTitle() {
    if (isCorrect) return "Correct!";
    return attempts === 1 ? "Try Again!" : "Incorrect!";
  };
  var getContent = function getContent() {
    if (isCorrect) {
      return explanation || "Well done! ðŸŽ‰";
    }
    if (attempts > 1) {
      return `The correct answer is: ${formatCorrectAnswer()}`;
    }
    return "You can try once more. Check spelling and punctuation or try another formulation.";
  };
  var levelColor = isCorrect ? "#10B981" : "#EF4444";
  var backgroundColor = isCorrect ? "#F0FDF4" : "#FEF2F2";
  return (0, _jsxRuntime.jsx)(_ContentSection.default, {
    title: getTitle(),
    content: getContent(),
    levelColor: levelColor,
    backgroundColor: backgroundColor,
    showIcon: true,
    isItalic: false
  });
};
var _default = exports.default = GrammarFeedback;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfQ29udGVudFNlY3Rpb24iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9qc3hSdW50aW1lIiwiR3JhbW1hckZlZWRiYWNrIiwiX3JlZiIsImlzVmlzaWJsZSIsImlzQ29ycmVjdCIsImV4cGxhbmF0aW9uIiwiY29ycmVjdEFuc3dlciIsImF0dGVtcHRzIiwiZm9ybWF0Q29ycmVjdEFuc3dlciIsImluY2x1ZGVzIiwic3BsaXQiLCJtYXAiLCJhbnMiLCJ0cmltIiwiam9pbiIsImdldFRpdGxlIiwiZ2V0Q29udGVudCIsImxldmVsQ29sb3IiLCJiYWNrZ3JvdW5kQ29sb3IiLCJqc3giLCJkZWZhdWx0IiwidGl0bGUiLCJjb250ZW50Iiwic2hvd0ljb24iLCJpc0l0YWxpYyIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdyYW1tYXJGZWVkYmFjay9pbmRleC5qcyAtIFZFUlNJT04gUkVGQUNUT1JJU8OJRSBhdmVjIENvbnRlbnRTZWN0aW9uICg3NSDihpIgMTUgbGlnbmVzKVxyXG5cclxuaW1wb3J0IENvbnRlbnRTZWN0aW9uIGZyb20gXCIuLi8uLi8uLi8uLi9jb21wb25lbnRzL3VpL0NvbnRlbnRTZWN0aW9uXCI7XHJcblxyXG4vKipcclxuICog8J+SrCBHcmFtbWFyRmVlZGJhY2sgLSBWZXJzaW9uIFJlZmFjdG9yaXPDqWUgYXZlYyBDb250ZW50U2VjdGlvbiBnw6luw6lyaXF1ZVxyXG4gKiA3NSBsaWduZXMg4oaSIDE1IGxpZ25lcyAoLTgwJSBkZSBjb2RlKVxyXG4gKiBEZXNpZ24gbW9kZXJuZSBldCBjb2jDqXJlbnQgYXZlYyBsZSByZXN0ZSBkZSBsJ2FwcFxyXG4gKiDDiXRhdHMgdmlzdWVscyDDqWzDqWdhbnRzIChjb3JyZWN0L2luY29ycmVjdClcclxuICogXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNWaXNpYmxlIC0gU2kgbGUgZmVlZGJhY2sgZXN0IHZpc2libGVcclxuICogQHBhcmFtIHtib29sZWFufSBpc0NvcnJlY3QgLSBTaSBsYSByw6lwb25zZSBlc3QgY29ycmVjdGVcclxuICogQHBhcmFtIHtzdHJpbmd9IGV4cGxhbmF0aW9uIC0gRXhwbGljYXRpb24gZGUgbGEgcsOoZ2xlXHJcbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gY29ycmVjdEFuc3dlciAtIFLDqXBvbnNlIGNvcnJlY3RlXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBhdHRlbXB0cyAtIE5vbWJyZSBkZSB0ZW50YXRpdmVzXHJcbiAqL1xyXG5jb25zdCBHcmFtbWFyRmVlZGJhY2sgPSAoe1xyXG4gIGlzVmlzaWJsZSxcclxuICBpc0NvcnJlY3QsXHJcbiAgZXhwbGFuYXRpb24sXHJcbiAgY29ycmVjdEFuc3dlcixcclxuICBhdHRlbXB0cyxcclxufSkgPT4ge1xyXG4gIGlmICghaXNWaXNpYmxlKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgLy8gRm9ybWF0ZXIgbGEgcsOpcG9uc2UgY29ycmVjdGUgcG91ciBsJ2FmZmljaGFnZVxyXG4gIGNvbnN0IGZvcm1hdENvcnJlY3RBbnN3ZXIgPSAoKSA9PiB7XHJcbiAgICBpZiAoIWNvcnJlY3RBbnN3ZXIpIHJldHVybiBcIlwiO1xyXG5cclxuICAgIC8vIFNpIGxhIHLDqXBvbnNlIGNvbnRpZW50IGRlcyBhbHRlcm5hdGl2ZXMgKHPDqXBhcsOpZXMgcGFyIGRlcyAvKVxyXG4gICAgaWYgKHR5cGVvZiBjb3JyZWN0QW5zd2VyID09PSBcInN0cmluZ1wiICYmIGNvcnJlY3RBbnN3ZXIuaW5jbHVkZXMoXCIvXCIpKSB7XHJcbiAgICAgIHJldHVybiBjb3JyZWN0QW5zd2VyXHJcbiAgICAgICAgLnNwbGl0KFwiL1wiKVxyXG4gICAgICAgIC5tYXAoKGFucykgPT4gYW5zLnRyaW0oKSlcclxuICAgICAgICAuam9pbihcIiBvdSBcIik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNvcnJlY3RBbnN3ZXI7XHJcbiAgfTtcclxuXHJcbiAgLy8gRMOpdGVybWluZXIgbGUgdGl0cmUgc2Vsb24gbGUgY29udGV4dGVcclxuICBjb25zdCBnZXRUaXRsZSA9ICgpID0+IHtcclxuICAgIGlmIChpc0NvcnJlY3QpIHJldHVybiBcIkNvcnJlY3QhXCI7XHJcbiAgICByZXR1cm4gYXR0ZW1wdHMgPT09IDEgPyBcIlRyeSBBZ2FpbiFcIiA6IFwiSW5jb3JyZWN0IVwiO1xyXG4gIH07XHJcblxyXG4gIC8vIETDqXRlcm1pbmVyIGxlIGNvbnRlbnUgc2Vsb24gbGUgY29udGV4dGVcclxuICBjb25zdCBnZXRDb250ZW50ID0gKCkgPT4ge1xyXG4gICAgaWYgKGlzQ29ycmVjdCkge1xyXG4gICAgICByZXR1cm4gZXhwbGFuYXRpb24gfHwgXCJXZWxsIGRvbmUhIPCfjolcIjtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKGF0dGVtcHRzID4gMSkge1xyXG4gICAgICByZXR1cm4gYFRoZSBjb3JyZWN0IGFuc3dlciBpczogJHtmb3JtYXRDb3JyZWN0QW5zd2VyKCl9YDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIFwiWW91IGNhbiB0cnkgb25jZSBtb3JlLiBDaGVjayBzcGVsbGluZyBhbmQgcHVuY3R1YXRpb24gb3IgdHJ5IGFub3RoZXIgZm9ybXVsYXRpb24uXCI7XHJcbiAgfTtcclxuXHJcbiAgLy8gQ291bGV1ciBzZWxvbiBsJ8OpdGF0XHJcbiAgY29uc3QgbGV2ZWxDb2xvciA9IGlzQ29ycmVjdCA/IFwiIzEwQjk4MVwiIDogXCIjRUY0NDQ0XCI7XHJcbiAgY29uc3QgYmFja2dyb3VuZENvbG9yID0gaXNDb3JyZWN0ID8gXCIjRjBGREY0XCIgOiBcIiNGRUYyRjJcIjtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxDb250ZW50U2VjdGlvblxyXG4gICAgICB0aXRsZT17Z2V0VGl0bGUoKX1cclxuICAgICAgY29udGVudD17Z2V0Q29udGVudCgpfVxyXG4gICAgICBsZXZlbENvbG9yPXtsZXZlbENvbG9yfVxyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I9e2JhY2tncm91bmRDb2xvcn1cclxuICAgICAgc2hvd0ljb25cclxuICAgICAgaXNJdGFsaWM9e2ZhbHNlfVxyXG4gICAgLz5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgR3JhbW1hckZlZWRiYWNrOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSxJQUFBQSxlQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFBc0UsSUFBQUMsV0FBQSxHQUFBRCxPQUFBO0FBY3RFLElBQU1FLGVBQWUsR0FBRyxTQUFsQkEsZUFBZUEsQ0FBQUMsSUFBQSxFQU1mO0VBQUEsSUFMSkMsU0FBUyxHQUFBRCxJQUFBLENBQVRDLFNBQVM7SUFDVEMsU0FBUyxHQUFBRixJQUFBLENBQVRFLFNBQVM7SUFDVEMsV0FBVyxHQUFBSCxJQUFBLENBQVhHLFdBQVc7SUFDWEMsYUFBYSxHQUFBSixJQUFBLENBQWJJLGFBQWE7SUFDYkMsUUFBUSxHQUFBTCxJQUFBLENBQVJLLFFBQVE7RUFFUixJQUFJLENBQUNKLFNBQVMsRUFBRSxPQUFPLElBQUk7RUFHM0IsSUFBTUssbUJBQW1CLEdBQUcsU0FBdEJBLG1CQUFtQkEsQ0FBQSxFQUFTO0lBQ2hDLElBQUksQ0FBQ0YsYUFBYSxFQUFFLE9BQU8sRUFBRTtJQUc3QixJQUFJLE9BQU9BLGFBQWEsS0FBSyxRQUFRLElBQUlBLGFBQWEsQ0FBQ0csUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO01BQ3BFLE9BQU9ILGFBQWEsQ0FDakJJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FDVkMsR0FBRyxDQUFDLFVBQUNDLEdBQUc7UUFBQSxPQUFLQSxHQUFHLENBQUNDLElBQUksQ0FBQyxDQUFDO01BQUEsRUFBQyxDQUN4QkMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNqQjtJQUVBLE9BQU9SLGFBQWE7RUFDdEIsQ0FBQztFQUdELElBQU1TLFFBQVEsR0FBRyxTQUFYQSxRQUFRQSxDQUFBLEVBQVM7SUFDckIsSUFBSVgsU0FBUyxFQUFFLE9BQU8sVUFBVTtJQUNoQyxPQUFPRyxRQUFRLEtBQUssQ0FBQyxHQUFHLFlBQVksR0FBRyxZQUFZO0VBQ3JELENBQUM7RUFHRCxJQUFNUyxVQUFVLEdBQUcsU0FBYkEsVUFBVUEsQ0FBQSxFQUFTO0lBQ3ZCLElBQUlaLFNBQVMsRUFBRTtNQUNiLE9BQU9DLFdBQVcsSUFBSSxlQUFlO0lBQ3ZDO0lBRUEsSUFBSUUsUUFBUSxHQUFHLENBQUMsRUFBRTtNQUNoQixPQUFPLDBCQUEwQkMsbUJBQW1CLENBQUMsQ0FBQyxFQUFFO0lBQzFEO0lBRUEsT0FBTyxtRkFBbUY7RUFDNUYsQ0FBQztFQUdELElBQU1TLFVBQVUsR0FBR2IsU0FBUyxHQUFHLFNBQVMsR0FBRyxTQUFTO0VBQ3BELElBQU1jLGVBQWUsR0FBR2QsU0FBUyxHQUFHLFNBQVMsR0FBRyxTQUFTO0VBRXpELE9BQ0UsSUFBQUosV0FBQSxDQUFBbUIsR0FBQSxFQUFDdEIsZUFBQSxDQUFBdUIsT0FBYztJQUNiQyxLQUFLLEVBQUVOLFFBQVEsQ0FBQyxDQUFFO0lBQ2xCTyxPQUFPLEVBQUVOLFVBQVUsQ0FBQyxDQUFFO0lBQ3RCQyxVQUFVLEVBQUVBLFVBQVc7SUFDdkJDLGVBQWUsRUFBRUEsZUFBZ0I7SUFDakNLLFFBQVE7SUFDUkMsUUFBUSxFQUFFO0VBQU0sQ0FDakIsQ0FBQztBQUVOLENBQUM7QUFBQyxJQUFBQyxRQUFBLEdBQUFDLE9BQUEsQ0FBQU4sT0FBQSxHQUVhbkIsZUFBZSIsImlnbm9yZUxpc3QiOltdfQ==