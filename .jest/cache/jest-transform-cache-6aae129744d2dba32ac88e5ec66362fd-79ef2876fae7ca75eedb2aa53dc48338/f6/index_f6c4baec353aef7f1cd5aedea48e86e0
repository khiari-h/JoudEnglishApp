a8d4037f2e726e618947f7471fb7337f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAllA2Exercises = exports.getA2ExercisesByTopic = exports.getA2ExercisesByDifficulty = exports.getA2ExerciseById = exports.default = exports.a2Metadata = void 0;
Object.defineProperty(exports, "readingQuestionsA2", {
  enumerable: true,
  get: function get() {
    return _readingQuestionsA.default;
  }
});
Object.defineProperty(exports, "readingTextsA2", {
  enumerable: true,
  get: function get() {
    return _readingTextsA.default;
  }
});
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _readingTextsA = _interopRequireDefault(require("./categories/readingTextsA2.js"));
var _readingQuestionsA = _interopRequireDefault(require("./categories/readingQuestionsA2.js"));
var combineTextWithQuestions = function combineTextWithQuestions(textId) {
  var text = _readingTextsA.default.find(function (t) {
    return t.id === textId;
  });
  var questions = _readingQuestionsA.default.find(function (q) {
    return q.textId === textId;
  });
  if (!text || !questions) {
    return null;
  }
  return Object.assign({}, text, {
    questions: questions.questions
  });
};
var getAllA2Exercises = exports.getAllA2Exercises = function getAllA2Exercises() {
  return _readingTextsA.default.map(function (text) {
    return combineTextWithQuestions(text.id);
  }).filter(Boolean);
};
var getA2ExerciseById = exports.getA2ExerciseById = function getA2ExerciseById(textId) {
  return combineTextWithQuestions(textId);
};
var getA2ExercisesByDifficulty = exports.getA2ExercisesByDifficulty = function getA2ExercisesByDifficulty(difficulty) {
  var filteredTexts = _readingTextsA.default.filter(function (text) {
    return text.difficulty === difficulty;
  });
  return filteredTexts.map(function (text) {
    return combineTextWithQuestions(text.id);
  }).filter(Boolean);
};
var getA2ExercisesByTopic = exports.getA2ExercisesByTopic = function getA2ExercisesByTopic(topic) {
  var filteredTexts = _readingTextsA.default.filter(function (text) {
    var _text$topics;
    return (_text$topics = text.topics) == null ? void 0 : _text$topics.includes(topic);
  });
  return filteredTexts.map(function (text) {
    return combineTextWithQuestions(text.id);
  }).filter(Boolean);
};
var a2Metadata = exports.a2Metadata = {
  level: "A2",
  totalTexts: _readingTextsA.default.length,
  totalQuestions: _readingQuestionsA.default.reduce(function (sum, q) {
    return sum + q.questions.length;
  }, 0),
  averageWordCount: Math.round(_readingTextsA.default.reduce(function (sum, text) {
    return sum + text.wordCount;
  }, 0) / _readingTextsA.default.length),
  difficulties: (0, _toConsumableArray2.default)(new Set(_readingTextsA.default.map(function (text) {
    return text.difficulty;
  }))).sort(),
  topics: (0, _toConsumableArray2.default)(new Set(_readingTextsA.default.flatMap(function (text) {
    return text.topics;
  }))).sort(),
  description: "Elementary level reading comprehension exercises focusing on common situations, past experiences, and simple descriptions."
};
var readingA2Data = {
  metadata: a2Metadata,
  exercises: getAllA2Exercises(),
  getAll: getAllA2Exercises,
  getById: getA2ExerciseById,
  getByDifficulty: getA2ExercisesByDifficulty,
  getByTopic: getA2ExercisesByTopic,
  texts: _readingTextsA.default,
  questions: _readingQuestionsA.default
};
var _default = exports.default = readingA2Data;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,