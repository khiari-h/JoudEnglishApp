f696e8568775d7f38f2f1a036038391e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.areEqual = areEqual;
exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _expoLinearGradient = require("expo-linear-gradient");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var CategorySelector = function CategorySelector(_ref) {
  var _ref$categories = _ref.categories,
    categories = _ref$categories === void 0 ? [] : _ref$categories,
    selectedCategory = _ref.selectedCategory,
    onSelectCategory = _ref.onSelectCategory,
    _ref$primaryColor = _ref.primaryColor,
    primaryColor = _ref$primaryColor === void 0 ? "#5E60CE" : _ref$primaryColor;
  var styles = (0, _style.default)(primaryColor);
  var scrollViewRef = (0, _react.useRef)(null);
  var animationsRef = (0, _react.useRef)({});
  var pressAnimationsRef = (0, _react.useRef)({});
  var itemLayoutsRef = (0, _react.useRef)({});
  var isAnimatingRef = (0, _react.useRef)(false);
  var prevSelectedCategoryRef = (0, _react.useRef)(selectedCategory);
  (0, _react.useEffect)(function () {
    var newAnimations = {};
    var newPressAnimations = {};
    var newItemLayouts = {};
    categories.forEach(function (category) {
      newAnimations[category.id] = animationsRef.current[category.id] || new _reactNative.Animated.Value(selectedCategory === category.id ? 1 : 0);
      newPressAnimations[category.id] = pressAnimationsRef.current[category.id] || new _reactNative.Animated.Value(1);
      newItemLayouts[category.id] = itemLayoutsRef.current[category.id] || null;
    });
    animationsRef.current = newAnimations;
    pressAnimationsRef.current = newPressAnimations;
    itemLayoutsRef.current = newItemLayouts;
  }, [categories, selectedCategory]);
  var handlePressIn = (0, _react.useCallback)(function (categoryId) {
    var pressAnimation = pressAnimationsRef.current[categoryId];
    if (pressAnimation) {
      _reactNative.Animated.timing(pressAnimation, {
        toValue: 0.95,
        duration: 150,
        useNativeDriver: true
      }).start();
    }
  }, []);
  var handlePressOut = (0, _react.useCallback)(function (categoryId) {
    var pressAnimation = pressAnimationsRef.current[categoryId];
    if (pressAnimation) {
      _reactNative.Animated.timing(pressAnimation, {
        toValue: 1,
        duration: 150,
        useNativeDriver: true
      }).start();
    }
  }, []);
  var triggerAnimation = (0, _react.useCallback)(function () {
    var fromCategory = prevSelectedCategoryRef.current;
    var toCategory = selectedCategory;
    if (isAnimatingRef.current || fromCategory === toCategory) {
      return;
    }
    isAnimatingRef.current = true;
    var animationsArray = [];
    var fromAnim = animationsRef.current[fromCategory];
    var toAnim = animationsRef.current[toCategory];
    if (fromAnim) {
      animationsArray.push(_reactNative.Animated.timing(fromAnim, {
        toValue: 0,
        duration: 200,
        useNativeDriver: false
      }));
    }
    if (toAnim) {
      animationsArray.push(_reactNative.Animated.timing(toAnim, {
        toValue: 1,
        duration: 300,
        useNativeDriver: false
      }));
    }
    if (animationsArray.length > 0) {
      _reactNative.Animated.parallel(animationsArray).start(function () {
        isAnimatingRef.current = false;
      });
    } else {
      isAnimatingRef.current = false;
    }
  }, [selectedCategory]);
  (0, _react.useEffect)(function () {
    triggerAnimation();
    prevSelectedCategoryRef.current = selectedCategory;
  }, [selectedCategory, triggerAnimation]);
  (0, _react.useEffect)(function () {
    if (scrollViewRef.current && selectedCategory && itemLayoutsRef.current[selectedCategory]) {
      var layout = itemLayoutsRef.current[selectedCategory];
      scrollViewRef.current.scrollTo({
        x: Math.max(0, layout.x - layout.width / 2),
        y: 0,
        animated: true
      });
    }
  }, [selectedCategory]);
  var handleCategoryPress = (0, _react.useCallback)(function (categoryId) {
    if (categoryId !== selectedCategory && !isAnimatingRef.current) {
      onSelectCategory(categoryId);
    }
  }, [selectedCategory, onSelectCategory]);
  var renderCategoryPill = (0, _react.useCallback)(function (category) {
    var isSelected = selectedCategory === category.id;
    var animation = animationsRef.current[category.id];
    var pressAnimation = pressAnimationsRef.current[category.id];
    var scale = (animation == null ? void 0 : animation.interpolate({
      inputRange: [0, 1],
      outputRange: [1, 1.05],
      extrapolate: 'clamp'
    })) || 1;
    var pressScale = (pressAnimation == null ? void 0 : pressAnimation.interpolate({
      inputRange: [0.95, 1],
      outputRange: [0.95, 1],
      extrapolate: 'clamp'
    })) || 1;
    var shadowOpacity = (animation == null ? void 0 : animation.interpolate({
      inputRange: [0, 1],
      outputRange: [0.1, 0.25],
      extrapolate: 'clamp'
    })) || 0.1;
    var borderWidth = (animation == null ? void 0 : animation.interpolate({
      inputRange: [0, 1],
      outputRange: [1, 2],
      extrapolate: 'clamp'
    })) || 1;
    return (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
      onLayout: function onLayout(event) {
        itemLayoutsRef.current[category.id] = event.nativeEvent.layout;
      },
      style: [styles.categoryItemWrapper, {
        transform: [{
          scale: _reactNative.Animated.multiply(scale, pressScale)
        }]
      }],
      children: (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: styles.categoryTouchable,
        onPress: function onPress() {
          return handleCategoryPress(category.id);
        },
        onPressIn: function onPressIn() {
          return handlePressIn(category.id);
        },
        onPressOut: function onPressOut() {
          return handlePressOut(category.id);
        },
        activeOpacity: 0.8,
        accessibilityRole: "button",
        accessibilityLabel: String(category.name),
        accessibilityState: {
          selected: isSelected
        },
        children: isSelected ? (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
          colors: [primaryColor, `${primaryColor}E6`, `${primaryColor}CC`],
          start: {
            x: 0,
            y: 0
          },
          end: {
            x: 1,
            y: 1
          },
          style: styles.selectedCategoryItem,
          children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.selectedInner,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.selectedCategoryText,
              children: category.name
            }), (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: styles.sparkleContainer,
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.sparkle,
                children: "\u2728"
              })
            })]
          })
        }) : (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
          style: [styles.categoryItem, {
            borderWidth: borderWidth,
            borderColor: `${primaryColor}20`,
            shadowOpacity: shadowOpacity
          }],
          children: (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [styles.categoryInner, {
              backgroundColor: `${primaryColor}08`
            }],
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: [styles.categoryText, {
                color: primaryColor
              }],
              children: category.name
            })
          })
        })
      })
    }, category.id);
  }, [selectedCategory, primaryColor, styles, handleCategoryPress, handlePressIn, handlePressOut]);
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: styles.container,
    children: (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
      colors: [`${primaryColor}04`, 'transparent', `${primaryColor}02`],
      start: {
        x: 0,
        y: 0
      },
      end: {
        x: 1,
        y: 0
      },
      style: styles.backgroundGradient,
      children: (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
        ref: scrollViewRef,
        horizontal: true,
        showsHorizontalScrollIndicator: false,
        contentContainerStyle: styles.scrollContent,
        style: styles.scrollView,
        children: categories.map(renderCategoryPill)
      })
    })
  });
};
CategorySelector.propTypes = {
  categories: _propTypes.default.arrayOf(_propTypes.default.shape({
    id: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]).isRequired,
    name: _propTypes.default.string.isRequired
  })).isRequired,
  selectedCategory: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  onSelectCategory: _propTypes.default.func.isRequired,
  primaryColor: _propTypes.default.string
};
function areEqual(prevProps, nextProps) {
  if (prevProps.selectedCategory !== nextProps.selectedCategory || prevProps.primaryColor !== nextProps.primaryColor || prevProps.categories.length !== nextProps.categories.length) {
    return false;
  }
  if (prevProps.categories === nextProps.categories) {
    return true;
  }
  return prevProps.categories.every(function (cat, index) {
    var nextCat = nextProps.categories[index];
    return nextCat && cat.id === nextCat.id && cat.name === nextCat.name;
  });
}
var _default = exports.default = (0, _react.memo)(CategorySelector, areEqual);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,