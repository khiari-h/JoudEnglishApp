477c221e31bd69a72f7653dd08f01889
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _useModalAnimation = _interopRequireDefault(require("../../../../src/components/ui/Modal/useModalAnimation"));
var mockInterpolate = jest.fn(function (config) {
  return {
    inputRange: config.inputRange,
    outputRange: config.outputRange,
    __getValue: function __getValue() {
      return 0;
    }
  };
});
var mockAnimatedValue = jest.fn(function () {
  return {
    interpolate: mockInterpolate,
    addListener: jest.fn(),
    removeAllListeners: jest.fn(),
    setValue: jest.fn(),
    _value: 0
  };
});
var mockStart = jest.fn(function (callback) {
  if (callback) callback({
    finished: true
  });
});
var mockTiming = jest.fn(function () {
  return {
    start: mockStart,
    stop: jest.fn()
  };
});
jest.spyOn(_reactNative2.Animated, 'Value').mockImplementation(mockAnimatedValue);
jest.spyOn(_reactNative2.Animated, 'timing').mockImplementation(mockTiming);
describe('useModalAnimation', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockInterpolate.mockClear();
    mockAnimatedValue.mockClear();
    mockTiming.mockClear();
    mockStart.mockClear();
  });
  it('devrait d√©marrer l\'animation si isVisible devient vrai', function () {
    var _renderHook = (0, _reactNative.renderHook)(function (_ref) {
        var isVisible = _ref.isVisible;
        return (0, _useModalAnimation.default)({
          isVisible: isVisible
        });
      }, {
        initialProps: {
          isVisible: false
        }
      }),
      result = _renderHook.result,
      rerender = _renderHook.rerender;
    expect(result.current).toBeDefined();
    (0, _reactNative.act)(function () {
      rerender({
        isVisible: true
      });
    });
    expect(mockTiming).toHaveBeenCalledTimes(1);
    expect(mockStart).toHaveBeenCalledTimes(1);
  });
  it('devrait appeler Animated.timing avec les bonnes valeurs pour la position "top"', function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function (_ref2) {
        var isVisible = _ref2.isVisible,
          position = _ref2.position;
        return (0, _useModalAnimation.default)({
          isVisible: isVisible,
          position: position
        });
      }, {
        initialProps: {
          isVisible: false,
          position: 'top'
        }
      }),
      rerender = _renderHook2.rerender;
    (0, _reactNative.act)(function () {
      rerender({
        isVisible: true,
        position: 'top'
      });
    });
    expect(mockTiming).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({
      toValue: 1,
      duration: 300
    }));
  });
  it('devrait retourner les styles de transformation corrects pour la position "top"', function () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useModalAnimation.default)({
          isVisible: true,
          position: 'top'
        });
      }),
      result = _renderHook3.result;
    expect(result.current).toBeDefined();
    expect(result.current.transformStyle).toBeDefined();
    var transformStyle = result.current.transformStyle;
    expect(transformStyle).toHaveProperty('transform');
    expect(Array.isArray(transformStyle.transform)).toBe(true);
    var hasTranslateY = transformStyle.transform.some(function (transform) {
      return transform.hasOwnProperty('translateY');
    });
    expect(hasTranslateY).toBe(true);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlMiIsIl91c2VNb2RhbEFuaW1hdGlvbiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJtb2NrSW50ZXJwb2xhdGUiLCJqZXN0IiwiZm4iLCJjb25maWciLCJpbnB1dFJhbmdlIiwib3V0cHV0UmFuZ2UiLCJfX2dldFZhbHVlIiwibW9ja0FuaW1hdGVkVmFsdWUiLCJpbnRlcnBvbGF0ZSIsImFkZExpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwic2V0VmFsdWUiLCJfdmFsdWUiLCJtb2NrU3RhcnQiLCJjYWxsYmFjayIsImZpbmlzaGVkIiwibW9ja1RpbWluZyIsInN0YXJ0Iiwic3RvcCIsInNweU9uIiwiQW5pbWF0ZWQiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwibW9ja0NsZWFyIiwiaXQiLCJfcmVuZGVySG9vayIsInJlbmRlckhvb2siLCJfcmVmIiwiaXNWaXNpYmxlIiwidXNlTW9kYWxBbmltYXRpb24iLCJpbml0aWFsUHJvcHMiLCJyZXN1bHQiLCJyZXJlbmRlciIsImV4cGVjdCIsImN1cnJlbnQiLCJ0b0JlRGVmaW5lZCIsImFjdCIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsIl9yZW5kZXJIb29rMiIsIl9yZWYyIiwicG9zaXRpb24iLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsImFueXRoaW5nIiwib2JqZWN0Q29udGFpbmluZyIsInRvVmFsdWUiLCJkdXJhdGlvbiIsIl9yZW5kZXJIb29rMyIsInRyYW5zZm9ybVN0eWxlIiwidG9IYXZlUHJvcGVydHkiLCJBcnJheSIsImlzQXJyYXkiLCJ0cmFuc2Zvcm0iLCJ0b0JlIiwiaGFzVHJhbnNsYXRlWSIsInNvbWUiLCJoYXNPd25Qcm9wZXJ0eSJdLCJzb3VyY2VzIjpbInVzZU1vZGFsQW5pbWF0aW9uLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVuZGVySG9vaywgYWN0IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgeyBBbmltYXRlZCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCB1c2VNb2RhbEFuaW1hdGlvbiBmcm9tICcuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy91aS9Nb2RhbC91c2VNb2RhbEFuaW1hdGlvbic7XHJcblxyXG4vLyBNb2NrIHBvdXIgQW5pbWF0ZWQuVmFsdWUgYXZlYyBpbnRlcnBvbGF0ZVxyXG5jb25zdCBtb2NrSW50ZXJwb2xhdGUgPSBqZXN0LmZuKChjb25maWcpID0+ICh7XHJcbiAgaW5wdXRSYW5nZTogY29uZmlnLmlucHV0UmFuZ2UsXHJcbiAgb3V0cHV0UmFuZ2U6IGNvbmZpZy5vdXRwdXRSYW5nZSxcclxuICAvLyBTaW11bGVyIHVuZSB2YWxldXIgYW5pbcOpZVxyXG4gIF9fZ2V0VmFsdWU6ICgpID0+IDAsXHJcbn0pKTtcclxuXHJcbmNvbnN0IG1vY2tBbmltYXRlZFZhbHVlID0gamVzdC5mbigoKSA9PiAoe1xyXG4gIGludGVycG9sYXRlOiBtb2NrSW50ZXJwb2xhdGUsXHJcbiAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKSxcclxuICByZW1vdmVBbGxMaXN0ZW5lcnM6IGplc3QuZm4oKSxcclxuICBzZXRWYWx1ZTogamVzdC5mbigpLFxyXG4gIF92YWx1ZTogMCxcclxufSkpO1xyXG5cclxuLy8gTW9jayBwb3VyIEFuaW1hdGVkLnRpbWluZ1xyXG5jb25zdCBtb2NrU3RhcnQgPSBqZXN0LmZuKChjYWxsYmFjaykgPT4ge1xyXG4gIGlmIChjYWxsYmFjaykgY2FsbGJhY2soeyBmaW5pc2hlZDogdHJ1ZSB9KTtcclxufSk7XHJcblxyXG5jb25zdCBtb2NrVGltaW5nID0gamVzdC5mbigoKSA9PiAoe1xyXG4gIHN0YXJ0OiBtb2NrU3RhcnQsXHJcbiAgc3RvcDogamVzdC5mbigpLFxyXG59KSk7XHJcblxyXG4vLyBBcHBsaXF1ZXIgbGVzIG1vY2tzXHJcbmplc3Quc3B5T24oQW5pbWF0ZWQsICdWYWx1ZScpLm1vY2tJbXBsZW1lbnRhdGlvbihtb2NrQW5pbWF0ZWRWYWx1ZSk7XHJcbmplc3Quc3B5T24oQW5pbWF0ZWQsICd0aW1pbmcnKS5tb2NrSW1wbGVtZW50YXRpb24obW9ja1RpbWluZyk7XHJcblxyXG5kZXNjcmliZSgndXNlTW9kYWxBbmltYXRpb24nLCAoKSA9PiB7XHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcclxuICAgIG1vY2tJbnRlcnBvbGF0ZS5tb2NrQ2xlYXIoKTtcclxuICAgIG1vY2tBbmltYXRlZFZhbHVlLm1vY2tDbGVhcigpO1xyXG4gICAgbW9ja1RpbWluZy5tb2NrQ2xlYXIoKTtcclxuICAgIG1vY2tTdGFydC5tb2NrQ2xlYXIoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ2RldnJhaXQgZMOpbWFycmVyIGxcXCdhbmltYXRpb24gc2kgaXNWaXNpYmxlIGRldmllbnQgdnJhaScsICgpID0+IHtcclxuICAgIGNvbnN0IHsgcmVzdWx0LCByZXJlbmRlciB9ID0gcmVuZGVySG9vayhcclxuICAgICAgKHsgaXNWaXNpYmxlIH0pID0+IHVzZU1vZGFsQW5pbWF0aW9uKHsgaXNWaXNpYmxlIH0pLCBcclxuICAgICAge1xyXG4gICAgICAgIGluaXRpYWxQcm9wczogeyBpc1Zpc2libGU6IGZhbHNlIH0sXHJcbiAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgLy8gQXR0ZW5kcmUgcXVlIGxlIGhvb2sgc29pdCBpbml0aWFsaXPDqVxyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50KS50b0JlRGVmaW5lZCgpO1xyXG5cclxuICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgIHJlcmVuZGVyKHsgaXNWaXNpYmxlOiB0cnVlIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZXhwZWN0KG1vY2tUaW1pbmcpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcclxuICAgIGV4cGVjdChtb2NrU3RhcnQpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ2RldnJhaXQgYXBwZWxlciBBbmltYXRlZC50aW1pbmcgYXZlYyBsZXMgYm9ubmVzIHZhbGV1cnMgcG91ciBsYSBwb3NpdGlvbiBcInRvcFwiJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyByZXJlbmRlciB9ID0gcmVuZGVySG9vayhcclxuICAgICAgKHsgaXNWaXNpYmxlLCBwb3NpdGlvbiB9KSA9PiB1c2VNb2RhbEFuaW1hdGlvbih7IGlzVmlzaWJsZSwgcG9zaXRpb24gfSksIFxyXG4gICAgICB7XHJcbiAgICAgICAgaW5pdGlhbFByb3BzOiB7IGlzVmlzaWJsZTogZmFsc2UsIHBvc2l0aW9uOiAndG9wJyB9LFxyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgIHJlcmVuZGVyKHsgaXNWaXNpYmxlOiB0cnVlLCBwb3NpdGlvbjogJ3RvcCcgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBleHBlY3QobW9ja1RpbWluZykudG9IYXZlQmVlbkNhbGxlZFdpdGgoXHJcbiAgICAgIGV4cGVjdC5hbnl0aGluZygpLCAvLyBMJ2luc3RhbmNlIGQnQW5pbWF0ZWQuVmFsdWVcclxuICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xyXG4gICAgICAgIHRvVmFsdWU6IDEsXHJcbiAgICAgICAgZHVyYXRpb246IDMwMCxcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdkZXZyYWl0IHJldG91cm5lciBsZXMgc3R5bGVzIGRlIHRyYW5zZm9ybWF0aW9uIGNvcnJlY3RzIHBvdXIgbGEgcG9zaXRpb24gXCJ0b3BcIicsICgpID0+IHtcclxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IFxyXG4gICAgICB1c2VNb2RhbEFuaW1hdGlvbih7IGlzVmlzaWJsZTogdHJ1ZSwgcG9zaXRpb246ICd0b3AnIH0pXHJcbiAgICApO1xyXG4gICAgXHJcbiAgICAvLyBWw6lyaWZpZXIgcXVlIGxlIGhvb2sgcmV0b3VybmUgYmllbiB1biBvYmpldCBhdmVjIHRyYW5zZm9ybVN0eWxlXHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQudHJhbnNmb3JtU3R5bGUpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICBcclxuICAgIC8vIFbDqXJpZmllciBsYSBzdHJ1Y3R1cmUgZHUgc3R5bGUgcmV0b3VybsOpXHJcbiAgICBjb25zdCB0cmFuc2Zvcm1TdHlsZSA9IHJlc3VsdC5jdXJyZW50LnRyYW5zZm9ybVN0eWxlO1xyXG4gICAgZXhwZWN0KHRyYW5zZm9ybVN0eWxlKS50b0hhdmVQcm9wZXJ0eSgndHJhbnNmb3JtJyk7XHJcbiAgICBleHBlY3QoQXJyYXkuaXNBcnJheSh0cmFuc2Zvcm1TdHlsZS50cmFuc2Zvcm0pKS50b0JlKHRydWUpO1xyXG4gICAgXHJcbiAgICAvLyBWw6lyaWZpZXIgcXUnaWwgeSBhIGF1IG1vaW5zIHVuZSB0cmFuc2Zvcm1hdGlvbiB0cmFuc2xhdGVZXHJcbiAgICBjb25zdCBoYXNUcmFuc2xhdGVZID0gdHJhbnNmb3JtU3R5bGUudHJhbnNmb3JtLnNvbWUoXHJcbiAgICAgIHRyYW5zZm9ybSA9PiB0cmFuc2Zvcm0uaGFzT3duUHJvcGVydHkoJ3RyYW5zbGF0ZVknKVxyXG4gICAgKTtcclxuICAgIGV4cGVjdChoYXNUcmFuc2xhdGVZKS50b0JlKHRydWUpO1xyXG4gIH0pO1xyXG59KTsiXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBQSxZQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxhQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxrQkFBQSxHQUFBQyxzQkFBQSxDQUFBSCxPQUFBO0FBR0EsSUFBTUksZUFBZSxHQUFHQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxVQUFDQyxNQUFNO0VBQUEsT0FBTTtJQUMzQ0MsVUFBVSxFQUFFRCxNQUFNLENB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