ca27463491f555bf97ac829d25523531
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CurrentLevelProvider = CurrentLevelProvider;
exports.useCurrentLevel = useCurrentLevel;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
var CurrentLevelContext = (0, _react.createContext)();
function CurrentLevelProvider(_ref) {
  var children = _ref.children,
    _ref$initialLevel = _ref.initialLevel,
    initialLevel = _ref$initialLevel === void 0 ? "1" : _ref$initialLevel;
  var _useState = (0, _react.useState)(initialLevel),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    currentLevel = _useState2[0],
    setCurrentLevel = _useState2[1];
  var contextValue = (0, _react.useMemo)(function () {
    return {
      currentLevel: currentLevel,
      setCurrentLevel: setCurrentLevel
    };
  }, [currentLevel]);
  return (0, _jsxRuntime.jsx)(CurrentLevelContext.Provider, {
    value: contextValue,
    children: children
  });
}
CurrentLevelProvider.propTypes = {
  children: _propTypes.default.node.isRequired,
  initialLevel: _propTypes.default.string
};
function useCurrentLevel() {
  var context = (0, _react.useContext)(CurrentLevelContext);
  if (!context) {
    throw new Error("useCurrentLevel doit être utilisé dans CurrentLevelProvider");
  }
  return context;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3Byb3BUeXBlcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfanN4UnVudGltZSIsIkN1cnJlbnRMZXZlbENvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiQ3VycmVudExldmVsUHJvdmlkZXIiLCJfcmVmIiwiY2hpbGRyZW4iLCJfcmVmJGluaXRpYWxMZXZlbCIsImluaXRpYWxMZXZlbCIsIl91c2VTdGF0ZSIsInVzZVN0YXRlIiwiX3VzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5MiIsImRlZmF1bHQiLCJjdXJyZW50TGV2ZWwiLCJzZXRDdXJyZW50TGV2ZWwiLCJjb250ZXh0VmFsdWUiLCJ1c2VNZW1vIiwianN4IiwiUHJvdmlkZXIiLCJ2YWx1ZSIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsIm5vZGUiLCJpc1JlcXVpcmVkIiwic3RyaW5nIiwidXNlQ3VycmVudExldmVsIiwiY29udGV4dCIsInVzZUNvbnRleHQiLCJFcnJvciJdLCJzb3VyY2VzIjpbIkN1cnJlbnRMZXZlbENvbnRleHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCwgdXNlU3RhdGUsIHVzZU1lbW8gfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuXHJcbi8vIENyw6llIGxlIGNvbnRleHRlXHJcbmNvbnN0IEN1cnJlbnRMZXZlbENvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XHJcblxyXG4vLyBQcm92aWRlciBwb3VyIGVuZ2xvYmVyIGwnYXBwXHJcbmV4cG9ydCBmdW5jdGlvbiBDdXJyZW50TGV2ZWxQcm92aWRlcih7IGNoaWxkcmVuLCBpbml0aWFsTGV2ZWwgPSBcIjFcIiB9KSB7XHJcbiAgY29uc3QgW2N1cnJlbnRMZXZlbCwgc2V0Q3VycmVudExldmVsXSA9IHVzZVN0YXRlKGluaXRpYWxMZXZlbCk7XHJcblxyXG4gIC8vIE3DqW1vcmlzZSBsYSB2YWxldXIgZHUgY29udGV4dGUgcG91ciDDqXZpdGVyIGxlcyByZS1yZW5kdXMgaW51dGlsZXNcclxuICBjb25zdCBjb250ZXh0VmFsdWUgPSB1c2VNZW1vKCgpID0+ICh7XHJcbiAgICBjdXJyZW50TGV2ZWwsXHJcbiAgICBzZXRDdXJyZW50TGV2ZWxcclxuICB9KSwgW2N1cnJlbnRMZXZlbF0pO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPEN1cnJlbnRMZXZlbENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NvbnRleHRWYWx1ZX0+XHJcbiAgICAgIHtjaGlsZHJlbn1cclxuICAgIDwvQ3VycmVudExldmVsQ29udGV4dC5Qcm92aWRlcj5cclxuICApO1xyXG59XHJcblxyXG5DdXJyZW50TGV2ZWxQcm92aWRlci5wcm9wVHlwZXMgPSB7XHJcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXHJcbiAgaW5pdGlhbExldmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG59O1xyXG5cclxuLy8gSG9vayBkJ2FjY8OocyBwcmF0aXF1ZVxyXG5leHBvcnQgZnVuY3Rpb24gdXNlQ3VycmVudExldmVsKCkge1xyXG4gIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0KEN1cnJlbnRMZXZlbENvbnRleHQpO1xyXG4gIGlmICghY29udGV4dCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKFwidXNlQ3VycmVudExldmVsIGRvaXQgw6p0cmUgdXRpbGlzw6kgZGFucyBDdXJyZW50TGV2ZWxQcm92aWRlclwiKTtcclxuICB9XHJcbiAgcmV0dXJuIGNvbnRleHQ7XHJcbn0gIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsVUFBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBQW1DLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUduQyxJQUFNSSxtQkFBbUIsR0FBRyxJQUFBQyxvQkFBYSxFQUFDLENBQUM7QUFHcEMsU0FBU0Msb0JBQW9CQSxDQUFBQyxJQUFBLEVBQW1DO0VBQUEsSUFBaENDLFFBQVEsR0FBQUQsSUFBQSxDQUFSQyxRQUFRO0lBQUFDLGlCQUFBLEdBQUFGLElBQUEsQ0FBRUcsWUFBWTtJQUFaQSxZQUFZLEdBQUFELGlCQUFBLGNBQUcsR0FBRyxHQUFBQSxpQkFBQTtFQUNqRSxJQUFBRSxTQUFBLEdBQXdDLElBQUFDLGVBQVEsRUFBQ0YsWUFBWSxDQUFDO0lBQUFHLFVBQUEsT0FBQUMsZUFBQSxDQUFBQyxPQUFBLEVBQUFKLFNBQUE7SUFBdkRLLFlBQVksR0FBQUgsVUFBQTtJQUFFSSxlQUFlLEdBQUFKLFVBQUE7RUFHcEMsSUFBTUssWUFBWSxHQUFHLElBQUFDLGNBQU8sRUFBQztJQUFBLE9BQU87TUFDbENILFlBQVksRUFBWkEsWUFBWTtNQUNaQyxlQUFlLEVBQWZBO0lBQ0YsQ0FBQztFQUFBLENBQUMsRUFBRSxDQUFDRCxZQUFZLENBQUMsQ0FBQztFQUVuQixPQUNFLElBQUFiLFdBQUEsQ0FBQWlCLEdBQUEsRUFBQ2hCLG1CQUFtQixDQUFDaUIsUUFBUTtJQUFDQyxLQUFLLEVBQUVKLFlBQWE7SUFBQVYsUUFBQSxFQUMvQ0E7RUFBUSxDQUNtQixDQUFDO0FBRW5DO0FBRUFGLG9CQUFvQixDQUFDaUIsU0FBUyxHQUFHO0VBQy9CZixRQUFRLEVBQUVnQixrQkFBUyxDQUFDQyxJQUFJLENBQUNDLFVBQVU7RUFDbkNoQixZQUFZLEVBQUVjLGtCQUFTLENBQUNHO0FBQzFCLENBQUM7QUFHTSxTQUFTQyxlQUFlQSxDQUFBLEVBQUc7RUFDaEMsSUFBTUMsT0FBTyxHQUFHLElBQUFDLGlCQUFVLEVBQUMxQixtQkFBbUIsQ0FBQztFQUMvQyxJQUFJLENBQUN5QixPQUFPLEVBQUU7SUFDWixNQUFNLElBQUlFLEtBQUssQ0FBQyw2REFBNkQsQ0FBQztFQUNoRjtFQUNBLE9BQU9GLE9BQU87QUFDaEIiLCJpZ25vcmVMaXN0IjpbXX0=