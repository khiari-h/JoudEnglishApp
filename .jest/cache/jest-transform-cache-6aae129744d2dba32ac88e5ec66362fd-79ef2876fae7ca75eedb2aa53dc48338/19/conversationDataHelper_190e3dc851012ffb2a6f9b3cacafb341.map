{"version":3,"names":["_A","_interopRequireDefault","require","_A2","_B","_B2","_C","_C2","getConversationData","exports","level","dataMap","A1","exercises","ConversationA1","A2","ConversationA2","B1","ConversationB1","B2","ConversationB2","C1","ConversationC1","C2","ConversationC2","getLevelColor","colors","getConversationScenariosCount","data","length","getTotalStepsCount","reduce","total","scenario","steps","getConversationLevelStats","scenarios","totalSteps","averageStepsPerScenario","totalScenarios"],"sources":["conversationDataHelper.js"],"sourcesContent":["// utils/Conversation/ConversationDataHelper.js\n\n// Import des données de Conversation par niveau\nimport ConversationA1 from \"../../data/conversation/A1\";\nimport ConversationA2 from \"../../data/conversation/A2\";\nimport ConversationB1 from \"../../data/conversation/B1\";\nimport ConversationB2 from \"../../data/conversation/B2\";\nimport ConversationC1 from  \"../../data/conversation/C1\";\nimport ConversationC2 from  \"../../data/conversation/C2\";\n\n// Note: Le composant attend une structure { exercises: [...] }\n// Nous devons adapter les données pour correspondre à ce format\n\n/**\n * Récupère les données de scénarios de Conversation en fonction du niveau\n * @param {string} level - Le niveau de langue (A1, A2, B1, B2, C1, C2)\n * @returns {Object} Les données de Conversation pour le niveau spécifié\n */\nexport const getConversationData = (level) => {\n  const dataMap = {\n    A1: {\n      exercises: ConversationA1, // ConversationA1 est déjà un tableau de scénarios\n    },\n    A2: {\n      exercises: ConversationA2,\n    },\n    B1: {\n      exercises: ConversationB1,\n    },\n    B2: {\n      exercises: ConversationB2,\n    },\n     C1: {\n      exercises: ConversationC1,\n    },\n     C2: {\n      exercises: ConversationC2,\n    },\n\n  };\n\n  return dataMap[level] || dataMap.A1; // Par défaut, retourne A1 si le niveau n'existe pas\n};\n\n/**\n * Récupère la couleur associée à un niveau de langue\n * @param {string} level - Le niveau de langue (A1, A2, B1, B2, C1, C2)\n * @returns {string} Code couleur hexadécimal pour le niveau\n */\nexport const getLevelColor = (level) => {\n  const colors = {\n    A1: \"#3b82f6\", // Bleu\n    A2: \"#8b5cf6\", // Violet\n    B1: \"#10b981\", // Vert\n    B2: \"#f59e0b\", // Orange\n    C1: \"#ef4444\", // Rouge\n    C2: \"#6366f1\", // Indigo\n  };\n  return colors[level] || \"#4361EE\"; // Couleur par défaut\n};\n\n/**\n * Récupère le nombre total de scénarios pour un niveau\n * @param {string} level - Le niveau de langue\n * @returns {number} Nombre total de scénarios\n */\nexport const getConversationScenariosCount = (level) => {\n  const data = getConversationData(level);\n  return data.exercises ? data.exercises.length : 0;\n};\n\n/**\n * Récupère le nombre total d'étapes pour tous les scénarios d'un niveau\n * @param {string} level - Le niveau de langue\n * @returns {number} Nombre total d'étapes\n */\nexport const getTotalStepsCount = (level) => {\n  const data = getConversationData(level);\n  if (!data.exercises) return 0;\n\n  return data.exercises.reduce((total, scenario) => {\n    return total + (scenario.steps ? scenario.steps.length : 0);\n  }, 0);\n};\n\n/**\n * Récupère les statistiques complètes pour un niveau\n * @param {string} level - Le niveau de langue\n * @returns {Object} Statistiques du niveau\n */\nexport const getConversationLevelStats = (level) => {\n  const data = getConversationData(level);\n\n  if (!data.exercises)\n    return {\n      scenarios: 0,\n      totalSteps: 0,\n      averageStepsPerScenario: 0,\n    };\n\n  const totalScenarios = data.exercises.length;\n  const totalSteps = getTotalStepsCount(level);\n\n  return {\n    scenarios: totalScenarios,\n    totalSteps,\n    averageStepsPerScenario:\n      totalScenarios > 0 ? totalSteps / totalScenarios : 0,\n  };\n};\n\n"],"mappings":";;;;;AAGA,IAAAA,EAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,GAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,EAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,GAAA,GAAAJ,sBAAA,CAAAC,OAAA;AACA,IAAAI,EAAA,GAAAL,sBAAA,CAAAC,OAAA;AACA,IAAAK,GAAA,GAAAN,sBAAA,CAAAC,OAAA;AAUO,IAAMM,mBAAmB,GAAAC,OAAA,CAAAD,mBAAA,GAAG,SAAtBA,mBAAmBA,CAAIE,KAAK,EAAK;EAC5C,IAAMC,OAAO,GAAG;IACdC,EAAE,EAAE;MACFC,SAAS,EAAEC;IACb,CAAC;IACDC,EAAE,EAAE;MACFF,SAAS,EAAEG;IACb,CAAC;IACDC,EAAE,EAAE;MACFJ,SAAS,EAAEK;IACb,CAAC;IACDC,EAAE,EAAE;MACFN,SAAS,EAAEO;IACb,CAAC;IACAC,EAAE,EAAE;MACHR,SAAS,EAAES;IACb,CAAC;IACAC,EAAE,EAAE;MACHV,SAAS,EAAEW;IACb;EAEF,CAAC;EAED,OAAOb,OAAO,CAACD,KAAK,CAAC,IAAIC,OAAO,CAACC,EAAE;AACrC,CAAC;AAOM,IAAMa,aAAa,GAAAhB,OAAA,CAAAgB,aAAA,GAAG,SAAhBA,aAAaA,CAAIf,KAAK,EAAK;EACtC,IAAMgB,MAAM,GAAG;IACbd,EAAE,EAAE,SAAS;IACbG,EAAE,EAAE,SAAS;IACbE,EAAE,EAAE,SAAS;IACbE,EAAE,EAAE,SAAS;IACbE,EAAE,EAAE,SAAS;IACbE,EAAE,EAAE;EACN,CAAC;EACD,OAAOG,MAAM,CAAChB,KAAK,CAAC,IAAI,SAAS;AACnC,CAAC;AAOM,IAAMiB,6BAA6B,GAAAlB,OAAA,CAAAkB,6BAAA,GAAG,SAAhCA,6BAA6BA,CAAIjB,KAAK,EAAK;EACtD,IAAMkB,IAAI,GAAGpB,mBAAmB,CAACE,KAAK,CAAC;EACvC,OAAOkB,IAAI,CAACf,SAAS,GAAGe,IAAI,CAACf,SAAS,CAACgB,MAAM,GAAG,CAAC;AACnD,CAAC;AAOM,IAAMC,kBAAkB,GAAArB,OAAA,CAAAqB,kBAAA,GAAG,SAArBA,kBAAkBA,CAAIpB,KAAK,EAAK;EAC3C,IAAMkB,IAAI,GAAGpB,mBAAmB,CAACE,KAAK,CAAC;EACvC,IAAI,CAACkB,IAAI,CAACf,SAAS,EAAE,OAAO,CAAC;EAE7B,OAAOe,IAAI,CAACf,SAAS,CAACkB,MAAM,CAAC,UAACC,KAAK,EAAEC,QAAQ,EAAK;IAChD,OAAOD,KAAK,IAAIC,QAAQ,CAACC,KAAK,GAAGD,QAAQ,CAACC,KAAK,CAACL,MAAM,GAAG,CAAC,CAAC;EAC7D,CAAC,EAAE,CAAC,CAAC;AACP,CAAC;AAOM,IAAMM,yBAAyB,GAAA1B,OAAA,CAAA0B,yBAAA,GAAG,SAA5BA,yBAAyBA,CAAIzB,KAAK,EAAK;EAClD,IAAMkB,IAAI,GAAGpB,mBAAmB,CAACE,KAAK,CAAC;EAEvC,IAAI,CAACkB,IAAI,CAACf,SAAS,EACjB,OAAO;IACLuB,SAAS,EAAE,CAAC;IACZC,UAAU,EAAE,CAAC;IACbC,uBAAuB,EAAE;EAC3B,CAAC;EAEH,IAAMC,cAAc,GAAGX,IAAI,CAACf,SAAS,CAACgB,MAAM;EAC5C,IAAMQ,UAAU,GAAGP,kBAAkB,CAACpB,KAAK,CAAC;EAE5C,OAAO;IACL0B,SAAS,EAAEG,cAAc;IACzBF,UAAU,EAAVA,UAAU;IACVC,uBAAuB,EACrBC,cAAc,GAAG,CAAC,GAAGF,UAAU,GAAGE,cAAc,GAAG;EACvD,CAAC;AACH,CAAC","ignoreList":[]}