f122b01bd24ca40bc5272cb5870c3e28
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _CategorySelector = _interopRequireDefault(require("../../src/components/exercise-common/CategorySelector"));
var _jsxRuntime = require("react/jsx-runtime");
describe('CategorySelector Component', function () {
  var mockCategories = [{
    id: '1',
    name: 'Fruits'
  }, {
    id: '2',
    name: 'Vegetables'
  }, {
    id: '3',
    name: 'Dairy Products'
  }, {
    id: '4',
    name: 'Meat & Fish'
  }, {
    id: '5',
    name: 'Beverages'
  }];
  var defaultProps = {
    categories: mockCategories,
    selectedCategory: '1',
    onSelectCategory: jest.fn()
  };
  var renderCategorySelector = function renderCategorySelector() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, props)));
  };
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('Rendering', function () {
    it('should render without crashing', function () {
      var _renderCategorySelect = renderCategorySelector(),
        getByTestId = _renderCategorySelect.getByTestId;
      expect(getByTestId('category-selector')).toBeTruthy();
    });
    it('should render all categories correctly', function () {
      var _renderCategorySelect2 = renderCategorySelector(),
        getByText = _renderCategorySelect2.getByText;
      mockCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should render categories in the correct order', function () {
      var _renderCategorySelect3 = renderCategorySelector(),
        getAllByTestId = _renderCategorySelect3.getAllByTestId;
      var categoryElements = getAllByTestId(/^category-pill-/);
      expect(categoryElements).toHaveLength(mockCategories.length);
      categoryElements.forEach(function (element, index) {
        expect(element).toHaveTextContent(mockCategories[index].name);
      });
    });
    it('should handle empty categories array gracefully', function () {
      var _renderCategorySelect4 = renderCategorySelector({
          categories: []
        }),
        queryByTestId = _renderCategorySelect4.queryByTestId;
      var selector = queryByTestId('category-selector');
      expect(selector).toBeTruthy();
      expect(queryByTestId(/^category-pill-/)).toBeNull();
    });
    it('should highlight the selected category visually', function () {
      var _renderCategorySelect5 = renderCategorySelector({
          selectedCategory: '2'
        }),
        getByTestId = _renderCategorySelect5.getByTestId;
      var selectedPill = getByTestId('category-pill-2');
      expect(selectedPill).toBeTruthy();
    });
  });
  describe('User Interactions', function () {
    it('should call onSelectCategory when a different category is pressed', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect6 = renderCategorySelector({
          selectedCategory: '1',
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect6.getByText;
      _reactNative.fireEvent.press(getByText('Vegetables'));
      expect(mockOnSelect).toHaveBeenCalledTimes(1);
      expect(mockOnSelect).toHaveBeenCalledWith('2');
    });
    it('should not call onSelectCategory when the same category is pressed', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect7 = renderCategorySelector({
          selectedCategory: '1',
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect7.getByText;
      _reactNative.fireEvent.press(getByText('Fruits'));
      expect(mockOnSelect).not.toHaveBeenCalled();
    });
    it('should call onSelectCategory with correct category id for each category', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect8 = renderCategorySelector({
          selectedCategory: '1',
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect8.getByText;
      var categoriesToTest = mockCategories.filter(function (cat) {
        return cat.id !== '1';
      });
      categoriesToTest.forEach(function (category) {
        _reactNative.fireEvent.press(getByText(category.name));
        expect(mockOnSelect).toHaveBeenCalledWith(category.id);
      });
      expect(mockOnSelect).toHaveBeenCalledTimes(categoriesToTest.length);
    });
  });
  describe('Animations', function () {
    it('should trigger press animations correctly', (0, _asyncToGenerator2.default)(function* () {
      var _renderCategorySelect9 = renderCategorySelector(),
        getByText = _renderCategorySelect9.getByText;
      var categoryPill = getByText('Vegetables');
      (0, _reactNative.act)(function () {
        (0, _reactNative.fireEvent)(categoryPill, 'pressIn');
      });
      (0, _reactNative.act)(function () {
        (0, _reactNative.fireEvent)(categoryPill, 'pressOut');
      });
      expect(categoryPill).toBeTruthy();
    }));
    it('should handle rapid press interactions without crashing', (0, _asyncToGenerator2.default)(function* () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect0 = renderCategorySelector({
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect0.getByText;
      var categoryPill = getByText('Vegetables');
      (0, _reactNative.act)(function () {
        (0, _reactNative.fireEvent)(categoryPill, 'pressIn');
        (0, _reactNative.fireEvent)(categoryPill, 'pressOut');
        _reactNative.fireEvent.press(categoryPill);
        (0, _reactNative.fireEvent)(categoryPill, 'pressIn');
        (0, _reactNative.fireEvent)(categoryPill, 'pressOut');
      });
      expect(mockOnSelect).toHaveBeenCalledWith('2');
      expect(categoryPill).toBeTruthy();
    }));
  });
  describe('Scrolling Behavior', function () {
    it('should scroll to selected category on mount', (0, _asyncToGenerator2.default)(function* () {
      var mockScrollTo = jest.fn();
      var originalRef = _react.default.useRef;
      jest.spyOn(_react.default, 'useRef').mockReturnValue({
        current: {
          scrollTo: mockScrollTo
        }
      });
      renderCategorySelector({
        selectedCategory: '4'
      });
      yield (0, _reactNative.waitFor)(function () {
        expect(true).toBe(true);
      });
      _react.default.useRef.mockRestore == null || _react.default.useRef.mockRestore();
    }));
    it('should handle scrolling when selectedCategory changes', (0, _asyncToGenerator2.default)(function* () {
      var _renderCategorySelect1 = renderCategorySelector({
          selectedCategory: '1'
        }),
        rerender = _renderCategorySelect1.rerender;
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
        selectedCategory: "5"
      })));
      yield (0, _reactNative.waitFor)(function () {
        expect(true).toBe(true);
      });
    }));
  });
  describe('Edge Cases', function () {
    it('should handle undefined selectedCategory gracefully', function () {
      var _renderCategorySelect10 = renderCategorySelector({
          selectedCategory: undefined
        }),
        getByText = _renderCategorySelect10.getByText;
      mockCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should handle null selectedCategory gracefully', function () {
      var _renderCategorySelect11 = renderCategorySelector({
          selectedCategory: null
        }),
        getByText = _renderCategorySelect11.getByText;
      mockCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should handle non-existent selectedCategory id', function () {
      var _renderCategorySelect12 = renderCategorySelector({
          selectedCategory: 'non-existent'
        }),
        getByText = _renderCategorySelect12.getByText;
      mockCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should handle missing onSelectCategory prop gracefully', function () {
      var _renderCategorySelect13 = renderCategorySelector({
          onSelectCategory: undefined
        }),
        getByText = _renderCategorySelect13.getByText;
      expect(function () {
        _reactNative.fireEvent.press(getByText('Vegetables'));
      }).not.toThrow();
    });
    it('should handle categories with special characters in names', function () {
      var specialCategories = [{
        id: '1',
        name: 'Café & Thé'
      }, {
        id: '2',
        name: 'Fruits & Légumes'
      }, {
        id: '3',
        name: 'Viande/Poisson'
      }];
      var _renderCategorySelect14 = renderCategorySelector({
          categories: specialCategories
        }),
        getByText = _renderCategorySelect14.getByText;
      specialCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should handle very long category names', function () {
      var longNameCategories = [{
        id: '1',
        name: 'This is a very long category name that might cause layout issues'
      }, {
        id: '2',
        name: 'Short'
      }];
      var _renderCategorySelect15 = renderCategorySelector({
          categories: longNameCategories
        }),
        getByText = _renderCategorySelect15.getByText;
      longNameCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
  });
  describe('Performance', function () {
    it('should not re-render unnecessarily when props do not change', function () {
      var renderSpy = jest.fn();
      var TestWrapper = function TestWrapper(props) {
        renderSpy();
        return (0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, props));
      };
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, Object.assign({}, defaultProps))),
        rerender = _render.rerender;
      rerender((0, _jsxRuntime.jsx)(TestWrapper, Object.assign({}, defaultProps)));
      expect(renderSpy).toHaveBeenCalled();
    });
    it('should handle large number of categories efficiently', function () {
      var manyCategories = Array.from({
        length: 100
      }, function (_, i) {
        return {
          id: `${i + 1}`,
          name: `Category ${i + 1}`
        };
      });
      var startTime = Date.now();
      var _renderCategorySelect16 = renderCategorySelector({
          categories: manyCategories
        }),
        getAllByTestId = _renderCategorySelect16.getAllByTestId;
      var endTime = Date.now();
      expect(endTime - startTime).toBeLessThan(1000);
      var categoryElements = getAllByTestId(/^category-pill-/);
      expect(categoryElements).toHaveLength(100);
    });
  });
  describe('Accessibility', function () {
    it('should have proper accessibility labels', function () {
      var _renderCategorySelect17 = renderCategorySelector(),
        getByLabelText = _renderCategorySelect17.getByLabelText;
      mockCategories.forEach(function (category) {
        var element = getByLabelText(`Category ${category.name}`);
        expect(element).toBeTruthy();
      });
    });
    it('should support screen reader navigation', function () {
      var _renderCategorySelect18 = renderCategorySelector(),
        getAllByRole = _renderCategorySelect18.getAllByRole;
      var buttons = getAllByRole('button');
      expect(buttons).toHaveLength(mockCategories.length);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9yZWFjdE5hdGl2ZTIiLCJfQ2F0ZWdvcnlTZWxlY3RvciIsIl9qc3hSdW50aW1lIiwiZGVzY3JpYmUiLCJtb2NrQ2F0ZWdvcmllcyIsImlkIiwibmFtZSIsImRlZmF1bHRQcm9wcyIsImNhdGVnb3JpZXMiLCJzZWxlY3RlZENhdGVnb3J5Iiwib25TZWxlY3RDYXRlZ29yeSIsImplc3QiLCJmbiIsInJlbmRlckNhdGVnb3J5U2VsZWN0b3IiLCJwcm9wcyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsInJlbmRlciIsImpzeCIsImRlZmF1bHQiLCJPYmplY3QiLCJhc3NpZ24iLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIml0IiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0IiwiZ2V0QnlUZXN0SWQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0MiIsImdldEJ5VGV4dCIsImZvckVhY2giLCJjYXRlZ29yeSIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDMiLCJnZXRBbGxCeVRlc3RJZCIsImNhdGVnb3J5RWxlbWVudHMiLCJ0b0hhdmVMZW5ndGgiLCJlbGVtZW50IiwiaW5kZXgiLCJ0b0hhdmVUZXh0Q29udGVudCIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDQiLCJxdWVyeUJ5VGVzdElkIiwic2VsZWN0b3IiLCJ0b0JlTnVsbCIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDUiLCJzZWxlY3RlZFBpbGwiLCJtb2NrT25TZWxlY3QiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3Q2IiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDciLCJub3QiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0OCIsImNhdGVnb3JpZXNUb1Rlc3QiLCJmaWx0ZXIiLCJjYXQiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3Q5IiwiY2F0ZWdvcnlQaWxsIiwiYWN0IiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0MCIsIm1vY2tTY3JvbGxUbyIsIm9yaWdpbmFsUmVmIiwiUmVhY3QiLCJ1c2VSZWYiLCJzcHlPbiIsIm1vY2tSZXR1cm5WYWx1ZSIsImN1cnJlbnQiLCJzY3JvbGxUbyIsIndhaXRGb3IiLCJ0b0JlIiwibW9ja1Jlc3RvcmUiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3QxIiwicmVyZW5kZXIiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3QxMCIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDExIiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0MTIiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3QxMyIsInRvVGhyb3ciLCJzcGVjaWFsQ2F0ZWdvcmllcyIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDE0IiwibG9uZ05hbWVDYXRlZ29yaWVzIiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0MTUiLCJyZW5kZXJTcHkiLCJUZXN0V3JhcHBlciIsIl9yZW5kZXIiLCJtYW55Q2F0ZWdvcmllcyIsIkFycmF5IiwiZnJvbSIsIl8iLCJpIiwic3RhcnRUaW1lIiwiRGF0ZSIsIm5vdyIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDE2IiwiZW5kVGltZSIsInRvQmVMZXNzVGhhbiIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDE3IiwiZ2V0QnlMYWJlbFRleHQiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3QxOCIsImdldEFsbEJ5Um9sZSIsImJ1dHRvbnMiXSwic291cmNlcyI6WyJDYXRlZ29yeVNlbGVjdG9yLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gX190ZXN0c19fL0NhdGVnb3J5U2VsZWN0b3IudGVzdC5qc1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCBhY3QsIHdhaXRGb3IgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBBbmltYXRlZCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgQ2F0ZWdvcnlTZWxlY3RvciBmcm9tICcuLi8uLi9zcmMvY29tcG9uZW50cy9leGVyY2lzZS1jb21tb24vQ2F0ZWdvcnlTZWxlY3Rvcic7XG5cbmRlc2NyaWJlKCdDYXRlZ29yeVNlbGVjdG9yIENvbXBvbmVudCcsICgpID0+IHtcbiAgLy8gTW9jayBkYXRhXG4gIGNvbnN0IG1vY2tDYXRlZ29yaWVzID0gW1xuICAgIHsgaWQ6ICcxJywgbmFtZTogJ0ZydWl0cycgfSxcbiAgICB7IGlkOiAnMicsIG5hbWU6ICdWZWdldGFibGVzJyB9LFxuICAgIHsgaWQ6ICczJywgbmFtZTogJ0RhaXJ5IFByb2R1Y3RzJyB9LFxuICAgIHsgaWQ6ICc0JywgbmFtZTogJ01lYXQgJiBGaXNoJyB9LFxuICAgIHsgaWQ6ICc1JywgbmFtZTogJ0JldmVyYWdlcycgfSxcbiAgXTtcblxuICBjb25zdCBkZWZhdWx0UHJvcHMgPSB7XG4gICAgY2F0ZWdvcmllczogbW9ja0NhdGVnb3JpZXMsXG4gICAgc2VsZWN0ZWRDYXRlZ29yeTogJzEnLFxuICAgIG9uU2VsZWN0Q2F0ZWdvcnk6IGplc3QuZm4oKSxcbiAgfTtcblxuICAvLyBIZWxwZXIgZnVuY3Rpb24gcG91ciBjcsOpZXIgbGUgY29tcG9zYW50IGF2ZWMgcHJvcHNcbiAgY29uc3QgcmVuZGVyQ2F0ZWdvcnlTZWxlY3RvciA9IChwcm9wcyA9IHt9KSA9PiB7XG4gICAgcmV0dXJuIHJlbmRlcig8Q2F0ZWdvcnlTZWxlY3RvciB7Li4uZGVmYXVsdFByb3BzfSB7Li4ucHJvcHN9IC8+KTtcbiAgfTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1JlbmRlcmluZycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJlbmRlciB3aXRob3V0IGNyYXNoaW5nJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3RvcigpO1xuICAgICAgZXhwZWN0KGdldEJ5VGVzdElkKCdjYXRlZ29yeS1zZWxlY3RvcicpKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlbmRlciBhbGwgY2F0ZWdvcmllcyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3RvcigpO1xuICAgICAgXG4gICAgICBtb2NrQ2F0ZWdvcmllcy5mb3JFYWNoKGNhdGVnb3J5ID0+IHtcbiAgICAgICAgZXhwZWN0KGdldEJ5VGV4dChjYXRlZ29yeS5uYW1lKSkudG9CZVRydXRoeSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlbmRlciBjYXRlZ29yaWVzIGluIHRoZSBjb3JyZWN0IG9yZGVyJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBnZXRBbGxCeVRlc3RJZCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3RvcigpO1xuICAgICAgY29uc3QgY2F0ZWdvcnlFbGVtZW50cyA9IGdldEFsbEJ5VGVzdElkKC9eY2F0ZWdvcnktcGlsbC0vKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGNhdGVnb3J5RWxlbWVudHMpLnRvSGF2ZUxlbmd0aChtb2NrQ2F0ZWdvcmllcy5sZW5ndGgpO1xuICAgICAgXG4gICAgICAvLyBWw6lyaWZpZXIgbCdvcmRyZVxuICAgICAgY2F0ZWdvcnlFbGVtZW50cy5mb3JFYWNoKChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgICAgICBleHBlY3QoZWxlbWVudCkudG9IYXZlVGV4dENvbnRlbnQobW9ja0NhdGVnb3JpZXNbaW5kZXhdLm5hbWUpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBlbXB0eSBjYXRlZ29yaWVzIGFycmF5IGdyYWNlZnVsbHknLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHF1ZXJ5QnlUZXN0SWQgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoeyBjYXRlZ29yaWVzOiBbXSB9KTtcbiAgICAgIGNvbnN0IHNlbGVjdG9yID0gcXVlcnlCeVRlc3RJZCgnY2F0ZWdvcnktc2VsZWN0b3InKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHNlbGVjdG9yKS50b0JlVHJ1dGh5KCk7XG4gICAgICAvLyBWw6lyaWZpZXIgcXUnYXVjdW5lIGNhdMOpZ29yaWUgbidlc3QgcmVuZHVlXG4gICAgICBleHBlY3QocXVlcnlCeVRlc3RJZCgvXmNhdGVnb3J5LXBpbGwtLykpLnRvQmVOdWxsKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhpZ2hsaWdodCB0aGUgc2VsZWN0ZWQgY2F0ZWdvcnkgdmlzdWFsbHknLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKHsgc2VsZWN0ZWRDYXRlZ29yeTogJzInIH0pO1xuICAgICAgY29uc3Qgc2VsZWN0ZWRQaWxsID0gZ2V0QnlUZXN0SWQoJ2NhdGVnb3J5LXBpbGwtMicpO1xuICAgICAgXG4gICAgICAvLyBWw6lyaWZpZXIgcXVlIGxlIHN0eWxlIFwic2VsZWN0ZWRcIiBlc3QgYXBwbGlxdcOpXG4gICAgICAvLyBOb3RlOiBDZWNpIGTDqXBlbmQgZGUgdm90cmUgaW1wbMOpbWVudGF0aW9uLCBhZGFwdGV6IHNlbG9uIHZvcyBzdHlsZXNcbiAgICAgIGV4cGVjdChzZWxlY3RlZFBpbGwpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1VzZXIgSW50ZXJhY3Rpb25zJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgY2FsbCBvblNlbGVjdENhdGVnb3J5IHdoZW4gYSBkaWZmZXJlbnQgY2F0ZWdvcnkgaXMgcHJlc3NlZCcsICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tPblNlbGVjdCA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKHsgXG4gICAgICAgIHNlbGVjdGVkQ2F0ZWdvcnk6ICcxJywgXG4gICAgICAgIG9uU2VsZWN0Q2F0ZWdvcnk6IG1vY2tPblNlbGVjdCBcbiAgICAgIH0pO1xuXG4gICAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCdWZWdldGFibGVzJykpO1xuICAgICAgXG4gICAgICBleHBlY3QobW9ja09uU2VsZWN0KS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgICBleHBlY3QobW9ja09uU2VsZWN0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnMicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBub3QgY2FsbCBvblNlbGVjdENhdGVnb3J5IHdoZW4gdGhlIHNhbWUgY2F0ZWdvcnkgaXMgcHJlc3NlZCcsICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tPblNlbGVjdCA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKHsgXG4gICAgICAgIHNlbGVjdGVkQ2F0ZWdvcnk6ICcxJywgXG4gICAgICAgIG9uU2VsZWN0Q2F0ZWdvcnk6IG1vY2tPblNlbGVjdCBcbiAgICAgIH0pO1xuXG4gICAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCdGcnVpdHMnKSk7XG4gICAgICBcbiAgICAgIGV4cGVjdChtb2NrT25TZWxlY3QpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGNhbGwgb25TZWxlY3RDYXRlZ29yeSB3aXRoIGNvcnJlY3QgY2F0ZWdvcnkgaWQgZm9yIGVhY2ggY2F0ZWdvcnknLCAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrT25TZWxlY3QgPSBqZXN0LmZuKCk7XG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7IFxuICAgICAgICBzZWxlY3RlZENhdGVnb3J5OiAnMScsIFxuICAgICAgICBvblNlbGVjdENhdGVnb3J5OiBtb2NrT25TZWxlY3QgXG4gICAgICB9KTtcblxuICAgICAgLy8gVGVzdGVyIGNoYXF1ZSBjYXTDqWdvcmllIChzYXVmIGxhIHPDqWxlY3Rpb25uw6llKVxuICAgICAgY29uc3QgY2F0ZWdvcmllc1RvVGVzdCA9IG1vY2tDYXRlZ29yaWVzLmZpbHRlcihjYXQgPT4gY2F0LmlkICE9PSAnMScpO1xuICAgICAgXG4gICAgICBjYXRlZ29yaWVzVG9UZXN0LmZvckVhY2goY2F0ZWdvcnkgPT4ge1xuICAgICAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KGNhdGVnb3J5Lm5hbWUpKTtcbiAgICAgICAgZXhwZWN0KG1vY2tPblNlbGVjdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoY2F0ZWdvcnkuaWQpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChtb2NrT25TZWxlY3QpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcyhjYXRlZ29yaWVzVG9UZXN0Lmxlbmd0aCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdBbmltYXRpb25zJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgdHJpZ2dlciBwcmVzcyBhbmltYXRpb25zIGNvcnJlY3RseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKCk7XG4gICAgICBjb25zdCBjYXRlZ29yeVBpbGwgPSBnZXRCeVRleHQoJ1ZlZ2V0YWJsZXMnKTtcblxuICAgICAgLy8gVGVzdCBwcmVzc0luIGFuaW1hdGlvblxuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgZmlyZUV2ZW50KGNhdGVnb3J5UGlsbCwgJ3ByZXNzSW4nKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBUZXN0IHByZXNzT3V0IGFuaW1hdGlvblxuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgZmlyZUV2ZW50KGNhdGVnb3J5UGlsbCwgJ3ByZXNzT3V0Jyk7XG4gICAgICB9KTtcblxuICAgICAgLy8gUGFzIGRlIGNyYXNoID0gYW5pbWF0aW9uIGZvbmN0aW9ubmVcbiAgICAgIGV4cGVjdChjYXRlZ29yeVBpbGwpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHJhcGlkIHByZXNzIGludGVyYWN0aW9ucyB3aXRob3V0IGNyYXNoaW5nJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja09uU2VsZWN0ID0gamVzdC5mbigpO1xuICAgICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoeyBvblNlbGVjdENhdGVnb3J5OiBtb2NrT25TZWxlY3QgfSk7XG4gICAgICBjb25zdCBjYXRlZ29yeVBpbGwgPSBnZXRCeVRleHQoJ1ZlZ2V0YWJsZXMnKTtcblxuICAgICAgLy8gU2ltdWxlciBkZXMgcHJlc3Npb25zIHJhcGlkZXNcbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIGZpcmVFdmVudChjYXRlZ29yeVBpbGwsICdwcmVzc0luJyk7XG4gICAgICAgIGZpcmVFdmVudChjYXRlZ29yeVBpbGwsICdwcmVzc091dCcpO1xuICAgICAgICBmaXJlRXZlbnQucHJlc3MoY2F0ZWdvcnlQaWxsKTtcbiAgICAgICAgZmlyZUV2ZW50KGNhdGVnb3J5UGlsbCwgJ3ByZXNzSW4nKTtcbiAgICAgICAgZmlyZUV2ZW50KGNhdGVnb3J5UGlsbCwgJ3ByZXNzT3V0Jyk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KG1vY2tPblNlbGVjdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJzInKTtcbiAgICAgIGV4cGVjdChjYXRlZ29yeVBpbGwpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1Njcm9sbGluZyBCZWhhdmlvcicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHNjcm9sbCB0byBzZWxlY3RlZCBjYXRlZ29yeSBvbiBtb3VudCcsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vY2sgU2Nyb2xsVmlldyByZWYgZXQgc2Nyb2xsVG9cbiAgICAgIGNvbnN0IG1vY2tTY3JvbGxUbyA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IG9yaWdpbmFsUmVmID0gUmVhY3QudXNlUmVmO1xuICAgICAgXG4gICAgICBqZXN0LnNweU9uKFJlYWN0LCAndXNlUmVmJykubW9ja1JldHVyblZhbHVlKHtcbiAgICAgICAgY3VycmVudDoge1xuICAgICAgICAgIHNjcm9sbFRvOiBtb2NrU2Nyb2xsVG8sXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKHsgc2VsZWN0ZWRDYXRlZ29yeTogJzQnIH0pO1xuXG4gICAgICAvLyBBdHRlbmRyZSBxdWUgbCdlZmZldCBzJ2V4w6ljdXRlXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgLy8gVsOpcmlmaWVyIHF1ZSBzY3JvbGxUbyBhIMOpdMOpIGFwcGVsw6lcbiAgICAgICAgLy8gTm90ZTogQ2VjaSBkw6lwZW5kIGRlIHZvdHJlIGltcGzDqW1lbnRhdGlvblxuICAgICAgICBleHBlY3QodHJ1ZSkudG9CZSh0cnVlKTsgLy8gUGxhY2Vob2xkZXJcbiAgICAgIH0pO1xuXG4gICAgICBSZWFjdC51c2VSZWYubW9ja1Jlc3RvcmU/LigpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgc2Nyb2xsaW5nIHdoZW4gc2VsZWN0ZWRDYXRlZ29yeSBjaGFuZ2VzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgeyByZXJlbmRlciB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7IHNlbGVjdGVkQ2F0ZWdvcnk6ICcxJyB9KTtcbiAgICAgIFxuICAgICAgLy8gQ2hhbmdlciBsYSBjYXTDqWdvcmllIHPDqWxlY3Rpb25uw6llXG4gICAgICByZXJlbmRlcihcbiAgICAgICAgPENhdGVnb3J5U2VsZWN0b3IgXG4gICAgICAgICAgey4uLmRlZmF1bHRQcm9wc30gXG4gICAgICAgICAgc2VsZWN0ZWRDYXRlZ29yeT1cIjVcIiBcbiAgICAgICAgLz5cbiAgICAgICk7XG5cbiAgICAgIC8vIFbDqXJpZmllciBxdWUgbGUgY29tcG9zYW50IHNlIHJlLXJlbmQgY29ycmVjdGVtZW50XG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KHRydWUpLnRvQmUodHJ1ZSk7IC8vIExlIGNvbXBvc2FudCBuZSBjcmFzaCBwYXNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRWRnZSBDYXNlcycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSB1bmRlZmluZWQgc2VsZWN0ZWRDYXRlZ29yeSBncmFjZWZ1bGx5JywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoeyBzZWxlY3RlZENhdGVnb3J5OiB1bmRlZmluZWQgfSk7XG4gICAgICBcbiAgICAgIG1vY2tDYXRlZ29yaWVzLmZvckVhY2goY2F0ZWdvcnkgPT4ge1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KGNhdGVnb3J5Lm5hbWUpKS50b0JlVHJ1dGh5KCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIG51bGwgc2VsZWN0ZWRDYXRlZ29yeSBncmFjZWZ1bGx5JywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoeyBzZWxlY3RlZENhdGVnb3J5OiBudWxsIH0pO1xuICAgICAgXG4gICAgICBtb2NrQ2F0ZWdvcmllcy5mb3JFYWNoKGNhdGVnb3J5ID0+IHtcbiAgICAgICAgZXhwZWN0KGdldEJ5VGV4dChjYXRlZ29yeS5uYW1lKSkudG9CZVRydXRoeSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBub24tZXhpc3RlbnQgc2VsZWN0ZWRDYXRlZ29yeSBpZCcsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKHsgc2VsZWN0ZWRDYXRlZ29yeTogJ25vbi1leGlzdGVudCcgfSk7XG4gICAgICBcbiAgICAgIG1vY2tDYXRlZ29yaWVzLmZvckVhY2goY2F0ZWdvcnkgPT4ge1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KGNhdGVnb3J5Lm5hbWUpKS50b0JlVHJ1dGh5KCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIG1pc3Npbmcgb25TZWxlY3RDYXRlZ29yeSBwcm9wIGdyYWNlZnVsbHknLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7IG9uU2VsZWN0Q2F0ZWdvcnk6IHVuZGVmaW5lZCB9KTtcbiAgICAgIFxuICAgICAgLy8gVsOpcmlmaWVyIHF1ZSBwcmVzc2VyIHVuZSBjYXTDqWdvcmllIG5lIGNhdXNlIHBhcyBkZSBjcmFzaFxuICAgICAgZXhwZWN0KCgpID0+IHtcbiAgICAgICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgnVmVnZXRhYmxlcycpKTtcbiAgICAgIH0pLm5vdC50b1Rocm93KCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBjYXRlZ29yaWVzIHdpdGggc3BlY2lhbCBjaGFyYWN0ZXJzIGluIG5hbWVzJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc3BlY2lhbENhdGVnb3JpZXMgPSBbXG4gICAgICAgIHsgaWQ6ICcxJywgbmFtZTogJ0NhZsOpICYgVGjDqScgfSxcbiAgICAgICAgeyBpZDogJzInLCBuYW1lOiAnRnJ1aXRzICYgTMOpZ3VtZXMnIH0sXG4gICAgICAgIHsgaWQ6ICczJywgbmFtZTogJ1ZpYW5kZS9Qb2lzc29uJyB9LFxuICAgICAgXTtcbiAgICAgIFxuICAgICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoeyBjYXRlZ29yaWVzOiBzcGVjaWFsQ2F0ZWdvcmllcyB9KTtcbiAgICAgIFxuICAgICAgc3BlY2lhbENhdGVnb3JpZXMuZm9yRWFjaChjYXRlZ29yeSA9PiB7XG4gICAgICAgIGV4cGVjdChnZXRCeVRleHQoY2F0ZWdvcnkubmFtZSkpLnRvQmVUcnV0aHkoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgdmVyeSBsb25nIGNhdGVnb3J5IG5hbWVzJywgKCkgPT4ge1xuICAgICAgY29uc3QgbG9uZ05hbWVDYXRlZ29yaWVzID0gW1xuICAgICAgICB7IGlkOiAnMScsIG5hbWU6ICdUaGlzIGlzIGEgdmVyeSBsb25nIGNhdGVnb3J5IG5hbWUgdGhhdCBtaWdodCBjYXVzZSBsYXlvdXQgaXNzdWVzJyB9LFxuICAgICAgICB7IGlkOiAnMicsIG5hbWU6ICdTaG9ydCcgfSxcbiAgICAgIF07XG4gICAgICBcbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKHsgY2F0ZWdvcmllczogbG9uZ05hbWVDYXRlZ29yaWVzIH0pO1xuICAgICAgXG4gICAgICBsb25nTmFtZUNhdGVnb3JpZXMuZm9yRWFjaChjYXRlZ29yeSA9PiB7XG4gICAgICAgIGV4cGVjdChnZXRCeVRleHQoY2F0ZWdvcnkubmFtZSkpLnRvQmVUcnV0aHkoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUGVyZm9ybWFuY2UnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBub3QgcmUtcmVuZGVyIHVubmVjZXNzYXJpbHkgd2hlbiBwcm9wcyBkbyBub3QgY2hhbmdlJywgKCkgPT4ge1xuICAgICAgY29uc3QgcmVuZGVyU3B5ID0gamVzdC5mbigpO1xuICAgICAgXG4gICAgICAvLyBNb2NrIGR1IGNvbXBvc2FudCBwb3VyIGNvbXB0ZXIgbGVzIHJlbmR1c1xuICAgICAgY29uc3QgVGVzdFdyYXBwZXIgPSAocHJvcHMpID0+IHtcbiAgICAgICAgcmVuZGVyU3B5KCk7XG4gICAgICAgIHJldHVybiA8Q2F0ZWdvcnlTZWxlY3RvciB7Li4ucHJvcHN9IC8+O1xuICAgICAgfTtcblxuICAgICAgY29uc3QgeyByZXJlbmRlciB9ID0gcmVuZGVyKDxUZXN0V3JhcHBlciB7Li4uZGVmYXVsdFByb3BzfSAvPik7XG4gICAgICBcbiAgICAgIC8vIFJlLXJlbmRlciBhdmVjIGxlcyBtw6ptZXMgcHJvcHNcbiAgICAgIHJlcmVuZGVyKDxUZXN0V3JhcHBlciB7Li4uZGVmYXVsdFByb3BzfSAvPik7XG4gICAgICBcbiAgICAgIC8vIE5vdGU6IENlY2kgZMOpcGVuZCBkZSBzaSB2b3RyZSBjb21wb3NhbnQgdXRpbGlzZSBSZWFjdC5tZW1vIG91IHBhc1xuICAgICAgZXhwZWN0KHJlbmRlclNweSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbGFyZ2UgbnVtYmVyIG9mIGNhdGVnb3JpZXMgZWZmaWNpZW50bHknLCAoKSA9PiB7XG4gICAgICBjb25zdCBtYW55Q2F0ZWdvcmllcyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDEwMCB9LCAoXywgaSkgPT4gKHtcbiAgICAgICAgaWQ6IGAke2kgKyAxfWAsXG4gICAgICAgIG5hbWU6IGBDYXRlZ29yeSAke2kgKyAxfWAsXG4gICAgICB9KSk7XG5cbiAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICBjb25zdCB7IGdldEFsbEJ5VGVzdElkIH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKHsgY2F0ZWdvcmllczogbWFueUNhdGVnb3JpZXMgfSk7XG4gICAgICBjb25zdCBlbmRUaW1lID0gRGF0ZS5ub3coKTtcblxuICAgICAgLy8gVsOpcmlmaWVyIHF1ZSBsZSByZW5kdSBlc3QgcmFwaWRlIChtb2lucyBkJzEgc2Vjb25kZSlcbiAgICAgIGV4cGVjdChlbmRUaW1lIC0gc3RhcnRUaW1lKS50b0JlTGVzc1RoYW4oMTAwMCk7XG4gICAgICBcbiAgICAgIC8vIFbDqXJpZmllciBxdWUgdG91dGVzIGxlcyBjYXTDqWdvcmllcyBzb250IHJlbmR1ZXNcbiAgICAgIGNvbnN0IGNhdGVnb3J5RWxlbWVudHMgPSBnZXRBbGxCeVRlc3RJZCgvXmNhdGVnb3J5LXBpbGwtLyk7XG4gICAgICBleHBlY3QoY2F0ZWdvcnlFbGVtZW50cykudG9IYXZlTGVuZ3RoKDEwMCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdBY2Nlc3NpYmlsaXR5JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaGF2ZSBwcm9wZXIgYWNjZXNzaWJpbGl0eSBsYWJlbHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEJ5TGFiZWxUZXh0IH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKCk7XG4gICAgICBcbiAgICAgIC8vIFbDqXJpZmllciBxdWUgbGVzIGxhYmVscyBkJ2FjY2Vzc2liaWxpdMOpIHNvbnQgcHLDqXNlbnRzXG4gICAgICAvLyBOb3RlOiBBZGFwdGV6IHNlbG9uIHZvdHJlIGltcGzDqW1lbnRhdGlvbiBkJ2FjY2Vzc2liaWxpdMOpXG4gICAgICBtb2NrQ2F0ZWdvcmllcy5mb3JFYWNoKGNhdGVnb3J5ID0+IHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGdldEJ5TGFiZWxUZXh0KGBDYXRlZ29yeSAke2NhdGVnb3J5Lm5hbWV9YCk7XG4gICAgICAgIGV4cGVjdChlbGVtZW50KS50b0JlVHJ1dGh5KCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgc3VwcG9ydCBzY3JlZW4gcmVhZGVyIG5hdmlnYXRpb24nLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEFsbEJ5Um9sZSB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3RvcigpO1xuICAgICAgXG4gICAgICAvLyBWw6lyaWZpZXIgcXVlIGxlcyDDqWzDqW1lbnRzIG9udCBsZSBib24gcsO0bGVcbiAgICAgIGNvbnN0IGJ1dHRvbnMgPSBnZXRBbGxCeVJvbGUoJ2J1dHRvbicpO1xuICAgICAgZXhwZWN0KGJ1dHRvbnMpLnRvSGF2ZUxlbmd0aChtb2NrQ2F0ZWdvcmllcy5sZW5ndGgpO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJtYXBwaW5ncyI6Ijs7QUFDQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxhQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxpQkFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQXFGLElBQUFJLFdBQUEsR0FBQUosT0FBQTtBQUVyRkssUUFBUSxDQUFDLDRCQUE0QixFQUFFLFlBQU07RUFFM0MsSUFBTUMsY0FBYyxHQUFHLENBQ3JCO0lBQUVDLEVBQUUsRUFBRSxHQUFHO0lBQUVDLElBQUksRUFBRTtFQUFTLENBQUMsRUFDM0I7SUFBRUQsRUFBRSxFQUFFLEdBQUc7SUFBRUMsSUFBSSxFQUFFO0VBQWEsQ0FBQyxFQUMvQjtJQUFFRCxFQUFFLEVBQUUsR0FBRztJQUFFQyxJQUFJLEVBQUU7RUFBaUIsQ0FBQyxFQUNuQztJQUFFRCxFQUFFLEVBQUUsR0FBRztJQUFFQyxJQUFJLEVBQUU7RUFBYyxDQUFDLEVBQ2hDO0lBQUVELEVBQUUsRUFBRSxHQUFHO0lBQUVDLElBQUksRUFBRTtFQUFZLENBQUMsQ0FDL0I7RUFFRCxJQUFNQyxZQUFZLEdBQUc7SUFDbkJDLFVBQVUsRUFBRUosY0FBYztJQUMxQkssZ0JBQWdCLEVBQUUsR0FBRztJQUNyQkMsZ0JBQWdCLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0VBQzVCLENBQUM7RUFHRCxJQUFNQyxzQkFBc0IsR0FBRyxTQUF6QkEsc0JBQXNCQSxDQUFBLEVBQW1CO0lBQUEsSUFBZkMsS0FBSyxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxDQUFDLENBQUM7SUFDeEMsT0FBTyxJQUFBRyxtQkFBTSxFQUFDLElBQUFoQixXQUFBLENBQUFp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