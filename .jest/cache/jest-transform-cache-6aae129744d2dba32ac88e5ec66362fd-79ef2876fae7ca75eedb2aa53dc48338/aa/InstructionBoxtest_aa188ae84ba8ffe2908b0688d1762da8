e2c1508dc844fb3c85cb70ad690c9401
_getJestObj().mock('@expo/vector-icons', function () {
  var _require = require('react-native'),
    Text = _require.Text;
  return {
    Ionicons: function Ionicons(props) {
      return (0, _jsxRuntime.jsx)(Text, {
        testID: `icon-${props.name}`,
        children: props.name
      });
    }
  };
});
_getJestObj().mock('../../../src/components/exercise-common/InstructionBox/style', function () {
  return {
    container: {
      container: true
    },
    standardContainer: {
      standard: true
    },
    compactContainer: {
      compact: true
    },
    highlightedContainer: {
      highlighted: true
    },
    headerContainer: {
      header: true
    },
    titleContainer: {
      titleContainer: true
    },
    titleIcon: {
      titleIcon: true
    },
    title: {
      title: true
    },
    contentContainer: {
      contentContainer: true
    },
    instructions: {
      instructions: true
    },
    examplesContainer: {
      examplesContainer: true
    },
    sectionTitle: {
      sectionTitle: true
    },
    exampleItem: {
      exampleItem: true
    },
    exampleText: {
      exampleText: true
    },
    tipsContainer: {
      tipsContainer: true
    },
    tipItem: {
      tipItem: true
    },
    tipIcon: {
      tipIcon: true
    },
    tipText: {
      tipText: true
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _InstructionBox = _interopRequireDefault(require("../../../src/components/exercise-common/InstructionBox"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('InstructionBox', function () {
  var defaultProps = {
    title: 'Test Instructions',
    instructions: 'Test instruction text',
    examples: ['Example 1', 'Example 2'],
    tips: ['Tip 1', 'Tip 2']
  };
  it('renders with standard variant by default', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_InstructionBox.default, Object.assign({}, defaultProps))),
      getByText = _render.getByText,
      queryByTestId = _render.queryByTestId;
    expect(getByText('Test Instructions')).toBeTruthy();
    expect(getByText('Test instruction text')).toBeTruthy();
    expect(getByText('Exemples:')).toBeTruthy();
    expect(getByText('Example 1')).toBeTruthy();
    expect(getByText('Astuces:')).toBeTruthy();
    expect(getByText('Tip 1')).toBeTruthy();
    expect(queryByTestId('icon-information-circle')).toBeTruthy();
  });
  it('renders with compact variant', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_InstructionBox.default, Object.assign({}, defaultProps, {
        variant: "compact"
      }))),
      getByText = _render2.getByText;
    expect(getByText('Test Instructions')).toBeTruthy();
  });
  it('renders with highlighted variant', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_InstructionBox.default, Object.assign({}, defaultProps, {
        variant: "highlighted"
      }))),
      getByText = _render3.getByText;
    expect(getByText('Test Instructions')).toBeTruthy();
  });
  it('renders without instructions when not provided', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_InstructionBox.default, Object.assign({}, defaultProps, {
        instructions: null
      }))),
      queryByText = _render4.queryByText;
    expect(queryByText('Test instruction text')).toBeNull();
  });
  it('renders without examples when empty array', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_InstructionBox.default, Object.assign({}, defaultProps, {
        examples: []
      }))),
      queryByText = _render5.queryByText;
    expect(queryByText('Exemples:')).toBeNull();
  });
  it('renders without tips when empty array', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_InstructionBox.default, Object.assign({}, defaultProps, {
        tips: []
      }))),
      queryByText = _render6.queryByText;
    expect(queryByText('Astuces:')).toBeNull();
  });
  it('applies custom primary color', function () {
    var customColor = '#FF0000';
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_InstructionBox.default, Object.assign({}, defaultProps, {
        primaryColor: customColor
      }))),
      getByText = _render7.getByText;
    expect(getByText('Test Instructions')).toBeTruthy();
  });
  it('renders default title when not provided', function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_InstructionBox.default, {})),
      getByText = _render8.getByText;
    expect(getByText('Instructions')).toBeTruthy();
  });
  it('starts expanded by default', function () {
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_InstructionBox.default, Object.assign({}, defaultProps))),
      getByText = _render9.getByText;
    expect(getByText('Test instruction text')).toBeTruthy();
  });
  it('starts collapsed when initiallyExpanded is false', function () {
    var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_InstructionBox.default, Object.assign({}, defaultProps, {
        initiallyExpanded: false
      }))),
      queryByText = _render0.queryByText;
    expect(queryByText('Test instruction text')).toBeNull();
  });
  it('toggles expansion when header is pressed', function () {
    var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_InstructionBox.default, Object.assign({}, defaultProps, {
        initiallyExpanded: false
      }))),
      getByText = _render1.getByText,
      queryByText = _render1.queryByText;
    expect(queryByText('Test instruction text')).toBeNull();
    _reactNative.fireEvent.press(getByText('Test Instructions'));
    expect(getByText('Test instruction text')).toBeTruthy();
    _reactNative.fireEvent.press(getByText('Test Instructions'));
    expect(queryByText('Test instruction text')).toBeNull();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,