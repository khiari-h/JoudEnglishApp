d9da2ef9d564a137bc27a23583c93f95
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    __esModule: true,
    default: {
      getItem: jest.fn(function () {
        return Promise.resolve(null);
      }),
      setItem: jest.fn(function () {
        return Promise.resolve();
      }),
      removeItem: jest.fn(function () {
        return Promise.resolve();
      }),
      clear: jest.fn(function () {
        return Promise.resolve();
      }),
      getAllKeys: jest.fn(function () {
        return Promise.resolve([]);
      }),
      multiGet: jest.fn(function () {
        return Promise.resolve([]);
      }),
      multiSet: jest.fn(function () {
        return Promise.resolve();
      }),
      multiRemove: jest.fn(function () {
        return Promise.resolve();
      })
    }
  };
});
_getJestObj().mock('react-native', function () {
  var React = require('react');
  var MockComponent = function MockComponent(name) {
    var Component = React.forwardRef(function (props, ref) {
      return React.createElement('div', Object.assign({}, props, {
        ref: ref,
        'data-testid': props.testID
      }));
    });
    Component.displayName = name;
    return Component;
  };
  return {
    View: MockComponent('View'),
    Text: MockComponent('Text'),
    TouchableOpacity: MockComponent('TouchableOpacity'),
    TouchableWithoutFeedback: MockComponent('TouchableWithoutFeedback'),
    ScrollView: MockComponent('ScrollView'),
    KeyboardAvoidingView: MockComponent('KeyboardAvoidingView'),
    TextInput: MockComponent('TextInput'),
    Image: MockComponent('Image'),
    ActivityIndicator: MockComponent('ActivityIndicator'),
    FlatList: MockComponent('FlatList'),
    VirtualizedList: MockComponent('VirtualizedList'),
    SectionList: MockComponent('SectionList'),
    SafeAreaView: MockComponent('SafeAreaView'),
    Modal: function Modal(_ref) {
      var children = _ref.children,
        visible = _ref.visible,
        onRequestClose = _ref.onRequestClose,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      return visible ? React.createElement('div', Object.assign({
        'data-testid': 'rn-modal'
      }, props), children) : null;
    },
    StyleSheet: {
      create: function create(styles) {
        return styles;
      },
      hairlineWidth: 1,
      absoluteFill: {}
    },
    Dimensions: {
      get: jest.fn(function () {
        return {
          width: 375,
          height: 812
        };
      }),
      addEventListener: jest.fn(),
      removeEventListener: jest.fn()
    },
    Platform: {
      OS: 'ios',
      select: jest.fn(function (obj) {
        return obj.ios || obj.default;
      }),
      Version: 14
    },
    Animated: {
      View: MockComponent('AnimatedView'),
      Text: MockComponent('AnimatedText'),
      Image: MockComponent('AnimatedImage'),
      ScrollView: MockComponent('AnimatedScrollView'),
      Value: jest.fn(function () {
        return {
          setValue: jest.fn(),
          addListener: jest.fn(),
          removeListener: jest.fn(),
          removeAllListeners: jest.fn(),
          interpolate: jest.fn(function () {
            return {
              setValue: jest.fn(),
              addListener: jest.fn(),
              removeListener: jest.fn()
            };
          })
        };
      }),
      timing: jest.fn(function () {
        return {
          start: jest.fn(function (callback) {
            return callback && callback();
          }),
          stop: jest.fn()
        };
      }),
      spring: jest.fn(function () {
        return {
          start: jest.fn(function (callback) {
            return callback && callback();
          }),
          stop: jest.fn()
        };
      }),
      sequence: jest.fn(function () {
        return {
          start: jest.fn(function (callback) {
            return callback && callback();
          }),
          stop: jest.fn()
        };
      }),
      parallel: jest.fn(function () {
        return {
          start: jest.fn(function (callback) {
            return callback && callback();
          }),
          stop: jest.fn()
        };
      }),
      createAnimatedComponent: function createAnimatedComponent(Component) {
        return Component;
      }
    },
    AppState: {
      currentState: 'active',
      addEventListener: jest.fn(),
      removeEventListener: jest.fn()
    },
    BackHandler: {
      addEventListener: jest.fn(),
      removeEventListener: jest.fn(),
      exitApp: jest.fn()
    },
    Keyboard: {
      addListener: jest.fn(),
      removeListener: jest.fn(),
      removeAllListeners: jest.fn(),
      dismiss: jest.fn()
    },
    useColorScheme: jest.fn(function () {
      return 'light';
    }),
    NativeModules: {},
    TurboModuleRegistry: {
      get: jest.fn(),
      getEnforcing: jest.fn()
    },
    Settings: {
      get: jest.fn(),
      set: jest.fn(),
      watchKeys: jest.fn(),
      clearWatch: jest.fn()
    },
    PanResponder: {
      create: jest.fn(function () {
        return {
          panHandlers: {}
        };
      })
    }
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn(),
      replace: jest.fn(),
      back: jest.fn(),
      canGoBack: jest.fn(function () {
        return true;
      }),
      setParams: jest.fn()
    },
    useRouter: jest.fn(function () {
      return {
        push: jest.fn(),
        replace: jest.fn(),
        back: jest.fn(),
        canGoBack: jest.fn(function () {
          return true;
        }),
        setParams: jest.fn()
      };
    }),
    useLocalSearchParams: jest.fn(function () {
      return {};
    }),
    useGlobalSearchParams: jest.fn(function () {
      return {};
    }),
    useSegments: jest.fn(function () {
      return [];
    }),
    usePathname: jest.fn(function () {
      return '/';
    }),
    useFocusEffect: jest.fn(function (callback) {
      if (typeof callback === 'function') {
        setTimeout(function () {
          return callback();
        }, 0);
      }
    }),
    Redirect: function Redirect(_ref2) {
      var href = _ref2.href;
      return null;
    },
    Link: function Link(_ref3) {
      var href = _ref3.href,
        children = _ref3.children,
        props = (0, _objectWithoutProperties2.default)(_ref3, _excluded2);
      var React = require('react');
      var _require = require('react-native'),
        TouchableOpacity = _require.TouchableOpacity,
        Text = _require.Text;
      return React.createElement(TouchableOpacity, props, typeof children === 'string' ? React.createElement(Text, {}, children) : children);
    },
    Stack: {
      Screen: function Screen(_ref4) {
        var children = _ref4.children,
          props = (0, _objectWithoutProperties2.default)(_ref4, _excluded3);
        var React = require('react');
        return React.createElement('div', props, children);
      }
    },
    Tabs: {
      Screen: function Screen(_ref5) {
        var children = _ref5.children,
          props = (0, _objectWithoutProperties2.default)(_ref5, _excluded4);
        var React = require('react');
        return React.createElement('div', props, children);
      }
    }
  };
});
_getJestObj().mock('expo-constants', function () {
  return {
    default: {
      statusBarHeight: 20,
      platform: {
        ios: {
          platform: 'ios'
        }
      }
    }
  };
});
_getJestObj().mock('expo-status-bar', function () {
  return {
    StatusBar: 'StatusBar'
  };
});
_getJestObj().mock('expo-av', function () {
  return {
    Audio: {
      Sound: {
        createAsync: jest.fn(function () {
          return Promise.resolve({
            sound: {
              playAsync: jest.fn(),
              stopAsync: jest.fn(),
              unloadAsync: jest.fn()
            }
          });
        })
      },
      setAudioModeAsync: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["children", "visible", "onRequestClose"],
  _excluded2 = ["href", "children"],
  _excluded3 = ["children"],
  _excluded4 = ["children"];
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var originalConsoleError = console.error;
var originalConsoleWarn = console.warn;
beforeEach(function () {
  console.error = function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (typeof args[0] === 'string' && (args[0].includes('Warning: ReactDOM.render is deprecated') || args[0].includes('Warning: An invalid form control') || args[0].includes('componentWillReceiveProps has been renamed'))) {
      return;
    }
    originalConsoleError.call.apply(originalConsoleError, [console].concat(args));
  };
  console.warn = function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    if (typeof args[0] === 'string' && (args[0].includes('componentWillReceiveProps has been renamed') || args[0].includes('AsyncStorage has been extracted'))) {
      return;
    }
    originalConsoleWarn.call.apply(originalConsoleWarn, [console].concat(args));
  };
});
afterEach(function () {
  console.error = originalConsoleError;
  console.warn = originalConsoleWarn;
  jest.clearAllMocks();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,