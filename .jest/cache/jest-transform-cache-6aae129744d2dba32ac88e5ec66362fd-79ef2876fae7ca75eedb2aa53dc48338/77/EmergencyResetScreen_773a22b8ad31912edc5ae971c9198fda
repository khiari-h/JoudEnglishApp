bd6c6db38b5091e1e42818f10d78a8a1
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var Lock = _interopRequireWildcard(require("../../services/lockService"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function cov_1nd4os30up() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\Lock\\EmergencyResetScreen.js";
  var hash = "f84ccf1d82bf8900ea9697b83bb9cf98c336ac12";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\Lock\\EmergencyResetScreen.js",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 29
        },
        end: {
          line: 36,
          column: 1
        }
      },
      "1": {
        start: {
          line: 8,
          column: 32
        },
        end: {
          line: 8,
          column: 44
        }
      },
      "2": {
        start: {
          line: 10,
          column: 18
        },
        end: {
          line: 14,
          column: 23
        }
      },
      "3": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 36
        }
      },
      "4": {
        start: {
          line: 11,
          column: 29
        },
        end: {
          line: 11,
          column: 36
        }
      },
      "5": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 32
        }
      },
      "6": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 13,
          column: 15
        }
      },
      "7": {
        start: {
          line: 16,
          column: 2
        },
        end: {
          line: 35,
          column: 4
        }
      },
      "8": {
        start: {
          line: 39,
          column: 0
        },
        end: {
          line: 41,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 29
          },
          end: {
            line: 7,
            column: 30
          }
        },
        loc: {
          start: {
            line: 7,
            column: 45
          },
          end: {
            line: 36,
            column: 1
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 10,
            column: 30
          },
          end: {
            line: 10,
            column: 31
          }
        },
        loc: {
          start: {
            line: 10,
            column: 42
          },
          end: {
            line: 14,
            column: 3
          }
        },
        line: 10
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 11
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f84ccf1d82bf8900ea9697b83bb9cf98c336ac12"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_1nd4os30up = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1nd4os30up();
cov_1nd4os30up().s[0]++;
var EmergencyResetScreen = function EmergencyResetScreen(_ref) {
  var onDone = _ref.onDone;
  cov_1nd4os30up().f[0]++;
  var _ref2 = (cov_1nd4os30up().s[1]++, (0, _react.useState)('')),
    _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
    confirm = _ref3[0],
    setConfirm = _ref3[1];
  var onReset = (cov_1nd4os30up().s[2]++, (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    cov_1nd4os30up().f[1]++;
    cov_1nd4os30up().s[3]++;
    if (confirm !== 'ERASE') {
      cov_1nd4os30up().b[0][0]++;
      cov_1nd4os30up().s[4]++;
      return;
    } else {
      cov_1nd4os30up().b[0][1]++;
    }
    cov_1nd4os30up().s[5]++;
    yield Lock.emergencyReset();
    cov_1nd4os30up().s[6]++;
    onDone == null || onDone();
  }), [confirm, onDone]));
  cov_1nd4os30up().s[7]++;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: {
      flex: 1,
      alignItems: 'center',
      justifyContent: 'center',
      padding: 24
    },
    testID: "emergency-reset-screen",
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: {
        fontSize: 20,
        fontWeight: '700',
        marginBottom: 12
      },
      children: "R\xE9initialisation d'urgence"
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: {
        color: '#6B7280',
        textAlign: 'center',
        marginBottom: 12
      },
      children: "Cette action efface toutes les donn\xE9es locales (verrou, pr\xE9f\xE9rences, progression)."
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: {
        color: '#DC2626',
        marginBottom: 8
      },
      children: "Tape \"ERASE\" pour confirmer"
    }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
      value: confirm,
      onChangeText: setConfirm,
      placeholder: "ERASE",
      autoCapitalize: "characters",
      style: {
        width: '80%',
        borderWidth: 1,
        borderColor: '#E5E7EB',
        borderRadius: 8,
        padding: 12,
        marginBottom: 8
      },
      testID: "reset-confirm-input"
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      testID: "reset-confirm-button",
      onPress: onReset,
      style: {
        backgroundColor: '#DC2626',
        padding: 12,
        borderRadius: 8
      },
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: {
          color: 'white',
          fontWeight: '700'
        },
        children: "Effacer"
      })
    })]
  });
};
cov_1nd4os30up().s[8]++;
EmergencyResetScreen.propTypes = {
  onDone: _propTypes.default.func.isRequired
};
var _default = exports.default = EmergencyResetScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,