2104cfc710be3b17767ed70bf1076570
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _expoLinearGradient = require("expo-linear-gradient");
var _expoRouter = require("expo-router");
var _ThemeContext = require("../../contexts/ThemeContext");
var _ProgressContext = require("../../contexts/ProgressContext");
var _CurrentLevelContext = require("../../contexts/CurrentLevelContext");
var _useRealTimeProgress = _interopRequireDefault(require("../../hooks/useRealTimeProgress"));
var _useDashboardLevel = require("./hooks/useDashboardLevel");
var _useDashboardState = require("./hooks/useDashboardState");
var _useLastActivity = _interopRequireDefault(require("../../hooks/useLastActivity"));
var _Container = _interopRequireWildcard(require("../../components/layout/Container"));
var _ModernHeader = _interopRequireDefault(require("./components/ModernHeader"));
var _HeroContinueSection = _interopRequireDefault(require("./components/HeroContinueSection"));
var _QuickActions = _interopRequireDefault(require("./components/QuickActions"));
var _SimpleMetrics = _interopRequireDefault(require("./components/SimpleMetrics"));
var _LearningProgress = _interopRequireDefault(require("./components/LearningProgress"));
var _RevisionOrchestrator = _interopRequireDefault(require("../VocabularyRevision/RevisionOrchestrator"));
var _style = _interopRequireDefault(require("./style"));
var _useDashboardRefresh = _interopRequireDefault(require("./hooks/useDashboardRefresh"));
var _useDashboardNavigation = _interopRequireDefault(require("./hooks/useDashboardNavigation"));
var _useDashboardSelectors = _interopRequireDefault(require("./hooks/useDashboardSelectors"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function cov_1t2aap5rkf() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\Dashboard\\index.js";
  var hash = "7e20a432c000d15c8d9b303c36e189a2fb8a2038";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\Dashboard\\index.js",
    statementMap: {
      "0": {
        start: {
          line: 40,
          column: 18
        },
        end: {
          line: 185,
          column: 1
        }
      },
      "1": {
        start: {
          line: 46,
          column: 23
        },
        end: {
          line: 46,
          column: 47
        }
      },
      "2": {
        start: {
          line: 47,
          column: 23
        },
        end: {
          line: 47,
          column: 40
        }
      },
      "3": {
        start: {
          line: 50,
          column: 57
        },
        end: {
          line: 50,
          column: 78
        }
      },
      "4": {
        start: {
          line: 52,
          column: 17
        },
        end: {
          line: 58,
          column: 3
        }
      },
      "5": {
        start: {
          line: 61,
          column: 64
        },
        end: {
          line: 63,
          column: 4
        }
      },
      "6": {
        start: {
          line: 64,
          column: 30
        },
        end: {
          line: 64,
          column: 47
        }
      },
      "7": {
        start: {
          line: 66,
          column: 81
        },
        end: {
          line: 66,
          column: 98
        }
      },
      "8": {
        start: {
          line: 68,
          column: 55
        },
        end: {
          line: 68,
          column: 88
        }
      },
      "9": {
        start: {
          line: 69,
          column: 36
        },
        end: {
          line: 69,
          column: 95
        }
      },
      "10": {
        start: {
          line: 71,
          column: 2
        },
        end: {
          line: 75,
          column: 4
        }
      },
      "11": {
        start: {
          line: 73,
          column: 6
        },
        end: {
          line: 73,
          column: 18
        }
      },
      "12": {
        start: {
          line: 78,
          column: 73
        },
        end: {
          line: 81,
          column: 4
        }
      },
      "13": {
        start: {
          line: 85,
          column: 40
        },
        end: {
          line: 85,
          column: 97
        }
      },
      "14": {
        start: {
          line: 91,
          column: 29
        },
        end: {
          line: 94,
          column: 3
        }
      },
      "15": {
        start: {
          line: 98,
          column: 2
        },
        end: {
          line: 184,
          column: 4
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 40,
            column: 18
          },
          end: {
            line: 40,
            column: 19
          }
        },
        loc: {
          start: {
            line: 40,
            column: 24
          },
          end: {
            line: 185,
            column: 1
          }
        },
        line: 40
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 72,
            column: 16
          },
          end: {
            line: 72,
            column: 17
          }
        },
        loc: {
          start: {
            line: 72,
            column: 22
          },
          end: {
            line: 74,
            column: 5
          }
        },
        line: 72
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 52,
            column: 17
          },
          end: {
            line: 58,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 52,
            column: 17
          },
          end: {
            line: 52,
            column: 37
          }
        }, {
          start: {
            line: 52,
            column: 41
          },
          end: {
            line: 58,
            column: 3
          }
        }],
        line: 52
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7e20a432c000d15c8d9b303c36e189a2fb8a2038"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_1t2aap5rkf = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1t2aap5rkf();
cov_1t2aap5rkf().s[0]++;
var Dashboard = function Dashboard() {
  cov_1t2aap5rkf().f[0]++;
  var themeContext = (cov_1t2aap5rkf().s[1]++, (0, _react.useContext)(_ThemeContext.ThemeContext));
  var progressData = (cov_1t2aap5rkf().s[2]++, (0, _ProgressContext.useProgressRead)());
  var _ref = (cov_1t2aap5rkf().s[3]++, (0, _useRealTimeProgress.default)()),
    getLevelProgress = _ref.getLevelProgress,
    refreshProgress = _ref.refresh;
  var colors = (cov_1t2aap5rkf().s[4]++, (cov_1t2aap5rkf().b[0][0]++, themeContext == null ? void 0 : themeContext.colors) || (cov_1t2aap5rkf().b[0][1]++, {
    background: "#F8FAFC",
    primary: "#3B82F6",
    surface: "#FFFFFF",
    text: "#1F2937",
    textSecondary: "#6B7280"
  }));
  var _ref2 = (cov_1t2aap5rkf().s[5]++, (0, _useDashboardLevel.useDashboardLevel)({
      progress: progressData.progress
    })),
    currentLevel = _ref2.currentLevel,
    handleChangeActiveLevel = _ref2.handleChangeActiveLevel,
    levelColor = _ref2.levelColor;
  var _ref3 = (cov_1t2aap5rkf().s[6]++, (0, _CurrentLevelContext.useCurrentLevel)()),
    setCurrentLevel = _ref3.setCurrentLevel;
  var _ref4 = (cov_1t2aap5rkf().s[7]++, (0, _useLastActivity.default)()),
    lastActivity = _ref4.lastActivity,
    isActivityLoading = _ref4.isLoading,
    reloadActivity = _ref4.reload;
  var _ref5 = (cov_1t2aap5rkf().s[8]++, (0, _useDashboardState.useDashboardState)(reloadActivity)),
    refreshing = _ref5.refreshing,
    originalOnRefresh = _ref5.onRefresh;
  var _ref6 = (cov_1t2aap5rkf().s[9]++, (0, _useDashboardRefresh.default)({
      originalOnRefresh: originalOnRefresh,
      refreshProgress: refreshProgress
    })),
    refreshKey = _ref6.refreshKey,
    onRefresh = _ref6.onRefresh;
  cov_1t2aap5rkf().s[10]++;
  (0, _expoRouter.useFocusEffect)((0, _react.useCallback)(function () {
    cov_1t2aap5rkf().f[1]++;
    cov_1t2aap5rkf().s[11]++;
    onRefresh();
  }, [onRefresh]));
  var _ref7 = (cov_1t2aap5rkf().s[12]++, (0, _useDashboardNavigation.default)({
      setCurrentLevel: setCurrentLevel,
      handleChangeActiveLevel: handleChangeActiveLevel
    })),
    handleContinue = _ref7.handleContinue,
    handleChangeLevelVisual = _ref7.handleChangeLevelVisual,
    handleLevelSelect = _ref7.handleLevelSelect;
  var _ref8 = (cov_1t2aap5rkf().s[13]++, (0, _useDashboardSelectors.default)({
      getLevelProgress: getLevelProgress,
      currentLevel: currentLevel
    })),
    allLevels = _ref8.allLevels,
    globalProgress = _ref8.globalProgress;
  var backgroundGradient = (cov_1t2aap5rkf().s[14]++, {
    colors: [`${levelColor}05`, colors.background, `${levelColor}08`],
    locations: [0, 0.6, 1]
  });
  cov_1t2aap5rkf().s[15]++;
  return (0, _jsxRuntime.jsx)(_Container.default, {
    safeArea: true,
    safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.NO_BOTTOM,
    withScrollView: false,
    backgroundColor: "transparent",
    statusBarStyle: "light-content",
    withPadding: false,
    children: (0, _jsxRuntime.jsxs)(_expoLinearGradient.LinearGradient, {
      colors: backgroundGradient.colors,
      locations: backgroundGradient.locations,
      start: {
        x: 0,
        y: 0
      },
      end: {
        x: 0,
        y: 1
      },
      style: _style.default.container,
      children: [(0, _jsxRuntime.jsx)(_ModernHeader.default, {
        level: currentLevel,
        levelColor: levelColor
      }), (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
        style: _style.default.scrollView,
        contentContainerStyle: _style.default.scrollContent,
        showsVerticalScrollIndicator: false,
        refreshControl: (0, _jsxRuntime.jsx)(_reactNative.RefreshControl, {
          refreshing: refreshing,
          onRefresh: onRefresh,
          colors: [levelColor],
          tintColor: levelColor
        }),
        children: [(0, _jsxRuntime.jsx)(_HeroContinueSection.default, {
          lastActivity: lastActivity,
          onPress: handleContinue,
          accentColor: levelColor,
          isLoading: isActivityLoading,
          accessibilityLabel: "Continuer l'activit\xE9",
          accessibilityRole: "button"
        }, `continue-${refreshKey}`), (0, _jsxRuntime.jsx)(_QuickActions.default, {
          currentLevel: currentLevel,
          progressContext: progressData,
          accentColor: levelColor
        }, `actions-${refreshKey}`), (0, _jsxRuntime.jsx)(_SimpleMetrics.default, {
          accentColor: levelColor,
          refreshKey: refreshKey
        }, `metrics-${refreshKey}`), (0, _jsxRuntime.jsx)(_LearningProgress.default, {
          globalProgress: globalProgress,
          levels: allLevels,
          currentLevel: currentLevel,
          onSelectLevel: handleLevelSelect,
          onChangeLevelVisual: handleChangeLevelVisual,
          primaryColor: levelColor,
          accessibilityLabel: "Progression g\xE9n\xE9rale"
        }, `progress-${refreshKey}`), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: _style.default.bottomSpacer
        })]
      }), (0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {
        currentLevel: currentLevel,
        refreshKey: refreshKey
      }, `revision-${refreshKey}`)]
    })
  });
};
var _default = exports.default = Dashboard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,