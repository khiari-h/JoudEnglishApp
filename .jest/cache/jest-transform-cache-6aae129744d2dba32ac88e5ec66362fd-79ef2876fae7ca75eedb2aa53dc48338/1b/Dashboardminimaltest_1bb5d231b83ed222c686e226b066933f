fcc8a6e4a5c783afa842927f2a8fa7d2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
describe('Dashboard - Tests minimalistes', function () {
  it('devrait pouvoir importer le composant Dashboard', function () {
    expect(function () {
      require('../../../src/screens/Dashboard');
    }).not.toThrow();
  });
  it('devrait avoir tous les sous-composants nécessaires', function () {
    var components = ['ModernHeader', 'HeroContinueSection', 'QuickActions', 'SimpleMetrics', 'LearningProgress'];
    components.forEach(function (componentName) {
      expect(function () {
        require(`../../../src/screens/Dashboard/components/${componentName}`);
      }).not.toThrow();
    });
  });
  it('devrait avoir tous les hooks nécessaires', function () {
    var hooks = ['useDashboardLevel', 'useDashboardState'];
    hooks.forEach(function (hookName) {
      expect(function () {
        require(`../../../src/screens/Dashboard/hooks/${hookName}`);
      }).not.toThrow();
    });
  });
  it('devrait pouvoir accéder aux constantes', function () {
    expect(function () {
      var constants = require('../../../src/utils/constants');
      expect(constants).toBeDefined();
      expect(typeof constants).toBe('object');
    }).not.toThrow();
  });
  it('devrait pouvoir accéder aux contextes', function () {
    var contexts = ['ThemeContext', 'ProgressContext', 'CurrentLevelContext'];
    contexts.forEach(function (contextName) {
      expect(function () {
        require(`../../../src/contexts/${contextName}`);
      }).not.toThrow();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsImRlc2NyaWJlIiwiaXQiLCJleHBlY3QiLCJub3QiLCJ0b1Rocm93IiwiY29tcG9uZW50cyIsImZvckVhY2giLCJjb21wb25lbnROYW1lIiwiaG9va3MiLCJob29rTmFtZSIsImNvbnN0YW50cyIsInRvQmVEZWZpbmVkIiwidG9CZSIsImNvbnRleHRzIiwiY29udGV4dE5hbWUiXSwic291cmNlcyI6WyJEYXNoYm9hcmQubWluaW1hbC50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIF9fdGVzdHNfXy9zY3JlZW5zL0Rhc2hib2FyZC9EYXNoYm9hcmQubWluaW1hbC50ZXN0LmpzXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuXG4vLyBNb2NrIG1pbmltYWwgLSBvbiB0ZXN0ZSBqdXN0ZSBxdWUgbGUgY29tcG9zYW50IHBldXQgw6p0cmUgaW1wb3J0w6kgZXQgcmVuZHVcbmRlc2NyaWJlKCdEYXNoYm9hcmQgLSBUZXN0cyBtaW5pbWFsaXN0ZXMnLCAoKSA9PiB7XG4gIFxuICAvLyBUZXN0IGQnaW1wb3J0IC0gdsOpcmlmaWUgcXVlIGxlIG1vZHVsZSBwZXV0IMOqdHJlIGNoYXJnw6lcbiAgaXQoJ2RldnJhaXQgcG91dm9pciBpbXBvcnRlciBsZSBjb21wb3NhbnQgRGFzaGJvYXJkJywgKCkgPT4ge1xuICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICByZXF1aXJlKCcuLi8uLi8uLi9zcmMvc2NyZWVucy9EYXNoYm9hcmQnKTtcbiAgICB9KS5ub3QudG9UaHJvdygpO1xuICB9KTtcblxuICAvLyBUZXN0IGRlIHN0cnVjdHVyZSAtIHbDqXJpZmllIHF1ZSBsZXMgc291cy1jb21wb3NhbnRzIGV4aXN0ZW50XG4gIGl0KCdkZXZyYWl0IGF2b2lyIHRvdXMgbGVzIHNvdXMtY29tcG9zYW50cyBuw6ljZXNzYWlyZXMnLCAoKSA9PiB7XG4gICAgY29uc3QgY29tcG9uZW50cyA9IFtcbiAgICAgICdNb2Rlcm5IZWFkZXInLFxuICAgICAgJ0hlcm9Db250aW51ZVNlY3Rpb24nLCBcbiAgICAgICdRdWlja0FjdGlvbnMnLFxuICAgICAgJ1NpbXBsZU1ldHJpY3MnLFxuICAgICAgJ0xlYXJuaW5nUHJvZ3Jlc3MnXG4gICAgXTtcblxuICAgIGNvbXBvbmVudHMuZm9yRWFjaChjb21wb25lbnROYW1lID0+IHtcbiAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgIHJlcXVpcmUoYC4uLy4uLy4uL3NyYy9zY3JlZW5zL0Rhc2hib2FyZC9jb21wb25lbnRzLyR7Y29tcG9uZW50TmFtZX1gKTtcbiAgICAgIH0pLm5vdC50b1Rocm93KCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIFRlc3QgZGVzIGhvb2tzIC0gdsOpcmlmaWUgcXVlIGxlcyBob29rcyBwZXV2ZW50IMOqdHJlIGltcG9ydMOpc1xuICBpdCgnZGV2cmFpdCBhdm9pciB0b3VzIGxlcyBob29rcyBuw6ljZXNzYWlyZXMnLCAoKSA9PiB7XG4gICAgY29uc3QgaG9va3MgPSBbXG4gICAgICAndXNlRGFzaGJvYXJkTGV2ZWwnLFxuICAgICAgJ3VzZURhc2hib2FyZFN0YXRlJ1xuICAgIF07XG5cbiAgICBob29rcy5mb3JFYWNoKGhvb2tOYW1lID0+IHtcbiAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgIHJlcXVpcmUoYC4uLy4uLy4uL3NyYy9zY3JlZW5zL0Rhc2hib2FyZC9ob29rcy8ke2hvb2tOYW1lfWApO1xuICAgICAgfSkubm90LnRvVGhyb3coKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gVGVzdCBkZSBjb25zdGFudGVzIC0gdsOpcmlmaWUgcXVlIGxlcyBjb25zdGFudGVzIGV4aXN0ZW50XG4gIGl0KCdkZXZyYWl0IHBvdXZvaXIgYWNjw6lkZXIgYXV4IGNvbnN0YW50ZXMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KCgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoJy4uLy4uLy4uL3NyYy91dGlscy9jb25zdGFudHMnKTtcbiAgICAgIGV4cGVjdChjb25zdGFudHMpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QodHlwZW9mIGNvbnN0YW50cykudG9CZSgnb2JqZWN0Jyk7XG4gICAgfSkubm90LnRvVGhyb3coKTtcbiAgfSk7XG5cbiAgLy8gVGVzdCBkZSBjb250ZXh0ZXMgLSB2w6lyaWZpZSBxdWUgbGVzIGNvbnRleHRlcyBzb250IGRpc3BvbmlibGVzXG4gIGl0KCdkZXZyYWl0IHBvdXZvaXIgYWNjw6lkZXIgYXV4IGNvbnRleHRlcycsICgpID0+IHtcbiAgICBjb25zdCBjb250ZXh0cyA9IFtcbiAgICAgICdUaGVtZUNvbnRleHQnLFxuICAgICAgJ1Byb2dyZXNzQ29udGV4dCcsIFxuICAgICAgJ0N1cnJlbnRMZXZlbENvbnRleHQnXG4gICAgXTtcblxuICAgIGNvbnRleHRzLmZvckVhY2goY29udGV4dE5hbWUgPT4ge1xuICAgICAgZXhwZWN0KCgpID0+IHtcbiAgICAgICAgcmVxdWlyZShgLi4vLi4vLi4vc3JjL2NvbnRleHRzLyR7Y29udGV4dE5hbWV9YCk7XG4gICAgICB9KS5ub3QudG9UaHJvdygpO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJtYXBwaW5ncyI6IjtBQUNBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUdBRSxRQUFRLENBQUMsZ0NBQWdDLEVBQUUsWUFBTTtFQUcvQ0MsRUFBRSxDQUFDLGlEQUFpRCxFQUFFLFlBQU07SUFDMURDLE1BQU0sQ0FBQyxZQUFNO01BQ1hKLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQztJQUMzQyxDQUFDLENBQUMsQ0FBQ0ssR0FBRyxDQUFDQyxPQUFPLENBQUMsQ0FBQztFQUNsQixDQUFDLENBQUM7RUFHRkgsRUFBRSxDQUFDLG9EQUFvRCxFQUFFLFlBQU07SUFDN0QsSUFBTUksVUFBVSxHQUFHLENBQ2pCLGNBQWMsRUFDZCxxQkFBcUIsRUFDckIsY0FBYyxFQUNkLGVBQWUsRUFDZixrQkFBa0IsQ0FDbkI7SUFFREEsVUFBVSxDQUFDQyxPQUFPLENBQUMsVUFBQUMsYUFBYSxFQUFJO01BQ2xDTCxNQUFNLENBQUMsWUFBTTtRQUNYSixPQUFPLENBQUMsNkNBQTZDUyxhQUFhLEVBQUUsQ0FBQztNQUN2RSxDQUFDLENBQUMsQ0FBQ0osR0FBRyxDQUFDQyxPQUFPLENBQUMsQ0FBQztJQUNsQixDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7RUFHRkgsRUFBRSxDQUFDLDBDQUEwQyxFQUFFLFlBQU07SUFDbkQsSUFBTU8sS0FBSyxHQUFHLENBQ1osbUJBQW1CLEVBQ25CLG1CQUFtQixDQUNwQjtJQUVEQSxLQUFLLENBQUNGLE9BQU8sQ0FBQyxVQUFBRyxRQUFRLEVBQUk7TUFDeEJQLE1BQU0sQ0FBQyxZQUFNO1FBQ1hKLE9BQU8sQ0FBQyx3Q0FBd0NXLFFBQVEsRUFBRSxDQUFDO01BQzdELENBQUMsQ0FBQyxDQUFDTixHQUFHLENBQUNDLE9BQU8sQ0FBQyxDQUFDO0lBQ2xCLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztFQUdGSCxFQUFFLENBQUMsd0NBQXdDLEVBQUUsWUFBTTtJQUNqREMsTUFBTSxDQUFDLFlBQU07TUFDWCxJQUFNUSxTQUFTLEdBQUdaLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQztNQUN6REksTUFBTSxDQUFDUSxTQUFTLENBQUMsQ0FBQ0MsV0FBVyxDQUFDLENBQUM7TUFDL0JULE1BQU0sQ0FBQyxPQUFPUSxTQUFTLENBQUMsQ0FBQ0UsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN6QyxDQUFDLENBQUMsQ0FBQ1QsR0FBRyxDQUFDQyxPQUFPLENBQUMsQ0FBQztFQUNsQixDQUFDLENBQUM7RUFHRkgsRUFBRSxDQUFDLHVDQUF1QyxFQUFFLFlBQU07SUFDaEQsSUFBTVksUUFBUSxHQUFHLENBQ2YsY0FBYyxFQUNkLGlCQUFpQixFQUNqQixxQkFBcUIsQ0FDdEI7SUFFREEsUUFBUSxDQUFDUCxPQUFPLENBQUMsVUFBQVEsV0FBVyxFQUFJO01BQzlCWixNQUFNLENBQUMsWUFBTTtRQUNYSixPQUFPLENBQUMseUJBQXlCZ0IsV0FBVyxFQUFFLENBQUM7TUFDakQsQ0FBQyxDQUFDLENBQUNYLEdBQUcsQ0FBQ0MsT0FBTyxDQUFDLENBQUM7SUFDbEIsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119