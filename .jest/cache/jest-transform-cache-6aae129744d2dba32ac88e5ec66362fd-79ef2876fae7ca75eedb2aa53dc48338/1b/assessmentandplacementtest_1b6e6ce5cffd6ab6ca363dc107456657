2163e5bcf0f5b6ce0c245a8068b14d11
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    },
    useRoute: function useRoute() {
      return {
        params: {}
      };
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _layout = _interopRequireDefault(require("../../app/_layout"));
var _AppProvider = _interopRequireDefault(require("../../src/contexts/AppProvider"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Assessment and Placement Integration Test', function () {
  it('should place the user at the correct level based on assessment results', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AppProvider.default, {
        children: (0, _jsxRuntime.jsx)(App, {})
      })),
      getByText = _render.getByText,
      findByText = _render.findByText;
    _reactNative.fireEvent.press(getByText(/Commencer le test de niveau/i));
    _reactNative.fireEvent.press(getByText(/Réponse A/i));
    _reactNative.fireEvent.press(getByText(/Réponse B/i));
    _reactNative.fireEvent.press(getByText(/Terminer le test/i));
    var recommendedLevel = yield findByText(/Niveau recommandé : B1/i);
    expect(recommendedLevel).toBeTruthy();
    _reactNative.fireEvent.press(getByText(/Continuer/i));
    var levelB1 = yield findByText(/Niveau B1/i);
    expect(levelB1).toBeTruthy();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsInVzZU5hdmlnYXRpb24iLCJuYXZpZ2F0ZSIsImZuIiwiZ29CYWNrIiwidXNlUm91dGUiLCJwYXJhbXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9sYXlvdXQiLCJfQXBwUHJvdmlkZXIiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwiZGVzY3JpYmUiLCJpdCIsImRlZmF1bHQiLCJfcmVuZGVyIiwicmVuZGVyIiwianN4IiwiY2hpbGRyZW4iLCJBcHAiLCJnZXRCeVRleHQiLCJmaW5kQnlUZXh0IiwiZmlyZUV2ZW50IiwicHJlc3MiLCJyZWNvbW1lbmRlZExldmVsIiwiZXhwZWN0IiwidG9CZVRydXRoeSIsImxldmVsQjEiXSwic291cmNlcyI6WyJhc3Nlc3NtZW50LWFuZC1wbGFjZW1lbnQudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQsIHdhaXRGb3IgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgUm9vdExheW91dCBmcm9tICcuLi8uLi9hcHAvX2xheW91dCc7ICAvLyBhdSBsaWV1IGRlIEFwcFxuaW1wb3J0IEFwcFByb3ZpZGVyIGZyb20gJy4uLy4uL3NyYy9jb250ZXh0cy9BcHBQcm92aWRlcic7XG5cblxuamVzdC5tb2NrKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnLCAoKSA9PiAoe1xuICAuLi5qZXN0LnJlcXVpcmVBY3R1YWwoJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScpLFxuICB1c2VOYXZpZ2F0aW9uOiAoKSA9PiAoe1xuICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXG4gICAgZ29CYWNrOiBqZXN0LmZuKCksXG4gIH0pLFxuICB1c2VSb3V0ZTogKCkgPT4gKHtcbiAgICBwYXJhbXM6IHt9LFxuICB9KSxcbn0pKTtcblxuZGVzY3JpYmUoJ0Fzc2Vzc21lbnQgYW5kIFBsYWNlbWVudCBJbnRlZ3JhdGlvbiBUZXN0JywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIHBsYWNlIHRoZSB1c2VyIGF0IHRoZSBjb3JyZWN0IGxldmVsIGJhc2VkIG9uIGFzc2Vzc21lbnQgcmVzdWx0cycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCwgZmluZEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgPEFwcFByb3ZpZGVyPlxuICAgICAgICAgIDxBcHAgLz5cbiAgICAgIDwvQXBwUHJvdmlkZXI+XG4gICAgKTtcblxuICAgIC8vIDEuIETDqW1hcnJlciBsZSB0ZXN0IGRlIG5pdmVhdVxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoL0NvbW1lbmNlciBsZSB0ZXN0IGRlIG5pdmVhdS9pKSk7XG5cbiAgICAvLyAyLiBTaW11bGVyIGxlcyByw6lwb25zZXMgYXUgdGVzdFxuICAgIC8vIChDZXR0ZSBwYXJ0aWUgZMOpcGVuZCBkZSBsYSBzdHJ1Y3R1cmUgZGUgdm90cmUgdGVzdCBkZSBuaXZlYXUpXG4gICAgLy8gRXhlbXBsZSA6IHLDqXBvbmRyZSBjb3JyZWN0ZW1lbnQgw6AgZGVzIHF1ZXN0aW9ucyBwb3VyIHVuIG5pdmVhdSBCMVxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoL1LDqXBvbnNlIEEvaSkpOyAvLyBTaW11bGV6IGxlcyByw6lwb25zZXNcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KC9Sw6lwb25zZSBCL2kpKTtcbiAgICAvLyAuLi4gY29udGludWV6IHBvdXIgdG91dGVzIGxlcyBxdWVzdGlvbnNcblxuICAgIC8vIDMuIFRlcm1pbmVyIGxlIHRlc3RcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KC9UZXJtaW5lciBsZSB0ZXN0L2kpKTtcblxuICAgIC8vIDQuIFbDqXJpZmllciBxdWUgbCd1dGlsaXNhdGV1ciBlc3QgcmVkaXJpZ8OpIHZlcnMgbGUgYm9uIG5pdmVhdVxuICAgIGNvbnN0IHJlY29tbWVuZGVkTGV2ZWwgPSBhd2FpdCBmaW5kQnlUZXh0KC9OaXZlYXUgcmVjb21tYW5kw6kgOiBCMS9pKTtcbiAgICBleHBlY3QocmVjb21tZW5kZWRMZXZlbCkudG9CZVRydXRoeSgpO1xuXG4gICAgLy8gNS4gTmF2aWd1ZXIgdmVycyBsYSBzw6lsZWN0aW9uIGRlIG5pdmVhdSBwb3VyIGNvbmZpcm1lclxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoL0NvbnRpbnVlci9pKSk7XG4gICAgY29uc3QgbGV2ZWxCMSA9IGF3YWl0IGZpbmRCeVRleHQoL05pdmVhdSBCMS9pKTtcbiAgICBleHBlY3QobGV2ZWxCMSkudG9CZVRydXRoeSgpO1xuICB9KTtcbn0pOyJdLCJtYXBwaW5ncyI6IkFBTUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDBCQUEwQixFQUFFO0VBQUEsT0FBQUMsTUFBQSxDQUFBQyxNQUFBLEtBQ2pDQyxJQUFJLENBQUNDLGFBQWEsQ0FBQywwQkFBMEIsQ0FBQztJQUNqREMsYUFBYSxFQUFFLFNBQWZBLGFBQWFBLENBQUE7TUFBQSxPQUFTO1FBQ3BCQyxRQUFRLEVBQUVILElBQUksQ0FBQ0ksRUFBRSxDQUFDLENBQUM7UUFDbkJDLE1BQU0sRUFBRUwsSUFBSSxDQUFDSSxFQUFFLENBQUM7TUFDbEIsQ0FBQztJQUFBLENBQUM7SUFDRkUsUUFBUSxFQUFFLFNBQVZBLFFBQVFBLENBQUE7TUFBQSxPQUFTO1FBQ2ZDLE1BQU0sRUFBRSxDQUFDO01BQ1gsQ0FBQztJQUFBO0VBQUM7QUFBQSxDQUNGLENBQUM7QUFBQyxJQUFBQyxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsa0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQWZKLElBQUFFLE1BQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLFlBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLE9BQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFLLFlBQUEsR0FBQU4sc0JBQUEsQ0FBQUMsT0FBQTtBQUF5RCxJQUFBTSxXQUFBLEdBQUFOLE9BQUE7QUFBQSxTQUFBYixZQUFBO0VBQUEsSUFBQW9CLFFBQUEsR0FBQVAsT0FBQTtJQUFBVCxJQUFBLEdBQUFnQixRQUFBLENBQUFoQixJQUFBO0VBQUFKLFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFJLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQWN6RGlCLFFBQVEsQ0FBQywyQ0FBMkMsRUFBRSxZQUFNO0VBQzFEQyxFQUFFLENBQUMsd0VBQXdFLE1BQUFSLGtCQUFBLENBQUFTLE9BQUEsRUFBRSxhQUFZO0lBQ3ZGLElBQUFDLE9BQUEsR0FBa0MsSUFBQUMsbUJBQU0sRUFDdEMsSUFBQU4sV0FBQSxDQUFBTyxHQUFBLEVBQUNSLFlBQUEsQ0FBQUssT0FBVztRQUFBSSxRQUFBLEVBQ1IsSUFBQVIsV0FBQSxDQUFBTyxHQUFBLEVBQUNFLEdBQUcsSUFBRTtNQUFDLENBQ0UsQ0FDZixDQUFDO01BSk9DLFNBQVMsR0FBQUwsT0FBQSxDQUFUSyxTQUFTO01BQUVDLFVBQVUsR0FBQU4sT0FBQSxDQUFWTSxVQUFVO0lBTzdCQyxzQkFBUyxDQUFDQyxLQUFLLENBQUNILFNBQVMsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0lBSzFERSxzQkFBUyxDQUFDQyxLQUFLLENBQUNILFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN4Q0Usc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDSCxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7SUFJeENFLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0gsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFHL0MsSUFBTUksZ0JBQWdCLFNBQVNILFVBQVUsQ0FBQyx5QkFBeUIsQ0FBQztJQUNwRUksTUFBTSxDQUFDRCxnQkFBZ0IsQ0FBQyxDQUFDRSxVQUFVLENBQUMsQ0FBQztJQUdyQ0osc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDSCxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDeEMsSUFBTU8sT0FBTyxTQUFTTixVQUFVLENBQUMsWUFBWSxDQUFDO0lBQzlDSSxNQUFNLENBQUNFLE9BQU8sQ0FBQyxDQUFDRCxVQUFVLENBQUMsQ0FBQztFQUM5QixDQUFDLEVBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=