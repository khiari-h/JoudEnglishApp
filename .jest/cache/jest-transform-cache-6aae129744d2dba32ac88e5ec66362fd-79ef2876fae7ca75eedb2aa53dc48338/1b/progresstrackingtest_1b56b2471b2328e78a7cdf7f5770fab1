9756cce481f811ab54bfd8f1d9a66745
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn(),
      back: jest.fn()
    },
    useLocalSearchParams: function useLocalSearchParams() {
      return {
        level: '1'
      };
    }
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useFocusEffect: jest.fn(function (callback) {
      return callback();
    })
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _Dashboard = _interopRequireDefault(require("../../src/screens/Dashboard"));
var _LevelSelection = _interopRequireDefault(require("../../src/screens/LevelSelection"));
var _vocabulary = _interopRequireDefault(require("../../src/screens/exercises/vocabulary"));
var _useRealTimeProgress = _interopRequireDefault(require("../../src/hooks/useRealTimeProgress"));
var _useLastActivity = _interopRequireDefault(require("../../src/hooks/useLastActivity"));
var _ThemeContext = require("../../src/contexts/ThemeContext");
var _ProgressContext = require("../../src/contexts/ProgressContext");
var _CurrentLevelContext = require("../../src/contexts/CurrentLevelContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockTheme = {
  colors: {
    background: '#F8FAFC',
    primary: '#3B82F6',
    surface: '#FFFFFF',
    text: '#1F2937',
    textSecondary: '#6B7280'
  }
};
var TestWrapper = function TestWrapper(_ref) {
  var children = _ref.children;
  return (0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
    value: mockTheme,
    children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(_CurrentLevelContext.CurrentLevelProvider, {
        children: children
      })
    })
  });
};
describe('Progress Tracking Integration Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _asyncStorage.default.getItem.mockResolvedValue(null);
    _asyncStorage.default.setItem.mockResolvedValue();
  });
  describe('Progress Persistence', function () {
    it('should save progress data correctly', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_data_1') {
          return Promise.resolve(JSON.stringify([{
            word: 'hello',
            translation: 'bonjour'
          }, {
            word: 'world',
            translation: 'monde'
          }]));
        }
        return Promise.resolve(null);
      });
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_vocabulary.default, {})
        })),
        getByTestId = _render.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('vocabulary-word')).toBeTruthy();
      });
      var revealButton = getByTestId('reveal-translation-button');
      var nextButton = getByTestId('next-word-button');
      _reactNative.fireEvent.press(revealButton);
      _reactNative.fireEvent.press(nextButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('progress_vocabulary_1', expect.stringContaining('"wordsLearned":1'));
      });
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('lastActivity', expect.stringContaining('"type":"vocabulary"'));
    }));
    it('should restore progress data correctly', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'progress_vocabulary_1') {
          return Promise.resolve(JSON.stringify({
            wordsLearned: 5,
            totalWords: 10,
            percentage: 50,
            lastUpdated: Date.now()
          }));
        }
        if (key === 'progress_spelling_1') {
          return Promise.resolve(JSON.stringify({
            wordsLearned: 3,
            totalWords: 8,
            percentage: 37.5,
            lastUpdated: Date.now()
          }));
        }
        if (key === 'lastActivity') {
          return Promise.resolve(JSON.stringify({
            type: 'vocabulary',
            level: '1',
            timestamp: Date.now() - 3600000,
            metadata: {
              word: 5,
              totalWords: 10
            }
          }));
        }
        return Promise.resolve(null);
      });
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
        })),
        getByTestId = _render2.getByTestId,
        queryByTestId = _render2.queryByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByTestId('dashboard-container')).toBeTruthy();
      });
      expect(queryByTestId('continue-activity-button')).toBeTruthy();
    }));
    it('should calculate level progress correctly', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        var progressData = {
          'progress_vocabulary_1': {
            percentage: 80
          },
          'progress_spelling_1': {
            percentage: 60
          },
          'progress_reading_1': {
            percentage: 40
          },
          'progress_grammar_1': {
            percentage: 70
          }
        };
        if (progressData[key]) {
          return Promise.resolve(JSON.stringify(progressData[key]));
        }
        return Promise.resolve(null);
      });
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_LevelSelection.default, {})
        })),
        getByTestId = _render3.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('level-selection-container')).toBeTruthy();
      });
      var level1Card = getByTestId('level-1');
      expect(level1Card).toBeTruthy();
    }));
  });
  describe('Real-time Progress Updates', function () {
    it('should update progress in real-time during exercises', (0, _asyncToGenerator2.default)(function* () {
      var progressCallbacks = [];
      jest.doMock('../../src/hooks/useRealTimeProgress', function () {
        return {
          __esModule: true,
          default: function _default() {
            return {
              getLevelProgress: jest.fn(function () {
                return 25;
              }),
              getExerciseProgress: jest.fn(function () {
                return 50;
              }),
              hasProgress: jest.fn(function () {
                return true;
              }),
              refresh: jest.fn(),
              subscribe: jest.fn(function (callback) {
                progressCallbacks.push(callback);
                return function () {
                  progressCallbacks = progressCallbacks.filter(function (cb) {
                    return cb !== callback;
                  });
                };
              })
            };
          }
        };
      });
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_data_1') {
          return Promise.resolve(JSON.stringify([{
            word: 'test',
            translation: 'test'
          }]));
        }
        return Promise.resolve(null);
      });
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_vocabulary.default, {})
        })),
        getByTestId = _render4.getByTestId,
        rerender = _render4.rerender;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('vocabulary-word')).toBeTruthy();
      });
      var revealButton = getByTestId('reveal-translation-button');
      _reactNative.fireEvent.press(revealButton);
      (0, _reactNative.act)(function () {
        progressCallbacks.forEach(function (callback) {
          return callback({
            type: 'vocabulary',
            level: '1',
            progress: 75
          });
        });
      });
      yield (0, _reactNative.waitFor)(function () {
        expect(_asyncStorage.default.setItem).toHaveBeenCalled();
      });
    }));
    it('should sync progress across multiple components', (0, _asyncToGenerator2.default)(function* () {
      var currentProgress = 25;
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'progress_vocabulary_1') {
          return Promise.resolve(JSON.stringify({
            percentage: currentProgress,
            wordsLearned: Math.floor(currentProgress / 10),
            totalWords: 10
          }));
        }
        return Promise.resolve(null);
      });
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
        })),
        getDashboardTestId = _render5.getByTestId,
        rerenderDashboard = _render5.rerender;
      yield (0, _reactNative.waitFor)(function () {
        expect(getDashboardTestId('dashboard-container')).toBeTruthy();
      });
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_LevelSelection.default, {})
        })),
        getLevelTestId = _render6.getByTestId,
        rerenderLevel = _render6.rerender;
      yield (0, _reactNative.waitFor)(function () {
        expect(getLevelTestId('level-selection-container')).toBeTruthy();
      });
      currentProgress = 50;
      rerenderDashboard((0, _jsxRuntime.jsx)(TestWrapper, {
        children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
      }));
      rerenderLevel((0, _jsxRuntime.jsx)(TestWrapper, {
        children: (0, _jsxRuntime.jsx)(_LevelSelection.default, {})
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getDashboardTestId('dashboard-container')).toBeTruthy();
        expect(getLevelTestId('level-selection-container')).toBeTruthy();
      });
    }));
  });
  describe('Level Progression and Unlocking', function () {
    it('should unlock levels based on progress', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        var progressData = {
          'progress_vocabulary_1': {
            percentage: 100
          },
          'progress_spelling_1': {
            percentage: 100
          },
          'progress_reading_1': {
            percentage: 100
          },
          'progress_grammar_1': {
            percentage: 100
          },
          'progress_vocabulary_2': {
            percentage: 30
          },
          'progress_spelling_2': {
            percentage: 0
          }
        };
        if (progressData[key]) {
          return Promise.resolve(JSON.stringify(progressData[key]));
        }
        return Promise.resolve(null);
      });
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_LevelSelection.default, {})
        })),
        getByTestId = _render7.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('level-selection-container')).toBeTruthy();
      });
      var level1 = getByTestId('level-1');
      expect(level1).toBeTruthy();
      var level2 = getByTestId('level-2');
      expect(level2).toBeTruthy();
      var level3 = getByTestId('level-3');
      expect(level3).toBeTruthy();
    }));
    it('should track progress per exercise type within levels', (0, _asyncToGenerator2.default)(function* () {
      var exerciseTypes = ['vocabulary', 'spelling', 'reading', 'grammar'];
      var level = '2';
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === `progress_vocabulary_${level}`) {
          return Promise.resolve(JSON.stringify({
            percentage: 75
          }));
        }
        if (key === `progress_spelling_${level}`) {
          return Promise.resolve(JSON.stringify({
            percentage: 50
          }));
        }
        if (key === `progress_reading_${level}`) {
          return Promise.resolve(JSON.stringify({
            percentage: 25
          }));
        }
        if (key === `progress_grammar_${level}`) {
          return Promise.resolve(JSON.stringify({
            percentage: 0
          }));
        }
        return Promise.resolve(null);
      });
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_LevelSelection.default, {})
        })),
        getByTestId = _render8.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('level-selection-container')).toBeTruthy();
      });
      var level2Card = getByTestId('level-2');
      expect(level2Card).toBeTruthy();
    }));
  });
  describe('Progress Analytics and Metrics', function () {
    it('should calculate learning streaks correctly', (0, _asyncToGenerator2.default)(function* () {
      var activities = [];
      var now = Date.now();
      for (var i = 0; i < 5; i++) {
        activities.push({
          type: 'vocabulary',
          level: '1',
          timestamp: now - i * 24 * 60 * 60 * 1000,
          completed: true
        });
      }
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'learning_history') {
          return Promise.resolve(JSON.stringify(activities));
        }
        return Promise.resolve(null);
      });
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
        })),
        getByTestId = _render9.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('dashboard-container')).toBeTruthy();
      });
    }));
    it('should track time spent learning', (0, _asyncToGenerator2.default)(function* () {
      var sessions = [{
        duration: 15 * 60 * 1000,
        type: 'vocabulary',
        date: Date.now() - 86400000
      }, {
        duration: 20 * 60 * 1000,
        type: 'spelling',
        date: Date.now() - 172800000
      }, {
        duration: 10 * 60 * 1000,
        type: 'reading',
        date: Date.now() - 259200000
      }];
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'learning_sessions') {
          return Promise.resolve(JSON.stringify(sessions));
        }
        return Promise.resolve(null);
      });
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
        })),
        getByTestId = _render0.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('dashboard-container')).toBeTruthy();
      });
    }));
    it('should provide meaningful progress insights', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        var data = {
          'progress_vocabulary_1': {
            percentage: 80,
            wordsLearned: 40,
            totalWords: 50,
            averageTime: 30000,
            accuracy: 85
          },
          'progress_spelling_1': {
            percentage: 60,
            wordsLearned: 24,
            totalWords: 40,
            averageTime: 45000,
            accuracy: 75
          },
          'learning_stats': {
            totalWordsLearned: 64,
            totalTimeSpent: 3600000,
            averageSessionTime: 900000,
            strongestArea: 'vocabulary',
            weakestArea: 'spelling'
          }
        };
        if (data[key]) {
          return Promise.resolve(JSON.stringify(data[key]));
        }
        return Promise.resolve(null);
      });
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
        })),
        getByTestId = _render1.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('dashboard-container')).toBeTruthy();
      });
    }));
  });
  describe('Data Integrity and Error Handling', function () {
    it('should handle corrupted progress data gracefully', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'progress_vocabulary_1') {
          return Promise.resolve('invalid json data');
        }
        return Promise.resolve(null);
      });
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
        })),
        getByTestId = _render10.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('dashboard-container')).toBeTruthy();
      });
      expect(_asyncStorage.default.removeItem).toHaveBeenCalledWith('progress_vocabulary_1');
    }));
    it('should handle storage quota exceeded', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.setItem.mockRejectedValue(new Error('QuotaExceededError'));
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_data_1') {
          return Promise.resolve(JSON.stringify([{
            word: 'test',
            translation: 'test'
          }]));
        }
        return Promise.resolve(null);
      });
      var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_vocabulary.default, {})
        })),
        getByTestId = _render11.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('vocabulary-word')).toBeTruthy();
      });
      var revealButton = getByTestId('reveal-translation-button');
      _reactNative.fireEvent.press(revealButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('vocabulary-word')).toBeTruthy();
      });
    }));
    it('should validate progress data consistency', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'progress_vocabulary_1') {
          return Promise.resolve(JSON.stringify({
            percentage: 150,
            wordsLearned: -5,
            totalWords: 0
          }));
        }
        return Promise.resolve(null);
      });
      var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
        })),
        getByTestId = _render12.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('dashboard-container')).toBeTruthy();
      });
    }));
  });
  describe('Performance with Large Datasets', function () {
    it('should handle large progress datasets efficiently', (0, _asyncToGenerator2.default)(function* () {
      var largeProgressData = {};
      var _loop = function* _loop(level) {
        var exercises = ['vocabulary', 'spelling', 'reading', 'grammar', 'phrases'];
        exercises.forEach(function (exercise) {
          largeProgressData[`progress_${exercise}_${level}`] = {
            percentage: Math.floor(Math.random() * 100),
            wordsLearned: Math.floor(Math.random() * 50),
            totalWords: 50,
            lastUpdated: Date.now() - Math.random() * 86400000
          };
        });
      };
      for (var level = 1; level <= 100; level++) {
        yield* _loop(level);
      }
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (largeProgressData[key]) {
          return Promise.resolve(JSON.stringify(largeProgressData[key]));
        }
        return Promise.resolve(null);
      });
      var startTime = Date.now();
      var _render13 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
        })),
        getByTestId = _render13.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('dashboard-container')).toBeTruthy();
      });
      var renderTime = Date.now() - startTime;
      expect(renderTime).toBeLessThan(2000);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,