fdfa6f8b2c3ff5467917188538ec65bc
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _expoLinearGradient = require("expo-linear-gradient");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var HeroCard = function HeroCard(_ref) {
  var content = _ref.content,
    _ref$fontSize = _ref.fontSize,
    fontSize = _ref$fontSize === void 0 ? 32 : _ref$fontSize,
    _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? "#5E60CE" : _ref$levelColor,
    lineHeight = _ref.lineHeight,
    _ref$textAlign = _ref.textAlign,
    textAlign = _ref$textAlign === void 0 ? "center" : _ref$textAlign,
    _ref$showUnderline = _ref.showUnderline,
    showUnderline = _ref$showUnderline === void 0 ? true : _ref$showUnderline,
    _ref$containerStyle = _ref.containerStyle,
    containerStyle = _ref$containerStyle === void 0 ? {} : _ref$containerStyle,
    children = _ref.children;
  var styles = (0, _style.default)(levelColor);
  var calculatedLineHeight = lineHeight || Math.round(fontSize * 1.3);
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: [styles.heroSection, containerStyle],
    children: (0, _jsxRuntime.jsxs)(_expoLinearGradient.LinearGradient, {
      colors: ['white', `${levelColor}08`, `${levelColor}12`],
      start: {
        x: 0,
        y: 0
      },
      end: {
        x: 1,
        y: 1
      },
      style: styles.heroGradient,
      children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.decorativeCircle, styles.circle1, {
          backgroundColor: `${levelColor}15`
        }]
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.decorativeCircle, styles.circle2, {
          backgroundColor: `${levelColor}10`
        }]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.contentContainer,
        children: [content && typeof content === 'string' && content.trim() ? (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [styles.contentText, {
            color: levelColor,
            fontSize: fontSize,
            lineHeight: calculatedLineHeight,
            textAlign: textAlign
          }],
          children: content
        }) : null, children, showUnderline && (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [styles.underline, {
            backgroundColor: levelColor
          }]
        })]
      })]
    })
  });
};
var _default = exports.default = HeroCard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX2V4cG9MaW5lYXJHcmFkaWVudCIsIl9zdHlsZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfanN4UnVudGltZSIsIkhlcm9DYXJkIiwiX3JlZiIsImNvbnRlbnQiLCJfcmVmJGZvbnRTaXplIiwiZm9udFNpemUiLCJfcmVmJGxldmVsQ29sb3IiLCJsZXZlbENvbG9yIiwibGluZUhlaWdodCIsIl9yZWYkdGV4dEFsaWduIiwidGV4dEFsaWduIiwiX3JlZiRzaG93VW5kZXJsaW5lIiwic2hvd1VuZGVybGluZSIsIl9yZWYkY29udGFpbmVyU3R5bGUiLCJjb250YWluZXJTdHlsZSIsImNoaWxkcmVuIiwic3R5bGVzIiwiY3JlYXRlU3R5bGVzIiwiY2FsY3VsYXRlZExpbmVIZWlnaHQiLCJNYXRoIiwicm91bmQiLCJqc3giLCJWaWV3Iiwic3R5bGUiLCJoZXJvU2VjdGlvbiIsImpzeHMiLCJMaW5lYXJHcmFkaWVudCIsImNvbG9ycyIsInN0YXJ0IiwieCIsInkiLCJlbmQiLCJoZXJvR3JhZGllbnQiLCJkZWNvcmF0aXZlQ2lyY2xlIiwiY2lyY2xlMSIsImJhY2tncm91bmRDb2xvciIsImNpcmNsZTIiLCJjb250ZW50Q29udGFpbmVyIiwidHJpbSIsIlRleHQiLCJjb250ZW50VGV4dCIsImNvbG9yIiwidW5kZXJsaW5lIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9jb21wb25lbnRzL3VpL0hlcm9DYXJkL2luZGV4LmpzIC0gVkVSU0lPTiBNT0JJTEUtRlJJRU5ETFlcclxuaW1wb3J0IHsgVmlldywgVGV4dCB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcclxuaW1wb3J0IHsgTGluZWFyR3JhZGllbnQgfSBmcm9tIFwiZXhwby1saW5lYXItZ3JhZGllbnRcIjtcclxuaW1wb3J0IGNyZWF0ZVN0eWxlcyBmcm9tIFwiLi9zdHlsZVwiO1xyXG5cclxuLyoqXHJcbiAqIPCfjq8gSGVyb0NhcmQgLSBWZXJzaW9uIE1vYmlsZS1GcmllbmRseSBQcmVtaXVtXHJcbiAqIC0gQmFja2dyb3VuZHMgc29saWRlcyBwb3VyIGxpc2liaWxpdMOpIG1vYmlsZVxyXG4gKiAtIE9tYnJlcyBuZXV0cmVzIChwYXMgY29sb3LDqWVzKVxyXG4gKiAtIENvbnRyYXN0ZXMgb3B0aW1pc8OpcyAoV0NBRyBBQSlcclxuICogLSBDcm9zcy1wbGF0Zm9ybSBjb2jDqXJlbnRcclxuICogXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IC0gQ29udGVudSBwcmluY2lwYWwgw6AgYWZmaWNoZXJcclxuICogQHBhcmFtIHtudW1iZXJ9IGZvbnRTaXplIC0gVGFpbGxlIGR1IHRleHRlICg0MiBwb3VyIG1vdHMsIDI4IHBvdXIgcGhyYXNlcywgZXRjLilcclxuICogQHBhcmFtIHtzdHJpbmd9IGxldmVsQ29sb3IgLSBDb3VsZXVyIGR1IG5pdmVhdVxyXG4gKiBAcGFyYW0ge251bWJlcn0gbGluZUhlaWdodCAtIEhhdXRldXIgZGUgbGlnbmUgKG9wdGlvbm5lbClcclxuICogQHBhcmFtIHtzdHJpbmd9IHRleHRBbGlnbiAtIEFsaWduZW1lbnQgZHUgdGV4dGVcclxuICogQHBhcmFtIHtib29sZWFufSBzaG93VW5kZXJsaW5lIC0gQWZmaWNoZXIgbGEgbGlnbmUgZMOpY29yYXRpdmVcclxuICogQHBhcmFtIHtvYmplY3R9IGNvbnRhaW5lclN0eWxlIC0gU3R5bGUgcGVyc29ubmFsaXPDqSBwb3VyIGxlIGNvbnRhaW5lclxyXG4gKi9cclxuY29uc3QgSGVyb0NhcmQgPSAoe1xyXG4gIGNvbnRlbnQsXHJcbiAgZm9udFNpemUgPSAzMixcclxuICBsZXZlbENvbG9yID0gXCIjNUU2MENFXCIsXHJcbiAgbGluZUhlaWdodCxcclxuICB0ZXh0QWxpZ24gPSBcImNlbnRlclwiLFxyXG4gIHNob3dVbmRlcmxpbmUgPSB0cnVlLFxyXG4gIGNvbnRhaW5lclN0eWxlID0ge30sXHJcbiAgY2hpbGRyZW4sXHJcbn0pID0+IHtcclxuICBjb25zdCBzdHlsZXMgPSBjcmVhdGVTdHlsZXMobGV2ZWxDb2xvcik7XHJcbiAgXHJcbiAgLy8gQ2FsY3VsIGF1dG9tYXRpcXVlIGR1IGxpbmVIZWlnaHQgc2kgbm9uIGZvdXJuaVxyXG4gIGNvbnN0IGNhbGN1bGF0ZWRMaW5lSGVpZ2h0ID0gbGluZUhlaWdodCB8fCBNYXRoLnJvdW5kKGZvbnRTaXplICogMS4zKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxWaWV3IHN0eWxlPXtbc3R5bGVzLmhlcm9TZWN0aW9uLCBjb250YWluZXJTdHlsZV19PlxyXG4gICAgICA8TGluZWFyR3JhZGllbnRcclxuICAgICAgICBjb2xvcnM9e1tcclxuICAgICAgICAgICd3aGl0ZScsXHJcbiAgICAgICAgICBgJHtsZXZlbENvbG9yfTA4YCwgLy8gR3JhZGllbnQgdHLDqHMgc3VidGlsIHZlcnMgY291bGV1clxyXG4gICAgICAgICAgYCR7bGV2ZWxDb2xvcn0xMmAgICAvLyBMw6lnw6hyZW1lbnQgcGx1cyB2aXNpYmxlXHJcbiAgICAgICAgXX1cclxuICAgICAgICBzdGFydD17eyB4OiAwLCB5OiAwIH19XHJcbiAgICAgICAgZW5kPXt7IHg6IDEsIHk6IDEgfX1cclxuICAgICAgICBzdHlsZT17c3R5bGVzLmhlcm9HcmFkaWVudH1cclxuICAgICAgPlxyXG4gICAgICAgIHsvKiBDZXJjbGVzIGTDqWNvcmF0aWZzIC0gcGx1cyB2aXNpYmxlcyAqL31cclxuICAgICAgICA8VmlldyBzdHlsZT17W3N0eWxlcy5kZWNvcmF0aXZlQ2lyY2xlLCBzdHlsZXMuY2lyY2xlMSwgeyBiYWNrZ3JvdW5kQ29sb3I6IGAke2xldmVsQ29sb3J9MTVgIH1dfSAvPlxyXG4gICAgICAgIDxWaWV3IHN0eWxlPXtbc3R5bGVzLmRlY29yYXRpdmVDaXJjbGUsIHN0eWxlcy5jaXJjbGUyLCB7IGJhY2tncm91bmRDb2xvcjogYCR7bGV2ZWxDb2xvcn0xMGAgfV19IC8+XHJcbiAgICAgICAgXHJcbiAgICAgICAgey8qIENvbnRlbnUgcHJpbmNpcGFsICovfVxyXG4gICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuY29udGVudENvbnRhaW5lcn0+XHJcbiAgICAgICAgICB7Y29udGVudCAmJiB0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycgJiYgY29udGVudC50cmltKCkgPyAoXHJcbiAgICAgICAgICAgIDxUZXh0IFxyXG4gICAgICAgICAgICAgIHN0eWxlPXtbXHJcbiAgICAgICAgICAgICAgICBzdHlsZXMuY29udGVudFRleHQsIFxyXG4gICAgICAgICAgICAgICAgeyBcclxuICAgICAgICAgICAgICAgICAgY29sb3I6IGxldmVsQ29sb3IsXHJcbiAgICAgICAgICAgICAgICAgIGZvbnRTaXplLFxyXG4gICAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiBjYWxjdWxhdGVkTGluZUhlaWdodCxcclxuICAgICAgICAgICAgICAgICAgdGV4dEFsaWduLFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIF19XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICB7Y29udGVudH1cclxuICAgICAgICAgICAgPC9UZXh0PlxyXG4gICAgICAgICAgKSA6IG51bGx9XHJcbiAgICAgICAgICB7Y2hpbGRyZW59XHJcbiAgICAgICAgICB7LyogTGlnbmUgZMOpY29yYXRpdmUgKi99XHJcbiAgICAgICAgICB7c2hvd1VuZGVybGluZSAmJiAoXHJcbiAgICAgICAgICAgIDxWaWV3IHN0eWxlPXtbc3R5bGVzLnVuZGVybGluZSwgeyBiYWNrZ3JvdW5kQ29sb3I6IGxldmVsQ29sb3IgfV19IC8+XHJcbiAgICAgICAgICApfVxyXG4gICAgICAgIDwvVmlldz5cclxuICAgICAgPC9MaW5lYXJHcmFkaWVudD5cclxuICAgIDwvVmlldz5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgSGVyb0NhcmQ7Il0sIm1hcHBpbmdzIjoiOzs7OztBQUNBLElB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