f131c63b104fc531175828e117c62886
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._LogBoxNotificationContainer = _LogBoxNotificationContainer;
exports.default = void 0;
var _View = _interopRequireDefault(require("../Components/View/View"));
var _StyleSheet = _interopRequireDefault(require("../StyleSheet/StyleSheet"));
var LogBoxData = _interopRequireWildcard(require("./Data/LogBoxData"));
var _LogBoxLog = _interopRequireDefault(require("./Data/LogBoxLog"));
var _LogBoxNotification = _interopRequireDefault(require("./UI/LogBoxNotification"));
var React = _interopRequireWildcard(require("react"));
var _SafeAreaView_INTERNAL_DO_NOT_USE = _interopRequireDefault(require("../../src/private/components/SafeAreaView_INTERNAL_DO_NOT_USE"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _LogBoxNotificationContainer(props) {
  var logs = props.logs;
  var onDismissWarns = function onDismissWarns() {
    LogBoxData.clearWarnings();
  };
  var onDismissErrors = function onDismissErrors() {
    LogBoxData.clearErrors();
  };
  var setSelectedLog = function setSelectedLog(index) {
    LogBoxData.setSelectedLog(index);
  };
  function openLog(log) {
    if (log.onNotificationPress) {
      log.onNotificationPress();
      return;
    }
    var index = logs.length - 1;
    while (index > 0 && logs[index] !== log) {
      index -= 1;
    }
    setSelectedLog(index);
  }
  if (logs.length === 0 || props.isDisabled === true) {
    return null;
  }
  var warnings = logs.filter(function (log) {
    return log.level === 'warn';
  });
  var errors = logs.filter(function (log) {
    return log.level === 'error' || log.level === 'fatal';
  });
  return (0, _jsxRuntime.jsxs)(_SafeAreaView_INTERNAL_DO_NOT_USE.default, {
    style: styles.list,
    children: [warnings.length > 0 && (0, _jsxRuntime.jsx)(_View.default, {
      style: styles.toast,
      children: (0, _jsxRuntime.jsx)(_LogBoxNotification.default, {
        log: warnings[warnings.length - 1],
        level: "warn",
        totalLogCount: warnings.length,
        onPressOpen: function onPressOpen() {
          return openLog(warnings[warnings.length - 1]);
        },
        onPressDismiss: onDismissWarns
      })
    }), errors.length > 0 && (0, _jsxRuntime.jsx)(_View.default, {
      style: styles.toast,
      children: (0, _jsxRuntime.jsx)(_LogBoxNotification.default, {
        log: errors[errors.length - 1],
        level: "error",
        totalLogCount: errors.length,
        onPressOpen: function onPressOpen() {
          return openLog(errors[errors.length - 1]);
        },
        onPressDismiss: onDismissErrors
      })
    })]
  });
}
var styles = _StyleSheet.default.create({
  list: {
    bottom: 20,
    left: 10,
    right: 10,
    position: 'absolute'
  },
  toast: {
    borderRadius: 8,
    marginBottom: 5,
    overflow: 'hidden'
  }
});
var _default = exports.default = LogBoxData.withSubscription(_LogBoxNotificationContainer);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfVmlldyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX1N0eWxlU2hlZXQiLCJMb2dCb3hEYXRhIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfTG9nQm94TG9nIiwiX0xvZ0JveE5vdGlmaWNhdGlvbiIsIlJlYWN0IiwiX1NhZmVBcmVhVmlld19JTlRFUk5BTF9ET19OT1RfVVNFIiwiX2pzeFJ1bnRpbWUiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9Mb2dCb3hOb3RpZmljYXRpb25Db250YWluZXIiLCJwcm9wcyIsImxvZ3MiLCJvbkRpc21pc3NXYXJucyIsImNsZWFyV2FybmluZ3MiLCJvbkRpc21pc3NFcnJvcnMiLCJjbGVhckVycm9ycyIsInNldFNlbGVjdGVkTG9nIiwiaW5kZXgiLCJvcGVuTG9nIiwibG9nIiwib25Ob3RpZmljYXRpb25QcmVzcyIsImxlbmd0aCIsImlzRGlzYWJsZWQiLCJ3YXJuaW5ncyIsImZpbHRlciIsImxldmVsIiwiZXJyb3JzIiwianN4cyIsInN0eWxlIiwic3R5bGVzIiwibGlzdCIsImNoaWxkcmVuIiwianN4IiwidG9hc3QiLCJ0b3RhbExvZ0NvdW50Iiwib25QcmVzc09wZW4iLCJvblByZXNzRGlzbWlzcyIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJib3R0b20iLCJsZWZ0IiwicmlnaHQiLCJwb3NpdGlvbiIsImJvcmRlclJhZGl1cyIsIm1hcmdpbkJvdHRvbSIsIm92ZXJmbG93IiwiX2RlZmF1bHQiLCJleHBvcnRzIiwid2l0aFN1YnNjcmlwdGlvbiJdLCJzb3VyY2VzIjpbIkxvZ0JveE5vdGlmaWNhdGlvbkNvbnRhaW5lci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IFZpZXcgZnJvbSAnLi4vQ29tcG9uZW50cy9WaWV3L1ZpZXcnO1xuaW1wb3J0IFN0eWxlU2hlZXQgZnJvbSAnLi4vU3R5bGVTaGVldC9TdHlsZVNoZWV0JztcbmltcG9ydCAqIGFzIExvZ0JveERhdGEgZnJvbSAnLi9EYXRhL0xvZ0JveERhdGEnO1xuaW1wb3J0IExvZ0JveExvZyBmcm9tICcuL0RhdGEvTG9nQm94TG9nJztcbmltcG9ydCBMb2dCb3hMb2dOb3RpZmljYXRpb24gZnJvbSAnLi9VSS9Mb2dCb3hOb3RpZmljYXRpb24nO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFNhZmVBcmVhVmlldyBmcm9tICcuLi8uLi9zcmMvcHJpdmF0ZS9jb21wb25lbnRzL1NhZmVBcmVhVmlld19JTlRFUk5BTF9ET19OT1RfVVNFJztcblxudHlwZSBQcm9wcyA9ICRSZWFkT25seTx7fFxuICBsb2dzOiAkUmVhZE9ubHlBcnJheTxMb2dCb3hMb2c+LFxuICBzZWxlY3RlZExvZ0luZGV4OiBudW1iZXIsXG4gIGlzRGlzYWJsZWQ/OiA/Ym9vbGVhbixcbnx9PjtcblxuZXhwb3J0IGZ1bmN0aW9uIF9Mb2dCb3hOb3RpZmljYXRpb25Db250YWluZXIocHJvcHM6IFByb3BzKTogUmVhY3QuTm9kZSB7XG4gIGNvbnN0IHtsb2dzfSA9IHByb3BzO1xuXG4gIGNvbnN0IG9uRGlzbWlzc1dhcm5zID0gKCkgPT4ge1xuICAgIExvZ0JveERhdGEuY2xlYXJXYXJuaW5ncygpO1xuICB9O1xuICBjb25zdCBvbkRpc21pc3NFcnJvcnMgPSAoKSA9PiB7XG4gICAgTG9nQm94RGF0YS5jbGVhckVycm9ycygpO1xuICB9O1xuXG4gIGNvbnN0IHNldFNlbGVjdGVkTG9nID0gKGluZGV4OiBudW1iZXIpOiB2b2lkID0+IHtcbiAgICBMb2dCb3hEYXRhLnNldFNlbGVjdGVkTG9nKGluZGV4KTtcbiAgfTtcblxuICBmdW5jdGlvbiBvcGVuTG9nKGxvZzogTG9nQm94TG9nKSB7XG4gICAgaWYgKGxvZy5vbk5vdGlmaWNhdGlvblByZXNzKSB7XG4gICAgICBsb2cub25Ob3RpZmljYXRpb25QcmVzcygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgaW5kZXggPSBsb2dzLmxlbmd0aCAtIDE7XG5cbiAgICAvLyBTdG9wIGF0IHplcm8gYmVjYXVzZSBpZiB3ZSBkb24ndCBmaW5kIGFueSBsb2csIHdlJ2xsIG9wZW4gdGhlIGZpcnN0IGxvZy5cbiAgICB3aGlsZSAoaW5kZXggPiAwICYmIGxvZ3NbaW5kZXhdICE9PSBsb2cpIHtcbiAgICAgIGluZGV4IC09IDE7XG4gICAgfVxuICAgIHNldFNlbGVjdGVkTG9nKGluZGV4KTtcbiAgfVxuXG4gIGlmIChsb2dzLmxlbmd0aCA9PT0gMCB8fCBwcm9wcy5pc0Rpc2FibGVkID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCB3YXJuaW5ncyA9IGxvZ3MuZmlsdGVyKGxvZyA9PiBsb2cubGV2ZWwgPT09ICd3YXJuJyk7XG4gIGNvbnN0IGVycm9ycyA9IGxvZ3MuZmlsdGVyKFxuICAgIGxvZyA9PiBsb2cubGV2ZWwgPT09ICdlcnJvcicgfHwgbG9nLmxldmVsID09PSAnZmF0YWwnLFxuICApO1xuICByZXR1cm4gKFxuICAgIDxTYWZlQXJlYVZpZXcgc3R5bGU9e3N0eWxlcy5saXN0fT5cbiAgICAgIHt3YXJuaW5ncy5sZW5ndGggPiAwICYmIChcbiAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy50b2FzdH0+XG4gICAgICAgICAgPExvZ0JveExvZ05vdGlmaWNhdGlvblxuICAgICAgICAgICAgbG9nPXt3YXJuaW5nc1t3YXJuaW5ncy5sZW5ndGggLSAxXX1cbiAgICAgICAgICAgIGxldmVsPVwid2FyblwiXG4gICAgICAgICAgICB0b3RhbExvZ0NvdW50PXt3YXJuaW5ncy5sZW5ndGh9XG4gICAgICAgICAgICBvblByZXNzT3Blbj17KCkgPT4gb3BlbkxvZyh3YXJuaW5nc1t3YXJuaW5ncy5sZW5ndGggLSAxXSl9XG4gICAgICAgICAgICBvblByZXNzRGlzbWlzcz17b25EaXNtaXNzV2FybnN9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9WaWV3PlxuICAgICAgKX1cbiAgICAgIHtlcnJvcnMubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMudG9hc3R9PlxuICAgICAgICAgIDxMb2dCb3hMb2dOb3RpZmljYXRpb25cbiAgICAgICAgICAgIGxvZz17ZXJyb3JzW2Vycm9ycy5sZW5ndGggLSAxXX1cbiAgICAgICAgICAgIGxldmVsPVwiZXJyb3JcIlxuICAgICAgICAgICAgdG90YWxMb2dDb3VudD17ZXJyb3JzLmxlbmd0aH1cbiAgICAgICAgICAgIG9uUHJlc3NPcGVuPXsoKSA9PiBvcGVuTG9nKGVycm9yc1tlcnJvcnMubGVuZ3RoIC0gMV0pfVxuICAgICAgICAgICAgb25QcmVzc0Rpc21pc3M9e29uRGlzbWlzc0Vycm9yc31cbiAgICAgICAgICAvPlxuICAgICAgICA8L1ZpZXc+XG4gICAgICApfVxuICAgIDwvU2FmZUFyZWFWaWV3PlxuICApO1xufVxuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGxpc3Q6IHtcbiAgICBib3R0b206IDIwLFxuICAgIGxlZnQ6IDEwLFxuICAgIHJpZ2h0OiAxMCxcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgfSxcbiAgdG9hc3Q6IHtcbiAgICBib3JkZXJSYWRpdXM6IDgsXG4gICAgbWFyZ2luQm90dG9tOiA1LFxuICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCAoTG9nQm94RGF0YS53aXRoU3Vic2NyaXB0aW9uKFxuICBfTG9nQm94Tm90aWZpY2F0aW9uQ29udGFpbmVyLFxuKTogUmVhY3QuQWJzdHJhY3RDb21wb25lbnQ8e3x8fT4pO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFVQSxJQUFBQSxLQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxXQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxVQUFBLEdBQUFDLHVCQUFBLENBQUFILE9BQUE7QUFDQSxJQUFBSSxVQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSyxtQkFBQSxHQUFBTixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQU0sS0FBQSxHQUFBSCx1QkFBQSxDQUFBSCxPQUFBO0FBQ0EsSUFBQU8saUNBQUEsR0FBQVIsc0JBQUEsQ0FBQUMsT0FBQTtBQUF5RixJQUFBUSxXQUFBLEdBQUFSLE9BQUE7QUFBQSxTQUFBRyx3QkFBQU0sQ0FBQSxFQUFBQyxDQUFBLDZCQUFBQyxPQUFBLE1BQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQVIsdUJBQUEsWUFBQUEsd0JBQUFNLENBQUEsRUFBQUMsQ0FBQSxTQUFBQSxDQUFBLElBQUFELENBQUEsSUFBQUEsQ0FBQSxDQUFBSyxVQUFBLFNBQUFMLENBQUEsTUFBQU0sQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsS0FBQUMsU0FBQSxRQUFBQyxPQUFBLEVBQUFWLENBQUEsaUJBQUFBLENBQUEsdUJBQUFBLENBQUEseUJBQUFBLENBQUEsU0FBQVEsQ0FBQSxNQUFBRixDQUFBLEdBQUFMLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLFFBQUFHLENBQUEsQ0FBQUssR0FBQSxDQUFBWCxDQUFBLFVBQUFNLENBQUEs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