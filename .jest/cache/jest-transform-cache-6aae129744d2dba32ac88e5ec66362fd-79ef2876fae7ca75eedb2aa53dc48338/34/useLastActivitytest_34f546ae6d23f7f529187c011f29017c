54a9a71d5937eed3d382d263ddfb1a43
_getJestObj().mock('../../src/utils/eventBus', function () {
  return Object.assign({}, jest.requireActual('../../src/utils/eventBus'), {
    emit: jest.fn()
  });
});
_getJestObj().mock('@react-native-async-storage/async-storage');
_getJestObj().mock('../../src/utils/constants', function () {
  return {
    STORAGE_KEYS: {
      LAST_ACTIVITY: 'last_activity'
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useLastActivity = _interopRequireDefault(require("../../src/hooks/useLastActivity"));
var _eventBus = _interopRequireDefault(require("../../src/utils/eventBus"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useLastActivity', function () {
  var FIXED_NOW_TIMESTAMP = 1640995200000;
  var errorSpy;
  var warnSpy;
  beforeEach(function () {
    jest.clearAllMocks();
    jest.spyOn(Date, 'now').mockReturnValue(FIXED_NOW_TIMESTAMP);
    errorSpy = jest.spyOn(console, 'error').mockImplementation(function () {});
    warnSpy = jest.spyOn(console, 'warn').mockImplementation(function () {});
  });
  afterEach(function () {
    jest.restoreAllMocks();
  });
  it('devrait initialiser avec null si aucune donnée n\'est trouvée', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValue(null);
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook.result;
    yield (0, _reactNative.waitFor)(function () {
      return expect(result.current.isLoading).toBe(false);
    });
    expect(result.current.lastActivity).toBeNull();
    expect(_asyncStorage.default.getItem).toHaveBeenCalledWith('last_activity');
  }));
  it('devrait charger une activit existante', (0, _asyncToGenerator2.default)(function* () {
    var mockActivity = {
      type: 'vocabulary',
      timestamp: FIXED_NOW_TIMESTAMP - 300000
    };
    _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify(mockActivity));
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook2.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
      expect(result.current.lastActivity).toBeDefined();
      expect(result.current.lastActivity.type).toBe('vocabulary');
      expect(result.current.lastActivity.timeElapsed).toBe('Il y a 5 min');
    });
  }));
  it('devrait réinitialiser l\'activité en cas d\'erreur de chargement', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockRejectedValue(new Error('Erreur de lecture'));
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook3.result;
    yield (0, _reactNative.waitFor)(function () {
      return expect(result.current.isLoading).toBe(false);
    });
    expect(result.current.lastActivity).toBeNull();
    expect(errorSpy).toHaveBeenCalledWith('Erreur chargement dernière activité:', expect.any(Error));
  }));
  it('devrait afficher "À l\'instant" si l\'activité a lieu maintenant', (0, _asyncToGenerator2.default)(function* () {
    var mockActivity = {
      type: 'vocabulary',
      timestamp: FIXED_NOW_TIMESTAMP
    };
    _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify(mockActivity));
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook4.result;
    yield (0, _reactNative.waitFor)(function () {
      return expect(result.current.isLoading).toBe(false);
    });
    expect(result.current.lastActivity.timeElapsed).toBe("À l'instant");
  }));
  it('devrait afficher le temps en heures', (0, _asyncToGenerator2.default)(function* () {
    var mockActivity = {
      type: 'vocabulary',
      timestamp: FIXED_NOW_TIMESTAMP - 90 * 60 * 1000
    };
    _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify(mockActivity));
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook5.result;
    yield (0, _reactNative.waitFor)(function () {
      return expect(result.current.isLoading).toBe(false);
    });
    expect(result.current.lastActivity.timeElapsed).toBe('Il y a 1h');
  }));
  it('devrait afficher le temps en jours', (0, _asyncToGenerator2.default)(function* () {
    var mockActivity = {
      type: 'vocabulary',
      timestamp: FIXED_NOW_TIMESTAMP - 1500 * 60 * 1000
    };
    _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify(mockActivity));
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook6.result;
    yield (0, _reactNative.waitFor)(function () {
      return expect(result.current.isLoading).toBe(false);
    });
    expect(result.current.lastActivity.timeElapsed).toBe('Il y a 1j');
  }));
  it('devrait sauvegarder une nouvelle activité et mettre à jour l\'état local', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValue(null);
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook7.result;
    yield (0, _reactNative.waitFor)(function () {
      return expect(result.current.isLoading).toBe(false);
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.saveActivity({
        type: 'grammar',
        score: 85
      });
    }));
    expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('last_activity', JSON.stringify({
      type: 'grammar',
      score: 85,
      timestamp: FIXED_NOW_TIMESTAMP
    }));
    expect(result.current.lastActivity.timeElapsed).toBe("À l'instant");
    expect(_eventBus.default.emit).toHaveBeenCalledWith('progress-updated', expect.any(Object));
  }));
  it('devrait gérer les erreurs de sauvegarde sans planter', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.setItem.mockRejectedValue(new Error('Erreur de sauvegarde'));
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook8.result;
    yield (0, _reactNative.waitFor)(function () {
      return expect(result.current.isLoading).toBe(false);
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.saveActivity({
        type: 'test'
      });
    }));
    expect(errorSpy).toHaveBeenCalledWith('Erreur sauvegarde activité:', expect.any(Error));
  }));
  it('devrait gérer les erreurs de bus d\'événements sans planter', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValue(null);
    _asyncStorage.default.setItem.mockResolvedValue();
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook9.result;
    yield (0, _reactNative.waitFor)(function () {
      return expect(result.current.isLoading).toBe(false);
    });
    _eventBus.default.emit.mockImplementationOnce(function () {
      throw new Error('Erreur bus');
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.saveActivity({
        type: 'test'
      });
    }));
    expect(warnSpy).toHaveBeenCalledWith('Event bus error (non-critical):', expect.any(Error));
    expect(result.current.lastActivity.type).toBe('test');
  }));
  it('devrait supprimer une activité', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify({
      type: 'existing',
      timestamp: 123
    }));
    _asyncStorage.default.removeItem.mockResolvedValue();
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook0.result;
    yield (0, _reactNative.waitFor)(function () {
      return expect(result.current.isLoading).toBe(false);
    });
    expect(result.current.lastActivity).not.toBeNull();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.clearActivity();
    }));
    expect(_asyncStorage.default.removeItem).toHaveBeenCalledWith('last_activity');
    expect(result.current.lastActivity).toBeNull();
  }));
  it('devrait gérer les erreurs de suppression sans planter', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify({
      type: 'existing',
      timestamp: 123
    }));
    _asyncStorage.default.removeItem.mockRejectedValue(new Error('Erreur de suppression'));
    var _renderHook1 = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook1.result;
    yield (0, _reactNative.waitFor)(function () {
      return expect(result.current.isLoading).toBe(false);
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.clearActivity();
    }));
    expect(errorSpy).toHaveBeenCalledWith('Erreur suppression activité:', expect.any(Error));
    expect(result.current.lastActivity).not.toBeNull();
  }));
  it('devrait avoir toutes les fonctions nécessaires', function () {
    _asyncStorage.default.getItem.mockResolvedValue(null);
    var _renderHook10 = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook10.result;
    expect(typeof result.current.saveActivity).toBe('function');
    expect(typeof result.current.clearActivity).toBe('function');
    expect(typeof result.current.reload).toBe('function');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,