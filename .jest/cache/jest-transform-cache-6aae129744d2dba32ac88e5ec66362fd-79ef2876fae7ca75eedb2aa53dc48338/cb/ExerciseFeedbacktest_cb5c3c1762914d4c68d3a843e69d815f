6d1efbae8a75967811465bc3c747aef1
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ExerciseFeedback = _interopRequireDefault(require("../../../src/components/exercise-common/ExerciseFeedback"));
var _jsxRuntime = require("react/jsx-runtime");
describe('ExerciseFeedback component', function () {
  var mockOnClose = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('renders correctly with success', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        visible: true,
        success: true,
        explanation: "Bravo, c'\xE9tait la bonne r\xE9ponse !",
        onClose: mockOnClose
      })),
      getByText = _render.getByText,
      getByTestId = _render.getByTestId;
    expect(getByText("Bravo, c'était la bonne réponse !")).toBeTruthy();
    expect(getByTestId('feedback-success-icon')).toBeTruthy();
  });
  it('renders correctly with error', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        visible: true,
        success: false,
        explanation: "Non, ce n'\xE9tait pas \xE7a.",
        onClose: mockOnClose
      })),
      getByText = _render2.getByText,
      getByTestId = _render2.getByTestId;
    expect(getByText("Non, ce n'était pas ça.")).toBeTruthy();
    expect(getByTestId('feedback-error-icon')).toBeTruthy();
  });
  it('calls onClose when pressing close button', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        visible: true,
        success: true,
        explanation: "Explication",
        onClose: mockOnClose
      })),
      getByTestId = _render3.getByTestId;
    _reactNative.fireEvent.press(getByTestId('feedback-close-button'));
    expect(mockOnClose).toHaveBeenCalledTimes(1);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9FeGVyY2lzZUZlZWRiYWNrIiwiX2pzeFJ1bnRpbWUiLCJkZXNjcmliZSIsIm1vY2tPbkNsb3NlIiwiamVzdCIsImZuIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJpdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJkZWZhdWx0IiwidmlzaWJsZSIsInN1Y2Nlc3MiLCJleHBsYW5hdGlvbiIsIm9uQ2xvc2UiLCJnZXRCeVRleHQiLCJnZXRCeVRlc3RJZCIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJfcmVuZGVyMiIsIl9yZW5kZXIzIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiXSwic291cmNlcyI6WyJFeGVyY2lzZUZlZWRiYWNrLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCBFeGVyY2lzZUZlZWRiYWNrIGZyb20gJy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2V4ZXJjaXNlLWNvbW1vbi9FeGVyY2lzZUZlZWRiYWNrJztcclxuXHJcbmRlc2NyaWJlKCdFeGVyY2lzZUZlZWRiYWNrIGNvbXBvbmVudCcsICgpID0+IHtcclxuICBjb25zdCBtb2NrT25DbG9zZSA9IGplc3QuZm4oKTtcclxuXHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3JlbmRlcnMgY29ycmVjdGx5IHdpdGggc3VjY2VzcycsICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0LCBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxyXG4gICAgICA8RXhlcmNpc2VGZWVkYmFja1xyXG4gICAgICAgIHZpc2libGU9e3RydWV9XHJcbiAgICAgICAgc3VjY2Vzcz17dHJ1ZX1cclxuICAgICAgICBleHBsYW5hdGlvbj1cIkJyYXZvLCBjJ8OpdGFpdCBsYSBib25uZSByw6lwb25zZSAhXCJcclxuICAgICAgICBvbkNsb3NlPXttb2NrT25DbG9zZX1cclxuICAgICAgLz5cclxuICAgICk7XHJcblxyXG4gICAgZXhwZWN0KGdldEJ5VGV4dChcIkJyYXZvLCBjJ8OpdGFpdCBsYSBib25uZSByw6lwb25zZSAhXCIpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2ZlZWRiYWNrLXN1Y2Nlc3MtaWNvbicpKS50b0JlVHJ1dGh5KCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdyZW5kZXJzIGNvcnJlY3RseSB3aXRoIGVycm9yJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRleHQsIGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXHJcbiAgICAgIDxFeGVyY2lzZUZlZWRiYWNrXHJcbiAgICAgICAgdmlzaWJsZT17dHJ1ZX1cclxuICAgICAgICBzdWNjZXNzPXtmYWxzZX1cclxuICAgICAgICBleHBsYW5hdGlvbj1cIk5vbiwgY2UgbifDqXRhaXQgcGFzIMOnYS5cIlxyXG4gICAgICAgIG9uQ2xvc2U9e21vY2tPbkNsb3NlfVxyXG4gICAgICAvPlxyXG4gICAgKTtcclxuXHJcbiAgICBleHBlY3QoZ2V0QnlUZXh0KFwiTm9uLCBjZSBuJ8OpdGFpdCBwYXMgw6dhLlwiKSkudG9CZVRydXRoeSgpO1xyXG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCdmZWVkYmFjay1lcnJvci1pY29uJykpLnRvQmVUcnV0aHkoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ2NhbGxzIG9uQ2xvc2Ugd2hlbiBwcmVzc2luZyBjbG9zZSBidXR0b24nLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXHJcbiAgICAgIDxFeGVyY2lzZUZlZWRiYWNrXHJcbiAgICAgICAgdmlzaWJsZT17dHJ1ZX1cclxuICAgICAgICBzdWNjZXNzPXt0cnVlfVxyXG4gICAgICAgIGV4cGxhbmF0aW9uPVwiRXhwbGljYXRpb25cIlxyXG4gICAgICAgIG9uQ2xvc2U9e21vY2tPbkNsb3NlfVxyXG4gICAgICAvPlxyXG4gICAgKTtcclxuXHJcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ2ZlZWRiYWNrLWNsb3NlLWJ1dHRvbicpKTtcclxuICAgIGV4cGVjdChtb2NrT25DbG9zZSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsaUJBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUF3RixJQUFBRyxXQUFBLEdBQUFILE9BQUE7QUFFeEZJLFFBQVEsQ0FBQyw0QkFBNEIsRUFBRSxZQUFNO0VBQzNDLElBQU1DLFdBQVcsR0FBR0MsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztFQUU3QkMsVUFBVSxDQUFDLFlBQU07SUFDZkYsSUFBSSxDQUFDRyxhQUFhLENBQUMsQ0FBQztFQUN0QixDQUFDLENBQUM7RUFFRkMsRUFBRSxDQUFDLGdDQUFnQyxFQUFFLFlBQU07SUFDekMsSUFBQUMsT0FBQSxHQUFtQyxJQUFBQyxtQkFBTSxFQUN2QyxJQUFBVCxXQUFBLENBQUFVLEdBQUEsRUFBQ1gsaUJBQUEsQ0FBQVksT0FBZ0I7UUFDZkMsT0FBTyxFQUFFLElBQUs7UUFDZEMsT0FBTyxFQUFFLElBQUs7UUFDZEMsV0FBVyxFQUFDLHlDQUFtQztRQUMvQ0MsT0FBTyxFQUFFYjtNQUFZLENBQ3RCLENBQ0gsQ0FBQztNQVBPYyxTQUFTLEdBQUFSLE9BQUEsQ0FBVFEsU0FBUztNQUFFQyxXQUFXLEdBQUFULE9BQUEsQ0FBWFMsV0FBVztJQVM5QkMsTUFBTSxDQUFDRixTQUFTLENBQUMsbUNBQW1DLENBQUMsQ0FBQyxDQUFDRyxVQUFVLENBQUMsQ0FBQztJQUNuRUQsTUFBTSxDQUFDRCxXQUFXLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDRSxVQUFVLENBQUMsQ0FBQztFQUMzRCxDQUFDLENBQUM7RUFFRlosRUFBRSxDQUFDLDhCQUE4QixFQUFFLFlBQU07SUFDdkMsSUFBQWEsUUFBQSxHQUFtQyxJQUFBWCxtQkFBTSxFQUN2QyxJQUFBVCxXQUFBLENBQUFVLEdBQUEsRUFBQ1gsaUJBQUEsQ0FBQVksT0FBZ0I7UUFDZkMsT0FBTyxFQUFFLElBQUs7UUFDZEMsT0FBTyxFQUFFLEtBQU07UUFDZkMsV0FBVyxFQUFDLCtCQUF5QjtRQUNyQ0MsT0FBTyxFQUFFYjtNQUFZLENBQ3RCLENBQ0gsQ0FBQztNQVBPYyxTQUFTLEdBQUFJLFFBQUEsQ0FBVEosU0FBUztNQUFFQyxXQUFXLEdBQUFHLFFBQUEsQ0FBWEgsV0FBVztJQVM5QkMsTUFBTSxDQUFDRixTQUFTLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDRyxVQUFVLENBQUMsQ0FBQztJQUN6REQsTUFBTSxDQUFDRCxXQUFXLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDRSxVQUFVLENBQUMsQ0FBQztFQUN6RCxDQUFDLENBQUM7RUFFRlosRUFBRSxDQUFDLDBDQUEwQyxFQUFFLFlBQU07SUFDbkQsSUFBQWMsUUFBQSxHQUF3QixJQUFBWixtQkFBTSxFQUM1QixJQUFBVCxXQUFBLENBQUFVLEdBQUEsRUFBQ1gsaUJBQUEsQ0FBQVksT0FBZ0I7UUFDZkMsT0FBTyxFQUFFLElBQUs7UUFDZEMsT0FBTyxFQUFFLElBQUs7UUFDZEMsV0FBVyxFQUFDLGFBQWE7UUFDekJDLE9BQU8sRUFBRWI7TUFBWSxDQUN0QixDQUNILENBQUM7TUFQT2UsV0FBVyxHQUFBSSxRQUFBLENBQVhKLFdBQVc7SUFTbkJLLHNCQUFTLENBQUNDLEtBQUssQ0FBQ04sV0FBVyxDQUFDLHVCQUF1QixDQUFDLENBQUM7SUFDckRDLE1BQU0sQ0FBQ2hCLFdBQVcsQ0FBQyxDQUFDc0IscUJBQXFCLENBQUMsQ0FBQyxDQUFDO0VBQzlDLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==