be51dd4fb39beeeba1ce5562b3fc7326
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _constants = require("../utils/constants");
var useLastActivity = function useLastActivity() {
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    lastActivity = _useState2[0],
    setLastActivity = _useState2[1];
  var _useState3 = (0, _react.useState)(true),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isLoading = _useState4[0],
    setIsLoading = _useState4[1];
  var loadLastActivity = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      setIsLoading(true);
      var stored = yield _asyncStorage.default.getItem(_constants.STORAGE_KEYS.LAST_ACTIVITY);
      if (stored) {
        var activity = JSON.parse(stored);
        var now = Date.now();
        var diffInMinutes = Math.floor((now - activity.timestamp) / (1000 * 60));
        var timeElapsed = "À l'instant";
        if (diffInMinutes < 60) {
          timeElapsed = diffInMinutes === 0 ? "À l'instant" : `Il y a ${diffInMinutes} min`;
        } else if (diffInMinutes < 1440) {
          var hours = Math.floor(diffInMinutes / 60);
          timeElapsed = `Il y a ${hours}h`;
        } else {
          var days = Math.floor(diffInMinutes / 1440);
          timeElapsed = `Il y a ${days}j`;
        }
        setLastActivity(Object.assign({}, activity, {
          timeElapsed: timeElapsed
        }));
      } else {
        setLastActivity(null);
      }
    } catch (error) {
      console.error('Erreur chargement dernière activité:', error);
      setLastActivity(null);
    } finally {
      setIsLoading(false);
    }
  }), []);
  var saveActivity = (0, _react.useCallback)(function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (activityData) {
      try {
        var activity = Object.assign({}, activityData, {
          timestamp: Date.now()
        });
        yield _asyncStorage.default.setItem(_constants.STORAGE_KEYS.LAST_ACTIVITY, JSON.stringify(activity));
        try {
          require('../utils/eventBus').emit('progress-updated', activity);
        } catch (e) {}
        setLastActivity(Object.assign({}, activity, {
          timeElapsed: "À l'instant"
        }));
      } catch (error) {
        console.error('Erreur sauvegarde activité:', error);
      }
    });
    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), []);
  var clearActivity = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      yield _asyncStorage.default.removeItem(_constants.STORAGE_KEYS.LAST_ACTIVITY);
      setLastActivity(null);
    } catch (error) {
      console.error('Erreur suppression activité:', error);
    }
  }), []);
  (0, _react.useEffect)(function () {
    loadLastActivity();
  }, [loadLastActivity]);
  return {
    lastActivity: lastActivity,
    isLoading: isLoading,
    saveActivity: saveActivity,
    clearActivity: clearActivity,
    reload: loadLastActivity
  };
};
var _default = exports.default = useLastActivity;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,