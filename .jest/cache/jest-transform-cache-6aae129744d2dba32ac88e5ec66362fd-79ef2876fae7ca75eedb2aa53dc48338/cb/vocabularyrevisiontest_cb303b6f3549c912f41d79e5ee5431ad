60a6f788d02a5ef0687d4ca68808def0
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    },
    useRoute: function useRoute() {
      return {
        params: {}
      };
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _layout = _interopRequireDefault(require("../../app/_layout"));
var _ProgressContext = require("../../src/contexts/ProgressContext");
var _AppProvider = require("../../src/contexts/AppProvider");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Vocabulary Revision Integration Test', function () {
  it('should add words to revision list and allow revision', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AppProvider.AppProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsx)(VocabularyProvider, {
            children: (0, _jsxRuntime.jsx)(_layout.default, {})
          })
        })
      })),
      getByText = _render.getByText,
      findByText = _render.findByText;
    _reactNative.fireEvent.press(getByText(/Révision du vocabulaire/i));
    var wordToRevise = yield findByText(/Mot à réviser/i);
    expect(wordToRevise).toBeTruthy();
    _reactNative.fireEvent.press(getByText(/Commencer la révision/i));
    _reactNative.fireEvent.press(getByText(/Je me souviens/i));
    yield (0, _reactNative.waitFor)(function () {
      expect(screen.queryByText(/Mot à réviser/i)).toBeNull();
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsInVzZU5hdmlnYXRpb24iLCJuYXZpZ2F0ZSIsImZuIiwiZ29CYWNrIiwidXNlUm91dGUiLCJwYXJhbXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9sYXlvdXQiLCJfUHJvZ3Jlc3NDb250ZXh0IiwiX0FwcFByb3ZpZGVyIiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwiaXQiLCJkZWZhdWx0IiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsIkFwcFByb3ZpZGVyIiwiY2hpbGRyZW4iLCJQcm9ncmVzc1Byb3ZpZGVyIiwiVm9jYWJ1bGFyeVByb3ZpZGVyIiwiZ2V0QnlUZXh0IiwiZmluZEJ5VGV4dCIsImZpcmVFdmVudCIsInByZXNzIiwid29yZFRvUmV2aXNlIiwiZXhwZWN0IiwidG9CZVRydXRoeSIsIndhaXRGb3IiLCJzY3JlZW4iLCJxdWVyeUJ5VGV4dCIsInRvQmVOdWxsIl0sInNvdXJjZXMiOlsidm9jYWJ1bGFyeS1yZXZpc2lvbi50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IEFwcCBmcm9tICcuLi8uLi9hcHAvX2xheW91dCc7XG5pbXBvcnQgeyBQcm9ncmVzc1Byb3ZpZGVyIH0gZnJvbSAnLi4vLi4vc3JjL2NvbnRleHRzL1Byb2dyZXNzQ29udGV4dCc7XG5pbXBvcnQgeyBBcHBQcm92aWRlciB9IGZyb20gJy4uLy4uL3NyYy9jb250ZXh0cy9BcHBQcm92aWRlcic7XG5cblxuamVzdC5tb2NrKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnLCAoKSA9PiAoe1xuICAuLi5qZXN0LnJlcXVpcmVBY3R1YWwoJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScpLFxuICB1c2VOYXZpZ2F0aW9uOiAoKSA9PiAoe1xuICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXG4gICAgZ29CYWNrOiBqZXN0LmZuKCksXG4gIH0pLFxuICB1c2VSb3V0ZTogKCkgPT4gKHtcbiAgICBwYXJhbXM6IHt9LFxuICB9KSxcbn0pKTtcblxuZGVzY3JpYmUoJ1ZvY2FidWxhcnkgUmV2aXNpb24gSW50ZWdyYXRpb24gVGVzdCcsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCBhZGQgd29yZHMgdG8gcmV2aXNpb24gbGlzdCBhbmQgYWxsb3cgcmV2aXNpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQsIGZpbmRCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgIDxBcHBQcm92aWRlcj5cbiAgICAgICAgPFByb2dyZXNzUHJvdmlkZXI+XG4gICAgICAgICAgPFZvY2FidWxhcnlQcm92aWRlcj5cbiAgICAgICAgICAgIDxBcHAgLz5cbiAgICAgICAgICA8L1ZvY2FidWxhcnlQcm92aWRlcj5cbiAgICAgICAgPC9Qcm9ncmVzc1Byb3ZpZGVyPlxuICAgICAgPC9BcHBQcm92aWRlcj5cbiAgICApO1xuXG4gICAgLy8gMS4gU2ltdWxlciBsYSByw6lhbGlzYXRpb24gZCd1biBleGVyY2ljZSBkZSB2b2NhYnVsYWlyZVxuICAgIC8vIChDZXR0ZSBwYXJ0aWUgZXN0IHVuZSBzaW1wbGlmaWNhdGlvbi4gRW4gcsOpYWxpdMOpLCB2b3VzIGludGVyYWdpcmlleiBhdmVjIGwnZXhlcmNpY2UpXG4gICAgLy8gU3VwcG9zb25zIHF1J2FwcsOocyB1biBleGVyY2ljZSwgZGVzIG1vdHMgc29udCBham91dMOpcyDDoCBsYSByw6l2aXNpb24uXG5cbiAgICAvLyAyLiBOYXZpZ3VlciB2ZXJzIGwnw6ljcmFuIGRlIHLDqXZpc2lvbiBkdSB2b2NhYnVsYWlyZVxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoL1LDqXZpc2lvbiBkdSB2b2NhYnVsYWlyZS9pKSk7XG5cbiAgICAvLyAzLiBWw6lyaWZpZXIgcXVlIGxlcyBtb3RzIMOgIHLDqXZpc2VyIHNvbnQgYWZmaWNow6lzXG4gICAgY29uc3Qgd29yZFRvUmV2aXNlID0gYXdhaXQgZmluZEJ5VGV4dCgvTW90IMOgIHLDqXZpc2VyL2kpOyAvLyBSZW1wbGFjZXogcGFyIHVuIHZyYWkgbW90IGRlIHZvdHJlIGV4ZXJjaWNlXG4gICAgZXhwZWN0KHdvcmRUb1JldmlzZSkudG9CZVRydXRoeSgpO1xuXG4gICAgLy8gNC4gRMOpbWFycmVyIHVuZSBzZXNzaW9uIGRlIHLDqXZpc2lvblxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoL0NvbW1lbmNlciBsYSByw6l2aXNpb24vaSkpO1xuXG4gICAgLy8gNS4gU2ltdWxlciBsYSByw6l2aXNpb24gZCd1biBtb3RcbiAgICAvLyAoSW50ZXJhZ2lzc2V6IGF2ZWMgbGVzIGNvbXBvc2FudHMgZGUgdm90cmUgc2Vzc2lvbiBkZSByw6l2aXNpb24pXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgvSmUgbWUgc291dmllbnMvaSkpO1xuXG4gICAgLy8gNi4gVsOpcmlmaWVyIHF1ZSBsZSBtb3QgYSDDqXTDqSByZXRpcsOpIGRlIGxhIGxpc3RlIGRlIHLDqXZpc2lvbiBpbW3DqWRpYXRlXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3Qoc2NyZWVuLnF1ZXJ5QnlUZXh0KC9Nb3Qgw6AgcsOpdmlzZXIvaSkpLnRvQmVOdWxsKCk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQVFBQSxXQUFBLEdBQUtDLElBQUksQ0FBQywwQkFBMEIsRUFBRTtFQUFBLE9BQUFDLE1BQUEsQ0FBQUMsTUFBQSxLQUNqQ0MsSUFBSSxDQUFDQyxhQUFhLENBQUMsMEJBQTBCLENBQUM7SUFDakRDLGFBQWEsRUFBRSxTQUFmQSxhQUFhQSxDQUFBO01BQUEsT0FBUztRQUNwQkMsUUFBUSxFQUFFSCxJQUFJLENBQUNJLEVBQUUsQ0FBQyxDQUFDO1FBQ25CQyxNQUFNLEVBQUVMLElBQUksQ0FBQ0ksRUFBRSxDQUFDO01BQ2xCLENBQUM7SUFBQSxDQUFDO0lBQ0ZFLFFBQVEsRUFBRSxTQUFWQSxRQUFRQSxDQUFBO01BQUEsT0FBUztRQUNmQyxNQUFNLEVBQUUsQ0FBQztNQUNYLENBQUM7SUFBQTtFQUFDO0FBQUEsQ0FDRixDQUFDO0FBQUMsSUFBQUMsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLGtCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFoQkosSUFBQUUsTUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsWUFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksT0FBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUssZ0JBQUEsR0FBQUwsT0FBQTtBQUNBLElBQUFNLFlBQUEsR0FBQU4sT0FBQTtBQUE2RCxJQUFBTyxXQUFBLEdBQUFQLE9BQUE7QUFBQSxTQUFBYixZQUFBO0VBQUEsSUFBQXFCLFFBQUEsR0FBQVIsT0FBQTtJQUFBVCxJQUFBLEdBQUFpQixRQUFBLENBQUFqQixJQUFBO0VBQUFKLFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFJLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQWM3RGtCLFFBQVEsQ0FBQyxzQ0FBc0MsRUFBRSxZQUFNO0VBQ3JEQyxFQUFFLENBQUMsc0RBQXNELE1BQUFULGtCQUFBLENBQUFVLE9BQUEsRUFBRSxhQUFZO0lBQ3JFLElBQUFDLE9BQUEsR0FBa0MsSUFBQUMsbUJBQU0sRUFDdEMsSUFBQU4sV0FBQSxDQUFBTyxHQUFBLEVBQUNSLFlBQUEsQ0FBQVMsV0FBVztRQUFBQyxRQUFBLEVBQ1YsSUFBQVQsV0FBQSxDQUFBTyxHQUFBLEVBQUNULGdCQUFBLENBQUFZLGdCQUFnQjtVQUFBRCxRQUFBLEVBQ2YsSUFBQVQsV0FBQSxDQUFBTyxHQUFBLEVBQUNJLGtCQUFrQjtZQUFBRixRQUFBLEVBQ2pCLElBQUFULFdBQUEsQ0FBQU8sR0FBQSxFQUFDVixPQUFBLENBQUFPLE9BQUcsSUFBRTtVQUFDLENBQ1c7UUFBQyxDQUNMO01BQUMsQ0FDUixDQUNmLENBQUM7TUFST1EsU0FBUyxHQUFBUCxPQUFBLENBQVRPLFNBQVM7TUFBRUMsVUFBVSxHQUFBUixPQUFBLENBQVZRLFVBQVU7SUFlN0JDLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0gsU0FBUyxDQUFDLDBCQUEwQixDQUFDLENBQUM7SUFHdEQsSUFBTUksWUFBWSxTQUFTSCxVQUFVLENBQUMsZ0JBQWdCLENBQUM7SUFDdkRJLE1BQU0sQ0FBQ0QsWUFBWSxDQUFDLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0lBR2pDSixzQkFBUyxDQUFDQyxLQUFLLENBQUNILFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBSXBERSxzQkFBUyxDQUFDQyxLQUFLLENBQUNILFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBRzdDLE1BQU0sSUFBQU8sb0JBQU8sRUFBQyxZQUFNO01BQ2xCRixNQUFNLENBQUNHLE1BQU0sQ0FBQ0MsV0FBVyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQ0MsUUFBUSxDQUFDLENBQUM7SUFDekQsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxFQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119