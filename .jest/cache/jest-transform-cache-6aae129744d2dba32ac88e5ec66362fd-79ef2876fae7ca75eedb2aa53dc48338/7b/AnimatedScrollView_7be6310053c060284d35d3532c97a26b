84b864f0cb9d88e2348d5df2d9dd1e3a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _RefreshControl = _interopRequireDefault(require("../../Components/RefreshControl/RefreshControl"));
var _ScrollView = _interopRequireDefault(require("../../Components/ScrollView/ScrollView"));
var _flattenStyle = _interopRequireDefault(require("../../StyleSheet/flattenStyle"));
var _splitLayoutProps2 = _interopRequireDefault(require("../../StyleSheet/splitLayoutProps"));
var _StyleSheet = _interopRequireDefault(require("../../StyleSheet/StyleSheet"));
var _Platform = _interopRequireDefault(require("../../Utilities/Platform"));
var _useMergeRefs = _interopRequireDefault(require("../../Utilities/useMergeRefs"));
var _createAnimatedComponent = _interopRequireDefault(require("../createAnimatedComponent"));
var _useAnimatedProps5 = _interopRequireDefault(require("../useAnimatedProps"));
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var AnimatedScrollView = React.forwardRef(function AnimatedScrollViewWithOrWithoutInvertedRefreshControl(props, forwardedRef) {
  if (_Platform.default.OS === 'android' && props.refreshControl != null && props.style != null) {
    return (0, _jsxRuntime.jsx)(AnimatedScrollViewWithInvertedRefreshControl, Object.assign({
      scrollEventThrottle: 0.0001
    }, props, {
      ref: forwardedRef,
      refreshControl: props.refreshControl
    }));
  } else {
    return (0, _jsxRuntime.jsx)(AnimatedScrollViewWithoutInvertedRefreshControl, Object.assign({
      scrollEventThrottle: 0.0001
    }, props, {
      ref: forwardedRef
    }));
  }
});
var AnimatedScrollViewWithInvertedRefreshControl = React.forwardRef(function AnimatedScrollViewWithInvertedRefreshControl(props, forwardedRef) {
  var _useMemo = (0, _react.useMemo)(function () {
      var _splitLayoutProps = (0, _splitLayoutProps2.default)((0, _flattenStyle.default)(props.style)),
        outer = _splitLayoutProps.outer,
        inner = _splitLayoutProps.inner;
      return {
        intermediatePropsForRefreshControl: {
          style: outer
        },
        intermediatePropsForScrollView: Object.assign({}, props, {
          style: inner
        })
      };
    }, [props]),
    intermediatePropsForRefreshControl = _useMemo.intermediatePropsForRefreshControl,
    intermediatePropsForScrollView = _useMemo.intermediatePropsForScrollView;
  var _useAnimatedProps = (0, _useAnimatedProps5.default)(intermediatePropsForRefreshControl),
    _useAnimatedProps2 = (0, _slicedToArray2.default)(_useAnimatedProps, 2),
    refreshControlAnimatedProps = _useAnimatedProps2[0],
    refreshControlRef = _useAnimatedProps2[1];
  var refreshControl = React.cloneElement(props.refreshControl, Object.assign({}, refreshControlAnimatedProps, {
    ref: refreshControlRef
  }));
  var _useAnimatedProps3 = (0, _useAnimatedProps5.default)(intermediatePropsForScrollView),
    _useAnimatedProps4 = (0, _slicedToArray2.default)(_useAnimatedProps3, 2),
    scrollViewAnimatedProps = _useAnimatedProps4[0],
    scrollViewRef = _useAnimatedProps4[1];
  var ref = (0, _useMergeRefs.default)(scrollViewRef, forwardedRef);
  return (0, _jsxRuntime.jsx)(_ScrollView.default, Object.assign({}, scrollViewAnimatedProps, {
    ref: ref,
    refreshControl: refreshControl,
    style: _StyleSheet.default.compose(scrollViewAnimatedProps.style, refreshControlAnimatedProps.style)
  }));
});
var AnimatedScrollViewWithoutInvertedRefreshControl = (0, _createAnimatedComponent.default)(_ScrollView.default);
var _default = exports.default = AnimatedScrollView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,