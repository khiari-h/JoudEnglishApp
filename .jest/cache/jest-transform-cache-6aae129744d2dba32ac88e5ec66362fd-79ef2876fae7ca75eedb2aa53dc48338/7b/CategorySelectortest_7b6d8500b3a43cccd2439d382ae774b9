0fe51b6ee249442ea96c12d1fce221e2
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  return Object.assign({}, RN, {
    Animated: Object.assign({}, RN.Animated, {
      Value: MockAnimatedValue,
      timing: mockTiming,
      parallel: mockParallel,
      multiply: mockMultiply,
      View: function View(_ref) {
        var children = _ref.children,
          style = _ref.style,
          onLayout = _ref.onLayout,
          props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
        var processedStyle = Array.isArray(style) ? style.map(function (s) {
          return typeof s === 'object' && s != null && s._nativeTag ? Object.assign({}, s, {
            transform: [{
              scale: 1
            }]
          }) : s;
        }) : style;
        return (0, _jsxRuntime.jsx)(RN.View, Object.assign({
          style: processedStyle,
          onLayout: onLayout
        }, props, {
          children: children
        }));
      }
    }),
    ScrollView: function ScrollView(_ref2) {
      var children = _ref2.children,
        ref = _ref2.ref,
        props = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
      return (0, _jsxRuntime.jsx)(RN.ScrollView, Object.assign({
        ref: ref
      }, props, {
        children: children
      }));
    },
    TouchableOpacity: RN.TouchableOpacity,
    Text: RN.Text,
    View: RN.View
  });
});
_getJestObj().mock('expo-linear-gradient', function () {
  return {
    LinearGradient: function LinearGradient(_ref3) {
      var children = _ref3.children,
        colors = _ref3.colors,
        start = _ref3.start,
        end = _ref3.end,
        style = _ref3.style,
        props = (0, _objectWithoutProperties2.default)(_ref3, _excluded3);
      var _require = require('react-native'),
        View = _require.View;
      return (0, _jsxRuntime.jsx)(View, Object.assign({
        testID: "linear-gradient",
        style: style
      }, props, {
        children: children
      }));
    }
  };
});
_getJestObj().mock('../../../src/components/exercise-common/CategorySelector/style', function () {
  var _require2 = require('react-native'),
    StyleSheet = _require2.StyleSheet;
  return function () {
    return StyleSheet.create({
      container: {
        flex: 1
      },
      backgroundGradient: {
        flex: 1
      },
      scrollView: {
        flexGrow: 0
      },
      scrollContent: {
        paddingHorizontal: 16,
        flexDirection: 'row',
        alignItems: 'center'
      },
      categoryItemWrapper: {
        marginHorizontal: 4,
        marginVertical: 8
      },
      categoryTouchable: {
        borderRadius: 20,
        overflow: 'hidden'
      },
      selectedCategoryItem: {
        paddingHorizontal: 16,
        paddingVertical: 10,
        borderRadius: 20,
        minWidth: 80
      },
      selectedInner: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center'
      },
      selectedCategoryText: {
        color: '#FFFFFF',
        fontWeight: 'bold',
        fontSize: 14
      },
      sparkleContainer: {
        marginLeft: 6
      },
      sparkle: {
        fontSize: 12,
        color: '#FFFFFF'
      },
      categoryItem: {
        paddingHorizontal: 16,
        paddingVertical: 10,
        borderRadius: 20,
        borderWidth: 1,
        backgroundColor: '#FFFFFF',
        minWidth: 80
      },
      categoryInner: {
        alignItems: 'center',
        justifyContent: 'center'
      },
      categoryText: {
        fontWeight: '500',
        fontSize: 14
      }
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _CategorySelector = _interopRequireWildcard(require("../../../src/components/exercise-common/CategorySelector"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "style", "onLayout"],
  _excluded2 = ["children", "ref"],
  _excluded3 = ["children", "colors", "start", "end", "style"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockStart = jest.fn(function (callback) {
  if (callback) {
    setTimeout(function () {
      (0, _reactNative.act)(function () {
        callback();
      });
    }, 0);
  }
});
var mockTiming = jest.fn(function () {
  return {
    start: mockStart
  };
});
var mockParallel = jest.fn(function () {
  return {
    start: mockStart
  };
});
var createMockAnimatedValue = function createMockAnimatedValue() {
  var initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var mockValue = {
    _value: initialValue,
    interpolate: jest.fn(function (config) {
      var inputRange = config.inputRange,
        outputRange = config.outputRange;
      var ratio = initialValue / (inputRange[inputRange.length - 1] || 1);
      var index = Math.min(Math.floor(ratio * outputRange.length), outputRange.length - 1);
      return {
        _value: outputRange[index] || outputRange[0],
        _nativeTag: Math.random()
      };
    }),
    setValue: jest.fn(),
    addListener: jest.fn(function () {
      return 'listener_id';
    }),
    removeListener: jest.fn(),
    removeAllListeners: jest.fn(),
    stopAnimation: jest.fn(),
    resetAnimation: jest.fn()
  };
  return mockValue;
};
var MockAnimatedValue = jest.fn().mockImplementation(createMockAnimatedValue);
var mockMultiply = jest.fn(function (anim1, anim2) {
  return {
    _nativeTag: Math.random(),
    _value: 1,
    interpolate: jest.fn(function () {
      return {
        _value: 1,
        _nativeTag: Math.random()
      };
    })
  };
});
describe('CategorySelector', function () {
  var categories = [{
    id: '1',
    name: 'Grammar'
  }, {
    id: '2',
    name: 'Vocabulary'
  }, {
    id: '3',
    name: 'Reading'
  }];
  var defaultProps = {
    categories: categories,
    onSelectCategory: jest.fn(),
    primaryColor: '#5E60CE'
  };
  beforeEach(function () {
    jest.clearAllMocks();
    MockAnimatedValue.mockClear();
    mockTiming.mockClear();
    mockParallel.mockClear();
    mockStart.mockClear();
    mockMultiply.mockClear();
  });
  afterEach(function () {
    jest.runOnlyPendingTimers();
  });
  describe('Basic rendering', function () {
    it('should render all categories correctly', (0, _asyncToGenerator2.default)(function* () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps))),
        getByText = _render.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('Grammar')).toBeTruthy();
        expect(getByText('Vocabulary')).toBeTruthy();
        expect(getByText('Reading')).toBeTruthy();
      });
    }));
    it('should display sparkle for selected category', (0, _asyncToGenerator2.default)(function* () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
          selectedCategory: "1"
        }))),
        getByText = _render2.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('âœ¨')).toBeTruthy();
      });
    }));
    it('should handle empty categories gracefully', function () {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: [],
          onSelectCategory: jest.fn()
        })),
        container = _render3.container;
      expect(container).toBeTruthy();
    });
  });
  describe('User interactions', function () {
    it('should call onSelectCategory when unselected category is pressed', (0, _asyncToGenerator2.default)(function* () {
      var onSelectCategory = jest.fn();
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
          onSelectCategory: onSelectCategory,
          selectedCategory: "1"
        }))),
        getByText = _render4.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('Vocabulary')).toBeTruthy();
      });
      _reactNative.fireEvent.press(getByText('Vocabulary'));
      yield (0, _reactNative.waitFor)(function () {
        expect(onSelectCategory).toHaveBeenCalledWith('2');
      });
    }));
    it('should not call onSelectCategory for already selected category', (0, _asyncToGenerator2.default)(function* () {
      var onSelectCategory = jest.fn();
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        }))),
        getByText = _render5.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('Grammar')).toBeTruthy();
      });
      _reactNative.fireEvent.press(getByText('Grammar'));
      expect(onSelectCategory).not.toHaveBeenCalled();
    }));
    it('should handle press in/out events without errors', (0, _asyncToGenerator2.default)(function* () {
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps))),
        getByText = _render6.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('Grammar')).toBeTruthy();
      });
      var grammarButton = getByText('Grammar');
      expect(function () {
        (0, _reactNative.fireEvent)(grammarButton, 'pressIn');
        (0, _reactNative.fireEvent)(grammarButton, 'pressOut');
      }).not.toThrow();
    }));
  });
  describe('Animations', function () {
    it('should initialize animations for all categories', (0, _asyncToGenerator2.default)(function* () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps)));
      yield (0, _reactNative.waitFor)(function () {
        expect(MockAnimatedValue).toHaveBeenCalledTimes(6);
      });
    }));
    it('should trigger animations when selectedCategory changes', (0, _asyncToGenerator2.default)(function* () {
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
          selectedCategory: "1"
        }))),
        rerender = _render7.rerender;
      yield (0, _reactNative.waitFor)(function () {
        expect(MockAnimatedValue).toHaveBeenCalled();
      });
      mockTiming.mockClear();
      mockParallel.mockClear();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
          selectedCategory: "2"
        })));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockParallel).toHaveBeenCalled();
      });
    }));
    it('should prevent multiple simultaneous animations', (0, _asyncToGenerator2.default)(function* () {
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
          selectedCategory: "1"
        }))),
        rerender = _render8.rerender;
      yield (0, _reactNative.waitFor)(function () {
        expect(MockAnimatedValue).toHaveBeenCalled();
      });
      mockParallel.mockClear();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
          selectedCategory: "2"
        })));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
          selectedCategory: "3"
        })));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockParallel).toHaveBeenCalledTimes(1);
      }, {
        timeout: 3000
      });
    }));
  });
  describe('Dynamic category management', function () {
    it('should handle category addition', (0, _asyncToGenerator2.default)(function* () {
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps))),
        rerender = _render9.rerender,
        getByText = _render9.getByText;
      var newCategories = [].concat(categories, [{
        id: '4',
        name: 'Writing'
      }]);
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
          categories: newCategories
        })));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('Writing')).toBeTruthy();
      });
    }));
    it('should handle category removal', (0, _asyncToGenerator2.default)(function* () {
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps))),
        rerender = _render0.rerender,
        queryByText = _render0.queryByText,
        getByText = _render0.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('Vocabulary')).toBeTruthy();
      });
      var reducedCategories = [categories[0]];
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
          categories: reducedCategories
        })));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByText('Vocabulary')).toBeFalsy();
        expect(queryByText('Reading')).toBeFalsy();
        expect(getByText('Grammar')).toBeTruthy();
      });
    }));
    it('should maintain animations when categories change', (0, _asyncToGenerator2.default)(function* () {
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
          selectedCategory: "1"
        }))),
        rerender = _render1.rerender;
      yield (0, _reactNative.waitFor)(function () {
        expect(MockAnimatedValue).toHaveBeenCalled();
      });
      MockAnimatedValue.mockClear();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
          categories: [].concat(categories, [{
            id: '4',
            name: 'Writing'
          }]),
          selectedCategory: "1"
        })));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(MockAnimatedValue).toHaveBeenCalled();
      });
    }));
  });
  describe('Accessibility', function () {
    it('should have proper accessibility attributes', (0, _asyncToGenerator2.default)(function* () {
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
          selectedCategory: "1"
        }))),
        getByText = _render10.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('Grammar')).toBeTruthy();
      });
      var grammarButton = getByText('Grammar').parent;
      expect(grammarButton.props.accessibilityRole).toBe('button');
      expect(grammarButton.props.accessibilityLabel).toBe('Grammar');
      expect(grammarButton.props.accessibilityState).toEqual({
        selected: true
      });
    }));
  });
  describe('Styling and colors', function () {
    it('should apply custom primary color', function () {
      var customColor = '#FF6B6B';
      expect(function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
          primaryColor: customColor
        })));
      }).not.toThrow();
    });
    it('should render LinearGradient components', (0, _asyncToGenerator2.default)(function* () {
      var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
          selectedCategory: "1"
        }))),
        getByTestId = _render11.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('linear-gradient')).toBeTruthy();
      });
    }));
  });
  describe('areEqual memoization', function () {
    it('should return true for identical props', function () {
      var props = {
        selectedCategory: '1',
        primaryColor: '#5E60CE',
        categories: [{
          id: '1',
          name: 'Cat1'
        }],
        onSelectCategory: jest.fn()
      };
      expect((0, _CategorySelector.areEqual)(props, props)).toBe(true);
    });
    it('should return false for different selectedCategory', function () {
      var props1 = {
        selectedCategory: '1',
        primaryColor: '#5E60CE',
        categories: [{
          id: '1',
          name: 'Cat1'
        }]
      };
      var props2 = {
        selectedCategory: '2',
        primaryColor: '#5E60CE',
        categories: [{
          id: '1',
          name: 'Cat1'
        }]
      };
      expect((0, _CategorySelector.areEqual)(props1, props2)).toBe(false);
    });
    it('should return false for different primaryColor', function () {
      var props1 = {
        selectedCategory: '1',
        primaryColor: '#5E60CE',
        categories: [{
          id: '1',
          name: 'Cat1'
        }]
      };
      var props2 = {
        selectedCategory: '1',
        primaryColor: '#FF0000',
        categories: [{
          id: '1',
          name: 'Cat1'
        }]
      };
      expect((0, _CategorySelector.areEqual)(props1, props2)).toBe(false);
    });
    it('should return true for same category reference', function () {
      var categories = [{
        id: '1',
        name: 'Cat1'
      }];
      var props1 = {
        selectedCategory: '1',
        primaryColor: '#5E60CE',
        categories: categories
      };
      var props2 = {
        selectedCategory: '1',
        primaryColor: '#5E60CE',
        categories: categories
      };
      expect((0, _CategorySelector.areEqual)(props1, props2)).toBe(true);
    });
    it('should return true for equivalent categories with different references', function () {
      var props1 = {
        selectedCategory: '1',
        primaryColor: '#5E60CE',
        categories: [{
          id: '1',
          name: 'Cat1'
        }, {
          id: '2',
          name: 'Cat2'
        }]
      };
      var props2 = {
        selectedCategory: '1',
        primaryColor: '#5E60CE',
        categories: [{
          id: '1',
          name: 'Cat1'
        }, {
          id: '2',
          name: 'Cat2'
        }]
      };
      expect((0, _CategorySelector.areEqual)(props1, props2)).toBe(true);
    });
    it('should return false for different category content', function () {
      var props1 = {
        selectedCategory: '1',
        primaryColor: '#5E60CE',
        categories: [{
          id: '1',
          name: 'Cat1'
        }]
      };
      var props2 = {
        selectedCategory: '1',
        primaryColor: '#5E60CE',
        categories: [{
          id: '1',
          name: 'Cat2'
        }]
      };
      expect((0, _CategorySelector.areEqual)(props1, props2)).toBe(false);
    });
    it('should return false for different category lengths', function () {
      var props1 = {
        selectedCategory: '1',
        primaryColor: '#5E60CE',
        categories: [{
          id: '1',
          name: 'Cat1'
        }]
      };
      var props2 = {
        selectedCategory: '1',
        primaryColor: '#5E60CE',
        categories: [{
          id: '1',
          name: 'Cat1'
        }, {
          id: '2',
          name: 'Cat2'
        }]
      };
      expect((0, _CategorySelector.areEqual)(props1, props2)).toBe(false);
    });
  });
  describe('Performance', function () {
    it('should not recreate animations unnecessarily', (0, _asyncToGenerator2.default)(function* () {
      var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
          selectedCategory: "1"
        }))),
        rerender = _render12.rerender;
      yield (0, _reactNative.waitFor)(function () {
        expect(MockAnimatedValue).toHaveBeenCalled();
      });
      var initialCallCount = MockAnimatedValue.mock.calls.length;
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
        selectedCategory: "1"
      })));
      yield (0, _reactNative.waitFor)(function () {
        expect(MockAnimatedValue.mock.calls.length).toBe(initialCallCount);
      });
    }));
    it('should handle rapid prop changes gracefully', (0, _asyncToGenerator2.default)(function* () {
      var _render13 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
          selectedCategory: "1"
        }))),
        rerender = _render13.rerender;
      var _loop = function* _loop(i) {
        yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
          rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
            selectedCategory: String(i)
          })));
        }));
      };
      for (var i = 2; i <= 3; i++) {
        yield* _loop(i);
      }
      expect(function () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
          selectedCategory: "1"
        })));
      }).not.toThrow();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,