{"version":3,"names":["_getJestObj","mock","router","push","jest","fn","__esModule","default","saveActivity","getConversationData","getLevelColor","_interopRequireDefault","require","_react","_reactNative","_conversations","_useConversation","_conversationDataHelper","_jsxRuntime","_require","mockUseConversation","useConversation","describe","mockRoute","params","level","beforeEach","clearAllMocks","mockReturnValue","currentScenarioIndex","conversation","message","setMessage","isTyping","suggestions","showHelp","completedScenarios","conversationHistory","loaded","showDetailedProgress","currentScenario","title","description","totalScenarios","hasValidData","changeScenario","sendMessage","useSuggestion","toggleHelp","toggleDetailedProgress","isConversationStarted","stats","completionProgress","currentStep","totalSteps","display","currentHelp","exercises","it","_render","render","jsx","route","getByText","expect","toBeTruthy"],"sources":["ConversationExercise.test.js"],"sourcesContent":["\nimport React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport ConversationExercise from '../../../../src/screens/exercises/conversations';\n\n// Mock expo-router\njest.mock('expo-router', () => ({\n  router: {\n    push: jest.fn(),\n  },\n}));\n\n// Mock hooks\njest.mock('../../../../src/screens/exercises/conversations/hooks/useConversation', () => jest.fn());\njest.mock('../../../../src/hooks/useLastActivity', () => ({\n  __esModule: true,\n  default: () => ({\n    saveActivity: jest.fn(),\n  }),\n}));\n\n// Mock utils\njest.mock('../../../../src/utils/conversation/conversationDataHelper', () => ({\n  getConversationData: jest.fn(),\n  getLevelColor: jest.fn(() => '#000000'),\n}));\n\n// Import mocks\nimport useConversation from '../../../../src/screens/exercises/conversations/hooks/useConversation';\nimport { getConversationData } from '../../../../src/utils/conversation/conversationDataHelper';\n\nconst mockUseConversation = useConversation;\n\ndescribe('ConversationExercise', () => {\n  const mockRoute = { params: { level: 'A1' } };\n\n  beforeEach(() => {\n    // Reset mocks before each test\n    jest.clearAllMocks();\n\n    // Provide a default mock implementation for useConversation\n    mockUseConversation.mockReturnValue({\n      currentScenarioIndex: 0,\n      conversation: [],\n      message: '',\n      setMessage: jest.fn(),\n      isTyping: false,\n      suggestions: [],\n      showHelp: false,\n      completedScenarios: [],\n      conversationHistory: [],\n      loaded: true,\n      showDetailedProgress: false,\n      currentScenario: { title: 'Test Scenario', description: 'Test Description' },\n      totalScenarios: 1,\n      hasValidData: true,\n      changeScenario: jest.fn(),\n      sendMessage: jest.fn(),\n      useSuggestion: jest.fn(),\n      toggleHelp: jest.fn(),\n      toggleDetailedProgress: jest.fn(),\n      isConversationStarted: true,\n      stats: { completionProgress: 0, currentStep: 1, totalSteps: 10 },\n      display: { currentHelp: 'Some help text' },\n    });\n\n    getConversationData.mockReturnValue({\n        exercises: [{ title: 'Scenario 1' }]\n    });\n  });\n\n  it('should render correctly when loaded', () => {\n    const { getByText } = render(<ConversationExercise route={mockRoute} />);\n    expect(getByText('Test Scenario')).toBeTruthy();\n    expect(getByText('Test Description')).toBeTruthy();\n  });\n\n});\n"],"mappings":"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","ignoreList":[]}