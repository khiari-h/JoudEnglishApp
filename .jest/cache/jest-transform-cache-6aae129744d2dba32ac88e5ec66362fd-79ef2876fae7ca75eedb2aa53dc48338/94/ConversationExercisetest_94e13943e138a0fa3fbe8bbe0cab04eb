396ced5a66a6a9996e216391b6f06f86
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
_getJestObj().mock('../../../../src/screens/exercises/conversations/hooks/useConversation', function () {
  return jest.fn();
});
_getJestObj().mock('../../../../src/hooks/useLastActivity', function () {
  return {
    __esModule: true,
    default: function _default() {
      return {
        saveActivity: jest.fn()
      };
    }
  };
});
_getJestObj().mock('../../../../src/utils/conversation/conversationDataHelper', function () {
  return {
    getConversationData: jest.fn(),
    getLevelColor: jest.fn(function () {
      return '#000000';
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _conversations = _interopRequireDefault(require("../../../../src/screens/exercises/conversations"));
var _useConversation = _interopRequireDefault(require("../../../../src/screens/exercises/conversations/hooks/useConversation"));
var _conversationDataHelper = require("../../../../src/utils/conversation/conversationDataHelper");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockUseConversation = _useConversation.default;
describe('ConversationExercise', function () {
  var mockRoute = {
    params: {
      level: 'A1'
    }
  };
  beforeEach(function () {
    jest.clearAllMocks();
    mockUseConversation.mockReturnValue({
      currentScenarioIndex: 0,
      conversation: [],
      message: '',
      setMessage: jest.fn(),
      isTyping: false,
      suggestions: [],
      showHelp: false,
      completedScenarios: [],
      conversationHistory: [],
      loaded: true,
      showDetailedProgress: false,
      currentScenario: {
        title: 'Test Scenario',
        description: 'Test Description'
      },
      totalScenarios: 1,
      hasValidData: true,
      changeScenario: jest.fn(),
      sendMessage: jest.fn(),
      useSuggestion: jest.fn(),
      toggleHelp: jest.fn(),
      toggleDetailedProgress: jest.fn(),
      isConversationStarted: true,
      stats: {
        completionProgress: 0,
        currentStep: 1,
        totalSteps: 10
      },
      display: {
        currentHelp: 'Some help text'
      }
    });
    _conversationDataHelper.getConversationData.mockReturnValue({
      exercises: [{
        title: 'Scenario 1'
      }]
    });
  });
  it('should render correctly when loaded', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_conversations.default, {
        route: mockRoute
      })),
      getByText = _render.getByText;
    expect(getByText('Test Scenario')).toBeTruthy();
    expect(getByText('Test Description')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJyb3V0ZXIiLCJwdXNoIiwiamVzdCIsImZuIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJzYXZlQWN0aXZpdHkiLCJnZXRDb252ZXJzYXRpb25EYXRhIiwiZ2V0TGV2ZWxDb2xvciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3JlYWN0IiwiX3JlYWN0TmF0aXZlIiwiX2NvbnZlcnNhdGlvbnMiLCJfdXNlQ29udmVyc2F0aW9uIiwiX2NvbnZlcnNhdGlvbkRhdGFIZWxwZXIiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwibW9ja1VzZUNvbnZlcnNhdGlvbiIsInVzZUNvbnZlcnNhdGlvbiIsImRlc2NyaWJlIiwibW9ja1JvdXRlIiwicGFyYW1zIiwibGV2ZWwiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIm1vY2tSZXR1cm5WYWx1ZSIsImN1cnJlbnRTY2VuYXJpb0luZGV4IiwiY29udmVyc2F0aW9uIiwibWVzc2FnZSIsInNldE1lc3NhZ2UiLCJpc1R5cGluZyIsInN1Z2dlc3Rpb25zIiwic2hvd0hlbHAiLCJjb21wbGV0ZWRTY2VuYXJpb3MiLCJjb252ZXJzYXRpb25IaXN0b3J5IiwibG9hZGVkIiwic2hvd0RldGFpbGVkUHJvZ3Jlc3MiLCJjdXJyZW50U2NlbmFyaW8iLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwidG90YWxTY2VuYXJpb3MiLCJoYXNWYWxpZERhdGEiLCJjaGFuZ2VTY2VuYXJpbyIsInNlbmRNZXNzYWdlIiwidXNlU3VnZ2VzdGlvbiIsInRvZ2dsZUhlbHAiLCJ0b2dnbGVEZXRhaWxlZFByb2dyZXNzIiwiaXNDb252ZXJzYXRpb25TdGFydGVkIiwic3RhdHMiLCJjb21wbGV0aW9uUHJvZ3Jlc3MiLCJjdXJyZW50U3RlcCIsInRvdGFsU3RlcHMiLCJkaXNwbGF5IiwiY3VycmVudEhlbHAiLCJleGVyY2lzZXMiLCJpdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJyb3V0ZSIsImdldEJ5VGV4dCIsImV4cGVjdCIsInRvQmVUcnV0aHkiXSwic291cmNlcyI6WyJDb252ZXJzYXRpb25FeGVyY2lzZS50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IENvbnZlcnNhdGlvbkV4ZXJjaXNlIGZyb20gJy4uLy4uLy4uLy4uL3NyYy9zY3JlZW5zL2V4ZXJjaXNlcy9jb252ZXJzYXRpb25zJztcblxuLy8gTW9jayBleHBvLXJvdXRlclxuamVzdC5tb2NrKCdleHBvLXJvdXRlcicsICgpID0+ICh7XG4gIHJvdXRlcjoge1xuICAgIHB1c2g6IGplc3QuZm4oKSxcbiAgfSxcbn0pKTtcblxuLy8gTW9jayBob29rc1xuamVzdC5tb2NrKCcuLi8uLi8uLi8uLi9zcmMvc2NyZWVucy9leGVyY2lzZXMvY29udmVyc2F0aW9ucy9ob29rcy91c2VDb252ZXJzYXRpb24nLCAoKSA9PiBqZXN0LmZuKCkpO1xuamVzdC5tb2NrKCcuLi8uLi8uLi8uLi9zcmMvaG9va3MvdXNlTGFzdEFjdGl2aXR5JywgKCkgPT4gKHtcbiAgX19lc01vZHVsZTogdHJ1ZSxcbiAgZGVmYXVsdDogKCkgPT4gKHtcbiAgICBzYXZlQWN0aXZpdHk6IGplc3QuZm4oKSxcbiAgfSksXG59KSk7XG5cbi8vIE1vY2sgdXRpbHNcbmplc3QubW9jaygnLi4vLi4vLi4vLi4vc3JjL3V0aWxzL2NvbnZlcnNhdGlvbi9jb252ZXJzYXRpb25EYXRhSGVscGVyJywgKCkgPT4gKHtcbiAgZ2V0Q29udmVyc2F0aW9uRGF0YTogamVzdC5mbigpLFxuICBnZXRMZXZlbENvbG9yOiBqZXN0LmZuKCgpID0+ICcjMDAwMDAwJyksXG59KSk7XG5cbi8vIEltcG9ydCBtb2Nrc1xuaW1wb3J0IHVzZUNvbnZlcnNhdGlvbiBmcm9tICcuLi8uLi8uLi8uLi9zcmMvc2NyZWVucy9leGVyY2lzZXMvY29udmVyc2F0aW9ucy9ob29rcy91c2VDb252ZXJzYXRpb24nO1xuaW1wb3J0IHsgZ2V0Q29udmVyc2F0aW9uRGF0YSB9IGZyb20gJy4uLy4uLy4uLy4uL3NyYy91dGlscy9jb252ZXJzYXRpb24vY29udmVyc2F0aW9uRGF0YUhlbHBlcic7XG5cbmNvbnN0IG1vY2tVc2VDb252ZXJzYXRpb24gPSB1c2VDb252ZXJzYXRpb247XG5cbmRlc2NyaWJlKCdDb252ZXJzYXRpb25FeGVyY2lzZScsICgpID0+IHtcbiAgY29uc3QgbW9ja1JvdXRlID0geyBwYXJhbXM6IHsgbGV2ZWw6ICdBMScgfSB9O1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIC8vIFJlc2V0IG1vY2tzIGJlZm9yZSBlYWNoIHRlc3RcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcblxuICAgIC8vIFByb3ZpZGUgYSBkZWZhdWx0IG1vY2sgaW1wbGVtZW50YXRpb24gZm9yIHVzZUNvbnZlcnNhdGlvblxuICAgIG1vY2tVc2VDb252ZXJzYXRpb24ubW9ja1JldHVyblZhbHVlKHtcbiAgICAgIGN1cnJlbnRTY2VuYXJpb0luZGV4OiAwLFxuICAgICAgY29udmVyc2F0aW9uOiBbXSxcbiAgICAgIG1lc3NhZ2U6ICcnLFxuICAgICAgc2V0TWVzc2FnZTogamVzdC5mbigpLFxuICAgICAgaXNUeXBpbmc6IGZhbHNlLFxuICAgICAgc3VnZ2VzdGlvbnM6IFtdLFxuICAgICAgc2hvd0hlbHA6IGZhbHNlLFxuICAgICAgY29tcGxldGVkU2NlbmFyaW9zOiBbXSxcbiAgICAgIGNvbnZlcnNhdGlvbkhpc3Rvcnk6IFtdLFxuICAgICAgbG9hZGVkOiB0cnVlLFxuICAgICAgc2hvd0RldGFpbGVkUHJvZ3Jlc3M6IGZhbHNlLFxuICAgICAgY3VycmVudFNjZW5hcmlvOiB7IHRpdGxlOiAnVGVzdCBTY2VuYXJpbycsIGRlc2NyaXB0aW9uOiAnVGVzdCBEZXNjcmlwdGlvbicgfSxcbiAgICAgIHRvdGFsU2NlbmFyaW9zOiAxLFxuICAgICAgaGFzVmFsaWREYXRhOiB0cnVlLFxuICAgICAgY2hhbmdlU2NlbmFyaW86IGplc3QuZm4oKSxcbiAgICAgIHNlbmRNZXNzYWdlOiBqZXN0LmZuKCksXG4gICAgICB1c2VTdWdnZXN0aW9uOiBqZXN0LmZuKCksXG4gICAgICB0b2dnbGVIZWxwOiBqZXN0LmZuKCksXG4gICAgICB0b2dnbGVEZXRhaWxlZFByb2dyZXNzOiBqZXN0LmZuKCksXG4gICAgICBpc0NvbnZlcnNhdGlvblN0YXJ0ZWQ6IHRydWUsXG4gICAgICBzdGF0czogeyBjb21wbGV0aW9uUHJvZ3Jlc3M6IDAsIGN1cnJlbnRTdGVwOiAxLCB0b3RhbFN0ZXBzOiAxMCB9LFxuICAgICAgZGlzcGxheTogeyBjdXJyZW50SGVscDogJ1NvbWUgaGVscCB0ZXh0JyB9LFxuICAgIH0pO1xuXG4gICAgZ2V0Q29udmVyc2F0aW9uRGF0YS5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgICBleGVyY2lzZXM6IFt7IHRpdGxlOiAnU2NlbmFyaW8gMScgfV1cbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgY29ycmVjdGx5IHdoZW4gbG9hZGVkJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPENvbnZlcnNhdGlvbkV4ZXJjaXNlIHJvdXRlPXttb2NrUm91dGV9IC8+KTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdUZXN0IFNjZW5hcmlvJykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdUZXN0IERlc2NyaXB0aW9uJykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFNQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsYUFBYSxFQUFFO0VBQUEsT0FBTztJQUM5QkMsTUFBTSxFQUFFO01BQ05DLElBQUksRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUM7SUFDaEI7RUFDRixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBR0hMLFdBQUEsR0FBS0MsSUFBSSxDQUFDLHVFQUF1RSxFQUFFO0VBQUEsT0FBTUcsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztBQUFBLEVBQUM7QUFDbkdMLFdBQUEsR0FBS0MsSUFBSSxDQUFDLHVDQUF1QyxFQUFFO0VBQUEsT0FBTztJQUN4REssVUFBVSxFQUFFLElBQUk7SUFDaEJDLE9BQU8sRUFBRSxTQUFUQSxRQUFPQSxDQUFBO01BQUEsT0FBUztRQUNkQyxZQUFZLEVBQUVKLElBQUksQ0FBQ0MsRUFBRSxDQUFDO01BQ3hCLENBQUM7SUFBQTtFQUNILENBQUM7QUFBQSxDQUFDLENBQUM7QUFHSEwsV0FBQSxHQUFLQyxJQUFJLENBQUMsMkRBQTJELEVBQUU7RUFBQSxPQUFPO0lBQzVFUSxtQkFBbUIsRUFBRUwsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUM5QkssYUFBYSxFQUFFTixJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFBLE9BQU0sU0FBUztJQUFBO0VBQ3hDLENBQUM7QUFBQSxDQUFDLENBQUM7QUFBQyxJQUFBTSxzQkFBQSxHQUFBQyxPQUFBO0FBeEJKLElBQUFDLE1BQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFlBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLGNBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQXlCQSxJQUFBSSxnQkFBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUssdUJBQUEsR0FBQUwsT0FBQTtBQUFnRyxJQUFBTSxXQUFBLEdBQUFOLE9BQUE7QUFBQSxTQUFBWixZQUFBO0VBQUEsSUFBQW1CLFFBQUEsR0FBQVAsT0FBQTtJQUFBUixJQUFBLEdBQUFlLFFBQUEsQ0FBQWYsSUFBQTtFQUFBSixXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBSSxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFFaEcsSUFBTWdCLG1CQUFtQixHQUFHQyx3QkFBZTtBQUUzQ0MsUUFBUSxDQUFDLHNCQUFzQixFQUFFLFlBQU07RUFDckMsSUFBTUMsU0FBUyxHQUFHO0lBQUVDLE1BQU0sRUFBRTtNQUFFQyxLQUFLLEVBQUU7SUFBSztFQUFFLENBQUM7RUFFN0NDLFVBQVUsQ0FBQyxZQUFNO0lBRWZ0QixJQUFJLENBQUN1QixhQUFhLENBQUMsQ0FBQztJQUdwQlAsbUJBQW1CLENBQUNRLGVBQWUsQ0FBQztNQUNsQ0Msb0JBQW9CLEVBQUUsQ0FBQztNQUN2QkMsWUFBWSxFQUFFLEVBQUU7TUFDaEJDLE9BQU8sRUFBRSxFQUFFO01BQ1hDLFVBQVUsRUFBRTVCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDckI0QixRQUFRLEVBQUUsS0FBSztNQUNmQyxXQUFXLEVBQUUsRUFBRTtNQUNmQyxRQUFRLEVBQUUsS0FBSztNQUNmQyxrQkFBa0IsRUFBRSxFQUFFO01BQ3RCQyxtQkFBbUIsRUFBRSxFQUFFO01BQ3ZCQyxNQUFNLEVBQUUsSUFBSTtNQUNaQyxvQkFBb0IsRUFBRSxLQUFLO01BQzNCQyxlQUFlLEVBQUU7UUFBRUMsS0FBSyxFQUFFLGVBQWU7UUFBRUMsV0FBVyxFQUFFO01BQW1CLENBQUM7TUFDNUVDLGNBQWMsRUFBRSxDQUFDO01BQ2pCQyxZQUFZLEVBQUUsSUFBSTtNQUNsQkMsY0FBYyxFQUFFekMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUN6QnlDLFdBQVcsRUFBRTFDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDdEIwQyxhQUFhLEVBQUUzQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ3hCMkMsVUFBVSxFQUFFNUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNyQjRDLHNCQUFzQixFQUFFN0MsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNqQzZDLHFCQUFxQixFQUFFLElBQUk7TUFDM0JDLEtBQUssRUFBRTtRQUFFQyxrQkFBa0IsRUFBRSxDQUFDO1FBQUVDLFdBQVcsRUFBRSxDQUFDO1FBQUVDLFVBQVUsRUFBRTtNQUFHLENBQUM7TUFDaEVDLE9BQU8sRUFBRTtRQUFFQyxXQUFXLEVBQUU7TUFBaUI7SUFDM0MsQ0FBQyxDQUFDO0lBRUYvQywyQ0FBbUIsQ0FBQ21CLGVBQWUsQ0FBQztNQUNoQzZCLFNBQVMsRUFBRSxDQUFDO1FBQUVoQixLQUFLLEVBQUU7TUFBYSxDQUFDO0lBQ3ZDLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztFQUVGaUIsRUFBRSxDQUFDLHFDQUFxQyxFQUFFLFlBQU07SUFDOUMsSUFBQUMsT0FBQSxHQUFzQixJQUFBQyxtQkFBTSxFQUFDLElBQUExQyxXQUFBLENBQUEyQyxHQUFBLEVBQUM5QyxjQUFBLENBQUFSLE9BQW9CO1FBQUN1RCxLQUFLLEVBQUV2QztNQUFVLENBQUUsQ0FBQyxDQUFDO01BQWhFd0MsU0FBUyxHQUFBSixPQUFBLENBQVRJLFNBQVM7SUFDakJDLE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0lBQy9DRCxNQUFNLENBQUNELFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0VBQ3BELENBQUMsQ0FBQztBQUVKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==