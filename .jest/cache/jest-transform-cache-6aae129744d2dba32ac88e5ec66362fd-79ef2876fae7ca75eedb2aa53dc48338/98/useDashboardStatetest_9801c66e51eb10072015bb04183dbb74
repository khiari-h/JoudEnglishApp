3e73dc75a30bd9f5c6e7526460b09f94
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _useDashboardState = require("../../../../src/screens/Dashboard/hooks/useDashboardState");
describe('useDashboardState', function () {
  var mockLoadLastActivities = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
    mockLoadLastActivities.mockResolvedValue();
  });
  it('devrait initialiser avec les valeurs par défaut', function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardState.useDashboardState)(mockLoadLastActivities);
      }),
      result = _renderHook.result;
    expect(result.current.showLevelProgress).toBe(false);
    expect(result.current.refreshing).toBe(false);
    expect(result.current.activeTab).toBe('home');
  });
  it('devrait ouvrir et fermer la modal de progression', function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardState.useDashboardState)(mockLoadLastActivities);
      }),
      result = _renderHook2.result;
    (0, _reactNative.act)(function () {
      result.current.openLevelProgressModal();
    });
    expect(result.current.showLevelProgress).toBe(true);
    (0, _reactNative.act)(function () {
      result.current.closeLevelProgressModal();
    });
    expect(result.current.showLevelProgress).toBe(false);
  });
  it('devrait changer l\'état de la modal directement', function () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardState.useDashboardState)(mockLoadLastActivities);
      }),
      result = _renderHook3.result;
    (0, _reactNative.act)(function () {
      result.current.setShowLevelProgress(true);
    });
    expect(result.current.showLevelProgress).toBe(true);
    (0, _reactNative.act)(function () {
      result.current.setShowLevelProgress(false);
    });
    expect(result.current.showLevelProgress).toBe(false);
  });
  it('devrait changer l\'onglet actif', function () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardState.useDashboardState)(mockLoadLastActivities);
      }),
      result = _renderHook4.result;
    (0, _reactNative.act)(function () {
      result.current.setActiveTab('progress');
    });
    expect(result.current.activeTab).toBe('progress');
    (0, _reactNative.act)(function () {
      result.current.setActiveTab('settings');
    });
    expect(result.current.activeTab).toBe('settings');
  });
  it('devrait gérer le pull-to-refresh avec succès', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardState.useDashboardState)(mockLoadLastActivities);
      }),
      result = _renderHook5.result;
    expect(result.current.refreshing).toBe(false);
    var refreshPromise = (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.onRefresh();
    }));
    expect(result.current.refreshing).toBe(true);
    yield refreshPromise;
    expect(result.current.refreshing).toBe(false);
    expect(mockLoadLastActivities).toHaveBeenCalledTimes(1);
  }));
  it('devrait gérer les erreurs de refresh gracieusement', (0, _asyncToGenerator2.default)(function* () {
    mockLoadLastActivities.mockRejectedValue(new Error('Network error'));
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardState.useDashboardState)(mockLoadLastActivities);
      }),
      result = _renderHook6.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.onRefresh();
    }));
    expect(result.current.refreshing).toBe(false);
    expect(mockLoadLastActivities).toHaveBeenCalledTimes(1);
  }));
  it('devrait mémoriser la fonction onRefresh', function () {
    var _renderHook7 = (0, _reactNative.renderHook)(function (_ref5) {
        var loadFn = _ref5.loadFn;
        return (0, _useDashboardState.useDashboardState)(loadFn);
      }, {
        initialProps: {
          loadFn: mockLoadLastActivities
        }
      }),
      result = _renderHook7.result,
      rerender = _renderHook7.rerender;
    var initialOnRefresh = result.current.onRefresh;
    rerender({
      loadFn: mockLoadLastActivities
    });
    expect(result.current.onRefresh).toBe(initialOnRefresh);
    var newMockFn = jest.fn();
    rerender({
      loadFn: newMockFn
    });
    expect(result.current.onRefresh).not.toBe(initialOnRefresh);
  });
  it('devrait mémoriser les fonctions de modal', function () {
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardState.useDashboardState)(mockLoadLastActivities);
      }),
      result = _renderHook8.result,
      rerender = _renderHook8.rerender;
    var initialOpenModal = result.current.openLevelProgressModal;
    var initialCloseModal = result.current.closeLevelProgressModal;
    rerender();
    expect(result.current.openLevelProgressModal).toBe(initialOpenModal);
    expect(result.current.closeLevelProgressModal).toBe(initialCloseModal);
  });
  it('devrait permettre plusieurs refresh simultanés sans conflit', (0, _asyncToGenerator2.default)(function* () {
    var resolveFirst, resolveSecond;
    var firstCall = new Promise(function (resolve) {
      resolveFirst = resolve;
    });
    var secondCall = new Promise(function (resolve) {
      resolveSecond = resolve;
    });
    mockLoadLastActivities.mockReturnValueOnce(firstCall).mockReturnValueOnce(secondCall);
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardState.useDashboardState)(mockLoadLastActivities);
      }),
      result = _renderHook9.result;
    var firstRefresh = (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.onRefresh();
    }));
    var secondRefresh = (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.onRefresh();
    }));
    expect(result.current.refreshing).toBe(true);
    resolveFirst();
    yield firstRefresh;
    resolveSecond();
    yield secondRefresh;
    expect(result.current.refreshing).toBe(false);
    expect(mockLoadLastActivities).toHaveBeenCalledTimes(2);
  }));
  it('devrait exposer toutes les fonctions et états nécessaires', function () {
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardState.useDashboardState)(mockLoadLastActivities);
      }),
      result = _renderHook0.result;
    expect(typeof result.current.showLevelProgress).toBe('boolean');
    expect(typeof result.current.refreshing).toBe('boolean');
    expect(typeof result.current.activeTab).toBe('string');
    expect(typeof result.current.setShowLevelProgress).toBe('function');
    expect(typeof result.current.openLevelProgressModal).toBe('function');
    expect(typeof result.current.closeLevelProgressModal).toBe('function');
    expect(typeof result.current.setActiveTab).toBe('function');
    expect(typeof result.current.onRefresh).toBe('function');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX3VzZURhc2hib2FyZFN0YXRlIiwiZGVzY3JpYmUiLCJtb2NrTG9hZExhc3RBY3Rpdml0aWVzIiwiamVzdCIsImZuIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsIml0IiwiX3JlbmRlckhvb2siLCJyZW5kZXJIb29rIiwidXNlRGFzaGJvYXJkU3RhdGUiLCJyZXN1bHQiLCJleHBlY3QiLCJjdXJyZW50Iiwic2hvd0xldmVsUHJvZ3Jlc3MiLCJ0b0JlIiwicmVmcmVzaGluZyIsImFjdGl2ZVRhYiIsIl9yZW5kZXJIb29rMiIsImFjdCIsIm9wZW5MZXZlbFByb2dyZXNzTW9kYWwiLCJjbG9zZUxldmVsUHJvZ3Jlc3NNb2RhbCIsIl9yZW5kZXJIb29rMyIsInNldFNob3dMZXZlbFByb2dyZXNzIiwiX3JlbmRlckhvb2s0Iiwic2V0QWN0aXZlVGFiIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiZGVmYXVsdCIsIl9yZW5kZXJIb29rNSIsInJlZnJlc2hQcm9taXNlIiwib25SZWZyZXNoIiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIiwibW9ja1JlamVjdGVkVmFsdWUiLCJFcnJvciIsIl9yZW5kZXJIb29rNiIsIl9yZW5kZXJIb29rNyIsIl9yZWY1IiwibG9hZEZuIiwiaW5pdGlhbFByb3BzIiwicmVyZW5kZXIiLCJpbml0aWFsT25SZWZyZXNoIiwibmV3TW9ja0ZuIiwibm90IiwiX3JlbmRlckhvb2s4IiwiaW5pdGlhbE9wZW5Nb2RhbCIsImluaXRpYWxDbG9zZU1vZGFsIiwicmVzb2x2ZUZpcnN0IiwicmVzb2x2ZVNlY29uZCIsImZpcnN0Q2FsbCIsIlByb21pc2UiLCJyZXNvbHZlIiwic2Vjb25kQ2FsbCIsIm1vY2tSZXR1cm5WYWx1ZU9uY2UiLCJfcmVuZGVySG9vazkiLCJmaXJzdFJlZnJlc2giLCJzZWNvbmRSZWZyZXNoIiwiX3JlbmRlckhvb2swIl0sInNvdXJjZXMiOlsidXNlRGFzaGJvYXJkU3RhdGUudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBfX3Rlc3RzX18vc2NyZWVucy9EYXNoYm9hcmQvaG9va3MvdXNlRGFzaGJvYXJkU3RhdGUudGVzdC5qc1xuaW1wb3J0IHsgcmVuZGVySG9vaywgYWN0LCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgdXNlRGFzaGJvYXJkU3RhdGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zcmMvc2NyZWVucy9EYXNoYm9hcmQvaG9va3MvdXNlRGFzaGJvYXJkU3RhdGUnO1xuXG5kZXNjcmliZSgndXNlRGFzaGJvYXJkU3RhdGUnLCAoKSA9PiB7XG4gIGNvbnN0IG1vY2tMb2FkTGFzdEFjdGl2aXRpZXMgPSBqZXN0LmZuKCk7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gICAgbW9ja0xvYWRMYXN0QWN0aXZpdGllcy5tb2NrUmVzb2x2ZWRWYWx1ZSgpO1xuICB9KTtcblxuICBpdCgnZGV2cmFpdCBpbml0aWFsaXNlciBhdmVjIGxlcyB2YWxldXJzIHBhciBkw6lmYXV0JywgKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IFxuICAgICAgdXNlRGFzaGJvYXJkU3RhdGUobW9ja0xvYWRMYXN0QWN0aXZpdGllcylcbiAgICApO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnNob3dMZXZlbFByb2dyZXNzKS50b0JlKGZhbHNlKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQucmVmcmVzaGluZykudG9CZShmYWxzZSk7XG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmFjdGl2ZVRhYikudG9CZSgnaG9tZScpO1xuICB9KTtcblxuICBpdCgnZGV2cmFpdCBvdXZyaXIgZXQgZmVybWVyIGxhIG1vZGFsIGRlIHByb2dyZXNzaW9uJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IFxuICAgICAgdXNlRGFzaGJvYXJkU3RhdGUobW9ja0xvYWRMYXN0QWN0aXZpdGllcylcbiAgICApO1xuXG4gICAgLy8gT3V2cmlyIGxhIG1vZGFsXG4gICAgYWN0KCgpID0+IHtcbiAgICAgIHJlc3VsdC5jdXJyZW50Lm9wZW5MZXZlbFByb2dyZXNzTW9kYWwoKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5zaG93TGV2ZWxQcm9ncmVzcykudG9CZSh0cnVlKTtcblxuICAgIC8vIEZlcm1lciBsYSBtb2RhbFxuICAgIGFjdCgoKSA9PiB7XG4gICAgICByZXN1bHQuY3VycmVudC5jbG9zZUxldmVsUHJvZ3Jlc3NNb2RhbCgpO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnNob3dMZXZlbFByb2dyZXNzKS50b0JlKGZhbHNlKTtcbiAgfSk7XG5cbiAgaXQoJ2RldnJhaXQgY2hhbmdlciBsXFwnw6l0YXQgZGUgbGEgbW9kYWwgZGlyZWN0ZW1lbnQnLCAoKSA9PiB7XG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gXG4gICAgICB1c2VEYXNoYm9hcmRTdGF0ZShtb2NrTG9hZExhc3RBY3Rpdml0aWVzKVxuICAgICk7XG5cbiAgICBhY3QoKCkgPT4ge1xuICAgICAgcmVzdWx0LmN1cnJlbnQuc2V0U2hvd0xldmVsUHJvZ3Jlc3ModHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuc2hvd0xldmVsUHJvZ3Jlc3MpLnRvQmUodHJ1ZSk7XG5cbiAgICBhY3QoKCkgPT4ge1xuICAgICAgcmVzdWx0LmN1cnJlbnQuc2V0U2hvd0xldmVsUHJvZ3Jlc3MoZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnNob3dMZXZlbFByb2dyZXNzKS50b0JlKGZhbHNlKTtcbiAgfSk7XG5cbiAgaXQoJ2RldnJhaXQgY2hhbmdlciBsXFwnb25nbGV0IGFjdGlmJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IFxuICAgICAgdXNlRGFzaGJvYXJkU3RhdGUobW9ja0xvYWRMYXN0QWN0aXZpdGllcylcbiAgICApO1xuXG4gICAgYWN0KCgpID0+IHtcbiAgICAgIHJlc3VsdC5jdXJyZW50LnNldEFjdGl2ZVRhYigncHJvZ3Jlc3MnKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5hY3RpdmVUYWIpLnRvQmUoJ3Byb2dyZXNzJyk7XG5cbiAgICBhY3QoKCkgPT4ge1xuICAgICAgcmVzdWx0LmN1cnJlbnQuc2V0QWN0aXZlVGFiKCdzZXR0aW5ncycpO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmFjdGl2ZVRhYikudG9CZSgnc2V0dGluZ3MnKTtcbiAgfSk7XG5cbiAgaXQoJ2RldnJhaXQgZ8OpcmVyIGxlIHB1bGwtdG8tcmVmcmVzaCBhdmVjIHN1Y2PDqHMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gXG4gICAgICB1c2VEYXNoYm9hcmRTdGF0ZShtb2NrTG9hZExhc3RBY3Rpdml0aWVzKVxuICAgICk7XG5cbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQucmVmcmVzaGluZykudG9CZShmYWxzZSk7XG5cbiAgICBjb25zdCByZWZyZXNoUHJvbWlzZSA9IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5vblJlZnJlc2goKTtcbiAgICB9KTtcblxuICAgIC8vIFBlbmRhbnQgbGUgcmVmcmVzaFxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5yZWZyZXNoaW5nKS50b0JlKHRydWUpO1xuXG4gICAgYXdhaXQgcmVmcmVzaFByb21pc2U7XG5cbiAgICAvLyBBcHLDqHMgbGUgcmVmcmVzaFxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5yZWZyZXNoaW5nKS50b0JlKGZhbHNlKTtcbiAgICBleHBlY3QobW9ja0xvYWRMYXN0QWN0aXZpdGllcykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICB9KTtcblxuICBpdCgnZGV2cmFpdCBnw6lyZXIgbGVzIGVycmV1cnMgZGUgcmVmcmVzaCBncmFjaWV1c2VtZW50JywgYXN5bmMgKCkgPT4ge1xuICAgIG1vY2tMb2FkTGFzdEFjdGl2aXRpZXMubW9ja1JlamVjdGVkVmFsdWUobmV3IEVycm9yKCdOZXR3b3JrIGVycm9yJykpO1xuXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gXG4gICAgICB1c2VEYXNoYm9hcmRTdGF0ZShtb2NrTG9hZExhc3RBY3Rpdml0aWVzKVxuICAgICk7XG5cbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgcmVzdWx0LmN1cnJlbnQub25SZWZyZXNoKCk7XG4gICAgfSk7XG5cbiAgICAvLyBMZSByZWZyZXNoaW5nIGRldnJhaXQgw6p0cmUgcmVtaXMgw6AgZmFsc2UgbcOqbWUgZW4gY2FzIGQnZXJyZXVyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnJlZnJlc2hpbmcpLnRvQmUoZmFsc2UpO1xuICAgIGV4cGVjdChtb2NrTG9hZExhc3RBY3Rpdml0aWVzKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xuXG4gIGl0KCdkZXZyYWl0IG3DqW1vcmlzZXIgbGEgZm9uY3Rpb24gb25SZWZyZXNoJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVzdWx0LCByZXJlbmRlciB9ID0gcmVuZGVySG9vayhcbiAgICAgICh7IGxvYWRGbiB9KSA9PiB1c2VEYXNoYm9hcmRTdGF0ZShsb2FkRm4pLFxuICAgICAgeyBpbml0aWFsUHJvcHM6IHsgbG9hZEZuOiBtb2NrTG9hZExhc3RBY3Rpdml0aWVzIH0gfVxuICAgICk7XG5cbiAgICBjb25zdCBpbml0aWFsT25SZWZyZXNoID0gcmVzdWx0LmN1cnJlbnQub25SZWZyZXNoO1xuXG4gICAgLy8gUmVyZW5kZXIgYXZlYyBsYSBtw6ptZSBmb25jdGlvblxuICAgIHJlcmVuZGVyKHsgbG9hZEZuOiBtb2NrTG9hZExhc3RBY3Rpdml0aWVzIH0pO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5vblJlZnJlc2gpLnRvQmUoaW5pdGlhbE9uUmVmcmVzaCk7XG5cbiAgICAvLyBSZXJlbmRlciBhdmVjIHVuZSBmb25jdGlvbiBkaWZmw6lyZW50ZVxuICAgIGNvbnN0IG5ld01vY2tGbiA9IGplc3QuZm4oKTtcbiAgICByZXJlbmRlcih7IGxvYWRGbjogbmV3TW9ja0ZuIH0pO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5vblJlZnJlc2gpLm5vdC50b0JlKGluaXRpYWxPblJlZnJlc2gpO1xuICB9KTtcblxuICBpdCgnZGV2cmFpdCBtw6ltb3Jpc2VyIGxlcyBmb25jdGlvbnMgZGUgbW9kYWwnLCAoKSA9PiB7XG4gICAgY29uc3QgeyByZXN1bHQsIHJlcmVuZGVyIH0gPSByZW5kZXJIb29rKCgpID0+IFxuICAgICAgdXNlRGFzaGJvYXJkU3RhdGUobW9ja0xvYWRMYXN0QWN0aXZpdGllcylcbiAgICApO1xuXG4gICAgY29uc3QgaW5pdGlhbE9wZW5Nb2RhbCA9IHJlc3VsdC5jdXJyZW50Lm9wZW5MZXZlbFByb2dyZXNzTW9kYWw7XG4gICAgY29uc3QgaW5pdGlhbENsb3NlTW9kYWwgPSByZXN1bHQuY3VycmVudC5jbG9zZUxldmVsUHJvZ3Jlc3NNb2RhbDtcblxuICAgIC8vIFJlcmVuZGVyIC0gbGVzIGZvbmN0aW9ucyBkZXZyYWllbnQgcmVzdGVyIGxlcyBtw6ptZXNcbiAgICByZXJlbmRlcigpO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5vcGVuTGV2ZWxQcm9ncmVzc01vZGFsKS50b0JlKGluaXRpYWxPcGVuTW9kYWwpO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5jbG9zZUxldmVsUHJvZ3Jlc3NNb2RhbCkudG9CZShpbml0aWFsQ2xvc2VNb2RhbCk7XG4gIH0pO1xuXG4gIGl0KCdkZXZyYWl0IHBlcm1ldHRyZSBwbHVzaWV1cnMgcmVmcmVzaCBzaW11bHRhbsOpcyBzYW5zIGNvbmZsaXQnLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IHJlc29sdmVGaXJzdCwgcmVzb2x2ZVNlY29uZDtcbiAgICBjb25zdCBmaXJzdENhbGwgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHsgcmVzb2x2ZUZpcnN0ID0gcmVzb2x2ZTsgfSk7XG4gICAgY29uc3Qgc2Vjb25kQ2FsbCA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4geyByZXNvbHZlU2Vjb25kID0gcmVzb2x2ZTsgfSk7XG5cbiAgICBtb2NrTG9hZExhc3RBY3Rpdml0aWVzXG4gICAgICAubW9ja1JldHVyblZhbHVlT25jZShmaXJzdENhbGwpXG4gICAgICAubW9ja1JldHVyblZhbHVlT25jZShzZWNvbmRDYWxsKTtcblxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IFxuICAgICAgdXNlRGFzaGJvYXJkU3RhdGUobW9ja0xvYWRMYXN0QWN0aXZpdGllcylcbiAgICApO1xuXG4gICAgLy8gRMOpbWFycmVyIGRldXggcmVmcmVzaCBlbiBwYXJhbGzDqGxlXG4gICAgY29uc3QgZmlyc3RSZWZyZXNoID0gYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHJlc3VsdC5jdXJyZW50Lm9uUmVmcmVzaCgpO1xuICAgIH0pO1xuXG4gICAgY29uc3Qgc2Vjb25kUmVmcmVzaCA9IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5vblJlZnJlc2goKTtcbiAgICB9KTtcblxuICAgIC8vIExlcyBkZXV4IGRldnJhaWVudCDDqnRyZSBlbiBjb3Vyc1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5yZWZyZXNoaW5nKS50b0JlKHRydWUpO1xuXG4gICAgLy8gUsOpc291ZHJlIGxlIHByZW1pZXJcbiAgICByZXNvbHZlRmlyc3QoKTtcbiAgICBhd2FpdCBmaXJzdFJlZnJlc2g7XG5cbiAgICAvLyBSw6lzb3VkcmUgbGUgc2Vjb25kXG4gICAgcmVzb2x2ZVNlY29uZCgpO1xuICAgIGF3YWl0IHNlY29uZFJlZnJlc2g7XG5cbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQucmVmcmVzaGluZykudG9CZShmYWxzZSk7XG4gICAgZXhwZWN0KG1vY2tMb2FkTGFzdEFjdGl2aXRpZXMpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygyKTtcbiAgfSk7XG5cbiAgaXQoJ2RldnJhaXQgZXhwb3NlciB0b3V0ZXMgbGVzIGZvbmN0aW9ucyBldCDDqXRhdHMgbsOpY2Vzc2FpcmVzJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IFxuICAgICAgdXNlRGFzaGJvYXJkU3RhdGUobW9ja0xvYWRMYXN0QWN0aXZpdGllcylcbiAgICApO1xuXG4gICAgLy8gw4l0YXRzXG4gICAgZXhwZWN0KHR5cGVvZiByZXN1bHQuY3VycmVudC5zaG93TGV2ZWxQcm9ncmVzcykudG9CZSgnYm9vbGVhbicpO1xuICAgIGV4cGVjdCh0eXBlb2YgcmVzdWx0LmN1cnJlbnQucmVmcmVzaGluZykudG9CZSgnYm9vbGVhbicpO1xuICAgIGV4cGVjdCh0eXBlb2YgcmVzdWx0LmN1cnJlbnQuYWN0aXZlVGFiKS50b0JlKCdzdHJpbmcnKTtcblxuICAgIC8vIEZvbmN0aW9uc1xuICAgIGV4cGVjdCh0eXBlb2YgcmVzdWx0LmN1cnJlbnQuc2V0U2hvd0xldmVsUHJvZ3Jlc3MpLnRvQmUoJ2Z1bmN0aW9uJyk7XG4gICAgZXhwZWN0KHR5cGVvZiByZXN1bHQuY3VycmVudC5vcGVuTGV2ZWxQcm9ncmVzc01vZGFsKS50b0JlKCdmdW5jdGlvbicpO1xuICAgIGV4cGVjdCh0eXBlb2YgcmVzdWx0LmN1cnJlbnQuY2xvc2VMZXZlbFByb2dyZXNzTW9kYWwpLnRvQmUoJ2Z1bmN0aW9uJyk7XG4gICAgZXhwZWN0KHR5cGVvZiByZXN1bHQuY3VycmVudC5zZXRBY3RpdmVUYWIpLnRvQmUoJ2Z1bmN0aW9uJyk7XG4gICAgZXhwZWN0KHR5cGVv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