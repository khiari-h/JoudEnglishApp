98b651b8e7e0f17af42d65cbf79020a0
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unstable_getImageComponentDecorator = unstable_getImageComponentDecorator;
exports.unstable_registerImageAttachedCallback = unstable_registerImageAttachedCallback;
exports.unstable_setImageComponentDecorator = unstable_setImageComponentDecorator;
exports.unstable_unregisterImageAttachedCallback = unstable_unregisterImageAttachedCallback;
exports.useWrapRefWithImageAttachedCallbacks = useWrapRefWithImageAttachedCallbacks;
var _useMergeRefs = _interopRequireDefault(require("../Utilities/useMergeRefs"));
var _react = _interopRequireWildcard(require("react"));
var React = _react;
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var injectedImageComponentDecorator;
function unstable_setImageComponentDecorator(imageComponentDecorator) {
  injectedImageComponentDecorator = imageComponentDecorator;
}
function unstable_getImageComponentDecorator() {
  return injectedImageComponentDecorator;
}
var imageAttachedCallbacks = new Set();
function unstable_registerImageAttachedCallback(callback) {
  imageAttachedCallbacks.add(callback);
}
function unstable_unregisterImageAttachedCallback(callback) {
  imageAttachedCallbacks.delete(callback);
}
function useWrapRefWithImageAttachedCallbacks(forwardedRef) {
  var pendingCleanupCallbacks = (0, _react.useRef)([]);
  var imageAttachedCallbacksRef = (0, _react.useRef)(null);
  if (imageAttachedCallbacksRef.current == null) {
    imageAttachedCallbacksRef.current = function (node) {
      if (node == null) {
        if (pendingCleanupCallbacks.current.length > 0) {
          pendingCleanupCallbacks.current.forEach(function (cb) {
            return cb();
          });
          pendingCleanupCallbacks.current = [];
        }
      } else {
        imageAttachedCallbacks.forEach(function (imageAttachedCallback) {
          var maybeCleanupCallback = imageAttachedCallback(node);
          if (maybeCleanupCallback != null) {
            pendingCleanupCallbacks.current.push(maybeCleanupCallback);
          }
        });
      }
    };
  }
  return (0, _useMergeRefs.default)(forwardedRef, imageAttachedCallbacksRef.current);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdXNlTWVyZ2VSZWZzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIlJlYWN0IiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsIl90IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJpbmplY3RlZEltYWdlQ29tcG9uZW50RGVjb3JhdG9yIiwidW5zdGFibGVfc2V0SW1hZ2VDb21wb25lbnREZWNvcmF0b3IiLCJpbWFnZUNvbXBvbmVudERlY29yYXRvciIsInVuc3RhYmxlX2dldEltYWdlQ29tcG9uZW50RGVjb3JhdG9yIiwiaW1hZ2VBdHRhY2hlZENhbGxiYWNrcyIsIlNldCIsInVuc3RhYmxlX3JlZ2lzdGVySW1hZ2VBdHRhY2hlZENhbGxiYWNrIiwiY2FsbGJhY2siLCJhZGQiLCJ1bnN0YWJsZV91bnJlZ2lzdGVySW1hZ2VBdHRhY2hlZENhbGxiYWNrIiwiZGVsZXRlIiwidXNlV3JhcFJlZldpdGhJbWFnZUF0dGFjaGVkQ2FsbGJhY2tzIiwiZm9yd2FyZGVkUmVmIiwicGVuZGluZ0NsZWFudXBDYWxsYmFja3MiLCJ1c2VSZWYiLCJpbWFnZUF0dGFjaGVkQ2FsbGJhY2tzUmVmIiwiY3VycmVudCIsIm5vZGUiLCJsZW5ndGgiLCJmb3JFYWNoIiwiY2IiLCJpbWFnZUF0dGFjaGVkQ2FsbGJhY2siLCJtYXliZUNsZWFudXBDYWxsYmFjayIsInB1c2giLCJ1c2VNZXJnZVJlZnMiXSwic291cmNlcyI6WyJJbWFnZUluamVjdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKi9cblxuaW1wb3J0IHR5cGUge1xuICBBYnN0cmFjdEltYWdlQW5kcm9pZCxcbiAgQWJzdHJhY3RJbWFnZUlPUyxcbiAgSW1hZ2UgYXMgSW1hZ2VDb21wb25lbnQsXG59IGZyb20gJy4vSW1hZ2VUeXBlcy5mbG93JztcblxuaW1wb3J0IHVzZU1lcmdlUmVmcyBmcm9tICcuLi9VdGlsaXRpZXMvdXNlTWVyZ2VSZWZzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7dXNlUmVmfSBmcm9tICdyZWFjdCc7XG5cbnR5cGUgSW1hZ2VDb21wb25lbnREZWNvcmF0b3IgPSAoQWJzdHJhY3RJbWFnZUFuZHJvaWQgPT4gQWJzdHJhY3RJbWFnZUFuZHJvaWQpICZcbiAgKEFic3RyYWN0SW1hZ2VJT1MgPT4gQWJzdHJhY3RJbWFnZUlPUyk7XG5cbmxldCBpbmplY3RlZEltYWdlQ29tcG9uZW50RGVjb3JhdG9yOiA/SW1hZ2VDb21wb25lbnREZWNvcmF0b3I7XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnN0YWJsZV9zZXRJbWFnZUNvbXBvbmVudERlY29yYXRvcihcbiAgaW1hZ2VDb21wb25lbnREZWNvcmF0b3I6ID9JbWFnZUNvbXBvbmVudERlY29yYXRvcixcbik6IHZvaWQge1xuICBpbmplY3RlZEltYWdlQ29tcG9uZW50RGVjb3JhdG9yID0gaW1hZ2VDb21wb25lbnREZWNvcmF0b3I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnN0YWJsZV9nZXRJbWFnZUNvbXBvbmVudERlY29yYXRvcigpOiA/SW1hZ2VDb21wb25lbnREZWNvcmF0b3Ige1xuICByZXR1cm4gaW5qZWN0ZWRJbWFnZUNvbXBvbmVudERlY29yYXRvcjtcbn1cblxudHlwZSBJbWFnZUluc3RhbmNlID0gUmVhY3QuRWxlbWVudFJlZjxJbWFnZUNvbXBvbmVudD47XG5cbnR5cGUgSW1hZ2VBdHRhY2hlZENhbGxiYWNrID0gKFxuICBpbWFnZUluc3RhbmNlOiBJbWFnZUluc3RhbmNlLFxuKSA9PiB2b2lkIHwgKCgpID0+IHZvaWQpO1xuXG5jb25zdCBpbWFnZUF0dGFjaGVkQ2FsbGJhY2tzID0gbmV3IFNldDxJbWFnZUF0dGFjaGVkQ2FsbGJhY2s+KCk7XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnN0YWJsZV9yZWdpc3RlckltYWdlQXR0YWNoZWRDYWxsYmFjayhcbiAgY2FsbGJhY2s6IEltYWdlQXR0YWNoZWRDYWxsYmFjayxcbik6IHZvaWQge1xuICBpbWFnZUF0dGFjaGVkQ2FsbGJhY2tzLmFkZChjYWxsYmFjayk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnN0YWJsZV91bnJlZ2lzdGVySW1hZ2VBdHRhY2hlZENhbGxiYWNrKFxuICBjYWxsYmFjazogSW1hZ2VBdHRhY2hlZENhbGxiYWNrLFxuKTogdm9pZCB7XG4gIGltYWdlQXR0YWNoZWRDYWxsYmFja3MuZGVsZXRlKGNhbGxiYWNrKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVdyYXBSZWZXaXRoSW1hZ2VBdHRhY2hlZENhbGxiYWNrcyhcbiAgZm9yd2FyZGVkUmVmOiBSZWFjdC5SZWZTZXR0ZXI8SW1hZ2VJbnN0YW5jZT4sXG4pOiBSZWFjdC5SZWZTZXR0ZXI8SW1hZ2VJbnN0YW5jZT4ge1xuICBjb25zdCBwZW5kaW5nQ2xlYW51cENhbGxiYWNrcyA9IHVzZVJlZjxBcnJheTwoKSA9PiB2b2lkPj4oW10pO1xuXG4gIGNvbnN0IGltYWdlQXR0YWNoZWRDYWxsYmFja3NSZWYgPVxuICAgIHVzZVJlZjw/KG5vZGU6IEltYWdlSW5zdGFuY2UgfCBudWxsKSA9PiB2b2lkPihudWxsKTtcblxuICBpZiAoaW1hZ2VBdHRhY2hlZENhbGxiYWNrc1JlZi5jdXJyZW50ID09IG51bGwpIHtcbiAgICBpbWFnZUF0dGFjaGVkQ2FsbGJhY2tzUmVmLmN1cnJlbnQgPSAobm9kZTogSW1hZ2VJbnN0YW5jZSB8IG51bGwpOiB2b2lkID0+IHtcbiAgICAgIGlmIChub2RlID09IG51bGwpIHtcbiAgICAgICAgaWYgKHBlbmRpbmdDbGVhbnVwQ2FsbGJhY2tzLmN1cnJlbnQubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHBlbmRpbmdDbGVhbnVwQ2FsbGJhY2tzLmN1cnJlbnQuZm9yRWFjaChjYiA9PiBjYigpKTtcbiAgICAgICAgICBwZW5kaW5nQ2xlYW51cENhbGxiYWNrcy5jdXJyZW50ID0gW107XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGltYWdlQXR0YWNoZWRDYWxsYmFja3MuZm9yRWFjaChpbWFnZUF0dGFjaGVkQ2FsbGJhY2sgPT4ge1xuICAgICAgICAgIGNvbnN0IG1heWJlQ2xlYW51cENhbGxiYWNrID0gaW1hZ2VBdHRhY2hlZENhbGxiYWNrKG5vZGUpO1xuICAgICAgICAgIGlmIChtYXliZUNsZWFudXBDYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgICAgICBwZW5kaW5nQ2xlYW51cENhbGxiYWNrcy5jdXJyZW50LnB1c2gobWF5YmVDbGVhbnVwQ2FsbGJhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIGB1c2VNZXJnZVJlZnNgIHJldHVybnMgYSBzdGFibGUgcmVmIGlmIGl0cyBhcmd1bWVudHMgZG9uJ3QgY2hhbmdlLlxuICByZXR1cm4gdXNlTWVyZ2VSZWZzPEltYWdlSW5zdGFuY2U+KFxuICAgIGZvcndhcmRlZFJlZixcbiAgICBpbWFnZUF0dGFjaGVkQ2FsbGJhY2tzUmVmLmN1cnJlbnQsXG4gICk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQWdCQSxJQUFBQSxhQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxNQUFBLEdBQUFDLHVCQUFBLENBQUFGLE9BQUE7QUFBK0IsSUFBQUcsS0FBQSxHQUFBRixNQUFBO0FBQUEsU0FBQUMsd0JBQUFFLENBQUEsRUFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFKLHVCQUFBLFlBQUFBLHdCQUFBRSxDQUFBLEVBQUFDLENBQUEsU0FBQUEsQ0FBQSxJQUFBRCxDQUFBLElBQUFBLENBQUEsQ0FBQUssVUFBQSxTQUFBTCxDQUFBLE1BQUFNLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLEtBQUFDLFNBQUEsUUFBQUMsT0FBQSxFQUFBVixDQUFBLGlCQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFNBQUFRLENBQUEsTUFBQUYsQ0FBQSxHQUFBTCxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxRQUFBRyxDQUFBLENBQUFLLEdBQUEsQ0FBQVgsQ0FBQSxVQUFBTSxDQUFBLENBQUFNLEdBQUEsQ0FBQVosQ0FBQSxHQUFBTSxDQUFBLENBQUFPLEdBQUEsQ0FBQWIsQ0FBQSxFQUFBUSxDQUFBLGNBQUFNLEVBQUEsSUFBQWQsQ0FBQSxnQkFBQWMsRUFBQSxPQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWhCLENBQUEsRUFBQWMsRUFBQSxPQUFBUCxDQUFBLElBQUFELENBQUEsR0FBQVcsTUFBQSxDQUFBQyxjQUFBLEtBQUFELE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQW5CLENBQUEsRUFBQWMsRUFBQSxPQUFBUCxDQUFBLENBQUFLLEdBQUEsSUFBQUwsQ0FBQSxDQUFBTSxHQUFBLElBQUFQLENBQUEsQ0FBQUUsQ0FBQSxFQUFBTSxFQUFBLEVBQUFQLENBQUEsSUFBQUMsQ0FBQSxDQUFBTSxFQUFBLElBQUFkLENBQUEsQ0FBQWMsRUFBQSxXQUFBTixDQUFBLEtBQUFSLENBQUEsRUFBQUMsQ0FBQTtBQU0vQixJQUFJbUIsK0JBQXlEO0FBRXRELFNBQVNDLG1DQUFtQ0EsQ0FDakRDLHVCQUFpRCxFQUMzQztFQUNORiwrQkFBK0IsR0FBR0UsdUJBQXVCO0FBQzNEO0FBRU8sU0FBU0MsbUNBQW1DQSxDQUFBLEVBQTZCO0VBQzlFLE9BQU9ILCtCQUErQjtBQUN4QztBQVFBLElBQU1JLHNCQUFzQixHQUFHLElBQUlDLEdBQUcsQ0FBd0IsQ0FBQztBQUV4RCxTQUFTQyxzQ0FBc0NBLENBQ3BEQyxRQUErQixFQUN6QjtFQUNOSCxzQkFBc0IsQ0FBQ0ksR0FBRyxDQUFDRCxRQUFRLENBQUM7QUFDdEM7QUFFTyxTQUFTRSx3Q0FBd0NBLENBQ3RERixRQUErQixFQUN6QjtFQUNOSCxzQkFBc0IsQ0FBQ00sTUFBTSxDQUFDSCxRQUFRLENBQUM7QUFDekM7QUFFTyxTQUFTSSxvQ0FBb0NBLENBQ2xEQyxZQUE0QyxFQUNaO0VBQ2hDLElBQU1DLHVCQUF1QixHQUFHLElBQUFDLGFBQU0sRUFBb0IsRUFBRSxDQUFDO0VBRTdELElBQU1DLHlCQUF5QixHQUM3QixJQUFBRCxhQUFNLEVBQXdDLElBQUksQ0FBQztFQUVyRCxJQUFJQyx5QkFBeUIsQ0FBQ0MsT0FBTyxJQUFJLElBQUksRUFBRTtJQUM3Q0QseUJBQXlCLENBQUNDLE9BQU8sR0FBRyxVQUFDQyxJQUEwQixFQUFXO01BQ3hFLElBQUlBLElBQUksSUFBSSxJQUFJLEVBQUU7UUFDaEIsSUFBSUosdUJBQXVCLENBQUNHLE9BQU8sQ0FBQ0UsTUFBTSxHQUFHLENBQUMsRUFBRTtVQUM5Q0wsdUJBQXVCLENBQUNHLE9BQU8sQ0FBQ0csT0FBTyxDQUFDLFVBQUFDLEVBQUU7WUFBQSxPQUFJQSxFQUFFLENBQUMsQ0FBQztVQUFBLEVBQUM7VUFDbkRQLHVCQUF1QixDQUFDRyxPQUFPLEdBQUcsRUFBRTtRQUN0QztNQUNGLENBQUMsTUFBTTtRQUNMWixzQkFBc0IsQ0FBQ2UsT0FBTyxDQUFDLFVBQUFFLHFCQUFxQixFQUFJO1VBQ3RELElBQU1DLG9CQUFvQixHQUFHRCxxQkFBcUIsQ0FBQ0osSUFBSSxDQUFDO1VBQ3hELElBQUlLLG9CQUFvQixJQUFJLElBQUksRUFBRTtZQUNoQ1QsdUJBQXVCLENBQUNHLE9BQU8sQ0FBQ08sSUFBSSxDQUFDRCxvQkFBb0IsQ0FBQztVQUM1RDtRQUNGLENBQUMsQ0FBQztNQUNKO0lBQ0YsQ0FBQztFQUNIO0VBR0EsT0FBTyxJQUFBRSxxQkFBWSxFQUNqQlosWUFBWSxFQUNaRyx5QkFBeUIsQ0FBQ0MsT0FDNUIsQ0FBQztBQUNIIiwiaWdub3JlTGlzdCI6W119