a8cf75451dc948b8d011b235c06db93f
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn()
  };
});
_getJestObj().mock('expo-linear-gradient', function () {
  return {
    LinearGradient: function LinearGradient(_ref) {
      var children = _ref.children,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      var _require = require('react-native'),
        View = _require.View;
      return (0, _jsxRuntime.jsx)(View, Object.assign({}, props, {
        children: children
      }));
    }
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
_getJestObj().mock('../../../src/contexts/ProgressContext');
_getJestObj().mock('../../../src/contexts/CurrentLevelContext');
_getJestObj().mock('../../../src/hooks/useRealTimeProgress', function () {
  return {
    __esModule: true,
    default: function _default() {
      return {
        getLevelProgress: mockGetLevelProgress,
        refresh: jest.fn().mockResolvedValue()
      };
    }
  };
});
_getJestObj().mock('../../../src/hooks/useLastActivity', function () {
  return {
    __esModule: true,
    default: function _default() {
      return {
        lastActivity: mockLastActivity,
        isLoading: mockIsLoading,
        reload: jest.fn().mockResolvedValue()
      };
    }
  };
});
_getJestObj().mock('../../../src/utils/constants', function () {
  return {
    LANGUAGE_LEVELS: {
      '1': {
        title: 'D√©butant',
        color: '#10B981',
        icon: 'üå±'
      },
      '2': {
        title: '√âl√©mentaire',
        color: '#3B82F6',
        icon: 'üìö'
      },
      '3': {
        title: 'Interm√©diaire',
        color: '#8B5CF6',
        icon: 'üéØ'
      },
      '4': {
        title: 'Interm√©diaire+',
        color: '#F59E0B',
        icon: 'üöÄ'
      },
      '5': {
        title: 'Avanc√©',
        color: '#EF4444',
        icon: '‚≠ê'
      },
      '6': {
        title: 'Expert',
        color: '#EC4899',
        icon: 'üëë'
      },
      'bonus': {
        title: 'Bonus',
        color: '#6366F1',
        icon: 'üéÅ'
      }
    },
    EXERCISES: {
      vocabulary: {
        id: 'vocabulary',
        route: '/tabs/vocabulary',
        title: 'Vocabulaire',
        icon: 'üìö',
        color: '#3B82F6'
      },
      grammar: {
        id: 'grammar',
        route: '/tabs/grammar',
        title: 'Grammaire',
        icon: 'üìù',
        color: '#8B5CF6'
      },
      assessment: {
        id: 'assessment',
        route: '/tabs/assessment',
        title: 'Test',
        icon: 'üéØ',
        color: '#EF4444'
      }
    },
    CONTAINER_SAFE_EDGES: {
      NO_BOTTOM: ['top', 'left', 'right']
    }
  };
});
_getJestObj().mock('../../../src/components/layout/Container', function () {
  var _require2 = require('react-native'),
    ScrollView = _require2.ScrollView,
    View = _require2.View,
    RefreshControl = _require2.RefreshControl;
  var Container = function Container(_ref2) {
    var children = _ref2.children,
      _ref2$withScrollView = _ref2.withScrollView,
      withScrollView = _ref2$withScrollView === void 0 ? true : _ref2$withScrollView,
      props = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
    if (withScrollView === false) {
      return (0, _jsxRuntime.jsx)(View, Object.assign({}, props, {
        children: children
      }));
    }
    return (0, _jsxRuntime.jsx)(ScrollView, Object.assign({}, props, {
      refreshControl: (0, _jsxRuntime.jsx)(RefreshControl, {
        refreshing: false,
        onRefresh: function onRefresh() {}
      }),
      children: children
    }));
  };
  Container.CONTAINER_SAFE_EDGES = {
    NO_BOTTOM: ['top', 'left', 'right']
  };
  return Container;
});
_getJestObj().mock('../../../src/screens/VocabularyRevision/RevisionOrchestrator', function () {
  var _require3 = require('react-native'),
    View = _require3.View;
  return function () {
    return (0, _jsxRuntime.jsx)(View, {
      testID: "revision-orchestrator"
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _Dashboard = _interopRequireDefault(require("../../../src/screens/Dashboard"));
var _ThemeContext = require("../../../src/contexts/ThemeContext");
var _ProgressContext = require("../../../src/contexts/ProgressContext");
var _CurrentLevelContext = require("../../../src/contexts/CurrentLevelContext");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children"],
  _excluded2 = ["children", "withScrollView"];
function _getJestObj() {
  var _require5 = require("@jest/globals"),
    jest = _require5.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockLastActivity = {
  type: 'vocabulary',
  level: '2',
  title: 'Vocabulaire Famille',
  metadata: {
    word: 8,
    totalWords: 20,
    categoryIndex: 2
  }
};
var mockIsLoading = false;
var mockGetLevelProgress = jest.fn(function (level) {
  var progressMap = {
    '1': 25,
    '2': 50,
    '3': 75,
    '4': 30,
    '5': 10,
    '6': 0,
    'bonus': 5
  };
  return progressMap[level] || 0;
});
var _require4 = require('expo-router'),
  router = _require4.router;
describe('Dashboard - Tests d\'int√©gration', function () {
  var mockThemeContext = {
    colors: {
      background: '#F8FAFC',
      primary: '#3B82F6',
      surface: '#FFFFFF',
      text: '#1F2937',
      textSecondary: '#6B7280'
    }
  };
  var mockProgressContext = {
    progress: {
      level1: 50,
      level2: 30,
      currentLevel: '1'
    },
    isLoading: false,
    calculateGlobalProgress: jest.fn(function () {
      return 65;
    }),
    calculateLevelProgress: jest.fn(function (level) {
      var progressMap = {
        '1': 25,
        '2': 50,
        '3': 75
      };
      return progressMap[level] || 0;
    })
  };
  var mockCurrentLevelContext = {
    setCurrentLevel: jest.fn()
  };
  beforeEach(function () {
    jest.clearAllMocks();
    mockLastActivity = {
      type: 'vocabulary',
      level: '2',
      title: 'Vocabulaire Famille',
      metadata: {
        word: 8,
        totalWords: 20,
        categoryIndex: 2
      }
    };
    mockIsLoading = false;
    _ProgressContext.useProgress.mockReturnValue(mockProgressContext);
    _CurrentLevelContext.useCurrentLevel.mockReturnValue(mockCurrentLevelContext);
    _asyncStorage.default.getItem.mockResolvedValue(null);
    _asyncStorage.default.setItem.mockResolvedValue();
    router.push.mockClear();
    mockGetLevelProgress.mockClear();
    mockProgressContext.calculateGlobalProgress.mockClear();
    mockCurrentLevelContext.setCurrentLevel.mockClear();
  });
  var renderDashboard = function renderDashboard() {
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
      value: mockThemeContext,
      children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
    }));
  };
  describe('Flux complet de navigation', function () {
    it('devrait permettre de continuer une activit√© existante', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard = renderDashboard(),
        getByText = _renderDashboard.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('Vocabulaire Famille')).toBeTruthy();
      });
      var continueButton = getByText('Continuer ‚ñ∂Ô∏è');
      _reactNative.fireEvent.press(continueButton);
      expect(router.push).toHaveBeenCalledWith({
        pathname: '/tabs/vocabulary',
        params: {
          level: '2'
        }
      });
    }));
    it('devrait permettre de d√©marrer un nouvel exercice via QuickActions', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard2 = renderDashboard(),
        getByText = _renderDashboard2.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('Vocabulaire')).toBeTruthy();
      });
      var vocabularyButton = getByText('Vocabulaire');
      _reactNative.fireEvent.press(vocabularyButton);
      expect(router.push).toHaveBeenCalledWith({
        pathname: '/tabs/vocabulary',
        params: {
          level: '1',
          mode: 'classic'
        }
      });
    }));
    it('devrait permettre de changer de niveau et naviguer', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard3 = renderDashboard(),
        findByText = _renderDashboard3.findByText;
      var level2Circle = yield findByText('2');
      _reactNative.fireEvent.press(level2Circle);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockCurrentLevelContext.setCurrentLevel).toHaveBeenCalledWith('2');
      });
      var exploreButton = yield findByText('Explorer le niveau 2');
      _reactNative.fireEvent.press(exploreButton);
      expect(router.push).toHaveBeenCalledWith({
        "pathname": "/tabs/exerciseSelection",
        "params": {
          "level": "2"
        }
      });
    }));
  });
  describe('Synchronisation des donn√©es', function () {
    it('devrait synchroniser le niveau entre les composants', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue('3');
      var _renderDashboard4 = renderDashboard(),
        findByText = _renderDashboard4.findByText;
      var level3Element = yield findByText('3');
      expect(level3Element).toBeTruthy();
    }));
    it('devrait mettre √† jour la progression en temps r√©el', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard5 = renderDashboard(),
        findByText = _renderDashboard5.findByText;
      var progressElement = yield findByText('25%');
      expect(progressElement).toBeTruthy();
    }));
  });
  describe('Gestion des √©tats de chargement', function () {
    it('devrait afficher le chargement puis les donn√©es', (0, _asyncToGenerator2.default)(function* () {
      _ProgressContext.useProgress.mockReturnValueOnce(Object.assign({}, mockProgressContext, {
        isLoading: true
      }));
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
          value: mockThemeContext,
          children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
        })),
        getByText = _render.getByText,
        rerender = _render.rerender,
        findByText = _render.findByText;
      expect(getByText('Chargement du tableau de bord...')).toBeTruthy();
      _ProgressContext.useProgress.mockReturnValue(Object.assign({}, mockProgressContext, {
        isLoading: false
      }));
      rerender((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
        value: mockThemeContext,
        children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
      }));
      var headerElement = yield findByText('üéì');
      var activityElement = yield findByText('Vocabulaire Famille');
      expect(headerElement).toBeTruthy();
      expect(activityElement).toBeTruthy();
    }));
  });
  describe('Gestion des erreurs et cas limites', function () {
    it('devrait g√©rer l\'absence d\'activit√© r√©cente', (0, _asyncToGenerator2.default)(function* () {
      mockLastActivity = null;
      var _renderDashboard6 = renderDashboard(),
        findByText = _renderDashboard6.findByText;
      var startButton = yield findByText('Commencer >');
      expect(startButton).toBeTruthy();
      _reactNative.fireEvent.press(startButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(router.push).toHaveBeenCalledWith('/(tabs)/levelSelection');
      });
    }));
  });
  describe('R√©vision automatique', function () {
    it('devrait afficher le syst√®me de r√©vision', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard7 = renderDashboard(),
        getByTestId = _renderDashboard7.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('revision-orchestrator')).toBeTruthy();
      });
    }));
  });
  describe('Responsive et adaptation', function () {
    it('devrait s\'adapter aux diff√©rentes tailles d\'√©cran', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard8 = renderDashboard(),
        findByText = _renderDashboard8.findByText,
        getByTestId = _renderDashboard8.getByTestId;
      var header = yield findByText('üéì');
      var activity = yield findByText('Vocabulaire Famille');
      var quickActions = yield findByText('‚ö° Actions rapides');
      expect(header).toBeTruthy();
      expect(activity).toBeTruthy();
      expect(quickActions).toBeTruthy();
      expect(getByTestId('revision-orchestrator')).toBeTruthy();
    }));
  });
  describe('Performance et optimisation', function () {
    it('ne devrait pas recalculer inutilement les donn√©es', (0, _asyncToGenerator2.default)(function* () {
      renderDashboard();
      yield (0, _reactNative.waitFor)(function () {
        expect(mockGetLevelProgress).toHaveBeenCalled();
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,