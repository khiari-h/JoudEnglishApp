e97e449a20ff3f4b132c73a02d01f6f9
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.adaptViewConfig = adaptViewConfig;
exports.addWhitelistedNativeProps = addWhitelistedNativeProps;
exports.addWhitelistedUIProps = addWhitelistedUIProps;
exports.configureProps = configureProps;
exports.configureReanimatedLogger = configureReanimatedLogger;
var _propsAllowlists = require("./propsAllowlists");
var _core = require("./core");
var _errors = require("./errors");
var _logger = require("./logger");
var _PlatformChecker = require("./PlatformChecker");
var SHOULD_BE_USE_WEB = (0, _PlatformChecker.shouldBeUseWeb)();
function assertNoOverlapInLists() {
  for (var key in _propsAllowlists.PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST) {
    if (key in _propsAllowlists.PropsAllowlists.UI_THREAD_PROPS_WHITELIST) {
      throw new _errors.ReanimatedError(`Property \`${key}\` was whitelisted both as UI and native prop. Please remove it from one of the lists.`);
    }
  }
}
function configureProps() {
  assertNoOverlapInLists();
  (0, _core.jsiConfigureProps)(Object.keys(_propsAllowlists.PropsAllowlists.UI_THREAD_PROPS_WHITELIST), Object.keys(_propsAllowlists.PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST));
}
function addWhitelistedNativeProps(props) {
  var oldSize = Object.keys(_propsAllowlists.PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST).length;
  _propsAllowlists.PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST = Object.assign({}, _propsAllowlists.PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST, props);
  if (oldSize !== Object.keys(_propsAllowlists.PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST).length) {
    configureProps();
  }
}
function addWhitelistedUIProps(props) {
  var oldSize = Object.keys(_propsAllowlists.PropsAllowlists.UI_THREAD_PROPS_WHITELIST).length;
  _propsAllowlists.PropsAllowlists.UI_THREAD_PROPS_WHITELIST = Object.assign({}, _propsAllowlists.PropsAllowlists.UI_THREAD_PROPS_WHITELIST, props);
  if (oldSize !== Object.keys(_propsAllowlists.PropsAllowlists.UI_THREAD_PROPS_WHITELIST).length) {
    configureProps();
  }
}
function configureReanimatedLogger(config) {
  (0, _logger.updateLoggerConfig)(config);
  if (!SHOULD_BE_USE_WEB) {
    (0, _core.executeOnUIRuntimeSync)(_logger.updateLoggerConfig)(config);
  }
}
var PROCESSED_VIEW_NAMES = new Set();
function adaptViewConfig(viewConfig) {
  var viewName = viewConfig.uiViewClassName;
  var props = viewConfig.validAttributes;
  if (!PROCESSED_VIEW_NAMES.has(viewName)) {
    var propsToAdd = {};
    Object.keys(props).forEach(function (key) {
      if (!(key in _propsAllowlists.PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST) && !(key in _propsAllowlists.PropsAllowlists.UI_THREAD_PROPS_WHITELIST)) {
        propsToAdd[key] = true;
      }
    });
    addWhitelistedUIProps(propsToAdd);
    PROCESSED_VIEW_NAMES.add(viewName);
  }
}
configureProps();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,