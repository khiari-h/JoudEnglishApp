{"version":3,"names":["getBetterRandomIndex","max","_performance","_crypto","entropySources","Date","now","process","hrtime","Math","floor","performance","crypto","getRandomValues","Uint8Array","randomValue","reduce","acc","source","index","randomBytes","error","timeEntropy","shuffleArray","exports","array","Array","isArray","length","_toConsumableArray2","default","shuffled","i","j","_ref","shuffleAndTake","count","slice","min","shuffleWithFallback","fallbackArray","combined","concat","shuffleInPlace","_ref2"],"sources":["arrayUtils.js"],"sourcesContent":["// src/utils/arrayUtils.js - Utilitaires pour la manipulation d'arrays\r\n\r\n/**\r\n * Génère un nombre aléatoire de meilleure qualité pour le mélange d'exercices\r\n * @param {number} max - Valeur maximale (exclusive)\r\n * @returns {number} Index aléatoire\r\n */\r\nfunction getBetterRandomIndex(max) {\r\n  // Utilise uniquement des sources d'entropie système, pas Math.random\r\n  const entropySources = [\r\n    Date.now() % 1000000,\r\n    process.hrtime ? process.hrtime()[1] : 0,\r\n    Math.floor(performance?.now() || 0),\r\n    crypto?.getRandomValues ? crypto.getRandomValues(new Uint8Array(1))[0] : 0\r\n  ];\r\n  \r\n  // Combine les sources d'entropie pour créer un index\r\n  let randomValue = entropySources.reduce((acc, source, index) => {\r\n    return (acc + source * (index + 1)) % max;\r\n  }, 0);\r\n  \r\n  // Ajoute de l'entropie supplémentaire si disponible\r\n  if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\r\n    try {\r\n      const randomBytes = new Uint8Array(1);\r\n      crypto.getRandomValues(randomBytes);\r\n      // Combine avec l'entropie système pour améliorer la distribution\r\n      randomValue = (randomValue + randomBytes[0] % max) % max;\r\n    } catch (error) {\r\n      // Ignore les erreurs et continue avec l'entropie système\r\n    }\r\n  }\r\n  \r\n  // Ajoute de l'entropie basée sur le temps\r\n  const timeEntropy = (Date.now() % 1000000) % max;\r\n  randomValue = (randomValue + timeEntropy) % max;\r\n  \r\n  return randomValue;\r\n}\r\n\r\n/**\r\n * Mélange un array en utilisant l'algorithme Fisher-Yates (shuffle)\r\n * Plus efficace et prévisible que sort(() => Math.random() - 0.5)\r\n * @param {Array} array - L'array à mélanger\r\n * @returns {Array} - Une copie mélangée de l'array\r\n */\r\nexport const shuffleArray = (array) => {\r\n  if (!Array.isArray(array)) {\r\n    return [];\r\n  }\r\n  \r\n  if (array.length <= 1) {\r\n    return [...array];\r\n  }\r\n\r\n  const shuffled = [...array];\r\n  for (let i = shuffled.length - 1; i > 0; i--) {\r\n    const j = getBetterRandomIndex(i + 1);\r\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\r\n  }\r\n  \r\n  return shuffled;\r\n};\r\n\r\n/**\r\n * Mélange un array et retourne les n premiers éléments\r\n * @param {Array} array - L'array à mélanger\r\n * @param {number} count - Nombre d'éléments à retourner\r\n * @returns {Array} - Les n premiers éléments mélangés\r\n */\r\nexport const shuffleAndTake = (array, count) => {\r\n  if (!Array.isArray(array) || array.length === 0 || count <= 0) {\r\n    return [];\r\n  }\r\n  \r\n  const shuffled = shuffleArray(array);\r\n  return shuffled.slice(0, Math.min(count, array.length));\r\n};\r\n\r\n/**\r\n * Mélange un array et retourne les n premiers éléments avec fallback\r\n * @param {Array} array - L'array principal\r\n * @param {Array} fallbackArray - Array de fallback si le principal est insuffisant\r\n * @param {number} count - Nombre d'éléments à retourner\r\n * @returns {Array} - Les n premiers éléments mélangés\r\n */\r\nexport const shuffleWithFallback = (array, fallbackArray, count) => {\r\n  if (!Array.isArray(array) || array.length === 0) {\r\n    return shuffleAndTake(fallbackArray, count);\r\n  }\r\n  \r\n  if (array.length >= count) {\r\n    return shuffleAndTake(array, count);\r\n  }\r\n  \r\n  // Combiner les deux arrays et mélanger\r\n  const combined = [...array, ...fallbackArray];\r\n  return shuffleAndTake(combined, count);\r\n};\r\n\r\n/**\r\n * Mélange un array en place (modifie l'array original)\r\n * @param {Array} array - L'array à mélanger\r\n */\r\nexport const shuffleInPlace = (array) => {\r\n  if (!Array.isArray(array) || array.length <= 1) {\r\n    return;\r\n  }\r\n\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = getBetterRandomIndex(i + 1);\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]}