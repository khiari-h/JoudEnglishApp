442744e81f15848b128ba4b30d82437b
_getJestObj().mock('expo-font', function () {
  return {
    useFonts: function useFonts() {
      return [true];
    }
  };
});
_getJestObj().mock('expo-splash-screen', function () {
  return {
    hideAsync: jest.fn().mockResolvedValue(undefined)
  };
});
_getJestObj().mock('../../src/hooks/useRouteActivityTracker', function () {
  return jest.fn().mockImplementation(function () {
    return {};
  });
});
_getJestObj().mock('@react-navigation/native', function () {
  var actualNav = jest.requireActual('@react-navigation/native');
  return Object.assign({}, actualNav, {
    useNavigation: function useNavigation() {
      return {
        navigate: mockNavigate,
        goBack: mockGoBack,
        replace: mockReplace
      };
    },
    useRoute: function useRoute() {
      return {
        params: {},
        name: 'dashboard'
      };
    }
  });
});
_getJestObj().mock('../../src/components/LevelAssessment', function () {
  return function MockLevelAssessment() {
    return (0, _jsxRuntime.jsx)("div", {
      testID: "level-assessment",
      children: (0, _jsxRuntime.jsx)("button", {
        testID: "start-assessment-btn",
        onPress: function onPress() {
          mockNavigate('assessmentResults', {
            recommendedLevel: 'B1'
          });
        },
        children: "Commencer le test de niveau"
      })
    });
  };
});
_getJestObj().mock('../../src/components/AssessmentResults', function () {
  return function MockAssessmentResults(_ref) {
    var route = _ref.route;
    var _ref2 = (route == null ? void 0 : route.params) || {
        recommendedLevel: 'A1'
      },
      recommendedLevel = _ref2.recommendedLevel;
    return (0, _jsxRuntime.jsxs)("div", {
      testID: "assessment-results",
      children: [(0, _jsxRuntime.jsxs)("text", {
        testID: "recommended-level",
        children: ["Niveau recommand\xE9 : ", recommendedLevel]
      }), (0, _jsxRuntime.jsx)("button", {
        testID: "continue-btn",
        onPress: function onPress() {
          return mockNavigate('levelSelection');
        },
        children: "Continuer"
      })]
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _native = require("@react-navigation/native");
var _AppProvider = _interopRequireDefault(require("../../src/contexts/AppProvider"));
var _layout = _interopRequireDefault(require("../../app/(tabs)/_layout"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigate = jest.fn();
var mockGoBack = jest.fn();
var mockReplace = jest.fn();
var renderWithProviders = function renderWithProviders(component) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var AllTheProviders = function AllTheProviders(_ref3) {
    var children = _ref3.children;
    return (0, _jsxRuntime.jsx)(_native.NavigationContainer, {
      children: (0, _jsxRuntime.jsx)(_AppProvider.default, {
        children: children
      })
    });
  };
  return (0, _reactNative.render)(component, Object.assign({
    wrapper: AllTheProviders
  }, options));
};
var waitForElement = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (testId) {
    var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5000;
    return yield (0, _reactNative.waitFor)(function () {
      var element = _reactNative.screen.getByTestId(testId);
      expect(element).toBeTruthy();
      return element;
    }, {
      timeout: timeout
    });
  });
  return function waitForElement(_x) {
    return _ref4.apply(this, arguments);
  };
}();
describe('Assessment and Placement Integration Test', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('User Assessment Flow', function () {
    it('should successfully complete the full assessment and placement workflow', (0, _asyncToGenerator2.default)(function* () {
      renderWithProviders((0, _jsxRuntime.jsx)(_layout.default, {}));
      var dashboardTab = yield waitForElement('dashboard-tab');
      _reactNative.fireEvent.press(dashboardTab);
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative.screen.getByTestId('dashboard-content')).toBeTruthy();
      });
      var startAssessmentBtn = _reactNative.screen.getByTestId('start-assessment-btn');
      _reactNative.fireEvent.press(startAssessmentBtn);
      expect(mockNavigate).toHaveBeenCalledWith('levelAssessment');
      renderWithProviders((0, _jsxRuntime.jsx)(MockLevelAssessment, {}));
      var assessmentStartBtn = yield waitForElement('start-assessment-btn');
      _reactNative.fireEvent.press(assessmentStartBtn);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockNavigate).toHaveBeenCalledWith('assessmentResults', {
          recommendedLevel: 'B1'
        });
      });
      var mockRoute = {
        params: {
          recommendedLevel: 'B1'
        }
      };
      renderWithProviders((0, _jsxRuntime.jsx)(MockAssessmentResults, {
        route: mockRoute
      }));
      var recommendedLevel = yield waitForElement('recommended-level');
      expect(recommendedLevel.props.children).toContain('Niveau recommandé : B1');
      var continueBtn = _reactNative.screen.getByTestId('continue-btn');
      _reactNative.fireEvent.press(continueBtn);
      expect(mockNavigate).toHaveBeenCalledWith('levelSelection');
    }));
    it('should handle assessment errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation(function () {});
      mockNavigate.mockImplementationOnce(function () {
        throw new Error('Navigation failed');
      });
      renderWithProviders((0, _jsxRuntime.jsx)(_layout.default, {}));
      var startBtn = yield waitForElement('start-assessment-btn');
      _reactNative.fireEvent.press(startBtn);
      yield (0, _reactNative.waitFor)(function () {
        expect(consoleSpy).toHaveBeenCalled();
      });
      consoleSpy.mockRestore();
    }));
  });
  describe('Level Placement Scenarios', function () {
    var testCases = [{
      score: 90,
      expectedLevel: 'C2',
      description: 'high score'
    }, {
      score: 75,
      expectedLevel: 'B2',
      description: 'good score'
    }, {
      score: 50,
      expectedLevel: 'B1',
      description: 'average score'
    }, {
      score: 25,
      expectedLevel: 'A2',
      description: 'low score'
    }, {
      score: 10,
      expectedLevel: 'A1',
      description: 'very low score'
    }];
    testCases.forEach(function (_ref7) {
      var score = _ref7.score,
        expectedLevel = _ref7.expectedLevel,
        description = _ref7.description;
      it(`should place user at ${expectedLevel} level with ${description} (${score}%)`, (0, _asyncToGenerator2.default)(function* () {
        var calculateLevel = function calculateLevel(score) {
          if (score >= 85) return 'C2';
          if (score >= 70) return 'B2';
          if (score >= 55) return 'B1';
          if (score >= 30) return 'A2';
          return 'A1';
        };
        var calculatedLevel = calculateLevel(score);
        expect(calculatedLevel).toBe(expectedLevel);
        var mockRoute = {
          params: {
            recommendedLevel: calculatedLevel
          }
        };
        renderWithProviders((0, _jsxRuntime.jsx)(MockAssessmentResults, {
          route: mockRoute
        }));
        var levelDisplay = yield waitForElement('recommended-level');
        expect(levelDisplay.props.children).toContain(`Niveau recommandé : ${expectedLevel}`);
      }));
    });
  });
  describe('Navigation Integration', function () {
    it('should maintain proper navigation state throughout the assessment flow', (0, _asyncToGenerator2.default)(function* () {
      renderWithProviders((0, _jsxRuntime.jsx)(_layout.default, {}));
      expect(mockNavigate).not.toHaveBeenCalled();
      var startBtn = yield waitForElement('start-assessment-btn');
      _reactNative.fireEvent.press(startBtn);
      expect(mockNavigate).toHaveBeenNthCalledWith(1, 'levelAssessment');
      _reactNative.fireEvent.press(startBtn);
      expect(mockNavigate).toHaveBeenNthCalledWith(2, 'assessmentResults', {
        recommendedLevel: 'B1'
      });
    }));
  });
  describe('Performance and Accessibility', function () {
    it('should render assessment components efficiently', (0, _asyncToGenerator2.default)(function* () {
      var startTime = performance.now();
      renderWithProviders((0, _jsxRuntime.jsx)(_layout.default, {}));
      yield waitForElement('start-assessment-btn');
      var endTime = performance.now();
      var renderTime = endTime - startTime;
      expect(renderTime).toBeLessThan(1000);
    }));
    it('should have proper accessibility labels', (0, _asyncToGenerator2.default)(function* () {
      renderWithProviders((0, _jsxRuntime.jsx)(MockLevelAssessment, {}));
      var startBtn = yield waitForElement('start-assessment-btn');
      expect(startBtn).toBeTruthy();
      expect(startBtn.props.testID).toBe('start-assessment-btn');
    }));
  });
});
afterAll(function () {
  jest.clearAllMocks();
  jest.resetModules();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,