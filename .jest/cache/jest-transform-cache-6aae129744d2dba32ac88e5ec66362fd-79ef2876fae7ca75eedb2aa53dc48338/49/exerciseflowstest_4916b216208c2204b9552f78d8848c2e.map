{"version":3,"names":["_getJestObj","mock","router","push","jest","fn","back","useLocalSearchParams","level","mode","useFocusEffect","callback","getItem","setItem","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_asyncStorage","_vocabulary","_spelling","_reading","_wordGames","_ThemeContext","_ProgressContext","_jsxRuntime","_require2","mockTheme","colors","background","primary","surface","text","textSecondary","TestWrapper","_ref","children","jsx","ThemeContext","Provider","value","ProgressProvider","describe","beforeEach","clearAllMocks","AsyncStorage","mockResolvedValue","it","default","mockImplementation","key","Promise","resolve","JSON","stringify","word","translation","category","_render","render","getByTestId","getByText","queryByTestId","waitFor","expect","toBeTruthy","revealButton","fireEvent","press","nextButton","toHaveBeenCalledWith","stringContaining","any","String","_require","mockReturnValue","_render2","audio","hint","_render3","input","changeText","checkButton","_render4","hintButton","title","questions","question","options","correct","_render5","readingText","scroll","nativeEvent","contentOffset","y","contentSize","height","layoutMeasurement","questionsSection","option1","_render6","act","setTimeout","timeTracker","type","words","translations","_render7","gameElement","scoreElement","gameTypes","_loop","gameType","data","_render8","unmount","currentWord","wordsCompleted","startTime","Date","now","_render9","_render0","exercises","VocabularyExercise","SpellingExercise","ReadingExercise","WordGamesExercise","_loop2","_render1","Exercise","toBeFalsy","timeout","loadTime","toBeLessThan","largeDataSet","Array","from","length","_","i","_render10"],"sources":["exercise-flows.test.js"],"sourcesContent":["// __tests__/integration/exercise-flows.test.js\nimport React from 'react';\nimport { render, fireEvent, waitFor, act } from '@testing-library/react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n// Mocks\njest.mock('expo-router', () => ({\n  router: {\n    push: jest.fn(),\n    back: jest.fn(),\n  },\n  useLocalSearchParams: () => ({ level: '1', mode: 'classic' }),\n}));\n\njest.mock('@react-navigation/native', () => ({\n  useFocusEffect: jest.fn((callback) => callback()),\n}));\n\njest.mock('@react-native-async-storage/async-storage', () => ({\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n}));\n\n// Import des composants d'exercices\nimport VocabularyExercise from '../../src/screens/exercises/vocabulary';\nimport SpellingExercise from '../../src/screens/exercises/spelling';\nimport ReadingExercise from '../../src/screens/exercises/reading';\nimport WordGamesExercise from '../../src/screens/exercises/word-games';\n\n// Providers\nimport { ThemeContext } from '../../src/contexts/ThemeContext';\nimport { ProgressProvider } from '../../src/contexts/ProgressContext';\n\nconst mockTheme = {\n  colors: {\n    background: '#F8FAFC',\n    primary: '#3B82F6',\n    surface: '#FFFFFF',\n    text: '#1F2937',\n    textSecondary: '#6B7280',\n  },\n};\n\nconst TestWrapper = ({ children }) => (\n  <ThemeContext.Provider value={mockTheme}>\n    <ProgressProvider>\n      {children}\n    </ProgressProvider>\n  </ThemeContext.Provider>\n);\n\ndescribe('Exercise Flows Integration Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    AsyncStorage.getItem.mockResolvedValue(null);\n  });\n\n  describe('Vocabulary Exercise Flow', () => {\n    it('should complete a full vocabulary exercise session', async () => {\n      // Mock des données de vocabulaire\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key === 'vocabulary_data_1') {\n          return Promise.resolve(JSON.stringify([\n            { word: 'hello', translation: 'bonjour', category: 'greetings' },\n            { word: 'goodbye', translation: 'au revoir', category: 'greetings' },\n            { word: 'thank you', translation: 'merci', category: 'politeness' },\n          ]));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { getByTestId, getByText, queryByTestId } = render(\n        <TestWrapper>\n          <VocabularyExercise />\n        </TestWrapper>\n      );\n\n      // Attendre le chargement\n      await waitFor(() => {\n        expect(queryByTestId('vocabulary-word')).toBeTruthy();\n      });\n\n      // Vérifier le premier mot\n      expect(getByText('hello')).toBeTruthy();\n      expect(getByText('1/3')).toBeTruthy();\n\n      // Révéler la traduction\n      const revealButton = getByTestId('reveal-translation-button');\n      fireEvent.press(revealButton);\n\n      await waitFor(() => {\n        expect(getByTestId('vocabulary-translation')).toBeTruthy();\n        expect(getByText('bonjour')).toBeTruthy();\n      });\n\n      // Passer au mot suivant\n      const nextButton = getByTestId('next-word-button');\n      fireEvent.press(nextButton);\n\n      await waitFor(() => {\n        expect(getByText('goodbye')).toBeTruthy();\n        expect(getByText('2/3')).toBeTruthy();\n      });\n\n      // Continuer jusqu'à la fin\n      fireEvent.press(revealButton);\n      fireEvent.press(nextButton);\n\n      await waitFor(() => {\n        expect(getByText('thank you')).toBeTruthy();\n        expect(getByText('3/3')).toBeTruthy();\n      });\n\n      // Terminer l'exercice\n      fireEvent.press(revealButton);\n      fireEvent.press(nextButton);\n\n      // Vérifier la sauvegarde des résultats\n      await waitFor(() => {\n        expect(AsyncStorage.setItem).toHaveBeenCalledWith(\n          expect.stringContaining('results_vocabulary_1'),\n          expect.any(String)\n        );\n      });\n    });\n\n    it('should handle vocabulary exercise with different modes', async () => {\n      // Test mode rapide\n      const { useLocalSearchParams } = require('expo-router');\n      useLocalSearchParams.mockReturnValue({ level: '1', mode: 'fast' });\n\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key === 'vocabulary_data_1') {\n          return Promise.resolve(JSON.stringify([\n            { word: 'fast', translation: 'rapide', category: 'adjectives' },\n          ]));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { getByTestId, queryByTestId } = render(\n        <TestWrapper>\n          <VocabularyExercise />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(queryByTestId('vocabulary-word')).toBeTruthy();\n      });\n\n      // En mode rapide, la révélation devrait être automatique ou différente\n      expect(queryByTestId('reveal-translation-button')).toBeTruthy();\n    });\n  });\n\n  describe('Spelling Exercise Flow', () => {\n    it('should handle spelling input and validation', async () => {\n      // Mock des données d'orthographe\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key === 'spelling_data_1') {\n          return Promise.resolve(JSON.stringify([\n            { word: 'hello', audio: 'hello.mp3', hint: 'A greeting' },\n            { word: 'world', audio: 'world.mp3', hint: 'The Earth' },\n          ]));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { getByTestId, getByText, queryByTestId } = render(\n        <TestWrapper>\n          <SpellingExercise />\n        </TestWrapper>\n      );\n\n      // Attendre le chargement\n      await waitFor(() => {\n        expect(queryByTestId('spelling-input')).toBeTruthy();\n      });\n\n      // Saisir une réponse correcte\n      const input = getByTestId('spelling-input');\n      fireEvent.changeText(input, 'hello');\n\n      // Valider\n      const checkButton = getByTestId('check-spelling-button');\n      fireEvent.press(checkButton);\n\n      // Vérifier le feedback positif\n      await waitFor(() => {\n        expect(queryByTestId('spelling-feedback')).toBeTruthy();\n      });\n\n      // Passer au mot suivant\n      const nextButton = getByTestId('next-spelling-button');\n      fireEvent.press(nextButton);\n\n      // Tester une réponse incorrecte\n      fireEvent.changeText(input, 'wrold'); // Faute de frappe\n      fireEvent.press(checkButton);\n\n      // Vérifier le feedback négatif\n      await waitFor(() => {\n        expect(queryByTestId('spelling-feedback')).toBeTruthy();\n      });\n    });\n\n    it('should provide hints and corrections', async () => {\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key === 'spelling_data_1') {\n          return Promise.resolve(JSON.stringify([\n            { word: 'difficult', audio: 'difficult.mp3', hint: 'Not easy' },\n          ]));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { getByTestId, queryByTestId } = render(\n        <TestWrapper>\n          <SpellingExercise />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(queryByTestId('spelling-input')).toBeTruthy();\n      });\n\n      // Demander un indice\n      const hintButton = queryByTestId('hint-button');\n      if (hintButton) {\n        fireEvent.press(hintButton);\n\n        await waitFor(() => {\n          expect(queryByTestId('spelling-hint')).toBeTruthy();\n        });\n      }\n    });\n  });\n\n  describe('Reading Exercise Flow', () => {\n    it('should display text and handle comprehension questions', async () => {\n      // Mock des données de lecture\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key === 'reading_data_1') {\n          return Promise.resolve(JSON.stringify([\n            {\n              title: 'A Day at the Park',\n              text: 'Yesterday, I went to the park with my friends. We played football and had a picnic.',\n              questions: [\n                {\n                  question: 'Where did they go?',\n                  options: ['Park', 'Beach', 'School', 'Home'],\n                  correct: 0\n                }\n              ]\n            }\n          ]));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { getByTestId, getByText, queryByTestId } = render(\n        <TestWrapper>\n          <ReadingExercise />\n        </TestWrapper>\n      );\n\n      // Attendre le chargement\n      await waitFor(() => {\n        expect(queryByTestId('reading-text')).toBeTruthy();\n      });\n\n      // Vérifier le texte\n      expect(getByText('A Day at the Park')).toBeTruthy();\n      expect(getByText(/Yesterday, I went to the park/)).toBeTruthy();\n\n      // Scroll dans le texte (simulation)\n      const readingText = getByTestId('reading-text');\n      fireEvent.scroll(readingText, {\n        nativeEvent: {\n          contentOffset: { y: 100 },\n          contentSize: { height: 500 },\n          layoutMeasurement: { height: 300 },\n        },\n      });\n\n      // Répondre aux questions\n      const questionsSection = queryByTestId('reading-questions');\n      if (questionsSection) {\n        const option1 = getByTestId('answer-option-0');\n        fireEvent.press(option1);\n\n        // Vérifier le feedback\n        await waitFor(() => {\n          expect(queryByTestId('question-feedback')).toBeTruthy();\n        });\n      }\n    });\n\n    it('should track reading progress and time', async () => {\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key === 'reading_data_1') {\n          return Promise.resolve(JSON.stringify([\n            {\n              title: 'Short Story',\n              text: 'This is a short story for testing.',\n              questions: []\n            }\n          ]));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { getByTestId, queryByTestId } = render(\n        <TestWrapper>\n          <ReadingExercise />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(queryByTestId('reading-text')).toBeTruthy();\n      });\n\n      // Simuler du temps de lecture\n      await act(async () => {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      });\n\n      // Vérifier que le temps est tracké\n      const timeTracker = queryByTestId('reading-time');\n      if (timeTracker) {\n        expect(timeTracker).toBeTruthy();\n      }\n    });\n  });\n\n  describe('Word Games Exercise Flow', () => {\n    it('should handle word game interactions', async () => {\n      // Mock des données de jeux\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key === 'wordgames_data_1') {\n          return Promise.resolve(JSON.stringify([\n            {\n              type: 'matching',\n              words: ['cat', 'dog', 'bird'],\n              translations: ['chat', 'chien', 'oiseau']\n            }\n          ]));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { getByTestId, queryByTestId } = render(\n        <TestWrapper>\n          <WordGamesExercise />\n        </TestWrapper>\n      );\n\n      // Attendre le chargement\n      await waitFor(() => {\n        expect(queryByTestId('game-element')).toBeTruthy();\n      });\n\n      // Interagir avec le jeu\n      const gameElement = getByTestId('game-element');\n      fireEvent.press(gameElement);\n\n      // Vérifier le score\n      const scoreElement = queryByTestId('game-score');\n      if (scoreElement) {\n        expect(scoreElement).toBeTruthy();\n      }\n    });\n\n    it('should handle different game types', async () => {\n      const gameTypes = ['matching', 'crossword', 'wordSearch'];\n\n      for (const gameType of gameTypes) {\n        AsyncStorage.getItem.mockImplementation((key) => {\n          if (key === 'wordgames_data_1') {\n            return Promise.resolve(JSON.stringify([\n              {\n                type: gameType,\n                words: ['test'],\n                data: { /* game specific data */ }\n              }\n            ]));\n          }\n          return Promise.resolve(null);\n        });\n\n        const { getByTestId, queryByTestId, unmount } = render(\n          <TestWrapper>\n            <WordGamesExercise />\n          </TestWrapper>\n        );\n\n        await waitFor(() => {\n          expect(queryByTestId('game-element')).toBeTruthy();\n        });\n\n        // Chaque type de jeu devrait se charger sans erreur\n        expect(queryByTestId('game-element')).toBeTruthy();\n\n        unmount();\n        jest.clearAllMocks();\n      }\n    });\n  });\n\n  describe('Exercise State Management', () => {\n    it('should save and restore exercise progress', async () => {\n      // Simuler une progression sauvegardée\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key === 'vocabulary_data_1') {\n          return Promise.resolve(JSON.stringify([\n            { word: 'hello', translation: 'bonjour' },\n            { word: 'goodbye', translation: 'au revoir' },\n          ]));\n        }\n        if (key === 'vocabulary_progress_1') {\n          return Promise.resolve(JSON.stringify({\n            currentWord: 1,\n            wordsCompleted: 1,\n            startTime: Date.now() - 60000 // 1 minute ago\n          }));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { getByTestId, getByText } = render(\n        <TestWrapper>\n          <VocabularyExercise />\n        </TestWrapper>\n      );\n\n      // Vérifier que l'exercice reprend où il s'était arrêt��\n      await waitFor(() => {\n        expect(getByText('goodbye')).toBeTruthy(); // Deuxième mot\n        expect(getByText('2/2')).toBeTruthy();\n      });\n    });\n\n    it('should handle exercise completion and results', async () => {\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key === 'vocabulary_data_1') {\n          return Promise.resolve(JSON.stringify([\n            { word: 'final', translation: 'final' },\n          ]));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { getByTestId, queryByTestId } = render(\n        <TestWrapper>\n          <VocabularyExercise />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(queryByTestId('vocabulary-word')).toBeTruthy();\n      });\n\n      // Compléter l'exercice\n      const revealButton = getByTestId('reveal-translation-button');\n      const nextButton = getByTestId('next-word-button');\n\n      fireEvent.press(revealButton);\n      fireEvent.press(nextButton);\n\n      // Vérifier la sauvegarde des résultats\n      await waitFor(() => {\n        expect(AsyncStorage.setItem).toHaveBeenCalledWith(\n          expect.stringContaining('results_'),\n          expect.any(String)\n        );\n      });\n    });\n  });\n\n  describe('Exercise Performance', () => {\n    it('should load exercises within acceptable time', async () => {\n      const exercises = [\n        VocabularyExercise,\n        SpellingExercise,\n        ReadingExercise,\n        WordGamesExercise,\n      ];\n\n      for (const Exercise of exercises) {\n        const startTime = Date.now();\n\n        const { queryByTestId, unmount } = render(\n          <TestWrapper>\n            <Exercise />\n          </TestWrapper>\n        );\n\n        // Attendre le chargement (ou timeout)\n        await waitFor(() => {\n          expect(queryByTestId('activity-indicator')).toBeFalsy();\n        }, { timeout: 3000 });\n\n        const loadTime = Date.now() - startTime;\n        expect(loadTime).toBeLessThan(3000); // Moins de 3 secondes\n\n        unmount();\n      }\n    });\n\n    it('should handle memory efficiently during long sessions', async () => {\n      // Simuler une longue session avec beaucoup de données\n      const largeDataSet = Array.from({ length: 100 }, (_, i) => ({\n        word: `word${i}`,\n        translation: `mot${i}`,\n      }));\n\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key === 'vocabulary_data_1') {\n          return Promise.resolve(JSON.stringify(largeDataSet));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { getByTestId, unmount } = render(\n        <TestWrapper>\n          <VocabularyExercise />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(getByTestId('vocabulary-word')).toBeTruthy();\n      });\n\n      // L'exercice devrait gérer efficacement les grandes quantités de données\n      expect(getByTestId('vocabulary-word')).toBeTruthy();\n\n      unmount();\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}