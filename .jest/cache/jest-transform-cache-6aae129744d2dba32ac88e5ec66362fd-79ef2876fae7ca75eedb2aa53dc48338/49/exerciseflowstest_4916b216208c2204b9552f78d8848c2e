fb73cbe225250386db4f29fdb0c1d127
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn(),
      back: jest.fn()
    },
    useLocalSearchParams: function useLocalSearchParams() {
      return {
        level: '1',
        mode: 'classic'
      };
    }
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useFocusEffect: jest.fn(function (callback) {
      return callback();
    })
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _vocabulary = _interopRequireDefault(require("../../src/screens/exercises/vocabulary"));
var _spelling = _interopRequireDefault(require("../../src/screens/exercises/spelling"));
var _reading = _interopRequireDefault(require("../../src/screens/exercises/reading"));
var _wordGames = _interopRequireDefault(require("../../src/screens/exercises/word-games"));
var _ThemeContext = require("../../src/contexts/ThemeContext");
var _ProgressContext = require("../../src/contexts/ProgressContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockTheme = {
  colors: {
    background: '#F8FAFC',
    primary: '#3B82F6',
    surface: '#FFFFFF',
    text: '#1F2937',
    textSecondary: '#6B7280'
  }
};
var TestWrapper = function TestWrapper(_ref) {
  var children = _ref.children;
  return (0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
    value: mockTheme,
    children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: children
    })
  });
};
describe('Exercise Flows Integration Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _asyncStorage.default.getItem.mockResolvedValue(null);
  });
  describe('Vocabulary Exercise Flow', function () {
    it('should complete a full vocabulary exercise session', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_data_1') {
          return Promise.resolve(JSON.stringify([{
            word: 'hello',
            translation: 'bonjour',
            category: 'greetings'
          }, {
            word: 'goodbye',
            translation: 'au revoir',
            category: 'greetings'
          }, {
            word: 'thank you',
            translation: 'merci',
            category: 'politeness'
          }]));
        }
        return Promise.resolve(null);
      });
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_vocabulary.default, {})
        })),
        getByTestId = _render.getByTestId,
        getByText = _render.getByText,
        queryByTestId = _render.queryByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByTestId('vocabulary-word')).toBeTruthy();
      });
      expect(getByText('hello')).toBeTruthy();
      expect(getByText('1/3')).toBeTruthy();
      var revealButton = getByTestId('reveal-translation-button');
      _reactNative.fireEvent.press(revealButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('vocabulary-translation')).toBeTruthy();
        expect(getByText('bonjour')).toBeTruthy();
      });
      var nextButton = getByTestId('next-word-button');
      _reactNative.fireEvent.press(nextButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('goodbye')).toBeTruthy();
        expect(getByText('2/3')).toBeTruthy();
      });
      _reactNative.fireEvent.press(revealButton);
      _reactNative.fireEvent.press(nextButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('thank you')).toBeTruthy();
        expect(getByText('3/3')).toBeTruthy();
      });
      _reactNative.fireEvent.press(revealButton);
      _reactNative.fireEvent.press(nextButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(_asyncStorage.default.setItem).toHaveBeenCalledWith(expect.stringContaining('results_vocabulary_1'), expect.any(String));
      });
    }));
    it('should handle vocabulary exercise with different modes', (0, _asyncToGenerator2.default)(function* () {
      var _require = require('expo-router'),
        useLocalSearchParams = _require.useLocalSearchParams;
      useLocalSearchParams.mockReturnValue({
        level: '1',
        mode: 'fast'
      });
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_data_1') {
          return Promise.resolve(JSON.stringify([{
            word: 'fast',
            translation: 'rapide',
            category: 'adjectives'
          }]));
        }
        return Promise.resolve(null);
      });
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_vocabulary.default, {})
        })),
        getByTestId = _render2.getByTestId,
        queryByTestId = _render2.queryByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByTestId('vocabulary-word')).toBeTruthy();
      });
      expect(queryByTestId('reveal-translation-button')).toBeTruthy();
    }));
  });
  describe('Spelling Exercise Flow', function () {
    it('should handle spelling input and validation', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'spelling_data_1') {
          return Promise.resolve(JSON.stringify([{
            word: 'hello',
            audio: 'hello.mp3',
            hint: 'A greeting'
          }, {
            word: 'world',
            audio: 'world.mp3',
            hint: 'The Earth'
          }]));
        }
        return Promise.resolve(null);
      });
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_spelling.default, {})
        })),
        getByTestId = _render3.getByTestId,
        getByText = _render3.getByText,
        queryByTestId = _render3.queryByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByTestId('spelling-input')).toBeTruthy();
      });
      var input = getByTestId('spelling-input');
      _reactNative.fireEvent.changeText(input, 'hello');
      var checkButton = getByTestId('check-spelling-button');
      _reactNative.fireEvent.press(checkButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByTestId('spelling-feedback')).toBeTruthy();
      });
      var nextButton = getByTestId('next-spelling-button');
      _reactNative.fireEvent.press(nextButton);
      _reactNative.fireEvent.changeText(input, 'wrold');
      _reactNative.fireEvent.press(checkButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByTestId('spelling-feedback')).toBeTruthy();
      });
    }));
    it('should provide hints and corrections', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'spelling_data_1') {
          return Promise.resolve(JSON.stringify([{
            word: 'difficult',
            audio: 'difficult.mp3',
            hint: 'Not easy'
          }]));
        }
        return Promise.resolve(null);
      });
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_spelling.default, {})
        })),
        getByTestId = _render4.getByTestId,
        queryByTestId = _render4.queryByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByTestId('spelling-input')).toBeTruthy();
      });
      var hintButton = queryByTestId('hint-button');
      if (hintButton) {
        _reactNative.fireEvent.press(hintButton);
        yield (0, _reactNative.waitFor)(function () {
          expect(queryByTestId('spelling-hint')).toBeTruthy();
        });
      }
    }));
  });
  describe('Reading Exercise Flow', function () {
    it('should display text and handle comprehension questions', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'reading_data_1') {
          return Promise.resolve(JSON.stringify([{
            title: 'A Day at the Park',
            text: 'Yesterday, I went to the park with my friends. We played football and had a picnic.',
            questions: [{
              question: 'Where did they go?',
              options: ['Park', 'Beach', 'School', 'Home'],
              correct: 0
            }]
          }]));
        }
        return Promise.resolve(null);
      });
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_reading.default, {})
        })),
        getByTestId = _render5.getByTestId,
        getByText = _render5.getByText,
        queryByTestId = _render5.queryByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByTestId('reading-text')).toBeTruthy();
      });
      expect(getByText('A Day at the Park')).toBeTruthy();
      expect(getByText(/Yesterday, I went to the park/)).toBeTruthy();
      var readingText = getByTestId('reading-text');
      _reactNative.fireEvent.scroll(readingText, {
        nativeEvent: {
          contentOffset: {
            y: 100
          },
          contentSize: {
            height: 500
          },
          layoutMeasurement: {
            height: 300
          }
        }
      });
      var questionsSection = queryByTestId('reading-questions');
      if (questionsSection) {
        var option1 = getByTestId('answer-option-0');
        _reactNative.fireEvent.press(option1);
        yield (0, _reactNative.waitFor)(function () {
          expect(queryByTestId('question-feedback')).toBeTruthy();
        });
      }
    }));
    it('should track reading progress and time', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'reading_data_1') {
          return Promise.resolve(JSON.stringify([{
            title: 'Short Story',
            text: 'This is a short story for testing.',
            questions: []
          }]));
        }
        return Promise.resolve(null);
      });
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_reading.default, {})
        })),
        getByTestId = _render6.getByTestId,
        queryByTestId = _render6.queryByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByTestId('reading-text')).toBeTruthy();
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield new Promise(function (resolve) {
          return setTimeout(resolve, 1000);
        });
      }));
      var timeTracker = queryByTestId('reading-time');
      if (timeTracker) {
        expect(timeTracker).toBeTruthy();
      }
    }));
  });
  describe('Word Games Exercise Flow', function () {
    it('should handle word game interactions', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'wordgames_data_1') {
          return Promise.resolve(JSON.stringify([{
            type: 'matching',
            words: ['cat', 'dog', 'bird'],
            translations: ['chat', 'chien', 'oiseau']
          }]));
        }
        return Promise.resolve(null);
      });
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_wordGames.default, {})
        })),
        getByTestId = _render7.getByTestId,
        queryByTestId = _render7.queryByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByTestId('game-element')).toBeTruthy();
      });
      var gameElement = getByTestId('game-element');
      _reactNative.fireEvent.press(gameElement);
      var scoreElement = queryByTestId('game-score');
      if (scoreElement) {
        expect(scoreElement).toBeTruthy();
      }
    }));
    it('should handle different game types', (0, _asyncToGenerator2.default)(function* () {
      var gameTypes = ['matching', 'crossword', 'wordSearch'];
      var _loop = function* _loop(gameType) {
        _asyncStorage.default.getItem.mockImplementation(function (key) {
          if (key === 'wordgames_data_1') {
            return Promise.resolve(JSON.stringify([{
              type: gameType,
              words: ['test'],
              data: {}
            }]));
          }
          return Promise.resolve(null);
        });
        var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
            children: (0, _jsxRuntime.jsx)(_wordGames.default, {})
          })),
          getByTestId = _render8.getByTestId,
          queryByTestId = _render8.queryByTestId,
          unmount = _render8.unmount;
        yield (0, _reactNative.waitFor)(function () {
          expect(queryByTestId('game-element')).toBeTruthy();
        });
        expect(queryByTestId('game-element')).toBeTruthy();
        unmount();
        jest.clearAllMocks();
      };
      for (var gameType of gameTypes) {
        yield* _loop(gameType);
      }
    }));
  });
  describe('Exercise State Management', function () {
    it('should save and restore exercise progress', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_data_1') {
          return Promise.resolve(JSON.stringify([{
            word: 'hello',
            translation: 'bonjour'
          }, {
            word: 'goodbye',
            translation: 'au revoir'
          }]));
        }
        if (key === 'vocabulary_progress_1') {
          return Promise.resolve(JSON.stringify({
            currentWord: 1,
            wordsCompleted: 1,
            startTime: Date.now() - 60000
          }));
        }
        return Promise.resolve(null);
      });
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_vocabulary.default, {})
        })),
        getByTestId = _render9.getByTestId,
        getByText = _render9.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('goodbye')).toBeTruthy();
        expect(getByText('2/2')).toBeTruthy();
      });
    }));
    it('should handle exercise completion and results', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_data_1') {
          return Promise.resolve(JSON.stringify([{
            word: 'final',
            translation: 'final'
          }]));
        }
        return Promise.resolve(null);
      });
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_vocabulary.default, {})
        })),
        getByTestId = _render0.getByTestId,
        queryByTestId = _render0.queryByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByTestId('vocabulary-word')).toBeTruthy();
      });
      var revealButton = getByTestId('reveal-translation-button');
      var nextButton = getByTestId('next-word-button');
      _reactNative.fireEvent.press(revealButton);
      _reactNative.fireEvent.press(nextButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(_asyncStorage.default.setItem).toHaveBeenCalledWith(expect.stringContaining('results_'), expect.any(String));
      });
    }));
  });
  describe('Exercise Performance', function () {
    it('should load exercises within acceptable time', (0, _asyncToGenerator2.default)(function* () {
      var exercises = [_vocabulary.default, _spelling.default, _reading.default, _wordGames.default];
      var _loop2 = function* _loop2() {
        var startTime = Date.now();
        var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
            children: (0, _jsxRuntime.jsx)(Exercise, {})
          })),
          queryByTestId = _render1.queryByTestId,
          unmount = _render1.unmount;
        yield (0, _reactNative.waitFor)(function () {
          expect(queryByTestId('activity-indicator')).toBeFalsy();
        }, {
          timeout: 3000
        });
        var loadTime = Date.now() - startTime;
        expect(loadTime).toBeLessThan(3000);
        unmount();
      };
      for (var Exercise of exercises) {
        yield* _loop2();
      }
    }));
    it('should handle memory efficiently during long sessions', (0, _asyncToGenerator2.default)(function* () {
      var largeDataSet = Array.from({
        length: 100
      }, function (_, i) {
        return {
          word: `word${i}`,
          translation: `mot${i}`
        };
      });
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_data_1') {
          return Promise.resolve(JSON.stringify(largeDataSet));
        }
        return Promise.resolve(null);
      });
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_vocabulary.default, {})
        })),
        getByTestId = _render10.getByTestId,
        unmount = _render10.unmount;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('vocabulary-word')).toBeTruthy();
      });
      expect(getByTestId('vocabulary-word')).toBeTruthy();
      unmount();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,