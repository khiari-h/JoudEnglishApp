b37f4252ed7cb02a6cb46b7773267412
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateTotalProgress = exports.calculateTotalExercises = exports.calculateRuleProgress = exports.calculateCompletedExercisesCount = void 0;
var calculateTotalExercises = exports.calculateTotalExercises = function calculateTotalExercises(grammarData) {
  return grammarData.reduce(function (total, rule) {
    var _rule$exercises;
    return total + (((_rule$exercises = rule.exercises) == null ? void 0 : _rule$exercises.length) || 0);
  }, 0);
};
var calculateCompletedExercisesCount = exports.calculateCompletedExercisesCount = function calculateCompletedExercisesCount(completedExercises) {
  return Object.values(completedExercises).reduce(function (total, exercises) {
    return total + ((exercises == null ? void 0 : exercises.length) || 0);
  }, 0);
};
var calculateTotalProgress = exports.calculateTotalProgress = function calculateTotalProgress(grammarData, completedExercises) {
  var totalExercises = calculateTotalExercises(grammarData);
  var completedCount = calculateCompletedExercisesCount(completedExercises);
  return totalExercises > 0 ? Math.round(completedCount / totalExercises * 100) : 0;
};
var calculateRuleProgress = exports.calculateRuleProgress = function calculateRuleProgress(grammarData, completedExercises) {
  return grammarData.map(function (rule, index) {
    var _rule$exercises2, _completedExercises$i;
    var totalExercises = ((_rule$exercises2 = rule.exercises) == null ? void 0 : _rule$exercises2.length) || 0;
    var completedCount = ((_completedExercises$i = completedExercises[index]) == null ? void 0 : _completedExercises$i.length) || 0;
    var progress = totalExercises > 0 ? completedCount / totalExercises * 100 : 0;
    return {
      title: rule.title,
      totalExercises: totalExercises,
      completedExercises: completedCount,
      progress: Math.round(progress)
    };
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjYWxjdWxhdGVUb3RhbEV4ZXJjaXNlcyIsImV4cG9ydHMiLCJncmFtbWFyRGF0YSIsInJlZHVjZSIsInRvdGFsIiwicnVsZSIsIl9ydWxlJGV4ZXJjaXNlcyIsImV4ZXJjaXNlcyIsImxlbmd0aCIsImNhbGN1bGF0ZUNvbXBsZXRlZEV4ZXJjaXNlc0NvdW50IiwiY29tcGxldGVkRXhlcmNpc2VzIiwiT2JqZWN0IiwidmFsdWVzIiwiY2FsY3VsYXRlVG90YWxQcm9ncmVzcyIsInRvdGFsRXhlcmNpc2VzIiwiY29tcGxldGVkQ291bnQiLCJNYXRoIiwicm91bmQiLCJjYWxjdWxhdGVSdWxlUHJvZ3Jlc3MiLCJtYXAiLCJpbmRleCIsIl9ydWxlJGV4ZXJjaXNlczIiLCJfY29tcGxldGVkRXhlcmNpc2VzJGkiLCJwcm9ncmVzcyIsInRpdGxlIl0sInNvdXJjZXMiOlsiZ3JhbW1hclN0YXRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHV0aWxzL2dyYW1tYXIvZ3JhbW1hclN0YXRzLmpzIC0gRm9uY3Rpb25zIHV0aWxpdGFpcmVzIChwYXR0ZXJuIGlkZW50aXF1ZSDDoCB2b2NhYnVsYXJ5U3RhdHMpXG5cbi8qKlxuICog8J+TiiBVdGlsaXRhaXJlcyBkZSBjYWxjdWwgcG91ciBHcmFtbWFyXG4gKiBQYXR0ZXJuIGlkZW50aXF1ZSDDoCB1dGlscy92b2NhYnVsYXJ5L3ZvY2FidWxhcnlTdGF0cy5qc1xuICogR2FyZGUgbGEgbG9naXF1ZSBtw6l0aWVyIHPDqXBhcsOpZSBkZXMgY29tcG9zYW50c1xuICovXG5cbi8qKlxuICogQ2FsY3VsZXIgbGUgbm9tYnJlIHRvdGFsIGQnZXhlcmNpY2VzXG4gKiBAcGFyYW0ge0FycmF5fSBncmFtbWFyRGF0YSAtIERvbm7DqWVzIGRlIGdyYW1tYWlyZSBbeyBleGVyY2lzZXM6IFsuLi5dIH1dXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBOb21icmUgdG90YWwgZCdleGVyY2ljZXNcbiAqL1xuZXhwb3J0IGNvbnN0IGNhbGN1bGF0ZVRvdGFsRXhlcmNpc2VzID0gKGdyYW1tYXJEYXRhKSA9PiB7XG4gIHJldHVybiBncmFtbWFyRGF0YS5yZWR1Y2UoKHRvdGFsLCBydWxlKSA9PiB7XG4gICAgcmV0dXJuIHRvdGFsICsgKHJ1bGUuZXhlcmNpc2VzPy5sZW5ndGggfHwgMCk7XG4gIH0sIDApO1xufTtcblxuLyoqXG4gKiBDYWxjdWxlciBsZSBub21icmUgZCdleGVyY2ljZXMgY29tcGzDqXTDqXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb21wbGV0ZWRFeGVyY2lzZXMgLSBFeGVyY2ljZXMgY29tcGzDqXTDqXMgezA6IFswLDFdLCAxOiBbMF19XG4gKiBAcmV0dXJucyB7bnVtYmVyfSBOb21icmUgZCdleGVyY2ljZXMgY29tcGzDqXTDqXNcbiAqL1xuZXhwb3J0IGNvbnN0IGNhbGN1bGF0ZUNvbXBsZXRlZEV4ZXJjaXNlc0NvdW50ID0gKGNvbXBsZXRlZEV4ZXJjaXNlcykgPT4ge1xuICByZXR1cm4gT2JqZWN0LnZhbHVlcyhjb21wbGV0ZWRFeGVyY2lzZXMpLnJlZHVjZSgodG90YWwsIGV4ZXJjaXNlcykgPT4ge1xuICAgIHJldHVybiB0b3RhbCArIChleGVyY2lzZXM/Lmxlbmd0aCB8fCAwKTtcbiAgfSwgMCk7XG59O1xuXG4vKipcbiAqIENhbGN1bGVyIGxhIHByb2dyZXNzaW9uIHRvdGFsZSBlbiBwb3VyY2VudGFnZVxuICogQHBhcmFtIHtBcnJheX0gZ3JhbW1hckRhdGEgLSBEb25uw6llcyBkZSBncmFtbWFpcmVcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb21wbGV0ZWRFeGVyY2lzZXMgLSBFeGVyY2ljZXMgY29tcGzDqXTDqXNcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFBvdXJjZW50YWdlIGRlIHByb2dyZXNzaW9uICgwLTEwMClcbiAqL1xuZXhwb3J0IGNvbnN0IGNhbGN1bGF0ZVRvdGFsUHJvZ3Jlc3MgPSAoZ3JhbW1hckRhdGEsIGNvbXBsZXRlZEV4ZXJjaXNlcykgPT4ge1xuICBjb25zdCB0b3RhbEV4ZXJjaXNlcyA9IGNhbGN1bGF0ZVRvdGFsRXhlcmNpc2VzKGdyYW1tYXJEYXRhKTtcbiAgY29uc3QgY29tcGxldGVkQ291bnQgPSBjYWxjdWxhdGVDb21wbGV0ZWRFeGVyY2lzZXNDb3VudChjb21wbGV0ZWRFeGVyY2lzZXMpO1xuICBcbiAgcmV0dXJuIHRvdGFsRXhlcmNpc2VzID4gMCA/IE1hdGgucm91bmQoKGNvbXBsZXRlZENvdW50IC8gdG90YWxFeGVyY2lzZXMpICogMTAwKSA6IDA7XG59O1xuXG4vKipcbiAqIENhbGN1bGVyIGxhIHByb2dyZXNzaW9uIHBhciByw6hnbGUgZ3JhbW1hdGljYWxlXG4gKiBAcGFyYW0ge0FycmF5fSBncmFtbWFyRGF0YSAtIERvbm7DqWVzIGRlIGdyYW1tYWlyZVxuICogQHBhcmFtIHtPYmplY3R9IGNvbXBsZXRlZEV4ZXJjaXNlcyAtIEV4ZXJjaWNlcyBjb21wbMOpdMOpc1xuICogQHJldHVybnMge0FycmF5fSBQcm9ncmVzc2lvbiBwYXIgcsOoZ2xlXG4gKi9cbmV4cG9ydCBjb25zdCBjYWxjdWxhdGVSdWxlUHJvZ3Jlc3MgPSAoZ3JhbW1hckRhdGEsIGNvbXBsZXRlZEV4ZXJjaXNlcykgPT4ge1xuICByZXR1cm4gZ3JhbW1hckRhdGEubWFwKChydWxlLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IHRvdGFsRXhlcmNpc2VzID0gcnVsZS5leGVyY2lzZXM/Lmxlbmd0aCB8fCAwO1xuICAgIGNvbnN0IGNvbXBsZXRlZENvdW50ID0gY29tcGxldGVkRXhlcmNpc2VzW2luZGV4XT8ubGVuZ3RoIHx8IDA7XG4gICAgY29uc3QgcHJvZ3Jlc3MgPSB0b3RhbEV4ZXJjaXNlcyA+IDAgPyAoY29tcGxldGVkQ291bnQgLyB0b3RhbEV4ZXJjaXNlcykgKiAxMDAgOiAwO1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICB0aXRsZTogcnVsZS50aXRsZSxcbiAgICAgIHRvdGFsRXhlcmNpc2VzLFxuICAgICAgY29tcGxldGVkRXhlcmNpc2VzOiBjb21wbGV0ZWRDb3VudCxcbiAgICAgIHByb2dyZXNzOiBN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