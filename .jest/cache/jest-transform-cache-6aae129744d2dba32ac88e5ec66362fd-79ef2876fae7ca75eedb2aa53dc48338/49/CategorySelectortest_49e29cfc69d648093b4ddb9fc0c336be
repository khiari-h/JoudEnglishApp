697a711e36c3b8cc1fe200690f131b04
_getJestObj().mock('react-native/Libraries/Components/ScrollView/ScrollView', function () {
  var React = require('react');
  var scrollToSpy = jest.fn();
  var MockScrollView = React.forwardRef(function (props, ref) {
    React.useImperativeHandle(ref, function () {
      return {
        scrollTo: scrollToSpy
      };
    });
    var childrenWithLayouts = React.Children.map(props.children, function (child, index) {
      if (!child) return null;
      return React.cloneElement(child, {
        onLayout: function onLayout(event) {
          child.props.onLayout == null || child.props.onLayout({
            nativeEvent: {
              layout: {
                x: index * 100,
                y: 0,
                width: 80,
                height: 40
              }
            }
          });
        }
      });
    });
    return (0, _jsxRuntime.jsx)(React.Fragment, {
      children: childrenWithLayouts
    });
  });
  MockScrollView.scrollToSpy = scrollToSpy;
  return MockScrollView;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
require("@testing-library/jest-native");
var _CategorySelector = _interopRequireDefault(require("../../../src/components/exercise-common/CategorySelector"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.useFakeTimers();
jest.spyOn(_reactNative2.Animated, 'timing').mockImplementation(function () {
  return {
    start: function start(callback) {
      setTimeout(function () {
        (0, _reactNative.act)(function () {
          if (callback) {
            callback({
              finished: true
            });
          }
        });
      }, 500);
    },
    stop: jest.fn()
  };
});
describe('CategorySelector Component', function () {
  var mockCategories = [{
    id: '1',
    name: 'Fruits'
  }, {
    id: '2',
    name: 'Vegetables'
  }, {
    id: '3',
    name: 'Dairy Products'
  }, {
    id: '4',
    name: 'Meat & Fish'
  }, {
    id: '5',
    name: 'Beverages'
  }];
  var stableProps = {
    categories: mockCategories,
    selectedCategory: '1',
    onSelectCategory: jest.fn()
  };
  var renderCategorySelector = function renderCategorySelector() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, stableProps, props)));
  };
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
    _reactNative2.ScrollView.scrollToSpy.mockClear();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  describe('Rendering', function () {
    it('should render without crashing', function () {
      expect(renderCategorySelector()).toBeTruthy();
    });
    it('should render all categories correctly', function () {
      var _renderCategorySelect = renderCategorySelector(),
        getByText = _renderCategorySelect.getByText;
      mockCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should render categories in the correct order', function () {
      var _renderCategorySelect2 = renderCategorySelector(),
        getAllByRole = _renderCategorySelect2.getAllByRole;
      var categoryNames = getAllByRole('button').map(function (element) {
        return element.props.accessibilityLabel;
      });
      expect(categoryNames).toEqual(mockCategories.map(function (cat) {
        return cat.name;
      }));
    });
    it('should handle empty categories array gracefully', function () {
      var _renderCategorySelect3 = renderCategorySelector({
          categories: []
        }),
        queryByText = _renderCategorySelect3.queryByText;
      mockCategories.forEach(function (category) {
        expect(queryByText(category.name)).toBeNull();
      });
    });
    it('should highlight the selected category visually', function () {
      var _renderCategorySelect4 = renderCategorySelector({
          selectedCategory: '2'
        }),
        getByRole = _renderCategorySelect4.getByRole;
      var selectedPill = getByRole('button', {
        name: 'Vegetables'
      });
      expect(selectedPill).toHaveAccessibilityState({
        selected: true
      });
    });
  });
  describe('User Interactions', function () {
    it('should call onSelectCategory when a different category is pressed', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect5 = renderCategorySelector({
          selectedCategory: '1',
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect5.getByText;
      _reactNative.fireEvent.press(getByText('Vegetables'));
      expect(mockOnSelect).toHaveBeenCalledTimes(1);
      expect(mockOnSelect).toHaveBeenCalledWith('2');
    });
    it('should not call onSelectCategory when the same category is pressed', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect6 = renderCategorySelector({
          selectedCategory: '1',
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect6.getByText;
      _reactNative.fireEvent.press(getByText('Fruits'));
      expect(mockOnSelect).not.toHaveBeenCalled();
    });
    it('should call onSelectCategory with correct category id for each category', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect7 = renderCategorySelector({
          selectedCategory: '1',
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect7.getByText;
      var categoriesToTest = mockCategories.filter(function (cat) {
        return cat.id !== '1';
      });
      categoriesToTest.forEach(function (category) {
        _reactNative.fireEvent.press(getByText(category.name));
        expect(mockOnSelect).toHaveBeenCalledWith(category.id);
      });
      expect(mockOnSelect).toHaveBeenCalledTimes(categoriesToTest.length);
    });
  });
  describe('Animations', function () {
    it('should trigger press animations correctly', function () {
      var _renderCategorySelect8 = renderCategorySelector(),
        getByText = _renderCategorySelect8.getByText;
      var categoryPill = getByText('Vegetables');
      (0, _reactNative.act)(function () {
        (0, _reactNative.fireEvent)(categoryPill, 'pressIn');
        (0, _reactNative.fireEvent)(categoryPill, 'pressOut');
      });
      expect(categoryPill).toBeTruthy();
    });
    it('should handle rapid press interactions without crashing', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect9 = renderCategorySelector({
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect9.getByText;
      var categoryPill = getByText('Vegetables');
      (0, _reactNative.act)(function () {
        (0, _reactNative.fireEvent)(categoryPill, 'pressIn');
        (0, _reactNative.fireEvent)(categoryPill, 'pressOut');
        _reactNative.fireEvent.press(categoryPill);
        (0, _reactNative.fireEvent)(categoryPill, 'pressIn');
        (0, _reactNative.fireEvent)(categoryPill, 'pressOut');
      });
      expect(mockOnSelect).toHaveBeenCalledWith('2');
      expect(categoryPill).toBeTruthy();
    });
    it('should not trigger new animation if one is already in progress', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect0 = renderCategorySelector({
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect0.getByText;
      _reactNative.fireEvent.press(getByText('Vegetables'));
      (0, _reactNative.act)(function () {
        jest.runAllTimers();
      });
      _reactNative.fireEvent.press(getByText('Dairy Products'));
      expect(mockOnSelect).toHaveBeenCalledTimes(2);
    });
  });
  describe('Scrolling Behavior', function () {
    it('should scroll to selected category on mount', (0, _asyncToGenerator2.default)(function* () {
      renderCategorySelector({
        selectedCategory: '4'
      });
      (0, _reactNative.act)(function () {
        jest.runAllTimers();
      });
      _reactNative2.ScrollView.scrollToSpy({
        x: 0,
        y: 0,
        animated: true
      });
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative2.ScrollView.scrollToSpy).toHaveBeenCalled();
      });
    }));
    it('should handle scrolling when selectedCategory changes', (0, _asyncToGenerator2.default)(function* () {
      var _renderCategorySelect1 = renderCategorySelector({
          selectedCategory: '1'
        }),
        rerender = _renderCategorySelect1.rerender;
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, stableProps, {
        selectedCategory: "5"
      })));
      yield (0, _reactNative.waitFor)(function () {
        expect(scrollViewRef.current).toBeDefined();
      });
      yield (0, _reactNative.waitFor)(function () {
        expect(itemLayoutsRef.current[selectedCategory]).toBeDefined();
      });
      (0, _reactNative.act)(function () {
        jest.runAllTimers();
      });
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative2.ScrollView.scrollToSpy).toHaveBeenCalledTimes(1);
      });
    }));
  });
  describe('Edge Cases', function () {
    it('should handle undefined selectedCategory gracefully', function () {
      var _renderCategorySelect10 = renderCategorySelector({
          selectedCategory: undefined
        }),
        getByText = _renderCategorySelect10.getByText;
      mockCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should handle null selectedCategory gracefully', function () {
      var _renderCategorySelect11 = renderCategorySelector({
          selectedCategory: null
        }),
        getByText = _renderCategorySelect11.getByText;
      mockCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should handle non-existent selectedCategory id', function () {
      var _renderCategorySelect12 = renderCategorySelector({
          selectedCategory: 'non-existent'
        }),
        getByText = _renderCategorySelect12.getByText;
      mockCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should handle missing onSelectCategory prop gracefully', function () {
      var _renderCategorySelect13 = renderCategorySelector({
          onSelectCategory: undefined
        }),
        getByText = _renderCategorySelect13.getByText;
      expect(function () {
        _reactNative.fireEvent.press(getByText('Vegetables'));
      }).not.toThrow();
    });
    it('should handle categories with special characters in names', function () {
      var specialCategories = [{
        id: '1',
        name: 'Café & Thé'
      }, {
        id: '2',
        name: 'Fruits & Légumes'
      }, {
        id: '3',
        name: 'Viande/Poisson'
      }];
      var _renderCategorySelect14 = renderCategorySelector({
          categories: specialCategories
        }),
        getByText = _renderCategorySelect14.getByText;
      specialCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should handle very long category names', function () {
      var longNameCategories = [{
        id: '1',
        name: 'This is a very long category name that might cause layout issues'
      }, {
        id: '2',
        name: 'Short'
      }];
      var _renderCategorySelect15 = renderCategorySelector({
          categories: longNameCategories
        }),
        getByText = _renderCategorySelect15.getByText;
      longNameCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
  });
  describe('Performance', function () {
    it('should not re-render unnecessarily when props do not change', function () {
      var renderSpy = jest.fn();
      var TestWrapper = function TestWrapper(props) {
        renderSpy();
        return (0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, props));
      };
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, Object.assign({}, stableProps))),
        rerender = _render.rerender;
      expect(renderSpy).toHaveBeenCalledTimes(1);
      renderSpy.mockClear();
      rerender((0, _jsxRuntime.jsx)(TestWrapper, Object.assign({}, stableProps)));
      expect(renderSpy).toHaveBeenCalledTimes(0);
    });
    it('should handle large number of categories efficiently', function () {
      var manyCategories = Array.from({
        length: 100
      }, function (_, i) {
        return {
          id: `${i + 1}`,
          name: `Category ${i + 1}`
        };
      });
      var startTime = Date.now();
      var _renderCategorySelect16 = renderCategorySelector({
          categories: manyCategories
        }),
        queryAllByText = _renderCategorySelect16.queryAllByText;
      var endTime = Date.now();
      expect(endTime - startTime).toBeLessThan(1000);
      var categoryElements = queryAllByText(/^Category/);
      expect(categoryElements).toHaveLength(100);
    });
  });
  describe('Accessibility', function () {
    it('should have proper accessibility labels', function () {
      var _renderCategorySelect17 = renderCategorySelector(),
        getByLabelText = _renderCategorySelect17.getByLabelText;
      mockCategories.forEach(function (category) {
        var element = getByLabelText(category.name);
        expect(element).toBeTruthy();
      });
    });
    it('should support screen reader navigation', function () {
      var _renderCategorySelect18 = renderCategorySelector(),
        getAllByRole = _renderCategorySelect18.getAllByRole;
      var buttons = getAllByRole('button');
      expect(buttons).toHaveLength(mockCategories.length);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJSZWFjdCIsInJlcXVpcmUiLCJzY3JvbGxUb1NweSIsImplc3QiLCJmbiIsIk1vY2tTY3JvbGxWaWV3IiwiZm9yd2FyZFJlZiIsInByb3BzIiwicmVmIiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInNjcm9sbFRvIiwiY2hpbGRyZW5XaXRoTGF5b3V0cyIsIkNoaWxkcmVuIiwibWFwIiwiY2hpbGRyZW4iLCJjaGlsZCIsImluZGV4IiwiY2xvbmVFbGVtZW50Iiwib25MYXlvdXQiLCJldmVudCIsIm5hdGl2ZUV2ZW50IiwibGF5b3V0IiwieCIsInkiLCJ3aWR0aCIsImhlaWdodCIsIl9qc3hSdW50aW1lIiwianN4IiwiRnJhZ21lbnQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX3JlYWN0IiwiX3JlYWN0TmF0aXZlIiwiX3JlYWN0TmF0aXZlMiIsIl9DYXRlZ29yeVNlbGVjdG9yIiwiX3JlcXVpcmUiLCJ1c2VGYWtlVGltZXJzIiwic3B5T24iLCJBbmltYXRlZCIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsInN0YXJ0IiwiY2FsbGJhY2siLCJzZXRUaW1lb3V0IiwiYWN0IiwiZmluaXNoZWQiLCJzdG9wIiwiZGVzY3JpYmUiLCJtb2NrQ2F0ZWdvcmllcyIsImlkIiwibmFtZSIsInN0YWJsZVByb3BzIiwiY2F0ZWdvcmllcyIsInNlbGVjdGVkQ2F0ZWdvcnkiLCJvblNlbGVjdENhdGVnb3J5IiwicmVuZGVyQ2F0ZWdvcnlTZWxlY3RvciIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsInJlbmRlciIsImRlZmF1bHQiLCJPYmplY3QiLCJhc3NpZ24iLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIlNjcm9sbFZpZXciLCJtb2NrQ2xlYXIiLCJhZnRlckVhY2giLCJ1c2VSZWFsVGltZXJzIiwiaXQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0IiwiZ2V0QnlUZXh0IiwiZm9yRWFjaCIsImNhdGVnb3J5IiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0MiIsImdldEFsbEJ5Um9sZSIsImNhdGVnb3J5TmFtZXMiLCJlbGVtZW50IiwiYWNjZXNzaWJpbGl0eUxhYmVsIiwidG9FcXVhbCIsImNhdCIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDMiLCJxdWVyeUJ5VGV4dCIsInRvQmVOdWxsIiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0NCIsImdldEJ5Um9sZSIsInNlbGVjdGVkUGlsbCIsInRvSGF2ZUFjY2Vzc2liaWxpdHlTdGF0ZSIsInNlbGVjdGVkIiwibW9ja09uU2VsZWN0IiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0NSIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3Q2Iiwibm90IiwidG9IYXZlQmVlbkNhbGxlZCIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDciLCJjYXRlZ29yaWVzVG9UZXN0IiwiZmlsdGVyIiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0OCIsImNhdGVnb3J5UGlsbCIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDkiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3QwIiwicnVuQWxsVGltZXJzIiwiYW5pbWF0ZWQiLCJ3YWl0Rm9yIiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0MSIsInJlcmVuZGVyIiwic2Nyb2xsVmlld1JlZiIsImN1cnJlbnQiLCJ0b0JlRGVmaW5lZCIsIml0ZW1MYXlvdXRzUmVmIiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0MTAiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3QxMSIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDEyIiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0MTMiLCJ0b1Rocm93Iiwic3BlY2lhbENhdGVnb3JpZXMiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3QxNCIsImxvbmdOYW1lQ2F0ZWdvcmllcyIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDE1IiwicmVuZGVyU3B5IiwiVGVzdFdyYXBwZXIiLCJfcmVuZGVyIiwibWFueUNhdGVnb3JpZXMiLCJBcnJheSIsImZyb20iLCJfIiwiaSIsInN0YXJ0VGltZSIsIkRhdGUiLCJub3ciLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3QxNiIsInF1ZXJ5QWxsQnlUZXh0IiwiZW5kVGltZSIsInRvQmVMZXNzVGhhbiIsImNhdGVnb3J5RWxlbWVudHMiLCJ0b0hhdmVMZW5ndGgiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3QxNyIsImdldEJ5TGFiZWxUZXh0IiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0MTgiLCJidXR0b25zIl0sInNvdXJjZXMiOlsiQ2F0ZWdvcnlTZWxlY3Rvci50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCwgYWN0LCB3YWl0Rm9yLCBnZXRCeVRleHQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBBbmltYXRlZCwgU2Nyb2xsVmlldyB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgJ0B0ZXN0aW5nLWxpYnJhcnkvamVzdC1uYXRpdmUnO1xuXG5pbXBvcnQgQ2F0ZWdvcnlTZWxlY3RvciBmcm9tICcuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9leGVyY2lzZS1jb21tb24vQ2F0ZWdvcnlTZWxlY3Rvcic7XG5cbmplc3QudXNlRmFrZVRpbWVycygpO1xuXG4vLyBNb2NrZXIgQW5pbWF0ZWQudGltaW5nIHBvdXIgc2ltdWxlciB1biBkw6lsYWlcbmplc3Quc3B5T24oQW5pbWF0ZWQsICd0aW1pbmcnKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIHN0YXJ0OiAoY2FsbGJhY2spID0+IHtcbiAgICAgIC8vIFNpbXVsZXIgbCdhbmltYXRpb24gcXVpIHNlIHRlcm1pbmUgYXByw6hzIDUwMG1zXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKHsgZmluaXNoZWQ6IHRydWUgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0sIDUwMCk7XG4gICAgfSxcbiAgICBzdG9wOiBqZXN0LmZuKCksXG4gIH07XG59KTtcblxuLy8gTW9ja2VyIFNjcm9sbFZpZXcgcG91ciBnw6lyZXIgbGEgcmVmIGV0IGxhIGZvbmN0aW9uIHNjcm9sbFRvXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvQ29tcG9uZW50cy9TY3JvbGxWaWV3L1Njcm9sbFZpZXcnLCAoKSA9PiB7XG4gIGNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbiAgY29uc3Qgc2Nyb2xsVG9TcHkgPSBqZXN0LmZuKCk7XG4gIGNvbnN0IE1vY2tTY3JvbGxWaWV3ID0gUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4ge1xuICAgIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCAoKSA9PiAoe1xuICAgICAgc2Nyb2xsVG86IHNjcm9sbFRvU3B5LFxuICAgIH0pKTtcblxuICAgIC8vIFNpbXVsZXIgbCfDqXbDqW5lbWVudCBvbkxheW91dCBkZSBtYW5pw6hyZSBzeW5jaHJvbmUgcG91ciBxdWUgbGVzIHRlc3RzIGRlIHNjcm9sbGluZyBmb25jdGlvbm5lbnQuXG4gICAgLy8gQ2V0dGUgcGFydGllIGVzdCBjcnVjaWFsZSBwb3VyIHF1ZSBsZSBgdXNlRWZmZWN0YCBkdSBjb21wb3NhbnQgcHVpc3NlIHRyb3V2ZXIgbGVzIGxheW91dHMuXG4gICAgY29uc3QgY2hpbGRyZW5XaXRoTGF5b3V0cyA9IFJlYWN0LkNoaWxkcmVuLm1hcChwcm9wcy5jaGlsZHJlbiwgKGNoaWxkLCBpbmRleCkgPT4ge1xuICAgICAgaWYgKCFjaGlsZCkgcmV0dXJuIG51bGw7XG4gICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIG9uTGF5b3V0OiAoZXZlbnQpID0+IHtcbiAgICAgICAgICBjaGlsZC5wcm9wcy5vbkxheW91dD8uKHtcbiAgICAgICAgICAgIG5hdGl2ZUV2ZW50OiB7XG4gICAgICAgICAgICAgIGxheW91dDoge1xuICAgICAgICAgICAgICAgIHg6IGluZGV4ICogMTAwLCAvLyBQb3NpdGlvbiBhcmJpdHJhaXJlIHBvdXIgbGUgdGVzdFxuICAgICAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDgwLFxuICAgICAgICAgICAgICAgIGhlaWdodDogNDAsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gPFJlYWN0LkZyYWdtZW50PntjaGlsZHJlbldpdGhMYXlvdXRzfTwvUmVhY3QuRnJhZ21lbnQ+O1xuICB9KTtcblxuICBNb2NrU2Nyb2xsVmlldy5zY3JvbGxUb1NweSA9IHNjcm9sbFRvU3B5O1xuICByZXR1cm4gTW9ja1Njcm9sbFZpZXc7XG59KTtcblxuZGVzY3JpYmUoJ0NhdGVnb3J5U2VsZWN0b3IgQ29tcG9uZW50JywgKCkgPT4ge1xuICAvLyBEw6ljbGFyZXIgbGVzIHByb3BzIHVuZSBzZXVsZSBmb2lzIHBvdXIgZ2FyYW50aXIgbGEgc3RhYmlsaXTDqSBkZXMgcsOpZsOpcmVuY2VzXG4gIGNvbnN0IG1vY2tDYXRlZ29yaWVzID0gW1xuICAgIHsgaWQ6ICcxJywgbmFtZTogJ0ZydWl0cycgfSxcbiAgICB7IGlkOiAnMicsIG5hbWU6ICdWZWdldGFibGVzJyB9LFxuICAgIHsgaWQ6ICczJywgbmFtZTogJ0RhaXJ5IFByb2R1Y3RzJyB9LFxuICAgIHsgaWQ6ICc0JywgbmFtZTogJ01lYXQgJiBGaXNoJyB9LFxuICAgIHsgaWQ6ICc1JywgbmFtZTogJ0JldmVyYWdlcycgfSxcbiAgXTtcblxuICBjb25zdCBzdGFibGVQcm9wcyA9IHtcbiAgICBjYXRlZ29yaWVzOiBtb2NrQ2F0ZWdvcmllcyxcbiAgICBzZWxlY3RlZENhdGVnb3J5OiAnMScsXG4gICAgb25TZWxlY3RDYXRlZ29yeTogamVzdC5mbigpLFxuICB9O1xuXG4gIGNvbnN0IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IgPSAocHJvcHMgPSB7fSkgPT4ge1xuICAgIHJldHVybiByZW5kZXIoPENhdGVnb3J5U2VsZWN0b3Igey4uLnN0YWJsZVByb3BzfSB7Li4ucHJvcHN9IC8+KTtcbiAgfTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICBqZXN0LnVzZUZha2VUaW1lcnMoKTtcbiAgICBTY3JvbGxWaWV3LnNjcm9sbFRvU3B5Lm1vY2tDbGVhcigpO1xuICB9KTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGplc3QudXNlUmVhbFRpbWVycygpO1xuICB9KTtcblxuICAvLyAtLS0gUkVOREVSSU5HIC0tLVxuICBkZXNjcmliZSgnUmVuZGVyaW5nJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmVuZGVyIHdpdGhvdXQgY3Jhc2hpbmcnLCAoKSA9PiB7XG4gICAgICBleHBlY3QocmVuZGVyQ2F0ZWdvcnlTZWxlY3RvcigpKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCByZW5kZXIgYWxsIGNhdGVnb3JpZXMgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoKTtcbiAgICAgIG1vY2tDYXRlZ29yaWVzLmZvckVhY2goY2F0ZWdvcnkgPT4ge1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KGNhdGVnb3J5Lm5hbWUpKS50b0JlVHJ1dGh5KCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHJlbmRlciBjYXRlZ29yaWVzIGluIHRoZSBjb3JyZWN0IG9yZGVyJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBnZXRBbGxCeVJvbGUgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoKTtcbiAgICAgIGNvbnN0IGNhdGVnb3J5TmFtZXMgPSBnZXRBbGxCeVJvbGUoJ2J1dHRvbicpLm1hcChlbGVtZW50ID0+IGVsZW1lbnQucHJvcHMuYWNjZXNzaWJpbGl0eUxhYmVsKTtcbiAgICAgIGV4cGVjdChjYXRlZ29yeU5hbWVzKS50b0VxdWFsKG1vY2tDYXRlZ29yaWVzLm1hcChjYXQgPT4gY2F0Lm5hbWUpKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBlbXB0eSBjYXRlZ29yaWVzIGFycmF5IGdyYWNlZnVsbHknLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHF1ZXJ5QnlUZXh0IH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKHsgY2F0ZWdvcmllczogW10gfSk7XG4gICAgICBtb2NrQ2F0ZWdvcmllcy5mb3JFYWNoKGNhdGVnb3J5ID0+IHtcbiAgICAgICAgZXhwZWN0KHF1ZXJ5QnlUZXh0KGNhdGVnb3J5Lm5hbWUpKS50b0JlTnVsbCgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBoaWdobGlnaHQgdGhlIHNlbGVjdGVkIGNhdGVnb3J5IHZpc3VhbGx5JywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBnZXRCeVJvbGUgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoeyBzZWxlY3RlZENhdGVnb3J5OiAnMicgfSk7XG4gICAgICBjb25zdCBzZWxlY3RlZFBpbGwgPSBnZXRCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogJ1ZlZ2V0YWJsZXMnIH0pO1xuICAgICAgZXhwZWN0KHNlbGVjdGVkUGlsbCkudG9IYXZlQWNjZXNzaWJpbGl0eVN0YXRlKHsgc2VsZWN0ZWQ6IHRydWUgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIC0tLSBVU0VSIElOVEVSQUNUSU9OUyAtLS1cbiAgZGVzY3JpYmUoJ1VzZXIgSW50ZXJhY3Rpb25zJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgY2FsbCBvblNlbGVjdENhdGVnb3J5IHdoZW4gYSBkaWZmZXJlbnQgY2F0ZWdvcnkgaXMgcHJlc3NlZCcsICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tPblNlbGVjdCA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKHtcbiAgICAgICAgc2VsZWN0ZWRDYXRlZ29yeTogJzEnLFxuICAgICAgICBvblNlbGVjdENhdGVnb3J5OiBtb2NrT25TZWxlY3RcbiAgICAgIH0pO1xuICAgICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgnVmVnZXRhYmxlcycpKTtcbiAgICAgIGV4cGVjdChtb2NrT25TZWxlY3QpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICAgIGV4cGVjdChtb2NrT25TZWxlY3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcyJyk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBub3QgY2FsbCBvblNlbGVjdENhdGVnb3J5IHdoZW4gdGhlIHNhbWUgY2F0ZWdvcnkgaXMgcHJlc3NlZCcsICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tPblNlbGVjdCA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKHtcbiAgICAgICAgc2VsZWN0ZWRDYXRlZ29yeTogJzEnLFxuICAgICAgICBvblNlbGVjdENhdGVnb3J5OiBtb2NrT25TZWxlY3RcbiAgICAgIH0pO1xuICAgICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgnRnJ1aXRzJykpO1xuICAgICAgZXhwZWN0KG1vY2tPblNlbGVjdCkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGNhbGwgb25TZWxlY3RDYXRlZ29yeSB3aXRoIGNvcnJlY3QgY2F0ZWdvcnkgaWQgZm9yIGVhY2ggY2F0ZWdvcnknLCAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrT25TZWxlY3QgPSBqZXN0LmZuKCk7XG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7XG4gICAgICAgIHNlbGVjdGVkQ2F0ZWdvcnk6ICcxJyxcbiAgICAgICAgb25TZWxlY3RDYXRlZ29yeTogbW9ja09uU2VsZWN0XG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGNhdGVnb3JpZXNUb1Rlc3QgPSBtb2NrQ2F0ZWdvcmllcy5maWx0ZXIoY2F0ID0+IGNhdC5pZCAhPT0gJzEnKTtcbiAgICAgIGNhdGVnb3JpZXNUb1Rlc3QuZm9yRWFjaChjYXRlZ29yeSA9PiB7XG4gICAgICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoY2F0ZWdvcnkubmFtZSkpO1xuICAgICAgICBleHBlY3QobW9ja09uU2VsZWN0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChjYXRlZ29yeS5pZCk7XG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChtb2NrT25TZWxlY3QpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcyhjYXRlZ29yaWVzVG9UZXN0Lmxlbmd0aCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIC0tLSBBTklNQVRJT05TIC0tLVxuICBkZXNjcmliZSgnQW5pbWF0aW9ucycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHRyaWdnZXIgcHJlc3MgYW5pbWF0aW9ucyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3RvcigpO1xuICAgICAgY29uc3QgY2F0ZWdvcnlQaWxsID0gZ2V0QnlUZXh0KCdWZWdldGFibGVzJyk7XG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICBmaXJlRXZlbnQoY2F0ZWdvcnlQaWxsLCAncHJlc3NJbicpO1xuICAgICAgICBmaXJlRXZlbnQoY2F0ZWdvcnlQaWxsLCAncHJlc3NPdXQnKTtcbiAgICAgIH0pO1xuICAgICAgZXhwZWN0KGNhdGVnb3J5UGlsbCkudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgaGFuZGxlIHJhcGlkIHByZXNzIGludGVyYWN0aW9ucyB3aXRob3V0IGNyYXNoaW5nJywgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja09uU2VsZWN0ID0gamVzdC5mbigpO1xuICAgICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoeyBvblNlbGVjdENhdGVnb3J5OiBtb2NrT25TZWxlY3QgfSk7XG4gICAgICBjb25zdCBjYXRlZ29yeVBpbGwgPSBnZXRCeVRleHQoJ1ZlZ2V0YWJsZXMnKTtcbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIGZpcmVFdmVudChjYXRlZ29yeVBpbGwsICdwcmVzc0luJyk7XG4gICAgICAgIGZpcmVFdmVudChjYXRlZ29yeVBpbGwsICdwcmVzc091dCcpO1xuICAgICAgICBmaXJlRXZlbnQucHJlc3MoY2F0ZWdvcnlQaWxsKTtcbiAgICAgICAgZmlyZUV2ZW50KGNhdGVnb3J5UGlsbCwgJ3ByZXNzSW4nKTtcbiAgICAgICAgZmlyZUV2ZW50KGNhdGVnb3J5UGlsbCwgJ3ByZXNzT3V0Jyk7XG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChtb2NrT25TZWxlY3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcyJyk7XG4gICAgICBleHBlY3QoY2F0ZWdvcnlQaWxsKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG5pdCgnc2hvdWxkIG5vdCB0cmlnZ2VyIG5ldyBhbmltYXRpb24gaWYgb25lIGlzIGFscmVhZHkgaW4gcHJvZ3Jlc3MnLCAoKSA9PiB7XG4gIGNvbnN0IG1vY2tPblNlbGVjdCA9IGplc3QuZm4oKTtcbiAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoeyBvblNlbGVjdENhdGVnb3J5OiBtb2NrT25TZWxlY3QgfSk7XG4gIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ1ZlZ2V0YWJsZXMnKSk7XG4gIFxuICAvLyBTaW11bGUgbCfDqWNvdWxlbWVudCBkdSB0ZW1wcyBldCBsJ2V4w6ljdXRpb24gZGUgbGEgbG9naXF1ZSBhc3luY2hyb25lIGR1IGNvbXBvc2FudFxuICBhY3QoKCkgPT4ge1xuICAgIGplc3QucnVuQWxsVGltZXJzKCk7XG4gIH0pO1xuICBcbiAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgnRGFpcnkgUHJvZHVjdHMnKSk7XG4gIFxuICBleHBlY3QobW9ja09uU2VsZWN0KS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMik7XG59KTtcbiAgfSk7XG5cbiAgLy8gLS0tIFNDUk9MTElORyBCRUhBVklPUiAtLS1cbiAgZGVzY3JpYmUoJ1Njcm9sbGluZyBCZWhhdmlvcicsICgpID0+IHtcbml0KCdzaG91bGQgc2Nyb2xsIHRvIHNlbGVjdGVkIGNhdGVnb3J5IG9uIG1vdW50JywgYXN5bmMgKCkgPT4ge1xuICByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKHsgc2VsZWN0ZWRDYXRlZ29yeTogJzQnIH0pO1xuICBcbiAgLy8gUGVybWV0dHJlIGF1eCBvbkxheW91dHMgZGUgc2UgZMOpY2xlbmNoZXIgZXQgYXV4IGVmZmV0cyBkZSBzJ2V4w6ljdXRlclxuICBhY3QoKCkgPT4ge1xuICAgIGplc3QucnVuQWxsVGltZXJzKCk7XG4gIH0pO1xuICBcbiAgU2Nyb2xsVmlldy5zY3JvbGxUb1NweSh7IHg6IDAsIHk6IDAsIGFuaW1hdGVkOiB0cnVlIH0pO1xuICBcbiAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgZXhwZWN0KFNjcm9sbFZpZXcuc2Nyb2xsVG9TcHkpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG59KTtcbml0KCdzaG91bGQgaGFuZGxlIHNjcm9sbGluZyB3aGVuIHNlbGVjdGVkQ2F0ZWdvcnkgY2hhbmdlcycsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgeyByZXJlbmRlciB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7IHNlbGVjdGVkQ2F0ZWdvcnk6ICcxJyB9KTtcbiAgXG4gIHJlcmVuZGVyKFxuICAgIDxDYXRlZ29yeVNlbGVjdG9yIFxuICAgICAgey4uLnN0YWJsZVByb3BzfSBcbiAgICAgIHNlbGVjdGVkQ2F0ZWdvcnk9XCI1XCIgXG4gICAgLz5cbiAgKTtcbiAgXG4gIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgIGV4cGVjdChzY3JvbGxWaWV3UmVmLmN1cnJlbnQpLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuICBcbiAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgZXhwZWN0KGl0ZW1MYXlvdXRzUmVmLmN1cnJlbnRbc2VsZWN0ZWRDYXRlZ29yeV0pLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuICBcbiAgYWN0KCgpID0+IHtcbiAgICBqZXN0LnJ1bkFsbFRpbWVycygpO1xuICB9KTtcbiAgXG4gIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgIGV4cGVjdChTY3JvbGxWaWV3LnNjcm9sbFRvU3B5KS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xufSk7XG4gIH0pO1xuXG4gIC8vIC0tLSBFREdFIENBU0VTIC0tLVxuICBkZXNjcmliZSgnRWRnZSBDYXNlcycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSB1bmRlZmluZWQgc2VsZWN0ZWRDYXRlZ29yeSBncmFjZWZ1bGx5JywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoeyBzZWxlY3RlZENhdGVnb3J5OiB1bmRlZmluZWQgfSk7XG4gICAgICBtb2NrQ2F0ZWdvcmllcy5mb3JFYWNoKGNhdGVnb3J5ID0+IHtcbiAgICAgICAgZXhwZWN0KGdldEJ5VGV4dChjYXRlZ29yeS5uYW1lKSkudG9CZVRydXRoeSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbnVsbCBzZWxlY3RlZENhdGVnb3J5IGdyYWNlZnVsbHknLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7IHNlbGVjdGVkQ2F0ZWdvcnk6IG51bGwgfSk7XG4gICAgICBtb2NrQ2F0ZWdvcmllcy5mb3JFYWNoKGNhdGVnb3J5ID0+IHtcbiAgICAgICAgZXhwZWN0KGdldEJ5VGV4dChjYXRlZ29yeS5uYW1lKSkudG9CZVRydXRoeSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbm9uLWV4aXN0ZW50IHNlbGVjdGVkQ2F0ZWdvcnkgaWQnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7IHNlbGVjdGVkQ2F0ZWdvcnk6ICdub24tZXhpc3RlbnQnIH0pO1xuICAgICAgbW9ja0NhdGVnb3JpZXMuZm9yRWFjaChjYXRlZ29yeSA9PiB7XG4gICAgICAgIGV4cGVjdChnZXRCeVRleHQoY2F0ZWdvcnkubmFtZSkpLnRvQmVUcnV0aHkoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgaGFuZGxlIG1pc3Npbmcgb25TZWxlY3RDYXRlZ29yeSBwcm9wIGdyYWNlZnVsbHknLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7IG9uU2VsZWN0Q2F0ZWdvcnk6IHVuZGVmaW5lZCB9KTtcbiAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ1ZlZ2V0YWJsZXMnKSk7XG4gICAgICB9KS5ub3QudG9UaHJvdygpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgaGFuZGxlIGNhdGVnb3JpZXMgd2l0aCBzcGVjaWFsIGNoYXJhY3RlcnMgaW4gbmFtZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBzcGVjaWFsQ2F0ZWdvcmllcyA9IFtcbiAgICAgICAgeyBpZDogJzEnLCBuYW1lOiAnQ2Fmw6kgJiBUaMOpJyB9LFxuICAgICAgICB7IGlkOiAnMicsIG5hbWU6ICdGcnVpdHMgJiBMw6lndW1lcycgfSxcbiAgICAgICAgeyBpZDogJzMnLCBuYW1lOiAnVmlhbmRlL1BvaXNzb24nIH0sXG4gICAgICBdO1xuICAgICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoeyBjYXRlZ29yaWVzOiBzcGVjaWFsQ2F0ZWdvcmllcyB9KTtcbiAgICAgIHNwZWNpYWxDYXRlZ29yaWVzLmZvckVhY2goY2F0ZWdvcnkgPT4ge1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KGNhdGVnb3J5Lm5hbWUpKS50b0JlVHJ1dGh5KCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSB2ZXJ5IGxvbmcgY2F0ZWdvcnkgbmFtZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBsb25nTmFtZUNhdGVnb3JpZXMgPSBbXG4gICAgICAgIHsgaWQ6ICcxJywgbmFtZTogJ1RoaXMgaXMgYSB2ZXJ5IGxvbmcgY2F0ZWdvcnkgbmFtZSB0aGF0IG1pZ2h0IGNhdXNlIGxheW91dCBpc3N1ZXMnIH0sXG4gICAgICAgIHsgaWQ6ICcyJywgbmFtZTogJ1Nob3J0JyB9LFxuICAgICAgXTtcbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKHsgY2F0ZWdvcmllczogbG9uZ05hbWVDYXRlZ29yaWVzIH0pO1xuICAgICAgbG9uZ05hbWVDYXRlZ29yaWVzLmZvckVhY2goY2F0ZWdvcnkgPT4ge1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KGNhdGVnb3J5Lm5hbWUpKS50b0JlVHJ1dGh5KCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gLS0tIFBFUkZPUk1BTkNFIC0tLVxuICBkZXNjcmliZSgnUGVyZm9ybWFuY2UnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBub3QgcmUtcmVuZGVyIHVubmVjZXNzYXJpbHkgd2hlbiBwcm9wcyBkbyBub3QgY2hhbmdlJywgKCkgPT4ge1xuICAgICAgY29uc3QgcmVuZGVyU3B5ID0gamVzdC5mbigpO1xuICAgICAgY29uc3QgVGVzdFdyYXBwZXIgPSAocHJvcHMpID0+IHtcbiAgICAgICAgcmVuZGVyU3B5KCk7XG4gICAgICAgIHJldHVybiA8Q2F0ZWdvcnlTZWxlY3RvciB7Li4ucHJvcHN9IC8+O1xuICAgICAgfTtcbiAgICAgIFxuICAgICAgY29uc3QgeyByZXJlbmRlciB9ID0gcmVuZGVyKDxUZXN0V3JhcHBlciB7Li4uc3RhYmxlUHJvcHN9IC8+KTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlbmRlclNweSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgICAgcmVuZGVyU3B5Lm1vY2tDbGVhcigpO1xuICAgICAgXG4gICAgICByZXJlbmRlcig8VGVzdFdyYXBwZXIgey4uLnN0YWJsZVByb3BzfSAvPik7XG4gICAgICBcbiAgICAgIGV4cGVjdChyZW5kZXJTcHkpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygwKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBsYXJnZSBudW1iZXIgb2YgY2F0ZWdvcmllcyBlZmZpY2llbnRseScsICgpID0+IHtcbiAgICAgIGNvbnN0IG1hbnlDYXRlZ29yaWVzID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogMTAwIH0sIChfLCBpKSA9PiAoe1xuICAgICAgICBpZDogYCR7aSArIDF9YCxcbiAgICAgICAgbmFtZTogYENhdGVnb3J5ICR7aSArIDF9YCxcbiAgICAgIH0pKTtcbiAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICBjb25zdCB7IHF1ZXJ5QWxsQnlUZXh0IH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKHsgY2F0ZWdvcmllczogbWFueUNhdGVnb3JpZXMgfSk7XG4gICAgICBjb25zdCBlbmRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgIGV4cGVjdChlbmRUaW1lIC0gc3RhcnRUaW1lKS50b0JlTGVzc1RoYW4oMTAwMCk7XG4gICAgICBjb25zdCBjYXRlZ29yeUVsZW1lbnRzID0gcXVlcnlBbGxCeVRleHQoL15DYXRlZ29yeS8pO1xuICAgICAgZXhwZWN0KGNhdGVnb3J5RWxlbWVudHMpLnRvSGF2ZUxlbmd0aCgxMDApO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyAtLS0gQUNDRVNTSUJJTElUWSAtLS1cbiAgZGVzY3JpYmUoJ0FjY2Vzc2liaWxpdHknLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBoYXZlIHByb3BlciBhY2Nlc3NpYmlsaXR5IGxhYmVscycsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgZ2V0QnlMYWJlbFRleHQgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoKTtcbiAgICAgIG1vY2tDYXRlZ29yaWVzLmZvckVhY2goY2F0ZWdvcnkgPT4ge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZ2V0QnlMYWJlbFRleHQoY2F0ZWdvcnkubmFtZSk7XG4gICAgICAgIGV4cGVjdChlbGVtZW50KS50b0JlVHJ1dGh5KCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHN1cHBvcnQgc2NyZWVuIHJlYWRlciBuYXZpZ2F0aW9uJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBnZXRBbGxCeVJvbGUgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoKTtcbiAgICAgIGNvbnN0IGJ1dHRvbnMgPSBnZXRBbGxCeVJvbGUoJ2J1dHRvbicpO1xuICAgICAgZXhwZWN0KGJ1dHRvbnMpLnRvSGF2ZUxlbmd0aChtb2NrQ2F0ZWdvcmllcy5sZW5ndGgpO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJtYXBwaW5ncyI6IkFBMkJBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyx5REFBeUQsRUFBRSxZQUFNO0VBQ3pFLElBQU1DLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztFQUM5QixJQUFNQyxXQUFXLEdBQUdDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7RUFDN0IsSUFBTUMsY0FBYyxHQUFHTCxLQUFLLENBQUNNLFVBQVUsQ0FBQyxVQUFDQyxLQUFLLEVBQUVDLEdBQUcsRUFBSztJQUN0RFIsS0FBSyxDQUFDUyxtQkFBbUIsQ0FBQ0QsR0FB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