{"version":3,"names":["_getJestObj","mock","useFonts","hideAsync","jest","fn","mockResolvedValue","undefined","mockImplementation","actualNav","requireActual","Object","assign","useNavigation","navigate","mockNavigate","goBack","mockGoBack","replace","mockReplace","useRoute","params","name","MockLevelAssessment","_jsxRuntime","jsx","testID","children","onPress","recommendedLevel","MockAssessmentResults","_ref","route","_ref2","jsxs","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_native","_AppProvider","_layout","_require","renderWithProviders","component","options","arguments","length","AllTheProviders","_ref3","NavigationContainer","default","render","wrapper","waitForElement","_ref4","testId","timeout","waitFor","element","screen","getByTestId","expect","toBeTruthy","_x","apply","describe","beforeEach","clearAllMocks","it","dashboardTab","fireEvent","press","startAssessmentBtn","toHaveBeenCalledWith","assessmentStartBtn","mockRoute","props","toContain","continueBtn","consoleSpy","spyOn","console","mockImplementationOnce","Error","startBtn","toHaveBeenCalled","mockRestore","testCases","score","expectedLevel","description","forEach","_ref7","calculateLevel","calculatedLevel","toBe","levelDisplay","not","toHaveBeenNthCalledWith","startTime","performance","now","endTime","renderTime","toBeLessThan","afterAll","resetModules"],"sources":["assessment-and-placement.test.js"],"sourcesContent":["import React from 'react';\nimport { render, fireEvent, waitFor, screen } from '@testing-library/react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport AppProvider from '../../src/contexts/AppProvider';\nimport TabLayout from '../../app/(tabs)/_layout';\n\n// === MOCKS ===\n// Mock des dépendances externes\njest.mock('expo-font', () => ({\n  useFonts: () => [true],\n}));\n\njest.mock('expo-splash-screen', () => ({\n  hideAsync: jest.fn().mockResolvedValue(undefined),\n}));\n\njest.mock('../../src/hooks/useRouteActivityTracker', () => \n  jest.fn().mockImplementation(() => ({}))\n);\n\n// Mock de la navigation avec des méthodes contrôlables\nconst mockNavigate = jest.fn();\nconst mockGoBack = jest.fn();\nconst mockReplace = jest.fn();\n\njest.mock('@react-navigation/native', () => {\n  const actualNav = jest.requireActual('@react-navigation/native');\n  return {\n    ...actualNav,\n    useNavigation: () => ({\n      navigate: mockNavigate,\n      goBack: mockGoBack,\n      replace: mockReplace,\n    }),\n    useRoute: () => ({\n      params: {},\n      name: 'dashboard',\n    }),\n  };\n});\n\n// Mock des composants d'exercice pour éviter les dépendances complexes\njest.mock('../../src/components/LevelAssessment', () => {\n  return function MockLevelAssessment() {\n    return (\n      <div testID=\"level-assessment\">\n        <button\n          testID=\"start-assessment-btn\"\n          onPress={() => {\n            // Simulate assessment completion\n            mockNavigate('assessmentResults', { recommendedLevel: 'B1' });\n          }}\n        >\n          Commencer le test de niveau\n        </button>\n      </div>\n    );\n  };\n});\n\njest.mock('../../src/components/AssessmentResults', () => {\n  return function MockAssessmentResults({ route }) {\n    const { recommendedLevel } = route?.params || { recommendedLevel: 'A1' };\n    return (\n      <div testID=\"assessment-results\">\n        <text testID=\"recommended-level\">Niveau recommandé : {recommendedLevel}</text>\n        <button\n          testID=\"continue-btn\"\n          onPress={() => mockNavigate('levelSelection')}\n        >\n          Continuer\n        </button>\n      </div>\n    );\n  };\n});\n\n// === HELPERS ===\n/**\n * Render helper qui configure tous les providers nécessaires\n */\nconst renderWithProviders = (component, options = {}) => {\n  const AllTheProviders = ({ children }) => (\n    <NavigationContainer>\n      <AppProvider>\n        {children}\n      </AppProvider>\n    </NavigationContainer>\n  );\n\n  return render(component, { wrapper: AllTheProviders, ...options });\n};\n\n/**\n * Helper pour attendre qu'un élément apparaisse\n */\nconst waitForElement = async (testId, timeout = 5000) => {\n  return await waitFor(\n    () => {\n      const element = screen.getByTestId(testId);\n      expect(element).toBeTruthy();\n      return element;\n    },\n    { timeout }\n  );\n};\n\n// === TESTS ===\ndescribe('Assessment and Placement Integration Test', () => {\n  // Reset des mocks avant chaque test\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('User Assessment Flow', () => {\n    it('should successfully complete the full assessment and placement workflow', async () => {\n      // === ARRANGE ===\n      renderWithProviders(<TabLayout />);\n\n      // === ACT & ASSERT ===\n      \n      // Étape 1: Naviguer vers le test de niveau depuis le dashboard\n      const dashboardTab = await waitForElement('dashboard-tab');\n      fireEvent.press(dashboardTab);\n\n      // Attendre que le dashboard soit chargé\n      await waitFor(() => {\n        expect(screen.getByTestId('dashboard-content')).toBeTruthy();\n      });\n\n      // Cliquer sur le bouton \"Commencer le test de niveau\"\n      const startAssessmentBtn = screen.getByTestId('start-assessment-btn');\n      fireEvent.press(startAssessmentBtn);\n\n      // Étape 2: Vérifier que la navigation vers l'évaluation s'est bien passée\n      expect(mockNavigate).toHaveBeenCalledWith('levelAssessment');\n\n      // Simuler le rendu du composant d'évaluation\n      renderWithProviders(<MockLevelAssessment />);\n      \n      // Démarrer l'évaluation\n      const assessmentStartBtn = await waitForElement('start-assessment-btn');\n      fireEvent.press(assessmentStartBtn);\n\n      // Étape 3: Vérifier les résultats de l'évaluation\n      await waitFor(() => {\n        expect(mockNavigate).toHaveBeenCalledWith('assessmentResults', {\n          recommendedLevel: 'B1'\n        });\n      });\n\n      // Simuler le rendu des résultats\n      const mockRoute = { params: { recommendedLevel: 'B1' } };\n      renderWithProviders(<MockAssessmentResults route={mockRoute} />);\n\n      // Vérifier que le niveau recommandé s'affiche correctement\n      const recommendedLevel = await waitForElement('recommended-level');\n      expect(recommendedLevel.props.children).toContain('Niveau recommandé : B1');\n\n      // Étape 4: Continuer vers la sélection de niveau\n      const continueBtn = screen.getByTestId('continue-btn');\n      fireEvent.press(continueBtn);\n\n      // Vérifier la navigation vers la sélection de niveau\n      expect(mockNavigate).toHaveBeenCalledWith('levelSelection');\n    });\n\n    it('should handle assessment errors gracefully', async () => {\n      // Test de gestion d'erreur\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\n      \n      // Simuler une erreur durant l'évaluation\n      mockNavigate.mockImplementationOnce(() => {\n        throw new Error('Navigation failed');\n      });\n\n      renderWithProviders(<TabLayout />);\n\n      const startBtn = await waitForElement('start-assessment-btn');\n      fireEvent.press(startBtn);\n\n      // Vérifier que l'erreur est gérée\n      await waitFor(() => {\n        expect(consoleSpy).toHaveBeenCalled();\n      });\n\n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('Level Placement Scenarios', () => {\n    const testCases = [\n      { score: 90, expectedLevel: 'C2', description: 'high score' },\n      { score: 75, expectedLevel: 'B2', description: 'good score' },\n      { score: 50, expectedLevel: 'B1', description: 'average score' },\n      { score: 25, expectedLevel: 'A2', description: 'low score' },\n      { score: 10, expectedLevel: 'A1', description: 'very low score' },\n    ];\n\n    testCases.forEach(({ score, expectedLevel, description }) => {\n      it(`should place user at ${expectedLevel} level with ${description} (${score}%)`, async () => {\n        // Mock du calcul de niveau basé sur le score\n        const calculateLevel = (score) => {\n          if (score >= 85) return 'C2';\n          if (score >= 70) return 'B2';\n          if (score >= 55) return 'B1';\n          if (score >= 30) return 'A2';\n          return 'A1';\n        };\n\n        const calculatedLevel = calculateLevel(score);\n        expect(calculatedLevel).toBe(expectedLevel);\n\n        // Simuler le rendu avec le niveau calculé\n        const mockRoute = { params: { recommendedLevel: calculatedLevel } };\n        renderWithProviders(<MockAssessmentResults route={mockRoute} />);\n\n        const levelDisplay = await waitForElement('recommended-level');\n        expect(levelDisplay.props.children).toContain(`Niveau recommandé : ${expectedLevel}`);\n      });\n    });\n  });\n\n  describe('Navigation Integration', () => {\n    it('should maintain proper navigation state throughout the assessment flow', async () => {\n      renderWithProviders(<TabLayout />);\n\n      // Vérifier l'état initial\n      expect(mockNavigate).not.toHaveBeenCalled();\n\n      // Simuler le flow complet\n      const startBtn = await waitForElement('start-assessment-btn');\n      fireEvent.press(startBtn);\n\n      // Vérifier chaque étape de navigation\n      expect(mockNavigate).toHaveBeenNthCalledWith(1, 'levelAssessment');\n      \n      // Simuler la fin d'évaluation\n      fireEvent.press(startBtn); // Simule la fin du test\n      \n      expect(mockNavigate).toHaveBeenNthCalledWith(2, 'assessmentResults', {\n        recommendedLevel: 'B1'\n      });\n    });\n  });\n\n  describe('Performance and Accessibility', () => {\n    it('should render assessment components efficiently', async () => {\n      const startTime = performance.now();\n      \n      renderWithProviders(<TabLayout />);\n      \n      await waitForElement('start-assessment-btn');\n      \n      const endTime = performance.now();\n      const renderTime = endTime - startTime;\n      \n      // Le rendu devrait prendre moins d'une seconde\n      expect(renderTime).toBeLessThan(1000);\n    });\n\n    it('should have proper accessibility labels', async () => {\n      renderWithProviders(<MockLevelAssessment />);\n      \n      const startBtn = await waitForElement('start-assessment-btn');\n      \n      // Vérifier que le bouton est accessible\n      expect(startBtn).toBeTruthy();\n      expect(startBtn.props.testID).toBe('start-assessment-btn');\n    });\n  });\n});\n\n// === SETUP ET TEARDOWN ===\nafterAll(() => {\n  jest.clearAllMocks();\n  jest.resetModules();\n});"],"mappings":"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","ignoreList":[]}