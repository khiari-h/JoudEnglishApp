{"version":3,"names":["ProgressCard","calculateTotalExercises","calculateCompletedExercisesCount","calculateTotalProgress","calculateCategoryProgress","useMemo","jsx","_jsx","cov_1nt6uub4jl","s","ErrorCorrectionProgress","_ref","_ref$categories","categories","b","_ref$exercises","exercises","_ref$completedExercis","completedExercises","levelColor","_ref$expanded","expanded","onToggleExpand","onCategoryPress","f","validCategories","Array","isArray","length","categoriesFromExercises","reduce","cats","ex","categoryId","category","find","c","id","push","name","categoryName","filter","e","validExercises","exs","cat","concat","_toConsumableArray","statsData","totalExercisesCount","completedExercisesCount","totalProgress","categoryProgressData","formattedCategoryData","map","title","completed","total","totalExercises","progress","unit","expandable","categoryData"],"sources":["index.js"],"sourcesContent":["// ErrorCorrectionProgress/index.js - VERSION CORRIGÃ‰E AVEC useMemo\r\n\r\nimport ProgressCard from \"../../../../components/ui/ProgressCard\";\r\nimport {\r\n  calculateTotalExercises,\r\n  calculateCompletedExercisesCount,\r\n  calculateTotalProgress,\r\n  calculateCategoryProgress,\r\n} from \"../../../../utils/errorCorrection/errorCorrectionStats\";\r\nimport { useMemo } from 'react';\r\n\r\n/**\r\n * ðŸ“Š ErrorCorrectionProgress - Version corrigÃ©e avec mÃ©morisation\r\n * âœ… Ã‰vite les boucles infinies avec useMemo\r\n * âœ… DÃ©tecte automatiquement la structure des donnÃ©es\r\n */\r\nconst ErrorCorrectionProgress = ({\r\n  categories = [],\r\n  exercises = [],\r\n  completedExercises = {},\r\n  levelColor,\r\n  expanded = false,\r\n  onToggleExpand,\r\n  onCategoryPress,\r\n}) => {\r\n  \r\n  // âœ… MÃ‰MORISER la validation des catÃ©gories\r\n  const validCategories = useMemo(() => {\r\n    if (Array.isArray(categories) && categories.length > 0) {\r\n      return categories;\r\n    }\r\n    // Fallback si pas de catÃ©gories mais qu'on a des exercices\r\n    if (Array.isArray(exercises) && exercises.length > 0) {\r\n      // CrÃ©er des catÃ©gories virtuelles basÃ©es sur les exercices\r\n      const categoriesFromExercises = exercises.reduce((cats, ex) => {\r\n        const categoryId = ex.categoryId || ex.category || 'general';\r\n        if (!cats.find(c => c.id === categoryId)) {\r\n          cats.push({\r\n            id: categoryId,\r\n            name: ex.categoryName || `CatÃ©gorie ${categoryId}`,\r\n            exercises: exercises.filter(e => (e.categoryId || e.category || 'general') === categoryId)\r\n          });\r\n        }\r\n        return cats;\r\n      }, []);\r\n      return categoriesFromExercises;\r\n    }\r\n    return [];\r\n  }, [categories, exercises]);\r\n\r\n  // âœ… MÃ‰MORISER la validation des exercices\r\n  const validExercises = useMemo(() => {\r\n    if (Array.isArray(exercises) && exercises.length > 0) {\r\n      return exercises;\r\n    }\r\n    // Si pas d'exercices directement, extraire des catÃ©gories\r\n    if (Array.isArray(categories) && categories.length > 0) {\r\n      return categories.reduce((exs, cat) => {\r\n        if (cat.exercises && Array.isArray(cat.exercises)) {\r\n          return [...exs, ...cat.exercises];\r\n        }\r\n        return exs;\r\n      }, []);\r\n    }\r\n    return [];\r\n  }, [categories, exercises]);\r\n  \r\n  // âœ… MÃ‰MORISER tous les calculs\r\n  const statsData = useMemo(() => {\r\n    const totalExercisesCount = calculateTotalExercises(validCategories, validExercises);\r\n    const completedExercisesCount = calculateCompletedExercisesCount(completedExercises);\r\n    const totalProgress = calculateTotalProgress(validCategories, validExercises, completedExercises);\r\n    const categoryProgressData = calculateCategoryProgress(validCategories, validExercises, completedExercises);\r\n\r\n    return {\r\n      totalExercisesCount,\r\n      completedExercisesCount,\r\n      totalProgress,\r\n      categoryProgressData\r\n    };\r\n  }, [validCategories, validExercises, completedExercises]);\r\n\r\n  // âœ… MÃ‰MORISER la transformation des donnÃ©es\r\n  const formattedCategoryData = useMemo(() => {\r\n    return statsData.categoryProgressData.map((category) => ({\r\n      title: category.title,\r\n      completed: category.completedExercises,\r\n      total: category.totalExercises,\r\n      progress: category.progress,\r\n    }));\r\n  }, [statsData.categoryProgressData]);\r\n\r\n  // âœ… CORRECTION FINALE : Pas de log dans le render !\r\n\r\n  return (\r\n    <ProgressCard\r\n      title=\"Progression\"\r\n      progress={statsData.totalProgress}\r\n      completed={statsData.completedExercisesCount}\r\n      total={statsData.totalExercisesCount}\r\n      unit=\"exercices\"\r\n      levelColor={levelColor}\r\n      expandable\r\n      expanded={expanded}\r\n      onToggleExpand={onToggleExpand}\r\n      categoryData={formattedCategoryData}\r\n      onCategoryPress={onCategoryPress}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorCorrectionProgress;"],"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","ignoreList":[]}