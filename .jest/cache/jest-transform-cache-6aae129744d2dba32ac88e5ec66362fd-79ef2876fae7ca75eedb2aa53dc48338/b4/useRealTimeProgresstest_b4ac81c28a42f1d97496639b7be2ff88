5cc0cd1e4703a083bce41114302a8d35
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn()
  };
});
_getJestObj().mock('../../src/utils/vocabulary/vocabularyDataHelper', function () {
  return {
    getVocabularyData: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useRealTimeProgress = _interopRequireDefault(require("../../src/hooks/useRealTimeProgress"));
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useRealTimeProgress', function () {
  var mockVocabularyData = {
    exercises: [{
      words: [{
        word: 'hello'
      }, {
        word: 'world'
      }]
    }, {
      words: [{
        word: 'test'
      }]
    }]
  };
  beforeEach(function () {
    jest.clearAllMocks();
    var _require = require('../../src/utils/vocabulary/vocabularyDataHelper'),
      getVocabularyData = _require.getVocabularyData;
    getVocabularyData.mockReturnValue(mockVocabularyData);
  });
  it('devrait initialiser avec les bonnes valeurs', function () {
    _asyncStorage.default.getItem.mockResolvedValue(null);
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useRealTimeProgress.default)();
      }),
      result = _renderHook.result;
    expect(result.current.isLoading).toBe(true);
    expect(result.current.levelProgress).toBeDefined();
    expect(result.current.exerciseProgress).toBeDefined();
  });
  it('devrait calculer la progression vocabulaire', (0, _asyncToGenerator2.default)(function* () {
    var mockStorageData = {
      completedWords: {
        '0': ['word1', 'word2'],
        '1': ['word3']
      }
    };
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      if (key === 'vocabulary_1_classic') {
        return Promise.resolve(JSON.stringify(mockStorageData));
      }
      return Promise.resolve(null);
    });
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useRealTimeProgress.default)();
      }),
      result = _renderHook2.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
      expect(result.current.getExerciseProgress('vocabulary', '1')).toBeGreaterThan(0);
    });
  }));
  it('devrait avoir toutes les fonctions utilitaires', function () {
    _asyncStorage.default.getItem.mockResolvedValue(null);
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useRealTimeProgress.default)();
      }),
      result = _renderHook3.result;
    expect(typeof result.current.getLevelProgress).toBe('function');
    expect(typeof result.current.getExerciseProgress).toBe('function');
    expect(typeof result.current.hasProgress).toBe('function');
    expect(typeof result.current.hasVocabularyStarted).toBe('function');
    expect(typeof result.current.hasVocabularyFastStarted).toBe('function');
    expect(typeof result.current.refresh).toBe('function');
  });
  it('devrait permettre de refresh', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValue(null);
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useRealTimeProgress.default)();
      }),
      result = _renderHook4.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      result.current.refresh();
    }));
    expect(typeof result.current.refresh).toBe('function');
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,