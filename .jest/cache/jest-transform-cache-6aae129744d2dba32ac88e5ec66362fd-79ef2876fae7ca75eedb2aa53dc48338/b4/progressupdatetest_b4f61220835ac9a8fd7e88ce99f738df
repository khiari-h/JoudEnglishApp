1ea1634c87711377901a337329a8b4f0
_getJestObj().mock('expo-router', function () {
  return Object.assign({}, jest.requireActual('expo-router'), {
    router: {
      push: jest.fn()
    },
    useFocusEffect: jest.fn(function (callback) {
      return callback();
    })
  });
});
_getJestObj().mock('../../src/hooks/useLastActivity', function () {
  return function () {
    return {
      lastActivity: null,
      isLoading: false,
      reload: jest.fn()
    };
  };
});
_getJestObj().mock('../../src/contexts/ProgressContext', function () {
  var originalModule = jest.requireActual('../../src/contexts/ProgressContext');
  return Object.assign({}, originalModule, {
    useProgress: function useProgress() {
      return Object.assign({}, originalModule.useProgress(), {
        progress: {
          overall: 0,
          levels: {}
        },
        isLoading: false,
        updateProgress: mockUpdateProgress,
        getProgressForLevel: function getProgressForLevel() {
          return 0;
        }
      });
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _expoRouter = require("expo-router");
var _Dashboard = _interopRequireDefault(require("../../src/screens/Dashboard"));
var _ProgressContext = require("../../src/contexts/ProgressContext");
var _ThemeContext = require("../../src/contexts/ThemeContext");
var _CurrentLevelContext = require("../../src/contexts/CurrentLevelContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockUpdateProgress = jest.fn();
var renderDashboard = function renderDashboard() {
  return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
    children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(_CurrentLevelContext.CurrentLevelProvider, {
        children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
      })
    })
  }));
};
describe('Scénario 1: Mise à jour de la progression', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockUpdateProgress.mockClear();
  });
  it('devrait mettre à jour la progression après avoir terminé un exercice', (0, _asyncToGenerator2.default)(function* () {
    var _renderDashboard = renderDashboard(),
      getByTestId = _renderDashboard.getByTestId,
      findByText = _renderDashboard.findByText;
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByTestId('level-selection-button')).toBeTruthy();
    });
    var startButton = getByTestId('level-selection-button');
    _reactNative.fireEvent.press(startButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_expoRouter.router.push).toHaveBeenCalledWith('/tabs/levelSelection');
    });
    var level = 'A1';
    var exerciseType = 'vocabulary';
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      var score = 80;
      mockUpdateProgress(level, exerciseType, score);
    }));
    expect(mockUpdateProgress).toHaveBeenCalledWith(level, exerciseType, 80);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsInJvdXRlciIsInB1c2giLCJmbiIsInVzZUZvY3VzRWZmZWN0IiwiY2FsbGJhY2siLCJsYXN0QWN0aXZpdHkiLCJpc0xvYWRpbmciLCJyZWxvYWQiLCJvcmlnaW5hbE1vZHVsZSIsInVzZVByb2dyZXNzIiwicHJvZ3Jlc3MiLCJvdmVyYWxsIiwibGV2ZWxzIiwidXBkYXRlUHJvZ3Jlc3MiLCJtb2NrVXBkYXRlUHJvZ3Jlc3MiLCJnZXRQcm9ncmVzc0ZvckxldmVsIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfZXhwb1JvdXRlciIsIl9EYXNoYm9hcmQiLCJfUHJvZ3Jlc3NDb250ZXh0IiwiX1RoZW1lQ29udGV4dCIsIl9DdXJyZW50TGV2ZWxDb250ZXh0IiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsInJlbmRlckRhc2hib2FyZCIsInJlbmRlciIsImpzeCIsIlRoZW1lUHJvdmlkZXIiLCJjaGlsZHJlbiIsIlByb2dyZXNzUHJvdmlkZXIiLCJDdXJyZW50TGV2ZWxQcm92aWRlciIsImRlZmF1bHQiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwibW9ja0NsZWFyIiwiaXQiLCJfcmVuZGVyRGFzaGJvYXJkIiwiZ2V0QnlUZXN0SWQiLCJmaW5kQnlUZXh0Iiwid2FpdEZvciIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJzdGFydEJ1dHRvbiIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJsZXZlbCIsImV4ZXJjaXNlVHlwZSIsImFjdCIsInNjb3JlIl0sInNvdXJjZXMiOlsicHJvZ3Jlc3MtdXBkYXRlLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gX190ZXN0c19fL2ludGVncmF0aW9uL3Byb2dyZXNzLXVwZGF0ZS50ZXN0LmpzXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQsIHdhaXRGb3IsIGFjdCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IHJvdXRlciB9IGZyb20gJ2V4cG8tcm91dGVyJztcbmltcG9ydCBEYXNoYm9hcmQgZnJvbSAnLi4vLi4vc3JjL3NjcmVlbnMvRGFzaGJvYXJkJztcbmltcG9ydCB7IFByb2dyZXNzUHJvdmlkZXIsIHVzZVByb2dyZXNzIH0gZnJvbSAnLi4vLi4vc3JjL2NvbnRleHRzL1Byb2dyZXNzQ29udGV4dCc7XG5pbXBvcnQgeyBUaGVtZVByb3ZpZGVyIH0gZnJvbSAnLi4vLi4vc3JjL2NvbnRleHRzL1RoZW1lQ29udGV4dCc7XG5pbXBvcnQgeyBDdXJyZW50TGV2ZWxQcm92aWRlciB9IGZyb20gJy4uLy4uL3NyYy9jb250ZXh0cy9DdXJyZW50TGV2ZWxDb250ZXh0JztcblxuLy8gTW9jayBkZSBleHBvLXJvdXRlclxuamVzdC5tb2NrKCdleHBvLXJvdXRlcicsICgpID0+ICh7XG4gIC4uLmplc3QucmVxdWlyZUFjdHVhbCgnZXhwby1yb3V0ZXInKSxcbiAgcm91dGVyOiB7XG4gICAgcHVzaDogamVzdC5mbigpLFxuICB9LFxuICB1c2VGb2N1c0VmZmVjdDogamVzdC5mbihjYWxsYmFjayA9PiBjYWxsYmFjaygpKSxcbn0pKTtcblxuLy8gTW9jayBkZXMgaG9va3Ncbmplc3QubW9jaygnLi4vLi4vc3JjL2hvb2tzL3VzZUxhc3RBY3Rpdml0eScsICgpID0+ICgpID0+ICh7XG4gIGxhc3RBY3Rpdml0eTogbnVsbCxcbiAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgcmVsb2FkOiBqZXN0LmZuKCksXG59KSk7XG5cbi8vIE1vY2sgcGFydGllbCBkdSBQcm9ncmVzc0NvbnRleHQgcG91ciBlc3Bpb25uZXIgdXBkYXRlUHJvZ3Jlc3NcbmNvbnN0IG1vY2tVcGRhdGVQcm9ncmVzcyA9IGplc3QuZm4oKTtcblxuamVzdC5tb2NrKCcuLi8uLi9zcmMvY29udGV4dHMvUHJvZ3Jlc3NDb250ZXh0JywgKCkgPT4ge1xuICBjb25zdCBvcmlnaW5hbE1vZHVsZSA9IGplc3QucmVxdWlyZUFjdHVhbCgnLi4vLi4vc3JjL2NvbnRleHRzL1Byb2dyZXNzQ29udGV4dCcpO1xuICByZXR1cm4ge1xuICAgIC4uLm9yaWdpbmFsTW9kdWxlLFxuICAgIHVzZVByb2dyZXNzOiAoKSA9PiAoe1xuICAgICAgLi4ub3JpZ2luYWxNb2R1bGUudXNlUHJvZ3Jlc3MoKSxcbiAgICAgIHByb2dyZXNzOiB7IG92ZXJhbGw6IDAsIGxldmVsczoge30gfSxcbiAgICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgICB1cGRhdGVQcm9ncmVzczogbW9ja1VwZGF0ZVByb2dyZXNzLFxuICAgICAgZ2V0UHJvZ3Jlc3NGb3JMZXZlbDogKCkgPT4gMCxcbiAgICB9KSxcbiAgfTtcbn0pO1xuXG5cbmNvbnN0IHJlbmRlckRhc2hib2FyZCA9ICgpID0+IHtcbiAgcmV0dXJuIHJlbmRlcihcbiAgICA8VGhlbWVQcm92aWRlcj5cbiAgICAgICAgPFByb2dyZXNzUHJvdmlkZXI+XG4gICAgICAgICAgICA8Q3VycmVudExldmVsUHJvdmlkZXI+XG4gICAgICAgICAgICAgICAgPERhc2hib2FyZCAvPlxuICAgICAgICAgICAgPC9DdXJyZW50TGV2ZWxQcm92aWRlcj5cbiAgICAgICAgPC9Qcm9ncmVzc1Byb3ZpZGVyPlxuICAgIDwvVGhlbWVQcm92aWRlcj5cbiAgKTtcbn07XG5cbmRlc2NyaWJlKCdTY8OpbmFyaW8gMTogTWlzZSDDoCBqb3VyIGRlIGxhIHByb2dyZXNzaW9uJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICAvLyBSZXNldCBwcm9ncmVzcyBiZWZvcmUgZWFjaCB0ZXN0XG4gICAgbW9ja1VwZGF0ZVByb2dyZXNzLm1vY2tDbGVhcigpO1xuICB9KTtcblxuICBpdCgnZGV2cmFpdCBtZXR0cmUgw6Agam91ciBsYSBwcm9ncmVzc2lvbiBhcHLDqHMgYXZvaXIgdGVybWluw6kgdW4gZXhlcmNpY2UnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCwgZmluZEJ5VGV4dCB9ID0gcmVuZGVyRGFzaGJvYXJkKCk7XG5cbiAgICAvLyAxLiBEw6ltYXJyZXIgc3VyIGxlIERhc2hib2FyZCBldCBhbGxlciDDoCBsYSBzw6lsZWN0aW9uIGRlIG5pdmVhdVxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4gZXhwZWN0KGdldEJ5VGVzdElkKCdsZXZlbC1zZWxlY3Rpb24tYnV0dG9uJykpLnRvQmVUcnV0aHkoKSk7XG4gICAgY29uc3Qgc3RhcnRCdXR0b24gPSBnZXRCeVRlc3RJZCgnbGV2ZWwtc2VsZWN0aW9uLWJ1dHRvbicpO1xuICAgIGZpcmVFdmVudC5wcmVzcyhzdGFydEJ1dHRvbik7XG5cbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KHJvdXRlci5wdXNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnL3RhYnMvbGV2ZWxTZWxlY3Rpb24nKTtcbiAgICB9KTtcblxuICAgIC8vIDIuIFNpbXVsZXIgbGEgc8OpbGVjdGlvbiBkJ3VuIG5pdmVhdSBldCBkJ3VuIGV4ZXJjaWNlXG4gICAgLy8gKENlcyDDqWNyYW5zIG5lIHNvbnQgcGFzIHJlbmR1cywgb24gc2ltdWxlIGxhIG5hdmlnYXRpb24gZXQgc2VzIGNvbnPDqXF1ZW5jZXMpXG4gICAgY29uc3QgbGV2ZWwgPSAnQTEnO1xuICAgIGNvbnN0IGV4ZXJjaXNlVHlwZSA9ICd2b2NhYnVsYXJ5JztcblxuICAgIC8vIDMuIFNpbXVsZXIgbGEgZmluIGRlIGwnZXhlcmNpY2UgZXQgbCdhcHBlbCDDoCB1cGRhdGVQcm9ncmVzc1xuICAgIC8vIEMnZXN0IGxlIGPFk3VyIGRlIGwnaW50w6lncmF0aW9uIDogb24gc2ltdWxlIHF1ZSBsJ8OpY3JhbiBkJ2V4ZXJjaWNlXG4gICAgLy8gYSBmaW5pIHNvbiB0cmF2YWlsIGV0IGEgYXBwZWzDqSBsYSBmb25jdGlvbiBkZSBtaXNlIMOgIGpvdXIgZHUgY29udGV4dGUuXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIC8vIFNpbXVsZSBsZSBzY29yZSBvYnRlbnUgw6AgbGEgZmluIGRlIGwnZXhlcmNpY2VcbiAgICAgIGNvbnN0IHNjb3JlID0gODA7IC8vIDgwJVxuICAgICAgLy8gQXBwZWxsZSBsYSBmb25jdGlvbiBtb2Nrw6llIGF2ZWMgbGVzIHBhcmFtw6h0cmVzIGF0dGVuZHVzXG4gICAgICBtb2NrVXBkYXRlUHJvZ3Jlc3MobGV2ZWwsIGV4ZXJjaXNlVHlwZSwgc2NvcmUpO1xuICAgIH0pO1xuXG4gICAgLy8gNC4gVsOpcmlmaWVyIHF1ZSBsYSBmb25jdGlvbiBkZSBtaXNlIMOgIGpvdXIgYSDDqXTDqSBhcHBlbMOpZVxuICAgIGV4cGVjdChtb2NrVXBkYXRlUHJvZ3Jlc3MpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGxldmVsLCBleGVyY2lzZVR5cGUsIDgwKTtcblxuICAgIC8vIE5PVEU6IFBvdXIgdW5lIHbDqXJpZmljYXRpb24gY29tcGzDqHRlLCBpbCBmYXVkcmFpdCBxdWUgbGUgbW9jayBkZSB1c2VQcm9ncmVzc1xuICAgIC8vIG1ldHRlIMOgIGpvdXIgc29uIMOpdGF0IGludGVybmUgcG91ciBxdWUgbGUgRGFzaGJvYXJkIHJlLXJlbmRlIGF2ZWMgbGEgbm91dmVsbGVcbiAgICAvLyBwcm9ncmVzc2lvbi4gQydlc3QgdW5lIMOpdGFwZSBkZSBjb21wbGV4aXTDqSBzdXBwbMOpbWVudGFpcmUuXG4gICAgLy8gUG91ciBsJ2luc3RhbnQsIG9uIHZhbGlkZSBxdWUgbGUgbcOpY2FuaXNtZSBkZSBtaXNlIMOgIGpvdXIgZXN0IGJpZW4gYXBwZWzDqS5cbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiJBQVVBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxhQUFhLEVBQUU7RUFBQSxPQUFBQyxNQUFBLENB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