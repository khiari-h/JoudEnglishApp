0573c6b7e9551b9aa17e7fde1229e70d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _arrayUtils = require("../utils/arrayUtils");
var REVISION_CONFIG = {
  TRIGGER_INTERVAL: 50,
  QUESTIONS_COUNT: 10,
  STORAGE_KEY: 'revision_manager_data'
};
var useRevisionManager = function useRevisionManager() {
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    totalWordsLearned = _useState2[0],
    setTotalWordsLearned = _useState2[1];
  var _useState3 = (0, _react.useState)(50),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    nextRevisionAt = _useState4[0],
    setNextRevisionAt = _useState4[1];
  var _useState5 = (0, _react.useState)([]),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    lastRevisionWords = _useState6[0],
    setLastRevisionWords = _useState6[1];
  var _useState7 = (0, _react.useState)([]),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    revisionHistory = _useState8[0],
    setRevisionHistory = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    isRevisionDisabled = _useState0[0],
    setIsRevisionDisabled = _useState0[1];
  var _useState1 = (0, _react.useState)(true),
    _useState10 = (0, _slicedToArray2.default)(_useState1, 2),
    isLoading = _useState10[0],
    setIsLoading = _useState10[1];
  var lastCalculationRef = (0, _react.useRef)(0);
  var loadRevisionData = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* () {
      try {
        var stored = yield _asyncStorage.default.getItem(REVISION_CONFIG.STORAGE_KEY);
        if (stored) {
          var data = JSON.parse(stored);
          setNextRevisionAt(data.nextRevisionAt || 50);
          setLastRevisionWords(data.lastRevisionWords || []);
          setRevisionHistory(data.revisionHistory || []);
          setIsRevisionDisabled(data.isRevisionDisabled || false);
        }
      } catch (error) {
        console.warn('Erreur chargement données révision:', error);
      } finally {
        setIsLoading(false);
      }
    });
    return function loadRevisionData() {
      return _ref.apply(this, arguments);
    };
  }();
  (0, _react.useEffect)(function () {
    loadRevisionData();
  }, []);
  var saveRevisionData = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    if (isLoading) return;
    try {
      var data = {
        nextRevisionAt: nextRevisionAt,
        lastRevisionWords: lastRevisionWords,
        revisionHistory: revisionHistory,
        isRevisionDisabled: isRevisionDisabled,
        lastUpdate: Date.now()
      };
      yield _asyncStorage.default.setItem(REVISION_CONFIG.STORAGE_KEY, JSON.stringify(data));
    } catch (error) {
      console.warn('Erreur sauvegarde données révision:', error);
    }
  }), [nextRevisionAt, lastRevisionWords, revisionHistory, isRevisionDisabled, isLoading]);
  (0, _react.useEffect)(function () {
    saveRevisionData();
  }, [saveRevisionData]);
  var calculateTotalWords = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    var now = Date.now();
    if (now - lastCalculationRef.current < 2000) return;
    lastCalculationRef.current = now;
    try {
      var total = 0;
      var levels = ['1', '2', '3', '4', '5', '6', 'bonus'];
      var modes = ['classic', 'fast'];
      for (var level of levels) {
        for (var mode of modes) {
          var stored = yield _asyncStorage.default.getItem(`vocabulary_${level}_${mode}`);
          if (stored) {
            var data = JSON.parse(stored);
            var completedWords = data.completedWords || {};
            total += Object.values(completedWords).reduce(function (acc, words) {
              if (Array.isArray(words)) {
                return acc + words.length;
              }
              return acc;
            }, 0);
          }
        }
      }
      setTotalWordsLearned(total);
    } catch (error) {
      console.warn('Erreur calcul mots appris:', error);
    }
  }), []);
  var getAllLearnedWords = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      var allWords = [];
      var levels = ['1', '2', '3', '4', '5', '6', 'bonus'];
      var modes = ['classic', 'fast'];
      var _loop = function* _loop(level) {
        var _loop2 = function* _loop2(mode) {
          var stored = yield _asyncStorage.default.getItem(`vocabulary_${level}_${mode}`);
          if (stored) {
            var data = JSON.parse(stored);
            var completedWords = data.completedWords || {};
            Object.entries(completedWords).forEach(function (_ref5) {
              var _ref6 = (0, _slicedToArray2.default)(_ref5, 2),
                categoryIndex = _ref6[0],
                words = _ref6[1];
              if (Array.isArray(words)) {
                words.forEach(function (word) {
                  if (typeof word === 'object' && word.word) {
                    allWords.push(Object.assign({}, word, {
                      fromLevel: level,
                      fromMode: mode,
                      categoryIndex: parseInt(categoryIndex)
                    }));
                  } else if (typeof word === 'string') {
                    allWords.push({
                      word: word,
                      translation: '?',
                      fromLevel: level,
                      fromMode: mode,
                      categoryIndex: parseInt(categoryIndex),
                      timestamp: null
                    });
                  }
                });
              }
            });
          }
        };
        for (var mode of modes) {
          yield* _loop2(mode);
        }
      };
      for (var level of levels) {
        yield* _loop(level);
      }
      return allWords;
    } catch (error) {
      console.warn('Erreur récupération mots appris:', error);
      return [];
    }
  }), []);
  var selectRevisionWords = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : REVISION_CONFIG.QUESTIONS_COUNT;
    var allWords = yield getAllLearnedWords();
    if (allWords.length === 0) return [];
    if (allWords.length <= count) return allWords;
    var lastWords = new Set(lastRevisionWords.map(function (w) {
      return w.word;
    }));
    var availableWords = allWords.filter(function (word) {
      return !lastWords.has(word.word);
    });
    var poolWords = availableWords.length >= count ? availableWords : allWords;
    var sortedByAge = poolWords.toSorted(function (a, b) {
      var aTime = a.timestamp ? new Date(a.timestamp).getTime() : 0;
      var bTime = b.timestamp ? new Date(b.timestamp).getTime() : 0;
      return aTime - bTime;
    });
    var oldCount = Math.floor(count * 0.6);
    var randomCount = count - oldCount;
    var oldWords = sortedByAge.slice(0, oldCount);
    var remainingWords = sortedByAge.slice(oldCount);
    var randomWords = (0, _arrayUtils.shuffleArray)(remainingWords).slice(0, randomCount);
    var selectedWords = (0, _arrayUtils.shuffleArray)([].concat((0, _toConsumableArray2.default)(oldWords), (0, _toConsumableArray2.default)(randomWords)));
    return selectedWords.slice(0, count);
  }), [lastRevisionWords, getAllLearnedWords]);
  var shouldShowRevision = !isRevisionDisabled && totalWordsLearned >= nextRevisionAt && totalWordsLearned > 0;
  var handleRevisionChoice = (0, _react.useCallback)(function () {
    var _ref8 = (0, _asyncToGenerator2.default)(function* (choice) {
      switch (choice) {
        case 'now':
          return {
            action: 'navigate',
            words: yield selectRevisionWords(),
            questionsCount: REVISION_CONFIG.QUESTIONS_COUNT
          };
        case 'later_50':
          {
            var newTarget50 = totalWordsLearned + 50;
            setNextRevisionAt(newTarget50);
            return {
              action: 'postponed',
              nextAt: newTarget50
            };
          }
        case 'later_100':
          {
            var newTarget100 = totalWordsLearned + 100;
            setNextRevisionAt(newTarget100);
            return {
              action: 'postponed',
              nextAt: newTarget100
            };
          }
        case 'disable':
          setIsRevisionDisabled(true);
          return {
            action: 'disabled'
          };
        default:
          return {
            action: 'cancelled'
          };
      }
    });
    return function (_x) {
      return _ref8.apply(this, arguments);
    };
  }(), [totalWordsLearned, selectRevisionWords]);
  var markRevisionCompleted = (0, _react.useCallback)(function (completedWords, score, questionsCount) {
    try {
      var revisionRecord = {
        timestamp: Date.now(),
        wordsCount: completedWords.length,
        score: score,
        questionsCount: questionsCount,
        percentage: Math.round(score / questionsCount * 100),
        totalWordsAtTime: totalWordsLearned
      };
      setRevisionHistory(function (prev) {
        return [].concat((0, _toConsumableArray2.default)(prev), [revisionRecord]);
      });
      setLastRevisionWords(completedWords);
      var nextTarget = totalWordsLearned + REVISION_CONFIG.TRIGGER_INTERVAL;
      setNextRevisionAt(nextTarget);
    } catch (error) {
      console.warn('Erreur enregistrement révision:', error);
    }
  }, [totalWordsLearned]);
  var enableRevisions = (0, _react.useCallback)(function () {
    setIsRevisionDisabled(false);
    var nextTarget = totalWordsLearned + REVISION_CONFIG.TRIGGER_INTERVAL;
    setNextRevisionAt(nextTarget);
  }, [totalWordsLearned]);
  (0, _react.useEffect)(function () {
    calculateTotalWords();
    var interval = setInterval(calculateTotalWords, 10000);
    return function () {
      return clearInterval(interval);
    };
  }, [calculateTotalWords]);
  var getRevisionStats = (0, _react.useCallback)(function () {
    if (revisionHistory.length === 0) {
      return {
        totalRevisions: 0,
        averageScore: 0,
        lastRevision: null,
        streak: 0
      };
    }
    var totalRevisions = revisionHistory.length;
    var averageScore = revisionHistory.reduce(function (sum, r) {
      return sum + r.percentage;
    }, 0) / totalRevisions;
    var lastRevision = revisionHistory[revisionHistory.length - 1];
    var streak = 0;
    for (var i = revisionHistory.length - 1; i >= 0; i--) {
      if (revisionHistory[i].percentage >= 70) {
        streak++;
      } else {
        break;
      }
    }
    return {
      totalRevisions: totalRevisions,
      averageScore: Math.round(averageScore),
      lastRevision: lastRevision,
      streak: streak
    };
  }, [revisionHistory]);
  return {
    totalWordsLearned: totalWordsLearned,
    nextRevisionAt: nextRevisionAt,
    shouldShowRevision: shouldShowRevision,
    isRevisionDisabled: isRevisionDisabled,
    isLoading: isLoading,
    handleRevisionChoice: handleRevisionChoice,
    markRevisionCompleted: markRevisionCompleted,
    enableRevisions: enableRevisions,
    calculateTotalWords: calculateTotalWords,
    selectRevisionWords: selectRevisionWords,
    getRevisionStats: getRevisionStats,
    config: REVISION_CONFIG
  };
};
var _default = exports.default = useRevisionManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,