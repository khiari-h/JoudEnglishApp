5bf601afcbd0ac8bcda6769a9df6aac0
var createMockComponent = function createMockComponent(name) {
  return function (props) {
    return (0, _jsxRuntime.jsx)(_reactNative2.View, Object.assign({
      testID: name
    }, props, {
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: name
      })
    }));
  };
};
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
_getJestObj().mock('../../../../src/screens/exercises/conversations/hooks/useConversation');
_getJestObj().mock('../../../../src/hooks/useLastActivity', function () {
  return {
    __esModule: true,
    default: jest.fn(function () {
      return {
        saveActivity: jest.fn()
      };
    })
  };
});
_getJestObj().mock('../../../../src/utils/conversation/conversationDataHelper', function () {
  return {
    getConversationData: jest.fn(),
    getLevelColor: jest.fn(function () {
      return '#0000FF';
    })
  };
});
_getJestObj().mock('../../../../src/screens/exercises/conversations/ConversationHeader', function () {
  return createMockComponent('ConversationHeader');
});
_getJestObj().mock('../../../../src/screens/exercises/conversations/ConversationSelector', function () {
  return createMockComponent('ConversationSelector');
});
_getJestObj().mock('../../../../src/screens/exercises/conversations/ConversationProgress', function () {
  return createMockComponent('ConversationProgress');
});
_getJestObj().mock('../../../../src/screens/exercises/conversations/ConversationScenarioDescription', function () {
  return createMockComponent('ConversationScenarioDescription');
});
_getJestObj().mock('../../../../src/screens/exercises/conversations/ConversationMessageList', function () {
  return createMockComponent('ConversationMessageList');
});
_getJestObj().mock('../../../../src/screens/exercises/conversations/ConversationSuggestions', function () {
  return createMockComponent('ConversationSuggestions');
});
_getJestObj().mock('../../../../src/screens/exercises/conversations/ConversationInput', function () {
  return createMockComponent('ConversationInput');
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _conversations = _interopRequireDefault(require("../../../../src/screens/exercises/conversations"));
var _useConversation = _interopRequireDefault(require("../../../../src/screens/exercises/conversations/hooks/useConversation"));
var _useLastActivity2 = _interopRequireDefault(require("../../../../src/hooks/useLastActivity"));
var _expoRouter = require("expo-router");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ConversationExercise', function () {
  var mockRoute = {
    params: {
      level: 'A1'
    }
  };
  var mockSaveActivity;
  var createMockConversationState = function createMockConversationState() {
    var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return Object.assign({
      loaded: true,
      hasValidData: true,
      currentScenario: {
        title: 'Scenario de Test',
        description: 'Description du scenario.'
      },
      conversation: [{
        sender: 'bot',
        text: 'Hello!'
      }],
      suggestions: ['Hi', 'Hello there'],
      message: '',
      isTyping: false,
      stats: {
        completionProgress: 50,
        currentStep: 1,
        totalSteps: 2
      },
      isConversationStarted: true,
      changeScenario: jest.fn(),
      sendMessage: jest.fn(),
      useSuggestion: jest.fn(),
      toggleHelp: jest.fn(),
      toggleDetailedProgress: jest.fn(),
      setMessage: jest.fn()
    }, overrides);
  };
  beforeEach(function () {
    jest.clearAllMocks();
    var _useLastActivity = (0, _useLastActivity2.default)(),
      saveActivity = _useLastActivity.saveActivity;
    mockSaveActivity = saveActivity;
    _useConversation.default.mockReturnValue(createMockConversationState());
  });
  test('should render loading state correctly', function () {
    _useConversation.default.mockReturnValue(createMockConversationState({
      loaded: false
    }));
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_conversations.default, {
        route: mockRoute
      })),
      queryByTestId = _render.queryByTestId;
    expect(queryByTestId('ConversationHeader')).toBeNull();
  });
  test('should render main content when data is loaded', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_conversations.default, {
        route: mockRoute
      })),
      getByTestId = _render2.getByTestId;
    expect(getByTestId('ConversationHeader')).toBeTruthy();
    var descriptionComponent = getByTestId('ConversationScenarioDescription');
    expect(descriptionComponent.props.description).toBe('Description du scenario.');
  });
  test('should call saveActivity on mount if conversation has started', function () {
    _useConversation.default.mockReturnValue(createMockConversationState({
      isConversationStarted: true
    }));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_conversations.default, {
      route: mockRoute
    }));
    expect(mockSaveActivity).toHaveBeenCalledTimes(1);
    expect(mockSaveActivity).toHaveBeenCalledWith(expect.objectContaining({
      title: 'Conversations',
      level: 'A1',
      type: 'conversations',
      metadata: expect.any(Object)
    }));
  });
  test('should NOT call saveActivity on mount if conversation has not started', function () {
    _useConversation.default.mockReturnValue(createMockConversationState({
      isConversationStarted: false
    }));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_conversations.default, {
      route: mockRoute
    }));
    expect(mockSaveActivity).not.toHaveBeenCalled();
  });
  test('should handle back press correctly', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_conversations.default, {
        route: mockRoute
      })),
      getByTestId = _render3.getByTestId;
    var header = getByTestId('ConversationHeader');
    header.props.onBackPress();
    expect(_expoRouter.router.push).toHaveBeenCalledWith({
      pathname: '/tabs/exerciseSelection',
      params: {
        level: 'A1'
      }
    });
  });
  test('should handle scenario change correctly', function () {
    var mockConversationState = createMockConversationState();
    _useConversation.default.mockReturnValue(mockConversationState);
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_conversations.default, {
        route: mockRoute
      })),
      getByTestId = _render4.getByTestId;
    var selector = getByTestId('ConversationSelector');
    selector.props.onSelectScenario(1);
    expect(mockConversationState.changeScenario).toHaveBeenCalledWith(1);
  });
  test('should handle sending a message correctly', function () {
    var mockConversationState = createMockConversationState();
    _useConversation.default.mockReturnValue(mockConversationState);
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_conversations.default, {
        route: mockRoute
      })),
      getByTestId = _render5.getByTestId;
    var input = getByTestId('ConversationInput');
    input.props.onSendMessage();
    expect(mockConversationState.sendMessage).toHaveBeenCalledTimes(1);
  });
  test('should handle using a suggestion correctly', function () {
    var mockConversationState = createMockConversationState();
    _useConversation.default.mockReturnValue(mockConversationState);
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_conversations.default, {
        route: mockRoute
      })),
      getByTestId = _render6.getByTestId;
    var suggestions = getByTestId('ConversationSuggestions');
    suggestions.props.onPressSuggestion('Hi');
    expect(mockConversationState.useSuggestion).toHaveBeenCalledWith('Hi');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcmVhdGVNb2NrQ29tcG9uZW50IiwibmFtZSIsInByb3BzIiwiX2pzeFJ1bnRpbWUiLCJqc3giLCJfcmVhY3ROYXRpdmUyIiwiVmlldyIsIk9iamVjdCIsImFzc2lnbiIsInRlc3RJRCIsImNoaWxkcmVuIiwiVGV4dCIsIl9nZXRKZXN0T2JqIiwibW9jayIsInJvdXRlciIsInB1c2giLCJqZXN0IiwiZm4iLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInNhdmVBY3Rpdml0eSIsImdldENvbnZlcnNhdGlvbkRhdGEiLCJnZXRMZXZlbENvbG9yIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfY29udmVyc2F0aW9ucyIsIl91c2VDb252ZXJzYXRpb24iLCJfdXNlTGFzdEFjdGl2aXR5MiIsIl9leHBvUm91dGVyIiwiX3JlcXVpcmUiLCJkZXNjcmliZSIsIm1vY2tSb3V0ZSIsInBhcmFtcyIsImxldmVsIiwibW9ja1NhdmVBY3Rpdml0eSIsImNyZWF0ZU1vY2tDb252ZXJzYXRpb25TdGF0ZSIsIm92ZXJyaWRlcyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsImxvYWRlZCIsImhhc1ZhbGlkRGF0YSIsImN1cnJlbnRTY2VuYXJpbyIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJjb252ZXJzYXRpb24iLCJzZW5kZXIiLCJ0ZXh0Iiwic3VnZ2VzdGlvbnMiLCJtZXNzYWdlIiwiaXNUeXBpbmciLCJzdGF0cyIsImNvbXBsZXRpb25Qcm9ncmVzcyIsImN1cnJlbnRTdGVwIiwidG90YWxTdGVwcyIsImlzQ29udmVyc2F0aW9uU3RhcnRlZCIsImNoYW5nZVNjZW5hcmlvIiwic2VuZE1lc3NhZ2UiLCJ1c2VTdWdnZXN0aW9uIiwidG9nZ2xlSGVscCIsInRvZ2dsZURldGFpbGVkUHJvZ3Jlc3MiLCJzZXRNZXNzYWdlIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJfdXNlTGFzdEFjdGl2aXR5IiwidXNlTGFzdEFjdGl2aXR5IiwidXNlQ29udmVyc2F0aW9uIiwibW9ja1JldHVyblZhbHVlIiwidGVzdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJyb3V0ZSIsInF1ZXJ5QnlUZXN0SWQiLCJleHBlY3QiLCJ0b0JlTnVsbCIsIl9yZW5kZXIyIiwiZ2V0QnlUZXN0SWQiLCJ0b0JlVHJ1dGh5IiwiZGVzY3JpcHRpb25Db21wb25lbnQiLCJ0b0JlIiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJvYmplY3RDb250YWluaW5nIiwidHlwZSIsIm1ldGFkYXRhIiwiYW55Iiwibm90IiwidG9IYXZlQmVlbkNhbGxlZCIsIl9yZW5kZXIzIiwiaGVhZGVyIiwib25CYWNrUHJlc3MiLCJwYXRobmFtZSIsIm1vY2tDb252ZXJzYXRpb25TdGF0ZSIsIl9yZW5kZXI0Iiwic2VsZWN0b3IiLCJvblNlbGVjdFNjZW5hcmlvIiwiX3JlbmRlcjUiLCJpbnB1dCIsIm9uU2VuZE1lc3NhZ2UiLCJfcmVuZGVyNiIsIm9uUHJlc3NTdWdnZXN0aW9uIl0sInNvdXJjZXMiOlsiQ29udmVyc2F0aW9uRXhlcmNpc2UudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBWaWV3LCBUZXh0IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBDb252ZXJzYXRpb25FeGVyY2lzZSBmcm9tICcuLi8uLi8uLi8uLi9zcmMvc2NyZWVucy9leGVyY2lzZXMvY29udmVyc2F0aW9ucyc7XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBNT0NLUyBTRVRVUFxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8gTW9jayBleHBvLXJvdXRlciBmb3IgbmF2aWdhdGlvblxuamVzdC5tb2NrKCdleHBvLXJvdXRlcicsICgpID0+ICh7XG4gIHJvdXRlcjoge1xuICAgIHB1c2g6IGplc3QuZm4oKSxcbiAgfSxcbn0pKTtcblxuLy8gTW9jayB0aGUgY29yZSB1c2VDb252ZXJzYXRpb24gaG9va1xuamVzdC5tb2NrKCcuLi8uLi8uLi8uLi9zcmMvc2NyZWVucy9leGVyY2lzZXMvY29udmVyc2F0aW9ucy9ob29rcy91c2VDb252ZXJzYXRpb24nKTtcblxuLy8gTW9jayB1c2VMYXN0QWN0aXZpdHkgaG9va1xuamVzdC5tb2NrKCcuLi8uLi8uLi8uLi9zcmMvaG9va3MvdXNlTGFzdEFjdGl2aXR5JywgKCkgPT4gKHtcbiAgX19lc01vZHVsZTogdHJ1ZSxcbiAgZGVmYXVsdDogamVzdC5mbigoKSA9PiAoe1xuICAgIHNhdmVBY3Rpdml0eTogamVzdC5mbigpLFxuICB9KSksIC8vIFRoaXMgaXMgdGhlIG1vY2sgZm9yIHRoZSBkZWZhdWx0IGV4cG9ydCBvZiB1c2VMYXN0QWN0aXZpdHlcbn0pKTtcblxuamVzdC5tb2NrKCcuLi8uLi8uLi8uLi9zcmMvdXRpbHMvY29udmVyc2F0aW9uL2NvbnZlcnNhdGlvbkRhdGFIZWxwZXInLCAoKSA9PiAoe1xuICBnZXRDb252ZXJzYXRpb25EYXRhOiBqZXN0LmZuKCksXG4gIGdldExldmVsQ29sb3I6IGplc3QuZm4oKCkgPT4gJyMwMDAwRkYnKSxcbn0pKTtcblxuLy8gSGVscGVyIHRvIGNyZWF0ZSBtb2NrIGNvbXBvbmVudHMgdGhhdCBhY2NlcHQgcHJvcHMgYW5kIGNhbiBiZSBmb3VuZCB3aXRoIHRlc3RJRFxuY29uc3QgY3JlYXRlTW9ja0NvbXBvbmVudCA9IChuYW1lKSA9PiAocHJvcHMpID0+IChcbiAgPFZpZXcgdGVzdElEPXtuYW1lfSB7Li4ucHJvcHN9PlxuICAgIDxUZXh0PntuYW1lfTwvVGV4dD5cbiAgPC9WaWV3PlxuKTtcblxuLy8gTW9jayBhbGwgY2hpbGQgY29tcG9uZW50cyB0byBpc29sYXRlIENvbnZlcnNhdGlvbkV4ZXJjaXNlXG5qZXN0Lm1vY2soJy4uLy4uLy4uLy4uL3NyYy9zY3JlZW5zL2V4ZXJjaXNlcy9jb252ZXJzYXRpb25zL0NvbnZlcnNhdGlvbkhlYWRlcicsICgpID0+IGNyZWF0ZU1vY2tDb21wb25lbnQoJ0NvbnZlcnNhdGlvbkhlYWRlcicpKTtcbmplc3QubW9jaygnLi4vLi4vLi4vLi4vc3JjL3NjcmVlbnMvZXhlcmNpc2VzL2NvbnZlcnNhdGlvbnMvQ29udmVyc2F0aW9uU2VsZWN0b3InLCAoKSA9PiBjcmVhdGVNb2NrQ29tcG9uZW50KCdDb252ZXJzYXRpb25TZWxlY3RvcicpKTtcbmplc3QubW9jaygnLi4vLi4vLi4vLi4vc3JjL3NjcmVlbnMvZXhlcmNpc2VzL2NvbnZlcnNhdGlvbnMvQ29udmVyc2F0aW9uUHJvZ3Jlc3MnLCAoKSA9PiBjcmVhdGVNb2NrQ29tcG9uZW50KCdDb252ZXJzYXRpb25Qcm9ncmVzcycpKTtcbmplc3QubW9jaygnLi4vLi4vLi4vLi4vc3JjL3NjcmVlbnMvZXhlcmNpc2VzL2NvbnZlcnNhdGlvbnMvQ29udmVyc2F0aW9uU2NlbmFyaW9EZXNjcmlwdGlvbicsICgpID0+IGNyZWF0ZU1vY2tDb21wb25lbnQoJ0NvbnZlcnNhdGlvblNjZW5hcmlvRGVzY3JpcHRpb24nKSk7XG5qZXN0Lm1vY2soJy4uLy4uLy4uLy4uL3NyYy9zY3JlZW5zL2V4ZXJjaXNlcy9jb252ZXJzYXRpb25zL0NvbnZlcnNhdGlvbk1lc3NhZ2VMaXN0JywgKCkgPT4gY3JlYXRlTW9ja0NvbXBvbmVudCgnQ29udmVyc2F0aW9uTWVzc2FnZUxpc3QnKSk7XG5qZXN0Lm1vY2soJy4uLy4uLy4uLy4uL3NyYy9zY3JlZW5zL2V4ZXJjaXNlcy9jb252ZXJzYXRpb25zL0NvbnZlcnNhdGlvblN1Z2dlc3Rpb25zJywgKCkgPT4gY3JlYXRlTW9ja0NvbXBvbmVudCgnQ29udmVyc2F0aW9uU3VnZ2VzdGlvbnMnKSk7XG5qZXN0Lm1vY2soJy4uLy4uLy4uLy4uL3NyYy9zY3JlZW5zL2V4ZXJjaXNlcy9jb252ZXJzYXRpb25zL0NvbnZlcnNhdGlvbklucHV0JywgKCkgPT4gY3JlYXRlTW9ja0NvbXBvbmVudCgnQ29udmVyc2F0aW9uSW5wdXQnKSk7XG5cbi8vIEltcG9ydCB0aGUgbW9ja2VkIGhvb2tzIHRvIGNvbnRyb2wgdGhlaXIgYmVoYXZpb3JcbmltcG9ydCB1c2VDb252ZXJzYXRpb24gZnJvbSAnLi4vLi4vLi4vLi4vc3JjL3NjcmVlbnMvZXhlcmNpc2VzL2NvbnZlcnNhdGlvbnMvaG9va3MvdXNlQ29udmVyc2F0aW9uJztcbmltcG9ydCB1c2VMYXN0QWN0aXZpdHkgZnJvbSAnLi4vLi4vLi4vLi4vc3JjL2hvb2tzL3VzZUxhc3RBY3Rpdml0eSc7XG5pbXBvcnQgeyByb3V0ZXIgfSBmcm9tICdleHBvLXJvdXRlcic7XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBURVNUIFNVSVRFXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5kZXNjcmliZSgnQ29udmVyc2F0aW9uRXhlcmNpc2UnLCAoKSA9PiB7XG4gIGNvbnN0IG1vY2tSb3V0ZSA9IHsgcGFyYW1zOiB7IGxldmVsOiAnQTEnIH0gfTtcbiAgbGV0IG1vY2tTYXZlQWN0aXZpdHk7XG5cbiAgLy8gSGVscGVyIHRvIGNyZWF0ZSBhIGRlZmF1bHQgbW9jayBzdGF0ZSBmb3IgdGhlIHVzZUNvbnZlcnNhdGlvbiBob29rXG4gIGNvbnN0IGNyZWF0ZU1vY2tDb252ZXJzYXRpb25TdGF0ZSA9IChvdmVycmlkZXMgPSB7fSkgPT4gKHtcbiAgICBsb2FkZWQ6IHRydWUsXG4gICAgaGFzVmFsaWREYXRhOiB0cnVlLFxuICAgIGN1cnJlbnRTY2VuYXJpbzoge1xuICAgICAgdGl0bGU6ICdTY2VuYXJpbyBkZSBUZXN0JyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnRGVzY3JpcHRpb24gZHUgc2NlbmFyaW8uJyxcbiAgICB9LFxuICAgIGNvbnZlcnNhdGlvbjogW3sgc2VuZGVyOiAnYm90JywgdGV4dDogJ0hlbGxvIScgfV0sXG4gICAgc3VnZ2VzdGlvbnM6IFsnSGknLCAnSGVsbG8gdGhlcmUnXSxcbiAgICBtZXNzYWdlOiAnJyxcbiAgICBpc1R5cGluZzogZmFsc2UsXG4gICAgc3RhdHM6IHsgY29tcGxldGlvblByb2dyZXNzOiA1MCwgY3VycmVudFN0ZXA6IDEsIHRvdGFsU3RlcHM6IDIgfSxcbiAgICBpc0NvbnZlcnNhdGlvblN0YXJ0ZWQ6IHRydWUsXG4gICAgLy8gTW9jayBmdW5jdGlvbnMgdGhhdCB3ZSBjYW4gc3B5IG9uXG4gICAgY2hhbmdlU2NlbmFyaW86IGplc3QuZm4oKSxcbiAgICBzZW5kTWVzc2FnZTogamVzdC5mbigpLFxuICAgIHVzZVN1Z2dlc3Rpb246IGplc3QuZm4oKSxcbiAgICB0b2dnbGVIZWxwOiBqZXN0LmZuKCksXG4gICAgdG9nZ2xlRGV0YWlsZWRQcm9ncmVzczogamVzdC5mbigpLFxuICAgIHNldE1lc3NhZ2U6IGplc3QuZm4oKSxcbiAgICAuLi5vdmVycmlkZXMsXG4gIH0pO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIC8vIFJlc2V0IGFsbCBtb2NrcyBiZWZvcmUgZWFjaCB0ZXN0IHRvIGVuc3VyZSBpc29sYXRpb25cbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcblxuICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgbW9ja2VkIHNhdmVBY3Rpdml0eSBmdW5jdGlvbiBmcm9tIHRoZSB1c2VMYXN0QWN0aXZpdHkgbW9ja1xuICAgIC8vIHVzZUxhc3RBY3Rpdml0eSgpIHdpbGwgcmV0dXJuIHRoZSBvYmplY3QgeyBzYXZlQWN0aXZpdHk6IGplc3QuZm4oKSB9XG4gICAgLy8gV2UgdGhlbiBkZXN0cnVjdHVyZSBzYXZlQWN0aXZpdHkgZnJvbSBpdC5cbiAgICBjb25zdCB7IHNhdmVBY3Rpdml0eSB9ID0gdXNlTGFzdEFjdGl2aXR5KCk7XG4gICAgbW9ja1NhdmVBY3Rpdml0eSA9IHNhdmVBY3Rpdml0eTsgLy8gQXNzaWduIGl0IHRvIG91ciBsb2NhbCB2YXJpYWJsZVxuXG4gICAgLy8gUmVzZXQgdGhlIHVzZUNvbnZlcnNhdGlvbiBtb2NrIGZvciBlYWNoIHRlc3RcbiAgICB1c2VDb252ZXJzYXRpb24ubW9ja1JldHVyblZhbHVlKGNyZWF0ZU1vY2tDb252ZXJzYXRpb25TdGF0ZSgpKTtcbiAgfSk7XG5cbiAgLy8gLS0tIFRlc3QgU2NlbmFyaW9zIC0tLVxuXG4gIHRlc3QoJ3Nob3VsZCByZW5kZXIgbG9hZGluZyBzdGF0ZSBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgdXNlQ29udmVyc2F0aW9uLm1vY2tSZXR1cm5WYWx1ZShjcmVhdGVNb2NrQ29udmVyc2F0aW9uU3RhdGUoeyBsb2FkZWQ6IGZhbHNlIH0pKTtcbiAgICBjb25zdCB7IHF1ZXJ5QnlUZXN0SWQgfSA9IHJlbmRlcig8Q29udmVyc2F0aW9uRXhlcmNpc2Ugcm91dGU9e21vY2tSb3V0ZX0gLz4pO1xuICAgIC8vIEluIGxvYWRpbmcgc3RhdGUsIHRoZSBtYWluIGNvbnRlbnQgKGNoaWxkIGNvbXBvbmVudHMpIHNob3VsZCBub3QgYmUgdmlzaWJsZVxuICAgIGV4cGVjdChxdWVyeUJ5VGVzdElkKCdDb252ZXJzYXRpb25IZWFkZXInKSkudG9CZU51bGwoKTtcbiAgfSk7XG5cbiAgdGVzdCgnc2hvdWxkIHJlbmRlciBtYWluIGNvbnRlbnQgd2hlbiBkYXRhIGlzIGxvYWRlZCcsICgpID0+IHtcbiAgICAvLyB1c2VDb252ZXJzYXRpb24gaXMgYWxyZWFkeSBtb2NrZWQgdG8gcmV0dXJuIGxvYWRlZDogdHJ1ZSBpbiBiZWZvcmVFYWNoXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxDb252ZXJzYXRpb25FeGVyY2lzZSByb3V0ZT17bW9ja1JvdXRlfSAvPik7XG5cbiAgICAvLyBDaGVjayB0aGF0IGNoaWxkIGNvbXBvbmVudHMgYXJlIHJlbmRlcmVkIGFuZCB0aGVpciBwcm9wcyBhcmUgcGFzc2VkIGNvcnJlY3RseVxuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnQ29udmVyc2F0aW9uSGVhZGVyJykpLnRvQmVUcnV0aHkoKTtcbiAgICBjb25zdCBkZXNjcmlwdGlvbkNvbXBvbmVudCA9IGdldEJ5VGVzdElkKCdDb252ZXJzYXRpb25TY2VuYXJpb0Rlc2NyaXB0aW9uJyk7XG4gICAgZXhwZWN0KGRlc2NyaXB0aW9uQ29tcG9uZW50LnByb3BzLmRlc2NyaXB0aW9uKS50b0JlKCdEZXNjcmlwdGlvbiBkdSBzY2VuYXJpby4nKTtcbiAgfSk7XG5cbiAgdGVzdCgnc2hvdWxkIGNhbGwgc2F2ZUFjdGl2aXR5IG9uIG1vdW50IGlmIGNvbnZlcnNhdGlvbiBoYXMgc3RhcnRlZCcsICgpID0+IHtcbiAgICB1c2VDb252ZXJzYXRpb24ubW9ja1JldHVyblZhbHVlKGNyZWF0ZU1vY2tDb252ZXJzYXRpb25TdGF0ZSh7IGlzQ29udmVyc2F0aW9uU3RhcnRlZDogdHJ1ZSB9KSk7XG4gICAgcmVuZGVyKDxDb252ZXJzYXRpb25FeGVyY2lzZSByb3V0ZT17bW9ja1JvdXRlfSAvPik7XG5cbiAgICBleHBlY3QobW9ja1NhdmVBY3Rpdml0eSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgIGV4cGVjdChtb2NrU2F2ZUFjdGl2aXR5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICB0aXRsZTogJ0NvbnZlcnNhdGlvbnMnLFxuICAgICAgbGV2ZWw6ICdBMScsXG4gICAgICB0eXBlOiAnY29udmVyc2F0aW9ucycsXG4gICAgICBtZXRhZGF0YTogZXhwZWN0LmFueShPYmplY3QpLFxuICAgIH0pKTtcbiAgfSk7XG5cbiAgdGVzdCgnc2hvdWxkIE5PVCBjYWxsIHNhdmVBY3Rpdml0eSBvbiBtb3VudCBpZiBjb252ZXJzYXRpb24gaGFzIG5vdCBzdGFydGVkJywgKCkgPT4ge1xuICAgIHVzZUNvbnZlcnNhdGlvbi5tb2NrUmV0dXJuVmFsdWUoY3JlYXRlTW9ja0NvbnZlcnNhdGlvblN0YXRlKHsgaXNDb252ZXJzYXRpb25TdGFydGVkOiBmYWxzZSB9KSk7XG4gICAgcmVuZGVyKDxDb252ZXJzYXRpb25FeGVyY2lzZSByb3V0ZT17bW9ja1JvdXRlfSAvPik7XG5cbiAgICBleHBlY3QobW9ja1NhdmVBY3Rpdml0eSkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG5cbiAgdGVzdCgnc2hvdWxkIGhhbmRsZSBiYWNrIHByZXNzIGNvcnJlY3RseScsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoPENvbnZlcnNhdGlvbkV4ZXJjaXNlIHJvdXRlPXttb2NrUm91dGV9IC8+KTtcblxuICAgIGNvbnN0IGhlYWRlciA9IGdldEJ5VGVzdElkKCdDb252ZXJzYXRpb25IZWFkZXInKTtcbiAgICAvLyBEaXJlY3RseSBpbnZva2UgdGhlIGNhbGxiYWNrIHByb3AgdG8gc2ltdWxhdGUgdGhlIGV2ZW50XG4gICAgaGVhZGVyLnByb3BzLm9uQmFja1ByZXNzKCk7XG5cbiAgICBleHBlY3Qocm91dGVyLnB1c2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHsgXG4gICAgICBwYXRobmFtZTogJy90YWJzL2V4ZXJjaXNlU2VsZWN0aW9uJywgXG4gICAgICBwYXJhbXM6IHsgbGV2ZWw6ICdBMScgfSBcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnc2hvdWxkIGhhbmRsZSBzY2VuYXJpbyBjaGFuZ2UgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tDb252ZXJzYXRpb25TdGF0ZSA9IGNyZWF0ZU1vY2tDb252ZXJzYXRpb25TdGF0ZSgpO1xuICAgIHVzZUNvbnZlcnNhdGlvbi5tb2NrUmV0dXJuVmFsdWUobW9ja0NvbnZlcnNhdGlvblN0YXRlKTtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoPENvbnZlcnNhdGlvbkV4ZXJjaXNlIHJvdXRlPXttb2NrUm91dGV9IC8+KTtcblxuICAgIGNvbnN0IHNlbGVjdG9yID0gZ2V0QnlUZXN0SWQoJ0NvbnZlcnNhdGlvblNlbGVjdG9yJyk7XG4gICAgLy8gRGlyZWN0bHkgaW52b2tlIHRoZSBjYWxsYmFjayBwcm9wIHdpdGggdGhlIG5ldyBzY2VuYXJpbyBpbmRleFxuICAgIHNlbGVjdG9yLnByb3BzLm9uU2VsZWN0U2NlbmFyaW8oMSk7XG5cbiAgICBleHBlY3QobW9ja0NvbnZlcnNhdGlvblN0YXRlLmNoYW5nZVNjZW5hcmlvKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgxKTtcbiAgfSk7XG5cbiAgdGVzdCgnc2hvdWxkIGhhbmRsZSBzZW5kaW5nIGEgbWVzc2FnZSBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgY29uc3QgbW9ja0NvbnZlcnNhdGlvblN0YXRlID0gY3JlYXRlTW9ja0NvbnZlcnNhdGlvblN0YXRlKCk7XG4gICAgdXNlQ29udmVyc2F0aW9uLm1vY2tSZXR1cm5WYWx1ZShtb2NrQ29udmVyc2F0aW9uU3RhdGUpO1xuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcig8Q29udmVyc2F0aW9uRXhlcmNpc2Ugcm91dGU9e21vY2tSb3V0ZX0gLz4pO1xuXG4gICAgY29uc3QgaW5wdXQgPSBnZXRCeVRlc3RJZCgnQ29udmVyc2F0aW9uSW5wdXQnKTtcbiAgICAvLyBEaXJlY3RseSBpbnZva2UgdGhlIGNhbGxiYWNrIHByb3BcbiAgICBpbnB1dC5wcm9wcy5vblNlbmRNZXNzYWdlKCk7XG5cbiAgICBleHBlY3QobW9ja0NvbnZlcnNhdGlvblN0YXRlLnNlbmRNZXNzYWdlKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3Nob3VsZCBoYW5kbGUgdXNpbmcgYSBzdWdnZXN0aW9uIGNvcnJlY3RseScsICgpID0+IHtcbiAgICBjb25zdCBtb2NrQ29udmVyc2F0aW9uU3RhdGUgPSBjcmVhdGVNb2NrQ29udmVyc2F0aW9uU3RhdGUoKTtcbiAgICB1c2VDb252ZXJzYXRpb24ubW9ja1JldHVyblZhbHVlKG1vY2tDb252ZXJzYXRpb25TdGF0ZSk7XG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxDb252ZXJzYXRpb25FeGVyY2lzZSByb3V0ZT17bW9ja1JvdXRlfSAvPik7XG5cbiAgICBjb25zdCBzdWdnZXN0aW9ucyA9IGdldEJ5VGVzdElkKCdDb252ZXJzYXRpb25TdWdnZXN0aW9ucycpO1xuICAgIC8vIERpcmVjdGx5IGludm9rZSB0aGUgY2FsbGJhY2sgcHJvcCB3aXRoIGEgc2FtcGxlIHN1Z2dlc3Rpb25cbiAgICBzdWdnZXN0aW9ucy5wcm9wcy5vblByZXNzU3VnZ2VzdGlvbignSGknKTtcblxuICAgIGV4cGVjdChtb2NrQ29udmVyc2F0aW9uU3RhdGUudXNlU3VnZ2VzdGlvbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ0hpJyk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiJJQWtDTUEsbUJBQW1CLEdBQUcsU0FBdEJBLG1CQUFtQkEsQ0FBSUMsSUFBSTtFQUFBLE9BQUssVUFBQ0MsS0FBSztJQUFBLE9BQzFDLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDQyxhQUFBLENBQUFDLElBQUksRUFBQUMsTUFBQSxDQUFBQyxNQUFBO01BQUNDLE1BQU0sRUFBRVI7SUFBSyxHQUFLQyxLQUFLO01BQUFRLFFBQUEsRUFDM0IsSUFBQVAsV0FBQSxDQUFBQyxHQUFBLEVBQUNDLGFBQUEsQ0FBQU0sSUFBSTtRQUFBRCxRQUFBLEVBQUVUO01BQUksQ0FBTztJQUFDLEVBQ2YsQ0FBQztFQUFBLENBQ1I7QUFBQTtBQTNCRFcsV0FBQSxHQUFLQyxJQUFJLENBQUMsYUFBYSxFQUFFO0VBQUEsT0FBTztJQUM5QkMsTUFBTSxFQUFFO01BQ05DLElBQUksRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUM7SUFDaEI7RUFDRixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBR0hMLFdBQUEsR0FBS0MsSUFBSSxDQUFDLHVFQUF1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