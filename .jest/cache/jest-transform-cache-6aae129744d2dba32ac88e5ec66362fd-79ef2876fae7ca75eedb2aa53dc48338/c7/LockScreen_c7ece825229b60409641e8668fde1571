4821b8a356dbef248742e7c5e7703a26
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _LockContext = require("../../contexts/LockContext");
var _ForgotPinScreen = _interopRequireDefault(require("./ForgotPinScreen"));
var _EmergencyResetScreen = _interopRequireDefault(require("./EmergencyResetScreen"));
var Lock = _interopRequireWildcard(require("../../services/lockService"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var LockScreen = function LockScreen() {
  var _useLock = (0, _LockContext.useLock)(),
    unlockWithPin = _useLock.unlockWithPin;
  var _useState = (0, _react.useState)(''),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    pin = _useState2[0],
    setPin = _useState2[1];
  var _useState3 = (0, _react.useState)(''),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    error = _useState4[0],
    setError = _useState4[1];
  var _useState5 = (0, _react.useState)('lock'),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    view = _useState6[0],
    setView = _useState6[1];
  var _useState7 = (0, _react.useState)(''),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    newPin1 = _useState8[0],
    setNewPin1 = _useState8[1];
  var _useState9 = (0, _react.useState)(''),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    newPin2 = _useState0[0],
    setNewPin2 = _useState0[1];
  var onSubmit = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    var res = yield unlockWithPin(pin);
    if (!res.ok) {
      setError(res.reason === 'lockout' ? 'Trop de tentatives. RÃ©essaie plus tard.' : 'PIN incorrect');
    }
  }), [pin, unlockWithPin]);
  if (view === 'forgot') {
    return (0, _jsxRuntime.jsx)(_ForgotPinScreen.default, {
      onReset: function onReset() {
        return setView('newpin');
      }
    });
  }
  if (view === 'reset') {
    return (0, _jsxRuntime.jsx)(_EmergencyResetScreen.default, {
      onDone: function onDone() {
        return setView('lock');
      }
    });
  }
  if (view === 'newpin') {
    var onSaveNewPin = function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* () {
        if (!newPin1 || newPin1 !== newPin2 || newPin1.length < 4) return;
        yield Lock.enableLock();
        yield Lock.setPin(newPin1);
        yield unlockWithPin(newPin1);
      });
      return function onSaveNewPin() {
        return _ref2.apply(this, arguments);
      };
    }();
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: {
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
        padding: 24
      },
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: {
          fontSize: 20,
          fontWeight: '700',
          marginBottom: 12
        },
        children: "Nouveau PIN"
      }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
        value: newPin1,
        onChangeText: setNewPin1,
        placeholder: "Nouveau PIN",
        secureTextEntry: true,
        keyboardType: "number-pad",
        style: {
          width: '80%',
          borderWidth: 1,
          borderColor: '#E5E7EB',
          borderRadius: 8,
          padding: 12,
          marginBottom: 8
        },
        testID: "newpin-input-1"
      }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
        value: newPin2,
        onChangeText: setNewPin2,
        placeholder: "Confirmer le PIN",
        secureTextEntry: true,
        keyboardType: "number-pad",
        style: {
          width: '80%',
          borderWidth: 1,
          borderColor: '#E5E7EB',
          borderRadius: 8,
          padding: 12,
          marginBottom: 12
        },
        testID: "newpin-input-2"
      }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        onPress: onSaveNewPin,
        style: {
          backgroundColor: '#10B981',
          paddingVertical: 12,
          paddingHorizontal: 18,
          borderRadius: 10
        },
        testID: "newpin-save",
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: {
            color: 'white',
            fontWeight: '700'
          },
          children: "Enregistrer"
        })
      })]
    });
  }
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: {
      flex: 1,
      alignItems: 'center',
      justifyContent: 'center',
      padding: 24
    },
    testID: "lock-screen",
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: {
        fontSize: 22,
        fontWeight: '700',
        marginBottom: 12
      },
      children: "D\xE9verrouiller"
    }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
      value: pin,
      onChangeText: setPin,
      placeholder: "Code PIN",
      secureTextEntry: true,
      keyboardType: "number-pad",
      style: {
        width: '80%',
        borderWidth: 1,
        borderColor: '#E5E7EB',
        borderRadius: 8,
        padding: 12,
        marginBottom: 8
      },
      testID: "pin-input"
    }), !!error && (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: {
        color: '#DC2626',
        marginBottom: 8
      },
      children: error
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      onPress: onSubmit,
      style: {
        backgroundColor: '#3B82F6',
        paddingVertical: 12,
        paddingHorizontal: 18,
        borderRadius: 10,
        marginBottom: 12
      },
      testID: "pin-submit",
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: {
          color: 'white',
          fontWeight: '700'
        },
        children: "D\xE9verrouiller"
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      onPress: function onPress() {
        return setView('forgot');
      },
      testID: "forgot-pin-link",
      style: {
        marginBottom: 8
      },
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: {
          color: '#3B82F6',
          fontWeight: '600'
        },
        children: "PIN oubli\xE9 ?"
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      onPress: function onPress() {
        return setView('reset');
      },
      testID: "emergency-reset-link",
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: {
          color: '#DC2626',
          fontWeight: '600'
        },
        children: "R\xE9initialisation d'urgence"
      })
    })]
  });
};
LockScreen.propTypes = {};
var _default = exports.default = LockScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,