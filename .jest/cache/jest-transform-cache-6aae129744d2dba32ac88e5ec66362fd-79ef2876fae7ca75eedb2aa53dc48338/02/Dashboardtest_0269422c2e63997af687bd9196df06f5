ca6e9b17e6b6b3bece36a5ba1853449e
_getJestObj().mock('expo-linear-gradient', function () {
  return {
    LinearGradient: function LinearGradient(_ref) {
      var children = _ref.children;
      return children;
    }
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
_getJestObj().mock('../../../src/contexts/ProgressContext', function () {
  return {
    useProgress: mockUseProgress
  };
});
_getJestObj().mock('../../../src/contexts/CurrentLevelContext', function () {
  return {
    useCurrentLevel: mockUseCurrentLevel
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/hooks/useDashboardLevel', function () {
  return {
    useDashboardLevel: jest.fn(function () {
      return {
        currentLevel: '1',
        handleChangeActiveLevel: jest.fn(),
        levelColor: '#10B981'
      };
    })
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/hooks/useDashboardState', function () {
  return {
    useDashboardState: jest.fn(function () {
      return {
        refreshing: false,
        onRefresh: jest.fn()
      };
    })
  };
});
_getJestObj().mock('../../../src/hooks/useLastActivity', function () {
  return {
    __esModule: true,
    default: jest.fn(function () {
      return {
        lastActivity: null,
        isLoading: false,
        reload: jest.fn()
      };
    })
  };
});
_getJestObj().mock('../../../src/hooks/useRealTimeProgress', function () {
  return {
    __esModule: true,
    default: jest.fn(function () {
      return {
        getLevelProgress: jest.fn(function () {
          return 25;
        }),
        refresh: jest.fn()
      };
    })
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/ModernHeader', function () {
  return function (_ref2) {
    var level = _ref2.level,
      levelColor = _ref2.levelColor;
    return `ModernHeader[${level}][${levelColor}]`;
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/HeroContinueSection', function () {
  return function (_ref3) {
    var lastActivity = _ref3.lastActivity,
      isLoading = _ref3.isLoading;
    return `HeroContinueSection[${(lastActivity == null ? void 0 : lastActivity.type) || 'none'}][loading:${isLoading}]`;
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/QuickActions', function () {
  return function (_ref4) {
    var currentLevel = _ref4.currentLevel,
      accentColor = _ref4.accentColor;
    return `QuickActions[${currentLevel}][${accentColor}]`;
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/SimpleMetrics', function () {
  return function (_ref5) {
    var accentColor = _ref5.accentColor;
    return `SimpleMetrics[${accentColor}]`;
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/LearningProgress', function () {
  return function (_ref6) {
    var globalProgress = _ref6.globalProgress,
      currentLevel = _ref6.currentLevel;
    return `LearningProgress[${globalProgress}%][${currentLevel}]`;
  };
});
_getJestObj().mock('../../../src/screens/VocabularyRevision/RevisionOrchestrator', function () {
  return function (_ref7) {
    var currentLevel = _ref7.currentLevel;
    return `RevisionOrchestrator[${currentLevel}]`;
  };
});
_getJestObj().mock('../../../src/components/layout/Container', function () {
  return function (_ref8) {
    var children = _ref8.children;
    return children;
  };
});
_getJestObj().mock('../../../src/utils/constants', function () {
  return {
    LANGUAGE_LEVELS: {
      '1': {
        title: 'D√©butant',
        color: '#10B981',
        icon: 'üå±'
      },
      '2': {
        title: '√âl√©mentaire',
        color: '#3B82F6',
        icon: 'üìö'
      },
      '3': {
        title: 'Interm√©diaire',
        color: '#8B5CF6',
        icon: 'üéØ'
      }
    },
    EXERCISES: {
      vocabulary: {
        id: 'vocabulary',
        route: '/tabs/vocabulary'
      },
      grammar: {
        id: 'grammar',
        route: '/tabs/grammar'
      }
    },
    CONTAINER_SAFE_EDGES: {
      NO_BOTTOM: []
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Dashboard = _interopRequireDefault(require("../../../src/screens/Dashboard"));
var _ThemeContext = require("../../../src/contexts/ThemeContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockUseProgress = jest.fn();
var mockUseCurrentLevel = jest.fn();
describe('Dashboard - Tests unitaires', function () {
  var mockTheme = {
    colors: {
      background: '#F8FAFC',
      primary: '#3B82F6',
      surface: '#FFFFFF',
      text: '#1F2937',
      textSecondary: '#6B7280'
    }
  };
  var defaultMocks = function defaultMocks() {
    mockUseProgress.mockReturnValue({
      isLoading: false,
      progress: {
        level1: 50
      }
    });
    mockUseCurrentLevel.mockReturnValue({
      setCurrentLevel: jest.fn()
    });
  };
  beforeEach(function () {
    jest.clearAllMocks();
    defaultMocks();
  });
  var renderDashboard = function renderDashboard() {
    var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : mockTheme;
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
      value: theme,
      children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
    }));
  };
  describe('Rendu de base', function () {
    it('devrait rendre tous les composants principaux', function () {
      var _renderDashboard = renderDashboard(),
        container = _renderDashboard.container;
      var content = container.firstChild.props.children.toString();
      expect(content).toContain('ModernHeader[1][#10B981]');
      expect(content).toContain('HeroContinueSection[none][loading:false]');
      expect(content).toContain('QuickActions[1][#10B981]');
      expect(content).toContain('SimpleMetrics[#10B981]');
      expect(content).toContain('LearningProgress[25%][1]');
      expect(content).toContain('RevisionOrchestrator[1]');
    });
    it('devrait afficher le loading', function () {
      mockUseProgress.mockReturnValue({
        isLoading: true,
        progress: {}
      });
      var _renderDashboard2 = renderDashboard(),
        getByText = _renderDashboard2.getByText;
      expect(getByText('Chargement du tableau de bord...')).toBeTruthy();
    });
    it('devrait fonctionner sans contexte theme', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Dashboard.default, {})),
        container = _render.container;
      expect(container.firstChild).toBeTruthy();
    });
  });
  describe('Props des composants', function () {
    it('devrait passer les bonnes props √† ModernHeader', function () {
      var _renderDashboard3 = renderDashboard(),
        container = _renderDashboard3.container;
      var content = container.firstChild.props.children.toString();
      expect(content).toContain('ModernHeader[1][#10B981]');
    });
    it('devrait passer les bonnes props √† LearningProgress', function () {
      var _renderDashboard4 = renderDashboard(),
        container = _renderDashboard4.container;
      var content = container.firstChild.props.children.toString();
      expect(content).toContain('LearningProgress[25%][1]');
    });
    it('devrait passer isLoading √† HeroContinueSection', function () {
      var useLastActivity = require('../../../src/hooks/useLastActivity').default;
      useLastActivity.mockReturnValue({
        lastActivity: null,
        isLoading: true,
        reload: jest.fn()
      });
      var _renderDashboard5 = renderDashboard(),
        container = _renderDashboard5.container;
      var content = container.firstChild.props.children.toString();
      expect(content).toContain('HeroContinueSection[none][loading:true]');
    });
  });
  describe('Gestion des niveaux', function () {
    it('devrait utiliser le niveau du hook useDashboardLevel', function () {
      var _require = require('../../../src/screens/Dashboard/hooks/useDashboardLevel'),
        useDashboardLevel = _require.useDashboardLevel;
      useDashboardLevel.mockReturnValue({
        currentLevel: '3',
        handleChangeActiveLevel: jest.fn(),
        levelColor: '#8B5CF6'
      });
      var _renderDashboard6 = renderDashboard(),
        container = _renderDashboard6.container;
      var content = container.firstChild.props.children.toString();
      expect(content).toContain('ModernHeader[3][#8B5CF6]');
      expect(content).toContain('QuickActions[3][#8B5CF6]');
      expect(content).toContain('RevisionOrchestrator[3]');
    });
    it('devrait calculer la progression des niveaux', function () {
      var useRealTimeProgress = require('../../../src/hooks/useRealTimeProgress').default;
      useRealTimeProgress.mockReturnValue({
        getLevelProgress: jest.fn(function (level) {
          var progress = {
            '1': 30,
            '2': 60,
            '3': 90
          };
          return progress[level] || 0;
        }),
        refresh: jest.fn()
      });
      var _renderDashboard7 = renderDashboard(),
        container = _renderDashboard7.container;
      var content = container.firstChild.props.children.toString();
      expect(content).toContain('LearningProgress[30%][1]');
    });
  });
  describe('Gestion des activit√©s', function () {
    it('devrait passer lastActivity √† HeroContinueSection', function () {
      var useLastActivity = require('../../../src/hooks/useLastActivity').default;
      useLastActivity.mockReturnValue({
        lastActivity: {
          type: 'vocabulary',
          level: '2'
        },
        isLoading: false,
        reload: jest.fn()
      });
      var _renderDashboard8 = renderDashboard(),
        container = _renderDashboard8.container;
      var content = container.firstChild.props.children.toString();
      expect(content).toContain('HeroContinueSection[vocabulary][loading:false]');
    });
  });
  describe('Gestion des erreurs', function () {
    it('devrait g√©rer l\'absence de progress', function () {
      mockUseProgress.mockReturnValue({
        isLoading: false
      });
      var _renderDashboard9 = renderDashboard(),
        container = _renderDashboard9.container;
      expect(container.firstChild).toBeTruthy();
    });
    it('devrait g√©rer l\'absence de currentLevel', function () {
      mockUseCurrentLevel.mockReturnValue({});
      var _renderDashboard0 = renderDashboard(),
        container = _renderDashboard0.container;
      expect(container.firstChild).toBeTruthy();
    });
  });
  describe('Couleurs et th√®me', function () {
    it('devrait utiliser les couleurs par d√©faut sans th√®me', function () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Dashboard.default, {})),
        container = _render2.container;
      expect(container.firstChild).toBeTruthy();
    });
    it('devrait appliquer les couleurs du niveau courant', function () {
      var _require2 = require('../../../src/screens/Dashboard/hooks/useDashboardLevel'),
        useDashboardLevel = _require2.useDashboardLevel;
      useDashboardLevel.mockReturnValue({
        currentLevel: '2',
        handleChangeActiveLevel: jest.fn(),
        levelColor: '#3B82F6'
      });
      var _renderDashboard1 = renderDashboard(),
        container = _renderDashboard1.container;
      var content = container.firstChild.props.children.toString();
      expect(content).toContain('#3B82F6');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJMaW5lYXJHcmFkaWVudCIsIl9yZWYiLCJjaGlsZHJlbiIsInJvdXRlciIsInB1c2giLCJqZXN0IiwiZm4iLCJ1c2VQcm9ncmVzcyIsIm1vY2tVc2VQcm9ncmVzcyIsInVzZUN1cnJlbnRMZXZlbCIsIm1vY2tVc2VDdXJyZW50TGV2ZWwiLCJ1c2VEYXNoYm9hcmRMZXZlbCIsImN1cnJlbnRMZXZlbCIsImhhbmRsZUNoYW5nZUFjdGl2ZUxldmVsIiwibGV2ZWxDb2xvciIsInVzZURhc2hib2FyZFN0YXRlIiwicmVmcmVzaGluZyIsIm9uUmVmcmVzaCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwibGFzdEFjdGl2aXR5IiwiaXNMb2FkaW5nIiwicmVsb2FkIiwiZ2V0TGV2ZWxQcm9ncmVzcyIsInJlZnJlc2giLCJfcmVmMiIsImxldmVsIiwiX3JlZjMiLCJ0eXBlIiwiX3JlZjQiLCJhY2NlbnRDb2xvciIsIl9yZWY1IiwiX3JlZjYiLCJnbG9iYWxQcm9ncmVzcyIsIl9yZWY3IiwiX3JlZjgiLCJMQU5HVUFHRV9MRVZFTFMiLCJ0aXRsZSIsImNvbG9yIiwiaWNvbiIsIkVYRVJDSVNFUyIsInZvY2FidWxhcnkiLCJpZCIsInJvdXRlIiwiZ3JhbW1hciIsIkNPTlRBSU5FUl9TQUZFX0VER0VTIiwiTk9fQk9UVE9NIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfRGFzaGJvYXJkIiwiX1RoZW1lQ29udGV4dCIsIl9qc3hSdW50aW1lIiwiX3JlcXVpcmUzIiwiZGVzY3JpYmUiLCJtb2NrVGhlbWUiLCJjb2xvcnMiLCJiYWNrZ3JvdW5kIiwicHJpbWFyeSIsInN1cmZhY2UiLCJ0ZXh0IiwidGV4dFNlY29uZGFyeSIsImRlZmF1bHRNb2NrcyIsIm1vY2tSZXR1cm5WYWx1ZSIsInByb2dyZXNzIiwibGV2ZWwxIiwic2V0Q3VycmVudExldmVsIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJyZW5kZXJEYXNoYm9hcmQiLCJ0aGVtZSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsInJlbmRlciIsImpzeCIsIlRoZW1lQ29udGV4dCIsIlByb3ZpZGVyIiwidmFsdWUiLCJpdCIsIl9yZW5kZXJEYXNoYm9hcmQiLCJjb250YWluZXIiLCJjb250ZW50IiwiZmlyc3RDaGlsZCIsInByb3BzIiwidG9TdHJpbmciLCJleHBlY3QiLCJ0b0NvbnRhaW4iLCJfcmVuZGVyRGFzaGJvYXJkMiIsImdldEJ5VGV4dCIsInRvQmVUcnV0aHkiLCJfcmVuZGVyIiwiX3JlbmRlckRhc2hib2FyZDMiLCJfcmVuZGVyRGFzaGJvYXJkNCIsInVzZUxhc3RBY3Rpdml0eSIsIl9yZW5kZXJEYXNoYm9hcmQ1IiwiX3JlcXVpcmUiLCJfcmVuZGVyRGFzaGJvYXJkNiIsInVzZVJlYWxUaW1lUHJvZ3Jlc3MiLCJfcmVuZGVyRGFzaGJvYXJkNyIsIl9yZW5kZXJEYXNoYm9hcmQ4IiwiX3JlbmRlckRhc2hib2FyZDkiLCJfcmVuZGVyRGFzaGJvYXJkMCIsIl9yZW5kZXIyIiwiX3JlcXVpcmUyIiwiX3JlbmRlckRhc2hib2FyZDEiXSwic291cmNlcyI6WyJEYXNoYm9hcmQudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBfX3Rlc3RzX18vc2NyZWVucy9EYXNoYm9hcmQvRGFzaGJvYXJkLnRlc3QuanNcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgRGFzaGJvYXJkIGZyb20gJy4uLy4uLy4uL3NyYy9zY3JlZW5zL0Rhc2hib2FyZCc7XG5pbXBvcnQgeyBUaGVtZUNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9zcmMvY29udGV4dHMvVGhlbWVDb250ZXh0JztcblxuLy8gTW9jayBkZXMgZMOpcGVuZGFuY2VzXG5qZXN0Lm1vY2soJ2V4cG8tbGluZWFyLWdyYWRpZW50JywgKCkgPT4gKHtcbiAgTGluZWFyR3JhZGllbnQ6ICh7IGNoaWxkcmVuIH0pID0+IGNoaWxkcmVuXG59KSk7XG5cbmplc3QubW9jaygnZXhwby1yb3V0ZXInLCAoKSA9PiAoe1xuICByb3V0ZXI6IHsgcHVzaDogamVzdC5mbigpIH1cbn0pKTtcblxuLy8gTW9jayBkZXMgY29udGV4dGVzXG5jb25zdCBtb2NrVXNlUHJvZ3Jlc3MgPSBqZXN0LmZuKCk7XG5jb25zdCBtb2NrVXNlQ3VycmVudExldmVsID0gamVzdC5mbigpO1xuXG5qZXN0Lm1vY2soJy4uLy4uLy4uL3NyYy9jb250ZXh0cy9Qcm9ncmVzc0NvbnRleHQnLCAoKSA9PiAoe1xuICB1c2VQcm9ncmVzczogbW9ja1VzZVByb2dyZXNzLFxufSkpO1xuXG5qZXN0Lm1vY2soJy4uLy4uLy4uL3NyYy9jb250ZXh0cy9DdXJyZW50TGV2ZWxDb250ZXh0JywgKCkgPT4gKHtcbiAgdXNlQ3VycmVudExldmVsOiBtb2NrVXNlQ3VycmVudExldmVsLFxufSkpO1xuXG4vLyBNb2NrIGRlcyBob29rc1xuamVzdC5tb2NrKCcuLi8uLi8uLi9zcmMvc2NyZWVucy9EYXNoYm9hcmQvaG9va3MvdXNlRGFzaGJvYXJkTGV2ZWwnLCAoKSA9PiAoe1xuICB1c2VEYXNoYm9hcmRMZXZlbDogamVzdC5mbigoKSA9PiAoe1xuICAgIGN1cnJlbnRMZXZlbDogJzEnLFxuICAgIGhhbmRsZUNoYW5nZUFjdGl2ZUxldmVsOiBqZXN0LmZuKCksXG4gICAgbGV2ZWxDb2xvcjogJyMxMEI5ODEnXG4gIH0pKVxufSkpO1xuXG5qZXN0Lm1vY2soJy4uLy4uLy4uL3NyYy9zY3JlZW5zL0Rhc2hib2FyZC9ob29rcy91c2VEYXNoYm9hcmRTdGF0ZScsICgpID0+ICh7XG4gIHVzZURhc2hib2FyZFN0YXRlOiBqZXN0LmZuKCgpID0+ICh7XG4gICAgcmVmcmVzaGluZzogZmFsc2UsXG4gICAgb25SZWZyZXNoOiBqZXN0LmZuKClcbiAgfSkpXG59KSk7XG5cbmplc3QubW9jaygnLi4vLi4vLi4vc3JjL2hvb2tzL3VzZUxhc3RBY3Rpdml0eScsICgpID0+ICh7XG4gIF9fZXNNb2R1bGU6IHRydWUsXG4gIGRlZmF1bHQ6IGplc3QuZm4oKCkgPT4gKHtcbiAgICBsYXN0QWN0aXZpdHk6IG51bGwsXG4gICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICByZWxvYWQ6IGplc3QuZm4oKVxuICB9KSlcbn0pKTtcblxuamVzdC5tb2NrKCcuLi8uLi8uLi9zcmMvaG9va3MvdXNlUmVhbFRpbWVQcm9ncmVzcycsICgpID0+ICh7XG4gIF9fZXNNb2R1bGU6IHRydWUsXG4gIGRlZmF1bHQ6IGplc3QuZm4oKCkgPT4gKHtcbiAgICBnZXRMZXZlbFByb2dyZXNzOiBqZXN0LmZuKCgpID0+IDI1KSxcbiAgICByZWZyZXNoOiBqZXN0LmZuKClcbiAgfSkpXG59KSk7XG5cbi8vIE1vY2sgZGVzIGNvbXBvc2FudHMgKG1pbmltYWxpc3Rlcylcbmplc3QubW9jaygnLi4vLi4vLi4vc3JjL3NjcmVlbnMvRGFzaGJvYXJkL2NvbXBvbmVudHMvTW9kZXJuSGVhZGVyJywgKCkgPT5cbiAgKHsgbGV2ZWwsIGxldmVsQ29sb3IgfSkgPT4gYE1vZGVybkhlYWRlclske2xldmVsfV1bJHtsZXZlbENvbG9yfV1gXG4pO1xuXG5qZXN0Lm1vY2soJy4uLy4uLy4uL3NyYy9zY3JlZW5zL0Rhc2hib2FyZC9jb21wb25lbnRzL0hlcm9Db250aW51ZVNlY3Rpb24nLCAoKSA9PlxuICAoeyBsYXN0QWN0aXZpdHksIGlzTG9hZGluZyB9KSA9PiBcbiAgICBgSGVyb0NvbnRpbnVlU2VjdGlvblske2xhc3RBY3Rpdml0eT8udHlwZSB8fCAnbm9uZSd9XVtsb2FkaW5nOiR7aXNMb2FkaW5nfV1gXG4pO1xuXG5qZXN0Lm1vY2soJy4uLy4uLy4uL3NyYy9zY3JlZW5zL0Rhc2hib2FyZC9jb21wb25lbnRzL1F1aWNrQWN0aW9ucycsICgpID0+XG4gICh7IGN1cnJlbnRMZXZlbCwgYWNjZW50Q29sb3IgfSkgPT4gYFF1aWNrQWN0aW9uc1ske2N1cnJlbnRMZXZlbH1dWyR7YWNjZW50Q29sb3J9XWBcbik7XG5cbmplc3QubW9jaygnLi4vLi4vLi4vc3JjL3NjcmVlbnMvRGFzaGJvYXJkL2NvbXBvbmVudHMvU2ltcGxlTWV0cmljcycsICgpID0+XG4gICh7IGFjY2VudENvbG9yIH0pID0+IGBTaW1wbGVNZXRyaWNzWyR7YWNjZW50Q29sb3J9XWBcbik7XG5cbmplc3QubW9jaygnLi4vLi4vLi4vc3JjL3NjcmVlbnMvRGFzaGJvYXJkL2NvbXBvbmVudHMvTGVhcm5pbmdQcm9ncmVzcycsICgpID0+XG4gICh7IGdsb2JhbFByb2dyZXNzLCBjdXJyZW50TGV2ZWwgfSkgPT4gYExlYXJuaW5nUHJvZ3Jlc3NbJHtnbG9iYWxQcm9ncmVzc30lXVske2N1cnJlbnRMZXZlbH1dYFxuKTtcblxuamVzdC5tb2NrKCcuLi8uLi8uLi9zcmMvc2NyZWVucy9Wb2NhYnVsYXJ5UmV2aXNpb24vUmV2aXNpb25PcmNoZXN0cmF0b3InLCAoKSA9PlxuICAoeyBjdXJyZW50TGV2ZWwgfSkgPT4gYFJldmlzaW9uT3JjaGVzdHJhdG9yWyR7Y3VycmVudExldmVsfV1gXG4pO1xuXG5qZXN0Lm1vY2soJy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2xheW91dC9Db250YWluZXInLCAoKSA9PlxuICAoeyBjaGlsZHJlbiB9KSA9PiBjaGlsZHJlblxuKTtcblxuLy8gTW9jayBkZXMgY29uc3RhbnRlc1xuamVzdC5tb2NrKCcuLi8uLi8uLi9zcmMvdXRpbHMvY29uc3RhbnRzJywgKCkgPT4gKHtcbiAgTEFOR1VBR0VfTEVWRUxTOiB7XG4gICAgJzEnOiB7IHRpdGxlOiAnRMOpYnV0YW50JywgY29sb3I6ICcjMTBCOTgxJywgaWNvbjogJ/CfjLEnIH0sXG4gICAgJzInOiB7IHRpdGxlOiAnw4lsw6ltZW50YWlyZScsIGNvbG9yOiAnIzNCODJGNicsIGljb246ICfwn5OaJyB9LFxuICAgICczJzogeyB0aXRsZTogJ0ludGVybcOpZGlhaXJlJywgY29sb3I6ICcjOEI1Q0Y2JywgaWNvbjogJ/Cfjq8nIH0sXG4gIH0sXG4gIEVYRVJDSVNFUzoge1xuICAgIHZvY2FidWxhcnk6IHsgaWQ6ICd2b2NhYnVsYXJ5Jywgcm91dGU6ICcvdGFicy92b2NhYnVsYXJ5JyB9LFxuICAgIGdyYW1tYXI6IHsgaWQ6ICdncmFtbWFyJywgcm91dGU6ICcvdGFicy9ncmFtbWFyJyB9XG4gIH0sXG4gIENPTlRBSU5FUl9TQUZFX0VER0VTOiB7IE5PX0JPVFRPTTogW10gfVxufSkpO1xuXG5kZXNjcmliZSgnRGFzaGJvYXJkIC0gVGVzdHMgdW5pdGFpcmVzJywgKCkgPT4ge1xuICBjb25zdCBtb2NrVGhlbWUgPSB7XG4gICAgY29sb3JzOiB7XG4gICAgICBiYWNrZ3JvdW5kOiAnI0Y4RkFGQycsXG4gICAgICBwcmltYXJ5OiAnIzNCODJGNicsXG4gICAgICBzdXJmYWNlOiAnI0ZGRkZGRicsXG4gICAgICB0ZXh0OiAnIzFGMjkzNycsXG4gICAgICB0ZXh0U2Vjb25kYXJ5OiAnIzZCNzI4MCdcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgZGVmYXVsdE1vY2tzID0gKCkgPT4ge1xuICAgIG1vY2tVc2VQcm9ncmVzcy5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgIHByb2dyZXNzOiB7IGxldmVsMTogNTAgfVxuICAgIH0pO1xuICAgIFxuICAgIG1vY2tVc2VDdXJyZW50TGV2ZWwubW9ja1JldHVyblZhbHVlKHtcbiAgICAgIHNldEN1cnJlbnRMZXZlbDogamVzdC5mbigpXG4gICAgfSk7XG4gIH07XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gICAgZGVmYXVsdE1vY2tzKCk7XG4gIH0pO1xuXG4gIGNvbnN0IHJlbmRlckRhc2hib2FyZCA9ICh0aGVtZSA9IG1vY2tUaGVtZSkgPT4ge1xuICAgIHJldHVybiByZW5kZXIoXG4gICAgICA8VGhlbWVDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt0aGVtZX0+XG4gICAgICAgIDxEYXNoYm9hcmQgLz5cbiAgICAgIDwvVGhlbWVDb250ZXh0LlByb3ZpZGVyPlxuICAgICk7XG4gIH07XG5cbiAgZGVzY3JpYmUoJ1JlbmR1IGRlIGJhc2UnLCAoKSA9PiB7XG4gICAgaXQoJ2RldnJhaXQgcmVuZHJlIHRvdXMgbGVzIGNvbXBvc2FudHMgcHJpbmNpcGF1eCcsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgY29udGFpbmVyIH0gPSByZW5kZXJEYXNoYm9hcmQoKTtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBjb250YWluZXIuZmlyc3RDaGlsZC5wcm9wcy5jaGlsZHJlbi50b1N0cmluZygpO1xuICAgICAgXG4gICAgICBleHBlY3QoY29udGVudCkudG9Db250YWluKCdNb2Rlcm5IZWFkZXJbMV1bIzEwQjk4MV0nKTtcbiAgICAgIGV4cGVjdChjb250ZW50KS50b0NvbnRhaW4oJ0hlcm9Db250aW51ZVNlY3Rpb25bbm9uZV1bbG9hZGluZzpmYWxzZV0nKTtcbiAgICAgIGV4cGVjdChjb250ZW50KS50b0NvbnRhaW4oJ1F1aWNrQWN0aW9uc1sxXVsjMTBCOTgxXScpO1xuICAgICAgZXhwZWN0KGNvbnRlbnQpLnRvQ29udGFpbignU2ltcGxlTWV0cmljc1sjMTBCOTgxXScpO1xuICAgICAgZXhwZWN0KGNvbnRlbnQpLnRvQ29udGFpbignTGVhcm5pbmdQcm9ncmVzc1syNSVdWzFdJyk7XG4gICAgICBleHBlY3QoY29udGVudCkudG9Db250YWluKCdSZXZpc2lvbk9yY2hlc3RyYXRvclsxXScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldnJhaXQgYWZmaWNoZXIgbGUgbG9hZGluZycsICgpID0+IHtcbiAgICAgIG1vY2tVc2VQcm9ncmVzcy5tb2NrUmV0dXJuVmFsdWUoeyBpc0xvYWRpbmc6IHRydWUsIHByb2dyZXNzOiB7fSB9KTtcbiAgICAgIFxuICAgICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlckRhc2hib2FyZCgpO1xuICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnQ2hhcmdlbWVudCBkdSB0YWJsZWF1IGRlIGJvcmQuLi4nKSkudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldnJhaXQgZm9uY3Rpb25uZXIgc2FucyBjb250ZXh0ZSB0aGVtZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgY29udGFpbmVyIH0gPSByZW5kZXIoPERhc2hib2FyZCAvPik7XG4gICAgICBleHBlY3QoY29udGFpbmVyLmZpcnN0Q2hpbGQpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1Byb3BzIGRlcyBjb21wb3NhbnRzJywgKCkgPT4ge1xuICAgIGl0KCdkZXZyYWl0IHBhc3NlciBsZXMgYm9ubmVzIHByb3BzIMOgIE1vZGVybkhlYWRlcicsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgY29udGFpbmVyIH0gPSByZW5kZXJEYXNoYm9hcmQoKTtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBjb250YWluZXIuZmlyc3RDaGlsZC5wcm9wcy5jaGlsZHJlbi50b1N0cmluZygpO1xuICAgICAgZXhwZWN0KGNvbnRlbnQpLnRvQ29udGFpbignTW9kZXJuSGVhZGVyWzFdWyMxMEI5ODFdJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2cmFpdCBwYXNzZXIgbGVzIGJvbm5lcyBwcm9wcyDDoCBMZWFybmluZ1Byb2dyZXNzJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBjb250YWluZXIgfSA9IHJlbmRlckRhc2hib2FyZCgpO1xuICAgICAgY29uc3QgY29udGVudCA9IGNvbnRhaW5lci5maXJzdENoaWxkLnByb3BzLmNoaWxkcmVuLnRvU3RyaW5nKCk7XG4gICAgICBleHBlY3QoY29udGVudCkudG9Db250YWluKCdMZWFybmluZ1Byb2dyZXNzWzI1JV1bMV0nKTsgLy8gcHJvZ3Jlc3Npb24gZHUgbml2ZWF1IDFcbiAgICB9KTtcblxuICAgIGl0KCdkZXZyYWl0IHBhc3NlciBpc0xvYWRpbmcgw6AgSGVyb0NvbnRpbnVlU2VjdGlvbicsICgpID0+IHtcbiAgICAgIGNvbnN0IHVzZUxhc3RBY3Rpdml0eSA9IHJlcXVpcmUoJy4uLy4uLy4uL3NyYy9ob29rcy91c2VMYXN0QWN0aXZpdHknKS5kZWZhdWx0O1xuICAgICAgdXNlTGFzdEFjdGl2aXR5Lm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICAgIGxhc3RBY3Rpdml0eTogbnVsbCxcbiAgICAgICAgaXNMb2FkaW5nOiB0cnVlLFxuICAgICAgICByZWxvYWQ6IGplc3QuZm4oKVxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHsgY29udGFpbmVyIH0gPSByZW5kZXJEYXNoYm9hcmQoKTtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBjb250YWluZXIuZmlyc3RDaGlsZC5wcm9wcy5jaGlsZHJlbi50b1N0cmluZygpO1xuICAgICAgZXhwZWN0KGNvbnRlbnQpLnRvQ29udGFpbignSGVyb0NvbnRpbnVlU2VjdGlvbltub25lXVtsb2FkaW5nOnRydWVdJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdHZXN0aW9uIGRlcyBuaXZlYXV4JywgKCkgPT4ge1xuICAgIGl0KCdkZXZyYWl0IHV0aWxpc2VyIGxlIG5pdmVhdSBkdSBob29rIHVzZURhc2hib2FyZExldmVsJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyB1c2VEYXNoYm9hcmRMZXZlbCB9ID0gcmVxdWlyZSgnLi4vLi4vLi4vc3JjL3NjcmVlbnMvRGFzaGJvYXJkL2hvb2tzL3VzZURhc2hib2FyZExldmVsJyk7XG4gICAgICB1c2VEYXNoYm9hcmRMZXZlbC5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgICBjdXJyZW50TGV2ZWw6ICczJyxcbiAgICAgICAgaGFuZGxlQ2hhbmdlQWN0aXZlTGV2ZWw6IGplc3QuZm4oKSxcbiAgICAgICAgbGV2ZWxDb2xvcjogJyM4QjVDRjYnXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgeyBjb250YWluZXIgfSA9IHJlbmRlckRhc2hib2FyZCgpO1xuICAgICAgY29uc3QgY29udGVudCA9IGNvbnRhaW5lci5maXJzdENoaWxkLnByb3BzLmNoaWxkcmVuLnRvU3RyaW5nKCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChjb250ZW50KS50b0NvbnRhaW4oJ01vZGVybkhlYWRlclszXVsjOEI1Q0Y2XScpO1xuICAgICAgZXhwZWN0KGNvbnRlbnQpLnRvQ29udGFpbignUXVpY2tBY3Rpb25zWzNdWyM4QjVDRjZdJyk7XG4gICAgICBleHBlY3QoY29udGVudCkudG9Db250YWluKCdSZXZpc2lvbk9yY2hlc3RyYXRvclszXScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldnJhaXQgY2FsY3VsZXIgbGEgcHJvZ3Jlc3Npb24gZGVzIG5pdmVhdXgnLCAoKSA9PiB7XG4gICAgICBjb25zdCB1c2VSZWFsVGltZVByb2dyZXNzID0gcmVxdWlyZSgnLi4vLi4vLi4vc3JjL2hvb2tzL3VzZVJlYWxUaW1lUHJvZ3Jlc3MnKS5kZWZhdWx0O1xuICAgICAgdXNlUmVhbFRpbWVQcm9ncmVzcy5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgICBnZXRMZXZlbFByb2dyZXNzOiBqZXN0LmZuKChsZXZlbCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHByb2dyZXNzID0geyAnMSc6IDMwLCAnMic6IDYwLCAnMyc6IDkwIH07XG4gICAgICAgICAgcmV0dXJuIHByb2dyZXNzW2xldmVsXSB8fCAwO1xuICAgICAgICB9KSxcbiAgICAgICAgcmVmcmVzaDogamVzdC5mbigpXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgeyBjb250YWluZXIgfSA9IHJlbmRlckRhc2hib2FyZCgpO1xuICAgICAgY29uc3QgY29udGVudCA9IGNvbnRhaW5lci5maXJzdENoaWxkLnByb3BzLmNoaWxkcmVuLnRvU3RyaW5nKCk7XG4gICAgICBleHBlY3QoY29udGVudCkudG9Db250YWluKCdMZWFybmluZ1Byb2dyZXNzWzMwJV1bMV0nKTsgLy8gbml2ZWF1IDEgPSAzMCVcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0dlc3Rpb24gZGVzIGFjdGl2aXTDqXMnLCAoKSA9PiB7XG4gICAgaXQoJ2RldnJhaXQgcGFzc2VyIGxhc3RBY3Rpdml0eSDDoCBIZXJvQ29udGludWVTZWN0aW9uJywgKCkgPT4ge1xuICAgICAgY29uc3QgdXNlTGFzdEFjdGl2aXR5ID0gcmVxdWlyZSgnLi4vLi4vLi4vc3JjL2hvb2tzL3VzZUxhc3RBY3Rpdml0eScpLmRlZmF1bHQ7XG4gICAgICB1c2VMYXN0QWN0aXZpdHkubW9ja1JldHVyblZhbHVlKHtcbiAgICAgICAgbGFzdEFjdGl2aXR5OiB7IHR5cGU6ICd2b2NhYnVsYXJ5JywgbGV2ZWw6ICcyJyB9LFxuICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgICByZWxvYWQ6IGplc3QuZm4oKVxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHsgY29udGFpbmVyIH0gPSByZW5kZXJEYXNoYm9hcmQoKTtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBjb250YWluZXIuZmlyc3RDaGlsZC5wcm9wcy5jaGlsZHJlbi50b1N0cmluZygpO1xuICAgICAgZXhwZWN0KGNvbnRlbnQpLnRvQ29udGFpbignSGVyb0NvbnRpbnVlU2VjdGlvblt2b2NhYnVsYXJ5XVtsb2FkaW5nOmZhbHNlXScpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnR2VzdGlvbiBkZXMgZXJyZXVycycsICgpID0+IHtcbiAgICBpdCgnZGV2cmFpdCBnw6lyZXIgbFxcJ2Fic2VuY2UgZGUgcHJvZ3Jlc3MnLCAoKSA9PiB7XG4gICAgICBtb2NrVXNlUHJvZ3Jlc3MubW9ja1JldHVyblZhbHVlKHsgaXNMb2FkaW5nOiBmYWxzZSB9KTtcbiAgICAgIFxuICAgICAgY29uc3QgeyBjb250YWluZXIgfSA9IHJlbmRlckRhc2hib2FyZCgpO1xuICAgICAgZXhwZWN0KGNvbnRhaW5lci5maXJzdENoaWxkKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2cmFpdCBnw6lyZXIgbFxcJ2Fic2VuY2UgZGUgY3VycmVudExldmVsJywgKCkgPT4ge1xuICAgICAgbW9ja1VzZUN1cnJlbnRMZXZlbC5tb2NrUmV0dXJuVmFsdWUoe30pO1xuICAgICAgXG4gICAgICBjb25zdCB7IGNvbnRhaW5lciB9ID0gcmVuZGVyRGFzaGJvYXJkKCk7XG4gICAgICBleHBlY3QoY29udGFpbmVyLmZpcnN0Q2hpbGQpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0NvdWxldXJzIGV0IHRow6htZScsICgpID0+IHtcbiAgICBpdCgnZGV2cmFpdCB1dGlsaXNlciBsZXMgY291bGV1cnMgcGFyIGTDqWZhdXQgc2FucyB0aMOobWUnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGNvbnRhaW5lciB9ID0gcmVuZGVyKDxEYXNoYm9hcmQgLz4pO1xuICAgICAgZXhwZWN0KGNvbnRhaW5lci5maXJzdENoaWxkKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2cmFpdCBhcHBsaXF1ZXIgbGVzIGNvdWxldXJzIGR1IG5pdmVhdSBjb3VyYW50JywgKCkgPT4ge1xuICAgICAgY29uc3QgeyB1c2VEYXNoYm9hcmRMZXZlbCB9ID0gcmVxdWlyZSgnLi4vLi4vLi4vc3JjL3NjcmVlbnMvRGFzaGJvYXJkL2hvb2tzL3VzZURhc2hib2FyZExldmVsJyk7XG4gICAgICB1c2VEYXNoYm9hcmRMZXZlbC5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgICBjdXJyZW50TGV2ZWw6ICcyJyxcbiAgICAgICAgaGFuZGxlQ2hhbmdlQWN0aXZlTGV2ZWw6IGplc3QuZm4oKSxcbiAgICAgICAgbGV2ZWxDb2xvcjogJyMzQjgyRjYnXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgeyBjb250YWluZXIgfSA9IHJlbmRlckRhc2hib2FyZCgpO1xuICAgICAgY29uc3QgY29udGVudCA9IGNvbnRhaW5lci5maXJzdENoaWxkLnByb3BzLmNoaWxkcmVuLnRvU3RyaW5nKCk7XG4gICAgICBleHBlY3QoY29udGVudCkudG9Db250YWluKCcjM0I4MkY2Jyk7XG4gICAgfSk7XG4gIH0pO1xufSk7Il0sIm1hcHBpbmdz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