400b8e94aba1d04e1d086f48a385a5d0
_getJestObj().mock('react-native/Libraries/Settings/Settings', function () {
  return {
    get: jest.fn(function () {
      return 'light';
    }),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn()
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return require('@react-native-async-storage/async-storage/jest/async-storage-mock');
});
_getJestObj().mock('expo-font', function () {
  return {
    useFonts: function useFonts() {
      return [true];
    },
    isLoaded: function isLoaded() {
      return true;
    }
  };
});
_getJestObj().mock('expo-haptics', function () {
  return {
    impactAsync: jest.fn()
  };
});
_getJestObj().mock('expo-modules-core', function () {
  return {
    NativeModulesProxy: {},
    EventEmitter: jest.fn(),
    requireNativeViewManager: jest.fn(function () {
      return {};
    })
  };
});
_getJestObj().mock('expo-linear-gradient', function () {
  var React = require('react');
  var _require = require('react-native'),
    View = _require.View;
  return {
    LinearGradient: function LinearGradient(_ref) {
      var children = _ref.children,
        colors = _ref.colors,
        start = _ref.start,
        end = _ref.end,
        style = _ref.style,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      return (0, _jsxRuntime.jsx)(View, Object.assign({
        style: [style, {
          backgroundColor: colors ? colors[0] : 'transparent'
        }]
      }, props, {
        children: children
      }));
    }
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn(),
      replace: jest.fn(),
      back: jest.fn(),
      canGoBack: jest.fn(function () {
        return true;
      }),
      setParams: jest.fn()
    },
    useRouter: jest.fn(function () {
      return {
        push: jest.fn(),
        replace: jest.fn(),
        back: jest.fn(),
        canGoBack: jest.fn(function () {
          return true;
        }),
        setParams: jest.fn()
      };
    }),
    useLocalSearchParams: jest.fn(function () {
      return {};
    }),
    useGlobalSearchParams: jest.fn(function () {
      return {};
    }),
    useSegments: jest.fn(function () {
      return [];
    }),
    usePathname: jest.fn(function () {
      return '/';
    }),
    Redirect: function Redirect(_ref2) {
      var href = _ref2.href;
      return null;
    },
    Link: function Link(_ref3) {
      var href = _ref3.href,
        children = _ref3.children,
        props = (0, _objectWithoutProperties2.default)(_ref3, _excluded2);
      var React = require('react');
      var _require2 = require('react-native'),
        TouchableOpacity = _require2.TouchableOpacity,
        Text = _require2.Text;
      return React.createElement(TouchableOpacity, props, typeof children === 'string' ? React.createElement(Text, {}, children) : children);
    },
    Stack: {
      Screen: function Screen(_ref4) {
        var children = _ref4.children,
          props = (0, _objectWithoutProperties2.default)(_ref4, _excluded3);
        var React = require('react');
        return React.createElement('div', props, children);
      }
    },
    Tabs: {
      Screen: function Screen(_ref5) {
        var children = _ref5.children,
          props = (0, _objectWithoutProperties2.default)(_ref5, _excluded4);
        var React = require('react');
        return React.createElement('div', props, children);
      }
    }
  };
});
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  var mockAnimatedValue = {
    setValue: jest.fn(),
    addListener: jest.fn(function () {
      return 'mockListenerId';
    }),
    removeListener: jest.fn(),
    removeAllListeners: jest.fn(),
    interpolate: jest.fn(function () {
      return mockAnimatedValue;
    }),
    stopAnimation: jest.fn(),
    resetAnimation: jest.fn(),
    _value: 0,
    _offset: 0,
    __getValue: jest.fn(function () {
      return 0;
    })
  };
  var mockAnimatedTiming = {
    start: jest.fn(function (callback) {
      if (callback) {
        setTimeout(callback, 0, {
          finished: true
        });
      }
    }),
    stop: jest.fn(),
    reset: jest.fn()
  };
  RN.Animated = Object.assign({}, RN.Animated, {
    Value: jest.fn(function () {
      return mockAnimatedValue;
    }),
    ValueXY: jest.fn(function () {
      return {
        x: mockAnimatedValue,
        y: mockAnimatedValue,
        setValue: jest.fn(),
        setOffset: jest.fn(),
        flattenOffset: jest.fn(),
        extractOffset: jest.fn(),
        addListener: jest.fn(function () {
          return 'mockListenerId';
        }),
        removeListener: jest.fn(),
        stopAnimation: jest.fn(),
        resetAnimation: jest.fn(),
        getLayout: jest.fn(function () {
          return {
            left: mockAnimatedValue,
            top: mockAnimatedValue
          };
        }),
        getTranslateTransform: jest.fn(function () {
          return [{
            translateX: mockAnimatedValue
          }, {
            translateY: mockAnimatedValue
          }];
        })
      };
    }),
    timing: jest.fn(function () {
      return {
        start: jest.fn(function (callback) {
          if (callback) callback({
            finished: true
          });
        }),
        stop: jest.fn(),
        reset: jest.fn()
      };
    }),
    spring: jest.fn(function () {
      return {
        start: jest.fn(function (callback) {
          if (callback) callback({
            finished: true
          });
        }),
        stop: jest.fn(),
        reset: jest.fn()
      };
    }),
    decay: jest.fn(function () {
      return mockAnimatedTiming;
    }),
    sequence: jest.fn(function (animations) {
      return {
        start: jest.fn(function (callback) {
          if (callback) callback({
            finished: true
          });
        }),
        stop: jest.fn(),
        reset: jest.fn()
      };
    }),
    parallel: jest.fn(function (animations) {
      return {
        start: jest.fn(function (callback) {
          if (callback) callback({
            finished: true
          });
        }),
        stop: jest.fn(),
        reset: jest.fn()
      };
    }),
    stagger: jest.fn(function (time, animations) {
      return {
        start: jest.fn(function (callback) {
          if (callback) setTimeout(callback, 0, {
            finished: true
          });
        }),
        stop: jest.fn(),
        reset: jest.fn()
      };
    }),
    delay: jest.fn(function (time) {
      return {
        start: jest.fn(function (callback) {
          if (callback) setTimeout(callback, 0, {
            finished: true
          });
        }),
        stop: jest.fn(),
        reset: jest.fn()
      };
    }),
    loop: jest.fn(function (animation) {
      return {
        start: jest.fn(function (callback) {
          if (callback) setTimeout(callback, 0, {
            finished: true
          });
        }),
        stop: jest.fn(),
        reset: jest.fn()
      };
    }),
    View: RN.Animated.View,
    Text: RN.Animated.Text,
    ScrollView: RN.Animated.ScrollView,
    Image: RN.Animated.Image,
    Easing: {
      linear: jest.fn(function (t) {
        return t;
      }),
      ease: jest.fn(function (t) {
        return t;
      }),
      quad: jest.fn(function (t) {
        return t * t;
      }),
      cubic: jest.fn(function (t) {
        return t * t * t;
      }),
      poly: jest.fn(function (n) {
        return function (t) {
          return Math.pow(t, n);
        };
      }),
      sin: jest.fn(function (t) {
        return 1 - Math.cos(t * Math.PI / 2);
      }),
      circle: jest.fn(function (t) {
        return 1 - Math.sqrt(1 - t * t);
      }),
      exp: jest.fn(function (t) {
        return Math.pow(2, 10 * (t - 1));
      }),
      elastic: jest.fn(function (bounciness) {
        return function (t) {
          return t;
        };
      }),
      back: jest.fn(function (s) {
        return function (t) {
          return t;
        };
      }),
      bounce: jest.fn(function (t) {
        return t;
      }),
      bezier: jest.fn(function (x1, y1, x2, y2) {
        return function (t) {
          return t;
        };
      }),
      in: jest.fn(function (easing) {
        return easing;
      }),
      out: jest.fn(function (easing) {
        return function (t) {
          return 1 - easing(1 - t);
        };
      }),
      inOut: jest.fn(function (easing) {
        return function (t) {
          return t < 0.5 ? easing(t * 2) / 2 : (2 - easing((1 - t) * 2)) / 2;
        };
      })
    },
    add: jest.fn(function (a, b) {
      return mockAnimatedValue;
    }),
    subtract: jest.fn(function (a, b) {
      return mockAnimatedValue;
    }),
    multiply: jest.fn(function (a, b) {
      return mockAnimatedValue;
    }),
    divide: jest.fn(function (a, b) {
      return mockAnimatedValue;
    }),
    modulo: jest.fn(function (a, modulus) {
      return mockAnimatedValue;
    }),
    diffClamp: jest.fn(function (a, min, max) {
      return mockAnimatedValue;
    }),
    event: jest.fn(function () {
      return jest.fn();
    }),
    forkEvent: jest.fn(function () {
      return jest.fn();
    }),
    unforkEvent: jest.fn()
  });
  return RN;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "colors", "start", "end", "style"],
  _excluded2 = ["href", "children"],
  _excluded3 = ["children"],
  _excluded4 = ["children"];
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
_reactNative.NativeModules.SettingsManager = _reactNative.NativeModules.SettingsManager || {
  settings: {
    AppleLocale: 'en_US'
  }
};
if (typeof setImmediate === 'undefined') {
  global.setImmediate = function (fn) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return setTimeout.apply(void 0, [fn, 0].concat(args));
  };
}
if (typeof clearImmediate === 'undefined') {
  global.clearImmediate = function (id) {
    return clearTimeout(id);
  };
}
var originalConsole = Object.assign({}, console);
global.console = Object.assign({}, console, {
  error: jest.fn(function (message) {
    if (typeof message === 'string' && message.includes('Warning: An update to') && message.includes('was not wrapped in act')) {
      return;
    }
    originalConsole.error(message);
  }),
  warn: jest.fn(function (message) {
    if (typeof message === 'string' && message.includes('Warning: An update to') && message.includes('was not wrapped in act')) {
      return;
    }
    originalConsole.warn(message);
  })
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,