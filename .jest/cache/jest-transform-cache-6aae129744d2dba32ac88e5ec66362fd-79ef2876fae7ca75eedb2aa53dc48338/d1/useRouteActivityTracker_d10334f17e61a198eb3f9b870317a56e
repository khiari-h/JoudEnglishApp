f9b10fa89eeb61c509d725408130bf60
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _expoRouter = require("expo-router");
var _useActivityMetrics2 = _interopRequireDefault(require("./useActivityMetrics"));
var useRouteActivityTracker = function useRouteActivityTracker() {
  var segments = (0, _expoRouter.useSegments)();
  var pathname = (0, _expoRouter.usePathname)();
  var _useActivityMetrics = (0, _useActivityMetrics2.default)(),
    startSession = _useActivityMetrics.startSession,
    endSession = _useActivityMetrics.endSession,
    updateStreak = _useActivityMetrics.updateStreak;
  var currentSessionRef = (0, _react.useRef)(null);
  var isTrackingRef = (0, _react.useRef)(false);
  var lastPathnameRef = (0, _react.useRef)(null);
  (0, _react.useEffect)(function () {
    if (lastPathnameRef.current === pathname) {
      return;
    }
    lastPathnameRef.current = pathname;
    var isExercise = segments.some(function (segment) {
      return segment.includes('Exercise') || segment.includes('exercise') || segment.includes('Assessment') || segment.includes('assessment');
    });
    if (isExercise) {
      var exerciseType = segments[segments.length - 1];
      if (!isTrackingRef.current || currentSessionRef.current !== exerciseType) {
        if (isTrackingRef.current) {
          try {
            endSession();
            updateStreak();
          } catch (error) {
            console.warn('Erreur lors de la fin de session:', error);
          }
        }
        try {
          isTrackingRef.current = true;
          currentSessionRef.current = exerciseType;
          startSession(exerciseType);
        } catch (error) {
          console.warn('Erreur lors du d√©marrage de session:', error);
          isTrackingRef.current = false;
          currentSessionRef.current = null;
        }
      }
    } else {
      if (isTrackingRef.current) {
        try {
          isTrackingRef.current = false;
          currentSessionRef.current = null;
          endSession();
          updateStreak();
        } catch (error) {
          console.warn('Erreur lors de la fin de session:', error);
        }
      }
    }
    return function () {
      if (isTrackingRef.current) {
        try {
          isTrackingRef.current = false;
          currentSessionRef.current = null;
          endSession();
        } catch (error) {
          console.warn('Erreur lors du cleanup:', error);
        }
      }
    };
  }, [segments, pathname]);
  (0, _react.useEffect)(function () {
    return function () {
      if (isTrackingRef.current) {
        try {
          endSession();
        } catch (error) {
          console.warn('Erreur lors du cleanup final:', error);
        }
      }
    };
  }, []);
};
var _default = exports.default = useRouteActivityTracker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,