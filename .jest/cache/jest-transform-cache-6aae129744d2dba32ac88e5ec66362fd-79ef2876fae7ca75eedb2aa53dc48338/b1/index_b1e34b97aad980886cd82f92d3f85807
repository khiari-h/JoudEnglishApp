8354edeca2c2197e38ab382df5287059
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _style = _interopRequireDefault(require("./style"));
var _useModalAnimation = _interopRequireDefault(require("./useModalAnimation"));
var _ModalBackdrop = _interopRequireDefault(require("./ModalBackdrop"));
var _ModalHeader = _interopRequireDefault(require("./ModalHeader"));
var _ModalBody = _interopRequireDefault(require("./ModalBody"));
var _ModalFooter = _interopRequireDefault(require("./ModalFooter"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var Modal = function Modal(_ref) {
  var _ref$visible = _ref.visible,
    visible = _ref$visible === void 0 ? false : _ref$visible,
    onClose = _ref.onClose,
    title = _ref.title,
    children = _ref.children,
    footer = _ref.footer,
    _ref$position = _ref.position,
    position = _ref$position === void 0 ? "center" : _ref$position,
    _ref$animationType = _ref.animationType,
    animationType = _ref$animationType === void 0 ? "fade" : _ref$animationType,
    _ref$closeOnBackdropP = _ref.closeOnBackdropPress,
    closeOnBackdropPress = _ref$closeOnBackdropP === void 0 ? true : _ref$closeOnBackdropP,
    _ref$showCloseButton = _ref.showCloseButton,
    showCloseButton = _ref$showCloseButton === void 0 ? true : _ref$showCloseButton,
    width = _ref.width,
    height = _ref.height,
    maxHeight = _ref.maxHeight,
    _ref$fullScreen = _ref.fullScreen,
    fullScreen = _ref$fullScreen === void 0 ? false : _ref$fullScreen,
    _ref$transparent = _ref.transparent,
    transparent = _ref$transparent === void 0 ? true : _ref$transparent,
    _ref$backdropColor = _ref.backdropColor,
    backdropColor = _ref$backdropColor === void 0 ? "rgba(0, 0, 0, 0.5)" : _ref$backdropColor,
    contentContainerStyle = _ref.contentContainerStyle,
    headerStyle = _ref.headerStyle,
    footerStyle = _ref.footerStyle,
    bodyStyle = _ref.bodyStyle,
    _ref$avoidKeyboard = _ref.avoidKeyboard,
    avoidKeyboard = _ref$avoidKeyboard === void 0 ? true : _ref$avoidKeyboard,
    _ref$scrollable = _ref.scrollable,
    scrollable = _ref$scrollable === void 0 ? false : _ref$scrollable,
    customAnimation = _ref.customAnimation;
  var customStyle = (0, _useModalAnimation.default)({
    visible: visible,
    animationType: animationType,
    position: position,
    customAnimation: customAnimation
  });
  var handleBackdropPress = (0, _react.useCallback)(function () {
    if (closeOnBackdropPress && onClose) {
      onClose();
    }
  }, [closeOnBackdropPress, onClose]);
  var getModalWidth = function getModalWidth() {
    if (fullScreen) return "100%";
    if (width) return width;
    var screenWidth = _reactNative.Dimensions.get("window").width;
    switch (position) {
      case "bottom":
      case "top":
        return "100%";
      case "center":
      default:
        return Math.min(screenWidth - 48, 480);
    }
  };
  var getModalHeight = function getModalHeight() {
    if (fullScreen) return "100%";
    if (height) return height;
    return "auto";
  };
  var getPositionStyle = function getPositionStyle() {
    switch (position) {
      case "bottom":
        return _style.default.bottomPosition;
      case "top":
        return _style.default.topPosition;
      case "center":
      default:
        return _style.default.centerPosition;
    }
  };
  var getCustomAnimationStyle = function getCustomAnimationStyle() {
    return customStyle;
  };
  var renderModalContent = function renderModalContent() {
    var modalContent = (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
      style: [_style.default.contentContainer, getPositionStyle(), {
        width: getModalWidth(),
        height: getModalHeight(),
        maxHeight: maxHeight
      }, animationType === "custom" && getCustomAnimationStyle(), contentContainerStyle],
      children: [(0, _jsxRuntime.jsx)(_ModalHeader.default, {
        title: title,
        showCloseButton: showCloseButton,
        onClose: onClose,
        headerStyle: headerStyle
      }), (0, _jsxRuntime.jsx)(_ModalBody.default, {
        scrollable: scrollable,
        bodyStyle: bodyStyle,
        children: children
      }), (0, _jsxRuntime.jsx)(_ModalFooter.default, {
        footer: footer,
        footerStyle: footerStyle
      })]
    });
    return avoidKeyboard ? (0, _jsxRuntime.jsx)(_reactNative.KeyboardAvoidingView, {
      behavior: _reactNative.Platform.OS === "ios" ? "padding" : "height",
      style: _style.default.keyboardAvoidingView,
      children: modalContent
    }) : modalContent;
  };
  return (0, _jsxRuntime.jsx)(_reactNative.Modal, {
    visible: visible,
    transparent: transparent,
    onRequestClose: onClose,
    animationType: animationType === "custom" ? "none" : animationType,
    children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [_style.default.modalContainer, {
        backgroundColor: backdropColor
      }],
      children: [(0, _jsxRuntime.jsx)(_ModalBackdrop.default, {
        backdropColor: backdropColor,
        onPress: handleBackdropPress
      }), renderModalContent()]
    })
  });
};
var _default = exports.default = Modal;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,