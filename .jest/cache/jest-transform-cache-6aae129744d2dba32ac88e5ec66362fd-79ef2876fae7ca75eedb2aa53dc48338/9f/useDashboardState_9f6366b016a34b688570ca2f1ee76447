22c31fcc0973db315d1d55f48b3256d2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDashboardState = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var useDashboardState = exports.useDashboardState = function useDashboardState(loadLastActivities) {
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    showLevelProgress = _useState2[0],
    setShowLevelProgress = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    refreshing = _useState4[0],
    setRefreshing = _useState4[1];
  var _useState5 = (0, _react.useState)("home"),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    activeTab = _useState6[0],
    setActiveTab = _useState6[1];
  var onRefresh = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    setRefreshing(true);
    try {
      yield loadLastActivities();
    } catch (error) {
      console.warn('Error refreshing dashboard activities:', error);
    } finally {
      setRefreshing(false);
    }
  }), [loadLastActivities]);
  var openLevelProgressModal = (0, _react.useCallback)(function () {
    setShowLevelProgress(true);
  }, []);
  var closeLevelProgressModal = (0, _react.useCallback)(function () {
    setShowLevelProgress(false);
  }, []);
  return {
    showLevelProgress: showLevelProgress,
    setShowLevelProgress: setShowLevelProgress,
    openLevelProgressModal: openLevelProgressModal,
    closeLevelProgressModal: closeLevelProgressModal,
    refreshing: refreshing,
    activeTab: activeTab,
    setActiveTab: setActiveTab,
    onRefresh: onRefresh
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwidXNlRGFzaGJvYXJkU3RhdGUiLCJleHBvcnRzIiwibG9hZExhc3RBY3Rpdml0aWVzIiwiX3VzZVN0YXRlIiwidXNlU3RhdGUiLCJfdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkyIiwiZGVmYXVsdCIsInNob3dMZXZlbFByb2dyZXNzIiwic2V0U2hvd0xldmVsUHJvZ3Jlc3MiLCJfdXNlU3RhdGUzIiwiX3VzZVN0YXRlNCIsInJlZnJlc2hpbmciLCJzZXRSZWZyZXNoaW5nIiwiX3VzZVN0YXRlNSIsIl91c2VTdGF0ZTYiLCJhY3RpdmVUYWIiLCJzZXRBY3RpdmVUYWIiLCJvblJlZnJlc2giLCJ1c2VDYWxsYmFjayIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImVycm9yIiwiY29uc29sZSIsIndhcm4iLCJvcGVuTGV2ZWxQcm9ncmVzc01vZGFsIiwiY2xvc2VMZXZlbFByb2dyZXNzTW9kYWwiXSwic291cmNlcyI6WyJ1c2VEYXNoYm9hcmRTdGF0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvc2NyZWVucy9EYXNoYm9hcmQvaG9va3MvdXNlRGFzaGJvYXJkU3RhdGUuanMgLSBWRVJTSU9OIENPUlJJR8OJRVxuXG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2sgfSBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGNvbnN0IHVzZURhc2hib2FyZFN0YXRlID0gKGxvYWRMYXN0QWN0aXZpdGllcykgPT4ge1xuICBjb25zdCBbc2hvd0xldmVsUHJvZ3Jlc3MsIHNldFNob3dMZXZlbFByb2dyZXNzXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3JlZnJlc2hpbmcsIHNldFJlZnJlc2hpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbYWN0aXZlVGFiLCBzZXRBY3RpdmVUYWJdID0gdXNlU3RhdGUoXCJob21lXCIpO1xuXG4gIC8vIEfDqXJlciBsZSBwdWxsLXRvLXJlZnJlc2ggb3B0aW1pc8OpXG4gIGNvbnN0IG9uUmVmcmVzaCA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBzZXRSZWZyZXNoaW5nKHRydWUpO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBsb2FkTGFzdEFjdGl2aXRpZXMoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8g4pyFIEdlc3Rpb24gZCdlcnJldXIgYXBwcm9wcmnDqWVcbiAgICAgIGNvbnNvbGUud2FybignRXJyb3IgcmVmcmVzaGluZyBkYXNoYm9hcmQgYWN0aXZpdGllczonLCBlcnJvcik7XG4gICAgICAvLyBGYWxsYmFjazogY29udGludWVyIG3Dqm1lIHNpIGxlIHJlZnJlc2ggw6ljaG91ZVxuICAgIH0gZmluYWxseSB7XG4gICAgICBzZXRSZWZyZXNoaW5nKGZhbHNlKTtcbiAgICB9XG4gIH0sIFtsb2FkTGFzdEFjdGl2aXRpZXNdKTtcblxuICAvLyBHZXN0aW9ubmFpcmVzIHBvdXIgbGEgbW9kYWwgZGUgcHJvZ3Jlc3Npb25cbiAgY29uc3Qgb3BlbkxldmVsUHJvZ3Jlc3NNb2RhbCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZXRTaG93TGV2ZWxQcm9ncmVzcyh0cnVlKTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IGNsb3NlTGV2ZWxQcm9ncmVzc01vZGFsID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldFNob3dMZXZlbFByb2dyZXNzKGZhbHNlKTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiB7XG4gICAgc2hvd0xldmVsUHJvZ3Jlc3MsXG4gICAgc2V0U2hvd0xldmVsUHJvZ3Jlc3MsXG4gICAgb3BlbkxldmVsUHJvZ3Jlc3NNb2RhbCxcbiAgICBjbG9zZUxldmVsUHJvZ3Jlc3NNb2RhbCxcbiAgICByZWZyZXNoaW5nLFxuICAgIGFjdGl2ZVRhYixcbiAgICBzZXRBY3RpdmVUYWIsXG4gICAgb25SZWZyZXNoLFxuICB9O1xufTtcblxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUEsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBRU8sSUFBTUMsaUJBQWlCLEdBQUFDLE9BQUEsQ0FBQUQsaUJBQUEsR0FBRyxTQUFwQkEsaUJBQWlCQSxDQUFJRSxrQkFBa0IsRUFBSztFQUN2RCxJQUFBQyxTQUFBLEdBQWtELElBQUFDLGVBQVEsRUFBQyxLQUFLLENBQUM7SUFBQUMsVUFBQSxPQUFBQyxlQUFBLENBQUFDLE9BQUEsRUFBQUosU0FBQTtJQUExREssaUJBQWlCLEdBQUFILFVBQUE7SUFBRUksb0JBQW9CLEdBQUFKLFVBQUE7RUFDOUMsSUFBQUssVUFBQSxHQUFvQyxJQUFBTixlQUFRLEVBQUMsS0FBSyxDQUFDO0lBQUFPLFVBQUEsT0FBQUwsZUFBQSxDQUFBQyxPQUFBLEVBQUFHLFVBQUE7SUFBNUNFLFVBQVUsR0FBQUQsVUFBQTtJQUFFRSxhQUFhLEdBQUFGLFVBQUE7RUFDaEMsSUFBQUcsVUFBQSxHQUFrQyxJQUFBVixlQUFRLEVBQUMsTUFBTSxDQUFDO0lBQUFXLFVBQUEsT0FBQVQsZUFBQSxDQUFBQyxPQUFBLEVBQUFPLFVBQUE7SUFBM0NFLFNBQVMsR0FBQUQsVUFBQTtJQUFFRSxZQUFZLEdBQUFGLFVBQUE7RUFHOUIsSUFBTUcsU0FBUyxHQUFHLElBQUFDLGtCQUFXLE1BQUFDLGtCQUFBLENBQUFiLE9BQUEsRUFBQyxhQUFZO0lBQ3hDTSxhQUFhLENBQUMsSUFBSSxDQUFDO0lBQ25CLElBQUk7TUFDRixNQUFNWCxrQkFBa0IsQ0FBQyxDQUFDO0lBQzVCLENBQUMsQ0FBQyxPQUFPbUIsS0FBSyxFQUFFO01BRWRDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLHdDQUF3QyxFQUFFRixLQUFLLENBQUM7SUFFL0QsQ0FBQyxTQUFTO01BQ1JSLGFBQWEsQ0FBQyxLQUFLLENBQUM7SUFDdEI7RUFDRixDQUFDLEdBQUUsQ0FBQ1gsa0JBQWtCLENBQUMsQ0FBQztFQUd4QixJQUFNc0Isc0JBQXNCLEdBQUcsSUFBQUwsa0JBQVcsRUFBQyxZQUFNO0lBQy9DVixvQkFBb0IsQ0FBQyxJQUFJLENBQUM7RUFDNUIsQ0FBQyxFQUFFLEVBQUUsQ0FBQztFQUVOLElBQU1nQix1QkFBdUIsR0FBRyxJQUFBTixrQkFBVyxFQUFDLFlBQU07SUFDaERWLG9CQUFvQixDQUFDLEtBQUssQ0FBQztFQUM3QixDQUFDLEVBQUUsRUFBRSxDQUFDO0VBRU4sT0FBTztJQUNMRCxpQkFBaUIsRUFBakJBLGlCQUFpQjtJQUNqQkMsb0JBQW9CLEVBQXBCQSxvQkFBb0I7SUFDcEJlLHNCQUFzQixFQUF0QkEsc0JBQXNCO0lBQ3RCQyx1QkFBdUIsRUFBdkJBLHVCQUF1QjtJQUN2QmIsVUFBVSxFQUFWQSxVQUFVO0lBQ1ZJLFNBQVMsRUFBVEEsU0FBUztJQUNUQyxZQUFZLEVBQVpBLFlBQVk7SUFDWkMsU0FBUyxFQUFUQTtFQUNGLENBQUM7QUFDSCxDQUFDIiwiaWdub3JlTGlzdCI6W119