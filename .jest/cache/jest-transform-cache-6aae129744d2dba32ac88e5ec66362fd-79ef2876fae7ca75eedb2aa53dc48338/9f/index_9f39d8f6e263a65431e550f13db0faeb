a2c24e06cf7e9227d1964e77c6719538
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _native = require("@react-navigation/native");
var _expoRouter = require("expo-router");
var _Container = _interopRequireWildcard(require("../../../components/layout/Container"));
var _PhrasesHeader = _interopRequireDefault(require("./PhrasesHeader"));
var _PhrasesCategorySelector = _interopRequireDefault(require("./PhrasesCategorySelector"));
var _PhrasesProgress = _interopRequireDefault(require("./PhrasesProgress"));
var _PhraseCard = _interopRequireDefault(require("./PhraseCard"));
var _PhrasesNavigation = _interopRequireDefault(require("./PhrasesNavigation"));
var _usePhrases2 = _interopRequireDefault(require("./hooks/usePhrases"));
var _useLastActivity2 = _interopRequireDefault(require("../../../hooks/useLastActivity"));
var _phrasesDataHelper = require("../../../utils/phrases/phrasesDataHelper");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var PhrasesExercise = function PhrasesExercise(_ref) {
  var route = _ref.route;
  var navigation = (0, _native.useNavigation)();
  var _ref2 = (route == null ? void 0 : route.params) || {},
    _ref2$level = _ref2.level,
    level = _ref2$level === void 0 ? "A1" : _ref2$level;
  var styles = (0, _style.default)();
  var _useLastActivity = (0, _useLastActivity2.default)(),
    saveActivity = _useLastActivity.saveActivity;
  var levelColor = (0, _phrasesDataHelper.getLevelColor)(level);
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    phrasesData = _useState2[0],
    setPhrasesData = _useState2[1];
  (0, _react.useEffect)(function () {
    var isMounted = true;
    var load = function () {
      var _ref3 = (0, _asyncToGenerator2.default)(function* () {
        if (process.env.JEST_WORKER_ID) {
          var _data = (0, _phrasesDataHelper.getPhrasesData)(level);
          if (isMounted) setPhrasesData(_data);
          return;
        }
        var data = yield (0, _phrasesDataHelper.loadPhrasesData)(level);
        if (isMounted) setPhrasesData(data);
      });
      return function load() {
        return _ref3.apply(this, arguments);
      };
    }();
    load();
    return function () {
      isMounted = false;
    };
  }, [level]);
  var _usePhrases = (0, _usePhrases2.default)(phrasesData, level),
    categoryIndex = _usePhrases.categoryIndex,
    phraseIndex = _usePhrases.phraseIndex,
    showTranslation = _usePhrases.showTranslation,
    completedPhrases = _usePhrases.completedPhrases,
    loaded = _usePhrases.loaded,
    showDetailedProgress = _usePhrases.showDetailedProgress,
    currentPhrase = _usePhrases.currentPhrase,
    currentPhrases = _usePhrases.currentPhrases,
    totalPhrasesInCategory = _usePhrases.totalPhrasesInCategory,
    hasValidData = _usePhrases.hasValidData,
    changeCategory = _usePhrases.changeCategory,
    toggleTranslation = _usePhrases.toggleTranslation,
    toggleDetailedProgress = _usePhrases.toggleDetailedProgress,
    handleNext = _usePhrases.handleNext,
    handlePrevious = _usePhrases.handlePrevious,
    canGoToPrevious = _usePhrases.canGoToPrevious,
    isLastPhraseInCategory = _usePhrases.isLastPhraseInCategory,
    stats = _usePhrases.stats,
    display = _usePhrases.display;
  (0, _react.useEffect)(function () {
    if (loaded && hasValidData && currentPhrase && currentPhrases.length > 0 && phraseIndex < 100) {
      var _phrasesData$categori, _phrasesData$categori2;
      var currentCategory = phrasesData == null || (_phrasesData$categori = phrasesData.categories) == null ? void 0 : _phrasesData$categori[categoryIndex];
      var activityData = {
        title: "Expressions",
        level: level,
        type: "phrases",
        metadata: {
          phrase: phraseIndex,
          totalPhrases: totalPhrasesInCategory || currentPhrases.length,
          category: (currentCategory == null ? void 0 : currentCategory.name) || "Général",
          categoryIndex: categoryIndex,
          totalCategories: (phrasesData == null || (_phrasesData$categori2 = phrasesData.categories) == null ? void 0 : _phrasesData$categori2.length) || 1
        }
      };
      saveActivity(activityData);
    }
  }, [loaded, hasValidData, currentPhrase, currentPhrases.length, phraseIndex, totalPhrasesInCategory, categoryIndex, level, phrasesData]);
  var handleBackPress = (0, _react.useCallback)(function () {
    _expoRouter.router.push({
      pathname: "/tabs/exerciseSelection",
      params: {
        level: level
      }
    });
  }, [level]);
  var handleCategoryChange = (0, _react.useCallback)(function (index) {
    return changeCategory(index);
  }, [changeCategory]);
  var handleToggleProgressDetails = (0, _react.useCallback)(function () {
    return toggleDetailedProgress();
  }, [toggleDetailedProgress]);
  var handleNextPhrase = (0, _react.useCallback)(function () {
    var result = handleNext();
    if (result.completed) {
      navigation.goBack();
    }
  }, [handleNext, navigation]);
  var handlePreviousPhrase = (0, _react.useCallback)(function () {
    return handlePrevious();
  }, [handlePrevious]);
  if (!loaded || !hasValidData) {
    return (0, _jsxRuntime.jsx)(_Container.default, {
      safeArea: true,
      safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
      backgroundColor: "#f8fafc",
      statusBarStyle: "dark-content",
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.loadingContainer,
        children: (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
          size: "large",
          color: levelColor,
          testID: "activity-indicator"
        })
      })
    });
  }
  if (currentPhrases.length === 0) {
    return (0, _jsxRuntime.jsxs)(_Container.default, {
      safeArea: true,
      safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
      backgroundColor: "#f8fafc",
      statusBarStyle: "dark-content",
      children: [(0, _jsxRuntime.jsx)(_PhrasesHeader.default, {
        level: level,
        onBackPress: handleBackPress
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.emptyStateContainer,
        children: (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
          size: "large",
          color: levelColor,
          testID: "activity-indicator"
        })
      })]
    });
  }
  return (0, _jsxRuntime.jsxs)(_Container.default, {
    safeArea: true,
    safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
    withScrollView: true,
    backgroundColor: "#f8fafc",
    statusBarStyle: "dark-content",
    withPadding: false,
    scrollViewProps: {
      showsVerticalScrollIndicator: false,
      contentContainerStyle: styles.scrollContent
    },
    children: [(0, _jsxRuntime.jsx)(_PhrasesHeader.default, {
      level: level,
      onBackPress: handleBackPress
    }), (0, _jsxRuntime.jsx)(_PhrasesProgress.default, {
      progress: stats.completionProgress,
      currentPhrase: phraseIndex + 1,
      totalPhrases: totalPhrasesInCategory,
      completedCount: stats.completedPhrasesCount,
      levelColor: levelColor,
      phrasesData: phrasesData,
      completedPhrases: completedPhrases,
      expanded: showDetailedProgress,
      onToggleExpand: handleToggleProgressDetails,
      onCategoryPress: handleCategoryChange
    }), (0, _jsxRuntime.jsx)(_PhrasesCategorySelector.default, {
      categories: display.categories,
      selectedIndex: categoryIndex,
      onSelectCategory: handleCategoryChange,
      levelColor: levelColor
    }), (0, _jsxRuntime.jsx)(_PhraseCard.default, {
      phraseData: currentPhrase,
      showTranslation: showTranslation,
      onToggleTranslation: toggleTranslation,
      levelColor: levelColor
    }), (0, _jsxRuntime.jsx)(_PhrasesNavigation.default, {
      onNext: handleNextPhrase,
      onPrevious: handlePreviousPhrase,
      disablePrevious: !canGoToPrevious,
      disableNext: false,
      isLast: isLastPhraseInCategory,
      levelColor: levelColor
    })]
  });
};
var _default = exports.default = PhrasesExercise;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,