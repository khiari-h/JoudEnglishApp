1b3bbddb658f061c0adbf1aa9606db08
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _native = require("@react-navigation/native");
var _expoRouter = require("expo-router");
var _Container = _interopRequireWildcard(require("../../../components/layout/Container"));
var _GrammarHeader = _interopRequireDefault(require("./GrammarHeader"));
var _GrammarRuleSelector = _interopRequireDefault(require("./GrammarRuleSelector"));
var _GrammarProgress = _interopRequireDefault(require("./GrammarProgress"));
var _GrammarRuleContent = _interopRequireDefault(require("./GrammarRuleContent"));
var _GrammarExerciceRenderer = _interopRequireDefault(require("./GrammarExerciceRenderer"));
var _GrammarFeedback = _interopRequireDefault(require("./GrammarFeedback"));
var _GrammarNavigation = _interopRequireDefault(require("./GrammarNavigation"));
var _useGrammar2 = _interopRequireDefault(require("./hooks/useGrammar"));
var _grammarDataHelper = require("../../../utils/grammar/grammarDataHelper");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var GrammarExercise = function GrammarExercise(_ref) {
  var route = _ref.route;
  var navigation = (0, _native.useNavigation)();
  var _ref2 = (route == null ? void 0 : route.params) || {},
    _ref2$level = _ref2.level,
    level = _ref2$level === void 0 ? "A1" : _ref2$level;
  var styles = (0, _style.default)();
  var levelColor = (0, _react.useMemo)(function () {
    return (0, _grammarDataHelper.getLevelColor)(level);
  }, [level]);
  var grammarData = (0, _react.useMemo)(function () {
    return (0, _grammarDataHelper.getGrammarData)(level);
  }, [level]);
  var _useGrammar = (0, _useGrammar2.default)(grammarData, level),
    ruleIndex = _useGrammar.ruleIndex,
    exerciseIndex = _useGrammar.exerciseIndex,
    selectedOption = _useGrammar.selectedOption,
    setSelectedOption = _useGrammar.setSelectedOption,
    inputText = _useGrammar.inputText,
    setInputText = _useGrammar.setInputText,
    showFeedback = _useGrammar.showFeedback,
    isCorrect = _useGrammar.isCorrect,
    attempts = _useGrammar.attempts,
    completedExercises = _useGrammar.completedExercises,
    loaded = _useGrammar.loaded,
    showDetailedProgress = _useGrammar.showDetailedProgress,
    currentRule = _useGrammar.currentRule,
    currentExercise = _useGrammar.currentExercise,
    canCheckAnswer = _useGrammar.canCheckAnswer,
    isFirstExercise = _useGrammar.isFirstExercise,
    isLastExercise = _useGrammar.isLastExercise,
    changeRule = _useGrammar.changeRule,
    submitAnswer = _useGrammar.submitAnswer,
    nextExercise = _useGrammar.nextExercise,
    previousExercise = _useGrammar.previousExercise,
    retryExercise = _useGrammar.retryExercise,
    toggleDetailedProgress = _useGrammar.toggleDetailedProgress;
  var handleBackPress = (0, _react.useCallback)(function () {
    _expoRouter.router.push({
      pathname: "/tabs/exerciseSelection",
      params: {
        level: level
      }
    });
  }, [level]);
  var handleCheckAnswer = (0, _react.useCallback)(function () {
    submitAnswer();
  }, [submitAnswer]);
  var handleNextExercise = (0, _react.useCallback)(function () {
    if (!nextExercise()) {
      navigation.goBack();
    }
  }, [nextExercise, navigation]);
  var handlePreviousExercise = (0, _react.useCallback)(function () {
    previousExercise();
  }, [previousExercise]);
  var handleRetryExercise = (0, _react.useCallback)(function () {
    retryExercise();
  }, [retryExercise]);
  var handleSkipExercise = (0, _react.useCallback)(function () {
    handleNextExercise();
  }, [handleNextExercise]);
  var handleRuleChange = (0, _react.useCallback)(function (index) {
    changeRule(index);
  }, [changeRule]);
  var handleRuleProgressPress = (0, _react.useCallback)(function (index) {
    changeRule(index);
  }, [changeRule]);
  var handleToggleProgressDetails = (0, _react.useCallback)(function () {
    toggleDetailedProgress();
  }, [toggleDetailedProgress]);
  var isLoading = (0, _react.useMemo)(function () {
    return !loaded || !grammarData.length;
  }, [loaded, grammarData.length]);
  if (isLoading) {
    return (0, _jsxRuntime.jsx)(_Container.default, {
      safeArea: true,
      safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
      backgroundColor: "#f8fafc",
      statusBarStyle: "dark-content",
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.loadingContainer,
        children: (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
          size: "large",
          color: levelColor
        })
      })
    });
  }
  return (0, _jsxRuntime.jsxs)(_Container.default, {
    safeArea: true,
    safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
    withScrollView: true,
    backgroundColor: "#f8fafc",
    statusBarStyle: "dark-content",
    withPadding: false,
    scrollViewProps: {
      showsVerticalScrollIndicator: false,
      contentContainerStyle: styles.scrollContent
    },
    children: [(0, _jsxRuntime.jsx)(_GrammarHeader.default, {
      level: level,
      onBackPress: handleBackPress
    }), (0, _jsxRuntime.jsx)(_GrammarRuleSelector.default, {
      rules: grammarData,
      selectedIndex: ruleIndex,
      onSelectRule: handleRuleChange,
      levelColor: levelColor
    }), (0, _jsxRuntime.jsx)(_GrammarProgress.default, {
      grammarData: grammarData,
      completedExercises: completedExercises,
      levelColor: levelColor,
      expanded: showDetailedProgress,
      onToggleExpand: handleToggleProgressDetails,
      onRulePress: handleRuleProgressPress
    }), (0, _jsxRuntime.jsx)(_GrammarRuleContent.default, {
      rule: currentRule,
      levelColor: levelColor
    }), currentExercise && (0, _jsxRuntime.jsx)(_reactNative.View, {
      children: (0, _jsxRuntime.jsx)(_GrammarExerciceRenderer.default, {
        exercise: currentExercise,
        selectedOption: selectedOption,
        setSelectedOption: setSelectedOption,
        inputText: inputText,
        setInputText: setInputText,
        showFeedback: showFeedback,
        isCorrect: isCorrect,
        exerciseIndex: exerciseIndex,
        attempts: attempts
      })
    }, `exercise-${exerciseIndex}-${attempts}`), (0, _jsxRuntime.jsx)(_GrammarFeedback.default, {
      isVisible: showFeedback,
      isCorrect: isCorrect,
      explanation: currentExercise == null ? void 0 : currentExercise.explanation,
      correctAnswer: currentExercise == null ? void 0 : currentExercise.answer,
      attempts: attempts
    }), (0, _jsxRuntime.jsx)(_GrammarNavigation.default, {
      showFeedback: showFeedback,
      isCorrect: isCorrect,
      canCheckAnswer: canCheckAnswer,
      onCheckAnswer: handleCheckAnswer,
      onPreviousExercise: handlePreviousExercise,
      onNextExercise: handleNextExercise,
      onRetryExercise: handleRetryExercise,
      onSkipExercise: handleSkipExercise,
      isFirstExercise: isFirstExercise,
      isLastExercise: isLastExercise,
      attempts: attempts,
      levelColor: levelColor
    })]
  });
};
var _default = exports.default = GrammarExercise;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,