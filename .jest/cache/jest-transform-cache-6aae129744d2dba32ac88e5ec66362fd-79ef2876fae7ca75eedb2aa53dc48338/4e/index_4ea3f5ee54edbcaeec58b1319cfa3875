d214d666b4cc7a3df228cb1478bc0809
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CategorySelector = _interopRequireDefault(require("../../../../components/exercise-common/CategorySelector"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
var GrammarRuleSelector = function GrammarRuleSelector(_ref) {
  var rules = _ref.rules,
    selectedIndex = _ref.selectedIndex,
    onSelectRule = _ref.onSelectRule,
    _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? "#3b82f6" : _ref$levelColor;
  var formattedRules = rules.map(function (rule, index) {
    return {
      id: index,
      name: rule.title
    };
  });
  return (0, _jsxRuntime.jsx)(_CategorySelector.default, {
    categories: formattedRules,
    selectedCategory: selectedIndex === undefined ? 0 : selectedIndex,
    onSelectCategory: onSelectRule,
    primaryColor: levelColor
  });
};
GrammarRuleSelector.propTypes = {
  rules: _propTypes.default.arrayOf(_propTypes.default.shape({
    title: _propTypes.default.string.isRequired
  })).isRequired,
  selectedIndex: _propTypes.default.number.isRequired,
  onSelectRule: _propTypes.default.func.isRequired,
  levelColor: _propTypes.default.string
};
var _default = exports.default = GrammarRuleSelector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfQ2F0ZWdvcnlTZWxlY3RvciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3Byb3BUeXBlcyIsIl9qc3hSdW50aW1lIiwiR3JhbW1hclJ1bGVTZWxlY3RvciIsIl9yZWYiLCJydWxlcyIsInNlbGVjdGVkSW5kZXgiLCJvblNlbGVjdFJ1bGUiLCJfcmVmJGxldmVsQ29sb3IiLCJsZXZlbENvbG9yIiwiZm9ybWF0dGVkUnVsZXMiLCJtYXAiLCJydWxlIiwiaW5kZXgiLCJpZCIsIm5hbWUiLCJ0aXRsZSIsImpzeCIsImRlZmF1bHQiLCJjYXRlZ29yaWVzIiwic2VsZWN0ZWRDYXRlZ29yeSIsInVuZGVmaW5lZCIsIm9uU2VsZWN0Q2F0ZWdvcnkiLCJwcmltYXJ5Q29sb3IiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJhcnJheU9mIiwic2hhcGUiLCJzdHJpbmciLCJpc1JlcXVpcmVkIiwibnVtYmVyIiwiZnVuYyIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDYXRlZ29yeVNlbGVjdG9yIGZyb20gXCIuLi8uLi8uLi8uLi9jb21wb25lbnRzL2V4ZXJjaXNlLWNvbW1vbi9DYXRlZ29yeVNlbGVjdG9yXCI7XHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XHJcblxyXG4vKipcclxuICogU8OpbGVjdGV1ciBkZSByw6hnbGVzIGdyYW1tYXRpY2FsZXMgcsOpdXRpbGlzYW50IGxlIENhdGVnb3J5U2VsZWN0b3IgZ8OpbsOpcmlxdWVcclxuICpcclxuICogQHBhcmFtIHtBcnJheX0gcnVsZXMgLSBMaXN0ZSBkZXMgcsOoZ2xlcyBkaXNwb25pYmxlc1xyXG4gKiBAcGFyYW0ge251bWJlcn0gc2VsZWN0ZWRJbmRleCAtIEluZGV4IGRlIGxhIHLDqGdsZSBzw6lsZWN0aW9ubsOpZVxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBvblNlbGVjdFJ1bGUgLSBGb25jdGlvbiDDoCBhcHBlbGVyIGxvcnMgZGUgbGEgc8OpbGVjdGlvbiBkJ3VuZSByw6hnbGVcclxuICogQHBhcmFtIHtzdHJpbmd9IGxldmVsQ29sb3IgLSBDb3VsZXVyIGR1IG5pdmVhdSBhY3R1ZWxcclxuICovXHJcbmNvbnN0IEdyYW1tYXJSdWxlU2VsZWN0b3IgPSAoe1xyXG4gIHJ1bGVzLFxyXG4gIHNlbGVjdGVkSW5kZXgsXHJcbiAgb25TZWxlY3RSdWxlLFxyXG4gIGxldmVsQ29sb3IgPSBcIiMzYjgyZjZcIixcclxufSkgPT4ge1xyXG4gIC8vIFRyYW5zZm9ybWVyIGxlcyByw6hnbGVzIHBvdXIgY29ycmVzcG9uZHJlIGF1IGZvcm1hdCBkdSBDYXRlZ29yeVNlbGVjdG9yXHJcbiAgY29uc3QgZm9ybWF0dGVkUnVsZXMgPSBydWxlcy5tYXAoKHJ1bGUsIGluZGV4KSA9PiAoe1xyXG4gICAgaWQ6IGluZGV4LFxyXG4gICAgbmFtZTogcnVsZS50aXRsZSxcclxuICB9KSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8Q2F0ZWdvcnlTZWxlY3RvclxyXG4gICAgICBjYXRlZ29yaWVzPXtmb3JtYXR0ZWRSdWxlc31cclxuICAgICAgc2VsZWN0ZWRDYXRlZ29yeT17c2VsZWN0ZWRJbmRleCA9PT0gdW5kZWZpbmVkID8gMCA6IHNlbGVjdGVkSW5kZXh9XHJcbiAgICAgIG9uU2VsZWN0Q2F0ZWdvcnk9e29uU2VsZWN0UnVsZX1cclxuICAgICAgcHJpbWFyeUNvbG9yPXtsZXZlbENvbG9yfVxyXG4gICAgLz5cclxuICApO1xyXG59O1xyXG5cclxuLy8g4pyFIETDqWZpbml0aW9uIGRlIFByb3BUeXBlcyBwb3VyIGxhIHZhbGlkYXRpb24gZGVzIHByb3BzXHJcbkdyYW1tYXJSdWxlU2VsZWN0b3IucHJvcFR5cGVzID0ge1xyXG4gIC8vICdydWxlcycgZXN0IG1hbnF1YW50IGRhbnMgbGEgdmFsaWRhdGlvblxyXG4gIHJ1bGVzOiBQcm9wVHlwZXMuYXJyYXlPZihcclxuICAgIFByb3BUeXBlcy5zaGFwZSh7XHJcbiAgICAgIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXHJcbiAgICB9KVxyXG4gICkuaXNSZXF1aXJlZCxcclxuICAvLyAnc2VsZWN0ZWRJbmRleCcgZXN0IG1hbnF1YW50IGRhbnMgbGEgdmFsaWRhdGlvblxyXG4gIHNlbGVjdGVkSW5kZXg6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcclxuICAvLyAnb25TZWxlY3RSdWxlJyBlc3QgbWFucXVhbnQgZGFucyBsYSB2YWxpZGF0aW9uXHJcbiAgb25TZWxlY3RSdWxlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG4gIC8vICdsZXZlbENvbG9yJyBlc3QgbWFucXVhbnQgZGFucyBsYSB2YWxpZGF0aW9uXHJcbiAgbGV2ZWxDb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEdyYW1tYXJSdWxlU2VsZWN0b3I7Il0sIm1hcHBpbmdzIjoiOzs7OztBQUFBLElBQUFBLGlCQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFBbUMsSUFBQUUsV0FBQSxHQUFBRixPQUFBO0FBVW5DLElBQU1HLG1CQUFtQixHQUFHLFNBQXRCQSxtQkFBbUJBLENBQUFDLElBQUEsRUFLbkI7RUFBQSxJQUpKQyxLQUFLLEdBQUFELElBQUEsQ0FBTEMsS0FBSztJQUNMQyxhQUFhLEdBQUFGLElBQUEsQ0FBYkUsYUFBYTtJQUNiQyxZQUFZLEdBQUFILElBQUEsQ0FBWkcsWUFBWTtJQUFBQyxlQUFBLEdBQUFKLElBQUEsQ0FDWkssVUFBVTtJQUFWQSxVQUFVLEdBQUFELGVBQUEsY0FBRyxTQUFTLEdBQUFBLGVBQUE7RUFHdEIsSUFBTUUsY0FBYyxHQUFHTCxLQUFLLENBQUNNLEdBQUcsQ0FBQyxVQUFDQyxJQUFJLEVBQUVDLEtBQUs7SUFBQSxPQUFNO01BQ2pEQyxFQUFFLEVBQUVELEtBQUs7TUFDVEUsSUFBSSxFQUFFSCxJQUFJLENBQUNJO0lBQ2IsQ0FBQztFQUFBLENBQUMsQ0FBQztFQUVILE9BQ0UsSUFBQWQsV0FBQSxDQUFBZSxHQUFBLEVBQUNuQixpQkFBQSxDQUFBb0IsT0FBZ0I7SUFDZkMsVUFBVSxFQUFFVCxjQUFlO0lBQzNCVSxnQkFBZ0IsRUFBRWQsYUFBYSxLQUFLZSxTQUFTLEdBQUcsQ0FBQyxHQUFHZixhQUFjO0lBQ2xFZ0IsZ0JBQWdCLEVBQUVmLFlBQWE7SUFDL0JnQixZQUFZLEVBQUVkO0VBQVcsQ0FDMUIsQ0FBQztBQUVOLENBQUM7QUFHRE4sbUJBQW1CLENBQUNxQixTQUFTLEdBQUc7RUFFOUJuQixLQUFLLEVBQUVvQixrQkFBUyxDQUFDQyxPQUFPLENBQ3RCRCxrQkFBUyxDQUFDRSxLQUFLLENBQUM7SUFDZFgsS0FBSyxFQUFFUyxrQkFBUyxDQUFDRyxNQUFNLENBQUNDO0VBQzFCLENBQUMsQ0FDSCxDQUFDLENBQUNBLFVBQVU7RUFFWnZCLGFBQWEsRUFBRW1CLGtCQUFTLENBQUNLLE1BQU0sQ0FBQ0QsVUFBVTtFQUUxQ3RCLFlBQVksRUFBRWtCLGtCQUFTLENBQUNNLElBQUksQ0FBQ0YsVUFBVTtFQUV2Q3BCLFVBQVUsRUFBRWdCLGtCQUFTLENBQUNHO0FBQ3hCLENBQUM7QUFBQyxJQUFBSSxRQUFBLEdBQUFDLE9BQUEsQ0FBQWYsT0FBQSxHQUVhZixtQkFBbUIiLCJpZ25vcmVMaXN0IjpbXX0=