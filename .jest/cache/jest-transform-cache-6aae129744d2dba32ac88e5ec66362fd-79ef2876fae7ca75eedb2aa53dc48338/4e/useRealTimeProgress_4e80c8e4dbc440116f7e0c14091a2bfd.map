{"version":3,"names":["_react","require","_asyncStorage","_interopRequireDefault","_vocabularyDataHelper","useRealTimeProgress","_useState","useState","_useState2","_slicedToArray2","default","levelProgress","setLevelProgress","_useState3","_useState4","exerciseProgress","setExerciseProgress","_useState5","_useState6","isLoading","setIsLoading","handleProgressError","error","operation","level","fallback","arguments","length","undefined","console","warn","calculateVocabularyProgress","_ref","_asyncToGenerator2","storageKey","savedData","AsyncStorage","getItem","data","JSON","parse","completedWords","vocabularyData","getVocabularyData","exercises","totalWords","reduce","sum","cat","_cat$words","words","completedCount","Object","values","forEach","categoryWords","Array","isArray","percentage","Math","min","round","_x","apply","calculateVocabularyFastProgress","_ref2","_cat$words2","_x2","calculateGrammarProgress","_ref3","completedExercises","exerciseIndices","EXERCISES_PER_LEVEL","_x3","calculateReadingProgress","_ref4","completedQuestions","questionIndices","QUESTIONS_PER_LEVEL","_x4","calculatePhrasesProgress","_ref5","completedPhrases","phraseIndices","PHRASES_PER_LEVEL","_x5","calculateConversationsProgress","_ref6","completedScenarios","filter","scenario","completed","completedAt","CONVERSATIONS_PER_LEVEL","_x6","calculateErrorCorrectionProgress","_ref7","_x7","calculateWordGamesProgress","_ref8","game","GAMES_PER_LEVEL","_x8","calculateAssessmentProgress","_ref9","_x9","calculateProgress","useCallback","newLevelProgress","newExerciseProgress","levels","exerciseCalculators","vocabulary","vocabulary_fast","grammar","reading","phrases","conversations","errorCorrection","wordGames","assessment","Promise","all","map","_ref1","availableExercises","keys","results","_ref10","exerciseType","calculator","value","e","_x1","levelTotal","levelCompleted","_ref11","_x0","getLevelProgress","getExerciseProgress","_exerciseProgress$exe","hasProgress","hasVocabularyStarted","hasVocabularyFastStarted","useEffect","refresh","_default","exports"],"sources":["useRealTimeProgress.js"],"sourcesContent":["// src/hooks/useRealTimeProgress.js - VERSION CORRIGÉE AVEC GESTION D'ERREUR\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { getVocabularyData } from '../utils/vocabulary/vocabularyDataHelper';\r\n\r\nconst useRealTimeProgress = () => {\r\n  const [levelProgress, setLevelProgress] = useState({});\r\n  const [exerciseProgress, setExerciseProgress] = useState({});\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // =================== ERROR HANDLING HELPER ===================\r\n  const handleProgressError = (error, operation, level, fallback = 0) => {\r\n    console.warn(`Progress calculation error in ${operation} for level ${level}:`, error);\r\n    return fallback;\r\n  };\r\n\r\n  // =================== VOCABULAIRE - CORRECTION PRINCIPALE ===================\r\n  \r\n  const calculateVocabularyProgress = async (level) => {\r\n    try {\r\n      const storageKey = `vocabulary_${level}_classic`;\r\n      const savedData = await AsyncStorage.getItem(storageKey);\r\n      \r\n      if (!savedData) return 0;\r\n      \r\n      const data = JSON.parse(savedData);\r\n      const completedWords = data.completedWords || {};\r\n      \r\n      // ✅ FIX : Récupérer les VRAIES données comme useVocabulary.js\r\n      const vocabularyData = getVocabularyData(level, 'classic');\r\n      if (!vocabularyData?.exercises) return 0;\r\n      \r\n      // ✅ FIX : Calcul réel du total comme ligne 168 de useVocabulary.js\r\n      const totalWords = vocabularyData.exercises.reduce((sum, cat) => \r\n        sum + (cat.words?.length || 0), 0\r\n      );\r\n      \r\n      // Compter mots complétés\r\n      let completedCount = 0;\r\n      Object.values(completedWords).forEach(categoryWords => {\r\n        if (Array.isArray(categoryWords)) {\r\n          completedCount += categoryWords.length;\r\n        }\r\n      });\r\n      \r\n      // ✅ FIX : Calcul correct au lieu de constante bidon\r\n      const percentage = totalWords > 0 ? (completedCount / totalWords) * 100 : 0;\r\n      return Math.min(Math.round(percentage), 100);\r\n      \r\n    } catch (error) {\r\n      // ✅ Gestion d'erreur appropriée\r\n      return handleProgressError(error, 'calculateVocabularyProgress', level, 0);\r\n    }\r\n  };\r\n\r\n  // VOCABULARY FAST\r\n  const calculateVocabularyFastProgress = async (level) => {\r\n    try {\r\n      const storageKey = `vocabulary_${level}_fast`;\r\n      const savedData = await AsyncStorage.getItem(storageKey);\r\n      \r\n      if (!savedData) return 0;\r\n      \r\n      const data = JSON.parse(savedData);\r\n      const completedWords = data.completedWords || {};\r\n      \r\n      // ✅ Même fix pour fast\r\n      const vocabularyData = getVocabularyData(level, 'fast');\r\n      if (!vocabularyData?.exercises) return 0;\r\n      \r\n      const totalWords = vocabularyData.exercises.reduce((sum, cat) => \r\n        sum + (cat.words?.length || 0), 0\r\n      );\r\n      \r\n      let completedCount = 0;\r\n      Object.values(completedWords).forEach(categoryWords => {\r\n        if (Array.isArray(categoryWords)) {\r\n          completedCount += categoryWords.length;\r\n        }\r\n      });\r\n      \r\n      const percentage = totalWords > 0 ? (completedCount / totalWords) * 100 : 0;\r\n      return Math.min(Math.round(percentage), 100);\r\n      \r\n    } catch (error) {\r\n      // ✅ Gestion d'erreur appropriée\r\n      return handleProgressError(error, 'calculateVocabularyFastProgress', level, 0);\r\n    }\r\n  };\r\n\r\n  // GRAMMAR\r\n  const calculateGrammarProgress = async (level) => {\r\n    try {\r\n      const storageKey = `grammar_${level}`;\r\n      const savedData = await AsyncStorage.getItem(storageKey);\r\n      \r\n      if (!savedData) return 0;\r\n      \r\n      const data = JSON.parse(savedData);\r\n      const completedExercises = data.completedExercises || {};\r\n      \r\n      let completedCount = 0;\r\n      Object.values(completedExercises).forEach(exerciseIndices => {\r\n        if (Array.isArray(exerciseIndices)) {\r\n          completedCount += exerciseIndices.length;\r\n        }\r\n      });\r\n      \r\n      // Estimation réaliste (à ajuster selon vos vraies données)\r\n      const EXERCISES_PER_LEVEL = 20;\r\n      const percentage = (completedCount / EXERCISES_PER_LEVEL) * 100;\r\n      return Math.min(Math.round(percentage), 100);\r\n      \r\n    } catch (error) {\r\n      // ✅ Gestion d'erreur appropriée\r\n      return handleProgressError(error, 'calculateGrammarProgress', level, 0);\r\n    }\r\n  };\r\n\r\n  // READING\r\n  const calculateReadingProgress = async (level) => {\r\n    try {\r\n      const storageKey = `reading_${level}`;\r\n      const savedData = await AsyncStorage.getItem(storageKey);\r\n      \r\n      if (!savedData) return 0;\r\n      \r\n      const data = JSON.parse(savedData);\r\n      const completedQuestions = data.completedQuestions || {};\r\n      \r\n      let completedCount = 0;\r\n      Object.values(completedQuestions).forEach(questionIndices => {\r\n        if (Array.isArray(questionIndices)) {\r\n          completedCount += questionIndices.length;\r\n        }\r\n      });\r\n      \r\n      const QUESTIONS_PER_LEVEL = 15;\r\n      const percentage = (completedCount / QUESTIONS_PER_LEVEL) * 100;\r\n      return Math.min(Math.round(percentage), 100);\r\n      \r\n    } catch (error) {\r\n      // ✅ Gestion d'erreur appropriée\r\n      return handleProgressError(error, 'calculateReadingProgress', level, 0);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  // PHRASES\r\n  const calculatePhrasesProgress = async (level) => {\r\n    try {\r\n      const storageKey = `phrases_${level}`;\r\n      const savedData = await AsyncStorage.getItem(storageKey);\r\n      \r\n      if (!savedData) return 0;\r\n      \r\n      const data = JSON.parse(savedData);\r\n      const completedPhrases = data.completedPhrases || {};\r\n      \r\n      let completedCount = 0;\r\n      Object.values(completedPhrases).forEach(phraseIndices => {\r\n        if (Array.isArray(phraseIndices)) {\r\n          completedCount += phraseIndices.length;\r\n        }\r\n      });\r\n      \r\n      const PHRASES_PER_LEVEL = 30;\r\n      const percentage = (completedCount / PHRASES_PER_LEVEL) * 100;\r\n      return Math.min(Math.round(percentage), 100);\r\n      \r\n    } catch (error) {\r\n      return handleProgressError(error, 'calculatePhrasesProgress', level, 0);\r\n    }\r\n  };\r\n\r\n  // CONVERSATIONS\r\n  const calculateConversationsProgress = async (level) => {\r\n    try {\r\n      const storageKey = `conversation_${level}`;\r\n      const savedData = await AsyncStorage.getItem(storageKey);\r\n      \r\n      if (!savedData) return 0;\r\n      \r\n      const data = JSON.parse(savedData);\r\n      const completedScenarios = data.completedScenarios || {};\r\n      \r\n      const completedCount = Object.values(completedScenarios).filter(scenario => \r\n        scenario && (scenario.completed || scenario.completedAt)\r\n      ).length;\r\n      \r\n      const CONVERSATIONS_PER_LEVEL = 8;\r\n      const percentage = (completedCount / CONVERSATIONS_PER_LEVEL) * 100;\r\n      return Math.min(Math.round(percentage), 100);\r\n      \r\n    } catch (error) {\r\n      return handleProgressError(error, 'calculateConversationsProgress', level, 0);\r\n    }\r\n  };\r\n\r\n  // ERROR CORRECTION\r\n  const calculateErrorCorrectionProgress = async (level) => {\r\n    try {\r\n      const storageKey = `error_correction_${level}`;\r\n      const savedData = await AsyncStorage.getItem(storageKey);\r\n      \r\n      if (!savedData) return 0;\r\n      \r\n      const data = JSON.parse(savedData);\r\n      const completedExercises = data.completedExercises || {};\r\n      \r\n      let completedCount = 0;\r\n      Object.values(completedExercises).forEach(exerciseIndices => {\r\n        if (Array.isArray(exerciseIndices)) {\r\n          completedCount += exerciseIndices.length;\r\n        }\r\n      });\r\n      \r\n      const EXERCISES_PER_LEVEL = 20;\r\n      const percentage = (completedCount / EXERCISES_PER_LEVEL) * 100;\r\n      return Math.min(Math.round(percentage), 100);\r\n      \r\n    } catch (error) {\r\n      return handleProgressError(error, 'calculateErrorCorrectionProgress', level, 0);\r\n    }\r\n  };\r\n\r\n  // WORD GAMES\r\n  const calculateWordGamesProgress = async (level) => {\r\n    try {\r\n      const storageKey = `word_games_completed_${level}`;\r\n      const savedData = await AsyncStorage.getItem(storageKey);\r\n      \r\n      if (!savedData) return 0;\r\n      \r\n      const data = JSON.parse(savedData);\r\n      \r\n      const completedCount = Object.values(data).filter(game => \r\n        game?.completed\r\n      ).length;\r\n      \r\n      const GAMES_PER_LEVEL = 10;\r\n      const percentage = (completedCount / GAMES_PER_LEVEL) * 100;\r\n      return Math.min(Math.round(percentage), 100);\r\n      \r\n    } catch (error) {\r\n      return handleProgressError(error, 'calculateWordGamesProgress', level, 0);\r\n    }\r\n  };\r\n\r\n  // ASSESSMENT\r\n  const calculateAssessmentProgress = async (level) => {\r\n    try {\r\n      const storageKey = `assessment_results_${level}`;\r\n      const savedData = await AsyncStorage.getItem(storageKey);\r\n      \r\n      if (!savedData) return 0;\r\n      \r\n      const data = JSON.parse(savedData);\r\n      return data.completedAt ? 100 : 0;\r\n      \r\n    } catch (error) {\r\n      return handleProgressError(error, 'calculateAssessmentProgress', level, 0);\r\n    }\r\n  };\r\n\r\n  // =================== CALCUL GLOBAL ===================\r\n  const calculateProgress = useCallback(async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      \r\n      const newLevelProgress = {};\r\n      const newExerciseProgress = {};\r\n\r\n      const levels = ['1', '2', '3', '4', '5', '6', 'bonus'];\r\n      \r\n      const exerciseCalculators = {\r\n        vocabulary: calculateVocabularyProgress,\r\n        vocabulary_fast: calculateVocabularyFastProgress,\r\n        grammar: calculateGrammarProgress,\r\n        reading: calculateReadingProgress,\r\n\r\n        phrases: calculatePhrasesProgress,\r\n        conversations: calculateConversationsProgress,\r\n        errorCorrection: calculateErrorCorrectionProgress,\r\n        wordGames: calculateWordGamesProgress,\r\n        assessment: calculateAssessmentProgress,\r\n      };\r\n\r\n      await Promise.all(\r\n        levels.map(async (level) => {\r\n          const availableExercises = level === 'bonus'\r\n            ? ['reading', 'vocabulary', 'phrases']\r\n            : Object.keys(exerciseCalculators);\r\n\r\n          const results = await Promise.all(\r\n            availableExercises.map(async (exerciseType) => {\r\n              try {\r\n                const calculator = exerciseCalculators[exerciseType];\r\n                const value = await calculator(level);\r\n                return { exerciseType, value };\r\n              } catch (e) {\r\n                console.warn(`Erreur calcul ${exerciseType} niveau ${level}:`, e);\r\n                return { exerciseType, value: 0 };\r\n              }\r\n            })\r\n          );\r\n\r\n          let levelTotal = 0;\r\n          let levelCompleted = 0;\r\n          results.forEach(({ exerciseType, value }) => {\r\n            if (!newExerciseProgress[exerciseType]) newExerciseProgress[exerciseType] = {};\r\n            newExerciseProgress[exerciseType][level] = value;\r\n            levelTotal += 100;\r\n            levelCompleted += value;\r\n          });\r\n\r\n          newLevelProgress[level] = levelTotal > 0\r\n            ? Math.round((levelCompleted / levelTotal) * 100)\r\n            : 0;\r\n        })\r\n      );\r\n\r\n      setLevelProgress(newLevelProgress);\r\n      setExerciseProgress(newExerciseProgress);\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur calcul progression:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // =================== GETTERS ===================\r\n  \r\n  const getLevelProgress = useCallback((level) => {\r\n    return levelProgress[level] || 0;\r\n  }, [levelProgress]);\r\n\r\n  const getExerciseProgress = useCallback((exerciseType, level) => {\r\n    return exerciseProgress[exerciseType]?.[level] || 0;\r\n  }, [exerciseProgress]);\r\n\r\n  const hasProgress = useCallback((exerciseType, level) => {\r\n    return getExerciseProgress(exerciseType, level) > 0;\r\n  }, [getExerciseProgress]);\r\n\r\n  const hasVocabularyStarted = useCallback((level) => {\r\n    return hasProgress('vocabulary', level);\r\n  }, [hasProgress]);\r\n\r\n  const hasVocabularyFastStarted = useCallback((level) => {\r\n    return hasProgress('vocabulary_fast', level);\r\n  }, [hasProgress]);\r\n\r\n  // =================== INIT ===================\r\n  \r\n  useEffect(() => {\r\n    calculateProgress();\r\n  }, [calculateProgress]);\r\n\r\n  const refresh = useCallback(() => {\r\n    calculateProgress();\r\n  }, [calculateProgress]);\r\n\r\n  return {\r\n    levelProgress,\r\n    exerciseProgress,\r\n    isLoading,\r\n    getLevelProgress,\r\n    getExerciseProgress,\r\n    hasProgress,\r\n    hasVocabularyStarted,\r\n    hasVocabularyFastStarted,\r\n    refresh,\r\n  };\r\n};\r\n\r\nexport default useRealTimeProgress;"],"mappings":"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","ignoreList":[]}