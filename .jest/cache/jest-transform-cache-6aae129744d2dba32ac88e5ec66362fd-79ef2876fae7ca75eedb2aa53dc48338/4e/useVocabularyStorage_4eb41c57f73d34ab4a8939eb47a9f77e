28319931911633d7a96b9610eec73113
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useVocabularyStorage;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = require("react");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
function useVocabularyStorage(_ref) {
  var STORAGE_KEY = _ref.STORAGE_KEY,
    progressKey = _ref.progressKey,
    loaded = _ref.loaded,
    setLoaded = _ref.setLoaded,
    completedWords = _ref.completedWords,
    setCompletedWords = _ref.setCompletedWords,
    setCategoryIndex = _ref.setCategoryIndex,
    setWordIndex = _ref.setWordIndex,
    exercises = _ref.exercises,
    isInitialized = _ref.isInitialized;
  var handleStorageError = function handleStorageError(error, operation) {
    var fallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    console.warn(`Vocabulary storage error in ${operation}:`, error);
    return fallback;
  };
  (0, _react.useEffect)(function () {
    var loadData = function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* () {
        try {
          var saved = yield _asyncStorage.default.getItem(STORAGE_KEY);
          if (saved) {
            var _JSON$parse = JSON.parse(saved),
              savedCompleted = _JSON$parse.completedWords,
              lastPosition = _JSON$parse.lastPosition;
            setCompletedWords(savedCompleted || {});
            if (lastPosition) {
              setCategoryIndex(lastPosition.categoryIndex || 0);
              setWordIndex(lastPosition.wordIndex || 0);
            }
          }
        } catch (error) {
          handleStorageError(error, 'loadData');
        } finally {
          setLoaded(true);
        }
      });
      return function loadData() {
        return _ref2.apply(this, arguments);
      };
    }();
    loadData();
  }, [progressKey, STORAGE_KEY, setCompletedWords, setCategoryIndex, setWordIndex, setLoaded]);
  var saveData = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      var dataToSave = {
        completedWords: completedWords,
        lastPosition: {
          categoryIndex: 0,
          wordIndex: 0
        }
      };
      yield _asyncStorage.default.setItem(STORAGE_KEY, JSON.stringify(dataToSave));
    } catch (error) {
      handleStorageError(error, 'saveData');
    }
  }), [completedWords, STORAGE_KEY]);
  (0, _react.useEffect)(function () {
    if (loaded) saveData();
  }, [saveData, loaded]);
  (0, _react.useEffect)(function () {
    if (loaded && exercises && !isInitialized.current) {
      var newCompletedWords = Object.assign({}, completedWords);
      exercises.forEach(function (_, index) {
        if (!newCompletedWords[index]) newCompletedWords[index] = [];
      });
      setCompletedWords(newCompletedWords);
      isInitialized.current = true;
    }
  }, [loaded, exercises, completedWords, setCompletedWords, isInitialized]);
  return {
    saveData: saveData
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,