92e87f2ccb7ac4b79f6366a6288d856e
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
_getJestObj().mock('../../../../src/hooks/useLastActivity', function () {
  return {
    __esModule: true,
    default: function _default() {
      return {
        saveActivity: jest.fn()
      };
    }
  };
});
_getJestObj().mock('../../../../src/hooks/useConversation');
_getJestObj().mock('../../../../src/utils/conversation/conversationDataHelper', function () {
  return {
    getConversationData: jest.fn(function () {
      return {
        exercises: [{
          title: 'Scénario 1',
          description: 'Desc 1'
        }]
      };
    }),
    getLevelColor: jest.fn(function () {
      return '#123456';
    })
  };
});
_getJestObj().mock('../ConversationHeader', function () {
  return function (props) {
    return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {});
  };
});
_getJestObj().mock('../ConversationSelector', function () {
  return function (props) {
    return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {});
  };
});
_getJestObj().mock('../ConversationProgress', function () {
  return function (props) {
    return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {});
  };
});
_getJestObj().mock('../ConversationScenarioDescription', function () {
  return function (props) {
    return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {});
  };
});
_getJestObj().mock('../ConversationMessageList', function () {
  return function (props) {
    return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {});
  };
});
_getJestObj().mock('../ConversationSuggestions', function () {
  return function (props) {
    return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {});
  };
});
_getJestObj().mock('../ConversationInput', function () {
  return function (props) {
    return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {});
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _conversations = _interopRequireDefault(require("../../../../src/screens/exercises/conversations"));
var _useConversation = _interopRequireDefault(require("../hooks/useConversation"));
var _useLastActivity = _interopRequireDefault(require("../../../hooks/useLastActivity"));
var _expoRouter = require("expo-router");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ConversationExercise', function () {
  var saveActivityMock;
  var mockRoute = {
    params: {
      level: 'A1'
    }
  };
  var defaultConversationState = {
    currentScenarioIndex: 0,
    conversation: [{
      sender: 'bot',
      text: 'Salut!'
    }],
    message: '',
    setMessage: jest.fn(),
    isTyping: false,
    suggestions: ['Bonjour', 'Salut'],
    showHelp: false,
    completedScenarios: [],
    conversationHistory: [],
    loaded: true,
    showDetailedProgress: false,
    currentScenario: {
      title: 'Scénario 1',
      description: 'Description du scénario'
    },
    totalScenarios: 1,
    hasValidData: true,
    changeScenario: jest.fn(),
    sendMessage: jest.fn(),
    useSuggestion: jest.fn(),
    toggleHelp: jest.fn(),
    toggleDetailedProgress: jest.fn(),
    isConversationStarted: true,
    stats: {
      completionProgress: 50,
      currentStep: 1,
      totalSteps: 2
    },
    display: {
      currentHelp: ''
    }
  };
  beforeEach(function () {
    jest.clearAllMocks();
    saveActivityMock = jest.fn();
    _useLastActivity.default.mockReturnValue({
      saveActivity: saveActivityMock
    });
    _useConversation.default.mockReturnValue(defaultConversationState);
    _expoRouter.router.push.mockClear();
  });
  it('renders loading state when not loaded', function () {
    _useConversation.default.mockReturnValue(Object.assign({}, defaultConversationState, {
      loaded: false
    }));
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_conversations.default, {
        route: mockRoute
      })),
      queryByText = _render.queryByText;
    expect(queryByText('Scénario 1')).toBeNull();
  });
  it('renders main content when loaded and valid data', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_conversations.default, {
        route: mockRoute
      })),
      getByText = _render2.getByText;
    expect(saveActivityMock).toHaveBeenCalledTimes(1);
  });
  it('calls saveActivity if conversation started', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_conversations.default, {
      route: mockRoute
    }));
    expect(saveActivityMock).toHaveBeenCalledTimes(1);
    expect(saveActivityMock).toHaveBeenCalledWith(expect.objectContaining({
      title: 'Conversations',
      level: 'A1',
      type: 'conversations',
      metadata: expect.any(Object)
    }));
  });
  it('does not call saveActivity if conversation not started', function () {
    _useConversation.default.mockReturnValue(Object.assign({}, defaultConversationState, {
      isConversationStarted: false
    }));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_conversations.default, {
      route: mockRoute
    }));
    expect(saveActivityMock).not.toHaveBeenCalled();
  });
  it('navigates back on handleBackPress', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_conversations.default, {
        route: mockRoute
      })),
      getByTestId = _render3.getByTestId;
    _expoRouter.router.push({
      pathname: '/tabs/exerciseSelection',
      params: {
        level: 'A1'
      }
    });
    expect(_expoRouter.router.push).toHaveBeenCalledWith({
      pathname: '/tabs/exerciseSelection',
      params: {
        level: 'A1'
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,