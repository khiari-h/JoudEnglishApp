3c61f476b323cffb317bf9ace5f36c61
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useProgressAnimation;
var _react = require("react");
var _reactNative = require("react-native");
function useProgressAnimation(_ref) {
  var _ref$progress = _ref.progress,
    progress = _ref$progress === void 0 ? 0 : _ref$progress,
    _ref$animated = _ref.animated,
    animated = _ref$animated === void 0 ? true : _ref$animated,
    _ref$duration = _ref.duration,
    duration = _ref$duration === void 0 ? 600 : _ref$duration;
  var clamped = Math.min(Math.max(progress, 0), 100);
  var animatedValue = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
  (0, _react.useEffect)(function () {
    if (animated) {
      _reactNative.Animated.timing(animatedValue, {
        toValue: clamped,
        duration: duration,
        useNativeDriver: false
      }).start();
    } else {
      animatedValue.setValue(clamped);
    }
  }, [clamped, animated, duration, animatedValue]);
  var width = animated ? animatedValue.interpolate({
    inputRange: [0, 100],
    outputRange: ["0%", "100%"]
  }) : `${clamped}%`;
  return {
    width: width
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlIiwidXNlUHJvZ3Jlc3NBbmltYXRpb24iLCJfcmVmIiwiX3JlZiRwcm9ncmVzcyIsInByb2dyZXNzIiwiX3JlZiRhbmltYXRlZCIsImFuaW1hdGVkIiwiX3JlZiRkdXJhdGlvbiIsImR1cmF0aW9uIiwiY2xhbXBlZCIsIk1hdGgiLCJtaW4iLCJtYXgiLCJhbmltYXRlZFZhbHVlIiwidXNlUmVmIiwiQW5pbWF0ZWQiLCJWYWx1ZSIsImN1cnJlbnQiLCJ1c2VFZmZlY3QiLCJ0aW1pbmciLCJ0b1ZhbHVlIiwidXNlTmF0aXZlRHJpdmVyIiwic3RhcnQiLCJzZXRWYWx1ZSIsIndpZHRoIiwiaW50ZXJwb2xhdGUiLCJpbnB1dFJhbmdlIiwib3V0cHV0UmFuZ2UiXSwic291cmNlcyI6WyJ1c2VQcm9ncmVzc0FuaW1hdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvY29tcG9uZW50cy91aS9Qcm9ncmVzc0Jhci91c2VQcm9ncmVzc0FuaW1hdGlvbi5qc1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBBbmltYXRlZCB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVByb2dyZXNzQW5pbWF0aW9uKHtcclxuICBwcm9ncmVzcyA9IDAsXHJcbiAgYW5pbWF0ZWQgPSB0cnVlLFxyXG4gIGR1cmF0aW9uID0gNjAwLFxyXG59KSB7XHJcbiAgY29uc3QgY2xhbXBlZCA9IE1hdGgubWluKE1hdGgubWF4KHByb2dyZXNzLCAwKSwgMTAwKTtcclxuICBjb25zdCBhbmltYXRlZFZhbHVlID0gdXNlUmVmKG5ldyBBbmltYXRlZC5WYWx1ZSgwKSkuY3VycmVudDtcclxuXHJcbiAgLy8gSG9vayBwb3VyIGwnYW5pbWF0aW9uIC0gdG91am91cnMgYXBwZWzDqVxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAoYW5pbWF0ZWQpIHtcclxuICAgICAgQW5pbWF0ZWQudGltaW5nKGFuaW1hdGVkVmFsdWUsIHtcclxuICAgICAgICB0b1ZhbHVlOiBjbGFtcGVkLFxyXG4gICAgICAgIGR1cmF0aW9uLFxyXG4gICAgICAgIHVzZU5hdGl2ZURyaXZlcjogZmFsc2UsXHJcbiAgICAgIH0pLnN0YXJ0KCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBEw6lmaW5pciBsYSB2YWxldXIgZGlyZWN0ZW1lbnQgc2FucyBhbmltYXRpb25cclxuICAgICAgYW5pbWF0ZWRWYWx1ZS5zZXRWYWx1ZShjbGFtcGVkKTtcclxuICAgIH1cclxuICB9LCBbY2xhbXBlZCwgYW5pbWF0ZWQsIGR1cmF0aW9uLCBhbmltYXRlZFZhbHVlXSk7XHJcblxyXG4gIC8vIENhbGN1bCBkZSBsYSBsYXJnZXVyIC0gdG91am91cnMgZXjDqWN1dMOpXHJcbiAgY29uc3Qgd2lkdGggPSBhbmltYXRlZCBcclxuICAgID8gYW5pbWF0ZWRWYWx1ZS5pbnRlcnBvbGF0ZSh7XHJcbiAgICAgICAgaW5wdXRSYW5nZTogWzAsIDEwMF0sXHJcbiAgICAgICAgb3V0cHV0UmFuZ2U6IFtcIjAlXCIsIFwiMTAwJVwiXSxcclxuICAgICAgfSlcclxuICAgIDogYCR7Y2xhbXBlZH0lYDtcclxuXHJcbiAgcmV0dXJuIHsgd2lkdGggfTtcclxufVxyXG5cclxuXHJcbiJdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUVlLFNBQVNFLG9CQUFvQkEsQ0FBQUMsSUFBQSxFQUl6QztFQUFBLElBQUFDLGFBQUEsR0FBQUQsSUFBQSxDQUhERSxRQUFRO0lBQVJBLFFBQVEsR0FBQUQsYUFBQSxjQUFHLENBQUMsR0FBQUEsYUFBQTtJQUFBRSxhQUFBLEdBQUFILElBQUEsQ0FDWkksUUFBUTtJQUFSQSxRQUFRLEdBQUFELGFBQUEsY0FBRyxJQUFJLEdBQUFBLGFBQUE7SUFBQUUsYUFBQSxHQUFBTCxJQUFBLENBQ2ZNLFFBQVE7SUFBUkEsUUFBUSxHQUFBRCxhQUFBLGNBQUcsR0FBRyxHQUFBQSxhQUFBO0VBRWQsSUFBTUUsT0FBTyxHQUFHQyxJQUFJLENBQUNDLEdBQUcsQ0FBQ0QsSUFBSSxDQUFDRSxHQUFHLENBQUNSLFFBQVEsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUM7RUFDcEQsSUFBTVMsYUFBYSxHQUFHLElBQUFDLGFBQU0sRUFBQyxJQUFJQyxxQkFBUSxDQUFDQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQ0MsT0FBTztFQUczRCxJQUFBQyxnQkFBUyxFQUFDLFlBQU07SUFDZCxJQUFJWixRQUFRLEVBQUU7TUFDWlMscUJBQVEsQ0FBQ0ksTUFBTSxDQUFDTixhQUFhLEVBQUU7UUFDN0JPLE9BQU8sRUFBRVgsT0FBTztRQUNoQkQsUUFBUSxFQUFSQSxRQUFRO1FBQ1JhLGVBQWUsRUFBRTtNQUNuQixDQUFDLENBQUMsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7SUFDWixDQUFDLE1BQU07TUFFTFQsYUFBYSxDQUFDVSxRQUFRLENBQUNkLE9BQU8sQ0FBQztJQUNqQztFQUNGLENBQUMsRUFBRSxDQUFDQSxPQUFPLEVBQUVILFFBQVEsRUFBRUUsUUFBUSxFQUFFSyxhQUFhLENBQUMsQ0FBQztFQUdoRCxJQUFNVyxLQUFLLEdBQUdsQixRQUFRLEdBQ2xCTyxhQUFhLENBQUNZLFdBQVcsQ0FBQztJQUN4QkMsVUFBVSxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztJQUNwQkMsV0FBVyxFQUFFLENBQUMsSUFBSSxFQUFFLE1BQU07RUFDNUIsQ0FBQyxDQUFDLEdBQ0YsR0FBR2xCLE9BQU8sR0FBRztFQUVqQixPQUFPO0lBQUVlLEtBQUssRUFBTEE7RUFBTSxDQUFDO0FBQ2xCIiwiaWdub3JlTGlzdCI6W119