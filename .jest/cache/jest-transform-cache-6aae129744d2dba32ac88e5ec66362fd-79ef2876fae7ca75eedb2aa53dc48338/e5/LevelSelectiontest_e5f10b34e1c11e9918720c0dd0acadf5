2296fb28968a0a879bfe0ba2d8cc3e90
_getJestObj().mock('../../../src/hooks/useRealTimeProgress', function () {
  return {
    __esModule: true,
    default: function _default() {
      return {
        getLevelProgress: jest.fn(function () {
          return 0;
        }),
        hasProgress: jest.fn(function () {
          return false;
        }),
        refresh: jest.fn()
      };
    }
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    },
    useFocusEffect: jest.fn(function () {})
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useFocusEffect: jest.fn(function () {
      return function () {};
    }),
    useNavigation: jest.fn(function () {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _LevelSelection = _interopRequireDefault(require("../../../src/screens/LevelSelection"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('LevelSelection', function () {
  it('should render correctly', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_LevelSelection.default, {}));
    expect(_reactNative.screen.getByText('Niveaux')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImdldExldmVsUHJvZ3Jlc3MiLCJqZXN0IiwiZm4iLCJoYXNQcm9ncmVzcyIsInJlZnJlc2giLCJyb3V0ZXIiLCJwdXNoIiwidXNlRm9jdXNFZmZlY3QiLCJ1c2VOYXZpZ2F0aW9uIiwibmF2aWdhdGUiLCJnb0JhY2siLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9MZXZlbFNlbGVjdGlvbiIsIl9qc3hSdW50aW1lIiwiX3JlcXVpcmUiLCJkZXNjcmliZSIsIml0IiwicmVuZGVyIiwianN4IiwiZXhwZWN0Iiwic2NyZWVuIiwiZ2V0QnlUZXh0IiwidG9CZVRydXRoeSJdLCJzb3VyY2VzIjpbIkxldmVsU2VsZWN0aW9uLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgc2NyZWVuIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IExldmVsU2VsZWN0aW9uIGZyb20gJy4uLy4uLy4uL3NyYy9zY3JlZW5zL0xldmVsU2VsZWN0aW9uJztcblxuLy8gTW9jayB1c2VSZWFsVGltZVByb2dyZXNzIGhvb2tcbmplc3QubW9jaygnLi4vLi4vLi4vc3JjL2hvb2tzL3VzZVJlYWxUaW1lUHJvZ3Jlc3MnLCAoKSA9PiAoe1xuICBfX2VzTW9kdWxlOiB0cnVlLFxuICBkZWZhdWx0OiAoKSA9PiAoe1xuICAgIGdldExldmVsUHJvZ3Jlc3M6IGplc3QuZm4oKCkgPT4gMCksXG4gICAgaGFzUHJvZ3Jlc3M6IGplc3QuZm4oKCkgPT4gZmFsc2UpLFxuICAgIHJlZnJlc2g6IGplc3QuZm4oKSxcbiAgfSksXG59KSk7XG5cbi8vIE1vY2sgZXhwby1yb3V0ZXJcbmplc3QubW9jaygnZXhwby1yb3V0ZXInLCAoKSA9PiAoe1xuICByb3V0ZXI6IHtcbiAgICBwdXNoOiBqZXN0LmZuKCksXG4gIH0sXG4gIHVzZUZvY3VzRWZmZWN0OiBqZXN0LmZuKCgpID0+IHt9KSxcbn0pKTtcblxuLy8gTW9jayBAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUncyB1c2VGb2N1c0VmZmVjdCBhbmQgdXNlTmF2aWdhdGlvblxuamVzdC5tb2NrKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnLCAoKSA9PiAoe1xuICB1c2VGb2N1c0VmZmVjdDogamVzdC5mbigoKSA9PiAoKSA9PiB7fSksXG4gIHVzZU5hdmlnYXRpb246IGplc3QuZm4oKCkgPT4gKHtcbiAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxuICAgIGdvQmFjazogamVzdC5mbigpLFxuICB9KSksXG59KSk7XG5cbmRlc2NyaWJlKCdMZXZlbFNlbGVjdGlvbicsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCByZW5kZXIgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgIHJlbmRlcig8TGV2ZWxTZWxlY3Rpb24gLz4pO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdOaXZlYXV4JykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiJBQUtBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyx3Q0FBd0MsRUFBRTtFQUFBLE9BQU87SUFDekRDLFVBQVUsRUFBRSxJQUFJO0lBQ2hCQyxPQUFPLEVBQUUsU0FBVEEsUUFBT0EsQ0FBQTtNQUFBLE9BQVM7UUFDZEMsZ0JBQWdCLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDO1VBQUEsT0FBTSxDQUFDO1FBQUEsRUFBQztRQUNsQ0MsV0FBVyxFQUFFRixJQUFJLENBQUNDLEVBQUUsQ0FBQztVQUFBLE9BQU0sS0FBSztRQUFBLEVBQUM7UUFDakNFLE9BQU8sRUFBRUgsSUFBSSxDQUFDQyxFQUFFLENBQUM7TUFDbkIsQ0FBQztJQUFBO0VBQ0gsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUdITixXQUFBLEdBQUtDLElBQUksQ0FBQyxhQUFhLEVBQUU7RUFBQSxPQUFPO0lBQzlCUSxNQUFNLEVBQUU7TUFDTkMsSUFBSSxFQUFFTCxJQUFJLENBQUNDLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBQ0RLLGNBQWMsRUFBRU4sSUFBSSxDQUFDQyxFQUFFLENBQUMsWUFBTSxDQUFDLENBQUM7RUFDbEMsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUdITixXQUFBLEdBQUtDLElBQUksQ0FBQywwQkFBMEIsRUFBRTtFQUFBLE9BQU87SUFDM0NVLGNBQWMsRUFBRU4sSUFBSSxDQUFDQyxFQUFFLENBQUM7TUFBQSxPQUFNLFlBQU0sQ0FBQyxDQUFDO0lBQUEsRUFBQztJQUN2Q00sYUFBYSxFQUFFUCxJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFBLE9BQU87UUFDNUJPLFFBQVEsRUFBRVIsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztRQUNuQlEsTUFBTSxFQUFFVCxJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUNsQixDQUFDO0lBQUEsQ0FBQztFQUNKLENBQUM7QUFBQSxDQUFDLENBQUM7QUFBQyxJQUFBUyxzQkFBQSxHQUFBQyxPQUFBO0FBN0JKLElBQUFDLE1BQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFlBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLGVBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUFpRSxJQUFBSSxXQUFBLEdBQUFKLE9BQUE7QUFBQSxTQUFBaEIsWUFBQTtFQUFBLElBQUFxQixRQUFBLEdBQUFMLE9BQUE7SUFBQVgsSUFBQSxHQUFBZ0IsUUFBQSxDQUFBaEIsSUFBQTtFQUFBTCxXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBSyxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUE2QmpFaUIsUUFBUSxDQUFDLGdCQUFnQixFQUFFLFlBQU07RUFDL0JDLEVBQUUsQ0FBQyx5QkFBeUIsRUFBRSxZQUFNO0lBQ2xDLElBQUFDLG1CQUFNLEVBQUMsSUFBQUosV0FBQSxDQUFBSyxHQUFBLEVBQUNOLGVBQUEsQ0FBQWhCLE9BQWMsSUFBRSxDQUFDLENBQUM7SUFDMUJ1QixNQUFNLENBQUNDLG1CQUFNLENBQUNDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDQyxVQUFVLENBQUMsQ0FBQztFQUNsRCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=