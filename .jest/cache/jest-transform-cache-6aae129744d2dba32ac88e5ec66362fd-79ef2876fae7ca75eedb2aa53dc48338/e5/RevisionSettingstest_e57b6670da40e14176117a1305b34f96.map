{"version":3,"names":["_getJestObj","mock","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_RevisionSettings","_useRevisionSettings","_jsxRuntime","_require","jest","describe","mockPreferences","isDisabled","frequency","questionsCount","nextRevisionAt","mockEnableRevisions","fn","mockDisableRevisions","mockUpdateFrequency","beforeEach","useRevisionSettings","mockReturnValue","preferences","isLoading","enableRevisions","disableRevisions","updateFrequency","afterEach","clearAllMocks","it","_render","render","jsx","default","getByText","getByRole","expect","toBeTruthy","_render2","mockReturnValueOnce","Object","assign","_render3","queryByText","toBeNull","_render4","toggleSwitch","fireEvent","waitFor","toHaveBeenCalled","_render5","toHaveBeenCalledWith","_render6","option50","press","option25","_render7"],"sources":["RevisionSettings.test.js"],"sourcesContent":["import React from 'react';\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\nimport RevisionSettings from '../../../src/components/setting/RevisionSettings';\nimport { useRevisionSettings } from '../../../src/hooks/useRevisionSettings';\n\n// Mock du hook useRevisionSettings\njest.mock('../../../src/hooks/useRevisionSettings');\n\ndescribe('RevisionSettings', () => {\n  const mockPreferences = {\n    isDisabled: false,\n    frequency: 50,\n    questionsCount: 10,\n    nextRevisionAt: 150,\n  };\n\n  const mockEnableRevisions = jest.fn();\n  const mockDisableRevisions = jest.fn();\n  const mockUpdateFrequency = jest.fn();\n\n  beforeEach(() => {\n    useRevisionSettings.mockReturnValue({\n      preferences: mockPreferences,\n      isLoading: false,\n      enableRevisions: mockEnableRevisions,\n      disableRevisions: mockDisableRevisions,\n      updateFrequency: mockUpdateFrequency,\n    });\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('devrait afficher le titre et le switch des r√©visions automatiques', () => {\n    const { getByText, getByRole } = render(<RevisionSettings />);\n    expect(getByText('üîÑ R√©visions automatiques')).toBeTruthy();\n    expect(getByText('R√©visions automatiques')).toBeTruthy();\n    expect(getByRole('switch')).toBeTruthy();\n  });\n\n  it('devrait afficher les options de fr√©quence si les r√©visions sont activ√©es', () => {\n    const { getByText } = render(<RevisionSettings />);\n    expect(getByText('Fr√©quence :')).toBeTruthy();\n    expect(getByText('Tous les 25 mots (l√©ger)')).toBeTruthy();\n    expect(getByText('Tous les 50 mots (standard)')).toBeTruthy();\n    expect(getByText('Tous les 100 mots (espac√©)')).toBeTruthy();\n  });\n\n  it('ne devrait pas afficher les options de fr√©quence si les r√©visions sont d√©sactiv√©es', () => {\n    useRevisionSettings.mockReturnValueOnce({\n      preferences: { ...mockPreferences, isDisabled: true },\n      isLoading: false,\n      enableRevisions: mockEnableRevisions,\n      disableRevisions: mockDisableRevisions,\n      updateFrequency: mockUpdateFrequency,\n    });\n    const { queryByText } = render(<RevisionSettings />);\n    expect(queryByText('Fr√©quence :')).toBeNull();\n    expect(queryByText('Tous les 25 mots (l√©ger)')).toBeNull();\n    expect(queryByText('‚ö†Ô∏è R√©visions d√©sactiv√©es')).toBeTruthy();\n  });\n\n  it('devrait appeler disableRevisions quand le switch est d√©sactiv√©', async () => {\n    const { getByRole } = render(<RevisionSettings />);\n    const toggleSwitch = getByRole('switch');\n    fireEvent(toggleSwitch, 'onValueChange', false);\n    await waitFor(() => expect(mockDisableRevisions).toHaveBeenCalled());\n  });\n\n  it('devrait appeler enableRevisions quand le switch est activ√©', async () => {\n    useRevisionSettings.mockReturnValueOnce({\n      preferences: { ...mockPreferences, isDisabled: true },\n      isLoading: false,\n      enableRevisions: mockEnableRevisions,\n      disableRevisions: mockDisableRevisions,\n      updateFrequency: mockUpdateFrequency,\n    });\n    const { getByRole } = render(<RevisionSettings />);\n    const toggleSwitch = getByRole('switch');\n    fireEvent(toggleSwitch, 'onValueChange', true);\n    await waitFor(() => expect(mockEnableRevisions).toHaveBeenCalledWith(mockPreferences.frequency, mockPreferences.questionsCount));\n  });\n\n  it('devrait appeler updateFrequency quand une option de fr√©quence est press√©e', () => {\n    const { getByText } = render(<RevisionSettings />);\n    const option50 = getByText('Tous les 50 mots (standard)');\n    fireEvent.press(option50);\n    expect(mockUpdateFrequency).toHaveBeenCalledWith(50);\n\n    const option25 = getByText('Tous les 25 mots (l√©ger)');\n    fireEvent.press(option25);\n    expect(mockUpdateFrequency).toHaveBeenCalledWith(25);\n  });\n\n  it('devrait afficher le message de chargement quand isLoading est vrai', () => {\n    useRevisionSettings.mockReturnValueOnce({\n      preferences: mockPreferences,\n      isLoading: true,\n      enableRevisions: mockEnableRevisions,\n      disableRevisions: mockDisableRevisions,\n      updateFrequency: mockUpdateFrequency,\n    });\n    const { getByText } = render(<RevisionSettings />);\n    expect(getByText('Chargement des param√®tres...')).toBeTruthy();\n  });\n});\n"],"mappings":"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","ignoreList":[]}