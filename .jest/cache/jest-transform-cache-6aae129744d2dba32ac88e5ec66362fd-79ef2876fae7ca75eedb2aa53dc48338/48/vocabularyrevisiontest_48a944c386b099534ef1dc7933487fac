f503c2dc587a016e3acc0ccc0b7addea
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _jsxRuntime = require("react/jsx-runtime");
var mockRevisionQuestions = [{
  id: 'q1',
  type: 'word',
  word: 'testWord1',
  choices: ['correct1', 'wrong1', 'wrong2', 'wrong3'],
  correctAnswer: 'correct1'
}, {
  id: 'q2',
  type: 'word',
  word: 'testWord2',
  choices: ['wrong1', 'correct2', 'wrong2', 'wrong3'],
  correctAnswer: 'correct2'
}, {
  id: 'q3',
  type: 'word',
  word: 'testWord3',
  choices: ['wrong1', 'wrong2', 'correct3', 'wrong3'],
  correctAnswer: 'correct3'
}];
test('Affiche la première question de révision correctement', (0, _asyncToGenerator2.default)(function* () {
  useRevisionData.mockReturnValue({
    revisionQuestions: mockRevisionQuestions,
    isLoading: false,
    error: null,
    stats: {
      totalLearned: 100
    },
    hasEnoughWords: true,
    canGenerateQuestions: true
  });
  useQuizEngine.mockReturnValue({
    currentQuestion: mockRevisionQuestions[0],
    isFinished: false,
    score: 0,
    totalQuestions: mockRevisionQuestions.length,
    showResult: false,
    goToNextQuestion: jest.fn(),
    handleAnswer: jest.fn(),
    handleRestart: jest.fn()
  });
  var _render = render((0, _jsxRuntime.jsx)(VocabularyRevision, {
      route: {
        params: {
          level: 'mixed',
          questionsCount: 3
        }
      }
    })),
    getByText = _render.getByText;
  yield waitFor(function () {
    expect(getByText('testWord1')).toBeTruthy();
    expect(getByText('correct1')).toBeTruthy();
    expect(getByText('wrong1')).toBeTruthy();
    expect(getByText('wrong2')).toBeTruthy();
    expect(getByText('wrong3')).toBeTruthy();
  });
}));
test('Affiche un message d\'erreur quand il n\'y a pas assez de mots', (0, _asyncToGenerator2.default)(function* () {
  useRevisionData.mockReturnValue({
    revisionQuestions: [],
    isLoading: false,
    error: null,
    stats: {
      totalLearned: 2
    },
    hasEnoughWords: false,
    canGenerateQuestions: false
  });
  var _render2 = render((0, _jsxRuntime.jsx)(VocabularyRevision, {
      route: {
        params: {
          level: 'mixed',
          questionsCount: 10
        }
      }
    })),
    getByText = _render2.getByText;
  yield waitFor(function () {
    expect(getByText(/Révision Verrouillée/i) || getByText(/Apprenez 50 mots/i) || getByText(/débloquer/i)).toBeTruthy();
  });
}));
test('Affiche les résultats finaux après la dernière question', (0, _asyncToGenerator2.default)(function* () {
  useRevisionData.mockReturnValue({
    revisionQuestions: mockRevisionQuestions,
    isLoading: false,
    error: null,
    stats: {
      totalLearned: 100
    },
    hasEnoughWords: true,
    canGenerateQuestions: true
  });
  useQuizEngine.mockReturnValue({
    currentQuestion: mockRevisionQuestions[2],
    isFinished: true,
    score: 2,
    totalQuestions: mockRevisionQuestions.length,
    showResult: true,
    goToNextQuestion: jest.fn(),
    handleAnswer: jest.fn(),
    handleRestart: jest.fn()
  });
  var _render3 = render((0, _jsxRuntime.jsx)(VocabularyRevision, {
      route: {
        params: {
          level: 'mixed',
          questionsCount: 3
        }
      }
    })),
    getByText = _render3.getByText;
  yield waitFor(function () {
    expect(getByText(/Bien joué/i) || getByText(/À améliorer/i) || getByText(/Terminer/i)).toBeTruthy();
    expect(getByText(/2.*3/) || getByText(/67.*%/) || getByText(/pourcentage/i)).toBeTruthy();
  });
}));
test('Gère gracieusement les erreurs de chargement des données', (0, _asyncToGenerator2.default)(function* () {
  useRevisionData.mockReturnValue({
    revisionQuestions: [],
    isLoading: false,
    error: 'Erreur de chargement des données de révision',
    stats: {
      totalLearned: 0
    },
    hasEnoughWords: false,
    canGenerateQuestions: false
  });
  var _render4 = render((0, _jsxRuntime.jsx)(VocabularyRevision, {
      route: {
        params: {
          level: 'mixed',
          questionsCount: 3
        }
      }
    })),
    getAllByText = _render4.getAllByText;
  yield waitFor(function () {
    var errorElements = getAllByText(/Erreur/i);
    expect(errorElements.length).toBeGreaterThan(0);
  });
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,