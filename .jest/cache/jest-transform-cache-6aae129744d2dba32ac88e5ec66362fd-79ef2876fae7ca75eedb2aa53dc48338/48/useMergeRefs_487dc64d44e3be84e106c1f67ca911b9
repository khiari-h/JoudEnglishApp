e05bcd7638efa9275a22cc19bdfc7044
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useMergeRefs;
var _react = _interopRequireWildcard(require("react"));
var React = _react;
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function useMergeRefs() {
  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
    refs[_key] = arguments[_key];
  }
  return (0, _react.useCallback)(function (current) {
    for (var ref of refs) {
      if (ref != null) {
        if (typeof ref === 'function') {
          ref(current);
        } else {
          ref.current = current;
        }
      }
    }
  }, [].concat(refs));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJSZWFjdCIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidXNlTWVyZ2VSZWZzIiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsInJlZnMiLCJBcnJheSIsIl9rZXkiLCJ1c2VDYWxsYmFjayIsImN1cnJlbnQiLCJyZWYiLCJjb25jYXQiXSwic291cmNlcyI6WyJ1c2VNZXJnZVJlZnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdFxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7dXNlQ2FsbGJhY2t9IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IHJlZiB0aGF0IGZvcndhcmRzIG5ldyB2YWx1ZXMgdG8gZWFjaCBvZiB0aGUgZ2l2ZW4gcmVmcy4gVGhlXG4gKiBnaXZlbiByZWZzIHdpbGwgYWx3YXlzIGJlIGludm9rZWQgaW4gdGhlIG9yZGVyIHRoYXQgdGhleSBhcmUgc3VwcGxpZWQuXG4gKlxuICogV0FSTklORzogQSBrbm93biBwcm9ibGVtIG9mIG1lcmdpbmcgcmVmcyB1c2luZyB0aGlzIGFwcHJvYWNoIGlzIHRoYXQgaWYgYW55XG4gKiBvZiB0aGUgZ2l2ZW4gcmVmcyBjaGFuZ2UsIHRoZSByZXR1cm5lZCBjYWxsYmFjayByZWYgd2lsbCBhbHNvIGJlIGNoYW5nZWQuIElmXG4gKiB0aGUgcmV0dXJuZWQgY2FsbGJhY2sgcmVmIGlzIHN1cHBsaWVkIGFzIGEgYHJlZmAgdG8gYSBSZWFjdCBlbGVtZW50LCB0aGlzIG1heVxuICogbGVhZCB0byBwcm9ibGVtcyB3aXRoIHRoZSBnaXZlbiByZWZzIGJlaW5nIGludm9rZWQgbW9yZSB0aW1lcyB0aGFuIGRlc2lyZWQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZU1lcmdlUmVmczxJbnN0YW5jZT4oXG4gIC4uLnJlZnM6ICRSZWFkT25seUFycmF5PD9SZWFjdC5SZWZTZXR0ZXI8SW5zdGFuY2U+PlxuKTogKEluc3RhbmNlIHwgbnVsbCkgPT4gdm9pZCB7XG4gIHJldHVybiB1c2VDYWxsYmFjayhcbiAgICAoY3VycmVudDogSW5zdGFuY2UgfCBudWxsKSA9PiB7XG4gICAgICBmb3IgKGNvbnN0IHJlZiBvZiByZWZzKSB7XG4gICAgICAgIGlmIChyZWYgIT0gbnVsbCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZWYoY3VycmVudCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlZi5jdXJyZW50ID0gY3VycmVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFsuLi5yZWZzXSwgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7OztBQVVBLElBQUFBLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUErQixJQUFBQyxLQUFBLEdBQUFILE1BQUE7QUFBQSxTQUFBQyx3QkFBQUcsQ0FBQSxFQUFBQyxDQUFBLDZCQUFBQyxPQUFBLE1BQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQUwsdUJBQUEsWUFBQUEsd0JBQUFHLENBQUEsRUFBQUMsQ0FBQSxTQUFBQSxDQUFBLElBQUFELENBQUEsSUFBQUEsQ0FBQSxDQUFBSyxVQUFBLFNBQUFMLENBQUEsTUFBQU0sQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsS0FBQUMsU0FBQSxRQUFBQyxPQUFBLEVBQUFWLENBQUEsaUJBQUFBLENBQUEsdUJBQUFBLENBQUEseUJBQUFBLENBQUEsU0FBQVEsQ0FBQSxNQUFBRixDQUFBLEdBQUFMLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLFFBQUFHLENBQUEsQ0FBQUssR0FBQSxDQUFBWCxDQUFBLFVBQUFNLENBQUEsQ0FBQU0sR0FBQSxDQUFBWixDQUFBLEdBQUFNLENBQUEsQ0FBQU8sR0FBQSxDQUFBYixDQUFBLEVBQUFRLENBQUEsY0FBQU0sRUFBQSxJQUFBZCxDQUFBLGdCQUFBYyxFQUFBLE9BQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBaEIsQ0FBQSxFQUFBYyxFQUFBLE9BQUFQLENBQUEsSUFBQUQsQ0FBQSxHQUFBVyxNQUFBLENBQUFDLGNBQUEsS0FBQUQsTUFBQSxDQUFBRSx3QkFBQSxDQUFBbkIsQ0FBQSxFQUFBYyxFQUFBLE9BQUFQLENBQUEsQ0FBQUssR0FBQSxJQUFBTCxDQUFBLENBQUFNLEdBQUEsSUFBQVAsQ0FBQSxDQUFBRSxDQUFBLEVBQUFNLEVBQUEsRUFBQVAsQ0FBQSxJQUFBQyxDQUFBLENBQUFNLEVBQUEsSUFBQWQsQ0FBQSxDQUFBYyxFQUFBLFdBQUFOLENBQUEsS0FBQVIsQ0FBQSxFQUFBQyxDQUFBO0FBWWhCLFNBQVNtQixZQUFZQSxDQUFBLEVBRVA7RUFBQSxTQUFBQyxJQUFBLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxFQUR4QkMsSUFBSSxPQUFBQyxLQUFBLENBQUFKLElBQUEsR0FBQUssSUFBQSxNQUFBQSxJQUFBLEdBQUFMLElBQUEsRUFBQUssSUFBQTtJQUFKRixJQUFJLENBQUFFLElBQUEsSUFBQUosU0FBQSxDQUFBSSxJQUFBO0VBQUE7RUFFUCxPQUFPLElBQUFDLGtCQUFXLEVBQ2hCLFVBQUNDLE9BQXdCLEVBQUs7SUFDNUIsS0FBSyxJQUFNQyxHQUFHLElBQUlMLElBQUksRUFBRTtNQUN0QixJQUFJSyxHQUFHLElBQUksSUFBSSxFQUFFO1FBQ2YsSUFBSSxPQUFPQSxHQUFHLEtBQUssVUFBVSxFQUFFO1VBQzdCQSxHQUFHLENBQUNELE9BQU8sQ0FBQztRQUNkLENBQUMsTUFBTTtVQUNMQyxHQUFHLENBQUNELE9BQU8sR0FBR0EsT0FBTztRQUN2QjtNQUNGO0lBQ0Y7RUFDRixDQUFDLEtBQUFFLE1BQUEsQ0FDR04sSUFBSSxDQUNWLENBQUM7QUFDSCIsImlnbm9yZUxpc3QiOltdfQ==