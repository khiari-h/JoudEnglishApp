{"version":3,"names":["_getJestObj","mock","getItem","jest","fn","setItem","_interopRequireDefault","require","_asyncToGenerator2","_reactNative","_asyncStorage","_useActivityMetrics","_require","mockDate","Date","originalDate","global","describe","beforeEach","clearAllMocks","AsyncStorage","mockResolvedValue","now","getTime","Object","setPrototypeOf","getOwnPropertyNames","forEach","name","afterEach","test","default","result","act","hookResult","renderHook","useActivityMetrics","Promise","resolve","setTimeout","expect","current","currentStreak","toBe","todayMinutes","formattedTime","streakTrend","toBeNull","today","toDateString","mockImplementation","key","yesterday","setDate","getDate","toHaveBeenCalledWith","startSession","sessionEndTime","endSession","not","stringMatching","setItemCalls","calls","sessionCalls","filter","call","parseInt","toHaveLength","updateStreak","twoDaysAgo","initialStreak","streakCalls","testCases","streak","expected","_loop","testCase","toString","minutes","_loop2","mockRejectedValue","Error"],"sources":["useActivityMetrics.test.js"],"sourcesContent":["// __tests__/useActivityMetrics.test.js\r\n\r\nimport { renderHook, act } from '@testing-library/react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport useActivityMetrics from '../src/hooks/useActivityMetrics';\r\n\r\n// Mock AsyncStorage\r\njest.mock('@react-native-async-storage/async-storage', () => ({\r\n  getItem: jest.fn(),\r\n  setItem: jest.fn(),\r\n}));\r\n\r\n// Mock Date pour avoir un contrôle sur les dates\r\nconst mockDate = new Date('2024-01-15T10:00:00.000Z');\r\nconst originalDate = global.Date;\r\n\r\ndescribe('useActivityMetrics', () => {\r\n  beforeEach(() => {\r\n    // Reset tous les mocks\r\n    jest.clearAllMocks();\r\n    AsyncStorage.getItem.mockResolvedValue(null);\r\n    AsyncStorage.setItem.mockResolvedValue();\r\n    \r\n    // Mock Date.now et Date constructor\r\n    global.Date = jest.fn(() => mockDate);\r\n    global.Date.now = jest.fn(() => mockDate.getTime());\r\n    Object.setPrototypeOf(global.Date, originalDate);\r\n    Object.getOwnPropertyNames(originalDate).forEach(name => {\r\n      if (name !== 'constructor') {\r\n        global.Date[name] = originalDate[name];\r\n      }\r\n    });\r\n  });\r\n\r\n  afterEach(() => {\r\n    global.Date = originalDate;\r\n  });\r\n\r\n  describe('Initialisation', () => {\r\n    test('doit initialiser avec des valeurs par défaut quand AsyncStorage est vide', async () => {\r\n      AsyncStorage.getItem.mockResolvedValue(null);\r\n\r\n      let result;\r\n      await act(async () => {\r\n        const hookResult = renderHook(() => useActivityMetrics());\r\n        result = hookResult.result;\r\n        // Attendre un cycle pour que useEffect se déclenche\r\n        await new Promise(resolve => setTimeout(resolve, 0));\r\n      });\r\n\r\n      expect(result.current.currentStreak).toBe(0);\r\n      expect(result.current.todayMinutes).toBe(0);\r\n      expect(result.current.formattedTime).toBe('0min');\r\n      expect(result.current.streakTrend).toBeNull();\r\n    });\r\n\r\n    test('doit charger les données existantes du même jour', async () => {\r\n      const today = mockDate.toDateString();\r\n      \r\n      AsyncStorage.getItem.mockImplementation((key) => {\r\n        switch (key) {\r\n          case 'current_streak': return Promise.resolve('5');\r\n          case 'today_minutes': return Promise.resolve('45');\r\n          case 'last_time_date': return Promise.resolve(today);\r\n          default: return Promise.resolve(null);\r\n        }\r\n      });\r\n\r\n      let result;\r\n      await act(async () => {\r\n        const hookResult = renderHook(() => useActivityMetrics());\r\n        result = hookResult.result;\r\n        await new Promise(resolve => setTimeout(resolve, 0));\r\n      });\r\n\r\n      expect(result.current.currentStreak).toBe(5);\r\n      expect(result.current.todayMinutes).toBe(45);\r\n      expect(result.current.formattedTime).toBe('45min');\r\n    });\r\n\r\n    test('doit réinitialiser todayMinutes pour un nouveau jour', async () => {\r\n      const yesterday = new Date(mockDate);\r\n      yesterday.setDate(yesterday.getDate() - 1);\r\n      \r\n      AsyncStorage.getItem.mockImplementation((key) => {\r\n        switch (key) {\r\n          case 'current_streak': return Promise.resolve('5');\r\n          case 'today_minutes': return Promise.resolve('45');\r\n          case 'last_time_date': return Promise.resolve(yesterday.toDateString());\r\n          default: return Promise.resolve(null);\r\n        }\r\n      });\r\n\r\n      let result;\r\n      await act(async () => {\r\n        const hookResult = renderHook(() => useActivityMetrics());\r\n        result = hookResult.result;\r\n        await new Promise(resolve => setTimeout(resolve, 0));\r\n      });\r\n\r\n      expect(result.current.currentStreak).toBe(5);\r\n      expect(result.current.todayMinutes).toBe(0);\r\n      expect(AsyncStorage.setItem).toHaveBeenCalledWith('today_minutes', '0');\r\n      expect(AsyncStorage.setItem).toHaveBeenCalledWith('last_time_date', mockDate.toDateString());\r\n    });\r\n  });\r\n\r\n  describe('Session Timer', () => {\r\n    test('doit démarrer et arrêter une session correctement', async () => {\r\n      let result;\r\n      await act(async () => {\r\n        const hookResult = renderHook(() => useActivityMetrics());\r\n        result = hookResult.result;\r\n        await new Promise(resolve => setTimeout(resolve, 0));\r\n      });\r\n\r\n      // Démarrer la session\r\n      act(() => {\r\n        result.current.startSession('meditation');\r\n      });\r\n\r\n      // Simuler 5 minutes plus tard\r\n      const sessionEndTime = mockDate.getTime() + (5 * 60 * 1000);\r\n      global.Date.now = jest.fn(() => sessionEndTime);\r\n\r\n      // Arrêter la session\r\n      await act(async () => {\r\n        await result.current.endSession();\r\n      });\r\n\r\n      expect(result.current.todayMinutes).toBe(5);\r\n      expect(AsyncStorage.setItem).toHaveBeenCalledWith('today_minutes', '5');\r\n      expect(AsyncStorage.setItem).toHaveBeenCalledWith('last_time_date', mockDate.toDateString());\r\n    });\r\n\r\n    test('ne doit pas mettre à jour si la session est trop courte (< 1 minute)', async () => {\r\n      // Réinitialiser les mocks pour ce test spécifique\r\n      jest.clearAllMocks();\r\n      AsyncStorage.getItem.mockResolvedValue(null);\r\n      AsyncStorage.setItem.mockResolvedValue();\r\n\r\n      let result;\r\n      await act(async () => {\r\n        const hookResult = renderHook(() => useActivityMetrics());\r\n        result = hookResult.result;\r\n        await new Promise(resolve => setTimeout(resolve, 0));\r\n      });\r\n\r\n      // Démarrer la session\r\n      act(() => {\r\n        result.current.startSession();\r\n      });\r\n\r\n      // Simuler 30 secondes plus tard\r\n      const sessionEndTime = mockDate.getTime() + (30 * 1000);\r\n      global.Date.now = jest.fn(() => sessionEndTime);\r\n\r\n      // Arrêter la session\r\n      await act(async () => {\r\n        await result.current.endSession();\r\n      });\r\n\r\n      expect(result.current.todayMinutes).toBe(0);\r\n      // Vérifier qu'aucune mise à jour de session n'a été faite\r\n      expect(AsyncStorage.setItem).not.toHaveBeenCalledWith('today_minutes', expect.stringMatching(/^[1-9]/));\r\n    });\r\n\r\n    test('ne doit rien faire si endSession est appelé sans startSession', async () => {\r\n      // Réinitialiser les mocks pour ce test spécifique\r\n      jest.clearAllMocks();\r\n      AsyncStorage.getItem.mockResolvedValue(null);\r\n      AsyncStorage.setItem.mockResolvedValue();\r\n\r\n      let result;\r\n      await act(async () => {\r\n        const hookResult = renderHook(() => useActivityMetrics());\r\n        result = hookResult.result;\r\n        await new Promise(resolve => setTimeout(resolve, 0));\r\n      });\r\n\r\n      await act(async () => {\r\n        await result.current.endSession();\r\n      });\r\n\r\n      expect(result.current.todayMinutes).toBe(0);\r\n      // Seules les initialisations devraient avoir appelé setItem\r\n      const setItemCalls = AsyncStorage.setItem.mock.calls;\r\n      const sessionCalls = setItemCalls.filter(call => \r\n        call[0] === 'today_minutes' && parseInt(call[1]) > 0\r\n      );\r\n      expect(sessionCalls).toHaveLength(0);\r\n    });\r\n\r\n    test('doit accumuler les minutes de plusieurs sessions', async () => {\r\n      // Initialiser avec 30 minutes existantes\r\n      AsyncStorage.getItem.mockImplementation((key) => {\r\n        switch (key) {\r\n          case 'today_minutes': return Promise.resolve('30');\r\n          case 'last_time_date': return Promise.resolve(mockDate.toDateString());\r\n          default: return Promise.resolve('0');\r\n        }\r\n      });\r\n\r\n      let result;\r\n      await act(async () => {\r\n        const hookResult = renderHook(() => useActivityMetrics());\r\n        result = hookResult.result;\r\n        await new Promise(resolve => setTimeout(resolve, 0));\r\n      });\r\n\r\n      expect(result.current.todayMinutes).toBe(30);\r\n\r\n      // Nouvelle session de 10 minutes\r\n      act(() => {\r\n        result.current.startSession();\r\n      });\r\n\r\n      const sessionEndTime = mockDate.getTime() + (10 * 60 * 1000);\r\n      global.Date.now = jest.fn(() => sessionEndTime);\r\n\r\n      await act(async () => {\r\n        await result.current.endSession();\r\n      });\r\n\r\n      expect(result.current.todayMinutes).toBe(40);\r\n      expect(AsyncStorage.setItem).toHaveBeenCalledWith('today_minutes', '40');\r\n    });\r\n  });\r\n\r\n  describe('Streak Logic', () => {\r\n    test('doit commencer un nouveau streak', async () => {\r\n      AsyncStorage.getItem.mockImplementation((key) => {\r\n        if (key === 'last_activity_date') return Promise.resolve(null);\r\n        return Promise.resolve('0');\r\n      });\r\n\r\n      let result;\r\n      await act(async () => {\r\n        const hookResult = renderHook(() => useActivityMetrics());\r\n        result = hookResult.result;\r\n        await new Promise(resolve => setTimeout(resolve, 0));\r\n      });\r\n\r\n      await act(async () => {\r\n        await result.current.updateStreak();\r\n      });\r\n\r\n      expect(result.current.currentStreak).toBe(1);\r\n      expect(AsyncStorage.setItem).toHaveBeenCalledWith('current_streak', '1');\r\n      expect(AsyncStorage.setItem).toHaveBeenCalledWith('last_activity_date', mockDate.toDateString());\r\n    });\r\n\r\n    test('doit continuer le streak si activité hier', async () => {\r\n      const yesterday = new Date(mockDate);\r\n      yesterday.setDate(yesterday.getDate() - 1);\r\n\r\n      AsyncStorage.getItem.mockImplementation((key) => {\r\n        switch (key) {\r\n          case 'current_streak': return Promise.resolve('3');\r\n          case 'last_activity_date': return Promise.resolve(yesterday.toDateString());\r\n          default: return Promise.resolve('0');\r\n        }\r\n      });\r\n\r\n      let result;\r\n      await act(async () => {\r\n        const hookResult = renderHook(() => useActivityMetrics());\r\n        result = hookResult.result;\r\n        await new Promise(resolve => setTimeout(resolve, 0));\r\n      });\r\n\r\n      await act(async () => {\r\n        await result.current.updateStreak();\r\n      });\r\n\r\n      expect(result.current.currentStreak).toBe(4);\r\n      expect(AsyncStorage.setItem).toHaveBeenCalledWith('current_streak', '4');\r\n    });\r\n\r\n    test('doit redémarrer le streak si gap > 1 jour', async () => {\r\n      const twoDaysAgo = new Date(mockDate);\r\n      twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);\r\n\r\n      AsyncStorage.getItem.mockImplementation((key) => {\r\n        switch (key) {\r\n          case 'current_streak': return Promise.resolve('5');\r\n          case 'last_activity_date': return Promise.resolve(twoDaysAgo.toDateString());\r\n          default: return Promise.resolve('0');\r\n        }\r\n      });\r\n\r\n      let result;\r\n      await act(async () => {\r\n        const hookResult = renderHook(() => useActivityMetrics());\r\n        result = hookResult.result;\r\n        await new Promise(resolve => setTimeout(resolve, 0));\r\n      });\r\n\r\n      await act(async () => {\r\n        await result.current.updateStreak();\r\n      });\r\n\r\n      expect(result.current.currentStreak).toBe(1);\r\n      expect(AsyncStorage.setItem).toHaveBeenCalledWith('current_streak', '1');\r\n    });\r\n\r\n    test('ne doit pas mettre à jour le streak si déjà fait aujourd\\'hui', async () => {\r\n      const today = mockDate.toDateString();\r\n\r\n      AsyncStorage.getItem.mockImplementation((key) => {\r\n        switch (key) {\r\n          case 'current_streak': return Promise.resolve('3');\r\n          case 'last_activity_date': return Promise.resolve(today);\r\n          default: return Promise.resolve('0');\r\n        }\r\n      });\r\n\r\n      let result;\r\n      await act(async () => {\r\n        const hookResult = renderHook(() => useActivityMetrics());\r\n        result = hookResult.result;\r\n        await new Promise(resolve => setTimeout(resolve, 0));\r\n      });\r\n\r\n      const initialStreak = result.current.currentStreak;\r\n\r\n      await act(async () => {\r\n        await result.current.updateStreak();\r\n      });\r\n\r\n      expect(result.current.currentStreak).toBe(initialStreak);\r\n      // Ne devrait pas appeler setItem pour current_streak après l'initialisation\r\n      const streakCalls = AsyncStorage.setItem.mock.calls.filter(call => call[0] === 'current_streak');\r\n      expect(streakCalls).toHaveLength(0);\r\n    });\r\n  });\r\n\r\n  describe('Getters et formatage', () => {\r\n    test('getStreakTrend doit retourner les bons messages', async () => {\r\n      const testCases = [\r\n        { streak: 0, expected: null },\r\n        { streak: 1, expected: '🔥 Continue!' },\r\n        { streak: 3, expected: '💪 En forme!' },\r\n        { streak: 7, expected: '🏆 Incroyable!' },\r\n        { streak: 10, expected: '🏆 Incroyable!' }\r\n      ];\r\n\r\n      for (const testCase of testCases) {\r\n        // Reset mocks pour chaque cas de test\r\n        jest.clearAllMocks();\r\n        AsyncStorage.getItem.mockImplementation((key) => {\r\n          if (key === 'current_streak') return Promise.resolve(testCase.streak.toString());\r\n          return Promise.resolve('0');\r\n        });\r\n\r\n        let result;\r\n        await act(async () => {\r\n          const hookResult = renderHook(() => useActivityMetrics());\r\n          result = hookResult.result;\r\n          await new Promise(resolve => setTimeout(resolve, 0));\r\n        });\r\n\r\n        expect(result.current.streakTrend).toBe(testCase.expected);\r\n      }\r\n    });\r\n\r\n    test('getFormattedTime doit formater correctement', async () => {\r\n      const testCases = [\r\n        { minutes: 0, expected: '0min' },\r\n        { minutes: 30, expected: '30min' },\r\n        { minutes: 60, expected: '1h' },\r\n        { minutes: 75, expected: '1h15min' },\r\n        { minutes: 120, expected: '2h' },\r\n        { minutes: 145, expected: '2h25min' }\r\n      ];\r\n\r\n      for (const testCase of testCases) {\r\n        // Reset mocks pour chaque cas de test\r\n        jest.clearAllMocks();\r\n        AsyncStorage.getItem.mockImplementation((key) => {\r\n          if (key === 'today_minutes') return Promise.resolve(testCase.minutes.toString());\r\n          if (key === 'last_time_date') return Promise.resolve(mockDate.toDateString());\r\n          return Promise.resolve('0');\r\n        });\r\n\r\n        let result;\r\n        await act(async () => {\r\n          const hookResult = renderHook(() => useActivityMetrics());\r\n          result = hookResult.result;\r\n          await new Promise(resolve => setTimeout(resolve, 0));\r\n        });\r\n\r\n        expect(result.current.formattedTime).toBe(testCase.expected);\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Gestion des erreurs', () => {\r\n    test('doit gérer les erreurs AsyncStorage silencieusement', async () => {\r\n      AsyncStorage.getItem.mockRejectedValue(new Error('Storage error'));\r\n\r\n      let result;\r\n      await act(async () => {\r\n        const hookResult = renderHook(() => useActivityMetrics());\r\n        result = hookResult.result;\r\n        // Ne devrait pas throw\r\n        await new Promise(resolve => setTimeout(resolve, 0));\r\n      });\r\n\r\n      expect(result.current.currentStreak).toBe(0);\r\n      expect(result.current.todayMinutes).toBe(0);\r\n    });\r\n\r\n    test('doit gérer les erreurs lors de endSession', async () => {\r\n      AsyncStorage.setItem.mockRejectedValue(new Error('Storage error'));\r\n\r\n      let result;\r\n      await act(async () => {\r\n        const hookResult = renderHook(() => useActivityMetrics());\r\n        result = hookResult.result;\r\n        await new Promise(resolve => setTimeout(resolve, 0));\r\n      });\r\n\r\n      act(() => {\r\n        result.current.startSession();\r\n      });\r\n\r\n      const sessionEndTime = mockDate.getTime() + (5 * 60 * 1000);\r\n      global.Date.now = jest.fn(() => sessionEndTime);\r\n\r\n      // Ne devrait pas throw\r\n      await act(async () => {\r\n        await result.current.endSession();\r\n      });\r\n\r\n      // Les valeurs locales devraient quand même être mises à jour\r\n      expect(result.current.todayMinutes).toBe(5);\r\n    });\r\n  });\r\n});"],"mappings":"AAOAA,WAAA,GAAKC,IAAI,CAAC,2CAA2C,EAAE;EAAA,OAAO;IAC5DC,OAAO,EAAEC,IAAI,CAACC,EAAE,CAAC,CAAC;IAClBC,OAAO,EAAEF,IAAI,CAACC,EAAE,CAAC;EACnB,CAAC;AAAA,CAAC,CAAC;AAAC,IAAAE,sBAAA,GAAAC,OAAA;AAAA,IAAAC,kBAAA,GAAAF,sBAAA,CAAAC,OAAA;AARJ,IAAAE,YAAA,GAAAF,OAAA;AACA,IAAAG,aAAA,GAAAJ,sBAAA,CAAAC,OAAA;AACA,IAAAI,mBAAA,GAAAL,sBAAA,CAAAC,OAAA;AAAiE,SAAAP,YAAA;EAAA,IAAAY,QAAA,GAAAL,OAAA;IAAAJ,IAAA,GAAAS,QAAA,CAAAT,IAAA;EAAAH,WAAA,YAAAA,YAAA;IAAA,OAAAG,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AASjE,IAAMU,QAAQ,GAAG,IAAIC,IAAI,CAAC,0BAA0B,CAAC;AACrD,IAAMC,YAAY,GAAGC,MAAM,CAACF,IAAI;AAEhCG,QAAQ,CAAC,oBAAoB,EAAE,YAAM;EACnCC,UAAU,CAAC,YAAM;IAEff,IAAI,CAACgB,aAAa,CAAC,CAAC;IACpBC,qBAAY,CAAClB,OAAO,CAACmB,iBAAiB,CAAC,IAAI,CAAC;IAC5CD,qBAAY,CAACf,OAAO,CAACgB,iBAAiB,CAAC,CAAC;IAGxCL,MAAM,CAACF,IAAI,GAAGX,IAAI,CAACC,EAAE,CAAC;MAAA,OAAMS,QAAQ;IAAA,EAAC;IACrCG,MAAM,CAACF,IAAI,CAACQ,GAAG,GAAGnB,IAAI,CAACC,EAAE,CAAC;MAAA,OAAMS,QAAQ,CAACU,OAAO,CAAC,CAAC;IAAA,EAAC;IACnDC,MAAM,CAACC,cAAc,CAACT,MAAM,CAACF,IAAI,EAAEC,YAAY,CAAC;IAChDS,MAAM,CAACE,mBAAmB,CAACX,YAAY,CAAC,CAACY,OAAO,CAAC,UAAAC,IAAI,EAAI;MACvD,IAAIA,IAAI,KAAK,aAAa,EAAE;QAC1BZ,MAAM,CAACF,IAAI,CAACc,IAAI,CAAC,GAAGb,YAAY,CAACa,IAAI,CAAC;MACxC;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFC,SAAS,CAAC,YAAM;IACdb,MAAM,CAACF,IAAI,GAAGC,YAAY;EAC5B,CAAC,CAAC;EAEFE,QAAQ,CAAC,gBAAgB,EAAE,YAAM;IAC/Ba,IAAI,CAAC,0EAA0E,MAAAtB,kBAAA,CAAAuB,OAAA,EAAE,aAAY;MAC3FX,qBAAY,CAAClB,OAAO,CAACmB,iBAAiB,CAAC,IAAI,CAAC;MAE5C,IAAIW,MAAM;MACV,MAAM,IAAAC,gBAAG,MAAAzB,kBAAA,CAAAuB,OAAA,EAAC,aAAY;QACpB,IAAMG,UAAU,GAAG,IAAAC,uBAAU,EAAC;UAAA,OAAM,IAAAC,2BAAkB,EAAC,CAAC;QAAA,EAAC;QACzDJ,MAAM,GAAGE,UAAU,CAACF,MAAM;QAE1B,MAAM,IAAIK,OAAO,CAAC,UAAAC,OAAO;UAAA,OAAIC,UAAU,CAACD,OAAO,EAAE,CAAC,CAAC;QAAA,EAAC;MACtD,CAAC,EAAC;MAEFE,MAAM,CAACR,MAAM,CAACS,OAAO,CAACC,aAAa,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;MAC5CH,MAAM,CAACR,MAAM,CAACS,OAAO,CAACG,YAAY,CAAC,CAACD,IAAI,CAAC,CAAC,CAAC;MAC3CH,MAAM,CAACR,MAAM,CAACS,OAAO,CAACI,aAAa,CAAC,CAACF,IAAI,CAAC,MAAM,CAAC;MACjDH,MAAM,CAACR,MAAM,CAACS,OAAO,CAACK,WAAW,CAAC,CAACC,QAAQ,CAAC,CAAC;IAC/C,CAAC,EAAC;IAEFjB,IAAI,CAAC,kDAAkD,MAAAtB,kBAAA,CAAAuB,OAAA,EAAE,aAAY;MACnE,IAAMiB,KAAK,GAAGnC,QAAQ,CAACoC,YAAY,CAAC,CAAC;MAErC7B,qBAAY,CAAClB,OAAO,CAACgD,kBAAkB,CAAC,UAACC,GAAG,EAAK;QAC/C,QAAQA,GAAG;UACT,KAAK,gBAAgB;YAAE,OAAOd,OAAO,CAACC,OAAO,CAAC,GAAG,CAAC;UAClD,KAAK,eAAe;YAAE,OAAOD,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;UAClD,KAAK,gBAAgB;YAAE,OAAOD,OAAO,CAACC,OAAO,CAACU,KAAK,CAAC;UACpD;YAAS,OAAOX,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;QACvC;MACF,CAAC,CAAC;MAEF,IAAIN,MAAM;MACV,MAAM,IAAAC,gBAAG,MAAAzB,kBAAA,CAAAuB,OAAA,EAAC,aAAY;QACpB,IAAMG,UAAU,GAAG,IAAAC,uBAAU,EAAC;UAAA,OAAM,IAAAC,2BAAkB,EAAC,CAAC;QAAA,EAAC;QACzDJ,MAAM,GAAGE,UAAU,CAACF,MAAM;QAC1B,MAAM,IAAIK,OAAO,CAAC,UAAAC,OAAO;UAAA,OAAIC,UAAU,CAACD,OAAO,EAAE,CAAC,CAAC;QAAA,EAAC;MACtD,CAAC,EAAC;MAEFE,MAAM,CAACR,MAAM,CAACS,OAAO,CAACC,aAAa,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;MAC5CH,MAAM,CAACR,MAAM,CAACS,OAAO,CAACG,YAAY,CAAC,CAACD,IAAI,CAAC,EAAE,CAAC;MAC5CH,MAAM,CAACR,MAAM,CAACS,OAAO,CAACI,aAAa,CAAC,CAACF,IAAI,CAAC,OAAO,CAAC;IACpD,CAAC,EAAC;IAEFb,IAAI,CAAC,sDAAsD,MAAAtB,kBAAA,CAAAuB,OAAA,EAAE,aAAY;MACvE,IAAMqB,SAAS,GAAG,IAAItC,IAAI,CAACD,QAAQ,CAAC;MACpCuC,SAAS,CAACC,OAAO,CAACD,SAAS,CAACE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;MAE1ClC,qBAAY,CAAClB,OAAO,CAACgD,kBAAkB,CAAC,UAACC,GAAG,EAAK;QAC/C,QAAQA,GAAG;UACT,KAAK,gBAAgB;YAAE,OAAOd,OAAO,CAACC,OAAO,CAAC,GAAG,CAAC;UAClD,KAAK,eAAe;YAAE,OAAOD,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;UAClD,KAAK,gBAAgB;YAAE,OAAOD,OAAO,CAACC,OAAO,CAACc,SAAS,CAACH,YAAY,CAAC,CAAC,CAAC;UACvE;YAAS,OAAOZ,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;QACvC;MACF,CAAC,CAAC;MAEF,IAAIN,MAAM;MACV,MAAM,IAAAC,gBAAG,MAAAzB,kBAAA,CAAAuB,OAAA,EAAC,aAAY;QACpB,IAAMG,UAAU,GAAG,IAAAC,uBAAU,EAAC;UAAA,OAAM,IAAAC,2BAAkB,EAAC,CAAC;QAAA,EAAC;QACzDJ,MAAM,GAAGE,UAAU,CAACF,MAAM;QAC1B,MAAM,IAAIK,OAAO,CAAC,UAAAC,OAAO;UAAA,OAAIC,UAAU,CAACD,OAAO,EAAE,CAAC,CAAC;QAAA,EAAC;MACtD,CAAC,EAAC;MAEFE,MAAM,CAACR,MAAM,CAACS,OAAO,CAACC,aAAa,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;MAC5CH,MAAM,CAACR,MAAM,CAACS,OAAO,CAACG,YAAY,CAAC,CAACD,IAAI,CAAC,CAAC,CAAC;MAC3CH,MAAM,CAACpB,qBAAY,CAACf,OAAO,CAAC,CAACkD,oBAAoB,CAAC,eAAe,EAAE,GAAG,CAAC;MACvEf,MAAM,CAACpB,qBAAY,CAACf,OAAO,CAAC,CAACkD,oBAAoB,CAAC,gBAAgB,EAAE1C,QAAQ,CAACoC,YAAY,CAAC,CAAC,CAAC;IAC9F,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFhC,QAAQ,CAAC,eAAe,EAAE,YAAM;IAC9Ba,IAAI,CAAC,mDAAmD,MAAAtB,kBAAA,CAAAuB,OAAA,EAAE,aAAY;MACpE,IAAIC,MAAM;MACV,MAAM,IAAAC,gBAAG,MAAAzB,kBAAA,CAAAuB,OAAA,EAAC,aAAY;QACpB,IAAMG,UAAU,GAAG,IAAAC,uBAAU,EAAC;UAAA,OAAM,IAAAC,2BAAkB,EAAC,CAAC;QAAA,EAAC;QACzDJ,MAAM,GAAGE,UAAU,CAACF,MAAM;QAC1B,MAAM,IAAIK,OAAO,CAAC,UAAAC,OAAO;UAAA,OAAIC,UAAU,CAACD,OAAO,EAAE,CAAC,CAAC;QAAA,EAAC;MACtD,CAAC,EAAC;MAGF,IAAAL,gBAAG,EAAC,YAAM;QACRD,MAAM,CAACS,OAAO,CAACe,YAAY,CAAC,YAAY,CAAC;MAC3C,CAAC,CAAC;MAGF,IAAMC,cAAc,GAAG5C,QAAQ,CAACU,OAAO,CAAC,CAAC,GAAI,CAAC,GAAG,EAAE,GAAG,IAAK;MAC3DP,MAAM,CAACF,IAAI,CAACQ,GAAG,GAAGnB,IAAI,CAACC,EAAE,CAAC;QAAA,OAAMqD,cAAc;MAAA,EAAC;MAG/C,MAAM,IAAAxB,gBAAG,MAAAzB,kBAAA,CAAAuB,OAAA,EAAC,aAAY;QACpB,MAAMC,MAAM,CAACS,OAAO,CAACiB,UAAU,CAAC,CAAC;MACnC,CAAC,EAAC;MAEFlB,MAAM,CAACR,MAAM,CAACS,OAAO,CAACG,YAAY,CAAC,CAACD,IAAI,CAAC,CAAC,CAAC;MAC3CH,MAAM,CAACpB,qBAAY,CAACf,OAAO,CAAC,CAACkD,oBAAoB,CAAC,eAAe,EAAE,GAAG,CAAC;MACvEf,MAAM,CAACpB,qBAAY,CAACf,OAAO,CAAC,CAACkD,oBAAoB,CAAC,gBAAgB,EAAE1C,QAAQ,CAACoC,YAAY,CAAC,CAAC,CAAC;IAC9F,CAAC,EAAC;IAEFnB,IAAI,CAAC,sEAAsE,MAAAtB,kBAAA,CAAAuB,OAAA,EAAE,aAAY;MAEvF5B,IAAI,CAACgB,aAAa,CAAC,CAAC;MACpBC,qBAAY,CAAClB,OAAO,CAACmB,iBAAiB,CAAC,IAAI,CAAC;MAC5CD,qBAAY,CAACf,OAAO,CAACgB,iBAAiB,CAAC,CAAC;MAExC,IAAIW,MAAM;MACV,MAAM,IAAAC,gBAAG,MAAAzB,kBAAA,CAAAuB,OAAA,EAAC,aAAY;QACpB,IAAMG,UAAU,GAAG,IAAAC,uBAAU,EAAC;UAAA,OAAM,IAAAC,2BAAkB,EAAC,CAAC;QAAA,EAAC;QACzDJ,MAAM,GAAGE,UAAU,CAACF,MAAM;QAC1B,MAAM,IAAIK,OAAO,CAAC,UAAAC,OAAO;UAAA,OAAIC,UAAU,CAACD,OAAO,EAAE,CAAC,CAAC;QAAA,EAAC;MACtD,CAAC,EAAC;MAGF,IAAAL,gBAAG,EAAC,YAAM;QACRD,MAAM,CAACS,OAAO,CAACe,YAAY,CAAC,CAAC;MAC/B,CAAC,CAAC;MAGF,IAAMC,cAAc,GAAG5C,QAAQ,CAACU,OAAO,CAAC,CAAC,GAAI,EAAE,GAAG,IAAK;MACvDP,MAAM,CAACF,IAAI,CAACQ,GAAG,GAAGnB,IAAI,CAACC,EAAE,CAAC;QAAA,OAAMqD,cAAc;MAAA,EAAC;MAG/C,MAAM,IAAAxB,gBAAG,MAAAzB,kBAAA,CAAAuB,OAAA,EAAC,aAAY;QACpB,MAAMC,MAAM,CAACS,OAAO,CAACiB,UAAU,CAAC,CAAC;MACnC,CAAC,EAAC;MAEFlB,MAAM,CAACR,MAAM,CAACS,OAAO,CAACG,YAAY,CAAC,CAACD,IAAI,CAAC,CAAC,CAAC;MAE3CH,MAAM,CAACpB,qBAAY,CAACf,OAAO,CAAC,CAACsD,GAAG,CAACJ,oBAAoB,CAAC,eAAe,EAAEf,MAAM,CAACoB,cAAc,CAAC,QAAQ,CAAC,CAAC;IACzG,CAAC,EAAC;IAEF9B,IAAI,CAAC,+DAA+D,MAAAtB,kBAAA,CAAAuB,OAAA,EAAE,aAAY;MAEhF5B,IAAI,CAACgB,aAAa,CAAC,CAAC;MACpBC,qBAAY,CAAClB,OAAO,CAACmB,iBAAiB,CAAC,IAAI,CAAC;MAC5CD,qBAAY,CAACf,OAAO,CAACgB,iBAAiB,CAAC,CAAC;MAExC,IAAIW,MAAM;MACV,MAAM,IAAAC,gBAAG,MAAAzB,kBAAA,CAAAuB,OAAA,EAAC,aAAY;QACpB,IAAMG,UAAU,GAAG,IAAAC,uBAAU,EAAC;UAAA,OAAM,IAAAC,2BAAkB,EAAC,CAAC;QAAA,EAAC;QACzDJ,MAAM,GAAGE,UAAU,CAACF,MAAM;QAC1B,MAAM,IAAIK,OAAO,CAAC,UAAAC,OAAO;UAAA,OAAIC,UAAU,CAACD,OAAO,EAAE,CAAC,CAAC;QAAA,EAAC;MACtD,CAAC,EAAC;MAEF,MAAM,IAAAL,gBAAG,MAAAzB,kBAAA,CAAAuB,OAAA,EAAC,aAAY;QACpB,MAAMC,MAAM,CAACS,OAAO,CAACiB,UAAU,CAAC,CAAC;MACnC,CAAC,EAAC;MAEFlB,MAAM,CAACR,MAAM,CAACS,OAAO,CAACG,YAAY,CAAC,CAACD,IAAI,CAAC,CAAC,CAAC;MAE3C,IAAMkB,YAAY,GAAGzC,qBAAY,CAACf,OAAO,CAACJ,IAAI,CAAC6D,KAAK;MACpD,IAAMC,YAAY,GAAGF,YAAY,CAACG,MAAM,CAAC,UAAAC,IAAI;QAAA,OAC3CA,IAAI,CAAC,CAAC,CAAC,KAAK,eAAe,IAAIC,QAAQ,CAACD,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;MAAA,CACtD,CAAC;MACDzB,MAAM,CAACuB,YAAY,CAAC,CAACI,YAAY,CAAC,CAAC,CAAC;IACtC,CAAC,EAAC;IAEFrC,IAAI,CAAC,kDAAkD,MAAAtB,kBAAA,CAAAuB,OAAA,EAAE,aAAY;MAEnEX,qBAAY,CAAClB,OAAO,CAACgD,kBAAkB,CAAC,UAACC,GAAG,EAAK;QAC/C,QAAQA,GAAG;UACT,KAAK,eAAe;YAAE,OAAOd,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;UAClD,KAAK,gBAAgB;YAAE,OAAOD,OAAO,CAACC,OAAO,CAACzB,QAAQ,CAACoC,YAAY,CAAC,CAAC,CAAC;UACtE;YAAS,OAAOZ,OAAO,CAACC,OAAO,CAAC,GAAG,CAAC;QACtC;MACF,CAAC,CAAC;MAEF,IAAIN,MAAM;MACV,MAAM,IAAAC,gBAAG,MAAAzB,kBAAA,CAAAuB,OAAA,EAAC,aAAY;QACpB,IAAMG,UAAU,GAAG,IAAAC,uBAAU,EAAC;UAAA,OAAM,IAAAC,2BAAkB,EAAC,CAAC;QAAA,EAAC;QACzDJ,MAAM,GAAGE,UAAU,CAACF,MAAM;QAC1B,MAAM,IAAIK,OAAO,CAAC,UAAAC,OAAO;UAAA,OAAIC,UAAU,CAACD,OAAO,EAAE,CAAC,CAAC;QAAA,EAAC;MACtD,CAAC,EAAC;MAEFE,MAAM,CAACR,MAAM,CAACS,OAAO,CAACG,YAAY,CAAC,CAACD,IAAI,CAAC,EAAE,CAAC;MAG5C,IAAAV,gBAAG,EAAC,YAAM;QACRD,MAAM,CAACS,OAAO,CAACe,YAAY,CAAC,CAAC;MAC/B,CAAC,CAAC;MAEF,IAAMC,cAAc,GAAG5C,QAAQ,CAACU,OAAO,CAAC,CAAC,GAAI,EAAE,GAAG,EAAE,GAAG,IAAK;MAC5DP,MAAM,CAACF,IAAI,CAACQ,GAAG,GAAGnB,IAAI,CAACC,EAAE,CAAC;QAAA,OAAMqD,cAAc;MAAA,EAAC;MAE/C,MAAM,IAAAxB,gBAAG,MAAAzB,kBAAA,CAAAuB,OAAA,EAAC,aAAY;QACpB,MAAMC,MAAM,CAACS,OAAO,CAACiB,UAAU,CAAC,CAAC;MACnC,CAAC,EAAC;MAEFlB,MAAM,CAACR,MAAM,CAACS,OAAO,CAACG,YAAY,CAAC,CAACD,IAAI,CAAC,EAAE,CAAC;MAC5CH,MAAM,CAACpB,qBAAY,CAACf,OAAO,CAAC,CAACkD,oBAAoB,CAAC,eAAe,EAAE,IAAI,CAAC;IAC1E,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFtC,QAAQ,CAAC,cAAc,EAAE,YAAM;IAC7Ba,IAAI,CAAC,kCAAkC,MAAAtB,kBAAA,CAAAuB,OAAA,EAAE,aAAY;MACnDX,qBAAY,CAAClB,OAAO,CAACgD,kBAAkB,CAAC,UAACC,GAAG,EAAK;QAC/C,IAAIA,GAAG,KAAK,oBAAoB,EAAE,OAAOd,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;QAC9D,OAAOD,OAAO,CAACC,OAAO,CAAC,GAAG,CAAC;MAC7B,CAAC,CAAC;MAEF,IAAIN,MAAM;MACV,MAAM,IAAAC,gBAAG,MAAAzB,kBAAA,CAAAuB,OAAA,EAAC,aAAY;QACpB,IAAMG,UAAU,GAAG,IAAAC,uBAAU,EAAC;UAAA,OAAM,IAAAC,2BAAkB,EAAC,CAAC;QAAA,EAAC;QACzDJ,MAAM,GAAGE,UAAU,CAACF,MAAM;QAC1B,MAAM,IAAIK,OAAO,CAAC,UAAAC,OAAO;UAAA,OAAIC,UAAU,CAACD,OAAO,EAAE,CAAC,CAAC;QAAA,EAAC;MACtD,CAAC,EAAC;MAEF,MAAM,IAAAL,gBAAG,MAAAzB,kBAAA,CAAAuB,OAAA,EAAC,aAAY;QACpB,MAAMC,MAAM,CAACS,OAAO,CAAC2B,YAAY,CAAC,CAAC;MACrC,CAAC,EAAC;MAEF5B,MAAM,CAACR,MAAM,CAACS,OAAO,CAACC,aAAa,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;MAC5CH,MAAM,CAACpB,qBAAY,CAACf,OAAO,CAAC,CAACkD,oBAAoB,CAAC,gBAAgB,EAAE,GAAG,CAAC;MACxEf,MAAM,CAACpB,qBAAY,CAACf,OAAO,CAAC,CAACkD,oBAAoB,CAAC,oBAAoB,EAAE1C,QAAQ,CAACoC,YAAY,CAAC,CAAC,CAAC;IAClG,CAAC,EAAC;IAEFnB,IAAI,CAAC,2CAA2C,MAAAtB,kBAAA,CAAAuB,OAAA,EAAE,aAAY;MAC5D,IAAMqB,SAAS,GAAG,IAAItC,IAAI,CAACD,QAAQ,CAAC;MACpCuC,SAAS,CAACC,OAAO,CAACD,SAAS,CAACE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;MAE1ClC,qBAAY,CAAClB,OAAO,CAACgD,kBAAkB,CAAC,UAACC,GAAG,EAAK;QAC/C,QAAQA,GAAG;UACT,KAAK,gBAAgB;YAAE,OAAOd,OAAO,CAACC,OAAO,CAAC,GAAG,CAAC;UAClD,KAAK,oBAAoB;YAAE,OAAOD,OAAO,CAACC,OAAO,CAACc,SAAS,CAACH,YAAY,CAAC,CAAC,CAAC;UAC3E;YAAS,OAAOZ,OAAO,CAACC,OAAO,CAAC,GAAG,CAAC;QACtC;MACF,CAAC,CAAC;MAEF,IAAIN,MAAM;MACV,MAAM,IAAAC,gBAAG,MAAAzB,kBAAA,CAAAuB,OAAA,EAAC,aAAY;QACpB,IAAMG,UAAU,GAAG,IAAAC,uBAAU,EAAC;UAAA,OAAM,IAAAC,2BAAkB,EAAC,CAAC;QAAA,EAAC;QACzDJ,MAAM,GAAGE,UAAU,CAACF,MAAM;QAC1B,MAAM,IAAIK,OAAO,CAAC,UAAAC,OAAO;UAAA,OAAIC,UAAU,CAACD,OAAO,EAAE,CAAC,CAAC;QAAA,EAAC;MACtD,CAAC,EAAC;MAEF,MAAM,IAAAL,gBAAG,MAAAzB,kBAAA,CAAAuB,OAAA,EAAC,aAAY;QACpB,MAAMC,MAAM,CAACS,OAAO,CAAC2B,YAAY,CAAC,CAAC;MACrC,CAAC,EAAC;MAEF5B,MAAM,CAACR,MAAM,CAACS,OAAO,CAACC,aAAa,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;MAC5CH,MAAM,CAACpB,qBAAY,CAACf,OAAO,CAAC,CAACkD,oBAAoB,CAAC,gBAAgB,EAAE,GAAG,CAAC;IAC1E,CAAC,EAAC;IAEFzB,IAAI,CAAC,2CAA2C,MAAAtB,kBAAA,CAAAuB,OAAA,EAAE,aAAY;MAC5D,IAAMsC,UAAU,GAAG,IAAIvD,IAAI,CAACD,QAAQ,CAAC;MACrCwD,UAAU,CAAChB,OAAO,CAACgB,UAAU,CAACf,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;MAE5ClC,qBAAY,CAAClB,OAAO,CAACgD,kBAAkB,CAAC,UAACC,GAAG,EAAK;QAC/C,QAAQA,GAAG;UACT,KAAK,gBAAgB;YAAE,OAAOd,OAAO,CAACC,OAAO,CAAC,GAAG,CAAC;UAClD,KAAK,oBAAoB;YAAE,OAAOD,OAAO,CAACC,OAAO,CAAC+B,UAAU,CAACpB,YAAY,CAAC,CAAC,CAAC;UAC5E;YAAS,OAAOZ,OAAO,CAACC,OAAO,CAAC,GAAG,CAAC;QACtC;MACF,CAAC,CAAC;MAEF,IAAIN,MAAM;MACV,MAAM,IAAAC,gBAAG,MAAAzB,kBAAA,CAAAuB,OAAA,EAAC,aAAY;QACpB,IAAMG,UAAU,GAAG,IAAAC,uBAAU,EAAC;UAAA,OAAM,IAAAC,2BAAkB,EAAC,CAAC;QAAA,EAAC;QACzDJ,MAAM,GAAGE,UAAU,CAACF,MAAM;QAC1B,MAAM,IAAIK,OAAO,CAAC,UAAAC,OAAO;UAAA,OAAIC,UAAU,CAACD,OAAO,EAAE,CAAC,CAAC;QAAA,EAAC;MACtD,CAAC,EAAC;MAEF,MAAM,IAAAL,gBAAG,MAAAzB,kBAAA,CAAAuB,OAAA,EAAC,aAAY;QACpB,MAAMC,MAAM,CAACS,OAAO,CAAC2B,YAAY,CAAC,CAAC;MACrC,CAAC,EAAC;MAEF5B,MAAM,CAACR,MAAM,CAACS,OAAO,CAACC,aAAa,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;MAC5CH,MAAM,CAACpB,qBAAY,CAACf,OAAO,CAAC,CAACkD,oBAAoB,CAAC,gBAAgB,EAAE,GAAG,CAAC;IAC1E,CAAC,EAAC;IAEFzB,IAAI,CAAC,+DAA+D,MAAAtB,kBAAA,CAAAuB,OAAA,EAAE,aAAY;MAChF,IAAMiB,KAAK,GAAGnC,QAAQ,CAACoC,YAAY,CAAC,CAAC;MAErC7B,qBAAY,CAAClB,OAAO,CAACgD,kBAAkB,CAAC,UAACC,GAAG,EAAK;QAC/C,QAAQA,GAAG;UACT,KAAK,gBAAgB;YAAE,OAAOd,OAAO,CAACC,OAAO,CAAC,GAAG,CAAC;UAClD,KAAK,oBAAoB;YAAE,OAAOD,OAAO,CAACC,OAAO,CAACU,KAAK,CAAC;UACxD;YAAS,OAAOX,OAAO,CAACC,OAAO,CAAC,GAAG,CAAC;QACtC;MACF,CAAC,CAAC;MAEF,IAAIN,MAAM;MACV,MAAM,IAAAC,gBAAG,MAAAzB,kBAAA,CAAAuB,OAAA,EAAC,aAAY;QACpB,IAAMG,UAAU,GAAG,IAAAC,uBAAU,EAAC;UAAA,OAAM,IAAAC,2BAAkB,EAAC,CAAC;QAAA,EAAC;QACzDJ,MAAM,GAAGE,UAAU,CAACF,MAAM;QAC1B,MAAM,IAAIK,OAAO,CAAC,UAAAC,OAAO;UAAA,OAAIC,UAAU,CAACD,OAAO,EAAE,CAAC,CAAC;QAAA,EAAC;MACtD,CAAC,EAAC;MAEF,IAAMgC,aAAa,GAAGtC,MAAM,CAACS,OAAO,CAACC,aAAa;MAElD,MAAM,IAAAT,gBAAG,MAAAzB,kBAAA,CAAAuB,OAAA,EAAC,aAAY;QACpB,MAAMC,MAAM,CAACS,OAAO,CAAC2B,YAAY,CAAC,CAAC;MACrC,CAAC,EAAC;MAEF5B,MAAM,CAACR,MAAM,CAACS,OAAO,CAACC,aAAa,CAAC,CAACC,IAAI,CAAC2B,aAAa,CAAC;MAExD,IAAMC,WAAW,GAAGnD,qBAAY,CAACf,OAAO,CAACJ,IAAI,CAAC6D,KAAK,CAACE,MAAM,CAAC,UAAAC,IAAI;QAAA,OAAIA,IAAI,CAAC,CAAC,CAAC,KAAK,gBAAgB;MAAA,EAAC;MAChGzB,MAAM,CAAC+B,WAAW,CAAC,CAACJ,YAAY,CAAC,CAAC,CAAC;IACrC,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFlD,QAAQ,CAAC,sBAAsB,EAAE,YAAM;IACrCa,IAAI,CAAC,iDAAiD,MAAAtB,kBAAA,CAAAuB,OAAA,EAAE,aAAY;MAClE,IAAMyC,SAAS,GAAG,CAChB;QAAEC,MAAM,EAAE,CAAC;QAAEC,QAAQ,EAAE;MAAK,CAAC,EAC7B;QAAED,MAAM,EAAE,CAAC;QAAEC,QAAQ,EAAE;MAAe,CAAC,EACvC;QAAED,MAAM,EAAE,CAAC;QAAEC,QAAQ,EAAE;MAAe,CAAC,EACvC;QAAED,MAAM,EAAE,CAAC;QAAEC,QAAQ,EAAE;MAAiB,CAAC,EACzC;QAAED,MAAM,EAAE,EAAE;QAAEC,QAAQ,EAAE;MAAiB,CAAC,CAC3C;MAAC,IAAAC,KAAA,aAAAA,MAAAC,QAAA,EAEgC;QAEhCzE,IAAI,CAACgB,aAAa,CAAC,CAAC;QACpBC,qBAAY,CAAClB,OAAO,CAACgD,kBAAkB,CAAC,UAACC,GAAG,EAAK;UAC/C,IAAIA,GAAG,KAAK,gBAAgB,EAAE,OAAOd,OAAO,CAACC,OAAO,CAACsC,QAAQ,CAACH,MAAM,CAACI,QAAQ,CAAC,CAAC,CAAC;UAChF,OAAOxC,OAAO,CAACC,OAAO,CAAC,GAAG,CAAC;QAC7B,CAAC,CAAC;QAEF,IAAIN,MAAM;QACV,MAAM,IAAAC,gBAAG,MAAAzB,kBAAA,CAAAuB,OAAA,EAAC,aAAY;UACpB,IAAMG,UAAU,GAAG,IAAAC,uBAAU,EAAC;YAAA,OAAM,IAAAC,2BAAkB,EAAC,CAAC;UAAA,EAAC;UACzDJ,MAAM,GAAGE,UAAU,CAACF,MAAM;UAC1B,MAAM,IAAIK,OAAO,CAAC,UAAAC,OAAO;YAAA,OAAIC,UAAU,CAACD,OAAO,EAAE,CAAC,CAAC;UAAA,EAAC;QACtD,CAAC,EAAC;QAEFE,MAAM,CAACR,MAAM,CAACS,OAAO,CAACK,WAAW,CAAC,CAACH,IAAI,CAACiC,QAAQ,CAACF,QAAQ,CAAC;MAC5D,CAAC;MAhBD,KAAK,IAAME,QAAQ,IAAIJ,SAAS;QAAA,OAAAG,KAAA,CAAAC,QAAA;MAAA;IAiBlC,CAAC,EAAC;IAEF9C,IAAI,CAAC,6CAA6C,MAAAtB,kBAAA,CAAAuB,OAAA,EAAE,aAAY;MAC9D,IAAMyC,SAAS,GAAG,CAChB;QAAEM,OAAO,EAAE,CAAC;QAAEJ,QAAQ,EAAE;MAAO,CAAC,EAChC;QAAEI,OAAO,EAAE,EAAE;QAAEJ,QAAQ,EAAE;MAAQ,CAAC,EAClC;QAAEI,OAAO,EAAE,EAAE;QAAEJ,QAAQ,EAAE;MAAK,CAAC,EAC/B;QAAEI,OAAO,EAAE,EAAE;QAAEJ,QAAQ,EAAE;MAAU,CAAC,EACpC;QAAEI,OAAO,EAAE,GAAG;QAAEJ,QAAQ,EAAE;MAAK,CAAC,EAChC;QAAEI,OAAO,EAAE,GAAG;QAAEJ,QAAQ,EAAE;MAAU,CAAC,CACtC;MAAC,IAAAK,MAAA,aAAAA,OAAAH,QAAA,EAEgC;QAEhCzE,IAAI,CAACgB,aAAa,CAAC,CAAC;QACpBC,qBAAY,CAAClB,OAAO,CAACgD,kBAAkB,CAAC,UAACC,GAAG,EAAK;UAC/C,IAAIA,GAAG,KAAK,eAAe,EAAE,OAAOd,OAAO,CAACC,OAAO,CAACsC,QAAQ,CAACE,OAAO,CAACD,QAAQ,CAAC,CAAC,CAAC;UAChF,IAAI1B,GAAG,KAAK,gBAAgB,EAAE,OAAOd,OAAO,CAACC,OAAO,CAACzB,QAAQ,CAACoC,YAAY,CAAC,CAAC,CAAC;UAC7E,OAAOZ,OAAO,CAACC,OAAO,CAAC,GAAG,CAAC;QAC7B,CAAC,CAAC;QAEF,IAAIN,MAAM;QACV,MAAM,IAAAC,gBAAG,MAAAzB,kBAAA,CAAAuB,OAAA,EAAC,aAAY;UACpB,IAAMG,UAAU,GAAG,IAAAC,uBAAU,EAAC;YAAA,OAAM,IAAAC,2BAAkB,EAAC,CAAC;UAAA,EAAC;UACzDJ,MAAM,GAAGE,UAAU,CAACF,MAAM;UAC1B,MAAM,IAAIK,OAAO,CAAC,UAAAC,OAAO;YAAA,OAAIC,UAAU,CAACD,OAAO,EAAE,CAAC,CAAC;UAAA,EAAC;QACtD,CAAC,EAAC;QAEFE,MAAM,CAACR,MAAM,CAACS,OAAO,CAACI,aAAa,CAAC,CAACF,IAAI,CAACiC,QAAQ,CAACF,QAAQ,CAAC;MAC9D,CAAC;MAjBD,KAAK,IAAME,QAAQ,IAAIJ,SAAS;QAAA,OAAAO,MAAA,CAAAH,QAAA;MAAA;IAkBlC,CAAC,EAAC;EACJ,CAAC,CAAC;EAEF3D,QAAQ,CAAC,qBAAqB,EAAE,YAAM;IACpCa,IAAI,CAAC,qDAAqD,MAAAtB,kBAAA,CAAAuB,OAAA,EAAE,aAAY;MACtEX,qBAAY,CAAClB,OAAO,CAAC8E,iBAAiB,CAAC,IAAIC,KAAK,CAAC,eAAe,CAAC,CAAC;MAElE,IAAIjD,MAAM;MACV,MAAM,IAAAC,gBAAG,MAAAzB,kBAAA,CAAAuB,OAAA,EAAC,aAAY;QACpB,IAAMG,UAAU,GAAG,IAAAC,uBAAU,EAAC;UAAA,OAAM,IAAAC,2BAAkB,EAAC,CAAC;QAAA,EAAC;QACzDJ,MAAM,GAAGE,UAAU,CAACF,MAAM;QAE1B,MAAM,IAAIK,OAAO,CAAC,UAAAC,OAAO;UAAA,OAAIC,UAAU,CAACD,OAAO,EAAE,CAAC,CAAC;QAAA,EAAC;MACtD,CAAC,EAAC;MAEFE,MAAM,CAACR,MAAM,CAACS,OAAO,CAACC,aAAa,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;MAC5CH,MAAM,CAACR,MAAM,CAACS,OAAO,CAACG,YAAY,CAAC,CAACD,IAAI,CAAC,CAAC,CAAC;IAC7C,CAAC,EAAC;IAEFb,IAAI,CAAC,2CAA2C,MAAAtB,kBAAA,CAAAuB,OAAA,EAAE,aAAY;MAC5DX,qBAAY,CAACf,OAAO,CAAC2E,iBAAiB,CAAC,IAAIC,KAAK,CAAC,eAAe,CAAC,CAAC;MAElE,IAAIjD,MAAM;MACV,MAAM,IAAAC,gBAAG,MAAAzB,kBAAA,CAAAuB,OAAA,EAAC,aAAY;QACpB,IAAMG,UAAU,GAAG,IAAAC,uBAAU,EAAC;UAAA,OAAM,IAAAC,2BAAkB,EAAC,CAAC;QAAA,EAAC;QACzDJ,MAAM,GAAGE,UAAU,CAACF,MAAM;QAC1B,MAAM,IAAIK,OAAO,CAAC,UAAAC,OAAO;UAAA,OAAIC,UAAU,CAACD,OAAO,EAAE,CAAC,CAAC;QAAA,EAAC;MACtD,CAAC,EAAC;MAEF,IAAAL,gBAAG,EAAC,YAAM;QACRD,MAAM,CAACS,OAAO,CAACe,YAAY,CAAC,CAAC;MAC/B,CAAC,CAAC;MAEF,IAAMC,cAAc,GAAG5C,QAAQ,CAACU,OAAO,CAAC,CAAC,GAAI,CAAC,GAAG,EAAE,GAAG,IAAK;MAC3DP,MAAM,CAACF,IAAI,CAACQ,GAAG,GAAGnB,IAAI,CAACC,EAAE,CAAC;QAAA,OAAMqD,cAAc;MAAA,EAAC;MAG/C,MAAM,IAAAxB,gBAAG,MAAAzB,kBAAA,CAAAuB,OAAA,EAAC,aAAY;QACpB,MAAMC,MAAM,CAACS,OAAO,CAACiB,UAAU,CAAC,CAAC;MACnC,CAAC,EAAC;MAGFlB,MAAM,CAACR,MAAM,CAACS,OAAO,CAACG,YAAY,CAAC,CAACD,IAAI,CAAC,CAAC,CAAC;IAC7C,CAAC,EAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}