d51e7d44abe3c35af103c78a9d161fa2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _expoRouter = require("expo-router");
var _Container = _interopRequireWildcard(require("../../../components/layout/Container"));
var _ConversationHeader = _interopRequireDefault(require("./ConversationHeader"));
var _ConversationSelector = _interopRequireDefault(require("./ConversationSelector"));
var _ConversationProgress = _interopRequireDefault(require("./ConversationProgress"));
var _ConversationScenarioDescription = _interopRequireDefault(require("./ConversationScenarioDescription"));
var _ConversationMessageList = _interopRequireDefault(require("./ConversationMessageList"));
var _ConversationSuggestions = _interopRequireDefault(require("./ConversationSuggestions"));
var _ConversationInput = _interopRequireDefault(require("./ConversationInput"));
var _useConversation2 = _interopRequireDefault(require("./hooks/useConversation"));
var _useLastActivity2 = _interopRequireDefault(require("../../../hooks/useLastActivity"));
var _conversationDataHelper = require("../../../utils/conversation/conversationDataHelper");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var ConversationExercise = function ConversationExercise(_ref) {
  var route = _ref.route;
  var _ref2 = (route == null ? void 0 : route.params) || {},
    _ref2$level = _ref2.level,
    level = _ref2$level === void 0 ? "A1" : _ref2$level;
  var _useLastActivity = (0, _useLastActivity2.default)(),
    saveActivity = _useLastActivity.saveActivity;
  var levelColor = (0, _conversationDataHelper.getLevelColor)(level);
  var conversationData = (0, _react.useMemo)(function () {
    return (0, _conversationDataHelper.getConversationData)(level);
  }, [level]);
  var _useConversation = (0, _useConversation2.default)(conversationData, level),
    currentScenarioIndex = _useConversation.currentScenarioIndex,
    conversation = _useConversation.conversation,
    message = _useConversation.message,
    setMessage = _useConversation.setMessage,
    isTyping = _useConversation.isTyping,
    suggestions = _useConversation.suggestions,
    showHelp = _useConversation.showHelp,
    completedScenarios = _useConversation.completedScenarios,
    conversationHistory = _useConversation.conversationHistory,
    loaded = _useConversation.loaded,
    showDetailedProgress = _useConversation.showDetailedProgress,
    currentScenario = _useConversation.currentScenario,
    totalScenarios = _useConversation.totalScenarios,
    hasValidData = _useConversation.hasValidData,
    changeScenario = _useConversation.changeScenario,
    sendMessage = _useConversation.sendMessage,
    useSuggestion = _useConversation.useSuggestion,
    toggleHelp = _useConversation.toggleHelp,
    toggleDetailedProgress = _useConversation.toggleDetailedProgress,
    isConversationStarted = _useConversation.isConversationStarted,
    stats = _useConversation.stats,
    display = _useConversation.display;
  var activityMetadata = (0, _react.useMemo)(function () {
    return {
      scenario: currentScenarioIndex,
      step: stats.currentStep || 0,
      totalSteps: stats.totalSteps || 1,
      scenarioName: (currentScenario == null ? void 0 : currentScenario.title) || `Sc√©nario ${currentScenarioIndex + 1}`,
      totalScenarios: totalScenarios
    };
  }, [currentScenarioIndex, stats.currentStep, stats.totalSteps, currentScenario == null ? void 0 : currentScenario.title, totalScenarios]);
  var handleSaveActivity = (0, _react.useCallback)(function () {
    if (loaded && hasValidData && currentScenario && isConversationStarted) {
      saveActivity({
        title: "Conversations",
        level: level,
        type: "conversations",
        metadata: activityMetadata
      });
    }
  }, [loaded, hasValidData, currentScenario, isConversationStarted, level, saveActivity, activityMetadata]);
  (0, _react.useEffect)(function () {
    handleSaveActivity();
  }, [handleSaveActivity]);
  var handleBackPress = (0, _react.useCallback)(function () {
    _expoRouter.router.push({
      pathname: "/tabs/exerciseSelection",
      params: {
        level: level
      }
    });
  }, [level]);
  var handleScenarioChange = (0, _react.useCallback)(function (index) {
    return changeScenario(index);
  }, [changeScenario]);
  var handleSendMessage = (0, _react.useCallback)(function () {
    return sendMessage();
  }, [sendMessage]);
  var handleUseSuggestion = (0, _react.useCallback)(function (suggestion) {
    return useSuggestion(suggestion);
  }, [useSuggestion]);
  var handleToggleHelp = (0, _react.useCallback)(function () {
    return toggleHelp();
  }, [toggleHelp]);
  var handleToggleProgressDetails = (0, _react.useCallback)(function () {
    return toggleDetailedProgress();
  }, [toggleDetailedProgress]);
  var handleScenarioChangeCb = (0, _react.useCallback)(function () {
    return handleScenarioChange.apply(void 0, arguments);
  }, [handleScenarioChange]);
  var handleToggleProgressDetailsCb = (0, _react.useCallback)(function () {
    return handleToggleProgressDetails();
  }, [handleToggleProgressDetails]);
  var handleToggleHelpCb = (0, _react.useCallback)(function () {
    return handleToggleHelp();
  }, [handleToggleHelp]);
  var handleBackPressCb = (0, _react.useCallback)(function () {
    return handleBackPress();
  }, [handleBackPress]);
  if (!loaded || !hasValidData) {
    return (0, _jsxRuntime.jsx)(_Container.default, {
      testID: "conversation-container",
      safeArea: true,
      safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
      backgroundColor: "#FAFBFC",
      statusBarStyle: "dark-content"
    });
  }
  return (0, _jsxRuntime.jsxs)(_Container.default, {
    testID: "conversation-container",
    safeArea: true,
    safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
    backgroundColor: "#FAFBFC",
    statusBarStyle: "dark-content",
    withPadding: false,
    style: _style.default.safeArea,
    children: [(0, _jsxRuntime.jsx)(_ConversationHeader.default, {
      level: level,
      onBackPress: handleBackPressCb,
      levelColor: levelColor
    }), (0, _jsxRuntime.jsx)(_ConversationSelector.default, {
      scenarios: conversationData.exercises,
      selectedIndex: currentScenarioIndex,
      onSelectScenario: handleScenarioChangeCb,
      levelColor: levelColor
    }), (0, _jsxRuntime.jsx)(_ConversationProgress.default, {
      progress: stats.completionProgress,
      currentStep: stats.currentStep,
      totalSteps: stats.totalSteps,
      levelColor: levelColor,
      conversationData: conversationData.exercises,
      completedScenarios: completedScenarios,
      conversationHistory: conversationHistory,
      expanded: showDetailedProgress,
      onToggleExpand: handleToggleProgressDetailsCb,
      onScenarioPress: handleScenarioChangeCb
    }), (0, _jsxRuntime.jsx)(_ConversationScenarioDescription.default, {
      description: currentScenario.description,
      helpText: display.currentHelp,
      showHelp: showHelp,
      toggleHelp: handleToggleHelpCb,
      levelColor: levelColor
    }), (0, _jsxRuntime.jsxs)(_reactNative.KeyboardAvoidingView, {
      style: _style.default.chatContainer,
      behavior: _reactNative.Platform.OS === "ios" ? "padding" : "height",
      keyboardVerticalOffset: _reactNative.Platform.OS === "ios" ? 90 : 0,
      children: [(0, _jsxRuntime.jsx)(_ConversationMessageList.default, {
        messages: conversation,
        isTyping: isTyping,
        levelColor: levelColor
      }), (0, _jsxRuntime.jsx)(_ConversationSuggestions.default, {
        suggestions: suggestions,
        onPressSuggestion: handleUseSuggestion,
        levelColor: levelColor
      }), (0, _jsxRuntime.jsx)(_ConversationInput.default, {
        message: message,
        onChangeMessage: setMessage,
        onSendMessage: handleSendMessage,
        levelColor: levelColor
      })]
    })]
  });
};
var _default = exports.default = ConversationExercise;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,