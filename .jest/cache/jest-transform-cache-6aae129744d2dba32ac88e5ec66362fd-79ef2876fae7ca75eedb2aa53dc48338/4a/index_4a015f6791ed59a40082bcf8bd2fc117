57451b91a6ce2259256261d1dd80e731
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports._updatePropsJS = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _JSReanimated = _interopRequireDefault(require("./JSReanimated"));
var _webUtils = require("./webUtils");
var _propsAllowlists = require("../propsAllowlists");
var _logger = require("../logger");
var _errors = require("../errors");
var reanimatedJS = new _JSReanimated.default();
global._makeShareableClone = function () {
  throw new _errors.ReanimatedError('_makeShareableClone should never be called in JSReanimated.');
};
global._scheduleHostFunctionOnJS = function () {
  throw new _errors.ReanimatedError('_scheduleHostFunctionOnJS should never be called in JSReanimated.');
};
global._scheduleRemoteFunctionOnJS = function () {
  throw new _errors.ReanimatedError('_scheduleHostFunctionOnJS should never be called in JSReanimated.');
};
global._scheduleOnRuntime = function () {
  throw new _errors.ReanimatedError('_scheduleOnRuntime should never be called in JSReanimated.');
};
var _updatePropsJS = exports._updatePropsJS = function _updatePropsJS(updates, viewRef, isAnimatedProps) {
  if (viewRef) {
    var component = viewRef.getAnimatableRef ? viewRef.getAnimatableRef() : viewRef;
    var _Object$keys$reduce = Object.keys(updates).reduce(function (acc, key) {
        var value = updates[key];
        var index = typeof value === 'function' ? 1 : 0;
        acc[index][key] = value;
        return acc;
      }, [{}, {}]),
      _Object$keys$reduce2 = (0, _slicedToArray2.default)(_Object$keys$reduce, 1),
      rawStyles = _Object$keys$reduce2[0];
    if (typeof component.setNativeProps === 'function') {
      setNativeProps(component, rawStyles, isAnimatedProps);
    } else if (_webUtils.createReactDOMStyle !== undefined && component.style !== undefined) {
      updatePropsDOM(component, rawStyles, isAnimatedProps);
    } else if (Object.keys(component.props).length > 0) {
      Object.keys(component.props).forEach(function (key) {
        if (!rawStyles[key]) {
          return;
        }
        var dashedKey = key.replace(/[A-Z]/g, function (m) {
          return '-' + m.toLowerCase();
        });
        component._touchableNode.setAttribute(dashedKey, rawStyles[key]);
      });
    } else {
      var componentName = 'className' in component ? component == null ? void 0 : component.className : '';
      _logger.logger.warn(`It's not possible to manipulate the component ${componentName}`);
    }
  }
};
var setNativeProps = function setNativeProps(component, newProps, isAnimatedProps) {
  if (isAnimatedProps) {
    var uiProps = {};
    for (var key in newProps) {
      if (isNativeProp(key)) {
        uiProps[key] = newProps[key];
      }
    }
    component.setNativeProps == null || component.setNativeProps(uiProps);
  }
  var previousStyle = component.previousStyle ? component.previousStyle : {};
  var currentStyle = Object.assign({}, previousStyle, newProps);
  component.previousStyle = currentStyle;
  component.setNativeProps == null || component.setNativeProps({
    style: currentStyle
  });
};
var updatePropsDOM = function updatePropsDOM(component, style, isAnimatedProps) {
  var previousStyle = component.previousStyle ? component.previousStyle : {};
  var currentStyle = Object.assign({}, previousStyle, style);
  component.previousStyle = currentStyle;
  var domStyle = (0, _webUtils.createReactDOMStyle)(currentStyle);
  if (Array.isArray(domStyle.transform) && _webUtils.createTransformValue !== undefined) {
    domStyle.transform = (0, _webUtils.createTransformValue)(domStyle.transform);
  }
  if (_webUtils.createTextShadowValue !== undefined && (domStyle.textShadowColor || domStyle.textShadowRadius || domStyle.textShadowOffset)) {
    domStyle.textShadow = (0, _webUtils.createTextShadowValue)({
      textShadowColor: domStyle.textShadowColor,
      textShadowOffset: domStyle.textShadowOffset,
      textShadowRadius: domStyle.textShadowRadius
    });
  }
  for (var key in domStyle) {
    if (isAnimatedProps) {
      component.setAttribute(key, domStyle[key]);
    } else {
      component.style[key] = domStyle[key];
    }
  }
};
function isNativeProp(propName) {
  return !!_propsAllowlists.PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST[propName];
}
var _default = exports.default = reanimatedJS;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,