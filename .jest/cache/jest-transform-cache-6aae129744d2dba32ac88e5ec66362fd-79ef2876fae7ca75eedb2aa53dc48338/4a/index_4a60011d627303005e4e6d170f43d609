606bf96d9bcba7bc5669b056cca795df
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.areEqual = areEqual;
exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _expoLinearGradient = require("expo-linear-gradient");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var CategorySelector = function CategorySelector(_ref) {
  var _ref$categories = _ref.categories,
    categories = _ref$categories === void 0 ? [] : _ref$categories,
    selectedCategory = _ref.selectedCategory,
    onSelectCategory = _ref.onSelectCategory,
    _ref$primaryColor = _ref.primaryColor,
    primaryColor = _ref$primaryColor === void 0 ? "#5E60CE" : _ref$primaryColor;
  var styles = (0, _style.default)(primaryColor);
  var scrollViewRef = (0, _react.useRef)(null);
  var animationsRef = (0, _react.useRef)({});
  var pressAnimationsRef = (0, _react.useRef)({});
  var itemLayoutsRef = (0, _react.useRef)({});
  var isAnimatingRef = (0, _react.useRef)(false);
  var prevSelectedCategoryRef = (0, _react.useRef)(selectedCategory);
  (0, _react.useEffect)(function () {
    var newAnimations = {};
    var newPressAnimations = {};
    var newItemLayouts = {};
    categories.forEach(function (category) {
      newAnimations[category.id] = animationsRef.current[category.id] || new _reactNative.Animated.Value(selectedCategory === category.id ? 1 : 0);
      newPressAnimations[category.id] = pressAnimationsRef.current[category.id] || new _reactNative.Animated.Value(1);
      newItemLayouts[category.id] = itemLayoutsRef.current[category.id] || null;
    });
    animationsRef.current = newAnimations;
    pressAnimationsRef.current = newPressAnimations;
    itemLayoutsRef.current = newItemLayouts;
  }, [categories, selectedCategory]);
  var handlePressIn = (0, _react.useCallback)(function (categoryId) {
    var pressAnimation = pressAnimationsRef.current[categoryId];
    if (pressAnimation) {
      _reactNative.Animated.timing(pressAnimation, {
        toValue: 0.95,
        duration: 150,
        useNativeDriver: true
      }).start();
    }
  }, []);
  var handlePressOut = (0, _react.useCallback)(function (categoryId) {
    var pressAnimation = pressAnimationsRef.current[categoryId];
    if (pressAnimation) {
      _reactNative.Animated.timing(pressAnimation, {
        toValue: 1,
        duration: 150,
        useNativeDriver: true
      }).start();
    }
  }, []);
  var triggerAnimation = (0, _react.useCallback)(function () {
    var fromCategory = prevSelectedCategoryRef.current;
    var toCategory = selectedCategory;
    if (fromCategory === toCategory) {
      return;
    }
    isAnimatingRef.current = true;
    var animationsArray = [];
    var fromAnim = animationsRef.current[fromCategory];
    var toAnim = animationsRef.current[toCategory];
    if (fromAnim) {
      animationsArray.push(_reactNative.Animated.timing(fromAnim, {
        toValue: 0,
        duration: 200,
        useNativeDriver: false
      }));
    }
    if (toAnim) {
      animationsArray.push(_reactNative.Animated.timing(toAnim, {
        toValue: 1,
        duration: 300,
        useNativeDriver: false
      }));
    }
    if (animationsArray.length > 0) {
      _reactNative.Animated.parallel(animationsArray).start(function () {
        isAnimatingRef.current = false;
      });
    } else {
      isAnimatingRef.current = false;
    }
  }, [selectedCategory]);
  (0, _react.useEffect)(function () {
    triggerAnimation();
    prevSelectedCategoryRef.current = selectedCategory;
  }, [selectedCategory, triggerAnimation]);
  (0, _react.useEffect)(function () {
    if (scrollViewRef.current && selectedCategory && itemLayoutsRef.current[selectedCategory]) {
      var layout = itemLayoutsRef.current[selectedCategory];
      scrollViewRef.current.scrollTo({
        x: Math.max(0, layout.x - layout.width / 2),
        y: 0,
        animated: true
      });
    }
  }, [selectedCategory]);
  var handleCategoryPress = (0, _react.useCallback)(function (categoryId) {
    if (categoryId !== selectedCategory && !isAnimatingRef.current) {
      onSelectCategory == null || onSelectCategory(categoryId);
    }
  }, [selectedCategory, onSelectCategory]);
  var renderCategoryPill = (0, _react.useCallback)(function (category) {
    var isSelected = selectedCategory === category.id;
    var animation = animationsRef.current[category.id];
    var pressAnimation = pressAnimationsRef.current[category.id];
    var scale = (animation == null ? void 0 : animation.interpolate({
      inputRange: [0, 1],
      outputRange: [1, 1.05],
      extrapolate: 'clamp'
    })) || 1;
    var pressScale = (pressAnimation == null ? void 0 : pressAnimation.interpolate({
      inputRange: [0.95, 1],
      outputRange: [0.95, 1],
      extrapolate: 'clamp'
    })) || 1;
    var shadowOpacity = (animation == null ? void 0 : animation.interpolate({
      inputRange: [0, 1],
      outputRange: [0.1, 0.25],
      extrapolate: 'clamp'
    })) || 0.1;
    var borderWidth = (animation == null ? void 0 : animation.interpolate({
      inputRange: [0, 1],
      outputRange: [1, 2],
      extrapolate: 'clamp'
    })) || 1;
    return (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
      onLayout: function onLayout(event) {
        itemLayoutsRef.current[category.id] = event.nativeEvent.layout;
      },
      style: [styles.categoryItemWrapper, {
        transform: [{
          scale: _reactNative.Animated.multiply(scale, pressScale)
        }]
      }],
      children: (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: styles.categoryTouchable,
        onPress: function onPress() {
          return handleCategoryPress(category.id);
        },
        onPressIn: function onPressIn() {
          return handlePressIn(category.id);
        },
        onPressOut: function onPressOut() {
          return handlePressOut(category.id);
        },
        activeOpacity: 0.8,
        accessibilityRole: "button",
        accessibilityLabel: String(category.name),
        accessibilityState: {
          selected: isSelected
        },
        children: isSelected ? (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
          colors: [primaryColor, `${primaryColor}E6`, `${primaryColor}CC`],
          start: {
            x: 0,
            y: 0
          },
          end: {
            x: 1,
            y: 1
          },
          style: styles.selectedCategoryItem,
          children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.selectedInner,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.selectedCategoryText,
              children: category.name
            }), (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: styles.sparkleContainer,
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.sparkle,
                children: "\u2728"
              })
            })]
          })
        }) : (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
          style: [styles.categoryItem, {
            borderWidth: borderWidth,
            borderColor: `${primaryColor}20`,
            shadowOpacity: shadowOpacity
          }],
          children: (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [styles.categoryInner, {
              backgroundColor: `${primaryColor}08`
            }],
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: [styles.categoryText, {
                color: primaryColor
              }],
              children: category.name
            })
          })
        })
      })
    }, category.id);
  }, [selectedCategory, primaryColor, styles, handleCategoryPress, handlePressIn, handlePressOut]);
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: styles.container,
    children: (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
      colors: [`${primaryColor}04`, 'transparent', `${primaryColor}02`],
      start: {
        x: 0,
        y: 0
      },
      end: {
        x: 1,
        y: 0
      },
      style: styles.backgroundGradient,
      children: (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
        ref: scrollViewRef,
        horizontal: true,
        showsHorizontalScrollIndicator: false,
        contentContainerStyle: styles.scrollContent,
        style: styles.scrollView,
        children: categories.map(renderCategoryPill)
      })
    })
  });
};
CategorySelector.propTypes = {
  categories: _propTypes.default.arrayOf(_propTypes.default.shape({
    id: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]).isRequired,
    name: _propTypes.default.string.isRequired
  })).isRequired,
  selectedCategory: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  onSelectCategory: _propTypes.default.func,
  primaryColor: _propTypes.default.string
};
function areEqual(prevProps, nextProps) {
  if (prevProps.selectedCategory !== nextProps.selectedCategory || prevProps.primaryColor !== nextProps.primaryColor || prevProps.categories.length !== nextProps.categories.length) {
    return false;
  }
  if (prevProps.categories === nextProps.categories) {
    return true;
  }
  return prevProps.categories.every(function (cat, index) {
    var nextCat = nextProps.categories[index];
    return nextCat && cat.id === nextCat.id && cat.name === nextCat.name;
  });
}
var _default = exports.default = (0, _react.memo)(CategorySelector, areEqual);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlIiwiX2V4cG9MaW5lYXJHcmFkaWVudCIsIl9wcm9wVHlwZXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3N0eWxlIiwiX2pzeFJ1bnRpbWUiLCJDYXRlZ29yeVNlbGVjdG9yIiwiX3JlZiIsIl9yZWYkY2F0ZWdvcmllcyIsImNhdGVnb3JpZXMiLCJzZWxlY3RlZENhdGVnb3J5Iiwib25TZWxlY3RDYXRlZ29yeSIsIl9yZWYkcHJpbWFyeUNvbG9yIiwicHJpbWFyeUNvbG9yIiwic3R5bGVzIiwiY3JlYXRlU3R5bGVzIiwic2Nyb2xsVmlld1JlZiIsInVzZVJlZiIsImFuaW1hdGlvbnNSZWYiLCJwcmVzc0FuaW1hdGlvbnNSZWYiLCJpdGVtTGF5b3V0c1JlZiIsImlzQW5pbWF0aW5nUmVmIiwicHJldlNlbGVjdGVkQ2F0ZWdvcnlSZWYiLCJ1c2VFZmZlY3QiLCJuZXdBbmltYXRpb25zIiwibmV3UHJlc3NBbmltYXRpb25zIiwibmV3SXRlbUxheW91dHMiLCJmb3JFYWNoIiwiY2F0ZWdvcnkiLCJpZCIsImN1cnJlbnQiLCJBbmltYXRlZCIsIlZhbHVlIiwiaGFuZGxlUHJlc3NJbiIsInVzZUNhbGxiYWNrIiwiY2F0ZWdvcnlJZCIsInByZXNzQW5pbWF0aW9uIiwidGltaW5nIiwidG9WYWx1ZSIsImR1cmF0aW9uIiwidXNlTmF0aXZlRHJpdmVyIiwic3RhcnQiLCJoYW5kbGVQcmVzc091dCIsInRyaWdnZXJBbmltYXRpb24iLCJmcm9tQ2F0ZWdvcnkiLCJ0b0NhdGVnb3J5IiwiYW5pbWF0aW9uc0FycmF5IiwiZnJvbUFuaW0iLCJ0b0FuaW0iLCJwdXNoIiwibGVuZ3RoIiwicGFyYWxsZWwiLCJsYXlvdXQiLCJzY3JvbGxUbyIsIngiLCJNYXRoIiwibWF4Iiwid2lkdGgiLCJ5IiwiYW5pbWF0ZWQiLCJoYW5kbGVDYXRlZ29yeVByZXNzIiwicmVuZGVyQ2F0ZWdvcnlQaWxsIiwiaXNTZWxlY3RlZCIsImFuaW1hdGlvbiIsInNjYWxlIiwiaW50ZXJwb2xhdGUiLCJpbnB1dFJhbmdlIiwib3V0cHV0UmFuZ2UiLCJleHRyYXBvbGF0ZSIsInByZXNzU2NhbGUiLCJzaGFkb3dPcGFjaXR5IiwiYm9yZGVyV2lkdGgiLCJqc3giLCJWaWV3Iiwib25MYXlvdXQiLCJldmVudCIsIm5hdGl2ZUV2ZW50Iiwic3R5bGUiLCJjYXRlZ29yeUl0ZW1XcmFwcGVyIiwidHJhbnNmb3JtIiwibXVsdGlwbHkiLCJjaGlsZHJlbiIsIlRvdWNoYWJsZU9wYWNpdHkiLCJjYXRlZ29yeVRvdWNoYWJsZSIsIm9uUHJlc3MiLCJvblByZXNzSW4iLCJvblByZXNzT3V0IiwiYWN0aXZlT3BhY2l0eSIsImFjY2Vzc2liaWxpdHlSb2xlIiwiYWNjZXNzaWJpbGl0eUxhYmVsIiwiU3RyaW5nIiwibmFtZSIsImFjY2Vzc2liaWxpdHlTdGF0ZSIsInNlbGVjdGVkIiwiTGluZWFyR3JhZGllbnQiLCJjb2xvcnMiLCJlbmQiLCJzZWxlY3RlZENhdGVnb3J5SXRlbSIsImpzeHMiLCJzZWxlY3RlZElubmVyIiwiVGV4dCIsInNlbGVjdGVkQ2F0ZWdvcnlUZXh0Iiwic3BhcmtsZUNvbnRhaW5lciIsInNwYXJrbGUiLCJjYXRlZ29yeUl0ZW0iLCJib3JkZXJDb2xvciIsImNhdGVnb3J5SW5uZXIiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjYXRlZ29yeVRleHQiLCJjb2xvciIsImNvbnRhaW5lciIsImJhY2tncm91bmRHcmFkaWVudCIsIlNjcm9sbFZpZXciLCJyZWYiLCJob3Jpem9udGFsIiwic2hvd3NIb3Jpem9udGFsU2Nyb2xsSW5kaWNhdG9yIiwiY29udGVudENvbnRhaW5lclN0eWxlIiwic2Nyb2xsQ29udGVudCIsInNjcm9sbFZpZXciLCJtYXAiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJhcnJheU9mIiwic2hhcGUiLCJvbmVPZlR5cGUiLCJzdHJpbmciLCJudW1iZXIiLCJpc1JlcXVpcmVkIiwiZnVuYyIsImFyZUVxdWFsIiwicHJldlByb3BzIiwibmV4dFByb3BzIiwiZXZlcnkiLCJjYXQiLCJpbmRleCIsIm5leHRDYXQiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0IiwibWVtbyJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9jb21wb25lbnRzL2V4ZXJjaXNlLWNvbW1vbi9DYXRlZ29yeVNlbGVjdG9yL2luZGV4LmpzXHJcbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VDYWxsYmFjaywgbWVtbywgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgVmlldywgU2Nyb2xsVmlldywgVG91Y2hhYmxlT3BhY2l0eSwgVGV4dCwgQW5pbWF0ZWQgfSBmcm9tIFwicmVhY3QtbmF0aXZlXCI7XHJcbmltcG9ydCB7IExpbmVhckdyYWRpZW50IH0gZnJvbSBcImV4cG8tbGluZWFyLWdyYWRpZW50XCI7XHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XHJcbmltcG9ydCBjcmVhdGVTdHlsZXMgZnJvbSBcIi4vc3R5bGVcIjtcclxuXHJcbmNvbnN0IENhdGVnb3J5U2VsZWN0b3IgPSAoe1xyXG4gIGNhdGVnb3JpZXMgPSBbXSxcclxuICBzZWxlY3RlZENhdGVnb3J5LFxyXG4gIG9uU2VsZWN0Q2F0ZWdvcnksXHJcbiAgcHJpbWFyeUNvbG9yID0gXCIjNUU2MENFXCIsXHJcbn0pID0+IHtcclxuICBjb25zdCBzdHlsZXMgPSBjcmVhdGVTdHlsZXMocHJpbWFyeUNvbG9yKTtcclxuICBjb25zdCBzY3JvbGxWaWV3UmVmID0gdXNlUmVmKG51bGwpO1xyXG4gIFxyXG4gIGNvbnN0IGFuaW1hdGlvbnNSZWYgPSB1c2VSZWYoe30pO1xyXG4gIGNvbnN0IHByZXNzQW5pbWF0aW9uc1JlZiA9IHVzZVJlZih7fSk7XHJcbiAgY29uc3QgaXRlbUxheW91dHNSZWYgPSB1c2VSZWYoe30pO1xyXG4gIFxyXG4gIC8vIOKchSBDb3JyZWN0aW9uIDE6IFV0aWxpc2F0aW9uIGQndW5lIHJlZiBwb3VyIGfDqXJlciBsJ8OpdGF0IGQnYW5pbWF0aW9uIGRlIG1hbmnDqHJlIGZpYWJsZS5cclxuICAvLyBDJ2VzdCBsZSBcImdhcmRlLWZvdVwiIHF1aSB2YSBibG9xdWVyIGxlcyBjbGljcyByYXBpZGVzLlxyXG4gIGNvbnN0IGlzQW5pbWF0aW5nUmVmID0gdXNlUmVmKGZhbHNlKTtcclxuXHJcbiAgY29uc3QgcHJldlNlbGVjdGVkQ2F0ZWdvcnlSZWYgPSB1c2VSZWYoc2VsZWN0ZWRDYXRlZ29yeSk7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBjb25zdCBuZXdBbmltYXRpb25zID0ge307XHJcbiAgICBjb25zdCBuZXdQcmVzc0FuaW1hdGlvbnMgPSB7fTtcclxuICAgIGNvbnN0IG5ld0l0ZW1MYXlvdXRzID0ge307XHJcblxyXG4gICAgY2F0ZWdvcmllcy5mb3JFYWNoKGNhdGVnb3J5ID0+IHtcclxuICAgICAgbmV3QW5pbWF0aW9uc1tjYXRlZ29yeS5pZF0gPSBhbmltYXRpb25zUmVmLmN1cnJlbnRbY2F0ZWdvcnkuaWRdIHx8IG5ldyBBbmltYXRlZC5WYWx1ZShcclxuICAgICAgICBzZWxlY3RlZENhdGVnb3J5ID09PSBjYXRlZ29yeS5pZCA/IDEgOiAwXHJcbiAgICAgICk7XHJcbiAgICAgIG5ld1ByZXNzQW5pbWF0aW9uc1tjYXRlZ29yeS5pZF0gPSBwcmVzc0FuaW1hdGlvbnNSZWYuY3VycmVudFtjYXRlZ29yeS5pZF0gfHwgbmV3IEFuaW1hdGVkLlZhbHVlKDEpO1xyXG4gICAgICBuZXdJdGVtTGF5b3V0c1tjYXRlZ29yeS5pZF0gPSBpdGVtTGF5b3V0c1JlZi5jdXJyZW50W2NhdGVnb3J5LmlkXSB8fCBudWxsO1xyXG4gICAgfSk7XHJcblxyXG4gICAgYW5pbWF0aW9uc1JlZi5jdXJyZW50ID0gbmV3QW5pbWF0aW9ucztcclxuICAgIHByZXNzQW5pbWF0aW9uc1JlZi5jdXJyZW50ID0gbmV3UHJlc3NBbmltYXRpb25zO1xyXG4gICAgaXRlbUxheW91dHNSZWYuY3VycmVudCA9IG5ld0l0ZW1MYXlvdXRzO1xyXG5cclxuICB9LCBbY2F0ZWdvcmllcywgc2VsZWN0ZWRDYXRlZ29yeV0pO1xyXG5cclxuICBjb25zdCBoYW5kbGVQcmVzc0luID0gdXNlQ2FsbGJhY2soKGNhdGVnb3J5SWQpID0+IHtcclxuICAgIGNvbnN0IHByZXNzQW5pbWF0aW9uID0gcHJlc3NBbmltYXRpb25zUmVmLmN1cnJlbnRbY2F0ZWdvcnlJZF07XHJcbiAgICBpZiAocHJlc3NBbmltYXRpb24pIHtcclxuICAgICAgQW5pbWF0ZWQudGltaW5nKHByZXNzQW5pbWF0aW9uLCB7XHJcbiAgICAgICAgdG9WYWx1ZTogMC45NSxcclxuICAgICAgICBkdXJhdGlvbjogMTUwLFxyXG4gICAgICAgIHVzZU5hdGl2ZURyaXZlcjogdHJ1ZSxcclxuICAgICAgfSkuc3RhcnQoKTtcclxuICAgIH1cclxuICB9LCBbXSk7XHJcblxyXG4gIGNvbnN0IGhhbmRsZVByZXNzT3V0ID0gdXNlQ2FsbGJhY2soKGNhdGVnb3J5SWQpID0+IHtcclxuICAgIGNvbnN0IHByZXNzQW5pbWF0aW9uID0gcHJlc3NBbmltYXRpb25zUmVmLmN1cnJlbnRbY2F0ZWdvcnlJZF07XHJcbiAgICBpZiAocHJlc3NBbmltYXRpb24pIHtcclxuICAgICAgQW5pbWF0ZWQudGltaW5nKHByZXNzQW5pbWF0aW9uLCB7XHJcbiAgICAgICAgdG9WYWx1ZTogMSxcclxuICAgICAgICBkdXJhdGlvbjogMTUwLFxyXG4gICAgICAgIHVzZU5hdGl2ZURyaXZlcjogdHJ1ZSxcclxuICAgICAgfSkuc3RhcnQoKTtcclxuICAgIH1cclxuICB9LCBbXSk7XHJcblxyXG4gIGNvbnN0IHRyaWdnZXJBbmltYXRpb24gPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICBjb25zdCBmcm9tQ2F0ZWdvcnkgPSBwcmV2U2VsZWN0ZWRDYXRlZ29yeVJlZi5jdXJyZW50O1xyXG4gICAgY29uc3QgdG9DYXRlZ29yeSA9IHNlbGVjdGVkQ2F0ZWdvcnk7XHJcblxyXG4gICAgaWYgKGZyb21DYXRlZ29yeSA9PT0gdG9DYXRlZ29yeSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIOKchSBDb3JyZWN0aW9uIDI6IExlIGdhcmRlLWZvdSBlc3QgYWN0aXbDqSBhdSBkw6lidXQgZGUgbCdhbmltYXRpb24uXHJcbiAgICBpc0FuaW1hdGluZ1JlZi5jdXJyZW50ID0gdHJ1ZTtcclxuICAgIGNvbnN0IGFuaW1hdGlvbnNBcnJheSA9IFtdO1xyXG4gICAgY29uc3QgZnJvbUFuaW0gPSBhbmltYXRpb25zUmVmLmN1cnJlbnRbZnJvbUNhdGVnb3J5XTtcclxuICAgIGNvbnN0IHRvQW5pbSA9IGFuaW1hdGlvbnNSZWYuY3VycmVudFt0b0NhdGVnb3J5XTtcclxuXHJcbiAgICBpZiAoZnJvbUFuaW0pIHtcclxuICAgICAgYW5pbWF0aW9uc0FycmF5LnB1c2goXHJcbiAgICAgICAgQW5pbWF0ZWQudGltaW5nKGZyb21BbmltLCB7IHRvVmFsdWU6IDAsIGR1cmF0aW9uOiAyMDAsIHVzZU5hdGl2ZURyaXZlcjogZmFsc2UgfSlcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodG9BbmltKSB7XHJcbiAgICAgIGFuaW1hdGlvbnNBcnJheS5wdXNoKFxyXG4gICAgICAgIEFuaW1hdGVkLnRpbWluZyh0b0FuaW0sIHsgdG9WYWx1ZTogMSwgZHVyYXRpb246IDMwMCwgdXNlTmF0aXZlRHJpdmVyOiBmYWxzZSB9KVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChhbmltYXRpb25zQXJyYXkubGVuZ3RoID4gMCkge1xyXG4gICAgICBBbmltYXRlZC5wYXJhbGxlbChhbmltYXRpb25zQXJyYXkpLnN0YXJ0KCgpID0+IHtcclxuICAgICAgICAvLyDinIUgQ29ycmVjdGlvbiAzOiBMYSByZWYgZXN0IHLDqWluaXRpYWxpc8OpZSBzZXVsZW1lbnQgw6AgbGEgZmluIGRlIGwnYW5pbWF0aW9uLlxyXG4gICAgICAgIGlzQW5pbWF0aW5nUmVmLmN1cnJlbnQgPSBmYWxzZTtcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpc0FuaW1hdGluZ1JlZi5jdXJyZW50ID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgfSwgW3NlbGVjdGVkQ2F0ZWdvcnldKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIHRyaWdnZXJBbmltYXRpb24oKTtcclxuICAgIHByZXZTZWxlY3RlZENhdGVnb3J5UmVmLmN1cnJlbnQgPSBzZWxlY3RlZENhdGVnb3J5O1xyXG4gIH0sIFtzZWxlY3RlZENhdGVnb3J5LCB0cmlnZ2VyQW5pbWF0aW9uXSk7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAoc2Nyb2xsVmlld1JlZi5jdXJyZW50ICYmIHNlbGVjdGVkQ2F0ZWdvcnkgJiYgaXRlbUxheW91dHNSZWYuY3VycmVudFtzZWxlY3RlZENhdGVnb3J5XSkge1xyXG4gICAgICBjb25zdCBsYXlvdXQgPSBpdGVtTGF5b3V0c1JlZi5jdXJyZW50W3NlbGVjdGVkQ2F0ZWdvcnldO1xyXG4gICAgICBzY3JvbGxWaWV3UmVmLmN1cnJlbnQuc2Nyb2xsVG8oe1xyXG4gICAgICAgIHg6IE1hdGgubWF4KDAsIGxheW91dC54IC0gbGF5b3V0LndpZHRoIC8gMiksXHJcbiAgICAgICAgeTogMCxcclxuICAgICAgICBhbmltYXRlZDogdHJ1ZSxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfSwgW3NlbGVjdGVkQ2F0ZWdvcnldKTtcclxuXHJcbiAgY29uc3QgaGFuZGxlQ2F0ZWdvcnlQcmVzcyA9IHVzZUNhbGxiYWNrKChjYXRlZ29yeUlkKSA9PiB7XHJcbiAgICAvLyDinIUgQ29ycmVjdGlvbiA0OiBMZSBjb250csO0bGUgZGUgbCdhbmltYXRpb24gZW4gY291cnMgc2UgZmFpdCBpY2ksIGRlIG1hbmnDqHJlIHByw6l2ZW50aXZlLlxyXG4gICAgaWYgKGNhdGVnb3J5SWQgIT09IHNlbGVjdGVkQ2F0ZWdvcnkgJiYgIWlzQW5pbWF0aW5nUmVmLmN1cnJlbnQpIHtcclxuICAgICAgb25TZWxlY3RDYXRlZ29yeT8uKGNhdGVnb3J5SWQpO1xyXG4gICAgfVxyXG4gIH0sIFtzZWxlY3RlZENhdGVnb3J5LCBvblNlbGVjdENhdGVnb3J5XSk7XHJcblxyXG4gIGNvbnN0IHJlbmRlckNhdGVnb3J5UGlsbCA9IHVzZUNhbGxiYWNrKChjYXRlZ29yeSkgPT4ge1xyXG4gICAgY29uc3QgaXNTZWxlY3RlZCA9IHNlbGVjdGVkQ2F0ZWdvcnkgPT09IGNhdGVnb3J5LmlkO1xyXG4gICAgY29uc3QgYW5pbWF0aW9uID0gYW5pbWF0aW9uc1JlZi5jdXJyZW50W2NhdGVnb3J5LmlkXTtcclxuICAgIGNvbnN0IHByZXNzQW5pbWF0aW9uID0gcHJlc3NBbmltYXRpb25zUmVmLmN1cnJlbnRbY2F0ZWdvcnkuaWRdO1xyXG5cclxuICAgIGNvbnN0IHNjYWxlID0gYW5pbWF0aW9uPy5pbnRlcnBvbGF0ZSh7XHJcbiAgICAgIGlucHV0UmFuZ2U6IFswLCAxXSxcclxuICAgICAgb3V0cHV0UmFuZ2U6IFsxLCAxLjA1XSxcclxuICAgICAgZXh0cmFwb2xhdGU6ICdjbGFtcCcsXHJcbiAgICB9KSB8fCAxO1xyXG5cclxuICAgIGNvbnN0IHByZXNzU2NhbGUgPSBwcmVzc0FuaW1hdGlvbj8uaW50ZXJwb2xhdGUoe1xyXG4gICAgICBpbnB1dFJhbmdlOiBbMC45NSwgMV0sXHJcbiAgICAgIG91dHB1dFJhbmdlOiBbMC45NSwgMV0sXHJcbiAgICAgIGV4dHJhcG9sYXRlOiAnY2xhbXAnLFxyXG4gICAgfSkgfHwgMTtcclxuXHJcbiAgICBjb25zdCBzaGFkb3dPcGFjaXR5ID0gYW5pbWF0aW9uPy5pbnRlcnBvbGF0ZSh7XHJcbiAgICAgIGlucHV0UmFuZ2U6IFswLCAxXSxcclxuICAgICAgb3V0cHV0UmFuZ2U6IFswLjEsIDAuMjVdLFxyXG4gICAgICBleHRyYXBvbGF0ZTogJ2NsYW1wJyxcclxuICAgIH0pIHx8IDAuMTtcclxuXHJcbiAgICBjb25zdCBib3JkZXJXaWR0aCA9IGFuaW1hdGlvbj8uaW50ZXJwb2xhdGUoe1xyXG4gICAgICBpbnB1dFJhbmdlOiBbMCwgMV0sXHJcbiAgICAgIG91dHB1dFJhbmdlOiBbMSwgMl0sXHJcbiAgICAgIGV4dHJhcG9sYXRlOiAnY2xhbXAnLFxyXG4gICAgfSkgfHwgMTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8QW5pbWF0ZWQuVmlld1xyXG4gICAgICAgIGtleT17Y2F0ZWdvcnkuaWR9XHJcbiAgICAgICAgb25MYXlvdXQ9eyhldmVudCkgPT4ge1xyXG4gICAgICAgICAgaXRlbUxheW91dHNSZWYuY3VycmVudFtjYXRlZ29yeS5pZF0gPSBldmVudC5uYXRpdmVFdmVudC5sYXlvdXQ7XHJcbiAgICAgICAgfX1cclxuICAgICAgICBzdHlsZT17W1xyXG4gICAgICAgICAgc3R5bGVzLmNhdGVnb3J5SXRlbVdyYXBwZXIsXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogW3sgc2NhbGU6IEFuaW1hdGVkLm11bHRpcGx5KHNjYWxlLCBwcmVzc1NjYWxlKSB9XSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgXX1cclxuICAgICAgPlxyXG4gICAgICAgIDxUb3VjaGFibGVPcGFjaXR5XHJcbiAgICAgICAgICBzdHlsZT17c3R5bGVzLmNhdGVnb3J5VG91Y2hhYmxlfVxyXG4gICAgICAgICAgb25QcmVzcz17KCkgPT4gaGFuZGxlQ2F0ZWdvcnlQcmVzcyhjYXRlZ29yeS5pZCl9XHJcbiAgICAgICAgICBvblByZXNzSW49eygpID0+IGhhbmRsZVByZXNzSW4oY2F0ZWdvcnkuaWQpfVxyXG4gICAgICAgICAgb25QcmVzc091dD17KCkgPT4gaGFuZGxlUHJlc3NPdXQoY2F0ZWdvcnkuaWQpfVxyXG4gICAgICAgICAgYWN0aXZlT3BhY2l0eT17MC44fVxyXG4gICAgICAgICAgYWNjZXNzaWJpbGl0eVJvbGU9XCJidXR0b25cIlxyXG4gICAgICAgICAgYWNjZXNzaWJpbGl0eUxhYmVsPXtTdHJpbmcoY2F0ZWdvcnkubmFtZSl9XHJcbiAgICAgICAgICBhY2Nlc3NpYmlsaXR5U3RhdGU9e3sgc2VsZWN0ZWQ6IGlzU2VsZWN0ZWQgfX1cclxuICAgICAgICA+XHJcbiAgICAgICAgICB7aXNTZWxlY3RlZCA/IChcclxuICAgICAgICAgICAgPExpbmVhckdyYWRpZW50XHJcbiAgICAgICAgICAgICAgY29sb3JzPXtbcHJpbWFyeUNvbG9yLCBgJHtwcmltYXJ5Q29sb3J9RTZgLCBgJHtwcmltYXJ5Q29sb3J9Q0NgXX1cclxuICAgICAgICAgICAgICBzdGFydD17eyB4OiAwLCB5OiAwIH19XHJcbiAgICAgICAgICAgICAgZW5kPXt7IHg6IDEsIHk6IDEgfX1cclxuICAgICAgICAgICAgICBzdHlsZT17c3R5bGVzLnNlbGVjdGVkQ2F0ZWdvcnlJdGVtfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5zZWxlY3RlZElubmVyfT5cclxuICAgICAgICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMuc2VsZWN0ZWRDYXRlZ29yeVRleHR9PlxyXG4gICAgICAgICAgICAgICAgICB7Y2F0ZWdvcnkubmFtZX1cclxuICAgICAgICAgICAgICAgIDwvVGV4dD5cclxuICAgICAgICAgICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuc3BhcmtsZUNvbnRhaW5lcn0+XHJcbiAgICAgICAgICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMuc3BhcmtsZX0+4pyoPC9UZXh0PlxyXG4gICAgICAgICAgICAgICAgPC9WaWV3PlxyXG4gICAgICAgICAgICAgIDwvVmlldz5cclxuICAgICAgICAgICAgPC9MaW5lYXJHcmFkaWVudD5cclxuICAgICAgICAgICkgOiAoXHJcbiAgICAgICAgICAgIDxBbmltYXRlZC5WaWV3XHJcbiAgICAgICAgICAgICAgc3R5bGU9e1tcclxuICAgICAgICAgICAgICAgIHN0eWxlcy5jYXRlZ29yeUl0ZW0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoLFxyXG4gICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogYCR7cHJpbWFyeUNvbG9yfTIwYCxcclxuICAgICAgICAgICAgICAgICAgc2hhZG93T3BhY2l0eSxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBdfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgPFZpZXcgc3R5bGU9e1tzdHlsZXMuY2F0ZWdvcnlJbm5lciwgeyBiYWNrZ3JvdW5kQ29sb3I6IGAke3ByaW1hcnlDb2xvcn0wOGAgfV19PlxyXG4gICAgICAgICAgICAgICAgPFRleHQgc3R5bGU9e1tzdHlsZXMuY2F0ZWdvcnlUZXh0LCB7IGNvbG9yOiBwcmltYXJ5Q29sb3IgfV19PlxyXG4gICAgICAgICAgICAgICAgICB7Y2F0ZWdvcnkubmFtZX1cclxuICAgICAgICAgICAgICAgIDwvVGV4dD5cclxuICAgICAgICAgICAgICA8L1ZpZXc+XHJcbiAgICAgICAgICAgIDwvQW5pbWF0ZWQuVmlldz5cclxuICAgICAgICAgICl9XHJcbiAgICAgICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxyXG4gICAgICA8L0FuaW1hdGVkLlZpZXc+XHJcbiAgICApO1xyXG4gIH0sIFtcclxuICAgIHNlbGVjdGVkQ2F0ZWdvcnksXHJcbiAgICBwcmltYXJ5Q29sb3IsXHJcbiAgICBzdHlsZXMsXHJcbiAgICBoYW5kbGVDYXRlZ29yeVByZXNzLFxyXG4gICAgaGFuZGxlUHJlc3NJbixcclxuICAgIGhhbmRsZVByZXNzT3V0LFxyXG4gIF0pO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9PlxyXG4gICAgICA8TGluZWFyR3JhZGllbnRcclxuICAgICAgICBjb2xvcnM9e1tgJHtwcmltYXJ5Q29sb3J9MDRgLCAndHJhbnNwYXJlbnQnLCBgJHtwcmltYXJ5Q29sb3J9MDJgXX1cclxuICAgICAgICBzdGFydD17eyB4OiAwLCB5OiAwIH19XHJcbiAgICAgICAgZW5kPXt7IHg6IDEsIHk6IDAgfX1cclxuICAgICAgICBzdHlsZT17c3R5bGVzLmJhY2tncm91bmRHcmFkaWVudH1cclxuICAgICAgPlxyXG4gICAgICAgIDxTY3JvbGxWaWV3XHJcbiAgICAgICAgICByZWY9e3Njcm9sbFZpZXdSZWZ9XHJcbiAgICAgICAgICBob3Jpem9udGFsXHJcbiAgICAgICAgICBzaG93c0hvcml6b250YWxTY3JvbGxJbmRpY2F0b3I9e2ZhbHNlfVxyXG4gICAgICAgICAgY29udGVudENvbnRhaW5lclN0eWxlPXtzdHlsZXMuc2Nyb2xsQ29udGVudH1cclxuICAgICAgICAgIHN0eWxlPXtzdHlsZXMuc2Nyb2xsVmlld31cclxuICAgICAgICA+XHJcbiAgICAgICAgICB7Y2F0ZWdvcmllcy5tYXAocmVuZGVyQ2F0ZWdvcnlQaWxsKX1cclxuICAgICAgICA8L1Njcm9sbFZpZXc+XHJcbiAgICAgIDwvTGluZWFyR3JhZGllbnQ+XHJcbiAgICA8L1ZpZXc+XHJcbiAgKTtcclxufTtcclxuXHJcbkNhdGVnb3J5U2VsZWN0b3IucHJvcFR5cGVzID0ge1xyXG4gIGNhdGVnb3JpZXM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zaGFwZSh7XHJcbiAgICBpZDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLmlzUmVxdWlyZWQsXHJcbiAgICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXHJcbiAgfSkpLmlzUmVxdWlyZWQsXHJcbiAgc2VsZWN0ZWRDYXRlZ29yeTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxyXG4gIG9uU2VsZWN0Q2F0ZWdvcnk6IFByb3BUeXBlcy5mdW5jLCAvLyDinIUgTW9kaWZpw6kgcG91ciBuZSBwbHVzIMOqdHJlIGBpc1JlcXVpcmVkYFxyXG4gIHByaW1hcnlDb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhcmVFcXVhbChwcmV2UHJvcHMsIG5leHRQcm9wcykge1xyXG4gIGlmIChcclxuICAgIHByZXZQcm9wcy5zZWxlY3RlZENhdGVnb3J5ICE9PSBuZXh0UHJvcHMuc2VsZWN0ZWRDYXRlZ29yeSB8fFxyXG4gICAgcHJldlByb3BzLnByaW1hcnlDb2xvciAhPT0gbmV4dFByb3BzLnByaW1hcnlDb2xvciB8fFxyXG4gICAgcHJldlByb3BzLmNhdGVnb3JpZXMubGVuZ3RoICE9PSBuZXh0UHJvcHMuY2F0ZWdvcmllcy5sZW5ndGhcclxuICApIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIGlmIChwcmV2UHJvcHMuY2F0ZWdvcmllcyA9PT0gbmV4dFByb3BzLmNhdGVnb3JpZXMpIHtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHByZXZQcm9wcy5jYXRlZ29yaWVzLmV2ZXJ5KChjYXQsIGluZGV4KSA9PiB7XHJcbiAgICBjb25zdCBuZXh0Q2F0ID0gbmV4dFByb3BzLmNhdGVnb3JpZXNbaW5kZXhdO1xyXG4gICAgcmV0dXJuIG5leHRDYXQgJiYgY2F0LmlkID09PSBuZXh0Q2F0LmlkICYmIGNhdC5uYW1lID09PSBuZXh0Q2F0Lm5hbWU7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG1lbW8oQ2F0ZWdvcnlTZWxlY3RvciwgYXJlRXF1YWwpOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsbUJBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLFVBQUEsR0FBQUMsc0JBQUEsQ0FBQUosT0FBQTtBQUNBLElBQUFLLE1BQUEsR0FBQUQsc0JBQUEsQ0FBQUosT0FBQTtBQUFtQyxJQUFBTSxXQUFBLEdBQUFOLE9BQUE7QUFFbkMsSUFBTU8sZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFnQkEsQ0FBQUMsSUFBQSxFQUtoQjtFQUFBLElBQUFDLGVBQUEsR0FBQUQsSUFBQSxDQUpKRSxVQUFVO0lBQVZBLFVBQVUsR0FBQUQsZUFBQSxjQUFHLEVBQUUsR0FBQUEsZUFBQTtJQUNmRSxnQkFBZ0IsR0FBQUgsSUFBQSxDQUFoQkcsZ0JBQWdCO0lBQ2hCQyxnQkFBZ0IsR0FBQUosSUFBQSxDQUFoQkksZ0JBQWdCO0lBQUFDLGlCQUFBLEdBQUFMLElBQUEsQ0FDaEJNLFlBQVk7SUFBWkEsWUFBWSxHQUFBRCxpQkFBQSxjQUFHLFNBQVMsR0FBQUEsaUJBQUE7RUFFeEIsSUFBTUUsTUFBTSxHQUFHLElBQUFDLGNBQVksRUFBQ0YsWUFBWSxDQUFDO0VBQ3pDLElBQU1HLGFBQWEsR0FBRyxJQUFBQyxhQUFNLEVBQUMsSUFBSSxDQUFDO0VBRWxDLElBQU1DLGFBQWEsR0FBRyxJQUFBRCxhQUFNLEVBQUMsQ0FBQyxDQUFDLENBQUM7RUFDaEMsSUFBTUUsa0JBQWtCLEdBQUcsSUFBQUYsYUFBTSxFQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3JDLElBQU1HLGNBQWMsR0FBRyxJQUFBSCxhQUFNLEVBQUMsQ0FBQyxDQUFDLENBQUM7RUFJakMsSUFBTUksY0FBYyxHQUFHLElBQUFKLGFBQU0sRUFBQyxLQUFLLENBQUM7RUFFcEMsSUFBTUssdUJBQXVCLEdBQUcsSUFBQUwsYUFBTSxFQUFDUCxnQkFBZ0IsQ0FBQztFQUV4RCxJQUFBYSxnQkFBUyxFQUFDLFlBQU07SUFDZCxJQUFNQyxhQUFhLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLElBQU1DLGtCQUFrQixHQUFHLENBQUMsQ0FBQztJQUM3QixJQUFNQyxjQUFjLEdBQUcsQ0FBQyxDQUFDO0lBRXpCakIsVUFBVSxDQUFDa0IsT0FBTyxDQUFDLFVBQUFDLFFBQVEsRUFBSTtNQUM3QkosYUFBYSxDQUFDSSxRQUFRLENBQUNDLEVBQUUsQ0FBQyxHQUFHWCxhQUFhLENBQUNZLE9BQU8sQ0FBQ0YsUUFBUSxDQUFDQyxFQUFFLENBQUMsSUFBSSxJQUFJRSxxQkFBUSxDQUFDQyxLQUFLLENBQ25GdEIsZ0JBQWdCLEtBQUtrQixRQUFRLENBQUNDLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FDekMsQ0FBQztNQUNESixrQkFBa0IsQ0FBQ0csUUFBUSxDQUFDQyxFQUFFLENBQUMsR0FBR1Ysa0JBQWtCLENBQUNXLE9BQU8sQ0FBQ0YsUUFBUSxDQUFDQyxFQUFFLENBQUMsSUFBSSxJQUFJRSxxQkFBUSxDQUFDQyxLQUFLLENBQUMsQ0FBQyxDQUFDO01BQ2xHTixjQUFjLENBQUNFLFFBQVEsQ0FBQ0MsRUFBRSxDQUFDLEdBQUdULGNBQWMsQ0FBQ1UsT0FBTyxDQUFDRixRQUFRLENBQUNDLEVBQUUsQ0FBQyxJQUFJLElBQUk7SUFDM0UsQ0FBQyxDQUFDO0lBRUZYLGFBQWEsQ0FBQ1ksT0FBTyxHQUFHTixhQUFhO0lBQ3JDTCxrQkFBa0IsQ0FBQ1csT0FBTyxHQUFHTCxrQkFBa0I7SUFDL0NMLGNBQWMsQ0FBQ1UsT0FBTyxHQUFHSixjQUFjO0VBRXpDLENBQUMsRUFBRSxDQUFDakIsVUFBVSxFQUFFQyxnQkFBZ0IsQ0FBQyxDQUFDO0VBRWxDLElBQU11QixhQUFhLEdBQUcsSUFBQUMsa0JBQVcsRUFBQyxVQUFDQyxVQUFVLEVBQUs7SUFDaEQsSUFBTUMsY0FBYyxHQUFHakIsa0JBQWtCLENBQUNXLE9BQU8sQ0FBQ0ssVUFBVSxDQUFDO0lBQzdELElBQUlDLGNBQWMsRUFBRTtNQUNsQkwscUJBQVEsQ0FBQ00sTUFBTSxDQUFDRCxjQUFjLEVBQUU7UUFDOUJFLE9BQU8sRUFBRSxJQUFJO1FBQ2JDLFFBQVEsRUFBRSxHQUFHO1FBQ2JDLGVBQWUsRUFBRTtNQUNuQixDQUFDLENBQUMsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7SUFDWjtFQUNGLENBQUMsRUFBRSxFQUFFLENBQUM7RUFFTixJQUFNQyxjQUFjLEdBQUcsSUFBQVIsa0JBQVcsRUFBQyxVQUFDQyxVQUFVLEVBQUs7SUFDakQsSUFBTUMsY0FBYyxHQUFHakIsa0JBQWtCLENBQUNXLE9BQU8sQ0FBQ0ssVUFBVSxDQUFDO0lBQzdELElBQUlDLGNBQWMsRUFBRTtNQUNsQkwscUJBQVEsQ0FBQ00sTUFBTSxDQUFDRCxjQUFjLEVBQUU7UUFDOUJFLE9BQU8sRUFBRSxDQUFDO1FBQ1ZDLFFBQVEsRUFBRSxHQUFHO1FBQ2JDLGVBQWUsRUFBRTtNQUNuQixDQUFDLENBQUMsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7SUFDWjtFQUNGLENBQUMsRUFBRSxFQUFFLENBQUM7RUFFTixJQUFNRSxnQkFBZ0IsR0FBRyxJQUFBVCxrQkFBVyxFQUFDLFlBQU07SUFDekMsSUFBTVUsWUFBWSxHQUFHdEIsdUJBQXVCLENBQUNRLE9BQU87SUFDcEQsSUFBTWUsVUFBVSxHQUFHbkMsZ0JBQWdCO0lBRW5DLElBQUlrQyxZQUFZLEtBQUtDLFVBQVUsRUFBRTtNQUMvQjtJQUNGO0lBR0F4QixjQUFjLENBQUNTLE9BQU8sR0FBRyxJQUFJO0lBQzdCLElBQU1nQixlQUFlLEdBQUcsRUFBRTtJQUMxQixJQUFNQyxRQUFRLEdBQUc3QixhQUFhLENBQUNZLE9BQU8sQ0FBQ2MsWUFBWSxDQUFDO0lBQ3BELElBQU1JLE1BQU0sR0FBRzlCLGFBQWEsQ0FBQ1ksT0FBTyxDQUFDZSxVQUFVLENBQUM7SUFFaEQsSUFBSUUsUUFBUSxFQUFFO01BQ1pELGVBQWUsQ0FBQ0csSUFBSSxDQUNsQmxCLHFCQUFRLENBQUNNLE1BQU0sQ0FBQ1UsUUFBUSxFQUFFO1FBQUVULE9BQU8sRUFBRSxDQUFDO1FBQUVDLFFBQVEsRUFBRSxHQUFHO1FBQUVDLGVBQWUsRUFBRTtNQUFNLENBQUMsQ0FDakYsQ0FBQztJQUNIO0lBRUEsSUFBSVEsTUFBTSxFQUFFO01BQ1ZGLGVBQWUsQ0FBQ0csSUFBSSxDQUNsQmxCLHFCQUFRLENBQUNNLE1BQU0sQ0FBQ1csTUFBTSxFQUFFO1FBQUVWLE9BQU8sRUFBRSxDQUFDO1FBQUVDLFFBQVEsRUFBRSxHQUFHO1FBQUVDLGVBQWUsRUFBRTtNQUFNLENBQUMsQ0FDL0UsQ0FBQztJQUNIO0lBRUEsSUFBSU0sZUFBZSxDQUFDSSxNQUFNLEdBQUcsQ0FBQyxFQUFFO01BQzlCbkIscUJBQVEsQ0FBQ29CLFFBQVEsQ0FBQ0wsZUFBZSxDQUFDLENBQUNMLEtBQUssQ0FBQyxZQUFNO1FBRTdDcEIsY0FBYyxDQUFDUyxPQUFPLEdBQUcsS0FBSztNQUNoQyxDQUFDLENBQUM7SUFDSixDQUFDLE1BQU07TUFDTFQsY0FBYyxDQUFDUyxPQUFPLEdBQUcsS0FBSztJQUNoQztFQUNGLENBQUMsRUFBRSxDQUFDcEIsZ0JBQWdCLENBQUMsQ0FBQztFQUV0QixJQUFBYSxnQkFBUyxFQUFDLFlBQU07SUFDZG9CLGdCQUFnQixDQUFDLENBQUM7SUFDbEJyQix1QkFBdUIsQ0FBQ1EsT0FBTyxHQUFHcEIsZ0JBQWdCO0VBQ3BELENBQUMsRUFBRSxDQUFDQSxnQkFBZ0IsRUFBRWlDLGdCQUFnQixDQUFDLENBQUM7RUFFeEMsSUFBQXBCLGdCQUFTLEVBQUMsWUFBTTtJQUNkLElBQUlQLGFBQWEsQ0FBQ2MsT0FBTyxJQUFJcEIsZ0JBQWdCLElBQUlVLGNBQWMsQ0FBQ1UsT0FBTyxDQUFDcEIsZ0JBQWdCLENBQUMsRUFBRTtNQUN6RixJQUFNMEMsTUFBTSxHQUFHaEMsY0FBYyxDQUFDVSxPQUFPLENBQUNwQixnQkFBZ0IsQ0FBQztNQUN2RE0sYUFBYSxDQUFDYyxPQUFPLENBQUN1QixRQUFRLENBQUM7UUFDN0JDLENBQUMsRUFBRUMsSUFBSSxDQUFDQyxHQUFHLENBQUMsQ0FBQyxFQUFFSixNQUFNLENBQUNFLENBQUMsR0FBR0YsTUFBTSxDQUFDSyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQzNDQyxDQUFDLEVBQUUsQ0FBQztRQUNKQyxRQUFRLEVBQUU7TUFDWixDQUFDLENBQUM7SUFDSjtFQUNGLENBQUMsRUFBRSxDQUFDakQsZ0JBQWdCLENBQUMsQ0FBQztFQUV0QixJQUFNa0QsbUJBQW1CLEdBQUcsSUFBQTFCLGtCQUFXLEVBQUMsVUFBQ0MsVUFBVSxFQUFLO0lBRXRELElBQUlBLFVBQVUsS0FBS3pCLGdCQUFnQixJQUFJLENBQUNXLGNBQWMsQ0FBQ1MsT0FBTyxFQUFFO01BQzlEbkIsZ0JBQWdCLFlBQWhCQSxnQkFBZ0IsQ0FBR3dCLFVBQVUsQ0FBQztJQUNoQztFQUNGLENBQUMsRUFBRSxDQUFDekIsZ0JBQWdCLEVBQUVDLGdCQUFnQixDQUFDLENBQUM7RUFFeEMsSUFBTWtELGtCQUFrQixHQUFHLElBQUEzQixrQkFBVyxFQUFDLFVBQUNOLFFBQVEsRUFBSztJQUNuRCxJQUFNa0MsVUFBVSxHQUFHcEQsZ0JBQWdCLEtBQUtrQixRQUFRLENBQUNDLEVBQUU7SUFDbkQsSUFBTWtDLFNBQVMsR0FBRzdDLGFBQWEsQ0FBQ1ksT0FBTyxDQUFDRixRQUFRLENBQUNDLEVBQUUsQ0FBQztJQUNwRCxJQUFNTyxjQUFjLEdBQUdqQixrQkFBa0IsQ0FBQ1csT0FBTyxDQUFDRixRQUFRLENBQUNDLEVBQUUsQ0FBQztJQUU5RCxJQUFNbUMsS0FBSyxHQUFHLENBQUFELFNBQVMsb0JBQVRBLFNBQVMsQ0FBRUUsV0FBVyxDQUFDO01BQ25DQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO01BQ2xCQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDO01BQ3RCQyxXQUFXLEVBQUU7SUFDZixDQUFDLENBQUMsS0FBSSxDQUFDO0lBRVAsSUFBTUMsVUFBVSxHQUFHLENBQUFqQyxjQUFjLG9CQUFkQSxjQUFjLENBQUU2QixXQUFXLENBQUM7TUFDN0NDLFVBQVUsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7TUFDckJDLFdBQVcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7TUFDdEJDLFdBQVcsRUFBRTtJQUNmLENBQUMsQ0FBQyxLQUFJLENBQUM7SUFFUCxJQUFNRSxhQUFhLEdBQUcsQ0FBQVAsU0FBUyxvQkFBVEEsU0FBUyxDQUFFRSxXQUFXLENBQUM7TUFDM0NDLFVBQVUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7TUFDbEJDLFdBQVcsRUFBRSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUM7TUFDeEJDLFdBQVcsRUFBRTtJQUNmLENBQUMsQ0FBQyxLQUFJLEdBQUc7SUFFVCxJQUFNRyxXQUFXLEdBQUcsQ0FBQVIsU0FBUyxvQkFBVEEsU0FBUyxDQUFFRSxXQUFXLENBQUM7TUFDekNDLFVBQVUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7TUFDbEJDLFdBQVcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7TUFDbkJDLFdBQVcsRUFBRTtJQUNmLENBQUMsQ0FBQyxLQUFJLENBQUM7SUFFUCxPQUNFLElBQUEvRCxXQUFBLENBQUFtRSxHQUFBLEVBQUN4RSxZQUFBLENBQUErQixRQUFRLENBQUMwQyxJQUFJO01BRVpDLFFBQVEsRUFBRSxTQUFWQSxRQUFRQSxDQUFHQyxLQUFLLEVBQUs7UUFDbkJ2RCxjQUFjLENBQUNVLE9BQU8sQ0FBQ0YsUUFBUSxDQUFDQyxFQUFFLENBQUMsR0FBRzhDLEtBQUssQ0FBQ0MsV0FBVyxDQUFDeEIsTUFBTTtNQUNoRSxDQUFFO01BQ0Z5QixLQUFLLEVBQUUsQ0FDTC9ELE1BQU0sQ0FBQ2dFLG1CQUFtQixFQUMxQjtRQUNFQyxTQUFTLEVBQUUsQ0FBQztVQUFFZixLQUFLLEVBQUVqQyxxQkFBUSxDQUFDaUQsUUFBUSxDQUFDaEIsS0FBSyxFQUFFSyxVQUFVO1FBQUUsQ0FBQztNQUM3RCxDQUFDLENBQ0Q7TUFBQVksUUFBQSxFQUVGLElBQUE1RSxXQUFBLENBQUFtRSxHQUFBLEVBQUN4RSxZQUFBLENBQUFrRixnQkFBZ0I7UUFDZkwsS0FBSyxFQUFFL0QsTUFBTSxDQUFDcUUsaUJBQWtCO1FBQ2hDQyxPQUFPLEVBQUUsU0FBVEEsT0FBT0EsQ0FBQTtVQUFBLE9BQVF4QixtQkFBbUIsQ0FBQ2hDLFFBQVEsQ0FBQ0MsRUFBRSxDQUFDO1FBQUEsQ0FBQztRQUNoRHdELFNBQVMsRUFBRSxTQUFYQSxTQUFTQSxDQUFBO1VBQUEsT0FBUXBELGFBQWEsQ0FBQ0wsUUFBUSxDQUFDQyxFQUFFLENBQUM7UUFBQSxDQUFDO1FBQzVDeUQsVUFBVSxFQUFFLFNBQVpBLFVBQVVBLENBQUE7VUFBQSxPQUFRNUMsY0FBYyxDQUFDZCxRQUFRLENBQUNDLEVBQUUsQ0FBQztRQUFBLENBQUM7UUFDOUMwRCxhQUFhLEVBQUUsR0FBSTtRQUNuQkMsaUJBQWlCLEVBQUMsUUFBUTtRQUMxQkMsa0JBQWtCLEVBQUVDLE1BQU0sQ0FBQzlELFFBQVEsQ0FBQytELElBQUksQ0FBRTtRQUMxQ0Msa0JBQWtCLEVBQUU7VUFBRUMsUUFBUSxFQUFFL0I7UUFBVyxDQUFFO1FBQUFtQixRQUFBLEVBRTVDbkIsVUFBVSxHQUNULElBQUF6RCxXQUFBLENBQUFtRSxHQUFBLEVBQUN2RSxtQkFBQSxDQUFBNkYsY0FBYztVQUNiQyxNQUFNLEVBQUUsQ0FBQ2xGLFlBQVksRUFBRSxHQUFHQSxZQUFZLElBQUksRUFBRSxHQUFHQSxZQUFZLElBQUksQ0FBRTtVQUNqRTRCLEtBQUssRUFBRTtZQUFFYSxDQUFDLEVBQUUsQ0FBQztZQUFFSSxDQUFDLEVBQUU7VUFBRSxDQUFFO1VBQ3RCc0MsR0FBRyxFQUFFO1lBQUUxQyxDQUFDLEVBQUUsQ0FBQztZQUFFSSxDQUFDLEVBQUU7VUFBRSxDQUFFO1VBQ3BCbUIsS0FBSyxFQUFFL0QsTUFBTSxDQUFDbUYsb0JBQXFCO1VBQUFoQixRQUFBLEVBRW5DLElBQUE1RSxXQUFBLENBQUE2RixJQUFBLEVBQUNsRyxZQUFBLENBQUF5RSxJQUFJO1lBQUNJLEtBQUssRUFBRS9ELE1BQU0sQ0FBQ3FGLGFBQWM7WUFBQWxCLFFBQUEsR0FDaEMsSUFBQTVFLFdBQUEsQ0FBQW1FLEdBQUEsRUFBQ3hFLFlBQUEsQ0FBQW9HLElBQUk7Y0FBQ3ZCLEtBQUssRUFBRS9ELE1BQU0sQ0FBQ3VGLG9CQUFxQjtjQUFBcEIsUUFBQSxFQUN0Q3JELFFBQVEsQ0FBQytEO1lBQUksQ0FDVixDQUFDLEVBQ1AsSUFBQXRGLFdBQUEsQ0FBQW1FLEdBQUEsRUFBQ3hFLFlBQUEsQ0FBQXlFLElBQUk7Y0FBQ0ksS0FBSyxFQUFFL0QsTUFBTSxDQUFDd0YsZ0JBQWlCO2NBQUFyQixRQUFBLEVBQ25DLElBQUE1RSxXQUFBLENBQUFtRSxHQUFBLEVBQUN4RSxZQUFBLENBQUFvRyxJQUFJO2dCQUFDdkIsS0FBSyxFQUFFL0QsTUFBTSxDQUFDeUYsT0FBUTtnQkFBQXRCLFFBQUEsRUFBQztjQUFDLENBQU07WUFBQyxDQUNqQyxDQUFDO1VBQUEsQ0FDSDtRQUFDLENBQ08sQ0FBQyxHQUVqQixJQUFBNUUsV0FBQSxDQUFBbUUsR0FBQSxFQUFDeEUsWUFBQSxDQUFBK0IsUUFBUSxDQUFDMEMsSUFBSTtVQUNaSSxLQUFLLEVBQUUsQ0FDTC9ELE1BQU0sQ0FBQzBGLFlBQVksRUFDbkI7WUFDRWpDLFdBQVcsRUFBWEEsV0FBVztZQUNYa0MsV0FBVyxFQUFFLEdBQUc1RixZQUFZLElBQUk7WUFDaEN5RCxhQUFhLEVBQWJBO1VBQ0YsQ0FBQyxDQUNEO1VBQUFXLFFBQUEsRUFFRixJQUFBNUUsV0FBQSxDQUFBbUUsR0FBQSxFQUFDeEUsWUFBQSxDQUFBeUUsSUFBSTtZQUFDSSxLQUFLLEVBQUUsQ0FBQy9ELE1BQU0sQ0FBQzRGLGFBQWEsRUFBRTtjQUFFQyxlQUFlLEVBQUUsR0FBRzlGLFlBQVk7WUFBSyxDQUFDLENBQUU7WUFBQW9FLFFBQUEsRUFDNUUsSUFBQTVFLFdBQUEsQ0FBQW1FLEdBQUEsRUFBQ3hFLFlBQUEsQ0FBQW9HLElBQUk7Y0FBQ3ZCLEtBQUssRUFBRSxDQUFDL0QsTUFBTSxDQUFDOEYsWUFBWSxFQUFFO2dCQUFFQyxLQUFLLEVBQUVoRztjQUFhLENBQUMsQ0FBRTtjQUFBb0UsUUFBQSxFQUN6RHJELFFBQVEsQ0FBQytEO1lBQUksQ0FDVjtVQUFDLENBQ0g7UUFBQyxDQUNNO01BQ2hCLENBQ2U7SUFBQyxHQXZEZC9ELFFBQVEsQ0FBQ0MsRUF3REQsQ0FBQztFQUVwQixDQUFDLEVBQUUsQ0FDRG5CLGdCQUFnQixFQUNoQkcsWUFBWSxFQUNaQyxNQUFNLEVBQ044QyxtQkFBbUIsRUFDbkIzQixhQUFhLEVBQ2JTLGNBQWMsQ0FDZixDQUFDO0VBRUYsT0FDRSxJQUFBckMsV0FBQSxDQUFBbUUsR0FBQSxFQUFDeEUsWUFBQSxDQUFBeUUsSUFBSTtJQUFDSSxLQUFLLEVBQUUvRCxNQUFNLENBQUNnRyxTQUFVO0lBQUE3QixRQUFBLEVBQzVCLElBQUE1RSxXQUFBLENBQUFtRSxHQUFBLEVBQUN2RSxtQkFBQSxDQUFBNkYsY0FBYztNQUNiQyxNQUFNLEVBQUUsQ0FBQyxHQUFHbEYsWUFBWSxJQUFJLEVBQUUsYUFBYSxFQUFFLEdBQUdBLFlBQVksSUFBSSxDQUFFO01BQ2xFNEIsS0FBSyxFQUFFO1FBQUVhLENBQUMsRUFBRSxDQUFDO1FBQUVJLENBQUMsRUFBRTtNQUFFLENBQUU7TUFDdEJzQyxHQUFHLEVBQUU7UUFBRTFDLENBQUMsRUFBRSxDQUFDO1FBQUVJLENBQUMsRUFBRTtNQUFFLENBQUU7TUFDcEJtQixLQUFLLEVBQUUvRCxNQUFNLENBQUNpRyxrQkFBbUI7TUFBQTlCLFFBQUEsRUFFakMsSUFBQTVFLFdBQUEsQ0FBQW1FLEdBQUEsRUFBQ3hFLFlBQUEsQ0FBQWdILFVBQVU7UUFDVEMsR0FBRyxFQUFFakcsYUFBYztRQUNuQmtHLFVBQVU7UUFDVkMsOEJBQThCLEVBQUUsS0FBTTtRQUN0Q0MscUJBQXFCLEVBQUV0RyxNQUFNLENBQUN1RyxhQUFjO1FBQzVDeEMsS0FBSyxFQUFFL0QsTUFBTSxDQUFDd0csVUFBVztRQUFBckMsUUFBQSxFQUV4QnhFLFVBQVUsQ0FBQzhHLEdBQUcsQ0FBQzFELGtCQUFrQjtNQUFDLENBQ3pCO0lBQUMsQ0FDQztFQUFDLENBQ2IsQ0FBQztBQUVYLENBQUM7QUFFRHZELGdCQUFnQixDQUFDa0gsU0FBUyxHQUFHO0VBQzNCL0csVUFBVSxFQUFFZ0gsa0JBQVMsQ0FBQ0MsT0FBTyxDQUFDRCxrQkFBUyxDQUFDRSxLQUFLLENBQUM7SUFDNUM5RixFQUFFLEVBQUU0RixrQkFBUyxDQUFDRyxTQUFTLENBQUMsQ0FBQ0gsa0JBQVMsQ0FBQ0ksTUFBTSxFQUFFSixrQkFBUyxDQUFDSyxNQUFNLENBQUMsQ0FBQyxDQUFDQyxVQUFVO0lBQ3hFcEMsSUFBSSxFQUFFOEIsa0JBQVMsQ0FBQ0ksTUFBTSxDQUFDRTtFQUN6QixDQUFDLENBQUMsQ0FBQyxDQUFDQSxVQUFVO0VBQ2RySCxnQkFBZ0IsRUFBRStHLGtCQUFTLENBQUNHLFNBQVMsQ0FBQyxDQUFDSCxrQkFBUyxDQUFDSSxNQUFNLEVBQUVKLGtCQUFTLENBQUNLLE1BQU0sQ0FBQyxDQUFDO0VBQzNFbkgsZ0JBQWdCLEVBQUU4RyxrQkFBUyxDQUFDTyxJQUFJO0VBQ2hDbkgsWUFBWSxFQUFFNEcsa0JBQVMsQ0FBQ0k7QUFDMUIsQ0FBQztBQUVNLFNBQVNJLFFBQVFBLENBQUNDLFNBQVMsRUFBRUMsU0FBUyxFQUFFO0VBQzdDLElBQ0VELFNBQVMsQ0FBQ3hILGdCQUFnQixLQUFLeUgsU0FBUyxDQUFDekgsZ0JBQWdCLElBQ3pEd0gsU0FBUyxDQUFDckgsWUFBWSxLQUFLc0gsU0FBUyxDQUFDdEgsWUFBWSxJQUNqRHFILFNBQVMsQ0FBQ3pILFVBQVUsQ0FBQ3lDLE1BQU0sS0FBS2lGLFNBQVMsQ0FBQzFILFVBQVUsQ0FBQ3lDLE1BQU0sRUFDM0Q7SUFDQSxPQUFPLEtBQUs7RUFDZDtFQUVBLElBQUlnRixTQUFTLENBQUN6SCxVQUFVLEtBQUswSCxTQUFTLENBQUMxSCxVQUFVLEVBQUU7SUFDakQsT0FBTyxJQUFJO0VBQ2I7RUFFQSxPQUFPeUgsU0FBUyxDQUFDekgsVUFBVSxDQUFDMkgsS0FBSyxDQUFDLFVBQUNDLEdBQUcsRUFBRUMsS0FBSyxFQUFLO0lBQ2hELElBQU1DLE9BQU8sR0FBR0osU0FBUyxDQUFDMUgsVUFBVSxDQUFDNkgsS0FBSyxDQUFDO0lBQzNDLE9BQU9DLE9BQU8sSUFBSUYsR0FBRyxDQUFDeEcsRUFBRSxLQUFLMEcsT0FBTyxDQUFDMUcsRUFBRSxJQUFJd0csR0FBRyxDQUFDMUMsSUFBSSxLQUFLNEMsT0FBTyxDQUFDNUMsSUFBSTtFQUN0RSxDQUFDLENBQUM7QUFDSjtBQUFDLElBQUE2QyxRQUFBLEdBQUFDLE9BQUEsQ0FBQUMsT0FBQSxHQUVjLElBQUFDLFdBQUksRUFBQ3JJLGdCQUFnQixFQUFFMkgsUUFBUSxDQUFDIiwiaWdub3JlTGlzdCI6W119