6895d70283b1659212e4d35ab1521548
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _expoLinearGradient = require("expo-linear-gradient");
var _expoRouter = require("expo-router");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _ThemeContext = require("../../contexts/ThemeContext");
var _useRealTimeProgress2 = _interopRequireDefault(require("../../hooks/useRealTimeProgress"));
var _Button = _interopRequireDefault(require("../../components/ui/Button"));
var _Container = _interopRequireWildcard(require("../../components/layout/Container"));
var _Header = _interopRequireDefault(require("../../components/layout/Header"));
var _constants = require("../../utils/constants");
var _style = _interopRequireWildcard(require("./style"));
var _useExerciseListData2 = _interopRequireDefault(require("./hooks/useExerciseListData"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var DEFAULT_THEME = {
  colors: {
    background: "#F9FAFB",
    primary: "#5E60CE",
    text: "#1F2937",
    textSecondary: "#6B7280",
    surface: "#FFFFFF"
  }
};
var CardHeader = function CardHeader(_ref) {
  var exercise = _ref.exercise,
    colors = _ref.colors,
    localStyles = _ref.localStyles;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: localStyles.cardHeader,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: localStyles.levelTitleContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [localStyles.levelMainTitle, {
          color: colors.text
        }],
        children: exercise.title
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [localStyles.levelBadge, {
          backgroundColor: exercise.color
        }],
        children: (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: localStyles.levelBadgeText,
          children: [exercise.progress, "%"]
        })
      }), exercise.id === "vocabulary_fast" && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [localStyles.levelBadge, localStyles.fastBadge],
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [localStyles.levelBadgeText, localStyles.fastBadgeText],
          children: "FAST"
        })
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: localStyles.levelIcon,
      children: exercise.icon
    })]
  });
};
var Progression = function Progression(_ref2) {
  var exercise = _ref2.exercise,
    colors = _ref2.colors,
    localStyles = _ref2.localStyles;
  return exercise.hasProgress && (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: localStyles.progressContainer,
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: localStyles.progressBar,
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [localStyles.progressFill, {
          width: `${exercise.progress}%`,
          backgroundColor: exercise.color
        }]
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
      style: [localStyles.progressText, {
        color: colors.textSecondary
      }],
      children: [exercise.progress, "%"]
    })]
  });
};
var CardButton = function CardButton(_ref3) {
  var exercise = _ref3.exercise,
    handleExercisePress = _ref3.handleExercisePress,
    localStyles = _ref3.localStyles;
  return (0, _jsxRuntime.jsx)(_Button.default, {
    title: exercise.hasProgress ? "Continuer" : "Commencer",
    variant: "filled",
    color: exercise.color,
    fullWidth: true,
    onPress: handleExercisePress(exercise),
    style: localStyles.startButton,
    rightIcon: exercise.hasProgress ? "play-outline" : "rocket-outline",
    testID: `${exercise.id}-button`
  });
};
var ExerciseCardContent = function ExerciseCardContent(_ref4) {
  var exercise = _ref4.exercise,
    colors = _ref4.colors,
    localStyles = _ref4.localStyles,
    handleExercisePress = _ref4.handleExercisePress;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: localStyles.cardContentStyle,
    children: [(0, _jsxRuntime.jsx)(CardHeader, {
      exercise: exercise,
      colors: colors,
      localStyles: localStyles
    }), (0, _jsxRuntime.jsx)(Progression, {
      exercise: exercise,
      colors: colors,
      localStyles: localStyles
    }), (0, _jsxRuntime.jsx)(CardButton, {
      exercise: exercise,
      handleExercisePress: handleExercisePress,
      localStyles: localStyles
    })]
  });
};
var ExerciseListSection = function ExerciseListSection(_ref5) {
  var colors = _ref5.colors,
    localStyles = _ref5.localStyles,
    exercises = _ref5.exercises,
    renderExerciseCard = _ref5.renderExerciseCard;
  return (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
    testID: "exercises-scroll",
    style: {
      flex: 1
    },
    contentContainerStyle: [localStyles.scrollContent, {
      paddingBottom: 60
    }],
    showsVerticalScrollIndicator: false,
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: localStyles.introSection,
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [localStyles.introText, {
          color: colors.textSecondary
        }],
        children: "Choisissez votre exercice"
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: localStyles.levelsContainer,
      children: exercises.map(renderExerciseCard)
    })]
  });
};
var ExerciseSelection = function ExerciseSelection(_ref6) {
  var level = _ref6.level;
  if (!level) {
    return null;
  }
  var themeContext = (0, _react.useContext)(_ThemeContext.ThemeContext) || DEFAULT_THEME;
  var colors = themeContext.colors;
  var _useRealTimeProgress = (0, _useRealTimeProgress2.default)(),
    getExerciseProgress = _useRealTimeProgress.getExerciseProgress,
    hasProgress = _useRealTimeProgress.hasProgress,
    refresh = _useRealTimeProgress.refresh;
  var _useExerciseListData = (0, _useExerciseListData2.default)({
      level: level,
      getExerciseProgress: getExerciseProgress,
      hasProgress: hasProgress
    }),
    computedLevelInfo = _useExerciseListData.levelInfo,
    exercises = _useExerciseListData.exercises;
  var levelInfo = (0, _react.useMemo)(function () {
    return computedLevelInfo || {
      color: colors.primary,
      title: `Niveau ${level}`,
      icon: level === "bonus" ? "‚≠ê" : "üìö"
    };
  }, [computedLevelInfo, level, colors.primary]);
  var levelColor = levelInfo.color;
  var backgroundGradient = (0, _style.getBackgroundGradient)(levelColor, colors.background);
  var handleExerciseSelect = (0, _react.useCallback)(function (exercise) {
    var params = {
      level: level
    };
    if (exercise.id === 'vocabulary') {
      params.mode = 'classic';
    } else if (exercise.id === 'vocabulary_fast') {
      params.mode = 'fast';
    }
    _expoRouter.router.push({
      pathname: exercise.route,
      params: params
    });
  }, [level]);
  var handleExercisePress = (0, _react.useCallback)(function (exercise) {
    return function () {
      return handleExerciseSelect(exercise);
    };
  }, [handleExerciseSelect]);
  (0, _expoRouter.useFocusEffect)((0, _react.useCallback)(function () {
    refresh();
  }, [refresh]));
  var renderHeader = function renderHeader() {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.headerContainer,
      children: (0, _jsxRuntime.jsxs)(_expoLinearGradient.LinearGradient, {
        colors: [levelColor, `${levelColor}DD`],
        start: {
          x: 0,
          y: 0
        },
        end: {
          x: 1,
          y: 1
        },
        style: _style.default.headerGradient,
        children: [(0, _jsxRuntime.jsx)(_Header.default, {
          title: levelInfo.title,
          showBackButton: true,
          onBackPress: function onBackPress() {
            return _expoRouter.router.push('/tabs/levelSelection');
          },
          backgroundColor: "transparent",
          textColor: "white",
          withStatusBar: false,
          withShadow: false,
          titleContainerStyle: _style.default.headerTitle,
          testID: "exercises-header"
        }), level === "bonus" && (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: {
            alignItems: "center",
            paddingBottom: 12
          },
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: _style.default.bonusText,
            children: "Contenu exclusif d\xE9bloqu\xE9 !"
          })
        })]
      })
    });
  };
  var renderExerciseCard = (0, _react.useCallback)(function (exercise) {
    var _exercise$progress;
    return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      testID: `${exercise.id}-exercise`,
      style: _style.default.levelCard,
      onPress: handleExercisePress(exercise),
      activeOpacity: 0.8,
      accessibilityRole: "button",
      accessibilityLabel: `${exercise.title}`,
      accessibilityValue: {
        min: 0,
        max: 100,
        now: (_exercise$progress = exercise.progress) != null ? _exercise$progress : 0
      },
      children: (0, _jsxRuntime.jsx)(ExerciseCardContent, {
        exercise: exercise,
        colors: colors,
        localStyles: _style.default,
        handleExercisePress: handleExercisePress
      })
    }, exercise.id);
  }, [handleExercisePress, colors.text, _style.default]);
  return (0, _jsxRuntime.jsx)(_Container.default, {
    testID: "exercise-selection-container",
    safeArea: true,
    safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.NO_BOTTOM,
    withScrollView: false,
    backgroundColor: "transparent",
    statusBarColor: levelColor,
    statusBarStyle: "light-content",
    withPadding: false,
    children: (0, _jsxRuntime.jsxs)(_expoLinearGradient.LinearGradient, {
      colors: backgroundGradient.colors,
      locations: backgroundGradient.locations,
      start: {
        x: 0,
        y: 0
      },
      end: {
        x: 0,
        y: 1
      },
      style: {
        flex: 1
      },
      children: [renderHeader(), (0, _jsxRuntime.jsx)(ExerciseListSection, {
        colors: colors,
        localStyles: _style.default,
        exercises: exercises,
        renderExerciseCard: renderExerciseCard
      })]
    })
  });
};
CardHeader.propTypes = {
  exercise: _propTypes.default.shape({
    title: _propTypes.default.string.isRequired,
    color: _propTypes.default.string.isRequired,
    progress: _propTypes.default.number.isRequired,
    id: _propTypes.default.string.isRequired
  }).isRequired,
  colors: _propTypes.default.object.isRequired,
  localStyles: _propTypes.default.object.isRequired
};
Progression.propTypes = {
  exercise: _propTypes.default.shape({
    hasProgress: _propTypes.default.bool,
    progress: _propTypes.default.number
  }).isRequired,
  colors: _propTypes.default.object.isRequired,
  localStyles: _propTypes.default.object.isRequired
};
CardButton.propTypes = {
  exercise: _propTypes.default.shape({
    hasProgress: _propTypes.default.bool,
    color: _propTypes.default.string.isRequired,
    id: _propTypes.default.string.isRequired
  }).isRequired,
  handleExercisePress: _propTypes.default.func.isRequired,
  localStyles: _propTypes.default.object.isRequired
};
ExerciseCardContent.propTypes = {
  exercise: _propTypes.default.object.isRequired,
  colors: _propTypes.default.object.isRequired,
  localStyles: _propTypes.default.object.isRequired,
  handleExercisePress: _propTypes.default.func.isRequired
};
ExerciseListSection.propTypes = {
  colors: _propTypes.default.object.isRequired,
  localStyles: _propTypes.default.object.isRequired,
  exercises: _propTypes.default.array.isRequired,
  renderExerciseCard: _propTypes.default.func.isRequired
};
ExerciseSelection.propTypes = {
  level: _propTypes.default.string
};
var _default = exports.default = ExerciseSelection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlIiwiX2V4cG9MaW5lYXJHcmFkaWVudCIsIl9leHBvUm91dGVyIiwiX3Byb3BUeXBlcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfVGhlbWVDb250ZXh0IiwiX3VzZVJlYWxUaW1lUHJvZ3Jlc3MyIiwiX0J1dHRvbiIsIl9Db250YWluZXIiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9IZWFkZXIiLCJfY29uc3RhbnRzIiwiX3N0eWxlIiwiX3VzZUV4ZXJjaXNlTGlzdERhdGEyIiwiX2pzeFJ1bnRpbWUiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIkRFRkFVTFRfVEhFTUUiLCJjb2xvcnMiLCJiYWNrZ3JvdW5kIiwicHJpbWFyeSIsInRleHQiLCJ0ZXh0U2Vjb25kYXJ5Iiwic3VyZmFjZSIsIkNhcmRIZWFkZXIiLCJfcmVmIiwiZXhlcmNpc2UiLCJsb2NhbFN0eWxlcyIsImpzeHMiLCJWaWV3Iiwic3R5bGUiLCJjYXJkSGVhZGVyIiwiY2hpbGRyZW4iLCJsZXZlbFRpdGxlQ29udGFpbmVyIiwianN4IiwiVGV4dCIsImxldmVsTWFpblRpdGxlIiwiY29sb3IiLCJ0aXRsZSIsImxldmVsQmFkZ2UiLCJiYWNrZ3JvdW5kQ29sb3IiLCJsZXZlbEJhZGdlVGV4dCIsInByb2dyZXNzIiwiaWQiLCJmYXN0QmFkZ2UiLCJmYXN0QmFkZ2VUZXh0IiwibGV2ZWxJY29uIiwiaWNvbiIsIlByb2dyZXNzaW9uIiwiX3JlZjIiLCJoYXNQcm9ncmVzcyIsInByb2dyZXNzQ29udGFpbmVyIiwicHJvZ3Jlc3NCYXIiLCJwcm9ncmVzc0ZpbGwiLCJ3aWR0aCIsInByb2dyZXNzVGV4dCIsIkNhcmRCdXR0b24iLCJfcmVmMyIsImhhbmRsZUV4ZXJjaXNlUHJlc3MiLCJ2YXJpYW50IiwiZnVsbFdpZHRoIiwib25QcmVzcyIsInN0YXJ0QnV0dG9uIiwicmlnaHRJY29uIiwidGVzdElEIiwiRXhlcmNpc2VDYXJkQ29udGVudCIsIl9yZWY0IiwiY2FyZENvbnRlbnRTdHlsZSIsIkV4ZXJjaXNlTGlzdFNlY3Rpb24iLCJfcmVmNSIsImV4ZXJjaXNlcyIsInJlbmRlckV4ZXJjaXNlQ2FyZCIsIlNjcm9sbFZpZXciLCJmbGV4IiwiY29udGVudENvbnRhaW5lclN0eWxlIiwic2Nyb2xsQ29udGVudCIsInBhZGRpbmdCb3R0b20iLCJzaG93c1ZlcnRpY2FsU2Nyb2xsSW5kaWNhdG9yIiwiaW50cm9TZWN0aW9uIiwiaW50cm9UZXh0IiwibGV2ZWxzQ29udGFpbmVyIiwibWFwIiwiRXhlcmNpc2VTZWxlY3Rpb24iLCJfcmVmNiIsImxldmVsIiwidGhlbWVDb250ZXh0IiwidXNlQ29udGV4dCIsIlRoZW1lQ29udGV4dCIsIl91c2VSZWFsVGltZVByb2dyZXNzIiwidXNlUmVhbFRpbWVQcm9ncmVzcyIsImdldEV4ZXJjaXNlUHJvZ3Jlc3MiLCJyZWZyZXNoIiwiX3VzZUV4ZXJjaXNlTGlzdERhdGEiLCJ1c2VFeGVyY2lzZUxpc3REYXRhIiwiY29tcHV0ZWRMZXZlbEluZm8iLCJsZXZlbEluZm8iLCJ1c2VNZW1vIiwibGV2ZWxDb2xvciIsImJhY2tncm91bmRHcmFkaWVudCIsImdldEJhY2tncm91bmRHcmFkaWVudCIsImhhbmRsZUV4ZXJjaXNlU2VsZWN0IiwidXNlQ2FsbGJhY2siLCJwYXJhbXMiLCJtb2RlIiwicm91dGVyIiwicHVzaCIsInBhdGhuYW1lIiwicm91dGUiLCJ1c2VGb2N1c0VmZmVjdCIsInJlbmRlckhlYWRlciIsInN0eWxlcyIsImhlYWRlckNvbnRhaW5lciIsIkxpbmVhckdyYWRpZW50Iiwic3RhcnQiLCJ4IiwieSIsImVuZCIsImhlYWRlckdyYWRpZW50Iiwic2hvd0JhY2tCdXR0b24iLCJvbkJhY2tQcmVzcyIsInRleHRDb2xvciIsIndpdGhTdGF0dXNCYXIiLCJ3aXRoU2hhZG93IiwidGl0bGVDb250YWluZXJTdHlsZSIsImhlYWRlclRpdGxlIiwiYWxpZ25JdGVtcyIsImJvbnVzVGV4dCIsIl9leGVyY2lzZSRwcm9ncmVzcyIsIlRvdWNoYWJsZU9wYWNpdHkiLCJsZXZlbENhcmQiLCJhY3RpdmVPcGFjaXR5IiwiYWNjZXNzaWJpbGl0eVJvbGUiLCJhY2Nlc3NpYmlsaXR5TGFiZWwiLCJhY2Nlc3NpYmlsaXR5VmFsdWUiLCJtaW4iLCJtYXgiLCJub3ciLCJzYWZlQXJlYSIsInNhZmVBcmVhRWRnZXMiLCJDT05UQUlORVJfU0FGRV9FREdFUyIsIk5PX0JPVFRPTSIsIndpdGhTY3JvbGxWaWV3Iiwic3RhdHVzQmFyQ29sb3IiLCJzdGF0dXNCYXJTdHlsZSIsIndpdGhQYWRkaW5nIiwibG9jYXRpb25zIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwic2hhcGUiLCJzdHJpbmciLCJpc1JlcXVpcmVkIiwibnVtYmVyIiwib2JqZWN0IiwiYm9vbCIsImZ1bmMiLCJhcnJheSIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9zY3JlZW5zL0V4ZXJjaXNlU2VsZWN0aW9uL2luZGV4LmpzIC0gVkVSU0lPTiBTSU1QTEUgUVVJIEdBUkRFIFRPTiBERVNJR05cclxuaW1wb3J0IHsgdXNlQ29udGV4dCwgdXNlTWVtbywgdXNlQ2FsbGJhY2sgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgVmlldywgVGV4dCwgU2Nyb2xsVmlldywgVG91Y2hhYmxlT3BhY2l0eSB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcclxuaW1wb3J0IHsgTGluZWFyR3JhZGllbnQgfSBmcm9tIFwiZXhwby1saW5lYXItZ3JhZGllbnRcIjtcclxuaW1wb3J0IHsgcm91dGVyLCB1c2VGb2N1c0VmZmVjdCB9IGZyb20gXCJleHBvLXJvdXRlclwiO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5cclxuLy8gQ29udGV4dGVzXHJcbmltcG9ydCB7IFRoZW1lQ29udGV4dCB9IGZyb20gXCIuLi8uLi9jb250ZXh0cy9UaGVtZUNvbnRleHRcIjtcclxuXHJcbi8vIPCfmoAgSE9PSyBQUk9HUkVTU0lPTiBURU1QUyBSw4lFTCAtIEpVU1RFIFBPVVIgTEVTIENISUZGUkVTXHJcbmltcG9ydCB1c2VSZWFsVGltZVByb2dyZXNzIGZyb20gXCIuLi8uLi9ob29rcy91c2VSZWFsVGltZVByb2dyZXNzXCI7XHJcblxyXG4vLyBDb21wb3NhbnRzIFVJXHJcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvdWkvQnV0dG9uXCI7XHJcblxyXG4vLyBDb21wb3NhbnRzIExheW91dFxyXG5pbXBvcnQgQ29udGFpbmVyLCB7IENPTlRBSU5FUl9TQUZFX0VER0VTIH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvbGF5b3V0L0NvbnRhaW5lclwiO1xyXG5pbXBvcnQgSGVhZGVyIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL2xheW91dC9IZWFkZXJcIjtcclxuXHJcbi8vIENvbnN0YW50ZXNcclxuaW1wb3J0IHsgTEFOR1VBR0VfTEVWRUxTIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2NvbnN0YW50c1wiO1xyXG5cclxuLy8gU3R5bGVzXHJcbmltcG9ydCBzdHlsZXMsIHsgZ2V0QmFja2dyb3VuZEdyYWRpZW50IH0gZnJvbSBcIi4vc3R5bGVcIjtcclxuaW1wb3J0IHVzZUV4ZXJjaXNlTGlzdERhdGEgZnJvbSBcIi4vaG9va3MvdXNlRXhlcmNpc2VMaXN0RGF0YVwiO1xyXG5cclxuY29uc3QgREVGQVVMVF9USEVNRSA9IHtcclxuICBjb2xvcnM6IHtcclxuICAgIGJhY2tncm91bmQ6IFwiI0Y5RkFGQlwiLFxyXG4gICAgcHJpbWFyeTogXCIjNUU2MENFXCIsXHJcbiAgICB0ZXh0OiBcIiMxRjI5MzdcIixcclxuICAgIHRleHRTZWNvbmRhcnk6IFwiIzZCNzI4MFwiLFxyXG4gICAgc3VyZmFjZTogXCIjRkZGRkZGXCIsXHJcbiAgfSxcclxufTtcclxuXHJcbi8vIFNvdXMtY29tcG9zYW50IENhcmRIZWFkZXJcclxuY29uc3QgQ2FyZEhlYWRlciA9ICh7IGV4ZXJjaXNlLCBjb2xvcnMsIGxvY2FsU3R5bGVzIH0pID0+IChcclxuICA8VmlldyBzdHlsZT17bG9jYWxTdHlsZXMuY2FyZEhlYWRlcn0+XHJcbiAgICA8VmlldyBzdHlsZT17bG9jYWxTdHlsZXMubGV2ZWxUaXRsZUNvbnRhaW5lcn0+XHJcbiAgICAgIDxUZXh0IHN0eWxlPXtbbG9jYWxTdHlsZXMubGV2ZWxNYWluVGl0bGUsIHsgY29sb3I6IGNvbG9ycy50ZXh0IH1dfT57ZXhlcmNpc2UudGl0bGV9PC9UZXh0PlxyXG4gICAgICA8VmlldyBzdHlsZT17W2xvY2FsU3R5bGVzLmxldmVsQmFkZ2UsIHsgYmFja2dyb3VuZENvbG9yOiBleGVyY2lzZS5jb2xvciB9XX0+XHJcbiAgICAgICAgPFRleHQgc3R5bGU9e2xvY2FsU3R5bGVzLmxldmVsQmFkZ2VUZXh0fT57ZXhlcmNpc2UucHJvZ3Jlc3N9JTwvVGV4dD5cclxuICAgICAgPC9WaWV3PlxyXG4gICAgICB7ZXhlcmNpc2UuaWQgPT09IFwidm9jYWJ1bGFyeV9mYXN0XCIgJiYgKFxyXG4gICAgICAgIDxWaWV3IHN0eWxlPXtbbG9jYWxTdHlsZXMubGV2ZWxCYWRnZSwgbG9jYWxTdHlsZXMuZmFzdEJhZGdlXX0+XHJcbiAgICAgICAgICA8VGV4dCBzdHlsZT17W2xvY2FsU3R5bGVzLmxldmVsQmFkZ2VUZXh0LCBsb2NhbFN0eWxlcy5mYXN0QmFkZ2VUZXh0XX0+RkFTVDwvVGV4dD5cclxuICAgICAgICA8L1ZpZXc+XHJcbiAgICAgICl9XHJcbiAgICA8L1ZpZXc+XHJcbiAgICA8VGV4dCBzdHlsZT17bG9jYWxTdHlsZXMubGV2ZWxJY29ufT57ZXhlcmNpc2UuaWNvbn08L1RleHQ+XHJcbiAgPC9WaWV3PlxyXG4pO1xyXG5cclxuLy8gU291cy1jb21wb3NhbnQgUHJvZ3Jlc3Npb25cclxuY29uc3QgUHJvZ3Jlc3Npb24gPSAoeyBleGVyY2lzZSwgY29sb3JzLCBsb2NhbFN0eWxlcyB9KSA9PiAoXHJcbiAgZXhlcmNpc2UuaGFzUHJvZ3Jlc3MgJiYgKFxyXG4gICAgPFZpZXcgc3R5bGU9e2xvY2FsU3R5bGVzLnByb2dyZXNzQ29udGFpbmVyfT5cclxuICAgICAgPFZpZXcgc3R5bGU9e2xvY2FsU3R5bGVzLnByb2dyZXNzQmFyfT5cclxuICAgICAgICA8VmlldyBcclxuICAgICAgICAgIHN0eWxlPXtbXHJcbiAgICAgICAgICAgIGxvY2FsU3R5bGVzLnByb2dyZXNzRmlsbCxcclxuICAgICAgICAgICAgeyB3aWR0aDogYCR7ZXhlcmNpc2UucHJvZ3Jlc3N9JWAsIGJhY2tncm91bmRDb2xvcjogZXhlcmNpc2UuY29sb3IgfVxyXG4gICAgICAgICAgXX0gXHJcbiAgICAgICAgLz5cclxuICAgICAgPC9WaWV3PlxyXG4gICAgICA8VGV4dCBzdHlsZT17W2xvY2FsU3R5bGVzLnByb2dyZXNzVGV4dCwgeyBjb2xvcjogY29sb3JzLnRleHRTZWNvbmRhcnkgfV19PntleGVyY2lzZS5wcm9ncmVzc30lPC9UZXh0PlxyXG4gICAgPC9WaWV3PlxyXG4gIClcclxuKTtcclxuXHJcbi8vIFNvdXMtY29tcG9zYW50IENhcmRCdXR0b25cclxuY29uc3QgQ2FyZEJ1dHRvbiA9ICh7IGV4ZXJjaXNlLCBoYW5kbGVFeGVyY2lzZVByZXNzLCBsb2NhbFN0eWxlcyB9KSA9PiAoXHJcbiAgPEJ1dHRvblxyXG4gICAgdGl0bGU9e2V4ZXJjaXNlLmhhc1Byb2dyZXNzID8gXCJDb250aW51ZXJcIiA6IFwiQ29tbWVuY2VyXCJ9XHJcbiAgICB2YXJpYW50PVwiZmlsbGVkXCJcclxuICAgIGNvbG9yPXtleGVyY2lzZS5jb2xvcn1cclxuICAgIGZ1bGxXaWR0aFxyXG4gICAgb25QcmVzcz17aGFuZGxlRXhlcmNpc2VQcmVzcyhleGVyY2lzZSl9XHJcbiAgICBzdHlsZT17bG9jYWxTdHlsZXMuc3RhcnRCdXR0b259XHJcbiAgICByaWdodEljb249e2V4ZXJjaXNlLmhhc1Byb2dyZXNzID8gXCJwbGF5LW91dGxpbmVcIiA6IFwicm9ja2V0LW91dGxpbmVcIn1cclxuICAgIHRlc3RJRD17YCR7ZXhlcmNpc2UuaWR9LWJ1dHRvbmB9XHJcbiAgLz5cclxuKTtcclxuXHJcbi8vIFJlZmFjdG9yIEV4ZXJjaXNlQ2FyZENvbnRlbnQgcG91ciB1dGlsaXNlciBsZXMgc291cy1jb21wb3NhbnRzXHJcbmNvbnN0IEV4ZXJjaXNlQ2FyZENvbnRlbnQgPSAoeyBleGVyY2lzZSwgY29sb3JzLCBsb2NhbFN0eWxlcywgaGFuZGxlRXhlcmNpc2VQcmVzcyB9KSA9PiAoXHJcbiAgPFZpZXcgc3R5bGU9e2xvY2FsU3R5bGVzLmNhcmRDb250ZW50U3R5bGV9PlxyXG4gICAgPENhcmRIZWFkZXIgZXhlcmNpc2U9e2V4ZXJjaXNlfSBjb2xvcnM9e2NvbG9yc30gbG9jYWxTdHlsZXM9e2xvY2FsU3R5bGVzfSAvPlxyXG4gICAgPFByb2dyZXNzaW9uIGV4ZXJjaXNlPXtleGVyY2lzZX0gY29sb3JzPXtjb2xvcnN9IGxvY2FsU3R5bGVzPXtsb2NhbFN0eWxlc30gLz5cclxuICAgIDxDYXJkQnV0dG9uIGV4ZXJjaXNlPXtleGVyY2lzZX0gaGFuZGxlRXhlcmNpc2VQcmVzcz17aGFuZGxlRXhlcmNpc2VQcmVzc30gbG9jYWxTdHlsZXM9e2xvY2FsU3R5bGVzfSAvPlxyXG4gIDwvVmlldz5cclxuKTtcclxuXHJcbi8vIFNvdXMtY29tcG9zYW50IHBvdXIgbGEgc2VjdGlvbiBsaXN0ZSBkJ2V4ZXJjaWNlc1xyXG5jb25zdCBFeGVyY2lzZUxpc3RTZWN0aW9uID0gKHsgY29sb3JzLCBsb2NhbFN0eWxlcywgZXhlcmNpc2VzLCByZW5kZXJFeGVyY2lzZUNhcmQgfSkgPT4gKFxyXG4gIDxTY3JvbGxWaWV3XHJcbiAgICB0ZXN0SUQ9XCJleGVyY2lzZXMtc2Nyb2xsXCJcclxuICAgIHN0eWxlPXt7IGZsZXg6IDEgfX1cclxuICAgIGNvbnRlbnRDb250YWluZXJTdHlsZT17W2xvY2FsU3R5bGVzLnNjcm9sbENvbnRlbnQsIHsgcGFkZGluZ0JvdHRvbTogNjAgfV19XHJcbiAgICBzaG93c1ZlcnRpY2FsU2Nyb2xsSW5kaWNhdG9yPXtmYWxzZX1cclxuICA+XHJcbiAgICA8VmlldyBzdHlsZT17bG9jYWxTdHlsZXMuaW50cm9TZWN0aW9ufT5cclxuICAgICAgPFRleHQgc3R5bGU9e1tsb2NhbFN0eWxlcy5pbnRyb1RleHQsIHsgY29sb3I6IGNvbG9ycy50ZXh0U2Vjb25kYXJ5IH1dfT5DaG9pc2lzc2V6IHZvdHJlIGV4ZXJjaWNlPC9UZXh0PlxyXG4gICAgPC9WaWV3PlxyXG4gICAgPFZpZXcgc3R5bGU9e2xvY2FsU3R5bGVzLmxldmVsc0NvbnRhaW5lcn0+XHJcbiAgICAgIHtleGVyY2lzZXMubWFwKHJlbmRlckV4ZXJjaXNlQ2FyZCl9XHJcbiAgICA8L1ZpZXc+XHJcbiAgPC9TY3JvbGxWaWV3PlxyXG4pO1xyXG5cclxuY29uc3QgRXhlcmNpc2VTZWxlY3Rpb24gPSAoeyBsZXZlbCB9KSA9PiB7XHJcbiAgaWYgKCFsZXZlbCkge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICBjb25zdCB0aGVtZUNvbnRleHQgPSB1c2VDb250ZXh0KFRoZW1lQ29udGV4dCkgfHwgREVGQVVMVF9USEVNRTtcclxuICBjb25zdCB7IGNvbG9ycyB9ID0gdGhlbWVDb250ZXh0O1xyXG5cclxuICAvLyDwn5qAIEpVU1RFIFBPVVIgUsOJQ1VQw4lSRVIgTEVTIFZSQUlTIENISUZGUkVTXHJcbiAgY29uc3QgeyBnZXRFeGVyY2lzZVByb2dyZXNzLCBoYXNQcm9ncmVzcywgcmVmcmVzaCB9ID0gdXNlUmVhbFRpbWVQcm9ncmVzcygpO1xyXG4gIGNvbnN0IHsgbGV2ZWxJbmZvOiBjb21wdXRlZExldmVsSW5mbywgZXhlcmNpc2VzIH0gPSB1c2VFeGVyY2lzZUxpc3REYXRhKHsgbGV2ZWwsIGdldEV4ZXJjaXNlUHJvZ3Jlc3MsIGhhc1Byb2dyZXNzIH0pO1xyXG5cclxuICAvLyBJbmZvcyBkdSBuaXZlYXVcclxuICBjb25zdCBsZXZlbEluZm8gPSB1c2VNZW1vKCgpID0+IHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIGNvbXB1dGVkTGV2ZWxJbmZvIHx8IHtcclxuICAgICAgICBjb2xvcjogY29sb3JzLnByaW1hcnksXHJcbiAgICAgICAgdGl0bGU6IGBOaXZlYXUgJHtsZXZlbH1gLFxyXG4gICAgICAgIGljb246IGxldmVsID09PSBcImJvbnVzXCIgPyBcIuKtkFwiIDogXCLwn5OaXCIsXHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgfSwgW2NvbXB1dGVkTGV2ZWxJbmZvLCBsZXZlbCwgY29sb3JzLnByaW1hcnldKTtcclxuXHJcbiAgY29uc3QgbGV2ZWxDb2xvciA9IGxldmVsSW5mby5jb2xvcjtcclxuICBjb25zdCBiYWNrZ3JvdW5kR3JhZGllbnQgPSBnZXRCYWNrZ3JvdW5kR3JhZGllbnQobGV2ZWxDb2xvciwgY29sb3JzLmJhY2tncm91bmQpO1xyXG5cclxuICAvLyBleGVyY2lzZXMgcHLDqXBhcsOpcyBwYXIgbGUgaG9va1xyXG5cclxuICAvLyBOYXZpZ2F0aW9uXHJcbiAgY29uc3QgaGFuZGxlRXhlcmNpc2VTZWxlY3QgPSB1c2VDYWxsYmFjaygoZXhlcmNpc2UpID0+IHtcclxuICAgIGNvbnN0IHBhcmFtcyA9IHsgbGV2ZWwgfTtcclxuICAgIFxyXG4gICAgaWYgKGV4ZXJjaXNlLmlkID09PSAndm9jYWJ1bGFyeScpIHtcclxuICAgICAgcGFyYW1zLm1vZGUgPSAnY2xhc3NpYyc7XHJcbiAgICB9IGVsc2UgaWYgKGV4ZXJjaXNlLmlkID09PSAndm9jYWJ1bGFyeV9mYXN0Jykge1xyXG4gICAgICBwYXJhbXMubW9kZSA9ICdmYXN0JztcclxuICAgIH1cclxuICAgIFxyXG4gICAgcm91dGVyLnB1c2goe1xyXG4gICAgICBwYXRobmFtZTogZXhlcmNpc2Uucm91dGUsXHJcbiAgICAgIHBhcmFtc1xyXG4gICAgfSk7XHJcbiAgfSwgW2xldmVsXSk7XHJcblxyXG4gIGNvbnN0IGhhbmRsZUV4ZXJjaXNlUHJlc3MgPSB1c2VDYWxsYmFjayhcclxuICAgIChleGVyY2lzZSkgPT4gKCkgPT4gaGFuZGxlRXhlcmNpc2VTZWxlY3QoZXhlcmNpc2UpLFxyXG4gICAgW2hhbmRsZUV4ZXJjaXNlU2VsZWN0XVxyXG4gICk7XHJcblxyXG4gIHVzZUZvY3VzRWZmZWN0KFxyXG4gICAgdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgICByZWZyZXNoKCk7XHJcbiAgICB9LCBbcmVmcmVzaF0pXHJcbiAgKTtcclxuXHJcbiAgLy8gPT09PT09PT09PSBSRU5EVSAtIFRPTiBERVNJR04gT1JJR0lOQUwgPT09PT09PT09PVxyXG4gIGNvbnN0IHJlbmRlckhlYWRlciA9ICgpID0+IChcclxuICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuaGVhZGVyQ29udGFpbmVyfT5cclxuICAgICAgPExpbmVhckdyYWRpZW50XHJcbiAgICAgICAgY29sb3JzPXtbbGV2ZWxDb2xvciwgYCR7bGV2ZWxDb2xvcn1ERGBdfVxyXG4gICAgICAgIHN0YXJ0PXt7IHg6IDAsIHk6IDAgfX1cclxuICAgICAgICBlbmQ9e3sgeDogMSwgeTogMSB9fVxyXG4gICAgICAgIHN0eWxlPXtzdHlsZXMuaGVhZGVyR3JhZGllbnR9XHJcbiAgICAgID5cclxuICAgICAgICA8SGVhZGVyXHJcbiAgICAgICAgICB0aXRsZT17bGV2ZWxJbmZvLnRpdGxlfVxyXG4gICAgICAgICAgc2hvd0JhY2tCdXR0b25cclxuICAgICAgICAgIG9uQmFja1ByZXNzPXsoKSA9PiByb3V0ZXIucHVzaCgnL3RhYnMvbGV2ZWxTZWxlY3Rpb24nKX1cclxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcj1cInRyYW5zcGFyZW50XCJcclxuICAgICAgICAgIHRleHRDb2xvcj1cIndoaXRlXCJcclxuICAgICAgICAgIHdpdGhTdGF0dXNCYXI9e2ZhbHNlfVxyXG4gICAgICAgICAgd2l0aFNoYWRvdz17ZmFsc2V9XHJcbiAgICAgICAgICB0aXRsZUNvbnRhaW5lclN0eWxlPXtzdHlsZXMuaGVhZGVyVGl0bGV9XHJcbiAgICAgICAgICB0ZXN0SUQ9XCJleGVyY2lzZXMtaGVhZGVyXCJcclxuICAgICAgICAvPlxyXG5cclxuICAgICAgICB7bGV2ZWwgPT09IFwiYm9udXNcIiAmJiAoXHJcbiAgICAgICAgICA8VmlldyBzdHlsZT17eyBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLCBwYWRkaW5nQm90dG9tOiAxMiB9fT5cclxuICAgICAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5ib251c1RleHR9PlxyXG4gICAgICAgICAgICAgIENvbnRlbnUgZXhjbHVzaWYgZMOpYmxvcXXDqSAhXHJcbiAgICAgICAgICAgIDwvVGV4dD5cclxuICAgICAgICAgIDwvVmlldz5cclxuICAgICAgICApfVxyXG4gICAgICA8L0xpbmVhckdyYWRpZW50PlxyXG4gICAgPC9WaWV3PlxyXG4gICk7XHJcblxyXG4gIGNvbnN0IHJlbmRlckV4ZXJjaXNlQ2FyZCA9IHVzZUNhbGxiYWNrKChleGVyY2lzZSkgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPFRvdWNoYWJsZU9wYWNpdHlcclxuICAgICAgICBrZXk9e2V4ZXJjaXNlLmlkfVxyXG4gICAgICAgIHRlc3RJRD17YCR7ZXhlcmNpc2UuaWR9LWV4ZXJjaXNlYH1cclxuICAgICAgICBzdHlsZT17c3R5bGVzLmxldmVsQ2FyZH1cclxuICAgICAgICBvblByZXNzPXtoYW5kbGVFeGVyY2lzZVByZXNzKGV4ZXJjaXNlKX1cclxuICAgICAgICBhY3RpdmVPcGFjaXR5PXswLjh9XHJcbiAgICAgICAgYWNjZXNzaWJpbGl0eVJvbGU9XCJidXR0b25cIlxyXG4gICAgICAgIGFjY2Vzc2liaWxpdHlMYWJlbD17YCR7ZXhlcmNpc2UudGl0bGV9YH1cclxuICAgICAgICBhY2Nlc3NpYmlsaXR5VmFsdWU9e3sgbWluOiAwLCBtYXg6IDEwMCwgbm93OiBleGVyY2lzZS5wcm9ncmVzcyA/PyAwIH19XHJcbiAgICAgID5cclxuICAgICAgICA8RXhlcmNpc2VDYXJkQ29udGVudCBleGVyY2lzZT17ZXhlcmNpc2V9IGNvbG9ycz17Y29sb3JzfSBsb2NhbFN0eWxlcz17c3R5bGVzfSBoYW5kbGVFeGVyY2lzZVByZXNzPXtoYW5kbGVFeGVyY2lzZVByZXNzfSAvPlxyXG4gICAgICA8L1RvdWNoYWJsZU9wYWNpdHk+XHJcbiAgICApO1xyXG4gIH0sIFtoYW5kbGVFeGVyY2lzZVByZXNzLCBjb2xvcnMudGV4dCwgc3R5bGVzXSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8Q29udGFpbmVyXHJcbiAgICAgIHRlc3RJRD1cImV4ZXJjaXNlLXNlbGVjdGlvbi1jb250YWluZXJcIlxyXG4gICAgICBzYWZlQXJlYVxyXG4gICAgICBzYWZlQXJlYUVkZ2VzPXtDT05UQUlORVJfU0FGRV9FREdFUy5OT19CT1RUT019XHJcbiAgICAgIHdpdGhTY3JvbGxWaWV3PXtmYWxzZX1cclxuICAgICAgYmFja2dyb3VuZENvbG9yPVwidHJhbnNwYXJlbnRcIlxyXG4gICAgICBzdGF0dXNCYXJDb2xvcj17bGV2ZWxDb2xvcn1cclxuICAgICAgc3RhdHVzQmFyU3R5bGU9XCJsaWdodC1jb250ZW50XCJcclxuICAgICAgd2l0aFBhZGRpbmc9e2ZhbHNlfVxyXG4gICAgPlxyXG4gICAgICA8TGluZWFyR3JhZGllbnRcclxuICAgICAgICBjb2xvcnM9e2JhY2tncm91bmRHcmFkaWVudC5jb2xvcnN9XHJcbiAgICAgICAgbG9jYXRpb25zPXtiYWNrZ3JvdW5kR3JhZGllbnQubG9jYXRpb25zfVxyXG4gICAgICAgIHN0YXJ0PXt7IHg6IDAsIHk6IDAgfX1cclxuICAgICAgICBlbmQ9e3sgeDogMCwgeTogMSB9fVxyXG4gICAgICAgIHN0eWxlPXt7IGZsZXg6IDEgfX1cclxuICAgICAgPlxyXG4gICAgICAgIHtyZW5kZXJIZWFkZXIoKX1cclxuICAgICAgICA8RXhlcmNpc2VMaXN0U2VjdGlvbiBjb2xvcnM9e2NvbG9yc30gbG9jYWxTdHlsZXM9e3N0eWxlc30gZXhlcmNpc2VzPXtleGVyY2lzZXN9IHJlbmRlckV4ZXJjaXNlQ2FyZD17cmVuZGVyRXhlcmNpc2VDYXJkfSAvPlxyXG4gICAgICA8L0xpbmVhckdyYWRpZW50PlxyXG4gICAgPC9Db250YWluZXI+XHJcbiAgKTtcclxufTtcclxuXHJcbi8vIFByb3BUeXBlcyBwb3VyIHRvdXMgbGVzIHNvdXMtY29tcG9zYW50c1xyXG5DYXJkSGVhZGVyLnByb3BUeXBlcyA9IHtcclxuICBleGVyY2lzZTogUHJvcFR5cGVzLnNoYXBlKHtcclxuICAgIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXHJcbiAgICBjb2xvcjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxyXG4gICAgcHJvZ3Jlc3M6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcclxuICAgIGlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXHJcbiAgfSkuaXNSZXF1aXJlZCxcclxuICBjb2xvcnM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcclxuICBsb2NhbFN0eWxlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxyXG59O1xyXG5cclxuUHJvZ3Jlc3Npb24ucHJvcFR5cGVzID0ge1xyXG4gIGV4ZXJjaXNlOiBQcm9wVHlwZXMuc2hhcGUoe1xyXG4gICAgaGFzUHJvZ3Jlc3M6IFByb3BUeXBlcy5ib29sLFxyXG4gICAgcHJvZ3Jlc3M6IFByb3BUeXBlcy5udW1iZXIsXHJcbiAgfSkuaXNSZXF1aXJlZCxcclxuICBjb2xvcnM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcclxuICBsb2NhbFN0eWxlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxyXG59O1xyXG5cclxuQ2FyZEJ1dHRvbi5wcm9wVHlwZXMgPSB7XHJcbiAgZXhlcmNpc2U6IFByb3BUeXBlcy5zaGFwZSh7XHJcbiAgICBoYXNQcm9ncmVzczogUHJvcFR5cGVzLmJvb2wsXHJcbiAgICBjb2xvcjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxyXG4gICAgaWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcclxuICB9KS5pc1JlcXVpcmVkLFxyXG4gIGhhbmRsZUV4ZXJjaXNlUHJlc3M6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcbiAgbG9jYWxTdHlsZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcclxufTtcclxuXHJcbkV4ZXJjaXNlQ2FyZENvbnRlbnQucHJvcFR5cGVzID0ge1xyXG4gIGV4ZXJjaXNlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXHJcbiAgY29sb3JzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXHJcbiAgbG9jYWxTdHlsZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcclxuICBoYW5kbGVFeGVyY2lzZVByZXNzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG59O1xyXG5cclxuRXhlcmNpc2VMaXN0U2VjdGlvbi5wcm9wVHlwZXMgPSB7XHJcbiAgY29sb3JzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXHJcbiAgbG9jYWxTdHlsZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcclxuICBleGVyY2lzZXM6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxyXG4gIHJlbmRlckV4ZXJjaXNlQ2FyZDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxufTtcclxuXHJcbi8vIFByb3BUeXBlcyBwb3VyIGxlIGNvbXBvc2FudCBwcmluY2lwYWxcclxuRXhlcmNpc2VTZWxlY3Rpb24ucHJvcFR5cGVzID0ge1xyXG4gIGxldmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRXhlcmNpc2VTZWxlY3Rpb247Il0sIm1hcHBpbmdzIjoiOzs7OztBQUNBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQUNB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