a519818b7cb51fbdc85691e28151ec1d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _style = _interopRequireDefault(require("./style"));
var _useProgressAnimation2 = _interopRequireDefault(require("./useProgressAnimation"));
var _ProgressTrack = _interopRequireDefault(require("./ProgressTrack"));
var _ProgressFill = _interopRequireDefault(require("./ProgressFill"));
var _jsxRuntime = require("react/jsx-runtime");
var ProgressBar = function ProgressBar(_ref) {
  var _ref$progress = _ref.progress,
    progress = _ref$progress === void 0 ? 0 : _ref$progress,
    _ref$showPercentage = _ref.showPercentage,
    showPercentage = _ref$showPercentage === void 0 ? false : _ref$showPercentage,
    _ref$showValue = _ref.showValue,
    showValue = _ref$showValue === void 0 ? false : _ref$showValue,
    _ref$total = _ref.total,
    total = _ref$total === void 0 ? 100 : _ref$total,
    _ref$height = _ref.height,
    height = _ref$height === void 0 ? 8 : _ref$height,
    _ref$backgroundColor = _ref.backgroundColor,
    backgroundColor = _ref$backgroundColor === void 0 ? "#E5E7EB" : _ref$backgroundColor,
    _ref$fillColor = _ref.fillColor,
    fillColor = _ref$fillColor === void 0 ? "#5E60CE" : _ref$fillColor,
    _ref$borderRadius = _ref.borderRadius,
    borderRadius = _ref$borderRadius === void 0 ? 4 : _ref$borderRadius,
    _ref$animated = _ref.animated,
    animated = _ref$animated === void 0 ? true : _ref$animated,
    _ref$animationDuratio = _ref.animationDuration,
    animationDuration = _ref$animationDuratio === void 0 ? 600 : _ref$animationDuratio,
    label = _ref.label,
    _ref$labelPosition = _ref.labelPosition,
    labelPosition = _ref$labelPosition === void 0 ? "top" : _ref$labelPosition,
    style = _ref.style,
    _ref$valueFormatter = _ref.valueFormatter,
    valueFormatter = _ref$valueFormatter === void 0 ? function (value, totalValue) {
      return `${value}/${totalValue}`;
    } : _ref$valueFormatter,
    _ref$percentageFormat = _ref.percentageFormatter,
    percentageFormatter = _ref$percentageFormat === void 0 ? function (percentage) {
      return `${Math.round(percentage)}%`;
    } : _ref$percentageFormat,
    testID = _ref.testID;
  var styles = (0, _style.default)(fillColor, height, borderRadius);
  var validProgress = Math.round(Math.min(Math.max(Number(progress) || 0, 0), 100));
  var _useProgressAnimation = (0, _useProgressAnimation2.default)({
      progress: validProgress,
      animated: animated,
      duration: animationDuration
    }),
    width = _useProgressAnimation.width;
  var renderLabel = function renderLabel() {
    if (!label) return null;
    return (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: styles.label,
      children: label
    });
  };
  var renderValue = function renderValue() {
    if (!showValue) return null;
    var calculatedValue = Math.round(validProgress / 100 * total);
    return (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: styles.value,
      children: valueFormatter(calculatedValue, total)
    });
  };
  var renderPercentage = function renderPercentage() {
    if (!showPercentage) return null;
    return (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [styles.percentage, {
        color: fillColor
      }],
      children: percentageFormatter(validProgress)
    });
  };
  var renderTopContent = function renderTopContent() {
    if (labelPosition !== "top") return null;
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.topContentContainer,
      children: [renderLabel(), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.valuesContainer,
        children: [renderValue(), renderPercentage()]
      })]
    });
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [styles.container, style],
    testID: testID,
    accessible: true,
    accessibilityRole: "progressbar",
    accessibilityValue: {
      min: 0,
      max: 100,
      now: validProgress,
      text: percentageFormatter(validProgress)
    },
    accessibilityLabel: label || undefined,
    children: [renderTopContent(), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.progressBarContainer,
      children: [(0, _jsxRuntime.jsx)(_ProgressTrack.default, {
        style: styles.progressTrack,
        backgroundColor: backgroundColor,
        borderRadius: borderRadius
      }), (0, _jsxRuntime.jsx)(_ProgressFill.default, {
        style: styles.progressFill,
        width: width,
        fillColor: fillColor,
        borderRadius: borderRadius
      })]
    }), labelPosition !== "top" && showPercentage && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.inlinePercentage,
      children: renderPercentage()
    })]
  });
};
var _default = exports.default = ProgressBar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,