0d1263c88f5eeb6d919843d4a2ed4b3e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useProgress = exports.default = exports.ProgressProvider = exports.ProgressContext = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _constants = require("../utils/constants");
var _jsxRuntime = require("react/jsx-runtime");
var ProgressContext = exports.ProgressContext = (0, _react.createContext)();
var createInitialProgress = function createInitialProgress() {
  return {
    levels: {
      '1': {
        completed: 0,
        total: 100
      },
      '2': {
        completed: 0,
        total: 100
      },
      '3': {
        completed: 0,
        total: 100
      },
      '4': {
        completed: 0,
        total: 100
      },
      '5': {
        completed: 0,
        total: 100
      },
      '6': {
        completed: 0,
        total: 100
      },
      'bonus': {
        completed: 0,
        total: 100
      }
    },
    exercises: {
      vocabulary: {
        '1': {
          completed: 0,
          total: 100
        },
        '2': {
          completed: 0,
          total: 100
        },
        '3': {
          completed: 0,
          total: 100
        },
        '4': {
          completed: 0,
          total: 100
        },
        '5': {
          completed: 0,
          total: 100
        },
        '6': {
          completed: 0,
          total: 100
        },
        'bonus': {
          completed: 0,
          total: 100
        }
      },
      phrases: {
        '1': {
          completed: 0,
          total: 100
        },
        '2': {
          completed: 0,
          total: 100
        },
        '3': {
          completed: 0,
          total: 100
        },
        '4': {
          completed: 0,
          total: 100
        },
        '5': {
          completed: 0,
          total: 100
        },
        '6': {
          completed: 0,
          total: 100
        },
        'bonus': {
          completed: 0,
          total: 100
        }
      },
      grammar: {
        '1': {
          completed: 0,
          total: 100
        },
        '2': {
          completed: 0,
          total: 100
        },
        '3': {
          completed: 0,
          total: 100
        },
        '4': {
          completed: 0,
          total: 100
        },
        '5': {
          completed: 0,
          total: 100
        },
        '6': {
          completed: 0,
          total: 100
        }
      }
    },
    stats: {
      streak: 0,
      totalTimeSpent: 0,
      correctAnswers: 0,
      totalAnswers: 0,
      exercisesCompleted: 0,
      lastLogin: null
    },
    lastActivity: {
      type: null,
      level: null,
      timestamp: null
    }
  };
};
var ProgressProvider = exports.ProgressProvider = function ProgressProvider(_ref) {
  var children = _ref.children;
  var _useState = (0, _react.useState)(createInitialProgress()),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    progress = _useState2[0],
    setProgress = _useState2[1];
  var _useState3 = (0, _react.useState)(true),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isLoading = _useState4[0],
    setIsLoading = _useState4[1];
  var saveTimeoutRef = (0, _react.useRef)(null);
  var isInitialLoad = (0, _react.useRef)(true);
  (0, _react.useEffect)(function () {
    var loadProgress = function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* () {
        try {
          var stored = yield _asyncStorage.default.getItem(_constants.STORAGE_KEYS.USER_PROGRESS);
          if (stored) {
            var parsed = JSON.parse(stored);
            setProgress(parsed);
          }
        } catch (error) {
          console.error('Erreur chargement progression:', error);
        } finally {
          setIsLoading(false);
          isInitialLoad.current = false;
        }
      });
      return function loadProgress() {
        return _ref2.apply(this, arguments);
      };
    }();
    loadProgress();
  }, []);
  (0, _react.useEffect)(function () {
    if (isLoading || isInitialLoad.current) {
      return;
    }
    if (saveTimeoutRef.current) {
      clearTimeout(saveTimeoutRef.current);
    }
    saveTimeoutRef.current = setTimeout((0, _asyncToGenerator2.default)(function* () {
      try {
        yield _asyncStorage.default.setItem(_constants.STORAGE_KEYS.USER_PROGRESS, JSON.stringify(progress));
      } catch (error) {
        console.error('Erreur sauvegarde progression:', error);
      }
    }), 500);
    return function () {
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
    };
  }, [progress, isLoading]);
  var updateExerciseProgress = (0, _react.useCallback)(function (exerciseType, level, completed) {
    setProgress(function (prev) {
      var newProgress = Object.assign({}, prev);
      if (!newProgress.exercises[exerciseType]) {
        newProgress.exercises[exerciseType] = {};
      }
      if (!newProgress.exercises[exerciseType][level]) {
        newProgress.exercises[exerciseType][level] = {
          completed: 0,
          total: 100
        };
      }
      newProgress.exercises[exerciseType][level].completed = Math.min(Math.max(0, completed), 100);
      var levelExercises = Object.keys(newProgress.exercises).map(function (type) {
        var _newProgress$exercise;
        return ((_newProgress$exercise = newProgress.exercises[type][level]) == null ? void 0 : _newProgress$exercise.completed) || 0;
      }).filter(function (val) {
        return val > 0;
      });
      if (levelExercises.length > 0) {
        var averageProgress = levelExercises.reduce(function (sum, val) {
          return sum + val;
        }, 0) / levelExercises.length;
        newProgress.levels[level].completed = Math.round(averageProgress);
      }
      newProgress.lastActivity = {
        type: exerciseType,
        level: level,
        timestamp: new Date().toISOString()
      };
      return newProgress;
    });
  }, []);
  var updateStats = (0, _react.useCallback)(function (newStats) {
    setProgress(function (prev) {
      return Object.assign({}, prev, {
        stats: Object.assign({}, prev.stats, newStats)
      });
    });
  }, []);
  var calculateGlobalProgress = (0, _react.useCallback)(function () {
    var levels = Object.values(progress.levels);
    if (levels.length === 0) return 0;
    var total = levels.reduce(function (sum, level) {
      return sum + level.completed;
    }, 0);
    return Math.round(total / levels.length);
  }, [progress.levels]);
  var calculateLevelProgress = (0, _react.useCallback)(function (level) {
    var _progress$levels$leve;
    return ((_progress$levels$leve = progress.levels[level]) == null ? void 0 : _progress$levels$leve.completed) || 0;
  }, [progress.levels]);
  var resetProgress = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      yield _asyncStorage.default.removeItem(_constants.STORAGE_KEYS.USER_PROGRESS);
      setProgress(createInitialProgress());
      return true;
    } catch (error) {
      console.error('Erreur reset progression:', error);
      return false;
    }
  }), []);
  var contextValue = (0, _react.useMemo)(function () {
    return {
      progress: progress,
      isLoading: isLoading,
      updateExerciseProgress: updateExerciseProgress,
      updateStats: updateStats,
      calculateGlobalProgress: calculateGlobalProgress,
      calculateLevelProgress: calculateLevelProgress,
      resetProgress: resetProgress
    };
  }, [progress, isLoading, updateExerciseProgress, updateStats, calculateGlobalProgress, calculateLevelProgress, resetProgress]);
  return (0, _jsxRuntime.jsx)(ProgressContext.Provider, {
    value: contextValue,
    children: children
  });
};
var useProgress = exports.useProgress = function useProgress() {
  var context = (0, _react.useContext)(ProgressContext);
  if (!context) {
    throw new Error('useProgress must be used within a ProgressProvider');
  }
  return context;
};
var _default = exports.default = ProgressContext;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,