d70c5f088c304ddf60a13fe95de675d3
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _expoRouter = require("expo-router");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _RevisionPopup = _interopRequireDefault(require("../../Dashboard/components/popup/RevisionPopup"));
var _jsxRuntime = require("react/jsx-runtime");
var REVISION_STORAGE_KEY = 'revision_preferences';
var RevisionOrchestrator = function RevisionOrchestrator(_ref) {
  var _ref$currentLevel = _ref.currentLevel,
    currentLevel = _ref$currentLevel === void 0 ? "mixed" : _ref$currentLevel;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    showPopup = _useState2[0],
    setShowPopup = _useState2[1];
  var _useState3 = (0, _react.useState)(0),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    totalWords = _useState4[0],
    setTotalWords = _useState4[1];
  var _useState5 = (0, _react.useState)(50),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    nextRevisionAt = _useState6[0],
    setNextRevisionAt = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    isDisabled = _useState8[0],
    setIsDisabled = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    isLoaded = _useState0[0],
    setIsLoaded = _useState0[1];
  var popupShownRef = (0, _react.useRef)(false);
  var countWords = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      try {
        var total = 0;
        var levels = ['1', '2', '3', '4', '5', '6', 'bonus'];
        var modes = ['classic', 'fast'];
        for (var level of levels) {
          for (var mode of modes) {
            var stored = yield _asyncStorage.default.getItem(`vocabulary_${level}_${mode}`);
            if (stored) {
              var data = JSON.parse(stored);
              var completedWords = data.completedWords || {};
              total += Object.values(completedWords).reduce(function (acc, words) {
                if (Array.isArray(words)) {
                  return acc + words.length;
                }
                return acc;
              }, 0);
            }
          }
        }
        setTotalWords(total);
        return total;
      } catch (error) {
        return 0;
      }
    });
    return function countWords() {
      return _ref2.apply(this, arguments);
    };
  }();
  var loadRevisionPreferences = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      try {
        var saved = yield _asyncStorage.default.getItem(REVISION_STORAGE_KEY);
        if (saved) {
          var prefs = JSON.parse(saved);
          setNextRevisionAt(prefs.nextRevisionAt || 50);
          setIsDisabled(prefs.isDisabled || false);
        } else {
          setNextRevisionAt(50);
          setIsDisabled(false);
        }
      } catch (error) {
        console.error('Error loading revision preferences:', error);
        setNextRevisionAt(50);
        setIsDisabled(false);
      } finally {
        setIsLoaded(true);
      }
    });
    return function loadRevisionPreferences() {
      return _ref3.apply(this, arguments);
    };
  }();
  var saveRevisionPreferences = function () {
    var _ref4 = (0, _asyncToGenerator2.default)(function* (newNextAt, newIsDisabled) {
      try {
        var prefs = {
          nextRevisionAt: newNextAt,
          isDisabled: newIsDisabled,
          lastUpdate: Date.now()
        };
        yield _asyncStorage.default.setItem(REVISION_STORAGE_KEY, JSON.stringify(prefs));
        setNextRevisionAt(newNextAt);
        setIsDisabled(newIsDisabled);
      } catch (error) {
        console.error('Error saving revision preferences:', error);
      }
    });
    return function saveRevisionPreferences(_x, _x2) {
      return _ref4.apply(this, arguments);
    };
  }();
  (0, _react.useEffect)(function () {
    var initializeRevision = function () {
      var _ref5 = (0, _asyncToGenerator2.default)(function* () {
        yield loadRevisionPreferences();
        yield countWords();
      });
      return function initializeRevision() {
        return _ref5.apply(this, arguments);
      };
    }();
    initializeRevision();
  }, []);
  (0, _react.useEffect)(function () {
    if (!isLoaded) return;
    var shouldShow = !isDisabled && totalWords >= nextRevisionAt && totalWords > 0 && !showPopup && !popupShownRef.current;
    if (shouldShow) {
      popupShownRef.current = true;
      setTimeout(function () {
        return setShowPopup(true);
      }, 1000);
    }
  }, [isLoaded, isDisabled, totalWords, nextRevisionAt, showPopup]);
  var handleChoice = (0, _react.useCallback)(function () {
    var _ref6 = (0, _asyncToGenerator2.default)(function* (choice) {
      setShowPopup(false);
      popupShownRef.current = false;
      switch (choice) {
        case 'now':
          {
            var nextTarget = totalWords + 50;
            yield saveRevisionPreferences(nextTarget, false);
            _expoRouter.router.push({
              pathname: "/tabs/vocabularyRevision",
              params: {
                level: currentLevel,
                questionsCount: 10,
                source: 'popup_trigger'
              }
            });
            break;
          }
        case 'later_50':
          {
            var next50 = totalWords + 50;
            yield saveRevisionPreferences(next50, false);
            break;
          }
        case 'later_100':
          {
            var next100 = totalWords + 100;
            yield saveRevisionPreferences(next100, false);
            break;
          }
        case 'disable':
          {
            yield saveRevisionPreferences(nextRevisionAt, true);
            break;
          }
        default:
          {
            var defaultNext = totalWords + 50;
            yield saveRevisionPreferences(defaultNext, false);
            break;
          }
      }
    });
    return function (_x3) {
      return _ref6.apply(this, arguments);
    };
  }(), [totalWords, saveRevisionPreferences, currentLevel, nextRevisionAt]);
  var handleDismiss = (0, _react.useCallback)(function () {
    return handleChoice('later_50');
  }, [handleChoice]);
  if (isDisabled) {
    return null;
  }
  return (0, _jsxRuntime.jsx)(_RevisionPopup.default, {
    visible: showPopup,
    totalWordsLearned: totalWords,
    questionsCount: 10,
    currentLevel: currentLevel,
    onChoice: handleChoice,
    onDismiss: handleDismiss
  });
};
var _default = exports.default = RevisionOrchestrator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,