2b91a1eea10c14bab004057bacaa67d5
_getJestObj().mock('expo-router', function () {
  return Object.assign({}, jest.requireActual('expo-router'), {
    useFocusEffect: jest.fn(function (callback) {
      return callback();
    }),
    router: {
      push: jest.fn()
    }
  });
});
_getJestObj().mock('../../src/screens/Dashboard/hooks/useDashboardState', function () {
  return {
    useDashboardState: jest.fn(function () {
      return {
        showLevelProgress: false,
        setShowLevelProgress: jest.fn(),
        openLevelProgressModal: jest.fn(),
        closeLevelProgressModal: jest.fn(),
        refreshing: false,
        activeTab: "home",
        setActiveTab: jest.fn(),
        onRefresh: jest.fn().mockResolvedValue()
      };
    })
  };
});
_getJestObj().mock('../../src/hooks/useRealTimeProgress', function () {
  return function () {
    return {
      getLevelProgress: jest.fn(function () {
        return 50;
      }),
      refresh: jest.fn()
    };
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _expoRouter = require("expo-router");
var _Dashboard = _interopRequireDefault(require("../../src/screens/Dashboard"));
var LastActivity = _interopRequireWildcard(require("../../src/hooks/useLastActivity"));
var _ProgressContext = require("../../src/contexts/ProgressContext");
var _ThemeContext = require("../../src/contexts/ThemeContext");
var _CurrentLevelContext = require("../../src/contexts/CurrentLevelContext");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var useLastActivitySpy = jest.spyOn(LastActivity, 'default');
var mockLastActivityData = {
  type: 'grammar',
  level: 'A1',
  title: 'Grammaire de base',
  timestamp: Date.now(),
  metadata: {
    categoryIndex: 1,
    word: 5,
    totalWords: 15
  }
};
describe('Scénario 2: Reprise de la dernière activité', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    useLastActivitySpy.mockClear();
  });
  it('devrait afficher la section "Continuer" et naviguer correctement', (0, _asyncToGenerator2.default)(function* () {
    useLastActivitySpy.mockReturnValue({
      lastActivity: mockLastActivityData,
      isLoading: false,
      saveActivity: jest.fn(),
      clearActivity: jest.fn(),
      reload: jest.fn()
    });
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsx)(_CurrentLevelContext.CurrentLevelProvider, {
            children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
          })
        })
      })),
      getByTestId = _render.getByTestId,
      getByText = _render.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('hero-continue-section')).toBeTruthy();
    });
    expect(getByText('Grammaire de base')).toBeTruthy();
    expect(getByText(/Niv A1/)).toBeTruthy();
    expect(getByText(/Mot 6\/15/)).toBeTruthy();
    var continueButton = getByTestId('continue-activity-button');
    _reactNative.fireEvent.press(continueButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_expoRouter.router.push).toHaveBeenCalledWith({
        pathname: '/tabs/grammarExercise',
        params: {
          level: 'A1'
        }
      });
    });
  }));
  it('devrait afficher la section vide s\'il n\'y a pas de dernière activité', (0, _asyncToGenerator2.default)(function* () {
    useLastActivitySpy.mockReturnValue({
      lastActivity: null,
      isLoading: false,
      saveActivity: jest.fn(),
      clearActivity: jest.fn(),
      reload: jest.fn()
    });
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsx)(_CurrentLevelContext.CurrentLevelProvider, {
            children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
          })
        })
      })),
      getByTestId = _render2.getByTestId,
      getByText = _render2.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('hero-empty-section')).toBeTruthy();
    });
    expect(getByText("Commencer l'apprentissage")).toBeTruthy();
    var startButton = getByTestId('level-selection-button');
    _reactNative.fireEvent.press(startButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_expoRouter.router.push).toHaveBeenCalledWith('/tabs/levelSelection');
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,