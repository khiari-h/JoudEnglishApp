4d579b9e157699e957d6ff1fce26b934
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAnimatedComponent = createAnimatedComponent;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
require("../layoutReanimation/animationsManager.js");
var _invariant = _interopRequireDefault(require("invariant"));
var _ConfigHelper = require("../ConfigHelper.js");
var _findHostInstance = require("../platform-specific/findHostInstance");
var _core = require("../core.js");
var _index = require("../layoutReanimation/index.js");
var _fabricUtils = require("../fabricUtils");
var _PropsRegistry = require("../PropsRegistry.js");
var _util = require("../animation/util.js");
var _animationBuilder = require("../animationBuilder.js");
var _LayoutAnimationConfig = require("../component/LayoutAnimationConfig.js");
var _JSPropsUpdater = _interopRequireDefault(require("./JSPropsUpdater"));
var _utils = require("./utils.js");
var _setAndForwardRef = _interopRequireDefault(require("./setAndForwardRef.js"));
var _PlatformChecker = require("../PlatformChecker.js");
var _InlinePropManager = require("./InlinePropManager.js");
var _PropsFilter = require("./PropsFilter.js");
var _index2 = require("../layoutReanimation/web/index.js");
var _UpdateLayoutAnimations = require("../UpdateLayoutAnimations.js");
var _domUtils = require("../layoutReanimation/web/domUtils.js");
var _getViewInfo2 = require("./getViewInfo.js");
var _NativeEventsManager = require("./NativeEventsManager.js");
var _errors = require("../errors.js");
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function (n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
var IS_WEB = (0, _PlatformChecker.isWeb)();
var IS_JEST = (0, _PlatformChecker.isJest)();
var SHOULD_BE_USE_WEB = (0, _PlatformChecker.shouldBeUseWeb)();
if (IS_WEB) {
  (0, _index2.configureWebLayoutAnimations)();
}
function onlyAnimatedStyles(styles) {
  return styles.filter(function (style) {
    return style == null ? void 0 : style.viewDescriptors;
  });
}
var id = 0;
function createAnimatedComponent(Component, options) {
  (0, _invariant.default)(typeof Component !== 'function' || Component.prototype && Component.prototype.isReactComponent, `Looks like you're passing a function component \`${Component.name}\` to \`createAnimatedComponent\` function which supports only class components. Please wrap your function component with \`React.forwardRef()\` or use a class component instead.`);
  var AnimatedComponent = function (_React$Component) {
    function AnimatedComponent(props) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedComponent);
      _this = _callSuper(this, AnimatedComponent, [props]);
      _this._styles = null;
      _this._isFirstRender = true;
      _this.jestAnimatedStyle = {
        value: {}
      };
      _this._componentRef = null;
      _this._sharedElementTransition = null;
      _this._jsPropsUpdater = new _JSPropsUpdater.default();
      _this._InlinePropManager = new _InlinePropManager.InlinePropManager();
      _this._PropsFilter = new _PropsFilter.PropsFilter();
      _this.reanimatedID = id++;
      _this._resolveComponentRef = function (ref) {
        var componentRef = ref;
        if (componentRef && componentRef.getAnimatableRef) {
          return componentRef.getAnimatableRef();
        }
        return componentRef;
      };
      _this._setComponentRef = (0, _setAndForwardRef.default)({
        getForwardedRef: function getForwardedRef() {
          return _this.props.forwardedRef;
        },
        setLocalRef: function setLocalRef(ref) {
          if (!ref) {
            return;
          }
          if (ref !== _this._componentRef) {
            _this._componentRef = _this._resolveComponentRef(ref);
            _this._viewInfo = undefined;
          }
          var tag = _this.getComponentViewTag();
          var _this$props = _this.props,
            layout = _this$props.layout,
            entering = _this$props.entering,
            exiting = _this$props.exiting,
            sharedTransitionTag = _this$props.sharedTransitionTag;
          if (layout || entering || exiting || sharedTransitionTag) {
            var _this$context;
            if (!SHOULD_BE_USE_WEB) {
              (0, _core.enableLayoutAnimations)(true, false);
            }
            if (sharedTransitionTag) {
              _this._configureSharedTransition();
            }
            if (exiting && (0, _PlatformChecker.isFabric)()) {
              var reduceMotionInExiting = 'getReduceMotion' in exiting && typeof exiting.getReduceMotion === 'function' ? (0, _util.getReduceMotionFromConfig)(exiting.getReduceMotion()) : (0, _util.getReduceMotionFromConfig)();
              if (!reduceMotionInExiting) {
                var _this$props2;
                (0, _UpdateLayoutAnimations.updateLayoutAnimations)(tag, _index.LayoutAnimationType.EXITING, (0, _animationBuilder.maybeBuild)(exiting, (_this$props2 = _this.props) == null ? void 0 : _this$props2.style, AnimatedComponent.displayName));
              }
            }
            var skipEntering = (_this$context = _this.context) == null ? void 0 : _this$context.current;
            if (entering && !skipEntering && !IS_WEB) {
              var _this$props3;
              (0, _UpdateLayoutAnimations.updateLayoutAnimations)(tag, _index.LayoutAnimationType.ENTERING, (0, _animationBuilder.maybeBuild)(entering, (_this$props3 = _this.props) == null ? void 0 : _this$props3.style, AnimatedComponent.displayName));
            }
          }
        }
      });
      if (IS_JEST) {
        _this.jestAnimatedStyle = {
          value: {}
        };
      }
      var _entering = _this.props.entering;
      if (_entering && (0, _PlatformChecker.isFabric)()) {
        var _this$props4;
        (0, _UpdateLayoutAnimations.updateLayoutAnimations)(_this.reanimatedID, _index.LayoutAnimationType.ENTERING, (0, _animationBuilder.maybeBuild)(_entering, (_this$props4 = _this.props) == null ? void 0 : _this$props4.style, AnimatedComponent.displayName));
      }
      return _this;
    }
    (0, _inherits2.default)(AnimatedComponent, _React$Component);
    return (0, _createClass2.default)(AnimatedComponent, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this$_NativeEventsMa;
        if (!IS_WEB) {
          this._NativeEventsManager = new _NativeEventsManager.NativeEventsManager(this, options);
        }
        (_this$_NativeEventsMa = this._NativeEventsManager) == null || _this$_NativeEventsMa.attachEvents();
        this._jsPropsUpdater.addOnJSPropsChangeListener(this);
        this._attachAnimatedStyles();
        this._InlinePropManager.attachInlineProps(this, this._getViewInfo());
        var layout = this.props.layout;
        if (layout) {
          this._configureLayoutTransition();
        }
        if (IS_WEB) {
          var _this$context2;
          if (this.props.exiting) {
            (0, _index2.saveSnapshot)(this._componentRef);
          }
          if (!this.props.entering || (0, _index2.getReducedMotionFromConfig)(this.props.entering)) {
            this._isFirstRender = false;
            return;
          }
          var skipEntering = (_this$context2 = this.context) == null ? void 0 : _this$context2.current;
          if (!skipEntering) {
            (0, _index2.startWebLayoutAnimation)(this.props, this._componentRef, _index.LayoutAnimationType.ENTERING);
          } else {
            this._componentRef.style.visibility = 'initial';
          }
        }
        this._isFirstRender = false;
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var _this$_NativeEventsMa2, _this$_sharedElementT;
        (_this$_NativeEventsMa2 = this._NativeEventsManager) == null || _this$_NativeEventsMa2.detachEvents();
        this._jsPropsUpdater.removeOnJSPropsChangeListener(this);
        this._detachStyles();
        this._InlinePropManager.detachInlineProps();
        if (this.props.sharedTransitionTag) {
          this._configureSharedTransition(true);
        }
        (_this$_sharedElementT = this._sharedElementTransition) == null || _this$_sharedElementT.unregisterTransition(this.getComponentViewTag(), true);
        var exiting = this.props.exiting;
        if (IS_WEB && this._componentRef && exiting && !(0, _index2.getReducedMotionFromConfig)(exiting)) {
          (0, _domUtils.addHTMLMutationObserver)();
          (0, _index2.startWebLayoutAnimation)(this.props, this._componentRef, _index.LayoutAnimationType.EXITING);
        } else if (exiting && !IS_WEB && !(0, _PlatformChecker.isFabric)()) {
          var reduceMotionInExiting = 'getReduceMotion' in exiting && typeof exiting.getReduceMotion === 'function' ? (0, _util.getReduceMotionFromConfig)(exiting.getReduceMotion()) : (0, _util.getReduceMotionFromConfig)();
          if (!reduceMotionInExiting) {
            var _this$props5;
            (0, _UpdateLayoutAnimations.updateLayoutAnimations)(this.getComponentViewTag(), _index.LayoutAnimationType.EXITING, (0, _animationBuilder.maybeBuild)(exiting, (_this$props5 = this.props) == null ? void 0 : _this$props5.style, AnimatedComponent.displayName));
          }
        }
      }
    }, {
      key: "getComponentViewTag",
      value: function getComponentViewTag() {
        return this._getViewInfo().viewTag;
      }
    }, {
      key: "_detachStyles",
      value: function _detachStyles() {
        var viewTag = this.getComponentViewTag();
        if (viewTag !== -1 && this._styles !== null) {
          var _this$props$animatedP;
          for (var style of this._styles) {
            style.viewDescriptors.remove(viewTag);
          }
          if ((_this$props$animatedP = this.props.animatedProps) != null && _this$props$animatedP.viewDescriptors) {
            this.props.animatedProps.viewDescriptors.remove(viewTag);
          }
          if ((0, _PlatformChecker.isFabric)()) {
            (0, _PropsRegistry.removeFromPropsRegistry)(viewTag);
          }
        }
      }
    }, {
      key: "_updateFromNative",
      value: function _updateFromNative(props) {
        if (options != null && options.setNativeProps) {
          options.setNativeProps(this._componentRef, props);
        } else {
          var _this$_componentRef;
          (_this$_componentRef = this._componentRef) == null || _this$_componentRef.setNativeProps == null || _this$_componentRef.setNativeProps(props);
        }
      }
    }, {
      key: "_getViewInfo",
      value: function _getViewInfo() {
        if (this._viewInfo !== undefined) {
          return this._viewInfo;
        }
        var viewTag;
        var viewName;
        var shadowNodeWrapper = null;
        var viewConfig;
        if (SHOULD_BE_USE_WEB) {
          viewTag = this._componentRef;
          viewName = null;
          shadowNodeWrapper = null;
          viewConfig = null;
        } else {
          var hostInstance = (0, _findHostInstance.findHostInstance)(this);
          if (!hostInstance) {
            throw new _errors.ReanimatedError('Cannot find host instance for this component. Maybe it renders nothing?');
          }
          var viewInfo = (0, _getViewInfo2.getViewInfo)(hostInstance);
          viewTag = viewInfo.viewTag;
          viewName = viewInfo.viewName;
          viewConfig = viewInfo.viewConfig;
          shadowNodeWrapper = (0, _PlatformChecker.isFabric)() ? (0, _fabricUtils.getShadowNodeWrapperFromRef)(this, hostInstance) : null;
        }
        this._viewInfo = {
          viewTag: viewTag,
          viewName: viewName,
          shadowNodeWrapper: shadowNodeWrapper,
          viewConfig: viewConfig
        };
        return this._viewInfo;
      }
    }, {
      key: "_attachAnimatedStyles",
      value: function _attachAnimatedStyles() {
        var _this$props$animatedP2,
          _this2 = this,
          _this$props$animatedP3;
        var styles = this.props.style ? onlyAnimatedStyles((0, _utils.flattenArray)(this.props.style)) : [];
        var prevStyles = this._styles;
        this._styles = styles;
        var prevAnimatedProps = this._animatedProps;
        this._animatedProps = this.props.animatedProps;
        var _this$_getViewInfo = this._getViewInfo(),
          viewTag = _this$_getViewInfo.viewTag,
          viewName = _this$_getViewInfo.viewName,
          shadowNodeWrapper = _this$_getViewInfo.shadowNodeWrapper,
          viewConfig = _this$_getViewInfo.viewConfig;
        var hasReanimated2Props = ((_this$props$animatedP2 = this.props.animatedProps) == null ? void 0 : _this$props$animatedP2.viewDescriptors) || styles.length;
        if (hasReanimated2Props && viewConfig) {
          (0, _ConfigHelper.adaptViewConfig)(viewConfig);
        }
        if (prevStyles) {
          var hasOneSameStyle = styles.length === 1 && prevStyles.length === 1 && styles[0] === prevStyles[0];
          if (!hasOneSameStyle) {
            var _loop = function _loop(prevStyle) {
              var isPresent = styles.some(function (style) {
                return style === prevStyle;
              });
              if (!isPresent) {
                prevStyle.viewDescriptors.remove(viewTag);
              }
            };
            for (var prevStyle of prevStyles) {
              _loop(prevStyle);
            }
          }
        }
        styles.forEach(function (style) {
          style.viewDescriptors.add({
            tag: viewTag,
            name: viewName,
            shadowNodeWrapper: shadowNodeWrapper
          });
          if (IS_JEST) {
            _this2.jestAnimatedStyle.value = Object.assign({}, _this2.jestAnimatedStyle.value, style.initial.value);
            style.jestAnimatedStyle.current = _this2.jestAnimatedStyle;
          }
        });
        if (prevAnimatedProps && prevAnimatedProps !== this.props.animatedProps) {
          prevAnimatedProps.viewDescriptors.remove(viewTag);
        }
        if ((_this$props$animatedP3 = this.props.animatedProps) != null && _this$props$animatedP3.viewDescriptors) {
          this.props.animatedProps.viewDescriptors.add({
            tag: viewTag,
            name: viewName,
            shadowNodeWrapper: shadowNodeWrapper
          });
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, _prevState, snapshot) {
        var _this$_NativeEventsMa3;
        var layout = this.props.layout;
        var oldLayout = prevProps.layout;
        if (layout !== oldLayout) {
          this._configureLayoutTransition();
        }
        if (this.props.sharedTransitionTag !== undefined || prevProps.sharedTransitionTag !== undefined) {
          this._configureSharedTransition();
        }
        (_this$_NativeEventsMa3 = this._NativeEventsManager) == null || _this$_NativeEventsMa3.updateEvents(prevProps);
        this._attachAnimatedStyles();
        this._InlinePropManager.attachInlineProps(this, this._getViewInfo());
        if (IS_WEB && this.props.exiting) {
          (0, _index2.saveSnapshot)(this._componentRef);
        }
        if (IS_WEB && snapshot !== null && this.props.layout && !(0, _index2.getReducedMotionFromConfig)(this.props.layout)) {
          (0, _index2.tryActivateLayoutTransition)(this.props, this._componentRef, snapshot);
        }
      }
    }, {
      key: "_configureLayoutTransition",
      value: function _configureLayoutTransition() {
        if (IS_WEB) {
          return;
        }
        var layout = this.props.layout ? (0, _animationBuilder.maybeBuild)(this.props.layout, undefined, AnimatedComponent.displayName) : undefined;
        (0, _UpdateLayoutAnimations.updateLayoutAnimations)(this.getComponentViewTag(), _index.LayoutAnimationType.LAYOUT, layout);
      }
    }, {
      key: "_configureSharedTransition",
      value: function _configureSharedTransition() {
        var _ref, _this$props$sharedTra;
        var isUnmounting = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        if (IS_WEB) {
          return;
        }
        var sharedTransitionTag = this.props.sharedTransitionTag;
        if (!sharedTransitionTag) {
          var _this$_sharedElementT2;
          (_this$_sharedElementT2 = this._sharedElementTransition) == null || _this$_sharedElementT2.unregisterTransition(this.getComponentViewTag(), isUnmounting);
          this._sharedElementTransition = null;
          return;
        }
        var sharedElementTransition = (_ref = (_this$props$sharedTra = this.props.sharedTransitionStyle) != null ? _this$props$sharedTra : this._sharedElementTransition) != null ? _ref : new _index.SharedTransition();
        sharedElementTransition.registerTransition(this.getComponentViewTag(), sharedTransitionTag, isUnmounting);
        this._sharedElementTransition = sharedElementTransition;
      }
    }, {
      key: "getSnapshotBeforeUpdate",
      value: function getSnapshotBeforeUpdate() {
        var _this$_componentRef2;
        if (IS_WEB && ((_this$_componentRef2 = this._componentRef) == null ? void 0 : _this$_componentRef2.getBoundingClientRect) !== undefined) {
          return this._componentRef.getBoundingClientRect();
        }
        return null;
      }
    }, {
      key: "render",
      value: function render() {
        var _this$context3;
        var filteredProps = this._PropsFilter.filterNonAnimatedProps(this);
        if (IS_JEST) {
          filteredProps.jestAnimatedStyle = this.jestAnimatedStyle;
        }
        if (this._isFirstRender && IS_WEB && filteredProps.entering && !(0, _index2.getReducedMotionFromConfig)(filteredProps.entering)) {
          var _filteredProps$style;
          filteredProps.style = Object.assign({}, (_filteredProps$style = filteredProps.style) != null ? _filteredProps$style : {}, {
            visibility: 'hidden'
          });
        }
        var platformProps = _reactNative.Platform.select({
          web: {},
          default: {
            collapsable: false
          }
        });
        var skipEntering = (_this$context3 = this.context) == null ? void 0 : _this$context3.current;
        var nativeID = skipEntering || !(0, _PlatformChecker.isFabric)() ? undefined : `${this.reanimatedID}`;
        var jestProps = IS_JEST ? {
          jestInlineStyle: this.props.style,
          jestAnimatedStyle: this.jestAnimatedStyle
        } : {};
        return _react.default.createElement(Component, _extends({
          nativeID: nativeID
        }, filteredProps, jestProps, {
          ref: this._setComponentRef
        }, platformProps));
      }
    }]);
  }(_react.default.Component);
  AnimatedComponent.contextType = _LayoutAnimationConfig.SkipEnteringContext;
  AnimatedComponent.displayName = `AnimatedComponent(${Component.displayName || Component.name || 'Component'})`;
  return _react.default.forwardRef(function (props, ref) {
    return _react.default.createElement(AnimatedComponent, _extends({}, props, ref === null ? null : {
      forwardedRef: ref
    }));
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,