c97d1e21eb6ec3b3b12ec9d764c98ef9
_getJestObj().mock('expo-linear-gradient', function () {
  return {
    LinearGradient: function LinearGradient(_ref) {
      var children = _ref.children,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      var _require = require('react-native'),
        View = _require.View;
      return (0, _jsxRuntime.jsx)(View, Object.assign({
        testID: "linear-gradient"
      }, props, {
        children: children
      }));
    }
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
_getJestObj().mock('../../../src/contexts/ProgressContext', function () {
  return {
    useProgress: function useProgress() {
      return {
        isLoading: false,
        progress: {
          level1: 50
        }
      };
    }
  };
});
_getJestObj().mock('../../../src/contexts/CurrentLevelContext', function () {
  return {
    useCurrentLevel: function useCurrentLevel() {
      return {
        setCurrentLevel: jest.fn(),
        currentLevel: '1'
      };
    }
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/hooks/useDashboardLevel', function () {
  return {
    useDashboardLevel: function useDashboardLevel() {
      return {
        currentLevel: '1',
        handleChangeActiveLevel: jest.fn(),
        levelColor: '#10B981',
        isLoaded: true
      };
    }
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/hooks/useDashboardState', function () {
  return {
    useDashboardState: function useDashboardState() {
      return {
        refreshing: false,
        onRefresh: jest.fn()
      };
    }
  };
});
_getJestObj().mock('../../../src/hooks/useLastActivity', function () {
  return {
    __esModule: true,
    default: function _default() {
      return {
        lastActivity: null,
        isLoading: false,
        reload: jest.fn()
      };
    }
  };
});
_getJestObj().mock('../../../src/hooks/useRealTimeProgress', function () {
  return {
    __esModule: true,
    default: function _default() {
      return {
        getLevelProgress: function getLevelProgress() {
          return 25;
        },
        refresh: jest.fn()
      };
    }
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/ModernHeader', function () {
  var _require2 = require('react-native'),
    View = _require2.View,
    Text = _require2.Text;
  return function ModernHeader(_ref2) {
    var level = _ref2.level,
      levelColor = _ref2.levelColor;
    return (0, _jsxRuntime.jsxs)(View, {
      testID: "modern-header",
      children: [(0, _jsxRuntime.jsx)(Text, {
        testID: "header-level",
        children: level
      }), (0, _jsxRuntime.jsx)(Text, {
        testID: "header-color",
        children: levelColor
      })]
    });
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/HeroContinueSection', function () {
  var _require3 = require('react-native'),
    View = _require3.View,
    Text = _require3.Text;
  return function HeroContinueSection(_ref3) {
    var lastActivity = _ref3.lastActivity,
      isLoading = _ref3.isLoading;
    return (0, _jsxRuntime.jsxs)(View, {
      testID: "hero-continue-section",
      children: [(0, _jsxRuntime.jsx)(Text, {
        testID: "hero-loading",
        children: isLoading.toString()
      }), (0, _jsxRuntime.jsx)(Text, {
        testID: "hero-activity",
        children: (lastActivity == null ? void 0 : lastActivity.type) || 'none'
      })]
    });
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/QuickActions', function () {
  var _require4 = require('react-native'),
    View = _require4.View,
    Text = _require4.Text;
  return function QuickActions(_ref4) {
    var currentLevel = _ref4.currentLevel,
      accentColor = _ref4.accentColor;
    return (0, _jsxRuntime.jsxs)(View, {
      testID: "quick-actions",
      children: [(0, _jsxRuntime.jsx)(Text, {
        testID: "quick-level",
        children: currentLevel
      }), (0, _jsxRuntime.jsx)(Text, {
        testID: "quick-color",
        children: accentColor
      })]
    });
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/SimpleMetrics', function () {
  var _require5 = require('react-native'),
    View = _require5.View,
    Text = _require5.Text;
  return function SimpleMetrics(_ref5) {
    var accentColor = _ref5.accentColor;
    return (0, _jsxRuntime.jsx)(View, {
      testID: "simple-metrics",
      children: (0, _jsxRuntime.jsx)(Text, {
        testID: "metrics-color",
        children: accentColor
      })
    });
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/LearningProgress', function () {
  var _require6 = require('react-native'),
    View = _require6.View,
    Text = _require6.Text;
  return function LearningProgress(_ref6) {
    var globalProgress = _ref6.globalProgress,
      currentLevel = _ref6.currentLevel;
    return (0, _jsxRuntime.jsxs)(View, {
      testID: "learning-progress",
      children: [(0, _jsxRuntime.jsx)(Text, {
        testID: "progress-value",
        children: globalProgress
      }), (0, _jsxRuntime.jsx)(Text, {
        testID: "progress-level",
        children: currentLevel
      })]
    });
  };
});
_getJestObj().mock('../../../src/screens/VocabularyRevision/RevisionOrchestrator', function () {
  var _require7 = require('react-native'),
    View = _require7.View,
    Text = _require7.Text;
  return function RevisionOrchestrator(_ref7) {
    var currentLevel = _ref7.currentLevel;
    return (0, _jsxRuntime.jsx)(View, {
      testID: "revision-orchestrator",
      children: (0, _jsxRuntime.jsx)(Text, {
        testID: "revision-level",
        children: currentLevel
      })
    });
  };
});
_getJestObj().mock('../../../src/components/layout/Container', function () {
  var _require8 = require('react-native'),
    ScrollView = _require8.ScrollView;
  return function Container(_ref8) {
    var children = _ref8.children,
      props = (0, _objectWithoutProperties2.default)(_ref8, _excluded2);
    return (0, _jsxRuntime.jsx)(ScrollView, Object.assign({
      testID: "container"
    }, props, {
      children: children
    }));
  };
});
_getJestObj().mock('../../../src/utils/constants', function () {
  return {
    LANGUAGE_LEVELS: {
      '1': {
        title: 'Débutant',
        color: '#10B981'
      },
      '2': {
        title: 'Élémentaire',
        color: '#3B82F6'
      },
      '3': {
        title: 'Intermédiaire',
        color: '#8B5CF6'
      }
    },
    CONTAINER_SAFE_EDGES: {
      NO_BOTTOM: []
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Dashboard = _interopRequireDefault(require("../../../src/screens/Dashboard"));
var _ThemeContext = require("../../../src/contexts/ThemeContext");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children"],
  _excluded2 = ["children"];
function _getJestObj() {
  var _require9 = require("@jest/globals"),
    jest = _require9.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Dashboard', function () {
  var mockTheme = {
    colors: {
      background: '#F8FAFC',
      primary: '#3B82F6',
      surface: '#FFFFFF',
      text: '#1F2937'
    }
  };
  var renderDashboard = function renderDashboard() {
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
      value: mockTheme,
      children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
    }));
  };
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('devrait rendre le Dashboard correctement', function () {
    renderDashboard();
    expect(_reactNative.screen.getByTestId('container')).toBeTruthy();
    expect(_reactNative.screen.getByTestId('modern-header')).toBeTruthy();
    expect(_reactNative.screen.getByTestId('hero-continue-section')).toBeTruthy();
    expect(_reactNative.screen.getByTestId('quick-actions')).toBeTruthy();
    expect(_reactNative.screen.getByTestId('simple-metrics')).toBeTruthy();
    expect(_reactNative.screen.getByTestId('learning-progress')).toBeTruthy();
    expect(_reactNative.screen.getByTestId('revision-orchestrator')).toBeTruthy();
  });
  it('devrait afficher le niveau correct', function () {
    renderDashboard();
    expect(_reactNative.screen.getByTestId('header-level')).toHaveTextContent('1');
    expect(_reactNative.screen.getByTestId('quick-level')).toHaveTextContent('1');
    expect(_reactNative.screen.getByTestId('progress-level')).toHaveTextContent('1');
    expect(_reactNative.screen.getByTestId('revision-level')).toHaveTextContent('1');
  });
  it('devrait afficher la couleur du niveau', function () {
    renderDashboard();
    expect(_reactNative.screen.getByTestId('header-color')).toHaveTextContent('#10B981');
    expect(_reactNative.screen.getByTestId('quick-color')).toHaveTextContent('#10B981');
    expect(_reactNative.screen.getByTestId('metrics-color')).toHaveTextContent('#10B981');
  });
  it('devrait afficher la progression', function () {
    renderDashboard();
    expect(_reactNative.screen.getByTestId('progress-value')).toHaveTextContent('25');
  });
  it('devrait gérer l\'absence d\'activité récente', function () {
    renderDashboard();
    expect(_reactNative.screen.getByTestId('hero-loading')).toHaveTextContent('false');
    expect(_reactNative.screen.getByTestId('hero-activity')).toHaveTextContent('none');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,