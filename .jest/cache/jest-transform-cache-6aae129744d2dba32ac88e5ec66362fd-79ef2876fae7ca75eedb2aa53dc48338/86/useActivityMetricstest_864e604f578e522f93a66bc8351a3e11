3cffd397f426e66bb98a9f111ae2ca57
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    setItem: jest.fn(function () {
      return Promise.resolve();
    }),
    getItem: jest.fn(function () {
      return Promise.resolve(null);
    }),
    removeItem: jest.fn(function () {
      return Promise.resolve();
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = require("@testing-library/react");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useActivityMetrics = _interopRequireDefault(require("../../src/hooks/useActivityMetrics"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useActivityMetrics', function () {
  var MOCK_DATE = new Date('2025-01-01T12:00:00.000Z');
  var MOCK_TODAY = MOCK_DATE.toDateString();
  var ONE_DAY = 24 * 60 * 60 * 1000;
  var TWO_DAYS = 2 * ONE_DAY;
  beforeEach(function () {
    jest.useFakeTimers();
    jest.setSystemTime(MOCK_DATE);
    jest.clearAllMocks();
  });
  afterEach(function () {
    jest.runOnlyPendingTimers();
    jest.useRealTimers();
    jest.clearAllTimers();
  });
  it('loads metrics and initializes default state', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify({
      someMetric: 42
    }));
    var _renderHook = (0, _react.renderHook)(function () {
        return (0, _useActivityMetrics.default)();
      }),
      result = _renderHook.result,
      waitForNextUpdate = _renderHook.waitForNextUpdate;
    expect(result.current.isLoading).toBe(true);
    yield waitForNextUpdate();
    expect(result.current.metrics).toEqual({
      someMetric: 42
    });
    expect(result.current.todayMinutes).toBe(0);
    expect(result.current.formattedTime).toBe('0min');
    expect(result.current.currentStreak).toBe(0);
    expect(_asyncStorage.default.getItem).toHaveBeenCalledWith('activity_metrics');
  }));
  it('tracks session duration and stores minutes', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook2 = (0, _react.renderHook)(function () {
        return (0, _useActivityMetrics.default)();
      }),
      result = _renderHook2.result,
      waitForNextUpdate = _renderHook2.waitForNextUpdate;
    yield waitForNextUpdate();
    (0, _react.act)(function () {
      return result.current.startSession();
    });
    (0, _react.act)(function () {
      return jest.advanceTimersByTime(2 * 60 * 1000);
    });
    yield (0, _react.act)((0, _asyncToGenerator2.default)(function* () {
      return result.current.endSession();
    }));
    expect(result.current.todayMinutes).toBe(2);
    expect(result.current.formattedTime).toBe('2min');
    expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('today_minutes', '2');
    expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('last_time_date', MOCK_TODAY);
  }));
  it('increments streak if last activity was yesterday', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValueOnce(null).mockResolvedValueOnce(JSON.stringify({
      currentStreak: 1
    })).mockResolvedValueOnce(new Date(MOCK_DATE.getTime() - ONE_DAY).toDateString());
    var _renderHook3 = (0, _react.renderHook)(function () {
        return (0, _useActivityMetrics.default)();
      }),
      result = _renderHook3.result,
      waitForNextUpdate = _renderHook3.waitForNextUpdate;
    yield waitForNextUpdate();
    (0, _react.act)(function () {
      return result.current.updateStreak();
    });
    yield waitForNextUpdate();
    expect(result.current.currentStreak).toBe(2);
    expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('current_streak', '2');
    expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('last_activity_date', MOCK_TODAY);
  }));
  it('resets streak if last activity was more than a day ago', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValueOnce(null).mockResolvedValueOnce(JSON.stringify({
      currentStreak: 5
    })).mockResolvedValueOnce(new Date(MOCK_DATE.getTime() - TWO_DAYS).toDateString());
    var _renderHook4 = (0, _react.renderHook)(function () {
        return (0, _useActivityMetrics.default)();
      }),
      result = _renderHook4.result,
      waitForNextUpdate = _renderHook4.waitForNextUpdate;
    yield waitForNextUpdate();
    (0, _react.act)(function () {
      return result.current.updateStreak();
    });
    yield waitForNextUpdate();
    expect(result.current.currentStreak).toBe(1);
    expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('current_streak', '1');
    expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('last_activity_date', MOCK_TODAY);
  }));
  it('does not update streak if already updated today', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValueOnce(null).mockResolvedValueOnce(JSON.stringify({
      currentStreak: 3
    })).mockResolvedValueOnce(MOCK_TODAY);
    var _renderHook5 = (0, _react.renderHook)(function () {
        return (0, _useActivityMetrics.default)();
      }),
      result = _renderHook5.result,
      waitForNextUpdate = _renderHook5.waitForNextUpdate;
    yield waitForNextUpdate();
    (0, _react.act)(function () {
      return result.current.updateStreak();
    });
    yield waitForNextUpdate();
    expect(result.current.currentStreak).toBe(3);
    expect(_asyncStorage.default.setItem).not.toHaveBeenCalledWith('current_streak', expect.any(String));
  }));
  it('returns correct streakTrend according to streak value', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook6 = (0, _react.renderHook)(function () {
        return (0, _useActivityMetrics.default)();
      }),
      result = _renderHook6.result,
      waitForNextUpdate = _renderHook6.waitForNextUpdate,
      rerender = _renderHook6.rerender;
    yield waitForNextUpdate();
    (0, _react.act)(function () {
      result.current.currentStreak = 1;
    });
    rerender();
    expect(result.current.streakTrend).toBe('üî• Continue!');
    (0, _react.act)(function () {
      result.current.currentStreak = 3;
    });
    rerender();
    expect(result.current.streakTrend).toBe('üí™ En forme!');
    (0, _react.act)(function () {
      result.current.currentStreak = 7;
    });
    rerender();
    expect(result.current.streakTrend).toBe('üèÜ Incroyable!');
    (0, _react.act)(function () {
      result.current.currentStreak = 0;
    });
    rerender();
    expect(result.current.streakTrend).toBeNull();
  }));
  it('returns formattedTime correctly for long durations', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook7 = (0, _react.renderHook)(function () {
        return (0, _useActivityMetrics.default)();
      }),
      result = _renderHook7.result,
      waitForNextUpdate = _renderHook7.waitForNextUpdate;
    yield waitForNextUpdate();
    (0, _react.act)(function () {
      return result.current.startSession();
    });
    (0, _react.act)(function () {
      return jest.advanceTimersByTime(30 * 60 * 1000);
    });
    yield (0, _react.act)((0, _asyncToGenerator2.default)(function* () {
      return result.current.endSession();
    }));
    expect(result.current.formattedTime).toBe('30min');
    (0, _react.act)(function () {
      return result.current.startSession();
    });
    (0, _react.act)(function () {
      return jest.advanceTimersByTime(60 * 60 * 1000);
    });
    yield (0, _react.act)((0, _asyncToGenerator2.default)(function* () {
      return result.current.endSession();
    }));
    expect(result.current.formattedTime).toBe('1h');
    (0, _react.act)(function () {
      return result.current.startSession();
    });
    (0, _react.act)(function () {
      return jest.advanceTimersByTime(75 * 60 * 1000);
    });
    yield (0, _react.act)((0, _asyncToGenerator2.default)(function* () {
      return result.current.endSession();
    }));
    expect(result.current.formattedTime).toBe('2h15min');
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,