{"version":3,"names":["_HScrollViewNativeComponents","require","_VScrollViewNativeComponents","_AnimatedImplementation","_interopRequireDefault","_FrameRateLogger","_RendererProxy","_UIManager","_flattenStyle","_splitLayoutProps2","_StyleSheet","_Dimensions","_dismissKeyboard","_Platform","_EventEmitter","_Keyboard","_TextInputState","_processDecelerationRate","_ScrollViewCommands","_ScrollViewContext","_interopRequireWildcard","_ScrollViewStickyHeader","_invariant","_memoizeOne","_nullthrows","React","_jsxRuntime","_excluded","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","_callSuper","_getPrototypeOf2","_possibleConstructorReturn2","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","prototype","valueOf","IS_ANIMATING_TOUCH_START_THRESHOLD_MS","_onScrollEmitter","_classPrivateFieldLooseKey2","ScrollView","_React$Component","props","_this$props$contentOf","_this$props$contentOf2","_this$props$contentIn","_this$props$contentIn2","_this","_classCallCheck2","_scrollAnimatedValueAttachment","_stickyHeaderRefs","Map","_headerLayoutYs","_keyboardMetrics","_additionalScrollOffset","_isTouching","_lastMomentumScrollBeginTime","_lastMomentumScrollEndTime","_observedScrollSinceBecomingResponder","_becameResponderWhileAnimating","_preventNegativeScrollOffset","_animated","_subscriptionKeyboardWillShow","_subscriptionKeyboardWillHide","_subscriptionKeyboardDidShow","_subscriptionKeyboardDidHide","writable","value","state","layoutHeight","getScrollResponder","getScrollableNode","findNodeHandle","getNativeScrollRef","getInnerViewNode","_innerView","nativeInstance","getInnerViewRef","_scrollView","componentRef","current","scrollTo","options","deprecatedX","deprecatedAnimated","x","y","animated","console","warn","component","Commands","scrollToEnd","flashScrollIndicators","_subscribeToOnScroll","callback","onScrollEmitter","_classPrivateFieldLooseBase2","_this$_scrollView$nat","EventEmitter","unstable_setEnableSyncOnScroll","addListener","scrollResponderScrollNativeHandleToKeyboard","nodeHandle","additionalOffset","preventNegativeScrollOffset","UIManager","measureLayout","nullthrows","_textInputFocusError","_inputMeasureAndScrollToKeyboard","scrollResponderZoomTo","rect","invariant","Platform","OS","zoomToRect","left","top","width","height","keyboardScreenY","Dimensions","scrollTextInputIntoVisibleRect","screenY","scrollOffsetY","Math","max","setTimeout","_handleScroll","_classPrivateFieldLoo","onScroll","emit","nativeEvent","contentOffset","_handleLayout","invertStickyHeaders","setState","layout","onLayout","_handleContentOnLayout","_e$nativeEvent$layout","onContentSizeChange","createRefForwarder","instance","nativeImperativeHandle","publicInstance","assign","unstable_subscribeToOnScroll","scrollResponderKeyboardWillShow","endCoordinates","onKeyboardWillShow","scrollResponderKeyboardWillHide","onKeyboardWillHide","scrollResponderKeyboardDidShow","onKeyboardDidShow","scrollResponderKeyboardDidHide","onKeyboardDidHide","_handleMomentumScrollBegin","global","performance","now","onMomentumScrollBegin","_handleMomentumScrollEnd","FrameRateLogger","endScroll","onMomentumScrollEnd","_handleScrollBeginDrag","beginScroll","keyboardDismissMode","dismissKeyboard","onScrollBeginDrag","_handleScrollEndDrag","velocity","_isAnimating","onScrollEndDrag","timeSinceLastMomentumScrollEnd","isAnimating","_handleResponderGrant","onResponderGrant","_handleResponderReject","_handleResponderRelease","touches","length","onResponderRelease","target","__DEV__","error","currentlyFocusedTextInput","TextInputState","currentlyFocusedInput","keyboardShouldPersistTaps","_keyboardIsDismissible","blurTextInput","_handleResponderTerminationRequest","_handleScrollShouldSetResponder","disableScrollViewPanResponder","_handleStartShouldSetResponder","_handleStartShouldSetResponderCapture","keyboardNeverPersistTaps","_softKeyboardIsDetached","isTextInput","hasFocusedTextInput","softKeyboardMayBeOpen","_keyboardEventsAreUnreliable","Version","_handleTouchEnd","keyboardNeverPersistsTaps","onTouchEnd","_handleTouchCancel","onTouchCancel","_handleTouchStart","onTouchStart","_handleTouchMove","onTouchMove","_scrollAnimatedValue","AnimatedImplementation","Value","setOffset","contentInset","_inherits2","_createClass2","key","componentDidMount","Keyboard","metrics","_updateAnimatedNodeAttachment","componentDidUpdate","prevProps","prevContentInsetTop","newContentInsetTop","componentWillUnmount","_classPrivateFieldLoo2","remove","detach","removeAllListeners","_getKeyForIndex","index","childArray","child","stickyHeaderIndices","attachNativeEvent","_setStickyHeaderRef","ref","delete","_onStickyHeaderLayout","event","Children","toArray","children","layoutY","indexOfIndex","indexOf","previousHeaderIndex","previousHeader","setNextHeaderY","render","_this2","horizontal","NativeScrollView","HScrollViewNativeComponent","VScrollViewNativeComponent","NativeScrollContentView","HScrollContentViewNativeComponent","VScrollContentViewNativeComponent","contentContainerStyle","styles","contentContainerHorizontal","style","undefined","flattenStyle","childLayoutProps","filter","prop","JSON","stringify","contentSizeChangeProps","map","nextIndex","StickyHeaderComponent","ScrollViewStickyHeader","jsx","nextHeaderLayoutY","scrollAnimatedValue","inverted","hiddenOnScroll","stickyHeaderHiddenOnScroll","scrollViewHeight","Provider","HORIZONTAL","VERTICAL","hasStickyHeaders","Array","isArray","preserveChildren","maintainVisibleContentPosition","snapToAlignment","contentContainer","getForwardingRef","innerViewRef","removeClippedSubviews","collapsable","collapsableChildren","alwaysBounceHorizontal","alwaysBounceVertical","baseStyle","baseHorizontal","baseVertical","_this$props","experimental_endDraggingSensitivityMultiplier","otherProps","_objectWithoutProperties2","StyleSheet","compose","onResponderReject","onResponderTerminationRequest","onScrollShouldSetResponder","onStartShouldSetResponder","onStartShouldSetResponderCapture","endDraggingSensitivityMultiplier","scrollEventThrottle","sendMomentumEvents","snapToStart","snapToEnd","pagingEnabled","select","ios","snapToInterval","snapToOffsets","android","decelerationRate","processDecelerationRate","refreshControl","scrollViewRef","jsxs","_splitLayoutProps","splitLayoutProps","outer","inner","cloneElement","Component","Context","ScrollViewContext","create","flexGrow","flexShrink","flexDirection","overflow","mutator","memoize","forwardedRef","Wrapper","forwardRef","displayName","module","exports"],"sources":["ScrollView.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {\n  TScrollViewNativeComponentInstance,\n  TScrollViewNativeImperativeHandle,\n} from '../../../src/private/components/useSyncOnScroll';\nimport type {HostComponent} from '../../Renderer/shims/ReactNativeTypes';\nimport type {EdgeInsetsProp} from '../../StyleSheet/EdgeInsetsPropType';\nimport type {PointProp} from '../../StyleSheet/PointPropType';\nimport type {ViewStyleProp} from '../../StyleSheet/StyleSheet';\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\nimport type {\n  LayoutEvent,\n  PressEvent,\n  ScrollEvent,\n} from '../../Types/CoreEventTypes';\nimport type {EventSubscription} from '../../vendor/emitter/EventEmitter';\nimport type {KeyboardEvent, KeyboardMetrics} from '../Keyboard/Keyboard';\nimport typeof View from '../View/View';\nimport type {ViewProps} from '../View/ViewPropTypes';\nimport type {Props as ScrollViewStickyHeaderProps} from './ScrollViewStickyHeader';\n\nimport {\n  HScrollContentViewNativeComponent,\n  HScrollViewNativeComponent,\n} from '../../../src/private/components/HScrollViewNativeComponents';\nimport {\n  VScrollContentViewNativeComponent,\n  VScrollViewNativeComponent,\n} from '../../../src/private/components/VScrollViewNativeComponents';\nimport AnimatedImplementation from '../../Animated/AnimatedImplementation';\nimport FrameRateLogger from '../../Interaction/FrameRateLogger';\nimport {findNodeHandle} from '../../ReactNative/RendererProxy';\nimport UIManager from '../../ReactNative/UIManager';\nimport flattenStyle from '../../StyleSheet/flattenStyle';\nimport splitLayoutProps from '../../StyleSheet/splitLayoutProps';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport Dimensions from '../../Utilities/Dimensions';\nimport dismissKeyboard from '../../Utilities/dismissKeyboard';\nimport Platform from '../../Utilities/Platform';\nimport EventEmitter from '../../vendor/emitter/EventEmitter';\nimport Keyboard from '../Keyboard/Keyboard';\nimport TextInputState from '../TextInput/TextInputState';\nimport processDecelerationRate from './processDecelerationRate';\nimport Commands from './ScrollViewCommands';\nimport ScrollViewContext, {HORIZONTAL, VERTICAL} from './ScrollViewContext';\nimport ScrollViewStickyHeader from './ScrollViewStickyHeader';\nimport invariant from 'invariant';\nimport memoize from 'memoize-one';\nimport nullthrows from 'nullthrows';\nimport * as React from 'react';\n\n/*\n * iOS scroll event timing nuances:\n * ===============================\n *\n *\n * Scrolling without bouncing, if you touch down:\n * -------------------------------\n *\n * 1. `onMomentumScrollBegin` (when animation begins after letting up)\n *    ... physical touch starts ...\n * 2. `onTouchStartCapture`   (when you press down to stop the scroll)\n * 3. `onTouchStart`          (same, but bubble phase)\n * 4. `onResponderRelease`    (when lifting up - you could pause forever before * lifting)\n * 5. `onMomentumScrollEnd`\n *\n *\n * Scrolling with bouncing, if you touch down:\n * -------------------------------\n *\n * 1. `onMomentumScrollBegin` (when animation begins after letting up)\n *    ... bounce begins ...\n *    ... some time elapses ...\n *    ... physical touch during bounce ...\n * 2. `onMomentumScrollEnd`   (Makes no sense why this occurs first during bounce)\n * 3. `onTouchStartCapture`   (immediately after `onMomentumScrollEnd`)\n * 4. `onTouchStart`          (same, but bubble phase)\n * 5. `onTouchEnd`            (You could hold the touch start for a long time)\n * 6. `onMomentumScrollBegin` (When releasing the view starts bouncing back)\n *\n * So when we receive an `onTouchStart`, how can we tell if we are touching\n * *during* an animation (which then causes the animation to stop)? The only way\n * to tell is if the `touchStart` occurred immediately after the\n * `onMomentumScrollEnd`.\n *\n * This is abstracted out for you, so you can just call this.scrollResponderIsAnimating() if\n * necessary\n *\n * `ScrollView` also includes logic for blurring a currently focused input\n * if one is focused while scrolling. This is a natural place\n * to put this logic since it can support not dismissing the keyboard while\n * scrolling, unless a recognized \"tap\"-like gesture has occurred.\n *\n * The public lifecycle API includes events for keyboard interaction, responder\n * interaction, and scrolling (among others). The keyboard callbacks\n * `onKeyboardWill/Did/*` are *global* events, but are invoked on scroll\n * responder's props so that you can guarantee that the scroll responder's\n * internal state has been updated accordingly (and deterministically) by\n * the time the props callbacks are invoke. Otherwise, you would always wonder\n * if the scroll responder is currently in a state where it recognizes new\n * keyboard positions etc. If coordinating scrolling with keyboard movement,\n * *always* use these hooks instead of listening to your own global keyboard\n * events.\n *\n * Public keyboard lifecycle API: (props callbacks)\n *\n * Standard Keyboard Appearance Sequence:\n *\n *   this.props.onKeyboardWillShow\n *   this.props.onKeyboardDidShow\n *\n * `onScrollResponderKeyboardDismissed` will be invoked if an appropriate\n * tap inside the scroll responder's scrollable region was responsible\n * for the dismissal of the keyboard. There are other reasons why the\n * keyboard could be dismissed.\n *\n *   this.props.onScrollResponderKeyboardDismissed\n *\n * Standard Keyboard Hide Sequence:\n *\n *   this.props.onKeyboardWillHide\n *   this.props.onKeyboardDidHide\n */\n\n// Public methods for ScrollView\nexport type ScrollViewImperativeMethods = $ReadOnly<{|\n  getScrollResponder: $PropertyType<ScrollView, 'getScrollResponder'>,\n  getScrollableNode: $PropertyType<ScrollView, 'getScrollableNode'>,\n  getInnerViewNode: $PropertyType<ScrollView, 'getInnerViewNode'>,\n  getInnerViewRef: $PropertyType<ScrollView, 'getInnerViewRef'>,\n  getNativeScrollRef: $PropertyType<ScrollView, 'getNativeScrollRef'>,\n  scrollTo: $PropertyType<ScrollView, 'scrollTo'>,\n  scrollToEnd: $PropertyType<ScrollView, 'scrollToEnd'>,\n  flashScrollIndicators: $PropertyType<ScrollView, 'flashScrollIndicators'>,\n  scrollResponderZoomTo: $PropertyType<ScrollView, 'scrollResponderZoomTo'>,\n  scrollResponderScrollNativeHandleToKeyboard: $PropertyType<\n    ScrollView,\n    'scrollResponderScrollNativeHandleToKeyboard',\n  >,\n|}>;\n\nexport type DecelerationRateType = 'fast' | 'normal' | number;\nexport type ScrollResponderType = ScrollViewImperativeMethods;\n\ntype PublicScrollViewInstance = $ReadOnly<{|\n  ...$Exact<TScrollViewNativeComponentInstance>,\n  ...ScrollViewImperativeMethods,\n|}>;\n\ntype InnerViewInstance = React.ElementRef<View>;\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * Controls whether iOS should automatically adjust the content inset\n   * for scroll views that are placed behind a navigation bar or\n   * tab bar/ toolbar. The default value is true.\n   * @platform ios\n   */\n  automaticallyAdjustContentInsets?: ?boolean,\n  /**\n   * Controls whether the ScrollView should automatically adjust its `contentInset`\n   * and `scrollViewInsets` when the Keyboard changes its size. The default value is false.\n   * @platform ios\n   */\n  automaticallyAdjustKeyboardInsets?: ?boolean,\n  /**\n   * Controls whether iOS should automatically adjust the scroll indicator\n   * insets. The default value is true. Available on iOS 13 and later.\n   * @platform ios\n   */\n  automaticallyAdjustsScrollIndicatorInsets?: ?boolean,\n  /**\n   * The amount by which the scroll view content is inset from the edges\n   * of the scroll view. Defaults to `{top: 0, left: 0, bottom: 0, right: 0}`.\n   * @platform ios\n   */\n  contentInset?: ?EdgeInsetsProp,\n  /**\n   * When true, the scroll view bounces when it reaches the end of the\n   * content if the content is larger then the scroll view along the axis of\n   * the scroll direction. When false, it disables all bouncing even if\n   * the `alwaysBounce*` props are true. The default value is true.\n   * @platform ios\n   */\n  bounces?: ?boolean,\n  /**\n   * By default, ScrollView has an active pan responder that hijacks panresponders\n   * deeper in the render tree in order to prevent accidental touches while scrolling.\n   * However, in certain occasions (such as when using snapToInterval) in a vertical scrollview\n   * You may want to disable this behavior in order to prevent the ScrollView from blocking touches\n   */\n  disableScrollViewPanResponder?: ?boolean,\n  /**\n   * When true, gestures can drive zoom past min/max and the zoom will animate\n   * to the min/max value at gesture end, otherwise the zoom will not exceed\n   * the limits.\n   * @platform ios\n   */\n  bouncesZoom?: ?boolean,\n  /**\n   * When true, the scroll view bounces horizontally when it reaches the end\n   * even if the content is smaller than the scroll view itself. The default\n   * value is true when `horizontal={true}` and false otherwise.\n   * @platform ios\n   */\n  alwaysBounceHorizontal?: ?boolean,\n  /**\n   * When true, the scroll view bounces vertically when it reaches the end\n   * even if the content is smaller than the scroll view itself. The default\n   * value is false when `horizontal={true}` and true otherwise.\n   * @platform ios\n   */\n  alwaysBounceVertical?: ?boolean,\n  /**\n   * When true, the scroll view automatically centers the content when the\n   * content is smaller than the scroll view bounds; when the content is\n   * larger than the scroll view, this property has no effect. The default\n   * value is false.\n   * @platform ios\n   */\n  centerContent?: ?boolean,\n  /**\n   * The style of the scroll indicators.\n   *\n   *   - `'default'` (the default), same as `black`.\n   *   - `'black'`, scroll indicator is black. This style is good against a light background.\n   *   - `'white'`, scroll indicator is white. This style is good against a dark background.\n   *\n   * @platform ios\n   */\n  indicatorStyle?: ?('default' | 'black' | 'white'),\n  /**\n   * When true, the ScrollView will try to lock to only vertical or horizontal\n   * scrolling while dragging.  The default value is false.\n   * @platform ios\n   */\n  directionalLockEnabled?: ?boolean,\n  /**\n   * When false, once tracking starts, won't try to drag if the touch moves.\n   * The default value is true.\n   * @platform ios\n   */\n  canCancelContentTouches?: ?boolean,\n  /**\n   * The maximum allowed zoom scale. The default value is 1.0.\n   * @platform ios\n   */\n  maximumZoomScale?: ?number,\n  /**\n   * The minimum allowed zoom scale. The default value is 1.0.\n   * @platform ios\n   */\n  minimumZoomScale?: ?number,\n  /**\n   * When true, ScrollView allows use of pinch gestures to zoom in and out.\n   * The default value is true.\n   * @platform ios\n   */\n  pinchGestureEnabled?: ?boolean,\n  /**\n   * The amount by which the scroll view indicators are inset from the edges\n   * of the scroll view. This should normally be set to the same value as\n   * the `contentInset`. Defaults to `{0, 0, 0, 0}`.\n   * @platform ios\n   */\n  scrollIndicatorInsets?: ?EdgeInsetsProp,\n  /**\n   * When true, the scroll view can be programmatically scrolled beyond its\n   * content size. The default value is false.\n   * @platform ios\n   */\n  scrollToOverflowEnabled?: ?boolean,\n  /**\n   * When true, the scroll view scrolls to top when the status bar is tapped.\n   * The default value is true.\n   * @platform ios\n   */\n  scrollsToTop?: ?boolean,\n  /**\n   * Fires when the scroll view scrolls to top after the status bar has been tapped\n   * @platform ios\n   */\n  onScrollToTop?: (event: ScrollEvent) => void,\n  /**\n   * When true, shows a horizontal scroll indicator.\n   * The default value is true.\n   */\n  showsHorizontalScrollIndicator?: ?boolean,\n  /**\n   * The current scale of the scroll view content. The default value is 1.0.\n   * @platform ios\n   */\n  zoomScale?: ?number,\n  /**\n   * This property specifies how the safe area insets are used to modify the\n   * content area of the scroll view. The default value of this property is\n   * \"never\". Available on iOS 11 and later.\n   * @platform ios\n   */\n  contentInsetAdjustmentBehavior?: ?(\n    | 'automatic'\n    | 'scrollableAxes'\n    | 'never'\n    | 'always'\n  ),\n|}>;\n\ntype AndroidProps = $ReadOnly<{|\n  /**\n   * Enables nested scrolling for Android API level 21+.\n   * Nested scrolling is supported by default on iOS\n   * @platform android\n   */\n  nestedScrollEnabled?: ?boolean,\n  /**\n   * Sometimes a scrollview takes up more space than its content fills. When this is\n   * the case, this prop will fill the rest of the scrollview with a color to avoid setting\n   * a background and creating unnecessary overdraw. This is an advanced optimization\n   * that is not needed in the general case.\n   * @platform android\n   */\n  endFillColor?: ?ColorValue,\n  /**\n   * Tag used to log scroll performance on this scroll view. Will force\n   * momentum events to be turned on (see sendMomentumEvents). This doesn't do\n   * anything out of the box and you need to implement a custom native\n   * FpsListener for it to be useful.\n   * @platform android\n   */\n  scrollPerfTag?: ?string,\n  /**\n   * Used to override default value of overScroll mode.\n   *\n   * Possible values:\n   *\n   *  - `'auto'` - Default value, allow a user to over-scroll\n   *    this view only if the content is large enough to meaningfully scroll.\n   *  - `'always'` - Always allow a user to over-scroll this view.\n   *  - `'never'` - Never allow a user to over-scroll this view.\n   *\n   * @platform android\n   */\n  overScrollMode?: ?('auto' | 'always' | 'never'),\n  /**\n   * Causes the scrollbars not to turn transparent when they are not in use.\n   * The default value is false.\n   *\n   * @platform android\n   */\n  persistentScrollbar?: ?boolean,\n  /**\n   * Fades out the edges of the scroll content.\n   *\n   * If the value is greater than 0, the fading edges will be set accordingly\n   * to the current scroll direction and position,\n   * indicating if there is more content to show.\n   *\n   * The default value is 0.\n   *\n   * @platform android\n   */\n  fadingEdgeLength?: ?number,\n|}>;\n\ntype StickyHeaderComponentType = React.AbstractComponent<\n  ScrollViewStickyHeaderProps,\n  $ReadOnly<interface {setNextHeaderY: number => void}>,\n>;\n\nexport type Props = $ReadOnly<{|\n  ...ViewProps,\n  ...IOSProps,\n  ...AndroidProps,\n\n  /**\n   * These styles will be applied to the scroll view content container which\n   * wraps all of the child views. Example:\n   *\n   * ```\n   * return (\n   *   <ScrollView contentContainerStyle={styles.contentContainer}>\n   *   </ScrollView>\n   * );\n   * ...\n   * const styles = StyleSheet.create({\n   *   contentContainer: {\n   *     paddingVertical: 20\n   *   }\n   * });\n   * ```\n   */\n  contentContainerStyle?: ?ViewStyleProp,\n  /**\n   * Used to manually set the starting scroll offset.\n   * The default value is `{x: 0, y: 0}`.\n   */\n  contentOffset?: ?PointProp,\n  /**\n   * When true, the scroll view stops on the next index (in relation to scroll\n   * position at release) regardless of how fast the gesture is. This can be\n   * used for pagination when the page is less than the width of the\n   * horizontal ScrollView or the height of the vertical ScrollView. The default value is false.\n   */\n  disableIntervalMomentum?: ?boolean,\n  /**\n   * A floating-point number that determines how quickly the scroll view\n   * decelerates after the user lifts their finger. You may also use string\n   * shortcuts `\"normal\"` and `\"fast\"` which match the underlying iOS settings\n   * for `UIScrollViewDecelerationRateNormal` and\n   * `UIScrollViewDecelerationRateFast` respectively.\n   *\n   *   - `'normal'`: 0.998 on iOS, 0.985 on Android (the default)\n   *   - `'fast'`: 0.99 on iOS, 0.9 on Android\n   */\n  decelerationRate?: ?DecelerationRateType,\n\n  /**\n   * *Experimental, iOS Only*. The API is experimental and will change in future releases.\n   *\n   * Controls how much distance is travelled after user stops scrolling.\n   * Value greater than 1 will increase the distance travelled.\n   * Value less than 1 will decrease the distance travelled.\n   *\n   * @deprecated\n   *\n   * The default value is 1.\n   */\n  experimental_endDraggingSensitivityMultiplier?: ?number,\n\n  /**\n   * When true, the scroll view's children are arranged horizontally in a row\n   * instead of vertically in a column. The default value is false.\n   */\n  horizontal?: ?boolean,\n  /**\n   * If sticky headers should stick at the bottom instead of the top of the\n   * ScrollView. This is usually used with inverted ScrollViews.\n   */\n  invertStickyHeaders?: ?boolean,\n  /**\n   * Determines whether the keyboard gets dismissed in response to a drag.\n   *\n   * *Cross platform*\n   *\n   *   - `'none'` (the default), drags do not dismiss the keyboard.\n   *   - `'on-drag'`, the keyboard is dismissed when a drag begins.\n   *\n   * *iOS Only*\n   *\n   *   - `'interactive'`, the keyboard is dismissed interactively with the drag and moves in\n   *     synchrony with the touch; dragging upwards cancels the dismissal.\n   *     On android this is not supported and it will have the same behavior as 'none'.\n   */\n  keyboardDismissMode?: ?// default\n  // cross-platform\n  ('none' | 'on-drag' | 'interactive'), // ios only\n  /**\n   * Determines when the keyboard should stay visible after a tap.\n   *\n   *   - `'never'` (the default), tapping outside of the focused text input when the keyboard\n   *     is up dismisses the keyboard. When this happens, children won't receive the tap.\n   *   - `'always'`, the keyboard will not dismiss automatically, and the scroll view will not\n   *     catch taps, but children of the scroll view can catch taps.\n   *   - `'handled'`, the keyboard will not dismiss automatically when the tap was handled by\n   *     a children, (or captured by an ancestor).\n   *   - `false`, deprecated, use 'never' instead\n   *   - `true`, deprecated, use 'always' instead\n   */\n  keyboardShouldPersistTaps?: ?('always' | 'never' | 'handled' | true | false),\n  /**\n   * When set, the scroll view will adjust the scroll position so that the first child that is\n   * partially or fully visible and at or beyond `minIndexForVisible` will not change position.\n   * This is useful for lists that are loading content in both directions, e.g. a chat thread,\n   * where new messages coming in might otherwise cause the scroll position to jump. A value of 0\n   * is common, but other values such as 1 can be used to skip loading spinners or other content\n   * that should not maintain position.\n   *\n   * The optional `autoscrollToTopThreshold` can be used to make the content automatically scroll\n   * to the top after making the adjustment if the user was within the threshold of the top before\n   * the adjustment was made. This is also useful for chat-like applications where you want to see\n   * new messages scroll into place, but not if the user has scrolled up a ways and it would be\n   * disruptive to scroll a bunch.\n   *\n   * Caveat 1: Reordering elements in the scrollview with this enabled will probably cause\n   * jumpiness and jank. It can be fixed, but there are currently no plans to do so. For now,\n   * don't re-order the content of any ScrollViews or Lists that use this feature.\n   *\n   * Caveat 2: This simply uses `contentOffset` and `frame.origin` in native code to compute\n   * visibility. Occlusion, transforms, and other complexity won't be taken into account as to\n   * whether content is \"visible\" or not.\n   *\n   */\n  maintainVisibleContentPosition?: ?$ReadOnly<{|\n    minIndexForVisible: number,\n    autoscrollToTopThreshold?: ?number,\n  |}>,\n  /**\n   * Called when the momentum scroll starts (scroll which occurs as the ScrollView glides to a stop).\n   */\n  onMomentumScrollBegin?: ?(event: ScrollEvent) => void,\n  /**\n   * Called when the momentum scroll ends (scroll which occurs as the ScrollView glides to a stop).\n   */\n  onMomentumScrollEnd?: ?(event: ScrollEvent) => void,\n\n  /**\n   * Fires at most once per frame during scrolling.\n   */\n  onScroll?: ?(event: ScrollEvent) => void,\n  /**\n   * Called when the user begins to drag the scroll view.\n   */\n  onScrollBeginDrag?: ?(event: ScrollEvent) => void,\n  /**\n   * Called when the user stops dragging the scroll view and it either stops\n   * or begins to glide.\n   */\n  onScrollEndDrag?: ?(event: ScrollEvent) => void,\n  /**\n   * Called when scrollable content view of the ScrollView changes.\n   *\n   * Handler function is passed the content width and content height as parameters:\n   * `(contentWidth, contentHeight)`\n   *\n   * It's implemented using onLayout handler attached to the content container\n   * which this ScrollView renders.\n   */\n  onContentSizeChange?: (contentWidth: number, contentHeight: number) => void,\n  onKeyboardDidShow?: (event: KeyboardEvent) => void,\n  onKeyboardDidHide?: (event: KeyboardEvent) => void,\n  onKeyboardWillShow?: (event: KeyboardEvent) => void,\n  onKeyboardWillHide?: (event: KeyboardEvent) => void,\n  /**\n   * When true, the scroll view stops on multiples of the scroll view's size\n   * when scrolling. This can be used for horizontal pagination. The default\n   * value is false.\n   */\n  pagingEnabled?: ?boolean,\n  /**\n   * When false, the view cannot be scrolled via touch interaction.\n   * The default value is true.\n   *\n   * Note that the view can always be scrolled by calling `scrollTo`.\n   */\n  scrollEnabled?: ?boolean,\n  /**\n   * Limits how often scroll events will be fired while scrolling, specified as\n   * a time interval in ms. This may be useful when expensive work is performed\n   * in response to scrolling. Values <= `16` will disable throttling,\n   * regardless of the refresh rate of the device.\n   */\n  scrollEventThrottle?: ?number,\n  /**\n   * When true, shows a vertical scroll indicator.\n   * The default value is true.\n   */\n  showsVerticalScrollIndicator?: ?boolean,\n  /**\n   * When true, Sticky header is hidden when scrolling down, and dock at the top\n   * when scrolling up\n   */\n  stickyHeaderHiddenOnScroll?: ?boolean,\n  /**\n   * An array of child indices determining which children get docked to the\n   * top of the screen when scrolling. For example, passing\n   * `stickyHeaderIndices={[0]}` will cause the first child to be fixed to the\n   * top of the scroll view. This property is not supported in conjunction\n   * with `horizontal={true}`.\n   */\n  stickyHeaderIndices?: ?$ReadOnlyArray<number>,\n  /**\n   * A React Component that will be used to render sticky headers.\n   * To be used together with `stickyHeaderIndices` or with `SectionList`, defaults to `ScrollViewStickyHeader`.\n   * You may need to set this if your sticky header uses custom transforms (eg. translation),\n   * for example when you want your list to have an animated hidable header.\n   */\n  StickyHeaderComponent?: StickyHeaderComponentType,\n  /**\n   * When `snapToInterval` is set, `snapToAlignment` will define the relationship\n   * of the snapping to the scroll view.\n   *\n   *   - `'start'` (the default) will align the snap at the left (horizontal) or top (vertical)\n   *   - `'center'` will align the snap in the center\n   *   - `'end'` will align the snap at the right (horizontal) or bottom (vertical)\n   */\n  snapToAlignment?: ?('start' | 'center' | 'end'),\n  /**\n   * When set, causes the scroll view to stop at multiples of the value of\n   * `snapToInterval`. This can be used for paginating through children\n   * that have lengths smaller than the scroll view. Typically used in\n   * combination with `snapToAlignment` and `decelerationRate=\"fast\"`.\n   *\n   * Overrides less configurable `pagingEnabled` prop.\n   */\n  snapToInterval?: ?number,\n  /**\n   * When set, causes the scroll view to stop at the defined offsets.\n   * This can be used for paginating through variously sized children\n   * that have lengths smaller than the scroll view. Typically used in\n   * combination with `decelerationRate=\"fast\"`.\n   *\n   * Overrides less configurable `pagingEnabled` and `snapToInterval` props.\n   */\n  snapToOffsets?: ?$ReadOnlyArray<number>,\n  /**\n   * Use in conjunction with `snapToOffsets`. By default, the beginning\n   * of the list counts as a snap offset. Set `snapToStart` to false to disable\n   * this behavior and allow the list to scroll freely between its start and\n   * the first `snapToOffsets` offset.\n   * The default value is true.\n   */\n  snapToStart?: ?boolean,\n  /**\n   * Use in conjunction with `snapToOffsets`. By default, the end\n   * of the list counts as a snap offset. Set `snapToEnd` to false to disable\n   * this behavior and allow the list to scroll freely between its end and\n   * the last `snapToOffsets` offset.\n   * The default value is true.\n   */\n  snapToEnd?: ?boolean,\n  /**\n   * Experimental: When true, offscreen child views (whose `overflow` value is\n   * `hidden`) are removed from their native backing superview when offscreen.\n   * This can improve scrolling performance on long lists. The default value is\n   * true.\n   */\n  removeClippedSubviews?: ?boolean,\n  /**\n   * A RefreshControl component, used to provide pull-to-refresh\n   * functionality for the ScrollView. Only works for vertical ScrollViews\n   * (`horizontal` prop must be `false`).\n   *\n   * See [RefreshControl](docs/refreshcontrol.html).\n   */\n  /* $FlowFixMe[unclear-type] - how to handle generic type without existential\n   * operator? */\n  refreshControl?: ?ExactReactElement_DEPRECATED<any>,\n  children?: React.Node,\n  /**\n   * A ref to the inner View element of the ScrollView. This should be used\n   * instead of calling `getInnerViewRef`.\n   */\n  innerViewRef?: React.RefSetter<InnerViewInstance>,\n  /**\n   * A ref to the Native ScrollView component. This ref can be used to call\n   * all of ScrollView's public methods, in addition to native methods like\n   * measure, measureLayout, etc.\n   */\n  scrollViewRef?: React.RefSetter<PublicScrollViewInstance>,\n|}>;\n\ntype State = {|\n  layoutHeight: ?number,\n|};\n\nconst IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;\n\nexport type ScrollViewComponentStatics = $ReadOnly<{|\n  Context: typeof ScrollViewContext,\n|}>;\n\n/**\n * Component that wraps platform ScrollView while providing\n * integration with touch locking \"responder\" system.\n *\n * Keep in mind that ScrollViews must have a bounded height in order to work,\n * since they contain unbounded-height children into a bounded container (via\n * a scroll interaction). In order to bound the height of a ScrollView, either\n * set the height of the view directly (discouraged) or make sure all parent\n * views have bounded height. Forgetting to transfer `{flex: 1}` down the\n * view stack can lead to errors here, which the element inspector makes\n * easy to debug.\n *\n * Doesn't yet support other contained responders from blocking this scroll\n * view from becoming the responder.\n *\n *\n * `<ScrollView>` vs [`<FlatList>`](https://reactnative.dev/docs/flatlist) - which one to use?\n *\n * `ScrollView` simply renders all its react child components at once. That\n * makes it very easy to understand and use.\n *\n * On the other hand, this has a performance downside. Imagine you have a very\n * long list of items you want to display, maybe several screens worth of\n * content. Creating JS components and native views for everything all at once,\n * much of which may not even be shown, will contribute to slow rendering and\n * increased memory usage.\n *\n * This is where `FlatList` comes into play. `FlatList` renders items lazily,\n * just when they are about to appear, and removes items that scroll way off\n * screen to save memory and processing time.\n *\n * `FlatList` is also handy if you want to render separators between your items,\n * multiple columns, infinite scroll loading, or any number of other features it\n * supports out of the box.\n */\nclass ScrollView extends React.Component<Props, State> {\n  static Context: typeof ScrollViewContext = ScrollViewContext;\n\n  constructor(props: Props) {\n    super(props);\n\n    this._scrollAnimatedValue = new AnimatedImplementation.Value(\n      this.props.contentOffset?.y ?? 0,\n    );\n    this._scrollAnimatedValue.setOffset(this.props.contentInset?.top ?? 0);\n  }\n\n  _scrollAnimatedValue: AnimatedImplementation.Value;\n  _scrollAnimatedValueAttachment: ?{detach: () => void, ...} = null;\n  _stickyHeaderRefs: Map<string, React.ElementRef<StickyHeaderComponentType>> =\n    new Map();\n  _headerLayoutYs: Map<string, number> = new Map();\n\n  _keyboardMetrics: ?KeyboardMetrics = null;\n  _additionalScrollOffset: number = 0;\n  _isTouching: boolean = false;\n  _lastMomentumScrollBeginTime: number = 0;\n  _lastMomentumScrollEndTime: number = 0;\n\n  // Reset to false every time becomes responder. This is used to:\n  // - Determine if the scroll view has been scrolled and therefore should\n  // refuse to give up its responder lock.\n  // - Determine if releasing should dismiss the keyboard when we are in\n  // tap-to-dismiss mode (this.props.keyboardShouldPersistTaps !== 'always').\n  _observedScrollSinceBecomingResponder: boolean = false;\n  _becameResponderWhileAnimating: boolean = false;\n  _preventNegativeScrollOffset: ?boolean = null;\n\n  _animated: ?boolean = null;\n\n  _subscriptionKeyboardWillShow: ?EventSubscription = null;\n  _subscriptionKeyboardWillHide: ?EventSubscription = null;\n  _subscriptionKeyboardDidShow: ?EventSubscription = null;\n  _subscriptionKeyboardDidHide: ?EventSubscription = null;\n\n  #onScrollEmitter: ?EventEmitter<{\n    scroll: [{x: number, y: number}],\n  }> = null;\n\n  state: State = {\n    layoutHeight: null,\n  };\n\n  componentDidMount() {\n    if (typeof this.props.keyboardShouldPersistTaps === 'boolean') {\n      console.warn(\n        `'keyboardShouldPersistTaps={${\n          this.props.keyboardShouldPersistTaps === true ? 'true' : 'false'\n        }}' is deprecated. ` +\n          `Use 'keyboardShouldPersistTaps=\"${\n            this.props.keyboardShouldPersistTaps ? 'always' : 'never'\n          }\"' instead`,\n      );\n    }\n\n    this._keyboardMetrics = Keyboard.metrics();\n    this._additionalScrollOffset = 0;\n\n    this._subscriptionKeyboardWillShow = Keyboard.addListener(\n      'keyboardWillShow',\n      this.scrollResponderKeyboardWillShow,\n    );\n    this._subscriptionKeyboardWillHide = Keyboard.addListener(\n      'keyboardWillHide',\n      this.scrollResponderKeyboardWillHide,\n    );\n    this._subscriptionKeyboardDidShow = Keyboard.addListener(\n      'keyboardDidShow',\n      this.scrollResponderKeyboardDidShow,\n    );\n    this._subscriptionKeyboardDidHide = Keyboard.addListener(\n      'keyboardDidHide',\n      this.scrollResponderKeyboardDidHide,\n    );\n\n    this._updateAnimatedNodeAttachment();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const prevContentInsetTop = prevProps.contentInset\n      ? prevProps.contentInset.top\n      : 0;\n    const newContentInsetTop = this.props.contentInset\n      ? this.props.contentInset.top\n      : 0;\n    if (prevContentInsetTop !== newContentInsetTop) {\n      this._scrollAnimatedValue.setOffset(newContentInsetTop || 0);\n    }\n\n    this._updateAnimatedNodeAttachment();\n  }\n\n  componentWillUnmount() {\n    if (this._subscriptionKeyboardWillShow != null) {\n      this._subscriptionKeyboardWillShow.remove();\n    }\n    if (this._subscriptionKeyboardWillHide != null) {\n      this._subscriptionKeyboardWillHide.remove();\n    }\n    if (this._subscriptionKeyboardDidShow != null) {\n      this._subscriptionKeyboardDidShow.remove();\n    }\n    if (this._subscriptionKeyboardDidHide != null) {\n      this._subscriptionKeyboardDidHide.remove();\n    }\n\n    if (this._scrollAnimatedValueAttachment) {\n      this._scrollAnimatedValueAttachment.detach();\n    }\n\n    this.#onScrollEmitter?.removeAllListeners();\n  }\n\n  /**\n   * Returns a reference to the underlying scroll responder, which supports\n   * operations like `scrollTo`. All ScrollView-like components should\n   * implement this method so that they can be composed while providing access\n   * to the underlying scroll responder's methods.\n   */\n  getScrollResponder: () => ScrollResponderType = () => {\n    // $FlowFixMe[unclear-type]\n    return ((this: any): ScrollResponderType);\n  };\n\n  getScrollableNode: () => ?number = () => {\n    return findNodeHandle(this.getNativeScrollRef());\n  };\n\n  getInnerViewNode: () => ?number = () => {\n    return findNodeHandle(this._innerView.nativeInstance);\n  };\n\n  getInnerViewRef: () => InnerViewInstance | null = () => {\n    return this._innerView.nativeInstance;\n  };\n\n  getNativeScrollRef: () => TScrollViewNativeComponentInstance | null = () => {\n    const {nativeInstance} = this._scrollView;\n    return nativeInstance == null ? null : nativeInstance.componentRef.current;\n  };\n\n  /**\n   * Scrolls to a given x, y offset, either immediately or with a smooth animation.\n   *\n   * Example:\n   *\n   * `scrollTo({x: 0, y: 0, animated: true})`\n   *\n   * Note: The weird function signature is due to the fact that, for historical reasons,\n   * the function also accepts separate arguments as an alternative to the options object.\n   * This is deprecated due to ambiguity (y before x), and SHOULD NOT BE USED.\n   */\n  scrollTo: (\n    options?:\n      | {\n          x?: number,\n          y?: number,\n          animated?: boolean,\n          ...\n        }\n      | number,\n    deprecatedX?: number,\n    deprecatedAnimated?: boolean,\n  ) => void = (\n    options?:\n      | {\n          x?: number,\n          y?: number,\n          animated?: boolean,\n          ...\n        }\n      | number,\n    deprecatedX?: number,\n    deprecatedAnimated?: boolean,\n  ) => {\n    let x, y, animated;\n    if (typeof options === 'number') {\n      console.warn(\n        '`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' +\n          'animated: true})` instead.',\n      );\n      y = options;\n      x = deprecatedX;\n      animated = deprecatedAnimated;\n    } else if (options) {\n      y = options.y;\n      x = options.x;\n      animated = options.animated;\n    }\n    const component = this.getNativeScrollRef();\n    if (component == null) {\n      return;\n    }\n    Commands.scrollTo(component, x || 0, y || 0, animated !== false);\n  };\n\n  /**\n   * If this is a vertical ScrollView scrolls to the bottom.\n   * If this is a horizontal ScrollView scrolls to the right.\n   *\n   * Use `scrollToEnd({animated: true})` for smooth animated scrolling,\n   * `scrollToEnd({animated: false})` for immediate scrolling.\n   * If no options are passed, `animated` defaults to true.\n   */\n  scrollToEnd: (options?: ?{animated?: boolean, ...}) => void = (\n    options?: ?{animated?: boolean, ...},\n  ) => {\n    // Default to true\n    const animated = (options && options.animated) !== false;\n    const component = this.getNativeScrollRef();\n    if (component == null) {\n      return;\n    }\n    Commands.scrollToEnd(component, animated);\n  };\n\n  /**\n   * Displays the scroll indicators momentarily.\n   *\n   * @platform ios\n   */\n  flashScrollIndicators: () => void = () => {\n    const component = this.getNativeScrollRef();\n    if (component == null) {\n      return;\n    }\n    Commands.flashScrollIndicators(component);\n  };\n\n  _subscribeToOnScroll: (\n    callback: ({x: number, y: number}) => void,\n  ) => EventSubscription = callback => {\n    let onScrollEmitter = this.#onScrollEmitter;\n    if (onScrollEmitter == null) {\n      onScrollEmitter = new EventEmitter();\n      this.#onScrollEmitter = onScrollEmitter;\n      // This is the first subscription, so make sure the native component is\n      // also configured to output synchronous scroll events.\n      this._scrollView.nativeInstance?.unstable_setEnableSyncOnScroll(true);\n    }\n    return onScrollEmitter.addListener('scroll', callback);\n  };\n\n  /**\n   * This method should be used as the callback to onFocus in a TextInputs'\n   * parent view. Note that any module using this mixin needs to return\n   * the parent view's ref in getScrollViewRef() in order to use this method.\n   * @param {number} nodeHandle The TextInput node handle\n   * @param {number} additionalOffset The scroll view's bottom \"contentInset\".\n   *        Default is 0.\n   * @param {bool} preventNegativeScrolling Whether to allow pulling the content\n   *        down to make it meet the keyboard's top. Default is false.\n   */\n  scrollResponderScrollNativeHandleToKeyboard: <T>(\n    nodeHandle: number | React.ElementRef<HostComponent<T>>,\n    additionalOffset?: number,\n    preventNegativeScrollOffset?: boolean,\n  ) => void = <T>(\n    nodeHandle: number | React.ElementRef<HostComponent<T>>,\n    additionalOffset?: number,\n    preventNegativeScrollOffset?: boolean,\n  ) => {\n    this._additionalScrollOffset = additionalOffset || 0;\n    this._preventNegativeScrollOffset = !!preventNegativeScrollOffset;\n\n    if (this._innerView.nativeInstance == null) {\n      return;\n    }\n\n    if (typeof nodeHandle === 'number') {\n      UIManager.measureLayout(\n        nodeHandle,\n        nullthrows(findNodeHandle(this)),\n        // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n        this._textInputFocusError,\n        this._inputMeasureAndScrollToKeyboard,\n      );\n    } else {\n      nodeHandle.measureLayout(\n        this._innerView.nativeInstance,\n        this._inputMeasureAndScrollToKeyboard,\n        // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n        this._textInputFocusError,\n      );\n    }\n  };\n\n  /**\n   * A helper function to zoom to a specific rect in the scrollview. The argument has the shape\n   * {x: number; y: number; width: number; height: number; animated: boolean = true}\n   *\n   * @platform ios\n   */\n  scrollResponderZoomTo: (\n    rect: {|\n      x: number,\n      y: number,\n      width: number,\n      height: number,\n      animated?: boolean,\n    |},\n    animated?: boolean, // deprecated, put this inside the rect argument instead\n  ) => void = (\n    rect: {|\n      x: number,\n      y: number,\n      width: number,\n      height: number,\n      animated?: boolean,\n    |},\n    animated?: boolean, // deprecated, put this inside the rect argument instead\n  ) => {\n    invariant(Platform.OS === 'ios', 'zoomToRect is not implemented');\n    if ('animated' in rect) {\n      this._animated = rect.animated;\n      delete rect.animated;\n    } else if (typeof animated !== 'undefined') {\n      console.warn(\n        '`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead',\n      );\n    }\n\n    const component = this.getNativeScrollRef();\n    if (component == null) {\n      return;\n    }\n    Commands.zoomToRect(component, rect, animated !== false);\n  };\n\n  _textInputFocusError() {\n    console.warn('Error measuring text field.');\n  }\n\n  /**\n   * The calculations performed here assume the scroll view takes up the entire\n   * screen - even if has some content inset. We then measure the offsets of the\n   * keyboard, and compensate both for the scroll view's \"contentInset\".\n   *\n   * @param {number} left Position of input w.r.t. table view.\n   * @param {number} top Position of input w.r.t. table view.\n   * @param {number} width Width of the text input.\n   * @param {number} height Height of the text input.\n   */\n  _inputMeasureAndScrollToKeyboard: (\n    left: number,\n    top: number,\n    width: number,\n    height: number,\n  ) => void = (left: number, top: number, width: number, height: number) => {\n    let keyboardScreenY = Dimensions.get('window').height;\n\n    const scrollTextInputIntoVisibleRect = () => {\n      if (this._keyboardMetrics != null) {\n        keyboardScreenY = this._keyboardMetrics.screenY;\n      }\n      let scrollOffsetY =\n        top - keyboardScreenY + height + this._additionalScrollOffset;\n\n      // By default, this can scroll with negative offset, pulling the content\n      // down so that the target component's bottom meets the keyboard's top.\n      // If requested otherwise, cap the offset at 0 minimum to avoid content\n      // shifting down.\n      if (this._preventNegativeScrollOffset === true) {\n        scrollOffsetY = Math.max(0, scrollOffsetY);\n      }\n      this.scrollTo({x: 0, y: scrollOffsetY, animated: true});\n\n      this._additionalScrollOffset = 0;\n      this._preventNegativeScrollOffset = false;\n    };\n\n    if (this._keyboardMetrics == null) {\n      // `_keyboardMetrics` is set inside `scrollResponderKeyboardWillShow` which\n      // is not guaranteed to be called before `_inputMeasureAndScrollToKeyboard` but native has already scheduled it.\n      // In case it was not called before `_inputMeasureAndScrollToKeyboard`, we postpone scrolling to\n      // text input.\n      setTimeout(() => {\n        scrollTextInputIntoVisibleRect();\n      }, 0);\n    } else {\n      scrollTextInputIntoVisibleRect();\n    }\n  };\n\n  _getKeyForIndex(index: $FlowFixMe, childArray: $FlowFixMe): $FlowFixMe {\n    const child = childArray[index];\n    return child && child.key;\n  }\n\n  _updateAnimatedNodeAttachment() {\n    if (this._scrollAnimatedValueAttachment) {\n      this._scrollAnimatedValueAttachment.detach();\n    }\n    if (\n      this.props.stickyHeaderIndices &&\n      this.props.stickyHeaderIndices.length > 0\n    ) {\n      this._scrollAnimatedValueAttachment =\n        AnimatedImplementation.attachNativeEvent(\n          this.getNativeScrollRef(),\n          'onScroll',\n          [{nativeEvent: {contentOffset: {y: this._scrollAnimatedValue}}}],\n        );\n    }\n  }\n\n  _setStickyHeaderRef(\n    key: string,\n    ref: ?React.ElementRef<StickyHeaderComponentType>,\n  ) {\n    if (ref) {\n      this._stickyHeaderRefs.set(key, ref);\n    } else {\n      this._stickyHeaderRefs.delete(key);\n    }\n  }\n\n  _onStickyHeaderLayout(index: $FlowFixMe, event: $FlowFixMe, key: $FlowFixMe) {\n    const {stickyHeaderIndices} = this.props;\n    if (!stickyHeaderIndices) {\n      return;\n    }\n    const childArray = React.Children.toArray<$FlowFixMe>(this.props.children);\n    if (key !== this._getKeyForIndex(index, childArray)) {\n      // ignore stale layout update\n      return;\n    }\n\n    const layoutY = event.nativeEvent.layout.y;\n    this._headerLayoutYs.set(key, layoutY);\n\n    const indexOfIndex = stickyHeaderIndices.indexOf(index);\n    const previousHeaderIndex = stickyHeaderIndices[indexOfIndex - 1];\n    if (previousHeaderIndex != null) {\n      const previousHeader = this._stickyHeaderRefs.get(\n        this._getKeyForIndex(previousHeaderIndex, childArray),\n      );\n      previousHeader &&\n        previousHeader.setNextHeaderY &&\n        previousHeader.setNextHeaderY(layoutY);\n    }\n  }\n\n  _handleScroll = (e: ScrollEvent) => {\n    this._observedScrollSinceBecomingResponder = true;\n    this.props.onScroll && this.props.onScroll(e);\n\n    this.#onScrollEmitter?.emit('scroll', {\n      x: e.nativeEvent.contentOffset.x,\n      y: e.nativeEvent.contentOffset.y,\n    });\n  };\n\n  _handleLayout = (e: LayoutEvent) => {\n    if (this.props.invertStickyHeaders === true) {\n      this.setState({layoutHeight: e.nativeEvent.layout.height});\n    }\n    if (this.props.onLayout) {\n      this.props.onLayout(e);\n    }\n  };\n\n  _handleContentOnLayout = (e: LayoutEvent) => {\n    const {width, height} = e.nativeEvent.layout;\n    this.props.onContentSizeChange &&\n      this.props.onContentSizeChange(width, height);\n  };\n\n  _innerView: RefForwarder<InnerViewInstance, InnerViewInstance> =\n    createRefForwarder(\n      (instance: InnerViewInstance): InnerViewInstance => instance,\n    );\n\n  _scrollView: RefForwarder<\n    TScrollViewNativeImperativeHandle,\n    PublicScrollViewInstance | null,\n  > = createRefForwarder(nativeImperativeHandle => {\n    const nativeInstance = nativeImperativeHandle.componentRef.current;\n    if (nativeInstance == null) {\n      return null;\n    }\n\n    // This is a hack. Ideally we would forwardRef  to the underlying\n    // host component. However, since ScrollView has it's own methods that can be\n    // called as well, if we used the standard forwardRef then these\n    // methods wouldn't be accessible and thus be a breaking change.\n    //\n    // Therefore we edit ref to include ScrollView's public methods so that\n    // they are callable from the ref.\n\n    // $FlowFixMe[prop-missing] - Known issue with appending custom methods.\n    const publicInstance: PublicScrollViewInstance = Object.assign(\n      nativeInstance,\n      {\n        getScrollResponder: this.getScrollResponder,\n        getScrollableNode: this.getScrollableNode,\n        getInnerViewNode: this.getInnerViewNode,\n        getInnerViewRef: this.getInnerViewRef,\n        getNativeScrollRef: this.getNativeScrollRef,\n        scrollTo: this.scrollTo,\n        scrollToEnd: this.scrollToEnd,\n        flashScrollIndicators: this.flashScrollIndicators,\n        scrollResponderZoomTo: this.scrollResponderZoomTo,\n        // TODO: Replace unstable_subscribeToOnScroll once scrollView.addEventListener('scroll', (e: ScrollEvent) => {}, {passive: false});\n        unstable_subscribeToOnScroll: this._subscribeToOnScroll,\n        scrollResponderScrollNativeHandleToKeyboard:\n          this.scrollResponderScrollNativeHandleToKeyboard,\n      },\n    );\n\n    return publicInstance;\n  });\n\n  /**\n   * Warning, this may be called several times for a single keyboard opening.\n   * It's best to store the information in this method and then take any action\n   * at a later point (either in `keyboardDidShow` or other).\n   *\n   * Here's the order that events occur in:\n   * - focus\n   * - willShow {startCoordinates, endCoordinates} several times\n   * - didShow several times\n   * - blur\n   * - willHide {startCoordinates, endCoordinates} several times\n   * - didHide several times\n   *\n   * The `ScrollResponder` module callbacks for each of these events.\n   * Even though any user could have easily listened to keyboard events\n   * themselves, using these `props` callbacks ensures that ordering of events\n   * is consistent - and not dependent on the order that the keyboard events are\n   * subscribed to. This matters when telling the scroll view to scroll to where\n   * the keyboard is headed - the scroll responder better have been notified of\n   * the keyboard destination before being instructed to scroll to where the\n   * keyboard will be. Stick to the `ScrollResponder` callbacks, and everything\n   * will work.\n   *\n   * WARNING: These callbacks will fire even if a keyboard is displayed in a\n   * different navigation pane. Filter out the events to determine if they are\n   * relevant to you. (For example, only if you receive these callbacks after\n   * you had explicitly focused a node etc).\n   */\n\n  scrollResponderKeyboardWillShow: (e: KeyboardEvent) => void = (\n    e: KeyboardEvent,\n  ) => {\n    this._keyboardMetrics = e.endCoordinates;\n    this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);\n  };\n\n  scrollResponderKeyboardWillHide: (e: KeyboardEvent) => void = (\n    e: KeyboardEvent,\n  ) => {\n    this._keyboardMetrics = null;\n    this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);\n  };\n\n  scrollResponderKeyboardDidShow: (e: KeyboardEvent) => void = (\n    e: KeyboardEvent,\n  ) => {\n    this._keyboardMetrics = e.endCoordinates;\n    this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);\n  };\n\n  scrollResponderKeyboardDidHide: (e: KeyboardEvent) => void = (\n    e: KeyboardEvent,\n  ) => {\n    this._keyboardMetrics = null;\n    this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);\n  };\n\n  /**\n   * Invoke this from an `onMomentumScrollBegin` event.\n   */\n  _handleMomentumScrollBegin: (e: ScrollEvent) => void = (e: ScrollEvent) => {\n    this._lastMomentumScrollBeginTime = global.performance.now();\n    this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);\n  };\n\n  /**\n   * Invoke this from an `onMomentumScrollEnd` event.\n   */\n  _handleMomentumScrollEnd: (e: ScrollEvent) => void = (e: ScrollEvent) => {\n    FrameRateLogger.endScroll();\n    this._lastMomentumScrollEndTime = global.performance.now();\n    this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);\n  };\n\n  /**\n   * Unfortunately, `onScrollBeginDrag` also fires when *stopping* the scroll\n   * animation, and there's not an easy way to distinguish a drag vs. stopping\n   * momentum.\n   *\n   * Invoke this from an `onScrollBeginDrag` event.\n   */\n  _handleScrollBeginDrag: (e: ScrollEvent) => void = (e: ScrollEvent) => {\n    FrameRateLogger.beginScroll(); // TODO: track all scrolls after implementing onScrollEndAnimation\n\n    if (\n      Platform.OS === 'android' &&\n      this.props.keyboardDismissMode === 'on-drag'\n    ) {\n      dismissKeyboard();\n    }\n\n    this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);\n  };\n\n  /**\n   * Invoke this from an `onScrollEndDrag` event.\n   */\n  _handleScrollEndDrag: (e: ScrollEvent) => void = (e: ScrollEvent) => {\n    const {velocity} = e.nativeEvent;\n    // - If we are animating, then this is a \"drag\" that is stopping the scrollview and momentum end\n    //   will fire.\n    // - If velocity is non-zero, then the interaction will stop when momentum scroll ends or\n    //   another drag starts and ends.\n    // - If we don't get velocity, better to stop the interaction twice than not stop it.\n    if (\n      !this._isAnimating() &&\n      (!velocity || (velocity.x === 0 && velocity.y === 0))\n    ) {\n      FrameRateLogger.endScroll();\n    }\n    this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);\n  };\n\n  /**\n   * A helper function for this class that lets us quickly determine if the\n   * view is currently animating. This is particularly useful to know when\n   * a touch has just started or ended.\n   */\n  _isAnimating: () => boolean = () => {\n    const now = global.performance.now();\n    const timeSinceLastMomentumScrollEnd =\n      now - this._lastMomentumScrollEndTime;\n    const isAnimating =\n      timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS ||\n      this._lastMomentumScrollEndTime < this._lastMomentumScrollBeginTime;\n    return isAnimating;\n  };\n\n  /**\n   * Invoke this from an `onResponderGrant` event.\n   */\n  _handleResponderGrant: (e: PressEvent) => void = (e: PressEvent) => {\n    this._observedScrollSinceBecomingResponder = false;\n    this.props.onResponderGrant && this.props.onResponderGrant(e);\n    this._becameResponderWhileAnimating = this._isAnimating();\n  };\n\n  /**\n   * Invoke this from an `onResponderReject` event.\n   *\n   * Some other element is not yielding its role as responder. Normally, we'd\n   * just disable the `UIScrollView`, but a touch has already began on it, the\n   * `UIScrollView` will not accept being disabled after that. The easiest\n   * solution for now is to accept the limitation of disallowing this\n   * altogether. To improve this, find a way to disable the `UIScrollView` after\n   * a touch has already started.\n   */\n  _handleResponderReject: () => void = () => {};\n\n  /**\n   * Invoke this from an `onResponderRelease` event.\n   */\n  _handleResponderRelease: (e: PressEvent) => void = (e: PressEvent) => {\n    this._isTouching = e.nativeEvent.touches.length !== 0;\n    this.props.onResponderRelease && this.props.onResponderRelease(e);\n\n    if (typeof e.target === 'number') {\n      if (__DEV__) {\n        console.error(\n          'Did not expect event target to be a number. Should have been a native component',\n        );\n      }\n\n      return;\n    }\n\n    // By default scroll views will unfocus a textField\n    // if another touch occurs outside of it\n    const currentlyFocusedTextInput = TextInputState.currentlyFocusedInput();\n    if (\n      currentlyFocusedTextInput != null &&\n      this.props.keyboardShouldPersistTaps !== true &&\n      this.props.keyboardShouldPersistTaps !== 'always' &&\n      this._keyboardIsDismissible() &&\n      e.target !== currentlyFocusedTextInput &&\n      !this._observedScrollSinceBecomingResponder &&\n      !this._becameResponderWhileAnimating\n    ) {\n      TextInputState.blurTextInput(currentlyFocusedTextInput);\n    }\n  };\n\n  /**\n   * We will allow the scroll view to give up its lock iff it acquired the lock\n   * during an animation. This is a very useful default that happens to satisfy\n   * many common user experiences.\n   *\n   * - Stop a scroll on the left edge, then turn that into an outer view's\n   *   backswipe.\n   * - Stop a scroll mid-bounce at the top, continue pulling to have the outer\n   *   view dismiss.\n   * - However, without catching the scroll view mid-bounce (while it is\n   *   motionless), if you drag far enough for the scroll view to become\n   *   responder (and therefore drag the scroll view a bit), any backswipe\n   *   navigation of a swipe gesture higher in the view hierarchy, should be\n   *   rejected.\n   */\n  _handleResponderTerminationRequest: () => boolean = () => {\n    return !this._observedScrollSinceBecomingResponder;\n  };\n\n  /**\n   * Invoke this from an `onScroll` event.\n   */\n  _handleScrollShouldSetResponder: () => boolean = () => {\n    // Allow any event touch pass through if the default pan responder is disabled\n    if (this.props.disableScrollViewPanResponder === true) {\n      return false;\n    }\n    return this._isTouching;\n  };\n\n  /**\n   * Merely touch starting is not sufficient for a scroll view to become the\n   * responder. Being the \"responder\" means that the very next touch move/end\n   * event will result in an action/movement.\n   *\n   * Invoke this from an `onStartShouldSetResponder` event.\n   *\n   * `onStartShouldSetResponder` is used when the next move/end will trigger\n   * some UI movement/action, but when you want to yield priority to views\n   * nested inside of the view.\n   *\n   * There may be some cases where scroll views actually should return `true`\n   * from `onStartShouldSetResponder`: Any time we are detecting a standard tap\n   * that gives priority to nested views.\n   *\n   * - If a single tap on the scroll view triggers an action such as\n   *   recentering a map style view yet wants to give priority to interaction\n   *   views inside (such as dropped pins or labels), then we would return true\n   *   from this method when there is a single touch.\n   *\n   * - Similar to the previous case, if a two finger \"tap\" should trigger a\n   *   zoom, we would check the `touches` count, and if `>= 2`, we would return\n   *   true.\n   *\n   */\n  _handleStartShouldSetResponder: (e: PressEvent) => boolean = (\n    e: PressEvent,\n  ) => {\n    // Allow any event touch pass through if the default pan responder is disabled\n    if (this.props.disableScrollViewPanResponder === true) {\n      return false;\n    }\n\n    const currentlyFocusedInput = TextInputState.currentlyFocusedInput();\n    if (\n      this.props.keyboardShouldPersistTaps === 'handled' &&\n      this._keyboardIsDismissible() &&\n      e.target !== currentlyFocusedInput\n    ) {\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * There are times when the scroll view wants to become the responder\n   * (meaning respond to the next immediate `touchStart/touchEnd`), in a way\n   * that *doesn't* give priority to nested views (hence the capture phase):\n   *\n   * - Currently animating.\n   * - Tapping anywhere that is not a text input, while the keyboard is\n   *   up (which should dismiss the keyboard).\n   *\n   * Invoke this from an `onStartShouldSetResponderCapture` event.\n   */\n  _handleStartShouldSetResponderCapture: (e: PressEvent) => boolean = (\n    e: PressEvent,\n  ) => {\n    // The scroll view should receive taps instead of its descendants if:\n    // * it is already animating/decelerating\n    if (this._isAnimating()) {\n      return true;\n    }\n\n    // Allow any event touch pass through if the default pan responder is disabled\n    if (this.props.disableScrollViewPanResponder === true) {\n      return false;\n    }\n\n    // * the keyboard is up, keyboardShouldPersistTaps is 'never' (the default),\n    // and a new touch starts with a non-textinput target (in which case the\n    // first tap should be sent to the scroll view and dismiss the keyboard,\n    // then the second tap goes to the actual interior view)\n    const {keyboardShouldPersistTaps} = this.props;\n    const keyboardNeverPersistTaps =\n      !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';\n\n    if (typeof e.target === 'number') {\n      if (__DEV__) {\n        console.error(\n          'Did not expect event target to be a number. Should have been a native component',\n        );\n      }\n\n      return false;\n    }\n\n    // Let presses through if the soft keyboard is detached from the viewport\n    if (this._softKeyboardIsDetached()) {\n      return false;\n    }\n\n    if (\n      keyboardNeverPersistTaps &&\n      this._keyboardIsDismissible() &&\n      e.target != null &&\n      // $FlowFixMe[incompatible-call]\n      !TextInputState.isTextInput(e.target)\n    ) {\n      return true;\n    }\n\n    return false;\n  };\n\n  /**\n   * Do we consider there to be a dismissible soft-keyboard open?\n   */\n  _keyboardIsDismissible: () => boolean = () => {\n    const currentlyFocusedInput = TextInputState.currentlyFocusedInput();\n\n    // We cannot dismiss the keyboard without an input to blur, even if a soft\n    // keyboard is open (e.g. when keyboard is open due to a native component\n    // not participating in TextInputState). It's also possible that the\n    // currently focused input isn't a TextInput (such as by calling ref.focus\n    // on a non-TextInput).\n    const hasFocusedTextInput =\n      currentlyFocusedInput != null &&\n      TextInputState.isTextInput(currentlyFocusedInput);\n\n    // Even if an input is focused, we may not have a keyboard to dismiss. E.g\n    // when using a physical keyboard. Ensure we have an event for an opened\n    // keyboard.\n    const softKeyboardMayBeOpen =\n      this._keyboardMetrics != null || this._keyboardEventsAreUnreliable();\n\n    return hasFocusedTextInput && softKeyboardMayBeOpen;\n  };\n\n  /**\n   * Whether an open soft keyboard is present which does not overlap the\n   * viewport. E.g. for a VR soft-keyboard which is detached from the app\n   * viewport.\n   */\n  _softKeyboardIsDetached: () => boolean = () => {\n    return this._keyboardMetrics != null && this._keyboardMetrics.height === 0;\n  };\n\n  _keyboardEventsAreUnreliable: () => boolean = () => {\n    // Android versions prior to API 30 rely on observing layout changes when\n    // `android:windowSoftInputMode` is set to `adjustResize` or `adjustPan`.\n    return Platform.OS === 'android' && Platform.Version < 30;\n  };\n\n  /**\n   * Invoke this from an `onTouchEnd` event.\n   *\n   * @param {PressEvent} e Event.\n   */\n  _handleTouchEnd: (e: PressEvent) => void = (e: PressEvent) => {\n    const nativeEvent = e.nativeEvent;\n    this._isTouching = nativeEvent.touches.length !== 0;\n\n    const {keyboardShouldPersistTaps} = this.props;\n    const keyboardNeverPersistsTaps =\n      !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';\n\n    // Dismiss the keyboard now if we didn't become responder in capture phase\n    // to eat presses, but still want to dismiss on interaction.\n    // Don't do anything if the target of the touch event is the current input.\n    const currentlyFocusedTextInput = TextInputState.currentlyFocusedInput();\n    if (\n      currentlyFocusedTextInput != null &&\n      e.target !== currentlyFocusedTextInput &&\n      this._softKeyboardIsDetached() &&\n      this._keyboardIsDismissible() &&\n      keyboardNeverPersistsTaps\n    ) {\n      TextInputState.blurTextInput(currentlyFocusedTextInput);\n    }\n\n    this.props.onTouchEnd && this.props.onTouchEnd(e);\n  };\n\n  /**\n   * Invoke this from an `onTouchCancel` event.\n   *\n   * @param {PressEvent} e Event.\n   */\n  _handleTouchCancel: (e: PressEvent) => void = (e: PressEvent) => {\n    this._isTouching = false;\n    this.props.onTouchCancel && this.props.onTouchCancel(e);\n  };\n\n  /**\n   * Invoke this from an `onTouchStart` event.\n   *\n   * Since we know that the `SimpleEventPlugin` occurs later in the plugin\n   * order, after `ResponderEventPlugin`, we can detect that we were *not*\n   * permitted to be the responder (presumably because a contained view became\n   * responder). The `onResponderReject` won't fire in that case - it only\n   * fires when a *current* responder rejects our request.\n   *\n   * @param {PressEvent} e Touch Start event.\n   */\n  _handleTouchStart: (e: PressEvent) => void = (e: PressEvent) => {\n    this._isTouching = true;\n    this.props.onTouchStart && this.props.onTouchStart(e);\n  };\n\n  /**\n   * Invoke this from an `onTouchMove` event.\n   *\n   * Since we know that the `SimpleEventPlugin` occurs later in the plugin\n   * order, after `ResponderEventPlugin`, we can detect that we were *not*\n   * permitted to be the responder (presumably because a contained view became\n   * responder). The `onResponderReject` won't fire in that case - it only\n   * fires when a *current* responder rejects our request.\n   *\n   * @param {PressEvent} e Touch Start event.\n   */\n  _handleTouchMove: (e: PressEvent) => void = (e: PressEvent) => {\n    this.props.onTouchMove && this.props.onTouchMove(e);\n  };\n\n  render(): React.Node {\n    const horizontal = this.props.horizontal === true;\n\n    const NativeScrollView = horizontal\n      ? HScrollViewNativeComponent\n      : VScrollViewNativeComponent;\n\n    const NativeScrollContentView = horizontal\n      ? HScrollContentViewNativeComponent\n      : VScrollContentViewNativeComponent;\n\n    const contentContainerStyle = [\n      horizontal && styles.contentContainerHorizontal,\n      this.props.contentContainerStyle,\n    ];\n    if (__DEV__ && this.props.style !== undefined) {\n      // $FlowFixMe[underconstrained-implicit-instantiation]\n      const style = flattenStyle(this.props.style);\n      const childLayoutProps = ['alignItems', 'justifyContent'].filter(\n        // $FlowFixMe[incompatible-use]\n        prop => style && style[prop] !== undefined,\n      );\n      invariant(\n        childLayoutProps.length === 0,\n        'ScrollView child layout (' +\n          JSON.stringify(childLayoutProps) +\n          ') must be applied through the contentContainerStyle prop.',\n      );\n    }\n\n    const contentSizeChangeProps =\n      this.props.onContentSizeChange == null\n        ? null\n        : {\n            onLayout: this._handleContentOnLayout,\n          };\n\n    const {stickyHeaderIndices} = this.props;\n    let children = this.props.children;\n    /**\n     * This function can cause unnecessary remount when nested in conditionals as it causes remap of children keys.\n     * https://react.dev/reference/react/Children#children-toarray-caveats\n     */\n    children = React.Children.toArray<$FlowFixMe>(children);\n\n    if (stickyHeaderIndices != null && stickyHeaderIndices.length > 0) {\n      children = children.map((child, index) => {\n        const indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;\n        if (indexOfIndex > -1) {\n          const key = child.key;\n          const nextIndex = stickyHeaderIndices[indexOfIndex + 1];\n          const StickyHeaderComponent =\n            this.props.StickyHeaderComponent || ScrollViewStickyHeader;\n          return (\n            <StickyHeaderComponent\n              key={key}\n              ref={ref => this._setStickyHeaderRef(key, ref)}\n              nextHeaderLayoutY={this._headerLayoutYs.get(\n                this._getKeyForIndex(nextIndex, children),\n              )}\n              onLayout={event => this._onStickyHeaderLayout(index, event, key)}\n              scrollAnimatedValue={this._scrollAnimatedValue}\n              inverted={this.props.invertStickyHeaders}\n              hiddenOnScroll={this.props.stickyHeaderHiddenOnScroll}\n              scrollViewHeight={this.state.layoutHeight}>\n              {child}\n            </StickyHeaderComponent>\n          );\n        } else {\n          return child;\n        }\n      });\n    }\n    children = (\n      <ScrollViewContext.Provider value={horizontal ? HORIZONTAL : VERTICAL}>\n        {children}\n      </ScrollViewContext.Provider>\n    );\n\n    const hasStickyHeaders =\n      Array.isArray(stickyHeaderIndices) && stickyHeaderIndices.length > 0;\n\n    // Some ScrollView native component behaviors rely on using the metrics\n    // of mounted views for anchoring. Make sure not to flatten children if\n    // this is the case.\n    const preserveChildren =\n      this.props.maintainVisibleContentPosition != null ||\n      (Platform.OS === 'android' && this.props.snapToAlignment != null);\n\n    const contentContainer = (\n      <NativeScrollContentView\n        {...contentSizeChangeProps}\n        ref={this._innerView.getForwardingRef(this.props.innerViewRef)}\n        style={contentContainerStyle}\n        removeClippedSubviews={\n          // Subview clipping causes issues with sticky headers on Android and\n          // would be hard to fix properly in a performant way.\n          Platform.OS === 'android' && hasStickyHeaders\n            ? false\n            : this.props.removeClippedSubviews\n        }\n        collapsable={false}\n        collapsableChildren={!preserveChildren}>\n        {children}\n      </NativeScrollContentView>\n    );\n\n    const alwaysBounceHorizontal =\n      this.props.alwaysBounceHorizontal !== undefined\n        ? this.props.alwaysBounceHorizontal\n        : this.props.horizontal;\n\n    const alwaysBounceVertical =\n      this.props.alwaysBounceVertical !== undefined\n        ? this.props.alwaysBounceVertical\n        : !this.props.horizontal;\n\n    const baseStyle = horizontal ? styles.baseHorizontal : styles.baseVertical;\n\n    const {experimental_endDraggingSensitivityMultiplier, ...otherProps} =\n      this.props;\n    const props = {\n      ...otherProps,\n      alwaysBounceHorizontal,\n      alwaysBounceVertical,\n      style: StyleSheet.compose(baseStyle, this.props.style),\n      // Override the onContentSizeChange from props, since this event can\n      // bubble up from TextInputs\n      onContentSizeChange: null,\n      onLayout: this._handleLayout,\n      onMomentumScrollBegin: this._handleMomentumScrollBegin,\n      onMomentumScrollEnd: this._handleMomentumScrollEnd,\n      onResponderGrant: this._handleResponderGrant,\n      onResponderReject: this._handleResponderReject,\n      onResponderRelease: this._handleResponderRelease,\n      onResponderTerminationRequest: this._handleResponderTerminationRequest,\n      onScrollBeginDrag: this._handleScrollBeginDrag,\n      onScrollEndDrag: this._handleScrollEndDrag,\n      onScrollShouldSetResponder: this._handleScrollShouldSetResponder,\n      onStartShouldSetResponder: this._handleStartShouldSetResponder,\n      onStartShouldSetResponderCapture:\n        this._handleStartShouldSetResponderCapture,\n      onTouchEnd: this._handleTouchEnd,\n      onTouchMove: this._handleTouchMove,\n      onTouchStart: this._handleTouchStart,\n      onTouchCancel: this._handleTouchCancel,\n      onScroll: this._handleScroll,\n      endDraggingSensitivityMultiplier:\n        experimental_endDraggingSensitivityMultiplier,\n      scrollEventThrottle: hasStickyHeaders\n        ? 1\n        : this.props.scrollEventThrottle,\n      sendMomentumEvents:\n        this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd\n          ? true\n          : false,\n      // default to true\n      snapToStart: this.props.snapToStart !== false,\n      // default to true\n      snapToEnd: this.props.snapToEnd !== false,\n      // pagingEnabled is overridden by snapToInterval / snapToOffsets\n      pagingEnabled: Platform.select({\n        // on iOS, pagingEnabled must be set to false to have snapToInterval / snapToOffsets work\n        ios:\n          this.props.pagingEnabled === true &&\n          this.props.snapToInterval == null &&\n          this.props.snapToOffsets == null,\n        // on Android, pagingEnabled must be set to true to have snapToInterval / snapToOffsets work\n        android:\n          this.props.pagingEnabled === true ||\n          this.props.snapToInterval != null ||\n          this.props.snapToOffsets != null,\n      }),\n    };\n\n    const {decelerationRate} = this.props;\n    if (decelerationRate != null) {\n      props.decelerationRate = processDecelerationRate(decelerationRate);\n    }\n\n    const refreshControl = this.props.refreshControl;\n    const scrollViewRef: React.RefSetter<TScrollViewNativeImperativeHandle | null> =\n      this._scrollView.getForwardingRef(this.props.scrollViewRef);\n\n    if (refreshControl) {\n      if (Platform.OS === 'ios') {\n        // On iOS the RefreshControl is a child of the ScrollView.\n        return (\n          // $FlowFixMe[incompatible-type] - Flow only knows element refs.\n          <NativeScrollView {...props} ref={scrollViewRef}>\n            {refreshControl}\n            {contentContainer}\n          </NativeScrollView>\n        );\n      } else if (Platform.OS === 'android') {\n        // On Android wrap the ScrollView with a AndroidSwipeRefreshLayout.\n        // Since the ScrollView is wrapped add the style props to the\n        // AndroidSwipeRefreshLayout and use flex: 1 for the ScrollView.\n        // Note: we should split props.style on the inner and outer props\n        // however, the ScrollView still needs the baseStyle to be scrollable\n        // $FlowFixMe[underconstrained-implicit-instantiation]\n        // $FlowFixMe[incompatible-call]\n        const {outer, inner} = splitLayoutProps(flattenStyle(props.style));\n        return React.cloneElement(\n          refreshControl,\n          {style: StyleSheet.compose(baseStyle, outer)},\n          <NativeScrollView\n            {...props}\n            style={StyleSheet.compose(baseStyle, inner)}\n            // $FlowFixMe[incompatible-type] - Flow only knows element refs.\n            ref={scrollViewRef}>\n            {contentContainer}\n          </NativeScrollView>,\n        );\n      }\n    }\n    return (\n      // $FlowFixMe[incompatible-type] - Flow only knows element refs.\n      <NativeScrollView {...props} ref={scrollViewRef}>\n        {contentContainer}\n      </NativeScrollView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  baseVertical: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: 'column',\n    overflow: 'scroll',\n  },\n  baseHorizontal: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: 'row',\n    overflow: 'scroll',\n  },\n  contentContainerHorizontal: {\n    flexDirection: 'row',\n  },\n});\n\ntype RefForwarder<TNativeInstance, TPublicInstance> = {\n  getForwardingRef: (\n    ?React.RefSetter<TPublicInstance>,\n  ) => (TNativeInstance | null) => void,\n  nativeInstance: TNativeInstance | null,\n  publicInstance: TPublicInstance | null,\n};\n\n/**\n * Helper function that should be replaced with `useCallback` and `useMergeRefs`\n * once `ScrollView` is reimplemented as a functional component.\n */\nfunction createRefForwarder<TNativeInstance, TPublicInstance>(\n  mutator: TNativeInstance => TPublicInstance,\n): RefForwarder<TNativeInstance, TPublicInstance> {\n  const state: RefForwarder<TNativeInstance, TPublicInstance> = {\n    getForwardingRef: memoize(forwardedRef => {\n      return (nativeInstance: TNativeInstance | null): void => {\n        const publicInstance =\n          nativeInstance == null ? null : mutator(nativeInstance);\n\n        state.nativeInstance = nativeInstance;\n        state.publicInstance = publicInstance;\n\n        if (forwardedRef != null) {\n          if (typeof forwardedRef === 'function') {\n            forwardedRef(publicInstance);\n          } else {\n            forwardedRef.current = publicInstance;\n          }\n        }\n      };\n    }),\n    nativeInstance: null,\n    publicInstance: null,\n  };\n\n  return state;\n}\n\n// TODO: After upgrading to React 19, remove `forwardRef` from this component.\n// NOTE: This wrapper component is necessary because `ScrollView` is a class\n// component and we need to map `ref` to a differently named prop. This can be\n// removed when `ScrollView` is a functional component.\nconst Wrapper = React.forwardRef(function Wrapper(\n  props: Props,\n  ref: ?React.RefSetter<PublicScrollViewInstance>,\n): React.Node {\n  return ref == null ? (\n    <ScrollView {...props} />\n  ) : (\n    <ScrollView {...props} scrollViewRef={ref} />\n  );\n});\nWrapper.displayName = 'ScrollView';\n// $FlowExpectedError[prop-missing]\nWrapper.Context = ScrollViewContext;\n\nmodule.exports = ((Wrapper: $FlowFixMe): React.AbstractComponent<\n  React.ElementConfig<typeof ScrollView>,\n  PublicScrollViewInstance,\n> &\n  ScrollViewComponentStatics);\n"],"mappings":"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","ignoreList":[]}