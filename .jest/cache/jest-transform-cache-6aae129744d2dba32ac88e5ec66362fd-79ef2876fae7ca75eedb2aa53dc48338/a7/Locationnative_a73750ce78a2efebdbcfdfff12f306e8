2584bfbf695d83f8a53fd2216e6c9e45
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.install = install;
exports.setLocationHref = setLocationHref;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var DOMException = function (_Error) {
  function DOMException(message, name) {
    var _this;
    (0, _classCallCheck2.default)(this, DOMException);
    _this = _callSuper(this, DOMException, [message]);
    _this.name = name;
    return _this;
  }
  (0, _inherits2.default)(DOMException, _Error);
  return (0, _createClass2.default)(DOMException);
}((0, _wrapNativeSuper2.default)(Error));
var Location = (0, _createClass2.default)(function Location() {
  var href = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  (0, _classCallCheck2.default)(this, Location);
  var url = new URL(href);
  try {
    url.username = '';
  } catch (_unused) {
    throw new Error('Attempting to use the window.location polyfill before the URL built-in has been polyfilled.');
  }
  url.password = '';
  Object.defineProperties(this, (0, _defineProperty2.default)({
    hash: {
      get: function get() {
        return url.hash;
      },
      set: function set() {
        throw new DOMException(`Cannot set "location.hash".`, 'NotSupportedError');
      },
      enumerable: true
    },
    host: {
      get: function get() {
        return url.host;
      },
      set: function set() {
        throw new DOMException(`Cannot set "location.host".`, 'NotSupportedError');
      },
      enumerable: true
    },
    hostname: {
      get: function get() {
        return url.hostname;
      },
      set: function set() {
        throw new DOMException(`Cannot set "location.hostname".`, 'NotSupportedError');
      },
      enumerable: true
    },
    href: {
      get: function get() {
        return url.href;
      },
      set: function set() {
        throw new DOMException(`Cannot set "location.href".`, 'NotSupportedError');
      },
      enumerable: true
    },
    origin: {
      get: function get() {
        return url.origin;
      },
      enumerable: true
    },
    pathname: {
      get: function get() {
        return url.pathname;
      },
      set: function set() {
        throw new DOMException(`Cannot set "location.pathname".`, 'NotSupportedError');
      },
      enumerable: true
    },
    port: {
      get: function get() {
        return url.port;
      },
      set: function set() {
        throw new DOMException(`Cannot set "location.port".`, 'NotSupportedError');
      },
      enumerable: true
    },
    protocol: {
      get: function get() {
        return url.protocol;
      },
      set: function set() {
        throw new DOMException(`Cannot set "location.protocol".`, 'NotSupportedError');
      },
      enumerable: true
    },
    search: {
      get: function get() {
        return url.search;
      },
      set: function set() {
        throw new DOMException(`Cannot set "location.search".`, 'NotSupportedError');
      },
      enumerable: true
    },
    ancestorOrigins: {
      get: function get() {
        return {
          length: 0,
          item: function item() {
            return null;
          },
          contains: function contains() {
            return false;
          }
        };
      },
      enumerable: true
    },
    assign: {
      value: function assign() {
        throw new DOMException(`Cannot call "location.assign()".`, 'NotSupportedError');
      },
      enumerable: true
    },
    reload: {
      value: function reload() {
        if (process.env.NODE_ENV !== 'production') {
          var DevSettings = require('react-native').DevSettings;
          return DevSettings.reload();
        } else if (typeof globalThis.expo !== 'undefined' && 'reloadAppAsync' in globalThis.expo) {
          globalThis.expo.reloadAppAsync('');
        } else {
          throw new DOMException(`Cannot call "location.reload()".`, 'NotSupportedError');
        }
      },
      enumerable: true
    },
    replace: {
      value: function replace() {
        throw new DOMException(`Cannot call "location.replace()".`, 'NotSupportedError');
      },
      enumerable: true
    },
    toString: {
      value: function toString() {
        return url.href;
      },
      enumerable: true
    }
  }, Symbol.for('Expo.privateCustomInspect'), {
    value: function value(inspect) {
      var object = {
        hash: this.hash,
        host: this.host,
        hostname: this.hostname,
        href: this.href,
        origin: this.origin,
        pathname: this.pathname,
        port: this.port,
        protocol: this.protocol,
        search: this.search
      };
      return `${this.constructor.name} ${inspect(object)}`;
    }
  }));
});
Object.defineProperties(Location.prototype, (0, _defineProperty2.default)({}, Symbol.toString(), {
  value: 'Location',
  configurable: true
}));
var location = undefined;
function setLocationHref(href) {
  location = new Location(href);
}
function install() {
  Object.defineProperty(global, 'Location', {
    value: Location,
    configurable: true,
    writable: true
  });
  Object.defineProperty(window, 'location', {
    get: function get() {
      return location;
    },
    set: function set() {
      throw new DOMException(`Cannot set "location".`, 'NotSupportedError');
    },
    enumerable: true
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,