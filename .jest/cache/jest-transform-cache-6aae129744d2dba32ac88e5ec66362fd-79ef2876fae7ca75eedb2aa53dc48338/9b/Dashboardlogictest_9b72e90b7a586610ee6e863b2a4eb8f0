4c919ea064a43f4822e6744f9cd1e369
describe('Dashboard - Logique métier', function () {
  describe('Calcul de progression', function () {
    it('devrait calculer correctement le pourcentage de progression', function () {
      var calculateProgress = function calculateProgress(current, total) {
        if (!total || total === 0) return 0;
        return Math.min(Math.round(current / total * 100), 100);
      };
      expect(calculateProgress(5, 10)).toBe(50);
      expect(calculateProgress(10, 10)).toBe(100);
      expect(calculateProgress(15, 10)).toBe(100);
      expect(calculateProgress(0, 10)).toBe(0);
      expect(calculateProgress(5, 0)).toBe(0);
    });
  });
  describe('Gestion des niveaux', function () {
    it('devrait valider les niveaux correctement', function () {
      var isValidLevel = function isValidLevel(level) {
        var validLevels = ['1', '2', '3', '4', '5', '6', 'bonus'];
        return validLevels.includes(level);
      };
      expect(isValidLevel('1')).toBe(true);
      expect(isValidLevel('6')).toBe(true);
      expect(isValidLevel('bonus')).toBe(true);
      expect(isValidLevel('7')).toBe(false);
      expect(isValidLevel('')).toBe(false);
      expect(isValidLevel(null)).toBe(false);
    });
    it('devrait retourner le niveau par défaut si invalide', function () {
      var getValidLevel = function getValidLevel(level) {
        var validLevels = ['1', '2', '3', '4', '5', '6', 'bonus'];
        return validLevels.includes(level) ? level : '1';
      };
      expect(getValidLevel('3')).toBe('3');
      expect(getValidLevel('invalid')).toBe('1');
      expect(getValidLevel(null)).toBe('1');
      expect(getValidLevel(undefined)).toBe('1');
    });
  });
  describe('Formatage des données', function () {
    it('devrait formater les métadonnées d\'activité', function () {
      var formatActivityMetadata = function formatActivityMetadata(activity) {
        var _activity$metadata, _activity$metadata2;
        if (!activity) return null;
        return {
          title: activity.title || 'Activité inconnue',
          level: activity.level || '1',
          progress: ((_activity$metadata = activity.metadata) == null ? void 0 : _activity$metadata.word) || 0,
          total: ((_activity$metadata2 = activity.metadata) == null ? void 0 : _activity$metadata2.totalWords) || 15,
          type: activity.type || 'unknown'
        };
      };
      var activity = {
        title: 'Vocabulaire',
        level: '2',
        metadata: {
          word: 5,
          totalWords: 20
        },
        type: 'vocabulary'
      };
      var formatted = formatActivityMetadata(activity);
      expect(formatted.title).toBe('Vocabulaire');
      expect(formatted.level).toBe('2');
      expect(formatted.progress).toBe(5);
      expect(formatted.total).toBe(20);
      expect(formatted.type).toBe('vocabulary');
    });
    it('devrait gérer les activités incomplètes', function () {
      var formatActivityMetadata = function formatActivityMetadata(activity) {
        var _activity$metadata3, _activity$metadata4;
        if (!activity) return null;
        return {
          title: activity.title || 'Activité inconnue',
          level: activity.level || '1',
          progress: ((_activity$metadata3 = activity.metadata) == null ? void 0 : _activity$metadata3.word) || 0,
          total: ((_activity$metadata4 = activity.metadata) == null ? void 0 : _activity$metadata4.totalWords) || 15,
          type: activity.type || 'unknown'
        };
      };
      var incompleteActivity = {
        title: 'Test'
      };
      var formatted = formatActivityMetadata(incompleteActivity);
      expect(formatted.title).toBe('Test');
      expect(formatted.level).toBe('1');
      expect(formatted.progress).toBe(0);
      expect(formatted.total).toBe(15);
      expect(formatted.type).toBe('unknown');
    });
  });
  describe('Utilitaires Dashboard', function () {
    it('devrait générer les couleurs de niveau', function () {
      var getLevelColor = function getLevelColor(level) {
        var colors = {
          '1': '#10B981',
          '2': '#3B82F6',
          '3': '#8B5CF6',
          '4': '#F59E0B',
          '5': '#EF4444',
          '6': '#EC4899',
          'bonus': '#6366F1'
        };
        return colors[level] || colors['1'];
      };
      expect(getLevelColor('1')).toBe('#10B981');
      expect(getLevelColor('3')).toBe('#8B5CF6');
      expect(getLevelColor('bonus')).toBe('#6366F1');
      expect(getLevelColor('invalid')).toBe('#10B981');
    });
    it('devrait valider les états de chargement', function () {
      var isLoading = function isLoading(states) {
        return Object.values(states).some(function (state) {
          return state === true;
        });
      };
      expect(isLoading({
        progress: false,
        activity: false
      })).toBe(false);
      expect(isLoading({
        progress: true,
        activity: false
      })).toBe(true);
      expect(isLoading({
        progress: false,
        activity: true
      })).toBe(true);
      expect(isLoading({})).toBe(false);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZXNjcmliZSIsIml0IiwiY2FsY3VsYXRlUHJvZ3Jlc3MiLCJjdXJyZW50IiwidG90YWwiLCJNYXRoIiwibWluIiwicm91bmQiLCJleHBlY3QiLCJ0b0JlIiwiaXNWYWxpZExldmVsIiwibGV2ZWwiLCJ2YWxpZExldmVscyIsImluY2x1ZGVzIiwiZ2V0VmFsaWRMZXZlbCIsInVuZGVmaW5lZCIsImZvcm1hdEFjdGl2aXR5TWV0YWRhdGEiLCJhY3Rpdml0eSIsIl9hY3Rpdml0eSRtZXRhZGF0YSIsIl9hY3Rpdml0eSRtZXRhZGF0YTIiLCJ0aXRsZSIsInByb2dyZXNzIiwibWV0YWRhdGEiLCJ3b3JkIiwidG90YWxXb3JkcyIsInR5cGUiLCJmb3JtYXR0ZWQiLCJfYWN0aXZpdHkkbWV0YWRhdGEzIiwiX2FjdGl2aXR5JG1ldGFkYXRhNCIsImluY29tcGxldGVBY3Rpdml0eSIsImdldExldmVsQ29sb3IiLCJjb2xvcnMiLCJpc0xvYWRpbmciLCJzdGF0ZXMiLCJPYmplY3QiLCJ2YWx1ZXMiLCJzb21lIiwic3RhdGUiXSwic291cmNlcyI6WyJEYXNoYm9hcmQubG9naWMudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBfX3Rlc3RzX18vc2NyZWVucy9EYXNoYm9hcmQvRGFzaGJvYXJkLmxvZ2ljLnRlc3QuanNcblxuLy8gVGVzdHMgZGUgbGEgbG9naXF1ZSBtw6l0aWVyIGR1IERhc2hib2FyZCBzYW5zIHJlbmR1IGNvbXBsZXRcbmRlc2NyaWJlKCdEYXNoYm9hcmQgLSBMb2dpcXVlIG3DqXRpZXInLCAoKSA9PiB7XG4gIFxuICBkZXNjcmliZSgnQ2FsY3VsIGRlIHByb2dyZXNzaW9uJywgKCkgPT4ge1xuICAgIGl0KCdkZXZyYWl0IGNhbGN1bGVyIGNvcnJlY3RlbWVudCBsZSBwb3VyY2VudGFnZSBkZSBwcm9ncmVzc2lvbicsICgpID0+IHtcbiAgICAgIGNvbnN0IGNhbGN1bGF0ZVByb2dyZXNzID0gKGN1cnJlbnQsIHRvdGFsKSA9PiB7XG4gICAgICAgIGlmICghdG90YWwgfHwgdG90YWwgPT09IDApIHJldHVybiAwO1xuICAgICAgICByZXR1cm4gTWF0aC5taW4oTWF0aC5yb3VuZCgoY3VycmVudCAvIHRvdGFsKSAqIDEwMCksIDEwMCk7XG4gICAgICB9O1xuXG4gICAgICBleHBlY3QoY2FsY3VsYXRlUHJvZ3Jlc3MoNSwgMTApKS50b0JlKDUwKTtcbiAgICAgIGV4cGVjdChjYWxjdWxhdGVQcm9ncmVzcygxMCwgMTApKS50b0JlKDEwMCk7XG4gICAgICBleHBlY3QoY2FsY3VsYXRlUHJvZ3Jlc3MoMTUsIDEwKSkudG9CZSgxMDApOyAvLyBMaW1pdMOpIMOgIDEwMCVcbiAgICAgIGV4cGVjdChjYWxjdWxhdGVQcm9ncmVzcygwLCAxMCkpLnRvQmUoMCk7XG4gICAgICBleHBlY3QoY2FsY3VsYXRlUHJvZ3Jlc3MoNSwgMCkpLnRvQmUoMCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdHZXN0aW9uIGRlcyBuaXZlYXV4JywgKCkgPT4ge1xuICAgIGl0KCdkZXZyYWl0IHZhbGlkZXIgbGVzIG5pdmVhdXggY29ycmVjdGVtZW50JywgKCkgPT4ge1xuICAgICAgY29uc3QgaXNWYWxpZExldmVsID0gKGxldmVsKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbGlkTGV2ZWxzID0gWycxJywgJzInLCAnMycsICc0JywgJzUnLCAnNicsICdib251cyddO1xuICAgICAgICByZXR1cm4gdmFsaWRMZXZlbHMuaW5jbHVkZXMobGV2ZWwpO1xuICAgICAgfTtcblxuICAgICAgZXhwZWN0KGlzVmFsaWRMZXZlbCgnMScpKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KGlzVmFsaWRMZXZlbCgnNicpKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KGlzVmFsaWRMZXZlbCgnYm9udXMnKSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChpc1ZhbGlkTGV2ZWwoJzcnKSkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QoaXNWYWxpZExldmVsKCcnKSkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QoaXNWYWxpZExldmVsKG51bGwpKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZyYWl0IHJldG91cm5lciBsZSBuaXZlYXUgcGFyIGTDqWZhdXQgc2kgaW52YWxpZGUnLCAoKSA9PiB7XG4gICAgICBjb25zdCBnZXRWYWxpZExldmVsID0gKGxldmVsKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbGlkTGV2ZWxzID0gWycxJywgJzInLCAnMycsICc0JywgJzUnLCAnNicsICdib251cyddO1xuICAgICAgICByZXR1cm4gdmFsaWRMZXZlbHMuaW5jbHVkZXMobGV2ZWwpID8gbGV2ZWwgOiAnMSc7XG4gICAgICB9O1xuXG4gICAgICBleHBlY3QoZ2V0VmFsaWRMZXZlbCgnMycpKS50b0JlKCczJyk7XG4gICAgICBleHBlY3QoZ2V0VmFsaWRMZXZlbCgnaW52YWxpZCcpKS50b0JlKCcxJyk7XG4gICAgICBleHBlY3QoZ2V0VmFsaWRMZXZlbChudWxsKSkudG9CZSgnMScpO1xuICAgICAgZXhwZWN0KGdldFZhbGlkTGV2ZWwodW5kZWZpbmVkKSkudG9CZSgnMScpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRm9ybWF0YWdlIGRlcyBkb25uw6llcycsICgpID0+IHtcbiAgICBpdCgnZGV2cmFpdCBmb3JtYXRlciBsZXMgbcOpdGFkb25uw6llcyBkXFwnYWN0aXZpdMOpJywgKCkgPT4ge1xuICAgICAgY29uc3QgZm9ybWF0QWN0aXZpdHlNZXRhZGF0YSA9IChhY3Rpdml0eSkgPT4ge1xuICAgICAgICBpZiAoIWFjdGl2aXR5KSByZXR1cm4gbnVsbDtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdGl0bGU6IGFjdGl2aXR5LnRpdGxlIHx8ICdBY3Rpdml0w6kgaW5jb25udWUnLFxuICAgICAgICAgIGxldmVsOiBhY3Rpdml0eS5sZXZlbCB8fCAnMScsXG4gICAgICAgICAgcHJvZ3Jlc3M6IGFjdGl2aXR5Lm1ldGFkYXRhPy53b3JkIHx8IDAsXG4gICAgICAgICAgdG90YWw6IGFjdGl2aXR5Lm1ldGFkYXRhPy50b3RhbFdvcmRzIHx8IDE1LFxuICAgICAgICAgIHR5cGU6IGFjdGl2aXR5LnR5cGUgfHwgJ3Vua25vd24nXG4gICAgICAgIH07XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBhY3Rpdml0eSA9IHtcbiAgICAgICAgdGl0bGU6ICdWb2NhYnVsYWlyZScsXG4gICAgICAgIGxldmVsOiAnMicsXG4gICAgICAgIG1ldGFkYXRhOiB7IHdvcmQ6IDUsIHRvdGFsV29yZHM6IDIwIH0sXG4gICAgICAgIHR5cGU6ICd2b2NhYnVsYXJ5J1xuICAgICAgfTtcblxuICAgICAgY29uc3QgZm9ybWF0dGVkID0gZm9ybWF0QWN0aXZpdHlNZXRhZGF0YShhY3Rpdml0eSk7XG4gICAgICBleHBlY3QoZm9ybWF0dGVkLnRpdGxlKS50b0JlKCdWb2NhYnVsYWlyZScpO1xuICAgICAgZXhwZWN0KGZvcm1hdHRlZC5sZXZlbCkudG9CZSgnMicpO1xuICAgICAgZXhwZWN0KGZvcm1hdHRlZC5wcm9ncmVzcykudG9CZSg1KTtcbiAgICAgIGV4cGVjdChmb3JtYXR0ZWQudG90YWwpLnRvQmUoMjApO1xuICAgICAgZXhwZWN0KGZvcm1hdHRlZC50eXBlKS50b0JlKCd2b2NhYnVsYXJ5Jyk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2cmFpdCBnw6lyZXIgbGVzIGFjdGl2aXTDqXMgaW5jb21wbMOodGVzJywgKCkgPT4ge1xuICAgICAgY29uc3QgZm9ybWF0QWN0aXZpdHlNZXRhZGF0YSA9IChhY3Rpdml0eSkgPT4ge1xuICAgICAgICBpZiAoIWFjdGl2aXR5KSByZXR1cm4gbnVsbDtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdGl0bGU6IGFjdGl2aXR5LnRpdGxlIHx8ICdBY3Rpdml0w6kgaW5jb25udWUnLFxuICAgICAgICAgIGxldmVsOiBhY3Rpdml0eS5sZXZlbCB8fCAnMScsXG4gICAgICAgICAgcHJvZ3Jlc3M6IGFjdGl2aXR5Lm1ldGFkYXRhPy53b3JkIHx8IDAsXG4gICAgICAgICAgdG90YWw6IGFjdGl2aXR5Lm1ldGFkYXRhPy50b3RhbFdvcmRzIHx8IDE1LFxuICAgICAgICAgIHR5cGU6IGFjdGl2aXR5LnR5cGUgfHwgJ3Vua25vd24nXG4gICAgICAgIH07XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBpbmNvbXBsZXRlQWN0aXZpdHkgPSB7IHRpdGxlOiAnVGVzdCcgfTtcbiAgICAgIGNvbnN0IGZvcm1hdHRlZCA9IGZvcm1hdEFjdGl2aXR5TWV0YWRhdGEoaW5jb21wbGV0ZUFjdGl2aXR5KTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGZvcm1hdHRlZC50aXRsZSkudG9CZSgnVGVzdCcpO1xuICAgICAgZXhwZWN0KGZvcm1hdHRlZC5sZXZlbCkudG9CZSgnMScpO1xuICAgICAgZXhwZWN0KGZvcm1hdHRlZC5wcm9ncmVzcykudG9CZSgwKTtcbiAgICAgIGV4cGVjdChmb3JtYXR0ZWQudG90YWwpLnRvQmUoMTUpO1xuICAgICAgZXhwZWN0KGZvcm1hdHRlZC50eXBlKS50b0JlKCd1bmtub3duJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdVdGlsaXRhaXJlcyBEYXNoYm9hcmQnLCAoKSA9PiB7XG4gICAgaXQoJ2RldnJhaXQgZ8OpbsOpcmVyIGxlcyBjb3VsZXVycyBkZSBuaXZlYXUnLCAoKSA9PiB7XG4gICAgICBjb25zdCBnZXRMZXZlbENvbG9yID0gKGxldmVsKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbG9ycyA9IHtcbiAgICAgICAgICAnMSc6ICcjMTBCOTgxJyxcbiAgICAgICAgICAnMic6ICcjM0I4MkY2JywgXG4gICAgICAgICAgJzMnOiAnIzhCNUNGNicsXG4gICAgICAgICAgJzQnOiAnI0Y1OUUwQicsXG4gICAgICAgICAgJzUnOiAnI0VGNDQ0NCcsXG4gICAgICAgICAgJzYnOiAnI0VDNDg5OScsXG4gICAgICAgICAgJ2JvbnVzJzogJyM2MzY2RjEnXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBjb2xvcnNbbGV2ZWxdIHx8IGNvbG9yc1snMSddO1xuICAgICAgfTtcblxuICAgICAgZXhwZWN0KGdldExldmVsQ29sb3IoJzEnKSkudG9CZSgnIzEwQjk4MScpO1xuICAgICAgZXhwZWN0KGdldExldmVsQ29sb3IoJzMnKSkudG9CZSgnIzhCNUNGNicpO1xuICAgICAgZXhwZWN0KGdldExldmVsQ29sb3IoJ2JvbnVzJykpLnRvQmUoJyM2MzY2RjEnKTtcbiAgICAgIGV4cGVjdChnZXRMZXZlbENvbG9yKCdpbnZhbGlkJykpLnRvQmUoJyMxMEI5ODEnKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZyYWl0IHZhbGlkZXIgbGVzIMOpdGF0cyBkZSBjaGFyZ2VtZW50JywgKCkgPT4ge1xuICAgICAgY29uc3QgaXNMb2FkaW5nID0gKHN0YXRlcykgPT4ge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhzdGF0ZXMpLnNvbWUoc3RhdGUgPT4gc3RhdGUgPT09IHRydWUpO1xuICAgICAgfTtcblxuICAgICAgZXhwZWN0KGlzTG9hZGluZyh7IHByb2dyZXNzOiBmYWxzZSwgYWN0aXZpdHk6IGZhbHNlIH0pKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChpc0xvYWRpbmcoeyBwcm9ncmVzczogdHJ1ZSwgYWN0aXZpdHk6IGZhbHNlIH0pKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KGlzTG9hZGluZyh7IHByb2dyZXNzOiBmYWxzZSwgYWN0aXZpdHk6IHRydWUgfSkpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoaXNMb2FkaW5nKHt9KSkudG9CZShmYWxzZSk7XG4gICAgfSk7XG4gIH0pO1xufSk7Il0sIm1hcHBpbmdzIjoiQUFHQUEsUUFBUSxDQUFDLDRCQUE0QixFQUFFLFlBQU07RUFFM0NBLFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxZQUFNO0lBQ3RDQyxFQUFFLENBQUMsNkRBQTZELEVBQUUsWUFBTTtNQUN0RSxJQUFNQyxpQkFBaUIsR0FBRyxTQUFwQkEsaUJBQWlC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