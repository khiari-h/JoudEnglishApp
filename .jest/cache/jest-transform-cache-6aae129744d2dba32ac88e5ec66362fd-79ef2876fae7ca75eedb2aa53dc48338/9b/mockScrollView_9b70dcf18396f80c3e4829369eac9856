9504243a18ffb59bee4ae2f8ebf48da7
'use strict';

var _reactJsxRuntime = require("react/jsx-runtime");
var _classCallCheck = require("@babel/runtime/helpers/classCallCheck");
var _createClass = require("@babel/runtime/helpers/createClass");
var _possibleConstructorReturn = require("@babel/runtime/helpers/possibleConstructorReturn");
var _getPrototypeOf = require("@babel/runtime/helpers/getPrototypeOf");
var _inherits = require("@babel/runtime/helpers/inherits");
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var View = require('../Libraries/Components/View/View');
var requireNativeComponent = require('../Libraries/ReactNative/requireNativeComponent').default;
var React = require('react');
var RCTScrollView = requireNativeComponent('RCTScrollView');
function mockScrollView(BaseComponent) {
  var ScrollViewMock = function (_BaseComponent) {
    function ScrollViewMock() {
      _classCallCheck(this, ScrollViewMock);
      return _callSuper(this, ScrollViewMock, arguments);
    }
    _inherits(ScrollViewMock, _BaseComponent);
    return _createClass(ScrollViewMock, [{
      key: "render",
      value: function render() {
        return _reactJsxRuntime.jsxs(RCTScrollView, Object.assign({}, this.props, {
          children: [this.props.refreshControl, _reactJsxRuntime.jsx(View, {
            children: this.props.children
          })]
        }));
      }
    }]);
  }(BaseComponent);
  return ScrollViewMock;
}
module.exports = mockScrollView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3RKc3hSdW50aW1lIiwicmVxdWlyZSIsIl9jbGFzc0NhbGxDaGVjayIsIl9jcmVhdGVDbGFzcyIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX2dldFByb3RvdHlwZU9mIiwiX2luaGVyaXRzIiwiX2NhbGxTdXBlciIsInQiLCJvIiwiZSIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiY29uc3RydWN0b3IiLCJhcHBseSIsIkJvb2xlYW4iLCJwcm90b3R5cGUiLCJ2YWx1ZU9mIiwiY2FsbCIsIlZpZXciLCJyZXF1aXJlTmF0aXZlQ29tcG9uZW50IiwiZGVmYXVsdCIsIlJlYWN0IiwiUkNUU2Nyb2xsVmlldyIsIm1vY2tTY3JvbGxWaWV3IiwiQmFzZUNvbXBvbmVudCIsIlNjcm9sbFZpZXdNb2NrIiwiX0Jhc2VDb21wb25lbnQiLCJhcmd1bWVudHMiLCJrZXkiLCJ2YWx1ZSIsInJlbmRlciIsImpzeHMiLCJPYmplY3QiLCJhc3NpZ24iLCJwcm9wcyIsImNoaWxkcmVuIiwicmVmcmVzaENvbnRyb2wiLCJqc3giLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsibW9ja1Njcm9sbFZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICovXG5cbi8qIGVzbGludC1lbnYgamVzdCAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IFZpZXcgPSByZXF1aXJlKCcuLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9WaWV3L1ZpZXcnKTtcbmNvbnN0IHJlcXVpcmVOYXRpdmVDb21wb25lbnQgPVxuICByZXF1aXJlKCcuLi9MaWJyYXJpZXMvUmVhY3ROYXRpdmUvcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCcpLmRlZmF1bHQ7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBSQ1RTY3JvbGxWaWV3OiAkRmxvd0ZpeE1lID0gcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCgnUkNUU2Nyb2xsVmlldycpO1xuXG5mdW5jdGlvbiBtb2NrU2Nyb2xsVmlldyhCYXNlQ29tcG9uZW50OiAkRmxvd0ZpeE1lKSB7XG4gIGNsYXNzIFNjcm9sbFZpZXdNb2NrIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gICAgcmVuZGVyKCk6IFJlYWN0Lk1peGVkRWxlbWVudCB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8UkNUU2Nyb2xsVmlldyB7Li4udGhpcy5wcm9wc30+XG4gICAgICAgICAge3RoaXMucHJvcHMucmVmcmVzaENvbnRyb2x9XG4gICAgICAgICAgPFZpZXc+e3RoaXMucHJvcHMuY2hpbGRyZW59PC9WaWV3PlxuICAgICAgICA8L1JDVFNjcm9sbFZpZXc+XG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gU2Nyb2xsVmlld01vY2s7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gKG1vY2tTY3JvbGxWaWV3OiAkRmxvd0ZpeE1lKTtcbiJdLCJtYXBwaW5ncyI6IkFBWUEsWUFBWTs7QUFBQyxJQUFBQSxnQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsZUFBQSxHQUFBRCxPQUFBO0FBQUEsSUFBQUUsWUFBQSxHQUFBRixPQUFBO0FBQUEsSUFBQUcsMEJBQUEsR0FBQUgsT0FBQTtBQUFBLElBQUFJLGVBQUEsR0FBQUosT0FBQTtBQUFBLElBQUFLLFNBQUEsR0FBQUwsT0FBQTtBQUFBLFNBQUFNLFdBQUFDLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLFdBQUFELENBQUEsR0FBQUosZUFBQSxDQUFBSSxDQUFBLEdBQUFMLDBCQUFBLENBQUFJLENBQUEsRUFBQUcseUJBQUEsS0FBQUMsT0FBQSxDQUFBQyxTQUFBLENBQUFKLENBQUEsRUFBQUMsQ0FBQSxRQUFBTCxlQUFBLENBQUFHLENBQUEsRUFBQU0sV0FBQSxJQUFBTCxDQUFBLENBQUFNLEtBQUEsQ0FBQVAsQ0FBQSxFQUFBRSxDQUFBO0FBQUEsU0FBQUMsMEJBQUEsY0FBQUgsQ0FBQSxJQUFBUSxPQUFBLENBQUFDLFNBQUEsQ0FBQUMsT0FBQSxDQUFBQyxJQUFBLENBQUFQLE9BQUEsQ0FBQUMsU0FBQSxDQUFBRyxPQUFBLGlDQUFBUixDQUFBLGFBQUFHLHlCQUFBLFlBQUFBLDBCQUFBLGFBQUFILENBQUE7QUFFYixJQUFNWSxJQUFJLEdBQUduQixPQUFPLENBQUMsbUNBQW1DLENBQUM7QUFDekQsSUFBTW9CLHNCQUFzQixHQUMxQnBCLE9BQU8sQ0FBQyxpREFBaUQsQ0FBQyxDQUFDcUIsT0FBTztBQUNwRSxJQUFNQyxLQUFLLEdBQUd0QixPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLElBQU11QixhQUF5QixHQUFHSCxzQkFBc0IsQ0FBQyxlQUFlLENBQUM7QUFFekUsU0FBU0ksY0FBY0EsQ0FBQ0MsYUFBeUIsRUFBRTtFQUFBLElBQzNDQyxjQUFjLGFBQUFDLGNBQUE7SUFBQSxTQUFBRCxlQUFBO01BQUF6QixlQUFBLE9BQUF5QixjQUFBO01BQUEsT0FBQXBCLFVBQUEsT0FBQW9CLGNBQUEsRUFBQUUsU0FBQTtJQUFBO0lBQUF2QixTQUFBLENBQUFxQixjQUFBLEVBQUFDLGNBQUE7SUFBQSxPQUFBekIsWUFBQSxDQUFBd0IsY0FBQTtNQUFBRyxHQUFBO01BQUFDLEtBQUEsRUFDbEIsU0FBQUMsTUFBTUEsQ0FBQSxFQUF1QjtRQUMzQixPQUNFaEMsZ0JBQUEsQ0FBQWlDLElBQUEsQ0FBQ1QsYUFBYSxFQUFBVSxNQUFBLENBQUFDLE1BQUEsS0FBSyxJQUFJLENBQUNDLEtBQUs7VUFBQUMsUUFBQSxHQUMxQixJQUFJLENBQUNELEtBQUssQ0FBQ0UsY0FBYyxFQUMxQnRDLGdCQUFBLENBQUF1QyxHQUFBLENBQUNuQixJQUFJO1lBQUFpQixRQUFBLEVBQUUsSUFBSSxDQUFDRCxLQUFLLENBQUNDO1VBQVEsQ0FBTyxDQUFDO1FBQUEsRUFDckIsQ0FBQztNQUVwQjtJQUFDO0VBQUEsRUFSMEJYLGFBQWE7RUFVMUMsT0FBT0MsY0FBYztBQUN2QjtBQUVBYSxNQUFNLENBQUNDLE9BQU8sR0FBSWhCLGNBQTJCIiwiaWdub3JlTGlzdCI6W119