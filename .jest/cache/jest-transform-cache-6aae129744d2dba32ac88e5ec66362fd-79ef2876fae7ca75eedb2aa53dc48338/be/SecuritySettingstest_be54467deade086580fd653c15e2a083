6a7578585f4318c927b217cde59e0fd1
_getJestObj().mock('../../src/services/lockService', function () {
  return {
    isEnabled: jest.fn().mockResolvedValue(false),
    isBiometricsEnabled: jest.fn().mockResolvedValue(false),
    enableLock: jest.fn().mockResolvedValue(true),
    disableLock: jest.fn().mockResolvedValue(true),
    setPin: jest.fn().mockResolvedValue(true),
    setBiometricsEnabled: jest.fn().mockResolvedValue(true),
    generateRecoveryCode: jest.fn(function () {
      return 'ABCD2345EFGH6789';
    }),
    setRecoveryCode: jest.fn().mockResolvedValue(true)
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _SecuritySettings = _interopRequireDefault(require("../../src/components/setting/SecuritySettings"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('SecuritySettings', function () {
  it('permet de définir un PIN via la modale', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SecuritySettings.default, {})),
      getByTestId = _render.getByTestId,
      queryByTestId = _render.queryByTestId;
    _reactNative.fireEvent.press(getByTestId('set-pin-button'));
    var pin1 = yield (0, _reactNative.waitFor)(function () {
      return getByTestId('pin-input-1');
    });
    var pin2 = getByTestId('pin-input-2');
    _reactNative.fireEvent.changeText(pin1, '1234');
    _reactNative.fireEvent.changeText(pin2, '1234');
    _reactNative.fireEvent.press(getByTestId('pin-save'));
    yield (0, _reactNative.waitFor)(function () {
      return expect(queryByTestId('pin-input-1')).toBeNull();
    });
  }));
  it('active/désactive la biométrie', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SecuritySettings.default, {})),
      getByTestId = _render2.getByTestId;
    var toggle = yield (0, _reactNative.waitFor)(function () {
      return getByTestId('biometrics-toggle');
    });
    (0, _reactNative.fireEvent)(toggle, 'valueChange', true);
  }));
  it('génère et affiche un code de récupération', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SecuritySettings.default, {})),
      getByTestId = _render3.getByTestId,
      findByTestId = _render3.findByTestId;
    _reactNative.fireEvent.press(getByTestId('recovery-generate-button'));
    var code = yield findByTestId('recovery-code');
    expect(code.props.children).toBe('ABCD2345EFGH6789');
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJpc0VuYWJsZWQiLCJqZXN0IiwiZm4iLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsImlzQmlvbWV0cmljc0VuYWJsZWQiLCJlbmFibGVMb2NrIiwiZGlzYWJsZUxvY2siLCJzZXRQaW4iLCJzZXRCaW9tZXRyaWNzRW5hYmxlZCIsImdlbmVyYXRlUmVjb3ZlcnlDb2RlIiwic2V0UmVjb3ZlcnlDb2RlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfU2VjdXJpdHlTZXR0aW5ncyIsIl9qc3hSdW50aW1lIiwiX3JlcXVpcmUiLCJkZXNjcmliZSIsIml0IiwiZGVmYXVsdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJnZXRCeVRlc3RJZCIsInF1ZXJ5QnlUZXN0SWQiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInBpbjEiLCJ3YWl0Rm9yIiwicGluMiIsImNoYW5nZVRleHQiLCJleHBlY3QiLCJ0b0JlTnVsbCIsIl9yZW5kZXIyIiwidG9nZ2xlIiwiX3JlbmRlcjMiLCJmaW5kQnlUZXN0SWQiLCJjb2RlIiwicHJvcHMiLCJjaGlsZHJlbiIsInRvQmUiXSwic291cmNlcyI6WyJTZWN1cml0eVNldHRpbmdzLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQsIHdhaXRGb3IgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCBTZWN1cml0eVNldHRpbmdzIGZyb20gJy4uLy4uL3NyYy9jb21wb25lbnRzL3NldHRpbmcvU2VjdXJpdHlTZXR0aW5ncyc7XHJcblxyXG5qZXN0Lm1vY2soJy4uLy4uL3NyYy9zZXJ2aWNlcy9sb2NrU2VydmljZScsICgpID0+ICh7XHJcbiAgaXNFbmFibGVkOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoZmFsc2UpLFxyXG4gIGlzQmlvbWV0cmljc0VuYWJsZWQ6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShmYWxzZSksXHJcbiAgZW5hYmxlTG9jazogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpLFxyXG4gIGRpc2FibGVMb2NrOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSksXHJcbiAgc2V0UGluOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSksXHJcbiAgc2V0QmlvbWV0cmljc0VuYWJsZWQ6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh0cnVlKSxcclxuICBnZW5lcmF0ZVJlY292ZXJ5Q29kZTogamVzdC5mbigoKSA9PiAnQUJDRDIzNDVFRkdINjc4OScpLFxyXG4gIHNldFJlY292ZXJ5Q29kZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpLFxyXG59KSk7XHJcblxyXG5kZXNjcmliZSgnU2VjdXJpdHlTZXR0aW5ncycsICgpID0+IHtcclxuICBpdCgncGVybWV0IGRlIGTDqWZpbmlyIHVuIFBJTiB2aWEgbGEgbW9kYWxlJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCwgcXVlcnlCeVRlc3RJZCB9ID0gcmVuZGVyKDxTZWN1cml0eVNldHRpbmdzIC8+KTtcclxuXHJcbiAgICAvLyBvdXZyaXIgbGEgbW9kYWxlIHZpYSBib3V0b24gXCJEw6lmaW5pciB1biBQSU5cIlxyXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdzZXQtcGluLWJ1dHRvbicpKTtcclxuICAgIGNvbnN0IHBpbjEgPSBhd2FpdCB3YWl0Rm9yKCgpID0+IGdldEJ5VGVzdElkKCdwaW4taW5wdXQtMScpKTtcclxuICAgIGNvbnN0IHBpbjIgPSBnZXRCeVRlc3RJZCgncGluLWlucHV0LTInKTtcclxuXHJcbiAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChwaW4xLCAnMTIzNCcpO1xyXG4gICAgZmlyZUV2ZW50LmNoYW5nZVRleHQocGluMiwgJzEyMzQnKTtcclxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgncGluLXNhdmUnKSk7XHJcblxyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiBleHBlY3QocXVlcnlCeVRlc3RJZCgncGluLWlucHV0LTEnKSkudG9CZU51bGwoKSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdhY3RpdmUvZMOpc2FjdGl2ZSBsYSBiaW9tw6l0cmllJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxTZWN1cml0eVNldHRpbmdzIC8+KTtcclxuICAgIGNvbnN0IHRvZ2dsZSA9IGF3YWl0IHdhaXRGb3IoKCkgPT4gZ2V0QnlUZXN0SWQoJ2Jpb21ldHJpY3MtdG9nZ2xlJykpO1xyXG4gICAgZmlyZUV2ZW50KHRvZ2dsZSwgJ3ZhbHVlQ2hhbmdlJywgdHJ1ZSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdnw6luw6hyZSBldCBhZmZpY2hlIHVuIGNvZGUgZGUgcsOpY3Vww6lyYXRpb24nLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkLCBmaW5kQnlUZXN0SWQgfSA9IHJlbmRlcig8U2VjdXJpdHlTZXR0aW5ncyAvPik7XHJcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ3JlY292ZXJ5LWdlbmVyYXRlLWJ1dHRvbicpKTtcclxuICAgIGNvbnN0IGNvZGUgPSBhd2FpdCBmaW5kQnlUZXN0SWQoJ3JlY292ZXJ5LWNvZGUnKTtcclxuICAgIGV4cGVjdChjb2RlLnByb3BzLmNoaWxkcmVuKS50b0JlKCdBQkNEMjM0NUVGR0g2Nzg5Jyk7XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuXHJcbiJdLCJtYXBwaW5ncyI6IkFBSUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLGdDQUFnQyxFQUFFO0VBQUEsT0FBTztJQUNqREMsU0FBUyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxD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