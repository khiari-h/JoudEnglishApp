75ebb69d15134e7fa7e30e7a3347fce2
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkCppVersion = checkCppVersion;
exports.matchVersion = matchVersion;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _jsVersion = require("./jsVersion");
var _logger = require("../logger");
var _errors = require("../errors");
function checkCppVersion() {
  var cppVersion = global._REANIMATED_VERSION_CPP;
  if (cppVersion === undefined) {
    _logger.logger.warn(`Couldn't determine the version of the native part of Reanimated.
    See \`https://docs.swmansion.com/react-native-reanimated/docs/guides/troubleshooting#couldnt-determine-the-version-of-the-native-part-of-reanimated\` for more details.`);
    return;
  }
  var ok = matchVersion(_jsVersion.jsVersion, cppVersion);
  if (!ok) {
    throw new _errors.ReanimatedError(`Mismatch between JavaScript part and native part of Reanimated (${_jsVersion.jsVersion} vs ${cppVersion}).
    See \`https://docs.swmansion.com/react-native-reanimated/docs/guides/troubleshooting#mismatch-between-javascript-part-and-native-part-of-reanimated\` for more details.`);
  }
}
function matchVersion(version1, version2) {
  if (version1.match(/^\d+\.\d+\.\d+$/) && version2.match(/^\d+\.\d+\.\d+$/)) {
    var _version1$split = version1.split('.'),
      _version1$split2 = (0, _slicedToArray2.default)(_version1$split, 2),
      major1 = _version1$split2[0],
      minor1 = _version1$split2[1];
    var _version2$split = version2.split('.'),
      _version2$split2 = (0, _slicedToArray2.default)(_version2$split, 2),
      major2 = _version2$split2[0],
      minor2 = _version2$split2[1];
    return major1 === major2 && minor1 === minor2;
  } else {
    return version1 === version2;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY2hlY2tDcHBWZXJzaW9uIiwibWF0Y2hWZXJzaW9uIiwiX3NsaWNlZFRvQXJyYXkyIiwiX2pzVmVyc2lvbiIsIl9sb2dnZXIiLCJfZXJyb3JzIiwiY3BwVmVyc2lvbiIsImdsb2JhbCIsIl9SRUFOSU1BVEVEX1ZFUlNJT05fQ1BQIiwidW5kZWZpbmVkIiwibG9nZ2VyIiwid2FybiIsIm9rIiwianNWZXJzaW9uIiwiUmVhbmltYXRlZEVycm9yIiwidmVyc2lvbjEiLCJ2ZXJzaW9uMiIsIm1hdGNoIiwiX3ZlcnNpb24xJHNwbGl0Iiwic3BsaXQiLCJfdmVyc2lvbjEkc3BsaXQyIiwiZGVmYXVsdCIsIm1ham9yMSIsIm1pbm9yMSIsIl92ZXJzaW9uMiRzcGxpdCIsIl92ZXJzaW9uMiRzcGxpdDIiLCJtYWpvcjIiLCJtaW5vcjIiXSwic291cmNlcyI6WyJjaGVja0NwcFZlcnNpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgeyBqc1ZlcnNpb24gfSBmcm9tICcuL2pzVmVyc2lvbic7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IHsgUmVhbmltYXRlZEVycm9yIH0gZnJvbSAnLi4vZXJyb3JzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrQ3BwVmVyc2lvbigpIHtcbiAgY29uc3QgY3BwVmVyc2lvbiA9IGdsb2JhbC5fUkVBTklNQVRFRF9WRVJTSU9OX0NQUDtcbiAgaWYgKGNwcFZlcnNpb24gPT09IHVuZGVmaW5lZCkge1xuICAgIGxvZ2dlci53YXJuKFxuICAgICAgYENvdWxkbid0IGRldGVybWluZSB0aGUgdmVyc2lvbiBvZiB0aGUgbmF0aXZlIHBhcnQgb2YgUmVhbmltYXRlZC5cbiAgICBTZWUgXFxgaHR0cHM6Ly9kb2NzLnN3bWFuc2lvbi5jb20vcmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWQvZG9jcy9ndWlkZXMvdHJvdWJsZXNob290aW5nI2NvdWxkbnQtZGV0ZXJtaW5lLXRoZS12ZXJzaW9uLW9mLXRoZS1uYXRpdmUtcGFydC1vZi1yZWFuaW1hdGVkXFxgIGZvciBtb3JlIGRldGFpbHMuYFxuICAgICk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IG9rID0gbWF0Y2hWZXJzaW9uKGpzVmVyc2lvbiwgY3BwVmVyc2lvbik7XG4gIGlmICghb2spIHtcbiAgICB0aHJvdyBuZXcgUmVhbmltYXRlZEVycm9yKFxuICAgICAgYE1pc21hdGNoIGJldHdlZW4gSmF2YVNjcmlwdCBwYXJ0IGFuZCBuYXRpdmUgcGFydCBvZiBSZWFuaW1hdGVkICgke2pzVmVyc2lvbn0gdnMgJHtjcHBWZXJzaW9ufSkuXG4gICAgU2VlIFxcYGh0dHBzOi8vZG9jcy5zd21hbnNpb24uY29tL3JlYWN0LW5hdGl2ZS1yZWFuaW1hdGVkL2RvY3MvZ3VpZGVzL3Ryb3VibGVzaG9vdGluZyNtaXNtYXRjaC1iZXR3ZWVuLWphdmFzY3JpcHQtcGFydC1hbmQtbmF0aXZlLXBhcnQtb2YtcmVhbmltYXRlZFxcYCBmb3IgbW9yZSBkZXRhaWxzLmBcbiAgICApO1xuICB9XG59XG5cbi8vIFRoaXMgaXMgdXNlZCBvbmx5IGluIHRlc3QgZmlsZXMsIHRoZXJlZm9yZSBpdCBpcyByZXBvcnRlZCBieSB0cy1wcnVuZSAod2hpY2ggaXMgZGVzaXJlZClcbi8vIHRzLXBydW5lLWlnbm9yZS1uZXh0XG5leHBvcnQgZnVuY3Rpb24gbWF0Y2hWZXJzaW9uKHZlcnNpb24xOiBzdHJpbmcsIHZlcnNpb24yOiBzdHJpbmcpIHtcbiAgaWYgKHZlcnNpb24xLm1hdGNoKC9eXFxkK1xcLlxcZCtcXC5cXGQrJC8pICYmIHZlcnNpb24yLm1hdGNoKC9eXFxkK1xcLlxcZCtcXC5cXGQrJC8pKSB7XG4gICAgLy8geC55LnosIGNvbXBhcmUgb25seSBtYWpvciBhbmQgbWlub3IsIHNraXAgcGF0Y2hcbiAgICBjb25zdCBbbWFqb3IxLCBtaW5vcjFdID0gdmVyc2lvbjEuc3BsaXQoJy4nKTtcbiAgICBjb25zdCBbbWFqb3IyLCBtaW5vcjJdID0gdmVyc2lvbjIuc3BsaXQoJy4nKTtcbiAgICByZXR1cm4gbWFqb3IxID09PSBtYWpvcjIgJiYgbWlub3IxID09PSBtaW5vcjI7XG4gIH0gZWxzZSB7XG4gICAgLy8gYWxwaGEsIGJldGEgb3IgcmMsIGNvbXBhcmUgZXZlcnl0aGluZ1xuICAgIHJldHVybiB2ZXJzaW9uMSA9PT0gdmVyc2lvbjI7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFBQyxJQUFBQSxzQkFBQSxHQUFBQyxPQUFBO0FBQUFDLE1BQUEsQ0FBQUMsY0FBQSxDQUFBQyxPQUFBO0VBQUFDLEtBQUE7QUFBQTtBQUFBRCxPQUFBLENBQUFFLGVBQUEsR0FBQUEsZUFBQTtBQUFBRixPQUFBLENBQUFHLFlBQUEsR0FBQUEsWUFBQTtBQUFBLElBQUFDLGVBQUEsR0FBQVIsc0JBQUEsQ0FBQUMsT0FBQTtBQUViLElBQUFRLFVBQUEsR0FBQVIsT0FBQTtBQUNBLElBQUFTLE9BQUEsR0FBQVQsT0FBQTtBQUNBLElBQUFVLE9BQUEsR0FBQVYsT0FBQTtBQUVPLFNBQVNLLGVBQWVBLENBQUEsRUFBRztFQUNoQyxJQUFNTSxVQUFVLEdBQUdDLE1BQU0sQ0FBQ0MsdUJBQXVCO0VBQ2pELElBQUlGLFVBQVUsS0FBS0csU0FBUyxFQUFFO0lBQzVCQyxjQUFNLENBQUNDLElBQUksQ0FDVDtBQUNOLDRLQUNJLENBQUM7SUFDRDtFQUNGO0VBQ0EsSUFBTUMsRUFBRSxHQUFHWCxZQUFZLENBQUNZLG9CQUFTLEVBQUVQLFVBQVUsQ0FBQztFQUM5QyxJQUFJLENBQUNNLEVBQUUsRUFBRTtJQUNQLE1BQU0sSUFBSUUsdUJBQWUsQ0FDdkIsbUVBQW1FRCxvQkFBUyxPQUFPUCxVQUFVO0FBQ25HLDRLQUNJLENBQUM7RUFDSDtBQUNGO0FBSU8sU0FBU0wsWUFBWUEsQ0FBQ2MsUUFBZ0IsRUFBRUMsUUFBZ0IsRUFBRTtFQUMvRCxJQUFJRCxRQUFRLENBQUNFLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJRCxRQUFRLENBQUNDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO0lBRTFFLElBQUFDLGVBQUEsR0FBeUJILFFBQVEsQ0FBQ0ksS0FBSyxDQUFDLEdBQUcsQ0FBQztNQUFBQyxnQkFBQSxPQUFBbEIsZUFBQSxDQUFBbUIsT0FBQSxFQUFBSCxlQUFBO01BQXJDSSxNQUFNLEdBQUFGLGdCQUFBO01BQUVHLE1BQU0sR0FBQUgsZ0JBQUE7SUFDckIsSUFBQUksZUFBQSxHQUF5QlIsUUFBUSxDQUFDRyxLQUFLLENBQUMsR0FBRyxDQUFDO01BQUFNLGdCQUFBLE9BQUF2QixlQUFBLENBQUFtQixPQUFBLEVBQUFHLGVBQUE7TUFBckNFLE1BQU0sR0FBQUQsZ0JBQUE7TUFBRUUsTUFBTSxHQUFBRixnQkFBQTtJQUNyQixPQUFPSCxNQUFNLEtBQUtJLE1BQU0sSUFBSUgsTUFBTSxLQUFLSSxNQUFNO0VBQy9DLENBQUMsTUFBTTtJQUVMLE9BQU9aLFFBQVEsS0FBS0MsUUFBUTtFQUM5QjtBQUNGIiwiaWdub3JlTGlzdCI6W119