a29c2c43a9fc4725f5b2e684ee444746
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WorkletEventHandler = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseBase"));
var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseKey"));
var _core = require("./core");
var _PlatformChecker = require("./PlatformChecker");
var SHOULD_BE_USE_WEB = (0, _PlatformChecker.shouldBeUseWeb)();
function jsListener(eventName, handler) {
  return function (evt) {
    handler(Object.assign({}, evt.nativeEvent, {
      eventName: eventName
    }));
  };
}
var _viewTags = (0, _classPrivateFieldLooseKey2.default)("viewTags");
var _registrations = (0, _classPrivateFieldLooseKey2.default)("registrations");
var WorkletEventHandlerNative = function () {
  function WorkletEventHandlerNative(worklet, eventNames) {
    (0, _classCallCheck2.default)(this, WorkletEventHandlerNative);
    Object.defineProperty(this, _viewTags, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _registrations, {
      writable: true,
      value: void 0
    });
    this.worklet = worklet;
    this.eventNames = eventNames;
    (0, _classPrivateFieldLooseBase2.default)(this, _viewTags)[_viewTags] = new Set();
    (0, _classPrivateFieldLooseBase2.default)(this, _registrations)[_registrations] = new Map();
  }
  return (0, _createClass2.default)(WorkletEventHandlerNative, [{
    key: "updateEventHandler",
    value: function updateEventHandler(newWorklet, newEvents) {
      var _this = this;
      this.worklet = newWorklet;
      this.eventNames = newEvents;
      (0, _classPrivateFieldLooseBase2.default)(this, _registrations)[_registrations].forEach(function (registrationIDs) {
        registrationIDs.forEach(function (id) {
          return (0, _core.unregisterEventHandler)(id);
        });
      });
      Array.from((0, _classPrivateFieldLooseBase2.default)(this, _viewTags)[_viewTags]).forEach(function (tag) {
        var newRegistrations = _this.eventNames.map(function (eventName) {
          return (0, _core.registerEventHandler)(_this.worklet, eventName, tag);
        });
        (0, _classPrivateFieldLooseBase2.default)(_this, _registrations)[_registrations].set(tag, newRegistrations);
      });
    }
  }, {
    key: "registerForEvents",
    value: function registerForEvents(viewTag, fallbackEventName) {
      var _this2 = this;
      (0, _classPrivateFieldLooseBase2.default)(this, _viewTags)[_viewTags].add(viewTag);
      var newRegistrations = this.eventNames.map(function (eventName) {
        return (0, _core.registerEventHandler)(_this2.worklet, eventName, viewTag);
      });
      (0, _classPrivateFieldLooseBase2.default)(this, _registrations)[_registrations].set(viewTag, newRegistrations);
      if (this.eventNames.length === 0 && fallbackEventName) {
        var newRegistration = (0, _core.registerEventHandler)(this.worklet, fallbackEventName, viewTag);
        (0, _classPrivateFieldLooseBase2.default)(this, _registrations)[_registrations].set(viewTag, [newRegistration]);
      }
    }
  }, {
    key: "unregisterFromEvents",
    value: function unregisterFromEvents(viewTag) {
      var _classPrivateFieldLoo;
      (0, _classPrivateFieldLooseBase2.default)(this, _viewTags)[_viewTags].delete(viewTag);
      (_classPrivateFieldLoo = (0, _classPrivateFieldLooseBase2.default)(this, _registrations)[_registrations].get(viewTag)) == null || _classPrivateFieldLoo.forEach(function (id) {
        (0, _core.unregisterEventHandler)(id);
      });
      (0, _classPrivateFieldLooseBase2.default)(this, _registrations)[_registrations].delete(viewTag);
    }
  }]);
}();
var WorkletEventHandlerWeb = function () {
  function WorkletEventHandlerWeb(worklet) {
    var eventNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    (0, _classCallCheck2.default)(this, WorkletEventHandlerWeb);
    this.worklet = worklet;
    this.eventNames = eventNames;
    this.listeners = {};
    this.setupWebListeners();
  }
  return (0, _createClass2.default)(WorkletEventHandlerWeb, [{
    key: "setupWebListeners",
    value: function setupWebListeners() {
      var _this3 = this;
      this.listeners = {};
      this.eventNames.forEach(function (eventName) {
        _this3.listeners[eventName] = jsListener(eventName, _this3.worklet);
      });
    }
  }, {
    key: "updateEventHandler",
    value: function updateEventHandler(newWorklet, newEvents) {
      this.worklet = newWorklet;
      this.eventNames = newEvents;
      this.setupWebListeners();
    }
  }, {
    key: "registerForEvents",
    value: function registerForEvents(_viewTag, _fallbackEventName) {}
  }, {
    key: "unregisterFromEvents",
    value: function unregisterFromEvents(_viewTag) {}
  }]);
}();
var WorkletEventHandler = exports.WorkletEventHandler = SHOULD_BE_USE_WEB ? WorkletEventHandlerWeb : WorkletEventHandlerNative;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiV29ya2xldEV2ZW50SGFuZGxlciIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlMiIsIl9jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5MiIsIl9jb3JlIiwiX1BsYXRmb3JtQ2hlY2tlciIsIlNIT1VMRF9CRV9VU0VfV0VCIiwic2hvdWxkQmVVc2VXZWIiLCJqc0xpc3RlbmVyIiwiZXZlbnROYW1lIiwiaGFuZGxlciIsImV2dCIsImFzc2lnbiIsIm5hdGl2ZUV2ZW50IiwiX3ZpZXdUYWdzIiwiZGVmYXVsdCIsIl9yZWdpc3RyYXRpb25zIiwiV29ya2xldEV2ZW50SGFuZGxlck5hdGl2ZSIsIndvcmtsZXQiLCJldmVudE5hbWVzIiwid3JpdGFibGUiLCJTZXQiLCJNYXAiLCJrZXkiLCJ1cGRhdGVFdmVudEhhbmRsZXIiLCJuZXdXb3JrbGV0IiwibmV3RXZlbnRzIiwiX3RoaXMiLCJmb3JFYWNoIiwicmVnaXN0cmF0aW9uSURzIiwiaWQiLCJ1bnJlZ2lzdGVyRXZlbnRIYW5kbGVyIiwiQXJyYXkiLCJmcm9tIiwidGFnIiwibmV3UmVnaXN0cmF0aW9ucyIsIm1hcCIsInJlZ2lzdGVyRXZlbnRIYW5kbGVyIiwic2V0IiwicmVnaXN0ZXJGb3JFdmVudHMiLCJ2aWV3VGFnIiwiZmFsbGJhY2tFdmVudE5hbWUiLCJfdGhpczIiLCJhZGQiLCJsZW5ndGgiLCJuZXdSZWdpc3RyYXRpb24iLCJ1bnJlZ2lzdGVyRnJvbUV2ZW50cyIsIl9jbGFzc1ByaXZhdGVGaWVsZExvbyIsImRlbGV0ZSIsImdldCIsIldvcmtsZXRFdmVudEhhbmRsZXJXZWIiLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJsaXN0ZW5lcnMiLCJzZXR1cFdlYkxpc3RlbmVycyIsIl90aGlzMyIsIl92aWV3VGFnIiwiX2ZhbGxiYWNrRXZlbnROYW1lIl0sInNvdXJjZXMiOlsiV29ya2xldEV2ZW50SGFuZGxlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5pbXBvcnQgdHlwZSB7IE5hdGl2ZVN5bnRoZXRpY0V2ZW50IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IHJlZ2lzdGVyRXZlbnRIYW5kbGVyLCB1bnJlZ2lzdGVyRXZlbnRIYW5kbGVyIH0gZnJvbSAnLi9jb3JlJztcbmltcG9ydCB0eXBlIHtcbiAgRXZlbnRQYXlsb2FkLFxuICBSZWFuaW1hdGVkRXZlbnQsXG4gIElXb3JrbGV0RXZlbnRIYW5kbGVyLFxufSBmcm9tICcuL2hvb2svY29tbW9uVHlwZXMnO1xuaW1wb3J0IHsgc2hvdWxkQmVVc2VXZWIgfSBmcm9tICcuL1BsYXRmb3JtQ2hlY2tlcic7XG5cbmNvbnN0IFNIT1VMRF9CRV9VU0VfV0VCID0gc2hvdWxkQmVVc2VXZWIoKTtcblxudHlwZSBKU0V2ZW50PEV2ZW50IGV4dGVuZHMgb2JqZWN0PiA9IE5hdGl2ZVN5bnRoZXRpY0V2ZW50PEV2ZW50UGF5bG9hZDxFdmVudD4+O1xuXG4vLyBJbiBKUyBpbXBsZW1lbnRhdGlvbiAoZS5nLiBmb3Igd2ViKSB3ZSBkb24ndCB1c2UgUmVhbmltYXRlZCdzXG4vLyBldmVudCBlbWl0dGVyLCB0aGVyZWZvcmUgd2UgaGF2ZSB0byBoYW5kbGUgaGVyZVxuLy8gdGhlIGV2ZW50IHRoYXQgY2FtZSBmcm9tIFJlYWN0IE5hdGl2ZSBhbmQgY29udmVydCBpdC5cbmZ1bmN0aW9uIGpzTGlzdGVuZXI8RXZlbnQgZXh0ZW5kcyBvYmplY3Q+KFxuICBldmVudE5hbWU6IHN0cmluZyxcbiAgaGFuZGxlcjogKGV2ZW50OiBSZWFuaW1hdGVkRXZlbnQ8RXZlbnQ+KSA9PiB2b2lkXG4pIHtcbiAgcmV0dXJuIChldnQ6IEpTRXZlbnQ8RXZlbnQ+KSA9PiB7XG4gICAgaGFuZGxlcih7IC4uLmV2dC5uYXRpdmVFdmVudCwgZXZlbnROYW1lIH0gYXMgUmVhbmltYXRlZEV2ZW50PEV2ZW50Pik7XG4gIH07XG59XG5cbmNsYXNzIFdvcmtsZXRFdmVudEhhbmRsZXJOYXRpdmU8RXZlbnQgZXh0ZW5kcyBvYmplY3Q+XG4gIGltcGxlbWVudHMgSVdvcmtsZXRFdmVudEhhbmRsZXI8RXZlbnQ+XG57XG4gIGV2ZW50TmFtZXM6IHN0cmluZ1tdO1xuICB3b3JrbGV0OiAoZXZlbnQ6IFJlYW5pbWF0ZWRFdmVudDxFdmVudD4pID0+IHZvaWQ7XG4gICN2aWV3VGFnczogU2V0PG51bWJlcj47XG4gICNyZWdpc3RyYXRpb25zOiBNYXA8bnVtYmVyLCBudW1iZXJbXT47IC8vIGtleXMgYXJlIHZpZXdUYWdzLCB2YWx1ZXMgYXJlIGFycmF5cyBvZiByZWdpc3RyYXRpb24gSUQncyBmb3IgZWFjaCB2aWV3VGFnXG4gIGNvbnN0cnVjdG9yKFxuICAgIHdvcmtsZXQ6IChldmVudDogUmVhbmltYXRlZEV2ZW50PEV2ZW50PikgPT4gdm9pZCxcbiAgICBldmVudE5hbWVzOiBzdHJpbmdbXVxuICApIHtcbiAgICB0aGlzLndvcmtsZXQgPSB3b3JrbGV0O1xuICAgIHRoaXMuZXZlbnROYW1lcyA9IGV2ZW50TmFtZXM7XG4gICAgdGhpcy4jdmlld1RhZ3MgPSBuZXcgU2V0PG51bWJlcj4oKTtcbiAgICB0aGlzLiNyZWdpc3RyYXRpb25zID0gbmV3IE1hcDxudW1iZXIsIG51bWJlcltdPigpO1xuICB9XG5cbiAgdXBkYXRlRXZlbnRIYW5kbGVyKFxuICAgIG5ld1dvcmtsZXQ6IChldmVudDogUmVhbmltYXRlZEV2ZW50PEV2ZW50PikgPT4gdm9pZCxcbiAgICBuZXdFdmVudHM6IHN0cmluZ1tdXG4gICk6IHZvaWQge1xuICAgIC8vIFVwZGF0ZSB3b3JrbGV0IGFuZCBldmVudCBuYW1lc1xuICAgIHRoaXMud29ya2xldCA9IG5ld1dvcmtsZXQ7XG4gICAgdGhpcy5ldmVudE5hbWVzID0gbmV3RXZlbnRzO1xuXG4gICAgLy8gRGV0YWNoIGFsbCBldmVudHNcbiAgICB0aGlzLiNyZWdpc3RyYXRpb25zLmZvckVhY2goKHJlZ2lzdHJhdGlvbklEcykgPT4ge1xuICAgICAgcmVnaXN0cmF0aW9uSURzLmZvckVhY2goKGlkKSA9PiB1bnJlZ2lzdGVyRXZlbnRIYW5kbGVyKGlkKSk7XG4gICAgICAvLyBObyBuZWVkIHRvIHJlbW92ZSByZWdpc3RyYXRpb25JRHMgZnJvbSBtYXAsIHNpbmNlIGl0IGdldHMgb3ZlcndyaXR0ZW4gd2hlbiBhdHRhY2hpbmdcbiAgICB9KTtcblxuICAgIC8vIEF0dGFjaCBuZXcgZXZlbnRzIHdpdGggbmV3IHdvcmtsZXRcbiAgICBBcnJheS5mcm9tKHRoaXMuI3ZpZXdUYWdzKS5mb3JFYWNoKCh0YWcpID0+IHtcbiAgICAgIGNvbnN0IG5ld1JlZ2lzdHJhdGlvbnMgPSB0aGlzLmV2ZW50TmFtZXMubWFwKChldmVudE5hbWUpID0+XG4gICAgICAgIHJlZ2lzdGVyRXZlbnRIYW5kbGVyKHRoaXMud29ya2xldCwgZXZlbnROYW1lLCB0YWcpXG4gICAgICApO1xuICAgICAgdGhpcy4jcmVnaXN0cmF0aW9ucy5zZXQodGFnLCBuZXdSZWdpc3RyYXRpb25zKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlZ2lzdGVyRm9yRXZlbnRzKHZpZXdUYWc6IG51bWJlciwgZmFsbGJhY2tFdmVudE5hbWU/OiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLiN2aWV3VGFncy5hZGQodmlld1RhZyk7XG5cbiAgICBjb25zdCBuZXdSZWdpc3RyYXRpb25zID0gdGhpcy5ldmVudE5hbWVzLm1hcCgoZXZlbnROYW1lKSA9PlxuICAgICAgcmVnaXN0ZXJFdmVudEhhbmRsZXIodGhpcy53b3JrbGV0LCBldmVudE5hbWUsIHZpZXdUYWcpXG4gICAgKTtcbiAgICB0aGlzLiNyZWdpc3RyYXRpb25zLnNldCh2aWV3VGFnLCBuZXdSZWdpc3RyYXRpb25zKTtcblxuICAgIGlmICh0aGlzLmV2ZW50TmFtZXMubGVuZ3RoID09PSAwICYmIGZhbGxiYWNrRXZlbnROYW1lKSB7XG4gICAgICBjb25zdCBuZXdSZWdpc3RyYXRpb24gPSByZWdpc3RlckV2ZW50SGFuZGxlcihcbiAgICAgICAgdGhpcy53b3JrbGV0LFxuICAgICAgICBmYWxsYmFja0V2ZW50TmFtZSxcbiAgICAgICAgdmlld1RhZ1xuICAgICAgKTtcbiAgICAgIHRoaXMuI3JlZ2lzdHJhdGlvbnMuc2V0KHZpZXdUYWcsIFtuZXdSZWdpc3RyYXRpb25dKTtcbiAgICB9XG4gIH1cblxuICB1bnJlZ2lzdGVyRnJvbUV2ZW50cyh2aWV3VGFnOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLiN2aWV3VGFncy5kZWxldGUodmlld1RhZyk7XG4gICAgdGhpcy4jcmVnaXN0cmF0aW9ucy5nZXQodmlld1RhZyk/LmZvckVhY2goKGlkKSA9PiB7XG4gICAgICB1bnJlZ2lzdGVyRXZlbnRIYW5kbGVyKGlkKTtcbiAgICB9KTtcbiAgICB0aGlzLiNyZWdpc3RyYXRpb25zLmRlbGV0ZSh2aWV3VGFnKTtcbiAgfVxufVxuXG5jbGFzcyBXb3JrbGV0RXZlbnRIYW5kbGVyV2ViPEV2ZW50IGV4dGVuZHMgb2JqZWN0PlxuICBpbXBsZW1lbnRzIElXb3JrbGV0RXZlbnRIYW5kbGVyPEV2ZW50Plxue1xuICBldmVudE5hbWVzOiBzdHJpbmdbXTtcbiAgbGlzdGVuZXJzOlxuICAgIHwgUmVjb3JkPHN0cmluZywgKGV2ZW50OiBSZWFuaW1hdGVkRXZlbnQ8UmVhbmltYXRlZEV2ZW50PEV2ZW50Pj4pID0+IHZvaWQ+XG4gICAgfCBSZWNvcmQ8c3RyaW5nLCAoZXZlbnQ6IEpTRXZlbnQ8RXZlbnQ+KSA9PiB2b2lkPjtcblxuICB3b3JrbGV0OiAoZXZlbnQ6IFJlYW5pbWF0ZWRFdmVudDxFdmVudD4pID0+IHZvaWQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgd29ya2xldDogKGV2ZW50OiBSZWFuaW1hdGVkRXZlbnQ8RXZlbnQ+KSA9PiB2b2lkLFxuICAgIGV2ZW50TmFtZXM6IHN0cmluZ1tdID0gW11cbiAgKSB7XG4gICAgdGhpcy53b3JrbGV0ID0gd29ya2xldDtcbiAgICB0aGlzLmV2ZW50TmFtZXMgPSBldmVudE5hbWVzO1xuICAgIHRoaXMubGlzdGVuZXJzID0ge307XG4gICAgdGhpcy5zZXR1cFdlYkxpc3RlbmVycygpO1xuICB9XG5cbiAgc2V0dXBXZWJMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMgPSB7fTtcbiAgICB0aGlzLmV2ZW50TmFtZXMuZm9yRWFjaCgoZXZlbnROYW1lKSA9PiB7XG4gICAgICB0aGlzLmxpc3RlbmVyc1tldmVudE5hbWVdID0ganNMaXN0ZW5lcihldmVudE5hbWUsIHRoaXMud29ya2xldCk7XG4gICAgfSk7XG4gIH1cblxuICB1cGRhdGVFdmVudEhhbmRsZXIoXG4gICAgbmV3V29ya2xldDogKGV2ZW50OiBSZWFuaW1hdGVkRXZlbnQ8RXZlbnQ+KSA9PiB2b2lkLFxuICAgIG5ld0V2ZW50czogc3RyaW5nW11cbiAgKTogdm9pZCB7XG4gICAgLy8gVXBkYXRlIHdvcmtsZXQgYW5kIGV2ZW50IG5hbWVzXG4gICAgdGhpcy53b3JrbGV0ID0gbmV3V29ya2xldDtcbiAgICB0aGlzLmV2ZW50TmFtZXMgPSBuZXdFdmVudHM7XG4gICAgdGhpcy5zZXR1cFdlYkxpc3RlbmVycygpO1xuICB9XG5cbiAgcmVnaXN0ZXJGb3JFdmVudHMoX3ZpZXdUYWc6IG51bWJlciwgX2ZhbGxiYWNrRXZlbnROYW1lPzogc3RyaW5nKTogdm9pZCB7XG4gICAgLy8gbm9vcFxuICB9XG5cbiAgdW5yZWdpc3RlckZyb21FdmVudHMoX3ZpZXdUYWc6IG51bWJlcik6IHZvaWQge1xuICAgIC8vIG5vb3BcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgV29ya2xldEV2ZW50SGFuZGxlciA9IFNIT1VMRF9CRV9VU0VfV0VCXG4gID8gV29ya2xldEV2ZW50SGFuZGxlcldlYlxuICA6IFdvcmtsZXRFdmVudEhhbmRsZXJOYXRpdmU7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQUMsSUFBQUEsc0JBQUEsR0FBQUMsT0FBQTtBQUFBQyxNQUFBLENB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