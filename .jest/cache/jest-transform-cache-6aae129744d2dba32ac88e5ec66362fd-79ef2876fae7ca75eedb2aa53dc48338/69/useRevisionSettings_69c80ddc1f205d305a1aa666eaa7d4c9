036aaee7ddf053fdeca00c61da85d9fe
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRevisionSettings = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var REVISION_STORAGE_KEY = 'revision_preferences';
var useRevisionSettings = exports.useRevisionSettings = function useRevisionSettings() {
  var _useState = (0, _react.useState)({
      isDisabled: false,
      nextRevisionAt: 50,
      frequency: 50,
      questionsCount: 10
    }),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    preferences = _useState2[0],
    setPreferences = _useState2[1];
  var _useState3 = (0, _react.useState)(true),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isLoading = _useState4[0],
    setIsLoading = _useState4[1];
  var handleStorageError = function handleStorageError(error, operation) {
    var fallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    console.warn(`Storage error in ${operation}:`, error);
    return fallback;
  };
  var loadPreferences = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* () {
      try {
        var saved = yield _asyncStorage.default.getItem(REVISION_STORAGE_KEY);
        if (saved) {
          var prefs = JSON.parse(saved);
          setPreferences({
            isDisabled: prefs.isDisabled || false,
            nextRevisionAt: prefs.nextRevisionAt || 50,
            frequency: prefs.frequency || 50,
            questionsCount: prefs.questionsCount || 10
          });
        }
      } catch (error) {
        handleStorageError(error, 'loadPreferences');
      } finally {
        setIsLoading(false);
      }
    });
    return function loadPreferences() {
      return _ref.apply(this, arguments);
    };
  }();
  (0, _react.useEffect)(function () {
    loadPreferences();
  }, []);
  var updatePreferences = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (newPrefs) {
      try {
        var updatedPrefs = Object.assign({}, preferences, newPrefs, {
          lastUpdate: Date.now()
        });
        yield _asyncStorage.default.setItem(REVISION_STORAGE_KEY, JSON.stringify(updatedPrefs));
        setPreferences(updatedPrefs);
        try {
          require('../utils/eventBus').emit('settings-updated', updatedPrefs);
        } catch (eventBusError) {
          console.warn('Event bus error (non-critical):', eventBusError);
        }
        return true;
      } catch (error) {
        return handleStorageError(error, 'updatePreferences', false);
      }
    });
    return function updatePreferences(_x) {
      return _ref2.apply(this, arguments);
    };
  }();
  var enableRevisions = function enableRevisions() {
    var frequency = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;
    var questionsCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
    return updatePreferences({
      isDisabled: false,
      frequency: frequency,
      questionsCount: questionsCount,
      nextRevisionAt: frequency
    });
  };
  var disableRevisions = function disableRevisions() {
    return updatePreferences({
      isDisabled: true
    });
  };
  var updateFrequency = function updateFrequency(newFrequency) {
    return updatePreferences({
      frequency: newFrequency,
      nextRevisionAt: newFrequency
    });
  };
  var resetToNextTarget = function resetToNextTarget(wordsLearned) {
    var newTarget = wordsLearned + preferences.frequency;
    return updatePreferences({
      nextRevisionAt: newTarget
    });
  };
  return {
    preferences: preferences,
    isLoading: isLoading,
    enableRevisions: enableRevisions,
    disableRevisions: disableRevisions,
    updateFrequency: updateFrequency,
    updatePreferences: updatePreferences,
    resetToNextTarget: resetToNextTarget
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,