{"version":3,"names":["_asyncStorage","_interopRequireDefault","require","_vocabularyDataHelper","_readingDataHelper","_grammarDataHelper","_phrasesDataHelper","_conversationDataHelper","_wordGamesDataHelper","_constants","calculateVocabularyProgress","exports","_ref","_asyncToGenerator2","default","level","storageKey","savedData","AsyncStorage","getItem","data","JSON","parse","completedWords","vocabularyData","getVocabularyData","totalWords","exercises","reduce","sum","cat","_cat$words","words","length","completedCount","Object","values","forEach","categoryWords","Array","isArray","percentage","Math","round","error","_x","apply","arguments","calculateGrammarProgress","_ref2","console","log","grammarData","getGrammarData","completedExercises","totalExercises","rule","_rule$exercises","exerciseIndices","index","_x2","calculateReadingProgress","_ref3","keys","completedQuestions","readingData","getReadingData","totalQuestions","ex","_ex$questions","questionsCount","questions","title","questionIndices","min","stack","handleProgressError","_x3","calculatePhrasesProgress","_ref4","_phrasesData$phrases","_phrasesData$categori","_phrasesData$phrases2","completedPhrases","phrasesData","getPhrasesData","phrases","categories","totalPhrases","phraseIndices","_x4","calculateConversationsProgress","_ref5","completedScenarios","conversationData","getConversationData","totalScenarios","scenarioData","undefined","_x5","calculateWordGamesProgress","_ref6","_wordGamesData$games","completedGames","wordGamesData","getWordGamesData","games","totalGames","filter","game","completed","_x6","calculateAllProgress","_ref7","allKeys","getAllKeys","progressKeys","key","includes","warn","newLevelProgress","newExerciseProgress","levels","exerciseCalculators","vocabulary","grammar","reading","conversations","wordGames","Promise","all","map","_ref8","availableExercises","results","_ref9","exerciseType","calculator","value","e","_x8","levelTotal","levelCompleted","_ref0","_x7","levelProgress","exerciseProgress","getLevelProgress","getExerciseProgress","_exerciseProgress$exe","_exerciseProgress$exe2","progress","finalProgress","hasProgress","functionName","defaultValue"],"sources":["calculateProgress.js"],"sourcesContent":["// src/utils/progress/calculateProgress.js - UTILS CENTRALISÉS POUR LE CALCUL DE PROGRESSION\r\n\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { getVocabularyData } from '../vocabulary/vocabularyDataHelper';\r\nimport { getReadingData } from '../reading/readingDataHelper';\r\nimport { getGrammarData } from '../grammar/grammarDataHelper';\r\nimport { getPhrasesData } from '../phrases/phrasesDataHelper';\r\nimport { getConversationData } from '../conversation/conversationDataHelper';\r\nimport { getWordGamesData } from '../wordGames/wordGamesDataHelper';\r\nimport { BONUS_EXERCISES } from '../constants'; // ✅ AJOUT de l'import\r\n\r\n// =================== VOCABULAIRE ===================\r\n\r\n\r\n// =================== VOCABULAIRE - LOGIQUE EXISTANTE ===================\r\n\r\nexport const calculateVocabularyProgress = async (level) => {\r\n  try {\r\n    const storageKey = `vocabulary_${level}_classic`;\r\n    const savedData = await AsyncStorage.getItem(storageKey);\r\n    \r\n    if (!savedData) {\r\n      return 0;\r\n    }\r\n    \r\n    const data = JSON.parse(savedData);\r\n    const completedWords = data.completedWords || {};\r\n    \r\n    const vocabularyData = getVocabularyData(level, 'classic');\r\n    if (!vocabularyData) {\r\n      return 0;\r\n    }\r\n    \r\n    const totalWords = vocabularyData.exercises.reduce((sum, cat) => \r\n      sum + (cat.words?.length || 0), 0\r\n    );\r\n    \r\n    let completedCount = 0;\r\n    Object.values(completedWords).forEach(categoryWords => {\r\n      if (Array.isArray(categoryWords)) {\r\n        completedCount += categoryWords.length;\r\n      }\r\n    });\r\n    \r\n    const percentage = totalWords > 0 ? (completedCount / totalWords) * 100 : 0;\r\n    return Math.round(percentage);\r\n    \r\n  } catch (error) {\r\n    return 0;\r\n  }\r\n};\r\n\r\n// GRAMMAR\r\nexport const calculateGrammarProgress = async (level) => {\r\n  try {\r\n    const storageKey = `grammar_${level}`;\r\n    \r\n    // 🔍 DEBUG : Vérifier AsyncStorage\r\n    const savedData = await AsyncStorage.getItem(storageKey);\r\n    console.log('🔍 GRAMMAR COMPARISON:', {\r\n      storageKey,\r\n      savedData,\r\n      grammarData: getGrammarData(level),\r\n      completedExercises: savedData ? JSON.parse(savedData).completedExercises : null\r\n    });\r\n    \r\n    if (!savedData) {\r\n      return 0;\r\n    }\r\n    \r\n    const data = JSON.parse(savedData);\r\n    const completedExercises = data.completedExercises || {};\r\n    \r\n    const grammarData = getGrammarData(level);\r\n    if (!grammarData) {\r\n      return 0;\r\n    }\r\n    \r\n    // ✅ CORRIGÉ : grammarData est un tableau de règles, pas un objet avec exercises\r\n    const totalExercises = grammarData.reduce((sum, rule) => \r\n      sum + (rule.exercises?.length || 0), 0\r\n    );\r\n    \r\n    let completedCount = 0;\r\n    Object.values(completedExercises).forEach((exerciseIndices, index) => {\r\n      if (Array.isArray(exerciseIndices)) {\r\n        completedCount += exerciseIndices.length;\r\n      }\r\n    });\r\n    \r\n    // 🔍 DEBUG : Vérifier les valeurs\r\n    console.log('🔍 GRAMMAR DEBUG:', {\r\n      totalExercises,\r\n      completedCount,\r\n      percentage: totalExercises > 0 ? (completedCount / totalExercises) * 100 : 0\r\n    });\r\n    \r\n    const percentage = totalExercises > 0 ? (completedCount / totalExercises) * 100 : 0;\r\n    return Math.round(percentage);\r\n  } catch (error) {\r\n    return 0;\r\n  }\r\n};\r\n\r\n// READING\r\nexport const calculateReadingProgress = async (level) => {\r\n  console.log('🚨 DÉBUT calculateReadingProgress pour niveau:', level);\r\n  try {\r\n    const storageKey = `reading_progress_${level}`;\r\n    console.log('🚨 StorageKey Reading:', storageKey);\r\n    \r\n    // 🔍 DEBUG : Vérifier AsyncStorage\r\n    const savedData = await AsyncStorage.getItem(storageKey);\r\n    console.log('🔍 DEBUG - AsyncStorage.getItem result:', savedData);\r\n    \r\n    if (!savedData) {\r\n      console.log('🚨 Aucune données sauvegardées pour Reading niveau', level);\r\n      return 0;\r\n    }\r\n    \r\n    const data = JSON.parse(savedData);\r\n    console.log('🔍 DEBUG - Données parsées depuis AsyncStorage:', data);\r\n    console.log('🔍 DEBUG - Structure des données:', Object.keys(data));\r\n    \r\n    const completedQuestions = data.completedQuestions || {};\r\n    console.log('🔍 DEBUG - completedQuestions extrait:', completedQuestions);\r\n    console.log('🔍 DEBUG - Type de completedQuestions:', typeof completedQuestions);\r\n    console.log('🔍 DEBUG - Nombre de clés dans completedQuestions:', Object.keys(completedQuestions).length);\r\n    \r\n    // ✅ CORRIGÉ : Récupérer les VRAIES données comme useVocabulary.js\r\n    console.log('🔍 DEBUG - Appel getReadingData avec level:', level);\r\n    const readingData = getReadingData(level);\r\n    console.log('🔍 DEBUG - readingData reçu:', readingData);\r\n    console.log('🔍 DEBUG - Type de readingData:', typeof readingData);\r\n    console.log('🔍 DEBUG - Clés de readingData:', readingData ? Object.keys(readingData) : 'null');\r\n    \r\n    if (!readingData) {\r\n      return 0;\r\n    }\r\n    \r\n    console.log('🔍 DEBUG - readingData.exercises:', readingData.exercises);\r\n    console.log('🔍 DEBUG - Nombre d\\'exercices:', readingData.exercises.length);\r\n    \r\n    // Calcul réel du total comme dans readingStats.js\r\n    const totalQuestions = readingData.exercises.reduce((sum, ex) => {\r\n      const questionsCount = ex.questions?.length || 0;\r\n      console.log(`🔍 DEBUG - Exercice \"${ex.title}\": ${questionsCount} questions`);\r\n      return sum + questionsCount;\r\n    }, 0);\r\n    \r\n    console.log('🔍 DEBUG - Total questions calculé:', totalQuestions);\r\n    \r\n    // Compter questions complétées\r\n    let completedCount = 0;\r\n    Object.values(completedQuestions).forEach((questionIndices, index) => {\r\n      if (Array.isArray(questionIndices)) {\r\n        console.log(`🔍 DEBUG - Exercice ${index}: ${questionIndices.length} questions complétées`);\r\n        completedCount += questionIndices.length;\r\n      } else {\r\n        console.log(`🔍 DEBUG - Exercice ${index}: questionIndices n'est pas un array:`, questionIndices);\r\n      }\r\n    });\r\n    \r\n    console.log('🔍 DEBUG - Total questions complétées:', completedCount);\r\n    \r\n    // Calcul correct au lieu de constante bidon\r\n    const percentage = totalQuestions > 0 ? (completedCount / totalQuestions) * 100 : 0;\r\n    console.log('🔍 DEBUG - Pourcentage calculé:', percentage);\r\n    \r\n    // 🔍 DEBUG TEMPORAIRE\r\n    console.log(`🔍 DEBUG Reading Niveau ${level}:`);\r\n    console.log(`   - Clé stockage: ${storageKey}`);\r\n    console.log(`   - Données sauvegardées:`, data);\r\n    console.log(`   - Questions complétées:`, completedQuestions);\r\n    console.log(`   - Total questions: ${totalQuestions}`);\r\n    console.log(`   - Questions complétées: ${completedCount}`);\r\n    console.log(`   - Pourcentage: ${percentage}%`);\r\n    \r\n    return Math.min(Math.round(percentage), 100);\r\n    \r\n  } catch (error) {\r\n    console.error('🚨 ERREUR dans calculateReadingProgress:', error);\r\n    console.error('🔍 DEBUG - Stack trace complet:', error.stack);\r\n    return handleProgressError(error, 'calculateReadingProgress', level, 0);\r\n  }\r\n};\r\n\r\n// PHRASES\r\nexport const calculatePhrasesProgress = async (level) => {\r\n  console.log('🚨 DÉBUT calculatePhrasesProgress pour niveau:', level);\r\n  try {\r\n    const storageKey = `phrases_${level}`;\r\n    console.log('🚨 StorageKey Phrases:', storageKey);\r\n    \r\n    // 🔍 DEBUG : Vérifier AsyncStorage\r\n    const savedData = await AsyncStorage.getItem(storageKey);\r\n    console.log('🔍 DEBUG - AsyncStorage.getItem result:', savedData);\r\n    \r\n    if (!savedData) {\r\n      console.log('🚨 Aucune données sauvegardées pour Phrases niveau', level);\r\n      return 0;\r\n    }\r\n    \r\n    const data = JSON.parse(savedData);\r\n    console.log('🔍 DEBUG - Données parsées depuis AsyncStorage:', data);\r\n    console.log('🔍 DEBUG - Structure des données:', Object.keys(data));\r\n    \r\n    // ✅ CORRIGÉ : Récupérer completedPhrases (objet) au lieu de completedCount (nombre)\r\n    const completedPhrases = data.completedPhrases || {};\r\n    console.log('🔍 DEBUG - completedPhrases extrait:', completedPhrases);\r\n    \r\n    // ✅ CORRIGÉ : Récupérer les VRAIES données comme les autres modules\r\n    const phrasesData = getPhrasesData(level);\r\n    console.log('🔍 DEBUG - getPhrasesData result:', phrasesData);\r\n    console.log('🔍 DEBUG - Structure phrasesData:', Object.keys(phrasesData || {}));\r\n    \r\n    if (!phrasesData) {\r\n      return 0;\r\n    }\r\n    \r\n    console.log('🔍 DEBUG - Nombre de phrases/catégories:', phrasesData.phrases?.length || phrasesData.categories?.length);\r\n    \r\n    // ✅ CORRIGÉ : Phrases est un tableau direct, pas des catégories avec phrases\r\n    const totalPhrases = phrasesData.phrases?.length || 0;\r\n    console.log('🔍 DEBUG - Total phrases calculé:', totalPhrases);\r\n    \r\n    // Compter phrases complétées\r\n    let completedCount = 0;\r\n    Object.values(completedPhrases).forEach((phraseIndices, index) => {\r\n      if (Array.isArray(phraseIndices)) {\r\n        console.log(`🔍 DEBUG - Catégorie ${index}: ${phraseIndices.length} phrases complétées`);\r\n        completedCount += phraseIndices.length;\r\n      } else {\r\n        console.log(`🔍 DEBUG - Catégorie ${index}: phraseIndices n'est pas un array:`, phraseIndices);\r\n      }\r\n    });\r\n    \r\n    console.log('🔍 DEBUG - Total phrases complétées:', completedCount);\r\n    \r\n    // Calcul correct au lieu de constante bidon\r\n    const percentage = totalPhrases > 0 ? (completedCount / totalPhrases) * 100 : 0;\r\n    console.log('🔍 DEBUG - Pourcentage final phrases (calcul manuel):', percentage);\r\n    \r\n    return Math.round(percentage);\r\n  } catch (error) {\r\n    console.error('🚨 Erreur dans calculatePhrasesProgress:', error);\r\n    return 0;\r\n  }\r\n};\r\n\r\n// CONVERSATIONS\r\nexport const calculateConversationsProgress = async (level) => {\r\n  console.log('🚨 DÉBUT calculateConversationsProgress pour niveau:', level);\r\n  try {\r\n    const storageKey = `conversation_${level}`;\r\n    console.log('🚨 StorageKey Conversations:', storageKey);\r\n    \r\n    // 🔍 DEBUG : Vérifier AsyncStorage\r\n    const savedData = await AsyncStorage.getItem(storageKey);\r\n    console.log('🔍 DEBUG - AsyncStorage.getItem result:', savedData);\r\n    \r\n    if (!savedData) {\r\n      console.log('🚨 Aucune données sauvegardées pour Conversations niveau', level);\r\n      return 0;\r\n    }\r\n    \r\n    const data = JSON.parse(savedData);\r\n    console.log('🔍 DEBUG - Données parsées depuis AsyncStorage:', data);\r\n    console.log('🔍 DEBUG - Structure des données:', Object.keys(data));\r\n    \r\n    // ✅ CORRIGÉ : Récupérer completedScenarios (objet) au lieu de completedCount (nombre)\r\n    const completedScenarios = data.completedScenarios || {};\r\n    console.log('🔍 DEBUG - completedScenarios extrait:', completedScenarios);\r\n    \r\n    // ✅ CORRIGÉ : Récupérer les VRAIES données comme les autres modules\r\n    const conversationData = getConversationData(level);\r\n    console.log('🔍 DEBUG - getConversationData result:', conversationData);\r\n    console.log('🔍 DEBUG - Structure conversationData:', Object.keys(conversationData || {}));\r\n    \r\n    if (!conversationData) {\r\n      return 0;\r\n    }\r\n    \r\n    console.log('🔍 DEBUG - Nombre de scénarios:', conversationData.exercises.length);\r\n    \r\n// ✅ CORRIGÉ : CALCUL MANUEL DIRECT - Compter les scénarios !\r\nconst totalScenarios = conversationData.exercises.length;\r\nconsole.log('🔍 DEBUG - Total scénarios calculé:', totalScenarios);\r\n\r\n// ✅ CORRIGÉ : Compter les scénarios complétés !\r\nlet completedCount = 0;\r\nObject.values(completedScenarios).forEach((scenarioData, index) => {\r\n  if (scenarioData !== null && scenarioData !== undefined) {\r\n    console.log(`🔍 DEBUG - Scénario ${index}: complété`);\r\n    completedCount += 1;  // ✅ 1 scénario = 1 point\r\n  } else {\r\n    console.log(`🔍 DEBUG - Scénario ${index}: non complété`);\r\n  }\r\n});\r\n\r\nconsole.log('🔍 DEBUG - Total scénarios complétés:', completedCount);\r\n\r\n// Calcul correct au lieu de constante bidon\r\nconst percentage = totalScenarios > 0 ? (completedCount / totalScenarios) * 100 : 0;\r\nconsole.log('🔍 DEBUG - Pourcentage final conversations (scénarios):', percentage);\r\n\r\n    \r\n    return Math.round(percentage);\r\n  } catch (error) {\r\n    console.error('🚨 Erreur dans calculateConversationsProgress:', error);\r\n    return 0;\r\n  }\r\n};\r\n\r\n\r\n\r\n// WORD GAMES\r\nexport const calculateWordGamesProgress = async (level) => {\r\n  console.log('🚨 DÉBUT calculateWordGamesProgress pour niveau:', level);\r\n  try {\r\n    // ✅ CORRIGÉ : Utiliser la même clé que dans constants.js et useWordGames.js\r\n    const storageKey = `word_games_completed_${level}`;\r\n    console.log('🚨 StorageKey Word Games:', storageKey);\r\n    \r\n    // 🔍 DEBUG : Vérifier AsyncStorage\r\n    const savedData = await AsyncStorage.getItem(storageKey);\r\n    console.log('🔍 DEBUG - AsyncStorage.getItem result:', savedData);\r\n    \r\n    if (!savedData) {\r\n      console.log('🚨 Aucune données sauvegardées pour Word Games niveau', level);\r\n      return 0;\r\n    }\r\n    \r\n    const data = JSON.parse(savedData);\r\n    console.log('🔍 DEBUG - Données parsées depuis AsyncStorage:', data);\r\n    console.log('🔍 DEBUG - Structure des données:', Object.keys(data));\r\n    \r\n    // ✅ CORRIGÉ : Les données sont directement l'objet completedGames\r\n    const completedGames = data || {};  // ← Les données sont directement l'objet completedGames\r\n    console.log('🔍 DEBUG - completedGames extrait:', completedGames);\r\n    \r\n    // ✅ CORRIGÉ : Récupérer les VRAIES données comme les autres modules\r\n    const wordGamesData = getWordGamesData(level);\r\n    console.log('🔍 DEBUG - getWordGamesData result:', wordGamesData);\r\n    console.log('🔍 DEBUG - Structure wordGamesData:', Object.keys(wordGamesData || {}));\r\n    \r\n    if (!wordGamesData) {\r\n      return 0;\r\n    }\r\n    \r\n    console.log('🔍 DEBUG - Nombre de jeux:', wordGamesData.games.length);\r\n    \r\n    // ✅ CORRIGÉ : COPIER EXACTEMENT la logique de wordGamesStats.js\r\n    // calculateTotalGames(wordGamesData)\r\n    const totalGames = wordGamesData.games?.length || 0;\r\n    console.log('🔍 DEBUG - Total jeux calculé:', totalGames);\r\n    \r\n    // calculateCompletedGamesCount(completedGames) - LOGIQUE EXACTE\r\n    const completedCount = Object.values(completedGames).filter(game => game.completed).length;\r\n    console.log('🔍 DEBUG - Total jeux complétés:', completedCount);\r\n    \r\n    // calculateTotalProgress - LOGIQUE EXACTE\r\n    const percentage = totalGames > 0 ? Math.min(100, (completedCount / totalGames) * 100) : 0;\r\n    console.log('🔍 DEBUG - Pourcentage final word games (calcul manuel):', percentage);\r\n    \r\n    return Math.round(percentage);\r\n  } catch (error) {\r\n    console.error('🚨 Erreur dans calculateWordGamesProgress:', error);\r\n    return 0;\r\n  }\r\n};\r\n\r\n// ✅ SUPPRIMÉ : calculateAssessmentProgress n'est plus utilisé\r\n\r\n// =================== CALCUL GLOBAL - CORRIGÉ ===================\r\n\r\nexport const calculateAllProgress = async () => {\r\n  console.log('🚨 DÉBUT calculateAllProgress');\r\n  \r\n  // 🔍 DEBUG : Lister toutes les clés de stockage disponibles\r\n  try {\r\n    const allKeys = await AsyncStorage.getAllKeys();\r\n    console.log('🔍 TOUTES LES CLÉS DE STOCKAGE DISPONIBLES:', allKeys);\r\n    \r\n    // Filtrer les clés qui pourraient contenir des données de progression\r\n    const progressKeys = allKeys.filter(key => \r\n      key.includes('vocabulary') || \r\n      key.includes('grammar') || \r\n      key.includes('reading') || \r\n      key.includes('phrases') || \r\n      key.includes('conversation') || \r\n      key.includes('error') || \r\n      key.includes('word') || \r\n      key.includes('assessment')\r\n    );\r\n    console.log('🔍 CLÉS DE PROGRESSION TROUVÉES:', progressKeys);\r\n  } catch (error) {\r\n    console.warn('🔍 Erreur lors de la récupération des clés:', error);\r\n  }\r\n  \r\n  try {\r\n    const newLevelProgress = {};\r\n    const newExerciseProgress = {};\r\n\r\n    // ✅ MODIFIÉ : Exclure le niveau bonus, s'arrêter au niveau 6\r\n    const levels = ['1', '2', '3', '4', '5', '6'];\r\n    \r\n    const exerciseCalculators = {\r\n      vocabulary: calculateVocabularyProgress,\r\n      grammar: calculateGrammarProgress,\r\n      reading: calculateReadingProgress,\r\n      phrases: calculatePhrasesProgress,\r\n      conversations: calculateConversationsProgress,\r\n      wordGames: calculateWordGamesProgress,\r\n    };\r\n\r\n    await Promise.all(\r\n      levels.map(async (level) => {\r\n        console.log(`🚨 Calcul progression pour niveau: ${level}`);\r\n        \r\n        // ✅ SIMPLIFIÉ : Plus de logique bonus, tous les exercices sont disponibles\r\n        const availableExercises = Object.keys(exerciseCalculators);\r\n\r\n        console.log(`🚨 Exercices disponibles pour niveau ${level}:`, availableExercises);\r\n\r\n        const results = await Promise.all(\r\n          availableExercises.map(async (exerciseType) => {\r\n            try {\r\n              console.log(`🚨 Calcul ${exerciseType} pour niveau ${level}`);\r\n              const calculator = exerciseCalculators[exerciseType];\r\n              const value = await calculator(level);\r\n              console.log(`🚨 Résultat ${exerciseType} niveau ${level}: ${value}%`);\r\n              return { exerciseType, value };\r\n            } catch (e) {\r\n              console.warn(`Erreur calcul ${exerciseType} niveau ${level}:`, e);\r\n              return { exerciseType, value: 0 };\r\n            }\r\n          })\r\n        );\r\n\r\n        let levelTotal = 0;\r\n        let levelCompleted = 0;\r\n        results.forEach(({ exerciseType, value }) => {\r\n          if (!newExerciseProgress[exerciseType]) newExerciseProgress[exerciseType] = {};\r\n          newExerciseProgress[exerciseType][level] = value;\r\n          levelTotal += 1;  // ✅ CORRIGÉ : Compter le nombre d'exercices\r\n          levelCompleted += value;\r\n        });\r\n\r\n        newLevelProgress[level] = levelTotal > 0\r\n          ? Math.round(levelCompleted / levelTotal)  // ✅ CORRIGÉ : Moyenne simple\r\n          : 0;\r\n        \r\n        console.log(`🚨 Progression niveau ${level}: ${newLevelProgress[level]}%`);\r\n      })\r\n    );\r\n\r\n    console.log('🚨 FIN calculateAllProgress - newExerciseProgress:', newExerciseProgress);\r\n    console.log('🚨 FIN calculateAllProgress - newLevelProgress:', newLevelProgress);\r\n    return { levelProgress: newLevelProgress, exerciseProgress: newExerciseProgress };\r\n    \r\n  } catch (error) {\r\n    console.error('🚨 Erreur calcul progression globale:', error);\r\n    return { levelProgress: {}, exerciseProgress: {} };\r\n  }\r\n};\r\n\r\n// =================== GETTERS UTILES ===================\r\n\r\nexport const getLevelProgress = (levelProgress, level) => {\r\n  return levelProgress[level] || 0;\r\n};\r\n\r\nexport const getExerciseProgress = (exerciseProgress, exerciseType, level) => {\r\n  const progress = exerciseProgress[exerciseType]?.[level] || 0;\r\n  \r\n  // ✅ AJOUTÉ : Log de debug pour voir ce qui est retourné\r\n  console.log(`🔍 getExerciseProgress(${exerciseType}, ${level}):`, {\r\n    exerciseProgress: exerciseProgress[exerciseType],\r\n    levelProgress: exerciseProgress[exerciseType]?.[level],\r\n    finalProgress: progress\r\n  });\r\n  \r\n  return progress;\r\n};\r\n\r\nexport const hasProgress = (exerciseProgress, exerciseType, level) => {\r\n  return getExerciseProgress(exerciseProgress, exerciseType, level) > 0;\r\n};\r\n\r\n// =================== FONCTION D'AIDE POUR GESTION ERREUR ===================\r\n\r\nconst handleProgressError = (error, functionName, level, defaultValue) => {\r\n  console.error(`🚨 ERREUR dans ${functionName} pour niveau ${level}:`, error);\r\n  console.error('🔍 Stack trace:', error.stack);\r\n  return defaultValue;\r\n};"],"mappings":"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","ignoreList":[]}