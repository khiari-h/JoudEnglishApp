5a287f919430bb7bf32ed40ddb190613
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasProgress = exports.getLevelProgress = exports.getExerciseProgress = exports.calculateWordGamesProgress = exports.calculateVocabularyProgress = exports.calculateReadingProgress = exports.calculatePhrasesProgress = exports.calculateGrammarProgress = exports.calculateConversationsProgress = exports.calculateAllProgress = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _vocabularyDataHelper = require("../vocabulary/vocabularyDataHelper");
var _readingDataHelper = require("../reading/readingDataHelper");
var _grammarDataHelper = require("../grammar/grammarDataHelper");
var _phrasesDataHelper = require("../phrases/phrasesDataHelper");
var _conversationDataHelper = require("../conversation/conversationDataHelper");
var _wordGamesDataHelper = require("../wordGames/wordGamesDataHelper");
var _constants = require("../constants");
var calculateVocabularyProgress = exports.calculateVocabularyProgress = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (level) {
    try {
      var storageKey = `vocabulary_${level}_classic`;
      var savedData = yield _asyncStorage.default.getItem(storageKey);
      if (!savedData) {
        return 0;
      }
      var data = JSON.parse(savedData);
      var completedWords = data.completedWords || {};
      var vocabularyData = (0, _vocabularyDataHelper.getVocabularyData)(level, 'classic');
      if (!vocabularyData) {
        return 0;
      }
      var totalWords = vocabularyData.exercises.reduce(function (sum, cat) {
        var _cat$words;
        return sum + (((_cat$words = cat.words) == null ? void 0 : _cat$words.length) || 0);
      }, 0);
      var completedCount = 0;
      Object.values(completedWords).forEach(function (categoryWords) {
        if (Array.isArray(categoryWords)) {
          completedCount += categoryWords.length;
        }
      });
      var percentage = totalWords > 0 ? completedCount / totalWords * 100 : 0;
      return Math.round(percentage);
    } catch (error) {
      return 0;
    }
  });
  return function calculateVocabularyProgress(_x) {
    return _ref.apply(this, arguments);
  };
}();
var calculateGrammarProgress = exports.calculateGrammarProgress = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (level) {
    try {
      var storageKey = `grammar_${level}`;
      var savedData = yield _asyncStorage.default.getItem(storageKey);
      console.log('🔍 GRAMMAR COMPARISON:', {
        storageKey: storageKey,
        savedData: savedData,
        grammarData: (0, _grammarDataHelper.getGrammarData)(level),
        completedExercises: savedData ? JSON.parse(savedData).completedExercises : null
      });
      if (!savedData) {
        return 0;
      }
      var data = JSON.parse(savedData);
      var completedExercises = data.completedExercises || {};
      var grammarData = (0, _grammarDataHelper.getGrammarData)(level);
      if (!grammarData) {
        return 0;
      }
      var totalExercises = grammarData.reduce(function (sum, rule) {
        var _rule$exercises;
        return sum + (((_rule$exercises = rule.exercises) == null ? void 0 : _rule$exercises.length) || 0);
      }, 0);
      var completedCount = 0;
      Object.values(completedExercises).forEach(function (exerciseIndices, index) {
        if (Array.isArray(exerciseIndices)) {
          completedCount += exerciseIndices.length;
        }
      });
      console.log('🔍 GRAMMAR DEBUG:', {
        totalExercises: totalExercises,
        completedCount: completedCount,
        percentage: totalExercises > 0 ? completedCount / totalExercises * 100 : 0
      });
      var percentage = totalExercises > 0 ? completedCount / totalExercises * 100 : 0;
      return Math.round(percentage);
    } catch (error) {
      return 0;
    }
  });
  return function calculateGrammarProgress(_x2) {
    return _ref2.apply(this, arguments);
  };
}();
var calculateReadingProgress = exports.calculateReadingProgress = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (level) {
    console.log('🚨 DÉBUT calculateReadingProgress pour niveau:', level);
    try {
      var storageKey = `reading_progress_${level}`;
      console.log('🚨 StorageKey Reading:', storageKey);
      var savedData = yield _asyncStorage.default.getItem(storageKey);
      console.log('🔍 DEBUG - AsyncStorage.getItem result:', savedData);
      if (!savedData) {
        console.log('🚨 Aucune données sauvegardées pour Reading niveau', level);
        return 0;
      }
      var data = JSON.parse(savedData);
      console.log('🔍 DEBUG - Données parsées depuis AsyncStorage:', data);
      console.log('🔍 DEBUG - Structure des données:', Object.keys(data));
      var completedQuestions = data.completedQuestions || {};
      console.log('🔍 DEBUG - completedQuestions extrait:', completedQuestions);
      console.log('🔍 DEBUG - Type de completedQuestions:', typeof completedQuestions);
      console.log('🔍 DEBUG - Nombre de clés dans completedQuestions:', Object.keys(completedQuestions).length);
      console.log('🔍 DEBUG - Appel getReadingData avec level:', level);
      var readingData = (0, _readingDataHelper.getReadingData)(level);
      console.log('🔍 DEBUG - readingData reçu:', readingData);
      console.log('🔍 DEBUG - Type de readingData:', typeof readingData);
      console.log('🔍 DEBUG - Clés de readingData:', readingData ? Object.keys(readingData) : 'null');
      if (!readingData) {
        return 0;
      }
      console.log('🔍 DEBUG - readingData.exercises:', readingData.exercises);
      console.log('🔍 DEBUG - Nombre d\'exercices:', readingData.exercises.length);
      var totalQuestions = readingData.exercises.reduce(function (sum, ex) {
        var _ex$questions;
        var questionsCount = ((_ex$questions = ex.questions) == null ? void 0 : _ex$questions.length) || 0;
        console.log(`🔍 DEBUG - Exercice "${ex.title}": ${questionsCount} questions`);
        return sum + questionsCount;
      }, 0);
      console.log('🔍 DEBUG - Total questions calculé:', totalQuestions);
      var completedCount = 0;
      Object.values(completedQuestions).forEach(function (questionIndices, index) {
        if (Array.isArray(questionIndices)) {
          console.log(`🔍 DEBUG - Exercice ${index}: ${questionIndices.length} questions complétées`);
          completedCount += questionIndices.length;
        } else {
          console.log(`🔍 DEBUG - Exercice ${index}: questionIndices n'est pas un array:`, questionIndices);
        }
      });
      console.log('🔍 DEBUG - Total questions complétées:', completedCount);
      var percentage = totalQuestions > 0 ? completedCount / totalQuestions * 100 : 0;
      console.log('🔍 DEBUG - Pourcentage calculé:', percentage);
      console.log(`🔍 DEBUG Reading Niveau ${level}:`);
      console.log(`   - Clé stockage: ${storageKey}`);
      console.log(`   - Données sauvegardées:`, data);
      console.log(`   - Questions complétées:`, completedQuestions);
      console.log(`   - Total questions: ${totalQuestions}`);
      console.log(`   - Questions complétées: ${completedCount}`);
      console.log(`   - Pourcentage: ${percentage}%`);
      return Math.min(Math.round(percentage), 100);
    } catch (error) {
      console.error('🚨 ERREUR dans calculateReadingProgress:', error);
      console.error('🔍 DEBUG - Stack trace complet:', error.stack);
      return handleProgressError(error, 'calculateReadingProgress', level, 0);
    }
  });
  return function calculateReadingProgress(_x3) {
    return _ref3.apply(this, arguments);
  };
}();
var calculatePhrasesProgress = exports.calculatePhrasesProgress = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (level) {
    console.log('🚨 DÉBUT calculatePhrasesProgress pour niveau:', level);
    try {
      var _phrasesData$phrases, _phrasesData$categori, _phrasesData$phrases2;
      var storageKey = `phrases_${level}`;
      console.log('🚨 StorageKey Phrases:', storageKey);
      var savedData = yield _asyncStorage.default.getItem(storageKey);
      console.log('🔍 DEBUG - AsyncStorage.getItem result:', savedData);
      if (!savedData) {
        console.log('🚨 Aucune données sauvegardées pour Phrases niveau', level);
        return 0;
      }
      var data = JSON.parse(savedData);
      console.log('🔍 DEBUG - Données parsées depuis AsyncStorage:', data);
      console.log('🔍 DEBUG - Structure des données:', Object.keys(data));
      var completedPhrases = data.completedPhrases || {};
      console.log('🔍 DEBUG - completedPhrases extrait:', completedPhrases);
      var phrasesData = (0, _phrasesDataHelper.getPhrasesData)(level);
      console.log('🔍 DEBUG - getPhrasesData result:', phrasesData);
      console.log('🔍 DEBUG - Structure phrasesData:', Object.keys(phrasesData || {}));
      if (!phrasesData) {
        return 0;
      }
      console.log('🔍 DEBUG - Nombre de phrases/catégories:', ((_phrasesData$phrases = phrasesData.phrases) == null ? void 0 : _phrasesData$phrases.length) || ((_phrasesData$categori = phrasesData.categories) == null ? void 0 : _phrasesData$categori.length));
      var totalPhrases = ((_phrasesData$phrases2 = phrasesData.phrases) == null ? void 0 : _phrasesData$phrases2.length) || 0;
      console.log('🔍 DEBUG - Total phrases calculé:', totalPhrases);
      var completedCount = 0;
      Object.values(completedPhrases).forEach(function (phraseIndices, index) {
        if (Array.isArray(phraseIndices)) {
          console.log(`🔍 DEBUG - Catégorie ${index}: ${phraseIndices.length} phrases complétées`);
          completedCount += phraseIndices.length;
        } else {
          console.log(`🔍 DEBUG - Catégorie ${index}: phraseIndices n'est pas un array:`, phraseIndices);
        }
      });
      console.log('🔍 DEBUG - Total phrases complétées:', completedCount);
      var percentage = totalPhrases > 0 ? completedCount / totalPhrases * 100 : 0;
      console.log('🔍 DEBUG - Pourcentage final phrases (calcul manuel):', percentage);
      return Math.round(percentage);
    } catch (error) {
      console.error('🚨 Erreur dans calculatePhrasesProgress:', error);
      return 0;
    }
  });
  return function calculatePhrasesProgress(_x4) {
    return _ref4.apply(this, arguments);
  };
}();
var calculateConversationsProgress = exports.calculateConversationsProgress = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (level) {
    console.log('🚨 DÉBUT calculateConversationsProgress pour niveau:', level);
    try {
      var storageKey = `conversation_${level}`;
      console.log('🚨 StorageKey Conversations:', storageKey);
      var savedData = yield _asyncStorage.default.getItem(storageKey);
      console.log('🔍 DEBUG - AsyncStorage.getItem result:', savedData);
      if (!savedData) {
        console.log('🚨 Aucune données sauvegardées pour Conversations niveau', level);
        return 0;
      }
      var data = JSON.parse(savedData);
      console.log('🔍 DEBUG - Données parsées depuis AsyncStorage:', data);
      console.log('🔍 DEBUG - Structure des données:', Object.keys(data));
      var completedScenarios = data.completedScenarios || {};
      console.log('🔍 DEBUG - completedScenarios extrait:', completedScenarios);
      var conversationData = (0, _conversationDataHelper.getConversationData)(level);
      console.log('🔍 DEBUG - getConversationData result:', conversationData);
      console.log('🔍 DEBUG - Structure conversationData:', Object.keys(conversationData || {}));
      if (!conversationData) {
        return 0;
      }
      console.log('🔍 DEBUG - Nombre de scénarios:', conversationData.exercises.length);
      var totalScenarios = conversationData.exercises.length;
      console.log('🔍 DEBUG - Total scénarios calculé:', totalScenarios);
      var completedCount = 0;
      Object.values(completedScenarios).forEach(function (scenarioData, index) {
        if (scenarioData !== null && scenarioData !== undefined) {
          console.log(`🔍 DEBUG - Scénario ${index}: complété`);
          completedCount += 1;
        } else {
          console.log(`🔍 DEBUG - Scénario ${index}: non complété`);
        }
      });
      console.log('🔍 DEBUG - Total scénarios complétés:', completedCount);
      var percentage = totalScenarios > 0 ? completedCount / totalScenarios * 100 : 0;
      console.log('🔍 DEBUG - Pourcentage final conversations (scénarios):', percentage);
      return Math.round(percentage);
    } catch (error) {
      console.error('🚨 Erreur dans calculateConversationsProgress:', error);
      return 0;
    }
  });
  return function calculateConversationsProgress(_x5) {
    return _ref5.apply(this, arguments);
  };
}();
var calculateWordGamesProgress = exports.calculateWordGamesProgress = function () {
  var _ref6 = (0, _asyncToGenerator2.default)(function* (level) {
    console.log('🚨 DÉBUT calculateWordGamesProgress pour niveau:', level);
    try {
      var _wordGamesData$games;
      var storageKey = `word_games_completed_${level}`;
      console.log('🚨 StorageKey Word Games:', storageKey);
      var savedData = yield _asyncStorage.default.getItem(storageKey);
      console.log('🔍 DEBUG - AsyncStorage.getItem result:', savedData);
      if (!savedData) {
        console.log('🚨 Aucune données sauvegardées pour Word Games niveau', level);
        return 0;
      }
      var data = JSON.parse(savedData);
      console.log('🔍 DEBUG - Données parsées depuis AsyncStorage:', data);
      console.log('🔍 DEBUG - Structure des données:', Object.keys(data));
      var completedGames = data || {};
      console.log('🔍 DEBUG - completedGames extrait:', completedGames);
      var wordGamesData = (0, _wordGamesDataHelper.getWordGamesData)(level);
      console.log('🔍 DEBUG - getWordGamesData result:', wordGamesData);
      console.log('🔍 DEBUG - Structure wordGamesData:', Object.keys(wordGamesData || {}));
      if (!wordGamesData) {
        return 0;
      }
      console.log('🔍 DEBUG - Nombre de jeux:', wordGamesData.games.length);
      var totalGames = ((_wordGamesData$games = wordGamesData.games) == null ? void 0 : _wordGamesData$games.length) || 0;
      console.log('🔍 DEBUG - Total jeux calculé:', totalGames);
      var completedCount = Object.values(completedGames).filter(function (game) {
        return game.completed;
      }).length;
      console.log('🔍 DEBUG - Total jeux complétés:', completedCount);
      var percentage = totalGames > 0 ? Math.min(100, completedCount / totalGames * 100) : 0;
      console.log('🔍 DEBUG - Pourcentage final word games (calcul manuel):', percentage);
      return Math.round(percentage);
    } catch (error) {
      console.error('🚨 Erreur dans calculateWordGamesProgress:', error);
      return 0;
    }
  });
  return function calculateWordGamesProgress(_x6) {
    return _ref6.apply(this, arguments);
  };
}();
var calculateAllProgress = exports.calculateAllProgress = function () {
  var _ref7 = (0, _asyncToGenerator2.default)(function* () {
    console.log('🚨 DÉBUT calculateAllProgress');
    try {
      var allKeys = yield _asyncStorage.default.getAllKeys();
      console.log('🔍 TOUTES LES CLÉS DE STOCKAGE DISPONIBLES:', allKeys);
      var progressKeys = allKeys.filter(function (key) {
        return key.includes('vocabulary') || key.includes('grammar') || key.includes('reading') || key.includes('phrases') || key.includes('conversation') || key.includes('error') || key.includes('word') || key.includes('assessment');
      });
      console.log('🔍 CLÉS DE PROGRESSION TROUVÉES:', progressKeys);
    } catch (error) {
      console.warn('🔍 Erreur lors de la récupération des clés:', error);
    }
    try {
      var newLevelProgress = {};
      var newExerciseProgress = {};
      var levels = ['1', '2', '3', '4', '5', '6'];
      var exerciseCalculators = {
        vocabulary: calculateVocabularyProgress,
        grammar: calculateGrammarProgress,
        reading: calculateReadingProgress,
        phrases: calculatePhrasesProgress,
        conversations: calculateConversationsProgress,
        wordGames: calculateWordGamesProgress
      };
      yield Promise.all(levels.map(function () {
        var _ref8 = (0, _asyncToGenerator2.default)(function* (level) {
          console.log(`🚨 Calcul progression pour niveau: ${level}`);
          var availableExercises = Object.keys(exerciseCalculators);
          console.log(`🚨 Exercices disponibles pour niveau ${level}:`, availableExercises);
          var results = yield Promise.all(availableExercises.map(function () {
            var _ref9 = (0, _asyncToGenerator2.default)(function* (exerciseType) {
              try {
                console.log(`🚨 Calcul ${exerciseType} pour niveau ${level}`);
                var calculator = exerciseCalculators[exerciseType];
                var value = yield calculator(level);
                console.log(`🚨 Résultat ${exerciseType} niveau ${level}: ${value}%`);
                return {
                  exerciseType: exerciseType,
                  value: value
                };
              } catch (e) {
                console.warn(`Erreur calcul ${exerciseType} niveau ${level}:`, e);
                return {
                  exerciseType: exerciseType,
                  value: 0
                };
              }
            });
            return function (_x8) {
              return _ref9.apply(this, arguments);
            };
          }()));
          var levelTotal = 0;
          var levelCompleted = 0;
          results.forEach(function (_ref0) {
            var exerciseType = _ref0.exerciseType,
              value = _ref0.value;
            if (!newExerciseProgress[exerciseType]) newExerciseProgress[exerciseType] = {};
            newExerciseProgress[exerciseType][level] = value;
            levelTotal += 1;
            levelCompleted += value;
          });
          newLevelProgress[level] = levelTotal > 0 ? Math.round(levelCompleted / levelTotal) : 0;
          console.log(`🚨 Progression niveau ${level}: ${newLevelProgress[level]}%`);
        });
        return function (_x7) {
          return _ref8.apply(this, arguments);
        };
      }()));
      console.log('🚨 FIN calculateAllProgress - newExerciseProgress:', newExerciseProgress);
      console.log('🚨 FIN calculateAllProgress - newLevelProgress:', newLevelProgress);
      return {
        levelProgress: newLevelProgress,
        exerciseProgress: newExerciseProgress
      };
    } catch (error) {
      console.error('🚨 Erreur calcul progression globale:', error);
      return {
        levelProgress: {},
        exerciseProgress: {}
      };
    }
  });
  return function calculateAllProgress() {
    return _ref7.apply(this, arguments);
  };
}();
var getLevelProgress = exports.getLevelProgress = function getLevelProgress(levelProgress, level) {
  return levelProgress[level] || 0;
};
var getExerciseProgress = exports.getExerciseProgress = function getExerciseProgress(exerciseProgress, exerciseType, level) {
  var _exerciseProgress$exe, _exerciseProgress$exe2;
  var progress = ((_exerciseProgress$exe = exerciseProgress[exerciseType]) == null ? void 0 : _exerciseProgress$exe[level]) || 0;
  console.log(`🔍 getExerciseProgress(${exerciseType}, ${level}):`, {
    exerciseProgress: exerciseProgress[exerciseType],
    levelProgress: (_exerciseProgress$exe2 = exerciseProgress[exerciseType]) == null ? void 0 : _exerciseProgress$exe2[level],
    finalProgress: progress
  });
  return progress;
};
var hasProgress = exports.hasProgress = function hasProgress(exerciseProgress, exerciseType, level) {
  return getExerciseProgress(exerciseProgress, exerciseType, level) > 0;
};
var handleProgressError = function handleProgressError(error, functionName, level, defaultValue) {
  console.error(`🚨 ERREUR dans ${functionName} pour niveau ${level}:`, error);
  console.error('🔍 Stack trace:', error.stack);
  return defaultValue;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,