a8d8a37ae11e2d2a7d717b4ba305525d
_getJestObj().mock('@expo/vector-icons', function () {
  var _require = require('react-native'),
    Text = _require.Text;
  return {
    Ionicons: function Ionicons(props) {
      return (0, _jsxRuntime.jsx)(Text, {
        testID: `icon-${props.name}`,
        children: props.name
      });
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _reactNative2 = require("@testing-library/react-native");
var _ExerciseFeedback = _interopRequireDefault(require("../../../src/components/exercise-common/ExerciseFeedback"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ExerciseFeedback', function () {
  var onDismissMock = jest.fn();
  beforeAll(function () {
    jest.useFakeTimers();
  });
  afterAll(function () {
    jest.useRealTimers();
  });
  afterEach(function () {
    onDismissMock.mockClear();
    jest.clearAllMocks();
  });
  it('renders the message correctly', function () {
    var _render = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        message: "Correct!"
      })),
      getByText = _render.getByText;
    expect(getByText('Correct!')).toBeTruthy();
  });
  it('renders the explanation when provided', function () {
    var _render2 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        message: "Incorrect",
        explanation: "The answer was X."
      })),
      getByText = _render2.getByText;
    expect(getByText('The answer was X.')).toBeTruthy();
  });
  it('does not render the explanation when not provided', function () {
    var _render3 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        message: "Correct!"
      })),
      queryByText = _render3.queryByText;
    expect(queryByText('The answer was X.')).toBeNull();
  });
  it('shows a success icon for type "success"', function () {
    var _render4 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        message: "Success",
        type: "success"
      })),
      getByTestId = _render4.getByTestId;
    expect(getByTestId('icon-checkmark-circle')).toBeTruthy();
  });
  it('shows an error icon for type "error"', function () {
    var _render5 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        message: "Error",
        type: "error"
      })),
      getByTestId = _render5.getByTestId;
    expect(getByTestId('icon-close-circle')).toBeTruthy();
  });
  it('shows an info icon for type "info"', function () {
    var _render6 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        message: "Info",
        type: "info"
      })),
      getByTestId = _render6.getByTestId;
    expect(getByTestId('icon-information-circle')).toBeTruthy();
  });
  it('does not show the dismiss button if showDismissButton is false', function () {
    var _render7 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        message: "Test",
        showDismissButton: false
      })),
      queryByTestId = _render7.queryByTestId;
    expect(queryByTestId('icon-close')).toBeNull();
  });
  it('uses default styling for unknown type', function () {
    var _render8 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        message: "Test",
        type: "unknown"
      })),
      getByTestId = _render8.getByTestId;
    expect(getByTestId('icon-information-circle')).toBeTruthy();
  });
  it('does not call onDismiss if animation finishes with false', function () {
    var onDismissMock = jest.fn();
    jest.spyOn(_reactNative.Animated, 'timing').mockImplementation(function () {
      return {
        start: function start(callback) {
          return callback && callback({
            finished: false
          });
        }
      };
    });
    var _render9 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        message: "Test",
        onDismiss: onDismissMock
      })),
      getByTestId = _render9.getByTestId;
    _reactNative2.fireEvent.press(getByTestId('icon-close'));
    expect(onDismissMock).not.toHaveBeenCalled();
  });
  it('calls onDismiss automatically when autoHide is true', (0, _asyncToGenerator2.default)(function* () {
    jest.spyOn(_reactNative.Animated, 'timing').mockImplementation(function () {
      return {
        start: function start(callback) {
          return callback && callback({
            finished: true
          });
        }
      };
    });
    (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
      message: "Hiding soon...",
      onDismiss: onDismissMock,
      autoHide: true,
      autoHideDuration: 5000
    }));
    (0, _reactNative2.act)(function () {
      jest.runAllTimers();
    });
    yield (0, _reactNative2.waitFor)(function () {
      expect(onDismissMock).toHaveBeenCalledTimes(1);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,