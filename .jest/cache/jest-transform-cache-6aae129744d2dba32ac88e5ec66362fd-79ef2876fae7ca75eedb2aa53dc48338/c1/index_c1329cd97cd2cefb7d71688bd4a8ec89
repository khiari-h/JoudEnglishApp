6643fd17c657b7158f4fbd1dd0bb33ad
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _expoLinearGradient = require("expo-linear-gradient");
var _expoRouter = require("expo-router");
var _ThemeContext = require("../../contexts/ThemeContext");
var _useRealTimeProgress2 = _interopRequireDefault(require("../../hooks/useRealTimeProgress"));
var _Button = _interopRequireDefault(require("../../components/ui/Button"));
var _Container = _interopRequireWildcard(require("../../components/layout/Container"));
var _Header = _interopRequireDefault(require("../../components/layout/Header"));
var _constants = require("../../utils/constants");
var _style = _interopRequireWildcard(require("./style"));
var _useLevelListData2 = _interopRequireDefault(require("./hooks/useLevelListData"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var DEFAULT_THEME = {
  colors: {
    background: "#F8F9FA",
    primary: "#5E60CE",
    text: "#1F2937",
    textSecondary: "#6B7280",
    surface: "#FFFFFF"
  }
};
var ModernCardHeader = function ModernCardHeader(_ref) {
  var level = _ref.level,
    colors = _ref.colors,
    localStyles = _ref.localStyles;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: localStyles.modernCardHeader,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: localStyles.modernTitleContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [localStyles.modernTitle, {
          color: colors.text
        }],
        children: level.title
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [localStyles.modernBadge, {
          backgroundColor: level.color
        }],
        children: (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: localStyles.modernBadgeText,
          children: [level.progress, "%"]
        })
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: localStyles.modernIcon,
      children: level.icon
    })]
  });
};
var ModernProgress = function ModernProgress(_ref2) {
  var level = _ref2.level,
    colors = _ref2.colors,
    localStyles = _ref2.localStyles;
  return level.hasProgress && (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: localStyles.modernProgressContainer,
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: localStyles.modernProgressBar,
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [localStyles.modernProgressFill, {
          width: `${level.progress}%`,
          backgroundColor: level.color
        }]
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
      style: [localStyles.modernProgressText, {
        color: colors.textSecondary
      }],
      children: [" ", level.progress, "% "]
    })]
  });
};
var ModernCardButton = function ModernCardButton(_ref3) {
  var level = _ref3.level,
    handleLevelPress = _ref3.handleLevelPress,
    localStyles = _ref3.localStyles;
  return (0, _jsxRuntime.jsx)(_Button.default, {
    title: level.hasStarted ? "Continuer" : "Commencer",
    variant: "filled",
    color: level.color,
    fullWidth: true,
    onPress: handleLevelPress(level),
    style: localStyles.modernButton,
    rightIcon: level.hasStarted ? "play-outline" : "rocket-outline",
    testID: `level-${level.id}-button`
  });
};
var LevelCardContent = function LevelCardContent(_ref4) {
  var level = _ref4.level,
    colors = _ref4.colors,
    localStyles = _ref4.localStyles,
    handleLevelPress = _ref4.handleLevelPress;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: localStyles.modernCardContent,
    children: [(0, _jsxRuntime.jsx)(ModernCardHeader, {
      level: level,
      colors: colors,
      localStyles: localStyles
    }), (0, _jsxRuntime.jsx)(ModernProgress, {
      level: level,
      colors: colors,
      localStyles: localStyles
    }), (0, _jsxRuntime.jsx)(ModernCardButton, {
      level: level,
      handleLevelPress: handleLevelPress,
      localStyles: localStyles
    })]
  });
};
var LevelListSection = function LevelListSection(_ref5) {
  var colors = _ref5.colors,
    localStyles = _ref5.localStyles,
    levels = _ref5.levels,
    renderLevelCard = _ref5.renderLevelCard;
  return (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
    testID: "level-selection-scroll",
    style: {
      flex: 1
    },
    contentContainerStyle: [localStyles.modernScrollContent, {
      paddingBottom: 60
    }],
    showsVerticalScrollIndicator: false,
    children: (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: localStyles.modernLevelsContainer,
      children: levels.map(renderLevelCard)
    })
  });
};
var LevelSelection = function LevelSelection() {
  var themeContext = (0, _react.useContext)(_ThemeContext.ThemeContext) || DEFAULT_THEME;
  var colors = themeContext.colors;
  var _useRealTimeProgress = (0, _useRealTimeProgress2.default)(),
    getLevelProgress = _useRealTimeProgress.getLevelProgress,
    hasProgress = _useRealTimeProgress.hasProgress,
    refresh = _useRealTimeProgress.refresh;
  var _useLevelListData = (0, _useLevelListData2.default)({
      getLevelProgress: getLevelProgress,
      hasProgress: hasProgress
    }),
    currentUserLevel = _useLevelListData.currentUserLevel,
    currentLevelData = _useLevelListData.currentLevelData,
    levels = _useLevelListData.levels;
  var backgroundGradient = (0, _style.getBackgroundGradient)(currentLevelData.color, colors.background);
  var handleLevelSelect = (0, _react.useCallback)(function (level) {
    _expoRouter.router.push({
      pathname: "/tabs/exerciseSelection",
      params: {
        level: level.id
      }
    });
  }, []);
  var handleLevelPress = (0, _react.useCallback)(function (level) {
    return function () {
      return handleLevelSelect(level);
    };
  }, [handleLevelSelect]);
  (0, _expoRouter.useFocusEffect)((0, _react.useCallback)(function () {
    refresh();
  }, [refresh]));
  var renderHeader = (0, _react.useCallback)(function () {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.headerContainer,
      children: (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
        colors: ["#6366F1", "#8B5CF6"],
        start: {
          x: 0,
          y: 0
        },
        end: {
          x: 1,
          y: 1
        },
        style: _style.default.headerGradient,
        children: (0, _jsxRuntime.jsx)(_Header.default, {
          title: "Niveaux",
          showBackButton: true,
          onBackPress: (0, _react.useCallback)(function () {
            return _expoRouter.router.push("/tabs/dashboard");
          }, []),
          backgroundColor: "transparent",
          textColor: "white",
          withStatusBar: false,
          withShadow: false,
          titleContainerStyle: _style.default.headerTitle,
          testID: "level-selection-header"
        })
      })
    });
  }, []);
  var renderLevelCard = (0, _react.useCallback)(function (level) {
    return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      testID: `level-${level.id}`,
      style: _style.default.modernCard,
      onPress: handleLevelPress(level),
      activeOpacity: 0.8,
      accessibilityRole: "button",
      accessibilityLabel: `Niveau ${level.id}`,
      accessibilityValue: {
        min: 0,
        max: 100,
        now: level.progress
      },
      children: (0, _jsxRuntime.jsx)(LevelCardContent, {
        level: level,
        colors: colors,
        localStyles: _style.default,
        handleLevelPress: handleLevelPress
      })
    }, level.id);
  }, [handleLevelPress, colors.text, _style.default]);
  return (0, _jsxRuntime.jsx)(_Container.default, {
    testID: "level-selection-container",
    safeArea: true,
    safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.NO_BOTTOM,
    withScrollView: false,
    backgroundColor: "transparent",
    statusBarColor: "#6366F1",
    statusBarStyle: "light-content",
    withPadding: false,
    children: (0, _jsxRuntime.jsxs)(_expoLinearGradient.LinearGradient, {
      colors: backgroundGradient.colors,
      locations: backgroundGradient.locations,
      start: {
        x: 0,
        y: 0
      },
      end: {
        x: 0,
        y: 1
      },
      style: {
        flex: 1
      },
      children: [renderHeader(), (0, _jsxRuntime.jsx)(LevelListSection, {
        colors: colors,
        localStyles: _style.default,
        levels: levels,
        renderLevelCard: renderLevelCard
      })]
    })
  });
};
var _default = exports.default = LevelSelection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,