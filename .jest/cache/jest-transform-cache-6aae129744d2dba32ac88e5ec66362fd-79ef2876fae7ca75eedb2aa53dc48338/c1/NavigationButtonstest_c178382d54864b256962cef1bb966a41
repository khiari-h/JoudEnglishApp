c7aaba43098e762c70d3c54eb5045e0e
_getJestObj().mock('expo-linear-gradient', function () {
  var _require = require('react-native'),
    View = _require.View;
  return {
    LinearGradient: function LinearGradient(props) {
      return (0, _jsxRuntime.jsx)(View, Object.assign({}, props));
    }
  };
});
_getJestObj().mock('@expo/vector-icons', function () {
  var _require2 = require('react-native'),
    Text = _require2.Text;
  return {
    Ionicons: function Ionicons(props) {
      return (0, _jsxRuntime.jsx)(Text, {
        testID: `icon-${props.name}`,
        children: props.name
      });
    }
  };
});
_getJestObj().mock('../../../src/components/exercise-common/NavigationButtons/style', function () {
  var _require3 = require('react-native'),
    StyleSheet = _require3.StyleSheet,
    Platform = _require3.Platform;
  var createStyles = function createStyles(primaryColor) {
    return StyleSheet.create({
      container: {},
      buttonsRow: {},
      previousButton: Object.assign({}, Platform.select({
        ios: {
          shadowColor: 'mock-shadow-ios'
        },
        android: {
          elevation: 3
        }
      })),
      previousText: {},
      nextButtonContainer: Object.assign({}, Platform.select({
        ios: {
          shadowColor: 'mock-shadow-ios'
        },
        android: {
          elevation: 6
        }
      })),
      nextButton: {},
      nextText: {},
      nextIcon: {},
      disabled: {}
    });
  };
  return createStyles;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _NavigationButtons = _interopRequireDefault(require("../../../src/components/exercise-common/NavigationButtons"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require4 = require("@jest/globals"),
    jest = _require4.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('NavigationButtons', function () {
  var onNextMock = jest.fn();
  var onPreviousMock = jest.fn();
  beforeAll(function () {
    jest.useFakeTimers();
  });
  afterAll(function () {
    jest.useRealTimers();
  });
  afterEach(function () {
    jest.clearAllMocks();
  });
  it('renders both previous and next buttons by default', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NavigationButtons.default, {
        onNext: onNextMock,
        onPrevious: onPreviousMock
      })),
      getByText = _render.getByText;
    expect(getByText('Précédent')).toBeTruthy();
    expect(getByText('Suivant')).toBeTruthy();
  });
  it('hides the previous button when disablePrevious is true', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NavigationButtons.default, {
        disablePrevious: true
      })),
      queryByText = _render2.queryByText;
    expect(queryByText('Précédent')).toBeNull();
  });
  it('calls onPrevious when the previous button is pressed', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NavigationButtons.default, {
        onPrevious: onPreviousMock
      })),
      getByText = _render3.getByText;
    _reactNative.fireEvent.press(getByText('Précédent'));
    (0, _reactNative.act)(function () {
      return jest.runAllTimers();
    });
    expect(onPreviousMock).toHaveBeenCalledTimes(1);
  });
  it('calls onNext when the next button is pressed', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NavigationButtons.default, {
        onNext: onNextMock
      })),
      getByText = _render4.getByText;
    _reactNative.fireEvent.press(getByText('Suivant'));
    (0, _reactNative.act)(function () {
      return jest.runAllTimers();
    });
    expect(onNextMock).toHaveBeenCalledTimes(1);
  });
  it('does not call onNext when the next button is disabled', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NavigationButtons.default, {
        onNext: onNextMock,
        disableNext: true
      })),
      getByText = _render5.getByText;
    _reactNative.fireEvent.press(getByText('Suivant'));
    expect(onNextMock).not.toHaveBeenCalled();
  });
  it('displays "Terminer" and a checkmark icon on the next button when isLast is true', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NavigationButtons.default, {
        isLast: true
      })),
      getByText = _render6.getByText,
      getByTestId = _render6.getByTestId;
    expect(getByText('Terminer')).toBeTruthy();
    expect(getByTestId('icon-checkmark')).toBeTruthy();
  });
  it('applies iOS styles correctly', function () {
    _reactNative2.Platform.OS = 'ios';
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NavigationButtons.default, {})),
      getByText = _render7.getByText;
    var previousButton = getByText('Précédent').parent;
    var nextButton = getByText('Suivant').parent.parent;
    var hasShadowColorPrev = previousButton.props.style.some(function (style) {
      return style && style.shadowColor;
    });
    var hasShadowColorNext = nextButton.props.style.some(function (style) {
      return style && style.shadowColor;
    });
    var hasElevationPrev = previousButton.props.style.some(function (style) {
      return style && style.elevation;
    });
    var hasElevationNext = nextButton.props.style.some(function (style) {
      return style && style.elevation;
    });
    expect(hasShadowColorPrev).toBe(true);
    expect(hasShadowColorNext).toBe(true);
    expect(hasElevationPrev).toBe(false);
    expect(hasElevationNext).toBe(false);
  });
  it('applies Android styles correctly', function () {
    _reactNative2.Platform.OS = 'android';
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NavigationButtons.default, {})),
      getByText = _render8.getByText;
    var previousButton = getByText('Précédent').parent;
    var nextButton = getByText('Suivant').parent.parent;
    var hasElevationPrev = previousButton.props.style.some(function (style) {
      return style && style.elevation;
    });
    var hasElevationNext = nextButton.props.style.some(function (style) {
      return style && style.elevation;
    });
    var hasShadowColorPrev = previousButton.props.style.some(function (style) {
      return style && style.shadowColor;
    });
    var hasShadowColorNext = nextButton.props.style.some(function (style) {
      return style && style.shadowColor;
    });
    expect(hasElevationPrev).toBe(true);
    expect(hasElevationNext).toBe(true);
    expect(hasShadowColorPrev).toBe(false);
    expect(hasShadowColorNext).toBe(false);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,