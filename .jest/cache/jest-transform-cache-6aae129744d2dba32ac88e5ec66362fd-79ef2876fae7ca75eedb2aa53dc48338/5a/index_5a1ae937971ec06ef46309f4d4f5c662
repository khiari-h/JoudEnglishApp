2886785fd774bacc2877066d80e46812
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.areEqual = areEqual;
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _expoLinearGradient = require("expo-linear-gradient");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var itemLayouts = {};
var CategorySelector = function CategorySelector(_ref) {
  var _ref$categories = _ref.categories,
    categories = _ref$categories === void 0 ? [] : _ref$categories,
    selectedCategory = _ref.selectedCategory,
    onSelectCategory = _ref.onSelectCategory,
    _ref$primaryColor = _ref.primaryColor,
    primaryColor = _ref$primaryColor === void 0 ? "#5E60CE" : _ref$primaryColor;
  var styles = (0, _style.default)(primaryColor);
  var scrollViewRef = (0, _react.useRef)(null);
  var animationsRef = (0, _react.useRef)({});
  var _useState = (0, _react.useState)({}),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    localAnimations = _useState2[0],
    setLocalAnimations = _useState2[1];
  (0, _react.useEffect)(function () {
    var newAnimations = {};
    var shouldUpdate = false;
    for (var category of categories) {
      if (!animationsRef.current[category.id]) {
        newAnimations[category.id] = new _reactNative.Animated.Value(0);
        shouldUpdate = true;
      } else {
        newAnimations[category.id] = animationsRef.current[category.id];
      }
    }
    if (selectedCategory && newAnimations[selectedCategory]) {
      newAnimations[selectedCategory].setValue(1);
    }
    animationsRef.current = newAnimations;
    setLocalAnimations(newAnimations);
  }, [categories, selectedCategory]);
  var isAnimatingRef = (0, _react.useRef)(false);
  var _useState3 = (0, _react.useState)(selectedCategory),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    prevSelectedCategory = _useState4[0],
    setPrevSelectedCategory = _useState4[1];
  var pressAnimationsRef = (0, _react.useRef)({});
  var getPressAnimation = (0, _react.useCallback)(function (categoryId) {
    if (!pressAnimationsRef.current[categoryId]) {
      pressAnimationsRef.current[categoryId] = new _reactNative.Animated.Value(1);
    }
    return pressAnimationsRef.current[categoryId];
  }, []);
  var handlePressIn = (0, _react.useCallback)(function (categoryId) {
    _reactNative.Animated.timing(getPressAnimation(categoryId), {
      toValue: 0.95,
      duration: 150,
      useNativeDriver: true
    }).start();
  }, [getPressAnimation]);
  var handlePressOut = (0, _react.useCallback)(function (categoryId) {
    _reactNative.Animated.timing(getPressAnimation(categoryId), {
      toValue: 1,
      duration: 150,
      useNativeDriver: true
    }).start();
  }, [getPressAnimation]);
  var triggerAnimation = (0, _react.useCallback)(function (fromCategory, toCategory) {
    if (isAnimatingRef.current) return;
    isAnimatingRef.current = true;
    var animationsArray = [];
    if (fromCategory !== undefined && animationsRef.current[fromCategory]) {
      animationsArray.push(_reactNative.Animated.timing(animationsRef.current[fromCategory], {
        toValue: 0,
        duration: 200,
        useNativeDriver: false
      }));
    }
    if (toCategory !== undefined && animationsRef.current[toCategory]) {
      animationsArray.push(_reactNative.Animated.timing(animationsRef.current[toCategory], {
        toValue: 1,
        duration: 300,
        useNativeDriver: false
      }));
    }
    if (animationsArray.length > 0) {
      _reactNative.Animated.parallel(animationsArray).start(function () {
        isAnimatingRef.current = false;
      });
    } else {
      isAnimatingRef.current = false;
    }
  }, []);
  (0, _react.useEffect)(function () {
    if (prevSelectedCategory !== selectedCategory) {
      triggerAnimation(prevSelectedCategory, selectedCategory);
      setPrevSelectedCategory(selectedCategory);
    }
  }, [selectedCategory, prevSelectedCategory, triggerAnimation]);
  (0, _react.useEffect)(function () {
    if (scrollViewRef.current && selectedCategory) {
      var layout = itemLayouts[selectedCategory];
      if (layout) {
        scrollViewRef.current.scrollTo({
          x: layout.x - layout.width / 2,
          y: 0,
          animated: true
        });
      }
    }
  }, [selectedCategory, localAnimations]);
  var handleCategoryPress = (0, _react.useCallback)(function (categoryId) {
    if (categoryId !== selectedCategory && !isAnimatingRef.current) {
      onSelectCategory(categoryId);
    }
  }, [selectedCategory, onSelectCategory]);
  var createPressHandler = (0, _react.useCallback)(function (categoryId) {
    return function () {
      return handleCategoryPress(categoryId);
    };
  }, [handleCategoryPress]);
  var renderCategoryPill = (0, _react.useCallback)(function (category) {
    var isSelected = selectedCategory === category.id;
    var animation = localAnimations[category.id] || new _reactNative.Animated.Value(0);
    var pressAnimation = getPressAnimation(category.id);
    var scale = animation.interpolate({
      inputRange: [0, 1],
      outputRange: [1, 1.05]
    });
    var pressScale = pressAnimation.interpolate({
      inputRange: [0.95, 1],
      outputRange: [0.95, 1]
    });
    var shadowOpacity = animation.interpolate({
      inputRange: [0, 1],
      outputRange: [0.1, 0.25]
    });
    var borderWidth = animation.interpolate({
      inputRange: [0, 1],
      outputRange: [1, 2]
    });
    return (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
      onLayout: function onLayout(event) {
        itemLayouts[category.id] = event.nativeEvent.layout;
      },
      style: [styles.categoryItemWrapper, {
        transform: [{
          scale: _reactNative.Animated.multiply(scale, pressScale)
        }]
      }],
      children: (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: styles.categoryTouchable,
        onPress: createPressHandler(category.id),
        onPressIn: function onPressIn() {
          return handlePressIn(category.id);
        },
        onPressOut: function onPressOut() {
          return handlePressOut(category.id);
        },
        activeOpacity: 0.8,
        accessibilityRole: "button",
        accessibilityLabel: String(category.name),
        accessibilityState: {
          selected: isSelected
        },
        children: isSelected ? (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
          colors: [primaryColor, `${primaryColor}E6`, `${primaryColor}CC`],
          start: {
            x: 0,
            y: 0
          },
          end: {
            x: 1,
            y: 1
          },
          style: styles.selectedCategoryItem,
          children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.selectedInner,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.selectedCategoryText,
              children: category.name
            }), (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: styles.sparkleContainer,
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.sparkle,
                children: "\u2728"
              })
            })]
          })
        }) : (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
          style: [styles.categoryItem, {
            borderWidth: borderWidth,
            borderColor: `${primaryColor}20`,
            shadowOpacity: shadowOpacity
          }],
          children: (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [styles.categoryInner, {
              backgroundColor: `${primaryColor}08`
            }],
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: [styles.categoryText, {
                color: primaryColor
              }],
              children: category.name
            })
          })
        })
      })
    }, category.id);
  }, [selectedCategory, localAnimations, primaryColor, createPressHandler, handlePressIn, handlePressOut, getPressAnimation]);
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: styles.container,
    children: (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
      colors: [`${primaryColor}04`, 'transparent', `${primaryColor}02`],
      start: {
        x: 0,
        y: 0
      },
      end: {
        x: 1,
        y: 0
      },
      style: styles.backgroundGradient,
      children: (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
        ref: scrollViewRef,
        horizontal: true,
        showsHorizontalScrollIndicator: false,
        contentContainerStyle: styles.scrollContent,
        style: styles.scrollView,
        children: categories.map(renderCategoryPill)
      })
    })
  });
};
CategorySelector.propTypes = {
  categories: _propTypes.default.arrayOf(_propTypes.default.shape({
    id: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]).isRequired,
    name: _propTypes.default.string.isRequired
  })).isRequired,
  selectedCategory: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  onSelectCategory: _propTypes.default.func.isRequired,
  primaryColor: _propTypes.default.string
};
function areEqual(prevProps, nextProps) {
  var categoriesEqual = prevProps.categories === nextProps.categories || prevProps.categories.length === nextProps.categories.length && prevProps.categories.every(function (cat, index) {
    return cat.id === nextProps.categories[index].id;
  });
  return prevProps.selectedCategory === nextProps.selectedCategory && prevProps.primaryColor === nextProps.primaryColor && categoriesEqual;
}
var _default = exports.default = (0, _react.memo)(CategorySelector, areEqual);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,