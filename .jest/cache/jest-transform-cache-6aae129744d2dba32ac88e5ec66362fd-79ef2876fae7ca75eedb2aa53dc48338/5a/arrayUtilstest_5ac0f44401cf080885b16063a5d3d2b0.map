{"version":3,"names":["_arrayUtils","require","mockMath","Object","create","global","Math","random","describe","beforeEach","it","input","result","shuffleArray","expect","toEqual","not","toBe","toHaveLength","sort","key","undefined","shuffleAndTake","slice","mainArray","fallbackArray","shuffleWithFallback","every","item","includes","concat","originalReference","shuffleInPlace","id","learnedWords","word","translation","shuffledWords","selectedWords","gameWords","shuffledOptions","oldWords","newWords","randomNewWords","finalSelection","_toConsumableArray2","default","largeArray","Array","from","length","_","i","result1","result2"],"sources":["arrayUtils.test.js"],"sourcesContent":["import { shuffleArray, shuffleAndTake, shuffleWithFallback, shuffleInPlace } from '../../src/utils/arrayUtils';\r\n\r\n// Mock Math.random pour des tests déterministes\r\nconst mockMath = Object.create(global.Math);\r\nmockMath.random = () => 0.5;\r\nglobal.Math = mockMath;\r\n\r\ndescribe('arrayUtils', () => {\r\n  beforeEach(() => {\r\n    // Reset Math.random mock\r\n    mockMath.random = () => 0.5;\r\n  });\r\n\r\n  describe('shuffleArray', () => {\r\n    it('devrait retourner une copie de l\\'array pour un array vide', () => {\r\n      const input = [];\r\n      const result = shuffleArray(input);\r\n      \r\n      expect(result).toEqual([]);\r\n      expect(result).not.toBe(input); // Nouvelle référence\r\n    });\r\n\r\n    it('devrait retourner une copie de l\\'array pour un array avec un seul élément', () => {\r\n      const input = [1];\r\n      const result = shuffleArray(input);\r\n      \r\n      expect(result).toEqual([1]);\r\n      expect(result).not.toBe(input); // Nouvelle référence\r\n    });\r\n\r\n    it('devrait mélanger un array avec plusieurs éléments', () => {\r\n      const input = [1, 2, 3, 4, 5];\r\n      const result = shuffleArray(input);\r\n      \r\n      expect(result).toHaveLength(5);\r\n      expect(result).not.toBe(input); // Nouvelle référence\r\n      expect(result.sort()).toEqual(input.sort()); // Même contenu\r\n    });\r\n\r\n    it('devrait gérer les arrays avec des éléments de différents types', () => {\r\n      const input = [1, 'hello', { key: 'value' }, [1, 2, 3]];\r\n      const result = shuffleArray(input);\r\n      \r\n      expect(result).toHaveLength(4);\r\n      expect(result).not.toBe(input); // Nouvelle référence\r\n      expect(result.sort()).toEqual(input.sort()); // Même contenu\r\n    });\r\n\r\n    it('devrait retourner un array vide pour des entrées invalides', () => {\r\n      expect(shuffleArray(null)).toEqual([]);\r\n      expect(shuffleArray(undefined)).toEqual([]);\r\n      expect(shuffleArray('not an array')).toEqual([]);\r\n      expect(shuffleArray(123)).toEqual([]);\r\n    });\r\n  });\r\n\r\n  describe('shuffleAndTake', () => {\r\n    it('devrait retourner un array vide pour un array vide', () => {\r\n      const result = shuffleAndTake([], 5);\r\n      expect(result).toEqual([]);\r\n    });\r\n\r\n    it('devrait retourner tous les éléments si count est supérieur à la taille', () => {\r\n      const input = [1, 2, 3];\r\n      const result = shuffleAndTake(input, 5);\r\n      \r\n      expect(result).toHaveLength(3);\r\n      expect(result.sort()).toEqual(input.sort());\r\n    });\r\n\r\n    it('devrait retourner exactement count éléments', () => {\r\n      const input = [1, 2, 3, 4, 5];\r\n      const result = shuffleAndTake(input, 3);\r\n      \r\n      expect(result).toHaveLength(3);\r\n      expect(result.sort()).toEqual([1, 2, 3, 4, 5].slice(0, 3).sort());\r\n    });\r\n\r\n    it('devrait gérer count = 0', () => {\r\n      const input = [1, 2, 3, 4, 5];\r\n      const result = shuffleAndTake(input, 0);\r\n      \r\n      expect(result).toEqual([]);\r\n    });\r\n\r\n    it('devrait gérer count négatif', () => {\r\n      const input = [1, 2, 3, 4, 5];\r\n      const result = shuffleAndTake(input, -1);\r\n      \r\n      expect(result).toEqual([]);\r\n    });\r\n  });\r\n\r\n  describe('shuffleWithFallback', () => {\r\n    it('devrait utiliser l\\'array principal s\\'il a assez d\\'éléments', () => {\r\n      const mainArray = [1, 2, 3, 4, 5];\r\n      const fallbackArray = [10, 20, 30];\r\n      const result = shuffleWithFallback(mainArray, fallbackArray, 3);\r\n      \r\n      expect(result).toHaveLength(3);\r\n      expect(result.every(item => mainArray.includes(item))).toBe(true);\r\n    });\r\n\r\n    it('devrait utiliser le fallback si l\\'array principal est vide', () => {\r\n      const mainArray = [];\r\n      const fallbackArray = [10, 20, 30];\r\n      const result = shuffleWithFallback(mainArray, fallbackArray, 2);\r\n      \r\n      expect(result).toHaveLength(2);\r\n      expect(result.every(item => fallbackArray.includes(item))).toBe(true);\r\n    });\r\n\r\n    it('devrait combiner les deux arrays si nécessaire', () => {\r\n      const mainArray = [1, 2];\r\n      const fallbackArray = [10, 20, 30];\r\n      const result = shuffleWithFallback(mainArray, fallbackArray, 4);\r\n      \r\n      expect(result).toHaveLength(4);\r\n      expect(result.every(item => [...mainArray, ...fallbackArray].includes(item))).toBe(true);\r\n    });\r\n\r\n    it('devrait gérer les arrays vides', () => {\r\n      const result = shuffleWithFallback([], [], 5);\r\n      expect(result).toEqual([]);\r\n    });\r\n  });\r\n\r\n  describe('shuffleInPlace', () => {\r\n    it('devrait modifier l\\'array original', () => {\r\n      const input = [1, 2, 3, 4, 5];\r\n      const originalReference = input;\r\n      const result = shuffleInPlace(input);\r\n      \r\n      expect(result).toBe(originalReference); // Même référence\r\n      expect(result).toHaveLength(5);\r\n    });\r\n\r\n    it('devrait retourner l\\'array original pour un array vide', () => {\r\n      const input = [];\r\n      const result = shuffleInPlace(input);\r\n      \r\n      expect(result).toBe(input);\r\n      expect(result).toEqual([]);\r\n    });\r\n\r\n    it('devrait retourner l\\'array original pour un array avec un seul élément', () => {\r\n      const input = [1];\r\n      const result = shuffleInPlace(input);\r\n      \r\n      expect(result).toBe(input);\r\n      expect(result).toEqual([1]);\r\n    });\r\n\r\n    it('devrait gérer les arrays avec des objets', () => {\r\n      const input = [{ id: 1 }, { id: 2 }, { id: 3 }];\r\n      const result = shuffleInPlace(input);\r\n      \r\n      expect(result).toBe(input);\r\n      expect(result).toHaveLength(3);\r\n    });\r\n  });\r\n\r\n  describe('Intégration - Utilisation réelle', () => {\r\n    it('devrait simuler l\\'utilisation dans useRevisionData', () => {\r\n      const learnedWords = [\r\n        { id: 1, word: 'hello', translation: 'bonjour' },\r\n        { id: 2, word: 'world', translation: 'monde' },\r\n        { id: 3, word: 'test', translation: 'test' },\r\n        { id: 4, word: 'example', translation: 'exemple' },\r\n        { id: 5, word: 'sample', translation: 'échantillon' },\r\n      ];\r\n\r\n      // Simuler la sélection de mots pour les révisions\r\n      const shuffledWords = shuffleArray(learnedWords);\r\n      const selectedWords = shuffleAndTake(shuffledWords, 3);\r\n      \r\n      expect(selectedWords).toHaveLength(3);\r\n      expect(selectedWords.every(word => learnedWords.includes(word))).toBe(true);\r\n    });\r\n\r\n    it('devrait simuler l\\'utilisation dans useWordGames', () => {\r\n      const gameWords = ['apple', 'banana', 'cherry', 'date', 'elderberry'];\r\n      \r\n      // Simuler le mélange des options de jeu\r\n      const shuffledOptions = shuffleArray(gameWords);\r\n      \r\n      expect(shuffledOptions).toHaveLength(5);\r\n      expect(shuffledOptions.sort()).toEqual(gameWords.sort());\r\n    });\r\n\r\n    it('devrait simuler l\\'utilisation dans useRevisionManager', () => {\r\n      const oldWords = [{ id: 1, word: 'old1' }, { id: 2, word: 'old2' }];\r\n      const newWords = [{ id: 3, word: 'new1' }, { id: 4, word: 'new2' }, { id: 5, word: 'new3' }];\r\n      \r\n      // Simuler la sélection et le mélange final\r\n      const randomNewWords = shuffleAndTake(newWords, 2);\r\n      const finalSelection = shuffleArray([...oldWords, ...randomNewWords]);\r\n      \r\n      expect(finalSelection).toHaveLength(4);\r\n      expect(finalSelection.every(word => [...oldWords, ...newWords].includes(word))).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('Performance et stabilité', () => {\r\n    it('devrait gérer les grands arrays', () => {\r\n      const largeArray = Array.from({ length: 1000 }, (_, i) => i);\r\n      const result = shuffleArray(largeArray);\r\n      \r\n      expect(result).toHaveLength(1000);\r\n      expect(result).not.toBe(largeArray);\r\n      expect(result.sort()).toEqual(largeArray.sort());\r\n    });\r\n\r\n    it('devrait être déterministe avec le même seed Math.random', () => {\r\n      mockMath.random = () => 0.1;\r\n      const input = [1, 2, 3, 4, 5];\r\n      const result1 = shuffleArray(input);\r\n      \r\n      mockMath.random = () => 0.1;\r\n      const result2 = shuffleArray(input);\r\n      \r\n      expect(result1).toEqual(result2);\r\n    });\r\n  });\r\n});\r\n"],"mappings":"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","ignoreList":[]}