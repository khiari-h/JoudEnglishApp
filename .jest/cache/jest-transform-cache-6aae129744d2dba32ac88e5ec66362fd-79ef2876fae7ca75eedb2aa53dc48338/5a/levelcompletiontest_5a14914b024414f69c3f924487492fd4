fff6e29d59685ac07614c881396cf844
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    },
    useRoute: function useRoute() {
      return {
        params: {}
      };
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _layout = _interopRequireDefault(require("../../app/_layout"));
var _ProgressContext = require("../../src/contexts/ProgressContext");
var _AppProvider = require("../../src/contexts/AppProvider");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Level Completion Integration Test', function () {
  it('should unlock the next level after completing all exercises of a level', (0, _asyncToGenerator2.default)(function* () {
    var completeAllExercises = function completeAllExercises(updateProgress) {
      var levels = ['A1', 'A2', 'B1', 'B2', 'C1'];
      var exercises = ['vocabulary', 'grammar', 'reading', 'listening', 'speaking'];
      levels.forEach(function (level) {
        exercises.forEach(function (exercise) {
          updateProgress(level, exercise, 100);
        });
      });
    };
    var TestComponent = function TestComponent() {
      return (0, _jsxRuntime.jsx)(_AppProvider.AppProvider, {
        children: (0, _jsxRuntime.jsxs)(_ProgressContext.ProgressProvider, {
          children: [(0, _jsxRuntime.jsx)(_ProgressContext.ProgressContext.Consumer, {
            children: function children(_ref2) {
              var updateProgress = _ref2.updateProgress;
              return (0, _jsxRuntime.jsx)("button", {
                testID: "complete-all",
                onPress: function onPress() {
                  return completeAllExercises(updateProgress);
                }
              });
            }
          }), (0, _jsxRuntime.jsx)(_layout.default, {})]
        })
      });
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestComponent, {})),
      getByText = _render.getByText,
      findByText = _render.findByText,
      getByTestId = _render.getByTestId;
    _reactNative.fireEvent.press(getByTestId('complete-all'));
    _reactNative.fireEvent.press(getByText(/Commencer l'apprentissage/i));
    var levelA1 = yield findByText(/Niveau A1 - Termin√©/i);
    expect(levelA1).toBeTruthy();
    var levelA2 = yield findByText(/Niveau A2/i);
    expect(levelA2).toBeTruthy();
    expect(levelA2.props.style.opacity).not.toBe(0.5);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsInVzZU5hdmlnYXRpb24iLCJuYXZpZ2F0ZSIsImZuIiwiZ29CYWNrIiwidXNlUm91dGUiLCJwYXJhbXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9sYXlvdXQiLCJfUHJvZ3Jlc3NDb250ZXh0IiwiX0FwcFByb3ZpZGVyIiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwiaXQiLCJkZWZhdWx0IiwiY29tcGxldGVBbGxFeGVyY2lzZXMiLCJ1cGRhdGVQcm9ncmVzcyIsImxldmVscyIsImV4ZXJjaXNlcyIsImZvckVhY2giLCJsZXZlbCIsImV4ZXJjaXNlIiwiVGVzdENvbXBvbmVudCIsImpzeCIsIkFwcFByb3ZpZGVyIiwiY2hpbGRyZW4iLCJqc3hzIiwiUHJvZ3Jlc3NQcm92aWRlciIsIlByb2dyZXNzQ29udGV4dCIsIkNvbnN1bWVyIiwiX3JlZjIiLCJ0ZXN0SUQiLCJvblByZXNzIiwiX3JlbmRlciIsInJlbmRlciIsImdldEJ5VGV4dCIsImZpbmRCeVRleHQiLCJnZXRCeVRlc3RJZCIsImZpcmVFdmVudCIsInByZXNzIiwibGV2ZWxBMSIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJsZXZlbEEyIiwicHJvcHMiLCJzdHlsZSIsIm9wYWNpdHkiLCJub3QiLCJ0b0JlIl0sInNvdXJjZXMiOlsibGV2ZWwtY29tcGxldGlvbi50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IEFwcCBmcm9tICcuLi8uLi9hcHAvX2xheW91dCc7XG5pbXBvcnQgeyBQcm9ncmVzc1Byb3ZpZGVyLCBQcm9ncmVzc0NvbnRleHQgfSBmcm9tICcuLi8uLi9zcmMvY29udGV4dHMvUHJvZ3Jlc3NDb250ZXh0JztcbmltcG9ydCB7IEFwcFByb3ZpZGVyIH0gZnJvbSAnLi4vLi4vc3JjL2NvbnRleHRzL0FwcFByb3ZpZGVyJztcblxuamVzdC5tb2NrKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnLCAoKSA9PiAoe1xuICAuLi5qZXN0LnJlcXVpcmVBY3R1YWwoJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScpLFxuICB1c2VOYXZpZ2F0aW9uOiAoKSA9PiAoe1xuICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXG4gICAgZ29CYWNrOiBqZXN0LmZuKCksXG4gIH0pLFxuICB1c2VSb3V0ZTogKCkgPT4gKHtcbiAgICBwYXJhbXM6IHt9LFxuICB9KSxcbn0pKTtcblxuZGVzY3JpYmUoJ0xldmVsIENvbXBsZXRpb24gSW50ZWdyYXRpb24gVGVzdCcsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCB1bmxvY2sgdGhlIG5leHQgbGV2ZWwgYWZ0ZXIgY29tcGxldGluZyBhbGwgZXhlcmNpc2VzIG9mIGEgbGV2ZWwnLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gRm9uY3Rpb24gcG91ciBzaW11bGVyIGxhIGNvbXBsw6l0aW9uIGRlIHRvdXMgbGVzIGV4ZXJjaWNlcyBkJ3VuIG5pdmVhdVxuICAgIGNvbnN0IGNvbXBsZXRlQWxsRXhlcmNpc2VzID0gKHVwZGF0ZVByb2dyZXNzKSA9PiB7XG4gICAgICBjb25zdCBsZXZlbHMgPSBbJ0ExJywgJ0EyJywgJ0IxJywgJ0IyJywgJ0MxJ107XG4gICAgICBjb25zdCBleGVyY2lzZXMgPSBbJ3ZvY2FidWxhcnknLCAnZ3JhbW1hcicsICdyZWFkaW5nJywgJ2xpc3RlbmluZycsICdzcGVha2luZyddO1xuICAgICAgbGV2ZWxzLmZvckVhY2gobGV2ZWwgPT4ge1xuICAgICAgICBleGVyY2lzZXMuZm9yRWFjaChleGVyY2lzZSA9PiB7XG4gICAgICAgICAgdXBkYXRlUHJvZ3Jlc3MobGV2ZWwsIGV4ZXJjaXNlLCAxMDApO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBUZXN0Q29tcG9uZW50ID0gKCkgPT4gKFxuICAgICAgPEFwcFByb3ZpZGVyPlxuICAgICAgICA8UHJvZ3Jlc3NQcm92aWRlcj5cbiAgICAgICAgICA8UHJvZ3Jlc3NDb250ZXh0LkNvbnN1bWVyPlxuICAgICAgICAgICAgeyh7IHVwZGF0ZVByb2dyZXNzIH0pID0+IChcbiAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgIHRlc3RJRD1cImNvbXBsZXRlLWFsbFwiXG4gICAgICAgICAgICAgICAgb25QcmVzcz17KCkgPT4gY29tcGxldGVBbGxFeGVyY2lzZXModXBkYXRlUHJvZ3Jlc3MpfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L1Byb2dyZXNzQ29udGV4dC5Db25zdW1lcj5cbiAgICAgICAgICA8QXBwIC8+XG4gICAgICAgIDwvUHJvZ3Jlc3NQcm92aWRlcj5cbiAgICAgIDwvQXBwUHJvdmlkZXI+XG4gICAgKTtcblxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0LCBmaW5kQnlUZXh0LCBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxUZXN0Q29tcG9uZW50IC8+KTtcblxuICAgIC8vIDEuIFNpbXVsZXIgbGEgY29tcGzDqXRpb24gZGUgdG91cyBsZXMgZXhlcmNpY2VzIGR1IG5pdmVhdSBBMVxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnY29tcGxldGUtYWxsJykpO1xuXG4gICAgLy8gMi4gTmF2aWd1ZXIgdmVycyBsYSBzw6lsZWN0aW9uIGRlIG5pdmVhdVxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoL0NvbW1lbmNlciBsJ2FwcHJlbnRpc3NhZ2UvaSkpO1xuXG4gICAgLy8gMy4gVsOpcmlmaWVyIHF1ZSBsZSBuaXZlYXUgQTEgZXN0IG1hcnF1w6kgY29tbWUgY29tcGxldFxuICAgIGNvbnN0IGxldmVsQTEgPSBhd2FpdCBmaW5kQnlUZXh0KC9OaXZlYXUgQTEgLSBUZXJtaW7DqS9pKTtcbiAgICBleHBlY3QobGV2ZWxBMSkudG9CZVRydXRoeSgpO1xuXG4gICAgLy8gNC4gVsOpcmlmaWVyIHF1ZSBsZSBuaXZlYXUgQTIgZXN0IG1haW50ZW5hbnQgZMOpYmxvcXXDqVxuICAgIGNvbnN0IGxldmVsQTIgPSBhd2FpdCBmaW5kQnlUZXh0KC9OaXZlYXUgQTIvaSk7XG4gICAgZXhwZWN0KGxldmVsQTIpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QobGV2ZWxBMi5wcm9wcy5zdHlsZS5vcGFjaXR5KS5ub3QudG9CZSgwLjUpOyAvLyBTdXBwb3NhbnQgcXUndW4gbml2ZWF1IGJsb3F1w6kgYSB1bmUgb3BhY2l0w6kgcsOpZHVpdGVcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBT0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDBCQUEwQixFQUFFO0VBQUEsT0FBQUMsTUFBQSxDQUFBQyxNQUFBLEtBQ2pDQyxJQUFJLENBQUNDLGFBQWEsQ0FBQywwQkFBMEIsQ0FBQztJQUNqREMsYUFBYSxFQUFFLFNBQWZBLGFBQWFBLENBQUE7TUFBQSxPQUFTO1FBQ3BCQyxRQUFRLEVBQUVILElBQUksQ0FBQ0ksRUFBRSxDQUFDLENBQUM7UUFDbkJDLE1BQU0sRUFBRUwsSUFBSSxDQUFDSSxFQUFFLENBQUM7TUFDbEIsQ0FBQztJQUFBLENBQUM7SUFDRkUsUUFBUSxFQUFFLFNBQVZBLFFBQVFBLENBQUE7TUFBQSxPQUFTO1FBQ2ZDLE1BQU0sRUFBRSxDQUFDO01BQ1gsQ0FBQztJQUFBO0VBQUM7QUFBQSxDQUNGLENBQUM7QUFBQyxJQUFBQyxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsa0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQWZKLElBQUFFLE1BQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLFlBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJ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