254462495aa78bf3b0582cd78e78aa3c
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeElementVisible = makeElementVisible;
exports.setElementPosition = setElementPosition;
exports.snapshots = void 0;
var _jsReanimated = require("../../js-reanimated");
var snapshots = exports.snapshots = new WeakMap();
function makeElementVisible(element, delay) {
  if (delay === 0) {
    (0, _jsReanimated._updatePropsJS)({
      visibility: 'initial'
    }, element);
  } else {
    setTimeout(function () {
      (0, _jsReanimated._updatePropsJS)({
        visibility: 'initial'
      }, element);
    }, delay * 1000);
  }
}
function fixElementPosition(element, parent, snapshot) {
  var parentRect = parent.getBoundingClientRect();
  var parentBorderTopValue = parseInt(getComputedStyle(parent).borderTopWidth);
  var parentBorderLeftValue = parseInt(getComputedStyle(parent).borderLeftWidth);
  var dummyRect = element.getBoundingClientRect();
  if (dummyRect.top !== snapshot.top) {
    element.style.top = `${snapshot.top - parentRect.top - parentBorderTopValue}px`;
  }
  if (dummyRect.left !== snapshot.left) {
    element.style.left = `${snapshot.left - parentRect.left - parentBorderLeftValue}px`;
  }
}
function setElementPosition(element, snapshot) {
  element.style.transform = '';
  element.style.position = 'absolute';
  element.style.top = `${snapshot.top}px`;
  element.style.left = `${snapshot.left}px`;
  element.style.width = `${snapshot.width}px`;
  element.style.height = `${snapshot.height}px`;
  element.style.margin = '0px';
  if (element.parentElement) {
    fixElementPosition(element, element.parentElement, snapshot);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1ha2VFbGVtZW50VmlzaWJsZSIsInNldEVsZW1lbnRQb3NpdGlvbiIsInNuYXBzaG90cyIsIl9qc1JlYW5pbWF0ZWQiLCJyZXF1aXJlIiwiV2Vha01hcCIsImVsZW1lbnQiLCJkZWxheSIsIl91cGRhdGVQcm9wc0pTIiwidmlzaWJpbGl0eSIsInNldFRpbWVvdXQiLCJmaXhFbGVtZW50UG9zaXRpb24iLCJwYXJlbnQiLCJzbmFwc2hvdCIsInBhcmVudFJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJwYXJlbnRCb3JkZXJUb3BWYWx1ZSIsInBhcnNlSW50IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImJvcmRlclRvcFdpZHRoIiwicGFyZW50Qm9yZGVyTGVmdFZhbHVlIiwiYm9yZGVyTGVmdFdpZHRoIiwiZHVtbXlSZWN0IiwidG9wIiwic3R5bGUiLCJsZWZ0IiwidHJhbnNmb3JtIiwicG9zaXRpb24iLCJ3aWR0aCIsImhlaWdodCIsIm1hcmdpbiIsInBhcmVudEVsZW1lbnQiXSwic291cmNlcyI6WyJjb21wb25lbnRTdHlsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7IF91cGRhdGVQcm9wc0pTIH0gZnJvbSAnLi4vLi4vanMtcmVhbmltYXRlZCc7XG5pbXBvcnQgdHlwZSB7IFJlYW5pbWF0ZWRIVE1MRWxlbWVudCB9IGZyb20gJy4uLy4uL2pzLXJlYW5pbWF0ZWQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlYW5pbWF0ZWRTbmFwc2hvdCB7XG4gIHRvcDogbnVtYmVyO1xuICBsZWZ0OiBudW1iZXI7XG4gIHdpZHRoOiBudW1iZXI7XG4gIGhlaWdodDogbnVtYmVyO1xuICBzY3JvbGxPZmZzZXRzOiBTY3JvbGxPZmZzZXRzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNjcm9sbE9mZnNldHMge1xuICBzY3JvbGxUb3BPZmZzZXQ6IG51bWJlcjtcbiAgc2Nyb2xsTGVmdE9mZnNldDogbnVtYmVyO1xufVxuXG5leHBvcnQgY29uc3Qgc25hcHNob3RzID0gbmV3IFdlYWtNYXA8SFRNTEVsZW1lbnQsIFJlYW5pbWF0ZWRTbmFwc2hvdD4oKTtcblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VFbGVtZW50VmlzaWJsZShlbGVtZW50OiBIVE1MRWxlbWVudCwgZGVsYXk6IG51bWJlcikge1xuICBpZiAoZGVsYXkgPT09IDApIHtcbiAgICBfdXBkYXRlUHJvcHNKUyh7IHZpc2liaWxpdHk6ICdpbml0aWFsJyB9LCBlbGVtZW50IGFzIFJlYW5pbWF0ZWRIVE1MRWxlbWVudCk7XG4gIH0gZWxzZSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBfdXBkYXRlUHJvcHNKUyhcbiAgICAgICAgeyB2aXNpYmlsaXR5OiAnaW5pdGlhbCcgfSxcbiAgICAgICAgZWxlbWVudCBhcyBSZWFuaW1hdGVkSFRNTEVsZW1lbnRcbiAgICAgICk7XG4gICAgfSwgZGVsYXkgKiAxMDAwKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaXhFbGVtZW50UG9zaXRpb24oXG4gIGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICBwYXJlbnQ6IEhUTUxFbGVtZW50LFxuICBzbmFwc2hvdDogUmVhbmltYXRlZFNuYXBzaG90XG4pIHtcbiAgY29uc3QgcGFyZW50UmVjdCA9IHBhcmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICBjb25zdCBwYXJlbnRCb3JkZXJUb3BWYWx1ZSA9IHBhcnNlSW50KFxuICAgIGdldENvbXB1dGVkU3R5bGUocGFyZW50KS5ib3JkZXJUb3BXaWR0aFxuICApO1xuXG4gIGNvbnN0IHBhcmVudEJvcmRlckxlZnRWYWx1ZSA9IHBhcnNlSW50KFxuICAgIGdldENvbXB1dGVkU3R5bGUocGFyZW50KS5ib3JkZXJMZWZ0V2lkdGhcbiAgKTtcblxuICBjb25zdCBkdW1teVJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QgcmV0dXJucyBET01SZWN0IHdpdGggcG9zaXRpb24gb2YgdGhlIGVsZW1lbnQgd2l0aCByZXNwZWN0IHRvIGRvY3VtZW50IGJvZHkuXG4gIC8vIEhvd2V2ZXIsIHVzaW5nIHBvc2l0aW9uIGBhYnNvbHV0ZWAgZG9lc24ndCBndWFyYW50ZWUsIHRoYXQgdGhlIGR1bW15IHdpbGwgYmUgcGxhY2VkIHJlbGF0aXZlIHRvIGJvZHkgZWxlbWVudC5cbiAgLy8gVGhlIHRyaWNrIGJlbG93IGFsbG93cyB1cyB0byBvbmNlIGFnYWluIGdldCBwb3NpdGlvbiByZWxhdGl2ZSB0byBib2R5LCBieSBjb21wYXJpbmcgc25hcHNob3Qgd2l0aCBuZXcgcG9zaXRpb24gb2YgdGhlIGR1bW15LlxuICBpZiAoZHVtbXlSZWN0LnRvcCAhPT0gc25hcHNob3QudG9wKSB7XG4gICAgZWxlbWVudC5zdHlsZS50b3AgPSBgJHtcbiAgICAgIHNuYXBzaG90LnRvcCAtIHBhcmVudFJlY3QudG9wIC0gcGFyZW50Qm9yZGVyVG9wVmFsdWVcbiAgICB9cHhgO1xuICB9XG5cbiAgaWYgKGR1bW15UmVjdC5sZWZ0ICE9PSBzbmFwc2hvdC5sZWZ0KSB7XG4gICAgZWxlbWVudC5zdHlsZS5sZWZ0ID0gYCR7XG4gICAgICBzbmFwc2hvdC5sZWZ0IC0gcGFyZW50UmVjdC5sZWZ0IC0gcGFyZW50Qm9yZGVyTGVmdFZhbHVlXG4gICAgfXB4YDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0RWxlbWVudFBvc2l0aW9uKFxuICBlbGVtZW50OiBIVE1MRWxlbWVudCxcbiAgc25hcHNob3Q6IFJlYW5pbWF0ZWRTbmFwc2hvdFxuKSB7XG4gIGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gJyc7XG4gIGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICBlbGVtZW50LnN0eWxlLnRvcCA9IGAke3NuYXBzaG90LnRvcH1weGA7XG4gIGVsZW1lbnQuc3R5bGUubGVmdCA9IGAke3NuYXBzaG90LmxlZnR9cHhgO1xuICBlbGVtZW50LnN0eWxlLndpZHRoID0gYCR7c25hcHNob3Qud2lkdGh9cHhgO1xuICBlbGVtZW50LnN0eWxlLmhlaWdodCA9IGAke3NuYXBzaG90LmhlaWdodH1weGA7XG4gIGVsZW1lbnQuc3R5bGUubWFyZ2luID0gJzBweCc7IC8vIHRtcEVsZW1lbnQgaGFzIGFic29sdXRlIHBvc2l0aW9uLCBzbyBtYXJnaW4gaXMgbm90IG5lY2Vzc2FyeVxuXG4gIGlmIChlbGVtZW50LnBhcmVudEVsZW1lbnQpIHtcbiAgICBmaXhFbGVtZW50UG9zaXRpb24oZWxlbWVudCwgZWxlbWVudC5wYXJlbnRFbGVtZW50LCBzbmFwc2hvdCk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFBQ0EsTUFBQSxDQUFBQyxjQUFBLENBQUFDLE9BQUE7RUFBQUMsS0FBQTtBQUFBO0FBQUFELE9BQUEsQ0FBQUUsa0JBQUEsR0FBQUEsa0JBQUE7QUFBQUYsT0FBQSxDQUFBRyxrQkFBQSxHQUFBQSxrQkFBQTtBQUFBSCxPQUFBLENBQUFJLFNBQUE7QUFFYixJQUFBQyxhQUFBLEdBQUFDLE9BQUE7QUFnQk8sSUFBTUYsU0FBUyxHQUFBSixPQUFBLENBQUFJLFNBQUEsR0FBRyxJQUFJRyxPQUFPLENBQWtDLENBQUM7QUFFaEUsU0FBU0wsa0JBQWtCQSxDQUFDTSxPQUFvQixFQUFFQyxLQUFhLEVBQUU7RUFDdEUsSUFBSUEsS0FBSyxLQUFLLENBQUMsRUFBRTtJQUNmLElBQUFDLDRCQUFjLEVBQUM7TUFBRUMsVUFBVSxFQUFFO0lBQVUsQ0FBQyxFQUFFSCxPQUFnQyxDQUFDO0VBQzdFLENBQUMsTUFBTTtJQUNMSSxVQUFVLENBQUMsWUFBTTtNQUNmLElBQUFGLDRCQUFjLEVBQ1o7UUFBRUMsVUFBVSxFQUFFO01BQVUsQ0FBQyxFQUN6QkgsT0FDRixDQUFDO0lBQ0gsQ0FBQyxFQUFFQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0VBQ2xCO0FBQ0Y7QUFFQSxTQUFTSSxrQkFBa0JBLENBQ3pCTCxPQUFvQixFQUNwQk0sTUFBbUIsRUFDbkJDLFFBQTRCLEVBQzVCO0VBQ0EsSUFBTUMsVUFBVSxHQUFHRixNQUFNLENBQUNHLHFCQUFxQixDQUFDLENBQUM7RUFFakQsSUFBTUMsb0JBQW9CLEdBQUdDLFFBQVEsQ0FDbkNDLGdCQUFnQixDQUFDTixNQUFNLENBQUMsQ0FBQ08sY0FDM0IsQ0FBQztFQUVELElBQU1DLHFCQUFxQixHQUFHSCxRQUFRLENBQ3BDQyxnQkFBZ0IsQ0FBQ04sTUFBTSxDQUFDLENBQUNTLGVBQzNCLENBQUM7RUFFRCxJQUFNQyxTQUFTLEdBQUdoQixPQUFPLENBQUNTLHFCQUFxQixDQUFDLENBQUM7RUFJakQsSUFBSU8sU0FBUyxDQUFDQyxHQUFHLEtBQUtWLFFBQVEsQ0FBQ1UsR0FBRyxFQUFFO0lBQ2xDakIsT0FBTyxDQUFDa0IsS0FBSyxDQUFDRCxHQUFHLEdBQUcsR0FDbEJWLFFBQVEsQ0FBQ1UsR0FBRyxHQUFHVCxVQUFVLENBQUNTLEdBQUcsR0FBR1Asb0JBQW9CLElBQ2xEO0VBQ047RUFFQSxJQUFJTSxTQUFTLENBQUNHLElBQUksS0FBS1osUUFBUSxDQUFDWSxJQUFJLEVBQUU7SUFDcENuQixPQUFPLENBQUNrQixLQUFLLENBQUNDLElBQUksR0FBRyxHQUNuQlosUUFBUSxDQUFDWSxJQUFJLEdBQUdYLFVBQVUsQ0FBQ1csSUFBSSxHQUFHTCxxQkFBcUIsSUFDckQ7RUFDTjtBQUNGO0FBRU8sU0FBU25CLGtCQUFrQkEsQ0FDaENLLE9BQW9CLEVBQ3BCTyxRQUE0QixFQUM1QjtFQUNBUCxPQUFPLENBQUNrQixLQUFLLENBQUNFLFNBQVMsR0FBRyxFQUFFO0VBQzVCcEIsT0FBTyxDQUFDa0IsS0FBSyxDQUFDRyxRQUFRLEdBQUcsVUFBVTtFQUNuQ3JCLE9BQU8sQ0FBQ2tCLEtBQUssQ0FBQ0QsR0FBRyxHQUFHLEdBQUdWLFFBQVEsQ0FBQ1UsR0FBRyxJQUFJO0VBQ3ZDakIsT0FBTyxDQUFDa0IsS0FBSyxDQUFDQyxJQUFJLEdBQUcsR0FBR1osUUFBUSxDQUFDWSxJQUFJLElBQUk7RUFDekNuQixPQUFPLENBQUNrQixLQUFLLENBQUNJLEtBQUssR0FBRyxHQUFHZixRQUFRLENBQUNlLEtBQUssSUFBSTtFQUMzQ3RCLE9BQU8sQ0FBQ2tCLEtBQUssQ0FBQ0ssTUFBTSxHQUFHLEdBQUdoQixRQUFRLENBQUNnQixNQUFNLElBQUk7RUFDN0N2QixPQUFPLENBQUNrQixLQUFLLENBQUNNLE1BQU0sR0FBRyxLQUFLO0VBRTVCLElBQUl4QixPQUFPLENBQUN5QixhQUFhLEVBQUU7SUFDekJwQixrQkFBa0IsQ0FBQ0wsT0FBTyxFQUFFQSxPQUFPLENBQUN5QixhQUFhLEVBQUVsQixRQUFRLENBQUM7RUFDOUQ7QUFDRiIsImlnbm9yZUxpc3QiOltdfQ==