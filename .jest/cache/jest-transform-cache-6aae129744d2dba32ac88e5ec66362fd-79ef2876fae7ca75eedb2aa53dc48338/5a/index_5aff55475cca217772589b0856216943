565b7b7fda9381d97c8e5232f687cb6c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _reactNative = require("react-native");
var _expoRouter = require("expo-router");
var _Container = _interopRequireWildcard(require("../../../components/layout/Container"));
var _ReadingHeader = _interopRequireDefault(require("./ReadingHeader"));
var _ReadingTextSelector = _interopRequireDefault(require("./ReadingTextSelector"));
var _ReadingProgress = _interopRequireDefault(require("./ReadingProgress"));
var _ReadingText = _interopRequireDefault(require("./ReadingText"));
var _ReadingQuestionCard = _interopRequireDefault(require("./ReadingQuestionCard"));
var _QuestionIndicators = _interopRequireDefault(require("./QuestionIndicators"));
var _ReadingNavigation = _interopRequireDefault(require("./ReadingNavigation"));
var _ExerciseFeedback = _interopRequireDefault(require("../../../components/exercise-common/ExerciseFeedback"));
var _InstructionBox = _interopRequireDefault(require("../../../components/exercise-common/InstructionBox"));
var _useReading2 = _interopRequireDefault(require("./hooks/useReading"));
var _useLastActivity2 = _interopRequireDefault(require("../../../hooks/useLastActivity"));
var _readingDataHelper = require("../../../utils/reading/readingDataHelper");
var _style = _interopRequireDefault(require("./style"));
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var ReadingExercise = function ReadingExercise(_ref) {
  var route = _ref.route;
  var _ref2 = (route == null ? void 0 : route.params) || {},
    _ref2$level = _ref2.level,
    level = _ref2$level === void 0 ? "A1" : _ref2$level;
  var styles = (0, _style.default)();
  var _useLastActivity = (0, _useLastActivity2.default)(),
    saveActivity = _useLastActivity.saveActivity;
  var levelColor = (0, _readingDataHelper.getLevelColor)(level);
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    readingData = _useState2[0],
    setReadingData = _useState2[1];
  var exercises = (readingData == null ? void 0 : readingData.exercises) || [];
  (0, _react.useEffect)(function () {
    var isMounted = true;
    var load = function () {
      var _ref3 = (0, _asyncToGenerator2.default)(function* () {
        if (process.env.JEST_WORKER_ID) {
          var _data = (0, _readingDataHelper.getReadingData)(level);
          if (isMounted) setReadingData(_data);
          return;
        }
        var data = yield (0, _readingDataHelper.loadReadingData)(level);
        if (isMounted) setReadingData(data);
      });
      return function load() {
        return _ref3.apply(this, arguments);
      };
    }();
    load();
    return function () {
      isMounted = false;
    };
  }, [level]);
  var _useReading = (0, _useReading2.default)(exercises, level),
    selectedExerciseIndex = _useReading.selectedExerciseIndex,
    currentQuestionIndex = _useReading.currentQuestionIndex,
    selectedAnswer = _useReading.selectedAnswer,
    showFeedback = _useReading.showFeedback,
    textExpanded = _useReading.textExpanded,
    attempts = _useReading.attempts,
    completedQuestions = _useReading.completedQuestions,
    loaded = _useReading.loaded,
    showDetailedProgress = _useReading.showDetailedProgress,
    currentExercise = _useReading.currentExercise,
    currentQuestion = _useReading.currentQuestion,
    totalQuestions = _useReading.totalQuestions,
    isCorrect = _useReading.isCorrect,
    changeExercise = _useReading.changeExercise,
    changeQuestion = _useReading.changeQuestion,
    selectAnswer = _useReading.selectAnswer,
    submitAnswer = _useReading.submitAnswer,
    nextQuestion = _useReading.nextQuestion,
    previousQuestion = _useReading.previousQuestion,
    retryQuestion = _useReading.retryQuestion,
    toggleTextExpansion = _useReading.toggleTextExpansion,
    toggleDetailedProgress = _useReading.toggleDetailedProgress,
    scrollViewRef = _useReading.scrollViewRef,
    textsScrollViewRef = _useReading.textsScrollViewRef,
    fadeAnim = _useReading.fadeAnim,
    slideAnim = _useReading.slideAnim;
  (0, _react.useEffect)(function () {
    if (!loaded || exercises.length === 0 || !currentExercise || !currentQuestion) return;
    try {
      saveActivity({
        title: "Lecture",
        level: level,
        type: "reading",
        metadata: {
          word: selectedExerciseIndex,
          totalWords: exercises.length,
          exercise: selectedExerciseIndex,
          question: currentQuestionIndex,
          totalQuestions: totalQuestions,
          exerciseTitle: currentExercise.title || `Texte ${selectedExerciseIndex + 1}`,
          totalExercises: exercises.length
        }
      });
    } catch (error) {
      console.error('Error saving activity:', error);
    }
  }, [selectedExerciseIndex, currentQuestionIndex]);
  var handleBackPress = (0, _react.useCallback)(function () {
    _expoRouter.router.push({
      pathname: "/tabs/exerciseSelection",
      params: {
        level: level
      }
    });
  }, [level]);
  var handleNext = (0, _react.useCallback)(function () {
    if (showFeedback) {
      nextQuestion();
    } else {
      submitAnswer();
    }
  }, [showFeedback, nextQuestion, submitAnswer]);
  var handleExerciseProgressPress = (0, _react.useCallback)(function (index) {
    changeExercise(index);
  }, [changeExercise]);
  var handleToggleProgressDetails = (0, _react.useCallback)(function () {
    toggleDetailedProgress();
  }, [toggleDetailedProgress]);
  if (!loaded || !exercises.length) {
    return (0, _jsxRuntime.jsx)(_Container.default, {
      safeArea: true,
      safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
      backgroundColor: "#f8fafc",
      statusBarStyle: "dark-content",
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.loadingContainer,
        children: (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
          size: "large",
          color: levelColor,
          testID: "activity-indicator"
        })
      })
    });
  }
  return (0, _jsxRuntime.jsxs)(_Container.default, {
    safeArea: true,
    safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
    withScrollView: true,
    backgroundColor: "#f8fafc",
    statusBarStyle: "dark-content",
    withPadding: false,
    scrollViewProps: {
      ref: scrollViewRef,
      showsVerticalScrollIndicator: false,
      contentContainerStyle: styles.scrollContent
    },
    children: [(0, _jsxRuntime.jsx)(_ReadingHeader.default, {
      level: level,
      onBackPress: handleBackPress
    }), (0, _jsxRuntime.jsx)(_ReadingProgress.default, {
      readingData: readingData,
      completedQuestions: completedQuestions,
      levelColor: levelColor,
      expanded: showDetailedProgress,
      onToggleExpand: handleToggleProgressDetails,
      onExercisePress: handleExerciseProgressPress
    }), (0, _jsxRuntime.jsx)(_ReadingTextSelector.default, {
      exercises: exercises,
      selectedIndex: selectedExerciseIndex,
      onSelectExercise: changeExercise,
      scrollViewRef: textsScrollViewRef,
      levelColor: levelColor
    }), (0, _jsxRuntime.jsx)(_InstructionBox.default, {
      title: "\uD83D\uDCD6 Reading Exercise",
      instructions: "Read the text carefully and answer the questions.",
      variant: "compact",
      primaryColor: levelColor,
      initiallyExpanded: false
    }), (0, _jsxRuntime.jsx)(_ReadingText.default, {
      exercise: currentExercise,
      textExpanded: textExpanded,
      onToggleExpand: toggleTextExpansion,
      levelColor: levelColor
    }), currentQuestion && (0, _jsxRuntime.jsx)(_ReadingQuestionCard.default, {
      question: currentQuestion,
      questionIndex: currentQuestionIndex,
      selectedAnswer: selectedAnswer,
      onSelectAnswer: selectAnswer,
      showFeedback: showFeedback,
      fadeAnim: fadeAnim,
      slideAnim: slideAnim,
      levelColor: levelColor
    }), showFeedback && currentQuestion && (0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
      type: isCorrect ? "success" : "error",
      message: isCorrect ? "ðŸŽ‰ Perfect!" : "ðŸ¤” Not quite...",
      explanation: isCorrect ? currentQuestion.explanation : attempts > 1 ? `ðŸ’¡ The correct answer is: ${currentQuestion.options[currentQuestion.correctAnswer]}` : "ðŸ’ª Try again!",
      showDismissButton: false
    }), (0, _jsxRuntime.jsx)(_QuestionIndicators.default, {
      totalQuestions: totalQuestions,
      currentQuestionIndex: currentQuestionIndex,
      completedQuestions: completedQuestions[selectedExerciseIndex] || [],
      onSelectQuestion: changeQuestion,
      levelColor: levelColor
    }), (0, _jsxRuntime.jsx)(_ReadingNavigation.default, {
      showFeedback: showFeedback,
      isCorrect: isCorrect,
      selectedAnswer: selectedAnswer,
      currentQuestionIndex: currentQuestionIndex,
      totalQuestions: totalQuestions,
      attempts: attempts,
      levelColor: levelColor,
      onNext: handleNext,
      onPrevious: previousQuestion,
      onRetry: retryQuestion
    })]
  });
};
var _default = exports.default = ReadingExercise;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,