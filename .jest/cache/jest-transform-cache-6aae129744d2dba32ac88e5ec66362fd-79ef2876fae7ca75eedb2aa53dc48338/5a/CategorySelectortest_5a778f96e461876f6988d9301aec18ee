26ded860cc401dab2cdee82f5a8822e1
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  return Object.assign({}, RN, {
    Animated: Object.assign({}, RN.Animated, {
      Value: MockAnimatedValue,
      timing: mockTiming,
      parallel: mockParallel,
      multiply: mockMultiply,
      View: RN.Animated.View
    }),
    ScrollView: RN.ScrollView,
    TouchableOpacity: RN.TouchableOpacity,
    Text: RN.Text,
    View: RN.View
  });
});
_getJestObj().mock('expo-linear-gradient', function () {
  return {
    LinearGradient: function LinearGradient(_ref) {
      var children = _ref.children,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      var _require = require('react-native'),
        View = _require.View;
      return (0, _jsxRuntime.jsx)(View, Object.assign({
        testID: "linear-gradient"
      }, props, {
        children: children
      }));
    }
  };
});
_getJestObj().mock('../../../src/components/exercise-common/CategorySelector/style', function () {
  var _require2 = require('react-native'),
    StyleSheet = _require2.StyleSheet;
  return function () {
    return StyleSheet.create({
      container: {},
      backgroundGradient: {},
      scrollView: {},
      scrollContent: {},
      categoryItemWrapper: {},
      categoryTouchable: {},
      selectedCategoryItem: {},
      selectedInner: {},
      selectedCategoryText: {
        color: '#FFFFFF'
      },
      sparkleContainer: {},
      sparkle: {},
      categoryItem: {},
      categoryInner: {},
      categoryText: {}
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _CategorySelector = _interopRequireWildcard(require("../../../src/components/exercise-common/CategorySelector"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockStart = jest.fn(function (callback) {
  if (callback) {
    setImmediate(function () {
      (0, _reactNative.act)(function () {
        callback();
      });
    });
  }
});
var mockTiming = jest.fn(function () {
  return {
    start: mockStart
  };
});
var mockParallel = jest.fn(function () {
  return {
    start: mockStart
  };
});
var MockAnimatedValue = jest.fn().mockImplementation(function (initialValue) {
  var mockValue = {
    _value: initialValue,
    interpolate: jest.fn(function () {
      return {
        _nativeTag: 1
      };
    }),
    setValue: jest.fn(),
    addListener: jest.fn(),
    removeListener: jest.fn(),
    removeAllListeners: jest.fn(),
    stopAnimation: jest.fn(),
    resetAnimation: jest.fn()
  };
  return mockValue;
});
var mockMultiply = jest.fn(function (anim1, anim2) {
  return {
    _nativeTag: 1,
    interpolate: jest.fn(function () {
      return {
        _nativeTag: 1
      };
    })
  };
});
describe('CategorySelector', function () {
  var categories = [{
    id: '1',
    name: 'Grammar'
  }, {
    id: '2',
    name: 'Vocabulary'
  }, {
    id: '3',
    name: 'Reading'
  }];
  beforeEach(function () {
    jest.clearAllMocks();
    MockAnimatedValue.mockClear();
    mockTiming.mockClear();
    mockParallel.mockClear();
    mockStart.mockClear();
    mockMultiply.mockClear();
  });
  describe('Basic rendering', function () {
    it('should render all categories correctly', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          onSelectCategory: function onSelectCategory() {}
        })),
        getByText = _render.getByText;
      expect(getByText('Grammar')).toBeTruthy();
      expect(getByText('Vocabulary')).toBeTruthy();
      expect(getByText('Reading')).toBeTruthy();
    });
    it('should display sparkle for selected category', function () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: function onSelectCategory() {}
        })),
        getByText = _render2.getByText;
      expect(getByText('âœ¨')).toBeTruthy();
    });
  });
  describe('User interactions', function () {
    it('should call onSelectCategory when category is pressed', (0, _asyncToGenerator2.default)(function* () {
      var onSelectCategory = jest.fn();
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          onSelectCategory: onSelectCategory
        })),
        getByText = _render3.getByText;
      _reactNative.fireEvent.press(getByText('Vocabulary'));
      yield (0, _reactNative.waitFor)(function () {
        expect(onSelectCategory).toHaveBeenCalledWith('2');
      });
    }));
    it('should not call onSelectCategory for already selected category', function () {
      var onSelectCategory = jest.fn();
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        })),
        getByText = _render4.getByText;
      _reactNative.fireEvent.press(getByText('Grammar'));
      expect(onSelectCategory).not.toHaveBeenCalled();
    });
  });
  describe('Animations', function () {
    it('should trigger parallel animations when selectedCategory changes', (0, _asyncToGenerator2.default)(function* () {
      var onSelectCategory = jest.fn();
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        })),
        rerender = _render5.rerender;
      mockTiming.mockClear();
      mockParallel.mockClear();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "2",
          onSelectCategory: onSelectCategory
        }));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockParallel).toHaveBeenCalledTimes(1);
        expect(mockTiming).toHaveBeenCalledTimes(2);
      });
    }));
    it('should prevent animation conflicts with isAnimatingRef', (0, _asyncToGenerator2.default)(function* () {
      var onSelectCategory = jest.fn();
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        })),
        rerender = _render6.rerender;
      mockParallel.mockClear();
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "2",
        onSelectCategory: onSelectCategory
      }));
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "3",
        onSelectCategory: onSelectCategory
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockParallel).toHaveBeenCalledTimes(1);
      });
      expect(mockParallel).toHaveBeenCalledTimes(1);
    }));
  });
  describe('Dynamic category management', function () {
    it('should handle category addition without crashing', (0, _asyncToGenerator2.default)(function* () {
      var onSelectCategory = jest.fn();
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        })),
        rerender = _render7.rerender;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: [].concat(categories, [{
            id: '4',
            name: 'Writing'
          }]),
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        }));
      }));
      expect(function () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: [].concat(categories, [{
            id: '4',
            name: 'Writing'
          }]),
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        }));
      }).not.toThrow();
    }));
    it('should handle category removal without crashing', (0, _asyncToGenerator2.default)(function* () {
      var onSelectCategory = jest.fn();
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        })),
        rerender = _render8.rerender;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: [categories[0]],
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        }));
      }));
      expect(function () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: [categories[0]],
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        }));
      }).not.toThrow();
    }));
  });
  describe('areEqual memoization', function () {
    it('should return true for identical props', function () {
      var props = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: [{
          id: '1',
          name: 'Cat1'
        }]
      };
      expect((0, _CategorySelector.areEqual)(props, props)).toBe(true);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,