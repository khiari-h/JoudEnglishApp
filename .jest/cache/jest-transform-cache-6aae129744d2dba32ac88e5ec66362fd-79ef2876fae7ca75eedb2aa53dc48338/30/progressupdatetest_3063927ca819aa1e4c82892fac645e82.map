{"version":3,"names":["_getJestObj","mock","useDashboardState","showLevelProgress","setShowLevelProgress","jest","fn","openLevelProgressModal","closeLevelProgressModal","refreshing","activeTab","setActiveTab","onRefresh","lastActivity","isLoading","reload","getLevelProgress","mockGetLevelProgress","refresh","mockRefresh","originalModule","requireActual","Object","assign","useProgress","progress","overall","levels","updateProgress","mockUpdateProgress","getProgressForLevel","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_expoRouter","_Dashboard","_ProgressContext","_ThemeContext","_CurrentLevelContext","_jsxRuntime","_require","renderDashboard","render","jsx","ThemeProvider","children","ProgressProvider","CurrentLevelProvider","default","describe","beforeEach","clearAllMocks","mockClear","router","push","it","component","act","_component","getByTestId","waitFor","expect","toBeTruthy","startButton","fireEvent","press","toHaveBeenCalledWith","level","exerciseType","score","toHaveBeenCalledTimes"],"sources":["progress-update.test.js"],"sourcesContent":["// __tests__/integration/progress-update.test.js\nimport React from 'react';\nimport { render, fireEvent, waitFor, act } from '@testing-library/react-native';\nimport { router } from 'expo-router';\nimport Dashboard from '../../src/screens/Dashboard';\nimport { ProgressProvider } from '../../src/contexts/ProgressContext';\nimport { ThemeProvider } from '../../src/contexts/ThemeContext';\nimport { CurrentLevelProvider } from '../../src/contexts/CurrentLevelContext';\n\n// Mock useDashboardState pour éviter les boucles infinies\njest.mock('../../src/screens/Dashboard/hooks/useDashboardState', () => ({\n  useDashboardState: () => ({\n    showLevelProgress: false,\n    setShowLevelProgress: jest.fn(),\n    openLevelProgressModal: jest.fn(),\n    closeLevelProgressModal: jest.fn(),\n    refreshing: false,\n    activeTab: \"home\",\n    setActiveTab: jest.fn(),\n    onRefresh: jest.fn(),\n  }),\n}));\n\n// Mock de useLastActivity sans activité\njest.mock('../../src/hooks/useLastActivity', () => () => ({\n  lastActivity: null,\n  isLoading: false,\n  reload: jest.fn(),\n}));\n\n// Mock de useRealTimeProgress\nconst mockRefresh = jest.fn();\nconst mockGetLevelProgress = jest.fn(() => 0);\n\njest.mock('../../src/hooks/useRealTimeProgress', () => () => ({\n  getLevelProgress: mockGetLevelProgress,\n  refresh: mockRefresh,\n}));\n\n// Mock du ProgressContext avec updateProgress espionnable\nconst mockUpdateProgress = jest.fn();\n\njest.mock('../../src/contexts/ProgressContext', () => {\n  const originalModule = jest.requireActual('../../src/contexts/ProgressContext');\n  return {\n    ...originalModule,\n    useProgress: () => ({\n      progress: { overall: 0, levels: {} },\n      isLoading: false,\n      updateProgress: mockUpdateProgress,\n      getProgressForLevel: () => 0,\n    }),\n  };\n});\n\nconst renderDashboard = () => {\n  return render(\n    <ThemeProvider>\n      <ProgressProvider>\n        <CurrentLevelProvider>\n          <Dashboard />\n        </CurrentLevelProvider>\n      </ProgressProvider>\n    </ThemeProvider>\n  );\n};\n\ndescribe('Scénario 1: Mise à jour de la progression', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockUpdateProgress.mockClear();\n    router.push.mockClear();\n  });\n\n  it('devrait mettre à jour la progression après avoir terminé un exercice', async () => {\n    let component;\n    await act(async () => {\n      component = renderDashboard();\n    });\n\n    const { getByTestId } = component;\n\n    // Attendre que le Dashboard soit rendu\n    await waitFor(() => {\n      expect(getByTestId('level-selection-button')).toBeTruthy();\n    });\n\n    const startButton = getByTestId('level-selection-button');\n\n    // Naviguer vers la sélection de niveau\n    await act(async () => {\n      fireEvent.press(startButton);\n    });\n\n    expect(router.push).toHaveBeenCalledWith('/tabs/levelSelection');\n\n    // Simuler le flux complet d'un exercice terminé\n    const level = 'A1';\n    const exerciseType = 'vocabulary';\n    const score = 80;\n\n    // Simuler l'appel de mise à jour de la progression\n    await act(async () => {\n      mockUpdateProgress(level, exerciseType, score);\n    });\n\n    // Vérifier que la fonction a été appelée correctement\n    expect(mockUpdateProgress).toHaveBeenCalledWith(level, exerciseType, 80);\n    expect(mockUpdateProgress).toHaveBeenCalledTimes(1);\n  });\n});"],"mappings":"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","ignoreList":[]}