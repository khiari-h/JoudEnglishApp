edc79e8b9d5f4189d30c5920252be2df
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _NavigationButtons = _interopRequireDefault(require("../../../../components/exercise-common/NavigationButtons"));
var _style = _interopRequireDefault(require("./style"));
var _react = require("react");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
var ReadingNavigation = function ReadingNavigation(_ref) {
  var showFeedback = _ref.showFeedback,
    isCorrect = _ref.isCorrect,
    selectedAnswer = _ref.selectedAnswer,
    currentQuestionIndex = _ref.currentQuestionIndex,
    totalQuestions = _ref.totalQuestions,
    attempts = _ref.attempts,
    levelColor = _ref.levelColor,
    onNext = _ref.onNext,
    onPrevious = _ref.onPrevious,
    onRetry = _ref.onRetry;
  var handleNavigation = (0, _react.useCallback)(function (action) {
    if (action === "next") {
      showFeedback ? onNext() : onNext("check");
    } else if (action === "previous") {
      onPrevious();
    } else if (action === "retry") {
      onRetry();
    }
  }, [showFeedback, onNext, onPrevious, onRetry]);
  var handleNext = (0, _react.useCallback)(function () {
    return handleNavigation("next");
  }, [handleNavigation]);
  var handlePrevious = (0, _react.useCallback)(function () {
    return handleNavigation("previous");
  }, [handleNavigation]);
  var handleRetryOrNext = (0, _react.useCallback)(function () {
    return attempts > 1 ? handleNavigation("next") : handleNavigation("retry");
  }, [attempts, handleNavigation]);
  if (!showFeedback) {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.container,
      children: (0, _jsxRuntime.jsx)(_NavigationButtons.default, {
        onNext: handleNext,
        onPrevious: handlePrevious,
        currentIndex: currentQuestionIndex,
        totalCount: totalQuestions,
        disableNext: selectedAnswer === null,
        disablePrevious: currentQuestionIndex === 0,
        showSkip: false,
        primaryColor: levelColor,
        buttonLabels: {
          previous: "Previous",
          next: "Check Answer",
          skip: "Skip",
          finish: "Finish"
        },
        variant: "standard"
      })
    });
  } else if (isCorrect) {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.container,
      children: (0, _jsxRuntime.jsx)(_NavigationButtons.default, {
        onNext: handleNext,
        onPrevious: handlePrevious,
        currentIndex: currentQuestionIndex,
        totalCount: totalQuestions,
        disablePrevious: currentQuestionIndex === 0,
        primaryColor: levelColor,
        buttonLabels: {
          previous: "Previous",
          next: currentQuestionIndex < totalQuestions - 1 ? "Next Question" : "Complete",
          skip: "Skip",
          finish: "Complete"
        },
        variant: "standard"
      })
    });
  } else {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.container,
      children: (0, _jsxRuntime.jsx)(_NavigationButtons.default, {
        onNext: handleRetryOrNext,
        onPrevious: handlePrevious,
        currentIndex: currentQuestionIndex,
        totalCount: totalQuestions,
        disablePrevious: currentQuestionIndex === 0,
        primaryColor: levelColor,
        buttonLabels: {
          previous: "Previous",
          next: attempts > 1 ? "Skip" : "Try Again",
          skip: "Skip",
          finish: "Finish"
        },
        variant: "standard"
      })
    });
  }
};
ReadingNavigation.propTypes = {
  showFeedback: _propTypes.default.bool.isRequired,
  isCorrect: _propTypes.default.bool,
  selectedAnswer: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.array]),
  currentQuestionIndex: _propTypes.default.number.isRequired,
  totalQuestions: _propTypes.default.number.isRequired,
  attempts: _propTypes.default.number,
  levelColor: _propTypes.default.string,
  onNext: _propTypes.default.func.isRequired,
  onPrevious: _propTypes.default.func.isRequired,
  onRetry: _propTypes.default.func.isRequired
};
var _default = exports.default = ReadingNavigation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,