586b5b1cdf0fad39fd0bac1a4452649e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _vectorIcons = require("@expo/vector-icons");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _ThemeContext = require("../../../contexts/ThemeContext");
var _ProgressBar = _interopRequireDefault(require("../ProgressBar"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var CardBadge = function CardBadge(_ref) {
  var badge = _ref.badge,
    iconColor = _ref.iconColor,
    badgeStyle = _ref.badgeStyle,
    badgeTextStyle = _ref.badgeTextStyle;
  if (!badge) return null;
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: [_style.default.cardBadge, {
      backgroundColor: `${iconColor}15`
    }, badgeStyle],
    children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [_style.default.badgeText, {
        color: iconColor
      }, badgeTextStyle],
      children: badge
    })
  });
};
var CardContent = function CardContent(_ref2) {
  var children = _ref2.children,
    padding = _ref2.padding,
    compactMode = _ref2.compactMode,
    contentStyle = _ref2.contentStyle,
    showProgressBar = _ref2.showProgressBar,
    progress = _ref2.progress,
    fillColor = _ref2.fillColor,
    progressHeight = _ref2.progressHeight,
    showPercentage = _ref2.showPercentage,
    percentageFormatter = _ref2.percentageFormatter,
    progressStyle = _ref2.progressStyle;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [_style.default.content, padding && _style.default.contentPadding, compactMode && _style.default.contentCompact, contentStyle],
    children: [children, showProgressBar && (0, _jsxRuntime.jsx)(_ProgressBar.default, {
      progress: progress,
      fillColor: fillColor,
      height: progressHeight,
      backgroundColor: `${fillColor}15`,
      borderRadius: Math.floor(progressHeight / 2),
      showPercentage: showPercentage,
      percentageFormatter: percentageFormatter,
      style: [{
        marginTop: compactMode ? 8 : 12,
        marginBottom: compactMode ? 4 : 8
      }, progressStyle]
    })]
  });
};
var CardFooter = function CardFooter(_ref3) {
  var footer = _ref3.footer,
    footerStyle = _ref3.footerStyle;
  if (!footer) return null;
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: [_style.default.footer, footerStyle],
    children: footer
  });
};
var CardOverlay = function CardOverlay(_ref4) {
  var showOverlay = _ref4.showOverlay,
    overlayContent = _ref4.overlayContent,
    overlayStyle = _ref4.overlayStyle;
  if (!showOverlay) return null;
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: [_style.default.overlay, overlayStyle],
    children: overlayContent
  });
};
var HeaderIcon = function HeaderIcon(_ref5) {
  var headerIcon = _ref5.headerIcon,
    iconColor = _ref5.iconColor,
    headerIconBackground = _ref5.headerIconBackground,
    compactMode = _ref5.compactMode;
  if (!headerIcon) return null;
  if (headerIconBackground) {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [_style.default.headerIconContainer, {
        backgroundColor: `${iconColor}15`
      }, compactMode && _style.default.headerIconContainerCompact],
      children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
        name: headerIcon,
        size: compactMode ? 18 : 20,
        color: iconColor
      })
    });
  }
  return (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
    name: headerIcon,
    size: compactMode ? 18 : 20,
    color: iconColor,
    style: _style.default.headerIcon
  });
};
var TitleWithBadge = function TitleWithBadge(_ref6) {
  var title = _ref6.title,
    titleBadge = _ref6.titleBadge,
    badgeColor = _ref6.badgeColor,
    compactMode = _ref6.compactMode,
    titleStyle = _ref6.titleStyle,
    titleBadgeStyle = _ref6.titleBadgeStyle,
    badgeTextStyle = _ref6.badgeTextStyle;
  if (!title) return null;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: _style.default.titleWithBadgeContainer,
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [_style.default.title, {
        color: (titleStyle == null ? void 0 : titleStyle.color) || "#1F2937"
      }, compactMode && _style.default.titleCompact, titleStyle],
      children: title
    }), titleBadge && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [_style.default.titleBadge, {
        backgroundColor: badgeColor
      }, compactMode && _style.default.titleBadgeCompact, titleBadgeStyle],
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [_style.default.titleBadgeText, compactMode && _style.default.titleBadgeTextCompact, badgeTextStyle],
        children: titleBadge
      })
    })]
  });
};
var HeaderRight = function HeaderRight(_ref7) {
  var rightIcon = _ref7.rightIcon,
    headerRight = _ref7.headerRight,
    compactMode = _ref7.compactMode,
    rightIconStyle = _ref7.rightIconStyle;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: _style.default.headerRight,
    children: [rightIcon && (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [_style.default.rightIconText, compactMode && _style.default.rightIconTextCompact, rightIconStyle],
      children: rightIcon
    }), headerRight]
  });
};
var renderMobileHeader = function renderMobileHeader(props) {
  var showHeader = props.showHeader,
    titleLayout = props.titleLayout,
    compactMode = props.compactMode,
    headerIcon = props.headerIcon,
    iconColor = props.iconColor,
    headerIconBackground = props.headerIconBackground,
    title = props.title,
    titleBadge = props.titleBadge,
    badgeColor = props.badgeColor,
    titleStyle = props.titleStyle,
    titleBadgeStyle = props.titleBadgeStyle,
    badgeTextStyle = props.badgeTextStyle,
    subtitle = props.subtitle,
    subtitleStyle = props.subtitleStyle,
    rightIcon = props.rightIcon,
    rightIconStyle = props.rightIconStyle,
    headerRight = props.headerRight;
  if (!showHeader) return null;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [_style.default.header, titleLayout === "column" && _style.default.headerColumn, compactMode && _style.default.headerCompact],
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [_style.default.headerLeft, titleLayout === "column" && _style.default.headerLeftColumn],
      children: [(0, _jsxRuntime.jsx)(HeaderIcon, {
        headerIcon: headerIcon,
        iconColor: iconColor,
        headerIconBackground: headerIconBackground,
        compactMode: compactMode
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: _style.default.headerTextContainer,
        children: [(0, _jsxRuntime.jsx)(TitleWithBadge, {
          title: title,
          titleBadge: titleBadge,
          badgeColor: badgeColor,
          compactMode: compactMode,
          titleStyle: titleStyle,
          titleBadgeStyle: titleBadgeStyle,
          badgeTextStyle: badgeTextStyle
        }), subtitle && (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [_style.default.subtitle, compactMode && _style.default.subtitleCompact, subtitleStyle],
          children: subtitle
        })]
      })]
    }), (0, _jsxRuntime.jsx)(HeaderRight, {
      rightIcon: rightIcon,
      headerRight: headerRight,
      compactMode: compactMode,
      rightIconStyle: rightIconStyle
    })]
  });
};
var Card = function Card(_ref8) {
  var children = _ref8.children,
    title = _ref8.title,
    subtitle = _ref8.subtitle,
    headerRight = _ref8.headerRight,
    headerIcon = _ref8.headerIcon,
    headerIconColor = _ref8.headerIconColor,
    _ref8$headerIconBackg = _ref8.headerIconBackground,
    headerIconBackground = _ref8$headerIconBackg === void 0 ? true : _ref8$headerIconBackg,
    onPress = _ref8.onPress,
    footer = _ref8.footer,
    footerStyle = _ref8.footerStyle,
    style = _ref8.style,
    titleStyle = _ref8.titleStyle,
    subtitleStyle = _ref8.subtitleStyle,
    contentStyle = _ref8.contentStyle,
    _ref8$withShadow = _ref8.withShadow,
    withShadow = _ref8$withShadow === void 0 ? true : _ref8$withShadow,
    _ref8$bordered = _ref8.bordered,
    bordered = _ref8$bordered === void 0 ? false : _ref8$bordered,
    _ref8$withSideBorder = _ref8.withSideBorder,
    withSideBorder = _ref8$withSideBorder === void 0 ? false : _ref8$withSideBorder,
    _ref8$elevated = _ref8.elevated,
    elevated = _ref8$elevated === void 0 ? true : _ref8$elevated,
    _ref8$padding = _ref8.padding,
    padding = _ref8$padding === void 0 ? true : _ref8$padding,
    _ref8$margin = _ref8.margin,
    margin = _ref8$margin === void 0 ? true : _ref8$margin,
    badge = _ref8.badge,
    badgeStyle = _ref8.badgeStyle,
    badgeTextStyle = _ref8.badgeTextStyle,
    _ref8$isActive = _ref8.isActive,
    isActive = _ref8$isActive === void 0 ? false : _ref8$isActive,
    _ref8$backgroundColor = _ref8.backgroundColor,
    backgroundColor = _ref8$backgroundColor === void 0 ? "white" : _ref8$backgroundColor,
    _ref8$borderRadius = _ref8.borderRadius,
    borderRadius = _ref8$borderRadius === void 0 ? 12 : _ref8$borderRadius,
    testID = _ref8.testID,
    _ref8$progress = _ref8.progress,
    progress = _ref8$progress === void 0 ? null : _ref8$progress,
    progressColor = _ref8.progressColor,
    _ref8$progressHeight = _ref8.progressHeight,
    progressHeight = _ref8$progressHeight === void 0 ? 8 : _ref8$progressHeight,
    progressStyle = _ref8.progressStyle,
    _ref8$showPercentage = _ref8.showPercentage,
    showPercentage = _ref8$showPercentage === void 0 ? false : _ref8$showPercentage,
    _ref8$percentageForma = _ref8.percentageFormatter,
    percentageFormatter = _ref8$percentageForma === void 0 ? function (val) {
      return `${Math.round(val)}%`;
    } : _ref8$percentageForma,
    titleBadge = _ref8.titleBadge,
    titleBadgeColor = _ref8.titleBadgeColor,
    titleBadgeStyle = _ref8.titleBadgeStyle,
    _ref8$titleLayout = _ref8.titleLayout,
    titleLayout = _ref8$titleLayout === void 0 ? "row" : _ref8$titleLayout,
    rightIcon = _ref8.rightIcon,
    rightIconStyle = _ref8.rightIconStyle,
    _ref8$compactMode = _ref8.compactMode,
    compactMode = _ref8$compactMode === void 0 ? false : _ref8$compactMode,
    _ref8$showOverlay = _ref8.showOverlay,
    showOverlay = _ref8$showOverlay === void 0 ? false : _ref8$showOverlay,
    overlayContent = _ref8.overlayContent,
    overlayStyle = _ref8.overlayStyle;
  var themeContext = (0, _react.useContext)(_ThemeContext.ThemeContext);
  var colors = (themeContext == null ? void 0 : themeContext.colors) || {
    primary: "#5E60CE"
  };
  var iconColor = headerIconColor || colors.primary;
  var fillColor = progressColor || iconColor;
  var badgeColor = titleBadgeColor || iconColor;
  var isClickable = Boolean(onPress);
  var WrapperComponent = isClickable ? _reactNative.TouchableOpacity : _reactNative.View;
  var wrapperProps = isClickable ? {
    activeOpacity: 0.7,
    onPress: onPress
  } : {};
  var showHeader = title || subtitle || headerRight || headerIcon || titleBadge;
  var showProgressBar = progress !== null;
  var headerProps = {
    showHeader: showHeader,
    titleLayout: titleLayout,
    compactMode: compactMode,
    headerIcon: headerIcon,
    iconColor: iconColor,
    headerIconBackground: headerIconBackground,
    title: title,
    titleBadge: titleBadge,
    badgeColor: badgeColor,
    titleStyle: titleStyle,
    titleBadgeStyle: titleBadgeStyle,
    badgeTextStyle: badgeTextStyle,
    subtitle: subtitle,
    subtitleStyle: subtitleStyle,
    rightIcon: rightIcon,
    rightIconStyle: rightIconStyle,
    headerRight: headerRight
  };
  return (0, _jsxRuntime.jsxs)(WrapperComponent, Object.assign({
    style: [_style.default.container, withShadow && _style.default.shadow, bordered && _style.default.bordered, withSideBorder && [_style.default.withSideBorder, {
      borderLeftColor: iconColor
    }], elevated && _style.default.elevated, margin && _style.default.margin, isActive && [_style.default.activeCard, {
      borderColor: iconColor
    }], compactMode && _style.default.containerCompact, {
      backgroundColor: backgroundColor,
      borderRadius: borderRadius
    }, style],
    testID: testID
  }, wrapperProps, {
    children: [(0, _jsxRuntime.jsx)(CardBadge, {
      badge: badge,
      iconColor: iconColor,
      badgeStyle: badgeStyle,
      badgeTextStyle: badgeTextStyle
    }), renderMobileHeader(headerProps), (0, _jsxRuntime.jsx)(CardContent, {
      padding: padding,
      compactMode: compactMode,
      contentStyle: contentStyle,
      showProgressBar: showProgressBar,
      progress: progress,
      fillColor: fillColor,
      progressHeight: progressHeight,
      showPercentage: showPercentage,
      percentageFormatter: percentageFormatter,
      progressStyle: progressStyle,
      children: children
    }), (0, _jsxRuntime.jsx)(CardFooter, {
      footer: footer,
      footerStyle: footerStyle
    }), (0, _jsxRuntime.jsx)(CardOverlay, {
      showOverlay: showOverlay,
      overlayContent: overlayContent,
      overlayStyle: overlayStyle
    })]
  }));
};
CardBadge.propTypes = {
  badge: _propTypes.default.string,
  iconColor: _propTypes.default.string.isRequired,
  badgeStyle: _propTypes.default.object,
  badgeTextStyle: _propTypes.default.object
};
CardContent.propTypes = {
  children: _propTypes.default.node,
  padding: _propTypes.default.bool,
  compactMode: _propTypes.default.bool,
  contentStyle: _propTypes.default.object,
  showProgressBar: _propTypes.default.bool,
  progress: _propTypes.default.number,
  fillColor: _propTypes.default.string,
  progressHeight: _propTypes.default.number,
  showPercentage: _propTypes.default.bool,
  percentageFormatter: _propTypes.default.func,
  progressStyle: _propTypes.default.object
};
CardFooter.propTypes = {
  footer: _propTypes.default.node,
  footerStyle: _propTypes.default.object
};
CardOverlay.propTypes = {
  showOverlay: _propTypes.default.bool,
  overlayContent: _propTypes.default.node,
  overlayStyle: _propTypes.default.object
};
Card.propTypes = {
  children: _propTypes.default.node,
  title: _propTypes.default.string,
  subtitle: _propTypes.default.string,
  headerRight: _propTypes.default.node,
  headerIcon: _propTypes.default.string,
  headerIconColor: _propTypes.default.string,
  headerIconBackground: _propTypes.default.bool,
  onPress: _propTypes.default.func,
  footer: _propTypes.default.node,
  footerStyle: _propTypes.default.object,
  style: _propTypes.default.object,
  titleStyle: _propTypes.default.object,
  subtitleStyle: _propTypes.default.object,
  contentStyle: _propTypes.default.object,
  withShadow: _propTypes.default.bool,
  bordered: _propTypes.default.bool,
  withSideBorder: _propTypes.default.bool,
  elevated: _propTypes.default.bool,
  padding: _propTypes.default.bool,
  margin: _propTypes.default.bool,
  badge: _propTypes.default.string,
  badgeStyle: _propTypes.default.object,
  badgeTextStyle: _propTypes.default.object,
  isActive: _propTypes.default.bool,
  backgroundColor: _propTypes.default.string,
  borderRadius: _propTypes.default.number,
  testID: _propTypes.default.string,
  progress: _propTypes.default.number,
  progressColor: _propTypes.default.string,
  progressHeight: _propTypes.default.number,
  progressStyle: _propTypes.default.object,
  showPercentage: _propTypes.default.bool,
  percentageFormatter: _propTypes.default.func,
  titleBadge: _propTypes.default.string,
  titleBadgeColor: _propTypes.default.string,
  titleBadgeStyle: _propTypes.default.object,
  titleLayout: _propTypes.default.oneOf(['row', 'column']),
  rightIcon: _propTypes.default.string,
  rightIconStyle: _propTypes.default.object,
  compactMode: _propTypes.default.bool,
  showOverlay: _propTypes.default.bool,
  overlayContent: _propTypes.default.node,
  overlayStyle: _propTypes.default.object
};
var _default = exports.default = Card;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,