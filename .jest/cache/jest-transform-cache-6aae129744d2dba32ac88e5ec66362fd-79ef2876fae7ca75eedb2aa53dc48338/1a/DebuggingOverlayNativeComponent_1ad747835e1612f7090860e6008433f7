20bb69c6be714263f4c26971519dc769
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = void 0;
var _codegenNativeCommands = _interopRequireDefault(require("../../../../Libraries/Utilities/codegenNativeCommands"));
var _codegenNativeComponent = _interopRequireDefault(require("../../../../Libraries/Utilities/codegenNativeComponent"));
var React = _interopRequireWildcard(require("react"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var NativeComponentRegistry = require('react-native/Libraries/NativeComponent/NativeComponentRegistry');
var _require = require("react-native/Libraries/ReactNative/RendererProxy"),
  dispatchCommand = _require.dispatchCommand;
var nativeComponentName = 'DebuggingOverlay';
var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
  uiViewClassName: 'DebuggingOverlay',
  validAttributes: {}
};
var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, function () {
  return __INTERNAL_VIEW_CONFIG;
});
var Commands = exports.Commands = {
  highlightTraceUpdates: function highlightTraceUpdates(ref, updates) {
    dispatchCommand(ref, "highlightTraceUpdates", [updates]);
  },
  highlightElements: function highlightElements(ref, elements) {
    dispatchCommand(ref, "highlightElements", [elements]);
  },
  clearElementsHighlights: function clearElementsHighlights(ref) {
    dispatchCommand(ref, "clearElementsHighlights", []);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29kZWdlbk5hdGl2ZUNvbW1hbmRzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfY29kZWdlbk5hdGl2ZUNvbXBvbmVudCIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIk5hdGl2ZUNvbXBvbmVudFJlZ2lzdHJ5IiwiX3JlcXVpcmUiLCJkaXNwYXRjaENvbW1hbmQiLCJuYXRpdmVDb21wb25lbnROYW1lIiwiX19JTlRFUk5BTF9WSUVXX0NPTkZJRyIsImV4cG9ydHMiLCJ1aVZpZXdDbGFzc05hbWUiLCJ2YWxpZEF0dHJpYnV0ZXMiLCJfZGVmYXVsdCIsIkNvbW1hbmRzIiwiaGlnaGxpZ2h0VHJhY2VVcGRhdGVzIiwicmVmIiwidXBkYXRlcyIsImhpZ2hsaWdodEVsZW1lbnRzIiwiZWxlbWVudHMiLCJjbGVhckVsZW1lbnRzSGlnaGxpZ2h0cyJdLCJzb3VyY2VzIjpbIkRlYnVnZ2luZ092ZXJsYXlOYXRpdmVDb21wb25lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCB0eXBlIHtWaWV3UHJvcHN9IGZyb20gJy4uLy4uLy4uLy4uL0xpYnJhcmllcy9Db21wb25lbnRzL1ZpZXcvVmlld1Byb3BUeXBlcyc7XG5pbXBvcnQgdHlwZSB7SG9zdENvbXBvbmVudH0gZnJvbSAnLi4vLi4vLi4vLi4vTGlicmFyaWVzL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlVHlwZXMnO1xuaW1wb3J0IHR5cGUge1Byb2Nlc3NlZENvbG9yVmFsdWV9IGZyb20gJy4uLy4uLy4uLy4uL0xpYnJhcmllcy9TdHlsZVNoZWV0L3Byb2Nlc3NDb2xvcic7XG5cbmltcG9ydCBjb2RlZ2VuTmF0aXZlQ29tbWFuZHMgZnJvbSAnLi4vLi4vLi4vLi4vTGlicmFyaWVzL1V0aWxpdGllcy9jb2RlZ2VuTmF0aXZlQ29tbWFuZHMnO1xuaW1wb3J0IGNvZGVnZW5OYXRpdmVDb21wb25lbnQgZnJvbSAnLi4vLi4vLi4vLi4vTGlicmFyaWVzL1V0aWxpdGllcy9jb2RlZ2VuTmF0aXZlQ29tcG9uZW50JztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxudHlwZSBOYXRpdmVQcm9wcyA9ICRSZWFkT25seTx7fFxuICAuLi5WaWV3UHJvcHMsXG58fT47XG5leHBvcnQgdHlwZSBEZWJ1Z2dpbmdPdmVybGF5TmF0aXZlQ29tcG9uZW50VHlwZSA9IEhvc3RDb21wb25lbnQ8TmF0aXZlUHJvcHM+O1xuXG5leHBvcnQgdHlwZSBUcmFjZVVwZGF0ZSA9IHtcbiAgaWQ6IG51bWJlcixcbiAgcmVjdGFuZ2xlOiBFbGVtZW50UmVjdGFuZ2xlLFxuICBjb2xvcjogP1Byb2Nlc3NlZENvbG9yVmFsdWUsXG59O1xuXG5leHBvcnQgdHlwZSBFbGVtZW50UmVjdGFuZ2xlID0ge1xuICB4OiBudW1iZXIsXG4gIHk6IG51bWJlcixcbiAgd2lkdGg6IG51bWJlcixcbiAgaGVpZ2h0OiBudW1iZXIsXG59O1xuXG5pbnRlcmZhY2UgTmF0aXZlQ29tbWFuZHMge1xuICAraGlnaGxpZ2h0VHJhY2VVcGRhdGVzOiAoXG4gICAgdmlld1JlZjogUmVhY3QuRWxlbWVudFJlZjxEZWJ1Z2dpbmdPdmVybGF5TmF0aXZlQ29tcG9uZW50VHlwZT4sXG4gICAgdXBkYXRlczogJFJlYWRPbmx5QXJyYXk8VHJhY2VVcGRhdGU+LFxuICApID0+IHZvaWQ7XG4gICtoaWdobGlnaHRFbGVtZW50czogKFxuICAgIHZpZXdSZWY6IFJlYWN0LkVsZW1lbnRSZWY8RGVidWdnaW5nT3ZlcmxheU5hdGl2ZUNvbXBvbmVudFR5cGU+LFxuICAgIGVsZW1lbnRzOiAkUmVhZE9ubHlBcnJheTxFbGVtZW50UmVjdGFuZ2xlPixcbiAgKSA9PiB2b2lkO1xuICArY2xlYXJFbGVtZW50c0hpZ2hsaWdodHM6IChcbiAgICB2aWV3UmVmOiBSZWFjdC5FbGVtZW50UmVmPERlYnVnZ2luZ092ZXJsYXlOYXRpdmVDb21wb25lbnRUeXBlPixcbiAgKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgY29uc3QgQ29tbWFuZHM6IE5hdGl2ZUNvbW1hbmRzID0gY29kZWdlbk5hdGl2ZUNvbW1hbmRzPE5hdGl2ZUNvbW1hbmRzPih7XG4gIHN1cHBvcnRlZENvbW1hbmRzOiBbXG4gICAgJ2hpZ2hsaWdodFRyYWNlVXBkYXRlcycsXG4gICAgJ2hpZ2hsaWdodEVsZW1lbnRzJyxcbiAgICAnY2xlYXJFbGVtZW50c0hpZ2hsaWdodHMnLFxuICBdLFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IChjb2RlZ2VuTmF0aXZlQ29tcG9uZW50PE5hdGl2ZVByb3BzPihcbiAgJ0RlYnVnZ2luZ092ZXJsYXknLFxuKTogSG9zdENvbXBvbmVudDxOYXRpdmVQcm9wcz4pO1xuIl0sIm1hcHBpbmdzIjoiOzs7OztBQWNBLElBQUFBLHNCQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyx1QkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsS0FBQSxHQUFBQyx1QkFBQSxDQUFBSCxPQUFBO0FBQStCLFNBQUFHLHdCQUFBQyxDQUFBLEVBQUFDLENBQUEsNkJBQUFDLE9BQUEsTUFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBSCx1QkFBQSxZQUFBQSx3QkFBQUMsQ0FBQSxFQUFBQyxDQUFBLFNBQUFBLENBQUEsSUFBQUQsQ0FBQSxJQUFBQSxDQUFBLENBQUFLLFVBQUEsU0FBQUwsQ0FBQSxNQUFBTSxDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxLQUFBQyxTQUFBLFFBQUFDLE9BQUEsRUFBQVYsQ0FBQSxpQkFBQUEsQ0FBQSx1QkFBQUEsQ0FBQSx5QkFBQUEsQ0FBQSxTQUFBUSxDQUFBLE1BQUFGLENBQUEsR0FBQUwsQ0FBQSxHQUFBRyxDQUFBLEdBQUFELENBQUEsUUFBQUcsQ0FBQSxDQUFBSyxHQUFBLENBQUFYLENBQUEsVUFBQU0sQ0FBQSxDQUFBTSxHQUFBLENBQUFaLENBQUEsR0FBQU0sQ0FBQSxDQUFBTyxHQUFBLENBQUFiLENBQUEsRUFBQVEsQ0FBQSxjQUFBTSxFQUFBLElBQUFkLENBQUEsZ0JBQUFjLEVBQUEsT0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFoQixDQUFBLEVBQUFjLEVBQUEsT0FBQVAsQ0FBQSxJQUFBRCxDQUFBLEdBQUFXLE1BQUEsQ0FBQUMsY0FBQSxLQUFBRCxNQUFBLENBQUFFLHdCQUFBLENBQUFuQixDQUFBLEVBQUFjLEVBQUEsT0FBQVAsQ0FBQSxDQUFBSyxHQUFBLElBQUFMLENBQUEsQ0FBQU0sR0FBQSxJQUFBUCxDQUFBLENBQUFFLENBQUEsRUFBQU0sRUFBQSxFQUFBUCxDQUFBLElBQUFDLENBQUEsQ0FBQU0sRUFBQSxJQUFBZCxDQUFBLENBQUFjLEVBQUEsV0FBQU4sQ0FBQSxLQUFBUixDQUFBLEVBQUFDLENBQUE7QUFGL0IsSUFBTW1CLHVCQUF1QixHQUFHeEIsT0FBTyxDQUFDLGdFQUFnRSxDQUFDO0FBQ3pHLElBQUF5QixRQUFBLEdBQTBCekIsT0FBTyxDQUFDLGtEQUFrRCxDQUFDO0VBQTlFMEIsZUFBZSxHQUFBRCxRQUFBLENBQWZDLGVBQWU7QUFFdEIsSUFBSUMsbUJBQW1CLEdBQUcsa0JBQWtCO0FBR3JDLElBQU1DLHNCQUFzQixHQUFBQyxPQUFBLENBQUFELHNCQUFBLEdBQUc7RUFDcENFLGVBQWUsRUFBRSxrQkFBa0I7RUFDbkNDLGVBQWUsRUFBRSxDQUFDO0FBQ3BCLENBQUM7QUFBQyxJQUFBQyxRQUFBLEdBQUFILE9BQUEsQ0FBQWYsT0FBQSxHQUVhVSx1QkFBdUIsQ0FBQ1IsR0FBRyxDQUFDVyxtQkFBbUIsRUFBRTtFQUFBLE9BQU1DLHNCQUFzQjtBQUFBLEVBQUM7QUFFdEYsSUFBTUssUUFBUSxHQUFBSixPQUFBLENBQUFJLFFBQUEsR0FBRztFQUNwQkMscUJBQXFCLFdBQXJCQSxxQkFBcUJBLENBQUNDLEdBQUcsRUFBRUMsT0FBTyxFQUFFO0lBQ2hDVixlQUFlLENBQUNTLEdBQUcsRUFBRSx1QkFBdUIsRUFBRSxDQUFDQyxPQUFPLENBQUMsQ0FBQztFQUM1RCxDQUFDO0VBRURDLGlCQUFpQixXQUFqQkEsaUJBQWlCQSxDQUFDRixHQUFHLEVBQUVHLFFBQVEsRUFBRTtJQUM3QlosZUFBZSxDQUFDUyxHQUFHLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQ0csUUFBUSxDQUFDLENBQUM7RUFDekQsQ0FBQztFQUVEQyx1QkFBdUIsV0FBdkJBLHVCQUF1QkEsQ0FBQ0osR0FBRyxFQUFFO0lBQ3pCVCxlQUFlLENBQUNTLEdBQUcsRUFBRSx5QkFBeUIsRUFBRSxFQUFFLENBQUM7RUFDdkQ7QUFDSixDQUFDIiwiaWdub3JlTGlzdCI6W119