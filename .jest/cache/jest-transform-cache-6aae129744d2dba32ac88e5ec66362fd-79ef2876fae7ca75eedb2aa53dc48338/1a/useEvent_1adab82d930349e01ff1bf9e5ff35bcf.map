{"version":3,"names":["Object","defineProperty","exports","value","useEvent","_react","require","_WorkletEventHandler","handler","eventNames","arguments","length","undefined","rebuild","initRef","useRef","current","workletEventHandler","WorkletEventHandler","updateEventHandler"],"sources":["useEvent.ts"],"sourcesContent":["'use strict';\nimport { useRef } from 'react';\nimport { WorkletEventHandler } from '../WorkletEventHandler';\nimport type { IWorkletEventHandler, ReanimatedEvent } from './commonTypes';\n\n/** Worklet to provide as an argument to `useEvent` hook. */\nexport type EventHandler<\n  Event extends object,\n  Context extends Record<string, unknown> = never,\n> = (event: ReanimatedEvent<Event>, context?: Context) => void;\n\nexport type EventHandlerProcessed<\n  Event extends object,\n  Context extends Record<string, unknown> = never,\n> = (event: Event, context?: Context) => void;\n\nexport type EventHandlerInternal<Event extends object> = {\n  workletEventHandler: IWorkletEventHandler<Event>;\n};\n\n/**\n * Lets you run a function whenever a specified native event occurs.\n *\n * @param handler - A function that receives an event object with event data -\n *   {@link EventHandler}.\n * @param eventNames - An array of event names the `handler` callback will react\n *   to.\n * @param rebuild - Whether the event handler should be rebuilt. Defaults to\n *   `false`.\n * @returns A function that will be called when the event occurs -\n *   {@link EventHandlerProcessed}.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/advanced/useEvent\n */\n// @ts-expect-error This overload is required by our API.\n// We don't know which properites of a component that is made into\n// an AnimatedComponent are event handlers and we don't want to force the user to define it.\n// Therefore we disguise `useEvent` return type as a simple function and we handle\n// it being a React Ref in `createAnimatedComponent`.\nexport function useEvent<\n  Event extends object,\n  Context extends Record<string, unknown> = never,\n>(\n  handler: EventHandler<Event, Context>,\n  eventNames?: string[],\n  rebuild?: boolean\n): EventHandlerProcessed<Event, Context>;\n\nexport function useEvent<Event extends object, Context = never>(\n  handler: (event: ReanimatedEvent<Event>, context?: Context) => void,\n  eventNames: string[] = [],\n  rebuild = false\n): EventHandlerInternal<Event> {\n  const initRef = useRef<EventHandlerInternal<Event>>(null!);\n  if (initRef.current === null) {\n    const workletEventHandler = new WorkletEventHandler<Event>(\n      handler,\n      eventNames\n    );\n    initRef.current = { workletEventHandler };\n  } else if (rebuild) {\n    const workletEventHandler = initRef.current.workletEventHandler;\n    workletEventHandler.updateEventHandler(handler, eventNames);\n    initRef.current = { workletEventHandler };\n  }\n\n  return initRef.current;\n}\n"],"mappings":"AAAA,YAAY;;AAACA,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,KAAA;AAAA;AAAAD,OAAA,CAAAE,QAAA,GAAAA,QAAA;AACb,IAAAC,MAAA,GAAAC,OAAA;AACA,IAAAC,oBAAA,GAAAD,OAAA;AA6CO,SAASF,QAAQA,CACtBI,OAAmE,EAGtC;EAAA,IAF7BC,UAAoB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,IACzBG,OAAO,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAEf,IAAMI,OAAO,GAAG,IAAAC,aAAM,EAA8B,IAAK,CAAC;EAC1D,IAAID,OAAO,CAACE,OAAO,KAAK,IAAI,EAAE;IAC5B,IAAMC,mBAAmB,GAAG,IAAIC,wCAAmB,CACjDV,OAAO,EACPC,UACF,CAAC;IACDK,OAAO,CAACE,OAAO,GAAG;MAAEC,mBAAmB,EAAnBA;IAAoB,CAAC;EAC3C,CAAC,MAAM,IAAIJ,OAAO,EAAE;IAClB,IAAMI,oBAAmB,GAAGH,OAAO,CAACE,OAAO,CAACC,mBAAmB;IAC/DA,oBAAmB,CAACE,kBAAkB,CAACX,OAAO,EAAEC,UAAU,CAAC;IAC3DK,OAAO,CAACE,OAAO,GAAG;MAAEC,mBAAmB,EAAnBA;IAAoB,CAAC;EAC3C;EAEA,OAAOH,OAAO,CAACE,OAAO;AACxB","ignoreList":[]}