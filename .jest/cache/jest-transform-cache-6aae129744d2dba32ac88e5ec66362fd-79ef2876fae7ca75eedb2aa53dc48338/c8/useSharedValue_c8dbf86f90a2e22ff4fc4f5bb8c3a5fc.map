{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","useSharedValue","_slicedToArray2","_react","_animation","_core","initialValue","_useState","useState","makeMutable","_useState2","default","mutable","useEffect","cancelAnimation"],"sources":["useSharedValue.ts"],"sourcesContent":["'use strict';\nimport { useEffect, useState } from 'react';\nimport { cancelAnimation } from '../animation';\nimport type { SharedValue } from '../commonTypes';\nimport { makeMutable } from '../core';\n\n/**\n * Lets you define [shared\n * values](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#shared-value)\n * in your components.\n *\n * @param initialValue - The value you want to be initially stored to a `.value`\n *   property.\n * @returns A shared value with a single `.value` property initially set to the\n *   `initialValue` - {@link SharedValue}.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/core/useSharedValue\n */\nexport function useSharedValue<Value>(initialValue: Value): SharedValue<Value> {\n  const [mutable] = useState(() => makeMutable(initialValue));\n  useEffect(() => {\n    return () => {\n      cancelAnimation(mutable);\n    };\n  }, [mutable]);\n  return mutable;\n}\n"],"mappings":"AAAA,YAAY;;AAAC,IAAAA,sBAAA,GAAAC,OAAA;AAAAC,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,KAAA;AAAA;AAAAD,OAAA,CAAAE,cAAA,GAAAA,cAAA;AAAA,IAAAC,eAAA,GAAAP,sBAAA,CAAAC,OAAA;AACb,IAAAO,MAAA,GAAAP,OAAA;AACA,IAAAQ,UAAA,GAAAR,OAAA;AAEA,IAAAS,KAAA,GAAAT,OAAA;AAaO,SAASK,cAAcA,CAAQK,YAAmB,EAAsB;EAC7E,IAAAC,SAAA,GAAkB,IAAAC,eAAQ,EAAC;MAAA,OAAM,IAAAC,iBAAW,EAACH,YAAY,CAAC;IAAA,EAAC;IAAAI,UAAA,OAAAR,eAAA,CAAAS,OAAA,EAAAJ,SAAA;IAApDK,OAAO,GAAAF,UAAA;EACd,IAAAG,gBAAS,EAAC,YAAM;IACd,OAAO,YAAM;MACX,IAAAC,0BAAe,EAACF,OAAO,CAAC;IAC1B,CAAC;EACH,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EACb,OAAOA,OAAO;AAChB","ignoreList":[]}