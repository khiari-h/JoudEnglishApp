001a03b89c0f698614a9c70a203e7549
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var Lock = _interopRequireWildcard(require("../../services/lockService"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var ForgotPinScreen = function ForgotPinScreen(_ref) {
  var onReset = _ref.onReset;
  var _useState = (0, _react.useState)(''),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    code = _useState2[0],
    setCode = _useState2[1];
  var _useState3 = (0, _react.useState)(''),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    error = _useState4[0],
    setError = _useState4[1];
  var handleBiometric = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    var res = yield Lock.unlockWithBiometrics();
    if (res.ok) {
      onReset == null || onReset();
    } else {
      setError('Biométrie indisponible ou refusée.');
    }
  }), [onReset]);
  var handleRecovery = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    var ok = yield Lock.verifyRecovery(code);
    if (ok) {
      onReset == null || onReset();
    } else {
      setError('Code de récupération invalide');
    }
  }), [code, onReset]);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: {
      flex: 1,
      alignItems: 'center',
      justifyContent: 'center',
      padding: 24
    },
    testID: "forgot-pin-screen",
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: {
        fontSize: 20,
        fontWeight: '700',
        marginBottom: 12
      },
      children: "PIN oubli\xE9"
    }), !!error && (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: {
        color: '#DC2626',
        marginBottom: 12
      },
      children: error
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      testID: "biometric-button",
      onPress: handleBiometric,
      style: {
        backgroundColor: '#10B981',
        padding: 12,
        borderRadius: 8,
        marginBottom: 12
      },
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: {
          color: 'white',
          fontWeight: '700'
        },
        children: "Utiliser la biom\xE9trie"
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
      value: code,
      onChangeText: setCode,
      placeholder: "Code de r\xE9cup\xE9ration",
      autoCapitalize: "characters",
      style: {
        width: '80%',
        borderWidth: 1,
        borderColor: '#E5E7EB',
        borderRadius: 8,
        padding: 12,
        marginBottom: 8
      },
      testID: "recovery-input"
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      testID: "recovery-submit",
      onPress: handleRecovery,
      style: {
        backgroundColor: '#3B82F6',
        padding: 12,
        borderRadius: 8
      },
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: {
          color: 'white',
          fontWeight: '700'
        },
        children: "Valider"
      })
    })]
  });
};
ForgotPinScreen.propTypes = {
  onReset: _propTypes.default.func.isRequired
};
var _default = exports.default = ForgotPinScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,