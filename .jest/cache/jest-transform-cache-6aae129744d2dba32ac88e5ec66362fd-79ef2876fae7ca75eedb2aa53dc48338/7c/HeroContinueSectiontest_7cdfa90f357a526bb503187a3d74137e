84976862f8129e590984bdb7b945582b
_getJestObj().mock('../../../../src/components/ui/Card', function () {
  var _require = require('react-native'),
    View = _require.View;
  return function (_ref) {
    var children = _ref.children,
      style = _ref.style,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      style: style
    }, props, {
      testID: "hero-card",
      children: children
    }));
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _HeroContinueSection = _interopRequireDefault(require("../../../../src/screens/Dashboard/components/HeroContinueSection"));
var _ThemeContext = require("../../../../src/contexts/ThemeContext");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "style"];
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('HeroContinueSection', function () {
  var mockTheme = {
    colors: {
      surface: '#FFFFFF',
      text: '#1F2937',
      textSecondary: '#6B7280'
    }
  };
  var mockLastActivity = {
    title: 'Vocabulaire Animaux',
    level: '2',
    type: 'vocabulary',
    metadata: {
      word: 4,
      totalWords: 15,
      categoryIndex: 1
    }
  };
  var defaultProps = {
    onPress: jest.fn(),
    accentColor: '#3B82F6',
    isLoading: false
  };
  var renderComponent = function renderComponent() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
      value: mockTheme,
      children: (0, _jsxRuntime.jsx)(_HeroContinueSection.default, Object.assign({}, defaultProps, props))
    }));
  };
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('√âtat de chargement', function () {
    it('devrait afficher l\'indicateur de chargement', function () {
      var _renderComponent = renderComponent({
          isLoading: true
        }),
        getByText = _renderComponent.getByText;
      expect(getByText('Chargement...')).toBeTruthy();
    });
  });
  describe('√âtat vide (premi√®re utilisation)', function () {
    it('devrait afficher le message de d√©marrage', function () {
      var _renderComponent2 = renderComponent({
          lastActivity: null
        }),
        getByText = _renderComponent2.getByText;
      expect(getByText('üöÄ')).toBeTruthy();
      expect(getByText('Commencer l\'apprentissage')).toBeTruthy();
      expect(getByText('Choisissez votre premier exercice')).toBeTruthy();
      expect(getByText('Commencer >')).toBeTruthy();
    });
    it('devrait appeler onPress avec "levelSelection"', function () {
      var mockOnPress = jest.fn();
      var _renderComponent3 = renderComponent({
          lastActivity: null,
          onPress: mockOnPress
        }),
        getByText = _renderComponent3.getByText;
      _reactNative.fireEvent.press(getByText('Commencer >'));
      expect(mockOnPress).toHaveBeenCalledWith('levelSelection');
    });
  });
  describe('√âtat avec activit√© existante', function () {
    it('devrait afficher les informations de l\'activit√©', function () {
      var _renderComponent4 = renderComponent({
          lastActivity: mockLastActivity
        }),
        getByText = _renderComponent4.getByText;
      expect(getByText('üìö')).toBeTruthy();
      expect(getByText('Reprendre')).toBeTruthy();
      expect(getByText('Vocabulaire Animaux')).toBeTruthy();
      expect(getByText('Continuer ‚ñ∂Ô∏è')).toBeTruthy();
    });
    it('devrait calculer le pourcentage correct', function () {
      var _renderComponent5 = renderComponent({
          lastActivity: mockLastActivity
        }),
        getByText = _renderComponent5.getByText;
      expect(getByText('33%')).toBeTruthy();
    });
    it('devrait appeler onPress avec l\'activit√©', function () {
      var mockOnPress = jest.fn();
      var _renderComponent6 = renderComponent({
          lastActivity: mockLastActivity,
          onPress: mockOnPress
        }),
        getByText = _renderComponent6.getByText;
      _reactNative.fireEvent.press(getByText('Continuer ‚ñ∂Ô∏è'));
      expect(mockOnPress).toHaveBeenCalledWith(mockLastActivity);
    });
    it('devrait g√©rer une activit√© sans m√©tadonn√©es', function () {
      var activityWithoutMetadata = {
        title: 'Grammaire Simple',
        level: '1',
        type: 'grammar'
      };
      var _renderComponent7 = renderComponent({
          lastActivity: activityWithoutMetadata
        }),
        getByText = _renderComponent7.getByText;
      expect(getByText('Grammaire Simple')).toBeTruthy();
      expect(getByText('7%')).toBeTruthy();
    });
  });
  describe('Gestion des couleurs', function () {
    it('devrait utiliser la couleur d\'accent personnalis√©e', function () {
      var _renderComponent8 = renderComponent({
          lastActivity: mockLastActivity,
          accentColor: '#8B5CF6'
        }),
        getByText = _renderComponent8.getByText;
      expect(getByText('33%')).toBeTruthy();
    });
    it('devrait fonctionner sans contexte de th√®me', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HeroContinueSection.default, {
          lastActivity: mockLastActivity,
          onPress: jest.fn()
        })),
        getByText = _render.getByText;
      expect(getByText('Vocabulaire Animaux')).toBeTruthy();
    });
  });
  describe('Gestion des callbacks', function () {
    it('ne devrait pas planter si onPress n\'est pas fourni', function () {
      var _renderComponent9 = renderComponent({
          lastActivity: null,
          onPress: undefined
        }),
        getByText = _renderComponent9.getByText;
      expect(function () {
        return _reactNative.fireEvent.press(getByText('Commencer >'));
      }).not.toThrow();
    });
  });
  describe('Cas limites', function () {
    it('devrait g√©rer un niveau manquant', function () {
      var activityWithoutLevel = {
        title: 'Test Activity',
        type: 'vocabulary'
      };
      var _renderComponent0 = renderComponent({
          lastActivity: activityWithoutLevel
        }),
        getByText = _renderComponent0.getByText;
      expect(getByText('Test Activity')).toBeTruthy();
    });
    it('devrait afficher le pourcentage r√©el m√™me au-dessus de 100%', function () {
      var completedActivity = Object.assign({}, mockLastActivity, {
        metadata: {
          word: 20,
          totalWords: 15
        }
      });
      var _renderComponent1 = renderComponent({
          lastActivity: completedActivity
        }),
        getByText = _renderComponent1.getByText;
      expect(getByText('140%')).toBeTruthy();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,