9e00ac895b23ab503c65b49675a8bdea
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SkipEnteringContext = exports.LayoutAnimationConfig = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _react = _interopRequireWildcard(require("react"));
var _core = require("../core");
var _findNodeHandle = require("../platformFunctions/findNodeHandle");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var SkipEnteringContext = exports.SkipEnteringContext = (0, _react.createContext)(null);
function SkipEntering(props) {
  var skipValueRef = (0, _react.useRef)(props.shouldSkip);
  (0, _react.useEffect)(function () {
    skipValueRef.current = false;
  }, [skipValueRef]);
  return (0, _jsxRuntime.jsx)(SkipEnteringContext.Provider, {
    value: skipValueRef,
    children: props.children
  });
}
var LayoutAnimationConfig = exports.LayoutAnimationConfig = function (_Component) {
  function LayoutAnimationConfig() {
    (0, _classCallCheck2.default)(this, LayoutAnimationConfig);
    return _callSuper(this, LayoutAnimationConfig, arguments);
  }
  (0, _inherits2.default)(LayoutAnimationConfig, _Component);
  return (0, _createClass2.default)(LayoutAnimationConfig, [{
    key: "getMaybeWrappedChildren",
    value: function getMaybeWrappedChildren() {
      return _react.Children.count(this.props.children) > 1 && this.props.skipExiting ? _react.Children.map(this.props.children, function (child) {
        return (0, _jsxRuntime.jsx)(LayoutAnimationConfig, {
          skipExiting: true,
          children: child
        });
      }) : this.props.children;
    }
  }, {
    key: "setShouldAnimateExiting",
    value: function setShouldAnimateExiting() {
      if (_react.Children.count(this.props.children) === 1) {
        var tag = (0, _findNodeHandle.findNodeHandle)(this);
        if (tag) {
          (0, _core.setShouldAnimateExitingForTag)(tag, !this.props.skipExiting);
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.props.skipExiting !== undefined) {
        this.setShouldAnimateExiting();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var children = this.getMaybeWrappedChildren();
      if (this.props.skipEntering === undefined) {
        return children;
      }
      return (0, _jsxRuntime.jsx)(SkipEntering, {
        shouldSkip: this.props.skipEntering,
        children: children
      });
    }
  }]);
}(_react.Component);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,