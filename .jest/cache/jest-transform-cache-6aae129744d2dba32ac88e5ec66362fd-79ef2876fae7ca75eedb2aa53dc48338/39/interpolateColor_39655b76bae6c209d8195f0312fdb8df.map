{"version":3,"names":["Object","defineProperty","exports","value","interpolateColor","Extrapolate","ColorSpace","useInterpolateConfig","_Colors","require","_core","_interpolation","_useSharedValue","_errors","Extrapolation","_worklet_12089101195034_init_data","code","location","sourceMap","version","interpolateColorsHSV","_e","global","Error","interpolateColorTs1","inputRange","colors","options","h","_options$useCorrected","useCorrectedHSVInterpolation","correctedInputRange","originalH","correctedH","i","length","d","push","interpolate","CLAMP","s","v","a","hsvToColor","__closure","__workletHash","__initData","__stackDetails","_worklet_12758569594929_init_data","toLinearSpace","interpolateColorTs2","x","gamma","map","Math","pow","_worklet_16323081088977_init_data","toGammaSpace","interpolateColorTs3","round","_worklet_11009674977133_init_data","interpolateColorsRGB","interpolateColorTs4","_options$gamma","outputR","r","outputG","g","outputB","b","rgbaColor","_worklet_360550181944_init_data","getInterpolateRGB","interpolateColorTs5","color","processedColor","processColor","undefined","red","green","blue","opacity","_worklet_15197086182543_init_data","getInterpolateHSV","interpolateColorTs6","processedHSVColor","RGBtoHSV","_worklet_3952861379060_init_data","outputRange","colorSpace","arguments","ReanimatedError","RGB","useSharedValue","cache","makeMutable"],"sources":["interpolateColor.ts"],"sourcesContent":["'use strict';\nimport {\n  hsvToColor,\n  RGBtoHSV,\n  rgbaColor,\n  processColor,\n  red,\n  green,\n  blue,\n  opacity,\n} from './Colors';\nimport { makeMutable } from './core';\nimport { Extrapolation, interpolate } from './interpolation';\nimport type { SharedValue } from './commonTypes';\nimport { useSharedValue } from './hook/useSharedValue';\nimport { ReanimatedError } from './errors';\n\n/** @deprecated Please use Extrapolation instead */\nexport const Extrapolate = Extrapolation;\n\n/**\n * Options for color interpolation.\n *\n * @param gamma - Gamma value used in gamma correction. Defaults to `2.2`.\n * @param useCorrectedHSVInterpolation - Whether to reduce the number of colors\n *   the interpolation has to go through. Defaults to `true`.\n */\nexport type InterpolationOptions = {\n  gamma?: number;\n  useCorrectedHSVInterpolation?: boolean;\n};\n\nconst interpolateColorsHSV = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateHSV,\n  options: InterpolationOptions\n) => {\n  'worklet';\n  let h = 0;\n  const { useCorrectedHSVInterpolation = true } = options;\n  if (useCorrectedHSVInterpolation) {\n    // if the difference between hues in a range is > 180 deg\n    // then move the hue at the right end of the range +/- 360 deg\n    // and add the next point in the original place + 0.00001 with original hue\n    // to not break the next range\n    const correctedInputRange = [inputRange[0]];\n    const originalH = colors.h;\n    const correctedH = [originalH[0]];\n\n    for (let i = 1; i < originalH.length; ++i) {\n      const d = originalH[i] - originalH[i - 1];\n      if (originalH[i] > originalH[i - 1] && d > 0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] - 1);\n        correctedH.push(originalH[i]);\n      } else if (originalH[i] < originalH[i - 1] && d < -0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] + 1);\n        correctedH.push(originalH[i]);\n      } else {\n        correctedInputRange.push(inputRange[i]);\n        correctedH.push(originalH[i]);\n      }\n    }\n    h =\n      (interpolate(\n        value,\n        correctedInputRange,\n        correctedH,\n        Extrapolation.CLAMP\n      ) +\n        1) %\n      1;\n  } else {\n    h = interpolate(value, inputRange, colors.h, Extrapolation.CLAMP);\n  }\n  const s = interpolate(value, inputRange, colors.s, Extrapolation.CLAMP);\n  const v = interpolate(value, inputRange, colors.v, Extrapolation.CLAMP);\n  const a = interpolate(value, inputRange, colors.a, Extrapolation.CLAMP);\n  return hsvToColor(h, s, v, a);\n};\n\nconst toLinearSpace = (x: number[], gamma: number): number[] => {\n  'worklet';\n  return x.map((v) => Math.pow(v / 255, gamma));\n};\n\nconst toGammaSpace = (x: number, gamma: number): number => {\n  'worklet';\n  return Math.round(Math.pow(x, 1 / gamma) * 255);\n};\n\nconst interpolateColorsRGB = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateRGB,\n  options: InterpolationOptions\n) => {\n  'worklet';\n  const { gamma = 2.2 } = options;\n  let { r: outputR, g: outputG, b: outputB } = colors;\n  if (gamma !== 1) {\n    outputR = toLinearSpace(outputR, gamma);\n    outputG = toLinearSpace(outputG, gamma);\n    outputB = toLinearSpace(outputB, gamma);\n  }\n  const r = interpolate(value, inputRange, outputR, Extrapolation.CLAMP);\n  const g = interpolate(value, inputRange, outputG, Extrapolation.CLAMP);\n  const b = interpolate(value, inputRange, outputB, Extrapolation.CLAMP);\n  const a = interpolate(value, inputRange, colors.a, Extrapolation.CLAMP);\n  if (gamma === 1) {\n    return rgbaColor(r, g, b, a);\n  }\n  return rgbaColor(\n    toGammaSpace(r, gamma),\n    toGammaSpace(g, gamma),\n    toGammaSpace(b, gamma),\n    a\n  );\n};\n\nexport interface InterpolateRGB {\n  r: number[];\n  g: number[];\n  b: number[];\n  a: number[];\n}\n\nconst getInterpolateRGB = (\n  colors: readonly (string | number)[]\n): InterpolateRGB => {\n  'worklet';\n\n  const r = [];\n  const g = [];\n  const b = [];\n  const a = [];\n  for (let i = 0; i < colors.length; ++i) {\n    const color = colors[i];\n    const processedColor = processColor(color);\n    // explicit check in case if processedColor is 0\n    if (processedColor !== null && processedColor !== undefined) {\n      r.push(red(processedColor));\n      g.push(green(processedColor));\n      b.push(blue(processedColor));\n      a.push(opacity(processedColor));\n    }\n  }\n  return { r, g, b, a };\n};\n\nexport interface InterpolateHSV {\n  h: number[];\n  s: number[];\n  v: number[];\n  a: number[];\n}\n\nconst getInterpolateHSV = (\n  colors: readonly (string | number)[]\n): InterpolateHSV => {\n  'worklet';\n  const h = [];\n  const s = [];\n  const v = [];\n  const a = [];\n  for (let i = 0; i < colors.length; ++i) {\n    const color = colors[i];\n    const processedColor = processColor(color) as any;\n    if (typeof processedColor === 'number') {\n      const processedHSVColor = RGBtoHSV(\n        red(processedColor),\n        green(processedColor),\n        blue(processedColor)\n      );\n\n      h.push(processedHSVColor.h);\n      s.push(processedHSVColor.s);\n      v.push(processedHSVColor.v);\n      a.push(opacity(processedColor));\n    }\n  }\n  return { h, s, v, a };\n};\n\n/**\n * Lets you map a value from a range of numbers to a range of colors using\n * linear interpolation.\n *\n * @param value - A number from the `input` range that is going to be mapped to\n *   the color in the `output` range.\n * @param inputRange - An array of numbers specifying the input range of the\n *   interpolation.\n * @param outputRange - An array of output colors values (eg. \"red\", \"#00FFCC\",\n *   \"rgba(255, 0, 0, 0.5)\").\n * @param colorSpace - The color space to use for interpolation. Defaults to\n *   'RGB'.\n * @param options - Additional options for interpolation -\n *   {@link InterpolationOptions}.\n * @returns The color after interpolation from within the output range in\n *   rgba(r, g, b, a) format.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/utilities/interpolateColor\n */\nexport function interpolateColor(\n  value: number,\n  inputRange: readonly number[],\n  outputRange: readonly string[],\n  colorSpace?: 'RGB' | 'HSV',\n  options?: InterpolationOptions\n): string;\n\nexport function interpolateColor(\n  value: number,\n  inputRange: readonly number[],\n  outputRange: readonly number[],\n  colorSpace?: 'RGB' | 'HSV',\n  options?: InterpolationOptions\n): number;\n\nexport function interpolateColor(\n  value: number,\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace: 'RGB' | 'HSV' = 'RGB',\n  options: InterpolationOptions = {}\n): string | number {\n  'worklet';\n  if (colorSpace === 'HSV') {\n    return interpolateColorsHSV(\n      value,\n      inputRange,\n      getInterpolateHSV(outputRange),\n      options\n    );\n  } else if (colorSpace === 'RGB') {\n    return interpolateColorsRGB(\n      value,\n      inputRange,\n      getInterpolateRGB(outputRange),\n      options\n    );\n  }\n  throw new ReanimatedError(\n    `Invalid color space provided: ${\n      colorSpace as string\n    }. Supported values are: ['RGB', 'HSV'].`\n  );\n}\n\nexport enum ColorSpace {\n  RGB = 0,\n  HSV = 1,\n}\n\nexport interface InterpolateConfig {\n  inputRange: readonly number[];\n  outputRange: readonly (string | number)[];\n  colorSpace: ColorSpace;\n  cache: SharedValue<InterpolateRGB | InterpolateHSV | null>;\n  options: InterpolationOptions;\n}\n\nexport function useInterpolateConfig(\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace = ColorSpace.RGB,\n  options: InterpolationOptions = {}\n): SharedValue<InterpolateConfig> {\n  return useSharedValue<InterpolateConfig>({\n    inputRange,\n    outputRange,\n    colorSpace,\n    cache: makeMutable<InterpolateRGB | InterpolateHSV | null>(null),\n    options,\n  });\n}\n"],"mappings":"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","ignoreList":[]}