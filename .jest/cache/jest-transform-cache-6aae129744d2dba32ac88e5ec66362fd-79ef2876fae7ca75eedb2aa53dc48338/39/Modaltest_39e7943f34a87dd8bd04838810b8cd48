4e4bc44e15cf18021a0be10810a87166
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Modal = _interopRequireDefault(require("../../../src/components/ui/Modal"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
describe('Modal', function () {
  it('ne devrait pas rendre le contenu si isVisible est faux', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        isVisible: false,
        onClose: function onClose() {},
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Contenu du modal"
        })
      })),
      queryByText = _render.queryByText;
    expect(queryByText('Contenu du modal')).toBeNull();
  });
  it('devrait rendre le contenu si isVisible est vrai', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        isVisible: true,
        onClose: function onClose() {},
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Contenu du modal"
        })
      })),
      getByText = _render2.getByText;
    expect(getByText('Contenu du modal')).toBeTruthy();
  });
  it('devrait appeler onClose quand le fond est pressé et backdropDismiss est vrai', function () {
    var mockOnClose = jest.fn();
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        isVisible: true,
        onClose: mockOnClose,
        backdropDismiss: true,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Contenu du modal"
        })
      })),
      getByTestId = _render3.getByTestId;
    _reactNative.fireEvent.press(getByTestId('modal-backdrop'));
    expect(mockOnClose).toHaveBeenCalledTimes(1);
  });
  it('ne devrait pas appeler onClose quand le fond est pressé et backdropDismiss est faux', function () {
    var mockOnClose = jest.fn();
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        isVisible: true,
        onClose: mockOnClose,
        backdropDismiss: false,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Contenu du modal"
        })
      })),
      queryByTestId = _render4.queryByTestId;
    _reactNative.fireEvent.press(queryByTestId('modal-backdrop'));
    expect(mockOnClose).not.toHaveBeenCalled();
  });
  it('devrait rendre le titre si fourni', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        isVisible: true,
        onClose: function onClose() {},
        title: "Titre du Modal",
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Contenu"
        })
      })),
      getByText = _render5.getByText;
    expect(getByText('Titre du Modal')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9Nb2RhbCIsIl9yZWFjdE5hdGl2ZTIiLCJfanN4UnVudGltZSIsImRlc2NyaWJlIiwiaXQiLCJfcmVuZGVyIiwicmVuZGVyIiwianN4IiwiZGVmYXVsdCIsImlzVmlzaWJsZSIsIm9uQ2xvc2UiLCJjaGlsZHJlbiIsIlRleHQiLCJxdWVyeUJ5VGV4dCIsImV4cGVjdCIsInRvQmVOdWxsIiwiX3JlbmRlcjIiLCJnZXRCeVRleHQiLCJ0b0JlVHJ1dGh5IiwibW9ja09uQ2xvc2UiLCJqZXN0IiwiZm4iLCJfcmVuZGVyMyIsImJhY2tkcm9wRGlzbWlzcyIsImdldEJ5VGVzdElkIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJfcmVuZGVyNCIsInF1ZXJ5QnlUZXN0SWQiLCJub3QiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwiX3JlbmRlcjUiLCJ0aXRsZSJdLCJzb3VyY2VzIjpbIk1vZGFsLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3VpL01vZGFsJztcbmltcG9ydCB7IFRleHQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuXG5kZXNjcmliZSgnTW9kYWwnLCAoKSA9PiB7XG4gIGl0KCduZSBkZXZyYWl0IHBhcyByZW5kcmUgbGUgY29udGVudSBzaSBpc1Zpc2libGUgZXN0IGZhdXgnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBxdWVyeUJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgPE1vZGFsIGlzVmlzaWJsZT17ZmFsc2V9IG9uQ2xvc2U9eygpID0+IHt9fT5cbiAgICAgICAgPFRleHQ+Q29udGVudSBkdSBtb2RhbDwvVGV4dD5cbiAgICAgIDwvTW9kYWw+XG4gICAgKTtcbiAgICBleHBlY3QocXVlcnlCeVRleHQoJ0NvbnRlbnUgZHUgbW9kYWwnKSkudG9CZU51bGwoKTtcbiAgfSk7XG5cbiAgaXQoJ2RldnJhaXQgcmVuZHJlIGxlIGNvbnRlbnUgc2kgaXNWaXNpYmxlIGVzdCB2cmFpJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICA8TW9kYWwgaXNWaXNpYmxlPXt0cnVlfSBvbkNsb3NlPXsoKSA9PiB7fX0+XG4gICAgICAgIDxUZXh0PkNvbnRlbnUgZHUgbW9kYWw8L1RleHQ+XG4gICAgICA8L01vZGFsPlxuICAgICk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnQ29udGVudSBkdSBtb2RhbCcpKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KCdkZXZyYWl0IGFwcGVsZXIgb25DbG9zZSBxdWFuZCBsZSBmb25kIGVzdCBwcmVzc8OpIGV0IGJhY2tkcm9wRGlzbWlzcyBlc3QgdnJhaScsICgpID0+IHtcbiAgICBjb25zdCBtb2NrT25DbG9zZSA9IGplc3QuZm4oKTtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICA8TW9kYWwgaXNWaXNpYmxlPXt0cnVlfSBvbkNsb3NlPXttb2NrT25DbG9zZX0gYmFja2Ryb3BEaXNtaXNzPXt0cnVlfT5cbiAgICAgICAgPFRleHQ+Q29udGVudSBkdSBtb2RhbDwvVGV4dD5cbiAgICAgIDwvTW9kYWw+XG4gICAgKTtcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ21vZGFsLWJhY2tkcm9wJykpO1xuICAgIGV4cGVjdChtb2NrT25DbG9zZSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICB9KTtcblxuICBpdCgnbmUgZGV2cmFpdCBwYXMgYXBwZWxlciBvbkNsb3NlIHF1YW5kIGxlIGZvbmQgZXN0IHByZXNzw6kgZXQgYmFja2Ryb3BEaXNtaXNzIGVzdCBmYXV4JywgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tPbkNsb3NlID0gamVzdC5mbigpO1xuICAgIGNvbnN0IHsgcXVlcnlCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgPE1vZGFsIGlzVmlzaWJsZT17dHJ1ZX0gb25DbG9zZT17bW9ja09uQ2xvc2V9IGJhY2tkcm9wRGlzbWlzcz17ZmFsc2V9PlxuICAgICAgICA8VGV4dD5Db250ZW51IGR1IG1vZGFsPC9UZXh0PlxuICAgICAgPC9Nb2RhbD5cbiAgICApO1xuICAgIGZpcmVFdmVudC5wcmVzcyhxdWVyeUJ5VGVzdElkKCdtb2RhbC1iYWNrZHJvcCcpKTtcbiAgICBleHBlY3QobW9ja09uQ2xvc2UpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xuXG4gIGl0KCdkZXZyYWl0IHJlbmRyZSBsZSB0aXRyZSBzaSBmb3VybmknLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgIDxNb2RhbCBpc1Zpc2libGU9e3RydWV9IG9uQ2xvc2U9eygpID0+IHt9fSB0aXRsZT1cIlRpdHJlIGR1IE1vZGFsXCI+XG4gICAgICAgIDxUZXh0PkNvbnRlbnU8L1RleHQ+XG4gICAgICA8L01vZGFsPlxuICAgICk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnVGl0cmUgZHUgTW9kYWwnKSkudG9CZVRydXRoeSgpO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsTUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsYUFBQSxHQUFBSCxPQUFBO0FBQW9DLElBQUFJLFdBQUEsR0FBQUosT0FBQTtBQUVwQ0ssUUFBUSxDQUFDLE9BQU8sRUFBRSxZQUFNO0VBQ3RCQyxFQUFFLENBQUMsd0RBQXdELEVBQUUsWUFBTTtJQUNqRSxJQUFBQyxPQUFBLEdBQXdC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