f74fc3a07f67c2f43406dd90536cbf4e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CurrentLevelProvider = CurrentLevelProvider;
exports.useCurrentLevel = useCurrentLevel;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
var CurrentLevelContext = (0, _react.createContext)();
function CurrentLevelProvider(_ref) {
  var children = _ref.children,
    _ref$initialLevel = _ref.initialLevel,
    initialLevel = _ref$initialLevel === void 0 ? "1" : _ref$initialLevel;
  var _useState = (0, _react.useState)(initialLevel),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    currentLevel = _useState2[0],
    setCurrentLevel = _useState2[1];
  return (0, _jsxRuntime.jsx)(CurrentLevelContext.Provider, {
    value: {
      currentLevel: currentLevel,
      setCurrentLevel: setCurrentLevel
    },
    children: children
  });
}
CurrentLevelProvider.propTypes = {
  children: _propTypes.default.node.isRequired,
  initialLevel: _propTypes.default.string
};
function useCurrentLevel() {
  var context = (0, _react.useContext)(CurrentLevelContext);
  if (!context) {
    throw new Error("useCurrentLevel doit être utilisé dans CurrentLevelProvider");
  }
  return context;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3Byb3BUeXBlcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfanN4UnVudGltZSIsIkN1cnJlbnRMZXZlbENvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiQ3VycmVudExldmVsUHJvdmlkZXIiLCJfcmVmIiwiY2hpbGRyZW4iLCJfcmVmJGluaXRpYWxMZXZlbCIsImluaXRpYWxMZXZlbCIsIl91c2VTdGF0ZSIsInVzZVN0YXRlIiwiX3VzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5MiIsImRlZmF1bHQiLCJjdXJyZW50TGV2ZWwiLCJzZXRDdXJyZW50TGV2ZWwiLCJqc3giLCJQcm92aWRlciIsInZhbHVlIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwibm9kZSIsImlzUmVxdWlyZWQiLCJzdHJpbmciLCJ1c2VDdXJyZW50TGV2ZWwiLCJjb250ZXh0IiwidXNlQ29udGV4dCIsIkVycm9yIl0sInNvdXJjZXMiOlsiQ3VycmVudExldmVsQ29udGV4dC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5cclxuLy8gQ3LDqWUgbGUgY29udGV4dGVcclxuY29uc3QgQ3VycmVudExldmVsQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcclxuXHJcbi8vIFByb3ZpZGVyIHBvdXIgZW5nbG9iZXIgbCdhcHBcclxuZXhwb3J0IGZ1bmN0aW9uIEN1cnJlbnRMZXZlbFByb3ZpZGVyKHsgY2hpbGRyZW4sIGluaXRpYWxMZXZlbCA9IFwiMVwiIH0pIHtcclxuICBjb25zdCBbY3VycmVudExldmVsLCBzZXRDdXJyZW50TGV2ZWxdID0gdXNlU3RhdGUoaW5pdGlhbExldmVsKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxDdXJyZW50TGV2ZWxDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7IGN1cnJlbnRMZXZlbCwgc2V0Q3VycmVudExldmVsIH19PlxyXG4gICAgICB7Y2hpbGRyZW59XHJcbiAgICA8L0N1cnJlbnRMZXZlbENvbnRleHQuUHJvdmlkZXI+XHJcbiAgKTtcclxufVxyXG5cclxuQ3VycmVudExldmVsUHJvdmlkZXIucHJvcFR5cGVzID0ge1xyXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxyXG4gIGluaXRpYWxMZXZlbDogUHJvcFR5cGVzLnN0cmluZyxcclxufTtcclxuXHJcbi8vIEhvb2sgZCdhY2PDqHMgcHJhdGlxdWVcclxuZXhwb3J0IGZ1bmN0aW9uIHVzZUN1cnJlbnRMZXZlbCgpIHtcclxuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChDdXJyZW50TGV2ZWxDb250ZXh0KTtcclxuICBpZiAoIWNvbnRleHQpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihcInVzZUN1cnJlbnRMZXZlbCBkb2l0IMOqdHJlIHV0aWxpc8OpIGRhbnMgQ3VycmVudExldmVsUHJvdmlkZXJcIik7XHJcbiAgfVxyXG4gIHJldHVybiBjb250ZXh0O1xyXG59ICJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUFtQyxJQUFBRyxXQUFBLEdBQUFILE9BQUE7QUFHbkMsSUFBTUksbUJBQW1CLEdBQUcsSUFBQUMsb0JBQWEsRUFBQyxDQUFDO0FBR3BDLFNBQVNDLG9CQUFvQkEsQ0FBQUMsSUFBQSxFQUFtQztFQUFBLElBQWhDQyxRQUFRLEdBQUFELElBQUEsQ0FBUkMsUUFBUTtJQUFBQyxpQkFBQSxHQUFBRixJQUFBLENBQUVHLFlBQVk7SUFBWkEsWUFBWSxHQUFBRCxpQkFBQSxjQUFHLEdBQUcsR0FBQUEsaUJBQUE7RUFDakUsSUFBQUUsU0FBQSxHQUF3QyxJQUFBQyxlQUFRLEVBQUNGLFlBQVksQ0FBQztJQUFBRyxVQUFBLE9BQUFDLGVBQUEsQ0FBQUMsT0FBQSxFQUFBSixTQUFBO0lBQXZESyxZQUFZLEdBQUFILFVBQUE7SUFBRUksZUFBZSxHQUFBSixVQUFBO0VBRXBDLE9BQ0UsSUFBQVYsV0FBQSxDQUFBZSxHQUFBLEVBQUNkLG1CQUFtQixDQUFDZSxRQUFRO0lBQUNDLEtBQUssRUFBRTtNQUFFSixZQUFZLEVBQVpBLFlBQVk7TUFBRUMsZUFBZSxFQUFmQTtJQUFnQixDQUFFO0lBQUFULFFBQUEsRUFDcEVBO0VBQVEsQ0FDbUIsQ0FBQztBQUVuQztBQUVBRixvQkFBb0IsQ0FBQ2UsU0FBUyxHQUFHO0VBQy9CYixRQUFRLEVBQUVjLGtCQUFTLENBQUNDLElBQUksQ0FBQ0MsVUFBVTtFQUNuQ2QsWUFBWSxFQUFFWSxrQkFBUyxDQUFDRztBQUMxQixDQUFDO0FBR00sU0FBU0MsZUFBZUEsQ0FBQSxFQUFHO0VBQ2hDLElBQU1DLE9BQU8sR0FBRyxJQUFBQyxpQkFBVSxFQUFDeEIsbUJBQW1CLENBQUM7RUFDL0MsSUFBSSxDQUFDdUIsT0FBTyxFQUFFO0lBQ1osTUFBTSxJQUFJRSxLQUFLLENBQUMsNkRBQTZELENBQUM7RUFDaEY7RUFDQSxPQUFPRixPQUFPO0FBQ2hCIiwiaWdub3JlTGlzdCI6W119