7110b3dbdfce224122f5821e04d1f4d4
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _expoRouter = require("expo-router");
var _Container = _interopRequireWildcard(require("../../../components/layout/Container"));
var _ErrorCorrectionHeader = _interopRequireDefault(require("./ErrorCorrectionHeader"));
var _ErrorCorrectionCategorySelector = _interopRequireDefault(require("./ErrorCorrectionCategorySelector"));
var _ErrorCorrectionModeSelector = _interopRequireDefault(require("./ErrorCorrectionModeSelector"));
var _ErrorCorrectionProgress = _interopRequireDefault(require("./ErrorCorrectionProgress"));
var _ErrorCorrectionWordSection = _interopRequireDefault(require("./ErrorCorrectionWordSection"));
var _ErrorCorrectionNavigation = _interopRequireDefault(require("./ErrorCorrectionNavigation"));
var _ErrorCorrectionResultsCard = _interopRequireDefault(require("./ErrorCorrectionResultsCard"));
var _useErrorCorrection2 = _interopRequireDefault(require("./hooks/useErrorCorrection"));
var _useLastActivity2 = _interopRequireDefault(require("../../../hooks/useLastActivity"));
var _errorCorrectionDataHelper = require("../../../utils/errorCorrection/errorCorrectionDataHelper");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var ErrorCorrectionExercise = function ErrorCorrectionExercise(_ref) {
  var route = _ref.route;
  var _ref2 = route.params || {},
    _ref2$level = _ref2.level,
    level = _ref2$level === void 0 ? "A1" : _ref2$level;
  var styles = (0, _style.default)();
  var _useLastActivity = (0, _useLastActivity2.default)(),
    saveActivity = _useLastActivity.saveActivity;
  var levelColor = (0, _errorCorrectionDataHelper.getLevelColor)(level);
  var errorCorrectionData = (0, _react.useMemo)(function () {
    return (0, _errorCorrectionDataHelper.getErrorsData)(level);
  }, [level]);
  var _useErrorCorrection = (0, _useErrorCorrection2.default)(errorCorrectionData, level),
    selectedCategory = _useErrorCorrection.selectedCategory,
    currentExerciseIndex = _useErrorCorrection.currentExerciseIndex,
    correctionMode = _useErrorCorrection.correctionMode,
    showFeedback = _useErrorCorrection.showFeedback,
    isCorrect = _useErrorCorrection.isCorrect,
    showResults = _useErrorCorrection.showResults,
    loaded = _useErrorCorrection.loaded,
    showDetailedProgress = _useErrorCorrection.showDetailedProgress,
    userCorrection = _useErrorCorrection.userCorrection,
    selectedErrorIndices = _useErrorCorrection.selectedErrorIndices,
    selectedChoiceIndex = _useErrorCorrection.selectedChoiceIndex,
    currentExercise = _useErrorCorrection.currentExercise,
    exercises = _useErrorCorrection.exercises,
    changeCategory = _useErrorCorrection.changeCategory,
    startExercise = _useErrorCorrection.startExercise,
    toggleDetailedProgress = _useErrorCorrection.toggleDetailedProgress,
    handleNext = _useErrorCorrection.handleNext,
    handlePrevious = _useErrorCorrection.handlePrevious,
    checkAnswer = _useErrorCorrection.checkAnswer,
    handleWordPress = _useErrorCorrection.handleWordPress,
    handleChoiceSelect = _useErrorCorrection.handleChoiceSelect,
    setUserCorrection = _useErrorCorrection.setUserCorrection,
    setShowResults = _useErrorCorrection.setShowResults,
    isLastExerciseInCategory = _useErrorCorrection.isLastExerciseInCategory,
    hasValidData = _useErrorCorrection.hasValidData,
    stats = _useErrorCorrection.stats,
    display = _useErrorCorrection.display;
  var _useState = (0, _react.useState)("browse"),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    viewMode = _useState2[0],
    setViewMode = _useState2[1];
  var currentCategoryName = (0, _react.useMemo)(function () {
    var _errorCorrectionData$;
    return (errorCorrectionData == null || (_errorCorrectionData$ = errorCorrectionData.categories) == null || (_errorCorrectionData$ = _errorCorrectionData$.find(function (cat) {
      return cat.id === selectedCategory;
    })) == null ? void 0 : _errorCorrectionData$.name) || "Général";
  }, [errorCorrectionData == null ? void 0 : errorCorrectionData.categories, selectedCategory]);
  var activityMetadata = (0, _react.useMemo)(function () {
    return {
      exercise: currentExerciseIndex,
      totalExercises: exercises.length,
      category: currentCategoryName,
      mode: correctionMode,
      categoryId: selectedCategory
    };
  }, [currentExerciseIndex, exercises.length, currentCategoryName, correctionMode, selectedCategory]);
  var handleSaveActivity = (0, _react.useCallback)(function () {
    if (loaded && hasValidData && viewMode === "exercise" && currentExercise && !showResults) {
      saveActivity({
        title: "Correction d'erreurs",
        level: level,
        type: "errorCorrection",
        metadata: activityMetadata
      });
    }
  }, [loaded, hasValidData, viewMode, currentExercise, showResults, level, saveActivity, activityMetadata]);
  (0, _react.useEffect)(function () {
    handleSaveActivity();
  }, [handleSaveActivity]);
  var handleBackPress = (0, _react.useCallback)(function () {
    if (viewMode === "exercise") {
      setViewMode("browse");
    } else {
      _expoRouter.router.push({
        pathname: "/tabs/exerciseSelection",
        params: {
          level: level
        }
      });
    }
  }, [viewMode, level]);
  var handleStartExercise = (0, _react.useCallback)(function (mode) {
    startExercise(mode);
    setViewMode("exercise");
  }, [startExercise]);
  var handleCategoryChange = (0, _react.useCallback)(function (categoryId) {
    changeCategory(categoryId);
  }, [changeCategory]);
  var handleCategoryProgressPress = (0, _react.useCallback)(function (index) {
    var _errorCorrectionData$2;
    var category = errorCorrectionData == null || (_errorCorrectionData$2 = errorCorrectionData.categories) == null ? void 0 : _errorCorrectionData$2[index];
    if (category) {
      changeCategory(category.id);
    }
  }, [errorCorrectionData == null ? void 0 : errorCorrectionData.categories, changeCategory]);
  var handleToggleProgressDetails = (0, _react.useCallback)(function () {
    toggleDetailedProgress();
  }, [toggleDetailedProgress]);
  var handleNextAction = (0, _react.useCallback)(function () {
    if (showFeedback) {
      var result = handleNext();
      if (result.completed) {
        setViewMode("browse");
      }
    } else {
      checkAnswer();
    }
  }, [showFeedback, handleNext, checkAnswer]);
  var handlePreviousAction = (0, _react.useCallback)(function () {
    handlePrevious();
  }, [handlePrevious]);
  var handleRetryResults = (0, _react.useCallback)(function () {
    setShowResults(false);
    setViewMode("exercise");
  }, []);
  var handleContinueResults = (0, _react.useCallback)(function () {
    setViewMode("browse");
  }, []);
  var handleExitExercise = (0, _react.useCallback)(function () {
    setViewMode("browse");
  }, []);
  if (!loaded || !hasValidData) {
    return (0, _jsxRuntime.jsx)(_Container.default, {
      safeArea: true,
      safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
      backgroundColor: "#f8fafc",
      statusBarStyle: "dark-content",
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.loadingContainer,
        children: (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
          size: "large",
          color: levelColor
        })
      })
    });
  }
  return (0, _jsxRuntime.jsxs)(_Container.default, {
    safeArea: true,
    safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
    withScrollView: true,
    backgroundColor: "#f8fafc",
    statusBarStyle: "dark-content",
    withPadding: false,
    scrollViewProps: {
      showsVerticalScrollIndicator: false,
      contentContainerStyle: styles.scrollContent
    },
    children: [(0, _jsxRuntime.jsx)(_ErrorCorrectionHeader.default, {
      level: level,
      onBackPress: handleBackPress
    }), viewMode === "exercise" && !showResults && (0, _jsxRuntime.jsx)(_ErrorCorrectionProgress.default, {
      categories: errorCorrectionData.categories || [],
      exercises: errorCorrectionData.exercises || [],
      completedExercises: stats.completedExercises || {},
      levelColor: levelColor,
      expanded: showDetailedProgress,
      onToggleExpand: handleToggleProgressDetails,
      onCategoryPress: handleCategoryProgressPress
    }), viewMode === "browse" && (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
      children: [(0, _jsxRuntime.jsx)(_ErrorCorrectionCategorySelector.default, {
        categories: errorCorrectionData.categories || [],
        selectedCategory: selectedCategory,
        onSelectCategory: handleCategoryChange,
        levelColor: levelColor
      }), (0, _jsxRuntime.jsx)(_ErrorCorrectionModeSelector.default, {
        onSelectMode: handleStartExercise,
        disabled: exercises.length === 0,
        levelColor: levelColor
      })]
    }), viewMode === "exercise" && !showResults && (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
      children: (0, _jsxRuntime.jsx)(_ErrorCorrectionWordSection.default, {
        currentExercise: currentExercise,
        exerciseCounter: display.exerciseCounter,
        correctionMode: correctionMode,
        level: level,
        levelColor: levelColor,
        showFeedback: showFeedback,
        isCorrect: isCorrect,
        userCorrection: userCorrection,
        selectedErrorIndices: selectedErrorIndices,
        selectedChoiceIndex: selectedChoiceIndex,
        onChangeUserCorrection: setUserCorrection,
        onToggleErrorIndex: handleWordPress,
        onSelectChoice: handleChoiceSelect
      })
    }), showResults && (0, _jsxRuntime.jsx)(_ErrorCorrectionResultsCard.default, {
      score: stats.score || 0,
      totalExercises: exercises.length,
      level: level,
      levelColor: levelColor,
      onRetry: handleRetryResults,
      onContinue: handleContinueResults,
      onExit: handleBackPress
    }), viewMode === "exercise" && !showResults && (0, _jsxRuntime.jsx)(_ErrorCorrectionNavigation.default, {
      onNext: handleNextAction,
      onPrevious: handlePreviousAction,
      onExit: handleExitExercise,
      currentIndex: currentExerciseIndex,
      totalCount: exercises.length,
      disableNext: correctionMode === "full" && userCorrection.trim() === "" || correctionMode === "identify" && selectedErrorIndices.length === 0 || correctionMode === "multiple_choice" && selectedChoiceIndex === null,
      isLastExercise: isLastExerciseInCategory,
      showFeedback: showFeedback,
      levelColor: levelColor
    })]
  });
};
var _default = exports.default = ErrorCorrectionExercise;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,