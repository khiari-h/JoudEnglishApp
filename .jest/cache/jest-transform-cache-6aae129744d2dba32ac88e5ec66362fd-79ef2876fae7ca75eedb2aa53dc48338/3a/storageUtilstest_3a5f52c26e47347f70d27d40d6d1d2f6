4a0e994c9ddf9346fc6d5cbc6ff8187b
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    multiGet: jest.fn(),
    clear: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _storageUtils = require("../../src/utils/storageUtils");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('storageUtils', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('isStorageAvailable', function () {
    it('devrait retourner true si AsyncStorage fonctionne', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.setItem.mockResolvedValue();
      _asyncStorage.default.removeItem.mockResolvedValue();
      var result = yield (0, _storageUtils.isStorageAvailable)();
      expect(result).toBe(true);
    }));
    it('devrait retourner false si AsyncStorage échoue', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.setItem.mockRejectedValue(new Error('Storage error'));
      var result = yield (0, _storageUtils.isStorageAvailable)();
      expect(result).toBe(false);
    }));
  });
  describe('storeData', function () {
    it('devrait stocker des données avec succès', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.setItem.mockResolvedValue();
      var result = yield (0, _storageUtils.storeData)('test-key', {
        data: 'test'
      });
      expect(result).toBe(true);
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('test-key', '{"data":"test"}');
    }));
    it('devrait retourner false en cas d\'erreur', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.setItem.mockRejectedValue(new Error('Storage error'));
      var result = yield (0, _storageUtils.storeData)('test-key', {
        data: 'test'
      });
      expect(result).toBe(false);
    }));
  });
  describe('getData', function () {
    it('devrait récupérer des données stockées', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue('{"data":"test"}');
      var result = yield (0, _storageUtils.getData)('test-key');
      expect(result).toEqual({
        data: 'test'
      });
    }));
    it('devrait retourner null si aucune donnée', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var result = yield (0, _storageUtils.getData)('test-key');
      expect(result).toBeNull();
    }));
    it('devrait retourner null en cas d\'erreur', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockRejectedValue(new Error('Storage error'));
      var result = yield (0, _storageUtils.getData)('test-key');
      expect(result).toBeNull();
    }));
  });
  describe('removeData', function () {
    it('devrait supprimer des données avec succès', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.removeItem.mockResolvedValue();
      var result = yield (0, _storageUtils.removeData)('test-key');
      expect(result).toBe(true);
    }));
    it('devrait retourner false en cas d\'erreur', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.removeItem.mockRejectedValue(new Error('Storage error'));
      var result = yield (0, _storageUtils.removeData)('test-key');
      expect(result).toBe(false);
    }));
  });
  describe('getMultipleData', function () {
    it('devrait récupérer plusieurs données', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.multiGet.mockResolvedValue([['key1', '{"data":"value1"}'], ['key2', '{"data":"value2"}'], ['key3', null]]);
      var result = yield (0, _storageUtils.getMultipleData)(['key1', 'key2', 'key3']);
      expect(result).toEqual({
        key1: {
          data: 'value1'
        },
        key2: {
          data: 'value2'
        },
        key3: null
      });
    }));
    it('devrait retourner un objet vide en cas d\'erreur', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.multiGet.mockRejectedValue(new Error('Storage error'));
      var result = yield (0, _storageUtils.getMultipleData)(['key1', 'key2']);
      expect(result).toEqual({});
    }));
  });
  describe('clearAllData', function () {
    it('devrait effacer toutes les données', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.clear.mockResolvedValue();
      var result = yield (0, _storageUtils.clearAllData)();
      expect(result).toBe(true);
    }));
    it('devrait retourner false en cas d\'erreur', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.clear.mockRejectedValue(new Error('Storage error'));
      var result = yield (0, _storageUtils.clearAllData)();
      expect(result).toBe(false);
    }));
  });
  describe('storageService', function () {
    describe('saveProgress et getProgress', function () {
      it('devrait sauvegarder et récupérer la progression', (0, _asyncToGenerator2.default)(function* () {
        _asyncStorage.default.setItem.mockResolvedValue();
        _asyncStorage.default.getItem.mockResolvedValue('{"level":2,"score":85}');
        var progressData = {
          level: 2,
          score: 85
        };
        var saveResult = yield _storageUtils.storageService.saveProgress(progressData);
        var getResult = yield _storageUtils.storageService.getProgress();
        expect(saveResult).toBe(true);
        expect(getResult).toEqual(progressData);
      }));
    });
    describe('saveSettings et getSettings', function () {
      it('devrait sauvegarder et récupérer les paramètres', (0, _asyncToGenerator2.default)(function* () {
        _asyncStorage.default.setItem.mockResolvedValue();
        _asyncStorage.default.getItem.mockResolvedValue('{"theme":"dark","language":"fr"}');
        var settings = {
          theme: 'dark',
          language: 'fr'
        };
        var saveResult = yield _storageUtils.storageService.saveSettings(settings);
        var getResult = yield _storageUtils.storageService.getSettings();
        expect(saveResult).toBe(true);
        expect(getResult).toEqual(settings);
      }));
    });
    describe('markExerciseCompleted et isExerciseCompleted', function () {
      it('devrait marquer un exercice comme complété', (0, _asyncToGenerator2.default)(function* () {
        _asyncStorage.default.getItem.mockResolvedValue('{}');
        _asyncStorage.default.setItem.mockResolvedValue();
        var result = yield _storageUtils.storageService.markExerciseCompleted('vocab-1', 'level-1', 90);
        expect(result).toBe(true);
        expect(_asyncStorage.default.setItem).toHaveBeenCalled();
      }));
      it('devrait vérifier si un exercice est complété', (0, _asyncToGenerator2.default)(function* () {
        _asyncStorage.default.getItem.mockResolvedValue('{"vocab-1":{"level":"level-1","score":90}}');
        var result = yield _storageUtils.storageService.isExerciseCompleted('vocab-1');
        expect(result).toBe(true);
      }));
      it('devrait retourner false pour un exercice non complété', (0, _asyncToGenerator2.default)(function* () {
        _asyncStorage.default.getItem.mockResolvedValue('{}');
        var result = yield _storageUtils.storageService.isExerciseCompleted('vocab-2');
        expect(result).toBe(false);
      }));
      it('devrait gérer les erreurs de getData et retourner false', (0, _asyncToGenerator2.default)(function* () {
        _asyncStorage.default.getItem.mockRejectedValue(new Error('Database error'));
        var result = yield _storageUtils.storageService.isExerciseCompleted('vocab-1');
        expect(result).toBe(false);
      }));
      it('devrait logger les erreurs lors de la vérification d\'exercice complété', (0, _asyncToGenerator2.default)(function* () {
        var consoleSpy = jest.spyOn(console, 'error').mockImplementation(function () {});
        _asyncStorage.default.getItem.mockRejectedValue(new Error('Storage connection failed'));
        yield _storageUtils.storageService.isExerciseCompleted('vocab-1');
        expect(consoleSpy).toHaveBeenCalledWith('Error checking if exercise completed:', expect.any(Error));
        consoleSpy.mockRestore();
      }));
      it('devrait toujours retourner un booléen même en cas d\'erreur', (0, _asyncToGenerator2.default)(function* () {
        _asyncStorage.default.getItem.mockRejectedValue(new Error('Any error'));
        var result = yield _storageUtils.storageService.isExerciseCompleted('vocab-1');
        expect(typeof result).toBe('boolean');
        expect(result).toBe(false);
      }));
      it('devrait gérer les erreurs de parsing JSON et retourner false', (0, _asyncToGenerator2.default)(function* () {
        _asyncStorage.default.getItem.mockResolvedValue('invalid-json');
        var result = yield _storageUtils.storageService.isExerciseCompleted('vocab-1');
        expect(result).toBe(false);
      }));
    });
    describe('getStreak', function () {
      it('devrait récupérer les données de streak existantes', (0, _asyncToGenerator2.default)(function* () {
        _asyncStorage.default.getItem.mockResolvedValue('{"currentStreak":5,"maxStreak":10,"lastLoginDate":"2022-01-01"}');
        var result = yield _storageUtils.storageService.getStreak();
        expect(result.currentStreak).toBe(5);
        expect(result.maxStreak).toBe(10);
        expect(result.lastLoginDate).toBe("2022-01-01");
      }));
      it('devrait avoir une structure de données cohérente', function () {
        expect(_storageUtils.storageService.keys).toBeDefined();
        expect(_storageUtils.storageService.keys.STREAK_DATA).toBe('streakData');
        expect(typeof _storageUtils.storageService.getStreak).toBe('function');
      });
    });
    describe('resetAllData', function () {
      it('devrait réinitialiser toutes les données', (0, _asyncToGenerator2.default)(function* () {
        _asyncStorage.default.clear.mockResolvedValue();
        var result = yield _storageUtils.storageService.resetAllData();
        expect(result).toBe(true);
        expect(_asyncStorage.default.clear).toHaveBeenCalled();
      }));
    });
    describe('Structure du service', function () {
      it('devrait avoir toutes les clés de service définies', function () {
        expect(_storageUtils.storageService.keys).toBeDefined();
        expect(_storageUtils.storageService.keys.USER_PROGRESS).toBe('userProgress');
        expect(_storageUtils.storageService.keys.USER_SETTINGS).toBe('userSettings');
        expect(_storageUtils.storageService.keys.LAST_ACTIVITY).toBe('lastActivity');
        expect(_storageUtils.storageService.keys.CURRENT_LEVEL).toBe('currentLevel');
        expect(_storageUtils.storageService.keys.STREAK_DATA).toBe('streakData');
        expect(_storageUtils.storageService.keys.COMPLETED_EXERCISES).toBe('completedExercises');
      });
      it('devrait avoir toutes les fonctions de service', function () {
        expect(typeof _storageUtils.storageService.saveProgress).toBe('function');
        expect(typeof _storageUtils.storageService.getProgress).toBe('function');
        expect(typeof _storageUtils.storageService.saveSettings).toBe('function');
        expect(typeof _storageUtils.storageService.getSettings).toBe('function');
        expect(typeof _storageUtils.storageService.markExerciseCompleted).toBe('function');
        expect(typeof _storageUtils.storageService.isExerciseCompleted).toBe('function');
        expect(typeof _storageUtils.storageService.getStreak).toBe('function');
        expect(typeof _storageUtils.storageService.resetAllData).toBe('function');
      });
    });
  });
  describe('Gestion des erreurs et edge cases', function () {
    it('devrait gérer les données null et undefined', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.setItem.mockResolvedValue();
      _asyncStorage.default.removeItem.mockResolvedValue();
      var result1 = yield (0, _storageUtils.storeData)('null-test', null);
      var result2 = yield (0, _storageUtils.storeData)('undefined-test', undefined);
      expect(result1).toBe(true);
      expect(result2).toBe(true);
      expect(_asyncStorage.default.setItem).not.toHaveBeenCalled();
      expect(_asyncStorage.default.removeItem).toHaveBeenCalledTimes(2);
      expect(_asyncStorage.default.removeItem).toHaveBeenCalledWith('null-test');
      expect(_asyncStorage.default.removeItem).toHaveBeenCalledWith('undefined-test');
    }));
    it('devrait gérer les objets circulaires', (0, _asyncToGenerator2.default)(function* () {
      var circularObj = {
        name: 'test'
      };
      circularObj.self = circularObj;
      var result = yield (0, _storageUtils.storeData)('circular', circularObj);
      expect(result).toBe(false);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,