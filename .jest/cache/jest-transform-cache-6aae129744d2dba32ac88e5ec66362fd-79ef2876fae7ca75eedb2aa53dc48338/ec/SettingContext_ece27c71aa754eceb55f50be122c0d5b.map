{"version":3,"names":["_react","require","_storageUtils","_constants","_propTypes","_interopRequireDefault","_jsxRuntime","SettingsContext","exports","createContext","SettingsProvider","_ref","children","_useState","useState","DEFAULT_SETTINGS","_useState2","_slicedToArray2","default","settings","setSettings","_useState3","_useState4","isLoading","setIsLoading","useEffect","loadSettings","_ref2","_asyncToGenerator2","savedSettings","getData","Object","assign","error","apply","arguments","storeData","updateSetting","useCallback","key","value","undefined","prevSettings","_defineProperty2","updateSettings","newSettings","resetSettings","areNotificationsEnabled","useMemo","notifications","getDailyGoal","dailyGoal","setDailyGoal","minutes","Math","max","min","contextValue","jsx","Provider","propTypes","PropTypes","node","isRequired"],"sources":["SettingContext.js"],"sourcesContent":["// src/contexts/SettingsContext.js\r\nimport { createContext, useState, useEffect, useMemo, useCallback } from 'react';\r\nimport { storeData, getData } from '../utils/storageUtils';\r\nimport { DEFAULT_SETTINGS } from '../utils/constants';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Créer le contexte\r\nexport const SettingsContext = createContext();\r\n\r\n/**\r\n * Fournisseur de contexte pour gérer les paramètres de l'application\r\n */\r\nexport const SettingsProvider = ({ children }) => {\r\n  // État des paramètres\r\n  const [settings, setSettings] = useState(DEFAULT_SETTINGS);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Charger les paramètres au démarrage\r\n  useEffect(() => {\r\n    const loadSettings = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        const savedSettings = await getData('userSettings');\r\n\r\n        if (savedSettings) {\r\n          // Fusionner avec les paramètres par défaut pour s'assurer que tous les champs sont présents\r\n          setSettings({ ...DEFAULT_SETTINGS, ...savedSettings });\r\n        } else {\r\n          // If no saved settings, use default\r\n          setSettings(DEFAULT_SETTINGS);\r\n        }\r\n      } catch (error) {\r\n        // Ignored on purpose\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    loadSettings();\r\n  }, []);\r\n\r\n  // Sauvegarder les paramètres lorsqu'ils changent\r\n  useEffect(() => {\r\n    if (!isLoading) {\r\n      storeData('userSettings', settings);\r\n    }\r\n  }, [settings, isLoading]);\r\n\r\n  // Mettre à jour un paramètre spécifique\r\n  const updateSetting = useCallback((key, value) => {\r\n    if (settings[key] === undefined) {\r\n      return;\r\n    }\r\n\r\n    setSettings(prevSettings => ({\r\n      ...prevSettings,\r\n      [key]: value\r\n    }));\r\n  }, [settings]);\r\n\r\n  // Mettre à jour plusieurs paramètres à la fois\r\n  const updateSettings = useCallback((newSettings) => {\r\n    setSettings(prevSettings => ({\r\n      ...prevSettings,\r\n      ...newSettings\r\n    }));\r\n  }, []);\r\n\r\n  // Réinitialiser tous les paramètres\r\n  const resetSettings = useCallback(() => {\r\n    setSettings(DEFAULT_SETTINGS);\r\n  }, []);\r\n\r\n  // Vérifier si les notifications sont activées\r\n  const areNotificationsEnabled = useMemo(() => {\r\n    return settings.notifications;\r\n  }, [settings.notifications]);\r\n\r\n  // Obtenir le délai journalier\r\n  const getDailyGoal = useMemo(() => {\r\n    return settings.dailyGoal;\r\n  }, [settings.dailyGoal]);\r\n\r\n  // Définir le délai journalier\r\n  const setDailyGoal = useCallback((minutes) => {\r\n    updateSetting('dailyGoal', Math.max(1, Math.min(120, minutes))); // Entre 1 et 120 minutes\r\n  }, [updateSetting]);\r\n\r\n  // Valeur fournie par le contexte\r\n  const contextValue = useMemo(() => ({\r\n    settings,\r\n    updateSetting,\r\n    updateSettings,\r\n    resetSettings,\r\n    areNotificationsEnabled,\r\n    getDailyGoal,\r\n    setDailyGoal,\r\n    isLoading,\r\n  }), [\r\n    settings,\r\n    updateSetting,\r\n    updateSettings,\r\n    resetSettings,\r\n    areNotificationsEnabled,\r\n    getDailyGoal,\r\n    setDailyGoal,\r\n    isLoading,\r\n  ]);\r\n\r\n  return (\r\n    <SettingsContext.Provider value={contextValue}>\r\n      {children}\r\n    </SettingsContext.Provider>\r\n  );\r\n};\r\n\r\n// ✅ Définition de PropTypes pour le fournisseur de contexte\r\nSettingsProvider.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};"],"mappings":"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","ignoreList":[]}