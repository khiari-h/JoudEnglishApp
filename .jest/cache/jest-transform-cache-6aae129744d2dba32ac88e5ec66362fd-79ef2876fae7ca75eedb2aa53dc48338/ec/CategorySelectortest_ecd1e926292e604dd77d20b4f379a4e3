dd4cc003d4b6220588ddf1c6b11d9faf
_getJestObj().mock('expo-linear-gradient', function () {
  return {
    LinearGradient: function LinearGradient(_ref) {
      var children = _ref.children;
      var _require = require('react-native'),
        View = _require.View;
      return (0, _jsxRuntime.jsx)(View, {
        children: children
      });
    }
  };
});
_getJestObj().mock('react-native/Libraries/Components/ScrollView/ScrollView', function () {
  var React = require('react');
  var MockScrollView = function MockScrollView(_ref2) {
    var children = _ref2.children,
      props = (0, _objectWithoutProperties2.default)(_ref2, _excluded);
    return (0, _jsxRuntime.jsx)(React.Fragment, Object.assign({}, props, {
      children: children
    }));
  };
  return {
    ScrollView: React.forwardRef(function (props, ref) {
      return (0, _jsxRuntime.jsx)(MockScrollView, Object.assign({}, props, {
        ref: ref
      }));
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _CategorySelector = _interopRequireDefault(require("../../../src/components/exercise-common/CategorySelector"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children"];
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockTimingStart = jest.fn(function (callback) {
  if (callback) {
    callback({
      finished: true
    });
  }
});
var mockParallelStart = jest.fn(function (callback) {
  if (callback) {
    callback({
      finished: true
    });
  }
});
jest.spyOn(_reactNative2.Animated, 'timing').mockReturnValue({
  start: mockTimingStart
});
jest.spyOn(_reactNative2.Animated, 'parallel').mockReturnValue({
  start: mockParallelStart
});
jest.spyOn(_reactNative2.Animated, 'Value').mockImplementation(function () {
  return {
    interpolate: jest.fn(function () {
      return {
        _nativeTag: 1
      };
    }),
    setValue: jest.fn(),
    addListener: jest.fn(),
    removeListener: jest.fn()
  };
});
var categories = [{
  id: '1',
  name: 'Grammar'
}, {
  id: '2',
  name: 'Vocabulary'
}, {
  id: '3',
  name: 'Reading'
}];
describe('CategorySelector', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('renders all categories and selects the correct one', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: function onSelectCategory() {}
      })),
      getByText = _render.getByText;
    expect(getByText('Grammar')).toBeTruthy();
    expect(getByText('âœ¨')).toBeTruthy();
  });
  it('calls onSelectCategory when a new category is pressed', function () {
    var onSelectCategory = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: onSelectCategory
      })),
      getByText = _render2.getByText;
    _reactNative.fireEvent.press(getByText('Vocabulary'));
    expect(onSelectCategory).toHaveBeenCalledWith('2');
  });
  it('triggers an animation when the selectedCategory prop changes', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: jest.fn()
      })),
      rerender = _render3.rerender;
    mockParallelStart.mockClear();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "2",
        onSelectCategory: jest.fn()
      }));
    }));
    expect(mockParallelStart).toHaveBeenCalledTimes(1);
  }));
  it('does not trigger a new animation if one is already in progress', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: jest.fn()
      })),
      rerender = _render4.rerender;
    mockParallelStart.mockClear();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "2",
        onSelectCategory: jest.fn()
      }));
    }));
    expect(mockParallelStart).toHaveBeenCalledTimes(1);
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: jest.fn()
      }));
    }));
    expect(mockParallelStart).toHaveBeenCalledTimes(1);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,