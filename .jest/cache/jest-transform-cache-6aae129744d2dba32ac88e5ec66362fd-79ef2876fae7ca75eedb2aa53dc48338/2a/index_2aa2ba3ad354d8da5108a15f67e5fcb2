3403c5f86d602fd7846880fd13f4752c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _errorCorrectionB2Full = _interopRequireDefault(require("./categories/errorCorrectionB2Full"));
var _errorCorrectionB2Identify = _interopRequireDefault(require("./categories/errorCorrectionB2Identify"));
var _errorCorrectionB2MultipleChoice = _interopRequireDefault(require("./categories/errorCorrectionB2MultipleChoice"));
var allExercises = [].concat((0, _toConsumableArray2.default)(_errorCorrectionB2Full.default), (0, _toConsumableArray2.default)(_errorCorrectionB2Identify.default), (0, _toConsumableArray2.default)(_errorCorrectionB2MultipleChoice.default));
allExercises.sort(function (a, b) {
  if (a.categoryId !== b.categoryId) {
    return a.categoryId - b.categoryId;
  }
  var typeOrder = {
    'full': 1,
    'identify': 2,
    'multiple_choice': 3
  };
  return typeOrder[a.type] - typeOrder[b.type];
});
var errorCorrectionB2 = {
  level: "B2",
  totalExercises: allExercises.length,
  statistics: {
    full: _errorCorrectionB2Full.default.length,
    identify: _errorCorrectionB2Identify.default.length,
    multiple_choice: _errorCorrectionB2MultipleChoice.default.length,
    byCategory: {
      1: {
        name: "Advanced Conditionals",
        count: 8
      },
      2: {
        name: "Subjunctive & Formal Grammar",
        count: 8
      },
      3: {
        name: "Advanced Passive & Causative",
        count: 9
      },
      4: {
        name: "Discourse & Cohesion",
        count: 9
      },
      5: {
        name: "Register & Style",
        count: 8
      }
    }
  },
  categories: [{
    id: 1,
    name: "Advanced Conditionals",
    description: "Mixed conditionals, complex hypothetical situations, advanced conditional patterns",
    exerciseCount: 8,
    difficulty: "Advanced",
    color: "#3b82f6",
    topics: ["mixed conditionals", "complex hypotheticals", "conditional with modals", "implied conditionals", "formal conditional conjunctions"],
    commonErrors: ["would have in if-clauses", "tense mixing", "inappropriate conjunctions"],
    skillsTargeted: ["hypothetical reasoning", "complex time relationships", "formal register"]
  }, {
    id: 2,
    name: "Subjunctive & Formal Grammar",
    description: "Subjunctive mood, formal constructions, advanced verb patterns",
    exerciseCount: 8,
    difficulty: "Advanced",
    color: "#10b981",
    topics: ["subjunctive mood", "formal registers", "complex verb patterns", "inversion", "mandative subjunctive"],
    commonErrors: ["indicative instead of subjunctive", "incorrect formal inversions", "should instead of subjunctive"],
    skillsTargeted: ["formal register awareness", "advanced grammar structures", "academic writing"]
  }, {
    id: 3,
    name: "Advanced Passive & Causative",
    description: "Complex passive constructions, causative forms, advanced passive patterns",
    exerciseCount: 9,
    difficulty: "Advanced",
    color: "#f59e0b",
    topics: ["complex passives", "causative have/get", "passive reporting", "perfect infinitives", "passive with modals"],
    commonErrors: ["incorrect causative structures", "wrong infinitive forms", "missing auxiliaries"],
    skillsTargeted: ["complex sentence transformation", "causative understanding", "passive mastery"]
  }, {
    id: 4,
    name: "Discourse & Cohesion",
    description: "Advanced linking devices, discourse markers, text cohesion",
    exerciseCount: 9,
    difficulty: "Advanced",
    color: "#8b5cf6",
    topics: ["discourse markers", "cohesive devices", "substitution", "ellipsis", "advanced connectors"],
    commonErrors: ["inappropriate connectors", "wordiness", "repetition", "informal markers in formal text"],
    skillsTargeted: ["text organization", "coherence", "advanced writing skills", "academic discourse"]
  }, {
    id: 5,
    name: "Register & Style",
    description: "Formal vs informal register, academic writing, stylistic appropriateness",
    exerciseCount: 8,
    difficulty: "Advanced",
    color: "#ef4444",
    topics: ["register awareness", "academic style", "formal language", "appropriateness", "professional communication"],
    commonErrors: ["mixed registers", "inappropriate informality", "lack of precision", "colloquial expressions"],
    skillsTargeted: ["register sensitivity", "professional communication", "academic writing", "stylistic awareness"]
  }],
  exercises: allExercises,
  getExercisesByCategory: function getExercisesByCategory(categoryId) {
    return allExercises.filter(function (exercise) {
      return exercise.categoryId === categoryId;
    });
  },
  getExercisesByType: function getExercisesByType(type) {
    return allExercises.filter(function (exercise) {
      return exercise.type === type;
    });
  },
  getExercisesByCategoryAndType: function getExercisesByCategoryAndType(categoryId, type) {
    return allExercises.filter(function (exercise) {
      return exercise.categoryId === categoryId && exercise.type === type;
    });
  },
  getExercisesBySkill: function getExercisesBySkill(skill) {
    return allExercises.filter(function (exercise) {
      var category = errorCorrectionB2.categories.find(function (cat) {
        return cat.id === exercise.categoryId;
      });
      return category == null ? void 0 : category.skillsTargeted.includes(skill);
    });
  },
  getAdvancedExercises: function getAdvancedExercises() {
    return allExercises.filter(function (exercise) {
      var wordCount = exercise.text.split(' ').length;
      var errorCount = exercise.errorPositions ? exercise.errorPositions.length : 1;
      return wordCount >= 10 || errorCount >= 3;
    });
  },
  getFormalRegisterExercises: function getFormalRegisterExercises() {
    return allExercises.filter(function (exercise) {
      return exercise.categoryId === 2 || exercise.categoryId === 5 || exercise.explanation.toLowerCase().includes('formal');
    });
  },
  getAcademicPreparationExercises: function getAcademicPreparationExercises() {
    return allExercises.filter(function (exercise) {
      var academicKeywords = ['academic', 'formal', 'discourse', 'register', 'subjunctive'];
      return academicKeywords.some(function (keyword) {
        return exercise.explanation.toLowerCase().includes(keyword) || exercise.hint.toLowerCase().includes(keyword);
      });
    });
  },
  validateStructure: function validateStructure() {
    var requiredFields = ['categoryId', 'type', 'text', 'correctedText', 'hint', 'explanation'];
    var validTypes = ['full', 'identify', 'multiple_choice'];
    return allExercises.every(function (exercise) {
      var hasRequiredFields = requiredFields.every(function (field) {
        return Object.prototype.hasOwnProperty.call(exercise, field) && exercise[field] !== undefined;
      });
      var hasValidType = validTypes.includes(exercise.type);
      var hasValidCategory = exercise.categoryId >= 1 && exercise.categoryId <= 5;
      var hasMinimumComplexity = exercise.text.split(' ').length >= 8;
      var hasAdvancedVocabulary = exercise.text.length > 50;
      var hasTypeSpecificFields = true;
      if (exercise.type === 'multiple_choice') {
        hasTypeSpecificFields = exercise.choices && Array.isArray(exercise.choices) && exercise.choices.length >= 4 && exercise.correctChoiceIndex !== undefined && exercise.correctChoiceIndex >= 0 && exercise.correctChoiceIndex < exercise.choices.length;
      } else {
        hasTypeSpecificFields = exercise.errorPositions && Array.isArray(exercise.errorPositions);
      }
      return hasRequiredFields && hasValidType && hasValidCategory && hasMinimumComplexity && hasAdvancedVocabulary && hasTypeSpecificFields;
    });
  },
  getSummary: function getSummary() {
    var totalErrorPositions = allExercises.filter(function (ex) {
      return ex.errorPositions;
    }).reduce(function (sum, ex) {
      return sum + ex.errorPositions.length;
    }, 0);
    var totalTextLength = allExercises.reduce(function (sum, ex) {
      return sum + ex.text.length;
    }, 0);
    var complexExercises = errorCorrectionB2.getAdvancedExercises().length;
    var formalExercises = errorCorrectionB2.getFormalRegisterExercises().length;
    return {
      level: "B2",
      totalExercises: allExercises.length,
      categories: errorCorrectionB2.categories.length,
      difficulty: "Advanced",
      focus: "Complex grammatical structures, register awareness, and discourse competence",
      progression: "Builds on B1 with mixed conditionals, subjunctive, advanced passive, discourse markers, and register sensitivity",
      distribution: {
        full: _errorCorrectionB2Full.default.length,
        identify: _errorCorrectionB2Identify.default.length,
        multiple_choice: _errorCorrectionB2MultipleChoice.default.length
      },
      complexity: {
        averageTextLength: Math.round(totalTextLength / allExercises.length),
        averageWordCount: Math.round(allExercises.reduce(function (sum, ex) {
          return sum + ex.text.split(' ').length;
        }, 0) / allExercises.length),
        totalErrorPositions: totalErrorPositions,
        averageErrorsPerExercise: Math.round(totalErrorPositions / allExercises.filter(function (ex) {
          return ex.errorPositions;
        }).length * 10) / 10,
        complexExercisesPercentage: Math.round(complexExercises / allExercises.length * 100),
        formalRegisterFocus: Math.round(formalExercises / allExercises.length * 100)
      },
      skillsTargeted: ["Advanced grammatical competence", "Register and style awareness", "Discourse organization", "Academic writing preparation", "Professional communication"]
    };
  }
};
if (!errorCorrectionB2.validateStructure()) {} else {}
var _default = exports.default = errorCorrectionB2;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,