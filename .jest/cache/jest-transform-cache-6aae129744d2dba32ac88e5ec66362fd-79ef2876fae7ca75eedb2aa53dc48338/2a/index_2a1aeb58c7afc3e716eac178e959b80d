9aa32187d5bfffa31ad3c9f23988e6be
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _HeroCard = _interopRequireDefault(require("../../../../components/ui/HeroCard"));
var _RevealButton = _interopRequireDefault(require("../../../../components/ui/RevealButton"));
var _ContentSection = _interopRequireDefault(require("../../../../components/ui/ContentSection"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
function cov_nbzph7gv6() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\exercises\\vocabulary\\VocabularyWordCard\\index.js";
  var hash = "0cfab5439c98e6f55396fcfbceadfda73ddedcc2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\exercises\\vocabulary\\VocabularyWordCard\\index.js",
    statementMap: {
      "0": {
        start: {
          line: 22,
          column: 27
        },
        end: {
          line: 75,
          column: 1
        }
      },
      "1": {
        start: {
          line: 31,
          column: 17
        },
        end: {
          line: 31,
          column: 41
        }
      },
      "2": {
        start: {
          line: 33,
          column: 2
        },
        end: {
          line: 74,
          column: 4
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 22,
            column: 27
          },
          end: {
            line: 22,
            column: 28
          }
        },
        loc: {
          start: {
            line: 30,
            column: 6
          },
          end: {
            line: 75,
            column: 1
          }
        },
        line: 30
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 2
          },
          end: {
            line: 29,
            column: 24
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 29,
            column: 15
          },
          end: {
            line: 29,
            column: 24
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 54,
            column: 7
          },
          end: {
            line: 62,
            column: 7
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 54,
            column: 7
          },
          end: {
            line: 54,
            column: 14
          }
        }, {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 61,
            column: 10
          }
        }],
        line: 54
      },
      "2": {
        loc: {
          start: {
            line: 65,
            column: 7
          },
          end: {
            line: 72,
            column: 7
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 65,
            column: 7
          },
          end: {
            line: 65,
            column: 17
          }
        }, {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 71,
            column: 10
          }
        }],
        line: 65
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0cfab5439c98e6f55396fcfbceadfda73ddedcc2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_nbzph7gv6 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_nbzph7gv6();
cov_nbzph7gv6().s[0]++;
var VocabularyWordCard = function VocabularyWordCard(_ref) {
  var word = _ref.word,
    translation = _ref.translation,
    definition = _ref.definition,
    example = _ref.example,
    showTranslation = _ref.showTranslation,
    onToggleTranslation = _ref.onToggleTranslation,
    _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? (cov_nbzph7gv6().b[0][0]++, "#5E60CE") : _ref$levelColor;
  cov_nbzph7gv6().f[0]++;
  var styles = (cov_nbzph7gv6().s[1]++, (0, _style.default)(levelColor));
  cov_nbzph7gv6().s[2]++;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsx)(_HeroCard.default, {
      content: word,
      fontSize: 42,
      levelColor: levelColor,
      showUnderline: true
    }), (0, _jsxRuntime.jsx)(_RevealButton.default, {
      isRevealed: showTranslation,
      revealedContent: translation,
      revealText: "Reveal Translation",
      hideText: "Hide Translation",
      onToggle: onToggleTranslation,
      levelColor: levelColor
    }), (cov_nbzph7gv6().b[1][0]++, example) && (cov_nbzph7gv6().b[1][1]++, (0, _jsxRuntime.jsx)(_ContentSection.default, {
      title: "Example",
      content: example,
      levelColor: levelColor,
      isItalic: true,
      backgroundColor: "#FAFBFC"
    })), (cov_nbzph7gv6().b[2][0]++, definition) && (cov_nbzph7gv6().b[2][1]++, (0, _jsxRuntime.jsx)(_ContentSection.default, {
      title: "Definition",
      content: definition,
      levelColor: levelColor,
      backgroundColor: "#F8F9FA"
    }))]
  });
};
var _default = exports.default = VocabularyWordCard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,