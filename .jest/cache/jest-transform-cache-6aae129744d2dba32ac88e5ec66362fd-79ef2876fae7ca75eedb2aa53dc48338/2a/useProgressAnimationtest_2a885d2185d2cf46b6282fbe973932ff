0493f93f4b1810027e38ebd32f4f4ea0
_getJestObj().mock('react-native', function () {
  return {
    Animated: {
      Value: jest.fn().mockImplementation(function () {
        return {
          setValue: jest.fn(),
          interpolate: jest.fn().mockReturnValue('50%')
        };
      }),
      timing: jest.fn().mockReturnValue({
        start: jest.fn()
      })
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _useProgressAnimation = _interopRequireDefault(require("../../src/components/ui/ProgressBar/useProgressAnimation"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useProgressAnimation', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('should create animated progress when animated is true', function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useProgressAnimation.default)({
          progress: 50,
          animated: true,
          duration: 600
        });
      }),
      result = _renderHook.result;
    expect(_reactNative2.Animated.timing).toHaveBeenCalledWith(expect.any(Object), expect.objectContaining({
      toValue: 50,
      duration: 600,
      useNativeDriver: false
    }));
    expect(result.current.width).toBe('50%');
  });
  it('should set progress directly when animated is false', function () {
    var mockSetValue = jest.fn();
    var mockAnimatedValue = {
      setValue: mockSetValue,
      interpolate: jest.fn().mockReturnValue('75%')
    };
    _reactNative2.Animated.Value.mockReturnValue(mockAnimatedValue);
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useProgressAnimation.default)({
          progress: 75,
          animated: false,
          duration: 600
        });
      }),
      result = _renderHook2.result;
    expect(mockSetValue).toHaveBeenCalledWith(75);
    expect(_reactNative2.Animated.timing).not.toHaveBeenCalled();
    expect(result.current.width).toBe('75%');
  });
  it('should clamp progress values between 0 and 100', function () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useProgressAnimation.default)({
          progress: 150,
          animated: true
        });
      }),
      result = _renderHook3.result;
    expect(_reactNative2.Animated.timing).toHaveBeenCalledWith(expect.any(Object), expect.objectContaining({
      toValue: 100
    }));
  });
  it('should handle negative progress values', function () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useProgressAnimation.default)({
          progress: -25,
          animated: true
        });
      }),
      result = _renderHook4.result;
    expect(_reactNative2.Animated.timing).toHaveBeenCalledWith(expect.any(Object), expect.objectContaining({
      toValue: 0
    }));
  });
  it('should use default duration when not provided', function () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useProgressAnimation.default)({
          progress: 50,
          animated: true
        });
      }),
      result = _renderHook5.result;
    expect(_reactNative2.Animated.timing).toHaveBeenCalledWith(expect.any(Object), expect.objectContaining({
      duration: 600
    }));
  });
  it('should return width interpolation', function () {
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useProgressAnimation.default)({
          progress: 50,
          animated: true
        });
      }),
      result = _renderHook6.result;
    expect(result.current).toHaveProperty('width');
    expect(typeof result.current.width).toBe('string');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,