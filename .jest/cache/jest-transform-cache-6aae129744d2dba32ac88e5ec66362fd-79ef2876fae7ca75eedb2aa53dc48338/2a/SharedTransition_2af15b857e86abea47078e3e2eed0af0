bc10bb0c2515d5a4ee4e2c185a85702a
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SharedTransition = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _animation = require("../../animation");
var _commonTypes = require("../animationBuilder/commonTypes");
var _commonTypes2 = require("../../commonTypes");
var _ProgressTransitionManager = require("./ProgressTransitionManager");
var _UpdateLayoutAnimations = require("../../UpdateLayoutAnimations");
var _util = require("../../animation/util");
var _errors = require("../../errors");
var SUPPORTED_PROPS = ['width', 'height', 'originX', 'originY', 'transform', 'borderRadius', 'borderTopLeftRadius', 'borderTopRightRadius', 'borderBottomLeftRadius', 'borderBottomRightRadius'];
var _worklet_10899602899845_init_data = {
  code: "function SharedTransitionTs1(viewTag,values,progress){const{progressAnimationCallback}=this.__closure;const newStyles=progressAnimationCallback(values,progress);global._notifyAboutProgress(viewTag,newStyles,true);}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\layoutReanimation\\sharedTransitions\\SharedTransition.ts",
  sourceMap: "{\"version\":3,\"names\":[\"SharedTransitionTs1\",\"viewTag\",\"values\",\"progress\",\"progressAnimationCallback\",\"__closure\",\"newStyles\",\"global\",\"_notifyAboutProgress\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/layoutReanimation/sharedTransitions/SharedTransition.ts\"],\"mappings\":\"AA6DoC,QAAC,CAAAA,mBAAiBA,CAAAC,OAAQ,CAAKC,MAAA,CAAAC,QAAA,QAAAC,yBAAA,OAAAC,SAAA,CAE7D,KAAM,CAAAC,SAAS,CAAGF,yBAAyB,CAACF,MAAM,CAAEC,QAAQ,CAAC,CAC7DI,MAAM,CAACC,oBAAoB,CAACP,OAAO,CAAEK,SAAS,CAAE,IAAI,CAAC,CACvD\",\"ignoreList\":[]}",
  version: "3.16.7"
};
var _worklet_15082723599963_init_data = {
  code: "function SharedTransitionTs2(values){const{animationFactory,SUPPORTED_PROPS,withTiming,reduceMotion,transitionDuration}=this.__closure;let animations={};const initialValues={};if(animationFactory){animations=animationFactory(values);for(const key in animations){if(!SUPPORTED_PROPS.includes(key)){throw new ReanimatedError(\"The prop '\"+key+\"' is not supported yet.\");}}}else{for(const propName of SUPPORTED_PROPS){if(propName==='transform'){const matrix=values.targetTransformMatrix;animations.transformMatrix=withTiming(matrix,{reduceMotion:reduceMotion,duration:transitionDuration});}else{const capitalizedPropName=\"\"+propName.charAt(0).toUpperCase()+propName.slice(1);const keyToTargetValue=\"target\"+capitalizedPropName;animations[propName]=withTiming(values[keyToTargetValue],{reduceMotion:reduceMotion,duration:transitionDuration});}}}for(const propName in animations){if(propName==='transform'){initialValues.transformMatrix=values.currentTransformMatrix;}else{const capitalizedPropName=propName.charAt(0).toUpperCase()+propName.slice(1);const keyToCurrentValue=\"current\"+capitalizedPropName;initialValues[propName]=values[keyToCurrentValue];}}return{initialValues:initialValues,animations:animations};}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\layoutReanimation\\sharedTransitions\\SharedTransition.ts",
  sourceMap: "{\"version\":3,\"names\":[\"SharedTransitionTs2\",\"values\",\"animationFactory\",\"SUPPORTED_PROPS\",\"withTiming\",\"reduceMotion\",\"transitionDuration\",\"__closure\",\"animations\",\"initialValues\",\"key\",\"includes\",\"ReanimatedError\",\"propName\",\"matrix\",\"targetTransformMatrix\",\"transformMatrix\",\"duration\",\"capitalizedPropName\",\"charAt\",\"toUpperCase\",\"slice\",\"keyToTargetValue\",\"currentTransformMatrix\",\"keyToCurrentValue\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/layoutReanimation/sharedTransitions/SharedTransition.ts\"],\"mappings\":\"AAiKsB,QAAC,CAAAA,mBAA6CA,CAAAC,MAAA,QAAAC,gBAAA,CAAAC,eAAA,CAAAC,UAAA,CAAAC,YAAA,CAAAC,kBAAA,OAAAC,SAAA,CAE9D,GAAI,CAAAC,UAEH,CAAG,CAAC,CAAC,CACN,KAAM,CAAAC,aAEL,CAAG,CAAC,CAAC,CAEN,GAAIP,gBAAgB,CAAE,CACpBM,UAAU,CAAGN,gBAAgB,CAACD,MAAM,CAAC,CACrC,IAAK,KAAM,CAAAS,GAAG,GAAI,CAAAF,UAAU,CAAE,CAC5B,GAAI,CAAEL,eAAe,CAAuBQ,QAAQ,CAACD,GAAG,CAAC,CAAE,CACzD,KAAM,IAAI,CAAAE,eAAe,cACVF,GAAG,0BAClB,CAAC,CACH,CACF,CACF,CAAC,IAAM,CACL,IAAK,KAAM,CAAAG,QAAQ,GAAI,CAAAV,eAAe,CAAE,CACtC,GAAIU,QAAQ,GAAK,WAAW,CAAE,CAC5B,KAAM,CAAAC,MAAM,CAAGb,MAAM,CAACc,qBAAqB,CAC3CP,UAAU,CAACQ,eAAe,CAAGZ,UAAU,CAACU,MAAM,CAAE,CAC9CT,YAAY,CAAZA,YAAY,CACZY,QAAQ,CAAEX,kBACZ,CAAC,CAAC,CACJ,CAAC,IAAM,CACL,KAAM,CAAAY,mBAAmB,IAAML,QAAQ,CACpCM,MAAM,CAAC,CAAC,CAAC,CACTC,WAAW,CAAC,CAAC,CAAGP,QAAQ,CAACQ,KAAK,CAC/B,CACF,CAA0C,CAC1C,KAAM,CAAAC,gBAAgB,UAAYJ,mBAA8B,CAChEV,UAAU,CAACK,QAAQ,CAAC,CAAGT,UAAU,CAACH,MAAM,CAACqB,gBAAgB,CAAC,CAAE,CAC1DjB,YAAY,CAAZA,YAAY,CACZY,QAAQ,CAAEX,kBACZ,CAAC,CAAC,CACJ,CACF,CACF,CAEA,IAAK,KAAM,CAAAO,QAAQ,GAAI,CAAAL,UAAU,CAAE,CACjC,GAAIK,QAAQ,GAAK,WAAW,CAAE,CAC5BJ,aAAa,CAACO,eAAe,CAAGf,MAAM,CAACsB,sBAAsB,CAC/D,CAAC,IAAM,CACL,KAAM,CAAAL,mBAAmB,CAAIL,QAAQ,CAACM,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAC3DP,QAAQ,CAACQ,KAAK,CAAC,CAAC,CAAyC,CAC3D,KAAM,CAAAG,iBAAiB,WAAaN,mBAA8B,CAClET,aAAa,CAACI,QAAQ,CAAC,CAAGZ,MAAM,CAACuB,iBAAiB,CAAC,CACrD,CACF,CAEA,MAAO,CAAEf,aAAa,CAAbA,aAAa,CAAED,UAAA,CAAAA,UAAW,CAAC,CACtC\",\"ignoreList\":[]}",
  version: "3.16.7"
};
var _worklet_5181943484063_init_data = {
  code: "function SharedTransitionTs3(viewTag,values,progress){const{SUPPORTED_PROPS}=this.__closure;const newStyles={};for(const propertyName of SUPPORTED_PROPS){if(propertyName==='transform'){const currentMatrix=values.currentTransformMatrix;const targetMatrix=values.targetTransformMatrix;const newMatrix=new Array(9);for(let i=0;i<9;i++){newMatrix[i]=progress*(targetMatrix[i]-currentMatrix[i])+currentMatrix[i];}newStyles.transformMatrix=newMatrix;}else{const PropertyName=propertyName.charAt(0).toUpperCase()+propertyName.slice(1);const currentPropertyName=\"current\"+PropertyName;const targetPropertyName=\"target\"+PropertyName;const currentValue=values[currentPropertyName];const targetValue=values[targetPropertyName];newStyles[propertyName]=progress*(targetValue-currentValue)+currentValue;}}global._notifyAboutProgress(viewTag,newStyles,true);}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\layoutReanimation\\sharedTransitions\\SharedTransition.ts",
  sourceMap: "{\"version\":3,\"names\":[\"SharedTransitionTs3\",\"viewTag\",\"values\",\"progress\",\"SUPPORTED_PROPS\",\"__closure\",\"newStyles\",\"propertyName\",\"currentMatrix\",\"currentTransformMatrix\",\"targetMatrix\",\"targetTransformMatrix\",\"newMatrix\",\"Array\",\"i\",\"transformMatrix\",\"PropertyName\",\"charAt\",\"toUpperCase\",\"slice\",\"currentPropertyName\",\"targetPropertyName\",\"currentValue\",\"targetValue\",\"global\",\"_notifyAboutProgress\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/layoutReanimation/sharedTransitions/SharedTransition.ts\"],\"mappings\":\"AA8N8B,QAAC,CAAAA,mBAAiBA,CAAAC,OAAQ,CAAKC,MAAA,CAAAC,QAAA,QAAAC,eAAA,OAAAC,SAAA,CAEvD,KAAM,CAAAC,SAA+C,CAAG,CAAC,CAAC,CAC1D,IAAK,KAAM,CAAAC,YAAY,GAAI,CAAAH,eAAe,CAAE,CAC1C,GAAIG,YAAY,GAAK,WAAW,CAAE,CAGhC,KAAM,CAAAC,aAAa,CAAGN,MAAM,CAACO,sBAAsB,CACnD,KAAM,CAAAC,YAAY,CAAGR,MAAM,CAACS,qBAAqB,CACjD,KAAM,CAAAC,SAAS,CAAG,GAAI,CAAAC,KAAK,CAAC,CAAC,CAAC,CAC9B,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAE,CAAE,CAC1BF,SAAS,CAACE,CAAC,CAAC,CACVX,QAAQ,EAAIO,YAAY,CAACI,CAAC,CAAC,CAAGN,aAAa,CAACM,CAAC,CAAC,CAAC,CAC/CN,aAAa,CAACM,CAAC,CAAC,CACpB,CACAR,SAAS,CAACS,eAAe,CAAGH,SAAS,CACvC,CAAC,IAAM,CAEL,KAAM,CAAAI,YAAY,CAAIT,YAAY,CAACU,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACxDX,YAAY,CAACY,KAAK,CAAC,CAAC,CAAyC,CAC/D,KAAM,CAAAC,mBAAmB,WAAaJ,YAAuB,CAC7D,KAAM,CAAAK,kBAAkB,UAAYL,YAAuB,CAE3D,KAAM,CAAAM,YAAY,CAAGpB,MAAM,CAACkB,mBAAmB,CAAC,CAChD,KAAM,CAAAG,WAAW,CAAGrB,MAAM,CAACmB,kBAAkB,CAAC,CAE9Cf,SAAS,CAACC,YAAY,CAAC,CACrBJ,QAAQ,EAAIoB,WAAW,CAAGD,YAAY,CAAC,CAAGA,YAAY,CAC1D,CACF,CACAE,MAAM,CAACC,oBAAoB,CAACxB,OAAO,CAAEK,SAAS,CAAE,IAAI,CAAC,CACvD\",\"ignoreList\":[]}",
  version: "3.16.7"
};
var SharedTransition = exports.SharedTransition = function () {
  function SharedTransition() {
    (0, _classCallCheck2.default)(this, SharedTransition);
    this._customAnimationFactory = null;
    this._animation = null;
    this._transitionDuration = 500;
    this._reduceMotion = _commonTypes2.ReduceMotion.System;
    this._customProgressAnimation = undefined;
    this._progressAnimation = undefined;
    this._defaultTransitionType = undefined;
  }
  return (0, _createClass2.default)(SharedTransition, [{
    key: "custom",
    value: function custom(customAnimationFactory) {
      this._customAnimationFactory = customAnimationFactory;
      return this;
    }
  }, {
    key: "progressAnimation",
    value: function progressAnimation(progressAnimationCallback) {
      this._customProgressAnimation = function () {
        var _e = [new global.Error(), -2, -27];
        var SharedTransitionTs1 = function SharedTransitionTs1(viewTag, values, progress) {
          var newStyles = progressAnimationCallback(values, progress);
          global._notifyAboutProgress(viewTag, newStyles, true);
        };
        SharedTransitionTs1.__closure = {
          progressAnimationCallback: progressAnimationCallback
        };
        SharedTransitionTs1.__workletHash = 10899602899845;
        SharedTransitionTs1.__initData = _worklet_10899602899845_init_data;
        SharedTransitionTs1.__stackDetails = _e;
        return SharedTransitionTs1;
      }();
      return this;
    }
  }, {
    key: "duration",
    value: function duration(_duration) {
      this._transitionDuration = _duration;
      return this;
    }
  }, {
    key: "reduceMotion",
    value: function reduceMotion(_reduceMotion) {
      this._reduceMotion = _reduceMotion;
      return this;
    }
  }, {
    key: "defaultTransitionType",
    value: function defaultTransitionType(transitionType) {
      this._defaultTransitionType = transitionType;
      return this;
    }
  }, {
    key: "registerTransition",
    value: function registerTransition(viewTag, sharedTransitionTag) {
      var isUnmounting = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      if ((0, _util.getReduceMotionFromConfig)(this.getReduceMotion())) {
        return;
      }
      var transitionAnimation = this.getTransitionAnimation();
      var progressAnimation = this.getProgressAnimation();
      if (!this._defaultTransitionType) {
        if (this._customAnimationFactory && !this._customProgressAnimation) {
          this._defaultTransitionType = _commonTypes.SharedTransitionType.ANIMATION;
        } else {
          this._defaultTransitionType = _commonTypes.SharedTransitionType.PROGRESS_ANIMATION;
        }
      }
      var layoutAnimationType = this._defaultTransitionType === _commonTypes.SharedTransitionType.ANIMATION ? _commonTypes.LayoutAnimationType.SHARED_ELEMENT_TRANSITION : _commonTypes.LayoutAnimationType.SHARED_ELEMENT_TRANSITION_PROGRESS;
      (0, _UpdateLayoutAnimations.updateLayoutAnimations)(viewTag, layoutAnimationType, transitionAnimation, sharedTransitionTag, isUnmounting);
      SharedTransition._progressTransitionManager.addProgressAnimation(viewTag, progressAnimation);
    }
  }, {
    key: "unregisterTransition",
    value: function unregisterTransition(viewTag) {
      var isUnmounting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var layoutAnimationType = this._defaultTransitionType === _commonTypes.SharedTransitionType.ANIMATION ? _commonTypes.LayoutAnimationType.SHARED_ELEMENT_TRANSITION : _commonTypes.LayoutAnimationType.SHARED_ELEMENT_TRANSITION_PROGRESS;
      (0, _UpdateLayoutAnimations.updateLayoutAnimations)(viewTag, layoutAnimationType, undefined, undefined, isUnmounting);
      SharedTransition._progressTransitionManager.removeProgressAnimation(viewTag, isUnmounting);
    }
  }, {
    key: "getReduceMotion",
    value: function getReduceMotion() {
      return this._reduceMotion;
    }
  }, {
    key: "getTransitionAnimation",
    value: function getTransitionAnimation() {
      if (!this._animation) {
        this.buildAnimation();
      }
      return this._animation;
    }
  }, {
    key: "getProgressAnimation",
    value: function getProgressAnimation() {
      if (!this._progressAnimation) {
        this.buildProgressAnimation();
      }
      return this._progressAnimation;
    }
  }, {
    key: "buildAnimation",
    value: function buildAnimation() {
      var animationFactory = this._customAnimationFactory;
      var transitionDuration = this._transitionDuration;
      var reduceMotion = this._reduceMotion;
      this._animation = function () {
        var _e = [new global.Error(), -6, -27];
        var SharedTransitionTs2 = function SharedTransitionTs2(values) {
          var animations = {};
          var initialValues = {};
          if (animationFactory) {
            animations = animationFactory(values);
            for (var key in animations) {
              if (!SUPPORTED_PROPS.includes(key)) {
                throw new _errors.ReanimatedError(`The prop '${key}' is not supported yet.`);
              }
            }
          } else {
            for (var propName of SUPPORTED_PROPS) {
              if (propName === 'transform') {
                var matrix = values.targetTransformMatrix;
                animations.transformMatrix = (0, _animation.withTiming)(matrix, {
                  reduceMotion: reduceMotion,
                  duration: transitionDuration
                });
              } else {
                var capitalizedPropName = `${propName.charAt(0).toUpperCase()}${propName.slice(1)}`;
                var keyToTargetValue = `target${capitalizedPropName}`;
                animations[propName] = (0, _animation.withTiming)(values[keyToTargetValue], {
                  reduceMotion: reduceMotion,
                  duration: transitionDuration
                });
              }
            }
          }
          for (var _propName in animations) {
            if (_propName === 'transform') {
              initialValues.transformMatrix = values.currentTransformMatrix;
            } else {
              var _capitalizedPropName = _propName.charAt(0).toUpperCase() + _propName.slice(1);
              var keyToCurrentValue = `current${_capitalizedPropName}`;
              initialValues[_propName] = values[keyToCurrentValue];
            }
          }
          return {
            initialValues: initialValues,
            animations: animations
          };
        };
        SharedTransitionTs2.__closure = {
          animationFactory: animationFactory,
          SUPPORTED_PROPS: SUPPORTED_PROPS,
          withTiming: _animation.withTiming,
          reduceMotion: reduceMotion,
          transitionDuration: transitionDuration
        };
        SharedTransitionTs2.__workletHash = 15082723599963;
        SharedTransitionTs2.__initData = _worklet_15082723599963_init_data;
        SharedTransitionTs2.__stackDetails = _e;
        return SharedTransitionTs2;
      }();
    }
  }, {
    key: "buildProgressAnimation",
    value: function buildProgressAnimation() {
      if (this._customProgressAnimation) {
        this._progressAnimation = this._customProgressAnimation;
        return;
      }
      this._progressAnimation = function () {
        var _e = [new global.Error(), -2, -27];
        var SharedTransitionTs3 = function SharedTransitionTs3(viewTag, values, progress) {
          var newStyles = {};
          for (var propertyName of SUPPORTED_PROPS) {
            if (propertyName === 'transform') {
              var currentMatrix = values.currentTransformMatrix;
              var targetMatrix = values.targetTransformMatrix;
              var newMatrix = new Array(9);
              for (var i = 0; i < 9; i++) {
                newMatrix[i] = progress * (targetMatrix[i] - currentMatrix[i]) + currentMatrix[i];
              }
              newStyles.transformMatrix = newMatrix;
            } else {
              var PropertyName = propertyName.charAt(0).toUpperCase() + propertyName.slice(1);
              var currentPropertyName = `current${PropertyName}`;
              var targetPropertyName = `target${PropertyName}`;
              var currentValue = values[currentPropertyName];
              var targetValue = values[targetPropertyName];
              newStyles[propertyName] = progress * (targetValue - currentValue) + currentValue;
            }
          }
          global._notifyAboutProgress(viewTag, newStyles, true);
        };
        SharedTransitionTs3.__closure = {
          SUPPORTED_PROPS: SUPPORTED_PROPS
        };
        SharedTransitionTs3.__workletHash = 5181943484063;
        SharedTransitionTs3.__initData = _worklet_5181943484063_init_data;
        SharedTransitionTs3.__stackDetails = _e;
        return SharedTransitionTs3;
      }();
    }
  }], [{
    key: "custom",
    value: function custom(customAnimationFactory) {
      return new SharedTransition().custom(customAnimationFactory);
    }
  }, {
    key: "duration",
    value: function duration(_duration2) {
      return new SharedTransition().duration(_duration2);
    }
  }, {
    key: "progressAnimation",
    value: function progressAnimation(progressAnimationCallback) {
      return new SharedTransition().progressAnimation(progressAnimationCallback);
    }
  }, {
    key: "defaultTransitionType",
    value: function defaultTransitionType(transitionType) {
      return new SharedTransition().defaultTransitionType(transitionType);
    }
  }, {
    key: "reduceMotion",
    value: function reduceMotion(_reduceMotion2) {
      return new SharedTransition().reduceMotion(_reduceMotion2);
    }
  }]);
}();
SharedTransition._progressTransitionManager = new _ProgressTransitionManager.ProgressTransitionManager();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,