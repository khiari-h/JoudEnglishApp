ff29a6171239bb9aa9e297af9e31d99d
_getJestObj().mock('expo-router', function () {
  return {
    useFocusEffect: jest.fn(function (callback) {
      return callback();
    }),
    router: {
      push: jest.fn()
    },
    Stack: function Stack(_ref) {
      var children = _ref.children;
      return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
        children: children
      });
    },
    useLocalSearchParams: function useLocalSearchParams() {
      return {};
    },
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn(),
        canGoBack: jest.fn(function () {
          return true;
        }),
        addListener: jest.fn(),
        isFocused: jest.fn(function () {
          return true;
        })
      };
    }
  };
});
_getJestObj().mock('../../src/hooks/useLastActivity', function () {
  return function () {
    return {
      lastActivity: null,
      isLoading: false,
      saveActivity: jest.fn(),
      clearActivity: jest.fn(),
      reload: jest.fn()
    };
  };
});
_getJestObj().mock('../../src/hooks/useActivityMetrics', function () {
  return function () {
    return {
      currentStreak: 5,
      wordsToday: 0,
      timeToday: 0,
      isLoading: false
    };
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _ProgressContext = require("../../src/contexts/ProgressContext");
var _ThemeContext = require("../../src/contexts/ThemeContext");
var _CurrentLevelContext = require("../../src/contexts/CurrentLevelContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var FakeMetricsDisplay = function FakeMetricsDisplay() {
  var _progress$levels, _progress$levels2, _progress$levels3, _progress$levels4;
  var _useProgress = (0, _ProgressContext.useProgress)(),
    progress = _useProgress.progress,
    updateExerciseProgress = _useProgress.updateExerciseProgress;
  var simulateVocabularyProgress = function simulateVocabularyProgress() {
    updateExerciseProgress('vocabulary', 'A1', 80);
  };
  var simulateGrammarProgress = function simulateGrammarProgress() {
    updateExerciseProgress('grammar', 'A1', 60);
  };
  var simulateReadingProgress = function simulateReadingProgress() {
    updateExerciseProgress('reading', 'A1', 40);
  };
  var simulateMultipleUpdates = function simulateMultipleUpdates() {
    (0, _reactNative.act)(function () {
      updateExerciseProgress('vocabulary', 'A1', 90);
      updateExerciseProgress('grammar', 'A1', 70);
      updateExerciseProgress('reading', 'A1', 50);
    });
  };
  var overallProgress = (_progress$levels = progress.levels) != null && _progress$levels.A1 ? Object.values(progress.levels.A1).reduce(function (sum, val) {
    return sum + (val || 0);
  }, 0) / Object.keys(progress.levels.A1).length : 0;
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    children: [(0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "overall-progress",
      children: ["Progression globale: ", Math.round(overallProgress), "%"]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "vocabulary-progress",
      children: ["Vocabulaire: ", ((_progress$levels2 = progress.levels) == null || (_progress$levels2 = _progress$levels2.A1) == null ? void 0 : _progress$levels2.vocabulary) || 0, "%"]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "grammar-progress",
      children: ["Grammaire: ", ((_progress$levels3 = progress.levels) == null || (_progress$levels3 = _progress$levels3.A1) == null ? void 0 : _progress$levels3.grammar) || 0, "%"]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "reading-progress",
      children: ["Lecture: ", ((_progress$levels4 = progress.levels) == null || (_progress$levels4 = _progress$levels4.A1) == null ? void 0 : _progress$levels4.reading) || 0, "%"]
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "vocabulary-button",
      onPress: simulateVocabularyProgress,
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "Progression Vocabulaire"
      })
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "grammar-button",
      onPress: simulateGrammarProgress,
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "Progression Grammaire"
      })
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "reading-button",
      onPress: simulateReadingProgress,
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "Progression Lecture"
      })
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "multiple-updates",
      onPress: simulateMultipleUpdates,
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "Mises \xE0 jour multiples"
      })
    })]
  });
};
var FakeMetricsObserver = function FakeMetricsObserver() {
  var _progress$levels5, _progress$levels6, _progress$levels7;
  var _useProgress2 = (0, _ProgressContext.useProgress)(),
    progress = _useProgress2.progress;
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    children: [(0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "observer-vocabulary",
      children: ["Obs: ", ((_progress$levels5 = progress.levels) == null || (_progress$levels5 = _progress$levels5.A1) == null ? void 0 : _progress$levels5.vocabulary) || 0, "%"]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "observer-grammar",
      children: ["Obs: ", ((_progress$levels6 = progress.levels) == null || (_progress$levels6 = _progress$levels6.A1) == null ? void 0 : _progress$levels6.grammar) || 0, "%"]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "observer-reading",
      children: ["Obs: ", ((_progress$levels7 = progress.levels) == null || (_progress$levels7 = _progress$levels7.A1) == null ? void 0 : _progress$levels7.reading) || 0, "%"]
    })]
  });
};
describe('Scénario 1: Métriques en temps réel - Mise à jour instantanée', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it("devrait mettre à jour les métriques instantanément après modification", (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsx)(FakeMetricsDisplay, {})
        })
      })),
      getByTestId = _render.getByTestId;
    expect(getByTestId('vocabulary-progress')).toHaveTextContent('Vocabulaire: 0%');
    expect(getByTestId('grammar-progress')).toHaveTextContent('Grammaire: 0%');
    expect(getByTestId('reading-progress')).toHaveTextContent('Lecture: 0%');
    _reactNative.fireEvent.press(getByTestId('vocabulary-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('vocabulary-progress')).toHaveTextContent('Vocabulaire: 80%');
    });
    _reactNative.fireEvent.press(getByTestId('grammar-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('grammar-progress')).toHaveTextContent('Grammaire: 60%');
    });
    _reactNative.fireEvent.press(getByTestId('reading-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('reading-progress')).toHaveTextContent('Lecture: 40%');
    });
  }));
  it("devrait calculer correctement la progression globale", (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsx)(FakeMetricsDisplay, {})
        })
      })),
      getByTestId = _render2.getByTestId;
    expect(getByTestId('overall-progress')).toHaveTextContent('Progression globale: 0%');
    _reactNative.fireEvent.press(getByTestId('vocabulary-button'));
    _reactNative.fireEvent.press(getByTestId('grammar-button'));
    _reactNative.fireEvent.press(getByTestId('reading-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('overall-progress')).toHaveTextContent('Progression globale: 60%');
    });
  }));
});
describe('Scénario 2: Synchronisation entre composants', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it("devrait synchroniser les métriques entre plusieurs composants", (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsxs)(_CurrentLevelContext.CurrentLevelProvider, {
            children: [(0, _jsxRuntime.jsx)(FakeMetricsDisplay, {}), (0, _jsxRuntime.jsx)(FakeMetricsObserver, {})]
          })
        })
      })),
      getByTestId = _render3.getByTestId;
    expect(getByTestId('vocabulary-progress')).toBeTruthy();
    expect(getByTestId('observer-vocabulary')).toBeTruthy();
    expect(getByTestId('vocabulary-progress')).toHaveTextContent('Vocabulaire: 0%');
    expect(getByTestId('observer-vocabulary')).toHaveTextContent('Obs: 0%');
    _reactNative.fireEvent.press(getByTestId('vocabulary-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('vocabulary-progress')).toHaveTextContent('Vocabulaire: 80%');
      expect(getByTestId('observer-vocabulary')).toHaveTextContent('Obs: 80%');
    });
  }));
  it("devrait maintenir la cohérence lors de mises à jour multiples", (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsxs)(_CurrentLevelContext.CurrentLevelProvider, {
            children: [(0, _jsxRuntime.jsx)(FakeMetricsDisplay, {}), (0, _jsxRuntime.jsx)(FakeMetricsObserver, {})]
          })
        })
      })),
      getByTestId = _render4.getByTestId;
    _reactNative.fireEvent.press(getByTestId('multiple-updates'));
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('vocabulary-progress')).toHaveTextContent('Vocabulaire: 90%');
      expect(getByTestId('observer-vocabulary')).toHaveTextContent('Obs: 90%');
      expect(getByTestId('grammar-progress')).toHaveTextContent('Grammaire: 70%');
      expect(getByTestId('observer-grammar')).toHaveTextContent('Obs: 70%');
      expect(getByTestId('reading-progress')).toHaveTextContent('Lecture: 50%');
      expect(getByTestId('observer-reading')).toHaveTextContent('Obs: 50%');
    });
  }));
});
describe('Scénario 3: Performance et réactivité', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it("devrait gérer les mises à jour rapides sans perte de données", (0, _asyncToGenerator2.default)(function* () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsx)(FakeMetricsDisplay, {})
        })
      })),
      getByTestId = _render5.getByTestId;
    (0, _reactNative.act)(function () {
      _reactNative.fireEvent.press(getByTestId('vocabulary-button'));
      _reactNative.fireEvent.press(getByTestId('grammar-button'));
      _reactNative.fireEvent.press(getByTestId('reading-button'));
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('vocabulary-progress')).toHaveTextContent('Vocabulaire: 80%');
      expect(getByTestId('grammar-progress')).toHaveTextContent('Grammaire: 60%');
      expect(getByTestId('reading-progress')).toHaveTextContent('Lecture: 40%');
    });
  }));
  it("devrait maintenir la cohérence des données lors de stress", (0, _asyncToGenerator2.default)(function* () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsx)(FakeMetricsDisplay, {})
        })
      })),
      getByTestId = _render6.getByTestId;
    for (var i = 0; i < 10; i++) {
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.press(getByTestId('vocabulary-button'));
      });
    }
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('vocabulary-progress')).toHaveTextContent('Vocabulaire: 80%');
    });
  }));
});
describe('Scénario 4: Gestion des erreurs et cas limites', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it("devrait gérer les valeurs de progression invalides", (0, _asyncToGenerator2.default)(function* () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsx)(FakeMetricsDisplay, {})
        })
      })),
      getByTestId = _render7.getByTestId;
    expect(getByTestId('overall-progress')).toHaveTextContent('Progression globale: 0%');
    (0, _reactNative.act)(function () {
      _reactNative.fireEvent.press(getByTestId('vocabulary-button'));
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('overall-progress')).toHaveTextContent('Progression globale: 80%');
    });
  }));
  it("devrait gérer l'absence de données de progression", (0, _asyncToGenerator2.default)(function* () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsx)(FakeMetricsDisplay, {})
        })
      })),
      getByTestId = _render8.getByTestId;
    expect(getByTestId('overall-progress')).toHaveTextContent('Progression globale: 0%');
    expect(getByTestId('vocabulary-progress')).toHaveTextContent('Vocabulaire: 0%');
    expect(getByTestId('grammar-progress')).toHaveTextContent('Grammaire: 0%');
    expect(getByTestId('reading-progress')).toHaveTextContent('Lecture: 0%');
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,