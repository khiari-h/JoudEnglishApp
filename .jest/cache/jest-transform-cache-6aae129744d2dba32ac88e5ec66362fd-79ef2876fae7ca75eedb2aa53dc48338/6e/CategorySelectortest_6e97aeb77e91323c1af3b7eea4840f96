a720d2243a0de866412c9f9233ccd7ce
_getJestObj().mock("react-native", function () {
  var RN = jest.requireActual("react-native");
  return Object.assign({}, RN, {
    Animated: Object.assign({}, RN.Animated, {
      Value: mockAnimatedValue,
      timing: mockTiming,
      parallel: mockParallel,
      multiply: mockMultiply,
      View: RN.Animated.View
    }),
    ScrollView: RN.ScrollView,
    TouchableOpacity: RN.TouchableOpacity,
    Text: RN.Text,
    View: RN.View
  });
});
_getJestObj().mock('expo-linear-gradient', function () {
  return {
    LinearGradient: function LinearGradient(_ref) {
      var children = _ref.children;
      var _require = require('react-native'),
        View = _require.View;
      return (0, _jsxRuntime.jsx)(View, {
        children: children
      });
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _CategorySelector = _interopRequireDefault(require("../../../src/components/exercise-common/CategorySelector"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAnimatedValue = jest.fn(function () {
  return {
    interpolate: jest.fn()
  };
});
var mockTiming = jest.fn(function () {
  return {
    start: jest.fn(function (cb) {
      return cb && cb({
        finished: true
      });
    })
  };
});
var mockParallel = jest.fn(function () {
  return {
    start: jest.fn(function (cb) {
      return cb && cb({
        finished: true
      });
    })
  };
});
var mockMultiply = jest.fn(function (a, b) {
  return a || b;
});
describe("CategorySelector - Animations", function () {
  var categories = [{
    id: "1",
    name: "Category 1"
  }, {
    id: "2",
    name: "Category 2"
  }];
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it("triggers parallel animations when selectedCategory changes", (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: jest.fn()
      })),
      rerender = _render.rerender;
    yield (0, _reactNative.waitFor)(function () {
      expect(mockAnimatedValue).toHaveBeenCalled();
    });
    mockParallel.mockClear();
    mockTiming.mockClear();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "2",
        onSelectCategory: jest.fn()
      }));
    }));
    expect(mockParallel).toHaveBeenCalledTimes(1);
    expect(mockTiming).toHaveBeenCalledTimes(2);
  }));
  it("prevents animation conflicts with isAnimatingRef", (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: jest.fn()
      })),
      rerender = _render2.rerender;
    yield (0, _reactNative.waitFor)(function () {
      expect(mockAnimatedValue).toHaveBeenCalled();
    });
    mockParallel.mockClear();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "2",
        onSelectCategory: jest.fn()
      }));
    }));
    expect(mockParallel).toHaveBeenCalledTimes(1);
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: jest.fn()
      }));
    }));
    expect(mockParallel).toHaveBeenCalledTimes(1);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,