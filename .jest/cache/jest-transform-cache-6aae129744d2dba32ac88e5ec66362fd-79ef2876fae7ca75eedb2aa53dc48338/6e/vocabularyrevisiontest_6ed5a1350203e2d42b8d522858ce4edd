aba3065c691c0ce223e10ae5aa001fc3
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    },
    useRoute: function useRoute() {
      return {
        params: {}
      };
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _layout = _interopRequireDefault(require("../../app/_layout"));
var _ProgressContext = require("../../src/contexts/ProgressContext");
var _AppProvider = require("../../src/contexts/AppProvider");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Vocabulary Revision Integration Test', function () {
  it('should add words to revision list and allow revision', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AppProvider.AppProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsx)(_layout.default, {})
        })
      })),
      getByText = _render.getByText,
      findByText = _render.findByText;
    _reactNative.fireEvent.press(getByText(/Révision du vocabulaire/i));
    var wordToRevise = yield findByText(/Mot à réviser/i);
    expect(wordToRevise).toBeTruthy();
    _reactNative.fireEvent.press(getByText(/Commencer la révision/i));
    _reactNative.fireEvent.press(getByText(/Je me souviens/i));
    yield (0, _reactNative.waitFor)(function () {
      expect(screen.queryByText(/Mot à réviser/i)).toBeNull();
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsInVzZU5hdmlnYXRpb24iLCJuYXZpZ2F0ZSIsImZuIiwiZ29CYWNrIiwidXNlUm91dGUiLCJwYXJhbXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9sYXlvdXQiLCJfUHJvZ3Jlc3NDb250ZXh0IiwiX0FwcFByb3ZpZGVyIiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwiaXQiLCJkZWZhdWx0IiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsIkFwcFByb3ZpZGVyIiwiY2hpbGRyZW4iLCJQcm9ncmVzc1Byb3ZpZGVyIiwiZ2V0QnlUZXh0IiwiZmluZEJ5VGV4dCIsImZpcmVFdmVudCIsInByZXNzIiwid29yZFRvUmV2aXNlIiwiZXhwZWN0IiwidG9CZVRydXRoeSIsIndhaXRGb3IiLCJzY3JlZW4iLCJxdWVyeUJ5VGV4dCIsInRvQmVOdWxsIl0sInNvdXJjZXMiOlsidm9jYWJ1bGFyeS1yZXZpc2lvbi50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IEFwcCBmcm9tICcuLi8uLi9hcHAvX2xheW91dCc7XG5pbXBvcnQgeyBQcm9ncmVzc1Byb3ZpZGVyIH0gZnJvbSAnLi4vLi4vc3JjL2NvbnRleHRzL1Byb2dyZXNzQ29udGV4dCc7XG5pbXBvcnQgeyBBcHBQcm92aWRlciB9IGZyb20gJy4uLy4uL3NyYy9jb250ZXh0cy9BcHBQcm92aWRlcic7XG5cblxuamVzdC5tb2NrKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnLCAoKSA9PiAoe1xuICAuLi5qZXN0LnJlcXVpcmVBY3R1YWwoJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScpLFxuICB1c2VOYXZpZ2F0aW9uOiAoKSA9PiAoe1xuICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXG4gICAgZ29CYWNrOiBqZXN0LmZuKCksXG4gIH0pLFxuICB1c2VSb3V0ZTogKCkgPT4gKHtcbiAgICBwYXJhbXM6IHt9LFxuICB9KSxcbn0pKTtcblxuZGVzY3JpYmUoJ1ZvY2FidWxhcnkgUmV2aXNpb24gSW50ZWdyYXRpb24gVGVzdCcsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCBhZGQgd29yZHMgdG8gcmV2aXNpb24gbGlzdCBhbmQgYWxsb3cgcmV2aXNpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQsIGZpbmRCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgIDxBcHBQcm92aWRlcj5cbiAgICAgICAgPFByb2dyZXNzUHJvdmlkZXI+XG4gICAgICAgICAgICA8QXBwIC8+XG4gICAgICAgIDwvUHJvZ3Jlc3NQcm92aWRlcj5cbiAgICAgIDwvQXBwUHJvdmlkZXI+XG4gICAgKTtcblxuICAgIC8vIDEuIFNpbXVsZXIgbGEgcsOpYWxpc2F0aW9uIGQndW4gZXhlcmNpY2UgZGUgdm9jYWJ1bGFpcmVcbiAgICAvLyAoQ2V0dGUgcGFydGllIGVzdCB1bmUgc2ltcGxpZmljYXRpb24uIEVuIHLDqWFsaXTDqSwgdm91cyBpbnRlcmFnaXJpZXogYXZlYyBsJ2V4ZXJjaWNlKVxuICAgIC8vIFN1cHBvc29ucyBxdSdhcHLDqHMgdW4gZXhlcmNpY2UsIGRlcyBtb3RzIHNvbnQgYWpvdXTDqXMgw6AgbGEgcsOpdmlzaW9uLlxuXG4gICAgLy8gMi4gTmF2aWd1ZXIgdmVycyBsJ8OpY3JhbiBkZSByw6l2aXNpb24gZHUgdm9jYWJ1bGFpcmVcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KC9Sw6l2aXNpb24gZHUgdm9jYWJ1bGFpcmUvaSkpO1xuXG4gICAgLy8gMy4gVsOpcmlmaWVyIHF1ZSBsZXMgbW90cyDDoCByw6l2aXNlciBzb250IGFmZmljaMOpc1xuICAgIGNvbnN0IHdvcmRUb1JldmlzZSA9IGF3YWl0IGZpbmRCeVRleHQoL01vdCDDoCByw6l2aXNlci9pKTsgLy8gUmVtcGxhY2V6IHBhciB1biB2cmFpIG1vdCBkZSB2b3RyZSBleGVyY2ljZVxuICAgIGV4cGVjdCh3b3JkVG9SZXZpc2UpLnRvQmVUcnV0aHkoKTtcblxuICAgIC8vIDQuIETDqW1hcnJlciB1bmUgc2Vzc2lvbiBkZSByw6l2aXNpb25cbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KC9Db21tZW5jZXIgbGEgcsOpdmlzaW9uL2kpKTtcblxuICAgIC8vIDUuIFNpbXVsZXIgbGEgcsOpdmlzaW9uIGQndW4gbW90XG4gICAgLy8gKEludGVyYWdpc3NleiBhdmVjIGxlcyBjb21wb3NhbnRzIGRlIHZvdHJlIHNlc3Npb24gZGUgcsOpdmlzaW9uKVxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoL0plIG1lIHNvdXZpZW5zL2kpKTtcblxuICAgIC8vIDYuIFbDqXJpZmllciBxdWUgbGUgbW90IGEgw6l0w6kgcmV0aXLDqSBkZSBsYSBsaXN0ZSBkZSByw6l2aXNpb24gaW1tw6lkaWF0ZVxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KHNjcmVlbi5xdWVyeUJ5VGV4dCgvTW90IMOgIHLDqXZpc2VyL2kpKS50b0JlTnVsbCgpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFRQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsMEJBQTBCLEVBQUU7RUFBQSxPQUFBQyxNQUFBLENBQUFDLE1BQUEsS0FDakNDLElBQUksQ0FBQ0MsYUFBYSxDQUFDLDBCQUEwQixDQUFDO0lBQ2pEQyxhQUFhLEVBQUUsU0FBZkEsYUFBYUEsQ0FBQTtNQUFBLE9BQVM7UUFDcEJDLFFBQVEsRUFBRUgsSUFBSSxDQUFDSSxFQUFFLENBQUMsQ0FBQztRQUNuQkMsTUFBTSxFQUFFTCxJQUFJLENBQUNJLEVBQUUsQ0FBQztNQUNsQixDQUFDO0lBQUEsQ0FBQztJQUNGRSxRQUFRLEVBQUUsU0FBVkEsUUFBUUEsQ0FBQTtNQUFBLE9BQVM7UUFDZkMsTUFBTSxFQUFFLENBQUM7TUFDWCxDQUFDO0lBQUE7RUFBQztBQUFBLENBQ0YsQ0FBQztBQUFDLElBQUFDLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxrQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBaEJKLElBQUFFLE1BQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLFlBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLE9BQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFLLGdCQUFBLEdBQUFMLE9BQUE7QUFDQSxJQUFBTSxZQUFBLEdBQUFOLE9BQUE7QUFBNkQsSUFBQU8sV0FBQSxHQUFBUCxPQUFBO0FBQUEsU0FBQWIsWUFBQTtFQUFBLElBQUFxQixRQUFBLEdBQUFSLE9BQUE7SUFBQVQsSUFBQSxHQUFBaUIsUUFBQSxDQUFBakIsSUFBQTtFQUFBSixXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBSSxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFjN0RrQixRQUFRLENBQUMsc0NBQXNDLEVBQUUsWUFBTTtFQUNyREMsRUFBRSxDQUFDLHNEQUFzRCxNQUFBVCxrQkFBQSxDQUFBVSxPQUFBLEVBQUUsYUFBWTtJQUNyRSxJQUFBQyxPQUFBLEdBQWtDLElBQUFDLG1CQUFNLEVBQ3RDLElBQUFOLFdBQUEsQ0FBQU8sR0FBQSxFQUFDUixZQUFBLENBQUFTLFdBQVc7UUFBQUMsUUFBQSxFQUNWLElBQUFULFdBQUEsQ0FBQU8sR0FBQSxFQUFDVCxnQkFBQSxDQUFBWSxnQkFBZ0I7VUFBQUQsUUFBQSxFQUNiLElBQUFULFdBQUEsQ0FBQU8sR0FBQSxFQUFDVixPQUFBLENBQUFPLE9BQUcsSUFBRTtRQUFDLENBQ087TUFBQyxDQUNSLENBQ2YsQ0FBQztNQU5PTyxTQUFTLEdBQUFOLE9BQUEsQ0FBVE0sU0FBUztNQUFFQyxVQUFVLEdBQUFQLE9BQUEsQ0FBVk8sVUFBVTtJQWE3QkMsc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDSCxTQUFTLENBQUMsMEJBQTBCLENBQUMsQ0FBQztJQUd0RCxJQUFNSSxZQUFZLFNBQVNILFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQztJQUN2REksTUFBTSxDQUFDRCxZQUFZLENBQUMsQ0FBQ0UsVUFBVSxDQUFDLENBQUM7SUFHakNKLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0gsU0FBUyxDQUFDLHdCQUF3QixDQUFDLENBQUM7SUFJcERFLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0gsU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFHN0MsTUFBTSxJQUFBTyxvQkFBTyxFQUFDLFlBQU07TUFDbEJGLE1BQU0sQ0FBQ0csTUFBTSxDQUFDQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDQyxRQUFRLENBQUMsQ0FBQztJQUN6RCxDQUFDLENBQUM7RUFDSixDQUFDLEVBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=