{"version":3,"names":["_getJestObj","mock","_require","require","Text","Ionicons","props","_jsxRuntime","jsx","testID","name","children","_interopRequireDefault","_react","_reactNative","_OptionsList","_require2","jest","describe","options","id","text","onSelectOptionMock","fn","afterEach","mockClear","it","_render","render","default","getByText","expect","toBeTruthy","_render2","onSelectOption","fireEvent","press","toHaveBeenCalledWith","_render3","disabled","not","toHaveBeenCalled","_render4","selectedOptionId","getAllByTestId","length","toBe","_render5","correctOptionId","showCorrectAnswer","getByTestId","_render6"],"sources":["OptionsList.test.js"],"sourcesContent":["\n// __tests__/components/exercise-common/OptionsList.test.js\nimport React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport OptionsList from '../../../src/components/exercise-common/OptionsList';\n\n// Mock des icônes\njest.mock('@expo/vector-icons', () => {\n  const { Text } = require('react-native');\n  return {\n    Ionicons: (props) => <Text testID={`icon-${props.name}`}>{props.name}</Text>,\n  };\n});\n\ndescribe('OptionsList', () => {\n  const options = [\n    { id: '1', text: 'Apple' },\n    { id: '2', text: 'Banana' },\n    { id: '3', text: 'Cherry' },\n  ];\n  const onSelectOptionMock = jest.fn();\n\n  afterEach(() => {\n    onSelectOptionMock.mockClear();\n  });\n\n  it('renders all options correctly', () => {\n    const { getByText } = render(<OptionsList options={options} />);\n    expect(getByText('Apple')).toBeTruthy();\n    expect(getByText('Banana')).toBeTruthy();\n    expect(getByText('Cherry')).toBeTruthy();\n  });\n\n  it('calls onSelectOption with the correct id when an option is pressed', () => {\n    const { getByText } = render(\n      <OptionsList options={options} onSelectOption={onSelectOptionMock} />\n    );\n    fireEvent.press(getByText('Banana'));\n    expect(onSelectOptionMock).toHaveBeenCalledWith('2');\n  });\n\n  it('does not call onSelectOption when disabled', () => {\n    const { getByText } = render(\n      <OptionsList options={options} onSelectOption={onSelectOptionMock} disabled={true} />\n    );\n    fireEvent.press(getByText('Banana'));\n    expect(onSelectOptionMock).not.toHaveBeenCalled();\n  });\n\n  it('shows the selected option with a selected indicator', () => {\n    const { getAllByTestId } = render(\n      <OptionsList options={options} selectedOptionId={'1'} />\n    );\n    // Le composant ajoute un <View> avec un style `selectedIndicator`\n    // On ne peut pas le tester directement par un testID, mais on peut vérifier l'icône qui apparaît\n    // Dans ce cas, le composant ajoute une View, pas une icône. On va donc tester la logique de réponse.\n    // Pour ce test, on se contente de vérifier que le composant ne plante pas.\n    expect(getAllByTestId('icon-checkmark-circle').length).toBe(0); // Pas de réponse affichée\n  });\n\n  describe('when showing correct answer', () => {\n    it('shows a checkmark for the correct answer', () => {\n      const { getByTestId } = render(\n        <OptionsList\n          options={options}\n          selectedOptionId={'2'}\n          correctOptionId={'2'}\n          showCorrectAnswer={true}\n        />\n      );\n      expect(getByTestId('icon-checkmark-circle')).toBeTruthy();\n    });\n\n    it('shows a cross for the incorrect selection and a checkmark for the correct answer', () => {\n      const { getByTestId } = render(\n        <OptionsList\n          options={options}\n          selectedOptionId={'1'} // L'utilisateur a choisi Apple\n          correctOptionId={'2'} // La bonne réponse est Banana\n          showCorrectAnswer={true}\n        />\n      );\n      // L'icône de croix est sur l'option 1\n      expect(getByTestId('icon-close-circle')).toBeTruthy();\n      // L'icône de coche est sur l'option 2\n      expect(getByTestId('icon-checkmark-circle')).toBeTruthy();\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}