{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_MaterialCommunityIcons","_NavigationButtons","_propTypes","_jsxRuntime","QuizContent","_ref","currentQuestion","selectedAnswer","showResult","handleAnswer","handleContinue","colors","localStyles","isAnswerCorrect","correctAnswer","feedbackColor","jsxs","View","style","flex","justifyContent","children","jsx","questionSection","questionCard","borderColor","primary","questionLabelContainer","Text","questionLabel","color","textSecondary","wordToTranslate","text","word","choicesSection","choices","map","choice","index","isSelected","isCorrectAnswer","buttonStyle","choiceButton","textStyle","choiceText","icon","push","choiceCorrect","choiceTextCorrect","default","name","choiceIcon","choiceWrong","choiceTextWrong","TouchableOpacity","onPress","disabled","choiceButtonInner","choiceNumberContainer","choiceNumberText","feedbackContainer","backgroundColor","background","feedbackMessageRow","feedbackIcon","feedbackText","alignItems","marginTop","onNext","disablePrevious","disableNext","primaryColor","buttonLabels","next","finish","isLast","propTypes","PropTypes","func","isRequired","any","bool","_default","exports"],"sources":["QuizContent.js"],"sourcesContent":["// src/screens/VocabularyRevision/components/QuizContent.js\r\nimport React from 'react';\r\nimport { View, Text, TouchableOpacity } from 'react-native';\r\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\r\nimport NavigationButtons from '../../../components/exercise-common/NavigationButtons';import PropTypes from 'prop-types';\n // ✅ Import du composant NavigationButtons\r\n\r\nconst QuizContent = ({\r\n  currentQuestion,\r\n  selectedAnswer,\r\n  showResult,\r\n  handleAnswer,\r\n  handleContinue,\r\n  colors,\r\n  localStyles,\r\n}) => {\r\n  if (!currentQuestion) {\r\n    return null;\r\n  }\r\n\r\n  // Détermine si la réponse de l'utilisateur est correcte\r\n  const isAnswerCorrect = showResult && selectedAnswer === currentQuestion.correctAnswer;\r\n\r\n  // Configuration du feedback\r\n  const feedbackColor = isAnswerCorrect ? '#10B981' : '#EF4444'; // Vert pour correct, Rouge pour incorrect\r\n\r\n  return (\r\n    <View style={{ flex: 1, justifyContent: 'space-between' }}>\r\n      <View>\r\n        {/* Question Card */}\r\n        <View style={localStyles.questionSection}>\r\n          <View style={[localStyles.questionCard, { borderColor: colors.primary }]}>\r\n            <View style={localStyles.questionLabelContainer}>\r\n              <Text style={[localStyles.questionLabel, { color: colors.textSecondary }]}>Traduisez ce mot :</Text>\r\n            </View>\r\n            <Text style={[localStyles.wordToTranslate, { color: colors.text }]}>{currentQuestion.word}</Text>\r\n          </View>\r\n        </View>\r\n\r\n        {/* Choices */}\r\n        <View style={localStyles.choicesSection}>\r\n          {currentQuestion.choices.map((choice, index) => {\r\n            const isSelected = selectedAnswer === choice;\r\n            const isCorrectAnswer = choice === currentQuestion.correctAnswer;\r\n\r\n            let buttonStyle = [localStyles.choiceButton];\r\n            let textStyle = [localStyles.choiceText, { color: colors.text }];\r\n            let icon = null;\r\n\r\n            if (showResult) {\r\n              if (isCorrectAnswer) {\r\n                // Surligne la bonne réponse en vert\r\n                buttonStyle.push(localStyles.choiceCorrect);\r\n                textStyle.push(localStyles.choiceTextCorrect);\r\n                icon = <Icon name=\"check-circle\" style={[localStyles.choiceIcon, { color: '#10B981' }]} />;\r\n              } else if (isSelected && !isCorrectAnswer) {\r\n                // Surligne la mauvaise réponse de l'utilisateur en rouge\r\n                buttonStyle.push(localStyles.choiceWrong);\r\n                textStyle.push(localStyles.choiceTextWrong);\r\n                icon = <Icon name=\"close-circle\" style={[localStyles.choiceIcon, { color: '#EF4444' }]} />;\r\n              }\r\n            }\r\n\r\n            return (\r\n              <TouchableOpacity\r\n                key={index}\r\n                style={buttonStyle}\r\n                onPress={() => handleAnswer(choice)}\r\n                disabled={showResult}\r\n              >\r\n                <View style={localStyles.choiceButtonInner}>\r\n                  <View style={localStyles.choiceNumberContainer}>\r\n                    <Text style={localStyles.choiceNumberText}>{index + 1}</Text>\r\n                  </View>\r\n                  <Text style={textStyle}>{choice}</Text>\r\n                  {icon}\r\n                </View>\r\n              </TouchableOpacity>\r\n            );\r\n          })}\r\n        </View>\r\n      </View>\r\n\r\n      {/* Continue Button : Apparaît seulement après une réponse */}\r\n      {showResult && (\r\n        <View style={[localStyles.feedbackContainer, { backgroundColor: colors.background }]}>\r\n          {/* Message de feedback */}\r\n          <View style={localStyles.feedbackMessageRow}>\r\n            <Icon\r\n              name={isAnswerCorrect ? 'check-circle' : 'information'}\r\n              style={[localStyles.feedbackIcon, { color: feedbackColor }]}\r\n            />\r\n            <Text style={[localStyles.feedbackText, { color: feedbackColor }]}>\r\n              {isAnswerCorrect\r\n                ? 'Bonne réponse !'\r\n                : `La bonne réponse était : ${currentQuestion.correctAnswer}`\r\n              }\r\n            </Text>\r\n          </View>\r\n\r\n          {/* ✅ NavigationButtons centré pour une meilleure UX */}\r\n          <View style={{ alignItems: 'center', marginTop: 16 }}>\r\n            <NavigationButtons\r\n              onNext={handleContinue}\r\n              disablePrevious={true} // Pas de bouton précédent dans le quiz\r\n              disableNext={false}\r\n              primaryColor={isAnswerCorrect ? \"#10B981\" : \"#5E60CE\"} // Vert si correct, violet sinon\r\n              buttonLabels={{\r\n                next: \"Continuer\",\r\n                finish: \"Continuer\"\r\n              }}\r\n              isLast={false} // Toujours \"Continuer\", jamais \"Terminer\"\r\n            />\r\n          </View>\r\n        </View>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\n\nQuizContent.propTypes = {\n  currentQuestion: PropTypes.func.isRequired,\n  selectedAnswer: PropTypes.any.isRequired,\n  showResult: PropTypes.bool.isRequired,\n  handleAnswer: PropTypes.func.isRequired,\n  handleContinue: PropTypes.func.isRequired,\n  colors: PropTypes.any.isRequired,\n  localStyles: PropTypes.any.isRequired,\n};\n\nexport default QuizContent;"],"mappings":"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","ignoreList":[]}