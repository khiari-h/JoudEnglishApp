32aa280da507e563c7a32e39b45bc4dc
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _MaterialCommunityIcons = _interopRequireDefault(require("react-native-vector-icons/MaterialCommunityIcons"));
var _NavigationButtons = _interopRequireDefault(require("../../../components/exercise-common/NavigationButtons"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
var QuizContent = function QuizContent(_ref) {
  var currentQuestion = _ref.currentQuestion,
    selectedAnswer = _ref.selectedAnswer,
    showResult = _ref.showResult,
    handleAnswer = _ref.handleAnswer,
    handleContinue = _ref.handleContinue,
    colors = _ref.colors,
    localStyles = _ref.localStyles;
  if (!currentQuestion) {
    return null;
  }
  var isAnswerCorrect = showResult && selectedAnswer === currentQuestion.correctAnswer;
  var feedbackColor = isAnswerCorrect ? '#10B981' : '#EF4444';
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: {
      flex: 1,
      justifyContent: 'space-between'
    },
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: localStyles.questionSection,
        children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: [localStyles.questionCard, {
            borderColor: colors.primary
          }],
          children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: localStyles.questionLabelContainer,
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: [localStyles.questionLabel, {
                color: colors.textSecondary
              }],
              children: "Traduisez ce mot :"
            })
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [localStyles.wordToTranslate, {
              color: colors.text
            }],
            children: currentQuestion.word
          })]
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: localStyles.choicesSection,
        children: currentQuestion.choices.map(function (choice, index) {
          var isSelected = selectedAnswer === choice;
          var isCorrectAnswer = choice === currentQuestion.correctAnswer;
          var buttonStyle = [localStyles.choiceButton];
          var textStyle = [localStyles.choiceText, {
            color: colors.text
          }];
          var icon = null;
          if (showResult) {
            if (isCorrectAnswer) {
              buttonStyle.push(localStyles.choiceCorrect);
              textStyle.push(localStyles.choiceTextCorrect);
              icon = (0, _jsxRuntime.jsx)(_MaterialCommunityIcons.default, {
                name: "check-circle",
                style: [localStyles.choiceIcon, {
                  color: '#10B981'
                }]
              });
            } else if (isSelected && !isCorrectAnswer) {
              buttonStyle.push(localStyles.choiceWrong);
              textStyle.push(localStyles.choiceTextWrong);
              icon = (0, _jsxRuntime.jsx)(_MaterialCommunityIcons.default, {
                name: "close-circle",
                style: [localStyles.choiceIcon, {
                  color: '#EF4444'
                }]
              });
            }
          }
          return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            style: buttonStyle,
            onPress: function onPress() {
              return handleAnswer(choice);
            },
            disabled: showResult,
            children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: localStyles.choiceButtonInner,
              children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
                style: localStyles.choiceNumberContainer,
                children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                  style: localStyles.choiceNumberText,
                  children: index + 1
                })
              }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: textStyle,
                children: choice
              }), icon]
            })
          }, index);
        })
      })]
    }), showResult && (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [localStyles.feedbackContainer, {
        backgroundColor: colors.background
      }],
      children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: localStyles.feedbackMessageRow,
        children: [(0, _jsxRuntime.jsx)(_MaterialCommunityIcons.default, {
          name: isAnswerCorrect ? 'check-circle' : 'information',
          style: [localStyles.feedbackIcon, {
            color: feedbackColor
          }]
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [localStyles.feedbackText, {
            color: feedbackColor
          }],
          children: isAnswerCorrect ? 'Bonne réponse !' : `La bonne réponse était : ${currentQuestion.correctAnswer}`
        })]
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: {
          alignItems: 'center',
          marginTop: 16
        },
        children: (0, _jsxRuntime.jsx)(_NavigationButtons.default, {
          onNext: handleContinue,
          disablePrevious: true,
          disableNext: false,
          primaryColor: isAnswerCorrect ? "#10B981" : "#5E60CE",
          buttonLabels: {
            next: "Continuer",
            finish: "Continuer"
          },
          isLast: false
        })
      })]
    })]
  });
};
QuizContent.propTypes = {
  currentQuestion: _propTypes.default.func.isRequired,
  selectedAnswer: _propTypes.default.any.isRequired,
  showResult: _propTypes.default.bool.isRequired,
  handleAnswer: _propTypes.default.func.isRequired,
  handleContinue: _propTypes.default.func.isRequired,
  colors: _propTypes.default.any.isRequired,
  localStyles: _propTypes.default.any.isRequired
};
var _default = exports.default = QuizContent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,