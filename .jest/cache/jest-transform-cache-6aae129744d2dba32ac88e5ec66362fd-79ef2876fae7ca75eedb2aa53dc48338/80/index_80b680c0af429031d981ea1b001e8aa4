b12b9b64828661044d9941abd5853a71
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = require("react");
var _reactNative = require("react-native");
var _vectorIcons = require("@expo/vector-icons");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var ResultsHeader = function ResultsHeader(_ref) {
  var level = _ref.level,
    levelColor = _ref.levelColor,
    exerciseType = _ref.exerciseType,
    localStyles = _ref.localStyles;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: localStyles.header,
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [localStyles.levelBadge, {
        backgroundColor: levelColor
      }],
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: localStyles.levelText,
        children: level
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: localStyles.exerciseType,
      children: exerciseType
    })]
  });
};
var ScoreSection = function ScoreSection(_ref2) {
  var color = _ref2.color,
    icon = _ref2.icon,
    successPercentage = _ref2.successPercentage,
    correctAnswers = _ref2.correctAnswers,
    totalQuestions = _ref2.totalQuestions,
    title = _ref2.title,
    message = _ref2.message,
    localStyles = _ref2.localStyles;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: localStyles.scoreSection,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [localStyles.scoreCircle, {
        borderColor: color
      }],
      children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
        name: icon,
        size: 36,
        color: color
      }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: [localStyles.scorePercentage, {
          color: color
        }],
        children: [successPercentage, "%"]
      }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: localStyles.scoreRatio,
        children: [correctAnswers, "/", totalQuestions]
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: localStyles.scoreSummary,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: localStyles.scoreTitle,
        children: title
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: localStyles.scoreMessage,
        children: message
      })]
    })]
  });
};
var FeedbackSection = function FeedbackSection(_ref3) {
  var feedback = _ref3.feedback,
    localStyles = _ref3.localStyles;
  return feedback ? (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: localStyles.feedbackContainer,
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: localStyles.feedbackTitle,
      children: "Conseils pour progresser"
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: localStyles.feedbackText,
      children: feedback
    })]
  }) : null;
};
var ResultsButtons = function ResultsButtons(_ref4) {
  var shareResults = _ref4.shareResults,
    onRetry = _ref4.onRetry,
    onContinue = _ref4.onContinue,
    levelColor = _ref4.levelColor,
    localStyles = _ref4.localStyles;
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [(0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
      style: localStyles.shareButton,
      onPress: shareResults,
      children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
        name: "share-social",
        size: 20,
        color: "#6B7280"
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: localStyles.shareButtonText,
        children: "Partager"
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
      style: localStyles.retryButton,
      onPress: onRetry,
      children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
        name: "refresh",
        size: 20,
        color: "#6B7280"
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: localStyles.retryButtonText,
        children: "R\xE9essayer"
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
      style: [localStyles.continueButton, {
        backgroundColor: levelColor
      }],
      onPress: onContinue,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: localStyles.continueButtonText,
        children: "Continuer"
      }), (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
        name: "arrow-forward",
        size: 20,
        color: "white"
      })]
    })]
  });
};
var ResultsScreen = function ResultsScreen(_ref5) {
  var _ref5$totalQuestions = _ref5.totalQuestions,
    totalQuestions = _ref5$totalQuestions === void 0 ? 0 : _ref5$totalQuestions,
    _ref5$correctAnswers = _ref5.correctAnswers,
    correctAnswers = _ref5$correctAnswers === void 0 ? 0 : _ref5$correctAnswers,
    _ref5$incorrectAnswer = _ref5.incorrectAnswers,
    incorrectAnswers = _ref5$incorrectAnswer === void 0 ? 0 : _ref5$incorrectAnswer,
    _ref5$skippedAnswers = _ref5.skippedAnswers,
    skippedAnswers = _ref5$skippedAnswers === void 0 ? 0 : _ref5$skippedAnswers,
    _ref5$timeTaken = _ref5.timeTaken,
    timeTaken = _ref5$timeTaken === void 0 ? "00:00" : _ref5$timeTaken,
    _ref5$exerciseType = _ref5.exerciseType,
    exerciseType = _ref5$exerciseType === void 0 ? "exercise" : _ref5$exerciseType,
    _ref5$level = _ref5.level,
    level = _ref5$level === void 0 ? "A1" : _ref5$level,
    _ref5$levelColor = _ref5.levelColor,
    levelColor = _ref5$levelColor === void 0 ? "#3b82f6" : _ref5$levelColor,
    _ref5$feedback = _ref5.feedback,
    feedback = _ref5$feedback === void 0 ? "" : _ref5$feedback,
    _ref5$onRetry = _ref5.onRetry,
    onRetry = _ref5$onRetry === void 0 ? function () {} : _ref5$onRetry,
    _ref5$onContinue = _ref5.onContinue,
    onContinue = _ref5$onContinue === void 0 ? function () {} : _ref5$onContinue,
    _ref5$showDetailedRes = _ref5.showDetailedResults,
    showDetailedResults = _ref5$showDetailedRes === void 0 ? false : _ref5$showDetailedRes,
    _ref5$detailedResults = _ref5.detailedResults,
    detailedResults = _ref5$detailedResults === void 0 ? [] : _ref5$detailedResults;
  var fadeAnim = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
  var scaleAnim = (0, _react.useRef)(new _reactNative.Animated.Value(0.8)).current;
  var successPercentage = Math.round(correctAnswers / totalQuestions * 100) || 0;
  var getPerformanceData = function getPerformanceData() {
    if (successPercentage >= 80) {
      return {
        title: "Excellent!",
        message: "Vous maîtrisez ce niveau.",
        color: "#10B981",
        icon: "trophy"
      };
    } else if (successPercentage >= 60) {
      return {
        title: "Bien joué!",
        message: "Vous progressez bien.",
        color: "#3B82F6",
        icon: "thumbs-up"
      };
    } else if (successPercentage >= 40) {
      return {
        title: "Pas mal!",
        message: "Continuez à pratiquer.",
        color: "#F59E0B",
        icon: "fitness"
      };
    } else {
      return {
        title: "Continuez vos efforts",
        message: "Vous pouvez vous améliorer.",
        color: "#EF4444",
        icon: "school"
      };
    }
  };
  var _getPerformanceData = getPerformanceData(),
    title = _getPerformanceData.title,
    message = _getPerformanceData.message,
    color = _getPerformanceData.color,
    icon = _getPerformanceData.icon;
  var shareResults = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      yield _reactNative.Share.share({
        message: `J'ai obtenu ${correctAnswers}/${totalQuestions} (${successPercentage}%) dans mon exercice de ${exerciseType} niveau ${level} sur l'application JOUD English!`,
        title: "Mes résultats d'apprentissage"
      });
    } catch (error) {}
  }), [correctAnswers, totalQuestions, successPercentage, exerciseType, level]);
  (0, _react.useEffect)(function () {
    _reactNative.Animated.parallel([_reactNative.Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 500,
      useNativeDriver: true
    }), _reactNative.Animated.spring(scaleAnim, {
      toValue: 1,
      friction: 8,
      tension: 40,
      useNativeDriver: true
    })]).start();
  }, []);
  return (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
    style: _style.default.container,
    showsVerticalScrollIndicator: false,
    children: (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
      style: [_style.default.resultsCard, {
        opacity: fadeAnim,
        transform: [{
          scale: scaleAnim
        }]
      }],
      children: [(0, _jsxRuntime.jsx)(ResultsHeader, {
        level: level,
        levelColor: levelColor,
        exerciseType: exerciseType,
        localStyles: _style.default
      }), (0, _jsxRuntime.jsx)(ScoreSection, {
        color: color,
        icon: icon,
        successPercentage: successPercentage,
        correctAnswers: correctAnswers,
        totalQuestions: totalQuestions,
        title: title,
        message: message,
        localStyles: _style.default
      }), (0, _jsxRuntime.jsx)(StatsSection, {
        correctAnswers: correctAnswers,
        incorrectAnswers: incorrectAnswers,
        skippedAnswers: skippedAnswers,
        timeTaken: timeTaken,
        localStyles: _style.default
      }), (0, _jsxRuntime.jsx)(FeedbackSection, {
        feedback: feedback,
        localStyles: _style.default
      }), (0, _jsxRuntime.jsx)(DetailedResultsSection, {
        showDetailedResults: showDetailedResults,
        detailedResults: detailedResults,
        localStyles: _style.default
      }), (0, _jsxRuntime.jsx)(ResultsButtons, {
        shareResults: shareResults,
        onRetry: onRetry,
        onContinue: onContinue,
        levelColor: levelColor,
        localStyles: _style.default
      })]
    })
  });
};
var StatsSection = function StatsSection(_ref7) {
  var correctAnswers = _ref7.correctAnswers,
    incorrectAnswers = _ref7.incorrectAnswers,
    skippedAnswers = _ref7.skippedAnswers,
    timeTaken = _ref7.timeTaken,
    localStyles = _ref7.localStyles;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: localStyles.statsContainer,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: localStyles.statItem,
      children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [localStyles.statIconContainer, {
          backgroundColor: "#ECFDF5"
        }],
        children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: "checkmark-circle",
          size: 24,
          color: "#10B981"
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: localStyles.statLabel,
        children: "Correctes"
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: localStyles.statValue,
        children: correctAnswers
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: localStyles.statItem,
      children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [localStyles.statIconContainer, {
          backgroundColor: "#FEF2F2"
        }],
        children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: "close-circle",
          size: 24,
          color: "#EF4444"
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: localStyles.statLabel,
        children: "Incorrectes"
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: localStyles.statValue,
        children: incorrectAnswers
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: localStyles.statItem,
      children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [localStyles.statIconContainer, {
          backgroundColor: "#F3F4F6"
        }],
        children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: "play-skip-forward",
          size: 24,
          color: "#6B7280"
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: localStyles.statLabel,
        children: "Pass\xE9es"
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: localStyles.statValue,
        children: skippedAnswers
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: localStyles.statItem,
      children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [localStyles.statIconContainer, {
          backgroundColor: "#EFF6FF"
        }],
        children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: "time",
          size: 24,
          color: "#3B82F6"
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: localStyles.statLabel,
        children: "Temps"
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: localStyles.statValue,
        children: timeTaken
      })]
    })]
  });
};
var DetailedResultsSection = function DetailedResultsSection(_ref8) {
  var showDetailedResults = _ref8.showDetailedResults,
    detailedResults = _ref8.detailedResults,
    localStyles = _ref8.localStyles;
  return showDetailedResults && detailedResults.length > 0 && (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: localStyles.detailedResultsContainer,
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: localStyles.detailedResultsTitle,
      children: "D\xE9tail des r\xE9ponses"
    }), detailedResults.map(function (result, index) {
      return (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: localStyles.detailedResultItem,
        children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: localStyles.questionHeader,
          children: [(0, _jsxRuntime.jsxs)(_reactNative.Text, {
            style: localStyles.questionNumber,
            children: ["Question ", index + 1]
          }), (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
            name: result.isCorrect ? "checkmark-circle" : result.isSkipped ? "play-skip-forward" : "close-circle",
            size: 20,
            color: result.isCorrect ? "#10B981" : result.isSkipped ? "#6B7280" : "#EF4444"
          })]
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: localStyles.questionText,
          children: result.question
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: localStyles.answersContainer,
          children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: localStyles.answerRow,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: localStyles.answerLabel,
              children: "Votre r\xE9ponse:"
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: [localStyles.answerValue, result.isCorrect ? localStyles.correctAnswer : result.isSkipped ? localStyles.skippedAnswer : localStyles.incorrectAnswer],
              children: result.isSkipped ? "Passée" : result.userAnswer
            })]
          }), !result.isCorrect && !result.isSkipped && (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: localStyles.answerRow,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: localStyles.answerLabel,
              children: "R\xE9ponse correcte:"
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: [localStyles.answerValue, localStyles.correctAnswer],
              children: result.correctAnswer
            })]
          })]
        })]
      }, result.question);
    })]
  });
};
var _default = exports.default = ResultsScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,