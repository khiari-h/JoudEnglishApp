cf365fec3b0a2b54560cbdcd16de44cd
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ProgressCard = _interopRequireDefault(require("../../../../components/ui/ProgressCard"));
var _vocabularyStats = require("../../../../utils/vocabulary/vocabularyStats");
var _jsxRuntime = require("react/jsx-runtime");
var VocabularyProgress = function VocabularyProgress(_ref) {
  var vocabularyData = _ref.vocabularyData,
    completedWords = _ref.completedWords,
    levelColor = _ref.levelColor,
    _ref$expanded = _ref.expanded,
    expanded = _ref$expanded === void 0 ? false : _ref$expanded,
    onToggleExpand = _ref.onToggleExpand,
    onCategoryPress = _ref.onCategoryPress;
  var getDataArray = function getDataArray() {
    if (vocabularyData != null && vocabularyData.categories && Array.isArray(vocabularyData.categories)) {
      return vocabularyData.categories;
    } else if (vocabularyData != null && vocabularyData.exercises && Array.isArray(vocabularyData.exercises)) {
      return vocabularyData.exercises;
    }
    return [];
  };
  var dataArray = getDataArray();
  var totalWordsCount = (0, _vocabularyStats.calculateTotalWords)(dataArray);
  var completedWordsCount = (0, _vocabularyStats.calculateCompletedWordsCount)(completedWords);
  var totalProgress = (0, _vocabularyStats.calculateTotalProgress)(dataArray, completedWords);
  var categoryProgressData = (0, _vocabularyStats.calculateCategoryProgress)(dataArray, completedWords);
  var formattedCategoryData = categoryProgressData.map(function (category) {
    return {
      title: category.title,
      completed: category.completedWords,
      total: category.totalWords,
      progress: category.progress
    };
  });
  return (0, _jsxRuntime.jsx)(_ProgressCard.default, {
    title: "Progression",
    progress: totalProgress,
    completed: completedWordsCount,
    total: totalWordsCount,
    unit: "mots",
    levelColor: levelColor,
    expandable: true,
    expanded: expanded,
    onToggleExpand: onToggleExpand,
    categoryData: formattedCategoryData,
    onCategoryPress: onCategoryPress
  });
};
var _default = exports.default = VocabularyProgress;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfUHJvZ3Jlc3NDYXJkIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfdm9jYWJ1bGFyeVN0YXRzIiwiX2pzeFJ1bnRpbWUiLCJWb2NhYnVsYXJ5UHJvZ3Jlc3MiLCJfcmVmIiwidm9jYWJ1bGFyeURhdGEiLCJjb21wbGV0ZWRXb3JkcyIsImxldmVsQ29sb3IiLCJfcmVmJGV4cGFuZGVkIiwiZXhwYW5kZWQiLCJvblRvZ2dsZUV4cGFuZCIsIm9uQ2F0ZWdvcnlQcmVzcyIsImdldERhdGFBcnJheSIsImNhdGVnb3JpZXMiLCJBcnJheSIsImlzQXJyYXkiLCJleGVyY2lzZXMiLCJkYXRhQXJyYXkiLCJ0b3RhbFdvcmRzQ291bnQiLCJjYWxjdWxhdGVUb3RhbFdvcmRzIiwiY29tcGxldGVkV29yZHNDb3VudCIsImNhbGN1bGF0ZUNvbXBsZXRlZFdvcmRzQ291bnQiLCJ0b3RhbFByb2dyZXNzIiwiY2FsY3VsYXRlVG90YWxQcm9ncmVzcyIsImNhdGVnb3J5UHJvZ3Jlc3NEYXRhIiwiY2FsY3VsYXRlQ2F0ZWdvcnlQcm9ncmVzcyIsImZvcm1hdHRlZENhdGVnb3J5RGF0YSIsIm1hcCIsImNhdGVnb3J5IiwidGl0bGUiLCJjb21wbGV0ZWQiLCJ0b3RhbCIsInRvdGFsV29yZHMiLCJwcm9ncmVzcyIsImpzeCIsImRlZmF1bHQiLCJ1bml0IiwiZXhwYW5kYWJsZSIsImNhdGVnb3J5RGF0YSIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFZvY2FidWxhcnlQcm9ncmVzcy9pbmRleC5qcyAtIFZFUlNJT04gQ09SUklHw4lFIFBPVVIgTEVTIDIgU1RSVUNUVVJFU1xyXG5cclxuaW1wb3J0IFByb2dyZXNzQ2FyZCBmcm9tIFwiLi4vLi4vLi4vLi4vY29tcG9uZW50cy91aS9Qcm9ncmVzc0NhcmRcIjtcclxuaW1wb3J0IHtcclxuICBjYWxjdWxhdGVUb3RhbFdvcmRzLFxyXG4gIGNhbGN1bGF0ZUNvbXBsZXRlZFdvcmRzQ291bnQsXHJcbiAgY2FsY3VsYXRlVG90YWxQcm9ncmVzcyxcclxuICBjYWxjdWxhdGVDYXRlZ29yeVByb2dyZXNzLFxyXG59IGZyb20gXCIuLi8uLi8uLi8uLi91dGlscy92b2NhYnVsYXJ5L3ZvY2FidWxhcnlTdGF0c1wiO1xyXG5cclxuLyoqXHJcbiAqIPCfk4ogVm9jYWJ1bGFyeVByb2dyZXNzIC0gVmVyc2lvbiBDb3JyaWfDqWUgcG91ciBnw6lyZXIgY2F0ZWdvcmllcyBFVCBleGVyY2lzZXNcclxuICog4pyFIEfDqHJlIG1vZGUgY2xhc3NpcXVlIChjYXRlZ29yaWVzKSBFVCBtb2RlIGZhc3QgKGV4ZXJjaXNlcylcclxuICogXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSB2b2NhYnVsYXJ5RGF0YSAtIERvbm7DqWVzIGR1IHZvY2FidWxhaXJlXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb21wbGV0ZWRXb3JkcyAtIE1vdHMgY29tcGzDqXTDqXMgcGFyIGNhdMOpZ29yaWVcclxuICogQHBhcmFtIHtzdHJpbmd9IGxldmVsQ29sb3IgLSBDb3VsZXVyIGR1IG5pdmVhdVxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGV4cGFuZGVkIC0gw4l0YXQgZCdleHBhbnNpb25cclxuICogQHBhcmFtIHtmdW5jdGlvbn0gb25Ub2dnbGVFeHBhbmQgLSBGb25jdGlvbiBwb3VyIHRvZ2dsZSBleHBhbnNpb25cclxuICogQHBhcmFtIHtmdW5jdGlvbn0gb25DYXRlZ29yeVByZXNzIC0gRm9uY3Rpb24gYXBwZWzDqWUgbG9ycyBkdSBjbGljIHN1ciBjYXTDqWdvcmllXHJcbiAqL1xyXG5jb25zdCBWb2NhYnVsYXJ5UHJvZ3Jlc3MgPSAoe1xyXG4gIHZvY2FidWxhcnlEYXRhLFxyXG4gIGNvbXBsZXRlZFdvcmRzLFxyXG4gIGxldmVsQ29sb3IsXHJcbiAgZXhwYW5kZWQgPSBmYWxzZSxcclxuICBvblRvZ2dsZUV4cGFuZCxcclxuICBvbkNhdGVnb3J5UHJlc3MsXHJcbn0pID0+IHtcclxuICBcclxuICAvLyDinIUgQ09SUklHw4kgOiBEw6l0ZWN0ZSBsYSB2cmFpZSBzdHJ1Y3R1cmVcclxuICBjb25zdCBnZXREYXRhQXJyYXkgPSAoKSA9PiB7XHJcbiAgICBpZiAodm9jYWJ1bGFyeURhdGE/LmNhdGVnb3JpZXMgJiYgQXJyYXkuaXNBcnJheSh2b2NhYnVsYXJ5RGF0YS5jYXRlZ29yaWVzKSkge1xyXG4gICAgICAvLyBNb2RlIGNsYXNzaXF1ZSA6IHsgY2F0ZWdvcmllczogWy4uLl0gfVxyXG4gICAgICByZXR1cm4gdm9jYWJ1bGFyeURhdGEuY2F0ZWdvcmllcztcclxuICAgIH0gZWxzZSBpZiAodm9jYWJ1bGFyeURhdGE/LmV4ZXJjaXNlcyAmJiBBcnJheS5pc0FycmF5KHZvY2FidWxhcnlEYXRhLmV4ZXJjaXNlcykpIHtcclxuICAgICAgLy8gTW9kZSBmYXN0IDogeyBleGVyY2lzZXM6IFsuLi5dIH1cclxuICAgICAgcmV0dXJuIHZvY2FidWxhcnlEYXRhLmV4ZXJjaXNlcztcclxuICAgIH1cclxuICAgIHJldHVybiBbXTtcclxuICB9O1xyXG5cclxuICBjb25zdCBkYXRhQXJyYXkgPSBnZXREYXRhQXJyYXkoKTtcclxuICBcclxuICAvLyDinIUgQ09SUklHw4kgOiBVdGlsaXNlIGxhIHZyYWllIHN0cnVjdHVyZSBkw6l0ZWN0w6llXHJcbiAgY29uc3QgdG90YWxXb3Jkc0NvdW50ID0gY2FsY3VsYXRlVG90YWxXb3JkcyhkYXRhQXJyYXkpO1xyXG4gIGNvbnN0IGNvbXBsZXRlZFdvcmRzQ291bnQgPSBjYWxjdWxhdGVDb21wbGV0ZWRXb3Jkc0NvdW50KGNvbXBsZXRlZFdvcmRzKTtcclxuICBjb25zdCB0b3RhbFByb2dyZXNzID0gY2FsY3VsYXRlVG90YWxQcm9ncmVzcyhkYXRhQXJyYXksIGNvbXBsZXRlZFdvcmRzKTtcclxuICBcclxuICAvLyBEb25uw6llcyBkZXMgY2F0w6lnb3JpZXMgcG91ciBsJ2V4cGFuc2lvblxyXG4gIGNvbnN0IGNhdGVnb3J5UHJvZ3Jlc3NEYXRhID0gY2FsY3VsYXRlQ2F0ZWdvcnlQcm9ncmVzcyhkYXRhQXJyYXksIGNvbXBsZXRlZFdvcmRzKTtcclxuXHJcbiAgLy8gVHJhbnNmb3JtYXRpb24gcG91ciBsZSBmb3JtYXQgUHJvZ3Jlc3NDYXJkXHJcbiAgY29uc3QgZm9ybWF0dGVkQ2F0ZWdvcnlEYXRhID0gY2F0ZWdvcnlQcm9ncmVzc0RhdGEubWFwKChjYXRlZ29yeSkgPT4gKHtcclxuICAgIHRpdGxlOiBjYXRlZ29yeS50aXRsZSxcclxuICAgIGNvbXBsZXRlZDogY2F0ZWdvcnkuY29tcGxldGVkV29yZHMsXHJcbiAgICB0b3RhbDogY2F0ZWdvcnkudG90YWxXb3JkcyxcclxuICAgIHByb2dyZXNzOiBjYXRlZ29yeS5wcm9ncmVzcyxcclxuICB9KSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8UHJvZ3Jlc3NDYXJkXHJcbiAgICAgIHRpdGxlPVwiUHJvZ3Jlc3Npb25cIlxyXG4gICAgICBwcm9ncmVzcz17dG90YWxQcm9ncmVzc31cclxuICAgICAgY29tcGxldGVkPXtjb21wbGV0ZWRXb3Jkc0NvdW50fVxyXG4gICAgICB0b3RhbD17dG90YWxXb3Jkc0NvdW50fVxyXG4gICAgICB1bml0PVwibW90c1wiXHJcbiAgICAgIGxldmVsQ29sb3I9e2xldmVsQ29sb3J9XHJcbiAgICAgIGV4cGFuZGFibGVcclxuICAgICAgZXhwYW5kZWQ9e2V4cGFuZGVkfVxyXG4gICAgICBvblRvZ2dsZUV4cGFuZD17b25Ub2dnbGVFeHBhbmR9XHJcbiAgICAgIGNhdGVnb3J5RGF0YT17Zm9ybWF0dGVkQ2F0ZWdvcnlEYXRhfVxyXG4gICAgICBvbkNhdGVnb3J5UHJlc3M9e29uQ2F0ZWdvcnlQcmVzc31cclxuICAgIC8+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFZvY2FidWxhcnlQcm9ncmVzczsiXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsSUFBQUEsYUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsZ0JBQUEsR0FBQUQsT0FB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