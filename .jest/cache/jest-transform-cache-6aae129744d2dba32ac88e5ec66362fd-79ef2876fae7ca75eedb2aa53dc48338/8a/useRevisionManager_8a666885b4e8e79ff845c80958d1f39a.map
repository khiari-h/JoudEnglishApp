{"version":3,"names":["_react","require","_asyncStorage","_interopRequireDefault","_arrayUtils","REVISION_CONFIG","TRIGGER_INTERVAL","QUESTIONS_COUNT","STORAGE_KEY","useRevisionManager","_useState","useState","_useState2","_slicedToArray2","default","totalWordsLearned","setTotalWordsLearned","_useState3","_useState4","nextRevisionAt","setNextRevisionAt","_useState5","_useState6","lastRevisionWords","setLastRevisionWords","_useState7","_useState8","revisionHistory","setRevisionHistory","_useState9","_useState0","isRevisionDisabled","setIsRevisionDisabled","_useState1","_useState10","isLoading","setIsLoading","lastCalculationRef","useRef","loadRevisionData","_ref","_asyncToGenerator2","stored","AsyncStorage","getItem","data","JSON","parse","error","console","warn","apply","arguments","useEffect","saveRevisionData","useCallback","lastUpdate","Date","now","setItem","stringify","calculateTotalWords","current","total","levels","modes","level","mode","completedWords","Object","values","reduce","acc","words","Array","isArray","length","getAllLearnedWords","allWords","_loop","_loop2","entries","forEach","_ref5","_ref6","categoryIndex","word","push","assign","fromLevel","fromMode","parseInt","translation","timestamp","selectRevisionWords","count","undefined","lastWords","Set","map","w","availableWords","filter","has","poolWords","sortedByAge","sort","a","b","aTime","getTime","bTime","oldCount","Math","floor","randomCount","oldWords","slice","remainingWords","randomWords","shuffleArray","selectedWords","concat","_toConsumableArray2","shouldShowRevision","handleRevisionChoice","_ref8","choice","action","questionsCount","newTarget50","nextAt","newTarget100","_x","markRevisionCompleted","score","revisionRecord","wordsCount","percentage","round","totalWordsAtTime","prev","nextTarget","enableRevisions","interval","setInterval","clearInterval","getRevisionStats","totalRevisions","averageScore","lastRevision","streak","sum","r","i","config","_default","exports"],"sources":["useRevisionManager.js"],"sourcesContent":["// src/hooks/useRevisionManager.js - SYSTÈME INTELLIGENT SIMPLE\r\nimport { useState, useEffect, useCallback, useRef } from 'react';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nimport { shuffleArray } from '../utils/arrayUtils';\r\n\r\nconst REVISION_CONFIG = {\r\n  TRIGGER_INTERVAL: 50,    // Tous les 50 mots\r\n  QUESTIONS_COUNT: 10,     // Toujours 10 questions\r\n  STORAGE_KEY: 'revision_manager_data'\r\n};\r\n\r\nconst useRevisionManager = () => {\r\n  // ========== ÉTATS ==========\r\n  const [totalWordsLearned, setTotalWordsLearned] = useState(0);\r\n  const [nextRevisionAt, setNextRevisionAt] = useState(50);\r\n  const [lastRevisionWords, setLastRevisionWords] = useState([]);\r\n  const [revisionHistory, setRevisionHistory] = useState([]);\r\n  const [isRevisionDisabled, setIsRevisionDisabled] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  \r\n  // Ref pour éviter les calculs trop fréquents\r\n  const lastCalculationRef = useRef(0);\r\n\r\n  const loadRevisionData = async () => {\r\n    try {\r\n      const stored = await AsyncStorage.getItem(REVISION_CONFIG.STORAGE_KEY);\r\n      if (stored) {\r\n        const data = JSON.parse(stored);\r\n        setNextRevisionAt(data.nextRevisionAt || 50);\r\n        setLastRevisionWords(data.lastRevisionWords || []);\r\n        setRevisionHistory(data.revisionHistory || []);\r\n        setIsRevisionDisabled(data.isRevisionDisabled || false);\r\n      }\r\n    } catch (error) {\r\n      console.warn('Erreur chargement données révision:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // ========== CHARGEMENT INITIAL ==========\r\n  useEffect(() => {\r\n    loadRevisionData();\r\n  }, []);\r\n\r\n  // ========== SAUVEGARDE AUTO ==========\r\n  const saveRevisionData = useCallback(async () => {\r\n    if (isLoading) return;\r\n    \r\n    try {\r\n      const data = {\r\n        nextRevisionAt,\r\n        lastRevisionWords,\r\n        revisionHistory,\r\n        isRevisionDisabled,\r\n        lastUpdate: Date.now()\r\n      };\r\n      await AsyncStorage.setItem(REVISION_CONFIG.STORAGE_KEY, JSON.stringify(data));\r\n    } catch (error) {\r\n      console.warn('Erreur sauvegarde données révision:', error);\r\n    }\r\n  }, [nextRevisionAt, lastRevisionWords, revisionHistory, isRevisionDisabled, isLoading]);\r\n\r\n  useEffect(() => {\r\n    saveRevisionData();\r\n  }, [saveRevisionData]);\r\n\r\n  // ========== COMPTAGE DES MOTS APPRIS ==========\r\n  const calculateTotalWords = useCallback(async () => {\r\n    const now = Date.now();\r\n    if (now - lastCalculationRef.current < 2000) return; // Debounce 2s\r\n    lastCalculationRef.current = now;\r\n\r\n    try {\r\n      let total = 0;\r\n      const levels = ['1', '2', '3', '4', '5', '6', 'bonus'];\r\n      const modes = ['classic', 'fast'];\r\n\r\n      for (const level of levels) {\r\n        for (const mode of modes) {\r\n          const stored = await AsyncStorage.getItem(`vocabulary_${level}_${mode}`);\r\n          if (stored) {\r\n            const data = JSON.parse(stored);\r\n            const completedWords = data.completedWords || {};\r\n            \r\n            // Compter tous les mots appris\r\n            total += Object.values(completedWords).reduce((acc, words) => {\r\n              if (Array.isArray(words)) {\r\n                return acc + words.length;\r\n              }\r\n              return acc;\r\n            }, 0);\r\n          }\r\n        }\r\n      }\r\n\r\n      setTotalWordsLearned(total);\r\n    } catch (error) {\r\n      console.warn('Erreur calcul mots appris:', error);\r\n    }\r\n  }, []);\r\n\r\n  // ========== RÉCUPÉRATION DES MOTS POUR RÉVISION ==========\r\n  const getAllLearnedWords = useCallback(async () => {\r\n    try {\r\n      const allWords = [];\r\n      const levels = ['1', '2', '3', '4', '5', '6', 'bonus'];\r\n      const modes = ['classic', 'fast'];\r\n\r\n      for (const level of levels) {\r\n        for (const mode of modes) {\r\n          const stored = await AsyncStorage.getItem(`vocabulary_${level}_${mode}`);\r\n          if (stored) {\r\n            const data = JSON.parse(stored);\r\n            const completedWords = data.completedWords || {};\r\n            \r\n            // Récupérer tous les mots avec métadonnées\r\n            Object.entries(completedWords).forEach(([categoryIndex, words]) => {\r\n              if (Array.isArray(words)) {\r\n                words.forEach(word => {\r\n                  // Support ancien et nouveau format\r\n                  if (typeof word === 'object' && word.word) {\r\n                    allWords.push({\r\n                      ...word,\r\n                      fromLevel: level,\r\n                      fromMode: mode,\r\n                      categoryIndex: parseInt(categoryIndex)\r\n                    });\r\n                  } else if (typeof word === 'string') {\r\n                    // Ancien format - on fait de notre mieux\r\n                    allWords.push({\r\n                      word,\r\n                      translation: '?', // Sera récupéré depuis les données originales\r\n                      fromLevel: level,\r\n                      fromMode: mode,\r\n                      categoryIndex: parseInt(categoryIndex),\r\n                      timestamp: null\r\n                    });\r\n                  }\r\n                });\r\n              }\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      return allWords;\r\n    } catch (error) {\r\n      console.warn('Erreur récupération mots appris:', error);\r\n      return [];\r\n    }\r\n  }, []);\r\n\r\n  // ========== ALGORITHME ANTI-RÉPÉTITION ==========\r\n  const selectRevisionWords = useCallback(async (count = REVISION_CONFIG.QUESTIONS_COUNT) => {\r\n    const allWords = await getAllLearnedWords();\r\n    \r\n    if (allWords.length === 0) return [];\r\n    if (allWords.length <= count) return allWords;\r\n\r\n    // Filtrer les mots de la dernière révision (éviter répétition immédiate)\r\n    const lastWords = new Set(lastRevisionWords.map(w => w.word));\r\n    const availableWords = allWords.filter(word => !lastWords.has(word.word));\r\n    \r\n    // Si pas assez de mots différents, on prend quand même dans tous\r\n    const poolWords = availableWords.length >= count ? availableWords : allWords;\r\n    \r\n    // Algorithme de sélection intelligent :\r\n    // 1. Prioriser les mots les plus anciens (non révisés récemment)\r\n    // 2. Mélanger les niveaux et modes\r\n    // 3. Éviter trop de mots du même niveau d'affilée\r\n\r\n    // Trier par âge (plus ancien en premier)\r\n    const sortedByAge = poolWords.sort((a, b) => {\r\n      const aTime = a.timestamp ? new Date(a.timestamp).getTime() : 0;\r\n      const bTime = b.timestamp ? new Date(b.timestamp).getTime() : 0;\r\n      return aTime - bTime;\r\n    });\r\n\r\n    // Prendre une mix : 60% des plus anciens + 40% aléatoire\r\n    const oldCount = Math.floor(count * 0.6);\r\n    const randomCount = count - oldCount;\r\n    \r\n    const oldWords = sortedByAge.slice(0, oldCount);\r\n    const remainingWords = sortedByAge.slice(oldCount);\r\n    const randomWords = shuffleArray(remainingWords).slice(0, randomCount);\r\n\r\n    const selectedWords = shuffleArray([...oldWords, ...randomWords]); // Mélanger le résultat final\r\n\r\n    return selectedWords.slice(0, count);\r\n  }, [lastRevisionWords, getAllLearnedWords]);\r\n\r\n  // ========== LOGIQUE DE DÉCLENCHEMENT ==========\r\n  const shouldShowRevision = !isRevisionDisabled && \r\n                           totalWordsLearned >= nextRevisionAt && \r\n                           totalWordsLearned > 0;\r\n\r\n  // ========== HANDLERS DU POPUP ==========\r\n  const handleRevisionChoice = useCallback(async (choice) => {\r\n    switch (choice) {\r\n      case 'now':\r\n        // La navigation sera gérée par le composant parent\r\n        return {\r\n          action: 'navigate',\r\n          words: await selectRevisionWords(),\r\n          questionsCount: REVISION_CONFIG.QUESTIONS_COUNT\r\n        };\r\n        \r\n      case 'later_50': {\r\n        const newTarget50 = totalWordsLearned + 50;\r\n        setNextRevisionAt(newTarget50);\r\n        return { action: 'postponed', nextAt: newTarget50 };\r\n      }\r\n      case 'later_100': {\r\n        const newTarget100 = totalWordsLearned + 100;\r\n        setNextRevisionAt(newTarget100);\r\n        return { action: 'postponed', nextAt: newTarget100 };\r\n      }\r\n        \r\n      case 'disable':\r\n        setIsRevisionDisabled(true);\r\n        return { action: 'disabled' };\r\n        \r\n      default:\r\n        return { action: 'cancelled' };\r\n    }\r\n  }, [totalWordsLearned, selectRevisionWords]);\r\n\r\n  // ========== COMPLETION D'UNE RÉVISION ==========\r\n  const markRevisionCompleted = useCallback((completedWords, score, questionsCount) => {\r\n    try {\r\n      // Enregistrer l'historique\r\n      const revisionRecord = {\r\n        timestamp: Date.now(),\r\n        wordsCount: completedWords.length,\r\n        score,\r\n        questionsCount,\r\n        percentage: Math.round((score / questionsCount) * 100),\r\n        totalWordsAtTime: totalWordsLearned\r\n      };\r\n\r\n      setRevisionHistory(prev => [...prev, revisionRecord]);\r\n      setLastRevisionWords(completedWords);\r\n      \r\n      // Programmer la prochaine révision\r\n      const nextTarget = totalWordsLearned + REVISION_CONFIG.TRIGGER_INTERVAL;\r\n      setNextRevisionAt(nextTarget);\r\n\r\n    } catch (error) {\r\n      console.warn('Erreur enregistrement révision:', error);\r\n    }\r\n  }, [totalWordsLearned]);\r\n\r\n  // ========== RÉACTIVATION DES RÉVISIONS ==========\r\n  const enableRevisions = useCallback(() => {\r\n    setIsRevisionDisabled(false);\r\n    const nextTarget = totalWordsLearned + REVISION_CONFIG.TRIGGER_INTERVAL;\r\n    setNextRevisionAt(nextTarget);\r\n  }, [totalWordsLearned]);\r\n\r\n  // ========== CALCUL AUTO DU TOTAL ==========\r\n  useEffect(() => {\r\n    calculateTotalWords();\r\n    \r\n    // Recalculer périodiquement\r\n    const interval = setInterval(calculateTotalWords, 10000); // Toutes les 10s\r\n    return () => clearInterval(interval);\r\n  }, [calculateTotalWords]);\r\n\r\n  // ========== STATISTIQUES ==========\r\n  const getRevisionStats = useCallback(() => {\r\n    if (revisionHistory.length === 0) {\r\n      return {\r\n        totalRevisions: 0,\r\n        averageScore: 0,\r\n        lastRevision: null,\r\n        streak: 0\r\n      };\r\n    }\r\n\r\n    const totalRevisions = revisionHistory.length;\r\n    const averageScore = revisionHistory.reduce((sum, r) => sum + r.percentage, 0) / totalRevisions;\r\n    const lastRevision = revisionHistory[revisionHistory.length - 1];\r\n    \r\n    // Calculer le streak (révisions récentes avec >70%)\r\n    let streak = 0;\r\n    for (let i = revisionHistory.length - 1; i >= 0; i--) {\r\n      if (revisionHistory[i].percentage >= 70) {\r\n        streak++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return {\r\n      totalRevisions,\r\n      averageScore: Math.round(averageScore),\r\n      lastRevision,\r\n      streak\r\n    };\r\n  }, [revisionHistory]);\r\n\r\n  // ========== RETURN ==========\r\n  return {\r\n    // État\r\n    totalWordsLearned,\r\n    nextRevisionAt,\r\n    shouldShowRevision,\r\n    isRevisionDisabled,\r\n    isLoading,\r\n    \r\n    // Actions\r\n    handleRevisionChoice,\r\n    markRevisionCompleted,\r\n    enableRevisions,\r\n    calculateTotalWords,\r\n    selectRevisionWords,\r\n    \r\n    // Utilitaires\r\n    getRevisionStats,\r\n    \r\n    // Configuration\r\n    config: REVISION_CONFIG\r\n  };\r\n};\r\n\r\nexport default useRevisionManager;"],"mappings":"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","ignoreList":[]}