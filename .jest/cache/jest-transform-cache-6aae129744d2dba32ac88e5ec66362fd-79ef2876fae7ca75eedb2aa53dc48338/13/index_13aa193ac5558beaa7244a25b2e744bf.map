{"version":3,"names":["_reactNative","require","_native","_expoRouter","_react","_propTypes","_interopRequireDefault","_Container","_interopRequireWildcard","_VocabularyHeader","_VocabularyCategorySelector","_VocabularyProgress","_VocabularyWordSection","_VocabularyNavigation","_useVocabulary2","_useLastActivity2","_vocabularyDataHelper","_style","_jsxRuntime","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","VocabularyExercise","_ref","route","_ref2","params","level","mode","navigation","useNavigation","styles","createStyles","_useLastActivity","useLastActivity","saveActivity","finalMode","isBonusLevel","levelColor","getLevelColor","_useState","useState","_useState2","_slicedToArray2","vocabularyData","setVocabularyData","useEffect","isMounted","load","_ref3","_asyncToGenerator2","data","loadVocabularyData","apply","arguments","_useVocabulary","useVocabulary","categoryIndex","wordIndex","showTranslation","completedWords","loaded","showDetailedProgress","currentWord","currentCategory","changeCategory","toggleTranslation","toggleDetailedProgress","handleNext","handlePrevious","canGoToPrevious","isLastWordInExercise","display","saveData","totalWords","categories","Array","isArray","reduce","total","cat","_cat$words","words","length","exercises","ex","_ex$words","activityData","title","type","metadata","word","category","name","_cat$words2","_ex$words2","handleBackPress","useCallback","router","push","pathname","handleCategoryChange","index","handleCategoryProgressPress","handleToggleProgressDetails","handleNextWord","result","completed","goBack","handlePreviousWord","jsx","safeArea","safeAreaEdges","CONTAINER_SAFE_EDGES","ALL","backgroundColor","statusBarStyle","children","View","style","loadingContainer","ActivityIndicator","testID","size","color","jsxs","withScrollView","withPadding","scrollViewProps","showsVerticalScrollIndicator","contentContainerStyle","scrollContent","onBackPress","expanded","onToggleExpand","onCategoryPress","selectedIndex","onSelectCategory","wordCounter","onToggleTranslation","onNext","onPrevious","canGoPrevious","isLast","_default","exports","propTypes","PropTypes","shape","string","isRequired"],"sources":["index.js"],"sourcesContent":["// VocabularyExercise/index.js - BOUCLE INFINIE CORRIGÉE\r\n\r\nimport { View, ActivityIndicator } from \"react-native\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport { router } from \"expo-router\";\r\nimport { useEffect, useCallback, useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Container, { CONTAINER_SAFE_EDGES } from \"../../../components/layout/Container\";\r\nimport VocabularyHeader from \"./VocabularyHeader\";\r\nimport VocabularyCategorySelector from \"./VocabularyCategorySelector\";\r\nimport VocabularyProgress from \"./VocabularyProgress\";\r\nimport VocabularyWordSection from \"./VocabularyWordSection\";\r\nimport VocabularyNavigation from \"./VocabularyNavigation\";\r\n\r\nimport useVocabulary from \"./hooks/useVocabulary\";\r\nimport useLastActivity from \"../../../hooks/useLastActivity\";\r\nimport { isBonusLevel, getLevelColor, getVocabularyData, loadVocabularyData } from \"../../../utils/vocabulary/vocabularyDataHelper\";\r\nimport createStyles from \"./style\";\r\n\r\nconst VocabularyExercise = ({ route }) => {\r\n  const { level, mode } = route.params || {};\r\n  const navigation = useNavigation();\r\n  const styles = createStyles();\r\n  const { saveActivity } = useLastActivity();\r\n\r\n  // Data\r\n  const finalMode = mode || (isBonusLevel(level) ? \"fast\" : \"classic\");\r\n  const levelColor = getLevelColor(level);\r\n  const [vocabularyData, setVocabularyData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    const load = async () => {\r\n      const data = await loadVocabularyData(level, finalMode);\r\n      if (isMounted) setVocabularyData(data);\r\n    };\r\n    load();\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, [level, finalMode]);\r\n\r\n  // Hook unifié\r\n  const {\r\n    categoryIndex,\r\n    wordIndex,\r\n    showTranslation,\r\n    completedWords,\r\n    loaded,\r\n    showDetailedProgress,\r\n    currentWord,\r\n    currentCategory,\r\n    changeCategory,\r\n    toggleTranslation,\r\n    toggleDetailedProgress,\r\n    handleNext,\r\n    handlePrevious,\r\n    canGoToPrevious,\r\n    isLastWordInExercise,\r\n    display,\r\n    saveData, // Ajouté ici\r\n  } = useVocabulary(vocabularyData, level, finalMode);\r\n\r\n  // =================== SAUVEGARDE ACTIVITÉ SIMPLIFIÉE ===================\r\n  \r\n  useEffect(() => {\r\n    // ✅ CONDITION SIMPLIFIÉE pour éviter boucle infinie\r\n    if (!loaded || !vocabularyData || !currentWord) return;\r\n\r\n    // ✅ DÉPENDANCES LIMITÉES - seulement wordIndex change\r\n    let totalWords = 15; // fallback\r\n    \r\n    if (vocabularyData.categories && Array.isArray(vocabularyData.categories)) {\r\n      totalWords = vocabularyData.categories.reduce((total, cat) => total + (cat.words?.length || 0), 0);\r\n    } else if (vocabularyData.exercises && Array.isArray(vocabularyData.exercises)) {\r\n      totalWords = vocabularyData.exercises.reduce((total, ex) => total + (ex.words?.length || 0), 0);\r\n    } else if (vocabularyData.words && Array.isArray(vocabularyData.words)) {\r\n      totalWords = vocabularyData.words.length;\r\n    }\r\n\r\n    const activityData = {\r\n      title: `Vocabulaire ${finalMode === \"fast\" ? \"Fast\" : \"\"}`,\r\n      level,\r\n      type: \"vocabulary\",\r\n      mode: finalMode,\r\n      metadata: {\r\n        word: wordIndex, // ✅ Index pour progression (0-based)\r\n        totalWords,\r\n        category: currentCategory?.name || \"Général\",\r\n        categoryIndex,\r\n        wordIndex\r\n      }\r\n    };\r\n\r\n    saveActivity(activityData);\r\n  }, [wordIndex]); // ✅ SEULEMENT wordIndex - plus de boucle !\r\n\r\n  // Appel initial pour enregistrer l'activité dès que les données sont prêtes\r\n  useEffect(() => {\r\n    if (!loaded || !vocabularyData || !currentWord) return;\r\n\r\n    let totalWords = 15;\r\n    if (vocabularyData.categories && Array.isArray(vocabularyData.categories)) {\r\n      totalWords = vocabularyData.categories.reduce((total, cat) => total + (cat.words?.length || 0), 0);\r\n    } else if (vocabularyData.exercises && Array.isArray(vocabularyData.exercises)) {\r\n      totalWords = vocabularyData.exercises.reduce((total, ex) => total + (ex.words?.length || 0), 0);\r\n    } else if (vocabularyData.words && Array.isArray(vocabularyData.words)) {\r\n      totalWords = vocabularyData.words.length;\r\n    }\r\n\r\n    const activityData = {\r\n      title: `Vocabulaire ${finalMode === \"fast\" ? \"Fast\" : \"\"}`,\r\n      level,\r\n      type: \"vocabulary\",\r\n      mode: finalMode,\r\n      metadata: {\r\n        word: wordIndex,\r\n        totalWords,\r\n        category: currentCategory?.name || \"Général\",\r\n        categoryIndex,\r\n        wordIndex,\r\n      },\r\n    };\r\n\r\n    saveActivity(activityData);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [loaded, vocabularyData]);\r\n\r\n  // Handlers\r\n  const handleBackPress = useCallback(() => {\r\n    router.push({\r\n      pathname: \"/tabs/exerciseSelection\",\r\n      params: { level }\r\n    });\r\n  }, [level]);\r\n\r\n  const handleCategoryChange = useCallback((index) => changeCategory(index), [changeCategory]);\r\n  const handleCategoryProgressPress = useCallback((index) => changeCategory(index), [changeCategory]);\r\n  const handleToggleProgressDetails = useCallback(() => toggleDetailedProgress(), [toggleDetailedProgress]);\r\n\r\n  const handleNextWord = useCallback(async () => {\r\n    const result = handleNext();\r\n    // Attendre la sauvegarde avant de naviguer\r\n    if (typeof saveData === 'function') {\r\n      await saveData();\r\n    }\r\n    if (result.completed) {\r\n      navigation.goBack();\r\n    }\r\n  }, [handleNext, navigation, saveData]);\r\n\r\n  const handlePreviousWord = useCallback(() => handlePrevious(), [handlePrevious]);\r\n\r\n  // Loading state\r\n  if (!loaded || !vocabularyData) {\r\n    return (\r\n      <Container\r\n        safeArea\r\n        safeAreaEdges={CONTAINER_SAFE_EDGES.ALL}\r\n        backgroundColor=\"#f8fafc\"\r\n        statusBarStyle=\"dark-content\"\r\n      >\r\n        <View style={styles.loadingContainer}>\r\n          <ActivityIndicator testID=\"activity-indicator\" size=\"large\" color={levelColor} />\r\n        </View>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container\r\n      safeArea\r\n      safeAreaEdges={CONTAINER_SAFE_EDGES.ALL}\r\n      withScrollView\r\n      backgroundColor=\"#f8fafc\"\r\n      statusBarStyle=\"dark-content\"\r\n      withPadding={false}\r\n      scrollViewProps={{\r\n        showsVerticalScrollIndicator: false,\r\n        contentContainerStyle: styles.scrollContent,\r\n      }}\r\n    >\r\n      <VocabularyHeader\r\n        level={level}\r\n        mode={finalMode}\r\n        onBackPress={handleBackPress}\r\n      />\r\n\r\n      <VocabularyProgress\r\n        vocabularyData={vocabularyData}\r\n        completedWords={completedWords}\r\n        levelColor={levelColor}\r\n        expanded={showDetailedProgress}\r\n        onToggleExpand={handleToggleProgressDetails}\r\n        onCategoryPress={handleCategoryProgressPress}\r\n      />\r\n\r\n      <VocabularyCategorySelector\r\n        categories={display.categories}\r\n        selectedIndex={categoryIndex}\r\n        onSelectCategory={handleCategoryChange}\r\n        levelColor={levelColor}\r\n      />\r\n\r\n      <VocabularyWordSection\r\n        currentWord={currentWord}\r\n        wordCounter={display.wordCounter}\r\n        mode={finalMode}\r\n        level={level}\r\n        levelColor={levelColor}\r\n        showTranslation={showTranslation}\r\n        onToggleTranslation={toggleTranslation}\r\n      />\r\n\r\n      <VocabularyNavigation\r\n        onNext={handleNextWord}\r\n        onPrevious={handlePreviousWord}\r\n        canGoPrevious={canGoToPrevious}\r\n        isLast={isLastWordInExercise}\r\n        levelColor={levelColor}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default VocabularyExercise;\r\n\r\n// ✅ Ajout de la validation des props\r\nVocabularyExercise.propTypes = {\r\n  route: PropTypes.shape({\r\n    params: PropTypes.shape({\r\n      level: PropTypes.string,\r\n      mode: PropTypes.string,\r\n    }),\r\n  }).isRequired,\r\n};"],"mappings":"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","ignoreList":[]}