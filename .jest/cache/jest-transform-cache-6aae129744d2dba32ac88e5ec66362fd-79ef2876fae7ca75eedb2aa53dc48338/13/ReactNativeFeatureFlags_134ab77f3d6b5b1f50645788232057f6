85a79de37fe0f72edbdb3b07e2bd3ce8
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTurboModuleInterop = exports.useStateAlignmentMechanism = exports.useRuntimeShadowNodeReferenceUpdateOnLayout = exports.useRuntimeShadowNodeReferenceUpdate = exports.useRefsForTextInputState = exports.usePassiveEffectsForAnimations = exports.useOptimizedEventBatchingOnAndroid = exports.useOptimisedViewPreallocationOnAndroid = exports.useNewReactImageViewBackgroundDrawing = exports.useNativeViewConfigsInBridgelessMode = exports.useModernRuntimeScheduler = exports.useImmediateExecutorInAndroidBridgeless = exports.useFabricInterop = exports.traceTurboModulePromiseRejectionsOnAndroid = exports.shouldUseSetNativePropsInNativeAnimationsInFabric = exports.shouldUseSetNativePropsInFabric = exports.shouldUseRemoveClippedSubviewsAsDefaultOnIOS = exports.shouldUseAnimatedObjectForTransform = exports.shouldSkipStateUpdatesForLoopingAnimations = exports.setAndroidLayoutDirection = exports.override = exports.loadVectorDrawablesOnImages = exports.lazyAnimationCallbacks = exports.jsOnlyTestFlag = exports.isLayoutAnimationEnabled = exports.initEagerTurboModulesOnNativeModulesQueueAndroid = exports.fuseboxEnabledRelease = exports.fuseboxEnabledDebug = exports.forceBatchingMountItemsOnAndroid = exports.fixMountingCoordinatorReportedPendingTransactionsOnAndroid = exports.fixMissedFabricStateUpdatesOnAndroid = exports.fixMappingOfEventPrioritiesBetweenFabricAndReact = exports.fixIncorrectScrollViewStateUpdateOnAndroid = exports.fetchImagesInViewPreallocation = exports.excludeYogaFromRawProps = exports.enableViewRecycling = exports.enableUIConsistency = exports.enableSynchronousStateUpdates = exports.enableReportEventPaintTime = exports.enablePropsUpdateReconciliationAndroid = exports.enableOptimisedVirtualizedCells = exports.enableMicrotasks = exports.enableLongTaskAPI = exports.enableLayoutAnimationsOnIOS = exports.enableIOSViewClipToPaddingBox = exports.enableGranularShadowTreeStateReconciliation = exports.enableFabricRendererExclusively = exports.enableFabricLogs = exports.enableEventEmitterRetentionDuringGesturesOnAndroid = exports.enableEagerRootViewAttachment = exports.enableCleanTextInputYogaNode = exports.enableBackgroundStyleApplicator = exports.enableAndroidMixBlendModeProp = exports.enableAlignItemsBaselineOnFabricIOS = exports.enableAccessToHostTreeInFabric = exports.destroyFabricSurfacesInReactInstanceManager = exports.completeReactInstanceCreationOnBgThreadOnAndroid = exports.commonTestFlag = exports.batchRenderingUpdatesInEventLoop = exports.animatedShouldUseSingleOp = exports.animatedShouldDebounceQueueFlush = void 0;
var _ReactNativeFeatureFlagsBase = require("./ReactNativeFeatureFlagsBase");
var jsOnlyTestFlag = exports.jsOnlyTestFlag = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('jsOnlyTestFlag', false);
var animatedShouldDebounceQueueFlush = exports.animatedShouldDebounceQueueFlush = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('animatedShouldDebounceQueueFlush', false);
var animatedShouldUseSingleOp = exports.animatedShouldUseSingleOp = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('animatedShouldUseSingleOp', false);
var enableAccessToHostTreeInFabric = exports.enableAccessToHostTreeInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableAccessToHostTreeInFabric', false);
var enableOptimisedVirtualizedCells = exports.enableOptimisedVirtualizedCells = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableOptimisedVirtualizedCells', false);
var isLayoutAnimationEnabled = exports.isLayoutAnimationEnabled = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('isLayoutAnimationEnabled', true);
var shouldSkipStateUpdatesForLoopingAnimations = exports.shouldSkipStateUpdatesForLoopingAnimations = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldSkipStateUpdatesForLoopingAnimations', false);
var shouldUseAnimatedObjectForTransform = exports.shouldUseAnimatedObjectForTransform = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseAnimatedObjectForTransform', false);
var shouldUseRemoveClippedSubviewsAsDefaultOnIOS = exports.shouldUseRemoveClippedSubviewsAsDefaultOnIOS = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseRemoveClippedSubviewsAsDefaultOnIOS', false);
var shouldUseSetNativePropsInFabric = exports.shouldUseSetNativePropsInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseSetNativePropsInFabric', true);
var shouldUseSetNativePropsInNativeAnimationsInFabric = exports.shouldUseSetNativePropsInNativeAnimationsInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseSetNativePropsInNativeAnimationsInFabric', false);
var usePassiveEffectsForAnimations = exports.usePassiveEffectsForAnimations = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('usePassiveEffectsForAnimations', false);
var useRefsForTextInputState = exports.useRefsForTextInputState = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('useRefsForTextInputState', false);
var commonTestFlag = exports.commonTestFlag = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('commonTestFlag', false);
var batchRenderingUpdatesInEventLoop = exports.batchRenderingUpdatesInEventLoop = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('batchRenderingUpdatesInEventLoop', false);
var completeReactInstanceCreationOnBgThreadOnAndroid = exports.completeReactInstanceCreationOnBgThreadOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('completeReactInstanceCreationOnBgThreadOnAndroid', false);
var destroyFabricSurfacesInReactInstanceManager = exports.destroyFabricSurfacesInReactInstanceManager = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('destroyFabricSurfacesInReactInstanceManager', false);
var enableAlignItemsBaselineOnFabricIOS = exports.enableAlignItemsBaselineOnFabricIOS = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableAlignItemsBaselineOnFabricIOS', true);
var enableAndroidMixBlendModeProp = exports.enableAndroidMixBlendModeProp = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableAndroidMixBlendModeProp', false);
var enableBackgroundStyleApplicator = exports.enableBackgroundStyleApplicator = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableBackgroundStyleApplicator', true);
var enableCleanTextInputYogaNode = exports.enableCleanTextInputYogaNode = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableCleanTextInputYogaNode', false);
var enableEagerRootViewAttachment = exports.enableEagerRootViewAttachment = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableEagerRootViewAttachment', false);
var enableEventEmitterRetentionDuringGesturesOnAndroid = exports.enableEventEmitterRetentionDuringGesturesOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableEventEmitterRetentionDuringGesturesOnAndroid', false);
var enableFabricLogs = exports.enableFabricLogs = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableFabricLogs', false);
var enableFabricRendererExclusively = exports.enableFabricRendererExclusively = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableFabricRendererExclusively', false);
var enableGranularShadowTreeStateReconciliation = exports.enableGranularShadowTreeStateReconciliation = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableGranularShadowTreeStateReconciliation', false);
var enableIOSViewClipToPaddingBox = exports.enableIOSViewClipToPaddingBox = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableIOSViewClipToPaddingBox', false);
var enableLayoutAnimationsOnIOS = exports.enableLayoutAnimationsOnIOS = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableLayoutAnimationsOnIOS', true);
var enableLongTaskAPI = exports.enableLongTaskAPI = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableLongTaskAPI', false);
var enableMicrotasks = exports.enableMicrotasks = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableMicrotasks', false);
var enablePropsUpdateReconciliationAndroid = exports.enablePropsUpdateReconciliationAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enablePropsUpdateReconciliationAndroid', false);
var enableReportEventPaintTime = exports.enableReportEventPaintTime = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableReportEventPaintTime', false);
var enableSynchronousStateUpdates = exports.enableSynchronousStateUpdates = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableSynchronousStateUpdates', false);
var enableUIConsistency = exports.enableUIConsistency = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableUIConsistency', false);
var enableViewRecycling = exports.enableViewRecycling = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableViewRecycling', false);
var excludeYogaFromRawProps = exports.excludeYogaFromRawProps = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('excludeYogaFromRawProps', false);
var fetchImagesInViewPreallocation = exports.fetchImagesInViewPreallocation = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fetchImagesInViewPreallocation', false);
var fixIncorrectScrollViewStateUpdateOnAndroid = exports.fixIncorrectScrollViewStateUpdateOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixIncorrectScrollViewStateUpdateOnAndroid', false);
var fixMappingOfEventPrioritiesBetweenFabricAndReact = exports.fixMappingOfEventPrioritiesBetweenFabricAndReact = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixMappingOfEventPrioritiesBetweenFabricAndReact', false);
var fixMissedFabricStateUpdatesOnAndroid = exports.fixMissedFabricStateUpdatesOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixMissedFabricStateUpdatesOnAndroid', false);
var fixMountingCoordinatorReportedPendingTransactionsOnAndroid = exports.fixMountingCoordinatorReportedPendingTransactionsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixMountingCoordinatorReportedPendingTransactionsOnAndroid', false);
var forceBatchingMountItemsOnAndroid = exports.forceBatchingMountItemsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('forceBatchingMountItemsOnAndroid', false);
var fuseboxEnabledDebug = exports.fuseboxEnabledDebug = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fuseboxEnabledDebug', true);
var fuseboxEnabledRelease = exports.fuseboxEnabledRelease = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fuseboxEnabledRelease', false);
var initEagerTurboModulesOnNativeModulesQueueAndroid = exports.initEagerTurboModulesOnNativeModulesQueueAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('initEagerTurboModulesOnNativeModulesQueueAndroid', false);
var lazyAnimationCallbacks = exports.lazyAnimationCallbacks = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('lazyAnimationCallbacks', false);
var loadVectorDrawablesOnImages = exports.loadVectorDrawablesOnImages = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('loadVectorDrawablesOnImages', false);
var setAndroidLayoutDirection = exports.setAndroidLayoutDirection = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('setAndroidLayoutDirection', false);
var traceTurboModulePromiseRejectionsOnAndroid = exports.traceTurboModulePromiseRejectionsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('traceTurboModulePromiseRejectionsOnAndroid', false);
var useFabricInterop = exports.useFabricInterop = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useFabricInterop', false);
var useImmediateExecutorInAndroidBridgeless = exports.useImmediateExecutorInAndroidBridgeless = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useImmediateExecutorInAndroidBridgeless', false);
var useModernRuntimeScheduler = exports.useModernRuntimeScheduler = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useModernRuntimeScheduler', false);
var useNativeViewConfigsInBridgelessMode = exports.useNativeViewConfigsInBridgelessMode = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useNativeViewConfigsInBridgelessMode', false);
var useNewReactImageViewBackgroundDrawing = exports.useNewReactImageViewBackgroundDrawing = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useNewReactImageViewBackgroundDrawing', false);
var useOptimisedViewPreallocationOnAndroid = exports.useOptimisedViewPreallocationOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useOptimisedViewPreallocationOnAndroid', false);
var useOptimizedEventBatchingOnAndroid = exports.useOptimizedEventBatchingOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useOptimizedEventBatchingOnAndroid', false);
var useRuntimeShadowNodeReferenceUpdate = exports.useRuntimeShadowNodeReferenceUpdate = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useRuntimeShadowNodeReferenceUpdate', false);
var useRuntimeShadowNodeReferenceUpdateOnLayout = exports.useRuntimeShadowNodeReferenceUpdateOnLayout = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useRuntimeShadowNodeReferenceUpdateOnLayout', false);
var useStateAlignmentMechanism = exports.useStateAlignmentMechanism = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useStateAlignmentMechanism', false);
var useTurboModuleInterop = exports.useTurboModuleInterop = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useTurboModuleInterop', false);
var override = exports.override = _ReactNativeFeatureFlagsBase.setOverrides;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,