de36d3750b8b4b22127058bf285e433c
function cov_1t18450u17() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\data\\spelling\\3\\spellingRules3.js";
  var hash = "778b0e3e0f4126041a60c96fb0953105130fb551";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\data\\spelling\\3\\spellingRules3.js",
    statementMap: {},
    fnMap: {},
    branchMap: {},
    s: {},
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "778b0e3e0f4126041a60c96fb0953105130fb551"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_1t18450u17 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1t18450u17();
export default {
  title: "B1 Advanced Spelling Rules & Multi-syllable Patterns",
  description: "Learn complex spelling rules and advanced patterns for English at B1 intermediate level",
  exercises: [{
    type: "spelling_rule",
    rule: "Doubling rule: Double final consonant in stressed syllables before vowel suffixes",
    instruction: "Apply the rule: Add '-ing' to 'begin' (stress on second syllable)",
    correctAnswer: "beginning",
    hasHint: true,
    hint: "The stress is on 'gin', so double the 'n'.",
    explanation: "When stress is on the final syllable (be-GIN), double the consonant: begin → beginning, refer → referring."
  }, {
    type: "spelling_rule",
    rule: "Doubling rule: Don't double when stress is NOT on final syllable",
    instruction: "Apply the rule: Add '-ing' to 'develop' (stress on first syllable)",
    correctAnswer: "developing",
    hasHint: true,
    hint: "The stress is on 'DE-', so don't double the 'p'.",
    explanation: "When stress is NOT on final syllable (DE-velop), don't double: develop → developing, visit → visiting."
  }, {
    type: "spelling_rule",
    rule: "Doubling rule: British vs American differences",
    instruction: "Apply the British rule: Add '-ed' to 'travel'",
    correctAnswer: "travelled",
    hasHint: true,
    hint: "British spelling doubles the 'l' even when unstressed.",
    explanation: "British English doubles 'l': travel → travelled, model → modelled. American: traveled, modeled."
  }, {
    type: "spelling_rule",
    rule: "Doubling rule: Words ending in 'r' after single vowel",
    instruction: "Apply the rule: Add '-ing' to 'prefer' (stress on second syllable)",
    correctAnswer: "preferring",
    hasHint: true,
    hint: "Stress on 'fer' means double the 'r'.",
    explanation: "Stressed final syllable with single vowel + r: prefer → preferring, occur → occurring."
  }, {
    type: "spelling_rule",
    rule: "Doubling rule: No doubling after double vowels",
    instruction: "Apply the rule: Add '-ing' to 'appear' (double vowel 'ea')",
    correctAnswer: "appearing",
    hasHint: true,
    hint: "The double vowel 'ea' means no doubling needed.",
    explanation: "Don't double after double vowels: appear → appearing, repeat → repeating, reveal → revealing."
  }, {
    type: "spelling_rule",
    rule: "Doubling rule: Words ending in 'w', 'x', 'y' never double",
    instruction: "Apply the rule: Add '-ed' to 'enjoy'",
    correctAnswer: "enjoyed",
    hasHint: true,
    hint: "Words ending in 'w', 'x', 'y' never double the final letter.",
    explanation: "Never double w, x, y: enjoy → enjoyed, fix → fixed, show → showed."
  }, {
    type: "spelling_rule",
    rule: "Doubling rule: One-syllable words with long vowel sounds",
    instruction: "Apply the rule: Add '-ing' to 'dream' (long 'ea' sound)",
    correctAnswer: "dreaming",
    hasHint: true,
    hint: "Long vowel sounds don't require doubling.",
    explanation: "Long vowel sounds don't double: dream → dreaming, train → training, clean → cleaning."
  }, {
    type: "spelling_rule",
    rule: "Doubling rule: Two-syllable words ending in consonant + 'le'",
    instruction: "Apply the rule: Add '-ing' to 'handle'",
    correctAnswer: "handling",
    hasHint: true,
    hint: "Words ending in consonant + 'le' don't double.",
    explanation: "Consonant + 'le' endings don't double: handle → handling, simple → simpler, gentle → gentler."
  }, {
    type: "spelling_rule",
    rule: "Doubling rule: Compound words follow original word rules",
    instruction: "Apply the rule: Add '-ing' to 'understand'",
    correctAnswer: "understanding",
    hasHint: true,
    hint: "Treat compound words like the base word 'stand'.",
    explanation: "Compound words follow base word rules: understand → understanding, overcome → overcoming."
  }, {
    type: "spelling_rule",
    rule: "Doubling rule: Words with multiple consonants at end",
    instruction: "Apply the rule: Add '-ing' to 'respect'",
    correctAnswer: "respecting",
    hasHint: true,
    hint: "Multiple consonants at the end (ct) means no doubling.",
    explanation: "Multiple consonants don't double: respect → respecting, protect → protecting, collect → collecting."
  }, {
    type: "spelling_rule",
    rule: "Prefix assimilation: 'in-' becomes 'im-' before p, b, m",
    instruction: "Apply the rule: Add 'in-' prefix to 'possible'",
    correctAnswer: "impossible",
    hasHint: true,
    hint: "'In-' changes to 'im-' before 'p', 'b', 'm' for easier pronunciation.",
    explanation: "Prefix assimilation: in- + possible = impossible, in- + balance = imbalance, in- + mature = immature."
  }, {
    type: "spelling_rule",
    rule: "Prefix assimilation: 'in-' becomes 'il-' before 'l'",
    instruction: "Apply the rule: Add 'in-' prefix to 'logical'",
    correctAnswer: "illogical",
    hasHint: true,
    hint: "'In-' changes to 'il-' before 'l' for smoother pronunciation.",
    explanation: "Prefix assimilation: in- + logical = illogical, in- + legal = illegal, in- + literate = illiterate."
  }, {
    type: "spelling_rule",
    rule: "Prefix assimilation: 'in-' becomes 'ir-' before 'r'",
    instruction: "Apply the rule: Add 'in-' prefix to 'regular'",
    correctAnswer: "irregular",
    hasHint: true,
    hint: "'In-' changes to 'ir-' before 'r'.",
    explanation: "Prefix assimilation: in- + regular = irregular, in- + responsible = irresponsible, in- + relevant = irrelevant."
  }, {
    type: "spelling_rule",
    rule: "Prefix assimilation: 'ad-' changes before certain letters",
    instruction: "Apply the rule: Add 'ad-' prefix to 'commodate'",
    correctAnswer: "accommodate",
    hasHint: true,
    hint: "'Ad-' becomes 'ac-' before 'c' and doubles the 'c'.",
    explanation: "Prefix assimilation: ad- + commodate = accommodate (ac-com-modate), ad- + company = accompany."
  }, {
    type: "spelling_rule",
    rule: "Prefix assimilation: 'sub-' becomes 'suc-' before 'c'",
    instruction: "Apply the rule: Add 'sub-' prefix to 'ceed' to mean 'follow after'",
    correctAnswer: "succeed",
    hasHint: true,
    hint: "'Sub-' becomes 'suc-' before 'c'.",
    explanation: "Prefix assimilation: sub- + ceed = succeed, sub- + cess = success, sub- + cor = succor."
  }, {
    type: "spelling_rule",
    rule: "Prefix assimilation: 'con-' becomes 'com-' before p, b, m",
    instruction: "Apply the rule: Add 'con-' prefix to 'bine' (join together)",
    correctAnswer: "combine",
    hasHint: true,
    hint: "'Con-' becomes 'com-' before 'b', 'p', 'm'.",
    explanation: "Prefix assimilation: con- + bine = combine, con- + press = compress, con- + mit = commit."
  }, {
    type: "spelling_rule",
    rule: "Prefix assimilation: 'con-' becomes 'col-' before 'l'",
    instruction: "Apply the rule: Add 'con-' prefix to 'lect' (gather together)",
    correctAnswer: "collect",
    hasHint: true,
    hint: "'Con-' becomes 'col-' before 'l'.",
    explanation: "Prefix assimilation: con- + lect = collect, con- + lapse = collapse, con- + laborate = collaborate."
  }, {
    type: "spelling_rule",
    rule: "Prefix assimilation: 'con-' becomes 'cor-' before 'r'",
    instruction: "Apply the rule: Add 'con-' prefix to 'rect' (make right)",
    correctAnswer: "correct",
    hasHint: true,
    hint: "'Con-' becomes 'cor-' before 'r'.",
    explanation: "Prefix assimilation: con- + rect = correct, con- + respond = correspond, con- + relate = correlate."
  }, {
    type: "spelling_rule",
    rule: "Suffix '-ance' vs '-ence': Use '-ance' after hard 'c' or 'g'",
    instruction: "Apply the rule: Add suffix to 'signific' (hard 'c' sound)",
    correctAnswer: "significance",
    hasHint: true,
    hint: "Hard 'c' sound takes '-ance'.",
    explanation: "Hard 'c' or 'g' take '-ance': significance, elegance, arrogance. Soft sounds take '-ence'."
  }, {
    type: "spelling_rule",
    rule: "Suffix '-ence' vs '-ance': Use '-ence' after soft 'c' or 'g'",
    instruction: "Apply the rule: Add suffix to 'intellig' (soft 'g' sound)",
    correctAnswer: "intelligence",
    hasHint: true,
    hint: "Soft 'g' sound takes '-ence'.",
    explanation: "Soft 'c' or 'g' take '-ence': intelligence, negligence, emergence. Hard sounds take '-ance'."
  }, {
    type: "spelling_rule",
    rule: "Suffix '-ant' vs '-ent': Use '-ant' with action-performing agents",
    instruction: "Apply the rule: Add suffix to 'assist' (one who assists)",
    correctAnswer: "assistant",
    hasHint: true,
    hint: "One who performs the action of assisting takes '-ant'.",
    explanation: "Action performers take '-ant': assistant, servant, participant. State descriptors often take '-ent'."
  }, {
    type: "spelling_rule",
    rule: "Suffix '-ent' vs '-ant': Use '-ent' for states or qualities",
    instruction: "Apply the rule: Add suffix to 'differ' (being different)",
    correctAnswer: "different",
    hasHint: true,
    hint: "Describing a state or quality takes '-ent'.",
    explanation: "States/qualities take '-ent': different, recent, present, absent. Action performers take '-ant'."
  }, {
    type: "spelling_rule",
    rule: "Suffix '-ible' vs '-able': Use '-ible' after hard 'g' or when root isn't complete word",
    instruction: "Apply the rule: Add suffix to 'leg' (can be read)",
    correctAnswer: "legible",
    hasHint: true,
    hint: "'Leg' isn't a complete word, so use '-ible'.",
    explanation: "Incomplete roots take '-ible': legible, visible, terrible. Complete words usually take '-able'."
  }, {
    type: "spelling_rule",
    rule: "Suffix '-able' vs '-ible': Use '-able' after complete words",
    instruction: "Apply the rule: Add suffix to 'comfort' (can be comforted)",
    correctAnswer: "comfortable",
    hasHint: true,
    hint: "'Comfort' is a complete word, so use '-able'.",
    explanation: "Complete words take '-able': comfortable, readable, likeable. Incomplete roots take '-ible'."
  }, {
    type: "spelling_rule",
    rule: "Suffix '-tion' vs '-sion': Use '-tion' after complete words",
    instruction: "Apply the rule: Add suffix to 'create' (act of creating)",
    correctAnswer: "creation",
    hasHint: true,
    hint: "'Create' is complete, so use '-tion'.",
    explanation: "Complete words take '-tion': creation, education, information. Incomplete roots often take '-sion'."
  }, {
    type: "spelling_rule",
    rule: "Suffix '-sion' vs '-tion': Use '-sion' after 'd' or 's' sounds",
    instruction: "Apply the rule: Add suffix to 'decide' (act of deciding)",
    correctAnswer: "decision",
    hasHint: true,
    hint: "Words ending in 'd' sound often take '-sion'.",
    explanation: "After 'd' or 's' sounds, use '-sion': decision, television, confusion. Otherwise usually '-tion'."
  }, {
    type: "spelling_rule",
    rule: "Greek root 'auto-': Means 'self'",
    instruction: "Apply the rule: Combine 'auto-' with 'biography' (writing about oneself)",
    correctAnswer: "autobiography",
    hasHint: true,
    hint: "'Auto-' means self, so self-written life story.",
    explanation: "Greek root 'auto-' (self): autobiography, automatic, automobile, autograph."
  }, {
    type: "spelling_rule",
    rule: "Greek root 'tele-': Means 'distant' or 'far'",
    instruction: "Apply the rule: Combine 'tele-' with 'vision' (seeing at distance)",
    correctAnswer: "television",
    hasHint: true,
    hint: "'Tele-' means far, so seeing at a distance.",
    explanation: "Greek root 'tele-' (far): television, telephone, telescope, telegraph."
  }, {
    type: "spelling_rule",
    rule: "Latin root 'spec-': Means 'to see' or 'look'",
    instruction: "Apply the rule: Add prefix to 'spect' to mean 'look at carefully'",
    correctAnswer: "inspect",
    hasHint: true,
    hint: "Add 'in-' to mean looking into or examining.",
    explanation: "Latin root 'spec-' (see): inspect, respect, prospect, spectacle, spectacular."
  }, {
    type: "spelling_rule",
    rule: "Latin root 'port-': Means 'to carry'",
    instruction: "Apply the rule: Add prefix to 'port' to mean 'carry across'",
    correctAnswer: "transport",
    hasHint: true,
    hint: "Add 'trans-' (across) to mean carry across.",
    explanation: "Latin root 'port-' (carry): transport, export, import, portable, support."
  }, {
    type: "spelling_rule",
    rule: "Greek root 'geo-': Means 'earth'",
    instruction: "Apply the rule: Combine 'geo-' with 'graphy' (writing about earth)",
    correctAnswer: "geography",
    hasHint: true,
    hint: "'Geo-' means earth, 'graphy' means writing/study.",
    explanation: "Greek root 'geo-' (earth): geography, geology, geometry, geothermal."
  }, {
    type: "spelling_rule",
    rule: "Latin root 'dict-': Means 'to say' or 'speak'",
    instruction: "Apply the rule: Add prefix to 'dict' to mean 'say beforehand'",
    correctAnswer: "predict",
    hasHint: true,
    hint: "Add 'pre-' (before) to mean saying beforehand.",
    explanation: "Latin root 'dict-' (say): predict, dictionary, dictate, contradict."
  }, {
    type: "spelling_rule",
    rule: "Greek root 'micro-': Means 'small'",
    instruction: "Apply the rule: Combine 'micro-' with 'scope' (instrument for small viewing)",
    correctAnswer: "microscope",
    hasHint: true,
    hint: "'Micro-' means small, 'scope' means viewing instrument.",
    explanation: "Greek root 'micro-' (small): microscope, microphone, microwave, microorganism."
  }, {
    type: "spelling_rule",
    rule: "Latin root 'aud-': Means 'to hear'",
    instruction: "Apply the rule: Combine 'aud-' with '-ible' (able to be heard)",
    correctAnswer: "audible",
    hasHint: true,
    hint: "'Aud-' means hear, '-ible' means able to be.",
    explanation: "Latin root 'aud-' (hear): audible, audience, audio, auditorium."
  }, {
    type: "spelling_rule",
    rule: "Multi-syllable pattern: Unstressed syllables often use 'schwa' sound",
    instruction: "Apply the pattern: Spell the word meaning 'separate' with correct unstressed vowels",
    correctAnswer: "separate",
    hasHint: true,
    hint: "The middle syllable uses 'a' even though it sounds like 'uh'.",
    explanation: "Unstressed syllables often sound like 'uh' (schwa) but use different letters: separate, chocolate, family."
  }, {
    type: "spelling_rule",
    rule: "Multi-syllable pattern: '-ate' suffix in three-syllable words",
    instruction: "Apply the pattern: Spell the word meaning 'to work together' ending in '-ate'",
    correctAnswer: "collaborate",
    hasHint: true,
    hint: "Verbs meaning 'to do something' often end in '-ate'.",
    explanation: "Three-syllable verbs with '-ate': collaborate, concentrate, demonstrate, elaborate."
  }, {
    type: "spelling_rule",
    rule: "Multi-syllable pattern: '-ous' suffix for adjectives",
    instruction: "Apply the pattern: Change 'danger' to an adjective meaning 'full of danger'",
    correctAnswer: "dangerous",
    hasHint: true,
    hint: "Add '-ous' to make adjectives meaning 'full of' or 'having the quality of'.",
    explanation: "Adjectives with '-ous': dangerous, famous, nervous, serious, various."
  }, {
    type: "spelling_rule",
    rule: "Multi-syllable pattern: '-ity' suffix for abstract nouns",
    instruction: "Apply the pattern: Change 'popular' to a noun meaning 'the state of being popular'",
    correctAnswer: "popularity",
    hasHint: true,
    hint: "Remove '-ar' and add '-arity' for the noun form.",
    explanation: "Abstract nouns with '-ity': popularity, similarity, reality, possibility, personality."
  }, {
    type: "spelling_rule",
    rule: "Multi-syllable pattern: Stress affects vowel spelling",
    instruction: "Apply the pattern: Spell the word with stress on first syllable: PHO-to-graph",
    correctAnswer: "photograph",
    hasHint: true,
    hint: "The stressed syllable keeps clear vowel sounds.",
    explanation: "Stressed syllables have clear vowels, unstressed become schwa: PHO-to-graph, AU-to-mo-bile."
  }, {
    type: "spelling_rule",
    rule: "Multi-syllable pattern: '-al' suffix for adjectives from nouns",
    instruction: "Apply the pattern: Change 'person' to an adjective meaning 'relating to a person'",
    correctAnswer: "personal",
    hasHint: true,
    hint: "Add '-al' to make adjectives meaning 'relating to' or 'of the nature of'.",
    explanation: "Adjectives with '-al': personal, national, musical, educational, international."
  }, {
    type: "spelling_rule",
    rule: "Multi-syllable pattern: '-ment' suffix for action nouns",
    instruction: "Apply the pattern: Change 'develop' to a noun meaning 'the act of developing'",
    correctAnswer: "development",
    hasHint: true,
    hint: "Add '-ment' to verbs to make nouns about the action.",
    explanation: "Action nouns with '-ment': development, improvement, movement, agreement, government."
  }, {
    type: "spelling_rule",
    rule: "Multi-syllable pattern: Compound words maintain original spelling",
    instruction: "Apply the pattern: Combine 'every' + 'body' to mean 'all people'",
    correctAnswer: "everybody",
    hasHint: true,
    hint: "Keep the original spelling of both parts when combining.",
    explanation: "Compound words keep original spelling: everybody, somebody, everywhere, something, anything."
  }, {
    type: "spelling_rule",
    rule: "British spelling: '-ise' vs '-ize' endings",
    instruction: "Apply British rule: Change 'organize' to British spelling",
    correctAnswer: "organise",
    hasHint: true,
    hint: "British spelling often uses '-ise' instead of '-ize'.",
    explanation: "British '-ise': organise, realise, recognise. American '-ize': organize, realize, recognize."
  }, {
    type: "spelling_rule",
    rule: "British spelling: '-our' vs '-or' endings",
    instruction: "Apply British rule: Change 'honor' to British spelling",
    correctAnswer: "honour",
    hasHint: true,
    hint: "British spelling adds 'u' in words ending '-or'.",
    explanation: "British '-our': honour, favour, colour, behaviour. American '-or': honor, favor, color, behavior."
  }, {
    type: "spelling_rule",
    rule: "British spelling: '-re' vs '-er' endings",
    instruction: "Apply British rule: Change 'theater' to British spelling",
    correctAnswer: "theatre",
    hasHint: true,
    hint: "British spelling uses '-re' instead of '-er'.",
    explanation: "British '-re': theatre, centre, metre, litre. American '-er': theater, center, meter, liter."
  }, {
    type: "spelling_rule",
    rule: "British spelling: Double 'l' in past forms",
    instruction: "Apply British rule: Add '-ed' to 'cancel'",
    correctAnswer: "cancelled",
    hasHint: true,
    hint: "British spelling doubles the 'l' before adding endings.",
    explanation: "British double 'l': cancelled, travelled, modelled. American single 'l': canceled, traveled, modeled."
  }, {
    type: "spelling_rule",
    rule: "British spelling: 'ae' and 'oe' in Greek words",
    instruction: "Apply British rule: Spell the medical specialty dealing with children",
    correctAnswer: "paediatrics",
    hasHint: true,
    hint: "British spelling keeps 'ae' from Greek origins.",
    explanation: "British keeps Greek 'ae': paediatrics, anaesthetic. American simplifies: pediatrics, anesthetic."
  }, {
    type: "spelling_rule",
    rule: "British spelling: '-ence' vs '-ense' in some words",
    instruction: "Apply British rule: Spell the noun form of 'defend'",
    correctAnswer: "defence",
    hasHint: true,
    hint: "British spelling uses 'c' in the noun form.",
    explanation: "British noun 'defence', verb 'defend'. American uses 's': defense. Also: licence/license."
  }, {
    type: "spelling_rule",
    rule: "British spelling: Different word choices",
    instruction: "Apply British rule: What do you write with a rubber?",
    correctAnswer: "rubber",
    hasHint: true,
    hint: "British 'rubber' = American 'eraser'.",
    explanation: "British vocabulary differences: rubber (eraser), petrol (gas), lift (elevator), biscuit (cookie)."
  }, {
    type: "spelling_rule",
    rule: "British spelling: 'grey' vs 'gray'",
    instruction: "Apply British rule: Spell the color between black and white",
    correctAnswer: "grey",
    hasHint: true,
    hint: "British spelling uses 'e', American uses 'a'.",
    explanation: "British 'grey' vs American 'gray'. Remember: grEy = England, grAy = America."
  }]
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,