4a4c5fed05c033b6ac17621e2a43e833
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.disableLock = disableLock;
exports.emergencyReset = emergencyReset;
exports.enableLock = enableLock;
exports.generateRecoveryCode = generateRecoveryCode;
exports.getAutoLockTimeout = getAutoLockTimeout;
exports.isBiometricsEnabled = isBiometricsEnabled;
exports.isEnabled = isEnabled;
exports.lockStorageKeys = void 0;
exports.setAutoLockTimeout = setAutoLockTimeout;
exports.setBiometricsEnabled = setBiometricsEnabled;
exports.setPin = setPin;
exports.setRecoveryCode = setRecoveryCode;
exports.unlockWithBiometrics = unlockWithBiometrics;
exports.verifyPin = verifyPin;
exports.verifyRecovery = verifyRecovery;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var STORAGE_KEYS = {
  ENABLED: 'app_lock.enabled',
  PIN_HASH: 'app_lock.pin_hash',
  PIN_SALT: 'app_lock.pin_salt',
  BIO_ENABLED: 'app_lock.bio_enabled',
  RECOVERY_HASH: 'app_lock.recovery_hash',
  TIMEOUT_SECONDS: 'app_lock.timeout_seconds',
  LOCKOUT_UNTIL: 'app_lock.lockout_until',
  FAILED_ATTEMPTS: 'app_lock.failed_attempts'
};
function simpleHash(input) {
  var hash = 0;
  var str = String(input);
  for (var i = 0; i < str.length; i += 1) {
    hash = (hash << 5) - hash + str.charCodeAt(i);
    hash |= 0;
  }
  return Math.abs(hash).toString(16);
}
function randomSalt() {
  var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 16;
  var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  var out = '';
  for (var i = 0; i < length; i += 1) out += chars[Math.floor(Math.random() * chars.length)];
  return out;
}
function isEnabled() {
  return _isEnabled.apply(this, arguments);
}
function _isEnabled() {
  _isEnabled = (0, _asyncToGenerator2.default)(function* () {
    var enabled = yield _asyncStorage.default.getItem(STORAGE_KEYS.ENABLED);
    return enabled === '1';
  });
  return _isEnabled.apply(this, arguments);
}
function enableLock() {
  return _enableLock.apply(this, arguments);
}
function _enableLock() {
  _enableLock = (0, _asyncToGenerator2.default)(function* () {
    yield _asyncStorage.default.setItem(STORAGE_KEYS.ENABLED, '1');
    return true;
  });
  return _enableLock.apply(this, arguments);
}
function disableLock() {
  return _disableLock.apply(this, arguments);
}
function _disableLock() {
  _disableLock = (0, _asyncToGenerator2.default)(function* () {
    yield _asyncStorage.default.multiRemove([STORAGE_KEYS.ENABLED, STORAGE_KEYS.PIN_HASH, STORAGE_KEYS.PIN_SALT, STORAGE_KEYS.BIO_ENABLED, STORAGE_KEYS.RECOVERY_HASH, STORAGE_KEYS.TIMEOUT_SECONDS, STORAGE_KEYS.LOCKOUT_UNTIL, STORAGE_KEYS.FAILED_ATTEMPTS]);
    return true;
  });
  return _disableLock.apply(this, arguments);
}
function setPin(_x) {
  return _setPin.apply(this, arguments);
}
function _setPin() {
  _setPin = (0, _asyncToGenerator2.default)(function* (pin) {
    var salt = randomSalt();
    var pinHash = simpleHash(`${salt}:${pin}`);
    yield _asyncStorage.default.setItem(STORAGE_KEYS.PIN_SALT, salt);
    yield _asyncStorage.default.setItem(STORAGE_KEYS.PIN_HASH, pinHash);
    return true;
  });
  return _setPin.apply(this, arguments);
}
function verifyPin(_x2) {
  return _verifyPin.apply(this, arguments);
}
function _verifyPin() {
  _verifyPin = (0, _asyncToGenerator2.default)(function* (pin) {
    var lockoutUntil = Number((yield _asyncStorage.default.getItem(STORAGE_KEYS.LOCKOUT_UNTIL)) || '0');
    var now = Date.now();
    if (lockoutUntil && now < lockoutUntil) {
      return {
        ok: false,
        reason: 'lockout'
      };
    }
    var salt = yield _asyncStorage.default.getItem(STORAGE_KEYS.PIN_SALT);
    var expected = yield _asyncStorage.default.getItem(STORAGE_KEYS.PIN_HASH);
    if (!salt || !expected) return {
      ok: false
    };
    var given = simpleHash(`${salt}:${pin}`);
    var ok = given === expected;
    var attempts = Number((yield _asyncStorage.default.getItem(STORAGE_KEYS.FAILED_ATTEMPTS)) || '0');
    if (ok) {
      yield _asyncStorage.default.setItem(STORAGE_KEYS.FAILED_ATTEMPTS, '0');
      return {
        ok: true
      };
    }
    attempts += 1;
    yield _asyncStorage.default.setItem(STORAGE_KEYS.FAILED_ATTEMPTS, String(attempts));
    if (attempts >= 5) {
      var lockMs = 30000 * Math.min(4, attempts - 4);
      yield _asyncStorage.default.setItem(STORAGE_KEYS.LOCKOUT_UNTIL, String(now + lockMs));
      return {
        ok: false,
        reason: 'lockout'
      };
    }
    return {
      ok: false
    };
  });
  return _verifyPin.apply(this, arguments);
}
function setBiometricsEnabled(_x3) {
  return _setBiometricsEnabled.apply(this, arguments);
}
function _setBiometricsEnabled() {
  _setBiometricsEnabled = (0, _asyncToGenerator2.default)(function* (enabled) {
    yield _asyncStorage.default.setItem(STORAGE_KEYS.BIO_ENABLED, enabled ? '1' : '0');
    return true;
  });
  return _setBiometricsEnabled.apply(this, arguments);
}
function isBiometricsEnabled() {
  return _isBiometricsEnabled.apply(this, arguments);
}
function _isBiometricsEnabled() {
  _isBiometricsEnabled = (0, _asyncToGenerator2.default)(function* () {
    var v = yield _asyncStorage.default.getItem(STORAGE_KEYS.BIO_ENABLED);
    return v === '1';
  });
  return _isBiometricsEnabled.apply(this, arguments);
}
function unlockWithBiometrics() {
  return _unlockWithBiometrics.apply(this, arguments);
}
function _unlockWithBiometrics() {
  _unlockWithBiometrics = (0, _asyncToGenerator2.default)(function* () {
    var enabled = yield isBiometricsEnabled();
    if (!enabled) return {
      ok: false
    };
    return {
      ok: true
    };
  });
  return _unlockWithBiometrics.apply(this, arguments);
}
function generateRecoveryCode() {
  var chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';
  var code = '';
  for (var i = 0; i < 16; i += 1) code += chars[Math.floor(Math.random() * chars.length)];
  return code;
}
function setRecoveryCode(_x4) {
  return _setRecoveryCode.apply(this, arguments);
}
function _setRecoveryCode() {
  _setRecoveryCode = (0, _asyncToGenerator2.default)(function* (code) {
    var hash = simpleHash(code);
    yield _asyncStorage.default.setItem(STORAGE_KEYS.RECOVERY_HASH, hash);
    return true;
  });
  return _setRecoveryCode.apply(this, arguments);
}
function verifyRecovery(_x5) {
  return _verifyRecovery.apply(this, arguments);
}
function _verifyRecovery() {
  _verifyRecovery = (0, _asyncToGenerator2.default)(function* (code) {
    var expected = yield _asyncStorage.default.getItem(STORAGE_KEYS.RECOVERY_HASH);
    if (!expected) return false;
    return simpleHash(code) === expected;
  });
  return _verifyRecovery.apply(this, arguments);
}
function setAutoLockTimeout(_x6) {
  return _setAutoLockTimeout.apply(this, arguments);
}
function _setAutoLockTimeout() {
  _setAutoLockTimeout = (0, _asyncToGenerator2.default)(function* (seconds) {
    yield _asyncStorage.default.setItem(STORAGE_KEYS.TIMEOUT_SECONDS, String(seconds));
    return true;
  });
  return _setAutoLockTimeout.apply(this, arguments);
}
function getAutoLockTimeout() {
  return _getAutoLockTimeout.apply(this, arguments);
}
function _getAutoLockTimeout() {
  _getAutoLockTimeout = (0, _asyncToGenerator2.default)(function* () {
    return Number((yield _asyncStorage.default.getItem(STORAGE_KEYS.TIMEOUT_SECONDS)) || '0');
  });
  return _getAutoLockTimeout.apply(this, arguments);
}
function emergencyReset() {
  return _emergencyReset.apply(this, arguments);
}
function _emergencyReset() {
  _emergencyReset = (0, _asyncToGenerator2.default)(function* () {
    yield disableLock();
    return true;
  });
  return _emergencyReset.apply(this, arguments);
}
var lockStorageKeys = exports.lockStorageKeys = STORAGE_KEYS;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYXN5bmNTdG9yYWdlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJTVE9SQUdFX0tFWVMiLCJFTkFCTEVEIiwiUElOX0hBU0giLCJQSU5fU0FMVCIsIkJJT19FTkFCTEVEIiwiUkVDT1ZFUllfSEFTSCIsIlRJTUVPVVRfU0VDT05EUyIsIkxPQ0tPVVRfVU5USUwiLCJGQUlMRURfQVRURU1QVFMiLCJzaW1wbGVIYXNoIiwiaW5wdXQiLCJoYXNoIiwic3RyIiwiU3RyaW5nIiwiaSIsImxlbmd0aCIsImNoYXJDb2RlQXQiLCJNYXRoIiwiYWJzIiwidG9TdHJpbmciLCJyYW5kb21TYWx0IiwiYXJndW1lbnRzIiwidW5kZWZpbmVkIiwiY2hhcnMiLCJvdXQiLCJmbG9vciIsInJhbmRvbSIsImlzRW5hYmxlZCIsIl9pc0VuYWJsZWQiLCJhcHBseSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImRlZmF1bHQiLCJlbmFibGVkIiwiQXN5bmNTdG9yYWdlIiwiZ2V0SXRlbSIsImVuYWJsZUxvY2siLCJfZW5hYmxlTG9jayIsInNldEl0ZW0iLCJkaXNhYmxlTG9jayIsIl9kaXNhYmxlTG9jayIsIm11bHRpUmVtb3ZlIiwic2V0UGluIiwiX3giLCJfc2V0UGluIiwicGluIiwic2FsdCIsInBpbkhhc2giLCJ2ZXJpZnlQaW4iLCJfeDIiLCJfdmVyaWZ5UGluIiwibG9ja291dFVudGlsIiwiTnVtYmVyIiwibm93IiwiRGF0ZSIsIm9rIiwicmVhc29uIiwiZXhwZWN0ZWQiLCJnaXZlbiIsImF0dGVtcHRzIiwibG9ja01zIiwibWluIiwic2V0QmlvbWV0cmljc0VuYWJsZWQiLCJfeDMiLCJfc2V0QmlvbWV0cmljc0VuYWJsZWQiLCJpc0Jpb21ldHJpY3NFbmFibGVkIiwiX2lzQmlvbWV0cmljc0VuYWJsZWQiLCJ2IiwidW5sb2NrV2l0aEJpb21ldHJpY3MiLCJfdW5sb2NrV2l0aEJpb21ldHJpY3MiLCJnZW5lcmF0ZVJlY292ZXJ5Q29kZSIsImNvZGUiLCJzZXRSZWNvdmVyeUNvZGUiLCJfeDQiLCJfc2V0UmVjb3ZlcnlDb2RlIiwidmVyaWZ5UmVjb3ZlcnkiLCJfeDUiLCJfdmVyaWZ5UmVjb3ZlcnkiLCJzZXRBdXRvTG9ja1RpbWVvdXQiLCJfeDYiLCJfc2V0QXV0b0xvY2tUaW1lb3V0Iiwic2Vjb25kcyIsImdldEF1dG9Mb2NrVGltZW91dCIsIl9nZXRBdXRvTG9ja1RpbWVvdXQiLCJlbWVyZ2VuY3lSZXNldCIsIl9lbWVyZ2VuY3lSZXNldCIsImxvY2tTdG9yYWdlS2V5cyIsImV4cG9ydHMiXSwic291cmNlcyI6WyJsb2NrU2VydmljZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvc2VydmljZXMvbG9ja1NlcnZpY2UuanMgLSBTaW1wbGUgb2ZmbGluZSBhcHAgbG9jayBzZXJ2aWNlIChQSU4gKyByZWNvdmVyeSlcclxuaW1wb3J0IEFzeW5jU3RvcmFnZSBmcm9tICdAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZSc7XHJcblxyXG5jb25zdCBTVE9SQUdFX0tFWVMgPSB7XHJcbiAgRU5BQkxFRDogJ2FwcF9sb2NrLmVuYWJsZWQnLFxyXG4gIFBJTl9IQVNIOiAnYXBwX2xvY2sucGluX2hhc2gnLFxyXG4gIFBJTl9TQUxUOiAnYXBwX2xvY2sucGluX3NhbHQnLFxyXG4gIEJJT19FTkFCTEVEOiAnYXBwX2xvY2suYmlvX2VuYWJsZWQnLFxyXG4gIFJFQ09WRVJZX0hBU0g6ICdhcHBfbG9jay5yZWNvdmVyeV9oYXNoJyxcclxuICBUSU1FT1VUX1NFQ09ORFM6ICdhcHBfbG9jay50aW1lb3V0X3NlY29uZHMnLFxyXG4gIExPQ0tPVVRfVU5USUw6ICdhcHBfbG9jay5sb2Nrb3V0X3VudGlsJyxcclxuICBGQUlMRURfQVRURU1QVFM6ICdhcHBfbG9jay5mYWlsZWRfYXR0ZW1wdHMnLFxyXG59O1xyXG5cclxuLy8gTk9URTogVGhpcyBpcyBub3QgY3J5cHRvZ3JhcGhpY2FsbHkgc3Ryb25nLiBGb3IgbG9jYWwgbG9jayBVWCBvbmx5LlxyXG5mdW5jdGlvbiBzaW1wbGVIYXNoKGlucHV0KSB7XHJcbiAgbGV0IGhhc2ggPSAwO1xyXG4gIGNvbnN0IHN0ciA9IFN0cmluZyhpbnB1dCk7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgIGhhc2ggPSAoaGFzaCA8PCA1KSAtIGhhc2ggKyBzdHIuY2hhckNvZGVBdChpKTtcclxuICAgIGhhc2ggfD0gMDtcclxuICB9XHJcbiAgcmV0dXJuIE1hdGguYWJzKGhhc2gpLnRvU3RyaW5nKDE2KTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmFuZG9tU2FsdChsZW5ndGggPSAxNikge1xyXG4gIGNvbnN0IGNoYXJzID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVowMTIzNDU2Nzg5JztcclxuICBsZXQgb3V0ID0gJyc7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkgb3V0ICs9IGNoYXJzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNoYXJzLmxlbmd0aCldO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpc0VuYWJsZWQoKSB7XHJcbiAgY29uc3QgZW5hYmxlZCA9IGF3YWl0IEFzeW5jU3RvcmFnZS5nZXRJdGVtKFNUT1JBR0VfS0VZUy5FTkFCTEVEKTtcclxuICByZXR1cm4gZW5hYmxlZCA9PT0gJzEnO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZW5hYmxlTG9jaygpIHtcclxuICBhd2FpdCBBc3luY1N0b3JhZ2Uuc2V0SXRlbShTVE9SQUdFX0tFWVMuRU5BQkxFRCwgJzEnKTtcclxuICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRpc2FibGVMb2NrKCkge1xyXG4gIGF3YWl0IEFzeW5jU3RvcmFnZS5tdWx0aVJlbW92ZShbXHJcbiAgICBTVE9SQUdFX0tFWVMuRU5BQkxFRCxcclxuICAgIFNUT1JBR0VfS0VZUy5QSU5fSEFTSCxcclxuICAgIFNUT1JBR0VfS0VZUy5QSU5fU0FMVCxcclxuICAgIFNUT1JBR0VfS0VZUy5CSU9fRU5BQkxFRCxcclxuICAgIFNUT1JBR0VfS0VZUy5SRUNPVkVSWV9IQVNILFxyXG4gICAgU1RPUkFHRV9LRVlTLlRJTUVPVVRfU0VDT05EUyxcclxuICAgIFNUT1JBR0VfS0VZUy5MT0NLT1VUX1VOVElMLFxyXG4gICAgU1RPUkFHRV9LRVlTLkZBSUxFRF9BVFRFTVBUUyxcclxuICBdKTtcclxuICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNldFBpbihwaW4pIHtcclxuICBjb25zdCBzYWx0ID0gcmFuZG9tU2FsdCgpO1xyXG4gIGNvbnN0IHBpbkhhc2ggPSBzaW1wbGVIYXNoKGAke3NhbHR9OiR7cGlufWApO1xyXG4gIGF3YWl0IEFzeW5jU3RvcmFnZS5zZXRJdGVtKFNUT1JBR0VfS0VZUy5QSU5fU0FMVCwgc2FsdCk7XHJcbiAgYXdhaXQgQXN5bmNTdG9yYWdlLnNldEl0ZW0oU1RPUkFHRV9LRVlTLlBJTl9IQVNILCBwaW5IYXNoKTtcclxuICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHZlcmlmeVBpbihwaW4pIHtcclxuICBjb25zdCBsb2Nrb3V0VW50aWwgPSBOdW1iZXIoYXdhaXQgQXN5bmNTdG9yYWdlLmdldEl0ZW0oU1RPUkFHRV9LRVlTLkxPQ0tPVVRfVU5USUwpIHx8ICcwJyk7XHJcbiAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcclxuICBpZiAobG9ja291dFVudGlsICYmIG5vdyA8IGxvY2tvdXRVbnRpbCkge1xyXG4gICAgcmV0dXJuIHsgb2s6IGZhbHNlLCByZWFzb246ICdsb2Nrb3V0JyB9O1xyXG4gIH1cclxuXHJcbiAgY29uc3Qgc2FsdCA9IGF3YWl0IEFzeW5jU3RvcmFnZS5nZXRJdGVtKFNUT1JBR0VfS0VZUy5QSU5fU0FMVCk7XHJcbiAgY29uc3QgZXhwZWN0ZWQgPSBhd2FpdCBBc3luY1N0b3JhZ2UuZ2V0SXRlbShTVE9SQUdFX0tFWVMuUElOX0hBU0gpO1xyXG4gIGlmICghc2FsdCB8fCAhZXhwZWN0ZWQpIHJldHVybiB7IG9rOiBmYWxzZSB9O1xyXG4gIGNvbnN0IGdpdmVuID0gc2ltcGxlSGFzaChgJHtzYWx0fToke3Bpbn1gKTtcclxuICBjb25zdCBvayA9IGdpdmVuID09PSBleHBlY3RlZDtcclxuXHJcbiAgbGV0IGF0dGVtcHRzID0gTnVtYmVyKGF3YWl0IEFzeW5jU3RvcmFnZS5nZXRJdGVtKFNUT1JBR0VfS0VZUy5GQUlMRURfQVRURU1QVFMpIHx8ICcwJyk7XHJcbiAgaWYgKG9rKSB7XHJcbiAgICBhd2FpdCBBc3luY1N0b3JhZ2Uuc2V0SXRlbShTVE9SQUdFX0tFWVMuRkFJTEVEX0FUVEVNUFRTLCAnMCcpO1xyXG4gICAgcmV0dXJuIHsgb2s6IHRydWUgfTtcclxuICB9XHJcbiAgYXR0ZW1wdHMgKz0gMTtcclxuICBhd2FpdCBBc3luY1N0b3JhZ2Uuc2V0SXRlbShTVE9SQUdFX0tFWVMuRkFJTEVEX0FUVEVNUFRTLCBTdHJpbmcoYXR0ZW1wdHMpKTtcclxuICBpZiAoYXR0ZW1wdHMgPj0gNSkge1xyXG4gICAgY29uc3QgbG9ja01zID0gMzBfMDAwICogTWF0aC5taW4oNCwgYXR0ZW1wdHMgLSA0KTsgLy8gMzBzLCA2MHMsIDkwcywgMTIwc1xyXG4gICAgYXdhaXQgQXN5bmNTdG9yYWdlLnNldEl0ZW0oU1RPUkFHRV9LRVlTLkxPQ0tPVVRfVU5USUwsIFN0cmluZyhub3cgKyBsb2NrTXMpKTtcclxuICAgIHJldHVybiB7IG9rOiBmYWxzZSwgcmVhc29uOiAnbG9ja291dCcgfTtcclxuICB9XHJcbiAgcmV0dXJuIHsgb2s6IGZhbHNlIH07XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZXRCaW9tZXRyaWNzRW5hYmxlZChlbmFibGVkKSB7XHJcbiAgYXdhaXQgQXN5bmNTdG9yYWdlLnNldEl0ZW0oU1RPUkFHRV9LRVlTLkJJT19FTkFCTEVELCBlbmFibGVkID8gJzEnIDogJzAnKTtcclxuICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGlzQmlvbWV0cmljc0VuYWJsZWQoKSB7XHJcbiAgY29uc3QgdiA9IGF3YWl0IEFzeW5jU3RvcmFnZS5nZXRJdGVtKFNUT1JBR0VfS0VZUy5CSU9fRU5BQkxFRCk7XHJcbiAgcmV0dXJuIHYgPT09ICcxJztcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVubG9ja1dpdGhCaW9tZXRyaWNzKCkge1xyXG4gIC8vIFBsYWNlaG9sZGVyIGZvciByZWFsIGV4cG8tbG9jYWwtYXV0aGVudGljYXRpb24gaW50ZWdyYXRpb25cclxuICBjb25zdCBlbmFibGVkID0gYXdhaXQgaXNCaW9tZXRyaWNzRW5hYmxlZCgpO1xyXG4gIGlmICghZW5hYmxlZCkgcmV0dXJuIHsgb2s6IGZhbHNlIH07XHJcbiAgLy8gSW4gcmVhbCBhcHA6IHByb21wdCBiaW9tZXRyaWMgYW5kIHJldHVybiByZXN1bHRcclxuICByZXR1cm4geyBvazogdHJ1ZSB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVSZWNvdmVyeUNvZGUoKSB7XHJcbiAgY29uc3QgY2hhcnMgPSAnQUJDREVGR0hKS0xNTlBRUlNUVVZXWFlaMjM0NTY3ODknO1xyXG4gIGxldCBjb2RlID0gJyc7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSArPSAxKSBjb2RlICs9IGNoYXJzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNoYXJzLmxlbmd0aCldO1xyXG4gIHJldHVybiBjb2RlO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2V0UmVjb3ZlcnlDb2RlKGNvZGUpIHtcclxuICBjb25zdCBoYXNoID0gc2ltcGxlSGFzaChjb2RlKTtcclxuICBhd2FpdCBBc3luY1N0b3JhZ2Uuc2V0SXRlbShTVE9SQUdFX0tFWVMuUkVDT1ZFUllfSEFTSCwgaGFzaCk7XHJcbiAgcmV0dXJuIHRydWU7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB2ZXJpZnlSZWNvdmVyeShjb2RlKSB7XHJcbiAgY29uc3QgZXhwZWN0ZWQgPSBhd2FpdCBBc3luY1N0b3JhZ2UuZ2V0SXRlbShTVE9SQUdFX0tFWVMuUkVDT1ZFUllfSEFTSCk7XHJcbiAgaWYgKCFleHBlY3RlZCkgcmV0dXJuIGZhbHNlO1xyXG4gIHJldHVybiBzaW1wbGVIYXNoKGNvZGUpID09PSBleHBlY3RlZDtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNldEF1dG9Mb2NrVGltZW91dChzZWNvbmRzKSB7XHJcbiAgYXdhaXQgQXN5bmNTdG9yYWdlLnNldEl0ZW0oU1RPUkFHRV9LRVlTLlRJTUVPVVRfU0VDT05EUywgU3RyaW5nKHNlY29uZHMpKTtcclxuICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEF1dG9Mb2NrVGltZW91dCgpIHtcclxuICByZXR1cm4gTnVtYmVyKGF3YWl0IEFzeW5jU3RvcmFnZS5nZXRJdGVtKFNUT1JBR0VfS0VZUy5USU1FT1VUX1NFQ09ORFMpIHx8ICcwJyk7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBlbWVyZ2VuY3lSZXNldCgpIHtcclxuICBhd2FpdCBkaXNhYmxlTG9jaygpO1xyXG4gIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgbG9ja1N0b3JhZ2VLZXlzID0gU1RPUkFHRV9LRVlTO1xyXG5cclxuXHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSxJQUFBQSxhQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFNQyxZQUFZLEdBQUc7RUFDbkJDLE9BQU8sRUFBRSxrQkFBa0I7RUFDM0JDLFFBQVEsRUFBRSxtQkFBbUI7RUFDN0JDLFFBQVEsRUFBRSxtQkFBbUI7RUFDN0JDLFdBQVcsRUFBRSxz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T0FBQTlDLGtCQUFBLENBQUFDLE9BQUEsRUFBN0IsV0FBOEJ1QyxJQUFJLEVBQUU7SUFDekMsSUFBTWQsUUFBUSxTQUFTdkIscUJBQVksQ0FBQ0MsT0FBTyxDQUFDbEMsWUFBWSxDQUFDSyxhQUFhLENBQUM7SUFDdkUsSUFBSSxDQUFDbUQsUUFBUSxFQUFFLE9BQU8sS0FBSztJQUMzQixPQUFPL0MsVUFBVSxDQUFDNkQsSUFBSSxDQUFDLEtBQUtkLFFBQVE7RUFDdEMsQ0FBQztFQUFBLE9BQUFvQixlQUFBLENBQUEvQyxLQUFBLE9BQUFSLFNBQUE7QUFBQTtBQUFBLFNBRXFCd0Qsa0JBQWtCQSxDQUFBQyxHQUFBO0VBQUEsT0FBQUMsbUJBQUEsQ0FBQWxELEtBQUEsT0FBQVIsU0FBQTtBQUFBO0FBQUEsU0FBQTBELG9CQUFBO0VBQUFBLG1CQUFBLE9BQUFqRCxrQkFBQSxDQUFBQyxPQUFBLEVBQWpDLFdBQWtDaUQsT0FBTyxFQUFFO0lBQ2hELE1BQU0vQyxxQkFBWSxDQUFDSSxPQUFPLENBQUNyQyxZQUFZLENBQUNNLGVBQWUsRUFBRU8sTUFBTSxDQUFDbUUsT0FBTyxDQUFDLENBQUM7SUFDekUsT0FBTyxJQUFJO0VBQ2IsQ0FBQztFQUFBLE9BQUFELG1CQUFBLENBQUFsRCxLQUFBLE9BQUFSLFNBQUE7QUFBQTtBQUFBLFNBRXFCNEQsa0JBQWtCQSxDQUFBO0VBQUEsT0FBQUMsbUJBQUEsQ0FBQXJELEtBQUEsT0FBQVIsU0FBQTtBQUFBO0FBQUEsU0FBQTZELG9CQUFBO0VBQUFBLG1CQUFBLE9BQUFwRCxrQkFBQSxDQUFBQyxPQUFBLEVBQWpDLGFBQW9DO0lBQ3pDLE9BQU9vQixNQUFNLENBQUMsT0FBTWxCLHFCQUFZLENBQUNDLE9BQU8sQ0FBQ2xDLFlBQVksQ0FBQ00sZUFBZSxDQUFDLEtBQUksR0FBRyxDQUFDO0VBQ2hGLENBQUM7RUFBQSxPQUFBNEUsbUJBQUEsQ0FBQXJELEtBQUEsT0FBQVIsU0FBQTtBQUFBO0FBQUEsU0FFcUI4RCxjQUFjQSxDQUFBO0VBQUEsT0FBQUMsZUFBQSxDQUFBdkQsS0FBQSxPQUFBUixTQUFBO0FBQUE7QUFBQSxTQUFBK0QsZ0JBQUE7RUFBQUEsZUFBQSxPQUFBdEQsa0JBQUEsQ0FBQUMsT0FBQSxFQUE3QixhQUFnQztJQUNyQyxNQUFNTyxXQUFXLENBQUMsQ0FBQztJQUNuQixPQUFPLElBQUk7RUFDYixDQUFDO0VBQUEsT0FBQThDLGVBQUEsQ0FBQXZELEtBQUEsT0FBQVIsU0FBQTtBQUFBO0FBRU0sSUFBTWdFLGVBQWUsR0FBQUMsT0FBQSxDQUFBRCxlQUFBLEdBQUdyRixZQUFZIiwiaWdub3JlTGlzdCI6W119