20dc9602d2282298c01810150bbe518e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ProgressCard = _interopRequireDefault(require("../../../../components/ui/ProgressCard"));
var _grammarStats = require("../../../../utils/grammar/grammarStats");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
var GrammarProgress = function GrammarProgress(_ref) {
  var grammarData = _ref.grammarData,
    completedExercises = _ref.completedExercises,
    levelColor = _ref.levelColor,
    _ref$expanded = _ref.expanded,
    expanded = _ref$expanded === void 0 ? false : _ref$expanded,
    onToggleExpand = _ref.onToggleExpand,
    onRulePress = _ref.onRulePress;
  var dataArray = (0, _react.useMemo)(function () {
    if (!grammarData) return [];
    if (Array.isArray(grammarData)) {
      return grammarData;
    }
    if (typeof grammarData === 'object') {
      return grammarData.rules || grammarData.categories || grammarData.exercises || grammarData.grammar || grammarData.items || [];
    }
    return [];
  }, [grammarData]);
  var statsData = (0, _react.useMemo)(function () {
    var totalExercisesCount = (0, _grammarStats.calculateTotalExercises)(dataArray);
    var completedExercisesCount = (0, _grammarStats.calculateCompletedExercisesCount)(completedExercises);
    var totalProgress = (0, _grammarStats.calculateTotalProgress)(dataArray, completedExercises);
    var ruleProgressData = (0, _grammarStats.calculateRuleProgress)(dataArray, completedExercises);
    return {
      totalExercisesCount: totalExercisesCount,
      completedExercisesCount: completedExercisesCount,
      totalProgress: totalProgress,
      ruleProgressData: ruleProgressData
    };
  }, [dataArray, completedExercises]);
  var formattedRuleData = (0, _react.useMemo)(function () {
    return statsData.ruleProgressData.map(function (rule) {
      return {
        title: rule.title,
        completed: rule.completedExercises,
        total: rule.totalExercises,
        progress: rule.progress
      };
    });
  }, [statsData.ruleProgressData]);
  return (0, _jsxRuntime.jsx)(_ProgressCard.default, {
    title: "Progression",
    progress: statsData.totalProgress,
    completed: statsData.completedExercisesCount,
    total: statsData.totalExercisesCount,
    unit: "exercices",
    levelColor: levelColor,
    expandable: true,
    expanded: expanded,
    onToggleExpand: onToggleExpand,
    categoryData: formattedRuleData,
    onCategoryPress: onRulePress
  });
};
var _default = exports.default = GrammarProgress;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfUHJvZ3Jlc3NDYXJkIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfZ3JhbW1hclN0YXRzIiwiX3JlYWN0IiwiX2pzeFJ1bnRpbWUiLCJHcmFtbWFyUHJvZ3Jlc3MiLCJfcmVmIiwiZ3JhbW1hckRhdGEiLCJjb21wbGV0ZWRFeGVyY2lzZXMiLCJsZXZlbENvbG9yIiwiX3JlZiRleHBhbmRlZCIsImV4cGFuZGVkIiwib25Ub2dnbGVFeHBhbmQiLCJvblJ1bGVQcmVzcyIsImRhdGFBcnJheSIsInVzZU1lbW8iLCJBcnJheSIsImlzQXJyYXkiLCJydWxlcyIsImNhdGVnb3JpZXMiLCJleGVyY2lzZXMiLCJncmFtbWFyIiwiaXRlbXMiLCJzdGF0c0RhdGEiLCJ0b3RhbEV4ZXJjaXNlc0NvdW50IiwiY2FsY3VsYXRlVG90YWxFeGVyY2lzZXMiLCJjb21wbGV0ZWRFeGVyY2lzZXNDb3VudCIsImNhbGN1bGF0ZUNvbXBsZXRlZEV4ZXJjaXNlc0NvdW50IiwidG90YWxQcm9ncmVzcyIsImNhbGN1bGF0ZVRvdGFsUHJvZ3Jlc3MiLCJydWxlUHJvZ3Jlc3NEYXRhIiwiY2FsY3VsYXRlUnVsZVByb2dyZXNzIiwiZm9ybWF0dGVkUnVsZURhdGEiLCJtYXAiLCJydWxlIiwidGl0bGUiLCJjb21wbGV0ZWQiLCJ0b3RhbCIsInRvdGFsRXhlcmNpc2VzIiwicHJvZ3Jlc3MiLCJqc3giLCJkZWZhdWx0IiwidW5pdCIsImV4cGFuZGFibGUiLCJjYXRlZ29yeURhdGEiLCJvbkNhdGVnb3J5UHJlc3MiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHcmFtbWFyUHJvZ3Jlc3MvaW5kZXguanMgLSBWRVJTSU9OIFRPVEFMRU1FTlQgUkVDT0TDiUUgQVZFQyB1c2VNZW1vXHJcblxyXG5pbXBvcnQgUHJvZ3Jlc3NDYXJkIGZyb20gXCIuLi8uLi8uLi8uLi9jb21wb25lbnRzL3VpL1Byb2dyZXNzQ2FyZFwiO1xyXG5pbXBvcnQge1xyXG4gIGNhbGN1bGF0ZVRvdGFsRXhlcmNpc2VzLFxyXG4gIGNhbGN1bGF0ZUNvbXBsZXRlZEV4ZXJjaXNlc0NvdW50LFxyXG4gIGNhbGN1bGF0ZVRvdGFsUHJvZ3Jlc3MsXHJcbiAgY2FsY3VsYXRlUnVsZVByb2dyZXNzLFxyXG59IGZyb20gXCIuLi8uLi8uLi8uLi91dGlscy9ncmFtbWFyL2dyYW1tYXJTdGF0c1wiO1xyXG5pbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xyXG5cclxuLyoqXHJcbiAqIPCfk4ogR3JhbW1hclByb2dyZXNzIC0gVmVyc2lvbiB0b3RhbGVtZW50IHJlY29kw6llIGF2ZWMgbcOpbW9yaXNhdGlvbiBjb21wbMOodGVcclxuICog4pyFIMOJdml0ZSBsZXMgYm91Y2xlcyBpbmZpbmllcyBhdmVjIHVzZU1lbW8gcGFydG91dFxyXG4gKiDinIUgRMOpdGVjdGUgYXV0b21hdGlxdWVtZW50IGxhIHN0cnVjdHVyZSBkZXMgZG9ubsOpZXNcclxuICog4pyFIExvZ3MgY29uZGl0aW9ubmVscyBlbiBkw6l2ZWxvcHBlbWVudCB1bmlxdWVtZW50XHJcbiAqL1xyXG5jb25zdCBHcmFtbWFyUHJvZ3Jlc3MgPSAoe1xyXG4gIGdyYW1tYXJEYXRhLFxyXG4gIGNvbXBsZXRlZEV4ZXJjaXNlcyxcclxuICBsZXZlbENvbG9yLFxyXG4gIGV4cGFuZGVkID0gZmFsc2UsXHJcbiAgb25Ub2dnbGVFeHBhbmQsXHJcbiAgb25SdWxlUHJlc3MsXHJcbn0pID0+IHtcclxuICBcclxuICAvLyDinIUgTcOJTU9SSVNFUiBsYSBkw6l0ZWN0aW9uIGF1dG9tYXRpcXVlIGRlIGxhIHN0cnVjdHVyZVxyXG4gIGNvbnN0IGRhdGFBcnJheSA9IHVzZU1lbW8oKCkgPT4ge1xyXG4gICAgaWYgKCFncmFtbWFyRGF0YSkgcmV0dXJuIFtdO1xyXG4gICAgXHJcbiAgICAvLyBTaSBjJ2VzdCBkw6lqw6AgdW4gdGFibGVhdSAobGlzdGUgZGUgcnVsZXMpXHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShncmFtbWFyRGF0YSkpIHtcclxuICAgICAgcmV0dXJuIGdyYW1tYXJEYXRhO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBTaSBjJ2VzdCB1biBvYmpldCBhdmVjIGRpZmbDqXJlbnRlcyBwcm9wcmnDqXTDqXMgcG9zc2libGVzXHJcbiAgICBpZiAodHlwZW9mIGdyYW1tYXJEYXRhID09PSAnb2JqZWN0Jykge1xyXG4gICAgICByZXR1cm4gZ3JhbW1hckRhdGEucnVsZXMgfHwgXHJcbiAgICAgICAgICAgICBncmFtbWFyRGF0YS5jYXRlZ29yaWVzIHx8IFxyXG4gICAgICAgICAgICAgZ3JhbW1hckRhdGEuZXhlcmNpc2VzIHx8IFxyXG4gICAgICAgICAgICAgZ3JhbW1hckRhdGEuZ3JhbW1hciB8fCBcclxuICAgICAgICAgICAgIGdyYW1tYXJEYXRhLml0ZW1zIHx8IFxyXG4gICAgICAgICAgICAgW107XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiBbXTtcclxuICB9LCBbZ3JhbW1hckRhdGFdKTtcclxuICBcclxuICAvLyDinIUgTcOJTU9SSVNFUiB0b3VzIGxlcyBjYWxjdWxzIHN0YXRpc3RpcXVlc1xyXG4gIGNvbnN0IHN0YXRzRGF0YSA9IHVzZU1lbW8oKCkgPT4ge1xyXG4gICAgY29uc3QgdG90YWxFeGVyY2lzZXNDb3VudCA9IGNhbGN1bGF0ZVRvdGFsRXhlcmNpc2VzKGRhdGFBcnJheSk7XHJcbiAgICBjb25zdCBjb21wbGV0ZWRFeGVyY2lzZXNDb3VudCA9IGNhbGN1bGF0ZUNvbXBsZXRlZEV4ZXJjaXNlc0NvdW50KGNvbXBsZXRlZEV4ZXJjaXNlcyk7XHJcbiAgICBjb25zdCB0b3RhbFByb2dyZXNzID0gY2FsY3VsYXRlVG90YWxQcm9ncmVzcyhkYXRhQXJyYXksIGNvbXBsZXRlZEV4ZXJjaXNlcyk7XHJcbiAgICBjb25zdCBydWxlUHJvZ3Jlc3NEYXRhID0gY2FsY3VsYXRlUnVsZVByb2dyZXNzKGRhdGFBcnJheSwgY29tcGxldGVkRXhlcmNpc2VzKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0b3RhbEV4ZXJjaXNlc0NvdW50LFxyXG4gICAgICBjb21wbGV0ZWRFeGVyY2lzZXNDb3VudCxcclxuICAgICAgdG90YWxQcm9ncmVzcyxcclxuICAgICAgcnVsZVByb2dyZXNzRGF0YVxyXG4gICAgfTtcclxuICB9LCBbZGF0YUFycmF5LCBjb21wbGV0ZWRFeGVyY2lzZXNdKTtcclxuXHJcbiAgLy8g4pyFIE3DiU1PUklTRVIgbGEgdHJhbnNmb3JtYXRpb24gcG91ciBQcm9ncmVzc0NhcmRcclxuICBjb25zdCBmb3JtYXR0ZWRSdWxlRGF0YSA9IHVzZU1lbW8oKCkgPT4ge1xyXG4gICAgcmV0dXJuIHN0YXRzRGF0YS5ydWxlUHJvZ3Jlc3NEYXRhLm1hcCgocnVsZSkgPT4gKHtcclxuICAgICAgdGl0bGU6IHJ1bGUudGl0bGUsXHJcbiAgICAgIGNvbXBsZXRlZDogcnVsZS5jb21wbGV0ZWRFeGVyY2lzZXMsXHJcbiAgICAgIHRvdGFsOiBydWxlLnRvdGFsRXhlcmNpc2VzLFxyXG4gICAgICBwcm9ncmVzczogcnVsZS5wcm9ncmVzcyxcclxuICAgIH0pKTtcclxuICB9LCBbc3RhdHNEYXRhLnJ1bGVQcm9ncmVzc0RhdGFdKTtcclxuXHJcbiAgLy8g4pyFIENPUlJFQ1RJT04gRklOQUxFIDogUGFzIGRlIGxvZyBkYW5zIGxlIHJlbmRlciAhXHJcbiAgLy8gTGUgbG9nIMOpdGFpdCBkYW5zIGxlIHJlbmRlciwgaWwgc2UgZMOpY2xlbmNoYWl0IMOgIGNoYXF1ZSBmb2lzXHJcbiAgLy8gT24gcGV1dCBsJ2Fqb3V0ZXIgZGFucyB1biB1c2VFZmZlY3Qgc2kgdnJhaW1lbnQgbsOpY2Vzc2FpcmVcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxQcm9ncmVzc0NhcmRcclxuICAgICAgdGl0bGU9XCJQcm9ncmVzc2lvblwiXHJcbiAgICAgIHByb2dyZXNzPXtzdGF0c0RhdGEudG90YWxQcm9ncmVzc31cclxuICAgICAgY29tcGxldGVkPXtzdGF0c0RhdGEuY29tcGxldGVkRXhlcmNpc2VzQ291bnR9XHJcbiAgICAgIHRvdGFsPXtzdGF0c0RhdGEudG90YWxFeGVyY2lzZXNDb3VudH1cclxuICAgICAgdW5pdD1cImV4ZXJjaWNlc1wiXHJcbiAgICAgIGxldmVsQ29sb3I9e2xldmVsQ29sb3J9XHJcbiAgICAgIGV4cGFuZGFibGVcclxuICAgICAgZXhwYW5kZWQ9e2V4cGFuZGVkfVxyXG4gICAgICBvblRvZ2dsZUV4cGFuZD17b25Ub2dnbGVFeHBhbmR9XHJcbiAgICAgIGNhdGVnb3J5RGF0YT17Zm9ybWF0dGVkUnVsZURhdGF9XHJcbiAgICAgIG9uQ2F0ZWdvcnlQcmVzcz17b25SdWxlUHJlc3N9XHJcbiAgICAvPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBHcmFtbWFyUHJvZ3Jlc3M7Il0sIm1hcHBpbmdzIjoiOzs7OztBQUVBLElBQUFBLGFBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGFBQUEsR0FBQUQsT0FBQTtBQU1BLElBQUFFLE1BQUEsR0FBQUYsT0FBQTtBQUFnQyxJQUFBRyxXQUFBLEdBQUFILE9BQUE7QUFRaEMsSUFBTUksZUFBZSxHQUFHLFNBQWxCQSxlQUFlQSxDQUFBQyxJQUFBLEVBT2Y7RUFBQSxJQU5KQyxXQUFXLEdBQUFELElBQUEsQ0FBWEMsV0FBVztJQUNYQyxrQkFBa0IsR0FBQUYsSUFBQSxDQUFsQkUsa0JBQWtCO0lBQ2xCQyxVQUFVLEdBQUFILElBQUEsQ0FBVkcsVUFBVTtJQUFBQyxhQUFBLEdBQUFKLElBQUEsQ0FDVkssUUFBUTtJQUFSQSxRQUFRLEdBQUFELGFBQUEsY0FBRyxLQUFLLEdBQUFBLGFBQUE7SUFDaEJFLGNBQWMsR0FBQU4sSUFBQSxDQUFkTSxjQUFjO0lBQ2RDLFdBQVcsR0FBQVAsSUFBQSxDQUFYTyxXQUFXO0VBSVgsSUFBTUMsU0FBUyxHQUFHLElBQUFDLGNBQU8sRUFBQyxZQUFNO0lBQzlCLElBQUksQ0FBQ1IsV0FBVyxFQUFFLE9BQU8sRUFBRTtJQUczQixJQUFJ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