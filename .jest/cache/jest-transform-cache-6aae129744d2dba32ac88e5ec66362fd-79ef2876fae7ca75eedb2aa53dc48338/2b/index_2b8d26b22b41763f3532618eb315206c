8896fd651f3341922a1a7badaba29934
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _Card = _interopRequireDefault(require("../../../../components/ui/Card"));
var _ThemeContext = require("../../../../contexts/ThemeContext");
var _constants = require("../../../../utils/constants");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var LevelsCircleRow = function LevelsCircleRow(_ref) {
  var levels = _ref.levels,
    currentLevel = _ref.currentLevel,
    onLevelPress = _ref.onLevelPress,
    getLevelLabel = _ref.getLevelLabel,
    colors = _ref.colors,
    primaryColor = _ref.primaryColor,
    styles = _ref.styles;
  var handlers = (0, _react.useMemo)(function () {
    var map = {};
    levels.forEach(function (level) {
      map[level.id] = function () {
        return onLevelPress(level.id);
      };
    });
    return map;
  }, [levels, onLevelPress]);
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: styles.levelsContainer,
    children: levels.map(function (level) {
      var _level$progress;
      var isActive = level.id === currentLevel;
      return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        testID: `level-${level.id}-button`,
        style: styles.levelButton,
        onPress: handlers[level.id],
        activeOpacity: 0.7,
        accessibilityRole: "button",
        accessibilityLabel: `Niveau ${getLevelLabel(level.id)}`,
        accessibilityValue: {
          min: 0,
          max: 100,
          now: (_level$progress = level.progress) != null ? _level$progress : 0
        },
        children: (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [styles.levelCircle, isActive ? [styles.activeLevelCircle, {
            backgroundColor: level.color || primaryColor
          }] : styles.futureLevelCircle],
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [styles.levelText, isActive ? styles.activeLevelText : [styles.futureLevelText, {
              color: colors.textSecondary
            }]],
            children: getLevelLabel(level.id)
          })
        })
      }, level.id);
    })
  });
};
LevelsCircleRow.propTypes = {
  levels: _propTypes.default.array.isRequired,
  currentLevel: _propTypes.default.string.isRequired,
  onLevelPress: _propTypes.default.func.isRequired,
  getLevelLabel: _propTypes.default.func.isRequired,
  colors: _propTypes.default.object.isRequired,
  primaryColor: _propTypes.default.string.isRequired,
  styles: _propTypes.default.object.isRequired
};
var GlobalProgressBar = function GlobalProgressBar(_ref2) {
  var progress = _ref2.progress,
    primaryColor = _ref2.primaryColor,
    colors = _ref2.colors,
    styles = _ref2.styles;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.globalProgressContainer,
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [styles.globalProgressTrack, {
        backgroundColor: `${primaryColor}15`
      }],
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.globalProgressFill, {
          width: `${Math.min(progress, 100)}%`,
          backgroundColor: primaryColor
        }]
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [styles.progressLabel, {
        color: colors.textSecondary
      }],
      children: "Progression globale"
    })]
  });
};
GlobalProgressBar.propTypes = {
  progress: _propTypes.default.number.isRequired,
  primaryColor: _propTypes.default.string.isRequired,
  colors: _propTypes.default.object.isRequired,
  styles: _propTypes.default.object.isRequired
};
var ProgressHeader = function ProgressHeader(_ref3) {
  var levelInfo = _ref3.levelInfo,
    levelLabel = _ref3.levelLabel,
    progress = _ref3.progress,
    primaryColor = _ref3.primaryColor,
    colors = _ref3.colors,
    styles = _ref3.styles;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.header,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.progressInfo,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [styles.progressTitle, {
          color: colors.text
        }],
        children: levelInfo.title || `Niveau ${levelLabel}`
      }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: [styles.progressSubtitle, {
          color: colors.textSecondary
        }],
        children: ["Continuez votre apprentissage ", levelInfo.icon]
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.progressBadge,
      children: (0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: [styles.progressPercentage, {
          color: primaryColor
        }],
        children: [progress, "%"]
      })
    })]
  });
};
ProgressHeader.propTypes = {
  levelInfo: _propTypes.default.object.isRequired,
  levelLabel: _propTypes.default.string.isRequired,
  progress: _propTypes.default.number.isRequired,
  primaryColor: _propTypes.default.string.isRequired,
  colors: _propTypes.default.object.isRequired,
  styles: _propTypes.default.object.isRequired
};
var LearningProgress = function LearningProgress(_ref4) {
  var _ref4$levels = _ref4.levels,
    levels = _ref4$levels === void 0 ? [] : _ref4$levels,
    _ref4$currentLevel = _ref4.currentLevel,
    currentLevel = _ref4$currentLevel === void 0 ? "1" : _ref4$currentLevel,
    onSelectLevel = _ref4.onSelectLevel,
    onChangeLevelVisual = _ref4.onChangeLevelVisual,
    _ref4$primaryColor = _ref4.primaryColor,
    primaryColor = _ref4$primaryColor === void 0 ? "#3B82F6" : _ref4$primaryColor,
    _ref4$globalProgress = _ref4.globalProgress,
    globalProgress = _ref4$globalProgress === void 0 ? 0 : _ref4$globalProgress;
  var _ref5 = (0, _react.useContext)(_ThemeContext.ThemeContext) || {},
    _ref5$colors = _ref5.colors,
    themeColors = _ref5$colors === void 0 ? {} : _ref5$colors;
  var colors = {
    surface: themeColors.surface || "#FFFFFF",
    text: themeColors.text || "#1F2937",
    textSecondary: themeColors.textSecondary || "#6B7280"
  };
  var effectiveLevels = levels.length ? levels : Object.entries(_constants.LANGUAGE_LEVELS).map(function (_ref6) {
    var _ref7 = (0, _slicedToArray2.default)(_ref6, 2),
      id = _ref7[0],
      data = _ref7[1];
    return {
      id: id,
      color: data.color
    };
  });
  var currentLevelInfo = _constants.LANGUAGE_LEVELS[currentLevel] || _constants.LANGUAGE_LEVELS["1"];
  var getLevelLabel = function getLevelLabel(id) {
    return id === "bonus" ? "B" : id;
  };
  var handleLevelPress = (0, _react.useCallback)(function (levelId) {
    if (onChangeLevelVisual) onChangeLevelVisual(levelId);
  }, [onChangeLevelVisual]);
  var handleExplorePress = (0, _react.useCallback)(function () {
    if (onSelectLevel) onSelectLevel(currentLevel);
  }, [onSelectLevel, currentLevel]);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: _style.default.container,
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [_style.default.sectionTitle, {
        color: colors.text
      }],
      children: "\uD83C\uDFC6 Progression g\xE9n\xE9rale"
    }), (0, _jsxRuntime.jsxs)(_Card.default, {
      style: [_style.default.card, {
        backgroundColor: colors.surface
      }],
      children: [(0, _jsxRuntime.jsx)(ProgressHeader, {
        levelInfo: currentLevelInfo,
        levelLabel: getLevelLabel(currentLevel),
        progress: globalProgress,
        primaryColor: primaryColor,
        colors: colors,
        styles: _style.default
      }), (0, _jsxRuntime.jsx)(GlobalProgressBar, {
        progress: globalProgress,
        primaryColor: primaryColor,
        colors: colors,
        styles: _style.default
      }), (0, _jsxRuntime.jsx)(LevelsCircleRow, {
        levels: effectiveLevels,
        currentLevel: currentLevel,
        onLevelPress: handleLevelPress,
        getLevelLabel: getLevelLabel,
        colors: colors,
        primaryColor: primaryColor,
        styles: _style.default
      }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        testID: "explore-level-button",
        style: [_style.default.actionButton, {
          borderColor: primaryColor
        }],
        onPress: handleExplorePress,
        activeOpacity: 0.7,
        accessibilityRole: "button",
        accessibilityLabel: `Explorer le niveau ${getLevelLabel(currentLevel)}`,
        children: (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: [_style.default.actionButtonText, {
            color: primaryColor
          }],
          children: ["Explorer le niveau ", getLevelLabel(currentLevel)]
        })
      })]
    })]
  });
};
LearningProgress.propTypes = {
  levels: _propTypes.default.array,
  currentLevel: _propTypes.default.string,
  onSelectLevel: _propTypes.default.func,
  onChangeLevelVisual: _propTypes.default.func,
  primaryColor: _propTypes.default.string,
  globalProgress: _propTypes.default.number
};
var _default = exports.default = LearningProgress;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmUiLCJfcHJvcFR5cGVzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9DYXJkIiwiX1RoZW1lQ29udGV4dCIsIl9jb25zdGFudHMiLCJfc3R5bGUiLCJfanN4UnVudGltZSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiTGV2ZWxzQ2lyY2xlUm93IiwiX3JlZiIsImxldmVscyIsImN1cnJlbnRMZXZlbCIsIm9uTGV2ZWxQcmVzcyIsImdldExldmVsTGFiZWwiLCJjb2xvcnMiLCJwcmltYXJ5Q29sb3IiLCJzdHlsZXMiLCJoYW5kbGVycyIsInVzZU1lbW8iLCJtYXAiLCJmb3JFYWNoIiwibGV2ZWwiLCJpZCIsImpzeCIsIlZpZXciLCJzdHlsZSIsImxldmVsc0NvbnRhaW5lciIsImNoaWxkcmVuIiwiX2xldmVsJHByb2dyZXNzIiwiaXNBY3RpdmUiLCJUb3VjaGFibGVPcGFjaXR5IiwidGVzdElEIiwibGV2ZWxCdXR0b24iLCJvblByZXNzIiwiYWN0aXZlT3BhY2l0eSIsImFjY2Vzc2liaWxpdHlSb2xlIiwiYWNjZXNzaWJpbGl0eUxhYmVsIiwiYWNjZXNzaWJpbGl0eVZhbHVlIiwibWluIiwibWF4Iiwibm93IiwicHJvZ3Jlc3MiLCJsZXZlbENpcmNsZSIsImFjdGl2ZUxldmVsQ2lyY2xlIiwiYmFja2dyb3VuZENvbG9yIiwiY29sb3IiLCJmdXR1cmVMZXZlbENpcmNsZSIsIlRleHQiLCJsZXZlbFRleHQiLCJhY3RpdmVMZXZlbFRleHQiLCJmdXR1cmVMZXZlbFRleHQiLCJ0ZXh0U2Vjb25kYXJ5IiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiYXJyYXkiLCJpc1JlcXVpcmVkIiwic3RyaW5nIiwiZnVuYyIsIm9iamVjdCIsIkdsb2JhbFByb2dyZXNzQmFyIiwiX3JlZjIiLCJqc3hzIiwiZ2xvYmFsUHJvZ3Jlc3NDb250YWluZXIiLCJnbG9iYWxQcm9ncmVzc1RyYWNrIiwiZ2xvYmFsUHJvZ3Jlc3NGaWxsIiwid2lkdGgiLCJNYXRoIiwicHJvZ3Jlc3NMYWJlbCIsIm51bWJlciIsIlByb2dyZXNzSGVhZGVyIiwiX3JlZjMiLCJsZXZlbEluZm8iLCJsZXZlbExhYmVsIiwiaGVhZGVyIiwicHJvZ3Jlc3NJbmZvIiwicHJvZ3Jlc3NUaXRsZSIsInRleHQiLCJ0aXRsZSIsInByb2dyZXNzU3VidGl0bGUiLCJpY29uIiwicHJvZ3Jlc3NCYWRnZSIsInByb2dyZXNzUGVyY2VudGFnZSIsIkxlYXJuaW5nUHJvZ3Jlc3MiLCJfcmVmNCIsIl9yZWY0JGxldmVscyIsIl9yZWY0JGN1cnJlbnRMZXZlbCIsIm9uU2VsZWN0TGV2ZWwiLCJvbkNoYW5nZUxldmVsVmlzdWFsIiwiX3JlZjQkcHJpbWFyeUNvbG9yIiwiX3JlZjQkZ2xvYmFsUHJvZ3Jlc3MiLCJnbG9iYWxQcm9ncmVzcyIsIl9yZWY1IiwidXNlQ29udGV4dCIsIlRoZW1lQ29udGV4dCIsIl9yZWY1JGNvbG9ycyIsInRoZW1lQ29sb3JzIiwic3VyZmFjZSIsImVmZmVjdGl2ZUxldmVscyIsImxlbmd0aCIsImVudHJpZXMiLCJMQU5HVUFHRV9MRVZFTFMiLCJfcmVmNiIsIl9yZWY3IiwiX3NsaWNlZFRvQXJyYXkyIiwiZGF0YSIsImN1cnJlbnRMZXZlbEluZm8iLCJoYW5kbGVMZXZlbFByZXNzIiwidXNlQ2FsbGJhY2siLCJsZXZlbElkIiwiaGFuZGxlRXhwbG9yZVByZXNzIiwiY29udGFpbmVyIiwic2VjdGlvblRpdGxlIiwiY2FyZCIsImFjdGlvbkJ1dHRvbiIsImJvcmRlckNvbG9yIiwiYWN0aW9uQnV0dG9uVGV4dCIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9zY3JlZW5zL0Rhc2hib2FyZC9jb21wb25lbnRzL0xlYXJuaW5nUHJvZ3Jlc3MvaW5kZXguanNcbmltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VDYWxsYmFjaywgdXNlTWVtbyB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgVmlldywgVGV4dCwgVG91Y2hhYmxlT3BhY2l0eSB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcblxuaW1wb3J0IENhcmQgZnJvbSBcIi4uLy4uLy4uLy4uL2NvbXBvbmVudHMvdWkvQ2FyZFwiO1xuaW1wb3J0IHsgVGhlbWVDb250ZXh0IH0gZnJvbSBcIi4uLy4uLy4uLy4uL2NvbnRleHRzL1RoZW1lQ29udGV4dFwiO1xuaW1wb3J0IHsgTEFOR1VBR0VfTEVWRUxTIH0gZnJvbSBcIi4uLy4uLy4uLy4uL3V0aWxzL2NvbnN0YW50c1wiO1xuaW1wb3J0IHN0eWxlcyBmcm9tIFwiLi9zdHlsZVwiO1xuXG4vKipcbiAqIENlcmNsZSBwb3VyIGNoYXF1ZSBuaXZlYXUgYXZlYyBnZXN0aW9uIGR1IGNsaWNcbiAqL1xuY29uc3QgTGV2ZWxzQ2lyY2xlUm93ID0gKHtcbiAgbGV2ZWxzLFxuICBjdXJyZW50TGV2ZWwsXG4gIG9uTGV2ZWxQcmVzcyxcbiAgZ2V0TGV2ZWxMYWJlbCxcbiAgY29sb3JzLFxuICBwcmltYXJ5Q29sb3IsXG4gIHN0eWxlcyxcbn0pID0+IHtcbiAgLy8gTWVtb3Jpc2VyIGhhbmRsZXJzIHBvdXIgw6l2aXRlciByZS1jcsOpYXRpb24gaW5saW5lXG4gIGNvbnN0IGhhbmRsZXJzID0gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgbWFwID0ge307XG4gICAgbGV2ZWxzLmZvckVhY2goKGxldmVsKSA9PiB7XG4gICAgICBtYXBbbGV2ZWwuaWRdID0gKCkgPT4gb25MZXZlbFByZXNzKGxldmVsLmlkKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbWFwO1xuICB9LCBbbGV2ZWxzLCBvbkxldmVsUHJlc3NdKTtcblxuICByZXR1cm4gKFxuICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMubGV2ZWxzQ29udGFpbmVyfT5cbiAgICAgIHtsZXZlbHMubWFwKChsZXZlbCkgPT4ge1xuICAgICAgICBjb25zdCBpc0FjdGl2ZSA9IGxldmVsLmlkID09PSBjdXJyZW50TGV2ZWw7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPFRvdWNoYWJsZU9wYWNpdHlcbiAgICAgICAgICAgIGtleT17bGV2ZWwuaWR9XG4gICAgICAgICAgICB0ZXN0SUQ9e2BsZXZlbC0ke2xldmVsLmlkfS1idXR0b25gfVxuICAgICAgICAgICAgc3R5bGU9e3N0eWxlcy5sZXZlbEJ1dHRvbn1cbiAgICAgICAgICAgIG9uUHJlc3M9e2hhbmRsZXJzW2xldmVsLmlkXX1cbiAgICAgICAgICAgIGFjdGl2ZU9wYWNpdHk9ezAuN31cbiAgICAgICAgICAgIGFjY2Vzc2liaWxpdHlSb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgIGFjY2Vzc2liaWxpdHlMYWJlbD17YE5pdmVhdSAke2dldExldmVsTGFiZWwobGV2ZWwuaWQpfWB9XG4gICAgICAgICAgICBhY2Nlc3NpYmlsaXR5VmFsdWU9e3sgbWluOiAwLCBtYXg6IDEwMCwgbm93OiBsZXZlbC5wcm9ncmVzcyA/PyAwIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPFZpZXdcbiAgICAgICAgICAgICAgc3R5bGU9e1tcbiAgICAgICAgICAgICAgICBzdHlsZXMubGV2ZWxDaXJjbGUsXG4gICAgICAgICAgICAgICAgaXNBY3RpdmVcbiAgICAgICAgICAgICAgICAgID8gW3N0eWxlcy5hY3RpdmVMZXZlbENpcmNsZSwgeyBiYWNrZ3JvdW5kQ29sb3I6IGxldmVsLmNvbG9yIHx8IHByaW1hcnlDb2xvciB9XVxuICAgICAgICAgICAgICAgICAgOiBzdHlsZXMuZnV0dXJlTGV2ZWxDaXJjbGUsXG4gICAgICAgICAgICAgIF19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxUZXh0XG4gICAgICAgICAgICAgICAgc3R5bGU9e1tcbiAgICAgICAgICAgICAgICAgIHN0eWxlcy5sZXZlbFRleHQsXG4gICAgICAgICAgICAgICAgICBpc0FjdGl2ZVxuICAgICAgICAgICAgICAgICAgICA/IHN0eWxlcy5hY3RpdmVMZXZlbFRleHRcbiAgICAgICAgICAgICAgICAgICAgOiBbc3R5bGVzLmZ1dHVyZUxldmVsVGV4dCwgeyBjb2xvcjogY29sb3JzLnRleHRTZWNvbmRhcnkgfV0sXG4gICAgICAgICAgICAgICAgXX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtnZXRMZXZlbExhYmVsKGxldmVsLmlkKX1cbiAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgPC9WaWV3PlxuICAgICAgICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cbiAgICAgICAgKTtcbiAgICAgIH0pfVxuICAgIDwvVmlldz5cbiAgKTtcbn07XG5cbkxldmVsc0NpcmNsZVJvdy5wcm9wVHlwZXMgPSB7XG4gIGxldmVsczogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG4gIGN1cnJlbnRMZXZlbDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBvbkxldmVsUHJlc3M6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGdldExldmVsTGFiZWw6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGNvbG9yczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBwcmltYXJ5Q29sb3I6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgc3R5bGVzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG59O1xuXG4vKipcbiAqIEJhcnJlIGRlIHByb2dyZXNzaW9uIGdsb2JhbGVcbiAqL1xuY29uc3QgR2xvYmFsUHJvZ3Jlc3NCYXIgPSAoeyBwcm9ncmVzcywgcHJpbWFyeUNvbG9yLCBjb2xvcnMsIHN0eWxlcyB9KSA9PiAoXG4gIDxWaWV3IHN0eWxlPXtzdHlsZXMuZ2xvYmFsUHJvZ3Jlc3NDb250YWluZXJ9PlxuICAgIDxWaWV3IHN0eWxlPXtbc3R5bGVzLmdsb2JhbFByb2dyZXNzVHJhY2ssIHsgYmFja2dyb3VuZENvbG9yOiBgJHtwcmltYXJ5Q29sb3J9MTVgIH1dfT5cbiAgICAgIDxWaWV3XG4gICAgICAgIHN0eWxlPXtbXG4gICAgICAgICAgc3R5bGVzLmdsb2JhbFByb2dyZXNzRmlsbCxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB3aWR0aDogYCR7TWF0aC5taW4ocHJvZ3Jlc3MsIDEwMCl9JWAsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHByaW1hcnlDb2xvcixcbiAgICAgICAgICB9LFxuICAgICAgICBdfVxuICAgICAgLz5cbiAgICA8L1ZpZXc+XG4gICAgPFRleHQgc3R5bGU9e1tzdHlsZXMucHJvZ3Jlc3NMYWJlbCwgeyBjb2xvcjogY29sb3JzLnRleHRTZWNvbmRhcnkgfV19PlByb2dyZXNzaW9uIGdsb2JhbGU8L1RleHQ+XG4gIDwvVmlldz5cbik7XG5cbkdsb2JhbFByb2dyZXNzQmFyLnByb3BUeXBlcyA9IHtcbiAgcHJvZ3Jlc3M6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgcHJpbWFyeUNvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGNvbG9yczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBzdHlsZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbn07XG5cbi8qKlxuICogRW4tdMOqdGUgYXZlYyBpbmZvcyBkdSBuaXZlYXUgY291cmFudFxuICovXG5jb25zdCBQcm9ncmVzc0hlYWRlciA9ICh7IGxldmVsSW5mbywgbGV2ZWxMYWJlbCwgcHJvZ3Jlc3MsIHByaW1hcnlDb2xvciwgY29sb3JzLCBzdHlsZXMgfSkgPT4gKFxuICA8VmlldyBzdHlsZT17c3R5bGVzLmhlYWRlcn0+XG4gICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5wcm9ncmVzc0luZm99PlxuICAgICAgPFRleHQgc3R5bGU9e1tzdHlsZXMucHJvZ3Jlc3NUaXRsZSwgeyBjb2xvcjogY29sb3JzLnRleHQgfV19PlxuICAgICAgICB7bGV2ZWxJbmZvLnRpdGxlIHx8IGBOaXZlYXUgJHtsZXZlbExhYmVsfWB9XG4gICAgICA8L1RleHQ+XG4gICAgICA8VGV4dCBzdHlsZT17W3N0eWxlcy5wcm9ncmVzc1N1YnRpdGxlLCB7IGNvbG9yOiBjb2xvcnMudGV4dFNlY29uZGFyeSB9XX0+XG4gICAgICAgIENvbnRpbnVleiB2b3RyZSBhcHByZW50aXNzYWdlIHtsZXZlbEluZm8uaWNvbn1cbiAgICAgIDwvVGV4dD5cbiAgICA8L1ZpZXc+XG4gICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5wcm9ncmVzc0JhZGdlfT5cbiAgICAgIDxUZXh0IHN0eWxlPXtbc3R5bGVzLnByb2dyZXNzUGVyY2VudGFnZSwgeyBjb2xvcjogcHJpbWFyeUNvbG9yIH1dfT57cHJvZ3Jlc3N9JTwvVGV4dD5cbiAgICA8L1ZpZXc+XG4gIDwvVmlldz5cbik7XG5cblByb2dyZXNzSGVhZGVyLnByb3BUeXBlcyA9IHtcbiAgbGV2ZWxJbmZvOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGxldmVsTGFiZWw6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgcHJvZ3Jlc3M6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgcHJpbWFyeUNvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGNvbG9yczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBzdHlsZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbn07XG5cbi8qKlxuICogQ29tcG9zYW50IHByaW5jaXBhbCBMZWFybmluZ1Byb2dyZXNzXG4gKi9cbmNvbnN0IExlYXJuaW5nUHJvZ3Jlc3MgPSAoe1xuICBsZXZlbHMgPSBbXSxcbiAgY3VycmVudExldmVsID0gXCIxXCIsXG4gIG9uU2VsZWN0TGV2ZWwsXG4gIG9uQ2hhbmdlTGV2ZWxWaXN1YWwsXG4gIHByaW1hcnlDb2xvciA9IFwiIzNCODJGNlwiLFxuICBnbG9iYWxQcm9ncmVzcyA9IDAsXG59KSA9PiB7XG4gIGNvbnN0IHsgY29sb3JzOiB0aGVtZUNvbG9ycyA9IHt9IH0gPSB1c2VDb250ZXh0KFRoZW1lQ29udGV4dCkgfHwge307XG5cbiAgY29uc3QgY29sb3JzID0ge1xuICAgIHN1cmZhY2U6IHRoZW1lQ29sb3JzLnN1cmZhY2UgfHwgXCIjRkZGRkZGXCIsXG4gICAgdGV4dDogdGhlbWVDb2xvcnMudGV4dCB8fCBcIiMxRjI5MzdcIixcbiAgICB0ZXh0U2Vjb25kYXJ5OiB0aGVtZUNvbG9ycy50ZXh0U2Vjb25kYXJ5IHx8IFwiIzZCNzI4MFwiLFxuICB9O1xuXG4gIC8vIFNpIHBhcyBkZSBuaXZlYXV4IGZvdXJuaXMsIHByZW5kcmUgY2V1eCBwYXIgZMOpZmF1dFxuICBjb25zdCBlZmZlY3RpdmVMZXZlbHMgPSBsZXZlbHMubGVuZ3RoXG4gICAgPyBsZXZlbHNcbiAgICA6IE9iamVjdC5lbnRyaWVzKExBTkdVQUdFX0xFVkVMUykubWFwKChbaWQsIGRhdGFdKSA9PiAoe1xuICAgICAgICBpZCxcbiAgICAgICAgY29sb3I6IGRhdGEuY29sb3IsXG4gICAgICB9KSk7XG5cbiAgY29uc3QgY3VycmVudExldmVsSW5mbyA9IExBTkdVQUdFX0xFVkVMU1tjdXJyZW50TGV2ZWxdIHx8IExBTkdVQUdFX0xFVkVMU1tcIjFcIl07XG4gIGNvbnN0IGdldExldmVsTGFiZWwgPSAoaWQpID0+IChpZCA9PT0gXCJib251c1wiID8gXCJCXCIgOiBpZCk7XG5cbiAgLy8gSGFuZGxlciBjbGlxdWUgc3VyIGNlcmNsZSAoY2hhbmdlbWVudCB2aXN1ZWwpXG4gIGNvbnN0IGhhbmRsZUxldmVsUHJlc3MgPSB1c2VDYWxsYmFjayhcbiAgICAobGV2ZWxJZCkgPT4ge1xuICAgICAgaWYgKG9uQ2hhbmdlTGV2ZWxWaXN1YWwpIG9uQ2hhbmdlTGV2ZWxWaXN1YWwobGV2ZWxJZCk7XG4gICAgfSxcbiAgICBbb25DaGFuZ2VMZXZlbFZpc3VhbF1cbiAgKTtcblxuICAvLyBIYW5kbGVyIGNsaXF1ZSBzdXIgYm91dG9uIGV4cGxvcmVyIChuYXZpZ2F0aW9uKVxuICBjb25zdCBoYW5kbGVFeHBsb3JlUHJlc3MgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKG9uU2VsZWN0TGV2ZWwpIG9uU2VsZWN0TGV2ZWwoY3VycmVudExldmVsKTtcbiAgfSwgW29uU2VsZWN0TGV2ZWwsIGN1cnJlbnRMZXZlbF0pO1xuXG4gIHJldHVybiAoXG4gICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9PlxuICAgICAgPFRleHQgc3R5bGU9e1tzdHlsZXMuc2VjdGlvblRpdGxlLCB7IGNvbG9yOiBjb2xvcnMudGV4dCB9XX0+8J+PhiBQcm9ncmVzc2lvbiBnw6luw6lyYWxlPC9UZXh0PlxuICAgICAgPENhcmQgc3R5bGU9e1tzdHlsZXMuY2FyZCwgeyBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9ycy5zdXJmYWNlIH1dfT5cbiAgICAgICAgPFByb2dyZXNzSGVhZGVyXG4gICAgICAgICAgbGV2ZWxJbmZvPXtjdXJyZW50TGV2ZWxJbmZvfVxuICAgICAgICAgIGxldmVsTGFiZWw9e2dldExldmVsTGFiZWwoY3VycmVudExldmVsKX1cbiAgICAgICAgICBwcm9ncmVzcz17Z2xvYmFsUHJvZ3Jlc3N9XG4gICAgICAgICAgcHJpbWFyeUNvbG9yPXtwcmltYXJ5Q29sb3J9XG4gICAgICAgICAgY29sb3JzPXtjb2xvcnN9XG4gICAgICAgICAgc3R5bGVzPXtzdHlsZXN9XG4gICAgICAgIC8+XG4gICAgICAgIDxHbG9iYWxQcm9ncmVzc0JhclxuICAgICAgICAgIHByb2dyZXNzPXtnbG9iYWxQcm9ncmVzc31cbiAgICAgICAgICBwcmltYXJ5Q29sb3I9e3ByaW1hcnlDb2xvcn1cbiAgICAgICAgICBjb2xvcnM9e2NvbG9yc31cbiAgICAgICAgICBzdHlsZXM9e3N0eWxlc31cbiAgICAgICAgLz5cbiAgICAgICAgPExldmVsc0NpcmNsZVJvd1xuICAgICAgICAgIGxldmVscz17ZWZmZWN0aXZlTGV2ZWxzfVxuICAgICAgICAgIGN1cnJlbnRMZXZlbD17Y3VycmVudExldmVsfVxuICAgICAgICAgIG9uTGV2ZWxQcmVzcz17aGFuZGxlTGV2ZWxQcmVzc31cbiAgICAgICAgICBnZXRMZXZlbExhYmVsPXtnZXRMZXZlbExhYmVsfVxuICAgICAgICAgIGNvbG9ycz17Y29sb3JzfVxuICAgICAgICAgIHByaW1hcnlDb2xvcj17cHJpbWFyeUNvbG9yfVxuICAgICAgICAgIHN0eWxlcz17c3R5bGVzfVxuICAgICAgICAvPlxuICAgICAgICA8VG91Y2hhYmxlT3BhY2l0eVxuICAgICAgICAgIHRlc3RJRD1cImV4cGxvcmUtbGV2ZWwtYnV0dG9uXCJcbiAgICAgICAgICBzdHlsZT17W3N0eWxlcy5hY3Rpb25CdXR0b24sIHsgYm9yZGVyQ29sb3I6IHByaW1hcnlDb2xvciB9XX1cbiAgICAgICAgICBvblByZXNzPXtoYW5kbGVFeHBsb3JlUHJlc3N9XG4gICAgICAgICAgYWN0aXZlT3BhY2l0eT17MC43fVxuICAgICAgICAgIGFjY2Vzc2liaWxpdHlSb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgICBhY2Nlc3NpYmlsaXR5TGFiZWw9e2BFeHBsb3JlciBsZSBuaXZlYXUgJHtnZXRMZXZlbExhYmVsKGN1cnJlbnRMZXZlbCl9YH1cbiAgICAgICAgPlxuICAgICAgICAgIDxUZXh0IHN0eWxlPXtbc3R5bGVzLmFjdGlvbkJ1dHRvblRleHQsIHsgY29sb3I6IHByaW1hcnlDb2xvciB9XX0+XG4gICAgICAgICAgICBFeHBsb3JlciBsZSBuaXZlYXUge2dldExldmVsTGFiZWwoY3VycmVudExldmVsKX1cbiAgICAgICAgICA8L1RleHQ+XG4gICAgICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cbiAgICAgIDwvQ2FyZD5cbiAgICA8L1ZpZXc+XG4gICk7XG59O1xuXG5MZWFybmluZ1Byb2dyZXNzLnByb3BUeXBlcyA9IHtcbiAgbGV2ZWxzOiBQcm9wVHlwZXMuYXJyYXksXG4gIGN1cnJlbnRMZXZlbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgb25TZWxlY3RMZXZlbDogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uQ2hhbmdlTGV2ZWxWaXN1YWw6IFByb3BUeXBlcy5mdW5jLFxuICBwcmltYXJ5Q29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGdsb2JhbFByb2dyZXNzOiBQcm9wVHlwZXMubnVtYmVyLFxufTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IExlYXJuaW5nUHJvZ3Jlc3M7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLElBQUFBLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFVBQUEsR0FBQUMsc0JBQUEsQ0FBQUgsT0FBQTtBQUVBLElBQUFJLEtBQUEsR0FBQUQsc0JBQUEsQ0FBQUgsT0FBQTtBQUNBLElBQUFLLGFBQUEsR0FBQUwsT0FBQTtBQUNBLElBQUFNLFVBQUEsR0FBQU4sT0FBQTtBQUNBLElBQUFPLE1BQUEsR0FBQUosc0JBQUEsQ0FBQUgsT0FBQTtBQUE2QixJQUFBUSxXQUFBLEdBQUFSLE9BQUE7QUFBQSxTQUFBRCx3QkFBQVUsQ0FBQSxFQUFBQyxDQUFBLDZCQUFBQyxPQUFBLE1BQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQVosdUJBQUEsWUFBQUEsd0JBQUFVLENBQUEsRUFBQUMsQ0FBQSxTQUFBQSxDQUFBLElBQUFELENBQUEsSUFBQUEsQ0FBQSxDQUFBSyxVQUFBLFNBQUFMLENBQUEsTUFBQU0sQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsS0FBQUMsU0FBQSxRQUFBQyxPQUFBLEVBQUFWLENBQUEsaUJBQUFBLENBQUEsdUJBQUFBLENBQUEseUJBQUFBLENBQUEsU0FBQVEsQ0FBQSxNQUFBRixDQUFBLEdBQUFMLENBQUEs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