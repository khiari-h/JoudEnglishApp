9c4eab862a00a00189f6bd2a09df496a
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return require('@react-native-async-storage/async-storage/jest/async-storage-mock');
});
_getJestObj().mock('expo-font', function () {
  return {
    useFonts: function useFonts() {
      return [true];
    },
    isLoaded: function isLoaded() {
      return true;
    }
  };
});
_getJestObj().mock('expo-haptics', function () {
  return {
    impactAsync: jest.fn()
  };
});
_getJestObj().mock('react-native-reanimated', function () {
  var Reanimated = require('react-native-reanimated/mock');
  Reanimated.default.call = function () {};
  return Reanimated;
});
_getJestObj().mock('react-native/Libraries/Settings/Settings', function () {
  return {
    get: jest.fn(function () {
      return 'light';
    }),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn()
  };
});
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  RN.Animated = Object.assign({}, RN.Animated, {
    Value: jest.fn(function () {
      return {
        interpolate: jest.fn(function (config) {
          return config.outputRange[0];
        }),
        addListener: jest.fn(),
        removeListener: jest.fn(),
        removeAllListeners: jest.fn(),
        stopAnimation: jest.fn(),
        resetAnimation: jest.fn(),
        setValue: jest.fn()
      };
    }),
    timing: jest.fn(function () {
      return {
        start: jest.fn(function (callback) {
          if (callback) {
            callback({
              finished: true
            });
          }
        })
      };
    })
  });
  return RN;
});
_getJestObj().mock('react-native/Libraries/Components/StatusBar/StatusBar', function () {
  return {
    setBarStyle: jest.fn(),
    setBackgroundColor: jest.fn()
  };
});
var _reactNative = require("react-native");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
_reactNative.NativeModules.SettingsManager = _reactNative.NativeModules.SettingsManager || {
  settings: {
    AppleLocale: 'en_US'
  }
};
if (typeof setImmediate === 'undefined') {
  global.setImmediate = function (fn) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return setTimeout.apply(void 0, [fn, 0].concat(args));
  };
}
if (typeof clearImmediate === 'undefined') {
  global.clearImmediate = function (id) {
    return clearTimeout(id);
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJyZXF1aXJlIiwidXNlRm9udHMiLCJpc0xvYWRlZCIsImltcGFjdEFzeW5jIiwiamVzdCIsImZuIiwiUmVhbmltYXRlZCIsImRlZmF1bHQiLCJjYWxsIiwiZ2V0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJSTiIsInJlcXVpcmVBY3R1YWwiLCJBbmltYXRlZCIsIk9iamVjdCIsImFzc2lnbiIsIlZhbHVlIiwiaW50ZXJwb2xhdGUiLCJjb25maWciLCJvdXRwdXRSYW5nZSIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJzdG9wQW5pbWF0aW9uIiwicmVzZXRBbmltYXRpb24iLCJzZXRWYWx1ZSIsInRpbWluZyIsInN0YXJ0IiwiY2FsbGJhY2siLCJmaW5pc2hlZCIsInNldEJhclN0eWxlIiwic2V0QmFja2dyb3VuZENvbG9yIiwiX3JlYWN0TmF0aXZlIiwiX3JlcXVpcmUiLCJOYXRpdmVNb2R1bGVzIiwiU2V0dGluZ3NNYW5hZ2VyIiwic2V0dGluZ3MiLCJBcHBsZUxvY2FsZSIsInNldEltbWVkaWF0ZSIsImdsb2JhbCIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcmdzIiwiQXJyYXkiLCJfa2V5Iiwic2V0VGltZW91dCIsImFwcGx5IiwiY29uY2F0IiwiY2xlYXJJbW1lZGlhdGUiLCJpZCIsImNsZWFyVGltZW91dCJdLCJzb3VyY2VzIjpbImplc3Quc2V0dXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gamVzdC5zZXR1cC5qc1xuXG4vLyBMaWduZSBzdXBwcmltw6llIGNhciBjZSBtb2R1bGUgbidleGlzdGUgcGx1cyAvIGNhc3NlIEplc3QgOlxuLy8gamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUvTGlicmFyaWVzL0FuaW1hdGVkL05hdGl2ZUFuaW1hdGVkSGVscGVyJywgKCkgPT4gKHt9KSk7XG5cbmltcG9ydCB7IE5hdGl2ZU1vZHVsZXMgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuXG4vLyBNb2NrIEFzeW5jU3RvcmFnZSAodHLDqHMgdXRpbGlzw6kgZGFucyBSTilcbmplc3QubW9jaygnQHJlYWN0LW5hdGl2ZS1hc3luYy1zdG9yYWdlL2FzeW5jLXN0b3JhZ2UnLCAoKSA9PlxuICByZXF1aXJlKCdAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZS9qZXN0L2FzeW5jLXN0b3JhZ2UtbW9jaycpXG4pO1xuXG4vLyBNb2NrIEV4cG8gZm9udCAoc2kgdHUgdXRpbGlzZXMgZXhwby1mb250LCBzaW5vbiB0dSBwZXV4IHJldGlyZXIpXG5qZXN0Lm1vY2soJ2V4cG8tZm9udCcsICgpID0+ICh7XG4gIHVzZUZvbnRzOiAoKSA9PiBbdHJ1ZV0sXG4gIGlzTG9hZGVkOiAoKSA9PiB0cnVlLFxufSkpO1xuXG4vLyBNb2NrIEV4cG8gaGFwdGljcyAodmlicmF0aW9uKVxuamVzdC5tb2NrKCdleHBvLWhhcHRpY3MnLCAoKSA9PiAoe1xuICBpbXBhY3RBc3luYzogamVzdC5mbigpLFxufSkpO1xuXG4vLyBNb2NrIHJlYWN0LW5hdGl2ZS1yZWFuaW1hdGVkIHBvdXIgw6l2aXRlciBsZXMgZXJyZXVycyBkYW5zIGxlcyB0ZXN0c1xuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUtcmVhbmltYXRlZCcsICgpID0+IHtcbiAgY29uc3QgUmVhbmltYXRlZCA9IHJlcXVpcmUoJ3JlYWN0LW5hdGl2ZS1yZWFuaW1hdGVkL21vY2snKTtcblxuICAvLyBQYXRjaCBwb3VyIMOpdml0ZXIgZGVzIGVycmV1cnMgc3VwcGzDqW1lbnRhaXJlc1xuICBSZWFuaW1hdGVkLmRlZmF1bHQuY2FsbCA9ICgpID0+IHt9O1xuXG4gIHJldHVybiBSZWFuaW1hdGVkO1xufSk7XG5cbi8vIE1vY2sgZGVzIFNldHRpbmdzIG5hdGl2ZXMgKHBvdXIgw6l2aXRlciBlcnJldXJzIFR1cmJvTW9kdWxlUmVnaXN0cnkpXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvU2V0dGluZ3MvU2V0dGluZ3MnLCAoKSA9PiAoe1xuICBnZXQ6IGplc3QuZm4oKCkgPT4gJ2xpZ2h0JyksXG4gIGFkZEV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxufSkpO1xuXG4vLyBNb2NrIE5hdGl2ZU1vZHVsZXMuU2V0dGluZ3NNYW5hZ2VyIChzaW11bGUgbG9jYWxlKVxuTmF0aXZlTW9kdWxlcy5TZXR0aW5nc01hbmFnZXIgPSBOYXRpdmVNb2R1bGVzLlNldHRpbmdzTWFuYWdlciB8fCB7XG4gIHNldHRpbmdzOiB7IEFwcGxlTG9jYWxlOiAnZW5fVVMnIH0sXG59O1xyXG5cclxuLy8gUG9seWZpbGwgZ2xvYmFsIHBvdXIgc2V0SW1tZWRpYXRlIC8gY2xlYXJJbW1lZGlhdGUgKHBhcmZvaXMgbWFucXVhbnQpXHJcbmlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlID09PSAndW5kZWZpbmVkJykge1xyXG4gIGdsb2JhbC5zZXRJbW1lZGlhdGUgPSAoZm4sIC4uLmFyZ3MpID0+IHNldFRpbWVvdXQoZm4sIDAsIC4uLmFyZ3MpO1xyXG59XHJcbmlmICh0eXBlb2YgY2xlYXJJbW1lZGlhdGUgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgZ2xvYmFsLmNsZWFySW1tZWRpYXRlID0gKGlkKSA9PiBjbGVhclRpbWVvdXQoaWQpO1xyXG59XHJcblxyXG4vLyBNb2NrIGNvbXBsZXQgZXQgcm9idXN0ZSBkdSBtb2R1bGUgQW5pbWF0ZWRcclxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUnLCAoKSA9PiB7XHJcbiAgY29uc3QgUk4gPSBqZXN0LnJlcXVpcmVBY3R1YWwoJ3JlYWN0LW5hdGl2ZScpO1xyXG5cclxuICAvLyBNb2NrIEFuaW1hdGVkXHJcbiAgUk4uQW5pbWF0ZWQgPSB7XHJcbiAgICAuLi5STi5BbmltYXRlZCxcclxuICAgIFZhbHVlOiBqZXN0LmZuKCgpID0+ICh7XHJcbiAgICAgIGludGVycG9sYXRlOiBqZXN0LmZuKGNvbmZpZyA9PiBjb25maWcub3V0cHV0UmFuZ2VbMF0pLFxyXG4gICAgICBhZGRMaXN0ZW5lcjogamVzdC5mbigpLFxyXG4gICAgICByZW1vdmVMaXN0ZW5lcjogamVzdC5mbigpLFxyXG4gICAgICByZW1vdmVBbGxMaXN0ZW5lcnM6IGplc3QuZm4oKSxcclxuICAgICAgc3RvcEFuaW1hdGlvbjogamVzdC5mbigpLFxyXG4gICAgICByZXNldEFuaW1hdGlvbjogamVzdC5mbigpLFxyXG4gICAgICBzZXRWYWx1ZTogamVzdC5mbigpLFxyXG4gICAgfSkpLFxyXG4gICAgdGltaW5nOiBqZXN0LmZuKCgpID0+ICh7XHJcbiAgICAgIHN0YXJ0OiBqZXN0LmZuKGNhbGxiYWNrID0+IHtcclxuICAgICAgICBpZiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgIGNhbGxiYWNrKHsgZmluaXNoZWQ6IHRydWUgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KSxcclxuICAgIH0pKSxcclxuICB9O1xyXG5cclxuICByZXR1cm4gUk47XHJcbn0pO1xyXG5cclxuLy8gTW9jayBkaXJlY3QgZGUgU3RhdHVzQmFyXHJcbmplc3QubW9jaygncmVhY3QtbmF0aXZlL0xpYnJhcmllcy9Db21wb25lbnRzL1N0YXR1c0Jhci9TdGF0dXNCYXInLCAoKSA9PiAoe1xyXG4gIHNldEJhclN0eWxlOiBqZXN0LmZuKCksXHJcbiAgc2V0QmFja2dyb3VuZENvbG9yOiBqZXN0LmZuKCksXHJcbn0pKTsiXSwibWFwcGluZ3MiOiJBQVFBQSxXQUFBLEdBQUtDLElBQUksQ0FBQywyQ0FBMkMsRUFBRTtFQUFBLE9BQ3JEQyxPQUFPLENBQUMsbUVBQW1FLENBQUM7QUFBQSxDQUM5RSxDQUFDO0FBR0RGLFdBQUEsR0FBS0MsSUFBSSxDQUFDLFdBQVcsRUFBRTtFQUFBLE9BQU87SUFDNUJFLFFBQVEsRUFBRSxTQUFWQSxRQUFRQSxDQUFBO01BQUEsT0FBUSxDQUFDLElBQUksQ0FBQztJQUFBO0lBQ3RCQyxRQUFRLEVBQUUsU0FBVkEsUUFBUUEsQ0FBQTtNQUFBLE9BQVEsSUFBSTtJQUFBO0VBQ3RCLENBQUM7QUFBQSxDQUFDLENBQUM7QUFHSEosV0FBQSxHQUFLQyxJQUFJLENBQUMsY0FBYyxFQUFFO0VBQUEsT0FBTztJQUMvQkksV0FBVyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQztFQUN2QixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBR0hQLFdBQUEsR0FBS0MsSUFBSSxDQUFDLHlCQUF5QixFQUFFLFlBQU07RUFDekMsSUFBTU8sVUFBVSxHQUFHTixPQUFPLENBQUMsOEJBQThCLENBQUM7RUFHMURNLFVBQVUsQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLEdBQUcsWUFBTSxDQUFDLENBQUM7RUFFbEMsT0FBT0YsVUFBVTtBQUNuQixDQUFDLENBQUM7QUFHRlIsV0FBQSxHQUFLQyxJQUFJLENBQUMsMENBQTBDLEVBQUU7RUFBQSxPQUFPO0lBQzNEVSxHQUFHLEVBQUVMLElBQUksQ0FBQ0MsRUFBRSxDQUFDO01BQUEsT0FBTSxPQUFPO0lBQUEsRUFBQztJQUMzQkssZ0JBQWdCLEVBQUVOLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDM0JNLG1CQUFtQixFQUFFUCxJQUFJLENBQUNDLEVBQUUsQ0FBQztFQUMvQixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBZ0JIUCxXQUFBLEdBQUtDLElBQUksQ0FBQyxjQUFjLEVBQUUsWUFBTTtFQUM5QixJQUFNYSxFQUFFLEdBQUdSLElBQUksQ0FBQ1MsYUFBYSxDQUFDLGNBQWMsQ0FBQztFQUc3Q0QsRUFBRSxDQUFDRSxRQUFRLEdBQUFDLE1BQUEsQ0FBQUMsTUFBQSxLQUNOSixFQUFFLENBQUNFLFFBQVE7SUFDZEcsS0FBSyxFQUFFYixJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFBLE9BQU87UUFDcEJhLFdBQVcsRUFBRWQsSUFBSSxDQUFDQyxFQUFFLENBQUMsVUFBQWMsTUFBTTtVQUFBLE9BQUlBLE1BQU0sQ0FBQ0MsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUFBLEVBQUM7UUFDckRDLFdBQVcsRUFBRWpCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7UUFDdEJpQixjQUFjLEVBQUVsQixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO1FBQ3pCa0Isa0JBQWtCLEVBQUVuQixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO1FBQzdCbUIsYUFBYSxFQUFFcEIsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztRQUN4Qm9CLGNBQWMsRUFBRXJCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7UUFDekJxQixRQUFRLEVBQUV0QixJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUNwQixDQUFDO0lBQUEsQ0FBQyxDQUFDO0lBQ0hzQixNQUFNLEVBQUV2QixJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFBLE9BQU87UUFDckJ1QixLQUFLLEVBQUV4QixJQUFJLENBQUNDLEVBQUUsQ0FBQyxVQUFBd0IsUUFBUSxFQUFJO1VBQ3pCLElBQUlBLFFBQVEsRUFBRTtZQUNaQSxRQUFRLENBQUM7Y0FBRUMsUUFBUSxFQUFFO1lBQUssQ0FBQyxDQUFDO1VBQzlCO1FBQ0YsQ0FBQztNQUNILENBQUM7SUFBQSxDQUFDO0VBQUMsRUFDSjtFQUVELE9BQU9sQixFQUFFO0FBQ1gsQ0FBQyxDQUFDO0FBR0ZkLFdBQUEsR0FBS0MsSUFBSSxDQUFDLHVEQUF1RCxFQUFFO0VBQUEsT0FBTztJQUN4RWdDLFdBQVcsRUFBRTNCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDdEIyQixrQkFBa0IsRUFBRTVCLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0VBQzlCLENBQUM7QUFBQSxDQUFDLENBQUM7QUFoRkgsSUFBQTRCLFlBQUEsR0FBQWpDLE9BQUE7QUFBNkMsU0FBQUYsWUFBQTtFQUFBLElBQUFvQyxRQUFBLEdBQUFsQyxPQUFBO0lBQUFJLElBQUEsR0FBQThCLFFBQUEsQ0FBQTlCLElBQUE7RUFBQU4sV0FBQSxZQUFBQSxZQUFBO0lBQUEsT0FBQU0sSUFBQTtFQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBb0M3QytCLDBCQUFhLENBQUNDLGVBQWUsR0FBR0QsMEJBQWEsQ0FBQ0MsZUFBZSxJQUFJO0VBQy9EQyxRQUFRLEVBQUU7SUFBRUMsV0FBVyxFQUFFO0VBQVE7QUFDbkMsQ0FBQztBQUdELElBQUksT0FBT0MsWUFBWSxLQUFLLFdBQVcsRUFBRTtFQUN2Q0MsTUFBTSxDQUFDRCxZQUFZLEdBQUcsVUFBQ2xDLEVBQUU7SUFBQSxTQUFBb0MsSUFBQSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsRUFBS0MsSUFBSSxPQUFBQyxLQUFBLENBQUFKLElBQUEsT0FBQUEsSUFBQSxXQUFBSyxJQUFBLE1BQUFBLElBQUEsR0FBQUwsSUFBQSxFQUFBSyxJQUFBO01BQUpGLElBQUksQ0FBQUUsSUFBQSxRQUFBSixTQUFBLENBQUFJLElBQUE7SUFBQTtJQUFBLE9BQUtDLFVBQVUsQ0FBQUMsS0FBQSxVQUFDM0MsRUFBRSxFQUFFLENBQUMsRUFBQTRDLE1BQUEsQ0FBS0wsSUFBSSxFQUFDO0VBQUE7QUFDbkU7QUFDQSxJQUFJLE9BQU9NLGNBQWMsS0FBSyxXQUFXLEVBQUU7RUFDekNWLE1BQU0sQ0FBQ1UsY0FBYyxHQUFHLFVBQUNDLEVBQUU7SUFBQSxPQUFLQyxZQUFZLENBQUNELEVBQUUsQ0FBQztFQUFBO0FBQ2xEIiwiaWdub3JlTGlzdCI6W119