63e1f0751f85e15be395f4c53f71627e
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseBase"));
var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseKey"));
var _NativeAnimatedHelper2 = _interopRequireDefault(require("../../../src/private/animated/NativeAnimatedHelper"));
var _invariant = _interopRequireDefault(require("invariant"));
var _NativeAnimatedHelper = _NativeAnimatedHelper2.default.API,
  startListeningToAnimatedNodeValue = _NativeAnimatedHelper.startListeningToAnimatedNodeValue,
  stopListeningToAnimatedNodeValue = _NativeAnimatedHelper.stopListeningToAnimatedNodeValue;
var _uniqueId = 1;
var _assertNativeAnimatedModule2 = function _assertNativeAnimatedModule() {
  _NativeAnimatedHelper2.default.assertNativeAnimatedModule();
  _assertNativeAnimatedModule2 = null;
};
var _listeners = (0, _classPrivateFieldLooseKey2.default)("listeners");
var AnimatedNode = exports.default = function () {
  function AnimatedNode() {
    (0, _classCallCheck2.default)(this, AnimatedNode);
    Object.defineProperty(this, _listeners, {
      writable: true,
      value: new Map()
    });
    this._platformConfig = undefined;
    this.__nativeAnimatedValueListener = null;
    this.__isNative = false;
    this.__nativeTag = undefined;
    this.__shouldUpdateListenersForNewNativeTag = false;
  }
  return (0, _createClass2.default)(AnimatedNode, [{
    key: "__attach",
    value: function __attach() {}
  }, {
    key: "__detach",
    value: function __detach() {
      this.removeAllListeners();
      if (this.__isNative && this.__nativeTag != null) {
        _NativeAnimatedHelper2.default.API.dropAnimatedNode(this.__nativeTag);
        this.__nativeTag = undefined;
      }
    }
  }, {
    key: "__getValue",
    value: function __getValue() {}
  }, {
    key: "__getAnimatedValue",
    value: function __getAnimatedValue() {
      return this.__getValue();
    }
  }, {
    key: "__addChild",
    value: function __addChild(child) {}
  }, {
    key: "__removeChild",
    value: function __removeChild(child) {}
  }, {
    key: "__getChildren",
    value: function __getChildren() {
      return [];
    }
  }, {
    key: "__makeNative",
    value: function __makeNative(platformConfig) {
      if (!this.__isNative) {
        throw new Error('This node cannot be made a "native" animated node');
      }
      this._platformConfig = platformConfig;
      if ((0, _classPrivateFieldLooseBase2.default)(this, _listeners)[_listeners].size > 0) {
        this._startListeningToNativeValueUpdates();
      }
    }
  }, {
    key: "addListener",
    value: function addListener(callback) {
      var id = String(_uniqueId++);
      (0, _classPrivateFieldLooseBase2.default)(this, _listeners)[_listeners].set(id, callback);
      if (this.__isNative) {
        this._startListeningToNativeValueUpdates();
      }
      return id;
    }
  }, {
    key: "removeListener",
    value: function removeListener(id) {
      (0, _classPrivateFieldLooseBase2.default)(this, _listeners)[_listeners].delete(id);
      if (this.__isNative && (0, _classPrivateFieldLooseBase2.default)(this, _listeners)[_listeners].size === 0) {
        this._stopListeningForNativeValueUpdates();
      }
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners() {
      (0, _classPrivateFieldLooseBase2.default)(this, _listeners)[_listeners].clear();
      if (this.__isNative) {
        this._stopListeningForNativeValueUpdates();
      }
    }
  }, {
    key: "hasListeners",
    value: function hasListeners() {
      return (0, _classPrivateFieldLooseBase2.default)(this, _listeners)[_listeners].size > 0;
    }
  }, {
    key: "_startListeningToNativeValueUpdates",
    value: function _startListeningToNativeValueUpdates() {
      var _this = this;
      if (this.__nativeAnimatedValueListener && !this.__shouldUpdateListenersForNewNativeTag) {
        return;
      }
      if (this.__shouldUpdateListenersForNewNativeTag) {
        this.__shouldUpdateListenersForNewNativeTag = false;
        this._stopListeningForNativeValueUpdates();
      }
      startListeningToAnimatedNodeValue(this.__getNativeTag());
      this.__nativeAnimatedValueListener = _NativeAnimatedHelper2.default.nativeEventEmitter.addListener('onAnimatedValueUpdate', function (data) {
        if (data.tag !== _this.__getNativeTag()) {
          return;
        }
        _this.__onAnimatedValueUpdateReceived(data.value);
      });
    }
  }, {
    key: "__onAnimatedValueUpdateReceived",
    value: function __onAnimatedValueUpdateReceived(value) {
      this.__callListeners(value);
    }
  }, {
    key: "__callListeners",
    value: function __callListeners(value) {
      var event = {
        value: value
      };
      (0, _classPrivateFieldLooseBase2.default)(this, _listeners)[_listeners].forEach(function (listener) {
        listener(event);
      });
    }
  }, {
    key: "_stopListeningForNativeValueUpdates",
    value: function _stopListeningForNativeValueUpdates() {
      if (!this.__nativeAnimatedValueListener) {
        return;
      }
      this.__nativeAnimatedValueListener.remove();
      this.__nativeAnimatedValueListener = null;
      stopListeningToAnimatedNodeValue(this.__getNativeTag());
    }
  }, {
    key: "__getNativeTag",
    value: function __getNativeTag() {
      var nativeTag = this.__nativeTag;
      if (nativeTag == null) {
        _assertNativeAnimatedModule2 == null || _assertNativeAnimatedModule2();
        (0, _invariant.default)(this.__isNative, 'Attempt to get native tag from node not marked as "native"');
        nativeTag = _NativeAnimatedHelper2.default.generateNewNodeTag();
        this.__nativeTag = nativeTag;
        var config = this.__getNativeConfig();
        if (this._platformConfig) {
          config.platformConfig = this._platformConfig;
        }
        _NativeAnimatedHelper2.default.API.createAnimatedNode(nativeTag, config);
        this.__shouldUpdateListenersForNewNativeTag = true;
      }
      return nativeTag;
    }
  }, {
    key: "__getNativeConfig",
    value: function __getNativeConfig() {
      throw new Error('This JS animated node type cannot be used as native animated node');
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.__getValue();
    }
  }, {
    key: "__getPlatformConfig",
    value: function __getPlatformConfig() {
      return this._platformConfig;
    }
  }, {
    key: "__setPlatformConfig",
    value: function __setPlatformConfig(platformConfig) {
      this._platformConfig = platformConfig;
    }
  }]);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,