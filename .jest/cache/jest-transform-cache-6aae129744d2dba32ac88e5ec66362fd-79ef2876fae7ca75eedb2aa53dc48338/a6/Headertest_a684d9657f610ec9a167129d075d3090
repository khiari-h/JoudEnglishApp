79658f7c3f8bae898c6a506978fcecd8
_getJestObj().mock('@expo/vector-icons');
_getJestObj().mock("@react-navigation/native", function () {
  return {
    useNavigation: function useNavigation() {
      return {
        canGoBack: function canGoBack() {
          return true;
        },
        goBack: jest.fn()
      };
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Header = _interopRequireDefault(require("../../../src/components/layout/Header"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe("Header component", function () {
  it("affiche le titre passé en props", function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Accueil"
      })),
      getByText = _render.getByText;
    expect(getByText("Accueil")).toBeTruthy();
  });
  it("appelle onBackPress quand on clique sur le bouton retour", function () {
    var onBackPress = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Retour",
        onBackPress: onBackPress
      })),
      getByRole = _render2.getByRole;
    _reactNative.fireEvent.press(getByRole("button"));
    expect(onBackPress).toHaveBeenCalled();
  });
  it("affiche le bouton droit avec icône et déclenche onRightPress", function () {
    var onRightPress = jest.fn();
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Actions",
        rightIcon: "settings",
        onRightPress: onRightPress
      })),
      getAllByRole = _render3.getAllByRole;
    var buttons = getAllByRole("button");
    _reactNative.fireEvent.press(buttons[1]);
    expect(onRightPress).toHaveBeenCalled();
  });
  it("n'affiche pas le bouton retour si showBackButton est false", function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Sans retour",
        showBackButton: false
      })),
      queryByRole = _render4.queryByRole;
    expect(queryByRole("button")).toBeNull();
  });
  it("affiche le composant custom à gauche (leftComponent)", function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Custom",
        leftComponent: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "custom-left",
          children: "\uD83D\uDC48"
        })
      })),
      getByTestId = _render5.getByTestId,
      queryByRole = _render5.queryByRole;
    expect(getByTestId("custom-left")).toBeTruthy();
    expect(queryByRole("button")).toBeNull();
  });
  it("affiche les enfants si children est fourni et ignore le contenu standard", function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Ignore ce titre",
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "custom-child",
          children: "\uD83D\uDD27 Custom Child"
        })
      })),
      getByTestId = _render6.getByTestId,
      queryByText = _render6.queryByText;
    expect(getByTestId("custom-child")).toBeTruthy();
    expect(queryByText("Ignore ce titre")).toBeNull();
  });
  it("affiche le titre large et le sous-titre en mode largeTitle", function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Grand titre",
        subtitle: "Sous-titre",
        largeTitleMode: true
      })),
      getByText = _render7.getByText;
    expect(getByText("Grand titre")).toBeTruthy();
    expect(getByText("Sous-titre")).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,