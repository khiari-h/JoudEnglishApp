e15dc2c64bbb97a3212d4cdc089793e1
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComplexAnimationBuilder = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _index = require("../../animation/index.js");
var _BaseAnimationBuilder2 = require("./BaseAnimationBuilder.js");
var _util = require("../../animation/util.js");
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var ComplexAnimationBuilder = exports.ComplexAnimationBuilder = function (_BaseAnimationBuilder) {
  function ComplexAnimationBuilder() {
    (0, _classCallCheck2.default)(this, ComplexAnimationBuilder);
    return _callSuper(this, ComplexAnimationBuilder, arguments);
  }
  (0, _inherits2.default)(ComplexAnimationBuilder, _BaseAnimationBuilder);
  return (0, _createClass2.default)(ComplexAnimationBuilder, [{
    key: "easing",
    value: function easing(easingFunction) {
      if (__DEV__) {
        (0, _util.assertEasingIsWorklet)(easingFunction);
      }
      this.easingV = easingFunction;
      return this;
    }
  }, {
    key: "rotate",
    value: function rotate(degree) {
      this.rotateV = degree;
      return this;
    }
  }, {
    key: "springify",
    value: function springify(duration) {
      this.durationV = duration;
      this.type = _index.withSpring;
      return this;
    }
  }, {
    key: "dampingRatio",
    value: function dampingRatio(value) {
      this.dampingRatioV = value;
      return this;
    }
  }, {
    key: "damping",
    value: function damping(_damping2) {
      this.dampingV = _damping2;
      return this;
    }
  }, {
    key: "mass",
    value: function mass(_mass2) {
      this.massV = _mass2;
      return this;
    }
  }, {
    key: "stiffness",
    value: function stiffness(_stiffness2) {
      this.stiffnessV = _stiffness2;
      return this;
    }
  }, {
    key: "overshootClamping",
    value: function overshootClamping(_overshootClamping2) {
      this.overshootClampingV = _overshootClamping2;
      return this;
    }
  }, {
    key: "restDisplacementThreshold",
    value: function restDisplacementThreshold(_restDisplacementThreshold2) {
      this.restDisplacementThresholdV = _restDisplacementThreshold2;
      return this;
    }
  }, {
    key: "restSpeedThreshold",
    value: function restSpeedThreshold(_restSpeedThreshold2) {
      this.restSpeedThresholdV = _restSpeedThreshold2;
      return this;
    }
  }, {
    key: "withInitialValues",
    value: function withInitialValues(values) {
      this.initialValues = values;
      return this;
    }
  }, {
    key: "getAnimationAndConfig",
    value: function getAnimationAndConfig() {
      var duration = this.durationV;
      var easing = this.easingV;
      var rotate = this.rotateV;
      var type = this.type ? this.type : _index.withTiming;
      var damping = this.dampingV;
      var dampingRatio = this.dampingRatioV;
      var mass = this.massV;
      var stiffness = this.stiffnessV;
      var overshootClamping = this.overshootClampingV;
      var restDisplacementThreshold = this.restDisplacementThresholdV;
      var restSpeedThreshold = this.restSpeedThresholdV;
      var animation = type;
      var config = {};
      function maybeSetConfigValue(value, variableName) {
        if (value) {
          config[variableName] = value;
        }
      }
      if (type === _index.withTiming) {
        maybeSetConfigValue(easing, 'easing');
      }
      [{
        variableName: 'damping',
        value: damping
      }, {
        variableName: 'dampingRatio',
        value: dampingRatio
      }, {
        variableName: 'mass',
        value: mass
      }, {
        variableName: 'stiffness',
        value: stiffness
      }, {
        variableName: 'overshootClamping',
        value: overshootClamping
      }, {
        variableName: 'restDisplacementThreshold',
        value: restDisplacementThreshold
      }, {
        variableName: 'restSpeedThreshold',
        value: restSpeedThreshold
      }, {
        variableName: 'duration',
        value: duration
      }, {
        variableName: 'rotate',
        value: rotate
      }].forEach(function (_ref) {
        var value = _ref.value,
          variableName = _ref.variableName;
        return maybeSetConfigValue(value, variableName);
      });
      return [animation, config];
    }
  }], [{
    key: "easing",
    value: function easing(easingFunction) {
      var instance = this.createInstance();
      return instance.easing(easingFunction);
    }
  }, {
    key: "rotate",
    value: function rotate(degree) {
      var instance = this.createInstance();
      return instance.rotate(degree);
    }
  }, {
    key: "springify",
    value: function springify(duration) {
      var instance = this.createInstance();
      return instance.springify(duration);
    }
  }, {
    key: "dampingRatio",
    value: function dampingRatio(_dampingRatio) {
      var instance = this.createInstance();
      return instance.dampingRatio(_dampingRatio);
    }
  }, {
    key: "damping",
    value: function damping(_damping) {
      var instance = this.createInstance();
      return instance.damping(_damping);
    }
  }, {
    key: "mass",
    value: function mass(_mass) {
      var instance = this.createInstance();
      return instance.mass(_mass);
    }
  }, {
    key: "stiffness",
    value: function stiffness(_stiffness) {
      var instance = this.createInstance();
      return instance.stiffness(_stiffness);
    }
  }, {
    key: "overshootClamping",
    value: function overshootClamping(_overshootClamping) {
      var instance = this.createInstance();
      return instance.overshootClamping(_overshootClamping);
    }
  }, {
    key: "restDisplacementThreshold",
    value: function restDisplacementThreshold(_restDisplacementThreshold) {
      var instance = this.createInstance();
      return instance.restDisplacementThreshold(_restDisplacementThreshold);
    }
  }, {
    key: "restSpeedThreshold",
    value: function restSpeedThreshold(_restSpeedThreshold) {
      var instance = this.createInstance();
      return instance.restSpeedThreshold(_restSpeedThreshold);
    }
  }, {
    key: "withInitialValues",
    value: function withInitialValues(values) {
      var instance = this.createInstance();
      return instance.withInitialValues(values);
    }
  }]);
}(_BaseAnimationBuilder2.BaseAnimationBuilder);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,