{"version":3,"names":["_interopRequireDefault","require","_classCallCheck2","_createClass2","Blob","parts","arguments","length","undefined","options","default","BlobManager","data","createFromParts","key","get","_data","Error","set","value","slice","start","end","contentType","_this$data","offset","size","createFromOptions","blobId","type","__collector","close","release","module","exports"],"sources":["Blob.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport type {BlobData, BlobOptions} from './BlobTypes';\n\n/**\n * Opaque JS representation of some binary data in native.\n *\n * The API is modeled after the W3C Blob API, with one caveat\n * regarding explicit deallocation. Refer to the `close()`\n * method for further details.\n *\n * Example usage in a React component:\n *\n *   class WebSocketImage extends React.Component {\n *      state = {blob: null};\n *      componentDidMount() {\n *        let ws = this.ws = new WebSocket(...);\n *        ws.binaryType = 'blob';\n *        ws.onmessage = (event) => {\n *          if (this.state.blob) {\n *            this.state.blob.close();\n *          }\n *          this.setState({blob: event.data});\n *        };\n *      }\n *      componentUnmount() {\n *        if (this.state.blob) {\n *          this.state.blob.close();\n *        }\n *        this.ws.close();\n *      }\n *      render() {\n *        if (!this.state.blob) {\n *          return <View />;\n *        }\n *        return <Image source={{uri: URL.createObjectURL(this.state.blob)}} />;\n *      }\n *   }\n *\n * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob\n */\nclass Blob {\n  _data: ?BlobData;\n\n  /**\n   * Constructor for JS consumers.\n   * Currently we only support creating Blobs from other Blobs.\n   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob\n   */\n  constructor(parts: Array<Blob | string> = [], options?: BlobOptions) {\n    const BlobManager = require('./BlobManager');\n    this.data = BlobManager.createFromParts(parts, options).data;\n  }\n\n  /*\n   * This method is used to create a new Blob object containing\n   * the data in the specified range of bytes of the source Blob.\n   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/slice\n   */\n  // $FlowFixMe[unsafe-getters-setters]\n  set data(data: ?BlobData) {\n    this._data = data;\n  }\n\n  // $FlowFixMe[unsafe-getters-setters]\n  get data(): BlobData {\n    if (!this._data) {\n      throw new Error('Blob has been closed and is no longer available');\n    }\n\n    return this._data;\n  }\n\n  slice(start?: number, end?: number, contentType: string = ''): Blob {\n    const BlobManager = require('./BlobManager');\n    let {offset, size} = this.data;\n\n    if (typeof start === 'number') {\n      if (start > size) {\n        // $FlowFixMe[reassign-const]\n        start = size;\n      }\n      offset += start;\n      size -= start;\n\n      if (typeof end === 'number') {\n        if (end < 0) {\n          // $FlowFixMe[reassign-const]\n          end = this.size + end;\n        }\n        if (end > this.size) {\n          // $FlowFixMe[reassign-const]\n          end = this.size;\n        }\n        size = end - start;\n      }\n    }\n    return BlobManager.createFromOptions({\n      blobId: this.data.blobId,\n      offset,\n      size,\n      type: contentType,\n      /* Since `blob.slice()` creates a new view onto the same binary\n       * data as the original blob, we should re-use the same collector\n       * object so that the underlying resource gets deallocated when\n       * the last view into the data is released, not the first.\n       */\n      __collector: this.data.__collector,\n    });\n  }\n\n  /**\n   * This method is in the standard, but not actually implemented by\n   * any browsers at this point. It's important for how Blobs work in\n   * React Native, however, since we cannot de-allocate resources automatically,\n   * so consumers need to explicitly de-allocate them.\n   *\n   * Note that the semantics around Blobs created via `blob.slice()`\n   * and `new Blob([blob])` are different. `blob.slice()` creates a\n   * new *view* onto the same binary data, so calling `close()` on any\n   * of those views is enough to deallocate the data, whereas\n   * `new Blob([blob, ...])` actually copies the data in memory.\n   */\n  close() {\n    const BlobManager = require('./BlobManager');\n    BlobManager.release(this.data.blobId);\n    this.data = null;\n  }\n\n  /**\n   * Size of the data contained in the Blob object, in bytes.\n   */\n  // $FlowFixMe[unsafe-getters-setters]\n  get size(): number {\n    return this.data.size;\n  }\n\n  /*\n   * String indicating the MIME type of the data contained in the Blob.\n   * If the type is unknown, this string is empty.\n   */\n  // $FlowFixMe[unsafe-getters-setters]\n  get type(): string {\n    return this.data.type || '';\n  }\n}\n\nmodule.exports = Blob;\n"],"mappings":"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","ignoreList":[]}