eb2bdc451afe0c77f700cb9fee2d7896
_getJestObj().mock('../../../src/hooks/useRevisionSettings');
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn()
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/popup/RevisionPopup', function () {
  var _require = require('react-native'),
    View = _require.View,
    Text = _require.Text,
    Button = _require.Button;
  return function (_ref) {
    var visible = _ref.visible,
      onChoice = _ref.onChoice,
      onDismiss = _ref.onDismiss,
      totalWordsLearned = _ref.totalWordsLearned,
      questionsCount = _ref.questionsCount;
    if (!visible) {
      return null;
    }
    return (0, _jsxRuntime.jsxs)(View, {
      testID: "revision-popup",
      children: [(0, _jsxRuntime.jsxs)(Text, {
        testID: "popup-words",
        children: ["Words: ", totalWordsLearned]
      }), (0, _jsxRuntime.jsxs)(Text, {
        testID: "popup-questions",
        children: ["Questions: ", questionsCount]
      }), (0, _jsxRuntime.jsx)(Button, {
        testID: "popup-now",
        title: "Now",
        onPress: function onPress() {
          return onChoice('now');
        }
      }), (0, _jsxRuntime.jsx)(Button, {
        testID: "popup-later50",
        title: "Later 50",
        onPress: function onPress() {
          return onChoice('later_50');
        }
      }), (0, _jsxRuntime.jsx)(Button, {
        testID: "popup-disable",
        title: "Disable",
        onPress: function onPress() {
          return onChoice('disable');
        }
      }), (0, _jsxRuntime.jsx)(Button, {
        testID: "popup-dismiss",
        title: "Dismiss",
        onPress: onDismiss
      })]
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _RevisionOrchestrator = _interopRequireDefault(require("../../../src/screens/VocabularyRevision/RevisionOrchestrator"));
var RevisionSettingsHook = _interopRequireWildcard(require("../../../src/hooks/useRevisionSettings"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _expoRouter = require("expo-router");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('RevisionOrchestrator', function () {
  var mockUseRevisionSettings;
  var createWordsData = function createWordsData(wordCount) {
    var levels = ['1', '2', '3', '4', '5', '6', 'bonus'];
    var modes = ['classic', 'fast'];
    var result = {};
    var totalCreated = 0;
    var _loop = function _loop(level) {
      var _loop2 = function _loop2(mode) {
          if (totalCreated >= wordCount) return 0;
          var wordsForThisSection = Math.min(wordCount - totalCreated, Math.ceil(wordCount / (levels.length * modes.length)));
          result[`vocabulary_${level}_${mode}`] = JSON.stringify({
            completedWords: {
              unit1: Array.from({
                length: wordsForThisSection
              }, function (_, i) {
                return `word_${level}_${mode}_${i}`;
              })
            }
          });
          totalCreated += wordsForThisSection;
          if (totalCreated >= wordCount) return 0;
        },
        _ret;
      for (var mode of modes) {
        _ret = _loop2(mode);
        if (_ret === 0) break;
      }
      if (totalCreated >= wordCount) return 1;
    };
    for (var level of levels) {
      if (_loop(level)) break;
    }
    return result;
  };
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
    mockUseRevisionSettings = {
      preferences: {
        isDisabled: false,
        nextRevisionAt: 100,
        questionsCount: 10,
        frequency: 50
      },
      disableRevisions: jest.fn().mockResolvedValue(true),
      resetToNextTarget: jest.fn().mockResolvedValue(true),
      updatePreferences: jest.fn().mockResolvedValue(true)
    };
    RevisionSettingsHook.useRevisionSettings.mockReturnValue(mockUseRevisionSettings);
    var defaultWordsData = createWordsData(3);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(defaultWordsData[key] || null);
    });
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  it('ne rend rien si les révisions sont désactivées', (0, _asyncToGenerator2.default)(function* () {
    mockUseRevisionSettings.preferences.isDisabled = true;
    RevisionSettingsHook.useRevisionSettings.mockReturnValue(mockUseRevisionSettings);
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      queryByTestId = _render.queryByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(2000);
    }));
    expect(queryByTestId('revision-popup')).toBeNull();
  }));
  it('ne montre pas la popup si le nombre de mots est inférieur au seuil', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      queryByTestId = _render2.queryByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(2000);
    }));
    expect(queryByTestId('revision-popup')).toBeNull();
  }));
  it('montre la popup quand le nombre de mots atteint le seuil', (0, _asyncToGenerator2.default)(function* () {
    var wordsData = createWordsData(120);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(wordsData[key] || null);
    });
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      findByTestId = _render3.findByTestId,
      getByText = _render3.getByText;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(2000);
    }));
    var popup = yield findByTestId('revision-popup');
    expect(popup).toBeTruthy();
    expect(getByText('Words: 120')).toBeTruthy();
    expect(getByText('Questions: 10')).toBeTruthy();
  }));
  it('appelle resetToNextTarget et navigue quand "now" est choisi', (0, _asyncToGenerator2.default)(function* () {
    var wordsData = createWordsData(120);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(wordsData[key] || null);
    });
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {
        currentLevel: "A1"
      })),
      findByTestId = _render4.findByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(2000);
    }));
    var nowButton = yield findByTestId('popup-now');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(nowButton);
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockUseRevisionSettings.resetToNextTarget).toHaveBeenCalledWith(120);
      expect(_expoRouter.router.push).toHaveBeenCalledWith({
        pathname: "/tabs/vocabularyRevision",
        params: {
          level: "A1",
          questionsCount: 10,
          source: 'popup_trigger'
        }
      });
    });
  }));
  it('appelle updatePreferences quand "later_50" est choisi', (0, _asyncToGenerator2.default)(function* () {
    var wordsData = createWordsData(120);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(wordsData[key] || null);
    });
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      findByTestId = _render5.findByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(2000);
    }));
    var laterButton = yield findByTestId('popup-later50');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(laterButton);
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockUseRevisionSettings.updatePreferences).toHaveBeenCalledWith({
        nextRevisionAt: 170
      });
    });
  }));
  it('appelle disableRevisions quand "disable" est choisi', (0, _asyncToGenerator2.default)(function* () {
    var wordsData = createWordsData(120);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(wordsData[key] || null);
    });
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      findByTestId = _render6.findByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(2000);
    }));
    var disableButton = yield findByTestId('popup-disable');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(disableButton);
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockUseRevisionSettings.disableRevisions).toHaveBeenCalled();
    });
  }));
  it('gère la fermeture (dismiss) en choisissant "later_50" par défaut', (0, _asyncToGenerator2.default)(function* () {
    var wordsData = createWordsData(120);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(wordsData[key] || null);
    });
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      findByTestId = _render7.findByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(2000);
    }));
    var dismissButton = yield findByTestId('popup-dismiss');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(dismissButton);
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockUseRevisionSettings.updatePreferences).toHaveBeenCalledWith({
        nextRevisionAt: 170
      });
    });
  }));
  it('compte correctement les mots depuis AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
    var wordsData = createWordsData(85);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(wordsData[key] || null);
    });
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      queryByTestId = _render8.queryByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(2000);
    }));
    expect(queryByTestId('revision-popup')).toBeNull();
    var expectedCalls = ['1', '2', '3', '4', '5', '6', 'bonus'].flatMap(function (level) {
      return ['classic', 'fast'].map(function (mode) {
        return `vocabulary_${level}_${mode}`;
      });
    });
    expectedCalls.forEach(function (key) {
      expect(_asyncStorage.default.getItem).toHaveBeenCalledWith(key);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,