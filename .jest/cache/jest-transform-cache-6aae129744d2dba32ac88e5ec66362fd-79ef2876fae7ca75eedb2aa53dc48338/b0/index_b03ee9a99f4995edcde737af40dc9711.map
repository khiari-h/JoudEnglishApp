{"version":3,"names":["_errorCorrectionA2Full","_interopRequireDefault","require","_errorCorrectionA2Identify","_errorCorrectionA2MultipleChoice","cov_25extps1mv","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","_coverageSchema","coverage","actualCoverage","allExercises","concat","_toConsumableArray2","default","errorCorrectionA2Full","errorCorrectionA2Identify","errorCorrectionA2MultipleChoice","sort","a","categoryId","typeOrder","errorCorrectionA2","level","totalExercises","length","statistics","full","identify","multiple_choice","byCategory","count","categories","id","description","exerciseCount","difficulty","color","topics","exercises","getExercisesByCategory","filter","exercise","getExercisesByType","getExercisesByCategoryAndType","getExercisesByTopic","topic","category","find","cat","includes","validateStructure","requiredFields","validTypes","every","hasRequiredFields","field","Object","prototype","hasOwnProperty","call","hasValidType","hasValidCategory","hasTypeSpecificFields","choices","Array","isArray","correctChoiceIndex","errorPositions","getSummary","progression","distribution","_default","exports"],"sources":["index.js"],"sourcesContent":["// src/data/exercises/errorCorrection/A2/index.js\r\n\r\nimport errorCorrectionA2Full from './categories/errorCorrectionA2Full';\r\nimport errorCorrectionA2Identify from './categories/errorCorrectionA2Identify';\r\nimport errorCorrectionA2MultipleChoice from './categories/errorCorrectionA2MultipleChoice';\r\n\r\n// Combine all exercises from the 3 files\r\nconst allExercises = [\r\n  ...errorCorrectionA2Full,\r\n  ...errorCorrectionA2Identify,\r\n  ...errorCorrectionA2MultipleChoice\r\n];\r\n\r\n// Sort exercises by categoryId to maintain logical order\r\nallExercises.sort((a, b) => {\r\n  if (a.categoryId !== b.categoryId) {\r\n    return a.categoryId - b.categoryId;\r\n  }\r\n  // Within same category, order by type: full, identify, multiple_choice\r\n  const typeOrder = { 'full': 1, 'identify': 2, 'multiple_choice': 3 };\r\n  return typeOrder[a.type] - typeOrder[b.type];\r\n});\r\n\r\nconst errorCorrectionA2 = {\r\n  level: \"A2\",\r\n  totalExercises: allExercises.length,\r\n\r\n  // Statistics by type\r\n  statistics: {\r\n    full: errorCorrectionA2Full.length,\r\n    identify: errorCorrectionA2Identify.length,\r\n    multiple_choice: errorCorrectionA2MultipleChoice.length,\r\n    byCategory: {\r\n      1: { name: \"Past Tense\", count: 7 },           // 2 full + 3 identify + 2 multiple_choice\r\n      2: { name: \"Future Forms\", count: 6 },         // 2 full + 2 identify + 2 multiple_choice\r\n      3: { name: \"Comparative & Superlative\", count: 5 }, // 2 full + 2 identify + 1 multiple_choice\r\n      4: { name: \"Prepositions\", count: 7 },         // 2 full + 3 identify + 2 multiple_choice\r\n      5: { name: \"Modal Verbs\", count: 5 }           // 2 full + 2 identify + 1 multiple_choice\r\n    }\r\n  },\r\n\r\n  // Categories metadata for A2 intermediate level\r\n  categories: [\r\n    {\r\n      id: 1,\r\n      name: \"Past Tense\",\r\n      description: \"Past simple, past continuous, and irregular verbs\",\r\n      exerciseCount: 7,\r\n      difficulty: \"Intermediate\",\r\n      color: \"#3b82f6\",\r\n      topics: [\"past simple\", \"past continuous\", \"irregular verbs\", \"past negatives\"]\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"Future Forms\",\r\n      description: \"Will, going to, and present continuous for future\",\r\n      exerciseCount: 6,\r\n      difficulty: \"Intermediate\", \r\n      color: \"#10b981\",\r\n      topics: [\"will\", \"going to\", \"future plans\", \"predictions\"]\r\n    },\r\n    {\r\n      id: 3,\r\n      name: \"Comparative & Superlative\",\r\n      description: \"Comparative and superlative adjectives\",\r\n      exerciseCount: 5,\r\n      difficulty: \"Intermediate\",\r\n      color: \"#f59e0b\",\r\n      topics: [\"comparative adjectives\", \"superlative adjectives\", \"irregular forms\"]\r\n    },\r\n    {\r\n      id: 4,\r\n      name: \"Prepositions\",\r\n      description: \"Prepositions of time, place, and movement\",\r\n      exerciseCount: 7,\r\n      difficulty: \"Intermediate\",\r\n      color: \"#8b5cf6\",\r\n      topics: [\"time prepositions\", \"place prepositions\", \"verb + preposition\"]\r\n    },\r\n    {\r\n      id: 5,\r\n      name: \"Modal Verbs\",\r\n      description: \"Can, could, should, must, and have to\",\r\n      exerciseCount: 5,\r\n      difficulty: \"Intermediate\",\r\n      color: \"#ef4444\",\r\n      topics: [\"ability\", \"obligation\", \"advice\", \"permission\"]\r\n    },\r\n  ],\r\n\r\n  // All exercises combined and sorted\r\n  exercises: allExercises,\r\n\r\n  // Helper methods for filtering exercises\r\n  getExercisesByCategory: (categoryId) => {\r\n    return allExercises.filter(exercise => exercise.categoryId === categoryId);\r\n  },\r\n\r\n  getExercisesByType: (type) => {\r\n    return allExercises.filter(exercise => exercise.type === type);\r\n  },\r\n\r\n  getExercisesByCategoryAndType: (categoryId, type) => {\r\n    return allExercises.filter(exercise => \r\n      exercise.categoryId === categoryId && exercise.type === type\r\n    );\r\n  },\r\n\r\n  // Get exercises by difficulty or topic\r\n  getExercisesByTopic: (topic) => {\r\n    return allExercises.filter(exercise => {\r\n      const category = errorCorrectionA2.categories.find(cat => cat.id === exercise.categoryId);\r\n      return category?.topics.includes(topic);\r\n    });\r\n  },\r\n\r\n  // Validation\r\n  validateStructure: () => {\r\n    const requiredFields = ['categoryId', 'type', 'text', 'correctedText', 'hint', 'explanation'];\r\n    const validTypes = ['full', 'identify', 'multiple_choice'];\r\n\r\n    return allExercises.every(exercise => {\r\n      // Check required fields\r\n      const hasRequiredFields = requiredFields.every(field => \r\n        Object.prototype.hasOwnProperty.call(exercise, field) && exercise[field] !== undefined\r\n      );\r\n\r\n      // Check valid type\r\n      const hasValidType = validTypes.includes(exercise.type);\r\n\r\n      // Check valid category (1-5 for A2)\r\n      const hasValidCategory = exercise.categoryId >= 1 && exercise.categoryId <= 5;\r\n\r\n      // Check type-specific fields\r\n      let hasTypeSpecificFields = true;\r\n      if (exercise.type === 'multiple_choice') {\r\n        hasTypeSpecificFields = exercise.choices && \r\n                               Array.isArray(exercise.choices) &&\r\n                               exercise.choices.length >= 2 &&\r\n                               exercise.correctChoiceIndex !== undefined &&\r\n                               exercise.correctChoiceIndex >= 0 &&\r\n                               exercise.correctChoiceIndex < exercise.choices.length;\r\n      } else {\r\n        hasTypeSpecificFields = exercise.errorPositions && Array.isArray(exercise.errorPositions);\r\n      }\r\n\r\n      return hasRequiredFields && hasValidType && hasValidCategory && hasTypeSpecificFields;\r\n    });\r\n  },\r\n\r\n  // Get summary statistics\r\n  getSummary: () => {\r\n    return {\r\n      level: \"A2\",\r\n      totalExercises: allExercises.length,\r\n      categories: errorCorrectionA2.categories.length,\r\n      difficulty: \"Intermediate\",\r\n      progression: \"Builds on A1 with past/future tenses, comparatives, prepositions, and modals\",\r\n      distribution: {\r\n        full: errorCorrectionA2Full.length,\r\n        identify: errorCorrectionA2Identify.length,\r\n        multiple_choice: errorCorrectionA2MultipleChoice.length\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\n// Validate structure on export\r\nif (!errorCorrectionA2.validateStructure()) {\r\n  // empty: structure invalid, handle if needed\r\n} else {\r\n  // empty: structure valid, nothing to do\r\n}\r\n\r\nexport default errorCorrectionA2;\r\n"],"mappings":";;;;;;AAEA,IAAAA,sBAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,0BAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,gCAAA,GAAAH,sBAAA,CAAAC,OAAA;AAA2F,SAAAG,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA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","ignoreList":[]}