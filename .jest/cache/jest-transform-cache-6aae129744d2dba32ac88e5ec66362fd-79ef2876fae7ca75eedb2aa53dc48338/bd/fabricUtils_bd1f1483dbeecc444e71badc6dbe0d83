ae9b97437b89953e5883385b7fd280f3
'use strict';
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getShadowNodeWrapperFromRef = getShadowNodeWrapperFromRef;
var _findHostInstance = require("./platform-specific/findHostInstance");
var getInternalInstanceHandleFromPublicInstance;
function getShadowNodeWrapperFromRef(ref, hostInstance) {
  var _ref$getScrollRespond, _ref$__internalInstan;
  if (getInternalInstanceHandleFromPublicInstance === undefined) {
    try {
      var _require$getInternalI;
      getInternalInstanceHandleFromPublicInstance = (_require$getInternalI = require('react-native/Libraries/ReactNative/ReactFabricPublicInstance/ReactFabricPublicInstance').getInternalInstanceHandleFromPublicInstance) != null ? _require$getInternalI : function (_ref) {
        return _ref._internalInstanceHandle;
      };
    } catch (e) {
      getInternalInstanceHandleFromPublicInstance = function getInternalInstanceHandleFromPublicInstance(_ref) {
        return _ref._internalInstanceHandle;
      };
    }
  }
  var scrollViewRef = ref == null || ref.getScrollResponder == null || (_ref$getScrollRespond = ref.getScrollResponder()) == null || _ref$getScrollRespond.getNativeScrollRef == null ? void 0 : _ref$getScrollRespond.getNativeScrollRef();
  var otherScrollViewRef = ref == null || ref.getNativeScrollRef == null ? void 0 : ref.getNativeScrollRef();
  var textInputRef = ref == null || (_ref$__internalInstan = ref.__internalInstanceHandle) == null || (_ref$__internalInstan = _ref$__internalInstan.stateNode) == null ? void 0 : _ref$__internalInstan.node;
  var resolvedRef;
  if (scrollViewRef) {
    resolvedRef = scrollViewRef.__internalInstanceHandle.stateNode.node;
  } else if (otherScrollViewRef) {
    resolvedRef = otherScrollViewRef.__internalInstanceHandle.stateNode.node;
  } else if (textInputRef) {
    resolvedRef = textInputRef;
  } else {
    var instance = hostInstance != null ? hostInstance : (0, _findHostInstance.findHostInstance)(ref);
    resolvedRef = getInternalInstanceHandleFromPublicInstance(instance).stateNode.node;
  }
  return resolvedRef;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldFNoYWRvd05vZGVXcmFwcGVyRnJvbVJlZiIsIl9maW5kSG9zdEluc3RhbmNlIiwicmVxdWlyZSIsImdldEludGVybmFsSW5zdGFuY2VIYW5kbGVGcm9tUHVibGljSW5zdGFuY2UiLCJyZWYiLCJob3N0SW5zdGFuY2UiLCJfcmVmJGdldFNjcm9sbFJlc3BvbmQiLCJfcmVmJF9faW50ZXJuYWxJbnN0YW4iLCJ1bmRlZmluZWQiLCJfcmVxdWlyZSRnZXRJbnRlcm5hbEkiLCJfcmVmIiwiX2ludGVybmFsSW5zdGFuY2VIYW5kbGUiLCJlIiwic2Nyb2xsVmlld1JlZiIsImdldFNjcm9sbFJlc3BvbmRlciIsImdldE5hdGl2ZVNjcm9sbFJlZiIsIm90aGVyU2Nyb2xsVmlld1JlZiIsInRleHRJbnB1dFJlZiIsIl9faW50ZXJuYWxJbnN0YW5jZUhhbmRsZSIsInN0YXRlTm9kZSIsIm5vZGUiLCJyZXNvbHZlZFJlZiIsImluc3RhbmNlIiwiZmluZEhvc3RJbnN0YW5jZSJdLCJzb3VyY2VzIjpbImZhYnJpY1V0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlICovXG5cbmltcG9ydCB0eXBlIHsgU2hhZG93Tm9kZVdyYXBwZXIgfSBmcm9tICcuL2NvbW1vblR5cGVzJztcbmltcG9ydCB7XG4gIGZpbmRIb3N0SW5zdGFuY2UsXG4gIEhvc3RJbnN0YW5jZSxcbn0gZnJvbSAnLi9wbGF0Zm9ybS1zcGVjaWZpYy9maW5kSG9zdEluc3RhbmNlJztcblxubGV0IGdldEludGVybmFsSW5zdGFuY2VIYW5kbGVGcm9tUHVibGljSW5zdGFuY2U6IChyZWY6IHVua25vd24pID0+IHtcbiAgc3RhdGVOb2RlOiB7IG5vZGU6IHVua25vd24gfTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTaGFkb3dOb2RlV3JhcHBlckZyb21SZWYoXG4gIHJlZjogUmVhY3QuQ29tcG9uZW50LFxuICBob3N0SW5zdGFuY2U/OiBIb3N0SW5zdGFuY2Vcbik6IFNoYWRvd05vZGVXcmFwcGVyIHtcbiAgaWYgKGdldEludGVybmFsSW5zdGFuY2VIYW5kbGVGcm9tUHVibGljSW5zdGFuY2UgPT09IHVuZGVmaW5lZCkge1xuICAgIHRyeSB7XG4gICAgICBnZXRJbnRlcm5hbEluc3RhbmNlSGFuZGxlRnJvbVB1YmxpY0luc3RhbmNlID1cbiAgICAgICAgcmVxdWlyZSgncmVhY3QtbmF0aXZlL0xpYnJhcmllcy9SZWFjdE5hdGl2ZS9SZWFjdEZhYnJpY1B1YmxpY0luc3RhbmNlL1JlYWN0RmFicmljUHVibGljSW5zdGFuY2UnKVxuICAgICAgICAgIC5nZXRJbnRlcm5hbEluc3RhbmNlSGFuZGxlRnJvbVB1YmxpY0luc3RhbmNlID8/XG4gICAgICAgICgoX3JlZjogYW55KSA9PiBfcmVmLl9pbnRlcm5hbEluc3RhbmNlSGFuZGxlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBnZXRJbnRlcm5hbEluc3RhbmNlSGFuZGxlRnJvbVB1YmxpY0luc3RhbmNlID0gKF9yZWY6IGFueSkgPT5cbiAgICAgICAgX3JlZi5faW50ZXJuYWxJbnN0YW5jZUhhbmRsZTtcbiAgICB9XG4gIH1cblxuICAvLyB0YWtlbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvY29tbWl0LzgwM2JiMTY1MzE2OTcyMzM2ODZlZmQ0NzVmMDA0YzE2NDNlMDM2MTcjZGlmZi1kODE3MjI1NmM2ZDYzYjVkMzJkYjEwZTU0ZDdiMTBmMzdhMjZiMzM3ZDUyODBkODlmNWJmZDdiY2VhNzc4MjkyUjE5NlxuICAvLyBAdHMtaWdub3JlIHNvbWUgd2VpcmQgc3R1ZmYgb24gUk4gMC43NCAtIHNlZSBleGFtcGxlcyB3aXRoIHNjcm9sbFZpZXdcbiAgY29uc3Qgc2Nyb2xsVmlld1JlZiA9IHJlZj8uZ2V0U2Nyb2xsUmVzcG9uZGVyPy4oKT8uZ2V0TmF0aXZlU2Nyb2xsUmVmPy4oKTtcbiAgLy8gQHRzLWlnbm9yZSBzb21lIHdlaXJkIHN0dWZmIG9uIFJOIDAuNzQgIC0gc2VlIGV4YW1wbGVzIHdpdGggc2Nyb2xsVmlld1xuICBjb25zdCBvdGhlclNjcm9sbFZpZXdSZWYgPSByZWY/LmdldE5hdGl2ZVNjcm9sbFJlZj8uKCk7XG4gIC8vIEB0cy1pZ25vcmUgc29tZSB3ZWlyZCBzdHVmZiBvbiBSTiAwLjc0IC0gc2VlIHNldE5hdGl2ZVByb3BzIGV4YW1wbGVcbiAgY29uc3QgdGV4dElucHV0UmVmID0gcmVmPy5fX2ludGVybmFsSW5zdGFuY2VIYW5kbGU/LnN0YXRlTm9kZT8ubm9kZTtcblxuICBsZXQgcmVzb2x2ZWRSZWY7XG4gIGlmIChzY3JvbGxWaWV3UmVmKSB7XG4gICAgcmVzb2x2ZWRSZWYgPSBzY3JvbGxWaWV3UmVmLl9faW50ZXJuYWxJbnN0YW5jZUhhbmRsZS5zdGF0ZU5vZGUubm9kZTtcbiAgfSBlbHNlIGlmIChvdGhlclNjcm9sbFZpZXdSZWYpIHtcbiAgICByZXNvbHZlZFJlZiA9IG90aGVyU2Nyb2xsVmlld1JlZi5fX2ludGVybmFsSW5zdGFuY2VIYW5kbGUuc3RhdGVOb2RlLm5vZGU7XG4gIH0gZWxzZSBpZiAodGV4dElucHV0UmVmKSB7XG4gICAgcmVzb2x2ZWRSZWYgPSB0ZXh0SW5wdXRSZWY7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBob3N0SW5zdGFuY2UgPz8gZmluZEhvc3RJbnN0YW5jZShyZWYpO1xuICAgIHJlc29sdmVkUmVmID1cbiAgICAgIGdldEludGVybmFsSW5zdGFuY2VIYW5kbGVGcm9tUHVibGljSW5zdGFuY2UoaW5zdGFuY2UpLnN0YXRlTm9kZS5ub2RlO1xuICB9XG5cbiAgcmV0dXJuIHJlc29sdmVkUmVmO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZO0FBQUNBLE1BQUEsQ0FBQUMsY0FBQSxDQUFBQyxPQUFBO0VBQUFDLEtBQUE7QUFBQTtBQUFBRCxPQUFBLENBQUFFLDJCQUFBLEdBQUFBLDJCQUFBO0FBSWIsSUFBQUMsaUJBQUEsR0FBQUMsT0FBQTtBQUtBLElBQUlDLDJDQUVIO0FBRU0sU0FBU0gsMkJBQTJCQSxDQUN6Q0ksR0FBb0IsRUFDcEJDLFlBQTJCLEVBQ1I7RUFBQSxJQUFBQyxxQkFBQSxFQUFBQyxxQkFBQTtFQUNuQixJQUFJSiwyQ0FBMkMsS0FBS0ssU0FBUyxFQUFFO0lBQzdELElBQUk7TUFBQSxJQUFBQyxxQkFBQTtNQUNGTiwyQ0FBMkMsSUFBQU0scUJBQUEsR0FDekNQLE9BQU8sQ0FBQyx3RkFBd0YsQ0FBQyxDQUM5RkMsMkNBQTJDLFlBQUFNLHFCQUFBLEdBQzdDLFVBQUNDLElBQVM7UUFBQSxPQUFLQSxJQUFJLENBQUNDLHVCQUF1QjtNQUFBLENBQUM7SUFDakQsQ0FBQyxDQUFDLE9BQU9DLENBQUMsRUFBRTtNQUNWVCwyQ0FBMkMsR0FBRyxTQUE5Q0EsMkNBQTJDQSxDQUFJTyxJQUFTO1FBQUEsT0FDdERBLElBQUksQ0FBQ0MsdUJBQXVCO01BQUE7SUFDaEM7RUFDRjtFQUlBLElBQU1FLGFBQWEsR0FBR1QsR0FBRyxZQUFIQSxHQUFHLENBQUVVLGtCQUFrQixhQUFBUixxQkFBQSxHQUF2QkYsR0FBRyxDQUFFVSxrQkFBa0IsQ0FBRyxDQUFDLGFBQTNCUixxQkFBQSxDQUE2QlMsa0JBQWtCLG9CQUEvQ1QscUJBQUEsQ0FBNkJTLGtCQUFrQixDQUFHLENBQUM7RUFFekUsSUFBTUMsa0JBQWtCLEdBQUdaLEdBQUcsWUFBSEEsR0FBRyxDQUFFVyxrQkFBa0Isb0JBQXZCWCxHQUFHLENBQUVXLGtCQUFrQixDQUFHLENBQUM7RUFFdEQsSUFBTUUsWUFBWSxHQUFHYixHQUFHLGFBQUFHLHFCQUFBLEdBQUhILEdBQUcsQ0FBRWMsd0JBQXdCLGNBQUFYLHFCQUFBLEdBQTdCQSxxQkFBQSxDQUErQlksU0FBUyxxQkFBeENaLHFCQUFBLENBQTBDYSxJQUFJO0VBRW5FLElBQUlDLFdBQVc7RUFDZixJQUFJUixhQUFhLEVBQUU7SUFDakJRLFdBQVcsR0FBR1IsYUFBYSxDQUFDSyx3QkFBd0IsQ0FBQ0MsU0FBUyxDQUFDQyxJQUFJO0VBQ3JFLENBQUMsTUFBTSxJQUFJSixrQkFBa0IsRUFBRTtJQUM3QkssV0FBVyxHQUFHTCxrQkFBa0IsQ0FBQ0Usd0JBQXdCLENBQUNDLFNBQVMsQ0FBQ0MsSUFBSTtFQUMxRSxDQUFDLE1BQU0sSUFBSUgsWUFBWSxFQUFFO0lBQ3ZCSSxXQUFXLEdBQUdKLFlBQVk7RUFDNUIsQ0FBQyxNQUFNO0lBQ0wsSUFBTUssUUFBUSxHQUFHakIsWUFBWSxXQUFaQSxZQUFZLEdBQUksSUFBQWtCLGtDQUFnQixFQUFDbkIsR0FBRyxDQUFDO0lBQ3REaUIsV0FBVyxHQUNUbEIsMkNBQTJDLENBQUNtQixRQUFRLENBQUMsQ0FBQ0gsU0FBUyxDQUFDQyxJQUFJO0VBQ3hFO0VBRUEsT0FBT0MsV0FBVztBQUNwQiIsImlnbm9yZUxpc3QiOltdfQ==