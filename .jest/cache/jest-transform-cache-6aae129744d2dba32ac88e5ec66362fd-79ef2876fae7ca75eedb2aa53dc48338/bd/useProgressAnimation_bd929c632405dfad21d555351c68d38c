bcf1ddf0bae6452b4d3fbaac7afdb38f
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useProgressAnimation;
exports.useAnimatedProgress = useAnimatedProgress;
exports.useStaticProgress = useStaticProgress;
var _react = require("react");
var _reactNative = require("react-native");
function useAnimatedProgress(_ref) {
  var _ref$progress = _ref.progress,
    progress = _ref$progress === void 0 ? 0 : _ref$progress,
    _ref$duration = _ref.duration,
    duration = _ref$duration === void 0 ? 600 : _ref$duration;
  var clamped = Math.min(Math.max(progress, 0), 100);
  var animatedValue = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
  (0, _react.useEffect)(function () {
    _reactNative.Animated.timing(animatedValue, {
      toValue: clamped,
      duration: duration,
      useNativeDriver: false
    }).start();
  }, [clamped, duration, animatedValue]);
  var width = animatedValue.interpolate({
    inputRange: [0, 100],
    outputRange: ["0%", "100%"]
  });
  return {
    width: width
  };
}
function useStaticProgress(_ref2) {
  var _ref2$progress = _ref2.progress,
    progress = _ref2$progress === void 0 ? 0 : _ref2$progress;
  var clamped = Math.min(Math.max(progress, 0), 100);
  var width = `${clamped}%`;
  return {
    width: width
  };
}
function useProgressAnimation(_ref3) {
  var _ref3$progress = _ref3.progress,
    progress = _ref3$progress === void 0 ? 0 : _ref3$progress,
    _ref3$animated = _ref3.animated,
    animated = _ref3$animated === void 0 ? true : _ref3$animated,
    _ref3$duration = _ref3.duration,
    duration = _ref3$duration === void 0 ? 600 : _ref3$duration;
  if (animated) {
    return useAnimatedProgress({
      progress: progress,
      duration: duration
    });
  }
  return useStaticProgress({
    progress: progress
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlIiwidXNlQW5pbWF0ZWRQcm9ncmVzcyIsIl9yZWYiLCJfcmVmJHByb2dyZXNzIiwicHJvZ3Jlc3MiLCJfcmVmJGR1cmF0aW9uIiwiZHVyYXRpb24iLCJjbGFtcGVkIiwiTWF0aCIsIm1pbiIsIm1heCIsImFuaW1hdGVkVmFsdWUiLCJ1c2VSZWYiLCJBbmltYXRlZCIsIlZhbHVlIiwiY3VycmVudCIsInVzZUVmZmVjdCIsInRpbWluZyIsInRvVmFsdWUiLCJ1c2VOYXRpdmVEcml2ZXIiLCJzdGFydCIsIndpZHRoIiwiaW50ZXJwb2xhdGUiLCJpbnB1dFJhbmdlIiwib3V0cHV0UmFuZ2UiLCJ1c2VTdGF0aWNQcm9ncmVzcyIsIl9yZWYyIiwiX3JlZjIkcHJvZ3Jlc3MiLCJ1c2VQcm9ncmVzc0FuaW1hdGlvbiIsIl9yZWYzIiwiX3JlZjMkcHJvZ3Jlc3MiLCJfcmVmMyRhbmltYXRlZCIsImFuaW1hdGVkIiwiX3JlZjMkZHVyYXRpb24iXSwic291cmNlcyI6WyJ1c2VQcm9ncmVzc0FuaW1hdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvY29tcG9uZW50cy91aS9Qcm9ncmVzc0Jhci91c2VQcm9ncmVzc0FuaW1hdGlvbi5qc1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBBbmltYXRlZCB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcclxuXHJcbi8vIEhvb2sgcG91ciBsJ2FuaW1hdGlvbiAtIGV4cG9ydMOpIHPDqXBhcsOpbWVudFxyXG5leHBvcnQgZnVuY3Rpb24gdXNlQW5pbWF0ZWRQcm9ncmVzcyh7IHByb2dyZXNzID0gMCwgZHVyYXRpb24gPSA2MDAgfSkge1xyXG4gIGNvbnN0IGNsYW1wZWQgPSBNYXRoLm1pbihNYXRoLm1heChwcm9ncmVzcywgMCksIDEwMCk7XHJcbiAgY29uc3QgYW5pbWF0ZWRWYWx1ZSA9IHVzZVJlZihuZXcgQW5pbWF0ZWQuVmFsdWUoMCkpLmN1cnJlbnQ7XHJcbiAgXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIEFuaW1hdGVkLnRpbWluZyhhbmltYXRlZFZhbHVlLCB7XHJcbiAgICAgIHRvVmFsdWU6IGNsYW1wZWQsXHJcbiAgICAgIGR1cmF0aW9uLFxyXG4gICAgICB1c2VOYXRpdmVEcml2ZXI6IGZhbHNlLFxyXG4gICAgfSkuc3RhcnQoKTtcclxuICB9LCBbY2xhbXBlZCwgZHVyYXRpb24sIGFuaW1hdGVkVmFsdWVdKTtcclxuICBcclxuICBjb25zdCB3aWR0aCA9IGFuaW1hdGVkVmFsdWUuaW50ZXJwb2xhdGUoe1xyXG4gICAgaW5wdXRSYW5nZTogWzAsIDEwMF0sXHJcbiAgICBvdXRwdXRSYW5nZTogW1wiMCVcIiwgXCIxMDAlXCJdLFxyXG4gIH0pO1xyXG4gIFxyXG4gIHJldHVybiB7IHdpZHRoIH07XHJcbn1cclxuXHJcbi8vIEhvb2sgcG91ciBsYSBwcm9ncmVzc2lvbiBzdGF0aXF1ZSAtIGV4cG9ydMOpIHPDqXBhcsOpbWVudFxyXG5leHBvcnQgZnVuY3Rpb24gdXNlU3RhdGljUHJvZ3Jlc3MoeyBwcm9ncmVzcyA9IDAgfSkge1xyXG4gIGNvbnN0IGNsYW1wZWQgPSBNYXRoLm1pbihNYXRoLm1heChwcm9ncmVzcywgMCksIDEwMCk7XHJcbiAgY29uc3Qgd2lkdGggPSBgJHtjbGFtcGVkfSVgO1xyXG4gIFxyXG4gIHJldHVybiB7IHdpZHRoIH07XHJcbn1cclxuXHJcbi8vIEhvb2sgcHJpbmNpcGFsIHF1aSBjaG9pc2l0IGxhIGJvbm5lIGltcGzDqW1lbnRhdGlvbiBzYW5zIGNvbmRpdGlvbiBkYW5zIGxlIGNvZGVcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlUHJvZ3Jlc3NBbmltYXRpb24oe1xyXG4gIHByb2dyZXNzID0gMCxcclxuICBhbmltYXRlZCA9IHRydWUsXHJcbiAgZHVyYXRpb24gPSA2MDAsXHJcbn0pIHtcclxuICAvLyBVdGlsaXNhdGlvbiBkaXJlY3RlIGRlcyBob29rcyBhcHByb3ByacOpcyBzYW5zIGNvbmRpdGlvbiBkYW5zIGxlIGNvZGUgcHJpbmNpcGFsXHJcbiAgaWYgKGFuaW1hdGVkKSB7XHJcbiAgICByZXR1cm4gdXNlQW5pbWF0ZWRQcm9ncmVzcyh7IHByb2dyZXNzLCBkdXJhdGlvbiB9KTtcclxuICB9XHJcbiAgcmV0dXJuIHVzZVN0YXRpY1Byb2dyZXNzKHsgcHJvZ3Jlc3MgfSk7XHJcbn1cclxuXHJcblxyXG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUdPLFNBQVNFLG1CQUFtQkEsQ0FBQUMsSUFBQSxFQUFtQztFQUFBLElBQUFDLGFBQUEsR0FBQUQsSUFBQSxDQUFoQ0UsUUFBUTtJQUFSQSxRQUFRLEdBQUFELGFBQUEsY0FBRyxDQUFDLEdBQUFBLGFBQUE7SUFBQUUsYUFBQSxHQUFBSCxJQUFBLENBQUVJLFFBQVE7SUFBUkEsUUFBUSxHQUFBRCxhQUFBLGNBQUcsR0FBRyxHQUFBQSxhQUFBO0VBQ2hFLElBQU1FLE9BQU8sR0FBR0MsSUFBSSxDQUFDQyxHQUFHLENBQUNELElBQUksQ0FBQ0UsR0FBRyxDQUFDTixRQUFRLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDO0VBQ3BELElBQU1PLGFBQWEsR0FBRyxJQUFBQyxhQUFNLEVBQUMsSUFBSUMscUJBQVEsQ0FBQ0MsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUNDLE9BQU87RUFFM0QsSUFBQUMsZ0JBQVMsRUFBQyxZQUFNO0lBQ2RILHFCQUFRLENBQUNJLE1BQU0sQ0FBQ04sYUFBYSxFQUFFO01BQzdCTyxPQUFPLEVBQUVYLE9BQU87TUFDaEJELFFBQVEsRUFBUkEsUUFBUTtNQUNSYSxlQUFlLEVBQUU7SUFDbkIsQ0FBQyxDQUFDLENBQUNDLEtBQUssQ0FBQyxDQUFDO0VBQ1osQ0FBQyxFQUFFLENBQUNiLE9BQU8sRUFBRUQsUUFBUSxFQUFFSyxhQUFhLENBQUMsQ0FBQztFQUV0QyxJQUFNVSxLQUFLLEdBQUdWLGFBQWEsQ0FBQ1csV0FBVyxDQUFDO0lBQ3RDQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDO0lBQ3BCQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLEVBQUUsTUFBTTtFQUM1QixDQUFDLENBQUM7RUFFRixPQUFPO0lBQUVILEtBQUssRUFBTEE7RUFBTSxDQUFDO0FBQ2xCO0FBR08sU0FBU0ksaUJBQWlCQSxDQUFBQyxLQUFBLEVBQW1CO0VBQUEsSUFBQUMsY0FBQSxHQUFBRCxLQUFBLENBQWhCdEIsUUFBUTtJQUFSQSxRQUFRLEdBQUF1QixjQUFBLGNBQUcsQ0FBQyxHQUFBQSxjQUFBO0VBQzlDLElBQU1wQixPQUFPLEdBQUdDLElBQUksQ0FBQ0MsR0FBRyxDQUFDRCxJQUFJLENBQUNFLEdBQUcsQ0FBQ04sUUFBUSxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztFQUNwRCxJQUFNaUIsS0FBSyxHQUFHLEdBQUdkLE9BQU8sR0FBRztFQUUzQixPQUFPO0lBQUVjLEtBQUssRUFBTEE7RUFBTSxDQUFDO0FBQ2xCO0FBR2UsU0FBU08sb0JBQW9CQSxDQUFBQyxLQUFBLEVBSXpDO0VBQUEsSUFBQUMsY0FBQSxHQUFBRCxLQUFBLENBSER6QixRQUFRO0lBQVJBLFFBQVEsR0FBQTBCLGNBQUEsY0FBRyxDQUFDLEdBQUFBLGNBQUE7SUFBQUMsY0FBQSxHQUFBRixLQUFBLENBQ1pHLFFBQVE7SUFBUkEsUUFBUSxHQUFBRCxjQUFBLGNBQUcsSUFBSSxHQUFBQSxjQUFBO0lBQUFFLGNBQUEsR0FBQUosS0FBQSxDQUNmdkIsUUFBUTtJQUFSQSxRQUFRLEdBQUEyQixjQUFBLGNBQUcsR0FBRyxHQUFBQSxjQUFBO0VBR2QsSUFBSUQsUUFBUSxFQUFFO0lBQ1osT0FBTy9CLG1CQUFtQixDQUFDO01BQUVHLFFBQVEsRUFBUkEsUUFBUTtNQUFFRSxRQUFRLEVBQVJBO0lBQVMsQ0FBQyxDQUFDO0VBQ3BEO0VBQ0EsT0FBT21CLGlCQUFpQixDQUFDO0lBQUVyQixRQUFRLEVBQVJBO0VBQVMsQ0FBQyxDQUFDO0FBQ3hDIiwiaWdub3JlTGlzdCI6W119