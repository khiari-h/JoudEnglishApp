{"version":3,"names":["_ProgressCard","_interopRequireDefault","require","_grammarStats","_react","_jsxRuntime","GrammarProgress","_ref","grammarData","completedExercises","levelColor","_ref$expanded","expanded","onToggleExpand","onRulePress","dataArray","useMemo","Array","isArray","rules","categories","exercises","grammar","items","statsData","totalExercisesCount","calculateTotalExercises","completedExercisesCount","calculateCompletedExercisesCount","totalProgress","calculateTotalProgress","ruleProgressData","calculateRuleProgress","formattedRuleData","map","rule","title","completed","total","totalExercises","progress","jsx","default","unit","expandable","categoryData","onCategoryPress","_default","exports"],"sources":["index.js"],"sourcesContent":["// GrammarProgress/index.js - VERSION TOTALEMENT RECOD√âE AVEC useMemo\r\n\r\nimport ProgressCard from \"../../../../components/ui/ProgressCard\";\r\nimport {\r\n  calculateTotalExercises,\r\n  calculateCompletedExercisesCount,\r\n  calculateTotalProgress,\r\n  calculateRuleProgress,\r\n} from \"../../../../utils/grammar/grammarStats\";\r\nimport { useMemo } from 'react';\r\n\r\n/**\r\n * üìä GrammarProgress - Version totalement recod√©e avec m√©morisation compl√®te\r\n * ‚úÖ √âvite les boucles infinies avec useMemo partout\r\n * ‚úÖ D√©tecte automatiquement la structure des donn√©es\r\n * ‚úÖ Logs conditionnels en d√©veloppement uniquement\r\n */\r\nconst GrammarProgress = ({\r\n  grammarData,\r\n  completedExercises,\r\n  levelColor,\r\n  expanded = false,\r\n  onToggleExpand,\r\n  onRulePress,\r\n}) => {\r\n  \r\n  // ‚úÖ M√âMORISER la d√©tection automatique de la structure\r\n  const dataArray = useMemo(() => {\r\n    if (!grammarData) return [];\r\n    \r\n    // Si c'est d√©j√† un tableau (liste de rules)\r\n    if (Array.isArray(grammarData)) {\r\n      return grammarData;\r\n    }\r\n    \r\n    // Si c'est un objet avec diff√©rentes propri√©t√©s possibles\r\n    if (typeof grammarData === 'object') {\r\n      return grammarData.rules || \r\n             grammarData.categories || \r\n             grammarData.exercises || \r\n             grammarData.grammar || \r\n             grammarData.items || \r\n             [];\r\n    }\r\n    \r\n    return [];\r\n  }, [grammarData]);\r\n  \r\n  // ‚úÖ M√âMORISER tous les calculs statistiques\r\n  const statsData = useMemo(() => {\r\n    const totalExercisesCount = calculateTotalExercises(dataArray);\r\n    const completedExercisesCount = calculateCompletedExercisesCount(completedExercises);\r\n    const totalProgress = calculateTotalProgress(dataArray, completedExercises);\r\n    const ruleProgressData = calculateRuleProgress(dataArray, completedExercises);\r\n\r\n    return {\r\n      totalExercisesCount,\r\n      completedExercisesCount,\r\n      totalProgress,\r\n      ruleProgressData\r\n    };\r\n  }, [dataArray, completedExercises]);\r\n\r\n  // ‚úÖ M√âMORISER la transformation pour ProgressCard\r\n  const formattedRuleData = useMemo(() => {\r\n    return statsData.ruleProgressData.map((rule) => ({\r\n      title: rule.title,\r\n      completed: rule.completedExercises,\r\n      total: rule.totalExercises,\r\n      progress: rule.progress,\r\n    }));\r\n  }, [statsData.ruleProgressData]);\r\n\r\n  // ‚úÖ CORRECTION FINALE : Pas de log dans le render !\r\n  // Le log √©tait dans le render, il se d√©clenchait √† chaque fois\r\n  // On peut l'ajouter dans un useEffect si vraiment n√©cessaire\r\n\r\n  return (\r\n    <ProgressCard\r\n      title=\"Progression\"\r\n      progress={statsData.totalProgress}\r\n      completed={statsData.completedExercisesCount}\r\n      total={statsData.totalExercisesCount}\r\n      unit=\"exercices\"\r\n      levelColor={levelColor}\r\n      expandable\r\n      expanded={expanded}\r\n      onToggleExpand={onToggleExpand}\r\n      categoryData={formattedRuleData}\r\n      onCategoryPress={onRulePress}\r\n    />\r\n  );\r\n};\r\n\r\nexport default GrammarProgress;"],"mappings":";;;;;AAEA,IAAAA,aAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,aAAA,GAAAD,OAAA;AAMA,IAAAE,MAAA,GAAAF,OAAA;AAAgC,IAAAG,WAAA,GAAAH,OAAA;AAQhC,IAAMI,eAAe,GAAG,SAAlBA,eAAeA,CAAAC,IAAA,EAOf;EAAA,IANJC,WAAW,GAAAD,IAAA,CAAXC,WAAW;IACXC,kBAAkB,GAAAF,IAAA,CAAlBE,kBAAkB;IAClBC,UAAU,GAAAH,IAAA,CAAVG,UAAU;IAAAC,aAAA,GAAAJ,IAAA,CACVK,QAAQ;IAARA,QAAQ,GAAAD,aAAA,cAAG,KAAK,GAAAA,aAAA;IAChBE,cAAc,GAAAN,IAAA,CAAdM,cAAc;IACdC,WAAW,GAAAP,IAAA,CAAXO,WAAW;EAIX,IAAMC,SAAS,GAAG,IAAAC,cAAO,EAAC,YAAM;IAC9B,IAAI,CAACR,WAAW,EAAE,OAAO,EAAE;IAG3B,IAAIS,KAAK,CAACC,OAAO,CAACV,WAAW,CAAC,EAAE;MAC9B,OAAOA,WAAW;IACpB;IAGA,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE;MACnC,OAAOA,WAAW,CAACW,KAAK,IACjBX,WAAW,CAACY,UAAU,IACtBZ,WAAW,CAACa,SAAS,IACrBb,WAAW,CAACc,OAAO,IACnBd,WAAW,CAACe,KAAK,IACjB,EAAE;IACX;IAEA,OAAO,EAAE;EACX,CAAC,EAAE,CAACf,WAAW,CAAC,CAAC;EAGjB,IAAMgB,SAAS,GAAG,IAAAR,cAAO,EAAC,YAAM;IAC9B,IAAMS,mBAAmB,GAAG,IAAAC,qCAAuB,EAACX,SAAS,CAAC;IAC9D,IAAMY,uBAAuB,GAAG,IAAAC,8CAAgC,EAACnB,kBAAkB,CAAC;IACpF,IAAMoB,aAAa,GAAG,IAAAC,oCAAsB,EAACf,SAAS,EAAEN,kBAAkB,CAAC;IAC3E,IAAMsB,gBAAgB,GAAG,IAAAC,mCAAqB,EAACjB,SAAS,EAAEN,kBAAkB,CAAC;IAE7E,OAAO;MACLgB,mBAAmB,EAAnBA,mBAAmB;MACnBE,uBAAuB,EAAvBA,uBAAuB;MACvBE,aAAa,EAAbA,aAAa;MACbE,gBAAgB,EAAhBA;IACF,CAAC;EACH,CAAC,EAAE,CAAChB,SAAS,EAAEN,kBAAkB,CAAC,CAAC;EAGnC,IAAMwB,iBAAiB,GAAG,IAAAjB,cAAO,EAAC,YAAM;IACtC,OAAOQ,SAAS,CAACO,gBAAgB,CAACG,GAAG,CAAC,UAACC,IAAI;MAAA,OAAM;QAC/CC,KAAK,EAAED,IAAI,CAACC,KAAK;QACjBC,SAAS,EAAEF,IAAI,CAAC1B,kBAAkB;QAClC6B,KAAK,EAAEH,IAAI,CAACI,cAAc;QAC1BC,QAAQ,EAAEL,IAAI,CAACK;MACjB,CAAC;IAAA,CAAC,CAAC;EACL,CAAC,EAAE,CAAChB,SAAS,CAACO,gBAAgB,CAAC,CAAC;EAMhC,OACE,IAAA1B,WAAA,CAAAoC,GAAA,EAACzC,aAAA,CAAA0C,OAAY;IACXN,KAAK,EAAC,aAAa;IACnBI,QAAQ,EAAEhB,SAAS,CAACK,aAAc;IAClCQ,SAAS,EAAEb,SAAS,CAACG,uBAAwB;IAC7CW,KAAK,EAAEd,SAAS,CAACC,mBAAoB;IACrCkB,IAAI,EAAC,WAAW;IAChBjC,UAAU,EAAEA,UAAW;IACvBkC,UAAU;IACVhC,QAAQ,EAAEA,QAAS;IACnBC,cAAc,EAAEA,cAAe;IAC/BgC,YAAY,EAAEZ,iBAAkB;IAChCa,eAAe,EAAEhC;EAAY,CAC9B,CAAC;AAEN,CAAC;AAAC,IAAAiC,QAAA,GAAAC,OAAA,CAAAN,OAAA,GAEapC,eAAe","ignoreList":[]}