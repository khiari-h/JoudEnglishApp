2c734e6d45f046f5687c9b31211dfbe4
var createMockComponent = function createMockComponent(name) {
  return function (props) {
    return (0, _jsxRuntime.jsx)(_reactNative2.View, Object.assign({
      testID: name
    }, props, {
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: name
      })
    }));
  };
};
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
_getJestObj().mock('../../../../src/screens/exercises/conversations/hooks/useConversation');
_getJestObj().mock('../../../../src/hooks/useLastActivity', function () {
  return {
    __esModule: true,
    default: jest.fn(function () {
      return {
        saveActivity: jest.fn()
      };
    })
  };
});
_getJestObj().mock('../../../../src/utils/conversation/conversationDataHelper', function () {
  return {
    getConversationData: jest.fn(),
    getLevelColor: jest.fn(function () {
      return '#0000FF';
    })
  };
});
_getJestObj().mock('../../../../src/screens/exercises/conversations/ConversationHeader', function () {
  return createMockComponent('ConversationHeader');
});
_getJestObj().mock('../../../../src/screens/exercises/conversations/ConversationSelector', function () {
  return createMockComponent('ConversationSelector');
});
_getJestObj().mock('../../../../src/screens/exercises/conversations/ConversationProgress', function () {
  return createMockComponent('ConversationProgress');
});
_getJestObj().mock('../../../../src/screens/exercises/conversations/ConversationScenarioDescription', function () {
  return createMockComponent('ConversationScenarioDescription');
});
_getJestObj().mock('../../../../src/screens/exercises/conversations/ConversationMessageList', function () {
  return createMockComponent('ConversationMessageList');
});
_getJestObj().mock('../../../../src/screens/exercises/conversations/ConversationSuggestions', function () {
  return createMockComponent('ConversationSuggestions');
});
_getJestObj().mock('../../../../src/screens/exercises/conversations/ConversationInput', function () {
  return createMockComponent('ConversationInput');
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _conversations = _interopRequireDefault(require("../../../../src/screens/exercises/conversations"));
var _useConversation = _interopRequireDefault(require("../../../../src/screens/exercises/conversations/hooks/useConversation"));
var _useLastActivity2 = _interopRequireDefault(require("../../../../src/hooks/useLastActivity"));
var _expoRouter = require("expo-router");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ConversationExercise', function () {
  var mockRoute = {
    params: {
      level: 'A1'
    }
  };
  var mockSaveActivity;
  var createMockConversationState = function createMockConversationState() {
    var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return Object.assign({
      loaded: true,
      hasValidData: true,
      currentScenario: {
        title: 'Scenario de Test',
        description: 'Description du scenario.'
      },
      conversation: [{
        sender: 'bot',
        text: 'Hello!'
      }],
      suggestions: ['Hi', 'Hello there'],
      message: '',
      isTyping: false,
      stats: {
        completionProgress: 50,
        currentStep: 1,
        totalSteps: 2
      },
      isConversationStarted: true,
      changeScenario: jest.fn(),
      sendMessage: jest.fn(),
      useSuggestion: jest.fn(),
      toggleHelp: jest.fn(),
      toggleDetailedProgress: jest.fn(),
      setMessage: jest.fn()
    }, overrides);
  };
  beforeEach(function () {
    jest.clearAllMocks();
    var _useLastActivity = (0, _useLastActivity2.default)(),
      saveActivity = _useLastActivity.saveActivity;
    mockSaveActivity = saveActivity;
    _useConversation.default.mockReturnValue(createMockConversationState());
  });
  test('should render loading state correctly', function () {
    _useConversation.default.mockReturnValue(createMockConversationState({
      loaded: false
    }));
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_conversations.default, {
        route: mockRoute
      })),
      queryByTestId = _render.queryByTestId;
    expect(queryByTestId('ConversationHeader')).toBeNull();
  });
  test('should render main content when data is loaded', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_conversations.default, {
        route: mockRoute
      })),
      getByTestId = _render2.getByTestId;
    expect(getByTestId('ConversationHeader')).toBeTruthy();
    var descriptionComponent = getByTestId('ConversationScenarioDescription');
    expect(descriptionComponent.props.description).toBe('Description du scenario.');
  });
  test('should call saveActivity on mount if conversation has started', function () {
    _useConversation.default.mockReturnValue(createMockConversationState({
      isConversationStarted: true
    }));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_conversations.default, {
      route: mockRoute
    }));
    expect(mockSaveActivity).toHaveBeenCalledTimes(1);
    expect(mockSaveActivity).toHaveBeenCalledWith(expect.objectContaining({
      title: 'Conversations',
      level: 'A1',
      type: 'conversations',
      metadata: expect.any(Object)
    }));
  });
  test('should NOT call saveActivity on mount if conversation has not started', function () {
    _useConversation.default.mockReturnValue(createMockConversationState({
      isConversationStarted: false
    }));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_conversations.default, {
      route: mockRoute
    }));
    expect(mockSaveActivity).not.toHaveBeenCalled();
  });
  test('should handle back press correctly', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_conversations.default, {
        route: mockRoute
      })),
      getByTestId = _render3.getByTestId;
    var header = getByTestId('ConversationHeader');
    header.props.onBackPress();
    expect(_expoRouter.router.push).toHaveBeenCalledWith({
      pathname: '/tabs/exerciseSelection',
      params: {
        level: 'A1'
      }
    });
  });
  test('should handle scenario change correctly', function () {
    var mockConversationState = createMockConversationState();
    _useConversation.default.mockReturnValue(mockConversationState);
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_conversations.default, {
        route: mockRoute
      })),
      getByTestId = _render4.getByTestId;
    var selector = getByTestId('ConversationSelector');
    selector.props.onSelectScenario(1);
    expect(mockConversationState.changeScenario).toHaveBeenCalledWith(1);
  });
  test('should handle sending a message correctly', function () {
    var mockConversationState = createMockConversationState();
    _useConversation.default.mockReturnValue(mockConversationState);
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_conversations.default, {
        route: mockRoute
      })),
      getByTestId = _render5.getByTestId;
    var input = getByTestId('ConversationInput');
    input.props.onSendMessage();
    expect(mockConversationState.sendMessage).toHaveBeenCalledTimes(1);
  });
  test('should handle using a suggestion correctly', function () {
    var mockConversationState = createMockConversationState();
    _useConversation.default.mockReturnValue(mockConversationState);
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_conversations.default, {
        route: mockRoute
      })),
      getByTestId = _render6.getByTestId;
    var suggestions = getByTestId('ConversationSuggestions');
    suggestions.props.onPressSuggestion('Hi');
    expect(mockConversationState.useSuggestion).toHaveBeenCalledWith('Hi');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,