{"version":3,"names":["_react","require","_reactNative","useAnimatedProgress","_ref","_ref$progress","progress","_ref$duration","duration","clamped","Math","min","max","animatedValue","useRef","Animated","Value","current","useEffect","timing","toValue","useNativeDriver","start","width","interpolate","inputRange","outputRange","useStaticProgress","_ref2","_ref2$progress","useProgressAnimation","_ref3","_ref3$progress","_ref3$animated","animated","_ref3$duration"],"sources":["useProgressAnimation.js"],"sourcesContent":["// src/components/ui/ProgressBar/useProgressAnimation.js\r\nimport { useEffect, useRef } from \"react\";\r\nimport { Animated } from \"react-native\";\r\n\r\n// Hook pour l'animation - exporté séparément\r\nexport function useAnimatedProgress({ progress = 0, duration = 600 }) {\r\n  const clamped = Math.min(Math.max(progress, 0), 100);\r\n  const animatedValue = useRef(new Animated.Value(0)).current;\r\n  \r\n  useEffect(() => {\r\n    Animated.timing(animatedValue, {\r\n      toValue: clamped,\r\n      duration,\r\n      useNativeDriver: false,\r\n    }).start();\r\n  }, [clamped, duration, animatedValue]);\r\n  \r\n  const width = animatedValue.interpolate({\r\n    inputRange: [0, 100],\r\n    outputRange: [\"0%\", \"100%\"],\r\n  });\r\n  \r\n  return { width };\r\n}\r\n\r\n// Hook pour la progression statique - exporté séparément\r\nexport function useStaticProgress({ progress = 0 }) {\r\n  const clamped = Math.min(Math.max(progress, 0), 100);\r\n  const width = `${clamped}%`;\r\n  \r\n  return { width };\r\n}\r\n\r\n// Hook principal qui choisit la bonne implémentation sans condition dans le code\r\nexport default function useProgressAnimation({\r\n  progress = 0,\r\n  animated = true,\r\n  duration = 600,\r\n}) {\r\n  // Utilisation directe des hooks appropriés sans condition dans le code principal\r\n  if (animated) {\r\n    return useAnimatedProgress({ progress, duration });\r\n  }\r\n  return useStaticProgress({ progress });\r\n}\r\n\r\n\r\n"],"mappings":";;;;;;AACA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AAGO,SAASE,mBAAmBA,CAAAC,IAAA,EAAmC;EAAA,IAAAC,aAAA,GAAAD,IAAA,CAAhCE,QAAQ;IAARA,QAAQ,GAAAD,aAAA,cAAG,CAAC,GAAAA,aAAA;IAAAE,aAAA,GAAAH,IAAA,CAAEI,QAAQ;IAARA,QAAQ,GAAAD,aAAA,cAAG,GAAG,GAAAA,aAAA;EAChE,IAAME,OAAO,GAAGC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAACN,QAAQ,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC;EACpD,IAAMO,aAAa,GAAG,IAAAC,aAAM,EAAC,IAAIC,qBAAQ,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,OAAO;EAE3D,IAAAC,gBAAS,EAAC,YAAM;IACdH,qBAAQ,CAACI,MAAM,CAACN,aAAa,EAAE;MAC7BO,OAAO,EAAEX,OAAO;MAChBD,QAAQ,EAARA,QAAQ;MACRa,eAAe,EAAE;IACnB,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC;EACZ,CAAC,EAAE,CAACb,OAAO,EAAED,QAAQ,EAAEK,aAAa,CAAC,CAAC;EAEtC,IAAMU,KAAK,GAAGV,aAAa,CAACW,WAAW,CAAC;IACtCC,UAAU,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC;IACpBC,WAAW,EAAE,CAAC,IAAI,EAAE,MAAM;EAC5B,CAAC,CAAC;EAEF,OAAO;IAAEH,KAAK,EAALA;EAAM,CAAC;AAClB;AAGO,SAASI,iBAAiBA,CAAAC,KAAA,EAAmB;EAAA,IAAAC,cAAA,GAAAD,KAAA,CAAhBtB,QAAQ;IAARA,QAAQ,GAAAuB,cAAA,cAAG,CAAC,GAAAA,cAAA;EAC9C,IAAMpB,OAAO,GAAGC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAACN,QAAQ,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC;EACpD,IAAMiB,KAAK,GAAG,GAAGd,OAAO,GAAG;EAE3B,OAAO;IAAEc,KAAK,EAALA;EAAM,CAAC;AAClB;AAGe,SAASO,oBAAoBA,CAAAC,KAAA,EAIzC;EAAA,IAAAC,cAAA,GAAAD,KAAA,CAHDzB,QAAQ;IAARA,QAAQ,GAAA0B,cAAA,cAAG,CAAC,GAAAA,cAAA;IAAAC,cAAA,GAAAF,KAAA,CACZG,QAAQ;IAARA,QAAQ,GAAAD,cAAA,cAAG,IAAI,GAAAA,cAAA;IAAAE,cAAA,GAAAJ,KAAA,CACfvB,QAAQ;IAARA,QAAQ,GAAA2B,cAAA,cAAG,GAAG,GAAAA,cAAA;EAGd,IAAID,QAAQ,EAAE;IACZ,OAAO/B,mBAAmB,CAAC;MAAEG,QAAQ,EAARA,QAAQ;MAAEE,QAAQ,EAARA;IAAS,CAAC,CAAC;EACpD;EACA,OAAOmB,iBAAiB,CAAC;IAAErB,QAAQ,EAARA;EAAS,CAAC,CAAC;AACxC","ignoreList":[]}