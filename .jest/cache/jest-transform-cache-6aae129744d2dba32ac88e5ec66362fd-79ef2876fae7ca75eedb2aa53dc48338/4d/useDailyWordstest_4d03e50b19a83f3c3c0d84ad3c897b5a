63acb5ac32d8b5500039c52c386f10bc
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useDailyWords = _interopRequireDefault(require("../../src/hooks/useDailyWords"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useDailyWords', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    jest.spyOn(Date, 'now').mockReturnValue(1640995200000);
    jest.spyOn(Date.prototype, 'toDateString').mockReturnValue('Sat Jan 01 2022');
  });
  afterEach(function () {
    jest.restoreAllMocks();
  });
  it('devrait initialiser avec 0 mots', function () {
    _asyncStorage.default.getItem.mockResolvedValue(null);
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useDailyWords.default)();
      }),
      result = _renderHook.result;
    expect(result.current.wordsToday).toBe(0);
    expect(result.current.isLoading).toBe(true);
  });
  it('devrait compter les mots d\'aujourd\'hui', (0, _asyncToGenerator2.default)(function* () {
    var mockData = {
      completedWords: {
        '0': [{
          word: 'hello',
          timestamp: 1640995200000
        }, {
          word: 'world',
          timestamp: 1640995200000
        }]
      }
    };
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      if (key.includes('vocabulary_') && key.includes('_classic')) {
        return Promise.resolve(JSON.stringify(mockData));
      }
      return Promise.resolve(null);
    });
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useDailyWords.default)();
      }),
      result = _renderHook2.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.wordsToday).toBeGreaterThan(0);
      expect(result.current.isLoading).toBe(false);
    });
  }));
  it('devrait avoir une fonction refresh', function () {
    _asyncStorage.default.getItem.mockResolvedValue(null);
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useDailyWords.default)();
      }),
      result = _renderHook3.result;
    expect(typeof result.current.refresh).toBe('function');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJnZXRJdGVtIiwiamVzdCIsImZuIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVhY3ROYXRpdmUiLCJfYXN5bmNTdG9yYWdlIiwiX3VzZURhaWx5V29yZHMiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJzcHlPbiIsIkRhdGUiLCJtb2NrUmV0dXJuVmFsdWUiLCJwcm90b3R5cGUiLCJhZnRlckVhY2giLCJyZXN0b3JlQWxsTW9ja3MiLCJpdCIsIkFzeW5jU3RvcmFnZSIsIm1vY2tSZXNvbHZlZFZhbHVlIiwiX3JlbmRlckhvb2siLCJyZW5kZXJIb29rIiwidXNlRGFpbHlXb3JkcyIsInJlc3VsdCIsImV4cGVjdCIsImN1cnJlbnQiLCJ3b3Jkc1RvZGF5IiwidG9CZSIsImlzTG9hZGluZyIsImRlZmF1bHQiLCJtb2NrRGF0YSIsImNvbXBsZXRlZFdvcmRzIiwid29yZCIsInRpbWVzdGFtcCIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsImtleSIsImluY2x1ZGVzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJKU09OIiwic3RyaW5naWZ5IiwiX3JlbmRlckhvb2syIiwid2FpdEZvciIsInRvQmVHcmVhdGVyVGhhbiIsIl9yZW5kZXJIb29rMyIsInJlZnJlc2giXSwic291cmNlcyI6WyJ1c2VEYWlseVdvcmRzLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gX190ZXN0c19fL2hvb2tzL3VzZURhaWx5V29yZHMudGVzdC5qc1xuaW1wb3J0IHsgcmVuZGVySG9vaywgd2FpdEZvciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCBBc3luY1N0b3JhZ2UgZnJvbSAnQHJlYWN0LW5hdGl2ZS1hc3luYy1zdG9yYWdlL2FzeW5jLXN0b3JhZ2UnO1xuaW1wb3J0IHVzZURhaWx5V29yZHMgZnJvbSAnLi4vLi4vc3JjL2hvb2tzL3VzZURhaWx5V29yZHMnO1xuXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlJywgKCkgPT4gKHtcbiAgZ2V0SXRlbTogamVzdC5mbigpLFxufSkpO1xuXG5kZXNjcmliZSgndXNlRGFpbHlXb3JkcycsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gICAgamVzdC5zcHlPbihEYXRlLCAnbm93JykubW9ja1JldHVyblZhbHVlKDE2NDA5OTUyMDAwMDApO1xuICAgIGplc3Quc3B5T24oRGF0ZS5wcm90b3R5cGUsICd0b0RhdGVTdHJpbmcnKS5tb2NrUmV0dXJuVmFsdWUoJ1NhdCBKYW4gMDEgMjAyMicpO1xuICB9KTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGplc3QucmVzdG9yZUFsbE1vY2tzKCk7XG4gIH0pO1xuXG4gIGl0KCdkZXZyYWl0IGluaXRpYWxpc2VyIGF2ZWMgMCBtb3RzJywgKCkgPT4ge1xuICAgIEFzeW5jU3RvcmFnZS5nZXRJdGVtLm1vY2tSZXNvbHZlZFZhbHVlKG51bGwpO1xuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZURhaWx5V29yZHMoKSk7XG4gICAgXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LndvcmRzVG9kYXkpLnRvQmUoMCk7XG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzTG9hZGluZykudG9CZSh0cnVlKTtcbiAgfSk7XG5cbiAgaXQoJ2RldnJhaXQgY29tcHRlciBsZXMgbW90cyBkXFwnYXVqb3VyZFxcJ2h1aScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtb2NrRGF0YSA9IHtcbiAgICAgIGNvbXBsZXRlZFdvcmRzOiB7XG4gICAgICAgICcwJzogW1xuICAgICAgICAgIHsgd29yZDogJ2hlbGxvJywgdGltZXN0YW1wOiAxNjQwOTk1MjAwMDAwIH0sXG4gICAgICAgICAgeyB3b3JkOiAnd29ybGQnLCB0aW1lc3RhbXA6IDE2NDA5OTUyMDAwMDAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfTtcblxuICAgIEFzeW5jU3RvcmFnZS5nZXRJdGVtLm1vY2tJbXBsZW1lbnRhdGlvbigoa2V5KSA9PiB7XG4gICAgICBpZiAoa2V5LmluY2x1ZGVzKCd2b2NhYnVsYXJ5XycpICYmIGtleS5pbmNsdWRlcygnX2NsYXNzaWMnKSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKEpTT04uc3RyaW5naWZ5KG1vY2tEYXRhKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlRGFpbHlXb3JkcygpKTtcblxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LndvcmRzVG9kYXkpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0xvYWRpbmcpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuICB9KTtcblxuICBpdCgnZGV2cmFpdCBhdm9pciB1bmUgZm9uY3Rpb24gcmVmcmVzaCcsICgpID0+IHtcbiAgICBBc3luY1N0b3JhZ2UuZ2V0SXRlbS5tb2NrUmVzb2x2ZWRWYWx1ZShudWxsKTtcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VEYWlseVdvcmRzKCkpO1xuICAgIFxuICAgIGV4cGVjdCh0eXBlb2YgcmVzdWx0LmN1cnJlbnQucmVmcmVzaCkudG9CZSgnZnVuY3Rpb24nKTtcbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiJBQUtBQSxXQUFBLEdBQUtDLElBQUksQ0FBQywyQ0FBMkMsRUFBRTtFQUFBLE9BQU87SUFDNURDLE9BQU8sRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUM7RUFDbkIsQ0FBQztBQUFBLENB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