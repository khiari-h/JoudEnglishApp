a123c7ab789ff9045c2a6b1d036adb23
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CategorySelector = _interopRequireDefault(require("../../../../components/exercise-common/CategorySelector"));
var _jsxRuntime = require("react/jsx-runtime");
function cov_sg4vc1wej() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\exercises\\grammar\\GrammarRuleSelector\\index.js";
  var hash = "45421e62bf692e6620d188cb6602a658ee516ed6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\exercises\\grammar\\GrammarRuleSelector\\index.js",
    statementMap: {
      "0": {
        start: {
          line: 11,
          column: 28
        },
        end: {
          line: 31,
          column: 1
        }
      },
      "1": {
        start: {
          line: 18,
          column: 25
        },
        end: {
          line: 21,
          column: 5
        }
      },
      "2": {
        start: {
          line: 18,
          column: 53
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "3": {
        start: {
          line: 23,
          column: 2
        },
        end: {
          line: 30,
          column: 4
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 28
          },
          end: {
            line: 11,
            column: 29
          }
        },
        loc: {
          start: {
            line: 16,
            column: 6
          },
          end: {
            line: 31,
            column: 1
          }
        },
        line: 16
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 18,
            column: 35
          },
          end: {
            line: 18,
            column: 36
          }
        },
        loc: {
          start: {
            line: 18,
            column: 53
          },
          end: {
            line: 21,
            column: 3
          }
        },
        line: 18
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 2
          },
          end: {
            line: 15,
            column: 24
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 15,
            column: 24
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 26,
            column: 24
          },
          end: {
            line: 26,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 26,
            column: 54
          },
          end: {
            line: 26,
            column: 55
          }
        }, {
          start: {
            line: 26,
            column: 58
          },
          end: {
            line: 26,
            column: 71
          }
        }],
        line: 26
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0],
      "1": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "45421e62bf692e6620d188cb6602a658ee516ed6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_sg4vc1wej = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_sg4vc1wej();
cov_sg4vc1wej().s[0]++;
var GrammarRuleSelector = function GrammarRuleSelector(_ref) {
  var rules = _ref.rules,
    selectedIndex = _ref.selectedIndex,
    onSelectRule = _ref.onSelectRule,
    _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? (cov_sg4vc1wej().b[0][0]++, "#3b82f6") : _ref$levelColor;
  cov_sg4vc1wej().f[0]++;
  var formattedRules = (cov_sg4vc1wej().s[1]++, rules.map(function (rule, index) {
    cov_sg4vc1wej().f[1]++;
    cov_sg4vc1wej().s[2]++;
    return {
      id: index,
      name: rule.title
    };
  }));
  cov_sg4vc1wej().s[3]++;
  return (0, _jsxRuntime.jsx)(_CategorySelector.default, {
    categories: formattedRules,
    selectedCategory: selectedIndex === undefined ? (cov_sg4vc1wej().b[1][0]++, 0) : (cov_sg4vc1wej().b[1][1]++, selectedIndex),
    onSelectCategory: onSelectRule,
    primaryColor: levelColor
  });
};
var _default = exports.default = GrammarRuleSelector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfQ2F0ZWdvcnlTZWxlY3RvciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2pzeFJ1bnRpbWUiLCJjb3Zfc2c0dmMxd2VqIiwicGF0aCIsImhhc2giLCJnbG9iYWwiLCJGdW5jdGlvbiIsImdjdiIsImNvdmVyYWdlRGF0YSIsInN0YXRlbWVudE1hcCIsInN0YXJ0IiwibGluZSIsImNvbHVtbiIsImVuZCIsImZuTWFwIiwibmFtZSIsImRlY2wiLCJsb2MiLCJicmFuY2hNYXAiLCJ0eXBlIiwibG9jYXRpb25zIiwicyIsImYiLCJiIiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsIkdyYW1tYXJSdWxlU2VsZWN0b3IiLCJfcmVmIiwicnVsZXMiLCJzZWxlY3RlZEluZGV4Iiwib25TZWxlY3RSdWxlIiwiX3JlZiRsZXZlbENvbG9yIiwibGV2ZWxDb2xvciIsImZvcm1hdHRlZFJ1bGVzIiwibWFwIiwicnVsZSIsImluZGV4IiwiaWQiLCJ0aXRsZSIsImpzeCIsImRlZmF1bHQiLCJjYXRlZ29yaWVzIiwic2VsZWN0ZWRDYXRlZ29yeSIsInVuZGVmaW5lZCIsIm9uU2VsZWN0Q2F0ZWdvcnkiLCJwcmltYXJ5Q29sb3IiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ2F0ZWdvcnlTZWxlY3RvciBmcm9tIFwiLi4vLi4vLi4vLi4vY29tcG9uZW50cy9leGVyY2lzZS1jb21tb24vQ2F0ZWdvcnlTZWxlY3RvclwiO1xyXG5cclxuLyoqXHJcbiAqIFPDqWxlY3RldXIgZGUgcsOoZ2xlcyBncmFtbWF0aWNhbGVzIHLDqXV0aWxpc2FudCBsZSBDYXRlZ29yeVNlbGVjdG9yIGfDqW7DqXJpcXVlXHJcbiAqXHJcbiAqIEBwYXJhbSB7QXJyYXl9IHJ1bGVzIC0gTGlzdGUgZGVzIHLDqGdsZXMgZGlzcG9uaWJsZXNcclxuICogQHBhcmFtIHtudW1iZXJ9IHNlbGVjdGVkSW5kZXggLSBJbmRleCBkZSBsYSByw6hnbGUgc8OpbGVjdGlvbm7DqWVcclxuICogQHBhcmFtIHtmdW5jdGlvbn0gb25TZWxlY3RSdWxlIC0gRm9uY3Rpb24gw6AgYXBwZWxlciBsb3JzIGRlIGxhIHPDqWxlY3Rpb24gZCd1bmUgcsOoZ2xlXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBsZXZlbENvbG9yIC0gQ291bGV1ciBkdSBuaXZlYXUgYWN0dWVsXHJcbiAqL1xyXG5jb25zdCBHcmFtbWFyUnVsZVNlbGVjdG9yID0gKHtcclxuICBydWxlcyxcclxuICBzZWxlY3RlZEluZGV4LFxyXG4gIG9uU2VsZWN0UnVsZSxcclxuICBsZXZlbENvbG9yID0gXCIjM2I4MmY2XCIsXHJcbn0pID0+IHtcclxuICAvLyBUcmFuc2Zvcm1lciBsZXMgcsOoZ2xlcyBwb3VyIGNvcnJlc3BvbmRyZSBhdSBmb3JtYXQgZHUgQ2F0ZWdvcnlTZWxlY3RvclxyXG4gIGNvbnN0IGZvcm1hdHRlZFJ1bGVzID0gcnVsZXMubWFwKChydWxlLCBpbmRleCkgPT4gKHtcclxuICAgIGlkOiBpbmRleCxcclxuICAgIG5hbWU6IHJ1bGUudGl0bGUsXHJcbiAgfSkpO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPENhdGVnb3J5U2VsZWN0b3JcclxuICAgICAgY2F0ZWdvcmllcz17Zm9ybWF0dGVkUnVsZXN9XHJcbiAgICAgIHNlbGVjdGVkQ2F0ZWdvcnk9e3NlbGVjdGVkSW5kZXggPT09IHVuZGVmaW5lZCA/IDAgOiBzZWxlY3RlZEluZGV4fVxyXG4gICAgICBvblNlbGVjdENhdGVnb3J5PXtvblNlbGVjdFJ1bGV9XHJcbiAgICAgIHByaW1hcnlDb2xvcj17bGV2ZWxDb2xvcn1cclxuICAgIC8+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEdyYW1tYXJSdWxlU2VsZWN0b3I7XHJcblxyXG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBQUEsaUJBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUF1RixJQUFBQyxXQUFBLEdBQUFELE9BQUE7QUFBQSxTQUFBRSxjQUFBO0VBQUEsSUFBQUMsSUFBQTtFQUFBLElBQUFDLElBQUE7RUFBQSxJQUFBQyxNQUFBLE9BQUFDLFFBQUE7RUFBQSxJQUFBQyxHQUFBO0VBQUEsSUFBQUMsWUFBQTtJQUFBTCxJQUFBO0lBQUFNLFlBQUE7TUFBQTtRQUFBQyxLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtJQUFBO0lBQUFFLEtBQUE7TUFBQTtRQUFBQyxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7SUFBQTtJQUFBTyxTQUFBO01BQUE7UUFBQUQsR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO0lBQUE7SUFBQVUsQ0FBQTtNQUFBO01BQUE7TUFBQTtNQUFBO0lBQUE7SUFBQUMsQ0FBQTtNQUFBO01BQUE7SUFBQTtJQUFBQyxDQUFBO01BQUE7TUFBQTtJQUFBO0lBQUFDLGVBQUE7SUFBQXBCLElBQUE7RUFBQTtFQUFBLElBQUFxQixRQUFBLEdBQUFwQixNQUFBLENBQUFFLEdBQUEsTUFBQUYsTUFBQSxDQUFBRSxHQUFBO0VBQUEsS0FBQWtCLFFBQUEsQ0FBQXRCLElBQUEsS0FBQXNCLFFBQUEsQ0FBQXRCLElBQUEsRUFBQUMsSUFBQSxLQUFBQSxJQUFBO0lBQUFxQixRQUFBLENBQUF0QixJQUFBLElBQUFLLFlBQUE7RUFBQTtFQUFBLElBQUFrQixjQUFBLEdBQUFELFFBQUEsQ0FBQXRCLElBQUE7RUFBQTtJQUFBRCxhQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBd0IsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQXhCLGFBQUE7QUFBQUEsYUFBQSxHQUFBbUIsQ0FBQTtBQVV2RixJQUFNTSxtQkFBbUIsR0FBRyxTQUF0QkEsbUJBQW1CQSxDQUFBQyxJQUFBLEVBS25CO0VBQUEsSUFKSkMsS0FBSyxHQUFBRCxJQUFBLENBQUxDLEtBQUs7SUFDTEMsYUFBYSxHQUFBRixJQUFBLENBQWJFLGFBQWE7SUFDYkMsWUFBWSxHQUFBSCxJQUFBLENBQVpHLFlBQVk7SUFBQUMsZUFBQSxHQUFBSixJQUFBLENBQ1pLLFVBQVU7SUFBVkEsVUFBVSxHQUFBRCxlQUFBLGVBQUE5QixhQUFBLEdBQUFxQixDQUFBLFVBQUcsU0FBUyxJQUFBUyxlQUFBO0VBQUE5QixhQUFBLEdBQUFvQixDQUFBO0VBR3RCLElBQU1ZLGNBQWMsSUFBQWhDLGFBQUEsR0FBQW1CLENBQUEsT0FBR1EsS0FBSyxDQUFDTSxHQUFHLENBQUMsVUFBQ0MsSUFBSSxFQUFFQyxLQUFLLEVBQU07SUFBQW5DLGFBQUEsR0FBQW9CLENBQUE7SUFBQXBCLGFBQUEsR0FBQW1CLENBQUE7SUFBQTtNQUNqRGlCLEVBQUUsRUFBRUQsS0FBSztNQUNUdEIsSUFBSSxFQUFFcUIsSUFBSSxDQUFDRztJQUNiLENBQUM7RUFBRCxDQUFFLENBQUM7RUFBQ3JDLGFBQUEsR0FBQW1CLENBQUE7RUFFSixPQUNFLElBQUFwQixXQUFBLENBQUF1QyxHQUFBLEVBQUMxQyxpQkFBQSxDQUFBMkMsT0FBZ0I7SUFDZkMsVUFBVSxFQUFFUixjQUFlO0lBQzNCUyxnQkFBZ0IsRUFBRWIsYUFBYSxLQUFLYyxTQUFTLElBQUExQyxhQUFBLEdBQUFxQixDQUFBLFVBQUcsQ0FBQyxLQUFBckIsYUFBQSxHQUFBcUIsQ0FBQSxVQUFHTyxhQUFhLENBQUM7SUFDbEVlLGdCQUFnQixFQUFFZCxZQUFhO0lBQy9CZSxZQUFZLEVBQUViO0VBQVcsQ0FDMUIsQ0FBQztBQUVOLENBQUM7QUFBQyxJQUFBYyxRQUFBLEdBQUFDLE9BQUEsQ0FBQVAsT0FBQSxHQUVhZCxtQkFBbUIiLCJpZ25vcmVMaXN0IjpbXX0=