{"version":3,"names":["_Platform","_interopRequireDefault","require","_RCTLog","_parseLogBoxLog3","LogBox","__DEV__","LogBoxData","_require","parseLogBoxLog","parseInterpolation","originalConsoleError","originalConsoleWarn","consoleErrorImpl","consoleWarnImpl","isLogBoxInstalled","install","isFirstInstall","console","error","bind","warn","apply","arguments","registerError","registerWarning","Platform","isTesting","setDisabled","RCTLog","setWarningHandler","uninstall","isInstalled","ignoreLogs","patterns","addIgnorePatterns","ignoreAllLogs","value","clearAllLogs","clear","addLog","log","addException","isRCTLogAdviceWarning","_len","length","args","Array","_key","startsWith","isWarningModuleWarning","_len2","_key2","_len3","_key3","isLogBoxErrorMessage","String","_parseLogBoxLog","category","message","componentStack","componentStackType","isMessageIgnored","content","level","err","reportLogBoxError","_len4","_key4","hasComponentStack","format","replace","filterResult","checkWarningFilter","monitorEvent","suppressCompletely","suppressDialog_LEGACY","forceDialogImmediately","finalFormat","_parseLogBoxLog2","interpolated","_default","exports","default"],"sources":["LogBox.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {IgnorePattern, LogData} from './Data/LogBoxData';\nimport type {ExtendedExceptionData} from './Data/parseLogBoxLog';\n\nimport Platform from '../Utilities/Platform';\nimport RCTLog from '../Utilities/RCTLog';\nimport {hasComponentStack} from './Data/parseLogBoxLog';\n\nexport type {LogData, ExtendedExceptionData, IgnorePattern};\n\nlet LogBox;\n\ninterface ILogBox {\n  install(): void;\n  uninstall(): void;\n  isInstalled(): boolean;\n  ignoreLogs($ReadOnlyArray<IgnorePattern>): void;\n  ignoreAllLogs(?boolean): void;\n  clearAllLogs(): void;\n  addLog(log: LogData): void;\n  addException(error: ExtendedExceptionData): void;\n}\n\n/**\n * LogBox displays logs in the app.\n */\nif (__DEV__) {\n  const LogBoxData = require('./Data/LogBoxData');\n  const {parseLogBoxLog, parseInterpolation} = require('./Data/parseLogBoxLog');\n\n  let originalConsoleError;\n  let originalConsoleWarn;\n  let consoleErrorImpl;\n  let consoleWarnImpl: (...args: Array<mixed>) => void;\n\n  let isLogBoxInstalled: boolean = false;\n\n  LogBox = {\n    install(): void {\n      if (isLogBoxInstalled) {\n        return;\n      }\n\n      isLogBoxInstalled = true;\n\n      // Trigger lazy initialization of module.\n      require('../NativeModules/specs/NativeLogBox');\n\n      // IMPORTANT: we only overwrite `console.error` and `console.warn` once.\n      // When we uninstall we keep the same reference and only change its\n      // internal implementation\n      const isFirstInstall = originalConsoleError == null;\n      if (isFirstInstall) {\n        originalConsoleError = console.error.bind(console);\n        originalConsoleWarn = console.warn.bind(console);\n\n        // $FlowExpectedError[cannot-write]\n        console.error = (...args) => {\n          consoleErrorImpl(...args);\n        };\n        // $FlowExpectedError[cannot-write]\n        console.warn = (...args) => {\n          consoleWarnImpl(...args);\n        };\n      }\n\n      consoleErrorImpl = registerError;\n      consoleWarnImpl = registerWarning;\n\n      if (Platform.isTesting) {\n        LogBoxData.setDisabled(true);\n      }\n\n      RCTLog.setWarningHandler((...args) => {\n        registerWarning(...args);\n      });\n    },\n\n    uninstall(): void {\n      if (!isLogBoxInstalled) {\n        return;\n      }\n\n      isLogBoxInstalled = false;\n\n      // IMPORTANT: we don't re-assign to `console` in case the method has been\n      // decorated again after installing LogBox. E.g.:\n      // Before uninstalling: original > LogBox > OtherErrorHandler\n      // After uninstalling:  original > LogBox (noop) > OtherErrorHandler\n      consoleErrorImpl = originalConsoleError;\n      consoleWarnImpl = originalConsoleWarn;\n    },\n\n    isInstalled(): boolean {\n      return isLogBoxInstalled;\n    },\n\n    ignoreLogs(patterns: $ReadOnlyArray<IgnorePattern>): void {\n      LogBoxData.addIgnorePatterns(patterns);\n    },\n\n    ignoreAllLogs(value?: ?boolean): void {\n      LogBoxData.setDisabled(value == null ? true : value);\n    },\n\n    clearAllLogs(): void {\n      LogBoxData.clear();\n    },\n\n    addLog(log: LogData): void {\n      if (isLogBoxInstalled) {\n        LogBoxData.addLog(log);\n      }\n    },\n\n    addException(error: ExtendedExceptionData): void {\n      if (isLogBoxInstalled) {\n        LogBoxData.addException(error);\n      }\n    },\n  };\n\n  const isRCTLogAdviceWarning = (...args: Array<mixed>) => {\n    // RCTLogAdvice is a native logging function designed to show users\n    // a message in the console, but not show it to them in Logbox.\n    return typeof args[0] === 'string' && args[0].startsWith('(ADVICE)');\n  };\n\n  const isWarningModuleWarning = (...args: Array<mixed>) => {\n    return typeof args[0] === 'string' && args[0].startsWith('Warning: ');\n  };\n\n  const registerWarning = (...args: Array<mixed>): void => {\n    // Let warnings within LogBox itself fall through.\n    if (LogBoxData.isLogBoxErrorMessage(String(args[0]))) {\n      originalConsoleError(...args);\n      return;\n    } else {\n      // Be sure to pass LogBox warnings through.\n      originalConsoleWarn(...args);\n    }\n\n    try {\n      if (!isRCTLogAdviceWarning(...args)) {\n        const {category, message, componentStack, componentStackType} =\n          parseLogBoxLog(args);\n\n        if (!LogBoxData.isMessageIgnored(message.content)) {\n          LogBoxData.addLog({\n            level: 'warn',\n            category,\n            message,\n            componentStack,\n            componentStackType,\n          });\n        }\n      }\n    } catch (err) {\n      LogBoxData.reportLogBoxError(err);\n    }\n  };\n\n  /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's\n   * LTI update could not be added via codemod */\n  const registerError = (...args): void => {\n    // Let errors within LogBox itself fall through.\n    if (LogBoxData.isLogBoxErrorMessage(args[0])) {\n      originalConsoleError(...args);\n      return;\n    }\n\n    try {\n      if (!isWarningModuleWarning(...args) && !hasComponentStack(args)) {\n        // Only show LogBox for the 'warning' module, or React errors with\n        // component stacks, otherwise pass the error through.u\n        //\n        // By passing through, this will get picked up by the React console override,\n        // potentially adding the component stack. React then passes it back to the\n        // React Native ExceptionsManager, which reports it to LogBox as an error.\n        //\n        // Ideally, we refactor all RN error handling so that LogBox patching\n        // errors is not necessary, and they are reported the same as a framework.\n        // The blocker to this is that the ExceptionManager console.error override\n        // strigifys all of the args before passing it through to LogBox, which\n        // would lose all of the interpolation information.\n        //\n        // The 'warning' module needs to be handled here because React internally calls\n        // `console.error('Warning: ')` with the component stack already included.\n        originalConsoleError(...args);\n        return;\n      }\n\n      const format = args[0].replace('Warning: ', '');\n      const filterResult = LogBoxData.checkWarningFilter(format);\n      let level = 'error';\n      if (filterResult.monitorEvent !== 'warning_unhandled') {\n        if (filterResult.suppressCompletely) {\n          return;\n        }\n\n        if (filterResult.suppressDialog_LEGACY === true) {\n          level = 'warn';\n        } else if (filterResult.forceDialogImmediately === true) {\n          level = 'fatal'; // Do not downgrade. These are real bugs with same severity as throws.\n        }\n      }\n\n      // Unfortunately, we need to add the Warning: prefix back for downstream dependencies.\n      // Downstream, we check for this prefix to know that LogBox already handled it, so\n      // it doesn't get reported back to LogBox. It's an absolute mess.\n      args[0] = `Warning: ${filterResult.finalFormat}`;\n      const {category, message, componentStack, componentStackType} =\n        parseLogBoxLog(args);\n\n      // Interpolate the message so they are formatted for adb and other CLIs.\n      // This is different than the message.content above because it includes component stacks.\n      const interpolated = parseInterpolation(args);\n      originalConsoleError(interpolated.message.content);\n\n      if (!LogBoxData.isMessageIgnored(message.content)) {\n        LogBoxData.addLog({\n          level,\n          category,\n          message,\n          componentStack,\n          componentStackType,\n        });\n      }\n    } catch (err) {\n      LogBoxData.reportLogBoxError(err);\n    }\n  };\n} else {\n  LogBox = {\n    install(): void {\n      // Do nothing.\n    },\n\n    uninstall(): void {\n      // Do nothing.\n    },\n\n    isInstalled(): boolean {\n      return false;\n    },\n\n    ignoreLogs(patterns: $ReadOnlyArray<IgnorePattern>): void {\n      // Do nothing.\n    },\n\n    ignoreAllLogs(value?: ?boolean): void {\n      // Do nothing.\n    },\n\n    clearAllLogs(): void {\n      // Do nothing.\n    },\n\n    addLog(log: LogData): void {\n      // Do nothing.\n    },\n\n    addException(error: ExtendedExceptionData): void {\n      // Do nothing.\n    },\n  };\n}\n\nexport default (LogBox: ILogBox);\n"],"mappings":"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","ignoreList":[]}