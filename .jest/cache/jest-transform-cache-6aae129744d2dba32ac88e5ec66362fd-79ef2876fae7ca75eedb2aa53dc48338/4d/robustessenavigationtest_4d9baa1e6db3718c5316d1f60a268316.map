{"version":3,"names":["_getJestObj","mock","useFocusEffect","jest","fn","callback","router","push","back","Stack","_ref","children","_jsxRuntime","jsx","Fragment","useLocalSearchParams","useNavigation","navigate","goBack","canGoBack","addListener","isFocused","useCurrentLevel","mockUseCurrentLevel","actualUseVocabulary","requireActual","default","vocabularyData","level","mode","loaded","Object","assign","currentWord","exercises","words","display","wordCounter","categories","map","ex","name","title","isBonusLevel","getLevelColor","getVocabularyData","undefined","word","translation","example","useLastActivity","saveActivity","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_ExerciseSelection","_vocabulary","_require","describe","beforeEach","clearAllMocks","test","mockReturnValue","currentLevel","_render","render","queryByText","getByText","waitFor","expect","toBeNull","toBeTruthy","_render2","_render3","_render4","route","params","getByTestId","_render5","_render6","_render7","_render8","_render9","queryByTestId","_render0","_render1","_render10"],"sources":["robustesse-navigation.test.js"],"sourcesContent":["import React from 'react';\r\nimport { render, waitFor } from '@testing-library/react-native';\r\n\r\n// Screens to test\r\nimport ExerciseSelection from '../../src/screens/ExerciseSelection';\r\nimport VocabularyExercise from '../../src/screens/exercises/vocabulary';\r\n\r\n// Mock expo-router\r\njest.mock('expo-router', () => ({\r\n  useFocusEffect: jest.fn(callback => callback()),\r\n  router: {\r\n    push: jest.fn(),\r\n    back: jest.fn(),\r\n  },\r\n  Stack: ({ children }) => <>{children}</>,\r\n  useLocalSearchParams: () => ({}),\r\n  useNavigation: () => ({\r\n    navigate: jest.fn(),\r\n    goBack: jest.fn(),\r\n    canGoBack: jest.fn(() => true),\r\n    addListener: jest.fn(),\r\n    isFocused: jest.fn(() => true),\r\n  }),\r\n}));\r\n\r\n// Mock useCurrentLevel with different scenarios\r\nconst mockUseCurrentLevel = jest.fn();\r\njest.mock('../../src/contexts/CurrentLevelContext', () => ({\r\n  useCurrentLevel: mockUseCurrentLevel,\r\n}));\r\n\r\n// Mock useVocabulary hook\r\njest.mock('../../src/screens/exercises/vocabulary/hooks/useVocabulary', () => {\r\n  const actualUseVocabulary = jest.requireActual('../../src/screens/exercises/vocabulary/hooks/useVocabulary').default;\r\n  return jest.fn((vocabularyData, level, mode) => {\r\n    if (!vocabularyData) {\r\n      return { loaded: false }; // Simulate loading state when no data\r\n    }\r\n    return {\r\n      ...actualUseVocabulary(vocabularyData, level, mode),\r\n      loaded: true,\r\n      currentWord: vocabularyData.exercises[0].words[0],\r\n      display: {\r\n        wordCounter: '1 / 1',\r\n        categories: vocabularyData.exercises.map(ex => ({ name: ex.title, words: ex.words })),\r\n      },\r\n    };\r\n  });\r\n});\r\n\r\n// Mock vocabularyDataHelper\r\njest.mock('../../src/utils/vocabulary/vocabularyDataHelper', () => ({\r\n  isBonusLevel: jest.fn(() => false),\r\n  getLevelColor: jest.fn((level) => {\r\n    if (!level) return 'gray'; // Default color for missing level\r\n    return 'blue';\r\n  }),\r\n  getVocabularyData: jest.fn((level, mode) => {\r\n    // Return null for invalid/missing levels\r\n    if (!level || level === 'invalid' || level === undefined) {\r\n      return null;\r\n    }\r\n    \r\n    if (level === 'A1' || level === '1') {\r\n      return {\r\n        exercises: [{\r\n          title: 'Identité & informations personnelles',\r\n          words: [{ word: 'name', translation: 'nom', example: 'My name is Sarah.' }],\r\n        }],\r\n      };\r\n    }\r\n    \r\n    return null; // For any other level\r\n  }),\r\n}));\r\n\r\n// Mock other hooks\r\njest.mock('../../src/hooks/useLastActivity', () => ({\r\n  useLastActivity: jest.fn(() => ({\r\n    saveActivity: jest.fn(),\r\n  })),\r\n}));\r\n\r\ndescribe('Test d\\'intégration: Robustesse de la navigation', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('ExerciseSelection - Gestion des niveaux manquants', () => {\r\n    test('Affiche un état contrôlé quand aucun niveau n\\'est fourni', async () => {\r\n      // Mock: pas de niveau courant\r\n      mockUseCurrentLevel.mockReturnValue({\r\n        currentLevel: undefined,\r\n      });\r\n\r\n      const { queryByText, getByText } = render(<ExerciseSelection />);\r\n\r\n      await waitFor(() => {\r\n        // Vérifier qu'aucun exercice spécifique n'est affiché\r\n        expect(queryByText(/Exercices de vocabulaire/i)).toBeNull();\r\n        \r\n        // Vérifier qu'un message d'état vide ou d'erreur est affiché\r\n        // (Adapter selon l'implémentation réelle de votre composant)\r\n        expect(\r\n          getByText(/Sélectionnez un niveau/i) || \r\n          getByText(/Aucun niveau disponible/i) ||\r\n          queryByText(/Chargement/i)\r\n        ).toBeTruthy();\r\n      });\r\n    });\r\n\r\n    test('Affiche un état contrôlé avec un niveau invalide', async () => {\r\n      mockUseCurrentLevel.mockReturnValue({\r\n        currentLevel: 'invalid_level',\r\n      });\r\n\r\n      const { queryByText } = render(<ExerciseSelection />);\r\n\r\n      await waitFor(() => {\r\n        // Ne doit pas afficher d'exercices valides\r\n        expect(queryByText('name')).toBeNull();\r\n        expect(queryByText('rhetoric')).toBeNull();\r\n      });\r\n    });\r\n\r\n    test('Fonctionne correctement avec un niveau valide', async () => {\r\n      mockUseCurrentLevel.mockReturnValue({\r\n        currentLevel: 'A1',\r\n      });\r\n\r\n      const { getByText } = render(<ExerciseSelection />);\r\n\r\n      await waitFor(() => {\r\n        // Doit afficher les exercices pour le niveau A1\r\n        // (Adapter selon l'implémentation de votre ExerciseSelection)\r\n        expect(getByText(/Exercices/i) || getByText(/A1/i)).toBeTruthy();\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('VocabularyExercise - Gestion des paramètres manquants', () => {\r\n    test('Affiche un indicateur de chargement sans paramètre de niveau', async () => {\r\n      const { getByTestId, queryByText } = render(\r\n        <VocabularyExercise route={{ params: {} }} />\r\n      );\r\n\r\n      await waitFor(() => {\r\n        // Vérifier que l'indicateur de chargement est affiché\r\n        expect(getByTestId('activity-indicator')).toBeTruthy();\r\n        \r\n        // Vérifier qu'aucun contenu d'exercice n'est affiché\r\n        expect(queryByText('name')).toBeNull();\r\n        expect(queryByText('rhetoric')).toBeNull();\r\n      });\r\n    });\r\n\r\n    test('Affiche un indicateur de chargement avec un niveau undefined', async () => {\r\n      const { getByTestId, queryByText } = render(\r\n        <VocabularyExercise route={{ params: { level: undefined, mode: 'classic' } }} />\r\n      );\r\n\r\n      await waitFor(() => {\r\n        expect(getByTestId('activity-indicator')).toBeTruthy();\r\n        expect(queryByText('name')).toBeNull();\r\n      });\r\n    });\r\n\r\n    test('Affiche un indicateur de chargement avec un niveau invalide', async () => {\r\n      const { getByTestId, queryByText } = render(\r\n        <VocabularyExercise route={{ params: { level: 'invalid_level', mode: 'classic' } }} />\r\n      );\r\n\r\n      await waitFor(() => {\r\n        expect(getByTestId('activity-indicator')).toBeTruthy();\r\n        expect(queryByText('name')).toBeNull();\r\n        expect(queryByText('rhetoric')).toBeNull();\r\n      });\r\n    });\r\n\r\n    test('Gère gracieusement l\\'absence de mode', async () => {\r\n      const { getByTestId } = render(\r\n        <VocabularyExercise route={{ params: { level: 'A1' } }} />\r\n      );\r\n\r\n      // Même avec un niveau valide mais sans mode, \r\n      // l'application ne doit pas crasher\r\n      await waitFor(() => {\r\n        // Pourrait afficher le contenu ou un indicateur de chargement\r\n        // selon l'implémentation\r\n        expect(\r\n          getByTestId('activity-indicator') || \r\n          queryByText('name')\r\n        ).toBeTruthy();\r\n      });\r\n    });\r\n\r\n    test('Gère correctement les paramètres de route malformés', async () => {\r\n      // Test avec des paramètres complètement absents\r\n      const { getByTestId } = render(\r\n        <VocabularyExercise route={{}} />\r\n      );\r\n\r\n      await waitFor(() => {\r\n        expect(getByTestId('activity-indicator')).toBeTruthy();\r\n      });\r\n    });\r\n\r\n    test('Fonctionne correctement avec des paramètres valides', async () => {\r\n      const { getByText, queryByTestId } = render(\r\n        <VocabularyExercise route={{ params: { level: 'A1', mode: 'classic' } }} />\r\n      );\r\n\r\n      await waitFor(() => {\r\n        // Avec des paramètres valides, le contenu doit s'afficher\r\n        expect(getByText('name')).toBeTruthy();\r\n        expect(getByText('nom')).toBeTruthy();\r\n        \r\n        // Plus d'indicateur de chargement\r\n        expect(queryByTestId('activity-indicator')).toBeNull();\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Cas limites et edge cases', () => {\r\n    test('Gère les valeurs null dans les paramètres', async () => {\r\n      const { getByTestId } = render(\r\n        <VocabularyExercise route={{ params: { level: null, mode: null } }} />\r\n      );\r\n\r\n      await waitFor(() => {\r\n        expect(getByTestId('activity-indicator')).toBeTruthy();\r\n      });\r\n    });\r\n\r\n    test('Gère les chaînes vides dans les paramètres', async () => {\r\n      const { getByTestId } = render(\r\n        <VocabularyExercise route={{ params: { level: '', mode: '' } }} />\r\n      );\r\n\r\n      await waitFor(() => {\r\n        expect(getByTestId('activity-indicator')).toBeTruthy();\r\n      });\r\n    });\r\n\r\n    test('Gère les types de données inattendus', async () => {\r\n      const { getByTestId } = render(\r\n        <VocabularyExercise route={{ params: { level: 123, mode: {} } }} />\r\n      );\r\n\r\n      await waitFor(() => {\r\n        expect(getByTestId('activity-indicator')).toBeTruthy();\r\n      });\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}