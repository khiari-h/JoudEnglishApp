0be2acd3d036512dfa5d5a73b8b7a717
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NativeVirtualText = exports.NativeText = void 0;
var _ViewConfig = require("../NativeComponent/ViewConfig");
var _UIManager = _interopRequireDefault(require("../ReactNative/UIManager"));
var _createReactNativeComponentClass = _interopRequireDefault(require("../Renderer/shims/createReactNativeComponentClass"));
var _Platform = _interopRequireDefault(require("../Utilities/Platform"));
var textViewConfig = {
  validAttributes: {
    isHighlighted: true,
    isPressable: true,
    numberOfLines: true,
    ellipsizeMode: true,
    allowFontScaling: true,
    dynamicTypeRamp: true,
    maxFontSizeMultiplier: true,
    disabled: true,
    selectable: true,
    selectionColor: true,
    adjustsFontSizeToFit: true,
    minimumFontScale: true,
    textBreakStrategy: true,
    onTextLayout: true,
    onInlineViewLayout: true,
    dataDetectorType: true,
    android_hyphenationFrequency: true,
    lineBreakStrategyIOS: true
  },
  directEventTypes: {
    topTextLayout: {
      registrationName: 'onTextLayout'
    },
    topInlineViewLayout: {
      registrationName: 'onInlineViewLayout'
    }
  },
  uiViewClassName: 'RCTText'
};
var virtualTextViewConfig = {
  validAttributes: {
    isHighlighted: true,
    isPressable: true,
    maxFontSizeMultiplier: true
  },
  uiViewClassName: 'RCTVirtualText'
};
var NativeText = exports.NativeText = (0, _createReactNativeComponentClass.default)('RCTText', function () {
  return (0, _ViewConfig.createViewConfig)(textViewConfig);
});
var NativeVirtualText = exports.NativeVirtualText = !global.RN$Bridgeless && !_UIManager.default.hasViewManagerConfig('RCTVirtualText') ? NativeText : (0, _createReactNativeComponentClass.default)('RCTVirtualText', function () {
  return (0, _ViewConfig.createViewConfig)(virtualTextViewConfig);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfVmlld0NvbmZpZyIsInJlcXVpcmUiLCJfVUlNYW5hZ2VyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9jcmVhdGVSZWFjdE5hdGl2ZUNvbXBvbmVudENsYXNzIiwiX1BsYXRmb3JtIiwidGV4dFZpZXdDb25maWciLCJ2YWxpZEF0dHJpYnV0ZXMiLCJpc0hpZ2hsaWdodGVkIiwiaXNQcmVzc2FibGUiLCJudW1iZXJPZkxpbmVzIiwiZWxsaXBzaXplTW9kZSIsImFsbG93Rm9udFNjYWxpbmciLCJkeW5hbWljVHlwZVJhbXAiLCJtYXhGb250U2l6ZU11bHRpcGxpZXIiLCJkaXNhYmxlZCIsInNlbGVjdGFibGUiLCJzZWxlY3Rpb25Db2xvciIsImFkanVzdHNGb250U2l6ZVRvRml0IiwibWluaW11bUZvbnRTY2FsZSIsInRleHRCcmVha1N0cmF0ZWd5Iiwib25UZXh0TGF5b3V0Iiwib25JbmxpbmVWaWV3TGF5b3V0IiwiZGF0YURldGVjdG9yVHlwZSIsImFuZHJvaWRfaHlwaGVuYXRpb25GcmVxdWVuY3kiLCJsaW5lQnJlYWtTdHJhdGVneUlPUyIsImRpcmVjdEV2ZW50VHlwZXMiLCJ0b3BUZXh0TGF5b3V0IiwicmVnaXN0cmF0aW9uTmFtZSIsInRvcElubGluZVZpZXdMYXlvdXQiLCJ1aVZpZXdDbGFzc05hbWUiLCJ2aXJ0dWFsVGV4dFZpZXdDb25maWciLCJOYXRpdmVUZXh0IiwiZXhwb3J0cyIsImNyZWF0ZVJlYWN0TmF0aXZlQ29tcG9uZW50Q2xhc3MiLCJjcmVhdGVWaWV3Q29uZmlnIiwiTmF0aXZlVmlydHVhbFRleHQiLCJnbG9iYWwiLCJSTiRCcmlkZ2VsZXNzIiwiVUlNYW5hZ2VyIiwiaGFzVmlld01hbmFnZXJDb25maWciXSwic291cmNlcyI6WyJUZXh0TmF0aXZlQ29tcG9uZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCB0eXBlIHtIb3N0Q29tcG9uZW50fSBmcm9tICcuLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZVR5cGVzJztcbmltcG9ydCB0eXBlIHtQcm9jZXNzZWRDb2xvclZhbHVlfSBmcm9tICcuLi9TdHlsZVNoZWV0L3Byb2Nlc3NDb2xvcic7XG5pbXBvcnQgdHlwZSB7UHJlc3NFdmVudH0gZnJvbSAnLi4vVHlwZXMvQ29yZUV2ZW50VHlwZXMnO1xuaW1wb3J0IHR5cGUge1RleHRQcm9wc30gZnJvbSAnLi9UZXh0UHJvcHMnO1xuXG5pbXBvcnQge2NyZWF0ZVZpZXdDb25maWd9IGZyb20gJy4uL05hdGl2ZUNvbXBvbmVudC9WaWV3Q29uZmlnJztcbmltcG9ydCBVSU1hbmFnZXIgZnJvbSAnLi4vUmVhY3ROYXRpdmUvVUlNYW5hZ2VyJztcbmltcG9ydCBjcmVhdGVSZWFjdE5hdGl2ZUNvbXBvbmVudENsYXNzIGZyb20gJy4uL1JlbmRlcmVyL3NoaW1zL2NyZWF0ZVJlYWN0TmF0aXZlQ29tcG9uZW50Q2xhc3MnO1xuaW1wb3J0IFBsYXRmb3JtIGZyb20gJy4uL1V0aWxpdGllcy9QbGF0Zm9ybSc7XG5cbmV4cG9ydCB0eXBlIE5hdGl2ZVRleHRQcm9wcyA9ICRSZWFkT25seTx7XG4gIC4uLlRleHRQcm9wcyxcbiAgaXNIaWdobGlnaHRlZD86ID9ib29sZWFuLFxuICBzZWxlY3Rpb25Db2xvcj86ID9Qcm9jZXNzZWRDb2xvclZhbHVlLFxuICBvbkNsaWNrPzogPyhldmVudDogUHJlc3NFdmVudCkgPT4gbWl4ZWQsXG4gIC8vIFRoaXMgaXMgb25seSBuZWVkZWQgZm9yIHBsYXRmb3JtcyB0aGF0IG9wdGltaXplIHRleHQgaGl0IHRlc3RpbmcsIGUuZy4sXG4gIC8vIHJlYWN0LW5hdGl2ZS13aW5kb3dzLiBJdCBjYW4gYmUgdXNlZCB0byBvbmx5IGhpdCB0ZXN0IHZpcnR1YWwgdGV4dCBzcGFuc1xuICAvLyB0aGF0IGhhdmUgcHJlc3NhYmxlIGV2ZW50cyBhdHRhY2hlZCB0byB0aGVtLlxuICBpc1ByZXNzYWJsZT86ID9ib29sZWFuLFxufT47XG5cbmNvbnN0IHRleHRWaWV3Q29uZmlnID0ge1xuICB2YWxpZEF0dHJpYnV0ZXM6IHtcbiAgICBpc0hpZ2hsaWdodGVkOiB0cnVlLFxuICAgIGlzUHJlc3NhYmxlOiB0cnVlLFxuICAgIG51bWJlck9mTGluZXM6IHRydWUsXG4gICAgZWxsaXBzaXplTW9kZTogdHJ1ZSxcbiAgICBhbGxvd0ZvbnRTY2FsaW5nOiB0cnVlLFxuICAgIGR5bmFtaWNUeXBlUmFtcDogdHJ1ZSxcbiAgICBtYXhGb250U2l6ZU11bHRpcGxpZXI6IHRydWUsXG4gICAgZGlzYWJsZWQ6IHRydWUsXG4gICAgc2VsZWN0YWJsZTogdHJ1ZSxcbiAgICBzZWxlY3Rpb25Db2xvcjogdHJ1ZSxcbiAgICBhZGp1c3RzRm9udFNpemVUb0ZpdDogdHJ1ZSxcbiAgICBtaW5pbXVtRm9udFNjYWxlOiB0cnVlLFxuICAgIHRleHRCcmVha1N0cmF0ZWd5OiB0cnVlLFxuICAgIG9uVGV4dExheW91dDogdHJ1ZSxcbiAgICBvbklubGluZVZpZXdMYXlvdXQ6IHRydWUsXG4gICAgZGF0YURldGVjdG9yVHlwZTogdHJ1ZSxcbiAgICBhbmRyb2lkX2h5cGhlbmF0aW9uRnJlcXVlbmN5OiB0cnVlLFxuICAgIGxpbmVCcmVha1N0cmF0ZWd5SU9TOiB0cnVlLFxuICB9LFxuICBkaXJlY3RFdmVudFR5cGVzOiB7XG4gICAgdG9wVGV4dExheW91dDoge1xuICAgICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uVGV4dExheW91dCcsXG4gICAgfSxcbiAgICB0b3BJbmxpbmVWaWV3TGF5b3V0OiB7XG4gICAgICByZWdpc3RyYXRpb25OYW1lOiAnb25JbmxpbmVWaWV3TGF5b3V0JyxcbiAgICB9LFxuICB9LFxuICB1aVZpZXdDbGFzc05hbWU6ICdSQ1RUZXh0Jyxcbn07XG5cbmNvbnN0IHZpcnR1YWxUZXh0Vmlld0NvbmZpZyA9IHtcbiAgdmFsaWRBdHRyaWJ1dGVzOiB7XG4gICAgaXNIaWdobGlnaHRlZDogdHJ1ZSxcbiAgICBpc1ByZXNzYWJsZTogdHJ1ZSxcbiAgICBtYXhGb250U2l6ZU11bHRpcGxpZXI6IHRydWUsXG4gIH0sXG4gIHVpVmlld0NsYXNzTmFtZTogJ1JDVFZpcnR1YWxUZXh0Jyxcbn07XG5cbmV4cG9ydCBjb25zdCBOYXRpdmVUZXh0OiBIb3N0Q29tcG9uZW50PE5hdGl2ZVRleHRQcm9wcz4gPVxuICAoY3JlYXRlUmVhY3ROYXRpdmVDb21wb25lbnRDbGFzcygnUkNUVGV4dCcsICgpID0+XG4gICAgY3JlYXRlVmlld0NvbmZpZyh0ZXh0Vmlld0NvbmZpZyksXG4gICk6IGFueSk7XG5cbmV4cG9ydCBjb25zdCBOYXRpdmVWaXJ0dWFsVGV4dDogSG9zdENvbXBvbmVudDxOYXRpdmVUZXh0UHJvcHM+ID1cbiAgIWdsb2JhbC5STiRCcmlkZ2VsZXNzICYmICFVSU1hbmFnZXIuaGFzVmlld01hbmFnZXJDb25maWcoJ1JDVFZpcnR1YWxUZXh0JylcbiAgICA/IE5hdGl2ZVRleHRcbiAgICA6IChjcmVhdGVSZWFjdE5hdGl2ZUNvbXBvbmVudENsYXNzKCdSQ1RWaXJ0dWFsVGV4dCcsICgpID0+XG4gICAgICAgIGNyZWF0ZVZpZXdDb25maWcodmlydHVhbFRleHRWaWV3Q29uZmlnKSxcbiAgICAgICk6IGFueSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBZUEsSUFBQUEsV0FBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsVUFBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUcsZ0NBQUEsR0FBQUQsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFJLFNBQUEsR0FBQUYsc0JBQUEsQ0FBQUYsT0FBQTtBQWFBLElBQU1LLGNBQWMsR0FBRztFQUNyQkMsZUFBZSxFQUFFO0lBQ2ZDLGFBQWEsRUFBRSxJQUFJO0lBQ25CQyxXQUFXLEVBQUUsSUFBSTtJQUNqQkMsYUFBYSxFQUFFLElBQUk7SUFDbkJDLGFBQWEsRUFBRSxJQUFJO0lBQ25CQyxnQkFBZ0IsRUFBRSxJQUFJO0lBQ3RCQyxlQUFlLEVBQUUsSUFBSTtJQUNyQkMscUJBQXFCLEVBQUUsSUFBSTtJQUMzQkMsUUFBUSxFQUFFLElBQUk7SUFDZEMsVUFBVSxFQUFFLElBQUk7SUFDaEJDLGNBQWMsRUFBRSxJQUFJO0lBQ3BCQyxvQkFBb0IsRUFBRSxJQUFJO0lBQzFCQyxnQkFBZ0IsRUFBRSxJQUFJO0lBQ3RCQyxpQkFBaUIsRUFBRSxJQUFJO0lBQ3ZCQyxZQUFZLEVBQUUsSUFBSTtJQUNsQkMsa0JBQWtCLEVBQUUsSUFBSTtJQUN4QkMsZ0JBQWdCLEVBQUUsSUFBSTtJQUN0QkMsNEJBQTRCLEVBQUUsSUFBSTtJQUNsQ0Msb0JBQW9CLEVBQUU7RUFDeEIsQ0FBQztFQUNEQyxnQkFBZ0IsRUFBRTtJQUNoQkMsYUFBYSxFQUFFO01BQ2JDLGdCQUFnQixFQUFFO0lBQ3BCLENBQUM7SUFDREMsbUJBQW1CLEVBQUU7TUFDbkJELGdCQUFnQixFQUFFO0lBQ3BCO0VBQ0YsQ0FBQztFQUNERSxlQUFlLEVBQUU7QUFDbkIsQ0FBQztBQUVELElBQU1DLHFCQUFxQixHQUFHO0VBQzVCeEIsZUFBZSxFQUFFO0lBQ2ZDLGFBQWEsRUFBRSxJQUFJO0lBQ25CQyxXQUFXLEVBQUUsSUFBSTtJQUNqQksscUJBQXFCLEVBQUU7RUFDekIsQ0FBQztFQUNEZ0IsZUFBZSxFQUFFO0FBQ25CLENBQUM7QUFFTSxJQUFNRSxVQUEwQyxHQUFBQyxPQUFBLENBQUFELFVBQUEsR0FDcEQsSUFBQUUsd0NBQStCLEVBQUMsU0FBUyxFQUFFO0VBQUEsT0FDMUMsSUFBQUMsNEJBQWdCLEVBQUM3QixjQUFjLENBQUM7QUFBQSxDQUNsQyxDQUFPO0FBRUYsSUFBTThCLGlCQUFpRCxHQUFBSCxPQUFBLENBQUFHLGlCQUFBLEdBQzVELENBQUNDLE1BQU0sQ0FBQ0MsYUFBYSxJQUFJLENBQUNDLGtCQUFTLENBQUNDLG9CQUFvQixDQUFDLGdCQUFnQixDQUFDLEdBQ3RFUixVQUFVLEdBQ1QsSUFBQUUsd0NBQStCLEVBQUMsZ0JBQWdCLEVBQUU7RUFBQSxPQUNqRCxJQUFBQyw0QkFBZ0IsRUFBQ0oscUJBQXFCLENBQUM7QUFBQSxDQUN6QyxDQUFPIiwiaWdub3JlTGlzdCI6W119