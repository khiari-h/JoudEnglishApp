cf662e3492a4896d55fc948d3957e938
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.configureLayoutAnimationBatch = configureLayoutAnimationBatch;
Object.defineProperty(exports, "createWorkletRuntime", {
  enumerable: true,
  get: function get() {
    return _runtimes.createWorkletRuntime;
  }
});
exports.enableLayoutAnimations = enableLayoutAnimations;
Object.defineProperty(exports, "executeOnUIRuntimeSync", {
  enumerable: true,
  get: function get() {
    return _threads.executeOnUIRuntimeSync;
  }
});
exports.getViewProp = getViewProp;
exports.initializeSensor = initializeSensor;
exports.isReanimated3 = exports.isConfigured = void 0;
exports.jsiConfigureProps = jsiConfigureProps;
Object.defineProperty(exports, "makeMutable", {
  enumerable: true,
  get: function get() {
    return _mutables.makeMutable;
  }
});
Object.defineProperty(exports, "makeShareable", {
  enumerable: true,
  get: function get() {
    return _shareables.makeShareable;
  }
});
Object.defineProperty(exports, "makeShareableCloneRecursive", {
  enumerable: true,
  get: function get() {
    return _shareables.makeShareableCloneRecursive;
  }
});
exports.registerEventHandler = registerEventHandler;
exports.registerSensor = registerSensor;
Object.defineProperty(exports, "runOnJS", {
  enumerable: true,
  get: function get() {
    return _threads.runOnJS;
  }
});
Object.defineProperty(exports, "runOnRuntime", {
  enumerable: true,
  get: function get() {
    return _runtimes.runOnRuntime;
  }
});
Object.defineProperty(exports, "runOnUI", {
  enumerable: true,
  get: function get() {
    return _threads.runOnUI;
  }
});
exports.setShouldAnimateExitingForTag = setShouldAnimateExitingForTag;
Object.defineProperty(exports, "startMapper", {
  enumerable: true,
  get: function get() {
    return _mappers.startMapper;
  }
});
Object.defineProperty(exports, "stopMapper", {
  enumerable: true,
  get: function get() {
    return _mappers.stopMapper;
  }
});
exports.subscribeForKeyboardEvents = subscribeForKeyboardEvents;
exports.unregisterEventHandler = unregisterEventHandler;
exports.unregisterSensor = unregisterSensor;
exports.unsubscribeFromKeyboardEvents = unsubscribeFromKeyboardEvents;
var _NativeReanimated = _interopRequireDefault(require("./NativeReanimated"));
var _PlatformChecker = require("./PlatformChecker");
var _shareables = require("./shareables");
var _initializers = require("./initializers");
var _SensorContainer = require("./SensorContainer");
var _errors = require("./errors");
var _mappers = require("./mappers");
var _threads = require("./threads");
var _runtimes = require("./runtimes");
var _mutables = require("./mutables");
var SHOULD_BE_USE_WEB = (0, _PlatformChecker.shouldBeUseWeb)();
var isReanimated3 = exports.isReanimated3 = function isReanimated3() {
  return true;
};
var isConfigured = exports.isConfigured = isReanimated3;
function getViewProp(viewTag, propName, component) {
  if ((0, _PlatformChecker.isFabric)() && !component) {
    throw new _errors.ReanimatedError('Function `getViewProp` requires a component to be passed as an argument on Fabric.');
  }
  return new Promise(function (resolve, reject) {
    return _NativeReanimated.default.getViewProp(viewTag, propName, component, function (result) {
      if (typeof result === 'string' && result.substr(0, 6) === 'error:') {
        reject(result);
      } else {
        resolve(result);
      }
    });
  });
}
function getSensorContainer() {
  if (!global.__sensorContainer) {
    global.__sensorContainer = new _SensorContainer.SensorContainer();
  }
  return global.__sensorContainer;
}
var _worklet_256187030140_init_data = {
  code: "function handleAndFlushAnimationFrame_coreTs1(eventTimestamp,event){const{eventHandler}=this.__closure;global.__frameTimestamp=eventTimestamp;eventHandler(event);global.__flushAnimationFrame(eventTimestamp);global.__frameTimestamp=undefined;}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\core.ts",
  sourceMap: "{\"version\":3,\"names\":[\"handleAndFlushAnimationFrame_coreTs1\",\"eventTimestamp\",\"event\",\"eventHandler\",\"__closure\",\"global\",\"__frameTimestamp\",\"__flushAnimationFrame\",\"undefined\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/core.ts\"],\"mappings\":\"AA+EE,SAAAA,oCAAsCA,CAAAC,cAAgC,CAAEC,KAAA,QAAAC,YAAA,OAAAC,SAAA,CAEtEC,MAAM,CAACC,gBAAgB,CAAGL,cAAc,CACxCE,YAAY,CAACD,KAAK,CAAC,CACnBG,MAAM,CAACE,qBAAqB,CAACN,cAAc,CAAC,CAC5CI,MAAM,CAACC,gBAAgB,CAAGE,SAAS,CACrC\",\"ignoreList\":[]}",
  version: "3.16.7"
};
function registerEventHandler(eventHandler, eventName) {
  var emitterReactTag = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
  var handleAndFlushAnimationFrame = function () {
    var _e = [new global.Error(), -2, -27];
    var handleAndFlushAnimationFrame = function handleAndFlushAnimationFrame(eventTimestamp, event) {
      global.__frameTimestamp = eventTimestamp;
      eventHandler(event);
      global.__flushAnimationFrame(eventTimestamp);
      global.__frameTimestamp = undefined;
    };
    handleAndFlushAnimationFrame.__closure = {
      eventHandler: eventHandler
    };
    handleAndFlushAnimationFrame.__workletHash = 256187030140;
    handleAndFlushAnimationFrame.__initData = _worklet_256187030140_init_data;
    handleAndFlushAnimationFrame.__stackDetails = _e;
    return handleAndFlushAnimationFrame;
  }();
  return _NativeReanimated.default.registerEventHandler((0, _shareables.makeShareableCloneRecursive)(handleAndFlushAnimationFrame), eventName, emitterReactTag);
}
function unregisterEventHandler(id) {
  return _NativeReanimated.default.unregisterEventHandler(id);
}
var _worklet_5321754778769_init_data = {
  code: "function handleAndFlushAnimationFrame_coreTs2(state,height){const{eventHandler}=this.__closure;const now=global._getAnimationTimestamp();global.__frameTimestamp=now;eventHandler(state,height);global.__flushAnimationFrame(now);global.__frameTimestamp=undefined;}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\core.ts",
  sourceMap: "{\"version\":3,\"names\":[\"handleAndFlushAnimationFrame_coreTs2\",\"state\",\"height\",\"eventHandler\",\"__closure\",\"now\",\"global\",\"_getAnimationTimestamp\",\"__frameTimestamp\",\"__flushAnimationFrame\",\"undefined\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/core.ts\"],\"mappings\":\"AAqGE,SAAAA,qCAAAC,KAAA,CAAAC,MAAA,QAAAC,YAAA,OAAAC,SAAA,OAAAC,GAAA,CAAAC,MAAA,CAAAC,sBAAA,GACAD,MAAA,CAAAE,gBAAA,CAAAH,GAAA,CACAF,YAAS,CAAAF,KAAA,CAAAC,MAAA,EAEPI,MAAM,CAAAG,qBAAa,CAAAJ,GAAA,EACnBC,MAAM,CAACE,gBAAgB,CAAGE,SAAG,C\",\"ignoreList\":[]}",
  version: "3.16.7"
};
function subscribeForKeyboardEvents(eventHandler, options) {
  var _options$isStatusBarT, _options$isNavigation;
  var handleAndFlushAnimationFrame = function () {
    var _e = [new global.Error(), -2, -27];
    var handleAndFlushAnimationFrame = function handleAndFlushAnimationFrame(state, height) {
      var now = global._getAnimationTimestamp();
      global.__frameTimestamp = now;
      eventHandler(state, height);
      global.__flushAnimationFrame(now);
      global.__frameTimestamp = undefined;
    };
    handleAndFlushAnimationFrame.__closure = {
      eventHandler: eventHandler
    };
    handleAndFlushAnimationFrame.__workletHash = 5321754778769;
    handleAndFlushAnimationFrame.__initData = _worklet_5321754778769_init_data;
    handleAndFlushAnimationFrame.__stackDetails = _e;
    return handleAndFlushAnimationFrame;
  }();
  return _NativeReanimated.default.subscribeForKeyboardEvents((0, _shareables.makeShareableCloneRecursive)(handleAndFlushAnimationFrame), (_options$isStatusBarT = options.isStatusBarTranslucentAndroid) != null ? _options$isStatusBarT : false, (_options$isNavigation = options.isNavigationBarTranslucentAndroid) != null ? _options$isNavigation : false);
}
function unsubscribeFromKeyboardEvents(listenerId) {
  return _NativeReanimated.default.unsubscribeFromKeyboardEvents(listenerId);
}
function registerSensor(sensorType, config, eventHandler) {
  var sensorContainer = getSensorContainer();
  return sensorContainer.registerSensor(sensorType, config, (0, _shareables.makeShareableCloneRecursive)(eventHandler));
}
function initializeSensor(sensorType, config) {
  var sensorContainer = getSensorContainer();
  return sensorContainer.initializeSensor(sensorType, config);
}
function unregisterSensor(sensorId) {
  var sensorContainer = getSensorContainer();
  return sensorContainer.unregisterSensor(sensorId);
}
if (!(0, _PlatformChecker.isWeb)()) {
  (0, _initializers.initializeUIRuntime)();
}
var featuresConfig = {
  enableLayoutAnimations: false,
  setByUser: false
};
function enableLayoutAnimations(flag) {
  var isCallByUser = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  if (isCallByUser) {
    featuresConfig = {
      enableLayoutAnimations: flag,
      setByUser: true
    };
    _NativeReanimated.default.enableLayoutAnimations(flag);
  } else if (!featuresConfig.setByUser && featuresConfig.enableLayoutAnimations !== flag) {
    featuresConfig.enableLayoutAnimations = flag;
    _NativeReanimated.default.enableLayoutAnimations(flag);
  }
}
function configureLayoutAnimationBatch(layoutAnimationsBatch) {
  _NativeReanimated.default.configureLayoutAnimationBatch(layoutAnimationsBatch);
}
function setShouldAnimateExitingForTag(viewTag, shouldAnimate) {
  _NativeReanimated.default.setShouldAnimateExitingForTag(viewTag, shouldAnimate);
}
function jsiConfigureProps(uiProps, nativeProps) {
  if (!SHOULD_BE_USE_WEB) {
    _NativeReanimated.default.configureProps(uiProps, nativeProps);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,