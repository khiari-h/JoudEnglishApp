{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_Button","_jsxRuntime","describe","it","_render","render","jsx","default","title","onPress","getByText","expect","toBeTruthy","mockOnPress","jest","fn","_render2","fireEvent","press","toHaveBeenCalledTimes","_render3","disabled","not","toHaveBeenCalled","_render4","loading","queryByTestId","_render5","toBeNull"],"sources":["Button.test.js"],"sourcesContent":["import React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport Button from '../../../src/components/ui/Button';\n\ndescribe('Button', () => {\n  it('devrait rendre le texte correct', () => {\n    const { getByText } = render(<Button title=\"Mon Bouton\" onPress={() => {}} />);\n    expect(getByText('Mon Bouton')).toBeTruthy();\n  });\n\n  it('devrait appeler la fonction onPress quand le bouton est pressé', () => {\n    const mockOnPress = jest.fn();\n    const { getByText } = render(<Button title=\"Mon Bouton\" onPress={mockOnPress} />);\n    fireEvent.press(getByText('Mon Bouton'));\n    expect(mockOnPress).toHaveBeenCalledTimes(1);\n  });\n\n  it('ne devrait pas appeler la fonction onPress quand le bouton est désactivé', () => {\n    const mockOnPress = jest.fn();\n    const { getByText } = render(<Button title=\"Mon Bouton\" onPress={mockOnPress} disabled />);\n    fireEvent.press(getByText('Mon Bouton'));\n    expect(mockOnPress).not.toHaveBeenCalled();\n  });\n\n  it('devrait afficher un indicateur de chargement si loading est vrai', () => {\n    const { queryByTestId } = render(<Button title=\"Mon Bouton\" onPress={() => {}} loading />);\n    expect(queryByTestId('button-loader')).toBeTruthy();\n  });\n\n  it('ne devrait pas afficher un indicateur de chargement si loading est faux', () => {\n    const { queryByTestId } = render(<Button title=\"Mon Bouton\" onPress={() => {}} loading={false} />);\n    expect(queryByTestId('button-loader')).toBeNull();\n  });\n});\n"],"mappings":";AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AACA,IAAAE,OAAA,GAAAH,sBAAA,CAAAC,OAAA;AAAuD,IAAAG,WAAA,GAAAH,OAAA;AAEvDI,QAAQ,CAAC,QAAQ,EAAE,YAAM;EACvBC,EAAE,CAAC,iCAAiC,EAAE,YAAM;IAC1C,IAAAC,OAAA,GAAsB,IAAAC,mBAAM,EAAC,IAAAJ,WAAA,CAAAK,GAAA,EAACN,OAAA,CAAAO,OAAM;QAACC,KAAK,EAAC,YAAY;QAACC,OAAO,EAAE,SAATA,OAAOA,CAAA,EAAQ,CAAC;MAAE,CAAE,CAAC,CAAC;MAAtEC,SAAS,GAAAN,OAAA,CAATM,SAAS;IACjBC,MAAM,CAACD,SAAS,CAAC,YAAY,CAAC,CAAC,CAACE,UAAU,CAAC,CAAC;EAC9C,CAAC,CAAC;EAEFT,EAAE,CAAC,gEAAgE,EAAE,YAAM;IACzE,IAAMU,WAAW,GAAGC,IAAI,CAACC,EAAE,CAAC,CAAC;IAC7B,IAAAC,QAAA,GAAsB,IAAAX,mBAAM,EAAC,IAAAJ,WAAA,CAAAK,GAAA,EAACN,OAAA,CAAAO,OAAM;QAACC,KAAK,EAAC,YAAY;QAACC,OAAO,EAAEI;MAAY,CAAE,CAAC,CAAC;MAAzEH,SAAS,GAAAM,QAAA,CAATN,SAAS;IACjBO,sBAAS,CAACC,KAAK,CAACR,SAAS,CAAC,YAAY,CAAC,CAAC;IACxCC,MAAM,CAACE,WAAW,CAAC,CAACM,qBAAqB,CAAC,CAAC,CAAC;EAC9C,CAAC,CAAC;EAEFhB,EAAE,CAAC,0EAA0E,EAAE,YAAM;IACnF,IAAMU,WAAW,GAAGC,IAAI,CAACC,EAAE,CAAC,CAAC;IAC7B,IAAAK,QAAA,GAAsB,IAAAf,mBAAM,EAAC,IAAAJ,WAAA,CAAAK,GAAA,EAACN,OAAA,CAAAO,OAAM;QAACC,KAAK,EAAC,YAAY;QAACC,OAAO,EAAEI,WAAY;QAACQ,QAAQ;MAAA,CAAE,CAAC,CAAC;MAAlFX,SAAS,GAAAU,QAAA,CAATV,SAAS;IACjBO,sBAAS,CAACC,KAAK,CAACR,SAAS,CAAC,YAAY,CAAC,CAAC;IACxCC,MAAM,CAACE,WAAW,CAAC,CAACS,GAAG,CAACC,gBAAgB,CAAC,CAAC;EAC5C,CAAC,CAAC;EAEFpB,EAAE,CAAC,kEAAkE,EAAE,YAAM;IAC3E,IAAAqB,QAAA,GAA0B,IAAAnB,mBAAM,EAAC,IAAAJ,WAAA,CAAAK,GAAA,EAACN,OAAA,CAAAO,OAAM;QAACC,KAAK,EAAC,YAAY;QAACC,OAAO,EAAE,SAATA,OAAOA,CAAA,EAAQ,CAAC,CAAE;QAACgB,OAAO;MAAA,CAAE,CAAC,CAAC;MAAlFC,aAAa,GAAAF,QAAA,CAAbE,aAAa;IACrBf,MAAM,CAACe,aAAa,CAAC,eAAe,CAAC,CAAC,CAACd,UAAU,CAAC,CAAC;EACrD,CAAC,CAAC;EAEFT,EAAE,CAAC,yEAAyE,EAAE,YAAM;IAClF,IAAAwB,QAAA,GAA0B,IAAAtB,mBAAM,EAAC,IAAAJ,WAAA,CAAAK,GAAA,EAACN,OAAA,CAAAO,OAAM;QAACC,KAAK,EAAC,YAAY;QAACC,OAAO,EAAE,SAATA,OAAOA,CAAA,EAAQ,CAAC,CAAE;QAACgB,OAAO,EAAE;MAAM,CAAE,CAAC,CAAC;MAA1FC,aAAa,GAAAC,QAAA,CAAbD,aAAa;IACrBf,MAAM,CAACe,aAAa,CAAC,eAAe,CAAC,CAAC,CAACE,QAAQ,CAAC,CAAC;EACnD,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}