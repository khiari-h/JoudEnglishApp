7423868ec09847c2378b7b3be13a65b0
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        goBack: mockGoBack,
        canGoBack: mockCanGoBack
      };
    }
  };
});
_getJestObj().mock('@expo/vector-icons', function () {
  return {
    Ionicons: function Ionicons(_ref) {
      var name = _ref.name,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      var _require = require('react-native'),
        Text = _require.Text;
      return (0, _jsxRuntime.jsx)(Text, Object.assign({
        testID: `icon-${name}`
      }, props, {
        children: name
      }));
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Header = _interopRequireDefault(require("../../../src/components/layout/Header"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["name"];
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockGoBack = jest.fn();
var mockCanGoBack = jest.fn(function () {
  return true;
});
describe('Header', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('affiche le titre passé en prop', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Accueil"
      })),
      getByText = _render.getByText;
    expect(getByText('Accueil')).toBeTruthy();
  });
  it('n’affiche pas le bouton retour si showBackButton est false', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Sans Retour",
        showBackButton: false
      })),
      queryByTestId = _render2.queryByTestId;
    expect(queryByTestId('back-button')).toBeNull();
  });
  it('affiche le bouton retour si showBackButton est true', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Avec Retour",
        showBackButton: true
      })),
      getByTestId = _render3.getByTestId;
    expect(getByTestId('back-button')).toBeTruthy();
  });
  it('exécute une action au clic sur le bouton retour si onBackPress est défini', function () {
    var mockFn = jest.fn();
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Retour",
        showBackButton: true,
        onBackPress: mockFn
      })),
      getByTestId = _render4.getByTestId;
    _reactNative.fireEvent.press(getByTestId('back-button'));
    expect(mockFn).toHaveBeenCalled();
    expect(mockGoBack).not.toHaveBeenCalled();
  });
  it('appelle navigation.goBack() si onBackPress n’est pas défini', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Retour via Nav",
        showBackButton: true
      })),
      getByTestId = _render5.getByTestId;
    _reactNative.fireEvent.press(getByTestId('back-button'));
    expect(mockGoBack).toHaveBeenCalledTimes(1);
  });
  it('affiche un composant de gauche personnalisé si fourni', function () {
    var CustomLeft = (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "custom-left",
      children: "Custom Left"
    });
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Titre",
        leftComponent: CustomLeft,
        showBackButton: true
      })),
      getByTestId = _render6.getByTestId,
      queryByTestId = _render6.queryByTestId;
    expect(getByTestId('custom-left')).toBeTruthy();
    expect(queryByTestId('back-button')).toBeNull();
  });
  it('affiche une icône de droite si rightIcon est fourni', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Titre",
        rightIcon: "settings-outline"
      })),
      getByTestId = _render7.getByTestId;
    expect(getByTestId('icon-settings-outline')).toBeTruthy();
  });
  it('appelle onRightPress au clic sur l’icône de droite', function () {
    var mockRightPress = jest.fn();
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Titre",
        rightIcon: "settings-outline",
        onRightPress: mockRightPress
      })),
      getByTestId = _render8.getByTestId;
    _reactNative.fireEvent.press(getByTestId('icon-settings-outline'));
    expect(mockRightPress).toHaveBeenCalledTimes(1);
  });
  it('affiche un composant de droite personnalisé si fourni', function () {
    var CustomRight = (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "custom-right",
      children: "Custom Right"
    });
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Titre",
        rightComponent: CustomRight,
        rightIcon: "settings-outline"
      })),
      getByTestId = _render9.getByTestId,
      queryByTestId = _render9.queryByTestId;
    expect(getByTestId('custom-right')).toBeTruthy();
    expect(queryByTestId('icon-settings-outline')).toBeNull();
  });
  it('affiche le contenu enfants si children est fourni', function () {
    var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Titre",
        children: (0, _jsxRuntime.jsx)(_reactNative2.View, {
          testID: "children-content"
        })
      })),
      getByTestId = _render0.getByTestId,
      queryByTestId = _render0.queryByTestId;
    expect(getByTestId('children-content')).toBeTruthy();
    expect(queryByTestId('back-button')).toBeNull();
  });
  it('rend le header en mode titre large si largeTitleMode est true', function () {
    var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Grand Titre",
        largeTitleMode: true,
        subtitle: "Sous-titre",
        showBackButton: true
      })),
      getByText = _render1.getByText,
      getByTestId = _render1.getByTestId;
    expect(getByText('Grand Titre')).toBeTruthy();
    expect(getByText('Sous-titre')).toBeTruthy();
    expect(getByTestId('back-button')).toBeTruthy();
  });
  it('affiche un composant de droite dans le mode titre large si rightComponent est fourni', function () {
    var CustomRight = (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "custom-right-large",
      children: "Custom Right"
    });
    var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Grand Titre",
        largeTitleMode: true,
        rightComponent: CustomRight
      })),
      getByTestId = _render10.getByTestId;
    expect(getByTestId('custom-right-large')).toBeTruthy();
  });
  it('affiche une icône de droite dans le mode titre large si rightIcon est fourni', function () {
    var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Grand Titre",
        largeTitleMode: true,
        rightIcon: "search"
      })),
      getByTestId = _render11.getByTestId;
    expect(getByTestId('icon-search')).toBeTruthy();
  });
  it('affiche un composant sous le titre si bottomComponent est fourni', function () {
    var BottomContent = (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "bottom-content",
      children: "Contenu en bas"
    });
    var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Titre",
        largeTitleMode: true,
        bottomComponent: BottomContent
      })),
      getByTestId = _render12.getByTestId;
    expect(getByTestId('bottom-content')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,