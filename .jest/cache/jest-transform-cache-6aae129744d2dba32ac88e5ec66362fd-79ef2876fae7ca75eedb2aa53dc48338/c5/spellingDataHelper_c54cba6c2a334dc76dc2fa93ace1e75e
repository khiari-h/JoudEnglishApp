e4ffb2f316b15b4ff53c7777c74ff9bd
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSpellingData = exports.getLevelColor = exports.getAvailableExerciseTypes = void 0;
var _spellingCorrection = _interopRequireDefault(require("../../data/spelling/1/spellingCorrection1"));
var _spellingRules = _interopRequireDefault(require("../../data/spelling/1/spellingRules1"));
var _spellingHomophones = _interopRequireDefault(require("../../data/spelling/1/spellingHomophones1"));
var _spellingCorrection2 = _interopRequireDefault(require("../../data/spelling/2/spellingCorrection2"));
var _spellingRules2 = _interopRequireDefault(require("../../data/spelling/2/spellingRules2"));
var _spellingHomophones2 = _interopRequireDefault(require("../../data/spelling/2/spellingHomophones2"));
var _spellingCorrection3 = _interopRequireDefault(require("../../data/spelling/3/spellingCorrection3"));
var _spellingRules3 = _interopRequireDefault(require("../../data/spelling/3/spellingRules3"));
var _spellingHomophones3 = _interopRequireDefault(require("../../data/spelling/3/spellingHomophones3"));
var _spellingCorrection4 = _interopRequireDefault(require("../../data/spelling/4/spellingCorrection4"));
var _spellingRules4 = _interopRequireDefault(require("../../data/spelling/4/spellingRules4"));
var _spellingHomophones4 = _interopRequireDefault(require("../../data/spelling/4/spellingHomophones4"));
var _spellingCorrection5 = _interopRequireDefault(require("../../data/spelling/5/spellingCorrection5"));
var _spellingRules5 = _interopRequireDefault(require("../../data/spelling/5/spellingRules5"));
var _spellingHomophones5 = _interopRequireDefault(require("../../data/spelling/5/spellingHomophones5"));
var _spellingCorrection6 = _interopRequireDefault(require("../../data/spelling/6/spellingCorrection6"));
var _spellingRules6 = _interopRequireDefault(require("../../data/spelling/6/spellingRules6"));
var _spellingHomophones6 = _interopRequireDefault(require("../../data/spelling/6/spellingHomophones6"));
var getSpellingData = exports.getSpellingData = function getSpellingData(level, type) {
  var _dataMap$level;
  var dataMap = {
    "1": {
      correction: _spellingCorrection.default,
      rules: _spellingRules.default,
      homophones: _spellingHomophones.default
    },
    "2": {
      correction: _spellingCorrection2.default,
      rules: _spellingRules2.default,
      homophones: _spellingHomophones2.default
    },
    "3": {
      correction: _spellingCorrection3.default,
      rules: _spellingRules3.default,
      homophones: _spellingHomophones3.default
    },
    "4": {
      correction: _spellingCorrection4.default,
      rules: _spellingRules4.default,
      homophones: _spellingHomophones4.default
    },
    "5": {
      correction: _spellingCorrection5.default,
      rules: _spellingRules5.default,
      homophones: _spellingHomophones5.default
    },
    "6": {
      correction: _spellingCorrection6.default,
      rules: _spellingRules6.default,
      homophones: _spellingHomophones6.default
    }
  };
  if ((_dataMap$level = dataMap[level]) != null && _dataMap$level[type]) {
    return dataMap[level][type];
  }
  var fallbackMap = {
    correction: _spellingCorrection.default,
    rules: _spellingRules.default,
    homophones: _spellingHomophones.default
  };
  return fallbackMap[type] || _spellingCorrection.default;
};
var getLevelColor = exports.getLevelColor = function getLevelColor(level) {
  var colors = {
    "1": "#3b82f6",
    "2": "#8b5cf6",
    "3": "#10b981",
    "4": "#f59e0b",
    "5": "#ef4444",
    "6": "#6366f1"
  };
  return colors[level] || "#4361EE";
};
var getAvailableExerciseTypes = exports.getAvailableExerciseTypes = function getAvailableExerciseTypes() {
  return [{
    type: "correction",
    title: "Spelling Correction",
    description: "Correct common spelling mistakes",
    icon: "‚úèÔ∏è",
    color: "#ef4444"
  }, {
    type: "rules",
    title: "Spelling Rules",
    description: "Learn and apply spelling rules & patterns",
    icon: "üìö",
    color: "#10b981"
  }, {
    type: "homophones",
    title: "Homophones",
    description: "Distinguish words that sound the same",
    icon: "üëÇ",
    color: "#8b5cf6"
  }];
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,