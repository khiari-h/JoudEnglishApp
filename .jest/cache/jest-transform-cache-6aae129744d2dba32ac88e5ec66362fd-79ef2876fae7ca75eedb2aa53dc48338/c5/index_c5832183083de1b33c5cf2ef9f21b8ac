826697a5012aead600e985f521c35e5a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _NavigationButtons = _interopRequireDefault(require("../../../../components/exercise-common/NavigationButtons"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
var VocabularyNavigation = function VocabularyNavigation(_ref) {
  var onPrevious = _ref.onPrevious,
    onNext = _ref.onNext,
    _ref$canGoPrevious = _ref.canGoPrevious,
    canGoPrevious = _ref$canGoPrevious === void 0 ? true : _ref$canGoPrevious,
    _ref$isLast = _ref.isLast,
    isLast = _ref$isLast === void 0 ? false : _ref$isLast,
    levelColor = _ref.levelColor;
  return (0, _jsxRuntime.jsx)(_NavigationButtons.default, {
    onNext: onNext,
    onPrevious: onPrevious,
    disablePrevious: !canGoPrevious,
    disableNext: false,
    primaryColor: levelColor,
    isLast: isLast,
    buttonLabels: {
      next: "Suivant",
      previous: "Précédent",
      finish: "Terminer"
    }
  });
};
VocabularyNavigation.propTypes = {
  onPrevious: _propTypes.default.func.isRequired,
  onNext: _propTypes.default.func.isRequired,
  canGoPrevious: _propTypes.default.bool,
  isLast: _propTypes.default.bool,
  levelColor: _propTypes.default.string
};
var _default = exports.default = VocabularyNavigation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfTmF2aWdhdGlvbkJ1dHRvbnMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfanN4UnVudGltZSIsIlZvY2FidWxhcnlOYXZpZ2F0aW9uIiwiX3JlZiIsIm9uUHJldmlvdXMiLCJvbk5leHQiLCJfcmVmJGNhbkdvUHJldmlvdXMiLCJjYW5Hb1ByZXZpb3VzIiwiX3JlZiRpc0xhc3QiLCJpc0xhc3QiLCJsZXZlbENvbG9yIiwianN4IiwiZGVmYXVsdCIsImRpc2FibGVQcmV2aW91cyIsImRpc2FibGVOZXh0IiwicHJpbWFyeUNvbG9yIiwiYnV0dG9uTGFiZWxzIiwibmV4dCIsInByZXZpb3VzIiwiZmluaXNoIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiZnVuYyIsImlzUmVxdWlyZWQiLCJib29sIiwic3RyaW5nIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVm9jYWJ1bGFyeU5hdmlnYXRpb24vaW5kZXguanMgLSBWRVJTSU9OIE9QVElNSVPDiUUgKHBsdXMgZGUgXCIxLzJcIiByZWRvbmRhbnQpXHJcblxyXG5pbXBvcnQgTmF2aWdhdGlvbkJ1dHRvbnMgZnJvbSBcIi4uLy4uLy4uLy4uL2NvbXBvbmVudHMvZXhlcmNpc2UtY29tbW9uL05hdmlnYXRpb25CdXR0b25zXCI7XHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XHJcblxyXG4vKipcclxuICog8J+OryBWb2NhYnVsYXJ5TmF2aWdhdGlvbiAtIFZlcnNpb24gVWx0cmEtU2ltcGxpZmnDqWVcclxuICogLSBQbHVzIGQnaW5kaWNhdGV1ciBcIjEvMlwiIHJlZG9uZGFudCBcclxuICogLSBQbHVzIGRlIHdyYXBwZXIgaW51dGlsZVxyXG4gKiAtIE5hdmlnYXRpb25CdXR0b25zIGfDqHJlIHRvdXQgbWFpbnRlbmFudFxyXG4gKi9cclxuY29uc3QgVm9jYWJ1bGFyeU5hdmlnYXRpb24gPSAoe1xyXG4gIG9uUHJldmlvdXMsXHJcbiAgb25OZXh0LFxyXG4gIGNhbkdvUHJldmlvdXMgPSB0cnVlLFxyXG4gIGlzTGFzdCA9IGZhbHNlLFxyXG4gIGxldmVsQ29sb3IsXHJcbn0pID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPE5hdmlnYXRpb25CdXR0b25zXHJcbiAgICAgIG9uTmV4dD17b25OZXh0fVxyXG4gICAgICBvblByZXZpb3VzPXtvblByZXZpb3VzfVxyXG4gICAgICBkaXNhYmxlUHJldmlvdXM9eyFjYW5Hb1ByZXZpb3VzfVxyXG4gICAgICBkaXNhYmxlTmV4dD17ZmFsc2V9XHJcbiAgICAgIHByaW1hcnlDb2xvcj17bGV2ZWxDb2xvcn1cclxuICAgICAgaXNMYXN0PXtpc0xhc3R9IC8vIOKGkCBOb3V2ZWF1IHByb3Agc2ltcGxlXHJcbiAgICAgIGJ1dHRvbkxhYmVscz17e1xyXG4gICAgICAgIG5leHQ6IFwiU3VpdmFudFwiLFxyXG4gICAgICAgIHByZXZpb3VzOiBcIlByw6ljw6lkZW50XCIsIFxyXG4gICAgICAgIGZpbmlzaDogXCJUZXJtaW5lclwiXHJcbiAgICAgIH19XHJcbiAgICAgIC8vIPCfp7kgU1VQUFJJTcOJIDogY3VycmVudEluZGV4LCB0b3RhbENvdW50LCBzaG93U2tpcCwgdmFyaWFudCwgd3JhcHBlciBWaWV3XHJcbiAgICAvPlxyXG4gICk7XHJcbn07XHJcblxyXG4vLyDinIUgRMOpZmluaXRpb24gZGUgUHJvcFR5cGVzIHBvdXIgbGEgdmFsaWRhdGlvbiBkZXMgcHJvcHNcclxuVm9jYWJ1bGFyeU5hdmlnYXRpb24ucHJvcFR5cGVzID0ge1xyXG4gIC8vICdvblByZXZpb3VzJyBlc3QgbWFucXVhbnQgZGFucyBsYSB2YWxpZGF0aW9uXHJcbiAgb25QcmV2aW91czogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuICAvLyAnb25OZXh0JyBlc3QgbWFucXVhbnQgZGFucyBsYSB2YWxpZGF0aW9uXHJcbiAgb25OZXh0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG4gIC8vICdjYW5Hb1ByZXZpb3VzJyBlc3QgbWFucXVhbnQgZGFucyBsYSB2YWxpZGF0aW9uXHJcbiAgY2FuR29QcmV2aW91czogUHJvcFR5cGVzLmJvb2wsXHJcbiAgLy8gJ2lzTGFzdCcgZXN0IG1hbnF1YW50IGRhbnMgbGEgdmFsaWRhdGlvblxyXG4gIGlzTGFzdDogUHJvcFR5cGVzLmJvb2wsXHJcbiAgLy8gJ2xldmVsQ29sb3InIGVzdCBtYW5xdWFudCBkYW5zIGxhIHZhbGlkYXRpb25cclxuICBsZXZlbENvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVm9jYWJ1bGFyeU5hdmlnYXRpb247Il0sIm1hcHBpbmdzIjoiOzs7OztBQUVBLElBQUFBLGtCQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFBbUMsSUFBQUUsV0FBQSxHQUFBRixPQUFBO0FBUW5DLElBQU1HLG9CQUFvQixHQUFHLFNBQXZCQSxvQkFBb0JBLENBQUFDLElBQUEsRUFNcEI7RUFBQSxJQUxKQyxVQUFVLEdBQUFELElBQUEsQ0FBVkMsVUFBVTtJQUNWQyxNQUFNLEdBQUFGLElBQUEsQ0FBTkUsTUFBTTtJQUFBQyxrQkFBQSxHQUFBSCxJQUFBLENBQ05JLGFBQWE7SUFBYkEsYUFBYSxHQUFBRCxrQkFBQSxjQUFHLElBQUksR0FBQUEsa0JBQUE7SUFBQUUsV0FBQSxHQUFBTCxJQUFBLENBQ3BCTSxNQUFNO0lBQU5BLE1BQU0sR0FBQUQsV0FBQSxjQUFHLEtBQUssR0FBQUEsV0FBQTtJQUNkRSxVQUFVLEdBQUFQLElBQUEsQ0FBVk8sVUFBVTtFQUVWLE9BQ0UsSUFBQVQsV0FBQSxDQUFBVSxHQUFBLEVBQUNkLGtCQUFBLENBQUFlLE9BQWlCO0lBQ2hCUCxNQUFNLEVBQUVBLE1BQU87SUFDZkQsVUFBVSxFQUFFQSxVQUFXO0lBQ3ZCUyxlQUFlLEVBQUUsQ0FBQ04sYUFBYztJQUNoQ08sV0FBVyxFQUFFLEtBQU07SUFDbkJDLFlBQVksRUFBRUwsVUFBVztJQUN6QkQsTUFBTSxFQUFFQSxNQUFPO0lBQ2ZPLFlBQVksRUFBRTtNQUNaQyxJQUFJLEVBQUUsU0FBUztNQUNmQyxRQUFRLEVBQUUsV0FBVztNQUNyQkMsTUFBTSxFQUFFO0lBQ1Y7RUFBRSxDQUVILENBQUM7QUFFTixDQUFDO0FBR0RqQixvQkFBb0IsQ0FBQ2tCLFNBQVMsR0FBRztFQUUvQmhCLFVBQVUsRUFBRWlCLGtCQUFTLENBQUNDLElBQUksQ0FBQ0MsVUFBVTtFQUVyQ2xCLE1BQU0sRUFBRWdCLGtCQUFTLENBQUNDLElBQUksQ0FBQ0MsVUFBVTtFQUVqQ2hCLGFBQWEsRUFBRWMsa0JBQVMsQ0FBQ0csSUFBSTtFQUU3QmYsTUFBTSxFQUFFWSxrQkFBUyxDQUFDRyxJQUFJO0VBRXRCZCxVQUFVLEVBQUVXLGtCQUFTLENBQUNJO0FBQ3hCLENBQUM7QUFBQyxJQUFBQyxRQUFBLEdBQUFDLE9BQUEsQ0FBQWYsT0FBQSxHQUVhVixvQkFBb0IiLCJpZ25vcmVMaXN0IjpbXX0=