68d2c5864bc560b118277b286054d8c4
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var useActivityMetrics = function useActivityMetrics() {
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    currentStreak = _useState2[0],
    setCurrentStreak = _useState2[1];
  var _useState3 = (0, _react.useState)(0),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    todayMinutes = _useState4[0],
    setTodayMinutes = _useState4[1];
  var _useState5 = (0, _react.useState)(null),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    sessionStart = _useState6[0],
    setSessionStart = _useState6[1];
  var getTodayString = function getTodayString() {
    return new Date().toDateString();
  };
  (0, _react.useEffect)(function () {
    loadMetrics();
  }, []);
  var loadMetrics = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* () {
      try {
        var today = getTodayString();
        var _yield$Promise$all = yield Promise.all([_asyncStorage.default.getItem('current_streak'), _asyncStorage.default.getItem('today_minutes'), _asyncStorage.default.getItem('last_time_date')]),
          _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 3),
          streakData = _yield$Promise$all2[0],
          timeData = _yield$Promise$all2[1],
          lastDateData = _yield$Promise$all2[2];
        setCurrentStreak(parseInt(streakData || '0'));
        var lastDate = lastDateData;
        if (lastDate === today) {
          setTodayMinutes(parseInt(timeData || '0'));
        } else {
          setTodayMinutes(0);
          yield _asyncStorage.default.setItem('today_minutes', '0');
          yield _asyncStorage.default.setItem('last_time_date', today);
        }
      } catch (error) {}
    });
    return function loadMetrics() {
      return _ref.apply(this, arguments);
    };
  }();
  var startSession = (0, _react.useCallback)(function (exerciseType) {
    setSessionStart(Date.now());
  }, []);
  var endSession = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    if (!sessionStart) return;
    try {
      var sessionEnd = Date.now();
      var sessionMinutes = Math.round((sessionEnd - sessionStart) / 60000);
      if (sessionMinutes > 0) {
        var newTodayTotal = todayMinutes + sessionMinutes;
        setTodayMinutes(newTodayTotal);
        var today = getTodayString();
        yield Promise.all([_asyncStorage.default.setItem('today_minutes', newTodayTotal.toString()), _asyncStorage.default.setItem('last_time_date', today)]);
      }
      setSessionStart(null);
    } catch (error) {}
  }), [sessionStart, todayMinutes]);
  var updateStreak = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      var today = getTodayString();
      var lastDate = yield _asyncStorage.default.getItem('last_activity_date');
      if (lastDate !== today) {
        var yesterday = new Date();
        yesterday.setDate(yesterday.getDate() - 1);
        var isYesterday = lastDate === yesterday.toDateString();
        var newStreak;
        if (isYesterday) {
          newStreak = currentStreak + 1;
        } else {
          newStreak = 1;
        }
        setCurrentStreak(newStreak);
        yield Promise.all([_asyncStorage.default.setItem('current_streak', newStreak.toString()), _asyncStorage.default.setItem('last_activity_date', today)]);
      }
    } catch (error) {}
  }), [currentStreak]);
  var getStreakTrend = (0, _react.useCallback)(function () {
    if (currentStreak >= 7) return '🏆 Incroyable!';
    if (currentStreak >= 3) return '💪 En forme!';
    if (currentStreak >= 1) return '🔥 Continue!';
    return null;
  }, [currentStreak]);
  var getFormattedTime = (0, _react.useCallback)(function () {
    if (todayMinutes < 60) {
      return `${todayMinutes}min`;
    } else {
      var hours = Math.floor(todayMinutes / 60);
      var mins = todayMinutes % 60;
      return `${hours}h${mins > 0 ? `${mins}min` : ''}`;
    }
  }, [todayMinutes]);
  return {
    startSession: startSession,
    endSession: endSession,
    updateStreak: updateStreak,
    currentStreak: currentStreak || 0,
    todayMinutes: todayMinutes || 0,
    streakTrend: getStreakTrend(),
    formattedTime: getFormattedTime() || '0min'
  };
};
var _default = exports.default = useActivityMetrics;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,