d54b0d24925f219869a3d22a58120d8a
_getJestObj().mock('expo-linear-gradient', function () {
  return {
    LinearGradient: function LinearGradient(_ref) {
      var children = _ref.children,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      var _require = require('react-native'),
        View = _require.View;
      return (0, _jsxRuntime.jsx)(View, Object.assign({}, props, {
        children: children
      }));
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ModernHeader = _interopRequireDefault(require("../../../../src/screens/Dashboard/components/ModernHeader"));
var _ThemeContext = require("../../../../src/contexts/ThemeContext");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children"];
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ModernHeader', function () {
  var mockThemeContext = {
    colors: {
      surface: '#FFFFFF',
      text: '#1F2937',
      primary: '#3B82F6'
    }
  };
  var renderWithTheme = function renderWithTheme(component) {
    var themeValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : mockThemeContext;
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
      value: themeValue,
      children: component
    }));
  };
  it('devrait afficher le logo JOUD avec l\'emoji', function () {
    var _renderWithTheme = renderWithTheme((0, _jsxRuntime.jsx)(_ModernHeader.default, {})),
      getByText = _renderWithTheme.getByText;
    expect(getByText('ðŸŽ“')).toBeTruthy();
    expect(getByText('JOUD')).toBeTruthy();
  });
  it('devrait afficher le niveau par dÃ©faut (1)', function () {
    var _renderWithTheme2 = renderWithTheme((0, _jsxRuntime.jsx)(_ModernHeader.default, {})),
      getByText = _renderWithTheme2.getByText;
    expect(getByText('1')).toBeTruthy();
  });
  it('devrait afficher le niveau spÃ©cifiÃ©', function () {
    var _renderWithTheme3 = renderWithTheme((0, _jsxRuntime.jsx)(_ModernHeader.default, {
        level: "3"
      })),
      getByText = _renderWithTheme3.getByText;
    expect(getByText('3')).toBeTruthy();
  });
  it('devrait afficher "B" pour le niveau bonus', function () {
    var _renderWithTheme4 = renderWithTheme((0, _jsxRuntime.jsx)(_ModernHeader.default, {
        level: "bonus"
      })),
      getByText = _renderWithTheme4.getByText;
    expect(getByText('B')).toBeTruthy();
  });
  it('devrait utiliser la couleur de niveau spÃ©cifiÃ©e', function () {
    var customColor = '#FF5722';
    var _renderWithTheme5 = renderWithTheme((0, _jsxRuntime.jsx)(_ModernHeader.default, {
        level: "2",
        levelColor: customColor
      })),
      getByText = _renderWithTheme5.getByText;
    expect(getByText('2')).toBeTruthy();
    expect(getByText('JOUD')).toBeTruthy();
  });
  it('devrait utiliser la couleur par dÃ©faut si aucune couleur n\'est spÃ©cifiÃ©e', function () {
    var _renderWithTheme6 = renderWithTheme((0, _jsxRuntime.jsx)(_ModernHeader.default, {
        level: "1"
      })),
      getByText = _renderWithTheme6.getByText;
    expect(getByText('1')).toBeTruthy();
    expect(getByText('JOUD')).toBeTruthy();
  });
  it('devrait fonctionner sans contexte de thÃ¨me', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernHeader.default, {
        level: "4"
      })),
      getByText = _render.getByText;
    expect(getByText('ðŸŽ“')).toBeTruthy();
    expect(getByText('JOUD')).toBeTruthy();
    expect(getByText('4')).toBeTruthy();
  });
  it('devrait utiliser les couleurs par dÃ©faut si le contexte de thÃ¨me est incomplet', function () {
    var incompleteTheme = {
      colors: {
        text: '#1F2937'
      }
    };
    var _renderWithTheme7 = renderWithTheme((0, _jsxRuntime.jsx)(_ModernHeader.default, {
        level: "5"
      }), incompleteTheme),
      getByText = _renderWithTheme7.getByText;
    expect(getByText('5')).toBeTruthy();
    expect(getByText('JOUD')).toBeTruthy();
  });
  it('devrait afficher tous les niveaux possibles correctement', function () {
    var levels = ['1', '2', '3', '4', '5', '6', 'bonus'];
    var expectedDisplays = ['1', '2', '3', '4', '5', '6', 'B'];
    levels.forEach(function (level, index) {
      var _renderWithTheme8 = renderWithTheme((0, _jsxRuntime.jsx)(_ModernHeader.default, {
          level: level
        })),
        getByText = _renderWithTheme8.getByText,
        unmount = _renderWithTheme8.unmount;
      expect(getByText(expectedDisplays[index])).toBeTruthy();
      expect(getByText('JOUD')).toBeTruthy();
      expect(getByText('ðŸŽ“')).toBeTruthy();
      unmount();
    });
  });
  it('devrait avoir la structure correcte avec les sections gauche et droite', function () {
    var _renderWithTheme9 = renderWithTheme((0, _jsxRuntime.jsx)(_ModernHeader.default, {
        level: "2"
      })),
      getByText = _renderWithTheme9.getByText;
    expect(getByText('ðŸŽ“')).toBeTruthy();
    expect(getByText('JOUD')).toBeTruthy();
    expect(getByText('2')).toBeTruthy();
  });
  it('devrait gÃ©rer les props undefined gracieusement', function () {
    var _renderWithTheme0 = renderWithTheme((0, _jsxRuntime.jsx)(_ModernHeader.default, {
        level: undefined,
        levelColor: undefined
      })),
      getByText = _renderWithTheme0.getByText;
    expect(getByText('1')).toBeTruthy();
    expect(getByText('JOUD')).toBeTruthy();
    expect(getByText('ðŸŽ“')).toBeTruthy();
  });
  it('devrait gÃ©rer les niveaux non-standard', function () {
    var _renderWithTheme1 = renderWithTheme((0, _jsxRuntime.jsx)(_ModernHeader.default, {
        level: "7"
      })),
      getByText = _renderWithTheme1.getByText;
    expect(getByText('7')).toBeTruthy();
    expect(getByText('JOUD')).toBeTruthy();
  });
  it('devrait appliquer le LinearGradient avec les bonnes props', function () {
    var customColor = '#8B5CF6';
    var _renderWithTheme10 = renderWithTheme((0, _jsxRuntime.jsx)(_ModernHeader.default, {
        level: "3",
        levelColor: customColor
      })),
      getByText = _renderWithTheme10.getByText;
    expect(getByText('3')).toBeTruthy();
    expect(getByText('JOUD')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,