0995a46ad90dba8174fd5c2966fc5afb
_getJestObj().mock('../../../../src/components/ui/Card', function () {
  var _require = require('react-native'),
    View = _require.View;
  return function (_ref) {
    var children = _ref.children,
      style = _ref.style,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      style: style
    }, props, {
      testID: "card",
      children: children
    }));
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _HeroContinueSection = _interopRequireDefault(require("../../../../src/screens/Dashboard/components/HeroContinueSection"));
var _ThemeContext = require("../../../../src/contexts/ThemeContext");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "style"];
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('HeroContinueSection', function () {
  var mockThemeContext = {
    colors: {
      surface: '#FFFFFF',
      text: '#1F2937',
      textSecondary: '#6B7280'
    }
  };
  var mockOnPress = jest.fn();
  var mockLastActivity = {
    title: 'Vocabulaire Animaux',
    level: '2',
    type: 'vocabulary',
    metadata: {
      word: 4,
      totalWords: 15,
      categoryIndex: 1
    }
  };
  var renderWithTheme = function renderWithTheme(component) {
    var themeValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : mockThemeContext;
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
      value: themeValue,
      children: component
    }));
  };
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('√âtat de chargement', function () {
    it('devrait afficher l\'indicateur de chargement', function () {
      var _renderWithTheme = renderWithTheme((0, _jsxRuntime.jsx)(_HeroContinueSection.default, {
          isLoading: true,
          onPress: mockOnPress
        })),
        getByText = _renderWithTheme.getByText,
        getByTestId = _renderWithTheme.getByTestId;
      expect(getByText('Chargement...')).toBeTruthy();
      expect(getByTestId('card')).toBeTruthy();
    });
    it('devrait utiliser la couleur d\'accent pour l\'indicateur', function () {
      var customColor = '#FF5722';
      var _renderWithTheme2 = renderWithTheme((0, _jsxRuntime.jsx)(_HeroContinueSection.default, {
          isLoading: true,
          accentColor: customColor,
          onPress: mockOnPress
        })),
        getByText = _renderWithTheme2.getByText;
      expect(getByText('Chargement...')).toBeTruthy();
    });
  });
  describe('√âtat vide (premi√®re utilisation)', function () {
    it('devrait afficher le message de d√©marrage', function () {
      var _renderWithTheme3 = renderWithTheme((0, _jsxRuntime.jsx)(_HeroContinueSection.default, {
          lastActivity: null,
          onPress: mockOnPress
        })),
        getByText = _renderWithTheme3.getByText;
      expect(getByText('üöÄ')).toBeTruthy();
      expect(getByText('Commencer l\'apprentissage')).toBeTruthy();
      expect(getByText('Choisissez votre premier exercice')).toBeTruthy();
      expect(getByText('Commencer >')).toBeTruthy();
    });
    it('devrait appeler onPress avec "levelSelection" au clic', function () {
      var _renderWithTheme4 = renderWithTheme((0, _jsxRuntime.jsx)(_HeroContinueSection.default, {
          lastActivity: null,
          onPress: mockOnPress
        })),
        getByText = _renderWithTheme4.getByText;
      var button = getByText('Commencer >');
      _reactNative.fireEvent.press(button);
      expect(mockOnPress).toHaveBeenCalledWith('levelSelection');
    });
  });
  describe('√âtat avec activit√© existante', function () {
    it('devrait afficher les informations de l\'activit√©', function () {
      var _renderWithTheme5 = renderWithTheme((0, _jsxRuntime.jsx)(_HeroContinueSection.default, {
          lastActivity: mockLastActivity,
          onPress: mockOnPress
        })),
        getByText = _renderWithTheme5.getByText;
      expect(getByText('üìö')).toBeTruthy();
      expect(getByText('Reprendre')).toBeTruthy();
      expect(getByText('Vocabulaire Animaux')).toBeTruthy();
      expect(getByText('Niv 2 ‚Ä¢ Cat√©gorie 2 ‚Ä¢ Mot 5/15')).toBeTruthy();
      expect(getByText('Continuer ‚ñ∂Ô∏è')).toBeTruthy();
    });
    it('devrait calculer et afficher le pourcentage correct', function () {
      var _renderWithTheme6 = renderWithTheme((0, _jsxRuntime.jsx)(_HeroContinueSection.default, {
          lastActivity: mockLastActivity,
          onPress: mockOnPress
        })),
        getByText = _renderWithTheme6.getByText;
      expect(getByText('33%')).toBeTruthy();
    });
    it('devrait appeler onPress avec l\'activit√© au clic sur continuer', function () {
      var _renderWithTheme7 = renderWithTheme((0, _jsxRuntime.jsx)(_HeroContinueSection.default, {
          lastActivity: mockLastActivity,
          onPress: mockOnPress
        })),
        getByText = _renderWithTheme7.getByText;
      var button = getByText('Continuer ‚ñ∂Ô∏è');
      _reactNative.fireEvent.press(button);
      expect(mockOnPress).toHaveBeenCalledWith(mockLastActivity);
    });
    it('devrait g√©rer une activit√© sans m√©tadonn√©es', function () {
      var activityWithoutMetadata = {
        title: 'Grammaire Simple',
        level: '1',
        type: 'grammar'
      };
      var _renderWithTheme8 = renderWithTheme((0, _jsxRuntime.jsx)(_HeroContinueSection.default, {
          lastActivity: activityWithoutMetadata,
          onPress: mockOnPress
        })),
        getByText = _renderWithTheme8.getByText;
      expect(getByText('Grammaire Simple')).toBeTruthy();
      expect(getByText('Niv 1 ‚Ä¢ Mot 1/15')).toBeTruthy();
      expect(getByText('7%')).toBeTruthy();
    });
    it('devrait g√©rer une activit√© sans categoryIndex', function () {
      var activityWithoutCategory = Object.assign({}, mockLastActivity, {
        metadata: {
          word: 9,
          totalWords: 20
        }
      });
      var _renderWithTheme9 = renderWithTheme((0, _jsxRuntime.jsx)(_HeroContinueSection.default, {
          lastActivity: activityWithoutCategory,
          onPress: mockOnPress
        })),
        getByText = _renderWithTheme9.getByText;
      expect(getByText('Niv 2 ‚Ä¢ Mot 10/20')).toBeTruthy();
      expect(getByText('50%')).toBeTruthy();
    });
    it('devrait limiter le pourcentage √† 100%', function () {
      var completedActivity = Object.assign({}, mockLastActivity, {
        metadata: {
          word: 20,
          totalWords: 15
        }
      });
      var _renderWithTheme0 = renderWithTheme((0, _jsxRuntime.jsx)(_HeroContinueSection.default, {
          lastActivity: completedActivity,
          onPress: mockOnPress
        })),
        getByText = _renderWithTheme0.getByText;
      expect(getByText('100%')).toBeTruthy();
    });
  });
  describe('Couleurs et th√®me', function () {
    it('devrait utiliser la couleur d\'accent personnalis√©e', function () {
      var customColor = '#8B5CF6';
      var _renderWithTheme1 = renderWithTheme((0, _jsxRuntime.jsx)(_HeroContinueSection.default, {
          lastActivity: mockLastActivity,
          accentColor: customColor,
          onPress: mockOnPress
        })),
        getByText = _renderWithTheme1.getByText;
      expect(getByText('33%')).toBeTruthy();
      expect(getByText('Continuer ‚ñ∂Ô∏è')).toBeTruthy();
    });
    it('devrait utiliser la couleur par d√©faut si aucune couleur n\'est sp√©cifi√©e', function () {
      var _renderWithTheme10 = renderWithTheme((0, _jsxRuntime.jsx)(_HeroContinueSection.default, {
          lastActivity: mockLastActivity,
          onPress: mockOnPress
        })),
        getByText = _renderWithTheme10.getByText;
      expect(getByText('Continuer ‚ñ∂Ô∏è')).toBeTruthy();
    });
    it('devrait fonctionner sans contexte de th√®me', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HeroContinueSection.default, {
          lastActivity: mockLastActivity,
          onPress: mockOnPress
        })),
        getByText = _render.getByText;
      expect(getByText('Vocabulaire Animaux')).toBeTruthy();
      expect(getByText('Continuer ‚ñ∂Ô∏è')).toBeTruthy();
    });
  });
  describe('Gestion des callbacks', function () {
    it('ne devrait pas planter si onPress n\'est pas fourni', function () {
      var _renderWithTheme11 = renderWithTheme((0, _jsxRuntime.jsx)(_HeroContinueSection.default, {
          lastActivity: null
        })),
        getByText = _renderWithTheme11.getByText;
      var button = getByText('Commencer >');
      expect(function () {
        return _reactNative.fireEvent.press(button);
      }).not.toThrow();
    });
    it('ne devrait pas planter si onPress est undefined pour une activit√©', function () {
      var _renderWithTheme12 = renderWithTheme((0, _jsxRuntime.jsx)(_HeroContinueSection.default, {
          lastActivity: mockLastActivity
        })),
        getByText = _renderWithTheme12.getByText;
      var button = getByText('Continuer ‚ñ∂Ô∏è');
      expect(function () {
        return _reactNative.fireEvent.press(button);
      }).not.toThrow();
    });
  });
  describe('Cas limites', function () {
    it('devrait g√©rer un niveau manquant', function () {
      var activityWithoutLevel = {
        title: 'Test Activity',
        type: 'vocabulary'
      };
      var _renderWithTheme13 = renderWithTheme((0, _jsxRuntime.jsx)(_HeroContinueSection.default, {
          lastActivity: activityWithoutLevel,
          onPress: mockOnPress
        })),
        getByText = _renderWithTheme13.getByText;
      expect(getByText('Niv 1 ‚Ä¢ Mot 1/15')).toBeTruthy();
    });
    it('devrait g√©rer des m√©tadonn√©es partielles', function () {
      var activityWithPartialMetadata = {
        title: 'Test Activity',
        level: '3',
        metadata: {
          totalWords: 25
        }
      };
      var _renderWithTheme14 = renderWithTheme((0, _jsxRuntime.jsx)(_HeroContinueSection.default, {
          lastActivity: activityWithPartialMetadata,
          onPress: mockOnPress
        })),
        getByText = _renderWithTheme14.getByText;
      expect(getByText('Niv 3 ‚Ä¢ Mot 1/25')).toBeTruthy();
      expect(getByText('4%')).toBeTruthy();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,