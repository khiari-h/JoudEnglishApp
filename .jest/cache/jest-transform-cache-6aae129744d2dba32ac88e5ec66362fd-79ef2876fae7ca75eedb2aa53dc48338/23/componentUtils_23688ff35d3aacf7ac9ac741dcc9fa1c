f0975264100ed973df93d204c6e4f11e
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getProcessedConfig = getProcessedConfig;
exports.getReducedMotionFromConfig = getReducedMotionFromConfig;
exports.handleExitingAnimation = handleExitingAnimation;
exports.handleLayoutTransition = handleLayoutTransition;
exports.maybeModifyStyleForKeyframe = maybeModifyStyleForKeyframe;
exports.saveSnapshot = saveSnapshot;
exports.setElementAnimation = setElementAnimation;
var _config = require("./config");
var _Easing = require("./Easing.web");
var _createAnimation = require("./createAnimation");
var _domUtils = require("./domUtils");
var _jsReanimated = require("../../js-reanimated");
var _commonTypes = require("../../commonTypes");
var _commonTypes2 = require("../animationBuilder/commonTypes");
var _componentStyle = require("./componentStyle");
var _animationBuilder = require("../animationBuilder");
var _ReducedMotion = require("../../ReducedMotion");
var _Curved = require("./transition/Curved.web");
var _Easing2 = require("../../Easing");
var _logger = require("../../logger");
function getEasingFromConfig(config) {
  if (!config.easingV) {
    return (0, _Easing.getEasingByName)('linear');
  }
  var easingName = config.easingV[_Easing2.EasingNameSymbol];
  if (!(easingName in _Easing.WebEasings)) {
    _logger.logger.warn(`Selected easing is not currently supported on web.`);
    return (0, _Easing.getEasingByName)('linear');
  }
  return (0, _Easing.getEasingByName)(easingName);
}
function getRandomDelay() {
  var maxDelay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;
  return Math.floor(Math.random() * (maxDelay + 1)) / 1000;
}
function getDelayFromConfig(config) {
  var shouldRandomizeDelay = config.randomizeDelay;
  var delay = shouldRandomizeDelay ? getRandomDelay() : 0;
  if (!config.delayV) {
    return delay;
  }
  return shouldRandomizeDelay ? getRandomDelay(config.delayV) : config.delayV / 1000;
}
function getReducedMotionFromConfig(config) {
  if (!config.reduceMotionV) {
    return _ReducedMotion.ReducedMotionManager.jsValue;
  }
  switch (config.reduceMotionV) {
    case _commonTypes.ReduceMotion.Never:
      return false;
    case _commonTypes.ReduceMotion.Always:
      return true;
    default:
      return _ReducedMotion.ReducedMotionManager.jsValue;
  }
}
function getDurationFromConfig(config, animationName) {
  var defaultDuration = animationName in _config.Animations ? _config.Animations[animationName].duration : 0.3;
  return config.durationV !== undefined ? config.durationV / 1000 : defaultDuration;
}
function getCallbackFromConfig(config) {
  return config.callbackV !== undefined ? config.callbackV : null;
}
function getReversedFromConfig(config) {
  return !!config.reversed;
}
function getProcessedConfig(animationName, animationType, config) {
  return {
    animationName: animationName,
    animationType: animationType,
    duration: getDurationFromConfig(config, animationName),
    delay: getDelayFromConfig(config),
    easing: getEasingFromConfig(config),
    callback: getCallbackFromConfig(config),
    reversed: getReversedFromConfig(config)
  };
}
function maybeModifyStyleForKeyframe(element, config) {
  if (!(config instanceof _animationBuilder.Keyframe)) {
    return;
  }
  element.style.animationFillMode = 'forwards';
  for (var timestampRules of Object.values(config.definitions)) {
    if ('originX' in timestampRules || 'originY' in timestampRules) {
      element.style.position = 'absolute';
      return;
    }
  }
}
function saveSnapshot(element) {
  var rect = element.getBoundingClientRect();
  var snapshot = {
    top: rect.top,
    left: rect.left,
    width: rect.width,
    height: rect.height,
    scrollOffsets: getElementScrollValue(element)
  };
  _componentStyle.snapshots.set(element, snapshot);
}
function setElementAnimation(element, animationConfig) {
  var shouldSavePosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var parent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  var animationName = animationConfig.animationName,
    duration = animationConfig.duration,
    delay = animationConfig.delay,
    easing = animationConfig.easing;
  var configureAnimation = function configureAnimation() {
    element.style.animationName = animationName;
    element.style.animationDuration = `${duration}s`;
    element.style.animationDelay = `${delay}s`;
    element.style.animationTimingFunction = easing;
  };
  if (animationConfig.animationType === _commonTypes2.LayoutAnimationType.ENTERING) {
    requestAnimationFrame(configureAnimation);
  } else {
    configureAnimation();
  }
  element.onanimationend = function () {
    if (shouldSavePosition) {
      saveSnapshot(element);
    }
    if (parent != null && parent.contains(element)) {
      element.removedAfterAnimation = true;
      parent.removeChild(element);
    }
    animationConfig.callback == null || animationConfig.callback(true);
    element.removeEventListener('animationcancel', _animationCancelHandler);
  };
  var _animationCancelHandler = function animationCancelHandler() {
    animationConfig.callback == null || animationConfig.callback(false);
    if (parent != null && parent.contains(element)) {
      element.removedAfterAnimation = true;
      parent.removeChild(element);
    }
    element.removeEventListener('animationcancel', _animationCancelHandler);
  };
  element.onanimationstart = function () {
    if (animationConfig.animationType === _commonTypes2.LayoutAnimationType.ENTERING) {
      (0, _jsReanimated._updatePropsJS)({
        visibility: 'initial'
      }, element);
    }
    element.addEventListener('animationcancel', _animationCancelHandler);
  };
  if (!(animationName in _config.Animations)) {
    (0, _domUtils.scheduleAnimationCleanup)(animationName, duration + delay, function () {
      if (shouldSavePosition) {
        (0, _componentStyle.setElementPosition)(element, _componentStyle.snapshots.get(element));
      }
    });
  }
}
function handleLayoutTransition(element, animationConfig, transitionData) {
  var animationName = animationConfig.animationName;
  var animationType;
  switch (animationName) {
    case 'LinearTransition':
      animationType = _config.TransitionType.LINEAR;
      break;
    case 'SequencedTransition':
      animationType = _config.TransitionType.SEQUENCED;
      break;
    case 'FadingTransition':
      animationType = _config.TransitionType.FADING;
      break;
    case 'JumpingTransition':
      animationType = _config.TransitionType.JUMPING;
      break;
    case 'CurvedTransition':
      animationType = _config.TransitionType.CURVED;
      break;
    case 'EntryExitTransition':
      animationType = _config.TransitionType.ENTRY_EXIT;
      break;
    default:
      animationType = _config.TransitionType.LINEAR;
      break;
  }
  var _TransitionGenerator = (0, _createAnimation.TransitionGenerator)(animationType, transitionData),
    transitionKeyframeName = _TransitionGenerator.transitionKeyframeName,
    dummyTransitionKeyframeName = _TransitionGenerator.dummyTransitionKeyframeName;
  animationConfig.animationName = transitionKeyframeName;
  if (animationType === _config.TransitionType.CURVED) {
    var _prepareCurvedTransit = (0, _Curved.prepareCurvedTransition)(element, animationConfig, transitionData, dummyTransitionKeyframeName),
      dummy = _prepareCurvedTransit.dummy,
      dummyAnimationConfig = _prepareCurvedTransit.dummyAnimationConfig;
    setElementAnimation(dummy, dummyAnimationConfig);
  }
  setElementAnimation(element, animationConfig);
}
function getElementScrollValue(element) {
  var current = element;
  var scrollOffsets = {
    scrollTopOffset: 0,
    scrollLeftOffset: 0
  };
  while (current) {
    if (current.scrollTop !== 0 && scrollOffsets.scrollTopOffset === 0) {
      scrollOffsets.scrollTopOffset = current.scrollTop;
    }
    if (current.scrollLeft !== 0 && scrollOffsets.scrollLeftOffset === 0) {
      scrollOffsets.scrollLeftOffset = current.scrollLeft;
    }
    current = current.parentElement;
  }
  return scrollOffsets;
}
function handleExitingAnimation(element, animationConfig) {
  var parent = element.offsetParent;
  var dummy = element.cloneNode();
  dummy.reanimatedDummy = true;
  element.style.animationName = '';
  dummy.style.animationName = '';
  while (element.firstChild) {
    dummy.appendChild(element.firstChild);
  }
  parent == null || parent.appendChild(dummy);
  var snapshot = _componentStyle.snapshots.get(element);
  var scrollOffsets = getElementScrollValue(element);
  var currentScrollTopOffset = scrollOffsets.scrollTopOffset;
  var lastScrollTopOffset = snapshot.scrollOffsets.scrollTopOffset;
  if (currentScrollTopOffset !== lastScrollTopOffset) {
    snapshot.top += lastScrollTopOffset - currentScrollTopOffset;
  }
  var currentScrollLeftOffset = scrollOffsets.scrollLeftOffset;
  var lastScrollLeftOffset = snapshot.scrollOffsets.scrollLeftOffset;
  if (currentScrollLeftOffset !== lastScrollLeftOffset) {
    snapshot.left += lastScrollLeftOffset - currentScrollLeftOffset;
  }
  _componentStyle.snapshots.set(dummy, snapshot);
  (0, _componentStyle.setElementPosition)(dummy, snapshot);
  setElementAnimation(dummy, animationConfig, false, parent);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldFByb2Nlc3NlZENvbmZpZyIsImdldFJlZHVjZWRNb3Rpb25Gcm9tQ29uZmlnIiwiaGFuZGxlRXhpdGluZ0FuaW1hdGlvbiIsImhhbmRsZUxheW91dFRyYW5zaXRpb24iLCJtYXliZU1vZGlmeVN0eWxlRm9yS2V5ZnJhbWUiLCJzYXZlU25hcHNob3QiLCJzZXRFbGVtZW50QW5pbWF0aW9uIiwiX2NvbmZpZyIsInJlcXVpcmUiLCJfRWFzaW5nIiwiX2NyZWF0ZUFuaW1hdGlvbiIsIl9kb21VdGlscyIsIl9qc1JlYW5pbWF0ZWQiLCJfY29tbW9uVHlwZXMiLCJfY29tbW9uVHlwZXMyIiwiX2NvbXBvbmVudFN0eWxlIiwiX2FuaW1hdGlvbkJ1aWxkZXIiLCJfUmVkdWNlZE1vdGlvbiIsIl9DdXJ2ZWQiLCJfRWFzaW5nMiIsIl9sb2dnZXIiLCJnZXRFYXNpbmdGcm9tQ29uZmlnIiwiY29uZmlnIiwiZWFzaW5nViIsImdldEVhc2luZ0J5TmFtZSIsImVhc2luZ05hbWUiLCJFYXNpbmdOYW1lU3ltYm9sIiwiV2ViRWFzaW5ncyIsImxvZ2dlciIsIndhcm4iLCJnZXRSYW5kb21EZWxheSIsIm1heERlbGF5IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiZ2V0RGVsYXlGcm9tQ29uZmlnIiwic2hvdWxkUmFuZG9taXplRGVsYXkiLCJyYW5kb21pemVEZWxheSIsImRlbGF5IiwiZGVsYXlWIiwicmVkdWNlTW90aW9uViIsIlJlZHVjZWRNb3Rpb25NYW5hZ2VyIiwianNWYWx1ZSIsIlJlZHVjZU1vdGlvbiIsIk5ldmVyIiwiQWx3YXlzIiwiZ2V0RHVyYXRpb25Gcm9tQ29uZmlnIiwiYW5pbWF0aW9uTmFtZSIsImRlZmF1bHREdXJhdGlvbiIsIkFuaW1hdGlvbnMiLCJkdXJhdGlvbiIsImR1cmF0aW9uViIsImdldENhbGxiYWNrRnJvbUNvbmZpZyIsImNhbGxiYWNrViIsImdldFJldmVyc2VkRnJvbUNvbmZpZyIsInJldmVyc2VkIiwiYW5pbWF0aW9uVHlwZSIsImVhc2luZyIsImNhbGxiYWNrIiwiZWxlbWVudCIsIktleWZyYW1lIiwic3R5bGUiLCJhbmltYXRpb25GaWxsTW9kZSIsInRpbWVzdGFtcFJ1bGVzIiwidmFsdWVzIiwiZGVmaW5pdGlvbnMiLCJwb3NpdGlvbiIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJzbmFwc2hvdCIsInRvcCIsImxlZnQiLCJ3aWR0aCIsImhlaWdodCIsInNjcm9sbE9mZnNldHMiLCJnZXRFbGVtZW50U2Nyb2xsVmFsdWUiLCJzbmFwc2hvdHMiLCJzZXQiLCJhbmltYXRpb25Db25maWciLCJzaG91bGRTYXZlUG9zaXRpb24iLCJwYXJlbnQiLCJjb25maWd1cmVBbmltYXRpb24iLCJhbmltYXRpb25EdXJhdGlvbiIsImFuaW1hdGlvbkRlbGF5IiwiYW5pbWF0aW9uVGltaW5nRnVuY3Rpb24iLCJMYXlvdXRBbmltYXRpb25UeXBlIiwiRU5URVJJTkciLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJvbmFuaW1hdGlvbmVuZCIsImNvbnRhaW5zIiwicmVtb3ZlZEFmdGVyQW5pbWF0aW9uIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYW5pbWF0aW9uQ2FuY2VsSGFuZGxlciIsIm9uYW5pbWF0aW9uc3RhcnQiLCJfdXBkYXRlUHJvcHNKUyIsInZpc2liaWxpdHkiLCJhZGRFdmVudExpc3RlbmVyIiwic2NoZWR1bGVBbmltYXRpb25DbGVhbnVwIiwic2V0RWxlbWVudFBvc2l0aW9uIiwiZ2V0IiwidHJhbnNpdGlvbkRhdGEiLCJUcmFuc2l0aW9uVHlwZSIsIkxJTkVBUiIsIlNFUVVFTkNFRCIsIkZBRElORyIsIkpVTVBJTkciLCJDVVJWRUQiLCJFTlRSWV9FWElUIiwiX1RyYW5zaXRpb25HZW5lcmF0b3IiLCJUcmFuc2l0aW9uR2VuZXJhdG9yIiwidHJhbnNpdGlvbktleWZyYW1lTmFtZSIsImR1bW15VHJhbnNpdGlvbktleWZyYW1lTmFtZSIsIl9wcmVwYXJlQ3VydmVkVHJhbnNpdCIsInByZXBhcmVDdXJ2ZWRUcmFuc2l0aW9uIiwiZHVtbXkiLCJkdW1teUFuaW1hdGlvbkNvbmZpZyIsImN1cnJlbnQiLCJzY3JvbGxUb3BPZmZzZXQiLCJzY3JvbGxMZWZ0T2Zmc2V0Iiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsInBhcmVudEVsZW1lbnQiLCJvZmZzZXRQYXJlbnQiLCJjbG9uZU5vZGUiLCJyZWFuaW1hdGVkRHVtbXkiLCJmaXJzdENoaWxkIiwiYXBwZW5kQ2hpbGQiLCJjdXJyZW50U2Nyb2xsVG9wT2Zmc2V0IiwibGFzdFNjcm9sbFRvcE9mZnNldCIsImN1cnJlbnRTY3JvbGxMZWZ0T2Zmc2V0IiwibGFzdFNjcm9sbExlZnRPZmZzZXQiXSwic291cmNlcyI6WyJjb21wb25lbnRVdGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7IEFuaW1hdGlvbnMsIFRyYW5zaXRpb25UeXBlIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHR5cGUge1xuICBBbmltYXRpb25DYWxsYmFjayxcbiAgQW5pbWF0aW9uQ29uZmlnLFxuICBBbmltYXRpb25OYW1lcyxcbiAgQ3VzdG9tQ29uZmlnLFxuICBLZXlmcmFtZURlZmluaXRpb25zLFxufSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyBXZWJFYXNpbmdzLCBnZXRFYXNpbmdCeU5hbWUgfSBmcm9tICcuL0Vhc2luZy53ZWInO1xuaW1wb3J0IHR5cGUgeyBXZWJFYXNpbmdzTmFtZXMgfSBmcm9tICcuL0Vhc2luZy53ZWInO1xuaW1wb3J0IHR5cGUgeyBUcmFuc2l0aW9uRGF0YSB9IGZyb20gJy4vYW5pbWF0aW9uUGFyc2VyJztcbmltcG9ydCB7IFRyYW5zaXRpb25HZW5lcmF0b3IgfSBmcm9tICcuL2NyZWF0ZUFuaW1hdGlvbic7XG5pbXBvcnQgeyBzY2hlZHVsZUFuaW1hdGlvbkNsZWFudXAgfSBmcm9tICcuL2RvbVV0aWxzJztcbmltcG9ydCB7IF91cGRhdGVQcm9wc0pTIH0gZnJvbSAnLi4vLi4vanMtcmVhbmltYXRlZCc7XG5pbXBvcnQgdHlwZSB7IFJlYW5pbWF0ZWRIVE1MRWxlbWVudCB9IGZyb20gJy4uLy4uL2pzLXJlYW5pbWF0ZWQnO1xuaW1wb3J0IHsgUmVkdWNlTW90aW9uIH0gZnJvbSAnLi4vLi4vY29tbW9uVHlwZXMnO1xuaW1wb3J0IHsgTGF5b3V0QW5pbWF0aW9uVHlwZSB9IGZyb20gJy4uL2FuaW1hdGlvbkJ1aWxkZXIvY29tbW9uVHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBSZWFuaW1hdGVkU25hcHNob3QsIFNjcm9sbE9mZnNldHMgfSBmcm9tICcuL2NvbXBvbmVudFN0eWxlJztcbmltcG9ydCB7IHNldEVsZW1lbnRQb3NpdGlvbiwgc25hcHNob3RzIH0gZnJvbSAnLi9jb21wb25lbnRTdHlsZSc7XG5pbXBvcnQgeyBLZXlmcmFtZSB9IGZyb20gJy4uL2FuaW1hdGlvbkJ1aWxkZXInO1xuaW1wb3J0IHsgUmVkdWNlZE1vdGlvbk1hbmFnZXIgfSBmcm9tICcuLi8uLi9SZWR1Y2VkTW90aW9uJztcbmltcG9ydCB7IHByZXBhcmVDdXJ2ZWRUcmFuc2l0aW9uIH0gZnJvbSAnLi90cmFuc2l0aW9uL0N1cnZlZC53ZWInO1xuaW1wb3J0IHsgRWFzaW5nTmFtZVN5bWJvbCB9IGZyb20gJy4uLy4uL0Vhc2luZyc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuLi8uLi9sb2dnZXInO1xuXG5mdW5jdGlvbiBnZXRFYXNpbmdGcm9tQ29uZmlnKGNvbmZpZzogQ3VzdG9tQ29uZmlnKTogc3RyaW5nIHtcbiAgaWYgKCFjb25maWcuZWFzaW5nVikge1xuICAgIHJldHVybiBnZXRFYXNpbmdCeU5hbWUoJ2xpbmVhcicpO1xuICB9XG5cbiAgY29uc3QgZWFzaW5nTmFtZSA9IGNvbmZpZy5lYXNpbmdWW0Vhc2luZ05hbWVTeW1ib2xdO1xuXG4gIGlmICghKGVhc2luZ05hbWUgaW4gV2ViRWFzaW5ncykpIHtcbiAgICBsb2dnZXIud2FybihgU2VsZWN0ZWQgZWFzaW5nIGlzIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIG9uIHdlYi5gKTtcblxuICAgIHJldHVybiBnZXRFYXNpbmdCeU5hbWUoJ2xpbmVhcicpO1xuICB9XG5cbiAgcmV0dXJuIGdldEVhc2luZ0J5TmFtZShlYXNpbmdOYW1lIGFzIFdlYkVhc2luZ3NOYW1lcyk7XG59XG5cbmZ1bmN0aW9uIGdldFJhbmRvbURlbGF5KG1heERlbGF5ID0gMTAwMCkge1xuICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heERlbGF5ICsgMSkpIC8gMTAwMDtcbn1cblxuZnVuY3Rpb24gZ2V0RGVsYXlGcm9tQ29uZmlnKGNvbmZpZzogQ3VzdG9tQ29uZmlnKTogbnVtYmVyIHtcbiAgY29uc3Qgc2hvdWxkUmFuZG9taXplRGVsYXkgPSBjb25maWcucmFuZG9taXplRGVsYXk7XG5cbiAgY29uc3QgZGVsYXkgPSBzaG91bGRSYW5kb21pemVEZWxheSA/IGdldFJhbmRvbURlbGF5KCkgOiAwO1xuXG4gIGlmICghY29uZmlnLmRlbGF5Vikge1xuICAgIHJldHVybiBkZWxheTtcbiAgfVxuXG4gIHJldHVybiBzaG91bGRSYW5kb21pemVEZWxheVxuICAgID8gZ2V0UmFuZG9tRGVsYXkoY29uZmlnLmRlbGF5VilcbiAgICA6IGNvbmZpZy5kZWxheVYgLyAxMDAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVkdWNlZE1vdGlvbkZyb21Db25maWcoY29uZmlnOiBDdXN0b21Db25maWcpIHtcbiAgaWYgKCFjb25maWcucmVkdWNlTW90aW9uVikge1xuICAgIHJldHVybiBSZWR1Y2VkTW90aW9uTWFuYWdlci5qc1ZhbHVlO1xuICB9XG5cbiAgc3dpdGNoIChjb25maWcucmVkdWNlTW90aW9uVikge1xuICAgIGNhc2UgUmVkdWNlTW90aW9uLk5ldmVyOlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNhc2UgUmVkdWNlTW90aW9uLkFsd2F5czpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gUmVkdWNlZE1vdGlvbk1hbmFnZXIuanNWYWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREdXJhdGlvbkZyb21Db25maWcoXG4gIGNvbmZpZzogQ3VzdG9tQ29uZmlnLFxuICBhbmltYXRpb25OYW1lOiBzdHJpbmdcbik6IG51bWJlciB7XG4gIC8vIER1cmF0aW9uIGluIGtleWZyYW1lIGhhcyB0byBiZSBpbiBzZWNvbmRzLiBIb3dldmVyLCB3aGVuIHVzaW5nIGAuZHVyYXRpb24oKWAgbW9kaWZpZXIgd2UgcGFzcyBpdCBpbiBtaWxpc2Vjb25kcy5cbiAgLy8gSWYgYGR1cmF0aW9uYCB3YXMgc3BlY2lmaWVkIGluIGNvbmZpZywgd2UgaGF2ZSB0byBkaXZpZGUgaXQgYnkgYDEwMDBgLCBvdGhlcndpc2Ugd2UgcmV0dXJuIHZhbHVlIHRoYXQgaXMgYWxyZWFkeSBpbiBzZWNvbmRzLlxuXG4gIGNvbnN0IGRlZmF1bHREdXJhdGlvbiA9XG4gICAgYW5pbWF0aW9uTmFtZSBpbiBBbmltYXRpb25zXG4gICAgICA/IEFuaW1hdGlvbnNbYW5pbWF0aW9uTmFtZSBhcyBBbmltYXRpb25OYW1lc10uZHVyYXRpb25cbiAgICAgIDogMC4zO1xuXG4gIHJldHVybiBjb25maWcuZHVyYXRpb25WICE9PSB1bmRlZmluZWRcbiAgICA/IGNvbmZpZy5kdXJhdGlvblYgLyAxMDAwXG4gICAgOiBkZWZhdWx0RHVyYXRpb247XG59XG5cbmZ1bmN0aW9uIGdldENhbGxiYWNrRnJvbUNvbmZpZyhjb25maWc6IEN1c3RvbUNvbmZpZyk6IEFuaW1hdGlvbkNhbGxiYWNrIHtcbiAgcmV0dXJuIGNvbmZpZy5jYWxsYmFja1YgIT09IHVuZGVmaW5lZCA/IGNvbmZpZy5jYWxsYmFja1YgOiBudWxsO1xufVxuXG5mdW5jdGlvbiBnZXRSZXZlcnNlZEZyb21Db25maWcoY29uZmlnOiBDdXN0b21Db25maWcpIHtcbiAgcmV0dXJuICEhY29uZmlnLnJldmVyc2VkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJvY2Vzc2VkQ29uZmlnKFxuICBhbmltYXRpb25OYW1lOiBzdHJpbmcsXG4gIGFuaW1hdGlvblR5cGU6IExheW91dEFuaW1hdGlvblR5cGUsXG4gIGNvbmZpZzogQ3VzdG9tQ29uZmlnXG4pOiBBbmltYXRpb25Db25maWcge1xuICByZXR1cm4ge1xuICAgIGFuaW1hdGlvbk5hbWUsXG4gICAgYW5pbWF0aW9uVHlwZSxcbiAgICBkdXJhdGlvbjogZ2V0RHVyYXRpb25Gcm9tQ29uZmlnKGNvbmZpZywgYW5pbWF0aW9uTmFtZSksXG4gICAgZGVsYXk6IGdldERlbGF5RnJvbUNvbmZpZyhjb25maWcpLFxuICAgIGVhc2luZzogZ2V0RWFzaW5nRnJvbUNvbmZpZyhjb25maWcpLFxuICAgIGNhbGxiYWNrOiBnZXRDYWxsYmFja0Zyb21Db25maWcoY29uZmlnKSxcbiAgICByZXZlcnNlZDogZ2V0UmV2ZXJzZWRGcm9tQ29uZmlnKGNvbmZpZyksXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXliZU1vZGlmeVN0eWxlRm9yS2V5ZnJhbWUoXG4gIGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICBjb25maWc6IEN1c3RvbUNvbmZpZ1xuKSB7XG4gIGlmICghKGNvbmZpZyBpbnN0YW5jZW9mIEtleWZyYW1lKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFdlIG5lZWQgdG8gc2V0IGBhbmltYXRpb25GaWxsTW9kZWAgdG8gYGZvcndhcmRzYCwgb3RoZXJ3aXNlIGNvbXBvbmVudCB3aWxsIGdvIGJhY2sgdG8gaXRzIHBvc2l0aW9uLlxuICAvLyBUaGlzIHdpbGwgcmVzdWx0IGluIHdyb25nIHNuYXBzaG90XG4gIGVsZW1lbnQuc3R5bGUuYW5pbWF0aW9uRmlsbE1vZGUgPSAnZm9yd2FyZHMnO1xuXG4gIGZvciAoY29uc3QgdGltZXN0YW1wUnVsZXMgb2YgT2JqZWN0LnZhbHVlcyhcbiAgICBjb25maWcuZGVmaW5pdGlvbnMgYXMgS2V5ZnJhbWVEZWZpbml0aW9uc1xuICApKSB7XG4gICAgaWYgKCdvcmlnaW5YJyBpbiB0aW1lc3RhbXBSdWxlcyB8fCAnb3JpZ2luWScgaW4gdGltZXN0YW1wUnVsZXMpIHtcbiAgICAgIGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2F2ZVNuYXBzaG90KGVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gIGNvbnN0IHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gIGNvbnN0IHNuYXBzaG90OiBSZWFuaW1hdGVkU25hcHNob3QgPSB7XG4gICAgdG9wOiByZWN0LnRvcCxcbiAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiByZWN0LmhlaWdodCxcbiAgICBzY3JvbGxPZmZzZXRzOiBnZXRFbGVtZW50U2Nyb2xsVmFsdWUoZWxlbWVudCksXG4gIH07XG5cbiAgc25hcHNob3RzLnNldChlbGVtZW50LCBzbmFwc2hvdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRFbGVtZW50QW5pbWF0aW9uKFxuICBlbGVtZW50OiBSZWFuaW1hdGVkSFRNTEVsZW1lbnQsXG4gIGFuaW1hdGlvbkNvbmZpZzogQW5pbWF0aW9uQ29uZmlnLFxuICBzaG91bGRTYXZlUG9zaXRpb24gPSBmYWxzZSxcbiAgcGFyZW50OiBFbGVtZW50IHwgbnVsbCA9IG51bGxcbikge1xuICBjb25zdCB7IGFuaW1hdGlvbk5hbWUsIGR1cmF0aW9uLCBkZWxheSwgZWFzaW5nIH0gPSBhbmltYXRpb25Db25maWc7XG5cbiAgY29uc3QgY29uZmlndXJlQW5pbWF0aW9uID0gKCkgPT4ge1xuICAgIGVsZW1lbnQuc3R5bGUuYW5pbWF0aW9uTmFtZSA9IGFuaW1hdGlvbk5hbWU7XG4gICAgZWxlbWVudC5zdHlsZS5hbmltYXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9ufXNgO1xuICAgIGVsZW1lbnQuc3R5bGUuYW5pbWF0aW9uRGVsYXkgPSBgJHtkZWxheX1zYDtcbiAgICBlbGVtZW50LnN0eWxlLmFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uID0gZWFzaW5nO1xuICB9O1xuXG4gIGlmIChhbmltYXRpb25Db25maWcuYW5pbWF0aW9uVHlwZSA9PT0gTGF5b3V0QW5pbWF0aW9uVHlwZS5FTlRFUklORykge1xuICAgIC8vIE9uIGNocm9tZSBzb21ldGltZXMgZW50ZXJpbmcgYW5pbWF0aW9ucyBmbGlja2VyLiBUaGlzIGlzIG1vc3QgbGlrZWx5IGNhdXNlZCBieSBhbmltYXRpb24gYmVpbmcgaW50ZXJydXB0ZWRcbiAgICAvLyBieSBhbHJlYWR5IHN0YXJ0ZWQgdGFza3MuIFRvIGF2b2lkIGZsaWNrZXJpbmcsIHdlIHVzZSBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lYCwgd2hpY2ggd2lsbCBydW4gY2FsbGJhY2sgcmlnaHQgYmVmb3JlIHJlcGFpbnQuXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNvbmZpZ3VyZUFuaW1hdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlndXJlQW5pbWF0aW9uKCk7XG4gIH1cblxuICBlbGVtZW50Lm9uYW5pbWF0aW9uZW5kID0gKCkgPT4ge1xuICAgIGlmIChzaG91bGRTYXZlUG9zaXRpb24pIHtcbiAgICAgIHNhdmVTbmFwc2hvdChlbGVtZW50KTtcbiAgICB9XG5cbiAgICBpZiAocGFyZW50Py5jb250YWlucyhlbGVtZW50KSkge1xuICAgICAgZWxlbWVudC5yZW1vdmVkQWZ0ZXJBbmltYXRpb24gPSB0cnVlO1xuICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIGFuaW1hdGlvbkNvbmZpZy5jYWxsYmFjaz8uKHRydWUpO1xuICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uY2FuY2VsJywgYW5pbWF0aW9uQ2FuY2VsSGFuZGxlcik7XG4gIH07XG5cbiAgY29uc3QgYW5pbWF0aW9uQ2FuY2VsSGFuZGxlciA9ICgpID0+IHtcbiAgICBhbmltYXRpb25Db25maWcuY2FsbGJhY2s/LihmYWxzZSk7XG5cbiAgICBpZiAocGFyZW50Py5jb250YWlucyhlbGVtZW50KSkge1xuICAgICAgZWxlbWVudC5yZW1vdmVkQWZ0ZXJBbmltYXRpb24gPSB0cnVlO1xuICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uY2FuY2VsJywgYW5pbWF0aW9uQ2FuY2VsSGFuZGxlcik7XG4gIH07XG5cbiAgLy8gSGVyZSB3ZSBoYXZlIHRvIHVzZSBgYWRkRXZlbnRMaXN0ZW5lcmAgc2luY2UgZWxlbWVudC5vbmFuaW1hdGlvbmNhbmNlbCBkb2Vzbid0IHdvcmsgb24gY2hyb21lXG4gIGVsZW1lbnQub25hbmltYXRpb25zdGFydCA9ICgpID0+IHtcbiAgICBpZiAoYW5pbWF0aW9uQ29uZmlnLmFuaW1hdGlvblR5cGUgPT09IExheW91dEFuaW1hdGlvblR5cGUuRU5URVJJTkcpIHtcbiAgICAgIF91cGRhdGVQcm9wc0pTKHsgdmlzaWJpbGl0eTogJ2luaXRpYWwnIH0sIGVsZW1lbnQpO1xuICAgIH1cblxuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uY2FuY2VsJywgYW5pbWF0aW9uQ2FuY2VsSGFuZGxlcik7XG4gIH07XG5cbiAgaWYgKCEoYW5pbWF0aW9uTmFtZSBpbiBBbmltYXRpb25zKSkge1xuICAgIHNjaGVkdWxlQW5pbWF0aW9uQ2xlYW51cChhbmltYXRpb25OYW1lLCBkdXJhdGlvbiArIGRlbGF5LCAoKSA9PiB7XG4gICAgICBpZiAoc2hvdWxkU2F2ZVBvc2l0aW9uKSB7XG4gICAgICAgIHNldEVsZW1lbnRQb3NpdGlvbihlbGVtZW50LCBzbmFwc2hvdHMuZ2V0KGVsZW1lbnQpISk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUxheW91dFRyYW5zaXRpb24oXG4gIGVsZW1lbnQ6IFJlYW5pbWF0ZWRIVE1MRWxlbWVudCxcbiAgYW5pbWF0aW9uQ29uZmlnOiBBbmltYXRpb25Db25maWcsXG4gIHRyYW5zaXRpb25EYXRhOiBUcmFuc2l0aW9uRGF0YVxuKSB7XG4gIGNvbnN0IHsgYW5pbWF0aW9uTmFtZSB9ID0gYW5pbWF0aW9uQ29uZmlnO1xuXG4gIGxldCBhbmltYXRpb25UeXBlO1xuXG4gIHN3aXRjaCAoYW5pbWF0aW9uTmFtZSkge1xuICAgIGNhc2UgJ0xpbmVhclRyYW5zaXRpb24nOlxuICAgICAgYW5pbWF0aW9uVHlwZSA9IFRyYW5zaXRpb25UeXBlLkxJTkVBUjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ1NlcXVlbmNlZFRyYW5zaXRpb24nOlxuICAgICAgYW5pbWF0aW9uVHlwZSA9IFRyYW5zaXRpb25UeXBlLlNFUVVFTkNFRDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ0ZhZGluZ1RyYW5zaXRpb24nOlxuICAgICAgYW5pbWF0aW9uVHlwZSA9IFRyYW5zaXRpb25UeXBlLkZBRElORztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ0p1bXBpbmdUcmFuc2l0aW9uJzpcbiAgICAgIGFuaW1hdGlvblR5cGUgPSBUcmFuc2l0aW9uVHlwZS5KVU1QSU5HO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnQ3VydmVkVHJhbnNpdGlvbic6XG4gICAgICBhbmltYXRpb25UeXBlID0gVHJhbnNpdGlvblR5cGUuQ1VSVkVEO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnRW50cnlFeGl0VHJhbnNpdGlvbic6XG4gICAgICBhbmltYXRpb25UeXBlID0gVHJhbnNpdGlvblR5cGUuRU5UUllfRVhJVDtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBhbmltYXRpb25UeXBlID0gVHJhbnNpdGlvblR5cGUuTElORUFSO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICBjb25zdCB7IHRyYW5zaXRpb25LZXlmcmFtZU5hbWUsIGR1bW15VHJhbnNpdGlvbktleWZyYW1lTmFtZSB9ID1cbiAgICBUcmFuc2l0aW9uR2VuZXJhdG9yKGFuaW1hdGlvblR5cGUsIHRyYW5zaXRpb25EYXRhKTtcblxuICBhbmltYXRpb25Db25maWcuYW5pbWF0aW9uTmFtZSA9IHRyYW5zaXRpb25LZXlmcmFtZU5hbWU7XG5cbiAgaWYgKGFuaW1hdGlvblR5cGUgPT09IFRyYW5zaXRpb25UeXBlLkNVUlZFRCkge1xuICAgIGNvbnN0IHsgZHVtbXksIGR1bW15QW5pbWF0aW9uQ29uZmlnIH0gPSBwcmVwYXJlQ3VydmVkVHJhbnNpdGlvbihcbiAgICAgIGVsZW1lbnQsXG4gICAgICBhbmltYXRpb25Db25maWcsXG4gICAgICB0cmFuc2l0aW9uRGF0YSxcbiAgICAgIGR1bW15VHJhbnNpdGlvbktleWZyYW1lTmFtZSEgLy8gSW4gYEN1cnZlZFRyYW5zaXRpb25gIGl0IGNhbm5vdCBiZSB1bmRlZmluZWRcbiAgICApO1xuXG4gICAgc2V0RWxlbWVudEFuaW1hdGlvbihkdW1teSwgZHVtbXlBbmltYXRpb25Db25maWcpO1xuICB9XG4gIHNldEVsZW1lbnRBbmltYXRpb24oZWxlbWVudCwgYW5pbWF0aW9uQ29uZmlnKTtcbn1cblxuZnVuY3Rpb24gZ2V0RWxlbWVudFNjcm9sbFZhbHVlKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogU2Nyb2xsT2Zmc2V0cyB7XG4gIGxldCBjdXJyZW50OiBIVE1MRWxlbWVudCB8IG51bGwgPSBlbGVtZW50O1xuXG4gIGNvbnN0IHNjcm9sbE9mZnNldHM6IFNjcm9sbE9mZnNldHMgPSB7XG4gICAgc2Nyb2xsVG9wT2Zmc2V0OiAwLFxuICAgIHNjcm9sbExlZnRPZmZzZXQ6IDAsXG4gIH07XG5cbiAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICBpZiAoY3VycmVudC5zY3JvbGxUb3AgIT09IDAgJiYgc2Nyb2xsT2Zmc2V0cy5zY3JvbGxUb3BPZmZzZXQgPT09IDApIHtcbiAgICAgIHNjcm9sbE9mZnNldHMuc2Nyb2xsVG9wT2Zmc2V0ID0gY3VycmVudC5zY3JvbGxUb3A7XG4gICAgfVxuXG4gICAgaWYgKGN1cnJlbnQuc2Nyb2xsTGVmdCAhPT0gMCAmJiBzY3JvbGxPZmZzZXRzLnNjcm9sbExlZnRPZmZzZXQgPT09IDApIHtcbiAgICAgIHNjcm9sbE9mZnNldHMuc2Nyb2xsTGVmdE9mZnNldCA9IGN1cnJlbnQuc2Nyb2xsTGVmdDtcbiAgICB9XG5cbiAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnRFbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuIHNjcm9sbE9mZnNldHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVFeGl0aW5nQW5pbWF0aW9uKFxuICBlbGVtZW50OiBIVE1MRWxlbWVudCxcbiAgYW5pbWF0aW9uQ29uZmlnOiBBbmltYXRpb25Db25maWdcbikge1xuICBjb25zdCBwYXJlbnQgPSBlbGVtZW50Lm9mZnNldFBhcmVudDtcbiAgY29uc3QgZHVtbXkgPSBlbGVtZW50LmNsb25lTm9kZSgpIGFzIFJlYW5pbWF0ZWRIVE1MRWxlbWVudDtcbiAgZHVtbXkucmVhbmltYXRlZER1bW15ID0gdHJ1ZTtcblxuICBlbGVtZW50LnN0eWxlLmFuaW1hdGlvbk5hbWUgPSAnJztcbiAgZHVtbXkuc3R5bGUuYW5pbWF0aW9uTmFtZSA9ICcnO1xuXG4gIC8vIEFmdGVyIGNsb25pbmcgdGhlIGVsZW1lbnQsIHdlIHdhbnQgdG8gbW92ZSBhbGwgY2hpbGRyZW4gZnJvbSBvcmlnaW5hbCBlbGVtZW50IHRvIGl0cyBjbG9uZS4gVGhpcyBpcyBiZWNhdXNlIG9yaWdpbmFsIGVsZW1lbnRcbiAgLy8gd2lsbCBiZSB1bm1vdW50ZWQsIHRoZXJlZm9yZSB3aGVuIHRoaXMgY29kZSBleGVjdXRlcyBpbiBjaGlsZCBjb21wb25lbnQsIHBhcmVudCB3aWxsIGJlIGVpdGhlciBlbXB0eSBvciByZW1vdmVkIHNvb24uXG4gIC8vIFVzaW5nIGVsZW1lbnQuY2xvbmVOb2RlKHRydWUpIGRvZXNuJ3Qgc29sdmUgdGhlIHByb2JsZW0sIGJlY2F1c2UgaXQgY3JlYXRlcyBjb3B5IG9mIGNoaWxkcmVuIGFuZCB3ZSB3b24ndCBiZSBhYmxlIHRvIHNldCB0aGVpciBhbmltYXRpb25zXG4gIC8vXG4gIC8vIFRoaXMgbG9vcCB3b3JrcyBiZWNhdXNlIGFwcGVuZENoaWxkKCkgbW92ZXMgZWxlbWVudCBpbnRvIGl0cyBuZXcgcGFyZW50IGluc3RlYWQgb2YgY29weWluZyBpdFxuICB3aGlsZSAoZWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgZHVtbXkuYXBwZW5kQ2hpbGQoZWxlbWVudC5maXJzdENoaWxkKTtcbiAgfVxuXG4gIHBhcmVudD8uYXBwZW5kQ2hpbGQoZHVtbXkpO1xuXG4gIGNvbnN0IHNuYXBzaG90ID0gc25hcHNob3RzLmdldChlbGVtZW50KSE7XG5cbiAgY29uc3Qgc2Nyb2xsT2Zmc2V0cyA9IGdldEVsZW1lbnRTY3JvbGxWYWx1ZShlbGVtZW50KTtcblxuICAvLyBTY3JvbGwgZG9lcyBub3QgdHJpZ2dlciBzbmFwc2hvdHRpbmcsIHRoZXJlZm9yZSBpZiB3ZSBzdGFydCBleGl0aW5nIGFuaW1hdGlvbiBhZnRlclxuICAvLyBzY3JvbGxpbmcgdGhyb3VnaCBwYXJlbnQgY29tcG9uZW50LCBkdW1teSB3aWxsIGVuZCB1cCBpbiB3cm9uZyBwbGFjZS4gSW4gb3JkZXIgdG8gZml4IHRoYXRcbiAgLy8gd2Uga2VlcCBsYXN0IGtub3duIHNjcm9sbCBwb3NpdGlvbiBpbiBzbmFwc2hvdCBhbmQgdGhlbiBhZGp1c3QgZHVtbXkgcG9zaXRpb24gYmFzZWQgb25cbiAgLy8gbGFzdCBrbm93biBzY3JvbGwgb2Zmc2V0IGFuZCBjdXJyZW50IHNjcm9sbCBvZmZzZXRcblxuICBjb25zdCBjdXJyZW50U2Nyb2xsVG9wT2Zmc2V0ID0gc2Nyb2xsT2Zmc2V0cy5zY3JvbGxUb3BPZmZzZXQ7XG4gIGNvbnN0IGxhc3RTY3JvbGxUb3BPZmZzZXQgPSBzbmFwc2hvdC5zY3JvbGxPZmZzZXRzLnNjcm9sbFRvcE9mZnNldDtcblxuICBpZiAoY3VycmVudFNjcm9sbFRvcE9mZnNldCAhPT0gbGFzdFNjcm9sbFRvcE9mZnNldCkge1xuICAgIHNuYXBzaG90LnRvcCArPSBsYXN0U2Nyb2xsVG9wT2Zmc2V0IC0gY3VycmVudFNjcm9sbFRvcE9mZnNldDtcbiAgfVxuXG4gIGNvbnN0IGN1cnJlbnRTY3JvbGxMZWZ0T2Zmc2V0ID0gc2Nyb2xsT2Zmc2V0cy5zY3JvbGxMZWZ0T2Zmc2V0O1xuICBjb25zdCBsYXN0U2Nyb2xsTGVmdE9mZnNldCA9IHNuYXBzaG90LnNjcm9sbE9mZnNldHMuc2Nyb2xsTGVmdE9mZnNldDtcblxuICBpZiAoY3VycmVudFNjcm9sbExlZnRPZmZzZXQgIT09IGxhc3RTY3JvbGxMZWZ0T2Zmc2V0KSB7XG4gICAgc25hcHNob3QubGVmdCArPSBsYXN0U2Nyb2xsTGVmdE9mZnNldCAtIGN1cnJlbnRTY3JvbGxMZWZ0T2Zmc2V0O1xuICB9XG5cbiAgc25hcHNob3RzLnNldChkdW1teSwgc25hcHNob3QpO1xuXG4gIHNldEVsZW1lbnRQb3NpdGlvbihkdW1teSwgc25hcHNob3QpO1xuXG4gIHNldEVsZW1lbnRBbmltYXRpb24oZHVtbXksIGFuaW1hdGlvbkNvbmZpZywgZmFsc2UsIHBhcmVudCk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQUNBLE1BQUEsQ0FBQUMsY0FBQSxDQUFBQyxPQUFBO0VBQUFDLEtBQUE7QUFBQTtBQUFBRCxPQUFBLENBQUFFLGtCQUFBLEdBQUFBLGtCQUFBO0FBQUFGLE9BQUEsQ0FBQUcsMEJBQUEsR0FBQUEsMEJBQUE7QUFBQUgsT0FBQSxDQUFBSSxzQkFBQSxHQUFBQSxzQkFBQTtBQUFBSixPQUFBLENBQUFLLHNCQUFBLEdBQUFBLHNCQUFBO0FBQUFMLE9BQUEsQ0FBQU0sMkJBQUEsR0FBQUEsMkJBQUE7QUFBQU4sT0FBQSxDQUFBTyxZQUFBLEdBQUFBLFlBQUE7QUFBQVAsT0FBQSxDQUFBUSxtQkFBQSxHQUFBQSxtQkFBQTtBQUViLElBQUFDLE9BQUEsR0FBQUMsT0FBQTtBQVFBLElBQUFDLE9BQUEs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