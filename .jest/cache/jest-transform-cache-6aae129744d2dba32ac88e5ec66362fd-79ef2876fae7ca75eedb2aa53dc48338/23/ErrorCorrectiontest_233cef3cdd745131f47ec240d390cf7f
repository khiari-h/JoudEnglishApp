dbb23d68aac8367cf5a8db6d8d26f6c1
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
_getJestObj().mock('../../../../src/screens/exercises/errorCorrection/hooks/useErrorCorrection');
_getJestObj().mock('../../../../src/hooks/useLastActivity');
_getJestObj().mock('../../../../src/utils/errorCorrection/errorCorrectionDataHelper');
_getJestObj().mock('../../../../src/screens/exercises/errorCorrection/ErrorCorrectionHeader', function () {
  return 'ErrorCorrectionHeader';
});
_getJestObj().mock('../../../../src/screens/exercises/errorCorrection/ErrorCorrectionCategorySelector', function () {
  return 'ErrorCorrectionCategorySelector';
});
_getJestObj().mock('../../../../src/screens/exercises/errorCorrection/ErrorCorrectionModeSelector', function () {
  return 'ErrorCorrectionModeSelector';
});
_getJestObj().mock('../../../../src/screens/exercises/errorCorrection/ErrorCorrectionProgress', function () {
  return 'ErrorCorrectionProgress';
});
_getJestObj().mock('../../../../src/screens/exercises/errorCorrection/ErrorCorrectionWordSection', function () {
  return 'ErrorCorrectionWordSection';
});
_getJestObj().mock('../../../../src/screens/exercises/errorCorrection/ErrorCorrectionNavigation', function () {
  return 'ErrorCorrectionNavigation';
});
_getJestObj().mock('../../../../src/screens/exercises/errorCorrection/ErrorCorrectionResultsCard', function () {
  return 'ErrorCorrectionResultsCard';
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _expoRouter = require("expo-router");
var _errorCorrection = _interopRequireDefault(require("../../../../src/screens/exercises/errorCorrection"));
var _useErrorCorrection = _interopRequireDefault(require("../../../../src/screens/exercises/errorCorrection/hooks/useErrorCorrection"));
var _useLastActivity = _interopRequireDefault(require("../../../../src/hooks/useLastActivity"));
var _errorCorrectionDataHelper = require("../../../../src/utils/errorCorrection/errorCorrectionDataHelper");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ErrorCorrectionExercise - Tests Complets', function () {
  var mockSaveActivity = jest.fn();
  var mockChangeCategory = jest.fn();
  var mockStartExercise = jest.fn();
  var mockCheckAnswer = jest.fn();
  var mockHandleNext = jest.fn();
  var mockErrorData = {
    categories: [{
      id: 'verbs',
      name: 'Verbes'
    }],
    exercises: [{
      id: '1',
      sentence: 'This is a test.'
    }]
  };
  var mockCurrentExercise = {
    sentence_to_correct: 'I is happy.',
    possible_errors: ['is'],
    correct_sentence: 'I am happy.'
  };
  var setupMocks = function setupMocks() {
    var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var defaultMocks = {
      useErrorCorrection: Object.assign({
        selectedCategory: 'verbs',
        currentExerciseIndex: 0,
        correctionMode: 'full',
        showFeedback: false,
        isCorrect: false,
        showResults: false,
        loaded: true,
        showDetailedProgress: false,
        userCorrection: '',
        selectedErrorIndices: [],
        selectedChoiceIndex: null,
        currentExercise: mockCurrentExercise,
        exercises: mockErrorData.exercises,
        changeCategory: mockChangeCategory,
        startExercise: mockStartExercise,
        toggleDetailedProgress: jest.fn(),
        handleNext: mockHandleNext,
        handlePrevious: jest.fn(),
        checkAnswer: mockCheckAnswer,
        handleWordPress: jest.fn(),
        handleChoiceSelect: jest.fn(),
        setUserCorrection: jest.fn(),
        setShowResults: jest.fn(),
        isLastExerciseInCategory: false,
        hasValidData: true,
        stats: {
          completedExercises: {},
          score: 0
        },
        display: {
          exerciseCounter: '1 / 1'
        }
      }, overrides.useErrorCorrection),
      useLastActivity: Object.assign({
        saveActivity: mockSaveActivity
      }, overrides.useLastActivity),
      getErrorsData: mockErrorData,
      getLevelColor: '#007AFF'
    };
    _useErrorCorrection.default.mockReturnValue(defaultMocks.useErrorCorrection);
    _useLastActivity.default.mockReturnValue(defaultMocks.useLastActivity);
    _errorCorrectionDataHelper.getErrorsData.mockReturnValue(defaultMocks.getErrorsData);
    _errorCorrectionDataHelper.getLevelColor.mockReturnValue(defaultMocks.getLevelColor);
  };
  beforeEach(function () {
    jest.clearAllMocks();
    setupMocks();
  });
  it('should render without crashing', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_errorCorrection.default, {
      route: {
        params: {
          level: 'A1'
        }
      }
    }));
  });
  describe('Core Functionality', function () {
    it('should render in browse mode and start an exercise', function () {});
  });
  describe('States and Edge Cases', function () {
    it('should handle loading and invalid data states', function () {});
  });
  describe('Performance Optimizations', function () {
    it('should keep callbacks stable on re-renders', function () {});
  });
  describe('Hooks Integration', function () {
    it('should call hooks and utils with correct parameters', function () {});
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,