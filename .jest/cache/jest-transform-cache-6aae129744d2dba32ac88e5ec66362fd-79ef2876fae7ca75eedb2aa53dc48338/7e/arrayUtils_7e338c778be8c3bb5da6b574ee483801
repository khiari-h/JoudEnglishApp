0ad5a951d572efe5774826a25595dcd0
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shuffleWithFallback = exports.shuffleInPlace = exports.shuffleArray = exports.shuffleAndTake = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
function getBetterRandomIndex(max) {
  var randomValue = Math.random();
  if (typeof crypto !== 'undefined' && crypto.getRandomValues) {
    try {
      var randomBytes = new Uint8Array(1);
      crypto.getRandomValues(randomBytes);
      randomValue = (randomValue + randomBytes[0] / 255) / 2;
    } catch (error) {}
  }
  var timeEntropy = Date.now() % 1000 / 1000;
  randomValue = (randomValue + timeEntropy) / 2;
  return Math.floor(randomValue * max);
}
var shuffleArray = exports.shuffleArray = function shuffleArray(array) {
  if (!Array.isArray(array)) {
    return [];
  }
  if (array.length <= 1) {
    return (0, _toConsumableArray2.default)(array);
  }
  var shuffled = (0, _toConsumableArray2.default)(array);
  for (var i = shuffled.length - 1; i > 0; i--) {
    var j = getBetterRandomIndex(i + 1);
    var _ref = [shuffled[j], shuffled[i]];
    shuffled[i] = _ref[0];
    shuffled[j] = _ref[1];
  }
  return shuffled;
};
var shuffleAndTake = exports.shuffleAndTake = function shuffleAndTake(array, count) {
  if (!Array.isArray(array) || array.length === 0 || count <= 0) {
    return [];
  }
  var shuffled = shuffleArray(array);
  return shuffled.slice(0, Math.min(count, array.length));
};
var shuffleWithFallback = exports.shuffleWithFallback = function shuffleWithFallback(array, fallbackArray, count) {
  if (!Array.isArray(array) || array.length === 0) {
    return shuffleAndTake(fallbackArray, count);
  }
  if (array.length >= count) {
    return shuffleAndTake(array, count);
  }
  var combined = [].concat((0, _toConsumableArray2.default)(array), (0, _toConsumableArray2.default)(fallbackArray));
  return shuffleAndTake(combined, count);
};
var shuffleInPlace = exports.shuffleInPlace = function shuffleInPlace(array) {
  if (!Array.isArray(array) || array.length <= 1) {
    return;
  }
  for (var i = array.length - 1; i > 0; i--) {
    var j = getBetterRandomIndex(i + 1);
    var _ref2 = [array[j], array[i]];
    array[i] = _ref2[0];
    array[j] = _ref2[1];
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,