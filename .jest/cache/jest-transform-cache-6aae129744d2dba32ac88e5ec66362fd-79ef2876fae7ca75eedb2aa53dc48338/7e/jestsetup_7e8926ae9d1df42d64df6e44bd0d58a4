8d41fd3f70625f6f1408a1682a7b1825
_getJestObj().mock('react-native/Libraries/Settings/Settings', function () {
  return {
    get: jest.fn(function () {
      return 'light';
    }),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn()
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return require('@react-native-async-storage/async-storage/jest/async-storage-mock');
});
_getJestObj().mock('expo-font', function () {
  return {
    useFonts: function useFonts() {
      return [true];
    },
    isLoaded: function isLoaded() {
      return true;
    }
  };
});
_getJestObj().mock('expo-haptics', function () {
  return {
    impactAsync: jest.fn()
  };
});
_getJestObj().mock('expo-splash-screen', function () {
  return {
    hideAsync: jest.fn(),
    preventAutoHideAsync: jest.fn()
  };
});
_getJestObj().mock('expo-constants', function () {
  return Object.assign({}, jest.requireActual('expo-constants'), {
    manifest: {
      extra: {}
    }
  });
});
_getJestObj().mock('expo-asset', function () {
  return {
    Asset: {
      fromModule: jest.fn(function () {
        return {
          downloadAsync: jest.fn(),
          uri: 'test-uri'
        };
      })
    }
  };
});
_getJestObj().mock('@react-native-clipboard/clipboard', function () {
  return {
    getString: jest.fn((0, _asyncToGenerator2.default)(function* () {
      return '';
    })),
    setString: jest.fn()
  };
}, {
  virtual: true
});
_getJestObj().mock('@react-native-community/push-notification-ios', function () {
  return {
    presentLocalNotification: jest.fn()
  };
}, {
  virtual: true
});
_getJestObj().mock('@react-native-community/progress-bar-android', function () {
  return 'ProgressBarAndroid';
}, {
  virtual: true
});
_getJestObj().mock('react-native-reanimated', function () {
  var Reanimated = require('react-native-reanimated/mock');
  Reanimated.useSharedValue = jest.fn(function () {
    return {
      value: 0
    };
  });
  Reanimated.withTiming = function (toValue, options, callback) {
    if (callback) {
      callback(true);
    }
    return toValue;
  };
  Reanimated.withSpring = function (toValue, options, callback) {
    if (callback) {
      callback(true);
    }
    return toValue;
  };
  Reanimated.withRepeat = function (animation, repetitions, reverse) {
    return animation;
  };
  Reanimated.withSequence = function () {
    return arguments.length <= 0 ? undefined : arguments[0];
  };
  Reanimated.withDelay = function (delay, animation) {
    return animation;
  };
  return Reanimated;
});
_getJestObj().mock('expo-modules-core', function () {
  return Object.assign({}, jest.requireActual('expo-modules-core'), {
    requireOptionalNativeModule: jest.fn(),
    NativeModulesProxy: new Proxy({}, {
      get: function get(target, prop) {
        if (prop === 'ExpoLocalization') {
          return {
            locale: 'en-US',
            isoCurrencyCodes: ['USD'],
            timezone: 'America/New_York',
            isRTL: false
          };
        }
        if (prop === 'ExpoRandom') {
          return {
            getRandomBytes: jest.fn(),
            getRandomBytesAsync: jest.fn()
          };
        }
        return {};
      }
    }),
    EventEmitter: jest.fn(function () {
      return {
        addListener: jest.fn(),
        removeListeners: jest.fn()
      };
    }),
    requireNativeViewManager: jest.fn(function () {
      return {};
    })
  });
});
_getJestObj().mock('expo-linear-gradient', function () {
  var React = require('react');
  var _require = require('react-native'),
    View = _require.View;
  return {
    LinearGradient: function LinearGradient(_ref2) {
      var children = _ref2.children,
        colors = _ref2.colors,
        start = _ref2.start,
        end = _ref2.end,
        style = _ref2.style,
        props = (0, _objectWithoutProperties2.default)(_ref2, _excluded);
      return (0, _jsxRuntime.jsx)(View, Object.assign({
        style: [style, {
          backgroundColor: colors ? colors[0] : 'transparent'
        }]
      }, props, {
        children: children
      }));
    }
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn(),
      replace: jest.fn(),
      back: jest.fn(),
      canGoBack: jest.fn(function () {
        return true;
      }),
      setParams: jest.fn()
    },
    useFocusEffect: jest.fn(function () {}),
    useRouter: jest.fn(function () {
      return {
        push: jest.fn(),
        replace: jest.fn(),
        back: jest.fn(),
        canGoBack: jest.fn(function () {
          return true;
        }),
        setParams: jest.fn()
      };
    }),
    useLocalSearchParams: jest.fn(function () {
      return {};
    }),
    useGlobalSearchParams: jest.fn(function () {
      return {};
    }),
    useSegments: jest.fn(function () {
      return [];
    }),
    usePathname: jest.fn(function () {
      return '/';
    }),
    Redirect: function Redirect(_ref3) {
      var href = _ref3.href;
      return null;
    },
    Link: function Link(_ref4) {
      var href = _ref4.href,
        children = _ref4.children,
        props = (0, _objectWithoutProperties2.default)(_ref4, _excluded2);
      var React = require('react');
      var _require2 = require('react-native'),
        TouchableOpacity = _require2.TouchableOpacity,
        Text = _require2.Text;
      return React.createElement(TouchableOpacity, props, typeof children === 'string' ? React.createElement(Text, {}, children) : children);
    },
    Stack: {
      Screen: function Screen(_ref5) {
        var children = _ref5.children,
          props = (0, _objectWithoutProperties2.default)(_ref5, _excluded3);
        var React = require('react');
        return React.createElement('div', props, children);
      }
    },
    Tabs: {
      Screen: function Screen(_ref6) {
        var children = _ref6.children,
          props = (0, _objectWithoutProperties2.default)(_ref6, _excluded4);
        var React = require('react');
        return React.createElement('div', props, children);
      }
    }
  };
});
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  var mockAnimatedValue = {
    setValue: jest.fn(),
    addListener: jest.fn(function () {
      return 'mockListenerId';
    }),
    removeListener: jest.fn(),
    removeAllListeners: jest.fn(),
    interpolate: jest.fn(function () {
      return mockAnimatedValue;
    }),
    stopAnimation: jest.fn(),
    resetAnimation: jest.fn(),
    _value: 0,
    _offset: 0,
    __getValue: jest.fn(function () {
      return 0;
    })
  };
  var mockAnimatedTiming = {
    start: jest.fn(function (callback) {
      if (callback) {
        setTimeout(callback, 0, {
          finished: true
        });
      }
    }),
    stop: jest.fn(),
    reset: jest.fn()
  };
  RN.Animated = Object.assign({}, RN.Animated, {
    Value: jest.fn(function () {
      return mockAnimatedValue;
    }),
    ValueXY: jest.fn(function () {
      return {
        x: mockAnimatedValue,
        y: mockAnimatedValue,
        setValue: jest.fn(),
        setOffset: jest.fn(),
        flattenOffset: jest.fn(),
        extractOffset: jest.fn(),
        addListener: jest.fn(function () {
          return 'mockListenerId';
        }),
        removeListener: jest.fn(),
        stopAnimation: jest.fn(),
        resetAnimation: jest.fn(),
        getLayout: jest.fn(function () {
          return {
            left: mockAnimatedValue,
            top: mockAnimatedValue
          };
        }),
        getTranslateTransform: jest.fn(function () {
          return [{
            translateX: mockAnimatedValue
          }, {
            translateY: mockAnimatedValue
          }];
        })
      };
    }),
    timing: jest.fn(function () {
      return {
        start: jest.fn(function (callback) {
          if (callback) callback({
            finished: true
          });
        }),
        stop: jest.fn(),
        reset: jest.fn()
      };
    }),
    spring: jest.fn(function () {
      return {
        start: jest.fn(function (callback) {
          if (callback) callback({
            finished: true
          });
        }),
        stop: jest.fn(),
        reset: jest.fn()
      };
    }),
    decay: jest.fn(function () {
      return mockAnimatedTiming;
    }),
    sequence: jest.fn(function (animations) {
      return {
        start: jest.fn(function (callback) {
          if (callback) callback({
            finished: true
          });
        }),
        stop: jest.fn(),
        reset: jest.fn()
      };
    }),
    parallel: jest.fn(function (animations) {
      return {
        start: jest.fn(function (callback) {
          if (callback) callback({
            finished: true
          });
        }),
        stop: jest.fn(),
        reset: jest.fn()
      };
    }),
    stagger: jest.fn(function (time, animations) {
      return {
        start: jest.fn(function (callback) {
          if (callback) setTimeout(callback, 0, {
            finished: true
          });
        }),
        stop: jest.fn(),
        reset: jest.fn()
      };
    }),
    delay: jest.fn(function (time) {
      return {
        start: jest.fn(function (callback) {
          if (callback) setTimeout(callback, 0, {
            finished: true
          });
        }),
        stop: jest.fn(),
        reset: jest.fn()
      };
    }),
    loop: jest.fn(function (animation) {
      return {
        start: jest.fn(function (callback) {
          if (callback) setTimeout(callback, 0, {
            finished: true
          });
        }),
        stop: jest.fn(),
        reset: jest.fn()
      };
    }),
    View: RN.Animated.View,
    Text: RN.Animated.Text,
    ScrollView: RN.Animated.ScrollView,
    Image: RN.Animated.Image,
    Easing: {
      linear: jest.fn(function (t) {
        return t;
      }),
      ease: jest.fn(function (t) {
        return t;
      }),
      quad: jest.fn(function (t) {
        return t * t;
      }),
      cubic: jest.fn(function (t) {
        return t * t * t;
      }),
      poly: jest.fn(function (n) {
        return function (t) {
          return Math.pow(t, n);
        };
      }),
      sin: jest.fn(function (t) {
        return 1 - Math.cos(t * Math.PI / 2);
      }),
      circle: jest.fn(function (t) {
        return 1 - Math.sqrt(1 - t * t);
      }),
      exp: jest.fn(function (t) {
        return Math.pow(2, 10 * (t - 1));
      }),
      elastic: jest.fn(function (bounciness) {
        return function (t) {
          return t;
        };
      }),
      back: jest.fn(function (s) {
        return function (t) {
          return t;
        };
      }),
      bounce: jest.fn(function (t) {
        return t;
      }),
      bezier: jest.fn(function (x1, y1, x2, y2) {
        return function (t) {
          return t;
        };
      }),
      in: jest.fn(function (easing) {
        return easing;
      }),
      out: jest.fn(function (easing) {
        return function (t) {
          return 1 - easing(1 - t);
        };
      }),
      inOut: jest.fn(function (easing) {
        return function (t) {
          return t < 0.5 ? easing(t * 2) / 2 : (2 - easing((1 - t) * 2)) / 2;
        };
      })
    },
    add: jest.fn(function (a, b) {
      return mockAnimatedValue;
    }),
    subtract: jest.fn(function (a, b) {
      return mockAnimatedValue;
    }),
    multiply: jest.fn(function (a, b) {
      return mockAnimatedValue;
    }),
    divide: jest.fn(function (a, b) {
      return mockAnimatedValue;
    }),
    modulo: jest.fn(function (a, modulus) {
      return mockAnimatedValue;
    }),
    diffClamp: jest.fn(function (a, min, max) {
      return mockAnimatedValue;
    }),
    event: jest.fn(function () {
      return jest.fn();
    }),
    forkEvent: jest.fn(function () {
      return jest.fn();
    }),
    unforkEvent: jest.fn()
  });
  return RN;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "colors", "start", "end", "style"],
  _excluded2 = ["href", "children"],
  _excluded3 = ["children"],
  _excluded4 = ["children"];
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
_reactNative.NativeModules.SettingsManager = _reactNative.NativeModules.SettingsManager || {
  settings: {
    AppleLocale: 'en_US'
  }
};
if (typeof setImmediate === 'undefined') {
  global.setImmediate = function (fn) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return setTimeout.apply(void 0, [fn, 0].concat(args));
  };
}
if (typeof clearImmediate === 'undefined') {
  global.clearImmediate = function (id) {
    return clearTimeout(id);
  };
}
var originalConsole = Object.assign({}, console);
global.console = Object.assign({}, console, {
  error: jest.fn(function (message) {
    if (typeof message === 'string' && message.includes('Warning: An update to') && message.includes('was not wrapped in act')) {
      return;
    }
    originalConsole.error(message);
  }),
  warn: jest.fn(function (message) {
    var msg = typeof message === 'string' ? message : '';
    var ignore = ['Warning: An update to', 'was not wrapped in act', 'has been extracted from react-native core and will be removed in a future release', 'new NativeEventEmitter()', 'PushNotificationIOS has been extracted from react-native core', 'Clipboard has been extracted from react-native core', 'ProgressBarAndroid has been extracted from react-native core'].some(function (t) {
      return msg.includes(t);
    });
    if (ignore) return;
    originalConsole.warn(message);
  })
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,