cb03625016fec1902d80c0aa8b1b24cf
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createAnimatedComponent;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _composeStyles = _interopRequireDefault(require("../../src/private/styles/composeStyles"));
var _View = _interopRequireDefault(require("../Components/View/View"));
var _useMergeRefs = _interopRequireDefault(require("../Utilities/useMergeRefs"));
var _useAnimatedProps3 = _interopRequireDefault(require("./useAnimatedProps"));
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function createAnimatedComponent(Component) {
  var AnimatedComponent = React.forwardRef(function (props, forwardedRef) {
    var _useAnimatedProps = (0, _useAnimatedProps3.default)(props),
      _useAnimatedProps2 = (0, _slicedToArray2.default)(_useAnimatedProps, 2),
      reducedProps = _useAnimatedProps2[0],
      callbackRef = _useAnimatedProps2[1];
    var ref = (0, _useMergeRefs.default)(callbackRef, forwardedRef);
    var passthroughAnimatedPropExplicitValues = reducedProps.passthroughAnimatedPropExplicitValues,
      style = reducedProps.style;
    var passthroughStyle = passthroughAnimatedPropExplicitValues == null ? void 0 : passthroughAnimatedPropExplicitValues.style;
    var mergedStyle = (0, _react.useMemo)(function () {
      return (0, _composeStyles.default)(style, passthroughStyle);
    }, [passthroughStyle, style]);
    return (0, _jsxRuntime.jsx)(Component, Object.assign({}, reducedProps, passthroughAnimatedPropExplicitValues, {
      style: mergedStyle,
      ref: ref
    }));
  });
  AnimatedComponent.displayName = `Animated(${Component.displayName || 'Anonymous'})`;
  return AnimatedComponent;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29tcG9zZVN0eWxlcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX1ZpZXciLCJfdXNlTWVyZ2VSZWZzIiwiX3VzZUFuaW1hdGVkUHJvcHMzIiwiX3JlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJSZWFjdCIsIl9qc3hSdW50aW1lIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsIl90IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJjcmVhdGVBbmltYXRlZENvbXBvbmVudCIsIkNvbXBvbmVudCIsIkFuaW1hdGVkQ29tcG9uZW50IiwiZm9yd2FyZFJlZiIsInByb3BzIiwiZm9yd2FyZGVkUmVmIiwiX3VzZUFuaW1hdGVkUHJvcHMiLCJ1c2VBbmltYXRlZFByb3BzIiwiX3VzZUFuaW1hdGVkUHJvcHMyIiwiX3NsaWNlZFRvQXJyYXkyIiwicmVkdWNlZFByb3BzIiwiY2FsbGJhY2tSZWYiLCJyZWYiLCJ1c2VNZXJnZVJlZnMiLCJwYXNzdGhyb3VnaEFuaW1hdGVkUHJvcEV4cGxpY2l0VmFsdWVzIiwic3R5bGUiLCJwYXNzdGhyb3VnaFN0eWxlIiwibWVyZ2VkU3R5bGUiLCJ1c2VNZW1vIiwiY29tcG9zZVN0eWxlcyIsImpzeCIsImFzc2lnbiIsImRpc3BsYXlOYW1lIl0sInNvdXJjZXMiOlsiY3JlYXRlQW5pbWF0ZWRDb21wb25lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IGNvbXBvc2VTdHlsZXMgZnJvbSAnLi4vLi4vc3JjL3ByaXZhdGUvc3R5bGVzL2NvbXBvc2VTdHlsZXMnO1xuaW1wb3J0IFZpZXcgZnJvbSAnLi4vQ29tcG9uZW50cy9WaWV3L1ZpZXcnO1xuaW1wb3J0IHVzZU1lcmdlUmVmcyBmcm9tICcuLi9VdGlsaXRpZXMvdXNlTWVyZ2VSZWZzJztcbmltcG9ydCB1c2VBbmltYXRlZFByb3BzIGZyb20gJy4vdXNlQW5pbWF0ZWRQcm9wcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3VzZU1lbW99IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IHR5cGUgQW5pbWF0ZWRQcm9wczxQcm9wczogey4uLn0+ID0ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgK1tfSyBpbiBrZXlvZiAoUHJvcHMgJlxuICAgICAgJFJlYWRPbmx5PHtcbiAgICAgICAgcGFzc3Rocm91Z2hBbmltYXRlZFByb3BFeHBsaWNpdFZhbHVlcz86IFJlYWN0LkVsZW1lbnRDb25maWc8XG4gICAgICAgICAgdHlwZW9mIFZpZXcsXG4gICAgICAgID4sXG4gICAgICB9PildOiBhbnksXG59O1xuXG5leHBvcnQgdHlwZSBBbmltYXRlZENvbXBvbmVudFR5cGU8XG4gIFByb3BzOiB7Li4ufSxcbiAgK0luc3RhbmNlID0gbWl4ZWQsXG4+ID0gUmVhY3QuQWJzdHJhY3RDb21wb25lbnQ8QW5pbWF0ZWRQcm9wczxQcm9wcz4sIEluc3RhbmNlPjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQW5pbWF0ZWRDb21wb25lbnQ8VFByb3BzOiB7Li4ufSwgVEluc3RhbmNlPihcbiAgQ29tcG9uZW50OiBSZWFjdC5BYnN0cmFjdENvbXBvbmVudDxUUHJvcHMsIFRJbnN0YW5jZT4sXG4pOiBBbmltYXRlZENvbXBvbmVudFR5cGU8VFByb3BzLCBUSW5zdGFuY2U+IHtcbiAgY29uc3QgQW5pbWF0ZWRDb21wb25lbnQgPSBSZWFjdC5mb3J3YXJkUmVmPEFuaW1hdGVkUHJvcHM8VFByb3BzPiwgVEluc3RhbmNlPihcbiAgICAocHJvcHMsIGZvcndhcmRlZFJlZikgPT4ge1xuICAgICAgY29uc3QgW3JlZHVjZWRQcm9wcywgY2FsbGJhY2tSZWZdID0gdXNlQW5pbWF0ZWRQcm9wczxUUHJvcHMsIFRJbnN0YW5jZT4oXG4gICAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdXG4gICAgICAgIHByb3BzLFxuICAgICAgKTtcbiAgICAgIGNvbnN0IHJlZiA9IHVzZU1lcmdlUmVmczxUSW5zdGFuY2U+KGNhbGxiYWNrUmVmLCBmb3J3YXJkZWRSZWYpO1xuXG4gICAgICAvLyBTb21lIGNvbXBvbmVudHMgcmVxdWlyZSBleHBsaWNpdCBwYXNzdGhyb3VnaCB2YWx1ZXMgZm9yIGFuaW1hdGlvblxuICAgICAgLy8gdG8gd29yayBwcm9wZXJseS4gRm9yIGV4YW1wbGUsIGlmIGFuIGFuaW1hdGVkIGNvbXBvbmVudCBpc1xuICAgICAgLy8gdHJhbnNmb3JtZWQgYW5kIFByZXNzYWJsZSwgb25QcmVzcyB3aWxsIG5vdCB3b3JrIGFmdGVyIHRyYW5zZm9ybVxuICAgICAgLy8gd2l0aG91dCB0aGVzZSBwYXNzdGhyb3VnaCB2YWx1ZXMuXG4gICAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICAgIGNvbnN0IHtwYXNzdGhyb3VnaEFuaW1hdGVkUHJvcEV4cGxpY2l0VmFsdWVzLCBzdHlsZX0gPSByZWR1Y2VkUHJvcHM7XG4gICAgICBjb25zdCBwYXNzdGhyb3VnaFN0eWxlID0gcGFzc3Rocm91Z2hBbmltYXRlZFByb3BFeHBsaWNpdFZhbHVlcz8uc3R5bGU7XG4gICAgICBjb25zdCBtZXJnZWRTdHlsZSA9IHVzZU1lbW8oXG4gICAgICAgICgpID0+IGNvbXBvc2VTdHlsZXMoc3R5bGUsIHBhc3N0aHJvdWdoU3R5bGUpLFxuICAgICAgICBbcGFzc3Rocm91Z2hTdHlsZSwgc3R5bGVdLFxuICAgICAgKTtcblxuICAgICAgLy8gTk9URTogSXQgaXMgaW1wb3J0YW50IHRoYXQgYHBhc3N0aHJvdWdoQW5pbWF0ZWRQcm9wRXhwbGljaXRWYWx1ZXNgIGlzXG4gICAgICAvLyBzcHJlYWQgYWZ0ZXIgYHJlZHVjZWRQcm9wc2AgYnV0IGJlZm9yZSBgc3R5bGVgLlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPENvbXBvbmVudFxuICAgICAgICAgIHsuLi5yZWR1Y2VkUHJvcHN9XG4gICAgICAgICAgey4uLnBhc3N0aHJvdWdoQW5pbWF0ZWRQcm9wRXhwbGljaXRWYWx1ZXN9XG4gICAgICAgICAgc3R5bGU9e21lcmdlZFN0eWxlfVxuICAgICAgICAgIHJlZj17cmVmfVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICB9LFxuICApO1xuXG4gIEFuaW1hdGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gYEFuaW1hdGVkKCR7XG4gICAgQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8ICdBbm9ueW1vdXMnXG4gIH0pYDtcblxuICByZXR1cm4gQW5pbWF0ZWRDb21wb25lbnQ7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQVVBLElBQUFBLGNBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLEtBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLGFBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLGtCQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSSxNQUFBLEdBQUFDLHVCQUFBLENBQUFMLE9BQUE7QUFBK0IsSUFBQU0sS0FBQSxHQUFBRixNQUFBO0FBQUEsSUFBQUcsV0FBQSxHQUFBUCxPQUFBO0FBQUEsU0FBQUssd0JBQUFHLENBQUEsRUFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxNQUFBQyxDQUFB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