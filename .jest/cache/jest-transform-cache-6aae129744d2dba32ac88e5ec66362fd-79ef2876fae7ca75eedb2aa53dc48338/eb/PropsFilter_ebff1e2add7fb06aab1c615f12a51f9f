9cd3be8817052767b6a614bc69b99513
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PropsFilter = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _isSharedValue = require("../isSharedValue");
var _PlatformChecker = require("../PlatformChecker");
var _WorkletEventHandler = require("../WorkletEventHandler");
var _animation = require("../animation");
var _InlinePropManager = require("./InlinePropManager");
var _utils = require("./utils");
var _reactNative = require("react-native");
function dummyListener() {}
var PropsFilter = exports.PropsFilter = function () {
  function PropsFilter() {
    (0, _classCallCheck2.default)(this, PropsFilter);
    this._initialStyle = {};
  }
  return (0, _createClass2.default)(PropsFilter, [{
    key: "filterNonAnimatedProps",
    value: function filterNonAnimatedProps(component) {
      var _this = this;
      var inputProps = component.props;
      var props = {};
      var _loop = function _loop() {
        var value = inputProps[key];
        if (key === 'style') {
          var styleProp = inputProps.style;
          var styles = (0, _utils.flattenArray)(styleProp != null ? styleProp : []);
          var processedStyle = styles.map(function (style) {
            if (style && style.viewDescriptors) {
              if (component._isFirstRender) {
                _this._initialStyle = Object.assign({}, style.initial.value, _this._initialStyle, (0, _animation.initialUpdaterRun)(style.initial.updater));
              }
              return _this._initialStyle;
            } else if ((0, _InlinePropManager.hasInlineStyles)(style)) {
              return (0, _InlinePropManager.getInlineStyle)(style, component._isFirstRender);
            } else {
              return style;
            }
          });
          props[key] = _reactNative.StyleSheet.flatten(processedStyle);
        } else if (key === 'animatedProps') {
          var animatedProp = inputProps.animatedProps;
          if (animatedProp.initial !== undefined) {
            Object.keys(animatedProp.initial.value).forEach(function (initialValueKey) {
              var _animatedProp$initial;
              props[initialValueKey] = (_animatedProp$initial = animatedProp.initial) == null ? void 0 : _animatedProp$initial.value[initialValueKey];
            });
          }
        } else if ((0, _utils.has)('workletEventHandler', value) && value.workletEventHandler instanceof _WorkletEventHandler.WorkletEventHandler) {
          if (value.workletEventHandler.eventNames.length > 0) {
            value.workletEventHandler.eventNames.forEach(function (eventName) {
              props[eventName] = (0, _utils.has)('listeners', value.workletEventHandler) ? value.workletEventHandler.listeners[eventName] : dummyListener;
            });
          } else {
            props[key] = dummyListener;
          }
        } else if ((0, _isSharedValue.isSharedValue)(value)) {
          if (component._isFirstRender) {
            props[key] = value.value;
          }
        } else if (key !== 'onGestureHandlerStateChange' || !(0, _PlatformChecker.isChromeDebugger)()) {
          props[key] = value;
        }
      };
      for (var key in inputProps) {
        _loop();
      }
      return props;
    }
  }]);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,