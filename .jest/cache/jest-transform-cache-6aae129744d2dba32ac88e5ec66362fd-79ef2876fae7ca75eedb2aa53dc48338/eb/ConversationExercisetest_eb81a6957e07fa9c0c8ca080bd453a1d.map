{"version":3,"names":["_getJestObj","mock","router","push","jest","fn","__esModule","default","saveActivity","getConversationData","getLevelColor","_interopRequireDefault","require","_react","_reactNative","_conversations","_useConversation","_useLastActivity","_expoRouter","_jsxRuntime","_require","describe","mockRoute","params","level","mockSaveActivity","createMockConversationState","overrides","arguments","length","undefined","Object","assign","loaded","hasValidData","currentScenario","title","description","conversation","sender","text","suggestions","message","isTyping","stats","completionProgress","currentStep","totalSteps","isConversationStarted","changeScenario","sendMessage","useSuggestion","toggleHelp","toggleDetailedProgress","setMessage","beforeEach","clearAllMocks","useLastActivity","mockReturnValue","test","useConversation","_render","render","jsx","route","queryByText","expect","toBeNull","_render2","getByTestId","header","props","toBe","toHaveBeenCalledTimes","toHaveBeenCalledWith","type","metadata","any","not","toHaveBeenCalled","mockConversationState","_render3","fireEvent","pathname","_render4","selector","_render5","input","_render6"],"sources":["ConversationExercise.test.js"],"sourcesContent":["import React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport ConversationExercise from '../../../../src/screens/exercises/conversations';\n\n// =================================================================\n// MOCKS SETUP\n// =================================================================\n\n// Mock expo-router for navigation\njest.mock('expo-router', () => ({\n  router: {\n    push: jest.fn(),\n  },\n}));\n\n// Mock the core useConversation hook\njest.mock('../../../../src/screens/exercises/conversations/hooks/useConversation');\n\n// Mock other hooks and utils\njest.mock('../../../../src/hooks/useLastActivity', () => ({\n  __esModule: true,\n  default: () => ({\n    saveActivity: jest.fn(),\n  }),\n}));\njest.mock('../../../../src/utils/conversation/conversationDataHelper', () => ({\n  getConversationData: jest.fn(),\n  getLevelColor: jest.fn(() => '#0000FF'), // Return a consistent color for tests\n}));\n\n// Mock child components to isolate the ConversationExercise component\n// This prevents issues with their internal logic and focuses tests on the main component\njest.mock('../../../../src/screens/exercises/conversations/ConversationHeader', () => 'ConversationHeader');\njest.mock('../../../../src/screens/exercises/conversations/ConversationSelector', () => 'ConversationSelector');\njest.mock('../../../../src/screens/exercises/conversations/ConversationProgress', () => 'ConversationProgress');\njest.mock('../../../../src/screens/exercises/conversations/ConversationScenarioDescription', () => 'ConversationScenarioDescription');\njest.mock('../../../../src/screens/exercises/conversations/ConversationMessageList', () => 'ConversationMessageList');\njest.mock('../../../../src/screens/exercises/conversations/ConversationSuggestions', () => 'ConversationSuggestions');\njest.mock('../../../../src/screens/exercises/conversations/ConversationInput', () => 'ConversationInput');\n\n\n// Import the mocked hooks to control their behavior\nimport useConversation from '../../../../src/screens/exercises/conversations/hooks/useConversation';\nimport useLastActivity from '../../../../src/hooks/useLastActivity';\nimport { router } from 'expo-router';\n\n// =================================================================\n// TEST SUITE\n// =================================================================\n\ndescribe('ConversationExercise', () => {\n  const mockRoute = { params: { level: 'A1' } };\n  let mockSaveActivity;\n\n  // Helper function to create a default mock state for useConversation\n  const createMockConversationState = (overrides = {}) => ({\n    loaded: true,\n    hasValidData: true,\n    currentScenario: {\n      title: 'Scenario de Test',\n      description: 'Description du scenario.',\n    },\n    conversation: [{ sender: 'bot', text: 'Hello!' }],\n    suggestions: ['Hi', 'Hello there'],\n    message: '',\n    isTyping: false,\n    stats: { completionProgress: 50, currentStep: 1, totalSteps: 2 },\n    isConversationStarted: true,\n    // Mock functions\n    changeScenario: jest.fn(),\n    sendMessage: jest.fn(),\n    useSuggestion: jest.fn(),\n    toggleHelp: jest.fn(),\n    toggleDetailedProgress: jest.fn(),\n    setMessage: jest.fn(),\n    ...overrides,\n  });\n\n  beforeEach(() => {\n    // Reset all mocks before each test\n    jest.clearAllMocks();\n    \n    // Setup the mock for useLastActivity\n    mockSaveActivity = jest.fn();\n    useLastActivity.mockReturnValue({ saveActivity: mockSaveActivity });\n  });\n\n  // --- Test Scenarios ---\n\n  test('should render loading state correctly', () => {\n    useConversation.mockReturnValue(createMockConversationState({ loaded: false }));\n    const { queryByText } = render(<ConversationExercise route={mockRoute} />);\n    \n    // In loading state, the main content should not be visible\n    expect(queryByText('Scenario de Test')).toBeNull();\n  });\n\n  test('should render main content when data is loaded', () => {\n    useConversation.mockReturnValue(createMockConversationState());\n    const { getByTestId } = render(<ConversationExercise route={mockRoute} />);\n\n    // Check if child components are rendered with correct props\n    // Note: We use testID to find mocked components\n    const header = getByTestId('ConversationHeader');\n    expect(header.props.level).toBe('A1');\n    \n    const description = getByTestId('ConversationScenarioDescription');\n    expect(description.props.description).toBe('Description du scenario.');\n  });\n\n  test('should call saveActivity on mount if conversation has started', () => {\n    useConversation.mockReturnValue(createMockConversationState({ isConversationStarted: true }));\n    render(<ConversationExercise route={mockRoute} />);\n    \n    expect(mockSaveActivity).toHaveBeenCalledTimes(1);\n    expect(mockSaveActivity).toHaveBeenCalledWith({\n      title: 'Conversations',\n      level: 'A1',\n      type: 'conversations',\n      metadata: expect.any(Object),\n    });\n  });\n\n  test('should NOT call saveActivity on mount if conversation has not started', () => {\n    useConversation.mockReturnValue(createMockConversationState({ isConversationStarted: false }));\n    render(<ConversationExercise route={mockRoute} />);\n    \n    expect(mockSaveActivity).not.toHaveBeenCalled();\n  });\n\n  test('should handle back press correctly', () => {\n    const mockConversationState = createMockConversationState();\n    useConversation.mockReturnValue(mockConversationState);\n    const { getByTestId } = render(<ConversationExercise route={mockRoute} />);\n\n    const header = getByTestId('ConversationHeader');\n    fireEvent(header, 'onBackPress'); // Custom event for mocked component\n\n    expect(router.push).toHaveBeenCalledWith({\n      pathname: '/tabs/exerciseSelection',\n      params: { level: 'A1' },\n    });\n  });\n\n  test('should handle scenario change correctly', () => {\n    const mockConversationState = createMockConversationState();\n    useConversation.mockReturnValue(mockConversationState);\n    const { getByTestId } = render(<ConversationExercise route={mockRoute} />);\n\n    const selector = getByTestId('ConversationSelector');\n    fireEvent(selector, 'onSelectScenario', 1); // Simulate selecting the second scenario (index 1)\n\n    expect(mockConversationState.changeScenario).toHaveBeenCalledWith(1);\n  });\n\n  test('should handle sending a message correctly', () => {\n    const mockConversationState = createMockConversationState();\n    useConversation.mockReturnValue(mockConversationState);\n    const { getByTestId } = render(<ConversationExercise route={mockRoute} />);\n\n    const input = getByTestId('ConversationInput');\n    fireEvent(input, 'onSendMessage');\n\n    expect(mockConversationState.sendMessage).toHaveBeenCalledTimes(1);\n  });\n\n  test('should handle using a suggestion correctly', () => {\n    const mockConversationState = createMockConversationState();\n    useConversation.mockReturnValue(mockConversationState);\n    const { getByTestId } = render(<ConversationExercise route={mockRoute} />);\n\n    const suggestions = getByTestId('ConversationSuggestions');\n    fireEvent(suggestions, 'onPressSuggestion', 'Hi');\n\n    expect(mockConversationState.useSuggestion).toHaveBeenCalledWith('Hi');\n  });\n});"],"mappings":"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","ignoreList":[]}