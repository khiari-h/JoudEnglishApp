{"version":3,"names":["useState","useEffect","useCallback","useRef","useMemo","Alert","AsyncStorage","cov_2pfwkqnajt","s","useGrammar","_currentRule$exercise3","grammarData","arguments","length","undefined","b","level","f","_ref","_ref2","_slicedToArray","ruleIndex","setRuleIndex","_ref3","_ref4","exerciseIndex","setExerciseIndex","_ref5","_ref6","selectedOption","setSelectedOption","_ref7","_ref8","inputText","setInputText","_ref9","_ref0","showFeedback","setShowFeedback","_ref1","_ref10","isCorrect","setIsCorrect","_ref11","_ref12","attempts","setAttempts","_ref13","_ref14","completedExercises","setCompletedExercises","_ref15","_ref16","loaded","setLoaded","_ref17","_ref18","showDetailedProgress","setShowDetailedProgress","saveDataTimeoutRef","STORAGE_KEY","currentRule","title","explanation","examples","exercises","currentExercise","_currentRule$exercise","totalRules","totalExercises","_currentRule$exercise2","loadData","_ref19","_asyncToGenerator","saved","getItem","_ref20","JSON","parse","savedCompleted","lastPosition","error","apply","saveDataToStorage","_ref21","dataToSave","setItem","stringify","_x","current","clearTimeout","setTimeout","checkAnswer","userAnswer","correctAnswer","cleanUserAnswer","toString","trim","toLowerCase","cleanCorrectAnswer","correct","includes","alternatives","split","map","alt","some","expandedAlt","replace","expandedCorrect","resetExerciseState","changeRule","newRuleIndex","submitAnswer","type","options","answer","prev","ruleCompleted","Object","assign","_defineProperty","concat","_toConsumableArray","nextExercise","isLastExercise","isLastRule","alert","text","style","previousExercise","retryExercise","toggleDetailedProgress","progress","_completedExercises$r","completedInCurrentRule","progressPercent","totalExercisesAllRules","reduce","sum","rule","_rule$exercises","totalCompletedExercises","values","completed","overallProgress","overall","completedInCurrent","totalInCurrent","completedOverall","totalOverall","canCheckAnswer","isFirstExercise","isExerciseCompleted","_completedExercises$r2"],"sources":["useGrammar.js"],"sourcesContent":["// hooks/useGrammar.js - VERSION FINALE SANS BOUCLE INFINIE\nimport { useState, useEffect, useCallback, useRef, useMemo } from 'react';\nimport { Alert } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n/**\n * ðŸŽ¯ Hook unifiÃ© pour Grammar Exercise - VERSION FINALE CORRIGÃ‰E\n * âœ… Suppression complÃ¨te des boucles infinies\n * âœ… Sauvegarde simplifiÃ©e et optimisÃ©e\n * âœ… Performance maximale\n */\nconst useGrammar = (grammarData = [], level = \"A1\") => {\n  \n  // =================== CORE STATE ===================\n  const [ruleIndex, setRuleIndex] = useState(0);\n  const [exerciseIndex, setExerciseIndex] = useState(0);\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [inputText, setInputText] = useState(\"\");\n  const [showFeedback, setShowFeedback] = useState(false);\n  const [isCorrect, setIsCorrect] = useState(false);\n  const [attempts, setAttempts] = useState(0);\n  const [completedExercises, setCompletedExercises] = useState({});\n  const [loaded, setLoaded] = useState(false);\n  const [showDetailedProgress, setShowDetailedProgress] = useState(false);\n\n  // =================== REFS ===================\n  const saveDataTimeoutRef = useRef(null);\n  const STORAGE_KEY = `grammar_${level}`;\n\n  // =================== COMPUTED VALUES MEMOIZED ===================\n  const currentRule = useMemo(() => {\n    return grammarData[ruleIndex] || { title: \"\", explanation: \"\", examples: [], exercises: [] };\n  }, [grammarData, ruleIndex]);\n\n  const currentExercise = useMemo(() => {\n    return currentRule.exercises?.[exerciseIndex] || null;\n  }, [currentRule.exercises, exerciseIndex]);\n\n  const totalRules = useMemo(() => grammarData.length, [grammarData.length]);\n  const totalExercises = useMemo(() => currentRule.exercises?.length || 0, [currentRule.exercises?.length]);\n  \n  // =================== PERSISTENCE SIMPLIFIÃ‰E ===================\n  \n  // Load data from storage (une seule fois)\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const saved = await AsyncStorage.getItem(STORAGE_KEY);\n        if (saved) {\n          const { completedExercises: savedCompleted, lastPosition } = JSON.parse(saved);\n          setCompletedExercises(savedCompleted || {});\n          if (lastPosition) {\n            setRuleIndex(lastPosition.ruleIndex || 0);\n            setExerciseIndex(lastPosition.exerciseIndex || 0);\n          }\n        }\n      } catch (error) {\n        // Ignored on purpose\n      } finally {\n        setLoaded(true);\n      }\n    };\n    loadData();\n  }, [STORAGE_KEY]); // âœ… CORRIGÃ‰ : Seulement STORAGE_KEY\n\n  // âœ… CORRECTION MAJEURE : Sauvegarde simplifiÃ©e sans boucle\n  const saveDataToStorage = useCallback(async (dataToSave) => {\n    try {\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(dataToSave));\n    } catch (error) {\n      // Ignored on purpose\n    }\n  }, [STORAGE_KEY]);\n\n  // âœ… CORRECTION : useEffect sÃ©parÃ© pour sauvegarde avec debounce appropriÃ©\n  useEffect(() => {\n    if (!loaded) return; // Ne pas sauvegarder avant le chargement\n    \n    // Clear previous timeout\n    if (saveDataTimeoutRef.current) {\n      clearTimeout(saveDataTimeoutRef.current);\n    }\n    \n    // Set new timeout for debounced save\n    saveDataTimeoutRef.current = setTimeout(() => {\n      const dataToSave = {\n        completedExercises,\n        lastPosition: {\n          ruleIndex,\n          exerciseIndex\n        }\n      };\n      saveDataToStorage(dataToSave);\n    }, 500); // AugmentÃ© Ã  500ms pour plus de stabilitÃ©\n\n    // Cleanup timeout\n    return () => {\n      if (saveDataTimeoutRef.current) {\n        clearTimeout(saveDataTimeoutRef.current);\n      }\n      // Suppression du return null (aucun return attendu)\n    };\n  }, [completedExercises, ruleIndex, exerciseIndex, loaded, saveDataToStorage]);\n\n  // =================== ANSWER CHECKING ===================\n  const checkAnswer = useCallback((userAnswer, correctAnswer) => {\n    // Clean answers\n    const cleanUserAnswer = (userAnswer || \"\").toString().trim().toLowerCase();\n    const cleanCorrectAnswer = (correctAnswer || \"\").toString().trim().toLowerCase();\n\n    let correct = false;\n\n    // Check for alternatives (separated by /)\n    if (cleanCorrectAnswer.includes(\"/\")) {\n      const alternatives = cleanCorrectAnswer.split(\"/\").map(alt => alt.trim().toLowerCase());\n      correct = alternatives.some(alt => {\n        // Exact match\n        if (cleanUserAnswer === alt) return true;\n        \n        // Handle contractions\n        if (alt.includes(\"'\")) {\n          const expandedAlt = alt\n            .replace(\"'re\", \" are\")\n            .replace(\"'m\", \" am\")\n            .replace(\"'s\", \" is\")\n            .replace(\"n't\", \" not\")\n            .replace(\"'ve\", \" have\")\n            .replace(\"'ll\", \" will\")\n            .replace(\"'d\", \" would\");\n          if (cleanUserAnswer === expandedAlt) return true;\n        }\n        \n        return false;\n      });\n    } else {\n      // Basic comparison\n      correct = cleanUserAnswer === cleanCorrectAnswer;\n      \n      // Try with contractions handling\n      if (!correct && cleanCorrectAnswer.includes(\"'\")) {\n        const expandedCorrect = cleanCorrectAnswer\n          .replace(\"'re\", \" are\")\n          .replace(\"'m\", \" am\")\n          .replace(\"'s\", \" is\")\n          .replace(\"n't\", \" not\")\n          .replace(\"'ve\", \" have\")\n          .replace(\"'ll\", \" will\")\n          .replace(\"'d\", \" would\");\n        correct = cleanUserAnswer === expandedCorrect;\n      }\n    }\n\n    return correct;\n  }, []);\n\n  // =================== EXERCISE ACTIONS ===================\n  const resetExerciseState = useCallback(() => {\n    setSelectedOption(null);\n    setInputText(\"\");\n    setShowFeedback(false);\n    setIsCorrect(false);\n    setAttempts(0);\n  }, []);\n\n  const changeRule = useCallback((newRuleIndex) => {\n    setRuleIndex(newRuleIndex);\n    setExerciseIndex(0);\n    resetExerciseState();\n  }, [resetExerciseState]);\n\n  const submitAnswer = useCallback(() => {\n    if (!currentExercise) return false;\n\n    let userAnswer = \"\";\n    let correctAnswer = \"\";\n\n    if (currentExercise.type === \"fillInTheBlank\" && currentExercise.options) {\n      userAnswer = selectedOption !== null ? currentExercise.options[selectedOption] : \"\";\n      correctAnswer = typeof currentExercise.answer === \"number\"\n        ? currentExercise.options[currentExercise.answer]\n        : currentExercise.answer;\n    } else {\n      userAnswer = inputText.trim();\n      correctAnswer = currentExercise.answer;\n    }\n\n    const correct = checkAnswer(userAnswer, correctAnswer);\n    \n    setIsCorrect(correct);\n    setAttempts(prev => prev + 1);\n    setShowFeedback(true);\n\n    // Mark as completed if correct\n    if (correct) {\n      setCompletedExercises(prev => {\n        const ruleCompleted = prev[ruleIndex] || [];\n        if (!ruleCompleted.includes(exerciseIndex)) {\n          return {\n            ...prev,\n            [ruleIndex]: [...ruleCompleted, exerciseIndex]\n          };\n        }\n        return prev;\n      });\n    }\n\n    return correct;\n  }, [currentExercise, selectedOption, inputText, ruleIndex, exerciseIndex, checkAnswer]);\n\n  const nextExercise = useCallback(() => {\n    const isLastExercise = exerciseIndex === totalExercises - 1;\n    const isLastRule = ruleIndex === totalRules - 1;\n\n    if (isLastExercise && isLastRule) {\n      Alert.alert(\n        \"ðŸŽ‰ FÃ©licitations !\",\n        \"Vous avez terminÃ© tous les exercices de grammaire !\",\n        [{ text: \"Super !\", style: \"default\" }]\n      );\n      return false;\n    } else if (isLastExercise) {\n      // Next rule\n      changeRule(ruleIndex + 1);\n    } else {\n      // Next exercise\n      setExerciseIndex(prev => prev + 1);\n      resetExerciseState();\n    }\n    \n    return true;\n  }, [exerciseIndex, totalExercises, ruleIndex, totalRules, changeRule, resetExerciseState]);\n\n  const previousExercise = useCallback(() => {\n    if (exerciseIndex > 0) {\n      setExerciseIndex(prev => prev - 1);\n      resetExerciseState();\n      return true;\n    }\n    return false;\n  }, [exerciseIndex, resetExerciseState]);\n\n  const retryExercise = useCallback(() => {\n    resetExerciseState();\n  }, [resetExerciseState]);\n\n  const toggleDetailedProgress = useCallback(() => {\n    setShowDetailedProgress(prev => !prev);\n  }, []);\n\n  // =================== COMPUTED PROGRESS MEMOIZED ===================\n  const progress = useMemo(() => {\n    const completedInCurrentRule = completedExercises[ruleIndex]?.length || 0;\n    const progressPercent = totalExercises > 0 ? (completedInCurrentRule / totalExercises) * 100 : 0;\n    \n    const totalExercisesAllRules = grammarData.reduce((sum, rule) => sum + (rule.exercises?.length || 0), 0);\n    const totalCompletedExercises = Object.values(completedExercises).reduce((sum, completed) => sum + (completed?.length || 0), 0);\n    const overallProgress = totalExercisesAllRules > 0 ? (totalCompletedExercises / totalExercisesAllRules) * 100 : 0;\n\n    return {\n      currentRule: progressPercent,\n      overall: overallProgress,\n      completedInCurrent: completedInCurrentRule,\n      totalInCurrent: totalExercises,\n      completedOverall: totalCompletedExercises,\n      totalOverall: totalExercisesAllRules\n    };\n  }, [completedExercises, ruleIndex, totalExercises, grammarData]);\n\n  // =================== VALIDATION MEMOIZED ===================\n  const canCheckAnswer = useMemo(() => {\n    if (!currentExercise) return false;\n    \n    if (currentExercise.type === \"fillInTheBlank\" && currentExercise.options) {\n      return selectedOption !== null;\n    } else {\n      return inputText.trim() !== \"\";\n    }\n  }, [currentExercise, selectedOption, inputText]);\n\n  const isFirstExercise = exerciseIndex === 0;\n  const isLastExercise = exerciseIndex === totalExercises - 1;\n  const isExerciseCompleted = useMemo(() => {\n    return completedExercises[ruleIndex]?.includes(exerciseIndex) || false;\n  }, [completedExercises, ruleIndex, exerciseIndex]);\n\n  return {\n    // State\n    ruleIndex,\n    exerciseIndex,\n    selectedOption,\n    setSelectedOption,\n    inputText,\n    setInputText,\n    showFeedback,\n    isCorrect,\n    attempts,\n    completedExercises,\n    loaded,\n    showDetailedProgress,\n    \n    // Data (memoized)\n    currentRule,\n    currentExercise,\n    totalRules,\n    totalExercises,\n    \n    // Actions\n    changeRule,\n    submitAnswer,\n    nextExercise,\n    previousExercise,\n    retryExercise,\n    resetExerciseState,\n    toggleDetailedProgress,\n    \n    // Computed (memoized)\n    canCheckAnswer,\n    isFirstExercise,\n    isLastExercise,\n    isExerciseCompleted,\n    progress,\n  };\n};\n\nexport default useGrammar;"],"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","ignoreList":[]}