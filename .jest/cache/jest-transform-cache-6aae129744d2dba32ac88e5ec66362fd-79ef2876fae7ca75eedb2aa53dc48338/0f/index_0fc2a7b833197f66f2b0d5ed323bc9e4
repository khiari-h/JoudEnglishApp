192dd2d791c32f5c1a8a3fe78501a597
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.areEqual = areEqual;
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _expoLinearGradient = require("expo-linear-gradient");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var CategorySelector = function CategorySelector(_ref) {
  var _ref$categories = _ref.categories,
    categories = _ref$categories === void 0 ? [] : _ref$categories,
    selectedCategory = _ref.selectedCategory,
    onSelectCategory = _ref.onSelectCategory,
    _ref$primaryColor = _ref.primaryColor,
    primaryColor = _ref$primaryColor === void 0 ? "#5E60CE" : _ref$primaryColor;
  var styles = (0, _style.default)(primaryColor);
  var _useState = (0, _react.useState)(function () {
      return categories.reduce(function (acc, category) {
        acc[category.id] = new _reactNative.Animated.Value(selectedCategory === category.id ? 1 : 0);
        return acc;
      }, {});
    }),
    _useState2 = (0, _slicedToArray2.default)(_useState, 1),
    animations = _useState2[0];
  var isAnimatingRef = (0, _react.useRef)(false);
  var _useState3 = (0, _react.useState)(selectedCategory),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    prevSelectedCategory = _useState4[0],
    setPrevSelectedCategory = _useState4[1];
  var triggerAnimation = (0, _react.useCallback)(function (fromCategory, toCategory) {
    if (isAnimatingRef.current) return;
    isAnimatingRef.current = true;
    var animations_array = [];
    if (fromCategory !== undefined && animations[fromCategory]) {
      animations_array.push(_reactNative.Animated.timing(animations[fromCategory], {
        toValue: 0,
        duration: 200,
        useNativeDriver: false
      }));
    }
    if (toCategory !== undefined && animations[toCategory]) {
      animations_array.push(_reactNative.Animated.timing(animations[toCategory], {
        toValue: 1,
        duration: 300,
        useNativeDriver: false
      }));
    }
    if (animations_array.length > 0) {
      _reactNative.Animated.parallel(animations_array).start(function () {
        isAnimatingRef.current = false;
      });
    } else {
      isAnimatingRef.current = false;
    }
  }, [animations]);
  (0, _react.useEffect)(function () {
    if (prevSelectedCategory !== selectedCategory) {
      triggerAnimation(prevSelectedCategory, selectedCategory);
      setPrevSelectedCategory(selectedCategory);
    }
  }, [selectedCategory, prevSelectedCategory, triggerAnimation]);
  var handleCategoryPress = (0, _react.useCallback)(function (categoryId) {
    if (categoryId !== selectedCategory && !isAnimatingRef.current) {
      onSelectCategory(categoryId);
    }
  }, [selectedCategory, onSelectCategory]);
  var createPressHandler = (0, _react.useCallback)(function (categoryId) {
    return function () {
      return handleCategoryPress(categoryId);
    };
  }, [handleCategoryPress]);
  var renderCategoryPill = function renderCategoryPill(category) {
    var isSelected = selectedCategory === category.id;
    var animation = animations[category.id] || new _reactNative.Animated.Value(0);
    var scale = animation.interpolate({
      inputRange: [0, 1],
      outputRange: [1, 1.05]
    });
    var shadowOpacity = animation.interpolate({
      inputRange: [0, 1],
      outputRange: [0.1, 0.25]
    });
    var borderWidth = animation.interpolate({
      inputRange: [0, 1],
      outputRange: [1, 2]
    });
    return (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
      style: [styles.categoryItemWrapper, {
        transform: [{
          scale: scale
        }]
      }],
      children: (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: styles.categoryTouchable,
        onPress: createPressHandler(category.id),
        activeOpacity: 0.8,
        accessibilityRole: "button",
        accessibilityLabel: String(category.name),
        accessibilityState: {
          selected: isSelected
        },
        children: isSelected ? (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
          colors: [primaryColor, `${primaryColor}E6`, `${primaryColor}CC`],
          start: {
            x: 0,
            y: 0
          },
          end: {
            x: 1,
            y: 1
          },
          style: styles.selectedCategoryItem,
          children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.selectedInner,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.selectedCategoryText,
              children: category.name
            }), (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: styles.sparkleContainer,
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.sparkle,
                children: "\u2728"
              })
            })]
          })
        }) : (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
          style: [styles.categoryItem, {
            borderWidth: borderWidth,
            borderColor: `${primaryColor}20`,
            shadowOpacity: shadowOpacity
          }],
          children: (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [styles.categoryInner, {
              backgroundColor: `${primaryColor}08`
            }],
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: [styles.categoryText, {
                color: primaryColor
              }],
              children: category.name
            })
          })
        })
      })
    }, category.id);
  };
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: styles.container,
    children: (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
      colors: [`${primaryColor}04`, 'transparent', `${primaryColor}02`],
      start: {
        x: 0,
        y: 0
      },
      end: {
        x: 1,
        y: 0
      },
      style: styles.backgroundGradient,
      children: (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
        horizontal: true,
        showsHorizontalScrollIndicator: false,
        contentContainerStyle: styles.scrollContent,
        style: styles.scrollView,
        children: categories.map(function (category) {
          return renderCategoryPill(category);
        })
      })
    })
  });
};
CategorySelector.propTypes = {
  categories: _propTypes.default.arrayOf(_propTypes.default.shape({
    id: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]).isRequired,
    name: _propTypes.default.string.isRequired
  })).isRequired,
  selectedCategory: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  onSelectCategory: _propTypes.default.func.isRequired,
  primaryColor: _propTypes.default.string
};
function areEqual(prevProps, nextProps) {
  return prevProps.selectedCategory === nextProps.selectedCategory && prevProps.primaryColor === nextProps.primaryColor && prevProps.categories === nextProps.categories;
}
var _default = exports.default = (0, _react.memo)(CategorySelector, areEqual);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,