2e0a73e0f5f8b7fa7b9dc937f644a24f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _expoRouter = require("expo-router");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _ThemeContext = require("../../../../contexts/ThemeContext");
var _constants = require("../../../../utils/constants");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var QuickActions = function QuickActions(_ref) {
  var _ref$currentLevel = _ref.currentLevel,
    currentLevel = _ref$currentLevel === void 0 ? "1" : _ref$currentLevel;
  var themeContext = (0, _react.useContext)(_ThemeContext.ThemeContext);
  var colors = (themeContext == null ? void 0 : themeContext.colors) || {
    surface: "#FFFFFF",
    text: "#1F2937",
    textSecondary: "#6B7280"
  };
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    totalWords = _useState2[0],
    setTotalWords = _useState2[1];
  var _useState3 = (0, _react.useState)(true),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isLoading = _useState4[0],
    setIsLoading = _useState4[1];
  var countWordsLearned = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      try {
        var total = 0;
        var levels = ['1', '2', '3', '4', '5', '6', 'bonus'];
        var modes = ['classic', 'fast'];
        for (var level of levels) {
          for (var mode of modes) {
            var stored = yield _asyncStorage.default.getItem(`vocabulary_${level}_${mode}`);
            if (stored) {
              var data = JSON.parse(stored);
              var completedWords = data.completedWords || {};
              total += Object.values(completedWords).reduce(function (sum, words) {
                return sum + (Array.isArray(words) ? words.length : 0);
              }, 0);
            }
          }
        }
        return total;
      } catch (error) {
        return 0;
      }
    });
    return function countWordsLearned() {
      return _ref2.apply(this, arguments);
    };
  }();
  (0, _react.useEffect)(function () {
    var loadData = function () {
      var _ref3 = (0, _asyncToGenerator2.default)(function* () {
        var count = yield countWordsLearned();
        setTotalWords(count);
        setIsLoading(false);
      });
      return function loadData() {
        return _ref3.apply(this, arguments);
      };
    }();
    loadData();
  }, [currentLevel]);
  var navigateToVocabulary = function navigateToVocabulary() {
    _expoRouter.router.push({
      pathname: _constants.EXERCISES.vocabulary.route,
      params: {
        level: currentLevel,
        mode: "classic"
      }
    });
  };
  var navigateToRevision = function navigateToRevision() {
    if (totalWords < 10) {
      _reactNative.Alert.alert("RÃ©vision", "Apprenez au moins 10 mots avant de rÃ©viser.", [{
        text: "OK"
      }]);
      return;
    }
    _expoRouter.router.push({
      pathname: "/tabs/vocabularyRevision",
      params: {
        level: currentLevel,
        questionsCount: Math.min(10, totalWords),
        source: 'manual'
      }
    });
  };
  var navigateToTest = function navigateToTest() {
    _expoRouter.router.push({
      pathname: _constants.EXERCISES.assessment.route,
      params: {
        level: currentLevel
      }
    });
  };
  var actions = [{
    id: 'vocabulary',
    icon: _constants.EXERCISES.vocabulary.icon,
    label: _constants.EXERCISES.vocabulary.title,
    subtitle: 'Apprendre de nouveaux mots',
    action: navigateToVocabulary,
    color: _constants.EXERCISES.vocabulary.color
  }, {
    id: 'revision',
    icon: 'ðŸ”„',
    label: 'RÃ©vision',
    subtitle: totalWords >= 10 ? `${totalWords} mots disponibles` : 'Apprenez plus de mots',
    action: navigateToRevision,
    color: totalWords >= 10 ? '#8B5CF6' : '#6B7280',
    disabled: totalWords < 10
  }, {
    id: 'test',
    icon: _constants.EXERCISES.assessment.icon,
    label: _constants.EXERCISES.assessment.title,
    subtitle: 'Ã‰valuer vos connaissances',
    action: navigateToTest,
    color: _constants.EXERCISES.assessment.color
  }];
  if (isLoading) {
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: _style.default.container,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        testID: "quick-actions-title",
        style: [_style.default.sectionTitle, {
          color: colors.text
        }],
        children: "\u26A1 Actions rapides"
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [_style.default.loadingText, {
          color: colors.textSecondary
        }],
        children: "Chargement..."
      })]
    });
  }
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: _style.default.container,
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      testID: "quick-actions-title",
      style: [_style.default.sectionTitle, {
        color: colors.text
      }],
      children: "\u26A1 Actions rapides"
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.actionsGrid,
      children: actions.map(function (action) {
        return (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
          style: [_style.default.actionButton, {
            backgroundColor: colors.surface
          }, action.disabled && _style.default.actionButtonDisabled],
          onPress: action.action,
          activeOpacity: 0.7,
          disabled: action.disabled,
          accessibilityRole: "button",
          accessibilityLabel: `${action.label} â€“ ${action.subtitle}`,
          accessibilityState: {
            disabled: !!action.disabled
          },
          children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [_style.default.actionIcon, {
              backgroundColor: `${action.color}15`
            }],
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: _style.default.actionIconText,
              children: action.icon
            })
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: _style.default.actionContent,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: [_style.default.actionLabel, {
                color: colors.text
              }],
              children: action.label
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: [_style.default.actionSubtitle, {
                color: colors.textSecondary
              }],
              children: action.subtitle
            })]
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [_style.default.arrow, {
              color: colors.textSecondary
            }],
            children: "\u2192"
          })]
        }, action.id);
      })
    })]
  });
};
QuickActions.propTypes = {
  currentLevel: _propTypes.default.string.isRequired
};
var _default = exports.default = QuickActions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,