0fc1662823080162b5fcaad06e926556
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _expoLinearGradient = require("expo-linear-gradient");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var SpellingProgress = function SpellingProgress(_ref) {
  var _ref$exercises = _ref.exercises,
    exercises = _ref$exercises === void 0 ? [] : _ref$exercises,
    _ref$completedExercis = _ref.completedExercises,
    completedExercises = _ref$completedExercis === void 0 ? [] : _ref$completedExercis,
    _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? "#3b82f6" : _ref$levelColor;
  var styles = (0, _style.default)(levelColor);
  var progressData = (0, _reactNative.useMemo)(function () {
    var totalExercises = exercises.length;
    var completedCount = completedExercises.length;
    var progress = totalExercises > 0 ? Math.round(completedCount / totalExercises * 100) : 0;
    return {
      totalExercises: totalExercises,
      completedCount: completedCount,
      progress: progress
    };
  }, [exercises, completedExercises]);
  var totalExercises = progressData.totalExercises,
    completedCount = progressData.completedCount,
    progress = progressData.progress;
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: styles.container,
    children: (0, _jsxRuntime.jsxs)(_expoLinearGradient.LinearGradient, {
      colors: [`${levelColor}08`, `${levelColor}04`, 'transparent'],
      start: {
        x: 0,
        y: 0
      },
      end: {
        x: 1,
        y: 1
      },
      style: styles.gradient,
      children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.header,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.title,
          children: "Progression"
        }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: [styles.stats, {
            color: levelColor
          }],
          children: [completedCount, "/", totalExercises, " exercices"]
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.progressBarContainer,
        children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [styles.progressBarTrack, {
            backgroundColor: `${levelColor}20`
          }],
          children: (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [styles.progressBarFill, {
              backgroundColor: levelColor,
              width: `${progress}%`
            }]
          })
        }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: [styles.percentage, {
            color: levelColor
          }],
          children: [progress, "%"]
        })]
      })]
    })
  });
};
var _default = exports.default = SpellingProgress;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX2V4cG9MaW5lYXJHcmFkaWVudCIsIl9zdHlsZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfanN4UnVudGltZSIsIlNwZWxsaW5nUHJvZ3Jlc3MiLCJfcmVmIiwiX3JlZiRleGVyY2lzZXMiLCJleGVyY2lzZXMiLCJfcmVmJGNvbXBsZXRlZEV4ZXJjaXMiLCJjb21wbGV0ZWRFeGVyY2lzZXMiLCJfcmVmJGxldmVsQ29sb3IiLCJsZXZlbENvbG9yIiwic3R5bGVzIiwiY3JlYXRlU3R5bGVzIiwicHJvZ3Jlc3NEYXRhIiwidXNlTWVtbyIsInRvdGFsRXhlcmNpc2VzIiwibGVuZ3RoIiwiY29tcGxldGVkQ291bnQiLCJwcm9ncmVzcyIsIk1hdGgiLCJyb3VuZCIsImpzeCIsIlZpZXciLCJzdHlsZSIsImNvbnRhaW5lciIsImNoaWxkcmVuIiwianN4cyIsIkxpbmVhckdyYWRpZW50IiwiY29sb3JzIiwic3RhcnQiLCJ4IiwieSIsImVuZCIsImdyYWRpZW50IiwiaGVhZGVyIiwiVGV4dCIsInRpdGxlIiwic3RhdHMiLCJjb2xvciIsInByb2dyZXNzQmFyQ29udGFpbmVyIiwicHJvZ3Jlc3NCYXJUcmFjayIsImJhY2tncm91bmRDb2xvciIsInByb2dyZXNzQmFyRmlsbCIsIndpZHRoIiwicGVyY2VudGFnZSIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTcGVsbGluZ1Byb2dyZXNzL2luZGV4LmpzIC0gVkVSU0lPTiBVTFRSQS1TSU1QTEVcclxuXHJcbmltcG9ydCB7IFZpZXcsIFRleHQsIHVzZU1lbW8gfSBmcm9tIFwicmVhY3QtbmF0aXZlXCI7XHJcbmltcG9ydCB7IExpbmVhckdyYWRpZW50IH0gZnJvbSBcImV4cG8tbGluZWFyLWdyYWRpZW50XCI7XHJcbmltcG9ydCBjcmVhdGVTdHlsZXMgZnJvbSBcIi4vc3R5bGVcIjtcclxuXHJcbi8qKlxyXG4gKiDwn5OKIFNwZWxsaW5nUHJvZ3Jlc3MgLSBWRVJTSU9OIFVMVFJBLVNJTVBMRVxyXG4gKiDinIUgSnVzdGUgdW5lIHByb2dyZXNzIGJhciBiYXNpcXVlXHJcbiAqIOKdjCBFbmxldsOpIDogZXhwYW5kYWJsZSwgZMOpdGFpbHMgcGFyIHR5cGUsIGNvbXBsZXhpdMOpXHJcbiAqIFxyXG4gKiBBRkZJQ0hFIDpcclxuICogLSBQcm9ncmVzcyBiYXIgdmlzdWVsbGVcclxuICogLSBcIlggLyBZIGV4ZXJjaWNlc1wiXHJcbiAqIC0gUG91cmNlbnRhZ2VcclxuICovXHJcbmNvbnN0IFNwZWxsaW5nUHJvZ3Jlc3MgPSAoe1xyXG4gIGV4ZXJjaXNlcyA9IFtdLFxyXG4gIGNvbXBsZXRlZEV4ZXJjaXNlcyA9IFtdLFxyXG4gIGxldmVsQ29sb3IgPSBcIiMzYjgyZjZcIixcclxufSkgPT4ge1xyXG4gIGNvbnN0IHN0eWxlcyA9IGNyZWF0ZVN0eWxlcyhsZXZlbENvbG9yKTtcclxuXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PSBDQUxDVUxTIFNJTVBMRVMgPT09PT09PT09PT09PT09PT09PVxyXG4gIFxyXG4gIGNvbnN0IHByb2dyZXNzRGF0YSA9IHVzZU1lbW8oKCkgPT4ge1xyXG4gICAgY29uc3QgdG90YWxFeGVyY2lzZXMgPSBleGVyY2lzZXMubGVuZ3RoO1xyXG4gICAgY29uc3QgY29tcGxldGVkQ291bnQgPSBjb21wbGV0ZWRFeGVyY2lzZXMubGVuZ3RoO1xyXG4gICAgY29uc3QgcHJvZ3Jlc3MgPSB0b3RhbEV4ZXJjaXNlcyA+IDAgPyBNYXRoLnJvdW5kKChjb21wbGV0ZWRDb3VudCAvIHRvdGFsRXhlcmNpc2VzKSAqIDEwMCkgOiAwO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHRvdGFsRXhlcmNpc2VzLFxyXG4gICAgICBjb21wbGV0ZWRDb3VudCxcclxuICAgICAgcHJvZ3Jlc3NcclxuICAgIH07XHJcbiAgfSwgW2V4ZXJjaXNlcywgY29tcGxldGVkRXhlcmNpc2VzXSk7XHJcblxyXG4gIGNvbnN0IHsgdG90YWxFeGVyY2lzZXMsIGNvbXBsZXRlZENvdW50LCBwcm9ncmVzcyB9ID0gcHJvZ3Jlc3NEYXRhO1xyXG5cclxuICAvLyA9PT09PT09PT09PT09PT09PT09IFJFTkRFUiA9PT09PT09PT09PT09PT09PT09XHJcbiAgXHJcbiAgcmV0dXJuIChcclxuICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfT5cclxuICAgICAgPExpbmVhckdyYWRpZW50XHJcbiAgICAgICAgY29sb3JzPXtbYCR7bGV2ZWxDb2xvcn0wOGAsIGAke2xldmVsQ29sb3J9MDRgLCAndHJhbnNwYXJlbnQnXX1cclxuICAgICAgICBzdGFydD17eyB4OiAwLCB5OiAwIH19XHJcbiAgICAgICAgZW5kPXt7IHg6IDEsIHk6IDEgfX1cclxuICAgICAgICBzdHlsZT17c3R5bGVzLmdyYWRpZW50fVxyXG4gICAgICA+XHJcbiAgICAgICAgXHJcbiAgICAgICAgey8qIEhlYWRlciBhdmVjIHRpdHJlIGV0IHN0YXRzICovfVxyXG4gICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuaGVhZGVyfT5cclxuICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMudGl0bGV9PlByb2dyZXNzaW9uPC9UZXh0PlxyXG4gICAgICAgICAgPFRleHQgc3R5bGU9e1tzdHlsZXMuc3RhdHMsIHsgY29sb3I6IGxldmVsQ29sb3IgfV19PlxyXG4gICAgICAgICAgICB7Y29tcGxldGVkQ291bnR9L3t0b3RhbEV4ZXJjaXNlc30gZXhlcmNpY2VzXHJcbiAgICAgICAgICA8L1RleHQ+XHJcbiAgICAgICAgPC9WaWV3PlxyXG5cclxuICAgICAgICB7LyogUHJvZ3Jlc3MgYmFyICovfVxyXG4gICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMucHJvZ3Jlc3NCYXJDb250YWluZXJ9PlxyXG4gICAgICAgICAgPFZpZXcgc3R5bGU9e1tzdHlsZXMucHJvZ3Jlc3NCYXJUcmFjaywgeyBiYWNrZ3JvdW5kQ29sb3I6IGAke2xldmVsQ29sb3J9MjBgIH1dfT5cclxuICAgICAgICAgICAgPFZpZXcgXHJcbiAgICAgICAgICAgICAgc3R5bGU9e1tcclxuICAgICAgICAgICAgICAgIHN0eWxlcy5wcm9ncmVzc0JhckZpbGwsXHJcbiAgICAgICAgICAgICAgICB7IFxyXG4gICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGxldmVsQ29sb3IsXHJcbiAgICAgICAgICAgICAgICAgIHdpZHRoOiBgJHtwcm9ncmVzc30lYFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIF19XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8L1ZpZXc+XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHsvKiBQb3VyY2VudGFnZSAqL31cclxuICAgICAgICAgIDxUZXh0IHN0eWxlPXtbc3R5bGVzLnBlcmNlbnRhZ2UsIHsgY29sb3I6IGxldmVsQ29sb3IgfV19PlxyXG4gICAgICAgICAgICB7cHJvZ3Jlc3N9JVxyXG4gICAgICAgICAgPC9UZXh0PlxyXG4gICAgICAgIDwvVmlldz5cclxuXHJcbiAgICAgIDwvTGluZWFyR3JhZGllbnQ+XHJcbiAgICA8L1ZpZXc+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNwZWxsaW5nUHJvZ3Jlc3M7Il0sIm1hcHBpbmdzIjoiOzs7OztBQUVBLElBQUFBLFlBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLG1CQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxNQUFBLEdBQUFDLHNCQUFBLENBQUFILE9BQUE7QUFBbUMsSUFBQUksV0FBQSxHQUFBSixPQUFBO0FBWW5DLElBQU1LLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBZ0JBLENBQUFDLElBQUEsRUFJaEI7RUFBQSxJQUFBQyxjQUFBLEdBQUFELElBQUEsQ0FISkUsU0FBUztJQUFUQSxTQUFTLEdBQUFELGNBQUEsY0FBRyxFQUFFLEdBQUFBLGNBQUE7SUFBQUUscUJBQUEsR0FBQUgsSUFBQSxDQUNkSSxr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