151ef1e696d20157353ce8e84e6cc2b5
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAnimatedScrollHandler = useAnimatedScrollHandler;
var _useHandler2 = require("./useHandler");
var _useEvent = require("./useEvent");
var _worklet_14483949764600_init_data = {
  code: "function useAnimatedScrollHandlerTs1(event){const{scrollHandlers,context}=this.__closure;const{onScroll:onScroll,onBeginDrag:onBeginDrag,onEndDrag:onEndDrag,onMomentumBegin:onMomentumBegin,onMomentumEnd:onMomentumEnd}=scrollHandlers;if(onScroll&&event.eventName.endsWith('onScroll')){onScroll(event,context);}else if(onBeginDrag&&event.eventName.endsWith('onScrollBeginDrag')){onBeginDrag(event,context);}else if(onEndDrag&&event.eventName.endsWith('onScrollEndDrag')){onEndDrag(event,context);}else if(onMomentumBegin&&event.eventName.endsWith('onMomentumScrollBegin')){onMomentumBegin(event,context);}else if(onMomentumEnd&&event.eventName.endsWith('onMomentumScrollEnd')){onMomentumEnd(event,context);}}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\hook\\useAnimatedScrollHandler.ts",
  sourceMap: "{\"version\":3,\"names\":[\"useAnimatedScrollHandlerTs1\",\"event\",\"scrollHandlers\",\"context\",\"__closure\",\"onScroll\",\"onBeginDrag\",\"onEndDrag\",\"onMomentumBegin\",\"onMomentumEnd\",\"eventName\",\"endsWith\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/hook/useAnimatedScrollHandler.ts\"],\"mappings\":\"AA8EI,QAAC,CAAAA,2BAAiCA,CAAAC,KAAA,QAAAC,cAAA,CAAAC,OAAA,OAAAC,SAAA,CAEhC,KAAM,CACJC,QAAQ,CAARA,QAAQ,CACRC,WAAW,CAAXA,WAAW,CACXC,SAAS,CAATA,SAAS,CACTC,eAAe,CAAfA,eAAe,CACfC,aAAA,CAAAA,aACF,CAAC,CAAGP,cAAc,CAClB,GAAIG,QAAQ,EAAIJ,KAAK,CAACS,SAAS,CAACC,QAAQ,CAAC,UAAU,CAAC,CAAE,CACpDN,QAAQ,CAACJ,KAAK,CAAEE,OAAO,CAAC,CAC1B,CAAC,IAAM,IAAIG,WAAW,EAAIL,KAAK,CAACS,SAAS,CAACC,QAAQ,CAAC,mBAAmB,CAAC,CAAE,CACvEL,WAAW,CAACL,KAAK,CAAEE,OAAO,CAAC,CAC7B,CAAC,IAAM,IAAII,SAAS,EAAIN,KAAK,CAACS,SAAS,CAACC,QAAQ,CAAC,iBAAiB,CAAC,CAAE,CACnEJ,SAAS,CAACN,KAAK,CAAEE,OAAO,CAAC,CAC3B,CAAC,IAAM,IACLK,eAAe,EACfP,KAAK,CAACS,SAAS,CAACC,QAAQ,CAAC,uBAAuB,CAAC,CACjD,CACAH,eAAe,CAACP,KAAK,CAAEE,OAAO,CAAC,CACjC,CAAC,IAAM,IACLM,aAAa,EACbR,KAAK,CAACS,SAAS,CAACC,QAAQ,CAAC,qBAAqB,CAAC,CAC/C,CACAF,aAAa,CAACR,KAAK,CAAEE,OAAO,CAAC,CAC/B,CACF\",\"ignoreList\":[]}",
  version: "3.16.7"
};
function useAnimatedScrollHandler(handlers, dependencies) {
  var scrollHandlers = typeof handlers === 'function' ? {
    onScroll: handlers
  } : handlers;
  var _useHandler = (0, _useHandler2.useHandler)(scrollHandlers, dependencies),
    context = _useHandler.context,
    doDependenciesDiffer = _useHandler.doDependenciesDiffer;
  var subscribeForEvents = ['onScroll'];
  if (scrollHandlers.onBeginDrag !== undefined) {
    subscribeForEvents.push('onScrollBeginDrag');
  }
  if (scrollHandlers.onEndDrag !== undefined) {
    subscribeForEvents.push('onScrollEndDrag');
  }
  if (scrollHandlers.onMomentumBegin !== undefined) {
    subscribeForEvents.push('onMomentumScrollBegin');
  }
  if (scrollHandlers.onMomentumEnd !== undefined) {
    subscribeForEvents.push('onMomentumScrollEnd');
  }
  return (0, _useEvent.useEvent)(function () {
    var _e = [new global.Error(), -3, -27];
    var useAnimatedScrollHandlerTs1 = function useAnimatedScrollHandlerTs1(event) {
      var onScroll = scrollHandlers.onScroll,
        onBeginDrag = scrollHandlers.onBeginDrag,
        onEndDrag = scrollHandlers.onEndDrag,
        onMomentumBegin = scrollHandlers.onMomentumBegin,
        onMomentumEnd = scrollHandlers.onMomentumEnd;
      if (onScroll && event.eventName.endsWith('onScroll')) {
        onScroll(event, context);
      } else if (onBeginDrag && event.eventName.endsWith('onScrollBeginDrag')) {
        onBeginDrag(event, context);
      } else if (onEndDrag && event.eventName.endsWith('onScrollEndDrag')) {
        onEndDrag(event, context);
      } else if (onMomentumBegin && event.eventName.endsWith('onMomentumScrollBegin')) {
        onMomentumBegin(event, context);
      } else if (onMomentumEnd && event.eventName.endsWith('onMomentumScrollEnd')) {
        onMomentumEnd(event, context);
      }
    };
    useAnimatedScrollHandlerTs1.__closure = {
      scrollHandlers: scrollHandlers,
      context: context
    };
    useAnimatedScrollHandlerTs1.__workletHash = 14483949764600;
    useAnimatedScrollHandlerTs1.__initData = _worklet_14483949764600_init_data;
    useAnimatedScrollHandlerTs1.__stackDetails = _e;
    return useAnimatedScrollHandlerTs1;
  }(), subscribeForEvents, doDependenciesDiffer);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,