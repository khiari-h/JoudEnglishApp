5bbe39c93c08c7384f3a1a776004ead1
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateErrorCorrectionExercise = exports.validateErrorCorrectionData = exports.getRecommendedExercises = exports.getRandomErrorCorrectionExercise = exports.getModeInfo = exports.getLevelColor = exports.getLevelCharacteristics = exports.getGlobalErrorCorrectionStats = exports.getExercisesByType = exports.getExercisesByCategoryAndType = exports.getExercisesByCategory = exports.getErrorsData = exports.getErrorCorrectionStats = exports.getAvailableLevels = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _A = _interopRequireDefault(require("../../data/errorCorrection/A1"));
var _A2 = _interopRequireDefault(require("../../data/errorCorrection/A2"));
var _B = _interopRequireDefault(require("../../data/errorCorrection/B1"));
var _B2 = _interopRequireDefault(require("../../data/errorCorrection/B2"));
var _C = _interopRequireDefault(require("../../data/errorCorrection/C1"));
var _C2 = _interopRequireDefault(require("../../data/errorCorrection/C2"));
var getErrorsData = exports.getErrorsData = function getErrorsData(level) {
  var dataMap = {
    A1: _A.default,
    A2: _A2.default,
    B1: _B.default,
    B2: _B2.default,
    C1: _C.default,
    C2: _C2.default
  };
  return dataMap[level] || _A.default;
};
var getLevelColor = exports.getLevelColor = function getLevelColor(level) {
  var colors = {
    A1: "#3b82f6",
    A2: "#8b5cf6",
    B1: "#10b981",
    B2: "#f59e0b",
    C1: "#ef4444",
    C2: "#6366f1"
  };
  return colors[level] || "#4361EE";
};
var getLevelCharacteristics = exports.getLevelCharacteristics = function getLevelCharacteristics(level) {
  var characteristics = {
    A1: {
      name: "Débutant",
      textLength: "1-2 phrases (50-100 caractères)",
      errorCount: "1-2 erreurs par exercice",
      errorTypes: ["Basic grammar", "Simple vocabulary", "Word order"],
      difficulty: "Très facile",
      focus: "Erreurs évidentes, correction directe"
    },
    A2: {
      name: "Élémentaire",
      textLength: "2-3 phrases (80-150 caractères)",
      errorCount: "2-3 erreurs par exercice",
      errorTypes: ["Intermediate grammar", "Tense usage", "Prepositions"],
      difficulty: "Facile",
      focus: "Erreurs communes, inférences simples"
    },
    B1: {
      name: "Intermédiaire",
      textLength: "3-4 phrases (120-200 caractères)",
      errorCount: "3-4 erreurs par exercice",
      errorTypes: ["Complex tenses", "Passive voice", "Reported speech"],
      difficulty: "Modéré",
      focus: "Erreurs subtiles, analyse requise"
    },
    B2: {
      name: "Intermédiaire avancé",
      textLength: "4-5 phrases (150-250 caractères)",
      errorCount: "4-5 erreurs par exercice",
      errorTypes: ["Advanced conditionals", "Register", "Discourse markers"],
      difficulty: "Difficile",
      focus: "Nuances grammaticales et stylistiques"
    },
    C1: {
      name: "Autonome",
      textLength: "5-6 phrases (200-300 caractères)",
      errorCount: "5-6 erreurs par exercice",
      errorTypes: ["Sophisticated structures", "Cultural references", "Stylistic nuances"],
      difficulty: "Très difficile",
      focus: "Erreurs sophistiquées, analyse approfondie"
    },
    C2: {
      name: "Maîtrise",
      textLength: "6-8 phrases (250-400 caractères)",
      errorCount: "6-8 erreurs par exercice",
      errorTypes: ["Literary language", "Archaic forms", "Creative expression"],
      difficulty: "Expert",
      focus: "Subtilités linguistiques maximales"
    }
  };
  return characteristics[level] || characteristics.A1;
};
var getErrorCorrectionStats = exports.getErrorCorrectionStats = function getErrorCorrectionStats(level) {
  var stats = {
    exerciseCount: 0,
    totalQuestions: 0,
    categoryCount: 0,
    typeDistribution: {
      full: 0,
      identify: 0,
      multiple_choice: 0
    },
    categories: [],
    averageTextLength: 0,
    totalErrorPositions: 0
  };
  try {
    var data = getErrorsData(level);
    if (data != null && data.exercises) {
      stats.exerciseCount = data.exercises.length;
      stats.totalQuestions = data.exercises.length;
      stats.categoryCount = data.categories ? data.categories.length : 0;
      if (data.statistics) {
        stats.typeDistribution = {
          full: data.statistics.full || 0,
          identify: data.statistics.identify || 0,
          multiple_choice: data.statistics.multiple_choice || 0
        };
      }
      if (data.categories) {
        stats.categories = data.categories.map(function (cat) {
          return {
            id: cat.id,
            name: cat.name,
            count: cat.exerciseCount || 0,
            difficulty: cat.difficulty || "Unknown"
          };
        });
      }
      var textLengths = data.exercises.map(function (ex) {
        return ex.text ? ex.text.length : 0;
      });
      stats.averageTextLength = textLengths.length > 0 ? Math.round(textLengths.reduce(function (a, b) {
        return a + b;
      }, 0) / textLengths.length) : 0;
      stats.totalErrorPositions = data.exercises.filter(function (ex) {
        return ex.errorPositions;
      }).reduce(function (total, ex) {
        return total + ex.errorPositions.length;
      }, 0);
    }
  } catch (error) {
    console.warn(`Error calculating stats for level ${level}:`, error);
  }
  return stats;
};
var getGlobalErrorCorrectionStats = exports.getGlobalErrorCorrectionStats = function getGlobalErrorCorrectionStats() {
  var levels = ["A1", "A2", "B1", "B2", "C1", "C2"];
  var globalStats = {
    totalExercises: 0,
    totalQuestions: 0,
    totalCategories: 0,
    byLevel: {},
    byType: {
      full: 0,
      identify: 0,
      multiple_choice: 0
    },
    implementedLevels: 6,
    progression: []
  };
  levels.forEach(function (level) {
    var levelStats = getErrorCorrectionStats(level);
    globalStats.byLevel[level] = levelStats;
    if (levelStats.exerciseCount > 0) {
      globalStats.totalExercises += levelStats.exerciseCount;
      globalStats.totalQuestions += levelStats.totalQuestions;
      globalStats.totalCategories += levelStats.categoryCount;
      globalStats.byType.full += levelStats.typeDistribution.full;
      globalStats.byType.identify += levelStats.typeDistribution.identify;
      globalStats.byType.multiple_choice += levelStats.typeDistribution.multiple_choice;
      globalStats.progression.push({
        level: level,
        exercises: levelStats.exerciseCount,
        difficulty: getLevelCharacteristics(level).difficulty
      });
    }
  });
  return globalStats;
};
var getExercisesByCategory = exports.getExercisesByCategory = function getExercisesByCategory(level, categoryId) {
  var _data$exercises;
  var data = getErrorsData(level);
  if (data != null && data.getExercisesByCategory) {
    return data.getExercisesByCategory(categoryId);
  }
  return (data == null || (_data$exercises = data.exercises) == null ? void 0 : _data$exercises.filter(function (ex) {
    return ex.categoryId === categoryId;
  })) || [];
};
var getExercisesByType = exports.getExercisesByType = function getExercisesByType(level, type) {
  var _data$exercises2;
  var data = getErrorsData(level);
  if (data != null && data.getExercisesByType) {
    return data.getExercisesByType(type);
  }
  return (data == null || (_data$exercises2 = data.exercises) == null ? void 0 : _data$exercises2.filter(function (ex) {
    return ex.type === type;
  })) || [];
};
var getExercisesByCategoryAndType = exports.getExercisesByCategoryAndType = function getExercisesByCategoryAndType(level, categoryId, type) {
  var _data$exercises3;
  var data = getErrorsData(level);
  if (data != null && data.getExercisesByCategoryAndType) {
    return data.getExercisesByCategoryAndType(categoryId, type);
  }
  return (data == null || (_data$exercises3 = data.exercises) == null ? void 0 : _data$exercises3.filter(function (ex) {
    return ex.categoryId === categoryId && ex.type === type;
  })) || [];
};
var validateErrorCorrectionExercise = exports.validateErrorCorrectionExercise = function validateErrorCorrectionExercise(exercise) {
  if (!exercise || typeof exercise !== "object") {
    return false;
  }
  var requiredFields = ["categoryId", "type", "text", "correctedText", "hint", "explanation"];
  for (var field of requiredFields) {
    if (!exercise[field]) {
      return false;
    }
  }
  var validTypes = ["full", "identify", "multiple_choice"];
  if (!validTypes.includes(exercise.type)) {
    return false;
  }
  if (exercise.type === "multiple_choice") {
    if (!exercise.choices || !Array.isArray(exercise.choices) || exercise.choices.length < 2) {
      return false;
    }
    if (typeof exercise.correctChoiceIndex !== "number" || exercise.correctChoiceIndex < 0 || exercise.correctChoiceIndex >= exercise.choices.length) {
      return false;
    }
  } else {
    if (!exercise.errorPositions || !Array.isArray(exercise.errorPositions)) {
      return false;
    }
  }
  return true;
};
var validateErrorCorrectionData = exports.validateErrorCorrectionData = function validateErrorCorrectionData(level) {
  var _data$categories$leng, _data$categories;
  var data = getErrorsData(level);
  if (!data || !data.exercises) {
    return {
      valid: false,
      error: "No error correction data found",
      exerciseCount: 0
    };
  }
  var results = {
    valid: true,
    exerciseCount: data.exercises.length,
    invalidExercises: [],
    errors: [],
    categoryCount: (_data$categories$leng = (_data$categories = data.categories) == null ? void 0 : _data$categories.length) != null ? _data$categories$leng : 0,
    typeDistribution: {
      full: 0,
      identify: 0,
      multiple_choice: 0
    }
  };
  data.exercises.forEach(function (exercise, index) {
    if (!validateErrorCorrectionExercise(exercise)) {
      var _exercise$categoryId;
      results.valid = false;
      results.invalidExercises.push(index);
      results.errors.push(`Exercise ${index + 1} (category ${(_exercise$categoryId = exercise.categoryId) != null ? _exercise$categoryId : "unknown"}) is invalid`);
    } else {
      if (Object.prototype.hasOwnProperty.call(results.typeDistribution, exercise.type)) {
        results.typeDistribution[exercise.type]++;
      }
    }
  });
  if (data.validateStructure && !data.validateStructure()) {
    results.valid = false;
    results.errors.push("Level structure validation failed");
  }
  return results;
};
var getRandomErrorCorrectionExercise = exports.getRandomErrorCorrectionExercise = function getRandomErrorCorrectionExercise(level) {
  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var categoryId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var data = getErrorsData(level);
  if (!data || !data.exercises || data.exercises.length === 0) {
    return null;
  }
  var filteredExercises = data.exercises;
  if (type) {
    filteredExercises = filteredExercises.filter(function (ex) {
      return ex.type === type;
    });
  }
  if (categoryId) {
    filteredExercises = filteredExercises.filter(function (ex) {
      return ex.categoryId === categoryId;
    });
  }
  if (filteredExercises.length === 0) {
    return null;
  }
  var randomIndex = Math.floor(Math.random() * filteredExercises.length);
  return Object.assign({}, filteredExercises[randomIndex], {
    index: randomIndex,
    totalCount: filteredExercises.length,
    level: level
  });
};
var getModeInfo = exports.getModeInfo = function getModeInfo(mode) {
  var _modes$mode;
  var modes = {
    full: {
      name: "Full Correction",
      description: "Rewrite the entire text correcting all errors",
      difficulty: "Hard",
      icon: "✏️",
      color: "#ef4444"
    },
    identify: {
      name: "Identify Errors",
      description: "Click on words that contain errors",
      difficulty: "Medium",
      icon: "🔍",
      color: "#f59e0b"
    },
    multiple_choice: {
      name: "Multiple Choice",
      description: "Choose the correct option from multiple choices",
      difficulty: "Easy",
      icon: "✅",
      color: "#10b981"
    }
  };
  return (_modes$mode = modes[mode]) != null ? _modes$mode : modes.full;
};
var getRecommendedExercises = exports.getRecommendedExercises = function getRecommendedExercises(level) {
  var completedExercises = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var performance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var data = getErrorsData(level);
  if (!data || !data.exercises) {
    return [];
  }
  var availableExercises = data.exercises.filter(function (ex) {
    return !completedExercises.includes(`${ex.categoryId}_${ex.type}`);
  });
  if (!(performance != null && performance.weakCategories)) {
    return availableExercises.slice(0, 5);
  }
  var recommendedExercises = [];
  performance.weakCategories.forEach(function (categoryId) {
    var categoryExercises = availableExercises.filter(function (ex) {
      return ex.categoryId === categoryId;
    });
    recommendedExercises.push.apply(recommendedExercises, (0, _toConsumableArray2.default)(categoryExercises.slice(0, 2)));
  });
  return recommendedExercises.slice(0, 5);
};
var getAvailableLevels = exports.getAvailableLevels = function getAvailableLevels() {
  return [{
    level: "A1",
    name: "Débutant",
    exercises: getErrorCorrectionStats("A1").exerciseCount
  }, {
    level: "A2",
    name: "Élémentaire",
    exercises: getErrorCorrectionStats("A2").exerciseCount
  }, {
    level: "B1",
    name: "Intermédiaire",
    exercises: getErrorCorrectionStats("B1").exerciseCount
  }, {
    level: "B2",
    name: "Intermédiaire avancé",
    exercises: getErrorCorrectionStats("B2").exerciseCount
  }, {
    level: "C1",
    name: "Autonome",
    exercises: getErrorCorrectionStats("C1").exerciseCount
  }, {
    level: "C2",
    name: "Maîtrise",
    exercises: getErrorCorrectionStats("C2").exerciseCount
  }];
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfQSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX0EyIiwiX0IiLCJfQjIiLCJfQyIsIl9DMiIsImdldEVycm9yc0RhdGEiLCJleHBvcnRzIiwibGV2ZWwiLCJkYXRhTWFwIiwiQTEiLCJlcnJvckNvcnJlY3Rpb25BMSIsIkEyIiwiZXJyb3JDb3JyZWN0aW9uQTIiLCJCMSIsImVycm9yQ29ycmVjdGlvbkIxIiwiQjIiLCJlcnJvckNvcnJlY3Rpb25CMiIsIkMxIiwiZXJyb3JDb3JyZWN0aW9uQzEiLCJDMiIsImVycm9yQ29ycmVjdGlvbkMyIiwiZ2V0TGV2ZWxDb2xvciIsImNvbG9ycyIsImdldExldmVsQ2hhcmFjdGVyaXN0aWNzIiwiY2hhcmFjdGVyaXN0aWNzIiwibmFtZSIsInRleHRMZW5ndGgiLCJlcnJvckNvdW50IiwiZXJyb3JUeXBlcyIsImRpZmZpY3VsdHkiLCJmb2N1cyIsImdldEVycm9yQ29ycmVjdGlvblN0YXRzIiwic3RhdHMiLCJleGVyY2lzZUNvdW50IiwidG90YWxRdWVzdGlvbnMiLCJjYXRlZ29yeUNvdW50IiwidHlwZURpc3RyaWJ1dGlvbiIsImZ1bGwiLCJpZGVudGlmeSIsIm11bHRpcGxlX2Nob2ljZSIsImNhdGVnb3JpZXMiLCJhdmVyYWdlVGV4dExlbmd0aCIsInRvdGFsRXJyb3JQb3NpdGlvbnMiLCJkYXRhIiwiZXhlcmNpc2VzIiwibGVuZ3RoIiwic3RhdGlzdGljcyIsIm1hcCIsImNhdCIsImlkIiwiY291bnQiLCJ0ZXh0TGVuZ3RocyIsImV4IiwidGV4dCIsIk1hdGgiLCJyb3VuZCIsInJlZHVjZSIsImEiLCJiIiwiZmlsdGVyIiwiZXJyb3JQb3NpdGlvbnMiLCJ0b3RhbCIsImVycm9yIiwiY29uc29sZSIsIndhcm4iLCJnZXRHbG9iYWxFcnJvckNvcnJlY3Rpb25TdGF0cyIsImxldmVscyIsImdsb2JhbFN0YXRzIiwidG90YWxFeGVyY2lzZXMiLCJ0b3RhbENhdGVnb3JpZXMiLCJieUxldmVsIiwiYnlUeXBlIiwiaW1wbGVtZW50ZWRMZXZlbHMiLCJwcm9ncmVzc2lvbiIsImZvckVhY2giLCJsZXZlbFN0YXRzIiwicHVzaCIsImdldEV4ZXJjaXNlc0J5Q2F0ZWdvcnkiLCJjYXRlZ29yeUlkIiwiX2RhdGEkZXhlcmNpc2VzIiwiZ2V0RXhlcmNpc2VzQnlUeXBlIiwidHlwZSIsIl9kYXRhJGV4ZXJjaXNlczIiLCJnZXRFeGVyY2lzZXNCeUNhdGVnb3J5QW5kVHlwZSIsIl9kYXRhJGV4ZXJjaXNlczMiLCJ2YWxpZGF0ZUVycm9yQ29ycmVjdGlvbkV4ZXJjaXNlIiwiZXhlcmNpc2UiLCJyZXF1aXJlZEZpZWxkcyIsImZpZWxkIiwidmFsaWRUeXBlcyIsImluY2x1ZGVzIiwiY2hvaWNlcyIsIkFycmF5IiwiaXNBcnJheSIsImNvcnJlY3RDaG9pY2VJbmRleCIsInZhbGlkYXRlRXJyb3JDb3JyZWN0aW9uRGF0YSIsIl9kYXRhJGNhdGVnb3JpZXMkbGVuZyIsIl9kYXRhJGNhdGVnb3JpZXMiLCJ2YWxpZCIsInJlc3VsdHMiLCJpbnZhbGlkRXhlcmNpc2VzIiwiZXJyb3JzIiwiaW5kZXgiLCJfZXhlcmNpc2UkY2F0ZWdvcnlJZCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInZhbGlkYXRlU3RydWN0dXJlIiwiZ2V0UmFuZG9tRXJyb3JDb3JyZWN0aW9uRXhlcmNpc2UiLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJmaWx0ZXJlZEV4ZXJjaXNlcyIsInJhbmRvbUluZGV4IiwiZmxvb3IiLCJyYW5kb20iLCJhc3NpZ24iLCJ0b3RhbENvdW50IiwiZ2V0TW9kZUluZm8iLCJtb2RlIiwiX21vZGVzJG1vZGUiLCJtb2RlcyIsImRlc2NyaXB0aW9uIiwiaWNvbiIsImNvbG9yIiwiZ2V0UmVjb21tZW5kZWRFeGVyY2lzZXMiLCJjb21wbGV0ZWRFeGVyY2lzZXMiLCJwZXJmb3JtYW5jZSIsImF2YWlsYWJsZUV4ZXJjaXNlcyIsIndlYWtDYXRlZ29yaWVzIiwic2xpY2UiLCJyZWNvbW1lbmRlZEV4ZXJjaXNlcyIsImNhdGVnb3J5RXhlcmNpc2VzIiwiYXBwbHkiLCJfdG9Db25zdW1hYmxlQXJyYXkyIiwiZGVmYXVsdCIsImdldEF2YWlsYWJsZUxldmVscyJdLCJzb3VyY2VzIjpbImVycm9yQ29ycmVjdGlvbkRhdGFIZWxwZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3V0aWxzL2Vycm9yQ29ycmVjdGlvbi9lcnJvckNvcnJlY3Rpb25EYXRhSGVscGVyLmpzXHJcblxyXG4vLyBJbXBvcnQgZGVzIGRvbm7DqWVzIGQnZXJyb3IgY29ycmVjdGlvbiBwYXIgbml2ZWF1XHJcbi8vIE5pdmVhdSBBMVxyXG5pbXBvcnQgZXJyb3JDb3JyZWN0aW9uQTEgZnJvbSBcIi4uLy4uL2RhdGEvZXJyb3JDb3JyZWN0aW9uL0ExXCI7XHJcblxyXG4vLyBOaXZlYXUgQTJcclxuaW1wb3J0IGVycm9yQ29ycmVjdGlvbkEyIGZyb20gXCIuLi8uLi9kYXRhL2Vycm9yQ29ycmVjdGlvbi9BMlwiO1xyXG5cclxuLy8gTml2ZWF1IEIxXHJcbmltcG9ydCBlcnJvckNvcnJlY3Rpb25CMSBmcm9tIFwiLi4vLi4vZGF0YS9lcnJvckNvcnJlY3Rpb24vQjFcIjtcclxuXHJcbi8vIE5pdmVhdSBCMlxyXG5pbXBvcnQgZXJyb3JDb3JyZWN0aW9uQjIgZnJvbSBcIi4uLy4uL2RhdGEvZXJyb3JDb3JyZWN0aW9uL0IyXCI7XHJcblxyXG4vLyBOaXZlYXUgQzFcclxuaW1wb3J0IGVycm9yQ29ycmVjdGlvbkMxIGZyb20gXCIuLi8uLi9kYXRhL2Vycm9yQ29ycmVjdGlvbi9DMVwiO1xyXG5cclxuLy8gTml2ZWF1IEMyXHJcbmltcG9ydCBlcnJvckNvcnJlY3Rpb25DMiBmcm9tIFwiLi4vLi4vZGF0YS9lcnJvckNvcnJlY3Rpb24vQzJcIjtcclxuXHJcbi8qKlxyXG4gKiBSw6ljdXDDqHJlIGxlcyBkb25uw6llcyBkJ2V4ZXJjaWNlcyBkJ2Vycm9yIGNvcnJlY3Rpb24gZW4gZm9uY3Rpb24gZHUgbml2ZWF1XHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBsZXZlbCAtIExlIG5pdmVhdSBkZSBsYW5ndWUgKEExLCBBMiwgQjEsIEIyLCBDMSwgQzIpXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IExlcyBkb25uw6llcyBkJ2V4ZXJjaWNlcyBkJ2Vycm9yIGNvcnJlY3Rpb24gcG91ciBsZSBuaXZlYXUgc3DDqWNpZmnDqVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGdldEVycm9yc0RhdGEgPSAobGV2ZWwpID0+IHtcclxuICBjb25zdCBkYXRhTWFwID0ge1xyXG4gICAgQTE6IGVycm9yQ29ycmVjdGlvbkExLFxyXG4gICAgQTI6IGVycm9yQ29ycmVjdGlvbkEyLFxyXG4gICAgQjE6IGVycm9yQ29ycmVjdGlvbkIxLFxyXG4gICAgQjI6IGVycm9yQ29ycmVjdGlvbkIyLFxyXG4gICAgQzE6IGVycm9yQ29ycmVjdGlvbkMxLFxyXG4gICAgQzI6IGVycm9yQ29ycmVjdGlvbkMyLFxyXG4gIH07XHJcblxyXG4gIHJldHVybiBkYXRhTWFwW2xldmVsXSB8fCBlcnJvckNvcnJlY3Rpb25BMTsgLy8gRmFsbGJhY2sgdmVycyBBMSBzaSBuaXZlYXUgbm9uIHRyb3V2w6lcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSw6ljdXDDqHJlIGxhIGNvdWxldXIgYXNzb2Npw6llIMOgIHVuIG5pdmVhdSBkZSBsYW5ndWVcclxuICogQHBhcmFtIHtzdHJpbmd9IGxldmVsIC0gTGUgbml2ZWF1IGRlIGxhbmd1ZSAoQTEsIEEyLCBCMSwgQjIsIEMxLCBDMilcclxuICogQHJldHVybnMge3N0cmluZ30gQ29kZSBjb3VsZXVyIGhleGFkw6ljaW1hbCBwb3VyIGxlIG5pdmVhdVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGdldExldmVsQ29sb3IgPSAobGV2ZWwpID0+IHtcclxuICBjb25zdCBjb2xvcnMgPSB7XHJcbiAgICBBMTogXCIjM2I4MmY2XCIsIC8vIEJsZXVcclxuICAgIEEyOiBcIiM4YjVjZjZcIiwgLy8gVmlvbGV0XHJcbiAgICBCMTogXCIjMTBiOTgxXCIsIC8vIFZlcnRcclxuICAgIEIyOiBcIiNmNTllMGJcIiwgLy8gT3JhbmdlXHJcbiAgICBDMTogXCIjZWY0NDQ0XCIsIC8vIFJvdWdlXHJcbiAgICBDMjogXCIjNjM2NmYxXCIsIC8vIEluZGlnb1xyXG4gIH07XHJcbiAgcmV0dXJuIGNvbG9yc1tsZXZlbF0gfHwgXCIjNDM2MUVFXCI7IC8vIENvdWxldXIgcGFyIGTDqWZhdXRcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSw6ljdXDDqHJlIGxlcyBjYXJhY3TDqXJpc3RpcXVlcyBkJ3VuIG5pdmVhdSBkJ2Vycm9yIGNvcnJlY3Rpb25cclxuICogQHBhcmFtIHtzdHJpbmd9IGxldmVsIC0gTGUgbml2ZWF1IGRlIGxhbmd1ZVxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBDYXJhY3TDqXJpc3RpcXVlcyBkdSBuaXZlYXUgKGRpZmZpY3VsdMOpLCB0eXBlcyBkJ2VycmV1cnMsIGV0Yy4pXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZ2V0TGV2ZWxDaGFyYWN0ZXJpc3RpY3MgPSAobGV2ZWwpID0+IHtcclxuICBjb25zdCBjaGFyYWN0ZXJpc3RpY3MgPSB7XHJcbiAgICBBMToge1xyXG4gICAgICBuYW1lOiBcIkTDqWJ1dGFudFwiLFxyXG4gICAgICB0ZXh0TGVuZ3RoOiBcIjEtMiBwaHJhc2VzICg1MC0xMDAgY2FyYWN0w6hyZXMpXCIsXHJcbiAgICAgIGVycm9yQ291bnQ6IFwiMS0yIGVycmV1cnMgcGFyIGV4ZXJjaWNlXCIsXHJcbiAgICAgIGVycm9yVHlwZXM6IFtcIkJhc2ljIGdyYW1tYXJcIiwgXCJTaW1wbGUgdm9jYWJ1bGFyeVwiLCBcIldvcmQgb3JkZXJcIl0sXHJcbiAgICAgIGRpZmZpY3VsdHk6IFwiVHLDqHMgZmFjaWxlXCIsXHJcbiAgICAgIGZvY3VzOiBcIkVycmV1cnMgw6l2aWRlbnRlcywgY29ycmVjdGlvbiBkaXJlY3RlXCIsXHJcbiAgICB9LFxyXG4gICAgQTI6IHtcclxuICAgICAgbmFtZTogXCLDiWzDqW1lbnRhaXJlXCIsXHJcbiAgICAgIHRleHRMZW5ndGg6IFwiMi0zIHBocmFzZXMgKDgwLTE1MCBjYXJhY3TDqHJlcylcIixcclxuICAgICAgZXJyb3JDb3VudDogXCIyLTMgZXJyZXVycyBwYXIgZXhlcmNpY2VcIixcclxuICAgICAgZXJyb3JUeXBlczogW1wiSW50ZXJtZWRpYXRlIGdyYW1tYXJcIiwgXCJUZW5zZSB1c2FnZVwiLCBcIlByZXBvc2l0aW9uc1wiXSxcclxuICAgICAgZGlmZmljdWx0eTogXCJGYWNpbGVcIixcclxuICAgICAgZm9jdXM6IFwiRXJyZXVycyBjb21tdW5lcywgaW5mw6lyZW5jZXMgc2ltcGxlc1wiLFxyXG4gICAgfSxcclxuICAgIEIxOiB7XHJcbiAgICAgIG5hbWU6IFwiSW50ZXJtw6lkaWFpcmVcIixcclxuICAgICAgdGV4dExlbmd0aDogXCIzLTQgcGhyYXNlcyAoMTIwLTIwMCBjYXJhY3TDqHJlcylcIixcclxuICAgICAgZXJyb3JDb3VudDogXCIzLTQgZXJyZXVycyBwYXIgZXhlcmNpY2VcIixcclxuICAgICAgZXJyb3JUeXBlczogW1wiQ29tcGxleCB0ZW5zZXNcIiwgXCJQYXNzaXZlIHZvaWNlXCIsIFwiUmVwb3J0ZWQgc3BlZWNoXCJdLFxyXG4gICAgICBkaWZmaWN1bHR5OiBcIk1vZMOpcsOpXCIsXHJcbiAgICAgIGZvY3VzOiBcIkVycmV1cnMgc3VidGlsZXMsIGFuYWx5c2UgcmVxdWlzZVwiLFxyXG4gICAgfSxcclxuICAgIEIyOiB7XHJcbiAgICAgIG5hbWU6IFwiSW50ZXJtw6lkaWFpcmUgYXZhbmPDqVwiLFxyXG4gICAgICB0ZXh0TGVuZ3RoOiBcIjQtNSBwaHJhc2VzICgxNTAtMjUwIGNhcmFjdMOocmVzKVwiLFxyXG4gICAgICBlcnJvckNvdW50OiBcIjQtNSBlcnJldXJzIHBhciBleGVyY2ljZVwiLFxyXG4gICAgICBlcnJvclR5cGVzOiBbXCJBZHZhbmNlZCBjb25kaXRpb25hbHNcIiwgXCJSZWdpc3RlclwiLCBcIkRpc2NvdXJzZSBtYXJrZXJzXCJdLFxyXG4gICAgICBkaWZmaWN1bHR5OiBcIkRpZmZpY2lsZVwiLFxyXG4gICAgICBmb2N1czogXCJOdWFuY2VzIGdyYW1tYXRpY2FsZXMgZXQgc3R5bGlzdGlxdWVzXCIsXHJcbiAgICB9LFxyXG4gICAgQzE6IHtcclxuICAgICAgbmFtZTogXCJBdXRvbm9tZVwiLFxyXG4gICAgICB0ZXh0TGVuZ3RoOiBcIjUtNiBwaHJhc2VzICgyMDAtMzAwIGNhcmFjdMOocmVzKVwiLFxyXG4gICAgICBlcnJvckNvdW50OiBcIjUtNiBlcnJldXJzIHBhciBleGVyY2ljZVwiLFxyXG4gICAgICBlcnJvclR5cGVzOiBbXHJcbiAgICAgICAgXCJTb3BoaXN0aWNhdGVkIHN0cnVjdHVyZXNcIixcclxuICAgICAgICBcIkN1bHR1cmFsIHJlZmVyZW5jZXNcIixcclxuICAgICAgICBcIlN0eWxpc3RpYyBudWFuY2VzXCIsXHJcbiAgICAgIF0sXHJcbiAgICAgIGRpZmZpY3VsdHk6IFwiVHLDqHMgZGlmZmljaWxlXCIsXHJcbiAgICAgIGZvY3VzOiBcIkVycmV1cnMgc29waGlzdGlxdcOpZXMsIGFuYWx5c2UgYXBwcm9mb25kaWVcIixcclxuICAgIH0sXHJcbiAgICBDMjoge1xyXG4gICAgICBuYW1lOiBcIk1hw650cmlzZVwiLFxyXG4gICAgICB0ZXh0TGVuZ3RoOiBcIjYtOCBwaHJhc2VzICgyNTAtNDAwIGNhcmFjdMOocmVzKVwiLFxyXG4gICAgICBlcnJvckNvdW50OiBcIjYtOCBlcnJldXJzIHBhciBleGVyY2ljZVwiLFxyXG4gICAgICBlcnJvclR5cGVzOiBbXCJMaXRlcmFyeSBsYW5ndWFnZVwiLCBcIkFyY2hhaWMgZm9ybXNcIiwgXCJDcmVhdGl2ZSBleHByZXNzaW9uXCJdLFxyXG4gICAgICBkaWZmaWN1bHR5OiBcIkV4cGVydFwiLFxyXG4gICAgICBmb2N1czogXCJTdWJ0aWxpdMOpcyBsaW5ndWlzdGlxdWVzIG1heGltYWxlc1wiLFxyXG4gICAgfSxcclxuICB9O1xyXG5cclxuICByZXR1cm4gY2hhcmFjdGVyaXN0aWNzW2xldmVsXSB8fCBjaGFyYWN0ZXJpc3RpY3MuQTE7XHJcbn07XHJcblxyXG4vKipcclxuICogUsOpY3Vww6hyZSBsZXMgc3RhdGlzdGlxdWVzIGQnZXhlcmNpY2VzIHBvdXIgdW4gbml2ZWF1IGRvbm7DqVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbGV2ZWwgLSBMZSBuaXZlYXUgZGUgbGFuZ3VlXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IFN0YXRpc3RpcXVlcyBkZXMgZXhlcmNpY2VzIChub21icmUsIHR5cGVzLCBjYXTDqWdvcmllcywgZXRjLilcclxuICovXHJcbmV4cG9ydCBjb25zdCBnZXRFcnJvckNvcnJlY3Rpb25TdGF0cyA9IChsZXZlbCkgPT4ge1xyXG4gIGNvbnN0IHN0YXRzID0ge1xyXG4gICAgZXhlcmNpc2VDb3VudDogMCxcclxuICAgIHRvdGFsUXVlc3Rpb25zOiAwLFxyXG4gICAgY2F0ZWdvcnlDb3VudDogMCxcclxuICAgIHR5cGVEaXN0cmlidXRpb246IHtcclxuICAgICAgZnVsbDogMCxcclxuICAgICAgaWRlbnRpZnk6IDAsXHJcbiAgICAgIG11bHRpcGxlX2Nob2ljZTogMCxcclxuICAgIH0sXHJcbiAgICBjYXRlZ29yaWVzOiBbXSxcclxuICAgIGF2ZXJhZ2VUZXh0TGVuZ3RoOiAwLFxyXG4gICAgdG90YWxFcnJvclBvc2l0aW9uczogMCxcclxuICB9O1xyXG5cclxuICB0cnkge1xyXG4gICAgY29uc3QgZGF0YSA9IGdldEVycm9yc0RhdGEobGV2ZWwpO1xyXG5cclxuICAgIGlmIChkYXRhPy5leGVyY2lzZXMpIHtcclxuICAgICAgc3RhdHMuZXhlcmNpc2VDb3VudCA9IGRhdGEuZXhlcmNpc2VzLmxlbmd0aDtcclxuICAgICAgc3RhdHMudG90YWxRdWVzdGlvbnMgPSBkYXRhLmV4ZXJjaXNlcy5sZW5ndGg7IC8vIENoYXF1ZSBleGVyY2ljZSA9IDEgcXVlc3Rpb25cclxuICAgICAgc3RhdHMuY2F0ZWdvcnlDb3VudCA9IGRhdGEuY2F0ZWdvcmllcyA/IGRhdGEuY2F0ZWdvcmllcy5sZW5ndGggOiAwO1xyXG5cclxuICAgICAgLy8gRGlzdHJpYnV0aW9uIHBhciB0eXBlXHJcbiAgICAgIGlmIChkYXRhLnN0YXRpc3RpY3MpIHtcclxuICAgICAgICBzdGF0cy50eXBlRGlzdHJpYnV0aW9uID0ge1xyXG4gICAgICAgICAgZnVsbDogZGF0YS5zdGF0aXN0aWNzLmZ1bGwgfHwgMCxcclxuICAgICAgICAgIGlkZW50aWZ5OiBkYXRhLnN0YXRpc3RpY3MuaWRlbnRpZnkgfHwgMCxcclxuICAgICAgICAgIG11bHRpcGxlX2Nob2ljZTogZGF0YS5zdGF0aXN0aWNzLm11bHRpcGxlX2Nob2ljZSB8fCAwLFxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEluZm9ybWF0aW9ucyBzdXIgbGVzIGNhdMOpZ29yaWVzXHJcbiAgICAgIGlmIChkYXRhLmNhdGVnb3JpZXMpIHtcclxuICAgICAgICBzdGF0cy5jYXRlZ29yaWVzID0gZGF0YS5jYXRlZ29yaWVzLm1hcCgoY2F0KSA9PiAoe1xyXG4gICAgICAgICAgaWQ6IGNhdC5pZCxcclxuICAgICAgICAgIG5hbWU6IGNhdC5uYW1lLFxyXG4gICAgICAgICAgY291bnQ6IGNhdC5leGVyY2lzZUNvdW50IHx8IDAsXHJcbiAgICAgICAgICBkaWZmaWN1bHR5OiBjYXQuZGlmZmljdWx0eSB8fCBcIlVua25vd25cIixcclxuICAgICAgICB9KSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIENhbGN1bCBsb25ndWV1ciBtb3llbm5lIGRlcyB0ZXh0ZXNcclxuICAgICAgY29uc3QgdGV4dExlbmd0aHMgPSBkYXRhLmV4ZXJjaXNlcy5tYXAoKGV4KSA9PlxyXG4gICAgICAgIGV4LnRleHQgPyBleC50ZXh0Lmxlbmd0aCA6IDBcclxuICAgICAgKTtcclxuICAgICAgc3RhdHMuYXZlcmFnZVRleHRMZW5ndGggPVxyXG4gICAgICAgIHRleHRMZW5ndGhzLmxlbmd0aCA+IDBcclxuICAgICAgICAgID8gTWF0aC5yb3VuZChcclxuICAgICAgICAgICAgICB0ZXh0TGVuZ3Rocy5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAwKSAvIHRleHRMZW5ndGhzLmxlbmd0aFxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICA6IDA7XHJcblxyXG4gICAgICAvLyBDYWxjdWwgdG90YWwgZGVzIHBvc2l0aW9ucyBkJ2VycmV1cnNcclxuICAgICAgc3RhdHMudG90YWxFcnJvclBvc2l0aW9ucyA9IGRhdGEuZXhlcmNpc2VzXHJcbiAgICAgICAgLmZpbHRlcigoZXgpID0+IGV4LmVycm9yUG9zaXRpb25zKVxyXG4gICAgICAgIC5yZWR1Y2UoKHRvdGFsLCBleCkgPT4gdG90YWwgKyBleC5lcnJvclBvc2l0aW9ucy5sZW5ndGgsIDApO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAvLyDinIUgR2VzdGlvbiBkJ2VycmV1ciBhcHByb3ByacOpZVxyXG4gICAgY29uc29sZS53YXJuKGBFcnJvciBjYWxjdWxhdGluZyBzdGF0cyBmb3IgbGV2ZWwgJHtsZXZlbH06YCwgZXJyb3IpO1xyXG4gICAgLy8gRmFsbGJhY2s6IHJldG91cm5lciBkZXMgc3RhdHMgZGUgYmFzZVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHN0YXRzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFLDqWN1cMOocmUgbGVzIHN0YXRpc3RpcXVlcyBnbG9iYWxlcyBwb3VyIHRvdXMgbGVzIG5pdmVhdXggaW1wbMOpbWVudMOpc1xyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBTdGF0aXN0aXF1ZXMgY29tcGzDqHRlcyBkdSBwcm9ncmFtbWUgZCdlcnJvciBjb3JyZWN0aW9uXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZ2V0R2xvYmFsRXJyb3JDb3JyZWN0aW9uU3RhdHMgPSAoKSA9PiB7XHJcbiAgY29uc3QgbGV2ZWxzID0gW1wiQTFcIiwgXCJBMlwiLCBcIkIxXCIsIFwiQjJcIiwgXCJDMVwiLCBcIkMyXCJdO1xyXG4gIGNvbnN0IGdsb2JhbFN0YXRzID0ge1xyXG4gICAgdG90YWxFeGVyY2lzZXM6IDAsXHJcbiAgICB0b3RhbFF1ZXN0aW9uczogMCxcclxuICAgIHRvdGFsQ2F0ZWdvcmllczogMCxcclxuICAgIGJ5TGV2ZWw6IHt9LFxyXG4gICAgYnlUeXBlOiB7XHJcbiAgICAgIGZ1bGw6IDAsXHJcbiAgICAgIGlkZW50aWZ5OiAwLFxyXG4gICAgICBtdWx0aXBsZV9jaG9pY2U6IDAsXHJcbiAgICB9LFxyXG4gICAgaW1wbGVtZW50ZWRMZXZlbHM6IDYsIC8vIE1haW50ZW5hbnQgdG91cyBsZXMgbml2ZWF1eCBzb250IGltcGzDqW1lbnTDqXNcclxuICAgIHByb2dyZXNzaW9uOiBbXSxcclxuICB9O1xyXG5cclxuICBsZXZlbHMuZm9yRWFjaCgobGV2ZWwpID0+IHtcclxuICAgIGNvbnN0IGxldmVsU3RhdHMgPSBnZXRFcnJvckNvcnJlY3Rpb25TdGF0cyhsZXZlbCk7XHJcbiAgICBnbG9iYWxTdGF0cy5ieUxldmVsW2xldmVsXSA9IGxldmVsU3RhdHM7XHJcblxyXG4gICAgaWYgKGxldmVsU3RhdHMuZXhlcmNpc2VDb3VudCA+IDApIHtcclxuICAgICAgZ2xvYmFsU3RhdHMudG90YWxFeGVyY2lzZXMgKz0gbGV2ZWxTdGF0cy5leGVyY2lzZUNvdW50O1xyXG4gICAgICBnbG9iYWxTdGF0cy50b3RhbFF1ZXN0aW9ucyArPSBsZXZlbFN0YXRzLnRvdGFsUXVlc3Rpb25zO1xyXG4gICAgICBnbG9iYWxTdGF0cy50b3RhbENhdGVnb3JpZXMgKz0gbGV2ZWxTdGF0cy5jYXRlZ29yeUNvdW50O1xyXG5cclxuICAgICAgLy8gQ3VtdWwgcGFyIHR5cGVcclxuICAgICAgZ2xvYmFsU3RhdHMuYnlUeXBlLmZ1bGwgKz0gbGV2ZWxTdGF0cy50eXBlRGlzdHJpYnV0aW9uLmZ1bGw7XHJcbiAgICAgIGdsb2JhbFN0YXRzLmJ5VHlwZS5pZGVudGlmeSArPSBsZXZlbFN0YXRzLnR5cGVEaXN0cmlidXRpb24uaWRlbnRpZnk7XHJcbiAgICAgIGdsb2JhbFN0YXRzLmJ5VHlwZS5tdWx0aXBsZV9jaG9pY2UgKz1cclxuICAgICAgICBsZXZlbFN0YXRzLnR5cGVEaXN0cmlidXRpb24ubXVsdGlwbGVfY2hvaWNlO1xyXG5cclxuICAgICAgLy8gUHJvZ3Jlc3Npb24gZGVzIG5pdmVhdXhcclxuICAgICAgZ2xvYmFsU3RhdHMucHJvZ3Jlc3Npb24ucHVzaCh7XHJcbiAgICAgICAgbGV2ZWwsXHJcbiAgICAgICAgZXhlcmNpc2VzOiBsZXZlbFN0YXRzLmV4ZXJjaXNlQ291bnQsXHJcbiAgICAgICAgZGlmZmljdWx0eTogZ2V0TGV2ZWxDaGFyYWN0ZXJpc3RpY3MobGV2ZWwpLmRpZmZpY3VsdHksXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gZ2xvYmFsU3RhdHM7XHJcbn07XHJcblxyXG4vKipcclxuICogUsOpY3Vww6hyZSBsZXMgZXhlcmNpY2VzIHBhciBjYXTDqWdvcmllIHBvdXIgdW4gbml2ZWF1IGRvbm7DqVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbGV2ZWwgLSBMZSBuaXZlYXUgZGUgbGFuZ3VlXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBjYXRlZ29yeUlkIC0gTCdJRCBkZSBsYSBjYXTDqWdvcmllXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gTGlzdGUgZGVzIGV4ZXJjaWNlcyBkZSBsYSBjYXTDqWdvcmllXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZ2V0RXhlcmNpc2VzQnlDYXRlZ29yeSA9IChsZXZlbCwgY2F0ZWdvcnlJZCkgPT4ge1xyXG4gIGNvbnN0IGRhdGEgPSBnZXRFcnJvcnNEYXRhKGxldmVsKTtcclxuICBpZiAoZGF0YT8uZ2V0RXhlcmNpc2VzQnlDYXRlZ29yeSkge1xyXG4gICAgcmV0dXJuIGRhdGEuZ2V0RXhlcmNpc2VzQnlDYXRlZ29yeShjYXRlZ29yeUlkKTtcclxuICB9XHJcbiAgcmV0dXJuIGRhdGE/LmV4ZXJjaXNlcz8uZmlsdGVyKChleCkgPT4gZXguY2F0ZWdvcnlJZCA9PT0gY2F0ZWdvcnlJZCkgfHwgW107XHJcbn07XHJcblxyXG4vKipcclxuICogUsOpY3Vww6hyZSBsZXMgZXhlcmNpY2VzIHBhciB0eXBlIHBvdXIgdW4gbml2ZWF1IGRvbm7DqVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbGV2ZWwgLSBMZSBuaXZlYXUgZGUgbGFuZ3VlXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gTGUgdHlwZSBkJ2V4ZXJjaWNlIChmdWxsLCBpZGVudGlmeSwgbXVsdGlwbGVfY2hvaWNlKVxyXG4gKiBAcmV0dXJucyB7QXJyYXl9IExpc3RlIGRlcyBleGVyY2ljZXMgZHUgdHlwZSBzcMOpY2lmacOpXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZ2V0RXhlcmNpc2VzQnlUeXBlID0gKGxldmVsLCB0eXBlKSA9PiB7XHJcbiAgY29uc3QgZGF0YSA9IGdldEVycm9yc0RhdGEobGV2ZWwpO1xyXG4gIGlmIChkYXRhPy5nZXRFeGVyY2lzZXNCeVR5cGUpIHtcclxuICAgIHJldHVybiBkYXRhLmdldEV4ZXJjaXNlc0J5VHlwZSh0eXBlKTtcclxuICB9XHJcbiAgcmV0dXJuIGRhdGE/LmV4ZXJjaXNlcz8uZmlsdGVyKChleCkgPT4gZXgudHlwZSA9PT0gdHlwZSkgfHwgW107XHJcbn07XHJcblxyXG4vKipcclxuICogUsOpY3Vww6hyZSBsZXMgZXhlcmNpY2VzIHBhciBjYXTDqWdvcmllIEVUIHR5cGVcclxuICogQHBhcmFtIHtzdHJpbmd9IGxldmVsIC0gTGUgbml2ZWF1IGRlIGxhbmd1ZVxyXG4gKiBAcGFyYW0ge251bWJlcn0gY2F0ZWdvcnlJZCAtIEwnSUQgZGUgbGEgY2F0w6lnb3JpZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIExlIHR5cGUgZCdleGVyY2ljZVxyXG4gKiBAcmV0dXJucyB7QXJyYXl9IExpc3RlIGRlcyBleGVyY2ljZXMgZmlsdHLDqXNcclxuICovXHJcbmV4cG9ydCBjb25zdCBnZXRFeGVyY2lzZXNCeUNhdGVnb3J5QW5kVHlwZSA9IChsZXZlbCwgY2F0ZWdvcnlJZCwgdHlwZSkgPT4ge1xyXG4gIGNvbnN0IGRhdGEgPSBnZXRFcnJvcnNEYXRhKGxldmVsKTtcclxuICBpZiAoZGF0YT8uZ2V0RXhlcmNpc2VzQnlDYXRlZ29yeUFuZFR5cGUpIHtcclxuICAgIHJldHVybiBkYXRhLmdldEV4ZXJjaXNlc0J5Q2F0ZWdvcnlBbmRUeXBlKGNhdGVnb3J5SWQsIHR5cGUpO1xyXG4gIH1cclxuICByZXR1cm4gKFxyXG4gICAgZGF0YT8uZXhlcmNpc2VzPy5maWx0ZXIoXHJcbiAgICAgIChleCkgPT4gZXguY2F0ZWdvcnlJZCA9PT0gY2F0ZWdvcnlJZCAmJiBleC50eXBlID09PSB0eXBlXHJcbiAgICApIHx8IFtdXHJcbiAgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBWYWxpZGUgcXUndW4gZXhlcmNpY2UgZCdlcnJvciBjb3JyZWN0aW9uIGEgbGEgc3RydWN0dXJlIGNvcnJlY3RlXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBleGVyY2lzZSAtIEwnZXhlcmNpY2Ugw6AgdmFsaWRlclxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBzaSBsJ2V4ZXJjaWNlIGVzdCB2YWxpZGVcclxuICovXHJcbmV4cG9ydCBjb25zdCB2YWxpZGF0ZUVycm9yQ29ycmVjdGlvbkV4ZXJjaXNlID0gKGV4ZXJjaXNlKSA9PiB7XHJcbiAgaWYgKCFleGVyY2lzZSB8fCB0eXBlb2YgZXhlcmNpc2UgIT09IFwib2JqZWN0XCIpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIC8vIENoYW1wcyByZXF1aXMgcG91ciB0b3VzIGxlcyB0eXBlc1xyXG4gIGNvbnN0IHJlcXVpcmVkRmllbGRzID0gW1xyXG4gICAgXCJjYXRlZ29yeUlkXCIsXHJcbiAgICBcInR5cGVcIixcclxuICAgIFwidGV4dFwiLFxyXG4gICAgXCJjb3JyZWN0ZWRUZXh0XCIsXHJcbiAgICBcImhpbnRcIixcclxuICAgIFwiZXhwbGFuYXRpb25cIixcclxuICBdO1xyXG5cclxuICBmb3IgKGNvbnN0IGZpZWxkIG9mIHJlcXVpcmVkRmllbGRzKSB7XHJcbiAgICBpZiAoIWV4ZXJjaXNlW2ZpZWxkXSkge1xyXG5cclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gVmFsaWRhdGlvbiBkZXMgdHlwZXMgYXV0b3Jpc8Opc1xyXG4gIGNvbnN0IHZhbGlkVHlwZXMgPSBbXCJmdWxsXCIsIFwiaWRlbnRpZnlcIiwgXCJtdWx0aXBsZV9jaG9pY2VcIl07XHJcbiAgaWYgKCF2YWxpZFR5cGVzLmluY2x1ZGVzKGV4ZXJjaXNlLnR5cGUpKSB7XHJcblxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgLy8gVmFsaWRhdGlvbiBzcMOpY2lmaXF1ZSBwYXIgdHlwZVxyXG4gIGlmIChleGVyY2lzZS50eXBlID09PSBcIm11bHRpcGxlX2Nob2ljZVwiKSB7XHJcbiAgICBpZiAoXHJcbiAgICAgICFleGVyY2lzZS5jaG9pY2VzIHx8XHJcbiAgICAgICFBcnJheS5pc0FycmF5KGV4ZXJjaXNlLmNob2ljZXMpIHx8XHJcbiAgICAgIGV4ZXJjaXNlLmNob2ljZXMubGVuZ3RoIDwgMlxyXG4gICAgKSB7XHJcblxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKFxyXG4gICAgICB0eXBlb2YgZXhlcmNpc2UuY29ycmVjdENob2ljZUluZGV4ICE9PSBcIm51bWJlclwiIHx8XHJcbiAgICAgIGV4ZXJjaXNlLmNvcnJlY3RDaG9pY2VJbmRleCA8IDAgfHxcclxuICAgICAgZXhlcmNpc2UuY29ycmVjdENob2ljZUluZGV4ID49IGV4ZXJjaXNlLmNob2ljZXMubGVuZ3RoXHJcbiAgICApIHtcclxuXHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgLy8gUG91ciBcImZ1bGxcIiBldCBcImlkZW50aWZ5XCIsIGVycm9yUG9zaXRpb25zIGVzdCByZXF1aXNcclxuICAgIGlmICghZXhlcmNpc2UuZXJyb3JQb3NpdGlvbnMgfHwgIUFycmF5LmlzQXJyYXkoZXhlcmNpc2UuZXJyb3JQb3NpdGlvbnMpKSB7XHJcblxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBWYWxpZGUgdG91dGVzIGxlcyBkb25uw6llcyBkJ3VuIG5pdmVhdSBkb25uw6lcclxuICogQHBhcmFtIHtzdHJpbmd9IGxldmVsIC0gTGUgbml2ZWF1IMOgIHZhbGlkZXJcclxuICogQHJldHVybnMge09iamVjdH0gUsOpc3VsdGF0IGRlIGxhIHZhbGlkYXRpb24gYXZlYyBkw6l0YWlsc1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHZhbGlkYXRlRXJyb3JDb3JyZWN0aW9uRGF0YSA9IChsZXZlbCkgPT4ge1xyXG4gIGNvbnN0IGRhdGEgPSBnZXRFcnJvcnNEYXRhKGxldmVsKTtcclxuXHJcbiAgaWYgKCFkYXRhIHx8ICFkYXRhLmV4ZXJjaXNlcykge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdmFsaWQ6IGZhbHNlLFxyXG4gICAgICBlcnJvcjogXCJObyBlcnJvciBjb3JyZWN0aW9uIGRhdGEgZm91bmRcIixcclxuICAgICAgZXhlcmNpc2VDb3VudDogMCxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjb25zdCByZXN1bHRzID0ge1xyXG4gICAgdmFsaWQ6IHRydWUsXHJcbiAgICBleGVyY2lzZUNvdW50OiBkYXRhLmV4ZXJjaXNlcy5sZW5ndGgsXHJcbiAgICBpbnZhbGlkRXhlcmNpc2VzOiBbXSxcclxuICAgIGVycm9yczogW10sXHJcbiAgICBjYXRlZ29yeUNvdW50OiBkYXRhLmNhdGVnb3JpZXM/Lmxlbmd0aCA/PyAwLFxyXG4gICAgdHlwZURpc3RyaWJ1dGlvbjoge1xyXG4gICAgICBmdWxsOiAwLFxyXG4gICAgICBpZGVudGlmeTogMCxcclxuICAgICAgbXVsdGlwbGVfY2hvaWNlOiAwLFxyXG4gICAgfSxcclxuICB9O1xyXG5cclxuICAvLyBWYWxpZGF0aW9uIGRlcyBleGVyY2ljZXNcclxuICBkYXRhLmV4ZXJjaXNlcy5mb3JFYWNoKChleGVyY2lzZSwgaW5kZXgpID0+IHtcclxuICAgIGlmICghdmFsaWRhdGVFcnJvckNvcnJlY3Rpb25FeGVyY2lzZShleGVyY2lzZSkpIHtcclxuICAgICAgcmVzdWx0cy52YWxpZCA9IGZhbHNlO1xyXG4gICAgICByZXN1bHRzLmludmFsaWRFeGVyY2lzZXMucHVzaChpbmRleCk7XHJcbiAgICAgIHJlc3VsdHMuZXJyb3JzLnB1c2goXHJcbiAgICAgICAgYEV4ZXJjaXNlICR7aW5kZXggKyAxfSAoY2F0ZWdvcnkgJHtcclxuICAgICAgICAgIGV4ZXJjaXNlLmNhdGVnb3J5SWQgPz8gXCJ1bmtub3duXCJcclxuICAgICAgICB9KSBpcyBpbnZhbGlkYFxyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gQ29tcHRhZ2UgcGFyIHR5cGVcclxuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHRzLnR5cGVEaXN0cmlidXRpb24sIGV4ZXJjaXNlLnR5cGUpKSB7XHJcbiAgICAgICAgcmVzdWx0cy50eXBlRGlzdHJpYnV0aW9uW2V4ZXJjaXNlLnR5cGVdKys7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgLy8gVmFsaWRhdGlvbiBkZSBsYSBzdHJ1Y3R1cmUgZHUgbml2ZWF1XHJcbiAgaWYgKGRhdGEudmFsaWRhdGVTdHJ1Y3R1cmUgJiYgIWRhdGEudmFsaWRhdGVTdHJ1Y3R1cmUoKSkge1xyXG4gICAgcmVzdWx0cy52YWxpZCA9IGZhbHNlO1xyXG4gICAgcmVzdWx0cy5lcnJvcnMucHVzaChcIkxldmVsIHN0cnVjdHVyZSB2YWxpZGF0aW9uIGZhaWxlZFwiKTtcclxuICB9XHJcblxyXG4gIHJldHVybiByZXN1bHRzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFLDqWN1cMOocmUgdW4gZXhlcmNpY2UgYWzDqWF0b2lyZSBkJ3VuIG5pdmVhdSBldCB0eXBlIGRvbm7DqXNcclxuICogQHBhcmFtIHtzdHJpbmd9IGxldmVsIC0gTGUgbml2ZWF1IGRlIGxhbmd1ZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIExlIHR5cGUgZCdleGVyY2ljZSAob3B0aW9ubmVsKVxyXG4gKiBAcGFyYW0ge251bWJlcn0gY2F0ZWdvcnlJZCAtIEwnSUQgZGUgbGEgY2F0w6lnb3JpZSAob3B0aW9ubmVsKVxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fG51bGx9IFVuIGV4ZXJjaWNlIGFsw6lhdG9pcmUgb3UgbnVsbCBzaSBhdWN1biB0cm91dsOpXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZ2V0UmFuZG9tRXJyb3JDb3JyZWN0aW9uRXhlcmNpc2UgPSAoXHJcbiAgbGV2ZWwsXHJcbiAgdHlwZSA9IG51bGwsXHJcbiAgY2F0ZWdvcnlJZCA9IG51bGxcclxuKSA9PiB7XHJcbiAgY29uc3QgZGF0YSA9IGdldEVycm9yc0RhdGEobGV2ZWwpO1xyXG5cclxuICBpZiAoIWRhdGEgfHwgIWRhdGEuZXhlcmNpc2VzIHx8IGRhdGEuZXhlcmNpc2VzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICBsZXQgZmlsdGVyZWRFeGVyY2lzZXMgPSBkYXRhLmV4ZXJjaXNlcztcclxuXHJcbiAgLy8gRmlsdHJhZ2UgcGFyIHR5cGUgc2kgc3DDqWNpZmnDqVxyXG4gIGlmICh0eXBlKSB7XHJcbiAgICBmaWx0ZXJlZEV4ZXJjaXNlcyA9IGZpbHRlcmVkRXhlcmNpc2VzLmZpbHRlcigoZXgpID0+IGV4LnR5cGUgPT09IHR5cGUpO1xyXG4gIH1cclxuXHJcbiAgLy8gRmlsdHJhZ2UgcGFyIGNhdMOpZ29yaWUgc2kgc3DDqWNpZmnDqWVcclxuICBpZiAoY2F0ZWdvcnlJZCkge1xyXG4gICAgZmlsdGVyZWRFeGVyY2lzZXMgPSBmaWx0ZXJlZEV4ZXJjaXNlcy5maWx0ZXIoXHJcbiAgICAgIChleCkgPT4gZXguY2F0ZWdvcnlJZCA9PT0gY2F0ZWdvcnlJZFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGlmIChmaWx0ZXJlZEV4ZXJjaXNlcy5sZW5ndGggPT09IDApIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBmaWx0ZXJlZEV4ZXJjaXNlcy5sZW5ndGgpO1xyXG4gIHJldHVybiB7XHJcbiAgICAuLi5maWx0ZXJlZEV4ZXJjaXNlc1tyYW5kb21JbmRleF0sXHJcbiAgICBpbmRleDogcmFuZG9tSW5kZXgsXHJcbiAgICB0b3RhbENvdW50OiBmaWx0ZXJlZEV4ZXJjaXNlcy5sZW5ndGgsXHJcbiAgICBsZXZlbCxcclxuICB9O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFLDqWN1cMOocmUgbGVzIGluZm9ybWF0aW9ucyBkJ3VuIG1vZGUgZCdleGVyY2ljZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbW9kZSAtIExlIG1vZGUgKGZ1bGwsIGlkZW50aWZ5LCBtdWx0aXBsZV9jaG9pY2UpXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IEluZm9ybWF0aW9ucyBzdXIgbGUgbW9kZVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGdldE1vZGVJbmZvID0gKG1vZGUpID0+IHtcclxuICBjb25zdCBtb2RlcyA9IHtcclxuICAgIGZ1bGw6IHtcclxuICAgICAgbmFtZTogXCJGdWxsIENvcnJlY3Rpb25cIixcclxuICAgICAgZGVzY3JpcHRpb246IFwiUmV3cml0ZSB0aGUgZW50aXJlIHRleHQgY29ycmVjdGluZyBhbGwgZXJyb3JzXCIsXHJcbiAgICAgIGRpZmZpY3VsdHk6IFwiSGFyZFwiLFxyXG4gICAgICBpY29uOiBcIuKcj++4j1wiLFxyXG4gICAgICBjb2xvcjogXCIjZWY0NDQ0XCIsXHJcbiAgICB9LFxyXG4gICAgaWRlbnRpZnk6IHtcclxuICAgICAgbmFtZTogXCJJZGVudGlmeSBFcnJvcnNcIixcclxuICAgICAgZGVzY3JpcHRpb246IFwiQ2xpY2sgb24gd29yZHMgdGhhdCBjb250YWluIGVycm9yc1wiLFxyXG4gICAgICBkaWZmaWN1bHR5OiBcIk1lZGl1bVwiLFxyXG4gICAgICBpY29uOiBcIvCflI1cIixcclxuICAgICAgY29sb3I6IFwiI2Y1OWUwYlwiLFxyXG4gICAgfSxcclxuICAgIG11bHRpcGxlX2Nob2ljZToge1xyXG4gICAgICBuYW1lOiBcIk11bHRpcGxlIENob2ljZVwiLFxyXG4gICAgICBkZXNjcmlwdGlvbjogXCJDaG9vc2UgdGhlIGNvcnJlY3Qgb3B0aW9uIGZyb20gbXVsdGlwbGUgY2hvaWNlc1wiLFxyXG4gICAgICBkaWZmaWN1bHR5OiBcIkVhc3lcIixcclxuICAgICAgaWNvbjogXCLinIVcIixcclxuICAgICAgY29sb3I6IFwiIzEwYjk4MVwiLFxyXG4gICAgfSxcclxuICB9O1xyXG5cclxuICByZXR1cm4gbW9kZXNbbW9kZV0gPz8gbW9kZXMuZnVsbDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSw6ljdXDDqHJlIGRlcyBleGVyY2ljZXMgcmVjb21tYW5kw6lzIGJhc8OpcyBzdXIgbGVzIHBlcmZvcm1hbmNlc1xyXG4gKiBAcGFyYW0ge3N0cmluZ30gbGV2ZWwgLSBMZSBuaXZlYXUgYWN0dWVsXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGNvbXBsZXRlZEV4ZXJjaXNlcyAtIExpc3RlIGRlcyBleGVyY2ljZXMgY29tcGzDqXTDqXNcclxuICogQHBhcmFtIHtPYmplY3R9IHBlcmZvcm1hbmNlIC0gU3RhdGlzdGlxdWVzIGRlIHBlcmZvcm1hbmNlXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gRXhlcmNpY2VzIHJlY29tbWFuZMOpc1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGdldFJlY29tbWVuZGVkRXhlcmNpc2VzID0gKFxyXG4gIGxldmVsLFxyXG4gIGNvbXBsZXRlZEV4ZXJjaXNlcyA9IFtdLFxyXG4gIHBlcmZvcm1hbmNlID0ge31cclxuKSA9PiB7XHJcbiAgY29uc3QgZGF0YSA9IGdldEVycm9yc0RhdGEobGV2ZWwpO1xyXG5cclxuICBpZiAoIWRhdGEgfHwgIWRhdGEuZXhlcmNpc2VzKSB7XHJcbiAgICByZXR1cm4gW107XHJcbiAgfVxyXG5cclxuICAvLyBGaWx0cmVyIGxlcyBleGVyY2ljZXMgbm9uIGNvbXBsw6l0w6lzXHJcbiAgY29uc3QgYXZhaWxhYmxlRXhlcmNpc2VzID0gZGF0YS5leGVyY2lzZXMuZmlsdGVyKFxyXG4gICAgKGV4KSA9PiAhY29tcGxldGVkRXhlcmNpc2VzLmluY2x1ZGVzKGAke2V4LmNhdGVnb3J5SWR9XyR7ZXgudHlwZX1gKVxyXG4gICk7XHJcblxyXG4gIC8vIFNpIHBhcyBkZSBkb25uw6llcyBkZSBwZXJmb3JtYW5jZSwgcmV0b3VybmVyIGRlcyBleGVyY2ljZXMgdmFyacOpc1xyXG4gIGlmICghcGVyZm9ybWFuY2U/LndlYWtDYXRlZ29yaWVzKSB7XHJcbiAgICByZXR1cm4gYXZhaWxhYmxlRXhlcmNpc2VzLnNsaWNlKDAsIDUpO1xyXG4gIH1cclxuXHJcbiAgLy8gUHJpb3Jpc2VyIGxlcyBjYXTDqWdvcmllcyBmYWlibGVzXHJcbiAgY29uc3QgcmVjb21tZW5kZWRFeGVyY2lzZXMgPSBbXTtcclxuXHJcbiAgcGVyZm9ybWFuY2Uud2Vha0NhdGVnb3JpZXMuZm9yRWFjaCgoY2F0ZWdvcnlJZCkgPT4ge1xyXG4gICAgY29uc3QgY2F0ZWdvcnlFeGVyY2lzZXMgPSBhdmFpbGFibGVFeGVyY2lzZXMuZmlsdGVyKFxyXG4gICAgICAoZXgpID0+IGV4LmNhdGVnb3J5SWQgPT09IGNhdGVnb3J5SWRcclxuICAgICk7XHJcbiAgICByZWNvbW1lbmRlZEV4ZXJjaXNlcy5wdXNoKC4uLmNhdGVnb3J5RXhlcmNpc2VzLnNsaWNlKDAsIDIpKTtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIHJlY29tbWVuZGVkRXhlcmNpc2VzLnNsaWNlKDAsIDUpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEV4cG9ydCBkZXMgbml2ZWF1eCBkaXNwb25pYmxlcyBhdmVjIGxldXJzIG3DqXRhZG9ubsOpZXNcclxuICovXHJcbmV4cG9ydCBjb25zdCBnZXRBdmFpbGFibGVMZXZlbHMgPSAoKSA9PiB7XHJcbiAgcmV0dXJuIFtcclxuICAgIHtcclxuICAgICAgbGV2ZWw6IFwiQTFcIixcclxuICAgICAgbmFtZTogXCJEw6lidXRhbnRcIixcclxuICAgICAgZXhlcmNpc2VzOiBnZXRFcnJvckNvcnJlY3Rpb25TdGF0cyhcIkExXCIpLmV4ZXJjaXNlQ291bnQsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBsZXZlbDogXCJBMlwiLFxyXG4gICAgICBuYW1lOiBcIsOJbMOpbWVudGFpcmVcIixcclxuICAgICAgZXhlcmNpc2VzOiBnZXRFcnJvckNvcnJlY3Rpb25TdGF0cyhcIkEyXCIpLmV4ZXJjaXNlQ291bnQsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBsZXZlbDogXCJCMVwiLFxyXG4gICAgICBuYW1lOiBcIkludGVybcOpZGlhaXJlXCIsXHJcbiAgICAgIGV4ZXJjaXNlczogZ2V0RXJyb3JDb3JyZWN0aW9uU3RhdHMoXCJCMVwiKS5leGVyY2lzZUNvdW50LFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbGV2ZWw6IFwiQjJcIixcclxuICAgICAgbmFtZTogXCJJbnRlcm3DqWRpYWlyZSBhdmFuY8OpXCIsXHJcbiAgICAgIGV4ZXJjaXNlczogZ2V0RXJyb3JDb3JyZWN0aW9uU3RhdHMoXCJCMlwiKS5leGVyY2lzZUNvdW50LFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbGV2ZWw6IFwiQzFcIixcclxuICAgICAgbmFtZTogXCJBdXRvbm9tZVwiLFxyXG4gICAgICBleGVyY2lzZXM6IGdldEVycm9yQ29ycmVjdGlvblN0YXRzKFwiQzFcIikuZXhlcmNpc2VDb3VudCxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGxldmVsOiBcIkMyXCIsXHJcbiAgICAgIG5hbWU6IFwiTWHDrnRyaXNlXCIsXHJcbiAgICAgIGV4ZXJjaXNlczogZ2V0RXJyb3JDb3JyZWN0aW9uU3RhdHMoXCJDMlwiKS5leGVyY2lzZUNvdW50LFxyXG4gICAgfSxcclxuICBdO1xy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