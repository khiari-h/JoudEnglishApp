116e2bc0b9b62fbdf5bf666d61186f34
_getJestObj().mock('react-native/Libraries/Settings/Settings', function () {
  return {
    get: jest.fn(function () {
      return 'light';
    }),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn()
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return require('@react-native-async-storage/async-storage/jest/async-storage-mock');
});
_getJestObj().mock('expo-font', function () {
  return {
    useFonts: function useFonts() {
      return [true];
    },
    isLoaded: function isLoaded() {
      return true;
    }
  };
});
_getJestObj().mock('expo-haptics', function () {
  return {
    impactAsync: jest.fn()
  };
});
_getJestObj().mock('react-native-reanimated', function () {
  var Reanimated = require('react-native-reanimated/mock');
  Reanimated.default.call = function () {};
  return Reanimated;
});
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  RN.Animated = Object.assign({}, RN.Animated, {
    Value: jest.fn(function () {
      return {
        interpolate: jest.fn(),
        addListener: jest.fn(),
        removeListener: jest.fn(),
        setValue: jest.fn()
      };
    }),
    timing: jest.fn(function () {
      return {
        start: jest.fn(function (callback) {
          return callback == null ? void 0 : callback({
            finished: true
          });
        })
      };
    })
  });
  return RN;
});
_getJestObj().mock('@react-navigation/native', function () {
  var actualNav = jest.requireActual('@react-navigation/native');
  return Object.assign({}, actualNav, {
    useNavigation: function useNavigation() {
      return Object.assign({}, actualNav.useNavigation(), {
        navigate: jest.fn(),
        goBack: jest.fn(),
        canGoBack: jest.fn(function () {
          return true;
        }),
        addListener: jest.fn(),
        isFocused: jest.fn(function () {
          return true;
        })
      });
    },
    useRoute: function useRoute() {
      return {
        params: {},
        name: 'MockScreen'
      };
    }
  });
});
var _reactNative = require("react-native");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
_reactNative.NativeModules.SettingsManager = _reactNative.NativeModules.SettingsManager || {
  settings: {
    AppleLocale: 'en_US'
  }
};
if (typeof setImmediate === 'undefined') {
  global.setImmediate = function (fn) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return setTimeout.apply(void 0, [fn, 0].concat(args));
  };
}
if (typeof clearImmediate === 'undefined') {
  global.clearImmediate = function (id) {
    return clearTimeout(id);
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJnZXQiLCJqZXN0IiwiZm4iLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlcXVpcmUiLCJ1c2VGb250cyIsImlzTG9hZGVkIiwiaW1wYWN0QXN5bmMiLCJSZWFuaW1hdGVkIiwiZGVmYXVsdCIsImNhbGwiLCJSTiIsInJlcXVpcmVBY3R1YWwiLCJBbmltYXRlZCIsIk9iamVjdCIsImFzc2lnbiIsIlZhbHVlIiwiaW50ZXJwb2xhdGUiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwic2V0VmFsdWUiLCJ0aW1pbmciLCJzdGFydCIsImNhbGxiYWNrIiwiZmluaXNoZWQiLCJhY3R1YWxOYXYiLCJ1c2VOYXZpZ2F0aW9uIiwibmF2aWdhdGUiLCJnb0JhY2siLCJjYW5Hb0JhY2siLCJpc0ZvY3VzZWQiLCJ1c2VSb3V0ZSIsInBhcmFtcyIsIm5hbWUiLCJfcmVhY3ROYXRpdmUiLCJfcmVxdWlyZSIsIk5hdGl2ZU1vZHVsZXMiLCJTZXR0aW5nc01hbmFnZXIiLCJzZXR0aW5ncyIsIkFwcGxlTG9jYWxlIiwic2V0SW1tZWRpYXRlIiwiZ2xvYmFsIiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJzZXRUaW1lb3V0IiwiYXBwbHkiLCJjb25jYXQiLCJjbGVhckltbWVkaWF0ZSIsImlkIiwiY2xlYXJUaW1lb3V0Il0sInNvdXJjZXMiOlsiamVzdC5zZXR1cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOYXRpdmVNb2R1bGVzIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcblxuLy8gMS4gTW9ja3MgZGVzIG1vZHVsZXMgUmVhY3QgTmF0aXZlIGRlIGJhc2Vcbmplc3QubW9jaygncmVhY3QtbmF0aXZlL0xpYnJhcmllcy9TZXR0aW5ncy9TZXR0aW5ncycsICgpID0+ICh7XG4gIGdldDogamVzdC5mbigoKSA9PiAnbGlnaHQnKSxcbiAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICByZW1vdmVFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXG59KSk7XG5cbi8vIDIuIE1vY2sgZGVzIG1vZHVsZXMgbmF0aWZzXG5OYXRpdmVNb2R1bGVzLlNldHRpbmdzTWFuYWdlciA9IE5hdGl2ZU1vZHVsZXMuU2V0dGluZ3NNYW5hZ2VyIHx8IHtcbiAgc2V0dGluZ3M6IHsgQXBwbGVMb2NhbGU6ICdlbl9VUycgfSxcbn07XG5cbi8vIDMuIE1vY2tzIGRlcyBiaWJsaW90aMOocXVlcyB0aWVyY2VzXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlJywgKCkgPT5cbiAgcmVxdWlyZSgnQHJlYWN0LW5hdGl2ZS1hc3luYy1zdG9yYWdlL2FzeW5jLXN0b3JhZ2UvamVzdC9hc3luYy1zdG9yYWdlLW1vY2snKVxuKTtcblxuamVzdC5tb2NrKCdleHBvLWZvbnQnLCAoKSA9PiAoe1xuICB1c2VGb250czogKCkgPT4gW3RydWVdLFxuICBpc0xvYWRlZDogKCkgPT4gdHJ1ZSxcbn0pKTtcblxuamVzdC5tb2NrKCdleHBvLWhhcHRpY3MnLCAoKSA9PiAoe1xuICBpbXBhY3RBc3luYzogamVzdC5mbigpLFxufSkpO1xuXG4vLyA0LiBNb2NrIHNww6ljaWFsIHBvdXIgUmVhbmltYXRlZFxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUtcmVhbmltYXRlZCcsICgpID0+IHtcbiAgY29uc3QgUmVhbmltYXRlZCA9IHJlcXVpcmUoJ3JlYWN0LW5hdGl2ZS1yZWFuaW1hdGVkL21vY2snKTtcbiAgUmVhbmltYXRlZC5kZWZhdWx0LmNhbGwgPSAoKSA9PiB7fTtcbiAgcmV0dXJuIFJlYW5pbWF0ZWQ7XG59KTtcblxuLy8gNS4gTW9jayBkZSBSZWFjdCBOYXRpdmUgYXZlYyBBbmltYXRlZFxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUnLCAoKSA9PiB7XG4gIGNvbnN0IFJOID0gamVzdC5yZXF1aXJlQWN0dWFsKCdyZWFjdC1uYXRpdmUnKTtcblxuICBSTi5BbmltYXRlZCA9IHtcbiAgICAuLi5STi5BbmltYXRlZCxcbiAgICBWYWx1ZTogamVzdC5mbigoKSA9PiAoe1xuICAgICAgaW50ZXJwb2xhdGU6IGplc3QuZm4oKSxcbiAgICAgIGFkZExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgICByZW1vdmVMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgc2V0VmFsdWU6IGplc3QuZm4oKSxcbiAgICB9KSksXG4gICAgdGltaW5nOiBqZXN0LmZuKCgpID0+ICh7XG4gICAgICBzdGFydDogamVzdC5mbihjYWxsYmFjayA9PiBjYWxsYmFjaz8uKHsgZmluaXNoZWQ6IHRydWUgfSkpLFxuICAgIH0pKSxcbiAgfTtcblxuICByZXR1cm4gUk47XG59KTtcblxuLy8gNi4gTW9jayBkZSByZWFjdC1uYXZpZ2F0aW9uICh2ZXJzaW9uIGFtw6lsaW9yw6llKVxuamVzdC5tb2NrKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnLCAoKSA9PiB7XG4gIGNvbnN0IGFjdHVhbE5hdiA9IGplc3QucmVxdWlyZUFjdHVhbCgnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJyk7XG4gIHJldHVybiB7XG4gICAgLi4uYWN0dWFsTmF2LFxuICAgIHVzZU5hdmlnYXRpb246ICgpID0+ICh7XG4gICAgICAuLi5hY3R1YWxOYXYudXNlTmF2aWdhdGlvbigpLFxuICAgICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcbiAgICAgIGdvQmFjazogamVzdC5mbigpLFxuICAgICAgY2FuR29CYWNrOiBqZXN0LmZuKCgpID0+IHRydWUpLFxuICAgICAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICAgIGlzRm9jdXNlZDogamVzdC5mbigoKSA9PiB0cnVlKSxcbiAgICB9KSxcbiAgICB1c2VSb3V0ZTogKCkgPT4gKHtcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBuYW1lOiAnTW9ja1NjcmVlbicsXG4gICAgfSksXG4gIH07XG59KTtcblxuLy8gNy4gUG9seWZpbGxzIGdsb2JhdXhcbmlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlID09PSAndW5kZWZpbmVkJykge1xuICBnbG9iYWwuc2V0SW1tZWRpYXRlID0gKGZuLCAuLi5hcmdzKSA9PiBzZXRUaW1lb3V0KGZuLCAwLCAuLi5hcmdzKTtcbn1cblxuaWYgKHR5cGVvZiBjbGVhckltbWVkaWF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgZ2xvYmFsLmNsZWFySW1tZWRpYXRlID0gKGlkKSA9PiBjbGVhclRpbWVvdXQoaWQpO1xufSJdLCJtYXBwaW5ncyI6IkFBR0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDBDQUEwQyxFQUFFO0VBQUEsT0FBTztJQUMzREMsR0FBRyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFBLE9BQU0sT0FBTztJQUFBLEVBQUM7SUFDM0JDLGdCQUFnQixFQUFFRixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQzNCRSxtQkFBbUIsRUFBRUgsSUFBSSxDQUFDQyxFQUFFLENBQUM7RUFDL0IsQ0FBQztBQUFBLENBQUMsQ0FBQztBQVFISixXQUFBLEdBQUtDLElBQUksQ0FBQywyQ0FBMkMsRUFBRTtFQUFBLE9BQ3JETSxPQUFPLENBQUMsbUVBQW1FLENBQUM7QUFBQSxDQUM5RSxDQUFDO0FBRURQLFdBQUEsR0FBS0MsSUFBSSxDQUFDLFdBQVcsRUFBRTtFQUFBLE9BQU87SUFDNUJPLFFBQVEsRUFBRSxTQUFWQSxRQUFRQSxDQUFBO01BQUEsT0FBUSxDQUFDLElBQUksQ0FBQztJQUFBO0lBQ3RCQyxRQUFRLEVBQUUsU0FBVkEsUUFBUUEsQ0FBQTtNQUFBLE9BQVEsSUFBSTtJQUFBO0VBQ3RCLENBQUM7QUFBQSxDQUFDLENBQUM7QUFFSFQsV0FBQSxHQUFLQyxJQUFJLENBQUMsY0FBYyxFQUFFO0VBQUEsT0FBTztJQUMvQlMsV0FBVyxFQUFFUCxJQUFJLENBQUNDLEVBQUUsQ0FBQztFQUN2QixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBR0hKLFdBQUEsR0FBS0MsSUFBSSxDQUFDLHlCQUF5QixFQUFFLFlBQU07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