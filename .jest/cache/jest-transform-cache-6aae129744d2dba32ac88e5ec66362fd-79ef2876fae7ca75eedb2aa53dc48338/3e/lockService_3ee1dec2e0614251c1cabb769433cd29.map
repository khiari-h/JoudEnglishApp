{"version":3,"names":["_asyncStorage","_interopRequireDefault","require","STORAGE_KEYS","ENABLED","PIN_HASH","PIN_SALT","BIO_ENABLED","RECOVERY_HASH","TIMEOUT_SECONDS","LOCKOUT_UNTIL","FAILED_ATTEMPTS","simpleHash","input","hash","str","String","i","length","charCodeAt","Math","abs","toString","getSecureRandomBytes","_x","_getSecureRandomBytes","apply","arguments","_asyncToGenerator2","default","_require","getRandomBytes","expoError","console","warn","message","crypto","getRandomValues","randomValues","Uint8Array","webCryptoError","nodeCrypto","randomBytes","nodeCryptoError","Error","error","secureRandomSalt","_secureRandomSalt","undefined","chars","out","randomIndex","fallbackRandomSalt","floor","random","generateRecoveryCode","_generateRecoveryCode","code","fallbackGenerateRecoveryCode","isEnabled","_isEnabled","enabled","AsyncStorage","getItem","enableLock","_enableLock","setItem","disableLock","_disableLock","multiRemove","setPin","_x2","_setPin","pin","salt","pinHash","verifyPin","_x3","_verifyPin","lockoutUntil","Number","now","Date","ok","reason","expected","given","attempts","lockMs","min","setBiometricsEnabled","_x4","_setBiometricsEnabled","isBiometricsEnabled","_isBiometricsEnabled","v","unlockWithBiometrics","_unlockWithBiometrics","setRecoveryCode","_x5","_setRecoveryCode","verifyRecovery","_x6","_verifyRecovery","setAutoLockTimeout","_x7","_setAutoLockTimeout","seconds","getAutoLockTimeout","_getAutoLockTimeout","emergencyReset","_emergencyReset","lockStorageKeys","exports"],"sources":["lockService.js"],"sourcesContent":["// src/services/lockService.js - Simple offline app lock service (PIN + recovery)\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nconst STORAGE_KEYS = {\r\n  ENABLED: 'app_lock.enabled',\r\n  PIN_HASH: 'app_lock.pin_hash',\r\n  PIN_SALT: 'app_lock.pin_salt',\r\n  BIO_ENABLED: 'app_lock.bio_enabled',\r\n  RECOVERY_HASH: 'app_lock.recovery_hash',\r\n  TIMEOUT_SECONDS: 'app_lock.timeout_seconds',\r\n  LOCKOUT_UNTIL: 'app_lock.lockout_until',\r\n  FAILED_ATTEMPTS: 'app_lock.failed_attempts',\r\n};\r\n\r\n// NOTE: This is not cryptographically strong. For local lock UX only.\r\nfunction simpleHash(input) {\r\n  let hash = 0;\r\n  const str = String(input);\r\n  for (let i = 0; i < str.length; i += 1) {\r\n    hash = (hash << 5) - hash + str.charCodeAt(i);\r\n    hash |= 0;\r\n  }\r\n  return Math.abs(hash).toString(16);\r\n}\r\n\r\n/**\r\n * Génère des bytes aléatoires cryptographiquement sûrs\r\n * @param {number} length - Nombre de bytes à générer\r\n * @returns {Uint8Array} Bytes aléatoires\r\n */\r\nasync function getSecureRandomBytes(length) {\r\n  try {\r\n    // Méthode 1: expo-crypto (recommandé) - seulement si disponible\r\n    if (typeof require !== 'undefined') {\r\n      try {\r\n        const { getRandomBytes } = require('expo-crypto');\r\n        return await getRandomBytes(length);\r\n      } catch (expoError) {\r\n        console.warn('expo-crypto not available:', expoError.message);\r\n      }\r\n    }\r\n    \r\n    try {\r\n      // Méthode 2: Web Crypto API\r\n      if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\r\n        const randomValues = new Uint8Array(length);\r\n        crypto.getRandomValues(randomValues);\r\n        return randomValues;\r\n      }\r\n    } catch (webCryptoError) {\r\n      console.warn('Web Crypto API failed:', webCryptoError);\r\n    }\r\n    \r\n    // Méthode 3: Node.js crypto (si disponible)\r\n    try {\r\n      if (typeof require !== 'undefined') {\r\n        const nodeCrypto = require('crypto');\r\n        return nodeCrypto.randomBytes(length);\r\n      }\r\n    } catch (nodeCryptoError) {\r\n      console.warn('Node.js crypto failed:', nodeCryptoError);\r\n    }\r\n    \r\n    throw new Error('No secure random source available');\r\n  } catch (error) {\r\n    console.warn('All secure random methods failed, using fallback:', error.message);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Génère un salt cryptographiquement sûr\r\n * @param {number} length - Longueur du salt (défaut: 16)\r\n * @returns {string} Salt sécurisé\r\n */\r\nasync function secureRandomSalt(length = 16) {\r\n  try {\r\n    const randomBytes = await getSecureRandomBytes(length);\r\n    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r\n    let out = '';\r\n    \r\n    for (let i = 0; i < length; i += 1) {\r\n      const randomIndex = randomBytes[i] % chars.length;\r\n      out += chars[randomIndex];\r\n    }\r\n    return out;\r\n  } catch (error) {\r\n    console.warn('Secure random failed, using fallback method:', error.message);\r\n    // Dernier recours : méthode moins sécurisée mais fonctionnelle\r\n    return fallbackRandomSalt(length);\r\n  }\r\n}\r\n\r\n/**\r\n * Fallback moins sécurisé (utilisé uniquement en cas d'échec de toutes les méthodes sécurisées)\r\n * @param {number} length - Longueur du salt\r\n * @returns {string} Salt moins sécurisé\r\n */\r\nfunction fallbackRandomSalt(length = 16) {\r\n  const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r\n  let out = '';\r\n  \r\n  // Utilise Math.random comme dernier recours\r\n  for (let i = 0; i < length; i += 1) {\r\n    const randomIndex = Math.floor(Math.random() * chars.length);\r\n    out += chars[randomIndex];\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Génère un code de récupération cryptographiquement sûr\r\n * @returns {string} Code de récupération sécurisé\r\n */\r\nexport async function generateRecoveryCode() {\r\n  try {\r\n    const randomBytes = await getSecureRandomBytes(16);\r\n    const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';\r\n    let code = '';\r\n    \r\n    for (let i = 0; i < 16; i += 1) {\r\n      const randomIndex = randomBytes[i] % chars.length;\r\n      code += chars[randomIndex];\r\n    }\r\n    return code;\r\n  } catch (error) {\r\n    console.warn('Secure random failed, using fallback method:', error.message);\r\n    // Dernier recours : méthode moins sécurisée mais fonctionnelle\r\n    return fallbackGenerateRecoveryCode();\r\n  }\r\n}\r\n\r\n/**\r\n * Fallback moins sécurisé pour la génération de code de récupération\r\n * @returns {string} Code de récupération moins sécurisé\r\n */\r\nfunction fallbackGenerateRecoveryCode() {\r\n  const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';\r\n  let code = '';\r\n  \r\n  // Utilise Math.random comme dernier recours\r\n  for (let i = 0; i < 16; i += 1) {\r\n    const randomIndex = Math.floor(Math.random() * chars.length);\r\n    code += chars[randomIndex];\r\n  }\r\n  return code;\r\n}\r\n\r\nexport async function isEnabled() {\r\n  const enabled = await AsyncStorage.getItem(STORAGE_KEYS.ENABLED);\r\n  return enabled === '1';\r\n}\r\n\r\nexport async function enableLock() {\r\n  await AsyncStorage.setItem(STORAGE_KEYS.ENABLED, '1');\r\n  return true;\r\n}\r\n\r\nexport async function disableLock() {\r\n  await AsyncStorage.multiRemove([\r\n    STORAGE_KEYS.ENABLED,\r\n    STORAGE_KEYS.PIN_HASH,\r\n    STORAGE_KEYS.PIN_SALT,\r\n    STORAGE_KEYS.BIO_ENABLED,\r\n    STORAGE_KEYS.RECOVERY_HASH,\r\n    STORAGE_KEYS.TIMEOUT_SECONDS,\r\n    STORAGE_KEYS.LOCKOUT_UNTIL,\r\n    STORAGE_KEYS.FAILED_ATTEMPTS,\r\n  ]);\r\n  return true;\r\n}\r\n\r\nexport async function setPin(pin) {\r\n  const salt = await secureRandomSalt();\r\n  const pinHash = simpleHash(`${salt}:${pin}`);\r\n  await AsyncStorage.setItem(STORAGE_KEYS.PIN_SALT, salt);\r\n  await AsyncStorage.setItem(STORAGE_KEYS.PIN_HASH, pinHash);\r\n  return true;\r\n}\r\n\r\nexport async function verifyPin(pin) {\r\n  const lockoutUntil = Number(await AsyncStorage.getItem(STORAGE_KEYS.LOCKOUT_UNTIL) || '0');\r\n  const now = Date.now();\r\n  if (lockoutUntil && now < lockoutUntil) {\r\n    return { ok: false, reason: 'lockout' };\r\n  }\r\n\r\n  const salt = await AsyncStorage.getItem(STORAGE_KEYS.PIN_SALT);\r\n  const expected = await AsyncStorage.getItem(STORAGE_KEYS.PIN_HASH);\r\n  if (!salt || !expected) return { ok: false };\r\n  const given = simpleHash(`${salt}:${pin}`);\r\n  const ok = given === expected;\r\n\r\n  let attempts = Number(await AsyncStorage.getItem(STORAGE_KEYS.FAILED_ATTEMPTS) || '0');\r\n  if (ok) {\r\n    await AsyncStorage.setItem(STORAGE_KEYS.FAILED_ATTEMPTS, '0');\r\n    return { ok: true };\r\n  }\r\n  attempts += 1;\r\n  await AsyncStorage.setItem(STORAGE_KEYS.FAILED_ATTEMPTS, String(attempts));\r\n  if (attempts >= 5) {\r\n    const lockMs = 30_000 * Math.min(4, attempts - 4); // 30s, 60s, 90s, 120s\r\n    await AsyncStorage.setItem(STORAGE_KEYS.LOCKOUT_UNTIL, String(now + lockMs));\r\n    return { ok: false, reason: 'lockout' };\r\n  }\r\n  return { ok: false };\r\n}\r\n\r\nexport async function setBiometricsEnabled(enabled) {\r\n  await AsyncStorage.setItem(STORAGE_KEYS.BIO_ENABLED, enabled ? '1' : '0');\r\n  return true;\r\n}\r\n\r\nexport async function isBiometricsEnabled() {\r\n  const v = await AsyncStorage.getItem(STORAGE_KEYS.BIO_ENABLED);\r\n  return v === '1';\r\n}\r\n\r\nexport async function unlockWithBiometrics() {\r\n  // Placeholder for real expo-local-authentication integration\r\n  const enabled = await isBiometricsEnabled();\r\n  if (!enabled) return { ok: false };\r\n  // In real app: prompt biometric and return result\r\n  return { ok: true };\r\n}\r\n\r\nexport async function setRecoveryCode(code) {\r\n  const hash = simpleHash(code);\r\n  await AsyncStorage.setItem(STORAGE_KEYS.RECOVERY_HASH, hash);\r\n  return true;\r\n}\r\n\r\nexport async function verifyRecovery(code) {\r\n  const expected = await AsyncStorage.getItem(STORAGE_KEYS.RECOVERY_HASH);\r\n  if (!expected) return false;\r\n  return simpleHash(code) === expected;\r\n}\r\n\r\nexport async function setAutoLockTimeout(seconds) {\r\n  await AsyncStorage.setItem(STORAGE_KEYS.TIMEOUT_SECONDS, String(seconds));\r\n  return true;\r\n}\r\n\r\nexport async function getAutoLockTimeout() {\r\n  return Number(await AsyncStorage.getItem(STORAGE_KEYS.TIMEOUT_SECONDS) || '0');\r\n}\r\n\r\nexport async function emergencyReset() {\r\n  await disableLock();\r\n  return true;\r\n}\r\n\r\nexport const lockStorageKeys = STORAGE_KEYS;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]}