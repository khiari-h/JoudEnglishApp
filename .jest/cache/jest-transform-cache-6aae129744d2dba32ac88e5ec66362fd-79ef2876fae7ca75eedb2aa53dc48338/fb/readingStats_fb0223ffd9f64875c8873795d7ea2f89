f02c7a704b27b951e5334b65bbd3fe2e
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateTotalQuestions = exports.calculateTotalProgress = exports.calculateExerciseProgress = exports.calculateCompletedQuestionsCount = void 0;
var calculateTotalQuestions = exports.calculateTotalQuestions = function calculateTotalQuestions(readingData) {
  return readingData.reduce(function (total, exercise) {
    var _exercise$questions;
    return total + (((_exercise$questions = exercise.questions) == null ? void 0 : _exercise$questions.length) || 0);
  }, 0);
};
var calculateCompletedQuestionsCount = exports.calculateCompletedQuestionsCount = function calculateCompletedQuestionsCount(completedQuestions) {
  return Object.values(completedQuestions).reduce(function (total, questions) {
    return total + ((questions == null ? void 0 : questions.length) || 0);
  }, 0);
};
var calculateTotalProgress = exports.calculateTotalProgress = function calculateTotalProgress(readingData, completedQuestions) {
  var totalQuestions = calculateTotalQuestions(readingData);
  var completedCount = calculateCompletedQuestionsCount(completedQuestions);
  return totalQuestions > 0 ? Math.round(completedCount / totalQuestions * 100) : 0;
};
var calculateExerciseProgress = exports.calculateExerciseProgress = function calculateExerciseProgress(readingData, completedQuestions) {
  return readingData.map(function (exercise, index) {
    var _exercise$questions2, _completedQuestions$i;
    var totalQuestions = ((_exercise$questions2 = exercise.questions) == null ? void 0 : _exercise$questions2.length) || 0;
    var completedCount = ((_completedQuestions$i = completedQuestions[index]) == null ? void 0 : _completedQuestions$i.length) || 0;
    var progress = totalQuestions > 0 ? completedCount / totalQuestions * 100 : 0;
    return {
      title: exercise.title,
      totalQuestions: totalQuestions,
      completedQuestions: completedCount,
      progress: Math.round(progress)
    };
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjYWxjdWxhdGVUb3RhbFF1ZXN0aW9ucyIsImV4cG9ydHMiLCJyZWFkaW5nRGF0YSIsInJlZHVjZSIsInRvdGFsIiwiZXhlcmNpc2UiLCJfZXhlcmNpc2UkcXVlc3Rpb25zIiwicXVlc3Rpb25zIiwibGVuZ3RoIiwiY2FsY3VsYXRlQ29tcGxldGVkUXVlc3Rpb25zQ291bnQiLCJjb21wbGV0ZWRRdWVzdGlvbnMiLCJPYmplY3QiLCJ2YWx1ZXMiLCJjYWxjdWxhdGVUb3RhbFByb2dyZXNzIiwidG90YWxRdWVzdGlvbnMiLCJjb21wbGV0ZWRDb3VudCIsIk1hdGgiLCJyb3VuZCIsImNhbGN1bGF0ZUV4ZXJjaXNlUHJvZ3Jlc3MiLCJtYXAiLCJpbmRleCIsIl9leGVyY2lzZSRxdWVzdGlvbnMyIiwiX2NvbXBsZXRlZFF1ZXN0aW9ucyRpIiwicHJvZ3Jlc3MiLCJ0aXRsZSJdLCJzb3VyY2VzIjpbInJlYWRpbmdTdGF0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB1dGlscy9yZWFkaW5nL3JlYWRpbmdTdGF0cy5qcyAtIEZvbmN0aW9ucyB1dGlsaXRhaXJlcyAocGF0dGVybiBpZGVudGlxdWUgw6Agdm9jYWJ1bGFyeVN0YXRzKVxuXG4vKipcbiAqIPCfk4ogVXRpbGl0YWlyZXMgZGUgY2FsY3VsIHBvdXIgUmVhZGluZ1xuICogUGF0dGVybiBpZGVudGlxdWUgw6AgdXRpbHMvdm9jYWJ1bGFyeS92b2NhYnVsYXJ5U3RhdHMuanNcbiAqIEdhcmRlIGxhIGxvZ2lxdWUgbcOpdGllciBzw6lwYXLDqWUgZGVzIGNvbXBvc2FudHNcbiAqL1xuXG4vKipcbiAqIENhbGN1bGVyIGxlIG5vbWJyZSB0b3RhbCBkZSBxdWVzdGlvbnNcbiAqIEBwYXJhbSB7QXJyYXl9IHJlYWRpbmdEYXRhIC0gRG9ubsOpZXMgZGUgbGVjdHVyZSBbeyBxdWVzdGlvbnM6IFsuLi5dIH1dXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBOb21icmUgdG90YWwgZGUgcXVlc3Rpb25zXG4gKi9cbmV4cG9ydCBjb25zdCBjYWxjdWxhdGVUb3RhbFF1ZXN0aW9ucyA9IChyZWFkaW5nRGF0YSkgPT4ge1xuICByZXR1cm4gcmVhZGluZ0RhdGEucmVkdWNlKCh0b3RhbCwgZXhlcmNpc2UpID0+IHtcbiAgICByZXR1cm4gdG90YWwgKyAoZXhlcmNpc2UucXVlc3Rpb25zPy5sZW5ndGggfHwgMCk7XG4gIH0sIDApO1xufTtcblxuLyoqXG4gKiBDYWxjdWxlciBsZSBub21icmUgZGUgcXVlc3Rpb25zIGNvbXBsw6l0w6llc1xuICogQHBhcmFtIHtPYmplY3R9IGNvbXBsZXRlZFF1ZXN0aW9ucyAtIFF1ZXN0aW9ucyBjb21wbMOpdMOpZXMgezA6IFswLDEsMl0sIDE6IFswXX1cbiAqIEByZXR1cm5zIHtudW1iZXJ9IE5vbWJyZSBkZSBxdWVzdGlvbnMgY29tcGzDqXTDqWVzXG4gKi9cbmV4cG9ydCBjb25zdCBjYWxjdWxhdGVDb21wbGV0ZWRRdWVzdGlvbnNDb3VudCA9IChjb21wbGV0ZWRRdWVzdGlvbnMpID0+IHtcbiAgcmV0dXJuIE9iamVjdC52YWx1ZXMoY29tcGxldGVkUXVlc3Rpb25zKS5yZWR1Y2UoKHRvdGFsLCBxdWVzdGlvbnMpID0+IHtcbiAgICByZXR1cm4gdG90YWwgKyAocXVlc3Rpb25zPy5sZW5ndGggfHwgMCk7XG4gIH0sIDApO1xufTtcblxuLyoqXG4gKiBDYWxjdWxlciBsYSBwcm9ncmVzc2lvbiB0b3RhbGUgZW4gcG91cmNlbnRhZ2VcbiAqIEBwYXJhbSB7QXJyYXl9IHJlYWRpbmdEYXRhIC0gRG9ubsOpZXMgZGUgbGVjdHVyZVxuICogQHBhcmFtIHtPYmplY3R9IGNvbXBsZXRlZFF1ZXN0aW9ucyAtIFF1ZXN0aW9ucyBjb21wbMOpdMOpZXNcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFBvdXJjZW50YWdlIGRlIHByb2dyZXNzaW9uICgwLTEwMClcbiAqL1xuZXhwb3J0IGNvbnN0IGNhbGN1bGF0ZVRvdGFsUHJvZ3Jlc3MgPSAocmVhZGluZ0RhdGEsIGNvbXBsZXRlZFF1ZXN0aW9ucykgPT4ge1xuICBjb25zdCB0b3RhbFF1ZXN0aW9ucyA9IGNhbGN1bGF0ZVRvdGFsUXVlc3Rpb25zKHJlYWRpbmdEYXRhKTtcbiAgY29uc3QgY29tcGxldGVkQ291bnQgPSBjYWxjdWxhdGVDb21wbGV0ZWRRdWVzdGlvbnNDb3VudChjb21wbGV0ZWRRdWVzdGlvbnMpO1xuICBcbiAgcmV0dXJuIHRvdGFsUXVlc3Rpb25zID4gMCA/IE1hdGgucm91bmQoKGNvbXBsZXRlZENvdW50IC8gdG90YWxRdWVzdGlvbnMpICogMTAwKSA6IDA7XG59O1xuXG4vKipcbiAqIENhbGN1bGVyIGxhIHByb2dyZXNzaW9uIHBhciBleGVyY2ljZSBkZSBsZWN0dXJlXG4gKiBAcGFyYW0ge0FycmF5fSByZWFkaW5nRGF0YSAtIERvbm7DqWVzIGRlIGxlY3R1cmVcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb21wbGV0ZWRRdWVzdGlvbnMgLSBRdWVzdGlvbnMgY29tcGzDqXTDqWVzXG4gKiBAcmV0dXJucyB7QXJyYXl9IFByb2dyZXNzaW9uIHBhciBleGVyY2ljZVxuICovXG5leHBvcnQgY29uc3QgY2FsY3VsYXRlRXhlcmNpc2VQcm9ncmVzcyA9IChyZWFkaW5nRGF0YSwgY29tcGxldGVkUXVlc3Rpb25zKSA9PiB7XG4gIHJldHVybiByZWFkaW5nRGF0YS5tYXAoKGV4ZXJjaXNlLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IHRvdGFsUXVlc3Rpb25zID0gZXhlcmNpc2UucXVlc3Rpb25zPy5sZW5ndGggfHwgMDtcbiAgICBjb25zdCBjb21wbGV0ZWRDb3VudCA9IGNvbXBsZXRlZFF1ZXN0aW9uc1tpbmRleF0/Lmxlbmd0aCB8fCAwO1xuICAgIGNvbnN0IHByb2dyZXNzID0gdG90YWxRdWVzdGlvbnMgPiAwID8gKGNvbXBsZXRlZENvdW50IC8gdG90YWxRdWVzdGlvbnMpICogMTAwIDogMDtcbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgdGl0bGU6IGV4ZXJjaXNlLnRpdGxlLFxuICAgICAgdG90YWxRdWVzdGlvbnMsXG4gICAgICBjb21wbGV0ZWRRdWVzdGlvbnM6IGNvbXBsZXRlZENvdW50LFxuICAgICAgcHJvZ3Jlc3M6IE1hdGgucm91bmQocHJvZ3Jlc3MpLFxuICAgIH07XG4gIH0pO1xufTsiXSwibWFwcGluZ3MiOiI7Ozs7QUFhTyxJQUFNQSx1QkFBdUIsR0FBQUMsT0FBQSxDQUFBRCx1QkFBQSxHQUFHLFNBQTFCQSx1QkFBdUJBLENBQUlFLFdBQVcsRUFBSztFQUN0RCxPQUFPQSxXQUFXLENBQUNDLE1BQU0sQ0FBQyxVQUFDQyxLQUFLLEVBQUVDLFFBQVEsRUFBSztJQUFBLElBQUFDLG1CQUFBO0lBQzdDLE9BQU9GLEtBQUssSUFBSSxFQUFBRSxtQkFBQSxHQUFBRCxRQUFRLENBQUNFLFNBQVMscUJBQWxCRCxtQkFBQSxDQUFvQkUsTUFBTSxLQUFJLENBQUMsQ0FBQztFQUNsRCxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQU9NLElBQU1DLGdDQUFnQyxHQUFBUixPQUFBLENBQUFRLGdDQUFBLEdBQUcsU0FBbkNBLGdDQUFnQ0EsQ0FBSUMsa0JBQWtCLEVBQUs7RUFDdEUsT0FBT0MsTUFBTSxDQUFDQyxNQUFNLENBQUNGLGtCQUFrQixDQUFDLENBQUNQLE1BQU0sQ0FBQyxVQUFDQyxLQUFLLEVBQUVHLFNBQVMsRUFBSztJQUNwRSxPQUFPSCxLQUFLLElBQUksQ0FBQUcsU0FBUyxvQkFBVEEsU0FBUyxDQUFFQyxNQUFNLEtBQUksQ0FBQyxDQUFDO0VBQ3pDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDUCxDQUFDO0FBUU0sSUFBTUssc0JBQXNCLEdBQUFaLE9BQUEsQ0FBQVksc0JBQUEsR0FBRyxTQUF6QkEsc0JBQXNCQSxDQUFJWCxXQUFXLEVBQUVRLGtCQUFrQixFQUFLO0VBQ3pFLElBQU1JLGNBQWMsR0FBR2QsdUJBQXVCLENBQUNFLFdBQVcsQ0FBQztFQUMzRCxJQUFNYSxjQUFjLEdBQUdOLGdDQUFnQyxDQUFDQyxrQkFBa0IsQ0FBQztFQUUzRSxPQUFPSSxjQUFjLEdBQUcsQ0FBQyxHQUFHRSxJQUFJLENBQUNDLEtBQUssQ0FBRUYsY0FBYyxHQUFHRCxjQUFjLEdBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQztBQUNyRixDQUFDO0FBUU0sSUFBTUkseUJBQXlCLEdBQUFqQixPQUFBLENBQUFpQix5QkFBQSxHQUFHLFNBQTVCQSx5QkFBeUJBLENBQUloQixXQUFXLEVBQUVRLGtCQUFrQixFQUFLO0VBQzVFLE9BQU9SLFdBQVcsQ0FBQ2lCLEdBQUcsQ0FBQyxVQUFDZCxRQUFRLEVBQUVlLEtBQUssRUFBSztJQUFBLElBQUFDLG9CQUFBLEVBQUFDLHFCQUFBO0lBQzFDLElBQU1SLGNBQWMsR0FBRyxFQUFBTyxvQkFBQSxHQUFBaEIsUUFBUSxDQUFDRSxTQUFTLHFCQUFsQmMsb0JBQUEsQ0FBb0JiLE1BQU0sS0FBSSxDQUFDO0lBQ3RELElBQU1PLGNBQWMsR0FBRyxFQUFBTyxxQkFBQSxHQUFBWixrQkFBa0IsQ0FBQ1UsS0FBSyxDQUFDLHFCQUF6QkUscUJBQUEsQ0FBMkJkLE1BQU0sS0FBSSxDQUFDO0lBQzdELElBQU1lLFFBQVEsR0FBR1QsY0FBYyxHQUFHLENBQUMsR0FBSUMsY0FBYyxHQUFHRCxjQUFjLEdBQUksR0FBRyxHQUFHLENBQUM7SUFFakYsT0FBTztNQUNMVSxLQUFLLEVBQUVuQixRQUFRLENBQUNtQixLQUFLO01BQ3JCVixjQUFjLEVBQWRBLGNBQWM7TUFDZEosa0JBQWtCLEVBQUVLLGNBQWM7TUFDbENRLFFBQVEsRUFBRVAsSUFBSSxDQUFDQyxLQUFLLENBQUNNLFFBQVE7SUFDL0IsQ0FBQztFQUNILENBQUMsQ0FBQztBQUNKLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=