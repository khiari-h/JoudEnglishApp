6e6654acae62772be47893b6bf991ea7
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _reactNative = require("react-native");
var _style2 = _interopRequireDefault(require("./style"));
var _BasePressable = _interopRequireDefault(require("./BasePressable"));
var _ButtonSpinner = _interopRequireDefault(require("./ButtonSpinner"));
var _ButtonLabel = _interopRequireDefault(require("./ButtonLabel"));
var _ButtonIcon = require("./ButtonIcon");
var _useButtonStyles2 = _interopRequireDefault(require("./useButtonStyles"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["title", "onPress", "variant", "size", "color", "fullWidth", "disabled", "loading", "leftIcon", "rightIcon", "iconOnly", "style", "textStyle", "onLongPress", "elevation", "uppercase", "rounded"];
var Button = function Button(_ref) {
  var title = _ref.title,
    onPress = _ref.onPress,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? "filled" : _ref$variant,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? "medium" : _ref$size,
    _ref$color = _ref.color,
    color = _ref$color === void 0 ? "primary" : _ref$color,
    _ref$fullWidth = _ref.fullWidth,
    fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$loading = _ref.loading,
    loading = _ref$loading === void 0 ? false : _ref$loading,
    leftIcon = _ref.leftIcon,
    rightIcon = _ref.rightIcon,
    iconOnly = _ref.iconOnly,
    _style = _ref.style,
    textStyle = _ref.textStyle,
    onLongPress = _ref.onLongPress,
    _ref$elevation = _ref.elevation,
    elevation = _ref$elevation === void 0 ? true : _ref$elevation,
    _ref$uppercase = _ref.uppercase,
    uppercase = _ref$uppercase === void 0 ? false : _ref$uppercase,
    _ref$rounded = _ref.rounded,
    rounded = _ref$rounded === void 0 ? false : _ref$rounded,
    props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var _useButtonStyles = (0, _useButtonStyles2.default)({
      variant: variant,
      size: size,
      color: color,
      disabled: disabled,
      elevation: elevation,
      rounded: rounded,
      fullWidth: fullWidth
    }),
    baseColor = _useButtonStyles.baseColor,
    sizeStyles = _useButtonStyles.sizeStyles,
    variantStyles = _useButtonStyles.variantStyles,
    elevationStyle = _useButtonStyles.elevationStyle,
    radiusStyle = _useButtonStyles.radiusStyle,
    fullWidthStyle = _useButtonStyles.fullWidthStyle;
  var iconSize = sizeStyles.iconSize;
  return (0, _jsxRuntime.jsx)(_BasePressable.default, Object.assign({
    style: function style(_ref2) {
      var pressed = _ref2.pressed;
      return [_style2.default.button, sizeStyles.button, variantStyles.button, fullWidthStyle, pressed && variantStyles.pressed, elevationStyle, radiusStyle, _style];
    },
    onPress: onPress,
    onLongPress: onLongPress,
    disabled: disabled || loading,
    androidRipple: variant !== "text" && variant !== "outlined" ? {
      color: `${baseColor}30`,
      borderless: false
    } : null
  }, props, {
    children: loading ? (0, _jsxRuntime.jsx)(_ButtonSpinner.default, {
      size: sizeStyles.loaderSize,
      color: variantStyles.text.color
    }) : (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: _style2.default.contentContainer,
      children: [leftIcon && !iconOnly && (0, _jsxRuntime.jsx)(_ButtonIcon.LeftIcon, {
        name: leftIcon,
        size: iconSize,
        color: variantStyles.icon
      }), iconOnly && (0, _jsxRuntime.jsx)(_ButtonIcon.IconOnly, {
        name: iconOnly,
        size: iconSize,
        color: variantStyles.icon
      }), !iconOnly && (0, _jsxRuntime.jsx)(_ButtonLabel.default, {
        title: title,
        sizeStyles: sizeStyles,
        variantStyles: variantStyles,
        uppercase: uppercase,
        textStyle: textStyle
      }), rightIcon && !iconOnly && (0, _jsxRuntime.jsx)(_ButtonIcon.RightIcon, {
        name: rightIcon,
        size: iconSize,
        color: variantStyles.icon
      })]
    })
  }));
};
var _default = exports.default = Button;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,