a3196dfab39f8d5c9035b90df0b554a0
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startWebLayoutAnimation = startWebLayoutAnimation;
exports.tryActivateLayoutTransition = tryActivateLayoutTransition;
var _config = require("./config");
var _commonTypes = require("../animationBuilder/commonTypes");
var _createAnimation = require("./createAnimation");
var _componentUtils = require("./componentUtils");
var _domUtils = require("./domUtils");
var _animationBuilder = require("../animationBuilder");
var _componentStyle = require("./componentStyle");
var _Easing = require("../../Easing");
var _logger = require("../../logger");
function chooseConfig(animationType, props) {
  var config = animationType === _commonTypes.LayoutAnimationType.ENTERING ? props.entering : animationType === _commonTypes.LayoutAnimationType.EXITING ? props.exiting : animationType === _commonTypes.LayoutAnimationType.LAYOUT ? props.layout : null;
  return config;
}
function checkUndefinedAnimationFail(initialAnimationName, needsCustomization) {
  if (initialAnimationName in _config.Animations || needsCustomization) {
    return false;
  }
  _logger.logger.warn("Couldn't load entering/exiting animation. Current version supports only predefined animations with modifiers: duration, delay, easing, randomizeDelay, withCallback, reducedMotion.");
  return true;
}
function maybeReportOverwrittenProperties(keyframe, styles) {
  var propertyRegex = /([a-zA-Z-]+)(?=:)/g;
  var animationProperties = new Set();
  for (var match of keyframe.matchAll(propertyRegex)) {
    animationProperties.add(match[1]);
  }
  var commonProperties = Array.from(styles).filter(function (style) {
    return animationProperties.has(style);
  });
  if (commonProperties.length === 0) {
    return;
  }
  _logger.logger.warn(`${commonProperties.length === 1 ? 'Property' : 'Properties'} [${commonProperties.join(', ')}] may be overwritten by a layout animation. Please wrap your component with an animated view and apply the layout animation on the wrapper.`);
}
function chooseAction(animationType, animationConfig, element, transitionData) {
  switch (animationType) {
    case _commonTypes.LayoutAnimationType.ENTERING:
      (0, _componentUtils.setElementAnimation)(element, animationConfig, true);
      break;
    case _commonTypes.LayoutAnimationType.LAYOUT:
      transitionData.reversed = animationConfig.reversed;
      (0, _componentUtils.handleLayoutTransition)(element, animationConfig, transitionData);
      break;
    case _commonTypes.LayoutAnimationType.EXITING:
      (0, _componentUtils.handleExitingAnimation)(element, animationConfig);
      break;
  }
}
function tryGetAnimationConfig(props, animationType) {
  var config = chooseConfig(animationType, props);
  if (!config) {
    return null;
  }
  var isLayoutTransition = animationType === _commonTypes.LayoutAnimationType.LAYOUT;
  var isCustomKeyframe = config instanceof _animationBuilder.Keyframe;
  var hasInitialValues = config.initialValues !== undefined;
  var animationName;
  if (isCustomKeyframe) {
    animationName = (0, _createAnimation.createCustomKeyFrameAnimation)(config.definitions);
  } else if (typeof config === 'function') {
    animationName = config.presetName;
  } else {
    animationName = config.constructor.presetName;
  }
  if (hasInitialValues) {
    animationName = (0, _createAnimation.createAnimationWithInitialValues)(animationName, config.initialValues);
  }
  var shouldFail = checkUndefinedAnimationFail(animationName, isLayoutTransition || isCustomKeyframe || hasInitialValues);
  if (shouldFail) {
    return null;
  }
  if (isCustomKeyframe) {
    var keyframeTimestamps = Object.keys(config.definitions);
    if (!(keyframeTimestamps.includes('100') || keyframeTimestamps.includes('to'))) {
      _logger.logger.warn(`Neither '100' nor 'to' was specified in Keyframe definition. This may result in wrong final position of your component. One possible solution is to duplicate last timestamp in definition as '100' (or 'to')`);
    }
  }
  var animationConfig = (0, _componentUtils.getProcessedConfig)(animationName, animationType, config);
  return animationConfig;
}
function startWebLayoutAnimation(props, element, animationType, transitionData) {
  var animationConfig = tryGetAnimationConfig(props, animationType);
  (0, _componentUtils.maybeModifyStyleForKeyframe)(element, props.entering);
  if ((animationConfig == null ? void 0 : animationConfig.animationName) in _config.Animations) {
    maybeReportOverwrittenProperties(_config.Animations[animationConfig == null ? void 0 : animationConfig.animationName].style, element.style);
  }
  if (animationConfig) {
    chooseAction(animationType, animationConfig, element, transitionData);
  } else {
    (0, _componentStyle.makeElementVisible)(element, 0);
  }
}
function tryActivateLayoutTransition(props, element, snapshot) {
  var _enteringV, _exitingV, _easingXV$EasingNameS, _easingXV, _easingYV$EasingNameS, _easingYV;
  if (!props.layout) {
    return;
  }
  var rect = element.getBoundingClientRect();
  if ((0, _domUtils.areDOMRectsEqual)(rect, snapshot)) {
    return;
  }
  var enteringAnimation = (_enteringV = props.layout.enteringV) == null ? void 0 : _enteringV.presetName;
  var exitingAnimation = (_exitingV = props.layout.exitingV) == null ? void 0 : _exitingV.presetName;
  var transitionData = {
    translateX: snapshot.x - rect.x,
    translateY: snapshot.y - rect.y,
    scaleX: snapshot.width / rect.width,
    scaleY: snapshot.height / rect.height,
    reversed: false,
    easingX: (_easingXV$EasingNameS = (_easingXV = props.layout.easingXV) == null ? void 0 : _easingXV[_Easing.EasingNameSymbol]) != null ? _easingXV$EasingNameS : 'ease',
    easingY: (_easingYV$EasingNameS = (_easingYV = props.layout.easingYV) == null ? void 0 : _easingYV[_Easing.EasingNameSymbol]) != null ? _easingYV$EasingNameS : 'ease',
    entering: enteringAnimation,
    exiting: exitingAnimation
  };
  startWebLayoutAnimation(props, element, _commonTypes.LayoutAnimationType.LAYOUT, transitionData);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,