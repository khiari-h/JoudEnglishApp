797d2cae0439bdb942561016993e1727
_getJestObj().mock('expo-router', function () {
  return {
    useFocusEffect: jest.fn(function () {}),
    router: {
      push: jest.fn(),
      back: jest.fn()
    },
    Stack: function Stack(_ref) {
      var children = _ref.children;
      return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
        children: children
      });
    },
    useLocalSearchParams: function useLocalSearchParams() {
      return {};
    },
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn(),
        canGoBack: jest.fn(function () {
          return true;
        }),
        addListener: jest.fn(),
        isFocused: jest.fn(function () {
          return true;
        })
      };
    }
  };
});
_getJestObj().mock('../../src/screens/exercises/vocabulary/hooks/useVocabulary', function () {
  return {
    __esModule: true,
    default: jest.fn(function (vocabularyData, level, mode) {
      if (!vocabularyData) {
        return {
          loaded: false
        };
      }
      var first = vocabularyData.exercises && vocabularyData.exercises[0] || {
        title: '',
        words: []
      };
      return {
        categoryIndex: 0,
        wordIndex: 0,
        showTranslation: false,
        completedWords: {},
        loaded: true,
        showDetailedProgress: false,
        currentWord: first.words[0] || null,
        currentCategory: first,
        changeCategory: jest.fn(),
        toggleTranslation: jest.fn(),
        toggleDetailedProgress: jest.fn(),
        handleNext: jest.fn().mockReturnValue({
          completed: true
        }),
        handlePrevious: jest.fn(),
        canGoToPrevious: false,
        isLastWordInExercise: true,
        display: {
          wordCounter: '1 / ' + (first.words.length || 0),
          categories: (vocabularyData.exercises || []).map(function (ex) {
            return ex.title;
          }),
          currentWord: first.words[0] || null,
          currentCategory: first
        },
        saveData: jest.fn().mockResolvedValue(undefined)
      };
    })
  };
});
_getJestObj().mock('../../src/utils/vocabulary/vocabularyDataHelper', function () {
  return {
    isBonusLevel: jest.fn(function () {
      return false;
    }),
    getLevelColor: jest.fn(function () {
      return 'blue';
    }),
    getVocabularyData: jest.fn(function (level, mode) {
      if (level === 'A1' || level === '1') {
        return {
          exercises: [{
            title: 'Identité & informations personnelles',
            words: [{
              word: 'name',
              translation: 'nom',
              example: 'My name is Sarah.'
            }, {
              word: 'hello',
              translation: 'bonjour',
              example: 'Hello, how are you?'
            }]
          }]
        };
      }
      if (level === 'B1' || level === '3') {
        return {
          exercises: [{
            title: 'Expression & Communication Avancée',
            words: [{
              word: 'rhetoric',
              translation: 'rhétorique',
              example: 'His rhetoric was powerful enough to convince the entire audience.'
            }, {
              word: 'sophisticated',
              translation: 'sophistiqué',
              example: 'She has a sophisticated understanding of the topic.'
            }]
          }]
        };
      }
      if (level === 'C1' || level === '5') {
        return {
          exercises: [{
            title: 'Maîtrise Linguistique Avancée',
            words: [{
              word: 'ubiquitous',
              translation: 'omniprésent',
              example: 'Smartphones have become ubiquitous in modern society.'
            }, {
              word: 'paradigm',
              translation: 'paradigme',
              example: 'This discovery represents a new paradigm in science.'
            }]
          }]
        };
      }
      return {
        exercises: [{
          title: 'Default Category',
          words: [{
            word: 'default',
            translation: 'défaut',
            example: 'This is a default word.'
          }]
        }]
      };
    }),
    loadVocabularyData: jest.fn(function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* (level, mode) {
        var mod = module.exports && module.exports.getVocabularyData ? module.exports.getVocabularyData : function () {
          return null;
        };
        return mod(level, mode);
      });
      return function (_x, _x2) {
        return _ref2.apply(this, arguments);
      };
    }())
  };
});
_getJestObj().mock('../../src/hooks/useLastActivity', function () {
  return {
    __esModule: true,
    default: jest.fn(function () {
      return {
        saveActivity: jest.fn(),
        lastActivity: null,
        isLoading: false,
        clearActivity: jest.fn(),
        reload: jest.fn()
      };
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _vocabulary = _interopRequireDefault(require("../../src/screens/exercises/vocabulary"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Test d\'intégration: Chargement des données par niveau', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  test('VocabularyExercise charge les données du niveau A1 correctement', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'A1',
            mode: 'classic'
          }
        }
      })),
      getByText = _render.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('name')).toBeTruthy();
      expect(getByText('Identité & informations personnelles')).toBeTruthy();
      expect(getByText('Reveal Translation')).toBeTruthy();
    });
    var revealButton = getByText('Reveal Translation');
    _reactNative.fireEvent.press(revealButton);
  }));
  test('VocabularyExercise charge les données du niveau B1 correctement', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'B1',
            mode: 'classic'
          }
        }
      })),
      getByText = _render2.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('rhetoric')).toBeTruthy();
      expect(getByText('Expression & Communication Avancée')).toBeTruthy();
      expect(getByText('Reveal Translation')).toBeTruthy();
    });
  }));
  test('VocabularyExercise charge les données du niveau C1 correctement', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'C1',
            mode: 'classic'
          }
        }
      })),
      getByText = _render3.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('ubiquitous')).toBeTruthy();
      expect(getByText('Maîtrise Linguistique Avancée')).toBeTruthy();
      expect(getByText('Reveal Translation')).toBeTruthy();
    });
  }));
  test('Vérification que les mots sont bien différents selon les niveaux', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'A1',
            mode: 'classic'
          }
        }
      })),
      getByTextA1 = _render4.getByText,
      queryByTextA1 = _render4.queryByText,
      rerender = _render4.rerender;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTextA1('name')).toBeTruthy();
      expect(queryByTextA1('rhetoric')).toBeNull();
      expect(queryByTextA1('ubiquitous')).toBeNull();
    });
    rerender((0, _jsxRuntime.jsx)(_vocabulary.default, {
      route: {
        params: {
          level: 'B1',
          mode: 'classic'
        }
      }
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTextA1('rhetoric')).toBeTruthy();
      expect(queryByTextA1('name')).toBeNull();
      expect(queryByTextA1('ubiquitous')).toBeNull();
    });
  }));
  test('Le mode d\'exercice est correctement pris en compte', (0, _asyncToGenerator2.default)(function* () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'A1',
            mode: 'reverse'
          }
        }
      })),
      getByText = _render5.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('name')).toBeTruthy();
      expect(getByText('Identité & informations personnelles')).toBeTruthy();
      expect(getByText('Reveal Translation')).toBeTruthy();
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,