40d28938f7d2fbab9dfcb92961476874
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.callMicrotasks = void 0;
exports.executeOnUIRuntimeSync = executeOnUIRuntimeSync;
exports.setupMicrotasks = exports.runOnUIImmediately = exports.runOnUI = exports.runOnJS = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _NativeReanimated = _interopRequireDefault(require("./NativeReanimated"));
var _PlatformChecker = require("./PlatformChecker");
var _shareables = require("./shareables");
var _commonTypes = require("./commonTypes");
var _errors = require("./errors");
var IS_JEST = (0, _PlatformChecker.isJest)();
var SHOULD_BE_USE_WEB = (0, _PlatformChecker.shouldBeUseWeb)();
var _runOnUIQueue = [];
var _worklet_3377922715333_init_data = {
  code: "function setupMicrotasks_threadsTs1(){let microtasksQueue=[];let isExecutingMicrotasksQueue=false;global.queueMicrotask=function(callback){microtasksQueue.push(callback);};global.__callMicrotasks=function(){if(isExecutingMicrotasksQueue){return;}try{isExecutingMicrotasksQueue=true;for(let index=0;index<microtasksQueue.length;index+=1){microtasksQueue[index]();}microtasksQueue=[];global._maybeFlushUIUpdatesQueue();}finally{isExecutingMicrotasksQueue=false;}};}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\threads.ts",
  sourceMap: "{\"version\":3,\"names\":[\"setupMicrotasks_threadsTs1\",\"microtasksQueue\",\"isExecutingMicrotasksQueue\",\"global\",\"queueMicrotask\",\"callback\",\"push\",\"__callMicrotasks\",\"index\",\"length\",\"_maybeFlushUIUpdatesQueue\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/threads.ts\"],\"mappings\":\"AAiBO,SAAAA,0BAA2BA,CAAA,EAGhC,GAAI,CAAAC,eAAkC,CAAG,EAAE,CAC3C,GAAI,CAAAC,0BAA0B,CAAG,KAAK,CACtCC,MAAM,CAACC,cAAc,CAAG,SAACC,QAAoB,CAAK,CAChDJ,eAAe,CAACK,IAAI,CAACD,QAAQ,CAAC,CAChC,CAAC,CAEDF,MAAM,CAACI,gBAAgB,CAAG,UAAM,CAC9B,GAAIL,0BAA0B,CAAE,CAC9B,OACF,CACA,GAAI,CACFA,0BAA0B,CAAG,IAAI,CACjC,IAAK,GAAI,CAAAM,KAAK,CAAG,CAAC,CAAEA,KAAK,CAAGP,eAAe,CAACQ,MAAM,CAAED,KAAK,EAAI,CAAC,CAAE,CAE9DP,eAAe,CAACO,KAAK,CAAC,CAAC,CAAC,CAC1B,CACAP,eAAe,CAAG,EAAE,CACpBE,MAAM,CAACO,yBAAyB,CAAC,CAAC,CACpC,CAAC,OAAS,CACRR,0BAA0B,CAAG,KAAK,CACpC,CACF,CAAC,CACH\",\"ignoreList\":[]}",
  version: "3.16.7"
};
var setupMicrotasks = exports.setupMicrotasks = function () {
  var _e = [new global.Error(), 1, -27];
  var setupMicrotasks = function setupMicrotasks() {
    var microtasksQueue = [];
    var isExecutingMicrotasksQueue = false;
    global.queueMicrotask = function (callback) {
      microtasksQueue.push(callback);
    };
    global.__callMicrotasks = function () {
      if (isExecutingMicrotasksQueue) {
        return;
      }
      try {
        isExecutingMicrotasksQueue = true;
        for (var index = 0; index < microtasksQueue.length; index += 1) {
          microtasksQueue[index]();
        }
        microtasksQueue = [];
        global._maybeFlushUIUpdatesQueue();
      } finally {
        isExecutingMicrotasksQueue = false;
      }
    };
  };
  setupMicrotasks.__closure = {};
  setupMicrotasks.__workletHash = 3377922715333;
  setupMicrotasks.__initData = _worklet_3377922715333_init_data;
  setupMicrotasks.__stackDetails = _e;
  return setupMicrotasks;
}();
var _worklet_15627757384281_init_data = {
  code: "function callMicrotasksOnUIThread_threadsTs2(){global.__callMicrotasks();}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\threads.ts",
  sourceMap: "{\"version\":3,\"names\":[\"callMicrotasksOnUIThread_threadsTs2\",\"global\",\"__callMicrotasks\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/threads.ts\"],\"mappings\":\"AA4CA,SAAAA,mCAAoCA,CAAA,EAElCC,MAAM,CAACC,gBAAgB,CAAC,CAAC,CAC3B\",\"ignoreList\":[]}",
  version: "3.16.7"
};
var callMicrotasksOnUIThread = function () {
  var _e = [new global.Error(), 1, -27];
  var callMicrotasksOnUIThread = function callMicrotasksOnUIThread() {
    global.__callMicrotasks();
  };
  callMicrotasksOnUIThread.__closure = {};
  callMicrotasksOnUIThread.__workletHash = 15627757384281;
  callMicrotasksOnUIThread.__initData = _worklet_15627757384281_init_data;
  callMicrotasksOnUIThread.__stackDetails = _e;
  return callMicrotasksOnUIThread;
}();
var callMicrotasks = exports.callMicrotasks = SHOULD_BE_USE_WEB ? function () {} : callMicrotasksOnUIThread;
var _worklet_15677667388482_init_data = {
  code: "function runOnUI_threadsTs3(worklet){const{__DEV__,SHOULD_BE_USE_WEB,isWorkletFunction,IS_JEST,NativeReanimatedModule,makeShareableCloneRecursive,callMicrotasks}=this.__closure;if(__DEV__&&!SHOULD_BE_USE_WEB&&_WORKLET){throw new ReanimatedError('`runOnUI` cannot be called on the UI runtime. Please call the function synchronously or use `queueMicrotask` or `requestAnimationFrame` instead.');}if(__DEV__&&!SHOULD_BE_USE_WEB&&!isWorkletFunction(worklet)){throw new ReanimatedError('`runOnUI` can only be used with worklets.');}return function(...args){if(IS_JEST){NativeReanimatedModule.scheduleOnUI(makeShareableCloneRecursive(function(){'worklet';worklet(...args);}));return;}if(__DEV__){makeShareableCloneRecursive(worklet);makeShareableCloneRecursive(args);}_runOnUIQueue.push([worklet,args]);if(_runOnUIQueue.length===1){queueMicrotask(function(){const queue=_runOnUIQueue;_runOnUIQueue=[];NativeReanimatedModule.scheduleOnUI(makeShareableCloneRecursive(function(){'worklet';queue.forEach(function([worklet,args]){worklet(...args);});callMicrotasks();}));});}};}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\threads.ts",
  sourceMap: "{\"version\":3,\"names\":[\"runOnUI_threadsTs3\",\"worklet\",\"__DEV__\",\"SHOULD_BE_USE_WEB\",\"isWorkletFunction\",\"IS_JEST\",\"NativeReanimatedModule\",\"makeShareableCloneRecursive\",\"callMicrotasks\",\"__closure\",\"_WORKLET\",\"ReanimatedError\",\"args\",\"scheduleOnUI\",\"_runOnUIQueue\",\"push\",\"length\",\"queueMicrotask\",\"queue\",\"forEach\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/threads.ts\"],\"mappings\":\"AAgFO,SAAAA,kBAEoBA,CAAAC,OAAA,QAAAC,OAAA,CAAAC,iBAAA,CAAAC,iBAAA,CAAAC,OAAA,CAAAC,sBAAA,CAAAC,2BAAA,CAAAC,cAAA,OAAAC,SAAA,CAEzB,GAAIP,OAAO,EAAI,CAACC,iBAAiB,EAAIO,QAAQ,CAAE,CAC7C,KAAM,IAAI,CAAAC,eAAe,CACvB,kJACF,CAAC,CACH,CACA,GAAIT,OAAO,EAAI,CAACC,iBAAiB,EAAI,CAACC,iBAAiB,CAACH,OAAO,CAAC,CAAE,CAChE,KAAM,IAAI,CAAAU,eAAe,CAAC,2CAA2C,CAAC,CACxE,CACA,MAAO,UAAC,GAAGC,IAAI,CAAK,CAClB,GAAIP,OAAO,CAAE,CAUXC,sBAAsB,CAACO,YAAY,CACjCN,2BAA2B,CAAC,UAAM,CAChC,SAAS,CACTN,OAAO,CAAC,GAAGW,IAAI,CAAC,CAClB,CAAC,CACH,CAAC,CACD,OACF,CACA,GAAIV,OAAO,CAAE,CAMXK,2BAA2B,CAACN,OAAO,CAAC,CACpCM,2BAA2B,CAACK,IAAI,CAAC,CACnC,CACAE,aAAa,CAACC,IAAI,CAAC,CAACd,OAAO,CAAqBW,IAAI,CAAC,CAAC,CACtD,GAAIE,aAAa,CAACE,MAAM,GAAK,CAAC,CAAE,CAC9BC,cAAc,CAAC,UAAM,CACnB,KAAM,CAAAC,KAAK,CAAGJ,aAAa,CAC3BA,aAAa,CAAG,EAAE,CAClBR,sBAAsB,CAACO,YAAY,CACjCN,2BAA2B,CAAC,UAAM,CAChC,SAAS,CAETW,KAAK,CAACC,OAAO,CAAC,SAAC,CAAClB,OAAO,CAAEW,IAAI,CAAC,CAAK,CACjCX,OAAO,CAAC,GAAGW,IAAI,CAAC,CAClB,CAAC,CAAC,CACFJ,cAAc,CAAC,CAAC,CAClB,CAAC,CACH,CAAC,CACH,CAAC,CAAC,CACJ,CACF,CAAC,CACH\",\"ignoreList\":[]}",
  version: "3.16.7"
};
var _worklet_8194144187976_init_data = {
  code: "function threadsTs4(){const{worklet,args}=this.__closure;worklet(...args);}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\threads.ts",
  sourceMap: "{\"version\":3,\"names\":[\"threadsTs4\",\"worklet\",\"args\",\"__closure\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/threads.ts\"],\"mappings\":\"AAwGoC,SAAAA,UAAMA,CAAA,QAAAC,OAAA,CAAAC,IAAA,OAAAC,SAAA,CAEhCF,OAAO,CAAC,GAAGC,IAAI,CAAC,CAClB\",\"ignoreList\":[]}",
  version: "3.16.7"
};
var _worklet_3662355562716_init_data = {
  code: "function threadsTs5(){const{queue,callMicrotasks}=this.__closure;queue.forEach(function([worklet,args]){worklet(...args);});callMicrotasks();}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\threads.ts",
  sourceMap: "{\"version\":3,\"names\":[\"threadsTs5\",\"queue\",\"callMicrotasks\",\"__closure\",\"forEach\",\"worklet\",\"args\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/threads.ts\"],\"mappings\":\"AA8HsC,SAAAA,UAAMA,CAAA,QAAAC,KAAA,CAAAC,cAAA,OAAAC,SAAA,CAGhCF,KAAK,CAACG,OAAO,CAAC,SAAC,CAACC,OAAO,CAAEC,IAAI,CAAC,CAAK,CACjCD,OAAO,CAAC,GAAGC,IAAI,CAAC,CAClB,CAAC,CAAC,CACFJ,cAAc,CAAC,CAAC,CAClB\",\"ignoreList\":[]}",
  version: "3.16.7"
};
var runOnUI = exports.runOnUI = function () {
  var _e = [new global.Error(), -8, -27];
  var runOnUI = function runOnUI(worklet) {
    if (__DEV__ && !SHOULD_BE_USE_WEB && _WORKLET) {
      throw new _errors.ReanimatedError('`runOnUI` cannot be called on the UI runtime. Please call the function synchronously or use `queueMicrotask` or `requestAnimationFrame` instead.');
    }
    if (__DEV__ && !SHOULD_BE_USE_WEB && !(0, _commonTypes.isWorkletFunction)(worklet)) {
      throw new _errors.ReanimatedError('`runOnUI` can only be used with worklets.');
    }
    return function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      if (IS_JEST) {
        _NativeReanimated.default.scheduleOnUI((0, _shareables.makeShareableCloneRecursive)(function () {
          var _e = [new global.Error(), -3, -27];
          var threadsTs4 = function threadsTs4() {
            worklet.apply(void 0, args);
          };
          threadsTs4.__closure = {
            worklet: worklet,
            args: args
          };
          threadsTs4.__workletHash = 8194144187976;
          threadsTs4.__initData = _worklet_8194144187976_init_data;
          threadsTs4.__stackDetails = _e;
          return threadsTs4;
        }()));
        return;
      }
      if (__DEV__) {
        (0, _shareables.makeShareableCloneRecursive)(worklet);
        (0, _shareables.makeShareableCloneRecursive)(args);
      }
      _runOnUIQueue.push([worklet, args]);
      if (_runOnUIQueue.length === 1) {
        queueMicrotask(function () {
          var queue = _runOnUIQueue;
          _runOnUIQueue = [];
          _NativeReanimated.default.scheduleOnUI((0, _shareables.makeShareableCloneRecursive)(function () {
            var _e = [new global.Error(), -3, -27];
            var threadsTs5 = function threadsTs5() {
              queue.forEach(function (_ref) {
                var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
                  worklet = _ref2[0],
                  args = _ref2[1];
                worklet.apply(void 0, (0, _toConsumableArray2.default)(args));
              });
              callMicrotasks();
            };
            threadsTs5.__closure = {
              queue: queue,
              callMicrotasks: callMicrotasks
            };
            threadsTs5.__workletHash = 3662355562716;
            threadsTs5.__initData = _worklet_3662355562716_init_data;
            threadsTs5.__stackDetails = _e;
            return threadsTs5;
          }()));
        });
      }
    };
  };
  runOnUI.__closure = {
    __DEV__: __DEV__,
    SHOULD_BE_USE_WEB: SHOULD_BE_USE_WEB,
    isWorkletFunction: _commonTypes.isWorkletFunction,
    IS_JEST: IS_JEST,
    NativeReanimatedModule: _NativeReanimated.default,
    makeShareableCloneRecursive: _shareables.makeShareableCloneRecursive,
    callMicrotasks: callMicrotasks
  };
  runOnUI.__workletHash = 15677667388482;
  runOnUI.__initData = _worklet_15677667388482_init_data;
  runOnUI.__stackDetails = _e;
  return runOnUI;
}();
var _worklet_17019095552526_init_data = {
  code: "function threadsTs6(){const{worklet,args,makeShareableCloneOnUIRecursive}=this.__closure;const result=worklet(...args);return makeShareableCloneOnUIRecursive(result);}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\threads.ts",
  sourceMap: "{\"version\":3,\"names\":[\"threadsTs6\",\"worklet\",\"args\",\"makeShareableCloneOnUIRecursive\",\"__closure\",\"result\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/threads.ts\"],\"mappings\":\"AAsJkC,SAAAA,UAAMA,CAAA,QAAAC,OAAA,CAAAC,IAAA,CAAAC,+BAAA,OAAAC,SAAA,CAEhC,KAAM,CAAAC,MAAM,CAAGJ,OAAO,CAAC,GAAGC,IAAI,CAAC,CAC/B,MAAO,CAAAC,+BAA+B,CAACE,MAAM,CAAC,CAChD\",\"ignoreList\":[]}",
  version: "3.16.7"
};
function executeOnUIRuntimeSync(worklet) {
  return function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return _NativeReanimated.default.executeOnUIRuntimeSync((0, _shareables.makeShareableCloneRecursive)(function () {
      var _e = [new global.Error(), -4, -27];
      var threadsTs6 = function threadsTs6() {
        var result = worklet.apply(void 0, args);
        return (0, _shareables.makeShareableCloneOnUIRecursive)(result);
      };
      threadsTs6.__closure = {
        worklet: worklet,
        args: args,
        makeShareableCloneOnUIRecursive: _shareables.makeShareableCloneOnUIRecursive
      };
      threadsTs6.__workletHash = 17019095552526;
      threadsTs6.__initData = _worklet_17019095552526_init_data;
      threadsTs6.__stackDetails = _e;
      return threadsTs6;
    }()));
  };
}
var _worklet_16633155166209_init_data = {
  code: "function runOnUIImmediately_threadsTs7(worklet){const{__DEV__,SHOULD_BE_USE_WEB,isWorkletFunction,NativeReanimatedModule,makeShareableCloneRecursive}=this.__closure;if(__DEV__&&!SHOULD_BE_USE_WEB&&_WORKLET){throw new ReanimatedError('`runOnUIImmediately` cannot be called on the UI runtime. Please call the function synchronously or use `queueMicrotask` or `requestAnimationFrame` instead.');}if(__DEV__&&!SHOULD_BE_USE_WEB&&!isWorkletFunction(worklet)){throw new ReanimatedError('`runOnUIImmediately` can only be used with worklets.');}return function(...args){NativeReanimatedModule.scheduleOnUI(makeShareableCloneRecursive(function(){'worklet';worklet(...args);}));};}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\threads.ts",
  sourceMap: "{\"version\":3,\"names\":[\"runOnUIImmediately_threadsTs7\",\"worklet\",\"__DEV__\",\"SHOULD_BE_USE_WEB\",\"isWorkletFunction\",\"NativeReanimatedModule\",\"makeShareableCloneRecursive\",\"__closure\",\"_WORKLET\",\"ReanimatedError\",\"args\",\"scheduleOnUI\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/threads.ts\"],\"mappings\":\"AAoKO,SAAAA,6BAEoBA,CAAAC,OAAA,QAAAC,OAAA,CAAAC,iBAAA,CAAAC,iBAAA,CAAAC,sBAAA,CAAAC,2BAAA,OAAAC,SAAA,CAEzB,GAAIL,OAAO,EAAI,CAACC,iBAAiB,EAAIK,QAAQ,CAAE,CAC7C,KAAM,IAAI,CAAAC,eAAe,CACvB,6JACF,CAAC,CACH,CACA,GAAIP,OAAO,EAAI,CAACC,iBAAiB,EAAI,CAACC,iBAAiB,CAACH,OAAO,CAAC,CAAE,CAChE,KAAM,IAAI,CAAAQ,eAAe,CACvB,sDACF,CAAC,CACH,CACA,MAAO,UAAC,GAAGC,IAAI,CAAK,CAClBL,sBAAsB,CAACM,YAAY,CACjCL,2BAA2B,CAAC,UAAM,CAChC,SAAS,CACTL,OAAO,CAAC,GAAGS,IAAI,CAAC,CAClB,CAAC,CACH,CAAC,CACH,CAAC,CACH\",\"ignoreList\":[]}",
  version: "3.16.7"
};
var _worklet_12333479226436_init_data = {
  code: "function threadsTs8(){const{worklet,args}=this.__closure;worklet(...args);}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\threads.ts",
  sourceMap: "{\"version\":3,\"names\":[\"threadsTs8\",\"worklet\",\"args\",\"__closure\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/threads.ts\"],\"mappings\":\"AAoLkC,SAAAA,UAAMA,CAAA,QAAAC,OAAA,CAAAC,IAAA,OAAAC,SAAA,CAEhCF,OAAO,CAAC,GAAGC,IAAI,CAAC,CAClB\",\"ignoreList\":[]}",
  version: "3.16.7"
};
var runOnUIImmediately = exports.runOnUIImmediately = function () {
  var _e = [new global.Error(), -6, -27];
  var runOnUIImmediately = function runOnUIImmediately(worklet) {
    if (__DEV__ && !SHOULD_BE_USE_WEB && _WORKLET) {
      throw new _errors.ReanimatedError('`runOnUIImmediately` cannot be called on the UI runtime. Please call the function synchronously or use `queueMicrotask` or `requestAnimationFrame` instead.');
    }
    if (__DEV__ && !SHOULD_BE_USE_WEB && !(0, _commonTypes.isWorkletFunction)(worklet)) {
      throw new _errors.ReanimatedError('`runOnUIImmediately` can only be used with worklets.');
    }
    return function () {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      _NativeReanimated.default.scheduleOnUI((0, _shareables.makeShareableCloneRecursive)(function () {
        var _e = [new global.Error(), -3, -27];
        var threadsTs8 = function threadsTs8() {
          worklet.apply(void 0, args);
        };
        threadsTs8.__closure = {
          worklet: worklet,
          args: args
        };
        threadsTs8.__workletHash = 12333479226436;
        threadsTs8.__initData = _worklet_12333479226436_init_data;
        threadsTs8.__stackDetails = _e;
        return threadsTs8;
      }()));
    };
  };
  runOnUIImmediately.__closure = {
    __DEV__: __DEV__,
    SHOULD_BE_USE_WEB: SHOULD_BE_USE_WEB,
    isWorkletFunction: _commonTypes.isWorkletFunction,
    NativeReanimatedModule: _NativeReanimated.default,
    makeShareableCloneRecursive: _shareables.makeShareableCloneRecursive
  };
  runOnUIImmediately.__workletHash = 16633155166209;
  runOnUIImmediately.__initData = _worklet_16633155166209_init_data;
  runOnUIImmediately.__stackDetails = _e;
  return runOnUIImmediately;
}();
function runWorkletOnJS(worklet) {
  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    args[_key4 - 1] = arguments[_key4];
  }
  worklet.apply(void 0, args);
}
var _worklet_6458650219678_init_data = {
  code: "function runOnJS_threadsTs9(fun){const runOnJS_threadsTs9=this._recur;const{SHOULD_BE_USE_WEB,isWorkletFunction,runWorkletOnJS,makeShareableCloneOnUIRecursive}=this.__closure;if(SHOULD_BE_USE_WEB||!_WORKLET){return function(...args){return queueMicrotask(args.length?function(){return fun(...args);}:fun);};}if(isWorkletFunction(fun)){return function(...args){return runOnJS_threadsTs9(runWorkletOnJS)(fun,...args);};}if(fun.__remoteFunction){fun=fun.__remoteFunction;}const scheduleOnJS=typeof fun==='function'?global._scheduleHostFunctionOnJS:global._scheduleRemoteFunctionOnJS;return function(...args){scheduleOnJS(fun,args.length>0?makeShareableCloneOnUIRecursive(args):undefined);};}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\threads.ts",
  sourceMap: "{\"version\":3,\"names\":[\"runOnJS_threadsTs9\",\"fun\",\"_recur\",\"SHOULD_BE_USE_WEB\",\"isWorkletFunction\",\"runWorkletOnJS\",\"makeShareableCloneOnUIRecursive\",\"__closure\",\"_WORKLET\",\"args\",\"queueMicrotask\",\"length\",\"__remoteFunction\",\"scheduleOnJS\",\"global\",\"_scheduleHostFunctionOnJS\",\"_scheduleRemoteFunctionOnJS\",\"undefined\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/threads.ts\"],\"mappings\":\"AA8NO,SAAAA,kBAKoBA,CAAAC,GAAA,QAAAD,kBAAA,MAAAE,MAAA,OAAAC,iBAAA,CAAAC,iBAAA,CAAAC,cAAA,CAAAC,+BAAA,OAAAC,SAAA,CAGzB,GAAIJ,iBAAiB,EAAI,CAACK,QAAQ,CAAE,CAElC,MAAO,UAAC,GAAGC,IAAI,QACb,CAAAC,cAAc,CACZD,IAAI,CAACE,MAAM,CACP,iBAAO,CAAAV,GAAG,CAAoC,GAAGQ,IAAI,CAAC,GACrDR,GACP,CAAC,GACL,CACA,GAAIG,iBAAiB,CAAoBH,GAAG,CAAC,CAAE,CAI7C,MAAO,UAAC,GAAGQ,IAAI,QACb,CAAAT,kBAAQ,CAAAK,cAEH,EAAAJ,GACJ,IAAAQ,IAAA,IACL,CACA,GAAKR,GAAG,CAAkBW,gBAAgB,CAAE,CAK1CX,GAAG,CAAIA,GAAG,CAAkBW,gBAAgB,CAC9C,CAEA,KAAM,CAAAC,YAAY,CAChB,MAAO,CAAAZ,GAAG,GAAK,UAAU,CACrBa,MAAM,CAACC,yBAAyB,CAChCD,MAAM,CAACE,2BAA2B,CAExC,MAAO,UAAC,GAAGP,IAAI,CAAK,CAClBI,YAAY,CACVZ,GAAG,CAGHQ,IAAI,CAACE,MAAM,CAAG,CAAC,CAEVL,+BAA+B,CAACG,IAAI,CAAC,CACtCQ,SACN,CAAC,CACH,CAAC,CACH\",\"ignoreList\":[]}",
  version: "3.16.7"
};
var runOnJS = exports.runOnJS = function () {
  var _e = [new global.Error(), -5, -27];
  var _runOnJS = function runOnJS(fun) {
    if (SHOULD_BE_USE_WEB || !_WORKLET) {
      return function () {
        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          args[_key5] = arguments[_key5];
        }
        return queueMicrotask(args.length ? function () {
          return fun.apply(void 0, args);
        } : fun);
      };
    }
    if ((0, _commonTypes.isWorkletFunction)(fun)) {
      return function () {
        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
          args[_key6] = arguments[_key6];
        }
        return _runOnJS(runWorkletOnJS).apply(void 0, [fun].concat(args));
      };
    }
    if (fun.__remoteFunction) {
      fun = fun.__remoteFunction;
    }
    var scheduleOnJS = typeof fun === 'function' ? global._scheduleHostFunctionOnJS : global._scheduleRemoteFunctionOnJS;
    return function () {
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }
      scheduleOnJS(fun, args.length > 0 ? (0, _shareables.makeShareableCloneOnUIRecursive)(args) : undefined);
    };
  };
  _runOnJS.__closure = {
    SHOULD_BE_USE_WEB: SHOULD_BE_USE_WEB,
    isWorkletFunction: _commonTypes.isWorkletFunction,
    runWorkletOnJS: runWorkletOnJS,
    makeShareableCloneOnUIRecursive: _shareables.makeShareableCloneOnUIRecursive
  };
  _runOnJS.__workletHash = 6458650219678;
  _runOnJS.__initData = _worklet_6458650219678_init_data;
  _runOnJS.__stackDetails = _e;
  return _runOnJS;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY2FsbE1pY3JvdGFza3MiLCJleGVjdXRlT25VSVJ1bnRpbWVTeW5jIiwic2V0dXBNaWNyb3Rhc2tzIiwicnVuT25VSUltbWVkaWF0ZWx5IiwicnVuT25VSSIsInJ1bk9uSlMiLCJfdG9Db25zdW1hYmxlQXJyYXkyIiwiX3NsaWNlZFRvQXJyYXkyIiwiX05hdGl2ZVJlYW5pbWF0ZWQiLCJfUGxhdGZvcm1DaGVja2VyIiwiX3NoYXJlYWJsZXMiLCJfY29tbW9uVHlwZXMiLCJfZXJyb3JzIiwiSVNfSkVTVCIsImlzSmVzdCIsIlNIT1VMRF9CRV9VU0VfV0VCIiwic2hvdWxkQmVVc2VXZWIiLCJfcnVuT25VSVF1ZXVlIiwiX3dvcmtsZXRfMzM3NzkyMjcxNTMzM19pbml0X2RhdGEiLCJjb2RlIiwibG9jYXRpb24iLCJzb3VyY2VNYXAiLCJ2ZXJzaW9uIiwiX2UiLCJnbG9iYWwiLCJFcnJvciIsIm1pY3JvdGFza3NRdWV1ZSIsImlzRXhlY3V0aW5nTWljcm90YXNrc1F1ZXVlIiwicXVldWVNaWNyb3Rhc2siLCJjYWxsYmFjayIsInB1c2giLCJfX2NhbGxNaWNyb3Rhc2tzIiwiaW5kZXgiLCJsZW5ndGgiLCJfbWF5YmVGbHVzaFVJVXBkYXRlc1F1ZXVlIiwiX19jbG9zdXJlIiwiX193b3JrbGV0SGFzaCIsIl9faW5pdERhdGEiLCJfX3N0YWNrRGV0YWlscyIsIl93b3JrbGV0XzE1NjI3NzU3Mzg0MjgxX2luaXRfZGF0YSIsImNhbGxNaWNyb3Rhc2tzT25VSVRocmVhZCIsIl93b3JrbGV0XzE1Njc3NjY3Mzg4NDgyX2luaXRfZGF0YSIsIl93b3JrbGV0XzgxOTQxNDQxODc5NzZfaW5pdF9kYXRhIiwiX3dvcmtsZXRfMzY2MjM1NTU2MjcxNl9pbml0X2RhdGEiLCJ3b3JrbGV0IiwiX19ERVZfXyIsIl9XT1JLTEVUIiwiUmVhbmltYXRlZEVycm9yIiwiaXNXb3JrbGV0RnVuY3Rpb24iLCJfbGVuIiwiYXJndW1lbnRzIiwiYXJncyIsIkFycmF5IiwiX2tleSIsIk5hdGl2ZVJlYW5pbWF0ZWRNb2R1bGUiLCJzY2hlZHVsZU9uVUkiLCJtYWtlU2hhcmVhYmxlQ2xvbmVSZWN1cnNpdmUiLCJ0aHJlYWRzVHM0IiwiYXBwbHkiLCJxdWV1ZSIsInRocmVhZHNUczUiLCJmb3JFYWNoIiwiX3JlZiIsIl9yZWYyIiwiZGVmYXVsdCIsIl93b3JrbGV0XzE3MDE5MDk1NTUyNTI2X2luaXRfZGF0YSIsIl9sZW4yIiwiX2tleTIiLCJ0aHJlYWRzVHM2IiwicmVzdWx0IiwibWFrZVNoYXJlYWJsZUNsb25lT25VSVJlY3Vyc2l2ZSIsIl93b3JrbGV0XzE2NjMzMTU1MTY2MjA5X2luaXRfZGF0YSIsIl93b3JrbGV0XzEyMzMzNDc5MjI2NDM2X2luaXRfZGF0YSIsIl9sZW4zIiwiX2tleTMiLCJ0aHJlYWRzVHM4IiwicnVuV29ya2xldE9uSlMiLCJfbGVuNCIsIl9rZXk0IiwiX3dvcmtsZXRfNjQ1ODY1MDIxOTY3OF9pbml0X2RhdGEiLCJfcnVuT25KUyIsImZ1biIsIl9sZW41IiwiX2tleTUiLCJfbGVuNiIsIl9rZXk2IiwiY29uY2F0IiwiX19yZW1vdGVGdW5jdGlvbiIsInNjaGVkdWxlT25KUyIsIl9zY2hlZHVsZUhvc3RGdW5jdGlvbk9uSlMiLCJfc2NoZWR1bGVSZW1vdGVGdW5jdGlvbk9uSlMiLCJfbGVuNyIsIl9rZXk3IiwidW5kZWZpbmVkIl0sInNvdXJjZXMiOlsidGhyZWFkcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5pbXBvcnQgTmF0aXZlUmVhbmltYXRlZE1vZHVsZSBmcm9tICcuL05hdGl2ZVJlYW5pbWF0ZWQnO1xuaW1wb3J0IHsgaXNKZXN0LCBzaG91bGRCZVVzZVdlYiB9IGZyb20gJy4vUGxhdGZvcm1DaGVja2VyJztcbmltcG9ydCB0eXBlIHsgV29ya2xldEZ1bmN0aW9uIH0gZnJvbSAnLi9jb21tb25UeXBlcyc7XG5pbXBvcnQge1xuICBtYWtlU2hhcmVhYmxlQ2xvbmVPblVJUmVjdXJzaXZlLFxuICBtYWtlU2hhcmVhYmxlQ2xvbmVSZWN1cnNpdmUsXG59IGZyb20gJy4vc2hhcmVhYmxlcyc7XG5pbXBvcnQgeyBpc1dvcmtsZXRGdW5jdGlvbiB9IGZyb20gJy4vY29tbW9uVHlwZXMnO1xuaW1wb3J0IHsgUmVhbmltYXRlZEVycm9yIH0gZnJvbSAnLi9lcnJvcnMnO1xuXG5jb25zdCBJU19KRVNUID0gaXNKZXN0KCk7XG5jb25zdCBTSE9VTERfQkVfVVNFX1dFQiA9IHNob3VsZEJlVXNlV2ViKCk7XG5cbi8qKiBBbiBhcnJheSBvZiBbd29ya2xldCwgYXJnc10gcGFpcnMuICovXG5sZXQgX3J1bk9uVUlRdWV1ZTogQXJyYXk8W1dvcmtsZXRGdW5jdGlvbjx1bmtub3duW10sIHVua25vd24+LCB1bmtub3duW11dPiA9IFtdO1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0dXBNaWNyb3Rhc2tzKCkge1xuICAnd29ya2xldCc7XG5cbiAgbGV0IG1pY3JvdGFza3NRdWV1ZTogQXJyYXk8KCkgPT4gdm9pZD4gPSBbXTtcbiAgbGV0IGlzRXhlY3V0aW5nTWljcm90YXNrc1F1ZXVlID0gZmFsc2U7XG4gIGdsb2JhbC5xdWV1ZU1pY3JvdGFzayA9IChjYWxsYmFjazogKCkgPT4gdm9pZCkgPT4ge1xuICAgIG1pY3JvdGFza3NRdWV1ZS5wdXNoKGNhbGxiYWNrKTtcbiAgfTtcblxuICBnbG9iYWwuX19jYWxsTWljcm90YXNrcyA9ICgpID0+IHtcbiAgICBpZiAoaXNFeGVjdXRpbmdNaWNyb3Rhc2tzUXVldWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGlzRXhlY3V0aW5nTWljcm90YXNrc1F1ZXVlID0gdHJ1ZTtcbiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBtaWNyb3Rhc2tzUXVldWUubGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgICAgIC8vIHdlIHVzZSBjbGFzc2ljICdmb3InIGxvb3AgYmVjYXVzZSB0aGUgc2l6ZSBvZiB0aGUgY3VycmVudFRhc2tzIGFycmF5IG1heSBjaGFuZ2Ugd2hpbGUgZXhlY3V0aW5nIHNvbWUgb2YgdGhlIGNhbGxiYWNrcyBkdWUgdG8gcXVldWVNaWNyb3Rhc2sgY2FsbHNcbiAgICAgICAgbWljcm90YXNrc1F1ZXVlW2luZGV4XSgpO1xuICAgICAgfVxuICAgICAgbWljcm90YXNrc1F1ZXVlID0gW107XG4gICAgICBnbG9iYWwuX21heWJlRmx1c2hVSVVwZGF0ZXNRdWV1ZSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0V4ZWN1dGluZ01pY3JvdGFza3NRdWV1ZSA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY2FsbE1pY3JvdGFza3NPblVJVGhyZWFkKCkge1xuICAnd29ya2xldCc7XG4gIGdsb2JhbC5fX2NhbGxNaWNyb3Rhc2tzKCk7XG59XG5cbmV4cG9ydCBjb25zdCBjYWxsTWljcm90YXNrcyA9IFNIT1VMRF9CRV9VU0VfV0VCXG4gID8gKCkgPT4ge1xuICAgICAgLy8gb24gd2ViIGZsdXNoaW5nIGlzIGEgbm9vcCBhcyBpbW1lZGlhdGVzIGFyZSBoYW5kbGVkIGJ5IHRoZSBicm93c2VyXG4gICAgfVxuICA6IGNhbGxNaWNyb3Rhc2tzT25VSVRocmVhZDtcblxuLyoqXG4gKiBMZXRzIHlvdSBhc3luY2hyb25vdXNseSBydW5cbiAqIFt3b3JrbGV0aXplZF0oaHR0cHM6Ly9kb2NzLnN3bWFuc2lvbi5jb20vcmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWQvZG9jcy9mdW5kYW1lbnRhbHMvZ2xvc3NhcnkjdG8td29ya2xldGl6ZSlcbiAqIGZ1bmN0aW9ucyBvbiB0aGUgW1VJXG4gKiB0aHJlYWRdKGh0dHBzOi8vZG9jcy5zd21hbnNpb24uY29tL3JlYWN0LW5hdGl2ZS1yZWFuaW1hdGVkL2RvY3MvdGhyZWFkaW5nL3J1bk9uVUkpLlxuICpcbiAqIFRoaXMgbWV0aG9kIGRvZXMgbm90IHNjaGVkdWxlIHRoZSB3b3JrIGltbWVkaWF0ZWx5IGJ1dCBpbnN0ZWFkIHdhaXRzIGZvclxuICogb3RoZXIgd29ya2xldHMgdG8gYmUgc2NoZWR1bGVkIHdpdGhpbiB0aGUgc2FtZSBKUyBsb29wLiBJdCB1c2VzXG4gKiBxdWV1ZU1pY3JvdGFzayB0byBzY2hlZHVsZSBhbGwgdGhlIHdvcmtsZXRzIGF0IG9uY2UgbWFraW5nIHN1cmUgdGhleSB3aWxsIHJ1blxuICogd2l0aGluIHRoZSBzYW1lIGZyYW1lIGJvdW5kYXJpZXMgb24gdGhlIFVJIHRocmVhZC5cbiAqXG4gKiBAcGFyYW0gZnVuIC0gQSByZWZlcmVuY2UgdG8gYSBmdW5jdGlvbiB5b3Ugd2FudCB0byBleGVjdXRlIG9uIHRoZSBbVUlcbiAqICAgdGhyZWFkXShodHRwczovL2RvY3Muc3dtYW5zaW9uLmNvbS9yZWFjdC1uYXRpdmUtcmVhbmltYXRlZC9kb2NzL3RocmVhZGluZy9ydW5PblVJKVxuICogICBmcm9tIHRoZSBbSmF2YVNjcmlwdFxuICogICB0aHJlYWRdKGh0dHBzOi8vZG9jcy5zd21hbnNpb24uY29tL3JlYWN0LW5hdGl2ZS1yZWFuaW1hdGVkL2RvY3MvdGhyZWFkaW5nL3J1bk9uVUkpLlxuICogQHJldHVybnMgQSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgYXJndW1lbnRzIGZvciB0aGUgZnVuY3Rpb24gcGFzc2VkIGFzIHRoZVxuICogICBmaXJzdCBhcmd1bWVudC5cbiAqIEBzZWUgaHR0cHM6Ly9kb2NzLnN3bWFuc2lvbi5jb20vcmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWQvZG9jcy90aHJlYWRpbmcvcnVuT25VSVxuICovXG4vLyBAdHMtZXhwZWN0LWVycm9yIFRoaXMgb3ZlcmxvYWQgaXMgY29ycmVjdCBzaW5jZSBpdCdzIHdoYXQgdXNlciBzZWVzIGluIGhpcyBjb2RlXG4vLyBiZWZvcmUgaXQncyB0cmFuc2Zvcm1lZCBieSBSZWFuaW1hdGVkIEJhYmVsIHBsdWdpbi5cbmV4cG9ydCBmdW5jdGlvbiBydW5PblVJPEFyZ3MgZXh0ZW5kcyB1bmtub3duW10sIFJldHVyblZhbHVlPihcbiAgd29ya2xldDogKC4uLmFyZ3M6IEFyZ3MpID0+IFJldHVyblZhbHVlXG4pOiAoLi4uYXJnczogQXJncykgPT4gdm9pZDtcblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bk9uVUk8QXJncyBleHRlbmRzIHVua25vd25bXSwgUmV0dXJuVmFsdWU+KFxuICB3b3JrbGV0OiBXb3JrbGV0RnVuY3Rpb248QXJncywgUmV0dXJuVmFsdWU+XG4pOiAoLi4uYXJnczogQXJncykgPT4gdm9pZCB7XG4gICd3b3JrbGV0JztcbiAgaWYgKF9fREVWX18gJiYgIVNIT1VMRF9CRV9VU0VfV0VCICYmIF9XT1JLTEVUKSB7XG4gICAgdGhyb3cgbmV3IFJlYW5pbWF0ZWRFcnJvcihcbiAgICAgICdgcnVuT25VSWAgY2Fubm90IGJlIGNhbGxlZCBvbiB0aGUgVUkgcnVudGltZS4gUGxlYXNlIGNhbGwgdGhlIGZ1bmN0aW9uIHN5bmNocm9ub3VzbHkgb3IgdXNlIGBxdWV1ZU1pY3JvdGFza2Agb3IgYHJlcXVlc3RBbmltYXRpb25GcmFtZWAgaW5zdGVhZC4nXG4gICAgKTtcbiAgfVxuICBpZiAoX19ERVZfXyAmJiAhU0hPVUxEX0JFX1VTRV9XRUIgJiYgIWlzV29ya2xldEZ1bmN0aW9uKHdvcmtsZXQpKSB7XG4gICAgdGhyb3cgbmV3IFJlYW5pbWF0ZWRFcnJvcignYHJ1bk9uVUlgIGNhbiBvbmx5IGJlIHVzZWQgd2l0aCB3b3JrbGV0cy4nKTtcbiAgfVxuICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICBpZiAoSVNfSkVTVCkge1xuICAgICAgLy8gTW9ja2luZyB0aW1lIGluIEplc3QgaXMgdHJpY2t5IGFzIGJvdGggcmVxdWVzdEFuaW1hdGlvbkZyYW1lIGFuZCBxdWV1ZU1pY3JvdGFza1xuICAgICAgLy8gY2FsbGJhY2tzIHJ1biBvbiB0aGUgc2FtZSBxdWV1ZSBhbmQgY2FuIGJlIGludGVybGVhdmVkLiBUaGVyZSBpcyBubyB3YXlcbiAgICAgIC8vIHRvIGZsdXNoIHBhcnRpY3VsYXIgcXVldWUgaW4gSmVzdCBhbmQgdGhlIG9ubHkgY29udHJvbCBvdmVyIG1vY2tlZCB0aW1lcnNcbiAgICAgIC8vIGlzIGJ5IHVzaW5nIGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSgpIG1ldGhvZCB3aGljaCBhZHZhbmNlcyBhbGwgdHlwZXNcbiAgICAgIC8vIG9mIHRpbWVycyBpbmNsdWRpbmcgaW1tZWRpYXRlIGFuZCBhbmltYXRpb24gY2FsbGJhY2tzLiBJZGVhbGx5IHdlJ2QgbGlrZVxuICAgICAgLy8gdG8gaGF2ZSBzb21lIHdheSBoZXJlIHRvIHNjaGVkdWxlIHdvcmsgYWxvbmcgd2l0aCBSZWFjdCB1cGRhdGVzLCBidXRcbiAgICAgIC8vIHRoYXQncyBub3QgcG9zc2libGUsIGFuZCBoZW5jZSBpbiBKZXN0IGVudmlyb25tZW50IGluc3RlYWQgb2YgdXNpbmcgc2NoZWR1bGluZ1xuICAgICAgLy8gbWVjaGFuaXNtIHdlIGp1c3Qgc2NoZWR1bGUgdGhlIHdvcmsgb21taXRpbmcgdGhlIHF1ZXVlLiBUaGlzIGlzIG9rIGZvciB0aGVcbiAgICAgIC8vIHVzZXMgdGhhdCB3ZSBjdXJyZW50bHkgaGF2ZSBidXQgbWF5IG5vdCBiZSBvayBmb3IgZnV0dXJlIHRlc3RzIHRoYXQgd2Ugd3JpdGUuXG4gICAgICBOYXRpdmVSZWFuaW1hdGVkTW9kdWxlLnNjaGVkdWxlT25VSShcbiAgICAgICAgbWFrZVNoYXJlYWJsZUNsb25lUmVjdXJzaXZlKCgpID0+IHtcbiAgICAgICAgICAnd29ya2xldCc7XG4gICAgICAgICAgd29ya2xldCguLi5hcmdzKTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAvLyBpbiBERVYgbW9kZSB3ZSBjYWxsIHNoYXJlYWJsZSBjb252ZXJzaW9uIGhlcmUgYmVjYXVzZSBpbiBjYXNlIHRoZSBvYmplY3RcbiAgICAgIC8vIGNhbid0IGJlIGNvbnZlcnRlZCwgd2Ugd2lsbCBnZXQgYSBtZWFuaW5nZnVsIHN0YWNrLXRyYWNlIGFzIG9wcG9zZWQgdG8gdGhlXG4gICAgICAvLyBzaXR1YXRpb24gd2hlbiBjb252ZXJzaW9uIGlzIG9ubHkgZG9uZSB2aWEgbWljcm90YXNrIHF1ZXVlLiBUaGlzIGRvZXMgbm90XG4gICAgICAvLyBtYWtlIHRoZSBhcHAgcGFydGljdWxhcmlseSBsZXNzIGVmZmljaWVudCBhcyBjb252ZXJ0ZWQgb2JqZWN0cyBhcmUgY2FjaGVkXG4gICAgICAvLyBhbmQgZm9yIGEgZ2l2ZW4gd29ya2xldCB0aGUgY29udmVyc2lvbiBvbmx5IGhhcHBlbnMgb25jZS5cbiAgICAgIG1ha2VTaGFyZWFibGVDbG9uZVJlY3Vyc2l2ZSh3b3JrbGV0KTtcbiAgICAgIG1ha2VTaGFyZWFibGVDbG9uZVJlY3Vyc2l2ZShhcmdzKTtcbiAgICB9XG4gICAgX3J1bk9uVUlRdWV1ZS5wdXNoKFt3b3JrbGV0IGFzIFdvcmtsZXRGdW5jdGlvbiwgYXJnc10pO1xuICAgIGlmIChfcnVuT25VSVF1ZXVlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgcXVldWVNaWNyb3Rhc2soKCkgPT4ge1xuICAgICAgICBjb25zdCBxdWV1ZSA9IF9ydW5PblVJUXVldWU7XG4gICAgICAgIF9ydW5PblVJUXVldWUgPSBbXTtcbiAgICAgICAgTmF0aXZlUmVhbmltYXRlZE1vZHVsZS5zY2hlZHVsZU9uVUkoXG4gICAgICAgICAgbWFrZVNoYXJlYWJsZUNsb25lUmVjdXJzaXZlKCgpID0+IHtcbiAgICAgICAgICAgICd3b3JrbGV0JztcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tc2hhZG93XG4gICAgICAgICAgICBxdWV1ZS5mb3JFYWNoKChbd29ya2xldCwgYXJnc10pID0+IHtcbiAgICAgICAgICAgICAgd29ya2xldCguLi5hcmdzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2FsbE1pY3JvdGFza3MoKTtcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG4vLyBAdHMtZXhwZWN0LWVycm9yIENoZWNrIGBleGVjdXRlT25VSVJ1bnRpbWVTeW5jYCBvdmVybG9hZCBhYm92ZS5cbmV4cG9ydCBmdW5jdGlvbiBleGVjdXRlT25VSVJ1bnRpbWVTeW5jPEFyZ3MgZXh0ZW5kcyB1bmtub3duW10sIFJldHVyblZhbHVlPihcbiAgd29ya2xldDogKC4uLmFyZ3M6IEFyZ3MpID0+IFJldHVyblZhbHVlXG4pOiAoLi4uYXJnczogQXJncykgPT4gUmV0dXJuVmFsdWU7XG5cbmV4cG9ydCBmdW5jdGlvbiBleGVjdXRlT25VSVJ1bnRpbWVTeW5jPEFyZ3MgZXh0ZW5kcyB1bmtub3duW10sIFJldHVyblZhbHVlPihcbiAgd29ya2xldDogV29ya2xldEZ1bmN0aW9uPEFyZ3MsIFJldHVyblZhbHVlPlxuKTogKC4uLmFyZ3M6IEFyZ3MpID0+IFJldHVyblZhbHVlIHtcbiAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgcmV0dXJuIE5hdGl2ZVJlYW5pbWF0ZWRNb2R1bGUuZXhlY3V0ZU9uVUlSdW50aW1lU3luYyhcbiAgICAgIG1ha2VTaGFyZWFibGVDbG9uZVJlY3Vyc2l2ZSgoKSA9PiB7XG4gICAgICAgICd3b3JrbGV0JztcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gd29ya2xldCguLi5hcmdzKTtcbiAgICAgICAgcmV0dXJuIG1ha2VTaGFyZWFibGVDbG9uZU9uVUlSZWN1cnNpdmUocmVzdWx0KTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfTtcbn1cblxuLy8gQHRzLWV4cGVjdC1lcnJvciBDaGVjayBgcnVuT25VSWAgb3ZlcmxvYWQgYWJvdmUuXG5leHBvcnQgZnVuY3Rpb24gcnVuT25VSUltbWVkaWF0ZWx5PEFyZ3MgZXh0ZW5kcyB1bmtub3duW10sIFJldHVyblZhbHVlPihcbiAgd29ya2xldDogKC4uLmFyZ3M6IEFyZ3MpID0+IFJldHVyblZhbHVlXG4pOiBXb3JrbGV0RnVuY3Rpb248QXJncywgUmV0dXJuVmFsdWU+O1xuLyoqIFNjaGVkdWxlIGEgd29ya2xldCB0byBleGVjdXRlIG9uIHRoZSBVSSBydW50aW1lIHNraXBwaW5nIGJhdGNoaW5nIG1lY2hhbmlzbS4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydW5PblVJSW1tZWRpYXRlbHk8QXJncyBleHRlbmRzIHVua25vd25bXSwgUmV0dXJuVmFsdWU+KFxuICB3b3JrbGV0OiBXb3JrbGV0RnVuY3Rpb248QXJncywgUmV0dXJuVmFsdWU+XG4pOiAoLi4uYXJnczogQXJncykgPT4gdm9pZCB7XG4gICd3b3JrbGV0JztcbiAgaWYgKF9fREVWX18gJiYgIVNIT1VMRF9CRV9VU0VfV0VCICYmIF9XT1JLTEVUKSB7XG4gICAgdGhyb3cgbmV3IFJlYW5pbWF0ZWRFcnJvcihcbiAgICAgICdgcnVuT25VSUltbWVkaWF0ZWx5YCBjYW5ub3QgYmUgY2FsbGVkIG9uIHRoZSBVSSBydW50aW1lLiBQbGVhc2UgY2FsbCB0aGUgZnVuY3Rpb24gc3luY2hyb25vdXNseSBvciB1c2UgYHF1ZXVlTWljcm90YXNrYCBvciBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lYCBpbnN0ZWFkLidcbiAgICApO1xuICB9XG4gIGlmIChfX0RFVl9fICYmICFTSE9VTERfQkVfVVNFX1dFQiAmJiAhaXNXb3JrbGV0RnVuY3Rpb24od29ya2xldCkpIHtcbiAgICB0aHJvdyBuZXcgUmVhbmltYXRlZEVycm9yKFxuICAgICAgJ2BydW5PblVJSW1tZWRpYXRlbHlgIGNhbiBvbmx5IGJlIHVzZWQgd2l0aCB3b3JrbGV0cy4nXG4gICAgKTtcbiAgfVxuICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICBOYXRpdmVSZWFuaW1hdGVkTW9kdWxlLnNjaGVkdWxlT25VSShcbiAgICAgIG1ha2VTaGFyZWFibGVDbG9uZVJlY3Vyc2l2ZSgoKSA9PiB7XG4gICAgICAgICd3b3JrbGV0JztcbiAgICAgICAgd29ya2xldCguLi5hcmdzKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfTtcbn1cblxudHlwZSBSZWxlYXNlUmVtb3RlRnVuY3Rpb248QXJncyBleHRlbmRzIHVua25vd25bXSwgUmV0dXJuVmFsdWU+ID0ge1xuICAoLi4uYXJnczogQXJncyk6IFJldHVyblZhbHVlO1xufTtcblxudHlwZSBEZXZSZW1vdGVGdW5jdGlvbjxBcmdzIGV4dGVuZHMgdW5rbm93bltdLCBSZXR1cm5WYWx1ZT4gPSB7XG4gIF9fcmVtb3RlRnVuY3Rpb246ICguLi5hcmdzOiBBcmdzKSA9PiBSZXR1cm5WYWx1ZTtcbn07XG5cbnR5cGUgUmVtb3RlRnVuY3Rpb248QXJncyBleHRlbmRzIHVua25vd25bXSwgUmV0dXJuVmFsdWU+ID1cbiAgfCBSZWxlYXNlUmVtb3RlRnVuY3Rpb248QXJncywgUmV0dXJuVmFsdWU+XG4gIHwgRGV2UmVtb3RlRnVuY3Rpb248QXJncywgUmV0dXJuVmFsdWU+O1xuXG5mdW5jdGlvbiBydW5Xb3JrbGV0T25KUzxBcmdzIGV4dGVuZHMgdW5rbm93bltdLCBSZXR1cm5WYWx1ZT4oXG4gIHdvcmtsZXQ6IFdvcmtsZXRGdW5jdGlvbjxBcmdzLCBSZXR1cm5WYWx1ZT4sXG4gIC4uLmFyZ3M6IEFyZ3Ncbik6IHZvaWQge1xuICAvLyByZW1vdGUgZnVuY3Rpb24gdGhhdCBjYWxscyBhIHdvcmtsZXQgc3luY2hyb25vdXNseSBvbiB0aGUgSlMgcnVudGltZVxuICB3b3JrbGV0KC4uLmFyZ3MpO1xufVxuXG4vKipcbiAqIExldHMgeW91IGFzeW5jaHJvbm91c2x5IHJ1blxuICogbm9uLVt3b3JrbGV0aXplZF0oaHR0cHM6Ly9kb2NzLnN3bWFuc2lvbi5jb20vcmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWQvZG9jcy9mdW5kYW1lbnRhbHMvZ2xvc3NhcnkjdG8td29ya2xldGl6ZSlcbiAqIGZ1bmN0aW9ucyB0aGF0IGNvdWxkbid0IG90aGVyd2lzZSBydW4gb24gdGhlIFtVSVxuICogdGhyZWFkXShodHRwczovL2RvY3Muc3dtYW5zaW9uLmNvbS9yZWFjdC1uYXRpdmUtcmVhbmltYXRlZC9kb2NzL2Z1bmRhbWVudGFscy9nbG9zc2FyeSN1aS10aHJlYWQpLlxuICogVGhpcyBhcHBsaWVzIHRvIG1vc3QgZXh0ZXJuYWwgbGlicmFyaWVzIGFzIHRoZXkgZG9uJ3QgaGF2ZSB0aGVpciBmdW5jdGlvbnNcbiAqIG1hcmtlZCB3aXRoIFwid29ya2xldFwiOyBkaXJlY3RpdmUuXG4gKlxuICogQHBhcmFtIGZ1biAtIEEgcmVmZXJlbmNlIHRvIGEgZnVuY3Rpb24geW91IHdhbnQgdG8gZXhlY3V0ZSBvbiB0aGUgSmF2YVNjcmlwdFxuICogICB0aHJlYWQgZnJvbSB0aGUgVUkgdGhyZWFkLlxuICogQHJldHVybnMgQSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgYXJndW1lbnRzIGZvciB0aGUgZnVuY3Rpb24gcGFzc2VkIGFzIHRoZVxuICogICBmaXJzdCBhcmd1bWVudC5cbiAqIEBzZWUgaHR0cHM6Ly9kb2NzLnN3bWFuc2lvbi5jb20vcmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWQvZG9jcy90aHJlYWRpbmcvcnVuT25KU1xuICovXG5leHBvcnQgZnVuY3Rpb24gcnVuT25KUzxBcmdzIGV4dGVuZHMgdW5rbm93bltdLCBSZXR1cm5WYWx1ZT4oXG4gIGZ1bjpcbiAgICB8ICgoLi4uYXJnczogQXJncykgPT4gUmV0dXJuVmFsdWUpXG4gICAgfCBSZW1vdGVGdW5jdGlvbjxBcmdzLCBSZXR1cm5WYWx1ZT5cbiAgICB8IFdvcmtsZXRGdW5jdGlvbjxBcmdzLCBSZXR1cm5WYWx1ZT5cbik6ICguLi5hcmdzOiBBcmdzKSA9PiB2b2lkIHtcbiAgJ3dvcmtsZXQnO1xuICB0eXBlIEZ1bkRldlJlbW90ZSA9IEV4dHJhY3Q8dHlwZW9mIGZ1biwgRGV2UmVtb3RlRnVuY3Rpb248QXJncywgUmV0dXJuVmFsdWU+PjtcbiAgaWYgKFNIT1VMRF9CRV9VU0VfV0VCIHx8ICFfV09SS0xFVCkge1xuICAgIC8vIGlmIHdlIGFyZSBhbHJlYWR5IG9uIHRoZSBKUyB0aHJlYWQsIHdlIGp1c3Qgc2NoZWR1bGUgdGhlIHdvcmtsZXQgb24gdGhlIEpTIHF1ZXVlXG4gICAgcmV0dXJuICguLi5hcmdzKSA9PlxuICAgICAgcXVldWVNaWNyb3Rhc2soXG4gICAgICAgIGFyZ3MubGVuZ3RoXG4gICAgICAgICAgPyAoKSA9PiAoZnVuIGFzICguLi5hcmdzOiBBcmdzKSA9PiBSZXR1cm5WYWx1ZSkoLi4uYXJncylcbiAgICAgICAgICA6IChmdW4gYXMgKCkgPT4gUmV0dXJuVmFsdWUpXG4gICAgICApO1xuICB9XG4gIGlmIChpc1dvcmtsZXRGdW5jdGlvbjxBcmdzLCBSZXR1cm5WYWx1ZT4oZnVuKSkge1xuICAgIC8vIElmIGBmdW5gIGlzIGEgd29ya2xldCwgd2Ugc2NoZWR1bGUgYSBjYWxsIG9mIGEgcmVtb3RlIGZ1bmN0aW9uIGBydW5Xb3JrbGV0T25KU2BcbiAgICAvLyBhbmQgcGFzcyB0aGUgd29ya2xldCBhcyBhIGZpcnN0IGFyZ3VtZW50IGZvbGxvd2VkIGJ5IG9yaWdpbmFsIGFyZ3VtZW50cy5cblxuICAgIHJldHVybiAoLi4uYXJncykgPT5cbiAgICAgIHJ1bk9uSlMocnVuV29ya2xldE9uSlM8QXJncywgUmV0dXJuVmFsdWU+KShcbiAgICAgICAgZnVuIGFzIFdvcmtsZXRGdW5jdGlvbjxBcmdzLCBSZXR1cm5WYWx1ZT4sXG4gICAgICAgIC4uLmFyZ3NcbiAgICAgICk7XG4gIH1cbiAgaWYgKChmdW4gYXMgRnVuRGV2UmVtb3RlKS5fX3JlbW90ZUZ1bmN0aW9uKSB7XG4gICAgLy8gSW4gZGV2ZWxvcG1lbnQgbW9kZSB0aGUgZnVuY3Rpb24gcHJvdmlkZWQgYXMgYGZ1bmAgdGhyb3dzIGFuIGVycm9yIG1lc3NhZ2VcbiAgICAvLyBzdWNoIHRoYXQgd2hlbiBzb21lb25lIGFjY2lkZW50YWxseSBjYWxscyBpdCBkaXJlY3RseSBvbiB0aGUgVUkgcnVudGltZSwgdGhleVxuICAgIC8vIHNlZSB0aGF0IHRoZXkgc2hvdWxkIHVzZSBgcnVuT25KU2AgaW5zdGVhZC4gVG8gZmFjaWxpdGF0ZSB0aGF0IHdlIHB1dCB0aGVcbiAgICAvLyByZWZlcmVuY2UgdG8gdGhlIG9yaWdpbmFsIHJlbW90ZSBmdW5jdGlvbiBpbiB0aGUgYF9fcmVtb3RlRnVuY3Rpb25gIHByb3BlcnR5LlxuICAgIGZ1biA9IChmdW4gYXMgRnVuRGV2UmVtb3RlKS5fX3JlbW90ZUZ1bmN0aW9uO1xuICB9XG5cbiAgY29uc3Qgc2NoZWR1bGVPbkpTID1cbiAgICB0eXBlb2YgZnVuID09PSAnZnVuY3Rpb24nXG4gICAgICA/IGdsb2JhbC5fc2NoZWR1bGVIb3N0RnVuY3Rpb25PbkpTXG4gICAgICA6IGdsb2JhbC5fc2NoZWR1bGVSZW1vdGVGdW5jdGlvbk9uSlM7XG5cbiAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgc2NoZWR1bGVPbkpTKFxuICAgICAgZnVuIGFzXG4gICAgICAgIHwgKCguLi5hcmdzOiBBcmdzKSA9PiBSZXR1cm5WYWx1ZSlcbiAgICAgICAgfCBXb3JrbGV0RnVuY3Rpb248QXJncywgUmV0dXJuVmFsdWU+LFxuICAgICAgYXJncy5sZW5ndGggPiAwXG4gICAgICAgID8gLy8gVE9ETyBUWVBFU0NSSVBUIHRoaXMgY2FzdCBpcyB0ZXJyaWJsZSBidXQgd2lsbCBiZSBmaXhlZFxuICAgICAgICAgIChtYWtlU2hhcmVhYmxlQ2xvbmVPblVJUmVjdXJzaXZlKGFyZ3MpIGFzIHVua25vd24gYXMgdW5rbm93bltdKVxuICAgICAgICA6IHVuZGVmaW5lZFxuICAgICk7XG4gIH07XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQUMsSUFBQUEsc0JBQUEsR0FBQUMsT0FBQTtBQUFBQyxNQUFBLENBQUFDLGNBQUEsQ0FBQUMsT0FBQTtFQUFBQyxLQUFBO0FBQUE7QUFBQUQsT0FBQSxDQUFBRSxjQUFBO0FBQUFGLE9BQUEsQ0FBQUcsc0JBQUEsR0FBQUEsc0JBQUE7QUFBQUgsT0FBQSxDQUFBSSxlQUFBLEdBQUFKLE9BQUEsQ0FBQUssa0JBQUEsR0FBQUwsT0FBQSxDQUFBTSxPQUFBLEdBQUFOLE9BQUEsQ0FBQU8sT0FBQTtBQUFBLElBQUFDLG1CQUFBLEdBQUFaLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFB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