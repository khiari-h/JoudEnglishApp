12968ca8e55b510038d5767c2998c233
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _HeroCard = _interopRequireDefault(require("../../../../components/ui/HeroCard"));
var _RevealButton = _interopRequireDefault(require("../../../../components/ui/RevealButton"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var PhraseCard = function PhraseCard(_ref) {
  var phraseData = _ref.phraseData,
    showTranslation = _ref.showTranslation,
    onToggleTranslation = _ref.onToggleTranslation,
    _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? "#5E60CE" : _ref$levelColor;
  var styles = (0, _style.default)(levelColor);
  if (!phraseData) {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.container,
      children: (0, _jsxRuntime.jsx)(_HeroCard.default, {
        content: "Loading phrase...",
        fontSize: 24,
        levelColor: levelColor,
        showUnderline: false
      })
    });
  }
  var phrase = phraseData.english;
  var translation = phraseData.translation;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsx)(_HeroCard.default, {
      content: phrase,
      fontSize: 28,
      levelColor: levelColor,
      showUnderline: true,
      lineHeight: 36
    }), (0, _jsxRuntime.jsx)(_RevealButton.default, {
      isRevealed: showTranslation,
      revealedContent: translation,
      revealText: "Reveal Translation",
      hideText: "Hide Translation",
      onToggle: onToggleTranslation,
      levelColor: levelColor
    })]
  });
};
var _default = exports.default = PhraseCard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX0hlcm9DYXJkIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9SZXZlYWxCdXR0b24iLCJfc3R5bGUiLCJfanN4UnVudGltZSIsIlBocmFzZUNhcmQiLCJfcmVmIiwicGhyYXNlRGF0YSIsInNob3dUcmFuc2xhdGlvbiIsIm9uVG9nZ2xlVHJhbnNsYXRpb24iLCJfcmVmJGxldmVsQ29sb3IiLCJsZXZlbENvbG9yIiwic3R5bGVzIiwiY3JlYXRlU3R5bGVzIiwianN4IiwiVmlldyIsInN0eWxlIiwiY29udGFpbmVyIiwiY2hpbGRyZW4iLCJkZWZhdWx0IiwiY29udGVudCIsImZvbnRTaXplIiwic2hvd1VuZGVybGluZSIsInBocmFzZSIsImVuZ2xpc2giLCJ0cmFuc2xhdGlvbiIsImpzeHMiLCJsaW5lSGVpZ2h0IiwiaXNSZXZlYWxlZCIsInJldmVhbGVkQ29udGVudCIsInJldmVhbFRleHQiLCJoaWRlVGV4dCIsIm9uVG9nZ2xlIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gUGhyYXNlQ2FyZC9pbmRleC5qcyAtIFZFUlNJT04gVUxUUkEtTkVUVE9Zw4lFXHJcbmltcG9ydCB7IFZpZXcgfSBmcm9tIFwicmVhY3QtbmF0aXZlXCI7XHJcbmltcG9ydCBIZXJvQ2FyZCBmcm9tIFwiLi4vLi4vLi4vLi4vY29tcG9uZW50cy91aS9IZXJvQ2FyZFwiO1xyXG5pbXBvcnQgUmV2ZWFsQnV0dG9uIGZyb20gXCIuLi8uLi8uLi8uLi9jb21wb25lbnRzL3VpL1JldmVhbEJ1dHRvblwiO1xyXG5pbXBvcnQgY3JlYXRlU3R5bGVzIGZyb20gXCIuL3N0eWxlXCI7XHJcblxyXG4vKipcclxuICog8J+OryBQaHJhc2VDYXJkIC0gVmVyc2lvbiBVbHRyYS1TaW1wbGVcclxuICogUGhyYXNlIGFuZ2xhaXNlICsgUmV2ZWFsIHRyYWR1Y3Rpb24gZnJhbsOnYWlzZVxyXG4gKiBTVVBQUklNw4kgOiBFeGFtcGxlIGV0IENvbnRleHQgKGludXRpbGVzKVxyXG4gKi9cclxuY29uc3QgUGhyYXNlQ2FyZCA9ICh7XHJcbiAgcGhyYXNlRGF0YSxcclxuICBzaG93VHJhbnNsYXRpb24sXHJcbiAgb25Ub2dnbGVUcmFuc2xhdGlvbixcclxuICBsZXZlbENvbG9yID0gXCIjNUU2MENFXCIsXHJcbn0pID0+IHtcclxuICBjb25zdCBzdHlsZXMgPSBjcmVhdGVTdHlsZXMobGV2ZWxDb2xvcik7XHJcblxyXG4gIC8vIFZhbGlkYXRpb24gZGVzIGRvbm7DqWVzXHJcbiAgaWYgKCFwaHJhc2VEYXRhKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn0+XHJcbiAgICAgICAgPEhlcm9DYXJkIFxyXG4gICAgICAgICAgY29udGVudD1cIkxvYWRpbmcgcGhyYXNlLi4uXCJcclxuICAgICAgICAgIGZvbnRTaXplPXsyNH1cclxuICAgICAgICAgIGxldmVsQ29sb3I9e2xldmVsQ29sb3J9XHJcbiAgICAgICAgICBzaG93VW5kZXJsaW5lPXtmYWxzZX1cclxuICAgICAgICAvPlxyXG4gICAgICA8L1ZpZXc+XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLy8g8J+OryBET05Ow4lFUyBFU1NFTlRJRUxMRVMgU0VVTEVNRU5UXHJcbiAgY29uc3QgcGhyYXNlID0gcGhyYXNlRGF0YS5lbmdsaXNoO1xyXG4gIGNvbnN0IHRyYW5zbGF0aW9uID0gcGhyYXNlRGF0YS50cmFuc2xhdGlvbjtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfT5cclxuICAgICAgey8qIPCfjq8gUEhSQVNFIEFOR0xBSVNFIC0gSGVybyBTZWN0aW9uICovfVxyXG4gICAgICA8SGVyb0NhcmQgXHJcbiAgICAgICAgY29udGVudD17cGhyYXNlfVxyXG4gICAgICAgIGZvbnRTaXplPXsyOH0gLy8gQWRhcHTDqSBwb3VyIHBocmFzZXMgKHBsdXMgbG9uZ3VlcyBxdWUgbW90cylcclxuICAgICAgICBsZXZlbENvbG9yPXtsZXZlbENvbG9yfVxyXG4gICAgICAgIHNob3dVbmRlcmxpbmVcclxuICAgICAgICBsaW5lSGVpZ2h0PXszNn0gLy8gUG91ciBwaHJhc2VzIG11bHRpLWxpZ25lc1xyXG4gICAgICAvPlxyXG4gICAgICBcclxuICAgICAgey8qIPCflJggQk9VVE9OIFJFVkVBTCBUUkFEVUNUSU9OICovfVxyXG4gICAgICA8UmV2ZWFsQnV0dG9uXHJcbiAgICAgICAgaXNSZXZlYWxlZD17c2hvd1RyYW5zbGF0aW9ufVxyXG4gICAgICAgIHJldmVhbGVkQ29udGVudD17dHJhbnNsYXRpb259XHJcbiAgICAgICAgcmV2ZWFsVGV4dD1cIlJldmVhbCBUcmFuc2xhdGlvblwiXHJcbiAgICAgICAgaGlkZVRleHQ9XCJIaWRlIFRyYW5zbGF0aW9uXCJcclxuICAgICAgICBvblRvZ2dsZT17b25Ub2dnbGVUcmFuc2xhdGlvbn1cclxuICAgICAgICBsZXZlbENvbG9yPXtsZXZlbENvbG9yfVxyXG4gICAgICAvPlxyXG4gICAgPC9WaWV3PlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQaHJhc2VDYXJkOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxJQUFBQSxZQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxTQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBRyxhQUFBLEdBQUFELHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBSSxNQUFBLEdBQUFGLHNCQUFBLENBQUFGLE9BQUE7QUFBbUMsSUFBQUssV0FBQSxHQUFBTCxPQUFBO0FBT25DLElBQU1NLFVBQVUsR0FBRyxTQUFiQSxVQUFVQSxDQUFBQyxJQUFBLEVBS1Y7RUFBQSxJQUpKQyxVQUFVLEdBQUFELElBQUEsQ0FBVkMsVUFBVTtJQUNWQyxlQUFlLEdBQUFGLElBQUEsQ0FBZkUsZUFBZTtJQUNmQyxtQkFBbUIsR0FBQUgsSUFBQSxDQUFuQkcsbUJBQW1CO0lBQUFDLGVBQUEsR0FBQUosSUFBQSxDQUNuQkssVUFBVTtJQUFWQSxVQUFVLEdBQUFELGVBQUEsY0FBRyxTQUFTLEdBQUFBLGVBQUE7RUFFdEIsSUFBTUUsTUFBTSxHQUFHLElBQUFDLGNBQVksRUFBQ0YsVUFBVSxDQUFDO0VBR3ZDLElBQUksQ0FBQ0osVUFBVSxFQUFFO0lBQ2YsT0FDRSxJQUFBSCxXQUFBLENBQUFVLEdBQUEsRUFBQ2hCLFlBQUEsQ0FBQWlCLElBQUk7TUFBQ0MsS0FBSyxFQUFFSixNQUFNLENBQUNLLFNBQVU7TUFBQUMsUUFBQSxFQUM1QixJQUFBZCxXQUFBLENBQUFVLEdBQUEsRUFBQ2QsU0FBQSxDQUFBbUIsT0FBUTtRQUNQQyxPQUFPLEVBQUMsbUJBQW1CO1FBQzNCQyxRQUFRLEVBQUUsRUFBRztRQUNiVixVQUFVLEVBQUVBLFVBQVc7UUFDdkJXLGFBQWEsRUFBRTtNQUFNLENBQ3RCO0lBQUMsQ0FDRSxDQUFDO0VBRVg7RUFHQSxJQUFNQyxNQUFNLEdBQUdoQixVQUFVLENBQUNpQixPQUFPO0VBQ2pDLElBQU1DLFdBQVcsR0FBR2xCLFVBQVUsQ0FBQ2tCLFdBQVc7RUFFMUMsT0FDRSxJQUFBckIsV0FBQSxDQUFBc0IsSUFBQSxFQUFDNUIsWUFBQSxDQUFBaUIsSUFBSTtJQUFDQyxLQUFLLEVBQUVKLE1BQU0sQ0FBQ0ssU0FBVTtJQUFBQyxRQUFBLEdBRTVCLElBQUFkLFdBQUEsQ0FBQVUsR0FBQSxFQUFDZCxTQUFBLENBQUFtQixPQUFRO01BQ1BDLE9BQU8sRUFBRUcsTUFBTztNQUNoQkYsUUFBUSxFQUFFLEVBQUc7TUFDYlYsVUFBVSxFQUFFQSxVQUFXO01BQ3ZCVyxhQUFhO01BQ2JLLFVBQVUsRUFBRTtJQUFHLENBQ2hCLENBQUMsRUFHRixJQUFBdkIsV0FBQSxDQUFBVSxHQUFBLEVBQUNaLGFBQUEsQ0FBQWlCLE9BQVk7TUFDWFMsVUFBVSxFQUFFcEIsZUFBZ0I7TUFDNUJxQixlQUFlLEVBQUVKLFdBQVk7TUFDN0JLLFVBQVUsRUFBQyxvQkFBb0I7TUFDL0JDLFFBQVEsRUFBQyxrQkFBa0I7TUFDM0JDLFFBQVEsRUFBRXZCLG1CQUFvQjtNQUM5QkUsVUFBVSxFQUFFQTtJQUFXLENBQ3hCLENBQUM7RUFBQSxDQUNFLENBQUM7QUFFWCxDQUFDO0FBQUMsSUFBQXNCLFFBQUEsR0FBQUMsT0FBQSxDQUFBZixPQUFBLEdBRWFkLFVBQVUiLCJpZ25vcmVMaXN0IjpbXX0=