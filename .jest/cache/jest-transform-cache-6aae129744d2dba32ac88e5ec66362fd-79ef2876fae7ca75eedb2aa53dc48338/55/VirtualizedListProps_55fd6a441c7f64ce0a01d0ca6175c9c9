1665db7e3335c9caad7ded7ac682d59e
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.horizontalOrDefault = horizontalOrDefault;
exports.initialNumToRenderOrDefault = initialNumToRenderOrDefault;
exports.maxToRenderPerBatchOrDefault = maxToRenderPerBatchOrDefault;
exports.onEndReachedThresholdOrDefault = onEndReachedThresholdOrDefault;
exports.onStartReachedThresholdOrDefault = onStartReachedThresholdOrDefault;
exports.windowSizeOrDefault = windowSizeOrDefault;
var React = _interopRequireWildcard(require("react"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function horizontalOrDefault(horizontal) {
  return horizontal != null ? horizontal : false;
}
function initialNumToRenderOrDefault(initialNumToRender) {
  return initialNumToRender != null ? initialNumToRender : 10;
}
function maxToRenderPerBatchOrDefault(maxToRenderPerBatch) {
  return maxToRenderPerBatch != null ? maxToRenderPerBatch : 10;
}
function onStartReachedThresholdOrDefault(onStartReachedThreshold) {
  return onStartReachedThreshold != null ? onStartReachedThreshold : 2;
}
function onEndReachedThresholdOrDefault(onEndReachedThreshold) {
  return onEndReachedThreshold != null ? onEndReachedThreshold : 2;
}
function windowSizeOrDefault(windowSize) {
  return windowSize != null ? windowSize : 21;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,