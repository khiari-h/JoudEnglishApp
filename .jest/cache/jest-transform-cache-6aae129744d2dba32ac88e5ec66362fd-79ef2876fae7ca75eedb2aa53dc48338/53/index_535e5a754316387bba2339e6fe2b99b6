19aaf1d5f3684892fea0e46f1134d522
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _NavigationButtons = _interopRequireDefault(require("../../../../components/exercise-common/NavigationButtons"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var GrammarNavigation = function GrammarNavigation(_ref) {
  var showFeedback = _ref.showFeedback,
    isCorrect = _ref.isCorrect,
    canCheckAnswer = _ref.canCheckAnswer,
    onCheckAnswer = _ref.onCheckAnswer,
    onPreviousExercise = _ref.onPreviousExercise,
    onNextExercise = _ref.onNextExercise,
    onRetryExercise = _ref.onRetryExercise,
    onSkipExercise = _ref.onSkipExercise,
    isFirstExercise = _ref.isFirstExercise,
    isLastExercise = _ref.isLastExercise,
    _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? "#3b82f6" : _ref$levelColor;
  if (!showFeedback) {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.container,
      children: (0, _jsxRuntime.jsx)(_NavigationButtons.default, {
        onNext: onCheckAnswer,
        disableNext: !canCheckAnswer,
        disablePrevious: true,
        showSkip: false,
        currentIndex: 0,
        totalCount: 1,
        primaryColor: levelColor,
        buttonLabels: {
          next: "Check Answer",
          previous: "",
          skip: "",
          finish: ""
        },
        variant: "centered"
      })
    });
  }
  if (isCorrect) {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.container,
      children: (0, _jsxRuntime.jsx)(_NavigationButtons.default, {
        onNext: onNextExercise,
        onPrevious: onPreviousExercise,
        disablePrevious: isFirstExercise,
        disableNext: false,
        showSkip: false,
        currentIndex: isLastExercise ? 1 : 0,
        totalCount: 2,
        primaryColor: levelColor,
        buttonLabels: {
          next: isLastExercise ? "Finish" : "Next",
          previous: "Previous",
          skip: "",
          finish: "Finish"
        },
        variant: "standard"
      })
    });
  }
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: _style.default.container,
    children: (0, _jsxRuntime.jsx)(_NavigationButtons.default, {
      onNext: onSkipExercise,
      onPrevious: onRetryExercise,
      disablePrevious: false,
      disableNext: false,
      showSkip: false,
      currentIndex: 0,
      totalCount: 1,
      primaryColor: levelColor,
      buttonLabels: {
        next: "Skip",
        previous: "Try Again",
        skip: "",
        finish: ""
      },
      variant: "standard"
    })
  });
};
var _default = exports.default = GrammarNavigation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX05hdmlnYXRpb25CdXR0b25zIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9zdHlsZSIsIl9qc3hSdW50aW1lIiwiR3JhbW1hck5hdmlnYXRpb24iLCJfcmVmIiwic2hvd0ZlZWRiYWNrIiwiaXNDb3JyZWN0IiwiY2FuQ2hlY2tBbnN3ZXIiLCJvbkNoZWNrQW5zd2VyIiwib25QcmV2aW91c0V4ZXJjaXNlIiwib25OZXh0RXhlcmNpc2UiLCJvblJldHJ5RXhlcmNpc2UiLCJvblNraXBFeGVyY2lzZSIsImlzRmlyc3RFeGVyY2lzZSIsImlzTGFzdEV4ZXJjaXNlIiwiX3JlZiRsZXZlbENvbG9yIiwibGV2ZWxDb2xvciIsImpzeCIsIlZpZXciLCJzdHlsZSIsInN0eWxlcyIsImNvbnRhaW5lciIsImNoaWxkcmVuIiwiZGVmYXVsdCIsIm9uTmV4dCIsImRpc2FibGVOZXh0IiwiZGlzYWJsZVByZXZpb3VzIiwic2hvd1NraXAiLCJjdXJyZW50SW5kZXgiLCJ0b3RhbENvdW50IiwicHJpbWFyeUNvbG9yIiwiYnV0dG9uTGFiZWxzIiwibmV4dCIsInByZXZpb3VzIiwic2tpcCIsImZpbmlzaCIsInZhcmlhbnQiLCJvblByZXZpb3VzIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2NvbXBvbmVudHMvc2NyZWVucy9leGVyY2lzZXMvZ3JhbW1hci9HcmFtbWFyTmF2aWdhdGlvbi9pbmRleC5qc1xyXG5pbXBvcnQgeyBWaWV3IH0gZnJvbSBcInJlYWN0LW5hdGl2ZVwiO1xyXG5pbXBvcnQgTmF2aWdhdGlvbkJ1dHRvbnMgZnJvbSBcIi4uLy4uLy4uLy4uL2NvbXBvbmVudHMvZXhlcmNpc2UtY29tbW9uL05hdmlnYXRpb25CdXR0b25zXCI7XHJcbmltcG9ydCBzdHlsZXMgZnJvbSBcIi4vc3R5bGVcIjtcclxuXHJcbi8qKlxyXG4gKiDwn46vIEdyYW1tYXJOYXZpZ2F0aW9uIC0gVmVyc2lvbiBTaW1wbGUgYXZlYyBOYXZpZ2F0aW9uQnV0dG9uc1xyXG4gKiAtIFLDqXV0aWxpc2UgbGUgY29tcG9zYW50IGfDqW7DqXJpcXVlIE5hdmlnYXRpb25CdXR0b25zXHJcbiAqIC0gTG9naXF1ZSBzaW1wbGlmacOpZSBldCBjb2jDqXJlbnRlIGF2ZWMgVm9jYWJ1bGFpcmVcclxuICogLSBQYXMgZGUgY29kZSBkdXBsaXF1w6lcclxuICogLSBEZXNpZ24gdW5pZmnDqVxyXG4gKi9cclxuY29uc3QgR3JhbW1hck5hdmlnYXRpb24gPSAoe1xyXG4gIHNob3dGZWVkYmFjayxcclxuICBpc0NvcnJlY3QsXHJcbiAgY2FuQ2hlY2tBbnN3ZXIsXHJcbiAgb25DaGVja0Fuc3dlcixcclxuICBvblByZXZpb3VzRXhlcmNpc2UsXHJcbiAgb25OZXh0RXhlcmNpc2UsXHJcbiAgb25SZXRyeUV4ZXJjaXNlLFxyXG4gIG9uU2tpcEV4ZXJjaXNlLFxyXG4gIGlzRmlyc3RFeGVyY2lzZSxcclxuICBpc0xhc3RFeGVyY2lzZSxcclxuICBsZXZlbENvbG9yID0gXCIjM2I4MmY2XCIsXHJcbn0pID0+IHtcclxuXHJcbiAgLy8g8J+OryBMT0dJUVVFIFNJTVBMSUZJw4lFIC0gMyBtb2RlcyBjbGFpcnNcclxuICBcclxuICAvLyBNb2RlIDE6IFBhcyBlbmNvcmUgdsOpcmlmacOpIOKGkiBDaGVjayBBbnN3ZXJcclxuICBpZiAoIXNob3dGZWVkYmFjaykge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9PlxyXG4gICAgICAgIDxOYXZpZ2F0aW9uQnV0dG9uc1xyXG4gICAgICAgICAgb25OZXh0PXtvbkNoZWNrQW5zd2VyfVxyXG4gICAgICAgICAgZGlzYWJsZU5leHQ9eyFjYW5DaGVja0Fuc3dlcn1cclxuICAgICAgICAgIGRpc2FibGVQcmV2aW91cyAvLyBQYXMgZGUgUHJldmlvdXMgcGVuZGFudCBjaGVja1xyXG4gICAgICAgICAgc2hvd1NraXA9e2ZhbHNlfVxyXG4gICAgICAgICAgY3VycmVudEluZGV4PXswfVxyXG4gICAgICAgICAgdG90YWxDb3VudD17MX1cclxuICAgICAgICAgIHByaW1hcnlDb2xvcj17bGV2ZWxDb2xvcn1cclxuICAgICAgICAgIGJ1dHRvbkxhYmVscz17e1xyXG4gICAgICAgICAgICBuZXh0OiBcIkNoZWNrIEFuc3dlclwiLFxyXG4gICAgICAgICAgICBwcmV2aW91czogXCJcIixcclxuICAgICAgICAgICAgc2tpcDogXCJcIixcclxuICAgICAgICAgICAgZmluaXNoOiBcIlwiLFxyXG4gICAgICAgICAgfX1cclxuICAgICAgICAgIHZhcmlhbnQ9XCJjZW50ZXJlZFwiIC8vIEp1c3RlIGxlIGJvdXRvbiBDaGVjayBjZW50csOpXHJcbiAgICAgICAgLz5cclxuICAgICAgPC9WaWV3PlxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8vIE1vZGUgMjogUsOpcG9uc2UgY29ycmVjdGUg4oaSIE5hdmlnYXRpb24gbm9ybWFsZVxyXG4gIGlmIChpc0NvcnJlY3QpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfT5cclxuICAgICAgICA8TmF2aWdhdGlvbkJ1dHRvbnNcclxuICAgICAgICAgIG9uTmV4dD17b25OZXh0RXhlcmNpc2V9XHJcbiAgICAgICAgICBvblByZXZpb3VzPXtvblByZXZpb3VzRXhlcmNpc2V9XHJcbiAgICAgICAgICBkaXNhYmxlUHJldmlvdXM9e2lzRmlyc3RFeGVyY2lzZX1cclxuICAgICAgICAgIGRpc2FibGVOZXh0PXtmYWxzZX1cclxuICAgICAgICAgIHNob3dTa2lwPXtmYWxzZX1cclxuICAgICAgICAgIGN1cnJlbnRJbmRleD17aXNMYXN0RXhlcmNpc2UgPyAxIDogMH1cclxuICAgICAgICAgIHRvdGFsQ291bnQ9ezJ9XHJcbiAgICAgICAgICBwcmltYXJ5Q29sb3I9e2xldmVsQ29sb3J9XHJcbiAgICAgICAgICBidXR0b25MYWJlbHM9e3tcclxuICAgICAgICAgICAgbmV4dDogaXNMYXN0RXhlcmNpc2UgPyBcIkZpbmlzaFwiIDogXCJOZXh0XCIsXHJcbiAgICAgICAgICAgIHByZXZpb3VzOiBcIlByZXZpb3VzXCIsXHJcbiAgICAgICAgICAgIHNraXA6IFwiXCIsXHJcbiAgICAgICAgICAgIGZpbmlzaDogXCJGaW5pc2hcIixcclxuICAgICAgICAgIH19XHJcbiAgICAgICAgICB2YXJpYW50PVwic3RhbmRhcmRcIiAvLyBOYXZpZ2F0aW9uIHN0YW5kYXJkIGNvbW1lIFZvY2FidWxhaXJlXHJcbiAgICAgICAgLz5cclxuICAgICAgPC9WaWV3PlxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8vIE1vZGUgMzogUsOpcG9uc2UgaW5jb3JyZWN0ZSDihpIgVHJ5IEFnYWluICsgU2tpcFxyXG4gIHJldHVybiAoXHJcbiAgICA8VmlldyBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn0+XHJcbiAgICAgIDxOYXZpZ2F0aW9uQnV0dG9uc1xyXG4gICAgICAgIG9uTmV4dD17b25Ta2lwRXhlcmNpc2V9XHJcbiAgICAgICAgb25QcmV2aW91cz17b25SZXRyeUV4ZXJjaXNlfVxyXG4gICAgICAgIGRpc2FibGVQcmV2aW91cz17ZmFsc2V9XHJcbiAgICAgICAgZGlzYWJsZU5leHQ9e2ZhbHNlfVxyXG4gICAgICAgIHNob3dTa2lwPXtmYWxzZX1cclxuICAgICAgICBjdXJyZW50SW5kZXg9ezB9XHJcbiAgICAgICAgdG90YWxDb3VudD17MX1cclxuICAgICAgICBwcmltYXJ5Q29sb3I9e2xldmVsQ29sb3J9XHJcbiAgICAgICAgYnV0dG9uTGFiZWxzPXt7XHJcbiAgICAgICAgICBuZXh0OiBcIlNraXBcIixcclxuICAgICAgICAgIHByZXZpb3VzOiBcIlRyeSBBZ2FpblwiLFxyXG4gICAgICAgICAgc2tpcDogXCJcIixcclxuICAgICAgICAgIGZpbmlzaDogXCJcIixcclxuICAgICAgICB9fVxyXG4gICAgICAgIHZhcmlhbnQ9XCJzdGFuZGFyZFwiIC8vIFRyeSBBZ2FpbiDDoCBnYXVjaGUsIFNraXAgw6AgZHJvaXRlXHJcbiAgICAgIC8+XHJcbiAgICA8L1ZpZXc+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEdyYW1tYXJOYXZpZ2F0aW9uOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxJQUFBQSxZQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxrQkFBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUcsTUFBQSxHQUFBRCxzQkFBQSxDQUFBRixPQUFBO0FBQTZCLElBQUFJLFdBQUEsR0FBQUosT0FBQTtBQVM3QixJQUFNSyxpQkFBaUIsR0FBRyxTQUFwQkEsaUJBQWlCQSxDQUFBQyxJQUFBLEVBWWpCO0VBQUEsSUFYSkMsWUFBWSxHQUFBRCxJQUFBLENBQVpDLFlBQVk7SUFDWkMsU0FBUyxHQUFBRixJQUFBLENBQVRFLFNBQVM7SUFDVEMsY0FBYyxHQUFBSCxJQUFBLENBQWRHLGNBQWM7SUFDZEMsYUFBYSxHQUFBSixJQUFBLENBQWJJLGFBQWE7SUFDYkMsa0JBQWtCLEdBQUFMLElBQUEsQ0FBbEJLLGtCQUFrQjtJQUNsQkMsY0FBYyxHQUFBTixJQUFBLENBQWRNLGNBQWM7SUFDZEMsZUFBZSxHQUFBUCxJQUFBLENBQWZPLGVBQWU7SUFDZkMsY0FBYyxHQUFBUixJQUFBLENBQWRRLGNBQWM7SUFDZEMsZUFBZSxHQUFBVCxJQUFBLENBQWZTLGVBQWU7SUFDZkMsY0FBYyxHQUFBVixJQUFBLENBQWRVLGNBQWM7SUFBQUMsZUFBQSxHQUFBWCxJQUFBLENBQ2RZLFVBQVU7SUFBVkEsVUFBVSxHQUFBRCxlQUFBLGNBQUcsU0FBUyxHQUFBQSxlQUFBO0VBTXRCLElBQUksQ0FBQ1YsWUFBWSxFQUFFO0lBQ2pCLE9BQ0UsSUFBQUgsV0FBQSxDQUFBZSxHQUFBLEVBQUNwQixZQUFBLENBQUFxQixJQUFJO01BQUNDLEtBQUssRUFBRUMsY0FBTSxDQUFDQyxTQUFVO01BQUFDLFFBQUEsRUFDNUIsSUFBQXBCLFdBQUEsQ0FBQWUsR0FBQSxFQUFDbEIsa0JBQUEsQ0FBQXdCLE9BQWlCO1FBQ2hCQyxNQUFNLEVBQUVoQixhQUFjO1FBQ3RCaUIsV0FBVyxFQUFFLENBQUNsQixjQUFlO1FBQzdCbUIsZUFBZTtRQUNmQyxRQUFRLEVBQUUsS0FBTTtRQUNoQkMsWUFBWSxFQUFFLENBQUU7UUFDaEJDLFVBQVUsRUFBRSxDQUFFO1FBQ2RDLFlBQVksRUFBRWQsVUFBVztRQUN6QmUsWUFBWSxFQUFFO1VBQ1pDLElBQUksRUFBRSxjQUFjO1VBQ3BCQyxRQUFRLEVBQUUsRUFBRTtVQUNaQyxJQUFJLEVBQUUsRUFBRTtVQUNSQyxNQUFNLEVBQUU7UUFDVixDQUFFO1FBQ0ZDLE9BQU8sRUFBQztNQUFVLENBQ25CO0lBQUMsQ0FDRSxDQUFDO0VBRVg7RUFHQSxJQUFJOUIsU0FBUyxFQUFFO0lBQ2IsT0FDRSxJQUFBSixXQUFBLENBQUFlLEdBQUEsRUFBQ3BCLFlBQUEsQ0FBQXFCLElBQUk7TUFBQ0MsS0FBSyxFQUFFQyxjQUFNLENBQUNDLFNBQVU7TUFBQUMsUUFBQSxFQUM1QixJQUFBcEIsV0FBQSxDQUFBZSxHQUFBLEVBQUNsQixrQkFBQSxDQUFBd0IsT0FBaUI7UUFDaEJDLE1BQU0sRUFBRWQsY0FBZTtRQUN2QjJCLFVBQVUsRUFBRTVCLGtCQUFtQjtRQUMvQmlCLGVBQWUsRUFBRWIsZUFBZ0I7UUFDakNZLFdBQVcsRUFBRSxLQUFNO1FBQ25CRSxRQUFRLEVBQUUsS0FBTTtRQUNoQkMsWUFBWSxFQUFFZCxjQUFjLEdBQUcsQ0FBQyxHQUFHLENBQUU7UUFDckNlLFVBQVUsRUFBRSxDQUFFO1FBQ2RDLFlBQVksRUFBRWQsVUFBVztRQUN6QmUsWUFBWSxFQUFFO1VBQ1pDLElBQUksRUFBRWxCLGNBQWMsR0FBRyxRQUFRLEdBQUcsTUFBTTtVQUN4Q21CLFFBQVEsRUFBRSxVQUFVO1VBQ3BCQyxJQUFJLEVBQUUsRUFBRTtVQUNSQyxNQUFNLEVBQUU7UUFDVixDQUFFO1FBQ0ZDLE9BQU8sRUFBQztNQUFVLENBQ25CO0lBQUMsQ0FDRSxDQUFDO0VBRVg7RUFHQSxPQUNFLElBQUFsQyxXQUFBLENBQUFlLEdBQUEsRUFBQ3BCLFlBQUEsQ0FBQXFCLElBQUk7SUFBQ0MsS0FBSyxFQUFFQyxjQUFNLENBQUNDLFNBQVU7SUFBQUMsUUFBQSxFQUM1QixJQUFBcEIsV0FBQSxDQUFBZSxHQUFBLEVBQUNsQixrQkFBQSxDQUFBd0IsT0FBaUI7TUFDaEJDLE1BQU0sRUFBRVosY0FBZTtNQUN2QnlCLFVBQVUsRUFBRTFCLGVBQWdCO01BQzVCZSxlQUFlLEVBQUUsS0FBTTtNQUN2QkQsV0FBVyxFQUFFLEtBQU07TUFDbkJFLFFBQVEsRUFBRSxLQUFNO01BQ2hCQyxZQUFZLEVBQUUsQ0FBRTtNQUNoQkMsVUFBVSxFQUFFLENBQUU7TUFDZEMsWUFBWSxFQUFFZCxVQUFXO01BQ3pCZSxZQUFZLEVBQUU7UUFDWkMsSUFBSSxFQUFFLE1BQU07UUFDWkMsUUFBUSxFQUFFLFdBQVc7UUFDckJDLElBQUksRUFBRSxFQUFFO1FBQ1JDLE1BQU0sRUFBRTtNQUNWLENBQUU7TUFDRkMsT0FBTyxFQUFDO0lBQVUsQ0FDbkI7RUFBQyxDQUNFLENBQUM7QUFFWCxDQUFDO0FBQUMsSUFBQUUsUUFBQSxHQUFBQyxPQUFBLENBQUFoQixPQUFBLEdBRWFwQixpQkFBaUIiLCJpZ25vcmVMaXN0IjpbXX0=