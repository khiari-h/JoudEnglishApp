9e75e2f6f31bc6675f1994de7f4dae76
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _vectorIcons = require("@expo/vector-icons");
var _native = require("@react-navigation/native");
var _react = require("react");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var Header = function Header(_ref) {
  var title = _ref.title,
    _ref$showBackButton = _ref.showBackButton,
    showBackButton = _ref$showBackButton === void 0 ? true : _ref$showBackButton,
    onBackPress = _ref.onBackPress,
    rightComponent = _ref.rightComponent,
    rightIcon = _ref.rightIcon,
    onRightPress = _ref.onRightPress,
    _ref$backgroundColor = _ref.backgroundColor,
    backgroundColor = _ref$backgroundColor === void 0 ? "#FFFFFF" : _ref$backgroundColor,
    _ref$textColor = _ref.textColor,
    textColor = _ref$textColor === void 0 ? "#1F2937" : _ref$textColor,
    _ref$withShadow = _ref.withShadow,
    withShadow = _ref$withShadow === void 0 ? true : _ref$withShadow,
    _ref$withBottomBorder = _ref.withBottomBorder,
    withBottomBorder = _ref$withBottomBorder === void 0 ? false : _ref$withBottomBorder,
    _ref$withStatusBar = _ref.withStatusBar,
    withStatusBar = _ref$withStatusBar === void 0 ? true : _ref$withStatusBar,
    _ref$statusBarColor = _ref.statusBarColor,
    statusBarColor = _ref$statusBarColor === void 0 ? "#FFFFFF" : _ref$statusBarColor,
    _ref$statusBarStyle = _ref.statusBarStyle,
    statusBarStyle = _ref$statusBarStyle === void 0 ? "dark-content" : _ref$statusBarStyle,
    _ref$condensed = _ref.condensed,
    condensed = _ref$condensed === void 0 ? false : _ref$condensed,
    _ref$largeTitleMode = _ref.largeTitleMode,
    largeTitleMode = _ref$largeTitleMode === void 0 ? false : _ref$largeTitleMode,
    subtitle = _ref.subtitle,
    leftComponent = _ref.leftComponent,
    bottomComponent = _ref.bottomComponent,
    children = _ref.children,
    contentContainerStyle = _ref.contentContainerStyle,
    titleContainerStyle = _ref.titleContainerStyle;
  var navigation = (0, _native.useNavigation)();
  var handleBackPress = (0, _react.useCallback)(function () {
    if (onBackPress) {
      onBackPress();
    } else if (navigation.canGoBack()) {
      navigation.goBack();
    }
  }, [onBackPress, navigation]);
  var renderLeftComponent = function renderLeftComponent() {
    if (leftComponent) return leftComponent;
    if (showBackButton) {
      return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        onPress: handleBackPress,
        style: _style.default.backButton,
        hitSlop: {
          top: 10,
          bottom: 10,
          left: 10,
          right: 10
        },
        accessibilityRole: "button",
        testID: "back-button",
        children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: "chevron-back",
          size: 24,
          color: textColor
        })
      });
    }
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.placeholderButton
    });
  };
  var renderRightComponent = function renderRightComponent() {
    if (rightComponent) return rightComponent;
    if (rightIcon) {
      return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        onPress: onRightPress,
        style: _style.default.rightButton,
        hitSlop: {
          top: 10,
          bottom: 10,
          left: 10,
          right: 10
        },
        children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: rightIcon,
          size: 24,
          color: textColor
        })
      });
    }
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.placeholderButton
    });
  };
  var renderLargeTitleRightComponent = function renderLargeTitleRightComponent() {
    if (rightComponent) {
      return (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _style.default.rightComponentContainer,
        children: rightComponent
      });
    }
    if (rightIcon) {
      return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        onPress: onRightPress,
        hitSlop: {
          top: 10,
          bottom: 10,
          left: 10,
          right: 10
        },
        children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: rightIcon,
          size: 24,
          color: textColor
        })
      });
    }
    return null;
  };
  var renderStandardContent = function renderStandardContent() {
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: _style.default.standardContainer,
      children: [renderLeftComponent(), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [_style.default.title, {
          color: textColor
        }, condensed && _style.default.condensedTitle, titleContainerStyle],
        numberOfLines: 1,
        children: title
      }), renderRightComponent()]
    });
  };
  var renderLargeTitleContent = function renderLargeTitleContent() {
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: _style.default.largeTitleWrapper,
      children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: _style.default.topRow,
        children: [renderLeftComponent(), renderLargeTitleRightComponent()]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: titleContainerStyle,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [_style.default.largeTitle, {
            color: textColor
          }],
          children: title
        }), subtitle && (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: _style.default.largeTitleSubtitle,
          children: subtitle
        })]
      }), bottomComponent && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _style.default.bottomComponentContainer,
        children: bottomComponent
      })]
    });
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [_style.default.container, {
      backgroundColor: backgroundColor
    }, withShadow && _style.default.withShadow, withBottomBorder && _style.default.withBorder, condensed && _style.default.condensed, largeTitleMode && _style.default.largeTitleContainer, contentContainerStyle],
    children: [withStatusBar && (0, _jsxRuntime.jsx)(_reactNative.StatusBar, {
      backgroundColor: statusBarColor,
      barStyle: statusBarStyle
    }), children ? (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.childrenContainer,
      children: children
    }) : largeTitleMode ? renderLargeTitleContent() : renderStandardContent()]
  });
};
Header.propTypes = {
  title: _propTypes.default.string,
  showBackButton: _propTypes.default.bool,
  onBackPress: _propTypes.default.func,
  rightComponent: _propTypes.default.node,
  rightIcon: _propTypes.default.string,
  onRightPress: _propTypes.default.func,
  backgroundColor: _propTypes.default.string,
  textColor: _propTypes.default.string,
  withShadow: _propTypes.default.bool,
  withBottomBorder: _propTypes.default.bool,
  withStatusBar: _propTypes.default.bool,
  statusBarColor: _propTypes.default.string,
  statusBarStyle: _propTypes.default.oneOf(['default', 'light-content', 'dark-content']),
  condensed: _propTypes.default.bool,
  largeTitleMode: _propTypes.default.bool,
  subtitle: _propTypes.default.string,
  leftComponent: _propTypes.default.node,
  bottomComponent: _propTypes.default.node,
  children: _propTypes.default.node,
  contentContainerStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array]),
  titleContainerStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array])
};
var _default = exports.default = Header;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,