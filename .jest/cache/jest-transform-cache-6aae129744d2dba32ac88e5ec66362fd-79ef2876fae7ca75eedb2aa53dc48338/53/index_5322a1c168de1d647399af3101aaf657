8f077ef0188d099615f7edad7c74fbc8
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _Card = _interopRequireDefault(require("../../../../components/ui/Card"));
var _ThemeContext = require("../../../../contexts/ThemeContext");
var _constants = require("../../../../utils/constants");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var LevelsCircleRow = function LevelsCircleRow(_ref) {
  var levels = _ref.levels,
    currentLevel = _ref.currentLevel,
    onLevelPress = _ref.onLevelPress,
    getLevelLabel = _ref.getLevelLabel,
    colors = _ref.colors,
    primaryColor = _ref.primaryColor,
    styles = _ref.styles;
  var handlers = (0, _react.useMemo)(function () {
    var map = {};
    levels.forEach(function (level) {
      map[level.id] = function () {
        return onLevelPress(level.id);
      };
    });
    return map;
  }, [levels, onLevelPress]);
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: styles.levelsContainer,
    children: levels.map(function (level) {
      var _level$progress;
      var isActive = level.id === currentLevel;
      return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        testID: `level-${level.id}-button`,
        style: styles.levelButton,
        onPress: handlers[level.id],
        activeOpacity: 0.7,
        accessibilityRole: "button",
        accessibilityLabel: `Niveau ${getLevelLabel(level.id)}`,
        accessibilityValue: {
          min: 0,
          max: 100,
          now: (_level$progress = level.progress) != null ? _level$progress : 0
        },
        children: (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [styles.levelCircle, isActive ? [styles.activeLevelCircle, {
            backgroundColor: level.color || primaryColor
          }] : styles.futureLevelCircle],
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [styles.levelText, isActive ? styles.activeLevelText : [styles.futureLevelText, {
              color: colors.textSecondary
            }]],
            children: getLevelLabel(level.id)
          })
        })
      }, level.id);
    })
  });
};
LevelsCircleRow.propTypes = {
  levels: _propTypes.default.array.isRequired,
  currentLevel: _propTypes.default.string.isRequired,
  onLevelPress: _propTypes.default.func.isRequired,
  getLevelLabel: _propTypes.default.func.isRequired,
  colors: _propTypes.default.object.isRequired,
  primaryColor: _propTypes.default.string.isRequired,
  styles: _propTypes.default.object.isRequired
};
var GlobalProgressBar = function GlobalProgressBar(_ref2) {
  var progress = _ref2.progress,
    primaryColor = _ref2.primaryColor,
    colors = _ref2.colors,
    styles = _ref2.styles;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.globalProgressContainer,
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [styles.globalProgressTrack, {
        backgroundColor: `${primaryColor}15`
      }],
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.globalProgressFill, {
          width: `${Math.min(progress, 100)}%`,
          backgroundColor: primaryColor
        }]
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [styles.progressLabel, {
        color: colors.textSecondary
      }],
      children: "Progression globale"
    })]
  });
};
GlobalProgressBar.propTypes = {
  progress: _propTypes.default.number.isRequired,
  primaryColor: _propTypes.default.string.isRequired,
  colors: _propTypes.default.object.isRequired,
  styles: _propTypes.default.object.isRequired
};
var ProgressHeader = function ProgressHeader(_ref3) {
  var levelInfo = _ref3.levelInfo,
    levelLabel = _ref3.levelLabel,
    progress = _ref3.progress,
    primaryColor = _ref3.primaryColor,
    colors = _ref3.colors,
    styles = _ref3.styles;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.header,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.progressInfo,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [styles.progressTitle, {
          color: colors.text
        }],
        children: levelInfo.title || `Niveau ${levelLabel}`
      }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: [styles.progressSubtitle, {
          color: colors.textSecondary
        }],
        children: ["Continuez votre apprentissage ", levelInfo.icon]
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.progressBadge,
      children: (0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: [styles.progressPercentage, {
          color: primaryColor
        }],
        children: [progress, "%"]
      })
    })]
  });
};
ProgressHeader.propTypes = {
  levelInfo: _propTypes.default.object.isRequired,
  levelLabel: _propTypes.default.string.isRequired,
  progress: _propTypes.default.number.isRequired,
  primaryColor: _propTypes.default.string.isRequired,
  colors: _propTypes.default.object.isRequired,
  styles: _propTypes.default.object.isRequired
};
var LearningProgress = function LearningProgress(_ref4) {
  var _ref4$levels = _ref4.levels,
    levels = _ref4$levels === void 0 ? [] : _ref4$levels,
    _ref4$currentLevel = _ref4.currentLevel,
    currentLevel = _ref4$currentLevel === void 0 ? "1" : _ref4$currentLevel,
    onSelectLevel = _ref4.onSelectLevel,
    onChangeLevelVisual = _ref4.onChangeLevelVisual,
    _ref4$primaryColor = _ref4.primaryColor,
    primaryColor = _ref4$primaryColor === void 0 ? "#3B82F6" : _ref4$primaryColor,
    _ref4$globalProgress = _ref4.globalProgress,
    globalProgress = _ref4$globalProgress === void 0 ? 0 : _ref4$globalProgress;
  var _ref5 = (0, _react.useContext)(_ThemeContext.ThemeContext) || {},
    _ref5$colors = _ref5.colors,
    themeColors = _ref5$colors === void 0 ? {} : _ref5$colors;
  var colors = {
    surface: themeColors.surface || "#FFFFFF",
    text: themeColors.text || "#1F2937",
    textSecondary: themeColors.textSecondary || "#6B7280"
  };
  var effectiveLevels = levels.length ? levels : Object.entries(_constants.LANGUAGE_LEVELS).map(function (_ref6) {
    var _ref7 = (0, _slicedToArray2.default)(_ref6, 2),
      id = _ref7[0],
      data = _ref7[1];
    return {
      id: id,
      color: data.color
    };
  });
  var currentLevelInfo = _constants.LANGUAGE_LEVELS[currentLevel] || _constants.LANGUAGE_LEVELS["1"];
  var getLevelLabel = function getLevelLabel(id) {
    return id === "bonus" ? "B" : id;
  };
  var handleLevelPress = (0, _react.useCallback)(function (levelId) {
    if (onChangeLevelVisual) onChangeLevelVisual(levelId);
  }, [onChangeLevelVisual]);
  var handleExplorePress = (0, _react.useCallback)(function () {
    if (onSelectLevel) onSelectLevel(currentLevel);
  }, [onSelectLevel, currentLevel]);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: _style.default.container,
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [_style.default.sectionTitle, {
        color: colors.text
      }],
      children: "\uD83C\uDFC6 Progression g\xE9n\xE9rale"
    }), (0, _jsxRuntime.jsxs)(_Card.default, {
      style: [_style.default.card, {
        backgroundColor: colors.surface
      }],
      children: [(0, _jsxRuntime.jsx)(ProgressHeader, {
        levelInfo: currentLevelInfo,
        levelLabel: getLevelLabel(currentLevel),
        progress: globalProgress,
        primaryColor: primaryColor,
        colors: colors,
        styles: _style.default
      }), (0, _jsxRuntime.jsx)(GlobalProgressBar, {
        progress: globalProgress,
        primaryColor: primaryColor,
        colors: colors,
        styles: _style.default
      }), (0, _jsxRuntime.jsx)(LevelsCircleRow, {
        levels: effectiveLevels,
        currentLevel: currentLevel,
        onLevelPress: handleLevelPress,
        getLevelLabel: getLevelLabel,
        colors: colors,
        primaryColor: primaryColor,
        styles: _style.default
      }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        testID: "explore-level-button",
        style: [_style.default.actionButton, {
          borderColor: primaryColor
        }],
        onPress: handleExplorePress,
        activeOpacity: 0.7,
        accessibilityRole: "button",
        accessibilityLabel: `Explorer le niveau ${getLevelLabel(currentLevel)}`,
        children: (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: [_style.default.actionButtonText, {
            color: primaryColor
          }],
          children: ["Explorer le niveau ", getLevelLabel(currentLevel)]
        })
      })]
    })]
  });
};
LearningProgress.propTypes = {
  levels: _propTypes.default.array,
  currentLevel: _propTypes.default.string,
  onSelectLevel: _propTypes.default.func,
  onChangeLevelVisual: _propTypes.default.func,
  primaryColor: _propTypes.default.string,
  globalProgress: _propTypes.default.number
};
var _default = exports.default = LearningProgress;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,