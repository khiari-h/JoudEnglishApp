39cdb234a55313aa7190f72fdc1ef018
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _errorCorrectionC1Full = _interopRequireDefault(require("./categories/errorCorrectionC1Full"));
var _errorCorrectionC1Identify = _interopRequireDefault(require("./categories/errorCorrectionC1Identify"));
var _errorCorrectionC1MultipleChoice = _interopRequireDefault(require("./categories/errorCorrectionC1MultipleChoice"));
var allExercises = [].concat((0, _toConsumableArray2.default)(_errorCorrectionC1Full.default), (0, _toConsumableArray2.default)(_errorCorrectionC1Identify.default), (0, _toConsumableArray2.default)(_errorCorrectionC1MultipleChoice.default));
allExercises.sort(function (a, b) {
  if (a.categoryId !== b.categoryId) {
    return a.categoryId - b.categoryId;
  }
  var typeOrder = {
    'full': 1,
    'identify': 2,
    'multiple_choice': 3
  };
  return typeOrder[a.type] - typeOrder[b.type];
});
var errorCorrectionC1 = {
  level: "C1",
  totalExercises: allExercises.length,
  statistics: {
    full: _errorCorrectionC1Full.default.length,
    identify: _errorCorrectionC1Identify.default.length,
    multiple_choice: _errorCorrectionC1MultipleChoice.default.length,
    byCategory: {
      1: {
        name: "Nuanced Grammar & Style",
        count: 9
      },
      2: {
        name: "Advanced Discourse & Rhetoric",
        count: 10
      },
      3: {
        name: "Cultural & Contextual Language",
        count: 9
      },
      4: {
        name: "Complex Argumentation",
        count: 11
      },
      5: {
        name: "Linguistic Precision",
        count: 9
      }
    }
  },
  categories: [{
    id: 1,
    name: "Nuanced Grammar & Style",
    description: "Sophisticated grammatical structures, stylistic nuances, advanced syntax",
    exerciseCount: 9,
    difficulty: "Expert",
    color: "#3b82f6",
    topics: ["complex inversions", "parallel structures", "nuanced modality", "sophisticated conjunctions", "advanced syntax"],
    commonErrors: ["tense inconsistency", "redundant expressions", "inappropriate register"],
    skillsTargeted: ["grammatical sophistication", "stylistic awareness", "syntactic complexity", "academic precision"]
  }, {
    id: 2,
    name: "Advanced Discourse & Rhetoric",
    description: "Rhetorical devices, advanced discourse markers, persuasive language structures",
    exerciseCount: 10,
    difficulty: "Expert",
    color: "#10b981",
    topics: ["rhetorical devices", "advanced connectors", "discourse sophistication", "formal transitions", "academic argumentation"],
    commonErrors: ["inappropriate connectors", "redundant hedging", "informal discourse markers"],
    skillsTargeted: ["rhetorical competence", "advanced argumentation", "discourse mastery", "academic sophistication"]
  }, {
    id: 3,
    name: "Cultural & Contextual Language",
    description: "Cultural references, idiomatic sophistication, contextual appropriateness",
    exerciseCount: 9,
    difficulty: "Expert",
    color: "#f59e0b",
    topics: ["cultural allusions", "mythological references", "sophisticated idioms", "contextual precision", "literary references"],
    commonErrors: ["incorrect cultural references", "inappropriate register", "spelling of cultural terms"],
    skillsTargeted: ["cultural competence", "implicit understanding", "contextual sensitivity", "literary knowledge"]
  }, {
    id: 4,
    name: "Complex Argumentation",
    description: "Advanced argumentative structures, logical precision, academic reasoning",
    exerciseCount: 11,
    difficulty: "Expert",
    color: "#8b5cf6",
    topics: ["complex reasoning", "logical structures", "academic argumentation", "analytical precision", "empirical reasoning"],
    commonErrors: ["misused logical terms", "unsupported claims", "redundant qualifications", "imprecise terminology"],
    skillsTargeted: ["analytical thinking", "logical precision", "academic discourse", "critical reasoning"]
  }, {
    id: 5,
    name: "Linguistic Precision",
    description: "Precise word choice, semantic nuances, register mastery, conciseness",
    exerciseCount: 9,
    difficulty: "Expert",
    color: "#ef4444",
    topics: ["semantic precision", "register mastery", "lexical sophistication", "conciseness", "elegant expression"],
    commonErrors: ["redundant expressions", "wordy constructions", "imprecise vocabulary", "inappropriate formality"],
    skillsTargeted: ["lexical precision", "semantic awareness", "register expertise", "expressive economy"]
  }],
  exercises: allExercises,
  getExercisesByCategory: function getExercisesByCategory(categoryId) {
    return allExercises.filter(function (exercise) {
      return exercise.categoryId === categoryId;
    });
  },
  getExercisesByType: function getExercisesByType(type) {
    return allExercises.filter(function (exercise) {
      return exercise.type === type;
    });
  },
  getExercisesByCategoryAndType: function getExercisesByCategoryAndType(categoryId, type) {
    return allExercises.filter(function (exercise) {
      return exercise.categoryId === categoryId && exercise.type === type;
    });
  },
  getExpertLevelExercises: function getExpertLevelExercises() {
    return allExercises.filter(function (exercise) {
      var wordCount = exercise.text.split(' ').length;
      var hasAdvancedVocab = exercise.text.length > 100;
      return wordCount >= 15 && hasAdvancedVocab;
    });
  },
  getCulturalReferenceExercises: function getCulturalReferenceExercises() {
    return allExercises.filter(function (exercise) {
      var culturalKeywords = ['Sisyphean', 'Kafkaesque', 'Machiavellian', 'Pyrrhic', 'Achilles', 'quixotic'];
      return culturalKeywords.some(function (keyword) {
        return exercise.text.toLowerCase().includes(keyword.toLowerCase());
      });
    });
  },
  getAcademicPrecisionExercises: function getAcademicPrecisionExercises() {
    return allExercises.filter(function (exercise) {
      var academicKeywords = ['research', 'methodology', 'hypothesis', 'empirical', 'evidence'];
      return academicKeywords.some(function (keyword) {
        return exercise.text.toLowerCase().includes(keyword);
      });
    });
  },
  getStylisticExercises: function getStylisticExercises() {
    return allExercises.filter(function (exercise) {
      return exercise.categoryId === 1 || exercise.categoryId === 5 || exercise.explanation.toLowerCase().includes('style') || exercise.explanation.toLowerCase().includes('sophisticated');
    });
  },
  validateStructure: function validateStructure() {
    var requiredFields = ['categoryId', 'type', 'text', 'correctedText', 'hint', 'explanation'];
    var validTypes = ['full', 'identify', 'multiple_choice'];
    return allExercises.every(function (exercise) {
      var hasRequiredFields = requiredFields.every(function (field) {
        return Object.prototype.hasOwnProperty.call(exercise, field) && exercise[field] !== undefined;
      });
      var hasValidType = validTypes.includes(exercise.type);
      var hasValidCategory = exercise.categoryId >= 1 && exercise.categoryId <= 5;
      var hasExpertComplexity = exercise.text.split(' ').length >= 12;
      var hasSophisticatedVocab = exercise.text.length > 80;
      var hasTypeSpecificFields = true;
      if (exercise.type === 'multiple_choice') {
        hasTypeSpecificFields = exercise.choices && Array.isArray(exercise.choices) && exercise.choices.length >= 4 && exercise.correctChoiceIndex !== undefined && exercise.correctChoiceIndex >= 0 && exercise.correctChoiceIndex < exercise.choices.length;
      } else {
        hasTypeSpecificFields = exercise.errorPositions && Array.isArray(exercise.errorPositions);
      }
      return hasRequiredFields && hasValidType && hasValidCategory && hasExpertComplexity && hasSophisticatedVocab && hasTypeSpecificFields;
    });
  },
  getSummary: function getSummary() {
    var totalErrorPositions = allExercises.filter(function (ex) {
      return ex.errorPositions;
    }).reduce(function (sum, ex) {
      return sum + ex.errorPositions.length;
    }, 0);
    var totalTextLength = allExercises.reduce(function (sum, ex) {
      return sum + ex.text.length;
    }, 0);
    var expertExercises = errorCorrectionC1.getExpertLevelExercises().length;
    var culturalExercises = errorCorrectionC1.getCulturalReferenceExercises().length;
    var academicExercises = errorCorrectionC1.getAcademicPrecisionExercises().length;
    return {
      level: "C1",
      totalExercises: allExercises.length,
      categories: errorCorrectionC1.categories.length,
      difficulty: "Expert",
      focus: "Sophisticated grammatical structures, cultural competence, rhetorical mastery, academic precision",
      progression: "Builds on B2 with advanced stylistic awareness, cultural sophistication, and expert-level precision",
      distribution: {
        full: _errorCorrectionC1Full.default.length,
        identify: _errorCorrectionC1Identify.default.length,
        multiple_choice: _errorCorrectionC1MultipleChoice.default.length
      },
      complexity: {
        averageTextLength: Math.round(totalTextLength / allExercises.length),
        averageWordCount: Math.round(allExercises.reduce(function (sum, ex) {
          return sum + ex.text.split(' ').length;
        }, 0) / allExercises.length),
        totalErrorPositions: totalErrorPositions,
        averageErrorsPerExercise: Math.round(totalErrorPositions / allExercises.filter(function (ex) {
          return ex.errorPositions;
        }).length * 10) / 10,
        expertExercisesPercentage: Math.round(expertExercises / allExercises.length * 100),
        culturalReferencePercentage: Math.round(culturalExercises / allExercises.length * 100),
        academicFocusPercentage: Math.round(academicExercises / allExercises.length * 100)
      },
      skillsTargeted: ["Expert grammatical competence", "Cultural and literary sophistication", "Advanced rhetorical skills", "Academic precision and register mastery", "Sophisticated stylistic awareness"]
    };
  }
};
if (!errorCorrectionC1.validateStructure()) {} else {}
var _default = exports.default = errorCorrectionC1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,