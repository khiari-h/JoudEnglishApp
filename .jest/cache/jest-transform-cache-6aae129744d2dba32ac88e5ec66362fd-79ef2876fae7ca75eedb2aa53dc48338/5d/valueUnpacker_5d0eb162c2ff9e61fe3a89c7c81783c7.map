{"version":3,"names":["Object","defineProperty","exports","value","getValueUnpackerCode","_PlatformChecker","require","_commonTypes","_worklet_7469257692856_init_data","code","location","sourceMap","version","valueUnpacker","_e","global","Error","objectToUnpack","category","remoteFunctionName","workletsCache","__workletsCache","handleCache","__handleCache","undefined","Map","WeakMap","workletHash","__workletHash","workletFun","get","initData","__initData","evalWithSourceMap","evalWithSourceUrl","eval","set","functionInstance","bind","_recur","__init","fun","label","__remoteFunction","_toString","__closure","__stackDetails","_worklet_476246989929_init_data","__DEV__","shouldBeUseWeb","testWorklet","valueUnpackerTs2","isWorkletFunction","closure","keys","length"],"sources":["valueUnpacker.ts"],"sourcesContent":["/* eslint-disable reanimated/use-reanimated-error */\n'use strict';\nimport { shouldBeUseWeb } from './PlatformChecker';\nimport { isWorkletFunction } from './commonTypes';\nimport type { WorkletFunction } from './commonTypes';\n\nfunction valueUnpacker(\n  objectToUnpack: any,\n  category?: string,\n  remoteFunctionName?: string\n): any {\n  'worklet';\n  let workletsCache = global.__workletsCache;\n  let handleCache = global.__handleCache;\n  if (workletsCache === undefined) {\n    // init\n    workletsCache = global.__workletsCache = new Map();\n    handleCache = global.__handleCache = new WeakMap();\n  }\n  const workletHash = objectToUnpack.__workletHash;\n  if (workletHash !== undefined) {\n    let workletFun = workletsCache.get(workletHash);\n    if (workletFun === undefined) {\n      const initData = objectToUnpack.__initData;\n      if (global.evalWithSourceMap) {\n        // if the runtime (hermes only for now) supports loading source maps\n        // we want to use the proper filename for the location as it guarantees\n        // that debugger understands and loads the source code of the file where\n        // the worklet is defined.\n        workletFun = global.evalWithSourceMap(\n          '(' + initData.code + '\\n)',\n          initData.location,\n          initData.sourceMap\n        ) as (...args: any[]) => any;\n      } else if (global.evalWithSourceUrl) {\n        // if the runtime doesn't support loading source maps, in dev mode we\n        // can pass source url when evaluating the worklet. Now, instead of using\n        // the actual file location we use worklet hash, as it the allows us to\n        // properly symbolicate traces (see errors.ts for details)\n        workletFun = global.evalWithSourceUrl(\n          '(' + initData.code + '\\n)',\n          `worklet_${workletHash}`\n        ) as (...args: any[]) => any;\n      } else {\n        // in release we use the regular eval to save on JSI calls\n        // eslint-disable-next-line no-eval\n        workletFun = eval('(' + initData.code + '\\n)') as (\n          ...args: any[]\n        ) => any;\n      }\n      workletsCache.set(workletHash, workletFun);\n    }\n    const functionInstance = workletFun.bind(objectToUnpack);\n    objectToUnpack._recur = functionInstance;\n    return functionInstance;\n  } else if (objectToUnpack.__init !== undefined) {\n    let value = handleCache.get(objectToUnpack);\n    if (value === undefined) {\n      value = objectToUnpack.__init();\n      handleCache.set(objectToUnpack, value);\n    }\n    return value;\n  } else if (category === 'RemoteFunction') {\n    const fun = () => {\n      const label = remoteFunctionName\n        ? `function \\`${remoteFunctionName}\\``\n        : 'anonymous function';\n      throw new Error(`[Reanimated] Tried to synchronously call a non-worklet ${label} on the UI thread.\nSee https://docs.swmansion.com/react-native-reanimated/docs/guides/troubleshooting#tried-to-synchronously-call-a-non-worklet-function-on-the-ui-thread for more details.`);\n    };\n    fun.__remoteFunction = objectToUnpack;\n    return fun;\n  } else {\n    throw new Error(\n      `[Reanimated] Data type in category \"${category}\" not recognized by value unpacker: \"${_toString(\n        objectToUnpack\n      )}\".`\n    );\n  }\n}\n\ntype ValueUnpacker = WorkletFunction<\n  [objectToUnpack: any, category?: string],\n  any\n>;\n\nif (__DEV__ && !shouldBeUseWeb()) {\n  const testWorklet = (() => {\n    'worklet';\n  }) as WorkletFunction<[], void>;\n  if (!isWorkletFunction(testWorklet)) {\n    throw new Error(\n      `[Reanimated] Failed to create a worklet. See https://docs.swmansion.com/react-native-reanimated/docs/guides/troubleshooting#failed-to-create-a-worklet for more details.`\n    );\n  }\n  if (!isWorkletFunction(valueUnpacker)) {\n    throw new Error('[Reanimated] `valueUnpacker` is not a worklet');\n  }\n  const closure = (valueUnpacker as ValueUnpacker).__closure;\n  if (closure === undefined) {\n    throw new Error('[Reanimated] `valueUnpacker` closure is undefined');\n  }\n  if (Object.keys(closure).length !== 0) {\n    throw new Error('[Reanimated] `valueUnpacker` must have empty closure');\n  }\n}\n\nexport function getValueUnpackerCode() {\n  return (valueUnpacker as ValueUnpacker).__initData.code;\n}\n"],"mappings":"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","ignoreList":[]}