88c4f2d49190eddd3c859e895dbdbbf1
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn()
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
_getJestObj().mock('../../../../src/utils/constants', function () {
  return {
    EXERCISES: {
      vocabulary: {
        route: '/tabs/vocabulary',
        icon: 'üìö',
        title: 'Vocabulaire',
        color: '#3B82F6'
      },
      assessment: {
        route: '/tabs/assessment',
        icon: 'üìù',
        title: 'Test',
        color: '#EF4444'
      }
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _QuickActions = _interopRequireDefault(require("../../../../src/screens/Dashboard/components/QuickActions"));
var _ThemeContext = require("../../../../src/contexts/ThemeContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.spyOn(_reactNative2.Alert, 'alert');
var _require = require('expo-router'),
  router = _require.router;
describe('QuickActions', function () {
  var mockThemeContext = {
    colors: {
      surface: '#FFFFFF',
      text: '#1F2937',
      textSecondary: '#6B7280'
    }
  };
  var renderWithTheme = function renderWithTheme(component) {
    var themeValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : mockThemeContext;
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
      value: themeValue,
      children: component
    }));
  };
  beforeEach(function () {
    jest.clearAllMocks();
    _asyncStorage.default.getItem.mockResolvedValue(null);
    _reactNative2.Alert.alert.mockClear();
    router.push.mockClear();
  });
  describe('√âtat de chargement', function () {
    it('devrait afficher l\'√©tat de chargement initialement', function () {
      var _renderWithTheme = renderWithTheme((0, _jsxRuntime.jsx)(_QuickActions.default, {
          currentLevel: "1"
        })),
        getByText = _renderWithTheme.getByText;
      expect(getByText('‚ö° Actions rapides')).toBeTruthy();
      expect(getByText('Chargement...')).toBeTruthy();
    });
  });
  describe('Affichage des actions', function () {
    beforeEach(function () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_1_classic') {
          return Promise.resolve(JSON.stringify({
            completedWords: {
              category1: ['word1', 'word2', 'word3'],
              category2: ['word4', 'word5']
            }
          }));
        }
        return Promise.resolve(null);
      });
    });
    it('devrait afficher toutes les actions apr√®s le chargement', (0, _asyncToGenerator2.default)(function* () {
      var _renderWithTheme2 = renderWithTheme((0, _jsxRuntime.jsx)(_QuickActions.default, {
          currentLevel: "1"
        })),
        getByText = _renderWithTheme2.getByText,
        queryByText = _renderWithTheme2.queryByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByText('Chargement...')).toBeNull();
      });
      expect(getByText('‚ö° Actions rapides')).toBeTruthy();
      expect(getByText('Vocabulaire')).toBeTruthy();
      expect(getByText('R√©vision')).toBeTruthy();
      expect(getByText('Test')).toBeTruthy();
    }));
    it('devrait afficher les sous-titres corrects', (0, _asyncToGenerator2.default)(function* () {
      var _renderWithTheme3 = renderWithTheme((0, _jsxRuntime.jsx)(_QuickActions.default, {
          currentLevel: "1"
        })),
        getByText = _renderWithTheme3.getByText,
        queryByText = _renderWithTheme3.queryByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByText('Chargement...')).toBeNull();
      });
      expect(getByText('Apprendre de nouveaux mots')).toBeTruthy();
      expect(getByText('√âvaluer vos connaissances')).toBeTruthy();
    }));
    it('devrait afficher les ic√¥nes des exercices', (0, _asyncToGenerator2.default)(function* () {
      var _renderWithTheme4 = renderWithTheme((0, _jsxRuntime.jsx)(_QuickActions.default, {
          currentLevel: "1"
        })),
        getByText = _renderWithTheme4.getByText,
        queryByText = _renderWithTheme4.queryByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByText('Chargement...')).toBeNull();
      });
      expect(getByText('üìö')).toBeTruthy();
      expect(getByText('üîÑ')).toBeTruthy();
      expect(getByText('üìù')).toBeTruthy();
    }));
  });
  describe('Navigation vers vocabulaire', function () {
    it('devrait naviguer vers vocabulaire avec les bons param√®tres', (0, _asyncToGenerator2.default)(function* () {
      var _renderWithTheme5 = renderWithTheme((0, _jsxRuntime.jsx)(_QuickActions.default, {
          currentLevel: "2"
        })),
        getByText = _renderWithTheme5.getByText,
        queryByText = _renderWithTheme5.queryByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByText('Chargement...')).toBeNull();
      });
      var vocabularyButton = getByText('Vocabulaire');
      _reactNative.fireEvent.press(vocabularyButton);
      expect(router.push).toHaveBeenCalledWith({
        pathname: '/tabs/vocabulary',
        params: {
          level: '2',
          mode: 'classic'
        }
      });
    }));
  });
  describe('Navigation vers test', function () {
    it('devrait naviguer vers test avec le bon niveau', (0, _asyncToGenerator2.default)(function* () {
      var _renderWithTheme6 = renderWithTheme((0, _jsxRuntime.jsx)(_QuickActions.default, {
          currentLevel: "3"
        })),
        getByText = _renderWithTheme6.getByText,
        queryByText = _renderWithTheme6.queryByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByText('Chargement...')).toBeNull();
      });
      var testButton = getByText('Test');
      _reactNative.fireEvent.press(testButton);
      expect(router.push).toHaveBeenCalledWith({
        pathname: '/tabs/assessment',
        params: {
          level: '3'
        }
      });
    }));
  });
  describe('R√©vision avec mots suffisants', function () {
    beforeEach(function () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key.includes('vocabulary')) {
          return Promise.resolve(JSON.stringify({
            completedWords: {
              category1: ['word1', 'word2', 'word3', 'word4', 'word5'],
              category2: ['word6', 'word7', 'word8', 'word9', 'word10'],
              category3: ['word11', 'word12', 'word13', 'word14', 'word15']
            }
          }));
        }
        return Promise.resolve(null);
      });
    });
    it('devrait afficher le nombre de mots disponibles', (0, _asyncToGenerator2.default)(function* () {
      var _renderWithTheme7 = renderWithTheme((0, _jsxRuntime.jsx)(_QuickActions.default, {
          currentLevel: "1"
        })),
        getByText = _renderWithTheme7.getByText,
        queryByText = _renderWithTheme7.queryByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByText('Chargement...')).toBeNull();
      });
      expect(getByText('210 mots disponibles')).toBeTruthy();
    }));
    it('devrait naviguer vers r√©vision avec les bons param√®tres', (0, _asyncToGenerator2.default)(function* () {
      var _renderWithTheme8 = renderWithTheme((0, _jsxRuntime.jsx)(_QuickActions.default, {
          currentLevel: "1"
        })),
        getByText = _renderWithTheme8.getByText,
        queryByText = _renderWithTheme8.queryByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByText('Chargement...')).toBeNull();
      });
      var revisionButton = getByText('R√©vision');
      _reactNative.fireEvent.press(revisionButton);
      expect(router.push).toHaveBeenCalledWith({
        pathname: '/tabs/vocabularyRevision',
        params: {
          level: '1',
          questionsCount: 10,
          source: 'manual'
        }
      });
    }));
  });
  describe('R√©vision avec mots insuffisants', function () {
    beforeEach(function () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_1_classic') {
          return Promise.resolve(JSON.stringify({
            completedWords: {
              category1: ['word1', 'word2', 'word3', 'word4', 'word5']
            }
          }));
        }
        return Promise.resolve(null);
      });
    });
    it('devrait afficher le message d\'encouragement', (0, _asyncToGenerator2.default)(function* () {
      var _renderWithTheme9 = renderWithTheme((0, _jsxRuntime.jsx)(_QuickActions.default, {
          currentLevel: "1"
        })),
        getByText = _renderWithTheme9.getByText,
        queryByText = _renderWithTheme9.queryByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByText('Chargement...')).toBeNull();
      });
      expect(getByText('Apprenez plus de mots')).toBeTruthy();
    }));
    it('devrait avoir le bouton r√©vision d√©sactiv√© avec moins de 10 mots', (0, _asyncToGenerator2.default)(function* () {
      var _renderWithTheme0 = renderWithTheme((0, _jsxRuntime.jsx)(_QuickActions.default, {
          currentLevel: "1"
        })),
        getByText = _renderWithTheme0.getByText,
        queryByText = _renderWithTheme0.queryByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByText('Chargement...')).toBeNull();
      });
      expect(getByText('R√©vision')).toBeTruthy();
      expect(getByText('Apprenez plus de mots')).toBeTruthy();
      var revisionButton = getByText('R√©vision');
      _reactNative.fireEvent.press(revisionButton);
      expect(_reactNative2.Alert.alert).not.toHaveBeenCalled();
      expect(router.push).not.toHaveBeenCalled();
    }));
  });
  describe('Comptage des mots', function () {
    it('devrait compter les mots de tous les niveaux et modes', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_1_classic') {
          return Promise.resolve(JSON.stringify({
            completedWords: {
              cat1: ['w1', 'w2']
            }
          }));
        }
        if (key === 'vocabulary_2_fast') {
          return Promise.resolve(JSON.stringify({
            completedWords: {
              cat1: ['w3', 'w4', 'w5']
            }
          }));
        }
        return Promise.resolve(null);
      });
      var _renderWithTheme1 = renderWithTheme((0, _jsxRuntime.jsx)(_QuickActions.default, {
          currentLevel: "1"
        })),
        getByText = _renderWithTheme1.getByText,
        queryByText = _renderWithTheme1.queryByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByText('Chargement...')).toBeNull();
      });
      expect(getByText('5 mots disponibles')).toBeTruthy();
    }));
    it('devrait g√©rer les erreurs de lecture AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockRejectedValue(new Error('Storage error'));
      var _renderWithTheme10 = renderWithTheme((0, _jsxRuntime.jsx)(_QuickActions.default, {
          currentLevel: "1"
        })),
        getByText = _renderWithTheme10.getByText,
        queryByText = _renderWithTheme10.queryByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByText('Chargement...')).toBeNull();
      });
      expect(getByText('Apprenez plus de mots')).toBeTruthy();
    }));
    it('devrait g√©rer les donn√©es corrompues', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue('invalid json');
      var _renderWithTheme11 = renderWithTheme((0, _jsxRuntime.jsx)(_QuickActions.default, {
          currentLevel: "1"
        })),
        getByText = _renderWithTheme11.getByText,
        queryByText = _renderWithTheme11.queryByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByText('Chargement...')).toBeNull();
      });
      expect(getByText('Apprenez plus de mots')).toBeTruthy();
    }));
  });
  describe('Th√®me et couleurs', function () {
    it('devrait fonctionner sans contexte de th√®me', (0, _asyncToGenerator2.default)(function* () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuickActions.default, {
          currentLevel: "1"
        })),
        getByText = _render.getByText,
        queryByText = _render.queryByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByText('Chargement...')).toBeNull();
      });
      expect(getByText('‚ö° Actions rapides')).toBeTruthy();
      expect(getByText('Vocabulaire')).toBeTruthy();
    }));
    it('devrait utiliser les couleurs du th√®me', (0, _asyncToGenerator2.default)(function* () {
      var customTheme = {
        colors: {
          surface: '#000000',
          text: '#FFFFFF',
          textSecondary: '#CCCCCC'
        }
      };
      var _renderWithTheme12 = renderWithTheme((0, _jsxRuntime.jsx)(_QuickActions.default, {
          currentLevel: "1"
        }), customTheme),
        getByText = _renderWithTheme12.getByText,
        queryByText = _renderWithTheme12.queryByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByText('Chargement...')).toBeNull();
      });
      expect(getByText('‚ö° Actions rapides')).toBeTruthy();
    }));
  });
  describe('Niveaux diff√©rents', function () {
    it('devrait utiliser le niveau par d√©faut si non sp√©cifi√©', (0, _asyncToGenerator2.default)(function* () {
      var _renderWithTheme13 = renderWithTheme((0, _jsxRuntime.jsx)(_QuickActions.default, {})),
        getByText = _renderWithTheme13.getByText,
        queryByText = _renderWithTheme13.queryByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByText('Chargement...')).toBeNull();
      });
      var vocabularyButton = getByText('Vocabulaire');
      _reactNative.fireEvent.press(vocabularyButton);
      expect(router.push).toHaveBeenCalledWith({
        pathname: '/tabs/vocabulary',
        params: {
          level: '1',
          mode: 'classic'
        }
      });
    }));
    it('devrait recalculer les mots quand le niveau change', (0, _asyncToGenerator2.default)(function* () {
      var _renderWithTheme14 = renderWithTheme((0, _jsxRuntime.jsx)(_QuickActions.default, {
          currentLevel: "1"
        })),
        rerender = _renderWithTheme14.rerender,
        queryByText = _renderWithTheme14.queryByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByText('Chargement...')).toBeNull();
      });
      var initialCallCount = _asyncStorage.default.getItem.mock.calls.length;
      rerender((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
        value: mockThemeContext,
        children: (0, _jsxRuntime.jsx)(_QuickActions.default, {
          currentLevel: "2"
        })
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByText('Chargement...')).toBeNull();
      });
      expect(_asyncStorage.default.getItem.mock.calls.length).toBeGreaterThan(initialCallCount);
    }));
  });
  describe('Test sp√©cifique pour l\'alerte de r√©vision', function () {
    it('devrait d√©clencher une alerte si on force l\'action avec moins de 10 mots', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_1_classic') {
          return Promise.resolve(JSON.stringify({
            completedWords: {
              category1: ['word1', 'word2', 'word3', 'word4', 'word5']
            }
          }));
        }
        return Promise.resolve(null);
      });
      var _renderWithTheme15 = renderWithTheme((0, _jsxRuntime.jsx)(_QuickActions.default, {
          currentLevel: "1"
        })),
        queryByText = _renderWithTheme15.queryByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByText('Chargement...')).toBeNull();
      });
      var TestComponent = function TestComponent() {
        var navigateToRevision = function navigateToRevision() {
          if (5 < 10) {
            _reactNative2.Alert.alert("R√©vision", "Apprenez au moins 10 mots avant de r√©viser.", [{
              text: "OK"
            }]);
            return;
          }
        };
        return (0, _jsxRuntime.jsx)(TouchableOpacity, {
          onPress: navigateToRevision,
          testID: "test-revision",
          children: (0, _jsxRuntime.jsx)(Text, {
            children: "Test R\xE9vision"
          })
        });
      };
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestComponent, {})),
        getByTestId = _render2.getByTestId;
      _reactNative.fireEvent.press(getByTestId('test-revision'));
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('R√©vision', 'Apprenez au moins 10 mots avant de r√©viser.', [{
        text: 'OK'
      }]);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,