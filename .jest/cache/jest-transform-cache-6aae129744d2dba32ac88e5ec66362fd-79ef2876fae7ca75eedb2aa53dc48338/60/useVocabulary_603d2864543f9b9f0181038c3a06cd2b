65c699256e790aaf7e5e31f805d249d7
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _useVocabularySelectors = _interopRequireDefault(require("./internal/useVocabularySelectors"));
var _useVocabularyNavigation = _interopRequireDefault(require("./internal/useVocabularyNavigation"));
var _useVocabularyStorage2 = _interopRequireDefault(require("./internal/useVocabularyStorage"));
var useVocabulary = function useVocabulary() {
  var _currentCategory$word, _currentCategory$word2;
  var vocabularyData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "1";
  var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "classic";
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    categoryIndex = _useState2[0],
    setCategoryIndex = _useState2[1];
  var _useState3 = (0, _react.useState)(0),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    wordIndex = _useState4[0],
    setWordIndex = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    showTranslation = _useState6[0],
    setShowTranslation = _useState6[1];
  var _useState7 = (0, _react.useState)({}),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    completedWords = _useState8[0],
    setCompletedWords = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    loaded = _useState0[0],
    setLoaded = _useState0[1];
  var _useState1 = (0, _react.useState)(false),
    _useState10 = (0, _slicedToArray2.default)(_useState1, 2),
    showDetailedProgress = _useState10[0],
    setShowDetailedProgress = _useState10[1];
  var isInitialized = (0, _react.useRef)(false);
  var exercises = (vocabularyData == null ? void 0 : vocabularyData.exercises) || [];
  var currentCategory = exercises[categoryIndex] || {
    title: "",
    words: []
  };
  var currentWord = ((_currentCategory$word = currentCategory.words) == null ? void 0 : _currentCategory$word[wordIndex]) || {
    word: "",
    translation: "",
    definition: "",
    example: ""
  };
  var totalCategories = exercises.length;
  var totalWordsInCategory = ((_currentCategory$word2 = currentCategory.words) == null ? void 0 : _currentCategory$word2.length) || 0;
  var progressKey = `${level}_${mode}`;
  var STORAGE_KEY = `vocabulary_${progressKey}`;
  var _useVocabularyStorage = (0, _useVocabularyStorage2.default)({
      STORAGE_KEY: STORAGE_KEY,
      progressKey: progressKey,
      loaded: loaded,
      setLoaded: setLoaded,
      completedWords: completedWords,
      setCompletedWords: setCompletedWords,
      setCategoryIndex: setCategoryIndex,
      setWordIndex: setWordIndex,
      exercises: exercises,
      isInitialized: isInitialized
    }),
    saveData = _useVocabularyStorage.saveData;
  var _useVocabularyNavigat = (0, _useVocabularyNavigation.default)({
      exercises: exercises,
      level: level,
      mode: mode,
      categoryIndex: categoryIndex,
      wordIndex: wordIndex,
      totalWordsInCategory: totalWordsInCategory,
      setCategoryIndex: setCategoryIndex,
      setWordIndex: setWordIndex,
      setShowTranslation: setShowTranslation,
      completedWords: completedWords,
      setCompletedWords: setCompletedWords
    }),
    changeCategory = _useVocabularyNavigat.changeCategory,
    goToNextWord = _useVocabularyNavigat.goToNextWord,
    goToPreviousWord = _useVocabularyNavigat.goToPreviousWord,
    markWordAsCompleted = _useVocabularyNavigat.markWordAsCompleted,
    findNextUncompletedCategory = _useVocabularyNavigat.findNextUncompletedCategory,
    handleNext = _useVocabularyNavigat.handleNext,
    handlePrevious = _useVocabularyNavigat.handlePrevious;
  var _useVocabularySelecto = (0, _useVocabularySelectors.default)({
      exercises: exercises,
      completedWords: completedWords,
      categoryIndex: categoryIndex,
      wordIndex: wordIndex,
      totalWordsInCategory: totalWordsInCategory,
      currentWord: currentWord,
      currentCategory: currentCategory
    }),
    getStats = _useVocabularySelecto.getStats,
    getDisplayData = _useVocabularySelecto.getDisplayData,
    canGoToPrevious = _useVocabularySelecto.canGoToPrevious,
    isLastWordInExercise = _useVocabularySelecto.isLastWordInExercise;
  return {
    categoryIndex: categoryIndex,
    wordIndex: wordIndex,
    showTranslation: showTranslation,
    completedWords: completedWords,
    loaded: loaded,
    showDetailedProgress: showDetailedProgress,
    currentWord: currentWord,
    currentCategory: currentCategory,
    totalCategories: totalCategories,
    totalWordsInCategory: totalWordsInCategory,
    changeCategory: changeCategory,
    toggleTranslation: function toggleTranslation() {
      return setShowTranslation(function (prev) {
        return !prev;
      });
    },
    toggleDetailedProgress: function toggleDetailedProgress() {
      return setShowDetailedProgress(function (prev) {
        return !prev;
      });
    },
    handleNext: handleNext,
    handlePrevious: handlePrevious,
    canGoToPrevious: canGoToPrevious(),
    isLastWordInExercise: isLastWordInExercise(),
    stats: getStats(),
    display: getDisplayData(),
    saveData: saveData
  };
};
var _default = exports.default = useVocabulary;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3VzZVZvY2FidWxhcnlTZWxlY3RvcnMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3VzZVZvY2FidWxhcnlOYXZpZ2F0aW9uIiwiX3VzZVZvY2FidWxhcnlTdG9yYWdlMiIsInVzZVZvY2FidWxhcnkiLCJfY3VycmVudENhdGVnb3J5JHdvcmQiLCJfY3VycmVudENhdGVnb3J5JHdvcmQyIiwidm9jYWJ1bGFyeURhdGEiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJsZXZlbCIsIm1vZGUiLCJfdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsIl91c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheTIiLCJkZWZhdWx0IiwiY2F0ZWdvcnlJbmRleCIsInNldENhdGVnb3J5SW5kZXgiLCJfdXNlU3RhdGUzIiwiX3VzZVN0YXRlNCIsIndvcmRJbmRleCIsInNldFdvcmRJbmRleCIsIl91c2VTdGF0ZTUiLCJfdXNlU3RhdGU2Iiwic2hvd1RyYW5zbGF0aW9uIiwic2V0U2hvd1RyYW5zbGF0aW9uIiwiX3VzZVN0YXRlNyIsIl91c2VTdGF0ZTgiLCJjb21wbGV0ZWRXb3JkcyIsInNldENvbXBsZXRlZFdvcmRzIiwiX3VzZVN0YXRlOSIsIl91c2VTdGF0ZTAiLCJsb2FkZWQiLCJzZXRMb2FkZWQiLCJfdXNlU3RhdGUxIiwiX3VzZVN0YXRlMTAiLCJzaG93RGV0YWlsZWRQcm9ncmVzcyIsInNldFNob3dEZXRhaWxlZFByb2dyZXNzIiwiaXNJbml0aWFsaXplZCIsInVzZVJlZiIsImV4ZXJjaXNlcyIsImN1cnJlbnRDYXRlZ29yeSIsInRpdGxlIiwid29yZHMiLCJjdXJyZW50V29yZCIsIndvcmQiLCJ0cmFuc2xhdGlvbiIsImRlZmluaXRpb24iLCJleGFtcGxlIiwidG90YWxDYXRlZ29yaWVzIiwidG90YWxXb3Jkc0luQ2F0ZWdvcnkiLCJwcm9ncmVzc0tleSIsIlNUT1JBR0VfS0VZIiwiX3VzZVZvY2FidWxhcnlTdG9yYWdlIiwidXNlVm9jYWJ1bGFyeVN0b3JhZ2UiLCJzYXZlRGF0YSIsIl91c2VWb2NhYnVsYXJ5TmF2aWdhdCIsInVzZVZvY2FidWxhcnlOYXZpZ2F0aW9uIiwiY2hhbmdlQ2F0ZWdvcnkiLCJnb1RvTmV4dFdvcmQiLCJnb1RvUHJldmlvdXNXb3JkIiwibWFya1dvcmRBc0NvbXBsZXRlZCIsImZpbmROZXh0VW5jb21wbGV0ZWRDYXRlZ29yeSIsImhhbmRsZU5leHQiLCJoYW5kbGVQcmV2aW91cyIsIl91c2VWb2NhYnVsYXJ5U2VsZWN0byIsInVzZVZvY2FidWxhcnlTZWxlY3RvcnMiLCJnZXRTdGF0cyIsImdldERpc3BsYXlEYXRhIiwiY2FuR29Ub1ByZXZpb3VzIiwiaXNMYXN0V29yZEluRXhlcmNpc2UiLCJ0b2dnbGVUcmFuc2xhdGlvbiIsInByZXYiLCJ0b2dnbGVEZXRhaWxlZFByb2dyZXNzIiwic3RhdHMiLCJkaXNwbGF5IiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsidXNlVm9jYWJ1bGFyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBob29rcy91c2VWb2NhYnVsYXJ5LmpzIC0gQVZFQyBUSU1FU1RBTVBTIFBPVVIgQ09NUFRBR0UgUVVPVElESUVOXHJcblxyXG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgdXNlVm9jYWJ1bGFyeVNlbGVjdG9ycyBmcm9tICcuL2ludGVybmFsL3VzZVZvY2FidWxhcnlTZWxlY3RvcnMnO1xyXG5pbXBvcnQgdXNlVm9jYWJ1bGFyeU5hdmlnYXRpb24gZnJvbSAnLi9pbnRlcm5hbC91c2VWb2NhYnVsYXJ5TmF2aWdhdGlvbic7XHJcbmltcG9ydCB1c2VWb2NhYnVsYXJ5U3RvcmFnZSBmcm9tICcuL2ludGVybmFsL3VzZVZvY2FidWxhcnlTdG9yYWdlJztcclxuXHJcbmNvbnN0IHVzZVZvY2FidWxhcnkgPSAodm9jYWJ1bGFyeURhdGEgPSBudWxsLCBsZXZlbCA9IFwiMVwiLCBtb2RlID0gXCJjbGFzc2ljXCIpID0+IHtcclxuICBcclxuICBjb25zdCBbY2F0ZWdvcnlJbmRleCwgc2V0Q2F0ZWdvcnlJbmRleF0gPSB1c2VTdGF0ZSgwKTtcclxuICBjb25zdCBbd29yZEluZGV4LCBzZXRXb3JkSW5kZXhdID0gdXNlU3RhdGUoMCk7XHJcbiAgY29uc3QgW3Nob3dUcmFuc2xhdGlvbiwgc2V0U2hvd1RyYW5zbGF0aW9uXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICBjb25zdCBbY29tcGxldGVkV29yZHMsIHNldENvbXBsZXRlZFdvcmRzXSA9IHVzZVN0YXRlKHt9KTtcclxuICBjb25zdCBbbG9hZGVkLCBzZXRMb2FkZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gIGNvbnN0IFtzaG93RGV0YWlsZWRQcm9ncmVzcywgc2V0U2hvd0RldGFpbGVkUHJvZ3Jlc3NdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG5cclxuICBjb25zdCBpc0luaXRpYWxpemVkID0gdXNlUmVmKGZhbHNlKTtcclxuXHJcbiAgY29uc3QgZXhlcmNpc2VzID0gdm9jYWJ1bGFyeURhdGE/LmV4ZXJjaXNlcyB8fCBbXTtcclxuICBjb25zdCBjdXJyZW50Q2F0ZWdvcnkgPSBleGVyY2lzZXNbY2F0ZWdvcnlJbmRleF0gfHwgeyB0aXRsZTogXCJcIiwgd29yZHM6IFtdIH07XHJcbiAgY29uc3QgY3VycmVudFdvcmQgPSBjdXJyZW50Q2F0ZWdvcnkud29yZHM/Llt3b3JkSW5kZXhdIHx8IHsgd29yZDogXCJcIiwgdHJhbnNsYXRpb246IFwiXCIsIGRlZmluaXRpb246IFwiXCIsIGV4YW1wbGU6IFwiXCIgfTtcclxuICBjb25zdCB0b3RhbENhdGVnb3JpZXMgPSBleGVyY2lzZXMubGVuZ3RoO1xyXG4gIGNvbnN0IHRvdGFsV29yZHNJbkNhdGVnb3J5ID0gY3VycmVudENhdGVnb3J5LndvcmRzPy5sZW5ndGggfHwgMDtcclxuICBcclxuICBjb25zdCBwcm9ncmVzc0tleSA9IGAke2xldmVsfV8ke21vZGV9YDtcclxuICBjb25zdCBTVE9SQUdFX0tFWSA9IGB2b2NhYnVsYXJ5XyR7cHJvZ3Jlc3NLZXl9YDtcclxuXHJcbiAgLy8gU3RvcmFnZSBsaWZlY3ljbGVcclxuICBjb25zdCB7IHNhdmVEYXRhIH0gPSB1c2VWb2NhYnVsYXJ5U3RvcmFnZSh7XHJcbiAgICBTVE9SQUdFX0tFWSxcclxuICAgIHByb2dyZXNzS2V5LFxyXG4gICAgbG9hZGVkLFxyXG4gICAgc2V0TG9hZGVkLFxyXG4gICAgY29tcGxldGVkV29yZHMsXHJcbiAgICBzZXRDb21wbGV0ZWRXb3JkcyxcclxuICAgIHNldENhdGVnb3J5SW5kZXgsXHJcbiAgICBzZXRXb3JkSW5kZXgsXHJcbiAgICBleGVyY2lzZXMsXHJcbiAgICBpc0luaXRpYWxpemVkLFxyXG4gIH0pO1xyXG5cclxuICAvLyBOYXZpZ2F0aW9uICYgYWN0aW9uc1xyXG4gIGNvbnN0IHtcclxuICAgIGNoYW5nZUNhdGVnb3J5LFxyXG4gICAgZ29Ub05leHRXb3JkLFxyXG4gICAgZ29Ub1ByZXZpb3VzV29yZCxcclxuICAgIG1hcmtXb3JkQXNDb21wbGV0ZWQsXHJcbiAgICBmaW5kTmV4dFVuY29tcGxldGVkQ2F0ZWdvcnksXHJcbiAgICBoYW5kbGVOZXh0LFxyXG4gICAgaGFuZGxlUHJldmlvdXMsXHJcbiAgfSA9IHVzZVZvY2FidWxhcnlOYXZpZ2F0aW9uKHtcclxuICAgIGV4ZXJjaXNlcyxcclxuICAgIGxldmVsLFxyXG4gICAgbW9kZSxcclxuICAgIGNhdGVnb3J5SW5kZXgsXHJcbiAgICB3b3JkSW5kZXgsXHJcbiAgICB0b3RhbFdvcmRzSW5DYXRlZ29yeSxcclxuICAgIHNldENhdGVnb3J5SW5kZXgsXHJcbiAgICBzZXRXb3JkSW5kZXgsXHJcbiAgICBzZXRTaG93VHJhbnNsYXRpb24sXHJcbiAgICBjb21wbGV0ZWRXb3JkcyxcclxuICAgIHNldENvbXBsZXRlZFdvcmRzLFxyXG4gIH0pO1xyXG5cclxuICAvLyBTw6lsZWN0ZXVycy9tw6ltb1xyXG4gIGNvbnN0IHsgZ2V0U3RhdHMsIGdldERpc3BsYXlEYXRhLCBjYW5Hb1RvUHJldmlvdXMsIGlzTGFzdFdvcmRJbkV4ZXJjaXNlIH0gPSB1c2VWb2NhYnVsYXJ5U2VsZWN0b3JzKHtcclxuICAgIGV4ZXJjaXNlcyxcclxuICAgIGNvbXBsZXRlZFdvcmRzLFxyXG4gICAgY2F0ZWdvcnlJbmRleCxcclxuICAgIHdvcmRJbmRleCxcclxuICAgIHRvdGFsV29yZHNJbkNhdGVnb3J5LFxyXG4gICAgY3VycmVudFdvcmQsXHJcbiAgICBjdXJyZW50Q2F0ZWdvcnksXHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBjYXRlZ29yeUluZGV4LFxyXG4gICAgd29yZEluZGV4LFxyXG4gICAgc2hvd1RyYW5zbGF0aW9uLFxyXG4gICAgY29tcGxldGVkV29yZHMsXHJcbiAgICBsb2FkZWQsXHJcbiAgICBzaG93RGV0YWlsZWRQcm9ncmVzcyxcclxuICAgIGN1cnJlbnRXb3JkLFxyXG4gICAgY3VycmVudENhdGVnb3J5LFxyXG4gICAgdG90YWxDYXRlZ29yaWVzLFxyXG4gICAgdG90YWxXb3Jkc0luQ2F0ZWdvcnksXHJcbiAgICBjaGFuZ2VDYXRlZ29yeSxcclxuICAgIHRvZ2dsZVRyYW5zbGF0aW9uOiAoKSA9PiBzZXRTaG93VHJhbnNsYXRpb24ocHJldiA9PiAhcHJldiksXHJcbiAgICB0b2dnbGVEZXRhaWxlZFByb2dyZXNzOiAoKSA9PiBzZXRTaG93RGV0YWlsZWRQcm9ncmVzcyhwcmV2ID0+ICFwcmV2KSxcclxuICAgIGhhbmRsZU5leHQsXHJcbiAgICBoYW5kbGVQcmV2aW91cyxcclxuICAgIGNhbkdvVG9QcmV2aW91czogY2FuR29Ub1ByZXZpb3VzKCksXHJcbiAgICBpc0xhc3RXb3JkSW5FeGVyY2lzZTogaXNMYXN0V29yZEluRXhlcmNpc2UoKSxcclxuICAgIHN0YXRzOiBnZXRTdGF0cygpLFxyXG4gICAgZGlzcGxheTogZ2V0RGlzcGxheURhdGEoKSxcclxuICAgIHNhdmVEYXRhLFxyXG4gIH07XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCB1c2VWb2NhYnVs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