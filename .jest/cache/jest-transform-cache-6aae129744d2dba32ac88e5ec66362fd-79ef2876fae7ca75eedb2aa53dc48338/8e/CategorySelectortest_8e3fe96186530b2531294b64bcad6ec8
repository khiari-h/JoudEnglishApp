536ae1c2006b80aba143e90520fe6f37
_getJestObj().mock('react-native/Libraries/Components/ScrollView/ScrollView', function () {
  var React = require('react');
  var scrollToSpy = jest.fn();
  var MockScrollView = React.forwardRef(function (props, ref) {
    React.useImperativeHandle(ref, function () {
      return {
        scrollTo: scrollToSpy
      };
    });
    var childrenWithLayouts = React.Children.map(props.children, function (child, index) {
      if (!child) return null;
      return React.cloneElement(child, {
        onLayout: function onLayout(event) {
          child.props.onLayout == null || child.props.onLayout({
            nativeEvent: {
              layout: {
                x: index * 100,
                y: 0,
                width: 80,
                height: 40
              }
            }
          });
        }
      });
    });
    return (0, _jsxRuntime.jsx)(React.Fragment, {
      children: childrenWithLayouts
    });
  });
  MockScrollView.scrollToSpy = scrollToSpy;
  return MockScrollView;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
require("@testing-library/jest-native");
var _CategorySelector = _interopRequireDefault(require("../../../src/components/exercise-common/CategorySelector"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.useFakeTimers();
jest.spyOn(_reactNative2.Animated, 'timing').mockImplementation(function () {
  return {
    start: function start(callback) {
      setTimeout(function () {
        (0, _reactNative.act)(function () {
          if (callback) {
            callback({
              finished: true
            });
          }
        });
      }, 500);
    },
    stop: jest.fn()
  };
});
describe('CategorySelector Component', function () {
  var mockCategories = [{
    id: '1',
    name: 'Fruits'
  }, {
    id: '2',
    name: 'Vegetables'
  }, {
    id: '3',
    name: 'Dairy Products'
  }, {
    id: '4',
    name: 'Meat & Fish'
  }, {
    id: '5',
    name: 'Beverages'
  }];
  var stableProps = {
    categories: mockCategories,
    selectedCategory: '1',
    onSelectCategory: jest.fn()
  };
  var renderCategorySelector = function renderCategorySelector() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, stableProps, props)));
  };
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
    _reactNative2.ScrollView.scrollToSpy.mockClear();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  describe('Rendering', function () {
    it('should render without crashing', function () {
      expect(renderCategorySelector()).toBeTruthy();
    });
    it('should render all categories correctly', function () {
      var _renderCategorySelect = renderCategorySelector(),
        getByText = _renderCategorySelect.getByText;
      mockCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should render categories in the correct order', function () {
      var _renderCategorySelect2 = renderCategorySelector(),
        getAllByRole = _renderCategorySelect2.getAllByRole;
      var categoryNames = getAllByRole('button').map(function (element) {
        return element.props.accessibilityLabel;
      });
      expect(categoryNames).toEqual(mockCategories.map(function (cat) {
        return cat.name;
      }));
    });
    it('should handle empty categories array gracefully', function () {
      var _renderCategorySelect3 = renderCategorySelector({
          categories: []
        }),
        queryByText = _renderCategorySelect3.queryByText;
      mockCategories.forEach(function (category) {
        expect(queryByText(category.name)).toBeNull();
      });
    });
    it('should highlight the selected category visually', function () {
      var _renderCategorySelect4 = renderCategorySelector({
          selectedCategory: '2'
        }),
        getByRole = _renderCategorySelect4.getByRole;
      var selectedPill = getByRole('button', {
        name: 'Vegetables'
      });
      expect(selectedPill).toHaveAccessibilityState({
        selected: true
      });
    });
  });
  describe('User Interactions', function () {
    it('should call onSelectCategory when a different category is pressed', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect5 = renderCategorySelector({
          selectedCategory: '1',
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect5.getByText;
      _reactNative.fireEvent.press(getByText('Vegetables'));
      expect(mockOnSelect).toHaveBeenCalledTimes(1);
      expect(mockOnSelect).toHaveBeenCalledWith('2');
    });
    it('should not call onSelectCategory when the same category is pressed', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect6 = renderCategorySelector({
          selectedCategory: '1',
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect6.getByText;
      _reactNative.fireEvent.press(getByText('Fruits'));
      expect(mockOnSelect).not.toHaveBeenCalled();
    });
    it('should call onSelectCategory with correct category id for each category', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect7 = renderCategorySelector({
          selectedCategory: '1',
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect7.getByText;
      var categoriesToTest = mockCategories.filter(function (cat) {
        return cat.id !== '1';
      });
      categoriesToTest.forEach(function (category) {
        _reactNative.fireEvent.press(getByText(category.name));
        expect(mockOnSelect).toHaveBeenCalledWith(category.id);
      });
      expect(mockOnSelect).toHaveBeenCalledTimes(categoriesToTest.length);
    });
  });
  describe('Animations', function () {
    it('should trigger press animations correctly', function () {
      var _renderCategorySelect8 = renderCategorySelector(),
        getByText = _renderCategorySelect8.getByText;
      var categoryPill = getByText('Vegetables');
      (0, _reactNative.act)(function () {
        (0, _reactNative.fireEvent)(categoryPill, 'pressIn');
        (0, _reactNative.fireEvent)(categoryPill, 'pressOut');
      });
      expect(categoryPill).toBeTruthy();
    });
    it('should handle rapid press interactions without crashing', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect9 = renderCategorySelector({
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect9.getByText;
      var categoryPill = getByText('Vegetables');
      (0, _reactNative.act)(function () {
        (0, _reactNative.fireEvent)(categoryPill, 'pressIn');
        (0, _reactNative.fireEvent)(categoryPill, 'pressOut');
        _reactNative.fireEvent.press(categoryPill);
        (0, _reactNative.fireEvent)(categoryPill, 'pressIn');
        (0, _reactNative.fireEvent)(categoryPill, 'pressOut');
      });
      expect(mockOnSelect).toHaveBeenCalledWith('2');
      expect(categoryPill).toBeTruthy();
    });
    it('should not trigger new animation if one is already in progress', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect0 = renderCategorySelector({
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect0.getByText;
      _reactNative.fireEvent.press(getByText('Vegetables'));
      _reactNative.fireEvent.press(getByText('Dairy Products'));
      expect(mockOnSelect).toHaveBeenCalledTimes(2);
      expect(mockOnSelect).toHaveBeenNthCalledWith(1, '2');
      expect(mockOnSelect).toHaveBeenNthCalledWith(2, '3');
      (0, _reactNative.act)(function () {
        jest.runAllTimers();
      });
    });
  });
  describe('Edge Cases', function () {
    it('should handle undefined selectedCategory gracefully', function () {
      var _renderCategorySelect1 = renderCategorySelector({
          selectedCategory: undefined
        }),
        getByText = _renderCategorySelect1.getByText;
      mockCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should handle null selectedCategory gracefully', function () {
      var _renderCategorySelect10 = renderCategorySelector({
          selectedCategory: null
        }),
        getByText = _renderCategorySelect10.getByText;
      mockCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should handle non-existent selectedCategory id', function () {
      var _renderCategorySelect11 = renderCategorySelector({
          selectedCategory: 'non-existent'
        }),
        getByText = _renderCategorySelect11.getByText;
      mockCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should handle missing onSelectCategory prop gracefully', function () {
      var _renderCategorySelect12 = renderCategorySelector({
          onSelectCategory: undefined
        }),
        getByText = _renderCategorySelect12.getByText;
      expect(function () {
        _reactNative.fireEvent.press(getByText('Vegetables'));
      }).not.toThrow();
    });
    it('should handle categories with special characters in names', function () {
      var specialCategories = [{
        id: '1',
        name: 'Café & Thé'
      }, {
        id: '2',
        name: 'Fruits & Légumes'
      }, {
        id: '3',
        name: 'Viande/Poisson'
      }];
      var _renderCategorySelect13 = renderCategorySelector({
          categories: specialCategories
        }),
        getByText = _renderCategorySelect13.getByText;
      specialCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should handle very long category names', function () {
      var longNameCategories = [{
        id: '1',
        name: 'This is a very long category name that might cause layout issues'
      }, {
        id: '2',
        name: 'Short'
      }];
      var _renderCategorySelect14 = renderCategorySelector({
          categories: longNameCategories
        }),
        getByText = _renderCategorySelect14.getByText;
      longNameCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
  });
  describe('Performance', function () {
    it('should handle large number of categories efficiently', function () {
      var manyCategories = Array.from({
        length: 100
      }, function (_, i) {
        return {
          id: `${i + 1}`,
          name: `Category ${i + 1}`
        };
      });
      var startTime = Date.now();
      var _renderCategorySelect15 = renderCategorySelector({
          categories: manyCategories
        }),
        queryAllByText = _renderCategorySelect15.queryAllByText;
      var endTime = Date.now();
      expect(endTime - startTime).toBeLessThan(1000);
      var categoryElements = queryAllByText(/^Category/);
      expect(categoryElements).toHaveLength(100);
    });
  });
  describe('Accessibility', function () {
    it('should have proper accessibility labels', function () {
      var _renderCategorySelect16 = renderCategorySelector(),
        getByLabelText = _renderCategorySelect16.getByLabelText;
      mockCategories.forEach(function (category) {
        var element = getByLabelText(category.name);
        expect(element).toBeTruthy();
      });
    });
    it('should support screen reader navigation', function () {
      var _renderCategorySelect17 = renderCategorySelector(),
        getAllByRole = _renderCategorySelect17.getAllByRole;
      var buttons = getAllByRole('button');
      expect(buttons).toHaveLength(mockCategories.length);
    });
  });
  describe('Animation Edge Cases', function () {
    it('should handle animation when fromCategory is null/undefined', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect18 = renderCategorySelector({
          selectedCategory: undefined,
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect18.getByText,
        rerender = _renderCategorySelect18.rerender;
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, stableProps, {
        selectedCategory: "2",
        onSelectCategory: mockOnSelect
      })));
      expect(getByText('Vegetables')).toBeTruthy();
    });
    it('should handle animation when toCategory is null/undefined', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect19 = renderCategorySelector({
          selectedCategory: "1",
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect19.getByText,
        rerender = _renderCategorySelect19.rerender;
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, stableProps, {
        selectedCategory: undefined,
        onSelectCategory: mockOnSelect
      })));
      expect(getByText('Fruits')).toBeTruthy();
    });
    it('should handle case where no animations are created (empty animationsArray)', function () {
      var _renderCategorySelect20 = renderCategorySelector({
          categories: [],
          selectedCategory: '1'
        }),
        rerender = _renderCategorySelect20.rerender;
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: [],
        selectedCategory: "2",
        onSelectCategory: jest.fn()
      }));
      expect(true).toBeTruthy();
    });
  });
  describe('Animation fallbacks', function () {
    it('should handle missing animation references gracefully', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: [{
            id: '1',
            name: 'Test'
          }],
          selectedCategory: "1",
          onSelectCategory: jest.fn()
        })),
        rerender = _render.rerender;
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: [{
          id: '999',
          name: 'New'
        }],
        selectedCategory: "999",
        onSelectCategory: jest.fn()
      }));
      expect(true).toBeTruthy();
    });
  });
  describe('Memoization (areEqual function)', function () {
    it('should re-render when selectedCategory changes', function () {
      var _renderCategorySelect21 = renderCategorySelector({
          selectedCategory: '1'
        }),
        rerender = _renderCategorySelect21.rerender,
        getByRole = _renderCategorySelect21.getByRole;
      var button = getByRole('button', {
        name: 'Fruits'
      });
      expect(button).toHaveAccessibilityState({
        selected: true
      });
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, stableProps, {
        selectedCategory: "2"
      })));
      button = getByRole('button', {
        name: 'Vegetables'
      });
      expect(button).toHaveAccessibilityState({
        selected: true
      });
    });
    it('should re-render when primaryColor changes', function () {
      var _renderCategorySelect22 = renderCategorySelector({
          primaryColor: '#FF0000'
        }),
        rerender = _renderCategorySelect22.rerender;
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, stableProps, {
        primaryColor: "#00FF00"
      })));
      expect(true).toBeTruthy();
    });
    it('should re-render when categories length changes', function () {
      var _renderCategorySelect23 = renderCategorySelector(),
        rerender = _renderCategorySelect23.rerender,
        queryByText = _renderCategorySelect23.queryByText;
      var newCategories = [].concat(mockCategories, [{
        id: '6',
        name: 'New Category'
      }]);
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, stableProps, {
        categories: newCategories
      })));
      expect(queryByText('New Category')).toBeTruthy();
    });
    it('should NOT re-render when categories array reference changes but content is same', function () {
      var _renderCategorySelect24 = renderCategorySelector(),
        rerender = _renderCategorySelect24.rerender;
      var sameCategoriesNewRef = mockCategories.map(function (cat) {
        return Object.assign({}, cat);
      });
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, stableProps, {
        categories: sameCategoriesNewRef
      })));
      expect(true).toBeTruthy();
    });
    it('should re-render when category content changes', function () {
      var _renderCategorySelect25 = renderCategorySelector(),
        rerender = _renderCategorySelect25.rerender,
        queryByText = _renderCategorySelect25.queryByText;
      var modifiedCategories = [{
        id: '1',
        name: 'Modified Fruits'
      }].concat((0, _toConsumableArray2.default)(mockCategories.slice(1)));
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, stableProps, {
        categories: modifiedCategories
      })));
      expect(queryByText('Modified Fruits')).toBeTruthy();
      expect(queryByText('Fruits')).toBeNull();
    });
  });
  describe('Auto-scroll behavior', function () {
    it('should scroll to selected category when layout is available', (0, _asyncToGenerator2.default)(function* () {
      var _renderCategorySelect26 = renderCategorySelector({
          selectedCategory: '1'
        }),
        rerender = _renderCategorySelect26.rerender;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, stableProps, {
          selectedCategory: "5"
        })));
        jest.runAllTimers();
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative2.ScrollView.scrollToSpy).toHaveBeenCalled();
      });
    }));
    it('should not crash when scrollViewRef is not available', function () {
      var _renderCategorySelect27 = renderCategorySelector(),
        rerender = _renderCategorySelect27.rerender;
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, stableProps, {
        selectedCategory: "3"
      })));
      expect(true).toBeTruthy();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJSZWFjdCIsInJlcXVpcmUiLCJzY3JvbGxUb1NweSIsImplc3QiLCJmbiIsIk1vY2tTY3JvbGxWaWV3IiwiZm9yd2FyZFJlZiIsInByb3BzIiwicmVmIiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInNjcm9sbFRvIiwiY2hpbGRyZW5XaXRoTGF5b3V0cyIsIkNoaWxkcmVuIiwibWFwIiwiY2hpbGRyZW4iLCJjaGlsZCIsImluZGV4IiwiY2xvbmVFbGVtZW50Iiwib25MYXlvdXQiLCJldmVudCIsIm5hdGl2ZUV2ZW50IiwibGF5b3V0IiwieCIsInkiLCJ3aWR0aCIsImhlaWdodCIsIl9qc3hSdW50aW1lIiwianN4IiwiRnJhZ21lbnQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX3RvQ29uc3VtYWJsZUFycmF5MiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9yZWFjdE5hdGl2ZTIiLCJfQ2F0ZWdvcnlTZWxlY3RvciIsIl9yZXF1aXJlIiwidXNlRmFrZVRpbWVycyIsInNweU9uIiwiQW5pbWF0ZWQiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJzdGFydCIsImNhbGxiYWNrIiwic2V0VGltZW91dCIsImFjdCIsImZpbmlzaGVkIiwic3RvcCIsImRlc2NyaWJlIiwibW9ja0NhdGVnb3JpZXMiLCJpZCIsIm5hbWUiLCJzdGFibGVQcm9wcyIsImNhdGVnb3JpZXMiLCJzZWxlY3RlZENhdGVnb3J5Iiwib25TZWxlY3RDYXRlZ29yeSIsInJlbmRlckNhdGVnb3J5U2VsZWN0b3IiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJyZW5kZXIiLCJkZWZhdWx0IiwiT2JqZWN0IiwiYXNzaWduIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJTY3JvbGxWaWV3IiwibW9ja0NsZWFyIiwiYWZ0ZXJFYWNoIiwidXNlUmVhbFRpbWVycyIsIml0IiwiZXhwZWN0IiwidG9CZVRydXRoeSIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdCIsImdldEJ5VGV4dCIsImZvckVhY2giLCJjYXRlZ29yeSIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDIiLCJnZXRBbGxCeVJvbGUiLCJjYXRlZ29yeU5hbWVzIiwiZWxlbWVudCIsImFjY2Vzc2liaWxpdHlMYWJlbCIsInRvRXF1YWwiLCJjYXQiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3QzIiwicXVlcnlCeVRleHQiLCJ0b0JlTnVsbCIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDQiLCJnZXRCeVJvbGUiLCJzZWxlY3RlZFBpbGwiLCJ0b0hhdmVBY2Nlc3NpYmlsaXR5U3RhdGUiLCJzZWxlY3RlZCIsIm1vY2tPblNlbGVjdCIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDUiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0NiIsIm5vdCIsInRvSGF2ZUJlZW5DYWxsZWQiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3Q3IiwiY2F0ZWdvcmllc1RvVGVzdCIsImZpbHRlciIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDgiLCJjYXRlZ29yeVBpbGwiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3Q5IiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0MCIsInRvSGF2ZUJlZW5OdGhDYWxsZWRXaXRoIiwicnVuQWxsVGltZXJzIiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0MSIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDEwIiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0MTEiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3QxMiIsInRvVGhyb3ciLCJzcGVjaWFsQ2F0ZWdvcmllcyIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDEzIiwibG9uZ05hbWVDYXRlZ29yaWVzIiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0MTQiLCJtYW55Q2F0ZWdvcmllcyIsIkFycmF5IiwiZnJvbSIsIl8iLCJpIiwic3RhcnRUaW1lIiwiRGF0ZSIsIm5vdyIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDE1IiwicXVlcnlBbGxCeVRleHQiLCJlbmRUaW1lIiwidG9CZUxlc3NUaGFuIiwiY2F0ZWdvcnlFbGVtZW50cyIsInRvSGF2ZUxlbmd0aCIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDE2IiwiZ2V0QnlMYWJlbFRleHQiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3QxNyIsImJ1dHRvbnMiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3QxOCIsInJlcmVuZGVyIiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0MTkiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3QyMCIsIl9yZW5kZXIiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3QyMSIsImJ1dHRvbiIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDIyIiwicHJpbWFyeUNvbG9yIiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0MjMiLCJuZXdDYXRlZ29yaWVzIiwiY29uY2F0IiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0MjQiLCJzYW1lQ2F0ZWdvcmllc05ld1JlZiIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDI1IiwibW9kaWZpZWRDYXRlZ29yaWVzIiwic2xpY2UiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3QyNiIsIndhaXRGb3IiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3QyNyJdLCJzb3VyY2VzIjpbIkNhdGVnb3J5U2VsZWN0b3IudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQsIGFjdCwgd2FpdEZvciwgZ2V0QnlUZXh0IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgQW5pbWF0ZWQsIFNjcm9sbFZpZXcgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0ICdAdGVzdGluZy1saWJyYXJ5L2plc3QtbmF0aXZlJztcblxuaW1wb3J0IENhdGVnb3J5U2VsZWN0b3IgZnJvbSAnLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvZXhlcmNpc2UtY29tbW9uL0NhdGVnb3J5U2VsZWN0b3InO1xuXG5qZXN0LnVzZUZha2VUaW1lcnMoKTtcblxuLy8gTW9ja2VyIEFuaW1hdGVkLnRpbWluZyBwb3VyIHNpbXVsZXIgdW4gZMOpbGFpXG5qZXN0LnNweU9uKEFuaW1hdGVkLCAndGltaW5nJykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBzdGFydDogKGNhbGxiYWNrKSA9PiB7XG4gICAgICAvLyBTaW11bGVyIGwnYW5pbWF0aW9uIHF1aSBzZSB0ZXJtaW5lIGFwcsOocyA1MDBtc1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFjayh7IGZpbmlzaGVkOiB0cnVlIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9LCA1MDApO1xuICAgIH0sXG4gICAgc3RvcDogamVzdC5mbigpLFxuICB9O1xufSk7XG5cbi8vIE1vY2tlciBTY3JvbGxWaWV3IHBvdXIgZ8OpcmVyIGxhIHJlZiBldCBsYSBmb25jdGlvbiBzY3JvbGxUb1xuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUvTGlicmFyaWVzL0NvbXBvbmVudHMvU2Nyb2xsVmlldy9TY3JvbGxWaWV3JywgKCkgPT4ge1xuICBjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG4gIGNvbnN0IHNjcm9sbFRvU3B5ID0gamVzdC5mbigpO1xuICBjb25zdCBNb2NrU2Nyb2xsVmlldyA9IFJlYWN0LmZvcndhcmRSZWYoKHByb3BzLCByZWYpID0+IHtcbiAgICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgKCkgPT4gKHtcbiAgICAgIHNjcm9sbFRvOiBzY3JvbGxUb1NweSxcbiAgICB9KSk7XG5cbiAgICAvLyBTaW11bGVyIGwnw6l2w6luZW1lbnQgb25MYXlvdXQgZGUgbWFuacOocmUgc3luY2hyb25lIHBvdXIgcXVlIGxlcyB0ZXN0cyBkZSBzY3JvbGxpbmcgZm9uY3Rpb25uZW50LlxuICAgIC8vIENldHRlIHBhcnRpZSBlc3QgY3J1Y2lhbGUgcG91ciBxdWUgbGUgYHVzZUVmZmVjdGAgZHUgY29tcG9zYW50IHB1aXNzZSB0cm91dmVyIGxlcyBsYXlvdXRzLlxuICAgIGNvbnN0IGNoaWxkcmVuV2l0aExheW91dHMgPSBSZWFjdC5DaGlsZHJlbi5tYXAocHJvcHMuY2hpbGRyZW4sIChjaGlsZCwgaW5kZXgpID0+IHtcbiAgICAgIGlmICghY2hpbGQpIHJldHVybiBudWxsO1xuICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBvbkxheW91dDogKGV2ZW50KSA9PiB7XG4gICAgICAgICAgY2hpbGQucHJvcHMub25MYXlvdXQ/Lih7XG4gICAgICAgICAgICBuYXRpdmVFdmVudDoge1xuICAgICAgICAgICAgICBsYXlvdXQ6IHtcbiAgICAgICAgICAgICAgICB4OiBpbmRleCAqIDEwMCwgLy8gUG9zaXRpb24gYXJiaXRyYWlyZSBwb3VyIGxlIHRlc3RcbiAgICAgICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgICAgIHdpZHRoOiA4MCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDQwLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIDxSZWFjdC5GcmFnbWVudD57Y2hpbGRyZW5XaXRoTGF5b3V0c308L1JlYWN0LkZyYWdtZW50PjtcbiAgfSk7XG5cbiAgTW9ja1Njcm9sbFZpZXcuc2Nyb2xsVG9TcHkgPSBzY3JvbGxUb1NweTtcbiAgcmV0dXJuIE1vY2tTY3JvbGxWaWV3O1xufSk7XG5cbmRlc2NyaWJlKCdDYXRlZ29yeVNlbGVjdG9yIENvbXBvbmVudCcsICgpID0+IHtcbiAgLy8gRMOpY2xhcmVyIGxlcyBwcm9wcyB1bmUgc2V1bGUgZm9pcyBwb3VyIGdhcmFudGlyIGxhIHN0YWJpbGl0w6kgZGVzIHLDqWbDqXJlbmNlc1xuICBjb25zdCBtb2NrQ2F0ZWdvcmllcyA9IFtcbiAgICB7IGlkOiAnMScsIG5hbWU6ICdGcnVpdHMnIH0sXG4gICAgeyBpZDogJzInLCBuYW1lOiAnVmVnZXRhYmxlcycgfSxcbiAgICB7IGlkOiAnMycsIG5hbWU6ICdEYWlyeSBQcm9kdWN0cycgfSxcbiAgICB7IGlkOiAnNCcsIG5hbWU6ICdNZWF0ICYgRmlzaCcgfSxcbiAgICB7IGlkOiAnNScsIG5hbWU6ICdCZXZlcmFnZXMnIH0sXG4gIF07XG5cbiAgY29uc3Qgc3RhYmxlUHJvcHMgPSB7XG4gICAgY2F0ZWdvcmllczogbW9ja0NhdGVnb3JpZXMsXG4gICAgc2VsZWN0ZWRDYXRlZ29yeTogJzEnLFxuICAgIG9uU2VsZWN0Q2F0ZWdvcnk6IGplc3QuZm4oKSxcbiAgfTtcblxuICBjb25zdCByZW5kZXJDYXRlZ29yeVNlbGVjdG9yID0gKHByb3BzID0ge30pID0+IHtcbiAgICByZXR1cm4gcmVuZGVyKDxDYXRlZ29yeVNlbGVjdG9yIHsuLi5zdGFibGVQcm9wc30gey4uLnByb3BzfSAvPik7XG4gIH07XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gICAgamVzdC51c2VGYWtlVGltZXJzKCk7XG4gICAgU2Nyb2xsVmlldy5zY3JvbGxUb1NweS5tb2NrQ2xlYXIoKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LnVzZVJlYWxUaW1lcnMoKTtcbiAgfSk7XG5cbiAgLy8gLS0tIFJFTkRFUklORyAtLS1cbiAgZGVzY3JpYmUoJ1JlbmRlcmluZycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJlbmRlciB3aXRob3V0IGNyYXNoaW5nJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoKSkudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgcmVuZGVyIGFsbCBjYXRlZ29yaWVzIGNvcnJlY3RseScsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKCk7XG4gICAgICBtb2NrQ2F0ZWdvcmllcy5mb3JFYWNoKGNhdGVnb3J5ID0+IHtcbiAgICAgICAgZXhwZWN0KGdldEJ5VGV4dChjYXRlZ29yeS5uYW1lKSkudG9CZVRydXRoeSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCByZW5kZXIgY2F0ZWdvcmllcyBpbiB0aGUgY29ycmVjdCBvcmRlcicsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgZ2V0QWxsQnlSb2xlIH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKCk7XG4gICAgICBjb25zdCBjYXRlZ29yeU5hbWVzID0gZ2V0QWxsQnlSb2xlKCdidXR0b24nKS5tYXAoZWxlbWVudCA9PiBlbGVtZW50LnByb3BzLmFjY2Vzc2liaWxpdHlMYWJlbCk7XG4gICAgICBleHBlY3QoY2F0ZWdvcnlOYW1lcykudG9FcXVhbChtb2NrQ2F0ZWdvcmllcy5tYXAoY2F0ID0+IGNhdC5uYW1lKSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZW1wdHkgY2F0ZWdvcmllcyBhcnJheSBncmFjZWZ1bGx5JywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBxdWVyeUJ5VGV4dCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7IGNhdGVnb3JpZXM6IFtdIH0pO1xuICAgICAgbW9ja0NhdGVnb3JpZXMuZm9yRWFjaChjYXRlZ29yeSA9PiB7XG4gICAgICAgIGV4cGVjdChxdWVyeUJ5VGV4dChjYXRlZ29yeS5uYW1lKSkudG9CZU51bGwoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgaGlnaGxpZ2h0IHRoZSBzZWxlY3RlZCBjYXRlZ29yeSB2aXN1YWxseScsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgZ2V0QnlSb2xlIH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKHsgc2VsZWN0ZWRDYXRlZ29yeTogJzInIH0pO1xuICAgICAgY29uc3Qgc2VsZWN0ZWRQaWxsID0gZ2V0QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6ICdWZWdldGFibGVzJyB9KTtcbiAgICAgIGV4cGVjdChzZWxlY3RlZFBpbGwpLnRvSGF2ZUFjY2Vzc2liaWxpdHlTdGF0ZSh7IHNlbGVjdGVkOiB0cnVlIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyAtLS0gVVNFUiBJTlRFUkFDVElPTlMgLS0tXG4gIGRlc2NyaWJlKCdVc2VyIEludGVyYWN0aW9ucycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGNhbGwgb25TZWxlY3RDYXRlZ29yeSB3aGVuIGEgZGlmZmVyZW50IGNhdGVnb3J5IGlzIHByZXNzZWQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrT25TZWxlY3QgPSBqZXN0LmZuKCk7XG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7XG4gICAgICAgIHNlbGVjdGVkQ2F0ZWdvcnk6ICcxJyxcbiAgICAgICAgb25TZWxlY3RDYXRlZ29yeTogbW9ja09uU2VsZWN0XG4gICAgICB9KTtcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ1ZlZ2V0YWJsZXMnKSk7XG4gICAgICBleHBlY3QobW9ja09uU2VsZWN0KS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgICBleHBlY3QobW9ja09uU2VsZWN0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnMicpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgbm90IGNhbGwgb25TZWxlY3RDYXRlZ29yeSB3aGVuIHRoZSBzYW1lIGNhdGVnb3J5IGlzIHByZXNzZWQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrT25TZWxlY3QgPSBqZXN0LmZuKCk7XG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7XG4gICAgICAgIHNlbGVjdGVkQ2F0ZWdvcnk6ICcxJyxcbiAgICAgICAgb25TZWxlY3RDYXRlZ29yeTogbW9ja09uU2VsZWN0XG4gICAgICB9KTtcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ0ZydWl0cycpKTtcbiAgICAgIGV4cGVjdChtb2NrT25TZWxlY3QpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBjYWxsIG9uU2VsZWN0Q2F0ZWdvcnkgd2l0aCBjb3JyZWN0IGNhdGVnb3J5IGlkIGZvciBlYWNoIGNhdGVnb3J5JywgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja09uU2VsZWN0ID0gamVzdC5mbigpO1xuICAgICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3Ioe1xuICAgICAgICBzZWxlY3RlZENhdGVnb3J5OiAnMScsXG4gICAgICAgIG9uU2VsZWN0Q2F0ZWdvcnk6IG1vY2tPblNlbGVjdFxuICAgICAgfSk7XG4gICAgICBjb25zdCBjYXRlZ29yaWVzVG9UZXN0ID0gbW9ja0NhdGVnb3JpZXMuZmlsdGVyKGNhdCA9PiBjYXQuaWQgIT09ICcxJyk7XG4gICAgICBjYXRlZ29yaWVzVG9UZXN0LmZvckVhY2goY2F0ZWdvcnkgPT4ge1xuICAgICAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KGNhdGVnb3J5Lm5hbWUpKTtcbiAgICAgICAgZXhwZWN0KG1vY2tPblNlbGVjdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoY2F0ZWdvcnkuaWQpO1xuICAgICAgfSk7XG4gICAgICBleHBlY3QobW9ja09uU2VsZWN0KS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoY2F0ZWdvcmllc1RvVGVzdC5sZW5ndGgpO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyAtLS0gQU5JTUFUSU9OUyAtLS1cbiAgZGVzY3JpYmUoJ0FuaW1hdGlvbnMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCB0cmlnZ2VyIHByZXNzIGFuaW1hdGlvbnMgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoKTtcbiAgICAgIGNvbnN0IGNhdGVnb3J5UGlsbCA9IGdldEJ5VGV4dCgnVmVnZXRhYmxlcycpO1xuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgZmlyZUV2ZW50KGNhdGVnb3J5UGlsbCwgJ3ByZXNzSW4nKTtcbiAgICAgICAgZmlyZUV2ZW50KGNhdGVnb3J5UGlsbCwgJ3ByZXNzT3V0Jyk7XG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChjYXRlZ29yeVBpbGwpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcbiAgICBcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSByYXBpZCBwcmVzcyBpbnRlcmFjdGlvbnMgd2l0aG91dCBjcmFzaGluZycsICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tPblNlbGVjdCA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKHsgb25TZWxlY3RDYXRlZ29yeTogbW9ja09uU2VsZWN0IH0pO1xuICAgICAgY29uc3QgY2F0ZWdvcnlQaWxsID0gZ2V0QnlUZXh0KCdWZWdldGFibGVzJyk7XG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICBmaXJlRXZlbnQoY2F0ZWdvcnlQaWxsLCAncHJlc3NJbicpO1xuICAgICAgICBmaXJlRXZlbnQoY2F0ZWdvcnlQaWxsLCAncHJlc3NPdXQnKTtcbiAgICAgICAgZmlyZUV2ZW50LnByZXNzKGNhdGVnb3J5UGlsbCk7XG4gICAgICAgIGZpcmVFdmVudChjYXRlZ29yeVBpbGwsICdwcmVzc0luJyk7XG4gICAgICAgIGZpcmVFdmVudChjYXRlZ29yeVBpbGwsICdwcmVzc091dCcpO1xuICAgICAgfSk7XG4gICAgICBleHBlY3QobW9ja09uU2VsZWN0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnMicpO1xuICAgICAgZXhwZWN0KGNhdGVnb3J5UGlsbCkudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuICAgIFxuICAgIGl0KCdzaG91bGQgbm90IHRyaWdnZXIgbmV3IGFuaW1hdGlvbiBpZiBvbmUgaXMgYWxyZWFkeSBpbiBwcm9ncmVzcycsICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tPblNlbGVjdCA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKHsgb25TZWxlY3RDYXRlZ29yeTogbW9ja09uU2VsZWN0IH0pO1xuICAgICAgXG4gICAgICAvLyBQcmVtaWVyIGNsaWMgcXVpIGTDqW1hcnJlIGwnYW5pbWF0aW9uXG4gICAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCdWZWdldGFibGVzJykpO1xuICAgICAgXG4gICAgICAvLyBTZWNvbmQgY2xpYyByYXBpZGUgcGVuZGFudCBxdWUgbCdhbmltYXRpb24gZXN0IGVuIGNvdXJzIChBVkFOVCBydW5BbGxUaW1lcnMpXG4gICAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCdEYWlyeSBQcm9kdWN0cycpKTtcbiAgICAgIFxuICAgICAgLy8gTGVzIGRldXggY2xpY3MgcGFzc2VudCBjYXIgc2VsZWN0ZWRDYXRlZ29yeSBuJ2EgcGFzIGVuY29yZSDDqXTDqSBtaXMgw6Agam91ciBlbnRyZSBsZXMgY2xpY3NcbiAgICAgIGV4cGVjdChtb2NrT25TZWxlY3QpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygyKTtcbiAgICAgIGV4cGVjdChtb2NrT25TZWxlY3QpLnRvSGF2ZUJlZW5OdGhDYWxsZWRXaXRoKDEsICcyJyk7XG4gICAgICBleHBlY3QobW9ja09uU2VsZWN0KS50b0hhdmVCZWVuTnRoQ2FsbGVkV2l0aCgyLCAnMycpO1xuICAgICAgXG4gICAgICAvLyBMYWlzc2VyIGwnYW5pbWF0aW9uIHNlIHRlcm1pbmVyXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICBqZXN0LnJ1bkFsbFRpbWVycygpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIC0tLSBFREdFIENBU0VTIC0tLVxuICBkZXNjcmliZSgnRWRnZSBDYXNlcycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSB1bmRlZmluZWQgc2VsZWN0ZWRDYXRlZ29yeSBncmFjZWZ1bGx5JywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoeyBzZWxlY3RlZENhdGVnb3J5OiB1bmRlZmluZWQgfSk7XG4gICAgICBtb2NrQ2F0ZWdvcmllcy5mb3JFYWNoKGNhdGVnb3J5ID0+IHtcbiAgICAgICAgZXhwZWN0KGdldEJ5VGV4dChjYXRlZ29yeS5uYW1lKSkudG9CZVRydXRoeSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbnVsbCBzZWxlY3RlZENhdGVnb3J5IGdyYWNlZnVsbHknLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7IHNlbGVjdGVkQ2F0ZWdvcnk6IG51bGwgfSk7XG4gICAgICBtb2NrQ2F0ZWdvcmllcy5mb3JFYWNoKGNhdGVnb3J5ID0+IHtcbiAgICAgICAgZXhwZWN0KGdldEJ5VGV4dChjYXRlZ29yeS5uYW1lKSkudG9CZVRydXRoeSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbm9uLWV4aXN0ZW50IHNlbGVjdGVkQ2F0ZWdvcnkgaWQnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7IHNlbGVjdGVkQ2F0ZWdvcnk6ICdub24tZXhpc3RlbnQnIH0pO1xuICAgICAgbW9ja0NhdGVnb3JpZXMuZm9yRWFjaChjYXRlZ29yeSA9PiB7XG4gICAgICAgIGV4cGVjdChnZXRCeVRleHQoY2F0ZWdvcnkubmFtZSkpLnRvQmVUcnV0aHkoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgaGFuZGxlIG1pc3Npbmcgb25TZWxlY3RDYXRlZ29yeSBwcm9wIGdyYWNlZnVsbHknLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7IG9uU2VsZWN0Q2F0ZWdvcnk6IHVuZGVmaW5lZCB9KTtcbiAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ1ZlZ2V0YWJsZXMnKSk7XG4gICAgICB9KS5ub3QudG9UaHJvdygpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgaGFuZGxlIGNhdGVnb3JpZXMgd2l0aCBzcGVjaWFsIGNoYXJhY3RlcnMgaW4gbmFtZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBzcGVjaWFsQ2F0ZWdvcmllcyA9IFtcbiAgICAgICAgeyBpZDogJzEnLCBuYW1lOiAnQ2Fmw6kgJiBUaMOpJyB9LFxuICAgICAgICB7IGlkOiAnMicsIG5hbWU6ICdGcnVpdHMgJiBMw6lndW1lcycgfSxcbiAgICAgICAgeyBpZDogJzMnLCBuYW1lOiAnVmlhbmRlL1BvaXNzb24nIH0sXG4gICAgICBdO1xuICAgICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoeyBjYXRlZ29yaWVzOiBzcGVjaWFsQ2F0ZWdvcmllcyB9KTtcbiAgICAgIHNwZWNpYWxDYXRlZ29yaWVzLmZvckVhY2goY2F0ZWdvcnkgPT4ge1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KGNhdGVnb3J5Lm5hbWUpKS50b0JlVHJ1dGh5KCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSB2ZXJ5IGxvbmcgY2F0ZWdvcnkgbmFtZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBsb25nTmFtZUNhdGVnb3JpZXMgPSBbXG4gICAgICAgIHsgaWQ6ICcxJywgbmFtZTogJ1RoaXMgaXMgYSB2ZXJ5IGxvbmcgY2F0ZWdvcnkgbmFtZSB0aGF0IG1pZ2h0IGNhdXNlIGxheW91dCBpc3N1ZXMnIH0sXG4gICAgICAgIHsgaWQ6ICcyJywgbmFtZTogJ1Nob3J0JyB9LFxuICAgICAgXTtcbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKHsgY2F0ZWdvcmllczogbG9uZ05hbWVDYXRlZ29yaWVzIH0pO1xuICAgICAgbG9uZ05hbWVDYXRlZ29yaWVzLmZvckVhY2goY2F0ZWdvcnkgPT4ge1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KGNhdGVnb3J5Lm5hbWUpKS50b0JlVHJ1dGh5KCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gLS0tIFBFUkZPUk1BTkNFIC0tLVxuICBkZXNjcmliZSgnUGVyZm9ybWFuY2UnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbGFyZ2UgbnVtYmVyIG9mIGNhdGVnb3JpZXMgZWZmaWNpZW50bHknLCAoKSA9PiB7XG4gICAgICBjb25zdCBtYW55Q2F0ZWdvcmllcyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDEwMCB9LCAoXywgaSkgPT4gKHtcbiAgICAgICAgaWQ6IGAke2kgKyAxfWAsXG4gICAgICAgIG5hbWU6IGBDYXRlZ29yeSAke2kgKyAxfWAsXG4gICAgICB9KSk7XG4gICAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgY29uc3QgeyBxdWVyeUFsbEJ5VGV4dCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7IGNhdGVnb3JpZXM6IG1hbnlDYXRlZ29yaWVzIH0pO1xuICAgICAgY29uc3QgZW5kVGltZSA9IERhdGUubm93KCk7XG4gICAgICBleHBlY3QoZW5kVGltZSAtIHN0YXJ0VGltZSkudG9CZUxlc3NUaGFuKDEwMDApO1xuICAgICAgY29uc3QgY2F0ZWdvcnlFbGVtZW50cyA9IHF1ZXJ5QWxsQnlUZXh0KC9eQ2F0ZWdvcnkvKTtcbiAgICAgIGV4cGVjdChjYXRlZ29yeUVsZW1lbnRzKS50b0hhdmVMZW5ndGgoMTAwKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gLS0tIEFDQ0VTU0lCSUxJVFkgLS0tXG4gIGRlc2NyaWJlKCdBY2Nlc3NpYmlsaXR5JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaGF2ZSBwcm9wZXIgYWNjZXNzaWJpbGl0eSBsYWJlbHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEJ5TGFiZWxUZXh0IH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKCk7XG4gICAgICBtb2NrQ2F0ZWdvcmllcy5mb3JFYWNoKGNhdGVnb3J5ID0+IHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGdldEJ5TGFiZWxUZXh0KGNhdGVnb3J5Lm5hbWUpO1xuICAgICAgICBleHBlY3QoZWxlbWVudCkudG9CZVRydXRoeSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBzdXBwb3J0IHNjcmVlbiByZWFkZXIgbmF2aWdhdGlvbicsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgZ2V0QWxsQnlSb2xlIH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKCk7XG4gICAgICBjb25zdCBidXR0b25zID0gZ2V0QWxsQnlSb2xlKCdidXR0b24nKTtcbiAgICAgIGV4cGVjdChidXR0b25zKS50b0hhdmVMZW5ndGgobW9ja0NhdGVnb3JpZXMubGVuZ3RoKTtcbiAgICB9KTtcbiAgfSk7XG4gIC8vIFRlc3RzIMOgIGFqb3V0ZXIgw6AgdG9uIGZpY2hpZXIgQ2F0ZWdvcnlTZWxlY3Rvci50ZXN0LmpzXG5cbi8vIC0tLSBURVNUUyBQT1VSIExFUyBMSUdORVMgNzctMTAwLCAxMTEtMTEyIC0tLVxuZGVzY3JpYmUoJ0FuaW1hdGlvbiBFZGdlIENhc2VzJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIGhhbmRsZSBhbmltYXRpb24gd2hlbiBmcm9tQ2F0ZWdvcnkgaXMgbnVsbC91bmRlZmluZWQnLCAoKSA9PiB7XG4gICAgY29uc3QgbW9ja09uU2VsZWN0ID0gamVzdC5mbigpO1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0LCByZXJlbmRlciB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7XG4gICAgICBzZWxlY3RlZENhdGVnb3J5OiB1bmRlZmluZWQsIC8vIFBhcyBkZSBjYXTDqWdvcmllIHPDqWxlY3Rpb25uw6llIGF1IGTDqWJ1dFxuICAgICAgb25TZWxlY3RDYXRlZ29yeTogbW9ja09uU2VsZWN0XG4gICAgfSk7XG4gICAgXG4gICAgLy8gU8OpbGVjdGlvbm5lciB1bmUgY2F0w6lnb3JpZSBkZXB1aXMgXCJ1bmRlZmluZWRcIlxuICAgIHJlcmVuZGVyKDxDYXRlZ29yeVNlbGVjdG9yIFxuICAgICAgey4uLnN0YWJsZVByb3BzfSBcbiAgICAgIHNlbGVjdGVkQ2F0ZWdvcnk9XCIyXCIgXG4gICAgICBvblNlbGVjdENhdGVnb3J5PXttb2NrT25TZWxlY3R9IFxuICAgIC8+KTtcbiAgICBcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdWZWdldGFibGVzJykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBoYW5kbGUgYW5pbWF0aW9uIHdoZW4gdG9DYXRlZ29yeSBpcyBudWxsL3VuZGVmaW5lZCcsICgpID0+IHtcbiAgICBjb25zdCBtb2NrT25TZWxlY3QgPSBqZXN0LmZuKCk7XG4gICAgY29uc3QgeyBnZXRCeVRleHQsIHJlcmVuZGVyIH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKHtcbiAgICAgIHNlbGVjdGVkQ2F0ZWdvcnk6IFwiMVwiLFxuICAgICAgb25TZWxlY3RDYXRlZ29yeTogbW9ja09uU2VsZWN0XG4gICAgfSk7XG4gICAgXG4gICAgLy8gRMOpc8OpbGVjdGlvbm5lciB2ZXJzIHVuZGVmaW5lZFxuICAgIHJlcmVuZGVyKDxDYXRlZ29yeVNlbGVjdG9yIFxuICAgICAgey4uLnN0YWJsZVByb3BzfSBcbiAgICAgIHNlbGVjdGVkQ2F0ZWdvcnk9e3VuZGVmaW5lZH0gXG4gICAgICBvblNlbGVjdENhdGVnb3J5PXttb2NrT25TZWxlY3R9IFxuICAgIC8+KTtcbiAgICBcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdGcnVpdHMnKSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGhhbmRsZSBjYXNlIHdoZXJlIG5vIGFuaW1hdGlvbnMgYXJlIGNyZWF0ZWQgKGVtcHR5IGFuaW1hdGlvbnNBcnJheSknLCAoKSA9PiB7XG4gICAgY29uc3QgeyByZXJlbmRlciB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7XG4gICAgICBjYXRlZ29yaWVzOiBbXSwgLy8gUGFzIGRlIGNhdMOpZ29yaWVzXG4gICAgICBzZWxlY3RlZENhdGVnb3J5OiAnMSdcbiAgICB9KTtcbiAgICBcbiAgICAvLyBDaGFuZ2VyIHZlcnMgdW5lIGF1dHJlIGNhdMOpZ29yaWUgaW5leGlzdGFudGVcbiAgICByZXJlbmRlcig8Q2F0ZWdvcnlTZWxlY3RvciBcbiAgICAgIGNhdGVnb3JpZXM9e1tdfSBcbiAgICAgIHNlbGVjdGVkQ2F0ZWdvcnk9XCIyXCJcbiAgICAgIG9uU2VsZWN0Q2F0ZWdvcnk9e2plc3QuZm4oKX0gXG4gICAgLz4pO1xuICAgIFxuICAgIC8vIExlIGNvbXBvc2FudCBuZSBkb2l0IHBhcyBjcmFzaGVyXG4gICAgZXhwZWN0KHRydWUpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG59KTtcblxuLy8gLS0tIFRFU1QgUE9VUiBMSUdORSAxNjAgLS0tXG5kZXNjcmliZSgnQW5pbWF0aW9uIGZhbGxiYWNrcycsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCBoYW5kbGUgbWlzc2luZyBhbmltYXRpb24gcmVmZXJlbmNlcyBncmFjZWZ1bGx5JywgKCkgPT4ge1xuICAgIC8vIENlIHRlc3QgZm9yY2UgbGUgY2FzIG/DuSBsZXMgYW5pbWF0aW9ucyBuJ2V4aXN0ZW50IHBhcyBlbmNvcmVcbiAgICBjb25zdCB7IHJlcmVuZGVyIH0gPSByZW5kZXIoXG4gICAgICA8Q2F0ZWdvcnlTZWxlY3RvciBcbiAgICAgICAgY2F0ZWdvcmllcz17W3sgaWQ6ICcxJywgbmFtZTogJ1Rlc3QnIH1dfSBcbiAgICAgICAgc2VsZWN0ZWRDYXRlZ29yeT1cIjFcIlxuICAgICAgICBvblNlbGVjdENhdGVnb3J5PXtqZXN0LmZuKCl9XG4gICAgICAvPlxuICAgICk7XG4gICAgXG4gICAgLy8gQ2hhbmdlciByYXBpZGVtZW50IGxlcyBjYXTDqWdvcmllcyBwb3VyIGZvcmNlciBsZXMgZmFsbGJhY2tzXG4gICAgcmVyZW5kZXIoXG4gICAgICA8Q2F0ZWdvcnlTZWxlY3RvciBcbiAgICAgICAgY2F0ZWdvcmllcz17W3sgaWQ6ICc5OTknLCBuYW1lOiAnTmV3JyB9XX0gLy8gTm91dmVsbGUgY2F0w6lnb3JpZSBub24gaW5pdGlhbGlzw6llXG4gICAgICAgIHNlbGVjdGVkQ2F0ZWdvcnk9XCI5OTlcIlxuICAgICAgICBvblNlbGVjdENhdGVnb3J5PXtqZXN0LmZuKCl9XG4gICAgICAvPlxuICAgICk7XG4gICAgXG4gICAgZXhwZWN0KHRydWUpLnRvQmVUcnV0aHkoKTsgLy8gTGUgY29tcG9zYW50IG5lIGRvaXQgcGFzIGNyYXNoZXJcbiAgfSk7XG59KTtcblxuLy8gLS0tIFRFU1RTIFBPVVIgTElHTkVTIDI1OC0yNzIgKGZvbmN0aW9uIGFyZUVxdWFsKSAtLS1cbmRlc2NyaWJlKCdNZW1vaXphdGlvbiAoYXJlRXF1YWwgZnVuY3Rpb24pJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIHJlLXJlbmRlciB3aGVuIHNlbGVjdGVkQ2F0ZWdvcnkgY2hhbmdlcycsICgpID0+IHtcbiAgICBjb25zdCB7IHJlcmVuZGVyLCBnZXRCeVJvbGUgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoeyBzZWxlY3RlZENhdGVnb3J5OiAnMScgfSk7XG4gICAgXG4gICAgbGV0IGJ1dHRvbiA9IGdldEJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAnRnJ1aXRzJyB9KTtcbiAgICBleHBlY3QoYnV0dG9uKS50b0hhdmVBY2Nlc3NpYmlsaXR5U3RhdGUoeyBzZWxlY3RlZDogdHJ1ZSB9KTtcbiAgICBcbiAgICByZXJlbmRlcig8Q2F0ZWdvcnlTZWxlY3RvciB7Li4uc3RhYmxlUHJvcHN9IHNlbGVjdGVkQ2F0ZWdvcnk9XCIyXCIgLz4pO1xuICAgIFxuICAgIGJ1dHRvbiA9IGdldEJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAnVmVnZXRhYmxlcycgfSk7XG4gICAgZXhwZWN0KGJ1dHRvbikudG9IYXZlQWNjZXNzaWJpbGl0eVN0YXRlKHsgc2VsZWN0ZWQ6IHRydWUgfSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmUtcmVuZGVyIHdoZW4gcHJpbWFyeUNvbG9yIGNoYW5nZXMnLCAoKSA9PiB7XG4gICAgY29uc3QgeyByZXJlbmRlciB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7IHByaW1hcnlDb2xvcjogJyNGRjAwMDAnIH0pO1xuICAgIFxuICAgIHJlcmVuZGVyKDxDYXRlZ29yeVNlbGVjdG9yIHsuLi5zdGFibGVQcm9wc30gcHJpbWFyeUNvbG9yPVwiIzAwRkYwMFwiIC8+KTtcbiAgICBcbiAgICAvLyBMZSBjb21wb3NhbnQgZG9pdCBzZSByZS1yZW5kcmVcbiAgICBleHBlY3QodHJ1ZSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlLXJlbmRlciB3aGVuIGNhdGVnb3JpZXMgbGVuZ3RoIGNoYW5nZXMnLCAoKSA9PiB7XG4gICAgY29uc3QgeyByZXJlbmRlciwgcXVlcnlCeVRleHQgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoKTtcbiAgICBcbiAgICBjb25zdCBuZXdDYXRlZ29yaWVzID0gW1xuICAgICAgLi4ubW9ja0NhdGVnb3JpZXMsXG4gICAgICB7IGlkOiAnNicsIG5hbWU6ICdOZXcgQ2F0ZWdvcnknIH1cbiAgICBdO1xuICAgIFxuICAgIHJlcmVuZGVyKDxDYXRlZ29yeVNlbGVjdG9yIHsuLi5zdGFibGVQcm9wc30gY2F0ZWdvcmllcz17bmV3Q2F0ZWdvcmllc30gLz4pO1xuICAgIFxuICAgIGV4cGVjdChxdWVyeUJ5VGV4dCgnTmV3IENhdGVnb3J5JykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBOT1QgcmUtcmVuZGVyIHdoZW4gY2F0ZWdvcmllcyBhcnJheSByZWZlcmVuY2UgY2hhbmdlcyBidXQgY29udGVudCBpcyBzYW1lJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVyZW5kZXIgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoKTtcbiAgICBcbiAgICAvLyBNw6ptZSBjb250ZW51LCByw6lmw6lyZW5jZSBkaWZmw6lyZW50ZVxuICAgIGNvbnN0IHNhbWVDYXRlZ29yaWVzTmV3UmVmID0gbW9ja0NhdGVnb3JpZXMubWFwKGNhdCA9PiAoeyAuLi5jYXQgfSkpO1xuICAgIFxuICAgIHJlcmVuZGVyKDxDYXRlZ29yeVNlbGVjdG9yIHsuLi5zdGFibGVQcm9wc30gY2F0ZWdvcmllcz17c2FtZUNhdGVnb3JpZXNOZXdSZWZ9IC8+KTtcbiAgICBcbiAgICAvLyBEaWZmaWNpbGUgZGUgdGVzdGVyIGRpcmVjdGVtZW50IHF1ZSBsZSBjb21wb3NhbnQgbmUgcydlc3QgcGFzIHJlLXJlbmR1LFxuICAgIC8vIG1haXMgb24gcGV1dCBhdSBtb2lucyB2w6lyaWZpZXIgcXUnaWwgZm9uY3Rpb25uZSB0b3Vqb3Vyc1xuICAgIGV4cGVjdCh0cnVlKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmUtcmVuZGVyIHdoZW4gY2F0ZWdvcnkgY29udGVudCBjaGFuZ2VzJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVyZW5kZXIsIHF1ZXJ5QnlUZXh0IH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKCk7XG4gICAgXG4gICAgY29uc3QgbW9kaWZpZWRDYXRlZ29yaWVzID0gW1xuICAgICAgeyBpZDogJzEnLCBuYW1lOiAnTW9kaWZpZWQgRnJ1aXRzJyB9LCAvLyBOb20gY2hhbmfDqVxuICAgICAgLi4ubW9ja0NhdGVnb3JpZXMuc2xpY2UoMSlcbiAgICBdO1xuICAgIFxuICAgIHJlcmVuZGVyKDxDYXRlZ29yeVNlbGVjdG9yIHsuLi5zdGFibGVQcm9wc30gY2F0ZWdvcmllcz17bW9kaWZpZWRDYXRlZ29yaWVzfSAvPik7XG4gICAgXG4gICAgZXhwZWN0KHF1ZXJ5QnlUZXh0KCdNb2RpZmllZCBGcnVpdHMnKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChxdWVyeUJ5VGV4dCgnRnJ1aXRzJykpLnRvQmVOdWxsKCk7XG4gIH0pO1xufSk7XG5cbi8vIC0tLSBURVNUIEJPTlVTIDogU2Nyb2xsIGF1dG9tYXRpcXVlIC0tLVxuZGVzY3JpYmUoJ0F1dG8tc2Nyb2xsIGJlaGF2aW9yJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIHNjcm9sbCB0byBzZWxlY3RlZCBjYXRlZ29yeSB3aGVuIGxheW91dCBpcyBhdmFpbGFibGUnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgeyByZXJlbmRlciB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7IHNlbGVjdGVkQ2F0ZWdvcnk6ICcxJyB9KTtcbiAgICBcbiAgICAvLyBMZSByZXJlbmRlciBkb2l0IMOqdHJlIGRhbnMgdW4gYWN0IHBvdXIgcydhc3N1cmVyIHF1ZSBsZXMgaG9va3Mgc29udCByw6lzb2x1c1xuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAvLyBDaGFuZ2VyIHZlcnMgdW5lIGNhdMOpZ29yaWUgcGx1cyBsb2luIGRhbnMgbGEgbGlzdGVcbiAgICAgIHJlcmVuZGVyKDxDYXRlZ29yeVNlbGVjdG9yIHsuLi5zdGFibGVQcm9wc30gc2VsZWN0ZWRDYXRlZ29yeT1cIjVcIiAvPik7XG4gICAgICBcbiAgICAgIC8vIExhaXNzZXIgbGUgdGVtcHMgYXV4IGVmZmVjdHMgZGUgcydleMOpY3V0ZXJcbiAgICAgIGplc3QucnVuQWxsVGltZXJzKCk7XG4gICAgfSk7XG5cbiAgICAvLyBMZSB3YWl0Rm9yIGdhcmFudGl0IHF1ZSBsJ2Fzc2VydGlvbiBlc3QgZmFpdGUgYXByw6hzIHF1ZSB0b3V0ZXMgbGVzIG1pc2VzIMOgIGpvdXIgYXN5bmNocm9uZXNcbiAgICAvLyAoY29tbWUgbCdhcHBlbCDDoCBzY3JvbGxUbykgYWllbnQgZXUgbGUgdGVtcHMgZGUgc2UgcHJvZHVpcmUuXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3QoU2Nyb2xsVmlldy5zY3JvbGxUb1NweSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIG5vdCBjcmFzaCB3aGVuIHNjcm9sbFZpZXdSZWYgaXMgbm90IGF2YWlsYWJsZScsICgpID0+IHtcbiAgICAvLyBUZXN0IGVkZ2UgY2FzZSBvw7kgbGEgcmVmIG4nZXN0IHBhcyBlbmNvcmUgYXR0YWNow6llXG4gICAgY29uc3QgeyByZXJlbmRlciB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3RvcigpO1xuICAgIFxuICAgIHJlcmVuZGVyKDxDYXRlZ29yeVNlbGVjdG9yIHsuLi5zdGFibGVQcm9wc30gc2VsZWN0ZWRDYXRlZ29yeT1cIjNcIiAvPik7XG4gICAgXG4gICAgZXhwZWN0KHRydWUpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG59KTtcbn0pOyJdLCJtYXBwaW5ncyI6IkFBMkJBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyx5REFBeUQsRUFBRSxZQUFNO0VBQ3pFLElBQU1DLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztFQUM5QixJQUFNQyxXQUFXLEdBQUdDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7RUFDN0IsSUFBTUMsY0FBYyxHQUFHTCxLQUFLLENBQUNNLFVBQVUsQ0FBQyxVQUFDQyxLQUFLLEVBQUVDLEdBQUcsRUFBSztJQUN0RFIsS0FBSyxDQUFDUyxtQkFBbUIsQ0FBQ0QsR0FBRyxFQUFFO01BQUEsT0FBTztRQUNwQ0UsUUFBUSxFQUFFUjtNQUNaLENBQUM7SUFBQSxDQUFDLENBQUM7SUFJSCxJQUFNUyxtQkFBbUIsR0FBR1gsS0FBSyxDQUFDWSxRQUFRLENBQUNDLEdBQUcsQ0FBQ04sS0FBSyxDQUFDTyxRQUFRLEVBQUUsVUFBQ0MsS0FBSyxFQUFFQyxLQUFLLEVBQUs7TUFDL0UsSUFBSSxDQUFDRCxLQUFLLEVBQUUsT0FBTyxJQUFJO01BQ3ZCLE9BQU9mLEtBQUssQ0FBQ2lCLFlBQVks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