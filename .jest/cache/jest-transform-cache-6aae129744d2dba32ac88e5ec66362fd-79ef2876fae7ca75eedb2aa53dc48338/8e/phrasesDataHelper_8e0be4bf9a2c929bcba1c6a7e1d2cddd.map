{"version":3,"names":["phrases1Data","phrases2Data","phrases3Data","phrases4Data","phrases5Data","phrases6Data","phrasesBonusData","cov_oqfz86y99","s","getPhrasesData","level","f","dataMap","b","loadPhrasesData","_ref","_asyncToGenerator","loaders","_","bonus","load","mod","default","e","_x","apply","arguments","getLevelColor","colors","getLevelDisplayName","displayNames","getLevelDescription","descriptions","getLevelIcon","icons","getLevelTitle","displayName","description","isBonusLevel","getAvailableLevels","getPhrasesStats","data","phrases","totalPhrases","totalCategories","averagePhrasesPerCategory","length","categories","Math","round","difficulty","getPhrasesCategories","getPhrasesByCategory","categoryId","filter","phrase","getPhrasesMetadata","categoryDescriptions","usageNotes","levelInfo","contentStats","learningSequence"],"sources":["phrasesDataHelper.js"],"sourcesContent":["// src/utils/phrases/phrasesDataHelper.js\n\n// Import des données de phrases par niveau (6 niveaux + bonus)\n// Imports statiques conservés pour compat internes/tests si besoin\nimport phrases1Data from \"../../data/phrases/1\";\nimport phrases2Data from \"../../data/phrases/2\";\nimport phrases3Data from \"../../data/phrases/3\";\nimport phrases4Data from \"../../data/phrases/4\";\nimport phrases5Data from \"../../data/phrases/5\";\nimport phrases6Data from \"../../data/phrases/6\";\nimport phrasesBonusData from \"../../data/phrases/bonus\";\n\n/**\n * Récupère les données de phrases en fonction du niveau\n * @param {string} level - Le niveau de langue (1, 2, 3, 4, 5, 6, bonus)\n * @returns {Object} Les données de phrases pour le niveau spécifié\n */\nexport const getPhrasesData = (level) => {\n  const dataMap = {\n    \"1\": phrases1Data,\n    \"2\": phrases2Data,\n    \"3\": phrases3Data,\n    \"4\": phrases4Data,\n    \"5\": phrases5Data,\n    \"6\": phrases6Data,\n    \"bonus\": phrasesBonusData,\n  };\n\n  // Si le niveau demandé n'existe pas, on retourne le niveau 1 par défaut\n  return dataMap[level] || phrases1Data;\n};\n\n// Chargement dynamique pour réduire le bundle initial\nexport const loadPhrasesData = async (level) => {\n  try {\n    const loaders = {\n      \"1\": () => import(\"../../data/phrases/1\"),\n      \"2\": () => import(\"../../data/phrases/2\"),\n      \"3\": () => import(\"../../data/phrases/3\"),\n      \"4\": () => import(\"../../data/phrases/4\"),\n      \"5\": () => import(\"../../data/phrases/5\"),\n      \"6\": () => import(\"../../data/phrases/6\"),\n      bonus: () => import(\"../../data/phrases/bonus\"),\n    };\n    const load = loaders[level] || loaders[\"1\"];\n    const mod = await load();\n    return mod.default || mod;\n  } catch (e) {\n    return getPhrasesData(\"1\");\n  }\n};\n\n/**\n * Récupère la couleur associée à un niveau de langue\n * @param {string} level - Le niveau de langue (1, 2, 3, 4, 5, 6, bonus)\n * @returns {string} Code couleur hexadécimal pour le niveau\n */\nexport const getLevelColor = (level) => {\n  const colors = {\n    \"1\": \"#3b82f6\", // Bleu - Niveau 1\n    \"2\": \"#8b5cf6\", // Violet - Niveau 2\n    \"3\": \"#10b981\", // Vert - Niveau 3\n    \"4\": \"#f59e0b\", // Orange - Niveau 4\n    \"5\": \"#ef4444\", // Rouge - Niveau 5\n    \"6\": \"#6366f1\", // Indigo - Niveau 6\n    \"bonus\": \"#9333EA\", // Violet premium - Bonus\n  };\n  return colors[level] || \"#3b82f6\"; // Bleu par défaut (niveau 1)\n};\n\n/**\n * Récupère le nom d'affichage d'un niveau\n * @param {string} level - Le niveau de langue (1, 2, 3, 4, 5, 6, bonus)\n * @returns {string} Nom d'affichage du niveau\n */\nexport const getLevelDisplayName = (level) => {\n  const displayNames = {\n    \"1\": \"Niveau 1\",\n    \"2\": \"Niveau 2\",\n    \"3\": \"Niveau 3\", \n    \"4\": \"Niveau 4\",\n    \"5\": \"Niveau 5\",\n    \"6\": \"Niveau 6\",\n    \"bonus\": \"Bonus\",\n  };\n  return displayNames[level] || `Niveau ${level}`;\n};\n\n/**\n * Récupère la description d'un niveau\n * @param {string} level - Le niveau de langue (1, 2, 3, 4, 5, 6, bonus)\n * @returns {string} Description du niveau\n */\nexport const getLevelDescription = (level) => {\n  const descriptions = {\n    \"1\": \"Communication basique, expressions simples du quotidien\",\n    \"2\": \"Expressions simples, conversations courantes\", \n    \"3\": \"Communication claire sur des sujets familiers\",\n    \"4\": \"Communication complexe, discussions techniques\",\n    \"5\": \"Expression fluide, sujets complexes\",\n    \"6\": \"Niveau proche du locuteur natif, maîtrise de la langue\",\n    \"bonus\": \"Contenu exclusif et avancé\",\n  };\n  return descriptions[level] || \"Niveau de langue\";\n};\n\n/**\n * Récupère l'icône associée à un niveau\n * @param {string} level - Le niveau de langue\n * @returns {string} Emoji icône pour le niveau\n */\nexport const getLevelIcon = (level) => {\n  const icons = {\n    \"1\": \"🌱\",\n    \"2\": \"🌿\", \n    \"3\": \"🌳\",\n    \"4\": \"🚀\",\n    \"5\": \"💎\",\n    \"6\": \"🏆\",\n    \"bonus\": \"🔥\",\n  };\n  return icons[level] || \"🗣️\";\n};\n\n/**\n * Récupère le titre complet d'un niveau\n * @param {string} level - Le niveau de langue (1, 2, 3, 4, 5, 6, bonus)\n * @returns {string} Titre complet du niveau\n */\nexport const getLevelTitle = (level) => {\n  const displayName = getLevelDisplayName(level);\n  const description = getLevelDescription(level);\n  return `${displayName} - ${description}`;\n};\n\n/**\n * Vérifie si un niveau est un niveau bonus\n * @param {string} level - Le niveau à vérifier\n * @returns {boolean} True si c'est un niveau bonus\n */\nexport const isBonusLevel = (level) => {\n  return level === \"bonus\";\n};\n\n/**\n * Récupère la liste des niveaux disponibles\n * @returns {Array} Liste des niveaux disponibles\n */\nexport const getAvailableLevels = () => {\n  return [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"bonus\"];\n};\n\n/**\n * Récupère les statistiques d'un niveau de phrases\n * @param {string} level - Le niveau de langue\n * @returns {Object} Statistiques du niveau\n */\nexport const getPhrasesStats = (level) => {\n  const data = getPhrasesData(level);\n  \n  if (!data || !data.phrases) {\n    return { \n      totalPhrases: 0, \n      totalCategories: 0,\n      averagePhrasesPerCategory: 0\n    };\n  }\n\n  const totalPhrases = data.phrases.length;\n  const totalCategories = data.categories ? data.categories.length : 0;\n\n  return {\n    totalPhrases,\n    totalCategories,\n    averagePhrasesPerCategory: totalCategories > 0 ? Math.round(totalPhrases / totalCategories) : 0,\n    difficulty: data.difficulty || level,\n  };\n};\n\n/**\n * Récupère les catégories d'un niveau\n * @param {string} level - Le niveau de langue\n * @returns {Array} Liste des catégories pour ce niveau\n */\nexport const getPhrasesCategories = (level) => {\n  const data = getPhrasesData(level);\n  return data.categories || [];\n};\n\n/**\n * Récupère les phrases d'une catégorie spécifique\n * @param {string} level - Le niveau de langue\n * @param {number} categoryId - L'ID de la catégorie\n * @returns {Array} Liste des phrases de la catégorie\n */\nexport const getPhrasesByCategory = (level, categoryId) => {\n  const data = getPhrasesData(level);\n  if (!data.phrases) return [];\n  \n  return data.phrases.filter(phrase => phrase.categoryId === categoryId);\n};\n\n/**\n * Récupère les métadonnées d'un niveau\n * @param {string} level - Le niveau de langue\n * @returns {Object} Métadonnées du niveau\n */\nexport const getPhrasesMetadata = (level) => {\n  const data = getPhrasesData(level);\n  return {\n    difficulty: data.difficulty || level,\n    categoryDescriptions: data.categoryDescriptions || {},\n    usageNotes: data.usageNotes || {},\n    levelInfo: data.levelInfo || {},\n    contentStats: data.contentStats || {},\n    learningSequence: data.learningSequence || [],\n  };\n};"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}