272837d16af383865ca93064c78b647a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _ProgressCard = _interopRequireDefault(require("../../../../components/ui/ProgressCard"));
var _phrasesStats = require("../../../../utils/phrases/phrasesStats");
var _jsxRuntime = require("react/jsx-runtime");
var PhrasesProgress = function PhrasesProgress(_ref) {
  var levelColor = _ref.levelColor,
    phrasesData = _ref.phrasesData,
    completedPhrases = _ref.completedPhrases,
    expanded = _ref.expanded,
    onToggleExpand = _ref.onToggleExpand,
    onCategoryPress = _ref.onCategoryPress;
  var categories = (phrasesData == null ? void 0 : phrasesData.categories) || [];
  var phrases = (phrasesData == null ? void 0 : phrasesData.phrases) || [];
  var totalPhrasesCount = (0, _phrasesStats.calculateTotalPhrases)(categories, phrases);
  var completedPhrasesCount = (0, _phrasesStats.calculateCompletedPhrasesCount)(completedPhrases);
  var totalProgress = (0, _phrasesStats.calculateTotalPhrasesProgress)(categories, phrases, completedPhrases);
  var categoryProgressData = (0, _phrasesStats.calculateCategoryPhrasesProgress)(categories, phrases, completedPhrases);
  var formattedCategoryData = categoryProgressData.map(function (category) {
    return {
      title: category.title,
      completed: category.completedPhrases,
      total: category.totalPhrases,
      progress: category.progress
    };
  });
  return (0, _jsxRuntime.jsx)(_ProgressCard.default, {
    title: "Progression",
    progress: totalProgress,
    completed: completedPhrasesCount,
    total: totalPhrasesCount,
    unit: "phrases",
    levelColor: levelColor,
    expandable: categoryProgressData.length > 0,
    expanded: expanded,
    onToggleExpand: onToggleExpand,
    categoryData: formattedCategoryData,
    onCategoryPress: onCategoryPress
  });
};
PhrasesProgress.propTypes = {
  levelColor: _propTypes.default.string,
  phrasesData: _propTypes.default.shape({
    categories: _propTypes.default.array,
    phrases: _propTypes.default.array
  }),
  completedPhrases: _propTypes.default.object,
  expanded: _propTypes.default.bool,
  onToggleExpand: _propTypes.default.func,
  onCategoryPress: _propTypes.default.func
};
PhrasesProgress.defaultProps = {
  levelColor: '#5E60CE',
  phrasesData: {
    categories: [],
    phrases: []
  },
  completedPhrases: {},
  expanded: false,
  onToggleExpand: function onToggleExpand() {},
  onCategoryPress: function onCategoryPress() {}
};
var _default = exports.default = PhrasesProgress;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,