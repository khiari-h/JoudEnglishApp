{"version":3,"names":["_reactNative","require","_ButtonLabel","_interopRequireDefault","_jsxRuntime","mockSizeStyles","text","fontSize","mockVariantStyles","color","describe","it","_render","render","jsx","default","title","sizeStyles","variantStyles","uppercase","getByText","textComponent","expect","Array","isArray","props","style","toBe","textTransformStyle","find","hasOwnProperty","toEqual","textTransform","_render2","toBeUndefined"],"sources":["ButtonLabel.test.js"],"sourcesContent":["import { render } from '@testing-library/react-native';\r\nimport ButtonLabel from '../../../../src/components/ui/Button/ButtonLabel';\r\n\r\nconst mockSizeStyles = { text: { fontSize: 16 } };\r\nconst mockVariantStyles = { text: { color: 'blue' } };\r\n\r\ndescribe('ButtonLabel', () => {\r\n  it('devrait rendre le titre en majuscules si la prop uppercase est vraie', () => {\r\n    const { getByText } = render(\r\n      <ButtonLabel\r\n        title=\"mon bouton\"\r\n        sizeStyles={mockSizeStyles}\r\n        variantStyles={mockVariantStyles}\r\n        uppercase={true}\r\n      />\r\n    );\r\n    // On trouve le texte original\r\n    const textComponent = getByText('mon bouton');\r\n    // On vérifie que le style est un tableau\r\n    expect(Array.isArray(textComponent.props.style)).toBe(true);\r\n    // On trouve l'objet de style 'textTransform' dans le tableau\r\n    const textTransformStyle = textComponent.props.style.find(\r\n      (style) => style && style.hasOwnProperty('textTransform')\r\n    );\r\n    expect(textTransformStyle).toEqual({ textTransform: 'uppercase' });\r\n  });\r\n\r\n  it('ne devrait pas rendre le titre en majuscules si la prop uppercase est fausse', () => {\r\n    const { getByText } = render(\r\n      <ButtonLabel\r\n        title=\"mon bouton\"\r\n        sizeStyles={mockSizeStyles}\r\n        variantStyles={mockVariantStyles}\r\n        uppercase={false}\r\n      />\r\n    );\r\n    const textComponent = getByText('mon bouton');\r\n    // On vérifie que le style textTransform n'est pas appliqué\r\n    const textTransformStyle = textComponent.props.style.find(\r\n      (style) => style && style.hasOwnProperty('textTransform')\r\n    );\r\n    expect(textTransformStyle).toBeUndefined();\r\n  });\r\n});"],"mappings":";AAAA,IAAAA,YAAA,GAAAC,OAAA;AACA,IAAAC,YAAA,GAAAC,sBAAA,CAAAF,OAAA;AAA2E,IAAAG,WAAA,GAAAH,OAAA;AAE3E,IAAMI,cAAc,GAAG;EAAEC,IAAI,EAAE;IAAEC,QAAQ,EAAE;EAAG;AAAE,CAAC;AACjD,IAAMC,iBAAiB,GAAG;EAAEF,IAAI,EAAE;IAAEG,KAAK,EAAE;EAAO;AAAE,CAAC;AAErDC,QAAQ,CAAC,aAAa,EAAE,YAAM;EAC5BC,EAAE,CAAC,sEAAsE,EAAE,YAAM;IAC/E,IAAAC,OAAA,GAAsB,IAAAC,mBAAM,EAC1B,IAAAT,WAAA,CAAAU,GAAA,EAACZ,YAAA,CAAAa,OAAW;QACVC,KAAK,EAAC,YAAY;QAClBC,UAAU,EAAEZ,cAAe;QAC3Ba,aAAa,EAAEV,iBAAkB;QACjCW,SAAS,EAAE;MAAK,CACjB,CACH,CAAC;MAPOC,SAAS,GAAAR,OAAA,CAATQ,SAAS;IASjB,IAAMC,aAAa,GAAGD,SAAS,CAAC,YAAY,CAAC;IAE7CE,MAAM,CAACC,KAAK,CAACC,OAAO,CAACH,aAAa,CAACI,KAAK,CAACC,KAAK,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IAE3D,IAAMC,kBAAkB,GAAGP,aAAa,CAACI,KAAK,CAACC,KAAK,CAACG,IAAI,CACvD,UAACH,KAAK;MAAA,OAAKA,KAAK,IAAIA,KAAK,CAACI,cAAc,CAAC,eAAe,CAAC;IAAA,CAC3D,CAAC;IACDR,MAAM,CAACM,kBAAkB,CAAC,CAACG,OAAO,CAAC;MAAEC,aAAa,EAAE;IAAY,CAAC,CAAC;EACpE,CAAC,CAAC;EAEFrB,EAAE,CAAC,8EAA8E,EAAE,YAAM;IACvF,IAAAsB,QAAA,GAAsB,IAAApB,mBAAM,EAC1B,IAAAT,WAAA,CAAAU,GAAA,EAACZ,YAAA,CAAAa,OAAW;QACVC,KAAK,EAAC,YAAY;QAClBC,UAAU,EAAEZ,cAAe;QAC3Ba,aAAa,EAAEV,iBAAkB;QACjCW,SAAS,EAAE;MAAM,CAClB,CACH,CAAC;MAPOC,SAAS,GAAAa,QAAA,CAATb,SAAS;IAQjB,IAAMC,aAAa,GAAGD,SAAS,CAAC,YAAY,CAAC;IAE7C,IAAMQ,kBAAkB,GAAGP,aAAa,CAACI,KAAK,CAACC,KAAK,CAACG,IAAI,CACvD,UAACH,KAAK;MAAA,OAAKA,KAAK,IAAIA,KAAK,CAACI,cAAc,CAAC,eAAe,CAAC;IAAA,CAC3D,CAAC;IACDR,MAAM,CAACM,kBAAkB,CAAC,CAACM,aAAa,CAAC,CAAC;EAC5C,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}