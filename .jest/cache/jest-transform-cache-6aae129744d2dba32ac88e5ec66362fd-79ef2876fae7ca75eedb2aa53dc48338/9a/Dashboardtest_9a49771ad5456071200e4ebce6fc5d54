7eb24fac49c9d4a53b8c3dc47320da44
_getJestObj().mock('expo-linear-gradient', function () {
  return {
    LinearGradient: function LinearGradient(_ref) {
      var children = _ref.children,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      var _require = require('react-native'),
        View = _require.View;
      return (0, _jsxRuntime.jsx)(View, Object.assign({}, props, {
        children: children
      }));
    }
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
_getJestObj().mock('../../../src/contexts/ProgressContext');
_getJestObj().mock('../../../src/contexts/CurrentLevelContext');
_getJestObj().mock('../../../src/hooks/useRealTimeProgress', function () {
  return {
    __esModule: true,
    default: function _default() {
      return {
        getLevelProgress: jest.fn(function (level) {
          var progressMap = {
            '1': 25,
            '2': 50,
            '3': 75
          };
          return progressMap[level] || 0;
        }),
        refresh: jest.fn().mockResolvedValue()
      };
    }
  };
});
_getJestObj().mock('../../../src/hooks/useLastActivity', function () {
  return {
    __esModule: true,
    default: function _default() {
      return {
        lastActivity: {
          type: 'vocabulary',
          level: '1',
          title: 'Vocabulaire Animaux',
          metadata: {
            word: 5,
            totalWords: 15
          }
        },
        isLoading: false,
        reload: jest.fn().mockResolvedValue()
      };
    }
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/ModernHeader', function () {
  var _require2 = require('react-native'),
    View = _require2.View,
    Text = _require2.Text;
  return function (_ref2) {
    var level = _ref2.level,
      levelColor = _ref2.levelColor;
    return (0, _jsxRuntime.jsxs)(View, {
      testID: "modern-header",
      children: [(0, _jsxRuntime.jsxs)(Text, {
        children: ["Header Level: ", level]
      }), (0, _jsxRuntime.jsxs)(Text, {
        children: ["Color: ", levelColor]
      })]
    });
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/HeroContinueSection', function () {
  var _require3 = require('react-native'),
    View = _require3.View,
    Text = _require3.Text,
    TouchableOpacity = _require3.TouchableOpacity;
  return function (_ref3) {
    var lastActivity = _ref3.lastActivity,
      _onPress = _ref3.onPress,
      isLoading = _ref3.isLoading;
    return (0, _jsxRuntime.jsx)(View, {
      testID: "hero-continue-section",
      children: isLoading ? (0, _jsxRuntime.jsx)(Text, {
        children: "Loading..."
      }) : (0, _jsxRuntime.jsx)(TouchableOpacity, {
        onPress: function onPress() {
          return _onPress == null ? void 0 : _onPress(lastActivity);
        },
        testID: "continue-button",
        children: (0, _jsxRuntime.jsxs)(Text, {
          children: ["Continue: ", (lastActivity == null ? void 0 : lastActivity.title) || 'No activity']
        })
      })
    });
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/QuickActions', function () {
  var _require4 = require('react-native'),
    View = _require4.View,
    Text = _require4.Text;
  return function (_ref4) {
    var currentLevel = _ref4.currentLevel;
    return (0, _jsxRuntime.jsx)(View, {
      testID: "quick-actions",
      children: (0, _jsxRuntime.jsxs)(Text, {
        children: ["Quick Actions for Level: ", currentLevel]
      })
    });
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/SimpleMetrics', function () {
  var _require5 = require('react-native'),
    View = _require5.View,
    Text = _require5.Text;
  return function (_ref5) {
    var accentColor = _ref5.accentColor;
    return (0, _jsxRuntime.jsx)(View, {
      testID: "simple-metrics",
      children: (0, _jsxRuntime.jsxs)(Text, {
        children: ["Metrics with color: ", accentColor]
      })
    });
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/LearningProgress', function () {
  var _require6 = require('react-native'),
    View = _require6.View,
    Text = _require6.Text,
    TouchableOpacity = _require6.TouchableOpacity;
  return function (_ref6) {
    var globalProgress = _ref6.globalProgress,
      levels = _ref6.levels,
      currentLevel = _ref6.currentLevel,
      onSelectLevel = _ref6.onSelectLevel,
      onChangeLevelVisual = _ref6.onChangeLevelVisual;
    return (0, _jsxRuntime.jsxs)(View, {
      testID: "learning-progress",
      children: [(0, _jsxRuntime.jsxs)(Text, {
        children: ["Global Progress: ", globalProgress, "%"]
      }), (0, _jsxRuntime.jsxs)(Text, {
        children: ["Current Level: ", currentLevel]
      }), levels.map(function (level) {
        return (0, _jsxRuntime.jsx)(TouchableOpacity, {
          onPress: function onPress() {
            return onSelectLevel == null ? void 0 : onSelectLevel(level.id);
          },
          testID: `level-${level.id}`,
          children: (0, _jsxRuntime.jsxs)(Text, {
            children: ["Level ", level.id, ": ", level.progress, "%"]
          })
        }, level.id);
      }), (0, _jsxRuntime.jsx)(TouchableOpacity, {
        onPress: function onPress() {
          return onChangeLevelVisual == null ? void 0 : onChangeLevelVisual('2');
        },
        testID: "change-level-visual",
        children: (0, _jsxRuntime.jsx)(Text, {
          children: "Change Visual Level"
        })
      })]
    });
  };
});
_getJestObj().mock('../../../src/components/layout/Container', function () {
  var _require7 = require('react-native'),
    View = _require7.View;
  var Container = function Container(_ref7) {
    var children = _ref7.children,
      props = (0, _objectWithoutProperties2.default)(_ref7, _excluded2);
    return (0, _jsxRuntime.jsx)(View, Object.assign({}, props, {
      children: children
    }));
  };
  Container.CONTAINER_SAFE_EDGES = {
    NO_BOTTOM: ['top', 'left', 'right']
  };
  return Container;
});
_getJestObj().mock('../../../src/screens/VocabularyRevision/RevisionOrchestrator', function () {
  var _require8 = require('react-native'),
    View = _require8.View,
    Text = _require8.Text;
  return function (_ref8) {
    var currentLevel = _ref8.currentLevel;
    return (0, _jsxRuntime.jsx)(View, {
      testID: "revision-orchestrator",
      children: (0, _jsxRuntime.jsxs)(Text, {
        children: ["Revision for level: ", currentLevel]
      })
    });
  };
});
_getJestObj().mock('../../../src/utils/constants', function () {
  return {
    LANGUAGE_LEVELS: {
      '1': {
        title: 'Débutant',
        color: '#10B981',
        icon: '🌱'
      },
      '2': {
        title: 'Élémentaire',
        color: '#3B82F6',
        icon: '📚'
      },
      '3': {
        title: 'Intermédiaire',
        color: '#8B5CF6',
        icon: '🎯'
      },
      '4': {
        title: 'Intermédiaire+',
        color: '#F59E0B',
        icon: '🚀'
      },
      '5': {
        title: 'Avancé',
        color: '#EF4444',
        icon: '⭐'
      },
      '6': {
        title: 'Expert',
        color: '#EC4899',
        icon: '👑'
      },
      'bonus': {
        title: 'Bonus',
        color: '#6366F1',
        icon: '🎁'
      }
    },
    EXERCISES: {
      vocabulary: {
        route: '/tabs/vocabulary'
      },
      grammar: {
        route: '/tabs/grammar'
      }
    },
    CONTAINER_SAFE_EDGES: {
      NO_BOTTOM: ['top', 'left', 'right']
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Dashboard = _interopRequireDefault(require("../../../src/screens/Dashboard"));
var _ThemeContext = require("../../../src/contexts/ThemeContext");
var _ProgressContext = require("../../../src/contexts/ProgressContext");
var _CurrentLevelContext = require("../../../src/contexts/CurrentLevelContext");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children"],
  _excluded2 = ["children"];
function _getJestObj() {
  var _require0 = require("@jest/globals"),
    jest = _require0.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var _require9 = require('expo-router'),
  router = _require9.router;
describe('Dashboard', function () {
  var mockThemeContext = {
    colors: {
      background: '#F8FAFC',
      primary: '#3B82F6',
      surface: '#FFFFFF',
      text: '#1F2937',
      textSecondary: '#6B7280'
    }
  };
  var mockProgressContext = {
    progress: {
      level1: 50,
      level2: 30
    },
    isLoading: false
  };
  var mockCurrentLevelContext = {
    setCurrentLevel: jest.fn()
  };
  beforeEach(function () {
    jest.clearAllMocks();
    _ProgressContext.useProgress.mockReturnValue(mockProgressContext);
    _CurrentLevelContext.useCurrentLevel.mockReturnValue(mockCurrentLevelContext);
    router.push.mockClear();
  });
  var renderDashboard = function renderDashboard() {
    var themeValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : mockThemeContext;
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
      value: themeValue,
      children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
    }));
  };
  describe('Rendu initial', function () {
    it('devrait afficher tous les composants principaux', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard = renderDashboard(),
        getByTestId = _renderDashboard.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('modern-header')).toBeTruthy();
        expect(getByTestId('hero-continue-section')).toBeTruthy();
        expect(getByTestId('quick-actions')).toBeTruthy();
        expect(getByTestId('simple-metrics')).toBeTruthy();
        expect(getByTestId('learning-progress')).toBeTruthy();
        expect(getByTestId('revision-orchestrator')).toBeTruthy();
      });
    }));
    it('devrait afficher l\'état de chargement quand les données sont en cours de chargement', function () {
      _ProgressContext.useProgress.mockReturnValue(Object.assign({}, mockProgressContext, {
        isLoading: true
      }));
      var _renderDashboard2 = renderDashboard(),
        getByText = _renderDashboard2.getByText;
      expect(getByText('Chargement du tableau de bord...')).toBeTruthy();
    });
    it('devrait utiliser le niveau par défaut (1)', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard3 = renderDashboard(),
        getByText = _renderDashboard3.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('Header Level: 1')).toBeTruthy();
        expect(getByText('Quick Actions for Level: 1')).toBeTruthy();
      });
    }));
  });
  describe('Gestion des niveaux', function () {
    it('devrait afficher la couleur du niveau courant', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard4 = renderDashboard(),
        getByText = _renderDashboard4.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('Color: #10B981')).toBeTruthy();
      });
    }));
    it('devrait synchroniser le niveau avec le contexte global lors du changement visuel', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard5 = renderDashboard(),
        getByTestId = _renderDashboard5.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var changeButton = getByTestId('change-level-visual');
        _reactNative.fireEvent.press(changeButton);
      });
      expect(mockCurrentLevelContext.setCurrentLevel).toHaveBeenCalledWith('2');
    }));
    it('devrait naviguer vers la sélection d\'exercice lors de la sélection de niveau', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard6 = renderDashboard(),
        getByTestId = _renderDashboard6.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var level2Button = getByTestId('level-2');
        _reactNative.fireEvent.press(level2Button);
      });
      expect(mockCurrentLevelContext.setCurrentLevel).toHaveBeenCalledWith('2');
      expect(router.push).toHaveBeenCalledWith('/tabs/exerciseSelection?level=2');
    }));
  });
  describe('Navigation Continue', function () {
    it('devrait naviguer vers levelSelection quand l\'activité est "levelSelection"', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard7 = renderDashboard(),
        getByTestId = _renderDashboard7.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var continueButton = getByTestId('continue-button');
        _reactNative.fireEvent.press(continueButton);
      });
      expect(router.push).toHaveBeenCalledWith({
        pathname: '/tabs/vocabulary',
        params: {
          level: '1'
        }
      });
    }));
    it('devrait naviguer vers l\'exercice approprié avec les bons paramètres', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard8 = renderDashboard(),
        getByTestId = _renderDashboard8.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var continueButton = getByTestId('continue-button');
        _reactNative.fireEvent.press(continueButton);
      });
      expect(router.push).toHaveBeenCalledWith({
        pathname: '/tabs/vocabulary',
        params: {
          level: '1'
        }
      });
    }));
  });
  describe('Progression des niveaux', function () {
    it('devrait afficher la progression globale du niveau courant', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard9 = renderDashboard(),
        getByText = _renderDashboard9.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('Global Progress: 25%')).toBeTruthy();
      });
    }));
    it('devrait afficher tous les niveaux avec leur progression', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard0 = renderDashboard(),
        getByText = _renderDashboard0.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('Level 1: 25%')).toBeTruthy();
        expect(getByText('Level 2: 50%')).toBeTruthy();
        expect(getByText('Level 3: 75%')).toBeTruthy();
      });
    }));
  });
  describe('Pull-to-refresh', function () {
    it('devrait gérer le pull-to-refresh', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard1 = renderDashboard(),
        getByTestId = _renderDashboard1.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('modern-header')).toBeTruthy();
      });
    }));
  });
  describe('Thème et couleurs', function () {
    it('devrait utiliser les couleurs du thème', (0, _asyncToGenerator2.default)(function* () {
      var customTheme = {
        colors: {
          background: '#000000',
          primary: '#FF0000',
          surface: '#111111',
          text: '#FFFFFF',
          textSecondary: '#CCCCCC'
        }
      };
      var _renderDashboard10 = renderDashboard(customTheme),
        getByTestId = _renderDashboard10.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('modern-header')).toBeTruthy();
        expect(getByTestId('simple-metrics')).toBeTruthy();
      });
    }));
    it('devrait fonctionner sans contexte de thème', (0, _asyncToGenerator2.default)(function* () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Dashboard.default, {})),
        getByTestId = _render.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('modern-header')).toBeTruthy();
        expect(getByTestId('hero-continue-section')).toBeTruthy();
      });
    }));
  });
  describe('Gestion des erreurs', function () {
    it('devrait gérer les erreurs de contexte Progress', function () {
      _ProgressContext.useProgress.mockReturnValue({
        isLoading: true
      });
      var _renderDashboard11 = renderDashboard(),
        getByText = _renderDashboard11.getByText;
      expect(getByText('Chargement du tableau de bord...')).toBeTruthy();
    });
    it('devrait gérer les erreurs de contexte CurrentLevel', (0, _asyncToGenerator2.default)(function* () {
      _CurrentLevelContext.useCurrentLevel.mockReturnValue({
        setCurrentLevel: jest.fn()
      });
      var _renderDashboard12 = renderDashboard(),
        getByTestId = _renderDashboard12.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('modern-header')).toBeTruthy();
      });
    }));
  });
  describe('Intégration des composants', function () {
    it('devrait passer les bonnes props aux composants enfants', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard13 = renderDashboard(),
        getByText = _renderDashboard13.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('Header Level: 1')).toBeTruthy();
        expect(getByText('Quick Actions for Level: 1')).toBeTruthy();
        expect(getByText('Metrics with color: #10B981')).toBeTruthy();
        expect(getByText('Current Level: 1')).toBeTruthy();
        expect(getByText('Revision for level: 1')).toBeTruthy();
      });
    }));
    it('devrait mettre à jour les composants quand le niveau change', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard14 = renderDashboard(),
        getByText = _renderDashboard14.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('Header Level: 1')).toBeTruthy();
        expect(getByText('Current Level: 1')).toBeTruthy();
      });
    }));
  });
  describe('Accessibilité', function () {
    it('devrait avoir les testIDs appropriés pour les tests', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard15 = renderDashboard(),
        getByTestId = _renderDashboard15.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('modern-header')).toBeTruthy();
        expect(getByTestId('hero-continue-section')).toBeTruthy();
        expect(getByTestId('quick-actions')).toBeTruthy();
        expect(getByTestId('simple-metrics')).toBeTruthy();
        expect(getByTestId('learning-progress')).toBeTruthy();
        expect(getByTestId('revision-orchestrator')).toBeTruthy();
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,