53c8f4146ca78fdb40525a849fcf33d5
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactNative = require("@testing-library/react-native");
var _ButtonLabel = _interopRequireDefault(require("../../../../src/components/ui/Button/ButtonLabel"));
var _jsxRuntime = require("react/jsx-runtime");
var mockSizeStyles = {
  text: {
    fontSize: 16
  }
};
var mockVariantStyles = {
  text: {
    color: 'blue'
  }
};
describe('ButtonLabel', function () {
  it('devrait rendre le titre en majuscules si la prop uppercase est vraie', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ButtonLabel.default, {
        title: "mon bouton",
        sizeStyles: mockSizeStyles,
        variantStyles: mockVariantStyles,
        uppercase: true
      })),
      getByText = _render.getByText;
    var textComponent = getByText('mon bouton');
    expect(Array.isArray(textComponent.props.style)).toBe(true);
    var textTransformStyle = textComponent.props.style.find(function (style) {
      return style && style.hasOwnProperty('textTransform');
    });
    expect(textTransformStyle).toEqual({
      textTransform: 'uppercase'
    });
  });
  it('ne devrait pas rendre le titre en majuscules si la prop uppercase est fausse', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ButtonLabel.default, {
        title: "mon bouton",
        sizeStyles: mockSizeStyles,
        variantStyles: mockVariantStyles,
        uppercase: false
      })),
      getByText = _render2.getByText;
    var textComponent = getByText('mon bouton');
    var textTransformStyle = textComponent.props.style.find(function (style) {
      return style && style.hasOwnProperty('textTransform');
    });
    expect(textTransformStyle).toBeUndefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX0J1dHRvbkxhYmVsIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9qc3hSdW50aW1lIiwibW9ja1NpemVTdHlsZXMiLCJ0ZXh0IiwiZm9udFNpemUiLCJtb2NrVmFyaWFudFN0eWxlcyIsImNvbG9yIiwiZGVzY3JpYmUiLCJpdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJkZWZhdWx0IiwidGl0bGUiLCJzaXplU3R5bGVzIiwidmFyaWFudFN0eWxlcyIsInVwcGVyY2FzZSIsImdldEJ5VGV4dCIsInRleHRDb21wb25lbnQiLCJleHBlY3QiLCJBcnJheSIsImlzQXJyYXkiLCJwcm9wcyIsInN0eWxlIiwidG9CZSIsInRleHRUcmFuc2Zvcm1TdHlsZSIsImZpbmQiLCJoYXNPd25Qcm9wZXJ0eSIsInRvRXF1YWwiLCJ0ZXh0VHJhbnNmb3JtIiwiX3JlbmRlcjIiLCJ0b0JlVW5kZWZpbmVkIl0sInNvdXJjZXMiOlsiQnV0dG9uTGFiZWwudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCBCdXR0b25MYWJlbCBmcm9tICcuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy91aS9CdXR0b24vQnV0dG9uTGFiZWwnO1xyXG5cclxuY29uc3QgbW9ja1NpemVTdHlsZXMgPSB7IHRleHQ6IHsgZm9udFNpemU6IDE2IH0gfTtcclxuY29uc3QgbW9ja1ZhcmlhbnRTdHlsZXMgPSB7IHRleHQ6IHsgY29sb3I6ICdibHVlJyB9IH07XHJcblxyXG5kZXNjcmliZSgnQnV0dG9uTGFiZWwnLCAoKSA9PiB7XHJcbiAgaXQoJ2RldnJhaXQgcmVuZHJlIGxlIHRpdHJlIGVuIG1hanVzY3VsZXMgc2kgbGEgcHJvcCB1cHBlcmNhc2UgZXN0IHZyYWllJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcclxuICAgICAgPEJ1dHRvbkxhYmVsXHJcbiAgICAgICAgdGl0bGU9XCJtb24gYm91dG9uXCJcclxuICAgICAgICBzaXplU3R5bGVzPXttb2NrU2l6ZVN0eWxlc31cclxuICAgICAgICB2YXJpYW50U3R5bGVzPXttb2NrVmFyaWFudFN0eWxlc31cclxuICAgICAgICB1cHBlcmNhc2U9e3RydWV9XHJcbiAgICAgIC8+XHJcbiAgICApO1xyXG4gICAgLy8gT24gdHJvdXZlIGxlIHRleHRlIG9yaWdpbmFsXHJcbiAgICBjb25zdCB0ZXh0Q29tcG9uZW50ID0gZ2V0QnlUZXh0KCdtb24gYm91dG9uJyk7XHJcbiAgICAvLyBPbiB2w6lyaWZpZSBxdWUgbGUgc3R5bGUgZXN0IHVuIHRhYmxlYXVcclxuICAgIGV4cGVjdChBcnJheS5pc0FycmF5KHRleHRDb21wb25lbnQucHJvcHMuc3R5bGUpKS50b0JlKHRydWUpO1xyXG4gICAgLy8gT24gdHJvdXZlIGwnb2JqZXQgZGUgc3R5bGUgJ3RleHRUcmFuc2Zvcm0nIGRhbnMgbGUgdGFibGVhdVxyXG4gICAgY29uc3QgdGV4dFRyYW5zZm9ybVN0eWxlID0gdGV4dENvbXBvbmVudC5wcm9wcy5zdHlsZS5maW5kKFxyXG4gICAgICAoc3R5bGUpID0+IHN0eWxlICYmIHN0eWxlLmhhc093blByb3BlcnR5KCd0ZXh0VHJhbnNmb3JtJylcclxuICAgICk7XHJcbiAgICBleHBlY3QodGV4dFRyYW5zZm9ybVN0eWxlKS50b0VxdWFsKHsgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCduZSBkZXZyYWl0IHBhcyByZW5kcmUgbGUgdGl0cmUgZW4gbWFqdXNjdWxlcyBzaSBsYSBwcm9wIHVwcGVyY2FzZSBlc3QgZmF1c3NlJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcclxuICAgICAgPEJ1dHRvbkxhYmVsXHJcbiAgICAgICAgdGl0bGU9XCJtb24gYm91dG9uXCJcclxuICAgICAgICBzaXplU3R5bGVzPXttb2NrU2l6ZVN0eWxlc31cclxuICAgICAgICB2YXJpYW50U3R5bGVzPXttb2NrVmFyaWFudFN0eWxlc31cclxuICAgICAgICB1cHBlcmNhc2U9e2ZhbHNlfVxyXG4gICAgICAvPlxyXG4gICAgKTtcclxuICAgIGNvbnN0IHRleHRDb21wb25lbnQgPSBnZXRCeVRleHQoJ21vbiBib3V0b24nKTtcclxuICAgIC8vIE9uIHbDqXJpZmllIHF1ZSBsZSBzdHlsZSB0ZXh0VHJhbnNmb3JtIG4nZXN0IHBhcyBhcHBsaXF1w6lcclxuICAgIGNvbnN0IHRleHRUcmFuc2Zvcm1TdHlsZSA9IHRleHRDb21wb25lbnQucHJvcHMuc3R5bGUuZmluZChcclxuICAgICAgKHN0eWxlKSA9PiBzdHlsZSAmJiBzdHlsZS5oYXNPd25Qcm9wZXJ0eSgndGV4dFRyYW5zZm9ybScpXHJcbiAgICApO1xyXG4gICAgZXhwZWN0KHRleHRUcmFuc2Zvcm1TdHlsZSkudG9CZVVuZGVmaW5lZCgpO1xyXG4gIH0pO1xyXG59KTsiXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBQSxZQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFBMkUsSUFBQUcsV0FBQSxHQUFBSCxPQUFBO0FBRTNFLElBQU1JLGNBQWMsR0FBRztFQUFFQyxJQUFJLEVBQUU7SUFBRUMsUUFBUSxFQUFFO0VBQUc7QUFBRSxDQUFDO0FBQ2pELElBQU1DLGlCQUFpQixHQUFHO0VBQUVGLElBQUksRUFBRTtJQUFFRyxLQUFLLEVBQUU7RUFBTztBQUFFLENBQUM7QUFFckRDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsWUFBTTtFQUM1QkMsRUFBRSxDQUFDLHNFQUFzRSxFQUFFLFlBQU07SUFDL0UsSUFBQUMsT0FBQSxHQUFzQixJQUFBQyxtQkFBTSxFQUMxQixJQUFBVCxXQUFBLENBQUFVLEdBQUEsRUFBQ1osWUFBQSxDQUFBYSxPQUFXO1FBQ1ZDLEtBQUssRUFBQyxZQUFZO1FBQ2xCQyxVQUFVLEVBQUVaLGNBQWU7UUFDM0JhLGFBQWEsRUFBRVYsaUJBQWtCO1FBQ2pDVyxTQUFTLEVBQUU7TUFBSyxDQUNqQixDQUNILENBQUM7TUFQT0MsU0FBUyxHQUFBUixPQUFBLENBQVRRLFNBQVM7SUFTakIsSUFBTUMsYUFBYSxHQUFHRCxTQUFTLENBQUMsWUFBWSxDQUFDO0lBRTdDRSxNQUFNLENBQUNDLEtBQUssQ0FBQ0MsT0FBTyxDQUFDSCxhQUFhLENBQUNJLEtBQUssQ0FBQ0MsS0FBSyxDQUFDLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQztJQUUzRCxJQUFNQyxrQkFBa0IsR0FBR1AsYUFBYSxDQUFDSSxLQUFLLENBQUNDLEtBQUssQ0FBQ0csSUFBSSxDQUN2RCxVQUFDSCxLQUFLO01BQUEsT0FBS0EsS0FBSyxJQUFJQSxLQUFLLENBQUNJLGNBQWMsQ0FBQyxlQUFlLENBQUM7SUFBQSxDQUMzRCxDQUFDO0lBQ0RSLE1BQU0sQ0FBQ00sa0JBQWtCLENBQUMsQ0FBQ0csT0FBTyxDQUFDO01BQUVDLGFBQWEsRUFBRTtJQUFZLENBQUMsQ0FBQztFQUNwRSxDQUFDLENBQUM7RUFFRnJCLEVBQUUsQ0FBQyw4RUFBOEUsRUFBRSxZQUFNO0lBQ3ZGLElBQUFzQixRQUFBLEdBQXNCLElBQUFwQixtQkFBTSxFQUMxQixJQUFBVCxXQUFBLENBQUFVLEdBQUEsRUFBQ1osWUFBQSxDQUFBYSxPQUFXO1FBQ1ZDLEtBQUssRUFBQyxZQUFZO1FBQ2xCQyxVQUFVLEVBQUVaLGNBQWU7UUFDM0JhLGFBQWEsRUFBRVYsaUJBQWtCO1FBQ2pDVyxTQUFTLEVBQUU7TUFBTSxDQUNsQixDQUNILENBQUM7TUFQT0MsU0FBUyxHQUFBYSxRQUFBLENBQVRiLFNBQVM7SUFRakIsSUFBTUMsYUFBYSxHQUFHRCxTQUFTLENBQUMsWUFBWSxDQUFDO0lBRTdDLElBQU1RLGtCQUFrQixHQUFHUCxhQUFhLENBQUNJLEtBQUssQ0FBQ0MsS0FBSyxDQUFDRyxJQUFJLENBQ3ZELFVBQUNILEtBQUs7TUFBQSxPQUFLQSxLQUFLLElBQUlBLEtBQUssQ0FBQ0ksY0FBYyxDQUFDLGVBQWUsQ0FBQztJQUFBLENBQzNELENBQUM7SUFDRFIsTUFBTSxDQUFDTSxrQkFBa0IsQ0FBQyxDQUFDTSxhQUFhLENBQUMsQ0FBQztFQUM1QyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=