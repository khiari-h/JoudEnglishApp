d319f8a707bcb30a405efbc163e93add
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ButtonLabel = _interopRequireDefault(require("../../../../src/components/ui/Button/ButtonLabel"));
var _jsxRuntime = require("react/jsx-runtime");
var mockSizeStyles = {
  text: {
    fontSize: 16
  }
};
var mockVariantStyles = {
  text: {
    color: 'blue'
  }
};
var mockCustomTextStyle = {
  letterSpacing: 0.5
};
describe('ButtonLabel', function () {
  it('devrait rendre le titre en majuscules si la prop uppercase est vraie', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ButtonLabel.default, {
        title: "mon bouton",
        sizeStyles: mockSizeStyles,
        variantStyles: mockVariantStyles,
        uppercase: true,
        textStyle: mockCustomTextStyle
      })),
      getByText = _render.getByText;
    var textComponent = getByText('mon bouton');
    expect(textComponent.props.style).toContainEqual(expect.objectContaining({
      textTransform: 'uppercase'
    }));
  });
  it('ne devrait pas rendre le titre en majuscules si la prop uppercase est fausse', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ButtonLabel.default, {
        title: "mon bouton",
        sizeStyles: mockSizeStyles,
        variantStyles: mockVariantStyles,
        uppercase: false
      })),
      getByText = _render2.getByText;
    var textComponent = getByText('mon bouton');
    expect(textComponent.props.style).not.toContainEqual(expect.objectContaining({
      textTransform: 'uppercase'
    }));
  });
  it('devrait appliquer le style de texte correct', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ButtonLabel.default, {
        title: "Titre",
        sizeStyles: mockSizeStyles,
        variantStyles: mockVariantStyles
      })),
      getByText = _render3.getByText;
    var textComponent = getByText('Titre');
    expect(textComponent.props.style).toContainEqual(mockSizeStyles.text);
    expect(textComponent.props.style).toContainEqual(mockVariantStyles.text);
  });
  it('devrait appliquer un style de texte personnalis√© si fourni', function () {
    var customTextStyle = {
      fontWeight: 'bold'
    };
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ButtonLabel.default, {
        title: "Titre",
        sizeStyles: mockSizeStyles,
        variantStyles: mockVariantStyles,
        textStyle: customTextStyle
      })),
      getByText = _render4.getByText;
    var textComponent = getByText('Titre');
    expect(textComponent.props.style).toContainEqual(customTextStyle);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9CdXR0b25MYWJlbCIsIl9qc3hSdW50aW1lIiwibW9ja1NpemVTdHlsZXMiLCJ0ZXh0IiwiZm9udFNpemUiLCJtb2NrVmFyaWFudFN0eWxlcyIsImNvbG9yIiwibW9ja0N1c3RvbVRleHRTdHlsZSIsImxldHRlclNwYWNpbmciLCJkZXNjcmliZSIsIml0IiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsImRlZmF1bHQiLCJ0aXRsZSIsInNpemVTdHlsZXMiLCJ2YXJpYW50U3R5bGVzIiwidXBwZXJjYXNlIiwidGV4dFN0eWxlIiwiZ2V0QnlUZXh0IiwidGV4dENvbXBvbmVudCIsImV4cGVjdCIsInByb3BzIiwic3R5bGUiLCJ0b0NvbnRhaW5FcXVhbCIsIm9iamVjdENvbnRhaW5pbmciLCJ0ZXh0VHJhbnNmb3JtIiwiX3JlbmRlcjIiLCJub3QiLCJfcmVuZGVyMyIsImN1c3RvbVRleHRTdHlsZSIsImZvbnRXZWlnaHQiLCJfcmVuZGVyNCJdLCJzb3VyY2VzIjpbIkJ1dHRvbkxhYmVsLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgQnV0dG9uTGFiZWwgZnJvbSAnLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdWkvQnV0dG9uL0J1dHRvbkxhYmVsJztcclxuXHJcbi8vIE1vY2tzIGRlcyBzdHlsZXMgcG91ciB1bmUgbWVpbGxldXJlIGxpc2liaWxpdMOpIGV0IHBvdXIgw6l2aXRlciBsZXMgZMOpcGVuZGFuY2VzXHJcbmNvbnN0IG1vY2tTaXplU3R5bGVzID0geyB0ZXh0OiB7IGZvbnRTaXplOiAxNiB9IH07XHJcbmNvbnN0IG1vY2tWYXJpYW50U3R5bGVzID0geyB0ZXh0OiB7IGNvbG9yOiAnYmx1ZScgfSB9O1xyXG5jb25zdCBtb2NrQ3VzdG9tVGV4dFN0eWxlID0geyBsZXR0ZXJTcGFjaW5nOiAwLjUgfTtcclxuXHJcbmRlc2NyaWJlKCdCdXR0b25MYWJlbCcsICgpID0+IHtcclxuICBpdCgnZGV2cmFpdCByZW5kcmUgbGUgdGl0cmUgZW4gbWFqdXNjdWxlcyBzaSBsYSBwcm9wIHVwcGVyY2FzZSBlc3QgdnJhaWUnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxyXG4gICAgICA8QnV0dG9uTGFiZWxcclxuICAgICAgICB0aXRsZT1cIm1vbiBib3V0b25cIlxyXG4gICAgICAgIHNpemVTdHlsZXM9e21vY2tTaXplU3R5bGVzfVxyXG4gICAgICAgIHZhcmlhbnRTdHlsZXM9e21vY2tWYXJpYW50U3R5bGVzfVxyXG4gICAgICAgIHVwcGVyY2FzZT17dHJ1ZX1cclxuICAgICAgICB0ZXh0U3R5bGU9e21vY2tDdXN0b21UZXh0U3R5bGV9XHJcbiAgICAgIC8+XHJcbiAgICApO1xyXG4gICAgY29uc3QgdGV4dENvbXBvbmVudCA9IGdldEJ5VGV4dCgnbW9uIGJvdXRvbicpO1xyXG4gICAgLy8gT24gdsOpcmlmaWUgcXVlIGxlIHN0eWxlIGNvbnRpZW50IGwnb2JqZXQgZGUgc3R5bGUgcG91ciBsYSBtaXNlIGVuIG1hanVzY3VsZXNcclxuICAgIGV4cGVjdCh0ZXh0Q29tcG9uZW50LnByb3BzLnN0eWxlKS50b0NvbnRhaW5FcXVhbChcclxuICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoeyB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJyB9KVxyXG4gICAgKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ25lIGRldnJhaXQgcGFzIHJlbmRyZSBsZSB0aXRyZSBlbiBtYWp1c2N1bGVzIHNpIGxhIHByb3AgdXBwZXJjYXNlIGVzdCBmYXVzc2UnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxyXG4gICAgICA8QnV0dG9uTGFiZWxcclxuICAgICAgICB0aXRsZT1cIm1vbiBib3V0b25cIlxyXG4gICAgICAgIHNpemVTdHlsZXM9e21vY2tTaXplU3R5bGVzfVxyXG4gICAgICAgIHZhcmlhbnRTdHlsZXM9e21vY2tWYXJpYW50U3R5bGVzfVxyXG4gICAgICAgIHVwcGVyY2FzZT17ZmFsc2V9XHJcbiAgICAgIC8+XHJcbiAgICApO1xyXG4gICAgY29uc3QgdGV4dENvbXBvbmVudCA9IGdldEJ5VGV4dCgnbW9uIGJvdXRvbicpO1xyXG4gICAgLy8gT24gdsOpcmlmaWUgcXVlIGxlIHN0eWxlIG5lIGNvbnRpZW50IHBhcyBsJ29iamV0IGRlIHN0eWxlIHBvdXIgbGEgbWlzZSBlbiBtYWp1c2N1bGVzXHJcbiAgICBleHBlY3QodGV4dENvbXBvbmVudC5wcm9wcy5zdHlsZSkubm90LnRvQ29udGFpbkVxdWFsKFxyXG4gICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7IHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnIH0pXHJcbiAgICApO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnZGV2cmFpdCBhcHBsaXF1ZXIgbGUgc3R5bGUgZGUgdGV4dGUgY29ycmVjdCcsICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXHJcbiAgICAgIDxCdXR0b25MYWJlbFxyXG4gICAgICAgIHRpdGxlPVwiVGl0cmVcIlxyXG4gICAgICAgIHNpemVTdHlsZXM9e21vY2tTaXplU3R5bGVzfVxyXG4gICAgICAgIHZhcmlhbnRTdHlsZXM9e21vY2tWYXJpYW50U3R5bGVzfVxyXG4gICAgICAvPlxyXG4gICAgKTtcclxuICAgIGNvbnN0IHRleHRDb21wb25lbnQgPSBnZXRCeVRleHQoJ1RpdHJlJyk7XHJcbiAgICBleHBlY3QodGV4dENvbXBvbmVudC5wcm9wcy5zdHlsZSkudG9Db250YWluRXF1YWwobW9ja1NpemVTdHlsZXMudGV4dCk7XHJcbiAgICBleHBlY3QodGV4dENvbXBvbmVudC5wcm9wcy5zdHlsZSkudG9Db250YWluRXF1YWwobW9ja1ZhcmlhbnRTdHlsZXMudGV4dCk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgaXQoJ2RldnJhaXQgYXBwbGlxdWVyIHVuIHN0eWxlIGRlIHRleHRlIHBlcnNvbm5hbGlzw6kgc2kgZm91cm5pJywgKCkgPT4ge1xyXG4gICAgY29uc3QgY3VzdG9tVGV4dFN0eWxlID0geyBmb250V2VpZ2h0OiAnYm9sZCcgfTtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXHJcbiAgICAgIDxCdXR0b25MYWJlbFxyXG4gICAgICAgIHRpdGxlPVwiVGl0cmVcIlxyXG4gICAgICAgIHNpemVTdHlsZXM9e21vY2tTaXplU3R5bGVzfVxyXG4gICAgICAgIHZhcmlhbnRTdHlsZXM9e21vY2tWYXJpYW50U3R5bGVzfVxyXG4gICAgICAgIHRleHRTdHlsZT17Y3VzdG9tVGV4dFN0eWxlfVxyXG4gICAgICAvPlxyXG4gICAgKTtcclxuICAgIGNvbnN0IHRleHRDb21wb25lbnQgPSBnZXRCeVRleHQoJ1RpdHJlJyk7XHJcbiAgICBleHBlY3QodGV4dENvbXBvbmVudC5wcm9wcy5zdHlsZSkudG9Db250YWluRXF1YWwoY3VzdG9tVGV4dFN0eWxlKTtcclxuICB9KTtcclxufSk7Il0sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsWUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQTJFLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUczRSxJQUFNSSxjQUFjLEdBQUc7RUFBRUMsSUFBSSxFQUFFO0lBQUVDLFFBQVEsRUFBRTtFQUFHO0FBQUUsQ0FBQztBQUNqRCxJQUFNQyxpQkFBaUIsR0FBRztFQUFFRixJQUFJLEVBQUU7SUFBRUcsS0FBSyxFQUFFO0VBQU87QUFBRSxDQUFDO0FBQ3JELElBQU1DLG1CQUFtQixHQUFHO0VBQUVDLGFBQWEsRUFBRTtBQUFJLENBQUM7QUFF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