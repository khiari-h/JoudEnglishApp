967cf509a309bae12a70140c9662231b
_getJestObj().mock('@expo/vector-icons', function () {
  var _require = require('react-native'),
    Text = _require.Text;
  return {
    Ionicons: function Ionicons(props) {
      return (0, _jsxRuntime.jsx)(Text, {
        testID: `icon-${props.name}`,
        children: props.name
      });
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _OptionsList = _interopRequireDefault(require("../../../src/components/exercise-common/OptionsList"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('OptionsList', function () {
  var options = [{
    id: '1',
    text: 'Apple'
  }, {
    id: '2',
    text: 'Banana'
  }, {
    id: '3',
    text: 'Cherry'
  }];
  var onSelectOptionMock = jest.fn();
  afterEach(function () {
    onSelectOptionMock.mockClear();
  });
  it('renders all options correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
        options: options
      })),
      getByText = _render.getByText;
    expect(getByText('Apple')).toBeTruthy();
    expect(getByText('Banana')).toBeTruthy();
    expect(getByText('Cherry')).toBeTruthy();
  });
  it('calls onSelectOption with the correct id when an option is pressed', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
        options: options,
        onSelectOption: onSelectOptionMock
      })),
      getByText = _render2.getByText;
    _reactNative.fireEvent.press(getByText('Banana'));
    expect(onSelectOptionMock).toHaveBeenCalledWith('2');
  });
  it('does not call onSelectOption when disabled', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
        options: options,
        onSelectOption: onSelectOptionMock,
        disabled: true
      })),
      getByText = _render3.getByText;
    _reactNative.fireEvent.press(getByText('Banana'));
    expect(onSelectOptionMock).not.toHaveBeenCalled();
  });
  it('shows a selected indicator for the selected option when answer is not shown', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
        options: options,
        selectedOptionId: '1'
      })),
      getByTestId = _render4.getByTestId,
      queryByTestId = _render4.queryByTestId;
    expect(getByTestId('option-item-1')).toBeTruthy();
    var selectedOption = getByTestId('option-item-1');
    expect(selectedOption.children.find(function (child) {
      return child.props.testID === 'selected-indicator';
    })).toBeTruthy();
    expect(queryByTestId('icon-checkmark-circle')).toBeNull();
    expect(queryByTestId('icon-close-circle')).toBeNull();
  });
  describe('Layout and Logic', function () {
    it('renders with vertical layout by default', function () {
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
          options: options
        })),
        getByTestId = _render5.getByTestId;
      var optionStyle = getByTestId('option-item-1').props.style[0];
      expect(_reactNative2.StyleSheet.flatten(optionStyle)).toEqual(expect.objectContaining({
        flexDirection: 'row'
      }));
    });
    it('renders with grid layout when specified', function () {
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
          options: options,
          layout: "grid"
        })),
        getByTestId = _render6.getByTestId;
      var gridContainer = getByTestId('grid-container');
      expect(_reactNative2.StyleSheet.flatten(gridContainer.props.style)).toEqual(expect.objectContaining({
        flexDirection: 'row',
        flexWrap: 'wrap'
      }));
      var optionStyle = getByTestId('grid-option-item-1').props.style[0];
      expect(_reactNative2.StyleSheet.flatten(optionStyle)).toEqual(expect.objectContaining({
        width: '48%'
      }));
    });
    it('handles grid layout with more than 2 options', function () {
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
          options: options,
          layout: "grid"
        })),
        getByTestId = _render7.getByTestId;
      var optionStyle = getByTestId('grid-option-item-1').props.style[0];
      expect(_reactNative2.StyleSheet.flatten(optionStyle)).toEqual(expect.objectContaining({
        width: '48%'
      }));
    });
    it('handles grid layout with a single option', function () {
      var oneOption = [{
        id: '1',
        text: 'One'
      }];
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
          options: oneOption,
          layout: "grid"
        })),
        getByTestId = _render8.getByTestId;
      var optionStyle = getByTestId('grid-option-item-1').props.style[0];
      expect(_reactNative2.StyleSheet.flatten(optionStyle)).toEqual(expect.objectContaining({
        width: '98%'
      }));
    });
    it('renders correctly with only one option in vertical layout', function () {
      var oneOption = [{
        id: '1',
        text: 'One'
      }];
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
          options: oneOption
        })),
        getByText = _render9.getByText;
      expect(getByText('One')).toBeTruthy();
    });
  });
  describe('when showing correct answer', function () {
    it('shows a checkmark for the correct answer', function () {
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
          options: options,
          selectedOptionId: '2',
          correctOptionId: '2',
          showCorrectAnswer: true
        })),
        getByTestId = _render0.getByTestId,
        queryByTestId = _render0.queryByTestId;
      expect(getByTestId('icon-checkmark-circle')).toBeTruthy();
      expect(queryByTestId('selected-indicator')).toBeNull();
    });
    it('shows a cross for the incorrect selection and a checkmark for the correct answer', function () {
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
          options: options,
          selectedOptionId: '1',
          correctOptionId: '2',
          showCorrectAnswer: true
        })),
        getByTestId = _render1.getByTestId,
        queryAllByTestId = _render1.queryAllByTestId;
      expect(getByTestId('icon-close-circle')).toBeTruthy();
      expect(queryAllByTestId('icon-checkmark-circle').length).toBe(1);
    });
    it('handles correct and incorrect answers in grid layout', function () {
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
          options: options,
          selectedOptionId: '1',
          correctOptionId: '2',
          showCorrectAnswer: true,
          layout: "grid"
        })),
        getByTestId = _render10.getByTestId,
        queryAllByTestId = _render10.queryAllByTestId;
      expect(getByTestId('icon-close-circle')).toBeTruthy();
      expect(queryAllByTestId('icon-checkmark-circle').length).toBe(1);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfcmVxdWlyZSIsInJlcXVpcmUiLCJUZXh0IiwiSW9uaWNvbnMiLCJwcm9wcyIsIl9qc3hSdW50aW1lIiwianN4IiwidGVzdElEIiwibmFtZSIsImNoaWxkcmVuIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9yZWFjdE5hdGl2ZTIiLCJfT3B0aW9uc0xpc3QiLCJfcmVxdWlyZTIiLCJqZXN0IiwiZGVzY3JpYmUiLCJvcHRpb25zIiwiaWQiLCJ0ZXh0Iiwib25TZWxlY3RPcHRpb25Nb2NrIiwiZm4iLCJhZnRlckVhY2giLCJtb2NrQ2xlYXIiLCJpdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJkZWZhdWx0IiwiZ2V0QnlUZXh0IiwiZXhwZWN0IiwidG9CZVRydXRoeSIsIl9yZW5kZXIyIiwib25TZWxlY3RPcHRpb24iLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiX3JlbmRlcjMiLCJkaXNhYmxlZCIsIm5vdCIsInRvSGF2ZUJlZW5DYWxsZWQiLCJfcmVuZGVyNCIsInNlbGVjdGVkT3B0aW9uSWQiLCJnZXRCeVRlc3RJZCIsInF1ZXJ5QnlUZXN0SWQiLCJzZWxlY3RlZE9wdGlvbiIsImZpbmQiLCJjaGlsZCIsInRvQmVOdWxsIiwiX3JlbmRlcjUiLCJvcHRpb25TdHlsZSIsInN0eWxlIiwiU3R5bGVTaGVldCIsImZsYXR0ZW4iLCJ0b0VxdWFsIiwib2JqZWN0Q29udGFpbmluZyIsImZsZXhEaXJlY3Rpb24iLCJfcmVuZGVyNiIsImxheW91dCIsImdyaWRDb250YWluZXIiLCJmbGV4V3JhcCIsIndpZHRoIiwiX3JlbmRlcjciLCJvbmVPcHRpb24iLCJfcmVuZGVyOCIsIl9yZW5kZXI5IiwiX3JlbmRlcjAiLCJjb3JyZWN0T3B0aW9uSWQiLCJzaG93Q29ycmVjdEFuc3dlciIsIl9yZW5kZXIxIiwicXVlcnlBbGxCeVRlc3RJZCIsImxlbmd0aCIsInRvQmUiLCJfcmVuZGVyMTAiXSwic291cmNlcyI6WyJPcHRpb25zTGlzdC50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IFN0eWxlU2hlZXQgfSBmcm9tICdyZWFjdC1uYXRpdmUnOyAvLyBJbXBvcnRleiBTdHlsZVNoZWV0IHBvdXIgdsOpcmlmaWVyIGxlcyBzdHlsZXNcbmltcG9ydCBPcHRpb25zTGlzdCBmcm9tICcuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9leGVyY2lzZS1jb21tb24vT3B0aW9uc0xpc3QnO1xuXG4vLyBNb2NrIGRlcyBpY8O0bmVzXG5qZXN0Lm1vY2soJ0BleHBvL3ZlY3Rvci1pY29ucycsICgpID0+IHtcbsKgIMKgIGNvbnN0IHsgVGV4dCB9ID0gcmVxdWlyZSgncmVhY3QtbmF0aXZlJyk7XG7CoCDCoCByZXR1cm4ge1xuwqAgwqAgwqAgwqAgSW9uaWNvbnM6IChwcm9wcykgPT4gPFRleHQgdGVzdElEPXtgaWNvbi0ke3Byb3BzLm5hbWV9YH0+e3Byb3BzLm5hbWV9PC9UZXh0PixcbsKgIMKgIH07XG59KTtcblxuZGVzY3JpYmUoJ09wdGlvbnNMaXN0JywgKCkgPT4ge1xuwqAgwqAgY29uc3Qgb3B0aW9ucyA9IFtcbsKgIMKgIMKgIMKgIHsgaWQ6ICcxJywgdGV4dDogJ0FwcGxlJyB9LFxuwqAgwqAgwqAgwqAgeyBpZDogJzInLCB0ZXh0OiAnQmFuYW5hJyB9LFxuwqAgwqAgwqAgwqAgeyBpZDogJzMnLCB0ZXh0OiAnQ2hlcnJ5JyB9LFxuwqAgwqAgXTtcbsKgIMKgIGNvbnN0IG9uU2VsZWN0T3B0aW9uTW9jayA9IGplc3QuZm4oKTtcblxuwqAgwqAgYWZ0ZXJFYWNoKCgpID0+IHtcbsKgIMKgIMKgIMKgIG9uU2VsZWN0T3B0aW9uTW9jay5tb2NrQ2xlYXIoKTtcbsKgIMKgIH0pO1xuXG7CoCDCoCAvLyAtLS0gVGVzdHMgZGUgcmVuZHUgZGUgYmFzZSAtLS1cbsKgIMKgIGl0KCdyZW5kZXJzIGFsbCBvcHRpb25zIGNvcnJlY3RseScsICgpID0+IHtcbsKgIMKgIMKgIMKgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPE9wdGlvbnNMaXN0IG9wdGlvbnM9e29wdGlvbnN9IC8+KTtcbsKgIMKgIMKgIMKgIGV4cGVjdChnZXRCeVRleHQoJ0FwcGxlJykpLnRvQmVUcnV0aHkoKTtcbsKgIMKgIMKgIMKgIGV4cGVjdChnZXRCeVRleHQoJ0JhbmFuYScpKS50b0JlVHJ1dGh5KCk7XG7CoCDCoCDCoCDCoCBleHBlY3QoZ2V0QnlUZXh0KCdDaGVycnknKSkudG9CZVRydXRoeSgpO1xuwqAgwqAgfSk7XG5cbsKgIMKgIGl0KCdjYWxscyBvblNlbGVjdE9wdGlvbiB3aXRoIHRoZSBjb3JyZWN0IGlkIHdoZW4gYW4gb3B0aW9uIGlzIHByZXNzZWQnLCAoKSA9PiB7XG7CoCDCoCDCoCDCoCBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuwqAgwqAgwqAgwqAgwqAgwqAgPE9wdGlvbnNMaXN0IG9wdGlvbnM9e29wdGlvbnN9IG9uU2VsZWN0T3B0aW9uPXtvblNlbGVjdE9wdGlvbk1vY2t9IC8+XG7CoCDCoCDCoCDCoCApO1xuwqAgwqAgwqAgwqAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgnQmFuYW5hJykpO1xuwqAgwqAgwqAgwqAgZXhwZWN0KG9uU2VsZWN0T3B0aW9uTW9jaykudG9IYXZlQmVlbkNhbGxlZFdpdGgoJzInKTtcbsKgIMKgIH0pO1xuXG7CoCDCoCBpdCgnZG9lcyBub3QgY2FsbCBvblNlbGVjdE9wdGlvbiB3aGVuIGRpc2FibGVkJywgKCkgPT4ge1xuwqAgwqAgwqAgwqAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcbsKgIMKgIMKgIMKgIMKgIMKgIDxPcHRpb25zTGlzdCBvcHRpb25zPXtvcHRpb25zfSBvblNlbGVjdE9wdGlvbj17b25TZWxlY3RPcHRpb25Nb2NrfSBkaXNhYmxlZD17dHJ1ZX0gLz5cbsKgIMKgIMKgIMKgICk7XG7CoCDCoCDCoCDCoCBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCdCYW5hbmEnKSk7XG7CoCDCoCDCoCDCoCBleHBlY3Qob25TZWxlY3RPcHRpb25Nb2NrKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuwqAgwqAgfSk7XG5cbsKgIMKgIC8vIEFqb3V0IGQndW4gdGVzdCBwb3VyIHbDqXJpZmllciBsJ2luZGljYXRldXIgZGUgc8OpbGVjdGlvbiBzYW5zIGxhIHLDqXBvbnNlIGNvcnJlY3RlXG7CoCDCoCBpdCgnc2hvd3MgYSBzZWxlY3RlZCBpbmRpY2F0b3IgZm9yIHRoZSBzZWxlY3RlZCBvcHRpb24gd2hlbiBhbnN3ZXIgaXMgbm90IHNob3duJywgKCkgPT4ge1xuwqAgwqAgwqAgwqAgY29uc3QgeyBnZXRCeVRlc3RJZCwgcXVlcnlCeVRlc3RJZCB9ID0gcmVuZGVyKFxuwqAgwqAgwqAgwqAgwqAgwqAgPE9wdGlvbnNMaXN0IG9wdGlvbnM9e29wdGlvbnN9IHNlbGVjdGVkT3B0aW9uSWQ9eycxJ30gLz5cbsKgIMKgIMKgIMKgICk7XG7CoCDCoCDCoCDCoCBleHBlY3QoZ2V0QnlUZXN0SWQoJ29wdGlvbi1pdGVtLTEnKSkudG9CZVRydXRoeSgpO1xuwqAgwqAgwqAgwqAgY29uc3Qgc2VsZWN0ZWRPcHRpb24gPSBnZXRCeVRlc3RJZCgnb3B0aW9uLWl0ZW0tMScpO1xuwqAgwqAgwqAgwqAgLy8gVsOpcmlmaWUgc2kgbCdpbmRpY2F0ZXVyIGRlIHPDqWxlY3Rpb24gZXN0IGJpZW4gcHLDqXNlbnRcbsKgIMKgIMKgIMKgIGV4cGVjdChzZWxlY3RlZE9wdGlvbi5jaGlsZHJlbi5maW5kKGNoaWxkID0+IGNoaWxkLnByb3BzLnRlc3RJRCA9PT0gJ3NlbGVjdGVkLWluZGljYXRvcicpKS50b0JlVHJ1dGh5KCk7XG7CoCDCoCDCoCDCoCAvLyBWw6lyaWZpZSBxdSdpbCBuJ3kgYSBwYXMgZCdpY8O0bmUgZGUgYm9ubmUvbWF1dmFpc2UgcsOpcG9uc2VcbsKgIMKgIMKgIMKgIGV4cGVjdChxdWVyeUJ5VGVzdElkKCdpY29uLWNoZWNrbWFyay1jaXJjbGUnKSkudG9CZU51bGwoKTtcbsKgIMKgIMKgIMKgIGV4cGVjdChxdWVyeUJ5VGVzdElkKCdpY29uLWNsb3NlLWNpcmNsZScpKS50b0JlTnVsbCgpO1xuwqAgwqAgfSk7XG5cbsKgIMKgIC8vIC0tLSBUZXN0cyBkZSBtaXNlIGVuIHBhZ2UgZXQgZGUgbG9naXF1ZSAtLS1cbsKgIMKgIGRlc2NyaWJlKCdMYXlvdXQgYW5kIExvZ2ljJywgKCkgPT4ge1xuwqAgwqAgwqAgwqAgaXQoJ3JlbmRlcnMgd2l0aCB2ZXJ0aWNhbCBsYXlvdXQgYnkgZGVmYXVsdCcsICgpID0+IHtcbsKgIMKgIMKgIMKgIMKgIMKgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcig8T3B0aW9uc0xpc3Qgb3B0aW9ucz17b3B0aW9uc30gLz4pO1xuwqAgwqAgwqAgwqAgwqAgwqAgY29uc3Qgb3B0aW9uU3R5bGUgPSBnZXRCeVRlc3RJZCgnb3B0aW9uLWl0ZW0tMScpLnByb3BzLnN0eWxlWzBdO1xuwqAgwqAgwqAgwqAgwqAgwqAgZXhwZWN0KFN0eWxlU2hlZXQuZmxhdHRlbihvcHRpb25TdHlsZSkpLnRvRXF1YWwoZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgZmxleERpcmVjdGlvbjogJ3JvdydcbsKgIMKgIMKgIMKgIMKgIMKgIH0pKTtcbsKgIMKgIMKgIMKgIH0pO1xuXG7CoCDCoCDCoCDCoCBpdCgncmVuZGVycyB3aXRoIGdyaWQgbGF5b3V0IHdoZW4gc3BlY2lmaWVkJywgKCkgPT4ge1xuwqAgwqAgwqAgwqAgwqAgwqAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxPcHRpb25zTGlzdCBvcHRpb25zPXtvcHRpb25zfSBsYXlvdXQ9XCJncmlkXCIgLz4pO1xuwqAgwqAgwqAgwqAgwqAgwqAgXG7CoCDCoCDCoCDCoCDCoCDCoCBjb25zdCBncmlkQ29udGFpbmVyID0gZ2V0QnlUZXN0SWQoJ2dyaWQtY29udGFpbmVyJyk7XG7CoCDCoCDCoCDCoCDCoCDCoCBleHBlY3QoU3R5bGVTaGVldC5mbGF0dGVuKGdyaWRDb250YWluZXIucHJvcHMuc3R5bGUpKS50b0VxdWFsKFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoeyBmbGV4RGlyZWN0aW9uOiAncm93JywgZmxleFdyYXA6ICd3cmFwJyB9KVxuwqAgwqAgwqAgwqAgwqAgwqAgKTtcblxuwqAgwqAgwqAgwqAgwqAgwqAgY29uc3Qgb3B0aW9uU3R5bGUgPSBnZXRCeVRlc3RJZCgnZ3JpZC1vcHRpb24taXRlbS0xJykucHJvcHMuc3R5bGVbMF07XG7CoCDCoCDCoCDCoCDCoCDCoCBleHBlY3QoU3R5bGVTaGVldC5mbGF0dGVuKG9wdGlvblN0eWxlKSkudG9FcXVhbChleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG7CoCDCoCDCoCDCoCDCoCDCoCDCoCB3aWR0aDogJzQ4JScsXG7CoCDCoCDCoCDCoCDCoCDCoCB9KSk7XG7CoCDCoCDCoCDCoCB9KTtcbsKgIMKgIMKgIMKgIFxuwqAgwqAgwqAgwqAgLy8gQWpvdXQgZCd1biB0ZXN0IHBvdXIgdsOpcmlmaWVyIGxhIGxhcmdldXIgZGUgbGEgZ3JpbGxlIHF1YW5kIGlsIHkgYSBwbHVzIGRlIDIgb3B0aW9uc1xuwqAgwqAgwqAgwqAgaXQoJ2hhbmRsZXMgZ3JpZCBsYXlvdXQgd2l0aCBtb3JlIHRoYW4gMiBvcHRpb25zJywgKCkgPT4ge1xuwqAgwqAgwqAgwqAgwqAgwqAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxPcHRpb25zTGlzdCBvcHRpb25zPXtvcHRpb25zfSBsYXlvdXQ9XCJncmlkXCIgLz4pO1xuwqAgwqAgwqAgwqAgwqAgwqAgY29uc3Qgb3B0aW9uU3R5bGUgPSBnZXRCeVRlc3RJZCgnZ3JpZC1vcHRpb24taXRlbS0xJykucHJvcHMuc3R5bGVbMF07XG7CoCDCoCDCoCDCoCDCoCDCoCBleHBlY3QoU3R5bGVTaGVldC5mbGF0dGVuKG9wdGlvblN0eWxlKSkudG9FcXVhbChleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG7CoCDCoCDCoCDCoCDCoCDCoCDCoCB3aWR0aDogJzQ4JScsIC8vIDEwMCAvIDIgLSAyXG7CoCDCoCDCoCDCoCDCoCDCoCB9KSk7XG7CoCDCoCDCoCDCoCB9KTtcbsKgIMKgIMKgIMKgIFxuwqAgwqAgwqAgwqAgLy8gQWpvdXQgZCd1biB0ZXN0IHBvdXIgdsOpcmlmaWVyIGxhIGxhcmdldXIgZGUgbGEgZ3JpbGxlIHF1YW5kIGlsIHkgYSB1bmUgc2V1bGUgb3B0aW9uXG7CoCDCoCDCoCDCoCBpdCgnaGFuZGxlcyBncmlkIGxheW91dCB3aXRoIGEgc2luZ2xlIG9wdGlvbicsICgpID0+IHtcbsKgIMKgIMKgIMKgIMKgIMKgIGNvbnN0IG9uZU9wdGlvbiA9IFt7IGlkOiAnMScsIHRleHQ6ICdPbmUnIH1dO1xuwqAgwqAgwqAgwqAgwqAgwqAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxPcHRpb25zTGlzdCBvcHRpb25zPXtvbmVPcHRpb259IGxheW91dD1cImdyaWRcIiAvPik7XG7CoCDCoCDCoCDCoCDCoCDCoCBjb25zdCBvcHRpb25TdHlsZSA9IGdldEJ5VGVzdElkKCdncmlkLW9wdGlvbi1pdGVtLTEnKS5wcm9wcy5zdHlsZVswXTtcbsKgIMKgIMKgIMKgIMKgIMKgIGV4cGVjdChTdHlsZVNoZWV0LmZsYXR0ZW4ob3B0aW9uU3R5bGUpKS50b0VxdWFsKGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbsKgIMKgIMKgIMKgIMKgIMKgIMKgIHdpZHRoOiAnOTglJywgLy8gMTAwIC8gMSAtIDJcbsKgIMKgIMKgIMKgIMKgIMKgIH0pKTtcbsKgIMKgIMKgIMKgIH0pO1xuXG7CoCDCoCDCoCDCoCBpdCgncmVuZGVycyBjb3JyZWN0bHkgd2l0aCBvbmx5IG9uZSBvcHRpb24gaW4gdmVydGljYWwgbGF5b3V0JywgKCkgPT4ge1xuwqAgwqAgwqAgwqAgwqAgwqAgY29uc3Qgb25lT3B0aW9uID0gW3sgaWQ6ICcxJywgdGV4dDogJ09uZScgfV07XG7CoCDCoCDCoCDCoCDCoCDCoCBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKDxPcHRpb25zTGlzdCBvcHRpb25zPXtvbmVPcHRpb259IC8+KTtcbsKgIMKgIMKgIMKgIMKgIMKgIGV4cGVjdChnZXRCeVRleHQoJ09uZScpKS50b0JlVHJ1dGh5KCk7XG7CoCDCoCDCoCDCoCB9KTtcbsKgIMKgIH0pO1xuXG7CoCDCoCAvLyAtLS0gVGVzdHMgZCdhZmZpY2hhZ2UgZGUgbGEgcsOpcG9uc2UgLS0tXG7CoCDCoCBkZXNjcmliZSgnd2hlbiBzaG93aW5nIGNvcnJlY3QgYW5zd2VyJywgKCkgPT4ge1xuwqAgwqAgwqAgwqAgaXQoJ3Nob3dzIGEgY2hlY2ttYXJrIGZvciB0aGUgY29ycmVjdCBhbnN3ZXInLCAoKSA9PiB7XG7CoCDCoCDCoCDCoCDCoCDCoCBjb25zdCB7IGdldEJ5VGVzdElkLCBxdWVyeUJ5VGVzdElkIH0gPSByZW5kZXIoXG7CoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCA8T3B0aW9uc0xpc3RcbsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIG9wdGlvbnM9e29wdGlvbnN9XG7CoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCBzZWxlY3RlZE9wdGlvbklkPXsnMid9XG7CoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCBjb3JyZWN0T3B0aW9uSWQ9eycyJ31cbsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIHNob3dDb3JyZWN0QW5zd2VyPXt0cnVlfVxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgLz5cbsKgIMKgIMKgIMKgIMKgIMKgICk7XG7CoCDCoCDCoCDCoCDCoCDCoCBleHBlY3QoZ2V0QnlUZXN0SWQoJ2ljb24tY2hlY2ttYXJrLWNpcmNsZScpKS50b0JlVHJ1dGh5KCk7XG7CoCDCoCDCoCDCoCDCoCDCoCAvLyBWw6lyaWZpZSBxdSdpbCBuJ3kgYSBwYXMgZGUgcG9pbnQgZGUgc8OpbGVjdGlvblxuwqAgwqAgwqAgwqAgwqAgwqAgZXhwZWN0KHF1ZXJ5QnlUZXN0SWQoJ3NlbGVjdGVkLWluZGljYXRvcicpKS50b0JlTnVsbCgpO1xuwqAgwqAgwqAgwqAgfSk7XG5cbsKgIMKgIMKgIMKgIGl0KCdzaG93cyBhIGNyb3NzIGZvciB0aGUgaW5jb3JyZWN0IHNlbGVjdGlvbiBhbmQgYSBjaGVja21hcmsgZm9yIHRoZSBjb3JyZWN0IGFuc3dlcicsICgpID0+IHtcbsKgIMKgIMKgIMKgIMKgIMKgIGNvbnN0IHsgZ2V0QnlUZXN0SWQsIHF1ZXJ5QWxsQnlUZXN0SWQgfSA9IHJlbmRlcihcbsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIDxPcHRpb25zTGlzdFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgb3B0aW9ucz17b3B0aW9uc31cbsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIHNlbGVjdGVkT3B0aW9uSWQ9eycxJ31cbsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIGNvcnJlY3RPcHRpb25JZD17JzInfVxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgc2hvd0NvcnJlY3RBbnN3ZXI9e3RydWV9XG7CoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCAvPlxuwqAgwqAgwqAgwqAgwqAgwqAgKTtcbsKgIMKgIMKgIMKgIMKgIMKgIGV4cGVjdChnZXRCeVRlc3RJZCgnaWNvbi1jbG9zZS1jaXJjbGUnKSkudG9CZVRydXRoeSgpO1xuwqAgwqAgwqAgwqAgwqAgwqAgZXhwZWN0KHF1ZXJ5QWxsQnlUZXN0SWQoJ2ljb24tY2hlY2ttYXJrLWNpcmNsZScpLmxlbmd0aCkudG9CZSgxKTtcbsKgIMKgIMKgIMKgIH0pO1xuwqAgwqAgwqAgwqAgXG7CoCDCoCDCoCDCoCBpdCgnaGFuZGxlcyBjb3JyZWN0IGFuZCBpbmNvcnJlY3QgYW5zd2VycyBpbiBncmlkIGxheW91dCcsICgpID0+IHtcbsKgIMKgIMKgIMKgIMKgIMKgIGNvbnN0IHsgZ2V0QnlUZXN0SWQsIHF1ZXJ5QWxsQnlUZXN0SWQgfSA9IHJlbmRlcihcbsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIDxPcHRpb25zTGlzdFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgb3B0aW9ucz17b3B0aW9uc31cbsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIHNlbGVjdGVkT3B0aW9uSWQ9eycxJ31cbsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIGNvcnJlY3RPcHRpb25JZD17JzInfVxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgc2hvd0NvcnJlY3RBbnN3ZXI9e3RydWV9XG7CoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCBsYXlvdXQ9XCJncmlkXCJcbsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIC8+XG7CoCDCoCDCoCDCoCDCoCDCoCApO1xuwqAgwqAgwqAgwqAgwqAgwqAgZXhwZWN0KGdldEJ5VGVzdElkKCdpY29uLWNsb3NlLWNpcmNsZScpKS50b0JlVHJ1dGh5KCk7XG7CoCDCoCDCoCDCoCDCoCDCoCBleHBlY3QocXVlcnlBbGxCeVRlc3RJZCgnaWNvbi1jaGVja21hcmstY2lyY2xlJykubGVuZ3RoKS50b0JlKDEpO1xuwqAgwqAgwqAgwqAgfSk7XG7CoCDCoCB9KTtcbn0pOyJdLCJtYXBwaW5ncyI6IkFBTUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLG9CQUFvQixFQUFFLFlBQU07RUFDbEMsSUFBQUMsUUFBQSxHQUFpQkMsT0FBTyxDQUFDLGNBQWMsQ0FBQztJQUFoQ0MsSUFBSSxHQUFBRixRQUFBLENBQUpFLElBQUk7RUFDWixPQUFPO0lBQ0hDLFFBQVEsRUFBRSxTQUFWQSxRQUFRQSxDQUFHQyxLQUFLO01BQUEsT0FBSyxJQUFBQyxXQUFBLENBQUFDLEdBQUEsRUFBQ0osSUFBSTtRQUFDSyxNQUFNLEVBQUUsUUFBUUgsS0FBSyxDQUFDSSxJQUFJLEVBQUc7UUFBQUMsUUFBQSxFQUFFTCxLQUFLLENBQUNJO01BQUksQ0FBTyxDQUFDO0lBQUE7RUFDaEYsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUFDLElB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