30cea1129c6287f2e4eaa68dc8044290
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _native = require("@react-navigation/native");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _Container = _interopRequireDefault(require("../../../components/layout/Container"));
var _SpellingHeader = _interopRequireDefault(require("./SpellingHeader"));
var _SpellingProgress = _interopRequireDefault(require("./SpellingProgress"));
var _SpellingCard = _interopRequireDefault(require("./SpellingCard"));
var _SpellingActions = _interopRequireDefault(require("./SpellingActions"));
var _useSpelling2 = _interopRequireDefault(require("./hooks/useSpelling"));
var _useLastActivity2 = _interopRequireDefault(require("../../../hooks/useLastActivity"));
var _spellingDataHelper = require("../../../utils/spelling/spellingDataHelper");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var SpellingExercise = function SpellingExercise(_ref) {
  var route = _ref.route;
  var _ref2 = route.params || {},
    _ref2$level = _ref2.level,
    level = _ref2$level === void 0 ? "1" : _ref2$level,
    _ref2$exerciseType = _ref2.exerciseType,
    exerciseType = _ref2$exerciseType === void 0 ? "correction" : _ref2$exerciseType;
  var navigation = (0, _native.useNavigation)();
  var styles = (0, _style.default)();
  var _useLastActivity = (0, _useLastActivity2.default)(),
    saveActivity = _useLastActivity.saveActivity;
  var levelColor = (0, _spellingDataHelper.getLevelColor)(level);
  var getExerciseTypeName = function getExerciseTypeName() {
    if (exerciseType === "correction") return "Correction";
    if (exerciseType === "rules") return "RÃ¨gles";
    return "Homophones";
  };
  var exerciseTypeName = getExerciseTypeName();
  var spellingData = (0, _react.useMemo)(function () {
    try {
      return (0, _spellingDataHelper.getSpellingData)(level, exerciseType);
    } catch (error) {
      console.warn(`Error getting spelling data for level ${level}, type ${exerciseType}:`, error);
      return null;
    }
  }, [level, exerciseType]);
  var _useSpelling = (0, _useSpelling2.default)(spellingData, level, exerciseType),
    currentExerciseIndex = _useSpelling.currentExerciseIndex,
    userInput = _useSpelling.userInput,
    showHint = _useSpelling.showHint,
    showFeedback = _useSpelling.showFeedback,
    isCorrect = _useSpelling.isCorrect,
    loaded = _useSpelling.loaded,
    currentExercise = _useSpelling.currentExercise,
    totalExercises = _useSpelling.totalExercises,
    setUserInput = _useSpelling.setUserInput,
    toggleHint = _useSpelling.toggleHint,
    checkAnswer = _useSpelling.checkAnswer,
    handleNext = _useSpelling.handleNext,
    retryExercise = _useSpelling.retryExercise,
    isLastExercise = _useSpelling.isLastExercise,
    hasValidData = _useSpelling.hasValidData;
  (0, _react.useEffect)(function () {
    if (loaded && hasValidData && currentExercise) {
      try {
        saveActivity({
          title: `Orthographe ${exerciseTypeName}`,
          level: level,
          type: "spelling",
          metadata: {
            word: currentExerciseIndex,
            totalWords: totalExercises,
            exerciseType: exerciseType,
            content: currentExercise.wordToCorrect || `Exercice ${currentExerciseIndex + 1}`
          }
        });
      } catch (error) {
        console.error("Error saving activity:", error);
      }
    }
  }, [loaded, hasValidData, currentExercise, level, exerciseType, currentExerciseIndex, totalExercises, saveActivity]);
  var handleBack = (0, _react.useCallback)(function () {
    return navigation.goBack();
  }, [navigation]);
  if (!loaded) {
    return (0, _jsxRuntime.jsxs)(_Container.default, {
      children: [(0, _jsxRuntime.jsx)(_SpellingHeader.default, {
        title: `Orthographe ${exerciseTypeName}`,
        level: level,
        levelColor: levelColor,
        onBack: handleBack
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.loadingContainer,
        children: [(0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
          size: "large",
          color: levelColor,
          testID: "activity-indicator"
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.loadingText,
          children: "Chargement des exercices..."
        })]
      })]
    });
  }
  if (!hasValidData) {
    return (0, _jsxRuntime.jsxs)(_Container.default, {
      children: [(0, _jsxRuntime.jsx)(_SpellingHeader.default, {
        title: `Orthographe ${exerciseTypeName}`,
        level: level,
        levelColor: levelColor,
        onBack: handleBack
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.errorContainer,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.errorText,
          children: "Aucune donn\xE9e trouv\xE9e pour ce niveau."
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.errorText,
          children: "Veuillez r\xE9essayer plus tard."
        })]
      })]
    });
  }
  return (0, _jsxRuntime.jsxs)(_Container.default, {
    children: [(0, _jsxRuntime.jsx)(_SpellingHeader.default, {
      title: `Orthographe ${exerciseTypeName}`,
      level: level,
      levelColor: levelColor,
      onBack: handleBack
    }), (0, _jsxRuntime.jsx)(_SpellingProgress.default, {
      currentExerciseIndex: currentExerciseIndex + 1,
      totalExercises: totalExercises,
      levelColor: levelColor
    }), (0, _jsxRuntime.jsx)(_SpellingCard.default, {
      currentExercise: currentExercise,
      userInput: userInput,
      showHint: showHint,
      showFeedback: showFeedback,
      isCorrect: isCorrect,
      onUserInputChange: setUserInput,
      onHintToggle: toggleHint,
      onCheckAnswer: checkAnswer,
      onNext: handleNext,
      onRetry: retryExercise,
      isLastExercise: isLastExercise,
      levelColor: levelColor
    }), (0, _jsxRuntime.jsx)(_SpellingActions.default, {
      isCorrect: isCorrect,
      onNext: handleNext,
      onRetry: retryExercise,
      isLastExercise: isLastExercise,
      levelColor: levelColor
    })]
  });
};
var _default = exports.default = SpellingExercise;
SpellingExercise.propTypes = {
  route: _propTypes.default.shape({
    params: _propTypes.default.shape({
      level: _propTypes.default.string,
      exerciseType: _propTypes.default.string
    })
  }).isRequired
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlIiwiX25hdGl2ZSIsIl9wcm9wVHlwZXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX0NvbnRhaW5lciIsIl9TcGVsbGluZ0hlYWRlciIsIl9TcGVsbGluZ1Byb2dyZXNzIiwiX1NwZWxsaW5nQ2FyZCIsIl9TcGVsbGluZ0FjdGlvbnMiLCJfdXNlU3BlbGxpbmcyIiwiX3VzZUxhc3RBY3Rpdml0eTIiLCJfc3BlbGxpbmdEYXRhSGVscGVyIiwiX3N0eWxlIiwiX2pzeFJ1bnRpbWUiLCJTcGVsbGluZ0V4ZXJjaXNlIiwiX3JlZiIsInJvdXRlIiwiX3JlZjIiLCJwYXJhbXMiLCJfcmVmMiRsZXZlbCIsImxldmVsIiwiX3JlZjIkZXhlcmNpc2VUeXBlIiwiZXhlcmNpc2VUeXBlIiwibmF2aWdhdGlvbiIsInVzZU5hdmlnYXRpb24iLCJzdHlsZXMiLCJjcmVhdGVTdHlsZXMiLCJfdXNlTGFzdEFjdGl2aXR5IiwidXNlTGFzdEFjdGl2aXR5Iiwic2F2ZUFjdGl2aXR5IiwibGV2ZWxDb2xvciIsImdldExldmVsQ29sb3IiLCJnZXRFeGVyY2lzZVR5cGVOYW1lIiwiZXhlcmNpc2VUeXBlTmFtZSIsInNwZWxsaW5nRGF0YSIsInVzZU1lbW8iLCJnZXRTcGVsbGluZ0RhdGEiLCJlcnJvciIsImNvbnNvbGUiLCJ3YXJuIiwiX3VzZVNwZWxsaW5nIiwidXNlU3BlbGxpbmciLCJjdXJyZW50RXhlcmNpc2VJbmRleCIsInVzZXJJbnB1dCIsInNob3dIaW50Iiwic2hvd0ZlZWRiYWNrIiwiaXNDb3JyZWN0IiwibG9hZGVkIiwiY3VycmVudEV4ZXJjaXNlIiwidG90YWxFeGVyY2lzZXMiLCJzZXRVc2VySW5wdXQiLCJ0b2dnbGVIaW50IiwiY2hlY2tBbnN3ZXIiLCJoYW5kbGVOZXh0IiwicmV0cnlFeGVyY2lzZSIsImlzTGFzdEV4ZXJjaXNlIiwiaGFzVmFsaWREYXRhIiwidXNlRWZmZWN0IiwidGl0bGUiLCJ0eXBlIiwibWV0YWRhdGEiLCJ3b3JkIiwidG90YWxXb3JkcyIsImNvbnRlbnQiLCJ3b3JkVG9Db3JyZWN0IiwiaGFuZGxlQmFjayIsInVzZUNhbGxiYWNrIiwiZ29CYWNrIiwianN4cyIsImRlZmF1bHQiLCJjaGlsZHJlbiIsImpzeCIsIm9uQmFjayIsIlZpZXciLCJzdHlsZSIsImxvYWRpbmdDb250YWluZXIiLCJBY3Rpdml0eUluZGljYXRvciIsInNpemUiLCJjb2xvciIsInRlc3RJRCIsIlRleHQiLCJsb2FkaW5nVGV4dCIsImVycm9yQ29udGFpbmVyIiwiZXJyb3JUZXh0Iiwib25Vc2VySW5wdXRDaGFuZ2UiLCJvbkhpbnRUb2dnbGUiLCJvbkNoZWNrQW5zd2VyIiwib25OZXh0Iiwib25SZXRyeSIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsInNoYXBlIiwic3RyaW5nIiwiaXNSZXF1aXJlZCJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNwZWxsaW5nRXhlcmNpc2UvaW5kZXguanMgLSBWRVJTSU9OIFBST1BSRVxyXG5cclxuaW1wb3J0IHsgdXNlTWVtbywgdXNlRWZmZWN0LCB1c2VDYWxsYmFjayB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBWaWV3LCBBY3Rpdml0eUluZGljYXRvciwgVGV4dCB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcclxuaW1wb3J0IHsgdXNlTmF2aWdhdGlvbiB9IGZyb20gXCJAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmVcIjtcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuXHJcbmltcG9ydCBDb250YWluZXIgZnJvbSBcIi4uLy4uLy4uL2NvbXBvbmVudHMvbGF5b3V0L0NvbnRhaW5lclwiO1xyXG5pbXBvcnQgU3BlbGxpbmdIZWFkZXIgZnJvbSBcIi4vU3BlbGxpbmdIZWFkZXJcIjtcclxuaW1wb3J0IFNwZWxsaW5nUHJvZ3Jlc3MgZnJvbSBcIi4vU3BlbGxpbmdQcm9ncmVzc1wiO1xyXG5pbXBvcnQgU3BlbGxpbmdDYXJkIGZyb20gXCIuL1NwZWxsaW5nQ2FyZFwiO1xyXG5pbXBvcnQgU3BlbGxpbmdBY3Rpb25zIGZyb20gXCIuL1NwZWxsaW5nQWN0aW9uc1wiO1xyXG5cclxuaW1wb3J0IHVzZVNwZWxsaW5nIGZyb20gXCIuL2hvb2tzL3VzZVNwZWxsaW5nXCI7XHJcbmltcG9ydCB1c2VMYXN0QWN0aXZpdHkgZnJvbSBcIi4uLy4uLy4uL2hvb2tzL3VzZUxhc3RBY3Rpdml0eVwiO1xyXG5pbXBvcnQgeyBnZXRTcGVsbGluZ0RhdGEsIGdldExldmVsQ29sb3IgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvc3BlbGxpbmcvc3BlbGxpbmdEYXRhSGVscGVyXCI7XHJcbmltcG9ydCBjcmVhdGVTdHlsZXMgZnJvbSBcIi4vc3R5bGVcIjtcclxuXHJcbmNvbnN0IFNwZWxsaW5nRXhlcmNpc2UgPSAoeyByb3V0ZSB9KSA9PiB7XHJcbiAgY29uc3QgeyBsZXZlbCA9IFwiMVwiLCBleGVyY2lzZVR5cGUgPSBcImNvcnJlY3Rpb25cIiB9ID0gcm91dGUucGFyYW1zIHx8IHt9O1xyXG4gIGNvbnN0IG5hdmlnYXRpb24gPSB1c2VOYXZpZ2F0aW9uKCk7XHJcbiAgY29uc3Qgc3R5bGVzID0gY3JlYXRlU3R5bGVzKCk7XHJcbiAgY29uc3QgeyBzYXZlQWN0aXZpdHkgfSA9IHVzZUxhc3RBY3Rpdml0eSgpO1xyXG5cclxuICBjb25zdCBsZXZlbENvbG9yID0gZ2V0TGV2ZWxDb2xvcihsZXZlbCk7XHJcblxyXG4gIC8vIOKchSBFeHRyYWN0aW9uIGRlIGxhIGxvZ2lxdWUgY29uZGl0aW9ubmVsbGUgcG91ciBhbcOpbGlvcmVyIGxhIGxpc2liaWxpdMOpXHJcbiAgY29uc3QgZ2V0RXhlcmNpc2VUeXBlTmFtZSA9ICgpID0+IHtcclxuICAgIGlmIChleGVyY2lzZVR5cGUgPT09IFwiY29ycmVjdGlvblwiKSByZXR1cm4gXCJDb3JyZWN0aW9uXCI7XHJcbiAgICBpZiAoZXhlcmNpc2VUeXBlID09PSBcInJ1bGVzXCIpIHJldHVybiBcIlLDqGdsZXNcIjtcclxuICAgIHJldHVybiBcIkhvbW9waG9uZXNcIjtcclxuICB9O1xyXG4gIFxyXG4gIC8vIETDqWZpbmlyIGV4ZXJjaXNlVHlwZU5hbWUgcG91ciB0b3V0IGxlIGNvbXBvc2FudFxyXG4gIGNvbnN0IGV4ZXJjaXNlVHlwZU5hbWUgPSBnZXRFeGVyY2lzZVR5cGVOYW1lKCk7XHJcbiAgXHJcbiAgY29uc3Qgc3BlbGxpbmdEYXRhID0gdXNlTWVtbygoKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICByZXR1cm4gZ2V0U3BlbGxpbmdEYXRhKGxldmVsLCBleGVyY2lzZVR5cGUpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgLy8g4pyFIEdlc3Rpb24gZCdlcnJldXIgYXBwcm9wcmnDqWVcclxuICAgICAgY29uc29sZS53YXJuKGBFcnJvciBnZXR0aW5nIHNwZWxsaW5nIGRhdGEgZm9yIGxldmVsICR7bGV2ZWx9LCB0eXBlICR7ZXhlcmNpc2VUeXBlfTpgLCBlcnJvcik7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gIH0sIFtsZXZlbCwgZXhlcmNpc2VUeXBlXSk7XHJcblxyXG4gIGNvbnN0IHtcclxuICAgIGN1cnJlbnRFeGVyY2lzZUluZGV4LFxyXG4gICAgdXNlcklucHV0LFxyXG4gICAgc2hvd0hpbnQsXHJcbiAgICBzaG93RmVlZGJhY2ssXHJcbiAgICBpc0NvcnJlY3QsXHJcbiAgICBsb2FkZWQsXHJcbiAgICBjdXJyZW50RXhlcmNpc2UsXHJcbiAgICB0b3RhbEV4ZXJjaXNlcyxcclxuICAgIHNldFVzZXJJbnB1dCxcclxuICAgIHRvZ2dsZUhpbnQsXHJcbiAgICBjaGVja0Fuc3dlcixcclxuICAgIGhhbmRsZU5leHQsXHJcbiAgICByZXRyeUV4ZXJjaXNlLFxyXG4gICAgaXNMYXN0RXhlcmNpc2UsXHJcbiAgICBoYXNWYWxpZERhdGEsXHJcbiAgfSA9IHVzZVNwZWxsaW5nKHNwZWxsaW5nRGF0YSwgbGV2ZWwsIGV4ZXJjaXNlVHlwZSk7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAobG9hZGVkICYmIGhhc1ZhbGlkRGF0YSAmJiBjdXJyZW50RXhlcmNpc2UpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBzYXZlQWN0aXZpdHkoe1xyXG4gICAgICAgICAgdGl0bGU6IGBPcnRob2dyYXBoZSAke2V4ZXJjaXNlVHlwZU5hbWV9YCxcclxuICAgICAgICAgIGxldmVsLFxyXG4gICAgICAgICAgdHlwZTogXCJzcGVsbGluZ1wiLFxyXG4gICAgICAgICAgbWV0YWRhdGE6IHtcclxuICAgICAgICAgICAgd29yZDogY3VycmVudEV4ZXJjaXNlSW5kZXgsICAgICAgICAgICAvLyDinIUgSW5kZXggYWN0dWVsIChwb3VyIHByb2dyZXNzaW9uKVxyXG4gICAgICAgICAgICB0b3RhbFdvcmRzOiB0b3RhbEV4ZXJjaXNlcywgICAgICAgICAgIC8vIOKchSBUb3RhbCAocG91ciBwcm9ncmVzc2lvbilcclxuICAgICAgICAgICAgZXhlcmNpc2VUeXBlLFxyXG4gICAgICAgICAgICBjb250ZW50OiBjdXJyZW50RXhlcmNpc2Uud29yZFRvQ29ycmVjdCB8fCBgRXhlcmNpY2UgJHtjdXJyZW50RXhlcmNpc2VJbmRleCArIDF9YCAvLyDinIUgQ29udGVudSBkZSBsJ2V4ZXJjaWNlXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHNhdmluZyBhY3Rpdml0eTpcIiwgZXJyb3IpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSwgW2xvYWRlZCwgaGFzVmFsaWREYXRhLCBjdXJyZW50RXhlcmNpc2UsIGxldmVsLCBleGVyY2lzZVR5cGUsIGN1cnJlbnRFeGVyY2lzZUluZGV4LCB0b3RhbEV4ZXJjaXNlcywgc2F2ZUFjdGl2aXR5XSk7XHJcblxyXG4gIGNvbnN0IGhhbmRsZUJhY2sgPSB1c2VDYWxsYmFjaygoKSA9PiBuYXZpZ2F0aW9uLmdvQmFjaygpLCBbbmF2aWdhdGlvbl0pO1xyXG5cclxuICBpZiAoIWxvYWRlZCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPENvbnRhaW5lcj5cclxuICAgICAgICA8U3BlbGxpbmdIZWFkZXJcclxuICAgICAgICAgIHRpdGxlPXtgT3J0aG9ncmFwaGUgJHtleGVyY2lzZVR5cGVOYW1lfWB9XHJcbiAgICAgICAgICBsZXZlbD17bGV2ZWx9XHJcbiAgICAgICAgICBsZXZlbENvbG9yPXtsZXZlbENvbG9yfVxyXG4gICAgICAgICAgb25CYWNrPXtoYW5kbGVCYWNrfVxyXG4gICAgICAgIC8+XHJcbiAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5sb2FkaW5nQ29udGFpbmVyfT5cclxuICAgICAgICAgIDxBY3Rpdml0eUluZGljYXRvciBzaXplPVwibGFyZ2VcIiBjb2xvcj17bGV2ZWxDb2xvcn0gdGVzdElEPVwiYWN0aXZpdHktaW5kaWNhdG9yXCIgLz5cclxuICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMubG9hZGluZ1RleHR9PkNoYXJnZW1lbnQgZGVzIGV4ZXJjaWNlcy4uLjwvVGV4dD5cclxuICAgICAgICA8L1ZpZXc+XHJcbiAgICAgIDwvQ29udGFpbmVyPlxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGlmICghaGFzVmFsaWREYXRhKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8Q29udGFpbmVyPlxyXG4gICAgICAgIDxTcGVsbGluZ0hlYWRlclxyXG4gICAgICAgICAgdGl0bGU9e2BPcnRob2dyYXBoZSAke2V4ZXJjaXNlVHlwZU5hbWV9YH1cclxuICAgICAgICAgIGxldmVsPXtsZXZlbH1cclxuICAgICAgICAgIGxldmVsQ29sb3I9e2xldmVsQ29sb3J9XHJcbiAgICAgICAgICBvbkJhY2s9e2hhbmRsZUJhY2t9XHJcbiAgICAgICAgLz5cclxuICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmVycm9yQ29udGFpbmVyfT5cclxuICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMuZXJyb3JUZXh0fT5BdWN1bmUgZG9ubsOpZSB0cm91dsOpZSBwb3VyIGNlIG5pdmVhdS48L1RleHQ+XHJcbiAgICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLmVycm9yVGV4dH0+VmV1aWxsZXogcsOpZXNzYXllciBwbHVzIHRhcmQuPC9UZXh0PlxyXG4gICAgICAgIDwvVmlldz5cclxuICAgICAgPC9Db250YWluZXI+XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxDb250YWluZXI+XHJcbiAgICAgIDxTcGVsbGluZ0hlYWRlclxyXG4gICAgICAgIHRpdGxlPXtgT3J0aG9ncmFwaGUgJHtleGVyY2lzZVR5cGVOYW1lfWB9XHJcbiAgICAgICAgbGV2ZWw9e2xldmVsfVxyXG4gICAgICAgIGxldmVsQ29sb3I9e2xldmVsQ29sb3J9XHJcbiAgICAgICAgb25CYWNrPXtoYW5kbGVCYWNrfVxyXG4gICAgICAvPlxyXG4gICAgICA8U3BlbGxpbmdQcm9ncmVzc1xyXG4gICAgICAgIGN1cnJlbnRFeGVyY2lzZUluZGV4PXtjdXJyZW50RXhlcmNpc2VJbmRleCArIDF9XHJcbiAgICAgICAgdG90YWxFeGVyY2lzZXM9e3RvdGFsRXhlcmNpc2VzfVxyXG4gICAgICAgIGxldmVsQ29sb3I9e2xldmVsQ29sb3J9XHJcbiAgICAgIC8+XHJcbiAgICAgIDxTcGVsbGluZ0NhcmRcclxuICAgICAgICBjdXJyZW50RXhlcmNpc2U9e2N1cnJlbnRFeGVyY2lzZX1cclxuICAgICAgICB1c2VySW5wdXQ9e3VzZXJJbnB1dH1cclxuICAgICAgICBzaG93SGludD17c2hvd0hpbnR9XHJcbiAgICAgICAgc2hvd0ZlZWRiYWNrPXtzaG93RmVlZGJhY2t9XHJcbiAgICAgICAgaXNDb3JyZWN0PXtpc0NvcnJlY3R9XHJcbiAgICAgICAgb25Vc2VySW5wdXRDaGFuZ2U9e3NldFVzZXJJbnB1dH1cclxuICAgICAgICBvbkhpbnRUb2dnbGU9e3RvZ2dsZUhpbnR9XHJcbiAgICAgICAgb25DaGVja0Fuc3dlcj17Y2hlY2tBbnN3ZXJ9XHJcbiAgICAgICAgb25OZXh0PXtoYW5kbGVOZXh0fVxyXG4gICAgICAgIG9uUmV0cnk9e3JldHJ5RXhlcmNpc2V9XHJcbiAgICAgICAgaXNMYXN0RXhlcmNpc2U9e2lzTGFzdEV4ZXJjaXNlfVxyXG4gICAgICAgIGxldmVsQ29sb3I9e2xldmVsQ29sb3J9XHJcbiAgICAgIC8+XHJcbiAgICAgIDxTcGVsbGluZ0FjdGlvbnNcclxuICAgICAgICBpc0NvcnJlY3Q9e2lzQ29ycmVjdH1cclxuICAgICAgICBvbk5leHQ9e2hhbmRsZU5leHR9XHJcbiAgICAgICAgb25SZXRyeT17cmV0cnlFeGVyY2lzZX1cclxuICAgICAgICBpc0xhc3RFeGVyY2lzZT17aXNMYXN0RXhlcmNpc2V9XHJcbiAgICAgICAgbGV2ZWxDb2xvcj17bGV2ZWxDb2xvcn1cclxuICAgICAgLz5cclxuICAgIDwvQ29udGFpbmVyPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTcGVsbGluZ0V4ZXJjaXNlO1xyXG5cclxuLy8g4pyFIEFqb3V0IGRlIGxhIHZhbGlkYXRpb24gZGVzIHByb3BzXHJcblNwZWxsaW5nRXhlcmNpc2UucHJvcFR5cGVzID0ge1xyXG4gIHJvdXRlOiBQcm9wVHlwZXMuc2hhcGUoe1xyXG4gICAgcGFyYW1zOiBQcm9wVHlwZXMuc2hhcGUoe1xyXG4gICAgICBsZXZlbDogUHJvcFR5cGVzLnN0cmluZyxcclxuICAgICAgZXhlcmNpc2VUeXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gICAgfSksXHJcbiAgfSkuaXNSZXF1aXJlZCxcclxufTsiXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsT0FBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsVUFBQSxHQUFBQyxzQkFBQSxDQUFBSixPQUFBO0FBRUEsSUFBQUssVUFBQSxHQUFBRCxzQkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQU0sZUFBQSxHQUFBRixzQkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQU8saUJBQUEsR0FBQUgsc0JBQUEsQ0FBQUosT0FBQTtBQUNBLElBQUFRLGFBQUEsR0FBQUosc0JBQUEsQ0FBQUosT0FBQTtBQUNBLElBQUFTLGdCQUFBLEdBQUFMLHNCQUFBLENBQUFKLE9BQUE7QUFFQSxJQUFBVSxhQUFBLEdBQUFOLHNCQUFBLENBQUFKLE9BQUE7QUFDQSxJQUFBVyxpQkFBQSxHQUFBUCxzQkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQVksbUJBQUEsR0FBQVosT0FBQTtBQUNBLElBQUFhLE1BQUEsR0FBQVQsc0JBQUEsQ0FBQUosT0FBQTtBQUFtQyxJQUFBYyxXQUFBLEdBQUFkLE9BQUE7QUFFbkMsSUFBTWUsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFnQkEsQ0FBQUMsSUFBQSxFQUFrQjtFQUFBLElBQVpDLEtBQUssR0FBQUQsSUFBQSxDQUFMQyxLQUFLO0VBQy9CLElBQUFDLEtBQUEsR0FBcURELEtBQUssQ0FBQ0UsTUFBTSxJQUFJLENBQUMsQ0FBQztJQUFBQyxXQUFBLEdBQUFGLEtBQUEsQ0FBL0RHLEtBQUs7SUFBTEEsS0FBSyxHQUFBRCxXQUFBLGNBQUcsR0FBRyxHQUFBQSxXQUFBO0lBQUFFLGtCQUFBLEdBQUFKLEtBQUEsQ0FBRUssWUFBWTtJQUFaQSxZQUFZLEdBQUFELGtCQUFBLGNBQUcsWUFBWSxHQUFBQSxrQkFBQTtFQUNoRCxJQUFNRSxVQUFVLEdBQUcsSUFBQUMscUJBQWEsRUFBQyxDQUFDO0VBQ2xDLElBQU1DLE1BQU0sR0FBRyxJQUFBQyxjQUFZLEVBQUMsQ0FBQztFQUM3QixJQUFBQyxnQkFBQSxHQUF5QixJQUFBQyx5QkFBZSxFQUFDLENBQUM7SUFBbENDLFlBQVksR0FBQUYsZ0JBQUEsQ0FBWkUsWUFBWTtFQUVwQixJQUFNQyxVQUFVLEdBQUcsSUFBQUMsaUNBQWEsRUFBQ1gsS0FBSyxDQUFDO0VBR3ZDLElBQU1ZLG1CQUFtQixHQUFHLFNBQXRCQSxtQkFBbUJBLENBQUEsRUFBUztJQUNoQyxJQUFJVixZQUFZLEtBQUssWUFBWSxFQUFFLE9BQU8sWUFBWTtJQUN0RCxJQUFJQSxZQUFZLEtBQUssT0FBTyxFQUFFLE9BQU8sUUFBUTtJQUM3QyxPQUFPLFlBQVk7RUFDckIsQ0FBQztFQUdELElBQU1XLGdCQUFnQixHQUFHRCxtQkFBbUIsQ0FBQyxDQUFDO0VBRTlDLElBQU1FLFlBQVksR0FBRyxJQUFBQyxjQUFPLEVBQUMsWUFBTTtJQUNqQyxJQUFJO01BQ0YsT0FBTyxJQUFBQyxtQ0FBZSxFQUFDaEIsS0FBSyxFQUFFRSxZQUFZLENBQUM7SUFDN0MsQ0FBQyxDQUFDLE9BQU9lLEtBQUssRUFBRTtNQUVkQyxPQUFPLENBQUNDLElBQUksQ0FBQyx5Q0FBeUNuQixLQUFLLFVBQVVFLFlBQVksR0FBRyxFQUFFZSxLQUFLLENBQUM7TUFDNUYsT0FBTyxJQUFJO0lBQ2I7RUFDRixDQUFDLEVBQUUsQ0FBQ2pCLEtBQUssRUFBRUUsWUFBWSxDQUFDLENBQUM7RUFFekIsSUFBQWtCLFlBQUEsR0FnQkksSUFBQUMscUJBQVcsRUFBQ1AsWUFBWSxFQUFFZCxLQUFLLEVBQUVFLFlBQVksQ0FBQztJQWZoRG9CLG9CQUFvQixHQUFBRixZQUFBLENBQXBCRSxvQkFBb0I7SUFDcEJDLFNBQVMsR0FBQUgsWUFBQSxDQUFURyxTQUFTO0lBQ1RDLFFBQVEsR0FBQUosWUFBQSxDQUFSSSxRQUFRO0lBQ1JDLFlBQVksR0FBQUwsWUFBQSxDQUFaSyxZQUFZO0lBQ1pDLFNBQVMsR0FBQU4sWUFBQSxDQUFUTSxTQUFTO0lBQ1RDLE1BQU0sR0FBQVAsWUFBQSxDQUFOTyxNQUFNO0lBQ05DLGVBQWUsR0FBQVIsWUFBQSxDQUFmUSxlQUFlO0lBQ2ZDLGNBQWMsR0FBQVQsWUFBQSxDQUFkUyxjQUFjO0lBQ2RDLFlBQVksR0FBQVYsWUFBQSxDQUFaVSxZQUFZO0lBQ1pDLFVBQVUsR0FBQVgsWUFBQSxDQUFWVyxVQUFVO0lBQ1ZDLFdBQVcsR0FBQVosWUFBQSxDQUFYWSxXQUFXO0lBQ1hDLFVBQVUsR0FBQWIsWUFBQSxDQUFWYSxVQUFVO0lBQ1ZDLGFBQWEsR0FBQWQsWUFBQSxDQUFiYyxhQUFhO0lBQ2JDLGNBQWMsR0FBQWYsWUFBQSxDQUFkZSxjQUFjO0lBQ2RDLFlBQVksR0FBQWhCLFlBQUEsQ0FBWmdCLFlBQVk7RUFHZCxJQUFBQyxnQkFBUyxFQUFDLFlBQU07SUFDZCxJQUFJVixNQUFNLElBQUlTLFlBQVksSUFBSVIsZUFBZSxFQUFFO01BQzdDLElBQUk7UUFDRm5CLFlBQVksQ0FBQztVQUNYNkIsS0FBSyxFQUFFLGVBQWV6QixnQkFBZ0IsRUFBRTtVQUN4Q2IsS0FBSyxFQUFMQSxLQUFLO1VBQ0x1QyxJQUFJLEVBQUUsVUFBVTtVQUNoQkMsUUFBUSxFQUFFO1lBQ1JDLElBQUksRUFBRW5CLG9CQUFvQjtZQUMxQm9CLFVBQVUsRUFBRWIsY0FBYztZQUMxQjNCLFlBQVksRUFBWkEsWUFBWTtZQUNaeUMsT0FBTyxFQUFFZixlQUFlLENBQUNnQixhQUFhLElBQUksWUFBWXRCLG9CQUFvQixHQUFHLENBQUM7VUFDaEY7UUFDRixDQUFDLENBQUM7TUFDSixDQUFDLENBQUMsT0FBT0wsS0FBSyxFQUFFO1FBQ2RDLE9BQU8sQ0FBQ0QsS0FBSyxDQUFDLHdCQUF3QixFQUFFQSxLQUFLLENBQUM7TUFDaEQ7SUFDRjtFQUNGLENBQUMsRUFBRSxDQUFDVSxNQUFNLEVBQUVTLFlBQVksRUFBRVIsZUFBZSxFQUFFNUIsS0FBSyxFQUFFRSxZQUFZLEVBQUVvQixvQkFBb0IsRUFBRU8sY0FBYyxFQUFFcEIsWUFBWSxDQUFDLENBQUM7RUFFcEgsSUFBTW9DLFVBQVUsR0FBRyxJQUFBQyxrQkFBVyxFQUFDO0lBQUEsT0FBTTNDLFVBQVUsQ0FBQzRDLE1BQU0sQ0FBQyxDQUFDO0VBQUEsR0FBRSxDQUFDNUMsVUFBVSxDQUFDLENBQUM7RUFFdkUsSUFBSSxDQUFDd0IsTUFBTSxFQUFFO0lBQ1gsT0FDRSxJQUFBbEMsV0FBQSxDQUFBdUQsSUFBQSxFQUFDaEUsVUFBQSxDQUFBaUUsT0FBUztNQUFBQyxRQUFBLEdBQ1IsSUFBQXpELFdBQUEsQ0FBQTBELEdBQUEsRUFBQ2xFLGVBQUEsQ0FBQWdFLE9BQWM7UUFDYlgsS0FBSyxFQUFFLGVBQWV6QixnQkFBZ0IsRUFBRztRQUN6Q2IsS0FBSyxFQUFFQSxLQUFNO1FBQ2JVLFVBQVUsRUFBRUEsVUFBVztRQUN2QjBDLE1BQU0sRUFBRVA7TUFBVyxDQUNwQixDQUFDLEVBQ0YsSUFBQXBELFdBQUEsQ0FBQXVELElBQUEsRUFBQ3BFLFlBQUEsQ0FBQXlFLElBQUk7UUFBQ0MsS0FBSyxFQUFFakQsTUFBTSxDQUFDa0QsZ0JBQWlCO1FBQUFMLFFBQUEsR0FDbkMsSUFBQXpELFdBQUEsQ0FBQTBELEdBQUEsRUFBQ3ZFLFlBQUEsQ0FBQTRFLGlCQUFpQjtVQUFDQyxJQUFJLEVBQUMsT0FBTztVQUFDQyxLQUFLLEVBQUVoRCxVQUFXO1VBQUNpRCxNQUFNLEVBQUM7UUFBb0IsQ0FBRSxDQUFDLEVBQ2pGLElBQUFsRSxXQUFBLENBQUEwRCxHQUFBLEVBQUN2RSxZQUFBLENBQUFnRixJQUFJO1VBQUNOLEtBQUssRUFBRWpELE1BQU0sQ0FBQ3dELFdBQVk7VUFBQVgsUUFBQSxFQUFDO1FBQTJCLENBQU0sQ0FBQztNQUFBLENBQy9ELENBQUM7SUFBQSxDQUNFLENBQUM7RUFFaEI7RUFFQSxJQUFJLENBQUNkLFlBQVksRUFBRTtJQUNqQixPQUNFLElBQUEzQyxXQUFBLENBQUF1RCxJQUFBLEVBQUNoRSxVQUFBLENBQUFpRSxPQUFTO01BQUFDLFFBQUEsR0FDUixJQUFBekQsV0FBQSxDQUFBMEQsR0FBQSxFQUFDbEUsZUFBQSxDQUFBZ0UsT0FBYztRQUNiWCxLQUFLLEVBQUUsZUFBZXpCLGdCQUFnQixFQUFHO1FBQ3pDYixLQUFLLEVBQUVBLEtBQU07UUFDYlUsVUFBVSxFQUFFQSxVQUFXO1FBQ3ZCMEMsTUFBTSxFQUFFUDtNQUFXLENBQ3BCLENBQUMsRUFDRixJQUFBcEQsV0FBQSxDQUFBdUQsSUFBQSxFQUFDcEUsWUFBQSxDQUFBeUUsSUFBSTtRQUFDQyxLQUFLLEVBQUVqRCxNQUFNLENBQUN5RCxjQUFlO1FBQUFaLFFBQUEsR0FDakMsSUFBQXpELFdBQUEsQ0FBQTBELEdBQUEsRUFBQ3ZFLFlBQUEsQ0FBQWdGLElBQUk7VUFBQ04sS0FBSyxFQUFFakQsTUFBTSxDQUFDMEQsU0FBVTtVQUFBYixRQUFBLEVBQUM7UUFBcUMsQ0FBTSxDQUFDLEVBQzNFLElBQUF6RCxXQUFBLENBQUEwRCxHQUFBLEVBQUN2RSxZQUFBLENBQUFnRixJQUFJO1VBQUNOLEtBQUssRUFBRWpELE1BQU0sQ0FBQzBELFNBQVU7VUFBQWIsUUFBQSxFQUFDO1FBQTZCLENBQU0sQ0FBQztNQUFBLENBQy9ELENBQUM7SUFBQSxDQUNFLENBQUM7RUFFaEI7RUFFQSxPQUNFLElBQUF6RCxXQUFBLENBQUF1RCxJQUFBLEVBQUNoRSxVQUFBLENBQUFpRSxPQUFTO0lBQUFDLFFBQUEsR0FDUixJQUFBekQsV0FBQSxDQUFBMEQsR0FBQSxFQUFDbEUsZUFBQSxDQUFBZ0UsT0FBYztNQUNiWCxLQUFLLEVBQUUsZUFBZXpCLGdCQUFnQixFQUFHO01BQ3pDYixLQUFLLEVBQUVBLEtBQU07TUFDYlUsVUFBVSxFQUFFQSxVQUFXO01BQ3ZCMEMsTUFBTSxFQUFFUDtJQUFXLENBQ3BCLENBQUMsRUFDRixJQUFBcEQsV0FBQSxDQUFBMEQsR0FBQSxFQUFDakUsaUJBQUEsQ0FBQStELE9BQWdCO01BQ2YzQixvQkFBb0IsRUFBRUEsb0JBQW9CLEdBQUcsQ0FBRTtNQUMvQ08sY0FBYyxFQUFFQSxjQUFlO01BQy9CbkIsVUFBVSxFQUFFQTtJQUFXLENBQ3hCLENBQUMsRUFDRixJQUFBakIsV0FBQSxDQUFBMEQsR0FBQSxFQUFDaEUsYUFBQSxDQUFBOEQsT0FBWTtNQUNYckIsZUFBZSxFQUFFQSxlQUFnQjtNQUNqQ0wsU0FBUyxFQUFFQSxTQUFVO01BQ3JCQyxRQUFRLEVBQUVBLFFBQVM7TUFDbkJDLFlBQVksRUFBRUEsWUFBYTtNQUMzQkMsU0FBUyxFQUFFQSxTQUFVO01BQ3JCc0MsaUJBQWlCLEVBQUVsQyxZQUFhO01BQ2hDbUMsWUFBWSxFQUFFbEMsVUFBVztNQUN6Qm1DLGFBQWEsRUFBRWxDLFdBQVk7TUFDM0JtQyxNQUFNLEVBQUVsQyxVQUFXO01BQ25CbUMsT0FBTyxFQUFFbEMsYUFBYztNQUN2QkMsY0FBYyxFQUFFQSxjQUFlO01BQy9CekIsVUFBVSxFQUFFQTtJQUFXLENBQ3hCLENBQUMsRUFDRixJQUFBakIsV0FBQSxDQUFBMEQsR0FBQSxFQUFDL0QsZ0JBQUEsQ0FBQTZELE9BQWU7TUFDZHZCLFNBQVMsRUFBRUEsU0FBVTtNQUNyQnlDLE1BQU0sRUFBRWxDLFVBQVc7TUFDbkJtQyxPQUFPLEVBQUVsQyxhQUFjO01BQ3ZCQyxjQUFjLEVBQUVBLGNBQWU7TUFDL0J6QixVQUFVLEVBQUVBO0lBQVcsQ0FDeEIsQ0FBQztFQUFBLENBQ08sQ0FBQztBQUVoQixDQUFDO0FBQUMsSUFBQTJELFFBQUEsR0FBQUMsT0FBQSxDQUFBckIsT0FBQSxHQUVhdkQsZ0JBQWdCO0FBRy9CQSxnQkFBZ0IsQ0FBQzZFLFNBQVMsR0FBRztFQUMzQjNFLEtBQUssRUFBRTRFLGtCQUFTLENBQUNDLEtBQUssQ0FBQztJQUNyQjNFLE1BQU0sRUFBRTBFLGtCQUFTLENBQUNDLEtBQUssQ0FBQztNQUN0QnpFLEtBQUssRUFBRXdFLGtCQUFTLENBQUNFLE1BQU07TUFDdkJ4RSxZQUFZLEVBQUVzRSxrQkFBUyxDQUFDRTtJQUMxQixDQUFDO0VBQ0gsQ0FBQyxDQUFDLENBQUNDO0FBQ0wsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==