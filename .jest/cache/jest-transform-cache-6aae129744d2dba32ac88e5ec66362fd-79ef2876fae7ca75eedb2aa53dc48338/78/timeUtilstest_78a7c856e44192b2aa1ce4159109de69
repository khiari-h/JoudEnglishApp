04841dbe21ff55f364eea362113b59f3
var _timeUtils = require("../../src/utils/timeUtils");
describe('timeUtils', function () {
  describe('isValidTimeInSeconds', function () {
    it('devrait valider les temps corrects', function () {
      expect((0, _timeUtils.isValidTimeInSeconds)(0)).toBe(true);
      expect((0, _timeUtils.isValidTimeInSeconds)(60)).toBe(true);
      expect((0, _timeUtils.isValidTimeInSeconds)(3600)).toBe(true);
      expect((0, _timeUtils.isValidTimeInSeconds)(86400)).toBe(true);
    });
    it('devrait rejeter les temps invalides', function () {
      expect((0, _timeUtils.isValidTimeInSeconds)(-1)).toBe(false);
      expect((0, _timeUtils.isValidTimeInSeconds)(86401)).toBe(false);
      expect((0, _timeUtils.isValidTimeInSeconds)(NaN)).toBe(false);
      expect((0, _timeUtils.isValidTimeInSeconds)(Infinity)).toBe(false);
      expect((0, _timeUtils.isValidTimeInSeconds)('60')).toBe(false);
      expect((0, _timeUtils.isValidTimeInSeconds)(null)).toBe(false);
      expect((0, _timeUtils.isValidTimeInSeconds)(undefined)).toBe(false);
    });
  });
  describe('sanitizeTimeStats', function () {
    it('devrait sanitiser des stats valides', function () {
      var stats = {
        vocabulary: 120,
        grammar: 180,
        reading: 240,
        phrases: 60,
        conversations: 300,
        spelling: 90,
        errorCorrection: 150,
        wordGames: 75,
        assessment: 200
      };
      var result = (0, _timeUtils.sanitizeTimeStats)(stats);
      expect(result).toEqual(stats);
    });
    it('devrait corriger les valeurs invalides', function () {
      var stats = {
        vocabulary: -10,
        grammar: 'invalid',
        reading: NaN,
        phrases: Infinity,
        conversations: 150.7,
        spelling: null,
        errorCorrection: undefined,
        wordGames: 86401,
        assessment: 100
      };
      var result = (0, _timeUtils.sanitizeTimeStats)(stats);
      expect(result.vocabulary).toBe(0);
      expect(result.grammar).toBe(0);
      expect(result.reading).toBe(0);
      expect(result.phrases).toBe(0);
      expect(result.conversations).toBe(150);
      expect(result.spelling).toBe(0);
      expect(result.errorCorrection).toBe(0);
      expect(result.wordGames).toBe(0);
      expect(result.assessment).toBe(100);
    });
    it('devrait retourner les valeurs par défaut pour des données nulles', function () {
      expect((0, _timeUtils.sanitizeTimeStats)(null)).toBeDefined();
      expect((0, _timeUtils.sanitizeTimeStats)(undefined)).toBeDefined();
      expect((0, _timeUtils.sanitizeTimeStats)({})).toBeDefined();
      expect((0, _timeUtils.sanitizeTimeStats)('invalid')).toBeDefined();
    });
  });
  describe('getElapsedSeconds', function () {
    beforeEach(function () {
      jest.spyOn(Date, 'now').mockReturnValue(1640995200000);
    });
    afterEach(function () {
      jest.restoreAllMocks();
    });
    it('devrait calculer le temps écoulé correctement', function () {
      var startTime = 1640995200000 - 60000;
      var elapsed = (0, _timeUtils.getElapsedSeconds)(startTime);
      expect(elapsed).toBe(60);
    });
    it('devrait retourner 0 pour des timestamps invalides', function () {
      expect((0, _timeUtils.getElapsedSeconds)(null)).toBe(0);
      expect((0, _timeUtils.getElapsedSeconds)(undefined)).toBe(0);
      expect((0, _timeUtils.getElapsedSeconds)('invalid')).toBe(0);
    });
    it('devrait retourner 0 pour des temps futurs', function () {
      var futureTime = 1640995200000 + 60000;
      var elapsed = (0, _timeUtils.getElapsedSeconds)(futureTime);
      expect(elapsed).toBe(0);
    });
  });
  describe('secondsToMinutes', function () {
    it('devrait convertir les secondes en minutes', function () {
      expect((0, _timeUtils.secondsToMinutes)(60)).toBe(1);
      expect((0, _timeUtils.secondsToMinutes)(120)).toBe(2);
      expect((0, _timeUtils.secondsToMinutes)(90)).toBe(1);
      expect((0, _timeUtils.secondsToMinutes)(0)).toBe(0);
    });
    it('devrait gérer les valeurs invalides', function () {
      expect((0, _timeUtils.secondsToMinutes)(-60)).toBe(0);
      expect((0, _timeUtils.secondsToMinutes)(NaN)).toBe(0);
      expect((0, _timeUtils.secondsToMinutes)('60')).toBe(0);
      expect((0, _timeUtils.secondsToMinutes)(null)).toBe(0);
    });
  });
  describe('minutesToSeconds', function () {
    it('devrait convertir les minutes en secondes', function () {
      expect((0, _timeUtils.minutesToSeconds)(1)).toBe(60);
      expect((0, _timeUtils.minutesToSeconds)(2)).toBe(120);
      expect((0, _timeUtils.minutesToSeconds)(0.5)).toBe(30);
      expect((0, _timeUtils.minutesToSeconds)(0)).toBe(0);
    });
    it('devrait gérer les valeurs invalides', function () {
      expect((0, _timeUtils.minutesToSeconds)(-1)).toBe(0);
      expect((0, _timeUtils.minutesToSeconds)(NaN)).toBe(0);
      expect((0, _timeUtils.minutesToSeconds)('1')).toBe(0);
      expect((0, _timeUtils.minutesToSeconds)(null)).toBe(0);
    });
  });
  describe('formatTime', function () {
    it('devrait formater les temps courts', function () {
      expect((0, _timeUtils.formatTime)(0)).toBe('0s');
      expect((0, _timeUtils.formatTime)(30)).toBe('30s');
      expect((0, _timeUtils.formatTime)(59)).toBe('59s');
    });
    it('devrait formater les temps en minutes', function () {
      expect((0, _timeUtils.formatTime)(60)).toBe('1m');
      expect((0, _timeUtils.formatTime)(120)).toBe('2m');
      expect((0, _timeUtils.formatTime)(90)).toBe('1m 30s');
      expect((0, _timeUtils.formatTime)(150)).toBe('2m 30s');
    });
    it('devrait gérer les valeurs invalides', function () {
      expect((0, _timeUtils.formatTime)(-60)).toBe('0s');
      expect((0, _timeUtils.formatTime)(NaN)).toBe('0s');
      expect((0, _timeUtils.formatTime)('60')).toBe('0s');
      expect((0, _timeUtils.formatTime)(null)).toBe('0s');
    });
  });
  describe('formatTimeCompact', function () {
    it('devrait formater en format compact', function () {
      expect((0, _timeUtils.formatTimeCompact)(0)).toBe('0:00');
      expect((0, _timeUtils.formatTimeCompact)(30)).toBe('0:30');
      expect((0, _timeUtils.formatTimeCompact)(60)).toBe('1:00');
      expect((0, _timeUtils.formatTimeCompact)(90)).toBe('1:30');
      expect((0, _timeUtils.formatTimeCompact)(3661)).toBe('61:01');
    });
    it('devrait gérer les valeurs invalides', function () {
      expect((0, _timeUtils.formatTimeCompact)(-60)).toBe('0:00');
      expect((0, _timeUtils.formatTimeCompact)(NaN)).toBe('0:00');
      expect((0, _timeUtils.formatTimeCompact)(null)).toBe('0:00');
    });
  });
  describe('isValidStatsStructure', function () {
    it('devrait valider une structure correcte', function () {
      var validStats = {
        vocabulary: 120,
        grammar: 180,
        reading: 240,
        phrases: 60,
        conversations: 300,
        spelling: 90,
        errorCorrection: 150,
        wordGames: 75,
        assessment: 200
      };
      expect((0, _timeUtils.isValidStatsStructure)(validStats)).toBe(true);
    });
    it('devrait rejeter les structures invalides', function () {
      expect((0, _timeUtils.isValidStatsStructure)(null)).toBe(false);
      expect((0, _timeUtils.isValidStatsStructure)(undefined)).toBe(false);
      expect((0, _timeUtils.isValidStatsStructure)({})).toBe(false);
      expect((0, _timeUtils.isValidStatsStructure)({
        vocabulary: 'invalid'
      })).toBe(false);
      expect((0, _timeUtils.isValidStatsStructure)({
        vocabulary: 120
      })).toBe(false);
    });
  });
  describe('getTotalTimeFromStats', function () {
    it('devrait calculer le temps total', function () {
      var stats = {
        vocabulary: 120,
        grammar: 180,
        reading: 240,
        phrases: 60,
        conversations: 300,
        spelling: 90,
        errorCorrection: 150,
        wordGames: 75,
        assessment: 200
      };
      var total = (0, _timeUtils.getTotalTimeFromStats)(stats);
      expect(total).toBe(1415);
    });
    it('devrait retourner 0 pour des stats invalides', function () {
      expect((0, _timeUtils.getTotalTimeFromStats)(null)).toBe(0);
      expect((0, _timeUtils.getTotalTimeFromStats)({})).toBe(0);
      expect((0, _timeUtils.getTotalTimeFromStats)({
        vocabulary: 'invalid'
      })).toBe(0);
    });
  });
  describe('getSortedStatsByTime', function () {
    it('devrait trier les stats par temps décroissant', function () {
      var stats = {
        vocabulary: 120,
        grammar: 300,
        reading: 60,
        phrases: 180,
        conversations: 240,
        spelling: 90,
        errorCorrection: 150,
        wordGames: 75,
        assessment: 200
      };
      var sorted = (0, _timeUtils.getSortedStatsByTime)(stats);
      expect(sorted[0]).toEqual({
        exerciseType: 'grammar',
        time: 300
      });
      expect(sorted[1]).toEqual({
        exerciseType: 'conversations',
        time: 240
      });
      expect(sorted[2]).toEqual({
        exerciseType: 'assessment',
        time: 200
      });
      expect(sorted[sorted.length - 1]).toEqual({
        exerciseType: 'reading',
        time: 60
      });
    });
    it('devrait retourner un tableau vide pour des stats invalides', function () {
      expect((0, _timeUtils.getSortedStatsByTime)(null)).toEqual([]);
      expect((0, _timeUtils.getSortedStatsByTime)({})).toEqual([]);
    });
  });
  describe('hasMinimumTime', function () {
    var validStats = {
      vocabulary: 120,
      grammar: 180,
      reading: 30,
      phrases: 60,
      conversations: 300,
      spelling: 90,
      errorCorrection: 150,
      wordGames: 75,
      assessment: 200
    };
    it('devrait vérifier le temps minimum correctement', function () {
      expect((0, _timeUtils.hasMinimumTime)(validStats, 'vocabulary', 1)).toBe(true);
      expect((0, _timeUtils.hasMinimumTime)(validStats, 'vocabulary', 2)).toBe(true);
      expect((0, _timeUtils.hasMinimumTime)(validStats, 'vocabulary', 3)).toBe(false);
      expect((0, _timeUtils.hasMinimumTime)(validStats, 'reading', 1)).toBe(false);
      expect((0, _timeUtils.hasMinimumTime)(validStats, 'phrases', 1)).toBe(true);
    });
    it('devrait utiliser 1 minute par défaut', function () {
      expect((0, _timeUtils.hasMinimumTime)(validStats, 'vocabulary')).toBe(true);
      expect((0, _timeUtils.hasMinimumTime)(validStats, 'reading')).toBe(false);
    });
    it('devrait retourner false pour des données invalides', function () {
      expect((0, _timeUtils.hasMinimumTime)(null, 'vocabulary')).toBe(false);
      expect((0, _timeUtils.hasMinimumTime)(validStats, 'invalidType')).toBe(false);
      expect((0, _timeUtils.hasMinimumTime)({}, 'vocabulary')).toBe(false);
    });
  });
  describe('Edge cases et performance', function () {
    it('devrait gérer les très grandes valeurs', function () {
      var largeValue = 86400;
      expect((0, _timeUtils.isValidTimeInSeconds)(largeValue)).toBe(true);
      expect((0, _timeUtils.formatTime)(largeValue)).toBe('1440m');
      expect((0, _timeUtils.formatTimeCompact)(largeValue)).toBe('1440:00');
    });
    it('devrait gérer les valeurs décimales', function () {
      expect((0, _timeUtils.isValidTimeInSeconds)(60.5)).toBe(true);
      expect((0, _timeUtils.sanitizeTimeStats)({
        vocabulary: 60.7
      }).vocabulary).toBe(60);
    });
    it('devrait être performant avec de gros objets', function () {
      var bigStats = {};
      for (var i = 0; i < 1000; i++) {
        bigStats[`exercise${i}`] = Math.floor(Math.random() * 1000);
      }
      var start = Date.now();
      (0, _timeUtils.getTotalTimeFromStats)(bigStats);
      var end = Date.now();
      expect(end - start).toBeLessThan(100);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,