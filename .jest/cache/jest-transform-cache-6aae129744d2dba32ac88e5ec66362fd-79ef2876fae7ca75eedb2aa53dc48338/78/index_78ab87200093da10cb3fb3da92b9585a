e21f558c823613e79372281abe4865cc
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _HeroCard = _interopRequireDefault(require("../../../../../components/ui/HeroCard"));
var _ContentSection = _interopRequireDefault(require("../../../../../components/ui/ContentSection"));
var _style = _interopRequireDefault(require("./style"));
var _react = require("react");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
var MultipleChoiceMode = function MultipleChoiceMode(_ref) {
  var exercise = _ref.exercise,
    selectedChoiceIndex = _ref.selectedChoiceIndex,
    onSelectChoice = _ref.onSelectChoice,
    _ref$showFeedback = _ref.showFeedback,
    showFeedback = _ref$showFeedback === void 0 ? false : _ref$showFeedback,
    _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? "#5E60CE" : _ref$levelColor;
  var styles = (0, _style.default)(levelColor);
  var handleChoicePress = (0, _react.useCallback)(function (index) {
    return function () {
      if (!showFeedback) onSelectChoice(index);
    };
  }, [onSelectChoice, showFeedback]);
  if (!exercise) return null;
  var choices = exercise.choices || [];
  var correctChoiceIndex = exercise.correctChoiceIndex;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsx)(_HeroCard.default, {
      content: exercise.text,
      fontSize: 24,
      levelColor: levelColor,
      showUnderline: false,
      style: styles.heroCard
    }), (0, _jsxRuntime.jsx)(_ContentSection.default, {
      title: "Instructions",
      content: "Choisissez la version correcte parmi les options ci-dessous.",
      levelColor: levelColor,
      backgroundColor: "#F8F9FA",
      style: styles.instructionSection
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.choicesContainer,
      children: choices.map(function (choice, index) {
        var isSelected = selectedChoiceIndex === index;
        var isCorrect = showFeedback && index === correctChoiceIndex;
        var isIncorrect = showFeedback && isSelected && index !== correctChoiceIndex;
        return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          style: [styles.choiceOption, isSelected && !showFeedback && {
            borderColor: levelColor,
            backgroundColor: `${levelColor}10`
          }, isCorrect && styles.correctChoice, isIncorrect && styles.incorrectChoice],
          onPress: handleChoicePress(index),
          disabled: showFeedback,
          children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.choiceContent,
            children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
              style: [styles.choiceIndicator, isSelected && !showFeedback && {
                backgroundColor: levelColor
              }, isCorrect && styles.correctIndicator, isIncorrect && styles.incorrectIndicator],
              children: (0, _jsxRuntime.jsxs)(_reactNative.Text, {
                style: [styles.choiceIndicatorText, isSelected && !showFeedback || isCorrect || isIncorrect ? {
                  color: 'white'
                } : {
                  color: '#64748b'
                }],
                children: [String.fromCharCode(65 + index), " "]
              })
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: [styles.choiceText, isSelected && !showFeedback && {
                color: levelColor,
                fontWeight: '600'
              }, isCorrect && styles.correctChoiceText, isIncorrect && styles.incorrectChoiceText],
              children: choice
            })]
          })
        }, `choice-${choice}-${index}`);
      })
    }), showFeedback && exercise.explanation && (0, _jsxRuntime.jsx)(_ContentSection.default, {
      title: "Explication",
      content: exercise.explanation,
      levelColor: selectedChoiceIndex === correctChoiceIndex ? "#10b981" : "#ef4444",
      backgroundColor: selectedChoiceIndex === correctChoiceIndex ? "#f0fdf4" : "#fef2f2",
      style: styles.feedbackSection
    })]
  });
};
MultipleChoiceMode.propTypes = {
  exercise: _propTypes.default.shape({
    text: _propTypes.default.string,
    choices: _propTypes.default.arrayOf(_propTypes.default.string).isRequired,
    correctChoiceIndex: _propTypes.default.number.isRequired,
    explanation: _propTypes.default.string
  }).isRequired,
  selectedChoiceIndex: _propTypes.default.number,
  onSelectChoice: _propTypes.default.func.isRequired,
  showFeedback: _propTypes.default.bool,
  levelColor: _propTypes.default.string
};
var _default = exports.default = MultipleChoiceMode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,