2564391d2b169c5f59803e8e1117fc05
_getJestObj().mock("react-native", function () {
  var RN = jest.requireActual("react-native");
  return Object.assign({}, RN, {
    Animated: Object.assign({}, RN.Animated, {
      Value: jest.fn(function () {
        return {
          interpolate: jest.fn()
        };
      }),
      timing: mockTiming,
      parallel: mockParallel,
      multiply: jest.fn(function (a, b) {
        return a || b;
      })
    })
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _CategorySelector = _interopRequireDefault(require("../../../src/components/exercise-common/CategorySelector"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockTiming = jest.fn(function () {
  return {
    start: jest.fn(function (cb) {
      return cb && cb();
    })
  };
});
var mockParallel = jest.fn(function () {
  return {
    start: jest.fn(function (cb) {
      return cb && cb();
    })
  };
});
describe("CategorySelector - Animations", function () {
  var categories = [{
    id: "1",
    name: "Category 1"
  }, {
    id: "2",
    name: "Category 2"
  }];
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it("triggers parallel animations when selectedCategory changes", (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: jest.fn()
      })),
      rerender = _render.rerender;
    yield (0, _reactNative.waitFor)(function () {
      expect(require("react-native").Animated.Value).toHaveBeenCalled();
    });
    rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
      categories: categories,
      selectedCategory: "2",
      onSelectCategory: jest.fn()
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockParallel).toHaveBeenCalledTimes(1);
      expect(mockTiming).toHaveBeenCalledTimes(2);
    });
  }));
  it("prevents animation conflicts with isAnimatingRef", (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: jest.fn()
      })),
      rerender = _render2.rerender;
    yield (0, _reactNative.waitFor)(function () {
      expect(require("react-native").Animated.Value).toHaveBeenCalled();
    });
    rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
      categories: categories,
      selectedCategory: "2",
      onSelectCategory: jest.fn()
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockParallel).toHaveBeenCalledTimes(1);
    });
    rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
      categories: categories,
      selectedCategory: "1",
      onSelectCategory: jest.fn()
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockParallel).toHaveBeenCalledTimes(1);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,