0f4a6ea2934bef546332a343f06d82e2
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vocab = void 0;
function cov_1fg1m5ctsx() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\data\\vocabulary\\6\\categories\\05_sciences_medicales.js";
  var hash = "a51df7a7205e5a832b10f5d9f4cf165ef1cb9903";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\data\\vocabulary\\6\\categories\\05_sciences_medicales.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 21
        },
        end: {
          line: 1163,
          column: 1
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a51df7a7205e5a832b10f5d9f4cf165ef1cb9903"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_1fg1m5ctsx = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1fg1m5ctsx();
var vocab = exports.vocab = (cov_1fg1m5ctsx().s[0]++, {
  title: "Sciences Médicales Avancées",
  words: [{
    word: "biomedical research",
    translation: "recherche biomédicale",
    example: "Biomedical research explores the mechanisms of disease at the molecular level."
  }, {
    word: "evidence-based medicine",
    translation: "médecine fondée sur les preuves",
    example: "Evidence-based medicine integrates clinical expertise with systematic research."
  }, {
    word: "research protocol",
    translation: "protocole de recherche",
    example: "The research protocol outlined methodology, objectives, and ethical considerations."
  }, {
    word: "systematic review",
    translation: "revue systématique",
    example: "The systematic review identified consistent findings across multiple studies."
  }, {
    word: "clinical endpoint",
    translation: "critère d'évaluation clinique",
    example: "Survival rate was the primary clinical endpoint in the cancer study."
  }, {
    word: "investigational drug",
    translation: "médicament expérimental",
    example: "The investigational drug showed promise in preliminary animal studies."
  }, {
    word: "research grant",
    translation: "subvention de recherche",
    example: "The research grant funded their investigation into autoimmune disorders."
  }, {
    word: "bench research",
    translation: "recherche fondamentale",
    example: "Bench research identified the cellular pathway responsible for the condition."
  }, {
    word: "clinical correlation",
    translation: "corrélation clinique",
    example: "The researchers established clinical correlation between the biomarker and disease progression."
  }, {
    word: "research pipeline",
    translation: "pipeline de recherche",
    example: "Their research pipeline includes several compounds in various development stages."
  }, {
    word: "genetic screening",
    translation: "dépistage génétique",
    example: "Genetic screening identifies individuals at risk for heritable conditions."
  }, {
    word: "genetic biomarker",
    translation: "biomarqueur génétique",
    example: "The genetic biomarker predicted treatment response in cancer patients."
  }, {
    word: "whole genome sequencing",
    translation: "séquençage du génome entier",
    example: "Whole genome sequencing analyzed the patient's complete genetic code."
  }, {
    word: "germline mutation",
    translation: "mutation germinale",
    example: "Germline mutations can be passed to offspring, unlike somatic mutations."
  }, {
    word: "gene expression",
    translation: "expression génique",
    example: "Gene expression profiling revealed activity patterns in tumor cells."
  }, {
    word: "genetic variant",
    translation: "variant génétique",
    example: "The genetic variant was associated with increased heart disease risk."
  }, {
    word: "DNA methylation",
    translation: "méthylation de l'ADN",
    example: "DNA methylation patterns serve as epigenetic markers affecting gene activity."
  }, {
    word: "exome sequencing",
    translation: "séquençage de l'exome",
    example: "Exome sequencing analyzes protein-coding regions of the genome."
  }, {
    word: "genetic risk factor",
    translation: "facteur de risque génétique",
    example: "The genetic risk factor increased susceptibility to the autoimmune condition."
  }, {
    word: "single nucleotide polymorphism",
    translation: "polymorphisme mononucléotidique",
    example: "Single nucleotide polymorphisms are the most common type of genetic variation."
  }, {
    word: "genetic linkage",
    translation: "liaison génétique",
    example: "Genetic linkage analysis traced the inheritance pattern across generations."
  }, {
    word: "genomic profiling",
    translation: "profilage génomique",
    example: "Genomic profiling guided personalized treatment selection for the patient."
  }, {
    word: "allele frequency",
    translation: "fréquence allélique",
    example: "Allele frequency varies significantly between different populations."
  }, {
    word: "genetic heterogeneity",
    translation: "hétérogénéité génétique",
    example: "Genetic heterogeneity complicates diagnosis of complex disorders."
  }, {
    word: "genetic penetrance",
    translation: "pénétrance génétique",
    example: "Genetic penetrance describes the proportion of individuals with a mutation who exhibit symptoms."
  }, {
    word: "functional genomics",
    translation: "génomique fonctionnelle",
    example: "Functional genomics investigates gene functions and interactions."
  }, {
    word: "RNA sequencing",
    translation: "séquençage d'ARN",
    example: "RNA sequencing revealed gene activity patterns in different tissues."
  }, {
    word: "genetic cascade",
    translation: "cascade génétique",
    example: "The genetic cascade involved multiple interacting pathways."
  }, {
    word: "neurodegenerative disease",
    translation: "maladie neurodégénérative",
    example: "Alzheimer's disease is a common neurodegenerative disease affecting cognition."
  }, {
    word: "functional MRI",
    translation: "IRM fonctionnelle",
    example: "Functional MRI measures brain activity by detecting blood flow changes."
  }, {
    word: "brain-computer interface",
    translation: "interface cerveau-ordinateur",
    example: "Brain-computer interfaces translate neural activity into digital commands."
  }, {
    word: "neuromodulation",
    translation: "neuromodulation",
    example: "Neuromodulation therapies alter nerve activity to treat conditions."
  }, {
    word: "connectome",
    translation: "connectome",
    example: "The human connectome maps neural connections within the brain."
  }, {
    word: "neurocognitive",
    translation: "neurocognitif",
    example: "Neurocognitive testing assessed memory, attention, and executive function."
  }, {
    word: "neural circuit",
    translation: "circuit neuronal",
    example: "The research identified neural circuits involved in anxiety responses."
  }, {
    word: "neuroinflammation",
    translation: "neuroinflammation",
    example: "Neuroinflammation contributes to many neurological disorders."
  }, {
    word: "synaptic plasticity",
    translation: "plasticité synaptique",
    example: "Synaptic plasticity underlies learning and memory formation."
  }, {
    word: "axonal transport",
    translation: "transport axonal",
    example: "Disrupted axonal transport contributes to neurodegenerative diseases."
  }, {
    word: "neurostimulation",
    translation: "neurostimulation",
    example: "Neurostimulation therapies deliver electrical pulses to targeted brain regions."
  }, {
    word: "tractography",
    translation: "tractographie",
    example: "Tractography visualizes neural pathways using diffusion imaging."
  }, {
    word: "neural oscillation",
    translation: "oscillation neuronale",
    example: "Neural oscillations represent synchronized activity across brain regions."
  }, {
    word: "optogenetics",
    translation: "optogénétique",
    example: "Optogenetics controls neurons using light-sensitive proteins."
  }, {
    word: "neuroproteomics",
    translation: "neuroprotéomique",
    example: "Neuroproteomics studies protein expression in neural tissues."
  }, {
    word: "blood-brain barrier",
    translation: "barrière hémato-encéphalique",
    example: "The blood-brain barrier selectively restricts substance passage to the brain."
  }, {
    word: "neurofeedback",
    translation: "neurofeedback",
    example: "Neurofeedback training helps patients regulate their brain activity."
  }, {
    word: "cerebral organoid",
    translation: "organoïde cérébral",
    example: "Cerebral organoids model early brain development in laboratory settings."
  }, {
    word: "neural stem cell",
    translation: "cellule souche neurale",
    example: "Neural stem cells can differentiate into various cell types in the nervous system."
  }, {
    word: "electrophysiology",
    translation: "électrophysiologie",
    example: "Electrophysiology measures electrical activity in neural tissues."
  }, {
    word: "immune response",
    translation: "réponse immunitaire",
    example: "The vaccine triggers a protective immune response against the pathogen."
  }, {
    word: "monoclonal antibody",
    translation: "anticorps monoclonal",
    example: "Monoclonal antibodies target specific antigens with high precision."
  }, {
    word: "adaptive immunity",
    translation: "immunité adaptative",
    example: "Adaptive immunity develops specific responses to pathogens encountered."
  }, {
    word: "innate immunity",
    translation: "immunité innée",
    example: "Innate immunity provides rapid, non-specific defense against pathogens."
  }, {
    word: "cytokine storm",
    translation: "tempête de cytokines",
    example: "A cytokine storm involves excessive immune system activation causing tissue damage."
  }, {
    word: "autoimmune disease",
    translation: "maladie auto-immune",
    example: "In autoimmune diseases, the immune system attacks healthy body tissues."
  }, {
    word: "antigen presentation",
    translation: "présentation d'antigène",
    example: "Antigen presentation displays foreign molecules to immune cells."
  }, {
    word: "T-cell receptor",
    translation: "récepteur des lymphocytes T",
    example: "T-cell receptors recognize antigens presented by other cells."
  }, {
    word: "vaccine adjuvant",
    translation: "adjuvant vaccinal",
    example: "Vaccine adjuvants enhance immune responses to vaccine components."
  }, {
    word: "viral vector",
    translation: "vecteur viral",
    example: "Viral vectors deliver therapeutic genes in some vaccines and treatments."
  }, {
    word: "immunological memory",
    translation: "mémoire immunologique",
    example: "Immunological memory enables rapid responses to previously encountered pathogens."
  }, {
    word: "antigenic drift",
    translation: "dérive antigénique",
    example: "Antigenic drift creates gradual mutations in viral surface proteins."
  }, {
    word: "immunosuppression",
    translation: "immunosuppression",
    example: "Immunosuppression prevents rejection of transplanted organs."
  }, {
    word: "serological testing",
    translation: "test sérologique",
    example: "Serological testing detects antibodies indicating prior infection."
  }, {
    word: "antimicrobial resistance",
    translation: "résistance aux antimicrobiens",
    example: "Antimicrobial resistance develops when pathogens evolve to survive treatments."
  }, {
    word: "epitope",
    translation: "épitope",
    example: "An epitope is the specific part of an antigen recognized by antibodies."
  }, {
    word: "immunoglobulin",
    translation: "immunoglobuline",
    example: "Immunoglobulins are proteins that function as antibodies."
  }, {
    word: "passive immunity",
    translation: "immunité passive",
    example: "Passive immunity involves transferring antibodies from one individual to another."
  }, {
    word: "disease vector",
    translation: "vecteur de maladie",
    example: "Mosquitoes serve as disease vectors for malaria and other infections."
  }, {
    word: "virulence factor",
    translation: "facteur de virulence",
    example: "Virulence factors enhance a pathogen's ability to cause disease."
  }, {
    word: "immune checkpoint",
    translation: "point de contrôle immunitaire",
    example: "Immune checkpoint inhibitors enhance T-cell responses against cancer."
  }, {
    word: "minimally invasive surgery",
    translation: "chirurgie mini-invasive",
    example: "Minimally invasive surgery reduces recovery time and complications."
  }, {
    word: "laparoscopic procedure",
    translation: "procédure laparoscopique",
    example: "The laparoscopic procedure required only small incisions."
  }, {
    word: "interventional radiology",
    translation: "radiologie interventionnelle",
    example: "Interventional radiology uses imaging guidance for minimally invasive procedures."
  }, {
    word: "endovascular surgery",
    translation: "chirurgie endovasculaire",
    example: "Endovascular surgery treats blood vessel problems without open operations."
  }, {
    word: "intraoperative imaging",
    translation: "imagerie peropératoire",
    example: "Intraoperative imaging guides surgeons during the procedure."
  }, {
    word: "microsurgery",
    translation: "microchirurgie",
    example: "Microsurgery involves operating on tiny structures using magnification."
  }, {
    word: "surgical navigation",
    translation: "navigation chirurgicale",
    example: "Surgical navigation systems provide real-time guidance during procedures."
  }, {
    word: "hybrid operating room",
    translation: "salle d'opération hybride",
    example: "The hybrid operating room combined surgical and imaging capabilities."
  }, {
    word: "endoscopic procedure",
    translation: "procédure endoscopique",
    example: "Endoscopic procedures use flexible tubes with cameras to view internal organs."
  }, {
    word: "stereotactic surgery",
    translation: "chirurgie stéréotaxique",
    example: "Stereotactic surgery pinpoints locations using three-dimensional coordinates."
  }, {
    word: "ablation therapy",
    translation: "thérapie par ablation",
    example: "Ablation therapy destroys abnormal tissue using heat, cold, or chemicals."
  }, {
    word: "surgical anastomosis",
    translation: "anastomose chirurgicale",
    example: "Surgical anastomosis connects two structures, typically blood vessels or bowel segments."
  }, {
    word: "transplantation",
    translation: "transplantation",
    example: "Organ transplantation replaces failed organs with healthy donor tissues."
  }, {
    word: "prosthetic implant",
    translation: "implant prothétique",
    example: "The prosthetic implant restored function after limb amputation."
  }, {
    word: "surgical debridement",
    translation: "débridement chirurgical",
    example: "Surgical debridement removes dead tissue to promote healing."
  }, {
    word: "catheter-based intervention",
    translation: "intervention par cathéter",
    example: "Catheter-based interventions treat cardiovascular conditions through blood vessels."
  }, {
    word: "image-guided surgery",
    translation: "chirurgie guidée par l'image",
    example: "Image-guided surgery improves precision and reduces complications."
  }, {
    word: "surgical stapling",
    translation: "agrafage chirurgical",
    example: "Surgical stapling provides rapid tissue closure during operations."
  }, {
    word: "reconstructive surgery",
    translation: "chirurgie reconstructrice",
    example: "Reconstructive surgery restores appearance and function after injury or disease."
  }, {
    word: "laser surgery",
    translation: "chirurgie au laser",
    example: "Laser surgery uses focused light for precise tissue manipulation."
  }, {
    word: "endoprosthesis",
    translation: "endoprothèse",
    example: "The endoprosthesis replaced the damaged joint surfaces."
  }, {
    word: "surgical adhesive",
    translation: "adhésif chirurgical",
    example: "Surgical adhesives bond tissues without traditional sutures."
  }, {
    word: "intraoperative monitoring",
    translation: "surveillance peropératoire",
    example: "Intraoperative monitoring tracks vital functions during surgery."
  }, {
    word: "tumor microenvironment",
    translation: "microenvironnement tumoral",
    example: "The tumor microenvironment includes surrounding blood vessels and immune cells."
  }, {
    word: "cancer immunotherapy",
    translation: "immunothérapie contre le cancer",
    example: "Cancer immunotherapy enhances the immune system's ability to fight tumors."
  }, {
    word: "precision oncology",
    translation: "oncologie de précision",
    example: "Precision oncology tailors treatment based on molecular characteristics of tumors."
  }, {
    word: "metastasis",
    translation: "métastase",
    example: "Metastasis occurs when cancer spreads from its original site to distant organs."
  }, {
    word: "oncogenic mutation",
    translation: "mutation oncogénique",
    example: "Oncogenic mutations transform normal cells into cancerous ones."
  }, {
    word: "tumor suppressor gene",
    translation: "gène suppresseur de tumeur",
    example: "Tumor suppressor genes regulate cell division and prevent uncontrolled growth."
  }, {
    word: "cancer biomarker",
    translation: "biomarqueur du cancer",
    example: "Cancer biomarkers help diagnose, predict outcomes, and guide treatment decisions."
  }, {
    word: "checkpoint inhibitor",
    translation: "inhibiteur de point de contrôle",
    example: "Checkpoint inhibitors block proteins that restrain immune responses to cancer."
  }, {
    word: "tumor heterogeneity",
    translation: "hétérogénéité tumorale",
    example: "Tumor heterogeneity describes genetic diversity within a single tumor."
  }, {
    word: "circulating tumor DNA",
    translation: "ADN tumoral circulant",
    example: "Circulating tumor DNA provides non-invasive monitoring of cancer mutations."
  }, {
    word: "cancer staging",
    translation: "stadification du cancer",
    example: "Cancer staging determines the extent of disease to guide treatment planning."
  }, {
    word: "neoadjuvant therapy",
    translation: "thérapie néoadjuvante",
    example: "Neoadjuvant therapy treats cancer before the main intervention, typically surgery."
  }, {
    word: "adjuvant therapy",
    translation: "thérapie adjuvante",
    example: "Adjuvant therapy follows primary treatment to reduce recurrence risk."
  }, {
    word: "radiation oncology",
    translation: "radio-oncologie",
    example: "Radiation oncology uses ionizing radiation to control malignant cells."
  }, {
    word: "cancer remission",
    translation: "rémission du cancer",
    example: "Cancer remission indicates decrease or disappearance of disease signs."
  }, {
    word: "radiotherapy",
    translation: "radiothérapie",
    example: "Radiotherapy damages cancer cell DNA to prevent replication."
  }, {
    word: "chemoresistance",
    translation: "chimiorésistance",
    example: "Chemoresistance develops when cancer cells no longer respond to chemotherapy."
  }, {
    word: "tumor angiogenesis",
    translation: "angiogenèse tumorale",
    example: "Tumor angiogenesis forms new blood vessels to support cancer growth."
  }, {
    word: "oncogene",
    translation: "oncogène",
    example: "Oncogenes can transform normal cells into tumor cells when activated."
  }, {
    word: "apoptosis",
    translation: "apoptose",
    example: "Many cancer treatments induce apoptosis, or programmed cell death."
  }, {
    word: "cancer metabolism",
    translation: "métabolisme du cancer",
    example: "Cancer metabolism studies how tumor cells process nutrients differently."
  }, {
    word: "therapeutic resistance",
    translation: "résistance thérapeutique",
    example: "Therapeutic resistance occurs when cancers adapt to evade treatments."
  }, {
    word: "advanced imaging",
    translation: "imagerie avancée",
    example: "Advanced imaging techniques provide detailed anatomical and functional information."
  }, {
    word: "positron emission tomography",
    translation: "tomographie par émission de positons",
    example: "Positron emission tomography visualizes metabolic processes within the body."
  }, {
    word: "diffusion tensor imaging",
    translation: "imagerie du tenseur de diffusion",
    example: "Diffusion tensor imaging maps water molecule movement in tissues."
  }, {
    word: "spectral CT",
    translation: "tomodensitométrie spectrale",
    example: "Spectral CT distinguishes tissues based on material composition."
  }, {
    word: "molecular imaging",
    translation: "imagerie moléculaire",
    example: "Molecular imaging visualizes biological processes at the cellular level."
  }, {
    word: "contrast enhancement",
    translation: "rehaussement de contraste",
    example: "Contrast enhancement improves visualization of specific structures."
  }, {
    word: "image reconstruction",
    translation: "reconstruction d'image",
    example: "Image reconstruction creates visual representations from sensor data."
  }, {
    word: "interventional imaging",
    translation: "imagerie interventionnelle",
    example: "Interventional imaging guides minimally invasive procedures in real-time."
  }, {
    word: "elastography",
    translation: "élastographie",
    example: "Elastography measures tissue stiffness to detect pathological changes."
  }, {
    word: "magnetic resonance spectroscopy",
    translation: "spectroscopie par résonance magnétique",
    example: "Magnetic resonance spectroscopy analyzes chemical composition of tissues."
  }, {
    word: "perfusion imaging",
    translation: "imagerie de perfusion",
    example: "Perfusion imaging evaluates blood flow through tissues and organs."
  }, {
    word: "quantitative imaging",
    translation: "imagerie quantitative",
    example: "Quantitative imaging extracts measurable features from medical images."
  }, {
    word: "hybrid imaging",
    translation: "imagerie hybride",
    example: "Hybrid imaging combines multiple techniques for comprehensive assessment."
  }, {
    word: "image registration",
    translation: "recalage d'image",
    example: "Image registration aligns images from different times or modalities."
  }, {
    word: "volumetric imaging",
    translation: "imagerie volumétrique",
    example: "Volumetric imaging creates three-dimensional representations of anatomical structures."
  }, {
    word: "image segmentation",
    translation: "segmentation d'image",
    example: "Image segmentation identifies and isolates specific structures for analysis."
  }, {
    word: "optical coherence tomography",
    translation: "tomographie par cohérence optique",
    example: "Optical coherence tomography provides cross-sectional tissue imaging."
  }, {
    word: "radiomics",
    translation: "radiomique",
    example: "Radiomics extracts quantitative features from medical images for analysis."
  }, {
    word: "parametric mapping",
    translation: "cartographie paramétrique",
    example: "Parametric mapping quantifies physiological parameters from imaging data."
  }, {
    word: "image biomarker",
    translation: "biomarqueur d'imagerie",
    example: "Image biomarkers predict disease progression or treatment response."
  }, {
    word: "photoacoustic imaging",
    translation: "imagerie photoacoustique",
    example: "Photoacoustic imaging combines light and sound for high-contrast visualization."
  }, {
    word: "susceptibility-weighted imaging",
    translation: "imagerie pondérée en susceptibilité",
    example: "Susceptibility-weighted imaging detects small amounts of blood or minerals."
  }, {
    word: "image-guided therapy",
    translation: "thérapie guidée par l'image",
    example: "Image-guided therapy uses real-time visualization to direct treatment."
  }, {
    word: "artificial intelligence imaging",
    translation: "imagerie par intelligence artificielle",
    example: "Artificial intelligence enhances image interpretation and analysis."
  }, {
    word: "electronic health record",
    translation: "dossier médical électronique",
    example: "Electronic health records store patient information in digital format."
  }, {
    word: "health informatics",
    translation: "informatique de la santé",
    example: "Health informatics applies information technology to healthcare delivery."
  }, {
    word: "remote patient monitoring",
    translation: "surveillance à distance des patients",
    example: "Remote patient monitoring tracks health status outside clinical settings."
  }, {
    word: "clinical decision support",
    translation: "aide à la décision clinique",
    example: "Clinical decision support systems assist healthcare providers with evidence-based recommendations."
  }, {
    word: "health data analytics",
    translation: "analyse de données de santé",
    example: "Health data analytics identifies patterns to improve clinical outcomes."
  }, {
    word: "mHealth",
    translation: "santé mobile",
    example: "mHealth applications deliver healthcare services through mobile devices."
  }, {
    word: "patient portal",
    translation: "portail patient",
    example: "Patient portals provide secure online access to personal health information."
  }, {
    word: "healthcare artificial intelligence",
    translation: "intelligence artificielle pour la santé",
    example: "Healthcare artificial intelligence analyzes complex medical data to support decisions."
  }, {
    word: "virtual reality therapy",
    translation: "thérapie par réalité virtuelle",
    example: "Virtual reality therapy treats psychological conditions through immersive environments."
  }, {
    word: "digital biomarker",
    translation: "biomarqueur numérique",
    example: "Digital biomarkers measure health status through personal digital devices."
  }, {
    word: "patient-generated health data",
    translation: "données de santé générées par le patient",
    example: "Patient-generated health data comes from personal devices and applications."
  }, {
    word: "connected health device",
    translation: "dispositif de santé connecté",
    example: "Connected health devices transmit information to monitoring systems."
  }, {
    word: "digital health platform",
    translation: "plateforme de santé numérique",
    example: "Digital health platforms integrate various applications and services."
  }, {
    word: "remote consultation",
    translation: "consultation à distance",
    example: "Remote consultation provides medical advice without in-person visits."
  }, {
    word: "e-prescription",
    translation: "e-prescription",
    example: "E-prescription systems transmit medication orders electronically."
  }, {
    word: "precision treatment",
    translation: "traitement de précision",
    example: "Precision treatment approaches target specific disease mechanisms."
  }, {
    word: "genetic risk assessment",
    translation: "évaluation du risque génétique",
    example: "Genetic risk assessment predicts disease susceptibility based on DNA analysis."
  }, {
    word: "individualized treatment plan",
    translation: "plan de traitement individualisé",
    example: "The individualized treatment plan addressed the patient's unique characteristics."
  }, {
    word: "biomarker panel",
    translation: "panel de biomarqueurs",
    example: "The biomarker panel predicted treatment response with high accuracy."
  }, {
    word: "therapeutic drug monitoring",
    translation: "suivi thérapeutique des médicaments",
    example: "Therapeutic drug monitoring adjusts dosage based on measured drug levels."
  }, {
    word: "personalized dosing",
    translation: "dosage personnalisé",
    example: "Personalized dosing optimizes medication effectiveness while minimizing side effects."
  }, {
    word: "genome-guided therapy",
    translation: "thérapie guidée par le génome",
    example: "Genome-guided therapy selects treatments based on genetic information."
  }, {
    word: "prognostic test",
    translation: "test pronostique",
    example: "The prognostic test predicted disease progression risk accurately."
  }, {
    word: "digital phenotyping",
    translation: "phénotypage numérique",
    example: "Digital phenotyping collects health data through smartphones and wearables."
  }, {
    word: "pathway analysis",
    translation: "analyse des voies",
    example: "Pathway analysis identifies biological processes involved in disease manifestation."
  }, {
    word: "recurrence risk prediction",
    translation: "prédiction du risque de récidive",
    example: "The test provided accurate recurrence risk prediction after cancer treatment."
  }, {
    word: "adaptive therapy",
    translation: "thérapie adaptative",
    example: "Adaptive therapy adjusts treatment based on evolving disease characteristics."
  }, {
    word: "drug sensitivity testing",
    translation: "test de sensibilité aux médicaments",
    example: "Drug sensitivity testing identifies effective medications for individual patients."
  }, {
    word: "phenotypic precision medicine",
    translation: "médecine de précision phénotypique",
    example: "Phenotypic precision medicine incorporates comprehensive patient characteristics beyond genetics."
  }, {
    word: "induced pluripotent stem cell",
    translation: "cellule souche pluripotente induite",
    example: "Induced pluripotent stem cells are created from adult cells through genetic reprogramming."
  }, {
    word: "extracellular matrix",
    translation: "matrice extracellulaire",
    example: "The extracellular matrix provides structural support and biochemical cues for cells."
  }, {
    word: "cell differentiation",
    translation: "différenciation cellulaire",
    example: "Cell differentiation transforms stem cells into specialized cell types."
  }, {
    word: "organoid",
    translation: "organoïde",
    example: "Organoids are three-dimensional tissue cultures that mimic organs."
  }, {
    word: "regenerative capacity",
    translation: "capacité régénérative",
    example: "The therapy enhanced the tissue's natural regenerative capacity."
  }, {
    word: "mesenchymal stem cell",
    translation: "cellule souche mésenchymateuse",
    example: "Mesenchymal stem cells have regenerative and immunomodulatory properties."
  }, {
    word: "bioreactor",
    translation: "bioréacteur",
    example: "Bioreactors provide controlled environments for tissue cultivation."
  }, {
    word: "biocompatible material",
    translation: "matériau biocompatible",
    example: "Biocompatible materials integrate with biological systems without causing harm."
  }, {
    word: "cell expansion",
    translation: "expansion cellulaire",
    example: "Cell expansion increases the number of therapeutic cells through cultivation."
  }, {
    word: "tissue regeneration",
    translation: "régénération tissulaire",
    example: "Tissue regeneration restores structure and function to damaged areas."
  }, {
    word: "biodegradable scaffold",
    translation: "échafaudage biodégradable",
    example: "Biodegradable scaffolds support tissue growth and then dissolve over time."
  }, {
    word: "hematopoietic stem cell",
    translation: "cellule souche hématopoïétique",
    example: "Hematopoietic stem cells generate all blood cell types."
  }, {
    word: "gene-modified cell therapy",
    translation: "thérapie cellulaire génétiquement modifiée",
    example: "Gene-modified cell therapy enhances therapeutic effects through genetic engineering."
  }, {
    word: "cell delivery system",
    translation: "système d'administration cellulaire",
    example: "Cell delivery systems target therapeutic cells to specific tissues."
  }, {
    word: "self-renewal",
    translation: "auto-renouvellement",
    example: "Self-renewal allows stem cells to produce more stem cells indefinitely."
  }, {
    word: "regenerative factor",
    translation: "facteur régénératif",
    example: "Regenerative factors stimulate the body's natural healing processes."
  }, {
    word: "immune rejection",
    translation: "rejet immunitaire",
    example: "Immune rejection occurs when the body attacks transplanted cells or tissues."
  }, {
    word: "engraftment",
    translation: "prise de greffe",
    example: "Successful engraftment occurs when transplanted cells integrate with host tissue."
  }, {
    word: "cell therapy manufacturing",
    translation: "fabrication de thérapies cellulaires",
    example: "Cell therapy manufacturing produces standardized cellular products for treatment."
  }]
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,