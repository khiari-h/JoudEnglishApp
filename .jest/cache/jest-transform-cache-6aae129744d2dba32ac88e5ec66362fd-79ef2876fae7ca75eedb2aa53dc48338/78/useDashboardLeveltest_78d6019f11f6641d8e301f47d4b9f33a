13739f6b389230f422c2a460c9cd9531
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn()
  };
});
_getJestObj().mock('../../../../src/utils/constants', function () {
  return {
    LANGUAGE_LEVELS: {
      '1': {
        title: 'Débutant',
        color: '#10B981'
      },
      '2': {
        title: 'Élémentaire',
        color: '#3B82F6'
      },
      '3': {
        title: 'Intermédiaire',
        color: '#8B5CF6'
      },
      '4': {
        title: 'Intermédiaire+',
        color: '#F59E0B'
      },
      '5': {
        title: 'Avancé',
        color: '#EF4444'
      },
      '6': {
        title: 'Expert',
        color: '#EC4899'
      },
      'bonus': {
        title: 'Bonus',
        color: '#6366F1'
      }
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useDashboardLevel = require("../../../../src/screens/Dashboard/hooks/useDashboardLevel");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useDashboardLevel', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _asyncStorage.default.getItem.mockResolvedValue(null);
    _asyncStorage.default.setItem.mockResolvedValue();
  });
  it('devrait initialiser avec le niveau 1 par défaut', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardLevel.useDashboardLevel)({
          progress: {}
        });
      }),
      result = _renderHook.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.currentLevel).toBe('1');
      expect(result.current.isLoaded).toBe(true);
    });
  }));
  it('devrait charger le niveau sauvegardé depuis AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValue('3');
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardLevel.useDashboardLevel)({
          progress: {}
        });
      }),
      result = _renderHook2.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.currentLevel).toBe('3');
      expect(result.current.isLoaded).toBe(true);
    });
    expect(_asyncStorage.default.getItem).toHaveBeenCalledWith('user_active_level');
  }));
  it('devrait mapper les anciens niveaux vers les nouveaux', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValue('A2');
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardLevel.useDashboardLevel)({
          progress: {}
        });
      }),
      result = _renderHook3.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.currentLevel).toBe('1');
    });
  }));
  it('devrait utiliser le niveau du contexte progress si aucun niveau sauvegardé', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValue(null);
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardLevel.useDashboardLevel)({
          progress: {
            currentLevel: 'B1'
          }
        });
      }),
      result = _renderHook4.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.currentLevel).toBe('3');
    });
  }));
  it('devrait changer le niveau actif et le sauvegarder', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardLevel.useDashboardLevel)({
          progress: {}
        });
      }),
      result = _renderHook5.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoaded).toBe(true);
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleChangeActiveLevel('4');
    }));
    expect(result.current.currentLevel).toBe('4');
    expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('user_active_level', '4');
  }));
  it('ne devrait pas changer vers un niveau invalide', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardLevel.useDashboardLevel)({
          progress: {}
        });
      }),
      result = _renderHook6.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoaded).toBe(true);
    });
    var initialLevel = result.current.currentLevel;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleChangeActiveLevel('invalid_level');
    }));
    expect(result.current.currentLevel).toBe(initialLevel);
    expect(_asyncStorage.default.setItem).not.toHaveBeenCalled();
  }));
  it('devrait retourner la couleur du niveau courant', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValue('2');
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardLevel.useDashboardLevel)({
          progress: {}
        });
      }),
      result = _renderHook7.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.levelColor).toBe('#3B82F6');
    });
  }));
  it('devrait retourner une couleur par défaut pour un niveau invalide', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValue('invalid');
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardLevel.useDashboardLevel)({
          progress: {}
        });
      }),
      result = _renderHook8.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.levelColor).toBe('#3B82F6');
    });
  }));
  it('devrait synchroniser avec le progress context après le chargement initial', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook9 = (0, _reactNative.renderHook)(function (_ref10) {
        var progressData = _ref10.progressData;
        return (0, _useDashboardLevel.useDashboardLevel)({
          progress: progressData
        });
      }, {
        initialProps: {
          progressData: {}
        }
      }),
      result = _renderHook9.result,
      rerender = _renderHook9.rerender;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoaded).toBe(true);
    });
    rerender({
      progressData: {
        currentLevel: 'C1'
      }
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.currentLevel).toBe('5');
    });
  }));
  it('devrait gérer les erreurs de AsyncStorage gracieusement', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockRejectedValue(new Error('Storage error'));
    var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardLevel.useDashboardLevel)({
          progress: {}
        });
      }),
      result = _renderHook0.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoaded).toBe(true);
      expect(result.current.currentLevel).toBe('1');
    });
    expect(consoleSpy).toHaveBeenCalledWith('Erreur chargement niveau actif:', expect.any(Error));
    consoleSpy.mockRestore();
  }));
  it('devrait gérer les erreurs de sauvegarde gracieusement', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.setItem.mockRejectedValue(new Error('Save error'));
    var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
    var _renderHook1 = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardLevel.useDashboardLevel)({
          progress: {}
        });
      }),
      result = _renderHook1.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoaded).toBe(true);
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleChangeActiveLevel('3');
    }));
    expect(result.current.currentLevel).toBe('3');
    expect(consoleSpy).toHaveBeenCalledWith('Erreur sauvegarde niveau actif:', expect.any(Error));
    consoleSpy.mockRestore();
  }));
  it('ne devrait charger qu\'une seule fois au montage', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook10 = (0, _reactNative.renderHook)(function (_ref15) {
        var progressData = _ref15.progressData;
        return (0, _useDashboardLevel.useDashboardLevel)({
          progress: progressData
        });
      }, {
        initialProps: {
          progressData: {}
        }
      }),
      rerender = _renderHook10.rerender;
    yield (0, _reactNative.waitFor)(function () {
      expect(_asyncStorage.default.getItem).toHaveBeenCalledTimes(1);
    });
    rerender({
      progressData: {
        someOtherProp: 'value'
      }
    });
    rerender({
      progressData: {
        anotherProp: 'value2'
      }
    });
    expect(_asyncStorage.default.getItem).toHaveBeenCalledTimes(1);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,