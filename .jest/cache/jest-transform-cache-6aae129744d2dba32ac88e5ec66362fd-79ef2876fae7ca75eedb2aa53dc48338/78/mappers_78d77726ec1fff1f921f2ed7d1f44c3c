2ac99ba7afd1ff8989d4ca3f1fe10643
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startMapper = startMapper;
exports.stopMapper = stopMapper;
var _PlatformChecker = require("./PlatformChecker");
var _threads = require("./threads");
var _isSharedValue = require("./isSharedValue");
var IS_JEST = (0, _PlatformChecker.isJest)();
var _worklet_3430252739659_init_data = {
  code: "function createMapperRegistry_mappersTs1(){const{IS_JEST,isSharedValue}=this.__closure;const mappers=new Map();let sortedMappers=[];let runRequested=false;let processingMappers=false;function updateMappersOrder(){const pre=new Map();mappers.forEach(function(mapper){if(mapper.outputs){for(const output of mapper.outputs){const preMappers=pre.get(output);if(preMappers===undefined){pre.set(output,[mapper]);}else{preMappers.push(mapper);}}}});const visited=new Set();const newOrder=[];function dfs(mapper){visited.add(mapper);for(const input of mapper.inputs){const preMappers=pre.get(input);if(preMappers){for(const preMapper of preMappers){if(!visited.has(preMapper)){dfs(preMapper);}}}}newOrder.push(mapper);}mappers.forEach(function(mapper){if(!visited.has(mapper)){dfs(mapper);}});sortedMappers=newOrder;}function mapperRun(){runRequested=false;if(processingMappers){return;}try{processingMappers=true;if(mappers.size!==sortedMappers.length){updateMappersOrder();}for(const mapper of sortedMappers){if(mapper.dirty){mapper.dirty=false;mapper.worklet();}}}finally{processingMappers=false;}}function maybeRequestUpdates(){if(IS_JEST){mapperRun();}else if(!runRequested){if(processingMappers){requestAnimationFrame(mapperRun);}else{queueMicrotask(mapperRun);}runRequested=true;}}function extractInputs(inputs,resultArray){if(Array.isArray(inputs)){for(const input of inputs){input&&extractInputs(input,resultArray);}}else if(isSharedValue(inputs)){resultArray.push(inputs);}else if(Object.getPrototypeOf(inputs)===Object.prototype){for(const element of Object.values(inputs)){element&&extractInputs(element,resultArray);}}return resultArray;}return{start:function(mapperID,worklet,inputs,outputs){const mapper={id:mapperID,dirty:true,worklet:worklet,inputs:extractInputs(inputs,[]),outputs:outputs};mappers.set(mapper.id,mapper);sortedMappers=[];for(const sv of mapper.inputs){sv.addListener(mapper.id,function(){mapper.dirty=true;maybeRequestUpdates();});}maybeRequestUpdates();},stop:function(mapperID){const mapper=mappers.get(mapperID);if(mapper){mappers.delete(mapper.id);sortedMappers=[];for(const sv of mapper.inputs){sv.removeListener(mapper.id);}}}};}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\mappers.ts",
  sourceMap: "{\"version\":3,\"names\":[\"createMapperRegistry_mappersTs1\",\"IS_JEST\",\"isSharedValue\",\"__closure\",\"mappers\",\"Map\",\"sortedMappers\",\"runRequested\",\"processingMappers\",\"updateMappersOrder\",\"pre\",\"forEach\",\"mapper\",\"outputs\",\"output\",\"preMappers\",\"get\",\"undefined\",\"set\",\"push\",\"visited\",\"Set\",\"newOrder\",\"dfs\",\"add\",\"input\",\"inputs\",\"preMapper\",\"has\",\"mapperRun\",\"size\",\"length\",\"dirty\",\"worklet\",\"maybeRequestUpdates\",\"requestAnimationFrame\",\"queueMicrotask\",\"extractInputs\",\"resultArray\",\"Array\",\"isArray\",\"Object\",\"getPrototypeOf\",\"prototype\",\"element\",\"values\",\"start\",\"mapperID\",\"id\",\"sv\",\"addListener\",\"stop\",\"delete\",\"removeListener\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/mappers.ts\"],\"mappings\":\"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\",\"ignoreList\":[]}",
  version: "3.16.7"
};
var createMapperRegistry = function () {
  var _e = [new global.Error(), -3, -27];
  var createMapperRegistry = function createMapperRegistry() {
    var mappers = new Map();
    var sortedMappers = [];
    var runRequested = false;
    var processingMappers = false;
    function updateMappersOrder() {
      var pre = new Map();
      mappers.forEach(function (mapper) {
        if (mapper.outputs) {
          for (var output of mapper.outputs) {
            var preMappers = pre.get(output);
            if (preMappers === undefined) {
              pre.set(output, [mapper]);
            } else {
              preMappers.push(mapper);
            }
          }
        }
      });
      var visited = new Set();
      var newOrder = [];
      function dfs(mapper) {
        visited.add(mapper);
        for (var input of mapper.inputs) {
          var preMappers = pre.get(input);
          if (preMappers) {
            for (var preMapper of preMappers) {
              if (!visited.has(preMapper)) {
                dfs(preMapper);
              }
            }
          }
        }
        newOrder.push(mapper);
      }
      mappers.forEach(function (mapper) {
        if (!visited.has(mapper)) {
          dfs(mapper);
        }
      });
      sortedMappers = newOrder;
    }
    function mapperRun() {
      runRequested = false;
      if (processingMappers) {
        return;
      }
      try {
        processingMappers = true;
        if (mappers.size !== sortedMappers.length) {
          updateMappersOrder();
        }
        for (var mapper of sortedMappers) {
          if (mapper.dirty) {
            mapper.dirty = false;
            mapper.worklet();
          }
        }
      } finally {
        processingMappers = false;
      }
    }
    function maybeRequestUpdates() {
      if (IS_JEST) {
        mapperRun();
      } else if (!runRequested) {
        if (processingMappers) {
          requestAnimationFrame(mapperRun);
        } else {
          queueMicrotask(mapperRun);
        }
        runRequested = true;
      }
    }
    function extractInputs(inputs, resultArray) {
      if (Array.isArray(inputs)) {
        for (var input of inputs) {
          input && extractInputs(input, resultArray);
        }
      } else if ((0, _isSharedValue.isSharedValue)(inputs)) {
        resultArray.push(inputs);
      } else if (Object.getPrototypeOf(inputs) === Object.prototype) {
        for (var element of Object.values(inputs)) {
          element && extractInputs(element, resultArray);
        }
      }
      return resultArray;
    }
    return {
      start: function start(mapperID, worklet, inputs, outputs) {
        var mapper = {
          id: mapperID,
          dirty: true,
          worklet: worklet,
          inputs: extractInputs(inputs, []),
          outputs: outputs
        };
        mappers.set(mapper.id, mapper);
        sortedMappers = [];
        for (var sv of mapper.inputs) {
          sv.addListener(mapper.id, function () {
            mapper.dirty = true;
            maybeRequestUpdates();
          });
        }
        maybeRequestUpdates();
      },
      stop: function stop(mapperID) {
        var mapper = mappers.get(mapperID);
        if (mapper) {
          mappers.delete(mapper.id);
          sortedMappers = [];
          for (var sv of mapper.inputs) {
            sv.removeListener(mapper.id);
          }
        }
      }
    };
  };
  createMapperRegistry.__closure = {
    IS_JEST: IS_JEST,
    isSharedValue: _isSharedValue.isSharedValue
  };
  createMapperRegistry.__workletHash = 3430252739659;
  createMapperRegistry.__initData = _worklet_3430252739659_init_data;
  createMapperRegistry.__stackDetails = _e;
  return createMapperRegistry;
}();
var MAPPER_ID = 9999;
var _worklet_2799358392373_init_data = {
  code: "function mappersTs2(){const{createMapperRegistry,mapperID,worklet,inputs,outputs}=this.__closure;let mapperRegistry=global.__mapperRegistry;if(mapperRegistry===undefined){mapperRegistry=global.__mapperRegistry=createMapperRegistry();}mapperRegistry.start(mapperID,worklet,inputs,outputs);}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\mappers.ts",
  sourceMap: "{\"version\":3,\"names\":[\"mappersTs2\",\"createMapperRegistry\",\"mapperID\",\"worklet\",\"inputs\",\"outputs\",\"__closure\",\"mapperRegistry\",\"global\",\"__mapperRegistry\",\"undefined\",\"start\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/mappers.ts\"],\"mappings\":\"AA8MU,SAAAA,UAAMA,CAAA,QAAAC,oBAAA,CAAAC,QAAA,CAAAC,OAAA,CAAAC,MAAA,CAAAC,OAAA,OAAAC,SAAA,CACZ,GAAI,CAAAC,cAAc,CAAGC,MAAM,CAACC,gBAAgB,CAC5C,GAAIF,cAAc,GAAKG,SAAS,CAAE,CAChCH,cAAc,CAAGC,MAAM,CAACC,gBAAgB,CAAGR,oBAAoB,CAAC,CAAC,CACnE,CACAM,cAAc,CAACI,KAAK,CAACT,QAAQ,CAAEC,OAAO,CAAEC,MAAM,CAAEC,OAAO,CAAC,CAC1D\",\"ignoreList\":[]}",
  version: "3.16.7"
};
function startMapper(worklet) {
  var inputs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var outputs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var mapperID = MAPPER_ID += 1;
  (0, _threads.runOnUI)(function () {
    var _e = [new global.Error(), -6, -27];
    var mappersTs2 = function mappersTs2() {
      var mapperRegistry = global.__mapperRegistry;
      if (mapperRegistry === undefined) {
        mapperRegistry = global.__mapperRegistry = createMapperRegistry();
      }
      mapperRegistry.start(mapperID, worklet, inputs, outputs);
    };
    mappersTs2.__closure = {
      createMapperRegistry: createMapperRegistry,
      mapperID: mapperID,
      worklet: worklet,
      inputs: inputs,
      outputs: outputs
    };
    mappersTs2.__workletHash = 2799358392373;
    mappersTs2.__initData = _worklet_2799358392373_init_data;
    mappersTs2.__stackDetails = _e;
    return mappersTs2;
  }())();
  return mapperID;
}
var _worklet_5914939239065_init_data = {
  code: "function mappersTs3(){const{mapperID}=this.__closure;const mapperRegistry=global.__mapperRegistry;mapperRegistry===null||mapperRegistry===void 0||mapperRegistry.stop(mapperID);}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\mappers.ts",
  sourceMap: "{\"version\":3,\"names\":[\"mappersTs3\",\"mapperID\",\"__closure\",\"mapperRegistry\",\"global\",\"__mapperRegistry\",\"stop\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/mappers.ts\"],\"mappings\":\"AA0NU,SAAAA,UAAMA,CAAA,QAAAC,QAAA,OAAAC,SAAA,CACZ,KAAM,CAAAC,cAAc,CAAGC,MAAM,CAACC,gBAAgB,CAC9CF,cAAc,SAAdA,cAAc,WAAdA,cAAc,CAAEG,IAAI,CAACL,QAAQ,CAAC,CAChC\",\"ignoreList\":[]}",
  version: "3.16.7"
};
function stopMapper(mapperID) {
  (0, _threads.runOnUI)(function () {
    var _e = [new global.Error(), -2, -27];
    var mappersTs3 = function mappersTs3() {
      var mapperRegistry = global.__mapperRegistry;
      mapperRegistry == null || mapperRegistry.stop(mapperID);
    };
    mappersTs3.__closure = {
      mapperID: mapperID
    };
    mappersTs3.__workletHash = 5914939239065;
    mappersTs3.__initData = _worklet_5914939239065_init_data;
    mappersTs3.__stackDetails = _e;
    return mappersTs3;
  }())();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,