{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","useAnimatedProps","_slicedToArray2","ReactNativeFeatureFlags","_interopRequireWildcard","_ReactFabricPublicInstanceUtils","_useRefEffect","_AnimatedEvent","_NativeAnimatedHelper","_AnimatedNode","_AnimatedProps","_AnimatedValue","_react","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","has","get","set","_t","hasOwnProperty","call","getOwnPropertyDescriptor","props","_useReducer","useReducer","count","_useReducer2","scheduleUpdate","onUpdateRef","useRef","timerRef","node","useMemo","AnimatedProps","current","useNativePropsInFabric","shouldUseSetNativePropsInFabric","useSetNativePropsInNativeAnimationsInFabric","shouldUseSetNativePropsInNativeAnimationsInFabric","useAnimatedPropsLifecycle","usePassiveEffectsForAnimations","useAnimatedPropsLifecycle_passiveEffects","useAnimatedPropsLifecycle_layoutEffects","refEffect","useCallback","instance","setNativeView","process","env","NODE_ENV","isFabricNode","isFabricInstance","__isNative","setNativeProps","__getAnimatedValue","clearTimeout","setTimeout","target","getEventTarget","events","animatedValueListeners","propName","propValue","AnimatedEvent","__attach","push","addListenersToPropsValue","_ref","_ref2","__detach","_ref3","listenerId","removeListener","callbackRef","useRefEffect","reduceAnimatedProps","assign","__getValue","collapsable","accumulator","AnimatedValue","addListener","Array","isArray","prop","addAnimatedValuesListenersToProps","prevNodeRef","isUnmountingRef","useEffect","NativeAnimatedHelper","API","flushQueue","drivenAnimationEndedListener","nativeEventEmitter","data","update","_drivenAnimationEnded","remove","useLayoutEffect","prevNode","__restoreDefaultValues","_drivenAnimationEnded2","getScrollableNode","_instance$getScrollRe","isFabricPublicInstance","getNativeScrollRef","getScrollResponder"],"sources":["useAnimatedProps.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport type {EventSubscription} from '../EventEmitter/NativeEventEmitter';\n\nimport * as ReactNativeFeatureFlags from '../../src/private/featureflags/ReactNativeFeatureFlags';\nimport {isPublicInstance as isFabricPublicInstance} from '../ReactNative/ReactFabricPublicInstance/ReactFabricPublicInstanceUtils';\nimport useRefEffect from '../Utilities/useRefEffect';\nimport {AnimatedEvent} from './AnimatedEvent';\nimport NativeAnimatedHelper from '../../src/private/animated/NativeAnimatedHelper';\nimport AnimatedNode from './nodes/AnimatedNode';\nimport AnimatedProps from './nodes/AnimatedProps';\nimport AnimatedValue from './nodes/AnimatedValue';\nimport {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useReducer,\n  useRef,\n} from 'react';\n\ntype ReducedProps<TProps> = {\n  ...TProps,\n  collapsable: boolean,\n  ...\n};\ntype CallbackRef<T> = T => mixed;\n\ntype AnimatedValueListeners = Array<{\n  propValue: AnimatedValue,\n  listenerId: string,\n}>;\n\nexport default function useAnimatedProps<TProps: {...}, TInstance>(\n  props: TProps,\n): [ReducedProps<TProps>, CallbackRef<TInstance | null>] {\n  const [, scheduleUpdate] = useReducer<number, void>(count => count + 1, 0);\n  const onUpdateRef = useRef<?() => void>(null);\n  const timerRef = useRef<TimeoutID | null>(null);\n\n  // TODO: Only invalidate `node` if animated props or `style` change. In the\n  // previous implementation, we permitted `style` to override props with the\n  // same name property name as styles, so we can probably continue doing that.\n  // The ordering of other props *should* not matter.\n  const node = useMemo(\n    () => new AnimatedProps(props, () => onUpdateRef.current?.()),\n    [props],\n  );\n  const useNativePropsInFabric =\n    ReactNativeFeatureFlags.shouldUseSetNativePropsInFabric();\n  const useSetNativePropsInNativeAnimationsInFabric =\n    ReactNativeFeatureFlags.shouldUseSetNativePropsInNativeAnimationsInFabric();\n\n  const useAnimatedPropsLifecycle =\n    ReactNativeFeatureFlags.usePassiveEffectsForAnimations()\n      ? useAnimatedPropsLifecycle_passiveEffects\n      : useAnimatedPropsLifecycle_layoutEffects;\n\n  useAnimatedPropsLifecycle(node);\n\n  // TODO: This \"effect\" does three things:\n  //\n  //   1) Call `setNativeView`.\n  //   2) Update `onUpdateRef`.\n  //   3) Update listeners for `AnimatedEvent` props.\n  //\n  // Ideally, each of these would be separate \"effects\" so that they are not\n  // unnecessarily re-run when irrelevant dependencies change. For example, we\n  // should be able to hoist all `AnimatedEvent` props and only do #3 if either\n  // the `AnimatedEvent` props change or `instance` changes.\n  //\n  // But there is no way to transparently compose three separate callback refs,\n  // so we just combine them all into one for now.\n  const refEffect = useCallback(\n    (instance: TInstance) => {\n      // NOTE: This may be called more often than necessary (e.g. when `props`\n      // changes), but `setNativeView` already optimizes for that.\n      node.setNativeView(instance);\n\n      // NOTE: When using the JS animation driver, this callback is called on\n      // every animation frame. When using the native driver, this callback is\n      // called when the animation completes.\n      onUpdateRef.current = () => {\n        if (process.env.NODE_ENV === 'test') {\n          // Check 1: this is a test.\n          // call `scheduleUpdate` to bypass use of setNativeProps.\n          return scheduleUpdate();\n        }\n\n        const isFabricNode = isFabricInstance(instance);\n        if (node.__isNative) {\n          // Check 2: this is an animation driven by native.\n          // In native driven animations, this callback is only called once the animation completes.\n          if (isFabricNode) {\n            // Call `scheduleUpdate` to synchronise Fiber and Shadow tree.\n            // Must not be called in Paper.\n            if (useSetNativePropsInNativeAnimationsInFabric) {\n              // $FlowFixMe[incompatible-use]\n              instance.setNativeProps(node.__getAnimatedValue());\n            } else {\n              scheduleUpdate();\n            }\n          }\n          return;\n        }\n\n        if (\n          typeof instance !== 'object' ||\n          typeof instance?.setNativeProps !== 'function'\n        ) {\n          // Check 3: the instance does not support setNativeProps. Call `scheduleUpdate`.\n          return scheduleUpdate();\n        }\n\n        if (!isFabricNode) {\n          // Check 4: this is a paper instance, call setNativeProps.\n          // $FlowIgnore[not-a-function] - Assume it's still a function.\n          // $FlowFixMe[incompatible-use]\n          return instance.setNativeProps(node.__getAnimatedValue());\n        }\n\n        if (!useNativePropsInFabric) {\n          // Check 5: setNativeProps are disabled.\n          return scheduleUpdate();\n        }\n\n        // This is a Fabric instance and setNativeProps is supported.\n\n        // $FlowIgnore[not-a-function] - Assume it's still a function.\n        // $FlowFixMe[incompatible-use]\n        instance.setNativeProps(node.__getAnimatedValue());\n\n        // Keeping state of Fiber tree and Shadow tree in sync.\n        //\n        // This is done by calling `scheduleUpdate` which will trigger a commit.\n        // However, React commit is not fast enough to drive animations.\n        // This is where setNativeProps comes in handy but the state between\n        // Fiber tree and Shadow tree needs to be kept in sync.\n        // The goal is to call `scheduleUpdate` as little as possible to maintain\n        // performance but frequently enough to keep state in sync.\n        // Debounce is set to 48ms, which is 3 * the duration of a frame.\n        // 3 frames was the highest value where flickering state was not observed.\n        if (timerRef.current != null) {\n          clearTimeout(timerRef.current);\n        }\n        timerRef.current = setTimeout(() => {\n          timerRef.current = null;\n          scheduleUpdate();\n        }, 48);\n      };\n\n      const target = getEventTarget(instance);\n      const events = [];\n      const animatedValueListeners: AnimatedValueListeners = [];\n\n      for (const propName in props) {\n        // $FlowFixMe[invalid-computed-prop]\n        const propValue = props[propName];\n        if (propValue instanceof AnimatedEvent && propValue.__isNative) {\n          propValue.__attach(target, propName);\n          events.push([propName, propValue]);\n          // $FlowFixMe[incompatible-call] - the `addListenersToPropsValue` drills down the propValue.\n          addListenersToPropsValue(propValue, animatedValueListeners);\n        }\n      }\n\n      return () => {\n        onUpdateRef.current = null;\n\n        for (const [propName, propValue] of events) {\n          propValue.__detach(target, propName);\n        }\n\n        for (const {propValue, listenerId} of animatedValueListeners) {\n          propValue.removeListener(listenerId);\n        }\n      };\n    },\n    [\n      node,\n      useNativePropsInFabric,\n      useSetNativePropsInNativeAnimationsInFabric,\n      props,\n    ],\n  );\n  const callbackRef = useRefEffect<TInstance>(refEffect);\n\n  return [reduceAnimatedProps<TProps>(node), callbackRef];\n}\n\nfunction reduceAnimatedProps<TProps>(node: AnimatedNode): ReducedProps<TProps> {\n  // Force `collapsable` to be false so that the native view is not flattened.\n  // Flattened views cannot be accurately referenced by the native driver.\n  return {\n    ...node.__getValue(),\n    collapsable: false,\n  };\n}\n\nfunction addListenersToPropsValue(\n  propValue: AnimatedValue,\n  accumulator: AnimatedValueListeners,\n) {\n  // propValue can be a scalar value, an array or an object.\n  if (propValue instanceof AnimatedValue) {\n    const listenerId = propValue.addListener(() => {});\n    accumulator.push({propValue, listenerId});\n  } else if (Array.isArray(propValue)) {\n    // An array can be an array of scalar values, arrays of arrays, or arrays of objects\n    for (const prop of propValue) {\n      addListenersToPropsValue(prop, accumulator);\n    }\n  } else if (propValue instanceof Object) {\n    addAnimatedValuesListenersToProps(propValue, accumulator);\n  }\n}\n\nfunction addAnimatedValuesListenersToProps(\n  props: AnimatedNode,\n  accumulator: AnimatedValueListeners,\n) {\n  for (const propName in props) {\n    // $FlowFixMe[prop-missing] - This is an object contained in a prop, but we don't know the exact type.\n    const propValue = props[propName];\n    addListenersToPropsValue(propValue, accumulator);\n  }\n}\n\n/**\n * Manages the lifecycle of the supplied `AnimatedProps` by invoking `__attach`\n * and `__detach`. However, this is more complicated because `AnimatedProps`\n * uses reference counting to determine when to recursively detach its children\n * nodes. So in order to optimize this, we avoid detaching until the next attach\n * unless we are unmounting.\n */\nfunction useAnimatedPropsLifecycle_layoutEffects(node: AnimatedProps): void {\n  const prevNodeRef = useRef<?AnimatedProps>(null);\n  const isUnmountingRef = useRef<boolean>(false);\n\n  useEffect(() => {\n    // It is ok for multiple components to call `flushQueue` because it noops\n    // if the queue is empty. When multiple animated components are mounted at\n    // the same time. Only first component flushes the queue and the others will noop.\n    NativeAnimatedHelper.API.flushQueue();\n    let drivenAnimationEndedListener: ?EventSubscription = null;\n    if (node.__isNative) {\n      drivenAnimationEndedListener =\n        NativeAnimatedHelper.nativeEventEmitter.addListener(\n          'onUserDrivenAnimationEnded',\n          data => {\n            node.update();\n          },\n        );\n    }\n\n    return () => {\n      drivenAnimationEndedListener?.remove();\n    };\n  });\n\n  useLayoutEffect(() => {\n    isUnmountingRef.current = false;\n    return () => {\n      isUnmountingRef.current = true;\n    };\n  }, []);\n\n  useLayoutEffect(() => {\n    node.__attach();\n    if (prevNodeRef.current != null) {\n      const prevNode = prevNodeRef.current;\n      // TODO: Stop restoring default values (unless `reset` is called).\n      prevNode.__restoreDefaultValues();\n      prevNode.__detach();\n      prevNodeRef.current = null;\n    }\n    return () => {\n      if (isUnmountingRef.current) {\n        // NOTE: Do not restore default values on unmount, see D18197735.\n        node.__detach();\n      } else {\n        prevNodeRef.current = node;\n      }\n    };\n  }, [node]);\n}\n\n/**\n * Manages the lifecycle of the supplied `AnimatedProps` by invoking `__attach`\n * and `__detach`. However, this is more complicated because `AnimatedProps`\n * uses reference counting to determine when to recursively detach its children\n * nodes. So in order to optimize this, we avoid detaching until the next attach\n * unless we are unmounting.\n *\n * NOTE: unlike `useAnimatedPropsLifecycle_layoutEffects`, this version uses passive effects to setup animation graph.\n */\nfunction useAnimatedPropsLifecycle_passiveEffects(node: AnimatedProps): void {\n  const prevNodeRef = useRef<?AnimatedProps>(null);\n  const isUnmountingRef = useRef<boolean>(false);\n\n  useEffect(() => {\n    // It is ok for multiple components to call `flushQueue` because it noops\n    // if the queue is empty. When multiple animated components are mounted at\n    // the same time. Only first component flushes the queue and the others will noop.\n    NativeAnimatedHelper.API.flushQueue();\n  });\n\n  useEffect(() => {\n    isUnmountingRef.current = false;\n    return () => {\n      isUnmountingRef.current = true;\n    };\n  }, []);\n\n  useEffect(() => {\n    node.__attach();\n    let drivenAnimationEndedListener: ?EventSubscription = null;\n\n    if (node.__isNative) {\n      drivenAnimationEndedListener =\n        NativeAnimatedHelper.nativeEventEmitter.addListener(\n          'onUserDrivenAnimationEnded',\n          data => {\n            node.update();\n          },\n        );\n    }\n    if (prevNodeRef.current != null) {\n      const prevNode = prevNodeRef.current;\n      // TODO: Stop restoring default values (unless `reset` is called).\n      prevNode.__restoreDefaultValues();\n      prevNode.__detach();\n      prevNodeRef.current = null;\n    }\n    return () => {\n      if (isUnmountingRef.current) {\n        // NOTE: Do not restore default values on unmount, see D18197735.\n        node.__detach();\n      } else {\n        prevNodeRef.current = node;\n      }\n\n      drivenAnimationEndedListener?.remove();\n    };\n  }, [node]);\n}\n\nfunction getEventTarget<TInstance>(instance: TInstance): TInstance {\n  return typeof instance === 'object' &&\n    typeof instance?.getScrollableNode === 'function'\n    ? // $FlowFixMe[incompatible-use] - Legacy instance assumptions.\n      instance.getScrollableNode()\n    : instance;\n}\n\n// $FlowFixMe[unclear-type] - Legacy instance assumptions.\nfunction isFabricInstance(instance: any): boolean {\n  return (\n    isFabricPublicInstance(instance) ||\n    // Some components have a setNativeProps function but aren't a host component\n    // such as lists like FlatList and SectionList. These should also use\n    // forceUpdate in Fabric since setNativeProps doesn't exist on the underlying\n    // host component. This crazy hack is essentially special casing those lists and\n    // ScrollView itself to use forceUpdate in Fabric.\n    // If these components end up using forwardRef then these hacks can go away\n    // as instance would actually be the underlying host component and the above check\n    // would be sufficient.\n    isFabricPublicInstance(instance?.getNativeScrollRef?.()) ||\n    isFabricPublicInstance(\n      instance?.getScrollResponder?.()?.getNativeScrollRef?.(),\n    )\n  );\n}\n"],"mappings":"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","ignoreList":[]}