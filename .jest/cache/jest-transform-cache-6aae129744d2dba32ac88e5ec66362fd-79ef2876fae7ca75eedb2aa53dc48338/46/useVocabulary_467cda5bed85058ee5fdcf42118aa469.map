{"version":3,"names":["_react","require","_reactNative","_asyncStorage","_interopRequireDefault","useVocabulary","_currentCategory$word","_currentCategory$word2","vocabularyData","arguments","length","undefined","level","mode","_useState","useState","_useState2","_slicedToArray2","default","categoryIndex","setCategoryIndex","_useState3","_useState4","wordIndex","setWordIndex","_useState5","_useState6","showTranslation","setShowTranslation","_useState7","_useState8","completedWords","setCompletedWords","_useState9","_useState0","loaded","setLoaded","_useState1","_useState10","showDetailedProgress","setShowDetailedProgress","isInitialized","useRef","exercises","currentCategory","title","words","currentWord","word","translation","definition","example","totalCategories","totalWordsInCategory","progressKey","STORAGE_KEY","useEffect","loadData","_ref","_asyncToGenerator2","saved","AsyncStorage","getItem","_JSON$parse","JSON","parse","savedCompleted","lastPosition","error","apply","saveData","useCallback","dataToSave","setItem","stringify","current","newCompletedWords","Object","assign","forEach","_","index","changeCategory","newCategoryIndex","goToNextWord","prev","goToPreviousWord","toggleTranslation","toggleDetailedProgress","markWordAsCompleted","catIndex","wIndex","categoryCompleted","isAlreadyCompleted","find","newWordEntry","timestamp","Date","now","date","toDateString","_defineProperty2","concat","_toConsumableArray2","findNextUncompletedCategory","numCategories","i","_completedWords$nextI","_category$words","nextIndex","category","completedInCategory","totalInCategory","handleNext","nextCategoryIndex","completionMessage","Alert","alert","completed","handlePrevious","_previousCategory$wor","previousCategoryIndex","previousCategory","lastWordIndex","getStats","_completedWords$categ","totalWords","reduce","sum","cat","_cat$words","completedWordsCount","values","categoryCount","totalProgress","Math","round","completedInCurrentCategory","totalInCurrentCategory","getDisplayData","wordCounter","categories","map","canGoToPrevious","isLastWordInExercise","stats","display","_default","exports"],"sources":["useVocabulary.js"],"sourcesContent":["// hooks/useVocabulary.js - AVEC TIMESTAMPS POUR COMPTAGE QUOTIDIEN\r\n\r\nimport { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { Alert } from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nconst useVocabulary = (vocabularyData = null, level = \"1\", mode = \"classic\") => {\r\n  \r\n  const [categoryIndex, setCategoryIndex] = useState(0);\r\n  const [wordIndex, setWordIndex] = useState(0);\r\n  const [showTranslation, setShowTranslation] = useState(false);\r\n  const [completedWords, setCompletedWords] = useState({});\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [showDetailedProgress, setShowDetailedProgress] = useState(false);\r\n\r\n  const isInitialized = useRef(false);\r\n\r\n  const exercises = vocabularyData?.exercises || [];\r\n  const currentCategory = exercises[categoryIndex] || { title: \"\", words: [] };\r\n  const currentWord = currentCategory.words?.[wordIndex] || { word: \"\", translation: \"\", definition: \"\", example: \"\" };\r\n  const totalCategories = exercises.length;\r\n  const totalWordsInCategory = currentCategory.words?.length || 0;\r\n  \r\n  const progressKey = `${level}_${mode}`;\r\n  const STORAGE_KEY = `vocabulary_${progressKey}`;\r\n\r\n  // Load data from storage\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      try {\r\n        const saved = await AsyncStorage.getItem(STORAGE_KEY);\r\n        if (saved) {\r\n          const { completedWords: savedCompleted, lastPosition } = JSON.parse(saved);\r\n          setCompletedWords(savedCompleted || {});\r\n          if (lastPosition) {\r\n            setCategoryIndex(lastPosition.categoryIndex || 0);\r\n            setWordIndex(lastPosition.wordIndex || 0);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        // Silently fail\r\n      } finally {\r\n        setLoaded(true);\r\n      }\r\n    };\r\n    loadData();\r\n  }, [progressKey]);\r\n\r\n  // Save data to storage\r\n  const saveData = useCallback(async () => {\r\n    try {\r\n      const dataToSave = {\r\n        completedWords,\r\n        lastPosition: {\r\n          categoryIndex,\r\n          wordIndex\r\n        }\r\n      };\r\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(dataToSave));\r\n    } catch (error) {\r\n      // Silently fail\r\n    }\r\n  }, [completedWords, categoryIndex, wordIndex, STORAGE_KEY]);\r\n\r\n  // Auto-save when data changes\r\n  useEffect(() => {\r\n    if (loaded) saveData();\r\n  }, [saveData, loaded]);\r\n\r\n  // Initialize progress for new categories\r\n  useEffect(() => {\r\n    if (loaded && vocabularyData && !isInitialized.current) {\r\n      const newCompletedWords = { ...completedWords };\r\n      exercises.forEach((_, index) => {\r\n        if (!newCompletedWords[index]) {\r\n          newCompletedWords[index] = [];\r\n        }\r\n      });\r\n      setCompletedWords(newCompletedWords);\r\n      isInitialized.current = true;\r\n    }\r\n  }, [loaded, vocabularyData, exercises, completedWords]);\r\n\r\n  // Navigation actions\r\n  const changeCategory = useCallback((newCategoryIndex) => {\r\n    setCategoryIndex(newCategoryIndex);\r\n    setWordIndex(0);\r\n    setShowTranslation(false);\r\n  }, []);\r\n\r\n  const goToNextWord = useCallback(() => {\r\n    setWordIndex(prev => prev + 1);\r\n    setShowTranslation(false);\r\n  }, []);\r\n\r\n  const goToPreviousWord = useCallback(() => {\r\n    if (wordIndex > 0) {\r\n      setWordIndex(prev => prev - 1);\r\n      setShowTranslation(false);\r\n      return true;\r\n    }\r\n    return false;\r\n  }, [wordIndex]);\r\n\r\n  const toggleTranslation = useCallback(() => {\r\n    setShowTranslation(prev => !prev);\r\n  }, []);\r\n\r\n  const toggleDetailedProgress = useCallback(() => {\r\n    setShowDetailedProgress(prev => !prev);\r\n  }, []);\r\n\r\n  // =================== COMPLETION AVEC TIMESTAMP ===================\r\n  \r\n  const markWordAsCompleted = useCallback((catIndex, wIndex) => {\r\n    setCompletedWords(prev => {\r\n      const categoryCompleted = prev[catIndex] || [];\r\n      \r\n      // Vérifier si le mot n'est pas déjà complété\r\n      const isAlreadyCompleted = categoryCompleted.find(word => \r\n        (typeof word === 'number' && word === wIndex) || \r\n        (typeof word === 'object' && word.wordIndex === wIndex)\r\n      );\r\n      \r\n      if (!isAlreadyCompleted) {\r\n        // ✅ NOUVEAU FORMAT avec timestamp\r\n        const newWordEntry = {\r\n          wordIndex: wIndex,\r\n          timestamp: Date.now(),\r\n          date: new Date().toDateString() // Pour debug\r\n        };\r\n        \r\n        return {\r\n          ...prev,\r\n          [catIndex]: [...categoryCompleted, newWordEntry]\r\n        };\r\n      }\r\n      return prev;\r\n    });\r\n  }, []);\r\n\r\n  // Find next uncompleted category\r\n  const findNextUncompletedCategory = useCallback(() => {\r\n    const numCategories = exercises.length;\r\n    for (let i = 1; i <= numCategories; i++) {\r\n      const nextIndex = (categoryIndex + i) % numCategories;\r\n      const category = exercises[nextIndex];\r\n      const completedInCategory = completedWords[nextIndex]?.length || 0;\r\n      const totalInCategory = category.words?.length || 0;\r\n      \r\n      if (completedInCategory < totalInCategory) {\r\n        return nextIndex;\r\n      }\r\n    }\r\n    return -1;\r\n  }, [exercises, categoryIndex, completedWords]);\r\n\r\n  // Main navigation\r\n  const handleNext = useCallback(() => {\r\n    markWordAsCompleted(categoryIndex, wordIndex);\r\n\r\n    if (wordIndex < totalWordsInCategory - 1) {\r\n      goToNextWord();\r\n    } else {\r\n      const nextCategoryIndex = findNextUncompletedCategory();\r\n      if (nextCategoryIndex === -1) {\r\n        const completionMessage = mode === \"fast\"\r\n          ? `Félicitations ! Vous avez terminé le Fast Vocabulary ${level} !`\r\n          : `Félicitations ! Vous avez terminé le vocabulaire ${level} !`;\r\n        \r\n        Alert.alert(\"Félicitations\", completionMessage);\r\n        return { completed: true };\r\n      } else {\r\n        changeCategory(nextCategoryIndex);\r\n      }\r\n    }\r\n    return { completed: false };\r\n  }, [categoryIndex, wordIndex, totalWordsInCategory, markWordAsCompleted, goToNextWord, findNextUncompletedCategory, changeCategory, mode, level]);\r\n\r\n  const handlePrevious = useCallback(() => {\r\n    if (wordIndex > 0) {\r\n      goToPreviousWord();\r\n      return;\r\n    }\r\n    \r\n    if (categoryIndex > 0) {\r\n      const previousCategoryIndex = categoryIndex - 1;\r\n      const previousCategory = exercises[previousCategoryIndex];\r\n      const lastWordIndex = (previousCategory.words?.length || 1) - 1;\r\n      \r\n      setCategoryIndex(previousCategoryIndex);\r\n      setWordIndex(lastWordIndex);\r\n      setShowTranslation(false);\r\n    }\r\n  }, [wordIndex, categoryIndex, exercises, goToPreviousWord]);\r\n\r\n  // =================== STATS AVEC COMPATIBILITÉ ===================\r\n  \r\n  const getStats = useCallback(() => {\r\n    const totalWords = exercises.reduce((sum, cat) => sum + (cat.words?.length || 0), 0);\r\n    \r\n    // ✅ COMPATIBILITÉ : Gérer ancien format (number) et nouveau format (object)\r\n    const completedWordsCount = Object.values(completedWords).reduce((sum, completed) => {\r\n      const categoryCount = (completed || []).length;\r\n      return sum + categoryCount;\r\n    }, 0);\r\n    \r\n    const totalProgress = totalWords > 0 ? Math.round((completedWordsCount / totalWords) * 100) : 0;\r\n\r\n    return {\r\n      totalWords,\r\n      completedWordsCount,\r\n      totalProgress,\r\n      completedInCurrentCategory: completedWords[categoryIndex]?.length || 0,\r\n      totalInCurrentCategory: totalWordsInCategory\r\n    };\r\n  }, [exercises, completedWords, categoryIndex, totalWordsInCategory]);\r\n\r\n  // Display data\r\n  const getDisplayData = useCallback(() => {\r\n    const wordCounter = `${wordIndex + 1} / ${totalWordsInCategory}`;\r\n    const categories = exercises.map(cat => cat.title);\r\n    \r\n    return {\r\n      wordCounter,\r\n      categories,\r\n      currentWord,\r\n      currentCategory\r\n    };\r\n  }, [wordIndex, totalWordsInCategory, exercises, currentWord, currentCategory]);\r\n\r\n  // Validation\r\n  const canGoToPrevious = useCallback(() => {\r\n    if (wordIndex > 0) return true;\r\n    if (categoryIndex > 0) {\r\n      const previousCategory = exercises[categoryIndex - 1];\r\n      return previousCategory?.words && previousCategory.words.length > 0;\r\n    }\r\n    return false;\r\n  }, [wordIndex, categoryIndex, exercises]);\r\n\r\n  const isLastWordInExercise = useCallback(() => {\r\n    return wordIndex === totalWordsInCategory - 1;\r\n  }, [wordIndex, totalWordsInCategory]);\r\n\r\n  return {\r\n    categoryIndex,\r\n    wordIndex,\r\n    showTranslation,\r\n    completedWords,\r\n    loaded,\r\n    showDetailedProgress,\r\n    currentWord,\r\n    currentCategory,\r\n    totalCategories,\r\n    totalWordsInCategory,\r\n    changeCategory,\r\n    toggleTranslation,\r\n    toggleDetailedProgress,\r\n    handleNext,\r\n    handlePrevious,\r\n    canGoToPrevious: canGoToPrevious(),\r\n    isLastWordInExercise: isLastWordInExercise(),\r\n    stats: getStats(),\r\n    display: getDisplayData(),\r\n    saveData,\r\n  };\r\n};\r\n\r\nexport default useVocabulary;"],"mappings":"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","ignoreList":[]}