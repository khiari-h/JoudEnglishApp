e0f1f41ff23668846aed03d889cdb703
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SettingsProvider = exports.SettingsContext = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _storageUtils = require("../utils/storageUtils");
var _constants = require("../utils/constants");
var _jsxRuntime = require("react/jsx-runtime");
var SettingsContext = exports.SettingsContext = (0, _react.createContext)();
var SettingsProvider = exports.SettingsProvider = function SettingsProvider(_ref) {
  var children = _ref.children;
  var _useState = (0, _react.useState)(_constants.DEFAULT_SETTINGS),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    settings = _useState2[0],
    setSettings = _useState2[1];
  var _useState3 = (0, _react.useState)(true),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isLoading = _useState4[0],
    setIsLoading = _useState4[1];
  (0, _react.useEffect)(function () {
    var loadSettings = function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* () {
        try {
          setIsLoading(true);
          var savedSettings = yield (0, _storageUtils.getData)('userSettings');
          if (savedSettings) {
            setSettings(Object.assign({}, _constants.DEFAULT_SETTINGS, savedSettings));
          }
        } catch (error) {} finally {
          setIsLoading(false);
        }
      });
      return function loadSettings() {
        return _ref2.apply(this, arguments);
      };
    }();
    loadSettings();
  }, []);
  (0, _react.useEffect)(function () {
    if (!isLoading) {
      (0, _storageUtils.storeData)('userSettings', settings);
    }
  }, [settings, isLoading]);
  var updateSetting = function updateSetting(key, value) {
    if (settings[key] === undefined) {
      return;
    }
    setSettings(function (prevSettings) {
      return Object.assign({}, prevSettings, (0, _defineProperty2.default)({}, key, value));
    });
  };
  var updateSettings = function updateSettings(newSettings) {
    setSettings(function (prevSettings) {
      return Object.assign({}, prevSettings, newSettings);
    });
  };
  var resetSettings = function resetSettings() {
    setSettings(_constants.DEFAULT_SETTINGS);
  };
  var areNotificationsEnabled = function areNotificationsEnabled() {
    return settings.notifications;
  };
  var getDailyGoal = function getDailyGoal() {
    return settings.dailyGoal;
  };
  var setDailyGoal = function setDailyGoal(minutes) {
    updateSetting('dailyGoal', Math.max(1, Math.min(120, minutes)));
  };
  var contextValue = {
    settings: settings,
    updateSetting: updateSetting,
    updateSettings: updateSettings,
    resetSettings: resetSettings,
    areNotificationsEnabled: areNotificationsEnabled,
    getDailyGoal: getDailyGoal,
    setDailyGoal: setDailyGoal,
    isLoading: isLoading
  };
  return (0, _jsxRuntime.jsx)(SettingsContext.Provider, {
    value: contextValue,
    children: children
  });
};
var _default = exports.default = SettingsContext;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,