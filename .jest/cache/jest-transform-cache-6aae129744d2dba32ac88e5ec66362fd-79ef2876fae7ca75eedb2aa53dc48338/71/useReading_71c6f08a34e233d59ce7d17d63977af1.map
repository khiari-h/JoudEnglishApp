{"version":3,"names":["_react","require","_reactNative","_asyncStorage","_interopRequireDefault","useReading","_currentExercise$ques","_currentExercise$ques2","_completedQuestions$s2","exercises","arguments","length","undefined","level","_useState","useState","_useState2","_slicedToArray2","default","selectedExerciseIndex","setSelectedExerciseIndex","_useState3","_useState4","currentQuestionIndex","setCurrentQuestionIndex","_useState5","_useState6","selectedAnswer","setSelectedAnswer","_useState7","_useState8","showFeedback","setShowFeedback","_useState9","_useState0","textExpanded","setTextExpanded","_useState1","_useState10","attempts","setAttempts","_useState11","_useState12","completedQuestions","setCompletedQuestions","_useState13","_useState14","loaded","setLoaded","_useState15","_useState16","showDetailedProgress","setShowDetailedProgress","_useState17","_useState18","isCorrect","setIsCorrect","scrollViewRef","useRef","textsScrollViewRef","fadeAnim","Animated","Value","current","slideAnim","isInitialized","currentExercise","title","text","questions","currentQuestion","totalExercises","totalQuestions","STORAGE_KEY","loadProgress","useCallback","_asyncToGenerator2","storedProgress","AsyncStorage","getItem","JSON","parse","error","console","saveProgress","setItem","stringify","useEffect","_scrollViewRef$curren","_textsScrollViewRef$c","scrollTo","y","animated","changeExercise","index","changeQuestion","selectAnswer","answer","submitAnswer","Alert","alert","isCurrentAnswerCorrect","correctAnswer","prev","newCompleted","Object","assign","includes","push","nextQuestion","previousQuestion","prevExercise","retryQuestion","toggleTextExpansion","toggleDetailedProgress","getProgress","_completedQuestions$s","totalCompletedQuestions","values","reduce","sum","completed","totalQuestionsAllExercises","ex","_ex$questions","completedInCurrentExercise","progressPercent","overallProgress","overall","completedInCurrent","totalInCurrent","completedOverall","totalOverall","isQuestionCompleted","progress","_default","exports"],"sources":["useReading.js"],"sourcesContent":["// hooks/useReading.js - BOUCLES INFINIES CORRIGÉES ET CATCH BLOCKS CORRIGÉS\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { Animated, Alert } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nconst useReading = (exercises = [], level = \"A1\") => {\n\n  const [selectedExerciseIndex, setSelectedExerciseIndex] = useState(0);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [showFeedback, setShowFeedback] = useState(false);\n  const [textExpanded, setTextExpanded] = useState(true);\n  const [attempts, setAttempts] = useState(0);\n  const [completedQuestions, setCompletedQuestions] = useState({});\n  const [loaded, setLoaded] = useState(false);\n  const [showDetailedProgress, setShowDetailedProgress] = useState(false);\n  const [isCorrect, setIsCorrect] = useState(false);\n\n  // =================== REFS & ANIMATIONS ===================\n  const scrollViewRef = useRef(null);\n  const textsScrollViewRef = useRef(null);\n  const fadeAnim = useRef(new Animated.Value(1)).current;\n  const slideAnim = useRef(new Animated.Value(0)).current;\n  const isInitialized = useRef(false);\n\n  // =================== COMPUTED VALUES ===================\n  const currentExercise = exercises[selectedExerciseIndex] || { title: \"\", text: \"\", questions: [] };\n  const currentQuestion = currentExercise.questions?.[currentQuestionIndex] || null;\n  const totalExercises = exercises.length;\n  const totalQuestions = currentExercise.questions?.length || 0;\n\n  // =================== ASYNC STORAGE ===================\n  const STORAGE_KEY = `reading_progress_${level}`;\n\n  const loadProgress = useCallback(async () => {\n    try {\n      const storedProgress = await AsyncStorage.getItem(STORAGE_KEY);\n      if (storedProgress) {\n        setCompletedQuestions(JSON.parse(storedProgress));\n      }\n    } catch (error) {\n      console.error('Erreur lors du chargement de la progression de lecture:', error);\n    } finally {\n      setLoaded(true);\n    }\n  }, [STORAGE_KEY]);\n\n  const saveProgress = useCallback(async () => {\n    try {\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(completedQuestions));\n    } catch (error) {\n      console.error('Erreur lors de la sauvegarde de la progression de lecture:', error);\n    }\n  }, [completedQuestions, STORAGE_KEY]);\n\n  // =================== EFFECTS ===================\n  useEffect(() => {\n    loadProgress();\n  }, [loadProgress]);\n\n  useEffect(() => {\n    if (loaded) {\n      saveProgress();\n    }\n  }, [completedQuestions, loaded, saveProgress]);\n\n  // Réinitialiser le feedback et la réponse sélectionnée quand l'exercice ou la question change\n  useEffect(() => {\n    setShowFeedback(false);\n    setSelectedAnswer(null);\n    setAttempts(0); // Réinitialiser les tentatives pour la nouvelle question\n    setTextExpanded(true); // Toujours démarrer avec le texte développé pour une nouvelle question\n\n    if (currentQuestionIndex === 0 && selectedExerciseIndex === 0 && !isInitialized.current) {\n      // Ne pas scroller au premier chargement initial\n      isInitialized.current = true;\n    } else {\n      // Scroller vers le haut si on n'est pas au chargement initial\n      scrollViewRef.current?.scrollTo({ y: 0, animated: true });\n      textsScrollViewRef.current?.scrollTo({ y: 0, animated: true });\n    }\n  }, [currentQuestionIndex, selectedExerciseIndex]);\n\n\n  // =================== ACTIONS ===================\n\n  const changeExercise = useCallback((index) => {\n    if (index >= 0 && index < totalExercises) {\n      setSelectedExerciseIndex(index);\n      setCurrentQuestionIndex(0); // Toujours revenir à la première question\n    }\n  }, [totalExercises]);\n\n  const changeQuestion = useCallback((index) => {\n    if (index >= 0 && index < totalQuestions) {\n      setCurrentQuestionIndex(index);\n    }\n  }, [totalQuestions]);\n\n  const selectAnswer = useCallback((answer) => {\n    if (!showFeedback) {\n      setSelectedAnswer(answer);\n    }\n  }, [showFeedback]);\n\n  const submitAnswer = useCallback(() => {\n    if (!currentQuestion || selectedAnswer === null) {\n      Alert.alert(\"Sélection requise\", \"Veuillez sélectionner une réponse.\");\n      return;\n    }\n\n    const isCurrentAnswerCorrect = selectedAnswer === currentQuestion.correctAnswer;\n    setIsCorrect(isCurrentAnswerCorrect);\n    setShowFeedback(true);\n    setAttempts(prev => prev + 1);\n\n    if (isCurrentAnswerCorrect) {\n      setCompletedQuestions(prev => {\n        const newCompleted = { ...prev };\n        if (!newCompleted[selectedExerciseIndex]) {\n          newCompleted[selectedExerciseIndex] = [];\n        }\n        if (!newCompleted[selectedExerciseIndex].includes(currentQuestionIndex)) {\n          newCompleted[selectedExerciseIndex].push(currentQuestionIndex);\n        }\n        return newCompleted;\n      });\n    } else {\n      // Optionnel: Réinitialiser selectedAnswer si incorrect pour permettre une nouvelle tentative\n      // setSelectedAnswer(null);\n    }\n  }, [currentQuestion, selectedAnswer, selectedExerciseIndex, currentQuestionIndex]);\n\n  const nextQuestion = useCallback(() => {\n    if (currentQuestionIndex < totalQuestions - 1) {\n      changeQuestion(currentQuestionIndex + 1);\n    } else {\n      // Si c'est la dernière question de l'exercice actuel, passer à l'exercice suivant\n      if (selectedExerciseIndex < totalExercises - 1) {\n        changeExercise(selectedExerciseIndex + 1);\n      } else {\n        // Optionnel: Gérer la fin de tous les exercices de lecture\n        Alert.alert(\"Exercice terminé\", \"Vous avez terminé tous les exercices de lecture pour ce niveau !\");\n      }\n    }\n  }, [currentQuestionIndex, totalQuestions, changeQuestion, selectedExerciseIndex, totalExercises, changeExercise]);\n\n  const previousQuestion = useCallback(() => {\n    if (currentQuestionIndex > 0) {\n      changeQuestion(currentQuestionIndex - 1);\n    } else if (selectedExerciseIndex > 0) {\n      // Si c'est la première question de l'exercice actuel, passer à la dernière question de l'exercice précédent\n      const prevExercise = exercises[selectedExerciseIndex - 1];\n      if (prevExercise) {\n        setSelectedExerciseIndex(selectedExerciseIndex - 1);\n        setCurrentQuestionIndex(prevExercise.questions.length - 1);\n      }\n    }\n  }, [currentQuestionIndex, changeQuestion, selectedExerciseIndex, exercises]);\n\n\n  const retryQuestion = useCallback(() => {\n    setShowFeedback(false);\n    setSelectedAnswer(null);\n    setAttempts(0);\n  }, []);\n\n  const toggleTextExpansion = useCallback(() => {\n    setTextExpanded(prev => !prev);\n  }, []);\n\n  const toggleDetailedProgress = useCallback(() => {\n    setShowDetailedProgress(prev => !prev);\n  }, []);\n\n  // =================== PROGRESSION ===================\n  const getProgress = useCallback(() => {\n    const totalCompletedQuestions = Object.values(completedQuestions).reduce((sum, completed) => sum + (completed?.length || 0), 0);\n    const totalQuestionsAllExercises = exercises.reduce((sum, ex) => sum + (ex.questions?.length || 0), 0);\n\n    const completedInCurrentExercise = completedQuestions[selectedExerciseIndex]?.length || 0;\n    const progressPercent = totalQuestions > 0 ? (completedInCurrentExercise / totalQuestions) * 100 : 0;\n\n    const overallProgress = totalQuestionsAllExercises > 0 ? (totalCompletedQuestions / totalQuestionsAllExercises) * 100 : 0;\n\n    return {\n      currentExercise: progressPercent,\n      overall: overallProgress,\n      completedInCurrent: completedInCurrentExercise,\n      totalInCurrent: totalQuestions,\n      completedOverall: totalCompletedQuestions,\n      totalOverall: totalQuestionsAllExercises\n    };\n  }, [completedQuestions, selectedExerciseIndex, totalQuestions, exercises]);\n\n  // =================== VALIDATION ===================\n  // ✅ CORRECTION: Suppression de la variable isAnswerCorrectComputed car elle n'était pas utilisée.\n\n  const isQuestionCompleted = completedQuestions[selectedExerciseIndex]?.includes(currentQuestionIndex) || false;\n\n  return {\n    selectedExerciseIndex,\n    currentQuestionIndex,\n    selectedAnswer,\n    showFeedback,\n    textExpanded,\n    attempts,\n    completedQuestions,\n    loaded,\n    showDetailedProgress,\n    currentExercise,\n    currentQuestion,\n    totalExercises,\n    totalQuestions,\n    changeExercise,\n    changeQuestion,\n    selectAnswer,\n    submitAnswer,\n    nextQuestion,\n    previousQuestion,\n    retryQuestion,\n    toggleTextExpansion,\n    toggleDetailedProgress,\n    isCorrect,\n    isQuestionCompleted,\n    progress: getProgress(),\n    scrollViewRef,\n    textsScrollViewRef,\n    fadeAnim,\n    slideAnim,\n  };\n};\n\nexport default useReading;"],"mappings":";;;;;;;AAEA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AACA,IAAAE,aAAA,GAAAC,sBAAA,CAAAH,OAAA;AAEA,IAAMI,UAAU,GAAG,SAAbA,UAAUA,CAAA,EAAqC;EAAA,IAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;EAAA,IAAjCC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,IAAEG,KAAK,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAE9C,IAAAI,SAAA,GAA0D,IAAAC,eAAQ,EAAC,CAAC,CAAC;IAAAC,UAAA,OAAAC,eAAA,CAAAC,OAAA,EAAAJ,SAAA;IAA9DK,qBAAqB,GAAAH,UAAA;IAAEI,wBAAwB,GAAAJ,UAAA;EACtD,IAAAK,UAAA,GAAwD,IAAAN,eAAQ,EAAC,CAAC,CAAC;IAAAO,UAAA,OAAAL,eAAA,CAAAC,OAAA,EAAAG,UAAA;IAA5DE,oBAAoB,GAAAD,UAAA;IAAEE,uBAAuB,GAAAF,UAAA;EACpD,IAAAG,UAAA,GAA4C,IAAAV,eAAQ,EAAC,IAAI,CAAC;IAAAW,UAAA,OAAAT,eAAA,CAAAC,OAAA,EAAAO,UAAA;IAAnDE,cAAc,GAAAD,UAAA;IAAEE,iBAAiB,GAAAF,UAAA;EACxC,IAAAG,UAAA,GAAwC,IAAAd,eAAQ,EAAC,KAAK,CAAC;IAAAe,UAAA,OAAAb,eAAA,CAAAC,OAAA,EAAAW,UAAA;IAAhDE,YAAY,GAAAD,UAAA;IAAEE,eAAe,GAAAF,UAAA;EACpC,IAAAG,UAAA,GAAwC,IAAAlB,eAAQ,EAAC,IAAI,CAAC;IAAAmB,UAAA,OAAAjB,eAAA,CAAAC,OAAA,EAAAe,UAAA;IAA/CE,YAAY,GAAAD,UAAA;IAAEE,eAAe,GAAAF,UAAA;EACpC,IAAAG,UAAA,GAAgC,IAAAtB,eAAQ,EAAC,CAAC,CAAC;IAAAuB,WAAA,OAAArB,eAAA,CAAAC,OAAA,EAAAmB,UAAA;IAApCE,QAAQ,GAAAD,WAAA;IAAEE,WAAW,GAAAF,WAAA;EAC5B,IAAAG,WAAA,GAAoD,IAAA1B,eAAQ,EAAC,CAAC,CAAC,CAAC;IAAA2B,WAAA,OAAAzB,eAAA,CAAAC,OAAA,EAAAuB,WAAA;IAAzDE,kBAAkB,GAAAD,WAAA;IAAEE,qBAAqB,GAAAF,WAAA;EAChD,IAAAG,WAAA,GAA4B,IAAA9B,eAAQ,EAAC,KAAK,CAAC;IAAA+B,WAAA,OAAA7B,eAAA,CAAAC,OAAA,EAAA2B,WAAA;IAApCE,MAAM,GAAAD,WAAA;IAAEE,SAAS,GAAAF,WAAA;EACxB,IAAAG,WAAA,GAAwD,IAAAlC,eAAQ,EAAC,KAAK,CAAC;IAAAmC,WAAA,OAAAjC,eAAA,CAAAC,OAAA,EAAA+B,WAAA;IAAhEE,oBAAoB,GAAAD,WAAA;IAAEE,uBAAuB,GAAAF,WAAA;EACpD,IAAAG,WAAA,GAAkC,IAAAtC,eAAQ,EAAC,KAAK,CAAC;IAAAuC,WAAA,OAAArC,eAAA,CAAAC,OAAA,EAAAmC,WAAA;IAA1CE,SAAS,GAAAD,WAAA;IAAEE,YAAY,GAAAF,WAAA;EAG9B,IAAMG,aAAa,GAAG,IAAAC,aAAM,EAAC,IAAI,CAAC;EAClC,IAAMC,kBAAkB,GAAG,IAAAD,aAAM,EAAC,IAAI,CAAC;EACvC,IAAME,QAAQ,GAAG,IAAAF,aAAM,EAAC,IAAIG,qBAAQ,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,OAAO;EACtD,IAAMC,SAAS,GAAG,IAAAN,aAAM,EAAC,IAAIG,qBAAQ,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,OAAO;EACvD,IAAME,aAAa,GAAG,IAAAP,aAAM,EAAC,KAAK,CAAC;EAGnC,IAAMQ,eAAe,GAAGzD,SAAS,CAACU,qBAAqB,CAAC,IAAI;IAAEgD,KAAK,EAAE,EAAE;IAAEC,IAAI,EAAE,EAAE;IAAEC,SAAS,EAAE;EAAG,CAAC;EAClG,IAAMC,eAAe,GAAG,EAAAhE,qBAAA,GAAA4D,eAAe,CAACG,SAAS,qBAAzB/D,qBAAA,CAA4BiB,oBAAoB,CAAC,KAAI,IAAI;EACjF,IAAMgD,cAAc,GAAG9D,SAAS,CAACE,MAAM;EACvC,IAAM6D,cAAc,GAAG,EAAAjE,sBAAA,GAAA2D,eAAe,CAACG,SAAS,qBAAzB9D,sBAAA,CAA2BI,MAAM,KAAI,CAAC;EAG7D,IAAM8D,WAAW,GAAG,oBAAoB5D,KAAK,EAAE;EAE/C,IAAM6D,YAAY,GAAG,IAAAC,kBAAW,MAAAC,kBAAA,CAAA1D,OAAA,EAAC,aAAY;IAC3C,IAAI;MACF,IAAM2D,cAAc,SAASC,qBAAY,CAACC,OAAO,CAACN,WAAW,CAAC;MAC9D,IAAII,cAAc,EAAE;QAClBjC,qBAAqB,CAACoC,IAAI,CAACC,KAAK,CAACJ,cAAc,CAAC,CAAC;MACnD;IACF,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yDAAyD,EAAEA,KAAK,CAAC;IACjF,CAAC,SAAS;MACRlC,SAAS,CAAC,IAAI,CAAC;IACjB;EACF,CAAC,GAAE,CAACyB,WAAW,CAAC,CAAC;EAEjB,IAAMW,YAAY,GAAG,IAAAT,kBAAW,MAAAC,kBAAA,CAAA1D,OAAA,EAAC,aAAY;IAC3C,IAAI;MACF,MAAM4D,qBAAY,CAACO,OAAO,CAACZ,WAAW,EAAEO,IAAI,CAACM,SAAS,CAAC3C,kBAAkB,CAAC,CAAC;IAC7E,CAAC,CAAC,OAAOuC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4DAA4D,EAAEA,KAAK,CAAC;IACpF;EACF,CAAC,GAAE,CAACvC,kBAAkB,EAAE8B,WAAW,CAAC,CAAC;EAGrC,IAAAc,gBAAS,EAAC,YAAM;IACdb,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAElB,IAAAa,gBAAS,EAAC,YAAM;IACd,IAAIxC,MAAM,EAAE;MACVqC,YAAY,CAAC,CAAC;IAChB;EACF,CAAC,EAAE,CAACzC,kBAAkB,EAAEI,MAAM,EAAEqC,YAAY,CAAC,CAAC;EAG9C,IAAAG,gBAAS,EAAC,YAAM;IACdvD,eAAe,CAAC,KAAK,CAAC;IACtBJ,iBAAiB,CAAC,IAAI,CAAC;IACvBY,WAAW,CAAC,CAAC,CAAC;IACdJ,eAAe,CAAC,IAAI,CAAC;IAErB,IAAIb,oBAAoB,KAAK,CAAC,IAAIJ,qBAAqB,KAAK,CAAC,IAAI,CAAC8C,aAAa,CAACF,OAAO,EAAE;MAEvFE,aAAa,CAACF,OAAO,GAAG,IAAI;IAC9B,CAAC,MAAM;MAAA,IAAAyB,qBAAA,EAAAC,qBAAA;MAEL,CAAAD,qBAAA,GAAA/B,aAAa,CAACM,OAAO,aAArByB,qBAAA,CAAuBE,QAAQ,CAAC;QAAEC,CAAC,EAAE,CAAC;QAAEC,QAAQ,EAAE;MAAK,CAAC,CAAC;MACzD,CAAAH,qBAAA,GAAA9B,kBAAkB,CAACI,OAAO,aAA1B0B,qBAAA,CAA4BC,QAAQ,CAAC;QAAEC,CAAC,EAAE,CAAC;QAAEC,QAAQ,EAAE;MAAK,CAAC,CAAC;IAChE;EACF,CAAC,EAAE,CAACrE,oBAAoB,EAAEJ,qBAAqB,CAAC,CAAC;EAKjD,IAAM0E,cAAc,GAAG,IAAAlB,kBAAW,EAAC,UAACmB,KAAK,EAAK;IAC5C,IAAIA,KAAK,IAAI,CAAC,IAAIA,KAAK,GAAGvB,cAAc,EAAE;MACxCnD,wBAAwB,CAAC0E,KAAK,CAAC;MAC/BtE,uBAAuB,CAAC,CAAC,CAAC;IAC5B;EACF,CAAC,EAAE,CAAC+C,cAAc,CAAC,CAAC;EAEpB,IAAMwB,cAAc,GAAG,IAAApB,kBAAW,EAAC,UAACmB,KAAK,EAAK;IAC5C,IAAIA,KAAK,IAAI,CAAC,IAAIA,KAAK,GAAGtB,cAAc,EAAE;MACxChD,uBAAuB,CAACsE,KAAK,CAAC;IAChC;EACF,CAAC,EAAE,CAACtB,cAAc,CAAC,CAAC;EAEpB,IAAMwB,YAAY,GAAG,IAAArB,kBAAW,EAAC,UAACsB,MAAM,EAAK;IAC3C,IAAI,CAAClE,YAAY,EAAE;MACjBH,iBAAiB,CAACqE,MAAM,CAAC;IAC3B;EACF,CAAC,EAAE,CAAClE,YAAY,CAAC,CAAC;EAElB,IAAMmE,YAAY,GAAG,IAAAvB,kBAAW,EAAC,YAAM;IACrC,IAAI,CAACL,eAAe,IAAI3C,cAAc,KAAK,IAAI,EAAE;MAC/CwE,kBAAK,CAACC,KAAK,CAAC,mBAAmB,EAAE,oCAAoC,CAAC;MACtE;IACF;IAEA,IAAMC,sBAAsB,GAAG1E,cAAc,KAAK2C,eAAe,CAACgC,aAAa;IAC/E9C,YAAY,CAAC6C,sBAAsB,CAAC;IACpCrE,eAAe,CAAC,IAAI,CAAC;IACrBQ,WAAW,CAAC,UAAA+D,IAAI;MAAA,OAAIA,IAAI,GAAG,CAAC;IAAA,EAAC;IAE7B,IAAIF,sBAAsB,EAAE;MAC1BzD,qBAAqB,CAAC,UAAA2D,IAAI,EAAI;QAC5B,IAAMC,YAAY,GAAAC,MAAA,CAAAC,MAAA,KAAQH,IAAI,CAAE;QAChC,IAAI,CAACC,YAAY,CAACrF,qBAAqB,CAAC,EAAE;UACxCqF,YAAY,CAACrF,qBAAqB,CAAC,GAAG,EAAE;QAC1C;QACA,IAAI,CAACqF,YAAY,CAACrF,qBAAqB,CAAC,CAACwF,QAAQ,CAACpF,oBAAoB,CAAC,EAAE;UACvEiF,YAAY,CAACrF,qBAAqB,CAAC,CAACyF,IAAI,CAACrF,oBAAoB,CAAC;QAChE;QACA,OAAOiF,YAAY;MACrB,CAAC,CAAC;IACJ,CAAC,MAAM,CAGP;EACF,CAAC,EAAE,CAAClC,eAAe,EAAE3C,cAAc,EAAER,qBAAqB,EAAEI,oBAAoB,CAAC,CAAC;EAElF,IAAMsF,YAAY,GAAG,IAAAlC,kBAAW,EAAC,YAAM;IACrC,IAAIpD,oBAAoB,GAAGiD,cAAc,GAAG,CAAC,EAAE;MAC7CuB,cAAc,CAACxE,oBAAoB,GAAG,CAAC,CAAC;IAC1C,CAAC,MAAM;MAEL,IAAIJ,qBAAqB,GAAGoD,cAAc,GAAG,CAAC,EAAE;QAC9CsB,cAAc,CAAC1E,qBAAqB,GAAG,CAAC,CAAC;MAC3C,CAAC,MAAM;QAELgF,kBAAK,CAACC,KAAK,CAAC,kBAAkB,EAAE,kEAAkE,CAAC;MACrG;IACF;EACF,CAAC,EAAE,CAAC7E,oBAAoB,EAAEiD,cAAc,EAAEuB,cAAc,EAAE5E,qBAAqB,EAAEoD,cAAc,EAAEsB,cAAc,CAAC,CAAC;EAEjH,IAAMiB,gBAAgB,GAAG,IAAAnC,kBAAW,EAAC,YAAM;IACzC,IAAIpD,oBAAoB,GAAG,CAAC,EAAE;MAC5BwE,cAAc,CAACxE,oBAAoB,GAAG,CAAC,CAAC;IAC1C,CAAC,MAAM,IAAIJ,qBAAqB,GAAG,CAAC,EAAE;MAEpC,IAAM4F,YAAY,GAAGtG,SAAS,CAACU,qBAAqB,GAAG,CAAC,CAAC;MACzD,IAAI4F,YAAY,EAAE;QAChB3F,wBAAwB,CAACD,qBAAqB,GAAG,CAAC,CAAC;QACnDK,uBAAuB,CAACuF,YAAY,CAAC1C,SAAS,CAAC1D,MAAM,GAAG,CAAC,CAAC;MAC5D;IACF;EACF,CAAC,EAAE,CAACY,oBAAoB,EAAEwE,cAAc,EAAE5E,qBAAqB,EAAEV,SAAS,CAAC,CAAC;EAG5E,IAAMuG,aAAa,GAAG,IAAArC,kBAAW,EAAC,YAAM;IACtC3C,eAAe,CAAC,KAAK,CAAC;IACtBJ,iBAAiB,CAAC,IAAI,CAAC;IACvBY,WAAW,CAAC,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMyE,mBAAmB,GAAG,IAAAtC,kBAAW,EAAC,YAAM;IAC5CvC,eAAe,CAAC,UAAAmE,IAAI;MAAA,OAAI,CAACA,IAAI;IAAA,EAAC;EAChC,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMW,sBAAsB,GAAG,IAAAvC,kBAAW,EAAC,YAAM;IAC/CvB,uBAAuB,CAAC,UAAAmD,IAAI;MAAA,OAAI,CAACA,IAAI;IAAA,EAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAGN,IAAMY,WAAW,GAAG,IAAAxC,kBAAW,EAAC,YAAM;IAAA,IAAAyC,qBAAA;IACpC,IAAMC,uBAAuB,GAAGZ,MAAM,CAACa,MAAM,CAAC3E,kBAAkB,CAAC,CAAC4E,MAAM,CAAC,UAACC,GAAG,EAAEC,SAAS;MAAA,OAAKD,GAAG,IAAI,CAAAC,SAAS,oBAATA,SAAS,CAAE9G,MAAM,KAAI,CAAC,CAAC;IAAA,GAAE,CAAC,CAAC;IAC/H,IAAM+G,0BAA0B,GAAGjH,SAAS,CAAC8G,MAAM,CAAC,UAACC,GAAG,EAAEG,EAAE;MAAA,IAAAC,aAAA;MAAA,OAAKJ,GAAG,IAAI,EAAAI,aAAA,GAAAD,EAAE,CAACtD,SAAS,qBAAZuD,aAAA,CAAcjH,MAAM,KAAI,CAAC,CAAC;IAAA,GAAE,CAAC,CAAC;IAEtG,IAAMkH,0BAA0B,GAAG,EAAAT,qBAAA,GAAAzE,kBAAkB,CAACxB,qBAAqB,CAAC,qBAAzCiG,qBAAA,CAA2CzG,MAAM,KAAI,CAAC;IACzF,IAAMmH,eAAe,GAAGtD,cAAc,GAAG,CAAC,GAAIqD,0BAA0B,GAAGrD,cAAc,GAAI,GAAG,GAAG,CAAC;IAEpG,IAAMuD,eAAe,GAAGL,0BAA0B,GAAG,CAAC,GAAIL,uBAAuB,GAAGK,0BAA0B,GAAI,GAAG,GAAG,CAAC;IAEzH,OAAO;MACLxD,eAAe,EAAE4D,eAAe;MAChCE,OAAO,EAAED,eAAe;MACxBE,kBAAkB,EAAEJ,0BAA0B;MAC9CK,cAAc,EAAE1D,cAAc;MAC9B2D,gBAAgB,EAAEd,uBAAuB;MACzCe,YAAY,EAAEV;IAChB,CAAC;EACH,CAAC,EAAE,CAAC/E,kBAAkB,EAAExB,qBAAqB,EAAEqD,cAAc,EAAE/D,SAAS,CAAC,CAAC;EAK1E,IAAM4H,mBAAmB,GAAG,EAAA7H,sBAAA,GAAAmC,kBAAkB,CAACxB,qBAAqB,CAAC,qBAAzCX,sBAAA,CAA2CmG,QAAQ,CAACpF,oBAAoB,CAAC,KAAI,KAAK;EAE9G,OAAO;IACLJ,qBAAqB,EAArBA,qBAAqB;IACrBI,oBAAoB,EAApBA,oBAAoB;IACpBI,cAAc,EAAdA,cAAc;IACdI,YAAY,EAAZA,YAAY;IACZI,YAAY,EAAZA,YAAY;IACZI,QAAQ,EAARA,QAAQ;IACRI,kBAAkB,EAAlBA,kBAAkB;IAClBI,MAAM,EAANA,MAAM;IACNI,oBAAoB,EAApBA,oBAAoB;IACpBe,eAAe,EAAfA,eAAe;IACfI,eAAe,EAAfA,eAAe;IACfC,cAAc,EAAdA,cAAc;IACdC,cAAc,EAAdA,cAAc;IACdqB,cAAc,EAAdA,cAAc;IACdE,cAAc,EAAdA,cAAc;IACdC,YAAY,EAAZA,YAAY;IACZE,YAAY,EAAZA,YAAY;IACZW,YAAY,EAAZA,YAAY;IACZC,gBAAgB,EAAhBA,gBAAgB;IAChBE,aAAa,EAAbA,aAAa;IACbC,mBAAmB,EAAnBA,mBAAmB;IACnBC,sBAAsB,EAAtBA,sBAAsB;IACtB3D,SAAS,EAATA,SAAS;IACT8E,mBAAmB,EAAnBA,mBAAmB;IACnBC,QAAQ,EAAEnB,WAAW,CAAC,CAAC;IACvB1D,aAAa,EAAbA,aAAa;IACbE,kBAAkB,EAAlBA,kBAAkB;IAClBC,QAAQ,EAARA,QAAQ;IACRI,SAAS,EAATA;EACF,CAAC;AACH,CAAC;AAAC,IAAAuE,QAAA,GAAAC,OAAA,CAAAtH,OAAA,GAEab,UAAU","ignoreList":[]}