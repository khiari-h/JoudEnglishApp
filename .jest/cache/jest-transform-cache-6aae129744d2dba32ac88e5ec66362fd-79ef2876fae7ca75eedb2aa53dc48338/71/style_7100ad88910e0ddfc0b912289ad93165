b215a8b50af7d9ff662e50f23bb60f05
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var createStyles = function createStyles() {
  var levelColor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "#5E60CE";
  return _reactNative.StyleSheet.create({
    heroSection: Object.assign({
      marginBottom: 20,
      borderRadius: 20,
      overflow: 'hidden',
      backgroundColor: 'white',
      borderWidth: 1,
      borderColor: `${levelColor}25`
    }, _reactNative.Platform.select({
      ios: {
        shadowColor: '#000',
        shadowOffset: {
          width: 0,
          height: 4
        },
        shadowOpacity: 0.08,
        shadowRadius: 8
      },
      android: {
        elevation: 3
      }
    })),
    heroGradient: {
      paddingVertical: 32,
      paddingHorizontal: 24,
      alignItems: 'center',
      justifyContent: 'center',
      position: 'relative',
      minHeight: 100
    },
    decorativeCircle: {
      position: 'absolute',
      borderRadius: 999
    },
    circle1: {
      width: 100,
      height: 100,
      top: -50,
      right: -35,
      opacity: 0.5
    },
    circle2: {
      width: 65,
      height: 65,
      bottom: -32,
      left: -18,
      opacity: 0.4
    },
    contentContainer: {
      alignItems: 'center',
      zIndex: 2,
      paddingHorizontal: 12
    },
    contentText: Object.assign({
      fontWeight: '700',
      letterSpacing: 0.5,
      marginBottom: 8
    }, _reactNative.Platform.select({
      ios: {
        shadowColor: '#000',
        shadowOffset: {
          width: 0,
          height: 1
        },
        shadowOpacity: 0.08,
        shadowRadius: 2
      }
    })),
    underline: {
      width: 50,
      height: 3,
      borderRadius: 1.5,
      opacity: 0.7
    }
  });
};
var _default = exports.default = createStyles;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiY3JlYXRlU3R5bGVzIiwibGV2ZWxDb2xvciIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJoZXJvU2VjdGlvbiIsIk9iamVjdCIsImFzc2lnbiIsIm1hcmdpbkJvdHRvbSIsImJvcmRlclJhZGl1cyIsIm92ZXJmbG93IiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyV2lkdGgiLCJib3JkZXJDb2xvciIsIlBsYXRmb3JtIiwic2VsZWN0IiwiaW9zIiwic2hhZG93Q29sb3IiLCJzaGFkb3dPZmZzZXQiLCJ3aWR0aCIsImhlaWdodCIsInNoYWRvd09wYWNpdHkiLCJzaGFkb3dSYWRpdXMiLCJhbmRyb2lkIiwiZWxldmF0aW9uIiwiaGVyb0dyYWRpZW50IiwicGFkZGluZ1ZlcnRpY2FsIiwicGFkZGluZ0hvcml6b250YWwiLCJhbGlnbkl0ZW1zIiwianVzdGlmeUNvbnRlbnQiLCJwb3NpdGlvbiIsIm1pbkhlaWdodCIsImRlY29yYXRpdmVDaXJjbGUiLCJjaXJjbGUxIiwidG9wIiwicmlnaHQiLCJvcGFjaXR5IiwiY2lyY2xlMiIsImJvdHRvbSIsImxlZnQiLCJjb250ZW50Q29udGFpbmVyIiwiekluZGV4IiwiY29udGVudFRleHQiLCJmb250V2VpZ2h0IiwibGV0dGVyU3BhY2luZyIsInVuZGVybGluZSIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlcyI6WyJzdHlsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvY29tcG9uZW50cy91aS9IZXJvQ2FyZC9zdHlsZS5qcyAtIFZFUlNJT04gTU9CSUxFLUZSSUVORExZXG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBQbGF0Zm9ybSB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcblxuLyoqXG4gKiDwn46vIFN0eWxlcyBNb2JpbGUtRnJpZW5kbHkgUHJlbWl1bSBwb3VyIEhlcm9DYXJkXG4gKiAtIE9tYnJlcyBuZXV0cmVzIChncmlzZXMpIGF1IGxpZXUgZGUgY29sb3LDqWVzXG4gKiAtIEJhY2tncm91bmRzIGJsYW5jcyBhdmVjIGJvcmR1cmVzIGNvbG9yw6llc1xuICogLSBPcGFjaXTDqXMgb3B0aW1pc8OpZXMgcG91ciBtb2JpbGUgKDE1LTIwJSBhdSBsaWV1IGRlIDQtMTIlKVxuICogLSBQZXJmb3JtYW5jZSBtb2JpbGUgb3B0aW1pc8OpZVxuICovXG5jb25zdCBjcmVhdGVTdHlsZXMgPSAobGV2ZWxDb2xvciA9IFwiIzVFNjBDRVwiKSA9PlxuICBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gICAgLy8gPT09PT09PT09PT09PT09PT09PSBIRVJPIFNFQ1RJT04gPT09PT09PT09PT09PT09PT09PVxuICAgIGhlcm9TZWN0aW9uOiB7XG4gICAgICBtYXJnaW5Cb3R0b206IDIwLCAvLyBSw6lkdWl0IDogMjQg4oaSIDIwXG4gICAgICBib3JkZXJSYWRpdXM6IDIwLCAvLyBSw6lkdWl0IDogMjQg4oaSIDIwIChjb2jDqXJlbmNlIGF2ZWMgaGVhZGVyKVxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLCAvLyBCYWNrZ3JvdW5kIHNvbGlkZVxuICAgICAgYm9yZGVyV2lkdGg6IDEsXG4gICAgICBib3JkZXJDb2xvcjogYCR7bGV2ZWxDb2xvcn0yNWAsIC8vIEJvcmR1cmUgY29sb3LDqWUgdmlzaWJsZVxuICAgICAgLy8gT01CUkUgTkVVVFJFIC0gUGx1cyBkZSBzaGFkb3dDb2xvciBjb2xvcsOpZSAhXG4gICAgICAuLi5QbGF0Zm9ybS5zZWxlY3Qoe1xuICAgICAgICBpb3M6IHtcbiAgICAgICAgICBzaGFkb3dDb2xvcjogJyMwMDAnLCAvLyDinIUgTm9pciBhdSBsaWV1IGRlIGxldmVsQ29sb3JcbiAgICAgICAgICBzaGFkb3dPZmZzZXQ6IHsgd2lkdGg6IDAsIGhlaWdodDogNCB9LCAvLyBSw6lkdWl0IDogOCDihpIgNFxuICAgICAgICAgIHNoYWRvd09wYWNpdHk6IDAuMDgsIC8vIFLDqWR1aXQgOiAwLjIg4oaSIDAuMDhcbiAgICAgICAgICBzaGFkb3dSYWRpdXM6IDgsIC8vIFLDqWR1aXQgOiAxNiDihpIgOFxuICAgICAgICB9LFxuICAgICAgICBhbmRyb2lkOiB7XG4gICAgICAgICAgZWxldmF0aW9uOiAzLCAvLyBSw6lkdWl0IDogOCDihpIgM1xuICAgICAgICB9LFxuICAgICAgfSksXG4gICAgfSxcblxuICAgIGhlcm9HcmFkaWVudDoge1xuICAgICAgcGFkZGluZ1ZlcnRpY2FsOiAzMiwgLy8gUsOpZHVpdCA6IDQwIOKGkiAzMlxuICAgICAgcGFkZGluZ0hvcml6b250YWw6IDI0LCAvLyBSw6lkdWl0IDogMjgg4oaSIDI0XG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgbWluSGVpZ2h0OiAxMDAsIC8vIFLDqWR1aXQgOiAxMjAg4oaSIDEwMFxuICAgIH0sXG5cbiAgICAvLyA9PT09PT09PT09PT09PT09PT09IENFUkNMRVMgRMOJQ09SQVRJRlMgLSBQbHVzIHZpc2libGVzID09PT09PT09PT09PT09PT09PT1cbiAgICBkZWNvcmF0aXZlQ2lyY2xlOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGJvcmRlclJhZGl1czogOTk5LFxuICAgIH0sXG4gICAgY2lyY2xlMToge1xuICAgICAgd2lkdGg6IDEwMCwgLy8gUsOpZHVpdCA6IDEyMCDihpIgMTAwXG4gICAgICBoZWlnaHQ6IDEwMCxcbiAgICAgIHRvcDogLTUwLCAvLyBBanVzdMOpIDogLTYwIOKGkiAtNTBcbiAgICAgIHJpZ2h0OiAtMzUsIC8vIEFqdXN0w6kgOiAtNDAg4oaSIC0zNVxuICAgICAgb3BhY2l0eTogMC41LCAvLyBBdWdtZW50w6kgOiAwLjMg4oaSIDAuNVxuICAgIH0sXG4gICAgY2lyY2xlMjoge1xuICAgICAgd2lkdGg6IDY1LCAvLyBSw6lkdWl0IDogODAg4oaSIDY1XG4gICAgICBoZWlnaHQ6IDY1LFxuICAgICAgYm90dG9tOiAtMzIsIC8vIEFqdXN0w6kgOiAtNDAg4oaSIC0zMlxuICAgICAgbGVmdDogLTE4LCAvLyBBanVzdMOpIDogLTIwIOKGkiAtMThcbiAgICAgIG9wYWNpdHk6IDAuNCwgLy8gQXVnbWVudMOpIDogMC4yIOKGkiAwLjRcbiAgICB9LFxuXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PSBDT05URU5VIFBSSU5DSVBBTCA9PT09PT09PT09PT09PT09PT09XG4gICAgY29udGVudENvbnRhaW5lcjoge1xuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICB6SW5kZXg6IDIsXG4gICAgICBwYWRkaW5nSG9yaXpvbnRhbDogMTIsXG4gICAgfSxcblxuICAgIGNvbnRlbnRUZXh0OiB7XG4gICAgICBmb250V2VpZ2h0OiAnNzAwJywgLy8gUsOpZHVpdCA6IDgwMCDihpIgNzAwIChwbHVzIGxpc2libGUgbW9iaWxlKVxuICAgICAgbGV0dGVyU3BhY2luZzogMC41LCAvLyBSw6lkdWl0IDogMC44IOKGkiAwLjVcbiAgICAgIG1hcmdpbkJvdHRvbTogOCxcbiAgICAgIC8vIE9NQlJFIFRFWFRFIE5FVVRSRVxuICAgICAgLi4uUGxhdGZvcm0uc2VsZWN0KHtcbiAgICAgICAgaW9zOiB7XG4gICAgICAgICAgc2hhZG93Q29sb3I6ICcjMDAwJywgLy8g4pyFIE5vaXIgYXUgbGlldSBkZSBjb2xvcsOpXG4gICAgICAgICAgc2hhZG93T2Zmc2V0OiB7IHdpZHRoOiAwLCBoZWlnaHQ6IDEgfSwgLy8gUsOpZHVpdCA6IDIg4oaSIDFcbiAgICAgICAgICBzaGFkb3dPcGFjaXR5OiAwLjA4LCAvLyBSw6lkdWl0IDogMC4xIOKGkiAwLjA4XG4gICAgICAgICAgc2hhZG93UmFkaXVzOiAyLCAvLyBSw6lkdWl0IDogNCDihpIgMlxuICAgICAgICB9LFxuICAgICAgfSksXG4gICAgfSxcblxuICAgIHVuZGVybGluZToge1xuICAgICAgd2lkdGg6IDUwLCAvLyBSw6lkdWl0IDogNjAg4oaSIDUwXG4gICAgICBoZWlnaHQ6IDMsIC8vIFLDqWR1aXQgOiA0IOKGkiAzXG4gICAgICBib3JkZXJSYWRpdXM6IDEuNSwgLy8gQWp1c3TDqSA6IDIg4oaSIDEuNVxuICAgICAgb3BhY2l0eTogMC43LCAvLyBBdWdtZW50w6kgOiAwLjYg4oaSIDAuNyAocGx1cyB2aXNpYmxlKVxuICAgIH0sXG4gIH0pO1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdHlsZXM7Il0sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsSUFBQUEsWUFBQSxHQUFBQyxPQUFBO0FBU0EsSUFBTUMsWUFBWSxHQUFHLFNBQWZBLFlBQVlBLENBQUE7RUFBQSxJQUFJQyxVQUFVLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLFNBQVM7RUFBQSxPQUMxQ0csdUJBQVUsQ0FBQ0MsTUFBTSxDQUFDO0lBRWhCQyxXQUFXLEVBQUFDLE1BQUEsQ0FBQUMsTUFBQTtNQUNUQyxZQUFZLEVBQUUsRUFBRTtNQUNoQkMsWUFBWSxFQUFFLEVBQUU7TUFDaEJDLFFBQVEsRUFBRSxRQUFRO01BQ2xCQyxlQUFlLEVBQUUsT0FBTztNQUN4QkMsV0FBVyxFQUFFLENBQUM7TUFDZEMsV0FBVyxFQUFFLEdBQUdkLFVBQVU7SUFBSSxHQUUzQmUscUJBQVEsQ0FBQ0MsTUFBTSxDQUFDO01BQ2pCQyxHQUFHLEVBQUU7UUFDSEMsV0FBVyxFQUFFLE1BQU07UUFDbkJDLFlBQVksRUFBRTtVQUFFQyxLQUFLLEVBQUUsQ0FBQztVQUFFQyxNQUFNLEVBQUU7UUFBRSxDQUFDO1FBQ3JDQyxhQUFhLEVBQUUsSUFBSTtRQUNuQkMsWUFBWSxFQUFFO01BQ2hCLENBQUM7TUFDREMsT0FBTyxFQUFFO1FBQ1BDLFNBQVMsRUFBRTtNQUNiO0lBQ0YsQ0FBQyxDQUFDLENBQ0g7SUFFREMsWUFBWSxFQUFFO01BQ1pDLGVBQWUsRUFBRSxFQUFFO01BQ25CQyxpQkFBaUIsRUFBRSxFQUFFO01BQ3JCQyxVQUFVLEVBQUUsUUFBUTtNQUNwQkMsY0FBYyxFQUFFLFFBQVE7TUFDeEJDLFFBQVEsRUFBRSxVQUFVO01BQ3BCQyxTQUFTLEVBQUU7SUFDYixDQUFDO0lBR0RDLGdCQUFnQixFQUFFO01BQ2hCRixRQUFRLEVBQUUsVUFBVTtNQUNwQnJCLFlBQVksRUFBRTtJQUNoQixDQUFDO0lBQ0R3QixPQUFPLEVBQUU7TUFDUGQsS0FBSyxFQUFFLEdBQUc7TUFDVkMsTUFBTSxFQUFFLEdBQUc7TUFDWGMsR0FBRyxFQUFFLENBQUMsRUFBRTtNQUNSQyxLQUFLLEVBQUUsQ0FBQyxFQUFFO01BQ1ZDLE9BQU8sRUFBRTtJQUNYLENBQUM7SUFDREMsT0FBTyxFQUFFO01BQ1BsQixLQUFLLEVBQUUsRUFBRTtNQUNUQyxNQUFNLEVBQUUsRUFBRTtNQUNWa0IsTUFBTSxFQUFFLENBQUMsRUFBRTtNQUNYQyxJQUFJLEVBQUUsQ0FBQyxFQUFFO01BQ1RILE9BQU8sRUFBRTtJQUNYLENBQUM7SUFHREksZ0JBQWdCLEVBQUU7TUFDaEJaLFVBQVUsRUFBRSxRQUFRO01BQ3BCYSxNQUFNLEVBQUUsQ0FBQztNQUNUZCxpQkFBaUIsRUFBRTtJQUNyQixDQUFDO0lBRURlLFdBQVcsRUFBQXBDLE1BQUEsQ0FBQUMsTUFBQTtNQUNUb0MsVUFBVSxFQUFFLEtBQUs7TUFDakJDLGFBQWEsRUFBRSxHQUFHO01BQ2xCcEMsWUFBWSxFQUFFO0lBQUMsR0FFWk0scUJBQVEsQ0FBQ0MsTUFBTSxDQUFDO01BQ2pCQyxHQUFHLEVBQUU7UUFDSEMsV0FBVyxFQUFFLE1BQU07UUFDbkJDLFlBQVksRUFBRTtVQUFFQyxLQUFLLEVBQUUsQ0FBQztVQUFFQyxNQUFNLEVBQUU7UUFBRSxDQUFDO1FBQ3JDQyxhQUFhLEVBQUUsSUFBSTtRQUNuQkMsWUFBWSxFQUFFO01BQ2hCO0lBQ0YsQ0FBQyxDQUFDLENBQ0g7SUFFRHVCLFNBQVMsRUFBRTtNQUNUMUIsS0FBSyxFQUFFLEVBQUU7TUFDVEMsTUFBTSxFQUFFLENBQUM7TUFDVFgsWUFBWSxFQUFFLEdBQUc7TUFDakIyQixPQUFPLEVBQUU7SUFDWDtFQUNGLENBQUMsQ0FBQztBQUFBO0FBQUMsSUFBQVUsUUFBQSxHQUFBQyxPQUFBLENBQUFDLE9BQUEsR0FFVWxELFlBQVkiLCJpZ25vcmVMaXN0IjpbXX0=