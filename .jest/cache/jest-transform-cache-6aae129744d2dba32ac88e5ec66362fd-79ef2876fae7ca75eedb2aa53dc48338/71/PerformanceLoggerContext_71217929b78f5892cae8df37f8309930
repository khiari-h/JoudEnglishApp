3d0220e956e310063da2fc58e868043a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.usePerformanceLogger = usePerformanceLogger;
var _GlobalPerformanceLogger = _interopRequireDefault(require("./GlobalPerformanceLogger"));
var _react = _interopRequireWildcard(require("react"));
var React = _react;
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var PerformanceLoggerContext = React.createContext(_GlobalPerformanceLogger.default);
if (__DEV__) {
  PerformanceLoggerContext.displayName = 'PerformanceLoggerContext';
}
function usePerformanceLogger() {
  return (0, _react.useContext)(PerformanceLoggerContext);
}
var _default = exports.default = PerformanceLoggerContext;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfR2xvYmFsUGVyZm9ybWFuY2VMb2dnZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiUmVhY3QiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlBlcmZvcm1hbmNlTG9nZ2VyQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJHbG9iYWxQZXJmb3JtYW5jZUxvZ2dlciIsIl9fREVWX18iLCJkaXNwbGF5TmFtZSIsInVzZVBlcmZvcm1hbmNlTG9nZ2VyIiwidXNlQ29udGV4dCIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlBlcmZvcm1hbmNlTG9nZ2VyQ29udGV4dC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0XG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IHR5cGUge0lQZXJmb3JtYW5jZUxvZ2dlcn0gZnJvbSAnLi9jcmVhdGVQZXJmb3JtYW5jZUxvZ2dlcic7XG5cbmltcG9ydCBHbG9iYWxQZXJmb3JtYW5jZUxvZ2dlciBmcm9tICcuL0dsb2JhbFBlcmZvcm1hbmNlTG9nZ2VyJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7dXNlQ29udGV4dH0gZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIFRoaXMgaXMgYSBSZWFjdCBDb250ZXh0IHRoYXQgcHJvdmlkZXMgYSBzY29wZWQgaW5zdGFuY2Ugb2YgSVBlcmZvcm1hbmNlTG9nZ2VyLlxuICogV2Ugd3JhcCBldmVyeSA8QXBwQ29udGFpbmVyIC8+IHdpdGggYSBQcm92aWRlciBmb3IgdGhpcyBjb250ZXh0IHNvIHRoZSBsb2dnZXJcbiAqIHNob3VsZCBiZSBhdmFpbGFibGUgaW4gZXZlcnkgY29tcG9uZW50LlxuICogU2VlIFJlYWN0IGRvY3MgYWJvdXQgdXNpbmcgQ29udGV4dDogaHR0cHM6Ly9yZWFjdC5kZXYvZG9jcy9jb250ZXh0Lmh0bWxcbiAqL1xuY29uc3QgUGVyZm9ybWFuY2VMb2dnZXJDb250ZXh0OiBSZWFjdC5Db250ZXh0PElQZXJmb3JtYW5jZUxvZ2dlcj4gPVxuICBSZWFjdC5jcmVhdGVDb250ZXh0KEdsb2JhbFBlcmZvcm1hbmNlTG9nZ2VyKTtcbmlmIChfX0RFVl9fKSB7XG4gIFBlcmZvcm1hbmNlTG9nZ2VyQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdQZXJmb3JtYW5jZUxvZ2dlckNvbnRleHQnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlUGVyZm9ybWFuY2VMb2dnZXIoKTogSVBlcmZvcm1hbmNlTG9nZ2VyIHtcbiAgcmV0dXJuIHVzZUNvbnRleHQoUGVyZm9ybWFuY2VMb2dnZXJDb250ZXh0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUGVyZm9ybWFuY2VMb2dnZXJDb250ZXh0O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFZQSxJQUFBQSx3QkFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsTUFBQSxHQUFBQyx1QkFBQSxDQUFBRixPQUFBO0FBQStCLElBQUFHLEtBQUEsR0FBQUYsTUFBQTtBQUFBLFNBQUFDLHdCQUFBRSxDQUFBLEVBQUFDLENBQUEsNkJBQUFDLE9BQUEsTUFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBSix1QkFBQSxZQUFBQSx3QkFBQUUsQ0FBQSxFQUFBQyxDQUFBLFNBQUFBLENBQUEsSUFBQUQsQ0FBQSxJQUFBQSxDQUFBLENBQUFLLFVBQUEsU0FBQUwsQ0FBQSxNQUFBTSxDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxLQUFBQyxTQUFBLFFBQUFDLE9BQUEsRUFBQVYsQ0FBQSxpQkFBQUEsQ0FBQSx1QkFBQUEsQ0FBQSx5QkFBQUEsQ0FBQSxTQUFBUSxDQUFBLE1BQUFGLENBQUEsR0FBQUwsQ0FBQSxHQUFBRyxDQUFBLEdBQUFELENBQUEsUUFBQUcsQ0FBQSxDQUFBSyxHQUFBLENBQUFYLENBQUEsVUFBQU0sQ0FBQSxDQUFBTSxHQUFBLENBQUFaLENBQUEsR0FBQU0sQ0FBQSxDQUFBTyxHQUFBLENBQUFiLENBQUEsRUFBQVEsQ0FBQSxjQUFBTSxFQUFBLElBQUFkLENBQUEsZ0JBQUFjLEVBQUEsT0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFoQixDQUFBLEVBQUFjLEVBQUEsT0FBQVAsQ0FBQSxJQUFBRCxDQUFBLEdBQUFXLE1BQUEsQ0FBQUMsY0FBQSxLQUFBRCxNQUFBLENBQUFFLHdCQUFBLENBQUFuQixDQUFBLEVBQUFjLEVBQUEsT0FBQVAsQ0FBQSxDQUFBSyxHQUFBLElBQUFMLENBQUEsQ0FBQU0sR0FBQSxJQUFBUCxDQUFBLENBQUFFLENBQUEsRUFBQU0sRUFBQSxFQUFBUCxDQUFBLElBQUFDLENBQUEsQ0FBQU0sRUFBQSxJQUFBZCxDQUFBLENBQUFjLEVBQUEsV0FBQU4sQ0FBQSxLQUFBUixDQUFBLEVBQUFDLENBQUE7QUFTL0IsSUFBTW1CLHdCQUEyRCxHQUMvRHJCLEtBQUssQ0FBQ3NCLGFBQWEsQ0FBQ0MsZ0NBQXVCLENBQUM7QUFDOUMsSUFBSUMsT0FBTyxFQUFFO0VBQ1hILHdCQUF3QixDQUFDSSxXQUFXLEdBQUcsMEJBQTBCO0FBQ25FO0FBRU8sU0FBU0Msb0JBQW9CQSxDQUFBLEVBQXVCO0VBQ3pELE9BQU8sSUFBQUMsaUJBQVUsRUFBQ04sd0JBQXdCLENBQUM7QUFDN0M7QUFBQyxJQUFBTyxRQUFBLEdBQUFDLE9BQUEsQ0FBQWxCLE9BQUEsR0FFY1Usd0JBQXdCIiwiaWdub3JlTGlzdCI6W119