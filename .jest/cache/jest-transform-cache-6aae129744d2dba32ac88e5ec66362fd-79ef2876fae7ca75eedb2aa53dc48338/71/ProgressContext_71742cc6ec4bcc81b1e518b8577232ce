f07db738b559b2f5146f202848303c2c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useProgressWrite = exports.useProgressRead = exports.useProgress = exports.ProgressWriteContext = exports.ProgressReadContext = exports.ProgressProvider = exports.ProgressContext = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _constants = require("../utils/constants");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
var ProgressContext = exports.ProgressContext = (0, _react.createContext)();
var ProgressReadContext = exports.ProgressReadContext = (0, _react.createContext)();
var ProgressWriteContext = exports.ProgressWriteContext = (0, _react.createContext)();
var createInitialProgress = function createInitialProgress() {
  return {
    levels: {
      '1': {
        completed: 0,
        total: 100
      },
      '2': {
        completed: 0,
        total: 100
      },
      '3': {
        completed: 0,
        total: 100
      },
      '4': {
        completed: 0,
        total: 100
      },
      '5': {
        completed: 0,
        total: 100
      },
      '6': {
        completed: 0,
        total: 100
      },
      'bonus': {
        completed: 0,
        total: 100
      }
    },
    exercises: {
      vocabulary: {
        '1': {
          completed: 0,
          total: 100
        },
        '2': {
          completed: 0,
          total: 100
        },
        '3': {
          completed: 0,
          total: 100
        },
        '4': {
          completed: 0,
          total: 100
        },
        '5': {
          completed: 0,
          total: 100
        },
        '6': {
          completed: 0,
          total: 100
        },
        'bonus': {
          completed: 0,
          total: 100
        }
      },
      phrases: {
        '1': {
          completed: 0,
          total: 100
        },
        '2': {
          completed: 0,
          total: 100
        },
        '3': {
          completed: 0,
          total: 100
        },
        '4': {
          completed: 0,
          total: 100
        },
        '5': {
          completed: 0,
          total: 100
        },
        '6': {
          completed: 0,
          total: 100
        },
        'bonus': {
          completed: 0,
          total: 100
        }
      },
      grammar: {
        '1': {
          completed: 0,
          total: 100
        },
        '2': {
          completed: 0,
          total: 100
        },
        '3': {
          completed: 0,
          total: 100
        },
        '4': {
          completed: 0,
          total: 100
        },
        '5': {
          completed: 0,
          total: 100
        },
        '6': {
          completed: 0,
          total: 100
        }
      }
    },
    stats: {
      streak: 0,
      totalTimeSpent: 0,
      correctAnswers: 0,
      totalAnswers: 0,
      exercisesCompleted: 0,
      lastLogin: null
    },
    lastActivity: {
      type: null,
      level: null,
      timestamp: null
    }
  };
};
var ProgressProvider = exports.ProgressProvider = function ProgressProvider(_ref) {
  var children = _ref.children;
  var _useState = (0, _react.useState)(createInitialProgress()),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    progress = _useState2[0],
    setProgress = _useState2[1];
  var _useState3 = (0, _react.useState)(true),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isLoading = _useState4[0],
    setIsLoading = _useState4[1];
  var saveTimeoutRef = (0, _react.useRef)(null);
  var isInitialLoad = (0, _react.useRef)(true);
  (0, _react.useEffect)(function () {
    var loadProgress = function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* () {
        try {
          var stored = yield _asyncStorage.default.getItem(_constants.STORAGE_KEYS.USER_PROGRESS);
          if (stored) {
            var parsed = JSON.parse(stored);
            setProgress(parsed);
          }
        } catch (error) {
          console.error('Erreur chargement progression:', error);
        } finally {
          setIsLoading(false);
          isInitialLoad.current = false;
        }
      });
      return function loadProgress() {
        return _ref2.apply(this, arguments);
      };
    }();
    loadProgress();
  }, []);
  (0, _react.useEffect)(function () {
    if (isLoading || isInitialLoad.current) {
      return;
    }
    if (saveTimeoutRef.current) {
      clearTimeout(saveTimeoutRef.current);
    }
    saveTimeoutRef.current = setTimeout((0, _asyncToGenerator2.default)(function* () {
      try {
        yield _asyncStorage.default.setItem(_constants.STORAGE_KEYS.USER_PROGRESS, JSON.stringify(progress));
      } catch (error) {
        console.error('Erreur sauvegarde progression:', error);
      }
    }), 500);
    return function () {
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
    };
  }, [progress, isLoading]);
  var updateExerciseProgress = (0, _react.useCallback)(function (exerciseType, level, completed) {
    setProgress(function (prev) {
      var newProgress = Object.assign({}, prev);
      if (!newProgress.exercises[exerciseType]) {
        newProgress.exercises[exerciseType] = {};
      }
      if (!newProgress.exercises[exerciseType][level]) {
        newProgress.exercises[exerciseType][level] = {
          completed: 0,
          total: 100
        };
      }
      newProgress.exercises[exerciseType][level].completed = Math.min(Math.max(0, completed), 100);
      var levelExercises = Object.keys(newProgress.exercises).map(function (type) {
        var _newProgress$exercise;
        return ((_newProgress$exercise = newProgress.exercises[type][level]) == null ? void 0 : _newProgress$exercise.completed) || 0;
      }).filter(function (val) {
        return val > 0;
      });
      if (levelExercises.length > 0) {
        var averageProgress = levelExercises.reduce(function (sum, val) {
          return sum + val;
        }, 0) / levelExercises.length;
        newProgress.levels[level].completed = Math.round(averageProgress);
      }
      newProgress.lastActivity = {
        type: exerciseType,
        level: level,
        timestamp: new Date().toISOString()
      };
      return newProgress;
    });
  }, []);
  var updateStats = (0, _react.useCallback)(function (newStats) {
    setProgress(function (prev) {
      return Object.assign({}, prev, {
        stats: Object.assign({}, prev.stats, newStats)
      });
    });
  }, []);
  var calculateGlobalProgress = (0, _react.useCallback)(function () {
    var levels = Object.values(progress.levels);
    if (levels.length === 0) return 0;
    var total = levels.reduce(function (sum, level) {
      return sum + level.completed;
    }, 0);
    return Math.round(total / levels.length);
  }, [progress.levels]);
  var calculateLevelProgress = (0, _react.useCallback)(function (level) {
    var _progress$levels$leve;
    return ((_progress$levels$leve = progress.levels[level]) == null ? void 0 : _progress$levels$leve.completed) || 0;
  }, [progress.levels]);
  var resetProgress = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      yield _asyncStorage.default.removeItem(_constants.STORAGE_KEYS.USER_PROGRESS);
      setProgress(createInitialProgress());
      return true;
    } catch (error) {
      console.error('Erreur reset progression:', error);
      return false;
    }
  }), []);
  var contextValue = (0, _react.useMemo)(function () {
    return {
      progress: progress,
      isLoading: isLoading,
      updateExerciseProgress: updateExerciseProgress,
      updateStats: updateStats,
      calculateGlobalProgress: calculateGlobalProgress,
      calculateLevelProgress: calculateLevelProgress,
      resetProgress: resetProgress
    };
  }, [progress, isLoading, updateExerciseProgress, updateStats, calculateGlobalProgress, calculateLevelProgress, resetProgress]);
  var readValue = (0, _react.useMemo)(function () {
    return {
      progress: progress,
      isLoading: isLoading,
      calculateGlobalProgress: calculateGlobalProgress,
      calculateLevelProgress: calculateLevelProgress
    };
  }, [progress, isLoading, calculateGlobalProgress, calculateLevelProgress]);
  var writeValue = (0, _react.useMemo)(function () {
    return {
      updateExerciseProgress: updateExerciseProgress,
      updateStats: updateStats,
      resetProgress: resetProgress
    };
  }, [updateExerciseProgress, updateStats, resetProgress]);
  return (0, _jsxRuntime.jsx)(ProgressReadContext.Provider, {
    value: readValue,
    children: (0, _jsxRuntime.jsx)(ProgressWriteContext.Provider, {
      value: writeValue,
      children: (0, _jsxRuntime.jsx)(ProgressContext.Provider, {
        value: contextValue,
        children: children
      })
    })
  });
};
var useProgress = exports.useProgress = function useProgress() {
  var context = (0, _react.useContext)(ProgressContext);
  if (!context) {
    throw new Error('useProgress must be used within a ProgressProvider');
  }
  return context;
};
var useProgressRead = exports.useProgressRead = function useProgressRead() {
  var context = (0, _react.useContext)(ProgressReadContext);
  if (!context) {
    throw new Error('useProgressRead must be used within a ProgressProvider');
  }
  return context;
};
var useProgressWrite = exports.useProgressWrite = function useProgressWrite() {
  var context = (0, _react.useContext)(ProgressWriteContext);
  if (!context) {
    throw new Error('useProgressWrite must be used within a ProgressProvider');
  }
  return context;
};
ProgressProvider.propTypes = {
  children: _propTypes.default.node.isRequired
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX2FzeW5jU3RvcmFnZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfY29uc3RhbnRzIiwiX3Byb3BUeXBlcyIsIl9qc3hSdW50aW1lIiwiUHJvZ3Jlc3NDb250ZXh0IiwiZXhwb3J0cyIsImNyZWF0ZUNvbnRleHQiLCJQcm9ncmVzc1JlYWRDb250ZXh0IiwiUHJvZ3Jlc3NXcml0ZUNvbnRleHQiLCJjcmVhdGVJbml0aWFsUHJvZ3Jlc3MiLCJsZXZlbHMiLCJjb21wbGV0ZWQiLCJ0b3RhbCIsImV4ZXJjaXNlcyIsInZvY2FidWxhcnkiLCJwaHJhc2VzIiwiZ3JhbW1hciIsInN0YXRzIiwic3RyZWFrIiwidG90YWxUaW1lU3BlbnQiLCJjb3JyZWN0QW5zd2VycyIsInRvdGFsQW5zd2VycyIsImV4ZXJjaXNlc0NvbXBsZXRlZCIsImxhc3RMb2dpbiIsImxhc3RBY3Rpdml0eSIsInR5cGUiLCJsZXZlbCIsInRpbWVzdGFtcCIsIlByb2dyZXNzUHJvdmlkZXIiLCJfcmVmIiwiY2hpbGRyZW4iLCJfdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsIl91c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheTIiLCJkZWZhdWx0IiwicHJvZ3Jlc3MiLCJzZXRQcm9ncmVzcyIsIl91c2VTdGF0ZTMiLCJfdXNlU3RhdGU0IiwiaXNMb2FkaW5nIiwic2V0SXNMb2FkaW5nIiwic2F2ZVRpbWVvdXRSZWYiLCJ1c2VSZWYiLCJpc0luaXRpYWxMb2FkIiwidXNlRWZmZWN0IiwibG9hZFByb2dyZXNzIiwiX3JlZjIiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJzdG9yZWQiLCJBc3luY1N0b3JhZ2UiLCJnZXRJdGVtIiwiU1RPUkFHRV9LRVlTIiwiVVNFUl9QUk9HUkVTUyIsInBhcnNlZCIsIkpTT04iLCJwYXJzZSIsImVycm9yIiwiY29uc29sZSIsImN1cnJlbnQiLCJhcHBseSIsImFyZ3VtZW50cyIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwidXBkYXRlRXhlcmNpc2VQcm9ncmVzcyIsInVzZUNhbGxiYWNrIiwiZXhlcmNpc2VUeXBlIiwicHJldiIsIm5ld1Byb2dyZXNzIiwiT2JqZWN0IiwiYXNzaWduIiwiTWF0aCIsIm1pbiIsIm1heCIsImxldmVsRXhlcmNpc2VzIiwia2V5cyIsIm1hcCIsIl9uZXdQcm9ncmVzcyRleGVyY2lzZSIsImZpbHRlciIsInZhbCIsImxlbmd0aCIsImF2ZXJhZ2VQcm9ncmVzcyIsInJlZHVjZSIsInN1bSIsInJvdW5kIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwidXBkYXRlU3RhdHMiLCJuZXdTdGF0cyIsImNhbGN1bGF0ZUdsb2JhbFByb2dyZXNzIiwidmFsdWVzIiwiY2FsY3VsYXRlTGV2ZWxQcm9ncmVzcyIsIl9wcm9ncmVzcyRsZXZlbHMkbGV2ZSIsInJlc2V0UHJvZ3Jlc3MiLCJyZW1vdmVJdGVtIiwiY29udGV4dFZhbHVlIiwidXNlTWVtbyIsInJlYWRWYWx1ZSIsIndyaXRlVmFsdWUiLCJqc3giLCJQcm92aWRlciIsInZhbHVlIiwidXNlUHJvZ3Jlc3MiLCJjb250ZXh0IiwidXNlQ29udGV4dCIsIkVycm9yIiwidXNlUHJvZ3Jlc3NSZWFkIiwidXNlUHJvZ3Jlc3NXcml0ZSIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsIm5vZGUiLCJpc1JlcXVpcmVkIl0sInNvdXJjZXMiOlsiUHJvZ3Jlc3NDb250ZXh0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9jb250ZXh0cy9Qcm9ncmVzc0NvbnRleHQuanMgLSBWRVJTSU9OIENPUlJJR8OJRSBTQU5TIEJPVUNMRVxyXG5pbXBvcnQgeyBjcmVhdGVDb250ZXh0LCB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VDb250ZXh0LCB1c2VDYWxsYmFjaywgdXNlUmVmLCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgQXN5bmNTdG9yYWdlIGZyb20gJ0ByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlJztcclxuaW1wb3J0IHsgU1RPUkFHRV9LRVlTIH0gZnJvbSAnLi4vdXRpbHMvY29uc3RhbnRzJztcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuXHJcbi8vIENyw6llciBsZSBjb250ZXh0ZVxyXG5leHBvcnQgY29uc3QgUHJvZ3Jlc3NDb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xyXG5leHBvcnQgY29uc3QgUHJvZ3Jlc3NSZWFkQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcclxuZXhwb3J0IGNvbnN0IFByb2dyZXNzV3JpdGVDb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xyXG5cclxuLy8gRG9ubsOpZXMgaW5pdGlhbGVzIHNpbXBsZXNcclxuY29uc3QgY3JlYXRlSW5pdGlhbFByb2dyZXNzID0gKCkgPT4gKHtcclxuICAvLyBQcm9ncmVzc2lvbiBwYXIgbml2ZWF1ICgwLTEwMCUpXHJcbiAgbGV2ZWxzOiB7XHJcbiAgICAnMSc6IHsgY29tcGxldGVkOiAwLCB0b3RhbDogMTAwIH0sXHJcbiAgICAnMic6IHsgY29tcGxldGVkOiAwLCB0b3RhbDogMTAwIH0sXHJcbiAgICAnMyc6IHsgY29tcGxldGVkOiAwLCB0b3RhbDogMTAwIH0sXHJcbiAgICAnNCc6IHsgY29tcGxldGVkOiAwLCB0b3RhbDogMTAwIH0sXHJcbiAgICAnNSc6IHsgY29tcGxldGVkOiAwLCB0b3RhbDogMTAwIH0sXHJcbiAgICAnNic6IHsgY29tcGxldGVkOiAwLCB0b3RhbDogMTAwIH0sXHJcbiAgICAnYm9udXMnOiB7IGNvbXBsZXRlZDogMCwgdG90YWw6IDEwMCB9LFxyXG4gIH0sXHJcbiAgXHJcbiAgLy8gUHJvZ3Jlc3Npb24gcGFyIGV4ZXJjaWNlIGV0IG5pdmVhdVxyXG4gIGV4ZXJjaXNlczoge1xyXG4gICAgdm9jYWJ1bGFyeToge1xyXG4gICAgICAnMSc6IHsgY29tcGxldGVkOiAwLCB0b3RhbDogMTAwIH0sXHJcbiAgICAgICcyJzogeyBjb21wbGV0ZWQ6IDAsIHRvdGFsOiAxMDAgfSxcclxuICAgICAgJzMnOiB7IGNvbXBsZXRlZDogMCwgdG90YWw6IDEwMCB9LFxyXG4gICAgICAnNCc6IHsgY29tcGxldGVkOiAwLCB0b3RhbDogMTAwIH0sXHJcbiAgICAgICc1JzogeyBjb21wbGV0ZWQ6IDAsIHRvdGFsOiAxMDAgfSxcclxuICAgICAgJzYnOiB7IGNvbXBsZXRlZDogMCwgdG90YWw6IDEwMCB9LFxyXG4gICAgICAnYm9udXMnOiB7IGNvbXBsZXRlZDogMCwgdG90YWw6IDEwMCB9LFxyXG4gICAgfSxcclxuICAgIHBocmFzZXM6IHtcclxuICAgICAgJzEnOiB7IGNvbXBsZXRlZDogMCwgdG90YWw6IDEwMCB9LFxyXG4gICAgICAnMic6IHsgY29tcGxldGVkOiAwLCB0b3RhbDogMTAwIH0sXHJcbiAgICAgICczJzogeyBjb21wbGV0ZWQ6IDAsIHRvdGFsOiAxMDAgfSxcclxuICAgICAgJzQnOiB7IGNvbXBsZXRlZDogMCwgdG90YWw6IDEwMCB9LFxyXG4gICAgICAnNSc6IHsgY29tcGxldGVkOiAwLCB0b3RhbDogMTAwIH0sXHJcbiAgICAgICc2JzogeyBjb21wbGV0ZWQ6IDAsIHRvdGFsOiAxMDAgfSxcclxuICAgICAgJ2JvbnVzJzogeyBjb21wbGV0ZWQ6IDAsIHRvdGFsOiAxMDAgfSxcclxuICAgIH0sXHJcbiAgICBncmFtbWFyOiB7XHJcbiAgICAgICcxJzogeyBjb21wbGV0ZWQ6IDAsIHRvdGFsOiAxMDAgfSxcclxuICAgICAgJzInOiB7IGNvbXBsZXRlZDogMCwgdG90YWw6IDEwMCB9LFxyXG4gICAgICAnMyc6IHsgY29tcGxldGVkOiAwLCB0b3RhbDogMTAwIH0sXHJcbiAgICAgICc0JzogeyBjb21wbGV0ZWQ6IDAsIHRvdGFsOiAxMDAgfSxcclxuICAgICAgJzUnOiB7IGNvbXBsZXRlZDogMCwgdG90YWw6IDEwMCB9LFxyXG4gICAgICAnNic6IHsgY29tcGxldGVkOiAwLCB0b3RhbDogMTAwIH0sXHJcbiAgICB9LFxyXG4gICAgLy8gLi4uIGF1dHJlcyBleGVyY2ljZXMgcGV1dmVudCDDqnRyZSBham91dMOpcyBhdSBiZXNvaW5cclxuICB9LFxyXG5cclxuICAvLyBTdGF0cyBnbG9iYWxlc1xyXG4gIHN0YXRzOiB7XHJcbiAgICBzdHJlYWs6IDAsXHJcbiAgICB0b3RhbFRpbWVTcGVudDogMCxcclxuICAgIGNvcnJlY3RBbnN3ZXJzOiAwLFxyXG4gICAgdG90YWxBbnN3ZXJzOiAwLFxyXG4gICAgZXhlcmNpc2VzQ29tcGxldGVkOiAwLFxyXG4gICAgbGFzdExvZ2luOiBudWxsLFxyXG4gIH0sXHJcblxyXG4gIC8vIERlcm5pw6hyZSBhY3Rpdml0w6lcclxuICBsYXN0QWN0aXZpdHk6IHtcclxuICAgIHR5cGU6IG51bGwsXHJcbiAgICBsZXZlbDogbnVsbCxcclxuICAgIHRpbWVzdGFtcDogbnVsbCxcclxuICB9LFxyXG59KTtcclxuXHJcbi8vIEZvdXJuaXNzZXVyIGR1IGNvbnRleHRlXHJcbmV4cG9ydCBjb25zdCBQcm9ncmVzc1Byb3ZpZGVyID0gKHsgY2hpbGRyZW4gfSkgPT4ge1xyXG4gIGNvbnN0IFtwcm9ncmVzcywgc2V0UHJvZ3Jlc3NdID0gdXNlU3RhdGUoY3JlYXRlSW5pdGlhbFByb2dyZXNzKCkpO1xyXG4gIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcclxuICBcclxuICAvLyDinIUgQ09SUkVDVElPTiA6IFJlZiBwb3VyIMOpdml0ZXIgbGEgYm91Y2xlIGRlIHNhdXZlZ2FyZGVcclxuICBjb25zdCBzYXZlVGltZW91dFJlZiA9IHVzZVJlZihudWxsKTtcclxuICBjb25zdCBpc0luaXRpYWxMb2FkID0gdXNlUmVmKHRydWUpO1xyXG5cclxuICAvLyA9PT09PT09PT09IENIQVJHRU1FTlQgSU5JVElBTCA9PT09PT09PT09XHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGNvbnN0IGxvYWRQcm9ncmVzcyA9IGFzeW5jICgpID0+IHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBzdG9yZWQgPSBhd2FpdCBBc3luY1N0b3JhZ2UuZ2V0SXRlbShTVE9SQUdFX0tFWVMuVVNFUl9QUk9HUkVTUyk7XHJcbiAgICAgICAgaWYgKHN0b3JlZCkge1xyXG4gICAgICAgICAgY29uc3QgcGFyc2VkID0gSlNPTi5wYXJzZShzdG9yZWQpO1xyXG4gICAgICAgICAgc2V0UHJvZ3Jlc3MocGFyc2VkKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyZXVyIGNoYXJnZW1lbnQgcHJvZ3Jlc3Npb246JywgZXJyb3IpO1xyXG4gICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XHJcbiAgICAgICAgaXNJbml0aWFsTG9hZC5jdXJyZW50ID0gZmFsc2U7IC8vIOKchSBNYXJxdWVyIHF1ZSBsZSBjaGFyZ2VtZW50IGluaXRpYWwgZXN0IGZpbmlcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBsb2FkUHJvZ3Jlc3MoKTtcclxuICB9LCBbXSk7IC8vIOKchSBDT1JSSUfDiSA6IEF1Y3VuZSBkw6lwZW5kYW5jZVxyXG5cclxuICAvLyA9PT09PT09PT09IFNBVVZFR0FSREUgQVVUTyBDT1JSSUfDiUUgPT09PT09PT09PVxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAvLyDinIUgQ09SUkVDVElPTiA6IE5lIHBhcyBzYXV2ZWdhcmRlciBwZW5kYW50IGxlIGNoYXJnZW1lbnQgaW5pdGlhbFxyXG4gICAgaWYgKGlzTG9hZGluZyB8fCBpc0luaXRpYWxMb2FkLmN1cnJlbnQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENsZWFyIHByZXZpb3VzIHRpbWVvdXRcclxuICAgIGlmIChzYXZlVGltZW91dFJlZi5jdXJyZW50KSB7XHJcbiAgICAgIGNsZWFyVGltZW91dChzYXZlVGltZW91dFJlZi5jdXJyZW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTZXQgbmV3IHRpbWVvdXQgZm9yIGRlYm91bmNlZCBzYXZlXHJcbiAgICBzYXZlVGltZW91dFJlZi5jdXJyZW50ID0gc2V0VGltZW91dChhc3luYyAoKSA9PiB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgYXdhaXQgQXN5bmNTdG9yYWdlLnNldEl0ZW0oU1RPUkFHRV9LRVlTLlVTRVJfUFJPR1JFU1MsIEpTT04uc3RyaW5naWZ5KHByb2dyZXNzKSk7XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyZXVyIHNhdXZlZ2FyZGUgcHJvZ3Jlc3Npb246JywgZXJyb3IpO1xyXG4gICAgICB9XHJcbiAgICB9LCA1MDApO1xyXG5cclxuICAgIC8vIENsZWFudXAgdGltZW91dFxyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgaWYgKHNhdmVUaW1lb3V0UmVmLmN1cnJlbnQpIHtcclxuICAgICAgICBjbGVhclRpbWVvdXQoc2F2ZVRpbWVvdXRSZWYuY3VycmVudCk7XHJcbiAgICAgIH1cclxuICAgICAgLy8gU3VwcHJlc3Npb24gZHUgcmV0dXJuIG51bGwgKGF1Y3VuIHJldHVybiBhdHRlbmR1KVxyXG4gICAgfTtcclxuICB9LCBbcHJvZ3Jlc3MsIGlzTG9hZGluZ10pOyAvLyDinIUgSU1QT1JUQU5UIDogSW5jbHVyZSBpc0xvYWRpbmcgcG91ciDDqXZpdGVyIHNhdXZlZ2FyZGUgcGVuZGFudCBjaGFyZ2VtZW50XHJcblxyXG4gIC8vID09PT09PT09PT0gTcOJVEhPREVTIE3DiU1PUklTw4lFUyA9PT09PT09PT09XHJcblxyXG4gIC8vIOKchSBDT1JSRUNUSU9OIDogTcOpbW9yaXNlciB0b3V0ZXMgbGVzIGZvbmN0aW9uc1xyXG4gIGNvbnN0IHVwZGF0ZUV4ZXJjaXNlUHJvZ3Jlc3MgPSB1c2VDYWxsYmFjaygoZXhlcmNpc2VUeXBlLCBsZXZlbCwgY29tcGxldGVkKSA9PiB7XHJcbiAgICBzZXRQcm9ncmVzcyhwcmV2ID0+IHtcclxuICAgICAgY29uc3QgbmV3UHJvZ3Jlc3MgPSB7IC4uLnByZXYgfTtcclxuICAgICAgXHJcbiAgICAgIC8vIFbDqXJpZmllciBxdWUgbCdleGVyY2ljZSBleGlzdGVcclxuICAgICAgaWYgKCFuZXdQcm9ncmVzcy5leGVyY2lzZXNbZXhlcmNpc2VUeXBlXSkge1xyXG4gICAgICAgIG5ld1Byb2dyZXNzLmV4ZXJjaXNlc1tleGVyY2lzZVR5cGVdID0ge307XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmICghbmV3UHJvZ3Jlc3MuZXhlcmNpc2VzW2V4ZXJjaXNlVHlwZV1bbGV2ZWxdKSB7XHJcbiAgICAgICAgbmV3UHJvZ3Jlc3MuZXhlcmNpc2VzW2V4ZXJjaXNlVHlwZV1bbGV2ZWxdID0geyBjb21wbGV0ZWQ6IDAsIHRvdGFsOiAxMDAgfTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gTWV0dHJlIMOgIGpvdXIgbCdleGVyY2ljZVxyXG4gICAgICBuZXdQcm9ncmVzcy5leGVyY2lzZXNbZXhlcmNpc2VUeXBlXVtsZXZlbF0uY29tcGxldGVkID0gTWF0aC5taW4oTWF0aC5tYXgoMCwgY29tcGxldGVkKSwgMTAwKTtcclxuXHJcbiAgICAgIC8vIFJlY2FsY3VsZXIgcHJvZ3Jlc3Npb24gZHUgbml2ZWF1IChtb3llbm5lIGRlcyBleGVyY2ljZXMpXHJcbiAgICAgIGNvbnN0IGxldmVsRXhlcmNpc2VzID0gT2JqZWN0LmtleXMobmV3UHJvZ3Jlc3MuZXhlcmNpc2VzKS5tYXAodHlwZSA9PiBcclxuICAgICAgICBuZXdQcm9ncmVzcy5leGVyY2lzZXNbdHlwZV1bbGV2ZWxdPy5jb21wbGV0ZWQgfHwgMFxyXG4gICAgICApLmZpbHRlcih2YWwgPT4gdmFsID4gMCk7XHJcblxyXG4gICAgICBpZiAobGV2ZWxFeGVyY2lzZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGNvbnN0IGF2ZXJhZ2VQcm9ncmVzcyA9IGxldmVsRXhlcmNpc2VzLnJlZHVjZSgoc3VtLCB2YWwpID0+IHN1bSArIHZhbCwgMCkgLyBsZXZlbEV4ZXJjaXNlcy5sZW5ndGg7XHJcbiAgICAgICAgbmV3UHJvZ3Jlc3MubGV2ZWxzW2xldmVsXS5jb21wbGV0ZWQgPSBNYXRoLnJvdW5kKGF2ZXJhZ2VQcm9ncmVzcyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIE1ldHRyZSDDoCBqb3VyIGRlcm5pw6hyZSBhY3Rpdml0w6lcclxuICAgICAgbmV3UHJvZ3Jlc3MubGFzdEFjdGl2aXR5ID0ge1xyXG4gICAgICAgIHR5cGU6IGV4ZXJjaXNlVHlwZSxcclxuICAgICAgICBsZXZlbCxcclxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHJldHVybiBuZXdQcm9ncmVzcztcclxuICAgIH0pO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgY29uc3QgdXBkYXRlU3RhdHMgPSB1c2VDYWxsYmFjaygobmV3U3RhdHMpID0+IHtcclxuICAgIHNldFByb2dyZXNzKHByZXYgPT4gKHtcclxuICAgICAgLi4ucHJldixcclxuICAgICAgc3RhdHM6IHsgLi4ucHJldi5zdGF0cywgLi4ubmV3U3RhdHMgfVxyXG4gICAgfSkpO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgY29uc3QgY2FsY3VsYXRlR2xvYmFsUHJvZ3Jlc3MgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICBjb25zdCBsZXZlbHMgPSBPYmplY3QudmFsdWVzKHByb2dyZXNzLmxldmVscyk7XHJcbiAgICBpZiAobGV2ZWxzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDA7XHJcbiAgICBcclxuICAgIGNvbnN0IHRvdGFsID0gbGV2ZWxzLnJlZHVjZSgoc3VtLCBsZXZlbCkgPT4gc3VtICsgbGV2ZWwuY29tcGxldGVkLCAwKTtcclxuICAgIHJldHVybiBNYXRoLnJvdW5kKHRvdGFsIC8gbGV2ZWxzLmxlbmd0aCk7XHJcbiAgfSwgW3Byb2dyZXNzLmxldmVsc10pO1xyXG5cclxuICBjb25zdCBjYWxjdWxhdGVMZXZlbFByb2dyZXNzID0gdXNlQ2FsbGJhY2soKGxldmVsKSA9PiB7XHJcbiAgICByZXR1cm4gcHJvZ3Jlc3MubGV2ZWxzW2xldmVsXT8uY29tcGxldGVkIHx8IDA7XHJcbiAgfSwgW3Byb2dyZXNzLmxldmVsc10pO1xyXG5cclxuICBjb25zdCByZXNldFByb2dyZXNzID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgYXdhaXQgQXN5bmNTdG9yYWdlLnJlbW92ZUl0ZW0oU1RPUkFHRV9LRVlTLlVTRVJfUFJPR1JFU1MpO1xyXG4gICAgICBzZXRQcm9ncmVzcyhjcmVhdGVJbml0aWFsUHJvZ3Jlc3MoKSk7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyZXVyIHJlc2V0IHByb2dyZXNzaW9uOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gIH0sIFtdKTtcclxuXHJcbiAgLy8gPT09PT09PT09PSDwn5qoIENPUlJFQ1RJT04gUFJJTkNJUEFMRSA6IFZBTEVVUiBNw4lNT1JJU8OJRSA9PT09PT09PT09XHJcbiAgY29uc3QgY29udGV4dFZhbHVlID0gdXNlTWVtbygoKSA9PiAoe1xyXG4gICAgcHJvZ3Jlc3MsXHJcbiAgICBpc0xvYWRpbmcsXHJcbiAgICB1cGRhdGVFeGVyY2lzZVByb2dyZXNzLFxyXG4gICAgdXBkYXRlU3RhdHMsXHJcbiAgICBjYWxjdWxhdGVHbG9iYWxQcm9ncmVzcyxcclxuICAgIGNhbGN1bGF0ZUxldmVsUHJvZ3Jlc3MsXHJcbiAgICByZXNldFByb2dyZXNzLFxyXG4gIH0pLCBbXHJcbiAgICBwcm9ncmVzcywgXHJcbiAgICBpc0xvYWRpbmcsIFxyXG4gICAgdXBkYXRlRXhlcmNpc2VQcm9ncmVzcywgXHJcbiAgICB1cGRhdGVTdGF0cywgXHJcbiAgICBjYWxjdWxhdGVHbG9iYWxQcm9ncmVzcywgXHJcbiAgICBjYWxjdWxhdGVMZXZlbFByb2dyZXNzLCBcclxuICAgIHJlc2V0UHJvZ3Jlc3NcclxuICBdKTtcclxuXHJcbiAgLy8gRMOpY291cGFnZSByZWFkL3dyaXRlIChub24tcnVwdHVyYW50KTogbm91dmVhdXggY29udGV4dGVzIHBvdXIgc8OpcGFyZXIgbGVzIHJlc3BvbnNhYmlsaXTDqXNcclxuICBjb25zdCByZWFkVmFsdWUgPSB1c2VNZW1vKCgpID0+ICh7XHJcbiAgICBwcm9ncmVzcyxcclxuICAgIGlzTG9hZGluZyxcclxuICAgIGNhbGN1bGF0ZUdsb2JhbFByb2dyZXNzLFxyXG4gICAgY2FsY3VsYXRlTGV2ZWxQcm9ncmVzcyxcclxuICB9KSwgW3Byb2dyZXNzLCBpc0xvYWRpbmcsIGNhbGN1bGF0ZUdsb2JhbFByb2dyZXNzLCBjYWxjdWxhdGVMZXZlbFByb2dyZXNzXSk7XHJcblxyXG4gIGNvbnN0IHdyaXRlVmFsdWUgPSB1c2VNZW1vKCgpID0+ICh7XHJcbiAgICB1cGRhdGVFeGVyY2lzZVByb2dyZXNzLFxyXG4gICAgdXBkYXRlU3RhdHMsXHJcbiAgICByZXNldFByb2dyZXNzLFxyXG4gIH0pLCBbdXBkYXRlRXhlcmNpc2VQcm9ncmVzcywgdXBkYXRlU3RhdHMsIHJlc2V0UHJvZ3Jlc3NdKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxQcm9ncmVzc1JlYWRDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtyZWFkVmFsdWV9PlxyXG4gICAgICA8UHJvZ3Jlc3NXcml0ZUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3dyaXRlVmFsdWV9PlxyXG4gICAgICAgIDxQcm9ncmVzc0NvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NvbnRleHRWYWx1ZX0+XHJcbiAgICAgICAgICB7Y2hpbGRyZW59XHJcbiAgICAgICAgPC9Qcm9ncmVzc0NvbnRleHQuUHJvdmlkZXI+XHJcbiAgICAgIDwvUHJvZ3Jlc3NXcml0ZUNvbnRleHQuUHJvdmlkZXI+XHJcbiAgICA8L1Byb2dyZXNzUmVhZENvbnRleHQuUHJvdmlkZXI+XHJcbiAgKTtcclxufTtcclxuXHJcbi8vIEhvb2sgcG91ciB1dGlsaXNlciBsZSBjb250ZXh0ZVxyXG5leHBvcnQgY29uc3QgdXNlUHJvZ3Jlc3MgPSAoKSA9PiB7XHJcbiAgY29uc3QgY29udGV4dCA9IHVzZUNvbnRleHQoUHJvZ3Jlc3NDb250ZXh0KTtcclxuICBpZiAoIWNvbnRleHQpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcigndXNlUHJvZ3Jlc3MgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIFByb2dyZXNzUHJvdmlkZXInKTtcclxuICB9XHJcbiAgcmV0dXJuIGNvbnRleHQ7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgdXNlUHJvZ3Jlc3NSZWFkID0gKCkgPT4ge1xyXG4gIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0KFByb2dyZXNzUmVhZENvbnRleHQpO1xyXG4gIGlmICghY29udGV4dCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCd1c2VQcm9ncmVzc1JlYWQgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIFByb2dyZXNzUHJvdmlkZXInKTtcclxuICB9XHJcbiAgcmV0dXJuIGNvbnRleHQ7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgdXNlUHJvZ3Jlc3NXcml0ZSA9ICgpID0+IHtcclxuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChQcm9ncmVzc1dyaXRlQ29udGV4dCk7XHJcbiAgaWYgKCFjb250ZXh0KSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3VzZVByb2dyZXNzV3JpdGUgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIFByb2dyZXNzUHJvdmlkZXInKTtcclxuICB9XHJcbiAgcmV0dXJuIGNvbnRleHQ7XHJcbn07XHJcblxyXG5Qcm9ncmVzc1Byb3ZpZGVyLnByb3BUeXBlcyA9IHtcclxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcclxufTsiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQSxJQUFBQSxNQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxhQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBRyxVQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxVQUFBLEdBQUFGLHNCQUFBLENBQUFGLE9BQUE7QUFBbUMsSUFBQUssV0FBQSxHQUFBTCxPQUFBO0FBRzVCLElBQU1NLGVBQWUsR0FBQUMsT0FBQSxDQUFBRCxlQUFBLEdBQUcsSUFBQUUsb0JBQWEsRUFBQyxDQUFDO0FBQ3ZDLElBQU1DLG1CQUFtQixHQUFBRixPQUFBLENBQUFFLG1CQUFBLEdBQUcsSUFBQUQsb0JBQWEsRUFBQyxDQUFDO0FBQzNDLElBQU1FLG9CQUFvQixHQUFBSCxPQUFBLENBQUFHLG9CQUFBLEdBQUcsSUFBQUYsb0JBQWEsRUFBQyxDQUFDO0FBR25ELElBQU1HLHFCQUFxQixHQUFHLFNBQXhCQSxxQkFBcUJBLENBQUE7RUFBQSxPQUFVO0lBRW5DQyxNQUFNLEVBQUU7TUFDTixHQUFHLEVBQUU7UUFBRUMsU0FBUyxFQUFFLENBQUM7UUFBRUMsS0FBSyxFQUFFO01BQUksQ0FBQztNQUNqQyxHQUFHLEVBQUU7UUFBRUQsU0FBUyxFQUFFLENBQUM7UUFBRUMsS0FBSyxFQUFFO01BQUksQ0FBQztNQUNqQyxHQUFHLEVBQUU7UUFBRUQsU0FBUyxFQUFFLENBQUM7UUFBRUMsS0FBSyxFQUFFO01BQUksQ0FBQztNQUNqQyxHQUFHLEVBQUU7UUFBRUQsU0FBUyxFQUFFLENBQUM7UUFBRUMsS0FBSyxFQUFFO01BQUksQ0FBQztNQUNqQyxHQUFHLEVBQUU7UUFBRUQsU0FBUyxFQUFFLENBQUM7UUFBRUMsS0FBSyxFQUFFO01BQUksQ0FBQztNQUNqQyxHQUFHLEVBQUU7UUFBRUQsU0FBUyxFQUFFLENBQUM7UUFBRUMsS0FBSyxFQUFFO01BQUksQ0FBQztNQUNqQyxPQUFPLEVBQUU7UUFBRUQsU0FBUyxFQUFFLENBQUM7UUFBRUMsS0FBSyxFQUFFO01BQUk7SUFDdEMsQ0FBQztJQUdEQyxTQUFTLEVBQUU7TUFDVEMsVUFBVSxFQUFFO1FBQ1YsR0FBRyxFQUFFO1VBQUVILFNBQVMsRUFBRSxDQUFDO1VBQUVDLEtBQUssRUFBRTtRQUFJLENBQUM7UUFDakMsR0FBRyxFQUFFO1VBQUVELFNBQVMsRUFBRSxDQUFDO1VBQUVDLEtBQUssRUFBRTtRQUFJLENBQUM7UUFDakMsR0FBRyxFQUFFO1VBQUVELFNBQVMsRUFBRSxDQUFDO1VBQUVDLEtBQUssRUFBRTtRQUFJLENBQUM7UUFDakMsR0FBRyxFQUFFO1VBQUVELFNBQVMsRUFBRSxDQUFDO1VBQUVDLEtBQUssRUFBRTtRQUFJLENBQUM7UUFDakMsR0FBRyxFQUFFO1VBQUVELFNBQVMsRUFBRSxDQUFDO1VBQUVDLEtBQUssRUFBRTtRQUFJLENBQUM7UUFDakMsR0FBRyxFQUFFO1VBQUVELFNBQVMsRUFBRSxDQUFDO1VBQUVDLEtBQUssRUFBRTtRQUFJLENBQUM7UUFDakMsT0FBTyxFQUFFO1VBQUVELFNBQVMsRUFBRSxDQUFDO1VBQUVDLEtBQUssRUFBRTtRQUFJO01BQ3RDLENBQUM7TUFDREcsT0FBTyxFQUFFO1FBQ1AsR0FBRyxFQUFFO1VBQUVKLFNBQVMsRUFBRSxDQUFDO1VBQUVDLEtBQUssRUFBRTtRQUFJLENBQUM7UUFDakMsR0FBRyxFQUFFO1VBQUVELFNBQVMsRUFBRSxDQUFDO1VBQUVDLEtBQUssRUFBRTtRQUFJLENBQUM7UUFDakMsR0FBRyxFQUFFO1VBQUVELFNBQVMsRUFBRSxDQUFDO1VBQUVDLEtBQUssRUFBRTtRQUFJLENBQUM7UUFDakMsR0FBRyxFQUFFO1VBQUVELFNBQVMsRUFBRSxDQUFDO1VBQUVDLEtBQUssRUFBRTtRQUFJLENBQUM7UUFDakMsR0FBRyxFQUFFO1VBQUVELFNBQVMsRUFBRSxDQUFDO1VBQUVDLEtBQUssRUFBRTtRQUFJLENBQUM7UUFDakMsR0FBRyxFQUFFO1VBQUVELFNBQVMsRUFBRSxDQUFDO1VBQUVDLEtBQUssRUFBRTtRQUFJLENBQUM7UUFDakMsT0FBTyxFQUFFO1VBQUVELFNBQVMsRUFBRSxDQUFDO1VBQUVDLEtBQUssRUFBRTtRQUFJO01BQ3RDLENBQUM7TUFDREksT0FBTyxFQUFFO1FBQ1AsR0FBRyxFQUFFO1VBQUVMLFNBQVMsRUFBRSxD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