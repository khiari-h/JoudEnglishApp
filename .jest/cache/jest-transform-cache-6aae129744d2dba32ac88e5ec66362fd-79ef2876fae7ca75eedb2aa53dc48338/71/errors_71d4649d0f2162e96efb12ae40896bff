9f17f11fd7828975b63ae047df089fee
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerReanimatedError = exports.ReanimatedError = void 0;
exports.registerWorkletStackDetails = registerWorkletStackDetails;
exports.reportFatalErrorOnJS = reportFatalErrorOnJS;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _worklet_2636258972826_init_data = {
  code: "function ReanimatedError_errorsTs1(message){const prefix='[Reanimated]';const errorInstance=new Error(message?prefix+\" \"+message:prefix);errorInstance.name='ReanimatedError';return errorInstance;}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\errors.ts",
  sourceMap: "{\"version\":3,\"names\":[\"ReanimatedError_errorsTs1\",\"message\",\"prefix\",\"errorInstance\",\"Error\",\"name\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/errors.ts\"],\"mappings\":\"AAaE,SAAAA,yBAAyCA,CAAEC,OAAA,EAEzC,KAAM,CAAAC,MAAM,CAAG,cAAc,CAC7B,KAAM,CAAAC,aAAa,CAAG,GAAI,CAAAC,KAAK,CAACH,OAAO,CAAMC,MAAM,KAAID,OAAO,CAAKC,MAAM,CAAC,CAC1EC,aAAa,CAACE,IAAI,CAAG,iBAAiB,CACtC,MAAO,CAAAF,aAAa,CACtB\",\"ignoreList\":[]}",
  version: "3.16.7"
};
var ReanimatedErrorConstructor = exports.ReanimatedError = function () {
  var _e = [new global.Error(), 1, -27];
  var ReanimatedError = function ReanimatedError(message) {
    var prefix = '[Reanimated]';
    var errorInstance = new Error(message ? `${prefix} ${message}` : prefix);
    errorInstance.name = 'ReanimatedError';
    return errorInstance;
  };
  ReanimatedError.__closure = {};
  ReanimatedError.__workletHash = 2636258972826;
  ReanimatedError.__initData = _worklet_2636258972826_init_data;
  ReanimatedError.__stackDetails = _e;
  return ReanimatedError;
}();
var _worklet_17492640473659_init_data = {
  code: "function registerReanimatedError_errorsTs2(){const{ReanimatedErrorConstructor}=this.__closure;if(!_WORKLET){throw new Error('[Reanimated] registerReanimatedError() must be called on Worklet runtime');}global.ReanimatedError=ReanimatedErrorConstructor;}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\errors.ts",
  sourceMap: "{\"version\":3,\"names\":[\"registerReanimatedError_errorsTs2\",\"ReanimatedErrorConstructor\",\"__closure\",\"_WORKLET\",\"Error\",\"global\",\"ReanimatedError\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/errors.ts\"],\"mappings\":\"AA2BO,SAAAA,iCAAmCA,CAAA,QAAAC,0BAAA,OAAAC,SAAA,CAExC,GAAI,CAACC,QAAQ,CAAE,CACb,KAAM,IAAI,CAAAC,KAAK,CACb,0EACF,CAAC,CACH,CACCC,MAAM,CAA6BC,eAAe,CACjDL,0BAA0B,CAC9B\",\"ignoreList\":[]}",
  version: "3.16.7"
};
var registerReanimatedError = exports.registerReanimatedError = function () {
  var _e = [new global.Error(), -2, -27];
  var registerReanimatedError = function registerReanimatedError() {
    if (!_WORKLET) {
      throw new Error('[Reanimated] registerReanimatedError() must be called on Worklet runtime');
    }
    global.ReanimatedError = ReanimatedErrorConstructor;
  };
  registerReanimatedError.__closure = {
    ReanimatedErrorConstructor: ReanimatedErrorConstructor
  };
  registerReanimatedError.__workletHash = 17492640473659;
  registerReanimatedError.__initData = _worklet_17492640473659_init_data;
  registerReanimatedError.__stackDetails = _e;
  return registerReanimatedError;
}();
var _workletStackDetails = new Map();
function registerWorkletStackDetails(hash, stackDetails) {
  _workletStackDetails.set(hash, stackDetails);
}
function getBundleOffset(error) {
  var _error$stack;
  var frame = (_error$stack = error.stack) == null || (_error$stack = _error$stack.split('\n')) == null ? void 0 : _error$stack[0];
  if (frame) {
    var parsedFrame = /@([^@]+):(\d+):(\d+)/.exec(frame);
    if (parsedFrame) {
      var _parsedFrame = (0, _slicedToArray2.default)(parsedFrame, 4),
        file = _parsedFrame[1],
        line = _parsedFrame[2],
        col = _parsedFrame[3];
      return [file, Number(line), Number(col)];
    }
  }
  return ['unknown', 0, 0];
}
function processStack(stack) {
  var workletStackEntries = stack.match(/worklet_(\d+):(\d+):(\d+)/g);
  var result = stack;
  workletStackEntries == null || workletStackEntries.forEach(function (match) {
    var _match$split$map = match.split(/:|_/).map(Number),
      _match$split$map2 = (0, _slicedToArray2.default)(_match$split$map, 4),
      hash = _match$split$map2[1],
      origLine = _match$split$map2[2],
      origCol = _match$split$map2[3];
    var errorDetails = _workletStackDetails.get(hash);
    if (!errorDetails) {
      return;
    }
    var _errorDetails = (0, _slicedToArray2.default)(errorDetails, 3),
      error = _errorDetails[0],
      lineOffset = _errorDetails[1],
      colOffset = _errorDetails[2];
    var _getBundleOffset = getBundleOffset(error),
      _getBundleOffset2 = (0, _slicedToArray2.default)(_getBundleOffset, 3),
      bundleFile = _getBundleOffset2[0],
      bundleLine = _getBundleOffset2[1],
      bundleCol = _getBundleOffset2[2];
    var line = origLine + bundleLine + lineOffset;
    var col = origCol + bundleCol + colOffset;
    result = result.replace(match, `${bundleFile}:${line}:${col}`);
  });
  return result;
}
function reportFatalErrorOnJS(_ref) {
  var message = _ref.message,
    stack = _ref.stack;
  var error = new Error();
  error.message = message;
  error.stack = stack ? processStack(stack) : undefined;
  error.name = 'ReanimatedError';
  error.jsEngine = 'reanimated';
  global.ErrorUtils.reportFatalError(error);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,