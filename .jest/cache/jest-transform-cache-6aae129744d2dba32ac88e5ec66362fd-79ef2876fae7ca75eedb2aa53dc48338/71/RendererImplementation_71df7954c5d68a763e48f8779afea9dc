fd416737ff0de0890d09cd78a2fc733d
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dispatchCommand = dispatchCommand;
exports.findHostInstance_DEPRECATED = findHostInstance_DEPRECATED;
exports.findNodeHandle = findNodeHandle;
exports.getNodeFromInternalInstanceHandle = getNodeFromInternalInstanceHandle;
exports.getPublicInstanceFromInternalInstanceHandle = getPublicInstanceFromInternalInstanceHandle;
exports.isChildPublicInstance = isChildPublicInstance;
exports.isProfilingRenderer = isProfilingRenderer;
exports.renderElement = renderElement;
exports.sendAccessibilityEvent = sendAccessibilityEvent;
exports.unmountComponentAtNodeAndRemoveContainer = unmountComponentAtNodeAndRemoveContainer;
exports.unstable_batchedUpdates = unstable_batchedUpdates;
var _ErrorHandlers = require("../../src/private/renderer/errorhandling/ErrorHandlers");
function renderElement(_ref) {
  var element = _ref.element,
    rootTag = _ref.rootTag,
    useFabric = _ref.useFabric,
    useConcurrentRoot = _ref.useConcurrentRoot;
  if (useFabric) {
    require('../Renderer/shims/ReactFabric').render(element, rootTag, null, useConcurrentRoot, {
      onCaughtError: _ErrorHandlers.onCaughtError,
      onUncaughtError: _ErrorHandlers.onUncaughtError,
      onRecoverableError: _ErrorHandlers.onRecoverableError
    });
  } else {
    require('../Renderer/shims/ReactNative').render(element, rootTag, undefined, {
      onCaughtError: _ErrorHandlers.onCaughtError,
      onUncaughtError: _ErrorHandlers.onUncaughtError,
      onRecoverableError: _ErrorHandlers.onRecoverableError
    });
  }
}
function findHostInstance_DEPRECATED(componentOrHandle) {
  return require('../Renderer/shims/ReactNative').findHostInstance_DEPRECATED(componentOrHandle);
}
function findNodeHandle(componentOrHandle) {
  return require('../Renderer/shims/ReactNative').findNodeHandle(componentOrHandle);
}
function dispatchCommand(handle, command, args) {
  if (global.RN$Bridgeless === true) {
    return require('../Renderer/shims/ReactFabric').dispatchCommand(handle, command, args);
  } else {
    return require('../Renderer/shims/ReactNative').dispatchCommand(handle, command, args);
  }
}
function sendAccessibilityEvent(handle, eventType) {
  return require('../Renderer/shims/ReactNative').sendAccessibilityEvent(handle, eventType);
}
function unmountComponentAtNodeAndRemoveContainer(rootTag) {
  var rootTagAsNumber = rootTag;
  require('../Renderer/shims/ReactNative').unmountComponentAtNodeAndRemoveContainer(rootTagAsNumber);
}
function unstable_batchedUpdates(fn, bookkeeping) {
  return require('../Renderer/shims/ReactNative').unstable_batchedUpdates(fn, bookkeeping);
}
function isProfilingRenderer() {
  return Boolean(__DEV__);
}
function isChildPublicInstance(parentInstance, childInstance) {
  return require('../Renderer/shims/ReactNative').isChildPublicInstance(parentInstance, childInstance);
}
function getNodeFromInternalInstanceHandle(internalInstanceHandle) {
  return require('../Renderer/shims/ReactFabric').getNodeFromInternalInstanceHandle(internalInstanceHandle);
}
function getPublicInstanceFromInternalInstanceHandle(internalInstanceHandle) {
  return require('../Renderer/shims/ReactFabric').getPublicInstanceFromInternalInstanceHandle(internalInstanceHandle);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,