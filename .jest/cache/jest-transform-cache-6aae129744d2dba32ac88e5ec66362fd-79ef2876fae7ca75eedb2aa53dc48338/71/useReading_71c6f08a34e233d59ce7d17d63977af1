a230659e9e644e8feef82e7c1e3040c5
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var useReading = function useReading() {
  var _currentExercise$ques, _currentExercise$ques2, _completedQuestions$s2;
  var exercises = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "A1";
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    selectedExerciseIndex = _useState2[0],
    setSelectedExerciseIndex = _useState2[1];
  var _useState3 = (0, _react.useState)(0),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    currentQuestionIndex = _useState4[0],
    setCurrentQuestionIndex = _useState4[1];
  var _useState5 = (0, _react.useState)(null),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    selectedAnswer = _useState6[0],
    setSelectedAnswer = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    showFeedback = _useState8[0],
    setShowFeedback = _useState8[1];
  var _useState9 = (0, _react.useState)(true),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    textExpanded = _useState0[0],
    setTextExpanded = _useState0[1];
  var _useState1 = (0, _react.useState)(0),
    _useState10 = (0, _slicedToArray2.default)(_useState1, 2),
    attempts = _useState10[0],
    setAttempts = _useState10[1];
  var _useState11 = (0, _react.useState)({}),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    completedQuestions = _useState12[0],
    setCompletedQuestions = _useState12[1];
  var _useState13 = (0, _react.useState)(false),
    _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
    loaded = _useState14[0],
    setLoaded = _useState14[1];
  var _useState15 = (0, _react.useState)(false),
    _useState16 = (0, _slicedToArray2.default)(_useState15, 2),
    showDetailedProgress = _useState16[0],
    setShowDetailedProgress = _useState16[1];
  var _useState17 = (0, _react.useState)(false),
    _useState18 = (0, _slicedToArray2.default)(_useState17, 2),
    isCorrect = _useState18[0],
    setIsCorrect = _useState18[1];
  var scrollViewRef = (0, _react.useRef)(null);
  var textsScrollViewRef = (0, _react.useRef)(null);
  var fadeAnim = (0, _react.useRef)(new _reactNative.Animated.Value(1)).current;
  var slideAnim = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
  var isInitialized = (0, _react.useRef)(false);
  var currentExercise = exercises[selectedExerciseIndex] || {
    title: "",
    text: "",
    questions: []
  };
  var currentQuestion = ((_currentExercise$ques = currentExercise.questions) == null ? void 0 : _currentExercise$ques[currentQuestionIndex]) || null;
  var totalExercises = exercises.length;
  var totalQuestions = ((_currentExercise$ques2 = currentExercise.questions) == null ? void 0 : _currentExercise$ques2.length) || 0;
  var STORAGE_KEY = `reading_progress_${level}`;
  var loadProgress = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      var storedProgress = yield _asyncStorage.default.getItem(STORAGE_KEY);
      if (storedProgress) {
        setCompletedQuestions(JSON.parse(storedProgress));
      }
    } catch (error) {
      console.error('Erreur lors du chargement de la progression de lecture:', error);
    } finally {
      setLoaded(true);
    }
  }), [STORAGE_KEY]);
  var saveProgress = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      yield _asyncStorage.default.setItem(STORAGE_KEY, JSON.stringify(completedQuestions));
    } catch (error) {
      console.error('Erreur lors de la sauvegarde de la progression de lecture:', error);
    }
  }), [completedQuestions, STORAGE_KEY]);
  (0, _react.useEffect)(function () {
    loadProgress();
  }, [loadProgress]);
  (0, _react.useEffect)(function () {
    if (loaded) {
      saveProgress();
    }
  }, [completedQuestions, loaded, saveProgress]);
  (0, _react.useEffect)(function () {
    setShowFeedback(false);
    setSelectedAnswer(null);
    setAttempts(0);
    setTextExpanded(true);
    if (currentQuestionIndex === 0 && selectedExerciseIndex === 0 && !isInitialized.current) {
      isInitialized.current = true;
    } else {
      var _scrollViewRef$curren, _textsScrollViewRef$c;
      (_scrollViewRef$curren = scrollViewRef.current) == null || _scrollViewRef$curren.scrollTo({
        y: 0,
        animated: true
      });
      (_textsScrollViewRef$c = textsScrollViewRef.current) == null || _textsScrollViewRef$c.scrollTo({
        y: 0,
        animated: true
      });
    }
  }, [currentQuestionIndex, selectedExerciseIndex]);
  var changeExercise = (0, _react.useCallback)(function (index) {
    if (index >= 0 && index < totalExercises) {
      setSelectedExerciseIndex(index);
      setCurrentQuestionIndex(0);
    }
  }, [totalExercises]);
  var changeQuestion = (0, _react.useCallback)(function (index) {
    if (index >= 0 && index < totalQuestions) {
      setCurrentQuestionIndex(index);
    }
  }, [totalQuestions]);
  var selectAnswer = (0, _react.useCallback)(function (answer) {
    if (!showFeedback) {
      setSelectedAnswer(answer);
    }
  }, [showFeedback]);
  var submitAnswer = (0, _react.useCallback)(function () {
    if (!currentQuestion || selectedAnswer === null) {
      _reactNative.Alert.alert("Sélection requise", "Veuillez sélectionner une réponse.");
      return;
    }
    var isCurrentAnswerCorrect = selectedAnswer === currentQuestion.correctAnswer;
    setIsCorrect(isCurrentAnswerCorrect);
    setShowFeedback(true);
    setAttempts(function (prev) {
      return prev + 1;
    });
    if (isCurrentAnswerCorrect) {
      setCompletedQuestions(function (prev) {
        var newCompleted = Object.assign({}, prev);
        if (!newCompleted[selectedExerciseIndex]) {
          newCompleted[selectedExerciseIndex] = [];
        }
        if (!newCompleted[selectedExerciseIndex].includes(currentQuestionIndex)) {
          newCompleted[selectedExerciseIndex].push(currentQuestionIndex);
        }
        return newCompleted;
      });
    } else {}
  }, [currentQuestion, selectedAnswer, selectedExerciseIndex, currentQuestionIndex]);
  var nextQuestion = (0, _react.useCallback)(function () {
    if (currentQuestionIndex < totalQuestions - 1) {
      changeQuestion(currentQuestionIndex + 1);
    } else {
      if (selectedExerciseIndex < totalExercises - 1) {
        changeExercise(selectedExerciseIndex + 1);
      } else {
        _reactNative.Alert.alert("Exercice terminé", "Vous avez terminé tous les exercices de lecture pour ce niveau !");
      }
    }
  }, [currentQuestionIndex, totalQuestions, changeQuestion, selectedExerciseIndex, totalExercises, changeExercise]);
  var previousQuestion = (0, _react.useCallback)(function () {
    if (currentQuestionIndex > 0) {
      changeQuestion(currentQuestionIndex - 1);
    } else if (selectedExerciseIndex > 0) {
      var prevExercise = exercises[selectedExerciseIndex - 1];
      if (prevExercise) {
        setSelectedExerciseIndex(selectedExerciseIndex - 1);
        setCurrentQuestionIndex(prevExercise.questions.length - 1);
      }
    }
  }, [currentQuestionIndex, changeQuestion, selectedExerciseIndex, exercises]);
  var retryQuestion = (0, _react.useCallback)(function () {
    setShowFeedback(false);
    setSelectedAnswer(null);
    setAttempts(0);
  }, []);
  var toggleTextExpansion = (0, _react.useCallback)(function () {
    setTextExpanded(function (prev) {
      return !prev;
    });
  }, []);
  var toggleDetailedProgress = (0, _react.useCallback)(function () {
    setShowDetailedProgress(function (prev) {
      return !prev;
    });
  }, []);
  var getProgress = (0, _react.useCallback)(function () {
    var _completedQuestions$s;
    var totalCompletedQuestions = Object.values(completedQuestions).reduce(function (sum, completed) {
      return sum + ((completed == null ? void 0 : completed.length) || 0);
    }, 0);
    var totalQuestionsAllExercises = exercises.reduce(function (sum, ex) {
      var _ex$questions;
      return sum + (((_ex$questions = ex.questions) == null ? void 0 : _ex$questions.length) || 0);
    }, 0);
    var completedInCurrentExercise = ((_completedQuestions$s = completedQuestions[selectedExerciseIndex]) == null ? void 0 : _completedQuestions$s.length) || 0;
    var progressPercent = totalQuestions > 0 ? completedInCurrentExercise / totalQuestions * 100 : 0;
    var overallProgress = totalQuestionsAllExercises > 0 ? totalCompletedQuestions / totalQuestionsAllExercises * 100 : 0;
    return {
      currentExercise: progressPercent,
      overall: overallProgress,
      completedInCurrent: completedInCurrentExercise,
      totalInCurrent: totalQuestions,
      completedOverall: totalCompletedQuestions,
      totalOverall: totalQuestionsAllExercises
    };
  }, [completedQuestions, selectedExerciseIndex, totalQuestions, exercises]);
  var isQuestionCompleted = ((_completedQuestions$s2 = completedQuestions[selectedExerciseIndex]) == null ? void 0 : _completedQuestions$s2.includes(currentQuestionIndex)) || false;
  return {
    selectedExerciseIndex: selectedExerciseIndex,
    currentQuestionIndex: currentQuestionIndex,
    selectedAnswer: selectedAnswer,
    showFeedback: showFeedback,
    textExpanded: textExpanded,
    attempts: attempts,
    completedQuestions: completedQuestions,
    loaded: loaded,
    showDetailedProgress: showDetailedProgress,
    currentExercise: currentExercise,
    currentQuestion: currentQuestion,
    totalExercises: totalExercises,
    totalQuestions: totalQuestions,
    changeExercise: changeExercise,
    changeQuestion: changeQuestion,
    selectAnswer: selectAnswer,
    submitAnswer: submitAnswer,
    nextQuestion: nextQuestion,
    previousQuestion: previousQuestion,
    retryQuestion: retryQuestion,
    toggleTextExpansion: toggleTextExpansion,
    toggleDetailedProgress: toggleDetailedProgress,
    isCorrect: isCorrect,
    isQuestionCompleted: isQuestionCompleted,
    progress: getProgress(),
    scrollViewRef: scrollViewRef,
    textsScrollViewRef: textsScrollViewRef,
    fadeAnim: fadeAnim,
    slideAnim: slideAnim
  };
};
var _default = exports.default = useReading;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,