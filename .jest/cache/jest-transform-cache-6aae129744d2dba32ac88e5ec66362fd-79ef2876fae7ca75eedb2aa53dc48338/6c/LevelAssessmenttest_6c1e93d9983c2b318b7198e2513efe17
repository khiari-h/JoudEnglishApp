20ec7b819d767a1c6912d6e42757f365
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn()
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
_getJestObj().mock('react-native', function () {
  var ReactNative = jest.requireActual('react-native');
  return Object.assign({}, ReactNative, {
    View: ReactNative.View,
    ActivityIndicator: function ActivityIndicator(props) {
      return (0, _jsxRuntime.jsx)(ReactNative.ActivityIndicator, Object.assign({}, props, {
        testID: "activity-indicator"
      }));
    }
  });
});
_getJestObj().mock('../../../../src/screens/exercises/level-assessment/AssessmentHeader', function () {
  var _jest$requireActual = jest.requireActual('react-native'),
    View = _jest$requireActual.View;
  return {
    default: function _default(props) {
      return (0, _jsxRuntime.jsx)(View, Object.assign({
        testID: "AssessmentHeader"
      }, props));
    }
  };
});
_getJestObj().mock('../../../../src/screens/exercises/level-assessment/AssessmentProgress', function () {
  var _jest$requireActual2 = jest.requireActual('react-native'),
    View = _jest$requireActual2.View;
  return {
    default: function _default(props) {
      return (0, _jsxRuntime.jsx)(View, Object.assign({
        testID: "AssessmentProgress"
      }, props));
    }
  };
});
_getJestObj().mock('../../../../src/screens/exercises/level-assessment/AssessmentQuestion', function () {
  var _jest$requireActual3 = jest.requireActual('react-native'),
    View = _jest$requireActual3.View;
  return {
    default: function _default(props) {
      return (0, _jsxRuntime.jsx)(View, Object.assign({
        testID: "AssessmentQuestion"
      }, props));
    }
  };
});
_getJestObj().mock('../../../../src/screens/exercises/level-assessment/AssessmentNavigation', function () {
  var _jest$requireActual4 = jest.requireActual('react-native'),
    View = _jest$requireActual4.View;
  return {
    default: function _default(props) {
      return (0, _jsxRuntime.jsx)(View, Object.assign({
        testID: "AssessmentNavigation"
      }, props));
    }
  };
});
_getJestObj().mock('../../../../src/screens/exercises/level-assessment/AssessmentResults', function () {
  var _jest$requireActual5 = jest.requireActual('react-native'),
    View = _jest$requireActual5.View;
  return {
    default: function _default(props) {
      return (0, _jsxRuntime.jsx)(View, Object.assign({
        testID: "AssessmentResults"
      }, props));
    }
  };
});
_getJestObj().mock('../../../../src/components/layout/Container', function () {
  var _jest$requireActual6 = jest.requireActual('react-native'),
    View = _jest$requireActual6.View;
  return {
    CONTAINER_SAFE_EDGES: {
      ALL: 'mocked-all-edges',
      TOP: 'mocked-top-edge',
      BOTTOM: 'mocked-bottom-edge'
    },
    __esModule: true,
    default: function _default(_ref) {
      var children = _ref.children,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      return (0, _jsxRuntime.jsx)(View, Object.assign({}, props, {
        children: children
      }));
    }
  };
});
_getJestObj().mock('../../../../src/screens/exercises/level-assessment/hooks/useAssessment');
_getJestObj().mock('../../../../src/hooks/useLastActivity');
_getJestObj().mock('../../../../src/utils/assessment/assessmentDataHelper', function () {
  return {
    getLevelColor: jest.fn(function () {
      return '#007AFF';
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _native = require("@react-navigation/native");
var _expoRouter = require("expo-router");
var _levelAssessment = _interopRequireDefault(require("../../../../src/screens/exercises/level-assessment"));
var _useAssessment = _interopRequireDefault(require("../../../../src/screens/exercises/level-assessment/hooks/useAssessment"));
var _useLastActivity = _interopRequireDefault(require("../../../../src/hooks/useLastActivity"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children"];
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('LevelAssessment - Comprehensive Tests', function () {
  var mockSaveActivity = jest.fn();
  var mockNavigate = jest.fn();
  var mockHandleNext = jest.fn(function () {
    return {
      completed: false
    };
  });
  var mockSaveAssessmentResults = jest.fn();
  var mockResetAssessment = jest.fn();
  var setupMocks = function setupMocks() {
    var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var defaultUseAssessment = Object.assign({
      loaded: true,
      testCompleted: false,
      currentQuestion: {
        id: 'q1',
        text: 'Question 1?'
      },
      currentSection: {
        id: 's1',
        title: 'Section 1'
      },
      totalQuestionsInSection: 10,
      currentQuestionIndex: 0,
      totalSections: 3,
      display: {
        currentSectionIndex: 0,
        sectionTitle: 'Section 1',
        questionNumber: 1
      },
      stats: {
        answeredInCurrentSection: 0,
        totalSections: 3
      },
      handleNext: mockHandleNext,
      saveAssessmentResults: mockSaveAssessmentResults,
      resetAssessment: mockResetAssessment
    }, overrides);
    _useAssessment.default.mockReturnValue(defaultUseAssessment);
    _useLastActivity.default.mockReturnValue({
      saveActivity: mockSaveActivity
    });
    _native.useNavigation.mockReturnValue({
      navigate: mockNavigate
    });
  };
  beforeEach(function () {
    jest.clearAllMocks();
    setupMocks();
  });
  describe('Core Functionality and Rendering', function () {
    it('should render the main assessment view correctly', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_levelAssessment.default, {
        route: {
          params: {
            level: 'A2'
          }
        }
      }));
      expect(_reactNative.screen.getByTestId('AssessmentHeader')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('AssessmentProgress')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('AssessmentQuestion')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('AssessmentNavigation')).toBeTruthy();
    });
    it('should call hooks with correct parameters', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_levelAssessment.default, {
        route: {
          params: {
            level: 'B1'
          }
        }
      }));
      expect(_useAssessment.default).toHaveBeenCalledWith('B1');
      expect(_useLastActivity.default).toHaveBeenCalled();
    });
    it('should save activity on initial render', (0, _asyncToGenerator2.default)(function* () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_levelAssessment.default, {
        route: {
          params: {
            level: 'A1'
          }
        }
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockSaveActivity).toHaveBeenCalledWith({
          title: 'Ã‰valuation',
          level: 'A1',
          type: 'assessment',
          metadata: {
            section: 0,
            question: 0,
            totalQuestions: 10,
            sectionTitle: 'Section 1',
            totalSections: 3
          }
        });
      });
    }));
  });
  describe('States and Edge Cases', function () {
    it('should render loading state when not loaded', function () {
      setupMocks({
        loaded: false,
        currentQuestion: null
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_levelAssessment.default, {
        route: {
          params: {
            level: 'A1'
          }
        }
      }));
      expect(_reactNative.screen.getByTestId('activity-indicator')).toBeTruthy();
      expect(_reactNative.screen.queryByTestId('AssessmentQuestion')).toBeNull();
    });
    it('should render results view when test is completed', function () {
      setupMocks({
        testCompleted: true
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_levelAssessment.default, {
        route: {
          params: {
            level: 'C1'
          }
        }
      }));
      expect(_reactNative.screen.getByTestId('AssessmentResults')).toBeTruthy();
      expect(_reactNative.screen.queryByTestId('AssessmentQuestion')).toBeNull();
    });
    it('should handle missing route params by using a default level', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_levelAssessment.default, {
        route: {}
      }));
      expect(_useAssessment.default).toHaveBeenCalledWith('A1');
    });
  });
  describe('Navigation and User Actions', function () {
    it('should navigate back to exercise selection on back press', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_levelAssessment.default, {
          route: {
            params: {
              level: 'A2'
            }
          }
        })),
        getByTestId = _render.getByTestId;
      var header = _reactNative.screen.getByTestId('AssessmentHeader');
      var backButtonPress = header.props.onBackPress;
      backButtonPress();
      expect(_expoRouter.router.push).toHaveBeenCalledWith({
        pathname: '/tabs/exerciseSelection',
        params: {
          level: 'A2'
        }
      });
    });
    it('should call handleNext when the next button is pressed', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_levelAssessment.default, {
        route: {
          params: {
            level: 'B2'
          }
        }
      }));
      var navigation = _reactNative.screen.getByTestId('AssessmentNavigation');
      var onNextPress = navigation.props.onNext;
      onNextPress();
      expect(mockHandleNext).toHaveBeenCalled();
    });
    it('should save results when the test is completed on the final "next" action', function () {
      var mockHandleNextCompletes = jest.fn(function () {
        return {
          completed: true
        };
      });
      setupMocks({
        handleNext: mockHandleNextCompletes
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_levelAssessment.default, {
        route: {
          params: {
            level: 'B1'
          }
        }
      }));
      var navigation = _reactNative.screen.getByTestId('AssessmentNavigation');
      var onNextPress = navigation.props.onNext;
      onNextPress();
      expect(mockHandleNextCompletes).toHaveBeenCalled();
      expect(mockSaveAssessmentResults).toHaveBeenCalled();
    });
    it('should navigate to Dashboard on continue from results', function () {
      setupMocks({
        testCompleted: true
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_levelAssessment.default, {
        route: {
          params: {
            level: 'A1'
          }
        }
      }));
      var results = _reactNative.screen.getByTestId('AssessmentResults');
      var onContinuePress = results.props.onContinue;
      onContinuePress();
      expect(mockNavigate).toHaveBeenCalledWith('Dashboard');
    });
    it('should call resetAssessment on retry from results', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        testCompleted: true
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_levelAssessment.default, {
        route: {
          params: {
            level: 'A1'
          }
        }
      }));
      var results = _reactNative.screen.getByTestId('AssessmentResults');
      var onRetryPress = results.props.onRetry;
      yield onRetryPress();
      expect(mockResetAssessment).toHaveBeenCalled();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,