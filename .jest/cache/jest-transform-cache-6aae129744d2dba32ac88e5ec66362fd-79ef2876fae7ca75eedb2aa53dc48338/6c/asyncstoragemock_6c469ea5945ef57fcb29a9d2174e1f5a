ac4e034129c7356263dfed15f044fcdd
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var merge = require("merge-options").bind({
  concatArrays: true,
  ignoreUndefined: true
});
var asMock = {
  __INTERNAL_MOCK_STORAGE__: {},
  setItem: jest.fn(function () {
    var _ref = (0, _asyncToGenerator2.default)(function* (key, value, callback) {
      var setResult = yield asMock.multiSet([[key, value]], undefined);
      callback && callback(setResult);
      return setResult;
    });
    return function (_x, _x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }()),
  getItem: jest.fn(function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (key, callback) {
      var getResult = yield asMock.multiGet([key], undefined);
      var result = getResult[0] ? getResult[0][1] : null;
      callback && callback(null, result);
      return result;
    });
    return function (_x4, _x5) {
      return _ref2.apply(this, arguments);
    };
  }()),
  removeItem: jest.fn(function (key, callback) {
    return asMock.multiRemove([key], callback);
  }),
  mergeItem: jest.fn(function (key, value, callback) {
    return asMock.multiMerge([[key, value]], callback);
  }),
  clear: jest.fn(_clear),
  getAllKeys: jest.fn(_getAllKeys),
  flushGetRequests: jest.fn(),
  multiGet: jest.fn(_multiGet),
  multiSet: jest.fn(_multiSet),
  multiRemove: jest.fn(_multiRemove),
  multiMerge: jest.fn(_multiMerge),
  useAsyncStorage: jest.fn(function (key) {
    return {
      getItem: function getItem() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return asMock.getItem.apply(asMock, [key].concat(args));
      },
      setItem: function setItem() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        return asMock.setItem.apply(asMock, [key].concat(args));
      },
      mergeItem: function mergeItem() {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }
        return asMock.mergeItem.apply(asMock, [key].concat(args));
      },
      removeItem: function removeItem() {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }
        return asMock.removeItem.apply(asMock, [key].concat(args));
      }
    };
  })
};
function _multiSet(_x6, _x7) {
  return _multiSet2.apply(this, arguments);
}
function _multiSet2() {
  _multiSet2 = (0, _asyncToGenerator2.default)(function* (keyValuePairs, callback) {
    keyValuePairs.forEach(function (keyValue) {
      var key = keyValue[0];
      asMock.__INTERNAL_MOCK_STORAGE__[key] = keyValue[1];
    });
    callback && callback(null);
    return null;
  });
  return _multiSet2.apply(this, arguments);
}
function _multiGet(_x8, _x9) {
  return _multiGet2.apply(this, arguments);
}
function _multiGet2() {
  _multiGet2 = (0, _asyncToGenerator2.default)(function* (keys, callback) {
    var values = keys.map(function (key) {
      return [key, asMock.__INTERNAL_MOCK_STORAGE__[key] || null];
    });
    callback && callback(null, values);
    return values;
  });
  return _multiGet2.apply(this, arguments);
}
function _multiRemove(_x0, _x1) {
  return _multiRemove2.apply(this, arguments);
}
function _multiRemove2() {
  _multiRemove2 = (0, _asyncToGenerator2.default)(function* (keys, callback) {
    keys.forEach(function (key) {
      if (asMock.__INTERNAL_MOCK_STORAGE__[key]) {
        delete asMock.__INTERNAL_MOCK_STORAGE__[key];
      }
    });
    callback && callback(null);
    return null;
  });
  return _multiRemove2.apply(this, arguments);
}
function _clear(_x10) {
  return _clear2.apply(this, arguments);
}
function _clear2() {
  _clear2 = (0, _asyncToGenerator2.default)(function* (callback) {
    asMock.__INTERNAL_MOCK_STORAGE__ = {};
    callback && callback(null);
    return null;
  });
  return _clear2.apply(this, arguments);
}
function _getAllKeys() {
  return _getAllKeys2.apply(this, arguments);
}
function _getAllKeys2() {
  _getAllKeys2 = (0, _asyncToGenerator2.default)(function* () {
    return Object.keys(asMock.__INTERNAL_MOCK_STORAGE__);
  });
  return _getAllKeys2.apply(this, arguments);
}
function _multiMerge(_x11, _x12) {
  return _multiMerge2.apply(this, arguments);
}
function _multiMerge2() {
  _multiMerge2 = (0, _asyncToGenerator2.default)(function* (keyValuePairs, callback) {
    keyValuePairs.forEach(function (keyValue) {
      var _keyValue = (0, _slicedToArray2.default)(keyValue, 2),
        key = _keyValue[0],
        value = _keyValue[1];
      var oldValue = asMock.__INTERNAL_MOCK_STORAGE__[key];
      asMock.__INTERNAL_MOCK_STORAGE__[key] = oldValue != null ? JSON.stringify(merge(JSON.parse(oldValue), JSON.parse(value))) : value;
    });
    callback && callback(null);
    return null;
  });
  return _multiMerge2.apply(this, arguments);
}
module.exports = asMock;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,