7894ad920b5c41ebb184e86c3ae53b36
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactHooks = require("@testing-library/react-hooks");
var _reactNative = require("react-native");
var _useModalAnimation = _interopRequireDefault(require("./useModalAnimation"));
var mockStart = jest.fn();
jest.spyOn(_reactNative.Animated, 'timing').mockReturnValue({
  start: mockStart
});
var mockInterpolate = jest.fn(function (inputRange) {
  return inputRange.outputRange[1];
});
var mockAnimatedValue = {
  interpolate: mockInterpolate
};
jest.spyOn(React, 'useState').mockReturnValue([mockAnimatedValue, jest.fn()]);
describe('useModalAnimation', function () {
  beforeEach(function () {
    mockStart.mockClear();
    mockInterpolate.mockClear();
  });
  it('devrait retourner un objet de style vide si animationType est "none" ou non "custom"', function () {
    var _renderHook = (0, _reactHooks.renderHook)(function () {
        return (0, _useModalAnimation.default)({
          visible: true,
          animationType: 'none',
          position: 'center',
          customAnimation: true
        });
      }),
      result = _renderHook.result;
    expect(result.current).toEqual({});
  });
  it('devrait retourner un objet de style vide si customAnimation est faux', function () {
    var _renderHook2 = (0, _reactHooks.renderHook)(function () {
        return (0, _useModalAnimation.default)({
          visible: true,
          animationType: 'custom',
          position: 'center',
          customAnimation: false
        });
      }),
      result = _renderHook2.result;
    expect(result.current).toEqual({});
  });
  it('devrait appeler Animated.timing au changement de visibilité', function () {
    var _renderHook3 = (0, _reactHooks.renderHook)(function (_ref) {
        var visible = _ref.visible;
        return (0, _useModalAnimation.default)({
          visible: visible,
          animationType: 'custom',
          position: 'center',
          customAnimation: true
        });
      }, {
        initialProps: {
          visible: false
        }
      }),
      rerender = _renderHook3.rerender;
    (0, _reactHooks.act)(function () {
      rerender({
        visible: true
      });
    });
    expect(_reactNative.Animated.timing).toHaveBeenCalledTimes(1);
    expect(mockStart).toHaveBeenCalledTimes(1);
  });
  it('devrait retourner le style de transformation pour la position "bottom"', function () {
    var _renderHook4 = (0, _reactHooks.renderHook)(function () {
        return (0, _useModalAnimation.default)({
          visible: true,
          animationType: 'custom',
          position: 'bottom',
          customAnimation: true
        });
      }),
      result = _renderHook4.result;
    expect(result.current.transform[0].translateY).toBeDefined();
    expect(mockInterpolate).toHaveBeenCalledWith({
      inputRange: [0, 1],
      outputRange: [300, 0]
    });
  });
  it('devrait retourner le style de transformation pour la position "top"', function () {
    var _renderHook5 = (0, _reactHooks.renderHook)(function () {
        return (0, _useModalAnimation.default)({
          visible: true,
          animationType: 'custom',
          position: 'top',
          customAnimation: true
        });
      }),
      result = _renderHook5.result;
    expect(result.current.transform[0].translateY).toBeDefined();
    expect(mockInterpolate).toHaveBeenCalledWith({
      inputRange: [0, 1],
      outputRange: [-300, 0]
    });
  });
  it('devrait retourner le style de transformation pour la position "center" (par défaut)', function () {
    var _renderHook6 = (0, _reactHooks.renderHook)(function () {
        return (0, _useModalAnimation.default)({
          visible: true,
          animationType: 'custom',
          position: 'center',
          customAnimation: true
        });
      }),
      result = _renderHook6.result;
    expect(result.current.transform[0].scale).toBeDefined();
    expect(result.current.opacity).toBeDefined();
    expect(mockInterpolate).toHaveBeenCalledWith({
      inputRange: [0, 1],
      outputRange: [0.8, 1]
    });
  });
  it('devrait utiliser les styles par défaut si la position est non spécifiée', function () {
    var _renderHook7 = (0, _reactHooks.renderHook)(function () {
        return (0, _useModalAnimation.default)({
          visible: true,
          animationType: 'custom',
          customAnimation: true
        });
      }),
      result = _renderHook7.result;
    expect(result.current.transform[0].scale).toBeDefined();
    expect(result.current.opacity).toBeDefined();
    expect(mockInterpolate).toHaveBeenCalledWith({
      inputRange: [0, 1],
      outputRange: [0.8, 1]
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,