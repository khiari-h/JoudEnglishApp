970d283378dd2da92874fbdf4d593ebf
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vocab = void 0;
function cov_23akbn1t4z() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\data\\vocabulary\\6\\categories\\04_technologies_emergentes.js";
  var hash = "d522e796a4b8bcda84c094439ff7c9b5fe4e73db";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\data\\vocabulary\\6\\categories\\04_technologies_emergentes.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 21
        },
        end: {
          line: 223,
          column: 1
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d522e796a4b8bcda84c094439ff7c9b5fe4e73db"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_23akbn1t4z = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_23akbn1t4z();
var vocab = exports.vocab = (cov_23akbn1t4z().s[0]++, {
  title: "Technologies Émergentes",
  words: [{
    word: "generative AI",
    translation: "IA générative",
    example: "Generative AI creates new content, from images to text, based on training examples."
  }, {
    word: "recommendation system",
    translation: "système de recommandation",
    example: "Recommendation systems suggest products or content based on user preferences."
  }, {
    word: "computer reasoning",
    translation: "raisonnement informatique",
    example: "Computer reasoning systems make logical inferences from available information."
  }, {
    word: "autonomous agent",
    translation: "agent autonome",
    example: "Autonomous agents interact with environments to achieve specified goals."
  }, {
    word: "autonomous robot",
    translation: "robot autonome",
    example: "Autonomous robots navigate environments and make decisions without human control."
  }, {
    word: "collaborative robot",
    translation: "robot collaboratif",
    example: "Collaborative robots work alongside humans in shared workspaces."
  }, {
    word: "industrial automation",
    translation: "automatisation industrielle",
    example: "Industrial automation systems perform manufacturing processes with minimal human intervention."
  }, {
    word: "swarm robotics",
    translation: "robotique en essaim",
    example: "Swarm robotics coordinates multiple simple robots to perform complex tasks."
  }, {
    word: "human-robot interaction",
    translation: "interaction homme-robot",
    example: "Human-robot interaction studies how people engage with robotic systems."
  }, {
    word: "actuator",
    translation: "actionneur",
    example: "Actuators convert control signals into physical movement in robotic systems."
  }, {
    word: "robotic manipulation",
    translation: "manipulation robotique",
    example: "Robotic manipulation involves gripping, moving, and modifying objects."
  }, {
    word: "locomotion system",
    translation: "système de locomotion",
    example: "The robot's locomotion system enables movement across varied terrain."
  }, {
    word: "automation technology",
    translation: "technologie d'automatisation",
    example: "Automation technology replaces manual processes with software-controlled systems."
  }, {
    word: "humanoid robot",
    translation: "robot humanoïde",
    example: "Humanoid robots feature physical structures resembling human bodies."
  }, {
    word: "industrial robot",
    translation: "robot industriel",
    example: "Industrial robots perform precise, repetitive tasks in manufacturing environments."
  }, {
    word: "service robot",
    translation: "robot de service",
    example: "Service robots assist humans in commercial and domestic settings."
  }, {
    word: "drone technology",
    translation: "technologie des drones",
    example: "Drone technology enables aerial monitoring, delivery, and imaging applications."
  }, {
    word: "robot sensor",
    translation: "capteur robotique",
    example: "Robot sensors gather environmental data for navigation and interaction."
  }, {
    word: "robotic arm",
    translation: "bras robotique",
    example: "The robotic arm performed precise assembly operations on the production line."
  }, {
    word: "autonomous navigation",
    translation: "navigation autonome",
    example: "Autonomous navigation systems plan and execute movement paths independently."
  }, {
    word: "smart automation",
    translation: "automatisation intelligente",
    example: "Smart automation systems adapt processes based on changing conditions."
  }, {
    word: "robotic exoskeleton",
    translation: "exosquelette robotique",
    example: "Robotic exoskeletons enhance human strength and endurance."
  }, {
    word: "path planning",
    translation: "planification de trajectoire",
    example: "Path planning algorithms determine optimal routes through environments."
  }, {
    word: "robot programming",
    translation: "programmation robotique",
    example: "Robot programming defines behaviors and responses to environmental conditions."
  }, {
    word: "telepresence robot",
    translation: "robot de téléprésence",
    example: "Telepresence robots enable remote interaction with distant environments."
  }, {
    word: "genetic engineering",
    translation: "génie génétique",
    example: "Genetic engineering modifies DNA to produce organisms with desired traits."
  }, {
    word: "CRISPR technology",
    translation: "technologie CRISPR",
    example: "CRISPR technology enables precise editing of genetic sequences."
  }, {
    word: "genomics",
    translation: "génomique",
    example: "Genomics studies the structure, function, and mapping of complete genetic material."
  }, {
    word: "stem cell therapy",
    translation: "thérapie par cellules souches",
    example: "Stem cell therapy uses undifferentiated cells to treat or prevent diseases."
  }, {
    word: "medical imaging",
    translation: "imagerie médicale",
    example: "Advanced medical imaging techniques provide detailed views of internal structures."
  }, {
    word: "wearable health monitor",
    translation: "moniteur de santé portable",
    example: "Wearable health monitors track vital signs and physical activity continuously."
  }, {
    word: "biopharmaceutical",
    translation: "biopharmaceutique",
    example: "Biopharmaceuticals are medical drugs produced using biotechnology."
  }, {
    word: "molecular diagnostics",
    translation: "diagnostic moléculaire",
    example: "Molecular diagnostics identifies disease by detecting specific genetic sequences."
  }, {
    word: "digital therapeutics",
    translation: "thérapeutiques numériques",
    example: "Digital therapeutics deliver medical interventions through software applications."
  }, {
    word: "microbiome",
    translation: "microbiome",
    example: "Research on the microbiome examines how microbial communities affect health."
  }, {
    word: "drug delivery system",
    translation: "système d'administration de médicaments",
    example: "Advanced drug delivery systems target specific tissues while minimizing side effects."
  }, {
    word: "computational biology",
    translation: "biologie computationnelle",
    example: "Computational biology simulates biological processes to accelerate research."
  }, {
    word: "biomarker",
    translation: "biomarqueur",
    example: "Biomarkers indicate normal biological processes, pathogenic processes, or responses to treatments."
  }, {
    word: "quantum bit",
    translation: "bit quantique",
    example: "Quantum bits or qubits can exist in multiple states simultaneously unlike classical bits."
  }, {
    word: "quantum gate",
    translation: "porte quantique",
    example: "Quantum gates are the basic quantum circuit operations on qubits."
  }, {
    word: "quantum compiler",
    translation: "compilateur quantique",
    example: "Quantum compilers transform algorithms into executable quantum circuit instructions."
  }, {
    word: "quantum information",
    translation: "information quantique",
    example: "Quantum information theory extends classical information theory to quantum systems."
  }, {
    word: "quantum machine learning",
    translation: "apprentissage automatique quantique",
    example: "Quantum machine learning applies quantum algorithms to improve pattern recognition."
  }, {
    word: "quantum phase",
    translation: "phase quantique",
    example: "The quantum phase encodes information critical to the computation process."
  }, {
    word: "quantum programming",
    translation: "programmation quantique",
    example: "Quantum programming requires new paradigms distinct from classical computing."
  }, {
    word: "immersive technology",
    translation: "technologie immersive",
    example: "Immersive technologies create sensory experiences that alter perception of environments."
  }, {
    word: "head-mounted display",
    translation: "visiocasque",
    example: "The head-mounted display tracked eye movements to adjust rendered perspectives."
  }, {
    word: "spatial computing",
    translation: "informatique spatiale",
    example: "Spatial computing integrates digital content with physical spaces."
  }, {
    word: "haptic feedback",
    translation: "retour haptique",
    example: "Haptic feedback provides tactile sensations in virtual environments."
  }, {
    word: "motion tracking",
    translation: "suivi de mouvement",
    example: "Motion tracking systems capture and translate physical movements into digital actions."
  }, {
    word: "AR overlay",
    translation: "superposition en RA",
    example: "The AR overlay displayed real-time information about nearby landmarks."
  }, {
    word: "VR headset",
    translation: "casque de RV",
    example: "The VR headset delivered high-resolution visuals with minimal latency."
  }, {
    word: "spatial awareness",
    translation: "conscience spatiale",
    example: "Spatial awareness enables devices to understand physical surroundings."
  }, {
    word: "photogrammetry",
    translation: "photogrammétrie",
    example: "Photogrammetry creates 3D models from multiple 2D photographs."
  }, {
    word: "visual rendering",
    translation: "rendu visuel",
    example: "Advanced visual rendering creates photorealistic virtual environments."
  }, {
    word: "extended reality",
    translation: "réalité étendue",
    example: "Extended reality encompasses virtual, augmented, and mixed reality technologies."
  }, {
    word: "field of view",
    translation: "champ de vision",
    example: "A wider field of view increases immersion in virtual environments."
  }, {
    word: "positional tracking",
    translation: "suivi de position",
    example: "Positional tracking monitors the user's location within physical space."
  }, {
    word: "AR glasses",
    translation: "lunettes de RA",
    example: "AR glasses display contextual information without obstructing normal vision."
  }, {
    word: "volumetric capture",
    translation: "capture volumétrique",
    example: "Volumetric capture records three-dimensional representations of people and objects."
  }, {
    word: "spatial mapping",
    translation: "cartographie spatiale",
    example: "Spatial mapping creates digital representations of physical environments."
  }, {
    word: "AR cloud",
    translation: "nuage de RA",
    example: "The AR cloud provides persistent digital content anchored to physical locations."
  }, {
    word: "gesture recognition",
    translation: "reconnaissance gestuelle",
    example: "Gesture recognition interprets hand movements as control inputs."
  }, {
    word: "immersive learning",
    translation: "apprentissage immersif",
    example: "Immersive learning uses virtual environments for educational experiences."
  }, {
    word: "virtual collaboration",
    translation: "collaboration virtuelle",
    example: "Virtual collaboration tools connect remote teams in shared digital spaces."
  }, {
    word: "connected device",
    translation: "appareil connecté",
    example: "Connected devices communicate with each other and central systems."
  }, {
    word: "smart sensor",
    translation: "capteur intelligent",
    example: "Smart sensors collect and transmit environmental data for analysis."
  }, {
    word: "IoT platform",
    translation: "plateforme IdO",
    example: "IoT platforms manage device connectivity, data collection, and application development."
  }, {
    word: "device provisioning",
    translation: "provisionnement d'appareils",
    example: "Device provisioning configures new IoT devices for secure network integration."
  }, {
    word: "smart home",
    translation: "maison intelligente",
    example: "Smart home systems automate lighting, climate control, and security functions."
  }, {
    word: "industrial IoT",
    translation: "IdO industriel",
    example: "Industrial IoT applications monitor equipment performance and predict maintenance needs."
  }, {
    word: "IoT gateway",
    translation: "passerelle IdO",
    example: "IoT gateways connect sensor networks to the internet and manage data transmission."
  }, {
    word: "device authentication",
    translation: "authentification d'appareil",
    example: "Device authentication ensures only authorized devices connect to IoT networks."
  }, {
    word: "mesh network",
    translation: "réseau maillé",
    example: "Mesh networks provide reliable communication paths between IoT devices."
  }, {
    word: "IoT analytics",
    translation: "analytique de l'IdO",
    example: "IoT analytics processes device data to extract actionable insights."
  }, {
    word: "device management",
    translation: "gestion d'appareils",
    example: "Device management platforms monitor and update connected devices remotely."
  }, {
    word: "low-power wide-area network",
    translation: "réseau étendu à faible consommation",
    example: "Low-power wide-area networks support long-range IoT communications efficiently."
  }, {
    word: "smart agriculture",
    translation: "agriculture intelligente",
    example: "Smart agriculture uses IoT sensors to optimize irrigation and monitor crop health."
  }, {
    word: "asset tracking",
    translation: "suivi des actifs",
    example: "Asset tracking systems monitor location and condition of equipment and inventory."
  }, {
    word: "IoT security",
    translation: "sécurité de l'IdO",
    example: "IoT security protects connected devices and their data from unauthorized access."
  }, {
    word: "device interoperability",
    translation: "interopérabilité des appareils",
    example: "Device interoperability allows products from different manufacturers to work together."
  }, {
    word: "environmental monitoring",
    translation: "surveillance environnementale",
    example: "Environmental monitoring applications track air quality, water levels, and weather conditions."
  }, {
    word: "remote diagnostics",
    translation: "diagnostics à distance",
    example: "Remote diagnostics assess equipment status without on-site inspections."
  }, {
    word: "distributed ledger",
    translation: "registre distribué",
    example: "Distributed ledgers maintain synchronized data across multiple locations."
  }, {
    word: "decentralized application",
    translation: "application décentralisée",
    example: "Decentralized applications operate on distributed networks rather than central servers."
  }, {
    word: "consensus mechanism",
    translation: "mécanisme de consensus",
    example: "Consensus mechanisms determine how blockchain participants agree on valid transactions."
  }, {
    word: "proof of work",
    translation: "preuve de travail",
    example: "Proof of work requires computational effort to validate blockchain transactions."
  }, {
    word: "proof of stake",
    translation: "preuve d'enjeu",
    example: "Proof of stake validates transactions based on the quantity of cryptocurrency held."
  }, {
    word: "hash function",
    translation: "fonction de hachage",
    example: "Hash functions create fixed-size outputs from variable-size inputs in blockchain systems."
  }, {
    word: "peer-to-peer network",
    translation: "réseau pair à pair",
    example: "Blockchain operates on peer-to-peer networks without central coordination."
  }, {
    word: "private blockchain",
    translation: "blockchain privée",
    example: "Private blockchains restrict participation to authorized entities."
  }, {
    word: "public blockchain",
    translation: "blockchain publique",
    example: "Public blockchains allow anyone to participate in the network."
  }, {
    word: "blockchain governance",
    translation: "gouvernance de blockchain",
    example: "Blockchain governance determines how protocols evolve and decisions are made."
  }, {
    word: "immutable record",
    translation: "registre immuable",
    example: "Blockchains create immutable records that cannot be altered retroactively."
  }, {
    word: "distributed application",
    translation: "application distribuée",
    example: "Distributed applications operate across multiple computing resources."
  }, {
    word: "digital signature",
    translation: "signature numérique",
    example: "Digital signatures verify identity and authenticity in blockchain transactions."
  }, {
    word: "blockchain oracle",
    translation: "oracle blockchain",
    example: "Blockchain oracles connect smart contracts with external data sources."
  }, {
    word: "non-fungible token",
    translation: "jeton non fongible",
    example: "Non-fungible tokens represent unique digital assets on blockchains."
  }, {
    word: "interoperability",
    translation: "interopérabilité",
    example: "Blockchain interoperability enables different networks to exchange information."
  }, {
    word: "sidechain",
    translation: "chaîne latérale",
    example: "Sidechains are separate blockchains connected to parent chains for specific functions."
  }, {
    word: "cryptographic hash",
    translation: "hachage cryptographique",
    example: "Cryptographic hashes provide data integrity verification in blockchain systems."
  }, {
    word: "distributed consensus",
    translation: "consensus distribué",
    example: "Distributed consensus ensures agreement across decentralized systems."
  }, {
    word: "security information and event management",
    translation: "gestion des informations et des événements de sécurité",
    example: "Security information and event management systems analyze security alerts in real-time."
  }, {
    word: "zero trust security",
    translation: "sécurité zéro confiance",
    example: "Zero trust security requires verification for all users, regardless of location."
  }, {
    word: "security operations center",
    translation: "centre des opérations de sécurité",
    example: "Security operations centers monitor and analyze an organization's security posture."
  }, {
    word: "vulnerability management",
    translation: "gestion des vulnérabilités",
    example: "Vulnerability management identifies and remedies security weaknesses."
  }, {
    word: "attack surface",
    translation: "surface d'attaque",
    example: "Attack surface refers to all points where unauthorized users could access systems."
  }, {
    word: "secure access service edge",
    translation: "périmètre de service d'accès sécurisé",
    example: "Secure access service edge combines network security functions with wide area network capabilities."
  }, {
    word: "security posture",
    translation: "posture de sécurité",
    example: "Security posture describes an organization's overall cybersecurity strength."
  }, {
    word: "red team assessment",
    translation: "évaluation par équipe rouge",
    example: "Red team assessments simulate real-world attacks to test defenses."
  }, {
    word: "phishing simulation",
    translation: "simulation de hameçonnage",
    example: "Phishing simulations test employee awareness of social engineering tactics."
  }, {
    word: "secure development lifecycle",
    translation: "cycle de développement sécurisé",
    example: "Secure development lifecycle integrates security practices throughout software creation."
  }, {
    word: "data loss prevention",
    translation: "prévention des pertes de données",
    example: "Data loss prevention tools identify and block unauthorized data transfers."
  }, {
    word: "security automation",
    translation: "automatisation de la sécurité",
    example: "Security automation reduces manual effort in threat detection and response."
  }, {
    word: "security compliance",
    translation: "conformité de sécurité",
    example: "Security compliance ensures adherence to regulatory and policy requirements."
  }, {
    word: "deception technology",
    translation: "technologie de leurre",
    example: "Deception technology deploys decoys to detect and analyze attack methods."
  }, {
    word: "multi-cloud strategy",
    translation: "stratégie multi-cloud",
    example: "Multi-cloud strategies distribute workloads across multiple cloud providers."
  }, {
    word: "cloud-native application",
    translation: "application cloud-native",
    example: "Cloud-native applications are designed specifically for cloud environments."
  }, {
    word: "infrastructure as code",
    translation: "infrastructure en tant que code",
    example: "Infrastructure as code manages computing resources through machine-readable definition files."
  }, {
    word: "serverless computing",
    translation: "informatique sans serveur",
    example: "Serverless computing executes code without provisioning specific servers."
  }, {
    word: "containerization",
    translation: "conteneurisation",
    example: "Containerization packages applications with dependencies for consistent deployment."
  }, {
    word: "microservices architecture",
    translation: "architecture de microservices",
    example: "Microservices architecture structures applications as independent, loosely coupled services."
  }, {
    word: "cloud orchestration",
    translation: "orchestration cloud",
    example: "Cloud orchestration automates arrangement, coordination, and management of complex services."
  }, {
    word: "service mesh",
    translation: "maillage de services",
    example: "Service mesh manages communication between microservices in distributed applications."
  }, {
    word: "cloud security posture management",
    translation: "gestion de la posture de sécurité cloud",
    example: "Cloud security posture management identifies and remedies cloud configuration risks."
  }, {
    word: "hybrid cloud",
    translation: "cloud hybride",
    example: "Hybrid cloud environments combine private and public cloud resources."
  }, {
    word: "cloud migration",
    translation: "migration vers le cloud",
    example: "Cloud migration transfers applications and data from on-premises systems to cloud platforms."
  }, {
    word: "cloud optimization",
    translation: "optimisation cloud",
    example: "Cloud optimization maximizes performance while minimizing costs in cloud environments."
  }, {
    word: "auto-scaling",
    translation: "mise à l'échelle automatique",
    example: "Auto-scaling adjusts resources automatically based on application demand."
  }, {
    word: "cloud governance",
    translation: "gouvernance cloud",
    example: "Cloud governance establishes policies for efficient, secure cloud resource usage."
  }, {
    word: "continuous deployment",
    translation: "déploiement continu",
    example: "Continuous deployment automatically releases validated code to production environments."
  }, {
    word: "platform as a service",
    translation: "plateforme en tant que service",
    example: "Platform as a service provides development and deployment environments in the cloud."
  }, {
    word: "software as a service",
    translation: "logiciel en tant que service",
    example: "Software as a service delivers applications over the internet on a subscription basis."
  }, {
    word: "container orchestration",
    translation: "orchestration de conteneurs",
    example: "Container orchestration tools automate deployment and management of containerized applications."
  }, {
    word: "FinOps",
    translation: "FinOps",
    example: "FinOps aligns technology, finance, and business for cloud financial management."
  }, {
    word: "cloud compliance",
    translation: "conformité cloud",
    example: "Cloud compliance ensures cloud services meet regulatory requirements."
  }, {
    word: "edge cloud",
    translation: "cloud en périphérie",
    example: "Edge cloud distributes computing resources closer to data sources."
  }, {
    word: "API gateway",
    translation: "passerelle d'API",
    example: "API gateways manage, secure, and optimize application programming interfaces."
  }, {
    word: "5G technology",
    translation: "technologie 5G",
    example: "5G technology provides faster speeds and lower latency than previous cellular networks."
  }, {
    word: "network slicing",
    translation: "découpage de réseau",
    example: "Network slicing creates multiple virtual networks on shared physical infrastructure."
  }, {
    word: "massive MIMO",
    translation: "MIMO massif",
    example: "Massive MIMO uses multiple antennas to improve network capacity and efficiency."
  }, {
    word: "millimeter wave spectrum",
    translation: "spectre d'ondes millimétriques",
    example: "Millimeter wave spectrum enables ultra-high-speed short-range 5G communications."
  }, {
    word: "beamforming",
    translation: "formation de faisceaux",
    example: "Beamforming focuses wireless signals toward specific devices rather than broadcasting widely."
  }, {
    word: "ultra-reliable low-latency communication",
    translation: "communication ultra-fiable à faible latence",
    example: "Ultra-reliable low-latency communication enables critical applications like autonomous vehicles."
  }, {
    word: "private 5G network",
    translation: "réseau 5G privé",
    example: "Private 5G networks provide dedicated wireless connectivity for industrial applications."
  }, {
    word: "spectrum sharing",
    translation: "partage de spectre",
    example: "Spectrum sharing allows multiple users to access the same frequency bands."
  }, {
    word: "small cell",
    translation: "petite cellule",
    example: "Small cells extend network coverage and capacity in localized areas."
  }, {
    word: "fixed wireless access",
    translation: "accès sans fil fixe",
    example: "Fixed wireless access provides internet connectivity to premises using wireless networks."
  }, {
    word: "radio access network",
    translation: "réseau d'accès radio",
    example: "The radio access network connects devices to the core network in cellular systems."
  }, {
    word: "network function virtualization",
    translation: "virtualisation des fonctions réseau",
    example: "Network function virtualization replaces dedicated hardware with software applications."
  }, {
    word: "software-defined networking",
    translation: "réseau défini par logiciel",
    example: "Software-defined networking separates network control from data forwarding functions."
  }, {
    word: "enhanced mobile broadband",
    translation: "haut débit mobile amélioré",
    example: "Enhanced mobile broadband provides significantly faster data speeds for consumer applications."
  }, {
    word: "massive machine-type communication",
    translation: "communication massive de type machine",
    example: "Massive machine-type communication supports large-scale IoT deployments."
  }, {
    word: "network densification",
    translation: "densification du réseau",
    example: "Network densification increases the number of transmitters within a geographic area."
  }, {
    word: "mobile edge computing",
    translation: "informatique en périphérie mobile",
    example: "Mobile edge computing brings processing capabilities closer to cellular users."
  }, {
    word: "non-terrestrial network",
    translation: "réseau non terrestre",
    example: "Non-terrestrial networks include satellite and high-altitude platform systems."
  }, {
    word: "cellular vehicle-to-everything",
    translation: "communication véhiculaire cellulaire",
    example: "Cellular vehicle-to-everything technology enables cars to communicate with surrounding infrastructure."
  }, {
    word: "fronthaul network",
    translation: "réseau de liaison frontale",
    example: "Fronthaul networks connect baseband units to remote radio heads in cellular systems."
  }, {
    word: "backhaul network",
    translation: "réseau de liaison arrière",
    example: "Backhaul networks connect cell sites to the core network."
  }, {
    word: "open RAN",
    translation: "RAN ouvert",
    example: "Open RAN standardizes radio access network interfaces for multi-vendor deployments."
  }, {
    word: "dynamic spectrum access",
    translation: "accès dynamique au spectre",
    example: "Dynamic spectrum access allows opportunistic use of available frequency bands."
  }, {
    word: "self-organizing network",
    translation: "réseau auto-organisé",
    example: "Self-organizing networks automatically configure, optimize, and heal cellular networks."
  }]
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,