c37f7d84d482deada139d7423eb00bac
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn()
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
_getJestObj().mock('../../../../src/screens/exercises/word-games/hooks/useWordGames', function () {
  return {
    __esModule: true,
    default: jest.fn()
  };
});
_getJestObj().mock('../../../../src/hooks/useLastActivity', function () {
  return {
    __esModule: true,
    default: jest.fn(function () {
      return {
        saveActivity: jest.fn()
      };
    })
  };
});
_getJestObj().mock('../../../../src/utils/wordGames/wordGamesDataHelper', function () {
  return {
    getWordGamesData: jest.fn(function () {
      return {
        games: [{
          id: 1,
          type: 'matching',
          title: 'Match Words',
          pairs: [{
            word: 'hello',
            match: 'bonjour'
          }, {
            word: 'goodbye',
            match: 'au revoir'
          }]
        }, {
          id: 2,
          type: 'categorization',
          title: 'Categorize Words',
          categories: ['Animals', 'Colors'],
          words: ['cat', 'red', 'dog', 'blue']
        }]
      };
    }),
    getLevelColor: jest.fn(function () {
      return '#007AFF';
    })
  };
});
_getJestObj().mock('../../../../src/screens/exercises/word-games/style', function () {
  return {
    __esModule: true,
    default: jest.fn(function () {
      return {
        loadingContainer: {
          flex: 1,
          justifyContent: 'center',
          alignItems: 'center'
        },
        emptyContainer: {
          flex: 1,
          justifyContent: 'center',
          alignItems: 'center'
        }
      };
    })
  };
});
_getJestObj().mock('../../../../src/components/layout/Container', function () {
  var _require = require('react-native'),
    View = _require.View;
  var CONTAINER_SAFE_EDGES = {
    ALL: ['top', 'bottom', 'left', 'right'],
    NO_BOTTOM: ['top', 'left', 'right'],
    NO_TOP: ['bottom', 'left', 'right'],
    HORIZONTAL: ['left', 'right'],
    NONE: []
  };
  var Container = function Container(_ref) {
    var children = _ref.children,
      safeAreaEdges = _ref.safeAreaEdges,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "Container"
    }, props, {
      children: children
    }));
  };
  Container.CONTAINER_SAFE_EDGES = CONTAINER_SAFE_EDGES;
  return {
    __esModule: true,
    default: Container,
    CONTAINER_SAFE_EDGES: CONTAINER_SAFE_EDGES
  };
});
_getJestObj().mock('../../../../src/screens/exercises/word-games/WordGamesHeader', function () {
  var _require2 = require('react-native'),
    View = _require2.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "WordGamesHeader"
    }, props));
  };
});
_getJestObj().mock('../../../../src/screens/exercises/word-games/WordGamesProgress', function () {
  var _require3 = require('react-native'),
    View = _require3.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "WordGamesProgress"
    }, props));
  };
});
_getJestObj().mock('../../../../src/screens/exercises/word-games/WordGamesCard', function () {
  var _require4 = require('react-native'),
    View = _require4.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "WordGamesCard"
    }, props));
  };
});
_getJestObj().mock('../../../../src/screens/exercises/word-games/WordGamesNavigation', function () {
  var _require5 = require('react-native'),
    View = _require5.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "WordGamesNavigation"
    }, props));
  };
});
_getJestObj().mock('../../../../src/screens/exercises/word-games/WordGamesResults', function () {
  var _require6 = require('react-native'),
    View = _require6.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "WordGamesResults"
    }, props));
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _wordGames = _interopRequireDefault(require("../../../../src/screens/exercises/word-games"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "safeAreaEdges"];
function _getJestObj() {
  var _require7 = require("@jest/globals"),
    jest = _require7.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockUseWordGames = require('../../../../src/screens/exercises/word-games/hooks/useWordGames').default;
var mockUseLastActivity = require('../../../../src/hooks/useLastActivity').default;
describe('WordGamesExercise', function () {
  var mockRouteParams = {
    level: 'A1'
  };
  var mockNavigationGoBack = jest.fn();
  var mockRouterPush = jest.fn();
  var mockSaveActivity = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
    require('@react-navigation/native').useNavigation.mockReturnValue({
      goBack: mockNavigationGoBack
    });
    require('expo-router').router.push.mockImplementation(mockRouterPush);
    mockUseLastActivity.mockReturnValue({
      saveActivity: mockSaveActivity
    });
    mockUseWordGames.mockReturnValue({
      currentGameIndex: 0,
      selectedItems: [],
      matchedItems: [],
      showFeedback: false,
      isCorrect: false,
      showResults: false,
      gameResults: [{
        score: 0,
        maxScore: 10,
        completed: false
      }, {
        score: 0,
        maxScore: 8,
        completed: false
      }],
      shuffledOptions: ['hello', 'bonjour', 'goodbye', 'au revoir'],
      loaded: true,
      games: [{
        id: 1,
        type: 'matching',
        title: 'Match Words',
        pairs: [{
          word: 'hello',
          match: 'bonjour'
        }, {
          word: 'goodbye',
          match: 'au revoir'
        }]
      }],
      currentGame: {
        id: 1,
        type: 'matching',
        title: 'Match Words',
        pairs: [{
          word: 'hello',
          match: 'bonjour'
        }, {
          word: 'goodbye',
          match: 'au revoir'
        }]
      },
      totalGames: 2,
      fadeAnim: {
        value: 1
      },
      bounceAnim: {
        value: 1
      },
      handleSelectItem: jest.fn(),
      checkAnswer: jest.fn(),
      handleNext: jest.fn(function () {
        return {
          completed: false
        };
      }),
      handlePrevious: jest.fn(),
      resetGames: jest.fn(),
      canGoToPrevious: false,
      isLastGame: false,
      stats: {
        totalGames: 2,
        completedGamesCount: 0,
        totalProgress: 0,
        currentProgress: 50,
        score: 0,
        totalMaxScore: 18,
        percentage: 0
      },
      display: {
        gameCounter: '1/2',
        gameTitle: 'Match Words',
        currentGame: {
          id: 1,
          type: 'matching',
          title: 'Match Words'
        },
        currentGameIndex: 1
      }
    });
  });
  it('should render loading state when not loaded', function () {
    mockUseWordGames.mockReturnValueOnce({
      loaded: false,
      currentGame: null,
      games: []
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_wordGames.default, {
      route: {
        params: mockRouteParams
      }
    }));
    expect(_reactNative.screen.getByTestId('Container')).toBeTruthy();
    expect(_reactNative.screen.getByTestId('WordGamesHeader')).toBeTruthy();
    expect(_reactNative.screen.getByTestId('activity-indicator')).toBeTruthy();
  });
  it('should render empty state when no games available', function () {
    mockUseWordGames.mockReturnValueOnce({
      loaded: true,
      currentGame: null,
      games: []
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_wordGames.default, {
      route: {
        params: mockRouteParams
      }
    }));
    expect(_reactNative.screen.getByTestId('Container')).toBeTruthy();
    expect(_reactNative.screen.getByTestId('WordGamesHeader')).toBeTruthy();
    expect(_reactNative.screen.getByTestId('activity-indicator')).toBeTruthy();
  });
  it('should render results state when showResults is true', function () {
    mockUseWordGames.mockReturnValueOnce(Object.assign({}, mockUseWordGames(), {
      showResults: true
    }));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_wordGames.default, {
      route: {
        params: mockRouteParams
      }
    }));
    expect(_reactNative.screen.getByTestId('Container')).toBeTruthy();
    expect(_reactNative.screen.getByTestId('WordGamesResults')).toBeTruthy();
  });
  it('should render main game components when loaded and has games', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_wordGames.default, {
      route: {
        params: mockRouteParams
      }
    }));
    expect(_reactNative.screen.getByTestId('WordGamesHeader')).toBeTruthy();
    expect(_reactNative.screen.getByTestId('WordGamesProgress')).toBeTruthy();
    expect(_reactNative.screen.getByTestId('WordGamesCard')).toBeTruthy();
    expect(_reactNative.screen.getByTestId('WordGamesNavigation')).toBeTruthy();
  });
  it('should call useWordGames with correct parameters', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_wordGames.default, {
      route: {
        params: mockRouteParams
      }
    }));
    expect(mockUseWordGames).toHaveBeenCalledWith(expect.any(Object), mockRouteParams.level);
  });
  it('should save activity when component loads', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_wordGames.default, {
      route: {
        params: mockRouteParams
      }
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockSaveActivity).toHaveBeenCalledWith(expect.objectContaining({
        title: 'Jeux de mots',
        level: 'A1',
        type: 'wordGames',
        metadata: expect.objectContaining({
          game: 0,
          totalGames: 2,
          gameType: 'matching',
          gameTitle: 'Match Words',
          score: 0
        })
      }));
    });
  }));
  it('should navigate back to exercise selection on back press', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_wordGames.default, {
      route: {
        params: mockRouteParams
      }
    }));
    var header = _reactNative.screen.getByTestId('WordGamesHeader');
    (0, _reactNative.fireEvent)(header, 'onBackPress');
    expect(mockRouterPush).toHaveBeenCalledWith({
      pathname: '/tabs/exerciseSelection',
      params: {
        level: 'A1'
      }
    });
  });
  it('should call handleSelectItem when item is selected', function () {
    var mockHandleSelectItem = jest.fn();
    mockUseWordGames.mockReturnValueOnce(Object.assign({}, mockUseWordGames(), {
      handleSelectItem: mockHandleSelectItem
    }));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_wordGames.default, {
      route: {
        params: mockRouteParams
      }
    }));
    var gameCard = _reactNative.screen.getByTestId('WordGamesCard');
    (0, _reactNative.fireEvent)(gameCard, 'onSelectItem', 'hello');
    expect(mockHandleSelectItem).toHaveBeenCalledWith('hello');
  });
  it('should call checkAnswer when check answer is triggered', function () {
    var mockCheckAnswer = jest.fn();
    mockUseWordGames.mockReturnValueOnce(Object.assign({}, mockUseWordGames(), {
      checkAnswer: mockCheckAnswer
    }));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_wordGames.default, {
      route: {
        params: mockRouteParams
      }
    }));
    var navigation = _reactNative.screen.getByTestId('WordGamesNavigation');
    (0, _reactNative.fireEvent)(navigation, 'onCheckAnswer');
    expect(mockCheckAnswer).toHaveBeenCalled();
  });
  it('should call handleNext when next game is triggered', function () {
    var mockHandleNext = jest.fn(function () {
      return {
        completed: false
      };
    });
    mockUseWordGames.mockReturnValueOnce(Object.assign({}, mockUseWordGames(), {
      handleNext: mockHandleNext
    }));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_wordGames.default, {
      route: {
        params: mockRouteParams
      }
    }));
    var navigation = _reactNative.screen.getByTestId('WordGamesNavigation');
    (0, _reactNative.fireEvent)(navigation, 'onNext');
    expect(mockHandleNext).toHaveBeenCalled();
  });
  it('should call handlePrevious when previous game is triggered', function () {
    var mockHandlePrevious = jest.fn();
    mockUseWordGames.mockReturnValueOnce(Object.assign({}, mockUseWordGames(), {
      handlePrevious: mockHandlePrevious,
      canGoToPrevious: true
    }));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_wordGames.default, {
      route: {
        params: mockRouteParams
      }
    }));
    var navigation = _reactNative.screen.getByTestId('WordGamesNavigation');
    (0, _reactNative.fireEvent)(navigation, 'onPrevious');
    expect(mockHandlePrevious).toHaveBeenCalled();
  });
  it('should call resetGames when play again is triggered from results', function () {
    var mockResetGames = jest.fn();
    mockUseWordGames.mockReturnValueOnce(Object.assign({}, mockUseWordGames(), {
      showResults: true,
      resetGames: mockResetGames
    }));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_wordGames.default, {
      route: {
        params: mockRouteParams
      }
    }));
    var results = _reactNative.screen.getByTestId('WordGamesResults');
    (0, _reactNative.fireEvent)(results, 'onPlayAgain');
    expect(mockResetGames).toHaveBeenCalled();
  });
  it('should navigate back when continue is triggered from results', function () {
    mockUseWordGames.mockReturnValueOnce(Object.assign({}, mockUseWordGames(), {
      showResults: true
    }));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_wordGames.default, {
      route: {
        params: mockRouteParams
      }
    }));
    var results = _reactNative.screen.getByTestId('WordGamesResults');
    (0, _reactNative.fireEvent)(results, 'onContinue');
    expect(mockNavigationGoBack).toHaveBeenCalled();
  });
  it('should handle route params with default level', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_wordGames.default, {
      route: {}
    }));
    expect(mockUseWordGames).toHaveBeenCalledWith(expect.any(Object), 'A1');
  });
  it('should not save activity when showResults is true', (0, _asyncToGenerator2.default)(function* () {
    mockUseWordGames.mockReturnValue(Object.assign({}, mockUseWordGames(), {
      showResults: true
    }));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_wordGames.default, {
      route: {
        params: mockRouteParams
      }
    }));
    yield new Promise(function (resolve) {
      return setTimeout(resolve, 100);
    });
    expect(mockSaveActivity).not.toHaveBeenCalled();
  }));
  it('should pass correct props to WordGamesProgress', function () {
    var mockStats = {
      totalGames: 2,
      completedGamesCount: 1,
      totalProgress: 50,
      currentProgress: 50,
      score: 5,
      totalMaxScore: 18,
      percentage: 28
    };
    var mockDisplay = {
      gameCounter: '1/2',
      gameTitle: 'Match Words',
      currentGameIndex: 1
    };
    mockUseWordGames.mockReturnValueOnce(Object.assign({}, mockUseWordGames(), {
      stats: mockStats,
      display: mockDisplay
    }));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_wordGames.default, {
      route: {
        params: mockRouteParams
      }
    }));
    var progress = _reactNative.screen.getByTestId('WordGamesProgress');
    expect(progress.props.currentGame).toBe(1);
    expect(progress.props.totalGames).toBe(2);
    expect(progress.props.gameTitle).toBe('Match Words');
    expect(progress.props.completedGames).toBe(1);
  });
  it('should pass correct props to WordGamesCard', function () {
    var mockCurrentGame = {
      id: 1,
      type: 'matching',
      title: 'Match Words',
      pairs: [{
        word: 'hello',
        match: 'bonjour'
      }]
    };
    mockUseWordGames.mockReturnValueOnce(Object.assign({}, mockUseWordGames(), {
      currentGame: mockCurrentGame,
      selectedItems: ['hello'],
      matchedItems: ['hello', 'bonjour'],
      shuffledOptions: ['hello', 'bonjour', 'goodbye', 'au revoir'],
      showFeedback: true,
      isCorrect: true
    }));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_wordGames.default, {
      route: {
        params: mockRouteParams
      }
    }));
    var gameCard = _reactNative.screen.getByTestId('WordGamesCard');
    expect(gameCard.props.currentGame).toEqual(mockCurrentGame);
    expect(gameCard.props.selectedItems).toEqual(['hello']);
    expect(gameCard.props.matchedItems).toEqual(['hello', 'bonjour']);
    expect(gameCard.props.showFeedback).toBe(true);
    expect(gameCard.props.isCorrect).toBe(true);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,