e4ddab1942aa4c28f4e84b4aef884ee6
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _expoRouter = require("expo-router");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _Container = _interopRequireWildcard(require("../../../components/layout/Container"));
var _ConversationHeader = _interopRequireDefault(require("./ConversationHeader"));
var _ConversationSelector = _interopRequireDefault(require("./ConversationSelector"));
var _ConversationProgress = _interopRequireDefault(require("./ConversationProgress"));
var _ConversationScenarioDescription = _interopRequireDefault(require("./ConversationScenarioDescription"));
var _ConversationMessageList = _interopRequireDefault(require("./ConversationMessageList"));
var _ConversationSuggestions = _interopRequireDefault(require("./ConversationSuggestions"));
var _ConversationInput = _interopRequireDefault(require("./ConversationInput"));
var _useConversation2 = _interopRequireDefault(require("./hooks/useConversation"));
var _useLastActivity2 = _interopRequireDefault(require("../../../hooks/useLastActivity"));
var _conversationDataHelper = require("../../../utils/conversation/conversationDataHelper");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var ConversationExercise = function ConversationExercise(_ref) {
  var route = _ref.route;
  var _ref2 = (route == null ? void 0 : route.params) || {},
    _ref2$level = _ref2.level,
    level = _ref2$level === void 0 ? "A1" : _ref2$level;
  var _useLastActivity = (0, _useLastActivity2.default)(),
    saveActivity = _useLastActivity.saveActivity;
  var levelColor = (0, _conversationDataHelper.getLevelColor)(level);
  var conversationData = (0, _react.useMemo)(function () {
    return (0, _conversationDataHelper.getConversationData)(level);
  }, [level]);
  var _useConversation = (0, _useConversation2.default)(conversationData, level),
    currentScenarioIndex = _useConversation.currentScenarioIndex,
    conversation = _useConversation.conversation,
    message = _useConversation.message,
    setMessage = _useConversation.setMessage,
    isTyping = _useConversation.isTyping,
    suggestions = _useConversation.suggestions,
    showHelp = _useConversation.showHelp,
    completedScenarios = _useConversation.completedScenarios,
    conversationHistory = _useConversation.conversationHistory,
    loaded = _useConversation.loaded,
    showDetailedProgress = _useConversation.showDetailedProgress,
    currentScenario = _useConversation.currentScenario,
    totalScenarios = _useConversation.totalScenarios,
    hasValidData = _useConversation.hasValidData,
    changeScenario = _useConversation.changeScenario,
    sendMessage = _useConversation.sendMessage,
    handleSuggestion = _useConversation.handleSuggestion,
    toggleHelp = _useConversation.toggleHelp,
    toggleDetailedProgress = _useConversation.toggleDetailedProgress,
    isConversationStarted = _useConversation.isConversationStarted,
    stats = _useConversation.stats,
    display = _useConversation.display;
  var activityMetadata = (0, _react.useMemo)(function () {
    return {
      scenario: currentScenarioIndex,
      step: stats.currentStep || 0,
      totalSteps: stats.totalSteps || 1,
      scenarioName: (currentScenario == null ? void 0 : currentScenario.title) || `Sc√©nario ${currentScenarioIndex + 1}`,
      totalScenarios: totalScenarios
    };
  }, [currentScenarioIndex, stats.currentStep, stats.totalSteps, currentScenario == null ? void 0 : currentScenario.title, totalScenarios]);
  var handleSaveActivity = (0, _react.useCallback)(function () {
    if (loaded && hasValidData && currentScenario && isConversationStarted) {
      saveActivity({
        title: "Conversations",
        level: level,
        type: "conversations",
        metadata: activityMetadata
      });
    }
  }, [loaded, hasValidData, currentScenario, isConversationStarted, level, saveActivity, activityMetadata]);
  (0, _react.useEffect)(function () {
    handleSaveActivity();
  }, [handleSaveActivity]);
  var handleBackPress = (0, _react.useCallback)(function () {
    _expoRouter.router.push({
      pathname: "/tabs/exerciseSelection",
      params: {
        level: level
      }
    });
  }, [level]);
  var handleScenarioChange = (0, _react.useCallback)(function (index) {
    return changeScenario(index);
  }, [changeScenario]);
  var handleSendMessage = (0, _react.useCallback)(function () {
    return sendMessage();
  }, [sendMessage]);
  var handleUseSuggestion = (0, _react.useCallback)(function (suggestion) {
    return handleSuggestion(suggestion);
  }, [handleSuggestion]);
  var handleToggleHelp = (0, _react.useCallback)(function () {
    return toggleHelp();
  }, [toggleHelp]);
  var handleToggleProgressDetails = (0, _react.useCallback)(function () {
    return toggleDetailedProgress();
  }, [toggleDetailedProgress]);
  var handleScenarioChangeCb = (0, _react.useCallback)(function () {
    return handleScenarioChange.apply(void 0, arguments);
  }, [handleScenarioChange]);
  var handleToggleProgressDetailsCb = (0, _react.useCallback)(function () {
    return handleToggleProgressDetails();
  }, [handleToggleProgressDetails]);
  var handleToggleHelpCb = (0, _react.useCallback)(function () {
    return handleToggleHelp();
  }, [handleToggleHelp]);
  var handleBackPressCb = (0, _react.useCallback)(function () {
    return handleBackPress();
  }, [handleBackPress]);
  if (!loaded || !hasValidData) {
    return (0, _jsxRuntime.jsx)(_Container.default, {
      testID: "conversation-container",
      safeArea: true,
      safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
      backgroundColor: "#FAFBFC",
      statusBarStyle: "dark-content"
    });
  }
  return (0, _jsxRuntime.jsxs)(_Container.default, {
    testID: "conversation-container",
    safeArea: true,
    safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
    backgroundColor: "#FAFBFC",
    statusBarStyle: "dark-content",
    withPadding: false,
    style: _style.default.safeArea,
    children: [(0, _jsxRuntime.jsx)(_ConversationHeader.default, {
      level: level,
      onBackPress: handleBackPressCb,
      levelColor: levelColor
    }), (0, _jsxRuntime.jsx)(_ConversationSelector.default, {
      scenarios: conversationData.exercises,
      selectedIndex: currentScenarioIndex,
      onSelectScenario: handleScenarioChangeCb,
      levelColor: levelColor
    }), (0, _jsxRuntime.jsx)(_ConversationProgress.default, {
      progress: stats.completionProgress,
      currentStep: stats.currentStep,
      totalSteps: stats.totalSteps,
      levelColor: levelColor,
      conversationData: conversationData.exercises,
      completedScenarios: completedScenarios,
      conversationHistory: conversationHistory,
      expanded: showDetailedProgress,
      onToggleExpand: handleToggleProgressDetailsCb,
      onScenarioPress: handleScenarioChangeCb
    }), (0, _jsxRuntime.jsx)(_ConversationScenarioDescription.default, {
      description: currentScenario.description,
      helpText: display.currentHelp,
      showHelp: showHelp,
      toggleHelp: handleToggleHelpCb,
      levelColor: levelColor
    }), (0, _jsxRuntime.jsxs)(_reactNative.KeyboardAvoidingView, {
      style: _style.default.chatContainer,
      behavior: _reactNative.Platform.OS === "ios" ? "padding" : "height",
      keyboardVerticalOffset: _reactNative.Platform.OS === "ios" ? 90 : 0,
      children: [(0, _jsxRuntime.jsx)(_ConversationMessageList.default, {
        messages: conversation,
        isTyping: isTyping,
        levelColor: levelColor
      }), (0, _jsxRuntime.jsx)(_ConversationSuggestions.default, {
        suggestions: suggestions,
        onPressSuggestion: handleUseSuggestion,
        levelColor: levelColor
      }), (0, _jsxRuntime.jsx)(_ConversationInput.default, {
        message: message,
        onChangeMessage: setMessage,
        onSendMessage: handleSendMessage,
        levelColor: levelColor
      })]
    })]
  });
};
ConversationExercise.propTypes = {
  route: _propTypes.default.shape({
    params: _propTypes.default.shape({
      level: _propTypes.default.string
    })
  }).isRequired
};
var _default = exports.default = ConversationExercise;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlIiwiX2V4cG9Sb3V0ZXIiLCJfcHJvcFR5cGVzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9Db250YWluZXIiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9Db252ZXJzYXRpb25IZWFkZXIiLCJfQ29udmVyc2F0aW9uU2VsZWN0b3IiLCJfQ29udmVyc2F0aW9uUHJvZ3Jlc3MiLCJfQ29udmVyc2F0aW9uU2NlbmFyaW9EZXNjcmlwdGlvbiIsIl9Db252ZXJzYXRpb25NZXNzYWdlTGlzdCIsIl9Db252ZXJzYXRpb25TdWdnZXN0aW9ucyIsIl9Db252ZXJzYXRpb25JbnB1dCIsIl91c2VDb252ZXJzYXRpb24yIiwiX3VzZUxhc3RBY3Rpdml0eTIiLCJfY29udmVyc2F0aW9uRGF0YUhlbHBlciIsIl9zdHlsZSIsIl9qc3hSdW50aW1lIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsIl90IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJDb252ZXJzYXRpb25FeGVyY2lzZSIsIl9yZWYiLCJyb3V0ZSIsIl9yZWYyIiwicGFyYW1zIiwiX3JlZjIkbGV2ZWwiLCJsZXZlbCIsIl91c2VMYXN0QWN0aXZpdHkiLCJ1c2VMYXN0QWN0aXZpdHkiLCJzYXZlQWN0aXZpdHkiLCJsZXZlbENvbG9yIiwiZ2V0TGV2ZWxDb2xvciIsImNvbnZlcnNhdGlvbkRhdGEiLCJ1c2VNZW1vIiwiZ2V0Q29udmVyc2F0aW9uRGF0YSIsIl91c2VDb252ZXJzYXRpb24iLCJ1c2VDb252ZXJzYXRpb24iLCJjdXJyZW50U2NlbmFyaW9JbmRleCIsImNvbnZlcnNhdGlvbiIsIm1lc3NhZ2UiLCJzZXRNZXNzYWdlIiwiaXNUeXBpbmciLCJzdWdnZXN0aW9ucyIsInNob3dIZWxwIiwiY29tcGxldGVkU2NlbmFyaW9zIiwiY29udmVyc2F0aW9uSGlzdG9yeSIsImxvYWRlZCIsInNob3dEZXRhaWxlZFByb2dyZXNzIiwiY3VycmVudFNjZW5hcmlvIiwidG90YWxTY2VuYXJpb3MiLCJoYXNWYWxpZERhdGEiLCJjaGFuZ2VTY2VuYXJpbyIsInNlbmRNZXNzYWdlIiwiaGFuZGxlU3VnZ2VzdGlvbiIsInRvZ2dsZUhlbHAiLCJ0b2dnbGVEZXRhaWxlZFByb2dyZXNzIiwiaXNDb252ZXJzYXRpb25TdGFydGVkIiwic3RhdHMiLCJkaXNwbGF5IiwiYWN0aXZpdHlNZXRhZGF0YSIsInNjZW5hcmlvIiwic3RlcCIsImN1cnJlbnRTdGVwIiwidG90YWxTdGVwcyIsInNjZW5hcmlvTmFtZSIsInRpdGxlIiwiaGFuZGxlU2F2ZUFjdGl2aXR5IiwidXNlQ2FsbGJhY2siLCJ0eXBlIiwibWV0YWRhdGEiLCJ1c2VFZmZlY3QiLCJoYW5kbGVCYWNrUHJlc3MiLCJyb3V0ZXIiLCJwdXNoIiwicGF0aG5hbWUiLCJoYW5kbGVTY2VuYXJpb0NoYW5nZSIsImluZGV4IiwiaGFuZGxlU2VuZE1lc3NhZ2UiLCJoYW5kbGVVc2VTdWdnZXN0aW9uIiwic3VnZ2VzdGlvbiIsImhhbmRsZVRvZ2dsZUhlbHAiLCJoYW5kbGVUb2dnbGVQcm9ncmVzc0RldGFpbHMiLCJoYW5kbGVTY2VuYXJpb0NoYW5nZUNiIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJoYW5kbGVUb2dnbGVQcm9ncmVzc0RldGFpbHNDYiIsImhhbmRsZVRvZ2dsZUhlbHBDYiIsImhhbmRsZUJhY2tQcmVzc0NiIiwianN4IiwidGVzdElEIiwic2FmZUFyZWEiLCJzYWZlQXJlYUVkZ2VzIiwiQ09OVEFJTkVSX1NBRkVfRURHRVMiLCJBTEwiLCJiYWNrZ3JvdW5kQ29sb3IiLCJzdGF0dXNCYXJTdHlsZSIsImpzeHMiLCJ3aXRoUGFkZGluZyIsInN0eWxlIiwic3R5bGVzIiwiY2hpbGRyZW4iLCJvbkJhY2tQcmVzcyIsInNjZW5hcmlvcyIsImV4ZXJjaXNlcyIsInNlbGVjdGVkSW5kZXgiLCJvblNlbGVjdFNjZW5hcmlvIiwicHJvZ3Jlc3MiLCJjb21wbGV0aW9uUHJvZ3Jlc3MiLCJleHBhbmRlZCIsIm9uVG9nZ2xlRXhwYW5kIiwib25TY2VuYXJpb1ByZXNzIiwiZGVzY3JpcHRpb24iLCJoZWxwVGV4dCIsImN1cnJlbnRIZWxwIiwiS2V5Ym9hcmRBdm9pZGluZ1ZpZXciLCJjaGF0Q29udGFpbmVyIiwiYmVoYXZpb3IiLCJQbGF0Zm9ybSIsIk9TIiwia2V5Ym9hcmRWZXJ0aWNhbE9mZnNldCIsIm1lc3NhZ2VzIiwib25QcmVzc1N1Z2dlc3Rpb24iLCJvbkNoYW5nZU1lc3NhZ2UiLCJvblNlbmRNZXNzYWdlIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwic2hhcGUiLCJzdHJpbmciLCJpc1JlcXVpcmVkIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29udmVyc2F0aW9uRXhlcmNpc2UvaW5kZXguanMgLSBWRVJTSU9OIENPUlJJR8OJRVxyXG5pbXBvcnQgeyB1c2VNZW1vLCB1c2VFZmZlY3QsIHVzZUNhbGxiYWNrIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IEtleWJvYXJkQXZvaWRpbmdWaWV3LCBQbGF0Zm9ybSB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcclxuaW1wb3J0IHsgcm91dGVyIH0gZnJvbSBcImV4cG8tcm91dGVyXCI7XHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XHJcblxyXG4vLyBMYXlvdXRcclxuaW1wb3J0IENvbnRhaW5lciwgeyBDT05UQUlORVJfU0FGRV9FREdFUyB9IGZyb20gXCIuLi8uLi8uLi9jb21wb25lbnRzL2xheW91dC9Db250YWluZXJcIjtcclxuXHJcbi8vIENvbXBvbmVudHNcclxuaW1wb3J0IENvbnZlcnNhdGlvbkhlYWRlciBmcm9tIFwiLi9Db252ZXJzYXRpb25IZWFkZXJcIjtcclxuaW1wb3J0IENvbnZlcnNhdGlvblNlbGVjdG9yIGZyb20gXCIuL0NvbnZlcnNhdGlvblNlbGVjdG9yXCI7XHJcbmltcG9ydCBDb252ZXJzYXRpb25Qcm9ncmVzcyBmcm9tIFwiLi9Db252ZXJzYXRpb25Qcm9ncmVzc1wiO1xyXG5pbXBvcnQgQ29udmVyc2F0aW9uU2NlbmFyaW9EZXNjcmlwdGlvbiBmcm9tIFwiLi9Db252ZXJzYXRpb25TY2VuYXJpb0Rlc2NyaXB0aW9uXCI7XHJcbmltcG9ydCBDb252ZXJzYXRpb25NZXNzYWdlTGlzdCBmcm9tIFwiLi9Db252ZXJzYXRpb25NZXNzYWdlTGlzdFwiO1xyXG5pbXBvcnQgQ29udmVyc2F0aW9uU3VnZ2VzdGlvbnMgZnJvbSBcIi4vQ29udmVyc2F0aW9uU3VnZ2VzdGlvbnNcIjtcclxuaW1wb3J0IENvbnZlcnNhdGlvbklucHV0IGZyb20gXCIuL0NvbnZlcnNhdGlvbklucHV0XCI7XHJcblxyXG4vLyBIb29rICYgVXRpbHNcclxuaW1wb3J0IHVzZUNvbnZlcnNhdGlvbiBmcm9tIFwiLi9ob29rcy91c2VDb252ZXJzYXRpb25cIjtcclxuaW1wb3J0IHVzZUxhc3RBY3Rpdml0eSBmcm9tIFwiLi4vLi4vLi4vaG9va3MvdXNlTGFzdEFjdGl2aXR5XCI7XHJcbmltcG9ydCB7IGdldENvbnZlcnNhdGlvbkRhdGEsIGdldExldmVsQ29sb3IgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvY29udmVyc2F0aW9uL2NvbnZlcnNhdGlvbkRhdGFIZWxwZXJcIjtcclxuaW1wb3J0IHN0eWxlcyBmcm9tIFwiLi9zdHlsZVwiO1xyXG5cclxuLyoqXHJcbiAqIPCfjq8gQ29udmVyc2F0aW9uRXhlcmNpc2UgLSBWRVJTSU9OIENPUlJJR8OJRVxyXG4gKi9cclxuY29uc3QgQ29udmVyc2F0aW9uRXhlcmNpc2UgPSAoeyByb3V0ZSB9KSA9PiB7XHJcbiAgLy8gY29uc3QgbmF2aWdhdGlvbiA9IHVzZU5hdmlnYXRpb24oKTsgLy8gc3VwcHJpbcOpIGNhciBpbnV0aWxpc8OpXHJcbiAgY29uc3QgeyBsZXZlbCA9IFwiQTFcIiB9ID0gcm91dGU/LnBhcmFtcyB8fCB7fTtcclxuXHJcbiAgLy8gSG9vayBwb3VyIHNhdXZlZ2FyZGVyIGwnYWN0aXZpdMOpXHJcbiAgY29uc3QgeyBzYXZlQWN0aXZpdHkgfSA9IHVzZUxhc3RBY3Rpdml0eSgpO1xyXG5cclxuICAvLyBEYXRhXHJcbiAgY29uc3QgbGV2ZWxDb2xvciA9IGdldExldmVsQ29sb3IobGV2ZWwpO1xyXG4gIGNvbnN0IGNvbnZlcnNhdGlvbkRhdGEgPSB1c2VNZW1vKCgpID0+IGdldENvbnZlcnNhdGlvbkRhdGEobGV2ZWwpLCBbbGV2ZWxdKTtcclxuXHJcbiAgLy8gSG9vayB1bmlmacOpXHJcbiAgY29uc3Qge1xyXG4gICAgY3VycmVudFNjZW5hcmlvSW5kZXgsXHJcbiAgICBjb252ZXJzYXRpb24sXHJcbiAgICBtZXNzYWdlLFxyXG4gICAgc2V0TWVzc2FnZSxcclxuICAgIGlzVHlwaW5nLFxyXG4gICAgc3VnZ2VzdGlvbnMsXHJcbiAgICBzaG93SGVscCxcclxuICAgIGNvbXBsZXRlZFNjZW5hcmlvcyxcclxuICAgIGNvbnZlcnNhdGlvbkhpc3RvcnksXHJcbiAgICBsb2FkZWQsXHJcbiAgICBzaG93RGV0YWlsZWRQcm9ncmVzcyxcclxuICAgIGN1cnJlbnRTY2VuYXJpbyxcclxuICAgIHRvdGFsU2NlbmFyaW9zLFxyXG4gICAgaGFzVmFsaWREYXRhLFxyXG4gICAgY2hhbmdlU2NlbmFyaW8sXHJcbiAgICBzZW5kTWVzc2FnZSxcclxuICAgIGhhbmRsZVN1Z2dlc3Rpb24sXHJcbiAgICB0b2dnbGVIZWxwLFxyXG4gICAgdG9nZ2xlRGV0YWlsZWRQcm9ncmVzcyxcclxuICAgIGlzQ29udmVyc2F0aW9uU3RhcnRlZCxcclxuICAgIHN0YXRzLFxyXG4gICAgZGlzcGxheSxcclxuICB9ID0gdXNlQ29udmVyc2F0aW9uKGNvbnZlcnNhdGlvbkRhdGEsIGxldmVsKTtcclxuXHJcbiAgLy8g4pyFIENPUlJFQ1RJT04gOiBNw6ltb3Jpc2VyIGxlcyBtw6l0YWRvbm7DqWVzXHJcbiAgY29uc3QgYWN0aXZpdHlNZXRhZGF0YSA9IHVzZU1lbW8oKCkgPT4gKHtcclxuICAgIHNjZW5hcmlvOiBjdXJyZW50U2NlbmFyaW9JbmRleCxcclxuICAgIHN0ZXA6IHN0YXRzLmN1cnJlbnRTdGVwIHx8IDAsXHJcbiAgICB0b3RhbFN0ZXBzOiBzdGF0cy50b3RhbFN0ZXBzIHx8IDEsXHJcbiAgICBzY2VuYXJpb05hbWU6IGN1cnJlbnRTY2VuYXJpbz8udGl0bGUgfHwgYFNjw6luYXJpbyAke2N1cnJlbnRTY2VuYXJpb0luZGV4ICsgMX1gLFxyXG4gICAgdG90YWxTY2VuYXJpb3NcclxuICB9KSwgW2N1cnJlbnRTY2VuYXJpb0luZGV4LCBzdGF0cy5jdXJyZW50U3RlcCwgc3RhdHMudG90YWxTdGVwcywgY3VycmVudFNjZW5hcmlvPy50aXRsZSwgdG90YWxTY2VuYXJpb3NdKTtcclxuXHJcbiAgLy8g4pyFIENPUlJFQ1RJT04gOiBDYWxsYmFjayBtw6ltb3Jpc8OpIHBvdXIgc2F2ZUFjdGl2aXR5XHJcbiAgY29uc3QgaGFuZGxlU2F2ZUFjdGl2aXR5ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgaWYgKGxvYWRlZCAmJiBoYXNWYWxpZERhdGEgJiYgY3VycmVudFNjZW5hcmlvICYmIGlzQ29udmVyc2F0aW9uU3RhcnRlZCkge1xyXG4gICAgICBzYXZlQWN0aXZpdHkoe1xyXG4gICAgICAgIHRpdGxlOiBcIkNvbnZlcnNhdGlvbnNcIixcclxuICAgICAgICBsZXZlbCxcclxuICAgICAgICB0eXBlOiBcImNvbnZlcnNhdGlvbnNcIixcclxuICAgICAgICBtZXRhZGF0YTogYWN0aXZpdHlNZXRhZGF0YVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9LCBbbG9hZGVkLCBoYXNWYWxpZERhdGEsIGN1cnJlbnRTY2VuYXJpbywgaXNDb252ZXJzYXRpb25TdGFydGVkLCBsZXZlbCwgc2F2ZUFjdGl2aXR5LCBhY3Rpdml0eU1ldGFkYXRhXSk7XHJcblxyXG4gIC8vIOKchSBDT1JSRUNUSU9OIDogdXNlRWZmZWN0IG9wdGltaXPDqVxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBoYW5kbGVTYXZlQWN0aXZpdHkoKTtcclxuICB9LCBbaGFuZGxlU2F2ZUFjdGl2aXR5XSk7XHJcblxyXG4gIC8vIOKchSBDT1JSRUNUSU9OIDogRMOpcGxhY2VyIFRPVVMgbGVzIHVzZUNhbGxiYWNrIEFWQU5UIGxlIHJldHVybiBjb25kaXRpb25uZWxcclxuICAvLyBIYW5kbGVyc1xyXG4gIGNvbnN0IGhhbmRsZUJhY2tQcmVzcyA9IHVzZUNhbGxiYWNrKCgpID0+IHtcclxuICAgIHJvdXRlci5wdXNoKHtcclxuICAgICAgcGF0aG5hbWU6IFwiL3RhYnMvZXhlcmNpc2VTZWxlY3Rpb25cIixcclxuICAgICAgcGFyYW1zOiB7IGxldmVsIH1cclxuICAgIH0pO1xyXG4gIH0sIFtsZXZlbF0pO1xyXG5cclxuICBjb25zdCBoYW5kbGVTY2VuYXJpb0NoYW5nZSA9IHVzZUNhbGxiYWNrKChpbmRleCkgPT4gY2hhbmdlU2NlbmFyaW8oaW5kZXgpLCBbY2hhbmdlU2NlbmFyaW9dKTtcclxuXHJcbiAgY29uc3QgaGFuZGxlU2VuZE1lc3NhZ2UgPSB1c2VDYWxsYmFjaygoKSA9PiBzZW5kTWVzc2FnZSgpLCBbc2VuZE1lc3NhZ2VdKTtcclxuXHJcbiAgY29uc3QgaGFuZGxlVXNlU3VnZ2VzdGlvbiA9IHVzZUNhbGxiYWNrKChzdWdnZXN0aW9uKSA9PiBoYW5kbGVTdWdnZXN0aW9uKHN1Z2dlc3Rpb24pLCBbaGFuZGxlU3VnZ2VzdGlvbl0pO1xyXG5cclxuICBjb25zdCBoYW5kbGVUb2dnbGVIZWxwID0gdXNlQ2FsbGJhY2soKCkgPT4gdG9nZ2xlSGVscCgpLCBbdG9nZ2xlSGVscF0pO1xyXG5cclxuICBjb25zdCBoYW5kbGVUb2dnbGVQcm9ncmVzc0RldGFpbHMgPSB1c2VDYWxsYmFjaygoKSA9PiB0b2dnbGVEZXRhaWxlZFByb2dyZXNzKCksIFt0b2dnbGVEZXRhaWxlZFByb2dyZXNzXSk7XHJcblxyXG4gIC8vIENhbGxiYWNrcyBtw6ltb3Jpc8OpcyBwb3VyIMOpdml0ZXIgbGVzIGFycm93IGZ1bmN0aW9ucyBkYW5zIGxlIEpTWFxyXG4gIGNvbnN0IGhhbmRsZVNjZW5hcmlvQ2hhbmdlQ2IgPSB1c2VDYWxsYmFjaygoLi4uYXJncykgPT4gaGFuZGxlU2NlbmFyaW9DaGFuZ2UoLi4uYXJncyksIFtoYW5kbGVTY2VuYXJpb0NoYW5nZV0pO1xyXG4gIGNvbnN0IGhhbmRsZVRvZ2dsZVByb2dyZXNzRGV0YWlsc0NiID0gdXNlQ2FsbGJhY2soKCkgPT4gaGFuZGxlVG9nZ2xlUHJvZ3Jlc3NEZXRhaWxzKCksIFtoYW5kbGVUb2dnbGVQcm9ncmVzc0RldGFpbHNdKTtcclxuICBjb25zdCBoYW5kbGVUb2dnbGVIZWxwQ2IgPSB1c2VDYWxsYmFjaygoKSA9PiBoYW5kbGVUb2dnbGVIZWxwKCksIFtoYW5kbGVUb2dnbGVIZWxwXSk7XHJcbiAgY29uc3QgaGFuZGxlQmFja1ByZXNzQ2IgPSB1c2VDYWxsYmFjaygoKSA9PiBoYW5kbGVCYWNrUHJlc3MoKSwgW2hhbmRsZUJhY2tQcmVzc10pO1xyXG5cclxuICAvLyBMb2FkaW5nIHN0YXRlXHJcbiAgaWYgKCFsb2FkZWQgfHwgIWhhc1ZhbGlkRGF0YSkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPENvbnRhaW5lclxyXG4gICAgICAgIHRlc3RJRD1cImNvbnZlcnNhdGlvbi1jb250YWluZXJcIlxyXG4gICAgICAgIHNhZmVBcmVhXHJcbiAgICAgICAgc2FmZUFyZWFFZGdlcz17Q09OVEFJTkVSX1NBRkVfRURHRVMuQUxMfVxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcj1cIiNGQUZCRkNcIlxyXG4gICAgICAgIHN0YXR1c0JhclN0eWxlPVwiZGFyay1jb250ZW50XCJcclxuICAgICAgPlxyXG4gICAgICAgIHsvKiBMb2FkaW5nIGNvbnRlbnQgY2FuIGJlIGFkZGVkIGhlcmUgKi99XHJcbiAgICAgIDwvQ29udGFpbmVyPlxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8Q29udGFpbmVyXHJcbiAgICAgIHRlc3RJRD1cImNvbnZlcnNhdGlvbi1jb250YWluZXJcIiBcclxuICAgICAgc2FmZUFyZWFcclxuICAgICAgc2FmZUFyZWFFZGdlcz17Q09OVEFJTkVSX1NBRkVfRURHRVMuQUxMfVxyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I9XCIjRkFGQkZDXCJcclxuICAgICAgc3RhdHVzQmFyU3R5bGU9XCJkYXJrLWNvbnRlbnRcIlxyXG4gICAgICB3aXRoUGFkZGluZz17ZmFsc2V9XHJcbiAgICAgIHN0eWxlPXtzdHlsZXMuc2FmZUFyZWF9XHJcbiAgICA+XHJcbiAgICAgIHsvKiBIZWFkZXIgKi99XHJcbiAgICAgIDxDb252ZXJzYXRpb25IZWFkZXJcclxuICAgICAgICBsZXZlbD17bGV2ZWx9XHJcbiAgICAgICAgb25CYWNrUHJlc3M9e2hhbmRsZUJhY2tQcmVzc0NifVxyXG4gICAgICAgIGxldmVsQ29sb3I9e2xldmVsQ29sb3J9XHJcbiAgICAgIC8+XHJcblxyXG4gICAgICB7LyogU2NlbmFyaW8gU2VsZWN0b3IgKi99XHJcbiAgICAgIDxDb252ZXJzYXRpb25TZWxlY3RvclxyXG4gICAgICAgIHNjZW5hcmlvcz17Y29udmVyc2F0aW9uRGF0YS5leGVyY2lzZXN9XHJcbiAgICAgICAgc2VsZWN0ZWRJbmRleD17Y3VycmVudFNjZW5hcmlvSW5kZXh9XHJcbiAgICAgICAgb25TZWxlY3RTY2VuYXJpbz17aGFuZGxlU2NlbmFyaW9DaGFuZ2VDYn1cclxuICAgICAgICBsZXZlbENvbG9yPXtsZXZlbENvbG9yfVxyXG4gICAgICAvPlxyXG5cclxuICAgICAgey8qIFByb2dyZXNzICovfVxyXG4gICAgICA8Q29udmVyc2F0aW9uUHJvZ3Jlc3NcclxuICAgICAgICBwcm9ncmVzcz17c3RhdHMuY29tcGxldGlvblByb2dyZXNzfVxyXG4gICAgICAgIGN1cnJlbnRTdGVwPXtzdGF0cy5jdXJyZW50U3RlcH1cclxuICAgICAgICB0b3RhbFN0ZXBzPXtzdGF0cy50b3RhbFN0ZXBzfVxyXG4gICAgICAgIGxldmVsQ29sb3I9e2xldmVsQ29sb3J9XHJcbiAgICAgICAgY29udmVyc2F0aW9uRGF0YT17Y29udmVyc2F0aW9uRGF0YS5leGVyY2lzZXN9XHJcbiAgICAgICAgY29tcGxldGVkU2NlbmFyaW9zPXtjb21wbGV0ZWRTY2VuYXJpb3N9XHJcbiAgICAgICAgY29udmVyc2F0aW9uSGlzdG9yeT17Y29udmVyc2F0aW9uSGlzdG9yeX1cclxuICAgICAgICBleHBhbmRlZD17c2hvd0RldGFpbGVkUHJvZ3Jlc3N9XHJcbiAgICAgICAgb25Ub2dnbGVFeHBhbmQ9e2hhbmRsZVRvZ2dsZVByb2dyZXNzRGV0YWlsc0NifVxyXG4gICAgICAgIG9uU2NlbmFyaW9QcmVzcz17aGFuZGxlU2NlbmFyaW9DaGFuZ2VDYn1cclxuICAgICAgLz5cclxuXHJcbiAgICAgIHsvKiBTY2VuYXJpbyBEZXNjcmlwdGlvbiAqL31cclxuICAgICAgPENvbnZlcnNhdGlvblNjZW5hcmlvRGVzY3JpcHRpb25cclxuICAgICAgICBkZXNjcmlwdGlvbj17Y3VycmVudFNjZW5hcmlvLmRlc2NyaXB0aW9ufVxyXG4gICAgICAgIGhlbHBUZXh0PXtkaXNwbGF5LmN1cnJlbnRIZWxwfVxyXG4gICAgICAgIHNob3dIZWxwPXtzaG93SGVscH1cclxuICAgICAgICB0b2dnbGVIZWxwPXtoYW5kbGVUb2dnbGVIZWxwQ2J9XHJcbiAgICAgICAgbGV2ZWxDb2xvcj17bGV2ZWxDb2xvcn1cclxuICAgICAgLz5cclxuXHJcbiAgICAgIHsvKiBDaGF0IEFyZWEgKi99XHJcbiAgICAgIDxLZXlib2FyZEF2b2lkaW5nVmlld1xyXG4gICAgICAgIHN0eWxlPXtzdHlsZXMuY2hhdENvbnRhaW5lcn1cclxuICAgICAgICBiZWhhdmlvcj17UGxhdGZvcm0uT1MgPT09IFwiaW9zXCIgPyBcInBhZGRpbmdcIiA6IFwiaGVpZ2h0XCJ9XHJcbiAgICAgICAga2V5Ym9hcmRWZXJ0aWNhbE9mZnNldD17UGxhdGZvcm0uT1MgPT09IFwiaW9zXCIgPyA5MCA6IDB9XHJcbiAgICAgID5cclxuICAgICAgICB7LyogTWVzc2FnZSBMaXN0ICovfVxyXG4gICAgICAgIDxDb252ZXJzYXRpb25NZXNzYWdlTGlzdFxyXG4gICAgICAgICAgbWVzc2FnZXM9e2NvbnZlcnNhdGlvbn1cclxuICAgICAgICAgIGlzVHlwaW5nPXtpc1R5cGluZ31cclxuICAgICAgICAgIGxldmVsQ29sb3I9e2xldmVsQ29sb3J9XHJcbiAgICAgICAgLz5cclxuXHJcbiAgICAgICAgey8qIFN1Z2dlc3Rpb25zICovfVxyXG4gICAgICAgIDxDb252ZXJzYXRpb25TdWdnZXN0aW9uc1xyXG4gICAgICAgICAgc3VnZ2VzdGlvbnM9e3N1Z2dlc3Rpb25zfVxyXG4gICAgICAgICAgb25QcmVzc1N1Z2dlc3Rpb249e2hhbmRsZVVzZVN1Z2dlc3Rpb259XHJcbiAgICAgICAgICBsZXZlbENvbG9yPXtsZXZlbENvbG9yfVxyXG4gICAgICAgIC8+XHJcblxyXG4gICAgICAgIHsvKiBJbnB1dCAqL31cclxuICAgICAgICA8Q29udmVyc2F0aW9uSW5wdXRcclxuICAgICAgICAgIG1lc3NhZ2U9e21lc3NhZ2V9XHJcbiAgICAgICAgICBvbkNoYW5nZU1lc3NhZ2U9e3NldE1lc3NhZ2V9XHJcbiAgICAgICAgICBvblNlbmRNZXNzYWdlPXtoYW5kbGVTZW5kTWVzc2FnZX1cclxuICAgICAgICAgIGxldmVsQ29sb3I9e2xldmVsQ29sb3J9XHJcbiAgICAgICAgLz5cclxuICAgICAgPC9LZXlib2FyZEF2b2lkaW5nVmlldz5cclxuICAgIDwvQ29udGFpbmVyPlxyXG4gICk7XHJcbn07XHJcblxyXG4vLyDinIUgQWpvdXQgZGUgbGEgdmFsaWRhdGlvbiBkZXMgcHJvcHNcclxuQ29udmVyc2F0aW9uRXhlcmNpc2UucHJvcFR5cGVzID0ge1xyXG4gIHJvdXRlOiBQcm9wVHlwZXMuc2hhcGUoe1xyXG4gICAgcGFyYW1zOiBQcm9wVHlwZXMuc2hhcGUoe1xyXG4gICAgICBsZXZlbDogUHJvcFR5cGVzLnN0cmluZyxcclxuICAgIH0pLFxyXG4gIH0pLmlzUmVxdWlyZWQsXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb252ZXJzYXRpb25FeGVyY2lzZTsiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsV0FBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsVUFBQSxHQUFBQyxzQkFBQSxDQUFBSixPQUFBO0FBR0EsSUFBQUssVUFBQSxHQUFBQyx1QkFBQSxDQUFBTixPQUFBO0FBR0EsSUFBQU8sbUJBQUEsR0FBQUgsc0JBQUEsQ0FBQUosT0FBQTtBQUNBLElBQUFRLHFCQUFBLEdBQUFKLHNCQUFBLENBQUFKLE9BQUE7QUFDQSxJQUFBUyxxQkFBQSxHQUFBTCxzQkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQVUsZ0NBQUEsR0FBQU4sc0JBQUEsQ0FBQUosT0FBQTtBQUNBLElBQUFXLHdCQUFBLEdBQUFQLHNCQUFBLENBQUFKLE9BQUE7QUFDQSxJQUFBWSx3QkFBQSxHQUFBUixzQkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQWEsa0JBQUEsR0FBQVQsc0JBQUEsQ0FBQUosT0FBQTtBQUdBLElBQUFjLGlCQUFBLEdBQUFWLHNCQUFBLENBQUFKLE9BQUE7QUFDQSxJQUFBZSxpQkFBQSxHQUFBWCxzQkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQWdCLHVCQUFBLEdBQUFoQixPQUFBO0FBQ0EsSUFBQWlCLE1BQUEsR0FBQWIsc0JBQUEsQ0FBQUosT0FBQTtBQUE2QixJQUFBa0IsV0FBQSxHQUFBbEIsT0FBQTtBQUFBLFNBQUFNLHdCQUFBYSxDQUFBLEVBQUFDLENBQUEsNkJBQUFDLE9BQUEsTUFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBZix1QkFBQSxZQUFBQSx3QkFBQWEsQ0FBQSxFQUFBQyxDQUFBLFNBQUFBLENBQUEsSUFBQUQsQ0FBQSxJQUFBQSxDQUFBLENBQUFLLFVBQUEsU0FBQUwsQ0FBQSxNQUFBTSxDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxLQUFBQyxTQUFBLFFBQUFDLE9BQUEsRUFBQVYsQ0FBQSxpQkFBQUEsQ0FBQSx1QkFBQUEsQ0FBQSx5QkFBQUEsQ0FBQSxTQUFBUSxDQUFBLE1BQUFGLENBQUEsR0FBQUwsQ0FBQSxHQUFBRyxDQUFBLEdBQUFELENBQUEsUUFBQUcsQ0FBQSxDQUFBSyxHQUFBLENBQUFYLENBQUEsVUFBQU0sQ0FBQSxDQUFBTSxHQUFBLENBQUFaLENBQUEsR0FBQU0sQ0FBQSxDQUFBTyxHQUFBLENBQUFiLENBQUEsRUFBQVEsQ0FBQSxjQUFBTSxFQUFBLElBQUFkLENBQUEsZ0JBQUFjLEVBQUEsT0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFoQixDQUFBLEVBQUFjLEVBQUEsT0FBQVAsQ0FBQSxJQUFBRCxDQUFBLEdBQUFXLE1BQUEsQ0FBQUMsY0FBQSxLQUFBRCxNQUFBLENBQUFFLHdCQUFBLENBQUFuQixDQUFBLEVBQUFjLEVBQUEsT0FBQVAsQ0FBQSxDQUFBSyxHQUFBLElBQUFMLENBQUEsQ0FBQU0sR0FBQSxJQUFBUCxDQUFBLENBQUFFLENBQUEsRUFBQU0sRUFBQSxFQUFBUCxDQUFBLElBQUFDLENBQUEsQ0FBQU0sRUFBQSxJQUFBZCxDQUFBLENBQUFjLEVBQUEsV0FBQU4sQ0FBQSxLQUFBUixDQUFBLEVBQUFDLENBQUE7QUFLN0IsSUFBTW1CLG9CQUFvQixHQUFHLFNBQXZCQSxvQkFBb0JBLENBQUFDLElBQUEsRUFBa0I7RUFBQSxJQUFaQyxLQUFLLEdBQUFELElBQUEsQ0FBTEMsS0FBSztFQUVuQyxJQUFBQyxLQUFBLEdBQXlCLENBQUFELEtBQUssb0JBQUxBLEtBQUssQ0FBRUUsTUFBTSxLQUFJLENBQUMsQ0FBQztJQUFBQyxXQUFBLEdBQUFGLEtBQUEsQ0FBcENHLEtBQUs7SUFBTEEsS0FBSyxHQUFBRCxXQUFBLGNBQUcsSUFBSSxHQUFBQSxXQUFBO0VBR3BCLElBQUFFLGdCQUFBLEdBQXlCLElBQUFDLHlCQUFlLEVBQUMsQ0FBQztJQUFsQ0MsWUFBWSxHQUFBRixnQkFBQSxDQUFaRSxZQUFZO0VBR3BCLElBQU1DLFVBQVUsR0FBRyxJQUFBQyxxQ0FBYSxFQUFDTCxLQUFLLENBQUM7RUFDdkMsSUFBTU0sZ0JBQWdCLEdBQUcsSUFBQUMsY0FBTyxFQUFDO0lBQUEsT0FBTSxJQUFBQywyQ0FBbUIsRUFBQ1IsS0FBSyxDQUFDO0VBQUEsR0FBRSxDQUFDQSxLQUFLLENBQUMsQ0FBQztFQUczRSxJQUFBUyxnQkFBQSxHQXVCSSxJQUFBQyx5QkFBZSxFQUFDSixnQkFBZ0IsRUFBRU4sS0FBSyxDQUFDO0lBdEIxQ1csb0JBQW9CLEdBQUFGLGdCQUFBLENBQXBCRSxvQkFBb0I7SUFDcEJDLFlBQVksR0FBQUgsZ0JBQUEsQ0FBWkcsWUFBWTtJQUNaQyxPQUFPLEdBQUFKLGdCQUFBLENBQVBJLE9BQU87SUFDUEMsVUFBVSxHQUFBTCxnQkFBQSxDQUFWSyxVQUFVO0lBQ1ZDLFFBQVEsR0FBQU4sZ0JBQUEsQ0FBUk0sUUFBUTtJQUNSQyxXQUFXLEdBQUFQLGdCQUFBLENBQVhPLFdBQVc7SUFDWEMsUUFBUSxHQUFBUixnQkFBQSxDQUFSUSxRQUFRO0lBQ1JDLGtCQUFrQixHQUFBVCxnQkFBQSxDQUFsQlMsa0JBQWtCO0lBQ2xCQyxtQkFBbUIsR0FBQVYsZ0JBQUEsQ0FBbkJVLG1CQUFtQjtJQUNuQkMsTUFBTSxHQUFBWCxnQkFBQSxDQUFOVyxNQUFNO0lBQ05DLG9CQUFvQixHQUFBWixnQkFBQSxDQUFwQlksb0JBQW9CO0lBQ3BCQyxlQUFlLEdBQUFiLGdCQUFBLENBQWZhLGVBQWU7SUFDZkMsY0FBYyxHQUFBZCxnQkFBQSxDQUFkYyxjQUFjO0lBQ2RDLFlBQVksR0FBQWYsZ0JBQUEsQ0FBWmUsWUFBWTtJQUNaQyxjQUFjLEdBQUFoQixnQkFBQSxDQUFkZ0IsY0FBYztJQUNkQyxXQUFXLEdBQUFqQixnQkFBQSxDQUFYaUIsV0FBVztJQUNYQyxnQkFBZ0IsR0FBQWxCLGdCQUFBLENBQWhCa0IsZ0JBQWdCO0lBQ2hCQyxVQUFVLEdBQUFuQixnQkFBQSxDQUFWbUIsVUFBVTtJQUNWQyxzQkFBc0IsR0FBQXBCLGdCQUFBLENBQXRCb0Isc0JBQXNCO0lBQ3RCQyxxQkFBcUIsR0FBQXJCLGdCQUFBLENBQXJCcUIscUJBQXFCO0lBQ3JCQyxLQUFLLEdBQUF0QixnQkFBQSxDQUFMc0IsS0FBSztJQUNMQyxPQUFPLEdBQUF2QixnQkFBQSxDQUFQdUIsT0FBTztFQUlULElBQU1DLGdCQUFnQixHQUFHLElBQUExQixjQUFPLEVBQUM7SUFBQSxPQUFPO01BQ3RDMkIsUUFBUSxFQUFFdkIsb0JBQW9CO01BQzlCd0IsSUFBSSxFQUFFSixLQUFLLENBQUNLLFdBQVcsSUFBSSxDQUFDO01BQzVCQyxVQUFVLEVBQUVOLEtBQUssQ0FBQ00sVUFBVSxJQUFJLENBQUM7TUFDakNDLFlBQVksRUFBRSxDQUFBaEIsZUFBZSxvQkFBZkEsZUFBZSxDQUFFaUIsS0FBSyxLQUFJLFlBQVk1QixvQkFBb0IsR0FBRyxDQUFDLEVBQUU7TUFDOUVZLGNBQWMsRUFBZEE7SUFDRixDQUFDO0VBQUEsQ0FBQyxFQUFFLENBQUNaLG9CQUFvQixFQUFFb0IsS0FBSyxDQUFDSyxXQUFXLEVBQUVMLEtBQUssQ0FBQ00sVUFBVSxFQUFFZixlQUFlLG9CQUFmQSxlQUFlLENBQUVpQixLQUFLLEVBQUVoQixjQUFjLENBQUMsQ0FBQztFQUd4RyxJQUFNaUIsa0JBQWtCLEdBQUcsSUFBQUMsa0JBQVcsRUFBQyxZQUFNO0lBQzNDLElBQUlyQixNQUFNLElBQUlJLFlBQVksSUFBSUYsZUFBZSxJQUFJUSxxQkFBcUIsRUFBRTtNQUN0RTNCLFlBQVksQ0FBQztRQUNYb0MsS0FBSyxFQUFFLGVBQWU7UUFDdEJ2QyxLQUFLLEVBQUxBLEtBQUs7UUFDTDBDLElBQUksRUFBRSxlQUFlO1FBQ3JCQyxRQUFRLEVBQUVWO01BQ1osQ0FBQyxDQUFDO0lBQ0o7RUFDRixDQUFDLEVBQUUsQ0FBQ2IsTUFBTSxFQUFFSSxZQUFZLEVBQUVGLGVBQWUsRUFBRVEscUJBQXFCLEVBQUU5QixLQUFLLEVBQUVHLFlBQVksRUFBRThCLGdCQUFnQixDQUFDLENBQUM7RUFHekcsSUFBQVcsZ0JBQVMsRUFBQyxZQUFNO0lBQ2RKLGtCQUFrQixDQUFDLENBQUM7RUFDdEIsQ0FBQyxFQUFFLENBQUNBLGtCQUFrQixDQUFDLENBQUM7RUFJeEIsSUFBTUssZUFBZSxHQUFHLElBQUFKLGtCQUFXLEVBQUMsWUFBTTtJQUN4Q0ssa0JBQU0sQ0FBQ0MsSUFBSSxDQUFDO01BQ1ZDLFFBQVEsRUFBRSx5QkFBeUI7TUFDbkNsRCxNQUFNLEVBQUU7UUFBRUUsS0FBSyxFQUFMQTtNQUFNO0lBQ2xCLENBQUMsQ0FBQztFQUNKLENBQUMsRUFBRSxDQUFDQSxLQUFLLENBQUMsQ0FBQztFQUVYLElBQU1pRCxvQkFBb0IsR0FBRyxJQUFBUixrQkFBVyxFQUFDLFVBQUNTLEtBQUs7SUFBQSxPQUFLekIsY0FBYyxDQUFDeUIsS0FBSyxDQUFDO0VBQUEsR0FBRSxDQUFDekIsY0FBYyxDQUFDLENBQUM7RUFFNUYsSUFBTTBCLGlCQUFpQixHQUFHLElBQUFWLGtCQUFXLEVBQUM7SUFBQSxPQUFNZixXQUFXLENBQUMsQ0FBQztFQUFBLEdBQUUsQ0FBQ0EsV0FBVyxDQUFDLENBQUM7RUFFekUsSUFBTTBCLG1CQUFtQixHQUFHLElBQUFYLGtCQUFXLEVBQUMsVUFBQ1ksVUFBVTtJQUFBLE9BQUsxQixnQkFBZ0IsQ0FBQzBCLFVBQVUsQ0FBQztFQUFBLEdBQUUsQ0FBQzFCLGdCQUFnQixDQUFDLENBQUM7RUFFekcsSUFBTTJCLGdCQUFnQixHQUFHLElBQUFiLGtCQUFXLEVBQUM7SUFBQSxPQUFNYixVQUFVLENBQUMsQ0FBQztFQUFBLEdBQUUsQ0FBQ0EsVUFBVSxDQUFDLENBQUM7RUFFdEUsSUFBTTJCLDJCQUEyQixHQUFHLElBQUFkLGtCQUFXLEVBQUM7SUFBQSxPQUFNWixzQkFBc0IsQ0FBQyxDQUFDO0VBQUEsR0FBRSxDQUFDQSxzQkFBc0IsQ0FBQyxDQUFDO0VBR3pHLElBQU0yQixzQkFBc0IsR0FBRyxJQUFBZixrQkFBVyxFQUFDO0lBQUEsT0FBYVEsb0JBQW9CLENBQUFRLEtBQUEsU0FBQUMsU0FBUSxDQUFDO0VBQUEsR0FBRSxDQUFDVCxvQkFBb0IsQ0FBQyxDQUFDO0VBQzlHLElBQU1VLDZCQUE2QixHQUFHLElBQUFsQixrQkFBVyxFQUFDO0lBQUEsT0FBTWMsMkJBQTJCLENBQUMsQ0FBQztFQUFBLEdBQUUsQ0FBQ0EsMkJBQTJCLENBQUMsQ0FBQztFQUNySCxJQUFNSyxrQkFBa0IsR0FBRyxJQUFBbkIsa0JBQVcsRUFBQztJQUFBLE9BQU1hLGdCQUFnQixDQUFDLENBQUM7RUFBQSxHQUFFLENBQUNBLGdCQUFnQixDQUFDLENBQUM7RUFDcEYsSUFBTU8saUJBQWlCLEdBQUcsSUFBQXBCLGtCQUFXLEVBQUM7SUFBQSxPQUFNSSxlQUFlLENBQUMsQ0FBQztFQUFBLEdBQUUsQ0FBQ0EsZUFBZSxDQUFDLENBQUM7RUFHakYsSUFBSSxDQUFDekIsTUFBTSxJQUFJLENBQUNJLFlBQVksRUFBRTtJQUM1QixPQUNFLElBQUFuRCxXQUFBLENBQUF5RixHQUFBLEVBQUN0RyxVQUFBLENBQUF3QixPQUFTO01BQ1IrRSxNQUFNLEVBQUMsd0JBQXdCO01BQy9CQyxRQUFRO01BQ1JDLGFBQWEsRUFBRUMsK0JBQW9CLENBQUNDLEdBQUk7TUFDeENDLGVBQWUsRUFBQyxTQUFTO01BQ3pCQyxjQUFjLEVBQUM7SUFBYyxDQUdwQixDQUFDO0VBRWhCO0VBRUEsT0FDRSxJQUFBaEcsV0FBQSxDQUFBaUcsSUFBQSxFQUFDOUcsVUFBQSxDQUFBd0IsT0FBUztJQUNSK0UsTUFBTSxFQUFDLHdCQUF3QjtJQUMvQkMsUUFBUTtJQUNSQyxhQUFhLEVBQUVDLCtCQUFvQixDQUFDQyxHQUFJO0lBQ3hDQyxlQUFlLEVBQUMsU0FBUztJQUN6QkMsY0FBYyxFQUFDLGNBQWM7SUFDN0JFLFdBQVcsRUFBRSxLQUFNO0lBQ25CQyxLQUFLLEVBQUVDLGNBQU0sQ0FBQ1QsUUFBUztJQUFBVSxRQUFBLEdBR3ZCLElBQUFyRyxXQUFBLENBQUF5RixHQUFBLEVBQUNwRyxtQkFBQSxDQUFBc0IsT0FBa0I7TUFDakJnQixLQUFLLEVBQUVBLEtBQU07TUFDYjJFLFdBQVcsRUFBRWQsaUJBQWtCO01BQy9CekQsVUFBVSxFQUFFQTtJQUFXLENBQ3hCLENBQUMsRUFHRixJQUFBL0IsV0FBQSxDQUFBeUYsR0FBQSxFQUFDbkcscUJBQUEsQ0FBQXFCLE9BQW9CO01BQ25CNEYsU0FBUyxFQUFFdEUsZ0JBQWdCLENBQUN1RSxTQUFVO01BQ3RDQyxhQUFhLEVBQUVuRSxvQkFBcUI7TUFDcENvRSxnQkFBZ0IsRUFBRXZCLHNCQUF1QjtNQUN6Q3BELFVBQVUsRUFBRUE7SUFBVyxDQUN4QixDQUFDLEVBR0YsSUFBQS9CLFdBQUEsQ0FBQXlGLEdBQUEsRUFBQ2xHLHFCQUFBLENBQUFvQixPQUFvQjtNQUNuQmdHLFFBQVEsRUFBRWpELEtBQUssQ0FBQ2tELGtCQUFtQjtNQUNuQzdDLFdBQVcsRUFBRUwsS0FBSyxDQUFDSyxXQUFZO01BQy9CQyxVQUFVLEVBQUVOLEtBQUssQ0FBQ00sVUFBVztNQUM3QmpDLFVBQVUsRUFBRUEsVUFBVztNQUN2QkUsZ0JBQWdCLEVBQUVBLGdCQUFnQixDQUFDdUUsU0FBVTtNQUM3QzNELGtCQUFrQixFQUFFQSxrQkFBbUI7TUFDdkNDLG1CQUFtQixFQUFFQSxtQkFBb0I7TUFDekMrRCxRQUFRLEVBQUU3RCxvQkFBcUI7TUFDL0I4RCxjQUFjLEVBQUV4Qiw2QkFBOEI7TUFDOUN5QixlQUFlLEVBQUU1QjtJQUF1QixDQUN6QyxDQUFDLEVBR0YsSUFBQW5GLFdBQUEsQ0FBQXlGLEdBQUEsRUFBQ2pHLGdDQUFBLENBQUFtQixPQUErQjtNQUM5QnFHLFdBQVcsRUFBRS9ELGVBQWUsQ0FBQytELFdBQVk7TUFDekNDLFFBQVEsRUFBRXRELE9BQU8sQ0FBQ3VELFdBQVk7TUFDOUJ0RSxRQUFRLEVBQUVBLFFBQVM7TUFDbkJXLFVBQVUsRUFBRWdDLGtCQUFtQjtNQUMvQnhELFVBQVUsRUFBRUE7SUFBVyxDQUN4QixDQUFDLEVBR0YsSUFBQS9CLFdBQUEsQ0FBQWlHLElBQUEsRUFBQ2xILFlBQUEsQ0FBQW9JLG9CQUFvQjtNQUNuQmhCLEtBQUssRUFBRUMsY0FBTSxDQUFDZ0IsYUFBYztNQUM1QkMsUUFBUSxFQUFFQyxxQkFBUSxDQUFDQyxFQUFFLEtBQUssS0FBSyxHQUFHLFNBQVMsR0FBRyxRQUFTO01BQ3ZEQyxzQkFBc0IsRUFBRUYscUJBQVEsQ0FBQ0MsRUFBRSxLQUFLLEtBQUssR0FBRyxFQUFFLEdBQUcsQ0FBRTtNQUFBbEIsUUFBQSxHQUd2RCxJQUFBckcsV0FBQSxDQUFBeUYsR0FBQSxFQUFDaEcsd0JBQUEsQ0FBQWtCLE9BQXVCO1FBQ3RCOEcsUUFBUSxFQUFFbEYsWUFBYTtRQUN2QkcsUUFBUSxFQUFFQSxRQUFTO1FBQ25CWCxVQUFVLEVBQUVBO01BQVcsQ0FDeEIsQ0FBQyxFQUdGLElBQUEvQixXQUFBLENBQUF5RixHQUFBLEVBQUMvRix3QkFBQSxDQUFBaUIsT0FBdUI7UUFDdEJnQyxXQUFXLEVBQUVBLFdBQVk7UUFDekIrRSxpQkFBaUIsRUFBRTNDLG1CQUFvQjtRQUN2Q2hELFVBQVUsRUFBRUE7TUFBVyxDQUN4QixDQUFDLEVBR0YsSUFBQS9CLFdBQUEsQ0FBQXlGLEdBQUEsRUFBQzlGLGtCQUFBLENBQUFnQixPQUFpQjtRQUNoQjZCLE9BQU8sRUFBRUEsT0FBUTtRQUNqQm1GLGVBQWUsRUFBRWxGLFVBQVc7UUFDNUJtRixhQUFhLEVBQUU5QyxpQkFBa0I7UUFDakMvQyxVQUFVLEVBQUVBO01BQVcsQ0FDeEIsQ0FBQztJQUFBLENBQ2tCLENBQUM7RUFBQSxDQUNkLENBQUM7QUFFaEIsQ0FBQztBQUdEVixvQkFBb0IsQ0FBQ3dHLFNBQVMsR0FBRztFQUMvQnRHLEtBQUssRUFBRXVHLGtCQUFTLENBQUNDLEtBQUssQ0FBQztJQUNyQnRHLE1BQU0sRUFBRXFHLGtCQUFTLENBQUNDLEtBQUssQ0FBQztNQUN0QnBHLEtBQUssRUFBRW1HLGtCQUFTLENBQUNFO0lBQ25CLENBQUM7RUFDSCxDQUFDLENBQUMsQ0FBQ0M7QUFDTCxDQUFDO0FBQUMsSUFBQUMsUUFBQSxHQUFBQyxPQUFBLENBQUF4SCxPQUFBLEdBRWFVLG9CQUFvQiIsImlnbm9yZUxpc3QiOltdfQ==