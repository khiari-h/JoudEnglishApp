eaeb2d5f00471863bbb5dcb61deb953b
_getJestObj().mock('react-native-reanimated', function () {
  return require('react-native-reanimated/mock');
});
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn(),
      replace: jest.fn(),
      back: jest.fn(),
      canGoBack: jest.fn(function () {
        return true;
      }),
      setParams: jest.fn()
    },
    useFocusEffect: jest.fn(function () {}),
    useRouter: jest.fn(function () {
      return {
        push: jest.fn(),
        replace: jest.fn(),
        back: jest.fn(),
        canGoBack: jest.fn(function () {
          return true;
        }),
        setParams: jest.fn()
      };
    }),
    useLocalSearchParams: jest.fn(function () {
      return {};
    }),
    useGlobalSearchParams: jest.fn(function () {
      return {};
    }),
    useSegments: jest.fn(function () {
      return [];
    }),
    usePathname: jest.fn(function () {
      return '/';
    }),
    Redirect: function Redirect() {
      return null;
    },
    Link: function Link(_ref) {
      var children = _ref.children,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      var React = require('react');
      var _require = require('react-native'),
        TouchableOpacity = _require.TouchableOpacity,
        Text = _require.Text;
      return React.createElement(TouchableOpacity, props, typeof children === 'string' ? React.createElement(Text, {}, children) : children);
    },
    Stack: {
      Screen: function Screen() {
        return null;
      }
    },
    Tabs: {
      Screen: function Screen() {
        return null;
      }
    }
  };
});
_getJestObj().mock('expo-linear-gradient', function () {
  var React = require('react');
  var _require2 = require('react-native'),
    View = _require2.View;
  return {
    LinearGradient: function LinearGradient(_ref2) {
      var children = _ref2.children,
        colors = _ref2.colors,
        style = _ref2.style,
        props = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
      return (0, _jsxRuntime.jsx)(View, Object.assign({
        style: [style, {
          backgroundColor: colors ? colors[0] : 'transparent'
        }]
      }, props, {
        children: children
      }));
    }
  };
});
_getJestObj().mock('react-native/Libraries/Settings/Settings', function () {
  return {
    get: jest.fn(function () {
      return 'light';
    }),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn()
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return require('@react-native-async-storage/async-storage/jest/async-storage-mock');
});
_getJestObj().mock('expo-crypto', function () {
  return {
    getRandomBytes: jest.fn()
  };
});
_getJestObj().mock('expo-font', function () {
  return {
    useFonts: function useFonts() {
      return [true];
    },
    isLoaded: function isLoaded() {
      return true;
    }
  };
});
_getJestObj().mock('expo-haptics', function () {
  return {
    impactAsync: jest.fn()
  };
});
_getJestObj().mock('expo-splash-screen', function () {
  return {
    hideAsync: jest.fn(),
    preventAutoHideAsync: jest.fn()
  };
});
_getJestObj().mock('expo-constants', function () {
  return {
    manifest: {
      extra: {}
    }
  };
});
_getJestObj().mock('expo-asset', function () {
  return {
    Asset: {
      fromModule: jest.fn(function () {
        return {
          downloadAsync: jest.fn(),
          uri: 'test-uri'
        };
      })
    }
  };
});
_getJestObj().mock('@react-native-clipboard/clipboard', function () {
  return {
    getString: jest.fn(),
    setString: jest.fn()
  };
});
_getJestObj().mock('@react-native-community/push-notification-ios', function () {
  return {
    presentLocalNotification: jest.fn()
  };
});
_getJestObj().mock('@react-native-community/progress-bar-android', function () {
  return 'ProgressBarAndroid';
});
_getJestObj().mock('expo-modules-core', function () {
  return Object.assign({}, jest.requireActual('expo-modules-core'), {
    NativeModulesProxy: new Proxy({}, {
      get: function get(target, prop) {
        if (prop === 'ExpoLocalization') {
          return {
            locale: 'en-US'
          };
        }
        return {};
      }
    }),
    EventEmitter: jest.fn(function () {
      return {
        addListener: jest.fn(),
        removeListeners: jest.fn()
      };
    })
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children"],
  _excluded2 = ["children", "colors", "style"];
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
_reactNative.NativeModules.SettingsManager = _reactNative.NativeModules.SettingsManager || {
  settings: {
    AppleLocale: 'en_US'
  }
};
if (typeof setImmediate === 'undefined') {
  global.setImmediate = function (fn) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return setTimeout.apply(void 0, [fn, 0].concat(args));
  };
}
if (typeof clearImmediate === 'undefined') {
  global.clearImmediate = function (id) {
    return clearTimeout(id);
  };
}
var originalConsole = Object.assign({}, console);
global.console = Object.assign({}, console, {
  error: jest.fn(function (message) {
    if (typeof message === 'string' && message.includes('was not wrapped in act')) return;
    originalConsole.error(message);
  }),
  warn: jest.fn(function (message) {
    var msg = typeof message === 'string' ? message : '';
    var ignore = ['Warning: An update to', 'was not wrapped in act', 'has been extracted', 'new NativeEventEmitter()', 'PushNotificationIOS', 'Clipboard', 'ProgressBarAndroid'].some(function (t) {
      return msg.includes(t);
    });
    if (ignore) return;
    originalConsole.warn(message);
  })
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,