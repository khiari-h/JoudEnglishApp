dd44097c2a52682ba32f5a35fc4aa10f
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ExceptionsManager = require("./ExceptionsManager");
var ReactFiberErrorDialog = {
  showErrorDialog: function showErrorDialog(_ref) {
    var componentStack = _ref.componentStack,
      errorValue = _ref.error;
    var error;
    if (errorValue instanceof Error) {
      error = errorValue;
    } else if (typeof errorValue === 'string') {
      error = new _ExceptionsManager.SyntheticError(errorValue);
    } else {
      error = new _ExceptionsManager.SyntheticError('Unspecified error');
    }
    try {
      error.componentStack = componentStack;
      error.isComponentError = true;
    } catch (_unused) {}
    (0, _ExceptionsManager.handleException)(error, false);
    return false;
  }
};
var _default = exports.default = ReactFiberErrorDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfRXhjZXB0aW9uc01hbmFnZXIiLCJyZXF1aXJlIiwiUmVhY3RGaWJlckVycm9yRGlhbG9nIiwic2hvd0Vycm9yRGlhbG9nIiwiX3JlZiIsImNvbXBvbmVudFN0YWNrIiwiZXJyb3JWYWx1ZSIsImVycm9yIiwiRXJyb3IiLCJTeW50aGV0aWNFcnJvciIsImlzQ29tcG9uZW50RXJyb3IiLCJfdW51c2VkIiwiaGFuZGxlRXhjZXB0aW9uIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIlJlYWN0RmliZXJFcnJvckRpYWxvZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKi9cblxuaW1wb3J0IHR5cGUge0V4dGVuZGVkRXJyb3J9IGZyb20gJy4vRXh0ZW5kZWRFcnJvcic7XG5cbmltcG9ydCB7U3ludGhldGljRXJyb3IsIGhhbmRsZUV4Y2VwdGlvbn0gZnJvbSAnLi9FeGNlcHRpb25zTWFuYWdlcic7XG5cbmV4cG9ydCB0eXBlIENhcHR1cmVkRXJyb3IgPSB7XG4gICtjb21wb25lbnRTdGFjazogc3RyaW5nLFxuICArZXJyb3I6IG1peGVkLFxuICArZXJyb3JCb3VuZGFyeTogP3suLi59LFxuICAuLi5cbn07XG5cbmNvbnN0IFJlYWN0RmliZXJFcnJvckRpYWxvZyA9IHtcbiAgLyoqXG4gICAqIEludGVyY2VwdCBsaWZlY3ljbGUgZXJyb3JzIGFuZCBlbnN1cmUgdGhleSBhcmUgc2hvd24gd2l0aCB0aGUgY29ycmVjdCBzdGFja1xuICAgKiB0cmFjZSB3aXRoaW4gdGhlIG5hdGl2ZSByZWRib3ggY29tcG9uZW50LlxuICAgKi9cbiAgc2hvd0Vycm9yRGlhbG9nKHtjb21wb25lbnRTdGFjaywgZXJyb3I6IGVycm9yVmFsdWV9OiBDYXB0dXJlZEVycm9yKTogYm9vbGVhbiB7XG4gICAgbGV0IGVycm9yOiA/RXh0ZW5kZWRFcnJvcjtcblxuICAgIC8vIFR5cGljYWxseSwgYGVycm9yVmFsdWVgIHNob3VsZCBiZSBhbiBlcnJvci4gSG93ZXZlciwgb3RoZXIgdmFsdWVzIHN1Y2ggYXNcbiAgICAvLyBzdHJpbmdzIChvciBldmVuIG51bGwpIGFyZSBzb21ldGltZXMgdGhyb3duLlxuICAgIGlmIChlcnJvclZhbHVlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIC8qICRGbG93Rml4TWVbY2xhc3Mtb2JqZWN0LXN1YnR5cGluZ10gYWRkZWQgd2hlbiBpbXByb3ZpbmcgdHlwaW5nIGZvclxuICAgICAgICogdGhpcyBwYXJhbWV0ZXJzICovXG4gICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYXN0XVxuICAgICAgZXJyb3IgPSAoZXJyb3JWYWx1ZTogRXh0ZW5kZWRFcnJvcik7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXJyb3JWYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8qICRGbG93Rml4TWVbY2xhc3Mtb2JqZWN0LXN1YnR5cGluZ10gYWRkZWQgd2hlbiBpbXByb3ZpbmcgdHlwaW5nIGZvclxuICAgICAgICogdGhpcyBwYXJhbWV0ZXJzICovXG4gICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYXN0XVxuICAgICAgZXJyb3IgPSAobmV3IFN5bnRoZXRpY0Vycm9yKGVycm9yVmFsdWUpOiBFeHRlbmRlZEVycm9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLyogJEZsb3dGaXhNZVtjbGFzcy1vYmplY3Qtc3VidHlwaW5nXSBhZGRlZCB3aGVuIGltcHJvdmluZyB0eXBpbmcgZm9yXG4gICAgICAgKiB0aGlzIHBhcmFtZXRlcnMgKi9cbiAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhc3RdXG4gICAgICBlcnJvciA9IChuZXcgU3ludGhldGljRXJyb3IoJ1Vuc3BlY2lmaWVkIGVycm9yJyk6IEV4dGVuZGVkRXJyb3IpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgZXJyb3IuY29tcG9uZW50U3RhY2sgPSBjb21wb25lbnRTdGFjaztcbiAgICAgIGVycm9yLmlzQ29tcG9uZW50RXJyb3IgPSB0cnVlO1xuICAgIH0gY2F0Y2gge1xuICAgICAgLy8gSWdub3JlZC5cbiAgICB9XG5cbiAgICBoYW5kbGVFeGNlcHRpb24oZXJyb3IsIGZhbHNlKTtcblxuICAgIC8vIFJldHVybiBmYWxzZSBoZXJlIHRvIHByZXZlbnQgUmVhY3RGaWJlckVycm9yTG9nZ2VyIGRlZmF1bHQgYmVoYXZpb3Igb2ZcbiAgICAvLyBsb2dnaW5nIGVycm9yIGRldGFpbHMgdG8gY29uc29sZS5lcnJvci4gQ2FsbHMgdG8gY29uc29sZS5lcnJvciBhcmVcbiAgICAvLyBhdXRvbWF0aWNhbGx5IHJvdXRlZCB0byB0aGUgbmF0aXZlIHJlZGJveCBjb250cm9sbGVyLCB3aGljaCB3ZSd2ZSBhbHJlYWR5XG4gICAgLy8gZG9uZSBhYm92ZSBieSBjYWxsaW5nIEV4Y2VwdGlvbnNNYW5hZ2VyLlxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWN0RmliZXJFcnJvckRpYWxvZztcbiJdLCJtYXBwaW5ncyI6Ijs7OztBQVlBLElBQUFBLGtCQUFBLEdBQUFDLE9BQUE7QUFTQSxJQUFNQyxxQkFBcUIsR0FBRztFQUs1QkMsZUFBZSxXQUFmQSxlQUFlQSxDQUFBQyxJQUFBLEVBQThEO0lBQUEsSUFBNURDLGNBQWMsR0FBQUQsSUFBQSxDQUFkQyxjQUFjO01BQVNDLFVBQVUsR0FBQUYsSUFBQSxDQUFqQkcsS0FBSztJQUNwQyxJQUFJQSxLQUFxQjtJQUl6QixJQUFJRCxVQUFVLFlBQVlFLEtBQUssRUFBRTtNQUkvQkQsS0FBSyxHQUFJRCxVQUEwQjtJQUNyQyxDQUFDLE1BQU0sSUFBSSxPQUFPQSxVQUFVLEtBQUssUUFBUSxFQUFFO01BSXpDQyxLQUFLLEdBQUksSUFBSUUsaUNBQWMsQ0FBQ0gsVUFBVSxDQUFpQjtJQUN6RCxDQUFDLE1BQU07TUFJTEMsS0FBSyxHQUFJLElBQUlFLGlDQUFjLENBQUMsbUJBQW1CLENBQWlCO0lBQ2xFO0lBQ0EsSUFBSTtNQUNGRixLQUFLLENBQUNGLGNBQWMsR0FBR0EsY0FBYztNQUNyQ0UsS0FBSyxDQUFDRyxnQkFBZ0IsR0FBRyxJQUFJO0lBQy9CLENBQUMsQ0FBQyxPQUFBQyxPQUFBLEVBQU0sQ0FFUjtJQUVBLElBQUFDLGtDQUFlLEVBQUNMLEtBQUssRUFBRSxLQUFLLENBQUM7SUFNN0IsT0FBTyxLQUFLO0VBQ2Q7QUFDRixDQUFDO0FBQUMsSUFBQU0sUUFBQSxHQUFBQyxPQUFBLENBQUFDLE9BQUEsR0FFYWIscUJBQXFCIiwiaWdub3JlTGlzdCI6W119