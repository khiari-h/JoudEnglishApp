87e4b2233943a44e028f12109627ee04
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ProgressCard = _interopRequireDefault(require("../../../../components/ui/ProgressCard"));
var _readingStats = require("../../../../utils/reading/readingStats.js");
var _jsxRuntime = require("react/jsx-runtime");
var ReadingProgress = function ReadingProgress(_ref) {
  var readingData = _ref.readingData,
    completedQuestions = _ref.completedQuestions,
    levelColor = _ref.levelColor,
    _ref$expanded = _ref.expanded,
    expanded = _ref$expanded === void 0 ? false : _ref$expanded,
    onToggleExpand = _ref.onToggleExpand,
    onExercisePress = _ref.onExercisePress;
  var getDataArray = function getDataArray() {
    if (!readingData) return [];
    if (Array.isArray(readingData)) {
      return readingData;
    }
    if (typeof readingData === 'object') {
      return readingData.exercises || readingData.texts || readingData.passages || readingData.readings || readingData.items || [];
    }
    return [];
  };
  var dataArray = getDataArray();
  var totalQuestionsCount = (0, _readingStats.calculateTotalQuestions)(dataArray);
  var completedQuestionsCount = (0, _readingStats.calculateCompletedQuestionsCount)(completedQuestions);
  var totalProgress = (0, _readingStats.calculateTotalProgress)(dataArray, completedQuestions);
  var exerciseProgressData = (0, _readingStats.calculateExerciseProgress)(dataArray, completedQuestions);
  var formattedExerciseData = exerciseProgressData.map(function (exercise) {
    return {
      title: exercise.title,
      completed: exercise.completedQuestions,
      total: exercise.totalQuestions,
      progress: exercise.progress
    };
  });
  return (0, _jsxRuntime.jsx)(_ProgressCard.default, {
    title: "Progression",
    progress: totalProgress,
    completed: completedQuestionsCount,
    total: totalQuestionsCount,
    unit: "questions",
    levelColor: levelColor,
    expandable: true,
    expanded: expanded,
    onToggleExpand: onToggleExpand,
    categoryData: formattedExerciseData,
    onCategoryPress: onExercisePress
  });
};
var _default = exports.default = ReadingProgress;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfUHJvZ3Jlc3NDYXJkIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhZGluZ1N0YXRzIiwiX2pzeFJ1bnRpbWUiLCJSZWFkaW5nUHJvZ3Jlc3MiLCJfcmVmIiwicmVhZGluZ0RhdGEiLCJjb21wbGV0ZWRRdWVzdGlvbnMiLCJsZXZlbENvbG9yIiwiX3JlZiRleHBhbmRlZCIsImV4cGFuZGVkIiwib25Ub2dnbGVFeHBhbmQiLCJvbkV4ZXJjaXNlUHJlc3MiLCJnZXREYXRhQXJyYXkiLCJBcnJheSIsImlzQXJyYXkiLCJleGVyY2lzZXMiLCJ0ZXh0cyIsInBhc3NhZ2VzIiwicmVhZGluZ3MiLCJpdGVtcyIsImRhdGFBcnJheSIsInRvdGFsUXVlc3Rpb25zQ291bnQiLCJjYWxjdWxhdGVUb3RhbFF1ZXN0aW9ucyIsImNvbXBsZXRlZFF1ZXN0aW9uc0NvdW50IiwiY2FsY3VsYXRlQ29tcGxldGVkUXVlc3Rpb25zQ291bnQiLCJ0b3RhbFByb2dyZXNzIiwiY2FsY3VsYXRlVG90YWxQcm9ncmVzcyIsImV4ZXJjaXNlUHJvZ3Jlc3NEYXRhIiwiY2FsY3VsYXRlRXhlcmNpc2VQcm9ncmVzcyIsImZvcm1hdHRlZEV4ZXJjaXNlRGF0YSIsIm1hcCIsImV4ZXJjaXNlIiwidGl0bGUiLCJjb21wbGV0ZWQiLCJ0b3RhbCIsInRvdGFsUXVlc3Rpb25zIiwicHJvZ3Jlc3MiLCJqc3giLCJkZWZhdWx0IiwidW5pdCIsImV4cGFuZGFibGUiLCJjYXRlZ29yeURhdGEiLCJvbkNhdGVnb3J5UHJlc3MiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBSZWFkaW5nUHJvZ3Jlc3MvaW5kZXguanMgLSBWRVJTSU9OIENPUlJJR8OJRSBBVkVDIETDiVRFQ1RJT04gQVVUT1xyXG5cclxuaW1wb3J0IFByb2dyZXNzQ2FyZCBmcm9tIFwiLi4vLi4vLi4vLi4vY29tcG9uZW50cy91aS9Qcm9ncmVzc0NhcmRcIjtcclxuaW1wb3J0IHtcclxuICBjYWxjdWxhdGVUb3RhbFF1ZXN0aW9ucyxcclxuICBjYWxjdWxhdGVDb21wbGV0ZWRRdWVzdGlvbnNDb3VudCxcclxuICBjYWxjdWxhdGVUb3RhbFByb2dyZXNzLFxyXG4gIGNhbGN1bGF0ZUV4ZXJjaXNlUHJvZ3Jlc3MsXHJcbn0gZnJvbSBcIi4uLy4uLy4uLy4uL3V0aWxzL3JlYWRpbmcvcmVhZGluZ1N0YXRzLmpzXCI7XHJcblxyXG4vKipcclxuICog8J+TiiBSZWFkaW5nUHJvZ3Jlc3MgLSBWZXJzaW9uIENvcnJpZ8OpZSBhdmVjIGTDqXRlY3Rpb24gYXV0b21hdGlxdWVcclxuICog4pyFIETDqXRlY3RlIGF1dG9tYXRpcXVlbWVudCBsYSBzdHJ1Y3R1cmUgZGVzIGRvbm7DqWVzXHJcbiAqIOKchSBHw6hyZSBleGVyY2lzZXMsIHRleHRzLCBwYXNzYWdlcywgZXRjLlxyXG4gKi9cclxuY29uc3QgUmVhZGluZ1Byb2dyZXNzID0gKHtcclxuICByZWFkaW5nRGF0YSxcclxuICBjb21wbGV0ZWRRdWVzdGlvbnMsXHJcbiAgbGV2ZWxDb2xvcixcclxuICBleHBhbmRlZCA9IGZhbHNlLFxyXG4gIG9uVG9nZ2xlRXhwYW5kLFxyXG4gIG9uRXhlcmNpc2VQcmVzcyxcclxufSkgPT4ge1xyXG4gIFxyXG4gIC8vIOKchSBEw4lURUNUSU9OIEFVVE9NQVRJUVVFIGRlIGxhIHN0cnVjdHVyZVxyXG4gIGNvbnN0IGdldERhdGFBcnJheSA9ICgpID0+IHtcclxuICAgIGlmICghcmVhZGluZ0RhdGEpIHJldHVybiBbXTtcclxuICAgIFxyXG4gICAgLy8gU2kgYydlc3QgZMOpasOgIHVuIHRhYmxlYXUgZGlyZWN0ZW1lbnRcclxuICAgIGlmIChBcnJheS5pc0FycmF5KHJlYWRpbmdEYXRhKSkge1xyXG4gICAgICByZXR1cm4gcmVhZGluZ0RhdGE7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIFNpIGMnZXN0IHVuIG9iamV0IGF2ZWMgZGlmZsOpcmVudGVzIHByb3ByacOpdMOpcyBwb3NzaWJsZXNcclxuICAgIGlmICh0eXBlb2YgcmVhZGluZ0RhdGEgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgIHJldHVybiByZWFkaW5nRGF0YS5leGVyY2lzZXMgfHwgXHJcbiAgICAgICAgICAgICByZWFkaW5nRGF0YS50ZXh0cyB8fCBcclxuICAgICAgICAgICAgIHJlYWRpbmdEYXRhLnBhc3NhZ2VzIHx8IFxyXG4gICAgICAgICAgICAgcmVhZGluZ0RhdGEucmVhZGluZ3MgfHwgXHJcbiAgICAgICAgICAgICByZWFkaW5nRGF0YS5pdGVtcyB8fCBcclxuICAgICAgICAgICAgIFtdO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gW107XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgZGF0YUFycmF5ID0gZ2V0RGF0YUFycmF5KCk7XHJcbiAgXHJcbiAgLy8g4pyFIFVUSUxJU0UgbGEgdnJhaWUgc3RydWN0dXJlIGTDqXRlY3TDqWVcclxuICBjb25zdCB0b3RhbFF1ZXN0aW9uc0NvdW50ID0gY2FsY3VsYXRlVG90YWxRdWVzdGlvbnMoZGF0YUFycmF5KTtcclxuICBjb25zdCBjb21wbGV0ZWRRdWVzdGlvbnNDb3VudCA9IGNhbGN1bGF0ZUNvbXBsZXRlZFF1ZXN0aW9uc0NvdW50KGNvbXBsZXRlZFF1ZXN0aW9ucyk7XHJcbiAgY29uc3QgdG90YWxQcm9ncmVzcyA9IGNhbGN1bGF0ZVRvdGFsUHJvZ3Jlc3MoZGF0YUFycmF5LCBjb21wbGV0ZWRRdWVzdGlvbnMpO1xyXG4gIGNvbnN0IGV4ZXJjaXNlUHJvZ3Jlc3NEYXRhID0gY2FsY3VsYXRlRXhlcmNpc2VQcm9ncmVzcyhkYXRhQXJyYXksIGNvbXBsZXRlZFF1ZXN0aW9ucyk7XHJcblxyXG4gIC8vIFRyYW5zZm9ybWF0aW9uIHBvdXIgbGUgZm9ybWF0IFByb2dyZXNzQ2FyZFxyXG4gIGNvbnN0IGZvcm1hdHRlZEV4ZXJjaXNlRGF0YSA9IGV4ZXJjaXNlUHJvZ3Jlc3NEYXRhLm1hcCgoZXhlcmNpc2UpID0+ICh7XHJcbiAgICB0aXRsZTogZXhlcmNpc2UudGl0bGUsXHJcbiAgICBjb21wbGV0ZWQ6IGV4ZXJjaXNlLmNvbXBsZXRlZFF1ZXN0aW9ucyxcclxuICAgIHRvdGFsOiBleGVyY2lzZS50b3RhbFF1ZXN0aW9ucyxcclxuICAgIHByb2dyZXNzOiBleGVyY2lzZS5wcm9ncmVzcyxcclxuICB9KSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8UHJvZ3Jlc3NDYXJkXHJcbiAgICAgIHRpdGxlPVwiUHJvZ3Jlc3Npb25cIiAvLyDinIUgVGl0cmUgdW5pZm9ybWVcclxuICAgICAgcHJvZ3Jlc3M9e3RvdGFsUHJvZ3Jlc3N9XHJcbiAgICAgIGNvbXBsZXRlZD17Y29tcGxldGVkUXVlc3Rpb25zQ291bnR9XHJcbiAgICAgIHRvdGFsPXt0b3RhbFF1ZXN0aW9uc0NvdW50fVxyXG4gICAgICB1bml0PVwicXVlc3Rpb25zXCJcclxuICAgICAgbGV2ZWxDb2xvcj17bGV2ZWxDb2xvcn1cclxuICAgICAgZXhwYW5kYWJsZVxyXG4gICAgICBleHBhbmRlZD17ZXhwYW5kZWR9XHJcbiAgICAgIG9uVG9nZ2xlRXhwYW5kPXtvblRvZ2dsZUV4cGFuZH1cclxuICAgICAgY2F0ZWdvcnlEYXRhPXtmb3JtYXR0ZWRFeGVyY2lzZURhdGF9XHJcbiAgICAgIG9uQ2F0ZWdvcnlQcmVzcz17b25FeGVyY2lzZVByZXNzfVxyXG4gICAgLz5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgUmVhZGluZ1Byb2dyZXNzOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSxJQUFBQSxhQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxhQUFBLEdBQUFELE9BQUE7QUFLbUQsSUFBQUUsV0FBQSxHQUFBRixPQUFBO0FBT25ELElBQU1HLGVBQWUsR0FBRyxTQUFsQkEsZUFBZUEsQ0FBQUMsSUFBQSxFQU9mO0VBQUEsSUFOSkMsV0FBVyxHQUFBRCxJQUFBLENBQVhDLFdBQVc7SUFDWEMsa0JBQWtCLEdBQUFGLElBQUEsQ0FBbEJFLGtCQUFrQjtJQUNsQkMsVUFBVSxHQUFBSCxJQUFBLENBQVZHLFVBQVU7SUFBQUMsYUFBQSxHQUFBSixJQUFBLENBQ1ZLLFFBQVE7SUFBUkEsUUFBUSxHQUFBRCxhQUFBLGNBQUcsS0FBSyxHQUFBQSxhQUFBO0lBQ2hCRSxjQUFjLEdBQUFOLElBQUEsQ0FBZE0sY0FBYztJQUNkQyxlQUFlLEdBQUFQLElBQUEsQ0FBZk8sZUFBZTtFQUlmLElBQU1DLFlBQVksR0FBRyxTQUFmQSxZQUFZQSxDQUFBLEVBQVM7SUFDekIsSUFBSSxDQUFDUCxXQUFXLEVBQUUsT0FBTyxFQUFFO0lBRzNCLElBQUlRLEtBQUssQ0FBQ0MsT0FBTyxDQUFDVCxXQUFXLENBQUMsRUFBRTtNQUM5QixPQUFPQSxXQUFXO0lBQ3BCO0lBR0EsSUFBSSxPQUFPQSxXQUFXLEtBQUssUUFBUSxFQUFFO01BQ25DLE9BQU9BLFdBQVcsQ0FBQ1UsU0FBUyxJQUNyQlYsV0FBVyxDQUFDVyxLQUFLLElBQ2pCWCxXQUFXLENBQUNZLFFBQVEsSUFDcEJaLFdBQVcsQ0FBQ2EsUUFBUSxJQUNwQmIsV0FBVyxDQUFDYyxLQUFLLElBQ2pCLEVBQUU7SUFDWDtJQUVBLE9BQU8sRUFBRTtFQUNYLENBQUM7RUFFRCxJQUFNQyxTQUFTLEdBQUdSLFlBQVksQ0FBQyxDQUFDO0VBR2hDLElBQU1TLG1CQUFtQixHQUFHLElBQUFDLHFDQUF1QixFQUFDRixTQUFTLENBQUM7RUFDOUQsSUFBTUcsdUJBQXVCLEdBQUcsSUFBQUMsOENBQWdDLEVBQUNsQixrQkFBa0IsQ0FBQztFQUNwRixJQUFNbUIsYUFBYSxHQUFHLElBQUFDLG9DQUFzQixFQUFDTixTQUFTLEVBQUVkLGtCQUFrQixDQUFDO0VBQzNFLElBQU1xQixvQkFBb0IsR0FBRyxJQUFBQyx1Q0FBeUIsRUFBQ1IsU0FBUyxFQUFFZCxrQkFBa0IsQ0FBQztFQUdyRixJQUFNdUIscUJBQXFCLEdBQUdGLG9CQUFvQixDQUFDRyxHQUFHLENBQUMsVUFBQ0MsUUFBUTtJQUFBLE9BQU07TUFDcEVDLEtBQUssRUFBRUQsUUFBUSxDQUFDQyxLQUFLO01BQ3JCQyxTQUFTLEVBQUVGLFFBQVEsQ0FBQ3pCLGtCQUFrQjtNQUN0QzRCLEtBQUssRUFBRUgsUUFBUSxDQUFDSSxjQUFjO01BQzlCQyxRQUFRLEVBQUVMLFFBQVEsQ0FBQ0s7SUFDckIsQ0FBQztFQUFBLENBQUMsQ0FBQztFQUVILE9BQ0UsSUFBQWxDLFdBQUEsQ0FBQW1DLEdBQUEsRUFBQ3ZDLGFBQUEsQ0FBQXdDLE9BQVk7SUFDWE4sS0FBSyxFQUFDLGFBQWE7SUFDbkJJLFFBQVEsRUFBRVgsYUFBYztJQUN4QlEsU0FBUyxFQUFFVix1QkFBd0I7SUFDbkNXLEtBQUssRUFBRWIsbUJBQW9CO0lBQzNCa0IsSUFBSSxFQUFDLFdBQVc7SUFDaEJoQyxVQUFVLEVBQUVBLFVBQVc7SUFDdkJpQyxVQUFVO0lBQ1YvQixRQUFRLEVBQUVBLFFBQVM7SUFDbkJDLGNBQWMsRUFBRUEsY0FBZTtJQUMvQitCLFlBQVksRUFBRVoscUJBQXNCO0lBQ3BDYSxlQUFlLEVBQUUvQjtFQUFnQixDQUNsQyxDQUFDO0FBRU4sQ0FBQztBQUFDLElBQUFnQyxRQUFBLEdBQUFDLE9BQUEsQ0FBQU4sT0FBQSxHQUVhbkMsZUFBZSIsImlnbm9yZUxpc3QiOltdfQ==