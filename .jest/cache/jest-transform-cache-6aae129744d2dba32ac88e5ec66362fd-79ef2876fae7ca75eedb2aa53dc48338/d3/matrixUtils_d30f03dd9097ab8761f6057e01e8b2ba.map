{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","unflatten","subtractMatrices","scaleMatrix","multiplyMatrices","isAffineMatrixFlat","isAffineMatrix","getRotationMatrix","flatten","decomposeMatrixIntoMatricesAndAngles","decomposeMatrix","addMatrices","_slicedToArray2","_errors","_worklet_16608182813474_init_data","code","location","sourceMap","version","_e","global","Error","x","Array","isArray","length","every","element","isNaN","__closure","__workletHash","__initData","__stackDetails","_worklet_12145777748389_init_data","row","_worklet_11140710885372_init_data","matrix","flat","_worklet_740798028535_init_data","m","_worklet_10948427981270_init_data","maybeFlattenMatrix","_worklet_2862917901430_init_data","a","b","_worklet_2060376175272_init_data","maybeFlatA","maybeFlatB","isFlatOnStart","c","map","_","i","_worklet_4921215141012_init_data","_worklet_152872609777_init_data","scalar","_worklet_9204480281994_init_data","angle","axis","arguments","undefined","cos","Math","sin","_worklet_3668152056444_init_data","norm3d","y","z","sqrt","_worklet_5131069316781_init_data","transposeMatrix","_worklet_14686050992203_init_data","assertVectorsHaveEqualLengths","__DEV__","ReanimatedError","toString","_worklet_14436084414171_init_data","innerProduct","reduce","acc","_worklet_7951590667481_init_data","projection","u","s","e","_worklet_12308289132690_init_data","subtractVectors","_worklet_5220819830617_init_data","scaleVector","_worklet_16811173194087_init_data","gramSchmidtAlgorithm","_matrix","default","a0","a1","a2","a3","u0","u1","u2","u3","_map","_map2","e0","e1","e2","e3","rotationMatrix","skewMatrix","_worklet_474368992217_init_data","unknownTypeMatrix","forEach","translationMatrix","sx","sy","sz","rotationAndSkewMatrix","_gramSchmidtAlgorithm","_worklet_10979607778513_init_data","_decomposeMatrix","sinRy","ry","asin","rx","rz","atan2"],"sources":["matrixUtils.tsx"],"sourcesContent":["'use strict';\n\nimport { ReanimatedError } from '../../errors';\n\ntype FixedLengthArray<\n  T,\n  L extends number,\n  PassedObject = [T, ...Array<T>],\n> = PassedObject & {\n  readonly length: L;\n  [I: number]: T;\n};\n\nexport type AffineMatrix = FixedLengthArray<FixedLengthArray<number, 4>, 4>;\n\nexport type AffineMatrixFlat = FixedLengthArray<number, 16>;\n\ntype TransformMatrixDecomposition = Record<\n  'translationMatrix' | 'scaleMatrix' | 'rotationMatrix' | 'skewMatrix',\n  AffineMatrix\n>;\n\ntype Axis = 'x' | 'y' | 'z';\n\ninterface TansformMatrixDecompositionWithAngles\n  extends TransformMatrixDecomposition {\n  rx: number;\n  ry: number;\n  rz: number;\n}\n\nexport function isAffineMatrixFlat(x: unknown): x is AffineMatrixFlat {\n  'worklet';\n  return (\n    Array.isArray(x) &&\n    x.length === 16 &&\n    x.every((element) => typeof element === 'number' && !isNaN(element))\n  );\n}\n\n// ts-prune-ignore-next This function is exported to be tested\nexport function isAffineMatrix(x: unknown): x is AffineMatrix {\n  'worklet';\n  return (\n    Array.isArray(x) &&\n    x.length === 4 &&\n    x.every(\n      (row) =>\n        Array.isArray(row) &&\n        row.length === 4 &&\n        row.every((element) => typeof element === 'number' && !isNaN(element))\n    )\n  );\n}\n\nexport function flatten(matrix: AffineMatrix): AffineMatrixFlat {\n  'worklet';\n  return matrix.flat() as AffineMatrixFlat;\n}\n\n// ts-prune-ignore-next This function is exported to be tested\nexport function unflatten(m: AffineMatrixFlat): AffineMatrix {\n  'worklet';\n  return [\n    [m[0], m[1], m[2], m[3]],\n    [m[4], m[5], m[6], m[7]],\n    [m[8], m[9], m[10], m[11]],\n    [m[12], m[13], m[14], m[15]],\n  ] as AffineMatrix;\n}\n\nfunction maybeFlattenMatrix(\n  matrix: AffineMatrix | AffineMatrixFlat\n): AffineMatrixFlat {\n  'worklet';\n  return isAffineMatrix(matrix) ? flatten(matrix) : matrix;\n}\n\nexport function multiplyMatrices(\n  a: AffineMatrix,\n  b: AffineMatrix\n): AffineMatrix {\n  'worklet';\n  return [\n    [\n      a[0][0] * b[0][0] +\n        a[0][1] * b[1][0] +\n        a[0][2] * b[2][0] +\n        a[0][3] * b[3][0],\n\n      a[0][0] * b[0][1] +\n        a[0][1] * b[1][1] +\n        a[0][2] * b[2][1] +\n        a[0][3] * b[3][1],\n\n      a[0][0] * b[0][2] +\n        a[0][1] * b[1][2] +\n        a[0][2] * b[2][2] +\n        a[0][3] * b[3][2],\n\n      a[0][0] * b[0][3] +\n        a[0][1] * b[1][3] +\n        a[0][2] * b[2][3] +\n        a[0][3] * b[3][3],\n    ],\n    [\n      a[1][0] * b[0][0] +\n        a[1][1] * b[1][0] +\n        a[1][2] * b[2][0] +\n        a[1][3] * b[3][0],\n\n      a[1][0] * b[0][1] +\n        a[1][1] * b[1][1] +\n        a[1][2] * b[2][1] +\n        a[1][3] * b[3][1],\n\n      a[1][0] * b[0][2] +\n        a[1][1] * b[1][2] +\n        a[1][2] * b[2][2] +\n        a[1][3] * b[3][2],\n\n      a[1][0] * b[0][3] +\n        a[1][1] * b[1][3] +\n        a[1][2] * b[2][3] +\n        a[1][3] * b[3][3],\n    ],\n    [\n      a[2][0] * b[0][0] +\n        a[2][1] * b[1][0] +\n        a[2][2] * b[2][0] +\n        a[2][3] * b[3][0],\n\n      a[2][0] * b[0][1] +\n        a[2][1] * b[1][1] +\n        a[2][2] * b[2][1] +\n        a[2][3] * b[3][1],\n\n      a[2][0] * b[0][2] +\n        a[2][1] * b[1][2] +\n        a[2][2] * b[2][2] +\n        a[2][3] * b[3][2],\n\n      a[2][0] * b[0][3] +\n        a[2][1] * b[1][3] +\n        a[2][2] * b[2][3] +\n        a[2][3] * b[3][3],\n    ],\n    [\n      a[3][0] * b[0][0] +\n        a[3][1] * b[1][0] +\n        a[3][2] * b[2][0] +\n        a[3][3] * b[3][0],\n\n      a[3][0] * b[0][1] +\n        a[3][1] * b[1][1] +\n        a[3][2] * b[2][1] +\n        a[3][3] * b[3][1],\n\n      a[3][0] * b[0][2] +\n        a[3][1] * b[1][2] +\n        a[3][2] * b[2][2] +\n        a[3][3] * b[3][2],\n\n      a[3][0] * b[0][3] +\n        a[3][1] * b[1][3] +\n        a[3][2] * b[2][3] +\n        a[3][3] * b[3][3],\n    ],\n  ];\n}\n\nexport function subtractMatrices<T extends AffineMatrixFlat | AffineMatrix>(\n  maybeFlatA: T,\n  maybeFlatB: T\n): T {\n  'worklet';\n  const isFlatOnStart = isAffineMatrixFlat(maybeFlatA);\n  const a: AffineMatrixFlat = maybeFlattenMatrix(maybeFlatA);\n  const b: AffineMatrixFlat = maybeFlattenMatrix(maybeFlatB);\n\n  const c = a.map((_, i) => a[i] - b[i]) as AffineMatrixFlat;\n  return isFlatOnStart ? (c as T) : (unflatten(c) as T);\n}\n\nexport function addMatrices<T extends AffineMatrixFlat | AffineMatrix>(\n  maybeFlatA: T,\n  maybeFlatB: T\n): T {\n  'worklet';\n  const isFlatOnStart = isAffineMatrixFlat(maybeFlatA);\n  const a = maybeFlattenMatrix(maybeFlatA);\n  const b = maybeFlattenMatrix(maybeFlatB);\n\n  const c = a.map((_, i) => a[i] + b[i]) as AffineMatrixFlat;\n  return isFlatOnStart ? (c as T) : (unflatten(c) as T);\n}\n\nexport function scaleMatrix<T extends AffineMatrixFlat | AffineMatrix>(\n  maybeFlatA: T,\n  scalar: number\n): T {\n  'worklet';\n  const isFlatOnStart = isAffineMatrixFlat(maybeFlatA);\n  const a = maybeFlattenMatrix(maybeFlatA);\n\n  const b = a.map((x) => x * scalar) as AffineMatrixFlat;\n  return isFlatOnStart ? (b as T) : (unflatten(b) as T);\n}\n\nexport function getRotationMatrix(\n  angle: number,\n  axis: Axis = 'z'\n): AffineMatrix {\n  'worklet';\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  switch (axis) {\n    case 'z':\n      return [\n        [cos, sin, 0, 0],\n        [-sin, cos, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n      ];\n    case 'y':\n      return [\n        [cos, 0, -sin, 0],\n        [0, 1, 0, 0],\n        [sin, 0, cos, 0],\n        [0, 0, 0, 1],\n      ];\n    case 'x':\n      return [\n        [1, 0, 0, 0],\n        [0, cos, sin, 0],\n        [0, -sin, cos, 0],\n        [0, 0, 0, 1],\n      ];\n  }\n}\n\nfunction norm3d(x: number, y: number, z: number) {\n  'worklet';\n  return Math.sqrt(x * x + y * y + z * z);\n}\n\nfunction transposeMatrix(matrix: AffineMatrix): AffineMatrix {\n  'worklet';\n  const m = flatten(matrix);\n  return [\n    [m[0], m[4], m[8], m[12]],\n    [m[1], m[5], m[9], m[13]],\n    [m[2], m[6], m[10], m[14]],\n    [m[3], m[7], m[11], m[15]],\n  ];\n}\n\nfunction assertVectorsHaveEqualLengths(a: number[], b: number[]) {\n  'worklet';\n  if (__DEV__ && a.length !== b.length) {\n    throw new ReanimatedError(\n      `Cannot calculate inner product of two vectors of different lengths. Length of ${a.toString()} is ${\n        a.length\n      } and length of ${b.toString()} is ${b.length}.`\n    );\n  }\n}\n\nfunction innerProduct(a: number[], b: number[]) {\n  'worklet';\n  assertVectorsHaveEqualLengths(a, b);\n  return a.reduce((acc, _, i) => acc + a[i] * b[i], 0);\n}\n\nfunction projection(u: number[], a: number[]) {\n  'worklet';\n  assertVectorsHaveEqualLengths(u, a);\n  const s = innerProduct(u, a) / innerProduct(u, u);\n  return u.map((e) => e * s);\n}\n\nfunction subtractVectors(a: number[], b: number[]) {\n  'worklet';\n  assertVectorsHaveEqualLengths(a, b);\n  return a.map((_, i) => a[i] - b[i]);\n}\n\nfunction scaleVector(u: number[], a: number) {\n  'worklet';\n  return u.map((e) => e * a);\n}\n\nfunction gramSchmidtAlgorithm(matrix: AffineMatrix): {\n  rotationMatrix: AffineMatrix;\n  skewMatrix: AffineMatrix;\n} {\n  // Gram-Schmidt orthogonalization decomposes any matrix with non-zero determinant into an orthogonal and a triangular matrix\n  // These matrices are equal to rotation and skew matrices respectively, because we apply it to transformation matrix\n  // That is expected to already have extracted the remaining transforms (scale & translation)\n  'worklet';\n  const [a0, a1, a2, a3] = matrix;\n\n  const u0 = a0;\n  const u1 = subtractVectors(a1, projection(u0, a1));\n  const u2 = subtractVectors(\n    subtractVectors(a2, projection(u0, a2)),\n    projection(u1, a2)\n  );\n  const u3 = subtractVectors(\n    subtractVectors(\n      subtractVectors(a3, projection(u0, a3)),\n      projection(u1, a3)\n    ),\n    projection(u2, a3)\n  );\n\n  const [e0, e1, e2, e3] = [u0, u1, u2, u3].map((u) =>\n    scaleVector(u, 1 / Math.sqrt(innerProduct(u, u)))\n  );\n\n  const rotationMatrix: AffineMatrix = [\n    [e0[0], e1[0], e2[0], e3[0]],\n    [e0[1], e1[1], e2[1], e3[1]],\n    [e0[2], e1[2], e2[2], e3[2]],\n    [e0[3], e1[3], e2[3], e3[3]],\n  ];\n\n  const skewMatrix: AffineMatrix = [\n    [\n      innerProduct(e0, a0),\n      innerProduct(e0, a1),\n      innerProduct(e0, a2),\n      innerProduct(e0, a3),\n    ],\n    [0, innerProduct(e1, a1), innerProduct(e1, a2), innerProduct(e1, a3)],\n    [0, 0, innerProduct(e2, a2), innerProduct(e2, a3)],\n    [0, 0, 0, innerProduct(e3, a3)],\n  ];\n  return {\n    rotationMatrix: transposeMatrix(rotationMatrix),\n    skewMatrix: transposeMatrix(skewMatrix),\n  };\n}\n\n// ts-prune-ignore-next This function is exported to be tested\nexport function decomposeMatrix(\n  unknownTypeMatrix: AffineMatrixFlat | AffineMatrix\n): TransformMatrixDecomposition {\n  'worklet';\n  const matrix = maybeFlattenMatrix(unknownTypeMatrix);\n\n  // normalize matrix\n  if (matrix[15] === 0) {\n    throw new ReanimatedError('Invalid transform matrix.');\n  }\n  matrix.forEach((_, i) => (matrix[i] /= matrix[15]));\n\n  const translationMatrix: AffineMatrix = [\n    [1, 0, 0, 0],\n    [0, 1, 0, 0],\n    [0, 0, 1, 0],\n    [matrix[12], matrix[13], matrix[14], 1],\n  ];\n  const sx = matrix[15] * norm3d(matrix[0], matrix[4], matrix[8]);\n  const sy = matrix[15] * norm3d(matrix[1], matrix[5], matrix[9]);\n  const sz = matrix[15] * norm3d(matrix[2], matrix[6], matrix[10]);\n\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  const scaleMatrix: AffineMatrix = [\n    [sx, 0, 0, 0],\n    [0, sy, 0, 0],\n    [0, 0, sz, 0],\n    [0, 0, 0, 1],\n  ];\n\n  const rotationAndSkewMatrix: AffineMatrix = [\n    [matrix[0] / sx, matrix[1] / sx, matrix[2] / sx, 0],\n    [matrix[4] / sy, matrix[5] / sy, matrix[6] / sy, 0],\n    [matrix[8] / sz, matrix[9] / sz, matrix[10] / sz, 0],\n    [0, 0, 0, 1],\n  ];\n\n  const { rotationMatrix, skewMatrix } = gramSchmidtAlgorithm(\n    rotationAndSkewMatrix\n  );\n\n  return {\n    translationMatrix,\n    scaleMatrix,\n    rotationMatrix,\n    skewMatrix,\n  };\n}\n\nexport function decomposeMatrixIntoMatricesAndAngles(\n  matrix: AffineMatrixFlat | AffineMatrix\n): TansformMatrixDecompositionWithAngles {\n  'worklet';\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  const { scaleMatrix, rotationMatrix, translationMatrix, skewMatrix } =\n    decomposeMatrix(matrix);\n\n  const sinRy = -rotationMatrix[0][2];\n\n  const ry = Math.asin(sinRy);\n  let rx;\n  let rz;\n  if (sinRy === 1 || sinRy === -1) {\n    rz = 0;\n    rx = Math.atan2(sinRy * rotationMatrix[0][1], sinRy * rotationMatrix[0][2]);\n  } else {\n    rz = Math.atan2(rotationMatrix[0][1], rotationMatrix[0][0]);\n    rx = Math.atan2(rotationMatrix[1][2], rotationMatrix[2][2]);\n  }\n\n  return {\n    scaleMatrix,\n    rotationMatrix,\n    translationMatrix,\n    skewMatrix,\n    rx: rx || 0,\n    ry: ry || 0,\n    rz: rz || 0,\n  };\n}\n"],"mappings":"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CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAEnBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAEnBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAEnBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACpB,EACD,CACED,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAEnBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAEnBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAEnBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACpB,EACD,CACED,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAEnBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAEnBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAEnBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACpB,EACD,CACED,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAEnBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAEnBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CA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","ignoreList":[]}