9baaeddb52a35c1c4fda20116ba2446a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapFetchWithWindowLocation = wrapFetchWithWindowLocation;
require("react-native/Libraries/Core/InitializeCore");
require("whatwg-fetch");
require("expo");
var _expoConstants = _interopRequireDefault(require("expo-constants"));
var _PolyfillFunctions = require("react-native/Libraries/Utilities/PolyfillFunctions");
var _Location = require("./Location");
var _getDevServer = _interopRequireDefault(require("../getDevServer"));
var _manifest$extra3;
var manifest = _expoConstants.default.expoConfig;
function getOrigin() {
  var _manifest$extra$route, _manifest$extra, _manifest$extra2;
  if (process.env.NODE_ENV !== 'production') {
    return (0, _getDevServer.default)().url;
  }
  return (_manifest$extra$route = manifest == null || (_manifest$extra = manifest.extra) == null || (_manifest$extra = _manifest$extra.router) == null ? void 0 : _manifest$extra.origin) != null ? _manifest$extra$route : manifest == null || (_manifest$extra2 = manifest.extra) == null || (_manifest$extra2 = _manifest$extra2.router) == null ? void 0 : _manifest$extra2.generatedOrigin;
}
function getBaseUrl() {
  var productionBaseUrl = getOrigin();
  if (!productionBaseUrl) {
    return null;
  }
  return productionBaseUrl == null ? void 0 : productionBaseUrl.replace(/\/$/, '');
}
var polyfillSymbol = Symbol.for('expo.polyfillFetchWithWindowLocation');
function wrapFetchWithWindowLocation(fetch) {
  if (fetch[polyfillSymbol]) {
    return fetch;
  }
  var _fetch = function _fetch() {
    for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {
      props[_key] = arguments[_key];
    }
    if (props[0] && typeof props[0] === 'string' && props[0].startsWith('/')) {
      var _window$location;
      props[0] = new URL(props[0], (_window$location = window.location) == null ? void 0 : _window$location.origin).toString();
    } else if (props[0] && typeof props[0] === 'object') {
      if (props[0].url && typeof props[0].url === 'string' && props[0].url.startsWith('/')) {
        var _window$location2;
        props[0].url = new URL(props[0].url, (_window$location2 = window.location) == null ? void 0 : _window$location2.origin).toString();
      }
    }
    return fetch.apply(void 0, props);
  };
  _fetch[polyfillSymbol] = true;
  return _fetch;
}
var BUILTIN_SYMBOL = Symbol.for('expo.builtin');
function addBuiltinSymbol(obj) {
  Object.defineProperty(obj, BUILTIN_SYMBOL, {
    value: true,
    enumerable: false,
    configurable: false
  });
  return obj;
}
function installBuiltin(name, getValue) {
  (0, _PolyfillFunctions.polyfillGlobal)(name, function () {
    return addBuiltinSymbol(getValue());
  });
}
try {
  require('web-streams-polyfill');
  installBuiltin('ReadableStream', function () {
    return require('web-streams-polyfill/ponyfill/es6').ReadableStream;
  });
} catch (_unused) {}
if ((manifest == null || (_manifest$extra3 = manifest.extra) == null || (_manifest$extra3 = _manifest$extra3.router) == null ? void 0 : _manifest$extra3.origin) !== false) {
  if (typeof window !== 'undefined' && !window.location) {
    var url = getBaseUrl();
    if (url) {
      (0, _Location.setLocationHref)(url);
      (0, _Location.install)();
    }
  }
  Object.defineProperty(global, 'fetch', {
    value: wrapFetchWithWindowLocation(fetch)
  });
} else {
  Object.defineProperty(global, 'fetch', {
    value: fetch
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,