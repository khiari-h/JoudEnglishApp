30a00b1711d218107ca41f0146e6b8bf
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    },
    useFocusEffect: jest.fn(function () {})
  };
});
_getJestObj().mock('../../src/utils/grammar/grammarDataHelper', function () {
  return {
    getLevelColor: jest.fn(function () {
      return '#007AFF';
    }),
    getGrammarData: jest.fn(function () {
      return [{
        title: 'Rule',
        exercises: [{
          type: 'fillInTheBlank',
          question: 'Q?',
          options: ['a', 'b'],
          answer: 'a'
        }]
      }];
    }),
    loadGrammarData: jest.fn((0, _asyncToGenerator2.default)(function* () {
      return [{
        title: 'Rule',
        exercises: [{
          type: 'fillInTheBlank',
          question: 'Q?',
          options: ['a', 'b'],
          answer: 'a'
        }]
      }];
    }))
  };
});
_getJestObj().mock('../../src/screens/exercises/grammar/hooks/useGrammar', function () {
  return {
    __esModule: true,
    default: jest.fn(function () {
      return {
        ruleIndex: 0,
        exerciseIndex: 0,
        selectedOption: null,
        setSelectedOption: jest.fn(),
        inputText: '',
        setInputText: jest.fn(),
        showFeedback: false,
        isCorrect: false,
        attempts: 0,
        completedExercises: {},
        loaded: true,
        showDetailedProgress: false,
        currentRule: {
          title: 'Rule'
        },
        currentExercise: {
          type: 'fillInTheBlank',
          question: 'Q?',
          options: ['a', 'b'],
          answer: 'a'
        },
        canCheckAnswer: true,
        isFirstExercise: true,
        isLastExercise: false,
        changeRule: jest.fn(),
        submitAnswer: jest.fn(),
        nextExercise: jest.fn(),
        previousExercise: jest.fn(),
        retryExercise: jest.fn(),
        toggleDetailedProgress: jest.fn()
      };
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _grammar = _interopRequireDefault(require("../../src/screens/exercises/grammar"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('GrammarExercise accessibility', function () {
  it('should render navigation check/next buttons with role button', function () {
    var params = {
      level: 'A1'
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_grammar.default, {
        route: {
          params: params
        }
      })),
      getAllByRole = _render.getAllByRole;
    var buttons = getAllByRole('button');
    expect(buttons.length).toBeGreaterThan(0);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJyb3V0ZXIiLCJwdXNoIiwiamVzdCIsImZuIiwidXNlRm9jdXNFZmZlY3QiLCJnZXRMZXZlbENvbG9yIiwiZ2V0R3JhbW1hckRhdGEiLCJ0aXRsZSIsImV4ZXJjaXNlcyIsInR5cGUiLCJxdWVzdGlvbiIsIm9wdGlvbnMiLCJhbnN3ZXIiLCJsb2FkR3JhbW1hckRhdGEiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJkZWZhdWx0IiwiX19lc01vZHVsZSIsInJ1bGVJbmRleCIsImV4ZXJjaXNlSW5kZXgiLCJzZWxlY3RlZE9wdGlvbiIsInNldFNlbGVjdGVkT3B0aW9uIiwiaW5wdXRUZXh0Iiwic2V0SW5wdXRUZXh0Iiwic2hvd0ZlZWRiYWNrIiwiaXNDb3JyZWN0IiwiYXR0ZW1wdHMiLCJjb21wbGV0ZWRFeGVyY2lzZXMiLCJsb2FkZWQiLCJzaG93RGV0YWlsZWRQcm9ncmVzcyIsImN1cnJlbnRSdWxlIiwiY3VycmVudEV4ZXJjaXNlIiwiY2FuQ2hlY2tBbnN3ZXIiLCJpc0ZpcnN0RXhlcmNpc2UiLCJpc0xhc3RFeGVyY2lzZSIsImNoYW5nZVJ1bGUiLCJzdWJtaXRBbnN3ZXIiLCJuZXh0RXhlcmNpc2UiLCJwcmV2aW91c0V4ZXJjaXNlIiwicmV0cnlFeGVyY2lzZSIsInRvZ2dsZURldGFpbGVkUHJvZ3Jlc3MiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9ncmFtbWFyIiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwiaXQiLCJwYXJhbXMiLCJsZXZlbCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJyb3V0ZSIsImdldEFsbEJ5Um9sZSIsImJ1dHRvbnMiLCJleHBlY3QiLCJsZW5ndGgiLCJ0b0JlR3JlYXRlclRoYW4iXSwic291cmNlcyI6WyJHcmFtbWFyRXhlcmNpc2UuYTExeS50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcclxuaW1wb3J0IEdyYW1tYXJFeGVyY2lzZSBmcm9tICcuLi8uLi9zcmMvc2NyZWVucy9leGVyY2lzZXMvZ3JhbW1hcic7XHJcblxyXG5qZXN0Lm1vY2soJ2V4cG8tcm91dGVyJywgKCkgPT4gKHsgcm91dGVyOiB7IHB1c2g6IGplc3QuZm4oKSB9LCB1c2VGb2N1c0VmZmVjdDogamVzdC5mbigoKSA9PiB7fSkgfSkpO1xyXG5cclxuamVzdC5tb2NrKCcuLi8uLi9zcmMvdXRpbHMvZ3JhbW1hci9ncmFtbWFyRGF0YUhlbHBlcicsICgpID0+ICh7XHJcbiAgZ2V0TGV2ZWxDb2xvcjogamVzdC5mbigoKSA9PiAnIzAwN0FGRicpLFxyXG4gIGdldEdyYW1tYXJEYXRhOiBqZXN0LmZuKCgpID0+IChbeyB0aXRsZTogJ1J1bGUnLCBleGVyY2lzZXM6IFt7IHR5cGU6ICdmaWxsSW5UaGVCbGFuaycsIHF1ZXN0aW9uOiAnUT8nLCBvcHRpb25zOiBbJ2EnLCdiJ10sIGFuc3dlcjogJ2EnIH1dIH1dKSksXHJcbiAgbG9hZEdyYW1tYXJEYXRhOiBqZXN0LmZuKGFzeW5jICgpID0+IChbeyB0aXRsZTogJ1J1bGUnLCBleGVyY2lzZXM6IFt7IHR5cGU6ICdmaWxsSW5UaGVCbGFuaycsIHF1ZXN0aW9uOiAnUT8nLCBvcHRpb25zOiBbJ2EnLCdiJ10sIGFuc3dlcjogJ2EnIH1dIH1dKSksXHJcbn0pKTtcclxuXHJcbmplc3QubW9jaygnLi4vLi4vc3JjL3NjcmVlbnMvZXhlcmNpc2VzL2dyYW1tYXIvaG9va3MvdXNlR3JhbW1hcicsICgpID0+ICh7XHJcbiAgX19lc01vZHVsZTogdHJ1ZSxcclxuICBkZWZhdWx0OiBqZXN0LmZuKCgpID0+ICh7XHJcbiAgICBydWxlSW5kZXg6IDAsXHJcbiAgICBleGVyY2lzZUluZGV4OiAwLFxyXG4gICAgc2VsZWN0ZWRPcHRpb246IG51bGwsXHJcbiAgICBzZXRTZWxlY3RlZE9wdGlvbjogamVzdC5mbigpLFxyXG4gICAgaW5wdXRUZXh0OiAnJyxcclxuICAgIHNldElucHV0VGV4dDogamVzdC5mbigpLFxyXG4gICAgc2hvd0ZlZWRiYWNrOiBmYWxzZSxcclxuICAgIGlzQ29ycmVjdDogZmFsc2UsXHJcbiAgICBhdHRlbXB0czogMCxcclxuICAgIGNvbXBsZXRlZEV4ZXJjaXNlczoge30sXHJcbiAgICBsb2FkZWQ6IHRydWUsXHJcbiAgICBzaG93RGV0YWlsZWRQcm9ncmVzczogZmFsc2UsXHJcbiAgICBjdXJyZW50UnVsZTogeyB0aXRsZTogJ1J1bGUnIH0sXHJcbiAgICBjdXJyZW50RXhlcmNpc2U6IHsgdHlwZTogJ2ZpbGxJblRoZUJsYW5rJywgcXVlc3Rpb246ICdRPycsIG9wdGlvbnM6IFsnYScsJ2InXSwgYW5zd2VyOiAnYScgfSxcclxuICAgIGNhbkNoZWNrQW5zd2VyOiB0cnVlLFxyXG4gICAgaXNGaXJzdEV4ZXJjaXNlOiB0cnVlLFxyXG4gICAgaXNMYXN0RXhlcmNpc2U6IGZhbHNlLFxyXG4gICAgY2hhbmdlUnVsZTogamVzdC5mbigpLFxyXG4gICAgc3VibWl0QW5zd2VyOiBqZXN0LmZuKCksXHJcbiAgICBuZXh0RXhlcmNpc2U6IGplc3QuZm4oKSxcclxuICAgIHByZXZpb3VzRXhlcmNpc2U6IGplc3QuZm4oKSxcclxuICAgIHJldHJ5RXhlcmNpc2U6IGplc3QuZm4oKSxcclxuICAgIHRvZ2dsZURldGFpbGVkUHJvZ3Jlc3M6IGplc3QuZm4oKSxcclxuICB9KSksXHJcbn0pKTtcclxuXHJcbmRlc2NyaWJlKCdHcmFtbWFyRXhlcmNpc2UgYWNjZXNzaWJpbGl0eScsICgpID0+IHtcclxuICBpdCgnc2hvdWxkIHJlbmRlciBuYXZpZ2F0aW9uIGNoZWNrL25leHQgYnV0dG9ucyB3aXRoIHJvbGUgYnV0dG9uJywgKCkgPT4ge1xyXG4gICAgY29uc3QgcGFyYW1zID0geyBsZXZlbDogJ0ExJyB9O1xyXG4gICAgY29uc3QgeyBnZXRBbGxCeVJvbGUgfSA9IHJlbmRlcig8R3JhbW1hckV4ZXJjaXNlIHJvdXRlPXt7IHBhcmFtcyB9fSAvPik7XHJcbiAgICBjb25zdCBidXR0b25zID0gZ2V0QWxsQnlSb2xlKCdidXR0b24nKTtcclxuICAgIGV4cGVjdChidXR0b25zLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcblxyXG4iXSwibWFwcGluZ3MiOiJBQUlBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxhQUFhLEVBQUU7RUFBQSxPQUFPO0lBQUVDLE1BQU0sRUFBRTtNQUFFQyxJQUFJLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0lBQUUsQ0FBQztJQUFFQyxjQUFjLEVBQUVGLElBQUksQ0FBQ0MsRUFBRSxDQUFDLFlBQU0sQ0FBQyxDQUFDO0VBQUUsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUVwR0wsV0FBQSxHQUFLQyxJQUFJLENBQUMsMkNBQTJDLEVBQUU7RUFBQSxPQUFPO0lBQzVETSxhQUFhLEVBQUVILElBQUksQ0FBQ0MsRUFBRSxDQUFDO01BQUEsT0FBTSxTQUFTO0lBQUEsRUFBQztJQUN2Q0csY0FBYyxFQUFFSixJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFBLE9BQU8sQ0FBQztRQUFFSSxLQUFLLEVBQUUsTUFBTTtRQUFFQyxTQUFTLEVBQUUsQ0FBQztVQUFFQyxJQUFJLEVBQUUsZ0JBQWdCO1VBQUVDLFFBQVEsRUFBRSxJQUFJO1VBQUVDLE9BQU8sRUFBRSxDQUFDLEdBQUcsRUFBQyxHQUFHLENBQUM7VUFBRUMsTUFBTSxFQUFFO1FBQUksQ0FBQztNQUFFLENBQUMsQ0FBQztJQUFBLENBQUMsQ0FBQztJQUM5SUMsZUFBZSxFQUFFWCxJQUFJLENBQUNDLEVBQUUsS0FBQVcsa0JBQUEsQ0FBQUMsT0FBQSxFQUFDO01BQUEsT0FBYSxDQUFDO1FBQUVSLEtBQUssRUFBRSxNQUFNO1FBQUVDLFNBQVMsRUFBRSxDQUFDO1VBQUVDLElBQUksRUFBRSxnQkFBZ0I7VUFBRUMsUUFBUSxFQUFFLElB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