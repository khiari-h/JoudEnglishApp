5bd8f868cf067c315b5595155f9712e5
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    },
    useRoute: function useRoute() {
      return {
        params: {}
      };
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _layout = _interopRequireDefault(require("../../app/_layout"));
var _ProgressContext = require("../../src/contexts/ProgressContext");
var _AppProvider = require("../../src/contexts/AppProvider");
var _VocabularyContext = require("../../src/contexts/VocabularyContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Vocabulary Revision Integration Test', function () {
  it('should add words to revision list and allow revision', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AppProvider.AppProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsx)(_VocabularyContext.VocabularyProvider, {
            children: (0, _jsxRuntime.jsx)(_layout.default, {})
          })
        })
      })),
      getByText = _render.getByText,
      findByText = _render.findByText;
    _reactNative.fireEvent.press(getByText(/Révision du vocabulaire/i));
    var wordToRevise = yield findByText(/Mot à réviser/i);
    expect(wordToRevise).toBeTruthy();
    _reactNative.fireEvent.press(getByText(/Commencer la révision/i));
    _reactNative.fireEvent.press(getByText(/Je me souviens/i));
    yield (0, _reactNative.waitFor)(function () {
      expect(screen.queryByText(/Mot à réviser/i)).toBeNull();
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsInVzZU5hdmlnYXRpb24iLCJuYXZpZ2F0ZSIsImZuIiwiZ29CYWNrIiwidXNlUm91dGUiLCJwYXJhbXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9sYXlvdXQiLCJfUHJvZ3Jlc3NDb250ZXh0IiwiX0FwcFByb3ZpZGVyIiwiX1ZvY2FidWxhcnlDb250ZXh0IiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwiaXQiLCJkZWZhdWx0IiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsIkFwcFByb3ZpZGVyIiwiY2hpbGRyZW4iLCJQcm9ncmVzc1Byb3ZpZGVyIiwiVm9jYWJ1bGFyeVByb3ZpZGVyIiwiZ2V0QnlUZXh0IiwiZmluZEJ5VGV4dCIsImZpcmVFdmVudCIsInByZXNzIiwid29yZFRvUmV2aXNlIiwiZXhwZWN0IiwidG9CZVRydXRoeSIsIndhaXRGb3IiLCJzY3JlZW4iLCJxdWVyeUJ5VGV4dCIsInRvQmVOdWxsIl0sInNvdXJjZXMiOlsidm9jYWJ1bGFyeS1yZXZpc2lvbi50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IEFwcCBmcm9tICcuLi8uLi9hcHAvX2xheW91dCc7XG5pbXBvcnQgeyBQcm9ncmVzc1Byb3ZpZGVyIH0gZnJvbSAnLi4vLi4vc3JjL2NvbnRleHRzL1Byb2dyZXNzQ29udGV4dCc7XG5pbXBvcnQgeyBBcHBQcm92aWRlciB9IGZyb20gJy4uLy4uL3NyYy9jb250ZXh0cy9BcHBQcm92aWRlcic7XG5pbXBvcnQgeyBWb2NhYnVsYXJ5UHJvdmlkZXIgfSBmcm9tICcuLi8uLi9zcmMvY29udGV4dHMvVm9jYWJ1bGFyeUNvbnRleHQnO1xuXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+ICh7XG4gIC4uLmplc3QucmVxdWlyZUFjdHVhbCgnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJyksXG4gIHVzZU5hdmlnYXRpb246ICgpID0+ICh7XG4gICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcbiAgICBnb0JhY2s6IGplc3QuZm4oKSxcbiAgfSksXG4gIHVzZVJvdXRlOiAoKSA9PiAoe1xuICAgIHBhcmFtczoge30sXG4gIH0pLFxufSkpO1xuXG5kZXNjcmliZSgnVm9jYWJ1bGFyeSBSZXZpc2lvbiBJbnRlZ3JhdGlvbiBUZXN0JywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIGFkZCB3b3JkcyB0byByZXZpc2lvbiBsaXN0IGFuZCBhbGxvdyByZXZpc2lvbicsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCwgZmluZEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgPEFwcFByb3ZpZGVyPlxuICAgICAgICA8UHJvZ3Jlc3NQcm92aWRlcj5cbiAgICAgICAgICA8Vm9jYWJ1bGFyeVByb3ZpZGVyPlxuICAgICAgICAgICAgPEFwcCAvPlxuICAgICAgICAgIDwvVm9jYWJ1bGFyeVByb3ZpZGVyPlxuICAgICAgICA8L1Byb2dyZXNzUHJvdmlkZXI+XG4gICAgICA8L0FwcFByb3ZpZGVyPlxuICAgICk7XG5cbiAgICAvLyAxLiBTaW11bGVyIGxhIHLDqWFsaXNhdGlvbiBkJ3VuIGV4ZXJjaWNlIGRlIHZvY2FidWxhaXJlXG4gICAgLy8gKENldHRlIHBhcnRpZSBlc3QgdW5lIHNpbXBsaWZpY2F0aW9uLiBFbiByw6lhbGl0w6ksIHZvdXMgaW50ZXJhZ2lyaWV6IGF2ZWMgbCdleGVyY2ljZSlcbiAgICAvLyBTdXBwb3NvbnMgcXUnYXByw6hzIHVuIGV4ZXJjaWNlLCBkZXMgbW90cyBzb250IGFqb3V0w6lzIMOgIGxhIHLDqXZpc2lvbi5cblxuICAgIC8vIDIuIE5hdmlndWVyIHZlcnMgbCfDqWNyYW4gZGUgcsOpdmlzaW9uIGR1IHZvY2FidWxhaXJlXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgvUsOpdmlzaW9uIGR1IHZvY2FidWxhaXJlL2kpKTtcblxuICAgIC8vIDMuIFbDqXJpZmllciBxdWUgbGVzIG1vdHMgw6AgcsOpdmlzZXIgc29udCBhZmZpY2jDqXNcbiAgICBjb25zdCB3b3JkVG9SZXZpc2UgPSBhd2FpdCBmaW5kQnlUZXh0KC9Nb3Qgw6AgcsOpdmlzZXIvaSk7IC8vIFJlbXBsYWNleiBwYXIgdW4gdnJhaSBtb3QgZGUgdm90cmUgZXhlcmNpY2VcbiAgICBleHBlY3Qod29yZFRvUmV2aXNlKS50b0JlVHJ1dGh5KCk7XG5cbiAgICAvLyA0LiBEw6ltYXJyZXIgdW5lIHNlc3Npb24gZGUgcsOpdmlzaW9uXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgvQ29tbWVuY2VyIGxhIHLDqXZpc2lvbi9pKSk7XG5cbiAgICAvLyA1LiBTaW11bGVyIGxhIHLDqXZpc2lvbiBkJ3VuIG1vdFxuICAgIC8vIChJbnRlcmFnaXNzZXogYXZlYyBsZXMgY29tcG9zYW50cyBkZSB2b3RyZSBzZXNzaW9uIGRlIHLDqXZpc2lvbilcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KC9KZSBtZSBzb3V2aWVucy9pKSk7XG5cbiAgICAvLyA2LiBWw6lyaWZpZXIgcXVlIGxlIG1vdCBhIMOpdMOpIHJldGlyw6kgZGUgbGEgbGlzdGUgZGUgcsOpdmlzaW9uIGltbcOpZGlhdGVcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChzY3JlZW4ucXVlcnlCeVRleHQoL01vdCDDoCByw6l2aXNlci9pKSkudG9CZU51bGwoKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBUUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDBCQUEwQixF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