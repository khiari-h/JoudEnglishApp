7d9083ec16080afc96aa2a2f89286eb8
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _NavigationButtons = _interopRequireDefault(require("../../../../components/exercise-common/NavigationButtons"));
var _style = _interopRequireDefault(require("./style"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
var GrammarNavigation = function GrammarNavigation(_ref) {
  var showFeedback = _ref.showFeedback,
    isCorrect = _ref.isCorrect,
    canCheckAnswer = _ref.canCheckAnswer,
    onCheckAnswer = _ref.onCheckAnswer,
    onPreviousExercise = _ref.onPreviousExercise,
    onNextExercise = _ref.onNextExercise,
    onRetryExercise = _ref.onRetryExercise,
    onSkipExercise = _ref.onSkipExercise,
    isFirstExercise = _ref.isFirstExercise,
    isLastExercise = _ref.isLastExercise,
    _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? "#3b82f6" : _ref$levelColor;
  if (!showFeedback) {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.container,
      children: (0, _jsxRuntime.jsx)(_NavigationButtons.default, {
        onNext: onCheckAnswer,
        disableNext: !canCheckAnswer,
        disablePrevious: true,
        showSkip: false,
        currentIndex: 0,
        totalCount: 1,
        primaryColor: levelColor,
        buttonLabels: {
          next: "Check Answer",
          previous: "",
          skip: "",
          finish: ""
        },
        variant: "centered"
      })
    });
  }
  if (isCorrect) {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.container,
      children: (0, _jsxRuntime.jsx)(_NavigationButtons.default, {
        onNext: onNextExercise,
        onPrevious: onPreviousExercise,
        disablePrevious: isFirstExercise,
        disableNext: false,
        showSkip: false,
        currentIndex: isLastExercise ? 1 : 0,
        totalCount: 2,
        primaryColor: levelColor,
        buttonLabels: {
          next: isLastExercise ? "Finish" : "Next",
          previous: "Previous",
          skip: "",
          finish: "Finish"
        },
        variant: "standard"
      })
    });
  }
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: _style.default.container,
    children: (0, _jsxRuntime.jsx)(_NavigationButtons.default, {
      onNext: onSkipExercise,
      onPrevious: onRetryExercise,
      disablePrevious: false,
      disableNext: false,
      showSkip: false,
      currentIndex: 0,
      totalCount: 1,
      primaryColor: levelColor,
      buttonLabels: {
        next: "Skip",
        previous: "Try Again",
        skip: "",
        finish: ""
      },
      variant: "standard"
    })
  });
};
GrammarNavigation.propTypes = {
  showFeedback: _propTypes.default.bool.isRequired,
  isCorrect: _propTypes.default.bool.isRequired,
  canCheckAnswer: _propTypes.default.bool.isRequired,
  onCheckAnswer: _propTypes.default.func.isRequired,
  onPreviousExercise: _propTypes.default.func.isRequired,
  onNextExercise: _propTypes.default.func.isRequired,
  onRetryExercise: _propTypes.default.func.isRequired,
  onSkipExercise: _propTypes.default.func.isRequired,
  isFirstExercise: _propTypes.default.bool.isRequired,
  isLastExercise: _propTypes.default.bool.isRequired,
  levelColor: _propTypes.default.string
};
var _default = exports.default = GrammarNavigation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,