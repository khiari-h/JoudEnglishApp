b3ab41cfe5afc4250c39f2a3e3a356e6
_getJestObj().mock('@expo/vector-icons', function () {
  var _require = require('react-native'),
    Text = _require.Text;
  return {
    Ionicons: function Ionicons(props) {
      return (0, _jsxRuntime.jsx)(Text, {
        testID: `icon-${props.name}`,
        children: props.name
      });
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ExerciseFooter = _interopRequireDefault(require("../../../src/components/exercise-common/ExerciseFooter"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ExerciseFooter', function () {
  var onPrimaryPressMock = jest.fn();
  var onSecondaryPressMock = jest.fn();
  var onSkipMock = jest.fn();
  afterEach(function () {
    jest.clearAllMocks();
  });
  it('renders the primary button with default label "Continuer"', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFooter.default, {
        onPrimaryPress: function onPrimaryPress() {}
      })),
      getByText = _render.getByText;
    expect(getByText('Continuer')).toBeTruthy();
  });
  it('renders the primary button with label "Terminer" when isLastQuestion is true', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFooter.default, {
        onPrimaryPress: function onPrimaryPress() {},
        isLastQuestion: true
      })),
      getByText = _render2.getByText;
    expect(getByText('Terminer')).toBeTruthy();
  });
  it('renders the secondary button by default', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFooter.default, {
        onSecondaryPress: function onSecondaryPress() {}
      })),
      getByText = _render3.getByText;
    expect(getByText('Précédent')).toBeTruthy();
  });
  it('hides the secondary button when showSecondary is false', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFooter.default, {
        showSecondary: false
      })),
      queryByText = _render4.queryByText;
    expect(queryByText('Précédent')).toBeNull();
  });
  it('renders the skip button when onSkip is provided', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFooter.default, {
        onSkip: function onSkip() {}
      })),
      getByText = _render5.getByText;
    expect(getByText('Passer')).toBeTruthy();
  });
  it('hides the skip button when hideSkip is true', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFooter.default, {
        onSkip: function onSkip() {},
        hideSkip: true
      })),
      queryByText = _render6.queryByText;
    expect(queryByText('Passer')).toBeNull();
  });
  it('calls onPrimaryPress when the primary button is pressed', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFooter.default, {
        onPrimaryPress: onPrimaryPressMock
      })),
      getByText = _render7.getByText;
    _reactNative.fireEvent.press(getByText('Continuer'));
    expect(onPrimaryPressMock).toHaveBeenCalledTimes(1);
  });
  it('calls onSecondaryPress when the secondary button is pressed', function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFooter.default, {
        onSecondaryPress: onSecondaryPressMock
      })),
      getByText = _render8.getByText;
    _reactNative.fireEvent.press(getByText('Précédent'));
    expect(onSecondaryPressMock).toHaveBeenCalledTimes(1);
  });
  it('calls onSkip when the skip button is pressed', function () {
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFooter.default, {
        onSkip: onSkipMock
      })),
      getByText = _render9.getByText;
    _reactNative.fireEvent.press(getByText('Passer'));
    expect(onSkipMock).toHaveBeenCalledTimes(1);
  });
  it('disables the primary button when isDisabled is true', function () {
    var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFooter.default, {
        onPrimaryPress: onPrimaryPressMock,
        isDisabled: true
      })),
      getByText = _render0.getByText;
    var primaryButton = getByText('Continuer');
    _reactNative.fireEvent.press(primaryButton);
    expect(onPrimaryPressMock).not.toHaveBeenCalled();
    expect(primaryButton.props.accessibilityState.disabled).toBe(true);
  });
  it('shows a forward chevron icon by default in the primary button', function () {
    var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFooter.default, {})),
      getByTestId = _render1.getByTestId;
    expect(getByTestId('icon-chevron-forward')).toBeTruthy();
  });
  it('shows a checkmark icon when showCheck is true', function () {
    var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFooter.default, {
        showCheck: true
      })),
      getByTestId = _render10.getByTestId;
    expect(getByTestId('icon-checkmark')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,