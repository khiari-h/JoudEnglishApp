7c949186982dc4918b147e6cfc7590fe
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return require('@react-native-async-storage/async-storage/jest/async-storage-mock');
});
_getJestObj().mock('expo-font', function () {
  return {
    useFonts: function useFonts() {
      return [true];
    },
    isLoaded: function isLoaded() {
      return true;
    }
  };
});
_getJestObj().mock('expo-haptics', function () {
  return {
    impactAsync: jest.fn()
  };
});
_getJestObj().mock('react-native-reanimated', function () {
  var Reanimated = require('react-native-reanimated/mock');
  Reanimated.default.call = function () {};
  return Reanimated;
});
_getJestObj().mock('react-native/Libraries/Settings/Settings', function () {
  return {
    get: jest.fn(function () {
      return 'light';
    }),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn()
  };
});
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  RN.Animated = Object.assign({}, RN.Animated, {
    Value: jest.fn(function () {
      return {
        interpolate: jest.fn(function (config) {
          return config.outputRange[0];
        }),
        addListener: jest.fn(),
        removeListener: jest.fn(),
        removeAllListeners: jest.fn(),
        stopAnimation: jest.fn(),
        resetAnimation: jest.fn(),
        setValue: jest.fn()
      };
    }),
    timing: jest.fn(function () {
      return {
        start: jest.fn(function (callback) {
          if (callback) {
            callback({
              finished: true
            });
          }
        })
      };
    })
  });
  return RN;
});
var _reactNative = require("react-native");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
_reactNative.NativeModules.SettingsManager = _reactNative.NativeModules.SettingsManager || {
  settings: {
    AppleLocale: 'en_US'
  }
};
if (typeof setImmediate === 'undefined') {
  global.setImmediate = function (fn) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return setTimeout.apply(void 0, [fn, 0].concat(args));
  };
}
if (typeof clearImmediate === 'undefined') {
  global.clearImmediate = function (id) {
    return clearTimeout(id);
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJyZXF1aXJlIiwidXNlRm9udHMiLCJpc0xvYWRlZCIsImltcGFjdEFzeW5jIiwiamVzdCIsImZuIiwiUmVhbmltYXRlZCIsImRlZmF1bHQiLCJjYWxsIiwiZ2V0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJSTiIsInJlcXVpcmVBY3R1YWwiLCJBbmltYXRlZCIsIk9iamVjdCIsImFzc2lnbiIsIlZhbHVlIiwiaW50ZXJwb2xhdGUiLCJjb25maWciLCJvdXRwdXRSYW5nZSIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJzdG9wQW5pbWF0aW9uIiwicmVzZXRBbmltYXRpb24iLCJzZXRWYWx1ZSIsInRpbWluZyIsInN0YXJ0IiwiY2FsbGJhY2siLCJmaW5pc2hlZCIsIl9yZWFjdE5hdGl2ZSIsIl9yZXF1aXJlIiwiTmF0aXZlTW9kdWxlcyIsIlNldHRpbmdzTWFuYWdlciIsInNldHRpbmdzIiwiQXBwbGVMb2NhbGUiLCJzZXRJbW1lZGlhdGUiLCJnbG9iYWwiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsInNldFRpbWVvdXQiLCJhcHBseSIsImNvbmNhdCIsImNsZWFySW1tZWRpYXRlIiwiaWQiLCJjbGVhclRpbWVvdXQiXSwic291cmNlcyI6WyJqZXN0LnNldHVwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGplc3Quc2V0dXAuanNcblxuaW1wb3J0IHsgTmF0aXZlTW9kdWxlcyB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbi8vIE1vY2sgQXN5bmNTdG9yYWdlICh0csOocyB1dGlsaXPDqSBkYW5zIFJOKVxuamVzdC5tb2NrKCdAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZScsICgpID0+XG4gIHJlcXVpcmUoJ0ByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlL2plc3QvYXN5bmMtc3RvcmFnZS1tb2NrJylcbik7XG5cbi8vIE1vY2sgRXhwbyBmb250IChzaSB0dSB1dGlsaXNlcyBleHBvLWZvbnQsIHNpbm9uIHR1IHBldXggcmV0aXJlcilcbmplc3QubW9jaygnZXhwby1mb250JywgKCkgPT4gKHtcbiAgdXNlRm9udHM6ICgpID0+IFt0cnVlXSxcbiAgaXNMb2FkZWQ6ICgpID0+IHRydWUsXG59KSk7XG5cbi8vIE1vY2sgRXhwbyBoYXB0aWNzICh2aWJyYXRpb24pXG5qZXN0Lm1vY2soJ2V4cG8taGFwdGljcycsICgpID0+ICh7XG4gIGltcGFjdEFzeW5jOiBqZXN0LmZuKCksXG59KSk7XG5cbi8vIE1vY2sgcmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWQgcG91ciDDqXZpdGVyIGxlcyBlcnJldXJzIGRhbnMgbGVzIHRlc3RzXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS1yZWFuaW1hdGVkJywgKCkgPT4ge1xuICBjb25zdCBSZWFuaW1hdGVkID0gcmVxdWlyZSgncmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWQvbW9jaycpO1xuXG4gIC8vIFBhdGNoIHBvdXIgw6l2aXRlciBkZXMgZXJyZXVycyBzdXBwbMOpbWVudGFpcmVzXG4gIFJlYW5pbWF0ZWQuZGVmYXVsdC5jYWxsID0gKCkgPT4ge307XG5cbiAgcmV0dXJuIFJlYW5pbWF0ZWQ7XG59KTtcblxuLy8gTW9jayBkZXMgU2V0dGluZ3MgbmF0aXZlcyAocG91ciDDqXZpdGVyIGVycmV1cnMgVHVyYm9Nb2R1bGVSZWdpc3RyeSlcbmplc3QubW9jaygncmVhY3QtbmF0aXZlL0xpYnJhcmllcy9TZXR0aW5ncy9TZXR0aW5ncycsICgpID0+ICh7XG4gIGdldDogamVzdC5mbigoKSA9PiAnbGlnaHQnKSxcbiAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICByZW1vdmVFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXG59KSk7XG5cbi8vIE1vY2sgTmF0aXZlTW9kdWxlcy5TZXR0aW5nc01hbmFnZXIgKHNpbXVsZSBsb2NhbGUpXG5OYXRpdmVNb2R1bGVzLlNldHRpbmdzTWFuYWdlciA9IE5hdGl2ZU1vZHVsZXMuU2V0dGluZ3NNYW5hZ2VyIHx8IHtcbiAgc2V0dGluZ3M6IHsgQXBwbGVMb2NhbGU6ICdlbl9VUycgfSxcbn07XG5cbi8vIFBvbHlmaWxsIGdsb2JhbCBwb3VyIHNldEltbWVkaWF0ZSAvIGNsZWFySW1tZWRpYXRlIChwYXJmb2lzIG1hbnF1YW50KVxuaWYgKHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIGdsb2JhbC5zZXRJbW1lZGlhdGUgPSAoZm4sIC4uLmFyZ3MpID0+IHNldFRpbWVvdXQoZm4sIDAsIC4uLmFyZ3MpO1xufVxuaWYgKHR5cGVvZiBjbGVhckltbWVkaWF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgZ2xvYmFsLmNsZWFySW1tZWRpYXRlID0gKGlkKSA9PiBjbGVhclRpbWVvdXQoaWQpO1xufVxuXG4vLyBNb2NrIGNvbXBsZXQgZXQgcm9idXN0ZSBkdSBtb2R1bGUgQW5pbWF0ZWRcbmplc3QubW9jaygncmVhY3QtbmF0aXZlJywgKCkgPT4ge1xuICBjb25zdCBSTiA9IGplc3QucmVxdWlyZUFjdHVhbCgncmVhY3QtbmF0aXZlJyk7XG5cbiAgLy8gTW9jayBBbmltYXRlZFxuICBSTi5BbmltYXRlZCA9IHtcbiAgICAuLi5STi5BbmltYXRlZCxcbiAgICBWYWx1ZTogamVzdC5mbigoKSA9PiAoe1xuICAgICAgaW50ZXJwb2xhdGU6IGplc3QuZm4oY29uZmlnID0+IGNvbmZpZy5vdXRwdXRSYW5nZVswXSksXG4gICAgICBhZGRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgcmVtb3ZlTGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICAgIHJlbW92ZUFsbExpc3RlbmVyczogamVzdC5mbigpLFxuICAgICAgc3RvcEFuaW1hdGlvbjogamVzdC5mbigpLFxuICAgICAgcmVzZXRBbmltYXRpb246IGplc3QuZm4oKSxcbiAgICAgIHNldFZhbHVlOiBqZXN0LmZuKCksXG4gICAgfSkpLFxuICAgIHRpbWluZzogamVzdC5mbigoKSA9PiAoe1xuICAgICAgc3RhcnQ6IGplc3QuZm4oY2FsbGJhY2sgPT4ge1xuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICBjYWxsYmFjayh7IGZpbmlzaGVkOiB0cnVlIH0pO1xuICAgICAgICB9XG4gICAgICB9KSxcbiAgICB9KSksXG4gIH07XG5cbiAgcmV0dXJuIFJOO1xufSk7Il0sIm1hcHBpbmdzIjoiQUFLQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsMkNBQTJDLEVBQUU7RUFBQSxPQUNyREMsT0FBTyxDQUFDLG1FQUFtRSxDQUFDO0FBQUEsQ0FDOUUsQ0FBQztBQUdERixXQUFBLEdBQUtDLElBQUksQ0FBQyxXQUFXLEVBQUU7RUFBQSxPQUFPO0lBQzVCRSxRQUFRLEVBQUUsU0FBVkEsUUFBUUEsQ0FBQTtNQUFBLE9BQVEsQ0FBQyxJQUFJLENBQUM7SUFBQTtJQUN0QkMsUUFBUSxFQUFFLFNBQVZBLFFBQVFBLENBQUE7TUFBQSxPQUFRLElBQUk7SUFBQTtFQUN0QixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBR0hKLFdBQUEsR0FBS0MsSUFBSSxDQUFDLGNBQWMsRUFBRTtFQUFBLE9BQU87SUFDL0JJLFdBQVcsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUM7RUFDdkIsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUdIUCxXQUFBLEdBQUtDLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxZQUFNO0VBQ3pDLElBQU1PLFVBQVUsR0FBR04sT0FBTyxDQUFDLDhCQUE4QixDQUFDO0VBRzFETSxVQUFVLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxHQUFHLFlBQU0sQ0FBQyxDQUFDO0VBRWxDLE9BQU9GLFVBQVU7QUFDbkIsQ0FBQyxDQUFDO0FBR0ZSLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDBDQUEwQyxFQUFFO0VBQUEsT0FBTztJQUMzRFUsR0FBRyxFQUFFTCxJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFBLE9BQU0sT0FBTztJQUFB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