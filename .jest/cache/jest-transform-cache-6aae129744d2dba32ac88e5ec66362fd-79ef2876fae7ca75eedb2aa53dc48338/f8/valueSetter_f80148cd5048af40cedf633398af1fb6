819b9116f27ffe6691bfb1b279fed26b
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.valueSetter = void 0;
var _worklet_8078790339103_init_data = {
  code: "function valueSetter_valueSetterTs1(mutable,value,forceUpdate=false){const previousAnimation=mutable._animation;if(previousAnimation){previousAnimation.cancelled=true;mutable._animation=null;}if(typeof value==='function'||value!==null&&typeof value==='object'&&value.onFrame!==undefined){const animation=typeof value==='function'?value():value;if(mutable._value===animation.current&&!animation.isHigherOrder&&!forceUpdate){animation.callback&&animation.callback(true);return;}const initializeAnimation=function(timestamp){animation.onStart(animation,mutable.value,timestamp,previousAnimation);};const currentTimestamp=global.__frameTimestamp||global._getAnimationTimestamp();initializeAnimation(currentTimestamp);const step=function(newTimestamp){const timestamp=newTimestamp<(animation.timestamp||0)?animation.timestamp:newTimestamp;if(animation.cancelled){animation.callback&&animation.callback(false);return;}const finished=animation.onFrame(animation,timestamp);animation.finished=true;animation.timestamp=timestamp;mutable._value=animation.current;if(finished){animation.callback&&animation.callback(true);}else{requestAnimationFrame(step);}};mutable._animation=animation;step(currentTimestamp);}else{if(mutable._value===value&&!forceUpdate){return;}mutable._value=value;}}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\valueSetter.ts",
  sourceMap: "{\"version\":3,\"names\":[\"valueSetter_valueSetterTs1\",\"mutable\",\"value\",\"forceUpdate\",\"previousAnimation\",\"_animation\",\"cancelled\",\"onFrame\",\"undefined\",\"animation\",\"_value\",\"current\",\"isHigherOrder\",\"callback\",\"initializeAnimation\",\"timestamp\",\"onStart\",\"currentTimestamp\",\"global\",\"__frameTimestamp\",\"_getAnimationTimestamp\",\"step\",\"newTimestamp\",\"finished\",\"requestAnimationFrame\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/valueSetter.ts\"],\"mappings\":\"AAGO,SAAAA,0BAELA,CAAYC,OACZ,CAAAC,KAAW,CAAGC,WACR,QAEN,KAAM,CAAAC,iBAAiB,CAAGH,OAAO,CAACI,UAAU,CAC5C,GAAID,iBAAiB,CAAE,CACrBA,iBAAiB,CAACE,SAAS,CAAG,IAAI,CAClCL,OAAO,CAACI,UAAU,CAAG,IAAI,CAC3B,CACA,GACE,MAAO,CAAAH,KAAK,GAAK,UAAU,EAC1BA,KAAK,GAAK,IAAI,EACb,MAAO,CAAAA,KAAK,GAAK,QAAQ,EAExBA,KAAK,CAAgCK,OAAO,GAAKC,SAAU,CAC9D,CACA,KAAM,CAAAC,SAAiC,CACrC,MAAO,CAAAP,KAAK,GAAK,UAAU,CAEtBA,KAAK,CAAkC,CAAC,CAExCA,KAA2C,CAKlD,GACED,OAAO,CAACS,MAAM,GAAKD,SAAS,CAACE,OAAO,EACpC,CAACF,SAAS,CAACG,aAAa,EACxB,CAACT,WAAW,CACZ,CACAM,SAAS,CAACI,QAAQ,EAAIJ,SAAS,CAACI,QAAQ,CAAC,IAAI,CAAC,CAC9C,OACF,CAEA,KAAM,CAAAC,mBAAmB,CAAG,QAAAA,CAACC,SAAiB,CAAK,CACjDN,SAAS,CAACO,OAAO,CAACP,SAAS,CAAER,OAAO,CAACC,KAAK,CAAEa,SAAS,CAAEX,iBAAiB,CAAC,CAC3E,CAAC,CACD,KAAM,CAAAa,gBAAgB,CACpBC,MAAM,CAACC,gBAAgB,EAAID,MAAM,CAACE,sBAAsB,CAAC,CAAC,CAC5DN,mBAAmB,CAACG,gBAAgB,CAAC,CAErC,KAAM,CAAAI,IAAI,CAAG,QAAAA,CAACC,YAAoB,CAAK,CAKrC,KAAM,CAAAP,SAAS,CACbO,YAAY,EAAIb,SAAS,CAACM,SAAS,EAAI,CAAC,CAAC,CACrCN,SAAS,CAACM,SAAS,CACnBO,YAAY,CAElB,GAAIb,SAAS,CAACH,SAAS,CAAE,CACvBG,SAAS,CAACI,QAAQ,EAAIJ,SAAS,CAACI,QAAQ,CAAC,KAAoB,CAAC,CAC9D,OACF,CACA,KAAM,CAAAU,QAAQ,CAAGd,SAAS,CAACF,OAAO,CAACE,SAAS,CAAEM,SAAS,CAAC,CACxDN,SAAS,CAACc,QAAQ,CAAG,IAAI,CACzBd,SAAS,CAACM,SAAS,CAAGA,SAAS,CAI/Bd,OAAO,CAACS,MAAM,CAAGD,SAAS,CAACE,OAAQ,CACnC,GAAIY,QAAQ,CAAE,CACZd,SAAS,CAACI,QAAQ,EAAIJ,SAAS,CAACI,QAAQ,CAAC,IAAmB,CAAC,CAC/D,CAAC,IAAM,CACLW,qBAAqB,CAACH,IAAI,CAAC,CAC7B,CACF,CAAC,CAEDpB,OAAO,CAACI,UAAU,CAAGI,SAAS,CAE9BY,IAAI,CAACJ,gBAAgB,CAAC,CACxB,CAAC,IAAM,CAGL,GAAIhB,OAAO,CAACS,MAAM,GAAKR,KAAK,EAAI,CAACC,WAAW,CAAE,CAC5C,OACF,CACAF,OAAO,CAACS,MAAM,CAAGR,KAAK,CACxB,CACF\",\"ignoreList\":[]}",
  version: "3.16.7"
};
var valueSetter = exports.valueSetter = function () {
  var _e = [new global.Error(), 1, -27];
  var valueSetter = function valueSetter(mutable, value) {
    var forceUpdate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var previousAnimation = mutable._animation;
    if (previousAnimation) {
      previousAnimation.cancelled = true;
      mutable._animation = null;
    }
    if (typeof value === 'function' || value !== null && typeof value === 'object' && value.onFrame !== undefined) {
      var animation = typeof value === 'function' ? value() : value;
      if (mutable._value === animation.current && !animation.isHigherOrder && !forceUpdate) {
        animation.callback && animation.callback(true);
        return;
      }
      var initializeAnimation = function initializeAnimation(timestamp) {
        animation.onStart(animation, mutable.value, timestamp, previousAnimation);
      };
      var currentTimestamp = global.__frameTimestamp || global._getAnimationTimestamp();
      initializeAnimation(currentTimestamp);
      var _step = function step(newTimestamp) {
        var timestamp = newTimestamp < (animation.timestamp || 0) ? animation.timestamp : newTimestamp;
        if (animation.cancelled) {
          animation.callback && animation.callback(false);
          return;
        }
        var finished = animation.onFrame(animation, timestamp);
        animation.finished = true;
        animation.timestamp = timestamp;
        mutable._value = animation.current;
        if (finished) {
          animation.callback && animation.callback(true);
        } else {
          requestAnimationFrame(_step);
        }
      };
      mutable._animation = animation;
      _step(currentTimestamp);
    } else {
      if (mutable._value === value && !forceUpdate) {
        return;
      }
      mutable._value = value;
    }
  };
  valueSetter.__closure = {};
  valueSetter.__workletHash = 8078790339103;
  valueSetter.__initData = _worklet_8078790339103_init_data;
  valueSetter.__stackDetails = _e;
  return valueSetter;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,