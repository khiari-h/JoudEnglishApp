{"version":3,"names":["useState","useEffect","useCallback","useRef","AsyncStorage","useGameAnimation","shuffleArray","cov_2nxtry0bfv","s","useWordGames","wordGamesData","arguments","length","undefined","b","level","f","_ref","_ref2","_slicedToArray","currentGameIndex","setCurrentGameIndex","_ref3","_ref4","selectedItems","setSelectedItems","_ref5","_ref6","matchedItems","setMatchedItems","_ref7","_ref8","showFeedback","setShowFeedback","_ref9","_ref0","isCorrect","setIsCorrect","_ref1","_ref10","showResults","setShowResults","_ref11","_ref12","score","setScore","_ref13","_ref14","gameResults","setGameResults","_ref15","_ref16","shuffledOptions","setShuffledOptions","_ref17","_ref18","completedGames","setCompletedGames","_ref19","gameIndex","_ref20","lastPosition","setLastPosition","_ref21","_ref22","loaded","setLoaded","isInitialized","_ref23","fadeAnim","bounceAnim","games","currentGame","totalGames","STORAGE_KEY","COMPLETED_KEY","SCORES_KEY","loadData","_ref24","_asyncToGenerator","savedPosition","getItem","_ref25","JSON","parse","savedCompleted","Array","fill","maxScore","completed","error","apply","saveData","dataToSave","timestamp","Date","now","setItem","stringify","current","newCompletedGames","Object","assign","forEach","_","index","shuffleGameOptions","game","optionsToShuffle","type","allItems","pairs","flatMap","pair","word","match","_toConsumableArray","words","handleNext","prev","handlePrevious","resetGames","multiRemove","getStats","completedGamesCount","values","filter","totalMaxScore","reduce","sum","result","totalProgress","Math","round","currentProgress","percentage","getDisplayData","gameCounter","gameTitle","title","canGoToPrevious","isLastGame","stats","display"],"sources":["useWordGames.js"],"sourcesContent":["// hooks/useWordGames.js - HOOK UNIFI√â SIMPLE\r\nimport { useState, useEffect, useCallback, useRef } from 'react';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport useGameAnimation from './useGameAnimation';\r\nimport { shuffleArray } from '../../../../utils/arrayUtils';\r\n\r\n/**\r\n * üéØ Hook unifi√© pour Word Games\r\n * Remplace useWordGamesState + useWordGamesProgress\r\n * Simple, efficace, maintenable - pattern identique √† useVocabulary et useAssessment\r\n */\r\nconst useWordGames = (wordGamesData = null, level = \"A1\") => {\r\n  \r\n  // =================== CORE STATE ===================\r\n  const [currentGameIndex, setCurrentGameIndex] = useState(0);\r\n  const [selectedItems, setSelectedItems] = useState([]);\r\n  const [matchedItems, setMatchedItems] = useState([]);\r\n  const [showFeedback, setShowFeedback] = useState(false);\r\n  const [isCorrect, setIsCorrect] = useState(false);\r\n  const [showResults, setShowResults] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [gameResults, setGameResults] = useState([]);\r\n  const [shuffledOptions, setShuffledOptions] = useState([]);\r\n  const [completedGames, setCompletedGames] = useState({});\r\n  const [lastPosition, setLastPosition] = useState({ gameIndex: 0 });\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  // =================== REFS ===================\r\n  const isInitialized = useRef(false);\r\n\r\n  // =================== ANIMATIONS ===================\r\n  const { fadeAnim, bounceAnim } = useGameAnimation();\r\n\r\n  // =================== COMPUTED VALUES ===================\r\n  const games = wordGamesData?.games || [];\r\n  const currentGame = games[currentGameIndex] || null;\r\n  const totalGames = games.length;\r\n  \r\n  // =================== PERSISTENCE ===================\r\n  const STORAGE_KEY = `word_games_${level}`;\r\n  const COMPLETED_KEY = `word_games_completed_${level}`;\r\n  const SCORES_KEY = `word_games_scores_${level}`;\r\n\r\n  // Load data from storage\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      try {\r\n        // Charger position\r\n        const savedPosition = await AsyncStorage.getItem(STORAGE_KEY);\r\n        if (savedPosition) {\r\n          const { gameIndex } = JSON.parse(savedPosition);\r\n          setLastPosition({ gameIndex });\r\n        }\r\n\r\n        // Charger jeux compl√©t√©s\r\n        const savedCompleted = await AsyncStorage.getItem(COMPLETED_KEY);\r\n        if (savedCompleted) {\r\n          setCompletedGames(JSON.parse(savedCompleted));\r\n        }\r\n\r\n        // Initialiser gameResults selon le nombre de jeux\r\n        if (games.length > 0) {\r\n          setGameResults(Array(games.length).fill({\r\n            score: 0,\r\n            maxScore: 0,\r\n            completed: false,\r\n          }));\r\n        }\r\n      } catch (error) {\r\n        // Ignored on purpose\r\n      } finally {\r\n        setLoaded(true);\r\n      }\r\n    };\r\n    loadData();\r\n  }, [level, games.length]);\r\n\r\n  // Save data to storage\r\n  const saveData = useCallback(async () => {\r\n    try {\r\n      // Sauvegarder position\r\n      const dataToSave = {\r\n        gameIndex: currentGameIndex,\r\n        timestamp: Date.now()\r\n      };\r\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(dataToSave));\r\n\r\n      // Sauvegarder jeux compl√©t√©s\r\n      await AsyncStorage.setItem(COMPLETED_KEY, JSON.stringify(completedGames));\r\n    } catch (error) {\r\n      // Ignored on purpose\r\n    }\r\n  }, [currentGameIndex, completedGames, STORAGE_KEY, COMPLETED_KEY]);\r\n\r\n  // Auto-save when data changes\r\n  useEffect(() => {\r\n    if (loaded) saveData();\r\n  }, [saveData, loaded]);\r\n\r\n  // Initialize game setup\r\n  useEffect(() => {\r\n    if (loaded && games.length > 0 && !isInitialized.current) {\r\n      // Restaurer position ou commencer au d√©but\r\n      if (lastPosition && lastPosition.gameIndex < games.length) {\r\n        setCurrentGameIndex(lastPosition.gameIndex);\r\n      }\r\n      \r\n      // Initialiser progression si n√©cessaire\r\n      const newCompletedGames = { ...completedGames };\r\n      games.forEach((_, index) => {\r\n        if (!newCompletedGames[index]) {\r\n          newCompletedGames[index] = { completed: false };\r\n        }\r\n      });\r\n      setCompletedGames(newCompletedGames);\r\n      isInitialized.current = true;\r\n    }\r\n  }, [loaded, games, lastPosition, completedGames]);\r\n\r\n  // D√©claration des fonctions utilitaires avant leur utilisation\r\n  const shuffleGameOptions = (game) => {\r\n    let optionsToShuffle = [];\r\n\r\n    if (game.type === \"matching\") {\r\n      const allItems = game.pairs.flatMap((pair) => [pair.word, pair.match]);\r\n      optionsToShuffle = shuffleArray(allItems);\r\n    } else if (game.type === \"categorization\") {\r\n      optionsToShuffle = shuffleArray([...game.words]);\r\n    }\r\n\r\n    setShuffledOptions(optionsToShuffle);\r\n  };\r\n\r\n  // Setup current game\r\n  useEffect(() => {\r\n    if (currentGame) {\r\n      // R√©initialiser les √©tats pour le jeu actuel\r\n      setSelectedItems([]);\r\n      setMatchedItems([]);\r\n      setShowFeedback(false);\r\n      setIsCorrect(false);\r\n\r\n      // M√©langer les options selon le type de jeu\r\n      shuffleGameOptions(currentGame);\r\n    }\r\n  }, [currentGameIndex, currentGame]);\r\n\r\n  // =================== GAME LOGIC ===================\r\n  \r\n  // =================== MAIN NAVIGATION ===================\r\n  \r\n  const handleNext = useCallback(() => {\r\n    if (currentGameIndex < games.length - 1) {\r\n      setCurrentGameIndex(prev => prev + 1);\r\n      setShowFeedback(false);\r\n      setIsCorrect(false);\r\n      return { completed: false };\r\n    } else {\r\n      setShowResults(true);\r\n      return { completed: true };\r\n    }\r\n  }, [currentGameIndex, games.length]);\r\n\r\n  const handlePrevious = useCallback(() => {\r\n    if (currentGameIndex > 0) {\r\n      setCurrentGameIndex(prev => prev - 1);\r\n      setShowFeedback(false);\r\n      setIsCorrect(false);\r\n      return true;\r\n    }\r\n    return false;\r\n  }, [currentGameIndex]);\r\n\r\n  const resetGames = useCallback(async () => {\r\n    try {\r\n      await AsyncStorage.multiRemove([STORAGE_KEY, COMPLETED_KEY, SCORES_KEY]);\r\n      \r\n      setCurrentGameIndex(0);\r\n      setSelectedItems([]);\r\n      setMatchedItems([]);\r\n      setShowFeedback(false);\r\n      setIsCorrect(false);\r\n      setShowResults(false);\r\n      setScore(0);\r\n      setCompletedGames({});\r\n      setLastPosition({ gameIndex: 0 });\r\n      \r\n      if (games.length > 0) {\r\n        setGameResults(Array(games.length).fill({\r\n          score: 0,\r\n          maxScore: 0,\r\n          completed: false,\r\n        }));\r\n        shuffleGameOptions(games[0]);\r\n      }\r\n    } catch (error) {\r\n      // Ignored on purpose\r\n    }\r\n  }, [STORAGE_KEY, COMPLETED_KEY, SCORES_KEY, games]);\r\n\r\n  // =================== COMPUTED STATS ===================\r\n  \r\n  const getStats = useCallback(() => {\r\n    const completedGamesCount = Object.values(completedGames).filter(\r\n      game => game.completed\r\n    ).length;\r\n    \r\n    const totalMaxScore = gameResults.reduce((sum, result) => sum + result.maxScore, 0);\r\n    const totalProgress = totalGames > 0 ? Math.round((completedGamesCount / totalGames) * 100) : 0;\r\n    const currentProgress = totalGames > 0 ? ((currentGameIndex + 1) / totalGames) * 100 : 0;\r\n\r\n    return {\r\n      totalGames,\r\n      completedGamesCount,\r\n      totalProgress,\r\n      currentProgress,\r\n      score,\r\n      totalMaxScore,\r\n      percentage: totalMaxScore > 0 ? Math.round((score / totalMaxScore) * 100) : 0\r\n    };\r\n  }, [totalGames, completedGames, gameResults, currentGameIndex, score]);\r\n\r\n  // =================== COMPUTED DISPLAY ===================\r\n  \r\n  const getDisplayData = useCallback(() => {\r\n    const gameCounter = `${currentGameIndex + 1} / ${totalGames}`;\r\n    const gameTitle = currentGame?.title || `Game ${currentGameIndex + 1}`;\r\n\r\n    return {\r\n      gameCounter,\r\n      gameTitle,\r\n      currentGame,\r\n      currentGameIndex: currentGameIndex + 1\r\n    };\r\n  }, [currentGameIndex, totalGames, currentGame]);\r\n\r\n  // =================== VALIDATION ===================\r\n  \r\n  const canGoToPrevious = currentGameIndex > 0;\r\n  const isLastGame = currentGameIndex === totalGames - 1;\r\n\r\n  return {\r\n    // State\r\n    currentGameIndex,\r\n    selectedItems,\r\n    matchedItems,\r\n    showFeedback,\r\n    isCorrect,\r\n    showResults,\r\n    score,\r\n    gameResults,\r\n    shuffledOptions,\r\n    completedGames,\r\n    loaded,\r\n    \r\n    // Data\r\n    games,\r\n    currentGame,\r\n    totalGames,\r\n    \r\n    // Animations\r\n    fadeAnim,\r\n    bounceAnim,\r\n    \r\n    // Actions\r\n    handleNext,\r\n    handlePrevious,\r\n    resetGames,\r\n    setCurrentGameIndex,\r\n    \r\n    // Computed\r\n    canGoToPrevious,\r\n    isLastGame,\r\n    stats: getStats(),\r\n    display: getDisplayData(),\r\n  };\r\n};\r\n\r\nexport default useWordGames;"],"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","ignoreList":[]}