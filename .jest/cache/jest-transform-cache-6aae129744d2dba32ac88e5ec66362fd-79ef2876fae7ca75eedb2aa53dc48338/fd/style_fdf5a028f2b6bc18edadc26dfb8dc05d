4e79b6a5ce79d942e76aca24f811d22f
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
function cov_1gn90akcuf() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\components\\exercise-common\\NavigationButtons\\style.js";
  var hash = "da87ca71a326b0842628543cbdf897752f6ca6ff";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\components\\exercise-common\\NavigationButtons\\style.js",
    statementMap: {
      "0": {
        start: {
          line: 11,
          column: 21
        },
        end: {
          line: 103,
          column: 4
        }
      },
      "1": {
        start: {
          line: 12,
          column: 2
        },
        end: {
          line: 103,
          column: 4
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 21
          },
          end: {
            line: 11,
            column: 22
          }
        },
        loc: {
          start: {
            line: 12,
            column: 2
          },
          end: {
            line: 103,
            column: 4
          }
        },
        line: 12
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 11,
            column: 22
          },
          end: {
            line: 11,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 11,
            column: 37
          },
          end: {
            line: 11,
            column: 46
          }
        }],
        line: 11
      }
    },
    s: {
      "0": 0,
      "1": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "da87ca71a326b0842628543cbdf897752f6ca6ff"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_1gn90akcuf = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1gn90akcuf();
cov_1gn90akcuf().s[0]++;
var createStyles = function createStyles() {
  var primaryColor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (cov_1gn90akcuf().b[0][0]++, "#5E60CE");
  cov_1gn90akcuf().f[0]++;
  cov_1gn90akcuf().s[1]++;
  return _reactNative.StyleSheet.create({
    container: {
      marginHorizontal: 16,
      marginVertical: 16
    },
    buttonsRow: {
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'center',
      paddingHorizontal: 4
    },
    previousButton: Object.assign({
      flexDirection: 'row',
      alignItems: 'center',
      paddingVertical: 14,
      paddingHorizontal: 20,
      backgroundColor: 'white',
      borderRadius: 16,
      borderWidth: 1.5,
      borderColor: `${primaryColor}25`
    }, _reactNative.Platform.select({
      ios: {
        shadowColor: '#000',
        shadowOffset: {
          width: 0,
          height: 2
        },
        shadowOpacity: 0.08,
        shadowRadius: 8
      },
      android: {
        elevation: 3
      }
    })),
    previousText: {
      fontSize: 15,
      fontWeight: '600',
      letterSpacing: 0.2,
      marginLeft: 8
    },
    nextButtonContainer: Object.assign({
      borderRadius: 16,
      overflow: 'hidden'
    }, _reactNative.Platform.select({
      ios: {
        shadowColor: primaryColor,
        shadowOffset: {
          width: 0,
          height: 4
        },
        shadowOpacity: 0.2,
        shadowRadius: 12
      },
      android: {
        elevation: 6
      }
    })),
    nextButton: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'center',
      paddingVertical: 16,
      paddingHorizontal: 28,
      borderRadius: 16
    },
    nextText: {
      fontSize: 16,
      fontWeight: '700',
      color: 'white',
      letterSpacing: 0.3
    },
    nextIcon: {
      marginLeft: 8
    },
    disabled: {
      opacity: 0.6
    }
  });
};
var _default = exports.default = createStyles;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiY292XzFnbjkwYWtjdWYiLCJwYXRoIiwiaGFzaCIsImdsb2JhbCIsIkZ1bmN0aW9uIiwiZ2N2IiwiY292ZXJhZ2VEYXRhIiwic3RhdGVtZW50TWFwIiwic3RhcnQiLCJsaW5lIiwiY29sdW1uIiwiZW5kIiwiZm5NYXAiLCJuYW1lIiwiZGVjbCIsImxvYyIsImJyYW5jaE1hcCIsInR5cGUiLCJsb2NhdGlvbnMiLCJzIiwiZiIsImIiLCJfY292ZXJhZ2VTY2hlbWEiLCJjb3ZlcmFnZSIsImFjdHVhbENvdmVyYWdlIiwiY3JlYXRlU3R5bGVzIiwicHJpbWFyeUNvbG9yIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsImNvbnRhaW5lciIsIm1hcmdpbkhvcml6b250YWwiLCJtYXJnaW5WZXJ0aWNhbCIsImJ1dHRvbnNSb3ciLCJmbGV4RGlyZWN0aW9uIiwianVzdGlmeUNvbnRlbnQiLCJhbGlnbkl0ZW1zIiwicGFkZGluZ0hvcml6b250YWwiLCJwcmV2aW91c0J1dHRvbiIsIk9iamVjdCIsImFzc2lnbiIsInBhZGRpbmdWZXJ0aWNhbCIsImJhY2tncm91bmRDb2xvciIsImJvcmRlclJhZGl1cyIsImJvcmRlcldpZHRoIiwiYm9yZGVyQ29sb3IiLCJQbGF0Zm9ybSIsInNlbGVjdCIsImlvcyIsInNoYWRvd0NvbG9yIiwic2hhZG93T2Zmc2V0Iiwid2lkdGgiLCJoZWlnaHQiLCJzaGFkb3dPcGFjaXR5Iiwic2hhZG93UmFkaXVzIiwiYW5kcm9pZCIsImVsZXZhdGlvbiIsInByZXZpb3VzVGV4dCIsImZvbnRTaXplIiwiZm9udFdlaWdodCIsImxldHRlclNwYWNpbmciLCJtYXJnaW5MZWZ0IiwibmV4dEJ1dHRvbkNvbnRhaW5lciIsIm92ZXJmbG93IiwibmV4dEJ1dHRvbiIsIm5leHRUZXh0IiwiY29sb3IiLCJuZXh0SWNvbiIsImRpc2FibGVkIiwib3BhY2l0eSIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlcyI6WyJzdHlsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBOYXZpZ2F0aW9uQnV0dG9ucy9zdHlsZS5qcyAtIFBST1BSRSAmIEVGRklDQUNFIPCfjq9cblxuaW1wb3J0IHsgU3R5bGVTaGVldCwgUGxhdGZvcm0gfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuXG4vKipcbiAqIPCfjq8gU3R5bGVzIE5hdmlnYXRpb24gLSBTaW1wbGUgbWFpcyBsw6ljaMOpXG4gKiAtIFBhcyBkZSBkw6lsaXJlIGdsYXNzbW9ycGhpc20gXG4gKiAtIEp1c3RlIHByb3ByZSBldCBtb2Rlcm5lXG4gKiAtIENvaMOpcmVudCBhdmVjIGxlcyBjYXJ0ZXMgZXhpc3RhbnRlc1xuICovXG5jb25zdCBjcmVhdGVTdHlsZXMgPSAocHJpbWFyeUNvbG9yID0gXCIjNUU2MENFXCIpID0+XG4gIFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgICBcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09IENPTlRBSU5FUiBTSU1QTEUgPT09PT09PT09PT09PT09PT09PVxuICAgIGNvbnRhaW5lcjoge1xuICAgICAgbWFyZ2luSG9yaXpvbnRhbDogMTYsXG4gICAgICBtYXJnaW5WZXJ0aWNhbDogMTYsXG4gICAgfSxcblxuICAgIC8vID09PT09PT09PT09PT09PT09PT0gUk9XIEJPVVRPTlMgPT09PT09PT09PT09PT09PT09PVxuICAgIGJ1dHRvbnNSb3c6IHtcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgcGFkZGluZ0hvcml6b250YWw6IDQsIC8vIFBldGl0IHBhZGRpbmcgcG91ciDDqXZpdGVyIGxlcyBib3Jkc1xuICAgIH0sXG5cbiAgICAvLyA9PT09PT09PT09PT09PT09PT09IEJPVVRPTiBQUsOJQ8OJREVOVCAtIEdIT1NUIFBST1BSRSA9PT09PT09PT09PT09PT09PT09XG4gICAgcHJldmlvdXNCdXR0b246IHtcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICBwYWRkaW5nVmVydGljYWw6IDE0LFxuICAgICAgcGFkZGluZ0hvcml6b250YWw6IDIwLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuICAgICAgYm9yZGVyUmFkaXVzOiAxNixcbiAgICAgIGJvcmRlcldpZHRoOiAxLjUsXG4gICAgICBib3JkZXJDb2xvcjogYCR7cHJpbWFyeUNvbG9yfTI1YCxcbiAgICAgIFxuICAgICAgLy8gT21icmUgc3VidGlsZSBtYWlzIHByw6lzZW50ZVxuICAgICAgLi4uUGxhdGZvcm0uc2VsZWN0KHtcbiAgICAgICAgaW9zOiB7XG4gICAgICAgICAgc2hhZG93Q29sb3I6ICcjMDAwJyxcbiAgICAgICAgICBzaGFkb3dPZmZzZXQ6IHsgd2lkdGg6IDAsIGhlaWdodDogMiB9LFxuICAgICAgICAgIHNoYWRvd09wYWNpdHk6IDAuMDgsXG4gICAgICAgICAgc2hhZG93UmFkaXVzOiA4LFxuICAgICAgICB9LFxuICAgICAgICBhbmRyb2lkOiB7XG4gICAgICAgICAgZWxldmF0aW9uOiAzLFxuICAgICAgICB9LFxuICAgICAgfSksXG4gICAgfSxcblxuICAgIHByZXZpb3VzVGV4dDoge1xuICAgICAgZm9udFNpemU6IDE1LFxuICAgICAgZm9udFdlaWdodDogJzYwMCcsXG4gICAgICBsZXR0ZXJTcGFjaW5nOiAwLjIsXG4gICAgICBtYXJnaW5MZWZ0OiA4LFxuICAgIH0sXG5cbiAgICAvLyA9PT09PT09PT09PT09PT09PT09IEJPVVRPTiBTVUlWQU5UIC0gR1JBRElFTlQgUFJPUFJFID09PT09PT09PT09PT09PT09PT1cbiAgICBuZXh0QnV0dG9uQ29udGFpbmVyOiB7XG4gICAgICBib3JkZXJSYWRpdXM6IDE2LFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgXG4gICAgICAvLyBPbWJyZSBjb2xvcsOpZSBwb3VyIGxlIENUQVxuICAgICAgLi4uUGxhdGZvcm0uc2VsZWN0KHtcbiAgICAgICAgaW9zOiB7XG4gICAgICAgICAgc2hhZG93Q29sb3I6IHByaW1hcnlDb2xvcixcbiAgICAgICAgICBzaGFkb3dPZmZzZXQ6IHsgd2lkdGg6IDAsIGhlaWdodDogNCB9LFxuICAgICAgICAgIHNoYWRvd09wYWNpdHk6IDAuMixcbiAgICAgICAgICBzaGFkb3dSYWRpdXM6IDEyLFxuICAgICAgICB9LFxuICAgICAgICBhbmRyb2lkOiB7XG4gICAgICAgICAgZWxldmF0aW9uOiA2LFxuICAgICAgICB9LFxuICAgICAgfSksXG4gICAgfSxcblxuICAgIG5leHRCdXR0b246IHtcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICBwYWRkaW5nVmVydGljYWw6IDE2LFxuICAgICAgcGFkZGluZ0hvcml6b250YWw6IDI4LFxuICAgICAgYm9yZGVyUmFkaXVzOiAxNixcbiAgICB9LFxuXG4gICAgbmV4dFRleHQ6IHtcbiAgICAgIGZvbnRTaXplOiAxNixcbiAgICAgIGZvbnRXZWlnaHQ6ICc3MDAnLFxuICAgICAgY29sb3I6ICd3aGl0ZScsXG4gICAgICBsZXR0ZXJTcGFjaW5nOiAwLjMsXG4gICAgfSxcblxuICAgIG5leHRJY29uOiB7XG4gICAgICBtYXJnaW5MZWZ0OiA4LFxuICAgIH0sXG5cbiAgICAvLyA9PT09PT09PT09PT09PT09PT09IMOJVEFUUyBESVNBQkxFRCA9PT09PT09PT09PT09PT09PT09XG4gICAgZGlzYWJsZWQ6IHtcbiAgICAgIG9wYWNpdHk6IDAuNixcbiAgICB9LFxuICB9KTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3R5bGVzOyJdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLElBQUFBLFlBQUEsR0FBQUMsT0FBQTtBQUFvRCxTQUFBQyxlQUFBO0VBQUEsSUFBQUMsSUFBQTtFQUFBLElBQUFDLElBQUE7RUFBQSxJQUFBQyxNQUFBLE9BQUFDLFFBQUE7RUFBQSxJQUFBQyxHQUFBO0VBQUEsSUFBQUMsWUFBQTtJQUFBTCxJQUFBO0lBQUFNLFlBQUE7TUFBQTtRQUFBQyxLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO0lBQUE7SUFBQUUsS0FBQTtNQUFBO1FBQUFDLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtJQUFBO0lBQUFPLFNBQUE7TUFBQTtRQUFBRCxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7SUFBQTtJQUFBVSxDQUFBO01BQUE7TUFBQTtJQUFBO0lBQUFDLENBQUE7TUFBQTtJQUFBO0lBQUFDLENBQUE7TUFBQTtJQUFBO0lBQUFDLGVBQUE7SUFBQXBCLElBQUE7RUFBQTtFQUFBLElBQUFxQixRQUFBLEdBQUFwQixNQUFBLENBQUFFLEdBQUEsTUFBQUYsTUFBQSxDQUFBRSxHQUFBO0VBQUEsS0FBQWtCLFFBQUEsQ0FBQXRCLElBQUEsS0FBQXNCLFFBQUEsQ0FBQXRCLElBQUEsRUFBQUMsSUFBQSxLQUFBQSxJQUFBO0lBQUFxQixRQUFBLENBQUF0QixJQUFBLElBQUFLLFlBQUE7RUFBQTtFQUFBLElBQUFrQixjQUFBLEdBQUFELFFBQUEsQ0FBQXRCLElBQUE7RUFBQTtJQUFBRCxjQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBd0IsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQXhCLGNBQUE7QUFBQUEsY0FBQSxHQUFBbUIsQ0FBQTtBQVFwRCxJQUFNTSxZQUFZLEdBQUcsU0FBZkEsWUFBWUEsQ0FBQSxFQUNoQjtFQUFBLElBRG9CQyxZQUFZLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxPQUFBM0IsY0FBQSxHQUFBcUIsQ0FBQSxVQUFHLFNBQVM7RUFBQXJCLGNBQUEsR0FBQW9CLENBQUE7RUFBQXBCLGNBQUEsR0FBQW1CLENBQUE7RUFDNUMsT0FBQVcsdUJBQVUsQ0FBQ0MsTUFBTSxDQUFDO0lBR2hCQyxTQUFTLEVBQUU7TUFDVEMsZ0JBQWdCLEVBQUUsRUFBRTtNQUNwQkMsY0FBYyxFQUFFO0lBQ2xCLENBQUM7SUFHREMsVUFBVSxFQUFFO01BQ1ZDLGFBQWEsRUFBRSxLQUFLO01BQ3BCQyxjQUFjLEVBQUUsZUFBZTtNQUMvQkMsVUFBVSxFQUFFLFFBQVE7TUFDcEJDLGlCQUFpQixFQUFFO0lBQ3JCLENBQUM7SUFHREMsY0FBYyxFQUFBQyxNQUFBLENBQUFDLE1BQUE7TUFDWk4sYUFBYSxFQUFFLEtBQUs7TUFDcEJFLFVBQVUsRUFBRSxRQUFRO01BQ3BCSyxlQUFlLEVBQUUsRUFBRTtNQUNuQkosaUJBQWlCLEVBQUUsRUFBRTtNQUNyQkssZUFBZSxFQUFFLE9BQU87TUFDeEJDLFlBQVksRUFBRSxFQUFFO01BQ2hCQyxXQUFXLEVBQUUsR0FBRztNQUNoQkMsV0FBVyxFQUFFLEdBQUdyQixZQUFZO0lBQUksR0FHN0JzQixxQkFBUSxDQUFDQyxNQUFNLENBQUM7TUFDakJDLEdBQUcsRUFBRTtRQUNIQyxXQUFXLEVBQUUsTUFBTTtRQUNuQkMsWUFBWSxFQUFFO1VBQUVDLEtBQUssRUFBRSxDQUFDO1VBQUVDLE1BQU0sRUFBRTtRQUFFLENBQUM7UUFDckNDLGFBQWEsRUFBRSxJQUFJO1FBQ25CQyxZQUFZLEVBQUU7TUFDaEIsQ0FBQztNQUNEQyxPQUFPLEVBQUU7UUFDUEMsU0FBUyxFQUFFO01BQ2I7SUFDRixDQUFDLENBQUMsQ0FDSDtJQUVEQyxZQUFZLEVBQUU7TUFDWkMsUUFBUSxFQUFFLEVBQUU7TUFDWkMsVUFBVSxFQUFFLEtBQUs7TUFDakJDLGFBQWEsRUFBRSxHQUFHO01BQ2xCQyxVQUFVLEVBQUU7SUFDZCxDQUFDO0lBR0RDLG1CQUFtQixFQUFBdkIsTUFBQSxDQUFBQyxNQUFBO01BQ2pCRyxZQUFZLEVBQUUsRUFBRTtNQUNoQm9CLFFBQVEsRUFBRTtJQUFRLEdBR2ZqQixxQkFBUSxDQUFDQyxNQUFNLENBQUM7TUFDakJDLEdBQUcsRUFBRTtRQUNIQyxXQUFXLEVBQUV6QixZQUFZO1FBQ3pCMEIsWUFBWSxFQUFFO1VBQUVDLEtBQUssRUFBRSxDQUFDO1VBQUVDLE1BQU0sRUFBRTtRQUFFLENBQUM7UUFDckNDLGFBQWEsRUFBRSxHQUFHO1FBQ2xCQyxZQUFZLEVBQUU7TUFDaEIsQ0FBQztNQUNEQyxPQUFPLEVBQUU7UUFDUEMsU0FBUyxFQUFFO01BQ2I7SUFDRixDQUFDLENBQUMsQ0FDSDtJQUVEUSxVQUFVLEVBQUU7TUFDVjlCLGFBQWEsRUFBRSxLQUFLO01BQ3BCRSxVQUFVLEVBQUUsUUFBUTtNQUNwQkQsY0FBYyxFQUFFLFFBQVE7TUFDeEJNLGVBQWUsRUFBRSxFQUFFO01BQ25CSixpQkFBaUIsRUFBRSxFQUFFO01BQ3JCTSxZQUFZLEVBQUU7SUFDaEIsQ0FBQztJQUVEc0IsUUFBUSxFQUFFO01BQ1JQLFFBQVEsRUFBRSxFQUFFO01BQ1pDLFVBQVUsRUFBRSxLQUFLO01BQ2pCTyxLQUFLLEVBQUUsT0FBTztNQUNkTixhQUFhLEVBQUU7SUFDakIsQ0FBQztJQUVETyxRQUFRLEVBQUU7TUFDUk4sVUFBVSxFQUFFO0lBQ2QsQ0FBQztJQUdETyxRQUFRLEVBQUU7TUFDUkMsT0FBTyxFQUFFO0lBQ1g7RUFDRixDQUFDLENBQUM7QUFBRCxDQUFDO0FBQUMsSUFBQUMsUUFBQSxHQUFBQyxPQUFBLENBQUFDLE9BQUEsR0FFVWpELFlBQVkiLCJpZ25vcmVMaXN0IjpbXX0=