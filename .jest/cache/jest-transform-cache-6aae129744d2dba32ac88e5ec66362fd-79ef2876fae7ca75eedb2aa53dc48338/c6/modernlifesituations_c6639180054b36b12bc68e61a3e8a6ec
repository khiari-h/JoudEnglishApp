909ab483de8f20be29b0d29e8037d38c
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function cov_2455n8z4bm() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\data\\phrases\\bonus\\categories\\modern-life-situations.js";
  var hash = "957d1c58a495b0497e202c14178c266fbb345e19";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\data\\phrases\\bonus\\categories\\modern-life-situations.js",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 29
        },
        end: {
          line: 124,
          column: 1
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "957d1c58a495b0497e202c14178c266fbb345e19"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_2455n8z4bm = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2455n8z4bm();
var modernLifeSituations = (cov_2455n8z4bm().s[0]++, [{
  categoryId: 63,
  english: "I'm drowning in notifications, I seriously need a digital detox.",
  translation: "Je me noie dans les notifications, j'ai sérieusement besoin d'une détox numérique.",
  context: "Pour exprimer une surcharge numérique et le besoin de se déconnecter de la technologie.",
  examples: [{
    english: "Between work emails and social media, I'm drowning in notifications. I seriously need a digital detox or I'll lose my mind.",
    translation: "Entre les emails du travail et les réseaux sociaux, je me noie dans les notifications. J'ai sérieusement besoin d'une détox numérique ou je vais perdre la tête."
  }]
}, {
  categoryId: 63,
  english: "Seeing everyone's posts is giving me serious FOMO. Adulting is expensive.",
  translation: "Voir les posts de tout le monde me donne une grosse FOMO. La vie d'adulte coûte cher.",
  context: "Pour exprimer la 'peur de rater quelque chose' (FOMO) causée par les réseaux sociaux, souvent liée à des contraintes financières.",
  examples: [{
    english: "Everyone's posting about their fancy vacations, giving me serious FOMO. I'd love to travel, but adulting is so expensive.",
    translation: "Tout le monde poste sur leurs vacances de luxe, ce qui me donne une grosse FOMO. J'adorerais voyager, mais la vie d'adulte coûte si cher."
  }]
}, {
  categoryId: 63,
  english: "The boundaries between work and life have completely disappeared.",
  translation: "Les frontières entre le travail et la vie privée ont complètement disparu.",
  context: "Pour décrire la difficulté à séparer vie professionnelle et vie privée en télétravail, menant à l'épuisement ('burn out').",
  examples: [{
    english: "The whole work-from-home thing was great at first, but now I'm going stir-crazy. The boundaries between work and life have completely disappeared.",
    translation: "Le télétravail était génial au début, mais maintenant je deviens fou à rester enfermé. Les frontières entre le travail et la vie privée ont complètement disparu."
  }]
}, {
  categoryId: 63,
  english: "I'm too invested now, just one more episode.",
  translation: "Je suis trop investi(e) maintenant, juste un épisode de plus.",
  context: "L'excuse classique pour continuer à regarder une série en boucle ('binge-watching') malgré la fatigue ou d'autres obligations.",
  examples: [{
    english: "I've been binge-watching this series for hours and I know I should sleep, but I'm too invested now. Just one more episode!",
    translation: "Je regarde cette série en boucle depuis des heures et je sais que je devrais dormir, mais je suis trop investi maintenant. Juste un épisode de plus !"
  }]
}, {
  categoryId: 63,
  english: "The gig economy is liberating, but the uncertainty is stressful.",
  translation: "L'économie des petits boulots est libératrice, mais l'incertitude est stressante.",
  context: "Pour exprimer l'ambivalence de l'économie des petits boulots : la liberté contre le manque de stabilité.",
  examples: [{
    english: "I love the flexibility of freelancing, but I hate not having a stable income. The gig economy is liberating, but the uncertainty is stressful.",
    translation: "J'aime la flexibilité du freelance, mais je déteste ne pas avoir de revenu stable. L'économie des petits boulots est libératrice, mais l'incertitude est stressante."
  }]
}, {
  categoryId: 63,
  english: "The algorithm knows exactly how to hook me, and I fall for it every time.",
  translation: "L'algorithme sait exactement comment m'hameçonner, et je tombe dans le panneau à chaque fois.",
  context: "Pour décrire la difficulté à résister aux algorithmes des réseaux sociaux ou des plateformes de contenu conçus pour capter l'attention.",
  examples: [{
    english: "I'm trying to be more mindful about my screen time, but the algorithm knows exactly how to hook me with new videos, and I fall for it every time.",
    translation: "J'essaie d'être plus attentif à mon temps d'écran, mais l'algorithme sait exactement comment m'hameçonner avec de nouvelles vidéos, et je tombe dans le panneau à chaque fois."
  }]
}, {
  categoryId: 63,
  english: "Everything is so expensive, I'm barely making ends meet.",
  translation: "Tout est si cher, j'arrive à peine à joindre les deux bouts.",
  context: "Pour exprimer le stress financier dû à l'inflation, quand les prix augmentent mais pas les salaires.",
  examples: [{
    english: "Rent keeps going up but my salary stays the same. Everything is so expensive, I'm barely making ends meet.",
    translation: "Le loyer continue d'augmenter mais mon salaire reste le même. Tout est si cher, j'arrive à peine à joindre les deux bouts."
  }]
}, {
  categoryId: 63,
  english: "I'm so tired of hustle culture.",
  translation: "Je suis tellement fatigué(e) de la 'hustle culture'.",
  context: "Pour critiquer la culture de la surperformance et de la productivité à tout prix, souvent pour l'image sur les réseaux sociaux.",
  examples: [{
    english: "I'm so tired of hustle culture. Everyone's competing to look the busiest and it's exhausting. Whatever happened to just enjoying life?",
    translation: "Je suis tellement fatigué de la 'hustle culture'. Tout le monde est en compétition pour avoir l'air le plus occupé et c'est épuisant. Qu'est-il arrivé au simple fait de profiter de la vie ?"
  }]
}, {
  categoryId: 63,
  english: "Dating apps are a nightmare; everyone treats relationships like they're disposable.",
  translation: "Les applis de rencontre sont un cauchemar ; tout le monde traite les relations comme si elles étaient jetables.",
  context: "Pour exprimer sa frustration face à la superficialité et au manque d'engagement sur les applications de rencontre modernes.",
  examples: [{
    english: "Everyone's either ghosting or just looking for hookups. Dating apps are a nightmare; everyone treats relationships like they're disposable.",
    translation: "Tout le monde fait du 'ghosting' ou cherche juste des coups d'un soir. Les applis de rencontre sont un cauchemar ; tout le monde traite les relations comme si elles étaient jetables."
  }]
}, {
  categoryId: 63,
  english: "What's the point of... when the world is burning?",
  translation: "Quel est l'intérêt de... pendant que le monde brûle ?",
  context: "Pour exprimer une anxiété existentielle face aux crises mondiales (climatique, politique, etc.), remettant en question le sens des actions quotidiennes.",
  examples: [{
    english: "I'm having an existential crisis about my career. What's the point of climbing the corporate ladder when the world is burning?",
    translation: "Je fais une crise existentielle à propos de ma carrière. Quel est l'intérêt de gravir les échelons de l'entreprise pendant que le monde brûle ?"
  }]
}]);
var _default = exports.default = modernLifeSituations;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,