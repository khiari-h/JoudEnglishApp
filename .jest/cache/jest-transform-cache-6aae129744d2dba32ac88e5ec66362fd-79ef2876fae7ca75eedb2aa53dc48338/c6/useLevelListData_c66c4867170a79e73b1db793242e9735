806121b76f74940e6f8bb960c53410c0
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useLevelListData;
var _react = require("react");
var _constants = require("../../../utils/constants");
function useLevelListData(_ref) {
  var getLevelProgress = _ref.getLevelProgress,
    hasProgress = _ref.hasProgress;
  var currentUserLevel = (0, _react.useMemo)(function () {
    for (var i = 1; i <= 6; i++) {
      if (getLevelProgress(i.toString()) === 0) {
        return i;
      }
    }
    return 6;
  }, [getLevelProgress]);
  var currentLevelData = _constants.LANGUAGE_LEVELS[currentUserLevel];
  var levels = (0, _react.useMemo)(function () {
    return _constants.LEVELS_LIST.map(function (levelKey) {
      var levelInfo = _constants.LANGUAGE_LEVELS[levelKey];
      var progress = getLevelProgress(levelKey);
      var started = hasProgress("vocabulary", levelKey) || hasProgress("phrases", levelKey) || hasProgress("grammar", levelKey) || hasProgress("reading", levelKey) || hasProgress("conversations", levelKey) || hasProgress("errorCorrection", levelKey) || hasProgress("wordGames", levelKey) || hasProgress("assessment", levelKey);
      return {
        id: levelKey,
        title: levelInfo.title,
        progress: progress,
        color: levelInfo.color,
        icon: levelInfo.icon,
        hasProgress: progress > 0,
        hasStarted: started
      };
    });
  }, [getLevelProgress, hasProgress]);
  return {
    currentUserLevel: currentUserLevel,
    currentLevelData: currentLevelData,
    levels: levels
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX2NvbnN0YW50cyIsInVzZUxldmVsTGlzdERhdGEiLCJfcmVmIiwiZ2V0TGV2ZWxQcm9ncmVzcyIsImhhc1Byb2dyZXNzIiwiY3VycmVudFVzZXJMZXZlbCIsInVzZU1lbW8iLCJpIiwidG9TdHJpbmciLCJjdXJyZW50TGV2ZWxEYXRhIiwiTEFOR1VBR0VfTEVWRUxTIiwibGV2ZWxzIiwiTEVWRUxTX0xJU1QiLCJtYXAiLCJsZXZlbEtleSIsImxldmVsSW5mbyIsInByb2dyZXNzIiwic3RhcnRlZCIsImlkIiwidGl0bGUiLCJjb2xvciIsImljb24iLCJoYXNTdGFydGVkIl0sInNvdXJjZXMiOlsidXNlTGV2ZWxMaXN0RGF0YS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvc2NyZWVucy9MZXZlbFNlbGVjdGlvbi9ob29rcy91c2VMZXZlbExpc3REYXRhLmpzXHJcbmltcG9ydCB7IHVzZU1lbW8gfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgTEFOR1VBR0VfTEVWRUxTLCBMRVZFTFNfTElTVCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9jb25zdGFudHNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUxldmVsTGlzdERhdGEoeyBnZXRMZXZlbFByb2dyZXNzLCBoYXNQcm9ncmVzcyB9KSB7XHJcbiAgY29uc3QgY3VycmVudFVzZXJMZXZlbCA9IHVzZU1lbW8oKCkgPT4ge1xyXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gNjsgaSsrKSB7XHJcbiAgICAgIGlmIChnZXRMZXZlbFByb2dyZXNzKGkudG9TdHJpbmcoKSkgPT09IDApIHtcclxuICAgICAgICByZXR1cm4gaTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIDY7XHJcbiAgfSwgW2dldExldmVsUHJvZ3Jlc3NdKTtcclxuXHJcbiAgY29uc3QgY3VycmVudExldmVsRGF0YSA9IExBTkdVQUdFX0xFVkVMU1tjdXJyZW50VXNlckxldmVsXTtcclxuXHJcbiAgY29uc3QgbGV2ZWxzID0gdXNlTWVtbygoKSA9PiB7XHJcbiAgICByZXR1cm4gTEVWRUxTX0xJU1QubWFwKChsZXZlbEtleSkgPT4ge1xyXG4gICAgICBjb25zdCBsZXZlbEluZm8gPSBMQU5HVUFHRV9MRVZFTFNbbGV2ZWxLZXldO1xyXG4gICAgICBjb25zdCBwcm9ncmVzcyA9IGdldExldmVsUHJvZ3Jlc3MobGV2ZWxLZXkpO1xyXG5cclxuICAgICAgY29uc3Qgc3RhcnRlZCA9XHJcbiAgICAgICAgaGFzUHJvZ3Jlc3MoXCJ2b2NhYnVsYXJ5XCIsIGxldmVsS2V5KSB8fFxyXG4gICAgICAgIGhhc1Byb2dyZXNzKFwicGhyYXNlc1wiLCBsZXZlbEtleSkgfHxcclxuICAgICAgICBoYXNQcm9ncmVzcyhcImdyYW1tYXJcIiwgbGV2ZWxLZXkpIHx8XHJcbiAgICAgICAgaGFzUHJvZ3Jlc3MoXCJyZWFkaW5nXCIsIGxldmVsS2V5KSB8fFxyXG5cclxuICAgICAgICBoYXNQcm9ncmVzcyhcImNvbnZlcnNhdGlvbnNcIiwgbGV2ZWxLZXkpIHx8XHJcbiAgICAgICAgaGFzUHJvZ3Jlc3MoXCJlcnJvckNvcnJlY3Rpb25cIiwgbGV2ZWxLZXkpIHx8XHJcbiAgICAgICAgaGFzUHJvZ3Jlc3MoXCJ3b3JkR2FtZXNcIiwgbGV2ZWxLZXkpIHx8XHJcbiAgICAgICAgaGFzUHJvZ3Jlc3MoXCJhc3Nlc3NtZW50XCIsIGxldmVsS2V5KTtcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgaWQ6IGxldmVsS2V5LFxyXG4gICAgICAgIHRpdGxlOiBsZXZlbEluZm8udGl0bGUsXHJcbiAgICAgICAgcHJvZ3Jlc3MsXHJcbiAgICAgICAgY29sb3I6IGxldmVsSW5mby5jb2xvcixcclxuICAgICAgICBpY29uOiBsZXZlbEluZm8uaWNvbixcclxuICAgICAgICBoYXNQcm9ncmVzczogcHJvZ3Jlc3MgPiAwLFxyXG4gICAgICAgIGhhc1N0YXJ0ZWQ6IHN0YXJ0ZWQsXHJcbiAgICAgIH07XHJcbiAgICB9KTtcclxuICB9LCBbZ2V0TGV2ZWxQcm9ncmVzcywgaGFzUHJvZ3Jlc3NdKTtcclxuXHJcbiAgcmV0dXJuIHsgY3VycmVudFVzZXJMZXZlbCwgY3VycmVudExldmVsRGF0YSwgbGV2ZWxzIH07XHJcbn1cclxuXHJcblxyXG4iXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxJQUFBQSxNQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFELE9BQUE7QUFFZSxTQUFTRSxnQkFBZ0JBLENBQUFDLElBQUEsRUFBb0M7RUFBQSxJQUFqQ0MsZ0JBQWdCLEdBQUFELElBQUEsQ0FBaEJDLGdCQUFnQjtJQUFFQyxXQUFXLEdBQUFGLElBQUEsQ0FBWEUsV0FBVztFQUN0RSxJQUFNQyxnQkFBZ0IsR0FBRyxJQUFBQyxjQUFPLEVBQUMsWUFBTTtJQUNyQyxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsSUFBSSxDQUFDLEVBQUVBLENBQUMsRUFBRSxFQUFFO01BQzNCLElBQUlKLGdCQUFnQixDQUFDSSxDQUFDLENBQUNDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDeEMsT0FBT0QsQ0FBQztNQUNWO0lBQ0Y7SUFDQSxPQUFPLENBQUM7RUFDVixDQUFDLEVBQUUsQ0FBQ0osZ0JBQWdCLENBQUMsQ0FBQztFQUV0QixJQUFNTSxnQkFBZ0IsR0FBR0MsMEJBQWUsQ0FBQ0wsZ0JBQWdCLENBQUM7RUFFMUQsSUFBTU0sTUFBTSxHQUFHLElBQUFMLGNBQU8sRUFBQyxZQUFNO0lBQzNCLE9BQU9NLHNCQUFXLENBQUNDLEdBQUcsQ0FBQyxVQUFDQyxRQUFRLEVBQUs7TUFDbkMsSUFBTUMsU0FBUyxHQUFHTCwwQkFBZSxDQUFDSSxRQUFRLENBQUM7TUFDM0MsSUFBTUUsUUFBUSxHQUFHYixnQkFBZ0IsQ0FBQ1csUUFBUSxDQUFDO01BRTNDLElBQU1HLE9BQU8sR0FDWGIsV0FBVyxDQUFDLFlBQVksRUFBRVUsUUFBUSxDQUFDLElBQ25DVixXQUFXLENBQUMsU0FBUyxFQUFFVSxRQUFRLENBQUMsSUFDaENWLFdBQVcsQ0FBQyxTQUFTLEVBQUVVLFFBQVEsQ0FBQyxJQUNoQ1YsV0FBVyxDQUFDLFNBQVMsRUFBRVUsUUFBUSxDQUFDLElBRWhDVixXQUFXLENBQUMsZUFBZSxFQUFFVSxRQUFRLENBQUMsSUFDdENWLFdBQVcsQ0FBQyxpQkFBaUIsRUFBRVUsUUFBUSxDQUFDLElBQ3hDVixXQUFXLENBQUMsV0FBVyxFQUFFVSxRQUFRLENBQUMsSUFDbENWLFdBQVcsQ0FBQyxZQUFZLEVBQUVVLFFBQVEsQ0FBQztNQUVyQyxPQUFPO1FBQ0xJLEVBQUUsRUFBRUosUUFBUTtRQUNaSyxLQUFLLEVBQUVKLFNBQVMsQ0FBQ0ksS0FBSztRQUN0QkgsUUFBUSxFQUFSQSxRQUFRO1FBQ1JJLEtBQUssRUFBRUwsU0FBUyxDQUFDSyxLQUFLO1FBQ3RCQyxJQUFJLEVBQUVOLFNBQVMsQ0FBQ00sSUFBSTtRQUNwQmpCLFdBQVcsRUFBRVksUUFBUSxHQUFHLENBQUM7UUFDekJNLFVBQVUsRUFBRUw7TUFDZCxDQUFDO0lBQ0gsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxFQUFFLENBQUNkLGdCQUFnQixFQUFFQyxXQUFXLENBQUMsQ0FBQztFQUVuQyxPQUFPO0lBQUVDLGdCQUFnQixFQUFoQkEsZ0JBQWdCO0lBQUVJLGdCQUFnQixFQUFoQkEsZ0JBQWdCO0lBQUVFLE1BQU0sRUFBTkE7RUFBTyxDQUFDO0FBQ3ZEIiwiaWdub3JlTGlzdCI6W119