361a62c013a64713671f7901e9a38f63
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _style = _interopRequireDefault(require("./style"));
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
var ConversationSuggestions = function ConversationSuggestions(_ref) {
  var suggestions = _ref.suggestions,
    onPressSuggestion = _ref.onPressSuggestion,
    levelColor = _ref.levelColor;
  if (!suggestions || suggestions.length === 0) {
    return null;
  }
  var handleSuggestionPress = (0, _react.useCallback)(function (suggestion) {
    return function () {
      return onPressSuggestion(suggestion);
    };
  }, [onPressSuggestion]);
  return (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
    horizontal: true,
    showsHorizontalScrollIndicator: false,
    style: _style.default.container,
    contentContainerStyle: _style.default.contentContainer,
    children: suggestions.map(function (suggestion) {
      return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: [_style.default.suggestionBubble, {
          borderColor: levelColor
        }],
        onPress: handleSuggestionPress(suggestion),
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [_style.default.suggestionText, {
            color: levelColor
          }],
          children: suggestion
        })
      }, suggestion);
    })
  });
};
var _default = exports.default = ConversationSuggestions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX3N0eWxlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9yZWFjdCIsIl9qc3hSdW50aW1lIiwiQ29udmVyc2F0aW9uU3VnZ2VzdGlvbnMiLCJfcmVmIiwic3VnZ2VzdGlvbnMiLCJvblByZXNzU3VnZ2VzdGlvbiIsImxldmVsQ29sb3IiLCJsZW5ndGgiLCJoYW5kbGVTdWdnZXN0aW9uUHJlc3MiLCJ1c2VDYWxsYmFjayIsInN1Z2dlc3Rpb24iLCJqc3giLCJTY3JvbGxWaWV3IiwiaG9yaXpvbnRhbCIsInNob3dzSG9yaXpvbnRhbFNjcm9sbEluZGljYXRvciIsInN0eWxlIiwic3R5bGVzIiwiY29udGFpbmVyIiwiY29udGVudENvbnRhaW5lclN0eWxlIiwiY29udGVudENvbnRhaW5lciIsImNoaWxkcmVuIiwibWFwIiwiVG91Y2hhYmxlT3BhY2l0eSIsInN1Z2dlc3Rpb25CdWJibGUiLCJib3JkZXJDb2xvciIsIm9uUHJlc3MiLCJUZXh0Iiwic3VnZ2VzdGlvblRleHQiLCJjb2xvciIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTY3JvbGxWaWV3LCBUb3VjaGFibGVPcGFjaXR5LCBUZXh0IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcclxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlJztcclxuaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XHJcblxyXG4vKipcclxuICogQ29tcG9zYW50IHF1aSBhZmZpY2hlIGxlcyBzdWdnZXN0aW9ucyBkZSBtZXNzYWdlcyBxdWUgbCd1dGlsaXNhdGV1ciBwZXV0IGVudm95ZXJcclxuICogXHJcbiAqIEBwYXJhbSB7QXJyYXl9IHN1Z2dlc3Rpb25zIC0gTGlzdGUgZGVzIHN1Z2dlc3Rpb25zIMOgIGFmZmljaGVyXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9uUHJlc3NTdWdnZXN0aW9uIC0gRm9uY3Rpb24gw6AgYXBwZWxlciBxdWFuZCB1bmUgc3VnZ2VzdGlvbiBlc3QgY2hvaXNpZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbGV2ZWxDb2xvciAtIENvdWxldXIgYXNzb2Npw6llIGF1IG5pdmVhdSBjb3VyYW50XHJcbiAqL1xyXG5jb25zdCBDb252ZXJzYXRpb25TdWdnZXN0aW9ucyA9ICh7IHN1Z2dlc3Rpb25zLCBvblByZXNzU3VnZ2VzdGlvbiwgbGV2ZWxDb2xvciB9KSA9PiB7XHJcbiAgLy8gUydpbCBuJ3kgYSBwYXMgZGUgc3VnZ2VzdGlvbnMsIG5lIHJpZW4gYWZmaWNoZXJcclxuICBpZiAoIXN1Z2dlc3Rpb25zIHx8IHN1Z2dlc3Rpb25zLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICBjb25zdCBoYW5kbGVTdWdnZXN0aW9uUHJlc3MgPSB1c2VDYWxsYmFjaygoc3VnZ2VzdGlvbikgPT4gKCkgPT4gb25QcmVzc1N1Z2dlc3Rpb24oc3VnZ2VzdGlvbiksIFtvblByZXNzU3VnZ2VzdGlvbl0pO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPFNjcm9sbFZpZXdcclxuICAgICAgaG9yaXpvbnRhbFxyXG4gICAgICBzaG93c0hvcml6b250YWxTY3JvbGxJbmRpY2F0b3I9e2ZhbHNlfVxyXG4gICAgICBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn1cclxuICAgICAgY29udGVudENvbnRhaW5lclN0eWxlPXtzdHlsZXMuY29udGVudENvbnRhaW5lcn1cclxuICAgID5cclxuICAgICAge3N1Z2dlc3Rpb25zLm1hcCgoc3VnZ2VzdGlvbikgPT4gKFxyXG4gICAgICAgIDxUb3VjaGFibGVPcGFjaXR5XHJcbiAgICAgICAgICBrZXk9e3N1Z2dlc3Rpb259XHJcbiAgICAgICAgICBzdHlsZT17W3N0eWxlcy5zdWdnZXN0aW9uQnViYmxlLCB7IGJvcmRlckNvbG9yOiBsZXZlbENvbG9yIH1dfVxyXG4gICAgICAgICAgb25QcmVzcz17aGFuZGxlU3VnZ2VzdGlvblByZXNzKHN1Z2dlc3Rpb24pfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxUZXh0IHN0eWxlPXtbc3R5bGVzLnN1Z2dlc3Rpb25UZXh0LCB7IGNvbG9yOiBsZXZlbENvbG9yIH1dfT5cclxuICAgICAgICAgICAge3N1Z2dlc3Rpb259XHJcbiAgICAgICAgICA8L1RleHQ+XHJcbiAgICAgICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxyXG4gICAgICApKX1cclxuICAgIDwvU2Nyb2xsVmlldz5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29udmVyc2F0aW9uU3VnZ2VzdGlvbnM7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFBQSxZQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxNQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBRyxNQUFBLEdBQUFILE9BQUE7QUFBb0MsSUFBQUksV0FBQSxHQUFBSixPQUFBO0FBU3BDLElBQU1LLHVCQUF1QixHQUFHLFNBQTFCQSx1QkFBdUJBLENBQUFDLElBQUEsRUFBdUQ7RUFBQSxJQUFqREMsV0FBVyxHQUFBRCxJQUFBLENBQVhDLFdBQVc7SUFBRUMsaUJBQWlCLEdBQUFGLElBQUEsQ0FBakJFLGlCQUFpQjtJQUFFQyxVQUFVLEdBQUFILElBQUEsQ0FBVkcsVUFBVTtFQUUzRSxJQUFJLENBQUNGLFdBQVcsSUFBSUEsV0FBVyxDQUFDRyxNQUFNLEtBQUssQ0FBQyxFQUFFO0lBQzVDLE9BQU8sSUFBSTtFQUNiO0VBRUEsSUFBTUMscUJBQXFCLEdBQUcsSUFBQUMsa0JBQVcsRUFBQyxVQUFDQyxVQUFVO0lBQUEsT0FBSztNQUFBLE9BQU1MLGlCQUFpQixDQUFDSyxVQUFVLENBQUM7SUFBQTtFQUFBLEdBQUUsQ0FBQ0wsaUJBQWlCLENBQUMsQ0FBQztFQUVuSCxPQUNFLElBQUFKLFdBQUEsQ0FBQVUsR0FBQSxFQUFDZixZQUFBLENBQUFnQixVQUFVO0lBQ1RDLFVBQVU7SUFDVkMsOEJBQThCLEVBQUUsS0FBTTtJQUN0Q0MsS0FBSyxFQUFFQyxjQUFNLENBQUNDLFNBQVU7SUFDeEJDLHFCQUFxQixFQUFFRixjQUFNLENBQUNHLGdCQUFpQjtJQUFBQyxRQUFBLEVBRTlDaEIsV0FBVyxDQUFDaUIsR0FBRyxDQUFDLFVBQUNYLFVBQVU7TUFBQSxPQUMxQixJQUFBVCxXQUFBLENBQUFVLEdBQUEsRUFBQ2YsWUFBQSxDQUFBMEIsZ0JBQWdCO1FBRWZQLEtBQUssRUFBRSxDQUFDQyxjQUFNLENBQUNPLGdCQUFnQixFQUFFO1VBQUVDLFdBQVcsRUFBRWxCO1FBQVcsQ0FBQyxDQUFFO1FBQzlEbUIsT0FBTyxFQUFFakIscUJBQXFCLENBQUNFLFVBQVUsQ0FBRTtRQUFBVSxRQUFBLEVBRTNDLElBQUFuQixXQUFBLENBQUFVLEdBQUEsRUFBQ2YsWUFBQSxDQUFBOEIsSUFBSTtVQUFDWCxLQUFLLEVBQUUsQ0FBQ0MsY0FBTSxDQUFDVyxjQUFjLEVBQUU7WUFBRUMsS0FBSyxFQUFFdEI7VUFBVyxDQUFDLENBQUU7VUFBQWMsUUFBQSxFQUN6RFY7UUFBVSxDQUNQO01BQUMsR0FORkEsVUFPVyxDQUFDO0lBQUEsQ0FDcEI7RUFBQyxDQUNRLENBQUM7QUFFakIsQ0FBQztBQUFDLElBQUFtQixRQUFBLEdBQUFDLE9BQUEsQ0FBQUMsT0FBQSxHQUVhN0IsdUJBQXVCIiwiaWdub3JlTGlzdCI6W119