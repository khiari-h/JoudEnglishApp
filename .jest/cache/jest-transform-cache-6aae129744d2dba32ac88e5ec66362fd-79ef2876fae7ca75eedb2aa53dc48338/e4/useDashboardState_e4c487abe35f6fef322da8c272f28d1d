cb7fb2b1f0948854966715e412355c93
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDashboardState = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var useDashboardState = exports.useDashboardState = function useDashboardState(loadLastActivities) {
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    showLevelProgress = _useState2[0],
    setShowLevelProgress = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    refreshing = _useState4[0],
    setRefreshing = _useState4[1];
  var _useState5 = (0, _react.useState)("home"),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    activeTab = _useState6[0],
    setActiveTab = _useState6[1];
  var onRefresh = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    setRefreshing(true);
    try {
      yield loadLastActivities();
    } catch (error) {} finally {
      setRefreshing(false);
    }
  }), [loadLastActivities]);
  var openLevelProgressModal = (0, _react.useCallback)(function () {
    setShowLevelProgress(true);
  }, []);
  var closeLevelProgressModal = (0, _react.useCallback)(function () {
    setShowLevelProgress(false);
  }, []);
  return {
    showLevelProgress: showLevelProgress,
    setShowLevelProgress: setShowLevelProgress,
    openLevelProgressModal: openLevelProgressModal,
    closeLevelProgressModal: closeLevelProgressModal,
    refreshing: refreshing,
    activeTab: activeTab,
    setActiveTab: setActiveTab,
    onRefresh: onRefresh
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwidXNlRGFzaGJvYXJkU3RhdGUiLCJleHBvcnRzIiwibG9hZExhc3RBY3Rpdml0aWVzIiwiX3VzZVN0YXRlIiwidXNlU3RhdGUiLCJfdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkyIiwiZGVmYXVsdCIsInNob3dMZXZlbFByb2dyZXNzIiwic2V0U2hvd0xldmVsUHJvZ3Jlc3MiLCJfdXNlU3RhdGUzIiwiX3VzZVN0YXRlNCIsInJlZnJlc2hpbmciLCJzZXRSZWZyZXNoaW5nIiwiX3VzZVN0YXRlNSIsIl91c2VTdGF0ZTYiLCJhY3RpdmVUYWIiLCJzZXRBY3RpdmVUYWIiLCJvblJlZnJlc2giLCJ1c2VDYWxsYmFjayIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImVycm9yIiwib3BlbkxldmVsUHJvZ3Jlc3NNb2RhbCIsImNsb3NlTGV2ZWxQcm9ncmVzc01vZGFsIl0sInNvdXJjZXMiOlsidXNlRGFzaGJvYXJkU3RhdGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3NjcmVlbnMvRGFzaGJvYXJkL2hvb2tzL3VzZURhc2hib2FyZFN0YXRlLmpzXG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2sgfSBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGNvbnN0IHVzZURhc2hib2FyZFN0YXRlID0gKGxvYWRMYXN0QWN0aXZpdGllcykgPT4ge1xuICBjb25zdCBbc2hvd0xldmVsUHJvZ3Jlc3MsIHNldFNob3dMZXZlbFByb2dyZXNzXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3JlZnJlc2hpbmcsIHNldFJlZnJlc2hpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbYWN0aXZlVGFiLCBzZXRBY3RpdmVUYWJdID0gdXNlU3RhdGUoXCJob21lXCIpO1xuXG4gIC8vIEfDqXJlciBsZSBwdWxsLXRvLXJlZnJlc2ggb3B0aW1pc8OpXG4gIGNvbnN0IG9uUmVmcmVzaCA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBzZXRSZWZyZXNoaW5nKHRydWUpO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBsb2FkTGFzdEFjdGl2aXRpZXMoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gSWdub3JlZCBvbiBwdXJwb3NlXG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHNldFJlZnJlc2hpbmcoZmFsc2UpO1xuICAgIH1cbiAgfSwgW2xvYWRMYXN0QWN0aXZpdGllc10pO1xuXG4gIC8vIEdlc3Rpb25uYWlyZXMgcG91ciBsYSBtb2RhbCBkZSBwcm9ncmVzc2lvblxuICBjb25zdCBvcGVuTGV2ZWxQcm9ncmVzc01vZGFsID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldFNob3dMZXZlbFByb2dyZXNzKHRydWUpO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgY2xvc2VMZXZlbFByb2dyZXNzTW9kYWwgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0U2hvd0xldmVsUHJvZ3Jlc3MoZmFsc2UpO1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIHtcbiAgICBzaG93TGV2ZWxQcm9ncmVzcyxcbiAgICBzZXRTaG93TGV2ZWxQcm9ncmVzcyxcbiAgICBvcGVuTGV2ZWxQcm9ncmVzc01vZGFsLFxuICAgIGNsb3NlTGV2ZWxQcm9ncmVzc01vZGFsLFxuICAgIHJlZnJlc2hpbmcsXG4gICAgYWN0aXZlVGFiLFxuICAgIHNldEFjdGl2ZVRhYixcbiAgICBvblJlZnJlc2gsXG4gIH07XG59O1xuXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQSxJQUFBQSxNQUFBLEdBQUFDLE9BQUE7QUFFTyxJQUFNQyxpQkFBaUIsR0FBQUMsT0FBQSxDQUFBRCxpQkFBQSxHQUFHLFNBQXBCQSxpQkFBaUJBLENBQUlFLGtCQUFrQixFQUFLO0VBQ3ZELElBQUFDLFNBQUEsR0FBa0QsSUFBQUMsZUFBUSxFQUFDLEtBQUssQ0FBQztJQUFBQyxVQUFBLE9BQUFDLGVBQUEsQ0FBQUMsT0FBQSxFQUFBSixTQUFBO0lBQTFESyxpQkFBaUIsR0FBQUgsVUFBQTtJQUFFSSxvQkFBb0IsR0FBQUosVUFBQTtFQUM5QyxJQUFBSyxVQUFBLEdBQW9DLElBQUFOLGVBQVEsRUFBQyxLQUFLLENBQUM7SUFBQU8sVUFBQSxPQUFBTCxlQUFBLENBQUFDLE9BQUEsRUFBQUcsVUFBQTtJQUE1Q0UsVUFBVSxHQUFBRCxVQUFBO0lBQUVFLGFBQWEsR0FBQUYsVUFBQTtFQUNoQyxJQUFBRyxVQUFBLEdBQWtDLElBQUFWLGVBQVEsRUFBQyxNQUFNLENBQUM7SUFBQVcsVUFBQSxPQUFBVCxlQUFBLENBQUFDLE9BQUEsRUFBQU8sVUFBQTtJQUEzQ0UsU0FBUyxHQUFBRCxVQUFBO0lBQUVFLFlBQVksR0FBQUYsVUFBQTtFQUc5QixJQUFNRyxTQUFTLEdBQUcsSUFBQUMsa0JBQVcsTUFBQUMsa0JBQUEsQ0FBQWIsT0FBQSxFQUFDLGFBQVk7SUFDeENNLGFBQWEsQ0FBQyxJQUFJLENBQUM7SUFDbkIsSUFBSTtNQUNGLE1BQU1YLGtCQUFrQixDQUFDLENBQUM7SUFDNUIsQ0FBQyxDQUFDLE9BQU9tQixLQUFLLEVBQUUsQ0FFaEIsQ0FBQyxTQUFTO01BQ1JSLGFBQWEsQ0FBQyxLQUFLLENBQUM7SUFDdEI7RUFDRixDQUFDLEdBQUUsQ0FBQ1gsa0JBQWtCLENBQUMsQ0FBQztFQUd4QixJQUFNb0Isc0JBQXNCLEdBQUcsSUFBQUgsa0JBQVcsRUFBQyxZQUFNO0lBQy9DVixvQkFBb0IsQ0FBQyxJQUFJLENBQUM7RUFDNUIsQ0FBQyxFQUFFLEVBQUUsQ0FBQztFQUVOLElBQU1jLHVCQUF1QixHQUFHLElBQUFKLGtCQUFXLEVBQUMsWUFBTTtJQUNoRFYsb0JBQW9CLENBQUMsS0FBSyxDQUFDO0VBQzdCLENBQUMsRUFBRSxFQUFFLENBQUM7RUFFTixPQUFPO0lBQ0xELGlCQUFpQixFQUFqQkEsaUJBQWlCO0lBQ2pCQyxvQkFBb0IsRUFBcEJBLG9CQUFvQjtJQUNwQmEsc0JBQXNCLEVBQXRCQSxzQkFBc0I7SUFDdEJDLHVCQUF1QixFQUF2QkEsdUJBQXVCO0lBQ3ZCWCxVQUFVLEVBQVZBLFVBQVU7SUFDVkksU0FBUyxFQUFUQSxTQUFTO0lBQ1RDLFlBQVksRUFBWkEsWUFBWTtJQUNaQyxTQUFTLEVBQVRBO0VBQ0YsQ0FBQztBQUNILENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=