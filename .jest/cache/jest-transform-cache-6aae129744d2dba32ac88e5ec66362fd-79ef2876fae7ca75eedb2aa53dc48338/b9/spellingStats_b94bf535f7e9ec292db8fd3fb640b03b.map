{"version":3,"names":["calculateTotalExercises","exercises","arguments","length","undefined","cov_1m6ra7vo3e","b","f","s","calculateCompletedExercisesCount","completedExercises","calculateTotalProgress","totalExercises","totalCompleted","Math","min","round","calculateStatsByType","stats","correction","total","completed","progress","spelling_rule","homophones","forEach","exercise","index","type","includes","Object","keys","_ref","calculatePerformanceStats","userAnswers","correct","filter","answer","isCorrect","incorrect","accuracy","calculatePerformanceByType","types","statsByType","typeAnswers","exerciseType","findNextUncompletedExercise","currentIndex","i","isAllCompleted","completedCount","calculateRemainingByType","remaining","_ref2","max","generateProgressSummary","totalProgress","performanceStats","performanceByType","remainingByType","allCompleted","overview","remainingCount","byType","performance","overall"],"sources":["spellingStats.js"],"sourcesContent":["// utils/spelling/spellingStats.js\n\n/**\n * ðŸŽ¯ Utilitaires de calcul pour Spelling Exercise\n * Pattern identique Ã  vocabularyStats.js et errorCorrectionStats.js\n */\n\n/**\n * Calcule le nombre total d'exercices\n * @param {Array} exercises - Liste de tous les exercices\n * @returns {number} Nombre total d'exercices\n */\nexport const calculateTotalExercises = (exercises = []) => {\n  return exercises.length;\n};\n\n/**\n * Calcule le nombre total d'exercices complÃ©tÃ©s\n * @param {Array} completedExercises - Liste des indices d'exercices complÃ©tÃ©s\n * @returns {number} Nombre total d'exercices complÃ©tÃ©s\n */\nexport const calculateCompletedExercisesCount = (completedExercises = []) => {\n  return completedExercises.length;\n};\n\n/**\n * Calcule la progression totale\n * @param {Array} exercises - Liste de tous les exercices\n * @param {Array} completedExercises - Liste des indices d'exercices complÃ©tÃ©s\n * @returns {number} Pourcentage de progression (0-100)\n */\nexport const calculateTotalProgress = (exercises = [], completedExercises = []) => {\n  const totalExercises = calculateTotalExercises(exercises);\n  const totalCompleted = calculateCompletedExercisesCount(completedExercises);\n  \n  return totalExercises > 0\n    ? Math.min(100, Math.round((totalCompleted / totalExercises) * 100))\n    : 0;\n};\n\n/**\n * Calcule les statistiques par type d'exercice\n * @param {Array} exercises - Liste de tous les exercices\n * @param {Array} completedExercises - Liste des indices d'exercices complÃ©tÃ©s\n * @returns {Object} Statistiques par type\n */\nexport const calculateStatsByType = (exercises = [], completedExercises = []) => {\n  const stats = {\n    correction: { total: 0, completed: 0, progress: 0 },\n    spelling_rule: { total: 0, completed: 0, progress: 0 },\n    homophones: { total: 0, completed: 0, progress: 0 }\n  };\n\n  // Compter par type\n  exercises.forEach((exercise, index) => {\n    const type = exercise.type || 'correction';\n    if (stats[type]) {\n      stats[type].total++;\n      if (completedExercises.includes(index)) {\n        stats[type].completed++;\n      }\n    }\n  });\n\n  // Calculer les progressions\n  Object.keys(stats).forEach(type => {\n    const { total, completed } = stats[type];\n    stats[type].progress = total > 0 \n      ? Math.min(100, Math.round((completed / total) * 100))\n      : 0;\n  });\n\n  return stats;\n};\n\n/**\n * Calcule les statistiques de performance (correct/incorrect)\n * @param {Array} userAnswers - Liste des rÃ©ponses utilisateur avec isCorrect\n * @returns {Object} Statistiques de performance\n */\nexport const calculatePerformanceStats = (userAnswers = []) => {\n  const total = userAnswers.length;\n  const correct = userAnswers.filter(answer => answer.isCorrect).length;\n  const incorrect = total - correct;\n  const accuracy = total > 0 ? Math.round((correct / total) * 100) : 0;\n\n  return {\n    total,\n    correct,\n    incorrect,\n    accuracy\n  };\n};\n\n/**\n * Calcule les statistiques de performance par type\n * @param {Array} userAnswers - Liste des rÃ©ponses utilisateur\n * @returns {Object} Statistiques de performance par type\n */\nexport const calculatePerformanceByType = (userAnswers = []) => {\n  const types = ['correction', 'spelling_rule', 'homophones'];\n  const statsByType = {};\n\n  types.forEach(type => {\n    const typeAnswers = userAnswers.filter(answer => answer.exerciseType === type);\n    statsByType[type] = calculatePerformanceStats(typeAnswers);\n  });\n\n  return statsByType;\n};\n\n/**\n * Trouve le prochain exercice non complÃ©tÃ©\n * @param {Array} exercises - Liste de tous les exercices\n * @param {Array} completedExercises - Liste des indices d'exercices complÃ©tÃ©s\n * @param {number} currentIndex - Index actuel\n * @returns {number} Index du prochain exercice ou -1 si tous complÃ©tÃ©s\n */\nexport const findNextUncompletedExercise = (exercises = [], completedExercises = [], currentIndex = 0) => {\n  const totalExercises = exercises.length;\n  \n  // Chercher Ã  partir de l'index suivant\n  for (let i = currentIndex + 1; i < totalExercises; i++) {\n    if (!completedExercises.includes(i)) {\n      return i;\n    }\n  }\n  \n  // Chercher depuis le dÃ©but si rien trouvÃ©\n  for (let i = 0; i <= currentIndex; i++) {\n    if (!completedExercises.includes(i)) {\n      return i;\n    }\n  }\n  \n  return -1; // Tous complÃ©tÃ©s\n};\n\n/**\n * VÃ©rifie si tous les exercices sont terminÃ©s\n * @param {Array} exercises - Liste de tous les exercices\n * @param {Array} completedExercises - Liste des indices d'exercices complÃ©tÃ©s\n * @returns {boolean} True si tout est terminÃ©\n */\nexport const isAllCompleted = (exercises = [], completedExercises = []) => {\n  const totalExercises = calculateTotalExercises(exercises);\n  const completedCount = calculateCompletedExercisesCount(completedExercises);\n  \n  return totalExercises > 0 && completedCount >= totalExercises;\n};\n\n/**\n * Calcule les exercices restants par type\n * @param {Array} exercises - Liste de tous les exercices\n * @param {Array} completedExercises - Liste des indices d'exercices complÃ©tÃ©s\n * @returns {Object} Exercices restants par type\n */\nexport const calculateRemainingByType = (exercises = [], completedExercises = []) => {\n  const statsByType = calculateStatsByType(exercises, completedExercises);\n  const remaining = {};\n\n  Object.keys(statsByType).forEach(type => {\n    const { total, completed } = statsByType[type];\n    remaining[type] = Math.max(0, total - completed);\n  });\n\n  return remaining;\n};\n\n/**\n * GÃ©nÃ¨re un rÃ©sumÃ© complet des statistiques\n * @param {Array} exercises - Liste de tous les exercices\n * @param {Array} completedExercises - Liste des indices d'exercices complÃ©tÃ©s\n * @param {Array} userAnswers - Liste des rÃ©ponses utilisateur\n * @returns {Object} RÃ©sumÃ© complet des statistiques\n */\nexport const generateProgressSummary = (exercises = [], completedExercises = [], userAnswers = []) => {\n  const totalExercises = calculateTotalExercises(exercises);\n  const completedCount = calculateCompletedExercisesCount(completedExercises);\n  const totalProgress = calculateTotalProgress(exercises, completedExercises);\n  const statsByType = calculateStatsByType(exercises, completedExercises);\n  const performanceStats = calculatePerformanceStats(userAnswers);\n  const performanceByType = calculatePerformanceByType(userAnswers);\n  const remainingByType = calculateRemainingByType(exercises, completedExercises);\n  const allCompleted = isAllCompleted(exercises, completedExercises);\n\n  return {\n    overview: {\n      totalExercises,\n      completedCount,\n      remainingCount: totalExercises - completedCount,\n      totalProgress,\n      allCompleted\n    },\n    byType: statsByType,\n    performance: {\n      overall: performanceStats,\n      byType: performanceByType\n    },\n    remaining: remainingByType\n  };\n};"],"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","ignoreList":[]}