e0b6c7e0ff19e5d5ef7177fb02b456ce
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn()
  };
});
_getJestObj().mock('expo-linear-gradient', function () {
  return {
    LinearGradient: function LinearGradient(_ref) {
      var children = _ref.children,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      var _require = require('react-native'),
        View = _require.View;
      return (0, _jsxRuntime.jsx)(View, Object.assign({}, props, {
        children: children
      }));
    }
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
_getJestObj().mock('../../../src/contexts/ProgressContext');
_getJestObj().mock('../../../src/contexts/CurrentLevelContext');
_getJestObj().mock('../../../src/screens/Dashboard/hooks/useDashboardLevel');
_getJestObj().mock('../../../src/hooks/useRealTimeProgress', function () {
  return {
    __esModule: true,
    default: function _default() {
      return {
        getLevelProgress: mockGetLevelProgress,
        refresh: jest.fn().mockResolvedValue()
      };
    }
  };
});
_getJestObj().mock('../../../src/hooks/useLastActivity', function () {
  return {
    __esModule: true,
    default: function _default() {
      return {
        lastActivity: mockLastActivity,
        isLoading: mockIsLoading,
        reload: jest.fn().mockResolvedValue()
      };
    }
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/HeroContinueSection', function () {
  var _require2 = require('react-native'),
    View = _require2.View,
    Text = _require2.Text,
    TouchableOpacity = _require2.TouchableOpacity;
  return function (_ref2) {
    var lastActivity = _ref2.lastActivity,
      _onPress = _ref2.onPress;
    if (lastActivity) {
      return (0, _jsxRuntime.jsxs)(TouchableOpacity, {
        onPress: function onPress() {
          return _onPress(lastActivity);
        },
        testID: "continue-activity-button",
        children: [(0, _jsxRuntime.jsx)(Text, {
          children: "Continuer \u25B6\uFE0F"
        }), (0, _jsxRuntime.jsx)(Text, {
          children: lastActivity.title
        })]
      });
    }
    return (0, _jsxRuntime.jsx)(TouchableOpacity, {
      onPress: function onPress() {
        return _onPress('levelSelection');
      },
      testID: "start-learning-button",
      children: (0, _jsxRuntime.jsx)(Text, {
        children: "Commencer >"
      })
    });
  };
});
_getJestObj().mock('../../../src/utils/constants', function () {
  return {
    LANGUAGE_LEVELS: {
      '1': {
        title: 'Débutant',
        color: '#10B981'
      },
      '2': {
        title: 'Élémentaire',
        color: '#3B82F6'
      }
    },
    EXERCISES: {
      vocabulary: {
        id: 'vocabulary',
        route: '/tabs/vocabulary'
      }
    },
    CONTAINER_SAFE_EDGES: {
      NO_BOTTOM: ['top', 'left', 'right']
    }
  };
});
_getJestObj().mock('../../../src/components/layout/Container', function () {
  var _require3 = require('react-native'),
    ScrollView = _require3.ScrollView,
    View = _require3.View;
  var Container = function Container(_ref3) {
    var children = _ref3.children;
    return (0, _jsxRuntime.jsx)(ScrollView, {
      children: children
    });
  };
  Container.CONTAINER_SAFE_EDGES = {
    NO_BOTTOM: ['top', 'left', 'right']
  };
  return Container;
});
_getJestObj().mock('../../../src/screens/VocabularyRevision/RevisionOrchestrator', function () {
  return function () {
    return null;
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _Dashboard = _interopRequireDefault(require("../../../src/screens/Dashboard"));
var _ThemeContext = require("../../../src/contexts/ThemeContext");
var _ProgressContext = require("../../../src/contexts/ProgressContext");
var _CurrentLevelContext = require("../../../src/contexts/CurrentLevelContext");
var _useDashboardLevel = require("../../../src/screens/Dashboard/hooks/useDashboardLevel");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children"];
function _getJestObj() {
  var _require5 = require("@jest/globals"),
    jest = _require5.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockLastActivity = {
  type: 'vocabulary',
  level: '2',
  title: 'Vocabulaire Famille'
};
var mockIsLoading = false;
var mockGetLevelProgress = jest.fn(function (level) {
  return {
    '1': 25,
    '2': 50,
    '3': 75
  }[level] || 0;
});
var _require4 = require('expo-router'),
  router = _require4.router;
describe('Dashboard - Tests d\'intégration', function () {
  var mockThemeContext = {
    colors: {
      background: '#F8FAFC',
      primary: '#3B82F6',
      surface: '#FFFFFF',
      text: '#1F2937'
    }
  };
  var mockProgressContext = {
    progress: {},
    isLoading: false
  };
  var mockCurrentLevelContext = {
    setCurrentLevel: jest.fn(),
    currentLevel: '1'
  };
  var mockHandleChangeActiveLevel = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
    mockLastActivity = {
      type: 'vocabulary',
      level: '2',
      title: 'Vocabulaire Famille'
    };
    _ProgressContext.useProgress.mockReturnValue(mockProgressContext);
    _CurrentLevelContext.useCurrentLevel.mockReturnValue(mockCurrentLevelContext);
    _useDashboardLevel.useDashboardLevel.mockReturnValue({
      currentLevel: '1',
      handleChangeActiveLevel: mockHandleChangeActiveLevel,
      levelColor: '#10B981'
    });
    _asyncStorage.default.getItem.mockResolvedValue(null);
  });
  var renderDashboard = function renderDashboard() {
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
      value: mockThemeContext,
      children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
    }));
  };
  it('devrait gérer l\'absence d\'activité récente', (0, _asyncToGenerator2.default)(function* () {
    mockLastActivity = null;
    var _renderDashboard = renderDashboard(),
      findByTestId = _renderDashboard.findByTestId;
    var startButton = yield findByTestId('start-learning-button');
    _reactNative.fireEvent.press(startButton);
    expect(router.push).toHaveBeenCalledWith('/(tabs)/levelSelection');
  }));
  it('devrait permettre de changer de niveau et naviguer', (0, _asyncToGenerator2.default)(function* () {
    var _renderDashboard2 = renderDashboard(),
      findByText = _renderDashboard2.findByText,
      rerender = _renderDashboard2.rerender;
    var level2Circle = yield findByText('2');
    _reactNative.fireEvent.press(level2Circle);
    yield (0, _reactNative.waitFor)(function () {
      expect(mockHandleChangeActiveLevel).toHaveBeenCalledWith('2');
      expect(mockCurrentLevelContext.setCurrentLevel).toHaveBeenCalledWith('2');
    });
    _useDashboardLevel.useDashboardLevel.mockReturnValue({
      currentLevel: '2',
      handleChangeActiveLevel: mockHandleChangeActiveLevel,
      levelColor: '#3B82F6'
    });
    rerender((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
      value: mockThemeContext,
      children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
    }));
    var exploreButton = yield findByText('Explorer le niveau 2');
    _reactNative.fireEvent.press(exploreButton);
    expect(router.push).toHaveBeenCalledWith('/tabs/exerciseSelection?level=2');
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,