1e66686b910a3c8a2d0c655ff6a39582
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
_getJestObj().mock('expo-linear-gradient', function () {
  return {
    LinearGradient: function LinearGradient(_ref) {
      var children = _ref.children;
      return children;
    }
  };
});
_getJestObj().mock('../../../src/screens/Dashboard', function () {
  var React = require('react');
  var _require = require('react-native'),
    View = _require.View,
    Text = _require.Text,
    ScrollView = _require.ScrollView;
  return {
    __esModule: true,
    default: function _default(_ref2) {
      var _ref2$testID = _ref2.testID,
        testID = _ref2$testID === void 0 ? 'dashboard' : _ref2$testID;
      return (0, _jsxRuntime.jsxs)(ScrollView, {
        testID: testID,
        children: [(0, _jsxRuntime.jsx)(View, {
          testID: "dashboard-header",
          children: (0, _jsxRuntime.jsx)(Text, {
            children: "Dashboard Header"
          })
        }), (0, _jsxRuntime.jsx)(View, {
          testID: "dashboard-hero",
          children: (0, _jsxRuntime.jsx)(Text, {
            children: "Hero Section"
          })
        }), (0, _jsxRuntime.jsx)(View, {
          testID: "dashboard-actions",
          children: (0, _jsxRuntime.jsx)(Text, {
            children: "Quick Actions"
          })
        }), (0, _jsxRuntime.jsx)(View, {
          testID: "dashboard-metrics",
          children: (0, _jsxRuntime.jsx)(Text, {
            children: "Metrics"
          })
        }), (0, _jsxRuntime.jsx)(View, {
          testID: "dashboard-progress",
          children: (0, _jsxRuntime.jsx)(Text, {
            children: "Learning Progress"
          })
        })]
      });
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Dashboard - Tests finaux', function () {
  var Dashboard = require('../../../src/screens/Dashboard').default;
  describe('Structure et rendu', function () {
    it('devrait rendre toutes les sections principales', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(Dashboard, {})),
        getByTestId = _render.getByTestId,
        getByText = _render.getByText;
      expect(getByTestId('dashboard')).toBeTruthy();
      expect(getByTestId('dashboard-header')).toBeTruthy();
      expect(getByTestId('dashboard-hero')).toBeTruthy();
      expect(getByTestId('dashboard-actions')).toBeTruthy();
      expect(getByTestId('dashboard-metrics')).toBeTruthy();
      expect(getByTestId('dashboard-progress')).toBeTruthy();
      expect(getByText('Dashboard Header')).toBeTruthy();
      expect(getByText('Hero Section')).toBeTruthy();
      expect(getByText('Quick Actions')).toBeTruthy();
      expect(getByText('Metrics')).toBeTruthy();
      expect(getByText('Learning Progress')).toBeTruthy();
    });
    it('devrait être stable lors de multiples rendus', function () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(Dashboard, {})),
        rerender = _render2.rerender,
        getByTestId = _render2.getByTestId;
      expect(getByTestId('dashboard')).toBeTruthy();
      rerender((0, _jsxRuntime.jsx)(Dashboard, {}));
      expect(getByTestId('dashboard')).toBeTruthy();
      rerender((0, _jsxRuntime.jsx)(Dashboard, {
        testID: "custom-dashboard"
      }));
      expect(getByTestId('custom-dashboard')).toBeTruthy();
    });
  });
  describe('Logique métier intégrée', function () {
    it('devrait calculer les progressions correctement', function () {
      var calculateProgress = function calculateProgress(current, total) {
        if (!total || total === 0) return 0;
        return Math.min(Math.round(current / total * 100), 100);
      };
      expect(calculateProgress(5, 10)).toBe(50);
      expect(calculateProgress(15, 10)).toBe(100);
    });
    it('devrait gérer les niveaux valides', function () {
      var validLevels = ['1', '2', '3', '4', '5', '6', 'bonus'];
      var isValidLevel = function isValidLevel(level) {
        return validLevels.includes(level);
      };
      expect(isValidLevel('1')).toBe(true);
      expect(isValidLevel('bonus')).toBe(true);
      expect(isValidLevel('invalid')).toBe(false);
    });
    it('devrait formater les couleurs de niveau', function () {
      var getLevelColor = function getLevelColor(level) {
        var colors = {
          '1': '#10B981',
          '2': '#3B82F6',
          '3': '#8B5CF6',
          '4': '#F59E0B',
          '5': '#EF4444',
          '6': '#EC4899',
          'bonus': '#6366F1'
        };
        return colors[level] || colors['1'];
      };
      expect(getLevelColor('1')).toBe('#10B981');
      expect(getLevelColor('bonus')).toBe('#6366F1');
      expect(getLevelColor('invalid')).toBe('#10B981');
    });
  });
  describe('Gestion des états', function () {
    it('devrait gérer les états de chargement', function () {
      var isLoading = function isLoading(states) {
        return Object.values(states || {}).some(function (state) {
          return state === true;
        });
      };
      expect(isLoading({
        progress: false,
        activity: false
      })).toBe(false);
      expect(isLoading({
        progress: true,
        activity: false
      })).toBe(true);
      expect(isLoading({})).toBe(false);
      expect(isLoading(null)).toBe(false);
    });
    it('devrait valider les données d\'activité', function () {
      var validateActivity = function validateActivity(activity) {
        if (!activity) return false;
        return !!(activity.title && activity.type);
      };
      expect(validateActivity({
        title: 'Test',
        type: 'vocabulary'
      })).toBe(true);
      expect(validateActivity({
        title: 'Test'
      })).toBe(false);
      expect(validateActivity(null)).toBe(false);
    });
  });
  describe('Intégration et performance', function () {
    it('devrait se charger rapidement', function () {
      var startTime = Date.now();
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(Dashboard, {}));
      var endTime = Date.now();
      expect(endTime - startTime).toBeLessThan(100);
    });
    it('devrait gérer les props personnalisées', function () {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(Dashboard, {
          testID: "custom-id"
        })),
        getByTestId = _render3.getByTestId;
      expect(getByTestId('custom-id')).toBeTruthy();
    });
    it('devrait être compatible avec différents contextes', function () {
      expect(function () {
        return (0, _reactNative.render)((0, _jsxRuntime.jsx)(Dashboard, {}));
      }).not.toThrow();
      var _require2 = require('../../../src/contexts/ThemeContext'),
        ThemeContext = _require2.ThemeContext;
      expect(function () {
        return (0, _reactNative.render)((0, _jsxRuntime.jsx)(ThemeContext.Provider, {
          value: {},
          children: (0, _jsxRuntime.jsx)(Dashboard, {})
        }));
      }).not.toThrow();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,