f9237a3ac060bc95e93bcd6b2a079726
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _grammarRulesB = _interopRequireDefault(require("../src/data/grammar/B1/rules/grammarRulesB1"));
var _grammarRulesB2 = _interopRequireDefault(require("../src/data/grammar/B2/rules/grammarRulesB2"));
var _grammarRulesC = _interopRequireDefault(require("../src/data/grammar/C1/rules/grammarRulesC1"));
var _slang = require("../src/data/vocabulary/bonus/categories/18_slang");
var _ = require("../src/data/fastVocabulary/1");
var _slangConversations = _interopRequireDefault(require("../src/data/phrases/bonus/categories/slang-conversations"));
var _modernLifeSituations = _interopRequireDefault(require("../src/data/phrases/bonus/categories/modern-life-situations"));
var _workplaceCasual = _interopRequireDefault(require("../src/data/phrases/bonus/categories/workplace-casual"));
var _smallTalkSocial = _interopRequireDefault(require("../src/data/phrases/bonus/categories/small-talk-social"));
var _foodRestaurant = _interopRequireDefault(require("../src/data/phrases/bonus/categories/food-restaurant"));
var _phrasalVerbsContext = _interopRequireDefault(require("../src/data/phrases/bonus/categories/phrasal-verbs-context"));
var _problemsComplaints = _interopRequireDefault(require("../src/data/phrases/bonus/categories/problems-complaints"));
var _relationshipDynamics = _interopRequireDefault(require("../src/data/phrases/bonus/categories/relationship-dynamics"));
var _formalInformalDiscourse = _interopRequireDefault(require("../src/data/phrases/5/categories/formal-informal-discourse"));
var _idiomaticExpressions = _interopRequireDefault(require("../src/data/phrases/4/categories/idiomatic-expressions"));
var _stylisticMasteryVariations = _interopRequireDefault(require("../src/data/phrases/6/categories/stylistic-mastery-variations"));
var _businessMeeting = _interopRequireDefault(require("../src/data/conversation/B1/scenarios/businessMeeting"));
var _explainProblemIT = _interopRequireDefault(require("../src/data/conversation/B1/scenarios/explainProblemIT"));
var _meetingFriendOfFriend = _interopRequireDefault(require("../src/data/conversation/A2/scenarios/meetingFriendOfFriend"));
var _programmingParadigmDebate = _interopRequireDefault(require("../src/data/conversation/C1/scenarios/programmingParadigmDebate"));
var _literaryCriticism = _interopRequireDefault(require("../src/data/conversation/C2/scenarios/literaryCriticism"));
var _assessmentsC = _interopRequireDefault(require("../src/data/assessment/assessmentsC1"));
describe('Data Integrity Checks', function () {
  describe('Grammar Rules', function () {
    var grammarFiles = {
      grammarRulesB1: _grammarRulesB.default,
      grammarRulesB2: _grammarRulesB2.default,
      grammarRulesC1: _grammarRulesC.default
    };
    Object.entries(grammarFiles).forEach(function (_ref) {
      var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
        fileName = _ref2[0],
        rules = _ref2[1];
      describe(`${fileName}`, function () {
        it('should have unique IDs', function () {
          var ids = rules.map(function (rule) {
            return rule.id;
          });
          var uniqueIds = new Set(ids);
          expect(uniqueIds.size).toBe(ids.length);
        });
        it('should have all required fields for each rule', function () {
          rules.forEach(function (rule) {
            expect(rule.id).toBeDefined();
            expect(rule.title).toBeDefined();
            expect(rule.explanation).toBeDefined();
            expect(rule.examples).toBeInstanceOf(Array);
            expect(rule.examples.length).toBeGreaterThanOrEqual(0);
            expect(rule.rules).toBeInstanceOf(Array);
            expect(rule.rules.length).toBeGreaterThan(0);
          });
        });
      });
    });
  });
  describe('Vocabulary Lists', function () {
    it('should have a valid structure for slang vocabulary', function () {
      expect(_slang.vocab.title).toBeDefined();
      expect(_slang.vocab.words).toBeInstanceOf(Array);
      expect(_slang.vocab.words.length).toBeGreaterThan(0);
    });
    it('should ensure all A1 vocabulary words have the required fields', function () {
      _.vocab.words.forEach(function (item) {
        expect(item.word).toBeDefined();
        expect(item.translation).toBeDefined();
        expect(item.example).toBeDefined();
      });
    });
  });
  describe('Phrase Lists', function () {
    var phraseFiles = {
      slangConversations: _slangConversations.default,
      modernLifeSituations: _modernLifeSituations.default,
      workplaceCasual: _workplaceCasual.default,
      smallTalkSocial: _smallTalkSocial.default,
      foodRestaurant: _foodRestaurant.default,
      phrasalVerbsContext: _phrasalVerbsContext.default,
      problemsComplaints: _problemsComplaints.default,
      relationshipDynamics: _relationshipDynamics.default,
      formalInformalDiscourse: _formalInformalDiscourse.default,
      idiomaticExpressions: _idiomaticExpressions.default,
      stylisticMasteryVariations: _stylisticMasteryVariations.default
    };
    Object.entries(phraseFiles).forEach(function (_ref3) {
      var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
        fileName = _ref4[0],
        phrases = _ref4[1];
      it(`should have a valid structure for each phrase in ${fileName}`, function () {
        expect(phrases).toBeInstanceOf(Array);
        expect(phrases.length).toBeGreaterThan(0);
        phrases.forEach(function (phrase) {
          expect(phrase.categoryId).toEqual(expect.any(Number));
          expect(phrase.english).toEqual(expect.any(String));
          expect(phrase.translation).toEqual(expect.any(String));
          expect(phrase.context).toEqual(expect.any(String));
          expect(phrase.examples).toBeInstanceOf(Array);
          expect(phrase.examples.length).toBeGreaterThan(0);
          expect(phrase.examples[0].english).toBeDefined();
          expect(phrase.examples[0].translation).toBeDefined();
        });
      });
    });
  });
  describe('Conversation Scenarios', function () {
    var scenarios = {
      businessMeeting: _businessMeeting.default,
      explainProblemIT: _explainProblemIT.default,
      meetingFriendOfFriend: _meetingFriendOfFriend.default,
      programmingParadigmDebate: _programmingParadigmDebate.default,
      literaryCriticism: _literaryCriticism.default
    };
    Object.entries(scenarios).forEach(function (_ref5) {
      var _ref6 = (0, _slicedToArray2.default)(_ref5, 2),
        fileName = _ref6[0],
        scenario = _ref6[1];
      it(`should have a valid structure for ${fileName}`, function () {
        expect(scenario.id).toBeDefined();
        expect(scenario.title).toBeDefined();
        expect(scenario.level).toBeDefined();
        expect(scenario.steps).toBeInstanceOf(Array);
        expect(scenario.steps.length).toBeGreaterThan(0);
        scenario.steps.forEach(function (step) {
          expect(step.id).toBeDefined();
          expect(step.botMessage).toBeDefined();
          if (step.feedback) {
            expect(step.feedback).toBeDefined();
          }
        });
        expect(scenario.completionMessage).toBeDefined();
      });
    });
  });
  describe('Assessments', function () {
    it('should have a valid structure for C1 assessment', function () {
      expect(_assessmentsC.default.level).toBe('C1');
      expect(_assessmentsC.default.totalQuestions).toBeDefined();
      Object.values(_assessmentsC.default).forEach(function (section) {
        if (typeof section === 'object' && section.questions) {
          expect(section.title).toBeDefined();
          expect(section.questions).toBeInstanceOf(Array);
          section.questions.forEach(function (q) {
            expect(q.text).toBeDefined();
            expect(q.options).toBeInstanceOf(Array);
            expect(q.options.length).toBeGreaterThan(1);
            expect(q.correctAnswer).toBeDefined();
            expect(q.explanation).toBeDefined();
          });
        }
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,