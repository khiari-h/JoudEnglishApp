316a4f9aaa635cc97615d6948537c4c8
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NativeEventsManager = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseBase"));
var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseKey"));
var _utils = require("./utils");
var _WorkletEventHandler = require("../WorkletEventHandler");
var _findNodeHandle4 = require("../platformFunctions/findNodeHandle");
var _managedComponent = (0, _classPrivateFieldLooseKey2.default)("managedComponent");
var _componentOptions = (0, _classPrivateFieldLooseKey2.default)("componentOptions");
var _eventViewTag = (0, _classPrivateFieldLooseKey2.default)("eventViewTag");
var NativeEventsManager = exports.NativeEventsManager = function () {
  function NativeEventsManager(component, options) {
    (0, _classCallCheck2.default)(this, NativeEventsManager);
    Object.defineProperty(this, _managedComponent, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _componentOptions, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _eventViewTag, {
      writable: true,
      value: -1
    });
    (0, _classPrivateFieldLooseBase2.default)(this, _managedComponent)[_managedComponent] = component;
    (0, _classPrivateFieldLooseBase2.default)(this, _componentOptions)[_componentOptions] = options;
    (0, _classPrivateFieldLooseBase2.default)(this, _eventViewTag)[_eventViewTag] = this.getEventViewTag();
  }
  return (0, _createClass2.default)(NativeEventsManager, [{
    key: "attachEvents",
    value: function attachEvents() {
      var _this = this;
      executeForEachEventHandler((0, _classPrivateFieldLooseBase2.default)(this, _managedComponent)[_managedComponent].props, function (key, handler) {
        handler.registerForEvents((0, _classPrivateFieldLooseBase2.default)(_this, _eventViewTag)[_eventViewTag], key);
      });
    }
  }, {
    key: "detachEvents",
    value: function detachEvents() {
      var _this2 = this;
      executeForEachEventHandler((0, _classPrivateFieldLooseBase2.default)(this, _managedComponent)[_managedComponent].props, function (_key, handler) {
        handler.unregisterFromEvents((0, _classPrivateFieldLooseBase2.default)(_this2, _eventViewTag)[_eventViewTag]);
      });
    }
  }, {
    key: "updateEvents",
    value: function updateEvents(prevProps) {
      var _this3 = this;
      var computedEventTag = this.getEventViewTag(true);
      if ((0, _classPrivateFieldLooseBase2.default)(this, _eventViewTag)[_eventViewTag] !== computedEventTag) {
        executeForEachEventHandler(prevProps, function (_key, handler) {
          handler.unregisterFromEvents((0, _classPrivateFieldLooseBase2.default)(_this3, _eventViewTag)[_eventViewTag]);
        });
        (0, _classPrivateFieldLooseBase2.default)(this, _eventViewTag)[_eventViewTag] = computedEventTag;
        this.attachEvents();
        return;
      }
      executeForEachEventHandler(prevProps, function (key, prevHandler) {
        var newProp = (0, _classPrivateFieldLooseBase2.default)(_this3, _managedComponent)[_managedComponent].props[key];
        if (!newProp) {
          prevHandler.unregisterFromEvents((0, _classPrivateFieldLooseBase2.default)(_this3, _eventViewTag)[_eventViewTag]);
        } else if (isWorkletEventHandler(newProp) && newProp.workletEventHandler !== prevHandler) {
          prevHandler.unregisterFromEvents((0, _classPrivateFieldLooseBase2.default)(_this3, _eventViewTag)[_eventViewTag]);
          newProp.workletEventHandler.registerForEvents((0, _classPrivateFieldLooseBase2.default)(_this3, _eventViewTag)[_eventViewTag]);
        }
      });
      executeForEachEventHandler((0, _classPrivateFieldLooseBase2.default)(this, _managedComponent)[_managedComponent].props, function (key, handler) {
        if (!prevProps[key]) {
          handler.registerForEvents((0, _classPrivateFieldLooseBase2.default)(_this3, _eventViewTag)[_eventViewTag]);
        }
      });
    }
  }, {
    key: "getEventViewTag",
    value: function getEventViewTag() {
      var _classPrivateFieldLoo, _findNodeHandle3;
      var componentUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var componentAnimatedRef = (0, _classPrivateFieldLooseBase2.default)(this, _managedComponent)[_managedComponent]._componentRef;
      if (componentAnimatedRef.getScrollableNode) {
        var _findNodeHandle;
        var scrollableNode = componentAnimatedRef.getScrollableNode();
        if (typeof scrollableNode === 'number') {
          return scrollableNode;
        }
        return (_findNodeHandle = (0, _findNodeHandle4.findNodeHandle)(scrollableNode)) != null ? _findNodeHandle : -1;
      }
      if ((_classPrivateFieldLoo = (0, _classPrivateFieldLooseBase2.default)(this, _componentOptions)[_componentOptions]) != null && _classPrivateFieldLoo.setNativeProps) {
        var _findNodeHandle2;
        return (_findNodeHandle2 = (0, _findNodeHandle4.findNodeHandle)((0, _classPrivateFieldLooseBase2.default)(this, _managedComponent)[_managedComponent])) != null ? _findNodeHandle2 : -1;
      }
      if (!componentUpdate) {
        return (0, _classPrivateFieldLooseBase2.default)(this, _managedComponent)[_managedComponent].getComponentViewTag();
      }
      if (componentAnimatedRef.__nativeTag || componentAnimatedRef._nativeTag) {
        var _ref, _componentAnimatedRef;
        return (_ref = (_componentAnimatedRef = componentAnimatedRef.__nativeTag) != null ? _componentAnimatedRef : componentAnimatedRef._nativeTag) != null ? _ref : -1;
      }
      return (_findNodeHandle3 = (0, _findNodeHandle4.findNodeHandle)(componentAnimatedRef)) != null ? _findNodeHandle3 : -1;
    }
  }]);
}();
function isWorkletEventHandler(prop) {
  return (0, _utils.has)('workletEventHandler', prop) && prop.workletEventHandler instanceof _WorkletEventHandler.WorkletEventHandler;
}
function executeForEachEventHandler(props, callback) {
  for (var key in props) {
    var prop = props[key];
    if (isWorkletEventHandler(prop)) {
      callback(key, prop.workletEventHandler);
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,