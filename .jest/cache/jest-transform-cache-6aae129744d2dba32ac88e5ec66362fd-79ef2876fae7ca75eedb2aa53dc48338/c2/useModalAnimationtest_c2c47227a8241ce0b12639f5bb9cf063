d26938257e292048c224ccdfaffef6c7
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _useModalAnimation = _interopRequireDefault(require("../../../../src/components/ui/Modal/useModalAnimation"));
var mockAnimatedValue = {
  interpolate: jest.fn().mockReturnValue('mockedInterpolatedValue'),
  addListener: jest.fn(),
  removeAllListeners: jest.fn(),
  setValue: jest.fn(),
  _value: 0
};
var mockStart = jest.fn();
var mockTiming = jest.fn().mockReturnValue({
  start: mockStart,
  stop: jest.fn()
});
jest.spyOn(_reactNative2.Animated, 'Value').mockImplementation(function () {
  return mockAnimatedValue;
});
jest.spyOn(_reactNative2.Animated, 'timing').mockImplementation(mockTiming);
describe('useModalAnimation', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockAnimatedValue.interpolate.mockReturnValue('mockedInterpolatedValue');
  });
  it('devrait d√©marrer l\'animation si visible devient vrai', function () {
    var _renderHook = (0, _reactNative.renderHook)(function (_ref) {
        var visible = _ref.visible,
          animationType = _ref.animationType,
          customAnimation = _ref.customAnimation;
        return (0, _useModalAnimation.default)({
          visible: visible,
          animationType: animationType,
          customAnimation: customAnimation
        });
      }, {
        initialProps: {
          visible: false,
          animationType: 'custom',
          customAnimation: true
        }
      }),
      rerender = _renderHook.rerender;
    (0, _reactNative.act)(function () {
      rerender({
        visible: true,
        animationType: 'custom',
        customAnimation: true
      });
    });
    expect(mockTiming).toHaveBeenCalledTimes(2);
    expect(mockStart).toHaveBeenCalledTimes(2);
  });
  it('devrait appeler Animated.timing avec les bonnes valeurs pour la position "top"', function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function (_ref2) {
        var visible = _ref2.visible,
          animationType = _ref2.animationType,
          customAnimation = _ref2.customAnimation,
          position = _ref2.position;
        return (0, _useModalAnimation.default)({
          visible: visible,
          animationType: animationType,
          customAnimation: customAnimation,
          position: position
        });
      }, {
        initialProps: {
          visible: false,
          animationType: 'custom',
          customAnimation: true,
          position: 'top'
        }
      }),
      rerender = _renderHook2.rerender;
    (0, _reactNative.act)(function () {
      rerender({
        visible: true,
        animationType: 'custom',
        customAnimation: true,
        position: 'top'
      });
    });
    expect(mockTiming).toHaveBeenLastCalledWith(mockAnimatedValue, expect.objectContaining({
      toValue: 1,
      duration: 300,
      useNativeDriver: true
    }));
  });
  it('devrait retourner les styles de transformation corrects pour la position "top"', function () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useModalAnimation.default)({
          visible: true,
          animationType: 'custom',
          customAnimation: true,
          position: 'top'
        });
      }),
      result = _renderHook3.result;
    expect(result.current).toBeDefined();
    expect(mockAnimatedValue.interpolate).toHaveBeenCalledWith({
      inputRange: [0, 1],
      outputRange: [-300, 0]
    });
    expect(result.current).toHaveProperty('transform');
    expect(Array.isArray(result.current.transform)).toBe(true);
    expect(result.current.transform).toEqual([{
      translateY: 'mockedInterpolatedValue'
    }]);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,