{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_ProgressBar","_reactNative2","_jsxRuntime","describe","beforeAll","jest","spyOn","Animated","mockImplementation","start","callback","stop","fn","afterAll","restoreAllMocks","it","_render","render","jsx","default","testID","getByTestId","expect","toBeTruthy","_render2","progress","showPercentage","getByText","_render3","queryByText","toBeNull","_render4","total","showValue","_render5","_render6","label","_render7","height","progressBar","_render8","backgroundColor","fillColor","_render9","borderRadius","customFormatter","percentage","_render0","percentageFormatter","value","_render1","valueFormatter","_render10","_render11","_render12","animated"],"sources":["ProgressBar.test.js"],"sourcesContent":["import React from 'react';\nimport { render, waitFor } from '@testing-library/react-native';\nimport ProgressBar from '../../../src/components/ui/ProgressBar';\nimport { Animated } from 'react-native';\n\ndescribe('ProgressBar', () => {\n  beforeAll(() => {\n    jest.spyOn(Animated, 'timing').mockImplementation(() => ({\n      start: (callback) => {\n        callback && callback();\n        return { stop: jest.fn() };\n      },\n      stop: jest.fn(),\n    }));\n  });\n\n  afterAll(() => {\n    jest.restoreAllMocks();\n  });\n\n  it('should render correctly with default props', () => {\n    const { getByTestId } = render(<ProgressBar testID=\"progress-bar\" />);\n    expect(getByTestId('progress-bar')).toBeTruthy();\n  });\n\n  it('should display percentage when showPercentage is true', () => {\n    const { getByText } = render(<ProgressBar progress={50} showPercentage={true} />);\n    expect(getByText('50%')).toBeTruthy();\n  });\n\n  it('should not display percentage when showPercentage is false', () => {\n    const { queryByText } = render(<ProgressBar progress={50} showPercentage={false} />);\n    expect(queryByText('50%')).toBeNull();\n  });\n\n  it('should display value when showValue is true', () => {\n    const { getByText } = render(<ProgressBar progress={50} total={200} showValue={true} />);\n    expect(getByText('100/200')).toBeTruthy();\n  });\n\n  it('should not display value when showValue is false', () => {\n    const { queryByText } = render(<ProgressBar progress={50} total={200} showValue={false} />);\n    expect(queryByText('100/200')).toBeNull();\n  });\n\n  it('should display label when label is provided', () => {\n    const { getByText } = render(<ProgressBar label=\"My Progress\" />);\n    expect(getByText('My Progress')).toBeTruthy();\n  });\n\n  it('should apply custom height', () => {\n    const { getByTestId } = render(<ProgressBar height={20} testID=\"progress-bar-custom-height\" />);\n    const progressBar = getByTestId('progress-bar-custom-height');\n    \n    // Vérifier que le composant a été rendu avec la prop height\n    expect(progressBar).toBeTruthy();\n    \n    // Test plus spécifique : vérifier via le createStyles mock si nécessaire\n    // ou simplement vérifier que le rendu s'est fait sans erreur avec height={20}\n  });\n\n  it('should apply custom colors', () => {\n    const { getByTestId } = render(\n      <ProgressBar\n        backgroundColor=\"#FF0000\"\n        fillColor=\"#00FF00\"\n        testID=\"progress-bar-custom-colors\"\n      />\n    );\n    const progressBar = getByTestId('progress-bar-custom-colors');\n    \n    // Vérifier que le composant a été rendu avec les props de couleur\n    expect(progressBar).toBeTruthy();\n  });\n\n  it('should apply custom border radius', () => {\n    const { getByTestId } = render(<ProgressBar borderRadius={10} testID=\"progress-bar-custom-radius\" />);\n    const progressBar = getByTestId('progress-bar-custom-radius');\n    \n    // Vérifier que le composant a été rendu avec la prop borderRadius\n    expect(progressBar).toBeTruthy();\n  });\n\n  it('should format percentage correctly with custom formatter', () => {\n    const customFormatter = (percentage) => `Progress: ${percentage}%`;\n    const { getByText } = render(\n      <ProgressBar progress={75} showPercentage={true} percentageFormatter={customFormatter} />\n    );\n    expect(getByText('Progress: 75%')).toBeTruthy();\n  });\n\n  it('should format value correctly with custom formatter', () => {\n    const customFormatter = (value, total) => `${value} of ${total} units`;\n    const { getByText } = render(\n      <ProgressBar progress={25} total={100} showValue={true} valueFormatter={customFormatter} />\n    );\n    expect(getByText('25 of 100 units')).toBeTruthy();\n  });\n\n  // Tests supplémentaires pour une meilleure couverture\n  it('should handle progress values outside 0-100 range', () => {\n    const { getByTestId } = render(<ProgressBar progress={150} testID=\"progress-overflow\" />);\n    expect(getByTestId('progress-overflow')).toBeTruthy();\n    // Le composant devrait gérer cela sans erreur\n  });\n\n  it('should handle negative progress values', () => {\n    const { getByTestId } = render(<ProgressBar progress={-10} testID=\"progress-negative\" />);\n    expect(getByTestId('progress-negative')).toBeTruthy();\n    // Le composant devrait gérer cela sans erreur\n  });\n\n  it('should render without animation when animated is false', () => {\n    const { getByTestId } = render(<ProgressBar progress={50} animated={false} testID=\"progress-no-anim\" />);\n    expect(getByTestId('progress-no-anim')).toBeTruthy();\n  });\n});"],"mappings":"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","ignoreList":[]}