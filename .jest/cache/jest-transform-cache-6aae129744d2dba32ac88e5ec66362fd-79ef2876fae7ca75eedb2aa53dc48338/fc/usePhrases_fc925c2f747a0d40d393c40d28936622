6ebf623e1f4e86e558eaed2afe19088e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var usePhrases = function usePhrases() {
  var phrasesData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "A1";
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    categoryIndex = _useState2[0],
    setCategoryIndex = _useState2[1];
  var _useState3 = (0, _react.useState)(0),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    phraseIndex = _useState4[0],
    setPhraseIndex = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    showTranslation = _useState6[0],
    setShowTranslation = _useState6[1];
  var _useState7 = (0, _react.useState)({}),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    completedPhrases = _useState8[0],
    setCompletedPhrases = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    loaded = _useState0[0],
    setLoaded = _useState0[1];
  var _useState1 = (0, _react.useState)(false),
    _useState10 = (0, _slicedToArray2.default)(_useState1, 2),
    showDetailedProgress = _useState10[0],
    setShowDetailedProgress = _useState10[1];
  var isInitialized = (0, _react.useRef)(false);
  var categories = (phrasesData == null ? void 0 : phrasesData.categories) || [];
  var allPhrases = (phrasesData == null ? void 0 : phrasesData.phrases) || [];
  var currentCategory = categories[categoryIndex] || {
    id: null,
    name: "Loading...",
    phrases: []
  };
  var currentPhrases = currentCategory.id ? allPhrases.filter(function (phrase) {
    return phrase.categoryId === currentCategory.id;
  }) : [];
  var currentPhrase = currentPhrases[phraseIndex] || {
    id: "",
    phrase: "",
    translation: "",
    context: ""
  };
  var totalCategories = categories.length;
  var totalPhrasesInCategory = currentPhrases.length;
  var STORAGE_KEY = `phrases_${level}`;
  (0, _react.useEffect)(function () {
    var loadData = function () {
      var _ref = (0, _asyncToGenerator2.default)(function* () {
        try {
          var saved = yield _asyncStorage.default.getItem(STORAGE_KEY);
          if (saved) {
            var _JSON$parse = JSON.parse(saved),
              savedCompleted = _JSON$parse.completedPhrases,
              lastPosition = _JSON$parse.lastPosition;
            setCompletedPhrases(savedCompleted || {});
            if (lastPosition) {
              setCategoryIndex(lastPosition.categoryIndex || 0);
              setPhraseIndex(lastPosition.phraseIndex || 0);
            }
          }
        } catch (error) {} finally {
          setLoaded(true);
        }
      });
      return function loadData() {
        return _ref.apply(this, arguments);
      };
    }();
    loadData();
  }, [level]);
  var saveData = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      var dataToSave = {
        completedPhrases: completedPhrases,
        lastPosition: {
          categoryIndex: categoryIndex,
          phraseIndex: phraseIndex
        }
      };
      yield _asyncStorage.default.setItem(STORAGE_KEY, JSON.stringify(dataToSave));
    } catch (error) {}
  }), [completedPhrases, categoryIndex, phraseIndex, STORAGE_KEY]);
  (0, _react.useEffect)(function () {
    if (loaded) saveData();
  }, [saveData, loaded]);
  (0, _react.useEffect)(function () {
    if (loaded && phrasesData && !isInitialized.current) {
      var newCompletedPhrases = Object.assign({}, completedPhrases);
      categories.forEach(function (_, index) {
        if (!newCompletedPhrases[index]) {
          newCompletedPhrases[index] = [];
        }
      });
      setCompletedPhrases(newCompletedPhrases);
      isInitialized.current = true;
    }
  }, [loaded, phrasesData, categories, completedPhrases]);
  var changeCategory = (0, _react.useCallback)(function (newCategoryIndex) {
    if (newCategoryIndex !== categoryIndex && newCategoryIndex >= 0 && newCategoryIndex < categories.length) {
      setCategoryIndex(newCategoryIndex);
      setPhraseIndex(0);
      setShowTranslation(false);
    }
  }, [categoryIndex, categories.length]);
  var goToNextPhrase = (0, _react.useCallback)(function () {
    if (phraseIndex < totalPhrasesInCategory - 1) {
      setPhraseIndex(function (prev) {
        return prev + 1;
      });
      setShowTranslation(false);
    }
  }, [phraseIndex, totalPhrasesInCategory]);
  var goToPreviousPhrase = (0, _react.useCallback)(function () {
    if (phraseIndex > 0) {
      setPhraseIndex(function (prev) {
        return prev - 1;
      });
      setShowTranslation(false);
      return true;
    }
    return false;
  }, [phraseIndex]);
  var toggleTranslation = (0, _react.useCallback)(function () {
    setShowTranslation(function (prev) {
      return !prev;
    });
  }, []);
  var toggleDetailedProgress = (0, _react.useCallback)(function () {
    setShowDetailedProgress(function (prev) {
      return !prev;
    });
  }, []);
  var markPhraseAsCompleted = (0, _react.useCallback)(function (catIndex, pIndex) {
    setCompletedPhrases(function (prev) {
      var categoryCompleted = prev[catIndex] || [];
      if (!categoryCompleted.includes(pIndex)) {
        return Object.assign({}, prev, (0, _defineProperty2.default)({}, catIndex, [].concat((0, _toConsumableArray2.default)(categoryCompleted), [pIndex])));
      }
      return prev;
    });
  }, []);
  var findNextUncompletedCategory = (0, _react.useCallback)(function () {
    var numCategories = categories.length;
    var _loop = function _loop() {
        var _completedPhrases$nex;
        var nextIndex = (categoryIndex + i) % numCategories;
        var category = categories[nextIndex];
        var categoryPhrases = allPhrases.filter(function (p) {
          return p.categoryId === category.id;
        });
        var completedInCategory = ((_completedPhrases$nex = completedPhrases[nextIndex]) == null ? void 0 : _completedPhrases$nex.length) || 0;
        if (completedInCategory < categoryPhrases.length) {
          return {
            v: nextIndex
          };
        }
      },
      _ret;
    for (var i = 1; i <= numCategories; i++) {
      _ret = _loop();
      if (_ret) return _ret.v;
    }
    return -1;
  }, [categories, categoryIndex, allPhrases, completedPhrases]);
  var handleNext = (0, _react.useCallback)(function () {
    markPhraseAsCompleted(categoryIndex, phraseIndex);
    if (phraseIndex < totalPhrasesInCategory - 1) {
      goToNextPhrase();
    } else {
      var nextCategoryIndex = findNextUncompletedCategory();
      if (nextCategoryIndex === -1) {
        _reactNative.Alert.alert("Félicitations", "Vous avez terminé tous les exercices de phrases !");
        return {
          completed: true
        };
      } else {
        changeCategory(nextCategoryIndex);
      }
    }
    return {
      completed: false
    };
  }, [categoryIndex, phraseIndex, totalPhrasesInCategory, markPhraseAsCompleted, goToNextPhrase, findNextUncompletedCategory, changeCategory]);
  var handlePrevious = (0, _react.useCallback)(function () {
    goToPreviousPhrase();
  }, [goToPreviousPhrase]);
  var getStats = (0, _react.useCallback)(function () {
    var _completedPhrases$cat;
    var totalPhrases = allPhrases.length;
    var completedPhrasesCount = Object.values(completedPhrases).reduce(function (sum, completed) {
      return sum + ((completed == null ? void 0 : completed.length) || 0);
    }, 0);
    var totalProgress = totalPhrases > 0 ? Math.round(completedPhrasesCount / totalPhrases * 100) : 0;
    var completionProgress = totalPhrasesInCategory > 0 ? (phraseIndex + 1) / totalPhrasesInCategory * 100 : 0;
    return {
      totalPhrases: totalPhrases,
      completedPhrasesCount: completedPhrasesCount,
      totalProgress: totalProgress,
      completionProgress: completionProgress,
      completedInCurrentCategory: ((_completedPhrases$cat = completedPhrases[categoryIndex]) == null ? void 0 : _completedPhrases$cat.length) || 0,
      totalInCurrentCategory: totalPhrasesInCategory
    };
  }, [allPhrases, completedPhrases, totalPhrasesInCategory, phraseIndex, categoryIndex]);
  var getDisplayData = (0, _react.useCallback)(function () {
    var phraseCounter = `${phraseIndex + 1} / ${totalPhrasesInCategory || 0}`;
    var categoriesNames = categories.map(function (cat) {
      return cat.name;
    });
    return {
      phraseCounter: phraseCounter,
      categories: categoriesNames,
      currentPhrase: currentPhrase,
      currentCategory: currentCategory,
      currentPhrases: currentPhrases
    };
  }, [phraseIndex, totalPhrasesInCategory, categories, currentPhrase, currentCategory, currentPhrases]);
  var hasValidData = (phrasesData == null ? void 0 : phrasesData.categories) && Array.isArray(phrasesData.categories) && phrasesData.categories.length > 0;
  var canGoToPrevious = phraseIndex > 0;
  var isLastPhraseInCategory = phraseIndex === totalPhrasesInCategory - 1;
  return {
    categoryIndex: categoryIndex,
    phraseIndex: phraseIndex,
    showTranslation: showTranslation,
    completedPhrases: completedPhrases,
    loaded: loaded,
    showDetailedProgress: showDetailedProgress,
    currentPhrase: currentPhrase,
    currentCategory: currentCategory,
    currentPhrases: currentPhrases,
    totalCategories: totalCategories,
    totalPhrasesInCategory: totalPhrasesInCategory,
    hasValidData: hasValidData,
    changeCategory: changeCategory,
    toggleTranslation: toggleTranslation,
    toggleDetailedProgress: toggleDetailedProgress,
    handleNext: handleNext,
    handlePrevious: handlePrevious,
    canGoToPrevious: canGoToPrevious,
    isLastPhraseInCategory: isLastPhraseInCategory,
    stats: getStats(),
    display: getDisplayData()
  };
};
var _default = exports.default = usePhrases;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,