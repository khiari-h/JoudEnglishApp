c81cc0fe477dd8ce90aef088e324f34c
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NativeReanimated = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _checkCppVersion = require("../platform-specific/checkCppVersion");
var _jsVersion = require("../platform-specific/jsVersion");
var _valueUnpacker = require("../valueUnpacker");
var _PlatformChecker = require("../PlatformChecker");
var _fabricUtils = require("../fabricUtils");
var _NativeReanimatedModule = _interopRequireDefault(require("../specs/NativeReanimatedModule"));
var _errors = require("../errors");
function assertSingleReanimatedInstance() {
  if (global._REANIMATED_VERSION_JS !== undefined && global._REANIMATED_VERSION_JS !== _jsVersion.jsVersion) {
    throw new _errors.ReanimatedError(`Another instance of Reanimated was detected.
See \`https://docs.swmansion.com/react-native-reanimated/docs/guides/troubleshooting#another-instance-of-reanimated-was-detected\` for more details. Previous: ${global._REANIMATED_VERSION_JS}, current: ${_jsVersion.jsVersion}.`);
  }
}
var NativeReanimated = exports.NativeReanimated = function () {
  function NativeReanimated() {
    (0, _classCallCheck2.default)(this, NativeReanimated);
    if (__DEV__) {
      assertSingleReanimatedInstance();
    }
    global._REANIMATED_VERSION_JS = _jsVersion.jsVersion;
    if (global.__reanimatedModuleProxy === undefined) {
      var valueUnpackerCode = (0, _valueUnpacker.getValueUnpackerCode)();
      _NativeReanimatedModule.default == null || _NativeReanimatedModule.default.installTurboModule(valueUnpackerCode);
    }
    if (global.__reanimatedModuleProxy === undefined) {
      throw new _errors.ReanimatedError(`Native part of Reanimated doesn't seem to be initialized.
See https://docs.swmansion.com/react-native-reanimated/docs/guides/troubleshooting#native-part-of-reanimated-doesnt-seem-to-be-initialized for more details.`);
    }
    if (__DEV__) {
      (0, _checkCppVersion.checkCppVersion)();
    }
    this.InnerNativeModule = global.__reanimatedModuleProxy;
  }
  return (0, _createClass2.default)(NativeReanimated, [{
    key: "makeShareableClone",
    value: function makeShareableClone(value, shouldPersistRemote, nativeStateSource) {
      return this.InnerNativeModule.makeShareableClone(value, shouldPersistRemote, nativeStateSource);
    }
  }, {
    key: "scheduleOnUI",
    value: function scheduleOnUI(shareable) {
      return this.InnerNativeModule.scheduleOnUI(shareable);
    }
  }, {
    key: "executeOnUIRuntimeSync",
    value: function executeOnUIRuntimeSync(shareable) {
      return this.InnerNativeModule.executeOnUIRuntimeSync(shareable);
    }
  }, {
    key: "createWorkletRuntime",
    value: function createWorkletRuntime(name, initializer) {
      return this.InnerNativeModule.createWorkletRuntime(name, initializer);
    }
  }, {
    key: "scheduleOnRuntime",
    value: function scheduleOnRuntime(workletRuntime, shareableWorklet) {
      return this.InnerNativeModule.scheduleOnRuntime(workletRuntime, shareableWorklet);
    }
  }, {
    key: "registerSensor",
    value: function registerSensor(sensorType, interval, iosReferenceFrame, handler) {
      return this.InnerNativeModule.registerSensor(sensorType, interval, iosReferenceFrame, handler);
    }
  }, {
    key: "unregisterSensor",
    value: function unregisterSensor(sensorId) {
      return this.InnerNativeModule.unregisterSensor(sensorId);
    }
  }, {
    key: "registerEventHandler",
    value: function registerEventHandler(eventHandler, eventName, emitterReactTag) {
      return this.InnerNativeModule.registerEventHandler(eventHandler, eventName, emitterReactTag);
    }
  }, {
    key: "unregisterEventHandler",
    value: function unregisterEventHandler(id) {
      return this.InnerNativeModule.unregisterEventHandler(id);
    }
  }, {
    key: "getViewProp",
    value: function getViewProp(viewTag, propName, component, callback) {
      var shadowNodeWrapper;
      if ((0, _PlatformChecker.isFabric)()) {
        shadowNodeWrapper = (0, _fabricUtils.getShadowNodeWrapperFromRef)(component);
        return this.InnerNativeModule.getViewProp(shadowNodeWrapper, propName, callback);
      }
      return this.InnerNativeModule.getViewProp(viewTag, propName, callback);
    }
  }, {
    key: "configureLayoutAnimationBatch",
    value: function configureLayoutAnimationBatch(layoutAnimationsBatch) {
      this.InnerNativeModule.configureLayoutAnimationBatch(layoutAnimationsBatch);
    }
  }, {
    key: "setShouldAnimateExitingForTag",
    value: function setShouldAnimateExitingForTag(viewTag, shouldAnimate) {
      this.InnerNativeModule.setShouldAnimateExitingForTag(viewTag, shouldAnimate);
    }
  }, {
    key: "enableLayoutAnimations",
    value: function enableLayoutAnimations(flag) {
      this.InnerNativeModule.enableLayoutAnimations(flag);
    }
  }, {
    key: "configureProps",
    value: function configureProps(uiProps, nativeProps) {
      this.InnerNativeModule.configureProps(uiProps, nativeProps);
    }
  }, {
    key: "subscribeForKeyboardEvents",
    value: function subscribeForKeyboardEvents(handler, isStatusBarTranslucent, isNavigationBarTranslucent) {
      return this.InnerNativeModule.subscribeForKeyboardEvents(handler, isStatusBarTranslucent, isNavigationBarTranslucent);
    }
  }, {
    key: "unsubscribeFromKeyboardEvents",
    value: function unsubscribeFromKeyboardEvents(listenerId) {
      this.InnerNativeModule.unsubscribeFromKeyboardEvents(listenerId);
    }
  }]);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,