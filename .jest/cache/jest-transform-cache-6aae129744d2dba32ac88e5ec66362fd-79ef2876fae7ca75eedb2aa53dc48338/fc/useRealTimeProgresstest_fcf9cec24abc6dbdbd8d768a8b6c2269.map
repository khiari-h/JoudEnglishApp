{"version":3,"names":["_getJestObj","mock","getItem","jest","fn","getVocabularyData","_interopRequireDefault","require","_asyncToGenerator2","_reactHooks","_asyncStorage","_useRealTimeProgress","_require3","describe","mockVocabularyData","exercises","words","word","beforeEach","clearAllMocks","_require","mockReturnValue","it","default","AsyncStorage","mockResolvedValue","_renderHook","renderHook","useRealTimeProgress","result","waitForNextUpdate","expect","current","isLoading","toBe","levelProgress","toBeDefined","exerciseProgress","mockStorageData","completedWords","mockImplementation","key","Promise","resolve","JSON","stringify","_renderHook2","getExerciseProgress","_renderHook3","_require2","_renderHook4","mockGrammarData","completedExercises","_renderHook5","mockReadingData","completedQuestions","_renderHook6","mockSpellingData","_renderHook7","mockPhrasesData","completedPhrases","_renderHook8","mockConversationData","completedScenarios","completed","completedAt","_renderHook9","mockErrorCorrectionData","_renderHook0","mockWordGamesData","_renderHook1","mockAssessmentData","_renderHook10","_renderHook11","_renderHook12","getLevelProgress","toBeGreaterThan","toBeLessThanOrEqual","_renderHook13","hasVocabularyStarted","hasVocabularyFastStarted","_renderHook14","hasProgress","_renderHook15","_renderHook16","act","refresh","mockRejectedValue","Error","_renderHook17","reject","_renderHook18","_renderHook19"],"sources":["useRealTimeProgress.test.js"],"sourcesContent":["// __tests__/hooks/useRealTimeProgress.test.js\nimport { renderHook, act } from '@testing-library/react-hooks';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport useRealTimeProgress from '../../src/hooks/useRealTimeProgress';\n\n// Mock AsyncStorage\njest.mock('@react-native-async-storage/async-storage', () => ({\n  getItem: jest.fn(),\n}));\n\n// Mock vocabularyDataHelper\njest.mock('../../src/utils/vocabulary/vocabularyDataHelper', () => ({\n  getVocabularyData: jest.fn()\n}));\n\ndescribe('useRealTimeProgress', () => {\n  const mockVocabularyData = {\n    exercises: [\n      { words: [{ word: 'hello' }, { word: 'world' }] }, // 2 mots\n      { words: [{ word: 'test' }] } // 1 mot\n    ]\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Mock par défaut pour getVocabularyData\n    const { getVocabularyData } = require('../../src/utils/vocabulary/vocabularyDataHelper');\n    getVocabularyData.mockReturnValue(mockVocabularyData);\n  });\n\n  describe('Initialisation', () => {\n    it('devrait initialiser avec les bonnes valeurs par défaut', async () => {\n      AsyncStorage.getItem.mockResolvedValue(null);\n\n      const { result, waitForNextUpdate } = renderHook(() => useRealTimeProgress());\n\n      expect(result.current.isLoading).toBe(true);\n\n      await waitForNextUpdate();\n\n      expect(result.current.isLoading).toBe(false);\n      expect(result.current.levelProgress).toBeDefined();\n      expect(result.current.exerciseProgress).toBeDefined();\n    });\n  });\n\n  describe('Calcul de progression vocabulaire', () => {\n    it('devrait calculer correctement la progression vocabulaire classic', async () => {\n      const mockStorageData = {\n        completedWords: {\n          '0': ['word1', 'word2'], // 2 mots complétés dans catégorie 0\n          '1': ['word3'] // 1 mot complété dans catégorie 1\n        }\n      };\n\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key === 'vocabulary_1_classic') {\n          return Promise.resolve(JSON.stringify(mockStorageData));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { result, waitForNextUpdate } = renderHook(() => useRealTimeProgress());\n\n      await waitForNextUpdate();\n\n      // Total: 3 mots (2+1), Complétés: 3 mots (2+1) = 100%\n      expect(result.current.getExerciseProgress('vocabulary', '1')).toBe(100);\n    });\n\n    it('devrait calculer correctement la progression vocabulaire fast', async () => {\n      const mockStorageData = {\n        completedWords: {\n          '0': ['word1'] // 1 mot complété sur 2\n        }\n      };\n\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key === 'vocabulary_2_fast') {\n          return Promise.resolve(JSON.stringify(mockStorageData));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { result, waitForNextUpdate } = renderHook(() => useRealTimeProgress());\n\n      await waitForNextUpdate();\n\n      // Total: 3 mots, Complétés: 1 mot = 33%\n      expect(result.current.getExerciseProgress('vocabulary_fast', '2')).toBe(33);\n    });\n\n    it('devrait retourner 0% si aucune donnée vocabulaire', async () => {\n      AsyncStorage.getItem.mockResolvedValue(null);\n\n      const { getVocabularyData } = require('../../src/utils/vocabulary/vocabularyDataHelper');\n      getVocabularyData.mockReturnValue(null);\n\n      const { result, waitForNextUpdate } = renderHook(() => useRealTimeProgress());\n\n      await waitForNextUpdate();\n\n      expect(result.current.getExerciseProgress('vocabulary', '1')).toBe(0);\n    });\n  });\n\n  describe('Calcul de progression grammaire', () => {\n    it('devrait calculer la progression grammaire', async () => {\n      const mockGrammarData = {\n        completedExercises: {\n          '0': [1, 2, 3], // 3 exercices complétés\n          '1': [1, 2] // 2 exercices complétés\n        }\n      };\n\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key === 'grammar_3') {\n          return Promise.resolve(JSON.stringify(mockGrammarData));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { result, waitForNextUpdate } = renderHook(() => useRealTimeProgress());\n\n      await waitForNextUpdate();\n\n      // Total complétés: 5, Estimation: 20 exercices par niveau = 25%\n      expect(result.current.getExerciseProgress('grammar', '3')).toBe(25);\n    });\n  });\n\n  describe('Calcul de progression lecture', () => {\n    it('devrait calculer la progression lecture', async () => {\n      const mockReadingData = {\n        completedQuestions: {\n          '0': [1, 2, 3, 4, 5] // 5 questions complétées\n        }\n      };\n\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key === 'reading_4') {\n          return Promise.resolve(JSON.stringify(mockReadingData));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { result, waitForNextUpdate } = renderHook(() => useRealTimeProgress());\n\n      await waitForNextUpdate();\n\n      // 5 questions sur 15 estimées = 33%\n      expect(result.current.getExerciseProgress('reading', '4')).toBe(33);\n    });\n  });\n\n  describe('Calcul de progression orthographe', () => {\n    it('devrait calculer la progression orthographe', async () => {\n      const mockSpellingData = {\n        completedExercises: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] // 10 exercices\n      };\n\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key === 'spelling_5_correction') {\n          return Promise.resolve(JSON.stringify(mockSpellingData));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { result, waitForNextUpdate } = renderHook(() => useRealTimeProgress());\n\n      await waitForNextUpdate();\n\n      // 10 exercices sur 25 estimés = 40%\n      expect(result.current.getExerciseProgress('spelling', '5')).toBe(40);\n    });\n  });\n\n  describe('Calcul de progression phrases', () => {\n    it('devrait calculer la progression phrases', async () => {\n      const mockPhrasesData = {\n        completedPhrases: {\n          '0': [1, 2, 3], // 3 phrases\n          '1': [1, 2, 3, 4, 5, 6] // 6 phrases\n        }\n      };\n\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key === 'phrases_6') {\n          return Promise.resolve(JSON.stringify(mockPhrasesData));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { result, waitForNextUpdate } = renderHook(() => useRealTimeProgress());\n\n      await waitForNextUpdate();\n\n      // 9 phrases sur 30 estimées = 30%\n      expect(result.current.getExerciseProgress('phrases', '6')).toBe(30);\n    });\n  });\n\n  describe('Calcul de progression conversations', () => {\n    it('devrait calculer la progression conversations', async () => {\n      const mockConversationData = {\n        completedScenarios: {\n          'scenario1': { completed: true },\n          'scenario2': { completedAt: '2022-01-01' },\n          'scenario3': { completed: false },\n          'scenario4': null\n        }\n      };\n\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key === 'conversation_1') {\n          return Promise.resolve(JSON.stringify(mockConversationData));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { result, waitForNextUpdate } = renderHook(() => useRealTimeProgress());\n\n      await waitForNextUpdate();\n\n      // 2 scénarios complétés sur 8 estimés = 25%\n      expect(result.current.getExerciseProgress('conversations', '1')).toBe(25);\n    });\n  });\n\n  describe('Calcul de progression correction d\\'erreurs', () => {\n    it('devrait calculer la progression correction d\\'erreurs', async () => {\n      const mockErrorCorrectionData = {\n        completedExercises: {\n          '0': [1, 2, 3, 4], // 4 exercices\n          '1': [1, 2] // 2 exercices\n        }\n      };\n\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key === 'error_correction_2') {\n          return Promise.resolve(JSON.stringify(mockErrorCorrectionData));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { result, waitForNextUpdate } = renderHook(() => useRealTimeProgress());\n\n      await waitForNextUpdate();\n\n      // 6 exercices sur 20 estimés = 30%\n      expect(result.current.getExerciseProgress('errorCorrection', '2')).toBe(30);\n    });\n  });\n\n  describe('Calcul de progression jeux de mots', () => {\n    it('devrait calculer la progression jeux de mots', async () => {\n      const mockWordGamesData = {\n        'game1': { completed: true },\n        'game2': { completed: true },\n        'game3': { completed: false }\n      };\n\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key === 'word_games_completed_3') {\n          return Promise.resolve(JSON.stringify(mockWordGamesData));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { result, waitForNextUpdate } = renderHook(() => useRealTimeProgress());\n\n      await waitForNextUpdate();\n\n      // 2 jeux complétés sur 10 estimés = 20%\n      expect(result.current.getExerciseProgress('wordGames', '3')).toBe(20);\n    });\n  });\n\n  describe('Calcul de progression évaluation', () => {\n    it('devrait calculer la progression évaluation (complétée)', async () => {\n      const mockAssessmentData = {\n        completedAt: '2022-01-01T00:00:00.000Z'\n      };\n\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key === 'assessment_results_4') {\n          return Promise.resolve(JSON.stringify(mockAssessmentData));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { result, waitForNextUpdate } = renderHook(() => useRealTimeProgress());\n\n      await waitForNextUpdate();\n\n      expect(result.current.getExerciseProgress('assessment', '4')).toBe(100);\n    });\n\n    it('devrait calculer la progression évaluation (non complétée)', async () => {\n      const mockAssessmentData = {};\n\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key === 'assessment_results_5') {\n          return Promise.resolve(JSON.stringify(mockAssessmentData));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { result, waitForNextUpdate } = renderHook(() => useRealTimeProgress());\n\n      await waitForNextUpdate();\n\n      expect(result.current.getExerciseProgress('assessment', '5')).toBe(0);\n    });\n  });\n\n  describe('Calcul de progression par niveau', () => {\n    it('devrait calculer la progression globale d\\'un niveau', async () => {\n      // Mock pour avoir des progressions variées\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key === 'vocabulary_1_classic') {\n          return Promise.resolve(JSON.stringify({\n            completedWords: { '0': ['word1', 'word2'] } // 2/3 = 67%\n          }));\n        }\n        if (key === 'grammar_1') {\n          return Promise.resolve(JSON.stringify({\n            completedExercises: { '0': [1, 2, 3, 4, 5] } // 5/20 = 25%\n          }));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { result, waitForNextUpdate } = renderHook(() => useRealTimeProgress());\n\n      await waitForNextUpdate();\n\n      // Moyenne de toutes les progressions du niveau 1\n      const levelProgress = result.current.getLevelProgress('1');\n      expect(levelProgress).toBeGreaterThan(0);\n      expect(levelProgress).toBeLessThanOrEqual(100);\n    });\n  });\n\n  describe('Fonctions utilitaires', () => {\n    it('devrait détecter si un exercice a commencé', async () => {\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key === 'vocabulary_1_classic') {\n          return Promise.resolve(JSON.stringify({\n            completedWords: { '0': ['word1'] }\n          }));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { result, waitForNextUpdate } = renderHook(() => useRealTimeProgress());\n\n      await waitForNextUpdate();\n\n      expect(result.current.hasVocabularyStarted('1')).toBe(true);\n      expect(result.current.hasVocabularyStarted('2')).toBe(false);\n      expect(result.current.hasVocabularyFastStarted('1')).toBe(false);\n    });\n\n    it('devrait détecter la progression générale', async () => {\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key === 'reading_1') {\n          return Promise.resolve(JSON.stringify({\n            completedQuestions: { '0': [1, 2, 3] }\n          }));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { result, waitForNextUpdate } = renderHook(() => useRealTimeProgress());\n\n      await waitForNextUpdate();\n\n      expect(result.current.hasProgress('reading', '1')).toBe(true);\n      expect(result.current.hasProgress('reading', '2')).toBe(false);\n      expect(result.current.hasProgress('grammar', '1')).toBe(false);\n    });\n  });\n\n  describe('Gestion du niveau bonus', () => {\n    it('devrait traiter seulement certains exercices pour le niveau bonus', async () => {\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key === 'reading_bonus') {\n          return Promise.resolve(JSON.stringify({\n            completedQuestions: { '0': [1, 2, 3] }\n          }));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { result, waitForNextUpdate } = renderHook(() => useRealTimeProgress());\n\n      await waitForNextUpdate();\n\n      // Le niveau bonus devrait avoir une progression\n      expect(result.current.getLevelProgress('bonus')).toBeGreaterThan(0);\n      \n      // Mais pas tous les types d'exercices\n      expect(result.current.getExerciseProgress('grammar', 'bonus')).toBe(0);\n      expect(result.current.getExerciseProgress('reading', 'bonus')).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Fonction refresh', () => {\n    it('devrait permettre de recalculer la progression', async () => {\n      AsyncStorage.getItem.mockResolvedValue(null);\n\n      const { result, waitForNextUpdate } = renderHook(() => useRealTimeProgress());\n      await waitForNextUpdate();\n\n      expect(result.current.getLevelProgress('1')).toBe(0);\n\n      // Changer les données mockées\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key === 'vocabulary_1_classic') {\n          return Promise.resolve(JSON.stringify({\n            completedWords: { '0': ['word1'] }\n          }));\n        }\n        return Promise.resolve(null);\n      });\n\n      await act(async () => {\n        result.current.refresh();\n      });\n\n      expect(result.current.getLevelProgress('1')).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Gestion des erreurs', () => {\n    it('devrait gérer les erreurs AsyncStorage gracieusement', async () => {\n      AsyncStorage.getItem.mockRejectedValue(new Error('Storage error'));\n\n      const { result, waitForNextUpdate } = renderHook(() => useRealTimeProgress());\n\n      await waitForNextUpdate();\n\n      expect(result.current.isLoading).toBe(false);\n      expect(result.current.getLevelProgress('1')).toBe(0);\n    });\n\n    it('devrait continuer même si un exercice échoue', async () => {\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key === 'vocabulary_1_classic') {\n          return Promise.reject(new Error('Vocabulary error'));\n        }\n        if (key === 'grammar_1') {\n          return Promise.resolve(JSON.stringify({\n            completedExercises: { '0': [1, 2, 3] }\n          }));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { result, waitForNextUpdate } = renderHook(() => useRealTimeProgress());\n\n      await waitForNextUpdate();\n\n      // Devrait avoir la progression de grammaire malgré l'erreur de vocabulaire\n      expect(result.current.getExerciseProgress('grammar', '1')).toBeGreaterThan(0);\n      expect(result.current.getExerciseProgress('vocabulary', '1')).toBe(0);\n    });\n  });\n\n  describe('Limitation des pourcentages', () => {\n    it('ne devrait jamais dépasser 100%', async () => {\n      // Mock avec plus de mots complétés que disponibles\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key === 'vocabulary_1_classic') {\n          return Promise.resolve(JSON.stringify({\n            completedWords: {\n              '0': ['w1', 'w2', 'w3', 'w4', 'w5'], // Plus que les 2 mots disponibles\n              '1': ['w6', 'w7', 'w8', 'w9', 'w10'] // Plus que le 1 mot disponible\n            }\n          }));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { result, waitForNextUpdate } = renderHook(() => useRealTimeProgress());\n\n      await waitForNextUpdate();\n\n      expect(result.current.getExerciseProgress('vocabulary', '1')).toBe(100);\n      expect(result.current.getLevelProgress('1')).toBeLessThanOrEqual(100);\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}