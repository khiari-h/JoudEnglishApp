ca341e5feb0a5201cada88176252a998
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn()
  };
});
_getJestObj().mock('../../src/utils/vocabulary/vocabularyDataHelper', function () {
  return {
    getVocabularyData: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactHooks = require("@testing-library/react-hooks");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useRealTimeProgress = _interopRequireDefault(require("../../src/hooks/useRealTimeProgress"));
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useRealTimeProgress', function () {
  var mockVocabularyData = {
    exercises: [{
      words: [{
        word: 'hello'
      }, {
        word: 'world'
      }]
    }, {
      words: [{
        word: 'test'
      }]
    }]
  };
  beforeEach(function () {
    jest.clearAllMocks();
    var _require = require('../../src/utils/vocabulary/vocabularyDataHelper'),
      getVocabularyData = _require.getVocabularyData;
    getVocabularyData.mockReturnValue(mockVocabularyData);
  });
  describe('Initialisation', function () {
    it('devrait initialiser avec les bonnes valeurs par défaut', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook = (0, _reactHooks.renderHook)(function () {
          return (0, _useRealTimeProgress.default)();
        }),
        result = _renderHook.result,
        waitForNextUpdate = _renderHook.waitForNextUpdate;
      expect(result.current.isLoading).toBe(true);
      yield waitForNextUpdate();
      expect(result.current.isLoading).toBe(false);
      expect(result.current.levelProgress).toBeDefined();
      expect(result.current.exerciseProgress).toBeDefined();
    }));
  });
  describe('Calcul de progression vocabulaire', function () {
    it('devrait calculer correctement la progression vocabulaire classic', (0, _asyncToGenerator2.default)(function* () {
      var mockStorageData = {
        completedWords: {
          '0': ['word1', 'word2'],
          '1': ['word3']
        }
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_1_classic') {
          return Promise.resolve(JSON.stringify(mockStorageData));
        }
        return Promise.resolve(null);
      });
      var _renderHook2 = (0, _reactHooks.renderHook)(function () {
          return (0, _useRealTimeProgress.default)();
        }),
        result = _renderHook2.result,
        waitForNextUpdate = _renderHook2.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.getExerciseProgress('vocabulary', '1')).toBe(100);
    }));
    it('devrait calculer correctement la progression vocabulaire fast', (0, _asyncToGenerator2.default)(function* () {
      var mockStorageData = {
        completedWords: {
          '0': ['word1']
        }
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_2_fast') {
          return Promise.resolve(JSON.stringify(mockStorageData));
        }
        return Promise.resolve(null);
      });
      var _renderHook3 = (0, _reactHooks.renderHook)(function () {
          return (0, _useRealTimeProgress.default)();
        }),
        result = _renderHook3.result,
        waitForNextUpdate = _renderHook3.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.getExerciseProgress('vocabulary_fast', '2')).toBe(33);
    }));
    it('devrait retourner 0% si aucune donnée vocabulaire', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _require2 = require('../../src/utils/vocabulary/vocabularyDataHelper'),
        getVocabularyData = _require2.getVocabularyData;
      getVocabularyData.mockReturnValue(null);
      var _renderHook4 = (0, _reactHooks.renderHook)(function () {
          return (0, _useRealTimeProgress.default)();
        }),
        result = _renderHook4.result,
        waitForNextUpdate = _renderHook4.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.getExerciseProgress('vocabulary', '1')).toBe(0);
    }));
  });
  describe('Calcul de progression grammaire', function () {
    it('devrait calculer la progression grammaire', (0, _asyncToGenerator2.default)(function* () {
      var mockGrammarData = {
        completedExercises: {
          '0': [1, 2, 3],
          '1': [1, 2]
        }
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'grammar_3') {
          return Promise.resolve(JSON.stringify(mockGrammarData));
        }
        return Promise.resolve(null);
      });
      var _renderHook5 = (0, _reactHooks.renderHook)(function () {
          return (0, _useRealTimeProgress.default)();
        }),
        result = _renderHook5.result,
        waitForNextUpdate = _renderHook5.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.getExerciseProgress('grammar', '3')).toBe(25);
    }));
  });
  describe('Calcul de progression lecture', function () {
    it('devrait calculer la progression lecture', (0, _asyncToGenerator2.default)(function* () {
      var mockReadingData = {
        completedQuestions: {
          '0': [1, 2, 3, 4, 5]
        }
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'reading_4') {
          return Promise.resolve(JSON.stringify(mockReadingData));
        }
        return Promise.resolve(null);
      });
      var _renderHook6 = (0, _reactHooks.renderHook)(function () {
          return (0, _useRealTimeProgress.default)();
        }),
        result = _renderHook6.result,
        waitForNextUpdate = _renderHook6.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.getExerciseProgress('reading', '4')).toBe(33);
    }));
  });
  describe('Calcul de progression orthographe', function () {
    it('devrait calculer la progression orthographe', (0, _asyncToGenerator2.default)(function* () {
      var mockSpellingData = {
        completedExercises: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'spelling_5_correction') {
          return Promise.resolve(JSON.stringify(mockSpellingData));
        }
        return Promise.resolve(null);
      });
      var _renderHook7 = (0, _reactHooks.renderHook)(function () {
          return (0, _useRealTimeProgress.default)();
        }),
        result = _renderHook7.result,
        waitForNextUpdate = _renderHook7.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.getExerciseProgress('spelling', '5')).toBe(40);
    }));
  });
  describe('Calcul de progression phrases', function () {
    it('devrait calculer la progression phrases', (0, _asyncToGenerator2.default)(function* () {
      var mockPhrasesData = {
        completedPhrases: {
          '0': [1, 2, 3],
          '1': [1, 2, 3, 4, 5, 6]
        }
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'phrases_6') {
          return Promise.resolve(JSON.stringify(mockPhrasesData));
        }
        return Promise.resolve(null);
      });
      var _renderHook8 = (0, _reactHooks.renderHook)(function () {
          return (0, _useRealTimeProgress.default)();
        }),
        result = _renderHook8.result,
        waitForNextUpdate = _renderHook8.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.getExerciseProgress('phrases', '6')).toBe(30);
    }));
  });
  describe('Calcul de progression conversations', function () {
    it('devrait calculer la progression conversations', (0, _asyncToGenerator2.default)(function* () {
      var mockConversationData = {
        completedScenarios: {
          'scenario1': {
            completed: true
          },
          'scenario2': {
            completedAt: '2022-01-01'
          },
          'scenario3': {
            completed: false
          },
          'scenario4': null
        }
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'conversation_1') {
          return Promise.resolve(JSON.stringify(mockConversationData));
        }
        return Promise.resolve(null);
      });
      var _renderHook9 = (0, _reactHooks.renderHook)(function () {
          return (0, _useRealTimeProgress.default)();
        }),
        result = _renderHook9.result,
        waitForNextUpdate = _renderHook9.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.getExerciseProgress('conversations', '1')).toBe(25);
    }));
  });
  describe('Calcul de progression correction d\'erreurs', function () {
    it('devrait calculer la progression correction d\'erreurs', (0, _asyncToGenerator2.default)(function* () {
      var mockErrorCorrectionData = {
        completedExercises: {
          '0': [1, 2, 3, 4],
          '1': [1, 2]
        }
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'error_correction_2') {
          return Promise.resolve(JSON.stringify(mockErrorCorrectionData));
        }
        return Promise.resolve(null);
      });
      var _renderHook0 = (0, _reactHooks.renderHook)(function () {
          return (0, _useRealTimeProgress.default)();
        }),
        result = _renderHook0.result,
        waitForNextUpdate = _renderHook0.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.getExerciseProgress('errorCorrection', '2')).toBe(30);
    }));
  });
  describe('Calcul de progression jeux de mots', function () {
    it('devrait calculer la progression jeux de mots', (0, _asyncToGenerator2.default)(function* () {
      var mockWordGamesData = {
        'game1': {
          completed: true
        },
        'game2': {
          completed: true
        },
        'game3': {
          completed: false
        }
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'word_games_completed_3') {
          return Promise.resolve(JSON.stringify(mockWordGamesData));
        }
        return Promise.resolve(null);
      });
      var _renderHook1 = (0, _reactHooks.renderHook)(function () {
          return (0, _useRealTimeProgress.default)();
        }),
        result = _renderHook1.result,
        waitForNextUpdate = _renderHook1.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.getExerciseProgress('wordGames', '3')).toBe(20);
    }));
  });
  describe('Calcul de progression évaluation', function () {
    it('devrait calculer la progression évaluation (complétée)', (0, _asyncToGenerator2.default)(function* () {
      var mockAssessmentData = {
        completedAt: '2022-01-01T00:00:00.000Z'
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'assessment_results_4') {
          return Promise.resolve(JSON.stringify(mockAssessmentData));
        }
        return Promise.resolve(null);
      });
      var _renderHook10 = (0, _reactHooks.renderHook)(function () {
          return (0, _useRealTimeProgress.default)();
        }),
        result = _renderHook10.result,
        waitForNextUpdate = _renderHook10.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.getExerciseProgress('assessment', '4')).toBe(100);
    }));
    it('devrait calculer la progression évaluation (non complétée)', (0, _asyncToGenerator2.default)(function* () {
      var mockAssessmentData = {};
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'assessment_results_5') {
          return Promise.resolve(JSON.stringify(mockAssessmentData));
        }
        return Promise.resolve(null);
      });
      var _renderHook11 = (0, _reactHooks.renderHook)(function () {
          return (0, _useRealTimeProgress.default)();
        }),
        result = _renderHook11.result,
        waitForNextUpdate = _renderHook11.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.getExerciseProgress('assessment', '5')).toBe(0);
    }));
  });
  describe('Calcul de progression par niveau', function () {
    it('devrait calculer la progression globale d\'un niveau', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_1_classic') {
          return Promise.resolve(JSON.stringify({
            completedWords: {
              '0': ['word1', 'word2']
            }
          }));
        }
        if (key === 'grammar_1') {
          return Promise.resolve(JSON.stringify({
            completedExercises: {
              '0': [1, 2, 3, 4, 5]
            }
          }));
        }
        return Promise.resolve(null);
      });
      var _renderHook12 = (0, _reactHooks.renderHook)(function () {
          return (0, _useRealTimeProgress.default)();
        }),
        result = _renderHook12.result,
        waitForNextUpdate = _renderHook12.waitForNextUpdate;
      yield waitForNextUpdate();
      var levelProgress = result.current.getLevelProgress('1');
      expect(levelProgress).toBeGreaterThan(0);
      expect(levelProgress).toBeLessThanOrEqual(100);
    }));
  });
  describe('Fonctions utilitaires', function () {
    it('devrait détecter si un exercice a commencé', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_1_classic') {
          return Promise.resolve(JSON.stringify({
            completedWords: {
              '0': ['word1']
            }
          }));
        }
        return Promise.resolve(null);
      });
      var _renderHook13 = (0, _reactHooks.renderHook)(function () {
          return (0, _useRealTimeProgress.default)();
        }),
        result = _renderHook13.result,
        waitForNextUpdate = _renderHook13.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.hasVocabularyStarted('1')).toBe(true);
      expect(result.current.hasVocabularyStarted('2')).toBe(false);
      expect(result.current.hasVocabularyFastStarted('1')).toBe(false);
    }));
    it('devrait détecter la progression générale', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'reading_1') {
          return Promise.resolve(JSON.stringify({
            completedQuestions: {
              '0': [1, 2, 3]
            }
          }));
        }
        return Promise.resolve(null);
      });
      var _renderHook14 = (0, _reactHooks.renderHook)(function () {
          return (0, _useRealTimeProgress.default)();
        }),
        result = _renderHook14.result,
        waitForNextUpdate = _renderHook14.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.hasProgress('reading', '1')).toBe(true);
      expect(result.current.hasProgress('reading', '2')).toBe(false);
      expect(result.current.hasProgress('grammar', '1')).toBe(false);
    }));
  });
  describe('Gestion du niveau bonus', function () {
    it('devrait traiter seulement certains exercices pour le niveau bonus', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'reading_bonus') {
          return Promise.resolve(JSON.stringify({
            completedQuestions: {
              '0': [1, 2, 3]
            }
          }));
        }
        return Promise.resolve(null);
      });
      var _renderHook15 = (0, _reactHooks.renderHook)(function () {
          return (0, _useRealTimeProgress.default)();
        }),
        result = _renderHook15.result,
        waitForNextUpdate = _renderHook15.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.getLevelProgress('bonus')).toBeGreaterThan(0);
      expect(result.current.getExerciseProgress('grammar', 'bonus')).toBe(0);
      expect(result.current.getExerciseProgress('reading', 'bonus')).toBeGreaterThan(0);
    }));
  });
  describe('Fonction refresh', function () {
    it('devrait permettre de recalculer la progression', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook16 = (0, _reactHooks.renderHook)(function () {
          return (0, _useRealTimeProgress.default)();
        }),
        result = _renderHook16.result,
        waitForNextUpdate = _renderHook16.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.getLevelProgress('1')).toBe(0);
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_1_classic') {
          return Promise.resolve(JSON.stringify({
            completedWords: {
              '0': ['word1']
            }
          }));
        }
        return Promise.resolve(null);
      });
      yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
        result.current.refresh();
      }));
      expect(result.current.getLevelProgress('1')).toBeGreaterThan(0);
    }));
  });
  describe('Gestion des erreurs', function () {
    it('devrait gérer les erreurs AsyncStorage gracieusement', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockRejectedValue(new Error('Storage error'));
      var _renderHook17 = (0, _reactHooks.renderHook)(function () {
          return (0, _useRealTimeProgress.default)();
        }),
        result = _renderHook17.result,
        waitForNextUpdate = _renderHook17.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.isLoading).toBe(false);
      expect(result.current.getLevelProgress('1')).toBe(0);
    }));
    it('devrait continuer même si un exercice échoue', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_1_classic') {
          return Promise.reject(new Error('Vocabulary error'));
        }
        if (key === 'grammar_1') {
          return Promise.resolve(JSON.stringify({
            completedExercises: {
              '0': [1, 2, 3]
            }
          }));
        }
        return Promise.resolve(null);
      });
      var _renderHook18 = (0, _reactHooks.renderHook)(function () {
          return (0, _useRealTimeProgress.default)();
        }),
        result = _renderHook18.result,
        waitForNextUpdate = _renderHook18.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.getExerciseProgress('grammar', '1')).toBeGreaterThan(0);
      expect(result.current.getExerciseProgress('vocabulary', '1')).toBe(0);
    }));
  });
  describe('Limitation des pourcentages', function () {
    it('ne devrait jamais dépasser 100%', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'vocabulary_1_classic') {
          return Promise.resolve(JSON.stringify({
            completedWords: {
              '0': ['w1', 'w2', 'w3', 'w4', 'w5'],
              '1': ['w6', 'w7', 'w8', 'w9', 'w10']
            }
          }));
        }
        return Promise.resolve(null);
      });
      var _renderHook19 = (0, _reactHooks.renderHook)(function () {
          return (0, _useRealTimeProgress.default)();
        }),
        result = _renderHook19.result,
        waitForNextUpdate = _renderHook19.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.getExerciseProgress('vocabulary', '1')).toBe(100);
      expect(result.current.getLevelProgress('1')).toBeLessThanOrEqual(100);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,