{"version":3,"names":["_getJestObj","mock","Object","assign","jest","requireActual","useNavigation","navigate","fn","goBack","useRoute","params","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_layout","_AppProvider","_jsxRuntime","_require","describe","it","default","_render","render","jsx","AppProvider","children","getByText","findByText","fireEvent","press","recommendedLevel","expect","toBeTruthy","levelB1"],"sources":["assessment-and-placement.test.js"],"sourcesContent":["import React from 'react';\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\nimport App from '../../app/_layout';\nimport { AppProvider } from '../../src/contexts/AppProvider';\n\n\njest.mock('@react-navigation/native', () => ({\n  ...jest.requireActual('@react-navigation/native'),\n  useNavigation: () => ({\n    navigate: jest.fn(),\n    goBack: jest.fn(),\n  }),\n  useRoute: () => ({\n    params: {},\n  }),\n}));\n\ndescribe('Assessment and Placement Integration Test', () => {\n  it('should place the user at the correct level based on assessment results', async () => {\n    const { getByText, findByText } = render(\n      <AppProvider>\n          <App />\n      </AppProvider>\n    );\n\n    // 1. Démarrer le test de niveau\n    fireEvent.press(getByText(/Commencer le test de niveau/i));\n\n    // 2. Simuler les réponses au test\n    // (Cette partie dépend de la structure de votre test de niveau)\n    // Exemple : répondre correctement à des questions pour un niveau B1\n    fireEvent.press(getByText(/Réponse A/i)); // Simulez les réponses\n    fireEvent.press(getByText(/Réponse B/i));\n    // ... continuez pour toutes les questions\n\n    // 3. Terminer le test\n    fireEvent.press(getByText(/Terminer le test/i));\n\n    // 4. Vérifier que l'utilisateur est redirigé vers le bon niveau\n    const recommendedLevel = await findByText(/Niveau recommandé : B1/i);\n    expect(recommendedLevel).toBeTruthy();\n\n    // 5. Naviguer vers la sélection de niveau pour confirmer\n    fireEvent.press(getByText(/Continuer/i));\n    const levelB1 = await findByText(/Niveau B1/i);\n    expect(levelB1).toBeTruthy();\n  });\n});"],"mappings":"AAMAA,WAAA,GAAKC,IAAI,CAAC,0BAA0B,EAAE;EAAA,OAAAC,MAAA,CAAAC,MAAA,KACjCC,IAAI,CAACC,aAAa,CAAC,0BAA0B,CAAC;IACjDC,aAAa,EAAE,SAAfA,aAAaA,CAAA;MAAA,OAAS;QACpBC,QAAQ,EAAEH,IAAI,CAACI,EAAE,CAAC,CAAC;QACnBC,MAAM,EAAEL,IAAI,CAACI,EAAE,CAAC;MAClB,CAAC;IAAA,CAAC;IACFE,QAAQ,EAAE,SAAVA,QAAQA,CAAA;MAAA,OAAS;QACfC,MAAM,EAAE,CAAC;MACX,CAAC;IAAA;EAAC;AAAA,CACF,CAAC;AAAC,IAAAC,sBAAA,GAAAC,OAAA;AAAA,IAAAC,kBAAA,GAAAF,sBAAA,CAAAC,OAAA;AAfJ,IAAAE,MAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,YAAA,GAAAH,OAAA;AACA,IAAAI,OAAA,GAAAL,sBAAA,CAAAC,OAAA;AACA,IAAAK,YAAA,GAAAL,OAAA;AAA6D,IAAAM,WAAA,GAAAN,OAAA;AAAA,SAAAb,YAAA;EAAA,IAAAoB,QAAA,GAAAP,OAAA;IAAAT,IAAA,GAAAgB,QAAA,CAAAhB,IAAA;EAAAJ,WAAA,YAAAA,YAAA;IAAA,OAAAI,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAc7DiB,QAAQ,CAAC,2CAA2C,EAAE,YAAM;EAC1DC,EAAE,CAAC,wEAAwE,MAAAR,kBAAA,CAAAS,OAAA,EAAE,aAAY;IACvF,IAAAC,OAAA,GAAkC,IAAAC,mBAAM,EACtC,IAAAN,WAAA,CAAAO,GAAA,EAACR,YAAA,CAAAS,WAAW;QAAAC,QAAA,EACR,IAAAT,WAAA,CAAAO,GAAA,EAACT,OAAA,CAAAM,OAAG,IAAE;MAAC,CACE,CACf,CAAC;MAJOM,SAAS,GAAAL,OAAA,CAATK,SAAS;MAAEC,UAAU,GAAAN,OAAA,CAAVM,UAAU;IAO7BC,sBAAS,CAACC,KAAK,CAACH,SAAS,CAAC,8BAA8B,CAAC,CAAC;IAK1DE,sBAAS,CAACC,KAAK,CAACH,SAAS,CAAC,YAAY,CAAC,CAAC;IACxCE,sBAAS,CAACC,KAAK,CAACH,SAAS,CAAC,YAAY,CAAC,CAAC;IAIxCE,sBAAS,CAACC,KAAK,CAACH,SAAS,CAAC,mBAAmB,CAAC,CAAC;IAG/C,IAAMI,gBAAgB,SAASH,UAAU,CAAC,yBAAyB,CAAC;IACpEI,MAAM,CAACD,gBAAgB,CAAC,CAACE,UAAU,CAAC,CAAC;IAGrCJ,sBAAS,CAACC,KAAK,CAACH,SAAS,CAAC,YAAY,CAAC,CAAC;IACxC,IAAMO,OAAO,SAASN,UAAU,CAAC,YAAY,CAAC;IAC9CI,MAAM,CAACE,OAAO,CAAC,CAACD,UAAU,CAAC,CAAC;EAC9B,CAAC,EAAC;AACJ,CAAC,CAAC","ignoreList":[]}