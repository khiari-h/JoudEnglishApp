d9c04d29e83546cd68b67ec33553c5d5
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    },
    useRoute: function useRoute() {
      return {
        params: {}
      };
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _layout = _interopRequireDefault(require("../../app/_layout"));
var _AppProvider = require("../../src/contexts/AppProvider");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Assessment and Placement Integration Test', function () {
  it('should place the user at the correct level based on assessment results', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AppProvider.AppProvider, {
        children: (0, _jsxRuntime.jsx)(_layout.default, {})
      })),
      getByText = _render.getByText,
      findByText = _render.findByText;
    _reactNative.fireEvent.press(getByText(/Commencer le test de niveau/i));
    _reactNative.fireEvent.press(getByText(/Réponse A/i));
    _reactNative.fireEvent.press(getByText(/Réponse B/i));
    _reactNative.fireEvent.press(getByText(/Terminer le test/i));
    var recommendedLevel = yield findByText(/Niveau recommandé : B1/i);
    expect(recommendedLevel).toBeTruthy();
    _reactNative.fireEvent.press(getByText(/Continuer/i));
    var levelB1 = yield findByText(/Niveau B1/i);
    expect(levelB1).toBeTruthy();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsInVzZU5hdmlnYXRpb24iLCJuYXZpZ2F0ZSIsImZuIiwiZ29CYWNrIiwidXNlUm91dGUiLCJwYXJhbXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9sYXlvdXQiLCJfQXBwUHJvdmlkZXIiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwiZGVzY3JpYmUiLCJpdCIsImRlZmF1bHQiLCJfcmVuZGVyIiwicmVuZGVyIiwianN4IiwiQXBwUHJvdmlkZXIiLCJjaGlsZHJlbiIsImdldEJ5VGV4dCIsImZpbmRCeVRleHQiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInJlY29tbWVuZGVkTGV2ZWwiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwibGV2ZWxCMSJdLCJzb3VyY2VzIjpbImFzc2Vzc21lbnQtYW5kLXBsYWNlbWVudC50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCwgd2FpdEZvciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCBBcHAgZnJvbSAnLi4vLi4vYXBwL19sYXlvdXQnO1xuaW1wb3J0IHsgQXBwUHJvdmlkZXIgfSBmcm9tICcuLi8uLi9zcmMvY29udGV4dHMvQXBwUHJvdmlkZXInO1xuXG5cbmplc3QubW9jaygnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJywgKCkgPT4gKHtcbiAgLi4uamVzdC5yZXF1aXJlQWN0dWFsKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnKSxcbiAgdXNlTmF2aWdhdGlvbjogKCkgPT4gKHtcbiAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxuICAgIGdvQmFjazogamVzdC5mbigpLFxuICB9KSxcbiAgdXNlUm91dGU6ICgpID0+ICh7XG4gICAgcGFyYW1zOiB7fSxcbiAgfSksXG59KSk7XG5cbmRlc2NyaWJlKCdBc3Nlc3NtZW50IGFuZCBQbGFjZW1lbnQgSW50ZWdyYXRpb24gVGVzdCcsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCBwbGFjZSB0aGUgdXNlciBhdCB0aGUgY29ycmVjdCBsZXZlbCBiYXNlZCBvbiBhc3Nlc3NtZW50IHJlc3VsdHMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQsIGZpbmRCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgIDxBcHBQcm92aWRlcj5cbiAgICAgICAgICA8QXBwIC8+XG4gICAgICA8L0FwcFByb3ZpZGVyPlxuICAgICk7XG5cbiAgICAvLyAxLiBEw6ltYXJyZXIgbGUgdGVzdCBkZSBuaXZlYXVcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KC9Db21tZW5jZXIgbGUgdGVzdCBkZSBuaXZlYXUvaSkpO1xuXG4gICAgLy8gMi4gU2ltdWxlciBsZXMgcsOpcG9uc2VzIGF1IHRlc3RcbiAgICAvLyAoQ2V0dGUgcGFydGllIGTDqXBlbmQgZGUgbGEgc3RydWN0dXJlIGRlIHZvdHJlIHRlc3QgZGUgbml2ZWF1KVxuICAgIC8vIEV4ZW1wbGUgOiByw6lwb25kcmUgY29ycmVjdGVtZW50IMOgIGRlcyBxdWVzdGlvbnMgcG91ciB1biBuaXZlYXUgQjFcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KC9Sw6lwb25zZSBBL2kpKTsgLy8gU2ltdWxleiBsZXMgcsOpcG9uc2VzXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgvUsOpcG9uc2UgQi9pKSk7XG4gICAgLy8gLi4uIGNvbnRpbnVleiBwb3VyIHRvdXRlcyBsZXMgcXVlc3Rpb25zXG5cbiAgICAvLyAzLiBUZXJtaW5lciBsZSB0ZXN0XG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgvVGVybWluZXIgbGUgdGVzdC9pKSk7XG5cbiAgICAvLyA0LiBWw6lyaWZpZXIgcXVlIGwndXRpbGlzYXRldXIgZXN0IHJlZGlyaWfDqSB2ZXJzIGxlIGJvbiBuaXZlYXVcbiAgICBjb25zdCByZWNvbW1lbmRlZExldmVsID0gYXdhaXQgZmluZEJ5VGV4dCgvTml2ZWF1IHJlY29tbWFuZMOpIDogQjEvaSk7XG4gICAgZXhwZWN0KHJlY29tbWVuZGVkTGV2ZWwpLnRvQmVUcnV0aHkoKTtcblxuICAgIC8vIDUuIE5hdmlndWVyIHZlcnMgbGEgc8OpbGVjdGlvbiBkZSBuaXZlYXUgcG91ciBjb25maXJtZXJcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KC9Db250aW51ZXIvaSkpO1xuICAgIGNvbnN0IGxldmVsQjEgPSBhd2FpdCBmaW5kQnlUZXh0KC9OaXZlYXUgQjEvaSk7XG4gICAgZXhwZWN0KGxldmVsQjEpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiJBQU1BQSxXQUFBLEdBQUtDLElBQUksQ0FBQywwQkFBMEIsRUFBRTtFQUFBLE9BQUFDLE1BQUEsQ0FBQUMsTUFBQSxLQUNqQ0MsSUFBSSxDQUFDQyxhQUFhLENBQUMsMEJBQTBCLENBQUM7SUFDakRDLGFBQWEsRUFBRSxTQUFmQSxhQUFhQSxDQUFBO01BQUEsT0FBUztRQUNwQkMsUUFBUSxFQUFFSCxJQUFJLENBQUNJLEVBQUUsQ0FBQyxDQUFDO1FBQ25CQyxNQUFNLEVBQUVMLElBQUksQ0FBQ0ksRUFBRSxDQUFDO01BQ2xCLENBQUM7SUFBQSxDQUFDO0lBQ0ZFLFFBQVEsRUFBRSxTQUFWQSxRQUFRQSxDQUFBO01BQUEsT0FBUztRQUNmQyxNQUFNLEVBQUUsQ0FBQztNQUNYLENBQUM7SUFBQTtFQUFDO0FBQUEsQ0FDRixDQUFDO0FBQUMsSUFBQUMsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLGtCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFmSixJQUFBRSxNQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxZQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxPQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSyxZQUFBLEdBQUFMLE9BQUE7QUFBNkQsSUFBQU0sV0FBQSxHQUFBTixPQUFBO0FBQUEsU0FBQWIsWUFBQTtFQUFBLElBQUFvQixRQUFBLEdBQUFQLE9BQUE7SUFBQVQsSUFBQSxHQUFBZ0IsUUFBQSxDQUFBaEIsSUFBQTtFQUFBSixXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBSSxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFjN0RpQixRQUFRLENBQUMsMkNBQTJDLEVBQUUsWUFBTTtFQUMxREMsRUFBRSxDQUFDLHdFQUF3RSxNQUFBUixrQkFBQSxDQUFBUyxPQUFBLEVBQUUsYUFBWTtJQUN2RixJQUFBQyxPQUFBLEdBQWtDLElBQUFDLG1CQUFNLEVBQ3RDLElBQUFOLFdBQUEsQ0FBQU8sR0FBQSxFQUFDUixZQUFBLENBQUFTLFdBQVc7UUFBQUMsUUFBQSxFQUNSLElBQUFULFdBQUEsQ0FBQU8sR0FBQSxFQUFDVCxPQUFBLENBQUFNLE9BQUcsSUFBRTtNQUFDLENBQ0UsQ0FDZixDQUFDO01BSk9NLFNBQVMsR0FBQUwsT0FBQSxDQUFUSyxTQUFTO01BQUVDLFVBQVUsR0FBQU4sT0FBQSxDQUFWTSxVQUFVO0lBTzdCQyxzQkFBUyxDQUFDQyxLQUFLLENBQUNILFNBQVMsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0lBSzFERSxzQkFBUyxDQUFDQyxLQUFLLENBQUNILFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN4Q0Usc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDSCxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7SUFJeENFLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0gsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFHL0MsSUFBTUksZ0JBQWdCLFNBQVNILFVBQVUsQ0FBQyx5QkFBeUIsQ0FBQztJQUNwRUksTUFBTSxDQUFDRCxnQkFBZ0IsQ0FBQyxDQUFDRSxVQUFVLENBQUMsQ0FBQztJQUdyQ0osc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDSCxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDeEMsSUFBTU8sT0FBTyxTQUFTTixVQUFVLENBQUMsWUFBWSxDQUFDO0lBQzlDSSxNQUFNLENBQUNFLE9BQU8sQ0FBQyxDQUFDRCxVQUFVLENBQUMsQ0FBQztFQUM5QixDQUFDLEVBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=