eb25a30800d2be4e43d64250b4dd52a8
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _MaterialCommunityIcons = _interopRequireDefault(require("react-native-vector-icons/MaterialCommunityIcons"));
var _NavigationButtons = _interopRequireDefault(require("../../../components/exercise-common/NavigationButtons"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
var QuizContent = function QuizContent(_ref) {
  var currentQuestion = _ref.currentQuestion,
    selectedAnswer = _ref.selectedAnswer,
    showResult = _ref.showResult,
    handleAnswer = _ref.handleAnswer,
    handleContinue = _ref.handleContinue,
    colors = _ref.colors,
    localStyles = _ref.localStyles;
  if (!currentQuestion) {
    return null;
  }
  var isAnswerCorrect = showResult && selectedAnswer === currentQuestion.correctAnswer;
  var feedbackColor = isAnswerCorrect ? '#10B981' : '#EF4444';
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: {
      flex: 1,
      justifyContent: 'space-between'
    },
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: localStyles.questionSection,
        children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: [localStyles.questionCard, {
            borderColor: colors.primary
          }],
          children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: localStyles.questionLabelContainer,
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: [localStyles.questionLabel, {
                color: colors.textSecondary
              }],
              children: "Traduisez ce mot :"
            })
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [localStyles.wordToTranslate, {
              color: colors.text
            }],
            children: currentQuestion.word
          })]
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: localStyles.choicesSection,
        children: currentQuestion.choices.map(function (choice, index) {
          var isSelected = selectedAnswer === choice;
          var isCorrectAnswer = choice === currentQuestion.correctAnswer;
          var buttonStyle = [localStyles.choiceButton];
          var textStyle = [localStyles.choiceText, {
            color: colors.text
          }];
          var icon = null;
          if (showResult) {
            if (isCorrectAnswer) {
              buttonStyle.push(localStyles.choiceCorrect);
              textStyle.push(localStyles.choiceTextCorrect);
              icon = (0, _jsxRuntime.jsx)(_MaterialCommunityIcons.default, {
                name: "check-circle",
                style: [localStyles.choiceIcon, {
                  color: '#10B981'
                }]
              });
            } else if (isSelected && !isCorrectAnswer) {
              buttonStyle.push(localStyles.choiceWrong);
              textStyle.push(localStyles.choiceTextWrong);
              icon = (0, _jsxRuntime.jsx)(_MaterialCommunityIcons.default, {
                name: "close-circle",
                style: [localStyles.choiceIcon, {
                  color: '#EF4444'
                }]
              });
            }
          }
          return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            style: buttonStyle,
            onPress: function onPress() {
              return handleAnswer(choice);
            },
            disabled: showResult,
            children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: localStyles.choiceButtonInner,
              children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
                style: localStyles.choiceNumberContainer,
                children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                  style: localStyles.choiceNumberText,
                  children: index + 1
                })
              }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: textStyle,
                children: choice
              }), icon]
            })
          }, `choice-${choice}-${index}`);
        })
      })]
    }), showResult && (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [localStyles.feedbackContainer, {
        backgroundColor: colors.background
      }],
      children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: localStyles.feedbackMessageRow,
        children: [(0, _jsxRuntime.jsx)(_MaterialCommunityIcons.default, {
          name: isAnswerCorrect ? 'check-circle' : 'information',
          style: [localStyles.feedbackIcon, {
            color: feedbackColor
          }]
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [localStyles.feedbackText, {
            color: feedbackColor
          }],
          children: isAnswerCorrect ? 'Bonne réponse !' : `La bonne réponse était : ${currentQuestion.correctAnswer}`
        })]
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: {
          alignItems: 'center',
          marginTop: 16
        },
        children: (0, _jsxRuntime.jsx)(_NavigationButtons.default, {
          onNext: handleContinue,
          disablePrevious: true,
          disableNext: false,
          primaryColor: isAnswerCorrect ? "#10B981" : "#5E60CE",
          buttonLabels: {
            next: "Continuer",
            finish: "Continuer"
          },
          isLast: false
        })
      })]
    })]
  });
};
QuizContent.propTypes = {
  currentQuestion: _propTypes.default.func.isRequired,
  selectedAnswer: _propTypes.default.any.isRequired,
  showResult: _propTypes.default.bool.isRequired,
  handleAnswer: _propTypes.default.func.isRequired,
  handleContinue: _propTypes.default.func.isRequired,
  colors: _propTypes.default.any.isRequired,
  localStyles: _propTypes.default.any.isRequired
};
var _default = exports.default = QuizContent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9NYXRlcmlhbENvbW11bml0eUljb25zIiwiX05hdmlnYXRpb25CdXR0b25zIiwiX3Byb3BUeXBlcyIsIl9qc3hSdW50aW1lIiwiUXVpekNvbnRlbnQiLCJfcmVmIiwiY3VycmVudFF1ZXN0aW9uIiwic2VsZWN0ZWRBbnN3ZXIiLCJzaG93UmVzdWx0IiwiaGFuZGxlQW5zd2VyIiwiaGFuZGxlQ29udGludWUiLCJjb2xvcnMiLCJsb2NhbFN0eWxlcyIsImlzQW5zd2VyQ29ycmVjdCIsImNvcnJlY3RBbnN3ZXIiLCJmZWVkYmFja0NvbG9yIiwianN4cyIsIlZpZXciLCJzdHlsZSIsImZsZXgiLCJqdXN0aWZ5Q29udGVudCIsImNoaWxkcmVuIiwianN4IiwicXVlc3Rpb25TZWN0aW9uIiwicXVlc3Rpb25DYXJkIiwiYm9yZGVyQ29sb3IiLCJwcmltYXJ5IiwicXVlc3Rpb25MYWJlbENvbnRhaW5lciIsIlRleHQiLCJxdWVzdGlvbkxhYmVsIiwiY29sb3IiLCJ0ZXh0U2Vjb25kYXJ5Iiwid29yZFRvVHJhbnNsYXRlIiwidGV4dCIsIndvcmQiLCJjaG9pY2VzU2VjdGlvbiIsImNob2ljZXMiLCJtYXAiLCJjaG9pY2UiLCJpbmRleCIsImlzU2VsZWN0ZWQiLCJpc0NvcnJlY3RBbnN3ZXIiLCJidXR0b25TdHlsZSIsImNob2ljZUJ1dHRvbiIsInRleHRTdHlsZSIsImNob2ljZVRleHQiLCJpY29uIiwicHVzaCIsImNob2ljZUNvcnJlY3QiLCJjaG9pY2VUZXh0Q29ycmVjdCIsImRlZmF1bHQiLCJuYW1lIiwiY2hvaWNlSWNvbiIsImNob2ljZVdyb25nIiwiY2hvaWNlVGV4dFdyb25nIiwiVG91Y2hhYmxlT3BhY2l0eSIsIm9uUHJlc3MiLCJkaXNhYmxlZCIsImNob2ljZUJ1dHRvbklubmVyIiwiY2hvaWNlTnVtYmVyQ29udGFpbmVyIiwiY2hvaWNlTnVtYmVyVGV4dCIsImZlZWRiYWNrQ29udGFpbmVyIiwiYmFja2dyb3VuZENvbG9yIiwiYmFja2dyb3VuZCIsImZlZWRiYWNrTWVzc2FnZVJvdyIsImZlZWRiYWNrSWNvbiIsImZlZWRiYWNrVGV4dCIsImFsaWduSXRlbXMiLCJtYXJnaW5Ub3AiLCJvbk5leHQiLCJkaXNhYmxlUHJldmlvdXMiLCJkaXNhYmxlTmV4dCIsInByaW1hcnlDb2xvciIsImJ1dHRvbkxhYmVscyIsIm5leHQiLCJmaW5pc2giLCJpc0xhc3QiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJmdW5jIiwiaXNSZXF1aXJlZCIsImFueSIsImJvb2wiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJRdWl6Q29udGVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvc2NyZWVucy9Wb2NhYnVsYXJ5UmV2aXNpb24vY29tcG9uZW50cy9RdWl6Q29udGVudC5qc1xyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBWaWV3LCBUZXh0LCBUb3VjaGFibGVPcGFjaXR5IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcclxuaW1wb3J0IEljb24gZnJvbSAncmVhY3QtbmF0aXZlLXZlY3Rvci1pY29ucy9NYXRlcmlhbENvbW11bml0eUljb25zJztcclxuaW1wb3J0IE5hdmlnYXRpb25CdXR0b25zIGZyb20gJy4uLy4uLy4uL2NvbXBvbmVudHMvZXhlcmNpc2UtY29tbW9uL05hdmlnYXRpb25CdXR0b25zJztpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG4gLy8g4pyFIEltcG9ydCBkdSBjb21wb3NhbnQgTmF2aWdhdGlvbkJ1dHRvbnNcclxuXHJcbmNvbnN0IFF1aXpDb250ZW50ID0gKHtcclxuICBjdXJyZW50UXVlc3Rpb24sXHJcbiAgc2VsZWN0ZWRBbnN3ZXIsXHJcbiAgc2hvd1Jlc3VsdCxcclxuICBoYW5kbGVBbnN3ZXIsXHJcbiAgaGFuZGxlQ29udGludWUsXHJcbiAgY29sb3JzLFxyXG4gIGxvY2FsU3R5bGVzLFxyXG59KSA9PiB7XHJcbiAgaWYgKCFjdXJyZW50UXVlc3Rpb24pIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgLy8gRMOpdGVybWluZSBzaSBsYSByw6lwb25zZSBkZSBsJ3V0aWxpc2F0ZXVyIGVzdCBjb3JyZWN0ZVxyXG4gIGNvbnN0IGlzQW5zd2VyQ29ycmVjdCA9IHNob3dSZXN1bHQgJiYgc2VsZWN0ZWRBbnN3ZXIgPT09IGN1cnJlbnRRdWVzdGlvbi5jb3JyZWN0QW5zd2VyO1xyXG5cclxuICAvLyBDb25maWd1cmF0aW9uIGR1IGZlZWRiYWNrXHJcbiAgY29uc3QgZmVlZGJhY2tDb2xvciA9IGlzQW5zd2VyQ29ycmVjdCA/ICcjMTBCOTgxJyA6ICcjRUY0NDQ0JzsgLy8gVmVydCBwb3VyIGNvcnJlY3QsIFJvdWdlIHBvdXIgaW5jb3JyZWN0XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8VmlldyBzdHlsZT17eyBmbGV4OiAxLCBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nIH19PlxyXG4gICAgICA8Vmlldz5cclxuICAgICAgICB7LyogUXVlc3Rpb24gQ2FyZCAqL31cclxuICAgICAgICA8VmlldyBzdHlsZT17bG9jYWxTdHlsZXMucXVlc3Rpb25TZWN0aW9ufT5cclxuICAgICAgICAgIDxWaWV3IHN0eWxlPXtbbG9jYWxTdHlsZXMucXVlc3Rpb25DYXJkLCB7IGJvcmRlckNvbG9yOiBjb2xvcnMucHJpbWFyeSB9XX0+XHJcbiAgICAgICAgICAgIDxWaWV3IHN0eWxlPXtsb2NhbFN0eWxlcy5xdWVzdGlvbkxhYmVsQ29udGFpbmVyfT5cclxuICAgICAgICAgICAgICA8VGV4dCBzdHlsZT17W2xvY2FsU3R5bGVzLnF1ZXN0aW9uTGFiZWwsIHsgY29sb3I6IGNvbG9ycy50ZXh0U2Vjb25kYXJ5IH1dfT5UcmFkdWlzZXogY2UgbW90IDo8L1RleHQ+XHJcbiAgICAgICAgICAgIDwvVmlldz5cclxuICAgICAgICAgICAgPFRleHQgc3R5bGU9e1tsb2NhbFN0eWxlcy53b3JkVG9UcmFuc2xhdGUsIHsgY29sb3I6IGNvbG9ycy50ZXh0IH1dfT57Y3VycmVudFF1ZXN0aW9uLndvcmR9PC9UZXh0PlxyXG4gICAgICAgICAgPC9WaWV3PlxyXG4gICAgICAgIDwvVmlldz5cclxuXHJcbiAgICAgICAgey8qIENob2ljZXMgKi99XHJcbiAgICAgICAgPFZpZXcgc3R5bGU9e2xvY2FsU3R5bGVzLmNob2ljZXNTZWN0aW9ufT5cclxuICAgICAgICAgIHtjdXJyZW50UXVlc3Rpb24uY2hvaWNlcy5tYXAoKGNob2ljZSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaXNTZWxlY3RlZCA9IHNlbGVjdGVkQW5zd2VyID09PSBjaG9pY2U7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzQ29ycmVjdEFuc3dlciA9IGNob2ljZSA9PT0gY3VycmVudFF1ZXN0aW9uLmNvcnJlY3RBbnN3ZXI7XHJcblxyXG4gICAgICAgICAgICBsZXQgYnV0dG9uU3R5bGUgPSBbbG9jYWxTdHlsZXMuY2hvaWNlQnV0dG9uXTtcclxuICAgICAgICAgICAgbGV0IHRleHRTdHlsZSA9IFtsb2NhbFN0eWxlcy5jaG9pY2VUZXh0LCB7IGNvbG9yOiBjb2xvcnMudGV4dCB9XTtcclxuICAgICAgICAgICAgbGV0IGljb24gPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgaWYgKHNob3dSZXN1bHQpIHtcclxuICAgICAgICAgICAgICBpZiAoaXNDb3JyZWN0QW5zd2VyKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBTdXJsaWduZSBsYSBib25uZSByw6lwb25zZSBlbiB2ZXJ0XHJcbiAgICAgICAgICAgICAgICBidXR0b25TdHlsZS5wdXNoKGxvY2FsU3R5bGVzLmNob2ljZUNvcnJlY3QpO1xyXG4gICAgICAgICAgICAgICAgdGV4dFN0eWxlLnB1c2gobG9jYWxTdHlsZXMuY2hvaWNlVGV4dENvcnJlY3QpO1xyXG4gICAgICAgICAgICAgICAgaWNvbiA9IDxJY29uIG5hbWU9XCJjaGVjay1jaXJjbGVcIiBzdHlsZT17W2xvY2FsU3R5bGVzLmNob2ljZUljb24sIHsgY29sb3I6ICcjMTBCOTgxJyB9XX0gLz47XHJcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc1NlbGVjdGVkICYmICFpc0NvcnJlY3RBbnN3ZXIpIHtcclxuICAgICAgICAgICAgICAgIC8vIFN1cmxpZ25lIGxhIG1hdXZhaXNlIHLDqXBvbnNlIGRlIGwndXRpbGlzYXRldXIgZW4gcm91Z2VcclxuICAgICAgICAgICAgICAgIGJ1dHRvblN0eWxlLnB1c2gobG9jYWxTdHlsZXMuY2hvaWNlV3JvbmcpO1xyXG4gICAgICAgICAgICAgICAgdGV4dFN0eWxlLnB1c2gobG9jYWxTdHlsZXMuY2hvaWNlVGV4dFdyb25nKTtcclxuICAgICAgICAgICAgICAgIGljb24gPSA8SWNvbiBuYW1lPVwiY2xvc2UtY2lyY2xlXCIgc3R5bGU9e1tsb2NhbFN0eWxlcy5jaG9pY2VJY29uLCB7IGNvbG9yOiAnI0VGNDQ0NCcgfV19IC8+O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICA8VG91Y2hhYmxlT3BhY2l0eVxyXG4gICAgICAgICAgICAgICAga2V5PXtgY2hvaWNlLSR7Y2hvaWNlfS0ke2luZGV4fWB9XHJcbiAgICAgICAgICAgICAgICBzdHlsZT17YnV0dG9uU3R5bGV9XHJcbiAgICAgICAgICAgICAgICBvblByZXNzPXsoKSA9PiBoYW5kbGVBbnN3ZXIoY2hvaWNlKX1cclxuICAgICAgICAgICAgICAgIGRpc2FibGVkPXtzaG93UmVzdWx0fVxyXG4gICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDxWaWV3IHN0eWxlPXtsb2NhbFN0eWxlcy5jaG9pY2VCdXR0b25Jbm5lcn0+XHJcbiAgICAgICAgICAgICAgICAgIDxWaWV3IHN0eWxlPXtsb2NhbFN0eWxlcy5jaG9pY2VOdW1iZXJDb250YWluZXJ9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxUZXh0IHN0eWxlPXtsb2NhbFN0eWxlcy5jaG9pY2VOdW1iZXJUZXh0fT57aW5kZXggKyAxfTwvVGV4dD5cclxuICAgICAgICAgICAgICAgICAgPC9WaWV3PlxyXG4gICAgICAgICAgICAgICAgICA8VGV4dCBzdHlsZT17dGV4dFN0eWxlfT57Y2hvaWNlfTwvVGV4dD5cclxuICAgICAgICAgICAgICAgICAge2ljb259XHJcbiAgICAgICAgICAgICAgICA8L1ZpZXc+XHJcbiAgICAgICAgICAgICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgfSl9XHJcbiAgICAgICAgPC9WaWV3PlxyXG4gICAgICA8L1ZpZXc+XHJcblxyXG4gICAgICB7LyogQ29udGludWUgQnV0dG9uIDogQXBwYXJhw650IHNldWxlbWVudCBhcHLDqHMgdW5lIHLDqXBvbnNlICovfVxyXG4gICAgICB7c2hvd1Jlc3VsdCAmJiAoXHJcbiAgICAgICAgPFZpZXcgc3R5bGU9e1tsb2NhbFN0eWxlcy5mZWVkYmFja0NvbnRhaW5lciwgeyBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9ycy5iYWNrZ3JvdW5kIH1dfT5cclxuICAgICAgICAgIHsvKiBNZXNzYWdlIGRlIGZlZWRiYWNrICovfVxyXG4gICAgICAgICAgPFZpZXcgc3R5bGU9e2xvY2FsU3R5bGVzLmZlZWRiYWNrTWVzc2FnZVJvd30+XHJcbiAgICAgICAgICAgIDxJY29uXHJcbiAgICAgICAgICAgICAgbmFtZT17aXNBbnN3ZXJDb3JyZWN0ID8gJ2NoZWNrLWNpcmNsZScgOiAnaW5mb3JtYXRpb24nfVxyXG4gICAgICAgICAgICAgIHN0eWxlPXtbbG9jYWxTdHlsZXMuZmVlZGJhY2tJY29uLCB7IGNvbG9yOiBmZWVkYmFja0NvbG9yIH1dfVxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8VGV4dCBzdHlsZT17W2xvY2FsU3R5bGVzLmZlZWRiYWNrVGV4dCwgeyBjb2xvcjogZmVlZGJhY2tDb2xvciB9XX0+XHJcbiAgICAgICAgICAgICAge2lzQW5zd2VyQ29ycmVjdFxyXG4gICAgICAgICAgICAgICAgPyAnQm9ubmUgcsOpcG9uc2UgISdcclxuICAgICAgICAgICAgICAgIDogYExhIGJvbm5lIHLDqXBvbnNlIMOpdGFpdCA6ICR7Y3VycmVudFF1ZXN0aW9uLmNvcnJlY3RBbnN3ZXJ9YFxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgPC9UZXh0PlxyXG4gICAgICAgICAgPC9WaWV3PlxyXG5cclxuICAgICAgICAgIHsvKiDinIUgTmF2aWdhdGlvbkJ1dHRvbnMgY2VudHLDqSBwb3VyIHVuZSBtZWlsbGV1cmUgVVggKi99XHJcbiAgICAgICAgICA8VmlldyBzdHlsZT17eyBhbGlnbkl0ZW1zOiAnY2VudGVyJywgbWFyZ2luVG9wOiAxNiB9fT5cclxuICAgICAgICAgICAgPE5hdmlnYXRpb25CdXR0b25zXHJcbiAgICAgICAgICAgICAgb25OZXh0PXtoYW5kbGVDb250aW51ZX1cclxuICAgICAgICAgICAgICBkaXNhYmxlUHJldmlvdXM9e3RydWV9IC8vIFBhcyBkZSBib3V0b24gcHLDqWPDqWRlbnQgZGFucyBsZSBxdWl6XHJcbiAgICAgICAgICAgICAgZGlzYWJsZU5leHQ9e2ZhbHNlfVxyXG4gICAgICAgICAgICAgIHByaW1hcnlDb2xvcj17aXNBbnN3ZXJDb3JyZWN0ID8gXCIjMTBCOTgxXCIgOiBcIiM1RTYwQ0VcIn0gLy8gVmVydCBzaSBjb3JyZWN0LCB2aW9sZXQgc2lub25cclxuICAgICAgICAgICAgICBidXR0b25MYWJlbHM9e3tcclxuICAgICAgICAgICAgICAgIG5leHQ6IFwiQ29udGludWVyXCIsXHJcbiAgICAgICAgICAgICAgICBmaW5pc2g6IFwiQ29udGludWVyXCJcclxuICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgIGlzTGFzdD17ZmFsc2V9IC8vIFRvdWpvdXJzIFwiQ29udGludWVyXCIsIGphbWFpcyBcIlRlcm1pbmVyXCJcclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgIDwvVmlldz5cclxuICAgICAgICA8L1ZpZXc+XHJcbiAgICAgICl9XHJcbiAgICA8L1ZpZXc+XHJcbiAgKTtcclxufTtcclxuXHJcblxyXG5RdWl6Q29udGVudC5wcm9wVHlwZXMgPSB7XHJcbiAgY3VycmVudFF1ZXN0aW9uOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG4gIHNlbGVjdGVkQW5zd2VyOiBQcm9wVHlwZXMuYW55LmlzUmVxdWlyZWQsXHJcbiAgc2hvd1Jlc3VsdDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcclxuICBoYW5kbGVBbnN3ZXI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcbiAgaGFuZGxlQ29udGludWU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcbiAgY29sb3JzOiBQcm9wVHlwZXMuYW55LmlzUmVxdWlyZWQsXHJcbiAgbG9jYWxTdHlsZXM6IFByb3BUeXBlcy5hbnkuaXNSZXF1aXJlZCxcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFF1aXpDb250ZW50OyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSx1QkFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsa0JBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUFzRixJQUFBSSxVQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFBbUMsSUFBQUssV0FBQSxHQUFBTCxPQUFBO0FBR3pILElBQU1NLFdBQVcsR0FBRyxTQUFkQSxXQUFXQSxDQUFBQyxJQUFBLEVBUVg7RUFBQSxJQVBKQyxlQUFlLEdBQUFELElBQUEsQ0FBZkMsZUFBZTtJQUNmQyxjQUFjLEdBQUFGLElBQUEsQ0FBZEUsY0FBYztJQUNkQyxVQUFVLEdBQUFILElBQUEsQ0FBVkcsVUFBVTtJQUNWQyxZQUFZLEdBQUFKLElBQUEsQ0FBWkksWUFBWTtJ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