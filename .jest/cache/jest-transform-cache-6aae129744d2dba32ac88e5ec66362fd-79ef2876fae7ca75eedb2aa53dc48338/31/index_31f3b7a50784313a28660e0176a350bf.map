{"version":3,"names":["_reactNative","require","_native","_expoRouter","_react","_Container","_interopRequireWildcard","_VocabularyHeader","_interopRequireDefault","_VocabularyCategorySelector","_VocabularyProgress","_VocabularyWordSection","_VocabularyNavigation","_useVocabulary2","_useLastActivity2","_vocabularyDataHelper","_style","_jsxRuntime","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","VocabularyExercise","_ref","route","_ref2","params","level","mode","navigation","useNavigation","styles","createStyles","_useLastActivity","useLastActivity","saveActivity","finalMode","isBonusLevel","levelColor","getLevelColor","_useState","useState","_useState2","_slicedToArray2","vocabularyData","setVocabularyData","useEffect","isMounted","load","_ref3","_asyncToGenerator2","process","env","JEST_WORKER_ID","data","getVocabularyData","loadVocabularyData","apply","arguments","_useVocabulary","useVocabulary","categoryIndex","wordIndex","showTranslation","completedWords","loaded","showDetailedProgress","currentWord","currentCategory","changeCategory","toggleTranslation","toggleDetailedProgress","handleNext","handlePrevious","canGoToPrevious","isLastWordInExercise","display","saveData","totalWords","categories","Array","isArray","reduce","total","cat","_cat$words","words","length","exercises","ex","_ex$words","activityData","title","type","metadata","word","category","name","handleBackPress","useCallback","router","push","pathname","handleCategoryChange","index","handleCategoryProgressPress","handleToggleProgressDetails","handleNextWord","result","completed","goBack","handlePreviousWord","jsx","safeArea","safeAreaEdges","CONTAINER_SAFE_EDGES","ALL","backgroundColor","statusBarStyle","children","View","style","loadingContainer","ActivityIndicator","testID","size","color","jsxs","withScrollView","withPadding","scrollViewProps","showsVerticalScrollIndicator","contentContainerStyle","scrollContent","onBackPress","expanded","onToggleExpand","onCategoryPress","selectedIndex","onSelectCategory","wordCounter","onToggleTranslation","onNext","onPrevious","canGoPrevious","isLast","_default","exports"],"sources":["index.js"],"sourcesContent":["// VocabularyExercise/index.js - BOUCLE INFINIE CORRIGÉE\n\nimport { View, ActivityIndicator } from \"react-native\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { router } from \"expo-router\";\nimport { useEffect, useCallback, useState } from \"react\";\n\nimport Container, { CONTAINER_SAFE_EDGES } from \"../../../components/layout/Container\";\nimport VocabularyHeader from \"./VocabularyHeader\";\nimport VocabularyCategorySelector from \"./VocabularyCategorySelector\";\nimport VocabularyProgress from \"./VocabularyProgress\";\nimport VocabularyWordSection from \"./VocabularyWordSection\";\nimport VocabularyNavigation from \"./VocabularyNavigation\";\n\nimport useVocabulary from \"./hooks/useVocabulary\";\nimport useLastActivity from \"../../../hooks/useLastActivity\";\nimport { isBonusLevel, getLevelColor, getVocabularyData, loadVocabularyData } from \"../../../utils/vocabulary/vocabularyDataHelper\";\nimport createStyles from \"./style\";\n\nconst VocabularyExercise = ({ route }) => {\n  const { level, mode } = route.params || {};\n  const navigation = useNavigation();\n  const styles = createStyles();\n  const { saveActivity } = useLastActivity();\n\n  // Data\n  const finalMode = mode || (isBonusLevel(level) ? \"fast\" : \"classic\");\n  const levelColor = getLevelColor(level);\n  const [vocabularyData, setVocabularyData] = useState(null);\n\n  useEffect(() => {\n    let isMounted = true;\n    const load = async () => {\n      // En environnement de test, charge synchronement pour éviter la latence\n      if (process.env.JEST_WORKER_ID) {\n        const data = getVocabularyData(level, finalMode);\n        if (isMounted) setVocabularyData(data);\n        return;\n      }\n      const data = await loadVocabularyData(level, finalMode);\n      if (isMounted) setVocabularyData(data);\n    };\n    load();\n    return () => {\n      isMounted = false;\n    };\n  }, [level, finalMode]);\n\n  // Hook unifié\n  const {\n    categoryIndex,\n    wordIndex,\n    showTranslation,\n    completedWords,\n    loaded,\n    showDetailedProgress,\n    currentWord,\n    currentCategory,\n    changeCategory,\n    toggleTranslation,\n    toggleDetailedProgress,\n    handleNext,\n    handlePrevious,\n    canGoToPrevious,\n    isLastWordInExercise,\n    display,\n    saveData, // Ajouté ici\n  } = useVocabulary(vocabularyData, level, finalMode);\n\n  // =================== SAUVEGARDE ACTIVITÉ SIMPLIFIÉE ===================\n  \n  useEffect(() => {\n    // ✅ CONDITION SIMPLIFIÉE pour éviter boucle infinie\n    if (!loaded || !vocabularyData || !currentWord) return;\n\n    // ✅ DÉPENDANCES LIMITÉES - seulement wordIndex change\n    let totalWords = 15; // fallback\n    \n    if (vocabularyData.categories && Array.isArray(vocabularyData.categories)) {\n      totalWords = vocabularyData.categories.reduce((total, cat) => total + (cat.words?.length || 0), 0);\n    } else if (vocabularyData.exercises && Array.isArray(vocabularyData.exercises)) {\n      totalWords = vocabularyData.exercises.reduce((total, ex) => total + (ex.words?.length || 0), 0);\n    } else if (vocabularyData.words && Array.isArray(vocabularyData.words)) {\n      totalWords = vocabularyData.words.length;\n    }\n\n    const activityData = {\n      title: `Vocabulaire ${finalMode === \"fast\" ? \"Fast\" : \"\"}`,\n      level,\n      type: \"vocabulary\",\n      mode: finalMode,\n      metadata: {\n        word: wordIndex, // ✅ Index pour progression (0-based)\n        totalWords,\n        category: currentCategory?.name || \"Général\",\n        categoryIndex,\n        wordIndex\n      }\n    };\n\n    saveActivity(activityData);\n  }, [wordIndex]); // ✅ SEULEMENT wordIndex - plus de boucle !\n\n  // Handlers\n  const handleBackPress = useCallback(() => {\n    router.push({\n      pathname: \"/tabs/exerciseSelection\",\n      params: { level }\n    });\n  }, [level]);\n\n  const handleCategoryChange = useCallback((index) => changeCategory(index), [changeCategory]);\n  const handleCategoryProgressPress = useCallback((index) => changeCategory(index), [changeCategory]);\n  const handleToggleProgressDetails = useCallback(() => toggleDetailedProgress(), [toggleDetailedProgress]);\n\n  const handleNextWord = useCallback(async () => {\n    const result = handleNext();\n    // Attendre la sauvegarde avant de naviguer\n    if (typeof saveData === 'function') {\n      await saveData();\n    }\n    if (result.completed) {\n      navigation.goBack();\n    }\n  }, [handleNext, navigation, saveData]);\n\n  const handlePreviousWord = useCallback(() => handlePrevious(), [handlePrevious]);\n\n  // Loading state\n  if (!loaded || !vocabularyData) {\n    return (\n      <Container\n        safeArea\n        safeAreaEdges={CONTAINER_SAFE_EDGES.ALL}\n        backgroundColor=\"#f8fafc\"\n        statusBarStyle=\"dark-content\"\n      >\n        <View style={styles.loadingContainer}>\n          <ActivityIndicator testID=\"activity-indicator\" size=\"large\" color={levelColor} />\n        </View>\n      </Container>\n    );\n  }\n\n  return (\n    <Container\n      safeArea\n      safeAreaEdges={CONTAINER_SAFE_EDGES.ALL}\n      withScrollView\n      backgroundColor=\"#f8fafc\"\n      statusBarStyle=\"dark-content\"\n      withPadding={false}\n      scrollViewProps={{\n        showsVerticalScrollIndicator: false,\n        contentContainerStyle: styles.scrollContent,\n      }}\n    >\n      <VocabularyHeader\n        level={level}\n        mode={finalMode}\n        onBackPress={handleBackPress}\n      />\n\n      <VocabularyProgress\n        vocabularyData={vocabularyData}\n        completedWords={completedWords}\n        levelColor={levelColor}\n        expanded={showDetailedProgress}\n        onToggleExpand={handleToggleProgressDetails}\n        onCategoryPress={handleCategoryProgressPress}\n      />\n\n      <VocabularyCategorySelector\n        categories={display.categories}\n        selectedIndex={categoryIndex}\n        onSelectCategory={handleCategoryChange}\n        levelColor={levelColor}\n      />\n\n      <VocabularyWordSection\n        currentWord={currentWord}\n        wordCounter={display.wordCounter}\n        mode={finalMode}\n        level={level}\n        levelColor={levelColor}\n        showTranslation={showTranslation}\n        onToggleTranslation={toggleTranslation}\n      />\n\n      <VocabularyNavigation\n        onNext={handleNextWord}\n        onPrevious={handlePreviousWord}\n        canGoPrevious={canGoToPrevious}\n        isLast={isLastWordInExercise}\n        levelColor={levelColor}\n      />\n    </Container>\n  );\n};\n\nexport default VocabularyExercise;"],"mappings":"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","ignoreList":[]}