24eab1a47355917a7cde3c8db5af470a
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useComposedEventHandler = useComposedEventHandler;
var _useEvent = require("./useEvent");
var _useHandler2 = require("./useHandler");
var _WorkletEventHandler = require("../WorkletEventHandler");
var _worklet_1580845925693_init_data = {
  code: "function useComposedEventHandlerTs1(event){const{workletsMap}=this.__closure;if(workletsMap[event.eventName]){workletsMap[event.eventName].forEach(function(worklet){return worklet(event);});}}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\hook\\useComposedEventHandler.ts",
  sourceMap: "{\"version\":3,\"names\":[\"useComposedEventHandlerTs1\",\"event\",\"workletsMap\",\"__closure\",\"eventName\",\"forEach\",\"worklet\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/hook/useComposedEventHandler.ts\"],\"mappings\":\"AA4EK,SAAAA,0BAAUA,CAAAC,KAAA,QAAAC,WAAA,OAAAC,SAAA,CAET,GAAID,WAAW,CAACD,KAAK,CAACG,SAAS,CAAC,CAAE,CAChCF,WAAW,CAACD,KAAK,CAACG,SAAS,CAAC,CAACC,OAAO,CAAE,SAAAC,OAAO,QAAK,CAAAA,OAAO,CAACL,KAAK,CAAC,GAAC,CACnE,CACF\",\"ignoreList\":[]}",
  version: "3.16.7"
};
function useComposedEventHandler(handlers) {
  var workletsRecord = {};
  var composedEventNames = new Set();
  var workletsMap = {};
  handlers.filter(function (h) {
    return h !== null;
  }).forEach(function (handler) {
    var _ref = handler,
      workletEventHandler = _ref.workletEventHandler;
    if (workletEventHandler instanceof _WorkletEventHandler.WorkletEventHandler) {
      workletEventHandler.eventNames.forEach(function (eventName) {
        composedEventNames.add(eventName);
        if (workletsMap[eventName]) {
          workletsMap[eventName].push(workletEventHandler.worklet);
        } else {
          workletsMap[eventName] = [workletEventHandler.worklet];
        }
        var handlerName = eventName + `${workletsMap[eventName].length}`;
        workletsRecord[handlerName] = workletEventHandler.worklet;
      });
    }
  });
  var _useHandler = (0, _useHandler2.useHandler)(workletsRecord),
    doDependenciesDiffer = _useHandler.doDependenciesDiffer;
  return (0, _useEvent.useEvent)(function () {
    var _e = [new global.Error(), -2, -27];
    var useComposedEventHandlerTs1 = function useComposedEventHandlerTs1(event) {
      if (workletsMap[event.eventName]) {
        workletsMap[event.eventName].forEach(function (worklet) {
          return worklet(event);
        });
      }
    };
    useComposedEventHandlerTs1.__closure = {
      workletsMap: workletsMap
    };
    useComposedEventHandlerTs1.__workletHash = 1580845925693;
    useComposedEventHandlerTs1.__initData = _worklet_1580845925693_init_data;
    useComposedEventHandlerTs1.__stackDetails = _e;
    return useComposedEventHandlerTs1;
  }(), Array.from(composedEventNames), doDependenciesDiffer);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInVzZUNvbXBvc2VkRXZlbnRIYW5kbGVyIiwiX3VzZUV2ZW50IiwicmVxdWlyZSIsIl91c2VIYW5kbGVyMiIsIl9Xb3JrbGV0RXZlbnRIYW5kbGVyIiwiX3dvcmtsZXRfMTU4MDg0NTkyNTY5M19pbml0X2RhdGEiLCJjb2RlIiwibG9jYXRpb24iLCJzb3VyY2VNYXAiLCJ2ZXJzaW9uIiwiaGFuZGxlcnMiLCJ3b3JrbGV0c1JlY29yZCIsImNvbXBvc2VkRXZlbnROYW1lcyIsIlNldCIsIndvcmtsZXRzTWFwIiwiZmlsdGVyIiwiaCIsImZvckVhY2giLCJoYW5kbGVyIiwiX3JlZiIsIndvcmtsZXRFdmVudEhhbmRsZXIiLCJXb3JrbGV0RXZlbnRIYW5kbGVyIiwiZXZlbnROYW1lcyIsImV2ZW50TmFtZSIsImFkZCIsInB1c2giLCJ3b3JrbGV0IiwiaGFuZGxlck5hbWUiLCJsZW5ndGgiLCJfdXNlSGFuZGxlciIsInVzZUhhbmRsZXIiLCJkb0RlcGVuZGVuY2llc0RpZmZlciIsInVzZUV2ZW50IiwiX2UiLCJnbG9iYWwiLCJFcnJvciIsInVzZUNvbXBvc2VkRXZlbnRIYW5kbGVyVHMxIiwiZXZlbnQiLCJfX2Nsb3N1cmUiLCJfX3dvcmtsZXRIYXNoIiwiX19pbml0RGF0YSIsIl9fc3RhY2tEZXRhaWxzIiwiQXJyYXkiLCJmcm9tIl0sInNvdXJjZXMiOlsidXNlQ29tcG9zZWRFdmVudEhhbmRsZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgdXNlRXZlbnQgfSBmcm9tICcuL3VzZUV2ZW50JztcbmltcG9ydCB7IHVzZUhhbmRsZXIgfSBmcm9tICcuL3VzZUhhbmRsZXInO1xuaW1wb3J0IHsgV29ya2xldEV2ZW50SGFuZGxlciB9IGZyb20gJy4uL1dvcmtsZXRFdmVudEhhbmRsZXInO1xuaW1wb3J0IHR5cGUgeyBSZWFuaW1hdGVkRXZlbnQgfSBmcm9tICcuL2NvbW1vblR5cGVzJztcbmltcG9ydCB0eXBlIHsgV29ya2xldEZ1bmN0aW9uIH0gZnJvbSAnLi4vY29tbW9uVHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBFdmVudEhhbmRsZXJQcm9jZXNzZWQsIEV2ZW50SGFuZGxlckludGVybmFsIH0gZnJvbSAnLi91c2VFdmVudCc7XG5cbnR5cGUgQ29tcG9zZWRIYW5kbGVyUHJvY2Vzc2VkPFxuICBFdmVudCBleHRlbmRzIG9iamVjdCxcbiAgQ29udGV4dCBleHRlbmRzIFJlY29yZDxzdHJpbmcsIHVua25vd24+ID0gUmVjb3JkPHN0cmluZywgdW5rbm93bj4sXG4+ID0gRXZlbnRIYW5kbGVyUHJvY2Vzc2VkPEV2ZW50LCBDb250ZXh0PjtcblxudHlwZSBDb21wb3NlZEhhbmRsZXJJbnRlcm5hbDxFdmVudCBleHRlbmRzIG9iamVjdD4gPVxuICBFdmVudEhhbmRsZXJJbnRlcm5hbDxFdmVudD47XG5cbi8qKlxuICogTGV0cyB5b3UgY29tcG9zZSBtdWx0aXBsZSBldmVudCBoYW5kbGVycyBiYXNlZCBvblxuICogW3VzZUV2ZW50XShodHRwczovL2RvY3Muc3dtYW5zaW9uLmNvbS9yZWFjdC1uYXRpdmUtcmVhbmltYXRlZC9kb2NzL2FkdmFuY2VkL3VzZUV2ZW50KVxuICogaG9vay5cbiAqXG4gKiBAcGFyYW0gaGFuZGxlcnMgLSBBbiBhcnJheSBvZiBldmVudCBoYW5kbGVycyBjcmVhdGVkIHVzaW5nXG4gKiAgIFt1c2VFdmVudF0oaHR0cHM6Ly9kb2NzLnN3bWFuc2lvbi5jb20vcmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWQvZG9jcy9hZHZhbmNlZC91c2VFdmVudClcbiAqICAgaG9vay5cbiAqIEByZXR1cm5zIEFuIG9iamVjdCB5b3UgbmVlZCB0byBwYXNzIHRvIGEgY29yZXNwb25kaW5nIFwib25FdmVudFwiIHByb3Agb24gYW5cbiAqICAgYEFuaW1hdGVkYCBjb21wb25lbnQgKGZvciBleGFtcGxlIGhhbmRsZXJzIHJlc3BvbnNpYmxlIGZvciBgb25TY3JvbGxgIGV2ZW50XG4gKiAgIGdvIHRvIGBvblNjcm9sbGAgcHJvcCkuXG4gKiBAc2VlIGh0dHBzOi8vZG9jcy5zd21hbnNpb24uY29tL3JlYWN0LW5hdGl2ZS1yZWFuaW1hdGVkL2RvY3MvYWR2YW5jZWQvdXNlQ29tcG9zZWRFdmVudEhhbmRsZXJcbiAqL1xuLy8gQHRzLWV4cGVjdC1lcnJvciBUaGlzIG92ZXJsb2FkIGlzIHJlcXVpcmVkIGJ5IG91ciBBUEkuXG5leHBvcnQgZnVuY3Rpb24gdXNlQ29tcG9zZWRFdmVudEhhbmRsZXI8XG4gIEV2ZW50IGV4dGVuZHMgb2JqZWN0LFxuICBDb250ZXh0IGV4dGVuZHMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4sXG4+KFxuICBoYW5kbGVyczogKEV2ZW50SGFuZGxlclByb2Nlc3NlZDxFdmVudCwgQ29udGV4dD4gfCBudWxsKVtdXG4pOiBDb21wb3NlZEhhbmRsZXJQcm9jZXNzZWQ8RXZlbnQsIENvbnRleHQ+O1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlQ29tcG9zZWRFdmVudEhhbmRsZXI8XG4gIEV2ZW50IGV4dGVuZHMgb2JqZWN0LFxuICBDb250ZXh0IGV4dGVuZHMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4sXG4+KGhhbmRsZXJzOiAoRXZlbnRIYW5kbGVyUHJvY2Vzc2VkPEV2ZW50LCBDb250ZXh0PiB8IG51bGwpW10pIHtcbiAgLy8gUmVjb3JkIG9mIGhhbmRsZXJzJyB3b3JrbGV0cyB0byBjYWxjdWxhdGUgZGVwcyBkaWZmcy4gV2UgdXNlIHRoZSByZWNvcmQgdHlwZSB0byBtYXRjaCB0aGUgdXNlSGFuZGxlciBBUEkgcmVxdWlyZW1lbnRzXG4gIGNvbnN0IHdvcmtsZXRzUmVjb3JkOiBSZWNvcmQ8c3RyaW5nLCBXb3JrbGV0RnVuY3Rpb24+ID0ge307XG4gIC8vIFN1bW1lZCBldmVudCBuYW1lcyBmb3IgcmVnaXN0cmF0aW9uXG4gIGNvbnN0IGNvbXBvc2VkRXZlbnROYW1lcyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuICAvLyBNYXAgdGhhdCBob2xkcyB3b3JrbGV0cyBmb3Igc3BlY2lmaWMgaGFuZGxlZCBldmVudHNcbiAgY29uc3Qgd29ya2xldHNNYXA6IHtcbiAgICBba2V5OiBzdHJpbmddOiAoKGV2ZW50OiBSZWFuaW1hdGVkRXZlbnQ8RXZlbnQ+KSA9PiB2b2lkKVtdO1xuICB9ID0ge307XG5cbiAgaGFuZGxlcnNcbiAgICAuZmlsdGVyKChoKSA9PiBoICE9PSBudWxsKVxuICAgIC5mb3JFYWNoKChoYW5kbGVyKSA9PiB7XG4gICAgICAvLyBFdmVudEhhbmRsZXJQcm9jZXNzZWQgaXMgdGhlIHJldHVybiB0eXBlIG9mIHVzZUV2ZW50IGFuZCBoYXMgdG8gYmUgZm9yY2UgY2FzdGVkIHRvIEV2ZW50SGFuZGxlckludGVybmFsLCBiZWNhdXNlIHdlIG5lZWQgV29ya2xldEV2ZW50SGFuZGxlciBvYmplY3RcbiAgICAgIGNvbnN0IHsgd29ya2xldEV2ZW50SGFuZGxlciB9ID1cbiAgICAgICAgaGFuZGxlciBhcyB1bmtub3duIGFzIEV2ZW50SGFuZGxlckludGVybmFsPENvbnRleHQ+O1xuICAgICAgaWYgKHdvcmtsZXRFdmVudEhhbmRsZXIgaW5zdGFuY2VvZiBXb3JrbGV0RXZlbnRIYW5kbGVyKSB7XG4gICAgICAgIHdvcmtsZXRFdmVudEhhbmRsZXIuZXZlbnROYW1lcy5mb3JFYWNoKChldmVudE5hbWUpID0+IHtcbiAgICAgICAgICBjb21wb3NlZEV2ZW50TmFtZXMuYWRkKGV2ZW50TmFtZSk7XG5cbiAgICAgICAgICBpZiAod29ya2xldHNNYXBbZXZlbnROYW1lXSkge1xuICAgICAgICAgICAgd29ya2xldHNNYXBbZXZlbnROYW1lXS5wdXNoKHdvcmtsZXRFdmVudEhhbmRsZXIud29ya2xldCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdvcmtsZXRzTWFwW2V2ZW50TmFtZV0gPSBbd29ya2xldEV2ZW50SGFuZGxlci53b3JrbGV0XTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBoYW5kbGVyTmFtZSA9IGV2ZW50TmFtZSArIGAke3dvcmtsZXRzTWFwW2V2ZW50TmFtZV0ubGVuZ3RofWA7XG4gICAgICAgICAgd29ya2xldHNSZWNvcmRbaGFuZGxlck5hbWVdID1cbiAgICAgICAgICAgIHdvcmtsZXRFdmVudEhhbmRsZXIud29ya2xldCBhcyBXb3JrbGV0RnVuY3Rpb247XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gIGNvbnN0IHsgZG9EZXBlbmRlbmNpZXNEaWZmZXIgfSA9IHVzZUhhbmRsZXIod29ya2xldHNSZWNvcmQpO1xuXG4gIHJldHVybiB1c2VFdmVudDxFdmVudCwgQ29udGV4dD4oXG4gICAgKGV2ZW50KSA9PiB7XG4gICAgICAnd29ya2xldCc7XG4gICAgICBpZiAod29ya2xldHNNYXBbZXZlbnQuZXZlbnROYW1lXSkge1xuICAgICAgICB3b3JrbGV0c01hcFtldmVudC5ldmVudE5hbWVdLmZvckVhY2goKHdvcmtsZXQpID0+IHdvcmtsZXQoZXZlbnQpKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIEFycmF5LmZyb20oY29tcG9zZWRFdmVudE5hbWVzKSxcbiAgICBkb0RlcGVuZGVuY2llc0RpZmZlclxuICApIGFzIHVua25vd24gYXMgQ29tcG9zZWRIYW5kbGVySW50ZXJuYWw8RXZlbnQ+O1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUFDQSxNQUFBLENBQUFDLGNBQUEsQ0FBQUMsT0FBQTtFQUFBQyxLQUFBO0FBQUE7QUFBQUQsT0FBQSxDQUFBRSx1QkFBQSxHQUFBQSx1QkFBQTtBQUNiLElBQUFDLFNBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLG9CQUFBLEdBQUFGLE9BQUE7QUFBNkQsSUFBQUcsZ0NBQUE7RUFBQUMsSUFBQTtFQUFBQyxRQUFBO0VBQUFDLFNBQUE7RUFBQUMsT0FBQTtBQUFBO0FBa0N0RCxTQUFTVCx1QkFBdUJBLENBR3JDVSxRQUEwRCxFQUFFO0VBRTVELElBQU1DLGNBQStDLEdBQUcsQ0FBQyxDQUFDO0VBRTFELElBQU1DLGtCQUFrQixHQUFHLElBQUlDLEdBQUcsQ0FBUyxDQUFDO0VBRTVDLElBQU1DLFdBRUwsR0FBRyxDQUFDLENBQUM7RUFFTkosUUFBUSxDQUNMSyxNQUFNLENBQUMsVUFBQ0MsQ0FBQztJQUFBLE9BQUtBLENBQUMsS0FBSyxJQUFJO0VBQUEsRUFBQyxDQUN6QkMsT0FBTyxDQUFDLFVBQUNDLE9BQU8sRUFBSztJQUVwQixJQUFBQyxJQUFBLEdBQ0VELE9BQU87TUFEREUsbUJBQW1CLEdBQUFELElBQUEsQ0FBbkJDLG1CQUFtQjtJQUUzQixJQUFJQSxtQkFBbUIsWUFBWUMsd0NBQW1CLEVBQUU7TUFDdERELG1CQUFtQixDQUFDRSxVQUFVLENBQUNMLE9BQU8sQ0FBQyxVQUFDTSxTQUFTLEVBQUs7UUFDcERYLGtCQUFrQixDQUFDWSxHQUFHLENBQUNELFNBQVMsQ0FBQztRQUVqQyxJQUFJVCxXQUFXLENBQUNTLFNBQVMsQ0FBQyxFQUFFO1VBQzFCVCxXQUFXLENBQUNTLFNBQVMsQ0FBQyxDQUFDRSxJQUFJLENBQUNMLG1CQUFtQixDQUFDTSxPQUFPLENBQUM7UUFDMUQsQ0FBQyxNQUFNO1VBQ0xaLFdBQVcsQ0FBQ1MsU0FBUyxDQUFDLEdBQUcsQ0FBQ0gsbUJBQW1CLENBQUNNLE9BQU8sQ0FBQztRQUN4RDtRQUVBLElBQU1DLFdBQVcsR0FBR0osU0FBUyxHQUFHLEdBQUdULFdBQVcsQ0FBQ1MsU0FBUyxDQUFDLENBQUNLLE1BQU0sRUFBRTtRQUNsRWpCLGNBQWMsQ0FBQ2dCLFdBQVcsQ0FBQyxHQUN6QlAsbUJBQW1CLENBQUNNLE9BQTBCO01BQ2xELENBQUMsQ0FBQztJQUNKO0VBQ0YsQ0FBQyxDQUFDO0VBRUosSUFBQUcsV0FBQSxHQUFpQyxJQUFBQyx1QkFBVSxFQUFDbkIsY0FBYyxDQUFDO0lBQW5Eb0Isb0JBQW9CLEdBQUFGLFdBQUEsQ0FBcEJFLG9CQUFvQjtFQUU1QixPQUFPLElBQUFDLGtCQUFRLEVBQ2I7SUFBQSxJQUFBQyxFQUFBLFFBQUFDLE1BQUEsQ0FBQUMsS0FBQTtJQUFBLElBQUFDLDBCQUFBLFlBQUFBLDJCQUFDQyxLQUFLLEVBQUs7TUFFVCxJQUFJdkIsV0FBVyxDQUFDdUIsS0FBSyxDQUFDZCxTQUFTLENBQUMsRUFBRTtRQUNoQ1QsV0FBVyxDQUFDdUIsS0FBSyxDQUFDZCxTQUFTLENBQUMsQ0FBQ04sT0FBTyxDQUFDLFVBQUNTLE9BQU87VUFBQSxPQUFLQSxPQUFPLENBQUNXLEtBQUssQ0FBQztRQUFBLEVBQUM7TUFDbkU7SUFDRixDQUFDO0lBQUFELDBCQUFBLENBQUFFLFNBQUE7TUFBQXhCLFdBQUEsRUFIS0E7SUFBVztJQUFBc0IsMEJBQUEsQ0FBQUcsYUFBQTtJQUFBSCwwQkFBQSxDQUFBSSxVQUFBLEdBQUFuQyxnQ0FBQTtJQUFBK0IsMEJBQUEsQ0FBQUssY0FBQSxHQUFBUixFQUFBO0lBQUEsT0FBQUcsMEJBQUE7RUFBQSxDQUZqQixJQU1BTSxLQUFLLENBQUNDLElBQUksQ0FBQy9CLGtCQUFrQixDQUFDLEVBQzlCbUIsb0JBQ0YsQ0FBQztBQUNIIiwiaWdub3JlTGlzdCI6W119