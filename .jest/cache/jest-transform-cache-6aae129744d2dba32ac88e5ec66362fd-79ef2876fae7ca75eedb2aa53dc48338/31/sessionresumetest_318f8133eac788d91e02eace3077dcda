3d2622ba60fa63a7bb544cc1b1c6effe
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return require('@react-native-async-storage/async-storage/jest/async-storage-mock');
});
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    },
    useRoute: function useRoute() {
      return {
        params: {}
      };
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _layout = _interopRequireDefault(require("../../app/_layout"));
var _AppProvider = require("../../src/contexts/AppProvider");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Session Resume Integration Test', function () {
  beforeEach((0, _asyncToGenerator2.default)(function* () {
    yield _asyncStorage.default.clear();
  }));
  it('should persist and resume progress after app restart', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AppProvider.AppProvider, {
        children: (0, _jsxRuntime.jsx)(_layout.default, {})
      })),
      getByText = _render.getByText,
      findByText = _render.findByText,
      unmount = _render.unmount;
    var progress = {
      A1: {
        vocabulary: {
          progress: 50
        }
      }
    };
    yield _asyncStorage.default.setItem('progress', JSON.stringify(progress));
    unmount();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AppProvider.AppProvider, {
        children: (0, _jsxRuntime.jsx)(_layout.default, {})
      })),
      getByTextAfterRestart = _render2.getByText;
    var continueButton = yield findByText(/Continuer/i);
    expect(continueButton).toBeTruthy();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJyZXF1aXJlIiwiT2JqZWN0IiwiYXNzaWduIiwiamVzdCIsInJlcXVpcmVBY3R1YWwiLCJ1c2VOYXZpZ2F0aW9uIiwibmF2aWdhdGUiLCJmbiIsImdvQmFjayIsInVzZVJvdXRlIiwicGFyYW1zIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9sYXlvdXQiLCJfQXBwUHJvdmlkZXIiLCJfYXN5bmNTdG9yYWdlIiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImRlZmF1bHQiLCJBc3luY1N0b3JhZ2UiLCJjbGVhciIsIml0IiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsIkFwcFByb3ZpZGVyIiwiY2hpbGRyZW4iLCJnZXRCeVRleHQiLCJmaW5kQnlUZXh0IiwidW5tb3VudCIsInByb2dyZXNzIiwiQTEiLCJ2b2NhYnVsYXJ5Iiwic2V0SXRlbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJfcmVuZGVyMiIsImdldEJ5VGV4dEFmdGVyUmVzdGFydCIsImNvbnRpbnVlQnV0dG9uIiwiZXhwZWN0IiwidG9CZVRydXRoeSJdLCJzb3VyY2VzIjpbInNlc3Npb24tcmVzdW1lLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQsIHdhaXRGb3IgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgQXBwIGZyb20gJy4uLy4uL2FwcC9fbGF5b3V0JztcbmltcG9ydCB7IEFwcFByb3ZpZGVyIH0gZnJvbSAnLi4vLi4vc3JjL2NvbnRleHRzL0FwcFByb3ZpZGVyJztcbmltcG9ydCBBc3luY1N0b3JhZ2UgZnJvbSAnQHJlYWN0LW5hdGl2ZS1hc3luYy1zdG9yYWdlL2FzeW5jLXN0b3JhZ2UnO1xuXG4vLyBNb2NrIEFzeW5jU3RvcmFnZSBwb3VyIGNvbnRyw7RsZXIgbGUgc3RvY2thZ2Vcbmplc3QubW9jaygnQHJlYWN0LW5hdGl2ZS1hc3luYy1zdG9yYWdlL2FzeW5jLXN0b3JhZ2UnLCAoKSA9PiByZXF1aXJlKCdAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZS9qZXN0L2FzeW5jLXN0b3JhZ2UtbW9jaycpKTtcblxuamVzdC5tb2NrKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnLCAoKSA9PiAoe1xuICAuLi5qZXN0LnJlcXVpcmVBY3R1YWwoJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScpLFxuICB1c2VOYXZpZ2F0aW9uOiAoKSA9PiAoeyBuYXZpZ2F0ZTogamVzdC5mbigpLCBnb0JhY2s6IGplc3QuZm4oKSB9KSxcbiAgdXNlUm91dGU6ICgpID0+ICh7IHBhcmFtczoge30gfSksXG59KSk7XG5cbmRlc2NyaWJlKCdTZXNzaW9uIFJlc3VtZSBJbnRlZ3JhdGlvbiBUZXN0JywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICAvLyBOZXR0b3llciBsZSBzdG9ja2FnZSBhdmFudCBjaGFxdWUgdGVzdFxuICAgIGF3YWl0IEFzeW5jU3RvcmFnZS5jbGVhcigpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHBlcnNpc3QgYW5kIHJlc3VtZSBwcm9ncmVzcyBhZnRlciBhcHAgcmVzdGFydCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCwgZmluZEJ5VGV4dCwgdW5tb3VudCB9ID0gcmVuZGVyKFxuICAgICAgPEFwcFByb3ZpZGVyPjxBcHAgLz48L0FwcFByb3ZpZGVyPlxuICAgICk7XG5cbiAgICAvLyAxLiBFZmZlY3R1ZXIgdW5lIGFjdGlvbiBxdWkgbW9kaWZpZSBsYSBwcm9ncmVzc2lvblxuICAgIC8vIChTaW1wbGlmaWNhdGlvbiA6IG5vdXMgYWxsb25zIGRpcmVjdGVtZW50IG1hbmlwdWxlciBsZSBzdG9ja2FnZSBwb3VyIHNpbXVsZXIgdW5lIHNlc3Npb24gcHLDqWPDqWRlbnRlKVxuICAgIGNvbnN0IHByb2dyZXNzID0geyBBMTogeyB2b2NhYnVsYXJ5OiB7IHByb2dyZXNzOiA1MCB9IH0gfTtcbiAgICBhd2FpdCBBc3luY1N0b3JhZ2Uuc2V0SXRlbSgncHJvZ3Jlc3MnLCBKU09OLnN0cmluZ2lmeShwcm9ncmVzcykpO1xuXG4gICAgLy8gMi4gU2ltdWxlciBsYSBmZXJtZXR1cmUgZGUgbCdhcHBsaWNhdGlvblxuICAgIHVubW91bnQoKTtcblxuICAgIC8vIDMuIFNpbXVsZXIgbGEgcsOpb3V2ZXJ0dXJlIGRlIGwnYXBwbGljYXRpb25cbiAgICBjb25zdCB7IGdldEJ5VGV4dDogZ2V0QnlUZXh0QWZ0ZXJSZXN0YXJ0IH0gPSByZW5kZXIoXG4gICAgICA8QXBwUHJvdmlkZXI+PEFwcCAvPjwvQXBwUHJvdmlkZXI+XG4gICAgKTtcblxuICAgIC8vIDQuIFbDqXJpZmllciBxdWUgbGEgcHJvZ3Jlc3Npb24gYSDDqXTDqSByZXN0YXVyw6llIHN1ciBsZSBEYXNoYm9hcmRcbiAgICAvLyAoTGEgdsOpcmlmaWNhdGlvbiBleGFjdGUgZMOpcGVuZCBkZSBsYSBmYcOnb24gZG9udCB2b3RyZSBEYXNoYm9hcmQgYWZmaWNoZSBsYSBwcm9ncmVzc2lvbilcbiAgICBjb25zdCBjb250aW51ZUJ1dHRvbiA9IGF3YWl0IGZpbmRCeVRleHQoL0NvbnRpbnVlci9pKTtcbiAgICBleHBlY3QoY29udGludWVCdXR0b24pLnRvQmVUcnV0aHkoKTtcblxuICAgIC8vIElkw6lhbGVtZW50LCB2w6lyaWZpZXIgdW5lIGJhcnJlIGRlIHByb2dyZXNzaW9uIG91IHVuIHRleHRlIHNww6ljaWZpcXVlXG4gICAgLy8gY29uc3QgcHJvZ3Jlc3NUZXh0ID0gYXdhaXQgZmluZEJ5VGV4dCgvNTAlLyk7XG4gICAgLy8gZXhwZWN0KHByb2dyZXNzVGV4dCkudG9CZVRydXRoeSgpO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFRQUEsV0FB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