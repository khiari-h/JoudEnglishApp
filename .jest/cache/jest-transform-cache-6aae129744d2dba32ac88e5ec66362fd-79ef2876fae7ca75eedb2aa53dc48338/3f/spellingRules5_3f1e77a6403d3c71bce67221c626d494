46cea1eb89e5b5cd5a04c50357897240
function cov_2c3i66cssa() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\data\\spelling\\5\\spellingRules5.js";
  var hash = "8a6f2487d42aa3f2d10a9e3fb5672f95755929a5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\data\\spelling\\5\\spellingRules5.js",
    statementMap: {},
    fnMap: {},
    branchMap: {},
    s: {},
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8a6f2487d42aa3f2d10a9e3fb5672f95755929a5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_2c3i66cssa = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2c3i66cssa();
export default {
  title: "C1 Expert Spelling Rules & Specialized Patterns",
  description: "Master expert-level spelling rules and specialized vocabulary patterns at C1 advanced level",
  exercises: [{
    type: "spelling_rule",
    rule: "Greek root 'anthrop-': Means 'human'",
    instruction: "Apply the rule: Combine 'anthrop-' + 'ology' (study of humans)",
    correctAnswer: "anthropology",
    hasHint: true,
    hint: "'Anthrop-' (human) + 'ology' (study) = study of humans.",
    explanation: "Greek 'anthropos' (human): anthropology, anthropomorphic, philanthropy, misanthrope."
  }, {
    type: "spelling_rule",
    rule: "Greek root 'phil-': Means 'love'",
    instruction: "Apply the rule: Combine 'phil-' + 'anthropy' (love of humanity)",
    correctAnswer: "philanthropy",
    hasHint: true,
    hint: "'Phil-' (love) + 'anthropy' (humanity) = love of humanity.",
    explanation: "Greek 'philos' (loving): philanthropy, philosophy, philharmonic, bibliophile."
  }, {
    type: "spelling_rule",
    rule: "Greek root 'psych-': Means 'mind' or 'soul'",
    instruction: "Apply the rule: Combine 'psych-' + 'iatry' (mind healing)",
    correctAnswer: "psychiatry",
    hasHint: true,
    hint: "'Psych-' (mind) + 'iatry' (healing) = mind healing.",
    explanation: "Greek 'psyche' (soul/mind): psychiatry, psychology, psychopath, psychosomatic."
  }, {
    type: "spelling_rule",
    rule: "Latin root 'jur-': Means 'law' or 'right'",
    instruction: "Apply the rule: Combine 'jur-' + 'isprudence' (law knowledge)",
    correctAnswer: "jurisprudence",
    hasHint: true,
    hint: "'Jur-' (law) + 'isprudence' (knowledge) = knowledge of law.",
    explanation: "Latin 'jus/juris' (law): jurisprudence, jurisdiction, jury, perjury, injury."
  }, {
    type: "spelling_rule",
    rule: "Greek root 'crypt-': Means 'hidden' or 'secret'",
    instruction: "Apply the rule: Combine 'crypt-' + 'ography' (secret writing)",
    correctAnswer: "cryptography",
    hasHint: true,
    hint: "'Crypt-' (hidden) + 'ography' (writing) = secret writing.",
    explanation: "Greek 'kryptos' (hidden): cryptography, encrypt, cryptic, crypt, apocryphal."
  }, {
    type: "spelling_rule",
    rule: "Latin root 'mort-': Means 'death'",
    instruction: "Apply the rule: Combine 'mort-' + 'ality' (death rate)",
    correctAnswer: "mortality",
    hasHint: true,
    hint: "'Mort-' (death) + 'ality' (quality) = death rate.",
    explanation: "Latin 'mors/mortis' (death): mortality, mortal, immortal, mortgage, mortuary."
  }, {
    type: "spelling_rule",
    rule: "Greek root 'chron-': Means 'time'",
    instruction: "Apply the rule: Combine 'syn-' + 'chron-' + 'ize' (time together)",
    correctAnswer: "synchronize",
    hasHint: true,
    hint: "'Syn-' (together) + 'chron-' (time) = timing together.",
    explanation: "Greek 'chronos' (time): synchronize, chronology, chronic, anachronism."
  }, {
    type: "spelling_rule",
    rule: "Latin root 'aqu-': Means 'water'",
    instruction: "Apply the rule: Combine 'aqu-' + 'arium' (water place)",
    correctAnswer: "aquarium",
    hasHint: true,
    hint: "'Aqu-' (water) + 'arium' (place for) = place for water.",
    explanation: "Latin 'aqua' (water): aquarium, aquatic, aqueduct, aqueous, subaqueous."
  }, {
    type: "spelling_rule",
    rule: "Greek root 'neo-': Means 'new'",
    instruction: "Apply the rule: Combine 'neo-' + 'classical' (new classical style)",
    correctAnswer: "neoclassical",
    hasHint: true,
    hint: "'Neo-' (new) + 'classical' = new classical style.",
    explanation: "Greek 'neos' (new): neoclassical, neologism, neonatal, neophyte, Neolithic."
  }, {
    type: "spelling_rule",
    rule: "Greek root 'paleo-': Means 'ancient' or 'old'",
    instruction: "Apply the rule: Combine 'paleo-' + 'lithic' (old stone age)",
    correctAnswer: "Paleolithic",
    hasHint: true,
    hint: "'Paleo-' (ancient) + 'lithic' (stone) = old stone age.",
    explanation: "Greek 'palaios' (ancient): Paleolithic, paleontology, paleography, Paleozoic."
  }, {
    type: "spelling_rule",
    rule: "Latin root 'equ-': Means 'equal'",
    instruction: "Apply the rule: Combine 'equ-' + 'ilibrium' (equal balance)",
    correctAnswer: "equilibrium",
    hasHint: true,
    hint: "'Equ-' (equal) + 'ilibrium' (balance) = equal balance.",
    explanation: "Latin 'aequus' (equal): equilibrium, equitable, equivalent, equation, equity."
  }, {
    type: "spelling_rule",
    rule: "Greek root 'path-': Means 'feeling' or 'disease'",
    instruction: "Apply the rule: Combine 'path-' + 'ology' (study of disease)",
    correctAnswer: "pathology",
    hasHint: true,
    hint: "'Path-' (disease) + 'ology' (study) = study of disease.",
    explanation: "Greek 'pathos' (suffering): pathology, pathogen, empathy, sympathy, apathy."
  }, {
    type: "spelling_rule",
    rule: "Latin root 'sol-': Means 'alone' or 'sun'",
    instruction: "Apply the rule: Combine 'sol-' + 'itary' (alone state)",
    correctAnswer: "solitary",
    hasHint: true,
    hint: "'Sol-' (alone) + 'itary' (characterized by) = characterized by being alone.",
    explanation: "Latin 'solus' (alone): solitary, solitude, solo, isolate, desolate."
  }, {
    type: "spelling_rule",
    rule: "Greek root 'therm-': Means 'heat'",
    instruction: "Apply the rule: Combine 'hypo-' + 'therm-' + 'ia' (low body heat)",
    correctAnswer: "hypothermia",
    hasHint: true,
    hint: "'Hypo-' (under) + 'therm-' (heat) + 'ia' (condition).",
    explanation: "Greek 'therme' (heat): hypothermia, thermal, thermometer, geothermal."
  }, {
    type: "spelling_rule",
    rule: "Latin root 'omni-': Means 'all' or 'every'",
    instruction: "Apply the rule: Combine 'omni-' + 'scient' (all-knowing)",
    correctAnswer: "omniscient",
    hasHint: true,
    hint: "'Omni-' (all) + 'scient' (knowing) = all-knowing.",
    explanation: "Latin 'omnis' (all): omniscient, omnipotent, omnivore, omnipresent."
  }, {
    type: "spelling_rule",
    rule: "Greek root 'biblio-': Means 'book'",
    instruction: "Apply the rule: Combine 'biblio-' + 'graphy' (book writing/listing)",
    correctAnswer: "bibliography",
    hasHint: true,
    hint: "'Biblio-' (book) + 'graphy' (writing) = list of books.",
    explanation: "Greek 'biblion' (book): bibliography, bibliophile, Bible, bibliotherapy."
  }, {
    type: "spelling_rule",
    rule: "Latin root 'bene-': Means 'good' or 'well'",
    instruction: "Apply the rule: Combine 'bene-' + 'factor' (good doer)",
    correctAnswer: "benefactor",
    hasHint: true,
    hint: "'Bene-' (good) + 'factor' (doer) = one who does good.",
    explanation: "Latin 'bene' (well): benefactor, benefit, benevolent, benediction, beneficial."
  }, {
    type: "spelling_rule",
    rule: "Greek root 'arch-': Means 'chief' or 'rule'",
    instruction: "Apply the rule: Combine 'hier-' + 'arch-' + 'y' (sacred rule)",
    correctAnswer: "hierarchy",
    hasHint: true,
    hint: "'Hier-' (sacred) + 'arch-' (rule) = sacred rule system.",
    explanation: "Greek 'archos' (ruler): hierarchy, monarchy, anarchy, patriarch, archbishop."
  }, {
    type: "spelling_rule",
    rule: "Latin root 'mal-': Means 'bad' or 'evil'",
    instruction: "Apply the rule: Combine 'mal-' + 'nutrition' (bad nutrition)",
    correctAnswer: "malnutrition",
    hasHint: true,
    hint: "'Mal-' (bad) + 'nutrition' = bad or inadequate nutrition.",
    explanation: "Latin 'malus' (bad): malnutrition, malfunction, malicious, malpractice, malevolent."
  }, {
    type: "spelling_rule",
    rule: "Greek root 'xen-': Means 'foreign' or 'strange'",
    instruction: "Apply the rule: Combine 'xen-' + 'ophobia' (fear of foreigners)",
    correctAnswer: "xenophobia",
    hasHint: true,
    hint: "'Xen-' (foreign) + 'phobia' (fear) = fear of foreigners.",
    explanation: "Greek 'xenos' (stranger): xenophobia, xenial, xenolith, xenogenesis."
  }, {
    type: "spelling_rule",
    rule: "Medical terminology: '-ectomy' suffix means 'surgical removal'",
    instruction: "Apply the rule: Combine 'append-' + 'ectomy' (appendix removal)",
    correctAnswer: "appendectomy",
    hasHint: true,
    hint: "'Append-' (appendix) + 'ectomy' (removal) = appendix removal.",
    explanation: "Medical '-ectomy': appendectomy, tonsillectomy, hysterectomy, mastectomy."
  }, {
    type: "spelling_rule",
    rule: "Medical terminology: '-itis' suffix means 'inflammation'",
    instruction: "Apply the rule: Combine 'arthrit-' + 'is' (joint inflammation)",
    correctAnswer: "arthritis",
    hasHint: true,
    hint: "'Arthrit-' (joint) + 'is' (inflammation) = joint inflammation.",
    explanation: "Medical '-itis': arthritis, bronchitis, gastritis, hepatitis, meningitis."
  }, {
    type: "spelling_rule",
    rule: "Legal terminology: '-tion' suffix for legal processes",
    instruction: "Apply the rule: Form the noun from 'litigate' (legal process)",
    correctAnswer: "litigation",
    hasHint: true,
    hint: "Change '-ate' to '-ation' for legal process nouns.",
    explanation: "Legal processes: litigation, arbitration, mediation, adjudication, prosecution."
  }, {
    type: "spelling_rule",
    rule: "Scientific terminology: '-genesis' means 'origin' or 'creation'",
    instruction: "Apply the rule: Combine 'photo-' + 'genesis' (light creation)",
    correctAnswer: "photogenesis",
    hasHint: true,
    hint: "'Photo-' (light) + 'genesis' (creation) = creation by light.",
    explanation: "Scientific '-genesis': photogenesis, biogenesis, pathogenesis, organogenesis."
  }, {
    type: "spelling_rule",
    rule: "Philosophical terminology: '-ism' for belief systems",
    instruction: "Apply the rule: Combine 'existential-' + 'ism' (existence philosophy)",
    correctAnswer: "existentialism",
    hasHint: true,
    hint: "'Existential-' + 'ism' = philosophy of existence.",
    explanation: "Philosophical '-ism': existentialism, nihilism, empiricism, rationalism."
  }, {
    type: "spelling_rule",
    rule: "Psychological terminology: '-phobia' for specific fears",
    instruction: "Apply the rule: Combine 'agoraph-' + 'obia' (open space fear)",
    correctAnswer: "agoraphobia",
    hasHint: true,
    hint: "'Agoraph-' (marketplace/open) + 'obia' (fear) = fear of open spaces.",
    explanation: "Psychological fears: agoraphobia, claustrophobia, arachnophobia, acrophobia."
  }, {
    type: "spelling_rule",
    rule: "Geological terminology: '-lithic' means 'stone' related",
    instruction: "Apply the rule: Combine 'paleo-' + 'lithic' (old stone period)",
    correctAnswer: "Paleolithic",
    hasHint: true,
    hint: "'Paleo-' (ancient) + 'lithic' (stone) = ancient stone age.",
    explanation: "Geological terms: Paleolithic, Neolithic, Mesolithic, monolithic."
  }, {
    type: "spelling_rule",
    rule: "Astronomical terminology: '-nomy' means 'law' or 'arrangement'",
    instruction: "Apply the rule: Combine 'astro-' + 'nomy' (star laws)",
    correctAnswer: "astronomy",
    hasHint: true,
    hint: "'Astro-' (star) + 'nomy' (law) = laws of stars.",
    explanation: "Scientific '-nomy': astronomy, taxonomy, economy, autonomy, gastronomy."
  }, {
    type: "spelling_rule",
    rule: "Linguistic terminology: '-glot' means 'tongue' or 'language'",
    instruction: "Apply the rule: Combine 'poly-' + 'glot' (many languages)",
    correctAnswer: "polyglot",
    hasHint: true,
    hint: "'Poly-' (many) + 'glot' (language) = many languages speaker.",
    explanation: "Language terms: polyglot, monoglot, epiglottis, glottis."
  }, {
    type: "spelling_rule",
    rule: "Economic terminology: '-ics' for fields of study",
    instruction: "Apply the rule: Combine 'econom-' + 'ics' (economic study)",
    correctAnswer: "economics",
    hasHint: true,
    hint: "'Econom-' + 'ics' (study field) = study of economy.",
    explanation: "Study fields: economics, politics, ethics, mathematics, statistics."
  }, {
    type: "spelling_rule",
    rule: "Architectural terminology: '-ture' for structural elements",
    instruction: "Apply the rule: Combine 'architec-' + 'ture' (building design)",
    correctAnswer: "architecture",
    hasHint: true,
    hint: "'Architec-' + 'ture' (structure) = building design art.",
    explanation: "Structural terms: architecture, infrastructure, superstructure, substructure."
  }, {
    type: "spelling_rule",
    rule: "Chemical terminology: '-ide' for binary compounds",
    instruction: "Apply the rule: Combine 'chlor-' + 'ide' (chlorine compound)",
    correctAnswer: "chloride",
    hasHint: true,
    hint: "'Chlor-' (chlorine) + 'ide' (compound) = chlorine compound.",
    explanation: "Chemical compounds: chloride, oxide, fluoride, sulfide, carbide."
  }, {
    type: "spelling_rule",
    rule: "Biological terminology: '-phyte' means 'plant'",
    instruction: "Apply the rule: Combine 'epi-' + 'phyte' (upon plant)",
    correctAnswer: "epiphyte",
    hasHint: true,
    hint: "'Epi-' (upon) + 'phyte' (plant) = plant growing on another.",
    explanation: "Plant terms: epiphyte, saprophyte, gametophyte, sporophyte."
  }, {
    type: "spelling_rule",
    rule: "Mathematical terminology: '-metry' means 'measurement'",
    instruction: "Apply the rule: Combine 'trigonom-' + 'etry' (triangle measurement)",
    correctAnswer: "trigonometry",
    hasHint: true,
    hint: "'Trigonom-' (triangle) + 'etry' (measurement) = triangle measurement.",
    explanation: "Measurement fields: trigonometry, geometry, symmetry, barometry."
  }, {
    type: "spelling_rule",
    rule: "Technological terminology: 'cyber-' for internet-related",
    instruction: "Apply the rule: Combine 'cyber-' + 'netics' (control science)",
    correctAnswer: "cybernetics",
    hasHint: true,
    hint: "'Cyber-' (control) + 'netics' (science) = control/communication science.",
    explanation: "Technology terms: cybernetics, cybersecurity, cyberspace, cyberpunk."
  }, {
    type: "spelling_rule",
    rule: "Neurological terminology: 'neur-' means 'nerve'",
    instruction: "Apply the rule: Combine 'neur-' + 'ology' (nerve study)",
    correctAnswer: "neurology",
    hasHint: true,
    hint: "'Neur-' (nerve) + 'ology' (study) = study of nerves.",
    explanation: "Nerve-related: neurology, neuron, neurosis, neuralgia, neurosurgery."
  }, {
    type: "spelling_rule",
    rule: "Sociological terminology: 'socio-' means 'society'",
    instruction: "Apply the rule: Combine 'socio-' + 'logical' (society study)",
    correctAnswer: "sociological",
    hasHint: true,
    hint: "'Socio-' (society) + 'logical' (study) = relating to society study.",
    explanation: "Society terms: sociological, socioeconomic, sociocultural, sociopath."
  }, {
    type: "spelling_rule",
    rule: "Pharmacological terminology: '-ine' for alkaloids",
    instruction: "Apply the rule: Form alkaloid from 'morphine' pattern using 'codeina'",
    correctAnswer: "codeine",
    hasHint: true,
    hint: "Alkaloids often end in '-ine'.",
    explanation: "Alkaloids: codeine, morphine, caffeine, nicotine, quinine, strychnine."
  }, {
    type: "spelling_rule",
    rule: "Meteorological terminology: 'baro-' means 'pressure'",
    instruction: "Apply the rule: Combine 'baro-' + 'metric' (pressure measurement)",
    correctAnswer: "barometric",
    hasHint: true,
    hint: "'Baro-' (pressure) + 'metric' (measurement) = pressure measuring.",
    explanation: "Pressure terms: barometric, barometer, isobar, barotrauma."
  }, {
    type: "spelling_rule",
    rule: "Anthropological terminology: 'ethn-' means 'people' or 'culture'",
    instruction: "Apply the rule: Combine 'ethn-' + 'ography' (people writing)",
    correctAnswer: "ethnography",
    hasHint: true,
    hint: "'Ethn-' (people) + 'ography' (writing) = writing about peoples.",
    explanation: "Cultural terms: ethnography, ethnology, ethnic, ethnocentrism."
  }, {
    type: "spelling_rule",
    rule: "Latin plurals: '-us' becomes '-i'",
    instruction: "Apply the rule: Form the plural of 'alumnus' (male graduate)",
    correctAnswer: "alumni",
    hasHint: true,
    hint: "Latin masculine words ending '-us' become '-i' in plural.",
    explanation: "Latin masculine plurals: alumnus→alumni, focus→foci, stimulus→stimuli, radius→radii."
  }, {
    type: "spelling_rule",
    rule: "Latin plurals: '-a' becomes '-ae'",
    instruction: "Apply the rule: Form the plural of 'alumna' (female graduate)",
    correctAnswer: "alumnae",
    hasHint: true,
    hint: "Latin feminine words ending '-a' become '-ae' in plural.",
    explanation: "Latin feminine plurals: alumna→alumnae, formula→formulae, nebula→nebulae."
  }, {
    type: "spelling_rule",
    rule: "Greek plurals: '-is' becomes '-es'",
    instruction: "Apply the rule: Form the plural of 'analysis'",
    correctAnswer: "analyses",
    hasHint: true,
    hint: "Greek words ending '-is' change to '-es' in plural.",
    explanation: "Greek plurals: analysis→analyses, thesis→theses, crisis→crises, hypothesis→hypotheses."
  }, {
    type: "spelling_rule",
    rule: "Greek plurals: '-on' becomes '-a'",
    instruction: "Apply the rule: Form the plural of 'criterion'",
    correctAnswer: "criteria",
    hasHint: true,
    hint: "Greek words ending '-on' change to '-a' in plural.",
    explanation: "Greek plurals: criterion→criteria, phenomenon→phenomena, automaton→automata."
  }, {
    type: "spelling_rule",
    rule: "Scientific nomenclature: Binomial system",
    instruction: "Apply the rule: Write the species name 'Homo sapiens' correctly",
    correctAnswer: "Homo sapiens",
    hasHint: true,
    hint: "Genus capitalized, species lowercase, both italicized in print.",
    explanation: "Scientific names: Homo sapiens, Escherichia coli, Tyrannosaurus rex (genus + species)."
  }, {
    type: "spelling_rule",
    rule: "Chemical nomenclature: '-ate' endings for salts",
    instruction: "Apply the rule: Form the salt name from 'sulfur' acid",
    correctAnswer: "sulfate",
    hasHint: true,
    hint: "Acids ending '-ic' form salts ending '-ate'.",
    explanation: "Chemical salts: sulfate (from sulfuric), nitrate (from nitric), carbonate (from carbonic)."
  }, {
    type: "spelling_rule",
    rule: "Geological time: '-zoic' means 'life' periods",
    instruction: "Apply the rule: Combine 'Paleo-' + 'zoic' (ancient life era)",
    correctAnswer: "Paleozoic",
    hasHint: true,
    hint: "'Paleo-' (ancient) + 'zoic' (life) = ancient life era.",
    explanation: "Geological eras: Paleozoic, Mesozoic, Cenozoic (ancient, middle, recent life)."
  }, {
    type: "spelling_rule",
    rule: "Astronomical naming: '-naut' means 'sailor'",
    instruction: "Apply the rule: Combine 'astro-' + 'naut' (star sailor)",
    correctAnswer: "astronaut",
    hasHint: true,
    hint: "'Astro-' (star) + 'naut' (sailor) = space traveler.",
    explanation: "Space travelers: astronaut, cosmonaut, taikonaut, aeronaut."
  }, {
    type: "spelling_rule",
    rule: "Literary criticism: '-esque' means 'in the style of'",
    instruction: "Apply the rule: Add suffix to 'Kafka' for his writing style",
    correctAnswer: "Kafkaesque",
    hasHint: true,
    hint: "Add '-esque' to authors' names for their style.",
    explanation: "Literary styles: Kafkaesque, Orwellian, Shakespearean, Dickensian."
  }, {
    type: "spelling_rule",
    rule: "Medical diagnostics: '-pathy' means 'disease' or 'treatment'",
    instruction: "Apply the rule: Combine 'cardi-' + 'opathy' (heart disease)",
    correctAnswer: "cardiopathy",
    hasHint: true,
    hint: "'Cardi-' (heart) + 'opathy' (disease) = heart disease.",
    explanation: "Medical conditions: cardiopathy, neuropathy, nephropathy, osteopathy."
  }, {
    type: "spelling_rule",
    rule: "Architectural styles: 'neo-' means 'revived' style",
    instruction: "Apply the rule: Combine 'neo-' + 'Gothic' (revived Gothic)",
    correctAnswer: "neo-Gothic",
    hasHint: true,
    hint: "'Neo-' (new/revived) + style name = revived architectural style.",
    explanation: "Architectural revivals: neo-Gothic, neo-Classical, neo-Baroque, neo-Renaissance."
  }, {
    type: "spelling_rule",
    rule: "Philosophical schools: '-ism' for thought systems",
    instruction: "Apply the rule: Form the philosophy from 'pragmat-' (practical)",
    correctAnswer: "pragmatism",
    hasHint: true,
    hint: "'Pragmat-' (practical) + 'ism' = practical philosophy.",
    explanation: "Philosophical systems: pragmatism, idealism, materialism, empiricism."
  }, {
    type: "spelling_rule",
    rule: "Linguistic analysis: '-morpheme' for word units",
    instruction: "Apply the rule: Combine 'allo-' + 'morph' (variant form)",
    correctAnswer: "allomorph",
    hasHint: true,
    hint: "'Allo-' (other) + 'morph' (form) = variant form of morpheme.",
    explanation: "Linguistic units: allomorph, morpheme, phoneme, grapheme, lexeme."
  }, {
    type: "spelling_rule",
    rule: "Economic theory: 'macro-' vs 'micro-' economics",
    instruction: "Apply the rule: Combine 'macro-' + 'economics' (large-scale economy)",
    correctAnswer: "macroeconomics",
    hasHint: true,
    hint: "'Macro-' (large) + 'economics' = large-scale economic study.",
    explanation: "Economic scales: macroeconomics (large-scale), microeconomics (small-scale)."
  }, {
    type: "spelling_rule",
    rule: "Psychological assessment: '-metric' for measurement",
    instruction: "Apply the rule: Combine 'psycho-' + 'metric' (mind measurement)",
    correctAnswer: "psychometric",
    hasHint: true,
    hint: "'Psycho-' (mind) + 'metric' (measurement) = mental measurement.",
    explanation: "Measurement fields: psychometric, biometric, geometric, econometric."
  }, {
    type: "spelling_rule",
    rule: "Sociological research: 'ethno-' for cultural studies",
    instruction: "Apply the rule: Combine 'ethno-' + 'methodology' (cultural method)",
    correctAnswer: "ethnomethodology",
    hasHint: true,
    hint: "'Ethno-' (cultural) + 'methodology' = cultural research methods.",
    explanation: "Cultural research: ethnomethodology, ethnography, ethnology, ethnocentrism."
  }, {
    type: "spelling_rule",
    rule: "Computer science: 'algo-' for algorithms",
    instruction: "Apply the rule: Combine 'algo-' + 'rithmic' (algorithmic process)",
    correctAnswer: "algorithmic",
    hasHint: true,
    hint: "'Algo-' + 'rithmic' = relating to algorithms.",
    explanation: "Computing terms: algorithmic, algorithm, heuristic, logarithmic."
  }, {
    type: "spelling_rule",
    rule: "Environmental science: 'eco-' for ecological terms",
    instruction: "Apply the rule: Combine 'eco-' + 'toxicology' (environmental poison study)",
    correctAnswer: "ecotoxicology",
    hasHint: true,
    hint: "'Eco-' (environment) + 'toxicology' = environmental poison effects.",
    explanation: "Environmental fields: ecotoxicology, ecology, ecosystem, ecosphere."
  }, {
    type: "spelling_rule",
    rule: "Biotechnology: 'bio-' combined terms",
    instruction: "Apply the rule: Combine 'bio-' + 'informatics' (biological computing)",
    correctAnswer: "bioinformatics",
    hasHint: true,
    hint: "'Bio-' (life) + 'informatics' = biological data computing.",
    explanation: "Biotech fields: bioinformatics, biotechnology, biochemistry, biomedicine."
  }, {
    type: "spelling_rule",
    rule: "Nanotechnology: 'nano-' for molecular scale",
    instruction: "Apply the rule: Combine 'nano-' + 'technology' (molecular tech)",
    correctAnswer: "nanotechnology",
    hasHint: true,
    hint: "'Nano-' (billionth) + 'technology' = molecular-scale technology.",
    explanation: "Nano-scale: nanotechnology, nanomedicine, nanomaterials, nanoscience."
  }, {
    type: "spelling_rule",
    rule: "Complex hyphenation: Compound adjectives before nouns",
    instruction: "Apply the rule: Write 'well known' as adjective before noun",
    correctAnswer: "well-known",
    hasHint: true,
    hint: "Compound adjectives are hyphenated before nouns.",
    explanation: "Hyphenated before nouns: well-known author, state-of-the-art technology, high-quality product."
  }, {
    type: "spelling_rule",
    rule: "Complex hyphenation: Numbers and fractions",
    instruction: "Apply the rule: Write 'twenty one' as a hyphenated number",
    correctAnswer: "twenty-one",
    hasHint: true,
    hint: "Numbers from twenty-one to ninety-nine are hyphenated.",
    explanation: "Hyphenated numbers: twenty-one, thirty-five, ninety-nine, but not one hundred."
  }, {
    type: "spelling_rule",
    rule: "Academic citation: 'et al.' abbreviation",
    instruction: "Apply the rule: Write the Latin abbreviation for 'and others'",
    correctAnswer: "et al.",
    hasHint: true,
    hint: "Latin 'et alii' (and others) abbreviated with period.",
    explanation: "Latin abbreviations: et al. (and others), i.e. (that is), e.g. (for example), cf. (compare)."
  }, {
    type: "spelling_rule",
    rule: "Legal citations: 'vs.' abbreviation",
    instruction: "Apply the rule: Write the abbreviation for 'versus' in legal contexts",
    correctAnswer: "v.",
    hasHint: true,
    hint: "In legal writing, 'versus' is abbreviated as 'v.' with period.",
    explanation: "Legal abbreviations: v. (versus), J. (Justice), C.J. (Chief Justice), cert. (certiorari)."
  }, {
    type: "spelling_rule",
    rule: "Scientific notation: Chemical formulas",
    instruction: "Apply the rule: Write the formula for water using subscripts",
    correctAnswer: "H₂O",
    hasHint: true,
    hint: "Chemical formulas use subscript numbers for atom quantities.",
    explanation: "Chemical formulas: H₂O (water), CO₂ (carbon dioxide), NaCl (salt), C₆H₁₂O₆ (glucose)."
  }, {
    type: "spelling_rule",
    rule: "Trademark conventions: Capitalization rules",
    instruction: "Apply the rule: Write the search engine name with proper capitals",
    correctAnswer: "Google",
    hasHint: true,
    hint: "Trademark names maintain their specific capitalization.",
    explanation: "Trademarks: Google, iPhone, PlayStation, PowerPoint, BlackBerry."
  }, {
    type: "spelling_rule",
    rule: "Foreign borrowings: Maintaining original spelling",
    instruction: "Apply the rule: Write the French word for 'connoisseur' correctly",
    correctAnswer: "connoisseur",
    hasHint: true,
    hint: "French borrowings often keep original spelling with double consonants.",
    explanation: "French borrowings: connoisseur, reconnaissance, entrepreneur, saboteur, raconteur."
  }, {
    type: "spelling_rule",
    rule: "German borrowings: Compound word capitalization",
    instruction: "Apply the rule: Write the German concept of 'world view'",
    correctAnswer: "Weltanschauung",
    hasHint: true,
    hint: "German borrowings often keep original capitalization and compound structure.",
    explanation: "German borrowings: Weltanschauung, Schadenfreude, Zeitgeist, Wanderlust, Gemütlichkeit."
  }, {
    type: "spelling_rule",
    rule: "Italian musical terms: Maintaining pronunciation spelling",
    instruction: "Apply the rule: Write the musical term for 'gradually getting louder'",
    correctAnswer: "crescendo",
    hasHint: true,
    hint: "Italian musical terms keep original spelling and pronunciation.",
    explanation: "Musical terms: crescendo, diminuendo, fortissimo, pianissimo, allegro, andante."
  }, {
    type: "spelling_rule",
    rule: "Japanese borrowings: Romanization systems",
    instruction: "Apply the rule: Write the Japanese martial art with 'j' sound",
    correctAnswer: "jujitsu",
    hasHint: true,
    hint: "Japanese borrowings may have multiple accepted romanizations.",
    explanation: "Japanese terms: jujitsu/jiu-jitsu, karate, tsunami, origami, samurai."
  }, {
    type: "spelling_rule",
    rule: "Arabic borrowings: 'al-' prefix patterns",
    instruction: "Apply the rule: Write the Arabic mathematical term for 'restoration'",
    correctAnswer: "algebra",
    hasHint: true,
    hint: "Arabic borrowings often show 'al-' prefix influence in spelling.",
    explanation: "Arabic borrowings: algebra, algorithm, alcohol, alkali, admiral."
  }, {
    type: "spelling_rule",
    rule: "Sanskrit borrowings: Philosophical terms",
    instruction: "Apply the rule: Write the Sanskrit term for 'action/deed'",
    correctAnswer: "karma",
    hasHint: true,
    hint: "Sanskrit philosophical terms often maintain original vowel patterns.",
    explanation: "Sanskrit terms: karma, dharma, chakra, yoga, mantra, avatar."
  }, {
    type: "spelling_rule",
    rule: "Hebrew borrowings: Religious terminology",
    instruction: "Apply the rule: Write the Hebrew word for 'peace'",
    correctAnswer: "shalom",
    hasHint: true,
    hint: "Hebrew borrowings often use 'sh' for the ש sound.",
    explanation: "Hebrew terms: shalom, rabbi, sabbath, kosher, hallelujah, amen."
  }, {
    type: "spelling_rule",
    rule: "Russian borrowings: Political and cultural terms",
    instruction: "Apply the rule: Write the Russian term for 'restructuring'",
    correctAnswer: "perestroika",
    hasHint: true,
    hint: "Russian borrowings often end in 'a' and use 'ei' patterns.",
    explanation: "Russian terms: perestroika, glasnost, vodka, tsar/czar, babushka."
  }, {
    type: "spelling_rule",
    rule: "Acronym formation: Pronounceable vs. initialism",
    instruction: "Apply the rule: Write the acronym for 'Light Amplification by Stimulated Emission'",
    correctAnswer: "laser",
    hasHint: true,
    hint: "Pronounceable acronyms are written in lowercase when common.",
    explanation: "Acronyms: laser, radar, scuba vs. initialisms: FBI, CEO, DNA."
  }, {
    type: "spelling_rule",
    rule: "Neologism formation: Technology terms",
    instruction: "Apply the rule: Combine 'web' + 'log' into modern term",
    correctAnswer: "blog",
    hasHint: true,
    hint: "Modern contractions often drop letters for pronunciation ease.",
    explanation: "Tech neologisms: blog (weblog), email (electronic mail), podcast (iPod broadcast)."
  }, {
    type: "spelling_rule",
    rule: "Brand name generalization: Lowercase vs. trademark",
    instruction: "Apply the rule: Write the generic term for facial tissue",
    correctAnswer: "tissue",
    hasHint: true,
    hint: "Use generic terms to avoid trademark infringement.",
    explanation: "Generic vs. brand: tissue (not Kleenex), copy (not Xerox), bandage (not Band-Aid)."
  }, {
    type: "spelling_rule",
    rule: "Internet terminology: URL and domain spelling",
    instruction: "Apply the rule: Write a website address format",
    correctAnswer: "www.example.com",
    hasHint: true,
    hint: "Internet addresses use specific punctuation and no spaces.",
    explanation: "Internet formats: URLs, email addresses (@), hashtags (#), social media handles (@username)."
  }, {
    type: "spelling_rule",
    rule: "Mathematical expressions: Variables and constants",
    instruction: "Apply the rule: Write Einstein's famous equation",
    correctAnswer: "E=mc²",
    hasHint: true,
    hint: "Mathematical expressions use specific formatting for variables and exponents.",
    explanation: "Math notation: E=mc², a² + b² = c², π ≈ 3.14159, ∞ (infinity symbol)."
  }, {
    type: "spelling_rule",
    rule: "International date formats: ISO 8601 standard",
    instruction: "Apply the rule: Write January 1st, 2024 in ISO format",
    correctAnswer: "2024-01-01",
    hasHint: true,
    hint: "ISO format uses YYYY-MM-DD with hyphens.",
    explanation: "Date formats: ISO 8601 (2024-01-01), American (01/01/2024), European (01/01/2024)."
  }]
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,