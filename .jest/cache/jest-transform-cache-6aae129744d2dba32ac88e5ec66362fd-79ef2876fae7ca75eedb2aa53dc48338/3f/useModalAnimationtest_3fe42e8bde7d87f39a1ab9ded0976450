46ffb9d9632f435cffe63d1d1e84d6c2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _useModalAnimation = _interopRequireDefault(require("../../../../src/components/ui/Modal/useModalAnimation"));
var mockStart = jest.fn();
jest.spyOn(_reactNative2.Animated, 'timing').mockImplementation(function () {
  return {
    start: mockStart,
    stop: jest.fn()
  };
});
jest.spyOn(_reactNative2.Animated, 'Value').mockImplementation(function () {
  return {
    interpolate: jest.fn(),
    addListener: jest.fn(),
    removeAllListeners: jest.fn()
  };
});
describe('useModalAnimation', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('devrait d√©marrer l\'animation si isVisible devient vrai', function () {
    var _renderHook = (0, _reactNative.renderHook)(function (_ref) {
        var isVisible = _ref.isVisible;
        return (0, _useModalAnimation.default)({
          isVisible: isVisible
        });
      }, {
        initialProps: {
          isVisible: false
        }
      }),
      rerender = _renderHook.rerender;
    (0, _reactNative.act)(function () {
      rerender({
        isVisible: true
      });
    });
    expect(_reactNative2.Animated.timing).toHaveBeenCalledTimes(1);
    expect(mockStart).toHaveBeenCalledTimes(1);
  });
  it('devrait appeler Animated.timing avec les bonnes valeurs pour la position "top"', function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function (_ref2) {
        var isVisible = _ref2.isVisible,
          position = _ref2.position;
        return (0, _useModalAnimation.default)({
          isVisible: isVisible,
          position: position
        });
      }, {
        initialProps: {
          isVisible: false,
          position: 'top'
        }
      }),
      rerender = _renderHook2.rerender;
    (0, _reactNative.act)(function () {
      rerender({
        isVisible: true,
        position: 'top'
      });
    });
    expect(_reactNative2.Animated.timing).toHaveBeenCalledWith(expect.any(_reactNative2.Animated.Value), expect.objectContaining({
      toValue: 1,
      duration: 300
    }));
  });
  it('devrait retourner les styles de transformation corrects pour la position "top"', function () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useModalAnimation.default)({
          isVisible: true,
          position: 'top'
        });
      }),
      result = _renderHook3.result;
    expect(result.current.transformStyle).toEqual(expect.objectContaining({
      transform: expect.arrayContaining([expect.objectContaining({
        translateY: expect.any(Object)
      })])
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9yZWFjdE5hdGl2ZTIiLCJfdXNlTW9kYWxBbmltYXRpb24iLCJtb2NrU3RhcnQiLCJqZXN0IiwiZm4iLCJzcHlPbiIsIkFuaW1hdGVkIiwibW9ja0ltcGxlbWVudGF0aW9uIiwic3RhcnQiLCJzdG9wIiwiaW50ZXJwb2xhdGUiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJpdCIsIl9yZW5kZXJIb29rIiwicmVuZGVySG9vayIsIl9yZWYiLCJpc1Zpc2libGUiLCJ1c2VNb2RhbEFuaW1hdGlvbiIsImluaXRpYWxQcm9wcyIsInJlcmVuZGVyIiwiYWN0IiwiZXhwZWN0IiwidGltaW5nIiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIiwiX3JlbmRlckhvb2syIiwiX3JlZjIiLCJwb3NpdGlvbiIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiYW55IiwiVmFsdWUiLCJvYmplY3RDb250YWluaW5nIiwidG9WYWx1ZSIsImR1cmF0aW9uIiwiX3JlbmRlckhvb2szIiwicmVzdWx0IiwiY3VycmVudCIsInRyYW5zZm9ybVN0eWxlIiwidG9FcXVhbCIsInRyYW5zZm9ybSIsImFycmF5Q29udGFpbmluZyIsInRyYW5zbGF0ZVkiLCJPYmplY3QiXSwic291cmNlcyI6WyJ1c2VNb2RhbEFuaW1hdGlvbi50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlckhvb2ssIGFjdCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcclxuaW1wb3J0IHsgQW5pbWF0ZWQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgdXNlTW9kYWxBbmltYXRpb24gZnJvbSAnLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdWkvTW9kYWwvdXNlTW9kYWxBbmltYXRpb24nO1xyXG5cclxuLy8gV2Ugc3B5IG9uIHRoZSBrZXkgZnVuY3Rpb25zIG9mIHRoZSBBbmltYXRlZCBsaWJyYXJ5XHJcbmNvbnN0IG1vY2tTdGFydCA9IGplc3QuZm4oKTtcclxuamVzdC5zcHlPbihBbmltYXRlZCwgJ3RpbWluZycpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xyXG4gIHN0YXJ0OiBtb2NrU3RhcnQsXHJcbiAgc3RvcDogamVzdC5mbigpLFxyXG59KSk7XHJcblxyXG5qZXN0LnNweU9uKEFuaW1hdGVkLCAnVmFsdWUnKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcclxuICBpbnRlcnBvbGF0ZTogamVzdC5mbigpLFxyXG4gIGFkZExpc3RlbmVyOiBqZXN0LmZuKCksXHJcbiAgcmVtb3ZlQWxsTGlzdGVuZXJzOiBqZXN0LmZuKCksXHJcbn0pKTtcclxuXHJcbmRlc2NyaWJlKCd1c2VNb2RhbEFuaW1hdGlvbicsICgpID0+IHtcclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnZGV2cmFpdCBkw6ltYXJyZXIgbFxcJ2FuaW1hdGlvbiBzaSBpc1Zpc2libGUgZGV2aWVudCB2cmFpJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyByZXJlbmRlciB9ID0gcmVuZGVySG9vaygoeyBpc1Zpc2libGUgfSkgPT4gdXNlTW9kYWxBbmltYXRpb24oeyBpc1Zpc2libGUgfSksIHtcclxuICAgICAgaW5pdGlhbFByb3BzOiB7IGlzVmlzaWJsZTogZmFsc2UgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgIHJlcmVuZGVyKHsgaXNWaXNpYmxlOiB0cnVlIH0pO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGV4cGVjdChBbmltYXRlZC50aW1pbmcpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcclxuICAgIGV4cGVjdChtb2NrU3RhcnQpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ2RldnJhaXQgYXBwZWxlciBBbmltYXRlZC50aW1pbmcgYXZlYyBsZXMgYm9ubmVzIHZhbGV1cnMgcG91ciBsYSBwb3NpdGlvbiBcInRvcFwiJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyByZXJlbmRlciB9ID0gcmVuZGVySG9vaygoeyBpc1Zpc2libGUsIHBvc2l0aW9uIH0pID0+IHVzZU1vZGFsQW5pbWF0aW9uKHsgaXNWaXNpYmxlLCBwb3NpdGlvbiB9KSwge1xyXG4gICAgICBpbml0aWFsUHJvcHM6IHsgaXNWaXNpYmxlOiBmYWxzZSwgcG9zaXRpb246ICd0b3AnIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICBhY3QoKCkgPT4ge1xyXG4gICAgICByZXJlbmRlcih7IGlzVmlzaWJsZTogdHJ1ZSwgcG9zaXRpb246ICd0b3AnIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZXhwZWN0KEFuaW1hdGVkLnRpbWluZykudG9IYXZlQmVlbkNhbGxlZFdpdGgoXHJcbiAgICAgIGV4cGVjdC5hbnkoQW5pbWF0ZWQuVmFsdWUpLFxyXG4gICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XHJcbiAgICAgICAgdG9WYWx1ZTogMSxcclxuICAgICAgICBkdXJhdGlvbjogMzAwLFxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ2RldnJhaXQgcmV0b3VybmVyIGxlcyBzdHlsZXMgZGUgdHJhbnNmb3JtYXRpb24gY29ycmVjdHMgcG91ciBsYSBwb3NpdGlvbiBcInRvcFwiJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlTW9kYWxBbmltYXRpb24oeyBpc1Zpc2libGU6IHRydWUsIHBvc2l0aW9uOiAndG9wJyB9KSk7XHJcbiAgICBcclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC50cmFuc2Zvcm1TdHlsZSkudG9FcXVhbChcclxuICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xyXG4gICAgICAgIHRyYW5zZm9ybTogZXhwZWN0LmFycmF5Q29udGFpbmluZyhbXHJcbiAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XHJcbiAgICAgICAgICAgIHRyYW5zbGF0ZVk6IGV4cGVjdC5hbnkoT2JqZWN0KSxcclxuICAgICAgICAgIH0pLFxyXG4gICAgICAgIF0pLFxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9KTtcclxufSk7Il0sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsYUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsa0JBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUdBLElBQU1JLFNBQVMsR0FBR0MsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztBQUMzQkQsSUFBSSxDQUFDRSxLQUFLLENBQUNDLHNCQUFRLEVBQUUsUUFBUSxDQUFDLENBQUNDLGtCQUFrQixDQUFDO0VBQUEsT0FBTztJQUN2REMsS0FBSyxFQUFFTixTQUFTO0lBQ2hCTyxJQUFJLEVBQUVOLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0VBQ2hCLENBQUM7QUFBQSxDQUFDLENBQUM7QUFFSEQsSUFBSSxDQUFDRSxLQUFLLENBQUNDLHNCQUFRLEVBQUUsT0FBTyxDQUFDLENBQUNDLGtCQUFrQixDQUFDO0VBQUEsT0FBTztJQUN0REcsV0FBVyxFQUFFUCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RCTyxXQUFXLEVBQUVSLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDdEJRLGtCQUFrQixFQUFFVCxJQUFJLENBQUNDLEVBQUUsQ0FBQztFQUM5QixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBRUhTLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxZQUFNO0VBQ2xDQyxVQUFVLENBQUMsWUFB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