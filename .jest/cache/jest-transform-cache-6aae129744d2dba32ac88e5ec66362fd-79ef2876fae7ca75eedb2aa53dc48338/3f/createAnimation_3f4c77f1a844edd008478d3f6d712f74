1331d87c8bc0957145c72232b956de6d
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TransitionGenerator = TransitionGenerator;
exports.createAnimationWithInitialValues = createAnimationWithInitialValues;
exports.createCustomKeyFrameAnimation = createCustomKeyFrameAnimation;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _config = require("./config");
var _animationParser = require("./animationParser");
var _Linear = require("./transition/Linear.web");
var _Sequenced = require("./transition/Sequenced.web");
var _Fading = require("./transition/Fading.web");
var _Jumping = require("./transition/Jumping.web");
var _domUtils = require("./domUtils");
var _Curved = require("./transition/Curved.web");
var _EntryExit = require("./transition/EntryExit.web");
var _excluded = ["transform"];
function addPxToTransform(transform) {
  var newTransform = transform.map(function (transformProp) {
    var newTransformProp = {};
    for (var _ref of Object.entries(transformProp)) {
      var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
      var key = _ref2[0];
      var value = _ref2[1];
      if ((key.includes('translate') || key.includes('perspective')) && typeof value === 'number') {
        newTransformProp[key] = `${value}px`;
      } else {
        newTransformProp[key] = value;
      }
    }
    return newTransformProp;
  });
  return newTransform;
}
function createCustomKeyFrameAnimation(keyframeDefinitions) {
  for (var value of Object.values(keyframeDefinitions)) {
    if (value.transform) {
      value.transform = addPxToTransform(value.transform);
    }
  }
  var animationData = {
    name: '',
    style: keyframeDefinitions,
    duration: -1
  };
  animationData.name = generateNextCustomKeyframeName();
  var parsedKeyframe = (0, _animationParser.convertAnimationObjectToKeyframes)(animationData);
  (0, _domUtils.insertWebAnimation)(animationData.name, parsedKeyframe);
  return animationData.name;
}
function createAnimationWithInitialValues(animationName, initialValues) {
  var animationStyle = structuredClone(_config.AnimationsData[animationName].style);
  var firstAnimationStep = animationStyle['0'];
  var transform = initialValues.transform,
    rest = (0, _objectWithoutProperties2.default)(initialValues, _excluded);
  var transformWithPx = addPxToTransform(transform);
  if (transform) {
    if (!firstAnimationStep.transform) {
      firstAnimationStep.transform = transformWithPx;
    } else {
      var transformStyle = new Map();
      for (var rule of firstAnimationStep.transform) {
        for (var _ref3 of Object.entries(rule)) {
          var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);
          var property = _ref4[0];
          var value = _ref4[1];
          transformStyle.set(property, value);
        }
      }
      for (var _rule of transformWithPx) {
        for (var _ref5 of Object.entries(_rule)) {
          var _ref6 = (0, _slicedToArray2.default)(_ref5, 2);
          var _property = _ref6[0];
          var _value = _ref6[1];
          transformStyle.set(_property, _value);
        }
      }
      firstAnimationStep.transform = Array.from(transformStyle, function (_ref7) {
        var _ref8 = (0, _slicedToArray2.default)(_ref7, 2),
          property = _ref8[0],
          value = _ref8[1];
        return (0, _defineProperty2.default)({}, property, value);
      });
    }
  }
  animationStyle['0'] = Object.assign({}, animationStyle['0'], rest);
  var keyframeName = generateNextCustomKeyframeName();
  var animationObject = {
    name: keyframeName,
    style: animationStyle,
    duration: _config.AnimationsData[animationName].duration
  };
  var keyframe = (0, _animationParser.convertAnimationObjectToKeyframes)(animationObject);
  (0, _domUtils.insertWebAnimation)(keyframeName, keyframe);
  return keyframeName;
}
var customKeyframeCounter = 0;
function generateNextCustomKeyframeName() {
  return `REA${customKeyframeCounter++}`;
}
function TransitionGenerator(transitionType, transitionData) {
  var transitionKeyframeName = generateNextCustomKeyframeName();
  var dummyTransitionKeyframeName;
  var transitionObject;
  switch (transitionType) {
    case _config.TransitionType.LINEAR:
      transitionObject = (0, _Linear.LinearTransition)(transitionKeyframeName, transitionData);
      break;
    case _config.TransitionType.SEQUENCED:
      transitionObject = (0, _Sequenced.SequencedTransition)(transitionKeyframeName, transitionData);
      break;
    case _config.TransitionType.FADING:
      transitionObject = (0, _Fading.FadingTransition)(transitionKeyframeName, transitionData);
      break;
    case _config.TransitionType.JUMPING:
      transitionObject = (0, _Jumping.JumpingTransition)(transitionKeyframeName, transitionData);
      break;
    case _config.TransitionType.CURVED:
      {
        dummyTransitionKeyframeName = generateNextCustomKeyframeName();
        var _CurvedTransition = (0, _Curved.CurvedTransition)(transitionKeyframeName, dummyTransitionKeyframeName, transitionData),
          firstKeyframeObj = _CurvedTransition.firstKeyframeObj,
          secondKeyframeObj = _CurvedTransition.secondKeyframeObj;
        transitionObject = firstKeyframeObj;
        var dummyKeyframe = (0, _animationParser.convertAnimationObjectToKeyframes)(secondKeyframeObj);
        (0, _domUtils.insertWebAnimation)(dummyTransitionKeyframeName, dummyKeyframe);
        break;
      }
    case _config.TransitionType.ENTRY_EXIT:
      transitionObject = (0, _EntryExit.EntryExitTransition)(transitionKeyframeName, transitionData);
      break;
  }
  var transitionKeyframe = (0, _animationParser.convertAnimationObjectToKeyframes)(transitionObject);
  (0, _domUtils.insertWebAnimation)(transitionKeyframeName, transitionKeyframe);
  return {
    transitionKeyframeName: transitionKeyframeName,
    dummyTransitionKeyframeName: dummyTransitionKeyframeName
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiVHJhbnNpdGlvbkdlbmVyYXRvciIsImNyZWF0ZUFuaW1hdGlvbldpdGhJbml0aWFsVmFsdWVzIiwiY3JlYXRlQ3VzdG9tS2V5RnJhbWVBbmltYXRpb24iLCJfZGVmaW5lUHJvcGVydHkyIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiIsIl9zbGljZWRUb0FycmF5MiIsIl9jb25maWciLCJfYW5pbWF0aW9uUGFyc2VyIiwiX0xpbmVhciIsIl9TZXF1ZW5jZWQiLCJfRmFkaW5nIiwiX0p1bXBpbmciLCJfZG9tVXRpbHMiLCJfQ3VydmVkIiwiX0VudHJ5RXhpdCIsIl9leGNsdWRlZCIsImFkZFB4VG9UcmFuc2Zvcm0iLCJ0cmFuc2Zvcm0iLCJuZXdUcmFuc2Zvcm0iLCJtYXAiLCJ0cmFuc2Zvcm1Qcm9wIiwibmV3VHJhbnNmb3JtUHJvcCIsIl9yZWYiLCJlbnRyaWVzIiwiX3JlZjIiLCJkZWZhdWx0Iiwia2V5IiwiaW5jbHVkZXMiLCJrZXlmcmFtZURlZmluaXRpb25zIiwidmFsdWVzIiwiYW5pbWF0aW9uRGF0YSIsIm5hbWUiLCJzdHlsZSIsImR1cmF0aW9uIiwiZ2VuZXJhdGVOZXh0Q3VzdG9tS2V5ZnJhbWVOYW1lIiwicGFyc2VkS2V5ZnJhbWUiLCJjb252ZXJ0QW5pbWF0aW9uT2JqZWN0VG9LZXlmcmFtZXMiLCJpbnNlcnRXZWJBbmltYXRpb24iLCJhbmltYXRpb25OYW1lIiwiaW5pdGlhbFZhbHVlcyIsImFuaW1hdGlvblN0eWxlIiwic3RydWN0dXJlZENsb25lIiwiQW5pbWF0aW9uc0RhdGEiLCJmaXJzdEFuaW1hdGlvblN0ZXAiLCJyZXN0IiwidHJhbnNmb3JtV2l0aFB4IiwidHJhbnNmb3JtU3R5bGUiLCJNYXAiLCJydWxlIiwiX3JlZjMiLCJfcmVmNCIsInByb3BlcnR5Iiwic2V0IiwiX3JlZjUiLCJfcmVmNiIsIkFycmF5IiwiZnJvbSIsIl9yZWY3IiwiX3JlZjgiLCJhc3NpZ24iLCJrZXlmcmFtZU5hbWUiLCJhbmltYXRpb25PYmplY3QiLCJrZXlmcmFtZSIsImN1c3RvbUtleWZyYW1lQ291bnRlciIsInRyYW5zaXRpb25UeXBlIiwidHJhbnNpdGlvbkRhdGEiLCJ0cmFuc2l0aW9uS2V5ZnJhbWVOYW1lIiwiZHVtbXlUcmFuc2l0aW9uS2V5ZnJhbWVOYW1lIiwidHJhbnNpdGlvbk9iamVjdCIsIlRyYW5zaXRpb25UeXBlIiwiTElORUFSIiwiTGluZWFyVHJhbnNpdGlvbiIsIlNFUVVFTkNFRCIsIlNlcXVlbmNlZFRyYW5zaXRpb24iLCJGQURJTkciLCJGYWRpbmdUcmFuc2l0aW9uIiwiSlVNUElORyIsIkp1bXBpbmdUcmFuc2l0aW9uIiwiQ1VSVkVEIiwiX0N1cnZlZFRyYW5zaXRpb24iLCJDdXJ2ZWRUcmFuc2l0aW9uIiwiZmlyc3RLZXlmcmFtZU9iaiIsInNlY29uZEtleWZyYW1lT2JqIiwiZHVtbXlLZXlmcmFtZSIsIkVOVFJZX0VYSVQiLCJFbnRyeUV4aXRUcmFuc2l0aW9uIiwidHJhbnNpdGlvbktleWZyYW1lIl0sInNvdXJjZXMiOlsiY3JlYXRlQW5pbWF0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgQW5pbWF0aW9uc0RhdGEsIFRyYW5zaXRpb25UeXBlIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHR5cGUgeyBJbml0aWFsVmFsdWVzU3R5bGVQcm9wcywgS2V5ZnJhbWVEZWZpbml0aW9ucyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IGNvbnZlcnRBbmltYXRpb25PYmplY3RUb0tleWZyYW1lcyB9IGZyb20gJy4vYW5pbWF0aW9uUGFyc2VyJztcbmltcG9ydCB0eXBlIHtcbiAgQW5pbWF0aW9uRGF0YSxcbiAgUmVhbmltYXRlZFdlYlRyYW5zZm9ybVByb3BlcnRpZXMsXG4gIFRyYW5zaXRpb25EYXRhLFxufSBmcm9tICcuL2FuaW1hdGlvblBhcnNlcic7XG5pbXBvcnQgdHlwZSB7IFRyYW5zZm9ybXNTdHlsZSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBMaW5lYXJUcmFuc2l0aW9uIH0gZnJvbSAnLi90cmFuc2l0aW9uL0xpbmVhci53ZWInO1xuaW1wb3J0IHsgU2VxdWVuY2VkVHJhbnNpdGlvbiB9IGZyb20gJy4vdHJhbnNpdGlvbi9TZXF1ZW5jZWQud2ViJztcbmltcG9ydCB7IEZhZGluZ1RyYW5zaXRpb24gfSBmcm9tICcuL3RyYW5zaXRpb24vRmFkaW5nLndlYic7XG5pbXBvcnQgeyBKdW1waW5nVHJhbnNpdGlvbiB9IGZyb20gJy4vdHJhbnNpdGlvbi9KdW1waW5nLndlYic7XG5pbXBvcnQgeyBpbnNlcnRXZWJBbmltYXRpb24gfSBmcm9tICcuL2RvbVV0aWxzJztcbmltcG9ydCB7IEN1cnZlZFRyYW5zaXRpb24gfSBmcm9tICcuL3RyYW5zaXRpb24vQ3VydmVkLndlYic7XG5pbXBvcnQgeyBFbnRyeUV4aXRUcmFuc2l0aW9uIH0gZnJvbSAnLi90cmFuc2l0aW9uL0VudHJ5RXhpdC53ZWInO1xuXG50eXBlIFRyYW5zZm9ybVR5cGUgPSBOb25OdWxsYWJsZTxUcmFuc2Zvcm1zU3R5bGVbJ3RyYW5zZm9ybSddPjtcblxuLy8gVHJhbnNsYXRlIHZhbHVlcyBhcmUgcGFzc2VkIGFzIG51bWJlcnMuIEhvd2V2ZXIsIGlmIGB0cmFuc2xhdGVgIHByb3BlcnR5IHJlY2VpdmVzIG51bWJlciwgaXQgd2lsbCBub3QgYXV0b21hdGljYWxseVxuLy8gY29udmVydCBpdCB0byBgcHhgLiBUaGVyZWZvcmUgaWYgd2Ugd2FudCB0byBrZWVwIHRyYW5zZm9ybSB3ZSBoYXZlIHRvIGFkZCAncHgnIHN1ZmZpeCB0byBlYWNoIG9mIHRyYW5zbGF0ZSB2YWx1ZXNcbi8vIHRoYXQgYXJlIHByZXNlbnQgaW5zaWRlIHRyYW5zZm9ybS5cbi8vXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG5mdW5jdGlvbiBhZGRQeFRvVHJhbnNmb3JtKHRyYW5zZm9ybTogVHJhbnNmb3JtVHlwZSkge1xuICB0eXBlIFJOVHJhbnNmb3JtUHJvcCA9ICh0eXBlb2YgdHJhbnNmb3JtKVtudW1iZXJdO1xuXG4gIC8vIEB0cy1pZ25vcmUgYGV4aXN0aW5nVHJhbnNmb3JtYCBjYW5ub3QgYmUgc3RyaW5nIGJlY2F1c2UgaW4gdGhhdCBjYXNlXG4gIC8vIHdlIHRocm93IGVycm9yIGluIGBleHRyYWN0VHJhbnNmb3JtRnJvbVN0eWxlYFxuICBjb25zdCBuZXdUcmFuc2Zvcm0gPSB0cmFuc2Zvcm0ubWFwKCh0cmFuc2Zvcm1Qcm9wOiBSTlRyYW5zZm9ybVByb3ApID0+IHtcbiAgICBjb25zdCBuZXdUcmFuc2Zvcm1Qcm9wOiBSZWFuaW1hdGVkV2ViVHJhbnNmb3JtUHJvcGVydGllcyA9IHt9O1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHRyYW5zZm9ybVByb3ApKSB7XG4gICAgICBpZiAoXG4gICAgICAgIChrZXkuaW5jbHVkZXMoJ3RyYW5zbGF0ZScpIHx8IGtleS5pbmNsdWRlcygncGVyc3BlY3RpdmUnKSkgJiZcbiAgICAgICAgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJ1xuICAgICAgKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgQWZ0ZXIgbWFueSB0cmlhbHMgd2UgZGVjaWRlZCB0byBpZ25vcmUgdGhpcyBlcnJvciAtIGl0IHNheXMgdGhhdCB3ZSBjYW5ub3QgdXNlICdrZXknIHRvIGluZGV4IHRoaXMgb2JqZWN0LlxuICAgICAgICAvLyBTYWRseSBpdCBkb2Vzbid0IGdvIGF3YXkgYWZ0ZXIgdXNpbmcgY2FzdCBga2V5IGFzIGtleW9mIFRyYW5zZm9ybVByb3BlcnRpZXNgLlxuICAgICAgICBuZXdUcmFuc2Zvcm1Qcm9wW2tleV0gPSBgJHt2YWx1ZX1weGA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBAdHMtaWdub3JlIHNhbWUgYXMgYWJvdmUuXG4gICAgICAgIG5ld1RyYW5zZm9ybVByb3Bba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3VHJhbnNmb3JtUHJvcDtcbiAgfSk7XG5cbiAgcmV0dXJuIG5ld1RyYW5zZm9ybTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUN1c3RvbUtleUZyYW1lQW5pbWF0aW9uKFxuICBrZXlmcmFtZURlZmluaXRpb25zOiBLZXlmcmFtZURlZmluaXRpb25zXG4pIHtcbiAgZm9yIChjb25zdCB2YWx1ZSBvZiBPYmplY3QudmFsdWVzKGtleWZyYW1lRGVmaW5pdGlvbnMpKSB7XG4gICAgaWYgKHZhbHVlLnRyYW5zZm9ybSkge1xuICAgICAgdmFsdWUudHJhbnNmb3JtID0gYWRkUHhUb1RyYW5zZm9ybSh2YWx1ZS50cmFuc2Zvcm0gYXMgVHJhbnNmb3JtVHlwZSk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgYW5pbWF0aW9uRGF0YTogQW5pbWF0aW9uRGF0YSA9IHtcbiAgICBuYW1lOiAnJyxcbiAgICBzdHlsZToga2V5ZnJhbWVEZWZpbml0aW9ucyxcbiAgICBkdXJhdGlvbjogLTEsXG4gIH07XG5cbiAgYW5pbWF0aW9uRGF0YS5uYW1lID0gZ2VuZXJhdGVOZXh0Q3VzdG9tS2V5ZnJhbWVOYW1lKCk7XG5cbiAgY29uc3QgcGFyc2VkS2V5ZnJhbWUgPSBjb252ZXJ0QW5pbWF0aW9uT2JqZWN0VG9LZXlmcmFtZXMoYW5pbWF0aW9uRGF0YSk7XG5cbiAgaW5zZXJ0V2ViQW5pbWF0aW9uKGFuaW1hdGlvbkRhdGEubmFtZSwgcGFyc2VkS2V5ZnJhbWUpO1xuXG4gIHJldHVybiBhbmltYXRpb25EYXRhLm5hbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBbmltYXRpb25XaXRoSW5pdGlhbFZhbHVlcyhcbiAgYW5pbWF0aW9uTmFtZTogc3RyaW5nLFxuICBpbml0aWFsVmFsdWVzOiBJbml0aWFsVmFsdWVzU3R5bGVQcm9wc1xuKSB7XG4gIGNvbnN0IGFuaW1hdGlvblN0eWxlID0gc3RydWN0dXJlZENsb25lKEFuaW1hdGlvbnNEYXRhW2FuaW1hdGlvbk5hbWVdLnN0eWxlKTtcbiAgY29uc3QgZmlyc3RBbmltYXRpb25TdGVwID0gYW5pbWF0aW9uU3R5bGVbJzAnXTtcblxuICBjb25zdCB7IHRyYW5zZm9ybSwgLi4ucmVzdCB9ID0gaW5pdGlhbFZhbHVlcztcbiAgY29uc3QgdHJhbnNmb3JtV2l0aFB4ID0gYWRkUHhUb1RyYW5zZm9ybSh0cmFuc2Zvcm0gYXMgVHJhbnNmb3JtVHlwZSk7XG5cbiAgaWYgKHRyYW5zZm9ybSkge1xuICAgIC8vIElmIHRoZXJlIHdhcyBubyBwcmVkZWZpbmVkIHRyYW5zZm9ybSwgd2UgY2FuIHNpbXBseSBhc3NpZ24gdHJhbnNmb3JtIGZyb20gYGluaXRpYWxWYWx1ZXNgLlxuICAgIGlmICghZmlyc3RBbmltYXRpb25TdGVwLnRyYW5zZm9ybSkge1xuICAgICAgZmlyc3RBbmltYXRpb25TdGVwLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVdpdGhQeDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT3Rod2Vyd2lzZSB3ZSBoYXZlIHRvIG1lcmdlIHByZWRlZmluZWQgdHJhbnNmb3JtIHdpdGggdGhlIG9uZSBwcm92aWRlZCBpbiBgaW5pdGlhbFZhbHVlc2AuXG4gICAgICAvLyBUbyBkbyB0aGF0LCB3ZSBjcmVhdGUgYE1hcGAgdGhhdCB3aWxsIGNvbnRhaW4gZmluYWwgdHJhbnNmb3JtLlxuICAgICAgY29uc3QgdHJhbnNmb3JtU3R5bGUgPSBuZXcgTWFwPHN0cmluZywgYW55PigpO1xuXG4gICAgICAvLyBGaXJzdCB3ZSBhc3NpZ24gYWxsIG9mIHRoZSBwcmVkZWZpbmVkIHJ1bGVzXG4gICAgICBmb3IgKGNvbnN0IHJ1bGUgb2YgZmlyc3RBbmltYXRpb25TdGVwLnRyYW5zZm9ybSkge1xuICAgICAgICAvLyBJbiBtb3N0IGNhc2VzIHRoZXJlIHdpbGwgYmUganVzdCBvbmUgaXRlcmF0aW9uXG4gICAgICAgIGZvciAoY29uc3QgW3Byb3BlcnR5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocnVsZSkpIHtcbiAgICAgICAgICB0cmFuc2Zvcm1TdHlsZS5zZXQocHJvcGVydHksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGVuIHdlIGVpdGhlciBhZGQgbmV3IHJ1bGUsIG9yIG92ZXJyaWRlIG9uZSB0aGF0IGFscmVhZHkgZXhpc3RzLlxuICAgICAgZm9yIChjb25zdCBydWxlIG9mIHRyYW5zZm9ybVdpdGhQeCkge1xuICAgICAgICBmb3IgKGNvbnN0IFtwcm9wZXJ0eSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHJ1bGUpKSB7XG4gICAgICAgICAgdHJhbnNmb3JtU3R5bGUuc2V0KHByb3BlcnR5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gRmluYWxseSwgd2UgY29udmVydCBgTWFwYCB3aXRoIGZpbmFsIHRyYW5zZm9ybSBiYWNrIGludG8gYXJyYXkgb2Ygb2JqZWN0cy5cbiAgICAgIGZpcnN0QW5pbWF0aW9uU3RlcC50cmFuc2Zvcm0gPSBBcnJheS5mcm9tKFxuICAgICAgICB0cmFuc2Zvcm1TdHlsZSxcbiAgICAgICAgKFtwcm9wZXJ0eSwgdmFsdWVdKSA9PiAoe1xuICAgICAgICAgIFtwcm9wZXJ0eV06IHZhbHVlLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBhbmltYXRpb25TdHlsZVsnMCddID0ge1xuICAgIC4uLmFuaW1hdGlvblN0eWxlWycwJ10sXG4gICAgLi4ucmVzdCxcbiAgfTtcblxuICAvLyBUT0RPOiBNYXliZSB3ZSBjYW4gZXh0cmFjdCB0aGUgbG9naWMgYmVsb3cgaW50byBzZXBhcmF0ZSBmdW5jdGlvblxuICBjb25zdCBrZXlmcmFtZU5hbWUgPSBnZW5lcmF0ZU5leHRDdXN0b21LZXlmcmFtZU5hbWUoKTtcblxuICBjb25zdCBhbmltYXRpb25PYmplY3Q6IEFuaW1hdGlvbkRhdGEgPSB7XG4gICAgbmFtZToga2V5ZnJhbWVOYW1lLFxuICAgIHN0eWxlOiBhbmltYXRpb25TdHlsZSxcbiAgICBkdXJhdGlvbjogQW5pbWF0aW9uc0RhdGFbYW5pbWF0aW9uTmFtZV0uZHVyYXRpb24sXG4gIH07XG5cbiAgY29uc3Qga2V5ZnJhbWUgPSBjb252ZXJ0QW5pbWF0aW9uT2JqZWN0VG9LZXlmcmFtZXMoYW5pbWF0aW9uT2JqZWN0KTtcblxuICBpbnNlcnRXZWJBbmltYXRpb24oa2V5ZnJhbWVOYW1lLCBrZXlmcmFtZSk7XG5cbiAgcmV0dXJuIGtleWZyYW1lTmFtZTtcbn1cblxubGV0IGN1c3RvbUtleWZyYW1lQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGdlbmVyYXRlTmV4dEN1c3RvbUtleWZyYW1lTmFtZSgpIHtcbiAgcmV0dXJuIGBSRUEke2N1c3RvbUtleWZyYW1lQ291bnRlcisrfWA7XG59XG5cbi8qKlxuICogQ3JlYXRlcyB0cmFuc2l0aW9uIG9mIGdpdmVuIHR5cGUsIGFwcGVuZHMgaXQgdG8gc3R5bGVzaGVldCBhbmQgcmV0dXJuc1xuICoga2V5ZnJhbWUgbmFtZS5cbiAqXG4gKiBAcGFyYW0gdHJhbnNpdGlvblR5cGUgLSBUeXBlIG9mIHRyYW5zaXRpb24gKGUuZy4gTElORUFSKS5cbiAqIEBwYXJhbSB0cmFuc2l0aW9uRGF0YSAtIE9iamVjdCBjb250YWluaW5nIGRhdGEgZm9yIHRyYW5zZm9ybXMgKHRyYW5zbGF0ZVgsXG4gKiAgIHNjYWxlWCwuLi4pLlxuICogQHJldHVybnMgS2V5ZnJhbWUgbmFtZSB0aGF0IHJlcHJlc2VudHMgdHJhbnNpdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFRyYW5zaXRpb25HZW5lcmF0b3IoXG4gIHRyYW5zaXRpb25UeXBlOiBUcmFuc2l0aW9uVHlwZSxcbiAgdHJhbnNpdGlvbkRhdGE6IFRyYW5zaXRpb25EYXRhXG4pIHtcbiAgY29uc3QgdHJhbnNpdGlvbktleWZyYW1lTmFtZSA9IGdlbmVyYXRlTmV4dEN1c3RvbUtleWZyYW1lTmFtZSgpO1xuICBsZXQgZHVtbXlUcmFuc2l0aW9uS2V5ZnJhbWVOYW1lO1xuXG4gIGxldCB0cmFuc2l0aW9uT2JqZWN0O1xuXG4gIHN3aXRjaCAodHJhbnNpdGlvblR5cGUpIHtcbiAgICBjYXNlIFRyYW5zaXRpb25UeXBlLkxJTkVBUjpcbiAgICAgIHRyYW5zaXRpb25PYmplY3QgPSBMaW5lYXJUcmFuc2l0aW9uKFxuICAgICAgICB0cmFuc2l0aW9uS2V5ZnJhbWVOYW1lLFxuICAgICAgICB0cmFuc2l0aW9uRGF0YVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgVHJhbnNpdGlvblR5cGUuU0VRVUVOQ0VEOlxuICAgICAgdHJhbnNpdGlvbk9iamVjdCA9IFNlcXVlbmNlZFRyYW5zaXRpb24oXG4gICAgICAgIHRyYW5zaXRpb25LZXlmcmFtZU5hbWUsXG4gICAgICAgIHRyYW5zaXRpb25EYXRhXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBUcmFuc2l0aW9uVHlwZS5GQURJTkc6XG4gICAgICB0cmFuc2l0aW9uT2JqZWN0ID0gRmFkaW5nVHJhbnNpdGlvbihcbiAgICAgICAgdHJhbnNpdGlvbktleWZyYW1lTmFtZSxcbiAgICAgICAgdHJhbnNpdGlvbkRhdGFcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFRyYW5zaXRpb25UeXBlLkpVTVBJTkc6XG4gICAgICB0cmFuc2l0aW9uT2JqZWN0ID0gSnVtcGluZ1RyYW5zaXRpb24oXG4gICAgICAgIHRyYW5zaXRpb25LZXlmcmFtZU5hbWUsXG4gICAgICAgIHRyYW5zaXRpb25EYXRhXG4gICAgICApO1xuICAgICAgYnJlYWs7XG5cbiAgICAvLyBIZXJlIGNvZGUgYmxvY2sgd2l0aCB7fSBpcyBuZWNlc3NhcnkgYmVjYXVzZSBvZiBlc2xpbnRcbiAgICBjYXNlIFRyYW5zaXRpb25UeXBlLkNVUlZFRDoge1xuICAgICAgZHVtbXlUcmFuc2l0aW9uS2V5ZnJhbWVOYW1lID0gZ2VuZXJhdGVOZXh0Q3VzdG9tS2V5ZnJhbWVOYW1lKCk7XG5cbiAgICAgIGNvbnN0IHsgZmlyc3RLZXlmcmFtZU9iaiwgc2Vjb25kS2V5ZnJhbWVPYmogfSA9IEN1cnZlZFRyYW5zaXRpb24oXG4gICAgICAgIHRyYW5zaXRpb25LZXlmcmFtZU5hbWUsXG4gICAgICAgIGR1bW15VHJhbnNpdGlvbktleWZyYW1lTmFtZSxcbiAgICAgICAgdHJhbnNpdGlvbkRhdGFcbiAgICAgICk7XG5cbiAgICAgIHRyYW5zaXRpb25PYmplY3QgPSBmaXJzdEtleWZyYW1lT2JqO1xuXG4gICAgICBjb25zdCBkdW1teUtleWZyYW1lID1cbiAgICAgICAgY29udmVydEFuaW1hdGlvbk9iamVjdFRvS2V5ZnJhbWVzKHNlY29uZEtleWZyYW1lT2JqKTtcblxuICAgICAgaW5zZXJ0V2ViQW5pbWF0aW9uKGR1bW15VHJhbnNpdGlvbktleWZyYW1lTmFtZSwgZHVtbXlLZXlmcmFtZSk7XG5cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFRyYW5zaXRpb25UeXBlLkVOVFJZX0VYSVQ6XG4gICAgICB0cmFuc2l0aW9uT2JqZWN0ID0gRW50cnlFeGl0VHJhbnNpdGlvbihcbiAgICAgICAgdHJhbnNpdGlvbktleWZyYW1lTmFtZSxcbiAgICAgICAgdHJhbnNpdGlvbkRhdGFcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIGNvbnN0IHRyYW5zaXRpb25LZXlmcmFtZSA9XG4gICAgY29udmVydEFuaW1hdGlvbk9iamVjdFRvS2V5ZnJhbWVzKHRyYW5zaXRpb25PYmplY3QpO1xuXG4gIGluc2VydFdlYkFuaW1hdGlvbih0cmFuc2l0aW9uS2V5ZnJhbWVOYW1lLCB0cmFuc2l0aW9uS2V5ZnJhbWUpO1xuXG4gIHJldHVybiB7IHRyYW5zaXRpb25LZXlmcmFtZU5hbWUsIGR1bW15VHJhbnNpdGlvbktleWZyYW1lTmFtZSB9O1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUFDLElBQUFBLHNCQUFBLEdBQUFDLE9BQUE7QUFBQUMsTUFBQSxDQUFBQyxjQUFBLENBQUFDLE9BQUE7RUFBQUMsS0FBQTtBQUFB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