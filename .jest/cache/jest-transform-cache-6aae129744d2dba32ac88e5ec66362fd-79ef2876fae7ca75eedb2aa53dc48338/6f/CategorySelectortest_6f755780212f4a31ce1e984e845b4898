fac9f7c4af7fe0e9726fe4b12377af52
_getJestObj().mock('react-native/Libraries/Components/ScrollView/ScrollView', function () {
  var React = require('react');
  var scrollToSpy = jest.fn();
  var MockScrollView = React.forwardRef(function (props, ref) {
    React.useImperativeHandle(ref, function () {
      return {
        scrollTo: scrollToSpy
      };
    });
    var childrenWithLayouts = React.Children.map(props.children, function (child, index) {
      if (!child) return null;
      return React.cloneElement(child, {
        onLayout: function onLayout(event) {
          child.props.onLayout == null || child.props.onLayout({
            nativeEvent: {
              layout: {
                x: index * 100,
                y: 0,
                width: 80,
                height: 40
              }
            }
          });
        }
      });
    });
    return (0, _jsxRuntime.jsx)(React.Fragment, {
      children: childrenWithLayouts
    });
  });
  MockScrollView.scrollToSpy = scrollToSpy;
  return MockScrollView;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
require("@testing-library/jest-native");
var _CategorySelector = _interopRequireDefault(require("../../../src/components/exercise-common/CategorySelector"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.useFakeTimers();
jest.spyOn(_reactNative2.Animated, 'timing').mockImplementation(function () {
  return {
    start: function start(callback) {
      setTimeout(function () {
        (0, _reactNative.act)(function () {
          if (callback) {
            callback({
              finished: true
            });
          }
        });
      }, 500);
    },
    stop: jest.fn()
  };
});
describe('CategorySelector Component', function () {
  var mockCategories = [{
    id: '1',
    name: 'Fruits'
  }, {
    id: '2',
    name: 'Vegetables'
  }, {
    id: '3',
    name: 'Dairy Products'
  }, {
    id: '4',
    name: 'Meat & Fish'
  }, {
    id: '5',
    name: 'Beverages'
  }];
  var stableProps = {
    categories: mockCategories,
    selectedCategory: '1',
    onSelectCategory: jest.fn()
  };
  var renderCategorySelector = function renderCategorySelector() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, stableProps, props)));
  };
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
    _reactNative2.ScrollView.scrollToSpy.mockClear();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  describe('Rendering', function () {
    it('should render without crashing', function () {
      expect(renderCategorySelector()).toBeTruthy();
    });
    it('should render all categories correctly', function () {
      var _renderCategorySelect = renderCategorySelector(),
        getByText = _renderCategorySelect.getByText;
      mockCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should render categories in the correct order', function () {
      var _renderCategorySelect2 = renderCategorySelector(),
        getAllByRole = _renderCategorySelect2.getAllByRole;
      var categoryNames = getAllByRole('button').map(function (element) {
        return element.props.accessibilityLabel;
      });
      expect(categoryNames).toEqual(mockCategories.map(function (cat) {
        return cat.name;
      }));
    });
    it('should handle empty categories array gracefully', function () {
      var _renderCategorySelect3 = renderCategorySelector({
          categories: []
        }),
        queryByText = _renderCategorySelect3.queryByText;
      mockCategories.forEach(function (category) {
        expect(queryByText(category.name)).toBeNull();
      });
    });
    it('should highlight the selected category visually', function () {
      var _renderCategorySelect4 = renderCategorySelector({
          selectedCategory: '2'
        }),
        getByRole = _renderCategorySelect4.getByRole;
      var selectedPill = getByRole('button', {
        name: 'Vegetables'
      });
      expect(selectedPill).toHaveAccessibilityState({
        selected: true
      });
    });
  });
  describe('User Interactions', function () {
    it('should call onSelectCategory when a different category is pressed', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect5 = renderCategorySelector({
          selectedCategory: '1',
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect5.getByText;
      _reactNative.fireEvent.press(getByText('Vegetables'));
      expect(mockOnSelect).toHaveBeenCalledTimes(1);
      expect(mockOnSelect).toHaveBeenCalledWith('2');
    });
    it('should not call onSelectCategory when the same category is pressed', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect6 = renderCategorySelector({
          selectedCategory: '1',
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect6.getByText;
      _reactNative.fireEvent.press(getByText('Fruits'));
      expect(mockOnSelect).not.toHaveBeenCalled();
    });
    it('should call onSelectCategory with correct category id for each category', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect7 = renderCategorySelector({
          selectedCategory: '1',
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect7.getByText;
      var categoriesToTest = mockCategories.filter(function (cat) {
        return cat.id !== '1';
      });
      categoriesToTest.forEach(function (category) {
        _reactNative.fireEvent.press(getByText(category.name));
        expect(mockOnSelect).toHaveBeenCalledWith(category.id);
      });
      expect(mockOnSelect).toHaveBeenCalledTimes(categoriesToTest.length);
    });
  });
  describe('Animations', function () {
    it('should trigger press animations correctly', function () {
      var _renderCategorySelect8 = renderCategorySelector(),
        getByText = _renderCategorySelect8.getByText;
      var categoryPill = getByText('Vegetables');
      (0, _reactNative.act)(function () {
        (0, _reactNative.fireEvent)(categoryPill, 'pressIn');
        (0, _reactNative.fireEvent)(categoryPill, 'pressOut');
      });
      expect(categoryPill).toBeTruthy();
    });
    it('should handle rapid press interactions without crashing', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect9 = renderCategorySelector({
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect9.getByText;
      var categoryPill = getByText('Vegetables');
      (0, _reactNative.act)(function () {
        (0, _reactNative.fireEvent)(categoryPill, 'pressIn');
        (0, _reactNative.fireEvent)(categoryPill, 'pressOut');
        _reactNative.fireEvent.press(categoryPill);
        (0, _reactNative.fireEvent)(categoryPill, 'pressIn');
        (0, _reactNative.fireEvent)(categoryPill, 'pressOut');
      });
      expect(mockOnSelect).toHaveBeenCalledWith('2');
      expect(categoryPill).toBeTruthy();
    });
    it('should not trigger new animation if one is already in progress', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect0 = renderCategorySelector({
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect0.getByText;
      _reactNative.fireEvent.press(getByText('Vegetables'));
      _reactNative.fireEvent.press(getByText('Dairy Products'));
      expect(mockOnSelect).toHaveBeenCalledTimes(2);
      expect(mockOnSelect).toHaveBeenNthCalledWith(1, '2');
      expect(mockOnSelect).toHaveBeenNthCalledWith(2, '3');
      (0, _reactNative.act)(function () {
        jest.runAllTimers();
      });
    });
  });
  describe('Edge Cases', function () {
    it('should handle undefined selectedCategory gracefully', function () {
      var _renderCategorySelect1 = renderCategorySelector({
          selectedCategory: undefined
        }),
        getByText = _renderCategorySelect1.getByText;
      mockCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should handle null selectedCategory gracefully', function () {
      var _renderCategorySelect10 = renderCategorySelector({
          selectedCategory: null
        }),
        getByText = _renderCategorySelect10.getByText;
      mockCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should handle non-existent selectedCategory id', function () {
      var _renderCategorySelect11 = renderCategorySelector({
          selectedCategory: 'non-existent'
        }),
        getByText = _renderCategorySelect11.getByText;
      mockCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should handle missing onSelectCategory prop gracefully', function () {
      var _renderCategorySelect12 = renderCategorySelector({
          onSelectCategory: undefined
        }),
        getByText = _renderCategorySelect12.getByText;
      expect(function () {
        _reactNative.fireEvent.press(getByText('Vegetables'));
      }).not.toThrow();
    });
    it('should handle categories with special characters in names', function () {
      var specialCategories = [{
        id: '1',
        name: 'Café & Thé'
      }, {
        id: '2',
        name: 'Fruits & Légumes'
      }, {
        id: '3',
        name: 'Viande/Poisson'
      }];
      var _renderCategorySelect13 = renderCategorySelector({
          categories: specialCategories
        }),
        getByText = _renderCategorySelect13.getByText;
      specialCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should handle very long category names', function () {
      var longNameCategories = [{
        id: '1',
        name: 'This is a very long category name that might cause layout issues'
      }, {
        id: '2',
        name: 'Short'
      }];
      var _renderCategorySelect14 = renderCategorySelector({
          categories: longNameCategories
        }),
        getByText = _renderCategorySelect14.getByText;
      longNameCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
  });
  describe('Performance', function () {
    it('should handle large number of categories efficiently', function () {
      var manyCategories = Array.from({
        length: 100
      }, function (_, i) {
        return {
          id: `${i + 1}`,
          name: `Category ${i + 1}`
        };
      });
      var startTime = Date.now();
      var _renderCategorySelect15 = renderCategorySelector({
          categories: manyCategories
        }),
        queryAllByText = _renderCategorySelect15.queryAllByText;
      var endTime = Date.now();
      expect(endTime - startTime).toBeLessThan(1000);
      var categoryElements = queryAllByText(/^Category/);
      expect(categoryElements).toHaveLength(100);
    });
  });
  describe('Accessibility', function () {
    it('should have proper accessibility labels', function () {
      var _renderCategorySelect16 = renderCategorySelector(),
        getByLabelText = _renderCategorySelect16.getByLabelText;
      mockCategories.forEach(function (category) {
        var element = getByLabelText(category.name);
        expect(element).toBeTruthy();
      });
    });
    it('should support screen reader navigation', function () {
      var _renderCategorySelect17 = renderCategorySelector(),
        getAllByRole = _renderCategorySelect17.getAllByRole;
      var buttons = getAllByRole('button');
      expect(buttons).toHaveLength(mockCategories.length);
    });
  });
  describe('Animation Edge Cases', function () {
    it('should handle animation when fromCategory is null/undefined', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect18 = renderCategorySelector({
          selectedCategory: undefined,
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect18.getByText,
        rerender = _renderCategorySelect18.rerender;
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, stableProps, {
        selectedCategory: "2",
        onSelectCategory: mockOnSelect
      })));
      expect(getByText('Vegetables')).toBeTruthy();
    });
    it('should handle animation when toCategory is null/undefined', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect19 = renderCategorySelector({
          selectedCategory: "1",
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect19.getByText,
        rerender = _renderCategorySelect19.rerender;
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, stableProps, {
        selectedCategory: undefined,
        onSelectCategory: mockOnSelect
      })));
      expect(getByText('Fruits')).toBeTruthy();
    });
    it('should handle case where no animations are created (empty animationsArray)', function () {
      var _renderCategorySelect20 = renderCategorySelector({
          categories: [],
          selectedCategory: '1'
        }),
        rerender = _renderCategorySelect20.rerender;
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: [],
        selectedCategory: "2",
        onSelectCategory: jest.fn()
      }));
      expect(true).toBeTruthy();
    });
  });
  describe('Animation fallbacks', function () {
    it('should handle missing animation references gracefully', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: [{
            id: '1',
            name: 'Test'
          }],
          selectedCategory: "1",
          onSelectCategory: jest.fn()
        })),
        rerender = _render.rerender;
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: [{
          id: '999',
          name: 'New'
        }],
        selectedCategory: "999",
        onSelectCategory: jest.fn()
      }));
      expect(true).toBeTruthy();
    });
  });
  describe('Memoization (areEqual function)', function () {
    it('should re-render when selectedCategory changes', function () {
      var _renderCategorySelect21 = renderCategorySelector({
          selectedCategory: '1'
        }),
        rerender = _renderCategorySelect21.rerender,
        getByRole = _renderCategorySelect21.getByRole;
      var button = getByRole('button', {
        name: 'Fruits'
      });
      expect(button).toHaveAccessibilityState({
        selected: true
      });
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, stableProps, {
        selectedCategory: "2"
      })));
      button = getByRole('button', {
        name: 'Vegetables'
      });
      expect(button).toHaveAccessibilityState({
        selected: true
      });
    });
    it('should re-render when primaryColor changes', function () {
      var _renderCategorySelect22 = renderCategorySelector({
          primaryColor: '#FF0000'
        }),
        rerender = _renderCategorySelect22.rerender;
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, stableProps, {
        primaryColor: "#00FF00"
      })));
      expect(true).toBeTruthy();
    });
    it('should re-render when categories length changes', function () {
      var _renderCategorySelect23 = renderCategorySelector(),
        rerender = _renderCategorySelect23.rerender,
        queryByText = _renderCategorySelect23.queryByText;
      var newCategories = [].concat(mockCategories, [{
        id: '6',
        name: 'New Category'
      }]);
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, stableProps, {
        categories: newCategories
      })));
      expect(queryByText('New Category')).toBeTruthy();
    });
    it('should NOT re-render when categories array reference changes but content is same', function () {
      var _renderCategorySelect24 = renderCategorySelector(),
        rerender = _renderCategorySelect24.rerender;
      var sameCategoriesNewRef = mockCategories.map(function (cat) {
        return Object.assign({}, cat);
      });
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, stableProps, {
        categories: sameCategoriesNewRef
      })));
      expect(true).toBeTruthy();
    });
    it('should re-render when category content changes', function () {
      var _renderCategorySelect25 = renderCategorySelector(),
        rerender = _renderCategorySelect25.rerender,
        queryByText = _renderCategorySelect25.queryByText;
      var modifiedCategories = [{
        id: '1',
        name: 'Modified Fruits'
      }].concat((0, _toConsumableArray2.default)(mockCategories.slice(1)));
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, stableProps, {
        categories: modifiedCategories
      })));
      expect(queryByText('Modified Fruits')).toBeTruthy();
      expect(queryByText('Fruits')).toBeNull();
    });
  });
  describe('Auto-scroll behavior', function () {
    it('should scroll to selected category when layout is available', (0, _asyncToGenerator2.default)(function* () {
      var _renderCategorySelect26 = renderCategorySelector({
          selectedCategory: '1'
        }),
        rerender = _renderCategorySelect26.rerender;
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, stableProps, {
        selectedCategory: "5"
      })));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        jest.runAllTimers();
      }));
      expect(_reactNative2.ScrollView.scrollToSpy).toHaveBeenCalled();
    }));
    it('should not crash when scrollViewRef is not available', function () {
      var _renderCategorySelect27 = renderCategorySelector(),
        rerender = _renderCategorySelect27.rerender;
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, stableProps, {
        selectedCategory: "3"
      })));
      expect(true).toBeTruthy();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,