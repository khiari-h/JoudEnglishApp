{"version":3,"names":["_react","require","_asyncStorage","_interopRequireDefault","useConversation","_currentScenario$step","conversationData","arguments","length","undefined","level","_useState","useState","_useState2","_slicedToArray2","default","currentScenarioIndex","setCurrentScenarioIndex","_useState3","_useState4","conversation","setConversation","_useState5","_useState6","currentStep","setCurrentStep","_useState7","_useState8","message","setMessage","_useState9","_useState0","isTyping","setIsTyping","_useState1","_useState10","suggestions","setSuggestions","_useState11","_useState12","showHelp","setShowHelp","_useState13","_useState14","completedScenarios","setCompletedScenarios","_useState15","_useState16","conversationHistory","setConversationHistory","_useState17","_useState18","loaded","setLoaded","_useState19","_useState20","showDetailedProgress","setShowDetailedProgress","isInitialized","useRef","conversationChanged","scenarios","exercises","currentScenario","totalScenarios","totalSteps","steps","STORAGE_KEY","useEffect","loadData","_ref","_asyncToGenerator2","saved","AsyncStorage","getItem","_JSON$parse","JSON","parse","savedCompleted","savedHistory","lastPosition","scenarioIndex","stepIndex","error","console","apply","saveData","useCallback","dataToSave","setItem","stringify","current","newCompletedScenarios","Object","assign","forEach","_","index","startConversation","savedConversation","_currentScenario$step2","botMessages","filter","msg","sender","calculatedStep","Math","min","max","setTimeout","initialMessage","id","Date","now","text","botMessage","sendMessage","trim","userMessage","updatedConversation","concat","_toConsumableArray2","nextStepIndex","nextStep","conversationWithBot","prev","_defineProperty2","updatedAt","toISOString","timestamp","completedAt","messageCount","changeScenario","newIndex","handleSuggestion","suggestion","toggleHelp","toggleDetailedProgress","getStats","completedScenariosCount","values","Boolean","totalProgress","round","completionProgress","getDisplayData","_currentScenario$step3","scenarioCounter","stepCounter","scenarioTitles","map","scenario","title","currentHelp","help","hasValidData","Array","isArray","isLastStep","isConversationStarted","stats","display","_default","exports"],"sources":["useConversation.js"],"sourcesContent":["// hooks/useConversation.js - HOOK UNIFIÃ‰ SIMPLE\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n/**\n * ðŸŽ¯ Hook unifiÃ© pour Conversation Exercise\n * Remplace useConversationProgress + useConversationExerciseState + logique du composant\n * Simple, efficace, maintenable - pattern identique aux 4 autres exercices\n */\nconst useConversation = (conversationData = null, level = \"A1\") => {\n  \n  // =================== CORE STATE ===================\n  const [currentScenarioIndex, setCurrentScenarioIndex] = useState(0);\n  const [conversation, setConversation] = useState([]);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [message, setMessage] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const [suggestions, setSuggestions] = useState([]);\n  const [showHelp, setShowHelp] = useState(false);\n  const [completedScenarios, setCompletedScenarios] = useState({});\n  const [conversationHistory, setConversationHistory] = useState({});\n  const [loaded, setLoaded] = useState(false);\n  const [showDetailedProgress, setShowDetailedProgress] = useState(false);\n\n  // =================== REFS ===================\n  const isInitialized = useRef(false);\n  const conversationChanged = useRef(false);\n\n  // =================== COMPUTED VALUES ===================\n  const scenarios = conversationData?.exercises || [];\n  const currentScenario = scenarios[currentScenarioIndex] || {};\n  const totalScenarios = scenarios.length;\n  const totalSteps = currentScenario.steps?.length || 0;\n  \n  // =================== PERSISTENCE ===================\n  const STORAGE_KEY = `conversation_${level}`;\n\n  // Load data from storage\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const saved = await AsyncStorage.getItem(STORAGE_KEY);\n        if (saved) {\n          const { completedScenarios: savedCompleted, conversationHistory: savedHistory, lastPosition } = JSON.parse(saved);\n          setCompletedScenarios(savedCompleted || {});\n          setConversationHistory(savedHistory || {});\n          if (lastPosition) {\n            setCurrentScenarioIndex(lastPosition.scenarioIndex || 0);\n            setCurrentStep(lastPosition.stepIndex || 0);\n          }\n        }\n      } catch (error) {\n        console.error('Error loading conversation data:', error);\n      } finally {\n        setLoaded(true);\n      }\n    };\n    loadData();\n  }, [level]);\n\n  // Save data to storage\n  const saveData = useCallback(async () => {\n    try {\n      const dataToSave = {\n        completedScenarios,\n        conversationHistory,\n        lastPosition: {\n          scenarioIndex: currentScenarioIndex,\n          stepIndex: currentStep\n        }\n      };\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(dataToSave));\n    } catch (error) {\n      console.error('Error saving conversation data:', error);\n    }\n  }, [completedScenarios, conversationHistory, currentScenarioIndex, currentStep, STORAGE_KEY]);\n\n  // Auto-save when data changes\n  useEffect(() => {\n    if (loaded) saveData();\n  }, [saveData, loaded]);\n\n  // Initialize progress for new scenarios\n  useEffect(() => {\n    if (loaded && conversationData && !isInitialized.current) {\n      const newCompletedScenarios = { ...completedScenarios };\n      scenarios.forEach((_, index) => {\n        if (!newCompletedScenarios[index]) {\n          newCompletedScenarios[index] = null;\n        }\n      });\n      setCompletedScenarios(newCompletedScenarios);\n      isInitialized.current = true;\n    }\n  }, [loaded, conversationData, scenarios, completedScenarios]);\n\n  // =================== CONVERSATION MANAGEMENT ===================\n  const startConversation = useCallback(() => {\n    if (!currentScenario.steps || currentScenario.steps.length === 0) return;\n\n    // Check if there's saved conversation for this scenario\n    const savedConversation = conversationHistory[currentScenarioIndex];\n    \n    if (savedConversation?.conversation && savedConversation.conversation.length > 0) {\n      // Restore saved conversation\n      setConversation(savedConversation.conversation);\n      \n      // Calculate current step based on bot messages\n      const botMessages = savedConversation.conversation.filter(msg => msg.sender === \"bot\");\n      const calculatedStep = Math.min(botMessages.length - 1, currentScenario.steps.length - 1);\n      setCurrentStep(Math.max(0, calculatedStep));\n      \n      // Set suggestions for current step\n      const stepIndex = Math.min(calculatedStep, currentScenario.steps.length - 1);\n      setSuggestions(currentScenario.steps[stepIndex]?.suggestions || []);\n    } else {\n      // Start new conversation\n      setConversation([]);\n      setCurrentStep(0);\n      \n      // Add initial bot message\n      setTimeout(() => {\n        setIsTyping(true);\n        \n        setTimeout(() => {\n          const initialMessage = {\n            id: `bot-${Date.now()}`,\n            text: currentScenario.steps[0].botMessage,\n            sender: \"bot\",\n          };\n          \n          setConversation([initialMessage]);\n          setSuggestions(currentScenario.steps[0].suggestions || []);\n          setIsTyping(false);\n          conversationChanged.current = true;\n        }, 1000);\n      }, 500);\n    }\n  }, [currentScenario, conversationHistory, currentScenarioIndex]);\n\n  // Initialize conversation when scenario changes\n  useEffect(() => {\n    if (loaded && currentScenario.steps) {\n      startConversation();\n    }\n  }, [loaded, currentScenarioIndex, startConversation]);\n\n  // =================== MESSAGE HANDLING ===================\n  const sendMessage = useCallback(() => {\n    if (message.trim() === \"\" || !currentScenario.steps) return;\n\n    // User message\n    const userMessage = {\n      id: `user-${Date.now()}`,\n      text: message,\n      sender: \"user\",\n    };\n\n    const updatedConversation = [...conversation, userMessage];\n    setConversation(updatedConversation);\n    setMessage(\"\");\n    setSuggestions([]);\n    conversationChanged.current = true;\n\n    // Bot response\n    setIsTyping(true);\n\n    setTimeout(() => {\n      const nextStepIndex = currentStep + 1;\n\n      if (nextStepIndex < currentScenario.steps.length) {\n        const nextStep = currentScenario.steps[nextStepIndex];\n\n        const botMessage = {\n          id: `bot-${Date.now()}`,\n          text: nextStep.botMessage,\n          sender: \"bot\",\n        };\n\n        const conversationWithBot = [...updatedConversation, botMessage];\n        setConversation(conversationWithBot);\n        setCurrentStep(nextStepIndex);\n        setSuggestions(nextStep.suggestions || []);\n\n        // Save to history\n        setConversationHistory(prev => ({\n          ...prev,\n          [currentScenarioIndex]: {\n            conversation: conversationWithBot,\n            updatedAt: new Date().toISOString(),\n            timestamp: Date.now(),\n          }\n        }));\n\n        // Mark as completed if last step\n        if (nextStepIndex === currentScenario.steps.length - 1) {\n          setCompletedScenarios(prev => ({\n            ...prev,\n            [currentScenarioIndex]: {\n              completedAt: new Date().toISOString(),\n              timestamp: Date.now(),\n              messageCount: conversationWithBot.length,\n            }\n          }));\n        }\n      }\n\n      setIsTyping(false);\n    }, 1000);\n  }, [message, currentScenario, currentStep, conversation, currentScenarioIndex]);\n\n  // =================== NAVIGATION ACTIONS ===================\n  const changeScenario = useCallback((newIndex) => {\n    if (newIndex !== currentScenarioIndex && newIndex >= 0 && newIndex < scenarios.length) {\n      setCurrentScenarioIndex(newIndex);\n      setConversation([]);\n      setCurrentStep(0);\n      setSuggestions([]);\n      setMessage(\"\");\n      setShowHelp(false);\n      conversationChanged.current = false;\n    }\n  }, [currentScenarioIndex, scenarios.length]);\n\n  const handleSuggestion = useCallback((suggestion) => {\n    setMessage(suggestion);\n  }, []);\n\n  const toggleHelp = useCallback(() => {\n    setShowHelp(prev => !prev);\n  }, []);\n\n  const toggleDetailedProgress = useCallback(() => {\n    setShowDetailedProgress(prev => !prev);\n  }, []);\n\n  // =================== COMPUTED STATS ===================\n  const getStats = useCallback(() => {\n    const completedScenariosCount = Object.values(completedScenarios).filter(Boolean).length;\n    const totalProgress = totalScenarios > 0 ? Math.round((completedScenariosCount / totalScenarios) * 100) : 0;\n    const completionProgress = totalSteps > 0 ? ((currentStep + 1) / totalSteps) * 100 : 0;\n\n    return {\n      totalScenarios,\n      completedScenariosCount,\n      totalProgress,\n      completionProgress,\n      currentStep: currentStep + 1,\n      totalSteps\n    };\n  }, [completedScenarios, totalScenarios, totalSteps, currentStep]);\n\n  // =================== COMPUTED DISPLAY ===================\n  const getDisplayData = useCallback(() => {\n    const scenarioCounter = `${currentScenarioIndex + 1} / ${totalScenarios}`;\n    const stepCounter = `${currentStep + 1} / ${totalSteps}`;\n    const scenarioTitles = scenarios.map(scenario => scenario.title || \"Scenario\");\n    \n    return {\n      scenarioCounter,\n      stepCounter,\n      scenarios: scenarioTitles,\n      currentScenario,\n      currentHelp: currentScenario.steps?.[currentStep]?.help || \"\"\n    };\n  }, [currentScenarioIndex, totalScenarios, currentStep, totalSteps, scenarios, currentScenario]);\n\n  // =================== VALIDATION ===================\n  const hasValidData = conversationData?.exercises && Array.isArray(conversationData.exercises) && conversationData.exercises.length > 0;\n  const isLastStep = currentStep === totalSteps - 1;\n  const isConversationStarted = conversation.length > 0;\n\n  return {\n    // State\n    currentScenarioIndex,\n    conversation,\n    currentStep,\n    message,\n    setMessage,\n    isTyping,\n    suggestions,\n    showHelp,\n    completedScenarios,\n    conversationHistory,\n    loaded,\n    showDetailedProgress,\n    \n    // Data\n    currentScenario,\n    totalScenarios,\n    totalSteps,\n    hasValidData,\n    \n    // Actions\n    changeScenario,\n    sendMessage,\n    handleSuggestion,\n    toggleHelp,\n    toggleDetailedProgress,\n    startConversation,\n    \n    // Computed\n    isLastStep,\n    isConversationStarted,\n    stats: getStats(),\n    display: getDisplayData(),\n  };\n};\n\nexport default useConversation;"],"mappings":"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","ignoreList":[]}