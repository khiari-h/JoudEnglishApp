be877538095c54aa096782eb67f9e9dd
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var useConversation = function useConversation() {
  var _currentScenario$step;
  var conversationData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "A1";
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    currentScenarioIndex = _useState2[0],
    setCurrentScenarioIndex = _useState2[1];
  var _useState3 = (0, _react.useState)([]),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    conversation = _useState4[0],
    setConversation = _useState4[1];
  var _useState5 = (0, _react.useState)(0),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    currentStep = _useState6[0],
    setCurrentStep = _useState6[1];
  var _useState7 = (0, _react.useState)(""),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    message = _useState8[0],
    setMessage = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    isTyping = _useState0[0],
    setIsTyping = _useState0[1];
  var _useState1 = (0, _react.useState)([]),
    _useState10 = (0, _slicedToArray2.default)(_useState1, 2),
    suggestions = _useState10[0],
    setSuggestions = _useState10[1];
  var _useState11 = (0, _react.useState)(false),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    showHelp = _useState12[0],
    setShowHelp = _useState12[1];
  var _useState13 = (0, _react.useState)({}),
    _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
    completedScenarios = _useState14[0],
    setCompletedScenarios = _useState14[1];
  var _useState15 = (0, _react.useState)({}),
    _useState16 = (0, _slicedToArray2.default)(_useState15, 2),
    conversationHistory = _useState16[0],
    setConversationHistory = _useState16[1];
  var _useState17 = (0, _react.useState)(false),
    _useState18 = (0, _slicedToArray2.default)(_useState17, 2),
    loaded = _useState18[0],
    setLoaded = _useState18[1];
  var _useState19 = (0, _react.useState)(false),
    _useState20 = (0, _slicedToArray2.default)(_useState19, 2),
    showDetailedProgress = _useState20[0],
    setShowDetailedProgress = _useState20[1];
  var isInitialized = (0, _react.useRef)(false);
  var conversationChanged = (0, _react.useRef)(false);
  var scenarios = (conversationData == null ? void 0 : conversationData.exercises) || [];
  var currentScenario = scenarios[currentScenarioIndex] || {};
  var totalScenarios = scenarios.length;
  var totalSteps = ((_currentScenario$step = currentScenario.steps) == null ? void 0 : _currentScenario$step.length) || 0;
  var STORAGE_KEY = `conversation_${level}`;
  (0, _react.useEffect)(function () {
    var loadData = function () {
      var _ref = (0, _asyncToGenerator2.default)(function* () {
        try {
          var saved = yield _asyncStorage.default.getItem(STORAGE_KEY);
          if (saved) {
            var _JSON$parse = JSON.parse(saved),
              savedCompleted = _JSON$parse.completedScenarios,
              savedHistory = _JSON$parse.conversationHistory,
              lastPosition = _JSON$parse.lastPosition;
            setCompletedScenarios(savedCompleted || {});
            setConversationHistory(savedHistory || {});
            if (lastPosition) {
              setCurrentScenarioIndex(lastPosition.scenarioIndex || 0);
              setCurrentStep(lastPosition.stepIndex || 0);
            }
          }
        } catch (error) {
          console.error('Error loading conversation data:', error);
        } finally {
          setLoaded(true);
        }
      });
      return function loadData() {
        return _ref.apply(this, arguments);
      };
    }();
    loadData();
  }, [level]);
  var saveData = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      var dataToSave = {
        completedScenarios: completedScenarios,
        conversationHistory: conversationHistory,
        lastPosition: {
          scenarioIndex: currentScenarioIndex,
          stepIndex: currentStep
        }
      };
      yield _asyncStorage.default.setItem(STORAGE_KEY, JSON.stringify(dataToSave));
    } catch (error) {
      console.error('Error saving conversation data:', error);
    }
  }), [completedScenarios, conversationHistory, currentScenarioIndex, currentStep, STORAGE_KEY]);
  (0, _react.useEffect)(function () {
    if (loaded) saveData();
  }, [saveData, loaded]);
  (0, _react.useEffect)(function () {
    if (loaded && conversationData && !isInitialized.current) {
      var newCompletedScenarios = Object.assign({}, completedScenarios);
      scenarios.forEach(function (_, index) {
        if (!newCompletedScenarios[index]) {
          newCompletedScenarios[index] = null;
        }
      });
      setCompletedScenarios(newCompletedScenarios);
      isInitialized.current = true;
    }
  }, [loaded, conversationData, scenarios, completedScenarios]);
  var startConversation = (0, _react.useCallback)(function () {
    if (!currentScenario.steps || currentScenario.steps.length === 0) return;
    var savedConversation = conversationHistory[currentScenarioIndex];
    if (savedConversation != null && savedConversation.conversation && savedConversation.conversation.length > 0) {
      var _currentScenario$step2;
      setConversation(savedConversation.conversation);
      var botMessages = savedConversation.conversation.filter(function (msg) {
        return msg.sender === "bot";
      });
      var calculatedStep = Math.min(botMessages.length - 1, currentScenario.steps.length - 1);
      setCurrentStep(Math.max(0, calculatedStep));
      var stepIndex = Math.min(calculatedStep, currentScenario.steps.length - 1);
      setSuggestions(((_currentScenario$step2 = currentScenario.steps[stepIndex]) == null ? void 0 : _currentScenario$step2.suggestions) || []);
    } else {
      setConversation([]);
      setCurrentStep(0);
      setTimeout(function () {
        setIsTyping(true);
        setTimeout(function () {
          var initialMessage = {
            id: `bot-${Date.now()}`,
            text: currentScenario.steps[0].botMessage,
            sender: "bot"
          };
          setConversation([initialMessage]);
          setSuggestions(currentScenario.steps[0].suggestions || []);
          setIsTyping(false);
          conversationChanged.current = true;
        }, 1000);
      }, 500);
    }
  }, [currentScenario, conversationHistory, currentScenarioIndex]);
  (0, _react.useEffect)(function () {
    if (loaded && currentScenario.steps) {
      startConversation();
    }
  }, [loaded, currentScenarioIndex, startConversation]);
  var sendMessage = (0, _react.useCallback)(function () {
    if (message.trim() === "" || !currentScenario.steps) return;
    var userMessage = {
      id: `user-${Date.now()}`,
      text: message,
      sender: "user"
    };
    var updatedConversation = [].concat((0, _toConsumableArray2.default)(conversation), [userMessage]);
    setConversation(updatedConversation);
    setMessage("");
    setSuggestions([]);
    conversationChanged.current = true;
    setIsTyping(true);
    setTimeout(function () {
      var nextStepIndex = currentStep + 1;
      if (nextStepIndex < currentScenario.steps.length) {
        var nextStep = currentScenario.steps[nextStepIndex];
        var botMessage = {
          id: `bot-${Date.now()}`,
          text: nextStep.botMessage,
          sender: "bot"
        };
        var conversationWithBot = [].concat((0, _toConsumableArray2.default)(updatedConversation), [botMessage]);
        setConversation(conversationWithBot);
        setCurrentStep(nextStepIndex);
        setSuggestions(nextStep.suggestions || []);
        setConversationHistory(function (prev) {
          return Object.assign({}, prev, (0, _defineProperty2.default)({}, currentScenarioIndex, {
            conversation: conversationWithBot,
            updatedAt: new Date().toISOString(),
            timestamp: Date.now()
          }));
        });
        if (nextStepIndex === currentScenario.steps.length - 1) {
          setCompletedScenarios(function (prev) {
            return Object.assign({}, prev, (0, _defineProperty2.default)({}, currentScenarioIndex, {
              completedAt: new Date().toISOString(),
              timestamp: Date.now(),
              messageCount: conversationWithBot.length
            }));
          });
        }
      }
      setIsTyping(false);
    }, 1000);
  }, [message, currentScenario, currentStep, conversation, currentScenarioIndex]);
  var changeScenario = (0, _react.useCallback)(function (newIndex) {
    if (newIndex !== currentScenarioIndex && newIndex >= 0 && newIndex < scenarios.length) {
      setCurrentScenarioIndex(newIndex);
      setConversation([]);
      setCurrentStep(0);
      setSuggestions([]);
      setMessage("");
      setShowHelp(false);
      conversationChanged.current = false;
    }
  }, [currentScenarioIndex, scenarios.length]);
  var handleSuggestion = (0, _react.useCallback)(function (suggestion) {
    setMessage(suggestion);
  }, []);
  var toggleHelp = (0, _react.useCallback)(function () {
    setShowHelp(function (prev) {
      return !prev;
    });
  }, []);
  var toggleDetailedProgress = (0, _react.useCallback)(function () {
    setShowDetailedProgress(function (prev) {
      return !prev;
    });
  }, []);
  var getStats = (0, _react.useCallback)(function () {
    var completedScenariosCount = Object.values(completedScenarios).filter(Boolean).length;
    var totalProgress = totalScenarios > 0 ? Math.round(completedScenariosCount / totalScenarios * 100) : 0;
    var completionProgress = totalSteps > 0 ? (currentStep + 1) / totalSteps * 100 : 0;
    return {
      totalScenarios: totalScenarios,
      completedScenariosCount: completedScenariosCount,
      totalProgress: totalProgress,
      completionProgress: completionProgress,
      currentStep: currentStep + 1,
      totalSteps: totalSteps
    };
  }, [completedScenarios, totalScenarios, totalSteps, currentStep]);
  var getDisplayData = (0, _react.useCallback)(function () {
    var _currentScenario$step3;
    var scenarioCounter = `${currentScenarioIndex + 1} / ${totalScenarios}`;
    var stepCounter = `${currentStep + 1} / ${totalSteps}`;
    var scenarioTitles = scenarios.map(function (scenario) {
      return scenario.title || "Scenario";
    });
    return {
      scenarioCounter: scenarioCounter,
      stepCounter: stepCounter,
      scenarios: scenarioTitles,
      currentScenario: currentScenario,
      currentHelp: ((_currentScenario$step3 = currentScenario.steps) == null || (_currentScenario$step3 = _currentScenario$step3[currentStep]) == null ? void 0 : _currentScenario$step3.help) || ""
    };
  }, [currentScenarioIndex, totalScenarios, currentStep, totalSteps, scenarios, currentScenario]);
  var hasValidData = (conversationData == null ? void 0 : conversationData.exercises) && Array.isArray(conversationData.exercises) && conversationData.exercises.length > 0;
  var isLastStep = currentStep === totalSteps - 1;
  var isConversationStarted = conversation.length > 0;
  return {
    currentScenarioIndex: currentScenarioIndex,
    conversation: conversation,
    currentStep: currentStep,
    message: message,
    setMessage: setMessage,
    isTyping: isTyping,
    suggestions: suggestions,
    showHelp: showHelp,
    completedScenarios: completedScenarios,
    conversationHistory: conversationHistory,
    loaded: loaded,
    showDetailedProgress: showDetailedProgress,
    currentScenario: currentScenario,
    totalScenarios: totalScenarios,
    totalSteps: totalSteps,
    hasValidData: hasValidData,
    changeScenario: changeScenario,
    sendMessage: sendMessage,
    handleSuggestion: handleSuggestion,
    toggleHelp: toggleHelp,
    toggleDetailedProgress: toggleDetailedProgress,
    startConversation: startConversation,
    isLastStep: isLastStep,
    isConversationStarted: isConversationStarted,
    stats: getStats(),
    display: getDisplayData()
  };
};
var _default = exports.default = useConversation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,