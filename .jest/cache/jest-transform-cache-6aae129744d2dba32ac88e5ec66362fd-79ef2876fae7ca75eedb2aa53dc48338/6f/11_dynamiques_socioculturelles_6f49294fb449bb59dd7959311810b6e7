7f9aba18bf7797448156390d73cc33cc
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vocab = void 0;
function cov_1q3re2q4n() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\data\\vocabulary\\5\\categories\\11_dynamiques_socioculturelles.js";
  var hash = "dbcfc33367fea797bd93c8f4b3bd70335b9887a8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\data\\vocabulary\\5\\categories\\11_dynamiques_socioculturelles.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 21
        },
        end: {
          line: 940,
          column: 1
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "dbcfc33367fea797bd93c8f4b3bd70335b9887a8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_1q3re2q4n = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1q3re2q4n();
var vocab = exports.vocab = (cov_1q3re2q4n().s[0]++, {
  title: "Dynamiques Socioculturelles",
  words: [{
    word: "cultural diffusion",
    translation: "diffusion culturelle",
    example: "Global travel and communication have accelerated cultural diffusion worldwide."
  }, {
    word: "cultural syncretism",
    translation: "syncrétisme culturel",
    example: "Caribbean music demonstrates cultural syncretism blending African, European and indigenous influences."
  }, {
    word: "acculturation",
    translation: "acculturation",
    example: "Immigrants often experience acculturation as they adapt to their new country's norms."
  }, {
    word: "cultural assimilation",
    translation: "assimilation culturelle",
    example: "Many educational systems historically promoted cultural assimilation rather than diversity."
  }, {
    word: "cultural hybridization",
    translation: "hybridation culturelle",
    example: "Fusion cuisine represents cultural hybridization combining culinary traditions from different regions."
  }, {
    word: "cultural resilience",
    translation: "résilience culturelle",
    example: "Indigenous communities demonstrate cultural resilience by preserving traditions despite external pressures."
  }, {
    word: "cultural transmission",
    translation: "transmission culturelle",
    example: "Schools play a critical role in cultural transmission between generations."
  }, {
    word: "cultural zeitgeist",
    translation: "esprit culturel du temps",
    example: "The television series perfectly captured the cultural zeitgeist of post-war America."
  }, {
    word: "cultural renaissance",
    translation: "renaissance culturelle",
    example: "The neighborhood experienced a cultural renaissance as artists moved into the area."
  }, {
    word: "cultural trajectory",
    translation: "trajectoire culturelle",
    example: "Demographic changes are altering the cultural trajectory of urban centers."
  }, {
    word: "cultural transition",
    translation: "transition culturelle",
    example: "The society is undergoing a cultural transition toward greater environmental awareness."
  }, {
    word: "cultural revitalization",
    translation: "revitalisation culturelle",
    example: "Language immersion programs contribute to cultural revitalization in indigenous communities."
  }, {
    word: "cultural transformation",
    translation: "transformation culturelle",
    example: "Digital technology has driven cultural transformation in media consumption patterns."
  }, {
    word: "cultural reclamation",
    translation: "récupération culturelle",
    example: "The museum collaborated with tribal representatives on cultural reclamation initiatives."
  }, {
    word: "cultural paradigm",
    translation: "paradigme culturel",
    example: "The scientific revolution introduced a new cultural paradigm based on empirical investigation."
  }, {
    word: "cultural friction",
    translation: "friction culturelle",
    example: "Corporate mergers often create cultural friction between organizations with different values."
  }, {
    word: "cultural fluidity",
    translation: "fluidité culturelle",
    example: "Modern identities exhibit greater cultural fluidity than in previous generations."
  }, {
    word: "cultural orthodoxy",
    translation: "orthodoxie culturelle",
    example: "The artist's work challenged cultural orthodoxy regarding gender representation."
  }, {
    word: "cultural displacement",
    translation: "déplacement culturel",
    example: "Rapid urbanization has led to cultural displacement in traditional communities."
  }, {
    word: "cultural disruption",
    translation: "perturbation culturelle",
    example: "The pandemic caused cultural disruption in social interaction patterns."
  }, {
    word: "cultural backlash",
    translation: "contrecoup culturel",
    example: "Progressive social changes sometimes trigger cultural backlash from traditional segments of society."
  }, {
    word: "cultural divergence",
    translation: "divergence culturelle",
    example: "Despite increased connectivity, research shows cultural divergence persisting in many values and practices."
  }, {
    word: "upward mobility",
    translation: "mobilité ascendante",
    example: "The scholarship program aims to enhance opportunities for upward mobility among disadvantaged students."
  }, {
    word: "downward mobility",
    translation: "mobilité descendante",
    example: "Economic restructuring led to downward mobility for many manufacturing workers."
  }, {
    word: "class barrier",
    translation: "barrière de classe",
    example: "Elite universities have implemented programs designed to overcome class barriers to enrollment."
  }, {
    word: "status attainment",
    translation: "acquisition de statut",
    example: "The sociological model examines factors influencing status attainment in different societies."
  }, {
    word: "occupational mobility",
    translation: "mobilité professionnelle",
    example: "Digital skills training promotes occupational mobility in changing job markets."
  }, {
    word: "social advancement",
    translation: "avancement social",
    example: "The memoir describes her journey of social advancement from poverty to professional success."
  }, {
    word: "achievement gap",
    translation: "écart de réussite",
    example: "Policy interventions aim to address the persistent achievement gap between demographic groups."
  }, {
    word: "status inconsistency",
    translation: "incohérence de statut",
    example: "Status inconsistency occurs when individuals rank differently across various socioeconomic dimensions."
  }, {
    word: "mobility pathway",
    translation: "voie de mobilité",
    example: "Community colleges provide an important mobility pathway for non-traditional students."
  }, {
    word: "social elevator",
    translation: "ascenseur social",
    example: "Higher education historically functioned as a social elevator for working-class students."
  }, {
    word: "mobility barrier",
    translation: "barrière à la mobilité",
    example: "Discriminatory hiring practices create mobility barriers for minority professionals."
  }, {
    word: "status hierarchy",
    translation: "hiérarchie de statut",
    example: "The organization's status hierarchy became visible during resource allocation discussions."
  }, {
    word: "meritocratic system",
    translation: "système méritocratique",
    example: "Critics question whether the current economic structure truly represents a meritocratic system."
  }, {
    word: "social fluidity",
    translation: "fluidité sociale",
    example: "Nordic countries demonstrate greater social fluidity than many other developed economies."
  }, {
    word: "positional competition",
    translation: "compétition positionnelle",
    example: "College admissions represent intense positional competition for limited opportunities."
  }, {
    word: "credential inflation",
    translation: "inflation des diplômes",
    example: "Credential inflation has made master's degrees necessary for jobs that once required only bachelor's."
  }, {
    word: "inherited advantage",
    translation: "avantage hérité",
    example: "Wealth transfers create inherited advantage that persists across generations."
  }, {
    word: "socioeconomic integration",
    translation: "intégration socioéconomique",
    example: "The housing development was designed to promote socioeconomic integration in the neighborhood."
  }, {
    word: "economic opportunity",
    translation: "opportunité économique",
    example: "Urban renewal projects should increase economic opportunity for existing residents."
  }, {
    word: "status maintenance",
    translation: "maintien du statut",
    example: "Middle-class families employ various strategies for status maintenance in uncertain economies."
  }, {
    word: "structural mobility",
    translation: "mobilité structurelle",
    example: "Technological change drives structural mobility as it transforms labor markets."
  }, {
    word: "class consciousness",
    translation: "conscience de classe",
    example: "The labor movement sought to develop class consciousness among industrial workers."
  }, {
    word: "identity construction",
    translation: "construction identitaire",
    example: "Social media platforms influence identity construction among young users."
  }, {
    word: "social identity",
    translation: "identité sociale",
    example: "Professional affiliations often become a central component of social identity."
  }, {
    word: "identity work",
    translation: "travail identitaire",
    example: "Career transitions necessitate significant identity work as individuals reimagine themselves."
  }, {
    word: "situational identity",
    translation: "identité situationnelle",
    example: "Certain aspects of identity become more prominent in specific situational contexts."
  }, {
    word: "hybridized identity",
    translation: "identité hybride",
    example: "Transnational communities often develop hybridized identities incorporating multiple cultural elements."
  }, {
    word: "identity cohesion",
    translation: "cohésion identitaire",
    example: "Traumatic experiences can disrupt identity cohesion and self-narrative continuity."
  }, {
    word: "identity exploration",
    translation: "exploration identitaire",
    example: "College provides a context for identity exploration through exposure to diverse perspectives."
  }, {
    word: "imposed identity",
    translation: "identité imposée",
    example: "Marginalized groups often struggle against stereotypes and imposed identity assumptions."
  }, {
    word: "identity narrative",
    translation: "récit identitaire",
    example: "Personal identity narratives help individuals make meaning of their life experiences."
  }, {
    word: "identity disruption",
    translation: "perturbation identitaire",
    example: "Serious illness can cause identity disruption as patients redefine themselves."
  }, {
    word: "identity resilience",
    translation: "résilience identitaire",
    example: "Identity resilience allows adaptation to changing circumstances while maintaining core self-concepts."
  }, {
    word: "identity commitment",
    translation: "engagement identitaire",
    example: "Identity commitment develops as individuals solidify their values and life direction."
  }, {
    word: "ascribed identity",
    translation: "identité attribuée",
    example: "Ascribed identity characteristics include attributes assigned at birth like ethnicity or gender."
  }, {
    word: "neoliberalism",
    translation: "néolibéralisme",
    example: "Neoliberalism emphasizes free markets and minimal government intervention in the economy."
  }, {
    word: "progressivism",
    translation: "progressisme",
    example: "Progressivism advocates social reform and addressing structural inequality."
  }, {
    word: "libertarianism",
    translation: "libertarianisme",
    example: "Libertarianism prioritizes individual liberty and limited government authority."
  }, {
    word: "social democracy",
    translation: "social-démocratie",
    example: "Social democracy seeks to combine market economies with robust social welfare systems."
  }, {
    word: "democratic socialism",
    translation: "socialisme démocratique",
    example: "Democratic socialism advocates democratic control of economic institutions."
  }, {
    word: "post-colonialism",
    translation: "post-colonialisme",
    example: "Post-colonialism examines cultural and political legacies of colonialism and imperialism."
  }, {
    word: "secular humanism",
    translation: "humanisme séculier",
    example: "Secular humanism emphasizes human agency and rationality over religious authority."
  }, {
    word: "religious fundamentalism",
    translation: "fondamentalisme religieux",
    example: "Religious fundamentalism advocates strict adherence to doctrinal orthodoxy."
  }, {
    word: "techno-utopianism",
    translation: "techno-utopisme",
    example: "Techno-utopianism envisions technological progress solving humanity's greatest challenges."
  }, {
    word: "anti-globalism",
    translation: "anti-mondialisme",
    example: "Anti-globalism opposes international economic integration and supranational governance."
  }, {
    word: "communitarianism",
    translation: "communautarisme",
    example: "Communitarianism emphasizes the importance of community bonds and shared values."
  }, {
    word: "nativism",
    translation: "nativisme",
    example: "Nativism favors the interests of native-born citizens over immigrants."
  }, {
    word: "identitarianism",
    translation: "identitarisme",
    example: "Identitarianism emphasizes collective identity based on ethnic or cultural heritage."
  }, {
    word: "accelerationism",
    translation: "accélérationnisme",
    example: "Accelerationism proposes intensifying capitalism's contradictions to hasten systemic change."
  }, {
    word: "technocracy",
    translation: "technocratie",
    example: "Technocracy advocates governance by technical experts rather than elected representatives."
  }, {
    word: "overlapping oppression",
    translation: "oppression superposée",
    example: "The study documented overlapping oppression affecting women of color in professional settings."
  }, {
    word: "identity intersection",
    translation: "intersection identitaire",
    example: "Policy effectiveness depends on recognizing identity intersections among target populations."
  }, {
    word: "interlocking systems",
    translation: "systèmes imbriqués",
    example: "Feminist theory examines interlocking systems of oppression including sexism and racism."
  }, {
    word: "compound disadvantage",
    translation: "désavantage composé",
    example: "Rural minority communities often experience compound disadvantage in accessing services."
  }, {
    word: "matrix of domination",
    translation: "matrice de domination",
    example: "Collins described a matrix of domination affecting individuals differently based on social location."
  }, {
    word: "multiple marginalization",
    translation: "marginalisation multiple",
    example: "The research documented multiple marginalization experienced by LGBTQ+ people with disabilities."
  }, {
    word: "intersectional analysis",
    translation: "analyse intersectionnelle",
    example: "Intersectional analysis reveals how policy outcomes vary across demographic groups."
  }, {
    word: "layered identity",
    translation: "identité stratifiée",
    example: "Autobiography allows exploration of layered identity influenced by race, class, and nationality."
  }, {
    word: "intersectional feminism",
    translation: "féminisme intersectionnel",
    example: "Intersectional feminism addresses diverse women's experiences across cultural contexts."
  }, {
    word: "social location",
    translation: "position sociale",
    example: "Social location influences individual perspectives and access to resources."
  }, {
    word: "cumulative disadvantage",
    translation: "désavantage cumulatif",
    example: "Longitudinal studies reveal cumulative disadvantage affecting career trajectories."
  }, {
    word: "privilege intersection",
    translation: "intersection de privilèges",
    example: "Privilege intersection creates unearned advantages for certain demographic combinations."
  }, {
    word: "multidimensional inequality",
    translation: "inégalité multidimensionnelle",
    example: "Effective policy must address multidimensional inequality beyond single-factor approaches."
  }, {
    word: "complex marginality",
    translation: "marginalité complexe",
    example: "Research on complex marginality examines how multiple factors limit social participation."
  }, {
    word: "contextual analysis",
    translation: "analyse contextuelle",
    example: "Contextual analysis explores how systemic factors shape individual experiences."
  }, {
    word: "identity-based discrimination",
    translation: "discrimination fondée sur l'identité",
    example: "Corporate training addresses identity-based discrimination in hiring and promotion."
  }, {
    word: "integrated approach",
    translation: "approche intégrée",
    example: "The organization adopted an integrated approach to diversity that considered multiple dimensions."
  }, {
    word: "standpoint epistemology",
    translation: "épistémologie du positionnement",
    example: "Standpoint epistemology recognizes how social position influences knowledge production."
  }, {
    word: "intersectional lens",
    translation: "perspective intersectionnelle",
    example: "Applying an intersectional lens reveals different experiences of apparently neutral policies."
  }, {
    word: "overlapping identity",
    translation: "identité superposée",
    example: "Overlapping identity characteristics create distinct experiences of social institutions."
  }, {
    word: "interconnected oppression",
    translation: "oppression interconnectée",
    example: "The framework analyzes interconnected oppression across economic and social domains."
  }, {
    word: "intersectional invisibility",
    translation: "invisibilité intersectionnelle",
    example: "Research documents intersectional invisibility of women of color in historical narratives."
  }, {
    word: "multiplicative effect",
    translation: "effet multiplicateur",
    example: "Discrimination often exhibits a multiplicative effect rather than simply additive impact."
  }, {
    word: "intersectional methodology",
    translation: "méthodologie intersectionnelle",
    example: "Researchers developed intersectional methodology to capture complex demographic interactions."
  }, {
    word: "identity confluence",
    translation: "confluence identitaire",
    example: "Identity confluence creates unique experiences not reducible to individual categories."
  }, {
    word: "differential vulnerability",
    translation: "vulnérabilité différentielle",
    example: "Climate change creates differential vulnerability based on geographic and socioeconomic factors."
  }, {
    word: "intersectional intervention",
    translation: "intervention intersectionnelle",
    example: "Effective programs develop intersectional intervention strategies rather than universal approaches."
  }, {
    word: "intersectional justice",
    translation: "justice intersectionnelle",
    example: "Advocates promote intersectional justice addressing multiple dimensions of inequality simultaneously."
  }, {
    word: "gender studies",
    translation: "études de genre",
    example: "Gender studies programs examine how gender shapes social and cultural experiences."
  }, {
    word: "gender socialization",
    translation: "socialisation de genre",
    example: "Gender socialization begins in early childhood through family interactions and media exposure."
  }, {
    word: "gender norm",
    translation: "norme de genre",
    example: "Gender norms vary significantly across cultural and historical contexts."
  }, {
    word: "gender expression",
    translation: "expression de genre",
    example: "Gender expression involves how individuals communicate their gender through appearance and behavior."
  }, {
    word: "gender binary",
    translation: "binarité de genre",
    example: "Many societies traditionally enforce a gender binary categorizing people as exclusively male or female."
  }, {
    word: "gender fluidity",
    translation: "fluidité de genre",
    example: "Gender fluidity describes gender identity that varies over time or context."
  }, {
    word: "gender variance",
    translation: "variance de genre",
    example: "Gender variance has been documented across many cultural traditions throughout history."
  }, {
    word: "gender conformity",
    translation: "conformité de genre",
    example: "Social pressure often encourages gender conformity beginning in early childhood."
  }, {
    word: "gender role",
    translation: "rôle de genre",
    example: "Traditional gender roles assign different responsibilities based on gender identity."
  }, {
    word: "gender stereotype",
    translation: "stéréotype de genre",
    example: "Gender stereotypes can limit individual opportunity and expression."
  }, {
    word: "gender bias",
    translation: "biais de genre",
    example: "Research has documented gender bias in hiring practices across multiple industries."
  }, {
    word: "gender gap",
    translation: "écart entre les genres",
    example: "The gender gap in STEM fields remains significant despite equity initiatives."
  }, {
    word: "gender mainstreaming",
    translation: "intégration de la dimension de genre",
    example: "The organization implemented gender mainstreaming in all policy development."
  }, {
    word: "gender equity",
    translation: "équité entre les genres",
    example: "Gender equity focuses on fairness in outcomes rather than identical treatment."
  }, {
    word: "gender discrimination",
    translation: "discrimination de genre",
    example: "Legislation prohibits gender discrimination in employment and education."
  }, {
    word: "gender-based violence",
    translation: "violence basée sur le genre",
    example: "Organizations work to address gender-based violence in conflict regions."
  }, {
    word: "gender analysis",
    translation: "analyse de genre",
    example: "Gender analysis examines how policies affect people differently based on gender."
  }, {
    word: "patriarchal system",
    translation: "système patriarcal",
    example: "Feminist theory critiques patriarchal systems that privilege male authority."
  }, {
    word: "feminist theory",
    translation: "théorie féministe",
    example: "Feminist theory encompasses diverse perspectives on gender inequity and empowerment."
  }, {
    word: "gender performativity",
    translation: "performativité de genre",
    example: "Butler's concept of gender performativity suggests gender is continually created through repeated acts."
  }, {
    word: "gender schema",
    translation: "schéma de genre",
    example: "Children develop gender schemas that influence information processing and behavior."
  }, {
    word: "gender politics",
    translation: "politique de genre",
    example: "Gender politics addresses power dynamics between genders in social institutions."
  }, {
    word: "genderqueer",
    translation: "genderqueer",
    example: "Some individuals identify as genderqueer, rejecting binary gender categorization."
  }, {
    word: "cisgender",
    translation: "cisgenre",
    example: "Cisgender individuals identify with the gender assigned to them at birth."
  }, {
    word: "transgender",
    translation: "transgenre",
    example: "Transgender individuals identify with a gender different from that assigned at birth."
  }, {
    word: "hegemonic masculinity",
    translation: "masculinité hégémonique",
    example: "Connell's concept of hegemonic masculinity examines dominant male ideals in society."
  }, {
    word: "gender nonconforming",
    translation: "non-conforme au genre",
    example: "Gender nonconforming individuals express gender in ways that don't follow conventional expectations."
  }, {
    word: "gender stratification",
    translation: "stratification de genre",
    example: "Gender stratification creates systematic inequalities based on gender identity."
  }, {
    word: "cultural phenomenon",
    translation: "phénomène culturel",
    example: "Social media has emerged as a cultural phenomenon reshaping communication patterns."
  }, {
    word: "cultural trend",
    translation: "tendance culturelle",
    example: "Minimalism represents a cultural trend responding to consumer excess and environmental concerns."
  }, {
    word: "moral panic",
    translation: "panique morale",
    example: "Media coverage sometimes generates moral panic about youth behaviors and technology use."
  }, {
    word: "counterculture",
    translation: "contre-culture",
    example: "The 1960s counterculture challenged dominant social norms and political institutions."
  }, {
    word: "subculture",
    translation: "sous-culture",
    example: "Urban skateboarding represents a subculture with distinct practices and aesthetic values."
  }, {
    word: "cultural polarization",
    translation: "polarisation culturelle",
    example: "Political discourse increasingly reflects cultural polarization on social issues."
  }, {
    word: "culture war",
    translation: "guerre culturelle",
    example: "Education policies often become battlegrounds in ongoing culture wars."
  }, {
    word: "sociocultural evolution",
    translation: "évolution socioculturelle",
    example: "Digital communication has accelerated sociocultural evolution in recent decades."
  }, {
    word: "lifestyle movement",
    translation: "mouvement de style de vie",
    example: "Veganism represents a lifestyle movement connecting personal choices with ethical positions."
  }, {
    word: "cultural revival",
    translation: "renouveau culturel",
    example: "Indigenous language programs contribute to cultural revival in many communities."
  }, {
    word: "symbolic interaction",
    translation: "interaction symbolique",
    example: "Fashion choices represent symbolic interaction communicating identity and affiliation."
  }, {
    word: "urban tribe",
    translation: "tribu urbaine",
    example: "Coworking spaces have created urban tribes based on shared work patterns and values."
  }, {
    word: "networked individualism",
    translation: "individualisme en réseau",
    example: "Digital connectivity supports networked individualism rather than traditional community structures."
  }, {
    word: "cultural lag",
    translation: "décalage culturel",
    example: "Ethics frameworks often experience cultural lag behind rapid technological development."
  }, {
    word: "mass hysteria",
    translation: "hystérie collective",
    example: "The incident was later attributed to mass hysteria rather than environmental toxins."
  }, {
    word: "cultural trauma",
    translation: "traumatisme culturel",
    example: "The genocide created cultural trauma affecting multiple generations."
  }, {
    word: "cultural conflict",
    translation: "conflit culturel",
    example: "Immigration policies often generate cultural conflict between different value systems."
  }, {
    word: "social ritual",
    translation: "rituel social",
    example: "Graduation ceremonies function as social rituals marking life transitions."
  }, {
    word: "cultural resistance",
    translation: "résistance culturelle",
    example: "Music often serves as cultural resistance for marginalized communities."
  }, {
    word: "consumer culture",
    translation: "culture de consommation",
    example: "Advertising promotes consumer culture by associating products with identity and status."
  }]
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,