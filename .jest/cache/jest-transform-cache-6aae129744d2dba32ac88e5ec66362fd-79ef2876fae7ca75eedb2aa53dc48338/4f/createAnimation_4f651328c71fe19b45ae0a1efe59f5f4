47d409f8bf9554ef7a207cee6ba50be3
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TransitionGenerator = TransitionGenerator;
exports.createAnimationWithInitialValues = createAnimationWithInitialValues;
exports.createCustomKeyFrameAnimation = createCustomKeyFrameAnimation;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _config = require("./config.js");
var _animationParser = require("./animationParser.js");
var _LinearWeb = require("./transition/Linear.web.js");
var _SequencedWeb = require("./transition/Sequenced.web.js");
var _FadingWeb = require("./transition/Fading.web.js");
var _JumpingWeb = require("./transition/Jumping.web.js");
var _domUtils = require("./domUtils.js");
var _CurvedWeb = require("./transition/Curved.web.js");
var _EntryExitWeb = require("./transition/EntryExit.web.js");
var _excluded = ["transform"];
function addPxToTransform(transform) {
  var newTransform = transform.map(function (transformProp) {
    var newTransformProp = {};
    for (var _ref of Object.entries(transformProp)) {
      var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
      var key = _ref2[0];
      var value = _ref2[1];
      if ((key.includes('translate') || key.includes('perspective')) && typeof value === 'number') {
        newTransformProp[key] = `${value}px`;
      } else {
        newTransformProp[key] = value;
      }
    }
    return newTransformProp;
  });
  return newTransform;
}
function createCustomKeyFrameAnimation(keyframeDefinitions) {
  for (var value of Object.values(keyframeDefinitions)) {
    if (value.transform) {
      value.transform = addPxToTransform(value.transform);
    }
  }
  var animationData = {
    name: '',
    style: keyframeDefinitions,
    duration: -1
  };
  animationData.name = generateNextCustomKeyframeName();
  var parsedKeyframe = (0, _animationParser.convertAnimationObjectToKeyframes)(animationData);
  (0, _domUtils.insertWebAnimation)(animationData.name, parsedKeyframe);
  return animationData.name;
}
function createAnimationWithInitialValues(animationName, initialValues) {
  var animationStyle = structuredClone(_config.AnimationsData[animationName].style);
  var firstAnimationStep = animationStyle['0'];
  var transform = initialValues.transform,
    rest = (0, _objectWithoutProperties2.default)(initialValues, _excluded);
  var transformWithPx = addPxToTransform(transform);
  if (transform) {
    if (!firstAnimationStep.transform) {
      firstAnimationStep.transform = transformWithPx;
    } else {
      var transformStyle = new Map();
      for (var rule of firstAnimationStep.transform) {
        for (var _ref3 of Object.entries(rule)) {
          var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);
          var property = _ref4[0];
          var value = _ref4[1];
          transformStyle.set(property, value);
        }
      }
      for (var _rule of transformWithPx) {
        for (var _ref5 of Object.entries(_rule)) {
          var _ref6 = (0, _slicedToArray2.default)(_ref5, 2);
          var _property = _ref6[0];
          var _value = _ref6[1];
          transformStyle.set(_property, _value);
        }
      }
      firstAnimationStep.transform = Array.from(transformStyle, function (_ref7) {
        var _ref8 = (0, _slicedToArray2.default)(_ref7, 2),
          property = _ref8[0],
          value = _ref8[1];
        return (0, _defineProperty2.default)({}, property, value);
      });
    }
  }
  animationStyle['0'] = Object.assign({}, animationStyle['0'], rest);
  var keyframeName = generateNextCustomKeyframeName();
  var animationObject = {
    name: keyframeName,
    style: animationStyle,
    duration: _config.AnimationsData[animationName].duration
  };
  var keyframe = (0, _animationParser.convertAnimationObjectToKeyframes)(animationObject);
  (0, _domUtils.insertWebAnimation)(keyframeName, keyframe);
  return keyframeName;
}
var customKeyframeCounter = 0;
function generateNextCustomKeyframeName() {
  return `REA${customKeyframeCounter++}`;
}
function TransitionGenerator(transitionType, transitionData) {
  var transitionKeyframeName = generateNextCustomKeyframeName();
  var dummyTransitionKeyframeName;
  var transitionObject;
  switch (transitionType) {
    case _config.TransitionType.LINEAR:
      transitionObject = (0, _LinearWeb.LinearTransition)(transitionKeyframeName, transitionData);
      break;
    case _config.TransitionType.SEQUENCED:
      transitionObject = (0, _SequencedWeb.SequencedTransition)(transitionKeyframeName, transitionData);
      break;
    case _config.TransitionType.FADING:
      transitionObject = (0, _FadingWeb.FadingTransition)(transitionKeyframeName, transitionData);
      break;
    case _config.TransitionType.JUMPING:
      transitionObject = (0, _JumpingWeb.JumpingTransition)(transitionKeyframeName, transitionData);
      break;
    case _config.TransitionType.CURVED:
      {
        dummyTransitionKeyframeName = generateNextCustomKeyframeName();
        var _CurvedTransition = (0, _CurvedWeb.CurvedTransition)(transitionKeyframeName, dummyTransitionKeyframeName, transitionData),
          firstKeyframeObj = _CurvedTransition.firstKeyframeObj,
          secondKeyframeObj = _CurvedTransition.secondKeyframeObj;
        transitionObject = firstKeyframeObj;
        var dummyKeyframe = (0, _animationParser.convertAnimationObjectToKeyframes)(secondKeyframeObj);
        (0, _domUtils.insertWebAnimation)(dummyTransitionKeyframeName, dummyKeyframe);
        break;
      }
    case _config.TransitionType.ENTRY_EXIT:
      transitionObject = (0, _EntryExitWeb.EntryExitTransition)(transitionKeyframeName, transitionData);
      break;
  }
  var transitionKeyframe = (0, _animationParser.convertAnimationObjectToKeyframes)(transitionObject);
  (0, _domUtils.insertWebAnimation)(transitionKeyframeName, transitionKeyframe);
  return {
    transitionKeyframeName: transitionKeyframeName,
    dummyTransitionKeyframeName: dummyTransitionKeyframeName
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,