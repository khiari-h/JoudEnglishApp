dd7394326d6c4aa849e07aa48a2e9c55
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LinearGradient = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _react = require("react");
var _reactNative = require("react-native");
var _NativeLinearGradient = _interopRequireDefault(require("./NativeLinearGradient"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["colors", "locations", "start", "end", "dither"];
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var LinearGradient = exports.LinearGradient = function (_Component) {
  function LinearGradient() {
    (0, _classCallCheck2.default)(this, LinearGradient);
    return _callSuper(this, LinearGradient, arguments);
  }
  (0, _inherits2.default)(LinearGradient, _Component);
  return (0, _createClass2.default)(LinearGradient, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        colors = _this$props.colors,
        locations = _this$props.locations,
        start = _this$props.start,
        end = _this$props.end,
        dither = _this$props.dither,
        props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
      var resolvedLocations = locations;
      if (locations && colors.length !== locations.length) {
        console.warn('LinearGradient colors and locations props should be arrays of the same length');
        resolvedLocations = locations.slice(0, colors.length);
      }
      return (0, _jsxRuntime.jsx)(_NativeLinearGradient.default, Object.assign({}, props, {
        colors: _reactNative.Platform.select({
          web: colors,
          default: colors.map(_reactNative.processColor)
        }),
        dither: _reactNative.Platform.select({
          android: dither
        }),
        locations: resolvedLocations,
        startPoint: _normalizePoint(start),
        endPoint: _normalizePoint(end)
      }));
    }
  }]);
}(_react.Component);
function _normalizePoint(point) {
  if (!point) {
    return undefined;
  }
  if (Array.isArray(point) && point.length !== 2) {
    console.warn('start and end props for LinearGradient must be of the format [x,y] or {x, y}');
    return undefined;
  }
  return Array.isArray(point) ? point : [point.x, point.y];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,