{"version":3,"names":["_react","require","_asyncStorage","_interopRequireDefault","_vocabularyDataHelper","useRealTimeProgress","_useState","useState","_useState2","_slicedToArray2","default","levelProgress","setLevelProgress","_useState3","_useState4","exerciseProgress","setExerciseProgress","_useState5","_useState6","isLoading","setIsLoading","calculateVocabularyProgress","_ref","_asyncToGenerator2","level","storageKey","savedData","AsyncStorage","getItem","data","JSON","parse","completedWords","vocabularyData","getVocabularyData","exercises","totalWords","reduce","sum","cat","_cat$words","words","length","completedCount","Object","values","forEach","categoryWords","Array","isArray","percentage","Math","min","round","error","_x","apply","arguments","calculateVocabularyFastProgress","_ref2","_cat$words2","_x2","calculateGrammarProgress","_ref3","completedExercises","exerciseIndices","EXERCISES_PER_LEVEL","_x3","calculateReadingProgress","_ref4","completedQuestions","questionIndices","QUESTIONS_PER_LEVEL","_x4","calculateSpellingProgress","_ref5","_x5","calculatePhrasesProgress","_ref6","completedPhrases","phraseIndices","PHRASES_PER_LEVEL","_x6","calculateConversationsProgress","_ref7","completedScenarios","filter","scenario","completed","completedAt","CONVERSATIONS_PER_LEVEL","_x7","calculateErrorCorrectionProgress","_ref8","_x8","calculateWordGamesProgress","_ref9","game","GAMES_PER_LEVEL","_x9","calculateAssessmentProgress","_ref0","_x0","calculateProgress","useCallback","newLevelProgress","newExerciseProgress","levels","exerciseCalculators","vocabulary","vocabulary_fast","grammar","reading","spelling","phrases","conversations","errorCorrection","wordGames","assessment","Promise","all","map","_ref10","availableExercises","keys","results","_ref11","exerciseType","calculator","value","e","console","warn","_x10","levelTotal","levelCompleted","_ref12","_x1","getLevelProgress","getExerciseProgress","_exerciseProgress$exe","hasProgress","hasVocabularyStarted","hasVocabularyFastStarted","useEffect","refresh","_default","exports"],"sources":["useRealTimeProgress.js"],"sourcesContent":["// src/hooks/useRealTimeProgress.js - CORRIGÉ - Juste les vraies données\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { getVocabularyData } from '../utils/vocabulary/vocabularyDataHelper';\r\n\r\nconst useRealTimeProgress = () => {\r\n  const [levelProgress, setLevelProgress] = useState({});\r\n  const [exerciseProgress, setExerciseProgress] = useState({});\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // =================== VOCABULAIRE - CORRECTION PRINCIPALE ===================\r\n  \r\n  const calculateVocabularyProgress = async (level) => {\r\n    try {\r\n      const storageKey = `vocabulary_${level}_classic`;\r\n      const savedData = await AsyncStorage.getItem(storageKey);\r\n      \r\n      if (!savedData) return 0;\r\n      \r\n      const data = JSON.parse(savedData);\r\n      const completedWords = data.completedWords || {};\r\n      \r\n      // ✅ FIX : Récupérer les VRAIES données comme useVocabulary.js\r\n      const vocabularyData = getVocabularyData(level, 'classic');\r\n      if (!vocabularyData?.exercises) return 0;\r\n      \r\n      // ✅ FIX : Calcul réel du total comme ligne 168 de useVocabulary.js\r\n      const totalWords = vocabularyData.exercises.reduce((sum, cat) => \r\n        sum + (cat.words?.length || 0), 0\r\n      );\r\n      \r\n      // Compter mots complétés\r\n      let completedCount = 0;\r\n      Object.values(completedWords).forEach(categoryWords => {\r\n        if (Array.isArray(categoryWords)) {\r\n          completedCount += categoryWords.length;\r\n        }\r\n      });\r\n      \r\n      // ✅ FIX : Calcul correct au lieu de constante bidon\r\n      const percentage = totalWords > 0 ? (completedCount / totalWords) * 100 : 0;\r\n      return Math.min(Math.round(percentage), 100);\r\n      \r\n    } catch (error) {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  // VOCABULARY FAST\r\n  const calculateVocabularyFastProgress = async (level) => {\r\n    try {\r\n      const storageKey = `vocabulary_${level}_fast`;\r\n      const savedData = await AsyncStorage.getItem(storageKey);\r\n      \r\n      if (!savedData) return 0;\r\n      \r\n      const data = JSON.parse(savedData);\r\n      const completedWords = data.completedWords || {};\r\n      \r\n      // ✅ Même fix pour fast\r\n      const vocabularyData = getVocabularyData(level, 'fast');\r\n      if (!vocabularyData?.exercises) return 0;\r\n      \r\n      const totalWords = vocabularyData.exercises.reduce((sum, cat) => \r\n        sum + (cat.words?.length || 0), 0\r\n      );\r\n      \r\n      let completedCount = 0;\r\n      Object.values(completedWords).forEach(categoryWords => {\r\n        if (Array.isArray(categoryWords)) {\r\n          completedCount += categoryWords.length;\r\n        }\r\n      });\r\n      \r\n      const percentage = totalWords > 0 ? (completedCount / totalWords) * 100 : 0;\r\n      return Math.min(Math.round(percentage), 100);\r\n      \r\n    } catch (error) {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  // GRAMMAR\r\n  const calculateGrammarProgress = async (level) => {\r\n    try {\r\n      const storageKey = `grammar_${level}`;\r\n      const savedData = await AsyncStorage.getItem(storageKey);\r\n      \r\n      if (!savedData) return 0;\r\n      \r\n      const data = JSON.parse(savedData);\r\n      const completedExercises = data.completedExercises || {};\r\n      \r\n      let completedCount = 0;\r\n      Object.values(completedExercises).forEach(exerciseIndices => {\r\n        if (Array.isArray(exerciseIndices)) {\r\n          completedCount += exerciseIndices.length;\r\n        }\r\n      });\r\n      \r\n      // Estimation réaliste (à ajuster selon vos vraies données)\r\n      const EXERCISES_PER_LEVEL = 20;\r\n      const percentage = (completedCount / EXERCISES_PER_LEVEL) * 100;\r\n      return Math.min(Math.round(percentage), 100);\r\n      \r\n    } catch (error) {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  // READING\r\n  const calculateReadingProgress = async (level) => {\r\n    try {\r\n      const storageKey = `reading_${level}`;\r\n      const savedData = await AsyncStorage.getItem(storageKey);\r\n      \r\n      if (!savedData) return 0;\r\n      \r\n      const data = JSON.parse(savedData);\r\n      const completedQuestions = data.completedQuestions || {};\r\n      \r\n      let completedCount = 0;\r\n      Object.values(completedQuestions).forEach(questionIndices => {\r\n        if (Array.isArray(questionIndices)) {\r\n          completedCount += questionIndices.length;\r\n        }\r\n      });\r\n      \r\n      const QUESTIONS_PER_LEVEL = 15;\r\n      const percentage = (completedCount / QUESTIONS_PER_LEVEL) * 100;\r\n      return Math.min(Math.round(percentage), 100);\r\n      \r\n    } catch (error) {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  // SPELLING\r\n  const calculateSpellingProgress = async (level) => {\r\n    try {\r\n      const storageKey = `spelling_${level}_correction`;\r\n      const savedData = await AsyncStorage.getItem(storageKey);\r\n      \r\n      if (!savedData) return 0;\r\n      \r\n      const data = JSON.parse(savedData);\r\n      const completedExercises = data.completedExercises || [];\r\n      \r\n      const EXERCISES_PER_LEVEL = 25;\r\n      const percentage = (completedExercises.length / EXERCISES_PER_LEVEL) * 100;\r\n      return Math.min(Math.round(percentage), 100);\r\n      \r\n    } catch (error) {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  // PHRASES\r\n  const calculatePhrasesProgress = async (level) => {\r\n    try {\r\n      const storageKey = `phrases_${level}`;\r\n      const savedData = await AsyncStorage.getItem(storageKey);\r\n      \r\n      if (!savedData) return 0;\r\n      \r\n      const data = JSON.parse(savedData);\r\n      const completedPhrases = data.completedPhrases || {};\r\n      \r\n      let completedCount = 0;\r\n      Object.values(completedPhrases).forEach(phraseIndices => {\r\n        if (Array.isArray(phraseIndices)) {\r\n          completedCount += phraseIndices.length;\r\n        }\r\n      });\r\n      \r\n      const PHRASES_PER_LEVEL = 30;\r\n      const percentage = (completedCount / PHRASES_PER_LEVEL) * 100;\r\n      return Math.min(Math.round(percentage), 100);\r\n      \r\n    } catch (error) {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  // CONVERSATIONS\r\n  const calculateConversationsProgress = async (level) => {\r\n    try {\r\n      const storageKey = `conversation_${level}`;\r\n      const savedData = await AsyncStorage.getItem(storageKey);\r\n      \r\n      if (!savedData) return 0;\r\n      \r\n      const data = JSON.parse(savedData);\r\n      const completedScenarios = data.completedScenarios || {};\r\n      \r\n      const completedCount = Object.values(completedScenarios).filter(scenario => \r\n        scenario && (scenario.completed || scenario.completedAt)\r\n      ).length;\r\n      \r\n      const CONVERSATIONS_PER_LEVEL = 8;\r\n      const percentage = (completedCount / CONVERSATIONS_PER_LEVEL) * 100;\r\n      return Math.min(Math.round(percentage), 100);\r\n      \r\n    } catch (error) {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  // ERROR CORRECTION\r\n  const calculateErrorCorrectionProgress = async (level) => {\r\n    try {\r\n      const storageKey = `error_correction_${level}`;\r\n      const savedData = await AsyncStorage.getItem(storageKey);\r\n      \r\n      if (!savedData) return 0;\r\n      \r\n      const data = JSON.parse(savedData);\r\n      const completedExercises = data.completedExercises || {};\r\n      \r\n      let completedCount = 0;\r\n      Object.values(completedExercises).forEach(exerciseIndices => {\r\n        if (Array.isArray(exerciseIndices)) {\r\n          completedCount += exerciseIndices.length;\r\n        }\r\n      });\r\n      \r\n      const EXERCISES_PER_LEVEL = 20;\r\n      const percentage = (completedCount / EXERCISES_PER_LEVEL) * 100;\r\n      return Math.min(Math.round(percentage), 100);\r\n      \r\n    } catch (error) {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  // WORD GAMES\r\n  const calculateWordGamesProgress = async (level) => {\r\n    try {\r\n      const storageKey = `word_games_completed_${level}`;\r\n      const savedData = await AsyncStorage.getItem(storageKey);\r\n      \r\n      if (!savedData) return 0;\r\n      \r\n      const data = JSON.parse(savedData);\r\n      \r\n      const completedCount = Object.values(data).filter(game => \r\n        game?.completed\r\n      ).length;\r\n      \r\n      const GAMES_PER_LEVEL = 10;\r\n      const percentage = (completedCount / GAMES_PER_LEVEL) * 100;\r\n      return Math.min(Math.round(percentage), 100);\r\n      \r\n    } catch (error) {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  // ASSESSMENT\r\n  const calculateAssessmentProgress = async (level) => {\r\n    try {\r\n      const storageKey = `assessment_results_${level}`;\r\n      const savedData = await AsyncStorage.getItem(storageKey);\r\n      \r\n      if (!savedData) return 0;\r\n      \r\n      const data = JSON.parse(savedData);\r\n      return data.completedAt ? 100 : 0;\r\n      \r\n    } catch (error) {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  // =================== CALCUL GLOBAL ===================\r\n  const calculateProgress = useCallback(async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      \r\n      const newLevelProgress = {};\r\n      const newExerciseProgress = {};\r\n\r\n      const levels = ['1', '2', '3', '4', '5', '6', 'bonus'];\r\n      \r\n      const exerciseCalculators = {\r\n        vocabulary: calculateVocabularyProgress,\r\n        vocabulary_fast: calculateVocabularyFastProgress,\r\n        grammar: calculateGrammarProgress,\r\n        reading: calculateReadingProgress,\r\n        spelling: calculateSpellingProgress,\r\n        phrases: calculatePhrasesProgress,\r\n        conversations: calculateConversationsProgress,\r\n        errorCorrection: calculateErrorCorrectionProgress,\r\n        wordGames: calculateWordGamesProgress,\r\n        assessment: calculateAssessmentProgress,\r\n      };\r\n\r\n      await Promise.all(\r\n        levels.map(async (level) => {\r\n          const availableExercises = level === 'bonus'\r\n            ? ['reading', 'vocabulary', 'phrases']\r\n            : Object.keys(exerciseCalculators);\r\n\r\n          const results = await Promise.all(\r\n            availableExercises.map(async (exerciseType) => {\r\n              try {\r\n                const calculator = exerciseCalculators[exerciseType];\r\n                const value = await calculator(level);\r\n                return { exerciseType, value };\r\n              } catch (e) {\r\n                console.warn(`Erreur calcul ${exerciseType} niveau ${level}:`, e);\r\n                return { exerciseType, value: 0 };\r\n              }\r\n            })\r\n          );\r\n\r\n          let levelTotal = 0;\r\n          let levelCompleted = 0;\r\n          results.forEach(({ exerciseType, value }) => {\r\n            if (!newExerciseProgress[exerciseType]) newExerciseProgress[exerciseType] = {};\r\n            newExerciseProgress[exerciseType][level] = value;\r\n            levelTotal += 100;\r\n            levelCompleted += value;\r\n          });\r\n\r\n          newLevelProgress[level] = levelTotal > 0\r\n            ? Math.round((levelCompleted / levelTotal) * 100)\r\n            : 0;\r\n        })\r\n      );\r\n\r\n      setLevelProgress(newLevelProgress);\r\n      setExerciseProgress(newExerciseProgress);\r\n      \r\n    } catch (error) {\r\n      console.error('Erreur calcul progression:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // =================== GETTERS ===================\r\n  \r\n  const getLevelProgress = useCallback((level) => {\r\n    return levelProgress[level] || 0;\r\n  }, [levelProgress]);\r\n\r\n  const getExerciseProgress = useCallback((exerciseType, level) => {\r\n    return exerciseProgress[exerciseType]?.[level] || 0;\r\n  }, [exerciseProgress]);\r\n\r\n  const hasProgress = useCallback((exerciseType, level) => {\r\n    return getExerciseProgress(exerciseType, level) > 0;\r\n  }, [getExerciseProgress]);\r\n\r\n  const hasVocabularyStarted = useCallback((level) => {\r\n    return hasProgress('vocabulary', level);\r\n  }, [hasProgress]);\r\n\r\n  const hasVocabularyFastStarted = useCallback((level) => {\r\n    return hasProgress('vocabulary_fast', level);\r\n  }, [hasProgress]);\r\n\r\n  // =================== INIT ===================\r\n  \r\n  useEffect(() => {\r\n    calculateProgress();\r\n  }, [calculateProgress]);\r\n\r\n  const refresh = useCallback(() => {\r\n    calculateProgress();\r\n  }, [calculateProgress]);\r\n\r\n  return {\r\n    levelProgress,\r\n    exerciseProgress,\r\n    isLoading,\r\n    getLevelProgress,\r\n    getExerciseProgress,\r\n    hasProgress,\r\n    hasVocabularyStarted,\r\n    hasVocabularyFastStarted,\r\n    refresh,\r\n  };\r\n};\r\n\r\nexport default useRealTimeProgress;"],"mappings":"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","ignoreList":[]}