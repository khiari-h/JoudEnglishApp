eaefe100d4a6247623a707ce2241034d
_getJestObj().mock('../../../src/hooks/useRevisionManager', function () {
  return {
    __esModule: true,
    default: function _default() {
      return {
        markRevisionCompleted: mockMarkRevisionCompleted
      };
    }
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        goBack: mockGoBack
      };
    }
  };
});
_getJestObj().mock('../../../src/hooks/useRevisionData', function () {
  return function () {
    return mockUseRevisionData();
  };
});
_getJestObj().mock('../../../src/hooks/useQuizEngine', function () {
  return function () {
    return mockUseQuizEngine();
  };
});
_getJestObj().mock('../../../src/contexts/ThemeContext', function () {
  return {
    ThemeContext: {
      Consumer: function Consumer(_ref) {
        var children = _ref.children;
        return children({
          colors: {
            background: "#F8FAFC",
            surface: "#FFFFFF",
            text: "#1F2937",
            textSecondary: "#6B7280",
            primary: "#3B82F6"
          }
        });
      },
      useContext: function useContext() {
        return {
          colors: {
            background: "#F8FAFC",
            surface: "#FFFFFF",
            text: "#1F2937",
            textSecondary: "#6B7280",
            primary: "#3B82F6"
          }
        };
      }
    }
  };
});
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  RN.Animated.timing = function (value, config) {
    return {
      start: function start(callback) {
        value.setValue(config.toValue);
        callback && callback();
      }
    };
  };
  return RN;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _VocabularyRevision = _interopRequireDefault(require("../../../src/screens/VocabularyRevision"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockMarkRevisionCompleted = jest.fn();
var mockGoBack = jest.fn();
var mockUseRevisionData = jest.fn();
var mockUseQuizEngine = jest.fn();
jest.spyOn(_reactNative2.Dimensions, 'get').mockReturnValue({
  width: 300,
  height: 600
});
describe('VocabularyRevision Integration Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.clearAllTimers();
  });
  var setupMocks = function setupMocks(revisionData, quizEngine) {
    mockUseRevisionData.mockReturnValue(revisionData);
    mockUseQuizEngine.mockReturnValue(quizEngine);
  };
  test('renders loading state initially', (0, _asyncToGenerator2.default)(function* () {
    setupMocks({
      isLoading: true,
      error: null,
      hasEnoughWords: false,
      canGenerateQuestions: false
    }, {});
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByText('Récupération de vos mots appris')).toBeTruthy();
    });
  }));
  test('renders error state', (0, _asyncToGenerator2.default)(function* () {
    setupMocks({
      isLoading: false,
      error: 'Failed to load data',
      hasEnoughWords: false,
      canGenerateQuestions: false
    }, {});
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByText('Failed to load data')).toBeTruthy();
    });
  }));
  test('renders locked state when not enough words', (0, _asyncToGenerator2.default)(function* () {
    setupMocks({
      isLoading: false,
      error: null,
      stats: {
        totalLearned: 30
      },
      hasEnoughWords: false,
      canGenerateQuestions: false
    }, {});
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByText(/Apprenez 50 mots pour débloquer le mode révision et tester vos connaissances !/i)).toBeTruthy();
      expect(_reactNative.screen.getByText('30 / 50')).toBeTruthy();
    });
  }));
  test('renders noWords state when enough words but cannot generate questions', (0, _asyncToGenerator2.default)(function* () {
    setupMocks({
      isLoading: false,
      error: null,
      revisionQuestions: [],
      stats: {
        totalLearned: 60
      },
      hasEnoughWords: true,
      canGenerateQuestions: false
    }, {});
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {
      route: {
        params: {
          questionsCount: 10
        }
      }
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByText(/Continuez d'apprendre pour diversifier les questions !/i)).toBeTruthy();
      expect(_reactNative.screen.getByText(/Un quiz de 10 questions ne peut pas être généré pour ce niveau./i)).toBeTruthy();
    });
  }));
  test('renders QuizScreen and handles answer and continue', (0, _asyncToGenerator2.default)(function* () {
    var mockQuestions = [{
      id: 'q1',
      word: 'Word 1',
      choices: ['A', 'B', 'C'],
      correctAnswer: 'A'
    }, {
      id: 'q2',
      word: 'Word 2',
      choices: ['D', 'E', 'F'],
      correctAnswer: 'D'
    }];
    var mockGoToNextQuestion = jest.fn();
    var mockHandleAnswer = jest.fn();
    mockUseRevisionData.mockReturnValue({
      revisionQuestions: mockQuestions,
      isLoading: false,
      hasEnoughWords: true,
      canGenerateQuestions: true
    });
    mockUseQuizEngine.mockReturnValue({
      currentQuestion: mockQuestions[0],
      currentQuestionIndex: 0,
      totalQuestions: mockQuestions.length,
      score: 0,
      isFinished: false,
      showResult: false,
      handleAnswer: mockHandleAnswer,
      goToNextQuestion: mockGoToNextQuestion,
      handleRestart: jest.fn()
    });
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {})),
      rerender = _render.rerender;
    _reactNative.fireEvent.press(_reactNative.screen.getByText('A'));
    expect(mockHandleAnswer).toHaveBeenCalledWith('A');
    mockUseQuizEngine.mockReturnValue({
      currentQuestion: mockQuestions[0],
      currentQuestionIndex: 0,
      totalQuestions: mockQuestions.length,
      score: 1,
      isFinished: false,
      showResult: true,
      handleAnswer: mockHandleAnswer,
      goToNextQuestion: mockGoToNextQuestion,
      handleRestart: jest.fn()
    });
    rerender((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByText('Continuer')).toBeTruthy();
    });
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Continuer'));
    jest.runAllTimers();
    jest.runAllAnimations();
    expect(mockGoToNextQuestion).toHaveBeenCalled();
  }));
  test('renders ResultScreen when quiz is finished', (0, _asyncToGenerator2.default)(function* () {
    var mockQuestions = [{
      id: 'q1',
      word: 'Word 1',
      choices: ['A', 'B', 'C'],
      correctAnswer: 'A'
    }];
    setupMocks({
      revisionQuestions: mockQuestions,
      isLoading: false,
      hasEnoughWords: true,
      canGenerateQuestions: true
    }, {
      currentQuestion: null,
      currentQuestionIndex: 1,
      totalQuestions: mockQuestions.length,
      score: 0,
      isFinished: true,
      showResult: true,
      handleAnswer: jest.fn(),
      goToNextQuestion: jest.fn(),
      handleRestart: jest.fn()
    });
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {})),
      findByText = _render2.findByText;
    yield findByText('0');
    expect(_reactNative.screen.getByText('/1')).toBeTruthy();
    expect(_reactNative.screen.getByText('Rejouer')).toBeTruthy();
    expect(_reactNative.screen.getByText('Terminer')).toBeTruthy();
  }));
  test('handles restart from ResultScreen', (0, _asyncToGenerator2.default)(function* () {
    var mockQuestions = [{
      id: 'q1',
      word: 'Word 1',
      choices: ['A', 'B', 'C'],
      correctAnswer: 'A'
    }];
    var mockHandleRestart = jest.fn();
    setupMocks({
      revisionQuestions: mockQuestions,
      isLoading: false,
      hasEnoughWords: true,
      canGenerateQuestions: true
    }, {
      currentQuestion: null,
      currentQuestionIndex: 1,
      totalQuestions: mockQuestions.length,
      score: 1,
      isFinished: true,
      showResult: true,
      handleAnswer: jest.fn(),
      goToNextQuestion: jest.fn(),
      handleRestart: mockHandleRestart
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByText('Rejouer')).toBeTruthy();
    });
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Rejouer'));
    expect(mockHandleRestart).toHaveBeenCalled();
  }));
  test('handles finish from ResultScreen', (0, _asyncToGenerator2.default)(function* () {
    var mockQuestions = [{
      id: 'q1',
      word: 'Word 1',
      choices: ['A', 'B', 'C'],
      correctAnswer: 'A'
    }];
    setupMocks({
      revisionQuestions: mockQuestions,
      isLoading: false,
      hasEnoughWords: true,
      canGenerateQuestions: true
    }, {
      currentQuestion: null,
      currentQuestionIndex: 1,
      totalQuestions: mockQuestions.length,
      score: 1,
      isFinished: true,
      showResult: true,
      handleAnswer: jest.fn(),
      goToNextQuestion: jest.fn(),
      handleRestart: jest.fn()
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByText('Terminer')).toBeTruthy();
    });
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Terminer'));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockMarkRevisionCompleted).toHaveBeenCalledWith(mockQuestions, 1, 1);
      expect(mockGoBack).toHaveBeenCalled();
    });
  }));
  test('handleGoBack is called when back button is pressed in QuizScreen', (0, _asyncToGenerator2.default)(function* () {
    var mockQuestions = [{
      id: 'q1',
      word: 'Word 1',
      choices: ['A', 'B', 'C'],
      correctAnswer: 'A'
    }];
    setupMocks({
      revisionQuestions: mockQuestions,
      isLoading: false,
      hasEnoughWords: true,
      canGenerateQuestions: true
    }, {
      currentQuestion: mockQuestions[0],
      currentQuestionIndex: 0,
      totalQuestions: mockQuestions.length,
      score: 0,
      isFinished: false,
      showResult: false,
      handleAnswer: jest.fn(),
      goToNextQuestion: jest.fn(),
      handleRestart: jest.fn()
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByLabelText('Retour')).toBeTruthy();
    });
    _reactNative.fireEvent.press(_reactNative.screen.getByLabelText('Retour'));
    expect(mockGoBack).toHaveBeenCalled();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIm1hcmtSZXZpc2lvbkNvbXBsZXRlZCIsIm1vY2tNYXJrUmV2aXNpb25Db21wbGV0ZWQiLCJ1c2VOYXZpZ2F0aW9uIiwiZ29CYWNrIiwibW9ja0dvQmFjayIsIm1vY2tVc2VSZXZpc2lvbkRhdGEiLCJtb2NrVXNlUXVpekVuZ2luZSIsIlRoZW1lQ29udGV4dCIsIkNvbnN1bWVyIiwiX3JlZiIsImNoaWxkcmVuIiwiY29sb3JzIiwiYmFja2dyb3VuZCIsInN1cmZhY2UiLCJ0ZXh0IiwidGV4dFNlY29uZGFyeSIsInByaW1hcnkiLCJ1c2VDb250ZXh0IiwiUk4iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsIkFuaW1hdGVkIiwidGltaW5nIiwidmFsdWUiLCJjb25maWciLCJzdGFydCIsImNhbGxiYWNrIiwic2V0VmFsdWUiLCJ0b1ZhbHVlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfcmVhY3ROYXRpdmUyIiwiX1ZvY2FidWxhcnlSZXZpc2lvbiIsIl9qc3hSdW50aW1lIiwiX3JlcXVpcmUiLCJmbiIsInNweU9uIiwiRGltZW5zaW9ucyIsIm1vY2tSZXR1cm5WYWx1ZSIsIndpZHRoIiwiaGVpZ2h0IiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsInVzZUZha2VUaW1lcnMiLCJhZnRlckVhY2giLCJjbGVhckFsbFRpbWVycyIsInNldHVwTW9ja3MiLCJyZXZpc2lvbkRhdGEiLCJxdWl6RW5naW5lIiwidGVzdCIsImlzTG9hZGluZyIsImVycm9yIiwiaGFzRW5vdWdoV29yZHMiLCJjYW5HZW5lcmF0ZVF1ZXN0aW9ucyIsInJlbmRlciIsImpzeCIsIndhaXRGb3IiLCJleHBlY3QiLCJzY3JlZW4iLCJnZXRCeVRleHQiLCJ0b0JlVHJ1dGh5Iiwic3RhdHMiLCJ0b3RhbExlYXJuZWQiLCJyZXZpc2lvblF1ZXN0aW9ucyIsInJvdXRlIiwicGFyYW1zIiwicXVlc3Rpb25zQ291bnQiLCJtb2NrUXVlc3Rpb25zIiwiaWQiLCJ3b3JkIiwiY2hvaWNlcyIsImNvcnJlY3RBbnN3ZXIiLCJtb2NrR29Ub05leHRRdWVzdGlvbiIsIm1vY2tIYW5kbGVBbnN3ZXIiLCJjdXJyZW50UXVlc3Rpb24iLCJjdXJyZW50UXVlc3Rpb25JbmRleCIsInRvdGFsUXVlc3Rpb25zIiwibGVuZ3RoIiwic2NvcmUiLCJpc0ZpbmlzaGVkIiwic2hvd1Jlc3VsdCIsImhhbmRsZUFuc3dlciIsImdvVG9OZXh0UXVlc3Rpb24iLCJoYW5kbGVSZXN0YXJ0IiwiX3JlbmRlciIsInJlcmVuZGVyIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsInJ1bkFsbFRpbWVycyIsInJ1bkFsbEFuaW1hdGlvbnMiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwiX3JlbmRlcjIiLCJmaW5kQnlUZXh0IiwibW9ja0hhbmRsZVJlc3RhcnQiLCJnZXRCeUxhYmVsVGV4dCJdLCJzb3VyY2VzIjpbIlZvY2FidWxhcnlSZXZpc2lvbi50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIHdhaXRGb3IsIGZpcmVFdmVudCwgc2NyZWVuIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgRGltZW5zaW9ucywgVmlldywgVGV4dCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbi8vIFNjcmVlbiB0byB0ZXN0XG5pbXBvcnQgVm9jYWJ1bGFyeVJldmlzaW9uIGZyb20gJy4uLy4uLy4uL3NyYy9zY3JlZW5zL1ZvY2FidWxhcnlSZXZpc2lvbic7XG5cbi8vIE1vY2sgY3VzdG9tIGhvb2tzXG5jb25zdCBtb2NrTWFya1JldmlzaW9uQ29tcGxldGVkID0gamVzdC5mbigpO1xuamVzdC5tb2NrKCcuLi8uLi8uLi9zcmMvaG9va3MvdXNlUmV2aXNpb25NYW5hZ2VyJywgKCkgPT4gKHtcbsKgIF9fZXNNb2R1bGU6IHRydWUsXG7CoCBkZWZhdWx0OiAoKSA9PiAoe1xuwqAgwqAgbWFya1JldmlzaW9uQ29tcGxldGVkOiBtb2NrTWFya1JldmlzaW9uQ29tcGxldGVkLFxuwqAgfSksXG59KSk7XG5cbmNvbnN0IG1vY2tHb0JhY2sgPSBqZXN0LmZuKCk7XG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+ICh7XG7CoCB1c2VOYXZpZ2F0aW9uOiAoKSA9PiAoe1xuwqAgwqAgZ29CYWNrOiBtb2NrR29CYWNrLFxuwqAgfSksXG59KSk7XG5cbi8vIE1vY2tzIHBvdXIgbGVzIGhvb2tzXG5jb25zdCBtb2NrVXNlUmV2aXNpb25EYXRhID0gamVzdC5mbigpO1xuamVzdC5tb2NrKCcuLi8uLi8uLi9zcmMvaG9va3MvdXNlUmV2aXNpb25EYXRhJywgKCkgPT4gKCkgPT4gbW9ja1VzZVJldmlzaW9uRGF0YSgpKTtcblxuY29uc3QgbW9ja1VzZVF1aXpFbmdpbmUgPSBqZXN0LmZuKCk7XG5qZXN0Lm1vY2soJy4uLy4uLy4uL3NyYy9ob29rcy91c2VRdWl6RW5naW5lJywgKCkgPT4gKCkgPT4gbW9ja1VzZVF1aXpFbmdpbmUoKSk7XG5cblxuLy8gTW9jayBUaGVtZUNvbnRleHRcbmplc3QubW9jaygnLi4vLi4vLi4vc3JjL2NvbnRleHRzL1RoZW1lQ29udGV4dCcsICgpID0+ICh7XG7CoCBUaGVtZUNvbnRleHQ6IHtcbsKgIMKgIENvbnN1bWVyOiAoeyBjaGlsZHJlbiB9KSA9PiBjaGlsZHJlbih7XG7CoCDCoCDCoCBjb2xvcnM6IHtcbsKgIMKgIMKgIMKgIGJhY2tncm91bmQ6IFwiI0Y4RkFGQ1wiLFxuwqAgwqAgwqAgwqAgc3VyZmFjZTogXCIjRkZGRkZGXCIsXG7CoCDCoCDCoCDCoCB0ZXh0OiBcIiMxRjI5MzdcIixcbsKgIMKgIMKgIMKgIHRleHRTZWNvbmRhcnk6IFwiIzZCNzI4MFwiLFxuwqAgwqAgwqAgwqAgcHJpbWFyeTogXCIjM0I4MkY2XCJcbsKgIMKgIMKgIH1cbsKgIMKgIH0pLFxuwqAgwqAgdXNlQ29udGV4dDogKCkgPT4gKHtcbsKgIMKgIMKgIGNvbG9yczoge1xuwqAgwqAgwqAgwqAgYmFja2dyb3VuZDogXCIjRjhGQUZDXCIsXG7CoCDCoCDCoCDCoCBzdXJmYWNlOiBcIiNGRkZGRkZcIixcbsKgIMKgIMKgIMKgIHRleHQ6IFwiIzFGMjkzN1wiLFxuwqAgwqAgwqAgwqAgdGV4dFNlY29uZGFyeTogXCIjNkI3MjgwXCIsXG7CoCDCoCDCoCDCoCBwcmltYXJ5OiBcIiMzQjgyRjZcIlxuwqAgwqAgwqAgfVxuwqAgwqAgfSksXG7CoCB9LFxufSkpO1xuXG4vLyBNb2NrIERpbWVuc2lvbnMgcG91ciBBbmltYXRlZCB2YWx1ZXNcbmplc3Quc3B5T24oRGltZW5zaW9ucywgJ2dldCcpLm1vY2tSZXR1cm5WYWx1ZSh7IHdpZHRoOiAzMDAsIGhlaWdodDogNjAwIH0pO1xuXG4vLyBNb2NrIEFuaW1hdGVkLnRpbWluZyBwb3VyIHF1J2lsIHNlIHRlcm1pbmUgaW1tw6lkaWF0ZW1lbnRcbmplc3QubW9jaygncmVhY3QtbmF0aXZlJywgKCkgPT4ge1xuwqAgY29uc3QgUk4gPSBqZXN0LnJlcXVpcmVBY3R1YWwoJ3JlYWN0LW5hdGl2ZScpO1xuwqAgUk4uQW5pbWF0ZWQudGltaW5nID0gKHZhbHVlLCBjb25maWcpID0+ICh7XG7CoCDCoCBzdGFydDogKGNhbGxiYWNrKSA9PiB7XG7CoCDCoCDCoCB2YWx1ZS5zZXRWYWx1ZShjb25maWcudG9WYWx1ZSk7XG7CoCDCoCDCoCBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuwqAgwqAgfSxcbsKgIH0pO1xuwqAgcmV0dXJuIFJOO1xufSk7XG5cbmRlc2NyaWJlKCdWb2NhYnVsYXJ5UmV2aXNpb24gSW50ZWdyYXRpb24gVGVzdHMnLCAoKSA9PiB7XG7CoCBiZWZvcmVFYWNoKCgpID0+IHtcbsKgIMKgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuwqAgwqAgamVzdC51c2VGYWtlVGltZXJzKCk7XG7CoCB9KTtcblxuwqAgYWZ0ZXJFYWNoKCgpID0+IHtcbsKgIMKgIGplc3QuY2xlYXJBbGxUaW1lcnMoKTtcbsKgIH0pO1xuXG7CoCAvLyBIZWxwZXIgcG91ciByw6lpbml0aWFsaXNlciBsZXMgbW9ja3MgZW50cmUgY2hhcXVlIHRlc3RcbsKgIGNvbnN0IHNldHVwTW9ja3MgPSAocmV2aXNpb25EYXRhLCBxdWl6RW5naW5lKSA9PiB7XG7CoCDCoCBtb2NrVXNlUmV2aXNpb25EYXRhLm1vY2tSZXR1cm5WYWx1ZShyZXZpc2lvbkRhdGEpO1xuwqAgwqAgbW9ja1VzZVF1aXpFbmdpbmUubW9ja1JldHVyblZhbHVlKHF1aXpFbmdpbmUpO1xuwqAgfTtcblxuwqAgdGVzdCgncmVuZGVycyBsb2FkaW5nIHN0YXRlIGluaXRpYWxseScsIGFzeW5jICgpID0+IHtcbsKgIMKgIHNldHVwTW9ja3MoXG7CoCDCoCDCoCB7IGlzTG9hZGluZzogdHJ1ZSwgZXJyb3I6IG51bGwsIGhhc0Vub3VnaFdvcmRzOiBmYWxzZSwgY2FuR2VuZXJhdGVRdWVzdGlvbnM6IGZhbHNlIH0sXG7CoCDCoCDCoCB7fVxuwqAgwqAgKTtcblxuwqAgwqAgcmVuZGVyKDxWb2NhYnVsYXJ5UmV2aXNpb24gLz4pO1xuwqAgwqAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG7CoCDCoCDCoCBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnUsOpY3Vww6lyYXRpb24gZGUgdm9zIG1vdHMgYXBwcmlzJykpLnRvQmVUcnV0aHkoKTtcbsKgIMKgIH0pO1xuwqAgfSk7XG5cbsKgIHRlc3QoJ3JlbmRlcnMgZXJyb3Igc3RhdGUnLCBhc3luYyAoKSA9PiB7XG7CoCDCoCBzZXR1cE1vY2tzKFxuwqAgwqAgwqAgeyBpc0xvYWRpbmc6IGZhbHNlLCBlcnJvcjogJ0ZhaWxlZCB0byBsb2FkIGRhdGEnLCBoYXNFbm91Z2hXb3JkczogZmFsc2UsIGNhbkdlbmVyYXRlUXVlc3Rpb25zOiBmYWxzZSB9LFxuwqAgwqAgwqAge31cbsKgIMKgICk7XG5cbsKgIMKgIHJlbmRlcig8Vm9jYWJ1bGFyeVJldmlzaW9uIC8+KTtcbsKgIMKgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuwqAgwqAgwqAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0ZhaWxlZCB0byBsb2FkIGRhdGEnKSkudG9CZVRydXRoeSgpO1xuwqAgwqAgfSk7XG7CoCB9KTtcblxuwqAgdGVzdCgncmVuZGVycyBsb2NrZWQgc3RhdGUgd2hlbiBub3QgZW5vdWdoIHdvcmRzJywgYXN5bmMgKCkgPT4ge1xuwqAgwqAgc2V0dXBNb2NrcyhcbsKgIMKgIMKgIHsgXG7CoCDCoCDCoCDCoCBpc0xvYWRpbmc6IGZhbHNlLCBcbsKgIMKgIMKgIMKgIGVycm9yOiBudWxsLCBcbsKgIMKgIMKgIMKgIHN0YXRzOiB7IHRvdGFsTGVhcm5lZDogMzAgfSwgXG7CoCDCoCDCoCDCoCBoYXNFbm91Z2hXb3JkczogZmFsc2UsIFxuwqAgwqAgwqAgwqAgY2FuR2VuZXJhdGVRdWVzdGlvbnM6IGZhbHNlIFxuwqAgwqAgwqAgfSxcbsKgIMKgIMKgIHt9XG7CoCDCoCApO1xuXG7CoCDCoCByZW5kZXIoPFZvY2FidWxhcnlSZXZpc2lvbiAvPik7XG7CoCDCoCBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbsKgIMKgIMKgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC9BcHByZW5leiA1MCBtb3RzIHBvdXIgZMOpYmxvcXVlciBsZSBtb2RlIHLDqXZpc2lvbiBldCB0ZXN0ZXIgdm9zIGNvbm5haXNzYW5jZXMgIS9pKSkudG9CZVRydXRoeSgpO1xuwqAgwqAgwqAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJzMwIC8gNTAnKSkudG9CZVRydXRoeSgpO1xuwqAgwqAgfSk7XG7CoCB9KTtcblxuwqAgdGVzdCgncmVuZGVycyBub1dvcmRzIHN0YXRlIHdoZW4gZW5vdWdoIHdvcmRzIGJ1dCBjYW5ub3QgZ2VuZXJhdGUgcXVlc3Rpb25zJywgYXN5bmMgKCkgPT4ge1xuwqAgwqAgc2V0dXBNb2NrcyhcbsKgIMKgIMKgIHsgXG7CoCDCoCDCoCDCoCBpc0xvYWRpbmc6IGZhbHNlLCBcbsKgIMKgIMKgIMKgIGVycm9yOiBudWxsLCBcbsKgIMKgIMKgIMKgIHJldmlzaW9uUXVlc3Rpb25zOiBbXSwgXG7CoCDCoCDCoCDCoCBzdGF0czogeyB0b3RhbExlYXJuZWQ6IDYwIH0sIFxuwqAgwqAgwqAgwqAgaGFzRW5vdWdoV29yZHM6IHRydWUsIFxuwqAgwqAgwqAgwqAgY2FuR2VuZXJhdGVRdWVzdGlvbnM6IGZhbHNlIFxuwqAgwqAgwqAgfSxcbsKgIMKgIMKgIHt9XG7CoCDCoCApO1xuXG7CoCDCoCByZW5kZXIoPFZvY2FidWxhcnlSZXZpc2lvbiByb3V0ZT17eyBwYXJhbXM6IHsgcXVlc3Rpb25zQ291bnQ6IDEwIH0gfX0gLz4pO1xuwqAgwqAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG7CoCDCoCDCoCBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvQ29udGludWV6IGQnYXBwcmVuZHJlIHBvdXIgZGl2ZXJzaWZpZXIgbGVzIHF1ZXN0aW9ucyAhL2kpKS50b0JlVHJ1dGh5KCk7XG7CoCDCoCDCoCBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvVW4gcXVpeiBkZSAxMCBxdWVzdGlvbnMgbmUgcGV1dCBwYXMgw6p0cmUgZ8OpbsOpcsOpIHBvdXIgY2Ugbml2ZWF1Li9pKSkudG9CZVRydXRoeSgpO1xuwqAgwqAgfSk7XG7CoCB9KTtcblxuLy8gQ09SUkVDVElPTiBGSU5BTEUgUE9VUiBMRSBURVNUIEVOIMOJQ0hFQ1xudGVzdCgncmVuZGVycyBRdWl6U2NyZWVuIGFuZCBoYW5kbGVzIGFuc3dlciBhbmQgY29udGludWUnLCBhc3luYyAoKSA9PiB7XG7CoCBjb25zdCBtb2NrUXVlc3Rpb25zID0gW1xuwqAgwqAgeyBpZDogJ3ExJywgd29yZDogJ1dvcmQgMScsIGNob2ljZXM6IFsnQScsICdCJywgJ0MnXSwgY29ycmVjdEFuc3dlcjogJ0EnIH0sXG7CoCDCoCB7IGlkOiAncTInLCB3b3JkOiAnV29yZCAyJywgY2hvaWNlczogWydEJywgJ0UnLCAnRiddLCBjb3JyZWN0QW5zd2VyOiAnRCcgfSxcbsKgIF07XG5cbsKgIGNvbnN0IG1vY2tHb1RvTmV4dFF1ZXN0aW9uID0gamVzdC5mbigpO1xuwqAgY29uc3QgbW9ja0hhbmRsZUFuc3dlciA9IGplc3QuZm4oKTtcblxuwqAgLy8gw4l0YXQgMTogUXVpelNjcmVlbiBhdmVjIGxhIHByZW1pw6hyZSBxdWVzdGlvblxuwqAgbW9ja1VzZVJldmlzaW9uRGF0YS5tb2NrUmV0dXJuVmFsdWUoe1xuwqAgwqAgcmV2aXNpb25RdWVzdGlvbnM6IG1vY2tRdWVzdGlvbnMsXG7CoCDCoCBpc0xvYWRpbmc6IGZhbHNlLFxuwqAgwqAgaGFzRW5vdWdoV29yZHM6IHRydWUsXG7CoCDCoCBjYW5HZW5lcmF0ZVF1ZXN0aW9uczogdHJ1ZSxcbsKgIH0pO1xuwqAgXG7CoCBtb2NrVXNlUXVpekVuZ2luZS5tb2NrUmV0dXJuVmFsdWUoe1xuwqAgwqAgY3VycmVudFF1ZXN0aW9uOiBtb2NrUXVlc3Rpb25zWzBdLFxuwqAgwqAgY3VycmVudFF1ZXN0aW9uSW5kZXg6IDAsXG7CoCDCoCB0b3RhbFF1ZXN0aW9uczogbW9ja1F1ZXN0aW9ucy5sZW5ndGgsXG7CoCDCoCBzY29yZTogMCxcbsKgIMKgIGlzRmluaXNoZWQ6IGZhbHNlLFxuwqAgwqAgc2hvd1Jlc3VsdDogZmFsc2UsXG7CoCDCoCBoYW5kbGVBbnN3ZXI6IG1vY2tIYW5kbGVBbnN3ZXIsXG7CoCDCoCBnb1RvTmV4dFF1ZXN0aW9uOiBtb2NrR29Ub05leHRRdWVzdGlvbixcbsKgIMKgIGhhbmRsZVJlc3RhcnQ6IGplc3QuZm4oKSxcbsKgIH0pO1xuwqAgXG7CoCBjb25zdCB7IHJlcmVuZGVyIH0gPSByZW5kZXIoPFZvY2FidWxhcnlSZXZpc2lvbiAvPik7XG5cbsKgIC8vIMOJdGFwZSAxIDogUsOpcG9uZHJlIMOgIGxhIHF1ZXN0aW9uXG7CoCBmaXJlRXZlbnQucHJlc3Moc2NyZWVuLmdldEJ5VGV4dCgnQScpKTtcbsKgIGV4cGVjdChtb2NrSGFuZGxlQW5zd2VyKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnQScpO1xuXG7CoCAvLyDDiXRhdCAyOiBMJ8OpdGF0IGBzaG93UmVzdWx0YCBwYXNzZSDDoCBgdHJ1ZWBcbsKgIG1vY2tVc2VRdWl6RW5naW5lLm1vY2tSZXR1cm5WYWx1ZSh7XG7CoCDCoCBjdXJyZW50UXVlc3Rpb246IG1vY2tRdWVzdGlvbnNbMF0sXG7CoCDCoCBjdXJyZW50UXVlc3Rpb25JbmRleDogMCxcbsKgIMKgIHRvdGFsUXVlc3Rpb25zOiBtb2NrUXVlc3Rpb25zLmxlbmd0aCxcbsKgIMKgIHNjb3JlOiAxLCBcbsKgIMKgIGlzRmluaXNoZWQ6IGZhbHNlLFxuwqAgwqAgc2hvd1Jlc3VsdDogdHJ1ZSwgLy8gTCfDqXRhdCBgc2hvd1Jlc3VsdGAgZXN0IG1haW50ZW5hbnQgdnJhaVxuwqAgwqAgaGFuZGxlQW5zd2VyOiBtb2NrSGFuZGxlQW5zd2VyLFxuwqAgwqAgZ29Ub05leHRRdWVzdGlvbjogbW9ja0dvVG9OZXh0UXVlc3Rpb24sXG7CoCDCoCBoYW5kbGVSZXN0YXJ0OiBqZXN0LmZuKCksXG7CoCB9KTtcbsKgIHJlcmVuZGVyKDxWb2NhYnVsYXJ5UmV2aXNpb24gLz4pO1xuXG7CoCAvLyBBdHRlbmRyZSBsJ2FwcGFyaXRpb24gZHUgYm91dG9uICdDb250aW51ZXInXG7CoCBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbsKgIMKgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdDb250aW51ZXInKSkudG9CZVRydXRoeSgpO1xuwqAgfSk7XG5cbsKgIC8vIMOJdGFwZSAyIDogQ2xpcXVlciBzdXIgJ0NvbnRpbnVlcidcbsKgIGZpcmVFdmVudC5wcmVzcyhzY3JlZW4uZ2V0QnlUZXh0KCdDb250aW51ZXInKSk7XG5cbsKgIC8vIEZvcmNlciBsJ2V4w6ljdXRpb24gZGUgdG91dGVzIGxlcyBhbmltYXRpb25zIGV0IHRpbWVyc1xuwqAgamVzdC5ydW5BbGxUaW1lcnMoKTtcbsKgIGplc3QucnVuQWxsQW5pbWF0aW9ucygpO1xuXG7CoCAvLyBWw6lyaWZpZXIgcXVlIGxhIGZvbmN0aW9uIGdvVG9OZXh0UXVlc3Rpb24gYSBiaWVuIMOpdMOpIGFwcGVsw6llXG7CoCBleHBlY3QobW9ja0dvVG9OZXh0UXVlc3Rpb24pLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbn0pO1xuXG5cbi8vIENPUlJFQ1RJT04gUE9VUiBDRSBURVNUXG50ZXN0KCdyZW5kZXJzIFJlc3VsdFNjcmVlbiB3aGVuIHF1aXogaXMgZmluaXNoZWQnLCBhc3luYyAoKSA9PiB7XG7CoCBjb25zdCBtb2NrUXVlc3Rpb25zID0gW1xuwqAgwqAgeyBpZDogJ3ExJywgd29yZDogJ1dvcmQgMScsIGNob2ljZXM6IFsnQScsICdCJywgJ0MnXSwgY29ycmVjdEFuc3dlcjogJ0EnIH0sXG7CoCBdO1xuXG7CoCBzZXR1cE1vY2tzKFxuwqAgwqAge1xuwqAgwqAgwqAgcmV2aXNpb25RdWVzdGlvbnM6IG1vY2tRdWVzdGlvbnMsXG7CoCDCoCDCoCBpc0xvYWRpbmc6IGZhbHNlLFxuwqAgwqAgwqAgaGFzRW5vdWdoV29yZHM6IHRydWUsXG7CoCDCoCDCoCBjYW5HZW5lcmF0ZVF1ZXN0aW9uczogdHJ1ZVxuwqAgwqAgfSxcbsKgIMKgIHtcbsKgIMKgIMKgIGN1cnJlbnRRdWVzdGlvbjogbnVsbCxcbsKgIMKgIMKgIGN1cnJlbnRRdWVzdGlvbkluZGV4OiAxLFxuwqAgwqAgwqAgdG90YWxRdWVzdGlvbnM6IG1vY2tRdWVzdGlvbnMubGVuZ3RoLFxuwqAgwqAgwqAgc2NvcmU6IDAsIFxuwqAgwqAgwqAgaXNGaW5pc2hlZDogdHJ1ZSxcbsKgIMKgIMKgIHNob3dSZXN1bHQ6IHRydWUsXG7CoCDCoCDCoCBoYW5kbGVBbnN3ZXI6IGplc3QuZm4oKSxcbsKgIMKgIMKgIGdvVG9OZXh0UXVlc3Rpb246IGplc3QuZm4oKSxcbsKgIMKgIMKgIGhhbmRsZVJlc3RhcnQ6IGplc3QuZm4oKSxcbsKgIMKgIH1cbsKgICk7XG5cbsKgIGNvbnN0IHsgZmluZEJ5VGV4dCB9ID0gcmVuZGVyKDxWb2NhYnVsYXJ5UmV2aXNpb24gLz4pO1xuwqAgXG7CoCAvLyBDb3JyZWN0aW9uIDogT24gY2hlcmNoZSBsZXMgZGV1eCDDqWzDqW1lbnRzIGRlIHRleHRlIHPDqXBhcsOpbWVudFxuwqAgYXdhaXQgZmluZEJ5VGV4dCgnMCcpO1xuwqAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJy8xJykpLnRvQmVUcnV0aHkoKTtcbsKgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdSZWpvdWVyJykpLnRvQmVUcnV0aHkoKTtcbsKgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdUZXJtaW5lcicpKS50b0JlVHJ1dGh5KCk7XG59KTtcblxuXG7CoCB0ZXN0KCdoYW5kbGVzIHJlc3RhcnQgZnJvbSBSZXN1bHRTY3JlZW4nLCBhc3luYyAoKSA9PiB7XG7CoCDCoCBjb25zdCBtb2NrUXVlc3Rpb25zID0gW3sgaWQ6ICdxMScsIHdvcmQ6ICdXb3JkIDEnLCBjaG9pY2VzOiBbJ0EnLCAnQicsICdDJ10sIGNvcnJlY3RBbnN3ZXI6ICdBJyB9XTtcbsKgIMKgIGNvbnN0IG1vY2tIYW5kbGVSZXN0YXJ0ID0gamVzdC5mbigpO1xuXG7CoCDCoCBzZXR1cE1vY2tzKFxuwqAgwqAgwqAge1xuwqAgwqAgwqAgwqAgcmV2aXNpb25RdWVzdGlvbnM6IG1vY2tRdWVzdGlvbnMsXG7CoCDCoCDCoCDCoCBpc0xvYWRpbmc6IGZhbHNlLFxuwqAgwqAgwqAgwqAgaGFzRW5vdWdoV29yZHM6IHRydWUsXG7CoCDCoCDCoCDCoCBjYW5HZW5lcmF0ZVF1ZXN0aW9uczogdHJ1ZVxuwqAgwqAgwqAgfSxcbsKgIMKgIMKgIHtcbsKgIMKgIMKgIMKgIGN1cnJlbnRRdWVzdGlvbjogbnVsbCxcbsKgIMKgIMKgIMKgIGN1cnJlbnRRdWVzdGlvbkluZGV4OiAxLFxuwqAgwqAgwqAgwqAgdG90YWxRdWVzdGlvbnM6IG1vY2tRdWVzdGlvbnMubGVuZ3RoLFxuwqAgwqAgwqAgwqAgc2NvcmU6IDEsXG7CoCDCoCDCoCDCoCBpc0ZpbmlzaGVkOiB0cnVlLFxuwqAgwqAgwqAgwqAgc2hvd1Jlc3VsdDogdHJ1ZSxcbsKgIMKgIMKgIMKgIGhhbmRsZUFuc3dlcjogamVzdC5mbigpLFxuwqAgwqAgwqAgwqAgZ29Ub05leHRRdWVzdGlvbjogamVzdC5mbigpLFxuwqAgwqAgwqAgwqAgaGFuZGxlUmVzdGFydDogbW9ja0hhbmRsZVJlc3RhcnQsXG7CoCDCoCDCoCB9XG7CoCDCoCApO1xuXG7CoCDCoCByZW5kZXIoPFZvY2FidWxhcnlSZXZpc2lvbiAvPik7XG7CoCDCoCBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbsKgIMKgIMKgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdSZWpvdWVyJykpLnRvQmVUcnV0aHkoKTtcbsKgIMKgIH0pO1xuwqAgwqAgZmlyZUV2ZW50LnByZXNzKHNjcmVlbi5nZXRCeVRleHQoJ1Jlam91ZXInKSk7XG7CoCDCoCBleHBlY3QobW9ja0hhbmRsZVJlc3RhcnQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbsKgIH0pO1xuXG7CoCB0ZXN0KCdoYW5kbGVzIGZpbmlzaCBmcm9tIFJlc3VsdFNjcmVlbicsIGFzeW5jICgpID0+IHtcbsKgIMKgIGNvbnN0IG1vY2tRdWVzdGlvbnMgPSBbeyBpZDogJ3ExJywgd29yZDogJ1dvcmQgMScsIGNob2ljZXM6IFsnQScsICdCJywgJ0MnXSwgY29ycmVjdEFuc3dlcjogJ0EnIH1dO1xuXG7CoCDCoCBzZXR1cE1vY2tzKFxuwqAgwqAgwqAge1xuwqAgwqAgwqAgwqAgcmV2aXNpb25RdWVzdGlvbnM6IG1vY2tRdWVzdGlvbnMsXG7CoCDCoCDCoCDCoCBpc0xvYWRpbmc6IGZhbHNlLFxuwqAgwqAgwqAgwqAgaGFzRW5vdWdoV29yZHM6IHRydWUsXG7CoCDCoCDCoCDCoCBjYW5HZW5lcmF0ZVF1ZXN0aW9uczogdHJ1ZVxuwqAgwqAgwqAgfSxcbsKgIMKgIMKgIHtcbsKgIMKgIMKgIMKgIGN1cnJlbnRRdWVzdGlvbjogbnVsbCxcbsKgIMKgIMKgIMKgIGN1cnJlbnRRdWVzdGlvbkluZGV4OiAxLFxuwqAgwqAgwqAgwqAgdG90YWxRdWVzdGlvbnM6IG1vY2tRdWVzdGlvbnMubGVuZ3RoLFxuwqAgwqAgwqAgwqAgc2NvcmU6IDEsXG7CoCDCoCDCoCDCoCBpc0ZpbmlzaGVkOiB0cnVlLFxuwqAgwqAgwqAgwqAgc2hvd1Jlc3VsdDogdHJ1ZSxcbsKgIMKgIMKgIMKgIGhhbmRsZUFuc3dlcjogamVzdC5mbigpLFxuwqAgwqAgwqAgwqAgZ29Ub05leHRRdWVzdGlvbjogamVzdC5mbigpLFxuwqAgwqAgwqAgwqAgaGFuZGxlUmVzdGFydDogamVzdC5mbigpLFxuwqAgwqAgwqAgfVxuwqAgwqAgKTtcblxuwqAgwqAgcmVuZGVyKDxWb2NhYnVsYXJ5UmV2aXNpb24gLz4pO1xuwqAgwqAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG7CoCDCoCDCoCBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnVGVybWluZXInKSkudG9CZVRydXRoeSgpO1xuwqAgwqAgfSk7XG7CoCDCoCBmaXJlRXZlbnQucHJlc3Moc2NyZWVuLmdldEJ5VGV4dCgnVGVybWluZXInKSk7XG7CoCDCoCBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbsKgIMKgIMKgIGV4cGVjdChtb2NrTWFya1JldmlzaW9uQ29tcGxldGVkKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChtb2NrUXVlc3Rpb25zLCAxLCAxKTtcbsKgIMKgIMKgIGV4cGVjdChtb2NrR29CYWNrKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG7CoCDCoCB9KTtcbsKgIH0pO1xuXG7CoCB0ZXN0KCdoYW5kbGVHb0JhY2sgaXMgY2FsbGVkIHdoZW4gYmFjayBidXR0b24gaXMgcHJlc3NlZCBpbiBRdWl6U2NyZWVuJywgYXN5bmMgKCkgPT4ge1xuwqAgwqAgY29uc3QgbW9ja1F1ZXN0aW9ucyA9IFt7IGlkOiAncTEnLCB3b3JkOiAnV29yZCAxJywgY2hvaWNlczogWydBJywgJ0InLCAnQyddLCBjb3JyZWN0QW5zd2VyOiAnQScgfV07XG7CoCDCoCBcbsKgIMKgIHNldHVwTW9ja3MoXG7CoCDCoCDCoCB7XG7CoCDCoCDCoCDCoCByZXZpc2lvblF1ZXN0aW9uczogbW9ja1F1ZXN0aW9ucyxcbsKgIMKgIMKgIMKgIGlzTG9hZGluZzogZmFsc2UsXG7CoCDCoCDCoCDCoCBoYXNFbm91Z2hXb3JkczogdHJ1ZSxcbsKgIMKgIMKgIMKgIGNhbkdlbmVyYXRlUXVlc3Rpb25zOiB0cnVlXG7CoCDCoCDCoCB9LFxuwqAgwqAgwqAge1xuwqAgwqAgwqAgwqAgY3VycmVudFF1ZXN0aW9uOiBtb2NrUXVlc3Rpb25zWzBdLFxuwqAgwqAgwqAgwqAgY3VycmVudFF1ZXN0aW9uSW5kZXg6IDAsXG7CoCDCoCDCoCDCoCB0b3RhbFF1ZXN0aW9uczogbW9ja1F1ZXN0aW9ucy5sZW5ndGgsXG7CoCDCoCDCoCDCoCBzY29yZTogMCxcbsKgIMKgIMKgIMKgIGlzRmluaXNoZWQ6IGZhbHNlLFxuwqAgwqAgwqAgwqAgc2hvd1Jlc3VsdDogZmFsc2UsXG7CoCDCoCDCoCDCoCBoYW5kbGVBbnN3ZXI6IGplc3QuZm4oKSxcbsKgIMKgIMKgIMKgIGdvVG9OZXh0UXVlc3Rpb246IGplc3QuZm4oKSxcbsKgIMKgIMKgIMKgIGhhbmRsZVJlc3RhcnQ6IGplc3QuZm4oKSxcbsKgIMKgIMKgIH1cbsKgIMKgICk7XG5cbsKgIMKgIHJlbmRlcig8Vm9jYWJ1bGFyeVJldmlzaW9uIC8+KTtcbsKgIMKgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuwqAgwqAgwqAgZXhwZWN0KHNjcmVlbi5nZXRCeUxhYmVsVGV4dCgnUmV0b3VyJykpLnRvQmVUcnV0aHkoKTtcbsKgIMKgIH0pO1xuwqAgwqAgZmlyZUV2ZW50LnByZXNzKHNjcmVlbi5nZXRCeUxhYmVsVGV4dCgnUmV0b3VyJykpO1xuwqAgwqAgZXhwZWN0KG1vY2tHb0JhY2spLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbsKgIH0pO1xufSk7Il0sIm1hcHBpbmdzIjoiQUFTQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsdUNBQXVDLEVBQUU7RUFBQSxPQUFPO0lBQ3hEQyxVQUFVLEVBQUUsSUFBSTtJQUNoQkMsT0FBTyxFQUFFLFNBQVRBLFFBQU9BLENBQUE7TUFBQSxPQUFTO1FBQ2RDLHFCQUFxQixF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