af5fa8b960c4e490b1913255d8ebb08b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.storeData = exports.storageService = exports.resetStorage = exports.removeFromStorage = exports.removeData = exports.readFromStorage = exports.isStorageAvailable = exports.getStorageInfo = exports.getMultipleData = exports.getData = exports.clearAllData = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _timeConstants = require("./timeConstants.js");
var _timeUtils = require("./timeUtils.js");
var isStorageAvailable = exports.isStorageAvailable = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* () {
    try {
      var test = '__storage_test__';
      yield _asyncStorage.default.setItem(test, test);
      yield _asyncStorage.default.removeItem(test);
      return true;
    } catch (e) {
      console.warn('AsyncStorage not available:', e.message);
      return false;
    }
  });
  return function isStorageAvailable() {
    return _ref.apply(this, arguments);
  };
}();
var storeData = exports.storeData = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (key, value) {
    try {
      if (value === undefined || value === null) {
        yield _asyncStorage.default.removeItem(key);
        return true;
      }
      var jsonValue = JSON.stringify(value);
      yield _asyncStorage.default.setItem(key, jsonValue);
      return true;
    } catch (error) {
      console.error('Error storing data:', error);
      return false;
    }
  });
  return function storeData(_x, _x2) {
    return _ref2.apply(this, arguments);
  };
}();
var getData = exports.getData = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (key) {
    try {
      var jsonValue = yield _asyncStorage.default.getItem(key);
      return jsonValue != null ? JSON.parse(jsonValue) : null;
    } catch (error) {
      console.error('Error getting data:', error);
      return null;
    }
  });
  return function getData(_x3) {
    return _ref3.apply(this, arguments);
  };
}();
var removeData = exports.removeData = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (key) {
    try {
      yield _asyncStorage.default.removeItem(key);
      return true;
    } catch (error) {
      console.error('Error removing data:', error);
      return false;
    }
  });
  return function removeData(_x4) {
    return _ref4.apply(this, arguments);
  };
}();
var getMultipleData = exports.getMultipleData = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (keys) {
    try {
      var items = yield _asyncStorage.default.multiGet(keys);
      return items.reduce(function (result, _ref6) {
        var _ref7 = (0, _slicedToArray2.default)(_ref6, 2),
          key = _ref7[0],
          value = _ref7[1];
        result[key] = value != null ? JSON.parse(value) : null;
        return result;
      }, {});
    } catch (error) {
      console.error('Error getting multiple data:', error);
      return {};
    }
  });
  return function getMultipleData(_x5) {
    return _ref5.apply(this, arguments);
  };
}();
var clearAllData = exports.clearAllData = function () {
  var _ref8 = (0, _asyncToGenerator2.default)(function* () {
    try {
      yield _asyncStorage.default.clear();
      return true;
    } catch (error) {
      console.error('Error clearing all data:', error);
      return false;
    }
  });
  return function clearAllData() {
    return _ref8.apply(this, arguments);
  };
}();
var validateStorageStructure = function validateStorageStructure(data) {
  if (!data || typeof data !== 'object') return false;
  var hasVersion = typeof data.version === 'string';
  var hasData = typeof data.data === 'object' && data.data !== null;
  var hasTimestamp = typeof data.lastModified === 'number';
  return hasVersion && hasData && hasTimestamp;
};
var migrateOldData = function migrateOldData(oldData) {
  if (validateStorageStructure(oldData)) {
    return oldData;
  }
  var migratedData = Object.assign({}, _timeConstants.DEFAULT_STATS);
  if (oldData && typeof oldData === 'object') {
    if (oldData.vocabulary_classic || oldData.vocabulary_fast) {
      var classicTime = oldData.vocabulary_classic || 0;
      var fastTime = oldData.vocabulary_fast || 0;
      migratedData.vocabulary = classicTime + fastTime;
    }
    Object.keys(_timeConstants.DEFAULT_STATS).forEach(function (exerciseType) {
      if (exerciseType !== 'vocabulary' && oldData[exerciseType]) {
        migratedData[exerciseType] = oldData[exerciseType];
      }
    });
  }
  return {
    version: _timeConstants.STORAGE_CONFIG.VERSION,
    data: (0, _timeUtils.sanitizeTimeStats)(migratedData),
    lastModified: Date.now()
  };
};
var writeToStorage = function () {
  var _ref9 = (0, _asyncToGenerator2.default)(function* (key, data) {
    yield _asyncStorage.default.setItem(key, JSON.stringify(data));
  });
  return function writeToStorage(_x6, _x7) {
    return _ref9.apply(this, arguments);
  };
}();
var _readFromStorage = exports.readFromStorage = function () {
  var _ref0 = (0, _asyncToGenerator2.default)(function* () {
    var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _timeConstants.STORAGE_CONFIG.KEY;
    var available = yield isStorageAvailable();
    if (!available) {
      return null;
    }
    try {
      var rawData = yield _asyncStorage.default.getItem(key);
      if (!rawData) {
        return null;
      }
      var parsedData = JSON.parse(rawData);
      var migratedData = migrateOldData(parsedData);
      if (!validateStorageStructure(parsedData)) {
        yield writeToStorage(key, migratedData.data);
      }
      return migratedData;
    } catch (error) {
      console.error(`Error reading from storage (${key}):`, error);
      if (key !== _timeConstants.STORAGE_CONFIG.BACKUP_KEY) {
        var backup = yield _readFromStorage(_timeConstants.STORAGE_CONFIG.BACKUP_KEY);
        if (backup) {
          console.info('Restored from backup');
          return backup;
        }
      }
      return null;
    }
  });
  return function readFromStorage() {
    return _ref0.apply(this, arguments);
  };
}();
var removeFromStorage = exports.removeFromStorage = function () {
  var _ref1 = (0, _asyncToGenerator2.default)(function* () {
    var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _timeConstants.STORAGE_CONFIG.KEY;
    var available = yield isStorageAvailable();
    if (!available) {
      return false;
    }
    try {
      yield _asyncStorage.default.removeItem(key);
      return true;
    } catch (error) {
      console.error(`Error removing from storage (${key}):`, error);
      return false;
    }
  });
  return function removeFromStorage() {
    return _ref1.apply(this, arguments);
  };
}();
var resetStorage = exports.resetStorage = function resetStorage() {
  return writeToStorage(_timeConstants.STORAGE_CONFIG.KEY, _timeConstants.DEFAULT_STATS);
};
var getStorageInfo = exports.getStorageInfo = function () {
  var _ref10 = (0, _asyncToGenerator2.default)(function* () {
    var available = yield isStorageAvailable();
    if (!available) {
      return {
        available: false
      };
    }
    try {
      var data = yield _readFromStorage();
      var backupData = yield _asyncStorage.default.getItem(_timeConstants.STORAGE_CONFIG.BACKUP_KEY);
      var hasBackup = Boolean(backupData);
      var mainData = yield _asyncStorage.default.getItem(_timeConstants.STORAGE_CONFIG.KEY);
      return {
        available: true,
        hasData: Boolean(data),
        hasBackup: hasBackup,
        version: (data == null ? void 0 : data.version) || 'unknown',
        lastModified: getLastModified(data),
        dataSize: (mainData == null ? void 0 : mainData.length) || 0
      };
    } catch (error) {
      return {
        available: true,
        error: error.message
      };
    }
  });
  return function getStorageInfo() {
    return _ref10.apply(this, arguments);
  };
}();
var storageService = exports.storageService = {
  keys: {
    USER_PROGRESS: 'userProgress',
    USER_SETTINGS: 'userSettings',
    LAST_ACTIVITY: 'lastActivity',
    CURRENT_LEVEL: 'currentLevel',
    STREAK_DATA: 'streakData',
    COMPLETED_EXERCISES: 'completedExercises'
  },
  saveProgress: function saveProgress(progressData) {
    return storeData(storageService.keys.USER_PROGRESS, progressData);
  },
  getProgress: function getProgress() {
    return getData(storageService.keys.USER_PROGRESS);
  },
  saveSettings: function saveSettings(settings) {
    return storeData(storageService.keys.USER_SETTINGS, settings);
  },
  getSettings: function getSettings() {
    return getData(storageService.keys.USER_SETTINGS);
  },
  markExerciseCompleted: function () {
    var _markExerciseCompleted = (0, _asyncToGenerator2.default)(function* (exerciseId, level, score) {
      try {
        var completedExercises = (yield getData(storageService.keys.COMPLETED_EXERCISES)) || {};
        completedExercises[exerciseId] = {
          level: level,
          score: score,
          completedAt: new Date().toISOString()
        };
        yield storeData(storageService.keys.COMPLETED_EXERCISES, completedExercises);
        return true;
      } catch (error) {
        console.error('Error marking exercise completed:', error);
        return false;
      }
    });
    function markExerciseCompleted(_x8, _x9, _x0) {
      return _markExerciseCompleted.apply(this, arguments);
    }
    return markExerciseCompleted;
  }(),
  isExerciseCompleted: function () {
    var _isExerciseCompleted = (0, _asyncToGenerator2.default)(function* (exerciseId) {
      var completedExercises = (yield getData(storageService.keys.COMPLETED_EXERCISES)) || {};
      return Boolean(completedExercises[exerciseId]);
    });
    function isExerciseCompleted(_x1) {
      return _isExerciseCompleted.apply(this, arguments);
    }
    return isExerciseCompleted;
  }(),
  updateStreak: function () {
    var _updateStreak = (0, _asyncToGenerator2.default)(function* () {
      try {
        var streakData = (yield getData(storageService.keys.STREAK_DATA)) || {
          currentStreak: 0,
          lastLoginDate: null,
          maxStreak: 0
        };
        var now = new Date();
        var today = new Date(now.getFullYear(), now.getMonth(), now.getDate()).getTime();
        if (!streakData.lastLoginDate) {
          streakData.currentStreak = 1;
          streakData.maxStreak = 1;
          streakData.lastLoginDate = today;
        } else {
          var lastLogin = new Date(streakData.lastLoginDate).getTime();
          var oneDayMs = 24 * 60 * 60 * 1000;
          if (today - lastLogin === oneDayMs) {
            streakData.currentStreak += 1;
            streakData.maxStreak = Math.max(streakData.maxStreak, streakData.currentStreak);
            streakData.lastLoginDate = today;
          } else if (today === lastLogin) {} else {
            streakData.currentStreak = 1;
            streakData.lastLoginDate = today;
          }
        }
        yield storeData(storageService.keys.STREAK_DATA, streakData);
        return streakData;
      } catch (error) {
        console.error('Error updating streak:', error);
        return null;
      }
    });
    function updateStreak() {
      return _updateStreak.apply(this, arguments);
    }
    return updateStreak;
  }(),
  getStreak: function getStreak() {
    return getData(storageService.keys.STREAK_DATA) || {
      currentStreak: 0,
      lastLoginDate: null,
      maxStreak: 0
    };
  },
  resetAllData: function resetAllData() {
    return clearAllData();
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYXN5bmNTdG9yYWdlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfdGltZUNvbnN0YW50cyIsIl90aW1lVXRpbHMiLCJpc1N0b3JhZ2VBdmFpbGFibGUiLCJleHBvcnRzIiwiX3JlZiIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImRlZmF1bHQiLCJ0ZXN0IiwiQXN5bmNTdG9yYWdlIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJlIiwiY29uc29sZSIsIndhcm4iLCJtZXNzYWdlIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJzdG9yZURhdGEiLCJfcmVmMiIsImtleSIsInZhbHVlIiwidW5kZWZpbmVkIiwianNvblZhbHVlIiwiSlNPTiIsInN0cmluZ2lmeSIsImVycm9yIiwiX3giLCJfeDIiLCJnZXREYXRhIiwiX3JlZjMiLCJnZXRJdGVtIiwicGFyc2UiLCJfeDMiLCJyZW1vdmVEYXRhIiwiX3JlZjQiLCJfeDQiLCJnZXRNdWx0aXBsZURhdGEiLCJfcmVmNSIsImtleXMiLCJpdGVtcyIsIm11bHRpR2V0IiwicmVkdWNlIiwicmVzdWx0IiwiX3JlZjYiLCJfcmVmNyIsIl9zbGljZWRUb0FycmF5MiIsIl94NSIsImNsZWFyQWxsRGF0YSIsIl9yZWY4IiwiY2xlYXIiLCJ2YWxpZGF0ZVN0b3JhZ2VTdHJ1Y3R1cmUiLCJkYXRhIiwiaGFzVmVyc2lvbiIsInZlcnNpb24iLCJoYXNEYXRhIiwiaGFzVGltZXN0YW1wIiwibGFzdE1vZGlmaWVkIiwibWlncmF0ZU9sZERhdGEiLCJvbGREYXRhIiwibWlncmF0ZWREYXRhIiwiT2JqZWN0IiwiYXNzaWduIiwiREVGQVVMVF9TVEFUUyIsInZvY2FidWxhcnlfY2xhc3NpYyIsInZvY2FidWxhcnlfZmFzdCIsImNsYXNzaWNUaW1lIiwiZmFzdFRpbWUiLCJ2b2NhYnVsYXJ5IiwiZm9yRWFjaCIsImV4ZXJjaXNlVHlwZSIsIlNUT1JBR0VfQ09ORklHIiwiVkVSU0lPTiIsInNhbml0aXplVGltZVN0YXRzIiwiRGF0ZSIsIm5vdyIsIndyaXRlVG9TdG9yYWdlIiwiX3JlZjkiLCJfeDYiLCJfeDciLCJyZWFkRnJvbVN0b3JhZ2UiLCJfcmVmMCIsImxlbmd0aCIsIktFWSIsImF2YWlsYWJsZSIsInJhd0RhdGEiLCJwYXJzZWREYXRhIiwiQkFDS1VQX0tFWSIsImJhY2t1cCIsImluZm8iLCJyZW1vdmVGcm9tU3RvcmFnZSIsIl9yZWYxIiwicmVzZXRTdG9yYWdlIiwiZ2V0U3RvcmFnZUluZm8iLCJfcmVmMTAiLCJiYWNrdXBEYXRhIiwiaGFzQmFja3VwIiwiQm9vbGVhbiIsIm1haW5EYXRhIiwiZ2V0TGFzdE1vZGlmaWVkIiwiZGF0YVNpemUiLCJzdG9yYWdlU2VydmljZSIsIlVTRVJfUFJPR1JFU1MiLCJVU0VSX1NFVFRJTkdTIiwiTEFTVF9BQ1RJVklUWSIsIkNVUlJFTlRfTEVWRUwiLCJTVFJFQUtfREFUQSIsIkNPTVBMRVRFRF9FWEVSQ0lTRVMiLCJzYXZlUHJvZ3Jlc3MiLCJwcm9ncmVzc0RhdGEiLCJnZXRQcm9ncmVzcyIsInNhdmVTZXR0aW5ncyIsInNldHRpbmdzIiwiZ2V0U2V0dGluZ3MiLCJtYXJrRXhlcmNpc2VDb21wbGV0ZWQiLCJfbWFya0V4ZXJjaXNlQ29tcGxldGVkIiwiZXhlcmNpc2VJZCIsImxldmVsIiwic2NvcmUiLCJjb21wbGV0ZWRFeGVyY2lzZXMiLCJjb21wbGV0ZWRBdCIsInRvSVNPU3RyaW5nIiwiX3g4IiwiX3g5IiwiX3gwIiwiaXNFeGVyY2lzZUNvbXBsZXRlZCIsIl9pc0V4ZXJjaXNlQ29tcGxldGVkIiwiX3gxIiwidXBkYXRlU3RyZWFrIiwiX3VwZGF0ZVN0cmVhayIsInN0cmVha0RhdGEiLCJjdXJyZW50U3RyZWFrIiwibGFzdExvZ2luRGF0ZSIsIm1heFN0cmVhayIsInRvZGF5IiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXRUaW1lIiwibGFzdExvZ2luIiwib25lRGF5TXMiLCJNYXRoIiwibWF4IiwiZ2V0U3RyZWFrIiwicmVzZXRBbGxEYXRhIl0sInNvdXJjZXMiOlsic3RvcmFnZVV0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy91dGlscy9zdG9yYWdlVXRpbHMuanNcclxuLyoqXHJcbiAqIFV0aWxpdGFpcmVzIHVuaWZpw6lzIHBvdXIgbGEgZ2VzdGlvbiBkdSBzdG9ja2FnZSBBc3luY1N0b3JhZ2VcclxuICogQ29tYmluZSBsb2dpcXVlIG3DqXRpZXIgKyB1dGlsaXRhaXJlcyBnw6luw6lyaXF1ZXNcclxuICovXHJcblxyXG5pbXBvcnQgQXN5bmNTdG9yYWdlIGZyb20gJ0ByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlJztcclxuaW1wb3J0IHsgU1RPUkFHRV9DT05GSUcsIERFRkFVTFRfU1RBVFMgfSBmcm9tICcuL3RpbWVDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgeyBzYW5pdGl6ZVRpbWVTdGF0cyB9IGZyb20gJy4vdGltZVV0aWxzLmpzJztcclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT0gVVRJTElUQUlSRVMgR8OJTsOJUklRVUVTID09PT09PT09PT09PT09PT09PT1cclxuXHJcbi8qKlxyXG4gKiBWw6lyaWZpZSBzaSBBc3luY1N0b3JhZ2UgZXN0IGRpc3BvbmlibGVcclxuICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59IFRydWUgc2kgQXN5bmNTdG9yYWdlIGVzdCBkaXNwb25pYmxlXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgaXNTdG9yYWdlQXZhaWxhYmxlID0gYXN5bmMgKCkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCB0ZXN0ID0gJ19fc3RvcmFnZV90ZXN0X18nO1xyXG4gICAgYXdhaXQgQXN5bmNTdG9yYWdlLnNldEl0ZW0odGVzdCwgdGVzdCk7XHJcbiAgICBhd2FpdCBBc3luY1N0b3JhZ2UucmVtb3ZlSXRlbSh0ZXN0KTtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIGNvbnNvbGUud2FybignQXN5bmNTdG9yYWdlIG5vdCBhdmFpbGFibGU6JywgZS5tZXNzYWdlKTtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogU3RvY2tlciBkZXMgZG9ubsOpZXMgZ8OpbsOpcmlxdWVzXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBDbMOpIGRlIHN0b2NrYWdlXHJcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZSAtIFZhbGV1ciDDoCBzdG9ja2VyIChzZXJhIGNvbnZlcnRpZSBlbiBKU09OKVxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gLSB0cnVlIHNpIHN1Y2PDqHMsIGZhbHNlIHNpIGVycmV1clxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHN0b3JlRGF0YSA9IGFzeW5jIChrZXksIHZhbHVlKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIFNpIGxhIHZhbGV1ciBlc3QgbnVsbC91bmRlZmluZWQsIG9uIHN1cHByaW1lIGxhIGNsw6kgcG91ciDDqXZpdGVyIGwnZXJyZXVyIEFzeW5jU3RvcmFnZVxyXG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgYXdhaXQgQXN5bmNTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QganNvblZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xyXG4gICAgYXdhaXQgQXN5bmNTdG9yYWdlLnNldEl0ZW0oa2V5LCBqc29uVmFsdWUpO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHN0b3JpbmcgZGF0YTonLCBlcnJvcik7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIFLDqWN1cMOpcmVyIGRlcyBkb25uw6llcyBnw6luw6lyaXF1ZXNcclxuICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIENsw6kgZGUgc3RvY2thZ2VcclxuICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gLSBEb25uw6llcyByw6ljdXDDqXLDqWVzIG91IG51bGwgc2kgbm9uIHRyb3V2w6kvZXJyZXVyXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZ2V0RGF0YSA9IGFzeW5jIChrZXkpID0+IHtcclxuICB0cnkge1xyXG4gICAgY29uc3QganNvblZhbHVlID0gYXdhaXQgQXN5bmNTdG9yYWdlLmdldEl0ZW0oa2V5KTtcclxuICAgIHJldHVybiBqc29uVmFsdWUgIT0gbnVsbCA/IEpTT04ucGFyc2UoanNvblZhbHVlKSA6IG51bGw7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdldHRpbmcgZGF0YTonLCBlcnJvcik7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogU3VwcHJpbWVyIGRlcyBkb25uw6llc1xyXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gQ2zDqSBkZSBzdG9ja2FnZVxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gLSB0cnVlIHNpIHN1Y2PDqHMsIGZhbHNlIHNpIGVycmV1clxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHJlbW92ZURhdGEgPSBhc3luYyAoa2V5KSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGF3YWl0IEFzeW5jU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVtb3ZpbmcgZGF0YTonLCBlcnJvcik7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIFLDqWN1cMOpcmVyIHBsdXNpZXVycyBkb25uw6llcyBkZXB1aXMgQXN5bmNTdG9yYWdlXHJcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0ga2V5cyAtIFRhYmxlYXUgZGUgY2zDqXNcclxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gLSBPYmpldCBhdmVjIGxlcyBjbMOpcyBldCBsZXMgdmFsZXVyc1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGdldE11bHRpcGxlRGF0YSA9IGFzeW5jIChrZXlzKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGl0ZW1zID0gYXdhaXQgQXN5bmNTdG9yYWdlLm11bHRpR2V0KGtleXMpO1xyXG4gICAgcmV0dXJuIGl0ZW1zLnJlZHVjZSgocmVzdWx0LCBba2V5LCB2YWx1ZV0pID0+IHtcclxuICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZSAhPSBudWxsID8gSlNPTi5wYXJzZSh2YWx1ZSkgOiBudWxsO1xyXG4gICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfSwge30pO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZXR0aW5nIG11bHRpcGxlIGRhdGE6JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuIHt9O1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBFZmZhY2VyIHRvdXRlcyBsZXMgZG9ubsOpZXMgZGUgbCdhcHBsaWNhdGlvblxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gLSB0cnVlIHNpIHN1Y2PDqHMsIGZhbHNlIHNpIGVycmV1clxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGNsZWFyQWxsRGF0YSA9IGFzeW5jICgpID0+IHtcclxuICB0cnkge1xyXG4gICAgYXdhaXQgQXN5bmNTdG9yYWdlLmNsZWFyKCk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgY2xlYXJpbmcgYWxsIGRhdGE6JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxufTtcclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT0gTE9HSVFVRSBNw4lUSUVSIFNQw4lDSUZJUVVFID09PT09PT09PT09PT09PT09PT1cclxuXHJcbi8qKlxyXG4gKiBWYWxpZGUgbGEgc3RydWN0dXJlIGRlcyBkb25uw6llcyBzdG9ja8OpZXNcclxuICovXHJcbmNvbnN0IHZhbGlkYXRlU3RvcmFnZVN0cnVjdHVyZSA9IChkYXRhKSA9PiB7XHJcbiAgaWYgKCFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0JykgcmV0dXJuIGZhbHNlO1xyXG4gIFxyXG4gIGNvbnN0IGhhc1ZlcnNpb24gPSB0eXBlb2YgZGF0YS52ZXJzaW9uID09PSAnc3RyaW5nJztcclxuICBjb25zdCBoYXNEYXRhID0gdHlwZW9mIGRhdGEuZGF0YSA9PT0gJ29iamVjdCcgJiYgZGF0YS5kYXRhICE9PSBudWxsO1xyXG4gIGNvbnN0IGhhc1RpbWVzdGFtcCA9IHR5cGVvZiBkYXRhLmxhc3RNb2RpZmllZCA9PT0gJ251bWJlcic7XHJcbiAgXHJcbiAgcmV0dXJuIGhhc1ZlcnNpb24gJiYgaGFzRGF0YSAmJiBoYXNUaW1lc3RhbXA7XHJcbn07XHJcblxyXG4vKipcclxuICogTWlncmUgbGVzIGFuY2llbm5lcyBkb25uw6llcyB2ZXJzIGxlIG5vdXZlYXUgZm9ybWF0XHJcbiAqL1xyXG5jb25zdCBtaWdyYXRlT2xkRGF0YSA9IChvbGREYXRhKSA9PiB7XHJcbiAgaWYgKHZhbGlkYXRlU3RvcmFnZVN0cnVjdHVyZShvbGREYXRhKSkge1xyXG4gICAgcmV0dXJuIG9sZERhdGE7XHJcbiAgfVxyXG4gIFxyXG4gIGNvbnN0IG1pZ3JhdGVkRGF0YSA9IHsgLi4uREVGQVVMVF9TVEFUUyB9O1xyXG4gIFxyXG4gIGlmIChvbGREYXRhICYmIHR5cGVvZiBvbGREYXRhID09PSAnb2JqZWN0Jykge1xyXG4gICAgaWYgKG9sZERhdGEudm9jYWJ1bGFyeV9jbGFzc2ljIHx8IG9sZERhdGEudm9jYWJ1bGFyeV9mYXN0KSB7XHJcbiAgICAgIGNvbnN0IGNsYXNzaWNUaW1lID0gb2xkRGF0YS52b2NhYnVsYXJ5X2NsYXNzaWMgfHwgMDtcclxuICAgICAgY29uc3QgZmFzdFRpbWUgPSBvbGREYXRhLnZvY2FidWxhcnlfZmFzdCB8fCAwO1xyXG4gICAgICBtaWdyYXRlZERhdGEudm9jYWJ1bGFyeSA9IGNsYXNzaWNUaW1lICsgZmFzdFRpbWU7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIE9iamVjdC5rZXlzKERFRkFVTFRfU1RBVFMpLmZvckVhY2goZXhlcmNpc2VUeXBlID0+IHtcclxuICAgICAgaWYgKGV4ZXJjaXNlVHlwZSAhPT0gJ3ZvY2FidWxhcnknICYmIG9sZERhdGFbZXhlcmNpc2VUeXBlXSkge1xyXG4gICAgICAgIG1pZ3JhdGVkRGF0YVtleGVyY2lzZVR5cGVdID0gb2xkRGF0YVtleGVyY2lzZVR5cGVdO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIHtcclxuICAgIHZlcnNpb246IFNUT1JBR0VfQ09ORklHLlZFUlNJT04sXHJcbiAgICBkYXRhOiBzYW5pdGl6ZVRpbWVTdGF0cyhtaWdyYXRlZERhdGEpLFxyXG4gICAgbGFzdE1vZGlmaWVkOiBEYXRlLm5vdygpXHJcbiAgfTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiDDiWNyaXQgbGVzIGRvbm7DqWVzIGF2ZWMgdmFsaWRhdGlvblxyXG4gKi9cclxuY29uc3Qgd3JpdGVUb1N0b3JhZ2UgPSBhc3luYyAoa2V5LCBkYXRhKSA9PiB7XHJcbiAgYXdhaXQgQXN5bmNTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XHJcbn07XHJcblxyXG4vKipcclxuICogTGl0IGxlcyBkb25uw6llcyBhdmVjIHZhbGlkYXRpb24gZXQgbWlncmF0aW9uXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgcmVhZEZyb21TdG9yYWdlID0gYXN5bmMgKGtleSA9IFNUT1JBR0VfQ09ORklHLktFWSkgPT4ge1xyXG4gIGNvbnN0IGF2YWlsYWJsZSA9IGF3YWl0IGlzU3RvcmFnZUF2YWlsYWJsZSgpO1xyXG4gIGlmICghYXZhaWxhYmxlKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbiAgXHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHJhd0RhdGEgPSBhd2FpdCBBc3luY1N0b3JhZ2UuZ2V0SXRlbShrZXkpO1xyXG4gICAgaWYgKCFyYXdEYXRhKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjb25zdCBwYXJzZWREYXRhID0gSlNPTi5wYXJzZShyYXdEYXRhKTtcclxuICAgIGNvbnN0IG1pZ3JhdGVkRGF0YSA9IG1pZ3JhdGVPbGREYXRhKHBhcnNlZERhdGEpO1xyXG4gICAgXHJcbiAgICBpZiAoIXZhbGlkYXRlU3RvcmFnZVN0cnVjdHVyZShwYXJzZWREYXRhKSkge1xyXG4gICAgICBhd2FpdCB3cml0ZVRvU3RvcmFnZShrZXksIG1pZ3JhdGVkRGF0YS5kYXRhKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIG1pZ3JhdGVkRGF0YTtcclxuICAgIFxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKGBFcnJvciByZWFkaW5nIGZyb20gc3RvcmFnZSAoJHtrZXl9KTpgLCBlcnJvcik7XHJcbiAgICBcclxuICAgIGlmIChrZXkgIT09IFNUT1JBR0VfQ09ORklHLkJBQ0tVUF9LRVkpIHtcclxuICAgICAgY29uc3QgYmFja3VwID0gYXdhaXQgcmVhZEZyb21TdG9yYWdlKFNUT1JBR0VfQ09ORklHLkJBQ0tVUF9LRVkpO1xyXG4gICAgICBpZiAoYmFja3VwKSB7XHJcbiAgICAgICAgY29uc29sZS5pbmZvKCdSZXN0b3JlZCBmcm9tIGJhY2t1cCcpO1xyXG4gICAgICAgIHJldHVybiBiYWNrdXA7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIFN1cHByaW1lIGxlcyBkb25uw6llcyBkdSBBc3luY1N0b3JhZ2VcclxuICovXHJcbmV4cG9ydCBjb25zdCByZW1vdmVGcm9tU3RvcmFnZSA9IGFzeW5jIChrZXkgPSBTVE9SQUdFX0NPTkZJRy5LRVkpID0+IHtcclxuICBjb25zdCBhdmFpbGFibGUgPSBhd2FpdCBpc1N0b3JhZ2VBdmFpbGFibGUoKTtcclxuICBpZiAoIWF2YWlsYWJsZSkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuICBcclxuICB0cnkge1xyXG4gICAgYXdhaXQgQXN5bmNTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKGBFcnJvciByZW1vdmluZyBmcm9tIHN0b3JhZ2UgKCR7a2V5fSk6YCwgZXJyb3IpO1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZW1ldCBsZXMgZG9ubsOpZXMgw6AgesOpcm9cclxuICovXHJcbmV4cG9ydCBjb25zdCByZXNldFN0b3JhZ2UgPSAoKSA9PiB7XHJcbiAgcmV0dXJuIHdyaXRlVG9TdG9yYWdlKFNUT1JBR0VfQ09ORklHLktFWSwgREVGQVVMVF9TVEFUUyk7XHJcbn07XHJcblxyXG4vKipcclxuICogT2J0aWVudCBsZXMgc3RhdGlzdGlxdWVzIGRlIHN0b2NrYWdlIHBvdXIgZGVidWdcclxuICovXHJcbmV4cG9ydCBjb25zdCBnZXRTdG9yYWdlSW5mbyA9IGFzeW5jICgpID0+IHtcclxuICBjb25zdCBhdmFpbGFibGUgPSBhd2FpdCBpc1N0b3JhZ2VBdmFpbGFibGUoKTtcclxuICBpZiAoIWF2YWlsYWJsZSkge1xyXG4gICAgcmV0dXJuIHsgYXZhaWxhYmxlOiBmYWxzZSB9O1xyXG4gIH1cclxuICBcclxuICB0cnkge1xyXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlYWRGcm9tU3RvcmFnZSgpO1xyXG4gICAgY29uc3QgYmFja3VwRGF0YSA9IGF3YWl0IEFzeW5jU3RvcmFnZS5nZXRJdGVtKFNUT1JBR0VfQ09ORklHLkJBQ0tVUF9LRVkpO1xyXG4gICAgY29uc3QgaGFzQmFja3VwID0gQm9vbGVhbihiYWNrdXBEYXRhKTtcclxuICAgIGNvbnN0IG1haW5EYXRhID0gYXdhaXQgQXN5bmNTdG9yYWdlLmdldEl0ZW0oU1RPUkFHRV9DT05GSUcuS0VZKTtcclxuICAgIFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgYXZhaWxhYmxlOiB0cnVlLFxyXG4gICAgICBoYXNEYXRhOiBCb29sZWFuKGRhdGEpLFxyXG4gICAgICBoYXNCYWNrdXAsXHJcbiAgICAgIHZlcnNpb246IGRhdGE/LnZlcnNpb24gfHwgJ3Vua25vd24nLFxyXG4gICAgICBsYXN0TW9kaWZpZWQ6IGdldExhc3RNb2RpZmllZChkYXRhKSxcclxuICAgICAgZGF0YVNpemU6IG1haW5EYXRhPy5sZW5ndGggfHwgMFxyXG4gICAgfTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgYXZhaWxhYmxlOiB0cnVlLFxyXG4gICAgICBlcnJvcjogZXJyb3IubWVzc2FnZVxyXG4gICAgfTtcclxuICB9XHJcbn07XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09IFNFUlZJQ0UgTcOJVElFUiBQT1VSIEwnQVBQID09PT09PT09PT09PT09PT09PT1cclxuXHJcbi8qKlxyXG4gKiBTZXJ2aWNlIGRlIHN0b2NrYWdlIHNww6ljaWZpcXVlIHBvdXIgbCdhcHBsaWNhdGlvblxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHN0b3JhZ2VTZXJ2aWNlID0ge1xyXG4gIC8vIENsw6lzIGRlIHN0b2NrYWdlXHJcbiAga2V5czoge1xyXG4gICAgVVNFUl9QUk9HUkVTUzogJ3VzZXJQcm9ncmVzcycsXHJcbiAgICBVU0VSX1NFVFRJTkdTOiAndXNlclNldHRpbmdzJyxcclxuICAgIExBU1RfQUNUSVZJVFk6ICdsYXN0QWN0aXZpdHknLFxyXG4gICAgQ1VSUkVOVF9MRVZFTDogJ2N1cnJlbnRMZXZlbCcsXHJcbiAgICBTVFJFQUtfREFUQTogJ3N0cmVha0RhdGEnLFxyXG4gICAgQ09NUExFVEVEX0VYRVJDSVNFUzogJ2NvbXBsZXRlZEV4ZXJjaXNlcycsXHJcbiAgfSxcclxuXHJcbiAgLy8gU2F1dmVnYXJkZXIgbGEgcHJvZ3Jlc3Npb25cclxuICBzYXZlUHJvZ3Jlc3M6IChwcm9ncmVzc0RhdGEpID0+IHtcclxuICAgIHJldHVybiBzdG9yZURhdGEoc3RvcmFnZVNlcnZpY2Uua2V5cy5VU0VSX1BST0dSRVNTLCBwcm9ncmVzc0RhdGEpO1xyXG4gIH0sXHJcblxyXG4gIC8vIFLDqWN1cMOpcmVyIGxhIHByb2dyZXNzaW9uXHJcbiAgZ2V0UHJvZ3Jlc3M6ICgpID0+IHtcclxuICAgIHJldHVybiBnZXREYXRhKHN0b3JhZ2VTZXJ2aWNlLmtleXMuVVNFUl9QUk9HUkVTUyk7XHJcbiAgfSxcclxuXHJcbiAgLy8gU2F1dmVnYXJkZXIgbGVzIHBhcmFtw6h0cmVzXHJcbiAgc2F2ZVNldHRpbmdzOiAoc2V0dGluZ3MpID0+IHtcclxuICAgIHJldHVybiBzdG9yZURhdGEoc3RvcmFnZVNlcnZpY2Uua2V5cy5VU0VSX1NFVFRJTkdTLCBzZXR0aW5ncyk7XHJcbiAgfSxcclxuXHJcbiAgLy8gUsOpY3Vww6lyZXIgbGVzIHBhcmFtw6h0cmVzXHJcbiAgZ2V0U2V0dGluZ3M6ICgpID0+IHtcclxuICAgIHJldHVybiBnZXREYXRhKHN0b3JhZ2VTZXJ2aWNlLmtleXMuVVNFUl9TRVRUSU5HUyk7XHJcbiAgfSxcclxuXHJcbiAgLy8gTWFycXVlciB1biBleGVyY2ljZSBjb21tZSBjb21wbMOpdMOpXHJcbiAgbWFya0V4ZXJjaXNlQ29tcGxldGVkOiBhc3luYyAoZXhlcmNpc2VJZCwgbGV2ZWwsIHNjb3JlKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBjb21wbGV0ZWRFeGVyY2lzZXMgPSBhd2FpdCBnZXREYXRhKHN0b3JhZ2VTZXJ2aWNlLmtleXMuQ09NUExFVEVEX0VYRVJDSVNFUykgfHwge307XHJcblxyXG4gICAgICBjb21wbGV0ZWRFeGVyY2lzZXNbZXhlcmNpc2VJZF0gPSB7XHJcbiAgICAgICAgbGV2ZWwsXHJcbiAgICAgICAgc2NvcmUsXHJcbiAgICAgICAgY29tcGxldGVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGF3YWl0IHN0b3JlRGF0YShzdG9yYWdlU2VydmljZS5rZXlzLkNPTVBMRVRFRF9FWEVSQ0lTRVMsIGNvbXBsZXRlZEV4ZXJjaXNlcyk7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgbWFya2luZyBleGVyY2lzZSBjb21wbGV0ZWQ6JywgZXJyb3IpO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgLy8gVsOpcmlmaWVyIHNpIHVuIGV4ZXJjaWNlIGEgw6l0w6kgY29tcGzDqXTDqVxyXG4gIGlzRXhlcmNpc2VDb21wbGV0ZWQ6IGFzeW5jIChleGVyY2lzZUlkKSA9PiB7XHJcbiAgICBjb25zdCBjb21wbGV0ZWRFeGVyY2lzZXMgPSBhd2FpdCBnZXREYXRhKHN0b3JhZ2VTZXJ2aWNlLmtleXMuQ09NUExFVEVEX0VYRVJDSVNFUykgfHwge307XHJcbiAgICByZXR1cm4gQm9vbGVhbihjb21wbGV0ZWRFeGVyY2lzZXNbZXhlcmNpc2VJZF0pO1xyXG4gIH0sXHJcblxyXG4gIC8vIE1ldHRyZSDDoCBqb3VyIGxhIHN0cmVha1xyXG4gIHVwZGF0ZVN0cmVhazogYXN5bmMgKCkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3Qgc3RyZWFrRGF0YSA9IGF3YWl0IGdldERhdGEoc3RvcmFnZVNlcnZpY2Uua2V5cy5TVFJFQUtfREFUQSkgfHwge1xyXG4gICAgICAgIGN1cnJlbnRTdHJlYWs6IDAsXHJcbiAgICAgICAgbGFzdExvZ2luRGF0ZTogbnVsbCxcclxuICAgICAgICBtYXhTdHJlYWs6IDAsXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKG5vdy5nZXRGdWxsWWVhcigpLCBub3cuZ2V0TW9udGgoKSwgbm93LmdldERhdGUoKSkuZ2V0VGltZSgpO1xyXG5cclxuICAgICAgaWYgKCFzdHJlYWtEYXRhLmxhc3RMb2dpbkRhdGUpIHtcclxuICAgICAgICBzdHJlYWtEYXRhLmN1cnJlbnRTdHJlYWsgPSAxO1xyXG4gICAgICAgIHN0cmVha0RhdGEubWF4U3RyZWFrID0gMTtcclxuICAgICAgICBzdHJlYWtEYXRhLmxhc3RMb2dpbkRhdGUgPSB0b2RheTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zdCBsYXN0TG9naW4gPSBuZXcgRGF0ZShzdHJlYWtEYXRhLmxhc3RMb2dpbkRhdGUpLmdldFRpbWUoKTtcclxuICAgICAgICBjb25zdCBvbmVEYXlNcyA9IDI0ICogNjAgKiA2MCAqIDEwMDA7XHJcblxyXG4gICAgICAgIGlmICh0b2RheSAtIGxhc3RMb2dpbiA9PT0gb25lRGF5TXMpIHtcclxuICAgICAgICAgIHN0cmVha0RhdGEuY3VycmVudFN0cmVhayArPSAxO1xyXG4gICAgICAgICAgc3RyZWFrRGF0YS5tYXhTdHJlYWsgPSBNYXRoLm1heChzdHJlYWtEYXRhLm1heFN0cmVhaywgc3RyZWFrRGF0YS5jdXJyZW50U3RyZWFrKTtcclxuICAgICAgICAgIHN0cmVha0RhdGEubGFzdExvZ2luRGF0ZSA9IHRvZGF5O1xyXG4gICAgICAgIH0gZWxzZSBpZiAodG9kYXkgPT09IGxhc3RMb2dpbikge1xyXG4gICAgICAgICAgLy8gTmUgcmllbiBmYWlyZVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzdHJlYWtEYXRhLmN1cnJlbnRTdHJlYWsgPSAxO1xyXG4gICAgICAgICAgc3RyZWFrRGF0YS5sYXN0TG9naW5EYXRlID0gdG9kYXk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBhd2FpdCBzdG9yZURhdGEoc3RvcmFnZVNlcnZpY2Uua2V5cy5TVFJFQUtfREFUQSwgc3RyZWFrRGF0YSk7XHJcbiAgICAgIHJldHVybiBzdHJlYWtEYXRhO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgdXBkYXRpbmcgc3RyZWFrOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgLy8gUsOpY3Vww6lyZXIgbGVzIGRvbm7DqWVzIGRlIHN0cmVha1xyXG4gIGdldFN0cmVhazogKCkgPT4ge1xyXG4gICAgcmV0dXJuIGdldERhdGEoc3RvcmFnZVNlcnZpY2Uua2V5cy5TVFJFQUtfREFUQSkgfHwge1xyXG4gICAgICBjdXJyZW50U3RyZWFrOiAwLFxyXG4gICAgICBsYXN0TG9naW5EYXRlOiBudWxsLFxyXG4gICAgICBtYXhTdHJlYWs6IDAsXHJcbiAgICB9O1xyXG4gIH0sXHJcblxyXG4gIC8vIFLDqWluaXRpYWxpc2VyIHRvdXRlcyBsZXMgZG9ubsOpZXNcclxuICByZXNldEFsbERhdGE6ICgpID0+IHtcclxuICAgIHJldHVybiBjbGVhckFsbERhdGEoKTtcclxuICB9LFxyXG59OyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQU1BLElBQUFBLGFBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGNBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFVBQUEsR0FBQUYsT0FBQTtBQVFPLElBQU1HLGtCQUFrQixHQUFBQyxPQUFBLENBQUFELGtCQUFBO0VBQUEsSUFBQUUsSUFBQSxPQUFBQyxrQkFBQSxDQUFBQyxPQUFBLEVBQUcsYUFBWTtJQUM1QyxJQUFJO01BQ0YsSUFBTUMsSUFBSSxHQUFHLGtCQUFrQjtNQUMvQixNQUFNQyxxQkFBWSxDQUFDQyxPQUFPLENBQUNGLElBQUksRUFBRUEsSUFBSSxDQUFDO01BQ3RDLE1BQU1DLHFCQUFZLENBQUNFLFVBQVUsQ0FBQ0gsSUFBSSxDQUFDO01BQ25DLE9BQU8sSUFBSTtJQUNiLENBQUMsQ0FBQyxPQUFPSSxD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