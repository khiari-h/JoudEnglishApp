1df8bb38ef51654fc853d083c51fd8e3
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _expoLinearGradient = require("expo-linear-gradient");
var _Card = _interopRequireDefault(require("../Card"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var RevealButton = function RevealButton(_ref) {
  var _ref$isRevealed = _ref.isRevealed,
    isRevealed = _ref$isRevealed === void 0 ? false : _ref$isRevealed,
    onToggle = _ref.onToggle,
    _ref$revealText = _ref.revealText,
    revealText = _ref$revealText === void 0 ? "Reveal Translation" : _ref$revealText,
    _ref$hideText = _ref.hideText,
    hideText = _ref$hideText === void 0 ? "Hide Translation" : _ref$hideText,
    _ref$revealedContent = _ref.revealedContent,
    revealedContent = _ref$revealedContent === void 0 ? "" : _ref$revealedContent,
    _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? "#5E60CE" : _ref$levelColor,
    _ref$contentStyle = _ref.contentStyle,
    contentStyle = _ref$contentStyle === void 0 ? {} : _ref$contentStyle;
  var styles = (0, _style.default)(levelColor);
  var _useState = (0, _react.useState)(new _reactNative.Animated.Value(1)),
    _useState2 = (0, _slicedToArray2.default)(_useState, 1),
    buttonScale = _useState2[0];
  var _useState3 = (0, _react.useState)(new _reactNative.Animated.Value(0)),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 1),
    contentOpacity = _useState4[0];
  _react.default.useEffect(function () {
    if (isRevealed) {
      _reactNative.Animated.timing(contentOpacity, {
        toValue: 1,
        duration: 300,
        useNativeDriver: true
      }).start();
    } else {
      contentOpacity.setValue(0);
    }
  }, [isRevealed, contentOpacity]);
  var handleRevealPress = (0, _react.useCallback)(function () {
    _reactNative.Animated.sequence([_reactNative.Animated.spring(buttonScale, {
      toValue: 0.96,
      tension: 400,
      friction: 10,
      useNativeDriver: true
    }), _reactNative.Animated.spring(buttonScale, {
      toValue: 1,
      tension: 300,
      friction: 8,
      useNativeDriver: true
    })]).start();
    setTimeout(function () {
      return onToggle();
    }, 60);
  }, [buttonScale, onToggle]);
  var handleHidePress = (0, _react.useCallback)(function () {
    _reactNative.Animated.sequence([_reactNative.Animated.spring(buttonScale, {
      toValue: 0.96,
      tension: 400,
      friction: 10,
      useNativeDriver: true
    }), _reactNative.Animated.spring(buttonScale, {
      toValue: 1,
      tension: 300,
      friction: 8,
      useNativeDriver: true
    })]).start();
    setTimeout(function () {
      return onToggle();
    }, 60);
  }, [buttonScale, onToggle]);
  return (0, _jsxRuntime.jsx)(_Card.default, {
    withShadow: true,
    borderRadius: 18,
    style: styles.card,
    contentStyle: styles.cardContent,
    children: isRevealed ? (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.revealedContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
        style: [styles.contentWrapper, {
          opacity: contentOpacity
        }],
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [styles.revealedText, {
            color: levelColor
          }, contentStyle],
          children: revealedContent
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
        style: {
          transform: [{
            scale: buttonScale
          }]
        },
        children: (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          style: styles.hideButton,
          onPress: handleHidePress,
          activeOpacity: 0.8,
          accessibilityRole: "button",
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [styles.hideButtonText, {
              color: levelColor
            }],
            children: hideText
          })
        })
      })]
    }) : (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
      style: {
        transform: [{
          scale: buttonScale
        }]
      },
      children: (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: styles.revealButtonContainer,
        onPress: handleRevealPress,
        activeOpacity: 0.9,
        accessibilityRole: "button",
        children: (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
          colors: [levelColor, `${levelColor}E6`],
          start: {
            x: 0,
            y: 0
          },
          end: {
            x: 1,
            y: 1
          },
          style: styles.revealButton,
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.revealButtonText,
            children: revealText
          })
        })
      })
    })
  });
};
RevealButton.propTypes = {
  isRevealed: _propTypes.default.bool,
  onToggle: _propTypes.default.func.isRequired,
  revealText: _propTypes.default.string,
  hideText: _propTypes.default.string,
  revealedContent: _propTypes.default.string,
  levelColor: _propTypes.default.string,
  contentStyle: _propTypes.default.object
};
RevealButton.defaultProps = {
  isRevealed: false,
  revealText: "Reveal Translation",
  hideText: "Hide Translation",
  revealedContent: "",
  levelColor: "#5E60CE",
  contentStyle: {}
};
var _default = exports.default = RevealButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,