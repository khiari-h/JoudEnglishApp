99f2289401e2e8ba3d4d2938cdac5176
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _expoRouter = require("expo-router");
var _Container = _interopRequireWildcard(require("../../../components/layout/Container"));
var _ConversationHeader = _interopRequireDefault(require("./ConversationHeader"));
var _ConversationSelector = _interopRequireDefault(require("./ConversationSelector"));
var _ConversationProgress = _interopRequireDefault(require("./ConversationProgress"));
var _ConversationScenarioDescription = _interopRequireDefault(require("./ConversationScenarioDescription"));
var _ConversationMessageList = _interopRequireDefault(require("./ConversationMessageList"));
var _ConversationSuggestions = _interopRequireDefault(require("./ConversationSuggestions"));
var _ConversationInput = _interopRequireDefault(require("./ConversationInput"));
var _useConversation2 = _interopRequireDefault(require("./hooks/useConversation"));
var _useLastActivity2 = _interopRequireDefault(require("../../../hooks/useLastActivity"));
var _conversationDataHelper = require("../../../utils/conversation/conversationDataHelper");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var ConversationExercise = function ConversationExercise(_ref) {
  var route = _ref.route;
  var _ref2 = (route == null ? void 0 : route.params) || {},
    _ref2$level = _ref2.level,
    level = _ref2$level === void 0 ? "A1" : _ref2$level;
  var _useLastActivity = (0, _useLastActivity2.default)(),
    saveActivity = _useLastActivity.saveActivity;
  var levelColor = (0, _conversationDataHelper.getLevelColor)(level);
  var conversationData = (0, _react.useMemo)(function () {
    return (0, _conversationDataHelper.getConversationData)(level);
  }, [level]);
  var _useConversation = (0, _useConversation2.default)(conversationData, level),
    currentScenarioIndex = _useConversation.currentScenarioIndex,
    conversation = _useConversation.conversation,
    message = _useConversation.message,
    setMessage = _useConversation.setMessage,
    isTyping = _useConversation.isTyping,
    suggestions = _useConversation.suggestions,
    showHelp = _useConversation.showHelp,
    completedScenarios = _useConversation.completedScenarios,
    conversationHistory = _useConversation.conversationHistory,
    loaded = _useConversation.loaded,
    showDetailedProgress = _useConversation.showDetailedProgress,
    currentScenario = _useConversation.currentScenario,
    totalScenarios = _useConversation.totalScenarios,
    hasValidData = _useConversation.hasValidData,
    changeScenario = _useConversation.changeScenario,
    sendMessage = _useConversation.sendMessage,
    useSuggestion = _useConversation.useSuggestion,
    toggleHelp = _useConversation.toggleHelp,
    toggleDetailedProgress = _useConversation.toggleDetailedProgress,
    isConversationStarted = _useConversation.isConversationStarted,
    stats = _useConversation.stats,
    display = _useConversation.display;
  var activityMetadata = (0, _react.useMemo)(function () {
    return {
      scenario: currentScenarioIndex,
      step: stats.currentStep || 0,
      totalSteps: stats.totalSteps || 1,
      scenarioName: (currentScenario == null ? void 0 : currentScenario.title) || `Sc√©nario ${currentScenarioIndex + 1}`,
      totalScenarios: totalScenarios
    };
  }, [currentScenarioIndex, stats.currentStep, stats.totalSteps, currentScenario == null ? void 0 : currentScenario.title, totalScenarios]);
  var handleSaveActivity = (0, _react.useCallback)(function () {
    if (loaded && hasValidData && currentScenario && isConversationStarted) {
      saveActivity({
        title: "Conversations",
        level: level,
        type: "conversations",
        metadata: activityMetadata
      });
    }
  }, [loaded, hasValidData, currentScenario, isConversationStarted, level, saveActivity, activityMetadata]);
  (0, _react.useEffect)(function () {
    handleSaveActivity();
  }, [handleSaveActivity]);
  var handleBackPress = (0, _react.useCallback)(function () {
    _expoRouter.router.push({
      pathname: "/tabs/exerciseSelection",
      params: {
        level: level
      }
    });
  }, [level]);
  var handleScenarioChange = (0, _react.useCallback)(function (index) {
    return changeScenario(index);
  }, [changeScenario]);
  var handleSendMessage = (0, _react.useCallback)(function () {
    return sendMessage();
  }, [sendMessage]);
  var handleUseSuggestion = (0, _react.useCallback)(function (suggestion) {
    return useSuggestion(suggestion);
  }, [useSuggestion]);
  var handleToggleHelp = (0, _react.useCallback)(function () {
    return toggleHelp();
  }, [toggleHelp]);
  var handleToggleProgressDetails = (0, _react.useCallback)(function () {
    return toggleDetailedProgress();
  }, [toggleDetailedProgress]);
  var handleScenarioChangeCb = (0, _react.useCallback)(function () {
    return handleScenarioChange.apply(void 0, arguments);
  }, [handleScenarioChange]);
  var handleToggleProgressDetailsCb = (0, _react.useCallback)(function () {
    return handleToggleProgressDetails();
  }, [handleToggleProgressDetails]);
  var handleToggleHelpCb = (0, _react.useCallback)(function () {
    return handleToggleHelp();
  }, [handleToggleHelp]);
  var handleBackPressCb = (0, _react.useCallback)(function () {
    return handleBackPress();
  }, [handleBackPress]);
  if (!loaded || !hasValidData) {
    return (0, _jsxRuntime.jsx)(_Container.default, {
      testID: "conversation-container",
      safeArea: true,
      safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
      backgroundColor: "#FAFBFC",
      statusBarStyle: "dark-content"
    });
  }
  return (0, _jsxRuntime.jsxs)(_Container.default, {
    testID: "conversation-container",
    safeArea: true,
    safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
    backgroundColor: "#FAFBFC",
    statusBarStyle: "dark-content",
    withPadding: false,
    style: _style.default.safeArea,
    children: [(0, _jsxRuntime.jsx)(_ConversationHeader.default, {
      level: level,
      onBackPress: handleBackPressCb,
      levelColor: levelColor
    }), (0, _jsxRuntime.jsx)(_ConversationSelector.default, {
      scenarios: conversationData.exercises,
      selectedIndex: currentScenarioIndex,
      onSelectScenario: handleScenarioChangeCb,
      levelColor: levelColor
    }), (0, _jsxRuntime.jsx)(_ConversationProgress.default, {
      progress: stats.completionProgress,
      currentStep: stats.currentStep,
      totalSteps: stats.totalSteps,
      levelColor: levelColor,
      conversationData: conversationData.exercises,
      completedScenarios: completedScenarios,
      conversationHistory: conversationHistory,
      expanded: showDetailedProgress,
      onToggleExpand: handleToggleProgressDetailsCb,
      onScenarioPress: handleScenarioChangeCb
    }), (0, _jsxRuntime.jsx)(_ConversationScenarioDescription.default, {
      description: currentScenario.description,
      helpText: display.currentHelp,
      showHelp: showHelp,
      toggleHelp: handleToggleHelpCb,
      levelColor: levelColor
    }), (0, _jsxRuntime.jsxs)(_reactNative.KeyboardAvoidingView, {
      style: _style.default.chatContainer,
      behavior: _reactNative.Platform.OS === "ios" ? "padding" : "height",
      keyboardVerticalOffset: _reactNative.Platform.OS === "ios" ? 90 : 0,
      children: [(0, _jsxRuntime.jsx)(_ConversationMessageList.default, {
        messages: conversation,
        isTyping: isTyping,
        levelColor: levelColor
      }), (0, _jsxRuntime.jsx)(_ConversationSuggestions.default, {
        suggestions: suggestions,
        onPressSuggestion: handleUseSuggestion,
        levelColor: levelColor
      }), (0, _jsxRuntime.jsx)(_ConversationInput.default, {
        message: message,
        onChangeMessage: setMessage,
        onSendMessage: handleSendMessage,
        levelColor: levelColor
      })]
    })]
  });
};
var _default = exports.default = ConversationExercise;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlIiwiX2V4cG9Sb3V0ZXIiLCJfQ29udGFpbmVyIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfQ29udmVyc2F0aW9uSGVhZGVyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9Db252ZXJzYXRpb25TZWxlY3RvciIsIl9Db252ZXJzYXRpb25Qcm9ncmVzcyIsIl9Db252ZXJzYXRpb25TY2VuYXJpb0Rlc2NyaXB0aW9uIiwiX0NvbnZlcnNhdGlvbk1lc3NhZ2VMaXN0IiwiX0NvbnZlcnNhdGlvblN1Z2dlc3Rpb25zIiwiX0NvbnZlcnNhdGlvbklucHV0IiwiX3VzZUNvbnZlcnNhdGlvbjIiLCJfdXNlTGFzdEFjdGl2aXR5MiIsIl9jb252ZXJzYXRpb25EYXRhSGVscGVyIiwiX3N0eWxlIiwiX2pzeFJ1bnRpbWUiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIkNvbnZlcnNhdGlvbkV4ZXJjaXNlIiwiX3JlZiIsInJvdXRlIiwiX3JlZjIiLCJwYXJhbXMiLCJfcmVmMiRsZXZlbCIsImxldmVsIiwiX3VzZUxhc3RBY3Rpdml0eSIsInVzZUxhc3RBY3Rpdml0eSIsInNhdmVBY3Rpdml0eSIsImxldmVsQ29sb3IiLCJnZXRMZXZlbENvbG9yIiwiY29udmVyc2F0aW9uRGF0YSIsInVzZU1lbW8iLCJnZXRDb252ZXJzYXRpb25EYXRhIiwiX3VzZUNvbnZlcnNhdGlvbiIsInVzZUNvbnZlcnNhdGlvbiIsImN1cnJlbnRTY2VuYXJpb0luZGV4IiwiY29udmVyc2F0aW9uIiwibWVzc2FnZSIsInNldE1lc3NhZ2UiLCJpc1R5cGluZyIsInN1Z2dlc3Rpb25zIiwic2hvd0hlbHAiLCJjb21wbGV0ZWRTY2VuYXJpb3MiLCJjb252ZXJzYXRpb25IaXN0b3J5IiwibG9hZGVkIiwic2hvd0RldGFpbGVkUHJvZ3Jlc3MiLCJjdXJyZW50U2NlbmFyaW8iLCJ0b3RhbFNjZW5hcmlvcyIsImhhc1ZhbGlkRGF0YSIsImNoYW5nZVNjZW5hcmlvIiwic2VuZE1lc3NhZ2UiLCJ1c2VTdWdnZXN0aW9uIiwidG9nZ2xlSGVscCIsInRvZ2dsZURldGFpbGVkUHJvZ3Jlc3MiLCJpc0NvbnZlcnNhdGlvblN0YXJ0ZWQiLCJzdGF0cyIsImRpc3BsYXkiLCJhY3Rpdml0eU1ldGFkYXRhIiwic2NlbmFyaW8iLCJzdGVwIiwiY3VycmVudFN0ZXAiLCJ0b3RhbFN0ZXBzIiwic2NlbmFyaW9OYW1lIiwidGl0bGUiLCJoYW5kbGVTYXZlQWN0aXZpdHkiLCJ1c2VDYWxsYmFjayIsInR5cGUiLCJtZXRhZGF0YSIsInVzZUVmZmVjdCIsImhhbmRsZUJhY2tQcmVzcyIsInJvdXRlciIsInB1c2giLCJwYXRobmFtZSIsImhhbmRsZVNjZW5hcmlvQ2hhbmdlIiwiaW5kZXgiLCJoYW5kbGVTZW5kTWVzc2FnZSIsImhhbmRsZVVzZVN1Z2dlc3Rpb24iLCJzdWdnZXN0aW9uIiwiaGFuZGxlVG9nZ2xlSGVscCIsImhhbmRsZVRvZ2dsZVByb2dyZXNzRGV0YWlscyIsImhhbmRsZVNjZW5hcmlvQ2hhbmdlQ2IiLCJhcHBseSIsImFyZ3VtZW50cyIsImhhbmRsZVRvZ2dsZVByb2dyZXNzRGV0YWlsc0NiIiwiaGFuZGxlVG9nZ2xlSGVscENiIiwiaGFuZGxlQmFja1ByZXNzQ2IiLCJqc3giLCJ0ZXN0SUQiLCJzYWZlQXJlYSIsInNhZmVBcmVhRWRnZXMiLCJDT05UQUlORVJfU0FGRV9FREdFUyIsIkFMTCIsImJhY2tncm91bmRDb2xvciIsInN0YXR1c0JhclN0eWxlIiwianN4cyIsIndpdGhQYWRkaW5nIiwic3R5bGUiLCJzdHlsZXMiLCJjaGlsZHJlbiIsIm9uQmFja1ByZXNzIiwic2NlbmFyaW9zIiwiZXhlcmNpc2VzIiwic2VsZWN0ZWRJbmRleCIsIm9uU2VsZWN0U2NlbmFyaW8iLCJwcm9ncmVzcyIsImNvbXBsZXRpb25Qcm9ncmVzcyIsImV4cGFuZGVkIiwib25Ub2dnbGVFeHBhbmQiLCJvblNjZW5hcmlvUHJlc3MiLCJkZXNjcmlwdGlvbiIsImhlbHBUZXh0IiwiY3VycmVudEhlbHAiLCJLZXlib2FyZEF2b2lkaW5nVmlldyIsImNoYXRDb250YWluZXIiLCJiZWhhdmlvciIsIlBsYXRmb3JtIiwiT1MiLCJrZXlib2FyZFZlcnRpY2FsT2Zmc2V0IiwibWVzc2FnZXMiLCJvblByZXNzU3VnZ2VzdGlvbiIsIm9uQ2hhbmdlTWVzc2FnZSIsIm9uU2VuZE1lc3NhZ2UiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb252ZXJzYXRpb25FeGVyY2lzZS9pbmRleC5qcyAtIFZFUlNJT04gQ09SUklHw4lFXG5pbXBvcnQgeyB1c2VNZW1vLCB1c2VFZmZlY3QsIHVzZUNhbGxiYWNrIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBLZXlib2FyZEF2b2lkaW5nVmlldywgUGxhdGZvcm0gfSBmcm9tIFwicmVhY3QtbmF0aXZlXCI7XG5pbXBvcnQgeyByb3V0ZXIgfSBmcm9tIFwiZXhwby1yb3V0ZXJcIjtcblxuLy8gTGF5b3V0XG5pbXBvcnQgQ29udGFpbmVyLCB7IENPTlRBSU5FUl9TQUZFX0VER0VTIH0gZnJvbSBcIi4uLy4uLy4uL2NvbXBvbmVudHMvbGF5b3V0L0NvbnRhaW5lclwiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgQ29udmVyc2F0aW9uSGVhZGVyIGZyb20gXCIuL0NvbnZlcnNhdGlvbkhlYWRlclwiO1xuaW1wb3J0IENvbnZlcnNhdGlvblNlbGVjdG9yIGZyb20gXCIuL0NvbnZlcnNhdGlvblNlbGVjdG9yXCI7XG5pbXBvcnQgQ29udmVyc2F0aW9uUHJvZ3Jlc3MgZnJvbSBcIi4vQ29udmVyc2F0aW9uUHJvZ3Jlc3NcIjtcbmltcG9ydCBDb252ZXJzYXRpb25TY2VuYXJpb0Rlc2NyaXB0aW9uIGZyb20gXCIuL0NvbnZlcnNhdGlvblNjZW5hcmlvRGVzY3JpcHRpb25cIjtcbmltcG9ydCBDb252ZXJzYXRpb25NZXNzYWdlTGlzdCBmcm9tIFwiLi9Db252ZXJzYXRpb25NZXNzYWdlTGlzdFwiO1xuaW1wb3J0IENvbnZlcnNhdGlvblN1Z2dlc3Rpb25zIGZyb20gXCIuL0NvbnZlcnNhdGlvblN1Z2dlc3Rpb25zXCI7XG5pbXBvcnQgQ29udmVyc2F0aW9uSW5wdXQgZnJvbSBcIi4vQ29udmVyc2F0aW9uSW5wdXRcIjtcblxuLy8gSG9vayAmIFV0aWxzXG5pbXBvcnQgdXNlQ29udmVyc2F0aW9uIGZyb20gXCIuL2hvb2tzL3VzZUNvbnZlcnNhdGlvblwiO1xuaW1wb3J0IHVzZUxhc3RBY3Rpdml0eSBmcm9tIFwiLi4vLi4vLi4vaG9va3MvdXNlTGFzdEFjdGl2aXR5XCI7XG5pbXBvcnQgeyBnZXRDb252ZXJzYXRpb25EYXRhLCBnZXRMZXZlbENvbG9yIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL2NvbnZlcnNhdGlvbi9jb252ZXJzYXRpb25EYXRhSGVscGVyXCI7XG5pbXBvcnQgc3R5bGVzIGZyb20gXCIuL3N0eWxlXCI7XG5cbi8qKlxuICog8J+OryBDb252ZXJzYXRpb25FeGVyY2lzZSAtIFZFUlNJT04gQ09SUklHw4lFXG4gKi9cbmNvbnN0IENvbnZlcnNhdGlvbkV4ZXJjaXNlID0gKHsgcm91dGUgfSkgPT4ge1xuICAvLyBjb25zdCBuYXZpZ2F0aW9uID0gdXNlTmF2aWdhdGlvbigpOyAvLyBzdXBwcmltw6kgY2FyIGludXRpbGlzw6lcbiAgY29uc3QgeyBsZXZlbCA9IFwiQTFcIiB9ID0gcm91dGU/LnBhcmFtcyB8fCB7fTtcblxuICAvLyBIb29rIHBvdXIgc2F1dmVnYXJkZXIgbCdhY3Rpdml0w6lcbiAgY29uc3QgeyBzYXZlQWN0aXZpdHkgfSA9IHVzZUxhc3RBY3Rpdml0eSgpO1xuXG4gIC8vIERhdGFcbiAgY29uc3QgbGV2ZWxDb2xvciA9IGdldExldmVsQ29sb3IobGV2ZWwpO1xuICBjb25zdCBjb252ZXJzYXRpb25EYXRhID0gdXNlTWVtbygoKSA9PiBnZXRDb252ZXJzYXRpb25EYXRhKGxldmVsKSwgW2xldmVsXSk7XG5cbiAgLy8gSG9vayB1bmlmacOpXG4gIGNvbnN0IHtcbiAgICBjdXJyZW50U2NlbmFyaW9JbmRleCxcbiAgICBjb252ZXJzYXRpb24sXG4gICAgbWVzc2FnZSxcbiAgICBzZXRNZXNzYWdlLFxuICAgIGlzVHlwaW5nLFxuICAgIHN1Z2dlc3Rpb25zLFxuICAgIHNob3dIZWxwLFxuICAgIGNvbXBsZXRlZFNjZW5hcmlvcyxcbiAgICBjb252ZXJzYXRpb25IaXN0b3J5LFxuICAgIGxvYWRlZCxcbiAgICBzaG93RGV0YWlsZWRQcm9ncmVzcyxcbiAgICBjdXJyZW50U2NlbmFyaW8sXG4gICAgdG90YWxTY2VuYXJpb3MsXG4gICAgaGFzVmFsaWREYXRhLFxuICAgIGNoYW5nZVNjZW5hcmlvLFxuICAgIHNlbmRNZXNzYWdlLFxuICAgIHVzZVN1Z2dlc3Rpb24sXG4gICAgdG9nZ2xlSGVscCxcbiAgICB0b2dnbGVEZXRhaWxlZFByb2dyZXNzLFxuICAgIGlzQ29udmVyc2F0aW9uU3RhcnRlZCxcbiAgICBzdGF0cyxcbiAgICBkaXNwbGF5LFxuICB9ID0gdXNlQ29udmVyc2F0aW9uKGNvbnZlcnNhdGlvbkRhdGEsIGxldmVsKTtcblxuICAvLyDinIUgQ09SUkVDVElPTiA6IE3DqW1vcmlzZXIgbGVzIG3DqXRhZG9ubsOpZXNcbiAgY29uc3QgYWN0aXZpdHlNZXRhZGF0YSA9IHVzZU1lbW8oKCkgPT4gKHtcbiAgICBzY2VuYXJpbzogY3VycmVudFNjZW5hcmlvSW5kZXgsXG4gICAgc3RlcDogc3RhdHMuY3VycmVudFN0ZXAgfHwgMCxcbiAgICB0b3RhbFN0ZXBzOiBzdGF0cy50b3RhbFN0ZXBzIHx8IDEsXG4gICAgc2NlbmFyaW9OYW1lOiBjdXJyZW50U2NlbmFyaW8/LnRpdGxlIHx8IGBTY8OpbmFyaW8gJHtjdXJyZW50U2NlbmFyaW9JbmRleCArIDF9YCxcbiAgICB0b3RhbFNjZW5hcmlvc1xuICB9KSwgW2N1cnJlbnRTY2VuYXJpb0luZGV4LCBzdGF0cy5jdXJyZW50U3RlcCwgc3RhdHMudG90YWxTdGVwcywgY3VycmVudFNjZW5hcmlvPy50aXRsZSwgdG90YWxTY2VuYXJpb3NdKTtcblxuICAvLyDinIUgQ09SUkVDVElPTiA6IENhbGxiYWNrIG3DqW1vcmlzw6kgcG91ciBzYXZlQWN0aXZpdHlcbiAgY29uc3QgaGFuZGxlU2F2ZUFjdGl2aXR5ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChsb2FkZWQgJiYgaGFzVmFsaWREYXRhICYmIGN1cnJlbnRTY2VuYXJpbyAmJiBpc0NvbnZlcnNhdGlvblN0YXJ0ZWQpIHtcbiAgICAgIHNhdmVBY3Rpdml0eSh7XG4gICAgICAgIHRpdGxlOiBcIkNvbnZlcnNhdGlvbnNcIixcbiAgICAgICAgbGV2ZWwsXG4gICAgICAgIHR5cGU6IFwiY29udmVyc2F0aW9uc1wiLFxuICAgICAgICBtZXRhZGF0YTogYWN0aXZpdHlNZXRhZGF0YVxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbbG9hZGVkLCBoYXNWYWxpZERhdGEsIGN1cnJlbnRTY2VuYXJpbywgaXNDb252ZXJzYXRpb25TdGFydGVkLCBsZXZlbCwgc2F2ZUFjdGl2aXR5LCBhY3Rpdml0eU1ldGFkYXRhXSk7XG5cbiAgLy8g4pyFIENPUlJFQ1RJT04gOiB1c2VFZmZlY3Qgb3B0aW1pc8OpXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaGFuZGxlU2F2ZUFjdGl2aXR5KCk7XG4gIH0sIFtoYW5kbGVTYXZlQWN0aXZpdHldKTtcblxuICAvLyBIYW5kbGVyc1xuICBjb25zdCBoYW5kbGVCYWNrUHJlc3MgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgcm91dGVyLnB1c2goe1xuICAgICAgcGF0aG5hbWU6IFwiL3RhYnMvZXhlcmNpc2VTZWxlY3Rpb25cIixcbiAgICAgIHBhcmFtczogeyBsZXZlbCB9XG4gICAgfSk7XG4gIH0sIFtsZXZlbF0pO1xuXG4gIGNvbnN0IGhhbmRsZVNjZW5hcmlvQ2hhbmdlID0gdXNlQ2FsbGJhY2soKGluZGV4KSA9PiBjaGFuZ2VTY2VuYXJpbyhpbmRleCksIFtjaGFuZ2VTY2VuYXJpb10pO1xuXG4gIGNvbnN0IGhhbmRsZVNlbmRNZXNzYWdlID0gdXNlQ2FsbGJhY2soKCkgPT4gc2VuZE1lc3NhZ2UoKSwgW3NlbmRNZXNzYWdlXSk7XG5cbiAgY29uc3QgaGFuZGxlVXNlU3VnZ2VzdGlvbiA9IHVzZUNhbGxiYWNrKChzdWdnZXN0aW9uKSA9PiB1c2VTdWdnZXN0aW9uKHN1Z2dlc3Rpb24pLCBbdXNlU3VnZ2VzdGlvbl0pO1xuXG4gIGNvbnN0IGhhbmRsZVRvZ2dsZUhlbHAgPSB1c2VDYWxsYmFjaygoKSA9PiB0b2dnbGVIZWxwKCksIFt0b2dnbGVIZWxwXSk7XG5cbiAgY29uc3QgaGFuZGxlVG9nZ2xlUHJvZ3Jlc3NEZXRhaWxzID0gdXNlQ2FsbGJhY2soKCkgPT4gdG9nZ2xlRGV0YWlsZWRQcm9ncmVzcygpLCBbdG9nZ2xlRGV0YWlsZWRQcm9ncmVzc10pO1xuXG4gIC8vIENhbGxiYWNrcyBtw6ltb3Jpc8OpcyBwb3VyIMOpdml0ZXIgbGVzIGFycm93IGZ1bmN0aW9ucyBkYW5zIGxlIEpTWFxuICBjb25zdCBoYW5kbGVTY2VuYXJpb0NoYW5nZUNiID0gdXNlQ2FsbGJhY2soKC4uLmFyZ3MpID0+IGhhbmRsZVNjZW5hcmlvQ2hhbmdlKC4uLmFyZ3MpLCBbaGFuZGxlU2NlbmFyaW9DaGFuZ2VdKTtcbiAgY29uc3QgaGFuZGxlVG9nZ2xlUHJvZ3Jlc3NEZXRhaWxzQ2IgPSB1c2VDYWxsYmFjaygoKSA9PiBoYW5kbGVUb2dnbGVQcm9ncmVzc0RldGFpbHMoKSwgW2hhbmRsZVRvZ2dsZVByb2dyZXNzRGV0YWlsc10pO1xuICBjb25zdCBoYW5kbGVUb2dnbGVIZWxwQ2IgPSB1c2VDYWxsYmFjaygoKSA9PiBoYW5kbGVUb2dnbGVIZWxwKCksIFtoYW5kbGVUb2dnbGVIZWxwXSk7XG4gIGNvbnN0IGhhbmRsZUJhY2tQcmVzc0NiID0gdXNlQ2FsbGJhY2soKCkgPT4gaGFuZGxlQmFja1ByZXNzKCksIFtoYW5kbGVCYWNrUHJlc3NdKTtcblxuICAvLyBMb2FkaW5nIHN0YXRlXG4gIGlmICghbG9hZGVkIHx8ICFoYXNWYWxpZERhdGEpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPENvbnRhaW5lclxuICAgICAgICB0ZXN0SUQ9XCJjb252ZXJzYXRpb24tY29udGFpbmVyXCJcbiAgICAgICAgc2FmZUFyZWFcbiAgICAgICAgc2FmZUFyZWFFZGdlcz17Q09OVEFJTkVSX1NBRkVfRURHRVMuQUxMfVxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I9XCIjRkFGQkZDXCJcbiAgICAgICAgc3RhdHVzQmFyU3R5bGU9XCJkYXJrLWNvbnRlbnRcIlxuICAgICAgPlxuICAgICAgICB7LyogTG9hZGluZyBjb250ZW50IGNhbiBiZSBhZGRlZCBoZXJlICovfVxuICAgICAgPC9Db250YWluZXI+XG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPENvbnRhaW5lclxuICAgICB0ZXN0SUQ9XCJjb252ZXJzYXRpb24tY29udGFpbmVyXCIgXG4gICAgICBzYWZlQXJlYVxuICAgICAgc2FmZUFyZWFFZGdlcz17Q09OVEFJTkVSX1NBRkVfRURHRVMuQUxMfVxuICAgICAgYmFja2dyb3VuZENvbG9yPVwiI0ZBRkJGQ1wiXG4gICAgICBzdGF0dXNCYXJTdHlsZT1cImRhcmstY29udGVudFwiXG4gICAgICB3aXRoUGFkZGluZz17ZmFsc2V9XG4gICAgICBzdHlsZT17c3R5bGVzLnNhZmVBcmVhfVxuICAgID5cbiAgICAgIHsvKiBIZWFkZXIgKi99XG4gICAgICA8Q29udmVyc2F0aW9uSGVhZGVyXG4gICAgICAgIGxldmVsPXtsZXZlbH1cbiAgICAgICAgb25CYWNrUHJlc3M9e2hhbmRsZUJhY2tQcmVzc0NifVxuICAgICAgICBsZXZlbENvbG9yPXtsZXZlbENvbG9yfVxuICAgICAgLz5cblxuICAgICAgey8qIFNjZW5hcmlvIFNlbGVjdG9yICovfVxuICAgICAgPENvbnZlcnNhdGlvblNlbGVjdG9yXG4gICAgICAgIHNjZW5hcmlvcz17Y29udmVyc2F0aW9uRGF0YS5leGVyY2lzZXN9XG4gICAgICAgIHNlbGVjdGVkSW5kZXg9e2N1cnJlbnRTY2VuYXJpb0luZGV4fVxuICAgICAgICBvblNlbGVjdFNjZW5hcmlvPXtoYW5kbGVTY2VuYXJpb0NoYW5nZUNifVxuICAgICAgICBsZXZlbENvbG9yPXtsZXZlbENvbG9yfVxuICAgICAgLz5cblxuICAgICAgey8qIFByb2dyZXNzICovfVxuICAgICAgPENvbnZlcnNhdGlvblByb2dyZXNzXG4gICAgICAgIHByb2dyZXNzPXtzdGF0cy5jb21wbGV0aW9uUHJvZ3Jlc3N9XG4gICAgICAgIGN1cnJlbnRTdGVwPXtzdGF0cy5jdXJyZW50U3RlcH1cbiAgICAgICAgdG90YWxTdGVwcz17c3RhdHMudG90YWxTdGVwc31cbiAgICAgICAgbGV2ZWxDb2xvcj17bGV2ZWxDb2xvcn1cbiAgICAgICAgY29udmVyc2F0aW9uRGF0YT17Y29udmVyc2F0aW9uRGF0YS5leGVyY2lzZXN9XG4gICAgICAgIGNvbXBsZXRlZFNjZW5hcmlvcz17Y29tcGxldGVkU2NlbmFyaW9zfVxuICAgICAgICBjb252ZXJzYXRpb25IaXN0b3J5PXtjb252ZXJzYXRpb25IaXN0b3J5fVxuICAgICAgICBleHBhbmRlZD17c2hvd0RldGFpbGVkUHJvZ3Jlc3N9XG4gICAgICAgIG9uVG9nZ2xlRXhwYW5kPXtoYW5kbGVUb2dnbGVQcm9ncmVzc0RldGFpbHNDYn1cbiAgICAgICAgb25TY2VuYXJpb1ByZXNzPXtoYW5kbGVTY2VuYXJpb0NoYW5nZUNifVxuICAgICAgLz5cblxuICAgICAgey8qIFNjZW5hcmlvIERlc2NyaXB0aW9uICovfVxuICAgICAgPENvbnZlcnNhdGlvblNjZW5hcmlvRGVzY3JpcHRpb25cbiAgICAgICAgZGVzY3JpcHRpb249e2N1cnJlbnRTY2VuYXJpby5kZXNjcmlwdGlvbn1cbiAgICAgICAgaGVscFRleHQ9e2Rpc3BsYXkuY3VycmVudEhlbHB9XG4gICAgICAgIHNob3dIZWxwPXtzaG93SGVscH1cbiAgICAgICAgdG9nZ2xlSGVscD17aGFuZGxlVG9nZ2xlSGVscENifVxuICAgICAgICBsZXZlbENvbG9yPXtsZXZlbENvbG9yfVxuICAgICAgLz5cblxuICAgICAgey8qIENoYXQgQXJlYSAqL31cbiAgICAgIDxLZXlib2FyZEF2b2lkaW5nVmlld1xuICAgICAgICBzdHlsZT17c3R5bGVzLmNoYXRDb250YWluZXJ9XG4gICAgICAgIGJlaGF2aW9yPXtQbGF0Zm9ybS5PUyA9PT0gXCJpb3NcIiA/IFwicGFkZGluZ1wiIDogXCJoZWlnaHRcIn1cbiAgICAgICAga2V5Ym9hcmRWZXJ0aWNhbE9mZnNldD17UGxhdGZvcm0uT1MgPT09IFwiaW9zXCIgPyA5MCA6IDB9XG4gICAgICA+XG4gICAgICAgIHsvKiBNZXNzYWdlIExpc3QgKi99XG4gICAgICAgIDxDb252ZXJzYXRpb25NZXNzYWdlTGlzdFxuICAgICAgICAgIG1lc3NhZ2VzPXtjb252ZXJzYXRpb259XG4gICAgICAgICAgaXNUeXBpbmc9e2lzVHlwaW5nfVxuICAgICAgICAgIGxldmVsQ29sb3I9e2xldmVsQ29sb3J9XG4gICAgICAgIC8+XG5cbiAgICAgICAgey8qIFN1Z2dlc3Rpb25zICovfVxuICAgICAgICA8Q29udmVyc2F0aW9uU3VnZ2VzdGlvbnNcbiAgICAgICAgICBzdWdnZXN0aW9ucz17c3VnZ2VzdGlvbnN9XG4gICAgICAgICAgb25QcmVzc1N1Z2dlc3Rpb249e2hhbmRsZVVzZVN1Z2dlc3Rpb259XG4gICAgICAgICAgbGV2ZWxDb2xvcj17bGV2ZWxDb2xvcn1cbiAgICAgICAgLz5cblxuICAgICAgICB7LyogSW5wdXQgKi99XG4gICAgICAgIDxDb252ZXJzYXRpb25JbnB1dFxuICAgICAgICAgIG1lc3NhZ2U9e21lc3NhZ2V9XG4gICAgICAgICAgb25DaGFuZ2VNZXNzYWdlPXtzZXRNZXNzYWdlfVxuICAgICAgICAgIG9uU2VuZE1lc3NhZ2U9e2hhbmRsZVNlbmRNZXNzYWdlfVxuICAgICAgICAgIGxldmVsQ29sb3I9e2xldmVsQ29sb3J9XG4gICAgICAgIC8+XG4gICAgICA8L0tleWJvYXJkQXZvaWRpbmdWaWV3PlxuICAgIDwvQ29udGFpbmVyPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29udmVyc2F0aW9uRXhlcmNpc2U7Il0sIm1hcHBpbmdzIjoiOzs7OztBQUNBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFdBQUEsR0FBQUYsT0FBQTtBQUdBLElBQUFHLFVBQUEsR0FBQUMsdUJBQUEsQ0FBQUosT0FBQTtBQUdBLElBQUFLLG1CQUFBLEdBQUFDLHNCQUFBLENBQUFOLE9BQUE7QUFDQSxJQUFBTyxxQkFBQSxHQUFBRCxzQkFBQSxDQUFBTixPQUFBO0FBQ0EsSUFBQVEscUJBQUEsR0FBQUYsc0JBQUEsQ0FBQU4sT0FBQTtBQUNBLElBQUFTLGdDQUFBLEdBQUFILHNCQUFBLENBQUFOLE9BQUE7QUFDQSxJQUFBVSx3QkFBQSxHQUFBSixzQkFBQSxDQUFBTixPQUFBO0FBQ0EsSUFBQVcsd0JBQUEsR0FBQUwsc0JBQUEsQ0FBQU4sT0FBQTtBQUNBLElBQUFZLGtCQUFBLEdBQUFOLHNCQUFBLENBQUFOLE9BQUE7QUFHQSxJQUFBYSxpQkFBQSxHQUFBUCxzQkFBQSxDQUFBTixPQUFBO0FBQ0EsSUFBQWMsaUJBQUEsR0FBQVIsc0JBQUEsQ0FBQU4sT0FBQTtBQUNBLElBQUFlLHVCQUFBLEdBQUFmLE9BQUE7QUFDQSxJQUFBZ0IsTUFBQSxHQUFBVixzQkFBQSxDQUFBTixPQUFBO0FBQTZCLElBQUFpQixXQUFBLEdBQUFqQixPQUFBO0FBQUEsU0FBQUksd0JBQUFjLENBQUEsRUFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFoQix1QkFBQSxZQUFBQSx3QkFBQWMsQ0FB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