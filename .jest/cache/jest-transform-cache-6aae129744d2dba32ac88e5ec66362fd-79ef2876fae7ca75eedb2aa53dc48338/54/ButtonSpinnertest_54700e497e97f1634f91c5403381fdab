dfe5bdaa2497dab3e480442aff64b946
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  var mockActivityIndicator = jest.fn(function () {
    return null;
  });
  return Object.assign({}, RN, {
    ActivityIndicator: mockActivityIndicator
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ButtonSpinner = _interopRequireDefault(require("../../../../src/components/ui/Button/ButtonSpinner"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ButtonSpinner', function () {
  it('devrait rendre un ActivityIndicator avec les props size et color', function () {
    var mockSize = 'large';
    var mockColor = '#FF0000';
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ButtonSpinner.default, {
      size: mockSize,
      color: mockColor
    }));
    var _require = require('react-native'),
      ActivityIndicator = _require.ActivityIndicator;
    expect(ActivityIndicator).toHaveBeenCalledWith(expect.objectContaining({
      size: mockSize,
      color: mockColor
    }), {});
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJSTiIsImplc3QiLCJyZXF1aXJlQWN0dWFsIiwibW9ja0FjdGl2aXR5SW5kaWNhdG9yIiwiZm4iLCJPYmplY3QiLCJhc3NpZ24iLCJBY3Rpdml0eUluZGljYXRvciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3JlYWN0IiwiX3JlYWN0TmF0aXZlIiwiX0J1dHRvblNwaW5uZXIiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlMiIsImRlc2NyaWJlIiwiaXQiLCJtb2NrU2l6ZSIsIm1vY2tDb2xvciIsInJlbmRlciIsImpzeCIsImRlZmF1bHQiLCJzaXplIiwiY29sb3IiLCJfcmVxdWlyZSIsImV4cGVjdCIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwib2JqZWN0Q29udGFpbmluZyJdLCJzb3VyY2VzIjpbIkJ1dHRvblNwaW5uZXIudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCBCdXR0b25TcGlubmVyIGZyb20gJy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3VpL0J1dHRvbi9CdXR0b25TcGlubmVyJztcclxuXHJcbi8vIE1vY2sgdGhlIGVudGlyZSByZWFjdC1uYXRpdmUgbW9kdWxlIGFuZCBvdmVycmlkZSBBY3Rpdml0eUluZGljYXRvclxyXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZScsICgpID0+IHtcclxuICBjb25zdCBSTiA9IGplc3QucmVxdWlyZUFjdHVhbCgncmVhY3QtbmF0aXZlJyk7XHJcbiAgY29uc3QgbW9ja0FjdGl2aXR5SW5kaWNhdG9yID0gamVzdC5mbigoKSA9PiBudWxsKTtcclxuICByZXR1cm4ge1xyXG4gICAgLi4uUk4sXHJcbiAgICBBY3Rpdml0eUluZGljYXRvcjogbW9ja0FjdGl2aXR5SW5kaWNhdG9yLFxyXG4gIH07XHJcbn0pO1xyXG5cclxuZGVzY3JpYmUoJ0J1dHRvblNwaW5uZXInLCAoKSA9PiB7XHJcbiAgaXQoJ2RldnJhaXQgcmVuZHJlIHVuIEFjdGl2aXR5SW5kaWNhdG9yIGF2ZWMgbGVzIHByb3BzIHNpemUgZXQgY29sb3InLCAoKSA9PiB7XHJcbiAgICBjb25zdCBtb2NrU2l6ZSA9ICdsYXJnZSc7XHJcbiAgICBjb25zdCBtb2NrQ29sb3IgPSAnI0ZGMDAwMCc7XHJcbiAgICByZW5kZXIoPEJ1dHRvblNwaW5uZXIgc2l6ZT17bW9ja1NpemV9IGNvbG9yPXttb2NrQ29sb3J9IC8+KTtcclxuICAgIFxyXG4gICAgLy8gV2UgZ2V0IHRoZSBtb2NrZWQgY29tcG9uZW50IGZyb20gdGhlIHJlcXVpcmVkIG1vZHVsZVxyXG4gICAgY29uc3QgeyBBY3Rpdml0eUluZGljYXRvciB9ID0gcmVxdWlyZSgncmVhY3QtbmF0aXZlJyk7XHJcbiAgICBleHBlY3QoQWN0aXZpdHlJbmRpY2F0b3IpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxyXG4gICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XHJcbiAgICAgICAgc2l6ZTogbW9ja1NpemUsXHJcbiAgICAgICAgY29sb3I6IG1vY2tDb2xvcixcclxuICAgICAgfSksXHJcbiAgICAgIHt9XHJcbiAgICApO1xyXG4gIH0pO1xyXG59KTsiXSwibWFwcGluZ3MiOiJBQUtBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxjQUFjLEVBQUUsWUFBTTtFQUM5QixJQUFNQyxFQUFFLEdBQUdDLElBQUksQ0FBQ0MsYUFBYSxDQUFDLGNBQWMsQ0FBQztFQUM3QyxJQUFNQyxxQkFBcUIsR0FBR0YsSUFBSSxDQUFDRyxFQUFFLENBQUM7SUFBQSxPQUFNLElBQUk7RUFBQSxFQUFDO0VBQ2pELE9BQUFDLE1BQUEsQ0FBQUMsTUFBQSxLQUNLTixFQUFFO0lBQ0xPLGlCQUFpQixFQUFFSjtFQUFxQjtBQUU1QyxDQUFDLENBQUM7QUFBQyxJQUFBSyxzQkFBQSxHQUFBQyxPQUFBO0FBWkgsSUFBQUMsTUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsWUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsY0FBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQStFLElBQUFJLFdBQUEsR0FBQUosT0FBQTtBQUFBLFNBQUFYLFlBQUE7RUFBQSxJQUFBZ0IsU0FBQSxHQUFBTCxPQUFBO0lBQUFSLElBQUEsR0FBQWEsU0FBQSxDQUFBYixJQUFBO0VBQUFILFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFHLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQVkvRWMsUUFBUSxDQUFDLGVBQWUsRUFBRSxZQUFNO0VBQzlCQyxFQUFFLENBQUMsa0VBQWtFLEVBQUUsWUFBTTtJQUMzRSxJQUFNQyxRQUFRLEdBQUcsT0FBTztJQUN4QixJQUFNQyxTQUFTLEdBQUcsU0FBUztJQUMzQixJQUFBQyxtQkFBTSxFQUFDLElBQUFOLFdBQUEsQ0FBQU8sR0FBQSxFQUFDUixjQUFBLENBQUFTLE9BQWE7TUFBQ0MsSUFBSSxFQUFFTCxRQUFTO01BQUNNLEtBQUssRUFBRUw7SUFBVSxDQUFFLENBQUMsQ0FBQztJQUczRCxJQUFBTSxRQUFBLEdBQThCZixPQUFPLENBQUMsY0FBYyxDQUFDO01BQTdDRixpQkFBaUIsR0FBQWlCLFFBQUEsQ0FBakJqQixpQkFBaUI7SUFDekJrQixNQUFNLENBQUNsQixpQkFBaUIsQ0FBQyxDQUFDbUIsb0JBQW9CLENBQzVDRCxNQUFNLENBQUNFLGdCQUFnQixDQUFDO01BQ3RCTCxJQUFJLEVBQUVMLFFBQVE7TUFDZE0sS0FBSyxFQUFFTDtJQUNULENBQUMsQ0FBQyxFQUNGLENBQUMsQ0FDSCxDQUFDO0VBQ0gsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119