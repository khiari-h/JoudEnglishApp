a5f64b781704afdd1634dcc1273a0a80
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _NavigationButtons = _interopRequireDefault(require("../../../../components/exercise-common/NavigationButtons"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var WordGamesNavigation = function WordGamesNavigation(_ref) {
  var currentGame = _ref.currentGame,
    showFeedback = _ref.showFeedback,
    _ref$selectedItems = _ref.selectedItems,
    selectedItems = _ref$selectedItems === void 0 ? [] : _ref$selectedItems,
    isLastGame = _ref.isLastGame,
    canGoPrevious = _ref.canGoPrevious,
    _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? "#3b82f6" : _ref$levelColor,
    onCheckAnswer = _ref.onCheckAnswer,
    onNext = _ref.onNext,
    onPrevious = _ref.onPrevious;
  var styles = (0, _style.default)(levelColor);
  var isMatchingOrAutoComplete = (currentGame == null ? void 0 : currentGame.type) === "matching";
  var hasSelection = selectedItems.length > 0;
  var canCheckAnswer = !isMatchingOrAutoComplete && hasSelection;
  if (!showFeedback && (currentGame == null ? void 0 : currentGame.type) === "categorization") {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.container,
      children: (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: [styles.checkButton, !canCheckAnswer && styles.disabledButton, {
          backgroundColor: canCheckAnswer ? levelColor : "#cbd5e1"
        }],
        onPress: onCheckAnswer,
        disabled: !canCheckAnswer,
        activeOpacity: 0.8,
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.checkButtonText,
          children: hasSelection ? "Check Answer" : "Select items to check"
        })
      })
    });
  }
  if (!showFeedback && (currentGame == null ? void 0 : currentGame.type) === "matching") {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.container,
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.instructionContainer,
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.instructionText,
          children: "Find all matching pairs"
        })
      })
    });
  }
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: styles.container,
    children: (0, _jsxRuntime.jsx)(_NavigationButtons.default, {
      onNext: onNext,
      onPrevious: canGoPrevious ? onPrevious : undefined,
      disablePrevious: !canGoPrevious,
      disableNext: false,
      primaryColor: levelColor,
      isLast: isLastGame,
      buttonLabels: {
        next: isLastGame ? "See Results" : "Next Game",
        previous: "Previous Game",
        finish: "See Results"
      },
      layout: "full"
    })
  });
};
var _default = exports.default = WordGamesNavigation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,