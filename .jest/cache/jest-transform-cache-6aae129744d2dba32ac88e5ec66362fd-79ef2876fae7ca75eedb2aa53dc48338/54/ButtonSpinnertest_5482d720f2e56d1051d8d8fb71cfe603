942bd8a094a2e679b74db23f512017e8
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  return Object.assign({}, RN, {
    ActivityIndicator: jest.fn(function () {
      return null;
    })
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ButtonSpinner = _interopRequireDefault(require("../../../src/components/ui/Button/ButtonSpinner"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ButtonSpinner', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('devrait rendre un ActivityIndicator avec les props size et color', function () {
    var mockSize = 'large';
    var mockColor = '#FF0000';
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ButtonSpinner.default, {
      size: mockSize,
      color: mockColor
    }));
    expect(_reactNative2.ActivityIndicator).toHaveBeenCalledWith(expect.objectContaining({
      size: mockSize,
      color: mockColor,
      testID: 'button-loader'
    }), {});
  });
  it('devrait avoir le testID "button-loader"', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ButtonSpinner.default, {})),
      getByTestId = _render.getByTestId;
    expect(getByTestId('button-loader')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJSTiIsImplc3QiLCJyZXF1aXJlQWN0dWFsIiwiT2JqZWN0IiwiYXNzaWduIiwiQWN0aXZpdHlJbmRpY2F0b3IiLCJmbiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3JlYWN0IiwiX3JlYWN0TmF0aXZlIiwiX0J1dHRvblNwaW5uZXIiLCJfcmVhY3ROYXRpdmUyIiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJpdCIsIm1vY2tTaXplIiwibW9ja0NvbG9yIiwicmVuZGVyIiwianN4IiwiZGVmYXVsdCIsInNpemUiLCJjb2xvciIsImV4cGVjdCIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwib2JqZWN0Q29udGFpbmluZyIsInRlc3RJRCIsIl9yZW5kZXIiLCJnZXRCeVRlc3RJZCIsInRvQmVUcnV0aHkiXSwic291cmNlcyI6WyJCdXR0b25TcGlubmVyLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgQnV0dG9uU3Bpbm5lciBmcm9tICcuLi8uLi8uLi9zcmMvY29tcG9uZW50cy91aS9CdXR0b24vQnV0dG9uU3Bpbm5lcic7XHJcbmltcG9ydCB7IEFjdGl2aXR5SW5kaWNhdG9yIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcclxuXHJcbi8vIE1vY2sgZGUgbCdBY3Rpdml0eUluZGljYXRvciBwb3VyIHbDqXJpZmllciBsZXMgcHJvcHNcclxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUnLCAoKSA9PiB7XHJcbiAgY29uc3QgUk4gPSBqZXN0LnJlcXVpcmVBY3R1YWwoJ3JlYWN0LW5hdGl2ZScpO1xyXG4gIHJldHVybiB7XHJcbiAgICAuLi5STixcclxuICAgIEFjdGl2aXR5SW5kaWNhdG9yOiBqZXN0LmZuKCgpID0+IG51bGwpLCAvLyBPbiBsZSBtb2NrZSBwb3VyIG5lIHBhcyBhdm9pciBsZSB2cmFpIGNvbXBvc2FudFxyXG4gIH07XHJcbn0pO1xyXG5cclxuZGVzY3JpYmUoJ0J1dHRvblNwaW5uZXInLCAoKSA9PiB7XHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICAvLyBSw6lpbml0aWFsaXNlIGxlcyBtb2NrcyBhdmFudCBjaGFxdWUgdGVzdFxyXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdkZXZyYWl0IHJlbmRyZSB1biBBY3Rpdml0eUluZGljYXRvciBhdmVjIGxlcyBwcm9wcyBzaXplIGV0IGNvbG9yJywgKCkgPT4ge1xyXG4gICAgY29uc3QgbW9ja1NpemUgPSAnbGFyZ2UnO1xyXG4gICAgY29uc3QgbW9ja0NvbG9yID0gJyNGRjAwMDAnO1xyXG4gICAgcmVuZGVyKDxCdXR0b25TcGlubmVyIHNpemU9e21vY2tTaXplfSBjb2xvcj17bW9ja0NvbG9yfSAvPik7XHJcbiAgICBcclxuICAgIC8vIE9uIHbDqXJpZmllIHF1ZSBsZSBjb21wb3NhbnQgQWN0aXZpdHlJbmRpY2F0b3IgYSDDqXTDqSBhcHBlbMOpIGF2ZWMgbGVzIGJvbm5lcyBwcm9wc1xyXG4gICAgZXhwZWN0KEFjdGl2aXR5SW5kaWNhdG9yKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcclxuICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xyXG4gICAgICAgIHNpemU6IG1vY2tTaXplLFxyXG4gICAgICAgIGNvbG9yOiBtb2NrQ29sb3IsXHJcbiAgICAgICAgdGVzdElEOiAnYnV0dG9uLWxvYWRlcicsXHJcbiAgICAgIH0pLFxyXG4gICAgICB7fVxyXG4gICAgKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ2RldnJhaXQgYXZvaXIgbGUgdGVzdElEIFwiYnV0dG9uLWxvYWRlclwiJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxCdXR0b25TcGlubmVyIC8+KTtcclxuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnYnV0dG9uLWxvYWRlcicpKS50b0JlVHJ1dGh5KCk7XHJcbiAgfSk7XHJcbn0pOyJdLCJtYXBwaW5ncyI6IkFBTUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLGNBQWMsRUFBRSxZQUFNO0VBQzlCLElBQU1DLEVBQUUsR0FBR0MsSUFBSSxDQUFDQyxhQUFhLENBQUMsY0FBYyxDQUFDO0VBQzdDLE9BQUFDLE1BQUEsQ0FBQUMsTUFBQSxLQUNLSixFQUFFO0lBQ0xLLGlCQUFpQixFQUFFSixJQUFJLENBQUNLLEVBQUUsQ0FBQztNQUFBLE9BQU0sSUFBSTtJQUFBO0VBQUM7QUFFMUMsQ0FBQyxDQUFDO0FBQUMsSUFBQUMsc0JBQUEsR0FBQUMsT0FBQTtBQVpILElBQUFDLE1BQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFlBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLGNBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFJLGFBQUEsR0FBQUosT0FBQTtBQUFpRCxJQUFBSyxXQUFBLEdBQUFMLE9BQUE7QUFBQSxTQUFBVixZQUFBO0VBQUEsSUFBQWdCLFFBQUEsR0FBQU4sT0FBQTtJQUFBUCxJQUFBLEdBQUFhLFFBQUEsQ0FBQWIsSUFBQTtFQUFBSCxXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBRyxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFXakRjLFFBQVEsQ0FBQyxlQUFlLEVBQUUsWUFBTTtFQUM5QkMsVUFBVSxDQUFDLFlBQU07SUFFZmYsSUFBSSxDQUFDZ0IsYUFBYSxDQUFDLENBQUM7RUFDdEIsQ0FBQyxDQUFDO0VBRUZDLEVBQUUsQ0FBQyxrRUFBa0UsRUFBRSxZQUFNO0lBQzNFLElBQU1DLFFBQVEsR0FBRyxPQUFPO0lBQ3hCLElBQU1DLFNBQVMsR0FBRyxTQUFTO0lBQzNCLElBQUFDLG1CQUFNLEVBQUMsSUFBQVIsV0FBQSxDQUFBUyxHQUFBLEVBQUNYLGNBQUEsQ0FBQVksT0FBYTtNQUFDQyxJQUFJLEVBQUVMLFFBQVM7TUFBQ00sS0FBSyxFQUFFTDtJQUFVLENBQUUsQ0FBQyxDQUFDO0lBRzNETSxNQUFNLENBQUNyQiwrQkFBaUIsQ0FBQyxDQUFDc0Isb0JBQW9CLENBQzVDRCxNQUFNLENBQUNFLGdCQUFnQixDQUFDO01BQ3RCSixJQUFJLEVBQUVMLFFBQVE7TUFDZE0sS0FBSyxFQUFFTCxTQUFTO01BQ2hCUyxNQUFNLEVBQUU7SUFDVixDQUFDLENBQUMsRUFDRixDQUFDLENBQ0gsQ0FBQztFQUNILENBQUMsQ0FBQztFQUVGWCxFQUFFLENBQUMseUNBQXlDLEVBQUUsWUFBTTtJQUNsRCxJQUFBWSxPQUFBLEdBQXdCLElBQUFULG1CQUFNLEVBQUMsSUFBQVIsV0FBQSxDQUFBUyxHQUFBLEVBQUNYLGNBQUEsQ0FBQVksT0FBYSxJQUFFLENBQUMsQ0FBQztNQUF6Q1EsV0FBVyxHQUFBRCxPQUFBLENBQVhDLFdBQVc7SUFDbkJMLE1BQU0sQ0FBQ0ssV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUNDLFVBQVUsQ0FBQyxDQUFDO0VBQ25ELENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==