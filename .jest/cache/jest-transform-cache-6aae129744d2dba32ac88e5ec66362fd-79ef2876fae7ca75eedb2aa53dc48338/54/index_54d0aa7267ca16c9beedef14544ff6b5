ce48d6223b7d79a8f7be1148ade26020
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _NavigationButtons = _interopRequireDefault(require("../../../../components/exercise-common/NavigationButtons"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
function cov_275i6lzrke() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\exercises\\vocabulary\\VocabularyNavigation\\index.js";
  var hash = "2f50f58f09b7e2696e6b48eb439730bddcc28f8e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\exercises\\vocabulary\\VocabularyNavigation\\index.js",
    statementMap: {
      "0": {
        start: {
          line: 12,
          column: 29
        },
        end: {
          line: 35,
          column: 1
        }
      },
      "1": {
        start: {
          line: 19,
          column: 2
        },
        end: {
          line: 34,
          column: 4
        }
      },
      "2": {
        start: {
          line: 38,
          column: 0
        },
        end: {
          line: 49,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 29
          },
          end: {
            line: 12,
            column: 30
          }
        },
        loc: {
          start: {
            line: 18,
            column: 6
          },
          end: {
            line: 35,
            column: 1
          }
        },
        line: 18
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 2
          },
          end: {
            line: 15,
            column: 22
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 15,
            column: 18
          },
          end: {
            line: 15,
            column: 22
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 16,
            column: 2
          },
          end: {
            line: 16,
            column: 16
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 16,
            column: 11
          },
          end: {
            line: 16,
            column: 16
          }
        }],
        line: 16
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0],
      "1": [0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2f50f58f09b7e2696e6b48eb439730bddcc28f8e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_275i6lzrke = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_275i6lzrke();
cov_275i6lzrke().s[0]++;
var VocabularyNavigation = function VocabularyNavigation(_ref) {
  var onPrevious = _ref.onPrevious,
    onNext = _ref.onNext,
    _ref$canGoPrevious = _ref.canGoPrevious,
    canGoPrevious = _ref$canGoPrevious === void 0 ? (cov_275i6lzrke().b[0][0]++, true) : _ref$canGoPrevious,
    _ref$isLast = _ref.isLast,
    isLast = _ref$isLast === void 0 ? (cov_275i6lzrke().b[1][0]++, false) : _ref$isLast,
    levelColor = _ref.levelColor;
  cov_275i6lzrke().f[0]++;
  cov_275i6lzrke().s[1]++;
  return (0, _jsxRuntime.jsx)(_NavigationButtons.default, {
    onNext: onNext,
    onPrevious: onPrevious,
    disablePrevious: !canGoPrevious,
    disableNext: false,
    primaryColor: levelColor,
    isLast: isLast,
    buttonLabels: {
      next: "Suivant",
      previous: "Précédent",
      finish: "Terminer"
    }
  });
};
cov_275i6lzrke().s[2]++;
VocabularyNavigation.propTypes = {
  onPrevious: _propTypes.default.func.isRequired,
  onNext: _propTypes.default.func.isRequired,
  canGoPrevious: _propTypes.default.bool,
  isLast: _propTypes.default.bool,
  levelColor: _propTypes.default.string
};
var _default = exports.default = VocabularyNavigation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfTmF2aWdhdGlvbkJ1dHRvbnMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfanN4UnVudGltZSIsImNvdl8yNzVpNmx6cmtlIiwicGF0aCIsImhhc2giLCJnbG9iYWwiLCJGdW5jdGlvbiIsImdjdiIsImNvdmVyYWdlRGF0YSIsInN0YXRlbWVudE1hcCIsInN0YXJ0IiwibGluZSIsImNvbHVtbiIsImVuZCIsImZuTWFwIiwibmFtZSIsImRlY2wiLCJsb2MiLCJicmFuY2hNYXAiLCJ0eXBlIiwibG9jYXRpb25zIiwicyIsImYiLCJiIiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsIlZvY2FidWxhcnlOYXZpZ2F0aW9uIiwiX3JlZiIsIm9uUHJldmlvdXMiLCJvbk5leHQiLCJfcmVmJGNhbkdvUHJldmlvdXMiLCJjYW5Hb1ByZXZpb3VzIiwiX3JlZiRpc0xhc3QiLCJpc0xhc3QiLCJsZXZlbENvbG9yIiwianN4IiwiZGVmYXVsdCIsImRpc2FibGVQcmV2aW91cyIsImRpc2FibGVOZXh0IiwicHJpbWFyeUNvbG9yIiwiYnV0dG9uTGFiZWxzIiwibmV4dCIsInByZXZpb3VzIiwiZmluaXNoIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiZnVuYyIsImlzUmVxdWlyZWQiLCJib29sIiwic3RyaW5nIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVm9jYWJ1bGFyeU5hdmlnYXRpb24vaW5kZXguanMgLSBWRVJTSU9OIE9QVElNSVPDiUUgKHBsdXMgZGUgXCIxLzJcIiByZWRvbmRhbnQpXHJcblxyXG5pbXBvcnQgTmF2aWdhdGlvbkJ1dHRvbnMgZnJvbSBcIi4uLy4uLy4uLy4uL2NvbXBvbmVudHMvZXhlcmNpc2UtY29tbW9uL05hdmlnYXRpb25CdXR0b25zXCI7XHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XHJcblxyXG4vKipcclxuICog8J+OryBWb2NhYnVsYXJ5TmF2aWdhdGlvbiAtIFZlcnNpb24gVWx0cmEtU2ltcGxpZmnDqWVcclxuICogLSBQbHVzIGQnaW5kaWNhdGV1ciBcIjEvMlwiIHJlZG9uZGFudCBcclxuICogLSBQbHVzIGRlIHdyYXBwZXIgaW51dGlsZVxyXG4gKiAtIE5hdmlnYXRpb25CdXR0b25zIGfDqHJlIHRvdXQgbWFpbnRlbmFudFxyXG4gKi9cclxuY29uc3QgVm9jYWJ1bGFyeU5hdmlnYXRpb24gPSAoe1xyXG4gIG9uUHJldmlvdXMsXHJcbiAgb25OZXh0LFxyXG4gIGNhbkdvUHJldmlvdXMgPSB0cnVlLFxyXG4gIGlzTGFzdCA9IGZhbHNlLFxyXG4gIGxldmVsQ29sb3IsXHJcbn0pID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPE5hdmlnYXRpb25CdXR0b25zXHJcbiAgICAgIG9uTmV4dD17b25OZXh0fVxyXG4gICAgICBvblByZXZpb3VzPXtvblByZXZpb3VzfVxyXG4gICAgICBkaXNhYmxlUHJldmlvdXM9eyFjYW5Hb1ByZXZpb3VzfVxyXG4gICAgICBkaXNhYmxlTmV4dD17ZmFsc2V9XHJcbiAgICAgIHByaW1hcnlDb2xvcj17bGV2ZWxDb2xvcn1cclxuICAgICAgaXNMYXN0PXtpc0xhc3R9IC8vIOKGkCBOb3V2ZWF1IHByb3Agc2ltcGxlXHJcbiAgICAgIGJ1dHRvbkxhYmVscz17e1xyXG4gICAgICAgIG5leHQ6IFwiU3VpdmFudFwiLFxyXG4gICAgICAgIHByZXZpb3VzOiBcIlByw6ljw6lkZW50XCIsIFxyXG4gICAgICAgIGZpbmlzaDogXCJUZXJtaW5lclwiXHJcbiAgICAgIH19XHJcbiAgICAgIC8vIPCfp7kgU1VQUFJJTcOJIDogY3VycmVudEluZGV4LCB0b3RhbENvdW50LCBzaG93U2tpcCwgdmFyaWFudCwgd3JhcHBlciBWaWV3XHJcbiAgICAvPlxyXG4gICk7XHJcbn07XHJcblxyXG4vLyDinIUgRMOpZmluaXRpb24gZGUgUHJvcFR5cGVzIHBvdXIgbGEgdmFsaWRhdGlvbiBkZXMgcHJvcHNcclxuVm9jYWJ1bGFyeU5hdmlnYXRpb24ucHJvcFR5cGVzID0ge1xyXG4gIC8vICdvblByZXZpb3VzJyBlc3QgbWFucXVhbnQgZGFucyBsYSB2YWxpZGF0aW9uXHJcbiAgb25QcmV2aW91czogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuICAvLyAnb25OZXh0JyBlc3QgbWFucXVhbnQgZGFucyBsYSB2YWxpZGF0aW9uXHJcbiAgb25OZXh0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG4gIC8vICdjYW5Hb1ByZXZpb3VzJyBlc3QgbWFucXVhbnQgZGFucyBsYSB2YWxpZGF0aW9uXHJcbiAgY2FuR29QcmV2aW91czogUHJvcFR5cGVzLmJvb2wsXHJcbiAgLy8gJ2lzTGFzdCcgZXN0IG1hbnF1YW50IGRhbnMgbGEgdmFsaWRhdGlvblxyXG4gIGlzTGFzdDogUHJvcFR5cGVzLmJvb2wsXHJcbiAgLy8gJ2xldmVsQ29sb3InIGVzdCBtYW5xdWFudCBkYW5zIGxhIHZhbGlkYXRpb25cclxuICBsZXZlbENvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVm9jYWJ1bGFyeU5hdmlnYXRpb247Il0sIm1hcHBpbmdzIjoiOzs7OztBQUVBLElBQUFBLGtCQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFBbUMsSUFBQUUsV0FBQSxHQUFBRixPQUFBO0FBQUEsU0FBQUcsZUFBQTtFQUFBLElBQUFDLElBQUE7RUFBQSxJQUFBQyxJQUFBO0VBQUEsSUFBQUMsTUFBQSxPQUFBQyxRQUFBO0VBQUEsSUFBQUMsR0FBQTtFQUFBLElBQUFDLFlBQUE7SUFBQUwsSUFBQTtJQUFBTSxZQUFBO01BQUE7UUFBQUMsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO0lBQUE7SUFBQUUsS0FBQTtNQUFBO1FBQUFDLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtJQUFBO0lBQUFPLFNBQUE7TUFBQTtRQUFBRCxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7SUFBQTtJQUFBVSxDQUFBO01BQUE7TUFBQTtNQUFBO0lBQUE7SUFBQUMsQ0FBQTtNQUFBO0lBQUE7SUFBQUMsQ0FBQTtNQUFBO01BQUE7SUFBQTtJQUFBQyxlQUFBO0lBQUFwQixJQUFBO0VBQUE7RUFBQSxJQUFBcUIsUUFBQSxHQUFBcEIsTUFBQSxDQUFBRSxHQUFBLE1BQUFGLE1BQUEsQ0FBQUUsR0FBQTtFQUFBLEtBQUFrQixRQUFBLENBQUF0QixJQUFBLEtBQUFzQixRQUFBLENBQUF0QixJQUFBLEVBQUFDLElBQUEsS0FBQUEsSUFBQTtJQUFBcUIsUUFBQSxDQUFBdEIsSUFBQSxJQUFBSyxZQUFBO0VBQUE7RUFBQSxJQUFBa0IsY0FBQSxHQUFBRCxRQUFBLENBQUF0QixJQUFBO0VBQUE7SUFBQUQsY0FBQSxZQUFBQSxDQUFBO01BQUEsT0FBQXdCLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUF4QixjQUFBO0FBQUFBLGNBQUEsR0FBQW1CLENBQUE7QUFRbkMsSUFBTU0sb0JBQW9CLEdBQUcsU0FBdkJBLG9CQUFvQkEsQ0FBQUMsSUFBQSxFQU1wQjtFQUFBLElBTEpDLFVBQVUsR0FBQUQsSUFBQSxDQUFWQyxVQUFVO0lBQ1ZDLE1BQU0sR0FBQUYsSUFBQSxDQUFORSxNQUFNO0lBQUFDLGtCQUFBLEdBQUFILElBQUEsQ0FDTkksYUFBYTtJQUFiQSxhQUFhLEdBQUFELGtCQUFBLGVBQUE3QixjQUFBLEdBQUFxQixDQUFBLFVBQUcsSUFBSSxJQUFBUSxrQkFBQTtJQUFBRSxXQUFBLEdBQUFMLElBQUEsQ0FDcEJNLE1BQU07SUFBTkEsTUFBTSxHQUFBRCxXQUFBLGVBQUEvQixjQUFBLEdBQUFxQixDQUFBLFVBQUcsS0FBSyxJQUFBVSxXQUFBO0lBQ2RFLFVBQVUsR0FBQVAsSUFBQSxDQUFWTyxVQUFVO0VBQUFqQyxjQUFBLEdBQUFvQixDQUFBO0VBQUFwQixjQUFBLEdBQUFtQixDQUFBO0VBRVYsT0FDRSxJQUFBcEIsV0FBQSxDQUFBbUMsR0FBQSxFQUFDdkMsa0JBQUEsQ0FBQXdDLE9BQWlCO0lBQ2hCUCxNQUFNLEVBQUVBLE1BQU87SUFDZkQsVUFBVSxFQUFFQSxVQUFXO0lBQ3ZCUyxlQUFlLEVBQUUsQ0FBQ04sYUFBYztJQUNoQ08sV0FBVyxFQUFFLEtBQU07SUFDbkJDLFlBQVksRUFBRUwsVUFBVztJQUN6QkQsTUFBTSxFQUFFQSxNQUFPO0lBQ2ZPLFlBQVksRUFBRTtNQUNaQyxJQUFJLEVBQUUsU0FBUztNQUNmQyxRQUFRLEVBQUUsV0FBVztNQUNyQkMsTUFBTSxFQUFFO0lBQ1Y7RUFBRSxDQUVILENBQUM7QUFFTixDQUFDO0FBQUMxQyxjQUFBLEdBQUFtQixDQUFBO0FBR0ZNLG9CQUFvQixDQUFDa0IsU0FBUyxHQUFHO0VBRS9CaEIsVUFBVSxFQUFFaUIsa0JBQVMsQ0FBQ0MsSUFBSSxDQUFDQyxVQUFVO0VBRXJDbEIsTUFBTSxFQUFFZ0Isa0JBQVMsQ0FBQ0MsSUFBSSxDQUFDQyxVQUFVO0VBRWpDaEIsYUFBYSxFQUFFYyxrQkFBUyxDQUFDRyxJQUFJO0VBRTdCZixNQUFNLEVBQUVZLGtCQUFTLENBQUNHLElBQUk7RUFFdEJkLFVBQVUsRUFBRVcsa0JBQVMsQ0FBQ0k7QUFDeEIsQ0FBQztBQUFDLElBQUFDLFFBQUEsR0FBQUMsT0FBQSxDQUFBZixPQUFBLEdBRWFWLG9CQUFvQiIsImlnbm9yZUxpc3QiOltdfQ==