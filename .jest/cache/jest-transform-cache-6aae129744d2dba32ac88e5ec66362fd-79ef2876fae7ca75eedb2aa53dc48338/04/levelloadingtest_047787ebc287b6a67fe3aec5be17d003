c2962806350674785355586e88e63186
var vocabularyFixtures = {
  A1: {
    word: {
      english: 'name',
      french: 'nom'
    },
    category: 'Identité & informations personnelles'
  },
  B1: {
    word: {
      english: 'rhetoric',
      french: 'rhétorique'
    },
    category: 'Expression & Communication Avancée'
  },
  C1: {
    word: {
      english: 'ubiquitous',
      french: 'omniprésent'
    },
    category: 'Maîtrise Linguistique Avancée'
  }
};
_getJestObj().mock('expo-router', function () {
  return {
    useFocusEffect: jest.fn(function (cb) {
      return cb();
    }),
    router: {
      push: jest.fn(),
      back: jest.fn()
    },
    Stack: function Stack(_ref) {
      var children = _ref.children;
      return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
        children: children
      });
    },
    useLocalSearchParams: function useLocalSearchParams() {
      return {};
    },
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn(),
        canGoBack: jest.fn(function () {
          return true;
        }),
        addListener: jest.fn(),
        isFocused: jest.fn(function () {
          return true;
        })
      };
    }
  };
});
_getJestObj().mock('../../src/screens/exercises/vocabulary/hooks/useVocabulary', function () {
  return jest.fn(function (vocabularyData, level, mode) {
    if (!vocabularyData || !level) return {
      loaded: false
    };
    var _ref2 = vocabularyFixtures[level] || vocabularyFixtures.A1,
      word = _ref2.word,
      category = _ref2.category;
    return {
      loaded: true,
      currentWord: word,
      display: {
        wordCounter: '1 / 1',
        categories: [{
          name: category,
          words: [word]
        }]
      },
      isLastWordInExercise: true,
      handleNext: jest.fn().mockReturnValue({
        completed: true
      }),
      saveData: jest.fn().mockResolvedValue(undefined)
    };
  });
});
_getJestObj().mock('../../../utils/vocabulary/vocabularyDataHelper', function () {
  return {
    getVocabularyData: jest.fn(function () {
      return {
        categories: [{
          name: 'Animaux',
          words: [{
            english: 'cat',
            french: 'chat'
          }]
        }]
      };
    }),
    getLevelColor: jest.fn(function () {
      return '#123456';
    }),
    isBonusLevel: jest.fn(function () {
      return false;
    })
  };
});
_getJestObj().mock('../../src/hooks/useLastActivity', function () {
  return {
    __esModule: true,
    default: jest.fn(function () {
      return {
        saveActivity: jest.fn(),
        lastActivity: null,
        isLoading: false,
        clearActivity: jest.fn(),
        reload: jest.fn()
      };
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _vocabulary = _interopRequireDefault(require("../../src/screens/exercises/vocabulary"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Integration - VocabularyExercise par niveau', function () {
  var renderWithParams = function renderWithParams(level, mode) {
    jest.spyOn(require('expo-router'), 'useLocalSearchParams').mockReturnValue({
      level: level,
      mode: mode
    });
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {}));
  };
  it('Affiche le mot et la catégorie du niveau A1', (0, _asyncToGenerator2.default)(function* () {
    var _renderWithParams = renderWithParams('A1', 'normal'),
      getByText = _renderWithParams.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('name')).toBeTruthy();
      expect(getByText('nom')).toBeTruthy();
      expect(getByText('Identité & informations personnelles')).toBeTruthy();
    });
  }));
  it('Affiche le mot et la catégorie du niveau B1', (0, _asyncToGenerator2.default)(function* () {
    var _renderWithParams2 = renderWithParams('B1', 'normal'),
      getByText = _renderWithParams2.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('rhetoric')).toBeTruthy();
      expect(getByText('rhétorique')).toBeTruthy();
      expect(getByText('Expression & Communication Avancée')).toBeTruthy();
    });
  }));
  it('Affiche le mot et la catégorie du niveau C1', (0, _asyncToGenerator2.default)(function* () {
    var _renderWithParams3 = renderWithParams('C1', 'normal'),
      getByText = _renderWithParams3.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('ubiquitous')).toBeTruthy();
      expect(getByText('omniprésent')).toBeTruthy();
      expect(getByText('Maîtrise Linguistique Avancée')).toBeTruthy();
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,