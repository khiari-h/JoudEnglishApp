8a15d82301a6c75d68634833cd403715
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _vectorIcons = require("@expo/vector-icons");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var Modal = function Modal(_ref) {
  var _ref$visible = _ref.visible,
    visible = _ref$visible === void 0 ? false : _ref$visible,
    onClose = _ref.onClose,
    title = _ref.title,
    children = _ref.children,
    footer = _ref.footer,
    _ref$position = _ref.position,
    position = _ref$position === void 0 ? "center" : _ref$position,
    _ref$animationType = _ref.animationType,
    animationType = _ref$animationType === void 0 ? "fade" : _ref$animationType,
    _ref$closeOnBackdropP = _ref.closeOnBackdropPress,
    closeOnBackdropPress = _ref$closeOnBackdropP === void 0 ? true : _ref$closeOnBackdropP,
    _ref$showCloseButton = _ref.showCloseButton,
    showCloseButton = _ref$showCloseButton === void 0 ? true : _ref$showCloseButton,
    width = _ref.width,
    height = _ref.height,
    maxHeight = _ref.maxHeight,
    _ref$fullScreen = _ref.fullScreen,
    fullScreen = _ref$fullScreen === void 0 ? false : _ref$fullScreen,
    _ref$transparent = _ref.transparent,
    transparent = _ref$transparent === void 0 ? true : _ref$transparent,
    _ref$backdropColor = _ref.backdropColor,
    backdropColor = _ref$backdropColor === void 0 ? "rgba(0, 0, 0, 0.5)" : _ref$backdropColor,
    contentContainerStyle = _ref.contentContainerStyle,
    headerStyle = _ref.headerStyle,
    footerStyle = _ref.footerStyle,
    bodyStyle = _ref.bodyStyle,
    _ref$avoidKeyboard = _ref.avoidKeyboard,
    avoidKeyboard = _ref$avoidKeyboard === void 0 ? true : _ref$avoidKeyboard,
    _ref$scrollable = _ref.scrollable,
    scrollable = _ref$scrollable === void 0 ? false : _ref$scrollable,
    customAnimation = _ref.customAnimation;
  var _React$useState = _react.default.useState(new _reactNative.Animated.Value(0)),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 1),
    animation = _React$useState2[0];
  _react.default.useEffect(function () {
    if (animationType === "custom" && customAnimation) {
      _reactNative.Animated.timing(animation, {
        toValue: visible ? 1 : 0,
        duration: 300,
        useNativeDriver: true
      }).start();
    }
  }, [visible, animationType, customAnimation]);
  var handleBackdropPress = (0, _react.useCallback)(function () {
    if (closeOnBackdropPress && onClose) {
      onClose();
    }
  }, [closeOnBackdropPress, onClose]);
  var getModalWidth = function getModalWidth() {
    if (fullScreen) return "100%";
    if (width) return width;
    var screenWidth = _reactNative.Dimensions.get("window").width;
    switch (position) {
      case "bottom":
      case "top":
        return "100%";
      case "center":
      default:
        return Math.min(screenWidth - 48, 480);
    }
  };
  var getModalHeight = function getModalHeight() {
    if (fullScreen) return "100%";
    if (height) return height;
    return "auto";
  };
  var getPositionStyle = function getPositionStyle() {
    switch (position) {
      case "bottom":
        return _style.default.bottomPosition;
      case "top":
        return _style.default.topPosition;
      case "center":
      default:
        return _style.default.centerPosition;
    }
  };
  var getCustomAnimationStyle = function getCustomAnimationStyle() {
    if (animationType !== "custom" || !customAnimation) return {};
    switch (position) {
      case "bottom":
        return {
          transform: [{
            translateY: animation.interpolate({
              inputRange: [0, 1],
              outputRange: [300, 0]
            })
          }]
        };
      case "top":
        return {
          transform: [{
            translateY: animation.interpolate({
              inputRange: [0, 1],
              outputRange: [-300, 0]
            })
          }]
        };
      case "center":
      default:
        return {
          opacity: animation,
          transform: [{
            scale: animation.interpolate({
              inputRange: [0, 1],
              outputRange: [0.8, 1]
            })
          }]
        };
    }
  };
  var renderModalContent = function renderModalContent() {
    var modalContent = (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
      style: [_style.default.contentContainer, getPositionStyle(), {
        width: getModalWidth(),
        height: getModalHeight(),
        maxHeight: maxHeight
      }, animationType === "custom" && getCustomAnimationStyle(), contentContainerStyle],
      children: [(title || showCloseButton) && (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [_style.default.header, headerStyle],
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: _style.default.title,
          children: title
        }), showCloseButton && (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          style: _style.default.closeButton,
          onPress: onClose,
          hitSlop: {
            top: 10,
            right: 10,
            bottom: 10,
            left: 10
          },
          children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
            name: "close",
            size: 24,
            color: "#6B7280"
          })
        })]
      }), scrollable ? (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
        style: [_style.default.scrollableBody, bodyStyle],
        contentContainerStyle: _style.default.scrollableContent,
        showsVerticalScrollIndicator: true,
        children: children
      }) : (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [_style.default.body, bodyStyle],
        children: children
      }), footer && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [_style.default.footer, footerStyle],
        children: footer
      })]
    });
    return avoidKeyboard ? (0, _jsxRuntime.jsx)(_reactNative.KeyboardAvoidingView, {
      behavior: _reactNative.Platform.OS === "ios" ? "padding" : "height",
      style: _style.default.keyboardAvoidingView,
      children: modalContent
    }) : modalContent;
  };
  return (0, _jsxRuntime.jsx)(_reactNative.Modal, {
    visible: visible,
    transparent: transparent,
    onRequestClose: onClose,
    animationType: animationType === "custom" ? "none" : animationType,
    children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [_style.default.modalContainer, {
        backgroundColor: backdropColor
      }],
      children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableWithoutFeedback, {
        onPress: handleBackdropPress,
        children: (0, _jsxRuntime.jsx)(_reactNative.View, {
          testID: "modal-backdrop",
          style: _style.default.backdrop
        })
      }), renderModalContent()]
    })
  });
};
var _default = exports.default = Modal;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,