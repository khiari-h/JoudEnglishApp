74786c9971feacbf836652f6f49efe11
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _expoLinearGradient = require("expo-linear-gradient");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var CategorySelector = function CategorySelector(_ref) {
  var _ref$categories = _ref.categories,
    categories = _ref$categories === void 0 ? [] : _ref$categories,
    selectedCategory = _ref.selectedCategory,
    onSelectCategory = _ref.onSelectCategory,
    _ref$primaryColor = _ref.primaryColor,
    primaryColor = _ref$primaryColor === void 0 ? "#5E60CE" : _ref$primaryColor;
  var styles = (0, _style.default)(primaryColor);
  var _useState = (0, _react.useState)(function () {
      return categories.reduce(function (acc, category) {
        acc[category.id] = new _reactNative.Animated.Value(selectedCategory === category.id ? 1 : 0);
        return acc;
      }, {});
    }),
    _useState2 = (0, _slicedToArray2.default)(_useState, 1),
    animations = _useState2[0];
  var animateSelection = function animateSelection(categoryId) {
    if (selectedCategory !== undefined && animations[selectedCategory]) {
      _reactNative.Animated.timing(animations[selectedCategory], {
        toValue: 0,
        duration: 200,
        useNativeDriver: false
      }).start();
    }
    if (animations[categoryId]) {
      _reactNative.Animated.timing(animations[categoryId], {
        toValue: 1,
        duration: 300,
        useNativeDriver: false
      }).start();
    }
    onSelectCategory(categoryId);
  };
  var handleCategoryPress = (0, _react.useCallback)(function (categoryId) {
    return function () {
      return animateSelection(categoryId);
    };
  }, [animateSelection]);
  var renderCategoryPill = function renderCategoryPill(category) {
    var isSelected = selectedCategory === category.id;
    var animation = animations[category.id] || new _reactNative.Animated.Value(0);
    var scale = animation.interpolate({
      inputRange: [0, 1],
      outputRange: [1, 1.05]
    });
    var shadowOpacity = animation.interpolate({
      inputRange: [0, 1],
      outputRange: [0.1, 0.25]
    });
    var borderWidth = animation.interpolate({
      inputRange: [0, 1],
      outputRange: [1, 2]
    });
    return (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
      style: [styles.categoryItemWrapper, {
        transform: [{
          scale: scale
        }]
      }],
      children: (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: styles.categoryTouchable,
        onPress: handleCategoryPress(category.id),
        activeOpacity: 0.8,
        children: isSelected ? (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
          colors: [primaryColor, `${primaryColor}E6`, `${primaryColor}CC`],
          start: {
            x: 0,
            y: 0
          },
          end: {
            x: 1,
            y: 1
          },
          style: styles.selectedCategoryItem,
          children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.selectedInner,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.selectedCategoryText,
              children: category.name
            }), (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: styles.sparkleContainer,
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.sparkle,
                children: "\u2728"
              })
            })]
          })
        }) : (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
          style: [styles.categoryItem, {
            borderWidth: borderWidth,
            borderColor: `${primaryColor}20`,
            shadowOpacity: shadowOpacity
          }],
          children: (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [styles.categoryInner, {
              backgroundColor: `${primaryColor}08`
            }],
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: [styles.categoryText, {
                color: primaryColor
              }],
              children: category.name
            })
          })
        })
      })
    }, category.id);
  };
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: styles.container,
    children: (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
      colors: [`${primaryColor}04`, 'transparent', `${primaryColor}02`],
      start: {
        x: 0,
        y: 0
      },
      end: {
        x: 1,
        y: 0
      },
      style: styles.backgroundGradient,
      children: (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
        horizontal: true,
        showsHorizontalScrollIndicator: false,
        contentContainerStyle: styles.scrollContent,
        style: styles.scrollView,
        children: categories.map(function (category) {
          return renderCategoryPill(category);
        })
      })
    })
  });
};
var _default = exports.default = CategorySelector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,