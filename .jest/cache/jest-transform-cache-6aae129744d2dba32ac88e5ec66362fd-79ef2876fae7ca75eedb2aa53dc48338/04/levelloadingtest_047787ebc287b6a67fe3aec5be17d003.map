{"version":3,"names":["vocabularyFixtures","A1","word","english","french","category","B1","C1","_getJestObj","mock","useFocusEffect","jest","fn","cb","router","push","back","Stack","_ref","children","_jsxRuntime","jsx","Fragment","useLocalSearchParams","useNavigation","navigate","goBack","canGoBack","addListener","isFocused","vocabularyData","level","mode","loaded","_ref2","currentWord","display","wordCounter","categories","name","words","isLastWordInExercise","handleNext","mockReturnValue","completed","saveData","mockResolvedValue","undefined","getVocabularyData","getLevelColor","isBonusLevel","__esModule","default","saveActivity","lastActivity","isLoading","clearActivity","reload","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_vocabulary","_require","describe","renderWithParams","spyOn","render","it","_renderWithParams","getByText","waitFor","expect","toBeTruthy","_renderWithParams2","_renderWithParams3"],"sources":["level-loading.test.js"],"sourcesContent":["import React from 'react';\nimport { render, waitFor } from '@testing-library/react-native';\nimport VocabularyExercise from '../../src/screens/exercises/vocabulary';\n\n// --- Données de test par niveau ---\nconst vocabularyFixtures = {\n  A1: {\n    word: { english: 'name', french: 'nom' },\n    category: 'Identité & informations personnelles',\n  },\n  B1: {\n    word: { english: 'rhetoric', french: 'rhétorique' },\n    category: 'Expression & Communication Avancée',\n  },\n  C1: {\n    word: { english: 'ubiquitous', french: 'omniprésent' },\n    category: 'Maîtrise Linguistique Avancée',\n  },\n};\n\n// --- Mock expo-router ---\njest.mock('expo-router', () => ({\n  useFocusEffect: jest.fn(cb => cb()),\n  router: { push: jest.fn(), back: jest.fn() },\n  Stack: ({ children }) => <>{children}</>,\n  useLocalSearchParams: () => ({}),\n  useNavigation: () => ({\n    navigate: jest.fn(),\n    goBack: jest.fn(),\n    canGoBack: jest.fn(() => true),\n    addListener: jest.fn(),\n    isFocused: jest.fn(() => true),\n  }),\n}));\n\n// --- Mock du hook useVocabulary ---\njest.mock('../../src/screens/exercises/vocabulary/hooks/useVocabulary', () => {\n  return jest.fn((vocabularyData, level, mode) => {\n    if (!vocabularyData || !level) return { loaded: false };\n    const { word, category } = vocabularyFixtures[level] || vocabularyFixtures.A1;\n    return {\n      loaded: true,\n      currentWord: word,\n      display: {\n        wordCounter: '1 / 1',\n        categories: [{ name: category, words: [word] }],\n      },\n      isLastWordInExercise: true,\n      handleNext: jest.fn().mockReturnValue({ completed: true }),\n      saveData: jest.fn().mockResolvedValue(undefined),\n    };\n  });\n});\n\n// --- Mock de vocabularyDataHelper ---\njest.mock('../../../utils/vocabulary/vocabularyDataHelper', () => ({\n  getVocabularyData: jest.fn(() => ({\n    categories: [\n      { name: 'Animaux', words: [{ english: 'cat', french: 'chat' }] },\n    ],\n  })),\n  getLevelColor: jest.fn(() => '#123456'),\n  isBonusLevel: jest.fn(() => false),\n}));\n\n// --- Mock de useLastActivity ---\njest.mock('../../src/hooks/useLastActivity', () => ({\n  __esModule: true,\n  default: jest.fn(() => ({\n    saveActivity: jest.fn(),\n    lastActivity: null,\n    isLoading: false,\n    clearActivity: jest.fn(),\n    reload: jest.fn(),\n  })),\n}));\n\n// --- Tests ---\ndescribe('Integration - VocabularyExercise par niveau', () => {\n  const renderWithParams = (level, mode) => {\n    jest.spyOn(require('expo-router'), 'useLocalSearchParams').mockReturnValue({ level, mode });\n    return render(<VocabularyExercise />);\n  };\n\n  it('Affiche le mot et la catégorie du niveau A1', async () => {\n    const { getByText } = renderWithParams('A1', 'normal');\n    await waitFor(() => {\n      expect(getByText('name')).toBeTruthy();\n      expect(getByText('nom')).toBeTruthy();\n      expect(getByText('Identité & informations personnelles')).toBeTruthy();\n    });\n  });\n\n  it('Affiche le mot et la catégorie du niveau B1', async () => {\n    const { getByText } = renderWithParams('B1', 'normal');\n    await waitFor(() => {\n      expect(getByText('rhetoric')).toBeTruthy();\n      expect(getByText('rhétorique')).toBeTruthy();\n      expect(getByText('Expression & Communication Avancée')).toBeTruthy();\n    });\n  });\n\n  it('Affiche le mot et la catégorie du niveau C1', async () => {\n    const { getByText } = renderWithParams('C1', 'normal');\n    await waitFor(() => {\n      expect(getByText('ubiquitous')).toBeTruthy();\n      expect(getByText('omniprésent')).toBeTruthy();\n      expect(getByText('Maîtrise Linguistique Avancée')).toBeTruthy();\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}