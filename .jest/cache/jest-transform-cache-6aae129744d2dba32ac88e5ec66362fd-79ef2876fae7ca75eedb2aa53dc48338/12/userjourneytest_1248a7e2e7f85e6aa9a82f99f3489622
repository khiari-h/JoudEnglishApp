2037625d3c48c5816d2e674fa4dc9e85
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn(),
      back: jest.fn(),
      replace: jest.fn()
    },
    useLocalSearchParams: function useLocalSearchParams() {
      return {
        level: '1'
      };
    },
    useRouter: function useRouter() {
      return {
        push: jest.fn(),
        back: jest.fn()
      };
    }
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useFocusEffect: jest.fn(function (callback) {
      return callback();
    }),
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    }
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _Dashboard = _interopRequireDefault(require("../../src/screens/Dashboard"));
var _LevelSelection = _interopRequireDefault(require("../../src/screens/LevelSelection"));
var _ExerciseSelection = _interopRequireDefault(require("../../src/screens/ExerciseSelection"));
var _vocabulary = _interopRequireDefault(require("../../src/screens/exercises/vocabulary"));
var _ThemeContext = require("../../src/contexts/ThemeContext");
var _ProgressContext = require("../../src/contexts/ProgressContext");
var _CurrentLevelContext = require("../../src/contexts/CurrentLevelContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require5 = require("@jest/globals"),
    jest = _require5.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockTheme = {
  colors: {
    background: '#F8FAFC',
    primary: '#3B82F6',
    surface: '#FFFFFF',
    text: '#1F2937',
    textSecondary: '#6B7280'
  }
};
var TestWrapper = function TestWrapper(_ref) {
  var children = _ref.children;
  return (0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
    value: mockTheme,
    children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(_CurrentLevelContext.CurrentLevelProvider, {
        children: children
      })
    })
  });
};
describe('User Journey Integration Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _asyncStorage.default.getItem.mockResolvedValue(null);
  });
  describe('Complete Learning Journey', function () {
    it('should complete a full user journey from dashboard to exercise', (0, _asyncToGenerator2.default)(function* () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
        })),
        getByTestId = _render.getByTestId,
        getByText = _render.getByText,
        queryByTestId = _render.queryByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByTestId('dashboard-container')).toBeTruthy();
      });
      var levelSelectionButton = queryByTestId('level-selection-button');
      if (levelSelectionButton) {
        _reactNative.fireEvent.press(levelSelectionButton);
        var _require = require('expo-router'),
          _router = _require.router;
        expect(_router.push).toHaveBeenCalledWith('/(tabs)/levelSelection');
      }
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_LevelSelection.default, {})
        })),
        getLevelTestId = _render2.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getLevelTestId('level-selection-container')).toBeTruthy();
      });
      var level1Button = getLevelTestId('level-1');
      _reactNative.fireEvent.press(level1Button);
      expect(router.push).toHaveBeenCalledWith({
        pathname: '/tabs/exerciseSelection',
        params: {
          level: '1'
        }
      });
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_ExerciseSelection.default, {
            level: "1"
          })
        })),
        getExerciseTestId = _render3.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getExerciseTestId('exercise-selection-container')).toBeTruthy();
      });
      var vocabularyButton = getExerciseTestId('vocabulary-exercise');
      _reactNative.fireEvent.press(vocabularyButton);
      expect(router.push).toHaveBeenCalledWith({
        pathname: expect.stringContaining('vocabulary'),
        params: expect.objectContaining({
          level: '1'
        })
      });
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_vocabulary.default, {})
        })),
        getVocabTestId = _render4.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getVocabTestId('vocabulary-word')).toBeTruthy();
      });
      var revealButton = getVocabTestId('reveal-translation-button');
      _reactNative.fireEvent.press(revealButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(getVocabTestId('vocabulary-translation')).toBeTruthy();
      });
      var nextButton = getVocabTestId('next-word-button');
      _reactNative.fireEvent.press(nextButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('2/')).toBeTruthy();
      });
    }));
    it('should handle user progression and data persistence', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'lastActivity') {
          return Promise.resolve(JSON.stringify({
            type: 'vocabulary',
            level: '1',
            timestamp: Date.now(),
            metadata: {
              word: 5,
              totalWords: 15
            }
          }));
        }
        if (key === 'progress_vocabulary_1') {
          return Promise.resolve(JSON.stringify({
            wordsLearned: 10,
            totalWords: 50,
            percentage: 20
          }));
        }
        return Promise.resolve(null);
      });
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
        })),
        getByTestId = _render5.getByTestId,
        queryByTestId = _render5.queryByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByTestId('continue-activity-button')).toBeTruthy();
      });
      var continueButton = queryByTestId('continue-activity-button');
      _reactNative.fireEvent.press(continueButton);
      var _require2 = require('expo-router'),
        router = _require2.router;
      expect(router.push).toHaveBeenCalledWith({
        pathname: expect.stringContaining('vocabulary'),
        params: expect.objectContaining({
          level: '1'
        })
      });
    }));
    it('should navigate between different exercise types', (0, _asyncToGenerator2.default)(function* () {
      var exerciseTypes = [{
        id: 'vocabulary-exercise',
        component: _vocabulary.default
      }, {
        id: 'spelling-exercise',
        component: _vocabulary.default
      }, {
        id: 'reading-exercise',
        component: _vocabulary.default
      }];
      var _loop = function* _loop() {
        var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
            children: (0, _jsxRuntime.jsx)(_ExerciseSelection.default, {
              level: "1"
            })
          })),
          getByTestId = _render6.getByTestId;
        yield (0, _reactNative.waitFor)(function () {
          expect(getByTestId('exercise-selection-container')).toBeTruthy();
        });
        var exerciseButton = getByTestId(exercise.id);
        _reactNative.fireEvent.press(exerciseButton);
        var _require3 = require('expo-router'),
          router = _require3.router;
        expect(router.push).toHaveBeenCalled();
        jest.clearAllMocks();
      };
      for (var exercise of exerciseTypes) {
        yield* _loop();
      }
    }));
  });
  describe('Error Handling and Edge Cases', function () {
    it('should handle loading states gracefully', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function () {
        return new Promise(function (resolve) {
          return setTimeout(function () {
            return resolve(null);
          }, 100);
        });
      });
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
        })),
        getByTestId = _render7.getByTestId,
        queryByTestId = _render7.queryByTestId;
      expect(queryByTestId('activity-indicator')).toBeTruthy();
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByTestId('dashboard-container')).toBeTruthy();
      }, {
        timeout: 3000
      });
    }));
    it('should handle empty data states', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
        })),
        getByTestId = _render8.getByTestId,
        queryByTestId = _render8.queryByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByTestId('dashboard-container')).toBeTruthy();
      });
      expect(queryByTestId('level-selection-button')).toBeTruthy();
    }));
    it('should handle navigation errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      var _require4 = require('expo-router'),
        router = _require4.router;
      router.push.mockImplementation(function () {
        throw new Error('Navigation error');
      });
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_LevelSelection.default, {})
        })),
        getByTestId = _render9.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('level-selection-container')).toBeTruthy();
      });
      var level1Button = getByTestId('level-1');
      expect(function () {
        _reactNative.fireEvent.press(level1Button);
      }).not.toThrow();
    }));
  });
  describe('Performance and Responsiveness', function () {
    it('should render components within acceptable time', (0, _asyncToGenerator2.default)(function* () {
      var startTime = Date.now();
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
        })),
        getByTestId = _render0.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('dashboard-container')).toBeTruthy();
      });
      var renderTime = Date.now() - startTime;
      expect(renderTime).toBeLessThan(1000);
    }));
    it('should handle rapid user interactions', (0, _asyncToGenerator2.default)(function* () {
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_LevelSelection.default, {})
        })),
        getByTestId = _render1.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('level-selection-container')).toBeTruthy();
      });
      var level1Button = getByTestId('level-1');
      for (var i = 0; i < 5; i++) {
        _reactNative.fireEvent.press(level1Button);
      }
      expect(getByTestId('level-selection-container')).toBeTruthy();
    }));
  });
  describe('Data Consistency', function () {
    it('should maintain data consistency across components', (0, _asyncToGenerator2.default)(function* () {
      var progressData = {
        vocabulary: {
          level1: 25,
          level2: 0
        },
        spelling: {
          level1: 15,
          level2: 0
        }
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key.startsWith('progress_')) {
          var _progressData$exercis;
          var _key$split = key.split('_'),
            _key$split2 = (0, _slicedToArray2.default)(_key$split, 3),
            exercise = _key$split2[1],
            level = _key$split2[2];
          return Promise.resolve(JSON.stringify({
            percentage: ((_progressData$exercis = progressData[exercise]) == null ? void 0 : _progressData$exercis[`level${level}`]) || 0
          }));
        }
        return Promise.resolve(null);
      });
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
        })),
        getDashboardTestId = _render10.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getDashboardTestId('dashboard-container')).toBeTruthy();
      });
      var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_LevelSelection.default, {})
        })),
        getLevelTestId = _render11.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getLevelTestId('level-selection-container')).toBeTruthy();
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,