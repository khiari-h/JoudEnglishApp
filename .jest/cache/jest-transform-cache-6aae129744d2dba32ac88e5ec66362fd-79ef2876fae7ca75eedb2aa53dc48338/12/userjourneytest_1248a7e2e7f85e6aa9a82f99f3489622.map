{"version":3,"names":["_getJestObj","mock","router","push","jest","fn","back","replace","useLocalSearchParams","level","useRouter","useFocusEffect","callback","useNavigation","navigate","goBack","getItem","setItem","removeItem","clear","_interopRequireDefault","require","_slicedToArray2","_asyncToGenerator2","_react","_reactNative","_asyncStorage","_Dashboard","_LevelSelection","_ExerciseSelection","_vocabulary","_ThemeContext","_ProgressContext","_CurrentLevelContext","_jsxRuntime","_require5","mockTheme","colors","background","primary","surface","text","textSecondary","TestWrapper","_ref","children","jsx","ThemeContext","Provider","value","ProgressProvider","CurrentLevelProvider","describe","beforeEach","clearAllMocks","AsyncStorage","mockResolvedValue","it","default","_render","render","getByTestId","getByText","queryByTestId","waitFor","expect","toBeTruthy","levelSelectionButton","fireEvent","press","_require","toHaveBeenCalledWith","_render2","getLevelTestId","level1Button","pathname","params","_render3","getExerciseTestId","vocabularyButton","stringContaining","objectContaining","_render4","getVocabTestId","revealButton","nextButton","mockImplementation","key","Promise","resolve","JSON","stringify","type","timestamp","Date","now","metadata","word","totalWords","wordsLearned","percentage","_render5","continueButton","_require2","exerciseTypes","id","component","VocabularyExercise","_loop","_render6","exerciseButton","exercise","_require3","toHaveBeenCalled","setTimeout","_render7","timeout","_render8","_require4","Error","_render9","not","toThrow","startTime","_render0","renderTime","toBeLessThan","_render1","i","progressData","vocabulary","level1","level2","spelling","startsWith","_progressData$exercis","_key$split","split","_key$split2","_render10","getDashboardTestId","_render11"],"sources":["user-journey.test.js"],"sourcesContent":["// __tests__/integration/user-journey.test.js\nimport React from 'react';\nimport { render, fireEvent, waitFor, act } from '@testing-library/react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n// Mocks\njest.mock('expo-router', () => ({\n  router: {\n    push: jest.fn(),\n    back: jest.fn(),\n    replace: jest.fn(),\n  },\n  useLocalSearchParams: () => ({ level: '1' }),\n  useRouter: () => ({\n    push: jest.fn(),\n    back: jest.fn(),\n  }),\n}));\n\njest.mock('@react-navigation/native', () => ({\n  useFocusEffect: jest.fn((callback) => callback()),\n  useNavigation: () => ({\n    navigate: jest.fn(),\n    goBack: jest.fn(),\n  }),\n}));\n\njest.mock('@react-native-async-storage/async-storage', () => ({\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n  clear: jest.fn(),\n}));\n\n// Import des composants\nimport Dashboard from '../../src/screens/Dashboard';\nimport LevelSelection from '../../src/screens/LevelSelection';\nimport ExerciseSelection from '../../src/screens/ExerciseSelection';\nimport VocabularyExercise from '../../src/screens/exercises/vocabulary';\n\n// Providers\nimport { ThemeContext } from '../../src/contexts/ThemeContext';\nimport { ProgressProvider } from '../../src/contexts/ProgressContext';\nimport { CurrentLevelProvider } from '../../src/contexts/CurrentLevelContext';\n\nconst mockTheme = {\n  colors: {\n    background: '#F8FAFC',\n    primary: '#3B82F6',\n    surface: '#FFFFFF',\n    text: '#1F2937',\n    textSecondary: '#6B7280',\n  },\n};\n\nconst TestWrapper = ({ children }) => (\n  <ThemeContext.Provider value={mockTheme}>\n    <ProgressProvider>\n      <CurrentLevelProvider>\n        {children}\n      </CurrentLevelProvider>\n    </ProgressProvider>\n  </ThemeContext.Provider>\n);\n\ndescribe('User Journey Integration Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    AsyncStorage.getItem.mockResolvedValue(null);\n  });\n\n  describe('Complete Learning Journey', () => {\n    it('should complete a full user journey from dashboard to exercise', async () => {\n      // 1. Render Dashboard\n      const { getByTestId, getByText, queryByTestId } = render(\n        <TestWrapper>\n          <Dashboard />\n        </TestWrapper>\n      );\n\n      // 2. Vérifier que le dashboard se charge\n      await waitFor(() => {\n        expect(queryByTestId('dashboard-container')).toBeTruthy();\n      });\n\n      // 3. Simuler clic sur \"Commencer\" pour nouveau utilisateur\n      const levelSelectionButton = queryByTestId('level-selection-button');\n      if (levelSelectionButton) {\n        fireEvent.press(levelSelectionButton);\n        \n        // Vérifier que la navigation est appelée\n        const { router } = require('expo-router');\n        expect(router.push).toHaveBeenCalledWith('/(tabs)/levelSelection');\n      }\n\n      // 4. Test de la sélection de niveau\n      const { getByTestId: getLevelTestId } = render(\n        <TestWrapper>\n          <LevelSelection />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(getLevelTestId('level-selection-container')).toBeTruthy();\n      });\n\n      // 5. Sélectionner niveau 1\n      const level1Button = getLevelTestId('level-1');\n      fireEvent.press(level1Button);\n\n      // Vérifier navigation vers exercices\n      expect(router.push).toHaveBeenCalledWith({\n        pathname: '/tabs/exerciseSelection',\n        params: { level: '1' },\n      });\n\n      // 6. Test de la sélection d'exercices\n      const { getByTestId: getExerciseTestId } = render(\n        <TestWrapper>\n          <ExerciseSelection level=\"1\" />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(getExerciseTestId('exercise-selection-container')).toBeTruthy();\n      });\n\n      // 7. Sélectionner exercice de vocabulaire\n      const vocabularyButton = getExerciseTestId('vocabulary-exercise');\n      fireEvent.press(vocabularyButton);\n\n      // Vérifier navigation vers vocabulaire\n      expect(router.push).toHaveBeenCalledWith({\n        pathname: expect.stringContaining('vocabulary'),\n        params: expect.objectContaining({ level: '1' }),\n      });\n\n      // 8. Test de l'exercice de vocabulaire\n      const { getByTestId: getVocabTestId } = render(\n        <TestWrapper>\n          <VocabularyExercise />\n        </TestWrapper>\n      );\n\n      // Attendre le chargement\n      await waitFor(() => {\n        expect(getVocabTestId('vocabulary-word')).toBeTruthy();\n      });\n\n      // 9. Interagir avec l'exercice\n      const revealButton = getVocabTestId('reveal-translation-button');\n      fireEvent.press(revealButton);\n\n      await waitFor(() => {\n        expect(getVocabTestId('vocabulary-translation')).toBeTruthy();\n      });\n\n      // 10. Passer au mot suivant\n      const nextButton = getVocabTestId('next-word-button');\n      fireEvent.press(nextButton);\n\n      // Vérifier que le compteur change\n      await waitFor(() => {\n        expect(getByText('2/')).toBeTruthy();\n      });\n    });\n\n    it('should handle user progression and data persistence', async () => {\n      // Simuler des données existantes\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key === 'lastActivity') {\n          return Promise.resolve(JSON.stringify({\n            type: 'vocabulary',\n            level: '1',\n            timestamp: Date.now(),\n            metadata: { word: 5, totalWords: 15 }\n          }));\n        }\n        if (key === 'progress_vocabulary_1') {\n          return Promise.resolve(JSON.stringify({\n            wordsLearned: 10,\n            totalWords: 50,\n            percentage: 20\n          }));\n        }\n        return Promise.resolve(null);\n      });\n\n      // Render Dashboard avec données existantes\n      const { getByTestId, queryByTestId } = render(\n        <TestWrapper>\n          <Dashboard />\n        </TestWrapper>\n      );\n\n      // Vérifier que le bouton \"Continuer\" apparaît\n      await waitFor(() => {\n        expect(queryByTestId('continue-activity-button')).toBeTruthy();\n      });\n\n      // Cliquer sur continuer\n      const continueButton = queryByTestId('continue-activity-button');\n      fireEvent.press(continueButton);\n\n      // Vérifier que la navigation reprend l'activité\n      const { router } = require('expo-router');\n      expect(router.push).toHaveBeenCalledWith({\n        pathname: expect.stringContaining('vocabulary'),\n        params: expect.objectContaining({ level: '1' }),\n      });\n    });\n\n    it('should navigate between different exercise types', async () => {\n      const exerciseTypes = [\n        { id: 'vocabulary-exercise', component: VocabularyExercise },\n        { id: 'spelling-exercise', component: VocabularyExercise }, // Placeholder\n        { id: 'reading-exercise', component: VocabularyExercise }, // Placeholder\n      ];\n\n      for (const exercise of exerciseTypes) {\n        // Render ExerciseSelection\n        const { getByTestId } = render(\n          <TestWrapper>\n            <ExerciseSelection level=\"1\" />\n          </TestWrapper>\n        );\n\n        await waitFor(() => {\n          expect(getByTestId('exercise-selection-container')).toBeTruthy();\n        });\n\n        // Cliquer sur l'exercice\n        const exerciseButton = getByTestId(exercise.id);\n        fireEvent.press(exerciseButton);\n\n        // Vérifier la navigation\n        const { router } = require('expo-router');\n        expect(router.push).toHaveBeenCalled();\n\n        // Reset mocks pour le prochain test\n        jest.clearAllMocks();\n      }\n    });\n  });\n\n  describe('Error Handling and Edge Cases', () => {\n    it('should handle loading states gracefully', async () => {\n      // Simuler un délai de chargement\n      AsyncStorage.getItem.mockImplementation(() => \n        new Promise(resolve => setTimeout(() => resolve(null), 100))\n      );\n\n      const { getByTestId, queryByTestId } = render(\n        <TestWrapper>\n          <Dashboard />\n        </TestWrapper>\n      );\n\n      // Vérifier l'état de chargement\n      expect(queryByTestId('activity-indicator')).toBeTruthy();\n\n      // Attendre la fin du chargement\n      await waitFor(() => {\n        expect(queryByTestId('dashboard-container')).toBeTruthy();\n      }, { timeout: 3000 });\n    });\n\n    it('should handle empty data states', async () => {\n      // Simuler aucune donnée\n      AsyncStorage.getItem.mockResolvedValue(null);\n\n      const { getByTestId, queryByTestId } = render(\n        <TestWrapper>\n          <Dashboard />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(queryByTestId('dashboard-container')).toBeTruthy();\n      });\n\n      // Vérifier que le bouton pour commencer est présent\n      expect(queryByTestId('level-selection-button')).toBeTruthy();\n    });\n\n    it('should handle navigation errors gracefully', async () => {\n      // Simuler une erreur de navigation\n      const { router } = require('expo-router');\n      router.push.mockImplementation(() => {\n        throw new Error('Navigation error');\n      });\n\n      const { getByTestId } = render(\n        <TestWrapper>\n          <LevelSelection />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(getByTestId('level-selection-container')).toBeTruthy();\n      });\n\n      // Tenter de naviguer (ne devrait pas crasher)\n      const level1Button = getByTestId('level-1');\n      \n      expect(() => {\n        fireEvent.press(level1Button);\n      }).not.toThrow();\n    });\n  });\n\n  describe('Performance and Responsiveness', () => {\n    it('should render components within acceptable time', async () => {\n      const startTime = Date.now();\n\n      const { getByTestId } = render(\n        <TestWrapper>\n          <Dashboard />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(getByTestId('dashboard-container')).toBeTruthy();\n      });\n\n      const renderTime = Date.now() - startTime;\n      expect(renderTime).toBeLessThan(1000); // Moins d'1 seconde\n    });\n\n    it('should handle rapid user interactions', async () => {\n      const { getByTestId } = render(\n        <TestWrapper>\n          <LevelSelection />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(getByTestId('level-selection-container')).toBeTruthy();\n      });\n\n      // Cliquer rapidement plusieurs fois\n      const level1Button = getByTestId('level-1');\n      \n      for (let i = 0; i < 5; i++) {\n        fireEvent.press(level1Button);\n      }\n\n      // L'app ne devrait pas crasher\n      expect(getByTestId('level-selection-container')).toBeTruthy();\n    });\n  });\n\n  describe('Data Consistency', () => {\n    it('should maintain data consistency across components', async () => {\n      // Simuler des données de progression\n      const progressData = {\n        vocabulary: { level1: 25, level2: 0 },\n        spelling: { level1: 15, level2: 0 },\n      };\n\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key.startsWith('progress_')) {\n          const [, exercise, level] = key.split('_');\n          return Promise.resolve(JSON.stringify({\n            percentage: progressData[exercise]?.[`level${level}`] || 0\n          }));\n        }\n        return Promise.resolve(null);\n      });\n\n      // Test Dashboard\n      const { getByTestId: getDashboardTestId } = render(\n        <TestWrapper>\n          <Dashboard />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(getDashboardTestId('dashboard-container')).toBeTruthy();\n      });\n\n      // Test LevelSelection\n      const { getByTestId: getLevelTestId } = render(\n        <TestWrapper>\n          <LevelSelection />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(getLevelTestId('level-selection-container')).toBeTruthy();\n      });\n\n      // Les deux composants devraient afficher des données cohérentes\n      // (Vérification implicite via le rendu sans erreur)\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}