0f5b7495d126a7868488cd8bc44b819a
_getJestObj().mock('../../../src/components/exercise-common/InstructionBox/style', function () {
  return {
    container: {
      container: true
    },
    standardContainer: {
      standard: true
    },
    compactContainer: {
      compact: true
    },
    highlightedContainer: {
      highlighted: true
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _InstructionBox = _interopRequireDefault(require("../../../src/components/exercise-common/InstructionBox"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('InstructionBox', function () {
  var defaultProps = {
    title: 'Test Instructions',
    instructions: 'Test instruction text',
    examples: ['Example 1', 'Example 2'],
    tips: ['Tip 1', 'Tip 2']
  };
  it('renders with standard variant by default', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_InstructionBox.default, Object.assign({}, defaultProps))),
      getByText = _render.getByText;
    expect(getByText('Test Instructions')).toBeTruthy();
    expect(getByText('Test instruction text')).toBeTruthy();
  });
  it('renders with compact variant', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_InstructionBox.default, Object.assign({}, defaultProps, {
        variant: "compact"
      }))),
      getByText = _render2.getByText;
    expect(getByText('Test Instructions')).toBeTruthy();
  });
  it('renders with highlighted variant', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_InstructionBox.default, Object.assign({}, defaultProps, {
        variant: "highlighted"
      }))),
      getByText = _render3.getByText;
    expect(getByText('Test Instructions')).toBeTruthy();
  });
  it('renders without instructions when not provided', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_InstructionBox.default, Object.assign({}, defaultProps, {
        instructions: null
      }))),
      queryByText = _render4.queryByText;
    expect(queryByText('Test instruction text')).toBeNull();
  });
  it('renders without examples when empty array', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_InstructionBox.default, Object.assign({}, defaultProps, {
        examples: []
      }))),
      queryByText = _render5.queryByText;
    expect(queryByText('Exemples:')).toBeNull();
  });
  it('renders without tips when empty array', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_InstructionBox.default, Object.assign({}, defaultProps, {
        tips: []
      }))),
      queryByText = _render6.queryByText;
    expect(queryByText('Astuces:')).toBeNull();
  });
  it('applies custom primary color', function () {
    var customColor = '#FF0000';
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_InstructionBox.default, Object.assign({}, defaultProps, {
        primaryColor: customColor
      }))),
      getByText = _render7.getByText;
    expect(getByText('Test Instructions')).toBeTruthy();
  });
  it('starts collapsed when initiallyExpanded is false', function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_InstructionBox.default, Object.assign({}, defaultProps, {
        initiallyExpanded: false
      }))),
      queryByText = _render8.queryByText;
    expect(queryByText('Test instruction text')).toBeNull();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,