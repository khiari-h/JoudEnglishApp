{"version":3,"names":["_getJestObj","mock","_require","require","Text","Ionicons","props","_jsxRuntime","jsx","testID","name","children","_interopRequireDefault","_react","_reactNative","_OptionsList","_require2","jest","describe","options","id","text","onSelectOptionMock","fn","afterEach","mockClear","it","_render","render","default","getByText","expect","toBeTruthy","_render2","onSelectOption","fireEvent","press","toHaveBeenCalledWith","_render3","disabled","not","toHaveBeenCalled","_render4","selectedOptionId","queryAllByTestId","length","toBe","_render5","optionStyle","parent","style","toEqual","arrayContaining","objectContaining","flexDirection","_render6","layout","getByTestId","gridContainer","flexWrap","width","stringMatching","oneOption","_render7","_render8","_render9","correctOptionId","showCorrectAnswer","_render0","_render1"],"sources":["OptionsList.test.js"],"sourcesContent":["import React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport OptionsList from '../../../src/components/exercise-common/OptionsList';\n\n// Mock des icônes\njest.mock('@expo/vector-icons', () => {\n    const { Text } = require('react-native');\n    return {\n        Ionicons: (props) => <Text testID={`icon-${props.name}`}>{props.name}</Text>,\n    };\n});\n\ndescribe('OptionsList', () => {\n    const options = [\n        { id: '1', text: 'Apple' },\n        { id: '2', text: 'Banana' },\n        { id: '3', text: 'Cherry' },\n    ];\n    const onSelectOptionMock = jest.fn();\n\n    afterEach(() => {\n        onSelectOptionMock.mockClear();\n    });\n\n    // --- Tests de rendu de base ---\n    it('renders all options correctly', () => {\n        const { getByText } = render(<OptionsList options={options} />);\n        expect(getByText('Apple')).toBeTruthy();\n        expect(getByText('Banana')).toBeTruthy();\n        expect(getByText('Cherry')).toBeTruthy();\n    });\n\n    it('calls onSelectOption with the correct id when an option is pressed', () => {\n        const { getByText } = render(\n            <OptionsList options={options} onSelectOption={onSelectOptionMock} />\n        );\n        fireEvent.press(getByText('Banana'));\n        expect(onSelectOptionMock).toHaveBeenCalledWith('2');\n    });\n\n    it('does not call onSelectOption when disabled', () => {\n        const { getByText } = render(\n            <OptionsList options={options} onSelectOption={onSelectOptionMock} disabled={true} />\n        );\n        fireEvent.press(getByText('Banana'));\n        expect(onSelectOptionMock).not.toHaveBeenCalled();\n    });\n\n    it('shows no correctness icons when an option is just selected', () => {\n        const { queryAllByTestId } = render(\n            <OptionsList options={options} selectedOptionId={'1'} />\n        );\n        expect(queryAllByTestId('icon-checkmark-circle').length).toBe(0);\n        expect(queryAllByTestId('icon-close-circle').length).toBe(0);\n    });\n\n    // --- Tests de mise en page et de logique ---\n    describe('Layout and Logic', () => {\n        it('renders with vertical layout by default', () => {\n            const { getByText } = render(<OptionsList options={options} />);\n            const optionStyle = getByText('Apple').parent.props.style;\n            expect(optionStyle).toEqual(expect.arrayContaining([\n                expect.objectContaining({ flexDirection: 'row' })\n            ]));\n        });\n\n        it('renders with grid layout when specified', () => {\n            const { getByText, getByTestId } = render(<OptionsList options={options} layout=\"grid\" />);\n            \n            // On vérifie que le conteneur principal a le bon style de grille\n            const gridContainer = getByTestId('grid-container');\n            expect(gridContainer.props.style).toEqual(\n              expect.objectContaining({ flexDirection: 'row', flexWrap: 'wrap' })\n            );\n\n            // On vérifie que les options individuelles ont le style de la grille\n            const optionStyle = getByText('Apple').parent.props.style;\n            expect(optionStyle).toEqual(expect.arrayContaining([\n              expect.objectContaining({\n                width: expect.stringMatching(/^\\d+(\\.\\d+)?%$/),\n              })\n            ]));\n        });\n        \n        it('renders correctly with only one option in vertical layout', () => {\n            const oneOption = [{ id: '1', text: 'One' }];\n            const { getByText } = render(<OptionsList options={oneOption} />);\n            expect(getByText('One')).toBeTruthy();\n        });\n\n        it('renders correctly with only one option in grid layout', () => {\n            const oneOption = [{ id: '1', text: 'One' }];\n            const { getByText } = render(<OptionsList options={oneOption} layout=\"grid\" />);\n            expect(getByText('One')).toBeTruthy();\n        });\n    });\n\n    // --- Tests d'affichage de la réponse ---\n    describe('when showing correct answer', () => {\n        it('shows a checkmark for the correct answer', () => {\n            const { getByTestId } = render(\n                <OptionsList\n                    options={options}\n                    selectedOptionId={'2'}\n                    correctOptionId={'2'}\n                    showCorrectAnswer={true}\n                />\n            );\n            expect(getByTestId('icon-checkmark-circle')).toBeTruthy();\n        });\n\n        it('shows a cross for the incorrect selection and a checkmark for the correct answer', () => {\n            const { getByTestId, queryAllByTestId } = render(\n                <OptionsList\n                    options={options}\n                    selectedOptionId={'1'}\n                    correctOptionId={'2'}\n                    showCorrectAnswer={true}\n                />\n            );\n            expect(getByTestId('icon-close-circle')).toBeTruthy();\n            expect(queryAllByTestId('icon-checkmark-circle').length).toBe(1);\n        });\n        \n        it('handles correct and incorrect answers in grid layout', () => {\n            const { getByTestId, queryAllByTestId } = render(\n                <OptionsList\n                    options={options}\n                    selectedOptionId={'1'}\n                    correctOptionId={'2'}\n                    showCorrectAnswer={true}\n                    layout=\"grid\"\n                />\n            );\n            expect(getByTestId('icon-close-circle')).toBeTruthy();\n            expect(queryAllByTestId('icon-checkmark-circle').length).toBe(1);\n        });\n    });\n});"],"mappings":"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","ignoreList":[]}