0e73bf8e01017f79b0bf193bf9cdb96f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = require("react");
var _reactNative = require("react-native");
var _expoLinearGradient = require("expo-linear-gradient");
var _expoRouter = require("expo-router");
var _ThemeContext = require("../../contexts/ThemeContext");
var _ProgressContext = require("../../contexts/ProgressContext");
var _CurrentLevelContext = require("../../contexts/CurrentLevelContext");
var _useRealTimeProgress2 = _interopRequireDefault(require("../../hooks/useRealTimeProgress"));
var _useDashboardLevel2 = require("./hooks/useDashboardLevel");
var _useDashboardState2 = require("./hooks/useDashboardState");
var _useLastActivity2 = _interopRequireDefault(require("../../hooks/useLastActivity"));
var _Container = _interopRequireWildcard(require("../../components/layout/Container"));
var _ModernHeader = _interopRequireDefault(require("./components/ModernHeader"));
var _HeroContinueSection = _interopRequireDefault(require("./components/HeroContinueSection"));
var _QuickActions = _interopRequireDefault(require("./components/QuickActions"));
var _SimpleMetrics = _interopRequireDefault(require("./components/SimpleMetrics"));
var _LearningProgress = _interopRequireDefault(require("./components/LearningProgress"));
var _RevisionOrchestrator = _interopRequireDefault(require("../VocabularyRevision/RevisionOrchestrator"));
var _constants = require("../../utils/constants");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var Dashboard = function Dashboard() {
  var themeContext = (0, _react.useContext)(_ThemeContext.ThemeContext);
  var progressData = (0, _ProgressContext.useProgress)();
  var _useRealTimeProgress = (0, _useRealTimeProgress2.default)(),
    getLevelProgress = _useRealTimeProgress.getLevelProgress,
    refreshProgress = _useRealTimeProgress.refresh;
  var colors = (themeContext == null ? void 0 : themeContext.colors) || {
    background: "#F8FAFC",
    primary: "#3B82F6",
    surface: "#FFFFFF",
    text: "#1F2937",
    textSecondary: "#6B7280"
  };
  var _useDashboardLevel = (0, _useDashboardLevel2.useDashboardLevel)({
      progress: progressData.progress
    }),
    currentLevel = _useDashboardLevel.currentLevel,
    handleChangeActiveLevel = _useDashboardLevel.handleChangeActiveLevel,
    levelColor = _useDashboardLevel.levelColor;
  var _useCurrentLevel = (0, _CurrentLevelContext.useCurrentLevel)(),
    setCurrentLevel = _useCurrentLevel.setCurrentLevel;
  var _useLastActivity = (0, _useLastActivity2.default)(),
    lastActivity = _useLastActivity.lastActivity,
    isActivityLoading = _useLastActivity.isLoading,
    reloadActivity = _useLastActivity.reload;
  var _useDashboardState = (0, _useDashboardState2.useDashboardState)(reloadActivity),
    refreshing = _useDashboardState.refreshing,
    originalOnRefresh = _useDashboardState.onRefresh;
  var onRefresh = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    yield Promise.all([originalOnRefresh(), refreshProgress()]);
  }), [originalOnRefresh, refreshProgress]);
  var handleContinue = (0, _react.useCallback)(function (activity) {
    if (activity === "levelSelection") {
      _expoRouter.router.push("/(tabs)/levelSelection");
      return;
    }
    var type = activity.type,
      level = activity.level,
      mode = activity.mode;
    var exercise = Object.values(_constants.EXERCISES).find(function (ex) {
      return ex.id === type;
    });
    if (exercise) {
      var params = {
        level: level
      };
      if (mode && type === "vocabulary") params.mode = mode;
      _expoRouter.router.push({
        pathname: exercise.route,
        params: params
      });
    }
  }, []);
  var handleChangeLevelVisual = (0, _react.useCallback)(function (levelId) {
    handleChangeActiveLevel(levelId);
    setCurrentLevel(levelId);
  }, [handleChangeActiveLevel, setCurrentLevel]);
  var handleLevelSelect = (0, _react.useCallback)(function (level) {
    setCurrentLevel(level);
    _expoRouter.router.push(`/tabs/exerciseSelection?level=${level}`);
  }, [setCurrentLevel]);
  var allLevels = ['1', '2', '3', '4', '5', '6', 'bonus'].map(function (levelKey) {
    var levelInfo = _constants.LANGUAGE_LEVELS[levelKey];
    var progress = getLevelProgress(levelKey);
    return {
      id: levelKey,
      title: levelInfo.title,
      color: levelInfo.color,
      icon: levelInfo.icon,
      progress: progress,
      isActive: levelKey === currentLevel,
      isCompleted: progress >= 100
    };
  });
  var globalProgress = getLevelProgress(currentLevel);
  if (progressData.isLoading) {
    return (0, _jsxRuntime.jsx)(_Container.default, {
      safeArea: true,
      backgroundColor: colors.background,
      withPadding: true,
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _style.default.loadingContainer,
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [_style.default.loadingText, {
            color: colors.primary
          }],
          children: "Chargement du tableau de bord..."
        })
      })
    });
  }
  var backgroundGradient = {
    colors: [`${levelColor}05`, colors.background, `${levelColor}08`],
    locations: [0, 0.6, 1]
  };
  return (0, _jsxRuntime.jsx)(_Container.default, {
    safeArea: true,
    safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.NO_BOTTOM,
    withScrollView: false,
    backgroundColor: "transparent",
    statusBarStyle: "light-content",
    withPadding: false,
    children: (0, _jsxRuntime.jsxs)(_expoLinearGradient.LinearGradient, {
      colors: backgroundGradient.colors,
      locations: backgroundGradient.locations,
      start: {
        x: 0,
        y: 0
      },
      end: {
        x: 0,
        y: 1
      },
      style: _style.default.container,
      children: [(0, _jsxRuntime.jsx)(_ModernHeader.default, {
        level: currentLevel,
        levelColor: levelColor
      }), (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
        style: _style.default.scrollView,
        contentContainerStyle: _style.default.scrollContent,
        showsVerticalScrollIndicator: false,
        refreshControl: (0, _jsxRuntime.jsx)(_reactNative.RefreshControl, {
          refreshing: refreshing,
          onRefresh: onRefresh,
          colors: [levelColor],
          tintColor: levelColor
        }),
        children: [(0, _jsxRuntime.jsx)(_HeroContinueSection.default, {
          lastActivity: lastActivity,
          onPress: handleContinue,
          accentColor: levelColor,
          isLoading: isActivityLoading
        }), (0, _jsxRuntime.jsx)(_QuickActions.default, {
          currentLevel: currentLevel,
          progressContext: progressData,
          accentColor: levelColor
        }), (0, _jsxRuntime.jsx)(_SimpleMetrics.default, {
          accentColor: levelColor
        }), (0, _jsxRuntime.jsx)(_LearningProgress.default, {
          globalProgress: globalProgress,
          levels: allLevels,
          currentLevel: currentLevel,
          onSelectLevel: handleLevelSelect,
          onChangeLevelVisual: handleChangeLevelVisual,
          primaryColor: levelColor
        }), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: _style.default.bottomSpacer
        })]
      }), (0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {
        currentLevel: currentLevel
      })]
    })
  });
};
var _default = exports.default = Dashboard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,