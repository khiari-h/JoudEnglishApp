{"version":3,"names":["_react","require","_reactNative","_asyncStorage","_interopRequireDefault","usePhrases","phrasesData","level","handleStorageError","error","operation","fallback","arguments","length","undefined","console","warn","STORAGE_KEY","_useState","useState","_useState2","_slicedToArray2","default","categoryIndex","setCategoryIndex","_useState3","_useState4","phraseIndex","setPhraseIndex","_useState5","_useState6","showTranslation","setShowTranslation","_useState7","_useState8","completedPhrases","setCompletedPhrases","_useState9","_useState0","loaded","setLoaded","_useState1","_useState10","showDetailedProgress","setShowDetailedProgress","isInitialized","useRef","categories","allPhrases","phrases","currentCategory","currentPhrases","filter","phrase","categoryId","id","currentPhrase","totalPhrasesInCategory","hasValidData","log","categoriesLength","currentCategoryName","name","currentPhrasesLength","allPhrasesLength","categoriesWithPhrases","cat","some","useEffect","loadData","_ref","_asyncToGenerator2","savedData","AsyncStorage","getItem","_JSON$parse","JSON","parse","savedCompleted","apply","current","validCategoryIndex","validPhraseIndex","newCompletedPhrases","forEach","_","index","saveData","useCallback","dataToSave","lastPosition","setItem","stringify","changeCategory","newCategoryIndex","goToNextPhrase","prev","goToPreviousPhrase","toggleTranslation","toggleDetailedProgress","markPhraseAsCompleted","catIndex","pIndex","categoryCompleted","includes","Object","assign","_defineProperty2","concat","_toConsumableArray2","findNextUncompletedCategory","numCategories","_loop","_completedPhrases$nex","nextIndex","i","category","categoryPhrases","p","completedInCategory","v","_ret","handleNext","completed","nextCategoryIndex","Alert","alert","handlePrevious","stats","useMemo","_completedPhrases$cat","totalPhrases","completedPhrasesCount","totalProgress","completionProgress","completedInCurrentCategory","totalInCurrentCategory","values","reduce","sum","Math","round","display","phraseCounter","categoriesNames","map","canGoToPrevious","isLastPhraseInCategory","totalCategories","_default","exports"],"sources":["usePhrases.js"],"sourcesContent":["// src/screens/exercises/phrases/hooks/usePhrases.js - VERSION CORRIGÉE\n\nimport { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { Alert } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n/**\n * 🎯 Hook unifié pour Phrases Exercise\n * Remplace usePhrasesExerciseState + usePhrasesProgress + usePhrasesDisplay\n * Simple, efficace, maintenable - pattern identique à useReading, useGrammar et useVocabulary\n */\nconst usePhrases = (phrasesData, level) => {\n  // =================== ERROR HANDLING HELPER ===================\n  const handleStorageError = (error, operation, fallback = null) => {\n    console.warn(`Phrases storage error in ${operation}:`, error);\n    return fallback;\n  };\n\n  // =================== STORAGE KEY ===================\n  const STORAGE_KEY = `phrases_${level}`;\n\n  // =================== STATE ===================\n  const [categoryIndex, setCategoryIndex] = useState(0);\n  const [phraseIndex, setPhraseIndex] = useState(0);\n  const [showTranslation, setShowTranslation] = useState(false);\n  const [completedPhrases, setCompletedPhrases] = useState({});\n  const [loaded, setLoaded] = useState(false);\n  const [showDetailedProgress, setShowDetailedProgress] = useState(false);\n\n  const isInitialized = useRef(false);\n\n  // =================== COMPUTED VALUES ===================\n  const categories = phrasesData?.categories || [];\n  // ✅ CORRIGÉ : Les phrases sont dans phrasesData.phrases, pas dans les catégories\n  const allPhrases = phrasesData?.phrases || [];\n  const currentCategory = categories[categoryIndex];\n  \n  // ✅ CORRIGÉ : Filtrer les phrases par catégorie actuelle\n  const currentPhrases = allPhrases.filter(phrase => phrase.categoryId === currentCategory?.id) || [];\n  const currentPhrase = currentPhrases[phraseIndex];\n  const totalPhrasesInCategory = currentPhrases.length;\n  \n  // ✅ CORRIGÉ : hasValidData vérifie que nous avons des données et des catégories avec des phrases\n  const hasValidData = phrasesData && categories.length > 0 && allPhrases.length > 0;\n\n  // ✅ AJOUTÉ : Debug pour comprendre pourquoi hasValidData est false\n  console.log('🔍 DEBUG usePhrases:', {\n    categoryIndex,\n    phraseIndex,\n    categoriesLength: categories.length,\n    currentCategory: !!currentCategory,\n    currentCategoryName: currentCategory?.name,\n    currentPhrasesLength: currentPhrases.length,\n    allPhrasesLength: allPhrases.length,\n    hasValidData,\n    phrasesData: !!phrasesData,\n    // ✅ AJOUTÉ : Vérifier la structure des données\n    categoriesWithPhrases: categories.filter(cat => \n      allPhrases.some(phrase => phrase.categoryId === cat.id)\n    ).length\n  });\n\n  // =================== DATA LOADING ===================\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const savedData = await AsyncStorage.getItem(STORAGE_KEY);\n        if (savedData) {\n          const { completedPhrases: savedCompleted } = JSON.parse(savedData);\n          setCompletedPhrases(savedCompleted || {});\n          // ✅ SUPPRIMÉ : Initialisation des indices ici car phrasesData n'est pas encore disponible\n        }\n      } catch (error) {\n        // ✅ Gestion d'erreur appropriée\n        handleStorageError(error, 'loadData');\n        // Fallback: utiliser les valeurs par défaut\n      } finally {\n        setLoaded(true);\n      }\n    };\n    loadData();\n  }, [level]); // ✅ CORRIGÉ : Supprimé phrasesData des dépendances\n\n  // ✅ AJOUTÉ : Initialisation des indices quand phrasesData est disponible\n  useEffect(() => {\n    if (loaded && phrasesData && categories.length > 0 && !isInitialized.current) {\n      // Initialiser les indices avec des valeurs valides\n      const validCategoryIndex = 0; // Commencer par la première catégorie\n      const validPhraseIndex = 0;   // Commencer par la première phrase\n      \n      setCategoryIndex(validCategoryIndex);\n      setPhraseIndex(validPhraseIndex);\n      \n      // ✅ CORRIGÉ : Initialiser les phrases complétées avec un objet vide\n      const newCompletedPhrases = {};\n      categories.forEach((_, index) => {\n        newCompletedPhrases[index] = [];\n      });\n      setCompletedPhrases(newCompletedPhrases);\n      \n      isInitialized.current = true;\n    }\n  }, [loaded, phrasesData, categories.length]); // ✅ CORRIGÉ : Dépendances simplifiées\n\n  // Save data to storage\n  const saveData = useCallback(async () => {\n    try {\n      const dataToSave = {\n        completedPhrases,\n        lastPosition: {\n          categoryIndex,\n          phraseIndex\n        }\n      };\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(dataToSave));\n    } catch (error) {\n      // ✅ Gestion d'erreur appropriée\n      handleStorageError(error, 'saveData');\n      // Fallback: continuer sans sauvegarde\n    }\n  }, [completedPhrases, categoryIndex, phraseIndex, STORAGE_KEY]);\n\n  // Auto-save when data changes\n  useEffect(() => {\n    if (loaded && isInitialized.current) saveData();\n  }, [loaded, isInitialized.current]); // ✅ CORRIGÉ : Ajouté isInitialized.current\n\n  // =================== NAVIGATION ACTIONS ===================\n  const changeCategory = useCallback((newCategoryIndex) => {\n    if (newCategoryIndex !== categoryIndex && newCategoryIndex >= 0 && newCategoryIndex < categories.length && isInitialized.current) {\n      setCategoryIndex(newCategoryIndex);\n      setPhraseIndex(0);\n      setShowTranslation(false);\n    }\n  }, [categoryIndex, categories.length, isInitialized.current]);\n\n  const goToNextPhrase = useCallback(() => {\n    if (phraseIndex < totalPhrasesInCategory - 1 && isInitialized.current) {\n      setPhraseIndex(prev => prev + 1);\n      setShowTranslation(false);\n    }\n  }, [phraseIndex, totalPhrasesInCategory, isInitialized.current]);\n\n  const goToPreviousPhrase = useCallback(() => {\n    if (phraseIndex > 0 && isInitialized.current) {\n      setPhraseIndex(prev => prev - 1); // ✅ CORRIGÉ : prev - 1, pas prev + 1\n      setShowTranslation(false);\n      return true;\n    }\n    return false;\n  }, [phraseIndex, isInitialized.current]);\n\n  const toggleTranslation = useCallback(() => {\n    setShowTranslation(prev => !prev);\n  }, []);\n\n  const toggleDetailedProgress = useCallback(() => {\n    setShowDetailedProgress(prev => !prev);\n  }, []);\n\n  // =================== COMPLETION LOGIC ===================\n  const markPhraseAsCompleted = useCallback((catIndex, pIndex) => {\n    if (!isInitialized.current) return; // ✅ AJOUTÉ : Protection contre l'accès avant initialisation\n    \n    setCompletedPhrases(prev => {\n      const categoryCompleted = prev[catIndex] || [];\n      if (!categoryCompleted.includes(pIndex)) {\n        return {\n          ...prev,\n          [catIndex]: [...categoryCompleted, pIndex]\n        };\n      }\n      return prev;\n    });\n  }, [isInitialized.current]);\n\n  // Find next uncompleted category\n  const findNextUncompletedCategory = useCallback(() => {\n    const numCategories = categories.length;\n    for (let i = 1; i <= numCategories; i++) {\n      const nextIndex = (categoryIndex + i) % numCategories;\n      const category = categories[nextIndex];\n      // ✅ CORRIGÉ : Utiliser allPhrases au lieu de currentPhrases\n      const categoryPhrases = allPhrases.filter(p => p.categoryId === category.id);\n      const completedInCategory = completedPhrases[nextIndex]?.length || 0;\n      \n      if (completedInCategory < categoryPhrases.length) {\n        return nextIndex;\n      }\n    }\n    return -1;\n  }, [categories, categoryIndex, allPhrases, completedPhrases]);\n\n  // =================== MAIN NAVIGATION ===================\n  const handleNext = useCallback(() => {\n    if (!isInitialized.current) return { completed: false }; // ✅ AJOUTÉ : Protection contre l'accès avant initialisation\n    \n    // Mark current phrase as completed\n    markPhraseAsCompleted(categoryIndex, phraseIndex);\n\n    // Check if there are more phrases in current category\n    if (phraseIndex < totalPhrasesInCategory - 1) {\n      goToNextPhrase();\n    } else {\n      // End of category - find next uncompleted category\n      const nextCategoryIndex = findNextUncompletedCategory();\n      if (nextCategoryIndex === -1) {\n        // All done!\n        Alert.alert(\n          \"Félicitations\",\n          \"Vous avez terminé tous les exercices de phrases !\"\n        );\n        return { completed: true };\n      } else {\n        changeCategory(nextCategoryIndex);\n      }\n    }\n    return { completed: false };\n  }, [categoryIndex, phraseIndex, totalPhrasesInCategory, markPhraseAsCompleted, goToNextPhrase, findNextUncompletedCategory, changeCategory, isInitialized.current]);\n\n  const handlePrevious = useCallback(() => {\n    if (!isInitialized.current) return; // ✅ AJOUTÉ : Protection contre l'accès avant initialisation\n    goToPreviousPhrase();\n  }, [goToPreviousPhrase, isInitialized.current]);\n\n  // =================== COMPUTED STATS ===================\n  const stats = useMemo(() => {\n    if (!isInitialized.current) { // ✅ AJOUTÉ : Protection contre le calcul avant initialisation\n      return {\n        totalPhrases: 0,\n        completedPhrasesCount: 0,\n        totalProgress: 0,\n        completionProgress: 0,\n        completedInCurrentCategory: 0,\n        totalInCurrentCategory: 0\n      };\n    }\n    \n    const totalPhrases = currentPhrases.length;\n    const completedPhrasesCount = Object.values(completedPhrases).reduce((sum, completed) => sum + (completed?.length || 0), 0);\n    const totalProgress = totalPhrases > 0 ? Math.round((completedPhrasesCount / totalPhrases) * 100) : 0;\n    const completionProgress = totalPhrasesInCategory > 0 ? ((phraseIndex + 1) / totalPhrasesInCategory) * 100 : 0;\n\n    return {\n      totalPhrases,\n      completedPhrasesCount,\n      totalProgress,\n      completionProgress,\n      completedInCurrentCategory: completedPhrases[categoryIndex]?.length || 0,\n      totalInCurrentCategory: totalPhrasesInCategory\n    };\n  }, [currentPhrases, completedPhrases, totalPhrasesInCategory, phraseIndex, categoryIndex, isInitialized.current]);\n\n  // =================== COMPUTED DISPLAY ===================\n  const display = useMemo(() => {\n    if (!isInitialized.current) { // ✅ AJOUTÉ : Protection contre le calcul avant initialisation\n      return {\n        phraseCounter: \"0 / 0\",\n        categories: [],\n        currentPhrase: null,\n        currentCategory: null,\n        currentPhrases: []\n      };\n    }\n    \n    const phraseCounter = `${phraseIndex + 1} / ${totalPhrasesInCategory || 0}`;\n    const categoriesNames = categories.map(cat => cat.name);\n    \n    return {\n      phraseCounter,\n      categories: categoriesNames,\n      currentPhrase,\n      currentCategory,\n      currentPhrases\n    };\n  }, [phraseIndex, totalPhrasesInCategory, categories, currentPhrase, currentCategory, currentPhrases, isInitialized.current]);\n\n  // =================== VALIDATION ===================\n  const canGoToPrevious = phraseIndex > 0;\n  const isLastPhraseInCategory = phraseIndex === totalPhrasesInCategory - 1;\n\n  return {\n    // State\n    categoryIndex,\n    phraseIndex,\n    showTranslation,\n    completedPhrases,\n    loaded,\n    showDetailedProgress,\n    \n    // Data\n    currentPhrase,\n    currentCategory,\n    currentPhrases,\n    totalCategories: categories.length,\n    totalPhrasesInCategory,\n    hasValidData,\n    \n    // Actions\n    changeCategory,\n    toggleTranslation,\n    toggleDetailedProgress,\n    handleNext,\n    handlePrevious,\n    \n    // Computed\n    canGoToPrevious,\n    isLastPhraseInCategory,\n    stats, // ✅ OPTIMISÉ : Objet mémorisé\n    display, // ✅ OPTIMISÉ : Objet mémorisé\n  };\n};\n\nexport default usePhrases;"],"mappings":"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","ignoreList":[]}