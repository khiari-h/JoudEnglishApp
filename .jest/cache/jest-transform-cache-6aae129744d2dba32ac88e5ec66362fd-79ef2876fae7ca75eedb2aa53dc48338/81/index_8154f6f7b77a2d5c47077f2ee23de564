c374a497395124e1567fe0cde24630ee
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
function cov_2qhpuk5f5c() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\data\\phrases\\4\\index.js";
  var hash = "46d33d65ee169d0823080ebc0d4cfe812b0eab44";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\data\\phrases\\4\\index.js",
    statementMap: {
      "0": {
        start: {
          line: 33,
          column: 18
        },
        end: {
          line: 60,
          column: 1
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "46d33d65ee169d0823080ebc0d4cfe812b0eab44"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_2qhpuk5f5c = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2qhpuk5f5c();
import { CATEGORIES, DIFFICULTY, CATEGORY_DESCRIPTIONS, USAGE_NOTES, LEVEL_INFO, CONTENT_STATS, LEARNING_SEQUENCE } from './metadata.js';
import argumentsDebates from './categories/arguments-debates.js';
import advantagesDisadvantages from './categories/advantages-disadvantages.js';
import hypothesesConditions from './categories/hypotheses-conditions.js';
import meetingsPresentations from './categories/meetings-presentations.js';
import causeConsequence from './categories/cause-consequence.js';
import complaintsProblemSolving from './categories/complaints-problem-solving.js';
import idiomaticExpressions from './categories/idiomatic-expressions.js';
import diplomaticCommunication from './categories/diplomatic-communication.js';
import artsLiterature from './categories/arts-literature.js';
import economyPolitics from './categories/economy-politics.js';
import complexProcesses from './categories/complex-processes.js';
import retrospectiveReflection from './categories/retrospective-reflection.js';
import advancedHealth from './categories/advanced-health.js';
import environmentSocialIssues from './categories/environment-social-issues.js';
var phrasesB2 = (cov_2qhpuk5f5c().s[0]++, {
  difficulty: DIFFICULTY,
  categoryDescriptions: CATEGORY_DESCRIPTIONS,
  usageNotes: USAGE_NOTES,
  levelInfo: LEVEL_INFO,
  contentStats: CONTENT_STATS,
  learningSequence: LEARNING_SEQUENCE,
  categories: CATEGORIES,
  phrases: [].concat(_toConsumableArray(argumentsDebates), _toConsumableArray(advantagesDisadvantages), _toConsumableArray(hypothesesConditions), _toConsumableArray(meetingsPresentations), _toConsumableArray(causeConsequence), _toConsumableArray(complaintsProblemSolving), _toConsumableArray(idiomaticExpressions), _toConsumableArray(diplomaticCommunication), _toConsumableArray(artsLiterature), _toConsumableArray(economyPolitics), _toConsumableArray(complexProcesses), _toConsumableArray(retrospectiveReflection), _toConsumableArray(advancedHealth), _toConsumableArray(environmentSocialIssues))
});
export default phrasesB2;
export { argumentsDebates, advantagesDisadvantages, hypothesesConditions, meetingsPresentations, causeConsequence, complaintsProblemSolving, idiomaticExpressions, diplomaticCommunication, artsLiterature, economyPolitics, complexProcesses, retrospectiveReflection, advancedHealth, environmentSocialIssues, CATEGORIES, DIFFICULTY, CATEGORY_DESCRIPTIONS, USAGE_NOTES, LEVEL_INFO, CONTENT_STATS, LEARNING_SEQUENCE };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDQVRFR09SSUVTIiwiRElGRklDVUxUWSIsIkNBVEVHT1JZX0RFU0NSSVBUSU9OUyIsIlVTQUdFX05PVEVTIiwiTEVWRUxfSU5GTyIsIkNPTlRFTlRfU1RBVFMiLCJMRUFSTklOR19TRVFVRU5DRSIsImFyZ3VtZW50c0RlYmF0ZXMiLCJhZHZhbnRhZ2VzRGlzYWR2YW50YWdlcyIsImh5cG90aGVzZXNDb25kaXRpb25zIiwibWVldGluZ3NQcmVzZW50YXRpb25zIiwiY2F1c2VDb25zZXF1ZW5jZSIsImNvbXBsYWludHNQcm9ibGVtU29sdmluZyIsImlkaW9tYXRpY0V4cHJlc3Npb25zIiwiZGlwbG9tYXRpY0NvbW11bmljYXRpb24iLCJhcnRzTGl0ZXJhdHVyZSIsImVjb25vbXlQb2xpdGljcyIsImNvbXBsZXhQcm9jZXNzZXMiLCJyZXRyb3NwZWN0aXZlUmVmbGVjdGlvbiIsImFkdmFuY2VkSGVhbHRoIiwiZW52aXJvbm1lbnRTb2NpYWxJc3N1ZXMiLCJwaHJhc2VzQjIiLCJjb3ZfMnFocHVrNWY1YyIsInMiLCJkaWZmaWN1bHR5IiwiY2F0ZWdvcnlEZXNjcmlwdGlvbnMiLCJ1c2FnZU5vdGVzIiwibGV2ZWxJbmZvIiwiY29udGVudFN0YXRzIiwibGVhcm5pbmdTZXF1ZW5jZSIsImNhdGVnb3JpZXMiLCJwaHJhc2VzIiwiY29uY2F0IiwiX3RvQ29uc3VtYWJsZUFycmF5Il0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2RhdGEvZXhlcmNpc2VzL3BocmFzZXMvYjIvaW5kZXguanNcbi8vIEZpY2hpZXIgaW5kZXggcG91ciBsZSBuaXZlYXUgQjJcbi8vIEltcG9ydGUgdG91dGVzIGxlcyBjYXTDqWdvcmllcyBldCBsZXMgZXhwb3J0ZSBjb21tZSB1biBzZXVsIG9iamV0XG5cbmltcG9ydCB7IENBVEVHT1JJRVMsIERJRkZJQ1VMVFksIENBVEVHT1JZX0RFU0NSSVBUSU9OUywgVVNBR0VfTk9URVMsIExFVkVMX0lORk8sIENPTlRFTlRfU1RBVFMsIExFQVJOSU5HX1NFUVVFTkNFIH0gZnJvbSAnLi9tZXRhZGF0YS5qcyc7XG5pbXBvcnQgYXJndW1lbnRzRGViYXRlcyBmcm9tICcuL2NhdGVnb3JpZXMvYXJndW1lbnRzLWRlYmF0ZXMuanMnO1xuaW1wb3J0IGFkdmFudGFnZXNEaXNhZHZhbnRhZ2VzIGZyb20gJy4vY2F0ZWdvcmllcy9hZHZhbnRhZ2VzLWRpc2FkdmFudGFnZXMuanMnO1xuaW1wb3J0IGh5cG90aGVzZXNDb25kaXRpb25zIGZyb20gJy4vY2F0ZWdvcmllcy9oeXBvdGhlc2VzLWNvbmRpdGlvbnMuanMnO1xuaW1wb3J0IG1lZXRpbmdzUHJlc2VudGF0aW9ucyBmcm9tICcuL2NhdGVnb3JpZXMvbWVldGluZ3MtcHJlc2VudGF0aW9ucy5qcyc7XG5pbXBvcnQgY2F1c2VDb25zZXF1ZW5jZSBmcm9tICcuL2NhdGVnb3JpZXMvY2F1c2UtY29uc2VxdWVuY2UuanMnO1xuaW1wb3J0IGNvbXBsYWludHNQcm9ibGVtU29sdmluZyBmcm9tICcuL2NhdGVnb3JpZXMvY29tcGxhaW50cy1wcm9ibGVtLXNvbHZpbmcuanMnO1xuaW1wb3J0IGlkaW9tYXRpY0V4cHJlc3Npb25zIGZyb20gJy4vY2F0ZWdvcmllcy9pZGlvbWF0aWMtZXhwcmVzc2lvbnMuanMnO1xuaW1wb3J0IGRpcGxvbWF0aWNDb21tdW5pY2F0aW9uIGZyb20gJy4vY2F0ZWdvcmllcy9kaXBsb21hdGljLWNvbW11bmljYXRpb24uanMnO1xuaW1wb3J0IGFydHNMaXRlcmF0dXJlIGZyb20gJy4vY2F0ZWdvcmllcy9hcnRzLWxpdGVyYXR1cmUuanMnO1xuaW1wb3J0IGVjb25vbXlQb2xpdGljcyBmcm9tICcuL2NhdGVnb3JpZXMvZWNvbm9teS1wb2xpdGljcy5qcyc7XG5pbXBvcnQgY29tcGxleFByb2Nlc3NlcyBmcm9tICcuL2NhdGVnb3JpZXMvY29tcGxleC1wcm9jZXNzZXMuanMnO1xuaW1wb3J0IHJldHJvc3BlY3RpdmVSZWZsZWN0aW9uIGZyb20gJy4vY2F0ZWdvcmllcy9yZXRyb3NwZWN0aXZlLXJlZmxlY3Rpb24uanMnO1xuaW1wb3J0IGFkdmFuY2VkSGVhbHRoIGZyb20gJy4vY2F0ZWdvcmllcy9hZHZhbmNlZC1oZWFsdGguanMnO1xuaW1wb3J0IGVudmlyb25tZW50U29jaWFsSXNzdWVzIGZyb20gJy4vY2F0ZWdvcmllcy9lbnZpcm9ubWVudC1zb2NpYWwtaXNzdWVzLmpzJztcblxuLyoqXG4gKiBDb250aWVudCB0b3V0ZXMgbGVzIGRvbm7DqWVzIHBvdXIgbGVzIHBocmFzZXMgZGUgbml2ZWF1IEIyXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBQaHJhc2VzQjJcbiAqIEBwcm9wZXJ0eSB7QXJyYXk8T2JqZWN0Pn0gY2F0ZWdvcmllcyAtIExpc3RlIGRlcyBjYXTDqWdvcmllc1xuICogQHByb3BlcnR5IHtBcnJheTxPYmplY3Q+fSBwaHJhc2VzIC0gTGlzdGUgY29tcGzDqHRlIGRlcyBwaHJhc2VzIGRlIHRvdXRlcyBsZXMgY2F0w6lnb3JpZXNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkaWZmaWN1bHR5IC0gTml2ZWF1IGRlIGRpZmZpY3VsdMOpIENFQ1JcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBjYXRlZ29yeURlc2NyaXB0aW9ucyAtIERlc2NyaXB0aW9ucyBkw6l0YWlsbMOpZXMgZGUgY2hhcXVlIGNhdMOpZ29yaWVcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSB1c2FnZU5vdGVzIC0gTm90ZXMgc3VyIGwndXRpbGlzYXRpb24gZm9ybWVsbGUvaW5mb3JtZWxsZVxuICogQHByb3BlcnR5IHtPYmplY3R9IGxldmVsSW5mbyAtIEluZm9ybWF0aW9ucyBzdXIgbGUgbml2ZWF1IEIyXG4gKiBAcHJvcGVydHkge09iamVjdH0gY29udGVudFN0YXRzIC0gU3RhdGlzdGlxdWVzIHN1ciBsZSBjb250ZW51XG4gKiBAcHJvcGVydHkge0FycmF5PHN0cmluZz59IGxlYXJuaW5nU2VxdWVuY2UgLSBTw6lxdWVuY2UgZCdhcHByZW50aXNzYWdlIHJlY29tbWFuZMOpZVxuICovXG5jb25zdCBwaHJhc2VzQjIgPSB7XG4gIC8vIE3DqXRhZG9ubsOpZXNcbiAgZGlmZmljdWx0eTogRElGRklDVUxUWSxcbiAgY2F0ZWdvcnlEZXNjcmlwdGlvbnM6IENBVEVHT1JZX0RFU0NSSVBUSU9OUyxcbiAgdXNhZ2VOb3RlczogVVNBR0VfTk9URVMsXG4gIGxldmVsSW5mbzogTEVWRUxfSU5GTyxcbiAgY29udGVudFN0YXRzOiBDT05URU5UX1NUQVRTLFxuICBsZWFybmluZ1NlcXVlbmNlOiBMRUFSTklOR19TRVFVRU5DRSxcblxuICAvLyBEb25uw6llcyBwcmluY2lwYWxlc1xuICBjYXRlZ29yaWVzOiBDQVRFR09SSUVTLFxuICBwaHJhc2VzOiBbXG4gICAgLi4uYXJndW1lbnRzRGViYXRlcyxcbiAgICAuLi5hZHZhbnRhZ2VzRGlzYWR2YW50YWdlcyxcbiAgICAuLi5oeXBvdGhlc2VzQ29uZGl0aW9ucyxcbiAgICAuLi5tZWV0aW5nc1ByZXNlbnRhdGlvbnMsXG4gICAgLi4uY2F1c2VDb25zZXF1ZW5jZSxcbiAgICAuLi5jb21wbGFpbnRzUHJvYmxlbVNvbHZpbmcsXG4gICAgLi4uaWRpb21hdGljRXhwcmVzc2lvbnMsXG4gICAgLi4uZGlwbG9tYXRpY0NvbW11bmljYXRpb24sXG4gICAgLi4uYXJ0c0xpdGVyYXR1cmUsXG4gICAgLi4uZWNvbm9teVBvbGl0aWNzLFxuICAgIC4uLmNvbXBsZXhQcm9jZXNzZXMsXG4gICAgLi4ucmV0cm9zcGVjdGl2ZVJlZmxlY3Rpb24sXG4gICAgLi4uYWR2YW5jZWRIZWFsdGgsXG4gICAgLi4uZW52aXJvbm1lbnRTb2NpYWxJc3N1ZXNcbiAgXVxufTtcblxuLy8gRXhwb3J0IHByaW5jaXBhbCAocG91ciBpbXBvcnQgZGVmYXVsdClcbmV4cG9ydCBkZWZhdWx0IHBocmFzZXNCMjtcblxuLy8gRXhwb3J0cyBub21tw6lzIHBvdXIgcGVybWV0dHJlIGQnaW1wb3J0ZXIgZGVzIGNhdMOpZ29yaWVzIHNww6ljaWZpcXVlc1xuZXhwb3J0IHsgXG4gIGFyZ3VtZW50c0RlYmF0ZXMsXG4gIGFkdmFudGFnZXNEaXNhZHZhbnRhZ2VzLFxuICBoeXBvdGhlc2VzQ29uZGl0aW9ucyxcbiAgbWVldGluZ3NQcmVzZW50YXRpb25zLFxuICBjYXVzZUNvbnNlcXVlbmNlLFxuICBjb21wbGFpbnRzUHJvYmxlbVNvbHZpbmcsXG4gIGlkaW9tYXRpY0V4cHJlc3Npb25zLFxuICBkaXBsb21hdGljQ29tbXVuaWNhdGlvbixcbiAgYXJ0c0xpdGVyYXR1cmUsXG4gIGVjb25vbXlQb2xpdGljcyxcbiAgY29tcGxleFByb2Nlc3NlcyxcbiAgcmV0cm9zcGVjdGl2ZVJlZmxlY3Rpb24sXG4gIGFkdmFuY2VkSGVhbHRoLFxuICBlbnZpcm9ubWVudFNvY2lhbElzc3VlcyxcbiAgQ0FURUdPUklFUyxcbiAgRElGRklDVUxUWSxcbiAgQ0FURUdPUllfREVTQ1JJUFRJT05TLFxuICBVU0FHRV9OT1RFUyxcbiAgTEVWRUxfSU5GTyxcbiAgQ09OVEVOVF9TVEFUUyxcbiAgTEVBUk5JTkdfU0VRVUVOQ0Vcbn07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFJQSxTQUFTQSxVQUFVLEVBQUVDLFVBQVUsRUFBRUMscUJBQXFCLEVBQUVDLFdBQVcsRUFBRUMsVUFBVSxFQUFFQyxhQUFhLEVBQUVDLGlCQUFpQixRQUFRLGVBQWU7QUFDeEksT0FBT0MsZ0JBQWdCLE1BQU0sbUNBQW1DO0FBQ2hFLE9BQU9DLHVCQUF1QixNQUFNLDBDQUEwQztBQUM5RSxPQUFPQyxvQkFBb0IsTUFBTSx1Q0FBdUM7QUFDeEUsT0FBT0MscUJBQXFCLE1BQU0sd0NBQXdDO0FBQzFFLE9BQU9DLGdCQUFnQixNQUFNLG1DQUFtQztBQUNoRSxPQUFPQyx3QkFBd0IsTUFBTSw0Q0FBNEM7QUFDakYsT0FBT0Msb0JBQW9CLE1BQU0sdUNBQXVDO0FBQ3hFLE9BQU9DLHVCQUF1QixNQUFNLDBDQUEwQztBQUM5RSxPQUFPQyxjQUFjLE1BQU0saUNBQWlDO0FBQzVELE9BQU9DLGVBQWUsTUFBTSxrQ0FBa0M7QUFDOUQsT0FBT0MsZ0JBQWdCLE1BQU0sbUNBQW1DO0FBQ2hFLE9BQU9DLHVCQUF1QixNQUFNLDBDQUEwQztBQUM5RSxPQUFPQyxjQUFjLE1BQU0saUNBQWlDO0FBQzVELE9BQU9DLHVCQUF1QixNQUFNLDJDQUEyQztBQWMvRSxJQUFNQyxTQUFTLElBQUFDLGNBQUEsR0FBQUMsQ0FBQSxPQUFHO0VBRWhCQyxVQUFVLEVBQUV2QixVQUFVO0VBQ3RCd0Isb0JBQW9CLEVBQUV2QixxQkFBcUI7RUFDM0N3QixVQUFVLEVBQUV2QixXQUFXO0VBQ3ZCd0IsU0FBUyxFQUFFdkIsVUFBVTtFQUNyQndCLFlBQVksRUFBRXZCLGFBQWE7RUFDM0J3QixnQkFBZ0IsRUFBRXZCLGlCQUFpQjtFQUduQ3dCLFVBQVUsRUFBRTlCLFVBQVU7RUFDdEIrQixPQUFPLEtBQUFDLE1BQUEsQ0FBQUMsa0JBQUEsQ0FDRjFCLGdCQUFnQixHQUFBMEIsa0JBQUEsQ0FDaEJ6Qix1QkFBdUIsR0FBQXlCLGtCQUFBLENBQ3ZCeEIsb0JBQW9CLEdBQUF3QixrQkFBQSxDQUNwQnZCLHFCQUFxQixHQUFBdUIsa0JBQUEsQ0FDckJ0QixnQkFBZ0IsR0FBQXNCLGtCQUFBLENBQ2hCckIsd0JBQXdCLEdBQUFxQixrQkFBQSxDQUN4QnBCLG9CQUFvQixHQUFBb0Isa0JBQUEsQ0FDcEJuQix1QkFBdUIsR0FBQW1CLGtCQUFBLENBQ3ZCbEIsY0FBYyxHQUFBa0Isa0JBQUEsQ0FDZGpCLGVBQWUsR0FBQWlCLGtCQUFBLENBQ2ZoQixnQkFBZ0IsR0FBQWdCLGtCQUFBLENBQ2hCZix1QkFBdUIsR0FBQWUsa0JBQUEsQ0FDdkJkLGNBQWMsR0FBQWMsa0JBQUEsQ0FDZGIsdUJBQXVCO0FBRTlCLENBQUM7QUFHRCxlQUFlQyxTQUFTO0FBR3hCLFNBQ0VkLGdCQUFnQixFQUNoQkMsdUJBQXVCLEVBQ3ZCQyxvQkFBb0IsRUFDcEJDLHFCQUFxQixFQUNyQkMsZ0JBQWdCLEVBQ2hCQyx3QkFBd0IsRUFDeEJDLG9CQUFvQixFQUNwQkMsdUJBQXVCLEVBQ3ZCQyxjQUFjLEVBQ2RDLGVBQWUsRUFDZkMsZ0JBQWdCLEVBQ2hCQyx1QkFBdUIsRUFDdkJDLGNBQWMsRUFDZEMsdUJBQXVCLEVBQ3ZCcEIsVUFBVSxFQUNWQyxVQUFVLEVBQ1ZDLHFCQUFxQixFQUNyQkMsV0FBVyxFQUNYQyxVQUFVLEVBQ1ZDLGFBQWEsRUFDYkMsaUJBQWlCIiwiaWdub3JlTGlzdCI6W119