fe18b18e527ccb80c16da182bc240b72
_getJestObj().mock('expo-router', function () {
  return {
    useFocusEffect: jest.fn(function (callback) {
      return callback();
    }),
    router: {
      push: jest.fn(),
      back: jest.fn()
    },
    Stack: function Stack(_ref) {
      var children = _ref.children;
      return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
        children: children
      });
    },
    useLocalSearchParams: function useLocalSearchParams() {
      return {};
    },
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn(),
        canGoBack: jest.fn(function () {
          return true;
        }),
        addListener: jest.fn(),
        isFocused: jest.fn(function () {
          return true;
        })
      };
    }
  };
});
_getJestObj().mock('../../src/hooks/useRevisionData', function () {
  return jest.fn(function () {
    return {
      revisionQuestions: [],
      isLoading: false,
      error: null,
      stats: {
        totalLearned: 0
      },
      hasEnoughWords: false,
      canGenerateQuestions: false
    };
  });
});
_getJestObj().mock('../../src/hooks/useQuizEngine', function () {
  return jest.fn(function () {
    return {
      currentQuestion: null,
      isFinished: false,
      score: 0,
      totalQuestions: 0,
      showResult: false,
      goToNextQuestion: jest.fn(),
      handleAnswer: jest.fn(),
      handleRestart: jest.fn()
    };
  });
});
_getJestObj().mock('../../src/hooks/useRevisionManager', function () {
  return jest.fn(function () {
    return {
      markRevisionCompleted: mockMarkRevisionCompleted
    };
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _expoRouter = require("expo-router");
var _VocabularyRevision = _interopRequireDefault(require("../../src/screens/VocabularyRevision"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockRevisionQuestions = [{
  id: 'q1',
  type: 'word',
  word: 'testWord1',
  options: ['correct1', 'wrong1', 'wrong2', 'wrong3'],
  correctAnswer: 'correct1'
}, {
  id: 'q2',
  type: 'word',
  word: 'testWord2',
  options: ['wrong1', 'correct2', 'wrong2', 'wrong3'],
  correctAnswer: 'correct2'
}, {
  id: 'q3',
  type: 'word',
  word: 'testWord3',
  options: ['wrong1', 'wrong2', 'correct3', 'wrong3'],
  correctAnswer: 'correct3'
}];
var mockMarkRevisionCompleted = jest.fn();
var useRevisionData = require('../../src/hooks/useRevisionData');
var useQuizEngine = require('../../src/hooks/useQuizEngine');
describe('Test d\'intégration: Parcours de révision de vocabulaire', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    useRevisionData.mockReturnValue({
      revisionQuestions: [],
      isLoading: false,
      error: null,
      stats: {
        totalLearned: 0
      },
      hasEnoughWords: false,
      canGenerateQuestions: false
    });
    useQuizEngine.mockReturnValue({
      currentQuestion: null,
      isFinished: false,
      score: 0,
      totalQuestions: 0,
      showResult: false,
      goToNextQuestion: jest.fn(),
      handleAnswer: jest.fn(),
      handleRestart: jest.fn()
    });
  });
  describe('Chargement et affichage des questions', function () {
    test('Affiche la première question de révision correctement', (0, _asyncToGenerator2.default)(function* () {
      useRevisionData.mockReturnValue({
        revisionQuestions: mockRevisionQuestions,
        isLoading: false,
        error: null,
        stats: {
          totalLearned: 100
        },
        hasEnoughWords: true,
        canGenerateQuestions: true
      });
      useQuizEngine.mockReturnValue({
        currentQuestion: mockRevisionQuestions[0],
        isFinished: false,
        score: 0,
        totalQuestions: mockRevisionQuestions.length,
        showResult: false,
        goToNextQuestion: jest.fn(),
        handleAnswer: jest.fn(),
        handleRestart: jest.fn()
      });
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {
          route: {
            params: {
              level: 'mixed',
              questionsCount: 3
            }
          }
        })),
        getByText = _render.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('testWord1')).toBeTruthy();
        expect(getByText('correct1')).toBeTruthy();
        expect(getByText('wrong1')).toBeTruthy();
        expect(getByText('wrong2')).toBeTruthy();
        expect(getByText('wrong3')).toBeTruthy();
      });
    }));
    test('Affiche un état de chargement quand les données sont en cours de récupération', (0, _asyncToGenerator2.default)(function* () {
      useRevisionData.mockReturnValue({
        revisionQuestions: [],
        isLoading: true,
        error: null,
        stats: {
          totalLearned: 0
        },
        hasEnoughWords: false,
        canGenerateQuestions: false
      });
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {
          route: {
            params: {
              level: 'mixed',
              questionsCount: 3
            }
          }
        })),
        getByTestId = _render2.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('loading-indicator')).toBeTruthy();
      });
    }));
    test('Affiche un message d\'erreur quand il n\'y a pas assez de mots', (0, _asyncToGenerator2.default)(function* () {
      useRevisionData.mockReturnValue({
        revisionQuestions: [],
        isLoading: false,
        error: null,
        stats: {
          totalLearned: 2
        },
        hasEnoughWords: false,
        canGenerateQuestions: false
      });
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {
          route: {
            params: {
              level: 'mixed',
              questionsCount: 10
            }
          }
        })),
        getByText = _render3.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText(/pas assez de mots/i) || getByText(/insuffisant/i)).toBeTruthy();
      });
    }));
  });
  describe('Gestion des réponses et navigation', function () {
    test('Gère correctement une réponse correcte', (0, _asyncToGenerator2.default)(function* () {
      var mockHandleAnswer = jest.fn(function () {
        return true;
      });
      useRevisionData.mockReturnValue({
        revisionQuestions: mockRevisionQuestions,
        isLoading: false,
        error: null,
        stats: {
          totalLearned: 100
        },
        hasEnoughWords: true,
        canGenerateQuestions: true
      });
      useQuizEngine.mockReturnValue({
        currentQuestion: mockRevisionQuestions[0],
        isFinished: false,
        score: 0,
        totalQuestions: mockRevisionQuestions.length,
        showResult: false,
        goToNextQuestion: jest.fn(),
        handleAnswer: mockHandleAnswer,
        handleRestart: jest.fn()
      });
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {
          route: {
            params: {
              level: 'mixed',
              questionsCount: 3
            }
          }
        })),
        getByText = _render4.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('testWord1')).toBeTruthy();
      });
      _reactNative.fireEvent.press(getByText('correct1'));
      expect(mockHandleAnswer).toHaveBeenCalledWith('correct1');
    }));
    test('Passe à la question suivante après avoir répondu', (0, _asyncToGenerator2.default)(function* () {
      var mockGoToNextQuestion = jest.fn();
      useRevisionData.mockReturnValue({
        revisionQuestions: mockRevisionQuestions,
        isLoading: false,
        error: null,
        stats: {
          totalLearned: 100
        },
        hasEnoughWords: true,
        canGenerateQuestions: true
      });
      useQuizEngine.mockReturnValue({
        currentQuestion: mockRevisionQuestions[0],
        isFinished: false,
        score: 0,
        totalQuestions: mockRevisionQuestions.length,
        showResult: false,
        goToNextQuestion: mockGoToNextQuestion,
        handleAnswer: jest.fn(function () {
          return true;
        }),
        handleRestart: jest.fn()
      });
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {
          route: {
            params: {
              level: 'mixed',
              questionsCount: 3
            }
          }
        })),
        getByText = _render5.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('testWord1')).toBeTruthy();
      });
      _reactNative.fireEvent.press(getByText('correct1'));
      var continueButton = getByText('Continuer') || getByText('Suivant');
      if (continueButton) {
        _reactNative.fireEvent.press(continueButton);
        expect(mockGoToNextQuestion).toHaveBeenCalled();
      }
    }));
  });
  describe('Affichage des résultats finaux', function () {
    test('Affiche les résultats finaux après la dernière question', (0, _asyncToGenerator2.default)(function* () {
      useRevisionData.mockReturnValue({
        revisionQuestions: mockRevisionQuestions,
        isLoading: false,
        error: null,
        stats: {
          totalLearned: 100
        },
        hasEnoughWords: true,
        canGenerateQuestions: true
      });
      useQuizEngine.mockReturnValue({
        currentQuestion: mockRevisionQuestions[2],
        isFinished: true,
        score: 2,
        totalQuestions: mockRevisionQuestions.length,
        showResult: true,
        goToNextQuestion: jest.fn(),
        handleAnswer: jest.fn(),
        handleRestart: jest.fn()
      });
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {
          route: {
            params: {
              level: 'mixed',
              questionsCount: 3
            }
          }
        })),
        getByText = _render6.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText(/Résultats/i) || getByText(/Terminé/i)).toBeTruthy();
        expect(getByText(/Score/i) || getByText(/2.*3/)).toBeTruthy();
      });
    }));
    test('Sauvegarde les résultats de la révision', (0, _asyncToGenerator2.default)(function* () {
      useRevisionData.mockReturnValue({
        revisionQuestions: mockRevisionQuestions,
        isLoading: false,
        error: null,
        stats: {
          totalLearned: 100
        },
        hasEnoughWords: true,
        canGenerateQuestions: true
      });
      useQuizEngine.mockReturnValue({
        currentQuestion: mockRevisionQuestions[2],
        isFinished: true,
        score: 3,
        totalQuestions: mockRevisionQuestions.length,
        showResult: true,
        goToNextQuestion: jest.fn(),
        handleAnswer: jest.fn(),
        handleRestart: jest.fn()
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {
        route: {
          params: {
            level: 'mixed',
            questionsCount: 3
          }
        }
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockMarkRevisionCompleted).toHaveBeenCalledWith(mockRevisionQuestions, 3, 3);
      });
    }));
    test('Permet de terminer et retourner à l\'écran précédent', (0, _asyncToGenerator2.default)(function* () {
      useRevisionData.mockReturnValue({
        revisionQuestions: mockRevisionQuestions,
        isLoading: false,
        error: null,
        stats: {
          totalLearned: 100
        },
        hasEnoughWords: true,
        canGenerateQuestions: true
      });
      useQuizEngine.mockReturnValue({
        currentQuestion: mockRevisionQuestions[2],
        isFinished: true,
        score: 1,
        totalQuestions: mockRevisionQuestions.length,
        showResult: true,
        goToNextQuestion: jest.fn(),
        handleAnswer: jest.fn(),
        handleRestart: jest.fn()
      });
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {
          route: {
            params: {
              level: 'mixed',
              questionsCount: 3
            }
          }
        })),
        getByText = _render7.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText(/Résultats/i) || getByText(/Terminé/i)).toBeTruthy();
      });
      var finishButton = getByText('Terminer') || getByText('Fermer') || getByText('Retour');
      if (finishButton) {
        _reactNative.fireEvent.press(finishButton);
        expect(_expoRouter.router.back).toHaveBeenCalled();
      }
    }));
    test('Affiche le pourcentage de réussite correct', (0, _asyncToGenerator2.default)(function* () {
      useRevisionData.mockReturnValue({
        revisionQuestions: mockRevisionQuestions,
        isLoading: false,
        error: null,
        stats: {
          totalLearned: 100
        },
        hasEnoughWords: true,
        canGenerateQuestions: true
      });
      useQuizEngine.mockReturnValue({
        currentQuestion: mockRevisionQuestions[2],
        isFinished: true,
        score: 2,
        totalQuestions: 3,
        showResult: true,
        goToNextQuestion: jest.fn(),
        handleAnswer: jest.fn(),
        handleRestart: jest.fn()
      });
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {
          route: {
            params: {
              level: 'mixed',
              questionsCount: 3
            }
          }
        })),
        getByText = _render8.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText(/67%/i) || getByText(/2.*3/) || getByText(/Score.*2/)).toBeTruthy();
      });
    }));
  });
  describe('Gestion des erreurs et cas limites', function () {
    test('Gère gracieusement les erreurs de chargement des données', (0, _asyncToGenerator2.default)(function* () {
      useRevisionData.mockReturnValue({
        revisionQuestions: [],
        isLoading: false,
        error: 'Erreur de chargement des données de révision',
        stats: {
          totalLearned: 0
        },
        hasEnoughWords: false,
        canGenerateQuestions: false
      });
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {
          route: {
            params: {
              level: 'mixed',
              questionsCount: 3
            }
          }
        })),
        getByText = _render9.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText(/Erreur/i) || getByText(/problème/i)).toBeTruthy();
      });
    }));
    test('Gère correctement le redémarrage de la révision', (0, _asyncToGenerator2.default)(function* () {
      var mockHandleRestart = jest.fn();
      useRevisionData.mockReturnValue({
        revisionQuestions: mockRevisionQuestions,
        isLoading: false,
        error: null,
        stats: {
          totalLearned: 100
        },
        hasEnoughWords: true,
        canGenerateQuestions: true
      });
      useQuizEngine.mockReturnValue({
        currentQuestion: mockRevisionQuestions[2],
        isFinished: true,
        score: 1,
        totalQuestions: mockRevisionQuestions.length,
        showResult: true,
        goToNextQuestion: jest.fn(),
        handleAnswer: jest.fn(),
        handleRestart: mockHandleRestart
      });
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {
          route: {
            params: {
              level: 'mixed',
              questionsCount: 3
            }
          }
        })),
        getByText = _render0.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText(/Résultats/i)).toBeTruthy();
      });
      var restartButton = getByText('Recommencer') || getByText('Refaire');
      if (restartButton) {
        _reactNative.fireEvent.press(restartButton);
        expect(mockHandleRestart).toHaveBeenCalled();
      }
    }));
    test('Gère les paramètres de route invalides', (0, _asyncToGenerator2.default)(function* () {
      useRevisionData.mockReturnValue({
        revisionQuestions: [],
        isLoading: false,
        error: null,
        stats: {
          totalLearned: 0
        },
        hasEnoughWords: false,
        canGenerateQuestions: false
      });
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {
          route: {
            params: {
              level: 'invalid',
              questionsCount: -1
            }
          }
        })),
        getByText = _render1.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText(/Aucune question/i) || getByText(/Paramètres invalides/i) || getByText(/pas assez de mots/i)).toBeTruthy();
      });
    }));
  });
  describe('Parcours complet end-to-end', function () {
    test('Complète un parcours de révision complet avec succès', (0, _asyncToGenerator2.default)(function* () {
      var mockGoToNextQuestion = jest.fn();
      var mockHandleAnswer = jest.fn(function () {
        return true;
      });
      useRevisionData.mockReturnValue({
        revisionQuestions: mockRevisionQuestions,
        isLoading: false,
        error: null,
        stats: {
          totalLearned: 100
        },
        hasEnoughWords: true,
        canGenerateQuestions: true
      });
      useQuizEngine.mockReturnValue({
        currentQuestion: mockRevisionQuestions[0],
        isFinished: false,
        score: 0,
        totalQuestions: mockRevisionQuestions.length,
        showResult: false,
        goToNextQuestion: mockGoToNextQuestion,
        handleAnswer: mockHandleAnswer,
        handleRestart: jest.fn()
      });
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {
          route: {
            params: {
              level: 'mixed',
              questionsCount: 3
            }
          }
        })),
        getByText = _render10.getByText,
        rerender = _render10.rerender;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('testWord1')).toBeTruthy();
      });
      _reactNative.fireEvent.press(getByText('correct1'));
      useQuizEngine.mockReturnValue({
        currentQuestion: null,
        isFinished: true,
        score: 2,
        totalQuestions: mockRevisionQuestions.length,
        showResult: true,
        goToNextQuestion: mockGoToNextQuestion,
        handleAnswer: mockHandleAnswer,
        handleRestart: jest.fn()
      });
      rerender((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {
        route: {
          params: {
            level: 'mixed',
            questionsCount: 3
          }
        }
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText(/Résultats/i) || getByText(/Terminé/i)).toBeTruthy();
        expect(getByText(/2.*3/) || getByText(/Score.*2/)).toBeTruthy();
      });
      expect(mockMarkRevisionCompleted).toHaveBeenCalledWith(mockRevisionQuestions, 2, 3);
      var finishButton = getByText('Terminer') || getByText('Fermer');
      if (finishButton) {
        _reactNative.fireEvent.press(finishButton);
        expect(_expoRouter.router.back).toHaveBeenCalled();
      }
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,