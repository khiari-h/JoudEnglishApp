efda925bfbda373200a4cc2efdb3bda8
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    setItem: jest.fn(function () {
      return Promise.resolve();
    }),
    getItem: jest.fn(function () {
      return Promise.resolve(null);
    }),
    removeItem: jest.fn(function () {
      return Promise.resolve();
    })
  };
});
_getJestObj().mock('../../src/utils/constants', function () {
  return {
    STORAGE_KEYS: {
      LAST_ACTIVITY: 'last_activity'
    }
  };
});
_getJestObj().mock('../../src/utils/eventBus', function () {
  return {
    emit: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useLastActivity = _interopRequireDefault(require("../../src/hooks/useLastActivity"));
var _constants = require("../../src/utils/constants");
var _eventBus = require("../../src/utils/eventBus");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useLastActivity', function () {
  var MOCK_NOW = new Date('2025-01-01T12:00:00.000Z').getTime();
  beforeEach(function () {
    jest.useFakeTimers();
    jest.setSystemTime(MOCK_NOW);
    _asyncStorage.default.getItem.mockClear();
    _asyncStorage.default.setItem.mockClear();
    _asyncStorage.default.removeItem.mockClear();
    _eventBus.emit.mockClear();
  });
  afterEach(function () {
    jest.runOnlyPendingTimers();
    jest.useRealTimers();
  });
  it('initializes with null lastActivity and isLoading true, then false', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook.result;
    expect(result.current.lastActivity).toBeNull();
    expect(result.current.isLoading).toBe(true);
    yield (0, _reactNative.waitFor)(function () {
      return !result.current.isLoading;
    });
    expect(result.current.isLoading).toBe(false);
    expect(_asyncStorage.default.getItem).toHaveBeenCalledWith(_constants.STORAGE_KEYS.LAST_ACTIVITY);
  }));
  it('loads last activity from AsyncStorage and calculates timeElapsed', (0, _asyncToGenerator2.default)(function* () {
    var mockActivity = {
      type: 'exercise',
      level: '1',
      timestamp: MOCK_NOW - 5 * 60 * 1000
    };
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(mockActivity));
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook2.result;
    yield (0, _reactNative.waitFor)(function () {
      return !result.current.isLoading;
    });
    expect(result.current.lastActivity).toEqual(Object.assign({}, mockActivity, {
      timeElapsed: 'Il y a 5 min'
    }));
  }));
  it('saves new activity and updates state', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook3.result;
    yield (0, _reactNative.waitFor)(function () {
      return !result.current.isLoading;
    });
    var newActivityData = {
      type: 'quiz',
      level: '2'
    };
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.saveActivity(newActivityData);
    }));
    expect(_asyncStorage.default.setItem).toHaveBeenCalledWith(_constants.STORAGE_KEYS.LAST_ACTIVITY, JSON.stringify(Object.assign({}, newActivityData, {
      timestamp: MOCK_NOW
    })));
    expect(result.current.lastActivity).toEqual(Object.assign({}, newActivityData, {
      timestamp: MOCK_NOW,
      timeElapsed: 'À l\'instant'
    }));
    expect(_eventBus.emit).toHaveBeenCalledWith('progress-updated', Object.assign({}, newActivityData, {
      timestamp: MOCK_NOW
    }));
  }));
  it('clears activity from AsyncStorage and state', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify({
      type: 'exercise',
      level: '1',
      timestamp: MOCK_NOW
    }));
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook4.result;
    yield (0, _reactNative.waitFor)(function () {
      return !result.current.isLoading;
    });
    expect(result.current.lastActivity).not.toBeNull();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.clearActivity();
    }));
    expect(_asyncStorage.default.removeItem).toHaveBeenCalledWith(_constants.STORAGE_KEYS.LAST_ACTIVITY);
    expect(result.current.lastActivity).toBeNull();
  }));
  it('reloads activity when reload is called', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook5.result;
    yield (0, _reactNative.waitFor)(function () {
      return !result.current.isLoading;
    });
    _asyncStorage.default.getItem.mockClear();
    var updatedActivity = {
      type: 'reading',
      level: '3',
      timestamp: MOCK_NOW - 10 * 60 * 1000
    };
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(updatedActivity));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.reload();
    }));
    expect(_asyncStorage.default.getItem).toHaveBeenCalledWith(_constants.STORAGE_KEYS.LAST_ACTIVITY);
    expect(result.current.lastActivity).toEqual(Object.assign({}, updatedActivity, {
      timeElapsed: 'Il y a 10 min'
    }));
  }));
  it('calculates timeElapsed correctly for different durations', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook6.result;
    yield (0, _reactNative.waitFor)(function () {
      return !result.current.isLoading;
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.saveActivity({
        type: 'test',
        timestamp: MOCK_NOW
      });
    }));
    expect(result.current.lastActivity.timeElapsed).toBe('À l\'instant');
    jest.setSystemTime(MOCK_NOW + 30 * 60 * 1000);
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.reload();
    }));
    expect(result.current.lastActivity.timeElapsed).toBe('Il y a 30 min');
    jest.setSystemTime(MOCK_NOW + 60 * 60 * 1000);
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.reload();
    }));
    expect(result.current.lastActivity.timeElapsed).toBe('Il y a 1h');
    jest.setSystemTime(MOCK_NOW + 120 * 60 * 1000);
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.reload();
    }));
    expect(result.current.lastActivity.timeElapsed).toBe('Il y a 2h');
    jest.setSystemTime(MOCK_NOW + 24 * 60 * 60 * 1000);
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.reload();
    }));
    expect(result.current.lastActivity.timeElapsed).toBe('Il y a 1j');
    jest.setSystemTime(MOCK_NOW + 5 * 24 * 60 * 60 * 1000);
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.reload();
    }));
    expect(result.current.lastActivity.timeElapsed).toBe('Il y a 5j');
  }));
  it('handles AsyncStorage errors gracefully during load', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockRejectedValueOnce(new Error('Load error'));
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook7.result;
    yield (0, _reactNative.waitFor)(function () {
      return !result.current.isLoading;
    });
    expect(result.current.isLoading).toBe(false);
    expect(result.current.lastActivity).toBeNull();
  }));
  it('handles AsyncStorage errors gracefully during save', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook8.result;
    yield (0, _reactNative.waitFor)(function () {
      return !result.current.isLoading;
    });
    _asyncStorage.default.setItem.mockRejectedValueOnce(new Error('Save error'));
    var newActivityData = {
      type: 'quiz',
      level: '2'
    };
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.saveActivity(newActivityData);
    }));
    expect(_asyncStorage.default.setItem).toHaveBeenCalledTimes(1);
  }));
  it('handles AsyncStorage errors gracefully during clear', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook9.result;
    yield (0, _reactNative.waitFor)(function () {
      return !result.current.isLoading;
    });
    _asyncStorage.default.removeItem.mockRejectedValueOnce(new Error('Clear error'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.clearActivity();
    }));
    expect(_asyncStorage.default.removeItem).toHaveBeenCalledTimes(1);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,