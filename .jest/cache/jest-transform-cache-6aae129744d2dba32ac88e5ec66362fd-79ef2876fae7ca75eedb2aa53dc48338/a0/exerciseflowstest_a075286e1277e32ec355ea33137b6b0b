29089f0c5a247704048e50549ef0ec88
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _require = require('detox'),
  device = _require.device,
  expect = _require.expect,
  element = _require.element,
  by = _require.by,
  waitFor = _require.waitFor;
describe('JoudEnglishApp - Exercise Flows E2E', function () {
  beforeEach((0, _asyncToGenerator2.default)(function* () {
    yield device.reloadReactNative();
    yield waitFor(element(by.id('dashboard-container'))).toBeVisible().withTimeout(10000);
    try {
      yield element(by.id('level-selection-button')).tap();
      yield element(by.id('level-1')).tap();
    } catch (e) {
      try {
        yield element(by.text('Exercices')).tap();
      } catch (e2) {
        console.log('Could not navigate to exercises, skipping test');
        return;
      }
    }
    yield waitFor(element(by.id('exercise-selection-container'))).toBeVisible().withTimeout(5000);
  }));
  describe('Vocabulary Exercise Flow', function () {
    it('should complete a vocabulary exercise session', (0, _asyncToGenerator2.default)(function* () {
      yield element(by.id('vocabulary-exercise')).tap();
      yield waitFor(element(by.text('Vocabulaire'))).toBeVisible().withTimeout(8000);
      yield waitFor(element(by.id('vocabulary-word'))).toBeVisible().withTimeout(5000);
      try {
        yield element(by.id('reveal-translation-button')).tap();
        yield waitFor(element(by.id('vocabulary-translation'))).toBeVisible().withTimeout(3000);
      } catch (e) {
        console.log('Translation reveal not available');
      }
      for (var i = 0; i < 3; i++) {
        try {
          yield element(by.id('next-word-button')).tap();
          yield waitFor(element(by.text(`${i + 2}/`))).toBeVisible().withTimeout(3000);
        } catch (e) {
          console.log(`Could not advance to word ${i + 2}`);
          break;
        }
      }
      try {
        yield element(by.id('save-activity-button')).tap();
      } catch (e) {
        console.log('Save activity button not found');
      }
    }));
    it('should handle vocabulary exercise completion', (0, _asyncToGenerator2.default)(function* () {
      yield element(by.id('vocabulary-exercise')).tap();
      yield waitFor(element(by.text('Vocabulaire'))).toBeVisible().withTimeout(8000);
      try {
        yield waitFor(element(by.text('Terminer')).or(by.text('Finir'))).toBeVisible().withTimeout(3000);
        yield element(by.text('Terminer').or(by.text('Finir'))).tap();
        yield waitFor(element(by.text('Résultats')).or(by.text('Félicitations'))).toBeVisible().withTimeout(5000);
      } catch (e) {
        console.log('Exercise completion flow not available');
      }
    }));
  });
  describe('Spelling Exercise Flow', function () {
    it('should interact with spelling exercise', (0, _asyncToGenerator2.default)(function* () {
      yield element(by.id('spelling-exercise')).tap();
      yield waitFor(element(by.text('Orthographe'))).toBeVisible().withTimeout(8000);
      yield waitFor(element(by.id('spelling-input'))).toBeVisible().withTimeout(5000);
      try {
        yield element(by.id('spelling-input')).typeText('hello');
        yield waitFor(element(by.id('check-spelling-button'))).toBeVisible().withTimeout(3000);
        yield element(by.id('check-spelling-button')).tap();
        yield waitFor(element(by.id('spelling-feedback'))).toBeVisible().withTimeout(3000);
      } catch (e) {
        console.log('Spelling interaction not available');
      }
    }));
  });
  describe('Reading Exercise Flow', function () {
    it('should display and interact with reading content', (0, _asyncToGenerator2.default)(function* () {
      yield element(by.id('reading-exercise')).tap();
      yield waitFor(element(by.text('Lecture'))).toBeVisible().withTimeout(8000);
      yield waitFor(element(by.id('reading-text'))).toBeVisible().withTimeout(5000);
      try {
        yield element(by.id('reading-text')).scroll(200, 'down');
        yield element(by.id('reading-text')).scroll(200, 'up');
      } catch (e) {
        console.log('Reading scroll not available');
      }
      try {
        yield waitFor(element(by.id('reading-questions'))).toBeVisible().withTimeout(3000);
        yield element(by.id('answer-option-1')).tap();
        yield waitFor(element(by.id('question-feedback'))).toBeVisible().withTimeout(3000);
      } catch (e) {
        console.log('Reading questions not available');
      }
    }));
  });
  describe('Word Games Exercise Flow', function () {
    it('should interact with word games', (0, _asyncToGenerator2.default)(function* () {
      yield element(by.id('word-games-exercise')).tap();
      yield waitFor(element(by.text('Jeux de mots'))).toBeVisible().withTimeout(8000);
      yield waitFor(element(by.id('game-element'))).toBeVisible().withTimeout(5000);
      try {
        yield element(by.id('game-element')).tap();
        yield waitFor(element(by.id('game-score'))).toBeVisible().withTimeout(3000);
      } catch (e) {
        console.log('Game interaction not available');
      }
    }));
  });
  describe('Exercise Navigation and State', function () {
    it('should maintain state when navigating between exercises', (0, _asyncToGenerator2.default)(function* () {
      yield element(by.id('vocabulary-exercise')).tap();
      yield waitFor(element(by.text('Vocabulaire'))).toBeVisible().withTimeout(8000);
      try {
        yield element(by.id('next-word-button')).tap();
      } catch (e) {
        console.log('Could not advance word');
      }
      yield element(by.id('back-button')).tap();
      yield waitFor(element(by.id('exercise-selection-container'))).toBeVisible().withTimeout(5000);
      yield element(by.id('spelling-exercise')).tap();
      yield waitFor(element(by.text('Orthographe'))).toBeVisible().withTimeout(8000);
      yield element(by.id('back-button')).tap();
      yield element(by.id('vocabulary-exercise')).tap();
      try {
        yield waitFor(element(by.text('2/'))).toBeVisible().withTimeout(3000);
        console.log('State maintained correctly');
      } catch (e) {
        console.log('State not maintained or different UI structure');
      }
    }));
    it('should handle exercise interruption and resume', (0, _asyncToGenerator2.default)(function* () {
      yield element(by.id('vocabulary-exercise')).tap();
      yield waitFor(element(by.text('Vocabulaire'))).toBeVisible().withTimeout(8000);
      try {
        yield element(by.id('next-word-button')).tap();
        yield element(by.id('next-word-button')).tap();
      } catch (e) {
        console.log('Could not advance words');
      }
      yield device.reloadReactNative();
      yield waitFor(element(by.id('dashboard-container'))).toBeVisible().withTimeout(10000);
      try {
        yield waitFor(element(by.id('continue-activity-button'))).toBeVisible().withTimeout(3000);
        yield element(by.id('continue-activity-button')).tap();
        yield waitFor(element(by.text('Vocabulaire'))).toBeVisible().withTimeout(8000);
      } catch (e) {
        console.log('Resume functionality not available');
      }
    }));
  });
  describe('Exercise Performance and Loading', function () {
    it('should load exercises within acceptable time limits', (0, _asyncToGenerator2.default)(function* () {
      var exerciseIds = ['vocabulary-exercise', 'spelling-exercise', 'reading-exercise', 'phrases-exercise'];
      for (var exerciseId of exerciseIds) {
        var startTime = Date.now();
        try {
          yield element(by.id(exerciseId)).tap();
          yield waitFor(element(by.id('activity-indicator'))).not.toBeVisible().withTimeout(10000);
          var loadTime = Date.now() - startTime;
          console.log(`${exerciseId} loaded in ${loadTime}ms`);
          yield element(by.id('back-button')).tap();
          yield waitFor(element(by.id('exercise-selection-container'))).toBeVisible().withTimeout(5000);
        } catch (e) {
          console.log(`${exerciseId} failed to load within time limit`);
        }
      }
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,