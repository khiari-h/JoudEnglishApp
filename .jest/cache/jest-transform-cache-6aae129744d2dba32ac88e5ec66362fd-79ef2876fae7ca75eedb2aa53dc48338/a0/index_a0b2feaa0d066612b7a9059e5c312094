2c690722b77fbb015b2661c3ca568dbd
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = require("react");
var _reactNative = require("react-native");
var _native = require("@react-navigation/native");
var _expoRouter = require("expo-router");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _Container = _interopRequireWildcard(require("../../../components/layout/Container"));
var _AssessmentHeader = _interopRequireDefault(require("./AssessmentHeader"));
var _AssessmentProgress = _interopRequireDefault(require("./AssessmentProgress"));
var _AssessmentQuestion = _interopRequireDefault(require("./AssessmentQuestion"));
var _AssessmentNavigation = _interopRequireDefault(require("./AssessmentNavigation"));
var _AssessmentResults = _interopRequireDefault(require("./AssessmentResults"));
var _useAssessment2 = _interopRequireDefault(require("./hooks/useAssessment"));
var _useLastActivity2 = _interopRequireDefault(require("../../../hooks/useLastActivity"));
var _assessmentDataHelper = require("../../../utils/assessment/assessmentDataHelper");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var LevelAssessment = function LevelAssessment(_ref) {
  var route = _ref.route;
  var navigation = (0, _native.useNavigation)();
  var _ref2 = (route == null ? void 0 : route.params) || {},
    _ref2$level = _ref2.level,
    level = _ref2$level === void 0 ? "A1" : _ref2$level;
  var styles = (0, _style.default)();
  var _useLastActivity = (0, _useLastActivity2.default)(),
    saveActivity = _useLastActivity.saveActivity;
  var levelColor = (0, _assessmentDataHelper.getLevelColor)(level);
  var _useAssessment = (0, _useAssessment2.default)(level),
    currentSection = _useAssessment.currentSection,
    currentQuestionIndex = _useAssessment.currentQuestionIndex,
    selectedAnswer = _useAssessment.selectedAnswer,
    showFeedback = _useAssessment.showFeedback,
    testCompleted = _useAssessment.testCompleted,
    userAnswers = _useAssessment.userAnswers,
    loaded = _useAssessment.loaded,
    currentQuestion = _useAssessment.currentQuestion,
    totalSections = _useAssessment.totalSections,
    totalQuestionsInSection = _useAssessment.totalQuestionsInSection,
    handleSelectAnswer = _useAssessment.handleSelectAnswer,
    validateAnswer = _useAssessment.validateAnswer,
    tryAgain = _useAssessment.tryAgain,
    handleNext = _useAssessment.handleNext,
    handlePrevious = _useAssessment.handlePrevious,
    saveAssessmentResults = _useAssessment.saveAssessmentResults,
    resetAssessment = _useAssessment.resetAssessment,
    canGoToPrevious = _useAssessment.canGoToPrevious,
    isLastQuestionInSection = _useAssessment.isLastQuestionInSection,
    stats = _useAssessment.stats,
    display = _useAssessment.display;
  console.log('üîç DEBUG LevelAssessment render:', {
    loaded: loaded,
    currentSection: currentSection,
    currentQuestion: currentQuestion,
    totalSections: totalSections,
    sections: display == null ? void 0 : display.currentSectionIndex
  });
  var activityMetadata = (0, _react.useMemo)(function () {
    return {
      section: (display == null ? void 0 : display.currentSectionIndex) || 0,
      question: currentQuestionIndex,
      totalQuestions: totalQuestionsInSection,
      sectionTitle: (display == null ? void 0 : display.sectionTitle) || `Section ${((display == null ? void 0 : display.currentSectionIndex) || 0) + 1}`,
      totalSections: totalSections
    };
  }, [display == null ? void 0 : display.currentSectionIndex, currentQuestionIndex, totalQuestionsInSection, display == null ? void 0 : display.sectionTitle, totalSections]);
  var handleSaveActivity = (0, _react.useCallback)(function () {
    if (loaded && currentSection && currentQuestion && !testCompleted) {
      saveActivity({
        title: "√âvaluation",
        level: level,
        type: "assessment",
        metadata: activityMetadata
      });
    }
  }, [loaded, currentSection, currentQuestion, testCompleted, level, saveActivity, activityMetadata]);
  (0, _react.useEffect)(function () {
    handleSaveActivity();
  }, [handleSaveActivity]);
  var handleBackPress = (0, _react.useCallback)(function () {
    _expoRouter.router.push({
      pathname: "/tabs/exerciseSelection",
      params: {
        level: level
      }
    });
  }, [level]);
  var handleValidateAnswer = (0, _react.useCallback)(function () {
    return validateAnswer();
  }, [validateAnswer]);
  var handleNextQuestion = (0, _react.useCallback)(function () {
    var result = handleNext();
    if (result != null && result.completed) {
      var finalResults = {
        level: level,
        userScore: stats,
        sectionsCompleted: stats.totalSections,
        completedAt: new Date().toISOString()
      };
      saveAssessmentResults(finalResults);
    }
  }, [handleNext, level, stats, saveAssessmentResults]);
  var handlePreviousQuestion = (0, _react.useCallback)(function () {
    return handlePrevious();
  }, [handlePrevious]);
  var handleRetry = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      yield resetAssessment();
      console.log('üîÑ Assessment reset successfully');
    } catch (error) {
      console.warn('Error resetting assessment:', error);
    }
  }), [resetAssessment]);
  var handleContinue = (0, _react.useCallback)(function () {
    return navigation.navigate("Dashboard");
  }, [navigation]);
  if (!loaded || !currentSection || !currentQuestion) {
    return (0, _jsxRuntime.jsxs)(_Container.default, {
      safeArea: true,
      safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
      backgroundColor: "#f8fafc",
      statusBarStyle: "dark-content",
      children: [(0, _jsxRuntime.jsx)(_AssessmentHeader.default, {
        level: level,
        onBackPress: handleBackPress
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.loadingContainer,
        children: (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
          size: "large",
          color: levelColor,
          testID: "activity-indicator"
        })
      })]
    });
  }
  if (testCompleted) {
    return (0, _jsxRuntime.jsx)(_Container.default, {
      safeArea: true,
      safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
      backgroundColor: "#f8fafc",
      statusBarStyle: "dark-content",
      children: (0, _jsxRuntime.jsx)(_AssessmentResults.default, {
        level: level,
        levelColor: levelColor,
        userScore: stats,
        onContinue: handleContinue,
        onRetry: handleRetry
      })
    });
  }
  return (0, _jsxRuntime.jsxs)(_Container.default, {
    safeArea: true,
    safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
    withScrollView: true,
    backgroundColor: "#f8fafc",
    statusBarStyle: "dark-content",
    withPadding: false,
    scrollViewProps: {
      showsVerticalScrollIndicator: false,
      contentContainerStyle: styles.scrollContent
    },
    children: [(0, _jsxRuntime.jsx)(_AssessmentHeader.default, {
      level: level,
      onBackPress: handleBackPress
    }), (0, _jsxRuntime.jsx)(_AssessmentProgress.default, {
      currentSection: display.currentSectionIndex,
      totalSections: totalSections,
      sectionTitle: display.sectionTitle,
      currentQuestion: display.questionNumber,
      totalQuestions: totalQuestionsInSection,
      answeredQuestionsInSection: stats.answeredInCurrentSection,
      levelColor: levelColor,
      userAnswers: userAnswers,
      level: level
    }), (0, _jsxRuntime.jsx)(_AssessmentQuestion.default, {
      question: currentQuestion,
      selectedAnswer: selectedAnswer,
      showFeedback: showFeedback,
      levelColor: levelColor,
      onSelectAnswer: handleSelectAnswer
    }), (0, _jsxRuntime.jsx)(_AssessmentNavigation.default, {
      showFeedback: showFeedback,
      selectedAnswer: selectedAnswer,
      isLastQuestionInSection: isLastQuestionInSection,
      canGoPrevious: canGoToPrevious,
      levelColor: levelColor,
      onValidateAnswer: handleValidateAnswer,
      onTryAgain: tryAgain,
      onNext: handleNextQuestion,
      onPrevious: handlePreviousQuestion
    })]
  });
};
var _default = exports.default = LevelAssessment;
LevelAssessment.propTypes = {
  route: _propTypes.default.shape({
    params: _propTypes.default.shape({
      level: _propTypes.default.string
    })
  }).isRequired
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,