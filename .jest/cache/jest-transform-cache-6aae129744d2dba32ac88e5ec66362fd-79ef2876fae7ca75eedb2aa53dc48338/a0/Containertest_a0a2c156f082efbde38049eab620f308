ca1d746fb5d5b2942740ddc0748064e8
_getJestObj().mock('react-native-safe-area-context', function () {
  var _require = require('react-native'),
    View = _require.View;
  return {
    SafeAreaView: function SafeAreaView(_ref) {
      var children = _ref.children,
        style = _ref.style,
        edges = _ref.edges,
        rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      return (0, _jsxRuntime.jsx)(View, Object.assign({
        style: style
      }, rest, {
        testID: "mock-safe-area-view",
        edges: edges,
        children: children
      }));
    },
    useSafeAreaInsets: function useSafeAreaInsets() {
      return {
        top: 0,
        bottom: 0,
        left: 0,
        right: 0
      };
    },
    useSafeAreaFrame: function useSafeAreaFrame() {
      return {
        x: 0,
        y: 0,
        width: 320,
        height: 640
      };
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _Container = _interopRequireDefault(require("../../../src/components/layout/Container"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "style", "edges"];
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
beforeEach(function () {
  jest.clearAllMocks();
});
describe('Container', function () {
  it('renders children correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Hello World"
        })
      })),
      getByText = _render.getByText;
    expect(getByText('Hello World')).toBeTruthy();
  });
  it('uses SafeAreaView by default', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {})),
      getByTestId = _render2.getByTestId;
    expect(getByTestId('mock-safe-area-view')).toBeTruthy();
  });
  it('uses View when safeArea is false', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {
        safeArea: false
      })),
      queryByTestId = _render3.queryByTestId,
      UNSAFE_getByType = _render3.UNSAFE_getByType;
    expect(queryByTestId('mock-safe-area-view')).toBeNull();
    expect(UNSAFE_getByType(_reactNative2.View)).toBeTruthy();
  });
  it('applies padding by default', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {})),
      getByTestId = _render4.getByTestId;
    var container = getByTestId('mock-safe-area-view');
    var flatStyle = _reactNative2.StyleSheet.flatten(container.props.style);
    expect(flatStyle).toHaveProperty('padding', 16);
  });
  it('does not apply padding when withPadding is false', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {
        withPadding: false
      })),
      getByTestId = _render5.getByTestId;
    var container = getByTestId('mock-safe-area-view');
    var flatStyle = _reactNative2.StyleSheet.flatten(container.props.style);
    expect(flatStyle).not.toHaveProperty('padding', 16);
  });
  it('renders ScrollView when withScrollView is true', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {
        withScrollView: true,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Scrollable Content"
        })
      })),
      getByTestId = _render6.getByTestId,
      UNSAFE_getByType = _render6.UNSAFE_getByType,
      getByText = _render6.getByText;
    expect(UNSAFE_getByType(_reactNative2.ScrollView)).toBeTruthy();
    expect(getByTestId('mock-safe-area-view')).toBeTruthy();
    expect(getByText('Scrollable Content')).toBeTruthy();
  });
  it('passes scrollViewProps to ScrollView', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {
        withScrollView: true,
        scrollViewProps: {
          keyboardShouldPersistTaps: 'always'
        }
      })),
      UNSAFE_getByType = _render7.UNSAFE_getByType;
    expect(UNSAFE_getByType(_reactNative2.ScrollView).props.keyboardShouldPersistTaps).toBe('always');
  });
  it('does not render ScrollView when withScrollView is false', function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {
        withScrollView: false,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Static Content"
        })
      })),
      queryByText = _render8.queryByText,
      UNSAFE_queryByType = _render8.UNSAFE_queryByType;
    expect(UNSAFE_queryByType(_reactNative2.ScrollView)).toBeNull();
    expect(queryByText('Static Content')).toBeTruthy();
  });
  it('renders StatusBar component by default', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {}));
    expect(_reactNative2.StatusBar.setBarStyle).toHaveBeenCalledWith('dark-content');
    expect(_reactNative2.StatusBar.setBackgroundColor).toHaveBeenCalledWith('#FFFFFF');
  });
  it('does not render StatusBar when withStatusBar is false', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {
      withStatusBar: false
    }));
    expect(_reactNative2.StatusBar.setBarStyle).not.toHaveBeenCalled();
    expect(_reactNative2.StatusBar.setBackgroundColor).not.toHaveBeenCalled();
  });
  it('applies custom statusBarColor and statusBarStyle to StatusBar component', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {
      statusBarColor: "#FF0000",
      statusBarStyle: "light-content"
    }));
    expect(_reactNative2.StatusBar.setBarStyle).toHaveBeenCalledWith('light-content');
    expect(_reactNative2.StatusBar.setBackgroundColor).toHaveBeenCalledWith('#FF0000');
  });
  it('applies custom backgroundColor', function () {
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {
        backgroundColor: "#FF00FF"
      })),
      getByTestId = _render9.getByTestId;
    var container = getByTestId('mock-safe-area-view');
    var flatStyle = _reactNative2.StyleSheet.flatten(container.props.style);
    expect(flatStyle).toHaveProperty('backgroundColor', '#FF00FF');
  });
  it('passes safeAreaEdges to SafeAreaView', function () {
    var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {
        safeAreaEdges: ['bottom']
      })),
      getByTestId = _render0.getByTestId;
    var safeAreaView = getByTestId('mock-safe-area-view');
    expect(safeAreaView.props.edges).toEqual(['bottom']);
  });
  it('uses default safeAreaEdges when not provided', function () {
    var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {})),
      getByTestId = _render1.getByTestId;
    var safeAreaView = getByTestId('mock-safe-area-view');
    expect(safeAreaView.props.edges).toEqual(['top', 'left', 'right']);
  });
  it('applies default backgroundColor', function () {
    var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {})),
      getByTestId = _render10.getByTestId;
    var container = getByTestId('mock-safe-area-view');
    var flatStyle = _reactNative2.StyleSheet.flatten(container.props.style);
    expect(flatStyle).toHaveProperty('backgroundColor', '#F9FAFB');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,