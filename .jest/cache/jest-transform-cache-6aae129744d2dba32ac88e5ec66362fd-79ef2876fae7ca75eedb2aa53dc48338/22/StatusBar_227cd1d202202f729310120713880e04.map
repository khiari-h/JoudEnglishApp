{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_jsxRuntime","_excluded","StatusBar","_ref","style","hideTransitionAnimation","_ref$translucent","translucent","backgroundColorProp","backgroundColor","props","_objectWithoutProperties2","default","colorScheme","useColorScheme","barStyle","React","useMemo","styleToBarStyle","jsx","Object","assign","showHideTransition","undefined","setStatusBarStyle","animated","NativeStatusBar","setBarStyle","setStatusBarHidden","exports","setHidden","setStatusBarBackgroundColor","setBackgroundColor","setStatusBarNetworkActivityIndicatorVisible","setNetworkActivityIndicatorVisible","setStatusBarTranslucent","setTranslucent","_Appearance$getColorS","arguments","length","Appearance","getColorScheme","resolvedStyle"],"sources":["StatusBar.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Appearance,\n  StatusBar as NativeStatusBar,\n  useColorScheme,\n  ColorSchemeName,\n} from 'react-native';\n\n// @docsMissing\nexport type StatusBarStyle = 'auto' | 'inverted' | 'light' | 'dark';\n\n// @docsMissing\nexport type StatusBarAnimation = 'none' | 'fade' | 'slide';\n\n// @needsAudit\nexport type StatusBarProps = {\n  /**\n   * Sets the color of the status bar text. Default value is `\"auto\"` which\n   * picks the appropriate value according to the active color scheme, eg:\n   * if your app is dark mode, the style will be `\"light\"`.\n   * @default 'auto'\n   */\n  style?: StatusBarStyle;\n\n  /**\n   * If the transition between status bar property changes should be\n   * animated. Supported for `backgroundColor`, `barStyle` and `hidden`.\n   */\n  animated?: boolean;\n\n  /**\n   * If the status bar is hidden.\n   */\n  hidden?: boolean;\n\n  /**\n   * The transition effect when showing and hiding the status bar using\n   * the hidden prop.\n   * @default 'fade'\n   * @platform ios\n   */\n  hideTransitionAnimation?: StatusBarAnimation;\n\n  /**\n   * If the network activity indicator should be visible.\n   * @platform ios\n   */\n  networkActivityIndicatorVisible?: boolean;\n\n  /**\n   * The background color of the status bar.\n   * @platform android\n   */\n  backgroundColor?: string;\n\n  /**\n   * If the status bar is translucent. When translucent is set to `true`,\n   * the app will draw under the status bar. This is the default behaviour in\n   * projects created with Expo tools because it is consistent with iOS.\n   * @platform android\n   */\n  translucent?: boolean;\n};\n\n/**\n * A component that allows you to configure your status bar without directly calling imperative\n * methods like `setBarStyle`.\n *\n * You will likely have multiple `StatusBar` components mounted in the same app at the same time.\n * For example, if you have multiple screens in your app, you may end up using one per screen.\n * The props of each `StatusBar` component will be merged in the order that they were mounted.\n * This component is built on top of the [StatusBar](https://reactnative.dev/docs/statusbar)\n * component exported from React Native, and it provides defaults that work better for Expo users.\n */\nexport function StatusBar({\n  style,\n  hideTransitionAnimation,\n  translucent = true,\n  backgroundColor: backgroundColorProp,\n  ...props\n}: StatusBarProps) {\n  // Pick appropriate default value depending on current theme, so if we are\n  // locked to light mode we don't end up with a light status bar\n  const colorScheme = useColorScheme();\n  const barStyle = React.useMemo(() => styleToBarStyle(style, colorScheme), [style, colorScheme]);\n\n  // If translucent and no backgroundColor is provided, then use transparent\n  // background\n  let backgroundColor = backgroundColorProp;\n  if (translucent && !backgroundColor) {\n    backgroundColor = 'transparent';\n  }\n\n  return (\n    <NativeStatusBar\n      {...props}\n      translucent={translucent}\n      barStyle={barStyle}\n      backgroundColor={backgroundColor}\n      showHideTransition={hideTransitionAnimation === 'none' ? undefined : hideTransitionAnimation}\n    />\n  );\n}\n\n// @needsAudit\n/**\n * Set the bar style of the status bar.\n * @param style The color of the status bar text.\n * @param animated If the transition should be animated.\n */\nexport function setStatusBarStyle(style: StatusBarStyle, animated?: boolean) {\n  NativeStatusBar.setBarStyle(styleToBarStyle(style), animated);\n}\n\n// @needsAudit\n/**\n * Toggle visibility of the status bar.\n * @param hidden If the status bar should be hidden.\n * @param animation Animation to use when toggling hidden, defaults to `'none'`.\n */\nexport const setStatusBarHidden = NativeStatusBar.setHidden;\n\n// @needsAudit\n/**\n * Set the background color of the status bar.\n * @param backgroundColor The background color of the status bar.\n * @param animated `true` to animate the background color change, `false` to change immediately.\n * @platform android\n */\nexport const setStatusBarBackgroundColor = NativeStatusBar.setBackgroundColor;\n\n// @needsAudit\n/**\n * Toggle visibility of the network activity indicator.\n * @param visible If the network activity indicator should be visible.\n * @platform ios\n */\nexport const setStatusBarNetworkActivityIndicatorVisible =\n  NativeStatusBar.setNetworkActivityIndicatorVisible;\n\n// @needsAudit\n/**\n * Set the translucency of the status bar.\n * @param translucent Whether the app can draw under the status bar. When `true`, content will be\n * rendered under the status bar. This is always `true` on iOS and cannot be changed.\n * @platform android\n */\nexport const setStatusBarTranslucent = NativeStatusBar.setTranslucent;\n\nfunction styleToBarStyle(\n  style: StatusBarStyle = 'auto',\n  colorScheme: ColorSchemeName = Appearance?.getColorScheme() ?? 'light'\n): 'light-content' | 'dark-content' {\n  if (!colorScheme) {\n    colorScheme = 'light';\n  }\n\n  let resolvedStyle = style;\n  if (style === 'auto') {\n    resolvedStyle = colorScheme === 'light' ? 'dark' : 'light';\n  } else if (style === 'inverted') {\n    resolvedStyle = colorScheme === 'light' ? 'light' : 'dark';\n  }\n\n  return resolvedStyle === 'light' ? 'light-content' : 'dark-content';\n}\n"],"mappings":";;;;;;;;;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AAKsB,IAAAE,WAAA,GAAAF,OAAA;AAAA,IAAAG,SAAA;AAoEf,SAASC,SAASA,CAAAC,IAAA,EAMN;EAAA,IALjBC,KAAK,GAAAD,IAAA,CAALC,KAAK;IACLC,uBAAuB,GAAAF,IAAA,CAAvBE,uBAAuB;IAAAC,gBAAA,GAAAH,IAAA,CACvBI,WAAW;IAAXA,WAAW,GAAAD,gBAAA,cAAG,IAAI,GAAAA,gBAAA;IACDE,mBAAmB,GAAAL,IAAA,CAApCM,eAAe;IACZC,KAAK,OAAAC,yBAAA,CAAAC,OAAA,EAAAT,IAAA,EAAAF,SAAA;EAIR,IAAMY,WAAW,GAAG,IAAAC,2BAAc,EAAC,CAAC;EACpC,IAAMC,QAAQ,GAAGC,cAAK,CAACC,OAAO,CAAC;IAAA,OAAMC,eAAe,CAACd,KAAK,EAAES,WAAW,CAAC;EAAA,GAAE,CAACT,KAAK,EAAES,WAAW,CAAC,CAAC;EAI/F,IAAIJ,eAAe,GAAGD,mBAAmB;EACzC,IAAID,WAAW,IAAI,CAACE,eAAe,EAAE;IACnCA,eAAe,GAAG,aAAa;EACjC;EAEA,OACE,IAAAT,WAAA,CAAAmB,GAAA,EAACpB,YAAA,CAAAG,SAAe,EAAAkB,MAAA,CAAAC,MAAA,KACVX,KAAK;IACTH,WAAW,EAAEA,WAAY;IACzBQ,QAAQ,EAAEA,QAAS;IACnBN,eAAe,EAAEA,eAAgB;IACjCa,kBAAkB,EAAEjB,uBAAuB,KAAK,MAAM,GAAGkB,SAAS,GAAGlB;EAAwB,EAC9F,CAAC;AAEN;AAQO,SAASmB,iBAAiBA,CAACpB,KAAqB,EAAEqB,QAAkB,EAAE;EAC3EC,sBAAe,CAACC,WAAW,CAACT,eAAe,CAACd,KAAK,CAAC,EAAEqB,QAAQ,CAAC;AAC/D;AAQO,IAAMG,kBAAkB,GAAAC,OAAA,CAAAD,kBAAA,GAAGF,sBAAe,CAACI,SAAS;AASpD,IAAMC,2BAA2B,GAAAF,OAAA,CAAAE,2BAAA,GAAGL,sBAAe,CAACM,kBAAkB;AAQtE,IAAMC,2CAA2C,GAAAJ,OAAA,CAAAI,2CAAA,GACtDP,sBAAe,CAACQ,kCAAkC;AAS7C,IAAMC,uBAAuB,GAAAN,OAAA,CAAAM,uBAAA,GAAGT,sBAAe,CAACU,cAAc;AAErE,SAASlB,eAAeA,CAAA,EAGY;EAAA,IAAAmB,qBAAA;EAAA,IAFlCjC,KAAqB,GAAAkC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAf,SAAA,GAAAe,SAAA,MAAG,MAAM;EAAA,IAC9BzB,WAA4B,GAAAyB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAf,SAAA,GAAAe,SAAA,OAAAD,qBAAA,GAAGG,uBAAU,oBAAVA,uBAAU,CAAEC,cAAc,CAAC,CAAC,YAAAJ,qBAAA,GAAI,OAAO;EAEtE,IAAI,CAACxB,WAAW,EAAE;IAChBA,WAAW,GAAG,OAAO;EACvB;EAEA,IAAI6B,aAAa,GAAGtC,KAAK;EACzB,IAAIA,KAAK,KAAK,MAAM,EAAE;IACpBsC,aAAa,GAAG7B,WAAW,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO;EAC5D,CAAC,MAAM,IAAIT,KAAK,KAAK,UAAU,EAAE;IAC/BsC,aAAa,GAAG7B,WAAW,KAAK,OAAO,GAAG,OAAO,GAAG,MAAM;EAC5D;EAEA,OAAO6B,aAAa,KAAK,OAAO,GAAG,eAAe,GAAG,cAAc;AACrE","ignoreList":[]}