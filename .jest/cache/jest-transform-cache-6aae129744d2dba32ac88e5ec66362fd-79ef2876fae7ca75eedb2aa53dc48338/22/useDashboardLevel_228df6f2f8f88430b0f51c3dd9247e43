5bfd77383c28235211825c1ca463f733
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDashboardLevel = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _constants = require("../../../utils/constants");
var ACTIVE_LEVEL_KEY = "user_active_level";
var useDashboardLevel = exports.useDashboardLevel = function useDashboardLevel(_ref) {
  var _LANGUAGE_LEVELS$curr;
  var progressData = _ref.progress;
  var _useState = (0, _react.useState)("1"),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    currentLevel = _useState2[0],
    setCurrentLevel = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isLoaded = _useState4[0],
    setIsLoaded = _useState4[1];
  var isInitialLoad = (0, _react.useRef)(true);
  var mapOldToNewLevel = (0, _react.useCallback)(function (level) {
    var mapping = {
      A1: "1",
      A2: "2",
      B1: "3",
      B2: "4",
      C1: "5",
      C2: "6",
      bonus: "bonus"
    };
    return mapping[level] || level;
  }, []);
  var handleChangeActiveLevel = (0, _react.useCallback)(function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (newLevel) {
      if (!_constants.LANGUAGE_LEVELS[newLevel]) return;
      setCurrentLevel(newLevel);
      try {
        yield _asyncStorage.default.setItem(ACTIVE_LEVEL_KEY, newLevel);
      } catch (error) {
        console.error('Erreur sauvegarde niveau actif:', error);
      }
    });
    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), []);
  (0, _react.useEffect)(function () {
    if (!isInitialLoad.current) return;
    var loadActiveLevel = function () {
      var _ref3 = (0, _asyncToGenerator2.default)(function* () {
        try {
          var savedLevel = yield _asyncStorage.default.getItem(ACTIVE_LEVEL_KEY);
          if (savedLevel && _constants.LANGUAGE_LEVELS[savedLevel]) {
            setCurrentLevel(mapOldToNewLevel(savedLevel));
          } else if (progressData != null && progressData.currentLevel) {
            setCurrentLevel(mapOldToNewLevel(progressData.currentLevel));
          }
          setIsLoaded(true);
          isInitialLoad.current = false;
        } catch (error) {
          console.error('Erreur chargement niveau actif:', error);
          setIsLoaded(true);
          isInitialLoad.current = false;
        }
      });
      return function loadActiveLevel() {
        return _ref3.apply(this, arguments);
      };
    }();
    loadActiveLevel();
  }, []);
  (0, _react.useEffect)(function () {
    if (!isLoaded || isInitialLoad.current) return;
    if (progressData != null && progressData.currentLevel && progressData.currentLevel !== currentLevel) {
      var mappedLevel = mapOldToNewLevel(progressData.currentLevel);
      if (mappedLevel !== currentLevel && _constants.LANGUAGE_LEVELS[mappedLevel]) {
        setCurrentLevel(mappedLevel);
      }
    }
  }, [progressData == null ? void 0 : progressData.currentLevel, isLoaded, currentLevel, mapOldToNewLevel]);
  var levelColor = ((_LANGUAGE_LEVELS$curr = _constants.LANGUAGE_LEVELS[currentLevel]) == null ? void 0 : _LANGUAGE_LEVELS$curr.color) || "#3B82F6";
  return {
    currentLevel: currentLevel,
    handleChangeActiveLevel: handleChangeActiveLevel,
    levelColor: levelColor,
    isLoaded: isLoaded
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,