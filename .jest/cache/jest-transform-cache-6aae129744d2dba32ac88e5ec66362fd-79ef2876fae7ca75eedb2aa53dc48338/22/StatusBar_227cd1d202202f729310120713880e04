e3258d765d6933eeb0d3bc1684d14ad1
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StatusBar = StatusBar;
exports.setStatusBarNetworkActivityIndicatorVisible = exports.setStatusBarHidden = exports.setStatusBarBackgroundColor = void 0;
exports.setStatusBarStyle = setStatusBarStyle;
exports.setStatusBarTranslucent = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["style", "hideTransitionAnimation", "translucent", "backgroundColor"];
function StatusBar(_ref) {
  var style = _ref.style,
    hideTransitionAnimation = _ref.hideTransitionAnimation,
    _ref$translucent = _ref.translucent,
    translucent = _ref$translucent === void 0 ? true : _ref$translucent,
    backgroundColorProp = _ref.backgroundColor,
    props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var colorScheme = (0, _reactNative.useColorScheme)();
  var barStyle = _react.default.useMemo(function () {
    return styleToBarStyle(style, colorScheme);
  }, [style, colorScheme]);
  var backgroundColor = backgroundColorProp;
  if (translucent && !backgroundColor) {
    backgroundColor = 'transparent';
  }
  return (0, _jsxRuntime.jsx)(_reactNative.StatusBar, Object.assign({}, props, {
    translucent: translucent,
    barStyle: barStyle,
    backgroundColor: backgroundColor,
    showHideTransition: hideTransitionAnimation === 'none' ? undefined : hideTransitionAnimation
  }));
}
function setStatusBarStyle(style, animated) {
  _reactNative.StatusBar.setBarStyle(styleToBarStyle(style), animated);
}
var setStatusBarHidden = exports.setStatusBarHidden = _reactNative.StatusBar.setHidden;
var setStatusBarBackgroundColor = exports.setStatusBarBackgroundColor = _reactNative.StatusBar.setBackgroundColor;
var setStatusBarNetworkActivityIndicatorVisible = exports.setStatusBarNetworkActivityIndicatorVisible = _reactNative.StatusBar.setNetworkActivityIndicatorVisible;
var setStatusBarTranslucent = exports.setStatusBarTranslucent = _reactNative.StatusBar.setTranslucent;
function styleToBarStyle() {
  var _Appearance$getColorS;
  var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'auto';
  var colorScheme = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (_Appearance$getColorS = _reactNative.Appearance == null ? void 0 : _reactNative.Appearance.getColorScheme()) != null ? _Appearance$getColorS : 'light';
  if (!colorScheme) {
    colorScheme = 'light';
  }
  var resolvedStyle = style;
  if (style === 'auto') {
    resolvedStyle = colorScheme === 'light' ? 'dark' : 'light';
  } else if (style === 'inverted') {
    resolvedStyle = colorScheme === 'light' ? 'light' : 'dark';
  }
  return resolvedStyle === 'light' ? 'light-content' : 'dark-content';
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,