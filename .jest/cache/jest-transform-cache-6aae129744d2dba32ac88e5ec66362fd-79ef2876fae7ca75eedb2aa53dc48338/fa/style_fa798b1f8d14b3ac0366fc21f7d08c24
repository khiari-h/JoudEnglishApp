e36e20afad47c9a9857bb89f5b0be9af
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var createStyles = function createStyles() {
  return _reactNative.StyleSheet.create({
    container: {
      marginHorizontal: 16,
      marginVertical: 8
    },
    headerContainer: Object.assign({
      borderRadius: 12,
      overflow: 'hidden'
    }, _reactNative.Platform.select({
      ios: {
        shadowColor: '#000',
        shadowOffset: {
          width: 0,
          height: 1
        },
        shadowOpacity: 0.05,
        shadowRadius: 4
      },
      android: {
        elevation: 1
      }
    })),
    headerGradient: {
      backgroundColor: 'white',
      borderWidth: 1,
      borderColor: '#F1F5F9'
    },
    headerContent: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-between',
      paddingVertical: 12,
      paddingHorizontal: 16
    },
    headerLeft: {
      flexDirection: 'row',
      alignItems: 'center',
      flex: 1
    },
    ruleIcon: {
      width: 24,
      height: 24,
      borderRadius: 6,
      justifyContent: 'center',
      alignItems: 'center',
      marginRight: 10
    },
    ruleTitle: {
      fontSize: 14,
      fontWeight: '600',
      color: '#374151',
      flex: 1,
      letterSpacing: 0.2
    },
    headerRight: {
      flexDirection: 'row',
      alignItems: 'center'
    },
    hintText: {
      fontSize: 12,
      fontWeight: '500',
      marginRight: 6,
      letterSpacing: 0.3
    },
    contentWrapper: {
      overflow: 'hidden',
      backgroundColor: '#FAFBFC',
      marginTop: 4,
      borderRadius: 12,
      borderWidth: 1,
      borderColor: '#F1F5F9'
    },
    contentContainer: {
      padding: 16,
      gap: 16
    }
  });
};
var _default = exports.default = createStyles;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiY3JlYXRlU3R5bGVzIiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsImNvbnRhaW5lciIsIm1hcmdpbkhvcml6b250YWwiLCJtYXJnaW5WZXJ0aWNhbCIsImhlYWRlckNvbnRhaW5lciIsIk9iamVjdCIsImFzc2lnbiIsImJvcmRlclJhZGl1cyIsIm92ZXJmbG93IiwiUGxhdGZvcm0iLCJzZWxlY3QiLCJpb3MiLCJzaGFkb3dDb2xvciIsInNoYWRvd09mZnNldCIsIndpZHRoIiwiaGVpZ2h0Iiwic2hhZG93T3BhY2l0eSIsInNoYWRvd1JhZGl1cyIsImFuZHJvaWQiLCJlbGV2YXRpb24iLCJoZWFkZXJHcmFkaWVudCIsImJhY2tncm91bmRDb2xvciIsImJvcmRlcldpZHRoIiwiYm9yZGVyQ29sb3IiLCJoZWFkZXJDb250ZW50IiwiZmxleERpcmVjdGlvbiIsImFsaWduSXRlbXMiLCJqdXN0aWZ5Q29udGVudCIsInBhZGRpbmdWZXJ0aWNhbCIsInBhZGRpbmdIb3Jpem9udGFsIiwiaGVhZGVyTGVmdCIsImZsZXgiLCJydWxlSWNvbiIsIm1hcmdpblJpZ2h0IiwicnVsZVRpdGxlIiwiZm9udFNpemUiLCJmb250V2VpZ2h0IiwiY29sb3IiLCJsZXR0ZXJTcGFjaW5nIiwiaGVhZGVyUmlnaHQiLCJoaW50VGV4dCIsImNvbnRlbnRXcmFwcGVyIiwibWFyZ2luVG9wIiwiY29udGVudENvbnRhaW5lciIsInBhZGRpbmciLCJnYXAiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsic3R5bGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR3JhbW1hclJ1bGVDb250ZW50L3N0eWxlLmpzIC0gVkVSU0lPTiBSRUZBQ1RPUklTw4lFICgyMDAg4oaSIDgwIGxpZ25lcylcclxuXHJcbmltcG9ydCB7IFN0eWxlU2hlZXQsIFBsYXRmb3JtIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcclxuXHJcbi8qKlxyXG4gKiDwn5OaIFN0eWxlcyBvcHRpbWlzw6lzIHBvdXIgR3JhbW1hclJ1bGVDb250ZW50XHJcbiAqIEFuY2llbiA6IDIwMCBsaWduZXMgYXZlYyBzZWN0aW9ucyBjdXN0b20gZHVwbGlxdcOpZXNcclxuICogTm91dmVhdSA6IDgwIGxpZ25lcyAtIENvbnRlbnRTZWN0aW9uIGfDqHJlIGV4cGxpY2F0aW9uLCBleGVtcGxlcywgcsOoZ2xlc1xyXG4gKiBGb2N1cyBzdXIgbGUgaGVhZGVyIGNvbGxhcHNpYmxlIHVuaXF1ZSDDoCBHcmFtbWFyXHJcbiAqL1xyXG5jb25zdCBjcmVhdGVTdHlsZXMgPSAoKSA9PlxyXG4gIFN0eWxlU2hlZXQuY3JlYXRlKHtcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT0gQ09OVEFJTkVSID09PT09PT09PT09PT09PT09PT1cclxuICAgIGNvbnRhaW5lcjoge1xyXG4gICAgICBtYXJnaW5Ib3Jpem9udGFsOiAxNixcclxuICAgICAgbWFyZ2luVmVydGljYWw6IDgsXHJcbiAgICB9LFxyXG5cclxuICAgIC8vID09PT09PT09PT09PT09PT09PT0gSEVBREVSIENPTExBUFNJQkxFIChnYXJkZSBsZSBjdXN0b20pID09PT09PT09PT09PT09PT09PT1cclxuICAgIGhlYWRlckNvbnRhaW5lcjoge1xyXG4gICAgICBib3JkZXJSYWRpdXM6IDEyLFxyXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXHJcbiAgICAgIC8vIE9tYnJlIHN1YnRpbGUgcG91ciBsZSBoZWFkZXJcclxuICAgICAgLi4uUGxhdGZvcm0uc2VsZWN0KHtcclxuICAgICAgICBpb3M6IHtcclxuICAgICAgICAgIHNoYWRvd0NvbG9yOiAnIzAwMCcsXHJcbiAgICAgICAgICBzaGFkb3dPZmZzZXQ6IHsgd2lkdGg6IDAsIGhlaWdodDogMSB9LFxyXG4gICAgICAgICAgc2hhZG93T3BhY2l0eTogMC4wNSxcclxuICAgICAgICAgIHNoYWRvd1JhZGl1czogNCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFuZHJvaWQ6IHtcclxuICAgICAgICAgIGVsZXZhdGlvbjogMSxcclxuICAgICAgICB9LFxyXG4gICAgICB9KSxcclxuICAgIH0sXHJcbiAgICBoZWFkZXJHcmFkaWVudDoge1xyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXHJcbiAgICAgIGJvcmRlcldpZHRoOiAxLFxyXG4gICAgICBib3JkZXJDb2xvcjogJyNGMUY1RjknLFxyXG4gICAgfSxcclxuICAgIGhlYWRlckNvbnRlbnQ6IHtcclxuICAgICAgZmxleERpcmVjdGlvbjogJ3JvdycsXHJcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxyXG4gICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLFxyXG4gICAgICBwYWRkaW5nVmVydGljYWw6IDEyLFxyXG4gICAgICBwYWRkaW5nSG9yaXpvbnRhbDogMTYsXHJcbiAgICB9LFxyXG5cclxuICAgIC8vID09PT09PT09PT09PT09PT09PT0gSEVBREVSIExFRlQgPT09PT09PT09PT09PT09PT09PVxyXG4gICAgaGVhZGVyTGVmdDoge1xyXG4gICAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcclxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXHJcbiAgICAgIGZsZXg6IDEsXHJcbiAgICB9LFxyXG4gICAgcnVsZUljb246IHtcclxuICAgICAgd2lkdGg6IDI0LFxyXG4gICAgICBoZWlnaHQ6IDI0LFxyXG4gICAgICBib3JkZXJSYWRpdXM6IDYsXHJcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcclxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXHJcbiAgICAgIG1hcmdpblJpZ2h0OiAxMCxcclxuICAgIH0sXHJcbiAgICBydWxlVGl0bGU6IHtcclxuICAgICAgZm9udFNpemU6IDE0LFxyXG4gICAgICBmb250V2VpZ2h0OiAnNjAwJyxcclxuICAgICAgY29sb3I6ICcjMzc0MTUxJyxcclxuICAgICAgZmxleDogMSxcclxuICAgICAgbGV0dGVyU3BhY2luZzogMC4yLFxyXG4gICAgfSxcclxuXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09IEhFQURFUiBSSUdIVCA9PT09PT09PT09PT09PT09PT09XHJcbiAgICBoZWFkZXJSaWdodDoge1xyXG4gICAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcclxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXHJcbiAgICB9LFxyXG4gICAgaGludFRleHQ6IHtcclxuICAgICAgZm9udFNpemU6IDEyLFxyXG4gICAgICBmb250V2VpZ2h0OiAnNTAwJyxcclxuICAgICAgbWFyZ2luUmlnaHQ6IDYsXHJcbiAgICAgIGxldHRlclNwYWNpbmc6IDAuMyxcclxuICAgIH0sXHJcblxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PSBDT05URU5VIEVYUEFOU0lCTEUgPT09PT09PT09PT09PT09PT09PVxyXG4gICAgY29udGVudFdyYXBwZXI6IHtcclxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjRkFGQkZDJyxcclxuICAgICAgbWFyZ2luVG9wOiA0LFxyXG4gICAgICBib3JkZXJSYWRpdXM6IDEyLFxyXG4gICAgICBib3JkZXJXaWR0aDogMSxcclxuICAgICAgYm9yZGVyQ29sb3I6ICcjRjFGNUY5JyxcclxuICAgIH0sXHJcbiAgICBjb250ZW50Q29udGFpbmVyOiB7XHJcbiAgICAgIHBhZGRpbmc6IDE2LFxyXG4gICAgICBnYXA6IDE2LCAvLyBFc3BhY2VtZW50IGVudHJlIGxlcyBDb250ZW50U2VjdGlvbnNcclxuICAgIH0sXHJcblxyXG4gICAgLy8g8J+nuSBTVVBQUklNw4kgOiBleHBsYW5hdGlvblNlY3Rpb24sIHNlY3Rpb24sIHNlY3Rpb25IZWFkZXIsIGV0Yy5cclxuICAgIC8vIFRvdXMgY2VzIHN0eWxlcyBzb250IG1haW50ZW5hbnQgZGFucyBDb250ZW50U2VjdGlvbiBnw6luw6lyaXF1ZSAhXHJcbiAgfSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjcmVh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