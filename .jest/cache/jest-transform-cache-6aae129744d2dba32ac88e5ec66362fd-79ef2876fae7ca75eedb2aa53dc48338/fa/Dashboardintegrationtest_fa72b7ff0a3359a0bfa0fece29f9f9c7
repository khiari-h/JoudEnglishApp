724db6e535b1be12b582d72fe0d28340
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn()
  };
});
_getJestObj().mock('expo-linear-gradient', function () {
  return {
    LinearGradient: function LinearGradient(_ref) {
      var children = _ref.children,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      var _require = require('react-native'),
        View = _require.View;
      return (0, _jsxRuntime.jsx)(View, Object.assign({}, props, {
        children: children
      }));
    }
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
_getJestObj().mock('../../../src/contexts/ProgressContext');
_getJestObj().mock('../../../src/contexts/CurrentLevelContext');
_getJestObj().mock('../../../src/hooks/useRealTimeProgress', function () {
  return {
    __esModule: true,
    default: function _default() {
      return {
        getLevelProgress: jest.fn(function (level) {
          var progressMap = {
            '1': 25,
            '2': 50,
            '3': 75,
            '4': 30,
            '5': 10,
            '6': 0,
            'bonus': 5
          };
          return progressMap[level] || 0;
        }),
        refresh: jest.fn().mockResolvedValue()
      };
    }
  };
});
_getJestObj().mock('../../../src/hooks/useLastActivity', function () {
  return {
    __esModule: true,
    default: function _default() {
      return {
        lastActivity: {
          type: 'vocabulary',
          level: '2',
          title: 'Vocabulaire Famille',
          metadata: {
            word: 8,
            totalWords: 20,
            categoryIndex: 2
          }
        },
        isLoading: false,
        reload: jest.fn().mockResolvedValue()
      };
    }
  };
});
_getJestObj().mock('../../../src/utils/constants', function () {
  return {
    LANGUAGE_LEVELS: {
      '1': {
        title: 'D√©butant',
        color: '#10B981',
        icon: 'üå±'
      },
      '2': {
        title: '√âl√©mentaire',
        color: '#3B82F6',
        icon: 'üìö'
      },
      '3': {
        title: 'Interm√©diaire',
        color: '#8B5CF6',
        icon: 'üéØ'
      },
      '4': {
        title: 'Interm√©diaire+',
        color: '#F59E0B',
        icon: 'üöÄ'
      },
      '5': {
        title: 'Avanc√©',
        color: '#EF4444',
        icon: '‚≠ê'
      },
      '6': {
        title: 'Expert',
        color: '#EC4899',
        icon: 'üëë'
      },
      'bonus': {
        title: 'Bonus',
        color: '#6366F1',
        icon: 'üéÅ'
      }
    },
    EXERCISES: {
      vocabulary: {
        id: 'vocabulary',
        route: '/tabs/vocabulary',
        title: 'Vocabulaire',
        icon: 'üìö',
        color: '#3B82F6'
      },
      grammar: {
        id: 'grammar',
        route: '/tabs/grammar',
        title: 'Grammaire',
        icon: 'üìù',
        color: '#8B5CF6'
      },
      assessment: {
        id: 'assessment',
        route: '/tabs/assessment',
        title: 'Test',
        icon: 'üéØ',
        color: '#EF4444'
      }
    }
  };
});
_getJestObj().mock('../../../src/components/layout/Container', function () {
  var _require2 = require('react-native'),
    ScrollView = _require2.ScrollView,
    View = _require2.View,
    RefreshControl = _require2.RefreshControl;
  return function (_ref2) {
    var children = _ref2.children,
      _ref2$withScrollView = _ref2.withScrollView,
      withScrollView = _ref2$withScrollView === void 0 ? true : _ref2$withScrollView,
      props = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
    if (withScrollView === false) {
      return (0, _jsxRuntime.jsx)(View, Object.assign({}, props, {
        children: children
      }));
    }
    return (0, _jsxRuntime.jsx)(ScrollView, Object.assign({}, props, {
      refreshControl: (0, _jsxRuntime.jsx)(RefreshControl, {
        refreshing: false,
        onRefresh: function onRefresh() {}
      }),
      children: children
    }));
  };
});
_getJestObj().mock('../../../src/screens/VocabularyRevision/RevisionOrchestrator', function () {
  var _require3 = require('react-native'),
    View = _require3.View;
  return function () {
    return (0, _jsxRuntime.jsx)(View, {
      testID: "revision-orchestrator"
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _Dashboard = _interopRequireDefault(require("../../../src/screens/Dashboard"));
var _ThemeContext = require("../../../src/contexts/ThemeContext");
var _ProgressContext = require("../../../src/contexts/ProgressContext");
var _CurrentLevelContext = require("../../../src/contexts/CurrentLevelContext");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children"],
  _excluded2 = ["children", "withScrollView"];
function _getJestObj() {
  var _require5 = require("@jest/globals"),
    jest = _require5.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var _require4 = require('expo-router'),
  router = _require4.router;
describe('Dashboard - Tests d\'int√©gration', function () {
  var mockThemeContext = {
    colors: {
      background: '#F8FAFC',
      primary: '#3B82F6',
      surface: '#FFFFFF',
      text: '#1F2937',
      textSecondary: '#6B7280'
    }
  };
  var mockProgressContext = {
    progress: {
      level1: 50,
      level2: 30,
      currentLevel: '1'
    },
    isLoading: false,
    calculateGlobalProgress: jest.fn(function () {
      return 65;
    }),
    calculateLevelProgress: jest.fn(function (level) {
      var progressMap = {
        '1': 25,
        '2': 50,
        '3': 75
      };
      return progressMap[level] || 0;
    })
  };
  var mockCurrentLevelContext = {
    setCurrentLevel: jest.fn()
  };
  beforeEach(function () {
    jest.clearAllMocks();
    _ProgressContext.useProgress.mockReturnValue(mockProgressContext);
    _CurrentLevelContext.useCurrentLevel.mockReturnValue(mockCurrentLevelContext);
    _asyncStorage.default.getItem.mockResolvedValue(null);
    _asyncStorage.default.setItem.mockResolvedValue();
    router.push.mockClear();
  });
  var renderDashboard = function renderDashboard() {
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
      value: mockThemeContext,
      children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
    }));
  };
  describe('Flux complet de navigation', function () {
    it('devrait permettre de continuer une activit√© existante', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard = renderDashboard(),
        getByText = _renderDashboard.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('Vocabulaire Famille')).toBeTruthy();
      });
      var continueButton = getByText('Continuer ‚ñ∂Ô∏è');
      _reactNative.fireEvent.press(continueButton);
      expect(router.push).toHaveBeenCalledWith({
        pathname: '/tabs/vocabulary',
        params: {
          level: '2'
        }
      });
    }));
    it('devrait permettre de d√©marrer un nouvel exercice via QuickActions', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard2 = renderDashboard(),
        getByText = _renderDashboard2.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('Vocabulaire')).toBeTruthy();
      });
      var vocabularyButton = getByText('Vocabulaire');
      _reactNative.fireEvent.press(vocabularyButton);
      expect(router.push).toHaveBeenCalledWith({
        pathname: '/tabs/vocabulary',
        params: {
          level: '1',
          mode: 'classic'
        }
      });
    }));
    it('devrait permettre de changer de niveau et naviguer', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard3 = renderDashboard(),
        getByText = _renderDashboard3.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('üìö √âl√©mentaire')).toBeTruthy();
      });
      var level2Button = getByText('üìö √âl√©mentaire');
      _reactNative.fireEvent.press(level2Button);
      expect(mockCurrentLevelContext.setCurrentLevel).toHaveBeenCalledWith('2');
      expect(router.push).toHaveBeenCalledWith('/tabs/exerciseSelection?level=2');
    }));
  });
  describe('Synchronisation des donn√©es', function () {
    it('devrait synchroniser le niveau entre les composants', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue('3');
      var _renderDashboard4 = renderDashboard(),
        getByText = _renderDashboard4.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('3')).toBeTruthy();
      });
    }));
    it('devrait mettre √† jour la progression en temps r√©el', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard5 = renderDashboard(),
        getByText = _renderDashboard5.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('25%')).toBeTruthy();
      });
    }));
    it('devrait g√©rer le changement de niveau actif', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard6 = renderDashboard(),
        getByTestId = _renderDashboard6.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var levelButton = getByTestId('level-selector-2');
        if (levelButton) {
          _reactNative.fireEvent.press(levelButton);
        }
      });
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('user_active_level', '2');
    }));
  });
  describe('Gestion des √©tats de chargement', function () {
    it('devrait afficher le chargement puis les donn√©es', (0, _asyncToGenerator2.default)(function* () {
      _ProgressContext.useProgress.mockReturnValueOnce(Object.assign({}, mockProgressContext, {
        isLoading: true
      }));
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
          value: mockThemeContext,
          children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
        })),
        getByText = _render.getByText,
        rerender = _render.rerender;
      expect(getByText('Chargement du tableau de bord...')).toBeTruthy();
      _ProgressContext.useProgress.mockReturnValue(Object.assign({}, mockProgressContext, {
        isLoading: false
      }));
      rerender((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
        value: mockThemeContext,
        children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('üéì')).toBeTruthy();
        expect(getByText('Vocabulaire Famille')).toBeTruthy();
      });
    }));
  });
  describe('Gestion des erreurs et cas limites', function () {
    it('devrait g√©rer l\'absence d\'activit√© r√©cente', (0, _asyncToGenerator2.default)(function* () {
      jest.doMock('../../../src/hooks/useLastActivity', function () {
        return {
          __esModule: true,
          default: function _default() {
            return {
              lastActivity: null,
              isLoading: false,
              reload: jest.fn().mockResolvedValue()
            };
          }
        };
      });
      var _renderDashboard7 = renderDashboard(),
        getByText = _renderDashboard7.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('Commencer l\'apprentissage')).toBeTruthy();
      });
      var startButton = getByText('Commencer >');
      _reactNative.fireEvent.press(startButton);
      expect(router.push).toHaveBeenCalledWith('/(tabs)/levelSelection');
    }));
    it('devrait g√©rer les erreurs de sauvegarde AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.setItem.mockRejectedValue(new Error('Storage error'));
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      var _renderDashboard8 = renderDashboard(),
        getByTestId = _renderDashboard8.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var changeButton = getByTestId('level-change-button');
        if (changeButton) {
          _reactNative.fireEvent.press(changeButton);
        }
      });
      expect(consoleSpy).toHaveBeenCalledWith('Erreur sauvegarde niveau actif:', expect.any(Error));
      consoleSpy.mockRestore();
    }));
  });
  describe('Pull-to-refresh et actualisation', function () {
    it('devrait actualiser les donn√©es lors du pull-to-refresh', (0, _asyncToGenerator2.default)(function* () {
      var mockReload = jest.fn().mockResolvedValue();
      var mockRefresh = jest.fn().mockResolvedValue();
      jest.doMock('../../../src/hooks/useLastActivity', function () {
        return {
          __esModule: true,
          default: function _default() {
            return {
              lastActivity: null,
              isLoading: false,
              reload: mockReload
            };
          }
        };
      });
      jest.doMock('../../../src/hooks/useRealTimeProgress', function () {
        return {
          __esModule: true,
          default: function _default() {
            return {
              getLevelProgress: jest.fn(function () {
                return 25;
              }),
              refresh: mockRefresh
            };
          }
        };
      });
      var _renderDashboard9 = renderDashboard(),
        getByTestId = _renderDashboard9.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var scrollView = getByTestId('dashboard-scroll');
        if (scrollView) {
          (0, _reactNative.fireEvent)(scrollView, 'refresh');
        }
      });
      expect(mockReload).toHaveBeenCalled();
      expect(mockRefresh).toHaveBeenCalled();
    }));
  });
  describe('R√©vision automatique', function () {
    it('devrait afficher le syst√®me de r√©vision', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard0 = renderDashboard(),
        getByTestId = _renderDashboard0.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('revision-orchestrator')).toBeTruthy();
      });
    }));
  });
  describe('Responsive et adaptation', function () {
    it('devrait s\'adapter aux diff√©rentes tailles d\'√©cran', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard1 = renderDashboard(),
        getByText = _renderDashboard1.getByText,
        getByTestId = _renderDashboard1.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('üéì')).toBeTruthy();
        expect(getByText('Vocabulaire Famille')).toBeTruthy();
        expect(getByText('‚ö° Actions rapides')).toBeTruthy();
        expect(getByTestId('revision-orchestrator')).toBeTruthy();
      });
    }));
  });
  describe('Performance et optimisation', function () {
    it('ne devrait pas recalculer inutilement les donn√©es', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard10 = renderDashboard(),
        rerender = _renderDashboard10.rerender;
      yield (0, _reactNative.waitFor)(function () {
        expect(mockProgressContext.calculateLevelProgress).toHaveBeenCalledTimes(7);
      });
      rerender((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
        value: mockThemeContext,
        children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
      }));
      expect(mockProgressContext.calculateLevelProgress).toHaveBeenCalledTimes(7);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJnZXRJdGVtIiwiamVzdCIsImZuIiwic2V0SXRlbSIsIkxpbmVhckdyYWRpZW50IiwiX3JlZiIsImNoaWxkcmVuIiwicHJvcHMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwiZGVmYXVsdCIsIl9leGNsdWRlZCIsIl9yZXF1aXJlIiwicmVxdWlyZSIsIlZpZXciLCJfanN4UnVudGltZSIsImpzeCIsIk9iamVjdCIsImFzc2lnbiIsInJvdXRlciIsInB1c2giLCJfX2VzTW9kdWxlIiwiZ2V0TGV2ZWxQcm9ncmVzcyIsImxldmVsIiwicHJvZ3Jlc3NNYXAiLCJyZWZyZXNoIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJsYXN0QWN0aXZpdHkiLCJ0eXBlIiwidGl0bGUiLCJtZXRhZGF0YSIsIndvcmQiLCJ0b3RhbFdvcmRzIiwiY2F0ZWdvcnlJbmRleCIsImlzTG9hZGluZyIsInJlbG9hZCIsIkxBTkdVQUdFX0xFVkVMUyIsImNvbG9yIiwiaWNvbiIsIkVYRVJDSVNFUyIsInZvY2FidWxhcnkiLCJpZCIsInJvdXRlIiwiZ3JhbW1hciIsImFzc2Vzc21lbnQiLCJfcmVxdWlyZTIiLCJTY3JvbGxWaWV3IiwiUmVmcmVzaENvbnRyb2wiLCJfcmVmMiIsIl9yZWYyJHdpdGhTY3JvbGxWaWV3Iiwid2l0aFNjcm9sbFZpZXciLCJfZXhjbHVkZWQyIiwicmVmcmVzaENvbnRyb2wiLCJyZWZyZXNoaW5nIiwib25SZWZyZXNoIiwiX3JlcXVpcmUzIiwidGVzdElEIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9hc3luY1N0b3JhZ2UiLCJfRGFzaGJvYXJkIiwiX1RoZW1lQ29udGV4dCIsIl9Qcm9ncmVzc0NvbnRleHQiLCJfQ3VycmVudExldmVsQ29udGV4dCIsIl9yZXF1aXJlNSIsIl9yZXF1aXJlNCIsImRlc2NyaWJlIiwibW9ja1RoZW1lQ29udGV4dCIsImNvbG9ycyIsImJhY2tncm91bmQiLCJwcmltYXJ5Iiwic3VyZmFjZSIsInRleHQiLCJ0ZXh0U2Vjb25kYXJ5IiwibW9ja1Byb2dyZXNzQ29udGV4dCIsInByb2dyZXNzIiwibGV2ZWwxIiwibGV2ZWwyIiwiY3VycmVudExldmVsIiwiY2FsY3VsYXRlR2xvYmFsUHJvZ3Jlc3MiLCJjYWxjdWxhdGVMZXZlbFByb2dyZXNzIiwibW9ja0N1cnJlbnRMZXZlbENvbnRleHQiLCJzZXRDdXJyZW50TGV2ZWwiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsInVzZVByb2dyZXNzIiwibW9ja1JldHVyblZhbHVlIiwidXNlQ3VycmVudExldmVsIiwiQXN5bmNTdG9yYWdlIiwibW9ja0NsZWFyIiwicmVuZGVyRGFzaGJvYXJkIiwicmVuZGVyIiwiVGhlbWVDb250ZXh0IiwiUHJvdmlkZXIiLCJ2YWx1ZSIsIml0IiwiX3JlbmRlckRhc2hib2FyZCIsImdldEJ5VGV4dCIsIndhaXRGb3IiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwiY29udGludWVCdXR0b24iLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwicGF0aG5hbWUiLCJwYXJhbXMiLCJfcmVuZGVyRGFzaGJvYXJkMiIsInZvY2FidWxhcnlCdXR0b24iLCJtb2RlIiwiX3JlbmRlckRhc2hib2FyZDMiLCJsZXZlbDJCdXR0b24iLCJfcmVuZGVyRGFzaGJvYXJkNCIsIl9yZW5kZXJEYXNoYm9hcmQ1IiwiX3JlbmRlckRhc2hib2FyZDYiLCJnZXRCeVRlc3RJZCIsImxldmVsQnV0dG9uIiwibW9ja1JldHVyblZhbHVlT25jZSIsIl9yZW5kZXIiLCJyZXJlbmRlciIsImRvTW9jayIsIl9yZW5kZXJEYXNoYm9hcmQ3Iiwic3RhcnRCdXR0b24iLCJtb2NrUmVqZWN0ZWRWYWx1ZSIsIkVycm9yIiwiY29uc29sZVNweSIsInNweU9uIiwiY29uc29sZSIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsIl9yZW5kZXJEYXNoYm9hcmQ4IiwiY2hhbmdlQnV0dG9uIiwiYW55IiwibW9ja1Jlc3RvcmUiLCJtb2NrUmVsb2FkIiwibW9ja1JlZnJlc2giLCJfcmVuZGVyRGFzaGJvYXJkOSIsInNjcm9sbFZpZXciLCJ0b0hhdmVCZWVuQ2FsbGVkIiwiX3JlbmRlckRhc2hib2FyZDAiLCJfcmVuZGVyRGFzaGJvYXJkMSIsIl9yZW5kZXJEYXNoYm9hcmQxMCIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyJdLCJzb3VyY2VzIjpbIkRhc2hib2FyZC5pbnRlZ3JhdGlvbi50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIF9fdGVzdHNfXy9zY3JlZW5zL0Rhc2hib2FyZC9EYXNoYm9hcmQuaW50ZWdyYXRpb24udGVzdC5qc1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCB3YWl0Rm9yLCBhY3QgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgQXN5bmNTdG9yYWdlIGZyb20gJ0ByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlJztcbmltcG9ydCBEYXNoYm9hcmQgZnJvbSAnLi4vLi4vLi4vc3JjL3NjcmVlbnMvRGFzaGJvYXJkJztcbmltcG9ydCB7IFRoZW1lQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uL3NyYy9jb250ZXh0cy9UaGVtZUNvbnRleHQnO1xuaW1wb3J0IHsgdXNlUHJvZ3Jlc3MgfSBmcm9tICcuLi8uLi8uLi9zcmMvY29udGV4dHMvUHJvZ3Jlc3NDb250ZXh0JztcbmltcG9ydCB7IHVzZUN1cnJlbnRMZXZlbCB9IGZyb20gJy4uLy4uLy4uL3NyYy9jb250ZXh0cy9DdXJyZW50TGV2ZWxDb250ZXh0JztcblxuLy8gTW9jayBkZXMgZMOpcGVuZGFuY2VzXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlJywgKCkgPT4gKHtcbiAgZ2V0SXRlbTogamVzdC5mbigpLFxuICBzZXRJdGVtOiBqZXN0LmZuKCksXG59KSk7XG5cbmplc3QubW9jaygnZXhwby1saW5lYXItZ3JhZGllbnQnLCAoKSA9PiAoe1xuICBMaW5lYXJHcmFkaWVudDogKHsgY2hpbGRyZW4sIC4uLnByb3BzIH0pID0+IHtcbiAgICBjb25zdCB7IFZpZXcgfSA9IHJlcXVpcmUoJ3JlYWN0LW5hdGl2ZScpO1xuICAgIHJldHVybiA8VmlldyB7Li4ucHJvcHN9PntjaGlsZHJlbn08L1ZpZXc+O1xuICB9XG59KSk7XG5cbmplc3QubW9jaygnZXhwby1yb3V0ZXInLCAoKSA9PiAoe1xuICByb3V0ZXI6IHtcbiAgICBwdXNoOiBqZXN0LmZuKCksXG4gIH0sXG59KSk7XG5cbi8vIE1vY2sgZGVzIGNvbnRleHRlc1xuamVzdC5tb2NrKCcuLi8uLi8uLi9zcmMvY29udGV4dHMvUHJvZ3Jlc3NDb250ZXh0Jyk7XG5qZXN0Lm1vY2soJy4uLy4uLy4uL3NyYy9jb250ZXh0cy9DdXJyZW50TGV2ZWxDb250ZXh0Jyk7XG5cbi8vIE1vY2sgZGVzIGhvb2tzIGF2ZWMgZGVzIGltcGzDqW1lbnRhdGlvbnMgcGx1cyByw6lhbGlzdGVzXG5qZXN0Lm1vY2soJy4uLy4uLy4uL3NyYy9ob29rcy91c2VSZWFsVGltZVByb2dyZXNzJywgKCkgPT4gKHtcbiAgX19lc01vZHVsZTogdHJ1ZSxcbiAgZGVmYXVsdDogKCkgPT4gKHtcbiAgICBnZXRMZXZlbFByb2dyZXNzOiBqZXN0LmZuKChsZXZlbCkgPT4ge1xuICAgICAgY29uc3QgcHJvZ3Jlc3NNYXAgPSB7IFxuICAgICAgICAnMSc6IDI1LCAnMic6IDUwLCAnMyc6IDc1LCAnNCc6IDMwLCAnNSc6IDEwLCAnNic6IDAsICdib251cyc6IDUgXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHByb2dyZXNzTWFwW2xldmVsXSB8fCAwO1xuICAgIH0pLFxuICAgIHJlZnJlc2g6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSgpXG4gIH0pXG59KSk7XG5cbmplc3QubW9jaygnLi4vLi4vLi4vc3JjL2hvb2tzL3VzZUxhc3RBY3Rpdml0eScsICgpID0+ICh7XG4gIF9fZXNNb2R1bGU6IHRydWUsXG4gIGRlZmF1bHQ6ICgpID0+ICh7XG4gICAgbGFzdEFjdGl2aXR5OiB7XG4gICAgICB0eXBlOiAndm9jYWJ1bGFyeScsXG4gICAgICBsZXZlbDogJzInLFxuICAgICAgdGl0bGU6ICdWb2NhYnVsYWlyZSBGYW1pbGxlJyxcbiAgICAgIG1ldGFkYXRhOiB7IFxuICAgICAgICB3b3JkOiA4LCBcbiAgICAgICAgdG90YWxXb3JkczogMjAsXG4gICAgICAgIGNhdGVnb3J5SW5kZXg6IDJcbiAgICAgIH1cbiAgICB9LFxuICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgcmVsb2FkOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoKVxuICB9KVxufSkpO1xuXG4vLyBNb2NrIGRlcyBjb25zdGFudGVzXG5qZXN0Lm1vY2soJy4uLy4uLy4uL3NyYy91dGlscy9jb25zdGFudHMnLCAoKSA9PiAoe1xuICBMQU5HVUFHRV9MRVZFTFM6IHtcbiAgICAnMSc6IHsgdGl0bGU6ICdEw6lidXRhbnQnLCBjb2xvcjogJyMxMEI5ODEnLCBpY29uOiAn8J+MsScgfSxcbiAgICAnMic6IHsgdGl0bGU6ICfDiWzDqW1lbnRhaXJlJywgY29sb3I6ICcjM0I4MkY2JywgaWNvbjogJ/Cfk5onIH0sXG4gICAgJzMnOiB7IHRpdGxlOiAnSW50ZXJtw6lkaWFpcmUnLCBjb2xvcjogJyM4QjVDRjYnLCBpY29uOiAn8J+OrycgfSxcbiAgICAnNCc6IHsgdGl0bGU6ICdJbnRlcm3DqWRpYWlyZSsnLCBjb2xvcjogJyNGNTlFMEInLCBpY29uOiAn8J+agCcgfSxcbiAgICAnNSc6IHsgdGl0bGU6ICdBdmFuY8OpJywgY29sb3I6ICcjRUY0NDQ0JywgaWNvbjogJ+KtkCcgfSxcbiAgICAnNic6IHsgdGl0bGU6ICdFeHBlcnQnLCBjb2xvcjogJyNFQzQ4OTknLCBpY29uOiAn8J+RkScgfSxcbiAgICAnYm9udXMnOiB7IHRpdGxlOiAnQm9udXMnLCBjb2xvcjogJyM2MzY2RjEnLCBpY29uOiAn8J+OgScgfVxuICB9LFxuICBFWEVSQ0lTRVM6IHtcbiAgICB2b2NhYnVsYXJ5OiB7IFxuICAgICAgaWQ6ICd2b2NhYnVsYXJ5JyxcbiAgICAgIHJvdXRlOiAnL3RhYnMvdm9jYWJ1bGFyeScsXG4gICAgICB0aXRsZTogJ1ZvY2FidWxhaXJlJyxcbiAgICAgIGljb246ICfwn5OaJyxcbiAgICAgIGNvbG9yOiAnIzNCODJGNidcbiAgICB9LFxuICAgIGdyYW1tYXI6IHsgXG4gICAgICBpZDogJ2dyYW1tYXInLFxuICAgICAgcm91dGU6ICcvdGFicy9ncmFtbWFyJyxcbiAgICAgIHRpdGxlOiAnR3JhbW1haXJlJyxcbiAgICAgIGljb246ICfwn5OdJyxcbiAgICAgIGNvbG9yOiAnIzhCNUNGNidcbiAgICB9LFxuICAgIGFzc2Vzc21lbnQ6IHtcbiAgICAgIGlkOiAnYXNzZXNzbWVudCcsXG4gICAgICByb3V0ZTogJy90YWJzL2Fzc2Vzc21lbnQnLFxuICAgICAgdGl0bGU6ICdUZXN0JyxcbiAgICAgIGljb246ICfwn46vJyxcbiAgICAgIGNvbG9yOiAnI0VGNDQ0NCdcbiAgICB9XG4gIH1cbn0pKTtcblxuLy8gTW9jayBkdSBDb250YWluZXJcbmplc3QubW9jaygnLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvbGF5b3V0L0NvbnRhaW5lcicsICgpID0+IHtcbiAgY29uc3QgeyBTY3JvbGxWaWV3LCBWaWV3LCBSZWZyZXNoQ29udHJvbCB9ID0gcmVxdWlyZSgncmVhY3QtbmF0aXZlJyk7XG4gIHJldHVybiAoeyBjaGlsZHJlbiwgd2l0aFNjcm9sbFZpZXcgPSB0cnVlLCAuLi5wcm9wcyB9KSA9PiB7XG4gICAgaWYgKHdpdGhTY3JvbGxWaWV3ID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIDxWaWV3IHsuLi5wcm9wc30+e2NoaWxkcmVufTwvVmlldz47XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8U2Nyb2xsVmlldyBcbiAgICAgICAgey4uLnByb3BzfVxuICAgICAgICByZWZyZXNoQ29udHJvbD17PFJlZnJlc2hDb250cm9sIHJlZnJlc2hpbmc9e2ZhbHNlfSBvblJlZnJlc2g9eygpID0+IHt9fSAvPn1cbiAgICAgID5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9TY3JvbGxWaWV3PlxuICAgICk7XG4gIH07XG59KTtcblxuLy8gTW9jayBkdSBSZXZpc2lvbk9yY2hlc3RyYXRvclxuamVzdC5tb2NrKCcuLi8uLi8uLi9zcmMvc2NyZWVucy9Wb2NhYnVsYXJ5UmV2aXNpb24vUmV2aXNpb25PcmNoZXN0cmF0b3InLCAoKSA9PiB7XG4gIGNvbnN0IHsgVmlldyB9ID0gcmVxdWlyZSgncmVhY3QtbmF0aXZlJyk7XG4gIHJldHVybiAoKSA9PiA8VmlldyB0ZXN0SUQ9XCJyZXZpc2lvbi1vcmNoZXN0cmF0b3JcIiAvPjtcbn0pO1xuXG5jb25zdCB7IHJvdXRlciB9ID0gcmVxdWlyZSgnZXhwby1yb3V0ZXInKTtcblxuZGVzY3JpYmUoJ0Rhc2hib2FyZCAtIFRlc3RzIGRcXCdpbnTDqWdyYXRpb24nLCAoKSA9PiB7XG4gIGNvbnN0IG1vY2tUaGVtZUNvbnRleHQgPSB7XG4gICAgY29sb3JzOiB7XG4gICAgICBiYWNrZ3JvdW5kOiAnI0Y4RkFGQycsXG4gICAgICBwcmltYXJ5OiAnIzNCODJGNicsXG4gICAgICBzdXJmYWNlOiAnI0ZGRkZGRicsXG4gICAgICB0ZXh0OiAnIzFGMjkzNycsXG4gICAgICB0ZXh0U2Vjb25kYXJ5OiAnIzZCNzI4MCdcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgbW9ja1Byb2dyZXNzQ29udGV4dCA9IHtcbiAgICBwcm9ncmVzczogeyBcbiAgICAgIGxldmVsMTogNTAsIFxuICAgICAgbGV2ZWwyOiAzMCxcbiAgICAgIGN1cnJlbnRMZXZlbDogJzEnXG4gICAgfSxcbiAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgIGNhbGN1bGF0ZUdsb2JhbFByb2dyZXNzOiBqZXN0LmZuKCgpID0+IDY1KSxcbiAgICBjYWxjdWxhdGVMZXZlbFByb2dyZXNzOiBqZXN0LmZuKChsZXZlbCkgPT4ge1xuICAgICAgY29uc3QgcHJvZ3Jlc3NNYXAgPSB7ICcxJzogMjUsICcyJzogNTAsICczJzogNzUgfTtcbiAgICAgIHJldHVybiBwcm9ncmVzc01hcFtsZXZlbF0gfHwgMDtcbiAgICB9KVxuICB9O1xuXG4gIGNvbnN0IG1vY2tDdXJyZW50TGV2ZWxDb250ZXh0ID0ge1xuICAgIHNldEN1cnJlbnRMZXZlbDogamVzdC5mbigpXG4gIH07XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gICAgdXNlUHJvZ3Jlc3MubW9ja1JldHVyblZhbHVlKG1vY2tQcm9ncmVzc0NvbnRleHQpO1xuICAgIHVzZUN1cnJlbnRMZXZlbC5tb2NrUmV0dXJuVmFsdWUobW9ja0N1cnJlbnRMZXZlbENvbnRleHQpO1xuICAgIEFzeW5jU3RvcmFnZS5nZXRJdGVtLm1vY2tSZXNvbHZlZFZhbHVlKG51bGwpO1xuICAgIEFzeW5jU3RvcmFnZS5zZXRJdGVtLm1vY2tSZXNvbHZlZFZhbHVlKCk7XG4gICAgcm91dGVyLnB1c2gubW9ja0NsZWFyKCk7XG4gIH0pO1xuXG4gIGNvbnN0IHJlbmRlckRhc2hib2FyZCA9ICgpID0+IHtcbiAgICByZXR1cm4gcmVuZGVyKFxuICAgICAgPFRoZW1lQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17bW9ja1RoZW1lQ29udGV4dH0+XG4gICAgICAgIDxEYXNoYm9hcmQgLz5cbiAgICAgIDwvVGhlbWVDb250ZXh0LlByb3ZpZGVyPlxuICAgICk7XG4gIH07XG5cbiAgZGVzY3JpYmUoJ0ZsdXggY29tcGxldCBkZSBuYXZpZ2F0aW9uJywgKCkgPT4ge1xuICAgIGl0KCdkZXZyYWl0IHBlcm1ldHRyZSBkZSBjb250aW51ZXIgdW5lIGFjdGl2aXTDqSBleGlzdGFudGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyRGFzaGJvYXJkKCk7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KCdWb2NhYnVsYWlyZSBGYW1pbGxlJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBjb250aW51ZUJ1dHRvbiA9IGdldEJ5VGV4dCgnQ29udGludWVyIOKWtu+4jycpO1xuICAgICAgZmlyZUV2ZW50LnByZXNzKGNvbnRpbnVlQnV0dG9uKTtcblxuICAgICAgZXhwZWN0KHJvdXRlci5wdXNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAgIHBhdGhuYW1lOiAnL3RhYnMvdm9jYWJ1bGFyeScsXG4gICAgICAgIHBhcmFtczogeyBsZXZlbDogJzInIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldnJhaXQgcGVybWV0dHJlIGRlIGTDqW1hcnJlciB1biBub3V2ZWwgZXhlcmNpY2UgdmlhIFF1aWNrQWN0aW9ucycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXJEYXNoYm9hcmQoKTtcblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChnZXRCeVRleHQoJ1ZvY2FidWxhaXJlJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB2b2NhYnVsYXJ5QnV0dG9uID0gZ2V0QnlUZXh0KCdWb2NhYnVsYWlyZScpO1xuICAgICAgZmlyZUV2ZW50LnByZXNzKHZvY2FidWxhcnlCdXR0b24pO1xuXG4gICAgICBleHBlY3Qocm91dGVyLnB1c2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgICAgcGF0aG5hbWU6ICcvdGFicy92b2NhYnVsYXJ5JyxcbiAgICAgICAgcGFyYW1zOiB7IGxldmVsOiAnMScsIG1vZGU6ICdjbGFzc2ljJyB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZyYWl0IHBlcm1ldHRyZSBkZSBjaGFuZ2VyIGRlIG5pdmVhdSBldCBuYXZpZ3VlcicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXJEYXNoYm9hcmQoKTtcblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChnZXRCeVRleHQoJ/Cfk5ogw4lsw6ltZW50YWlyZScpKS50b0JlVHJ1dGh5KCk7XG4gICAgICB9KTtcblxuICAgICAgLy8gQ2xpcXVlciBzdXIgdW4gbml2ZWF1IHBvdXIgbGUgc8OpbGVjdGlvbm5lclxuICAgICAgY29uc3QgbGV2ZWwyQnV0dG9uID0gZ2V0QnlUZXh0KCfwn5OaIMOJbMOpbWVudGFpcmUnKTtcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhsZXZlbDJCdXR0b24pO1xuXG4gICAgICBleHBlY3QobW9ja0N1cnJlbnRMZXZlbENvbnRleHQuc2V0Q3VycmVudExldmVsKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnMicpO1xuICAgICAgZXhwZWN0KHJvdXRlci5wdXNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnL3RhYnMvZXhlcmNpc2VTZWxlY3Rpb24/bGV2ZWw9MicpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnU3luY2hyb25pc2F0aW9uIGRlcyBkb25uw6llcycsICgpID0+IHtcbiAgICBpdCgnZGV2cmFpdCBzeW5jaHJvbmlzZXIgbGUgbml2ZWF1IGVudHJlIGxlcyBjb21wb3NhbnRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgQXN5bmNTdG9yYWdlLmdldEl0ZW0ubW9ja1Jlc29sdmVkVmFsdWUoJzMnKTsgLy8gTml2ZWF1IHNhdXZlZ2FyZMOpXG5cbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXJEYXNoYm9hcmQoKTtcblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChnZXRCeVRleHQoJzMnKSkudG9CZVRydXRoeSgpOyAvLyBCYWRnZSBuaXZlYXUgZGFucyBoZWFkZXJcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldnJhaXQgbWV0dHJlIMOgIGpvdXIgbGEgcHJvZ3Jlc3Npb24gZW4gdGVtcHMgcsOpZWwnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyRGFzaGJvYXJkKCk7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICAvLyBWw6lyaWZpZXIgcXVlIGxhIHByb2dyZXNzaW9uIGR1IG5pdmVhdSAxICgyNSUpIGVzdCBhZmZpY2jDqWVcbiAgICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnMjUlJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldnJhaXQgZ8OpcmVyIGxlIGNoYW5nZW1lbnQgZGUgbml2ZWF1IGFjdGlmJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyRGFzaGJvYXJkKCk7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBjb25zdCBsZXZlbEJ1dHRvbiA9IGdldEJ5VGVzdElkKCdsZXZlbC1zZWxlY3Rvci0yJyk7XG4gICAgICAgIGlmIChsZXZlbEJ1dHRvbikge1xuICAgICAgICAgIGZpcmVFdmVudC5wcmVzcyhsZXZlbEJ1dHRvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBWw6lyaWZpZXIgcXVlIGxlIG5pdmVhdSBhIMOpdMOpIHNhdXZlZ2FyZMOpXG4gICAgICBleHBlY3QoQXN5bmNTdG9yYWdlLnNldEl0ZW0pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCd1c2VyX2FjdGl2ZV9sZXZlbCcsICcyJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdHZXN0aW9uIGRlcyDDqXRhdHMgZGUgY2hhcmdlbWVudCcsICgpID0+IHtcbiAgICBpdCgnZGV2cmFpdCBhZmZpY2hlciBsZSBjaGFyZ2VtZW50IHB1aXMgbGVzIGRvbm7DqWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gU2ltdWxlciB1biBjaGFyZ2VtZW50IGluaXRpYWxcbiAgICAgIHVzZVByb2dyZXNzLm1vY2tSZXR1cm5WYWx1ZU9uY2UoeyAuLi5tb2NrUHJvZ3Jlc3NDb250ZXh0LCBpc0xvYWRpbmc6IHRydWUgfSk7XG5cbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0LCByZXJlbmRlciB9ID0gcmVuZGVyKFxuICAgICAgICA8VGhlbWVDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXttb2NrVGhlbWVDb250ZXh0fT5cbiAgICAgICAgICA8RGFzaGJvYXJkIC8+XG4gICAgICAgIDwvVGhlbWVDb250ZXh0LlByb3ZpZGVyPlxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnQ2hhcmdlbWVudCBkdSB0YWJsZWF1IGRlIGJvcmQuLi4nKSkudG9CZVRydXRoeSgpO1xuXG4gICAgICAvLyBTaW11bGVyIGxhIGZpbiBkdSBjaGFyZ2VtZW50XG4gICAgICB1c2VQcm9ncmVzcy5tb2NrUmV0dXJuVmFsdWUoeyAuLi5tb2NrUHJvZ3Jlc3NDb250ZXh0LCBpc0xvYWRpbmc6IGZhbHNlIH0pO1xuXG4gICAgICByZXJlbmRlcihcbiAgICAgICAgPFRoZW1lQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17bW9ja1RoZW1lQ29udGV4dH0+XG4gICAgICAgICAgPERhc2hib2FyZCAvPlxuICAgICAgICA8L1RoZW1lQ29udGV4dC5Qcm92aWRlcj5cbiAgICAgICk7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KCfwn46TJykpLnRvQmVUcnV0aHkoKTsgLy8gTG9nbyBkYW5zIGhlYWRlclxuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KCdWb2NhYnVsYWlyZSBGYW1pbGxlJykpLnRvQmVUcnV0aHkoKTsgLy8gQWN0aXZpdMOpXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0dlc3Rpb24gZGVzIGVycmV1cnMgZXQgY2FzIGxpbWl0ZXMnLCAoKSA9PiB7XG4gICAgaXQoJ2RldnJhaXQgZ8OpcmVyIGxcXCdhYnNlbmNlIGRcXCdhY3Rpdml0w6kgcsOpY2VudGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBNb2NrIHNhbnMgYWN0aXZpdMOpIHLDqWNlbnRlXG4gICAgICBqZXN0LmRvTW9jaygnLi4vLi4vLi4vc3JjL2hvb2tzL3VzZUxhc3RBY3Rpdml0eScsICgpID0+ICh7XG4gICAgICAgIF9fZXNNb2R1bGU6IHRydWUsXG4gICAgICAgIGRlZmF1bHQ6ICgpID0+ICh7XG4gICAgICAgICAgbGFzdEFjdGl2aXR5OiBudWxsLFxuICAgICAgICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgcmVsb2FkOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoKVxuICAgICAgICB9KVxuICAgICAgfSkpO1xuXG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyRGFzaGJvYXJkKCk7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KCdDb21tZW5jZXIgbFxcJ2FwcHJlbnRpc3NhZ2UnKSkudG9CZVRydXRoeSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHN0YXJ0QnV0dG9uID0gZ2V0QnlUZXh0KCdDb21tZW5jZXIgPicpO1xuICAgICAgZmlyZUV2ZW50LnByZXNzKHN0YXJ0QnV0dG9uKTtcblxuICAgICAgZXhwZWN0KHJvdXRlci5wdXNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnLyh0YWJzKS9sZXZlbFNlbGVjdGlvbicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldnJhaXQgZ8OpcmVyIGxlcyBlcnJldXJzIGRlIHNhdXZlZ2FyZGUgQXN5bmNTdG9yYWdlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgQXN5bmNTdG9yYWdlLnNldEl0ZW0ubW9ja1JlamVjdGVkVmFsdWUobmV3IEVycm9yKCdTdG9yYWdlIGVycm9yJykpO1xuICAgICAgY29uc3QgY29uc29sZVNweSA9IGplc3Quc3B5T24oY29uc29sZSwgJ2Vycm9yJykubW9ja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlckRhc2hib2FyZCgpO1xuXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgLy8gU2ltdWxlciB1biBjaGFuZ2VtZW50IGRlIG5pdmVhdSBxdWkgZMOpY2xlbmNoZSB1bmUgc2F1dmVnYXJkZVxuICAgICAgICBjb25zdCBjaGFuZ2VCdXR0b24gPSBnZXRCeVRlc3RJZCgnbGV2ZWwtY2hhbmdlLWJ1dHRvbicpO1xuICAgICAgICBpZiAoY2hhbmdlQnV0dG9uKSB7XG4gICAgICAgICAgZmlyZUV2ZW50LnByZXNzKGNoYW5nZUJ1dHRvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBMJ2VycmV1ciBkZXZyYWl0IMOqdHJlIGfDqXLDqWUgZ3JhY2lldXNlbWVudFxuICAgICAgZXhwZWN0KGNvbnNvbGVTcHkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAnRXJyZXVyIHNhdXZlZ2FyZGUgbml2ZWF1IGFjdGlmOicsXG4gICAgICAgIGV4cGVjdC5hbnkoRXJyb3IpXG4gICAgICApO1xuXG4gICAgICBjb25zb2xlU3B5Lm1vY2tSZXN0b3JlKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdQdWxsLXRvLXJlZnJlc2ggZXQgYWN0dWFsaXNhdGlvbicsICgpID0+IHtcbiAgICBpdCgnZGV2cmFpdCBhY3R1YWxpc2VyIGxlcyBkb25uw6llcyBsb3JzIGR1IHB1bGwtdG8tcmVmcmVzaCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tSZWxvYWQgPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoKTtcbiAgICAgIGNvbnN0IG1vY2tSZWZyZXNoID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKCk7XG5cbiAgICAgIC8vIE1vY2sgYXZlYyBmb25jdGlvbnMgZGUgcmVsb2FkXG4gICAgICBqZXN0LmRvTW9jaygnLi4vLi4vLi4vc3JjL2hvb2tzL3VzZUxhc3RBY3Rpdml0eScsICgpID0+ICh7XG4gICAgICAgIF9fZXNNb2R1bGU6IHRydWUsXG4gICAgICAgIGRlZmF1bHQ6ICgpID0+ICh7XG4gICAgICAgICAgbGFzdEFjdGl2aXR5OiBudWxsLFxuICAgICAgICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgcmVsb2FkOiBtb2NrUmVsb2FkXG4gICAgICAgIH0pXG4gICAgICB9KSk7XG5cbiAgICAgIGplc3QuZG9Nb2NrKCcuLi8uLi8uLi9zcmMvaG9va3MvdXNlUmVhbFRpbWVQcm9ncmVzcycsICgpID0+ICh7XG4gICAgICAgIF9fZXNNb2R1bGU6IHRydWUsXG4gICAgICAgIGRlZmF1bHQ6ICgpID0+ICh7XG4gICAgICAgICAgZ2V0TGV2ZWxQcm9ncmVzczogamVzdC5mbigoKSA9PiAyNSksXG4gICAgICAgICAgcmVmcmVzaDogbW9ja1JlZnJlc2hcbiAgICAgICAgfSlcbiAgICAgIH0pKTtcblxuICAgICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyRGFzaGJvYXJkKCk7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICAvLyBTaW11bGVyIHVuIHB1bGwtdG8tcmVmcmVzaFxuICAgICAgICBjb25zdCBzY3JvbGxWaWV3ID0gZ2V0QnlUZXN0SWQoJ2Rhc2hib2FyZC1zY3JvbGwnKTtcbiAgICAgICAgaWYgKHNjcm9sbFZpZXcpIHtcbiAgICAgICAgICBmaXJlRXZlbnQoc2Nyb2xsVmlldywgJ3JlZnJlc2gnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIExlcyBmb25jdGlvbnMgZGUgcmVsb2FkIGRldnJhaWVudCDDqnRyZSBhcHBlbMOpZXNcbiAgICAgIGV4cGVjdChtb2NrUmVsb2FkKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICBleHBlY3QobW9ja1JlZnJlc2gpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1LDqXZpc2lvbiBhdXRvbWF0aXF1ZScsICgpID0+IHtcbiAgICBpdCgnZGV2cmFpdCBhZmZpY2hlciBsZSBzeXN0w6htZSBkZSByw6l2aXNpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXJEYXNoYm9hcmQoKTtcblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChnZXRCeVRlc3RJZCgncmV2aXNpb24tb3JjaGVzdHJhdG9yJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUmVzcG9uc2l2ZSBldCBhZGFwdGF0aW9uJywgKCkgPT4ge1xuICAgIGl0KCdkZXZyYWl0IHNcXCdhZGFwdGVyIGF1eCBkaWZmw6lyZW50ZXMgdGFpbGxlcyBkXFwnw6ljcmFuJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gVGVzdCBiYXNpcXVlIC0gdsOpcmlmaWVyIHF1ZSB0b3VzIGxlcyBjb21wb3NhbnRzIHNvbnQgcHLDqXNlbnRzXG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCwgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlckRhc2hib2FyZCgpO1xuXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KGdldEJ5VGV4dCgn8J+OkycpKS50b0JlVHJ1dGh5KCk7IC8vIEhlYWRlclxuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KCdWb2NhYnVsYWlyZSBGYW1pbGxlJykpLnRvQmVUcnV0aHkoKTsgLy8gSGVybyBzZWN0aW9uXG4gICAgICAgIGV4cGVjdChnZXRCeVRleHQoJ+KaoSBBY3Rpb25zIHJhcGlkZXMnKSkudG9CZVRydXRoeSgpOyAvLyBRdWljayBhY3Rpb25zXG4gICAgICAgIGV4cGVjdChnZXRCeVRlc3RJZCgncmV2aXNpb24tb3JjaGVzdHJhdG9yJykpLnRvQmVUcnV0aHkoKTsgLy8gUmV2aXNpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUGVyZm9ybWFuY2UgZXQgb3B0aW1pc2F0aW9uJywgKCkgPT4ge1xuICAgIGl0KCduZSBkZXZyYWl0IHBhcyByZWNhbGN1bGVyIGludXRpbGVtZW50IGxlcyBkb25uw6llcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVyZW5kZXIgfSA9IHJlbmRlckRhc2hib2FyZCgpO1xuXG4gICAgICAvLyBQcmVtaWVyIHJlbmR1XG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KG1vY2tQcm9ncmVzc0NvbnRleHQuY2FsY3VsYXRlTGV2ZWxQcm9ncmVzcykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDcpOyAvLyA3IG5pdmVhdXhcbiAgICAgIH0pO1xuXG4gICAgICAvLyBSZXJlbmRlciBzYW5zIGNoYW5nZW1lbnQgZGUgcHJvcHNcbiAgICAgIHJlcmVuZGVyKFxuICAgICAgICA8VGhlbWVDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXttb2NrVGhlbWVDb250ZXh0fT5cbiAgICAgICAgICA8RGFzaGJvYXJkIC8+XG4gICAgICAgIDwvVGhlbWVDb250ZXh0LlByb3ZpZGVyPlxuICAgICAgKTtcblxuICAgICAgLy8gTmUgZGV2cmFpdCBwYXMgcmVjYWxjdWxlclxuICAgICAgZXhwZWN0KG1vY2tQcm9ncmVzc0NvbnRleHQuY2FsY3VsYXRlTGV2ZWxQcm9ncmVzcykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDcpO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJtYXBwaW5ncyI6IkFBVUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDJDQUEyQyxFQUFFO0VBQUEsT0FBTztJQUM1REMsT0FBTyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xCQyxPQUFPLEVBQUVGLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0VBQ25CLENBQUM7QUFBQSxDQUFDLENBQUM7QUFFSEosV0FBQSxHQUFLQyxJQUFJLENBQUMsc0JBQXNCLEVBQUU7RUFBQSxP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