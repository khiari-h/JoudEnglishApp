d15cd6613dd4d41c85de51c6b93b3383
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _react = require("react");
var _style = _interopRequireDefault(require("./style"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
var QuestionIndicators = function QuestionIndicators(_ref) {
  var totalQuestions = _ref.totalQuestions,
    currentQuestionIndex = _ref.currentQuestionIndex,
    _ref$completedQuestio = _ref.completedQuestions,
    completedQuestions = _ref$completedQuestio === void 0 ? [] : _ref$completedQuestio,
    onSelectQuestion = _ref.onSelectQuestion,
    levelColor = _ref.levelColor;
  var getIndicatorColor = function getIndicatorColor(index) {
    if (currentQuestionIndex === index) return levelColor;
    if (completedQuestions.includes(index)) return `${levelColor}50`;
    return "#e5e7eb";
  };
  var getIndicatorSize = function getIndicatorSize(index) {
    return currentQuestionIndex === index ? 12 : 8;
  };
  var handleSelectQuestion = (0, _react.useCallback)(function (index) {
    return function () {
      onSelectQuestion(index);
    };
  }, [onSelectQuestion]);
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: _style.default.container,
    children: Array.from({
      length: totalQuestions
    }).map(function (_, index) {
      return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        onPress: handleSelectQuestion(index),
        children: (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [_style.default.indicator, {
            backgroundColor: getIndicatorColor(index),
            width: getIndicatorSize(index),
            height: getIndicatorSize(index)
          }]
        })
      }, `indicator-${index}`);
    })
  });
};
QuestionIndicators.propTypes = {
  totalQuestions: _propTypes.default.number.isRequired,
  currentQuestionIndex: _propTypes.default.number.isRequired,
  completedQuestions: _propTypes.default.arrayOf(_propTypes.default.number),
  onSelectQuestion: _propTypes.default.func.isRequired,
  levelColor: _propTypes.default.string
};
var _default = exports.default = QuestionIndicators;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX3JlYWN0IiwiX3N0eWxlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9wcm9wVHlwZXMiLCJfanN4UnVudGltZSIsIlF1ZXN0aW9uSW5kaWNhdG9ycyIsIl9yZWYiLCJ0b3RhbFF1ZXN0aW9ucyIsImN1cnJlbnRRdWVzdGlvbkluZGV4IiwiX3JlZiRjb21wbGV0ZWRRdWVzdGlvIiwiY29tcGxldGVkUXVlc3Rpb25zIiwib25TZWxlY3RRdWVzdGlvbiIsImxldmVsQ29sb3IiLCJnZXRJbmRpY2F0b3JDb2xvciIsImluZGV4IiwiaW5jbHVkZXMiLCJnZXRJbmRpY2F0b3JTaXplIiwiaGFuZGxlU2VsZWN0UXVlc3Rpb24iLCJ1c2VDYWxsYmFjayIsImpzeCIsIlZpZXciLCJzdHlsZSIsInN0eWxlcyIsImNvbnRhaW5lciIsImNoaWxkcmVuIiwiQXJyYXkiLCJmcm9tIiwibGVuZ3RoIiwibWFwIiwiXyIsIlRvdWNoYWJsZU9wYWNpdHkiLCJvblByZXNzIiwiaW5kaWNhdG9yIiwiYmFja2dyb3VuZENvbG9yIiwid2lkdGgiLCJoZWlnaHQiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJudW1iZXIiLCJpc1JlcXVpcmVkIiwiYXJyYXlPZiIsImZ1bmMiLCJzdHJpbmciLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2NvbXBvbmVudHMvc2NyZWVucy9leGVyY2lzZXMvcmVhZGluZy9RdWVzdGlvbkluZGljYXRvcnMvaW5kZXguanNcclxuaW1wb3J0IHsgVmlldywgVG91Y2hhYmxlT3BhY2l0eSB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcclxuaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHN0eWxlcyBmcm9tIFwiLi9zdHlsZVwiO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5cclxuLyoqXHJcbiAqIEluZGljYXRldXJzIHZpc3VlbHMgcG91ciBuYXZpZ3VlciBlbnRyZSBsZXMgcXVlc3Rpb25zXHJcbiAqL1xyXG5jb25zdCBRdWVzdGlvbkluZGljYXRvcnMgPSAoe1xyXG4gIHRvdGFsUXVlc3Rpb25zLFxyXG4gIGN1cnJlbnRRdWVzdGlvbkluZGV4LFxyXG4gIGNvbXBsZXRlZFF1ZXN0aW9ucyA9IFtdLFxyXG4gIG9uU2VsZWN0UXVlc3Rpb24sXHJcbiAgbGV2ZWxDb2xvcixcclxufSkgPT4ge1xyXG4gIC8vIOKchSBFeHRyYWN0aW9uIGRlIGxhIGxvZ2lxdWUgY29uZGl0aW9ubmVsbGUgcG91ciBhbcOpbGlvcmVyIGxhIGxpc2liaWxpdMOpXHJcbiAgXHJcbiAgLy8gRMOpdGVybWluZXIgbGEgY291bGV1ciBkZSBsJ2luZGljYXRldXJcclxuICBjb25zdCBnZXRJbmRpY2F0b3JDb2xvciA9IChpbmRleCkgPT4ge1xyXG4gICAgaWYgKGN1cnJlbnRRdWVzdGlvbkluZGV4ID09PSBpbmRleCkgcmV0dXJuIGxldmVsQ29sb3I7XHJcbiAgICBpZiAoY29tcGxldGVkUXVlc3Rpb25zLmluY2x1ZGVzKGluZGV4KSkgcmV0dXJuIGAke2xldmVsQ29sb3J9NTBgO1xyXG4gICAgcmV0dXJuIFwiI2U1ZTdlYlwiO1xyXG4gIH07XHJcbiAgXHJcbiAgLy8gRMOpdGVybWluZXIgbGEgdGFpbGxlIGRlIGwnaW5kaWNhdGV1clxyXG4gIGNvbnN0IGdldEluZGljYXRvclNpemUgPSAoaW5kZXgpID0+IHtcclxuICAgIHJldHVybiBjdXJyZW50UXVlc3Rpb25JbmRleCA9PT0gaW5kZXggPyAxMiA6IDg7XHJcbiAgfTtcclxuXHJcbiAgLy8gSGFuZGxlciBzdGFibGUgcG91ciBsYSBzw6lsZWN0aW9uIGQndW5lIHF1ZXN0aW9uXHJcbiAgY29uc3QgaGFuZGxlU2VsZWN0UXVlc3Rpb24gPSB1c2VDYWxsYmFjayhcclxuICAgIChpbmRleCkgPT4gKCkgPT4ge1xyXG4gICAgICBvblNlbGVjdFF1ZXN0aW9uKGluZGV4KTtcclxuICAgIH0sXHJcbiAgICBbb25TZWxlY3RRdWVzdGlvbl1cclxuICApO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9PlxyXG4gICAgICB7QXJyYXkuZnJvbSh7IGxlbmd0aDogdG90YWxRdWVzdGlvbnMgfSkubWFwKChfLCBpbmRleCkgPT4gKFxyXG4gICAgICAgIDxUb3VjaGFibGVPcGFjaXR5XHJcbiAgICAgICAgICBrZXk9e2BpbmRpY2F0b3ItJHtpbmRleH1gfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tYXJyYXktaW5kZXgta2V5XHJcbiAgICAgICAgICBvblByZXNzPXtoYW5kbGVTZWxlY3RRdWVzdGlvbihpbmRleCl9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPFZpZXdcclxuICAgICAgICAgICAgc3R5bGU9e1tcclxuICAgICAgICAgICAgICBzdHlsZXMuaW5kaWNhdG9yLFxyXG4gICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogZ2V0SW5kaWNhdG9yQ29sb3IoaW5kZXgpLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IGdldEluZGljYXRvclNpemUoaW5kZXgpLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBnZXRJbmRpY2F0b3JTaXplKGluZGV4KSxcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBdfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICA8L1RvdWNoYWJsZU9wYWNpdHk+XHJcbiAgICAgICkpfVxyXG4gICAgPC9WaWV3PlxyXG4gICk7XHJcbn07XHJcblxyXG4vLyDinIUgRMOpZmluaXRpb24gZGUgUHJvcFR5cGVzIHBvdXIgbGEgdmFsaWRhdGlvbiBkZXMgcHJvcHNcclxuUXVlc3Rpb25JbmRpY2F0b3JzLnByb3BUeXBlcyA9IHtcclxuICAvLyAndG90YWxRdWVzdGlvbnMnIGVzdCBtYW5xdWFudCBkYW5zIGxhIHZhbGlkYXRpb25cclxuICB0b3RhbFF1ZXN0aW9uczogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxyXG4gIC8vICdjdXJyZW50UXVlc3Rpb25JbmRleCcgZXN0IG1hbnF1YW50IGRhbnMgbGEgdmFsaWRhdGlvblxyXG4gIGN1cnJlbnRRdWVzdGlvbkluZGV4OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXHJcbiAgLy8gJ2NvbXBsZXRlZFF1ZXN0aW9ucycgZXN0IG1hbnF1YW50IGRhbnMgbGEgdmFsaWRhdGlvblxyXG4gIGNvbXBsZXRlZFF1ZXN0aW9uczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm51bWJlciksXHJcbiAgLy8gJ29uU2VsZWN0UXVlc3Rpb24nIGVzdCBtYW5xdWFudCBkYW5zIGxhIHZhbGlkYXRpb25cclxuICBvblNlbGVjdFF1ZXN0aW9uOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG4gIC8vICdsZXZlbENvbG9yJyBlc3QgbWFucXVhbnQgZGFucyBsYSB2YWxpZGF0aW9uXHJcbiAgbGV2ZWxDb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFF1ZXN0aW9uSW5kaWNhdG9yczsiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsSUFBQUEsWUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsTUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsTUFBQSxHQUFBQyxzQkFBQSxDQUFBSCxPQUFBO0FBQ0EsSUFBQUksVUFBQSxHQUFBRCxzQkFBQSxDQUFBSCxPQUFBO0FBQW1DLElBQUFLLFdBQUEsR0FBQUwsT0FBQTtBQUtuQyxJQUFNTSxrQkFBa0IsR0FBRyxTQUFyQkEsa0JBQWtCQSxDQUFBQyxJQUFBLEVBTWxCO0VBQUEsSUFMSkMsY0FBYyxHQUFBRCxJQUFBLENBQWRDLGNBQWM7SUFDZEMsb0JBQW9CLEdBQUFGLElBQUEsQ0FBcEJFLG9CQUFvQjtJQUFBQyxxQkFBQSxHQUFB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