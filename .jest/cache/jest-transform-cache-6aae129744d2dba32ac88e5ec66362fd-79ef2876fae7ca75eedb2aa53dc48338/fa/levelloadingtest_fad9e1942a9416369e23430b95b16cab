1ff513a656a7368947378e37996c7e31
_getJestObj().mock('expo-router', function () {
  return {
    useFocusEffect: jest.fn(function (callback) {
      return callback();
    }),
    router: {
      push: jest.fn(),
      back: jest.fn()
    },
    Stack: function Stack(_ref) {
      var children = _ref.children;
      return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
        children: children
      });
    },
    useLocalSearchParams: function useLocalSearchParams() {
      return {};
    },
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn(),
        canGoBack: jest.fn(function () {
          return true;
        }),
        addListener: jest.fn(),
        isFocused: jest.fn(function () {
          return true;
        })
      };
    }
  };
});
_getJestObj().mock('../../src/screens/exercises/vocabulary/hooks/useVocabulary', function () {
  var actualUseVocabulary = jest.requireActual('../../src/screens/exercises/vocabulary/hooks/useVocabulary').default;
  return jest.fn(function (vocabularyData, level, mode) {
    if (!vocabularyData) {
      return {
        loaded: false
      };
    }
    return Object.assign({}, actualUseVocabulary(vocabularyData, level, mode), {
      loaded: true,
      currentWord: vocabularyData.exercises[0].words[0],
      showTranslation: false,
      toggleTranslation: jest.fn(),
      display: {
        wordCounter: '1 / ' + vocabularyData.exercises[0].words.length,
        categories: vocabularyData.exercises.map(function (ex) {
          return ex.title;
        }),
        currentWord: vocabularyData.exercises[0].words[0],
        currentCategory: vocabularyData.exercises[0]
      },
      isLastWordInExercise: true,
      handleNext: jest.fn().mockReturnValue({
        completed: true
      }),
      saveData: jest.fn().mockResolvedValue(undefined)
    });
  });
});
_getJestObj().mock('../../src/utils/vocabulary/vocabularyDataHelper', function () {
  return {
    isBonusLevel: jest.fn(function () {
      return false;
    }),
    getLevelColor: jest.fn(function () {
      return 'blue';
    }),
    getVocabularyData: jest.fn(function (level, mode) {
      if (level === 'A1' || level === '1') {
        return {
          exercises: [{
            title: 'Identité & informations personnelles',
            words: [{
              word: 'name',
              translation: 'nom',
              example: 'My name is Sarah.'
            }, {
              word: 'hello',
              translation: 'bonjour',
              example: 'Hello, how are you?'
            }]
          }]
        };
      }
      if (level === 'B1' || level === '3') {
        return {
          exercises: [{
            title: 'Expression & Communication Avancée',
            words: [{
              word: 'rhetoric',
              translation: 'rhétorique',
              example: 'His rhetoric was powerful enough to convince the entire audience.'
            }, {
              word: 'sophisticated',
              translation: 'sophistiqué',
              example: 'She has a sophisticated understanding of the topic.'
            }]
          }]
        };
      }
      if (level === 'C1' || level === '5') {
        return {
          exercises: [{
            title: 'Maîtrise Linguistique Avancée',
            words: [{
              word: 'ubiquitous',
              translation: 'omniprésent',
              example: 'Smartphones have become ubiquitous in modern society.'
            }, {
              word: 'paradigm',
              translation: 'paradigme',
              example: 'This discovery represents a new paradigm in science.'
            }]
          }]
        };
      }
      return {
        exercises: [{
          title: 'Default Category',
          words: [{
            word: 'default',
            translation: 'défaut',
            example: 'This is a default word.'
          }]
        }]
      };
    })
  };
});
_getJestObj().mock('../../src/hooks/useLastActivity', function () {
  return {
    __esModule: true,
    default: jest.fn(function () {
      return {
        saveActivity: jest.fn(),
        lastActivity: null,
        isLoading: false,
        clearActivity: jest.fn(),
        reload: jest.fn()
      };
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _vocabulary = _interopRequireDefault(require("../../src/screens/exercises/vocabulary"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Test d\'intégration: Chargement des données par niveau', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  test('VocabularyExercise charge les données du niveau A1 correctement', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'A1',
            mode: 'classic'
          }
        }
      })),
      getByText = _render.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('name')).toBeTruthy();
      expect(getByText('Identité & informations personnelles')).toBeTruthy();
      expect(getByText('Reveal Translation')).toBeTruthy();
    });
    var revealButton = getByText('Reveal Translation');
    _reactNative.fireEvent.press(revealButton);
  }));
  test('VocabularyExercise charge les données du niveau B1 correctement', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'B1',
            mode: 'classic'
          }
        }
      })),
      getByText = _render2.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('rhetoric')).toBeTruthy();
      expect(getByText('Expression & Communication Avancée')).toBeTruthy();
      expect(getByText('Reveal Translation')).toBeTruthy();
    });
  }));
  test('VocabularyExercise charge les données du niveau C1 correctement', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'C1',
            mode: 'classic'
          }
        }
      })),
      getByText = _render3.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('ubiquitous')).toBeTruthy();
      expect(getByText('Maîtrise Linguistique Avancée')).toBeTruthy();
      expect(getByText('Reveal Translation')).toBeTruthy();
    });
  }));
  test('Vérification que les mots sont bien différents selon les niveaux', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'A1',
            mode: 'classic'
          }
        }
      })),
      getByTextA1 = _render4.getByText,
      queryByTextA1 = _render4.queryByText,
      rerender = _render4.rerender;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTextA1('name')).toBeTruthy();
      expect(queryByTextA1('rhetoric')).toBeNull();
      expect(queryByTextA1('ubiquitous')).toBeNull();
    });
    rerender((0, _jsxRuntime.jsx)(_vocabulary.default, {
      route: {
        params: {
          level: 'B1',
          mode: 'classic'
        }
      }
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTextA1('rhetoric')).toBeTruthy();
      expect(queryByTextA1('name')).toBeNull();
      expect(queryByTextA1('ubiquitous')).toBeNull();
    });
  }));
  test('Le mode d\'exercice est correctement pris en compte', (0, _asyncToGenerator2.default)(function* () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'A1',
            mode: 'reverse'
          }
        }
      })),
      getByText = _render5.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('name')).toBeTruthy();
      expect(getByText('Identité & informations personnelles')).toBeTruthy();
      expect(getByText('Reveal Translation')).toBeTruthy();
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VGb2N1c0VmZmVjdCIsImplc3QiLCJmbiIsImNhbGxiYWNrIiwicm91dGVyIiwicHVzaCIsImJhY2siLCJTdGFjayIsIl9yZWYiLCJjaGlsZHJlbiIsIl9qc3hSdW50aW1lIiwianN4IiwiRnJhZ21lbnQiLCJ1c2VMb2NhbFNlYXJjaFBhcmFtcyIsInVzZU5hdmlnYXRpb24iLCJuYXZpZ2F0ZSIsImdvQmFjayIsImNhbkdvQmFjayIsImFkZExpc3RlbmVyIiwiaXNGb2N1c2VkIiwiYWN0dWFsVXNlVm9jYWJ1bGFyeSIsInJlcXVpcmVBY3R1YWwiLCJkZWZhdWx0Iiwidm9jYWJ1bGFyeURhdGEiLCJsZXZlbCIsIm1vZGUiLCJsb2FkZWQiLCJPYmplY3QiLCJhc3NpZ24iLCJjdXJyZW50V29yZCIsImV4ZXJjaXNlcyIsIndvcmRzIiwic2hvd1RyYW5zbGF0aW9uIiwidG9nZ2xlVHJhbnNsYXRpb24iLCJkaXNwbGF5Iiwid29yZENvdW50ZXIiLCJsZW5ndGgiLCJjYXRlZ29yaWVzIiwibWFwIiwiZXgiLCJ0aXRsZSIsImN1cnJlbnRDYXRlZ29yeSIsImlzTGFzdFdvcmRJbkV4ZXJjaXNlIiwiaGFuZGxlTmV4dCIsIm1vY2tSZXR1cm5WYWx1ZSIsImNvbXBsZXRlZCIsInNhdmVEYXRhIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJ1bmRlZmluZWQiLCJpc0JvbnVzTGV2ZWwiLCJnZXRMZXZlbENvbG9yIiwiZ2V0Vm9jYWJ1bGFyeURhdGEiLCJ3b3JkIiwidHJhbnNsYXRpb24iLCJleGFtcGxlIiwiX19lc01vZHVsZSIsInNhdmVBY3Rpdml0eSIsImxhc3RBY3Rpdml0eSIsImlzTG9hZGluZyIsImNsZWFyQWN0aXZpdHkiLCJyZWxvYWQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl92b2NhYnVsYXJ5IiwiX3JlcXVpcmUiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwidGVzdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJyb3V0ZSIsInBhcmFtcyIsImdldEJ5VGV4dCIsIndhaXRGb3IiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwicmV2ZWFsQnV0dG9uIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJfcmVuZGVyMiIsIl9yZW5kZXIzIiwiX3JlbmRlcjQiLCJnZXRCeVRleHRBMSIsInF1ZXJ5QnlUZXh0QTEiLCJxdWVyeUJ5VGV4dCIsInJlcmVuZGVyIiwidG9CZU51bGwiLCJfcmVuZGVyNSJdLCJzb3VyY2VzIjpbImxldmVsLWxvYWRpbmcudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCB3YWl0Rm9yLCBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5cbi8vIFNjcmVlbiB0byB0ZXN0XG5pbXBvcnQgVm9jYWJ1bGFyeUV4ZXJjaXNlIGZyb20gJy4uLy4uL3NyYy9zY3JlZW5zL2V4ZXJjaXNlcy92b2NhYnVsYXJ5JztcblxuLy8gTW9jayBleHBvLXJvdXRlclxuamVzdC5tb2NrKCdleHBvLXJvdXRlcicsICgpID0+ICh7XG4gIHVzZUZvY3VzRWZmZWN0OiBqZXN0LmZuKGNhbGxiYWNrID0+IGNhbGxiYWNrKCkpLFxuICByb3V0ZXI6IHtcbiAgICBwdXNoOiBqZXN0LmZuKCksXG4gICAgYmFjazogamVzdC5mbigpLFxuICB9LFxuICBTdGFjazogKHsgY2hpbGRyZW4gfSkgPT4gPD57Y2hpbGRyZW59PC8+LFxuICB1c2VMb2NhbFNlYXJjaFBhcmFtczogKCkgPT4gKHt9KSxcbiAgdXNlTmF2aWdhdGlvbjogKCkgPT4gKHtcbiAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxuICAgIGdvQmFjazogamVzdC5mbigpLFxuICAgIGNhbkdvQmFjazogamVzdC5mbigoKSA9PiB0cnVlKSxcbiAgICBhZGRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgIGlzRm9jdXNlZDogamVzdC5mbigoKSA9PiB0cnVlKSxcbiAgfSksXG59KSk7XG5cbi8vIE1vY2sgdXNlVm9jYWJ1bGFyeSBob29rXG5qZXN0Lm1vY2soJy4uLy4uL3NyYy9zY3JlZW5zL2V4ZXJjaXNlcy92b2NhYnVsYXJ5L2hvb2tzL3VzZVZvY2FidWxhcnknLCAoKSA9PiB7XG4gIGNvbnN0IGFjdHVhbFVzZVZvY2FidWxhcnkgPSBqZXN0LnJlcXVpcmVBY3R1YWwoJy4uLy4uL3NyYy9zY3JlZW5zL2V4ZXJjaXNlcy92b2NhYnVsYXJ5L2hvb2tzL3VzZVZvY2FidWxhcnknKS5kZWZhdWx0O1xuICByZXR1cm4gamVzdC5mbigodm9jYWJ1bGFyeURhdGEsIGxldmVsLCBtb2RlKSA9PiB7XG4gICAgaWYgKCF2b2NhYnVsYXJ5RGF0YSkge1xuICAgICAgcmV0dXJuIHsgbG9hZGVkOiBmYWxzZSB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgLi4uYWN0dWFsVXNlVm9jYWJ1bGFyeSh2b2NhYnVsYXJ5RGF0YSwgbGV2ZWwsIG1vZGUpLFxuICAgICAgbG9hZGVkOiB0cnVlLFxuICAgICAgY3VycmVudFdvcmQ6IHZvY2FidWxhcnlEYXRhLmV4ZXJjaXNlc1swXS53b3Jkc1swXSxcbiAgICAgIHNob3dUcmFuc2xhdGlvbjogZmFsc2UsIC8vIFBhciBkw6lmYXV0LCBsYSB0cmFkdWN0aW9uIG4nZXN0IHBhcyBhZmZpY2jDqWVcbiAgICAgIHRvZ2dsZVRyYW5zbGF0aW9uOiBqZXN0LmZuKCksIC8vIE1vY2sgZGUgbGEgZm9uY3Rpb24gdG9nZ2xlXG4gICAgICBkaXNwbGF5OiB7XG4gICAgICAgIHdvcmRDb3VudGVyOiAnMSAvICcgKyB2b2NhYnVsYXJ5RGF0YS5leGVyY2lzZXNbMF0ud29yZHMubGVuZ3RoLFxuICAgICAgICBjYXRlZ29yaWVzOiB2b2NhYnVsYXJ5RGF0YS5leGVyY2lzZXMubWFwKGV4ID0+IGV4LnRpdGxlKSxcbiAgICAgICAgY3VycmVudFdvcmQ6IHZvY2FidWxhcnlEYXRhLmV4ZXJjaXNlc1swXS53b3Jkc1swXSxcbiAgICAgICAgY3VycmVudENhdGVnb3J5OiB2b2NhYnVsYXJ5RGF0YS5leGVyY2lzZXNbMF1cbiAgICAgIH0sXG4gICAgICBpc0xhc3RXb3JkSW5FeGVyY2lzZTogdHJ1ZSxcbiAgICAgIGhhbmRsZU5leHQ6IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoeyBjb21wbGV0ZWQ6IHRydWUgfSksXG4gICAgICBzYXZlRGF0YTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCksXG4gICAgfTtcbiAgfSk7XG59KTtcblxuLy8gTW9jayB2b2NhYnVsYXJ5RGF0YUhlbHBlclxuamVzdC5tb2NrKCcuLi8uLi9zcmMvdXRpbHMvdm9jYWJ1bGFyeS92b2NhYnVsYXJ5RGF0YUhlbHBlcicsICgpID0+ICh7XG4gIGlzQm9udXNMZXZlbDogamVzdC5mbigoKSA9PiBmYWxzZSksXG4gIGdldExldmVsQ29sb3I6IGplc3QuZm4oKCkgPT4gJ2JsdWUnKSxcbiAgZ2V0Vm9jYWJ1bGFyeURhdGE6IGplc3QuZm4oKGxldmVsLCBtb2RlKSA9PiB7XG4gICAgaWYgKGxldmVsID09PSAnQTEnIHx8IGxldmVsID09PSAnMScpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGV4ZXJjaXNlczogW3tcbiAgICAgICAgICB0aXRsZTogJ0lkZW50aXTDqSAmIGluZm9ybWF0aW9ucyBwZXJzb25uZWxsZXMnLFxuICAgICAgICAgIHdvcmRzOiBbXG4gICAgICAgICAgICB7IHdvcmQ6ICduYW1lJywgdHJhbnNsYXRpb246ICdub20nLCBleGFtcGxlOiAnTXkgbmFtZSBpcyBTYXJhaC4nIH0sXG4gICAgICAgICAgICB7IHdvcmQ6ICdoZWxsbycsIHRyYW5zbGF0aW9uOiAnYm9uam91cicsIGV4YW1wbGU6ICdIZWxsbywgaG93IGFyZSB5b3U/JyB9XG4gICAgICAgICAgXSxcbiAgICAgICAgfV0sXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAobGV2ZWwgPT09ICdCMScgfHwgbGV2ZWwgPT09ICczJykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZXhlcmNpc2VzOiBbe1xuICAgICAgICAgIHRpdGxlOiAnRXhwcmVzc2lvbiAmIENvbW11bmljYXRpb24gQXZhbmPDqWUnLFxuICAgICAgICAgIHdvcmRzOiBbXG4gICAgICAgICAgICB7IHdvcmQ6ICdyaGV0b3JpYycsIHRyYW5zbGF0aW9uOiAncmjDqXRvcmlxdWUnLCBleGFtcGxlOiAnSGlzIHJoZXRvcmljIHdhcyBwb3dlcmZ1bCBlbm91Z2ggdG8gY29udmluY2UgdGhlIGVudGlyZSBhdWRpZW5jZS4nIH0sXG4gICAgICAgICAgICB7IHdvcmQ6ICdzb3BoaXN0aWNhdGVkJywgdHJhbnNsYXRpb246ICdzb3BoaXN0aXF1w6knLCBleGFtcGxlOiAnU2hlIGhhcyBhIHNvcGhpc3RpY2F0ZWQgdW5kZXJzdGFuZGluZyBvZiB0aGUgdG9waWMuJyB9XG4gICAgICAgICAgXSxcbiAgICAgICAgfV0sXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAobGV2ZWwgPT09ICdDMScgfHwgbGV2ZWwgPT09ICc1Jykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZXhlcmNpc2VzOiBbe1xuICAgICAgICAgIHRpdGxlOiAnTWHDrnRyaXNlIExpbmd1aXN0aXF1ZSBBdmFuY8OpZScsXG4gICAgICAgICAgd29yZHM6IFtcbiAgICAgICAgICAgIHsgd29yZDogJ3ViaXF1aXRvdXMnLCB0cmFuc2xhdGlvbjogJ29tbmlwcsOpc2VudCcsIGV4YW1wbGU6ICdTbWFydHBob25lcyBoYXZlIGJlY29tZSB1YmlxdWl0b3VzIGluIG1vZGVybiBzb2NpZXR5LicgfSxcbiAgICAgICAgICAgIHsgd29yZDogJ3BhcmFkaWdtJywgdHJhbnNsYXRpb246ICdwYXJhZGlnbWUnLCBleGFtcGxlOiAnVGhpcyBkaXNjb3ZlcnkgcmVwcmVzZW50cyBhIG5ldyBwYXJhZGlnbSBpbiBzY2llbmNlLicgfVxuICAgICAgICAgIF0sXG4gICAgICAgIH1dLFxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGV4ZXJjaXNlczogW3tcbiAgICAgICAgdGl0bGU6ICdEZWZhdWx0IENhdGVnb3J5JyxcbiAgICAgICAgd29yZHM6IFtcbiAgICAgICAgICB7IHdvcmQ6ICdkZWZhdWx0JywgdHJhbnNsYXRpb246ICdkw6lmYXV0JywgZXhhbXBsZTogJ1RoaXMgaXMgYSBkZWZhdWx0IHdvcmQuJyB9XG4gICAgICAgIF0sXG4gICAgICB9XVxuICAgIH07XG4gIH0pLFxufSkpO1xuXG4vLyBNb2NrIG90aGVyIGhvb2tzXG5qZXN0Lm1vY2soJy4uLy4uL3NyYy9ob29rcy91c2VMYXN0QWN0aXZpdHknLCAoKSA9PiAoe1xuICBfX2VzTW9kdWxlOiB0cnVlLFxuICBkZWZhdWx0OiBqZXN0LmZuKCgpID0+ICh7XG4gICAgc2F2ZUFjdGl2aXR5OiBqZXN0LmZuKCksXG4gICAgbGFzdEFjdGl2aXR5OiBudWxsLFxuICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgY2xlYXJBY3Rpdml0eTogamVzdC5mbigpLFxuICAgIHJlbG9hZDogamVzdC5mbigpLFxuICB9KSksXG59KSk7XG5cbmRlc2NyaWJlKCdUZXN0IGRcXCdpbnTDqWdyYXRpb246IENoYXJnZW1lbnQgZGVzIGRvbm7DqWVzIHBhciBuaXZlYXUnLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICB9KTtcblxuICB0ZXN0KCdWb2NhYnVsYXJ5RXhlcmNpc2UgY2hhcmdlIGxlcyBkb25uw6llcyBkdSBuaXZlYXUgQTEgY29ycmVjdGVtZW50JywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICA8Vm9jYWJ1bGFyeUV4ZXJjaXNlIHJvdXRlPXt7IHBhcmFtczogeyBsZXZlbDogJ0ExJywgbW9kZTogJ2NsYXNzaWMnIH0gfX0gLz5cbiAgICApO1xuXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAvLyBWw6lyaWZpZXIgcXVlIGxlIG1vdCBkZSBuaXZlYXUgQTEgZXN0IGFmZmljaMOpXG4gICAgICBleHBlY3QoZ2V0QnlUZXh0KCduYW1lJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgIC8vIFbDqXJpZmllciBxdWUgbGEgY2F0w6lnb3JpZSBlc3QgY29ycmVjdGUgcG91ciBBMVxuICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnSWRlbnRpdMOpICYgaW5mb3JtYXRpb25zIHBlcnNvbm5lbGxlcycpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAvLyBWw6lyaWZpZXIgcXVlIGxlIGJvdXRvbiBwb3VyIHLDqXbDqWxlciBsYSB0cmFkdWN0aW9uIGVzdCBwcsOpc2VudFxuICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnUmV2ZWFsIFRyYW5zbGF0aW9uJykpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcblxuICAgIC8vIENsaXF1ZXIgc3VyIGxlIGJvdXRvbiBwb3VyIHLDqXbDqWxlciBsYSB0cmFkdWN0aW9uXG4gICAgY29uc3QgcmV2ZWFsQnV0dG9uID0gZ2V0QnlUZXh0KCdSZXZlYWwgVHJhbnNsYXRpb24nKTtcbiAgICBmaXJlRXZlbnQucHJlc3MocmV2ZWFsQnV0dG9uKTtcbiAgfSk7XG5cbiAgdGVzdCgnVm9jYWJ1bGFyeUV4ZXJjaXNlIGNoYXJnZSBsZXMgZG9ubsOpZXMgZHUgbml2ZWF1IEIxIGNvcnJlY3RlbWVudCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgPFZvY2FidWxhcnlFeGVyY2lzZSByb3V0ZT17eyBwYXJhbXM6IHsgbGV2ZWw6ICdCMScsIG1vZGU6ICdjbGFzc2ljJyB9IH19IC8+XG4gICAgKTtcblxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgLy8gVsOpcmlmaWVyIHF1ZSBsZSBtb3QgZGUgbml2ZWF1IEIxIGVzdCBhZmZpY2jDqVxuICAgICAgZXhwZWN0KGdldEJ5VGV4dCgncmhldG9yaWMnKSkudG9CZVRydXRoeSgpO1xuICAgICAgLy8gVsOpcmlmaWVyIHF1ZSBsYSBjYXTDqWdvcmllIGVzdCBjb3JyZWN0ZSBwb3VyIEIxXG4gICAgICBleHBlY3QoZ2V0QnlUZXh0KCdFeHByZXNzaW9uICYgQ29tbXVuaWNhdGlvbiBBdmFuY8OpZScpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAvLyBWw6lyaWZpZXIgcXVlIGxlIGJvdXRvbiBwb3VyIHLDqXbDqWxlciBsYSB0cmFkdWN0aW9uIGVzdCBwcsOpc2VudFxuICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnUmV2ZWFsIFRyYW5zbGF0aW9uJykpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnVm9jYWJ1bGFyeUV4ZXJjaXNlIGNoYXJnZSBsZXMgZG9ubsOpZXMgZHUgbml2ZWF1IEMxIGNvcnJlY3RlbWVudCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgPFZvY2FidWxhcnlFeGVyY2lzZSByb3V0ZT17eyBwYXJhbXM6IHsgbGV2ZWw6ICdDMScsIG1vZGU6ICdjbGFzc2ljJyB9IH19IC8+XG4gICAgKTtcblxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgLy8gVsOpcmlmaWVyIHF1ZSBsZSBtb3QgZGUgbml2ZWF1IEMxIGVzdCBhZmZpY2jDqVxuICAgICAgZXhwZWN0KGdldEJ5VGV4dCgndWJpcXVpdG91cycpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAvLyBWw6lyaWZpZXIgcXVlIGxhIGNhdMOpZ29yaWUgZXN0IGNvcnJlY3RlIHBvdXIgQzFcbiAgICAgIGV4cGVjdChnZXRCeVRleHQoJ01hw650cmlzZSBMaW5ndWlzdGlxdWUgQXZhbmPDqWUnKSkudG9CZVRydXRoeSgpO1xuICAgICAgLy8gVsOpcmlmaWVyIHF1ZSBsZSBib3V0b24gcG91ciByw6l2w6lsZXIgbGEgdHJhZHVjdGlvbiBlc3QgcHLDqXNlbnRcbiAgICAgIGV4cGVjdChnZXRCeVRleHQoJ1JldmVhbCBUcmFuc2xhdGlvbicpKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ1bDqXJpZmljYXRpb24gcXVlIGxlcyBtb3RzIHNvbnQgYmllbiBkaWZmw6lyZW50cyBzZWxvbiBsZXMgbml2ZWF1eCcsIGFzeW5jICgpID0+IHtcbiAgICAvLyBUZXN0IGF2ZWMgQTFcbiAgICBjb25zdCB7IGdldEJ5VGV4dDogZ2V0QnlUZXh0QTEsIHF1ZXJ5QnlUZXh0OiBxdWVyeUJ5VGV4dEExLCByZXJlbmRlciB9ID0gcmVuZGVyKFxuICAgICAgPFZvY2FidWxhcnlFeGVyY2lzZSByb3V0ZT17eyBwYXJhbXM6IHsgbGV2ZWw6ICdBMScsIG1vZGU6ICdjbGFzc2ljJyB9IH19IC8+XG4gICAgKTtcblxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KGdldEJ5VGV4dEExKCduYW1lJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgIC8vIFbDqXJpZmllciBxdSdvbiBuJ2EgcGFzIGxlcyBtb3RzIGRlcyBhdXRyZXMgbml2ZWF1eFxuICAgICAgZXhwZWN0KHF1ZXJ5QnlUZXh0QTEoJ3JoZXRvcmljJykpLnRvQmVOdWxsKCk7XG4gICAgICBleHBlY3QocXVlcnlCeVRleHRBMSgndWJpcXVpdG91cycpKS50b0JlTnVsbCgpO1xuICAgIH0pO1xuXG4gICAgLy8gQ2hhbmdlciBwb3VyIEIxXG4gICAgcmVyZW5kZXIoPFZvY2FidWxhcnlFeGVyY2lzZSByb3V0ZT17eyBwYXJhbXM6IHsgbGV2ZWw6ICdCMScsIG1vZGU6ICdjbGFzc2ljJyB9IH19IC8+KTtcblxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KGdldEJ5VGV4dEExKCdyaGV0b3JpYycpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAvLyBWw6lyaWZpZXIgcXUnb24gbidhIHBsdXMgbGVzIG1vdHMgQTFcbiAgICAgIGV4cGVjdChxdWVyeUJ5VGV4dEExKCduYW1lJykpLnRvQmVOdWxsKCk7XG4gICAgICBleHBlY3QocXVlcnlCeVRleHRBMSgndWJpcXVpdG91cycpKS50b0JlTnVsbCgpO1xuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdMZSBtb2RlIGRcXCdleGVyY2ljZSBlc3QgY29ycmVjdGVtZW50IHByaXMgZW4gY29tcHRlJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICA8Vm9jYWJ1bGFyeUV4ZXJjaXNlIHJvdXRlPXt7IHBhcmFtczogeyBsZXZlbDogJ0ExJywgbW9kZTogJ3JldmVyc2UnIH0gfX0gLz5cbiAgICApO1xuXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAvLyBNw6ptZSBhdmVjIGxlIG1vZGUgcmV2ZXJzZSwgb24gZG9pdCBhdm9pciBsZXMgYm9ubmVzIGRvbm7DqWVzIGRlIG5pdmVhdVxuICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnbmFtZScpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAvLyBWw6lyaWZpZXIgcXVlIGxhIGNhdMOpZ29yaWUgZXN0IGNvcnJlY3RlXG4gICAgICBleHBlY3QoZ2V0QnlUZXh0KCdJZGVudGl0w6kgJiBpbmZvcm1hdGlvbnMgcGVyc29ubmVsbGVzJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgIC8vIExlIG1vZGUgZXN0IHByaXMgZW4gY29tcHRlIHNpIGxlcyBkb25uw6llcyBzb250IGNoYXJnw6llc1xuICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnUmV2ZWFsIFRyYW5zbGF0aW9uJykpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiJBQU9BQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxhQUFhLEVBQUU7RUFBQSxPQUFPO0lBQzlCQyxjQUFjLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLFVBQUFDLFFBQVE7TUFBQSxPQUFJQSxRQUFRLENBQUMsQ0FBQztJQUFBLEVBQUM7SUFDL0NDLE1BQU0sRUFBRTtNQUNOQyxJQUFJLEVBQUVKLElBQUksQ0FB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