9fe411a64f318fc2980af9f88f4d7399
_getJestObj().mock('../../../src/components/exercise-common/CategorySelector/style', function () {
  var _jest$requireActual = jest.requireActual('react-native'),
    StyleSheet = _jest$requireActual.StyleSheet;
  return function () {
    return StyleSheet.create({
      container: {},
      backgroundGradient: {},
      scrollView: {},
      scrollContent: {},
      categoryItemWrapper: {},
      categoryTouchable: {},
      selectedCategoryItem: {},
      selectedInner: {},
      selectedCategoryText: {
        color: '#FFFFFF'
      },
      sparkleContainer: {},
      sparkle: {},
      categoryItem: {},
      categoryInner: {},
      categoryText: {}
    });
  };
});
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  return Object.assign({}, RN, {
    Animated: Object.assign({}, RN.Animated, {
      Value: mockAnimatedValue,
      timing: mockTiming
    }),
    ScrollView: RN.ScrollView,
    TouchableOpacity: RN.TouchableOpacity
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _CategorySelector = _interopRequireWildcard(require("../../../src/components/exercise-common/CategorySelector"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockTiming = jest.fn(function () {
  return {
    start: jest.fn(function (cb) {
      return cb == null ? void 0 : cb({
        finished: true
      });
    })
  };
});
var mockAnimatedValue = jest.fn(function () {
  return {
    interpolate: jest.fn(function () {
      return {};
    }),
    setValue: jest.fn(),
    stopAnimation: jest.fn()
  };
});
describe('CategorySelector', function () {
  var categories = [{
    id: '1',
    name: 'Grammar'
  }, {
    id: '2',
    name: 'Vocabulary'
  }, {
    id: '3',
    name: 'Reading'
  }];
  beforeEach(function () {
    jest.useFakeTimers();
    jest.clearAllMocks();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  it('should render all categories correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories
      })),
      getByText = _render.getByText;
    expect(getByText('Grammar')).toBeTruthy();
    expect(getByText('Vocabulary')).toBeTruthy();
    expect(getByText('Reading')).toBeTruthy();
  });
  it('should display the selected category with the sparkle emoji', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: function onSelectCategory() {}
      })),
      getByText = _render2.getByText;
    expect(getByText('âœ¨')).toBeTruthy();
  });
  it('should call onSelectCategory with the correct category id when a category is pressed', function () {
    var onSelectCategory = jest.fn();
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        onSelectCategory: onSelectCategory
      })),
      getByText = _render3.getByText;
    _reactNative.fireEvent.press(getByText('Vocabulary'));
    expect(onSelectCategory).toHaveBeenCalledWith('2');
  });
  it('should trigger animation logic when selectedCategory changes', (0, _asyncToGenerator2.default)(function* () {
    var onSelectCategory = jest.fn();
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: onSelectCategory
      })),
      rerender = _render4.rerender;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "2",
        onSelectCategory: onSelectCategory
      }));
      jest.advanceTimersByTime(300);
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockTiming).toHaveBeenCalledTimes(2);
    });
  }));
  it('should trigger press animations on touch', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: function onSelectCategory() {}
      })),
      getByText = _render5.getByText;
    mockTiming.mockClear();
    (0, _reactNative.fireEvent)(getByText('Vocabulary'), 'onPressIn');
    expect(mockTiming).toHaveBeenCalledTimes(1);
    expect(mockTiming).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({
      toValue: 0.95,
      useNativeDriver: true
    }));
    (0, _reactNative.fireEvent)(getByText('Vocabulary'), 'onPressOut');
    expect(mockTiming).toHaveBeenCalledTimes(2);
    expect(mockTiming).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({
      toValue: 1,
      useNativeDriver: true
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,