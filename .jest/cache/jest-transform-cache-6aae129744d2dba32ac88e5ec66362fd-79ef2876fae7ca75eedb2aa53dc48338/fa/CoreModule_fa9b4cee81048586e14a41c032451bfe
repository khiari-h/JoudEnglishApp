3d3806d9866cc9dbb0eb64e5dcc3ce22
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SharedRef = exports.SharedObject = exports.NativeModule = exports.EventEmitter = void 0;
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var EventEmitter = exports.EventEmitter = function () {
  function EventEmitter() {
    (0, _classCallCheck2.default)(this, EventEmitter);
  }
  return (0, _createClass2.default)(EventEmitter, [{
    key: "addListener",
    value: function addListener(eventName, listener) {
      var _this$listeners,
        _this$listeners3,
        _this = this;
      if (!this.listeners) {
        this.listeners = new Map();
      }
      if (!((_this$listeners = this.listeners) != null && _this$listeners.has(eventName))) {
        var _this$listeners2;
        (_this$listeners2 = this.listeners) == null || _this$listeners2.set(eventName, new Set());
      }
      var previousListenerCount = this.listenerCount(eventName);
      (_this$listeners3 = this.listeners) == null || (_this$listeners3 = _this$listeners3.get(eventName)) == null || _this$listeners3.add(listener);
      if (previousListenerCount === 0 && this.listenerCount(eventName) === 1) {
        this.startObserving(eventName);
      }
      return {
        remove: function remove() {
          _this.removeListener(eventName, listener);
        }
      };
    }
  }, {
    key: "removeListener",
    value: function removeListener(eventName, listener) {
      var _this$listeners4;
      var hasRemovedListener = (_this$listeners4 = this.listeners) == null || (_this$listeners4 = _this$listeners4.get(eventName)) == null ? void 0 : _this$listeners4.delete(listener);
      if (this.listenerCount(eventName) === 0 && hasRemovedListener) {
        this.stopObserving(eventName);
      }
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners(eventName) {
      var _this$listeners5;
      var previousListenerCount = this.listenerCount(eventName);
      (_this$listeners5 = this.listeners) == null || (_this$listeners5 = _this$listeners5.get(eventName)) == null || _this$listeners5.clear();
      if (previousListenerCount > 0) {
        this.stopObserving(eventName);
      }
    }
  }, {
    key: "emit",
    value: function emit(eventName) {
      var _this$listeners6;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      var listeners = new Set((_this$listeners6 = this.listeners) == null ? void 0 : _this$listeners6.get(eventName));
      listeners.forEach(function (listener) {
        try {
          listener.apply(void 0, args);
        } catch (error) {
          console.error(error);
        }
      });
    }
  }, {
    key: "listenerCount",
    value: function listenerCount(eventName) {
      var _this$listeners$get$s, _this$listeners7;
      return (_this$listeners$get$s = (_this$listeners7 = this.listeners) == null || (_this$listeners7 = _this$listeners7.get(eventName)) == null ? void 0 : _this$listeners7.size) != null ? _this$listeners$get$s : 0;
    }
  }, {
    key: "startObserving",
    value: function startObserving(eventName) {}
  }, {
    key: "stopObserving",
    value: function stopObserving(eventName) {}
  }]);
}();
var NativeModule = exports.NativeModule = function (_ref) {
  function NativeModule() {
    (0, _classCallCheck2.default)(this, NativeModule);
    return _callSuper(this, NativeModule, arguments);
  }
  (0, _inherits2.default)(NativeModule, _ref);
  return (0, _createClass2.default)(NativeModule);
}(EventEmitter);
var SharedObject = exports.SharedObject = function (_ref2) {
  function SharedObject() {
    (0, _classCallCheck2.default)(this, SharedObject);
    return _callSuper(this, SharedObject, arguments);
  }
  (0, _inherits2.default)(SharedObject, _ref2);
  return (0, _createClass2.default)(SharedObject, [{
    key: "release",
    value: function release() {}
  }]);
}(EventEmitter);
var SharedRef = exports.SharedRef = function (_ref3) {
  function SharedRef() {
    var _this2;
    (0, _classCallCheck2.default)(this, SharedRef);
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    _this2 = _callSuper(this, SharedRef, [].concat(args));
    _this2.nativeRefType = 'unknown';
    return _this2;
  }
  (0, _inherits2.default)(SharedRef, _ref3);
  return (0, _createClass2.default)(SharedRef);
}(SharedObject);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,