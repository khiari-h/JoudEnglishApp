ac6e7ffbd6d054cd3e77f10c9e1cc351
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useEvent = useEvent;
exports.useEventListener = useEventListener;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
function useEvent(eventEmitter, eventName) {
  var initialValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var _useState = (0, _react.useState)(initialValue),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    event = _useState2[0],
    setEvent = _useState2[1];
  var listener = function listener(event) {
    return setEvent(event);
  };
  useEventListener(eventEmitter, eventName, listener);
  return event;
}
function useEventListener(eventEmitter, eventName, listener) {
  var listenerRef = (0, _react.useRef)(listener);
  listenerRef.current = listener;
  (0, _react.useEffect)(function () {
    var callback = function callback() {
      return listenerRef.current.apply(listenerRef, arguments);
    };
    var subscription = eventEmitter.addListener(eventName, callback);
    return function () {
      return subscription.remove();
    };
  }, [eventEmitter, eventName, listenerRef]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwidXNlRXZlbnQiLCJldmVudEVtaXR0ZXIiLCJldmVudE5hbWUiLCJpbml0aWFsVmFsdWUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJfdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsIl91c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheTIiLCJkZWZhdWx0IiwiZXZlbnQiLCJzZXRFdmVudCIsImxpc3RlbmVyIiwidXNlRXZlbnRMaXN0ZW5lciIsImxpc3RlbmVyUmVmIiwidXNlUmVmIiwiY3VycmVudCIsInVzZUVmZmVjdCIsImNhbGxiYWNrIiwiYXBwbHkiLCJzdWJzY3JpcHRpb24iLCJhZGRMaXN0ZW5lciIsInJlbW92ZSJdLCJzb3VyY2VzIjpbInVzZUV2ZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXhwby1tb2R1bGVzLWNvcmUvdHlwZXMnO1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuXG50eXBlIEFueUV2ZW50TGlzdGVuZXIgPSAoLi4uYXJnczogYW55W10pID0+IGFueTtcblxuLyoqXG4gKiBUeXBlIGhlbHBlciB0aGF0IGluZmVycyB0aGUgZXZlbnQgbmFtZSBmcm9tIHRoZSBlbWl0dGVyJ3MgZXZlbnRzIG1hcC5cbiAqL1xudHlwZSBJbmZlckV2ZW50TmFtZTxURXZlbnRzTWFwPiA9XG4gIFRFdmVudHNNYXAgZXh0ZW5kcyBSZWNvcmQ8aW5mZXIgVEV2ZW50TmFtZSBleHRlbmRzIGtleW9mIFRFdmVudHNNYXAsIEFueUV2ZW50TGlzdGVuZXI+XG4gICAgPyBURXZlbnROYW1lXG4gICAgOiBuZXZlcjtcblxuLyoqXG4gKiBUeXBlIGhlbHBlciB0aGF0IGluZmVycyB0aGUgZXZlbnQgbGlzdGVuZXIgZnJvbSB0aGUgZW1pdHRlcidzIGV2ZW50cyBtYXAuXG4gKi9cbnR5cGUgSW5mZXJFdmVudExpc3RlbmVyPFRFdmVudHNNYXAsIFRFdmVudE5hbWUgZXh0ZW5kcyBrZXlvZiBURXZlbnRzTWFwPiA9XG4gIFRFdmVudHNNYXAgZXh0ZW5kcyBSZWNvcmQ8VEV2ZW50TmFtZSwgaW5mZXIgVEV2ZW50TGlzdGVuZXIgZXh0ZW5kcyBBbnlFdmVudExpc3RlbmVyPlxuICAgID8gVEV2ZW50TGlzdGVuZXJcbiAgICA6IG5ldmVyO1xuXG4vKipcbiAqIFR5cGUgaGVscGVyIHRoYXQgaW5mZXJzIHRoZSBmaXJzdCBwYXJhbWV0ZXIgb2YgdGhlIGV2ZW50IGxpc3RlbmVyLlxuICovXG50eXBlIEluZmVyRXZlbnRQYXJhbWV0ZXI8XG4gIFRFdmVudExpc3RlbmVyIGV4dGVuZHMgQW55RXZlbnRMaXN0ZW5lcixcbiAgVEluaXRpYWxWYWx1ZSxcbj4gPSBUSW5pdGlhbFZhbHVlIGV4dGVuZHMgUGFyYW1ldGVyczxURXZlbnRMaXN0ZW5lcj5bMF1cbiAgPyBQYXJhbWV0ZXJzPFRFdmVudExpc3RlbmVyPlswXVxuICA6IFBhcmFtZXRlcnM8VEV2ZW50TGlzdGVuZXI+WzBdIHwgVEluaXRpYWxWYWx1ZSB8IG51bGw7XG5cbi8qKlxuICogUmVhY3QgaG9vayB0aGF0IGxpc3RlbnMgdG8gZXZlbnRzIGVtaXR0ZWQgYnkgdGhlIGdpdmVuIG9iamVjdC4gVGhlIHJldHVybmVkIHZhbHVlIGlzIGFuIGV2ZW50IHBhcmFtZXRlclxuICogdGhhdCBnZXRzIHVwZGF0ZWQgd2hlbmV2ZXIgYSBuZXcgZXZlbnQgaXMgZGlzcGF0Y2hlZC5cbiAqIEBwYXJhbSBldmVudEVtaXR0ZXIgQW4gb2JqZWN0IHRoYXQgZW1pdHMgZXZlbnRzLiBGb3IgZXhhbXBsZSwgYSBuYXRpdmUgbW9kdWxlIG9yIHNoYXJlZCBvYmplY3Qgb3IgYW4gaW5zdGFuY2Ugb2YgW2BFdmVudEVtaXR0ZXJgXSgjZXZlbnRlbWl0dGVyKS5cbiAqIEBwYXJhbSBldmVudE5hbWUgTmFtZSBvZiB0aGUgZXZlbnQgdG8gbGlzdGVuIHRvLlxuICogQHBhcmFtIGluaXRpYWxWYWx1ZSBBbiBldmVudCBwYXJhbWV0ZXIgdG8gdXNlIHVudGlsIHRoZSBldmVudCBpcyBjYWxsZWQgZm9yIHRoZSBmaXJzdCB0aW1lLlxuICogQHJldHVybnMgQSBwYXJhbWV0ZXIgb2YgdGhlIGV2ZW50IGxpc3RlbmVyLlxuICogQGV4YW1wbGVcbiAqIGBgYHRzeFxuICogaW1wb3J0IHsgdXNlRXZlbnQgfSBmcm9tICdleHBvJztcbiAqIGltcG9ydCB7IFZpZGVvUGxheWVyIH0gZnJvbSAnZXhwby12aWRlbyc7XG4gKlxuICogZXhwb3J0IGZ1bmN0aW9uIFBsYXllclN0YXR1cyh7IHZpZGVvUGxheWVyIH06IHsgdmlkZW9QbGF5ZXI6IFZpZGVvUGxheWVyIH0pIHtcbiAqICAgY29uc3QgeyBzdGF0dXMgfSA9IHVzZUV2ZW50KHZpZGVvUGxheWVyLCAnc3RhdHVzQ2hhbmdlJywgeyBzdGF0dXM6IHZpZGVvUGxheWVyLnN0YXR1cyB9KTtcbiAqXG4gKiAgIHJldHVybiA8VGV4dD57YFBsYXllciBzdGF0dXM6ICR7c3RhdHVzfWB9PC9UZXh0PjtcbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlRXZlbnQ8XG4gIFRFdmVudHNNYXAgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBBbnlFdmVudExpc3RlbmVyPixcbiAgVEV2ZW50TmFtZSBleHRlbmRzIEluZmVyRXZlbnROYW1lPFRFdmVudHNNYXA+LFxuICBURXZlbnRMaXN0ZW5lciBleHRlbmRzIEluZmVyRXZlbnRMaXN0ZW5lcjxURXZlbnRzTWFwLCBURXZlbnROYW1lPixcbiAgVEluaXRpYWxWYWx1ZSBleHRlbmRzIFBhcmFtZXRlcnM8VEV2ZW50TGlzdGVuZXI+WzBdIHwgbnVsbCxcbj4oXG4gIGV2ZW50RW1pdHRlcjogRXZlbnRFbWl0dGVyPFRFdmVudHNNYXA+LFxuICBldmVudE5hbWU6IFRFdmVudE5hbWUsXG4gIGluaXRpYWxWYWx1ZTogVEluaXRpYWxWYWx1ZSB8IG51bGwgPSBudWxsXG4pOiBJbmZlckV2ZW50UGFyYW1ldGVyPFRFdmVudExpc3RlbmVyLCBUSW5pdGlhbFZhbHVlPiB7XG4gIGNvbnN0IFtldmVudCwgc2V0RXZlbnRdID0gdXNlU3RhdGU8UGFyYW1ldGVyczxURXZlbnRMaXN0ZW5lcj5bMF0gfCBUSW5pdGlhbFZhbHVlIHwgbnVsbD4oXG4gICAgaW5pdGlhbFZhbHVlXG4gICk7XG4gIGNvbnN0IGxpc3RlbmVyID0gKGV2ZW50OiBQYXJhbWV0ZXJzPFRFdmVudExpc3RlbmVyPlswXSkgPT4gc2V0RXZlbnQoZXZlbnQpO1xuXG4gIHVzZUV2ZW50TGlzdGVuZXIoZXZlbnRFbWl0dGVyLCBldmVudE5hbWUsIGxpc3RlbmVyIGFzIEluZmVyRXZlbnRMaXN0ZW5lcjxURXZlbnRzTWFwLCBURXZlbnROYW1lPik7XG5cbiAgcmV0dXJuIGV2ZW50IGFzIEluZmVyRXZlbnRQYXJhbWV0ZXI8VEV2ZW50TGlzdGVuZXIsIFRJbml0aWFsVmFsdWU+O1xufVxuXG4vKipcbiAqIFJlYWN0IGhvb2sgdGhhdCBsaXN0ZW5zIHRvIGV2ZW50cyBlbWl0dGVkIGJ5IHRoZSBnaXZlbiBvYmplY3QgYW5kIGNhbGxzIHRoZSBsaXN0ZW5lciBmdW5jdGlvbiB3aGVuZXZlciBhIG5ldyBldmVudCBpcyBkaXNwYXRjaGVkLlxuICogVGhlIGV2ZW50IGxpc3RlbmVyIGlzIGF1dG9tYXRpY2FsbHkgYWRkZWQgZHVyaW5nIHRoZSBmaXJzdCByZW5kZXIgYW5kIHJlbW92ZWQgd2hlbiB0aGUgY29tcG9uZW50IHVubW91bnRzLlxuICogQHBhcmFtIGV2ZW50RW1pdHRlciBBbiBvYmplY3QgdGhhdCBlbWl0cyBldmVudHMuIEZvciBleGFtcGxlLCBhIG5hdGl2ZSBtb2R1bGUgb3Igc2hhcmVkIG9iamVjdCBvciBhbiBpbnN0YW5jZSBvZiBbYEV2ZW50RW1pdHRlcmBdKCNldmVudGVtaXR0ZXIpLlxuICogQHBhcmFtIGV2ZW50TmFtZSBOYW1lIG9mIHRoZSBldmVudCB0byBsaXN0ZW4gdG8uXG4gKiBAcGFyYW0gbGlzdGVuZXIgQSBmdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIGV2ZW50IGlzIGRpc3BhdGNoZWQuXG4gKiBAZXhhbXBsZVxuICogYGBgdHN4XG4gKiBpbXBvcnQgeyB1c2VFdmVudExpc3RlbmVyIH0gZnJvbSAnZXhwbyc7XG4gKiBpbXBvcnQgeyB1c2VWaWRlb1BsYXllciwgVmlkZW9WaWV3IH0gZnJvbSAnZXhwby12aWRlbyc7XG4gKlxuICogZXhwb3J0IGZ1bmN0aW9uIFZpZGVvUGxheWVyVmlldygpIHtcbiAqICAgY29uc3QgcGxheWVyID0gdXNlVmlkZW9QbGF5ZXIodmlkZW9Tb3VyY2UpO1xuICpcbiAqICAgdXNlRXZlbnRMaXN0ZW5lcihwbGF5ZXIsICdwbGF5aW5nQ2hhbmdlJywgKHsgaXNQbGF5aW5nIH0pID0+IHtcbiAqICAgICBjb25zb2xlLmxvZygnUGxheWVyIGlzIHBsYXlpbmc6JywgaXNQbGF5aW5nKTtcbiAqICAgfSk7XG4gKlxuICogICByZXR1cm4gPFZpZGVvVmlldyBwbGF5ZXI9e3BsYXllcn0gLz47XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUV2ZW50TGlzdGVuZXI8XG4gIFRFdmVudHNNYXAgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBBbnlFdmVudExpc3RlbmVyPixcbiAgVEV2ZW50TmFtZSBleHRlbmRzIEluZmVyRXZlbnROYW1lPFRFdmVudHNNYXA+LFxuICBURXZlbnRMaXN0ZW5lciBleHRlbmRzIEluZmVyRXZlbnRMaXN0ZW5lcjxURXZlbnRzTWFwLCBURXZlbnROYW1lPixcbj4oZXZlbnRFbWl0dGVyOiBFdmVudEVtaXR0ZXI8VEV2ZW50c01hcD4sIGV2ZW50TmFtZTogVEV2ZW50TmFtZSwgbGlzdGVuZXI6IFRFdmVudExpc3RlbmVyKTogdm9pZCB7XG4gIC8vIEFsd2F5cyB1c2UgdGhlIG1vc3QgcmVjZW50IHZlcnNpb24gb2YgdGhlIGxpc3RlbmVyIGluc2lkZSB0aGUgZWZmZWN0LFxuICAvLyB3aXRob3V0IG1lbW9pemF0aW9uIHNvIHRoZSBsaXN0ZW5lcnMgZG9uJ3QgaGF2ZSB0byBiZSBzd2FwcGVkIHdpdGggZXZlcnkgcmVuZGVyLlxuICBjb25zdCBsaXN0ZW5lclJlZiA9IHVzZVJlZjxURXZlbnRMaXN0ZW5lcj4obGlzdGVuZXIpO1xuICBsaXN0ZW5lclJlZi5jdXJyZW50ID0gbGlzdGVuZXI7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBjYWxsYmFjayA9ICguLi5hcmdzOiBhbnlbXSkgPT4gbGlzdGVuZXJSZWYuY3VycmVudCguLi5hcmdzKTtcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBldmVudEVtaXR0ZXIuYWRkTGlzdGVuZXI8VEV2ZW50TmFtZT4oXG4gICAgICBldmVudE5hbWUsXG4gICAgICBjYWxsYmFjayBhcyBURXZlbnRzTWFwW1RFdmVudE5hbWVdXG4gICAgKTtcblxuICAgIHJldHVybiAoKSA9PiBzdWJzY3JpcHRpb24ucmVtb3ZlKCk7XG4gIH0sIFtldmVudEVtaXR0ZXIsIGV2ZW50TmFtZSwgbGlzdGVuZXJSZWZdKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQWlETyxTQUFTQyxRQUFRQSxDQU10QkMsWUFBc0MsRUFDdENDLFNBQXFCLEVBRStCO0VBQUEsSUFEcERDLFlBQWtDLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLElBQUk7RUFFekMsSUFBQUcsU0FBQSxHQUEwQixJQUFBQyxlQUFRLEVBQ2hDTCxZQUNGLENBQUM7SUFBQU0sVUFBQSxPQUFBQyxlQUFBLENBQUFDLE9BQUEsRUFBQUosU0FBQTtJQUZNSyxLQUFLLEdBQUFILFVBQUE7SUFBRUksUUFBUSxHQUFBSixVQUFBO0VBR3RCLElBQU1LLFFBQVEsR0FBRyxTQUFYQSxRQUFRQSxDQUFJRixLQUFvQztJQUFBLE9BQUtDLFFBQVEsQ0FBQ0QsS0FBSyxDQUFDO0VBQUE7RUFFMUVHLGdCQUFnQixDQUFDZCxZQUFZLEVBQUVDLFNBQVMsRUFBRVksUUFBc0QsQ0FBQztFQUVqRyxPQUFPRixLQUFLO0FBQ2Q7QUF3Qk8sU0FBU0csZ0JBQWdCQSxDQUk5QmQsWUFBc0MsRUFBRUMsU0FBcUIsRUFBRVksUUFBd0IsRUFBUTtFQUcvRixJQUFNRSxXQUFXLEdBQUcsSUFBQUMsYUFBTSxFQUFpQkgsUUFBUSxDQUFDO0VBQ3BERSxXQUFXLENBQUNFLE9BQU8sR0FBR0osUUFBUTtFQUU5QixJQUFBSyxnQkFBUyxFQUFDLFlBQU07SUFDZCxJQUFNQyxRQUFRLEdBQUcsU0FBWEEsUUFBUUEsQ0FBQTtNQUFBLE9BQXVCSixXQUFXLENBQUNFLE9BQU8sQ0FBQUcsS0FBQSxDQUFuQkwsV0FBVyxFQUFBWixTQUFnQixDQUFDO0lBQUE7SUFDakUsSUFBTWtCLFlBQVksR0FBR3JCLFlBQVksQ0FBQ3NCLFdBQVcsQ0FDM0NyQixTQUFTLEVBQ1RrQixRQUNGLENBQUM7SUFFRCxPQUFPO01BQUEsT0FBTUUsWUFBWSxDQUFDRSxNQUFNLENBQUMsQ0FBQztJQUFBO0VBQ3BDLENBQUMsRUFBRSxDQUFDdkIsWUFBWSxFQUFFQyxTQUFTLEVBQUVjLFdBQVcsQ0FBQyxDQUFDO0FBQzVDIiwiaWdub3JlTGlzdCI6W119