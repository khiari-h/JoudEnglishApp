d1186726151b7d0f219276762e402ac3
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _reactNative = require("react-native");
var _native = require("@react-navigation/native");
var _expoRouter = require("expo-router");
var _react = require("react");
var _Container = _interopRequireWildcard(require("../../../components/layout/Container"));
var _VocabularyHeader = _interopRequireDefault(require("./VocabularyHeader"));
var _VocabularyCategorySelector = _interopRequireDefault(require("./VocabularyCategorySelector"));
var _VocabularyProgress = _interopRequireDefault(require("./VocabularyProgress"));
var _VocabularyWordSection = _interopRequireDefault(require("./VocabularyWordSection"));
var _VocabularyNavigation = _interopRequireDefault(require("./VocabularyNavigation"));
var _useVocabulary2 = _interopRequireDefault(require("./hooks/useVocabulary"));
var _useLastActivity2 = _interopRequireDefault(require("../../../hooks/useLastActivity"));
var _vocabularyDataHelper = require("../../../utils/vocabulary/vocabularyDataHelper");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var VocabularyExercise = function VocabularyExercise(_ref) {
  var route = _ref.route;
  var _ref2 = route.params || {},
    level = _ref2.level,
    mode = _ref2.mode;
  var navigation = (0, _native.useNavigation)();
  var styles = (0, _style.default)();
  var _useLastActivity = (0, _useLastActivity2.default)(),
    saveActivity = _useLastActivity.saveActivity;
  var finalMode = mode || ((0, _vocabularyDataHelper.isBonusLevel)(level) ? "fast" : "classic");
  var levelColor = (0, _vocabularyDataHelper.getLevelColor)(level);
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    vocabularyData = _useState2[0],
    setVocabularyData = _useState2[1];
  (0, _react.useEffect)(function () {
    var isMounted = true;
    var load = function () {
      var _ref3 = (0, _asyncToGenerator2.default)(function* () {
        var data = yield (0, _vocabularyDataHelper.loadVocabularyData)(level, finalMode);
        if (isMounted) setVocabularyData(data);
      });
      return function load() {
        return _ref3.apply(this, arguments);
      };
    }();
    load();
    return function () {
      isMounted = false;
    };
  }, [level, finalMode]);
  var _useVocabulary = (0, _useVocabulary2.default)(vocabularyData, level, finalMode),
    categoryIndex = _useVocabulary.categoryIndex,
    wordIndex = _useVocabulary.wordIndex,
    showTranslation = _useVocabulary.showTranslation,
    completedWords = _useVocabulary.completedWords,
    loaded = _useVocabulary.loaded,
    showDetailedProgress = _useVocabulary.showDetailedProgress,
    currentWord = _useVocabulary.currentWord,
    currentCategory = _useVocabulary.currentCategory,
    changeCategory = _useVocabulary.changeCategory,
    toggleTranslation = _useVocabulary.toggleTranslation,
    toggleDetailedProgress = _useVocabulary.toggleDetailedProgress,
    handleNext = _useVocabulary.handleNext,
    handlePrevious = _useVocabulary.handlePrevious,
    canGoToPrevious = _useVocabulary.canGoToPrevious,
    isLastWordInExercise = _useVocabulary.isLastWordInExercise,
    display = _useVocabulary.display,
    saveData = _useVocabulary.saveData;
  (0, _react.useEffect)(function () {
    if (!loaded || !vocabularyData || !currentWord) return;
    var totalWords = 15;
    if (vocabularyData.categories && Array.isArray(vocabularyData.categories)) {
      totalWords = vocabularyData.categories.reduce(function (total, cat) {
        var _cat$words;
        return total + (((_cat$words = cat.words) == null ? void 0 : _cat$words.length) || 0);
      }, 0);
    } else if (vocabularyData.exercises && Array.isArray(vocabularyData.exercises)) {
      totalWords = vocabularyData.exercises.reduce(function (total, ex) {
        var _ex$words;
        return total + (((_ex$words = ex.words) == null ? void 0 : _ex$words.length) || 0);
      }, 0);
    } else if (vocabularyData.words && Array.isArray(vocabularyData.words)) {
      totalWords = vocabularyData.words.length;
    }
    var activityData = {
      title: `Vocabulaire ${finalMode === "fast" ? "Fast" : ""}`,
      level: level,
      type: "vocabulary",
      mode: finalMode,
      metadata: {
        word: wordIndex,
        totalWords: totalWords,
        category: (currentCategory == null ? void 0 : currentCategory.name) || "Général",
        categoryIndex: categoryIndex,
        wordIndex: wordIndex
      }
    };
    saveActivity(activityData);
  }, [wordIndex]);
  (0, _react.useEffect)(function () {
    if (!loaded || !vocabularyData || !currentWord) return;
    var totalWords = 15;
    if (vocabularyData.categories && Array.isArray(vocabularyData.categories)) {
      totalWords = vocabularyData.categories.reduce(function (total, cat) {
        var _cat$words2;
        return total + (((_cat$words2 = cat.words) == null ? void 0 : _cat$words2.length) || 0);
      }, 0);
    } else if (vocabularyData.exercises && Array.isArray(vocabularyData.exercises)) {
      totalWords = vocabularyData.exercises.reduce(function (total, ex) {
        var _ex$words2;
        return total + (((_ex$words2 = ex.words) == null ? void 0 : _ex$words2.length) || 0);
      }, 0);
    } else if (vocabularyData.words && Array.isArray(vocabularyData.words)) {
      totalWords = vocabularyData.words.length;
    }
    var activityData = {
      title: `Vocabulaire ${finalMode === "fast" ? "Fast" : ""}`,
      level: level,
      type: "vocabulary",
      mode: finalMode,
      metadata: {
        word: wordIndex,
        totalWords: totalWords,
        category: (currentCategory == null ? void 0 : currentCategory.name) || "Général",
        categoryIndex: categoryIndex,
        wordIndex: wordIndex
      }
    };
    saveActivity(activityData);
  }, [loaded, vocabularyData]);
  var handleBackPress = (0, _react.useCallback)(function () {
    _expoRouter.router.push({
      pathname: "/tabs/exerciseSelection",
      params: {
        level: level
      }
    });
  }, [level]);
  var handleCategoryChange = (0, _react.useCallback)(function (index) {
    return changeCategory(index);
  }, [changeCategory]);
  var handleCategoryProgressPress = (0, _react.useCallback)(function (index) {
    return changeCategory(index);
  }, [changeCategory]);
  var handleToggleProgressDetails = (0, _react.useCallback)(function () {
    return toggleDetailedProgress();
  }, [toggleDetailedProgress]);
  var handleNextWord = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    var result = handleNext();
    if (typeof saveData === 'function') {
      yield saveData();
    }
    if (result.completed) {
      navigation.goBack();
    }
  }), [handleNext, navigation, saveData]);
  var handlePreviousWord = (0, _react.useCallback)(function () {
    return handlePrevious();
  }, [handlePrevious]);
  if (!loaded || !vocabularyData) {
    return (0, _jsxRuntime.jsx)(_Container.default, {
      safeArea: true,
      safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
      backgroundColor: "#f8fafc",
      statusBarStyle: "dark-content",
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.loadingContainer,
        children: (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
          testID: "activity-indicator",
          size: "large",
          color: levelColor
        })
      })
    });
  }
  return (0, _jsxRuntime.jsxs)(_Container.default, {
    safeArea: true,
    safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
    withScrollView: true,
    backgroundColor: "#f8fafc",
    statusBarStyle: "dark-content",
    withPadding: false,
    scrollViewProps: {
      showsVerticalScrollIndicator: false,
      contentContainerStyle: styles.scrollContent
    },
    children: [(0, _jsxRuntime.jsx)(_VocabularyHeader.default, {
      level: level,
      mode: finalMode,
      onBackPress: handleBackPress
    }), (0, _jsxRuntime.jsx)(_VocabularyProgress.default, {
      vocabularyData: vocabularyData,
      completedWords: completedWords,
      levelColor: levelColor,
      expanded: showDetailedProgress,
      onToggleExpand: handleToggleProgressDetails,
      onCategoryPress: handleCategoryProgressPress
    }), (0, _jsxRuntime.jsx)(_VocabularyCategorySelector.default, {
      categories: display.categories,
      selectedIndex: categoryIndex,
      onSelectCategory: handleCategoryChange,
      levelColor: levelColor
    }), (0, _jsxRuntime.jsx)(_VocabularyWordSection.default, {
      currentWord: currentWord,
      wordCounter: display.wordCounter,
      mode: finalMode,
      level: level,
      levelColor: levelColor,
      showTranslation: showTranslation,
      onToggleTranslation: toggleTranslation
    }), (0, _jsxRuntime.jsx)(_VocabularyNavigation.default, {
      onNext: handleNextWord,
      onPrevious: handlePreviousWord,
      canGoPrevious: canGoToPrevious,
      isLast: isLastWordInExercise,
      levelColor: levelColor
    })]
  });
};
var _default = exports.default = VocabularyExercise;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,