3bf2ecfa004e4a813957fa69c221b7ab
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vocab = void 0;
function cov_299e9yrua8() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\data\\vocabulary\\6\\categories\\12_ia_ethique_technologies.js";
  var hash = "8c09742df31d135be0d2388e97fd6bd49c5403e7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\data\\vocabulary\\6\\categories\\12_ia_ethique_technologies.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 21
        },
        end: {
          line: 931,
          column: 1
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8c09742df31d135be0d2388e97fd6bd49c5403e7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_299e9yrua8 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_299e9yrua8();
var vocab = exports.vocab = (cov_299e9yrua8().s[0]++, {
  title: "Intelligence Artificielle et Éthique Technologique",
  words: [{
    word: "symbolic AI",
    translation: "IA symbolique",
    example: "Symbolic AI manipulates abstract symbols to represent real-world entities and relationships."
  }, {
    word: "computational complexity",
    translation: "complexité computationnelle",
    example: "Computational complexity measures the resources required to run an algorithm."
  }, {
    word: "inference engine",
    translation: "moteur d'inférence",
    example: "The inference engine applies logical rules to derive conclusions from available data."
  }, {
    word: "knowledge representation",
    translation: "représentation des connaissances",
    example: "Knowledge representation structures information for computational reasoning."
  }, {
    word: "artificial general intelligence",
    translation: "intelligence artificielle générale",
    example: "Artificial general intelligence would match human versatility across tasks."
  }, {
    word: "intelligent agent",
    translation: "agent intelligent",
    example: "Intelligent agents perceive environments and take actions toward goals."
  }, {
    word: "computational intelligence",
    translation: "intelligence computationnelle",
    example: "Computational intelligence encompasses problem-solving methods inspired by natural processes."
  }, {
    word: "Turing test",
    translation: "test de Turing",
    example: "The Turing test evaluates a machine's ability to exhibit human-like intelligence."
  }, {
    word: "superintelligence",
    translation: "superintelligence",
    example: "Superintelligence would surpass human cognitive capabilities across all domains."
  }, {
    word: "intelligence amplification",
    translation: "amplification de l'intelligence",
    example: "Intelligence amplification enhances human capabilities through technological augmentation."
  }, {
    word: "pattern recognition",
    translation: "reconnaissance de formes",
    example: "Pattern recognition identifies regularities within complex datasets."
  }, {
    word: "automated reasoning",
    translation: "raisonnement automatisé",
    example: "Automated reasoning systems draw logical conclusions from available information."
  }, {
    word: "artificial neural network",
    translation: "réseau neuronal artificiel",
    example: "Artificial neural networks learn through exposure to training examples."
  }, {
    word: "feature extraction",
    translation: "extraction de caractéristiques",
    example: "Feature extraction identifies relevant attributes from raw data."
  }, {
    word: "overfitting",
    translation: "surapprentissage",
    example: "Overfitting occurs when models perform well on training data but poorly on new examples."
  }, {
    word: "underfitting",
    translation: "sous-apprentissage",
    example: "Underfitting happens when models fail to capture underlying data patterns."
  }, {
    word: "cross-validation",
    translation: "validation croisée",
    example: "Cross-validation evaluates model performance across multiple data subsets."
  }, {
    word: "hyperparameter",
    translation: "hyperparamètre",
    example: "Hyperparameters control aspects of model training and architecture."
  }, {
    word: "gradient descent",
    translation: "descente de gradient",
    example: "Gradient descent optimizes model parameters by iteratively reducing error."
  }, {
    word: "backpropagation",
    translation: "rétropropagation",
    example: "Backpropagation adjusts neural network weights based on prediction errors."
  }, {
    word: "regularization",
    translation: "régularisation",
    example: "Regularization techniques prevent overfitting by constraining model complexity."
  }, {
    word: "model generalization",
    translation: "généralisation du modèle",
    example: "Good model generalization ensures performance on previously unseen data."
  }, {
    word: "classification algorithm",
    translation: "algorithme de classification",
    example: "Classification algorithms assign data points to predefined categories."
  }, {
    word: "clustering algorithm",
    translation: "algorithme de regroupement",
    example: "Clustering algorithms identify natural groupings within unlabeled data."
  }, {
    word: "ensemble method",
    translation: "méthode d'ensemble",
    example: "Ensemble methods combine multiple models to improve prediction accuracy."
  }, {
    word: "feature engineering",
    translation: "ingénierie des caractéristiques",
    example: "Feature engineering transforms raw data into more effective model inputs."
  }, {
    word: "decision tree",
    translation: "arbre de décision",
    example: "Decision trees classify data through a series of conditional splits."
  }, {
    word: "bias-variance tradeoff",
    translation: "compromis biais-variance",
    example: "The bias-variance tradeoff balances model complexity against performance."
  }, {
    word: "semi-supervised learning",
    translation: "apprentissage semi-supervisé",
    example: "Semi-supervised learning combines labeled and unlabeled training data."
  }, {
    word: "neural network layer",
    translation: "couche de réseau neuronal",
    example: "Each neural network layer transforms representations of input data."
  }, {
    word: "generative model",
    translation: "modèle génératif",
    example: "Generative models create new content resembling their training data."
  }, {
    word: "transformer architecture",
    translation: "architecture transformer",
    example: "Transformer architectures revolutionized natural language processing capabilities."
  }, {
    word: "attention mechanism",
    translation: "mécanisme d'attention",
    example: "Attention mechanisms focus computational resources on relevant inputs."
  }, {
    word: "diffusion model",
    translation: "modèle de diffusion",
    example: "Diffusion models generate images by reversing noise addition processes."
  }, {
    word: "multimodal AI",
    translation: "IA multimodale",
    example: "Multimodal AI systems integrate and process multiple types of information."
  }, {
    word: "foundation model",
    translation: "modèle fondationnel",
    example: "Foundation models serve as adaptable bases for various downstream applications."
  }, {
    word: "reinforcement learning from human feedback",
    translation: "apprentissage par renforcement à partir de retours humains",
    example: "Reinforcement learning from human feedback uses human evaluations to guide model training."
  }, {
    word: "self-supervised learning",
    translation: "apprentissage auto-supervisé",
    example: "Self-supervised learning extracts supervision signals from unlabeled data."
  }, {
    word: "neural architecture search",
    translation: "recherche d'architecture neuronale",
    example: "Neural architecture search automates the design of optimal network structures."
  }, {
    word: "adversarial training",
    translation: "entraînement antagoniste",
    example: "Adversarial training improves model robustness against manipulated inputs."
  }, {
    word: "zero-shot learning",
    translation: "apprentissage zéro-shot",
    example: "Zero-shot learning performs tasks without specific training examples."
  }, {
    word: "few-shot learning",
    translation: "apprentissage à partir de peu d'exemples",
    example: "Few-shot learning generalizes effectively from minimal training data."
  }, {
    word: "computational neuroscience",
    translation: "neuroscience computationnelle",
    example: "Computational neuroscience models brain functions to inspire AI approaches."
  }, {
    word: "human-level AI",
    translation: "IA de niveau humain",
    example: "Human-level AI matches people's performance across multiple cognitive domains."
  }, {
    word: "emergent behavior",
    translation: "comportement émergent",
    example: "Emergent behavior arises from simple rules leading to complex system properties."
  }, {
    word: "prompt engineering",
    translation: "ingénierie de prompts",
    example: "Prompt engineering optimizes instructions to guide AI system outputs."
  }, {
    word: "contrastive learning",
    translation: "apprentissage contrastif",
    example: "Contrastive learning differentiates between similar and dissimilar data points."
  }, {
    word: "neuromorphic computing",
    translation: "informatique neuromorphique",
    example: "Neuromorphic computing implements brain-inspired hardware architectures."
  }, {
    word: "synthetic data generation",
    translation: "génération de données synthétiques",
    example: "Synthetic data generation creates artificial examples for model training."
  }, {
    word: "model distillation",
    translation: "distillation de modèle",
    example: "Model distillation transfers knowledge from complex models to simpler ones."
  }, {
    word: "technological fairness",
    translation: "équité technologique",
    example: "Technological fairness ensures equal treatment across demographic groups."
  }, {
    word: "value alignment",
    translation: "alignement des valeurs",
    example: "Value alignment ensures AI systems operate according to human values."
  }, {
    word: "fairness metric",
    translation: "métrique d'équité",
    example: "Fairness metrics quantify disparate impacts across population groups."
  }, {
    word: "trustworthy AI",
    translation: "IA digne de confiance",
    example: "Trustworthy AI combines technical robustness with ethical principles."
  }, {
    word: "moral agency",
    translation: "agentivité morale",
    example: "Questions of moral agency arise when AI systems make impactful decisions."
  }, {
    word: "ethical risk assessment",
    translation: "évaluation des risques éthiques",
    example: "Ethical risk assessment identifies potential harms before deployment."
  }, {
    word: "human oversight",
    translation: "supervision humaine",
    example: "Human oversight ensures appropriate intervention in automated processes."
  }, {
    word: "ethics by design",
    translation: "éthique dès la conception",
    example: "Ethics by design incorporates moral considerations throughout development."
  }, {
    word: "human autonomy",
    translation: "autonomie humaine",
    example: "Human autonomy must be preserved despite increasing automation."
  }, {
    word: "existential risk",
    translation: "risque existentiel",
    example: "Advanced AI may pose existential risks requiring proactive governance."
  }, {
    word: "machine ethics",
    translation: "éthique machine",
    example: "Machine ethics explores moral decision-making by artificial systems."
  }, {
    word: "value judgment",
    translation: "jugement de valeur",
    example: "AI systems implicitly make value judgments in their operations."
  }, {
    word: "benefit distribution",
    translation: "distribution des bénéfices",
    example: "Benefit distribution concerns how AI advantages are shared across society."
  }, {
    word: "ethical standard",
    translation: "norme éthique",
    example: "Ethical standards establish minimum requirements for responsible AI."
  }, {
    word: "technology policy",
    translation: "politique technologique",
    example: "Technology policy addresses societal impacts of innovation."
  }, {
    word: "compliance requirement",
    translation: "exigence de conformité",
    example: "Compliance requirements establish standards for legal technology use."
  }, {
    word: "multi-stakeholder approach",
    translation: "approche multipartite",
    example: "Multi-stakeholder approaches involve diverse perspectives in technology governance."
  }, {
    word: "hard law",
    translation: "droit contraignant",
    example: "Hard law imposes legally binding technology regulations."
  }, {
    word: "soft law",
    translation: "droit souple",
    example: "Soft law includes non-binding guidelines and recommendations."
  }, {
    word: "risk-based regulation",
    translation: "réglementation basée sur les risques",
    example: "Risk-based regulation applies stricter oversight to higher-risk technologies."
  }, {
    word: "certification standard",
    translation: "norme de certification",
    example: "Certification standards verify compliance with technical and ethical requirements."
  }, {
    word: "technology ethics board",
    translation: "comité d'éthique technologique",
    example: "Technology ethics boards review proposed innovations before implementation."
  }, {
    word: "governance gap",
    translation: "lacune de gouvernance",
    example: "Governance gaps leave emerging technologies inadequately regulated."
  }, {
    word: "innovation principle",
    translation: "principe d'innovation",
    example: "The innovation principle balances risk management with technological progress."
  }, {
    word: "international standards",
    translation: "normes internationales",
    example: "International standards harmonize technology governance across borders."
  }, {
    word: "adaptive regulation",
    translation: "réglementation adaptative",
    example: "Adaptive regulation evolves alongside technological development."
  }, {
    word: "societal impact",
    translation: "impact sociétal",
    example: "AI technologies create profound societal impacts across multiple domains."
  }, {
    word: "information ecosystem",
    translation: "écosystème informationnel",
    example: "Healthy information ecosystems support informed democratic participation."
  }, {
    word: "digital citizenship",
    translation: "citoyenneté numérique",
    example: "Digital citizenship encompasses rights and responsibilities in online spaces."
  }, {
    word: "technological literacy",
    translation: "littératie technologique",
    example: "Technological literacy enables effective navigation of digital environments."
  }, {
    word: "sociotechnical system",
    translation: "système sociotechnique",
    example: "Sociotechnical systems involve interdependent social and technological elements."
  }, {
    word: "human-centered technology",
    translation: "technologie centrée sur l'humain",
    example: "Human-centered technology prioritizes human needs and values."
  }, {
    word: "technological solutionism",
    translation: "solutionnisme technologique",
    example: "Technological solutionism assumes complex social problems have technological fixes."
  }, {
    word: "digital labor",
    translation: "travail numérique",
    example: "Digital labor includes both visible and invisible work in technological systems."
  }, {
    word: "technosocial disruption",
    translation: "perturbation technosociale",
    example: "Technosocial disruption transforms established institutional patterns."
  }, {
    word: "participatory design",
    translation: "conception participative",
    example: "Participatory design involves users throughout technology development."
  }, {
    word: "social infrastructure",
    translation: "infrastructure sociale",
    example: "Social infrastructure supports human relationships and community resilience."
  }, {
    word: "environmental impact",
    translation: "impact environnemental",
    example: "The environmental impact of computing includes energy use and material requirements."
  }, {
    word: "technocultural change",
    translation: "changement technoculturel",
    example: "Technocultural change transforms social norms and cultural practices."
  }, {
    word: "data encryption",
    translation: "chiffrement des données",
    example: "Data encryption converts information into code to prevent unauthorized access."
  }, {
    word: "data protection",
    translation: "protection des données",
    example: "Data protection frameworks establish legal requirements for information handling."
  }, {
    word: "privacy regulation",
    translation: "réglementation de la vie privée",
    example: "Privacy regulations establish legal frameworks for data protection."
  }, {
    word: "data minimization",
    translation: "minimisation des données",
    example: "Data minimization restricts collection to necessary information."
  }, {
    word: "threat model",
    translation: "modèle de menace",
    example: "Threat models identify potential vulnerabilities and attack vectors."
  }, {
    word: "zero-trust security",
    translation: "sécurité zéro confiance",
    example: "Zero-trust security verifies every access request regardless of source."
  }, {
    word: "privacy impact assessment",
    translation: "évaluation d'impact sur la vie privée",
    example: "Privacy impact assessments identify and mitigate potential privacy risks."
  }, {
    word: "information asymmetry",
    translation: "asymétrie d'information",
    example: "Information asymmetry exists when one party has more knowledge than another."
  }, {
    word: "differential privacy",
    translation: "confidentialité différentielle",
    example: "Differential privacy protects individual data while allowing useful analysis."
  }, {
    word: "digital surveillance",
    translation: "surveillance numérique",
    example: "Digital surveillance monitors online activities and communications."
  }, {
    word: "privacy-enhancing technology",
    translation: "technologie renforçant la confidentialité",
    example: "Privacy-enhancing technologies protect personal information during processing."
  }, {
    word: "security breach",
    translation: "atteinte à la sécurité",
    example: "Security breaches compromise system integrity or data confidentiality."
  }, {
    word: "identity management",
    translation: "gestion de l'identité",
    example: "Identity management systems authenticate and authorize system users."
  }, {
    word: "data anonymization",
    translation: "anonymisation des données",
    example: "Data anonymization removes identifying information from datasets."
  }, {
    word: "consent management",
    translation: "gestion du consentement",
    example: "Consent management systems track user permissions for data processing."
  }, {
    word: "cryptographic protocol",
    translation: "protocole cryptographique",
    example: "Cryptographic protocols secure communications between parties."
  }, {
    word: "automated decision-making",
    translation: "prise de décision automatisée",
    example: "Automated decision-making applies algorithms to choices traditionally made by humans."
  }, {
    word: "algorithmic decision-making",
    translation: "prise de décision algorithmique",
    example: "Algorithmic decision-making applies computational procedures to choice processes."
  }, {
    word: "decision threshold",
    translation: "seuil de décision",
    example: "Decision thresholds determine when systems take specific actions."
  }, {
    word: "computational decision science",
    translation: "science computationnelle de la décision",
    example: "Computational decision science applies algorithms to choice processes."
  }, {
    word: "decision automation",
    translation: "automatisation des décisions",
    example: "Decision automation implements choices without human intervention."
  }, {
    word: "outcome prediction",
    translation: "prédiction des résultats",
    example: "Outcome prediction forecasts consequences of potential choices."
  }, {
    word: "decision boundary",
    translation: "frontière de décision",
    example: "Decision boundaries separate different classification outcomes."
  }, {
    word: "multi-criteria decision analysis",
    translation: "analyse décisionnelle multicritère",
    example: "Multi-criteria decision analysis balances competing objectives."
  }, {
    word: "decision optimization",
    translation: "optimisation des décisions",
    example: "Decision optimization identifies best choices given constraints."
  }, {
    word: "algorithmic recourse",
    translation: "recours algorithmique",
    example: "Algorithmic recourse provides paths to favorable decisions after rejection."
  }, {
    word: "decision confidence",
    translation: "confiance décisionnelle",
    example: "Decision confidence metrics quantify certainty in automated judgments."
  }, {
    word: "context-aware decision",
    translation: "décision contextuelle",
    example: "Context-aware decisions adapt to specific environmental conditions."
  }, {
    word: "labor displacement",
    translation: "déplacement de main-d'œuvre",
    example: "Labor displacement occurs when automation eliminates specific job categories."
  }, {
    word: "cognitive automation",
    translation: "automatisation cognitive",
    example: "Cognitive automation applies AI to knowledge work processes."
  }, {
    word: "automated manufacturing",
    translation: "fabrication automatisée",
    example: "Automated manufacturing uses robots and intelligent systems for production."
  }, {
    word: "business process automation",
    translation: "automatisation des processus d'entreprise",
    example: "Business process automation streamlines organizational workflows."
  }, {
    word: "job polarization",
    translation: "polarisation de l'emploi",
    example: "Job polarization concentrates work in high and low-skill categories."
  }, {
    word: "task automation",
    translation: "automatisation des tâches",
    example: "Task automation replaces specific activities rather than entire jobs."
  }, {
    word: "digital worker",
    translation: "travailleur numérique",
    example: "Digital workers perform automated tasks within organizational systems."
  }, {
    word: "automation bias",
    translation: "biais d'automatisation",
    example: "Automation bias causes humans to favor machine-generated suggestions."
  }, {
    word: "augmented workforce",
    translation: "main-d'œuvre augmentée",
    example: "The augmented workforce combines human and automated capabilities."
  }, {
    word: "self-driving technology",
    translation: "technologie de conduite autonome",
    example: "Self-driving technology navigates vehicles through sensor data and AI."
  }, {
    word: "automated decision system",
    translation: "système de décision automatisé",
    example: "Automated decision systems apply rules to make choices without human input."
  }, {
    word: "machine operator",
    translation: "opérateur de machine",
    example: "Machine operators supervise and control automated equipment."
  }, {
    word: "skills gap",
    translation: "écart de compétences",
    example: "Automation creates skills gaps between available and required workforce capabilities."
  }, {
    word: "human-centered automation",
    translation: "automatisation centrée sur l'humain",
    example: "Human-centered automation designs systems around user needs and abilities."
  }, {
    word: "automation strategy",
    translation: "stratégie d'automatisation",
    example: "Automation strategy identifies processes suitable for technological replacement."
  }, {
    word: "artificial superintelligence",
    translation: "superintelligence artificielle",
    example: "Artificial superintelligence would surpass human capabilities across all domains."
  }, {
    word: "longtermism",
    translation: "longterminisme",
    example: "Longtermism prioritizes safeguarding humanity's long-term future."
  }, {
    word: "AI alignment",
    translation: "alignement de l'IA",
    example: "AI alignment ensures artificial systems act according to human values."
  }, {
    word: "digital consciousness",
    translation: "conscience numérique",
    example: "Digital consciousness raises philosophical questions about machine sentience."
  }, {
    word: "AI safety",
    translation: "sécurité de l'IA",
    example: "AI safety research develops methods to ensure beneficial advanced systems."
  }, {
    word: "beneficial AI",
    translation: "IA bénéfique",
    example: "Beneficial AI development prioritizes positive human outcomes."
  }, {
    word: "transformative AI",
    translation: "IA transformatrice",
    example: "Transformative AI would fundamentally change civilization's trajectory."
  }, {
    word: "future of work",
    translation: "avenir du travail",
    example: "Intelligent technologies will reshape employment patterns and occupations."
  }, {
    word: "machine consciousness",
    translation: "conscience machinique",
    example: "Machine consciousness research explores potential for aware artificial systems."
  }, {
    word: "ethical futurism",
    translation: "futurisme éthique",
    example: "Ethical futurism considers moral implications of emerging technologies."
  }, {
    word: "digital afterlife",
    translation: "vie après la mort numérique",
    example: "Digital afterlife technologies might preserve aspects of personal identity."
  }, {
    word: "intelligence explosion",
    translation: "explosion d'intelligence",
    example: "An intelligence explosion would involve rapidly self-improving AI systems."
  }]
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,