3d56db8091b4a419041960f98c219974
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _ThemeContext = require("../../../../contexts/ThemeContext");
var _useActivityMetrics2 = _interopRequireDefault(require("../../../../hooks/useActivityMetrics"));
var _useDailyWords2 = _interopRequireDefault(require("../../../../hooks/useDailyWords"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var SimpleMetrics = function SimpleMetrics(_ref) {
  var _ref$accentColor = _ref.accentColor,
    accentColor = _ref$accentColor === void 0 ? "#3B82F6" : _ref$accentColor,
    _ref$refreshKey = _ref.refreshKey,
    refreshKey = _ref$refreshKey === void 0 ? 0 : _ref$refreshKey;
  var themeContext = (0, _react.useContext)(_ThemeContext.ThemeContext);
  var colors = (themeContext == null ? void 0 : themeContext.colors) || {
    surface: "#FFFFFF",
    text: "#1F2937",
    textSecondary: "#6B7280"
  };
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    localRefresh = _useState2[0],
    setLocalRefresh = _useState2[1];
  var _useActivityMetrics = (0, _useActivityMetrics2.default)(localRefresh),
    currentStreak = _useActivityMetrics.currentStreak,
    streakTrend = _useActivityMetrics.streakTrend,
    formattedTime = _useActivityMetrics.formattedTime,
    refreshMetrics = _useActivityMetrics.refresh;
  var _useDailyWords = (0, _useDailyWords2.default)(localRefresh),
    wordsToday = _useDailyWords.wordsToday,
    wordsLoading = _useDailyWords.isLoading,
    refreshWords = _useDailyWords.refresh;
  (0, _react.useEffect)(function () {
    if (refreshKey > 0) {
      setLocalRefresh(function (prev) {
        return prev + 1;
      });
      if (refreshMetrics) refreshMetrics();
      if (refreshWords) refreshWords();
    }
  }, [refreshKey, refreshMetrics, refreshWords]);
  if (wordsLoading) {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.container,
      children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: _style.default.loadingContainer,
        children: [(0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
          size: "small",
          color: accentColor
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [_style.default.loadingText, {
            color: colors.textSecondary
          }],
          children: "Chargement des m\xE9triques..."
        })]
      })
    });
  }
  var metrics = [{
    id: 'streak',
    icon: 'üî•',
    value: (currentStreak || 0).toString(),
    label: 'Jours de suite',
    trend: streakTrend
  }, {
    id: 'words',
    icon: 'üìö',
    value: (wordsToday || 0).toString(),
    label: 'Mots aujourd\'hui',
    trend: null
  }, {
    id: 'time',
    icon: '‚è±Ô∏è',
    value: formattedTime || '0min',
    label: 'Temps aujourd\'hui',
    trend: null
  }];
  var hasActivity = currentStreak > 0 || wordsToday > 0 || formattedTime && formattedTime !== '0min';
  if (!hasActivity) {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.container,
      children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: _style.default.emptyState,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: _style.default.emptyIcon,
          children: "\uD83C\uDFAF"
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [_style.default.emptyTitle, {
            color: colors.text
          }],
          children: "Commencez votre premi\xE8re session !"
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [_style.default.emptySubtitle, {
            color: colors.textSecondary
          }],
          children: "Vos statistiques appara\xEEtront ici"
        })]
      })
    });
  }
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: _style.default.container,
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [_style.default.sectionTitle, {
        color: colors.text
      }],
      children: "\uD83D\uDCCA Aujourd'hui"
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.metricsGrid,
      children: metrics.map(function (metric) {
        return (0, _jsxRuntime.jsx)(MetricCard, {
          metric: metric,
          colors: colors,
          accentColor: accentColor
        }, metric.id);
      })
    })]
  });
};
var MetricCard = function MetricCard(_ref2) {
  var metric = _ref2.metric,
    colors = _ref2.colors;
  var getTrendStyle = function getTrendStyle(trend) {
    if (!trend) return null;
    var isPositive = trend.includes('+') || trend.includes('üèÜ') || trend.includes('üí™') || trend.includes('üî•');
    var isNegative = trend.includes('-');
    if (isPositive) {
      return {
        backgroundColor: '#DCFCE7',
        color: '#16A34A'
      };
    }
    if (isNegative) {
      return {
        backgroundColor: '#FEF2F2',
        color: '#DC2626'
      };
    }
    return {
      backgroundColor: '#F1F5F9',
      color: '#64748B'
    };
  };
  var trendStyle = getTrendStyle(metric.trend);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [_style.default.metricCard, {
      backgroundColor: colors.surface
    }],
    children: [metric.trend && trendStyle && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [_style.default.trendIndicator, {
        backgroundColor: trendStyle.backgroundColor
      }],
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [_style.default.trendText, {
          color: trendStyle.color
        }],
        children: metric.trend
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: _style.default.metricIcon,
      children: metric.icon
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [_style.default.metricValue, {
        color: colors.text
      }],
      children: metric.value
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [_style.default.metricLabel, {
        color: colors.textSecondary
      }],
      children: metric.label
    })]
  });
};
var _default = exports.default = SimpleMetrics;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,