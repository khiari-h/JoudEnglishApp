95ad252e179a4fc370f823c4c8e3deba
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Button = _interopRequireDefault(require("../../../src/components/ui/Button"));
var _jsxRuntime = require("react/jsx-runtime");
describe('Button', function () {
  it('devrait rendre le texte correct', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        title: "Mon Bouton",
        onPress: function onPress() {}
      })),
      getByText = _render.getByText;
    expect(getByText('Mon Bouton')).toBeTruthy();
  });
  it('devrait appeler la fonction onPress quand le bouton est pressé', function () {
    var mockOnPress = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        title: "Mon Bouton",
        onPress: mockOnPress
      })),
      getByText = _render2.getByText;
    _reactNative.fireEvent.press(getByText('Mon Bouton'));
    expect(mockOnPress).toHaveBeenCalledTimes(1);
  });
  it('ne devrait pas appeler la fonction onPress quand le bouton est désactivé', function () {
    var mockOnPress = jest.fn();
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        title: "Mon Bouton",
        onPress: mockOnPress,
        disabled: true
      })),
      getByText = _render3.getByText;
    _reactNative.fireEvent.press(getByText('Mon Bouton'));
    expect(mockOnPress).not.toHaveBeenCalled();
  });
  it('devrait afficher un indicateur de chargement si loading est vrai', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        title: "Mon Bouton",
        onPress: function onPress() {},
        loading: true
      })),
      queryByTestId = _render4.queryByTestId;
    expect(queryByTestId('button-loader')).toBeTruthy();
  });
  it('ne devrait pas afficher un indicateur de chargement si loading est faux', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        title: "Mon Bouton",
        onPress: function onPress() {},
        loading: false
      })),
      queryByTestId = _render5.queryByTestId;
    expect(queryByTestId('button-loader')).toBeNull();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9CdXR0b24iLCJfanN4UnVudGltZSIsImRlc2NyaWJlIiwiaXQiLCJfcmVuZGVyIiwicmVuZGVyIiwianN4IiwiZGVmYXVsdCIsInRpdGxlIiwib25QcmVzcyIsImdldEJ5VGV4dCIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJtb2NrT25QcmVzcyIsImplc3QiLCJmbiIsIl9yZW5kZXIyIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJfcmVuZGVyMyIsImRpc2FibGVkIiwibm90IiwidG9IYXZlQmVlbkNhbGxlZCIsIl9yZW5kZXI0IiwibG9hZGluZyIsInF1ZXJ5QnlUZXN0SWQiLCJfcmVuZGVyNSIsInRvQmVOdWxsIl0sInNvdXJjZXMiOlsiQnV0dG9uLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi8uLi8uLi9zcmMvY29tcG9uZW50cy91aS9CdXR0b24nO1xuXG5kZXNjcmliZSgnQnV0dG9uJywgKCkgPT4ge1xuICBpdCgnZGV2cmFpdCByZW5kcmUgbGUgdGV4dGUgY29ycmVjdCcsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKDxCdXR0b24gdGl0bGU9XCJNb24gQm91dG9uXCIgb25QcmVzcz17KCkgPT4ge319IC8+KTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdNb24gQm91dG9uJykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ2RldnJhaXQgYXBwZWxlciBsYSBmb25jdGlvbiBvblByZXNzIHF1YW5kIGxlIGJvdXRvbiBlc3QgcHJlc3PDqScsICgpID0+IHtcbiAgICBjb25zdCBtb2NrT25QcmVzcyA9IGplc3QuZm4oKTtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKDxCdXR0b24gdGl0bGU9XCJNb24gQm91dG9uXCIgb25QcmVzcz17bW9ja09uUHJlc3N9IC8+KTtcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCdNb24gQm91dG9uJykpO1xuICAgIGV4cGVjdChtb2NrT25QcmVzcykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICB9KTtcblxuICBpdCgnbmUgZGV2cmFpdCBwYXMgYXBwZWxlciBsYSBmb25jdGlvbiBvblByZXNzIHF1YW5kIGxlIGJvdXRvbiBlc3QgZMOpc2FjdGl2w6knLCAoKSA9PiB7XG4gICAgY29uc3QgbW9ja09uUHJlc3MgPSBqZXN0LmZuKCk7XG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcig8QnV0dG9uIHRpdGxlPVwiTW9uIEJvdXRvblwiIG9uUHJlc3M9e21vY2tPblByZXNzfSBkaXNhYmxlZCAvPik7XG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgnTW9uIEJvdXRvbicpKTtcbiAgICBleHBlY3QobW9ja09uUHJlc3MpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xuXG4gIGl0KCdkZXZyYWl0IGFmZmljaGVyIHVuIGluZGljYXRldXIgZGUgY2hhcmdlbWVudCBzaSBsb2FkaW5nIGVzdCB2cmFpJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgcXVlcnlCeVRlc3RJZCB9ID0gcmVuZGVyKDxCdXR0b24gdGl0bGU9XCJNb24gQm91dG9uXCIgb25QcmVzcz17KCkgPT4ge319IGxvYWRpbmcgLz4pO1xuICAgIGV4cGVjdChxdWVyeUJ5VGVzdElkKCdidXR0b24tbG9hZGVyJykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ25lIGRldnJhaXQgcGFzIGFmZmljaGVyIHVuIGluZGljYXRldXIgZGUgY2hhcmdlbWVudCBzaSBsb2FkaW5nIGVzdCBmYXV4JywgKCkgPT4ge1xuICAgIGNvbnN0IHsgcXVlcnlCeVRlc3RJZCB9ID0gcmVuZGVyKDxCdXR0b24gdGl0bGU9XCJNb24gQm91dG9uXCIgb25QcmVzcz17KCkgPT4ge319IGxvYWRpbmc9e2ZhbHNlfSAvPik7XG4gICAgZXhwZWN0KHF1ZXJ5QnlUZXN0SWQoJ2J1dHRvbi1sb2FkZXInKSkudG9CZU51bGwoKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLE9BQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUF1RCxJQUFBRyxXQUFBLEdBQUFILE9BQUE7QUFFdkRJLFFBQVEsQ0FBQyxRQUFRLEVBQUUsWUFBTTtFQUN2QkMsRUFBRSxDQUFDLGlDQUFpQyxFQUFFLFlBQU07SUFDMUMsSUFBQUMsT0FBQSxHQUFzQixJQUFBQyxtQkFBTSxFQUFDLElBQUFKLFdBQUEsQ0FBQUssR0FBQSxFQUFDTixPQUFBLENBQUFPLE9BQU07UUFBQ0MsS0FBSyxFQUFDLFlBQVk7UUFBQ0MsT0FBTyxFQUFFLFNBQVRBLE9BQU9BLENBQUEsRUFBUSxDQUFDO01BQUUsQ0FBRSxDQUFDLENBQUM7TUFBdEVDLFNBQVMsR0FBQU4sT0FBQSxDQUFUTSxTQUFTO0lBQ2pCQyxNQUFNLENBQUNELFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDRSxVQUFVLENBQUMsQ0FBQztFQUM5QyxDQUFDLENBQUM7RUFFRlQsRUFBRSxDQUFDLGdFQUFnRSxFQUFFLFlBQU07SUFDekUsSUFBTVUsV0FBVyxHQUFHQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLElBQUFDLFFBQUEsR0FBc0IsSUFBQVgsbUJBQU0sRUFBQyxJQUFBSixXQUFBLENBQUFLLEdBQUEsRUFBQ04sT0FBQSxDQUFBTyxPQUFNO1FBQUNDLEtBQUssRUFBQyxZQUFZO1FBQUNDLE9BQU8sRUFBRUk7TUFBWSxDQUFFLENBQUMsQ0FBQztNQUF6RUgsU0FBUyxHQUFBTSxRQUFBLENBQVROLFNBQVM7SUFDakJPLHNCQUFTLENBQUNDLEtBQUssQ0FBQ1IsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3hDQyxNQUFNLENBQUNFLFdBQVcsQ0FBQyxDQUFDTSxxQkFBcUIsQ0FBQyxDQUFDLENBQUM7RUFDOUMsQ0FBQyxDQUFDO0VBRUZoQixFQUFFLENBQUMsMEVBQTBFLEVBQUUsWUFBTTtJQUNuRixJQUFNVSxXQUFXLEdBQUdDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDN0IsSUFBQUssUUFBQSxHQUFzQixJQUFBZixtQkFBTSxFQUFDLElBQUFKLFdBQUEsQ0FBQUssR0FBQSxFQUFDTixPQUFBLENBQUFPLE9BQU07UUFBQ0MsS0FBSyxFQUFDLFlBQVk7UUFBQ0MsT0FBTyxFQUFFSSxXQUFZO1FBQUNRLFFBQVE7TUFBQSxDQUFFLENBQUMsQ0FBQztNQUFsRlgsU0FBUyxHQUFBVSxRQUFBLENBQVRWLFNBQVM7SUFDakJPLHNCQUFTLENBQUNDLEtBQUssQ0FBQ1IsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3hDQyxNQUFNLENBQUNFLFdBQVcsQ0FBQyxDQUFDUyxHQUFHLENBQUNDLGdCQUFnQixDQUFDLENBQUM7RUFDNUMsQ0FBQyxDQUFDO0VBRUZwQixFQUFFLENBQUMsa0VBQWtFLEVBQUUsWUFBTTtJQUMzRSxJQUFBcUIsUUFBQSxHQUEwQixJQUFBbkIsbUJBQU0sRUFBQyxJQUFBSixXQUFBLENBQUFLLEdBQUEsRUFBQ04sT0FBQSxDQUFBTyxPQUFNO1FBQUNDLEtBQUssRUFBQyxZQUFZO1FBQUNDLE9BQU8sRUFBRSxTQUFUQSxPQUFPQSxDQUFBLEVBQVEsQ0FBQyxDQUFFO1FBQUNnQixPQUFPO01BQUEsQ0FBRSxDQUFDLENBQUM7TUFBbEZDLGFBQWEsR0FBQUYsUUFBQSxDQUFiRSxhQUFhO0lBQ3JCZixNQUFNLENBQUNlLGFBQWEsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDZCxVQUFVLENBQUMsQ0FBQztFQUNyRCxDQUFDLENBQUM7RUFFRlQsRUFBRSxDQUFDLHlFQUF5RSxFQUFFLFlBQU07SUFDbEYsSUFBQXdCLFFBQUEsR0FBMEIsSUFBQXRCLG1CQUFNLEVBQUMsSUFBQUosV0FBQSxDQUFBSyxHQUFBLEVBQUNOLE9BQUEsQ0FBQU8sT0FBTTtRQUFDQyxLQUFLLEVBQUMsWUFBWTtRQUFDQyxPQUFPLEVBQUUsU0FBVEEsT0FBT0EsQ0FBQSxFQUFRLENBQUMsQ0FBRTtRQUFDZ0IsT0FBTyxFQUFFO01BQU0sQ0FBRSxDQUFDLENBQUM7TUFBMUZDLGFBQWEsR0FBQUMsUUFBQSxDQUFiRCxhQUFhO0lBQ3JCZixNQUFNLENBQUNlLGFBQWEsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDRSxRQUFRLENBQUMsQ0FBQztFQUNuRCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=