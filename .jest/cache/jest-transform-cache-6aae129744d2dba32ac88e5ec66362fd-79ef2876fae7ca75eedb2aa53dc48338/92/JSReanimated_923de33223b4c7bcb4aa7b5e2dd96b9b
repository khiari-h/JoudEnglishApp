c5998169c387f27856263f7c15f825b5
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _PlatformChecker = require("../PlatformChecker");
var _commonTypes = require("../commonTypes");
var _mockedRequestAnimationFrame = require("../mockedRequestAnimationFrame");
var _logger = require("../logger");
var _errors = require("../errors");
var requestAnimationFrameImpl = (0, _PlatformChecker.isJest)() || !globalThis.requestAnimationFrame ? _mockedRequestAnimationFrame.mockedRequestAnimationFrame : globalThis.requestAnimationFrame;
var JSReanimated = exports.default = function () {
  function JSReanimated() {
    var _this = this;
    (0, _classCallCheck2.default)(this, JSReanimated);
    this.nextSensorId = 0;
    this.sensors = new Map();
    this.platform = undefined;
    this.getSensorCallback = function (sensor, sensorType, eventHandler) {
      switch (sensorType) {
        case _commonTypes.SensorType.ACCELEROMETER:
        case _commonTypes.SensorType.GRAVITY:
          return function () {
            var x = sensor.x,
              y = sensor.y,
              z = sensor.z;
            if (_this.platform === Platform.WEB_ANDROID) {
              var _ref = [-x, -y, -z];
              x = _ref[0];
              y = _ref[1];
              z = _ref[2];
            }
            eventHandler({
              x: x,
              y: y,
              z: z,
              interfaceOrientation: 0
            });
          };
        case _commonTypes.SensorType.GYROSCOPE:
        case _commonTypes.SensorType.MAGNETIC_FIELD:
          return function () {
            var x = sensor.x,
              y = sensor.y,
              z = sensor.z;
            eventHandler({
              x: x,
              y: y,
              z: z,
              interfaceOrientation: 0
            });
          };
        case _commonTypes.SensorType.ROTATION:
          return function () {
            var _sensor$quaternion = (0, _slicedToArray2.default)(sensor.quaternion, 4),
              qw = _sensor$quaternion[0],
              qx = _sensor$quaternion[1],
              qy = _sensor$quaternion[2],
              qz = _sensor$quaternion[3];
            if (_this.platform === Platform.WEB_ANDROID) {
              var _ref2 = [qz, -qy];
              qy = _ref2[0];
              qz = _ref2[1];
            }
            var yaw = -Math.atan2(2.0 * (qy * qz + qw * qx), qw * qw - qx * qx - qy * qy + qz * qz);
            var pitch = Math.sin(-2.0 * (qx * qz - qw * qy));
            var roll = -Math.atan2(2.0 * (qx * qy + qw * qz), qw * qw + qx * qx - qy * qy - qz * qz);
            eventHandler({
              qw: qw,
              qx: qx,
              qy: qy,
              qz: qz,
              yaw: yaw,
              pitch: pitch,
              roll: roll,
              interfaceOrientation: 0
            });
          };
      }
    };
  }
  return (0, _createClass2.default)(JSReanimated, [{
    key: "makeShareableClone",
    value: function makeShareableClone() {
      throw new _errors.ReanimatedError('makeShareableClone should never be called in JSReanimated.');
    }
  }, {
    key: "scheduleOnUI",
    value: function scheduleOnUI(worklet) {
      requestAnimationFrameImpl(worklet);
    }
  }, {
    key: "createWorkletRuntime",
    value: function createWorkletRuntime(_name, _initializer) {
      throw new _errors.ReanimatedError('createWorkletRuntime is not available in JSReanimated.');
    }
  }, {
    key: "scheduleOnRuntime",
    value: function scheduleOnRuntime() {
      throw new _errors.ReanimatedError('scheduleOnRuntime is not available in JSReanimated.');
    }
  }, {
    key: "registerEventHandler",
    value: function registerEventHandler(_eventHandler, _eventName, _emitterReactTag) {
      throw new _errors.ReanimatedError('registerEventHandler is not available in JSReanimated.');
    }
  }, {
    key: "unregisterEventHandler",
    value: function unregisterEventHandler(_) {
      throw new _errors.ReanimatedError('unregisterEventHandler is not available in JSReanimated.');
    }
  }, {
    key: "enableLayoutAnimations",
    value: function enableLayoutAnimations() {
      if ((0, _PlatformChecker.isWeb)()) {
        _logger.logger.warn('Layout Animations are not supported on web yet.');
      } else if ((0, _PlatformChecker.isJest)()) {
        _logger.logger.warn('Layout Animations are no-ops when using Jest.');
      } else if ((0, _PlatformChecker.isChromeDebugger)()) {
        _logger.logger.warn('Layout Animations are no-ops when using Chrome Debugger.');
      } else {
        _logger.logger.warn('Layout Animations are not supported on this configuration.');
      }
    }
  }, {
    key: "configureLayoutAnimationBatch",
    value: function configureLayoutAnimationBatch() {}
  }, {
    key: "setShouldAnimateExitingForTag",
    value: function setShouldAnimateExitingForTag() {}
  }, {
    key: "registerSensor",
    value: function registerSensor(sensorType, interval, _iosReferenceFrame, eventHandler) {
      if (!(0, _PlatformChecker.isWindowAvailable)()) {
        return -1;
      }
      if (this.platform === undefined) {
        this.detectPlatform();
      }
      if (!(this.getSensorName(sensorType) in window)) {
        _logger.logger.warn('Sensor is not available.' + ((0, _PlatformChecker.isWeb)() && location.protocol !== 'https:' ? ' Make sure you use secure origin with `npx expo start --web --https`.' : '') + (this.platform === Platform.WEB_IOS ? ' For iOS web, you will also have to also grant permission in the browser: https://dev.to/li/how-to-requestpermission-for-devicemotion-and-deviceorientation-events-in-ios-13-46g2.' : ''));
        return -1;
      }
      if (this.platform === undefined) {
        this.detectPlatform();
      }
      var sensor = this.initializeSensor(sensorType, interval);
      sensor.addEventListener('reading', this.getSensorCallback(sensor, sensorType, eventHandler));
      sensor.start();
      this.sensors.set(this.nextSensorId, sensor);
      return this.nextSensorId++;
    }
  }, {
    key: "unregisterSensor",
    value: function unregisterSensor(id) {
      var sensor = this.sensors.get(id);
      if (sensor !== undefined) {
        sensor.stop();
        this.sensors.delete(id);
      }
    }
  }, {
    key: "subscribeForKeyboardEvents",
    value: function subscribeForKeyboardEvents(_) {
      if ((0, _PlatformChecker.isWeb)()) {
        _logger.logger.warn('useAnimatedKeyboard is not available on web yet.');
      } else if ((0, _PlatformChecker.isJest)()) {
        _logger.logger.warn('useAnimatedKeyboard is not available when using Jest.');
      } else if ((0, _PlatformChecker.isChromeDebugger)()) {
        _logger.logger.warn('useAnimatedKeyboard is not available when using Chrome Debugger.');
      } else {
        _logger.logger.warn('useAnimatedKeyboard is not available on this configuration.');
      }
      return -1;
    }
  }, {
    key: "unsubscribeFromKeyboardEvents",
    value: function unsubscribeFromKeyboardEvents(_) {}
  }, {
    key: "initializeSensor",
    value: function initializeSensor(sensorType, interval) {
      var config = interval <= 0 ? {
        referenceFrame: 'device'
      } : {
        frequency: 1000 / interval
      };
      switch (sensorType) {
        case _commonTypes.SensorType.ACCELEROMETER:
          return new window.Accelerometer(config);
        case _commonTypes.SensorType.GYROSCOPE:
          return new window.Gyroscope(config);
        case _commonTypes.SensorType.GRAVITY:
          return new window.GravitySensor(config);
        case _commonTypes.SensorType.MAGNETIC_FIELD:
          return new window.Magnetometer(config);
        case _commonTypes.SensorType.ROTATION:
          return new window.AbsoluteOrientationSensor(config);
      }
    }
  }, {
    key: "getSensorName",
    value: function getSensorName(sensorType) {
      switch (sensorType) {
        case _commonTypes.SensorType.ACCELEROMETER:
          return 'Accelerometer';
        case _commonTypes.SensorType.GRAVITY:
          return 'GravitySensor';
        case _commonTypes.SensorType.GYROSCOPE:
          return 'Gyroscope';
        case _commonTypes.SensorType.MAGNETIC_FIELD:
          return 'Magnetometer';
        case _commonTypes.SensorType.ROTATION:
          return 'AbsoluteOrientationSensor';
      }
    }
  }, {
    key: "detectPlatform",
    value: function detectPlatform() {
      var userAgent = navigator.userAgent || navigator.vendor || window.opera;
      if (userAgent === undefined) {
        this.platform = Platform.UNKNOWN;
      } else if (/iPad|iPhone|iPod/.test(userAgent)) {
        this.platform = Platform.WEB_IOS;
      } else if (/android/i.test(userAgent)) {
        this.platform = Platform.WEB_ANDROID;
      } else {
        this.platform = Platform.WEB;
      }
    }
  }, {
    key: "getViewProp",
    value: function getViewProp(_viewTag, _propName, _component, _callback) {
      throw new _errors.ReanimatedError('getViewProp is not available in JSReanimated.');
    }
  }, {
    key: "configureProps",
    value: function configureProps() {
      throw new _errors.ReanimatedError('configureProps is not available in JSReanimated.');
    }
  }, {
    key: "executeOnUIRuntimeSync",
    value: function executeOnUIRuntimeSync(_shareable) {
      throw new _errors.ReanimatedError('`executeOnUIRuntimeSync` is not available in JSReanimated.');
    }
  }]);
}();
var Platform = function (Platform) {
  Platform["WEB_IOS"] = "web iOS";
  Platform["WEB_ANDROID"] = "web Android";
  Platform["WEB"] = "web";
  Platform["UNKNOWN"] = "unknown";
  return Platform;
}(Platform || {});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9zbGljZWRUb0FycmF5MiIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX1BsYXRmb3JtQ2hlY2tlciIsIl9jb21tb25UeXBlcyIsIl9tb2NrZWRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJfbG9nZ2VyIiwiX2Vycm9ycyIsInJlcXVlc3RBbmltYXRpb25GcmFtZUltcGwiLCJpc0plc3QiLCJnbG9iYWxUaGlzIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibW9ja2VkUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiSlNSZWFuaW1hdGVkIiwiX3RoaXMiLCJuZXh0U2Vuc29ySWQiLCJzZW5zb3JzIiwiTWFwIiwicGxhdGZvcm0iLCJ1bmRlZmluZWQiLCJnZXRTZW5zb3JDYWxsYmFjayIsInNlbnNvciIsInNlbnNvclR5cGUiLCJldmVudEhhbmRsZXIiLCJTZW5zb3JUeXBlIiwiQUNDRUxFUk9NRVRFUiIsIkdSQVZJVFkiLCJ4IiwieSIsInoiLCJQbGF0Zm9ybSIsIldFQl9BTkRST0lEIiwiX3JlZiIsImludGVyZmFjZU9yaWVudGF0aW9uIiwiR1lST1NDT1BFIiwiTUFHTkVUSUNfRklFTEQiLCJST1RBVElPTiIsIl9zZW5zb3IkcXVhdGVybmlvbiIsInF1YXRlcm5pb24iLCJxdyIsInF4IiwicXkiLCJxeiIsIl9yZWYyIiwieWF3IiwiTWF0aCIsImF0YW4yIiwicGl0Y2giLCJzaW4iLCJyb2xsIiwia2V5IiwibWFrZVNoYXJlYWJsZUNsb25lIiwiUmVhbmltYXRlZEVycm9yIiwic2NoZWR1bGVPblVJIiwid29ya2xldCIsImNyZWF0ZVdvcmtsZXRSdW50aW1lIiwiX25hbWUiLCJfaW5pdGlhbGl6ZXIiLCJzY2hlZHVsZU9uUnVudGltZSIsInJlZ2lzdGVyRXZlbnRIYW5kbGVyIiwiX2V2ZW50SGFuZGxlciIsIl9ldmVudE5hbWUiLCJfZW1pdHRlclJlYWN0VGFnIiwidW5yZWdpc3RlckV2ZW50SGFuZGxlciIsIl8iLCJlbmFibGVMYXlvdXRBbmltYXRpb25zIiwiaXNXZWIiLCJsb2dnZXIiLCJ3YXJuIiwiaXNDaHJvbWVEZWJ1Z2dlciIsImNvbmZpZ3VyZUxheW91dEFuaW1hdGlvbkJhdGNoIiwic2V0U2hvdWxkQW5pbWF0ZUV4aXRpbmdGb3JUYWciLCJyZWdpc3RlclNlbnNvciIsImludGVydmFsIiwiX2lvc1JlZmVyZW5jZUZyYW1lIiwiaXNXaW5kb3dBdmFpbGFibGUiLCJkZXRlY3RQbGF0Zm9ybSIsImdldFNlbnNvck5hbWUiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInByb3RvY29sIiwiV0VCX0lPUyIsImluaXRpYWxpemVTZW5zb3IiLCJhZGRFdmVudExpc3RlbmVyIiwic3RhcnQiLCJzZXQiLCJ1bnJlZ2lzdGVyU2Vuc29yIiwiaWQiLCJnZXQiLCJzdG9wIiwiZGVsZXRlIiwic3Vic2NyaWJlRm9yS2V5Ym9hcmRFdmVudHMiLCJ1bnN1YnNjcmliZUZyb21LZXlib2FyZEV2ZW50cyIsImNvbmZpZyIsInJlZmVyZW5jZUZyYW1lIiwiZnJlcXVlbmN5IiwiQWNjZWxlcm9tZXRlciIsIkd5cm9zY29wZSIsIkdyYXZpdHlTZW5zb3IiLCJNYWduZXRvbWV0ZXIiLCJBYnNvbHV0ZU9yaWVudGF0aW9uU2Vuc29yIiwidXNlckFnZW50IiwibmF2aWdhdG9yIiwidmVuZG9yIiwib3BlcmEiLCJVTktOT1dOIiwidGVzdCIsIldFQiIsImdldFZpZXdQcm9wIiwiX3ZpZXdUYWciLCJfcHJvcE5hbWUiLCJfY29tcG9uZW50IiwiX2NhbGxiYWNrIiwiY29uZmlndXJlUHJvcHMiLCJleGVjdXRlT25VSVJ1bnRpbWVTeW5jIiwiX3NoYXJlYWJsZSJdLCJzb3VyY2VzIjpbIkpTUmVhbmltYXRlZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5pbXBvcnQge1xuICBpc0Nocm9tZURlYnVnZ2VyLFxuICBpc0plc3QsXG4gIGlzV2ViLFxuICBpc1dpbmRvd0F2YWlsYWJsZSxcbn0gZnJvbSAnLi4vUGxhdGZvcm1DaGVja2VyJztcbmltcG9ydCB0eXBlIHsgU2hhcmVhYmxlUmVmLCBWYWx1ZTNELCBWYWx1ZVJvdGF0aW9uIH0gZnJvbSAnLi4vY29tbW9uVHlwZXMnO1xuaW1wb3J0IHsgU2Vuc29yVHlwZSB9IGZyb20gJy4uL2NvbW1vblR5cGVzJztcbmltcG9ydCB0eXBlIHsgV2ViU2Vuc29yIH0gZnJvbSAnLi9XZWJTZW5zb3InO1xuaW1wb3J0IHsgbW9ja2VkUmVxdWVzdEFuaW1hdGlvbkZyYW1lIH0gZnJvbSAnLi4vbW9ja2VkUmVxdWVzdEFuaW1hdGlvbkZyYW1lJztcbmltcG9ydCB0eXBlIHsgV29ya2xldFJ1bnRpbWUgfSBmcm9tICcuLi9ydW50aW1lcyc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IHsgUmVhbmltYXRlZEVycm9yIH0gZnJvbSAnLi4vZXJyb3JzJztcblxuLy8gSW4gTm9kZS5qcyBlbnZpcm9ubWVudHMgKGxpa2Ugd2hlbiBzdGF0aWMgcmVuZGVyaW5nIHdpdGggRXhwbyBSb3V0ZXIpXG4vLyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgaXMgdW5hdmFpbGFibGUsIHNvIHdlIHVzZSBvdXIgbW9jay5cbi8vIEl0IGFsc28gaGFzIHRvIGJlIG1vY2tlZCBmb3IgSmVzdCBwdXJwb3NlcyAoc2VlIGBpbml0aWFsaXplVUlSdW50aW1lYCkuXG5jb25zdCByZXF1ZXN0QW5pbWF0aW9uRnJhbWVJbXBsID1cbiAgaXNKZXN0KCkgfHwgIWdsb2JhbFRoaXMucmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgPyBtb2NrZWRSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgICA6IGdsb2JhbFRoaXMucmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBKU1JlYW5pbWF0ZWQge1xuICBuZXh0U2Vuc29ySWQgPSAwO1xuICBzZW5zb3JzID0gbmV3IE1hcDxudW1iZXIsIFdlYlNlbnNvcj4oKTtcbiAgcGxhdGZvcm0/OiBQbGF0Zm9ybSA9IHVuZGVmaW5lZDtcblxuICBtYWtlU2hhcmVhYmxlQ2xvbmU8VD4oKTogU2hhcmVhYmxlUmVmPFQ+IHtcbiAgICB0aHJvdyBuZXcgUmVhbmltYXRlZEVycm9yKFxuICAgICAgJ21ha2VTaGFyZWFibGVDbG9uZSBzaG91bGQgbmV2ZXIgYmUgY2FsbGVkIGluIEpTUmVhbmltYXRlZC4nXG4gICAgKTtcbiAgfVxuXG4gIHNjaGVkdWxlT25VSTxUPih3b3JrbGV0OiBTaGFyZWFibGVSZWY8VD4pIHtcbiAgICAvLyBAdHMtaWdub3JlIHdlYiBpbXBsZW1lbnRhdGlvbiBoYXMgc3RpbGwgbm90IGJlZW4gdXBkYXRlZCBhZnRlciB0aGUgcmV3cml0ZSwgdGhpcyB3aWxsIGJlIGFkZHJlc3NlZCBvbmNlIHRoZSB3ZWIgaW1wbGVtZW50YXRpb24gdXBkYXRlcyBhcmUgcmVhZHlcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWVJbXBsKHdvcmtsZXQpO1xuICB9XG5cbiAgY3JlYXRlV29ya2xldFJ1bnRpbWUoXG4gICAgX25hbWU6IHN0cmluZyxcbiAgICBfaW5pdGlhbGl6ZXI6IFNoYXJlYWJsZVJlZjwoKSA9PiB2b2lkPlxuICApOiBXb3JrbGV0UnVudGltZSB7XG4gICAgdGhyb3cgbmV3IFJlYW5pbWF0ZWRFcnJvcihcbiAgICAgICdjcmVhdGVXb3JrbGV0UnVudGltZSBpcyBub3QgYXZhaWxhYmxlIGluIEpTUmVhbmltYXRlZC4nXG4gICAgKTtcbiAgfVxuXG4gIHNjaGVkdWxlT25SdW50aW1lKCkge1xuICAgIHRocm93IG5ldyBSZWFuaW1hdGVkRXJyb3IoXG4gICAgICAnc2NoZWR1bGVPblJ1bnRpbWUgaXMgbm90IGF2YWlsYWJsZSBpbiBKU1JlYW5pbWF0ZWQuJ1xuICAgICk7XG4gIH1cblxuICByZWdpc3RlckV2ZW50SGFuZGxlcjxUPihcbiAgICBfZXZlbnRIYW5kbGVyOiBTaGFyZWFibGVSZWY8VD4sXG4gICAgX2V2ZW50TmFtZTogc3RyaW5nLFxuICAgIF9lbWl0dGVyUmVhY3RUYWc6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHRocm93IG5ldyBSZWFuaW1hdGVkRXJyb3IoXG4gICAgICAncmVnaXN0ZXJFdmVudEhhbmRsZXIgaXMgbm90IGF2YWlsYWJsZSBpbiBKU1JlYW5pbWF0ZWQuJ1xuICAgICk7XG4gIH1cblxuICB1bnJlZ2lzdGVyRXZlbnRIYW5kbGVyKF86IG51bWJlcik6IHZvaWQge1xuICAgIHRocm93IG5ldyBSZWFuaW1hdGVkRXJyb3IoXG4gICAgICAndW5yZWdpc3RlckV2ZW50SGFuZGxlciBpcyBub3QgYXZhaWxhYmxlIGluIEpTUmVhbmltYXRlZC4nXG4gICAgKTtcbiAgfVxuXG4gIGVuYWJsZUxheW91dEFuaW1hdGlvbnMoKSB7XG4gICAgaWYgKGlzV2ViKCkpIHtcbiAgICAgIGxvZ2dlci53YXJuKCdMYXlvdXQgQW5pbWF0aW9ucyBhcmUgbm90IHN1cHBvcnRlZCBvbiB3ZWIgeWV0LicpO1xuICAgIH0gZWxzZSBpZiAoaXNKZXN0KCkpIHtcbiAgICAgIGxvZ2dlci53YXJuKCdMYXlvdXQgQW5pbWF0aW9ucyBhcmUgbm8tb3BzIHdoZW4gdXNpbmcgSmVzdC4nKTtcbiAgICB9IGVsc2UgaWYgKGlzQ2hyb21lRGVidWdnZXIoKSkge1xuICAgICAgbG9nZ2VyLndhcm4oJ0xheW91dCBBbmltYXRpb25zIGFyZSBuby1vcHMgd2hlbiB1c2luZyBDaHJvbWUgRGVidWdnZXIuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZ2dlci53YXJuKCdMYXlvdXQgQW5pbWF0aW9ucyBhcmUgbm90IHN1cHBvcnRlZCBvbiB0aGlzIGNvbmZpZ3VyYXRpb24uJyk7XG4gICAgfVxuICB9XG5cbiAgY29uZmlndXJlTGF5b3V0QW5pbWF0aW9uQmF0Y2goKSB7XG4gICAgLy8gbm8tb3BcbiAgfVxuXG4gIHNldFNob3VsZEFuaW1hdGVFeGl0aW5nRm9yVGFnKCkge1xuICAgIC8vIG5vLW9wXG4gIH1cblxuICByZWdpc3RlclNlbnNvcihcbiAgICBzZW5zb3JUeXBlOiBTZW5zb3JUeXBlLFxuICAgIGludGVydmFsOiBudW1iZXIsXG4gICAgX2lvc1JlZmVyZW5jZUZyYW1lOiBudW1iZXIsXG4gICAgZXZlbnRIYW5kbGVyOiBTaGFyZWFibGVSZWY8KGRhdGE6IFZhbHVlM0QgfCBWYWx1ZVJvdGF0aW9uKSA9PiB2b2lkPlxuICApOiBudW1iZXIge1xuICAgIGlmICghaXNXaW5kb3dBdmFpbGFibGUoKSkge1xuICAgICAgLy8gdGhlIHdpbmRvdyBvYmplY3QgaXMgdW5hdmFpbGFibGUgd2hlbiBidWlsZGluZyB0aGUgc2VydmVyIHBvcnRpb24gb2YgYSBzaXRlIHRoYXQgdXNlcyBTU0dcbiAgICAgIC8vIHRoaXMgY2hlY2sgaXMgaGVyZSB0byBlbnN1cmUgdGhhdCB0aGUgc2VydmVyIGJ1aWxkIHdvbid0IGZhaWxcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wbGF0Zm9ybSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmRldGVjdFBsYXRmb3JtKCk7XG4gICAgfVxuXG4gICAgaWYgKCEodGhpcy5nZXRTZW5zb3JOYW1lKHNlbnNvclR5cGUpIGluIHdpbmRvdykpIHtcbiAgICAgIC8vIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby9zZW5zb3JzLyNzZWN1cmUtY29udGV4dFxuICAgICAgbG9nZ2VyLndhcm4oXG4gICAgICAgICdTZW5zb3IgaXMgbm90IGF2YWlsYWJsZS4nICtcbiAgICAgICAgICAoaXNXZWIoKSAmJiBsb2NhdGlvbi5wcm90b2NvbCAhPT0gJ2h0dHBzOidcbiAgICAgICAgICAgID8gJyBNYWtlIHN1cmUgeW91IHVzZSBzZWN1cmUgb3JpZ2luIHdpdGggYG5weCBleHBvIHN0YXJ0IC0td2ViIC0taHR0cHNgLidcbiAgICAgICAgICAgIDogJycpICtcbiAgICAgICAgICAodGhpcy5wbGF0Zm9ybSA9PT0gUGxhdGZvcm0uV0VCX0lPU1xuICAgICAgICAgICAgPyAnIEZvciBpT1Mgd2ViLCB5b3Ugd2lsbCBhbHNvIGhhdmUgdG8gYWxzbyBncmFudCBwZXJtaXNzaW9uIGluIHRoZSBicm93c2VyOiBodHRwczovL2Rldi50by9saS9ob3ctdG8tcmVxdWVzdHBlcm1pc3Npb24tZm9yLWRldmljZW1vdGlvbi1hbmQtZGV2aWNlb3JpZW50YXRpb24tZXZlbnRzLWluLWlvcy0xMy00NmcyLidcbiAgICAgICAgICAgIDogJycpXG4gICAgICApO1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnBsYXRmb3JtID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuZGV0ZWN0UGxhdGZvcm0oKTtcbiAgICB9XG5cbiAgICBjb25zdCBzZW5zb3I6IFdlYlNlbnNvciA9IHRoaXMuaW5pdGlhbGl6ZVNlbnNvcihzZW5zb3JUeXBlLCBpbnRlcnZhbCk7XG4gICAgc2Vuc29yLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAncmVhZGluZycsXG4gICAgICB0aGlzLmdldFNlbnNvckNhbGxiYWNrKHNlbnNvciwgc2Vuc29yVHlwZSwgZXZlbnRIYW5kbGVyKVxuICAgICk7XG4gICAgc2Vuc29yLnN0YXJ0KCk7XG5cbiAgICB0aGlzLnNlbnNvcnMuc2V0KHRoaXMubmV4dFNlbnNvcklkLCBzZW5zb3IpO1xuICAgIHJldHVybiB0aGlzLm5leHRTZW5zb3JJZCsrO1xuICB9XG5cbiAgZ2V0U2Vuc29yQ2FsbGJhY2sgPSAoXG4gICAgc2Vuc29yOiBXZWJTZW5zb3IsXG4gICAgc2Vuc29yVHlwZTogU2Vuc29yVHlwZSxcbiAgICBldmVudEhhbmRsZXI6IFNoYXJlYWJsZVJlZjwoZGF0YTogVmFsdWUzRCB8IFZhbHVlUm90YXRpb24pID0+IHZvaWQ+XG4gICkgPT4ge1xuICAgIHN3aXRjaCAoc2Vuc29yVHlwZSkge1xuICAgICAgY2FzZSBTZW5zb3JUeXBlLkFDQ0VMRVJPTUVURVI6XG4gICAgICBjYXNlIFNlbnNvclR5cGUuR1JBVklUWTpcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICBsZXQgeyB4LCB5LCB6IH0gPSBzZW5zb3I7XG5cbiAgICAgICAgICAvLyBXZWIgQW5kcm9pZCBzZW5zb3JzIGhhdmUgYSBkaWZmZXJlbnQgY29vcmRpbmF0ZSBzeXN0ZW0gdGhhbiBpT1NcbiAgICAgICAgICBpZiAodGhpcy5wbGF0Zm9ybSA9PT0gUGxhdGZvcm0uV0VCX0FORFJPSUQpIHtcbiAgICAgICAgICAgIFt4LCB5LCB6XSA9IFsteCwgLXksIC16XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gVE9ETyBUWVBFU0NSSVBUIG9uIHdlYiBTaGFyZWFibGVSZWYgaXMgdGhlIHZhbHVlIGl0c2VsZiBzbyB3ZSBjYWxsIGl0IGRpcmVjdGx5XG4gICAgICAgICAgKGV2ZW50SGFuZGxlciBhcyBhbnkpKHsgeCwgeSwgeiwgaW50ZXJmYWNlT3JpZW50YXRpb246IDAgfSk7XG4gICAgICAgIH07XG4gICAgICBjYXNlIFNlbnNvclR5cGUuR1lST1NDT1BFOlxuICAgICAgY2FzZSBTZW5zb3JUeXBlLk1BR05FVElDX0ZJRUxEOlxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHsgeCwgeSwgeiB9ID0gc2Vuc29yO1xuICAgICAgICAgIC8vIFRPRE8gVFlQRVNDUklQVCBvbiB3ZWIgU2hhcmVhYmxlUmVmIGlzIHRoZSB2YWx1ZSBpdHNlbGYgc28gd2UgY2FsbCBpdCBkaXJlY3RseVxuICAgICAgICAgIChldmVudEhhbmRsZXIgYXMgYW55KSh7IHgsIHksIHosIGludGVyZmFjZU9yaWVudGF0aW9uOiAwIH0pO1xuICAgICAgICB9O1xuICAgICAgY2FzZSBTZW5zb3JUeXBlLlJPVEFUSU9OOlxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgIGxldCBbcXcsIHF4LCBxeSwgcXpdID0gc2Vuc29yLnF1YXRlcm5pb247XG5cbiAgICAgICAgICAvLyBBbmRyb2lkIHNlbnNvcnMgaGF2ZSBhIGRpZmZlcmVudCBjb29yZGluYXRlIHN5c3RlbSB0aGFuIGlPU1xuICAgICAgICAgIGlmICh0aGlzLnBsYXRmb3JtID09PSBQbGF0Zm9ybS5XRUJfQU5EUk9JRCkge1xuICAgICAgICAgICAgW3F5LCBxel0gPSBbcXosIC1xeV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gcmVmZXJlbmNlOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy81NzgyNjU4L2V4dHJhY3RpbmcteWF3LWZyb20tYS1xdWF0ZXJuaW9uXG4gICAgICAgICAgY29uc3QgeWF3ID0gLU1hdGguYXRhbjIoXG4gICAgICAgICAgICAyLjAgKiAocXkgKiBxeiArIHF3ICogcXgpLFxuICAgICAgICAgICAgcXcgKiBxdyAtIHF4ICogcXggLSBxeSAqIHF5ICsgcXogKiBxelxuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc3QgcGl0Y2ggPSBNYXRoLnNpbigtMi4wICogKHF4ICogcXogLSBxdyAqIHF5KSk7XG4gICAgICAgICAgY29uc3Qgcm9sbCA9IC1NYXRoLmF0YW4yKFxuICAgICAgICAgICAgMi4wICogKHF4ICogcXkgKyBxdyAqIHF6KSxcbiAgICAgICAgICAgIHF3ICogcXcgKyBxeCAqIHF4IC0gcXkgKiBxeSAtIHF6ICogcXpcbiAgICAgICAgICApO1xuICAgICAgICAgIC8vIFRPRE8gVFlQRVNDUklQVCBvbiB3ZWIgU2hhcmVhYmxlUmVmIGlzIHRoZSB2YWx1ZSBpdHNlbGYgc28gd2UgY2FsbCBpdCBkaXJlY3RseVxuICAgICAgICAgIChldmVudEhhbmRsZXIgYXMgYW55KSh7XG4gICAgICAgICAgICBxdyxcbiAgICAgICAgICAgIHF4LFxuICAgICAgICAgICAgcXksXG4gICAgICAgICAgICBxeixcbiAgICAgICAgICAgIHlhdyxcbiAgICAgICAgICAgIHBpdGNoLFxuICAgICAgICAgICAgcm9sbCxcbiAgICAgICAgICAgIGludGVyZmFjZU9yaWVudGF0aW9uOiAwLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH1cbiAgfTtcblxuICB1bnJlZ2lzdGVyU2Vuc29yKGlkOiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCBzZW5zb3I6IFdlYlNlbnNvciB8IHVuZGVmaW5lZCA9IHRoaXMuc2Vuc29ycy5nZXQoaWQpO1xuICAgIGlmIChzZW5zb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgc2Vuc29yLnN0b3AoKTtcbiAgICAgIHRoaXMuc2Vuc29ycy5kZWxldGUoaWQpO1xuICAgIH1cbiAgfVxuXG4gIHN1YnNjcmliZUZvcktleWJvYXJkRXZlbnRzKF86IFNoYXJlYWJsZVJlZjxudW1iZXI+KTogbnVtYmVyIHtcbiAgICBpZiAoaXNXZWIoKSkge1xuICAgICAgbG9nZ2VyLndhcm4oJ3VzZUFuaW1hdGVkS2V5Ym9hcmQgaXMgbm90IGF2YWlsYWJsZSBvbiB3ZWIgeWV0LicpO1xuICAgIH0gZWxzZSBpZiAoaXNKZXN0KCkpIHtcbiAgICAgIGxvZ2dlci53YXJuKCd1c2VBbmltYXRlZEtleWJvYXJkIGlzIG5vdCBhdmFpbGFibGUgd2hlbiB1c2luZyBKZXN0LicpO1xuICAgIH0gZWxzZSBpZiAoaXNDaHJvbWVEZWJ1Z2dlcigpKSB7XG4gICAgICBsb2dnZXIud2FybihcbiAgICAgICAgJ3VzZUFuaW1hdGVkS2V5Ym9hcmQgaXMgbm90IGF2YWlsYWJsZSB3aGVuIHVzaW5nIENocm9tZSBEZWJ1Z2dlci4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2dnZXIud2FybihcbiAgICAgICAgJ3VzZUFuaW1hdGVkS2V5Ym9hcmQgaXMgbm90IGF2YWlsYWJsZSBvbiB0aGlzIGNvbmZpZ3VyYXRpb24uJ1xuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgdW5zdWJzY3JpYmVGcm9tS2V5Ym9hcmRFdmVudHMoXzogbnVtYmVyKTogdm9pZCB7XG4gICAgLy8gbm9vcFxuICB9XG5cbiAgaW5pdGlhbGl6ZVNlbnNvcihzZW5zb3JUeXBlOiBTZW5zb3JUeXBlLCBpbnRlcnZhbDogbnVtYmVyKTogV2ViU2Vuc29yIHtcbiAgICBjb25zdCBjb25maWcgPVxuICAgICAgaW50ZXJ2YWwgPD0gMFxuICAgICAgICA/IHsgcmVmZXJlbmNlRnJhbWU6ICdkZXZpY2UnIH1cbiAgICAgICAgOiB7IGZyZXF1ZW5jeTogMTAwMCAvIGludGVydmFsIH07XG4gICAgc3dpdGNoIChzZW5zb3JUeXBlKSB7XG4gICAgICBjYXNlIFNlbnNvclR5cGUuQUNDRUxFUk9NRVRFUjpcbiAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuQWNjZWxlcm9tZXRlcihjb25maWcpO1xuICAgICAgY2FzZSBTZW5zb3JUeXBlLkdZUk9TQ09QRTpcbiAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuR3lyb3Njb3BlKGNvbmZpZyk7XG4gICAgICBjYXNlIFNlbnNvclR5cGUuR1JBVklUWTpcbiAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuR3Jhdml0eVNlbnNvcihjb25maWcpO1xuICAgICAgY2FzZSBTZW5zb3JUeXBlLk1BR05FVElDX0ZJRUxEOlxuICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5NYWduZXRvbWV0ZXIoY29uZmlnKTtcbiAgICAgIGNhc2UgU2Vuc29yVHlwZS5ST1RBVElPTjpcbiAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuQWJzb2x1dGVPcmllbnRhdGlvblNlbnNvcihjb25maWcpO1xuICAgIH1cbiAgfVxuXG4gIGdldFNlbnNvck5hbWUoc2Vuc29yVHlwZTogU2Vuc29yVHlwZSk6IHN0cmluZyB7XG4gICAgc3dpdGNoIChzZW5zb3JUeXBlKSB7XG4gICAgICBjYXNlIFNlbnNvclR5cGUuQUNDRUxFUk9NRVRFUjpcbiAgICAgICAgcmV0dXJuICdBY2NlbGVyb21ldGVyJztcbiAgICAgIGNhc2UgU2Vuc29yVHlwZS5HUkFWSVRZOlxuICAgICAgICByZXR1cm4gJ0dyYXZpdHlTZW5zb3InO1xuICAgICAgY2FzZSBTZW5zb3JUeXBlLkdZUk9TQ09QRTpcbiAgICAgICAgcmV0dXJuICdHeXJvc2NvcGUnO1xuICAgICAgY2FzZSBTZW5zb3JUeXBlLk1BR05FVElDX0ZJRUxEOlxuICAgICAgICByZXR1cm4gJ01hZ25ldG9tZXRlcic7XG4gICAgICBjYXNlIFNlbnNvclR5cGUuUk9UQVRJT046XG4gICAgICAgIHJldHVybiAnQWJzb2x1dGVPcmllbnRhdGlvblNlbnNvcic7XG4gICAgfVxuICB9XG5cbiAgZGV0ZWN0UGxhdGZvcm0oKSB7XG4gICAgY29uc3QgdXNlckFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCBuYXZpZ2F0b3IudmVuZG9yIHx8IHdpbmRvdy5vcGVyYTtcbiAgICBpZiAodXNlckFnZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMucGxhdGZvcm0gPSBQbGF0Zm9ybS5VTktOT1dOO1xuICAgIH0gZWxzZSBpZiAoL2lQYWR8aVBob25lfGlQb2QvLnRlc3QodXNlckFnZW50KSkge1xuICAgICAgdGhpcy5wbGF0Zm9ybSA9IFBsYXRmb3JtLldFQl9JT1M7XG4gICAgfSBlbHNlIGlmICgvYW5kcm9pZC9pLnRlc3QodXNlckFnZW50KSkge1xuICAgICAgdGhpcy5wbGF0Zm9ybSA9IFBsYXRmb3JtLldFQl9BTkRST0lEO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBsYXRmb3JtID0gUGxhdGZvcm0uV0VCO1xuICAgIH1cbiAgfVxuXG4gIGdldFZpZXdQcm9wPFQ+KFxuICAgIF92aWV3VGFnOiBudW1iZXIsXG4gICAgX3Byb3BOYW1lOiBzdHJpbmcsXG4gICAgX2NvbXBvbmVudD86IFJlYWN0LkNvbXBvbmVudCxcbiAgICBfY2FsbGJhY2s/OiAocmVzdWx0OiBUKSA9PiB2b2lkXG4gICk6IFByb21pc2U8VD4ge1xuICAgIHRocm93IG5ldyBSZWFuaW1hdGVkRXJyb3IoJ2dldFZpZXdQcm9wIGlzIG5vdCBhdmFpbGFibGUgaW4gSlNSZWFuaW1hdGVkLicpO1xuICB9XG5cbiAgY29uZmlndXJlUHJvcHMoKSB7XG4gICAgdGhyb3cgbmV3IFJlYW5pbWF0ZWRFcnJvcihcbiAgICAgICdjb25maWd1cmVQcm9wcyBpcyBub3QgYXZhaWxhYmxlIGluIEpTUmVhbmltYXRlZC4nXG4gICAgKTtcbiAgfVxuXG4gIGV4ZWN1dGVPblVJUnVudGltZVN5bmM8VCwgUj4oX3NoYXJlYWJsZTogU2hhcmVhYmxlUmVmPFQ+KTogUiB7XG4gICAgdGhyb3cgbmV3IFJlYW5pbWF0ZWRFcnJvcihcbiAgICAgICdgZXhlY3V0ZU9uVUlSdW50aW1lU3luY2AgaXMgbm90IGF2YWlsYWJsZSBpbiBKU1JlYW5pbWF0ZWQuJ1xuICAgICk7XG4gIH1cbn1cblxuZW51bSBQbGF0Zm9ybSB7XG4gIFdFQl9JT1MgPSAnd2ViIGlPUycsXG4gIFdFQl9BTkRST0lEID0gJ3dlYiBBbmRyb2lkJyxcbiAgV0VCID0gJ3dlYicsXG4gIFVOS05PV04gPSAndW5rbm93bicsXG59XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgaW50ZXJmYWNlIE5hdmlnYXRvciB7XG4gICAgdXNlckFnZW50OiBzdHJpbmc7XG4gICAgdmVuZG9yOiBzdHJpbmc7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFBQyxJQUFBQSxzQkFBQSxHQUFBQyxPQUFBO0FBQUFDLE1BQUEsQ0FBQUMsY0FBQSxDQUFBQyxPQUFBO0VBQUFDLEtBQUE7QUFBQTtBQUFBRCxPQUFBLENBQUFFLE9BQUE7QUFBQSxJQUFBQyxlQUFBLEdBQUFQLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBTyxnQkFBQSxHQUFBUixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQVEsYUFBQSxHQUFBVCxzQkFBQSxDQUFBQyxPQUFBO0FBQ2IsSUFBQVMsZ0JBQUEsR0FBQVQsT0FBQTtBQU9BLElBQUFVLFlBQUEsR0FBQVYsT0FBQTtBQUVBLElBQUFXLDRCQUFBLEdBQUFYLE9BQUE7QUFFQSxJQUFBWSxPQUFBLEdBQUFaLE9BQUE7QUFDQSxJQUFBYSxPQUFBLEdBQUFiLE9BQUE7QUFLQSxJQUFNYyx5QkFBeUIsR0FDN0IsSUFBQUMsdUJBQU0sRUFBQyxDQUFDLElBQUksQ0FBQ0MsVUFBVSxDQUFDQyxxQkFB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