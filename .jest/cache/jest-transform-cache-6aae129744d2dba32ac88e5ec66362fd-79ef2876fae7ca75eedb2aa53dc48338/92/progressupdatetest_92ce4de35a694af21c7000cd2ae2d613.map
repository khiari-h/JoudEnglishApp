{"version":3,"names":["_getJestObj","mock","router","push","jest","fn","replace","setParams","useFocusEffect","callback","useLocalSearchParams","Stack","_ref","children","_jsxRuntime","jsx","Fragment","Link","_ref2","lastActivity","isLoading","reload","originalModule","requireActual","Object","assign","useProgress","progress","overall","levels","updateProgress","mockUpdateProgress","getProgressForLevel","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_expoRouter","_Dashboard","_ProgressContext","_ThemeContext","_CurrentLevelContext","_require","renderDashboard","render","ThemeProvider","ProgressProvider","CurrentLevelProvider","default","describe","beforeEach","clearAllMocks","mockClear","it","_renderDashboard","getByTestId","findByText","waitFor","expect","toBeTruthy","startButton","fireEvent","press","toHaveBeenCalledWith","level","exerciseType","act","score"],"sources":["progress-update.test.js"],"sourcesContent":["// __tests__/integration/progress-update.test.js\nimport React from 'react';\nimport { render, fireEvent, waitFor, act } from '@testing-library/react-native';\nimport { router } from 'expo-router';\nimport Dashboard from '../../src/screens/Dashboard';\nimport { ProgressProvider, useProgress } from '../../src/contexts/ProgressContext';\nimport { ThemeProvider } from '../../src/contexts/ThemeContext';\nimport { CurrentLevelProvider } from '../../src/contexts/CurrentLevelContext';\n\n// Mock de expo-router\njest.mock('expo-router', () => ({\n  router: {\n    push: jest.fn(),\n    replace: jest.fn(),\n    setParams: jest.fn(),\n  },\n  useFocusEffect: jest.fn(callback => callback()),\n  useLocalSearchParams: jest.fn(() => ({})),\n  Stack: ({ children }) => <>{children}</>,\n  Link: ({ children }) => <>{children}</>,\n}));\n\n// Mock des hooks\njest.mock('../../src/hooks/useLastActivity', () => () => ({\n  lastActivity: null,\n  isLoading: false,\n  reload: jest.fn(),\n}));\n\n// Mock partiel du ProgressContext pour espionner updateProgress\nconst mockUpdateProgress = jest.fn();\n\njest.mock('../../src/contexts/ProgressContext', () => {\n  const originalModule = jest.requireActual('../../src/contexts/ProgressContext');\n  return {\n    ...originalModule,\n    useProgress: () => ({\n      ...originalModule.useProgress(),\n      progress: { overall: 0, levels: {} },\n      isLoading: false,\n      updateProgress: mockUpdateProgress,\n      getProgressForLevel: () => 0,\n    }),\n  };\n});\n\n\nconst renderDashboard = () => {\n  return render(\n    <ThemeProvider>\n        <ProgressProvider>\n            <CurrentLevelProvider>\n                <Dashboard />\n            </CurrentLevelProvider>\n        </ProgressProvider>\n    </ThemeProvider>\n  );\n};\n\ndescribe('Scénario 1: Mise à jour de la progression', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    // Reset progress before each test\n    mockUpdateProgress.mockClear();\n  });\n\n  it('devrait mettre à jour la progression après avoir terminé un exercice', async () => {\n    const { getByTestId, findByText } = renderDashboard();\n\n    // 1. Démarrer sur le Dashboard et aller à la sélection de niveau\n    await waitFor(() => expect(getByTestId('level-selection-button')).toBeTruthy());\n    const startButton = getByTestId('level-selection-button');\n    fireEvent.press(startButton);\n\n    await waitFor(() => {\n        expect(router.push).toHaveBeenCalledWith('/tabs/levelSelection');\n    });\n\n    // 2. Simuler la sélection d'un niveau et d'un exercice\n    // (Ces écrans ne sont pas rendus, on simule la navigation et ses conséquences)\n    const level = 'A1';\n    const exerciseType = 'vocabulary';\n\n    // 3. Simuler la fin de l'exercice et l'appel à updateProgress\n    // C'est le cœur de l'intégration : on simule que l'écran d'exercice\n    // a fini son travail et a appelé la fonction de mise à jour du contexte.\n    await act(async () => {\n      // Simule le score obtenu à la fin de l'exercice\n      const score = 80; // 80%\n      // Appelle la fonction mockée avec les paramètres attendus\n      mockUpdateProgress(level, exerciseType, score);\n    });\n\n    // 4. Vérifier que la fonction de mise à jour a été appelée\n    expect(mockUpdateProgress).toHaveBeenCalledWith(level, exerciseType, 80);\n\n    // NOTE: Pour une vérification complète, il faudrait que le mock de useProgress\n    // mette à jour son état interne pour que le Dashboard re-rende avec la nouvelle\n    // progression. C'est une étape de complexité supplémentaire.\n    // Pour l'instant, on valide que le mécanisme de mise à jour est bien appelé.\n  });\n});"],"mappings":"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","ignoreList":[]}