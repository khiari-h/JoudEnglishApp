eeb1eb202bff3f1e7ebd2b97a1de38b0
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _vectorIcons = require("@expo/vector-icons");
var _native = require("@react-navigation/native");
var _react = require("react");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var Header = function Header(_ref) {
  var title = _ref.title,
    _ref$showBackButton = _ref.showBackButton,
    showBackButton = _ref$showBackButton === void 0 ? true : _ref$showBackButton,
    onBackPress = _ref.onBackPress,
    rightComponent = _ref.rightComponent,
    rightIcon = _ref.rightIcon,
    onRightPress = _ref.onRightPress,
    _ref$backgroundColor = _ref.backgroundColor,
    backgroundColor = _ref$backgroundColor === void 0 ? "#FFFFFF" : _ref$backgroundColor,
    _ref$textColor = _ref.textColor,
    textColor = _ref$textColor === void 0 ? "#1F2937" : _ref$textColor,
    _ref$withShadow = _ref.withShadow,
    withShadow = _ref$withShadow === void 0 ? true : _ref$withShadow,
    _ref$withBottomBorder = _ref.withBottomBorder,
    withBottomBorder = _ref$withBottomBorder === void 0 ? false : _ref$withBottomBorder,
    _ref$withStatusBar = _ref.withStatusBar,
    withStatusBar = _ref$withStatusBar === void 0 ? true : _ref$withStatusBar,
    _ref$statusBarColor = _ref.statusBarColor,
    statusBarColor = _ref$statusBarColor === void 0 ? "#FFFFFF" : _ref$statusBarColor,
    _ref$statusBarStyle = _ref.statusBarStyle,
    statusBarStyle = _ref$statusBarStyle === void 0 ? "dark-content" : _ref$statusBarStyle,
    _ref$condensed = _ref.condensed,
    condensed = _ref$condensed === void 0 ? false : _ref$condensed,
    _ref$largeTitleMode = _ref.largeTitleMode,
    largeTitleMode = _ref$largeTitleMode === void 0 ? false : _ref$largeTitleMode,
    subtitle = _ref.subtitle,
    leftComponent = _ref.leftComponent,
    bottomComponent = _ref.bottomComponent,
    children = _ref.children,
    contentContainerStyle = _ref.contentContainerStyle,
    titleContainerStyle = _ref.titleContainerStyle;
  var navigation = (0, _native.useNavigation)();
  var handleBackPress = (0, _react.useCallback)(function () {
    if (onBackPress) {
      onBackPress();
    } else if (navigation.canGoBack()) {
      navigation.goBack();
    }
  }, [onBackPress, navigation]);
  var renderLeftComponent = function renderLeftComponent() {
    if (leftComponent) return leftComponent;
    if (showBackButton) {
      return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        onPress: handleBackPress,
        style: _style.default.backButton,
        hitSlop: {
          top: 10,
          bottom: 10,
          left: 10,
          right: 10
        },
        accessibilityRole: "button",
        testID: "back-button",
        children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: "chevron-back",
          size: 24,
          color: textColor
        })
      });
    }
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.placeholderButton
    });
  };
  var renderRightComponent = function renderRightComponent() {
    if (rightComponent) return rightComponent;
    if (rightIcon) {
      return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        onPress: onRightPress,
        style: _style.default.rightButton,
        hitSlop: {
          top: 10,
          bottom: 10,
          left: 10,
          right: 10
        },
        children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: rightIcon,
          size: 24,
          color: textColor
        })
      });
    }
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.placeholderButton
    });
  };
  var renderLargeTitleRightComponent = function renderLargeTitleRightComponent() {
    if (rightComponent) {
      return (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _style.default.rightComponentContainer,
        children: rightComponent
      });
    }
    if (rightIcon) {
      return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        onPress: onRightPress,
        hitSlop: {
          top: 10,
          bottom: 10,
          left: 10,
          right: 10
        },
        children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: rightIcon,
          size: 24,
          color: textColor
        })
      });
    }
    return null;
  };
  var renderStandardContent = function renderStandardContent() {
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: _style.default.standardContainer,
      children: [renderLeftComponent(), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [_style.default.title, {
          color: textColor
        }, condensed && _style.default.condensedTitle, titleContainerStyle],
        numberOfLines: 1,
        children: title
      }), renderRightComponent()]
    });
  };
  var renderLargeTitleContent = function renderLargeTitleContent() {
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: _style.default.largeTitleWrapper,
      children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: _style.default.topRow,
        children: [renderLeftComponent(), renderLargeTitleRightComponent()]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: titleContainerStyle,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [_style.default.largeTitle, {
            color: textColor
          }],
          children: title
        }), subtitle && (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: _style.default.largeTitleSubtitle,
          children: subtitle
        })]
      }), bottomComponent && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _style.default.bottomComponentContainer,
        children: bottomComponent
      })]
    });
  };
  var renderMainContent = function renderMainContent() {
    if (children) {
      return (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _style.default.childrenContainer,
        children: children
      });
    }
    if (largeTitleMode) {
      return renderLargeTitleContent();
    }
    return renderStandardContent();
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [_style.default.container, {
      backgroundColor: backgroundColor
    }, withShadow && _style.default.withShadow, withBottomBorder && _style.default.withBorder, condensed && _style.default.condensed, largeTitleMode && _style.default.largeTitleContainer, contentContainerStyle],
    children: [withStatusBar && (0, _jsxRuntime.jsx)(_reactNative.StatusBar, {
      backgroundColor: statusBarColor,
      barStyle: statusBarStyle
    }), renderMainContent()]
  });
};
Header.propTypes = {
  title: _propTypes.default.string,
  showBackButton: _propTypes.default.bool,
  onBackPress: _propTypes.default.func,
  rightComponent: _propTypes.default.node,
  rightIcon: _propTypes.default.string,
  onRightPress: _propTypes.default.func,
  backgroundColor: _propTypes.default.string,
  textColor: _propTypes.default.string,
  withShadow: _propTypes.default.bool,
  withBottomBorder: _propTypes.default.bool,
  withStatusBar: _propTypes.default.bool,
  statusBarColor: _propTypes.default.string,
  statusBarStyle: _propTypes.default.oneOf(['default', 'light-content', 'dark-content']),
  condensed: _propTypes.default.bool,
  largeTitleMode: _propTypes.default.bool,
  subtitle: _propTypes.default.string,
  leftComponent: _propTypes.default.node,
  bottomComponent: _propTypes.default.node,
  children: _propTypes.default.node,
  contentContainerStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array]),
  titleContainerStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array])
};
var _default = exports.default = Header;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX3ZlY3Rvckljb25zIiwiX25hdGl2ZSIsIl9yZWFjdCIsIl9wcm9wVHlwZXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3N0eWxlIiwiX2pzeFJ1bnRpbWUiLCJIZWFkZXIiLCJfcmVmIiwidGl0bGUiLCJfcmVmJHNob3dCYWNrQnV0dG9uIiwic2hvd0JhY2tCdXR0b24iLCJvbkJhY2tQcmVzcyIsInJpZ2h0Q29tcG9uZW50IiwicmlnaHRJY29uIiwib25SaWdodFByZXNzIiwiX3JlZiRiYWNrZ3JvdW5kQ29sb3IiLCJiYWNrZ3JvdW5kQ29sb3IiLCJfcmVmJHRleHRDb2xvciIsInRleHRDb2xvciIsIl9yZWYkd2l0aFNoYWRvdyIsIndpdGhTaGFkb3ciLCJfcmVmJHdpdGhCb3R0b21Cb3JkZXIiLCJ3aXRoQm90dG9tQm9yZGVyIiwiX3JlZiR3aXRoU3RhdHVzQmFyIiwid2l0aFN0YXR1c0JhciIsIl9yZWYkc3RhdHVzQmFyQ29sb3IiLCJzdGF0dXNCYXJDb2xvciIsIl9yZWYkc3RhdHVzQmFyU3R5bGUiLCJzdGF0dXNCYXJTdHlsZSIsIl9yZWYkY29uZGVuc2VkIiwiY29uZGVuc2VkIiwiX3JlZiRsYXJnZVRpdGxlTW9kZSIsImxhcmdlVGl0bGVNb2RlIiwic3VidGl0bGUiLCJsZWZ0Q29tcG9uZW50IiwiYm90dG9tQ29tcG9uZW50IiwiY2hpbGRyZW4iLCJjb250ZW50Q29udGFpbmVyU3R5bGUiLCJ0aXRsZUNvbnRhaW5lclN0eWxlIiwibmF2aWdhdGlvbiIsInVzZU5hdmlnYXRpb24iLCJoYW5kbGVCYWNrUHJlc3MiLCJ1c2VDYWxsYmFjayIsImNhbkdvQmFjayIsImdvQmFjayIsInJlbmRlckxlZnRDb21wb25lbnQiLCJqc3giLCJUb3VjaGFibGVPcGFjaXR5Iiwib25QcmVzcyIsInN0eWxlIiwic3R5bGVzIiwiYmFja0J1dHRvbiIsImhpdFNsb3AiLCJ0b3AiLCJib3R0b20iLCJsZWZ0IiwicmlnaHQiLCJhY2Nlc3NpYmlsaXR5Um9sZSIsInRlc3RJRCIsIklvbmljb25zIiwibmFtZSIsInNpemUiLCJjb2xvciIsIlZpZXciLCJwbGFjZWhvbGRlckJ1dHRvbiIsInJlbmRlclJpZ2h0Q29tcG9uZW50IiwicmlnaHRCdXR0b24iLCJyZW5kZXJMYXJnZVRpdGxlUmlnaHRDb21wb25lbnQiLCJyaWdodENvbXBvbmVudENvbnRhaW5lciIsInJlbmRlclN0YW5kYXJkQ29udGVudCIsImpzeHMiLCJzdGFuZGFyZENvbnRhaW5lciIsIlRleHQiLCJjb25kZW5zZWRUaXRsZSIsIm51bWJlck9mTGluZXMiLCJyZW5kZXJMYXJnZVRpdGxlQ29udGVudCIsImxhcmdlVGl0bGVXcmFwcGVyIiwidG9wUm93IiwibGFyZ2VUaXRsZSIsImxhcmdlVGl0bGVTdWJ0aXRsZSIsImJvdHRvbUNvbXBvbmVudENvbnRhaW5lciIsInJlbmRlck1haW5Db250ZW50IiwiY2hpbGRyZW5Db250YWluZXIiLCJjb250YWluZXIiLCJ3aXRoQm9yZGVyIiwibGFyZ2VUaXRsZUNvbnRhaW5lciIsIlN0YXR1c0JhciIsImJhclN0eWxlIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwic3RyaW5nIiwiYm9vbCIsImZ1bmMiLCJub2RlIiwib25lT2YiLCJvbmVPZlR5cGUiLCJvYmplY3QiLCJhcnJheSIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvY29tcG9uZW50cy9sYXlvdXQvSGVhZGVyL2luZGV4LmpzXHJcbmltcG9ydCB7XHJcbiAgVmlldyxcclxuICBUZXh0LFxyXG4gIFRvdWNoYWJsZU9wYWNpdHksXHJcbiAgU3RhdHVzQmFyLFxyXG59IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcclxuaW1wb3J0IHsgSW9uaWNvbnMgfSBmcm9tIFwiQGV4cG8vdmVjdG9yLWljb25zXCI7XHJcbmltcG9ydCB7IHVzZU5hdmlnYXRpb24gfSBmcm9tIFwiQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlXCI7XHJcbmltcG9ydCB7IHVzZUNhbGxiYWNrIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XHJcbmltcG9ydCBzdHlsZXMgZnJvbSBcIi4vc3R5bGVcIjtcclxuXHJcbi8qKlxyXG4gKiBDb21wb3NhbnQgZCdlbi10w6p0ZSByw6l1dGlsaXNhYmxlIHBvdXIgbGVzIMOpY3JhbnMgZGUgbCdhcHBsaWNhdGlvblxyXG4gKiBhdmVjIHN1cHBvcnQgYW3DqWxpb3LDqSBwb3VyIGxlIGNvbnRlbnUgcGVyc29ubmFsaXPDqVxyXG4gKi9cclxuY29uc3QgSGVhZGVyID0gKHtcclxuICAvLyBPcHRpb25zIGRlIGJhc2VcclxuICB0aXRsZSxcclxuICBzaG93QmFja0J1dHRvbiA9IHRydWUsXHJcbiAgb25CYWNrUHJlc3MsXHJcbiAgcmlnaHRDb21wb25lbnQsXHJcbiAgcmlnaHRJY29uLFxyXG4gIG9uUmlnaHRQcmVzcyxcclxuXHJcbiAgLy8gU3R5bGUgZXQgYXBwYXJlbmNlXHJcbiAgYmFja2dyb3VuZENvbG9yID0gXCIjRkZGRkZGXCIsXHJcbiAgdGV4dENvbG9yID0gXCIjMUYyOTM3XCIsXHJcbiAgd2l0aFNoYWRvdyA9IHRydWUsXHJcbiAgd2l0aEJvdHRvbUJvcmRlciA9IGZhbHNlLFxyXG4gIHdpdGhTdGF0dXNCYXIgPSB0cnVlLFxyXG4gIHN0YXR1c0JhckNvbG9yID0gXCIjRkZGRkZGXCIsXHJcbiAgc3RhdHVzQmFyU3R5bGUgPSBcImRhcmstY29udGVudFwiLFxyXG4gIGNvbmRlbnNlZCA9IGZhbHNlLFxyXG5cclxuICAvLyBNb2RlIHRpdHJlIGxhcmdlXHJcbiAgbGFyZ2VUaXRsZU1vZGUgPSBmYWxzZSxcclxuICBzdWJ0aXRsZSxcclxuXHJcbiAgLy8gTm91dmVhdXggcGFyYW3DqHRyZXMgcG91ciBwbHVzIGRlIGZsZXhpYmlsaXTDqVxyXG4gIGxlZnRDb21wb25lbnQsIC8vIENvbXBvc2FudCBwZXJzb25uYWxpc8OpIMOgIGdhdWNoZSAocmVtcGxhY2UgbGUgYm91dG9uIHJldG91ciBzaSBmb3VybmkpXHJcbiAgYm90dG9tQ29tcG9uZW50LCAvLyBDb21wb3NhbnQgcGVyc29ubmFsaXPDqSBzb3VzIGxlIHRpdHJlL3NvdXMtdGl0cmVcclxuICBjaGlsZHJlbiwgLy8gQ29udGVudSBwZXJzb25uYWxpc8OpIHBvdXIgbGUgaGVhZGVyIChyZW1wbGFjZSB0b3V0IGxlIGNvbnRlbnUgc3RhbmRhcmQgc2kgZm91cm5pKVxyXG4gIGNvbnRlbnRDb250YWluZXJTdHlsZSwgLy8gU3R5bGUgcG91ciBsZSBjb250ZW5ldXIgZGUgY29udGVudVxyXG4gIHRpdGxlQ29udGFpbmVyU3R5bGUsIC8vIFN0eWxlIHBvdXIgbGUgY29udGVuZXVyIGRlIHRpdHJlXHJcbn0pID0+IHtcclxuICBjb25zdCBuYXZpZ2F0aW9uID0gdXNlTmF2aWdhdGlvbigpO1xyXG5cclxuICAvLyBGb25jdGlvbiBwb3VyIGxlIGJvdXRvbiByZXRvdXJcclxuICBjb25zdCBoYW5kbGVCYWNrUHJlc3MgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICBpZiAob25CYWNrUHJlc3MpIHtcclxuICAgICAgb25CYWNrUHJlc3MoKTtcclxuICAgIH0gZWxzZSBpZiAobmF2aWdhdGlvbi5jYW5Hb0JhY2soKSkge1xyXG4gICAgICBuYXZpZ2F0aW9uLmdvQmFjaygpO1xyXG4gICAgfVxyXG4gIH0sIFtvbkJhY2tQcmVzcywgbmF2aWdhdGlvbl0pO1xyXG5cclxuICAvLyDinIUgRXh0cmFjdGlvbiBkZSBsYSBsb2dpcXVlIGNvbmRpdGlvbm5lbGxlIHBvdXIgYW3DqWxpb3JlciBsYSBsaXNpYmlsaXTDqVxyXG4gIFxyXG4gIC8vIEZvbmN0aW9uIHBvdXIgZMOpdGVybWluZXIgbGUgY29tcG9zYW50IGdhdWNoZVxyXG4gIGNvbnN0IHJlbmRlckxlZnRDb21wb25lbnQgPSAoKSA9PiB7XHJcbiAgICBpZiAobGVmdENvbXBvbmVudCkgcmV0dXJuIGxlZnRDb21wb25lbnQ7XHJcbiAgICBpZiAoc2hvd0JhY2tCdXR0b24pIHtcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8VG91Y2hhYmxlT3BhY2l0eVxyXG4gICAgICAgICAgb25QcmVzcz17aGFuZGxlQmFja1ByZXNzfVxyXG4gICAgICAgICAgc3R5bGU9e3N0eWxlcy5iYWNrQnV0dG9ufVxyXG4gICAgICAgICAgaGl0U2xvcD17eyB0b3A6IDEwLCBib3R0b206IDEwLCBsZWZ0OiAxMCwgcmlnaHQ6IDEwIH19XHJcbiAgICAgICAgICBhY2Nlc3NpYmlsaXR5Um9sZT1cImJ1dHRvblwiXHJcbiAgICAgICAgICB0ZXN0SUQ9XCJiYWNrLWJ1dHRvblwiXHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPElvbmljb25zIG5hbWU9XCJjaGV2cm9uLWJhY2tcIiBzaXplPXsyNH0gY29sb3I9e3RleHRDb2xvcn0gLz5cclxuICAgICAgICA8L1RvdWNoYWJsZU9wYWNpdHk+XHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gPFZpZXcgc3R5bGU9e3N0eWxlcy5wbGFjZWhvbGRlckJ1dHRvbn0gLz47XHJcbiAgfTtcclxuICBcclxuICAvLyBGb25jdGlvbiBwb3VyIGTDqXRlcm1pbmVyIGxlIGNvbXBvc2FudCBkcm9pdFxyXG4gIGNvbnN0IHJlbmRlclJpZ2h0Q29tcG9uZW50ID0gKCkgPT4ge1xyXG4gICAgaWYgKHJpZ2h0Q29tcG9uZW50KSByZXR1cm4gcmlnaHRDb21wb25lbnQ7XHJcbiAgICBpZiAocmlnaHRJY29uKSB7XHJcbiAgICAgIHJldHVybiAoXHJcbiAgICAgICAgPFRvdWNoYWJsZU9wYWNpdHlcclxuICAgICAgICAgIG9uUHJlc3M9e29uUmlnaHRQcmVzc31cclxuICAgICAgICAgIHN0eWxlPXtzdHlsZXMucmlnaHRCdXR0b259XHJcbiAgICAgICAgICBoaXRTbG9wPXt7IHRvcDogMTAsIGJvdHRvbTogMTAsIGxlZnQ6IDEwLCByaWdodDogMTAgfX1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8SW9uaWNvbnMgbmFtZT17cmlnaHRJY29ufSBzaXplPXsyNH0gY29sb3I9e3RleHRDb2xvcn0gLz5cclxuICAgICAgICA8L1RvdWNoYWJsZU9wYWNpdHk+XHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gPFZpZXcgc3R5bGU9e3N0eWxlcy5wbGFjZWhvbGRlckJ1dHRvbn0gLz47XHJcbiAgfTtcclxuICBcclxuICAvLyBGb25jdGlvbiBwb3VyIGTDqXRlcm1pbmVyIGxlIGNvbXBvc2FudCBkcm9pdCBlbiBtb2RlIHRpdHJlIGxhcmdlXHJcbiAgY29uc3QgcmVuZGVyTGFyZ2VUaXRsZVJpZ2h0Q29tcG9uZW50ID0gKCkgPT4ge1xyXG4gICAgaWYgKHJpZ2h0Q29tcG9uZW50KSB7XHJcbiAgICAgIHJldHVybiA8VmlldyBzdHlsZT17c3R5bGVzLnJpZ2h0Q29tcG9uZW50Q29udGFpbmVyfT57cmlnaHRDb21wb25lbnR9PC9WaWV3PjtcclxuICAgIH1cclxuICAgIGlmIChyaWdodEljb24pIHtcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8VG91Y2hhYmxlT3BhY2l0eVxyXG4gICAgICAgICAgb25QcmVzcz17b25SaWdodFByZXNzfVxyXG4gICAgICAgICAgaGl0U2xvcD17eyB0b3A6IDEwLCBib3R0b206IDEwLCBsZWZ0OiAxMCwgcmlnaHQ6IDEwIH19XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPElvbmljb25zIG5hbWU9e3JpZ2h0SWNvbn0gc2l6ZT17MjR9IGNvbG9yPXt0ZXh0Q29sb3J9IC8+XHJcbiAgICAgICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfTtcclxuXHJcbiAgLy8gUmVuZHUgZHUgY29udGVudSBzdGFuZGFyZCBkdSBoZWFkZXJcclxuICBjb25zdCByZW5kZXJTdGFuZGFyZENvbnRlbnQgPSAoKSA9PiAoXHJcbiAgICA8VmlldyBzdHlsZT17c3R5bGVzLnN0YW5kYXJkQ29udGFpbmVyfT5cclxuICAgICAgey8qIENvbXBvc2FudCBnYXVjaGUgb3UgYm91dG9uIHJldG91ciAqL31cclxuICAgICAge3JlbmRlckxlZnRDb21wb25lbnQoKX1cclxuXHJcbiAgICAgIHsvKiBUaXRyZSAqL31cclxuICAgICAgPFRleHRcclxuICAgICAgICBzdHlsZT17W1xyXG4gICAgICAgICAgc3R5bGVzLnRpdGxlLFxyXG4gICAgICAgICAgeyBjb2xvcjogdGV4dENvbG9yIH0sXHJcbiAgICAgICAgICBjb25kZW5zZWQgJiYgc3R5bGVzLmNvbmRlbnNlZFRpdGxlLFxyXG4gICAgICAgICAgdGl0bGVDb250YWluZXJTdHlsZSxcclxuICAgICAgICBdfVxyXG4gICAgICAgIG51bWJlck9mTGluZXM9ezF9XHJcbiAgICAgID5cclxuICAgICAgICB7dGl0bGV9XHJcbiAgICAgIDwvVGV4dD5cclxuXHJcbiAgICAgIHsvKiBDb21wb3NhbnQgZHJvaXRlIG91IGljw7RuZSAqL31cclxuICAgICAge3JlbmRlclJpZ2h0Q29tcG9uZW50KCl9XHJcbiAgICA8L1ZpZXc+XHJcbiAgKTtcclxuXHJcbiAgLy8gUmVuZHUgZHUgY29udGVudSBlbiBtb2RlIHRpdHJlIGxhcmdlXHJcbiAgY29uc3QgcmVuZGVyTGFyZ2VUaXRsZUNvbnRlbnQgPSAoKSA9PiAoXHJcbiAgICA8VmlldyBzdHlsZT17c3R5bGVzLmxhcmdlVGl0bGVXcmFwcGVyfT5cclxuICAgICAgey8qIExpZ25lIHN1cMOpcmlldXJlIGF2ZWMgYm91dG9uIHJldG91ciBldCDDqXZlbnR1ZWwgY29tcG9zYW50IMOgIGRyb2l0ZSAqL31cclxuICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy50b3BSb3d9PlxyXG4gICAgICAgIHtyZW5kZXJMZWZ0Q29tcG9uZW50KCl9XHJcblxyXG4gICAgICAgIHsvKiBDb21wb3NhbnQgZGUgZHJvaXRlIChvdSBpY8O0bmUpICovfVxyXG4gICAgICAgIHtyZW5kZXJMYXJnZVRpdGxlUmlnaHRDb21wb25lbnQoKX1cclxuICAgICAgPC9WaWV3PlxyXG5cclxuICAgICAgey8qIENvbnRlbmV1ciBkZSB0aXRyZSBhdmVjIHN0eWxlIHBlcnNvbm5hbGlzYWJsZSAqL31cclxuICAgICAgPFZpZXcgc3R5bGU9e3RpdGxlQ29udGFpbmVyU3R5bGV9PlxyXG4gICAgICAgIHsvKiBHcmFuZCB0aXRyZSAqL31cclxuICAgICAgICA8VGV4dCBzdHlsZT17W3N0eWxlcy5sYXJnZVRpdGxlLCB7IGNvbG9yOiB0ZXh0Q29sb3IgfV19Pnt0aXRsZX08L1RleHQ+XHJcblxyXG4gICAgICAgIHsvKiBTb3VzLXRpdHJlIChvcHRpb25uZWwpICovfVxyXG4gICAgICAgIHtzdWJ0aXRsZSAmJiA8VGV4dCBzdHlsZT17c3R5bGVzLmxhcmdlVGl0bGVTdWJ0aXRsZX0+e3N1YnRpdGxlfTwvVGV4dD59XHJcbiAgICAgIDwvVmlldz5cclxuXHJcbiAgICAgIHsvKiBDb21wb3NhbnQgc3VwcGzDqW1lbnRhaXJlIHNvdXMgbGUgdGl0cmUgKHNpIGZvdXJuaSkgKi99XHJcbiAgICAgIHtib3R0b21Db21wb25lbnQgJiYgKFxyXG4gICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuYm90dG9tQ29tcG9uZW50Q29udGFpbmVyfT57Ym90dG9tQ29tcG9uZW50fTwvVmlldz5cclxuICAgICAgKX1cclxuICAgIDwvVmlldz5cclxuICApO1xyXG5cclxuICAvLyDinIUgRm9uY3Rpb24gcG91ciBkw6l0ZXJtaW5lciBsZSBjb250ZW51IHByaW5jaXBhbFxyXG4gIGNvbnN0IHJlbmRlck1haW5Db250ZW50ID0gKCkgPT4ge1xyXG4gICAgaWYgKGNoaWxkcmVuKSB7XHJcbiAgICAgIHJldHVybiA8VmlldyBzdHlsZT17c3R5bGVzLmNoaWxkcmVuQ29udGFpbmVyfT57Y2hpbGRyZW59PC9WaWV3PjtcclxuICAgIH1cclxuICAgIGlmIChsYXJnZVRpdGxlTW9kZSkge1xyXG4gICAgICByZXR1cm4gcmVuZGVyTGFyZ2VUaXRsZUNvbnRlbnQoKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZW5kZXJTdGFuZGFyZENvbnRlbnQoKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPFZpZXdcclxuICAgICAgc3R5bGU9e1tcclxuICAgICAgICBzdHlsZXMuY29udGFpbmVyLFxyXG4gICAgICAgIHsgYmFja2dyb3VuZENvbG9yIH0sXHJcbiAgICAgICAgd2l0aFNoYWRvdyAmJiBzdHlsZXMud2l0aFNoYWRvdyxcclxuICAgICAgICB3aXRoQm90dG9tQm9yZGVyICYmIHN0eWxlcy53aXRoQm9yZGVyLFxyXG4gICAgICAgIGNvbmRlbnNlZCAmJiBzdHlsZXMuY29uZGVuc2VkLFxyXG4gICAgICAgIGxhcmdlVGl0bGVNb2RlICYmIHN0eWxlcy5sYXJnZVRpdGxlQ29udGFpbmVyLFxyXG4gICAgICAgIGNvbnRlbnRDb250YWluZXJTdHlsZSxcclxuICAgICAgXX1cclxuICAgID5cclxuICAgICAgey8qIFN0YXR1c0JhciAob3B0aW9ubmVsKSAqL31cclxuICAgICAge3dpdGhTdGF0dXNCYXIgJiYgKFxyXG4gICAgICAgIDxTdGF0dXNCYXIgYmFja2dyb3VuZENvbG9yPXtzdGF0dXNCYXJDb2xvcn0gYmFyU3R5bGU9e3N0YXR1c0JhclN0eWxlfSAvPlxyXG4gICAgICApfVxyXG5cclxuICAgICAgey8qIENvbnRlbnUgcGVyc29ubmFsaXPDqSBvdSBjb250ZW51IHN0YW5kYXJkICovfVxyXG4gICAgICB7cmVuZGVyTWFpbkNvbnRlbnQoKX1cclxuICAgIDwvVmlldz5cclxuICApO1xyXG59O1xyXG5cclxuLy8gUHJvcFR5cGVzIHBvdXIgbGUgY29tcG9zYW50IEhlYWRlclxyXG5IZWFkZXIucHJvcFR5cGVzID0ge1xyXG4gIC8vIE9wdGlvbnMgZGUgYmFzZVxyXG4gIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gIHNob3dCYWNrQnV0dG9uOiBQcm9wVHlwZXMuYm9vbCxcclxuICBvbkJhY2tQcmVzczogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgcmlnaHRDb21wb25lbnQ6IFByb3BUeXBlcy5ub2RlLFxyXG4gIHJpZ2h0SWNvbjogUHJvcFR5cGVzLnN0cmluZyxcclxuICBvblJpZ2h0UHJlc3M6IFByb3BUeXBlcy5mdW5jLFxyXG5cclxuICAvLyBTdHlsZSBldCBhcHBhcmVuY2VcclxuICBiYWNrZ3JvdW5kQ29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXHJcbiAgdGV4dENvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gIHdpdGhTaGFkb3c6IFByb3BUeXBlcy5ib29sLFxyXG4gIHdpdGhCb3R0b21Cb3JkZXI6IFByb3BUeXBlcy5ib29sLFxyXG4gIHdpdGhTdGF0dXNCYXI6IFByb3BUeXBlcy5ib29sLFxyXG4gIHN0YXR1c0JhckNvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gIHN0YXR1c0JhclN0eWxlOiBQcm9wVHlwZXMub25lT2YoWydkZWZhdWx0JywgJ2xpZ2h0LWNvbnRlbnQnLCAnZGFyay1jb250ZW50J10pLFxyXG4gIGNvbmRlbnNlZDogUHJvcFR5cGVzLmJvb2wsXHJcblxyXG4gIC8vIE1vZGUgdGl0cmUgbGFyZ2VcclxuICBsYXJnZVRpdGxlTW9kZTogUHJvcFR5cGVzLmJvb2wsXHJcbiAgc3VidGl0bGU6IFByb3BUeXBlcy5zdHJpbmcsXHJcblxyXG4gIC8vIENvbXBvc2FudHMgcGVyc29ubmFsaXPDqXNcclxuICBsZWZ0Q29tcG9uZW50OiBQcm9wVHlwZXMubm9kZSxcclxuICBib3R0b21Db21wb25lbnQ6IFByb3BUeXBlcy5ub2RlLFxyXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcclxuICBjb250ZW50Q29udGFpbmVyU3R5bGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5hcnJheV0pLFxyXG4gIHRpdGxlQ29udGFpbmVyU3R5bGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5hcnJheV0pLFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQg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