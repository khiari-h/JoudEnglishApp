{"version":3,"names":["_react","require","_reactNative","_ConversationMessage","_interopRequireDefault","_ConversationTypingIndicator","_style","_jsxRuntime","ConversationMessageList","_ref","messages","isTyping","levelColor","scrollViewRef","useRef","useEffect","current","setTimeout","scrollToEnd","animated","jsxs","ScrollView","ref","style","styles","container","contentContainerStyle","contentContainer","showsVerticalScrollIndicator","children","map","message","jsx","default","id","_default","exports"],"sources":["index.js"],"sourcesContent":["import { useRef, useEffect } from 'react';\r\nimport { ScrollView } from 'react-native';\r\nimport ConversationMessage from '../ConversationMessage';\r\nimport ConversationTypingIndicator from '../ConversationTypingIndicator';\r\nimport styles from './style';\r\n\r\n/**\r\n * Composant qui affiche la liste des messages dans la conversation\r\n * \r\n * @param {Array} messages - Liste des messages à afficher\r\n * @param {boolean} isTyping - Indique si le bot est en train de taper\r\n * @param {string} levelColor - Couleur associée au niveau courant\r\n */\r\nconst ConversationMessageList = ({ messages, isTyping, levelColor }) => {\r\n  const scrollViewRef = useRef(null);\r\n\r\n  // Faire défiler automatiquement vers le bas quand de nouveaux messages arrivent\r\n  useEffect(() => {\r\n    if (scrollViewRef.current) {\r\n      setTimeout(() => {\r\n        scrollViewRef.current.scrollToEnd({ animated: true });\r\n      }, 100);\r\n    }\r\n  }, [messages, isTyping]);\r\n\r\n  return (\r\n    <ScrollView\r\n      ref={scrollViewRef}\r\n      style={styles.container}\r\n      contentContainerStyle={styles.contentContainer}\r\n      showsVerticalScrollIndicator={false}\r\n    >\r\n      {/* Afficher tous les messages */}\r\n      {messages.map((message) => (\r\n        <ConversationMessage\r\n          key={message.id}\r\n          message={message}\r\n          levelColor={levelColor}\r\n        />\r\n      ))}\r\n\r\n      {/* Afficher l'indicateur de frappe si nécessaire */}\r\n      {isTyping && <ConversationTypingIndicator levelColor={levelColor} />}\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nexport default ConversationMessageList;\r\n"],"mappings":";;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AACA,IAAAE,oBAAA,GAAAC,sBAAA,CAAAH,OAAA;AACA,IAAAI,4BAAA,GAAAD,sBAAA,CAAAH,OAAA;AACA,IAAAK,MAAA,GAAAF,sBAAA,CAAAH,OAAA;AAA6B,IAAAM,WAAA,GAAAN,OAAA;AAS7B,IAAMO,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAAAC,IAAA,EAA2C;EAAA,IAArCC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;IAAEC,QAAQ,GAAAF,IAAA,CAARE,QAAQ;IAAEC,UAAU,GAAAH,IAAA,CAAVG,UAAU;EAC/D,IAAMC,aAAa,GAAG,IAAAC,aAAM,EAAC,IAAI,CAAC;EAGlC,IAAAC,gBAAS,EAAC,YAAM;IACd,IAAIF,aAAa,CAACG,OAAO,EAAE;MACzBC,UAAU,CAAC,YAAM;QACfJ,aAAa,CAACG,OAAO,CAACE,WAAW,CAAC;UAAEC,QAAQ,EAAE;QAAK,CAAC,CAAC;MACvD,CAAC,EAAE,GAAG,CAAC;IACT;EACF,CAAC,EAAE,CAACT,QAAQ,EAAEC,QAAQ,CAAC,CAAC;EAExB,OACE,IAAAJ,WAAA,CAAAa,IAAA,EAAClB,YAAA,CAAAmB,UAAU;IACTC,GAAG,EAAET,aAAc;IACnBU,KAAK,EAAEC,cAAM,CAACC,SAAU;IACxBC,qBAAqB,EAAEF,cAAM,CAACG,gBAAiB;IAC/CC,4BAA4B,EAAE,KAAM;IAAAC,QAAA,GAGnCnB,QAAQ,CAACoB,GAAG,CAAC,UAACC,OAAO;MAAA,OACpB,IAAAxB,WAAA,CAAAyB,GAAA,EAAC7B,oBAAA,CAAA8B,OAAmB;QAElBF,OAAO,EAAEA,OAAQ;QACjBnB,UAAU,EAAEA;MAAW,GAFlBmB,OAAO,CAACG,EAGd,CAAC;IAAA,CACH,CAAC,EAGDvB,QAAQ,IAAI,IAAAJ,WAAA,CAAAyB,GAAA,EAAC3B,4BAAA,CAAA4B,OAA2B;MAACrB,UAAU,EAAEA;IAAW,CAAE,CAAC;EAAA,CAC1D,CAAC;AAEjB,CAAC;AAAC,IAAAuB,QAAA,GAAAC,OAAA,CAAAH,OAAA,GAEazB,uBAAuB","ignoreList":[]}