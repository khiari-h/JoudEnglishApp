8168a384e12fddbb87a00b92a4dc9873
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _NativeReanimated = _interopRequireDefault(require("./NativeReanimated"));
var _commonTypes = require("./commonTypes");
var _mutables = require("./mutables");
function initSensorData(sensorType) {
  if (sensorType === _commonTypes.SensorType.ROTATION) {
    return (0, _mutables.makeMutable)({
      qw: 0,
      qx: 0,
      qy: 0,
      qz: 0,
      yaw: 0,
      pitch: 0,
      roll: 0,
      interfaceOrientation: 0
    });
  } else {
    return (0, _mutables.makeMutable)({
      x: 0,
      y: 0,
      z: 0,
      interfaceOrientation: 0
    });
  }
}
var Sensor = exports.default = function () {
  function Sensor(sensorType, config) {
    (0, _classCallCheck2.default)(this, Sensor);
    this.listenersNumber = 0;
    this.sensorId = null;
    this.sensorType = sensorType;
    this.config = config;
    this.data = initSensorData(sensorType);
  }
  return (0, _createClass2.default)(Sensor, [{
    key: "register",
    value: function register(eventHandler) {
      var config = this.config;
      var sensorType = this.sensorType;
      this.sensorId = _NativeReanimated.default.registerSensor(sensorType, config.interval === 'auto' ? -1 : config.interval, config.iosReferenceFrame, eventHandler);
      return this.sensorId !== -1;
    }
  }, {
    key: "isRunning",
    value: function isRunning() {
      return this.sensorId !== -1 && this.sensorId !== null;
    }
  }, {
    key: "isAvailable",
    value: function isAvailable() {
      return this.sensorId !== -1;
    }
  }, {
    key: "getSharedValue",
    value: function getSharedValue() {
      return this.data;
    }
  }, {
    key: "unregister",
    value: function unregister() {
      if (this.sensorId !== null && this.sensorId !== -1) {
        _NativeReanimated.default.unregisterSensor(this.sensorId);
      }
      this.sensorId = null;
    }
  }]);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX05hdGl2ZVJlYW5pbWF0ZWQiLCJfY29tbW9uVHlwZXMiLCJfbXV0YWJsZXMiLCJpbml0U2Vuc29yRGF0YSIsInNlbnNvclR5cGUiLCJTZW5zb3JUeXBlIiwiUk9UQVRJT04iLCJtYWtlTXV0YWJsZSIsInF3IiwicXgiLCJxeSIsInF6IiwieWF3IiwicGl0Y2giLCJyb2xsIiwiaW50ZXJmYWNlT3JpZW50YXRpb24iLCJ4IiwieSIsInoiLCJTZW5zb3IiLCJjb25maWciLCJsaXN0ZW5lcnNOdW1iZXIiLCJzZW5zb3JJZCIsImRhdGEiLCJrZXkiLCJyZWdpc3RlciIsImV2ZW50SGFuZGxlciIsIk5hdGl2ZVJlYW5pbWF0ZWRNb2R1bGUiLCJyZWdpc3RlclNlbnNvciIsImludGVydmFsIiwiaW9zUmVmZXJlbmNlRnJhbWUiLCJpc1J1bm5pbmciLCJpc0F2YWlsYWJsZSIsImdldFNoYXJlZFZhbHVlIiwidW5yZWdpc3RlciIsInVucmVnaXN0ZXJTZW5zb3IiXSwic291cmNlcyI6WyJTZW5zb3IudHMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IE5hdGl2ZVJlYW5pbWF0ZWRNb2R1bGUgZnJvbSAnLi9OYXRpdmVSZWFuaW1hdGVkJztcbmltcG9ydCB0eXBlIHtcbiAgU2Vuc29yQ29uZmlnLFxuICBTaGFyZWRWYWx1ZSxcbiAgVmFsdWUzRCxcbiAgVmFsdWVSb3RhdGlvbixcbiAgU2hhcmVhYmxlUmVmLFxufSBmcm9tICcuL2NvbW1vblR5cGVzJztcbmltcG9ydCB7IFNlbnNvclR5cGUgfSBmcm9tICcuL2NvbW1vblR5cGVzJztcbmltcG9ydCB7IG1ha2VNdXRhYmxlIH0gZnJvbSAnLi9tdXRhYmxlcyc7XG5cbmZ1bmN0aW9uIGluaXRTZW5zb3JEYXRhKFxuICBzZW5zb3JUeXBlOiBTZW5zb3JUeXBlXG4pOiBTaGFyZWRWYWx1ZTxWYWx1ZTNEIHwgVmFsdWVSb3RhdGlvbj4ge1xuICBpZiAoc2Vuc29yVHlwZSA9PT0gU2Vuc29yVHlwZS5ST1RBVElPTikge1xuICAgIHJldHVybiBtYWtlTXV0YWJsZTxWYWx1ZTNEIHwgVmFsdWVSb3RhdGlvbj4oe1xuICAgICAgcXc6IDAsXG4gICAgICBxeDogMCxcbiAgICAgIHF5OiAwLFxuICAgICAgcXo6IDAsXG4gICAgICB5YXc6IDAsXG4gICAgICBwaXRjaDogMCxcbiAgICAgIHJvbGw6IDAsXG4gICAgICBpbnRlcmZhY2VPcmllbnRhdGlvbjogMCxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbWFrZU11dGFibGU8VmFsdWUzRCB8IFZhbHVlUm90YXRpb24+KHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwLFxuICAgICAgejogMCxcbiAgICAgIGludGVyZmFjZU9yaWVudGF0aW9uOiAwLFxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlbnNvciB7XG4gIHB1YmxpYyBsaXN0ZW5lcnNOdW1iZXIgPSAwO1xuICBwcml2YXRlIHNlbnNvcklkOiBudW1iZXIgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBzZW5zb3JUeXBlOiBTZW5zb3JUeXBlO1xuICBwcml2YXRlIGRhdGE6IFNoYXJlZFZhbHVlPFZhbHVlM0QgfCBWYWx1ZVJvdGF0aW9uPjtcbiAgcHJpdmF0ZSBjb25maWc6IFNlbnNvckNvbmZpZztcblxuICBjb25zdHJ1Y3RvcihzZW5zb3JUeXBlOiBTZW5zb3JUeXBlLCBjb25maWc6IFNlbnNvckNvbmZpZykge1xuICAgIHRoaXMuc2Vuc29yVHlwZSA9IHNlbnNvclR5cGU7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgdGhpcy5kYXRhID0gaW5pdFNlbnNvckRhdGEoc2Vuc29yVHlwZSk7XG4gIH1cblxuICByZWdpc3RlcihcbiAgICBldmVudEhhbmRsZXI6IFNoYXJlYWJsZVJlZjwoZGF0YTogVmFsdWUzRCB8IFZhbHVlUm90YXRpb24pID0+IHZvaWQ+XG4gICkge1xuICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY29uZmlnO1xuICAgIGNvbnN0IHNlbnNvclR5cGUgPSB0aGlzLnNlbnNvclR5cGU7XG4gICAgdGhpcy5zZW5zb3JJZCA9IE5hdGl2ZVJlYW5pbWF0ZWRNb2R1bGUucmVnaXN0ZXJTZW5zb3IoXG4gICAgICBzZW5zb3JUeXBlLFxuICAgICAgY29uZmlnLmludGVydmFsID09PSAnYXV0bycgPyAtMSA6IGNvbmZpZy5pbnRlcnZhbCxcbiAgICAgIGNvbmZpZy5pb3NSZWZlcmVuY2VGcmFtZSxcbiAgICAgIGV2ZW50SGFuZGxlclxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuc2Vuc29ySWQgIT09IC0xO1xuICB9XG5cbiAgaXNSdW5uaW5nKCkge1xuICAgIHJldHVybiB0aGlzLnNlbnNvcklkICE9PSAtMSAmJiB0aGlzLnNlbnNvcklkICE9PSBudWxsO1xuICB9XG5cbiAgaXNBdmFpbGFibGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2Vuc29ySWQgIT09IC0xO1xuICB9XG5cbiAgZ2V0U2hhcmVkVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YTtcbiAgfVxuXG4gIHVucmVnaXN0ZXIoKSB7XG4gICAgaWYgKHRoaXMuc2Vuc29ySWQgIT09IG51bGwgJiYgdGhpcy5zZW5zb3JJZCAhPT0gLTEpIHtcbiAgICAgIE5hdGl2ZVJlYW5pbWF0ZWRNb2R1bGUudW5yZWdpc3RlclNlbnNvcih0aGlzLnNlbnNvcklkKTtcbiAgICB9XG4gICAgdGhpcy5zZW5zb3JJZCA9IG51bGw7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFBQyxJQUFBQSxzQkFBQSxHQUFBQyxPQUFBO0FBQUFDLE1BQUEsQ0FBQUMsY0FBQSxDQUFBQyxPQUFBO0VBQUFDLEtBQUE7QUFBQTtBQUFBRCxPQUFBLENBQUFFLE9B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