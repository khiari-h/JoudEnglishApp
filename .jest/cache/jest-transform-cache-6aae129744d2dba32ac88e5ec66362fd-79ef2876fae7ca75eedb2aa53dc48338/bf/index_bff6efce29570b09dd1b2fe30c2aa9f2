9d53a50d0b01cf2d2d2f5b4157dc72bc
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _Card = _interopRequireDefault(require("../../../../components/ui/Card"));
var _ThemeContext = require("../../../../contexts/ThemeContext");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var HeroCardContent = function HeroCardContent(_ref) {
  var _lastActivity$metadat, _lastActivity$metadat2, _lastActivity$metadat3;
  var lastActivity = _ref.lastActivity,
    accentColor = _ref.accentColor,
    colors = _ref.colors,
    handleContinue = _ref.handleContinue,
    localStyles = _ref.localStyles;
  var currentWord = (((_lastActivity$metadat = lastActivity.metadata) == null ? void 0 : _lastActivity$metadat.word) || 0) + 1;
  var totalWords = ((_lastActivity$metadat2 = lastActivity.metadata) == null ? void 0 : _lastActivity$metadat2.totalWords) || 15;
  var percentage = Math.round(currentWord / totalWords * 100);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: localStyles.content,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: localStyles.header,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: localStyles.emoji,
        children: "\uD83D\uDCDA"
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [localStyles.label, {
          color: colors.textSecondary
        }],
        children: "Reprendre"
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [localStyles.title, {
        color: colors.text
      }],
      children: lastActivity.title
    }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
      style: [localStyles.subtitle, {
        color: colors.textSecondary
      }],
      children: ["Niv ", lastActivity.level || 1, typeof ((_lastActivity$metadat3 = lastActivity.metadata) == null ? void 0 : _lastActivity$metadat3.categoryIndex) === 'number' ? ` • Catégorie ${lastActivity.metadata.categoryIndex + 1}` : '', "\u2022 Mot ", currentWord, "/", totalWords]
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: localStyles.progressContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [localStyles.progressTrack, {
          backgroundColor: `${accentColor}15`
        }],
        children: (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [localStyles.progressFill, {
            width: `${Math.min(percentage, 100)}%`,
            backgroundColor: accentColor
          }]
        })
      }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: [localStyles.progressText, {
          color: accentColor
        }],
        children: [percentage, "%"]
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      style: [localStyles.button, {
        backgroundColor: accentColor
      }],
      onPress: handleContinue,
      activeOpacity: 0.8,
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: localStyles.buttonText,
        children: "Continuer \u25B6\uFE0F"
      })
    })]
  });
};
var HeroEmptyCardContent = function HeroEmptyCardContent(_ref2) {
  var accentColor = _ref2.accentColor,
    colors = _ref2.colors,
    handleLevelSelection = _ref2.handleLevelSelection,
    localStyles = _ref2.localStyles;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: localStyles.content,
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: localStyles.emoji,
      children: "\uD83D\uDE80"
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [localStyles.title, {
        color: colors.text
      }],
      children: "Commencer l'apprentissage"
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [localStyles.subtitle, {
        color: colors.textSecondary
      }],
      children: "Choisissez votre premier exercice"
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      style: [localStyles.button, {
        backgroundColor: accentColor
      }],
      onPress: handleLevelSelection,
      activeOpacity: 0.8,
      children: (0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: localStyles.buttonText,
        children: ["Commencer ", '>']
      })
    })]
  });
};
var HeroContinueSection = function HeroContinueSection(_ref3) {
  var lastActivity = _ref3.lastActivity,
    onPress = _ref3.onPress,
    _ref3$accentColor = _ref3.accentColor,
    accentColor = _ref3$accentColor === void 0 ? "#3B82F6" : _ref3$accentColor,
    _ref3$isLoading = _ref3.isLoading,
    isLoading = _ref3$isLoading === void 0 ? false : _ref3$isLoading;
  var themeContext = (0, _react.useContext)(_ThemeContext.ThemeContext);
  var colors = (themeContext == null ? void 0 : themeContext.colors) || {
    surface: "#FFFFFF",
    text: "#1F2937",
    textSecondary: "#6B7280"
  };
  var handleLevelSelection = (0, _react.useCallback)(function () {
    return onPress == null ? void 0 : onPress('levelSelection');
  }, [onPress]);
  var handleContinue = (0, _react.useCallback)(function () {
    return onPress == null ? void 0 : onPress(lastActivity);
  }, [onPress, lastActivity]);
  if (isLoading) {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.container,
      children: (0, _jsxRuntime.jsx)(_Card.default, {
        style: [_style.default.card, {
          backgroundColor: colors.surface
        }],
        children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: _style.default.loadingContainer,
          children: [(0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
            size: "small",
            color: accentColor
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [_style.default.loadingText, {
              color: colors.textSecondary
            }],
            children: "Chargement..."
          })]
        })
      })
    });
  }
  if (!lastActivity) {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.container,
      children: (0, _jsxRuntime.jsx)(_Card.default, {
        style: [_style.default.card, {
          backgroundColor: colors.surface
        }],
        children: (0, _jsxRuntime.jsx)(HeroEmptyCardContent, {
          accentColor: accentColor,
          colors: colors,
          handleLevelSelection: handleLevelSelection,
          localStyles: _style.default
        })
      })
    });
  }
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: _style.default.container,
    children: (0, _jsxRuntime.jsx)(_Card.default, {
      style: [_style.default.card, {
        backgroundColor: colors.surface
      }],
      children: (0, _jsxRuntime.jsx)(HeroCardContent, {
        lastActivity: lastActivity,
        accentColor: accentColor,
        colors: colors,
        handleContinue: handleContinue,
        localStyles: _style.default
      })
    })
  });
};
var _default = exports.default = HeroContinueSection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,