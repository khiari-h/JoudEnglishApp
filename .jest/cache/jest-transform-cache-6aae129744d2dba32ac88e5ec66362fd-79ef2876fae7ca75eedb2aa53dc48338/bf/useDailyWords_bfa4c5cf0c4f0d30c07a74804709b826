30a659a81b93fcb7907955558eeab1c0
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var useDailyWords = function useDailyWords() {
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    wordsToday = _useState2[0],
    setWordsToday = _useState2[1];
  var _useState3 = (0, _react.useState)(true),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isLoading = _useState4[0],
    setIsLoading = _useState4[1];
  var getTodayString = function getTodayString() {
    return new Date().toDateString();
  };
  var handleStorageError = function handleStorageError(error, operation) {
    var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'unknown';
    console.warn(`Storage error in ${operation} for level ${level}:`, error);
  };
  var calculateDailyWords = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      setIsLoading(true);
      var today = getTodayString();
      var todayCount = 0;
      var levels = ['1', '2', '3', '4', '5', '6'];
      var _loop = function* _loop() {
        try {
          var storageKey = `vocabulary_${level}_classic`;
          var savedData = yield _asyncStorage.default.getItem(storageKey);
          if (savedData) {
            var data = JSON.parse(savedData);
            var completedWords = data.completedWords || {};
            todayCount += Object.keys(completedWords).reduce(function (acc, categoryIndex) {
              var wordsInCategory = completedWords[categoryIndex] || [];
              return acc + wordsInCategory.reduce(function (catAcc, word) {
                if (typeof word === 'object' && word.timestamp) {
                  var wordDate = new Date(word.timestamp).toDateString();
                  if (wordDate === today) {
                    return catAcc + 1;
                  }
                }
                return catAcc;
              }, 0);
            }, 0);
          }
        } catch (error) {
          handleStorageError(error, 'calculateDailyWords', level);
        }
      };
      for (var level of levels) {
        yield* _loop();
      }
      setWordsToday(todayCount);
    } catch (error) {
      console.error('Error calculating daily words:', error);
      setWordsToday(0);
    } finally {
      setIsLoading(false);
    }
  }), []);
  (0, _react.useEffect)(function () {
    calculateDailyWords();
  }, [calculateDailyWords]);
  (0, _react.useEffect)(function () {
    var now = new Date();
    var tomorrow = new Date(now);
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(0, 0, 0, 0);
    var timeUntilMidnight = tomorrow.getTime() - now.getTime();
    var midnightTimer = setTimeout(function () {
      calculateDailyWords();
      var dailyInterval = setInterval(calculateDailyWords, 24 * 60 * 60 * 1000);
      return function () {
        return clearInterval(dailyInterval);
      };
    }, timeUntilMidnight);
    return function () {
      return clearTimeout(midnightTimer);
    };
  }, [calculateDailyWords]);
  var refresh = (0, _react.useCallback)(function () {
    calculateDailyWords();
  }, [calculateDailyWords]);
  return {
    wordsToday: wordsToday || 0,
    isLoading: isLoading,
    refresh: refresh
  };
};
var _default = exports.default = useDailyWords;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,