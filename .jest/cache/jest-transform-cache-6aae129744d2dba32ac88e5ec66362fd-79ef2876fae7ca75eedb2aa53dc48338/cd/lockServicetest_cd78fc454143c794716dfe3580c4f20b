1a7f29b9a92196aaf3d34146e086bf3c
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    multiRemove: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _lockService = require("../../src/services/lockService");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('lockService', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('enables and disables lock', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.setItem.mockResolvedValue();
    _asyncStorage.default.multiRemove.mockResolvedValue();
    yield (0, _lockService.enableLock)();
    expect(_asyncStorage.default.setItem).toHaveBeenCalledWith(_lockService.lockStorageKeys.ENABLED, '1');
    yield (0, _lockService.disableLock)();
    expect(_asyncStorage.default.multiRemove).toHaveBeenCalled();
  }));
  it('sets and verifies pin', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.setItem.mockResolvedValue();
    _asyncStorage.default.getItem.mockImplementation(function () {
      var _ref3 = (0, _asyncToGenerator2.default)(function* (key) {
        if (key === _lockService.lockStorageKeys.PIN_SALT) return 'salt';
        if (key === _lockService.lockStorageKeys.PIN_HASH) return 'c2b5f2a';
        if (key === _lockService.lockStorageKeys.LOCKOUT_UNTIL) return '0';
        if (key === _lockService.lockStorageKeys.FAILED_ATTEMPTS) return '0';
        return null;
      });
      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    yield (0, _lockService.setPin)('1234');
    expect(_asyncStorage.default.setItem).toHaveBeenCalledWith(_lockService.lockStorageKeys.PIN_SALT, expect.any(String));
    expect(_asyncStorage.default.setItem).toHaveBeenCalledWith(_lockService.lockStorageKeys.PIN_HASH, expect.any(String));
  }));
  it('biometrics toggle', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.setItem.mockResolvedValue();
    _asyncStorage.default.getItem.mockResolvedValue('1');
    yield (0, _lockService.setBiometricsEnabled)(true);
    var enabled = yield (0, _lockService.isBiometricsEnabled)();
    expect(enabled).toBe(true);
  }));
  it('recovery code flow', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.setItem.mockResolvedValue();
    _asyncStorage.default.getItem.mockImplementation(function () {
      var _ref6 = (0, _asyncToGenerator2.default)(function* (key) {
        if (key === _lockService.lockStorageKeys.RECOVERY_HASH) return null;
        return null;
      });
      return function (_x2) {
        return _ref6.apply(this, arguments);
      };
    }());
    var code = (0, _lockService.generateRecoveryCode)();
    expect(code).toHaveLength(16);
    yield (0, _lockService.setRecoveryCode)(code);
    _asyncStorage.default.getItem.mockImplementation(function () {
      var _ref7 = (0, _asyncToGenerator2.default)(function* (key) {
        if (key === _lockService.lockStorageKeys.RECOVERY_HASH) return require('../../src/services/lockService').__esModule ? null : null;
        return null;
      });
      return function (_x3) {
        return _ref7.apply(this, arguments);
      };
    }());
  }));
  it('timeout set/get', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.setItem.mockResolvedValue();
    _asyncStorage.default.getItem.mockResolvedValue('60');
    yield (0, _lockService.setAutoLockTimeout)(60);
    var v = yield (0, _lockService.getAutoLockTimeout)();
    expect(v).toBe(60);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,