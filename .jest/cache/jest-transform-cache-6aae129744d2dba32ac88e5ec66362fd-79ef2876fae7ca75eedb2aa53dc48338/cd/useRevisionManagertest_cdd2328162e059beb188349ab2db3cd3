0ffb50eb387a1e3a3e3c1747f266907a
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useRevisionManager = _interopRequireDefault(require("../../src/hooks/useRevisionManager"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useRevisionManager', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  it('devrait initialiser avec les valeurs par défaut', function () {
    _asyncStorage.default.getItem.mockResolvedValue(null);
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useRevisionManager.default)();
      }),
      result = _renderHook.result;
    expect(result.current.totalWordsLearned).toBe(0);
    expect(result.current.nextRevisionAt).toBe(50);
    expect(result.current.shouldShowRevision).toBe(false);
    expect(result.current.isRevisionDisabled).toBe(false);
    expect(result.current.isLoading).toBe(true);
  });
  it('devrait charger les données sauvegardées', (0, _asyncToGenerator2.default)(function* () {
    var mockSavedData = {
      nextRevisionAt: 100,
      lastRevisionWords: [{
        word: 'test'
      }],
      revisionHistory: [{
        timestamp: 123456789
      }],
      isRevisionDisabled: true
    };
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      if (key === 'revision_manager_data') {
        return Promise.resolve(JSON.stringify(mockSavedData));
      }
      return Promise.resolve(null);
    });
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useRevisionManager.default)();
      }),
      result = _renderHook2.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.nextRevisionAt).toBe(100);
      expect(result.current.isRevisionDisabled).toBe(true);
      expect(result.current.isLoading).toBe(false);
    });
  }));
  it('devrait gérer les choix de révision', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValue(null);
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useRevisionManager.default)();
      }),
      result = _renderHook3.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      var response = yield result.current.handleRevisionChoice('disable');
      expect(response.action).toBe('disabled');
    }));
    expect(result.current.isRevisionDisabled).toBe(true);
  }));
  it('devrait avoir toutes les fonctions nécessaires', function () {
    _asyncStorage.default.getItem.mockResolvedValue(null);
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useRevisionManager.default)();
      }),
      result = _renderHook4.result;
    expect(typeof result.current.handleRevisionChoice).toBe('function');
    expect(typeof result.current.markRevisionCompleted).toBe('function');
    expect(typeof result.current.enableRevisions).toBe('function');
    expect(typeof result.current.calculateTotalWords).toBe('function');
    expect(typeof result.current.selectRevisionWords).toBe('function');
    expect(typeof result.current.getRevisionStats).toBe('function');
    expect(result.current.config).toBeDefined();
  });
  it('devrait calculer les statistiques', function () {
    _asyncStorage.default.getItem.mockResolvedValue(null);
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useRevisionManager.default)();
      }),
      result = _renderHook5.result;
    var stats = result.current.getRevisionStats();
    expect(stats.totalRevisions).toBe(0);
    expect(stats.averageScore).toBe(0);
    expect(stats.lastRevision).toBeNull();
    expect(stats.streak).toBe(0);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJnZXRJdGVtIiwiamVzdCIsImZuIiwic2V0SXRlbSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX3JlYWN0TmF0aXZlIiwiX2FzeW5jU3RvcmFnZSIsIl91c2VSZXZpc2lvbk1hbmFnZXIiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJ1c2VGYWtlVGltZXJzIiwiYWZ0ZXJFYWNoIiwidXNlUmVhbFRpbWVycyIsIml0IiwiQXN5bmNTdG9yYWdlIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJfcmVuZGVySG9vayIsInJlbmRlckhvb2siLCJ1c2VSZXZpc2lvbk1hbmFnZXIiLCJyZXN1bHQiLCJleHBlY3QiLCJjdXJyZW50IiwidG90YWxXb3Jkc0xlYXJuZWQiLCJ0b0JlIiwibmV4dFJldmlzaW9uQXQiLCJzaG91bGRTaG93UmV2aXNpb24iLCJpc1JldmlzaW9uRGlzYWJsZWQiLCJpc0xvYWRpbmciLCJkZWZhdWx0IiwibW9ja1NhdmVkRGF0YSIsImxhc3RSZXZpc2lvbldvcmRzIiwid29yZCIsInJldmlzaW9uSGlzdG9yeSIsInRpbWVzdGFtcCIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsImtleSIsIlByb21pc2UiLCJyZXNvbHZlIiwiSlNPTiIsInN0cmluZ2lmeSIsIl9yZW5kZXJIb29rMiIsIndhaXRGb3IiLCJfcmVuZGVySG9vazMiLCJhY3QiLCJyZXNwb25zZSIsImhhbmRsZVJldmlzaW9uQ2hvaWNlIiwiYWN0aW9uIiwiX3JlbmRlckhvb2s0IiwibWFya1JldmlzaW9uQ29tcGxldGVkIiwiZW5hYmxlUmV2aXNpb25zIiwiY2FsY3VsYXRlVG90YWxXb3JkcyIsInNlbGVjdFJldmlzaW9uV29yZHMiLCJnZXRSZXZpc2lvblN0YXRzIiwiY29uZmlnIiwidG9CZURlZmluZWQiLCJfcmVuZGVySG9vazUiLCJzdGF0cyIsInRvdGFsUmV2aXNpb25zIiwiYXZlcmFnZVNjb3JlIiwibGFzdFJldmlzaW9uIiwidG9CZU51bGwiLCJzdHJlYWsiXSwic291cmNlcyI6WyJ1c2VSZXZpc2lvbk1hbmFnZXIudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBfX3Rlc3RzX18vaG9va3MvdXNlUmV2aXNpb25NYW5hZ2VyLnRlc3QuanNcbmltcG9ydCB7IHJlbmRlckhvb2ssIGFjdCwgd2FpdEZvciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCBBc3luY1N0b3JhZ2UgZnJvbSAnQHJlYWN0LW5hdGl2ZS1hc3luYy1zdG9yYWdlL2FzeW5jLXN0b3JhZ2UnO1xuaW1wb3J0IHVzZVJldmlzaW9uTWFuYWdlciBmcm9tICcuLi8uLi9zcmMvaG9va3MvdXNlUmV2aXNpb25NYW5hZ2VyJztcblxuamVzdC5tb2NrKCdAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZScsICgpID0+ICh7XG4gIGdldEl0ZW06IGplc3QuZm4oKSxcbiAgc2V0SXRlbTogamVzdC5mbigpLFxufSkpO1xuXG5kZXNjcmliZSgndXNlUmV2aXNpb25NYW5hZ2VyJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICBqZXN0LnVzZUZha2VUaW1lcnMoKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LnVzZVJlYWxUaW1lcnMoKTtcbiAgfSk7XG5cbiAgaXQoJ2RldnJhaXQgaW5pdGlhbGlzZXIgYXZlYyBsZXMgdmFsZXVycyBwYXIgZMOpZmF1dCcsICgpID0+IHtcbiAgICBBc3luY1N0b3JhZ2UuZ2V0SXRlbS5tb2NrUmVzb2x2ZWRWYWx1ZShudWxsKTtcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VSZXZpc2lvbk1hbmFnZXIoKSk7XG5cbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQudG90YWxXb3Jkc0xlYXJuZWQpLnRvQmUoMCk7XG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50Lm5leHRSZXZpc2lvbkF0KS50b0JlKDUwKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuc2hvdWxkU2hvd1JldmlzaW9uKS50b0JlKGZhbHNlKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNSZXZpc2lvbkRpc2FibGVkKS50b0JlKGZhbHNlKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNMb2FkaW5nKS50b0JlKHRydWUpO1xuICB9KTtcblxuICBpdCgnZGV2cmFpdCBjaGFyZ2VyIGxlcyBkb25uw6llcyBzYXV2ZWdhcmTDqWVzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tTYXZlZERhdGEgPSB7XG4gICAgICBuZXh0UmV2aXNpb25BdDogMTAwLFxuICAgICAgbGFzdFJldmlzaW9uV29yZHM6IFt7IHdvcmQ6ICd0ZXN0JyB9XSxcbiAgICAgIHJldmlzaW9uSGlzdG9yeTogW3sgdGltZXN0YW1wOiAxMjM0NTY3ODkgfV0sXG4gICAgICBpc1JldmlzaW9uRGlzYWJsZWQ6IHRydWVcbiAgICB9O1xuXG4gICAgQXN5bmNTdG9yYWdlLmdldEl0ZW0ubW9ja0ltcGxlbWVudGF0aW9uKChrZXkpID0+IHtcbiAgICAgIGlmIChrZXkgPT09ICdyZXZpc2lvbl9tYW5hZ2VyX2RhdGEnKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoSlNPTi5zdHJpbmdpZnkobW9ja1NhdmVkRGF0YSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVJldmlzaW9uTWFuYWdlcigpKTtcblxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50Lm5leHRSZXZpc2lvbkF0KS50b0JlKDEwMCk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNSZXZpc2lvbkRpc2FibGVkKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzTG9hZGluZykudG9CZShmYWxzZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdkZXZyYWl0IGfDqXJlciBsZXMgY2hvaXggZGUgcsOpdmlzaW9uJywgYXN5bmMgKCkgPT4ge1xuICAgIEFzeW5jU3RvcmFnZS5nZXRJdGVtLm1vY2tSZXNvbHZlZFZhbHVlKG51bGwpO1xuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVJldmlzaW9uTWFuYWdlcigpKTtcblxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzTG9hZGluZykudG9CZShmYWxzZSk7XG4gICAgfSk7XG5cbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXN1bHQuY3VycmVudC5oYW5kbGVSZXZpc2lvbkNob2ljZSgnZGlzYWJsZScpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmFjdGlvbikudG9CZSgnZGlzYWJsZWQnKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc1JldmlzaW9uRGlzYWJsZWQpLnRvQmUodHJ1ZSk7XG4gIH0pO1xuXG4gIGl0KCdkZXZyYWl0IGF2b2lyIHRvdXRlcyBsZXMgZm9uY3Rpb25zIG7DqWNlc3NhaXJlcycsICgpID0+IHtcbiAgICBBc3luY1N0b3JhZ2UuZ2V0SXRlbS5tb2NrUmVzb2x2ZWRWYWx1ZShudWxsKTtcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VSZXZpc2lvbk1hbmFnZXIoKSk7XG5cbiAgICBleHBlY3QodHlwZW9mIHJlc3VsdC5jdXJyZW50LmhhbmRsZVJldmlzaW9uQ2hvaWNlKS50b0JlKCdmdW5jdGlvbicpO1xuICAgIGV4cGVjdCh0eXBlb2YgcmVzdWx0LmN1cnJlbnQubWFya1JldmlzaW9uQ29tcGxldGVkKS50b0JlKCdmdW5jdGlvbicpO1xuICAgIGV4cGVjdCh0eXBlb2YgcmVzdWx0LmN1cnJlbnQuZW5hYmxlUmV2aXNpb25zKS50b0JlKCdmdW5jdGlvbicpO1xuICAgIGV4cGVjdCh0eXBlb2YgcmVzdWx0LmN1cnJlbnQuY2FsY3VsYXRlVG90YWxXb3JkcykudG9CZSgnZnVuY3Rpb24nKTtcbiAgICBleHBlY3QodHlwZW9mIHJlc3VsdC5jdXJyZW50LnNlbGVjdFJldmlzaW9uV29yZHMpLnRvQmUoJ2Z1bmN0aW9uJyk7XG4gICAgZXhwZWN0KHR5cGVvZiByZXN1bHQuY3VycmVudC5nZXRSZXZpc2lvblN0YXRzKS50b0JlKCdmdW5jdGlvbicpO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5jb25maWcpLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuXG4gIGl0KCdkZXZyYWl0IGNhbGN1bGVyIGxlcyBzdGF0aXN0aXF1ZXMnLCAoKSA9PiB7XG4gICAgQXN5bmNTdG9yYWdlLmdldEl0ZW0ubW9ja1Jlc29sdmVkVmFsdWUobnVsbCk7XG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlUmV2aXNpb25NYW5hZ2VyKCkpO1xuXG4gICAgY29uc3Qgc3RhdHMgPSByZXN1bHQuY3VycmVudC5nZXRSZXZpc2lvblN0YXRzKCk7XG5cbiAgICBleHBlY3Qoc3RhdHMudG90YWxSZXZpc2lvbnMpLnRvQmUoMCk7XG4gICAgZXhwZWN0KHN0YXRzLmF2ZXJhZ2VTY29yZSkudG9CZSgwKTtcbiAgICBleHBlY3Qoc3RhdHMubGFzdFJldmlzaW9uKS50b0JlTnVsbCgpO1xuICAgIGV4cGVjdChzdGF0cy5zdHJlYWspLnRvQmUoMCk7XG4gIH0pO1xufSk7Il0sIm1hcHBpbmdzIjoiQUFLQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsMkNBQTJDLEVBQUU7RUFBQSxPQUFPO0lBQzVEQyxPQUFPLEVBQUVDLElBQUksQ0FBQ0MsRUFB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