80acd581ea4bcf06a541365fc0a69d8d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _ExerciseCard = _interopRequireDefault(require("../../../src/components/exercise-common/ExerciseCard"));
var _jsxRuntime = require("react/jsx-runtime");
describe('ExerciseCard', function () {
  var defaultProps = {
    title: 'Vocabulary Practice',
    description: 'Expand your word knowledge',
    icon: 'ðŸ“š',
    onPress: jest.fn()
  };
  afterEach(function () {
    jest.clearAllMocks();
  });
  it('renders the basic card information correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, defaultProps))),
      getByText = _render.getByText;
    expect(getByText('Vocabulary Practice')).toBeTruthy();
    expect(getByText('Expand your word knowledge')).toBeTruthy();
    expect(getByText('ðŸ“š')).toBeTruthy();
  });
  it('calls onPress when the card is pressed', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, defaultProps))),
      getByText = _render2.getByText;
    _reactNative.fireEvent.press(getByText('Vocabulary Practice'));
    expect(defaultProps.onPress).toHaveBeenCalledTimes(1);
  });
  it('calls onPress when the "Commencer" button is pressed', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, defaultProps))),
      getByText = _render3.getByText;
    _reactNative.fireEvent.press(getByText('Commencer'));
    expect(defaultProps.onPress).toHaveBeenCalledTimes(1);
  });
  it('displays the progress bar when progress is greater than 0', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, defaultProps, {
        progress: 50
      }))),
      getByText = _render4.getByText,
      getByTestId = _render4.getByTestId;
    expect(getByText('50%')).toBeTruthy();
    var progressFill = getByTestId('progress-fill');
    var flatStyle = _reactNative2.StyleSheet.flatten(progressFill.props.style);
    expect(flatStyle.width).toBe('50%');
  });
  it('does not display the progress bar when progress is 0', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, defaultProps, {
        progress: 0
      }))),
      queryByText = _render5.queryByText,
      queryByTestId = _render5.queryByTestId;
    expect(queryByText('50%')).toBeNull();
    expect(queryByTestId('progress-fill')).toBeNull();
  });
  it('displays the "Nouveau" badge when isNew is true and progress is 0', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, defaultProps, {
        isNew: true,
        progress: 0
      }))),
      getByText = _render6.getByText;
    expect(getByText('Nouveau')).toBeTruthy();
  });
  it('does not display the "Nouveau" badge when progress is greater than 0', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, defaultProps, {
        isNew: true,
        progress: 50
      }))),
      queryByText = _render7.queryByText;
    expect(queryByText('Nouveau')).toBeNull();
  });
  it('does not display the "Nouveau" badge when isNew is false', function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, defaultProps, {
        isNew: false
      }))),
      queryByText = _render8.queryByText;
    expect(queryByText('Nouveau')).toBeNull();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9yZWFjdE5hdGl2ZTIiLCJfRXhlcmNpc2VDYXJkIiwiX2pzeFJ1bnRpbWUiLCJkZXNjcmliZSIsImRlZmF1bHRQcm9wcyIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJpY29uIiwib25QcmVzcyIsImplc3QiLCJmbiIsImFmdGVyRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJpdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJkZWZhdWx0IiwiT2JqZWN0IiwiYXNzaWduIiwiZ2V0QnlUZXh0IiwiZXhwZWN0IiwidG9CZVRydXRoeSIsIl9yZW5kZXIyIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJfcmVuZGVyMyIsIl9yZW5kZXI0IiwicHJvZ3Jlc3MiLCJnZXRCeVRlc3RJZCIsInByb2dyZXNzRmlsbCIsImZsYXRTdHlsZSIsIlN0eWxlU2hlZXQiLCJmbGF0dGVuIiwicHJvcHMiLCJzdHlsZSIsIndpZHRoIiwidG9CZSIsIl9yZW5kZXI1IiwicXVlcnlCeVRleHQiLCJxdWVyeUJ5VGVzdElkIiwidG9CZU51bGwiLCJfcmVuZGVyNiIsImlzTmV3IiwiX3JlbmRlcjciLCJfcmVuZGVyOCJdLCJzb3VyY2VzIjpbIkV4ZXJjaXNlQ2FyZC50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuLy8gX190ZXN0c19fL2NvbXBvbmVudHMvZXhlcmNpc2UtY29tbW9uL0V4ZXJjaXNlQ2FyZC50ZXN0LmpzXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBTdHlsZVNoZWV0IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBFeGVyY2lzZUNhcmQgZnJvbSAnLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvZXhlcmNpc2UtY29tbW9uL0V4ZXJjaXNlQ2FyZCc7XG5cbmRlc2NyaWJlKCdFeGVyY2lzZUNhcmQnLCAoKSA9PiB7XG4gIGNvbnN0IGRlZmF1bHRQcm9wcyA9IHtcbiAgICB0aXRsZTogJ1ZvY2FidWxhcnkgUHJhY3RpY2UnLFxuICAgIGRlc2NyaXB0aW9uOiAnRXhwYW5kIHlvdXIgd29yZCBrbm93bGVkZ2UnLFxuICAgIGljb246ICfwn5OaJyxcbiAgICBvblByZXNzOiBqZXN0LmZuKCksXG4gIH07XG5cbiAgLy8gTmV0dG95ZXIgbGVzIG1vY2tzIGFwcsOocyBjaGFxdWUgdGVzdFxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICB9KTtcblxuICBpdCgncmVuZGVycyB0aGUgYmFzaWMgY2FyZCBpbmZvcm1hdGlvbiBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcig8RXhlcmNpc2VDYXJkIHsuLi5kZWZhdWx0UHJvcHN9IC8+KTtcblxuICAgIGV4cGVjdChnZXRCeVRleHQoJ1ZvY2FidWxhcnkgUHJhY3RpY2UnKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ0V4cGFuZCB5b3VyIHdvcmQga25vd2xlZGdlJykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCfwn5OaJykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ2NhbGxzIG9uUHJlc3Mgd2hlbiB0aGUgY2FyZCBpcyBwcmVzc2VkJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPEV4ZXJjaXNlQ2FyZCB7Li4uZGVmYXVsdFByb3BzfSAvPik7XG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgnVm9jYWJ1bGFyeSBQcmFjdGljZScpKTtcbiAgICBleHBlY3QoZGVmYXVsdFByb3BzLm9uUHJlc3MpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgfSk7XG5cbiAgaXQoJ2NhbGxzIG9uUHJlc3Mgd2hlbiB0aGUgXCJDb21tZW5jZXJcIiBidXR0b24gaXMgcHJlc3NlZCcsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKDxFeGVyY2lzZUNhcmQgey4uLmRlZmF1bHRQcm9wc30gLz4pO1xuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ0NvbW1lbmNlcicpKTtcbiAgICBleHBlY3QoZGVmYXVsdFByb3BzLm9uUHJlc3MpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgfSk7XG5cbiAgaXQoJ2Rpc3BsYXlzIHRoZSBwcm9ncmVzcyBiYXIgd2hlbiBwcm9ncmVzcyBpcyBncmVhdGVyIHRoYW4gMCcsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCwgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICAgIDxFeGVyY2lzZUNhcmQgey4uLmRlZmF1bHRQcm9wc30gcHJvZ3Jlc3M9ezUwfSAvPlxuICAgICk7XG5cbiAgICBleHBlY3QoZ2V0QnlUZXh0KCc1MCUnKSkudG9CZVRydXRoeSgpO1xuICAgIGNvbnN0IHByb2dyZXNzRmlsbCA9IGdldEJ5VGVzdElkKCdwcm9ncmVzcy1maWxsJyk7XG4gICAgY29uc3QgZmxhdFN0eWxlID0gU3R5bGVTaGVldC5mbGF0dGVuKHByb2dyZXNzRmlsbC5wcm9wcy5zdHlsZSk7XG4gICAgZXhwZWN0KGZsYXRTdHlsZS53aWR0aCkudG9CZSgnNTAlJyk7XG4gIH0pO1xuXG4gIGl0KCdkb2VzIG5vdCBkaXNwbGF5IHRoZSBwcm9ncmVzcyBiYXIgd2hlbiBwcm9ncmVzcyBpcyAwJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgcXVlcnlCeVRleHQsIHF1ZXJ5QnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICAgIDxFeGVyY2lzZUNhcmQgey4uLmRlZmF1bHRQcm9wc30gcHJvZ3Jlc3M9ezB9IC8+XG4gICAgKTtcblxuICAgIGV4cGVjdChxdWVyeUJ5VGV4dCgnNTAlJykpLnRvQmVOdWxsKCk7XG4gICAgZXhwZWN0KHF1ZXJ5QnlUZXN0SWQoJ3Byb2dyZXNzLWZpbGwnKSkudG9CZU51bGwoKTtcbiAgfSk7XG5cbiAgaXQoJ2Rpc3BsYXlzIHRoZSBcIk5vdXZlYXVcIiBiYWRnZSB3aGVuIGlzTmV3IGlzIHRydWUgYW5kIHByb2dyZXNzIGlzIDAnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgIDxFeGVyY2lzZUNhcmQgey4uLmRlZmF1bHRQcm9wc30gaXNOZXc9e3RydWV9IHByb2dyZXNzPXswfSAvPlxuICAgICk7XG5cbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdOb3V2ZWF1JykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ2RvZXMgbm90IGRpc3BsYXkgdGhlIFwiTm91dmVhdVwiIGJhZGdlIHdoZW4gcHJvZ3Jlc3MgaXMgZ3JlYXRlciB0aGFuIDAnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBxdWVyeUJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgPEV4ZXJjaXNlQ2FyZCB7Li4uZGVmYXVsdFByb3BzfSBpc05ldz17dHJ1ZX0gcHJvZ3Jlc3M9ezUwfSAvPlxuICAgICk7XG5cbiAgICBleHBlY3QocXVlcnlCeVRleHQoJ05vdXZlYXUnKSkudG9CZU51bGwoKTtcbiAgfSk7XG5cbiAgaXQoJ2RvZXMgbm90IGRpc3BsYXkgdGhlIFwiTm91dmVhdVwiIGJhZGdlIHdoZW4gaXNOZXcgaXMgZmFsc2UnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBxdWVyeUJ5VGV4dCB9ID0gcmVuZGVyKDxFeGVyY2lzZUNhcmQgey4uLmRlZmF1bHRQcm9wc30gaXNOZXc9e2ZhbHNlfSAvPik7XG5cbiAgICBleHBlY3QocXVlcnlCeVRleHQoJ05vdXZlYXUnKSkudG9CZU51bGwoKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IjtBQUVBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElB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