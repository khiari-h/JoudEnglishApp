139712cf27be963bbfc558f975d057d9
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getB1ExercisesByTopic = exports.getB1ExercisesByDifficulty = exports.getB1ExerciseById = exports.getAllB1Exercises = exports.default = exports.b1Metadata = void 0;
Object.defineProperty(exports, "readingQuestionsB1", {
  enumerable: true,
  get: function get() {
    return _readingQuestionsB.default;
  }
});
Object.defineProperty(exports, "readingTextsB1", {
  enumerable: true,
  get: function get() {
    return _readingTextsB.default;
  }
});
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _readingTextsB = _interopRequireDefault(require("./categories/readingTextsB1.js"));
var _readingQuestionsB = _interopRequireDefault(require("./categories/readingQuestionsB1.js"));
var combineTextWithQuestions = function combineTextWithQuestions(textId) {
  var text = _readingTextsB.default.find(function (t) {
    return t.id === textId;
  });
  var questions = _readingQuestionsB.default.find(function (q) {
    return q.textId === textId;
  });
  if (!text || !questions) {
    return null;
  }
  return Object.assign({}, text, {
    questions: questions.questions
  });
};
var getAllB1Exercises = exports.getAllB1Exercises = function getAllB1Exercises() {
  return _readingTextsB.default.map(function (text) {
    return combineTextWithQuestions(text.id);
  }).filter(Boolean);
};
var getB1ExerciseById = exports.getB1ExerciseById = function getB1ExerciseById(textId) {
  return combineTextWithQuestions(textId);
};
var getB1ExercisesByDifficulty = exports.getB1ExercisesByDifficulty = function getB1ExercisesByDifficulty(difficulty) {
  var filteredTexts = _readingTextsB.default.filter(function (text) {
    return text.difficulty === difficulty;
  });
  return filteredTexts.map(function (text) {
    return combineTextWithQuestions(text.id);
  }).filter(Boolean);
};
var getB1ExercisesByTopic = exports.getB1ExercisesByTopic = function getB1ExercisesByTopic(topic) {
  var filteredTexts = _readingTextsB.default.filter(function (text) {
    var _text$topics;
    return (_text$topics = text.topics) == null ? void 0 : _text$topics.includes(topic);
  });
  return filteredTexts.map(function (text) {
    return combineTextWithQuestions(text.id);
  }).filter(Boolean);
};
var b1Metadata = exports.b1Metadata = {
  level: "B1",
  totalTexts: _readingTextsB.default.length,
  totalQuestions: _readingQuestionsB.default.reduce(function (sum, q) {
    return sum + q.questions.length;
  }, 0),
  averageWordCount: Math.round(_readingTextsB.default.reduce(function (sum, text) {
    return sum + text.wordCount;
  }, 0) / _readingTextsB.default.length),
  difficulties: (0, _toConsumableArray2.default)(new Set(_readingTextsB.default.map(function (text) {
    return text.difficulty;
  }))).sort(),
  topics: (0, _toConsumableArray2.default)(new Set(_readingTextsB.default.flatMap(function (text) {
    return text.topics;
  }))).sort(),
  description: "Intermediate level reading comprehension exercises focusing on opinions, abstract topics, and complex ideas with detailed explanations."
};
var readingB1Data = {
  metadata: b1Metadata,
  exercises: getAllB1Exercises(),
  getAll: getAllB1Exercises,
  getById: getB1ExerciseById,
  getByDifficulty: getB1ExercisesByDifficulty,
  getByTopic: getB1ExercisesByTopic,
  texts: _readingTextsB.default,
  questions: _readingQuestionsB.default
};
var _default = exports.default = readingB1Data;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,