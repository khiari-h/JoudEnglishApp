b00599ca5ab657b3389eea735dc6c21e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _CurrentLevelContext = require("../../../src/contexts/CurrentLevelContext");
var _jsxRuntime = require("react/jsx-runtime");
var TestComponent = function TestComponent() {
  var _useCurrentLevel = (0, _CurrentLevelContext.useCurrentLevel)(),
    currentLevel = _useCurrentLevel.currentLevel,
    setCurrentLevel = _useCurrentLevel.setCurrentLevel;
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "current-level",
      children: currentLevel
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Set Level 2",
      onPress: function onPress() {
        return setCurrentLevel('2');
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Set Level 3",
      onPress: function onPress() {
        return setCurrentLevel('3');
      }
    })]
  });
};
var ComponentWithoutProvider = function ComponentWithoutProvider() {
  (0, _CurrentLevelContext.useCurrentLevel)();
  return null;
};
describe('CurrentLevelContext', function () {
  it('provides initial level and allows updating it', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CurrentLevelContext.CurrentLevelProvider, {
      initialLevel: "1",
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    expect(_reactNative.screen.getByTestId('current-level').props.children).toBe('1');
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Level 2'));
    expect(_reactNative.screen.getByTestId('current-level').props.children).toBe('2');
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Level 3'));
    expect(_reactNative.screen.getByTestId('current-level').props.children).toBe('3');
  });
  it('defaults to level "1" if no initialLevel is provided', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CurrentLevelContext.CurrentLevelProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    expect(_reactNative.screen.getByTestId('current-level').props.children).toBe('1');
  });
  it('throws an error if useCurrentLevel is used outside of CurrentLevelProvider', function () {
    var originalError = console.error;
    console.error = jest.fn();
    expect(function () {
      return (0, _reactNative.render)((0, _jsxRuntime.jsx)(ComponentWithoutProvider, {}));
    }).toThrow("useCurrentLevel doit être utilisé dans CurrentLevelProvider");
    console.error = originalError;
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9yZWFjdE5hdGl2ZTIiLCJfQ3VycmVudExldmVsQ29udGV4dCIsIl9qc3hSdW50aW1lIiwiVGVzdENvbXBvbmVudCIsIl91c2VDdXJyZW50TGV2ZWwiLCJ1c2VDdXJyZW50TGV2ZWwiLCJjdXJyZW50TGV2ZWwiLCJzZXRDdXJyZW50TGV2ZWwiLCJqc3hzIiwiRnJhZ21lbnQiLCJjaGlsZHJlbiIsImpzeCIsIlRleHQiLCJ0ZXN0SUQiLCJCdXR0b24iLCJ0aXRsZSIsIm9uUHJlc3MiLCJDb21wb25lbnRXaXRob3V0UHJvdmlkZXIiLCJkZXNjcmliZSIsIml0IiwicmVuZGVyIiwiQ3VycmVudExldmVsUHJvdmlkZXIiLCJpbml0aWFsTGV2ZWwiLCJleHBlY3QiLCJzY3JlZW4iLCJnZXRCeVRlc3RJZCIsInByb3BzIiwidG9CZSIsImZpcmVFdmVudCIsInByZXNzIiwiZ2V0QnlUZXh0Iiwib3JpZ2luYWxFcnJvciIsImNvbnNvbGUiLCJlcnJvciIsImplc3QiLCJmbiIsInRvVGhyb3ciXSwic291cmNlcyI6WyJDdXJyZW50TGV2ZWxDb250ZXh0LnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgc2NyZWVuLCBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBUZXh0LCBCdXR0b24gfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgQ3VycmVudExldmVsUHJvdmlkZXIsIHVzZUN1cnJlbnRMZXZlbCB9IGZyb20gJy4uLy4uLy4uL3NyYy9jb250ZXh0cy9DdXJyZW50TGV2ZWxDb250ZXh0JztcblxuLy8gSGVscGVyIGNvbXBvbmVudCB0byBjb25zdW1lIHRoZSBjb250ZXh0XG5jb25zdCBUZXN0Q29tcG9uZW50ID0gKCkgPT4ge1xuICBjb25zdCB7IGN1cnJlbnRMZXZlbCwgc2V0Q3VycmVudExldmVsIH0gPSB1c2VDdXJyZW50TGV2ZWwoKTtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPFRleHQgdGVzdElEPVwiY3VycmVudC1sZXZlbFwiPntjdXJyZW50TGV2ZWx9PC9UZXh0PlxuICAgICAgPEJ1dHRvbiB0aXRsZT1cIlNldCBMZXZlbCAyXCIgb25QcmVzcz17KCkgPT4gc2V0Q3VycmVudExldmVsKCcyJyl9IC8+XG4gICAgICA8QnV0dG9uIHRpdGxlPVwiU2V0IExldmVsIDNcIiBvblByZXNzPXsoKSA9PiBzZXRDdXJyZW50TGV2ZWwoJzMnKX0gLz5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmNvbnN0IENvbXBvbmVudFdpdGhvdXRQcm92aWRlciA9ICgpID0+IHtcbiAgdXNlQ3VycmVudExldmVsKCk7XG4gIHJldHVybiBudWxsO1xufTtcblxuZGVzY3JpYmUoJ0N1cnJlbnRMZXZlbENvbnRleHQnLCAoKSA9PiB7XG4gIGl0KCdwcm92aWRlcyBpbml0aWFsIGxldmVsIGFuZCBhbGxvd3MgdXBkYXRpbmcgaXQnLCAoKSA9PiB7XG4gICAgcmVuZGVyKFxuICAgICAgPEN1cnJlbnRMZXZlbFByb3ZpZGVyIGluaXRpYWxMZXZlbD1cIjFcIj5cbiAgICAgICAgPFRlc3RDb21wb25lbnQgLz5cbiAgICAgIDwvQ3VycmVudExldmVsUHJvdmlkZXI+XG4gICAgKTtcblxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ2N1cnJlbnQtbGV2ZWwnKS5wcm9wcy5jaGlsZHJlbikudG9CZSgnMScpO1xuXG4gICAgZmlyZUV2ZW50LnByZXNzKHNjcmVlbi5nZXRCeVRleHQoJ1NldCBMZXZlbCAyJykpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ2N1cnJlbnQtbGV2ZWwnKS5wcm9wcy5jaGlsZHJlbikudG9CZSgnMicpO1xuXG4gICAgZmlyZUV2ZW50LnByZXNzKHNjcmVlbi5nZXRCeVRleHQoJ1NldCBMZXZlbCAzJykpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ2N1cnJlbnQtbGV2ZWwnKS5wcm9wcy5jaGlsZHJlbikudG9CZSgnMycpO1xuICB9KTtcblxuICBpdCgnZGVmYXVsdHMgdG8gbGV2ZWwgXCIxXCIgaWYgbm8gaW5pdGlhbExldmVsIGlzIHByb3ZpZGVkJywgKCkgPT4ge1xuICAgIHJlbmRlcihcbiAgICAgIDxDdXJyZW50TGV2ZWxQcm92aWRlcj5cbiAgICAgICAgPFRlc3RDb21wb25lbnQgLz5cbiAgICAgIDwvQ3VycmVudExldmVsUHJvdmlkZXI+XG4gICAgKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdjdXJyZW50LWxldmVsJykucHJvcHMuY2hpbGRyZW4pLnRvQmUoJzEnKTtcbiAgfSk7XG5cbiAgaXQoJ3Rocm93cyBhbiBlcnJvciBpZiB1c2VDdXJyZW50TGV2ZWwgaXMgdXNlZCBvdXRzaWRlIG9mIEN1cnJlbnRMZXZlbFByb3ZpZGVyJywgKCkgPT4ge1xuICAgIC8vIFN1cHByZXNzIGNvbnNvbGUuZXJyb3IgZm9yIHRoaXMgdGVzdCB0byBhdm9pZCBub2lzeSBvdXRwdXRcbiAgICBjb25zdCBvcmlnaW5hbEVycm9yID0gY29uc29sZS5lcnJvcjtcbiAgICBjb25zb2xlLmVycm9yID0gamVzdC5mbigpO1xuXG4gICAgZXhwZWN0KCgpID0+IHJlbmRlcig8Q29tcG9uZW50V2l0aG91dFByb3ZpZGVyIC8+KSkudG9UaHJvdyhcbiAgICAgIFwidXNlQ3VycmVudExldmVsIGRvaXQgw6p0cmUgdXRpbGlzw6kgZGFucyBDdXJyZW50TGV2ZWxQcm92aWRlclwiXG4gICAgKTtcblxuICAgIC8vIFJlc3RvcmUgY29uc29sZS5lcnJvclxuICAgIGNvbnNvbGUuZXJyb3IgPSBvcmlnaW5hbEVycm9yO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFB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