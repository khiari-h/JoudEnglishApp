4ae57c81fec21485eb75695dc10b9108
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _QuizHeader = _interopRequireDefault(require("./QuizHeader.js"));
var _QuizContent = _interopRequireDefault(require("./QuizContent"));
var _jsxRuntime = require("react/jsx-runtime");
var ProgressBar = function ProgressBar(_ref) {
  var progress = _ref.progress,
    colors = _ref.colors,
    localStyles = _ref.localStyles;
  var displayProgress = !progress || isNaN(progress) ? 0 : Math.round(progress);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: localStyles.progressSection,
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [localStyles.progressTrack, {
        backgroundColor: '#F3F4F6'
      }],
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [localStyles.progressBarQuiz, {
          backgroundColor: colors.primary,
          width: `${displayProgress}%`
        }]
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
      style: [localStyles.progressText, {
        color: colors.textSecondary
      }],
      children: [displayProgress, "%"]
    })]
  });
};
var QuizScreen = function QuizScreen(_ref2) {
  var quizEngine = _ref2.quizEngine,
    onGoBack = _ref2.onGoBack,
    onAnswer = _ref2.onAnswer,
    onContinue = _ref2.onContinue,
    slideAnim = _ref2.slideAnim,
    shakeAnim = _ref2.shakeAnim,
    colors = _ref2.colors,
    localStyles = _ref2.localStyles;
  var currentIndex = quizEngine.currentQuestionIndex,
    totalQuestions = quizEngine.totalQuestions,
    score = quizEngine.score,
    progress = quizEngine.progress,
    currentQuestion = quizEngine.currentQuestion,
    selectedAnswer = quizEngine.selectedChoice,
    showResult = quizEngine.showResult;
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [(0, _jsxRuntime.jsx)(_QuizHeader.default, {
      onGoBack: onGoBack,
      currentIndex: currentIndex,
      totalQuestions: totalQuestions,
      score: score,
      colors: colors,
      localStyles: localStyles
    }), (0, _jsxRuntime.jsx)(ProgressBar, {
      progress: progress,
      colors: colors,
      localStyles: localStyles
    }), (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
      style: {
        flex: 1,
        transform: [{
          translateX: slideAnim
        }, {
          translateX: shakeAnim
        }]
      },
      children: (0, _jsxRuntime.jsx)(_QuizContent.default, {
        currentQuestion: currentQuestion,
        selectedAnswer: selectedAnswer,
        showResult: showResult,
        handleAnswer: onAnswer,
        handleContinue: onContinue,
        colors: colors,
        localStyles: localStyles
      })
    })]
  });
};
ProgressBar.propTypes = {
  progress: _propTypes.default.number.isRequired,
  colors: _propTypes.default.object.isRequired,
  localStyles: _propTypes.default.object.isRequired
};
QuizScreen.propTypes = {
  quizEngine: _propTypes.default.shape({
    currentQuestionIndex: _propTypes.default.number.isRequired,
    totalQuestions: _propTypes.default.number.isRequired,
    score: _propTypes.default.number.isRequired,
    progress: _propTypes.default.number.isRequired,
    currentQuestion: _propTypes.default.object.isRequired,
    selectedChoice: _propTypes.default.number,
    showResult: _propTypes.default.bool.isRequired
  }).isRequired,
  onGoBack: _propTypes.default.func.isRequired,
  onAnswer: _propTypes.default.func.isRequired,
  onContinue: _propTypes.default.func.isRequired,
  slideAnim: _propTypes.default.object.isRequired,
  shakeAnim: _propTypes.default.object.isRequired,
  colors: _propTypes.default.object.isRequired,
  localStyles: _propTypes.default.object.isRequired
};
var _default = exports.default = QuizScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,