f5bd8ceb2a603c63935f92f780bd5c0f
_getJestObj().mock('expo-linear-gradient', function () {
  var _require = require('react-native'),
    View = _require.View;
  return {
    LinearGradient: function LinearGradient(props) {
      return (0, _jsxRuntime.jsx)(View, Object.assign({
        testID: "linear-gradient"
      }, props));
    }
  };
});
_getJestObj().mock('@expo/vector-icons', function () {
  var _require2 = require('react-native'),
    Text = _require2.Text;
  return {
    Ionicons: function Ionicons(props) {
      return (0, _jsxRuntime.jsx)(Text, {
        testID: `icon-${props.name}`,
        children: props.name
      });
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _style = _interopRequireDefault(require("../../../src/components/exercise-common/NavigationButtons/style"));
var _NavigationButtons = _interopRequireDefault(require("../../../src/components/exercise-common/NavigationButtons"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.spyOn(_reactNative2.Animated, 'sequence').mockImplementation(function () {
  return {
    start: function start(callback) {
      if (callback) {
        callback();
      }
    }
  };
});
describe('NavigationButtons', function () {
  var onNextMock = jest.fn();
  var onPreviousMock = jest.fn();
  afterEach(function () {
    jest.clearAllMocks();
  });
  describe('Rendering and Functionality', function () {
    it('renders both previous and next buttons by default', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NavigationButtons.default, {
          onNext: onNextMock,
          onPrevious: onPreviousMock
        })),
        getByText = _render.getByText;
      expect(getByText('Précédent')).toBeTruthy();
      expect(getByText('Suivant')).toBeTruthy();
    });
    it('hides the previous button when disablePrevious is true', function () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NavigationButtons.default, {
          onNext: onNextMock,
          onPrevious: onPreviousMock,
          disablePrevious: true
        })),
        queryByText = _render2.queryByText;
      expect(queryByText('Précédent')).toBeNull();
    });
    it('calls onPrevious when the previous button is pressed', function () {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NavigationButtons.default, {
          onPrevious: onPreviousMock
        })),
        getByText = _render3.getByText;
      _reactNative.fireEvent.press(getByText('Précédent'));
      expect(onPreviousMock).toHaveBeenCalledTimes(1);
    });
    it('calls onNext when the next button is pressed', function () {
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NavigationButtons.default, {
          onNext: onNextMock
        })),
        getByText = _render4.getByText;
      _reactNative.fireEvent.press(getByText('Suivant'));
      expect(onNextMock).toHaveBeenCalledTimes(1);
    });
    it('does not call onNext when the next button is disabled', function () {
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NavigationButtons.default, {
          onNext: onNextMock,
          disableNext: true
        })),
        getByText = _render5.getByText;
      _reactNative.fireEvent.press(getByText('Suivant'));
      expect(onNextMock).not.toHaveBeenCalled();
    });
    it('displays "Terminer" and a checkmark icon on the next button when isLast is true', function () {
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NavigationButtons.default, {
          isLast: true,
          onNext: onNextMock
        })),
        getByText = _render6.getByText,
        getByTestId = _render6.getByTestId;
      expect(getByText('Terminer')).toBeTruthy();
      expect(getByTestId('icon-checkmark')).toBeTruthy();
    });
    it('hides all buttons when both are disabled', function () {
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NavigationButtons.default, {
          disablePrevious: true,
          disableNext: true
        })),
        queryByText = _render7.queryByText;
      expect(queryByText('Précédent')).toBeNull();
      expect(queryByText('Suivant')).toBeNull();
      expect(queryByText('Terminer')).toBeNull();
    });
    it('renders only the previous button when disableNext is true', function () {
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NavigationButtons.default, {
          onPrevious: onPreviousMock,
          disableNext: true
        })),
        getByText = _render8.getByText,
        queryByText = _render8.queryByText;
      expect(getByText('Précédent')).toBeTruthy();
      expect(queryByText('Suivant')).toBeNull();
    });
    it('renders only the next button when disablePrevious is true', function () {
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NavigationButtons.default, {
          onNext: onNextMock,
          disablePrevious: true
        })),
        getByText = _render9.getByText,
        queryByText = _render9.queryByText;
      expect(getByText('Suivant')).toBeTruthy();
      expect(queryByText('Précédent')).toBeNull();
    });
    it('uses custom button labels', function () {
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NavigationButtons.default, {
          buttonLabels: {
            previous: 'Back',
            next: 'Next',
            finish: 'Done'
          }
        })),
        getByText = _render0.getByText;
      expect(getByText('Back')).toBeTruthy();
      expect(getByText('Next')).toBeTruthy();
    });
  });
  describe('Styles and Behavior', function () {
    it('applies iOS styles correctly', function () {
      jest.spyOn(_reactNative2.Platform, 'select').mockImplementation(function (obj) {
        return obj.ios;
      });
      var styles = (0, _style.default)('#5E60CE');
      expect(styles.previousButton.shadowColor).toBe('#000');
      expect(styles.previousButton.shadowOpacity).toBe(0.08);
      expect(styles.previousButton).not.toHaveProperty('elevation');
    });
    it('applies Android styles correctly', function () {
      jest.spyOn(_reactNative2.Platform, 'select').mockImplementation(function (obj) {
        return obj.android;
      });
      var styles = (0, _style.default)('#5E60CE');
      expect(styles.previousButton.elevation).toBe(3);
      expect(styles.previousButton).not.toHaveProperty('shadowOpacity');
    });
    it('applies disabled style to the previous button when disabled', function () {
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NavigationButtons.default, {
          onPrevious: onPreviousMock,
          disablePrevious: true
        })),
        getByText = _render1.getByText;
      expect(getByText('Précédent').parent.props.style).toContainEqual({
        opacity: 0.6
      });
    });
    it('applies disabled style to the next button when disabled', function () {
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NavigationButtons.default, {
          onNext: onNextMock,
          disableNext: true
        })),
        getByText = _render10.getByText;
      expect(getByText('Suivant').parent.props.style).toContainEqual({
        opacity: 0.6
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,