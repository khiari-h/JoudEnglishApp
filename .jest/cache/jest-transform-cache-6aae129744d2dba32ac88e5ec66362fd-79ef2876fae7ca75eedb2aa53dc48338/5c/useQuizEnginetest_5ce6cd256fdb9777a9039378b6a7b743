f8089e3f7623f4b81fc975b564eb827c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactNative = require("@testing-library/react-native");
var _useQuizEngine = _interopRequireDefault(require("../../src/hooks/useQuizEngine"));
describe('useQuizEngine', function () {
  var mockQuestions = [{
    word: 'hello',
    choices: ['bonjour', 'au revoir', 'merci', 'salut'],
    correctAnswer: 'bonjour'
  }, {
    word: 'goodbye',
    choices: ['au revoir', 'bonjour', 'merci', 'salut'],
    correctAnswer: 'au revoir'
  }, {
    word: 'thank you',
    choices: ['merci', 'bonjour', 'au revoir', 'salut'],
    correctAnswer: 'merci'
  }];
  describe('Initialisation', function () {
    it('devrait initialiser avec les bonnes valeurs par défaut', function () {
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useQuizEngine.default)(mockQuestions);
        }),
        result = _renderHook.result;
      expect(result.current.currentQuestionIndex).toBe(0);
      expect(result.current.score).toBe(0);
      expect(result.current.selectedChoice).toBeNull();
      expect(result.current.showResult).toBe(false);
      expect(result.current.isFinished).toBe(false);
      expect(result.current.userAnswers).toEqual([]);
      expect(result.current.totalQuestions).toBe(3);
      expect(result.current.currentQuestion).toEqual(mockQuestions[0]);
      expect(result.current.progress).toBe(0);
    });
    it('devrait gérer un tableau de questions vide', function () {
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useQuizEngine.default)([]);
        }),
        result = _renderHook2.result;
      expect(result.current.totalQuestions).toBe(0);
      expect(result.current.currentQuestion).toBeNull();
      expect(result.current.progress).toBe(0);
    });
    it('devrait gérer des questions nulles ou undefined', function () {
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useQuizEngine.default)(null);
        }),
        resultNull = _renderHook3.result;
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useQuizEngine.default)(undefined);
        }),
        resultUndefined = _renderHook4.result;
      expect(resultNull.current.totalQuestions).toBe(0);
      expect(resultNull.current.currentQuestion).toBeNull();
      expect(resultUndefined.current.totalQuestions).toBe(0);
      expect(resultUndefined.current.currentQuestion).toBeNull();
    });
  });
  describe('Gestion des réponses', function () {
    it('devrait traiter une réponse correcte', function () {
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useQuizEngine.default)(mockQuestions);
        }),
        result = _renderHook5.result;
      (0, _reactNative.act)(function () {
        var isCorrect = result.current.handleAnswer('bonjour');
        expect(isCorrect).toBe(true);
      });
      expect(result.current.score).toBe(1);
      expect(result.current.selectedChoice).toBe('bonjour');
      expect(result.current.showResult).toBe(true);
      expect(result.current.userAnswers).toHaveLength(1);
      expect(result.current.userAnswers[0]).toEqual({
        question: 'hello',
        choice: 'bonjour',
        isCorrect: true
      });
    });
    it('devrait traiter une réponse incorrecte', function () {
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useQuizEngine.default)(mockQuestions);
        }),
        result = _renderHook6.result;
      (0, _reactNative.act)(function () {
        var isCorrect = result.current.handleAnswer('au revoir');
        expect(isCorrect).toBe(false);
      });
      expect(result.current.score).toBe(0);
      expect(result.current.selectedChoice).toBe('au revoir');
      expect(result.current.showResult).toBe(true);
      expect(result.current.userAnswers[0]).toEqual({
        question: 'hello',
        choice: 'au revoir',
        isCorrect: false
      });
    });
    it('ne devrait pas permettre de répondre deux fois à la même question', function () {
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _useQuizEngine.default)(mockQuestions);
        }),
        result = _renderHook7.result;
      (0, _reactNative.act)(function () {
        result.current.handleAnswer('bonjour');
      });
      (0, _reactNative.act)(function () {
        var secondAnswer = result.current.handleAnswer('au revoir');
        expect(secondAnswer).toBe(false);
      });
      expect(result.current.score).toBe(1);
      expect(result.current.selectedChoice).toBe('bonjour');
      expect(result.current.userAnswers).toHaveLength(1);
    });
    it('devrait retourner false si aucune question courante', function () {
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useQuizEngine.default)([]);
        }),
        result = _renderHook8.result;
      (0, _reactNative.act)(function () {
        var result_answer = result.current.handleAnswer('test');
        expect(result_answer).toBe(false);
      });
    });
  });
  describe('Navigation entre questions', function () {
    it('devrait passer à la question suivante', function () {
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _useQuizEngine.default)(mockQuestions);
        }),
        result = _renderHook9.result;
      (0, _reactNative.act)(function () {
        result.current.handleAnswer('bonjour');
      });
      (0, _reactNative.act)(function () {
        result.current.goToNextQuestion();
      });
      expect(result.current.currentQuestionIndex).toBe(1);
      expect(result.current.currentQuestion).toEqual(mockQuestions[1]);
      expect(result.current.selectedChoice).toBeNull();
      expect(result.current.showResult).toBe(false);
      expect(result.current.progress).toBe(33.33333333333333);
    });
    it('devrait finir le quiz à la dernière question', function () {
      var _renderHook0 = (0, _reactNative.renderHook)(function () {
          return (0, _useQuizEngine.default)(mockQuestions);
        }),
        result = _renderHook0.result;
      (0, _reactNative.act)(function () {
        result.current.handleAnswer('bonjour');
        result.current.goToNextQuestion();
        result.current.handleAnswer('au revoir');
        result.current.goToNextQuestion();
        result.current.handleAnswer('merci');
        result.current.goToNextQuestion();
      });
      expect(result.current.isFinished).toBe(true);
      expect(result.current.progress).toBe(100);
    });
    it('devrait calculer la progression correctement', function () {
      var _renderHook1 = (0, _reactNative.renderHook)(function () {
          return (0, _useQuizEngine.default)(mockQuestions);
        }),
        result = _renderHook1.result;
      expect(result.current.progress).toBe(0);
      (0, _reactNative.act)(function () {
        result.current.handleAnswer('bonjour');
        result.current.goToNextQuestion();
      });
      expect(result.current.progress).toBe(33.33333333333333);
      (0, _reactNative.act)(function () {
        result.current.handleAnswer('au revoir');
        result.current.goToNextQuestion();
      });
      expect(result.current.progress).toBe(66.66666666666666);
    });
  });
  describe('Redémarrage du quiz', function () {
    it('devrait réinitialiser tous les états', function () {
      var _renderHook10 = (0, _reactNative.renderHook)(function () {
          return (0, _useQuizEngine.default)(mockQuestions);
        }),
        result = _renderHook10.result;
      (0, _reactNative.act)(function () {
        result.current.handleAnswer('bonjour');
        result.current.goToNextQuestion();
        result.current.handleAnswer('wrong answer');
        result.current.goToNextQuestion();
      });
      expect(result.current.currentQuestionIndex).toBe(2);
      expect(result.current.score).toBe(1);
      expect(result.current.userAnswers).toHaveLength(2);
      (0, _reactNative.act)(function () {
        result.current.handleRestart();
      });
      expect(result.current.currentQuestionIndex).toBe(0);
      expect(result.current.score).toBe(0);
      expect(result.current.selectedChoice).toBeNull();
      expect(result.current.showResult).toBe(false);
      expect(result.current.isFinished).toBe(false);
      expect(result.current.userAnswers).toEqual([]);
      expect(result.current.currentQuestion).toEqual(mockQuestions[0]);
      expect(result.current.progress).toBe(0);
    });
  });
  describe('Scénarios complets', function () {
    it('devrait gérer un quiz complet avec toutes bonnes réponses', function () {
      var _renderHook11 = (0, _reactNative.renderHook)(function () {
          return (0, _useQuizEngine.default)(mockQuestions);
        }),
        result = _renderHook11.result;
      (0, _reactNative.act)(function () {
        result.current.handleAnswer('bonjour');
        result.current.goToNextQuestion();
      });
      (0, _reactNative.act)(function () {
        result.current.handleAnswer('au revoir');
        result.current.goToNextQuestion();
      });
      (0, _reactNative.act)(function () {
        result.current.handleAnswer('merci');
        result.current.goToNextQuestion();
      });
      expect(result.current.isFinished).toBe(true);
      expect(result.current.score).toBe(3);
      expect(result.current.userAnswers).toHaveLength(3);
      expect(result.current.userAnswers.every(function (answer) {
        return answer.isCorrect;
      })).toBe(true);
    });
    it('devrait gérer un quiz complet avec toutes mauvaises réponses', function () {
      var _renderHook12 = (0, _reactNative.renderHook)(function () {
          return (0, _useQuizEngine.default)(mockQuestions);
        }),
        result = _renderHook12.result;
      (0, _reactNative.act)(function () {
        result.current.handleAnswer('wrong1');
        result.current.goToNextQuestion();
      });
      (0, _reactNative.act)(function () {
        result.current.handleAnswer('wrong2');
        result.current.goToNextQuestion();
      });
      (0, _reactNative.act)(function () {
        result.current.handleAnswer('wrong3');
        result.current.goToNextQuestion();
      });
      expect(result.current.isFinished).toBe(true);
      expect(result.current.score).toBe(0);
      expect(result.current.userAnswers).toHaveLength(3);
      expect(result.current.userAnswers.every(function (answer) {
        return !answer.isCorrect;
      })).toBe(true);
    });
    it('devrait gérer un quiz avec une seule question', function () {
      var singleQuestion = [mockQuestions[0]];
      var _renderHook13 = (0, _reactNative.renderHook)(function () {
          return (0, _useQuizEngine.default)(singleQuestion);
        }),
        result = _renderHook13.result;
      expect(result.current.totalQuestions).toBe(1);
      expect(result.current.progress).toBe(0);
      (0, _reactNative.act)(function () {
        result.current.handleAnswer('bonjour');
        result.current.goToNextQuestion();
      });
      expect(result.current.isFinished).toBe(true);
      expect(result.current.progress).toBe(100);
    });
  });
  describe('Changement de questions en cours de route', function () {
    it('devrait s\'adapter aux nouvelles questions', function () {
      var _renderHook14 = (0, _reactNative.renderHook)(function (_ref) {
          var questions = _ref.questions;
          return (0, _useQuizEngine.default)(questions);
        }, {
          initialProps: {
            questions: mockQuestions
          }
        }),
        result = _renderHook14.result,
        rerender = _renderHook14.rerender;
      expect(result.current.totalQuestions).toBe(3);
      var newQuestions = [mockQuestions[0], mockQuestions[1]];
      rerender({
        questions: newQuestions
      });
      expect(result.current.totalQuestions).toBe(2);
    });
  });
  describe('Cas limites', function () {
    it('devrait gérer des questions sans correctAnswer', function () {
      var invalidQuestions = [{
        word: 'test',
        choices: ['a', 'b', 'c', 'd']
      }];
      var _renderHook15 = (0, _reactNative.renderHook)(function () {
          return (0, _useQuizEngine.default)(invalidQuestions);
        }),
        result = _renderHook15.result;
      (0, _reactNative.act)(function () {
        var isCorrect = result.current.handleAnswer('a');
        expect(isCorrect).toBe(false);
      });
    });
    it('devrait gérer des questions avec des données manquantes', function () {
      var incompleteQuestions = [{
        choices: ['a', 'b'],
        correctAnswer: 'a'
      }];
      var _renderHook16 = (0, _reactNative.renderHook)(function () {
          return (0, _useQuizEngine.default)(incompleteQuestions);
        }),
        result = _renderHook16.result;
      expect(result.current.currentQuestion).toEqual(incompleteQuestions[0]);
      (0, _reactNative.act)(function () {
        result.current.handleAnswer('a');
      });
      expect(result.current.userAnswers[0].question).toBeUndefined();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,