{"version":3,"names":["calculateTotalExercises","exports","grammarData","cov_1dqyk0lzy","f","s","reduce","total","rule","_rule$exercises","b","exercises","length","calculateCompletedExercisesCount","completedExercises","Object","values","calculateTotalProgress","totalExercises","completedCount","Math","round","calculateRuleProgress","map","index","_rule$exercises2","_completedExercises$i","progress","title"],"sources":["grammarStats.js"],"sourcesContent":["// utils/grammar/grammarStats.js - Fonctions utilitaires (pattern identique Ã  vocabularyStats)\n\n/**\n * ðŸ“Š Utilitaires de calcul pour Grammar\n * Pattern identique Ã  utils/vocabulary/vocabularyStats.js\n * Garde la logique mÃ©tier sÃ©parÃ©e des composants\n */\n\n/**\n * Calculer le nombre total d'exercices\n * @param {Array} grammarData - DonnÃ©es de grammaire [{ exercises: [...] }]\n * @returns {number} Nombre total d'exercices\n */\nexport const calculateTotalExercises = (grammarData) => {\n  return grammarData.reduce((total, rule) => {\n    return total + (rule.exercises?.length || 0);\n  }, 0);\n};\n\n/**\n * Calculer le nombre d'exercices complÃ©tÃ©s\n * @param {Object} completedExercises - Exercices complÃ©tÃ©s {0: [0,1], 1: [0]}\n * @returns {number} Nombre d'exercices complÃ©tÃ©s\n */\nexport const calculateCompletedExercisesCount = (completedExercises) => {\n  return Object.values(completedExercises).reduce((total, exercises) => {\n    return total + (exercises?.length || 0);\n  }, 0);\n};\n\n/**\n * Calculer la progression totale en pourcentage\n * @param {Array} grammarData - DonnÃ©es de grammaire\n * @param {Object} completedExercises - Exercices complÃ©tÃ©s\n * @returns {number} Pourcentage de progression (0-100)\n */\nexport const calculateTotalProgress = (grammarData, completedExercises) => {\n  const totalExercises = calculateTotalExercises(grammarData);\n  const completedCount = calculateCompletedExercisesCount(completedExercises);\n  \n  return totalExercises > 0 ? Math.round((completedCount / totalExercises) * 100) : 0;\n};\n\n/**\n * Calculer la progression par rÃ¨gle grammaticale\n * @param {Array} grammarData - DonnÃ©es de grammaire\n * @param {Object} completedExercises - Exercices complÃ©tÃ©s\n * @returns {Array} Progression par rÃ¨gle\n */\nexport const calculateRuleProgress = (grammarData, completedExercises) => {\n  return grammarData.map((rule, index) => {\n    const totalExercises = rule.exercises?.length || 0;\n    const completedCount = completedExercises[index]?.length || 0;\n    const progress = totalExercises > 0 ? (completedCount / totalExercises) * 100 : 0;\n    \n    return {\n      title: rule.title,\n      totalExercises,\n      completedExercises: completedCount,\n      progress: Math.round(progress),\n    };\n  });\n};"],"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","ignoreList":[]}