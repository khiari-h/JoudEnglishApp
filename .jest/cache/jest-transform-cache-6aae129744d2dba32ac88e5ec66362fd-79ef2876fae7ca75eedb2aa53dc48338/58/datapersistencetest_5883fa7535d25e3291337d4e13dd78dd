7bc5c90956af4b501430ede8a61332de
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    setItem: jest.fn(),
    getItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    useFocusEffect: jest.fn(function (callback) {
      return callback();
    }),
    router: {
      push: jest.fn()
    },
    Stack: function Stack(_ref) {
      var children = _ref.children;
      return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
        children: children
      });
    },
    useLocalSearchParams: function useLocalSearchParams() {
      return {};
    },
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn(),
        canGoBack: jest.fn(function () {
          return true;
        }),
        addListener: jest.fn(),
        isFocused: jest.fn(function () {
          return true;
        })
      };
    }
  };
});
_getJestObj().mock('../../src/hooks/useLastActivity', function () {
  return function () {
    return {
      lastActivity: null,
      isLoading: false,
      saveActivity: jest.fn(),
      clearActivity: jest.fn(),
      reload: jest.fn()
    };
  };
});
_getJestObj().mock('../../src/hooks/useActivityMetrics', function () {
  return function () {
    return {
      currentStreak: 5,
      wordsToday: 0,
      timeToday: 0,
      isLoading: false
    };
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _ProgressContext = require("../../src/contexts/ProgressContext");
var _ThemeContext = require("../../src/contexts/ThemeContext");
var _CurrentLevelContext = require("../../src/contexts/CurrentLevelContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var FakeDataManager = function FakeDataManager() {
  var _progress$levels, _progress$levels2, _progress$levels3;
  var _useProgress = (0, _ProgressContext.useProgress)(),
    updateProgress = _useProgress.updateProgress,
    progress = _useProgress.progress;
  var saveData = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      yield _asyncStorage.default.setItem('progress', JSON.stringify(progress));
    });
    return function saveData() {
      return _ref2.apply(this, arguments);
    };
  }();
  var loadData = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      var data = yield _asyncStorage.default.getItem('progress');
      return data ? JSON.parse(data) : null;
    });
    return function loadData() {
      return _ref3.apply(this, arguments);
    };
  }();
  var simulateExercise = function simulateExercise() {
    updateProgress('A1', 'vocabulary', 75);
    updateProgress('A1', 'grammar', 50);
    updateProgress('A1', 'reading', 25);
  };
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [(0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "progress-display",
      children: ["Vocabulaire: ", ((_progress$levels = progress.levels) == null || (_progress$levels = _progress$levels.A1) == null ? void 0 : _progress$levels.vocabulary) || 0, "% | Grammaire: ", ((_progress$levels2 = progress.levels) == null || (_progress$levels2 = _progress$levels2.A1) == null ? void 0 : _progress$levels2.grammar) || 0, "% | Lecture: ", ((_progress$levels3 = progress.levels) == null || (_progress$levels3 = _progress$levels3.A1) == null ? void 0 : _progress$levels3.reading) || 0, "%"]
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "simulate-exercise",
      onPress: simulateExercise,
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "Simuler exercice"
      })
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "save-data",
      onPress: saveData,
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "Sauvegarder"
      })
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "load-data",
      onPress: loadData,
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "Charger"
      })
    })]
  });
};
describe('Scénario 1: Persistance des données de progression', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _asyncStorage.default.clear();
  });
  it("devrait sauvegarder les données de progression dans AsyncStorage", (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsx)(FakeDataManager, {})
        })
      })),
      getByTestId = _render.getByTestId;
    _reactNative.fireEvent.press(getByTestId('simulate-exercise'));
    _reactNative.fireEvent.press(getByTestId('save-data'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('progress', expect.stringContaining('"vocabulary":75'));
    });
  }));
  it("devrait charger les données sauvegardées depuis AsyncStorage", (0, _asyncToGenerator2.default)(function* () {
    var savedProgress = {
      levels: {
        A1: {
          vocabulary: 80,
          grammar: 60,
          reading: 40
        }
      }
    };
    _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify(savedProgress));
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsx)(FakeDataManager, {})
        })
      })),
      getByTestId = _render2.getByTestId;
    _reactNative.fireEvent.press(getByTestId('load-data'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_asyncStorage.default.getItem).toHaveBeenCalledWith('progress');
    });
  }));
  it("devrait gérer les cas où aucune donnée n'est sauvegardée", (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValue(null);
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsx)(FakeDataManager, {})
        })
      })),
      getByTestId = _render3.getByTestId;
    _reactNative.fireEvent.press(getByTestId('load-data'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_asyncStorage.default.getItem).toHaveBeenCalledWith('progress');
    });
    expect(getByTestId('progress-display')).toBeTruthy();
  }));
});
describe('Scénario 2: Cohérence des données entre sessions', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _asyncStorage.default.clear();
  });
  it("devrait maintenir la cohérence des métriques après redémarrage", (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsx)(FakeDataManager, {})
        })
      })),
      getByTestId = _render4.getByTestId,
      rerender = _render4.rerender;
    _reactNative.fireEvent.press(getByTestId('simulate-exercise'));
    expect(getByTestId('progress-display')).toBeTruthy();
    _reactNative.fireEvent.press(getByTestId('save-data'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_asyncStorage.default.setItem).toHaveBeenCalled();
    });
    var savedData = {
      levels: {
        A1: {
          vocabulary: 75,
          grammar: 50,
          reading: 25
        }
      }
    };
    _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify(savedData));
    rerender((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
        children: (0, _jsxRuntime.jsx)(FakeDataManager, {})
      })
    }));
    _reactNative.fireEvent.press(getByTestId('load-data'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_asyncStorage.default.getItem).toHaveBeenCalledWith('progress');
    });
  }));
  it("devrait gérer les erreurs de sauvegarde/chargement", (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.setItem.mockRejectedValue(new Error('Erreur de sauvegarde'));
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsx)(FakeDataManager, {})
        })
      })),
      getByTestId = _render5.getByTestId;
    _reactNative.fireEvent.press(getByTestId('simulate-exercise'));
    _reactNative.fireEvent.press(getByTestId('save-data'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_asyncStorage.default.setItem).toHaveBeenCalled();
    });
    expect(getByTestId('progress-display')).toBeTruthy();
  }));
});
describe('Scénario 3: Intégration avec les composants réels', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _asyncStorage.default.clear();
  });
  it("devrait synchroniser les données entre différents composants", (0, _asyncToGenerator2.default)(function* () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsx)(_CurrentLevelContext.CurrentLevelProvider, {
            children: (0, _jsxRuntime.jsx)(FakeDataManager, {})
          })
        })
      })),
      getByTestId = _render6.getByTestId;
    expect(getByTestId('progress-display')).toBeTruthy();
    _reactNative.fireEvent.press(getByTestId('simulate-exercise'));
    _reactNative.fireEvent.press(getByTestId('save-data'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_asyncStorage.default.setItem).toHaveBeenCalled();
    });
    expect(getByTestId('progress-display')).toBeTruthy();
  }));
  it("devrait gérer la concurrence des mises à jour", (0, _asyncToGenerator2.default)(function* () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsx)(FakeDataManager, {})
        })
      })),
      getByTestId = _render7.getByTestId;
    (0, _reactNative.act)(function () {
      _reactNative.fireEvent.press(getByTestId('simulate-exercise'));
      _reactNative.fireEvent.press(getByTestId('simulate-exercise'));
    });
    _reactNative.fireEvent.press(getByTestId('save-data'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_asyncStorage.default.setItem).toHaveBeenCalled();
    });
    expect(getByTestId('progress-display')).toBeTruthy();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,