3eed90fad592a027d7360c729ef83688
_getJestObj().mock('expo-router', function () {
  return {
    useFocusEffect: jest.fn(function (callback) {
      return callback();
    }),
    router: {
      push: jest.fn(),
      back: jest.fn()
    },
    Stack: function Stack(_ref) {
      var children = _ref.children;
      return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
        children: children
      });
    },
    useLocalSearchParams: function useLocalSearchParams() {
      return {};
    },
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn(),
        canGoBack: jest.fn(function () {
          return true;
        }),
        addListener: jest.fn(),
        isFocused: jest.fn(function () {
          return true;
        })
      };
    }
  };
});
_getJestObj().mock('../../src/hooks/useRealTimeProgress', function () {
  return function () {
    return {
      getLevelProgress: function getLevelProgress(level) {
        var _mockProgressData$lev;
        return ((_mockProgressData$lev = mockProgressData[level]) == null ? void 0 : _mockProgressData$lev.levelProgress) || 0;
      },
      getExerciseProgress: function getExerciseProgress(exercise, level) {
        var _mockProgressData$lev2;
        return ((_mockProgressData$lev2 = mockProgressData[level]) == null ? void 0 : _mockProgressData$lev2[exercise]) || 0;
      },
      hasProgress: function hasProgress(exercise, level) {
        var _mockProgressData$lev3;
        return (((_mockProgressData$lev3 = mockProgressData[level]) == null ? void 0 : _mockProgressData$lev3[exercise]) || 0) > 0;
      },
      refresh: jest.fn()
    };
  };
});
_getJestObj().mock('../../src/contexts/ProgressContext', function () {
  return Object.assign({}, jest.requireActual('../../src/contexts/ProgressContext'), {
    useProgress: function useProgress() {
      return {
        updateProgress: mockUpdateProgress,
        progress: {
          overall: 0,
          levels: mockProgressData
        },
        isLoading: false
      };
    }
  });
});
_getJestObj().mock('../../src/screens/exercises/vocabulary/hooks/useVocabulary', function () {
  return mockUseVocabulary;
});
_getJestObj().mock('../../src/screens/Dashboard/hooks/useDashboardState', function () {
  return {
    useDashboardState: jest.fn(function () {
      return {
        showLevelProgress: false,
        setShowLevelProgress: jest.fn(),
        openLevelProgressModal: jest.fn(),
        closeLevelProgressModal: jest.fn(),
        refreshing: false,
        activeTab: "home",
        setActiveTab: jest.fn(),
        onRefresh: jest.fn().mockResolvedValue()
      };
    })
  };
});
_getJestObj().mock('../../src/hooks/useLastActivity', function () {
  return function () {
    return {
      lastActivity: null,
      isLoading: false,
      saveActivity: jest.fn(),
      clearActivity: jest.fn(),
      reload: jest.fn()
    };
  };
});
_getJestObj().mock('../../src/hooks/useActivityMetrics', function () {
  return function () {
    return {
      currentStreak: 5,
      wordsToday: 0,
      timeToday: 0,
      isLoading: false
    };
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _expoRouter = require("expo-router");
var _Dashboard = _interopRequireDefault(require("../../src/screens/Dashboard"));
var _LevelSelection = _interopRequireDefault(require("../../src/screens/LevelSelection"));
var _ExerciseSelection = _interopRequireDefault(require("../../src/screens/ExerciseSelection"));
var _vocabulary = _interopRequireDefault(require("../../src/screens/exercises/vocabulary"));
var _ThemeContext = require("../../src/contexts/ThemeContext");
var _CurrentLevelContext = require("../../src/contexts/CurrentLevelContext");
var _ProgressContext = require("../../src/contexts/ProgressContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockUpdateProgress = jest.fn();
var mockProgressData = {};
var mockUseVocabulary = jest.fn();
describe('Parcours utilisateur complet - Navigation et progression', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockProgressData = {};
    mockUseVocabulary.mockReturnValue({
      loaded: true,
      currentWord: {
        word: 'Hello',
        translation: 'Bonjour',
        example: 'Hello, how are you?'
      },
      wordIndex: 0,
      display: {
        wordCounter: '1 / 15',
        categories: ['Basics']
      },
      isLastWordInExercise: false,
      handleNext: jest.fn().mockReturnValue({
        completed: false
      }),
      saveData: jest.fn().mockResolvedValue(undefined),
      toggleTranslation: jest.fn()
    });
  });
  describe('Sc√©nario 1: Parcours complet Dashboard ‚Üí Level ‚Üí Exercise ‚Üí Vocabulary', function () {
    test('Navigation compl√®te entre tous les √©crans avec progression', (0, _asyncToGenerator2.default)(function* () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
          children: (0, _jsxRuntime.jsx)(_CurrentLevelContext.CurrentLevelProvider, {
            children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
              children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
            })
          })
        })),
        getByTestId = _render.getByTestId,
        getByText = _render.getByText,
        rerender = _render.rerender;
      expect(getByText('‚ö° Actions rapides')).toBeTruthy();
      expect(getByText('üèÜ Progression g√©n√©rale')).toBeTruthy();
      var startButton = getByTestId('level-selection-button');
      _reactNative.fireEvent.press(startButton);
      rerender((0, _jsxRuntime.jsx)(_LevelSelection.default, {}));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('Niveaux')).toBeTruthy();
        expect(getByTestId('level-1')).toBeTruthy();
      });
      var level1Card = getByTestId('level-1');
      expect((0, _reactNative.within)(level1Card).getByText('0%')).toBeTruthy();
      _reactNative.fireEvent.press(level1Card);
      rerender((0, _jsxRuntime.jsx)(_ExerciseSelection.default, {}));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('Choisissez votre exercice')).toBeTruthy();
        expect(getByTestId('vocabulary-button')).toBeTruthy();
      });
      var vocabularyButton = getByTestId('vocabulary-button');
      _reactNative.fireEvent.press(vocabularyButton);
      rerender((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: '1',
            mode: 'classic'
          }
        }
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('Hello')).toBeTruthy();
        expect(getByText('1 / 15')).toBeTruthy();
      });
      var nextButton = getByText('Suivant');
      _reactNative.fireEvent.press(nextButton);
      expect(mockUpdateProgress).toHaveBeenCalledWith('1', 'vocabulary', expect.any(Number));
      mockProgressData['1'] = {
        levelProgress: 7,
        vocabulary: 7
      };
      rerender((0, _jsxRuntime.jsx)(_ExerciseSelection.default, {}));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('exercises-scroll')).toBeTruthy();
      });
      rerender((0, _jsxRuntime.jsx)(_LevelSelection.default, {}));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('level-selection-container')).toBeTruthy();
      });
      rerender((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_CurrentLevelContext.CurrentLevelProvider, {
          children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
            children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
          })
        })
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('1')).toBeTruthy();
      });
    }));
  });
  describe('Sc√©nario 2: Gestion des erreurs et cas limites', function () {
    test('Gestion de la navigation avec donn√©es manquantes', (0, _asyncToGenerator2.default)(function* () {
      mockProgressData['1'] = {
        levelProgress: null,
        vocabulary: undefined
      };
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_LevelSelection.default, {})),
        getByTestId = _render2.getByTestId,
        getByText = _render2.getByText;
      yield (0, _reactNative.waitFor)(function () {
        var level1Card = getByTestId('level-1');
        expect((0, _reactNative.within)(level1Card).getByText('0%')).toBeTruthy();
      });
    }));
    test('Navigation avec exercice en cours', (0, _asyncToGenerator2.default)(function* () {
      mockProgressData['1'] = {
        levelProgress: 45,
        vocabulary: 45
      };
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_LevelSelection.default, {})),
        getByTestId = _render3.getByTestId,
        getByText = _render3.getByText;
      yield (0, _reactNative.waitFor)(function () {
        var level1Card = getByTestId('level-1');
        expect((0, _reactNative.within)(level1Card).getByTestId('level-1-button')).toBeTruthy();
        expect((0, _reactNative.within)(level1Card).getByText('Continuer')).toBeTruthy();
      });
    }));
  });
  describe('Sc√©nario 3: Coh√©rence des donn√©es entre √©crans', function () {
    test('Synchronisation des m√©triques entre Dashboard et Level Selection', (0, _asyncToGenerator2.default)(function* () {
      mockProgressData['1'] = {
        levelProgress: 25,
        vocabulary: 25
      };
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
          children: (0, _jsxRuntime.jsx)(_CurrentLevelContext.CurrentLevelProvider, {
            children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
              children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
            })
          })
        })),
        getByText = _render4.getByText,
        rerender = _render4.rerender;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('üèÜ Progression g√©n√©rale')).toBeTruthy();
      });
      rerender((0, _jsxRuntime.jsx)(_LevelSelection.default, {}));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('level-selection-container')).toBeTruthy();
      });
      mockProgressData['1'] = {
        levelProgress: 50,
        vocabulary: 50
      };
      rerender((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_CurrentLevelContext.CurrentLevelProvider, {
          children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
            children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
          })
        })
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('üèÜ Progression g√©n√©rale')).toBeTruthy();
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,