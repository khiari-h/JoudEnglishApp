3efe99f9db5248480caf6118dc79c9ef
_getJestObj().mock('react-native/Libraries/Animated/src/Animated', function () {
  var ActualAnimated = jest.requireActual('react-native/Libraries/Animated/src/Animated');
  return Object.assign({}, ActualAnimated, {
    timing: function timing(value, config) {
      return {
        start: function start(callback) {
          value.setValue(config.toValue);
          if (callback) callback();
        }
      };
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _CategorySelector = _interopRequireDefault(require("../../src/components/exercise-common/CategorySelector"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('CategorySelector', function () {
  var categories = [{
    id: '1',
    name: 'Fruits'
  }, {
    id: '2',
    name: 'Vegetables'
  }, {
    id: '3',
    name: 'Dairy'
  }];
  it('renders all categories correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: '2',
        onSelectCategory: jest.fn()
      })),
      getByText = _render.getByText;
    categories.forEach(function (category) {
      expect(getByText(category.name)).toBeTruthy();
    });
  });
  it('calls onSelectCategory when a category is pressed', function () {
    var onSelectCategory = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: '1',
        onSelectCategory: onSelectCategory
      })),
      getByText = _render2.getByText;
    _reactNative.fireEvent.press(getByText('Vegetables'));
    expect(onSelectCategory).toHaveBeenCalledWith('2');
  });
  it('does not call onSelectCategory if the same category is pressed', function () {
    var onSelectCategory = jest.fn();
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: '1',
        onSelectCategory: onSelectCategory
      })),
      getByText = _render3.getByText;
    _reactNative.fireEvent.press(getByText('Fruits'));
    expect(onSelectCategory).not.toHaveBeenCalled();
  });
  it('triggers pressIn and pressOut animations', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: '1',
        onSelectCategory: jest.fn()
      })),
      getByText = _render4.getByText;
    var pill = getByText('Vegetables');
    (0, _reactNative.act)(function () {
      (0, _reactNative.fireEvent)(pill, 'pressIn');
    });
    (0, _reactNative.act)(function () {
      (0, _reactNative.fireEvent)(pill, 'pressOut');
    });
  });
  it('scrolls to selected category on mount', function () {
    var scrollToMock = jest.fn();
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: '3',
        onSelectCategory: jest.fn()
      })),
      getByText = _render5.getByText;
    expect(getByText('Dairy')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,