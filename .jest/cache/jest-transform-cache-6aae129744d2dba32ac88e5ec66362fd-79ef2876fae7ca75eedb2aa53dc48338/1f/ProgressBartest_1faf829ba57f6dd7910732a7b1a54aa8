7dcc48e33478f9d0b3bb1e478c03dc1b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ProgressBar = _interopRequireDefault(require("../../../src/components/ui/ProgressBar"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
describe('ProgressBar', function () {
  beforeAll(function () {
    jest.spyOn(_reactNative2.Animated, 'timing').mockImplementation(function () {
      return {
        start: function start(callback) {
          callback && callback();
          return {
            stop: jest.fn()
          };
        },
        stop: jest.fn()
      };
    });
  });
  afterAll(function () {
    jest.restoreAllMocks();
  });
  it('should render correctly with default props', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressBar.default, {
        testID: "progress-bar"
      })),
      getByTestId = _render.getByTestId;
    expect(getByTestId('progress-bar')).toBeTruthy();
  });
  it('should display percentage when showPercentage is true', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressBar.default, {
        progress: 50,
        showPercentage: true
      })),
      getByText = _render2.getByText;
    expect(getByText('50%')).toBeTruthy();
  });
  it('should not display percentage when showPercentage is false', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressBar.default, {
        progress: 50,
        showPercentage: false
      })),
      queryByText = _render3.queryByText;
    expect(queryByText('50%')).toBeNull();
  });
  it('should display value when showValue is true', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressBar.default, {
        progress: 50,
        total: 200,
        showValue: true
      })),
      getByText = _render4.getByText;
    expect(getByText('100/200')).toBeTruthy();
  });
  it('should not display value when showValue is false', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressBar.default, {
        progress: 50,
        total: 200,
        showValue: false
      })),
      queryByText = _render5.queryByText;
    expect(queryByText('100/200')).toBeNull();
  });
  it('should display label when label is provided', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressBar.default, {
        label: "My Progress"
      })),
      getByText = _render6.getByText;
    expect(getByText('My Progress')).toBeTruthy();
  });
  it('should apply custom height', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressBar.default, {
        height: 20,
        testID: "progress-bar-custom-height"
      })),
      getByTestId = _render7.getByTestId;
    var progressBar = getByTestId('progress-bar-custom-height');
    expect(progressBar.props.style[0].height).toBe(20);
  });
  it('should apply custom colors', function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressBar.default, {
        backgroundColor: "#FF0000",
        fillColor: "#00FF00",
        testID: "progress-bar-custom-colors"
      })),
      getByTestId = _render8.getByTestId;
    var progressBar = getByTestId('progress-bar-custom-colors');
    expect(progressBar.props.style[0].backgroundColor).toBe("#FF0000");
  });
  it('should apply custom border radius', function () {
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressBar.default, {
        borderRadius: 10,
        testID: "progress-bar-custom-radius"
      })),
      getByTestId = _render9.getByTestId;
    var progressBar = getByTestId('progress-bar-custom-radius');
    expect(progressBar.props.style[0].borderRadius).toBe(10);
  });
  it('should format percentage correctly with custom formatter', function () {
    var customFormatter = function customFormatter(percentage) {
      return `Progress: ${percentage}%`;
    };
    var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressBar.default, {
        progress: 75,
        showPercentage: true,
        percentageFormatter: customFormatter
      })),
      getByText = _render0.getByText;
    expect(getByText('Progress: 75%')).toBeTruthy();
  });
  it('should format value correctly with custom formatter', function () {
    var customFormatter = function customFormatter(value, total) {
      return `${value} of ${total} units`;
    };
    var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressBar.default, {
        progress: 25,
        total: 100,
        showValue: true,
        valueFormatter: customFormatter
      })),
      getByText = _render1.getByText;
    expect(getByText('25 of 100 units')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,