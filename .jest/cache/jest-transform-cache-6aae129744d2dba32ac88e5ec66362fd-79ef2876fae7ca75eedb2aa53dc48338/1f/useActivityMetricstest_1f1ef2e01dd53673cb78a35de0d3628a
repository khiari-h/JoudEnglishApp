ffd2ee706d6a17f0e69373db82ce96a5
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    setItem: jest.fn(function () {
      return Promise.resolve();
    }),
    getItem: jest.fn(function () {
      return Promise.resolve(null);
    }),
    removeItem: jest.fn(function () {
      return Promise.resolve();
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = require("@testing-library/react");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useActivityMetrics = _interopRequireDefault(require("../../src/hooks/useActivityMetrics"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useActivityMetrics', function () {
  var MOCK_DATE = new Date('2025-01-01T12:00:00.000Z');
  var TODAY = MOCK_DATE.toDateString();
  var YESTERDAY = new Date(MOCK_DATE.getTime() - 86400000).toDateString();
  var TWO_DAYS_AGO = new Date(MOCK_DATE.getTime() - 2 * 86400000).toDateString();
  beforeEach(function () {
    jest.useFakeTimers();
    jest.setSystemTime(MOCK_DATE);
    jest.clearAllMocks();
  });
  afterEach(function () {
    jest.runOnlyPendingTimers();
    jest.useRealTimers();
    jest.clearAllTimers();
  });
  it('loads metrics and initializes default state', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify({
      someMetric: 123
    }));
    var _renderHook = (0, _react.renderHook)(function () {
        return (0, _useActivityMetrics.default)();
      }),
      result = _renderHook.result;
    yield (0, _react.waitFor)(function () {
      return !result.current.isLoading;
    });
    expect(result.current.metrics).toEqual({
      someMetric: 123
    });
    expect(result.current.todayMinutes).toBe(0);
    expect(result.current.formattedTime).toBe('0min');
    expect(result.current.currentStreak).toBe(0);
  }));
  it('calculates session duration and saves it', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook2 = (0, _react.renderHook)(function () {
        return (0, _useActivityMetrics.default)();
      }),
      result = _renderHook2.result;
    yield (0, _react.waitFor)(function () {
      return !result.current.isLoading;
    });
    (0, _react.act)(function () {
      return result.current.startSession();
    });
    (0, _react.act)(function () {
      return jest.advanceTimersByTime(2 * 60000);
    });
    yield (0, _react.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.endSession();
    }));
    expect(result.current.todayMinutes).toBe(2);
    expect(result.current.formattedTime).toBe('2min');
    expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('today_minutes', '2');
    expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('last_time_date', TODAY);
  }));
  it('increments streak if yesterday was last activity', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify({
      someMetric: 123
    })).mockResolvedValueOnce(YESTERDAY);
    var _renderHook3 = (0, _react.renderHook)(function () {
        return (0, _useActivityMetrics.default)();
      }),
      result = _renderHook3.result;
    yield (0, _react.waitFor)(function () {
      return !result.current.isLoading;
    });
    (0, _react.act)(function () {
      return result.current.updateStreak();
    });
    yield (0, _react.waitFor)(function () {
      return expect(result.current.currentStreak).toBe(1);
    });
    expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('current_streak', '1');
    expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('last_activity_date', TODAY);
  }));
  it('resets streak if last activity was 2 days ago', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify({
      someMetric: 123
    })).mockResolvedValueOnce(TWO_DAYS_AGO);
    var _renderHook4 = (0, _react.renderHook)(function () {
        return (0, _useActivityMetrics.default)();
      }),
      result = _renderHook4.result;
    yield (0, _react.waitFor)(function () {
      return !result.current.isLoading;
    });
    (0, _react.act)(function () {
      return result.current.updateStreak();
    });
    yield (0, _react.waitFor)(function () {
      return expect(result.current.currentStreak).toBe(1);
    });
  }));
  it('keeps streak unchanged if already updated today', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify({
      someMetric: 123
    })).mockResolvedValueOnce(TODAY);
    var _renderHook5 = (0, _react.renderHook)(function () {
        return (0, _useActivityMetrics.default)();
      }),
      result = _renderHook5.result;
    yield (0, _react.waitFor)(function () {
      return !result.current.isLoading;
    });
    (0, _react.act)(function () {
      return result.current.updateStreak();
    });
    yield (0, _react.waitFor)(function () {
      return expect(result.current.currentStreak).toBe(0);
    });
    expect(_asyncStorage.default.setItem).not.toHaveBeenCalledWith('current_streak', expect.any(String));
  }));
  it('returns correct streak trend', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook6 = (0, _react.renderHook)(function () {
        return (0, _useActivityMetrics.default)();
      }),
      result = _renderHook6.result;
    yield (0, _react.waitFor)(function () {
      return !result.current.isLoading;
    });
    (0, _react.act)(function () {
      result.current.currentStreak = 1;
    });
    expect(result.current.streakTrend).toBe('üî• Continue!');
    (0, _react.act)(function () {
      result.current.currentStreak = 3;
    });
    expect(result.current.streakTrend).toBe('üí™ En forme!');
    (0, _react.act)(function () {
      result.current.currentStreak = 7;
    });
    expect(result.current.streakTrend).toBe('üèÜ Incroyable!');
    (0, _react.act)(function () {
      result.current.currentStreak = 0;
    });
    expect(result.current.streakTrend).toBeNull();
  }));
  it('returns correct formatted time across multiple sessions', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook7 = (0, _react.renderHook)(function () {
        return (0, _useActivityMetrics.default)();
      }),
      result = _renderHook7.result;
    yield (0, _react.waitFor)(function () {
      return !result.current.isLoading;
    });
    (0, _react.act)(function () {
      return result.current.startSession();
    });
    (0, _react.act)(function () {
      return jest.advanceTimersByTime(30 * 60000);
    });
    yield (0, _react.act)((0, _asyncToGenerator2.default)(function* () {
      return result.current.endSession();
    }));
    expect(result.current.formattedTime).toBe('30min');
    (0, _react.act)(function () {
      return result.current.startSession();
    });
    (0, _react.act)(function () {
      return jest.advanceTimersByTime(60 * 60000);
    });
    yield (0, _react.act)((0, _asyncToGenerator2.default)(function* () {
      return result.current.endSession();
    }));
    expect(result.current.formattedTime).toBe('1h');
    (0, _react.act)(function () {
      return result.current.startSession();
    });
    (0, _react.act)(function () {
      return jest.advanceTimersByTime(75 * 60000);
    });
    yield (0, _react.act)((0, _asyncToGenerator2.default)(function* () {
      return result.current.endSession();
    }));
    expect(result.current.formattedTime).toBe('2h15min');
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,