5d24ef952c1508006be2719a20bbd87c
_getJestObj().mock('@expo/vector-icons', function () {
  var _require = require('react-native'),
    Text = _require.Text;
  return {
    Ionicons: function Ionicons(props) {
      return (0, _jsxRuntime.jsx)(Text, {
        testID: `icon-${props.name}`,
        children: props.name
      });
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ExerciseFeedback = _interopRequireDefault(require("../../../src/components/exercise-common/ExerciseFeedback"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ExerciseFeedback', function () {
  beforeAll(function () {
    jest.useFakeTimers();
  });
  afterAll(function () {
    jest.useRealTimers();
  });
  var onDismissMock = jest.fn();
  afterEach(function () {
    onDismissMock.mockClear();
  });
  it('renders the message correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        message: "Correct!"
      })),
      getByText = _render.getByText;
    expect(getByText('Correct!')).toBeTruthy();
  });
  it('renders the explanation when provided', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        message: "Incorrect",
        explanation: "The answer was X."
      })),
      getByText = _render2.getByText;
    expect(getByText('The answer was X.')).toBeTruthy();
  });
  it('does not render the explanation when not provided', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        message: "Correct!"
      })),
      queryByText = _render3.queryByText;
    expect(queryByText('The answer was X.')).toBeNull();
  });
  it('shows a success icon for type "success"', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        message: "Success",
        type: "success"
      })),
      getByTestId = _render4.getByTestId;
    expect(getByTestId('icon-checkmark-circle')).toBeTruthy();
  });
  it('shows an error icon for type "error"', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        message: "Error",
        type: "error"
      })),
      getByTestId = _render5.getByTestId;
    expect(getByTestId('icon-close-circle')).toBeTruthy();
  });
  it('shows an info icon for type "info"', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        message: "Info",
        type: "info"
      })),
      getByTestId = _render6.getByTestId;
    expect(getByTestId('icon-information-circle')).toBeTruthy();
  });
  it('calls onDismiss when the dismiss button is pressed', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        message: "Test",
        onDismiss: onDismissMock
      })),
      getByTestId = _render7.getByTestId;
    _reactNative.fireEvent.press(getByTestId('icon-close'));
    expect(onDismissMock).toHaveBeenCalledTimes(1);
  });
  it('does not show the dismiss button if showDismissButton is false', function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        message: "Test",
        showDismissButton: false
      })),
      queryByTestId = _render8.queryByTestId;
    expect(queryByTestId('icon-close')).toBeNull();
  });
  it('uses default styling for unknown type', function () {
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        message: "Test",
        type: "unknown"
      })),
      getByTestId = _render9.getByTestId;
    expect(getByTestId('icon-information-circle')).toBeTruthy();
  });
  it('does not call onDismiss if animation finishes with false', function () {
    var onDismissMock = jest.fn();
    jest.spyOn(Animated, 'timing').mockImplementation(function (value, config) {
      return {
        start: function start(callback) {
          return callback && callback({
            finished: false
          });
        }
      };
    });
    var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        message: "Test",
        onDismiss: onDismissMock
      })),
      getByTestId = _render0.getByTestId;
    _reactNative.fireEvent.press(getByTestId('dismiss-button'));
    expect(onDismissMock).not.toHaveBeenCalled();
  });
  it('calls onDismiss automatically when autoHide is true', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
      message: "Hiding soon...",
      onDismiss: onDismissMock,
      autoHide: true,
      autoHideDuration: 5000
    }));
    expect(onDismissMock).not.toHaveBeenCalled();
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(onDismissMock).toHaveBeenCalledTimes(1);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfcmVxdWlyZSIsInJlcXVpcmUiLCJUZXh0IiwiSW9uaWNvbnMiLCJwcm9wcyIsIl9qc3hSdW50aW1lIiwianN4IiwidGVzdElEIiwibmFtZSIsImNoaWxkcmVuIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9FeGVyY2lzZUZlZWRiYWNrIiwiX3JlcXVpcmUyIiwiamVzdCIsImRlc2NyaWJlIiwiYmVmb3JlQWxsIiwidXNlRmFrZVRpbWVycyIsImFmdGVyQWxsIiwidXNlUmVhbFRpbWVycyIsIm9uRGlzbWlzc01vY2siLCJmbiIsImFmdGVyRWFjaCIsIm1vY2tDbGVhciIsIml0IiwiX3JlbmRlciIsInJlbmRlciIsImRlZmF1bHQiLCJtZXNzYWdlIiwiZ2V0QnlUZXh0IiwiZXhwZWN0IiwidG9CZVRydXRoeSIsIl9yZW5kZXIyIiwiZXhwbGFuYXRpb24iLCJfcmVuZGVyMyIsInF1ZXJ5QnlUZXh0IiwidG9CZU51bGwiLCJfcmVuZGVyNCIsInR5cGUiLCJnZXRCeVRlc3RJZCIsIl9yZW5kZXI1IiwiX3JlbmRlcjYiLCJfcmVuZGVyNyIsIm9uRGlzbWlzcyIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIiwiX3JlbmRlcjgiLCJzaG93RGlzbWlzc0J1dHRvbiIsInF1ZXJ5QnlUZXN0SWQiLCJfcmVuZGVyOSIsInNweU9uIiwiQW5pbWF0ZWQiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJ2YWx1ZSIsImNvbmZpZyIsInN0YXJ0IiwiY2FsbGJhY2siLCJmaW5pc2hlZCIsIl9yZW5kZXIwIiwibm90IiwidG9IYXZlQmVlbkNhbGxlZCIsImF1dG9IaWRlIiwiYXV0b0hpZGVEdXJhdGlvbiIsImFjdCIsInJ1bkFsbFRpbWVycyIsIndhaXRGb3IiXSwic291cmNlcyI6WyJFeGVyY2lzZUZlZWRiYWNrLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gX190ZXN0c19fL2NvbXBvbmVudHMvZXhlcmNpc2UtY29tbW9uL0V4ZXJjaXNlRmVlZGJhY2sudGVzdC5qc1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCBhY3QsIHdhaXRGb3IgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgRXhlcmNpc2VGZWVkYmFjayBmcm9tICcuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9leGVyY2lzZS1jb21tb24vRXhlcmNpc2VGZWVkYmFjayc7XG5cbi8vIE1vY2sgZGVzIGljw7RuZXMgcG91ciBsJ2Vudmlyb25uZW1lbnQgZGUgdGVzdFxuamVzdC5tb2NrKCdAZXhwby92ZWN0b3ItaWNvbnMnLCAoKSA9PiB7XG4gIGNvbnN0IHsgVGV4dCB9ID0gcmVxdWlyZSgncmVhY3QtbmF0aXZlJyk7XG4gIHJldHVybiB7XG4gICAgSW9uaWNvbnM6IChwcm9wcykgPT4gPFRleHQgdGVzdElEPXtgaWNvbi0ke3Byb3BzLm5hbWV9YH0+e3Byb3BzLm5hbWV9PC9UZXh0PixcbiAgfTtcbn0pO1xuXG5kZXNjcmliZSgnRXhlcmNpc2VGZWVkYmFjaycsICgpID0+IHtcbiAgLy8gQWN0aXZlciBsZXMgZmFrZSB0aW1lcnMgcG91ciB0ZXN0ZXIgbGVzIGTDqWxhaXNcbiAgYmVmb3JlQWxsKCgpID0+IHtcbiAgICBqZXN0LnVzZUZha2VUaW1lcnMoKTtcbiAgfSk7XG5cbiAgLy8gUmVzdGF1cmVyIGxlcyB0aW1lcnMgcsOpZWxzIGFwcsOocyBsZXMgdGVzdHNcbiAgYWZ0ZXJBbGwoKCkgPT4ge1xuICAgIGplc3QudXNlUmVhbFRpbWVycygpO1xuICB9KTtcblxuICBjb25zdCBvbkRpc21pc3NNb2NrID0gamVzdC5mbigpO1xuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgb25EaXNtaXNzTW9jay5tb2NrQ2xlYXIoKTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgdGhlIG1lc3NhZ2UgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPEV4ZXJjaXNlRmVlZGJhY2sgbWVzc2FnZT1cIkNvcnJlY3QhXCIgLz4pO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ0NvcnJlY3QhJykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgdGhlIGV4cGxhbmF0aW9uIHdoZW4gcHJvdmlkZWQnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgIDxFeGVyY2lzZUZlZWRiYWNrIG1lc3NhZ2U9XCJJbmNvcnJlY3RcIiBleHBsYW5hdGlvbj1cIlRoZSBhbnN3ZXIgd2FzIFguXCIgLz5cbiAgICApO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ1RoZSBhbnN3ZXIgd2FzIFguJykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ2RvZXMgbm90IHJlbmRlciB0aGUgZXhwbGFuYXRpb24gd2hlbiBub3QgcHJvdmlkZWQnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBxdWVyeUJ5VGV4dCB9ID0gcmVuZGVyKDxFeGVyY2lzZUZlZWRiYWNrIG1lc3NhZ2U9XCJDb3JyZWN0IVwiIC8+KTtcbiAgICBleHBlY3QocXVlcnlCeVRleHQoJ1RoZSBhbnN3ZXIgd2FzIFguJykpLnRvQmVOdWxsKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG93cyBhIHN1Y2Nlc3MgaWNvbiBmb3IgdHlwZSBcInN1Y2Nlc3NcIicsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoPEV4ZXJjaXNlRmVlZGJhY2sgbWVzc2FnZT1cIlN1Y2Nlc3NcIiB0eXBlPVwic3VjY2Vzc1wiIC8+KTtcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2ljb24tY2hlY2ttYXJrLWNpcmNsZScpKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KCdzaG93cyBhbiBlcnJvciBpY29uIGZvciB0eXBlIFwiZXJyb3JcIicsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoPEV4ZXJjaXNlRmVlZGJhY2sgbWVzc2FnZT1cIkVycm9yXCIgdHlwZT1cImVycm9yXCIgLz4pO1xuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnaWNvbi1jbG9zZS1jaXJjbGUnKSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICBpdCgnc2hvd3MgYW4gaW5mbyBpY29uIGZvciB0eXBlIFwiaW5mb1wiJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcig8RXhlcmNpc2VGZWVkYmFjayBtZXNzYWdlPVwiSW5mb1wiIHR5cGU9XCJpbmZvXCIgLz4pO1xuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnaWNvbi1pbmZvcm1hdGlvbi1jaXJjbGUnKSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICBpdCgnY2FsbHMgb25EaXNtaXNzIHdoZW4gdGhlIGRpc21pc3MgYnV0dG9uIGlzIHByZXNzZWQnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgPEV4ZXJjaXNlRmVlZGJhY2sgbWVzc2FnZT1cIlRlc3RcIiBvbkRpc21pc3M9e29uRGlzbWlzc01vY2t9IC8+XG4gICAgKTtcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ2ljb24tY2xvc2UnKSk7XG4gICAgZXhwZWN0KG9uRGlzbWlzc01vY2spLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgfSk7XG5cbiAgaXQoJ2RvZXMgbm90IHNob3cgdGhlIGRpc21pc3MgYnV0dG9uIGlmIHNob3dEaXNtaXNzQnV0dG9uIGlzIGZhbHNlJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgcXVlcnlCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgPEV4ZXJjaXNlRmVlZGJhY2sgbWVzc2FnZT1cIlRlc3RcIiBzaG93RGlzbWlzc0J1dHRvbj17ZmFsc2V9IC8+XG4gICAgKTtcbiAgICBleHBlY3QocXVlcnlCeVRlc3RJZCgnaWNvbi1jbG9zZScpKS50b0JlTnVsbCgpO1xuICB9KTtcblxuICBpdCgndXNlcyBkZWZhdWx0IHN0eWxpbmcgZm9yIHVua25vd24gdHlwZScsICgpID0+IHtcbiAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgIDxFeGVyY2lzZUZlZWRiYWNrIG1lc3NhZ2U9XCJUZXN0XCIgdHlwZT1cInVua25vd25cIiAvPlxuICApO1xuICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2ljb24taW5mb3JtYXRpb24tY2lyY2xlJykpLnRvQmVUcnV0aHkoKTtcbn0pO1xuXG5pdCgnZG9lcyBub3QgY2FsbCBvbkRpc21pc3MgaWYgYW5pbWF0aW9uIGZpbmlzaGVzIHdpdGggZmFsc2UnLCAoKSA9PiB7XG4gIGNvbnN0IG9uRGlzbWlzc01vY2sgPSBqZXN0LmZuKCk7XG5cbiAgamVzdC5zcHlPbihBbmltYXRlZCwgJ3RpbWluZycpLm1vY2tJbXBsZW1lbnRhdGlvbigodmFsdWUsIGNvbmZpZykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBzdGFydDogKGNhbGxiYWNrKSA9PiBjYWxsYmFjayAmJiBjYWxsYmFjayh7IGZpbmlzaGVkOiBmYWxzZSB9KSxcbiAgICB9O1xuICB9KTtcblxuICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgPEV4ZXJjaXNlRmVlZGJhY2sgbWVzc2FnZT1cIlRlc3RcIiBvbkRpc21pc3M9e29uRGlzbWlzc01vY2t9IC8+XG4gICk7XG5cbiAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdkaXNtaXNzLWJ1dHRvbicpKTtcblxuICBleHBlY3Qob25EaXNtaXNzTW9jaykubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbn0pO1xuXG5cbiAgaXQoJ2NhbGxzIG9uRGlzbWlzcyBhdXRvbWF0aWNhbGx5IHdoZW4gYXV0b0hpZGUgaXMgdHJ1ZScsIGFzeW5jICgpID0+IHtcbiAgICByZW5kZXIoXG4gICAgICA8RXhlcmNpc2VGZWVkYmFja1xuICAgICAgICBtZXNzYWdlPVwiSGlkaW5nIHNvb24uLi5cIlxuICAgICAgICBvbkRpc21pc3M9e29uRGlzbWlzc01vY2t9XG4gICAgICAgIGF1dG9IaWRlPXt0cnVlfVxuICAgICAgICBhdXRvSGlkZUR1cmF0aW9uPXs1MDAwfVxuICAgICAgLz5cbiAgICApO1xuXG4gICAgZXhwZWN0KG9uRGlzbWlzc01vY2spLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG5cbiAgICBhY3QoKCkgPT4ge1xuICAgICAgamVzdC5ydW5BbGxUaW1lcnMoKTtcbiAgICB9KTtcblxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KG9uRGlzbWlzc01vY2spLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiJBQU1BQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxZQUFNO0VBQ3BDLElBQUFDLFFBQUEsR0FBaUJDLE9BQU8sQ0FBQyxjQUFjLENBQUM7SUFBaENDLElBQUksR0FBQUYsUUFBQSxDQUFKRSxJQUFJO0VBQ1osT0FBTztJQUNMQyxRQUFRLEVBQUUsU0FBVkEsUUFBUUEsQ0FBR0MsS0FBSztNQUFBLE9BQUssSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNKLElBQUk7UUFBQ0ssTUFBTSxFQUFFLFFBQVFILEtBQUssQ0FBQ0ksSUFBSSxFQUFHO1FBQUFDLFFBQUEsRUFBRUwsS0FBSyxDQUFDSTtNQUFJLENBQU8sQ0FBQztJQUFBO0VBQzlFLENBQUM7QUFDSCxDQUFDLENBQUM7QUFBQyxJQUFBRSxzQkFBQSxHQUFBVCxPQUFBO0FBQUEsSUFBQVUsa0JBQUEsR0FBQUQsc0JBQUEsQ0FBQVQsT0FBQTtBQVZILElBQUFXLE1BQUEsR0FBQUYsc0JBQUEsQ0FBQVQsT0FBQTtBQUNBLElBQUFZLFlBQUEsR0FBQVosT0FBQTtBQUNBLElBQUFhLGlCQUFBLEdBQUFKLHNCQUFBLENBQUFULE9BQUE7QUFBd0YsSUFBQUksV0FBQSxHQUFB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