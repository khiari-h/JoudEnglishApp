543406f4fba192bc83b132e81789ba7b
_getJestObj().mock('expo-router', function () {
  return {
    useSegments: jest.fn(),
    usePathname: jest.fn()
  };
});
_getJestObj().mock('../../src/hooks/useActivityMetrics', function () {
  return {
    __esModule: true,
    default: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactNative = require("@testing-library/react-native");
var _useRouteActivityTracker = _interopRequireDefault(require("../../src/hooks/useRouteActivityTracker"));
function _getJestObj() {
  var _require20 = require("@jest/globals"),
    jest = _require20.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useRouteActivityTracker', function () {
  var mockStartSession = jest.fn();
  var mockEndSession = jest.fn();
  var mockUpdateStreak = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
    var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
    useActivityMetrics.mockReturnValue({
      startSession: mockStartSession,
      endSession: mockEndSession,
      updateStreak: mockUpdateStreak
    });
  });
  describe('Détection des exercices', function () {
    it('devrait démarrer une session pour un exercice', function () {
      var _require = require('expo-router'),
        useSegments = _require.useSegments,
        usePathname = _require.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');
    });
    it('devrait démarrer une session pour un assessment', function () {
      var _require2 = require('expo-router'),
        useSegments = _require2.useSegments,
        usePathname = _require2.usePathname;
      useSegments.mockReturnValue(['level', 'Assessment']);
      usePathname.mockReturnValue('/level/Assessment');
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('Assessment');
    });
    it('devrait détecter les exercices avec "exercise" en minuscules', function () {
      var _require3 = require('expo-router'),
        useSegments = _require3.useSegments,
        usePathname = _require3.usePathname;
      useSegments.mockReturnValue(['level', 'grammar-exercise']);
      usePathname.mockReturnValue('/level/grammar-exercise');
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('grammar-exercise');
    });
    it('devrait détecter les assessments avec "assessment" en minuscules', function () {
      var _require4 = require('expo-router'),
        useSegments = _require4.useSegments,
        usePathname = _require4.usePathname;
      useSegments.mockReturnValue(['level', 'reading-assessment']);
      usePathname.mockReturnValue('/level/reading-assessment');
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('reading-assessment');
    });
    it('ne devrait pas démarrer de session pour une page normale', function () {
      var _require5 = require('expo-router'),
        useSegments = _require5.useSegments,
        usePathname = _require5.usePathname;
      useSegments.mockReturnValue(['home', 'dashboard']);
      usePathname.mockReturnValue('/home/dashboard');
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).not.toHaveBeenCalled();
    });
  });
  describe('Changement de route', function () {
    it('devrait terminer la session précédente et en démarrer une nouvelle', function () {
      var _require6 = require('expo-router'),
        useSegments = _require6.useSegments,
        usePathname = _require6.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        }),
        rerender = _renderHook.rerender;
      expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');
      useSegments.mockReturnValue(['level', 'GrammarExercise']);
      usePathname.mockReturnValue('/level/GrammarExercise');
      rerender();
      expect(mockEndSession).toHaveBeenCalled();
      expect(mockUpdateStreak).toHaveBeenCalled();
      expect(mockStartSession).toHaveBeenCalledWith('GrammarExercise');
    });
    it('devrait terminer la session en quittant un exercice', function () {
      var _require7 = require('expo-router'),
        useSegments = _require7.useSegments,
        usePathname = _require7.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        }),
        rerender = _renderHook2.rerender;
      expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');
      useSegments.mockReturnValue(['home', 'dashboard']);
      usePathname.mockReturnValue('/home/dashboard');
      rerender();
      expect(mockEndSession).toHaveBeenCalled();
      expect(mockUpdateStreak).toHaveBeenCalled();
    });
    it('ne devrait pas redéclencher si le pathname ne change pas', function () {
      var _require8 = require('expo-router'),
        useSegments = _require8.useSegments,
        usePathname = _require8.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        }),
        rerender = _renderHook3.rerender;
      expect(mockStartSession).toHaveBeenCalledTimes(1);
      rerender();
      expect(mockStartSession).toHaveBeenCalledTimes(1);
    });
  });
  describe('Gestion des erreurs', function () {
    it('devrait gérer les erreurs lors du démarrage de session', function () {
      var _require9 = require('expo-router'),
        useSegments = _require9.useSegments,
        usePathname = _require9.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      mockStartSession.mockImplementation(function () {
        throw new Error('Start session error');
      });
      expect(function () {
        (0, _reactNative.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        });
      }).not.toThrow();
    });
    it('devrait gérer les erreurs lors de la fin de session', function () {
      var _require0 = require('expo-router'),
        useSegments = _require0.useSegments,
        usePathname = _require0.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        }),
        rerender = _renderHook4.rerender;
      mockEndSession.mockImplementation(function () {
        throw new Error('End session error');
      });
      useSegments.mockReturnValue(['home', 'dashboard']);
      usePathname.mockReturnValue('/home/dashboard');
      expect(function () {
        rerender();
      }).not.toThrow();
    });
    it('devrait gérer les erreurs lors de la mise à jour du streak', function () {
      var _require1 = require('expo-router'),
        useSegments = _require1.useSegments,
        usePathname = _require1.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        }),
        rerender = _renderHook5.rerender;
      mockUpdateStreak.mockImplementation(function () {
        throw new Error('Update streak error');
      });
      useSegments.mockReturnValue(['home', 'dashboard']);
      usePathname.mockReturnValue('/home/dashboard');
      expect(function () {
        rerender();
      }).not.toThrow();
    });
  });
  describe('Cleanup', function () {
    it('devrait terminer la session lors du démontage', function () {
      var _require10 = require('expo-router'),
        useSegments = _require10.useSegments,
        usePathname = _require10.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        }),
        unmount = _renderHook6.unmount;
      expect(mockStartSession).toHaveBeenCalled();
      unmount();
      expect(mockEndSession).toHaveBeenCalled();
    });
    it('devrait gérer les erreurs lors du cleanup', function () {
      var _require11 = require('expo-router'),
        useSegments = _require11.useSegments,
        usePathname = _require11.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      mockEndSession.mockImplementation(function () {
        throw new Error('Cleanup error');
      });
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        }),
        unmount = _renderHook7.unmount;
      expect(function () {
        unmount();
      }).not.toThrow();
    });
    it('ne devrait pas terminer de session si aucune n\'est active', function () {
      var _require12 = require('expo-router'),
        useSegments = _require12.useSegments,
        usePathname = _require12.usePathname;
      useSegments.mockReturnValue(['home', 'dashboard']);
      usePathname.mockReturnValue('/home/dashboard');
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        }),
        unmount = _renderHook8.unmount;
      unmount();
      expect(mockEndSession).not.toHaveBeenCalled();
    });
  });
  describe('Détection de types d\'exercices variés', function () {
    var exerciseTypes = ['VocabularyExercise', 'GrammarExercise', 'ReadingExercise', 'SpellingExercise', 'ConversationExercise', 'PhrasesExercise', 'WordGamesExercise', 'ErrorCorrectionExercise'];
    exerciseTypes.forEach(function (exerciseType) {
      it(`devrait détecter ${exerciseType}`, function () {
        var _require13 = require('expo-router'),
          useSegments = _require13.useSegments,
          usePathname = _require13.usePathname;
        useSegments.mockReturnValue(['level', exerciseType]);
        usePathname.mockReturnValue(`/level/${exerciseType}`);
        (0, _reactNative.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        });
        expect(mockStartSession).toHaveBeenCalledWith(exerciseType);
      });
    });
    var assessmentTypes = ['VocabularyAssessment', 'GrammarAssessment', 'ReadingAssessment', 'OverallAssessment'];
    assessmentTypes.forEach(function (assessmentType) {
      it(`devrait détecter ${assessmentType}`, function () {
        var _require14 = require('expo-router'),
          useSegments = _require14.useSegments,
          usePathname = _require14.usePathname;
        useSegments.mockReturnValue(['level', assessmentType]);
        usePathname.mockReturnValue(`/level/${assessmentType}`);
        (0, _reactNative.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        });
        expect(mockStartSession).toHaveBeenCalledWith(assessmentType);
      });
    });
  });
  describe('Segments complexes', function () {
    it('devrait détecter les exercices dans des segments profonds', function () {
      var _require15 = require('expo-router'),
        useSegments = _require15.useSegments,
        usePathname = _require15.usePathname;
      useSegments.mockReturnValue(['app', 'levels', '1', 'vocabulary', 'VocabularyExercise']);
      usePathname.mockReturnValue('/app/levels/1/vocabulary/VocabularyExercise');
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');
    });
    it('devrait utiliser le dernier segment comme type d\'exercice', function () {
      var _require16 = require('expo-router'),
        useSegments = _require16.useSegments,
        usePathname = _require16.usePathname;
      useSegments.mockReturnValue(['app', 'exercise', 'GrammarExercise']);
      usePathname.mockReturnValue('/app/exercise/GrammarExercise');
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('GrammarExercise');
    });
    it('devrait gérer les segments vides', function () {
      var _require17 = require('expo-router'),
        useSegments = _require17.useSegments,
        usePathname = _require17.usePathname;
      useSegments.mockReturnValue([]);
      usePathname.mockReturnValue('/');
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).not.toHaveBeenCalled();
    });
  });
  describe('Prévention des boucles', function () {
    it('ne devrait pas redémarrer la même session', function () {
      var _require18 = require('expo-router'),
        useSegments = _require18.useSegments,
        usePathname = _require18.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        }),
        rerender = _renderHook9.rerender;
      expect(mockStartSession).toHaveBeenCalledTimes(1);
      rerender();
      expect(mockStartSession).toHaveBeenCalledTimes(1);
      expect(mockEndSession).not.toHaveBeenCalled();
    });
    it('devrait redémarrer si le type d\'exercice change', function () {
      var _require19 = require('expo-router'),
        useSegments = _require19.useSegments,
        usePathname = _require19.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      var _renderHook0 = (0, _reactNative.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        }),
        rerender = _renderHook0.rerender;
      expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');
      useSegments.mockReturnValue(['level', 'GrammarExercise']);
      usePathname.mockReturnValue('/level/GrammarExercise');
      rerender();
      expect(mockEndSession).toHaveBeenCalled();
      expect(mockStartSession).toHaveBeenCalledWith('GrammarExercise');
    });
  });
  describe('Intégration avec useActivityMetrics', function () {
    it('devrait utiliser les bonnes fonctions de useActivityMetrics', function () {
      var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(useActivityMetrics).toHaveBeenCalled();
    });
    it('devrait gérer l\'absence de useActivityMetrics', function () {
      var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
      useActivityMetrics.mockReturnValue({
        startSession: undefined,
        endSession: undefined,
        updateStreak: undefined
      });
      expect(function () {
        (0, _reactNative.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        });
      }).not.toThrow();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,