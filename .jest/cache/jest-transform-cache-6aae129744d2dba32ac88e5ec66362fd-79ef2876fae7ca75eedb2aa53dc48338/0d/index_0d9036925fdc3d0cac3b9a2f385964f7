6a1bc9a0921feebba378d317e9ef56e5
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _vectorIcons = require("@expo/vector-icons");
var _ThemeContext = require("../../../contexts/ThemeContext");
var _ProgressBar = _interopRequireDefault(require("../ProgressBar"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var Card = function Card(_ref) {
  var children = _ref.children,
    title = _ref.title,
    subtitle = _ref.subtitle,
    headerRight = _ref.headerRight,
    headerIcon = _ref.headerIcon,
    headerIconColor = _ref.headerIconColor,
    _ref$headerIconBackgr = _ref.headerIconBackground,
    headerIconBackground = _ref$headerIconBackgr === void 0 ? true : _ref$headerIconBackgr,
    onPress = _ref.onPress,
    footer = _ref.footer,
    footerStyle = _ref.footerStyle,
    style = _ref.style,
    titleStyle = _ref.titleStyle,
    subtitleStyle = _ref.subtitleStyle,
    contentStyle = _ref.contentStyle,
    _ref$withShadow = _ref.withShadow,
    withShadow = _ref$withShadow === void 0 ? true : _ref$withShadow,
    _ref$bordered = _ref.bordered,
    bordered = _ref$bordered === void 0 ? false : _ref$bordered,
    _ref$withSideBorder = _ref.withSideBorder,
    withSideBorder = _ref$withSideBorder === void 0 ? false : _ref$withSideBorder,
    _ref$elevated = _ref.elevated,
    elevated = _ref$elevated === void 0 ? true : _ref$elevated,
    _ref$padding = _ref.padding,
    padding = _ref$padding === void 0 ? true : _ref$padding,
    _ref$margin = _ref.margin,
    margin = _ref$margin === void 0 ? true : _ref$margin,
    badge = _ref.badge,
    badgeStyle = _ref.badgeStyle,
    badgeTextStyle = _ref.badgeTextStyle,
    _ref$isActive = _ref.isActive,
    isActive = _ref$isActive === void 0 ? false : _ref$isActive,
    _ref$backgroundColor = _ref.backgroundColor,
    backgroundColor = _ref$backgroundColor === void 0 ? "white" : _ref$backgroundColor,
    _ref$borderRadius = _ref.borderRadius,
    borderRadius = _ref$borderRadius === void 0 ? 12 : _ref$borderRadius,
    testID = _ref.testID,
    _ref$progress = _ref.progress,
    progress = _ref$progress === void 0 ? null : _ref$progress,
    progressColor = _ref.progressColor,
    _ref$progressHeight = _ref.progressHeight,
    progressHeight = _ref$progressHeight === void 0 ? 8 : _ref$progressHeight,
    progressStyle = _ref.progressStyle,
    _ref$showPercentage = _ref.showPercentage,
    showPercentage = _ref$showPercentage === void 0 ? false : _ref$showPercentage,
    _ref$percentageFormat = _ref.percentageFormatter,
    percentageFormatter = _ref$percentageFormat === void 0 ? function (val) {
      return `${Math.round(val)}%`;
    } : _ref$percentageFormat,
    titleBadge = _ref.titleBadge,
    titleBadgeColor = _ref.titleBadgeColor,
    titleBadgeStyle = _ref.titleBadgeStyle,
    _ref$titleLayout = _ref.titleLayout,
    titleLayout = _ref$titleLayout === void 0 ? "row" : _ref$titleLayout,
    rightIcon = _ref.rightIcon,
    rightIconStyle = _ref.rightIconStyle,
    _ref$compactMode = _ref.compactMode,
    compactMode = _ref$compactMode === void 0 ? false : _ref$compactMode,
    _ref$showOverlay = _ref.showOverlay,
    showOverlay = _ref$showOverlay === void 0 ? false : _ref$showOverlay,
    overlayContent = _ref.overlayContent,
    overlayStyle = _ref.overlayStyle;
  var themeContext = (0, _react.useContext)(_ThemeContext.ThemeContext);
  var colors = (themeContext == null ? void 0 : themeContext.colors) || {
    primary: "#5E60CE"
  };
  var iconColor = headerIconColor || colors.primary;
  var fillColor = progressColor || iconColor;
  var badgeColor = titleBadgeColor || iconColor;
  var isClickable = Boolean(onPress);
  var WrapperComponent = isClickable ? _reactNative.TouchableOpacity : _reactNative.View;
  var wrapperProps = isClickable ? {
    activeOpacity: 0.7,
    onPress: onPress
  } : {};
  var showHeader = title || subtitle || headerRight || headerIcon || titleBadge;
  var showProgressBar = progress !== null;
  var renderMobileHeader = function renderMobileHeader() {
    if (!showHeader) return null;
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [_style.default.header, titleLayout === "column" && _style.default.headerColumn, compactMode && _style.default.headerCompact],
      children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [_style.default.headerLeft, titleLayout === "column" && _style.default.headerLeftColumn],
        children: [headerIcon && (headerIconBackground ? (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [_style.default.headerIconContainer, {
            backgroundColor: `${iconColor}15`
          }, compactMode && _style.default.headerIconContainerCompact],
          children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
            name: headerIcon,
            size: compactMode ? 18 : 20,
            color: iconColor
          })
        }) : (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: headerIcon,
          size: compactMode ? 18 : 20,
          color: iconColor,
          style: _style.default.headerIcon
        })), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: _style.default.headerTextContainer,
          children: [title && (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: _style.default.titleWithBadgeContainer,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: [_style.default.title, {
                color: (titleStyle == null ? void 0 : titleStyle.color) || "#1F2937"
              }, compactMode && _style.default.titleCompact, titleStyle],
              children: title
            }), titleBadge && (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: [_style.default.titleBadge, {
                backgroundColor: badgeColor
              }, compactMode && _style.default.titleBadgeCompact, titleBadgeStyle],
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: [_style.default.titleBadgeText, compactMode && _style.default.titleBadgeTextCompact, badgeTextStyle],
                children: titleBadge
              })
            })]
          }), subtitle && (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [_style.default.subtitle, compactMode && _style.default.subtitleCompact, subtitleStyle],
            children: subtitle
          })]
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: _style.default.headerRight,
        children: [rightIcon && (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [_style.default.rightIconText, compactMode && _style.default.rightIconTextCompact, rightIconStyle],
          children: rightIcon
        }), headerRight]
      })]
    });
  };
  var CardBadge = function CardBadge(_ref2) {
    var cardBadge = _ref2.badge,
      cardIconColor = _ref2.iconColor,
      cardBadgeStyle = _ref2.badgeStyle,
      cardBadgeTextStyle = _ref2.badgeTextStyle;
    if (!cardBadge) return null;
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [_style.default.cardBadge, {
        backgroundColor: `${cardIconColor}15`
      }, cardBadgeStyle],
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [_style.default.badgeText, {
          color: cardIconColor
        }, cardBadgeTextStyle],
        children: cardBadge
      })
    });
  };
  var CardContent = function CardContent(_ref3) {
    var cardChildren = _ref3.children,
      cardPadding = _ref3.padding,
      cardCompactMode = _ref3.compactMode,
      cardContentStyle = _ref3.contentStyle,
      cardShowProgressBar = _ref3.showProgressBar,
      cardProgress = _ref3.progress,
      cardFillColor = _ref3.fillColor,
      cardProgressHeight = _ref3.progressHeight,
      cardShowPercentage = _ref3.showPercentage,
      cardPercentageFormatter = _ref3.percentageFormatter,
      cardProgressStyle = _ref3.progressStyle;
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [_style.default.content, cardPadding && _style.default.contentPadding, cardCompactMode && _style.default.contentCompact, cardContentStyle],
      children: [cardChildren, cardShowProgressBar && (0, _jsxRuntime.jsx)(_ProgressBar.default, {
        progress: cardProgress,
        fillColor: cardFillColor,
        height: cardProgressHeight,
        backgroundColor: `${cardFillColor}15`,
        borderRadius: Math.floor(cardProgressHeight / 2),
        showPercentage: cardShowPercentage,
        percentageFormatter: cardPercentageFormatter,
        style: [{
          marginTop: cardCompactMode ? 8 : 12,
          marginBottom: cardCompactMode ? 4 : 8
        }, cardProgressStyle]
      })]
    });
  };
  var CardFooter = function CardFooter(_ref4) {
    var localFooter = _ref4.footer,
      localFooterStyle = _ref4.footerStyle;
    if (!localFooter) return null;
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [_style.default.footer, localFooterStyle],
      children: localFooter
    });
  };
  var CardOverlay = function CardOverlay(_ref5) {
    var localShowOverlay = _ref5.showOverlay,
      localOverlayContent = _ref5.overlayContent,
      localOverlayStyle = _ref5.overlayStyle;
    if (!localShowOverlay) return null;
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [_style.default.overlay, localOverlayStyle],
      children: localOverlayContent
    });
  };
  return (0, _jsxRuntime.jsxs)(WrapperComponent, Object.assign({
    style: [_style.default.container, withShadow && _style.default.shadow, bordered && _style.default.bordered, withSideBorder && [_style.default.withSideBorder, {
      borderLeftColor: iconColor
    }], elevated && _style.default.elevated, margin && _style.default.margin, isActive && [_style.default.activeCard, {
      borderColor: iconColor
    }], compactMode && _style.default.containerCompact, {
      backgroundColor: backgroundColor,
      borderRadius: borderRadius
    }, style],
    testID: testID
  }, wrapperProps, {
    children: [(0, _jsxRuntime.jsx)(CardBadge, {
      badge: badge,
      iconColor: iconColor,
      badgeStyle: badgeStyle,
      badgeTextStyle: badgeTextStyle
    }), renderMobileHeader(), (0, _jsxRuntime.jsx)(CardContent, {
      padding: padding,
      compactMode: compactMode,
      contentStyle: contentStyle,
      showProgressBar: showProgressBar,
      progress: progress,
      fillColor: fillColor,
      progressHeight: progressHeight,
      showPercentage: showPercentage,
      percentageFormatter: percentageFormatter,
      progressStyle: progressStyle,
      children: children
    }), (0, _jsxRuntime.jsx)(CardFooter, {
      footer: footer,
      footerStyle: footerStyle
    }), (0, _jsxRuntime.jsx)(CardOverlay, {
      showOverlay: showOverlay,
      overlayContent: overlayContent,
      overlayStyle: overlayStyle
    })]
  }));
};
var _default = exports.default = Card;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,