46e26a82ae14259c499b28b7855fa705
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ExerciseCard = _interopRequireDefault(require("../../../src/components/exercise-common/ExerciseCard"));
var _jsxRuntime = require("react/jsx-runtime");
describe("ExerciseCard", function () {
  var baseProps = {
    title: "Titre de l'exercice",
    description: "Description de l'exercice",
    icon: "ðŸ“š",
    progress: 0,
    onPress: jest.fn()
  };
  it("renders title, description and icon correctly", function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, baseProps))),
      getByText = _render.getByText;
    expect(getByText(baseProps.title)).toBeTruthy();
    expect(getByText(baseProps.description)).toBeTruthy();
    expect(getByText(baseProps.icon)).toBeTruthy();
  });
  it("renders progress bar with correct width if progress > 0", function () {
    var progress = 45;
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, baseProps, {
        progress: progress
      }))),
      getByText = _render2.getByText,
      getByTestId = _render2.getByTestId;
    expect(getByText(`${progress}%`)).toBeTruthy();
    var progressFill = getByTestId("progress-fill");
    expect(progressFill.props.style).toEqual(expect.arrayContaining([expect.objectContaining({
      width: `${progress}%`
    })]));
  });
  it("renders 'Nouveau' badge if isNew and progress is 0", function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, baseProps, {
        progress: 0,
        isNew: true
      }))),
      getByText = _render3.getByText;
    expect(getByText("Nouveau")).toBeTruthy();
  });
  it("does not render progress or badge if progress = 0 and isNew = false", function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, baseProps, {
        progress: 0,
        isNew: false
      }))),
      queryByText = _render4.queryByText;
    expect(queryByText("Nouveau")).toBeNull();
    expect(queryByText("%")).toBeNull();
  });
  it("calls onPress when card is pressed", function () {
    var onPressMock = jest.fn();
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, baseProps, {
        onPress: onPressMock
      }))),
      getByText = _render5.getByText;
    _reactNative.fireEvent.press(getByText(baseProps.title));
    expect(onPressMock).toHaveBeenCalled();
  });
  it("calls onPress when 'Commencer' button is pressed", function () {
    var onPressMock = jest.fn();
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, baseProps, {
        onPress: onPressMock
      }))),
      getByText = _render6.getByText;
    _reactNative.fireEvent.press(getByText("Commencer"));
    expect(onPressMock).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,