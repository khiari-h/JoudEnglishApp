8feb948d7c6003b508c04f0793c61e96
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _native = require("@react-navigation/native");
var _expoRouter = require("expo-router");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _Container = _interopRequireWildcard(require("../../../components/layout/Container"));
var _GrammarHeader = _interopRequireDefault(require("./GrammarHeader"));
var _GrammarRuleSelector = _interopRequireDefault(require("./GrammarRuleSelector"));
var _GrammarProgress = _interopRequireDefault(require("./GrammarProgress"));
var _GrammarRuleContent = _interopRequireDefault(require("./GrammarRuleContent"));
var _GrammarExerciceRenderer = _interopRequireDefault(require("./GrammarExerciceRenderer"));
var _GrammarFeedback = _interopRequireDefault(require("./GrammarFeedback"));
var _GrammarNavigation = _interopRequireDefault(require("./GrammarNavigation"));
var _useGrammar2 = _interopRequireDefault(require("./hooks/useGrammar"));
var _grammarDataHelper = require("../../../utils/grammar/grammarDataHelper");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var GrammarExercise = function GrammarExercise(_ref) {
  var route = _ref.route;
  var navigation = (0, _native.useNavigation)();
  var _ref2 = (route == null ? void 0 : route.params) || {},
    _ref2$level = _ref2.level,
    level = _ref2$level === void 0 ? "A1" : _ref2$level;
  var styles = (0, _style.default)();
  var _useGrammar = (0, _useGrammar2.default)(grammarData, level),
    ruleIndex = _useGrammar.ruleIndex,
    exerciseIndex = _useGrammar.exerciseIndex,
    selectedOption = _useGrammar.selectedOption,
    setSelectedOption = _useGrammar.setSelectedOption,
    inputText = _useGrammar.inputText,
    setInputText = _useGrammar.setInputText,
    showFeedback = _useGrammar.showFeedback,
    isCorrect = _useGrammar.isCorrect,
    attempts = _useGrammar.attempts,
    completedExercises = _useGrammar.completedExercises,
    loaded = _useGrammar.loaded,
    showDetailedProgress = _useGrammar.showDetailedProgress,
    currentRule = _useGrammar.currentRule,
    currentExercise = _useGrammar.currentExercise,
    canCheckAnswer = _useGrammar.canCheckAnswer,
    isFirstExercise = _useGrammar.isFirstExercise,
    isLastExercise = _useGrammar.isLastExercise,
    changeRule = _useGrammar.changeRule,
    submitAnswer = _useGrammar.submitAnswer,
    nextExercise = _useGrammar.nextExercise,
    previousExercise = _useGrammar.previousExercise,
    retryExercise = _useGrammar.retryExercise,
    toggleDetailedProgress = _useGrammar.toggleDetailedProgress;
  var levelColor = (0, _react.useMemo)(function () {
    return (0, _grammarDataHelper.getLevelColor)(level);
  }, [level]);
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    grammarData = _useState2[0],
    setGrammarData = _useState2[1];
  (0, _react.useEffect)(function () {
    var isMounted = true;
    var load = function () {
      var _ref3 = (0, _asyncToGenerator2.default)(function* () {
        if (process.env.JEST_WORKER_ID) {
          var _data = (0, _grammarDataHelper.getGrammarData)(level);
          if (isMounted) setGrammarData(_data);
          return;
        }
        var data = yield (0, _grammarDataHelper.loadGrammarData)(level);
        if (isMounted) setGrammarData(data);
      });
      return function load() {
        return _ref3.apply(this, arguments);
      };
    }();
    load();
    return function () {
      isMounted = false;
    };
  }, [level]);
  var handleBackPress = (0, _react.useCallback)(function () {
    _expoRouter.router.push({
      pathname: "/tabs/exerciseSelection",
      params: {
        level: level
      }
    });
  }, [level]);
  var handleCheckAnswer = (0, _react.useCallback)(function () {
    submitAnswer();
  }, [submitAnswer]);
  var handleNextExercise = (0, _react.useCallback)(function () {
    if (!nextExercise()) {
      navigation.goBack();
    }
  }, [nextExercise, navigation]);
  var handlePreviousExercise = (0, _react.useCallback)(function () {
    previousExercise();
  }, [previousExercise]);
  var handleRetryExercise = (0, _react.useCallback)(function () {
    retryExercise();
  }, [retryExercise]);
  var handleSkipExercise = (0, _react.useCallback)(function () {
    handleNextExercise();
  }, [handleNextExercise]);
  var handleRuleChange = (0, _react.useCallback)(function (index) {
    changeRule(index);
  }, [changeRule]);
  var handleRuleProgressPress = (0, _react.useCallback)(function (index) {
    changeRule(index);
  }, [changeRule]);
  var handleToggleProgressDetails = (0, _react.useCallback)(function () {
    toggleDetailedProgress();
  }, [toggleDetailedProgress]);
  var isLoading = (0, _react.useMemo)(function () {
    return !loaded || !grammarData.length;
  }, [loaded, grammarData.length]);
  if (isLoading) {
    return (0, _jsxRuntime.jsx)(_Container.default, {
      safeArea: true,
      safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
      backgroundColor: "#f8fafc",
      statusBarStyle: "dark-content",
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.loadingContainer,
        children: (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
          size: "large",
          color: levelColor,
          testID: "activity-indicator"
        })
      })
    });
  }
  return (0, _jsxRuntime.jsxs)(_Container.default, {
    safeArea: true,
    safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
    withScrollView: true,
    backgroundColor: "#f8fafc",
    statusBarStyle: "dark-content",
    withPadding: false,
    scrollViewProps: {
      showsVerticalScrollIndicator: false,
      contentContainerStyle: styles.scrollContent
    },
    children: [(0, _jsxRuntime.jsx)(_GrammarHeader.default, {
      level: level,
      onBackPress: handleBackPress
    }), (0, _jsxRuntime.jsx)(_GrammarRuleSelector.default, {
      rules: grammarData,
      selectedIndex: ruleIndex,
      onSelectRule: handleRuleChange,
      levelColor: levelColor
    }), (0, _jsxRuntime.jsx)(_GrammarProgress.default, {
      grammarData: grammarData,
      completedExercises: completedExercises,
      levelColor: levelColor,
      expanded: showDetailedProgress,
      onToggleExpand: handleToggleProgressDetails,
      onRulePress: handleRuleProgressPress
    }), (0, _jsxRuntime.jsx)(_GrammarRuleContent.default, {
      rule: currentRule,
      levelColor: levelColor
    }), currentExercise && (0, _jsxRuntime.jsx)(_reactNative.View, {
      children: (0, _jsxRuntime.jsx)(_GrammarExerciceRenderer.default, {
        exercise: currentExercise,
        selectedOption: selectedOption,
        setSelectedOption: setSelectedOption,
        inputText: inputText,
        setInputText: setInputText,
        showFeedback: showFeedback,
        isCorrect: isCorrect,
        exerciseIndex: exerciseIndex,
        attempts: attempts
      })
    }, `exercise-${exerciseIndex}-${attempts}`), (0, _jsxRuntime.jsx)(_GrammarFeedback.default, {
      isVisible: showFeedback,
      isCorrect: isCorrect,
      explanation: currentExercise == null ? void 0 : currentExercise.explanation,
      correctAnswer: currentExercise == null ? void 0 : currentExercise.answer,
      attempts: attempts
    }), (0, _jsxRuntime.jsx)(_GrammarNavigation.default, {
      testID: "grammar-navigation",
      showFeedback: showFeedback,
      isCorrect: isCorrect,
      canCheckAnswer: canCheckAnswer,
      onCheckAnswer: handleCheckAnswer,
      onPreviousExercise: handlePreviousExercise,
      onNextExercise: handleNextExercise,
      onRetryExercise: handleRetryExercise,
      onSkipExercise: handleSkipExercise,
      isFirstExercise: isFirstExercise,
      isLastExercise: isLastExercise,
      attempts: attempts,
      levelColor: levelColor
    })]
  });
};
GrammarExercise.propTypes = {
  route: _propTypes.default.shape({
    params: _propTypes.default.shape({
      level: _propTypes.default.string.isRequired
    })
  }).isRequired
};
var _default = exports.default = GrammarExercise;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlIiwiX25hdGl2ZSIsIl9leHBvUm91dGVyIiwiX3Byb3BUeXBlcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfQ29udGFpbmVyIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfR3JhbW1hckhlYWRlciIsIl9HcmFtbWFyUnVsZVNlbGVjdG9yIiwiX0dyYW1tYXJQcm9ncmVzcyIsIl9HcmFtbWFyUnVsZUNvbnRlbnQiLCJfR3JhbW1hckV4ZXJjaWNlUmVuZGVyZXIiLCJfR3JhbW1hckZlZWRiYWNrIiwiX0dyYW1tYXJOYXZpZ2F0aW9uIiwiX3VzZUdyYW1tYXIyIiwiX2dyYW1tYXJEYXRhSGVscGVyIiwiX3N0eWxlIiwiX2pzeFJ1bnRpbWUiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIkdyYW1tYXJFeGVyY2lzZSIsIl9yZWYiLCJyb3V0ZSIsIm5hdmlnYXRpb24iLCJ1c2VOYXZpZ2F0aW9uIiwiX3JlZjIiLCJwYXJhbXMiLCJfcmVmMiRsZXZlbCIsImxldmVsIiwic3R5bGVzIiwiY3JlYXRlU3R5bGVzIiwiX3VzZUdyYW1tYXIiLCJ1c2VHcmFtbWFyIiwiZ3JhbW1hckRhdGEiLCJydWxlSW5kZXgiLCJleGVyY2lzZUluZGV4Iiwic2VsZWN0ZWRPcHRpb24iLCJzZXRTZWxlY3RlZE9wdGlvbiIsImlucHV0VGV4dCIsInNldElucHV0VGV4dCIsInNob3dGZWVkYmFjayIsImlzQ29ycmVjdCIsImF0dGVtcHRzIiwiY29tcGxldGVkRXhlcmNpc2VzIiwibG9hZGVkIiwic2hvd0RldGFpbGVkUHJvZ3Jlc3MiLCJjdXJyZW50UnVsZSIsImN1cnJlbnRFeGVyY2lzZSIsImNhbkNoZWNrQW5zd2VyIiwiaXNGaXJzdEV4ZXJjaXNlIiwiaXNMYXN0RXhlcmNpc2UiLCJjaGFuZ2VSdWxlIiwic3VibWl0QW5zd2VyIiwibmV4dEV4ZXJjaXNlIiwicHJldmlvdXNFeGVyY2lzZSIsInJldHJ5RXhlcmNpc2UiLCJ0b2dnbGVEZXRhaWxlZFByb2dyZXNzIiwibGV2ZWxDb2xvciIsInVzZU1lbW8iLCJnZXRMZXZlbENvbG9yIiwiX3VzZVN0YXRlIiwidXNlU3RhdGUiLCJfdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkyIiwic2V0R3JhbW1hckRhdGEiLCJ1c2VFZmZlY3QiLCJpc01vdW50ZWQiLCJsb2FkIiwiX3JlZjMiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJwcm9jZXNzIiwiZW52IiwiSkVTVF9XT1JLRVJfSUQiLCJkYXRhIiwiZ2V0R3JhbW1hckRhdGEiLCJsb2FkR3JhbW1hckRhdGEiLCJhcHBseSIsImFyZ3VtZW50cyIsImhhbmRsZUJhY2tQcmVzcyIsInVzZUNhbGxiYWNrIiwicm91dGVyIiwicHVzaCIsInBhdGhuYW1lIiwiaGFuZGxlQ2hlY2tBbnN3ZXIiLCJoYW5kbGVOZXh0RXhlcmNpc2UiLCJnb0JhY2siLCJoYW5kbGVQcmV2aW91c0V4ZXJjaXNlIiwiaGFuZGxlUmV0cnlFeGVyY2lzZSIsImhhbmRsZVNraXBFeGVyY2lzZSIsImhhbmRsZVJ1bGVDaGFuZ2UiLCJpbmRleCIsImhhbmRsZVJ1bGVQcm9ncmVzc1ByZXNzIiwiaGFuZGxlVG9nZ2xlUHJvZ3Jlc3NEZXRhaWxzIiwiaXNMb2FkaW5nIiwibGVuZ3RoIiwianN4Iiwic2FmZUFyZWEiLCJzYWZlQXJlYUVkZ2VzIiwiQ09OVEFJTkVSX1NBRkVfRURHRVMiLCJBTEwiLCJiYWNrZ3JvdW5kQ29sb3IiLCJzdGF0dXNCYXJTdHlsZSIsImNoaWxkcmVuIiwiVmlldyIsInN0eWxlIiwibG9hZGluZ0NvbnRhaW5lciIsIkFjdGl2aXR5SW5kaWNhdG9yIiwic2l6ZSIsImNvbG9yIiwidGVzdElEIiwianN4cyIsIndpdGhTY3JvbGxWaWV3Iiwid2l0aFBhZGRpbmciLCJzY3JvbGxWaWV3UHJvcHMiLCJzaG93c1ZlcnRpY2FsU2Nyb2xsSW5kaWNhdG9yIiwiY29udGVudENvbnRhaW5lclN0eWxlIiwic2Nyb2xsQ29udGVudCIsIm9uQmFja1ByZXNzIiwicnVsZXMiLCJzZWxlY3RlZEluZGV4Iiwib25TZWxlY3RSdWxlIiwiZXhwYW5kZWQiLCJvblRvZ2dsZUV4cGFuZCIsIm9uUnVsZVByZXNzIiwicnVsZSIsImV4ZXJjaXNlIiwiaXNWaXNpYmxlIiwiZXhwbGFuYXRpb24iLCJjb3JyZWN0QW5zd2VyIiwiYW5zd2VyIiwib25DaGVja0Fuc3dlciIsIm9uUHJldmlvdXNFeGVyY2lzZSIsIm9uTmV4dEV4ZXJjaXNlIiwib25SZXRyeUV4ZXJjaXNlIiwib25Ta2lwRXhlcmNpc2UiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzaGFwZSIsInN0cmluZyIsImlzUmVxdWlyZWQiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHcmFtbWFyRXhlcmNpc2UvaW5kZXguanMgLSBWRVJTSU9OIFRPVEFMRU1FTlQgUkVDT0TDiUVcclxuXHJcbmltcG9ydCB7IHVzZU1lbW8sIHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IFZpZXcsIEFjdGl2aXR5SW5kaWNhdG9yIH0gZnJvbSBcInJlYWN0LW5hdGl2ZVwiO1xyXG5pbXBvcnQgeyB1c2VOYXZpZ2F0aW9uIH0gZnJvbSBcIkByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZVwiO1xyXG5pbXBvcnQgeyByb3V0ZXIgfSBmcm9tIFwiZXhwby1yb3V0ZXJcIjtcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJzsgLy8g4pyFIEltcG9ydCBkZSBQcm9wVHlwZXNcclxuXHJcbi8vIExheW91dFxyXG5pbXBvcnQgQ29udGFpbmVyLCB7IENPTlRBSU5FUl9TQUZFX0VER0VTIH0gZnJvbSBcIi4uLy4uLy4uL2NvbXBvbmVudHMvbGF5b3V0L0NvbnRhaW5lclwiO1xyXG5cclxuLy8gQ29tcG9uZW50c1xyXG5pbXBvcnQgR3JhbW1hckhlYWRlciBmcm9tIFwiLi9HcmFtbWFySGVhZGVyXCI7XHJcbmltcG9ydCBHcmFtbWFyUnVsZVNlbGVjdG9yIGZyb20gXCIuL0dyYW1tYXJSdWxlU2VsZWN0b3JcIjtcclxuaW1wb3J0IEdyYW1tYXJQcm9ncmVzcyBmcm9tIFwiLi9HcmFtbWFyUHJvZ3Jlc3NcIjtcclxuaW1wb3J0IEdyYW1tYXJSdWxlQ29udGVudCBmcm9tIFwiLi9HcmFtbWFyUnVsZUNvbnRlbnRcIjtcclxuaW1wb3J0IEdyYW1tYXJFeGVyY2lzZVJlbmRlcmVyIGZyb20gXCIuL0dyYW1tYXJFeGVyY2ljZVJlbmRlcmVyXCI7XHJcbmltcG9ydCBHcmFtbWFyRmVlZGJhY2sgZnJvbSBcIi4vR3JhbW1hckZlZWRiYWNrXCI7XHJcbmltcG9ydCBHcmFtbWFyTmF2aWdhdGlvbiBmcm9tIFwiLi9HcmFtbWFyTmF2aWdhdGlvblwiO1xyXG5cclxuLy8gSG9vayAmIFV0aWxzXHJcbmltcG9ydCB1c2VHcmFtbWFyIGZyb20gXCIuL2hvb2tzL3VzZUdyYW1tYXJcIjtcclxuaW1wb3J0IHsgZ2V0R3JhbW1hckRhdGEsIGxvYWRHcmFtbWFyRGF0YSwgZ2V0TGV2ZWxDb2xvciB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9ncmFtbWFyL2dyYW1tYXJEYXRhSGVscGVyXCI7XHJcbmltcG9ydCBjcmVhdGVTdHlsZXMgZnJvbSBcIi4vc3R5bGVcIjtcclxuXHJcbi8qKlxyXG4gKiDwn46vIEdyYW1tYXJFeGVyY2lzZSAtIFZFUlNJT04gVE9UQUxFTUVOVCBSRUNPRMOJRSBBVkVDIE9QVElNSVNBVElPTlMgQ09NUEzDiFRFU1xyXG4gKiDinIUgTcOpbW9yaXNhdGlvbiBjb21wbMOodGUgYXZlYyB1c2VNZW1vIGV0IHVzZUNhbGxiYWNrXHJcbiAqIOKchSB1c2VFZmZlY3Qgb3B0aW1pc8OpIHBvdXIgc2F2ZUFjdGl2aXR5XHJcbiAqIOKchSBHZXN0aW9uIGRlcyBoYW5kbGVycyBtw6ltb3Jpc8Opc1xyXG4gKiDinIUgUGVyZm9ybWFuY2UgbWF4aW1hbGVcclxuICovXHJcbmNvbnN0IEdyYW1tYXJFeGVyY2lzZSA9ICh7IHJvdXRlIH0pID0+IHtcclxuICBjb25zdCBuYXZpZ2F0aW9uID0gdXNlTmF2aWdhdGlvbigpO1xyXG4gIGNvbnN0IHsgbGV2ZWwgPSBcIkExXCIgfSA9IHJvdXRlPy5wYXJhbXMgfHwge307XHJcbiAgY29uc3Qgc3R5bGVzID0gY3JlYXRlU3R5bGVzKCk7XHJcblxyXG4gIC8vIEhvb2sgdW5pZmnDqVxyXG4gIGNvbnN0IHtcclxuICAgIHJ1bGVJbmRleCxcclxuICAgIGV4ZXJjaXNlSW5kZXgsXHJcbiAgICBzZWxlY3RlZE9wdGlvbixcclxuICAgIHNldFNlbGVjdGVkT3B0aW9uLFxyXG4gICAgaW5wdXRUZXh0LFxyXG4gICAgc2V0SW5wdXRUZXh0LFxyXG4gICAgc2hvd0ZlZWRiYWNrLFxyXG4gICAgaXNDb3JyZWN0LFxyXG4gICAgYXR0ZW1wdHMsXHJcbiAgICBjb21wbGV0ZWRFeGVyY2lzZXMsXHJcbiAgICBsb2FkZWQsXHJcbiAgICBzaG93RGV0YWlsZWRQcm9ncmVzcyxcclxuICAgIGN1cnJlbnRSdWxlLFxyXG4gICAgY3VycmVudEV4ZXJjaXNlLFxyXG4gICAgY2FuQ2hlY2tBbnN3ZXIsXHJcbiAgICBpc0ZpcnN0RXhlcmNpc2UsXHJcbiAgICBpc0xhc3RFeGVyY2lzZSxcclxuICAgIGNoYW5nZVJ1bGUsXHJcbiAgICBzdWJtaXRBbnN3ZXIsXHJcbiAgICBuZXh0RXhlcmNpc2UsXHJcbiAgICBwcmV2aW91c0V4ZXJjaXNlLFxyXG4gICAgcmV0cnlFeGVyY2lzZSxcclxuICAgIHRvZ2dsZURldGFpbGVkUHJvZ3Jlc3MsXHJcbiAgfSA9IHVzZUdyYW1tYXIoZ3JhbW1hckRhdGEsIGxldmVsKTtcclxuXHJcbiAgLy8g4pyFIE3DiU1PUklTRVIgbGVzIGRvbm7DqWVzIHByaW5jaXBhbGVzXHJcbiAgY29uc3QgbGV2ZWxDb2xvciA9IHVzZU1lbW8oKCkgPT4gZ2V0TGV2ZWxDb2xvcihsZXZlbCksIFtsZXZlbF0pO1xyXG4gIGNvbnN0IFtncmFtbWFyRGF0YSwgc2V0R3JhbW1hckRhdGFdID0gdXNlU3RhdGUoW10pO1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgbGV0IGlzTW91bnRlZCA9IHRydWU7XHJcbiAgICBjb25zdCBsb2FkID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuSkVTVF9XT1JLRVJfSUQpIHtcclxuICAgICAgICBjb25zdCBkYXRhID0gZ2V0R3JhbW1hckRhdGEobGV2ZWwpO1xyXG4gICAgICAgIGlmIChpc01vdW50ZWQpIHNldEdyYW1tYXJEYXRhKGRhdGEpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgbG9hZEdyYW1tYXJEYXRhKGxldmVsKTtcclxuICAgICAgaWYgKGlzTW91bnRlZCkgc2V0R3JhbW1hckRhdGEoZGF0YSk7XHJcbiAgICB9O1xyXG4gICAgbG9hZCgpO1xyXG4gICAgcmV0dXJuICgpID0+IHsgaXNNb3VudGVkID0gZmFsc2U7IH07XHJcbiAgfSwgW2xldmVsXSk7XHJcblxyXG4gIC8vIOKchSBUT1VTIExFUyBIQU5ETEVSUyBNw4lNT1JJU8OJUyBwb3VyIMOpdml0ZXIgbGVzIHJlLXJlbmRlcnNcclxuICBjb25zdCBoYW5kbGVCYWNrUHJlc3MgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICByb3V0ZXIucHVzaCh7XHJcbiAgICAgIHBhdGhuYW1lOiBcIi90YWJzL2V4ZXJjaXNlU2VsZWN0aW9uXCIsXHJcbiAgICAgIHBhcmFtczogeyBsZXZlbCB9XHJcbiAgICB9KTtcclxuICB9LCBbbGV2ZWxdKTtcclxuXHJcbiAgY29uc3QgaGFuZGxlQ2hlY2tBbnN3ZXIgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICBzdWJtaXRBbnN3ZXIoKTtcclxuICB9LCBbc3VibWl0QW5zd2VyXSk7XHJcblxyXG4gIGNvbnN0IGhhbmRsZU5leHRFeGVyY2lzZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcclxuICAgIGlmICghbmV4dEV4ZXJjaXNlKCkpIHtcclxuICAgICAgLy8gQWxsIGV4ZXJjaXNlcyBjb21wbGV0ZWRcclxuICAgICAgbmF2aWdhdGlvbi5nb0JhY2soKTtcclxuICAgIH1cclxuICB9LCBbbmV4dEV4ZXJjaXNlLCBuYXZpZ2F0aW9uXSk7XHJcblxyXG4gIGNvbnN0IGhhbmRsZVByZXZpb3VzRXhlcmNpc2UgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICBwcmV2aW91c0V4ZXJjaXNlKCk7XHJcbiAgfSwgW3ByZXZpb3VzRXhlcmNpc2VdKTtcclxuXHJcbiAgY29uc3QgaGFuZGxlUmV0cnlFeGVyY2lzZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcclxuICAgIHJldHJ5RXhlcmNpc2UoKTtcclxuICB9LCBbcmV0cnlFeGVyY2lzZV0pO1xyXG5cclxuICBjb25zdCBoYW5kbGVTa2lwRXhlcmNpc2UgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICBoYW5kbGVOZXh0RXhlcmNpc2UoKTtcclxuICB9LCBbaGFuZGxlTmV4dEV4ZXJjaXNlXSk7XHJcblxyXG4gIGNvbnN0IGhhbmRsZVJ1bGVDaGFuZ2UgPSB1c2VDYWxsYmFjaygoaW5kZXgpID0+IHtcclxuICAgIGNoYW5nZVJ1bGUoaW5kZXgpO1xyXG4gIH0sIFtjaGFuZ2VSdWxlXSk7XHJcblxyXG4gIGNvbnN0IGhhbmRsZVJ1bGVQcm9ncmVzc1ByZXNzID0gdXNlQ2FsbGJhY2soKGluZGV4KSA9PiB7XHJcbiAgICBjaGFuZ2VSdWxlKGluZGV4KTtcclxuICB9LCBbY2hhbmdlUnVsZV0pO1xyXG5cclxuICBjb25zdCBoYW5kbGVUb2dnbGVQcm9ncmVzc0RldGFpbHMgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICB0b2dnbGVEZXRhaWxlZFByb2dyZXNzKCk7XHJcbiAgfSwgW3RvZ2dsZURldGFpbGVkUHJvZ3Jlc3NdKTtcclxuXHJcbiAgLy8g4pyFIE3DiU1PUklTRVIgbGVzIGNvbmRpdGlvbnMgZGUgcmVuZHVcclxuICBjb25zdCBpc0xvYWRpbmcgPSB1c2VNZW1vKCgpID0+IHtcclxuICAgIHJldHVybiAhbG9hZGVkIHx8ICFncmFtbWFyRGF0YS5sZW5ndGg7XHJcbiAgfSwgW2xvYWRlZCwgZ3JhbW1hckRhdGEubGVuZ3RoXSk7XHJcblxyXG4gIC8vIExvYWRpbmcgc3RhdGVcclxuICBpZiAoaXNMb2FkaW5nKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8Q29udGFpbmVyXHJcbiAgICAgICAgc2FmZUFyZWFcclxuICAgICAgICBzYWZlQXJlYUVkZ2VzPXtDT05UQUlORVJfU0FGRV9FREdFUy5BTEx9XHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yPVwiI2Y4ZmFmY1wiXHJcbiAgICAgICAgc3RhdHVzQmFyU3R5bGU9XCJkYXJrLWNvbnRlbnRcIlxyXG4gICAgICA+XHJcbiAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5sb2FkaW5nQ29udGFpbmVyfT5cclxuICAgICAgICAgIDxBY3Rpdml0eUluZGljYXRvciBzaXplPVwibGFyZ2VcIiBjb2xvcj17bGV2ZWxDb2xvcn0gdGVzdElEPVwiYWN0aXZpdHktaW5kaWNhdG9yXCIgLz5cclxuICAgICAgICA8L1ZpZXc+XHJcbiAgICAgIDwvQ29udGFpbmVyPlxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8Q29udGFpbmVyXHJcbiAgICAgIHNhZmVBcmVhXHJcbiAgICAgIHNhZmVBcmVhRWRnZXM9e0NPTlRBSU5FUl9TQUZFX0VER0VTLkFMTH1cclxuICAgICAgd2l0aFNjcm9sbFZpZXdcclxuICAgICAgYmFja2dyb3VuZENvbG9yPVwiI2Y4ZmFmY1wiXHJcbiAgICAgIHN0YXR1c0JhclN0eWxlPVwiZGFyay1jb250ZW50XCJcclxuICAgICAgd2l0aFBhZGRpbmc9e2ZhbHNlfVxyXG4gICAgICBzY3JvbGxWaWV3UHJvcHM9e3tcclxuICAgICAgICBzaG93c1ZlcnRpY2FsU2Nyb2xsSW5kaWNhdG9yOiBmYWxzZSxcclxuICAgICAgICBjb250ZW50Q29udGFpbmVyU3R5bGU6IHN0eWxlcy5zY3JvbGxDb250ZW50LFxyXG4gICAgICB9fVxyXG4gICAgPlxyXG4gICAgICB7LyogSGVhZGVyICovfVxyXG4gICAgICA8R3JhbW1hckhlYWRlclxyXG4gICAgICAgIGxldmVsPXtsZXZlbH1cclxuICAgICAgICBvbkJhY2tQcmVzcz17aGFuZGxlQmFja1ByZXNzfVxyXG4gICAgICAvPlxyXG5cclxuICAgICAgey8qIFJ1bGUgU2VsZWN0b3IgKi99XHJcbiAgICAgIDxHcmFtbWFyUnVsZVNlbGVjdG9yXHJcbiAgICAgICAgcnVsZXM9e2dyYW1tYXJEYXRhfVxyXG4gICAgICAgIHNlbGVjdGVkSW5kZXg9e3J1bGVJbmRleH1cclxuICAgICAgICBvblNlbGVjdFJ1bGU9e2hhbmRsZVJ1bGVDaGFuZ2V9XHJcbiAgICAgICAgbGV2ZWxDb2xvcj17bGV2ZWxDb2xvcn1cclxuICAgICAgLz5cclxuXHJcbiAgICAgIHsvKiBQcm9ncmVzcyAqL31cclxuICAgICAgPEdyYW1tYXJQcm9ncmVzc1xyXG4gICAgICAgIGdyYW1tYXJEYXRhPXtncmFtbWFyRGF0YX1cclxuICAgICAgICBjb21wbGV0ZWRFeGVyY2lzZXM9e2NvbXBsZXRlZEV4ZXJjaXNlc31cclxuICAgICAgICBsZXZlbENvbG9yPXtsZXZlbENvbG9yfVxyXG4gICAgICAgIGV4cGFuZGVkPXtzaG93RGV0YWlsZWRQcm9ncmVzc31cclxuICAgICAgICBvblRvZ2dsZUV4cGFuZD17aGFuZGxlVG9nZ2xlUHJvZ3Jlc3NEZXRhaWxzfVxyXG4gICAgICAgIG9uUnVsZVByZXNzPXtoYW5kbGVSdWxlUHJvZ3Jlc3NQcmVzc31cclxuICAgICAgLz5cclxuXHJcbiAgICAgIHsvKiBSdWxlIENvbnRlbnQgKi99XHJcbiAgICAgIDxHcmFtbWFyUnVsZUNvbnRlbnQgXHJcbiAgICAgICAgcnVsZT17Y3VycmVudFJ1bGV9IFxyXG4gICAgICAgIGxldmVsQ29sb3I9e2xldmVsQ29sb3J9XHJcbiAgICAgIC8+XHJcblxyXG4gICAgICB7LyogRXhlcmNpc2UgUmVuZGVyZXIgKi99XHJcbiAgICAgIHtjdXJyZW50RXhlcmNpc2UgJiYgKFxyXG4gICAgICAgIDxWaWV3IGtleT17YGV4ZXJjaXNlLSR7ZXhlcmNpc2VJbmRleH0tJHthdHRlbXB0c31gfT5cclxuICAgICAgICAgIDxHcmFtbWFyRXhlcmNpc2VSZW5kZXJlclxyXG4gICAgICAgICAgICBleGVyY2lzZT17Y3VycmVudEV4ZXJjaXNlfVxyXG4gICAgICAgICAgICBzZWxlY3RlZE9wdGlvbj17c2VsZWN0ZWRPcHRpb259XHJcbiAgICAgICAgICAgIHNldFNlbGVjdGVkT3B0aW9uPXtzZXRTZWxlY3RlZE9wdGlvbn1cclxuICAgICAgICAgICAgaW5wdXRUZXh0PXtpbnB1dFRleHR9XHJcbiAgICAgICAgICAgIHNldElucHV0VGV4dD17c2V0SW5wdXRUZXh0fVxyXG4gICAgICAgICAgICBzaG93RmVlZGJhY2s9e3Nob3dGZWVkYmFja31cclxuICAgICAgICAgICAgaXNDb3JyZWN0PXtpc0NvcnJlY3R9XHJcbiAgICAgICAgICAgIGV4ZXJjaXNlSW5kZXg9e2V4ZXJjaXNlSW5kZXh9XHJcbiAgICAgICAgICAgIGF0dGVtcHRzPXthdHRlbXB0c31cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9WaWV3PlxyXG4gICAgICApfVxyXG5cclxuICAgICAgey8qIEZlZWRiYWNrICovfVxyXG4gICAgICA8R3JhbW1hckZlZWRiYWNrXHJcbiAgICAgICAgaXNWaXNpYmxlPXtzaG93RmVlZGJhY2t9XHJcbiAgICAgICAgaXNDb3JyZWN0PXtpc0NvcnJlY3R9XHJcbiAgICAgICAgZXhwbGFuYXRpb249e2N1cnJlbnRFeGVyY2lzZT8uZXhwbGFuYXRpb259XHJcbiAgICAgICAgY29ycmVjdEFuc3dlcj17Y3VycmVudEV4ZXJjaXNlPy5hbnN3ZXJ9XHJcbiAgICAgICAgYXR0ZW1wdHM9e2F0dGVtcHRzfVxyXG4gICAgICAvPlxyXG5cclxuICAgICAgey8qIE5hdmlnYXRpb24gKi99XHJcbiAgICAgIDxHcmFtbWFyTmF2aWdhdGlvblxyXG4gICAgICAgIHRlc3RJRD1cImdyYW1tYXItbmF2aWdhdGlvblwiXHJcbiAgICAgICAgc2hvd0ZlZWRiYWNrPXtzaG93RmVlZGJhY2t9XHJcbiAgICAgICAgaXNDb3JyZWN0PXtpc0NvcnJlY3R9XHJcbiAgICAgICAgY2FuQ2hlY2tBbnN3ZXI9e2NhbkNoZWNrQW5zd2VyfVxyXG4gICAgICAgIG9uQ2hlY2tBbnN3ZXI9e2hhbmRsZUNoZWNrQW5zd2VyfVxyXG4gICAgICAgIG9uUHJldmlvdXNFeGVyY2lzZT17aGFuZGxlUHJldmlvdXNFeGVyY2lzZX1cclxuICAgICAgICBvbk5leHRFeGVyY2lzZT17aGFuZGxlTmV4dEV4ZXJjaXNlfVxyXG4gICAgICAgIG9uUmV0cnlFeGVyY2lzZT17aGFuZGxlUmV0cnlFeGVyY2lzZX1cclxuICAgICAgICBvblNraXBFeGVyY2lzZT17aGFuZGxlU2tpcEV4ZXJjaXNlfVxyXG4gICAgICAgIGlzRmlyc3RFeGVyY2lzZT17aXNGaXJzdEV4ZXJjaXNlfVxyXG4gICAgICAgIGlzTGFzdEV4ZXJjaXNlPXtpc0xhc3RFeGVyY2lzZX1cclxuICAgICAgICBhdHRlbXB0cz17YXR0ZW1wdHN9XHJcbiAgICAgICAgbGV2ZWxDb2xvcj17bGV2ZWxDb2xvcn1cclxuICAgICAgLz5cclxuICAgIDwvQ29udGFpbmVyPlxyXG4gICk7XHJcbn07XHJcblxyXG4vLyDinIUgQWpvdXQgZGUgbGEgdmFsaWRhdGlvbiBkZXMgcHJvcHNcclxuR3JhbW1hckV4ZXJjaXNlLnByb3BUeXBlcyA9IHtcclxuICByb3V0ZTogUHJvcFR5cGVzLnNoYXBlKHtcclxuICAgIHBhcmFtczogUHJvcFR5cGVzLnNoYXBlKHtcclxuICAgICAgbGV2ZWw6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcclxuICAgIH0pLFxyXG4gIH0pLmlzUmVxdWlyZWQsXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBHcmFtbWFyRXhlcmNpc2U7Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUEsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsT0FBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsV0FBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksVUFBQSxHQUFBQyxzQkFBQSxDQUFBTCxPQUFBO0FBR0EsSUFBQU0sVUFBQSxHQUFBQyx1QkFBQSxDQUFBUCxPQUFBO0FBR0EsSUFBQVEsY0FBQSxHQUFBSCxzQkFBQSxDQUFBTCxPQUFBO0FBQ0EsSUFBQVMsb0JBQUEsR0FBQUosc0JBQUEsQ0FBQUwsT0FBQTtBQUNBLElBQUFVLGdCQUFBLEdBQUFMLHNCQUFBLENBQUFMLE9BQUE7QUFDQSxJQUFBVyxtQkFBQSxHQUFBTixzQkFBQSxDQUFBTCxPQUFBO0FBQ0EsSUFBQVksd0JBQUEsR0FBQVAsc0JBQUEsQ0FBQUwsT0FBQTtBQUNBLElBQUFhLGdCQUFBLEdBQUFSLHNCQUFBLENBQUFMLE9BQUE7QUFDQSxJQUFBYyxrQkFBQSxHQUFBVCxzQkFBQSxDQUFBTCxPQUFBO0FBR0EsSUFBQWUsWUFBQSxHQUFBVixzQkFBQSxDQUFBTCxPQUFBO0FBQ0EsSUFBQWdCLGtCQUFBLEdBQUFoQixPQUFBO0FBQ0EsSUFBQWlCLE1BQUEsR0FBQVosc0JBQUEsQ0FBQUwsT0FBQTtBQUFtQyxJQUFBa0IsV0FBQSxHQUFBbEIsT0FBQTtBQUFBLFNBQUFPLHdCQUFBWSxDQUFBLEVBQUFDLENBQUEsNkJBQUFDLE9BQUEsTUFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBZCx1QkFBQSxZQUFBQSx3QkFBQVksQ0FBQSxFQUFBQyxDQUFBLFNBQUFBLENBQUEsSUFBQUQsQ0FBQSxJQUFBQSxDQUFBLENBQUFLLFVBQUEsU0FB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Qm1ILFFBQVEsRUFBRTlFLGVBQWdCO1FBQzFCWCxjQUFjLEVBQUVBLGNBQWU7UUFDL0JDLGlCQUFpQixFQUFFQSxpQkFBa0I7UUFDckNDLFNBQVMsRUFBRUEsU0FBVTtRQUNyQkMsWUFBWSxFQUFFQSxZQUFhO1FBQzNCQyxZQUFZLEVBQUVBLFlBQWE7UUFDM0JDLFNBQVMsRUFBRUEsU0FBVTtRQUNyQk4sYUFBYSxFQUFFQSxhQUFjO1FBQzdCTyxRQUFRLEVBQUVBO01BQVMsQ0FDcEI7SUFBQyxHQVhPLFlBQVlQLGFBQWEsSUFBSU8sUUFBUSxFQVkxQyxDQUNQLEVBR0QsSUFBQTNDLFdBQUEsQ0FBQWdHLEdBQUEsRUFBQ3JHLGdCQUFBLENBQUFnQixPQUFlO01BQ2RvSCxTQUFTLEVBQUV0RixZQUFhO01BQ3hCQyxTQUFTLEVBQUVBLFNBQVU7TUFDckJzRixXQUFXLEVBQUVoRixlQUFlLG9CQUFmQSxlQUFlLENBQUVnRixXQUFZO01BQzFDQyxhQUFhLEVBQUVqRixlQUFlLG9CQUFmQSxlQUFlLENBQUVrRixNQUFPO01BQ3ZDdkYsUUFBUSxFQUFFQTtJQUFTLENBQ3BCLENBQUMsRUFHRixJQUFBM0MsV0FBQSxDQUFBZ0csR0FBQSxFQUFDcEcsa0JBQUEsQ0FBQWUsT0FBaUI7TUFDaEJtRyxNQUFNLEVBQUMsb0JBQW9CO01BQzNCckUsWUFBWSxFQUFFQSxZQUFhO01BQzNCQyxTQUFTLEVBQUVBLFNBQVU7TUFDckJPLGNBQWMsRUFBRUEsY0FBZTtNQUMvQmtGLGFBQWEsRUFBRS9DLGlCQUFrQjtNQUNqQ2dELGtCQUFrQixFQUFFN0Msc0JBQXVCO01BQzNDOEMsY0FBYyxFQUFFaEQsa0JBQW1CO01BQ25DaUQsZUFBZSxFQUFFOUMsbUJBQW9CO01BQ3JDK0MsY0FBYyxFQUFFOUMsa0JBQW1CO01BQ25DdkMsZUFBZSxFQUFFQSxlQUFnQjtNQUNqQ0MsY0FBYyxFQUFFQSxjQUFlO01BQy9CUixRQUFRLEVBQUVBLFFBQVM7TUFDbkJlLFVBQVUsRUFBRUE7SUFBVyxDQUN4QixDQUFDO0VBQUEsQ0FDTyxDQUFDO0FBRWhCLENBQUM7QUFHRHJDLGVBQWUsQ0FBQ21ILFNBQVMsR0FBRztFQUMxQmpILEtBQUssRUFBRWtILGtCQUFTLENBQUNDLEtBQUssQ0FBQztJQUNyQi9HLE1BQU0sRUFBRThHLGtCQUFTLENBQUNDLEtBQUssQ0FBQztNQUN0QjdHLEtBQUssRUFBRTRHLGtCQUFTLENBQUNFLE1BQU0sQ0FBQ0M7SUFDMUIsQ0FBQztFQUNILENBQUMsQ0FBQyxDQUFDQTtBQUNMLENBQUM7QUFBQyxJQUFBQyxRQUFBLEdBQUFDLE9BQUEsQ0FBQW5JLE9BQUEsR0FFYVUsZUFBZSIsImlnbm9yZUxpc3QiOltdfQ==