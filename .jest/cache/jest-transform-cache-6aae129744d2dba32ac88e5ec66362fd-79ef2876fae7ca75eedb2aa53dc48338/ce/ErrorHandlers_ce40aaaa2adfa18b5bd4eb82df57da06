ec33e54d44e4243685d348ef581f86b7
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onCaughtError = onCaughtError;
exports.onRecoverableError = onRecoverableError;
exports.onUncaughtError = onUncaughtError;
var _ExceptionsManager = require("../../../../Libraries/Core/ExceptionsManager");
function onUncaughtError(errorValue, errorInfo) {
  var error;
  if (errorValue instanceof Error) {
    error = errorValue;
  } else if (typeof errorValue === 'string') {
    error = new _ExceptionsManager.SyntheticError(errorValue);
  } else {
    error = new _ExceptionsManager.SyntheticError('Unspecified error');
  }
  try {
    error.componentStack = errorInfo.componentStack;
    error.isComponentError = true;
  } catch (_unused) {}
  (0, _ExceptionsManager.handleException)(error, true);
}
function onCaughtError(errorValue, errorInfo) {
  var error;
  if (errorValue instanceof Error) {
    error = errorValue;
  } else if (typeof errorValue === 'string') {
    error = new _ExceptionsManager.SyntheticError(errorValue);
  } else {
    error = new _ExceptionsManager.SyntheticError('Unspecified error');
  }
  try {
    error.componentStack = errorInfo.componentStack;
    error.isComponentError = true;
  } catch (_unused2) {}
  (0, _ExceptionsManager.handleException)(error, false);
}
function onRecoverableError(errorValue, errorInfo) {
  var error;
  if (errorValue instanceof Error) {
    error = errorValue;
  } else if (typeof errorValue === 'string') {
    error = new _ExceptionsManager.SyntheticError(errorValue);
  } else {
    error = new _ExceptionsManager.SyntheticError('Unspecified error');
  }
  try {
    error.componentStack = errorInfo.componentStack;
    error.isComponentError = true;
  } catch (_unused3) {}
  console.warn(error);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,