323bb942d2dccd7beca59c8872150106
_getJestObj().mock('expo-linear-gradient', function () {
  return {
    LinearGradient: function LinearGradient(_ref) {
      var children = _ref.children;
      return children;
    }
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
_getJestObj().mock('../../../src/contexts/ProgressContext', function () {
  return {
    useProgress: jest.fn()
  };
});
_getJestObj().mock('../../../src/contexts/CurrentLevelContext', function () {
  return {
    useCurrentLevel: jest.fn()
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/hooks/useDashboardLevel', function () {
  return {
    useDashboardLevel: jest.fn()
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/hooks/useDashboardState', function () {
  return {
    useDashboardState: jest.fn()
  };
});
_getJestObj().mock('../../../src/hooks/useLastActivity', function () {
  return {
    __esModule: true,
    default: jest.fn()
  };
});
_getJestObj().mock('../../../src/hooks/useRealTimeProgress', function () {
  return {
    __esModule: true,
    default: jest.fn()
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/ModernHeader', function () {
  return function (_ref2) {
    var level = _ref2.level;
    return `ModernHeader-${level}`;
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/HeroContinueSection', function () {
  return function (_ref3) {
    var lastActivity = _ref3.lastActivity,
      isLoading = _ref3.isLoading;
    return `HeroContinueSection-${(lastActivity == null ? void 0 : lastActivity.type) || 'none'}-${isLoading}`;
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/QuickActions', function () {
  return function (_ref4) {
    var currentLevel = _ref4.currentLevel;
    return `QuickActions-${currentLevel}`;
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/SimpleMetrics', function () {
  return function () {
    return 'SimpleMetrics';
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/LearningProgress', function () {
  return function (_ref5) {
    var globalProgress = _ref5.globalProgress,
      currentLevel = _ref5.currentLevel;
    return `LearningProgress-${globalProgress}-${currentLevel}`;
  };
});
_getJestObj().mock('../../../src/screens/VocabularyRevision/RevisionOrchestrator', function () {
  return function (_ref6) {
    var currentLevel = _ref6.currentLevel;
    return `RevisionOrchestrator-${currentLevel}`;
  };
});
_getJestObj().mock('../../../src/components/layout/Container', function () {
  return function (_ref7) {
    var children = _ref7.children;
    return children;
  };
});
_getJestObj().mock('../../../src/utils/constants', function () {
  return {
    LANGUAGE_LEVELS: {
      '1': {
        title: 'D√©butant',
        color: '#10B981',
        icon: 'üå±'
      },
      '2': {
        title: '√âl√©mentaire',
        color: '#3B82F6',
        icon: 'üìö'
      },
      '3': {
        title: 'Interm√©diaire',
        color: '#8B5CF6',
        icon: 'üéØ'
      }
    },
    EXERCISES: {
      vocabulary: {
        id: 'vocabulary',
        route: '/tabs/vocabulary'
      },
      grammar: {
        id: 'grammar',
        route: '/tabs/grammar'
      }
    },
    CONTAINER_SAFE_EDGES: {
      NO_BOTTOM: []
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Dashboard = _interopRequireDefault(require("../../../src/screens/Dashboard"));
var _ThemeContext = require("../../../src/contexts/ThemeContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require6 = require("@jest/globals"),
    jest = _require6.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Dashboard - Tests d\'int√©gration', function () {
  var mockTheme = {
    colors: {
      background: '#F8FAFC',
      primary: '#3B82F6',
      surface: '#FFFFFF',
      text: '#1F2937',
      textSecondary: '#6B7280'
    }
  };
  var _require = require('../../../src/contexts/ProgressContext'),
    useProgress = _require.useProgress;
  var _require2 = require('../../../src/contexts/CurrentLevelContext'),
    useCurrentLevel = _require2.useCurrentLevel;
  var _require3 = require('../../../src/screens/Dashboard/hooks/useDashboardLevel'),
    useDashboardLevel = _require3.useDashboardLevel;
  var _require4 = require('../../../src/screens/Dashboard/hooks/useDashboardState'),
    useDashboardState = _require4.useDashboardState;
  var useLastActivity = require('../../../src/hooks/useLastActivity').default;
  var useRealTimeProgress = require('../../../src/hooks/useRealTimeProgress').default;
  var setupMocks = function setupMocks() {
    var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var defaults = {
      progress: {
        isLoading: false,
        progress: {
          level1: 50
        }
      },
      currentLevel: {
        setCurrentLevel: jest.fn()
      },
      dashboardLevel: {
        currentLevel: '1',
        handleChangeActiveLevel: jest.fn(),
        levelColor: '#10B981'
      },
      dashboardState: {
        refreshing: false,
        onRefresh: jest.fn()
      },
      lastActivity: {
        lastActivity: null,
        isLoading: false,
        reload: jest.fn()
      },
      realTimeProgress: {
        getLevelProgress: jest.fn(function () {
          return 25;
        }),
        refresh: jest.fn()
      }
    };
    var mocks = Object.assign({}, defaults, overrides);
    useProgress.mockReturnValue(mocks.progress);
    useCurrentLevel.mockReturnValue(mocks.currentLevel);
    useDashboardLevel.mockReturnValue(mocks.dashboardLevel);
    useDashboardState.mockReturnValue(mocks.dashboardState);
    useLastActivity.mockReturnValue(mocks.lastActivity);
    useRealTimeProgress.mockReturnValue(mocks.realTimeProgress);
  };
  var renderComponent = function renderComponent() {
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
      value: mockTheme,
      children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
    }));
  };
  beforeEach(function () {
    jest.clearAllMocks();
    setupMocks();
  });
  describe('Int√©gration compl√®te', function () {
    it('devrait rendre le dashboard avec tous les composants', function () {
      var _renderComponent = renderComponent(),
        container = _renderComponent.container;
      var content = container.firstChild.props.children.toString();
      expect(content).toContain('ModernHeader-1');
      expect(content).toContain('HeroContinueSection-none-false');
      expect(content).toContain('QuickActions-1');
      expect(content).toContain('SimpleMetrics');
      expect(content).toContain('LearningProgress-25-1');
      expect(content).toContain('RevisionOrchestrator-1');
    });
    it('devrait g√©rer l\'√©tat de chargement', function () {
      setupMocks({
        progress: {
          isLoading: true,
          progress: {}
        }
      });
      var _renderComponent2 = renderComponent(),
        getByText = _renderComponent2.getByText;
      expect(getByText('Chargement du tableau de bord...')).toBeTruthy();
    });
  });
  describe('Int√©gration avec lastActivity', function () {
    it('devrait afficher l\'activit√© en cours', function () {
      setupMocks({
        lastActivity: {
          lastActivity: {
            type: 'vocabulary',
            level: '2',
            title: 'Test Vocab'
          },
          isLoading: false,
          reload: jest.fn()
        }
      });
      var _renderComponent3 = renderComponent(),
        container = _renderComponent3.container;
      var content = container.firstChild.props.children.toString();
      expect(content).toContain('HeroContinueSection-vocabulary-false');
    });
    it('devrait g√©rer l\'√©tat de chargement de l\'activit√©', function () {
      setupMocks({
        lastActivity: {
          lastActivity: null,
          isLoading: true,
          reload: jest.fn()
        }
      });
      var _renderComponent4 = renderComponent(),
        container = _renderComponent4.container;
      var content = container.firstChild.props.children.toString();
      expect(content).toContain('HeroContinueSection-none-true');
    });
  });
  describe('Int√©gration avec les niveaux', function () {
    it('devrait changer de niveau et mettre √† jour l\'affichage', function () {
      setupMocks({
        dashboardLevel: {
          currentLevel: '3',
          handleChangeActiveLevel: jest.fn(),
          levelColor: '#8B5CF6'
        }
      });
      var _renderComponent5 = renderComponent(),
        container = _renderComponent5.container;
      var content = container.firstChild.props.children.toString();
      expect(content).toContain('ModernHeader-3');
      expect(content).toContain('QuickActions-3');
      expect(content).toContain('RevisionOrchestrator-3');
    });
    it('devrait calculer la progression pour diff√©rents niveaux', function () {
      var mockGetLevelProgress = jest.fn();
      mockGetLevelProgress.mockImplementation(function (level) {
        var progressMap = {
          '1': 30,
          '2': 60,
          '3': 90
        };
        return progressMap[level] || 0;
      });
      setupMocks({
        realTimeProgress: {
          getLevelProgress: mockGetLevelProgress,
          refresh: jest.fn()
        }
      });
      var _renderComponent6 = renderComponent(),
        container = _renderComponent6.container;
      var content = container.firstChild.props.children.toString();
      expect(mockGetLevelProgress).toHaveBeenCalledWith('1');
      expect(content).toContain('LearningProgress-30-1');
    });
  });
  describe('Int√©gration avec le refresh', function () {
    it('devrait g√©rer l\'√©tat de refresh', function () {
      setupMocks({
        dashboardState: {
          refreshing: true,
          onRefresh: jest.fn()
        }
      });
      var _renderComponent7 = renderComponent(),
        container = _renderComponent7.container;
      expect(container.firstChild).toBeTruthy();
    });
    it('devrait appeler les fonctions de refresh', function () {
      var mockOnRefresh = jest.fn();
      var mockRefreshProgress = jest.fn();
      setupMocks({
        dashboardState: {
          refreshing: false,
          onRefresh: mockOnRefresh
        },
        realTimeProgress: {
          getLevelProgress: jest.fn(function () {
            return 25;
          }),
          refresh: mockRefreshProgress
        }
      });
      renderComponent();
      expect(useDashboardState).toHaveBeenCalled();
      expect(useRealTimeProgress).toHaveBeenCalled();
    });
  });
  describe('Gestion des erreurs d\'int√©gration', function () {
    it('devrait g√©rer l\'absence de donn√©es de progression', function () {
      setupMocks({
        progress: {
          isLoading: false
        },
        realTimeProgress: {
          getLevelProgress: jest.fn(function () {
            return 0;
          }),
          refresh: jest.fn()
        }
      });
      var _renderComponent8 = renderComponent(),
        container = _renderComponent8.container;
      expect(container.firstChild).toBeTruthy();
    });
    it('devrait g√©rer les hooks qui retournent null', function () {
      setupMocks({
        currentLevel: {},
        dashboardLevel: {
          currentLevel: '1',
          handleChangeActiveLevel: jest.fn(),
          levelColor: '#10B981'
        }
      });
      var _renderComponent9 = renderComponent(),
        container = _renderComponent9.container;
      expect(container.firstChild).toBeTruthy();
    });
  });
  describe('Navigation et callbacks', function () {
    it('devrait int√©grer les callbacks de navigation', function () {
      var _require5 = require('expo-router'),
        router = _require5.router;
      renderComponent();
      expect(router.push).not.toHaveBeenCalled();
    });
    it('devrait synchroniser les contextes lors des changements', function () {
      var mockSetCurrentLevel = jest.fn();
      setupMocks({
        currentLevel: {
          setCurrentLevel: mockSetCurrentLevel
        }
      });
      renderComponent();
      expect(useCurrentLevel).toHaveBeenCalled();
      expect(useDashboardLevel).toHaveBeenCalled();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,