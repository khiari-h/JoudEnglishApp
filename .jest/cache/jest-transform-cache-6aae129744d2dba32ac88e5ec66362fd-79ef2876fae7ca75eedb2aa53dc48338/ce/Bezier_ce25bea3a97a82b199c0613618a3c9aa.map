{"version":3,"names":["Object","defineProperty","exports","value","Bezier","_errors","require","NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","_worklet_861750260573_init_data","code","location","sourceMap","version","A","_e","global","Error","aA1","aA2","__closure","__workletHash","__initData","__stackDetails","_worklet_15931788865116_init_data","B","_worklet_1843480333279_init_data","C","_worklet_8550114449079_init_data","calcBezier","aT","_worklet_6391598310698_init_data","getSlope","_worklet_15540270826686_init_data","binarySubdivide","aX","aA","aB","mX1","mX2","currentX","currentT","i","Math","abs","_worklet_14670662438800_init_data","newtonRaphsonIterate","aGuessT","currentSlope","_worklet_8838947014516_init_data","_worklet_10675384534171_init_data","_worklet_7259248141946_init_data","_worklet_6481408449326_init_data","mY1","mY2","LinearEasing","x","ReanimatedError","sampleValues","Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope","BezierEasing"],"sources":["Bezier.ts"],"sourcesContent":["'use strict';\n\nimport { ReanimatedError } from './errors';\n\n/**\n * https://github.com/gre/bezier-easing BezierEasing - use bezier curve for\n * transition easing function by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\n\nconst NEWTON_ITERATIONS = 4;\nconst NEWTON_MIN_SLOPE = 0.001;\nconst SUBDIVISION_PRECISION = 0.0000001;\nconst SUBDIVISION_MAX_ITERATIONS = 10;\n\nconst kSplineTableSize = 11;\nconst kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\nfunction A(aA1: number, aA2: number): number {\n  'worklet';\n  return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n}\nfunction B(aA1: number, aA2: number): number {\n  'worklet';\n  return 3.0 * aA2 - 6.0 * aA1;\n}\nfunction C(aA1: number) {\n  'worklet';\n  return 3.0 * aA1;\n}\n\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nfunction calcBezier(aT: number, aA1: number, aA2: number): number {\n  'worklet';\n  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n}\n\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\nfunction getSlope(aT: number, aA1: number, aA2: number): number {\n  'worklet';\n  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n}\n\nfunction binarySubdivide(\n  aX: number,\n  aA: number,\n  aB: number,\n  mX1: number,\n  mX2: number\n): number {\n  'worklet';\n  let currentX;\n  let currentT;\n  let i = 0;\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (\n    Math.abs(currentX) > SUBDIVISION_PRECISION &&\n    ++i < SUBDIVISION_MAX_ITERATIONS\n  );\n  return currentT;\n}\n\nfunction newtonRaphsonIterate(\n  aX: number,\n  aGuessT: number,\n  mX1: number,\n  mX2: number\n): number {\n  'worklet';\n  for (let i = 0; i < NEWTON_ITERATIONS; ++i) {\n    const currentSlope = getSlope(aGuessT, mX1, mX2);\n    if (currentSlope === 0.0) {\n      return aGuessT;\n    }\n    const currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n    aGuessT -= currentX / currentSlope;\n  }\n  return aGuessT;\n}\n\nexport function Bezier(\n  mX1: number,\n  mY1: number,\n  mX2: number,\n  mY2: number\n): (x: number) => number {\n  'worklet';\n\n  function LinearEasing(x: number): number {\n    'worklet';\n    return x;\n  }\n\n  if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n    throw new ReanimatedError('Bezier x values must be in [0, 1] range.');\n  }\n\n  if (mX1 === mY1 && mX2 === mY2) {\n    return LinearEasing;\n  }\n\n  const sampleValues = new Array(kSplineTableSize);\n\n  // Precompute samples table\n  for (let i = 0; i < kSplineTableSize; ++i) {\n    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n  }\n\n  function getTForX(aX: number): number {\n    'worklet';\n    let intervalStart = 0.0;\n    let currentSample = 1;\n    const lastSample = kSplineTableSize - 1;\n\n    for (\n      ;\n      currentSample !== lastSample && sampleValues[currentSample] <= aX;\n      ++currentSample\n    ) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n\n    // Interpolate to provide an initial guess for t\n    const dist =\n      (aX - sampleValues[currentSample]) /\n      (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    const guessForT = intervalStart + dist * kSampleStepSize;\n\n    const initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(\n        aX,\n        intervalStart,\n        intervalStart + kSampleStepSize,\n        mX1,\n        mX2\n      );\n    }\n  }\n\n  return function BezierEasing(x) {\n    'worklet';\n    if (mX1 === mY1 && mX2 === mY2) {\n      return x; // linear\n    }\n    // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n    if (x === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n}\n"],"mappings":"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","ignoreList":[]}