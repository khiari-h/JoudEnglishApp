c5db5fb614177c18c27ea6043c86665b
_getJestObj().mock('expo-router', function () {
  return {
    useSegments: jest.fn(),
    usePathname: jest.fn()
  };
});
_getJestObj().mock('../../src/hooks/useActivityMetrics', function () {
  return {
    __esModule: true,
    default: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactHooks = require("@testing-library/react-hooks");
var _useRouteActivityTracker = _interopRequireDefault(require("../../src/hooks/useRouteActivityTracker"));
function _getJestObj() {
  var _require20 = require("@jest/globals"),
    jest = _require20.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useRouteActivityTracker', function () {
  var mockStartSession = jest.fn();
  var mockEndSession = jest.fn();
  var mockUpdateStreak = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
    var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
    useActivityMetrics.mockReturnValue({
      startSession: mockStartSession,
      endSession: mockEndSession,
      updateStreak: mockUpdateStreak
    });
  });
  describe('Détection des exercices', function () {
    it('devrait démarrer une session pour un exercice', function () {
      var _require = require('expo-router'),
        useSegments = _require.useSegments,
        usePathname = _require.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      (0, _reactHooks.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');
    });
    it('devrait démarrer une session pour un assessment', function () {
      var _require2 = require('expo-router'),
        useSegments = _require2.useSegments,
        usePathname = _require2.usePathname;
      useSegments.mockReturnValue(['level', 'Assessment']);
      usePathname.mockReturnValue('/level/Assessment');
      (0, _reactHooks.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('Assessment');
    });
    it('devrait détecter les exercices avec "exercise" en minuscules', function () {
      var _require3 = require('expo-router'),
        useSegments = _require3.useSegments,
        usePathname = _require3.usePathname;
      useSegments.mockReturnValue(['level', 'grammar-exercise']);
      usePathname.mockReturnValue('/level/grammar-exercise');
      (0, _reactHooks.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('grammar-exercise');
    });
    it('devrait détecter les assessments avec "assessment" en minuscules', function () {
      var _require4 = require('expo-router'),
        useSegments = _require4.useSegments,
        usePathname = _require4.usePathname;
      useSegments.mockReturnValue(['level', 'reading-assessment']);
      usePathname.mockReturnValue('/level/reading-assessment');
      (0, _reactHooks.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('reading-assessment');
    });
    it('ne devrait pas démarrer de session pour une page normale', function () {
      var _require5 = require('expo-router'),
        useSegments = _require5.useSegments,
        usePathname = _require5.usePathname;
      useSegments.mockReturnValue(['home', 'dashboard']);
      usePathname.mockReturnValue('/home/dashboard');
      (0, _reactHooks.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).not.toHaveBeenCalled();
    });
  });
  describe('Changement de route', function () {
    it('devrait terminer la session précédente et en démarrer une nouvelle', function () {
      var _require6 = require('expo-router'),
        useSegments = _require6.useSegments,
        usePathname = _require6.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      var _renderHook = (0, _reactHooks.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        }),
        rerender = _renderHook.rerender;
      expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');
      useSegments.mockReturnValue(['level', 'GrammarExercise']);
      usePathname.mockReturnValue('/level/GrammarExercise');
      rerender();
      expect(mockEndSession).toHaveBeenCalled();
      expect(mockUpdateStreak).toHaveBeenCalled();
      expect(mockStartSession).toHaveBeenCalledWith('GrammarExercise');
    });
    it('devrait terminer la session en quittant un exercice', function () {
      var _require7 = require('expo-router'),
        useSegments = _require7.useSegments,
        usePathname = _require7.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      var _renderHook2 = (0, _reactHooks.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        }),
        rerender = _renderHook2.rerender;
      expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');
      useSegments.mockReturnValue(['home', 'dashboard']);
      usePathname.mockReturnValue('/home/dashboard');
      rerender();
      expect(mockEndSession).toHaveBeenCalled();
      expect(mockUpdateStreak).toHaveBeenCalled();
    });
    it('ne devrait pas redéclencher si le pathname ne change pas', function () {
      var _require8 = require('expo-router'),
        useSegments = _require8.useSegments,
        usePathname = _require8.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      var _renderHook3 = (0, _reactHooks.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        }),
        rerender = _renderHook3.rerender;
      expect(mockStartSession).toHaveBeenCalledTimes(1);
      rerender();
      expect(mockStartSession).toHaveBeenCalledTimes(1);
    });
  });
  describe('Gestion des erreurs', function () {
    it('devrait gérer les erreurs lors du démarrage de session', function () {
      var _require9 = require('expo-router'),
        useSegments = _require9.useSegments,
        usePathname = _require9.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      mockStartSession.mockImplementation(function () {
        throw new Error('Start session error');
      });
      expect(function () {
        (0, _reactHooks.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        });
      }).not.toThrow();
    });
    it('devrait gérer les erreurs lors de la fin de session', function () {
      var _require0 = require('expo-router'),
        useSegments = _require0.useSegments,
        usePathname = _require0.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      var _renderHook4 = (0, _reactHooks.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        }),
        rerender = _renderHook4.rerender;
      mockEndSession.mockImplementation(function () {
        throw new Error('End session error');
      });
      useSegments.mockReturnValue(['home', 'dashboard']);
      usePathname.mockReturnValue('/home/dashboard');
      expect(function () {
        rerender();
      }).not.toThrow();
    });
    it('devrait gérer les erreurs lors de la mise à jour du streak', function () {
      var _require1 = require('expo-router'),
        useSegments = _require1.useSegments,
        usePathname = _require1.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      var _renderHook5 = (0, _reactHooks.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        }),
        rerender = _renderHook5.rerender;
      mockUpdateStreak.mockImplementation(function () {
        throw new Error('Update streak error');
      });
      useSegments.mockReturnValue(['home', 'dashboard']);
      usePathname.mockReturnValue('/home/dashboard');
      expect(function () {
        rerender();
      }).not.toThrow();
    });
  });
  describe('Cleanup', function () {
    it('devrait terminer la session lors du démontage', function () {
      var _require10 = require('expo-router'),
        useSegments = _require10.useSegments,
        usePathname = _require10.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      var _renderHook6 = (0, _reactHooks.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        }),
        unmount = _renderHook6.unmount;
      expect(mockStartSession).toHaveBeenCalled();
      unmount();
      expect(mockEndSession).toHaveBeenCalled();
    });
    it('devrait gérer les erreurs lors du cleanup', function () {
      var _require11 = require('expo-router'),
        useSegments = _require11.useSegments,
        usePathname = _require11.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      mockEndSession.mockImplementation(function () {
        throw new Error('Cleanup error');
      });
      var _renderHook7 = (0, _reactHooks.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        }),
        unmount = _renderHook7.unmount;
      expect(function () {
        unmount();
      }).not.toThrow();
    });
    it('ne devrait pas terminer de session si aucune n\'est active', function () {
      var _require12 = require('expo-router'),
        useSegments = _require12.useSegments,
        usePathname = _require12.usePathname;
      useSegments.mockReturnValue(['home', 'dashboard']);
      usePathname.mockReturnValue('/home/dashboard');
      var _renderHook8 = (0, _reactHooks.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        }),
        unmount = _renderHook8.unmount;
      unmount();
      expect(mockEndSession).not.toHaveBeenCalled();
    });
  });
  describe('Détection de types d\'exercices variés', function () {
    var exerciseTypes = ['VocabularyExercise', 'GrammarExercise', 'ReadingExercise', 'SpellingExercise', 'ConversationExercise', 'PhrasesExercise', 'WordGamesExercise', 'ErrorCorrectionExercise'];
    exerciseTypes.forEach(function (exerciseType) {
      it(`devrait détecter ${exerciseType}`, function () {
        var _require13 = require('expo-router'),
          useSegments = _require13.useSegments,
          usePathname = _require13.usePathname;
        useSegments.mockReturnValue(['level', exerciseType]);
        usePathname.mockReturnValue(`/level/${exerciseType}`);
        (0, _reactHooks.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        });
        expect(mockStartSession).toHaveBeenCalledWith(exerciseType);
      });
    });
    var assessmentTypes = ['VocabularyAssessment', 'GrammarAssessment', 'ReadingAssessment', 'OverallAssessment'];
    assessmentTypes.forEach(function (assessmentType) {
      it(`devrait détecter ${assessmentType}`, function () {
        var _require14 = require('expo-router'),
          useSegments = _require14.useSegments,
          usePathname = _require14.usePathname;
        useSegments.mockReturnValue(['level', assessmentType]);
        usePathname.mockReturnValue(`/level/${assessmentType}`);
        (0, _reactHooks.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        });
        expect(mockStartSession).toHaveBeenCalledWith(assessmentType);
      });
    });
  });
  describe('Segments complexes', function () {
    it('devrait détecter les exercices dans des segments profonds', function () {
      var _require15 = require('expo-router'),
        useSegments = _require15.useSegments,
        usePathname = _require15.usePathname;
      useSegments.mockReturnValue(['app', 'levels', '1', 'vocabulary', 'VocabularyExercise']);
      usePathname.mockReturnValue('/app/levels/1/vocabulary/VocabularyExercise');
      (0, _reactHooks.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');
    });
    it('devrait utiliser le dernier segment comme type d\'exercice', function () {
      var _require16 = require('expo-router'),
        useSegments = _require16.useSegments,
        usePathname = _require16.usePathname;
      useSegments.mockReturnValue(['app', 'exercise', 'GrammarExercise']);
      usePathname.mockReturnValue('/app/exercise/GrammarExercise');
      (0, _reactHooks.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('GrammarExercise');
    });
    it('devrait gérer les segments vides', function () {
      var _require17 = require('expo-router'),
        useSegments = _require17.useSegments,
        usePathname = _require17.usePathname;
      useSegments.mockReturnValue([]);
      usePathname.mockReturnValue('/');
      (0, _reactHooks.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).not.toHaveBeenCalled();
    });
  });
  describe('Prévention des boucles', function () {
    it('ne devrait pas redémarrer la même session', function () {
      var _require18 = require('expo-router'),
        useSegments = _require18.useSegments,
        usePathname = _require18.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      var _renderHook9 = (0, _reactHooks.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        }),
        rerender = _renderHook9.rerender;
      expect(mockStartSession).toHaveBeenCalledTimes(1);
      rerender();
      expect(mockStartSession).toHaveBeenCalledTimes(1);
      expect(mockEndSession).not.toHaveBeenCalled();
    });
    it('devrait redémarrer si le type d\'exercice change', function () {
      var _require19 = require('expo-router'),
        useSegments = _require19.useSegments,
        usePathname = _require19.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      var _renderHook0 = (0, _reactHooks.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        }),
        rerender = _renderHook0.rerender;
      expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');
      useSegments.mockReturnValue(['level', 'GrammarExercise']);
      usePathname.mockReturnValue('/level/GrammarExercise');
      rerender();
      expect(mockEndSession).toHaveBeenCalled();
      expect(mockStartSession).toHaveBeenCalledWith('GrammarExercise');
    });
  });
  describe('Intégration avec useActivityMetrics', function () {
    it('devrait utiliser les bonnes fonctions de useActivityMetrics', function () {
      var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
      (0, _reactHooks.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(useActivityMetrics).toHaveBeenCalled();
    });
    it('devrait gérer l\'absence de useActivityMetrics', function () {
      var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
      useActivityMetrics.mockReturnValue({
        startSession: undefined,
        endSession: undefined,
        updateStreak: undefined
      });
      expect(function () {
        (0, _reactHooks.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        });
      }).not.toThrow();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VTZWdtZW50cyIsImplc3QiLCJmbiIsInVzZVBhdGhuYW1lIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdEhvb2tzIiwiX3VzZVJvdXRlQWN0aXZpdHlUcmFja2VyIiwiX3JlcXVpcmUyMCIsImRlc2NyaWJlIiwibW9ja1N0YXJ0U2Vzc2lvbiIsIm1vY2tFbmRTZXNzaW9uIiwibW9ja1VwZGF0ZVN0cmVhayIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwidXNlQWN0aXZpdHlNZXRyaWNzIiwibW9ja1JldHVyblZhbHVlIiwic3RhcnRTZXNzaW9uIiwiZW5kU2Vzc2lvbiIsInVwZGF0ZVN0cmVhayIsIml0IiwiX3JlcXVpcmUiLCJyZW5kZXJIb29rIiwidXNlUm91dGVBY3Rpdml0eVRyYWNrZXIiLCJleHBlY3QiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsIl9yZXF1aXJlMiIsIl9yZXF1aXJlMyIsIl9yZXF1aXJlNCIsIl9yZXF1aXJlNSIsIm5vdCIsInRvSGF2ZUJlZW5DYWxsZWQiLCJfcmVxdWlyZTYiLCJfcmVuZGVySG9vayIsInJlcmVuZGVyIiwiX3JlcXVpcmU3IiwiX3JlbmRlckhvb2syIiwiX3JlcXVpcmU4IiwiX3JlbmRlckhvb2szIiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIiwiX3JlcXVpcmU5IiwibW9ja0ltcGxlbWVudGF0aW9uIiwiRXJyb3IiLCJ0b1Rocm93IiwiX3JlcXVpcmUwIiwiX3JlbmRlckhvb2s0IiwiX3JlcXVpcmUxIiwiX3JlbmRlckhvb2s1IiwiX3JlcXVpcmUxMCIsIl9yZW5kZXJIb29rNiIsInVubW91bnQiLCJfcmVxdWlyZTExIiwiX3JlbmRlckhvb2s3IiwiX3JlcXVpcmUxMiIsIl9yZW5kZXJIb29rOCIsImV4ZXJjaXNlVHlwZXMiLCJmb3JFYWNoIiwiZXhlcmNpc2VUeXBlIiwiX3JlcXVpcmUxMyIsImFzc2Vzc21lbnRUeXBlcyIsImFzc2Vzc21lbnRUeXBlIiwiX3JlcXVpcmUxNCIsIl9yZXF1aXJlMTUiLCJfcmVxdWlyZTE2IiwiX3JlcXVpcmUxNyIsIl9yZXF1aXJlMTgiLCJfcmVuZGVySG9vazkiLCJfcmVxdWlyZTE5IiwiX3JlbmRlckhvb2swIiwidW5kZWZpbmVkIl0sInNvdXJjZXMiOlsidXNlUm91dGVBY3Rpdml0eVRyYWNrZXIudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBfX3Rlc3RzX18vaG9va3MvdXNlUm91dGVBY3Rpdml0eVRyYWNrZXIudGVzdC5qc1xuaW1wb3J0IHsgcmVuZGVySG9vayB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtaG9va3MnO1xuaW1wb3J0IHVzZVJvdXRlQWN0aXZpdHlUcmFja2VyIGZyb20gJy4uLy4uL3NyYy9ob29rcy91c2VSb3V0ZUFjdGl2aXR5VHJhY2tlcic7XG5cbi8vIE1vY2sgZXhwby1yb3V0ZXJcbmplc3QubW9jaygnZXhwby1yb3V0ZXInLCAoKSA9PiAoe1xuICB1c2VTZWdtZW50czogamVzdC5mbigpLFxuICB1c2VQYXRobmFtZTogamVzdC5mbigpLFxufSkpO1xuXG4vLyBNb2NrIHVzZUFjdGl2aXR5TWV0cmljc1xuamVzdC5tb2NrKCcuLi8uLi9zcmMvaG9va3MvdXNlQWN0aXZpdHlNZXRyaWNzJywgKCkgPT4gKHtcbiAgX19lc01vZHVsZTogdHJ1ZSxcbiAgZGVmYXVsdDogamVzdC5mbigpLFxufSkpO1xuXG5kZXNjcmliZSgndXNlUm91dGVBY3Rpdml0eVRyYWNrZXInLCAoKSA9PiB7XG4gIGNvbnN0IG1vY2tTdGFydFNlc3Npb24gPSBqZXN0LmZuKCk7XG4gIGNvbnN0IG1vY2tFbmRTZXNzaW9uID0gamVzdC5mbigpO1xuICBjb25zdCBtb2NrVXBkYXRlU3RyZWFrID0gamVzdC5mbigpO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICAgIFxuICAgIC8vIE1vY2sgdXNlQWN0aXZpdHlNZXRyaWNzXG4gICAgY29uc3QgdXNlQWN0aXZpdHlNZXRyaWNzID0gcmVxdWlyZSgnLi4vLi4vc3JjL2hvb2tzL3VzZUFjdGl2aXR5TWV0cmljcycpLmRlZmF1bHQ7XG4gICAgdXNlQWN0aXZpdHlNZXRyaWNzLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICBzdGFydFNlc3Npb246IG1vY2tTdGFydFNlc3Npb24sXG4gICAgICBlbmRTZXNzaW9uOiBtb2NrRW5kU2Vzc2lvbixcbiAgICAgIHVwZGF0ZVN0cmVhazogbW9ja1VwZGF0ZVN0cmVhayxcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0TDqXRlY3Rpb24gZGVzIGV4ZXJjaWNlcycsICgpID0+IHtcbiAgICBpdCgnZGV2cmFpdCBkw6ltYXJyZXIgdW5lIHNlc3Npb24gcG91ciB1biBleGVyY2ljZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgdXNlU2VnbWVudHMsIHVzZVBhdGhuYW1lIH0gPSByZXF1aXJlKCdleHBvLXJvdXRlcicpO1xuICAgICAgdXNlU2VnbWVudHMubW9ja1JldHVyblZhbHVlKFsnbGV2ZWwnLCAnVm9jYWJ1bGFyeUV4ZXJjaXNlJ10pO1xuICAgICAgdXNlUGF0aG5hbWUubW9ja1JldHVyblZhbHVlKCcvbGV2ZWwvVm9jYWJ1bGFyeUV4ZXJjaXNlJyk7XG5cbiAgICAgIHJlbmRlckhvb2soKCkgPT4gdXNlUm91dGVBY3Rpdml0eVRyYWNrZXIoKSk7XG5cbiAgICAgIGV4cGVjdChtb2NrU3RhcnRTZXNzaW9uKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnVm9jYWJ1bGFyeUV4ZXJjaXNlJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2cmFpdCBkw6ltYXJyZXIgdW5lIHNlc3Npb24gcG91ciB1biBhc3Nlc3NtZW50JywgKCkgPT4ge1xuICAgICAgY29uc3QgeyB1c2VTZWdtZW50cywgdXNlUGF0aG5hbWUgfSA9IHJlcXVpcmUoJ2V4cG8tcm91dGVyJyk7XG4gICAgICB1c2VTZWdtZW50cy5tb2NrUmV0dXJuVmFsdWUoWydsZXZlbCcsICdBc3Nlc3NtZW50J10pO1xuICAgICAgdXNlUGF0aG5hbWUubW9ja1JldHVyblZhbHVlKCcvbGV2ZWwvQXNzZXNzbWVudCcpO1xuXG4gICAgICByZW5kZXJIb29rKCgpID0+IHVzZVJvdXRlQWN0aXZpdHlUcmFja2VyKCkpO1xuXG4gICAgICBleHBlY3QobW9ja1N0YXJ0U2Vzc2lvbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ0Fzc2Vzc21lbnQnKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZyYWl0IGTDqXRlY3RlciBsZXMgZXhlcmNpY2VzIGF2ZWMgXCJleGVyY2lzZVwiIGVuIG1pbnVzY3VsZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHVzZVNlZ21lbnRzLCB1c2VQYXRobmFtZSB9ID0gcmVxdWlyZSgnZXhwby1yb3V0ZXInKTtcbiAgICAgIHVzZVNlZ21lbnRzLm1vY2tSZXR1cm5WYWx1ZShbJ2xldmVsJywgJ2dyYW1tYXItZXhlcmNpc2UnXSk7XG4gICAgICB1c2VQYXRobmFtZS5tb2NrUmV0dXJuVmFsdWUoJy9sZXZlbC9ncmFtbWFyLWV4ZXJjaXNlJyk7XG5cbiAgICAgIHJlbmRlckhvb2soKCkgPT4gdXNlUm91dGVBY3Rpdml0eVRyYWNrZXIoKSk7XG5cbiAgICAgIGV4cGVjdChtb2NrU3RhcnRTZXNzaW9uKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnZ3JhbW1hci1leGVyY2lzZScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldnJhaXQgZMOpdGVjdGVyIGxlcyBhc3Nlc3NtZW50cyBhdmVjIFwiYXNzZXNzbWVudFwiIGVuIG1pbnVzY3VsZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHVzZVNlZ21lbnRzLCB1c2VQYXRobmFtZSB9ID0gcmVxdWlyZSgnZXhwby1yb3V0ZXInKTtcbiAgICAgIHVzZVNlZ21lbnRzLm1vY2tSZXR1cm5WYWx1ZShbJ2xldmVsJywgJ3JlYWRpbmctYXNzZXNzbWVudCddKTtcbiAgICAgIHVzZVBhdGhuYW1lLm1vY2tSZXR1cm5WYWx1ZSgnL2xldmVsL3JlYWRpbmctYXNzZXNzbWVudCcpO1xuXG4gICAgICByZW5kZXJIb29rKCgpID0+IHVzZVJvdXRlQWN0aXZpdHlUcmFja2VyKCkpO1xuXG4gICAgICBleHBlY3QobW9ja1N0YXJ0U2Vzc2lvbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3JlYWRpbmctYXNzZXNzbWVudCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ25lIGRldnJhaXQgcGFzIGTDqW1hcnJlciBkZSBzZXNzaW9uIHBvdXIgdW5lIHBhZ2Ugbm9ybWFsZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgdXNlU2VnbWVudHMsIHVzZVBhdGhuYW1lIH0gPSByZXF1aXJlKCdleHBvLXJvdXRlcicpO1xuICAgICAgdXNlU2VnbWVudHMubW9ja1JldHVyblZhbHVlKFsnaG9tZScsICdkYXNoYm9hcmQnXSk7XG4gICAgICB1c2VQYXRobmFtZS5tb2NrUmV0dXJuVmFsdWUoJy9ob21lL2Rhc2hib2FyZCcpO1xuXG4gICAgICByZW5kZXJIb29rKCgpID0+IHVzZVJvdXRlQWN0aXZpdHlUcmFja2VyKCkpO1xuXG4gICAgICBleHBlY3QobW9ja1N0YXJ0U2Vzc2lvbikubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0NoYW5nZW1lbnQgZGUgcm91dGUnLCAoKSA9PiB7XG4gICAgaXQoJ2RldnJhaXQgdGVybWluZXIgbGEgc2Vzc2lvbiBwcsOpY8OpZGVudGUgZXQgZW4gZMOpbWFycmVyIHVuZSBub3V2ZWxsZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgdXNlU2VnbWVudHMsIHVzZVBhdGhuYW1lIH0gPSByZXF1aXJlKCdleHBvLXJvdXRlcicpO1xuICAgICAgXG4gICAgICAvLyBQcmVtaWVyIHJlbmRlciAtIGV4ZXJjaWNlIGRlIHZvY2FidWxhaXJlXG4gICAgICB1c2VTZWdtZW50cy5tb2NrUmV0dXJuVmFsdWUoWydsZXZlbCcsICdWb2NhYnVsYXJ5RXhlcmNpc2UnXSk7XG4gICAgICB1c2VQYXRobmFtZS5tb2NrUmV0dXJuVmFsdWUoJy9sZXZlbC9Wb2NhYnVsYXJ5RXhlcmNpc2UnKTtcblxuICAgICAgY29uc3QgeyByZXJlbmRlciB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VSb3V0ZUFjdGl2aXR5VHJhY2tlcigpKTtcblxuICAgICAgZXhwZWN0KG1vY2tTdGFydFNlc3Npb24pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdWb2NhYnVsYXJ5RXhlcmNpc2UnKTtcblxuICAgICAgLy8gQ2hhbmdlbWVudCB2ZXJzIGV4ZXJjaWNlIGRlIGdyYW1tYWlyZVxuICAgICAgdXNlU2VnbWVudHMubW9ja1JldHVyblZhbHVlKFsnbGV2ZWwnLCAnR3JhbW1hckV4ZXJjaXNlJ10pO1xuICAgICAgdXNlUGF0aG5hbWUubW9ja1JldHVyblZhbHVlKCcvbGV2ZWwvR3JhbW1hckV4ZXJjaXNlJyk7XG5cbiAgICAgIHJlcmVuZGVyKCk7XG5cbiAgICAgIGV4cGVjdChtb2NrRW5kU2Vzc2lvbikudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgZXhwZWN0KG1vY2tVcGRhdGVTdHJlYWspLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChtb2NrU3RhcnRTZXNzaW9uKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnR3JhbW1hckV4ZXJjaXNlJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2cmFpdCB0ZXJtaW5lciBsYSBzZXNzaW9uIGVuIHF1aXR0YW50IHVuIGV4ZXJjaWNlJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyB1c2VTZWdtZW50cywgdXNlUGF0aG5hbWUgfSA9IHJlcXVpcmUoJ2V4cG8tcm91dGVyJyk7XG4gICAgICBcbiAgICAgIC8vIFByZW1pZXIgcmVuZGVyIC0gZXhlcmNpY2VcbiAgICAgIHVzZVNlZ21lbnRzLm1vY2tSZXR1cm5WYWx1ZShbJ2xldmVsJywgJ1ZvY2FidWxhcnlFeGVyY2lzZSddKTtcbiAgICAgIHVzZVBhdGhuYW1lLm1vY2tSZXR1cm5WYWx1ZSgnL2xldmVsL1ZvY2FidWxhcnlFeGVyY2lzZScpO1xuXG4gICAgICBjb25zdCB7IHJlcmVuZGVyIH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVJvdXRlQWN0aXZpdHlUcmFja2VyKCkpO1xuXG4gICAgICBleHBlY3QobW9ja1N0YXJ0U2Vzc2lvbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ1ZvY2FidWxhcnlFeGVyY2lzZScpO1xuXG4gICAgICAvLyBDaGFuZ2VtZW50IHZlcnMgcGFnZSBub3JtYWxlXG4gICAgICB1c2VTZWdtZW50cy5tb2NrUmV0dXJuVmFsdWUoWydob21lJywgJ2Rhc2hib2FyZCddKTtcbiAgICAgIHVzZVBhdGhuYW1lLm1vY2tSZXR1cm5WYWx1ZSgnL2hvbWUvZGFzaGJvYXJkJyk7XG5cbiAgICAgIHJlcmVuZGVyKCk7XG5cbiAgICAgIGV4cGVjdChtb2NrRW5kU2Vzc2lvbikudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgZXhwZWN0KG1vY2tVcGRhdGVTdHJlYWspLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCduZSBkZXZyYWl0IHBhcyByZWTDqWNsZW5jaGVyIHNpIGxlIHBhdGhuYW1lIG5lIGNoYW5nZSBwYXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHVzZVNlZ21lbnRzLCB1c2VQYXRobmFtZSB9ID0gcmVxdWlyZSgnZXhwby1yb3V0ZXInKTtcbiAgICAgIFxuICAgICAgdXNlU2VnbWVudHMubW9ja1JldHVyblZhbHVlKFsnbGV2ZWwnLCAnVm9jYWJ1bGFyeUV4ZXJjaXNlJ10pO1xuICAgICAgdXNlUGF0aG5hbWUubW9ja1JldHVyblZhbHVlKCcvbGV2ZWwvVm9jYWJ1bGFyeUV4ZXJjaXNlJyk7XG5cbiAgICAgIGNvbnN0IHsgcmVyZW5kZXIgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlUm91dGVBY3Rpdml0eVRyYWNrZXIoKSk7XG5cbiAgICAgIGV4cGVjdChtb2NrU3RhcnRTZXNzaW9uKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG5cbiAgICAgIC8vIE3Dqm1lIHBhdGhuYW1lXG4gICAgICByZXJlbmRlcigpO1xuXG4gICAgICBleHBlY3QobW9ja1N0YXJ0U2Vzc2lvbikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpOyAvLyBQYXMgZCdhcHBlbCBzdXBwbMOpbWVudGFpcmVcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0dlc3Rpb24gZGVzIGVycmV1cnMnLCAoKSA9PiB7XG4gICAgaXQoJ2RldnJhaXQgZ8OpcmVyIGxlcyBlcnJldXJzIGxvcnMgZHUgZMOpbWFycmFnZSBkZSBzZXNzaW9uJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyB1c2VTZWdtZW50cywgdXNlUGF0aG5hbWUgfSA9IHJlcXVpcmUoJ2V4cG8tcm91dGVyJyk7XG4gICAgICB1c2VTZWdtZW50cy5tb2NrUmV0dXJuVmFsdWUoWydsZXZlbCcsICdWb2NhYnVsYXJ5RXhlcmNpc2UnXSk7XG4gICAgICB1c2VQYXRobmFtZS5tb2NrUmV0dXJuVmFsdWUoJy9sZXZlbC9Wb2NhYnVsYXJ5RXhlcmNpc2UnKTtcblxuICAgICAgbW9ja1N0YXJ0U2Vzc2lvbi5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N0YXJ0IHNlc3Npb24gZXJyb3InKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBOZSBkZXZyYWl0IHBhcyBwbGFudGVyXG4gICAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgICByZW5kZXJIb29rKCgpID0+IHVzZVJvdXRlQWN0aXZpdHlUcmFja2VyKCkpO1xuICAgICAgfSkubm90LnRvVGhyb3coKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZyYWl0IGfDqXJlciBsZXMgZXJyZXVycyBsb3JzIGRlIGxhIGZpbiBkZSBzZXNzaW9uJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyB1c2VTZWdtZW50cywgdXNlUGF0aG5hbWUgfSA9IHJlcXVpcmUoJ2V4cG8tcm91dGVyJyk7XG4gICAgICBcbiAgICAgIC8vIFByZW1pZXIgcmVuZGVyIC0gZXhlcmNpY2VcbiAgICAgIHVzZVNlZ21lbnRzLm1vY2tSZXR1cm5WYWx1ZShbJ2xldmVsJywgJ1ZvY2FidWxhcnlFeGVyY2lzZSddKTtcbiAgICAgIHVzZVBhdGhuYW1lLm1vY2tSZXR1cm5WYWx1ZSgnL2xldmVsL1ZvY2FidWxhcnlFeGVyY2lzZScpO1xuXG4gICAgICBjb25zdCB7IHJlcmVuZGVyIH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVJvdXRlQWN0aXZpdHlUcmFja2VyKCkpO1xuXG4gICAgICBtb2NrRW5kU2Vzc2lvbi5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VuZCBzZXNzaW9uIGVycm9yJyk7XG4gICAgICB9KTtcblxuICAgICAgLy8gQ2hhbmdlbWVudCB2ZXJzIHBhZ2Ugbm9ybWFsZVxuICAgICAgdXNlU2VnbWVudHMubW9ja1JldHVyblZhbHVlKFsnaG9tZScsICdkYXNoYm9hcmQnXSk7XG4gICAgICB1c2VQYXRobmFtZS5tb2NrUmV0dXJuVmFsdWUoJy9ob21lL2Rhc2hib2FyZCcpO1xuXG4gICAgICAvLyBOZSBkZXZyYWl0IHBhcyBwbGFudGVyXG4gICAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgICByZXJlbmRlcigpO1xuICAgICAgfSkubm90LnRvVGhyb3coKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZyYWl0IGfDqXJlciBsZXMgZXJyZXVycyBsb3JzIGRlIGxhIG1pc2Ugw6Agam91ciBkdSBzdHJlYWsnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHVzZVNlZ21lbnRzLCB1c2VQYXRobmFtZSB9ID0gcmVxdWlyZSgnZXhwby1yb3V0ZXInKTtcbiAgICAgIFxuICAgICAgdXNlU2VnbWVudHMubW9ja1JldHVyblZhbHVlKFsnbGV2ZWwnLCAnVm9jYWJ1bGFyeUV4ZXJjaXNlJ10pO1xuICAgICAgdXNlUGF0aG5hbWUubW9ja1JldHVyblZhbHVlKCcvbGV2ZWwvVm9jYWJ1bGFyeUV4ZXJjaXNlJyk7XG5cbiAgICAgIGNvbnN0IHsgcmVyZW5kZXIgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlUm91dGVBY3Rpdml0eVRyYWNrZXIoKSk7XG5cbiAgICAgIG1vY2tVcGRhdGVTdHJlYWsubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVcGRhdGUgc3RyZWFrIGVycm9yJyk7XG4gICAgICB9KTtcblxuICAgICAgLy8gQ2hhbmdlbWVudCB2ZXJzIHBhZ2Ugbm9ybWFsZVxuICAgICAgdXNlU2VnbWVudHMubW9ja1JldHVyblZhbHVlKFsnaG9tZScsICdkYXNoYm9hcmQnXSk7XG4gICAgICB1c2VQYXRobmFtZS5tb2NrUmV0dXJuVmFsdWUoJy9ob21lL2Rhc2hib2FyZCcpO1xuXG4gICAgICAvLyBOZSBkZXZyYWl0IHBhcyBwbGFudGVyXG4gICAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgICByZXJlbmRlcigpO1xuICAgICAgfSkubm90LnRvVGhyb3coKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0NsZWFudXAnLCAoKSA9PiB7XG4gICAgaXQoJ2RldnJhaXQgdGVybWluZXIgbGEgc2Vzc2lvbiBsb3JzIGR1IGTDqW1vbnRhZ2UnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHVzZVNlZ21lbnRzLCB1c2VQYXRobmFtZSB9ID0gcmVxdWlyZSgnZXhwby1yb3V0ZXInKTtcbiAgICAgIHVzZVNlZ21lbnRzLm1vY2tSZXR1cm5WYWx1ZShbJ2xldmVsJywgJ1ZvY2FidWxhcnlFeGVyY2lzZSddKTtcbiAgICAgIHVzZVBhdGhuYW1lLm1vY2tSZXR1cm5WYWx1ZSgnL2xldmVsL1ZvY2FidWxhcnlFeGVyY2lzZScpO1xuXG4gICAgICBjb25zdCB7IHVubW91bnQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlUm91dGVBY3Rpdml0eVRyYWNrZXIoKSk7XG5cbiAgICAgIGV4cGVjdChtb2NrU3RhcnRTZXNzaW9uKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG5cbiAgICAgIHVubW91bnQoKTtcblxuICAgICAgZXhwZWN0KG1vY2tFbmRTZXNzaW9uKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2cmFpdCBnw6lyZXIgbGVzIGVycmV1cnMgbG9ycyBkdSBjbGVhbnVwJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyB1c2VTZWdtZW50cywgdXNlUGF0aG5hbWUgfSA9IHJlcXVpcmUoJ2V4cG8tcm91dGVyJyk7XG4gICAgICB1c2VTZWdtZW50cy5tb2NrUmV0dXJuVmFsdWUoWydsZXZlbCcsICdWb2NhYnVsYXJ5RXhlcmNpc2UnXSk7XG4gICAgICB1c2VQYXRobmFtZS5tb2NrUmV0dXJuVmFsdWUoJy9sZXZlbC9Wb2NhYnVsYXJ5RXhlcmNpc2UnKTtcblxuICAgICAgbW9ja0VuZFNlc3Npb24ubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDbGVhbnVwIGVycm9yJyk7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgeyB1bm1vdW50IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVJvdXRlQWN0aXZpdHlUcmFja2VyKCkpO1xuXG4gICAgICAvLyBOZSBkZXZyYWl0IHBhcyBwbGFudGVyIGxvcnMgZHUgY2xlYW51cFxuICAgICAgZXhwZWN0KCgpID0+IHtcbiAgICAgICAgdW5tb3VudCgpO1xuICAgICAgfSkubm90LnRvVGhyb3coKTtcbiAgICB9KTtcblxuICAgIGl0KCduZSBkZXZyYWl0IHBhcyB0ZXJtaW5lciBkZSBzZXNzaW9uIHNpIGF1Y3VuZSBuXFwnZXN0IGFjdGl2ZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgdXNlU2VnbWVudHMsIHVzZVBhdGhuYW1lIH0gPSByZXF1aXJlKCdleHBvLXJvdXRlcicpO1xuICAgICAgdXNlU2VnbWVudHMubW9ja1JldHVyblZhbHVlKFsnaG9tZScsICdkYXNoYm9hcmQnXSk7XG4gICAgICB1c2VQYXRobmFtZS5tb2NrUmV0dXJuVmFsdWUoJy9ob21lL2Rhc2hib2FyZCcpO1xuXG4gICAgICBjb25zdCB7IHVubW91bnQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlUm91dGVBY3Rpdml0eVRyYWNrZXIoKSk7XG5cbiAgICAgIHVubW91bnQoKTtcblxuICAgICAgZXhwZWN0KG1vY2tFbmRTZXNzaW9uKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRMOpdGVjdGlvbiBkZSB0eXBlcyBkXFwnZXhlcmNpY2VzIHZhcmnDqXMnLCAoKSA9PiB7XG4gICAgY29uc3QgZXhlcmNpc2VUeXBlcyA9IFtcbiAgICAgICdWb2NhYnVsYXJ5RXhlcmNpc2UnLFxuICAgICAgJ0dyYW1tYXJFeGVyY2lzZScsXG4gICAgICAnUmVhZGluZ0V4ZXJjaXNlJyxcbiAgICAgICdTcGVsbGluZ0V4ZXJjaXNlJyxcbiAgICAgICdDb252ZXJzYXRpb25FeGVyY2lzZScsXG4gICAgICAnUGhyYXNlc0V4ZXJjaXNlJyxcbiAgICAgICdXb3JkR2FtZXNFeGVyY2lzZScsXG4gICAgICAnRXJyb3JDb3JyZWN0aW9uRXhlcmNpc2UnXG4gICAgXTtcblxuICAgIGV4ZXJjaXNlVHlwZXMuZm9yRWFjaChleGVyY2lzZVR5cGUgPT4ge1xuICAgICAgaXQoYGRldnJhaXQgZMOpdGVjdGVyICR7ZXhlcmNpc2VUeXBlfWAsICgpID0+IHtcbiAgICAgICAgY29uc3QgeyB1c2VTZWdtZW50cywgdXNlUGF0aG5hbWUgfSA9IHJlcXVpcmUoJ2V4cG8tcm91dGVyJyk7XG4gICAgICAgIHVzZVNlZ21lbnRzLm1vY2tSZXR1cm5WYWx1ZShbJ2xldmVsJywgZXhlcmNpc2VUeXBlXSk7XG4gICAgICAgIHVzZVBhdGhuYW1lLm1vY2tSZXR1cm5WYWx1ZShgL2xldmVsLyR7ZXhlcmNpc2VUeXBlfWApO1xuXG4gICAgICAgIHJlbmRlckhvb2soKCkgPT4gdXNlUm91dGVBY3Rpdml0eVRyYWNrZXIoKSk7XG5cbiAgICAgICAgZXhwZWN0KG1vY2tTdGFydFNlc3Npb24pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGV4ZXJjaXNlVHlwZSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGFzc2Vzc21lbnRUeXBlcyA9IFtcbiAgICAgICdWb2NhYnVsYXJ5QXNzZXNzbWVudCcsXG4gICAgICAnR3JhbW1hckFzc2Vzc21lbnQnLFxuICAgICAgJ1JlYWRpbmdBc3Nlc3NtZW50JyxcbiAgICAgICdPdmVyYWxsQXNzZXNzbWVudCdcbiAgICBdO1xuXG4gICAgYXNzZXNzbWVudFR5cGVzLmZvckVhY2goYXNzZXNzbWVudFR5cGUgPT4ge1xuICAgICAgaXQoYGRldnJhaXQgZMOpdGVjdGVyICR7YXNzZXNzbWVudFR5cGV9YCwgKCkgPT4ge1xuICAgICAgICBjb25zdCB7IHVzZVNlZ21lbnRzLCB1c2VQYXRobmFtZSB9ID0gcmVxdWlyZSgnZXhwby1yb3V0ZXInKTtcbiAgICAgICAgdXNlU2VnbWVudHMubW9ja1JldHVyblZhbHVlKFsnbGV2ZWwnLCBhc3Nlc3NtZW50VHlwZV0pO1xuICAgICAgICB1c2VQYXRobmFtZS5tb2NrUmV0dXJuVmFsdWUoYC9sZXZlbC8ke2Fzc2Vzc21lbnRUeXBlfWApO1xuXG4gICAgICAgIHJlbmRlckhvb2soKCkgPT4gdXNlUm91dGVBY3Rpdml0eVRyYWNrZXIoKSk7XG5cbiAgICAgICAgZXhwZWN0KG1vY2tTdGFydFNlc3Npb24pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGFzc2Vzc21lbnRUeXBlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnU2VnbWVudHMgY29tcGxleGVzJywgKCkgPT4ge1xuICAgIGl0KCdkZXZyYWl0IGTDqXRlY3RlciBsZXMgZXhlcmNpY2VzIGRhbnMgZGVzIHNlZ21lbnRzIHByb2ZvbmRzJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyB1c2VTZWdtZW50cywgdXNlUGF0aG5hbWUgfSA9IHJlcXVpcmUoJ2V4cG8tcm91dGVyJyk7XG4gICAgICB1c2VTZWdtZW50cy5tb2NrUmV0dXJuVmFsdWUoWydhcHAnLCAnbGV2ZWxzJywgJzEnLCAndm9jYWJ1bGFyeScsICdWb2NhYnVsYXJ5RXhlcmNpc2UnXSk7XG4gICAgICB1c2VQYXRobmFtZS5tb2NrUmV0dXJuVmFsdWUoJy9hcHAvbGV2ZWxzLzEvdm9jYWJ1bGFyeS9Wb2NhYnVsYXJ5RXhlcmNpc2UnKTtcblxuICAgICAgcmVuZGVySG9vaygoKSA9PiB1c2VSb3V0ZUFjdGl2aXR5VHJhY2tlcigpKTtcblxuICAgICAgZXhwZWN0KG1vY2tTdGFydFNlc3Npb24pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdWb2NhYnVsYXJ5RXhlcmNpc2UnKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZyYWl0IHV0aWxpc2VyIGxlIGRlcm5pZXIgc2VnbWVudCBjb21tZSB0eXBlIGRcXCdleGVyY2ljZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgdXNlU2VnbWVudHMsIHVzZVBhdGhuYW1lIH0gPSByZXF1aXJlKCdleHBvLXJvdXRlcicpO1xuICAgICAgdXNlU2VnbWVudHMubW9ja1JldHVyblZhbHVlKFsnYXBwJywgJ2V4ZXJjaXNlJywgJ0dyYW1tYXJFeGVyY2lzZSddKTtcbiAgICAgIHVzZVBhdGhuYW1lLm1vY2tSZXR1cm5WYWx1ZSgnL2FwcC9leGVyY2lzZS9HcmFtbWFyRXhlcmNpc2UnKTtcblxuICAgICAgcmVuZGVySG9vaygoKSA9PiB1c2VSb3V0ZUFjdGl2aXR5VHJhY2tlcigpKTtcblxuICAgICAgZXhwZWN0KG1vY2tTdGFydFNlc3Npb24pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdHcmFtbWFyRXhlcmNpc2UnKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZyYWl0IGfDqXJlciBsZXMgc2VnbWVudHMgdmlkZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHVzZVNlZ21lbnRzLCB1c2VQYXRobmFtZSB9ID0gcmVxdWlyZSgnZXhwby1yb3V0ZXInKTtcbiAgICAgIHVzZVNlZ21lbnRzLm1vY2tSZXR1cm5WYWx1ZShbXSk7XG4gICAgICB1c2VQYXRobmFtZS5tb2NrUmV0dXJuVmFsdWUoJy8nKTtcblxuICAgICAgcmVuZGVySG9vaygoKSA9PiB1c2VSb3V0ZUFjdGl2aXR5VHJhY2tlcigpKTtcblxuICAgICAgZXhwZWN0KG1vY2tTdGFydFNlc3Npb24pLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdQcsOpdmVudGlvbiBkZXMgYm91Y2xlcycsICgpID0+IHtcbiAgICBpdCgnbmUgZGV2cmFpdCBwYXMgcmVkw6ltYXJyZXIgbGEgbcOqbWUgc2Vzc2lvbicsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgdXNlU2VnbWVudHMsIHVzZVBhdGhuYW1lIH0gPSByZXF1aXJlKCdleHBvLXJvdXRlcicpO1xuICAgICAgdXNlU2VnbWVudHMubW9ja1JldHVyblZhbHVlKFsnbGV2ZWwnLCAnVm9jYWJ1bGFyeUV4ZXJjaXNlJ10pO1xuICAgICAgdXNlUGF0aG5hbWUubW9ja1JldHVyblZhbHVlKCcvbGV2ZWwvVm9jYWJ1bGFyeUV4ZXJjaXNlJyk7XG5cbiAgICAgIGNvbnN0IHsgcmVyZW5kZXIgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlUm91dGVBY3Rpdml0eVRyYWNrZXIoKSk7XG5cbiAgICAgIGV4cGVjdChtb2NrU3RhcnRTZXNzaW9uKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG5cbiAgICAgIC8vIE3Dqm1lIGV4ZXJjaWNlLCBtw6ptZSBwYXRobmFtZVxuICAgICAgcmVyZW5kZXIoKTtcblxuICAgICAgZXhwZWN0KG1vY2tTdGFydFNlc3Npb24pLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTsgLy8gUGFzIGQnYXBwZWwgc3VwcGzDqW1lbnRhaXJlXG4gICAgICBleHBlY3QobW9ja0VuZFNlc3Npb24pLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2cmFpdCByZWTDqW1hcnJlciBzaSBsZSB0eXBlIGRcXCdleGVyY2ljZSBjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHVzZVNlZ21lbnRzLCB1c2VQYXRobmFtZSB9ID0gcmVxdWlyZSgnZXhwby1yb3V0ZXInKTtcbiAgICAgIFxuICAgICAgLy8gUHJlbWllciBleGVyY2ljZVxuICAgICAgdXNlU2VnbWVudHMubW9ja1JldHVyblZhbHVlKFsnbGV2ZWwnLCAnVm9jYWJ1bGFyeUV4ZXJjaXNlJ10pO1xuICAgICAgdXNlUGF0aG5hbWUubW9ja1JldHVyblZhbHVlKCcvbGV2ZWwvVm9jYWJ1bGFyeUV4ZXJjaXNlJyk7XG5cbiAgICAgIGNvbnN0IHsgcmVyZW5kZXIgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlUm91dGVBY3Rpdml0eVRyYWNrZXIoKSk7XG5cbiAgICAgIGV4cGVjdChtb2NrU3RhcnRTZXNzaW9uKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnVm9jYWJ1bGFyeUV4ZXJjaXNlJyk7XG5cbiAgICAgIC8vIE3Dqm1lIG5pdmVhdSBtYWlzIGV4ZXJjaWNlIGRpZmbDqXJlbnRcbiAgICAgIHVzZVNlZ21lbnRzLm1vY2tSZXR1cm5WYWx1ZShbJ2xldmVsJywgJ0dyYW1tYXJFeGVyY2lzZSddKTtcbiAgICAgIHVzZVBhdGhuYW1lLm1vY2tSZXR1cm5WYWx1ZSgnL2xldmVsL0dyYW1tYXJFeGVyY2lzZScpO1xuXG4gICAgICByZXJlbmRlcigpO1xuXG4gICAgICBleHBlY3QobW9ja0VuZFNlc3Npb24pLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChtb2NrU3RhcnRTZXNzaW9uKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnR3JhbW1hckV4ZXJjaXNlJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdJbnTDqWdyYXRpb24gYXZlYyB1c2VBY3Rpdml0eU1ldHJpY3MnLCAoKSA9PiB7XG4gICAgaXQoJ2RldnJhaXQgdXRpbGlzZXIgbGVzIGJvbm5lcyBmb25jdGlvbnMgZGUgdXNlQWN0aXZpdHlNZXRyaWNzJywgKCkgPT4ge1xuICAgICAgY29uc3QgdXNlQWN0aXZpdHlNZXRyaWNzID0gcmVxdWlyZSgnLi4vLi4vc3JjL2hvb2tzL3VzZUFjdGl2aXR5TWV0cmljcycpLmRlZmF1bHQ7XG4gICAgICBcbiAgICAgIHJlbmRlckhvb2soKCkgPT4gdXNlUm91dGVBY3Rpdml0eVRyYWNrZXIoKSk7XG5cbiAgICAgIGV4cGVjdCh1c2VBY3Rpdml0eU1ldHJpY3MpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZyYWl0IGfDqXJlciBsXFwnYWJzZW5jZSBkZSB1c2VBY3Rpdml0eU1ldHJpY3MnLCAoKSA9PiB7XG4gICAgICBjb25zdCB1c2VBY3Rpdml0eU1ldHJpY3MgPSByZXF1aXJlKCcuLi8uLi9zcmMvaG9va3MvdXNlQWN0aXZpdHlNZXRyaWNzJykuZGVmYXVsdDtcbiAgICAgIHVzZUFjdGl2aXR5TWV0cmljcy5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgICBzdGFydFNlc3Npb246IHVuZGVmaW5lZCxcbiAgICAgICAgZW5kU2Vzc2lvbjogdW5kZWZpbmVkLFxuICAgICAgICB1cGRhdGVTdHJlYWs6IHVuZGVmaW5lZCxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBOZSBkZXZyYWl0IHBhcyBwbGFudGVyXG4gICAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgICByZW5kZXJIb29rKCgpID0+IHVzZVJvdXRlQWN0aXZpdHlUcmFja2VyKCkpO1xuICAgICAgfSkubm90LnRvVGhyb3coKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiJBQUtBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxhQUFhLEVBQUU7RUFBQSxPQUFPO0lBQzlCQyxXQUFXLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDdEJDLFdBQVcsRUFBRUYsSUFBSSxDQUFDQyxFQUFFLENBQUM7RUFDdkIsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUdISixXQUFBLEdBQUtDLElBQUksQ0FBQyxvQ0FBb0MsRUFBRTtFQUFBLE9BQU87SUFDckRLLFVBQVUsRUFBRSxJQUFJO0lBQ2hCQyxPQUFPLEVBQUVKLElBQUksQ0FBQ0MsRUFBRSxDQUFD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