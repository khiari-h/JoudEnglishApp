{"version":3,"names":["calculateAverageScore","data","arguments","length","undefined","cov_2p1lgif6qn","b","f","s","Array","isArray","total","reduce","sum","item","score","calculateTotalQuestions","assessmentData","sections","sectionKey","_section$questions","section","questions","calculateAnsweredQuestionsCount","userAnswers","Object","keys","count","sectionAnswers","calculateCorrectAnswersCount","values","filter","answer","isCorrect","calculateTotalProgress","totalQuestions","answeredQuestions","Math","min","calculateSectionProgress","_section$questions2","totalInSection","answeredInSection","calculateSectionProgressData","map","index","_section$questions3","correctInSection","progress","title","correctAnswers","accuracy","calculateUserScore","totalAnswered","forEach","percentage","scoreOutOf20","round","getPerformanceLevel","level","color","calculateCompleteStats","totalProgress","userScore","performance","sectionProgressData","completion"],"sources":["assessmentStats.js"],"sourcesContent":["/**\n * Calcule la moyenne des scores d'un tableau d'objets { score }\n */\nexport const calculateAverageScore = (data = []) => {\n  if (!Array.isArray(data) || data.length === 0) return 0;\n  const total = data.reduce((sum, item) => sum + (item.score || 0), 0);\n  return total / data.length;\n};\n// utils/assessment/assessmentStats.js\n\n/**\n * ðŸ“Š Fonctions utilitaires pour les statistiques d'Ã©valuation\n * Pattern identique Ã  vocabularyStats.js\n */\n\n// =================== CALCULS DE BASE ===================\n\n/**\n * Calcule le nombre total de questions dans toutes les sections\n */\nexport const calculateTotalQuestions = (assessmentData = {}, sections = []) =>\n  sections.reduce((total, sectionKey) => {\n    const section = assessmentData[sectionKey];\n    return total + (section?.questions?.length || 0);\n  }, 0);\n\n/**\n * Calcule le nombre de questions rÃ©pondues\n */\nexport const calculateAnsweredQuestionsCount = (userAnswers = {}) =>\n  Object.keys(userAnswers).reduce((count, sectionKey) => {\n    const sectionAnswers = userAnswers[sectionKey] || {};\n    return count + Object.keys(sectionAnswers).length;\n  }, 0);\n\n/**\n * Calcule le nombre de rÃ©ponses correctes\n */\nexport const calculateCorrectAnswersCount = (userAnswers = {}) =>\n  Object.keys(userAnswers).reduce((count, sectionKey) => {\n    const sectionAnswers = userAnswers[sectionKey] || {};\n    return count + Object.values(sectionAnswers).filter(answer => answer.isCorrect).length;\n  }, 0);\n\n// =================== CALCULS DE PROGRESSION ===================\n\n/**\n * Calcule la progression totale (pourcentage de questions rÃ©pondues)\n */\nexport const calculateTotalProgress = (assessmentData = {}, sections = [], userAnswers = {}) => {\n  const totalQuestions = calculateTotalQuestions(assessmentData, sections);\n  const answeredQuestions = calculateAnsweredQuestionsCount(userAnswers);\n  return totalQuestions > 0 ? Math.min(100, (answeredQuestions / totalQuestions) * 100) : 0;\n};\n\n/**\n * Calcule la progression d'une section spÃ©cifique\n */\nexport const calculateSectionProgress = (assessmentData = {}, sectionKey = \"\", userAnswers = {}) => {\n  const section = assessmentData[sectionKey];\n  const totalInSection = section?.questions?.length || 0;\n  const answeredInSection = Object.keys(userAnswers[sectionKey] || {}).length;\n  \n  return totalInSection > 0 ? Math.min(100, (answeredInSection / totalInSection) * 100) : 0;\n};\n\n/**\n * Calcule la progression par section pour l'expansion ProgressCard\n */\nexport const calculateSectionProgressData = (assessmentData = {}, sections = [], userAnswers = {}) => {\n  return sections.map((sectionKey, index) => {\n    const section = assessmentData[sectionKey];\n    const totalInSection = section?.questions?.length || 0;\n    const sectionAnswers = userAnswers[sectionKey] || {};\n    const answeredInSection = Object.keys(sectionAnswers).length;\n    const correctInSection = Object.values(sectionAnswers).filter(answer => answer.isCorrect).length;\n    const progress = calculateSectionProgress(assessmentData, sectionKey, userAnswers);\n\n    return {\n      title: section?.title || `Section ${index + 1}`,\n      totalQuestions: totalInSection,\n      answeredQuestions: answeredInSection,\n      correctAnswers: correctInSection,\n      progress,\n      accuracy: answeredInSection > 0 ? (correctInSection / answeredInSection) * 100 : 0\n    };\n  });\n};\n\n// =================== CALCULS DE SCORE ===================\n\n/**\n * Calcule le score final de l'utilisateur\n */\nexport const calculateUserScore = (userAnswers = {}) => {\n  let correctAnswers = 0;\n  let totalAnswered = 0;\n\n  Object.values(userAnswers).forEach(section => {\n    Object.values(section).forEach(answer => {\n      totalAnswered++;\n      if (answer.isCorrect) {\n        correctAnswers++;\n      }\n    });\n  });\n\n  return {\n    correctAnswers,\n    totalQuestions: totalAnswered, // Questions rÃ©ellement rÃ©pondues\n    percentage: totalAnswered > 0 ? (correctAnswers / totalAnswered) * 100 : 0,\n    scoreOutOf20: totalAnswered > 0 ? Math.round((correctAnswers / totalAnswered) * 20) : 0\n  };\n};\n\n/**\n * DÃ©termine le niveau de performance basÃ© sur le score\n */\nexport const getPerformanceLevel = (percentage) => {\n  if (percentage >= 80) return { level: 'excellent', color: '#16a34a' };\n  if (percentage >= 60) return { level: 'good', color: '#ea580c' };\n  if (percentage >= 40) return { level: 'fair', color: '#dc2626' };\n  return { level: 'poor', color: '#b91c1c' };\n};\n\n/**\n * Calcule les statistiques complÃ¨tes pour l'affichage\n */\nexport const calculateCompleteStats = (assessmentData = {}, sections = [], userAnswers = {}) => {\n  const totalQuestions = calculateTotalQuestions(assessmentData, sections);\n  const answeredQuestions = calculateAnsweredQuestionsCount(userAnswers);\n  const correctAnswers = calculateCorrectAnswersCount(userAnswers);\n  const totalProgress = calculateTotalProgress(assessmentData, sections, userAnswers);\n  const userScore = calculateUserScore(userAnswers);\n  const performance = getPerformanceLevel(userScore.percentage);\n  const sectionProgressData = calculateSectionProgressData(assessmentData, sections, userAnswers);\n\n  return {\n    // Statistiques globales\n    totalQuestions,\n    answeredQuestions,\n    correctAnswers,\n    totalProgress,\n    \n    // Score utilisateur\n    userScore,\n    performance,\n    \n    // DonnÃ©es par section\n    sectionProgressData,\n    \n    // Ratios\n    accuracy: answeredQuestions > 0 ? (correctAnswers / answeredQuestions) * 100 : 0,\n    completion: totalQuestions > 0 ? (answeredQuestions / totalQuestions) * 100 : 0\n  };\n};"],"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","ignoreList":[]}