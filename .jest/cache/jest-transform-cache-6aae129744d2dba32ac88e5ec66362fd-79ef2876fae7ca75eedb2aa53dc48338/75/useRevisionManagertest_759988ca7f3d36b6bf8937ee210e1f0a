71af05332dbab995f913f60703685445
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useRevisionManager = _interopRequireDefault(require("../../src/hooks/useRevisionManager"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useRevisionManager', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  describe('Initialisation', function () {
    it('devrait initialiser avec les valeurs par défaut', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionManager.default)();
        }),
        result = _renderHook.result,
        waitForNextUpdate = _renderHook.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.totalWordsLearned).toBe(0);
      expect(result.current.nextRevisionAt).toBe(50);
      expect(result.current.shouldShowRevision).toBe(false);
      expect(result.current.isRevisionDisabled).toBe(false);
      expect(result.current.isLoading).toBe(false);
    }));
    it('devrait charger les données sauvegardées', (0, _asyncToGenerator2.default)(function* () {
      var mockSavedData = {
        nextRevisionAt: 100,
        lastRevisionWords: [{
          word: 'test'
        }],
        revisionHistory: [{
          timestamp: 123456789
        }],
        isRevisionDisabled: true
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'revision_manager_data') {
          return Promise.resolve(JSON.stringify(mockSavedData));
        }
        return Promise.resolve(null);
      });
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionManager.default)();
        }),
        result = _renderHook2.result,
        waitForNextUpdate = _renderHook2.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.nextRevisionAt).toBe(100);
      expect(result.current.isRevisionDisabled).toBe(true);
    }));
  });
  describe('Calcul du total de mots appris', function () {
    it('devrait calculer le total de mots appris', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'revision_manager_data') {
          return Promise.resolve(null);
        }
        if (key === 'vocabulary_1_classic') {
          return Promise.resolve(JSON.stringify({
            completedWords: {
              '0': ['word1', 'word2'],
              '1': ['word3']
            }
          }));
        }
        if (key === 'vocabulary_2_fast') {
          return Promise.resolve(JSON.stringify({
            completedWords: {
              '0': ['word4', 'word5']
            }
          }));
        }
        return Promise.resolve(null);
      });
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionManager.default)();
        }),
        result = _renderHook3.result,
        waitForNextUpdate = _renderHook3.waitForNextUpdate;
      yield waitForNextUpdate();
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(3000);
      });
      yield waitForNextUpdate();
      expect(result.current.totalWordsLearned).toBe(5);
    }));
    it('devrait debouncer les calculs fréquents', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionManager.default)();
        }),
        result = _renderHook4.result,
        waitForNextUpdate = _renderHook4.waitForNextUpdate;
      yield waitForNextUpdate();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        result.current.calculateTotalWords();
        result.current.calculateTotalWords();
        result.current.calculateTotalWords();
      }));
      expect(_asyncStorage.default.getItem).toHaveBeenCalledTimes(1);
    }));
  });
  describe('Logique de déclenchement des révisions', function () {
    it('devrait déclencher une révision quand le seuil est atteint', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'revision_manager_data') {
          return Promise.resolve(JSON.stringify({
            nextRevisionAt: 50,
            isRevisionDisabled: false
          }));
        }
        if (key === 'vocabulary_1_classic') {
          return Promise.resolve(JSON.stringify({
            completedWords: {
              '0': Array(50).fill().map(function (_, i) {
                return `word${i}`;
              })
            }
          }));
        }
        return Promise.resolve(null);
      });
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionManager.default)();
        }),
        result = _renderHook5.result,
        waitForNextUpdate = _renderHook5.waitForNextUpdate;
      yield waitForNextUpdate();
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(3000);
      });
      yield waitForNextUpdate();
      expect(result.current.shouldShowRevision).toBe(true);
    }));
    it('ne devrait pas déclencher si les révisions sont désactivées', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'revision_manager_data') {
          return Promise.resolve(JSON.stringify({
            nextRevisionAt: 50,
            isRevisionDisabled: true
          }));
        }
        if (key === 'vocabulary_1_classic') {
          return Promise.resolve(JSON.stringify({
            completedWords: {
              '0': Array(50).fill().map(function (_, i) {
                return `word${i}`;
              })
            }
          }));
        }
        return Promise.resolve(null);
      });
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionManager.default)();
        }),
        result = _renderHook6.result,
        waitForNextUpdate = _renderHook6.waitForNextUpdate;
      yield waitForNextUpdate();
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(3000);
      });
      yield waitForNextUpdate();
      expect(result.current.shouldShowRevision).toBe(false);
    }));
  });
  describe('Gestion des choix de révision', function () {
    it('devrait gérer le choix "maintenant"', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionManager.default)();
        }),
        result = _renderHook7.result,
        waitForNextUpdate = _renderHook7.waitForNextUpdate;
      yield waitForNextUpdate();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var response = yield result.current.handleRevisionChoice('now');
        expect(response.action).toBe('navigate');
        expect(response.words).toBeDefined();
        expect(response.questionsCount).toBe(10);
      }));
    }));
    it('devrait gérer le choix "plus tard 50"', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'revision_manager_data') {
          return Promise.resolve(null);
        }
        if (key === 'vocabulary_1_classic') {
          return Promise.resolve(JSON.stringify({
            completedWords: {
              '0': Array(30).fill().map(function (_, i) {
                return `word${i}`;
              })
            }
          }));
        }
        return Promise.resolve(null);
      });
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionManager.default)();
        }),
        result = _renderHook8.result,
        waitForNextUpdate = _renderHook8.waitForNextUpdate;
      yield waitForNextUpdate();
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(3000);
      });
      yield waitForNextUpdate();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var response = yield result.current.handleRevisionChoice('later_50');
        expect(response.action).toBe('postponed');
        expect(response.nextAt).toBe(80);
      }));
      expect(result.current.nextRevisionAt).toBe(80);
    }));
    it('devrait gérer le choix "plus tard 100"', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'revision_manager_data') {
          return Promise.resolve(null);
        }
        if (key === 'vocabulary_1_classic') {
          return Promise.resolve(JSON.stringify({
            completedWords: {
              '0': Array(25).fill().map(function (_, i) {
                return `word${i}`;
              })
            }
          }));
        }
        return Promise.resolve(null);
      });
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionManager.default)();
        }),
        result = _renderHook9.result,
        waitForNextUpdate = _renderHook9.waitForNextUpdate;
      yield waitForNextUpdate();
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(3000);
      });
      yield waitForNextUpdate();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var response = yield result.current.handleRevisionChoice('later_100');
        expect(response.action).toBe('postponed');
        expect(response.nextAt).toBe(125);
      }));
    }));
    it('devrait gérer le choix "désactiver"', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook0 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionManager.default)();
        }),
        result = _renderHook0.result,
        waitForNextUpdate = _renderHook0.waitForNextUpdate;
      yield waitForNextUpdate();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var response = yield result.current.handleRevisionChoice('disable');
        expect(response.action).toBe('disabled');
      }));
      expect(result.current.isRevisionDisabled).toBe(true);
    }));
    it('devrait gérer les choix invalides', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook1 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionManager.default)();
        }),
        result = _renderHook1.result,
        waitForNextUpdate = _renderHook1.waitForNextUpdate;
      yield waitForNextUpdate();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var response = yield result.current.handleRevisionChoice('invalid');
        expect(response.action).toBe('cancelled');
      }));
    }));
  });
  describe('Sélection des mots de révision', function () {
    it('devrait sélectionner des mots pour la révision', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'revision_manager_data') {
          return Promise.resolve(JSON.stringify({
            lastRevisionWords: []
          }));
        }
        if (key === 'vocabulary_1_classic') {
          return Promise.resolve(JSON.stringify({
            completedWords: {
              '0': [{
                word: 'hello',
                translation: 'bonjour',
                timestamp: 1640995200000
              }, {
                word: 'world',
                translation: 'monde',
                timestamp: 1640995300000
              }]
            }
          }));
        }
        return Promise.resolve(null);
      });
      var _renderHook10 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionManager.default)();
        }),
        result = _renderHook10.result,
        waitForNextUpdate = _renderHook10.waitForNextUpdate;
      yield waitForNextUpdate();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var words = yield result.current.selectRevisionWords(2);
        expect(words).toHaveLength(2);
        expect(words[0]).toHaveProperty('word');
        expect(words[0]).toHaveProperty('translation');
      }));
    }));
    it('devrait éviter les mots de la dernière révision', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'revision_manager_data') {
          return Promise.resolve(JSON.stringify({
            lastRevisionWords: [{
              word: 'hello'
            }]
          }));
        }
        if (key === 'vocabulary_1_classic') {
          return Promise.resolve(JSON.stringify({
            completedWords: {
              '0': [{
                word: 'hello',
                translation: 'bonjour',
                timestamp: 1640995200000
              }, {
                word: 'world',
                translation: 'monde',
                timestamp: 1640995300000
              }, {
                word: 'test',
                translation: 'test',
                timestamp: 1640995400000
              }]
            }
          }));
        }
        return Promise.resolve(null);
      });
      var _renderHook11 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionManager.default)();
        }),
        result = _renderHook11.result,
        waitForNextUpdate = _renderHook11.waitForNextUpdate;
      yield waitForNextUpdate();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var words = yield result.current.selectRevisionWords(2);
        expect(words).toHaveLength(2);
        expect(words.find(function (w) {
          return w.word === 'hello';
        })).toBeUndefined();
      }));
    }));
    it('devrait prioriser les mots les plus anciens', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'revision_manager_data') {
          return Promise.resolve(JSON.stringify({
            lastRevisionWords: []
          }));
        }
        if (key === 'vocabulary_1_classic') {
          return Promise.resolve(JSON.stringify({
            completedWords: {
              '0': [{
                word: 'old',
                translation: 'ancien',
                timestamp: 1640995200000
              }, {
                word: 'new',
                translation: 'nouveau',
                timestamp: 1640995400000
              }]
            }
          }));
        }
        return Promise.resolve(null);
      });
      var _renderHook12 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionManager.default)();
        }),
        result = _renderHook12.result,
        waitForNextUpdate = _renderHook12.waitForNextUpdate;
      yield waitForNextUpdate();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var words = yield result.current.selectRevisionWords(1);
        expect(words).toHaveLength(1);
        expect(words[0]).toHaveProperty('word');
      }));
    }));
  });
  describe('Completion des révisions', function () {
    it('devrait enregistrer une révision complétée', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'revision_manager_data') {
          return Promise.resolve(null);
        }
        if (key === 'vocabulary_1_classic') {
          return Promise.resolve(JSON.stringify({
            completedWords: {
              '0': Array(30).fill().map(function (_, i) {
                return {
                  word: `word${i}`
                };
              })
            }
          }));
        }
        return Promise.resolve(null);
      });
      var _renderHook13 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionManager.default)();
        }),
        result = _renderHook13.result,
        waitForNextUpdate = _renderHook13.waitForNextUpdate;
      yield waitForNextUpdate();
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(3000);
      });
      yield waitForNextUpdate();
      var completedWords = [{
        word: 'test1'
      }, {
        word: 'test2'
      }];
      (0, _reactNative.act)(function () {
        result.current.markRevisionCompleted(completedWords, 8, 10);
      });
      expect(result.current.nextRevisionAt).toBe(80);
    }));
  });
  describe('Réactivation des révisions', function () {
    it('devrait réactiver les révisions', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'revision_manager_data') {
          return Promise.resolve(JSON.stringify({
            isRevisionDisabled: true
          }));
        }
        if (key === 'vocabulary_1_classic') {
          return Promise.resolve(JSON.stringify({
            completedWords: {
              '0': Array(20).fill().map(function (_, i) {
                return {
                  word: `word${i}`
                };
              })
            }
          }));
        }
        return Promise.resolve(null);
      });
      var _renderHook14 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionManager.default)();
        }),
        result = _renderHook14.result,
        waitForNextUpdate = _renderHook14.waitForNextUpdate;
      yield waitForNextUpdate();
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(3000);
      });
      yield waitForNextUpdate();
      expect(result.current.isRevisionDisabled).toBe(true);
      (0, _reactNative.act)(function () {
        result.current.enableRevisions();
      });
      expect(result.current.isRevisionDisabled).toBe(false);
      expect(result.current.nextRevisionAt).toBe(70);
    }));
  });
  describe('Statistiques de révision', function () {
    it('devrait calculer les statistiques sans historique', function () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook15 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionManager.default)();
        }),
        result = _renderHook15.result;
      var stats = result.current.getRevisionStats();
      expect(stats.totalRevisions).toBe(0);
      expect(stats.averageScore).toBe(0);
      expect(stats.lastRevision).toBeNull();
      expect(stats.streak).toBe(0);
    });
    it('devrait calculer les statistiques avec historique', (0, _asyncToGenerator2.default)(function* () {
      var mockHistory = [{
        percentage: 80,
        timestamp: 1640995200000
      }, {
        percentage: 90,
        timestamp: 1640995300000
      }, {
        percentage: 75,
        timestamp: 1640995400000
      }];
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'revision_manager_data') {
          return Promise.resolve(JSON.stringify({
            revisionHistory: mockHistory
          }));
        }
        return Promise.resolve(null);
      });
      var _renderHook16 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionManager.default)();
        }),
        result = _renderHook16.result,
        waitForNextUpdate = _renderHook16.waitForNextUpdate;
      yield waitForNextUpdate();
      var stats = result.current.getRevisionStats();
      expect(stats.totalRevisions).toBe(3);
      expect(stats.averageScore).toBe(82);
      expect(stats.lastRevision).toEqual(mockHistory[2]);
      expect(stats.streak).toBe(3);
    }));
    it('devrait calculer le streak correctement', (0, _asyncToGenerator2.default)(function* () {
      var mockHistory = [{
        percentage: 60
      }, {
        percentage: 80
      }, {
        percentage: 90
      }, {
        percentage: 65
      }, {
        percentage: 85
      }, {
        percentage: 95
      }];
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'revision_manager_data') {
          return Promise.resolve(JSON.stringify({
            revisionHistory: mockHistory
          }));
        }
        return Promise.resolve(null);
      });
      var _renderHook17 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionManager.default)();
        }),
        result = _renderHook17.result,
        waitForNextUpdate = _renderHook17.waitForNextUpdate;
      yield waitForNextUpdate();
      var stats = result.current.getRevisionStats();
      expect(stats.streak).toBe(2);
    }));
  });
  describe('Sauvegarde automatique', function () {
    it('devrait sauvegarder automatiquement les changements', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook18 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionManager.default)();
        }),
        result = _renderHook18.result,
        waitForNextUpdate = _renderHook18.waitForNextUpdate;
      yield waitForNextUpdate();
      (0, _reactNative.act)(function () {
        result.current.enableRevisions();
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield new Promise(function (resolve) {
          return setTimeout(resolve, 0);
        });
      }));
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('revision_manager_data', expect.stringContaining('"isRevisionDisabled":false'));
    }));
  });
  describe('Calcul périodique', function () {
    it('devrait recalculer périodiquement le total de mots', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook19 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionManager.default)();
        }),
        result = _renderHook19.result,
        waitForNextUpdate = _renderHook19.waitForNextUpdate;
      yield waitForNextUpdate();
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(10000);
      });
      expect(_asyncStorage.default.getItem).toHaveBeenCalledTimes(1);
    }));
  });
  describe('Gestion des erreurs', function () {
    it('devrait gérer les erreurs de chargement', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockRejectedValue(new Error('Storage error'));
      var _renderHook20 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionManager.default)();
        }),
        result = _renderHook20.result,
        waitForNextUpdate = _renderHook20.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.nextRevisionAt).toBe(50);
      expect(result.current.isRevisionDisabled).toBe(false);
      expect(result.current.isLoading).toBe(false);
    }));
    it('devrait gérer les erreurs de calcul de mots', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key === 'revision_manager_data') {
          return Promise.resolve(null);
        }
        return Promise.reject(new Error('Calculation error'));
      });
      var _renderHook21 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionManager.default)();
        }),
        result = _renderHook21.result,
        waitForNextUpdate = _renderHook21.waitForNextUpdate;
      yield waitForNextUpdate();
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(3000);
      });
      expect(result.current.totalWordsLearned).toBe(0);
    }));
  });
  describe('Configuration', function () {
    it('devrait exposer la configuration', function () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook22 = (0, _reactNative.renderHook)(function () {
          return (0, _useRevisionManager.default)();
        }),
        result = _renderHook22.result;
      expect(result.current.config).toEqual({
        TRIGGER_INTERVAL: 50,
        QUESTIONS_COUNT: 10,
        STORAGE_KEY: 'revision_manager_data'
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,