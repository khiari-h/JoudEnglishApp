931e3907dd58a45fc23218990d18550e
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return require('@react-native-async-storage/async-storage/jest/async-storage-mock');
});
_getJestObj().mock('expo-font', function () {
  return {
    useFonts: function useFonts() {
      return [true];
    },
    isLoaded: function isLoaded() {
      return true;
    }
  };
});
_getJestObj().mock('expo-haptics', function () {
  return {
    impactAsync: jest.fn()
  };
});
_getJestObj().mock('react-native-reanimated', function () {
  var Reanimated = require('react-native-reanimated/mock');
  Reanimated.default.call = function () {};
  return Reanimated;
});
_getJestObj().mock('react-native/Libraries/Settings/Settings', function () {
  return {
    get: jest.fn(function () {
      return 'light';
    }),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn()
  };
});
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  RN.Animated = Object.assign({}, RN.Animated, {
    Value: jest.fn(function () {
      return {
        interpolate: jest.fn(function (config) {
          return config.outputRange[0];
        }),
        addListener: jest.fn(),
        removeListener: jest.fn(),
        removeAllListeners: jest.fn(),
        stopAnimation: jest.fn(),
        resetAnimation: jest.fn(),
        setValue: jest.fn()
      };
    }),
    timing: jest.fn(function () {
      return {
        start: jest.fn(function (callback) {
          if (callback) {
            callback({
              finished: true
            });
          }
        })
      };
    })
  });
  return RN;
});
var _reactNative = require("react-native");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
_reactNative.NativeModules.SettingsManager = _reactNative.NativeModules.SettingsManager || {
  settings: {
    AppleLocale: 'en_US'
  }
};
if (typeof setImmediate === 'undefined') {
  global.setImmediate = function (fn) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return setTimeout.apply(void 0, [fn, 0].concat(args));
  };
}
if (typeof clearImmediate === 'undefined') {
  global.clearImmediate = function (id) {
    return clearTimeout(id);
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJyZXF1aXJlIiwidXNlRm9udHMiLCJpc0xvYWRlZCIsImltcGFjdEFzeW5jIiwiamVzdCIsImZuIiwiUmVhbmltYXRlZCIsImRlZmF1bHQiLCJjYWxsIiwiZ2V0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJSTiIsInJlcXVpcmVBY3R1YWwiLCJBbmltYXRlZCIsIk9iamVjdCIsImFzc2lnbiIsIlZhbHVlIiwiaW50ZXJwb2xhdGUiLCJjb25maWciLCJvdXRwdXRSYW5nZSIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJzdG9wQW5pbWF0aW9uIiwicmVzZXRBbmltYXRpb24iLCJzZXRWYWx1ZSIsInRpbWluZyIsInN0YXJ0IiwiY2FsbGJhY2siLCJmaW5pc2hlZCIsIl9yZWFjdE5hdGl2ZSIsIl9yZXF1aXJlIiwiTmF0aXZlTW9kdWxlcyIsIlNldHRpbmdzTWFuYWdlciIsInNldHRpbmdzIiwiQXBwbGVMb2NhbGUiLCJzZXRJbW1lZGlhdGUiLCJnbG9iYWwiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsInNldFRpbWVvdXQiLCJhcHBseSIsImNvbmNhdCIsImNsZWFySW1tZWRpYXRlIiwiaWQiLCJjbGVhclRpbWVvdXQiXSwic291cmNlcyI6WyJqZXN0LnNldHVwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGplc3Quc2V0dXAuanNcblxuLy8gTGlnbmUgc3VwcHJpbcOpZSBjYXIgY2UgbW9kdWxlIG4nZXhpc3RlIHBsdXMgLyBjYXNzZSBKZXN0IDpcbi8vIGplc3QubW9jaygncmVhY3QtbmF0aXZlL0xpYnJhcmllcy9BbmltYXRlZC9OYXRpdmVBbmltYXRlZEhlbHBlcicsICgpID0+ICh7fSkpO1xuXG5pbXBvcnQgeyBOYXRpdmVNb2R1bGVzIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcblxuLy8gTW9jayBBc3luY1N0b3JhZ2UgKHRyw6hzIHV0aWxpc8OpIGRhbnMgUk4pXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlJywgKCkgPT5cbiAgcmVxdWlyZSgnQHJlYWN0LW5hdGl2ZS1hc3luYy1zdG9yYWdlL2FzeW5jLXN0b3JhZ2UvamVzdC9hc3luYy1zdG9yYWdlLW1vY2snKVxuKTtcblxuLy8gTW9jayBFeHBvIGZvbnQgKHNpIHR1IHV0aWxpc2VzIGV4cG8tZm9udCwgc2lub24gdHUgcGV1eCByZXRpcmVyKVxuamVzdC5tb2NrKCdleHBvLWZvbnQnLCAoKSA9PiAoe1xuICB1c2VGb250czogKCkgPT4gW3RydWVdLFxuICBpc0xvYWRlZDogKCkgPT4gdHJ1ZSxcbn0pKTtcblxuLy8gTW9jayBFeHBvIGhhcHRpY3MgKHZpYnJhdGlvbilcbmplc3QubW9jaygnZXhwby1oYXB0aWNzJywgKCkgPT4gKHtcbiAgaW1wYWN0QXN5bmM6IGplc3QuZm4oKSxcbn0pKTtcblxuLy8gTW9jayByZWFjdC1uYXRpdmUtcmVhbmltYXRlZCBwb3VyIMOpdml0ZXIgbGVzIGVycmV1cnMgZGFucyBsZXMgdGVzdHNcbmplc3QubW9jaygncmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWQnLCAoKSA9PiB7XG4gIGNvbnN0IFJlYW5pbWF0ZWQgPSByZXF1aXJlKCdyZWFjdC1uYXRpdmUtcmVhbmltYXRlZC9tb2NrJyk7XG5cbiAgLy8gUGF0Y2ggcG91ciDDqXZpdGVyIGRlcyBlcnJldXJzIHN1cHBsw6ltZW50YWlyZXNcbiAgUmVhbmltYXRlZC5kZWZhdWx0LmNhbGwgPSAoKSA9PiB7fTtcblxuICByZXR1cm4gUmVhbmltYXRlZDtcbn0pO1xuXG4vLyBNb2NrIGRlcyBTZXR0aW5ncyBuYXRpdmVzIChwb3VyIMOpdml0ZXIgZXJyZXVycyBUdXJib01vZHVsZVJlZ2lzdHJ5KVxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUvTGlicmFyaWVzL1NldHRpbmdzL1NldHRpbmdzJywgKCkgPT4gKHtcbiAgZ2V0OiBqZXN0LmZuKCgpID0+ICdsaWdodCcpLFxuICBhZGRFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbn0pKTtcblxuLy8gTW9jayBOYXRpdmVNb2R1bGVzLlNldHRpbmdzTWFuYWdlciAoc2ltdWxlIGxvY2FsZSlcbk5hdGl2ZU1vZHVsZXMuU2V0dGluZ3NNYW5hZ2VyID0gTmF0aXZlTW9kdWxlcy5TZXR0aW5nc01hbmFnZXIgfHwge1xuICBzZXR0aW5nczogeyBBcHBsZUxvY2FsZTogJ2VuX1VTJyB9LFxufTtcblxuLy8gUG9seWZpbGwgZ2xvYmFsIHBvdXIgc2V0SW1tZWRpYXRlIC8gY2xlYXJJbW1lZGlhdGUgKHBhcmZvaXMgbWFucXVhbnQpXG5pZiAodHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgZ2xvYmFsLnNldEltbWVkaWF0ZSA9IChmbiwgLi4uYXJncykgPT4gc2V0VGltZW91dChmbiwgMCwgLi4uYXJncyk7XG59XG5pZiAodHlwZW9mIGNsZWFySW1tZWRpYXRlID09PSAndW5kZWZpbmVkJykge1xuICBnbG9iYWwuY2xlYXJJbW1lZGlhdGUgPSAoaWQpID0+IGNsZWFyVGltZW91dChpZCk7XG59XG5cbi8vIE1vY2sgY29tcGxldCBldCByb2J1c3RlIGR1IG1vZHVsZSBBbmltYXRlZFxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUnLCAoKSA9PiB7XG4gIGNvbnN0IFJOID0gamVzdC5yZXF1aXJlQWN0dWFsKCdyZWFjdC1uYXRpdmUnKTtcblxuICAvLyBNb2NrIEFuaW1hdGVkXG4gIFJOLkFuaW1hdGVkID0ge1xuICAgIC4uLlJOLkFuaW1hdGVkLFxuICAgIFZhbHVlOiBqZXN0LmZuKCgpID0+ICh7XG4gICAgICBpbnRlcnBvbGF0ZTogamVzdC5mbihjb25maWcgPT4gY29uZmlnLm91dHB1dFJhbmdlWzBdKSxcbiAgICAgIGFkZExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgICByZW1vdmVMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgcmVtb3ZlQWxsTGlzdGVuZXJzOiBqZXN0LmZuKCksXG4gICAgICBzdG9wQW5pbWF0aW9uOiBqZXN0LmZuKCksXG4gICAgICByZXNldEFuaW1hdGlvbjogamVzdC5mbigpLFxuICAgICAgc2V0VmFsdWU6IGplc3QuZm4oKSxcbiAgICB9KSksXG4gICAgdGltaW5nOiBqZXN0LmZuKCgpID0+ICh7XG4gICAgICBzdGFydDogamVzdC5mbihjYWxsYmFjayA9PiB7XG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgIGNhbGxiYWNrKHsgZmluaXNoZWQ6IHRydWUgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgIH0pKSxcbiAgfTtcblxuICByZXR1cm4gUk47XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBUUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDJDQUEyQyxFQUFFO0VBQUEsT0FDckRDLE9BQU8sQ0FBQyxtRUFBbUUsQ0FBQztBQUFBLENBQzlFLENBQUM7QUFHREYsV0FBQSxHQUFLQyxJQUFJLENBQUMsV0FBVyxFQUFFO0VBQUEsT0FBTztJQUM1QkUsUUFBUSxFQUFFLFNBQVZBLFFBQVFBLENBQUE7TUFBQSxPQUFRLENBQUMsSUFBSSxDQUFDO0lBQUE7SUFDdEJDLFFBQVEsRUFBRSxTQUFWQSxRQUFRQSxDQUFBO01BQUEsT0FBUSxJQUFJO0lBQUE7RUFDdEIsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUdISixXQUFBLEdBQUtDLElBQUksQ0FBQyxjQUFjLEVBQUU7RUFBQSxPQUFPO0lBQy9CSSxXQUFXLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0VBQ3ZCLENBQUM7QUFBQSxDQUFDLENBQUM7QUFHSFAsV0FBQSxHQUFLQyxJQUFJLENBQUMseUJBQXlCLEVBQUUsWUFBTTtFQUN6QyxJQUFNTyxVQUFVLEdBQUdOLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQztFQUcxRE0sVUFBVSxDQUFDQyxPQUFPLENBQUNDLElBQUksR0FBRyxZQUFN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