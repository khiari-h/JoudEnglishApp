69c8f2878f884afb3fbcf4e1f790190a
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  var ActualReact = jest.requireActual('react');
  var mockFireEvent = require('@testing-library/react-native').fireEvent;
  return Object.assign({}, RN, {
    Animated: Object.assign({}, RN.Animated, {
      Value: MockAnimatedValue,
      timing: mockTiming,
      View: RN.View
    }),
    ScrollView: ActualReact.forwardRef(function (_ref, ref) {
      var children = _ref.children,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      return (0, _jsxRuntime.jsx)(RN.ScrollView, Object.assign({}, props, {
        ref: ref,
        scrollTo: mockScrollViewScrollTo,
        children: children
      }));
    }),
    TouchableOpacity: function TouchableOpacity(_ref2) {
      var children = _ref2.children,
        props = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
      return (0, _jsxRuntime.jsx)(RN.TouchableOpacity, Object.assign({}, props, {
        onPressIn: function onPressIn() {
          return props.onPressIn == null ? void 0 : props.onPressIn();
        },
        onPressOut: function onPressOut() {
          return props.onPressOut == null ? void 0 : props.onPressOut();
        },
        children: children
      }));
    },
    fireEvent: Object.assign({}, mockFireEvent, {
      pressIn: function pressIn(element) {
        return mockFireEvent(element, 'pressIn');
      },
      pressOut: function pressOut(element) {
        return mockFireEvent(element, 'pressOut');
      }
    })
  });
});
_getJestObj().mock('expo-linear-gradient', function () {
  return {
    LinearGradient: function LinearGradient(_ref3) {
      var children = _ref3.children,
        props = (0, _objectWithoutProperties2.default)(_ref3, _excluded3);
      var _require = require('react-native'),
        View = _require.View;
      return (0, _jsxRuntime.jsx)(View, Object.assign({}, props, {
        children: children
      }));
    }
  };
});
_getJestObj().mock('../../../src/components/exercise-common/CategorySelector/style', function () {
  var _require2 = require('react-native'),
    StyleSheet = _require2.StyleSheet;
  return function () {
    return StyleSheet.create({
      container: {},
      backgroundGradient: {},
      scrollView: {},
      scrollContent: {},
      categoryItemWrapper: {},
      categoryTouchable: {},
      selectedCategoryItem: {},
      selectedInner: {},
      selectedCategoryText: {
        color: '#FFFFFF'
      },
      sparkleContainer: {},
      sparkle: {},
      categoryItem: {},
      categoryInner: {},
      categoryText: {}
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _CategorySelector = _interopRequireWildcard(require("../../../src/components/exercise-common/CategorySelector"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children"],
  _excluded2 = ["children"],
  _excluded3 = ["children"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockStart = jest.fn(function (callback) {
  if (callback) callback();
});
var mockTiming = jest.fn(function () {
  return {
    start: mockStart
  };
});
var mockScrollViewScrollTo = jest.fn();
var MockAnimatedValue = jest.fn().mockImplementation(function (initialValue) {
  var mockValue = {
    interpolate: jest.fn().mockReturnValue(initialValue),
    setValue: jest.fn(),
    addListener: jest.fn(),
    removeListener: jest.fn(),
    removeAllListeners: jest.fn(),
    stopAnimation: jest.fn(),
    resetAnimation: jest.fn(),
    _value: initialValue
  };
  return mockValue;
});
var mockOnLayout = function mockOnLayout(id, x, width) {
  return (0, _reactNative.fireEvent)(renderCategoryPill(id), 'layout', {
    nativeEvent: {
      layout: {
        x: x,
        width: width,
        height: 0,
        y: 0
      }
    }
  });
};
describe('CategorySelector', function () {
  var categories = [{
    id: '1',
    name: 'Grammar'
  }, {
    id: '2',
    name: 'Vocabulary'
  }, {
    id: '3',
    name: 'Reading'
  }];
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('should render all categories correctly with minimum props', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories
      })),
      getByText = _render.getByText;
    expect(getByText('Grammar')).toBeTruthy();
    expect(getByText('Vocabulary')).toBeTruthy();
    expect(getByText('Reading')).toBeTruthy();
  });
  it('should render nothing when the categories array is empty', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: []
      })),
      queryByText = _render2.queryByText;
    expect(queryByText('Grammar')).toBeNull();
  });
  it('should display the selected category with the sparkle emoji', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: function onSelectCategory() {}
      })),
      getByText = _render3.getByText;
    expect(getByText('âœ¨')).toBeTruthy();
  });
  it('should call onSelectCategory with the correct category id when a category is pressed', function () {
    var onSelectCategory = jest.fn();
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        onSelectCategory: onSelectCategory
      })),
      getByText = _render4.getByText;
    _reactNative.fireEvent.press(getByText('Vocabulary'));
    expect(onSelectCategory).toHaveBeenCalledWith('2');
  });
  it('should create animations for all categories on mount', (0, _asyncToGenerator2.default)(function* () {
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: function onSelectCategory() {}
      }));
    }));
    expect(MockAnimatedValue).toHaveBeenCalledTimes(categories.length);
    expect(MockAnimatedValue).toHaveBeenCalledWith(1);
    expect(MockAnimatedValue).toHaveBeenCalledWith(0);
  }));
  it('should trigger animation logic when selectedCategory changes', (0, _asyncToGenerator2.default)(function* () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: function onSelectCategory() {}
      })),
      rerender = _render5.rerender;
    mockTiming.mockClear();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "2",
        onSelectCategory: function onSelectCategory() {}
      }));
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockTiming).toHaveBeenCalledTimes(2);
    });
    expect(mockTiming).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({
      toValue: 0
    }));
    expect(mockTiming).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({
      toValue: 1
    }));
  }));
  it('should trigger press animations on touch', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: function onSelectCategory() {}
      })),
      getByText = _render6.getByText;
    mockTiming.mockClear();
    _reactNative.fireEvent.pressIn(getByText('Vocabulary'));
    expect(mockTiming).toHaveBeenCalledTimes(1);
    expect(mockTiming).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({
      toValue: 0.95,
      useNativeDriver: true
    }));
    _reactNative.fireEvent.pressOut(getByText('Vocabulary'));
    expect(mockTiming).toHaveBeenCalledTimes(2);
    expect(mockTiming).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({
      toValue: 1,
      useNativeDriver: true
    }));
  });
  it('should scroll to the selected category', (0, _asyncToGenerator2.default)(function* () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: function onSelectCategory() {}
      })),
      rerender = _render7.rerender,
      getByText = _render7.getByText;
    yield (0, _reactNative.act)(function () {
      (0, _reactNative.fireEvent)(getByText('Grammar'), 'layout', {
        nativeEvent: {
          layout: {
            x: 0,
            width: 100
          }
        }
      });
      (0, _reactNative.fireEvent)(getByText('Vocabulary'), 'layout', {
        nativeEvent: {
          layout: {
            x: 100,
            width: 100
          }
        }
      });
      (0, _reactNative.fireEvent)(getByText('Reading'), 'layout', {
        nativeEvent: {
          layout: {
            x: 200,
            width: 100
          }
        }
      });
    });
    mockScrollViewScrollTo.mockClear();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "2",
        onSelectCategory: function onSelectCategory() {}
      }));
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockScrollViewScrollTo).toHaveBeenCalled();
    });
  }));
  it('should handle user interaction correctly', function () {
    var onSelectCategory = jest.fn();
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: onSelectCategory
      })),
      getByText = _render8.getByText;
    _reactNative.fireEvent.press(getByText('Vocabulary'));
    expect(onSelectCategory).toHaveBeenCalledWith('2');
  });
  describe('areEqual', function () {
    it('should return true for identical props', function () {
      var props = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: [{
          id: '1',
          name: 'Cat1'
        }]
      };
      var result = (0, _CategorySelector.areEqual)(props, props);
      expect(result).toBe(true);
    });
    it('should return false when selectedCategory changes', function () {
      var prevProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: []
      };
      var nextProps = {
        selectedCategory: '2',
        primaryColor: '#000',
        categories: []
      };
      var result = (0, _CategorySelector.areEqual)(prevProps, nextProps);
      expect(result).toBe(false);
    });
    it('should return false when primaryColor changes', function () {
      var prevProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: []
      };
      var nextProps = {
        selectedCategory: '1',
        primaryColor: '#111',
        categories: []
      };
      var result = (0, _CategorySelector.areEqual)(prevProps, nextProps);
      expect(result).toBe(false);
    });
    it('should return true when categories array reference changes but content is the same', function () {
      var categories1 = [{
        id: '1',
        name: 'Cat1'
      }];
      var categories2 = [{
        id: '1',
        name: 'Cat1'
      }];
      var prevProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: categories1
      };
      var nextProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: categories2
      };
      var result = (0, _CategorySelector.areEqual)(prevProps, nextProps);
      expect(result).toBe(true);
    });
    it('should return true when array reference is the same', function () {
      var categoriesList = [{
        id: '1',
        name: 'Cat1'
      }];
      var prevProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: categoriesList
      };
      var nextProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: categoriesList
      };
      var result = (0, _CategorySelector.areEqual)(prevProps, nextProps);
      expect(result).toBe(true);
    });
    it('should handle undefined selectedCategory correctly', function () {
      var categories = [];
      var prevProps = {
        selectedCategory: undefined,
        primaryColor: '#000',
        categories: categories
      };
      var nextProps = {
        selectedCategory: undefined,
        primaryColor: '#000',
        categories: categories
      };
      var result = (0, _CategorySelector.areEqual)(prevProps, nextProps);
      expect(result).toBe(true);
    });
  });
  describe('Edge cases', function () {
    it('should handle empty categories gracefully', function () {
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: [],
          onSelectCategory: function onSelectCategory() {}
        })),
        root = _render9.root;
      expect(root).toBeTruthy();
    });
    it('should handle undefined selectedCategory', function () {
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: undefined,
          onSelectCategory: function onSelectCategory() {}
        })),
        getByText = _render0.getByText;
      expect(getByText('Grammar')).toBeTruthy();
    });
    it('should not crash when selecting non-existent category', function () {
      var onSelectCategory = jest.fn();
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "999",
          onSelectCategory: onSelectCategory
        })),
        getByText = _render1.getByText;
      _reactNative.fireEvent.press(getByText('Grammar'));
      expect(onSelectCategory).toHaveBeenCalledWith('1');
    });
    it('should handle categories with different id types', function () {
      var mixedCategories = [{
        id: 1,
        name: 'Numeric'
      }, {
        id: 'string',
        name: 'String'
      }];
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: mixedCategories,
          selectedCategory: 1,
          onSelectCategory: function onSelectCategory() {}
        })),
        getByText = _render10.getByText;
      expect(getByText('âœ¨')).toBeTruthy();
    });
    it('should handle prop changes without crashing', function () {
      var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: function onSelectCategory() {},
          primaryColor: "#123"
        })),
        rerender = _render11.rerender;
      expect(function () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: [].concat(categories, [{
            id: '4',
            name: 'New'
          }]),
          selectedCategory: "2",
          onSelectCategory: function onSelectCategory() {},
          primaryColor: "#456"
        }));
      }).not.toThrow();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,