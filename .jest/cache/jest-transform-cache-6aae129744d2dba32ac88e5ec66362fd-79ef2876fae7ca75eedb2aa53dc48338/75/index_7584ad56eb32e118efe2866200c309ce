4b2d909976f44b6d6e7cf0e7933c97d2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _HeroCard = _interopRequireDefault(require("../../../../components/ui/HeroCard"));
var _ContentSection = _interopRequireDefault(require("../../../../components/ui/ContentSection"));
var _NavigationButtons = _interopRequireDefault(require("../../../../components/exercise-common/NavigationButtons"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var AssessmentResults = function AssessmentResults(_ref) {
  var level = _ref.level,
    _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? "#3b82f6" : _ref$levelColor,
    userScore = _ref.userScore,
    onContinue = _ref.onContinue,
    onRetry = _ref.onRetry;
  var styles = (0, _style.default)(levelColor);
  if (!userScore) {
    return (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
      style: styles.container,
      contentContainerStyle: styles.content,
      children: [(0, _jsxRuntime.jsx)(_HeroCard.default, {
        content: "\xC9valuation Termin\xE9e",
        fontSize: 24,
        levelColor: levelColor,
        showUnderline: true,
        backgroundColor: "white"
      }), (0, _jsxRuntime.jsx)(_ContentSection.default, {
        title: `Niveau ${level}`,
        content: "Votre \xE9valuation est termin\xE9e. Merci d'avoir particip\xE9 !",
        levelColor: levelColor,
        backgroundColor: "#f8fafc"
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.navigationContainer,
        children: (0, _jsxRuntime.jsx)(_NavigationButtons.default, {
          onNext: onContinue,
          disablePrevious: true,
          disableNext: false,
          primaryColor: levelColor,
          isLast: true,
          buttonLabels: {
            next: "Continuer",
            finish: "Continuer"
          }
        })
      })]
    });
  }
  var scoreOutOf20 = Math.round(userScore.percentage / 100 * 20);
  var wrongAnswers = userScore.totalQuestions - userScore.correctAnswers;
  var getPerformanceData = function getPerformanceData(scoreOut20) {
    if (scoreOut20 >= 16) {
      return {
        title: "üèÜ Bravo champion !",
        subtitle: "Tu ma√Ætrises bien ton affaire !",
        color: "#16a34a",
        backgroundColor: "#f0fdf4",
        showRetry: false
      };
    } else if (scoreOut20 >= 12) {
      return {
        title: "üëå Pas mal du tout !",
        subtitle: "On est sur la bonne voie !",
        color: "#ea580c",
        backgroundColor: "#fff7ed",
        showRetry: false
      };
    } else if (scoreOut20 >= 8) {
      return {
        title: "üò¨ Hmm... on a vu mieux !",
        subtitle: "Allez, on remonte la pente !",
        color: "#dc2626",
        backgroundColor: "#fef2f2",
        showRetry: true
      };
    } else {
      return {
        title: "üî• Oula... c'est chaud !",
        subtitle: "Bon, on va pas se mentir, il faut bosser !",
        color: "#b91c1c",
        backgroundColor: "#fef2f2",
        showRetry: true
      };
    }
  };
  var performance = getPerformanceData(scoreOutOf20);
  return (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
    style: styles.container,
    contentContainerStyle: styles.content,
    showsVerticalScrollIndicator: false,
    children: [(0, _jsxRuntime.jsx)(_HeroCard.default, {
      content: `${scoreOutOf20}/20`,
      fontSize: 56,
      levelColor: performance.color,
      showUnderline: false,
      backgroundColor: performance.backgroundColor,
      padding: 32,
      subtitle: `${userScore.percentage.toFixed(1)}%`
    }), (0, _jsxRuntime.jsx)(_ContentSection.default, {
      title: "Statistiques d\xE9taill\xE9es",
      content: `‚úÖ ${userScore.correctAnswers} correctes\n‚ùå ${wrongAnswers} incorrectes\nüìä ${userScore.totalQuestions} questions au total`,
      levelColor: "#6366f1",
      backgroundColor: "white",
      isMonospace: true
    }), (0, _jsxRuntime.jsx)(_ContentSection.default, {
      title: "Votre Performance",
      content: `${performance.title}\n\n${performance.subtitle}`,
      levelColor: performance.color,
      backgroundColor: performance.backgroundColor,
      icon: performance.title.split(' ')[0]
    }), (0, _jsxRuntime.jsx)(_ContentSection.default, {
      title: `√âvaluation Niveau ${level}`,
      content: "\xC9valuation termin\xE9e avec succ\xE8s !",
      levelColor: levelColor,
      backgroundColor: "#f1f5f9",
      isItalic: true
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.navigationContainer,
      children: [performance.showRetry && onRetry && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.retryContainer,
        children: (0, _jsxRuntime.jsx)(_NavigationButtons.default, {
          onNext: onRetry,
          disablePrevious: true,
          disableNext: false,
          primaryColor: performance.color,
          isLast: false,
          buttonLabels: {
            next: "Recommencer"
          }
        })
      }), (0, _jsxRuntime.jsx)(_NavigationButtons.default, {
        onNext: onContinue,
        disablePrevious: true,
        disableNext: false,
        primaryColor: levelColor,
        isLast: true,
        buttonLabels: {
          next: "Continuer",
          finish: "Continuer"
        }
      })]
    })]
  });
};
var _default = exports.default = AssessmentResults;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,