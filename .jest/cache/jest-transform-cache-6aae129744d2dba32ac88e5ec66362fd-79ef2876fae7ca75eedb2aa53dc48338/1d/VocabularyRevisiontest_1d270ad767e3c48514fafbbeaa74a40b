932d3aee5d37246ff033880ab2c2bcfb
_getJestObj().mock('../../../src/hooks/useRevisionManager', function () {
  return {
    __esModule: true,
    default: function _default() {
      return {
        markRevisionCompleted: mockMarkRevisionCompleted
      };
    }
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        goBack: mockGoBack
      };
    }
  };
});
_getJestObj().mock('../../../src/hooks/useRevisionData', function () {
  return function () {
    return mockUseRevisionData();
  };
});
_getJestObj().mock('../../../src/hooks/useQuizEngine', function () {
  return function () {
    return mockUseQuizEngine();
  };
});
_getJestObj().mock('../../../src/contexts/ThemeContext', function () {
  return {
    ThemeContext: {
      Consumer: function Consumer(_ref) {
        var children = _ref.children;
        return children({
          colors: {
            background: "#F8FAFC",
            surface: "#FFFFFF",
            text: "#1F2937",
            textSecondary: "#6B7280",
            primary: "#3B82F6"
          }
        });
      },
      useContext: function useContext() {
        return {
          colors: {
            background: "#F8FAFC",
            surface: "#FFFFFF",
            text: "#1F2937",
            textSecondary: "#6B7280",
            primary: "#3B82F6"
          }
        };
      }
    }
  };
});
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  RN.Animated.timing = function (value, config) {
    return {
      start: function start(callback) {
        value.setValue(config.toValue);
        callback && callback();
      }
    };
  };
  return RN;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _VocabularyRevision = _interopRequireDefault(require("../../../src/screens/VocabularyRevision"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockMarkRevisionCompleted = jest.fn();
var mockGoBack = jest.fn();
var mockUseRevisionData = jest.fn();
var mockUseQuizEngine = jest.fn();
jest.spyOn(_reactNative2.Dimensions, 'get').mockReturnValue({
  width: 300,
  height: 600
});
describe('VocabularyRevision Integration Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.clearAllTimers();
  });
  var setupMocks = function setupMocks(revisionData, quizEngine) {
    mockUseRevisionData.mockReturnValue(revisionData);
    mockUseQuizEngine.mockReturnValue(quizEngine);
  };
  test('renders loading state initially', (0, _asyncToGenerator2.default)(function* () {
    setupMocks({
      isLoading: true,
      error: null,
      hasEnoughWords: false,
      canGenerateQuestions: false
    }, {});
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByText('Récupération de vos mots appris')).toBeTruthy();
    });
  }));
  test('renders error state', (0, _asyncToGenerator2.default)(function* () {
    setupMocks({
      isLoading: false,
      error: 'Failed to load data',
      hasEnoughWords: false,
      canGenerateQuestions: false
    }, {});
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByText('Failed to load data')).toBeTruthy();
    });
  }));
  test('renders locked state when not enough words', (0, _asyncToGenerator2.default)(function* () {
    setupMocks({
      isLoading: false,
      error: null,
      stats: {
        totalLearned: 30
      },
      hasEnoughWords: false,
      canGenerateQuestions: false
    }, {});
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByText(/Apprenez 50 mots pour débloquer le mode révision et tester vos connaissances !/i)).toBeTruthy();
      expect(_reactNative.screen.getByText('30 / 50')).toBeTruthy();
    });
  }));
  test('renders noWords state when enough words but cannot generate questions', (0, _asyncToGenerator2.default)(function* () {
    setupMocks({
      isLoading: false,
      error: null,
      revisionQuestions: [],
      stats: {
        totalLearned: 60
      },
      hasEnoughWords: true,
      canGenerateQuestions: false
    }, {});
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {
      route: {
        params: {
          questionsCount: 10
        }
      }
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByText(/Continuez d'apprendre pour diversifier les questions !/i)).toBeTruthy();
      expect(_reactNative.screen.getByText(/Un quiz de 10 questions ne peut pas être généré pour ce niveau./i)).toBeTruthy();
    });
  }));
  test('renders QuizScreen and handles answer and continue', (0, _asyncToGenerator2.default)(function* () {
    var mockQuestions = [{
      id: 'q1',
      word: 'Word 1',
      choices: ['A', 'B', 'C'],
      correctAnswer: 'A'
    }, {
      id: 'q2',
      word: 'Word 2',
      choices: ['D', 'E', 'F'],
      correctAnswer: 'D'
    }];
    var mockGoToNextQuestion = jest.fn();
    var mockHandleAnswer = jest.fn();
    mockUseRevisionData.mockReturnValue({
      revisionQuestions: mockQuestions,
      isLoading: false,
      hasEnoughWords: true,
      canGenerateQuestions: true
    });
    mockUseQuizEngine.mockReturnValue({
      currentQuestion: mockQuestions[0],
      currentQuestionIndex: 0,
      totalQuestions: mockQuestions.length,
      score: 0,
      isFinished: false,
      showResult: false,
      handleAnswer: mockHandleAnswer,
      goToNextQuestion: mockGoToNextQuestion,
      handleRestart: jest.fn()
    });
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {})),
      rerender = _render.rerender;
    _reactNative.fireEvent.press(_reactNative.screen.getByText('A'));
    mockUseQuizEngine.mockReturnValue(Object.assign({}, mockUseQuizEngine(), {
      showResult: true
    }));
    rerender((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByText('Continuer')).toBeTruthy();
    });
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Continuer'));
    expect(mockGoToNextQuestion).toHaveBeenCalled();
  }));
  test('renders ResultScreen when quiz is finished', (0, _asyncToGenerator2.default)(function* () {
    var mockQuestions = [{
      id: 'q1',
      word: 'Word 1',
      choices: ['A', 'B', 'C'],
      correctAnswer: 'A'
    }];
    setupMocks({
      revisionQuestions: mockQuestions,
      isLoading: false,
      hasEnoughWords: true,
      canGenerateQuestions: true
    }, {
      currentQuestion: null,
      currentQuestionIndex: 1,
      totalQuestions: mockQuestions.length,
      score: 1,
      isFinished: true,
      showResult: true,
      handleAnswer: jest.fn(),
      goToNextQuestion: jest.fn(),
      handleRestart: jest.fn()
    });
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {})),
      findByText = _render2.findByText;
    yield findByText('1');
    expect(_reactNative.screen.getByText('/1')).toBeTruthy();
    expect(_reactNative.screen.getByText('Rejouer')).toBeTruthy();
    expect(_reactNative.screen.getByText('Terminer')).toBeTruthy();
  }));
  test('handles restart from ResultScreen', (0, _asyncToGenerator2.default)(function* () {
    var mockQuestions = [{
      id: 'q1',
      word: 'Word 1',
      choices: ['A', 'B', 'C'],
      correctAnswer: 'A'
    }];
    var mockHandleRestart = jest.fn();
    setupMocks({
      revisionQuestions: mockQuestions,
      isLoading: false,
      hasEnoughWords: true,
      canGenerateQuestions: true
    }, {
      currentQuestion: null,
      currentQuestionIndex: 1,
      totalQuestions: mockQuestions.length,
      score: 1,
      isFinished: true,
      showResult: true,
      handleAnswer: jest.fn(),
      goToNextQuestion: jest.fn(),
      handleRestart: mockHandleRestart
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByText('Rejouer')).toBeTruthy();
    });
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Rejouer'));
    expect(mockHandleRestart).toHaveBeenCalled();
  }));
  test('handles finish from ResultScreen', (0, _asyncToGenerator2.default)(function* () {
    var mockQuestions = [{
      id: 'q1',
      word: 'Word 1',
      choices: ['A', 'B', 'C'],
      correctAnswer: 'A'
    }];
    setupMocks({
      revisionQuestions: mockQuestions,
      isLoading: false,
      hasEnoughWords: true,
      canGenerateQuestions: true
    }, {
      currentQuestion: null,
      currentQuestionIndex: 1,
      totalQuestions: mockQuestions.length,
      score: 1,
      isFinished: true,
      showResult: true,
      handleAnswer: jest.fn(),
      goToNextQuestion: jest.fn(),
      handleRestart: jest.fn()
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByText('Terminer')).toBeTruthy();
    });
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Terminer'));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockMarkRevisionCompleted).toHaveBeenCalledWith(mockQuestions, 1, 1);
      expect(mockGoBack).toHaveBeenCalled();
    });
  }));
  test('handleGoBack is called when back button is pressed in QuizScreen', (0, _asyncToGenerator2.default)(function* () {
    var mockQuestions = [{
      id: 'q1',
      word: 'Word 1',
      choices: ['A', 'B', 'C'],
      correctAnswer: 'A'
    }];
    setupMocks({
      revisionQuestions: mockQuestions,
      isLoading: false,
      hasEnoughWords: true,
      canGenerateQuestions: true
    }, {
      currentQuestion: mockQuestions[0],
      currentQuestionIndex: 0,
      totalQuestions: mockQuestions.length,
      score: 0,
      isFinished: false,
      showResult: false,
      handleAnswer: jest.fn(),
      goToNextQuestion: jest.fn(),
      handleRestart: jest.fn()
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByLabelText('Retour')).toBeTruthy();
    });
    _reactNative.fireEvent.press(_reactNative.screen.getByLabelText('Retour'));
    expect(mockGoBack).toHaveBeenCalled();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,