193a074c7a0874f4fe79f1c402b4167a
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isWorkletFunction = exports.SensorType = exports.ReduceMotion = exports.KeyboardState = exports.InterfaceOrientation = exports.IOSReferenceFrame = void 0;
var _worklet_2197229600445_init_data = {
  code: "function isWorkletFunction_commonTypesTs1(value){return typeof value==='function'&&!!value.__workletHash;}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\commonTypes.ts",
  sourceMap: "{\"version\":3,\"names\":[\"isWorkletFunction_commonTypesTs1\",\"value\",\"__workletHash\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/commonTypes.ts\"],\"mappings\":\"AA6JO,SAAAA,gCAIoEA,CAAAC,KAAA,EAIzE,MACE,OAAO,CAAAA,KAAK,GAAK,UAAU,EAC3B,CAAC,CAAEA,KAAK,CAAwCC,aAAa,CAEjE\",\"ignoreList\":[]}",
  version: "3.16.7"
};
var isWorkletFunction = exports.isWorkletFunction = function () {
  var _e = [new global.Error(), 1, -27];
  var isWorkletFunction = function isWorkletFunction(value) {
    return typeof value === 'function' && !!value.__workletHash;
  };
  isWorkletFunction.__closure = {};
  isWorkletFunction.__workletHash = 2197229600445;
  isWorkletFunction.__initData = _worklet_2197229600445_init_data;
  isWorkletFunction.__stackDetails = _e;
  return isWorkletFunction;
}();
var SensorType = exports.SensorType = function (SensorType) {
  SensorType[SensorType["ACCELEROMETER"] = 1] = "ACCELEROMETER";
  SensorType[SensorType["GYROSCOPE"] = 2] = "GYROSCOPE";
  SensorType[SensorType["GRAVITY"] = 3] = "GRAVITY";
  SensorType[SensorType["MAGNETIC_FIELD"] = 4] = "MAGNETIC_FIELD";
  SensorType[SensorType["ROTATION"] = 5] = "ROTATION";
  return SensorType;
}({});
var IOSReferenceFrame = exports.IOSReferenceFrame = function (IOSReferenceFrame) {
  IOSReferenceFrame[IOSReferenceFrame["XArbitraryZVertical"] = 0] = "XArbitraryZVertical";
  IOSReferenceFrame[IOSReferenceFrame["XArbitraryCorrectedZVertical"] = 1] = "XArbitraryCorrectedZVertical";
  IOSReferenceFrame[IOSReferenceFrame["XMagneticNorthZVertical"] = 2] = "XMagneticNorthZVertical";
  IOSReferenceFrame[IOSReferenceFrame["XTrueNorthZVertical"] = 3] = "XTrueNorthZVertical";
  IOSReferenceFrame[IOSReferenceFrame["Auto"] = 4] = "Auto";
  return IOSReferenceFrame;
}({});
var InterfaceOrientation = exports.InterfaceOrientation = function (InterfaceOrientation) {
  InterfaceOrientation[InterfaceOrientation["ROTATION_0"] = 0] = "ROTATION_0";
  InterfaceOrientation[InterfaceOrientation["ROTATION_90"] = 90] = "ROTATION_90";
  InterfaceOrientation[InterfaceOrientation["ROTATION_180"] = 180] = "ROTATION_180";
  InterfaceOrientation[InterfaceOrientation["ROTATION_270"] = 270] = "ROTATION_270";
  return InterfaceOrientation;
}({});
var KeyboardState = exports.KeyboardState = function (KeyboardState) {
  KeyboardState[KeyboardState["UNKNOWN"] = 0] = "UNKNOWN";
  KeyboardState[KeyboardState["OPENING"] = 1] = "OPENING";
  KeyboardState[KeyboardState["OPEN"] = 2] = "OPEN";
  KeyboardState[KeyboardState["CLOSING"] = 3] = "CLOSING";
  KeyboardState[KeyboardState["CLOSED"] = 4] = "CLOSED";
  return KeyboardState;
}({});
var ReduceMotion = exports.ReduceMotion = function (ReduceMotion) {
  ReduceMotion["System"] = "system";
  ReduceMotion["Always"] = "always";
  ReduceMotion["Never"] = "never";
  return ReduceMotion;
}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,