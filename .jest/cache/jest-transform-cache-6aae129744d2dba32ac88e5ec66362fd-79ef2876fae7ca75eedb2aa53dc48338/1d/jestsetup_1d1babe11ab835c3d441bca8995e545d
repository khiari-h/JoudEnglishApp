14a8041c0536b37dbcf56c837f20a9da
_getJestObj().mock('react-native/Libraries/Settings/Settings', function () {
  return {
    get: jest.fn(function () {
      return 'light';
    }),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn()
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return require('@react-native-async-storage/async-storage/jest/async-storage-mock');
});
_getJestObj().mock('expo-font', function () {
  return {
    useFonts: function useFonts() {
      return [true];
    },
    isLoaded: function isLoaded() {
      return true;
    }
  };
});
_getJestObj().mock('expo-haptics', function () {
  return {
    impactAsync: jest.fn()
  };
});
_getJestObj().mock('expo-splash-screen', function () {
  return {
    hideAsync: jest.fn(),
    preventAutoHideAsync: jest.fn()
  };
});
_getJestObj().mock('expo-constants', function () {
  return Object.assign({}, jest.requireActual('expo-constants'), {
    manifest: {
      extra: {}
    }
  });
});
_getJestObj().mock('expo-asset', function () {
  return {
    Asset: {
      fromModule: jest.fn(function () {
        return {
          downloadAsync: jest.fn(),
          uri: 'test-uri'
        };
      })
    }
  };
});
_getJestObj().mock('@react-native-clipboard/clipboard', function () {
  return {
    getString: jest.fn((0, _asyncToGenerator2.default)(function* () {
      return '';
    })),
    setString: jest.fn()
  };
});
_getJestObj().mock('@react-native-community/push-notification-ios', function () {
  return {
    presentLocalNotification: jest.fn()
  };
});
_getJestObj().mock('@react-native-community/progress-bar-android', function () {
  return 'ProgressBarAndroid';
});
_getJestObj().mock('react-native-reanimated', function () {
  var Reanimated = require('react-native-reanimated/mock');
  Reanimated.useSharedValue = jest.fn(function () {
    return {
      value: 0
    };
  });
  Reanimated.withTiming = function (toValue, options, callback) {
    if (callback) {
      callback(true);
    }
    return toValue;
  };
  Reanimated.withSpring = function (toValue, options, callback) {
    if (callback) {
      callback(true);
    }
    return toValue;
  };
  Reanimated.withRepeat = function (animation, repetitions, reverse) {
    return animation;
  };
  Reanimated.withSequence = function () {
    return arguments.length <= 0 ? undefined : arguments[0];
  };
  Reanimated.withDelay = function (delay, animation) {
    return animation;
  };
  return Reanimated;
});
_getJestObj().mock('expo-modules-core', function () {
  return Object.assign({}, jest.requireActual('expo-modules-core'), {
    requireOptionalNativeModule: jest.fn(),
    NativeModulesProxy: new Proxy({}, {
      get: function get(target, prop) {
        if (prop === 'ExpoLocalization') {
          return {
            locale: 'en-US',
            isoCurrencyCodes: ['USD'],
            timezone: 'America/New_York',
            isRTL: false
          };
        }
        if (prop === 'ExpoRandom') {
          return {
            getRandomBytes: jest.fn(),
            getRandomBytesAsync: jest.fn()
          };
        }
        return {};
      }
    }),
    EventEmitter: jest.fn(function () {
      return {
        addListener: jest.fn(),
        removeListeners: jest.fn()
      };
    }),
    requireNativeViewManager: jest.fn(function () {
      return {};
    })
  });
});
_getJestObj().mock('expo-linear-gradient', function () {
  var React = require('react');
  var _require = require('react-native'),
    View = _require.View;
  return {
    LinearGradient: function LinearGradient(_ref2) {
      var children = _ref2.children,
        colors = _ref2.colors,
        start = _ref2.start,
        end = _ref2.end,
        style = _ref2.style,
        props = (0, _objectWithoutProperties2.default)(_ref2, _excluded);
      return (0, _jsxRuntime.jsx)(View, Object.assign({
        style: [style, {
          backgroundColor: colors ? colors[0] : 'transparent'
        }]
      }, props, {
        children: children
      }));
    }
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn(),
      replace: jest.fn(),
      back: jest.fn(),
      canGoBack: jest.fn(function () {
        return true;
      }),
      setParams: jest.fn()
    },
    useFocusEffect: jest.fn(function () {}),
    useRouter: jest.fn(function () {
      return {
        push: jest.fn(),
        replace: jest.fn(),
        back: jest.fn(),
        canGoBack: jest.fn(function () {
          return true;
        }),
        setParams: jest.fn()
      };
    }),
    useLocalSearchParams: jest.fn(function () {
      return {};
    }),
    useGlobalSearchParams: jest.fn(function () {
      return {};
    }),
    useSegments: jest.fn(function () {
      return [];
    }),
    usePathname: jest.fn(function () {
      return '/';
    }),
    Redirect: function Redirect(_ref3) {
      var href = _ref3.href;
      return null;
    },
    Link: function Link(_ref4) {
      var href = _ref4.href,
        children = _ref4.children,
        props = (0, _objectWithoutProperties2.default)(_ref4, _excluded2);
      var React = require('react');
      var _require2 = require('react-native'),
        TouchableOpacity = _require2.TouchableOpacity,
        Text = _require2.Text;
      return React.createElement(TouchableOpacity, props, typeof children === 'string' ? React.createElement(Text, {}, children) : children);
    },
    Stack: {
      Screen: function Screen(_ref5) {
        var children = _ref5.children,
          props = (0, _objectWithoutProperties2.default)(_ref5, _excluded3);
        var React = require('react');
        return React.createElement('div', props, children);
      }
    },
    Tabs: {
      Screen: function Screen(_ref6) {
        var children = _ref6.children,
          props = (0, _objectWithoutProperties2.default)(_ref6, _excluded4);
        var React = require('react');
        return React.createElement('div', props, children);
      }
    }
  };
});
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  var mockAnimatedValue = {
    setValue: jest.fn(),
    addListener: jest.fn(function () {
      return 'mockListenerId';
    }),
    removeListener: jest.fn(),
    removeAllListeners: jest.fn(),
    interpolate: jest.fn(function () {
      return mockAnimatedValue;
    }),
    stopAnimation: jest.fn(),
    resetAnimation: jest.fn(),
    _value: 0,
    _offset: 0,
    __getValue: jest.fn(function () {
      return 0;
    })
  };
  var mockAnimatedTiming = {
    start: jest.fn(function (callback) {
      if (callback) {
        setTimeout(callback, 0, {
          finished: true
        });
      }
    }),
    stop: jest.fn(),
    reset: jest.fn()
  };
  RN.Animated = Object.assign({}, RN.Animated, {
    Value: jest.fn(function () {
      return mockAnimatedValue;
    }),
    ValueXY: jest.fn(function () {
      return {
        x: mockAnimatedValue,
        y: mockAnimatedValue,
        setValue: jest.fn(),
        setOffset: jest.fn(),
        flattenOffset: jest.fn(),
        extractOffset: jest.fn(),
        addListener: jest.fn(function () {
          return 'mockListenerId';
        }),
        removeListener: jest.fn(),
        stopAnimation: jest.fn(),
        resetAnimation: jest.fn(),
        getLayout: jest.fn(function () {
          return {
            left: mockAnimatedValue,
            top: mockAnimatedValue
          };
        }),
        getTranslateTransform: jest.fn(function () {
          return [{
            translateX: mockAnimatedValue
          }, {
            translateY: mockAnimatedValue
          }];
        })
      };
    }),
    timing: jest.fn(function () {
      return {
        start: jest.fn(function (callback) {
          if (callback) callback({
            finished: true
          });
        }),
        stop: jest.fn(),
        reset: jest.fn()
      };
    }),
    spring: jest.fn(function () {
      return {
        start: jest.fn(function (callback) {
          if (callback) callback({
            finished: true
          });
        }),
        stop: jest.fn(),
        reset: jest.fn()
      };
    }),
    decay: jest.fn(function () {
      return mockAnimatedTiming;
    }),
    sequence: jest.fn(function (animations) {
      return {
        start: jest.fn(function (callback) {
          if (callback) callback({
            finished: true
          });
        }),
        stop: jest.fn(),
        reset: jest.fn()
      };
    }),
    parallel: jest.fn(function (animations) {
      return {
        start: jest.fn(function (callback) {
          if (callback) callback({
            finished: true
          });
        }),
        stop: jest.fn(),
        reset: jest.fn()
      };
    }),
    stagger: jest.fn(function (time, animations) {
      return {
        start: jest.fn(function (callback) {
          if (callback) setTimeout(callback, 0, {
            finished: true
          });
        }),
        stop: jest.fn(),
        reset: jest.fn()
      };
    }),
    delay: jest.fn(function (time) {
      return {
        start: jest.fn(function (callback) {
          if (callback) setTimeout(callback, 0, {
            finished: true
          });
        }),
        stop: jest.fn(),
        reset: jest.fn()
      };
    }),
    loop: jest.fn(function (animation) {
      return {
        start: jest.fn(function (callback) {
          if (callback) setTimeout(callback, 0, {
            finished: true
          });
        }),
        stop: jest.fn(),
        reset: jest.fn()
      };
    }),
    View: RN.Animated.View,
    Text: RN.Animated.Text,
    ScrollView: RN.Animated.ScrollView,
    Image: RN.Animated.Image,
    Easing: {
      linear: jest.fn(function (t) {
        return t;
      }),
      ease: jest.fn(function (t) {
        return t;
      }),
      quad: jest.fn(function (t) {
        return t * t;
      }),
      cubic: jest.fn(function (t) {
        return t * t * t;
      }),
      poly: jest.fn(function (n) {
        return function (t) {
          return Math.pow(t, n);
        };
      }),
      sin: jest.fn(function (t) {
        return 1 - Math.cos(t * Math.PI / 2);
      }),
      circle: jest.fn(function (t) {
        return 1 - Math.sqrt(1 - t * t);
      }),
      exp: jest.fn(function (t) {
        return Math.pow(2, 10 * (t - 1));
      }),
      elastic: jest.fn(function (bounciness) {
        return function (t) {
          return t;
        };
      }),
      back: jest.fn(function (s) {
        return function (t) {
          return t;
        };
      }),
      bounce: jest.fn(function (t) {
        return t;
      }),
      bezier: jest.fn(function (x1, y1, x2, y2) {
        return function (t) {
          return t;
        };
      }),
      in: jest.fn(function (easing) {
        return easing;
      }),
      out: jest.fn(function (easing) {
        return function (t) {
          return 1 - easing(1 - t);
        };
      }),
      inOut: jest.fn(function (easing) {
        return function (t) {
          return t < 0.5 ? easing(t * 2) / 2 : (2 - easing((1 - t) * 2)) / 2;
        };
      })
    },
    add: jest.fn(function (a, b) {
      return mockAnimatedValue;
    }),
    subtract: jest.fn(function (a, b) {
      return mockAnimatedValue;
    }),
    multiply: jest.fn(function (a, b) {
      return mockAnimatedValue;
    }),
    divide: jest.fn(function (a, b) {
      return mockAnimatedValue;
    }),
    modulo: jest.fn(function (a, modulus) {
      return mockAnimatedValue;
    }),
    diffClamp: jest.fn(function (a, min, max) {
      return mockAnimatedValue;
    }),
    event: jest.fn(function () {
      return jest.fn();
    }),
    forkEvent: jest.fn(function () {
      return jest.fn();
    }),
    unforkEvent: jest.fn()
  });
  return RN;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "colors", "start", "end", "style"],
  _excluded2 = ["href", "children"],
  _excluded3 = ["children"],
  _excluded4 = ["children"];
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
_reactNative.NativeModules.SettingsManager = _reactNative.NativeModules.SettingsManager || {
  settings: {
    AppleLocale: 'en_US'
  }
};
if (typeof setImmediate === 'undefined') {
  global.setImmediate = function (fn) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return setTimeout.apply(void 0, [fn, 0].concat(args));
  };
}
if (typeof clearImmediate === 'undefined') {
  global.clearImmediate = function (id) {
    return clearTimeout(id);
  };
}
var originalConsole = Object.assign({}, console);
global.console = Object.assign({}, console, {
  error: jest.fn(function (message) {
    if (typeof message === 'string' && message.includes('Warning: An update to') && message.includes('was not wrapped in act')) {
      return;
    }
    originalConsole.error(message);
  }),
  warn: jest.fn(function (message) {
    var msg = typeof message === 'string' ? message : '';
    var ignore = ['Warning: An update to', 'was not wrapped in act', 'has been extracted from react-native core and will be removed in a future release', 'new NativeEventEmitter()', 'PushNotificationIOS has been extracted from react-native core', 'Clipboard has been extracted from react-native core', 'ProgressBarAndroid has been extracted from react-native core'].some(function (t) {
      return msg.includes(t);
    });
    if (ignore) return;
    originalConsole.warn(message);
  })
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJnZXQiLCJqZXN0IiwiZm4iLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlcXVpcmUiLCJ1c2VGb250cyIsImlzTG9hZGVkIiwiaW1wYWN0QXN5bmMiLCJoaWRlQXN5bmMiLCJwcmV2ZW50QXV0b0hpZGVBc3luYyIsIk9iamVjdCIsImFzc2lnbiIsInJlcXVpcmVBY3R1YWwiLCJtYW5pZmVzdCIsImV4dHJhIiwiQXNzZXQiLCJmcm9tTW9kdWxlIiwiZG93bmxvYWRBc3luYyIsInVyaSIsImdldFN0cmluZyIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImRlZmF1bHQiLCJzZXRTdHJpbmciLCJwcmVzZW50TG9jYWxOb3RpZmljYXRpb24iLCJSZWFuaW1hdGVkIiwidXNlU2hhcmVkVmFsdWUiLCJ2YWx1ZSIsIndpdGhUaW1pbmciLCJ0b1ZhbHVlIiwib3B0aW9ucyIsImNhbGxiYWNrIiwid2l0aFNwcmluZyIsIndpdGhSZXBlYXQiLCJhbmltYXRpb24iLCJyZXBldGl0aW9ucyIsInJldmVyc2UiLCJ3aXRoU2VxdWVuY2UiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJ3aXRoRGVsYXkiLCJkZWxheSIsInJlcXVpcmVPcHRpb25hbE5hdGl2ZU1vZHVsZSIsIk5hdGl2ZU1vZHVsZXNQcm94eSIsIlByb3h5IiwidGFyZ2V0IiwicHJvcCIsImxvY2FsZSIsImlzb0N1cnJlbmN5Q29kZXMiLCJ0aW1lem9uZSIsImlzUlRMIiwiZ2V0UmFuZG9tQnl0ZXMiLCJnZXRSYW5kb21CeXRlc0FzeW5jIiwiRXZlbnRFbWl0dGVyIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lcnMiLCJyZXF1aXJlTmF0aXZlVmlld01hbmFnZXIiLCJSZWFjdCIsIl9yZXF1aXJlIiwiVmlldyIsIkxpbmVhckdyYWRpZW50IiwiX3JlZjIiLCJjaGlsZHJlbiIsImNvbG9ycyIsInN0YXJ0IiwiZW5kIiwic3R5bGUiLCJwcm9wcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllczIiLCJfZXhjbHVkZWQiLCJfanN4UnVudGltZSIsImpzeCIsImJhY2tncm91bmRDb2xvciIsInJvdXRlciIsInB1c2giLCJyZXBsYWNlIiwiYmFjayIsImNhbkdvQmFjayIsInNldFBhcmFtcyIsInVzZUZvY3VzRWZmZWN0IiwidXNlUm91dGVyIiwidXNlTG9jYWxTZWFyY2hQYXJhbXMiLCJ1c2VHbG9iYWxTZWFyY2hQYXJhbXMiLCJ1c2VTZWdtZW50cyIsInVzZVBhdGhuYW1lIiwiUmVkaXJlY3QiLCJfcmVmMyIsImhyZWYiLCJMaW5rIiwiX3JlZjQiLCJfZXhjbHVkZWQyIiwiX3JlcXVpcmUyIiwiVG91Y2hhYmxlT3BhY2l0eSIsIlRleHQiLCJjcmVhdGVFbGVtZW50IiwiU3RhY2siLCJTY3JlZW4iLCJfcmVmNSIsIl9leGNsdWRlZDMiLCJUYWJzIiwiX3JlZjYiLCJfZXhjbHVkZWQ0IiwiUk4iLCJtb2NrQW5pbWF0ZWRWYWx1ZSIsInNldFZhbHVlIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJpbnRlcnBvbGF0ZSIsInN0b3BBbmltYXRpb24iLCJyZXNldEFuaW1hdGlvbiIsIl92YWx1ZSIsIl9vZmZzZXQiLCJfX2dldFZhbHVlIiwibW9ja0FuaW1hdGVkVGltaW5nIiwic2V0VGltZW91dCIsImZpbmlzaGVkIiwic3RvcCIsInJlc2V0IiwiQW5pbWF0ZWQiLCJWYWx1ZSIsIlZhbHVlWFkiLCJ4IiwieSIsInNldE9mZnNldCIsImZsYXR0ZW5PZmZzZXQiLCJleHRyYWN0T2Zmc2V0IiwiZ2V0TGF5b3V0IiwibGVmdCIsInRvcCIsImdldFRyYW5zbGF0ZVRyYW5zZm9ybSIsInRyYW5zbGF0ZVgiLCJ0cmFuc2xhdGVZIiwidGltaW5nIiwic3ByaW5nIiwiZGVjYXkiLCJzZXF1ZW5jZSIsImFuaW1hdGlvbnMiLCJwYXJhbGxlbCIsInN0YWdnZXIiLCJ0aW1lIiwibG9vcCIsIlNjcm9sbFZpZXciLCJJbWFnZSIsIkVhc2luZyIsImxpbmVhciIsInQiLCJlYXNlIiwicXVhZCIsImN1YmljIiwicG9seSIsIm4iLCJNYXRoIiwicG93Iiwic2luIiwiY29zIiwiUEkiLCJjaXJjbGUiLCJzcXJ0IiwiZXhwIiwiZWxhc3RpYyIsImJvdW5jaW5lc3MiLCJzIiwiYm91bmNlIiwiYmV6aWVyIiwieDEiLCJ5MSIsIngyIiwieTIiLCJpbiIsImVhc2luZyIsIm91dCIsImluT3V0IiwiYWRkIiwiYSIsImIiLCJzdWJ0cmFjdCIsIm11bHRpcGx5IiwiZGl2aWRlIiwibW9kdWxvIiwibW9kdWx1cyIsImRpZmZDbGFtcCIsIm1pbiIsIm1heCIsImV2ZW50IiwiZm9ya0V2ZW50IiwidW5mb3JrRXZlbnQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3JlYWN0TmF0aXZlIiwiX3JlcXVpcmUzIiwiTmF0aXZlTW9kdWxlcyIsIlNldHRpbmdzTWFuYWdlciIsInNldHRpbmdzIiwiQXBwbGVMb2NhbGUiLCJzZXRJbW1lZGlhdGUiLCJnbG9iYWwiLCJfbGVuIiwiYXJncyIsIkFycmF5IiwiX2tleSIsImFwcGx5IiwiY29uY2F0IiwiY2xlYXJJbW1lZGlhdGUiLCJpZCIsImNsZWFyVGltZW91dCIsIm9yaWdpbmFsQ29uc29sZSIsImNvbnNvbGUiLCJlcnJvciIsIm1lc3NhZ2UiLCJpbmNsdWRlcyIsIndhcm4iLCJtc2ciLCJpZ25vcmUiLCJzb21lIl0sInNvdXJjZXMiOlsiamVzdC5zZXR1cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOYXRpdmVNb2R1bGVzIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcblxuLy8gMS4gTW9ja3MgZGUgYmFzZSBSZWFjdCBOYXRpdmVcbmplc3QubW9jaygncmVhY3QtbmF0aXZlL0xpYnJhcmllcy9TZXR0aW5ncy9TZXR0aW5ncycsICgpID0+ICh7XG4gIGdldDogamVzdC5mbigoKSA9PiAnbGlnaHQnKSxcbiAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICByZW1vdmVFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXG59KSk7XG5cbk5hdGl2ZU1vZHVsZXMuU2V0dGluZ3NNYW5hZ2VyID0gTmF0aXZlTW9kdWxlcy5TZXR0aW5nc01hbmFnZXIgfHwge1xuICBzZXR0aW5nczogeyBBcHBsZUxvY2FsZTogJ2VuX1VTJyB9LFxufTtcblxuLy8gMi4gTW9ja3MgZGVzIGxpYnJhaXJpZXMgdGllcmNlc1xuamVzdC5tb2NrKCdAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZScsICgpID0+XG4gIHJlcXVpcmUoJ0ByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlL2plc3QvYXN5bmMtc3RvcmFnZS1tb2NrJylcbik7XG5cbmplc3QubW9jaygnZXhwby1mb250JywgKCkgPT4gKHtcbiAgdXNlRm9udHM6ICgpID0+IFt0cnVlXSxcbiAgaXNMb2FkZWQ6ICgpID0+IHRydWUsXG59KSk7XG5cbmplc3QubW9jaygnZXhwby1oYXB0aWNzJywgKCkgPT4gKHtcbiAgaW1wYWN0QXN5bmM6IGplc3QuZm4oKSxcbn0pKTtcblxuamVzdC5tb2NrKCdleHBvLXNwbGFzaC1zY3JlZW4nLCAoKSA9PiAoe1xuICBoaWRlQXN5bmM6IGplc3QuZm4oKSxcbiAgcHJldmVudEF1dG9IaWRlQXN5bmM6IGplc3QuZm4oKSxcbn0pKTtcblxuamVzdC5tb2NrKCdleHBvLWNvbnN0YW50cycsICgpID0+ICh7XG4gIC4uLmplc3QucmVxdWlyZUFjdHVhbCgnZXhwby1jb25zdGFudHMnKSxcbiAgbWFuaWZlc3Q6IHtcbiAgICBleHRyYToge1xuICAgICAgLy8geW91ciBleHRyYSBjb25maWcgaGVyZVxuICAgIH0sXG4gIH0sXG59KSk7XG5cbmplc3QubW9jaygnZXhwby1hc3NldCcsICgpID0+ICh7XG4gIEFzc2V0OiB7XG4gICAgZnJvbU1vZHVsZTogamVzdC5mbigoKSA9PiAoe1xuICAgICAgZG93bmxvYWRBc3luYzogamVzdC5mbigpLFxuICAgICAgdXJpOiAndGVzdC11cmknLFxuICAgIH0pKSxcbiAgfSxcbn0pKTtcblxuLy8gTW9ja3MgcG91ciDDqXZpdGVyIHdhcm5pbmdzIFJOIGV4dHJhaXRzIGR1IGNvcmVcbmplc3QubW9jaygnQHJlYWN0LW5hdGl2ZS1jbGlwYm9hcmQvY2xpcGJvYXJkJywgKCkgPT4gKHtcbiAgZ2V0U3RyaW5nOiBqZXN0LmZuKGFzeW5jICgpID0+ICcnKSxcbiAgc2V0U3RyaW5nOiBqZXN0LmZuKCksXG59KSk7XG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXRpdmUtY29tbXVuaXR5L3B1c2gtbm90aWZpY2F0aW9uLWlvcycsICgpID0+ICh7XG4gIHByZXNlbnRMb2NhbE5vdGlmaWNhdGlvbjogamVzdC5mbigpLFxufSkpO1xuamVzdC5tb2NrKCdAcmVhY3QtbmF0aXZlLWNvbW11bml0eS9wcm9ncmVzcy1iYXItYW5kcm9pZCcsICgpID0+ICdQcm9ncmVzc0JhckFuZHJvaWQnKTtcblxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUtcmVhbmltYXRlZCcsICgpID0+IHtcbiAgICBjb25zdCBSZWFuaW1hdGVkID0gcmVxdWlyZSgncmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWQvbW9jaycpO1xuICAgIFJlYW5pbWF0ZWQudXNlU2hhcmVkVmFsdWUgPSBqZXN0LmZuKCgpID0+ICh7IHZhbHVlOiAwIH0pKTtcbiAgICBSZWFuaW1hdGVkLndpdGhUaW1pbmcgPSAodG9WYWx1ZSwgb3B0aW9ucywgY2FsbGJhY2spID0+IHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9WYWx1ZTtcbiAgICB9O1xuICAgIFJlYW5pbWF0ZWQud2l0aFNwcmluZyA9ICh0b1ZhbHVlLCBvcHRpb25zLCBjYWxsYmFjaykgPT4ge1xuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b1ZhbHVlO1xuICAgIH07XG4gICAgUmVhbmltYXRlZC53aXRoUmVwZWF0ID0gKGFuaW1hdGlvbiwgcmVwZXRpdGlvbnMsIHJldmVyc2UpID0+IHtcbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbjtcbiAgICB9O1xuICAgIFJlYW5pbWF0ZWQud2l0aFNlcXVlbmNlID0gKC4uLmFuaW1hdGlvbnMpID0+IHtcbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbnNbMF07XG4gICAgfTtcbiAgICBSZWFuaW1hdGVkLndpdGhEZWxheSA9IChkZWxheSwgYW5pbWF0aW9uKSA9PiB7XG4gICAgICAgIHJldHVybiBhbmltYXRpb247XG4gICAgfTtcbiAgICByZXR1cm4gUmVhbmltYXRlZDtcbn0pO1xuXG4vLyBNb2NrICdleHBvLW1vZHVsZXMtY29yZSdcbmplc3QubW9jaygnZXhwby1tb2R1bGVzLWNvcmUnLCAoKSA9PiAoe1xuICAuLi5qZXN0LnJlcXVpcmVBY3R1YWwoJ2V4cG8tbW9kdWxlcy1jb3JlJyksXG4gIHJlcXVpcmVPcHRpb25hbE5hdGl2ZU1vZHVsZTogamVzdC5mbigpLFxuICBOYXRpdmVNb2R1bGVzUHJveHk6IG5ldyBQcm94eSh7fSwge1xuICAgIGdldCh0YXJnZXQsIHByb3ApIHtcbiAgICAgIGlmIChwcm9wID09PSAnRXhwb0xvY2FsaXphdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBsb2NhbGU6ICdlbi1VUycsXG4gICAgICAgICAgaXNvQ3VycmVuY3lDb2RlczogWydVU0QnXSxcbiAgICAgICAgICB0aW1lem9uZTogJ0FtZXJpY2EvTmV3X1lvcmsnLFxuICAgICAgICAgIGlzUlRMOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wID09PSAnRXhwb1JhbmRvbScpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBnZXRSYW5kb21CeXRlczogamVzdC5mbigpLFxuICAgICAgICAgICAgICBnZXRSYW5kb21CeXRlc0FzeW5jOiBqZXN0LmZuKCksXG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgfSksXG4gIEV2ZW50RW1pdHRlcjogamVzdC5mbigoKSA9PiAoe1xuICAgIGFkZExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgcmVtb3ZlTGlzdGVuZXJzOiBqZXN0LmZuKCksXG4gIH0pKSxcbiAgcmVxdWlyZU5hdGl2ZVZpZXdNYW5hZ2VyOiBqZXN0LmZuKCgpID0+ICh7fSkpLFxufSkpO1xuXG4vLyDwn5SlIE1vY2sgZXhwby1saW5lYXItZ3JhZGllbnRcbmplc3QubW9jaygnZXhwby1saW5lYXItZ3JhZGllbnQnLCAoKSA9PiB7XG4gIGNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbiAgY29uc3QgeyBWaWV3IH0gPSByZXF1aXJlKCdyZWFjdC1uYXRpdmUnKTtcbiAgXG4gIHJldHVybiB7XG4gICAgTGluZWFyR3JhZGllbnQ6ICh7IGNoaWxkcmVuLCBjb2xvcnMsIHN0YXJ0LCBlbmQsIHN0eWxlLCAuLi5wcm9wcyB9KSA9PiAoXG4gICAgICA8VmlldyBcbiAgICAgICAgc3R5bGU9e1tcbiAgICAgICAgICBzdHlsZSxcbiAgICAgICAgICB7IGJhY2tncm91bmRDb2xvcjogY29sb3JzID8gY29sb3JzWzBdIDogJ3RyYW5zcGFyZW50JyB9XG4gICAgICAgIF19IFxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICA+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvVmlldz5cbiAgICApLFxuICB9O1xufSk7XG5cbi8vIPCflKUgTW9jayBleHBvLXJvdXRlclxuamVzdC5tb2NrKCdleHBvLXJvdXRlcicsICgpID0+ICh7XG4gIHJvdXRlcjoge1xuICAgIHB1c2g6IGplc3QuZm4oKSxcbiAgICByZXBsYWNlOiBqZXN0LmZuKCksXG4gICAgYmFjazogamVzdC5mbigpLFxuICAgIGNhbkdvQmFjazogamVzdC5mbigoKSA9PiB0cnVlKSxcbiAgICBzZXRQYXJhbXM6IGplc3QuZm4oKSxcbiAgfSxcbiAgdXNlRm9jdXNFZmZlY3Q6IGplc3QuZm4oKCkgPT4ge30pLFxuICB1c2VSb3V0ZXI6IGplc3QuZm4oKCkgPT4gKHtcbiAgICBwdXNoOiBqZXN0LmZuKCksXG4gICAgcmVwbGFjZTogamVzdC5mbigpLFxuICAgIGJhY2s6IGplc3QuZm4oKSxcbiAgICBjYW5Hb0JhY2s6IGplc3QuZm4oKCkgPT4gdHJ1ZSksXG4gICAgc2V0UGFyYW1zOiBqZXN0LmZuKCksXG4gIH0pKSxcbiAgdXNlTG9jYWxTZWFyY2hQYXJhbXM6IGplc3QuZm4oKCkgPT4gKHt9KSksXG4gIHVzZUdsb2JhbFNlYXJjaFBhcmFtczogamVzdC5mbigoKSA9PiAoe30pKSxcbiAgdXNlU2VnbWVudHM6IGplc3QuZm4oKCkgPT4gW10pLFxuICB1c2VQYXRobmFtZTogamVzdC5mbigoKSA9PiAnLycpLFxuICBSZWRpcmVjdDogKHsgaHJlZiB9KSA9PiBudWxsLFxuICBMaW5rOiAoeyBocmVmLCBjaGlsZHJlbiwgLi4ucHJvcHMgfSkgPT4ge1xuICAgIGNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbiAgICBjb25zdCB7IFRvdWNoYWJsZU9wYWNpdHksIFRleHQgfSA9IHJlcXVpcmUoJ3JlYWN0LW5hdGl2ZScpO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFRvdWNoYWJsZU9wYWNpdHksIHByb3BzLCBcbiAgICAgIHR5cGVvZiBjaGlsZHJlbiA9PT0gJ3N0cmluZycgXG4gICAgICAgID8gUmVhY3QuY3JlYXRlRWxlbWVudChUZXh0LCB7fSwgY2hpbGRyZW4pXG4gICAgICAgIDogY2hpbGRyZW5cbiAgICApO1xuICB9LFxuICBTdGFjazoge1xuICAgIFNjcmVlbjogKHsgY2hpbGRyZW4sIC4uLnByb3BzIH0pID0+IHtcbiAgICAgIGNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCBwcm9wcywgY2hpbGRyZW4pO1xuICAgIH0sXG4gIH0sXG4gIFRhYnM6IHtcbiAgICBTY3JlZW46ICh7IGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PiB7XG4gICAgICBjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgcHJvcHMsIGNoaWxkcmVuKTtcbiAgICB9LFxuICB9LFxufSkpO1xuXG4vLyAzLiBNb2NrIGNvbXBsZXQgZGVzIGFuaW1hdGlvbnMgUmVhY3QgTmF0aXZlIC0gUExVUyBBR0dSRVNTSUZcbmplc3QubW9jaygncmVhY3QtbmF0aXZlJywgKCkgPT4ge1xuICBjb25zdCBSTiA9IGplc3QucmVxdWlyZUFjdHVhbCgncmVhY3QtbmF0aXZlJyk7XG4gIFxuICAvLyBNb2NrIGNvbXBsZXQgZCdBbmltYXRlZCBwb3VyIMOpdml0ZXIgdG91cyBsZXMgd2FybmluZ3NcbiAgY29uc3QgbW9ja0FuaW1hdGVkVmFsdWUgPSB7XG4gICAgc2V0VmFsdWU6IGplc3QuZm4oKSxcbiAgICBhZGRMaXN0ZW5lcjogamVzdC5mbigoKSA9PiAnbW9ja0xpc3RlbmVySWQnKSxcbiAgICByZW1vdmVMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgIHJlbW92ZUFsbExpc3RlbmVyczogamVzdC5mbigpLFxuICAgIGludGVycG9sYXRlOiBqZXN0LmZuKCgpID0+IG1vY2tBbmltYXRlZFZhbHVlKSxcbiAgICBzdG9wQW5pbWF0aW9uOiBqZXN0LmZuKCksXG4gICAgcmVzZXRBbmltYXRpb246IGplc3QuZm4oKSxcbiAgICBfdmFsdWU6IDAsXG4gICAgX29mZnNldDogMCxcbiAgICBfX2dldFZhbHVlOiBqZXN0LmZuKCgpID0+IDApLFxuICB9O1xuXG4gIGNvbnN0IG1vY2tBbmltYXRlZFRpbWluZyA9IHtcbiAgICBzdGFydDogamVzdC5mbigoY2FsbGJhY2spID0+IHtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAvLyBFeMOpY3V0ZXIgaW1tw6lkaWF0ZW1lbnQgc2FucyBkw6lsYWlcbiAgICAgICAgc2V0VGltZW91dChjYWxsYmFjaywgMCwgeyBmaW5pc2hlZDogdHJ1ZSB9KTtcbiAgICAgIH1cbiAgICB9KSxcbiAgICBzdG9wOiBqZXN0LmZuKCksXG4gICAgcmVzZXQ6IGplc3QuZm4oKSxcbiAgfTtcblxuICBSTi5BbmltYXRlZCA9IHtcbiAgICAuLi5STi5BbmltYXRlZCxcbiAgICAvLyBWYWx1ZXNcbiAgICBWYWx1ZTogamVzdC5mbigoKSA9PiBtb2NrQW5pbWF0ZWRWYWx1ZSksXG4gICAgVmFsdWVYWTogamVzdC5mbigoKSA9PiAoe1xuICAgICAgeDogbW9ja0FuaW1hdGVkVmFsdWUsXG4gICAgICB5OiBtb2NrQW5pbWF0ZWRWYWx1ZSxcbiAgICAgIHNldFZhbHVlOiBqZXN0LmZuKCksXG4gICAgICBzZXRPZmZzZXQ6IGplc3QuZm4oKSxcbiAgICAgIGZsYXR0ZW5PZmZzZXQ6IGplc3QuZm4oKSxcbiAgICAgIGV4dHJhY3RPZmZzZXQ6IGplc3QuZm4oKSxcbiAgICAgIGFkZExpc3RlbmVyOiBqZXN0LmZuKCgpID0+ICdtb2NrTGlzdGVuZXJJZCcpLFxuICAgICAgcmVtb3ZlTGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICAgIHN0b3BBbmltYXRpb246IGplc3QuZm4oKSxcbiAgICAgIHJlc2V0QW5pbWF0aW9uOiBqZXN0LmZuKCksXG4gICAgICBnZXRMYXlvdXQ6IGplc3QuZm4oKCkgPT4gKHsgbGVmdDogbW9ja0FuaW1hdGVkVmFsdWUsIHRvcDogbW9ja0FuaW1hdGVkVmFsdWUgfSkpLFxuICAgICAgZ2V0VHJhbnNsYXRlVHJhbnNmb3JtOiBqZXN0LmZuKCgpID0+IFtcbiAgICAgICAgeyB0cmFuc2xhdGVYOiBtb2NrQW5pbWF0ZWRWYWx1ZSB9LFxuICAgICAgICB7IHRyYW5zbGF0ZVk6IG1vY2tBbmltYXRlZFZhbHVlIH0sXG4gICAgICBdKSxcbiAgICB9KSksXG4gICAgXG4gICAgLy8gQW5pbWF0aW9ucyAtIEV4w6ljdXRpb24gaW1tw6lkaWF0ZVxuICAgIHRpbWluZzogamVzdC5mbigoKSA9PiAoe1xuICAgICAgc3RhcnQ6IGplc3QuZm4oKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soeyBmaW5pc2hlZDogdHJ1ZSB9KTtcbiAgICAgIH0pLFxuICAgICAgc3RvcDogamVzdC5mbigpLFxuICAgICAgcmVzZXQ6IGplc3QuZm4oKSxcbiAgICB9KSksXG4gICAgc3ByaW5nOiBqZXN0LmZuKCgpID0+ICh7XG4gICAgICBzdGFydDogamVzdC5mbigoY2FsbGJhY2spID0+IHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayh7IGZpbmlzaGVkOiB0cnVlIH0pO1xuICAgICAgfSksXG4gICAgICBzdG9wOiBqZXN0LmZuKCksXG4gICAgICByZXNldDogamVzdC5mbigpLFxuICAgIH0pKSxcbiAgICBkZWNheTogamVzdC5mbigoKSA9PiBtb2NrQW5pbWF0ZWRUaW1pbmcpLFxuICAgIHNlcXVlbmNlOiBqZXN0LmZuKChhbmltYXRpb25zKSA9PiAoe1xuICAgICAgc3RhcnQ6IGplc3QuZm4oKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soeyBmaW5pc2hlZDogdHJ1ZSB9KTtcbiAgICAgIH0pLFxuICAgICAgc3RvcDogamVzdC5mbigpLFxuICAgICAgcmVzZXQ6IGplc3QuZm4oKSxcbiAgICB9KSksXG4gICAgcGFyYWxsZWw6IGplc3QuZm4oKGFuaW1hdGlvbnMpID0+ICh7XG4gICAgICBzdGFydDogamVzdC5mbigoY2FsbGJhY2spID0+IHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayh7IGZpbmlzaGVkOiB0cnVlIH0pO1xuICAgICAgfSksXG4gICAgICBzdG9wOiBqZXN0LmZuKCksXG4gICAgICByZXNldDogamVzdC5mbigpLFxuICAgIH0pKSxcbiAgICBzdGFnZ2VyOiBqZXN0LmZuKCh0aW1lLCBhbmltYXRpb25zKSA9PiAoe1xuICAgICAgc3RhcnQ6IGplc3QuZm4oKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIGlmIChjYWxsYmFjaykgc2V0VGltZW91dChjYWxsYmFjaywgMCwgeyBmaW5pc2hlZDogdHJ1ZSB9KTtcbiAgICAgIH0pLFxuICAgICAgc3RvcDogamVzdC5mbigpLFxuICAgICAgcmVzZXQ6IGplc3QuZm4oKSxcbiAgICB9KSksXG4gICAgZGVsYXk6IGplc3QuZm4oKHRpbWUpID0+ICh7XG4gICAgICBzdGFydDogamVzdC5mbigoY2FsbGJhY2spID0+IHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSBzZXRUaW1lb3V0KGNhbGxiYWNrLCAwLCB7IGZpbmlzaGVkOiB0cnVlIH0pO1xuICAgICAgfSksXG4gICAgICBzdG9wOiBqZXN0LmZuKCksXG4gICAgICByZXNldDogamVzdC5mbigpLFxuICAgIH0pKSxcbiAgICBsb29wOiBqZXN0LmZuKChhbmltYXRpb24pID0+ICh7XG4gICAgICBzdGFydDogamVzdC5mbigoY2FsbGJhY2spID0+IHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSBzZXRUaW1lb3V0KGNhbGxiYWNrLCAwLCB7IGZpbmlzaGVkOiB0cnVlIH0pO1xuICAgICAgfSksXG4gICAgICBzdG9wOiBqZXN0LmZuKCksXG4gICAgICByZXNldDogamVzdC5mbigpLFxuICAgIH0pKSxcblxuICAgIC8vIENvbXBvbmVudHNcbiAgICBWaWV3OiBSTi5BbmltYXRlZC5WaWV3LFxuICAgIFRleHQ6IFJOLkFuaW1hdGVkLlRleHQsXG4gICAgU2Nyb2xsVmlldzogUk4uQW5pbWF0ZWQuU2Nyb2xsVmlldyxcbiAgICBJbWFnZTogUk4uQW5pbWF0ZWQuSW1hZ2UsXG4gICAgXG4gICAgLy8gRWFzaW5nXG4gICAgRWFzaW5nOiB7XG4gICAgICBsaW5lYXI6IGplc3QuZm4oKHQpID0+IHQpLFxuICAgICAgZWFzZTogamVzdC5mbigodCkgPT4gdCksXG4gICAgICBxdWFkOiBqZXN0LmZuKCh0KSA9PiB0ICogdCksXG4gICAgICBjdWJpYzogamVzdC5mbigodCkgPT4gdCAqIHQgKiB0KSxcbiAgICAgIHBvbHk6IGplc3QuZm4oKG4pID0+ICh0KSA9PiBNYXRoLnBvdyh0LCBuKSksXG4gICAgICBzaW46IGplc3QuZm4oKHQpID0+IDEgLSBNYXRoLmNvcyh0ICogTWF0aC5QSSAvIDIpKSxcbiAgICAgIGNpcmNsZTogamVzdC5mbigodCkgPT4gMSAtIE1hdGguc3FydCgxIC0gdCAqIHQpKSxcbiAgICAgIGV4cDogamVzdC5mbigodCkgPT4gTWF0aC5wb3coMiwgMTAgKiAodCAtIDEpKSksXG4gICAgICBlbGFzdGljOiBqZXN0LmZuKChib3VuY2luZXNzKSA9PiAodCkgPT4gdCksXG4gICAgICBiYWNrOiBqZXN0LmZuKChzKSA9PiAodCkgPT4gdCksXG4gICAgICBib3VuY2U6IGplc3QuZm4oKHQpID0+IHQpLFxuICAgICAgYmV6aWVyOiBqZXN0LmZuKCh4MSwgeTEsIHgyLCB5MikgPT4gKHQpID0+IHQpLFxuICAgICAgaW46IGplc3QuZm4oKGVhc2luZykgPT4gZWFzaW5nKSxcbiAgICAgIG91dDogamVzdC5mbigoZWFzaW5nKSA9PiAodCkgPT4gMSAtIGVhc2luZygxIC0gdCkpLFxuICAgICAgaW5PdXQ6IGplc3QuZm4oKGVhc2luZykgPT4gKHQpID0+IHQgPCAwLjUgPyBlYXNpbmcodCAqIDIpIC8gMiA6ICgyIC0gZWFzaW5nKCgxIC0gdCkgKiAyKSkgLyAyKSxcbiAgICB9LFxuXG4gICAgLy8gQWRkIG90aGVyIG1ldGhvZHNcbiAgICBhZGQ6IGplc3QuZm4oKGEsIGIpID0+IG1vY2tBbmltYXRlZFZhbHVlKSxcbiAgICBzdWJ0cmFjdDogamVzdC5mbigoYSwgYikgPT4gbW9ja0FuaW1hdGVkVmFsdWUpLFxuICAgIG11bHRpcGx5OiBqZXN0LmZuKChhLCBiKSA9PiBtb2NrQW5pbWF0ZWRWYWx1ZSksXG4gICAgZGl2aWRlOiBqZXN0LmZuKChhLCBiKSA9PiBtb2NrQW5pbWF0ZWRWYWx1ZSksXG4gICAgbW9kdWxvOiBqZXN0LmZuKChhLCBtb2R1bHVzKSA9PiBtb2NrQW5pbWF0ZWRWYWx1ZSksXG4gICAgZGlmZkNsYW1wOiBqZXN0LmZuKChhLCBtaW4sIG1heCkgPT4gbW9ja0FuaW1hdGVkVmFsdWUpLFxuICAgIFxuICAgIC8vIEV2ZW50XG4gICAgZXZlbnQ6IGplc3QuZm4oKCkgPT4gamVzdC5mbigpKSxcbiAgICBmb3JrRXZlbnQ6IGplc3QuZm4oKCkgPT4gamVzdC5mbigpKSxcbiAgICB1bmZvcmtFdmVudDogamVzdC5mbigpLFxuICB9O1xuXG4gIHJldHVybiBSTjtcbn0pO1xuXG4vLyA0LiBQb2x5ZmlsbHNcbmlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlID09PSAndW5kZWZpbmVkJykge1xuICBnbG9iYWwuc2V0SW1tZWRpYXRlID0gKGZuLCAuLi5hcmdzKSA9PiBzZXRUaW1lb3V0KGZuLCAwLCAuLi5hcmdzKTtcbn1cbmlmICh0eXBlb2YgY2xlYXJJbW1lZGlhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIGdsb2JhbC5jbGVhckltbWVkaWF0ZSA9IChpZCkgPT4gY2xlYXJUaW1lb3V0KGlkKTtcbn1cblxuLy8gNS4gU3VwcHJlc3Mgd2FybmluZ3MgcG91ciBsZXMgdGVzdHMgLSBWRVJTSU9OIENPUlJJR8OJRVxuY29uc3Qgb3JpZ2luYWxDb25zb2xlID0geyAuLi5jb25zb2xlIH07XG5cbmdsb2JhbC5jb25zb2xlID0ge1xuICAuLi5jb25zb2xlLFxuICAvLyBTdXBwcmltZXIgbGVzIHdhcm5pbmdzIGQnYW5pbWF0aW9ucyBkYW5zIGxlcyB0ZXN0c1xuICBlcnJvcjogamVzdC5mbigobWVzc2FnZSkgPT4ge1xuICAgIGlmIChcbiAgICAgIHR5cGVvZiBtZXNzYWdlID09PSAnc3RyaW5nJyAmJiBcbiAgICAgIG1lc3NhZ2UuaW5jbHVkZXMoJ1dhcm5pbmc6IEFuIHVwZGF0ZSB0bycpICYmIFxuICAgICAgbWVzc2FnZS5pbmNsdWRlcygnd2FzIG5vdCB3cmFwcGVkIGluIGFjdCcpXG4gICAgKSB7XG4gICAgICByZXR1cm47IC8vIElnbm9yZSBsZXMgd2FybmluZ3MgYWN0KCkgcG91ciBsZXMgYW5pbWF0aW9uc1xuICAgIH1cbiAgICBvcmlnaW5hbENvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH0pLFxuICB3YXJuOiBqZXN0LmZuKChtZXNzYWdlKSA9PiB7XG4gICAgY29uc3QgbXNnID0gdHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnID8gbWVzc2FnZSA6ICcnO1xuICAgIGNvbnN0IGlnbm9yZSA9IFtcbiAgICAgICdXYXJuaW5nOiBBbiB1cGRhdGUgdG8nLFxuICAgICAgJ3dhcyBub3Qgd3JhcHBlZCBpbiBhY3QnLFxuICAgICAgJ2hhcyBiZWVuIGV4dHJhY3RlZCBmcm9tIHJlYWN0LW5hdGl2ZSBjb3JlIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgcmVsZWFzZScsXG4gICAgICAnbmV3IE5hdGl2ZUV2ZW50RW1pdHRlcigpJyxcbiAgICAgICdQdXNoTm90aWZpY2F0aW9uSU9TIGhhcyBiZWVuIGV4dHJhY3RlZCBmcm9tIHJlYWN0LW5hdGl2ZSBjb3JlJyxcbiAgICAgICdDbGlwYm9hcmQgaGFzIGJlZW4gZXh0cmFjdGVkIGZyb20gcmVhY3QtbmF0aXZlIGNvcmUnLFxuICAgICAgJ1Byb2dyZXNzQmFyQW5kcm9pZCBoYXMgYmVlbiBleHRyYWN0ZWQgZnJvbSByZWFjdC1uYXRpdmUgY29yZScsXG4gICAgXS5zb21lKCh0KSA9PiBtc2cuaW5jbHVkZXModCkpO1xuICAgIGlmIChpZ25vcmUpIHJldHVybjtcbiAgICBvcmlnaW5hbENvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgfSksXG59OyJdLCJtYXBwaW5ncyI6IkFBR0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDBDQUEwQyxFQUFFO0VBQUEsT0FBTztJQUMzREMsR0FBRyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFBLE9BQU0sT0FBTztJQUFBLEVBQUM7SUFDM0JDLGdCQUFnQixFQUFFRixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQzNCRSxtQkFBbUIsRUFBRUgsSUFBSSxDQUFDQyxFQUFFLENBQUM7RUFDL0IsQ0FBQztBQUFBLENB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QUFBLElBQUEsR0FBQUgsSUFBQSxFQUFBRyxJQUFBO01BQUpGLElBQUksQ0FBQUUsSUFBQSxRQUFBakssU0FBQSxDQUFBaUssSUFBQTtJQUFBO0lBQUEsT0FBS3BGLFVBQVUsQ0FBQXFGLEtBQUEsVUFBQ3RNLEVBQUUsRUFBRSxDQUFDLEVBQUF1TSxNQUFBLENBQUtKLElBQUksRUFBQztFQUFBO0FBQ25FO0FBQ0EsSUFBSSxPQUFPSyxjQUFjLEtBQUssV0FBVyxFQUFFO0VBQ3pDUCxNQUFNLENBQUNPLGNBQWMsR0FBRyxVQUFDQyxFQUFFO0lBQUEsT0FBS0MsWUFBWSxDQUFDRCxFQUFFLENBQUM7RUFBQTtBQUNsRDtBQUdBLElBQU1FLGVBQWUsR0FBQWxNLE1BQUEsQ0FBQUMsTUFBQSxLQUFRa00sT0FBTyxDQUFFO0FBRXRDWCxNQUFNLENBQUNXLE9BQU8sR0FBQW5NLE1BQUEsQ0FBQUMsTUFBQSxLQUNUa00sT0FBTztFQUVWQyxLQUFLLEVBQUU5TSxJQUFJLENBQUNDLEVBQUUsQ0FBQyxVQUFDOE0sT0FBTyxFQUFLO0lBQzFCLElBQ0UsT0FBT0EsT0FBTyxLQUFLLFFBQVEsSUFDM0JBLE9BQU8sQ0FBQ0MsUUFBUSxDQUFDLHVCQUF1QixDQUFDLElBQ3pDRCxPQUFPLENBQUNDLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQyxFQUMxQztNQUNBO0lBQ0Y7SUFDQUosZUFBZSxDQUFDRSxLQUFLLENBQUNDLE9BQU8sQ0FBQztFQUNoQyxDQUFDLENBQUM7RUFDRkUsSUFBSSxFQUFFak4sSUFBSSxDQUFDQyxFQUFFLENBQUMsVUFBQzhNLE9BQU8sRUFBSztJQUN6QixJQUFNRyxHQUFHLEdBQUcsT0FBT0gsT0FBTyxLQUFLLFFBQVEsR0FBR0EsT0FBTyxHQUFHLEVBQUU7SUFDdEQsSUFBTUksTUFBTSxHQUFHLENBQ2IsdUJBQXVCLEVBQ3ZCLHdCQUF3QixFQUN4QixtRkFBbUYsRUFDbkYsMEJBQTBCLEVBQzFCLCtEQUErRCxFQUMvRCxxREFBcUQsRUFDckQsOERBQThELENBQy9ELENBQUNDLElBQUksQ0FBQyxVQUFDbkUsQ0FBQztNQUFBLE9BQUtpRSxHQUFHLENBQUNGLFFBQVEsQ0FBQy9ELENBQUMsQ0FBQztJQUFBLEVBQUM7SUFDOUIsSUFBSWtFLE1BQU0sRUFBRTtJQUNaUCxlQUFlLENBQUNLLElBQUksQ0FBQ0YsT0FBTyxDQUFDO0VBQy9CLENBQUM7QUFBQyxFQUNIIiwiaWdub3JlTGlzdCI6W119