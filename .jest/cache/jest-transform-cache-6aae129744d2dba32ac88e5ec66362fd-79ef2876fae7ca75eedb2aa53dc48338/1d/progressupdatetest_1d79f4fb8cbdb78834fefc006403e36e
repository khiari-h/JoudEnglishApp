eb29bf9015c5ad1b23fd7a4deadc1434
_getJestObj().mock('expo-router', function () {
  return Object.assign({}, jest.requireActual('expo-router'), {
    useFocusEffect: jest.fn(function (callback) {
      return callback();
    }),
    router: {
      push: jest.fn()
    }
  });
});
_getJestObj().mock('../../src/screens/Dashboard/hooks/useDashboardState', function () {
  return {
    useDashboardState: jest.fn(function () {
      return {
        showLevelProgress: false,
        setShowLevelProgress: jest.fn(),
        openLevelProgressModal: jest.fn(),
        closeLevelProgressModal: jest.fn(),
        refreshing: false,
        activeTab: "home",
        setActiveTab: jest.fn(),
        onRefresh: jest.fn().mockResolvedValue()
      };
    })
  };
});
_getJestObj().mock('../../src/hooks/useLastActivity', function () {
  return function () {
    return {
      lastActivity: null,
      isLoading: false,
      reload: jest.fn()
    };
  };
});
_getJestObj().mock('../../src/hooks/useRealTimeProgress', function () {
  return function () {
    return {
      getLevelProgress: jest.fn(function () {
        return 0;
      }),
      refresh: jest.fn()
    };
  };
});
_getJestObj().mock('../../src/contexts/ProgressContext', function () {
  return Object.assign({}, jest.requireActual('../../src/contexts/ProgressContext'), {
    useProgress: function useProgress() {
      return {
        progress: {
          overall: 0,
          levels: {}
        },
        isLoading: false,
        updateProgress: mockUpdateProgress,
        getProgressForLevel: function getProgressForLevel() {
          return 0;
        }
      };
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _expoRouter = require("expo-router");
var _Dashboard = _interopRequireDefault(require("../../src/screens/Dashboard"));
var _ProgressContext = require("../../src/contexts/ProgressContext");
var _ThemeContext = require("../../src/contexts/ThemeContext");
var _CurrentLevelContext = require("../../src/contexts/CurrentLevelContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockUpdateProgress = jest.fn();
var FakeExerciseScreen = function FakeExerciseScreen(_ref) {
  var onComplete = _ref.onComplete;
  var handleComplete = function handleComplete() {
    onComplete('A1', 'vocabulary', 80);
  };
  return (0, _jsxRuntime.jsx)("button", {
    "data-testid": "complete-exercise",
    onClick: handleComplete,
    children: "Terminer l'exercice"
  });
};
describe('Scénario 1: Mise à jour de la progression', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it("devrait appeler updateProgress avec les bonnes données après la fin d'un exercice", (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsx)(_CurrentLevelContext.CurrentLevelProvider, {
            children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
          })
        })
      })),
      getByTestId = _render.getByTestId,
      rerender = _render.rerender;
    rerender((0, _jsxRuntime.jsx)(FakeExerciseScreen, {
      onComplete: mockUpdateProgress
    }));
    _reactNative.fireEvent.click(getByTestId('complete-exercise'));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockUpdateProgress).toHaveBeenCalledWith('A1', 'vocabulary', 80);
      expect(mockUpdateProgress).toHaveBeenCalledTimes(1);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,