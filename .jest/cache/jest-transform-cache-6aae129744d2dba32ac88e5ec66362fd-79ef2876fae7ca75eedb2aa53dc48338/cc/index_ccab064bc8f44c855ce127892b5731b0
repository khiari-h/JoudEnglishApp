0c7dd725d37be231beaef2ee28652e59
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _vectorIcons = require("@expo/vector-icons");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var ExerciseFeedback = function ExerciseFeedback(_ref) {
  var _ref$type = _ref.type,
    type = _ref$type === void 0 ? "success" : _ref$type,
    message = _ref.message,
    explanation = _ref.explanation,
    onDismiss = _ref.onDismiss,
    _ref$autoHide = _ref.autoHide,
    autoHide = _ref$autoHide === void 0 ? false : _ref$autoHide,
    _ref$autoHideDuration = _ref.autoHideDuration,
    autoHideDuration = _ref$autoHideDuration === void 0 ? 3000 : _ref$autoHideDuration,
    _ref$showDismissButto = _ref.showDismissButton,
    showDismissButton = _ref$showDismissButto === void 0 ? true : _ref$showDismissButto;
  var fadeAnim = _react.default.useRef(new _reactNative.Animated.Value(0)).current;
  _react.default.useEffect(function () {
    _reactNative.Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 300,
      useNativeDriver: true
    }).start();
    if (autoHide) {
      var timer = setTimeout(function () {
        _reactNative.Animated.timing(fadeAnim, {
          toValue: 0,
          duration: 300,
          useNativeDriver: true
        }).start(function (_ref2) {
          var finished = _ref2.finished;
          if (finished && onDismiss) {
            onDismiss();
          }
        });
      }, autoHideDuration);
      return function () {
        return clearTimeout(timer);
      };
    }
  }, []);
  var getTypeStyles = function getTypeStyles() {
    switch (type) {
      case "success":
        return {
          containerStyle: _style.default.successContainer,
          icon: "checkmark-circle",
          iconColor: "#10B981"
        };
      case "error":
        return {
          containerStyle: _style.default.errorContainer,
          icon: "close-circle",
          iconColor: "#EF4444"
        };
      case "info":
      default:
        return {
          containerStyle: _style.default.infoContainer,
          icon: "information-circle",
          iconColor: "#3B82F6"
        };
    }
  };
  var _getTypeStyles = getTypeStyles(),
    containerStyle = _getTypeStyles.containerStyle,
    icon = _getTypeStyles.icon,
    iconColor = _getTypeStyles.iconColor;
  var handleDismiss = (0, _react.useCallback)(function () {
    if (process.env.NODE_ENV === 'test') {
      if (onDismiss) onDismiss();
      return;
    }
    _reactNative.Animated.timing(fadeAnim, {
      toValue: 0,
      duration: 300,
      useNativeDriver: true
    }).start(function (_ref3) {
      var finished = _ref3.finished;
      if (finished && onDismiss) {
        onDismiss();
      }
    });
  }, [onDismiss, fadeAnim]);
  return (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
    style: [containerStyle, {
      opacity: fadeAnim
    }],
    children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: _style.default.content,
      children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _style.default.iconContainer,
        children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: icon,
          size: 24,
          color: iconColor
        })
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: _style.default.textContainer,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: _style.default.message,
          children: message
        }), explanation ? (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: _style.default.explanation,
          children: explanation
        }) : null]
      }), showDismissButton && (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: _style.default.dismissButton,
        onPress: handleDismiss,
        hitSlop: {
          top: 10,
          bottom: 10,
          left: 10,
          right: 10
        },
        accessibilityRole: "button",
        children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: "close",
          size: 20,
          color: "#9CA3AF"
        })
      })]
    })
  });
};
var _default = exports.default = ExerciseFeedback;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,