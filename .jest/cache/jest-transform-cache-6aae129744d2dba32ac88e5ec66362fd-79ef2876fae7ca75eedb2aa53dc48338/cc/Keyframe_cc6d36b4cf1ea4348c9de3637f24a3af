00988d7595b2f28b0a66d44f74dddf46
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Keyframe = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _Easing = require("../../Easing");
var _animation = require("../../animation");
var _commonTypes = require("../../commonTypes");
var _util = require("../../animation/util");
var _errors = require("../../errors");
var _worklet_8113010583404_init_data = {
  code: "function KeyframeTs1(){const{keyframes,delayFunction,delay,withTiming,Easing,withSequence,initialValues,makeKeyframeKey,callback}=this.__closure;const animations={};const addAnimation=function(key){const keyframePoints=keyframes[key];if(keyframePoints.length===0){return;}const animation=delayFunction(delay,keyframePoints.length===1?withTiming(keyframePoints[0].value,{duration:keyframePoints[0].duration,easing:keyframePoints[0].easing?keyframePoints[0].easing:Easing.linear}):withSequence(...keyframePoints.map(function(keyframePoint){return withTiming(keyframePoint.value,{duration:keyframePoint.duration,easing:keyframePoint.easing?keyframePoint.easing:Easing.linear});})));if(key.includes('transform')){if(!('transform'in animations)){animations.transform=[];}animations.transform.push({[key.split(':')[1]]:animation});}else{animations[key]=animation;}};Object.keys(initialValues).forEach(function(key){if(key.includes('transform')){initialValues[key].forEach(function(transformProp,index){Object.keys(transformProp).forEach(function(transformPropKey){addAnimation(makeKeyframeKey(index,transformPropKey));});});}else{addAnimation(key);}});return{animations:animations,initialValues:initialValues,callback:callback};}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\layoutReanimation\\animationBuilder\\Keyframe.ts",
  sourceMap: "{\"version\":3,\"names\":[\"KeyframeTs1\",\"keyframes\",\"delayFunction\",\"delay\",\"withTiming\",\"Easing\",\"withSequence\",\"initialValues\",\"makeKeyframeKey\",\"callback\",\"__closure\",\"animations\",\"addAnimation\",\"key\",\"keyframePoints\",\"length\",\"animation\",\"value\",\"duration\",\"easing\",\"linear\",\"map\",\"keyframePoint\",\"includes\",\"transform\",\"push\",\"split\",\"Object\",\"keys\",\"forEach\",\"transformProp\",\"index\",\"transformPropKey\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/layoutReanimation/animationBuilder/Keyframe.ts\"],\"mappings\":\"AA4OW,SAAAA,WAAMA,CAAA,QAAAC,SAAA,CAAAC,aAAA,CAAAC,KAAA,CAAAC,UAAA,CAAAC,MAAA,CAAAC,YAAA,CAAAC,aAAA,CAAAC,eAAA,CAAAC,QAAA,OAAAC,SAAA,CAEX,KAAM,CAAAC,UAAwC,CAAG,CAAC,CAAC,CAMnD,KAAM,CAAAC,YAAY,CAAG,QAAAA,CAACC,GAAW,CAAK,CACpC,KAAM,CAAAC,cAAc,CAAGb,SAAS,CAACY,GAAG,CAAC,CAErC,GAAIC,cAAc,CAACC,MAAM,GAAK,CAAC,CAAE,CAC/B,OACF,CACA,KAAM,CAAAC,SAAS,CAAGd,aAAa,CAC7BC,KAAK,CACLW,cAAc,CAACC,MAAM,GAAK,CAAC,CACvBX,UAAU,CAACU,cAAc,CAAC,CAAC,CAAC,CAACG,KAAK,CAAE,CAClCC,QAAQ,CAAEJ,cAAc,CAAC,CAAC,CAAC,CAACI,QAAQ,CACpCC,MAAM,CAAEL,cAAc,CAAC,CAAC,CAAC,CAACK,MAAM,CAC5BL,cAAc,CAAC,CAAC,CAAC,CAACK,MAAM,CACxBd,MAAM,CAACe,MACb,CAAC,CAAC,CACFd,YAAY,CACV,GAAGQ,cAAc,CAACO,GAAG,CAAC,SAACC,aAA4B,QACjD,CAAAlB,UAAU,CAACkB,aAAa,CAACL,KAAK,CAAE,CAC9BC,QAAQ,CAAEI,aAAa,CAACJ,QAAQ,CAChCC,MAAM,CAAEG,aAAa,CAACH,MAAM,CACxBG,aAAa,CAACH,MAAM,CACpBd,MAAM,CAACe,MACb,CAAC,CACH,GACF,CACN,CAAC,CACD,GAAIP,GAAG,CAACU,QAAQ,CAAC,WAAW,CAAC,CAAE,CAC7B,GAAI,EAAE,WAAW,EAAI,CAAAZ,UAAU,CAAC,CAAE,CAChCA,UAAU,CAACa,SAAS,CAAG,EAAE,CAC3B,CACAb,UAAU,CAACa,SAAS,CAAEC,IAAI,CAAqB,CAC7C,CAACZ,GAAG,CAACa,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAGV,SACvB,CAAC,CAAC,CACJ,CAAC,IAAM,CACLL,UAAU,CAACE,GAAG,CAAC,CAAGG,SAAS,CAC7B,CACF,CAAC,CACDW,MAAM,CAACC,IAAI,CAACrB,aAAa,CAAC,CAACsB,OAAO,CAAC,SAAChB,GAAW,CAAK,CAClD,GAAIA,GAAG,CAACU,QAAQ,CAAC,WAAW,CAAC,CAAE,CAC7BhB,aAAa,CAACM,GAAG,CAAC,CAACgB,OAAO,CACxB,SAACC,aAA8C,CAAEC,KAAa,CAAK,CACjEJ,MAAM,CAACC,IAAI,CAACE,aAAa,CAAC,CAACD,OAAO,CAAC,SAACG,gBAAwB,CAAK,CAC/DpB,YAAY,CAACJ,eAAe,CAACuB,KAAK,CAAEC,gBAAgB,CAAC,CAAC,CACxD,CAAC,CAAC,CACJ,CACF,CAAC,CACH,CAAC,IAAM,CACLpB,YAAY,CAACC,GAAG,CAAC,CACnB,CACF,CAAC,CAAC,CACF,MAAO,CACLF,UAAU,CAAVA,UAAU,CACVJ,aAAa,CAAbA,aAAa,CACbE,QAAA,CAAAA,QACF,CAAC,CACH\",\"ignoreList\":[]}",
  version: "3.16.7"
};
var _worklet_11971367655441_init_data = {
  code: "function KeyframeTs2(delay,animation){const{withDelay,reduceMotion}=this.__closure;return withDelay(delay,animation,reduceMotion);}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\layoutReanimation\\animationBuilder\\Keyframe.ts",
  sourceMap: "{\"version\":3,\"names\":[\"KeyframeTs2\",\"delay\",\"animation\",\"withDelay\",\"reduceMotion\",\"__closure\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/layoutReanimation/animationBuilder/Keyframe.ts\"],\"mappings\":\"AA0NQ,SAAAA,YAAAC,KAAA,CAAAC,SAAA,QAAAC,SAAA,CAAAC,YAAA,OAAAC,SAAA,QAAAF,SAAA,CAAAF,KAAA,CAAAC,SAAA,CAAAE,YAAA,EACA\",\"ignoreList\":[]}",
  version: "3.16.7"
};
var _worklet_12600224518991_init_data = {
  code: "function KeyframeTs3(_,animation){const{getReduceMotionFromConfig,reduceMotion}=this.__closure;animation.reduceMotion=getReduceMotionFromConfig(reduceMotion);return animation;}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\layoutReanimation\\animationBuilder\\Keyframe.ts",
  sourceMap: "{\"version\":3,\"names\":[\"KeyframeTs3\",\"_\",\"animation\",\"getReduceMotionFromConfig\",\"reduceMotion\",\"__closure\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/layoutReanimation/animationBuilder/Keyframe.ts\"],\"mappings\":\"AA+NQ,QAAC,CAAAA,WAAGA,CAAAC,CAAA,CAASC,SAAK,QAAAC,yBAAA,CAAAC,YAAA,OAAAC,SAAA,CAEhBH,SAAS,CAACE,YAAY,CAAGD,yBAAyB,CAACC,YAAY,CAAC,CAChE,MAAO,CAAAF,SAAS,CAClB\",\"ignoreList\":[]}",
  version: "3.16.7"
};
var InnerKeyframe = function () {
  function InnerKeyframe(definitions) {
    var _this = this;
    (0, _classCallCheck2.default)(this, InnerKeyframe);
    this.reduceMotionV = _commonTypes.ReduceMotion.System;
    this.build = function () {
      var delay = _this.delayV;
      var delayFunction = _this.getDelayFunction();
      var _this$parseDefinition = _this.parseDefinitions(),
        keyframes = _this$parseDefinition.keyframes,
        initialValues = _this$parseDefinition.initialValues;
      var callback = _this.callbackV;
      return function () {
        var _e = [new global.Error(), -10, -27];
        var KeyframeTs1 = function KeyframeTs1() {
          var animations = {};
          var addAnimation = function addAnimation(key) {
            var keyframePoints = keyframes[key];
            if (keyframePoints.length === 0) {
              return;
            }
            var animation = delayFunction(delay, keyframePoints.length === 1 ? (0, _animation.withTiming)(keyframePoints[0].value, {
              duration: keyframePoints[0].duration,
              easing: keyframePoints[0].easing ? keyframePoints[0].easing : _Easing.Easing.linear
            }) : _animation.withSequence.apply(void 0, (0, _toConsumableArray2.default)(keyframePoints.map(function (keyframePoint) {
              return (0, _animation.withTiming)(keyframePoint.value, {
                duration: keyframePoint.duration,
                easing: keyframePoint.easing ? keyframePoint.easing : _Easing.Easing.linear
              });
            }))));
            if (key.includes('transform')) {
              if (!('transform' in animations)) {
                animations.transform = [];
              }
              animations.transform.push((0, _defineProperty2.default)({}, key.split(':')[1], animation));
            } else {
              animations[key] = animation;
            }
          };
          Object.keys(initialValues).forEach(function (key) {
            if (key.includes('transform')) {
              initialValues[key].forEach(function (transformProp, index) {
                Object.keys(transformProp).forEach(function (transformPropKey) {
                  addAnimation(makeKeyframeKey(index, transformPropKey));
                });
              });
            } else {
              addAnimation(key);
            }
          });
          return {
            animations: animations,
            initialValues: initialValues,
            callback: callback
          };
        };
        KeyframeTs1.__closure = {
          keyframes: keyframes,
          delayFunction: delayFunction,
          delay: delay,
          withTiming: _animation.withTiming,
          Easing: _Easing.Easing,
          withSequence: _animation.withSequence,
          initialValues: initialValues,
          makeKeyframeKey: makeKeyframeKey,
          callback: callback
        };
        KeyframeTs1.__workletHash = 8113010583404;
        KeyframeTs1.__initData = _worklet_8113010583404_init_data;
        KeyframeTs1.__stackDetails = _e;
        return KeyframeTs1;
      }();
    };
    this.definitions = definitions;
  }
  return (0, _createClass2.default)(InnerKeyframe, [{
    key: "parseDefinitions",
    value: function parseDefinitions() {
      var _this2 = this;
      var parsedKeyframes = {};
      if (this.definitions.from) {
        if (this.definitions['0']) {
          throw new _errors.ReanimatedError("You cannot provide both keyframe 0 and 'from' as they both specified initial values.");
        }
        this.definitions['0'] = this.definitions.from;
        delete this.definitions.from;
      }
      if (this.definitions.to) {
        if (this.definitions['100']) {
          throw new _errors.ReanimatedError("You cannot provide both keyframe 100 and 'to' as they both specified values at the end of the animation.");
        }
        this.definitions['100'] = this.definitions.to;
        delete this.definitions.to;
      }
      if (!this.definitions['0']) {
        throw new _errors.ReanimatedError("Please provide 0 or 'from' keyframe with initial state of your object.");
      }
      var initialValues = this.definitions['0'];
      Object.keys(initialValues).forEach(function (styleProp) {
        if (styleProp === 'transform') {
          if (!Array.isArray(initialValues.transform)) {
            return;
          }
          initialValues.transform.forEach(function (transformStyle, index) {
            Object.keys(transformStyle).forEach(function (transformProp) {
              parsedKeyframes[makeKeyframeKey(index, transformProp)] = [];
            });
          });
        } else {
          parsedKeyframes[styleProp] = [];
        }
      });
      var duration = this.durationV ? this.durationV : 500;
      var animationKeyPoints = Array.from(Object.keys(this.definitions)).map(Number);
      var getAnimationDuration = function getAnimationDuration(key, currentKeyPoint) {
        var maxDuration = currentKeyPoint / 100 * duration;
        var currentDuration = parsedKeyframes[key].reduce(function (acc, value) {
          return acc + value.duration;
        }, 0);
        return maxDuration - currentDuration;
      };
      var addKeyPoint = function addKeyPoint(_ref) {
        var key = _ref.key,
          value = _ref.value,
          currentKeyPoint = _ref.currentKeyPoint,
          easing = _ref.easing;
        if (!(key in parsedKeyframes)) {
          throw new _errors.ReanimatedError("Keyframe can contain only that set of properties that were provide with initial values (keyframe 0 or 'from')");
        }
        if (__DEV__ && easing) {
          (0, _util.assertEasingIsWorklet)(easing);
        }
        parsedKeyframes[key].push({
          duration: getAnimationDuration(key, currentKeyPoint),
          value: value,
          easing: easing
        });
      };
      animationKeyPoints.filter(function (value) {
        return value !== 0;
      }).sort(function (a, b) {
        return a - b;
      }).forEach(function (keyPoint) {
        if (keyPoint < 0 || keyPoint > 100) {
          throw new _errors.ReanimatedError('Keyframe should be in between range 0 - 100.');
        }
        var keyframe = _this2.definitions[keyPoint];
        var easing = keyframe.easing;
        delete keyframe.easing;
        var addKeyPointWith = function addKeyPointWith(key, value) {
          return addKeyPoint({
            key: key,
            value: value,
            currentKeyPoint: keyPoint,
            easing: easing
          });
        };
        Object.keys(keyframe).forEach(function (key) {
          if (key === 'transform') {
            if (!Array.isArray(keyframe.transform)) {
              return;
            }
            keyframe.transform.forEach(function (transformStyle, index) {
              Object.keys(transformStyle).forEach(function (transformProp) {
                addKeyPointWith(makeKeyframeKey(index, transformProp), transformStyle[transformProp]);
              });
            });
          } else {
            addKeyPointWith(key, keyframe[key]);
          }
        });
      });
      return {
        initialValues: initialValues,
        keyframes: parsedKeyframes
      };
    }
  }, {
    key: "duration",
    value: function duration(durationMs) {
      this.durationV = durationMs;
      return this;
    }
  }, {
    key: "delay",
    value: function delay(delayMs) {
      this.delayV = delayMs;
      return this;
    }
  }, {
    key: "withCallback",
    value: function withCallback(callback) {
      this.callbackV = callback;
      return this;
    }
  }, {
    key: "reduceMotion",
    value: function reduceMotion(reduceMotionV) {
      this.reduceMotionV = reduceMotionV;
      return this;
    }
  }, {
    key: "getDelayFunction",
    value: function getDelayFunction() {
      var delay = this.delayV;
      var reduceMotion = this.reduceMotionV;
      return delay ? function () {
        var _e = [new global.Error(), -3, -27];
        var KeyframeTs2 = function KeyframeTs2(delay, animation) {
          return (0, _animation.withDelay)(delay, animation, reduceMotion);
        };
        KeyframeTs2.__closure = {
          withDelay: _animation.withDelay,
          reduceMotion: reduceMotion
        };
        KeyframeTs2.__workletHash = 11971367655441;
        KeyframeTs2.__initData = _worklet_11971367655441_init_data;
        KeyframeTs2.__stackDetails = _e;
        return KeyframeTs2;
      }() : function () {
        var _e = [new global.Error(), -3, -27];
        var KeyframeTs3 = function KeyframeTs3(_, animation) {
          animation.reduceMotion = (0, _util.getReduceMotionFromConfig)(reduceMotion);
          return animation;
        };
        KeyframeTs3.__closure = {
          getReduceMotionFromConfig: _util.getReduceMotionFromConfig,
          reduceMotion: reduceMotion
        };
        KeyframeTs3.__workletHash = 12600224518991;
        KeyframeTs3.__initData = _worklet_12600224518991_init_data;
        KeyframeTs3.__stackDetails = _e;
        return KeyframeTs3;
      }();
    }
  }]);
}();
var _worklet_1453729406543_init_data = {
  code: "function makeKeyframeKey_KeyframeTs4(index,transformProp){return index+\"_transform:\"+transformProp;}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\layoutReanimation\\animationBuilder\\Keyframe.ts",
  sourceMap: "{\"version\":3,\"names\":[\"makeKeyframeKey_KeyframeTs4\",\"index\",\"transformProp\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/layoutReanimation/animationBuilder/Keyframe.ts\"],\"mappings\":\"AA+SA,SAAAA,2BAAwCA,CAAAC,KAAA,CAAAC,aAAuB,EAE7D,MAAU,CAAAD,KAAK,eAAcC,aAAa,CAC5C\",\"ignoreList\":[]}",
  version: "3.16.7"
};
var makeKeyframeKey = function () {
  var _e = [new global.Error(), 1, -27];
  var makeKeyframeKey = function makeKeyframeKey(index, transformProp) {
    return `${index}_transform:${transformProp}`;
  };
  makeKeyframeKey.__closure = {};
  makeKeyframeKey.__workletHash = 1453729406543;
  makeKeyframeKey.__initData = _worklet_1453729406543_init_data;
  makeKeyframeKey.__stackDetails = _e;
  return makeKeyframeKey;
}();
var Keyframe = exports.Keyframe = InnerKeyframe;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,