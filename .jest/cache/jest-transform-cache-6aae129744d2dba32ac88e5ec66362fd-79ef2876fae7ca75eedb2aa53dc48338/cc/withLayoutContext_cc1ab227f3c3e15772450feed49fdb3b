84e12a4ef1ce32df73882aad82e511bc
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children"];
var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withLayoutContext = exports.useFilterScreenChildren = void 0;
var react_1 = __importStar(require("react"));
var Route_1 = require("../Route");
var useScreens_1 = require("../useScreens");
var Screen_1 = require("../views/Screen");
function useFilterScreenChildren(children) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
    isCustomNavigator = _ref.isCustomNavigator,
    contextKey = _ref.contextKey;
  return (0, react_1.useMemo)(function () {
    var customChildren = [];
    var screens = react_1.Children.map(children, function (child) {
      if ((0, react_1.isValidElement)(child) && child && child.type === Screen_1.Screen) {
        if (!child.props.name) {
          throw new Error(`<Screen /> component in \`default export\` at \`app${contextKey}/_layout\` must have a \`name\` prop when used as a child of a Layout Route.`);
        }
        if (process.env.NODE_ENV !== 'production') {
          if (['children', 'component', 'getComponent'].some(function (key) {
            return key in child.props;
          })) {
            throw new Error(`<Screen /> component in \`default export\` at \`app${contextKey}/_layout\` must not have a \`children\`, \`component\`, or \`getComponent\` prop when used as a child of a Layout Route`);
          }
        }
        return child.props;
      } else {
        if (isCustomNavigator) {
          customChildren.push(child);
        } else {
          console.warn(`Layout children must be of type Screen, all other children are ignored. To use custom children, create a custom <Layout />. Update Layout Route at: "app${contextKey}/_layout"`);
        }
      }
    });
    if (process.env.NODE_ENV !== 'production') {
      var names = screens == null ? void 0 : screens.map(function (screen) {
        return screen.name;
      });
      if (names && new Set(names).size !== names.length) {
        throw new Error('Screen names must be unique: ' + names);
      }
    }
    return {
      screens: screens,
      children: customChildren
    };
  }, [children]);
}
exports.useFilterScreenChildren = useFilterScreenChildren;
function withLayoutContext(Nav, processor) {
  return Object.assign((0, react_1.forwardRef)(function (_ref2, ref) {
    var userDefinedChildren = _ref2.children,
      props = (0, _objectWithoutProperties2.default)(_ref2, _excluded);
    var contextKey = (0, Route_1.useContextKey)();
    var _useFilterScreenChild = useFilterScreenChildren(userDefinedChildren, {
        contextKey: contextKey
      }),
      screens = _useFilterScreenChild.screens;
    var processed = processor ? processor(screens != null ? screens : []) : screens;
    var sorted = (0, useScreens_1.useSortedScreens)(processed != null ? processed : []);
    if (!sorted.length) {
      return null;
    }
    return (0, _jsxRuntime.jsx)(Nav, Object.assign({}, props, {
      id: contextKey,
      ref: ref,
      children: sorted
    }));
  }), {
    Screen: Screen_1.Screen
  });
}
exports.withLayoutContext = withLayoutContext;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,