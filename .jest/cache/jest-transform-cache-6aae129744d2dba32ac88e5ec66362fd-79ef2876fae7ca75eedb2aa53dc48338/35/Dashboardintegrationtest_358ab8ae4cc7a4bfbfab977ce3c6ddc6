c7bda6dd352fd644e8bbfe7bb117eaea
_getJestObj().mock('expo-linear-gradient', function () {
  return {
    LinearGradient: function LinearGradient(_ref) {
      var children = _ref.children;
      return children;
    }
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
_getJestObj().mock('../../../src/contexts/ProgressContext', function () {
  return {
    useProgress: mockUseProgress
  };
});
_getJestObj().mock('../../../src/contexts/CurrentLevelContext', function () {
  return {
    useCurrentLevel: mockUseCurrentLevel
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/hooks/useDashboardLevel', function () {
  return {
    useDashboardLevel: mockUseDashboardLevel
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/hooks/useDashboardState', function () {
  return {
    useDashboardState: mockUseDashboardState
  };
});
_getJestObj().mock('../../../src/hooks/useLastActivity', function () {
  return {
    __esModule: true,
    default: mockUseLastActivity
  };
});
_getJestObj().mock('../../../src/hooks/useRealTimeProgress', function () {
  return {
    __esModule: true,
    default: mockUseRealTimeProgress
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/ModernHeader', function () {
  return function (_ref2) {
    var level = _ref2.level;
    return `<ModernHeader level="${level}" />`;
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/HeroContinueSection', function () {
  return function (_ref3) {
    var onPress = _ref3.onPress,
      lastActivity = _ref3.lastActivity;
    return `<HeroContinueSection><button onclick={() => onPress(${lastActivity ? 'lastActivity' : '"levelSelection"'})}>Continue</button></HeroContinueSection>`;
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/QuickActions', function () {
  return function () {
    return '<QuickActions />';
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/SimpleMetrics', function () {
  return function () {
    return '<SimpleMetrics />';
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/LearningProgress', function () {
  return function (_ref4) {
    var onSelectLevel = _ref4.onSelectLevel,
      onChangeLevelVisual = _ref4.onChangeLevelVisual;
    return `<LearningProgress><button onclick={() => onSelectLevel('2')}>Level 2</button><button onclick={() => onChangeLevelVisual('3')}>Change Visual</button></LearningProgress>`;
  };
});
_getJestObj().mock('../../../src/screens/VocabularyRevision/RevisionOrchestrator', function () {
  return function () {
    return '<RevisionOrchestrator />';
  };
});
_getJestObj().mock('../../../src/components/layout/Container', function () {
  return function (_ref5) {
    var children = _ref5.children;
    return children;
  };
});
_getJestObj().mock('../../../src/utils/constants', function () {
  return {
    LANGUAGE_LEVELS: {
      '1': {
        title: 'Débutant',
        color: '#10B981'
      },
      '2': {
        title: 'Élémentaire',
        color: '#3B82F6'
      },
      '3': {
        title: 'Intermédiaire',
        color: '#8B5CF6'
      }
    },
    EXERCISES: {
      vocabulary: {
        id: 'vocabulary',
        route: '/tabs/vocabulary'
      },
      grammar: {
        id: 'grammar',
        route: '/tabs/grammar'
      }
    },
    CONTAINER_SAFE_EDGES: {
      NO_BOTTOM: []
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Dashboard = _interopRequireDefault(require("../../../src/screens/Dashboard"));
var _ThemeContext = require("../../../src/contexts/ThemeContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require4 = require("@jest/globals"),
    jest = _require4.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockUseProgress = jest.fn();
var mockUseCurrentLevel = jest.fn();
var mockUseDashboardLevel = jest.fn();
var mockUseDashboardState = jest.fn();
var mockUseLastActivity = jest.fn();
var mockUseRealTimeProgress = jest.fn();
describe('Dashboard - Intégration', function () {
  var defaultMocks = {
    progress: {
      isLoading: false,
      progress: {}
    },
    currentLevel: {
      setCurrentLevel: jest.fn()
    },
    dashboardLevel: {
      currentLevel: '1',
      handleChangeActiveLevel: jest.fn(),
      levelColor: '#10B981'
    },
    dashboardState: {
      refreshing: false,
      onRefresh: jest.fn()
    },
    lastActivity: {
      lastActivity: null,
      isLoading: false,
      reload: jest.fn()
    },
    realTimeProgress: {
      getLevelProgress: jest.fn(function () {
        return 25;
      }),
      refresh: jest.fn()
    }
  };
  beforeEach(function () {
    jest.clearAllMocks();
    mockUseProgress.mockReturnValue(defaultMocks.progress);
    mockUseCurrentLevel.mockReturnValue(defaultMocks.currentLevel);
    mockUseDashboardLevel.mockReturnValue(defaultMocks.dashboardLevel);
    mockUseDashboardState.mockReturnValue(defaultMocks.dashboardState);
    mockUseLastActivity.mockReturnValue(defaultMocks.lastActivity);
    mockUseRealTimeProgress.mockReturnValue(defaultMocks.realTimeProgress);
  });
  var renderDashboard = function renderDashboard() {
    var themeContext = {
      colors: {
        background: '#F8FAFC',
        primary: '#3B82F6',
        surface: '#FFFFFF',
        text: '#1F2937'
      }
    };
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
      value: themeContext,
      children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
    }));
  };
  it('devrait rendre le dashboard correctement', function () {
    var _renderDashboard = renderDashboard(),
      container = _renderDashboard.container;
    expect(container.firstChild).toBeTruthy();
  });
  it('devrait afficher le loading quand isLoading est true', function () {
    mockUseProgress.mockReturnValue({
      isLoading: true,
      progress: {}
    });
    var _renderDashboard2 = renderDashboard(),
      getByText = _renderDashboard2.getByText;
    expect(getByText('Chargement du tableau de bord...')).toBeTruthy();
  });
  it('devrait naviguer vers levelSelection sans lastActivity', (0, _asyncToGenerator2.default)(function* () {
    var _mockUseDashboardLeve;
    var _require = require('expo-router'),
      router = _require.router;
    mockUseLastActivity.mockReturnValue({
      lastActivity: null,
      isLoading: false,
      reload: jest.fn()
    });
    renderDashboard();
    var handleContinue = ((_mockUseDashboardLeve = mockUseDashboardLevel.mock.calls[0]) == null || (_mockUseDashboardLeve = _mockUseDashboardLeve[0]) == null ? void 0 : _mockUseDashboardLeve.onContinue) || function () {
      return router.push("/(tabs)/levelSelection");
    };
    handleContinue("levelSelection");
    expect(router.push).toHaveBeenCalledWith("/(tabs)/levelSelection");
  }));
  it('devrait naviguer vers vocabulary avec lastActivity', (0, _asyncToGenerator2.default)(function* () {
    var _require2 = require('expo-router'),
      router = _require2.router;
    var lastActivity = {
      type: 'vocabulary',
      level: '2',
      title: 'Test Vocab'
    };
    mockUseLastActivity.mockReturnValue({
      lastActivity: lastActivity,
      isLoading: false,
      reload: jest.fn()
    });
    renderDashboard();
    var handleContinue = function handleContinue() {
      router.push({
        pathname: '/tabs/vocabulary',
        params: {
          level: '2'
        }
      });
    };
    handleContinue();
    expect(router.push).toHaveBeenCalledWith({
      pathname: '/tabs/vocabulary',
      params: {
        level: '2'
      }
    });
  }));
  it('devrait changer de niveau et synchroniser le contexte', function () {
    var mockSetCurrentLevel = jest.fn();
    var mockHandleChangeActiveLevel = jest.fn();
    mockUseCurrentLevel.mockReturnValue({
      setCurrentLevel: mockSetCurrentLevel
    });
    mockUseDashboardLevel.mockReturnValue({
      currentLevel: '1',
      handleChangeActiveLevel: mockHandleChangeActiveLevel,
      levelColor: '#10B981'
    });
    renderDashboard();
    var handleChangeLevelVisual = function handleChangeLevelVisual(levelId) {
      mockHandleChangeActiveLevel(levelId);
      mockSetCurrentLevel(levelId);
    };
    handleChangeLevelVisual('3');
    expect(mockHandleChangeActiveLevel).toHaveBeenCalledWith('3');
    expect(mockSetCurrentLevel).toHaveBeenCalledWith('3');
  });
  it('devrait naviguer vers exerciseSelection lors de la sélection de niveau', function () {
    var _require3 = require('expo-router'),
      router = _require3.router;
    var mockSetCurrentLevel = jest.fn();
    mockUseCurrentLevel.mockReturnValue({
      setCurrentLevel: mockSetCurrentLevel
    });
    renderDashboard();
    var handleLevelSelect = function handleLevelSelect(level) {
      mockSetCurrentLevel(level);
      router.push(`/tabs/exerciseSelection?level=${level}`);
    };
    handleLevelSelect('2');
    expect(mockSetCurrentLevel).toHaveBeenCalledWith('2');
    expect(router.push).toHaveBeenCalledWith('/tabs/exerciseSelection?level=2');
  });
  it('devrait calculer la progression correctement', function () {
    var mockGetLevelProgress = jest.fn();
    mockGetLevelProgress.mockReturnValue(42);
    mockUseRealTimeProgress.mockReturnValue({
      getLevelProgress: mockGetLevelProgress,
      refresh: jest.fn()
    });
    renderDashboard();
    expect(mockGetLevelProgress).toHaveBeenCalledWith('1');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,