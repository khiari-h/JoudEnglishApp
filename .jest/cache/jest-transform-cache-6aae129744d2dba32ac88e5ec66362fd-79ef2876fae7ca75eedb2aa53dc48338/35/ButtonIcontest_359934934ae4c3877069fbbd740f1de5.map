{"version":3,"names":["_getJestObj","mock","Ionicons","_ref","name","size","color","React","require","_require","Text","_jsxRuntime","jsx","testID","children","_interopRequireDefault","_react","_reactNative","_ButtonIcon","_vectorIcons","_require2","jest","describe","it","_render","render","LeftIcon","getByTestId","icon","expect","toBeTruthy","props","toBe","_render2","queryByTestId","toBeNull","_render3","RightIcon","_render4","_render5","IconOnly","_render6"],"sources":["ButtonIcon.test.js"],"sourcesContent":["import React from 'react';\r\nimport { render } from '@testing-library/react-native';\r\nimport { LeftIcon, RightIcon, IconOnly } from '../../../../src/components/ui/Button/ButtonIcon';\r\nimport { Ionicons } from \"@expo/vector-icons\";\r\n\r\n// Mock des icônes Ionicons pour simplifier le test\r\njest.mock('@expo/vector-icons', () => ({\r\n  Ionicons: ({ name, size, color }) => {\r\n    const React = require('react');\r\n    const { Text } = require('react-native');\r\n    return <Text testID={`icon-${name}`} name={name} size={size} color={color}>{name}</Text>;\r\n  },\r\n}));\r\n\r\ndescribe('ButtonIcon', () => {\r\n  // Test pour le composant LeftIcon\r\n  it('devrait rendre une icône à gauche si un nom est fourni', () => {\r\n    const { getByTestId } = render(<LeftIcon name=\"arrow-back\" size={24} color=\"blue\" />);\r\n    const icon = getByTestId('icon-arrow-back');\r\n    expect(icon).toBeTruthy();\r\n    expect(icon.props.size).toBe(24);\r\n    expect(icon.props.color).toBe('blue');\r\n  });\r\n\r\n  it('ne devrait pas rendre d\\'icône à gauche si le nom n\\'est pas fourni', () => {\r\n    const { queryByTestId } = render(<LeftIcon />);\r\n    expect(queryByTestId('icon-arrow-back')).toBeNull();\r\n  });\r\n\r\n  // Test pour le composant RightIcon\r\n  it('devrait rendre une icône à droite si un nom est fourni', () => {\r\n    const { getByTestId } = render(<RightIcon name=\"arrow-forward\" size={20} color=\"red\" />);\r\n    const icon = getByTestId('icon-arrow-forward');\r\n    expect(icon).toBeTruthy();\r\n    expect(icon.props.size).toBe(20);\r\n    expect(icon.props.color).toBe('red');\r\n  });\r\n\r\n  it('ne devrait pas rendre d\\'icône à droite si le nom n\\'est pas fourni', () => {\r\n    const { queryByTestId } = render(<RightIcon />);\r\n    expect(queryByTestId('icon-arrow-forward')).toBeNull();\r\n  });\r\n\r\n  // Test pour le composant IconOnly\r\n  it('devrait rendre une icône seule si un nom est fourni', () => {\r\n    const { getByTestId } = render(<IconOnly name=\"close\" size={30} color=\"black\" />);\r\n    const icon = getByTestId('icon-close');\r\n    expect(icon).toBeTruthy();\r\n    expect(icon.props.size).toBe(30);\r\n    expect(icon.props.color).toBe('black');\r\n  });\r\n\r\n  it('ne devrait pas rendre d\\'icône seule si le nom n\\'est pas fourni', () => {\r\n    const { queryByTestId } = render(<IconOnly />);\r\n    expect(queryByTestId('icon-close')).toBeNull();\r\n  });\r\n});"],"mappings":"AAMAA,WAAA,GAAKC,IAAI,CAAC,oBAAoB,EAAE;EAAA,OAAO;IACrCC,QAAQ,EAAE,SAAVA,QAAQA,CAAAC,IAAA,EAA6B;MAAA,IAAxBC,IAAI,GAAAD,IAAA,CAAJC,IAAI;QAAEC,IAAI,GAAAF,IAAA,CAAJE,IAAI;QAAEC,KAAK,GAAAH,IAAA,CAALG,KAAK;MAC5B,IAAMC,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;MAC9B,IAAAC,QAAA,GAAiBD,OAAO,CAAC,cAAc,CAAC;QAAhCE,IAAI,GAAAD,QAAA,CAAJC,IAAI;MACZ,OAAO,IAAAC,WAAA,CAAAC,GAAA,EAACF,IAAI;QAACG,MAAM,EAAE,QAAQT,IAAI,EAAG;QAACA,IAAI,EAAEA,IAAK;QAACC,IAAI,EAAEA,IAAK;QAACC,KAAK,EAAEA,KAAM;QAAAQ,QAAA,EAAEV;MAAI,CAAO,CAAC;IAC1F;EACF,CAAC;AAAA,CAAC,CAAC;AAAC,IAAAW,sBAAA,GAAAP,OAAA;AAZJ,IAAAQ,MAAA,GAAAD,sBAAA,CAAAP,OAAA;AACA,IAAAS,YAAA,GAAAT,OAAA;AACA,IAAAU,WAAA,GAAAV,OAAA;AACA,IAAAW,YAAA,GAAAX,OAAA;AAA8C,IAAAG,WAAA,GAAAH,OAAA;AAAA,SAAAR,YAAA;EAAA,IAAAoB,SAAA,GAAAZ,OAAA;IAAAa,IAAA,GAAAD,SAAA,CAAAC,IAAA;EAAArB,WAAA,YAAAA,YAAA;IAAA,OAAAqB,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAW9CC,QAAQ,CAAC,YAAY,EAAE,YAAM;EAE3BC,EAAE,CAAC,wDAAwD,EAAE,YAAM;IACjE,IAAAC,OAAA,GAAwB,IAAAC,mBAAM,EAAC,IAAAd,WAAA,CAAAC,GAAA,EAACM,WAAA,CAAAQ,QAAQ;QAACtB,IAAI,EAAC,YAAY;QAACC,IAAI,EAAE,EAAG;QAACC,KAAK,EAAC;MAAM,CAAE,CAAC,CAAC;MAA7EqB,WAAW,GAAAH,OAAA,CAAXG,WAAW;IACnB,IAAMC,IAAI,GAAGD,WAAW,CAAC,iBAAiB,CAAC;IAC3CE,MAAM,CAACD,IAAI,CAAC,CAACE,UAAU,CAAC,CAAC;IACzBD,MAAM,CAACD,IAAI,CAACG,KAAK,CAAC1B,IAAI,CAAC,CAAC2B,IAAI,CAAC,EAAE,CAAC;IAChCH,MAAM,CAACD,IAAI,CAACG,KAAK,CAACzB,KAAK,CAAC,CAAC0B,IAAI,CAAC,MAAM,CAAC;EACvC,CAAC,CAAC;EAEFT,EAAE,CAAC,qEAAqE,EAAE,YAAM;IAC9E,IAAAU,QAAA,GAA0B,IAAAR,mBAAM,EAAC,IAAAd,WAAA,CAAAC,GAAA,EAACM,WAAA,CAAAQ,QAAQ,IAAE,CAAC,CAAC;MAAtCQ,aAAa,GAAAD,QAAA,CAAbC,aAAa;IACrBL,MAAM,CAACK,aAAa,CAAC,iBAAiB,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;EACrD,CAAC,CAAC;EAGFZ,EAAE,CAAC,wDAAwD,EAAE,YAAM;IACjE,IAAAa,QAAA,GAAwB,IAAAX,mBAAM,EAAC,IAAAd,WAAA,CAAAC,GAAA,EAACM,WAAA,CAAAmB,SAAS;QAACjC,IAAI,EAAC,eAAe;QAACC,IAAI,EAAE,EAAG;QAACC,KAAK,EAAC;MAAK,CAAE,CAAC,CAAC;MAAhFqB,WAAW,GAAAS,QAAA,CAAXT,WAAW;IACnB,IAAMC,IAAI,GAAGD,WAAW,CAAC,oBAAoB,CAAC;IAC9CE,MAAM,CAACD,IAAI,CAAC,CAACE,UAAU,CAAC,CAAC;IACzBD,MAAM,CAACD,IAAI,CAACG,KAAK,CAAC1B,IAAI,CAAC,CAAC2B,IAAI,CAAC,EAAE,CAAC;IAChCH,MAAM,CAACD,IAAI,CAACG,KAAK,CAACzB,KAAK,CAAC,CAAC0B,IAAI,CAAC,KAAK,CAAC;EACtC,CAAC,CAAC;EAEFT,EAAE,CAAC,qEAAqE,EAAE,YAAM;IAC9E,IAAAe,QAAA,GAA0B,IAAAb,mBAAM,EAAC,IAAAd,WAAA,CAAAC,GAAA,EAACM,WAAA,CAAAmB,SAAS,IAAE,CAAC,CAAC;MAAvCH,aAAa,GAAAI,QAAA,CAAbJ,aAAa;IACrBL,MAAM,CAACK,aAAa,CAAC,oBAAoB,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;EACxD,CAAC,CAAC;EAGFZ,EAAE,CAAC,qDAAqD,EAAE,YAAM;IAC9D,IAAAgB,QAAA,GAAwB,IAAAd,mBAAM,EAAC,IAAAd,WAAA,CAAAC,GAAA,EAACM,WAAA,CAAAsB,QAAQ;QAACpC,IAAI,EAAC,OAAO;QAACC,IAAI,EAAE,EAAG;QAACC,KAAK,EAAC;MAAO,CAAE,CAAC,CAAC;MAAzEqB,WAAW,GAAAY,QAAA,CAAXZ,WAAW;IACnB,IAAMC,IAAI,GAAGD,WAAW,CAAC,YAAY,CAAC;IACtCE,MAAM,CAACD,IAAI,CAAC,CAACE,UAAU,CAAC,CAAC;IACzBD,MAAM,CAACD,IAAI,CAACG,KAAK,CAAC1B,IAAI,CAAC,CAAC2B,IAAI,CAAC,EAAE,CAAC;IAChCH,MAAM,CAACD,IAAI,CAACG,KAAK,CAACzB,KAAK,CAAC,CAAC0B,IAAI,CAAC,OAAO,CAAC;EACxC,CAAC,CAAC;EAEFT,EAAE,CAAC,kEAAkE,EAAE,YAAM;IAC3E,IAAAkB,QAAA,GAA0B,IAAAhB,mBAAM,EAAC,IAAAd,WAAA,CAAAC,GAAA,EAACM,WAAA,CAAAsB,QAAQ,IAAE,CAAC,CAAC;MAAtCN,aAAa,GAAAO,QAAA,CAAbP,aAAa;IACrBL,MAAM,CAACK,aAAa,CAAC,YAAY,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;EAChD,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}