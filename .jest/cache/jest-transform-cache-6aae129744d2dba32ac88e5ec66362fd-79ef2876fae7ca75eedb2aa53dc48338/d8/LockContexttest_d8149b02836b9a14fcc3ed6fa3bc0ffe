9c18e22215023cbf73d20a21af02addc
_getJestObj().mock('../../src/services/lockService', function () {
  return {
    isEnabled: jest.fn(),
    verifyPin: jest.fn(),
    disableLock: jest.fn(),
    enableLock: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _LockContext = require("../../src/contexts/LockContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var Lock = require('../../src/services/lockService');
var Consumer = function Consumer() {
  var _useLock = (0, _LockContext.useLock)(),
    isEnabled = _useLock.isEnabled,
    isLocked = _useLock.isLocked,
    unlockWithPin = _useLock.unlockWithPin,
    disable = _useLock.disable,
    enable = _useLock.enable,
    isLoading = _useLock.isLoading,
    lockNow = _useLock.lockNow;
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [isLoading && (0, _jsxRuntime.jsx)("text", {
      testID: "loading",
      children: "Loading..."
    }), (0, _jsxRuntime.jsx)("text", {
      testID: "enabled",
      children: String(isEnabled)
    }), (0, _jsxRuntime.jsx)("text", {
      testID: "locked",
      children: String(isLocked)
    }), (0, _jsxRuntime.jsx)("button", {
      testID: "unlock-correct-pin",
      onPress: function onPress() {
        return unlockWithPin('1234');
      }
    }), (0, _jsxRuntime.jsx)("button", {
      testID: "unlock-wrong-pin",
      onPress: function onPress() {
        return unlockWithPin('0000');
      }
    }), (0, _jsxRuntime.jsx)("button", {
      testID: "unlock-lockout",
      onPress: function onPress() {
        return unlockWithPin('0000');
      }
    }), (0, _jsxRuntime.jsx)("button", {
      testID: "disable",
      onPress: disable
    }), (0, _jsxRuntime.jsx)("button", {
      testID: "enable",
      onPress: enable
    }), (0, _jsxRuntime.jsx)("button", {
      testID: "lock-now",
      onPress: lockNow
    })]
  });
};
describe('LockContext', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    Lock.isEnabled.mockResolvedValue(true);
    Lock.verifyPin.mockResolvedValue({
      ok: true
    });
    Lock.disableLock.mockResolvedValue(true);
    Lock.enableLock.mockResolvedValue(true);
  });
  it('initializes locked when enabled, unlocks with correct PIN, and can disable', (0, _asyncToGenerator2.default)(function* () {
    var ui = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_LockContext.LockProvider, {
      children: (0, _jsxRuntime.jsx)(Consumer, {})
    }));
    yield (0, _reactNative.waitFor)(function () {
      return expect(ui.queryByTestId('loading')).toBeNull();
    });
    expect(ui.getByTestId('enabled').props.children).toBe('true');
    expect(ui.getByTestId('locked').props.children).toBe('true');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(ui.getByTestId('unlock-correct-pin'));
    }));
    expect(ui.getByTestId('locked').props.children).toBe('false');
    expect(Lock.verifyPin).toHaveBeenCalledWith('1234');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(ui.getByTestId('disable'));
    }));
    expect(ui.getByTestId('enabled').props.children).toBe('false');
    expect(Lock.disableLock).toHaveBeenCalled();
  }));
  it('initializes unlocked when not enabled', (0, _asyncToGenerator2.default)(function* () {
    Lock.isEnabled.mockResolvedValueOnce(false);
    var ui = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_LockContext.LockProvider, {
      children: (0, _jsxRuntime.jsx)(Consumer, {})
    }));
    yield (0, _reactNative.waitFor)(function () {
      return expect(ui.queryByTestId('loading')).toBeNull();
    });
    expect(ui.getByTestId('enabled').props.children).toBe('false');
    expect(ui.getByTestId('locked').props.children).toBe('false');
  }));
  it('should not unlock with an incorrect PIN', (0, _asyncToGenerator2.default)(function* () {
    Lock.verifyPin.mockResolvedValueOnce({
      ok: false
    });
    var ui = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_LockContext.LockProvider, {
      children: (0, _jsxRuntime.jsx)(Consumer, {})
    }));
    yield (0, _reactNative.waitFor)(function () {
      return expect(ui.queryByTestId('loading')).toBeNull();
    });
    expect(ui.getByTestId('locked').props.children).toBe('true');
    var result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      result = yield ui.getByTestId('unlock-wrong-pin').props.onPress();
    }));
    expect(ui.getByTestId('locked').props.children).toBe('true');
    expect(result).toEqual({
      ok: false
    });
    expect(Lock.verifyPin).toHaveBeenCalledWith('0000');
  }));
  it('should return lockout reason when pin verification fails with lockout', (0, _asyncToGenerator2.default)(function* () {
    Lock.verifyPin.mockResolvedValueOnce({
      ok: false,
      reason: 'lockout'
    });
    var ui = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_LockContext.LockProvider, {
      children: (0, _jsxRuntime.jsx)(Consumer, {})
    }));
    yield (0, _reactNative.waitFor)(function () {
      return expect(ui.queryByTestId('loading')).toBeNull();
    });
    expect(ui.getByTestId('locked').props.children).toBe('true');
    var result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      result = yield ui.getByTestId('unlock-lockout').props.onPress();
    }));
    expect(ui.getByTestId('locked').props.children).toBe('true');
    expect(result).toEqual({
      ok: false,
      reason: 'lockout'
    });
    expect(Lock.verifyPin).toHaveBeenCalledWith('0000');
  }));
  it('should enable the lock', (0, _asyncToGenerator2.default)(function* () {
    Lock.isEnabled.mockResolvedValueOnce(false);
    var ui = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_LockContext.LockProvider, {
      children: (0, _jsxRuntime.jsx)(Consumer, {})
    }));
    yield (0, _reactNative.waitFor)(function () {
      return expect(ui.queryByTestId('loading')).toBeNull();
    });
    expect(ui.getByTestId('enabled').props.children).toBe('false');
    expect(ui.getByTestId('locked').props.children).toBe('false');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(ui.getByTestId('enable'));
    }));
    expect(ui.getByTestId('enabled').props.children).toBe('true');
    expect(ui.getByTestId('locked').props.children).toBe('true');
    expect(Lock.enableLock).toHaveBeenCalled();
  }));
  it('should lock the app when lockNow is called', (0, _asyncToGenerator2.default)(function* () {
    var ui = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_LockContext.LockProvider, {
      children: (0, _jsxRuntime.jsx)(Consumer, {})
    }));
    yield (0, _reactNative.waitFor)(function () {
      return expect(ui.getByTestId('locked').props.children).toBe('true');
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(ui.getByTestId('unlock-correct-pin'));
    }));
    expect(ui.getByTestId('locked').props.children).toBe('false');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(ui.getByTestId('lock-now'));
    }));
    expect(ui.getByTestId('locked').props.children).toBe('true');
  }));
  it('should not lock the app when lockNow is called but isEnabled is false', (0, _asyncToGenerator2.default)(function* () {
    Lock.isEnabled.mockResolvedValueOnce(false);
    var ui = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_LockContext.LockProvider, {
      children: (0, _jsxRuntime.jsx)(Consumer, {})
    }));
    yield (0, _reactNative.waitFor)(function () {
      return expect(ui.getByTestId('locked').props.children).toBe('false');
    });
    expect(ui.getByTestId('enabled').props.children).toBe('false');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(ui.getByTestId('lock-now'));
    }));
    expect(ui.getByTestId('locked').props.children).toBe('false');
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,