4b5594be936f2d49ce1eef55db4045f3
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactHooks = require("@testing-library/react-hooks");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useDailyWords = _interopRequireDefault(require("../../src/hooks/useDailyWords"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useDailyWords', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    jest.spyOn(Date, 'now').mockReturnValue(1640995200000);
    jest.spyOn(Date.prototype, 'toDateString').mockReturnValue('Sat Jan 01 2022');
  });
  afterEach(function () {
    jest.restoreAllMocks();
  });
  describe('Calcul des mots quotidiens', function () {
    it('devrait compter les mots appris aujourd\'hui', (0, _asyncToGenerator2.default)(function* () {
      var mockVocabularyData = {
        completedWords: {
          '0': [{
            word: 'hello',
            timestamp: 1640995200000
          }, {
            word: 'world',
            timestamp: 1640995200000
          }],
          '1': [{
            word: 'test',
            timestamp: 1640908800000
          }]
        }
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key.includes('vocabulary_') && key.includes('_classic')) {
          return Promise.resolve(JSON.stringify(mockVocabularyData));
        }
        return Promise.resolve(null);
      });
      var _renderHook = (0, _reactHooks.renderHook)(function () {
          return (0, _useDailyWords.default)();
        }),
        result = _renderHook.result,
        waitForNextUpdate = _renderHook.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.wordsToday).toBe(12);
      expect(result.current.isLoading).toBe(false);
    }));
    it('devrait ignorer les mots d\'autres jours', (0, _asyncToGenerator2.default)(function* () {
      var mockVocabularyData = {
        completedWords: {
          '0': [{
            word: 'yesterday',
            timestamp: 1640908800000
          }, {
            word: 'tomorrow',
            timestamp: 1641081600000
          }]
        }
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key.includes('vocabulary_') && key.includes('_classic')) {
          return Promise.resolve(JSON.stringify(mockVocabularyData));
        }
        return Promise.resolve(null);
      });
      var _renderHook2 = (0, _reactHooks.renderHook)(function () {
          return (0, _useDailyWords.default)();
        }),
        result = _renderHook2.result,
        waitForNextUpdate = _renderHook2.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.wordsToday).toBe(0);
    }));
    it('devrait gérer les données vides ou manquantes', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook3 = (0, _reactHooks.renderHook)(function () {
          return (0, _useDailyWords.default)();
        }),
        result = _renderHook3.result,
        waitForNextUpdate = _renderHook3.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.wordsToday).toBe(0);
      expect(result.current.isLoading).toBe(false);
    }));
    it('devrait gérer les données corrompues', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key.includes('vocabulary_1_classic')) {
          return Promise.resolve('invalid json');
        }
        return Promise.resolve(null);
      });
      var _renderHook4 = (0, _reactHooks.renderHook)(function () {
          return (0, _useDailyWords.default)();
        }),
        result = _renderHook4.result,
        waitForNextUpdate = _renderHook4.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.wordsToday).toBe(0);
      expect(result.current.isLoading).toBe(false);
    }));
    it('devrait supporter l\'ancien format de mots (string)', (0, _asyncToGenerator2.default)(function* () {
      var mockVocabularyData = {
        completedWords: {
          '0': ['hello', 'world']
        }
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key.includes('vocabulary_1_classic')) {
          return Promise.resolve(JSON.stringify(mockVocabularyData));
        }
        return Promise.resolve(null);
      });
      var _renderHook5 = (0, _reactHooks.renderHook)(function () {
          return (0, _useDailyWords.default)();
        }),
        result = _renderHook5.result,
        waitForNextUpdate = _renderHook5.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.wordsToday).toBe(0);
    }));
  });
  describe('Parcours des niveaux et modes', function () {
    it('devrait parcourir tous les niveaux (1-6)', (0, _asyncToGenerator2.default)(function* () {
      var mockVocabularyData = {
        completedWords: {
          '0': [{
            word: 'test',
            timestamp: 1640995200000
          }]
        }
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key.includes('vocabulary_') && key.includes('_classic')) {
          return Promise.resolve(JSON.stringify(mockVocabularyData));
        }
        return Promise.resolve(null);
      });
      var _renderHook6 = (0, _reactHooks.renderHook)(function () {
          return (0, _useDailyWords.default)();
        }),
        result = _renderHook6.result,
        waitForNextUpdate = _renderHook6.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(_asyncStorage.default.getItem).toHaveBeenCalledWith('vocabulary_1_classic');
      expect(_asyncStorage.default.getItem).toHaveBeenCalledWith('vocabulary_2_classic');
      expect(_asyncStorage.default.getItem).toHaveBeenCalledWith('vocabulary_3_classic');
      expect(_asyncStorage.default.getItem).toHaveBeenCalledWith('vocabulary_4_classic');
      expect(_asyncStorage.default.getItem).toHaveBeenCalledWith('vocabulary_5_classic');
      expect(_asyncStorage.default.getItem).toHaveBeenCalledWith('vocabulary_6_classic');
      expect(result.current.wordsToday).toBe(6);
    }));
    it('ne devrait traiter que le mode classic (pas fast)', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook7 = (0, _reactHooks.renderHook)(function () {
          return (0, _useDailyWords.default)();
        }),
        result = _renderHook7.result,
        waitForNextUpdate = _renderHook7.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(_asyncStorage.default.getItem).not.toHaveBeenCalledWith(expect.stringContaining('_fast'));
      expect(_asyncStorage.default.getItem).toHaveBeenCalledWith(expect.stringContaining('_classic'));
    }));
  });
  describe('Fonction refresh', function () {
    it('devrait permettre de recalculer manuellement', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook8 = (0, _reactHooks.renderHook)(function () {
          return (0, _useDailyWords.default)();
        }),
        result = _renderHook8.result,
        waitForNextUpdate = _renderHook8.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.wordsToday).toBe(0);
      var mockVocabularyData = {
        completedWords: {
          '0': [{
            word: 'new',
            timestamp: 1640995200000
          }]
        }
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key.includes('vocabulary_1_classic')) {
          return Promise.resolve(JSON.stringify(mockVocabularyData));
        }
        return Promise.resolve(null);
      });
      yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
        result.current.refresh();
      }));
      expect(result.current.wordsToday).toBe(1);
    }));
  });
  describe('Auto-refresh à minuit', function () {
    it('devrait programmer un refresh à minuit', function () {
      jest.useFakeTimers();
      var _renderHook9 = (0, _reactHooks.renderHook)(function () {
          return (0, _useDailyWords.default)();
        }),
        result = _renderHook9.result;
      var now = new Date(1640995200000);
      var tomorrow = new Date(now);
      tomorrow.setDate(tomorrow.getDate() + 1);
      tomorrow.setHours(0, 0, 0, 0);
      var timeUntilMidnight = tomorrow.getTime() - now.getTime();
      jest.advanceTimersByTime(timeUntilMidnight);
      expect(setTimeout).toHaveBeenCalled();
      jest.useRealTimers();
    });
  });
  describe('Gestion des erreurs', function () {
    it('devrait gérer les erreurs AsyncStorage gracieusement', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockRejectedValue(new Error('Storage error'));
      var _renderHook0 = (0, _reactHooks.renderHook)(function () {
          return (0, _useDailyWords.default)();
        }),
        result = _renderHook0.result,
        waitForNextUpdate = _renderHook0.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.wordsToday).toBe(0);
      expect(result.current.isLoading).toBe(false);
    }));
    it('devrait continuer même si un niveau échoue', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key.includes('vocabulary_1_classic')) {
          return Promise.reject(new Error('Level 1 error'));
        }
        if (key.includes('vocabulary_2_classic')) {
          return Promise.resolve(JSON.stringify({
            completedWords: {
              '0': [{
                word: 'test',
                timestamp: 1640995200000
              }]
            }
          }));
        }
        return Promise.resolve(null);
      });
      var _renderHook1 = (0, _reactHooks.renderHook)(function () {
          return (0, _useDailyWords.default)();
        }),
        result = _renderHook1.result,
        waitForNextUpdate = _renderHook1.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.wordsToday).toBe(1);
    }));
  });
  describe('Structure des données', function () {
    it('devrait gérer les catégories multiples', (0, _asyncToGenerator2.default)(function* () {
      var mockVocabularyData = {
        completedWords: {
          '0': [{
            word: 'cat1_word1',
            timestamp: 1640995200000
          }],
          '1': [{
            word: 'cat2_word1',
            timestamp: 1640995200000
          }, {
            word: 'cat2_word2',
            timestamp: 1640995200000
          }],
          '2': [{
            word: 'cat3_word1',
            timestamp: 1640908800000
          }]
        }
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key.includes('vocabulary_1_classic')) {
          return Promise.resolve(JSON.stringify(mockVocabularyData));
        }
        return Promise.resolve(null);
      });
      var _renderHook10 = (0, _reactHooks.renderHook)(function () {
          return (0, _useDailyWords.default)();
        }),
        result = _renderHook10.result,
        waitForNextUpdate = _renderHook10.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.wordsToday).toBe(3);
    }));
    it('devrait gérer les tableaux vides', (0, _asyncToGenerator2.default)(function* () {
      var mockVocabularyData = {
        completedWords: {
          '0': [],
          '1': [{
            word: 'test',
            timestamp: 1640995200000
          }],
          '2': null
        }
      };
      _asyncStorage.default.getItem.mockImplementation(function (key) {
        if (key.includes('vocabulary_1_classic')) {
          return Promise.resolve(JSON.stringify(mockVocabularyData));
        }
        return Promise.resolve(null);
      });
      var _renderHook11 = (0, _reactHooks.renderHook)(function () {
          return (0, _useDailyWords.default)();
        }),
        result = _renderHook11.result,
        waitForNextUpdate = _renderHook11.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.wordsToday).toBe(1);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,