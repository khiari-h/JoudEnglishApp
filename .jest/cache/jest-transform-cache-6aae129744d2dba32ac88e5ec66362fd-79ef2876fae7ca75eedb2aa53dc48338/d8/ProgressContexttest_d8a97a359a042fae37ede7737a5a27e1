5c8c4a678576f0115ae123a3e5b09452
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    setItem: jest.fn(function () {
      return Promise.resolve();
    }),
    getItem: jest.fn(function () {
      return Promise.resolve(null);
    }),
    removeItem: jest.fn(function () {
      return Promise.resolve();
    })
  };
});
_getJestObj().mock('../../src/utils/constants', function () {
  return {
    STORAGE_KEYS: {
      USER_PROGRESS: '@JoudEnglishApp:userProgress'
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _ProgressContext = require("../../src/contexts/ProgressContext");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var TestComponent = function TestComponent() {
  var _progress$exercises$v;
  var _useProgress = (0, _ProgressContext.useProgress)(),
    progress = _useProgress.progress,
    isLoading = _useProgress.isLoading,
    updateExerciseProgress = _useProgress.updateExerciseProgress,
    updateStats = _useProgress.updateStats,
    calculateGlobalProgress = _useProgress.calculateGlobalProgress,
    calculateLevelProgress = _useProgress.calculateLevelProgress,
    resetProgress = _useProgress.resetProgress;
  if (isLoading) {
    return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "loading-status",
      children: "Loading..."
    });
  }
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [(0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "global-progress",
      children: ["Global: ", calculateGlobalProgress(), "%"]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "level1-progress",
      children: ["Level 1: ", calculateLevelProgress('1'), "%"]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "vocab-level1-completed",
      children: ["Vocab Level 1 Completed: ", ((_progress$exercises$v = progress.exercises.vocabulary['1']) == null ? void 0 : _progress$exercises$v.completed) || 0]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "streak",
      children: ["Streak: ", progress.stats.streak]
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Update Vocab Level 1",
      onPress: function onPress() {
        return updateExerciseProgress('vocabulary', '1', 50);
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Update Streak",
      onPress: function onPress() {
        return updateStats({
          streak: 5
        });
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Reset Progress",
      onPress: resetProgress
    })]
  });
};
var ComponentWithoutProvider = function ComponentWithoutProvider() {
  (0, _ProgressContext.useProgress)();
  return null;
};
describe('ProgressContext', function () {
  beforeEach(function () {
    jest.useFakeTimers();
    _asyncStorage.default.getItem.mockClear();
    _asyncStorage.default.setItem.mockClear();
    _asyncStorage.default.removeItem.mockClear();
  });
  afterEach(function () {
    jest.runOnlyPendingTimers();
    jest.useRealTimers();
  });
  it('loads initial progress from AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
    var mockProgress = {
      levels: {
        '1': {
          completed: 25,
          total: 100
        }
      },
      exercises: {
        vocabulary: {
          '1': {
            completed: 25,
            total: 100
          }
        }
      },
      stats: {
        streak: 1
      }
    };
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(mockProgress));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    expect(_reactNative.screen.getByTestId('loading-status')).toBeOnTheScreen();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_reactNative.screen.queryByTestId('loading-status')).toBeNull();
    expect(_reactNative.screen.getByTestId('level1-progress').props.children.join('')).toBe('Level 1: 25%');
    expect(_reactNative.screen.getByTestId('streak').props.children).toBe('Streak: 1');
  }));
  it('updates exercise progress and recalculates level progress', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_reactNative.screen.getByTestId('vocab-level1-completed').props.children).toBe('Vocab Level 1 Completed: 0');
    expect(_reactNative.screen.getByTestId('level1-progress').props.children).toBe('Level 1: 0%');
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Vocab Level 1'));
    expect(_reactNative.screen.getByTestId('vocab-level1-completed').props.children).toBe('Vocab Level 1 Completed: 50');
    expect(_reactNative.screen.getByTestId('level1-progress').props.children).toBe('Level 1: 50%');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_asyncStorage.default.setItem).toHaveBeenCalledTimes(1);
    var savedProgress = JSON.parse(_asyncStorage.default.setItem.mock.calls[0][1]);
    expect(savedProgress.exercises.vocabulary['1'].completed).toBe(50);
    expect(savedProgress.levels['1'].completed).toBe(50);
  }));
  it('updates stats and saves to AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_reactNative.screen.getByTestId('streak').props.children).toBe('Streak: 0');
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Streak'));
    expect(_reactNative.screen.getByTestId('streak').props.children).toBe('Streak: 5');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_asyncStorage.default.setItem).toHaveBeenCalledTimes(1);
    var savedProgress = JSON.parse(_asyncStorage.default.setItem.mock.calls[0][1]);
    expect(savedProgress.stats.streak).toBe(5);
  }));
  it('resets progress and removes from AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Vocab Level 1'));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Streak'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_asyncStorage.default.setItem).toHaveBeenCalledTimes(1);
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Reset Progress'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
    expect(_asyncStorage.default.removeItem).toHaveBeenCalledWith(STORAGE_KEYS.USER_PROGRESS);
    expect(_reactNative.screen.getByTestId('level1-progress').props.children).toBe('Level 1: 0%');
    expect(_reactNative.screen.getByTestId('streak').props.children).toBe('Streak: 0');
  }));
  it('throws an error if useProgress is used outside of ProgressProvider', function () {
    var originalError = console.error;
    console.error = jest.fn();
    expect(function () {
      return (0, _reactNative.render)((0, _jsxRuntime.jsx)(ComponentWithoutProvider, {}));
    }).toThrow('useProgress must be used within a ProgressProvider');
    console.error = originalError;
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,