4beca88030be300cc4ca3050f356b76a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = void 0;
var _codegenNativeCommands = _interopRequireDefault(require("../../../../Libraries/Utilities/codegenNativeCommands"));
var _codegenNativeComponent = _interopRequireDefault(require("../../../../Libraries/Utilities/codegenNativeComponent"));
var React = _interopRequireWildcard(require("react"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var NativeComponentRegistry = require('react-native/Libraries/NativeComponent/NativeComponentRegistry');
var _require = require('react-native/Libraries/NativeComponent/ViewConfigIgnore'),
  ConditionallyIgnoredEventHandlers = _require.ConditionallyIgnoredEventHandlers;
var _require2 = require("react-native/Libraries/ReactNative/RendererProxy"),
  dispatchCommand = _require2.dispatchCommand;
var nativeComponentName = 'AndroidSwitch';
var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
  uiViewClassName: 'AndroidSwitch',
  bubblingEventTypes: {
    topChange: {
      phasedRegistrationNames: {
        captured: 'onChangeCapture',
        bubbled: 'onChange'
      }
    }
  },
  validAttributes: Object.assign({
    disabled: true,
    enabled: true,
    thumbColor: {
      process: require('react-native/Libraries/StyleSheet/processColor').default
    },
    trackColorForFalse: {
      process: require('react-native/Libraries/StyleSheet/processColor').default
    },
    trackColorForTrue: {
      process: require('react-native/Libraries/StyleSheet/processColor').default
    },
    value: true,
    on: true,
    thumbTintColor: {
      process: require('react-native/Libraries/StyleSheet/processColor').default
    },
    trackTintColor: {
      process: require('react-native/Libraries/StyleSheet/processColor').default
    }
  }, ConditionallyIgnoredEventHandlers({
    onChange: true
  }))
};
var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, function () {
  return __INTERNAL_VIEW_CONFIG;
});
var Commands = exports.Commands = {
  setNativeValue: function setNativeValue(ref, value) {
    dispatchCommand(ref, "setNativeValue", [value]);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29kZWdlbk5hdGl2ZUNvbW1hbmRzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfY29kZWdlbk5hdGl2ZUNvbXBvbmVudCIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIk5hdGl2ZUNvbXBvbmVudFJlZ2lzdHJ5IiwiX3JlcXVpcmUiLCJDb25kaXRpb25hbGx5SWdub3JlZEV2ZW50SGFuZGxlcnMiLCJfcmVxdWlyZTIiLCJkaXNwYXRjaENvbW1hbmQiLCJuYXRpdmVDb21wb25lbnROYW1lIiwiX19JTlRFUk5BTF9WSUVXX0NPTkZJRyIsImV4cG9ydHMiLCJ1aVZpZXdDbGFzc05hbWUiLCJidWJibGluZ0V2ZW50VHlwZXMiLCJ0b3BDaGFuZ2UiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsImNhcHR1cmVkIiwiYnViYmxlZCIsInZhbGlkQXR0cmlidXRlcyIsImFzc2lnbiIsImRpc2FibGVkIiwiZW5hYmxlZCIsInRodW1iQ29sb3IiLCJwcm9jZXNzIiwidHJhY2tDb2xvckZvckZhbHNlIiwidHJhY2tDb2xvckZvclRydWUiLCJ2YWx1ZSIsIm9uIiwidGh1bWJUaW50Q29sb3IiLCJ0cmFja1RpbnRDb2xvciIsIm9uQ2hhbmdlIiwiX2RlZmF1bHQiLCJDb21tYW5kcyIsInNldE5hdGl2ZVZhbHVlIiwicmVmIl0sInNvdXJjZXMiOlsiQW5kcm9pZFN3aXRjaE5hdGl2ZUNvbXBvbmVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IHR5cGUge1ZpZXdQcm9wc30gZnJvbSAnLi4vLi4vLi4vLi4vTGlicmFyaWVzL0NvbXBvbmVudHMvVmlldy9WaWV3UHJvcFR5cGVzJztcbmltcG9ydCB0eXBlIHtIb3N0Q29tcG9uZW50fSBmcm9tICcuLi8uLi8uLi8uLi9MaWJyYXJpZXMvUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmVUeXBlcyc7XG5pbXBvcnQgdHlwZSB7Q29sb3JWYWx1ZX0gZnJvbSAnLi4vLi4vLi4vLi4vTGlicmFyaWVzL1N0eWxlU2hlZXQvU3R5bGVTaGVldCc7XG5pbXBvcnQgdHlwZSB7XG4gIEJ1YmJsaW5nRXZlbnRIYW5kbGVyLFxuICBJbnQzMixcbiAgV2l0aERlZmF1bHQsXG59IGZyb20gJy4uLy4uLy4uLy4uL0xpYnJhcmllcy9UeXBlcy9Db2RlZ2VuVHlwZXMnO1xuXG5pbXBvcnQgY29kZWdlbk5hdGl2ZUNvbW1hbmRzIGZyb20gJy4uLy4uLy4uLy4uL0xpYnJhcmllcy9VdGlsaXRpZXMvY29kZWdlbk5hdGl2ZUNvbW1hbmRzJztcbmltcG9ydCBjb2RlZ2VuTmF0aXZlQ29tcG9uZW50IGZyb20gJy4uLy4uLy4uLy4uL0xpYnJhcmllcy9VdGlsaXRpZXMvY29kZWdlbk5hdGl2ZUNvbXBvbmVudCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbnR5cGUgU3dpdGNoQ2hhbmdlRXZlbnQgPSAkUmVhZE9ubHk8e3xcbiAgdmFsdWU6IGJvb2xlYW4sXG4gIHRhcmdldDogSW50MzIsXG58fT47XG5cbnR5cGUgTmF0aXZlUHJvcHMgPSAkUmVhZE9ubHk8e3xcbiAgLi4uVmlld1Byb3BzLFxuXG4gIC8vIFByb3BzXG4gIGRpc2FibGVkPzogV2l0aERlZmF1bHQ8Ym9vbGVhbiwgZmFsc2U+LFxuICBlbmFibGVkPzogV2l0aERlZmF1bHQ8Ym9vbGVhbiwgdHJ1ZT4sXG4gIHRodW1iQ29sb3I/OiA/Q29sb3JWYWx1ZSxcbiAgdHJhY2tDb2xvckZvckZhbHNlPzogP0NvbG9yVmFsdWUsXG4gIHRyYWNrQ29sb3JGb3JUcnVlPzogP0NvbG9yVmFsdWUsXG4gIHZhbHVlPzogV2l0aERlZmF1bHQ8Ym9vbGVhbiwgZmFsc2U+LFxuICBvbj86IFdpdGhEZWZhdWx0PGJvb2xlYW4sIGZhbHNlPixcbiAgdGh1bWJUaW50Q29sb3I/OiA/Q29sb3JWYWx1ZSxcbiAgdHJhY2tUaW50Q29sb3I/OiA/Q29sb3JWYWx1ZSxcblxuICAvLyBFdmVudHNcbiAgb25DaGFuZ2U/OiBCdWJibGluZ0V2ZW50SGFuZGxlcjxTd2l0Y2hDaGFuZ2VFdmVudD4sXG58fT47XG5cbnR5cGUgTmF0aXZlVHlwZSA9IEhvc3RDb21wb25lbnQ8TmF0aXZlUHJvcHM+O1xuXG5pbnRlcmZhY2UgTmF0aXZlQ29tbWFuZHMge1xuICArc2V0TmF0aXZlVmFsdWU6IChcbiAgICB2aWV3UmVmOiBSZWFjdC5FbGVtZW50UmVmPE5hdGl2ZVR5cGU+LFxuICAgIHZhbHVlOiBib29sZWFuLFxuICApID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBjb25zdCBDb21tYW5kczogTmF0aXZlQ29tbWFuZHMgPSBjb2RlZ2VuTmF0aXZlQ29tbWFuZHM8TmF0aXZlQ29tbWFuZHM+KHtcbiAgc3VwcG9ydGVkQ29tbWFuZHM6IFsnc2V0TmF0aXZlVmFsdWUnXSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCAoY29kZWdlbk5hdGl2ZUNvbXBvbmVudDxOYXRpdmVQcm9wcz4oJ0FuZHJvaWRTd2l0Y2gnLCB7XG4gIGludGVyZmFjZU9ubHk6IHRydWUsXG59KTogTmF0aXZlVHlwZSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBbUJBLElBQUFB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