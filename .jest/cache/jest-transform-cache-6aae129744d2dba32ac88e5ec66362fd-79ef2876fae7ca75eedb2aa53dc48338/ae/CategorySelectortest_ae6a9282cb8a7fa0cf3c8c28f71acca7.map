{"version":3,"names":["_getJestObj","mock","React","require","scrollToSpy","jest","fn","MockScrollView","forwardRef","props","ref","useImperativeHandle","scrollTo","childrenWithLayouts","Children","map","children","child","index","cloneElement","onLayout","event","nativeEvent","layout","x","y","width","height","_jsxRuntime","jsx","Fragment","_interopRequireDefault","_asyncToGenerator2","_toConsumableArray2","_react","_reactNative","_reactNative2","_CategorySelector","_require","useFakeTimers","spyOn","Animated","mockImplementation","start","callback","setTimeout","act","finished","stop","describe","mockCategories","id","name","stableProps","categories","selectedCategory","onSelectCategory","renderCategorySelector","arguments","length","undefined","render","default","Object","assign","beforeEach","clearAllMocks","ScrollView","mockClear","afterEach","useRealTimers","it","expect","toBeTruthy","_renderCategorySelect","getByText","forEach","category","_renderCategorySelect2","getAllByRole","categoryNames","element","accessibilityLabel","toEqual","cat","_renderCategorySelect3","queryByText","toBeNull","_renderCategorySelect4","getByRole","selectedPill","toHaveAccessibilityState","selected","mockOnSelect","_renderCategorySelect5","fireEvent","press","toHaveBeenCalledTimes","toHaveBeenCalledWith","_renderCategorySelect6","not","toHaveBeenCalled","_renderCategorySelect7","categoriesToTest","filter","_renderCategorySelect8","categoryPill","_renderCategorySelect9","_renderCategorySelect0","toHaveBeenNthCalledWith","runAllTimers","_renderCategorySelect1","_renderCategorySelect10","_renderCategorySelect11","_renderCategorySelect12","toThrow","specialCategories","_renderCategorySelect13","longNameCategories","_renderCategorySelect14","manyCategories","Array","from","_","i","startTime","Date","now","_renderCategorySelect15","queryAllByText","endTime","toBeLessThan","categoryElements","toHaveLength","_renderCategorySelect16","getByLabelText","_renderCategorySelect17","buttons","_renderCategorySelect18","rerender","_renderCategorySelect19","_renderCategorySelect20","_render","_renderCategorySelect21","button","_renderCategorySelect22","primaryColor","_renderCategorySelect23","newCategories","concat","_renderCategorySelect24","sameCategoriesNewRef","_renderCategorySelect25","modifiedCategories","slice","_renderCategorySelect26","waitFor"],"sources":["CategorySelector.test.js"],"sourcesContent":["import React from 'react';\nimport { render, fireEvent, act, waitFor, getByText, getByTestId } from '@testing-library/react-native';\nimport { Animated, ScrollView } from 'react-native';\nimport '@testing-library/jest-native';\n\nimport CategorySelector from '../../../src/components/exercise-common/CategorySelector';\n\njest.useFakeTimers();\n\n// Mocker Animated.timing pour simuler un délai\njest.spyOn(Animated, 'timing').mockImplementation(() => {\n  return {\n    start: (callback) => {\n      // Simuler l'animation qui se termine après 500ms\n      setTimeout(() => {\n        act(() => {\n          if (callback) {\n            callback({ finished: true });\n          }\n        });\n      }, 500);\n    },\n    stop: jest.fn(),\n  };\n});\n\n// Mocker ScrollView pour gérer la ref et la fonction scrollTo\njest.mock('react-native/Libraries/Components/ScrollView/ScrollView', () => {\n  const React = require('react');\n  const scrollToSpy = jest.fn();\n  const MockScrollView = React.forwardRef((props, ref) => {\n    React.useImperativeHandle(ref, () => ({\n      scrollTo: scrollToSpy,\n    }));\n\n    // Simuler l'événement onLayout de manière synchrone pour que les tests de scrolling fonctionnent.\n    // Cette partie est cruciale pour que le `useEffect` du composant puisse trouver les layouts.\n    const childrenWithLayouts = React.Children.map(props.children, (child, index) => {\n      if (!child) return null;\n      return React.cloneElement(child, {\n        onLayout: (event) => {\n          child.props.onLayout?.({\n            nativeEvent: {\n              layout: {\n                x: index * 100, // Position arbitraire pour le test\n                y: 0,\n                width: 80,\n                height: 40,\n              },\n            },\n          });\n        },\n      });\n    });\n\n    return <React.Fragment>{childrenWithLayouts}</React.Fragment>;\n  });\n\n  MockScrollView.scrollToSpy = scrollToSpy;\n  return MockScrollView;\n});\n\ndescribe('CategorySelector Component', () => {\n  // Déclarer les props une seule fois pour garantir la stabilité des références\n  const mockCategories = [\n    { id: '1', name: 'Fruits' },\n    { id: '2', name: 'Vegetables' },\n    { id: '3', name: 'Dairy Products' },\n    { id: '4', name: 'Meat & Fish' },\n    { id: '5', name: 'Beverages' },\n  ];\n\n  const stableProps = {\n    categories: mockCategories,\n    selectedCategory: '1',\n    onSelectCategory: jest.fn(),\n  };\n\n  const renderCategorySelector = (props = {}) => {\n    return render(<CategorySelector {...stableProps} {...props} />);\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.useFakeTimers();\n    ScrollView.scrollToSpy.mockClear();\n  });\n\n  afterEach(() => {\n    jest.useRealTimers();\n  });\n\n  // --- RENDERING ---\n  describe('Rendering', () => {\n    it('should render without crashing', () => {\n      expect(renderCategorySelector()).toBeTruthy();\n    });\n    it('should render all categories correctly', () => {\n      const { getByText } = renderCategorySelector();\n      mockCategories.forEach(category => {\n        expect(getByText(category.name)).toBeTruthy();\n      });\n    });\n    it('should render categories in the correct order', () => {\n      const { getAllByRole } = renderCategorySelector();\n      const categoryNames = getAllByRole('button').map(element => element.props.accessibilityLabel);\n      expect(categoryNames).toEqual(mockCategories.map(cat => cat.name));\n    });\n    it('should handle empty categories array gracefully', () => {\n      const { queryByText } = renderCategorySelector({ categories: [] });\n      mockCategories.forEach(category => {\n        expect(queryByText(category.name)).toBeNull();\n      });\n    });\n    it('should highlight the selected category visually', () => {\n      const { getByRole } = renderCategorySelector({ selectedCategory: '2' });\n      const selectedPill = getByRole('button', { name: 'Vegetables' });\n      expect(selectedPill).toHaveAccessibilityState({ selected: true });\n    });\n  });\n\n  // --- USER INTERACTIONS ---\n  describe('User Interactions', () => {\n    it('should call onSelectCategory when a different category is pressed', () => {\n      const mockOnSelect = jest.fn();\n      const { getByText } = renderCategorySelector({\n        selectedCategory: '1',\n        onSelectCategory: mockOnSelect\n      });\n      fireEvent.press(getByText('Vegetables'));\n      expect(mockOnSelect).toHaveBeenCalledTimes(1);\n      expect(mockOnSelect).toHaveBeenCalledWith('2');\n    });\n    it('should not call onSelectCategory when the same category is pressed', () => {\n      const mockOnSelect = jest.fn();\n      const { getByText } = renderCategorySelector({\n        selectedCategory: '1',\n        onSelectCategory: mockOnSelect\n      });\n      fireEvent.press(getByText('Fruits'));\n      expect(mockOnSelect).not.toHaveBeenCalled();\n    });\n    it('should call onSelectCategory with correct category id for each category', () => {\n      const mockOnSelect = jest.fn();\n      const { getByText } = renderCategorySelector({\n        selectedCategory: '1',\n        onSelectCategory: mockOnSelect\n      });\n      const categoriesToTest = mockCategories.filter(cat => cat.id !== '1');\n      categoriesToTest.forEach(category => {\n        fireEvent.press(getByText(category.name));\n        expect(mockOnSelect).toHaveBeenCalledWith(category.id);\n      });\n      expect(mockOnSelect).toHaveBeenCalledTimes(categoriesToTest.length);\n    });\n  });\n\n  // --- ANIMATIONS ---\n  describe('Animations', () => {\n    it('should trigger press animations correctly', () => {\n      const { getByText } = renderCategorySelector();\n      const categoryPill = getByText('Vegetables');\n      act(() => {\n        fireEvent(categoryPill, 'pressIn');\n        fireEvent(categoryPill, 'pressOut');\n      });\n      expect(categoryPill).toBeTruthy();\n    });\n    \n    it('should handle rapid press interactions without crashing', () => {\n      const mockOnSelect = jest.fn();\n      const { getByText } = renderCategorySelector({ onSelectCategory: mockOnSelect });\n      const categoryPill = getByText('Vegetables');\n      act(() => {\n        fireEvent(categoryPill, 'pressIn');\n        fireEvent(categoryPill, 'pressOut');\n        fireEvent.press(categoryPill);\n        fireEvent(categoryPill, 'pressIn');\n        fireEvent(categoryPill, 'pressOut');\n      });\n      expect(mockOnSelect).toHaveBeenCalledWith('2');\n      expect(categoryPill).toBeTruthy();\n    });\n    \n    it('should not trigger new animation if one is already in progress', () => {\n      const mockOnSelect = jest.fn();\n      const { getByText } = renderCategorySelector({ onSelectCategory: mockOnSelect });\n      \n      // Premier clic qui démarre l'animation\n      fireEvent.press(getByText('Vegetables'));\n      \n      // Second clic rapide pendant que l'animation est en cours (AVANT runAllTimers)\n      fireEvent.press(getByText('Dairy Products'));\n      \n      // Les deux clics passent car selectedCategory n'a pas encore été mis à jour entre les clics\n      expect(mockOnSelect).toHaveBeenCalledTimes(2);\n      expect(mockOnSelect).toHaveBeenNthCalledWith(1, '2');\n      expect(mockOnSelect).toHaveBeenNthCalledWith(2, '3');\n      \n      // Laisser l'animation se terminer\n      act(() => {\n        jest.runAllTimers();\n      });\n    });\n  });\n\n  // --- EDGE CASES ---\n  describe('Edge Cases', () => {\n    it('should handle undefined selectedCategory gracefully', () => {\n      const { getByText } = renderCategorySelector({ selectedCategory: undefined });\n      mockCategories.forEach(category => {\n        expect(getByText(category.name)).toBeTruthy();\n      });\n    });\n    it('should handle null selectedCategory gracefully', () => {\n      const { getByText } = renderCategorySelector({ selectedCategory: null });\n      mockCategories.forEach(category => {\n        expect(getByText(category.name)).toBeTruthy();\n      });\n    });\n    it('should handle non-existent selectedCategory id', () => {\n      const { getByText } = renderCategorySelector({ selectedCategory: 'non-existent' });\n      mockCategories.forEach(category => {\n        expect(getByText(category.name)).toBeTruthy();\n      });\n    });\n    it('should handle missing onSelectCategory prop gracefully', () => {\n      const { getByText } = renderCategorySelector({ onSelectCategory: undefined });\n      expect(() => {\n        fireEvent.press(getByText('Vegetables'));\n      }).not.toThrow();\n    });\n    it('should handle categories with special characters in names', () => {\n      const specialCategories = [\n        { id: '1', name: 'Café & Thé' },\n        { id: '2', name: 'Fruits & Légumes' },\n        { id: '3', name: 'Viande/Poisson' },\n      ];\n      const { getByText } = renderCategorySelector({ categories: specialCategories });\n      specialCategories.forEach(category => {\n        expect(getByText(category.name)).toBeTruthy();\n      });\n    });\n    it('should handle very long category names', () => {\n      const longNameCategories = [\n        { id: '1', name: 'This is a very long category name that might cause layout issues' },\n        { id: '2', name: 'Short' },\n      ];\n      const { getByText } = renderCategorySelector({ categories: longNameCategories });\n      longNameCategories.forEach(category => {\n        expect(getByText(category.name)).toBeTruthy();\n      });\n    });\n  });\n\n  // --- PERFORMANCE ---\n  describe('Performance', () => {\n    it('should handle large number of categories efficiently', () => {\n      const manyCategories = Array.from({ length: 100 }, (_, i) => ({\n        id: `${i + 1}`,\n        name: `Category ${i + 1}`,\n      }));\n      const startTime = Date.now();\n      const { queryAllByText } = renderCategorySelector({ categories: manyCategories });\n      const endTime = Date.now();\n      expect(endTime - startTime).toBeLessThan(1000);\n      const categoryElements = queryAllByText(/^Category/);\n      expect(categoryElements).toHaveLength(100);\n    });\n  });\n\n  // --- ACCESSIBILITY ---\n  describe('Accessibility', () => {\n    it('should have proper accessibility labels', () => {\n      const { getByLabelText } = renderCategorySelector();\n      mockCategories.forEach(category => {\n        const element = getByLabelText(category.name);\n        expect(element).toBeTruthy();\n      });\n    });\n    it('should support screen reader navigation', () => {\n      const { getAllByRole } = renderCategorySelector();\n      const buttons = getAllByRole('button');\n      expect(buttons).toHaveLength(mockCategories.length);\n    });\n  });\n  // Tests à ajouter à ton fichier CategorySelector.test.js\n\n// --- TESTS POUR LES LIGNES 77-100, 111-112 ---\ndescribe('Animation Edge Cases', () => {\n  it('should handle animation when fromCategory is null/undefined', () => {\n    const mockOnSelect = jest.fn();\n    const { getByText, rerender } = renderCategorySelector({\n      selectedCategory: undefined, // Pas de catégorie sélectionnée au début\n      onSelectCategory: mockOnSelect\n    });\n    \n    // Sélectionner une catégorie depuis \"undefined\"\n    rerender(<CategorySelector \n      {...stableProps} \n      selectedCategory=\"2\" \n      onSelectCategory={mockOnSelect} \n    />);\n    \n    expect(getByText('Vegetables')).toBeTruthy();\n  });\n\n  it('should handle animation when toCategory is null/undefined', () => {\n    const mockOnSelect = jest.fn();\n    const { getByText, rerender } = renderCategorySelector({\n      selectedCategory: \"1\",\n      onSelectCategory: mockOnSelect\n    });\n    \n    // Désélectionner vers undefined\n    rerender(<CategorySelector \n      {...stableProps} \n      selectedCategory={undefined} \n      onSelectCategory={mockOnSelect} \n    />);\n    \n    expect(getByText('Fruits')).toBeTruthy();\n  });\n\n  it('should handle case where no animations are created (empty animationsArray)', () => {\n    const { rerender } = renderCategorySelector({\n      categories: [], // Pas de catégories\n      selectedCategory: '1'\n    });\n    \n    // Changer vers une autre catégorie inexistante\n    rerender(<CategorySelector \n      categories={[]} \n      selectedCategory=\"2\"\n      onSelectCategory={jest.fn()} \n    />);\n    \n    // Le composant ne doit pas crasher\n    expect(true).toBeTruthy();\n  });\n});\n\n// --- TEST POUR LIGNE 160 ---\ndescribe('Animation fallbacks', () => {\n  it('should handle missing animation references gracefully', () => {\n    // Ce test force le cas où les animations n'existent pas encore\n    const { rerender } = render(\n      <CategorySelector \n        categories={[{ id: '1', name: 'Test' }]} \n        selectedCategory=\"1\"\n        onSelectCategory={jest.fn()}\n      />\n    );\n    \n    // Changer rapidement les catégories pour forcer les fallbacks\n    rerender(\n      <CategorySelector \n        categories={[{ id: '999', name: 'New' }]} // Nouvelle catégorie non initialisée\n        selectedCategory=\"999\"\n        onSelectCategory={jest.fn()}\n      />\n    );\n    \n    expect(true).toBeTruthy(); // Le composant ne doit pas crasher\n  });\n});\n\n// --- TESTS POUR LIGNES 258-272 (fonction areEqual) ---\ndescribe('Memoization (areEqual function)', () => {\n  it('should re-render when selectedCategory changes', () => {\n    const { rerender, getByRole } = renderCategorySelector({ selectedCategory: '1' });\n    \n    let button = getByRole('button', { name: 'Fruits' });\n    expect(button).toHaveAccessibilityState({ selected: true });\n    \n    rerender(<CategorySelector {...stableProps} selectedCategory=\"2\" />);\n    \n    button = getByRole('button', { name: 'Vegetables' });\n    expect(button).toHaveAccessibilityState({ selected: true });\n  });\n\n  it('should re-render when primaryColor changes', () => {\n    const { rerender } = renderCategorySelector({ primaryColor: '#FF0000' });\n    \n    rerender(<CategorySelector {...stableProps} primaryColor=\"#00FF00\" />);\n    \n    // Le composant doit se re-rendre\n    expect(true).toBeTruthy();\n  });\n\n  it('should re-render when categories length changes', () => {\n    const { rerender, queryByText } = renderCategorySelector();\n    \n    const newCategories = [\n      ...mockCategories,\n      { id: '6', name: 'New Category' }\n    ];\n    \n    rerender(<CategorySelector {...stableProps} categories={newCategories} />);\n    \n    expect(queryByText('New Category')).toBeTruthy();\n  });\n\n  it('should NOT re-render when categories array reference changes but content is same', () => {\n    const { rerender } = renderCategorySelector();\n    \n    // Même contenu, référence différente\n    const sameCategoriesNewRef = mockCategories.map(cat => ({ ...cat }));\n    \n    rerender(<CategorySelector {...stableProps} categories={sameCategoriesNewRef} />);\n    \n    // Difficile de tester directement que le composant ne s'est pas re-rendu,\n    // mais on peut au moins vérifier qu'il fonctionne toujours\n    expect(true).toBeTruthy();\n  });\n\n  it('should re-render when category content changes', () => {\n    const { rerender, queryByText } = renderCategorySelector();\n    \n    const modifiedCategories = [\n      { id: '1', name: 'Modified Fruits' }, // Nom changé\n      ...mockCategories.slice(1)\n    ];\n    \n    rerender(<CategorySelector {...stableProps} categories={modifiedCategories} />);\n    \n    expect(queryByText('Modified Fruits')).toBeTruthy();\n    expect(queryByText('Fruits')).toBeNull();\n  });\n});\n\n// --- TEST BONUS : Scroll automatique ---\ndescribe('Auto-scroll behavior', () => {\n  it('should scroll to selected category when layout is available', async () => {\n    const { rerender } = renderCategorySelector({ selectedCategory: '1' });\n    \n    // Simuler un layout\n    await act(async () => {\n      ScrollView.scrollToSpy.mockClear();\n    });\n\n    // Re-sélection d’une autre catégorie\n    rerender(<CategorySelector {...stableProps} selectedCategory=\"5\" />);\n\n    await act(async () => {\n      jest.runAllTimers();\n    });\n\n    await waitFor(() => {\n      expect(ScrollView.scrollToSpy).toHaveBeenCalled();\n    });\n  });\n});\n\n});"],"mappings":"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","ignoreList":[]}