43d07d8e20d88225880dd67b33d69f51
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactNative = require("@testing-library/react-native");
var _useQuizEngine = _interopRequireDefault(require("../../src/hooks/useQuizEngine"));
describe('useQuizEngine', function () {
  var mockQuestions = [{
    word: 'hello',
    choices: ['bonjour', 'au revoir', 'merci', 'salut'],
    correctAnswer: 'bonjour'
  }, {
    word: 'goodbye',
    choices: ['au revoir', 'bonjour', 'merci', 'salut'],
    correctAnswer: 'au revoir'
  }];
  it('devrait initialiser correctement avec des questions', function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useQuizEngine.default)(mockQuestions);
      }),
      result = _renderHook.result;
    expect(result.current.currentQuestionIndex).toBe(0);
    expect(result.current.score).toBe(0);
    expect(result.current.selectedChoice).toBeNull();
    expect(result.current.showResult).toBe(false);
    expect(result.current.isFinished).toBe(false);
    expect(result.current.totalQuestions).toBe(2);
    expect(result.current.currentQuestion).toEqual(mockQuestions[0]);
    expect(result.current.progress).toBe(0);
    expect(result.current.userAnswers).toEqual([]);
  });
  it('devrait gérer correctement un quiz vide', function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useQuizEngine.default)([]);
      }),
      result = _renderHook2.result;
    expect(result.current.totalQuestions).toBe(0);
    expect(result.current.currentQuestion).toBeNull();
    expect(result.current.progress).toBe(0);
    expect(result.current.isFinished).toBe(false);
  });
  it('devrait traiter une réponse correcte', function () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useQuizEngine.default)(mockQuestions);
      }),
      result = _renderHook3.result;
    (0, _reactNative.act)(function () {
      var isCorrect = result.current.handleAnswer('bonjour');
      expect(isCorrect).toBe(true);
    });
    expect(result.current.score).toBe(1);
    expect(result.current.selectedChoice).toBe('bonjour');
    expect(result.current.showResult).toBe(true);
    expect(result.current.userAnswers).toHaveLength(1);
    expect(result.current.userAnswers[0].isCorrect).toBe(true);
  });
  it('devrait traiter une réponse incorrecte', function () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useQuizEngine.default)(mockQuestions);
      }),
      result = _renderHook4.result;
    (0, _reactNative.act)(function () {
      var isCorrect = result.current.handleAnswer('au revoir');
      expect(isCorrect).toBe(false);
    });
    expect(result.current.score).toBe(0);
    expect(result.current.selectedChoice).toBe('au revoir');
    expect(result.current.showResult).toBe(true);
    expect(result.current.userAnswers).toHaveLength(1);
    expect(result.current.userAnswers[0].isCorrect).toBe(false);
  });
  it('devrait passer à la question suivante', function () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useQuizEngine.default)(mockQuestions);
      }),
      result = _renderHook5.result;
    (0, _reactNative.act)(function () {
      result.current.handleAnswer('bonjour');
      result.current.goToNextQuestion();
    });
    expect(result.current.currentQuestionIndex).toBe(1);
    expect(result.current.currentQuestion).toEqual(mockQuestions[1]);
    expect(result.current.selectedChoice).toBeNull();
    expect(result.current.showResult).toBe(false);
  });
  it('devrait marquer le quiz comme terminé après la dernière question', function () {
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useQuizEngine.default)(mockQuestions);
      }),
      result = _renderHook6.result;
    (0, _reactNative.act)(function () {
      result.current.handleAnswer('bonjour');
      result.current.goToNextQuestion();
      result.current.handleAnswer('au revoir');
      result.current.goToNextQuestion();
    });
    expect(result.current.isFinished).toBe(true);
    expect(result.current.currentQuestion).toBeNull();
  });
  it('devrait retourner false si handleAnswer est appelé avec un quiz vide', function () {
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useQuizEngine.default)([]);
      }),
      result = _renderHook7.result;
    var isCorrect = result.current.handleAnswer('bonjour');
    expect(isCorrect).toBe(false);
  });
  it('devrait retourner false si handleAnswer est appelé après la dernière question', function () {
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useQuizEngine.default)(mockQuestions);
      }),
      result = _renderHook8.result;
    (0, _reactNative.act)(function () {
      result.current.handleAnswer('bonjour');
      result.current.goToNextQuestion();
      result.current.handleAnswer('au revoir');
      result.current.goToNextQuestion();
    });
    var isCorrect = result.current.handleAnswer('merci');
    expect(isCorrect).toBe(false);
  });
  it('devrait redémarrer le quiz correctement', function () {
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useQuizEngine.default)(mockQuestions);
      }),
      result = _renderHook9.result;
    (0, _reactNative.act)(function () {
      result.current.handleAnswer('bonjour');
      result.current.goToNextQuestion();
      result.current.handleRestart();
    });
    expect(result.current.currentQuestionIndex).toBe(0);
    expect(result.current.score).toBe(0);
    expect(result.current.selectedChoice).toBeNull();
    expect(result.current.showResult).toBe(false);
    expect(result.current.isFinished).toBe(false);
    expect(result.current.userAnswers).toEqual([]);
    expect(result.current.currentQuestion).toEqual(mockQuestions[0]);
  });
  it('devrait empêcher les réponses multiples sur la même question', function () {
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _useQuizEngine.default)(mockQuestions);
      }),
      result = _renderHook0.result;
    (0, _reactNative.act)(function () {
      result.current.handleAnswer('bonjour');
      var secondAttempt = result.current.handleAnswer('salut');
      expect(secondAttempt).toBe(false);
    });
    expect(result.current.score).toBe(1);
    expect(result.current.userAnswers).toHaveLength(1);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,