40de9cae1cd43dc2074665c5a2f56b81
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _HeroCard = _interopRequireDefault(require("../../../../components/ui/HeroCard"));
var _ContentSection = _interopRequireDefault(require("../../../../components/ui/ContentSection"));
var _NavigationButtons = _interopRequireDefault(require("../../../../components/exercise-common/NavigationButtons"));
var _wordGamesStats = require("../../../../utils/wordGames/wordGamesStats");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var WordGamesResults = function WordGamesResults(_ref) {
  var _ref$games = _ref.games,
    games = _ref$games === void 0 ? [] : _ref$games,
    _ref$gameResults = _ref.gameResults,
    gameResults = _ref$gameResults === void 0 ? [] : _ref$gameResults,
    _ref$finalScore = _ref.finalScore,
    finalScore = _ref$finalScore === void 0 ? {
      score: 0,
      percentage: 0,
      totalMaxScore: 0
    } : _ref$finalScore,
    _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? "#3b82f6" : _ref$levelColor,
    onPlayAgain = _ref.onPlayAgain,
    onContinue = _ref.onContinue;
  var styles = (0, _style.default)(levelColor);
  if (!finalScore || finalScore.totalMaxScore === 0) {
    return (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
      style: styles.container,
      contentContainerStyle: styles.content,
      children: [(0, _jsxRuntime.jsx)(_HeroCard.default, {
        content: "Games Complete!",
        fontSize: 24,
        levelColor: levelColor,
        showUnderline: true,
        backgroundColor: "white"
      }), (0, _jsxRuntime.jsx)(_ContentSection.default, {
        title: "Word Games",
        content: "All games completed! Thanks for playing!",
        levelColor: levelColor,
        backgroundColor: "#f8fafc"
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.navigationContainer,
        children: (0, _jsxRuntime.jsx)(_NavigationButtons.default, {
          onNext: onContinue,
          disablePrevious: true,
          disableNext: false,
          primaryColor: levelColor,
          isLast: true,
          buttonLabels: {
            next: "Continue",
            finish: "Continue"
          }
        })
      })]
    });
  }
  var performance = (0, _wordGamesStats.getPerformanceLevel)(finalScore.percentage);
  var gameTypeStats = (0, _wordGamesStats.calculateGameTypeStats)({
    games: games
  }, gameResults);
  var feedbackMessage = (0, _wordGamesStats.generateFeedbackMessage)(finalScore, gameTypeStats);
  return (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
    style: styles.container,
    contentContainerStyle: styles.content,
    showsVerticalScrollIndicator: false,
    children: [(0, _jsxRuntime.jsx)(_HeroCard.default, {
      content: `${Math.round(finalScore.percentage)}%`,
      fontSize: 56,
      levelColor: performance.color,
      showUnderline: false,
      backgroundColor: `${performance.color}10`,
      padding: 32,
      subtitle: `${finalScore.score}/${finalScore.totalMaxScore} points`
    }), (0, _jsxRuntime.jsx)(_ContentSection.default, {
      title: "Your Performance",
      content: `${performance.message}\n\n${performance.description}`,
      levelColor: performance.color,
      backgroundColor: `${performance.color}05`,
      icon: performance.message.split(' ')[0]
    }), games.length > 0 && (0, _jsxRuntime.jsx)(_ContentSection.default, {
      title: "Games Review",
      content: games.map(function (game, index) {
        var result = gameResults[index] || {
          score: 0,
          maxScore: 0
        };
        var gameType = game.type.charAt(0).toUpperCase() + game.type.slice(1);
        return `${gameType}: ${result.score}/${result.maxScore}`;
      }).join('\n'),
      levelColor: "#6366f1",
      backgroundColor: "white",
      isMonospace: true
    }), gameTypeStats.length > 1 && (0, _jsxRuntime.jsx)(_ContentSection.default, {
      title: "Performance by Game Type",
      content: gameTypeStats.map(function (stat) {
        return `${stat.type}: ${Math.round(stat.percentage)}% (${stat.completedCount}/${stat.gamesCount})`;
      }).join('\n'),
      levelColor: "#8b5cf6",
      backgroundColor: "#f8fafc",
      isItalic: true
    }), feedbackMessage && (0, _jsxRuntime.jsx)(_ContentSection.default, {
      title: "Feedback",
      content: feedbackMessage,
      levelColor: performance.color,
      backgroundColor: `${performance.color}05`
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.navigationContainer,
      children: [onPlayAgain && finalScore.percentage < 80 && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.playAgainContainer,
        children: (0, _jsxRuntime.jsx)(_NavigationButtons.default, {
          onNext: onPlayAgain,
          disablePrevious: true,
          disableNext: false,
          primaryColor: performance.color,
          isLast: false,
          buttonLabels: {
            next: "Play Again"
          }
        })
      }), (0, _jsxRuntime.jsx)(_NavigationButtons.default, {
        onNext: onContinue,
        disablePrevious: true,
        disableNext: false,
        primaryColor: levelColor,
        isLast: true,
        buttonLabels: {
          next: "Continue",
          finish: "Continue"
        }
      })]
    })]
  });
};
var _default = exports.default = WordGamesResults;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX0hlcm9DYXJkIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9Db250ZW50U2VjdGlvbiIsIl9OYXZpZ2F0aW9uQnV0dG9ucyIsIl93b3JkR2FtZXNTdGF0cyIsIl9zdHlsZSIsIl9qc3hSdW50aW1lIiwiV29yZEdhbWVzUmVzdWx0cyIsIl9yZWYiLCJfcmVmJGdhbWVzIiwiZ2FtZXMiLCJfcmVmJGdhbWVSZXN1bHRzIiwiZ2FtZVJlc3VsdHMiLCJfcmVmJGZpbmFsU2NvcmUiLCJmaW5hbFNjb3JlIiwic2NvcmUiLCJwZXJjZW50YWdlIiwidG90YWxNYXhTY29yZSIsIl9yZWYkbGV2ZWxDb2xvciIsImxldmVsQ29sb3IiLCJvblBsYXlBZ2FpbiIsIm9uQ29udGludWUiLCJzdHlsZXMiLCJjcmVhdGVTdHlsZXMiLCJqc3hzIiwiU2Nyb2xsVmlldyIsInN0eWxlIiwiY29udGFpbmVyIiwiY29udGVudENvbnRhaW5lclN0eWxlIiwiY29udGVudCIsImNoaWxkcmVuIiwianN4IiwiZGVmYXVsdCIsImZvbnRTaXplIiwic2hvd1VuZGVybGluZSIsImJhY2tncm91bmRDb2xvciIsInRpdGxlIiwiVmlldyIsIm5hdmlnYXRpb25Db250YWluZXIiLCJvbk5leHQiLCJkaXNhYmxlUHJldmlvdXMiLCJkaXNhYmxlTmV4dCIsInByaW1hcnlDb2xvciIsImlzTGFzdCIsImJ1dHRvbkxhYmVscyIsIm5leHQiLCJmaW5pc2giLCJwZXJmb3JtYW5jZSIsImdldFBlcmZvcm1hbmNlTGV2ZWwiLCJnYW1lVHlwZVN0YXRzIiwiY2FsY3VsYXRlR2FtZVR5cGVTdGF0cyIsImZlZWRiYWNrTWVzc2FnZSIsImdlbmVyYXRlRmVlZGJhY2tNZXNzYWdlIiwic2hvd3NWZXJ0aWNhbFNjcm9sbEluZGljYXRvciIsIk1hdGgiLCJyb3VuZCIsImNvbG9yIiwicGFkZGluZyIsInN1YnRpdGxlIiwibWVzc2FnZSIsImRlc2NyaXB0aW9uIiwiaWNvbiIsInNwbGl0IiwibGVuZ3RoIiwibWFwIiwiZ2FtZSIsImluZGV4IiwicmVzdWx0IiwibWF4U2NvcmUiLCJnYW1lVHlwZSIsInR5cGUiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwiam9pbiIsImlzTW9ub3NwYWNlIiwic3RhdCIsImNvbXBsZXRlZENvdW50IiwiZ2FtZXNDb3VudCIsImlzSXRhbGljIiwicGxheUFnYWluQ29udGFpbmVyIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gV29yZEdhbWVzUmVzdWx0cy9pbmRleC5qcyAtIFZFUlNJT04gUkVGQUNUT1JJU8OJRSBhdmVjIGNvbXBvc2FudHMgZ8OpbsOpcmlxdWVzXHJcblxyXG5pbXBvcnQgeyBWaWV3LCBTY3JvbGxWaWV3IH0gZnJvbSBcInJlYWN0LW5hdGl2ZVwiO1xyXG5pbXBvcnQgSGVyb0NhcmQgZnJvbSBcIi4uLy4uLy4uLy4uL2NvbXBvbmVudHMvdWkvSGVyb0NhcmRcIjtcclxuaW1wb3J0IENvbnRlbnRTZWN0aW9uIGZyb20gXCIuLi8uLi8uLi8uLi9jb21wb25lbnRzL3VpL0NvbnRlbnRTZWN0aW9uXCI7XHJcbmltcG9ydCBOYXZpZ2F0aW9uQnV0dG9ucyBmcm9tIFwiLi4vLi4vLi4vLi4vY29tcG9uZW50cy9leGVyY2lzZS1jb21tb24vTmF2aWdhdGlvbkJ1dHRvbnNcIjtcclxuaW1wb3J0IHsgZ2V0UGVyZm9ybWFuY2VMZXZlbCwgZ2VuZXJhdGVGZWVkYmFja01lc3NhZ2UsIGNhbGN1bGF0ZUdhbWVUeXBlU3RhdHMgfSBmcm9tIFwiLi4vLi4vLi4vLi4vdXRpbHMvd29yZEdhbWVzL3dvcmRHYW1lc1N0YXRzXCI7XHJcbmltcG9ydCBjcmVhdGVTdHlsZXMgZnJvbSBcIi4vc3R5bGVcIjtcclxuXHJcbi8qKlxyXG4gKiDwn4+GIFdvcmRHYW1lc1Jlc3VsdHMgLSBWZXJzaW9uIFJlZmFjdG9yaXPDqWUgYXZlYyBjb21wb3NhbnRzIGfDqW7DqXJpcXVlc1xyXG4gKiAxNTArIGxpZ25lcyDihpIgNzAgbGlnbmVzICgtNTMlIGRlIGNvZGUpXHJcbiAqIFV0aWxpc2UgSGVyb0NhcmQgKyBDb250ZW50U2VjdGlvbiArIE5hdmlnYXRpb25CdXR0b25zXHJcbiAqIFxyXG4gKiBAcGFyYW0ge2FycmF5fSBnYW1lcyAtIExpc3RlIGRlcyBqZXV4IGpvdcOpc1xyXG4gKiBAcGFyYW0ge2FycmF5fSBnYW1lUmVzdWx0cyAtIFLDqXN1bHRhdHMgZGUgY2hhcXVlIGpldVxyXG4gKiBAcGFyYW0ge29iamVjdH0gZmluYWxTY29yZSAtIFNjb3JlIGZpbmFsIHtzY29yZSwgcGVyY2VudGFnZSwgdG90YWxNYXhTY29yZX1cclxuICogQHBhcmFtIHtzdHJpbmd9IGxldmVsQ29sb3IgLSBDb3VsZXVyIGR1IG5pdmVhdVxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBvblBsYXlBZ2FpbiAtIEZvbmN0aW9uIHBvdXIgcmVqb3VlclxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBvbkNvbnRpbnVlIC0gRm9uY3Rpb24gcG91ciBjb250aW51ZXJcclxuICovXHJcbmNvbnN0IFdvcmRHYW1lc1Jlc3VsdHMgPSAoe1xyXG4gIGdhbWVzID0gW10sXHJcbiAgZ2FtZVJlc3VsdHMgPSBbXSxcclxuICBmaW5hbFNjb3JlID0geyBzY29yZTogMCwgcGVyY2VudGFnZTogMCwgdG90YWxNYXhTY29yZTogMCB9LFxyXG4gIGxldmVsQ29sb3IgPSBcIiMzYjgyZjZcIixcclxuICBvblBsYXlBZ2FpbixcclxuICBvbkNvbnRpbnVlLFxyXG59KSA9PiB7XHJcbiAgY29uc3Qgc3R5bGVzID0gY3JlYXRlU3R5bGVzKGxldmVsQ29sb3IpO1xyXG5cclxuICAvLyBGYWxsYmFjayBzaSBwYXMgZGUgc2NvcmVcclxuICBpZiAoIWZpbmFsU2NvcmUgfHwgZmluYWxTY29yZS50b3RhbE1heFNjb3JlID09PSAwKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8U2Nyb2xsVmlldyBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn0gY29udGVudENvbnRhaW5lclN0eWxlPXtzdHlsZXMuY29udGVudH0+XHJcbiAgICAgICAgey8qIPCfjq8gSEVSTyAtIFRpdHJlIHNpbXBsZSAqL31cclxuICAgICAgICA8SGVyb0NhcmQgXHJcbiAgICAgICAgICBjb250ZW50PVwiR2FtZXMgQ29tcGxldGUhXCJcclxuICAgICAgICAgIGZvbnRTaXplPXsyNH1cclxuICAgICAgICAgIGxldmVsQ29sb3I9e2xldmVsQ29sb3J9XHJcbiAgICAgICAgICBzaG93VW5kZXJsaW5lXHJcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I9XCJ3aGl0ZVwiXHJcbiAgICAgICAgLz5cclxuXHJcbiAgICAgICAgey8qIPCfk50gTUVTU0FHRSBTSU1QTEUgKi99XHJcbiAgICAgICAgPENvbnRlbnRTZWN0aW9uXHJcbiAgICAgICAgICB0aXRsZT1cIldvcmQgR2FtZXNcIlxyXG4gICAgICAgICAgY29udGVudD1cIkFsbCBnYW1lcyBjb21wbGV0ZWQhIFRoYW5rcyBmb3IgcGxheWluZyFcIlxyXG4gICAgICAgICAgbGV2ZWxDb2xvcj17bGV2ZWxDb2xvcn1cclxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcj1cIiNmOGZhZmNcIlxyXG4gICAgICAgIC8+XHJcblxyXG4gICAgICAgIHsvKiDwn5qAIE5BVklHQVRJT04gKi99XHJcbiAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5uYXZpZ2F0aW9uQ29udGFpbmVyfT5cclxuICAgICAgICAgIDxOYXZpZ2F0aW9uQnV0dG9uc1xyXG4gICAgICAgICAgICBvbk5leHQ9e29uQ29udGludWV9XHJcbiAgICAgICAgICAgIGRpc2FibGVQcmV2aW91c1xyXG4gICAgICAgICAgICBkaXNhYmxlTmV4dD17ZmFsc2V9XHJcbiAgICAgICAgICAgIHByaW1hcnlDb2xvcj17bGV2ZWxDb2xvcn1cclxuICAgICAgICAgICAgaXNMYXN0XHJcbiAgICAgICAgICAgIGJ1dHRvbkxhYmVscz17e1xyXG4gICAgICAgICAgICAgIG5leHQ6IFwiQ29udGludWVcIixcclxuICAgICAgICAgICAgICBmaW5pc2g6IFwiQ29udGludWVcIlxyXG4gICAgICAgICAgICB9fVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICA8L1ZpZXc+XHJcbiAgICAgIDwvU2Nyb2xsVmlldz5cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvLyBDYWxjdWxzIHBvdXIgbCdhZmZpY2hhZ2VcclxuICBjb25zdCBwZXJmb3JtYW5jZSA9IGdldFBlcmZvcm1hbmNlTGV2ZWwoZmluYWxTY29yZS5wZXJjZW50YWdlKTtcclxuICBjb25zdCBnYW1lVHlwZVN0YXRzID0gY2FsY3VsYXRlR2FtZVR5cGVTdGF0cyh7IGdhbWVzIH0sIGdhbWVSZXN1bHRzKTtcclxuICBjb25zdCBmZWVkYmFja01lc3NhZ2UgPSBnZW5lcmF0ZUZlZWRiYWNrTWVzc2FnZShmaW5hbFNjb3JlLCBnYW1lVHlwZVN0YXRzKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxTY3JvbGxWaWV3IFxyXG4gICAgICBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn0gXHJcbiAgICAgIGNvbnRlbnRDb250YWluZXJTdHlsZT17c3R5bGVzLmNvbnRlbnR9XHJcbiAgICAgIHNob3dzVmVydGljYWxTY3JvbGxJbmRpY2F0b3I9e2ZhbHNlfVxyXG4gICAgPlxyXG4gICAgICB7Lyog8J+OryBIRVJPIC0gU2NvcmUgcHJpbmNpcGFsIHNwZWN0YWN1bGFpcmUgKi99XHJcbiAgICAgIDxIZXJvQ2FyZCBcclxuICAgICAgICBjb250ZW50PXtgJHtNYXRoLnJvdW5kKGZpbmFsU2NvcmUucGVyY2VudGFnZSl9JWB9XHJcbiAgICAgICAgZm9udFNpemU9ezU2fVxyXG4gICAgICAgIGxldmVsQ29sb3I9e3BlcmZvcm1hbmNlLmNvbG9yfVxyXG4gICAgICAgIHNob3dVbmRlcmxpbmU9e2ZhbHNlfVxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcj17YCR7cGVyZm9ybWFuY2UuY29sb3J9MTBgfVxyXG4gICAgICAgIHBhZGRpbmc9ezMyfVxyXG4gICAgICAgIHN1YnRpdGxlPXtgJHtmaW5hbFNjb3JlLnNjb3JlfS8ke2ZpbmFsU2NvcmUudG90YWxNYXhTY29yZX0gcG9pbnRzYH1cclxuICAgICAgLz5cclxuXHJcbiAgICAgIHsvKiDwn46tIE1FU1NBR0UgREUgUEVSRk9STUFOQ0UgKi99XHJcbiAgICAgIDxDb250ZW50U2VjdGlvblxyXG4gICAgICAgIHRpdGxlPVwiWW91ciBQZXJmb3JtYW5jZVwiXHJcbiAgICAgICAgY29udGVudD17YCR7cGVyZm9ybWFuY2UubWVzc2FnZX1cXG5cXG4ke3BlcmZvcm1hbmNlLmRlc2NyaXB0aW9ufWB9XHJcbiAgICAgICAgbGV2ZWxDb2xvcj17cGVyZm9ybWFuY2UuY29sb3J9XHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yPXtgJHtwZXJmb3JtYW5jZS5jb2xvcn0wNWB9XHJcbiAgICAgICAgaWNvbj17cGVyZm9ybWFuY2UubWVzc2FnZS5zcGxpdCgnICcpWzBdfSAvLyBSw6ljdXDDqHJlIGwnZW1vamlcclxuICAgICAgLz5cclxuXHJcbiAgICAgIHsvKiDwn5OKIFNUQVRJU1RJUVVFUyBEw4lUQUlMTMOJRVMgKi99XHJcbiAgICAgIHtnYW1lcy5sZW5ndGggPiAwICYmIChcclxuICAgICAgICA8Q29udGVudFNlY3Rpb25cclxuICAgICAgICAgIHRpdGxlPVwiR2FtZXMgUmV2aWV3XCJcclxuICAgICAgICAgIGNvbnRlbnQ9e2dhbWVzLm1hcCgoZ2FtZSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gZ2FtZVJlc3VsdHNbaW5kZXhdIHx8IHsgc2NvcmU6IDAsIG1heFNjb3JlOiAwIH07XHJcbiAgICAgICAgICAgIGNvbnN0IGdhbWVUeXBlID0gZ2FtZS50eXBlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgZ2FtZS50eXBlLnNsaWNlKDEpO1xyXG4gICAgICAgICAgICByZXR1cm4gYCR7Z2FtZVR5cGV9OiAke3Jlc3VsdC5zY29yZX0vJHtyZXN1bHQubWF4U2NvcmV9YDtcclxuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpfVxyXG4gICAgICAgICAgbGV2ZWxDb2xvcj1cIiM2MzY2ZjFcIlxyXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yPVwid2hpdGVcIlxyXG4gICAgICAgICAgaXNNb25vc3BhY2VcclxuICAgICAgICAvPlxyXG4gICAgICApfVxyXG5cclxuICAgICAgey8qIPCfk4ggQU5BTFlTRSBQQVIgVFlQRSBERSBKRVUgKi99XHJcbiAgICAgIHtnYW1lVHlwZVN0YXRzLmxlbmd0aCA+IDEgJiYgKFxyXG4gICAgICAgIDxDb250ZW50U2VjdGlvblxyXG4gICAgICAgICAgdGl0bGU9XCJQZXJmb3JtYW5jZSBieSBHYW1lIFR5cGVcIlxyXG4gICAgICAgICAgY29udGVudD17Z2FtZVR5cGVTdGF0cy5tYXAoc3RhdCA9PiBcclxuICAgICAgICAgICAgYCR7c3RhdC50eXBlfTogJHtNYXRoLnJvdW5kKHN0YXQucGVyY2VudGFnZSl9JSAoJHtzdGF0LmNvbXBsZXRlZENvdW50fS8ke3N0YXQuZ2FtZXNDb3VudH0pYFxyXG4gICAgICAgICAgKS5qb2luKCdcXG4nKX1cclxuICAgICAgICAgIGxldmVsQ29sb3I9XCIjOGI1Y2Y2XCJcclxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcj1cIiNmOGZhZmNcIlxyXG4gICAgICAgICAgaXNJdGFsaWNcclxuICAgICAgICAvPlxyXG4gICAgICApfVxyXG5cclxuICAgICAgey8qIPCfkqEgRkVFREJBQ0sgUEVSU09OTkFMSVPDiSAqL31cclxuICAgICAge2ZlZWRiYWNrTWVzc2FnZSAmJiAoXHJcbiAgICAgICAgPENvbnRlbnRTZWN0aW9uXHJcbiAgICAgICAgICB0aXRsZT1cIkZlZWRiYWNrXCJcclxuICAgICAgICAgIGNvbnRlbnQ9e2ZlZWRiYWNrTWVzc2FnZX1cclxuICAgICAgICAgIGxldmVsQ29sb3I9e3BlcmZvcm1hbmNlLmNvbG9yfVxyXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yPXtgJHtwZXJmb3JtYW5jZS5jb2xvcn0wNWB9XHJcbiAgICAgICAgLz5cclxuICAgICAgKX1cclxuXHJcbiAgICAgIHsvKiDwn5qAIE5BVklHQVRJT04gLSBCb3V0b25zIGQnYWN0aW9uICovfVxyXG4gICAgICA8VmlldyBzdHlsZT17c3R5bGVzLm5hdmlnYXRpb25Db250YWluZXJ9PlxyXG4gICAgICAgIHsvKiBCb3V0b24gUGxheSBBZ2FpbiBjb25kaXRpb25uZWwgKi99XHJcbiAgICAgICAge29uUGxheUFnYWluICYmIGZpbmFsU2NvcmUucGVyY2VudGFnZSA8IDgwICYmIChcclxuICAgICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMucGxheUFnYWluQ29udGFpbmVyfT5cclxuICAgICAgICAgICAgPE5hdmlnYXRpb25CdXR0b25zXHJcbiAgICAgICAgICAgICAgb25OZXh0PXtvblBsYXlBZ2Fpbn1cclxuICAgICAgICAgICAgICBkaXNhYmxlUHJldmlvdXNcclxuICAgICAgICAgICAgICBkaXNhYmxlTmV4dD17ZmFsc2V9XHJcbiAgICAgICAgICAgICAgcHJpbWFyeUNvbG9yPXtwZXJmb3JtYW5jZS5jb2xvcn1cclxuICAgICAgICAgICAgICBpc0xhc3Q9e2ZhbHNlfVxyXG4gICAgICAgICAgICAgIGJ1dHRvbkxhYmVscz17e1xyXG4gICAgICAgICAgICAgICAgbmV4dDogXCJQbGF5IEFnYWluXCIsXHJcbiAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgIDwvVmlldz5cclxuICAgICAgICApfVxyXG5cclxuICAgICAgICB7LyogQm91dG9uIHByaW5jaXBhbCBDb250aW51ZSAqL31cclxuICAgICAgICA8TmF2aWdhdGlvbkJ1dHRvbnNcclxuICAgICAgICAgIG9uTmV4dD17b25Db250aW51ZX1cclxuICAgICAgICAgIGRpc2FibGVQcmV2aW91c1xyXG4gICAgICAgICAgZGlzYWJsZU5leHQ9e2ZhbHNlfVxyXG4gICAgICAgICAgcHJpbWFyeUNvbG9yPXtsZXZlbENvbG9yfVxyXG4gICAgICAgICAgaXNMYXN0XHJcbiAgICAgICAgICBidXR0b25MYWJlbHM9e3tcclxuICAgICAgICAgICAgbmV4dDogXCJDb250aW51ZVwiLFxyXG4gICAgICAgICAgICBmaW5pc2g6IFwiQ29udGludWVcIlxyXG4gICAgICAgICAgfX1cclxuICAgICAgICAvPlxyXG4gICAgICA8L1ZpZXc+XHJcbiAgICA8L1Njcm9sbFZpZXc+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFdvcmRHYW1lc1Jlc3VsdHM7Il0sIm1hcHBpbmdzIjoiOzs7OztBQUVBLElBQUFBLFlBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFNBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFHLGVBQUEsR0FBQUQsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFJLGtCQUFBLEdBQUFGLHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBSyxlQUFBLEdBQUFMLE9BQUE7QUFDQSxJQUFBTSxNQUFBLEdBQUFKLHNCQUFBLENBQUFGLE9BQUE7QUFBbUMsSUFBQU8sV0FBQSxHQUFBUCxPQUFBO0FBY25DLElBQU1RLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBZ0JBLENBQUFDLElBQUEsRUFPaEI7RUFBQSxJQUFBQyxVQUFBLEdBQUFELElBQUEsQ0FOSkUsS0FBSztJQUFMQSxLQUFLLEdBQUFELFVBQUEsY0FBRyxFQUFFLEdBQUFBLFVBQUE7SUFBQUUsZ0JBQUEsR0FBQUgsSUFBQSxDQUNWSSxXQUFXO0lBQVhBLFdBQVcsR0FBQUQsZ0JBQUEsY0FBRyxFQUFFLEdBQUFBLGdCQUFBO0lBQUFFLGVBQUEsR0FBQUwsSUFBQSxDQUNoQk0sVUFBVTtJQUFWQSxVQUFVLEdBQUFELGVBQUEsY0FBRztNQUFFRSxLQUFLLEVBQUUsQ0FBQztNQUFFQyxVQUFVLEVBQUUsQ0FBQztNQUFFQyxhQUFhLEVBQUU7SUFBRSxDQUFDLEdBQUFKLGVBQUE7SUFBQUssZUFBQSxHQUFBVixJQUFBLENBQzFEVyxVQUFVO0lBQVZBLFVBQVUsR0FBQUQs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