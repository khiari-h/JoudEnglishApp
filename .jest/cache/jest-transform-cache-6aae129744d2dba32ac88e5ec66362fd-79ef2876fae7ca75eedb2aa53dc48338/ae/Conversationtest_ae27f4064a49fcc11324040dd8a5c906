f00496db8ddead3798767d27ad140c78
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
_getJestObj().mock('../../../hooks/useConversation');
_getJestObj().mock('../../../hooks/useLastActivity');
_getJestObj().mock('../../../utils/conversation/conversationDataHelper');
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _expoRouter = require("expo-router");
var _conversations = _interopRequireDefault(require("../../../src/screens/exercises/conversations"));
var _useConversation = _interopRequireDefault(require("./hooks/useConversation"));
var _useLastActivity = _interopRequireDefault(require("../../../hooks/useLastActivity"));
var _conversationDataHelper = require("../../../utils/conversation/conversationDataHelper");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ConversationExercise - Tests Complets', function () {
  var mockSaveActivity = jest.fn();
  var mockChangeScenario = jest.fn();
  var mockSendMessage = jest.fn();
  var mockUseSuggestion = jest.fn();
  var mockToggleHelp = jest.fn();
  var mockToggleDetailedProgress = jest.fn();
  var mockConversationData = {
    exercises: [{
      id: '1',
      title: 'Scénario 1',
      description: 'Description 1'
    }, {
      id: '2',
      title: 'Scénario 2',
      description: 'Description 2'
    }]
  };
  var mockCurrentScenario = {
    title: 'Scénario Test',
    description: 'Description du scénario de test'
  };
  var setupMocks = function setupMocks() {
    var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var defaultMocks = {
      useConversation: Object.assign({
        currentScenarioIndex: 0,
        conversation: [],
        message: '',
        setMessage: jest.fn(),
        isTyping: false,
        suggestions: ['Bonjour', 'Comment allez-vous ?'],
        showHelp: false,
        completedScenarios: [],
        conversationHistory: {},
        loaded: true,
        showDetailedProgress: false,
        currentScenario: mockCurrentScenario,
        totalScenarios: 2,
        hasValidData: true,
        changeScenario: mockChangeScenario,
        sendMessage: mockSendMessage,
        useSuggestion: mockUseSuggestion,
        toggleHelp: mockToggleHelp,
        toggleDetailedProgress: mockToggleDetailedProgress,
        isConversationStarted: true,
        stats: {
          currentStep: 1,
          totalSteps: 5,
          completionProgress: 0.2
        },
        display: {
          currentHelp: 'Aide contextuelle'
        }
      }, overrides.useConversation),
      useLastActivity: Object.assign({
        saveActivity: mockSaveActivity
      }, overrides.useLastActivity),
      getConversationData: mockConversationData,
      getLevelColor: '#007AFF'
    };
    _useConversation.default.mockReturnValue(defaultMocks.useConversation);
    _useLastActivity.default.mockReturnValue(defaultMocks.useLastActivity);
    _conversationDataHelper.getConversationData.mockReturnValue(defaultMocks.getConversationData);
    _conversationDataHelper.getLevelColor.mockReturnValue(defaultMocks.getLevelColor);
  };
  beforeEach(function () {
    jest.clearAllMocks();
    setupMocks();
  });
  describe('Core Functionality', function () {
    it('should render completely and handle all core interactions', (0, _asyncToGenerator2.default)(function* () {
      var route = {
        params: {
          level: 'A1'
        }
      };
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_conversations.default, {
        route: route
      }));
      expect(_reactNative.screen.getByTestId('conversation-header')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('conversation-selector')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('conversation-progress')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('conversation-scenario-description')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('conversation-message-list')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('conversation-suggestions')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('conversation-input')).toBeTruthy();
      expect(mockSaveActivity).toHaveBeenCalledWith({
        title: "Conversations",
        level: "A1",
        type: "conversations",
        metadata: {
          scenario: 0,
          step: 1,
          totalSteps: 5,
          scenarioName: 'Scénario Test',
          totalScenarios: 2
        }
      });
      var backButton = _reactNative.screen.getByTestId('header-back-button');
      _reactNative.fireEvent.press(backButton);
      expect(_expoRouter.router.push).toHaveBeenCalledWith({
        pathname: "/tabs/exerciseSelection",
        params: {
          level: 'A1'
        }
      });
      var scenarioButton = _reactNative.screen.getByTestId('scenario-selector-1');
      _reactNative.fireEvent.press(scenarioButton);
      expect(mockChangeScenario).toHaveBeenCalledWith(1);
      var progressButton = _reactNative.screen.getByTestId('progress-toggle');
      _reactNative.fireEvent.press(progressButton);
      expect(mockToggleDetailedProgress).toHaveBeenCalled();
      var helpButton = _reactNative.screen.getByTestId('help-toggle');
      _reactNative.fireEvent.press(helpButton);
      expect(mockToggleHelp).toHaveBeenCalled();
      var suggestionButton = _reactNative.screen.getByTestId('suggestion-0');
      _reactNative.fireEvent.press(suggestionButton);
      expect(mockUseSuggestion).toHaveBeenCalledWith('Bonjour');
      var sendButton = _reactNative.screen.getByTestId('send-message-button');
      _reactNative.fireEvent.press(sendButton);
      expect(mockSendMessage).toHaveBeenCalled();
    }));
  });
  describe('States and Edge Cases', function () {
    it('should handle all states and edge cases correctly', function () {
      setupMocks({
        useConversation: {
          loaded: false,
          hasValidData: false
        }
      });
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_conversations.default, {
          route: {
            params: {
              level: 'A1'
            }
          }
        })),
        rerender = _render.rerender;
      expect(_reactNative.screen.getByTestId('loading-container')).toBeTruthy();
      expect(_reactNative.screen.queryByTestId('conversation-header')).toBeNull();
      setupMocks();
      rerender((0, _jsxRuntime.jsx)(_conversations.default, {
        route: {}
      }));
      expect(_useConversation.default).toHaveBeenCalledWith(mockConversationData, 'A1');
      rerender((0, _jsxRuntime.jsx)(_conversations.default, {
        route: undefined
      }));
      expect(_useConversation.default).toHaveBeenCalledWith(mockConversationData, 'A1');
      setupMocks({
        useConversation: {
          loaded: true,
          hasValidData: false,
          currentScenario: null
        }
      });
      rerender((0, _jsxRuntime.jsx)(_conversations.default, {
        route: {
          params: {
            level: 'B2'
          }
        }
      }));
      expect(_reactNative.screen.getByTestId('loading-container')).toBeTruthy();
      jest.clearAllMocks();
      setupMocks({
        useConversation: {
          isConversationStarted: false
        }
      });
      rerender((0, _jsxRuntime.jsx)(_conversations.default, {
        route: {
          params: {
            level: 'A1'
          }
        }
      }));
      expect(mockSaveActivity).not.toHaveBeenCalled();
    });
  });
  describe('Performance Optimizations', function () {
    it('should maintain performance optimizations', function () {
      var route = {
        params: {
          level: 'A1'
        }
      };
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_conversations.default, {
          route: route
        })),
        rerender = _render2.rerender;
      var initialCallbacks = {
        changeScenario: mockChangeScenario,
        sendMessage: mockSendMessage,
        useSuggestion: mockUseSuggestion,
        toggleHelp: mockToggleHelp
      };
      rerender((0, _jsxRuntime.jsx)(_conversations.default, {
        route: route
      }));
      expect(mockChangeScenario).toBe(initialCallbacks.changeScenario);
      expect(mockSendMessage).toBe(initialCallbacks.sendMessage);
      rerender((0, _jsxRuntime.jsx)(_conversations.default, {
        route: {
          params: {
            level: 'B1'
          }
        }
      }));
      expect(_conversationDataHelper.getConversationData).toHaveBeenCalledWith('B1');
      expect(_conversationDataHelper.getLevelColor).toHaveBeenCalledWith('B1');
    });
  });
  describe('Hooks Integration', function () {
    it('should integrate correctly with custom hooks', (0, _asyncToGenerator2.default)(function* () {
      var route = {
        params: {
          level: 'C1'
        }
      };
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_conversations.default, {
        route: route
      }));
      expect(_useConversation.default).toHaveBeenCalledWith(mockConversationData, 'C1');
      expect(_useLastActivity.default).toHaveBeenCalled();
      expect(_conversationDataHelper.getConversationData).toHaveBeenCalledWith('C1');
      expect(_conversationDataHelper.getLevelColor).toHaveBeenCalledWith('C1');
      yield (0, _reactNative.waitFor)(function () {
        expect(mockSaveActivity).toHaveBeenCalledWith({
          title: "Conversations",
          level: "C1",
          type: "conversations",
          metadata: {
            scenario: 0,
            step: 1,
            totalSteps: 5,
            scenarioName: 'Scénario Test',
            totalScenarios: 2
          }
        });
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,