5e98eccd16d9f13d3e64ad7fcc5372e8
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _ContentSection = _interopRequireDefault(require("../../../../components/ui/ContentSection"));
var _jsxRuntime = require("react/jsx-runtime");
var GrammarFeedback = function GrammarFeedback(_ref) {
  var isVisible = _ref.isVisible,
    isCorrect = _ref.isCorrect,
    explanation = _ref.explanation,
    correctAnswer = _ref.correctAnswer,
    attempts = _ref.attempts;
  if (!isVisible) return null;
  var formatCorrectAnswer = function formatCorrectAnswer() {
    if (!correctAnswer) return "";
    if (typeof correctAnswer === "string" && correctAnswer.includes("/")) {
      return correctAnswer.split("/").map(function (ans) {
        return ans.trim();
      }).join(" ou ");
    }
    return correctAnswer;
  };
  var getTitle = function getTitle() {
    if (isCorrect) return "Correct!";
    return attempts === 1 ? "Try Again!" : "Incorrect!";
  };
  var getContent = function getContent() {
    if (isCorrect) {
      return explanation || "Well done! ðŸŽ‰";
    }
    if (attempts > 1) {
      return `The correct answer is: ${formatCorrectAnswer()}`;
    }
    return "You can try once more. Check spelling and punctuation or try another formulation.";
  };
  var levelColor = isCorrect ? "#10B981" : "#EF4444";
  var backgroundColor = isCorrect ? "#F0FDF4" : "#FEF2F2";
  return (0, _jsxRuntime.jsx)(_ContentSection.default, {
    title: getTitle(),
    content: getContent(),
    levelColor: levelColor,
    backgroundColor: backgroundColor,
    showIcon: true,
    isItalic: false
  });
};
GrammarFeedback.propTypes = {
  isVisible: _propTypes.default.bool.isRequired,
  isCorrect: _propTypes.default.bool.isRequired,
  explanation: _propTypes.default.string,
  correctAnswer: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  attempts: _propTypes.default.number.isRequired
};
GrammarFeedback.defaultProps = {
  explanation: null,
  correctAnswer: null
};
var _default = exports.default = GrammarFeedback;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcHJvcFR5cGVzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfQ29udGVudFNlY3Rpb24iLCJfanN4UnVudGltZSIsIkdyYW1tYXJGZWVkYmFjayIsIl9yZWYiLCJpc1Zpc2libGUiLCJpc0NvcnJlY3QiLCJleHBsYW5hdGlvbiIsImNvcnJlY3RBbnN3ZXIiLCJhdHRlbXB0cyIsImZvcm1hdENvcnJlY3RBbnN3ZXIiLCJpbmNsdWRlcyIsInNwbGl0IiwibWFwIiwiYW5zIiwidHJpbSIsImpvaW4iLCJnZXRUaXRsZSIsImdldENvbnRlbnQiLCJsZXZlbENvbG9yIiwiYmFja2dyb3VuZENvbG9yIiwianN4IiwiZGVmYXVsdCIsInRpdGxlIiwiY29udGVudCIsInNob3dJY29uIiwiaXNJdGFsaWMiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJib29sIiwiaXNSZXF1aXJlZCIsInN0cmluZyIsIm9uZU9mVHlwZSIsIm51bWJlciIsImRlZmF1bHRQcm9wcyIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdyYW1tYXJGZWVkYmFjay9pbmRleC5qcyAtIFZFUlNJT04gUkVGQUNUT1JJU8OJRSBhdmVjIENvbnRlbnRTZWN0aW9uIGV0IFByb3BUeXBlc1xyXG5cclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuaW1wb3J0IENvbnRlbnRTZWN0aW9uIGZyb20gXCIuLi8uLi8uLi8uLi9jb21wb25lbnRzL3VpL0NvbnRlbnRTZWN0aW9uXCI7XHJcblxyXG4vKipcclxuICog8J+SrCBHcmFtbWFyRmVlZGJhY2sgLSBWZXJzaW9uIFJlZmFjdG9yaXPDqWUgYXZlYyBDb250ZW50U2VjdGlvbiBnw6luw6lyaXF1ZVxyXG4gKiA3NSBsaWduZXMg4oaSIDE1IGxpZ25lcyAoLTgwJSBkZSBjb2RlKVxyXG4gKiBEZXNpZ24gbW9kZXJuZSBldCBjb2jDqXJlbnQgYXZlYyBsZSByZXN0ZSBkZSBsJ2FwcFxyXG4gKiDDiXRhdHMgdmlzdWVscyDDqWzDqWdhbnRzIChjb3JyZWN0L2luY29ycmVjdClcclxuICogXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNWaXNpYmxlIC0gU2kgbGUgZmVlZGJhY2sgZXN0IHZpc2libGVcclxuICogQHBhcmFtIHtib29sZWFufSBpc0NvcnJlY3QgLSBTaSBsYSByw6lwb25zZSBlc3QgY29ycmVjdGVcclxuICogQHBhcmFtIHtzdHJpbmd9IGV4cGxhbmF0aW9uIC0gRXhwbGljYXRpb24gZGUgbGEgcsOoZ2xlXHJcbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gY29ycmVjdEFuc3dlciAtIFLDqXBvbnNlIGNvcnJlY3RlXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBhdHRlbXB0cyAtIE5vbWJyZSBkZSB0ZW50YXRpdmVzXHJcbiAqL1xyXG5jb25zdCBHcmFtbWFyRmVlZGJhY2sgPSAoe1xyXG4gIGlzVmlzaWJsZSxcclxuICBpc0NvcnJlY3QsXHJcbiAgZXhwbGFuYXRpb24sXHJcbiAgY29ycmVjdEFuc3dlcixcclxuICBhdHRlbXB0cyxcclxufSkgPT4ge1xyXG4gIGlmICghaXNWaXNpYmxlKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgLy8gRm9ybWF0ZXIgbGEgcsOpcG9uc2UgY29ycmVjdGUgcG91ciBsJ2FmZmljaGFnZVxyXG4gIGNvbnN0IGZvcm1hdENvcnJlY3RBbnN3ZXIgPSAoKSA9PiB7XHJcbiAgICBpZiAoIWNvcnJlY3RBbnN3ZXIpIHJldHVybiBcIlwiO1xyXG5cclxuICAgIC8vIFNpIGxhIHLDqXBvbnNlIGNvbnRpZW50IGRlcyBhbHRlcm5hdGl2ZXMgKHPDqXBhcsOpZXMgcGFyIGRlcyAvKVxyXG4gICAgaWYgKHR5cGVvZiBjb3JyZWN0QW5zd2VyID09PSBcInN0cmluZ1wiICYmIGNvcnJlY3RBbnN3ZXIuaW5jbHVkZXMoXCIvXCIpKSB7XHJcbiAgICAgIHJldHVybiBjb3JyZWN0QW5zd2VyXHJcbiAgICAgICAgLnNwbGl0KFwiL1wiKVxyXG4gICAgICAgIC5tYXAoKGFucykgPT4gYW5zLnRyaW0oKSlcclxuICAgICAgICAuam9pbihcIiBvdSBcIik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNvcnJlY3RBbnN3ZXI7XHJcbiAgfTtcclxuXHJcbiAgLy8gRMOpdGVybWluZXIgbGUgdGl0cmUgc2Vsb24gbGUgY29udGV4dGVcclxuICBjb25zdCBnZXRUaXRsZSA9ICgpID0+IHtcclxuICAgIGlmIChpc0NvcnJlY3QpIHJldHVybiBcIkNvcnJlY3QhXCI7XHJcbiAgICByZXR1cm4gYXR0ZW1wdHMgPT09IDEgPyBcIlRyeSBBZ2FpbiFcIiA6IFwiSW5jb3JyZWN0IVwiO1xyXG4gIH07XHJcblxyXG4gIC8vIETDqXRlcm1pbmVyIGxlIGNvbnRlbnUgc2Vsb24gbGUgY29udGV4dGVcclxuICBjb25zdCBnZXRDb250ZW50ID0gKCkgPT4ge1xyXG4gICAgaWYgKGlzQ29ycmVjdCkge1xyXG4gICAgICByZXR1cm4gZXhwbGFuYXRpb24gfHwgXCJXZWxsIGRvbmUhIPCfjolcIjtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKGF0dGVtcHRzID4gMSkge1xyXG4gICAgICByZXR1cm4gYFRoZSBjb3JyZWN0IGFuc3dlciBpczogJHtmb3JtYXRDb3JyZWN0QW5zd2VyKCl9YDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIFwiWW91IGNhbiB0cnkgb25jZSBtb3JlLiBDaGVjayBzcGVsbGluZyBhbmQgcHVuY3R1YXRpb24gb3IgdHJ5IGFub3RoZXIgZm9ybXVsYXRpb24uXCI7XHJcbiAgfTtcclxuXHJcbiAgLy8gQ291bGV1ciBzZWxvbiBsJ8OpdGF0XHJcbiAgY29uc3QgbGV2ZWxDb2xvciA9IGlzQ29ycmVjdCA/IFwiIzEwQjk4MVwiIDogXCIjRUY0NDQ0XCI7XHJcbiAgY29uc3QgYmFja2dyb3VuZENvbG9yID0gaXNDb3JyZWN0ID8gXCIjRjBGREY0XCIgOiBcIiNGRUYyRjJcIjtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxDb250ZW50U2VjdGlvblxyXG4gICAgICB0aXRsZT17Z2V0VGl0bGUoKX1cclxuICAgICAgY29udGVudD17Z2V0Q29udGVudCgpfVxyXG4gICAgICBsZXZlbENvbG9yPXtsZXZlbENvbG9yfVxyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I9e2JhY2tncm91bmRDb2xvcn1cclxuICAgICAgc2hvd0ljb25cclxuICAgICAgaXNJdGFsaWM9e2ZhbHNlfVxyXG4gICAgLz5cclxuICApO1xyXG59O1xyXG5cclxuLy8g4pyFIFByb3BUeXBlcyAtIENvcnJpZ2UgdG91dGVzIGxlcyBlcnJldXJzIGRlIHZhbGlkYXRpb25cclxuR3JhbW1hckZlZWRiYWNrLnByb3BUeXBlcyA9IHtcclxuICBpc1Zpc2libGU6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXHJcbiAgaXNDb3JyZWN0OiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxyXG4gIGV4cGxhbmF0aW9uOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gIGNvcnJlY3RBbnN3ZXI6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xyXG4gICAgUHJvcFR5cGVzLnN0cmluZyxcclxuICAgIFByb3BUeXBlcy5udW1iZXIsXHJcbiAgXSksXHJcbiAgYXR0ZW1wdHM6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcclxufTtcclxuXHJcbi8vIOKchSBWYWxldXJzIHBhciBkw6lmYXV0XHJcbkdyYW1tYXJGZWVkYmFjay5kZWZhdWx0UHJvcHMgPSB7XHJcbiAgZXhwbGFuYXRpb246IG51bGwsXHJcbiAgY29ycmVjdEFuc3dlcjogbnVsbCxcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEdyYW1tYXJGZWVkYmFjazsiXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsSUFBQUEsVUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsZUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQXNFLElBQUFFLFdBQUEsR0FBQUYsT0FBQTtBQWN0RSxJQUFN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