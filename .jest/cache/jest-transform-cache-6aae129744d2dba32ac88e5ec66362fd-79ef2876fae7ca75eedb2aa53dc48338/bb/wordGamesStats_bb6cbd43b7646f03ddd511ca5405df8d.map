{"version":3,"names":["calculateTotalGames","exports","wordGamesData","arguments","length","undefined","games","calculateCompletedGamesCount","completedGames","Object","values","filter","game","completed","calculateTotalScore","gameResults","reduce","total","result","score","calculateMaxPossibleScore","maxScore","calculateTotalProgress","totalGames","completedCount","Math","min","calculateCurrentProgress","currentGameIndex","calculateGameTypeProgress","gamesByType","acc","index","type","indices","push","entries","map","_ref","_ref2","_slicedToArray2","default","data","totalInType","completedInType","_completedGames$index","progress","title","charAt","toUpperCase","slice","round","calculateFinalScore","totalScore","totalMaxScore","sum","percentage","getPerformanceLevel","level","color","message","description","calculateGameTypeStats","statsByType","forEach","gamesCount","stat","assign","completion","calculateCompleteStats","completedGamesCount","totalProgress","currentProgress","finalScore","performance","gameTypeProgress","gameTypeStats","completionRate","averageScore","generateFeedbackMessage","bestType","best","current","worstType","worst","trim"],"sources":["wordGamesStats.js"],"sourcesContent":["// utils/wordGames/wordGamesStats.js\n\n/**\n * 📊 Fonctions utilitaires pour les statistiques de Word Games\n * Pattern identique à vocabularyStats.js et assessmentStats.js\n */\n\n// =================== CALCULS DE BASE ===================\n\n/**\n * Calcule le nombre total de jeux\n */\nexport const calculateTotalGames = (wordGamesData = {}) => {\n  const games = wordGamesData.games || [];\n  return games.length;\n};\n\n/**\n * Calcule le nombre de jeux complétés\n */\nexport const calculateCompletedGamesCount = (completedGames = {}) =>\n  Object.values(completedGames).filter(game => game.completed).length;\n\n/**\n * Calcule le score total obtenu\n */\nexport const calculateTotalScore = (gameResults = []) =>\n  gameResults.reduce((total, result) => total + (result.score || 0), 0);\n\n/**\n * Calcule le score maximum possible\n */\nexport const calculateMaxPossibleScore = (wordGamesData = {}) => {\n  const games = wordGamesData.games || [];\n  return games.reduce((total, game) => total + (game.maxScore || 10), 0);\n};\n\n// =================== CALCULS DE PROGRESSION ===================\n\n/**\n * Calcule la progression totale (pourcentage de jeux complétés)\n */\nexport const calculateTotalProgress = (wordGamesData = {}, completedGames = {}) => {\n  const totalGames = calculateTotalGames(wordGamesData);\n  const completedCount = calculateCompletedGamesCount(completedGames);\n  return totalGames > 0 ? Math.min(100, (completedCount / totalGames) * 100) : 0;\n};\n\n/**\n * Calcule la progression actuelle (basée sur le jeu en cours)\n */\nexport const calculateCurrentProgress = (currentGameIndex = 0, totalGames = 0) => {\n  return totalGames > 0 ? ((currentGameIndex + 1) / totalGames) * 100 : 0;\n};\n\n/**\n * Calcule la progression par type de jeu pour l'expansion ProgressCard\n */\nexport const calculateGameTypeProgress = (wordGamesData = {}, completedGames = {}) => {\n  const games = wordGamesData.games || [];\n  \n  // Grouper par type de jeu\n  const gamesByType = games.reduce((acc, game, index) => {\n    const type = game.type || 'unknown';\n    if (!acc[type]) {\n      acc[type] = { games: [], indices: [] };\n    }\n    acc[type].games.push(game);\n    acc[type].indices.push(index);\n    return acc;\n  }, {});\n\n  // Calculer la progression par type\n  return Object.entries(gamesByType).map(([type, data]) => {\n    const totalInType = data.games.length;\n    const completedInType = data.indices.filter(index => \n      completedGames[index]?.completed\n    ).length;\n    const progress = totalInType > 0 ? (completedInType / totalInType) * 100 : 0;\n\n    return {\n      title: type.charAt(0).toUpperCase() + type.slice(1), // Capitalize\n      totalGames: totalInType,\n      completedGames: completedInType,\n      progress: Math.round(progress)\n    };\n  });\n};\n\n// =================== CALCULS DE SCORE ===================\n\n/**\n * Calcule le score et pourcentage final\n */\nexport const calculateFinalScore = (gameResults = []) => {\n  const totalScore = calculateTotalScore(gameResults);\n  const totalMaxScore = gameResults.reduce((sum, result) => sum + (result.maxScore || 0), 0);\n  \n  return {\n    score: totalScore,\n    maxScore: totalMaxScore,\n    percentage: totalMaxScore > 0 ? (totalScore / totalMaxScore) * 100 : 0\n  };\n};\n\n/**\n * Détermine le niveau de performance basé sur le pourcentage\n */\nexport const getPerformanceLevel = (percentage) => {\n  if (percentage >= 90) return { \n    level: 'perfect', \n    color: '#059669', \n    message: '🏆 Perfect! Outstanding word skills!',\n    description: 'You absolutely nailed it!'\n  };\n  if (percentage >= 80) return { \n    level: 'excellent', \n    color: '#16a34a', \n    message: '🌟 Excellent! Great word mastery!',\n    description: 'You have excellent vocabulary skills!'\n  };\n  if (percentage >= 70) return { \n    level: 'good', \n    color: '#65a30d', \n    message: '👍 Good job! Solid performance!',\n    description: 'Keep up the good work!'\n  };\n  if (percentage >= 60) return { \n    level: 'fair', \n    color: '#ea580c', \n    message: '👌 Not bad! Room for improvement!',\n    description: 'Practice makes perfect!'\n  };\n  if (percentage >= 40) return { \n    level: 'needs_work', \n    color: '#dc2626', \n    message: '📚 Keep practicing!',\n    description: 'Focus on building your vocabulary!'\n  };\n  return { \n    level: 'poor', \n    color: '#b91c1c', \n    message: '💪 Don\\'t give up!',\n    description: 'Everyone starts somewhere. Keep going!'\n  };\n};\n\n/**\n * Calcule les statistiques par type de jeu\n */\nexport const calculateGameTypeStats = (wordGamesData = {}, gameResults = []) => {\n  const games = wordGamesData.games || [];\n  \n  // Grouper les résultats par type\n  const statsByType = {};\n  \n  games.forEach((game, index) => {\n    const type = game.type || 'unknown';\n    const result = gameResults[index] || { score: 0, maxScore: 0 };\n    \n    if (!statsByType[type]) {\n      statsByType[type] = {\n        type,\n        totalScore: 0,\n        totalMaxScore: 0,\n        gamesCount: 0,\n        completedCount: 0\n      };\n    }\n    \n    statsByType[type].totalScore += result.score;\n    statsByType[type].totalMaxScore += result.maxScore;\n    statsByType[type].gamesCount += 1;\n    if (result.completed) {\n      statsByType[type].completedCount += 1;\n    }\n  });\n  \n  // Calculer les pourcentages\n  return Object.values(statsByType).map(stat => ({\n    ...stat,\n    percentage: stat.totalMaxScore > 0 ? (stat.totalScore / stat.totalMaxScore) * 100 : 0,\n    completion: stat.gamesCount > 0 ? (stat.completedCount / stat.gamesCount) * 100 : 0\n  }));\n};\n\n/**\n * Calcule les statistiques complètes pour l'affichage\n */\nexport const calculateCompleteStats = (wordGamesData = {}, gameResults = [], completedGames = {}, currentGameIndex = 0) => {\n  const totalGames = calculateTotalGames(wordGamesData);\n  const completedGamesCount = calculateCompletedGamesCount(completedGames);\n  const totalProgress = calculateTotalProgress(wordGamesData, completedGames);\n  const currentProgress = calculateCurrentProgress(currentGameIndex, totalGames);\n  const finalScore = calculateFinalScore(gameResults);\n  const performance = getPerformanceLevel(finalScore.percentage);\n  const gameTypeProgress = calculateGameTypeProgress(wordGamesData, completedGames);\n  const gameTypeStats = calculateGameTypeStats(wordGamesData, gameResults);\n\n  return {\n    // Statistiques globales\n    totalGames,\n    completedGamesCount,\n    totalProgress,\n    currentProgress,\n    \n    // Score\n    finalScore,\n    performance,\n    \n    // Données par type de jeu\n    gameTypeProgress,\n    gameTypeStats,\n    \n    // Ratios\n    completionRate: totalGames > 0 ? (completedGamesCount / totalGames) * 100 : 0,\n    averageScore: completedGamesCount > 0 ? finalScore.score / completedGamesCount : 0\n  };\n};\n\n/**\n * Génère un message de feedback basé sur les résultats\n */\nexport const generateFeedbackMessage = (finalScore, gameTypeStats) => {\n  const performance = getPerformanceLevel(finalScore.percentage);\n  \n  // Message principal basé sur la performance\n  let message = `${performance.message}\\n\\n`;\n  \n  // Analyse par type de jeu\n  if (gameTypeStats.length > 1) {\n    const bestType = gameTypeStats.reduce((best, current) => \n      current.percentage > best.percentage ? current : best\n    );\n    const worstType = gameTypeStats.reduce((worst, current) => \n      current.percentage < worst.percentage ? current : worst\n    );\n    \n    if (bestType.percentage > worstType.percentage + 20) {\n      message += `You excel at ${bestType.type} games! `;\n      message += `Consider practicing more ${worstType.type} games to improve your overall score.`;\n    }\n  }\n  \n  return message.trim();\n};"],"mappings":"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","ignoreList":[]}