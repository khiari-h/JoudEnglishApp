75448002347a123c192e634dcc9e46a4
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _errorCorrectionB1Full = _interopRequireDefault(require("./categories/errorCorrectionB1Full"));
var _errorCorrectionB1Identify = _interopRequireDefault(require("./categories/errorCorrectionB1Identify"));
var _errorCorrectionB1MultipleChoice = _interopRequireDefault(require("./categories/errorCorrectionB1MultipleChoice"));
var allExercises = [].concat((0, _toConsumableArray2.default)(_errorCorrectionB1Full.default), (0, _toConsumableArray2.default)(_errorCorrectionB1Identify.default), (0, _toConsumableArray2.default)(_errorCorrectionB1MultipleChoice.default));
allExercises.sort(function (a, b) {
  if (a.categoryId !== b.categoryId) {
    return a.categoryId - b.categoryId;
  }
  var typeOrder = {
    'full': 1,
    'identify': 2,
    'multiple_choice': 3
  };
  return typeOrder[a.type] - typeOrder[b.type];
});
var errorCorrectionB1 = {
  level: "B1",
  totalExercises: allExercises.length,
  statistics: {
    full: _errorCorrectionB1Full.default.length,
    identify: _errorCorrectionB1Identify.default.length,
    multiple_choice: _errorCorrectionB1MultipleChoice.default.length,
    byCategory: {
      1: {
        name: "Present Perfect",
        count: 7
      },
      2: {
        name: "Conditionals",
        count: 7
      },
      3: {
        name: "Passive Voice",
        count: 7
      },
      4: {
        name: "Reported Speech",
        count: 8
      },
      5: {
        name: "Relative Clauses",
        count: 7
      }
    }
  },
  categories: [{
    id: 1,
    name: "Present Perfect",
    description: "Present perfect vs past simple, for/since, already/yet/just",
    exerciseCount: 7,
    difficulty: "Intermediate-Advanced",
    color: "#3b82f6",
    topics: ["present perfect formation", "vs past simple", "time expressions", "experience", "duration"],
    commonErrors: ["using with specific past times", "wrong past participle", "confusion with past simple"]
  }, {
    id: 2,
    name: "Conditionals",
    description: "First, second, and mixed conditionals",
    exerciseCount: 7,
    difficulty: "Intermediate-Advanced",
    color: "#10b981",
    topics: ["first conditional", "second conditional", "third conditional", "mixed conditionals", "unless"],
    commonErrors: ["will in if-clause", "wrong verb forms", "mixing conditional types"]
  }, {
    id: 3,
    name: "Passive Voice",
    description: "Passive voice in different tenses and contexts",
    exerciseCount: 7,
    difficulty: "Intermediate-Advanced",
    color: "#f59e0b",
    topics: ["passive formation", "different tenses", "by/with agents", "passive reporting"],
    commonErrors: ["missing be verb", "wrong prepositions", "incorrect past participle"]
  }, {
    id: 4,
    name: "Reported Speech",
    description: "Direct to indirect speech, reporting verbs",
    exerciseCount: 8,
    difficulty: "Intermediate-Advanced",
    color: "#8b5cf6",
    topics: ["tense changes", "pronoun changes", "time/place changes", "reporting questions", "reporting verbs"],
    commonErrors: ["wrong tense changes", "question word order", "incorrect reporting verbs"]
  }, {
    id: 5,
    name: "Relative Clauses",
    description: "Defining and non-defining relative clauses",
    exerciseCount: 7,
    difficulty: "Intermediate-Advanced",
    color: "#ef4444",
    topics: ["who/which/that", "defining vs non-defining", "whose", "where/when", "prepositions"],
    commonErrors: ["wrong relative pronouns", "unnecessary prepositions", "comma usage"]
  }],
  exercises: allExercises,
  getExercisesByCategory: function getExercisesByCategory(categoryId) {
    return allExercises.filter(function (exercise) {
      return exercise.categoryId === categoryId;
    });
  },
  getExercisesByType: function getExercisesByType(type) {
    return allExercises.filter(function (exercise) {
      return exercise.type === type;
    });
  },
  getExercisesByCategoryAndType: function getExercisesByCategoryAndType(categoryId, type) {
    return allExercises.filter(function (exercise) {
      return exercise.categoryId === categoryId && exercise.type === type;
    });
  },
  getExercisesByTopic: function getExercisesByTopic(topic) {
    return allExercises.filter(function (exercise) {
      var category = errorCorrectionB1.categories.find(function (cat) {
        return cat.id === exercise.categoryId;
      });
      return category == null ? void 0 : category.topics.includes(topic);
    });
  },
  getExercisesByErrorType: function getExercisesByErrorType(errorType) {
    return allExercises.filter(function (exercise) {
      var category = errorCorrectionB1.categories.find(function (cat) {
        return cat.id === exercise.categoryId;
      });
      return category == null ? void 0 : category.commonErrors.some(function (error) {
        return error.includes(errorType);
      });
    });
  },
  getAdvancedExercises: function getAdvancedExercises() {
    return allExercises.filter(function (exercise) {
      var wordCount = exercise.text.split(' ').length;
      var errorCount = exercise.errorPositions ? exercise.errorPositions.length : 1;
      return wordCount > 8 || errorCount > 2;
    });
  },
  validateStructure: function validateStructure() {
    var requiredFields = ['categoryId', 'type', 'text', 'correctedText', 'hint', 'explanation'];
    var validTypes = ['full', 'identify', 'multiple_choice'];
    return allExercises.every(function (exercise) {
      var hasRequiredFields = requiredFields.every(function (field) {
        return Object.prototype.hasOwnProperty.call(exercise, field) && exercise[field] !== undefined;
      });
      var hasValidType = validTypes.includes(exercise.type);
      var hasValidCategory = exercise.categoryId >= 1 && exercise.categoryId <= 5;
      var hasMinimumComplexity = exercise.text.split(' ').length >= 6;
      var hasTypeSpecificFields = true;
      if (exercise.type === 'multiple_choice') {
        hasTypeSpecificFields = exercise.choices && Array.isArray(exercise.choices) && exercise.choices.length >= 3 && exercise.correctChoiceIndex !== undefined && exercise.correctChoiceIndex >= 0 && exercise.correctChoiceIndex < exercise.choices.length;
      } else {
        hasTypeSpecificFields = exercise.errorPositions && Array.isArray(exercise.errorPositions);
      }
      return hasRequiredFields && hasValidType && hasValidCategory && hasMinimumComplexity && hasTypeSpecificFields;
    });
  },
  getSummary: function getSummary() {
    var totalErrorPositions = allExercises.filter(function (ex) {
      return ex.errorPositions;
    }).reduce(function (sum, ex) {
      return sum + ex.errorPositions.length;
    }, 0);
    return {
      level: "B1",
      totalExercises: allExercises.length,
      categories: errorCorrectionB1.categories.length,
      difficulty: "Intermediate-Advanced",
      focus: "Complex grammatical structures and tense relationships",
      progression: "Builds on A2 with present perfect, conditionals, passive voice, reported speech, and relative clauses",
      distribution: {
        full: _errorCorrectionB1Full.default.length,
        identify: _errorCorrectionB1Identify.default.length,
        multiple_choice: _errorCorrectionB1MultipleChoice.default.length
      },
      complexity: {
        averageTextLength: Math.round(allExercises.reduce(function (sum, ex) {
          return sum + ex.text.split(' ').length;
        }, 0) / allExercises.length),
        totalErrorPositions: totalErrorPositions,
        averageErrorsPerExercise: Math.round(totalErrorPositions / allExercises.filter(function (ex) {
          return ex.errorPositions;
        }).length * 10) / 10
      }
    };
  }
};
if (!errorCorrectionB1.validateStructure()) {} else {}
var _default = exports.default = errorCorrectionB1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,