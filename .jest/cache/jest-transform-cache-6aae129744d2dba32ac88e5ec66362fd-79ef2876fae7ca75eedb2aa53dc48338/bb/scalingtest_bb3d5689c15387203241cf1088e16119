acfd54084c33e30bea18082d065e97dc
_getJestObj().mock('react-native', function () {
  return {
    Dimensions: {
      get: jest.fn()
    },
    PixelRatio: {
      get: jest.fn()
    }
  };
});
var _reactNative = require("react-native");
var _scaling = require("../../src/utils/scaling");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('scaling', function () {
  beforeEach(function () {
    _reactNative.Dimensions.get.mockReturnValue({
      width: 375,
      height: 667
    });
    _reactNative.PixelRatio.get.mockReturnValue(2);
  });
  afterEach(function () {
    jest.clearAllMocks();
  });
  describe('scale (horizontal)', function () {
    it('devrait retourner la même valeur sur la taille de base', function () {
      _reactNative.Dimensions.get.mockReturnValue({
        width: 375,
        height: 667
      });
      expect((0, _scaling.scale)(10)).toBe(10);
      expect((0, _scaling.scale)(20)).toBe(20);
      expect((0, _scaling.scale)(100)).toBe(100);
    });
    it('devrait scaler correctement sur des écrans plus larges', function () {
      _reactNative.Dimensions.get.mockReturnValue({
        width: 414,
        height: 736
      });
      expect((0, _scaling.scale)(10)).toBeCloseTo(11.04, 1);
      expect((0, _scaling.scale)(20)).toBeCloseTo(22.08, 1);
    });
    it('devrait scaler correctement sur des écrans plus petits', function () {
      _reactNative.Dimensions.get.mockReturnValue({
        width: 320,
        height: 568
      });
      expect((0, _scaling.scale)(10)).toBeCloseTo(8.53, 1);
      expect((0, _scaling.scale)(20)).toBeCloseTo(17.07, 1);
    });
    it('devrait gérer les valeurs nulles et négatives', function () {
      expect((0, _scaling.scale)(0)).toBe(0);
      expect((0, _scaling.scale)(-10)).toBeCloseTo(-10, 1);
    });
    it('devrait gérer les valeurs décimales', function () {
      expect((0, _scaling.scale)(10.5)).toBeCloseTo(10.5, 1);
      expect((0, _scaling.scale)(15.75)).toBeCloseTo(15.75, 1);
    });
  });
  describe('verticalScale', function () {
    it('devrait retourner la même valeur sur la taille de base', function () {
      _reactNative.Dimensions.get.mockReturnValue({
        width: 375,
        height: 667
      });
      expect((0, _scaling.verticalScale)(10)).toBe(10);
      expect((0, _scaling.verticalScale)(20)).toBe(20);
      expect((0, _scaling.verticalScale)(100)).toBe(100);
    });
    it('devrait scaler correctement sur des écrans plus hauts', function () {
      _reactNative.Dimensions.get.mockReturnValue({
        width: 375,
        height: 812
      });
      expect((0, _scaling.verticalScale)(10)).toBeCloseTo(12.17, 1);
      expect((0, _scaling.verticalScale)(20)).toBeCloseTo(24.34, 1);
    });
    it('devrait scaler correctement sur des écrans plus courts', function () {
      _reactNative.Dimensions.get.mockReturnValue({
        width: 320,
        height: 568
      });
      expect((0, _scaling.verticalScale)(10)).toBeCloseTo(8.52, 1);
      expect((0, _scaling.verticalScale)(20)).toBeCloseTo(17.04, 1);
    });
    it('devrait gérer les valeurs nulles et négatives', function () {
      expect((0, _scaling.verticalScale)(0)).toBe(0);
      expect((0, _scaling.verticalScale)(-10)).toBeCloseTo(-10, 1);
    });
  });
  describe('moderateScale', function () {
    it('devrait appliquer un scaling modéré avec facteur par défaut (0.5)', function () {
      _reactNative.Dimensions.get.mockReturnValue({
        width: 414,
        height: 736
      });
      var baseSize = 20;
      var scaledSize = (0, _scaling.scale)(baseSize);
      var expectedModerate = baseSize + (scaledSize - baseSize) * 0.5;
      expect((0, _scaling.moderateScale)(baseSize)).toBeCloseTo(expectedModerate, 1);
    });
    it('devrait respecter le facteur personnalisé', function () {
      _reactNative.Dimensions.get.mockReturnValue({
        width: 414,
        height: 736
      });
      var baseSize = 20;
      var factor = 0.3;
      var scaledSize = (0, _scaling.scale)(baseSize);
      var expectedModerate = baseSize + (scaledSize - baseSize) * factor;
      expect((0, _scaling.moderateScale)(baseSize, factor)).toBeCloseTo(expectedModerate, 1);
    });
    it('devrait retourner la valeur originale avec facteur 0', function () {
      _reactNative.Dimensions.get.mockReturnValue({
        width: 414,
        height: 736
      });
      expect((0, _scaling.moderateScale)(20, 0)).toBe(20);
      expect((0, _scaling.moderateScale)(50, 0)).toBe(50);
    });
    it('devrait retourner le scaling complet avec facteur 1', function () {
      _reactNative.Dimensions.get.mockReturnValue({
        width: 414,
        height: 736
      });
      expect((0, _scaling.moderateScale)(20, 1)).toBeCloseTo((0, _scaling.scale)(20), 1);
      expect((0, _scaling.moderateScale)(50, 1)).toBeCloseTo((0, _scaling.scale)(50), 1);
    });
    it('devrait gérer les facteurs négatifs', function () {
      _reactNative.Dimensions.get.mockReturnValue({
        width: 414,
        height: 736
      });
      var result = (0, _scaling.moderateScale)(20, -0.5);
      expect(result).toBeLessThan(20);
    });
  });
  describe('pixelRound', function () {
    it('devrait arrondir au pixel le plus proche', function () {
      _reactNative.PixelRatio.get.mockReturnValue(2);
      expect((0, _scaling.pixelRound)(10.3)).toBe(10.5);
      expect((0, _scaling.pixelRound)(10.7)).toBe(10.5);
      expect((0, _scaling.pixelRound)(11.0)).toBe(11);
      expect((0, _scaling.pixelRound)(11.3)).toBe(11.5);
    });
    it('devrait gérer différentes densités de pixels', function () {
      _reactNative.PixelRatio.get.mockReturnValue(3);
      expect((0, _scaling.pixelRound)(10.2)).toBeCloseTo(10.33, 2);
      expect((0, _scaling.pixelRound)(10.5)).toBeCloseTo(10.67, 2);
    });
    it('devrait gérer la densité 1x', function () {
      _reactNative.PixelRatio.get.mockReturnValue(1);
      expect((0, _scaling.pixelRound)(10.3)).toBe(10);
      expect((0, _scaling.pixelRound)(10.7)).toBe(11);
    });
    it('devrait gérer les valeurs nulles et négatives', function () {
      _reactNative.PixelRatio.get.mockReturnValue(2);
      expect((0, _scaling.pixelRound)(0)).toBe(0);
      expect((0, _scaling.pixelRound)(-10.3)).toBe(-10.5);
    });
  });
  describe('Scénarios d\'appareils réels', function () {
    var devices = [{
      name: 'iPhone SE',
      width: 320,
      height: 568,
      pixelRatio: 2
    }, {
      name: 'iPhone 6/7/8',
      width: 375,
      height: 667,
      pixelRatio: 2
    }, {
      name: 'iPhone 6/7/8 Plus',
      width: 414,
      height: 736,
      pixelRatio: 3
    }, {
      name: 'iPhone X/XS',
      width: 375,
      height: 812,
      pixelRatio: 3
    }, {
      name: 'iPhone XR',
      width: 414,
      height: 896,
      pixelRatio: 2
    }, {
      name: 'iPad',
      width: 768,
      height: 1024,
      pixelRatio: 2
    }, {
      name: 'iPad Pro',
      width: 1024,
      height: 1366,
      pixelRatio: 2
    }];
    devices.forEach(function (device) {
      it(`devrait scaler correctement sur ${device.name}`, function () {
        _reactNative.Dimensions.get.mockReturnValue({
          width: device.width,
          height: device.height
        });
        _reactNative.PixelRatio.get.mockReturnValue(device.pixelRatio);
        var baseSize = 16;
        expect(typeof (0, _scaling.scale)(baseSize)).toBe('number');
        expect(typeof (0, _scaling.verticalScale)(baseSize)).toBe('number');
        expect(typeof (0, _scaling.moderateScale)(baseSize)).toBe('number');
        expect(typeof (0, _scaling.pixelRound)(baseSize)).toBe('number');
        expect(isFinite((0, _scaling.scale)(baseSize))).toBe(true);
        expect(isFinite((0, _scaling.verticalScale)(baseSize))).toBe(true);
        expect(isFinite((0, _scaling.moderateScale)(baseSize))).toBe(true);
        expect(isFinite((0, _scaling.pixelRound)(baseSize))).toBe(true);
        expect((0, _scaling.scale)(baseSize)).toBeGreaterThan(0);
        expect((0, _scaling.verticalScale)(baseSize)).toBeGreaterThan(0);
        expect((0, _scaling.moderateScale)(baseSize)).toBeGreaterThan(0);
        expect((0, _scaling.pixelRound)(baseSize)).toBeGreaterThan(0);
      });
    });
  });
  describe('Edge cases et robustesse', function () {
    it('devrait gérer les dimensions nulles', function () {
      _reactNative.Dimensions.get.mockReturnValue({
        width: 0,
        height: 0
      });
      expect((0, _scaling.scale)(10)).toBe(0);
      expect((0, _scaling.verticalScale)(10)).toBe(0);
    });
    it('devrait gérer les très grandes valeurs', function () {
      var largeValue = 10000;
      expect(typeof (0, _scaling.scale)(largeValue)).toBe('number');
      expect(typeof (0, _scaling.verticalScale)(largeValue)).toBe('number');
      expect(typeof (0, _scaling.moderateScale)(largeValue)).toBe('number');
      expect(isFinite((0, _scaling.scale)(largeValue))).toBe(true);
    });
    it('devrait gérer les très petites valeurs', function () {
      var smallValue = 0.1;
      expect(typeof (0, _scaling.scale)(smallValue)).toBe('number');
      expect(typeof (0, _scaling.verticalScale)(smallValue)).toBe('number');
      expect(typeof (0, _scaling.moderateScale)(smallValue)).toBe('number');
      expect(isFinite((0, _scaling.scale)(smallValue))).toBe(true);
    });
    it('devrait gérer un PixelRatio de 0', function () {
      _reactNative.PixelRatio.get.mockReturnValue(0);
      expect(function () {
        return (0, _scaling.pixelRound)(10);
      }).not.toThrow();
    });
    it('devrait être cohérent entre les appels', function () {
      var size = 15;
      var result1 = (0, _scaling.scale)(size);
      var result2 = (0, _scaling.scale)(size);
      expect(result1).toBe(result2);
    });
  });
  describe('Performance', function () {
    it('devrait être rapide pour de nombreux calculs', function () {
      var iterations = 1000;
      var start = Date.now();
      for (var i = 0; i < iterations; i++) {
        (0, _scaling.scale)(10 + i);
        (0, _scaling.verticalScale)(10 + i);
        (0, _scaling.moderateScale)(10 + i);
        (0, _scaling.pixelRound)(10 + i);
      }
      var end = Date.now();
      var duration = end - start;
      expect(duration).toBeLessThan(100);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJEaW1lbnNpb25zIiwiZ2V0IiwiamVzdCIsImZuIiwiUGl4ZWxSYXRpbyIsIl9yZWFjdE5hdGl2ZSIsInJlcXVpcmUiLCJfc2NhbGluZyIsIl9yZXF1aXJlIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwibW9ja1JldHVyblZhbHVlIiwid2lkdGgiLCJoZWlnaHQiLCJhZnRlckVhY2giLCJjbGVhckFsbE1vY2tzIiwiaXQiLCJleHBlY3QiLCJzY2FsZSIsInRvQmUiLCJ0b0JlQ2xvc2VUbyIsInZlcnRpY2FsU2NhbGUiLCJiYXNlU2l6ZSIsInNjYWxlZFNpemUiLCJleHBlY3RlZE1vZGVyYXRlIiwibW9kZXJhdGVTY2FsZSIsImZhY3RvciIsInJlc3VsdCIsInRvQmVMZXNzVGhhbiIsInBpeGVsUm91bmQiLCJkZXZpY2VzIiwibmFtZSIsInBpeGVsUmF0aW8iLCJmb3JFYWNoIiwiZGV2aWNlIiwiaXNGaW5pdGUiLCJ0b0JlR3JlYXRlclRoYW4iLCJsYXJnZVZhbHVlIiwic21hbGxWYWx1ZSIsIm5vdCIsInRvVGhyb3ciLCJzaXplIiwicmVzdWx0MSIsInJlc3VsdDIiLCJpdGVyYXRpb25zIiwic3RhcnQiLCJEYXRlIiwibm93IiwiaSIsImVuZCIsImR1cmF0aW9uIl0sInNvdXJjZXMiOlsic2NhbGluZy50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIF9fdGVzdHNfXy91dGlscy9zY2FsaW5nLnRlc3QuanNcbmltcG9ydCB7IERpbWVuc2lvbnMsIFBpeGVsUmF0aW8gfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHtcbiAgc2NhbGUsXG4gIHZlcnRpY2FsU2NhbGUsXG4gIG1vZGVyYXRlU2NhbGUsXG4gIHBpeGVsUm91bmRcbn0gZnJvbSAnLi4vLi4vc3JjL3V0aWxzL3NjYWxpbmcnO1xuXG4vLyBNb2NrIFJlYWN0IE5hdGl2ZSBEaW1lbnNpb25zIGV0IFBpeGVsUmF0aW9cbmplc3QubW9jaygncmVhY3QtbmF0aXZlJywgKCkgPT4gKHtcbiAgRGltZW5zaW9uczoge1xuICAgIGdldDogamVzdC5mbigpXG4gIH0sXG4gIFBpeGVsUmF0aW86IHtcbiAgICBnZXQ6IGplc3QuZm4oKVxuICB9XG59KSk7XG5cbmRlc2NyaWJlKCdzY2FsaW5nJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAvLyBDb25maWd1cmF0aW9uIHBhciBkw6lmYXV0IDogaVBob25lIDYvNy84XG4gICAgRGltZW5zaW9ucy5nZXQubW9ja1JldHVyblZhbHVlKHtcbiAgICAgIHdpZHRoOiAzNzUsXG4gICAgICBoZWlnaHQ6IDY2N1xuICAgIH0pO1xuICAgIFBpeGVsUmF0aW8uZ2V0Lm1vY2tSZXR1cm5WYWx1ZSgyKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3NjYWxlIChob3Jpem9udGFsKScsICgpID0+IHtcbiAgICBpdCgnZGV2cmFpdCByZXRvdXJuZXIgbGEgbcOqbWUgdmFsZXVyIHN1ciBsYSB0YWlsbGUgZGUgYmFzZScsICgpID0+IHtcbiAgICAgIC8vIGlQaG9uZSA2LzcvOCAoMzc1cHggd2lkdGgpXG4gICAgICBEaW1lbnNpb25zLmdldC5tb2NrUmV0dXJuVmFsdWUoeyB3aWR0aDogMzc1LCBoZWlnaHQ6IDY2NyB9KTtcblxuICAgICAgZXhwZWN0KHNjYWxlKDEwKSkudG9CZSgxMCk7XG4gICAgICBleHBlY3Qoc2NhbGUoMjApKS50b0JlKDIwKTtcbiAgICAgIGV4cGVjdChzY2FsZSgxMDApKS50b0JlKDEwMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2cmFpdCBzY2FsZXIgY29ycmVjdGVtZW50IHN1ciBkZXMgw6ljcmFucyBwbHVzIGxhcmdlcycsICgpID0+IHtcbiAgICAgIC8vIGlQaG9uZSA2LzcvOCBQbHVzICg0MTRweCB3aWR0aClcbiAgICAgIERpbWVuc2lvbnMuZ2V0Lm1vY2tSZXR1cm5WYWx1ZSh7IHdpZHRoOiA0MTQsIGhlaWdodDogNzM2IH0pO1xuXG4gICAgICBleHBlY3Qoc2NhbGUoMTApKS50b0JlQ2xvc2VUbygxMS4wNCwgMSk7XG4gICAgICBleHBlY3Qoc2NhbGUoMjApKS50b0JlQ2xvc2VUbygyMi4wOCwgMSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2cmFpdCBzY2FsZXIgY29ycmVjdGVtZW50IHN1ciBkZXMgw6ljcmFucyBwbHVzIHBldGl0cycsICgpID0+IHtcbiAgICAgIC8vIGlQaG9uZSBTRSAoMzIwcHggd2lkdGgpXG4gICAgICBEaW1lbnNpb25zLmdldC5tb2NrUmV0dXJuVmFsdWUoeyB3aWR0aDogMzIwLCBoZWlnaHQ6IDU2OCB9KTtcblxuICAgICAgZXhwZWN0KHNjYWxlKDEwKSkudG9CZUNsb3NlVG8oOC41MywgMSk7XG4gICAgICBleHBlY3Qoc2NhbGUoMjApKS50b0JlQ2xvc2VUbygxNy4wNywgMSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2cmFpdCBnw6lyZXIgbGVzIHZhbGV1cnMgbnVsbGVzIGV0IG7DqWdhdGl2ZXMnLCAoKSA9PiB7XG4gICAgICBleHBlY3Qoc2NhbGUoMCkpLnRvQmUoMCk7XG4gICAgICBleHBlY3Qoc2NhbGUoLTEwKSkudG9CZUNsb3NlVG8oLTEwLCAxKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZyYWl0IGfDqXJlciBsZXMgdmFsZXVycyBkw6ljaW1hbGVzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KHNjYWxlKDEwLjUpKS50b0JlQ2xvc2VUbygxMC41LCAxKTtcbiAgICAgIGV4cGVjdChzY2FsZSgxNS43NSkpLnRvQmVDbG9zZVRvKDE1Ljc1LCAxKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3ZlcnRpY2FsU2NhbGUnLCAoKSA9PiB7XG4gICAgaXQoJ2RldnJhaXQgcmV0b3VybmVyIGxhIG3Dqm1lIHZhbGV1ciBzdXIgbGEgdGFpbGxlIGRlIGJhc2UnLCAoKSA9PiB7XG4gICAgICAvLyBpUGhvbmUgNi83LzggKDY2N3B4IGhlaWdodClcbiAgICAgIERpbWVuc2lvbnMuZ2V0Lm1vY2tSZXR1cm5WYWx1ZSh7IHdpZHRoOiAzNzUsIGhlaWdodDogNjY3IH0pO1xuXG4gICAgICBleHBlY3QodmVydGljYWxTY2FsZSgxMCkpLnRvQmUoMTApO1xuICAgICAgZXhwZWN0KHZlcnRpY2FsU2NhbGUoMjApKS50b0JlKDIwKTtcbiAgICAgIGV4cGVjdCh2ZXJ0aWNhbFNjYWxlKDEwMCkpLnRvQmUoMTAwKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZyYWl0IHNjYWxlciBjb3JyZWN0ZW1lbnQgc3VyIGRlcyDDqWNyYW5zIHBsdXMgaGF1dHMnLCAoKSA9PiB7XG4gICAgICAvLyBpUGhvbmUgWCAoODEycHggaGVpZ2h0KVxuICAgICAgRGltZW5zaW9ucy5nZXQubW9ja1JldHVyblZhbHVlKHsgd2lkdGg6IDM3NSwgaGVpZ2h0OiA4MTIgfSk7XG5cbiAgICAgIGV4cGVjdCh2ZXJ0aWNhbFNjYWxlKDEwKSkudG9CZUNsb3NlVG8oMTIuMTcsIDEpO1xuICAgICAgZXhwZWN0KHZlcnRpY2FsU2NhbGUoMjApKS50b0JlQ2xvc2VUbygyNC4zNCwgMSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2cmFpdCBzY2FsZXIgY29ycmVjdGVtZW50IHN1ciBkZXMgw6ljcmFucyBwbHVzIGNvdXJ0cycsICgpID0+IHtcbiAgICAgIC8vIGlQaG9uZSBTRSAoNTY4cHggaGVpZ2h0KVxuICAgICAgRGltZW5zaW9ucy5nZXQubW9ja1JldHVyblZhbHVlKHsgd2lkdGg6IDMyMCwgaGVpZ2h0OiA1NjggfSk7XG5cbiAgICAgIGV4cGVjdCh2ZXJ0aWNhbFNjYWxlKDEwKSkudG9CZUNsb3NlVG8oOC41MiwgMSk7XG4gICAgICBleHBlY3QodmVydGljYWxTY2FsZSgyMCkpLnRvQmVDbG9zZVRvKDE3LjA0LCAxKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZyYWl0IGfDqXJlciBsZXMgdmFsZXVycyBudWxsZXMgZXQgbsOpZ2F0aXZlcycsICgpID0+IHtcbiAgICAgIGV4cGVjdCh2ZXJ0aWNhbFNjYWxlKDApKS50b0JlKDApO1xuICAgICAgZXhwZWN0KHZlcnRpY2FsU2NhbGUoLTEwKSkudG9CZUNsb3NlVG8oLTEwLCAxKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ21vZGVyYXRlU2NhbGUnLCAoKSA9PiB7XG4gICAgaXQoJ2RldnJhaXQgYXBwbGlxdWVyIHVuIHNjYWxpbmcgbW9kw6lyw6kgYXZlYyBmYWN0ZXVyIHBhciBkw6lmYXV0ICgwLjUpJywgKCkgPT4ge1xuICAgICAgLy8gaVBob25lIDYvNy84IFBsdXMgKDQxNHB4IHdpZHRoKVxuICAgICAgRGltZW5zaW9ucy5nZXQubW9ja1JldHVyblZhbHVlKHsgd2lkdGg6IDQxNCwgaGVpZ2h0OiA3MzYgfSk7XG5cbiAgICAgIGNvbnN0IGJhc2VTaXplID0gMjA7XG4gICAgICBjb25zdCBzY2FsZWRTaXplID0gc2NhbGUoYmFzZVNpemUpOyAvLyAyMi4wOFxuICAgICAgY29uc3QgZXhwZWN0ZWRNb2RlcmF0ZSA9IGJhc2VTaXplICsgKHNjYWxlZFNpemUgLSBiYXNlU2l6ZSkgKiAwLjU7XG5cbiAgICAgIGV4cGVjdChtb2RlcmF0ZVNjYWxlKGJhc2VTaXplKSkudG9CZUNsb3NlVG8oZXhwZWN0ZWRNb2RlcmF0ZSwgMSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2cmFpdCByZXNwZWN0ZXIgbGUgZmFjdGV1ciBwZXJzb25uYWxpc8OpJywgKCkgPT4ge1xuICAgICAgLy8gaVBob25lIDYvNy84IFBsdXMgKDQxNHB4IHdpZHRoKVxuICAgICAgRGltZW5zaW9ucy5nZXQubW9ja1JldHVyblZhbHVlKHsgd2lkdGg6IDQxNCwgaGVpZ2h0OiA3MzYgfSk7XG5cbiAgICAgIGNvbnN0IGJhc2VTaXplID0gMjA7XG4gICAgICBjb25zdCBmYWN0b3IgPSAwLjM7XG4gICAgICBjb25zdCBzY2FsZWRTaXplID0gc2NhbGUoYmFzZVNpemUpO1xuICAgICAgY29uc3QgZXhwZWN0ZWRNb2RlcmF0ZSA9IGJhc2VTaXplICsgKHNjYWxlZFNpemUgLSBiYXNlU2l6ZSkgKiBmYWN0b3I7XG5cbiAgICAgIGV4cGVjdChtb2RlcmF0ZVNjYWxlKGJhc2VTaXplLCBmYWN0b3IpKS50b0JlQ2xvc2VUbyhleHBlY3RlZE1vZGVyYXRlLCAxKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZyYWl0IHJldG91cm5lciBsYSB2YWxldXIgb3JpZ2luYWxlIGF2ZWMgZmFjdGV1ciAwJywgKCkgPT4ge1xuICAgICAgRGltZW5zaW9ucy5nZXQubW9ja1JldHVyblZhbHVlKHsgd2lkdGg6IDQxNCwgaGVpZ2h0OiA3MzYgfSk7XG5cbiAgICAgIGV4cGVjdChtb2RlcmF0ZVNjYWxlKDIwLCAwKSkudG9CZSgyMCk7XG4gICAgICBleHBlY3QobW9kZXJhdGVTY2FsZSg1MCwgMCkpLnRvQmUoNTApO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldnJhaXQgcmV0b3VybmVyIGxlIHNjYWxpbmcgY29tcGxldCBhdmVjIGZhY3RldXIgMScsICgpID0+IHtcbiAgICAgIERpbWVuc2lvbnMuZ2V0Lm1vY2tSZXR1cm5WYWx1ZSh7IHdpZHRoOiA0MTQsIGhlaWdodDogNzM2IH0pO1xuXG4gICAgICBleHBlY3QobW9kZXJhdGVTY2FsZSgyMCwgMSkpLnRvQmVDbG9zZVRvKHNjYWxlKDIwKSwgMSk7XG4gICAgICBleHBlY3QobW9kZXJhdGVTY2FsZSg1MCwgMSkpLnRvQmVDbG9zZVRvKHNjYWxlKDUwKSwgMSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2cmFpdCBnw6lyZXIgbGVzIGZhY3RldXJzIG7DqWdhdGlmcycsICgpID0+IHtcbiAgICAgIERpbWVuc2lvbnMuZ2V0Lm1vY2tSZXR1cm5WYWx1ZSh7IHdpZHRoOiA0MTQsIGhlaWdodDogNzM2IH0pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBtb2RlcmF0ZVNjYWxlKDIwLCAtMC41KTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmVMZXNzVGhhbigyMCk7IC8vIERldnJhaXQgw6p0cmUgcGx1cyBwZXRpdCBxdWUgbCdvcmlnaW5hbFxuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgncGl4ZWxSb3VuZCcsICgpID0+IHtcbiAgICBpdCgnZGV2cmFpdCBhcnJvbmRpciBhdSBwaXhlbCBsZSBwbHVzIHByb2NoZScsICgpID0+IHtcbiAgICAgIFBpeGVsUmF0aW8uZ2V0Lm1vY2tSZXR1cm5WYWx1ZSgyKTsgLy8gQDJ4XG5cbiAgICAgIGV4cGVjdChwaXhlbFJvdW5kKDEwLjMpKS50b0JlKDEwLjUpO1xuICAgICAgZXhwZWN0KHBpeGVsUm91bmQoMTAuNykpLnRvQmUoMTAuNSk7XG4gICAgICBleHBlY3QocGl4ZWxSb3VuZCgxMS4wKSkudG9CZSgxMSk7XG4gICAgICBleHBlY3QocGl4ZWxSb3VuZCgxMS4zKSkudG9CZSgxMS41KTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZyYWl0IGfDqXJlciBkaWZmw6lyZW50ZXMgZGVuc2l0w6lzIGRlIHBpeGVscycsICgpID0+IHtcbiAgICAgIFBpeGVsUmF0aW8uZ2V0Lm1vY2tSZXR1cm5WYWx1ZSgzKTsgLy8gQDN4XG5cbiAgICAgIGV4cGVjdChwaXhlbFJvdW5kKDEwLjIpKS50b0JlQ2xvc2VUbygxMC4zMywgMik7XG4gICAgICBleHBlY3QocGl4ZWxSb3VuZCgxMC41KSkudG9CZUNsb3NlVG8oMTAuNjcsIDIpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldnJhaXQgZ8OpcmVyIGxhIGRlbnNpdMOpIDF4JywgKCkgPT4ge1xuICAgICAgUGl4ZWxSYXRpby5nZXQubW9ja1JldHVyblZhbHVlKDEpO1xuXG4gICAgICBleHBlY3QocGl4ZWxSb3VuZCgxMC4zKSkudG9CZSgxMCk7XG4gICAgICBleHBlY3QocGl4ZWxSb3VuZCgxMC43KSkudG9CZSgxMSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2cmFpdCBnw6lyZXIgbGVzIHZhbGV1cnMgbnVsbGVzIGV0IG7DqWdhdGl2ZXMnLCAoKSA9PiB7XG4gICAgICBQaXhlbFJhdGlvLmdldC5tb2NrUmV0dXJuVmFsdWUoMik7XG5cbiAgICAgIGV4cGVjdChwaXhlbFJvdW5kKDApKS50b0JlKDApO1xuICAgICAgZXhwZWN0KHBpeGVsUm91bmQoLTEwLjMpKS50b0JlKC0xMC41KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1Njw6luYXJpb3MgZFxcJ2FwcGFyZWlscyByw6llbHMnLCAoKSA9PiB7XG4gICAgY29uc3QgZGV2aWNlcyA9IFtcbiAgICAgIHsgbmFtZTogJ2lQaG9uZSBTRScsIHdpZHRoOiAzMjAsIGhlaWdodDogNTY4LCBwaXhlbFJhdGlvOiAyIH0sXG4gICAgICB7IG5hbWU6ICdpUGhvbmUgNi83LzgnLCB3aWR0aDogMzc1LCBoZWlnaHQ6IDY2NywgcGl4ZWxSYXRpbzogMiB9LFxuICAgICAgeyBuYW1lOiAnaVBob25lIDYvNy84IFBsdXMnLCB3aWR0aDogNDE0LCBoZWlnaHQ6IDczNiwgcGl4ZWxSYXRpbzogMyB9LFxuICAgICAgeyBuYW1lOiAnaVBob25lIFgvWFMnLCB3aWR0aDogMzc1LCBoZWlnaHQ6IDgxMiwgcGl4ZWxSYXRpbzogMyB9LFxuICAgICAgeyBuYW1lOiAnaVBob25lIFhSJywgd2lkdGg6IDQxNCwgaGVpZ2h0OiA4OTYsIHBpeGVsUmF0aW86IDIgfSxcbiAgICAgIHsgbmFtZTogJ2lQYWQnLCB3aWR0aDogNzY4LCBoZWlnaHQ6IDEwMjQsIHBpeGVsUmF0aW86IDIgfSxcbiAgICAgIHsgbmFtZTogJ2lQYWQgUHJvJywgd2lkdGg6IDEwMjQsIGhlaWdodDogMTM2NiwgcGl4ZWxSYXRpbzogMiB9XG4gICAgXTtcblxuICAgIGRldmljZXMuZm9yRWFjaChkZXZpY2UgPT4ge1xuICAgICAgaXQoYGRldnJhaXQgc2NhbGVyIGNvcnJlY3RlbWVudCBzdXIgJHtkZXZpY2UubmFtZX1gLCAoKSA9PiB7XG4gICAgICAgIERpbWVuc2lvbnMuZ2V0Lm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICAgICAgd2lkdGg6IGRldmljZS53aWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IGRldmljZS5oZWlnaHRcbiAgICAgICAgfSk7XG4gICAgICAgIFBpeGVsUmF0aW8uZ2V0Lm1vY2tSZXR1cm5WYWx1ZShkZXZpY2UucGl4ZWxSYXRpbyk7XG5cbiAgICAgICAgY29uc3QgYmFzZVNpemUgPSAxNjtcbiAgICAgICAgXG4gICAgICAgIC8vIExlcyByw6lzdWx0YXRzIGRvaXZlbnQgw6p0cmUgZGVzIG5vbWJyZXMgdmFsaWRlc1xuICAgICAgICBleHBlY3QodHlwZW9mIHNjYWxlKGJhc2VTaXplKSkudG9CZSgnbnVtYmVyJyk7XG4gICAgICAgIGV4cGVjdCh0eXBlb2YgdmVydGljYWxTY2FsZShiYXNlU2l6ZSkpLnRvQmUoJ251bWJlcicpO1xuICAgICAgICBleHBlY3QodHlwZW9mIG1vZGVyYXRlU2NhbGUoYmFzZVNpemUpKS50b0JlKCdudW1iZXInKTtcbiAgICAgICAgZXhwZWN0KHR5cGVvZiBwaXhlbFJvdW5kKGJhc2VTaXplKSkudG9CZSgnbnVtYmVyJyk7XG5cbiAgICAgICAgLy8gTGVzIHLDqXN1bHRhdHMgbmUgZG9pdmVudCBwYXMgw6p0cmUgTmFOIG91IEluZmluaXR5XG4gICAgICAgIGV4cGVjdChpc0Zpbml0ZShzY2FsZShiYXNlU2l6ZSkpKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QoaXNGaW5pdGUodmVydGljYWxTY2FsZShiYXNlU2l6ZSkpKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QoaXNGaW5pdGUobW9kZXJhdGVTY2FsZShiYXNlU2l6ZSkpKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QoaXNGaW5pdGUocGl4ZWxSb3VuZChiYXNlU2l6ZSkpKS50b0JlKHRydWUpO1xuXG4gICAgICAgIC8vIExlcyB2YWxldXJzIHNjYWzDqWVzIGRvaXZlbnQgw6p0cmUgcG9zaXRpdmVzIHBvdXIgZGVzIGVudHLDqWVzIHBvc2l0aXZlc1xuICAgICAgICBleHBlY3Qoc2NhbGUoYmFzZVNpemUpKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgICAgIGV4cGVjdCh2ZXJ0aWNhbFNjYWxlKGJhc2VTaXplKSkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgICAgICBleHBlY3QobW9kZXJhdGVTY2FsZShiYXNlU2l6ZSkpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICAgICAgZXhwZWN0KHBpeGVsUm91bmQoYmFzZVNpemUpKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0VkZ2UgY2FzZXMgZXQgcm9idXN0ZXNzZScsICgpID0+IHtcbiAgICBpdCgnZGV2cmFpdCBnw6lyZXIgbGVzIGRpbWVuc2lvbnMgbnVsbGVzJywgKCkgPT4ge1xuICAgICAgRGltZW5zaW9ucy5nZXQubW9ja1JldHVyblZhbHVlKHsgd2lkdGg6IDAsIGhlaWdodDogMCB9KTtcblxuICAgICAgZXhwZWN0KHNjYWxlKDEwKSkudG9CZSgwKTtcbiAgICAgIGV4cGVjdCh2ZXJ0aWNhbFNjYWxlKDEwKSkudG9CZSgwKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZyYWl0IGfDqXJlciBsZXMgdHLDqHMgZ3JhbmRlcyB2YWxldXJzJywgKCkgPT4ge1xuICAgICAgY29uc3QgbGFyZ2VWYWx1ZSA9IDEwMDAwO1xuXG4gICAgICBleHBlY3QodHlwZW9mIHNjYWxlKGxhcmdlVmFsdWUpKS50b0JlKCdudW1iZXInKTtcbiAgICAgIGV4cGVjdCh0eXBlb2YgdmVydGljYWxTY2FsZShsYXJnZVZhbHVlKSkudG9CZSgnbnVtYmVyJyk7XG4gICAgICBleHBlY3QodHlwZW9mIG1vZGVyYXRlU2NhbGUobGFyZ2VWYWx1ZSkpLnRvQmUoJ251bWJlcicpO1xuICAgICAgZXhwZWN0KGlzRmluaXRlKHNjYWxlKGxhcmdlVmFsdWUpKSkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZyYWl0IGfDqXJlciBsZXMgdHLDqHMgcGV0aXRlcyB2YWxldXJzJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc21hbGxWYWx1ZSA9IDAuMTtcblxuICAgICAgZXhwZWN0KHR5cGVvZiBzY2FsZShzbWFsbFZhbHVlKSkudG9CZSgnbnVtYmVyJyk7XG4gICAgICBleHBlY3QodHlwZW9mIHZlcnRpY2FsU2NhbGUoc21hbGxWYWx1ZSkpLnRvQmUoJ251bWJlcicpO1xuICAgICAgZXhwZWN0KHR5cGVvZiBtb2RlcmF0ZVNjYWxlKHNtYWxsVmFsdWUpKS50b0JlKCdudW1iZXInKTtcbiAgICAgIGV4cGVjdChpc0Zpbml0ZShzY2FsZShzbWFsbFZhbHVlKSkpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2cmFpdCBnw6lyZXIgdW4gUGl4ZWxSYXRpbyBkZSAwJywgKCkgPT4ge1xuICAgICAgUGl4ZWxSYXRpby5nZXQubW9ja1JldHVyblZhbHVlKDApO1xuXG4gICAgICBleHBlY3QoKCkgPT4gcGl4ZWxSb3VuZCgxMCkpLm5vdC50b1Rocm93KCk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2cmFpdCDDqnRyZSBjb2jDqXJlbnQgZW50cmUgbGVzIGFwcGVscycsICgpID0+IHtcbiAgICAgIGNvbnN0IHNpemUgPSAxNTtcblxuICAgICAgY29uc3QgcmVzdWx0MSA9IHNjYWxlKHNpemUpO1xuICAgICAgY29uc3QgcmVzdWx0MiA9IHNjYWxlKHNpemUpO1xuXG4gICAgICBleHBlY3QocmVzdWx0MSkudG9CZShyZXN1bHQyKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1BlcmZvcm1hbmNlJywgKCkgPT4ge1xuICAgIGl0KCdkZXZyYWl0IMOqdHJlIHJhcGlkZSBwb3VyIGRlIG5vbWJyZXV4IGNhbGN1bHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBpdGVyYXRpb25zID0gMTAwMDtcbiAgICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVyYXRpb25zOyBpKyspIHtcbiAgICAgICAgc2NhbGUoMTAgKyBpKTtcbiAgICAgICAgdmVydGljYWxTY2FsZSgxMCArIGkpO1xuICAgICAgICBtb2RlcmF0ZVNjYWxlKDEwICsgaSk7XG4gICAgICAgIHBpeGVsUm91bmQoMTAgKyBpKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZW5kID0gRGF0ZS5ub3coKTtcbiAgICAgIGNvbnN0IGR1cmF0aW9uID0gZW5kIC0gc3RhcnQ7XG5cbiAgICAgIGV4cGVjdChkdXJhdGlvbikudG9CZUxlc3NUaGFuKDEwMCk7IC8vIE1vaW5zIGRlIDEwMG1zIHBvdXIgMTAwMCBjYWxjdWxzXG4gICAgfSk7XG4gIH0pO1xufSk7Il0sIm1hcHBpbmdzIjoiQUFVQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsY0FBYyxFQUFFO0VBQUEsT0FBTztJQUMvQkMsVUFBVSxFQUFFO01BQ1ZDLEdBQUcsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUM7SUFDZixDQUFDO0lBQ0RDLFVBQVUsRUFBRTtNQUNWSCxHQUFHLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0lBQ2Y7RUFDRixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBaEJILElBQUFFLFlBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFFBQUEsR0FBQUQsT0FBQTtBQUtpQyxTQUFBUixZQUFBO0VBQUEsSUFBQVUsUUFBQSxHQUFBRixPQUFBO0lBQUFKLElBQUEsR0FBQU0sUUFBQSxDQUFBTixJQUFBO0VBQUFKLFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFJLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQVlqQ08sUUFBUSxDQUFDLFNBQVMsRUFBRSxZQUFNO0VBQ3hCQyxVQUFVLENBQUMsWUFBTTtJQUVmVix1QkFBVSxDQUFDQyxHQUFHLENBQUNVLGVBQWUsQ0FBQztNQUM3QkMsS0FBSyxFQUFFLEdBQUc7TUFDVkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQyxDQUFDO0lBQ0ZULHVCQUFVLENBQUNILEdBQUcsQ0FBQ1UsZUFBZSxDQUFDLENBQUMsQ0FBQztFQUNuQyxDQUFDLENBQUM7RUFFRkcsU0FBUyxDQUFDLFlBQU07SUFDZFosSUFBSSxDQUFDYSxhQUFhLENBQUMsQ0FBQztFQUN0QixDQUFDLENBQUM7RUFFRk4sUUFBUSxDQUFDLG9CQUFv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