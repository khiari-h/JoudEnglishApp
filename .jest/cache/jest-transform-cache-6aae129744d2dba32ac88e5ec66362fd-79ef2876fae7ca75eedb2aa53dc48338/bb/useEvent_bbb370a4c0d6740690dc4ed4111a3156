47fd08725cbe1b03050e3a125d1b8346
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useEvent = useEvent;
var _react = require("react");
var _WorkletEventHandler = require("../WorkletEventHandler");
function useEvent(handler) {
  var eventNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var rebuild = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var initRef = (0, _react.useRef)(null);
  if (initRef.current === null) {
    var workletEventHandler = new _WorkletEventHandler.WorkletEventHandler(handler, eventNames);
    initRef.current = {
      workletEventHandler: workletEventHandler
    };
  } else if (rebuild) {
    var _workletEventHandler = initRef.current.workletEventHandler;
    _workletEventHandler.updateEventHandler(handler, eventNames);
    initRef.current = {
      workletEventHandler: _workletEventHandler
    };
  }
  return initRef.current;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInVzZUV2ZW50IiwiX3JlYWN0IiwicmVxdWlyZSIsIl9Xb3JrbGV0RXZlbnRIYW5kbGVyIiwiaGFuZGxlciIsImV2ZW50TmFtZXMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJyZWJ1aWxkIiwiaW5pdFJlZiIsInVzZVJlZiIsImN1cnJlbnQiLCJ3b3JrbGV0RXZlbnRIYW5kbGVyIiwiV29ya2xldEV2ZW50SGFuZGxlciIsInVwZGF0ZUV2ZW50SGFuZGxlciJdLCJzb3VyY2VzIjpbInVzZUV2ZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFdvcmtsZXRFdmVudEhhbmRsZXIgfSBmcm9tICcuLi9Xb3JrbGV0RXZlbnRIYW5kbGVyJztcbmltcG9ydCB0eXBlIHsgSVdvcmtsZXRFdmVudEhhbmRsZXIsIFJlYW5pbWF0ZWRFdmVudCB9IGZyb20gJy4vY29tbW9uVHlwZXMnO1xuXG4vKiogV29ya2xldCB0byBwcm92aWRlIGFzIGFuIGFyZ3VtZW50IHRvIGB1c2VFdmVudGAgaG9vay4gKi9cbmV4cG9ydCB0eXBlIEV2ZW50SGFuZGxlcjxcbiAgRXZlbnQgZXh0ZW5kcyBvYmplY3QsXG4gIENvbnRleHQgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiA9IG5ldmVyLFxuPiA9IChldmVudDogUmVhbmltYXRlZEV2ZW50PEV2ZW50PiwgY29udGV4dD86IENvbnRleHQpID0+IHZvaWQ7XG5cbmV4cG9ydCB0eXBlIEV2ZW50SGFuZGxlclByb2Nlc3NlZDxcbiAgRXZlbnQgZXh0ZW5kcyBvYmplY3QsXG4gIENvbnRleHQgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiA9IG5ldmVyLFxuPiA9IChldmVudDogRXZlbnQsIGNvbnRleHQ/OiBDb250ZXh0KSA9PiB2b2lkO1xuXG5leHBvcnQgdHlwZSBFdmVudEhhbmRsZXJJbnRlcm5hbDxFdmVudCBleHRlbmRzIG9iamVjdD4gPSB7XG4gIHdvcmtsZXRFdmVudEhhbmRsZXI6IElXb3JrbGV0RXZlbnRIYW5kbGVyPEV2ZW50Pjtcbn07XG5cbi8qKlxuICogTGV0cyB5b3UgcnVuIGEgZnVuY3Rpb24gd2hlbmV2ZXIgYSBzcGVjaWZpZWQgbmF0aXZlIGV2ZW50IG9jY3Vycy5cbiAqXG4gKiBAcGFyYW0gaGFuZGxlciAtIEEgZnVuY3Rpb24gdGhhdCByZWNlaXZlcyBhbiBldmVudCBvYmplY3Qgd2l0aCBldmVudCBkYXRhIC1cbiAqICAge0BsaW5rIEV2ZW50SGFuZGxlcn0uXG4gKiBAcGFyYW0gZXZlbnROYW1lcyAtIEFuIGFycmF5IG9mIGV2ZW50IG5hbWVzIHRoZSBgaGFuZGxlcmAgY2FsbGJhY2sgd2lsbCByZWFjdFxuICogICB0by5cbiAqIEBwYXJhbSByZWJ1aWxkIC0gV2hldGhlciB0aGUgZXZlbnQgaGFuZGxlciBzaG91bGQgYmUgcmVidWlsdC4gRGVmYXVsdHMgdG9cbiAqICAgYGZhbHNlYC5cbiAqIEByZXR1cm5zIEEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBldmVudCBvY2N1cnMgLVxuICogICB7QGxpbmsgRXZlbnRIYW5kbGVyUHJvY2Vzc2VkfS5cbiAqIEBzZWUgaHR0cHM6Ly9kb2NzLnN3bWFuc2lvbi5jb20vcmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWQvZG9jcy9hZHZhbmNlZC91c2VFdmVudFxuICovXG4vLyBAdHMtZXhwZWN0LWVycm9yIFRoaXMgb3ZlcmxvYWQgaXMgcmVxdWlyZWQgYnkgb3VyIEFQSS5cbi8vIFdlIGRvbid0IGtub3cgd2hpY2ggcHJvcGVyaXRlcyBvZiBhIGNvbXBvbmVudCB0aGF0IGlzIG1hZGUgaW50b1xuLy8gYW4gQW5pbWF0ZWRDb21wb25lbnQgYXJlIGV2ZW50IGhhbmRsZXJzIGFuZCB3ZSBkb24ndCB3YW50IHRvIGZvcmNlIHRoZSB1c2VyIHRvIGRlZmluZSBpdC5cbi8vIFRoZXJlZm9yZSB3ZSBkaXNndWlzZSBgdXNlRXZlbnRgIHJldHVybiB0eXBlIGFzIGEgc2ltcGxlIGZ1bmN0aW9uIGFuZCB3ZSBoYW5kbGVcbi8vIGl0IGJlaW5nIGEgUmVhY3QgUmVmIGluIGBjcmVhdGVBbmltYXRlZENvbXBvbmVudGAuXG5leHBvcnQgZnVuY3Rpb24gdXNlRXZlbnQ8XG4gIEV2ZW50IGV4dGVuZHMgb2JqZWN0LFxuICBDb250ZXh0IGV4dGVuZHMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4gPSBuZXZlcixcbj4oXG4gIGhhbmRsZXI6IEV2ZW50SGFuZGxlcjxFdmVudCwgQ29udGV4dD4sXG4gIGV2ZW50TmFtZXM/OiBzdHJpbmdbXSxcbiAgcmVidWlsZD86IGJvb2xlYW5cbik6IEV2ZW50SGFuZGxlclByb2Nlc3NlZDxFdmVudCwgQ29udGV4dD47XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VFdmVudDxFdmVudCBleHRlbmRzIG9iamVjdCwgQ29udGV4dCA9IG5ldmVyPihcbiAgaGFuZGxlcjogKGV2ZW50OiBSZWFuaW1hdGVkRXZlbnQ8RXZlbnQ+LCBjb250ZXh0PzogQ29udGV4dCkgPT4gdm9pZCxcbiAgZXZlbnROYW1lczogc3RyaW5nW10gPSBbXSxcbiAgcmVidWlsZCA9IGZhbHNlXG4pOiBFdmVudEhhbmRsZXJJbnRlcm5hbDxFdmVudD4ge1xuICBjb25zdCBpbml0UmVmID0gdXNlUmVmPEV2ZW50SGFuZGxlckludGVybmFsPEV2ZW50Pj4obnVsbCEpO1xuICBpZiAoaW5pdFJlZi5jdXJyZW50ID09PSBudWxsKSB7XG4gICAgY29uc3Qgd29ya2xldEV2ZW50SGFuZGxlciA9IG5ldyBXb3JrbGV0RXZlbnRIYW5kbGVyPEV2ZW50PihcbiAgICAgIGhhbmRsZXIsXG4gICAgICBldmVudE5hbWVzXG4gICAgKTtcbiAgICBpbml0UmVmLmN1cnJlbnQgPSB7IHdvcmtsZXRFdmVudEhhbmRsZXIgfTtcbiAgfSBlbHNlIGlmIChyZWJ1aWxkKSB7XG4gICAgY29uc3Qgd29ya2xldEV2ZW50SGFuZGxlciA9IGluaXRSZWYuY3VycmVudC53b3JrbGV0RXZlbnRIYW5kbGVyO1xuICAgIHdvcmtsZXRFdmVudEhhbmRsZXIudXBkYXRlRXZlbnRIYW5kbGVyKGhhbmRsZXIsIGV2ZW50TmFtZXMpO1xuICAgIGluaXRSZWYuY3VycmVudCA9IHsgd29ya2xldEV2ZW50SGFuZGxlciB9O1xuICB9XG5cbiAgcmV0dXJuIGluaXRSZWYuY3VycmVudDtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFBQ0EsTUFBQSxDQUFBQyxjQUFBLENBQUFDLE9BQUE7RUFBQUMsS0FBQTtBQUFBO0FBQUFELE9BQUEsQ0FBQUUsUUFBQSxHQUFBQSxRQUFBO0FBQ2IsSUFBQUMsTUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsb0JBQUEsR0FBQUQsT0FBQTtBQTZDTyxTQUFTRixRQUFRQSxDQUN0QkksT0FBbUUsRUFHdEM7RUFBQSxJQUY3QkMsVUFBb0IsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsRUFBRTtFQUFBLElBQ3pCRyxPQUFPLEdBQUFILFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLEtBQUs7RUFFZixJQUFNSSxPQUFPLEdBQUcsSUFBQUMsYUFBTSxFQUE4QixJQUFLLENBQUM7RUFDMUQsSUFBSUQsT0FBTyxDQUFDRSxPQUFPLEtBQUssSUFBSSxFQUFFO0lBQzVCLElBQU1DLG1CQUFtQixHQUFHLElBQUlDLHdDQUFtQixDQUNqRFYsT0FBTyxFQUNQQyxVQUNGLENBQUM7SUFDREssT0FBTyxDQUFDRSxPQUFPLEdBQUc7TUFBRUMsbUJBQW1CLEVBQW5CQTtJQUFvQixDQUFDO0VBQzNDLENBQUMsTUFBTSxJQUFJSixPQUFPLEVBQUU7SUFDbEIsSUFBTUksb0JBQW1CLEdBQUdILE9BQU8sQ0FBQ0UsT0FBTyxDQUFDQyxtQkFBbUI7SUFDL0RBLG9CQUFtQixDQUFDRSxrQkFBa0IsQ0FBQ1gsT0FBTyxFQUFFQyxVQUFVLENBQUM7SUFDM0RLLE9BQU8sQ0FBQ0UsT0FBTyxHQUFHO01BQUVDLG1CQUFtQixFQUFuQkE7SUFBb0IsQ0FBQztFQUMzQztFQUVBLE9BQU9ILE9BQU8sQ0FBQ0UsT0FBTztBQUN4QiIsImlnbm9yZUxpc3QiOltdfQ==