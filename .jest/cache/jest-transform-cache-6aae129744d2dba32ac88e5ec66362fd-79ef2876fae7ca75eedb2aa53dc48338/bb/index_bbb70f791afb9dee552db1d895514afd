11f986d2fe2bf38f22dc41c88c3d07c8
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var Lock = _interopRequireWildcard(require("../../../services/lockService"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var SecuritySettings = function SecuritySettings() {
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    enabled = _useState2[0],
    setEnabled = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    bioEnabled = _useState4[0],
    setBioEnabled = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    showPinModal = _useState6[0],
    setShowPinModal = _useState6[1];
  var _useState7 = (0, _react.useState)(''),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    pin1 = _useState8[0],
    setPin1 = _useState8[1];
  var _useState9 = (0, _react.useState)(''),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    pin2 = _useState0[0],
    setPin2 = _useState0[1];
  var _useState1 = (0, _react.useState)(''),
    _useState10 = (0, _slicedToArray2.default)(_useState1, 2),
    recoveryCode = _useState10[0],
    setRecoveryCode = _useState10[1];
  (0, _react.useEffect)(function () {
    (0, _asyncToGenerator2.default)(function* () {
      var isOn = yield Lock.isEnabled();
      var bio = yield Lock.isBiometricsEnabled();
      setEnabled(isOn);
      setBioEnabled(bio);
    })();
  }, []);
  var openPinModal = (0, _react.useCallback)(function () {
    setPin1('');
    setPin2('');
    setShowPinModal(true);
  }, []);
  var closePinModal = (0, _react.useCallback)(function () {
    return setShowPinModal(false);
  }, []);
  var handleToggleEnabled = (0, _react.useCallback)(function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (value) {
      if (value) {
        setEnabled(true);
        openPinModal();
      } else {
        yield Lock.disableLock();
        setEnabled(false);
      }
    });
    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), [openPinModal]);
  var handleSavePin = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    if (!pin1 || pin1 !== pin2 || pin1.length < 4) return;
    yield Lock.enableLock();
    yield Lock.setPin(pin1);
    setEnabled(true);
    setShowPinModal(false);
  }), [pin1, pin2]);
  var handleToggleBiometrics = (0, _react.useCallback)(function () {
    var _ref4 = (0, _asyncToGenerator2.default)(function* (value) {
      yield Lock.setBiometricsEnabled(value);
      setBioEnabled(value);
    });
    return function (_x2) {
      return _ref4.apply(this, arguments);
    };
  }(), []);
  var handleShowOrGenerateRecovery = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    var code = Lock.generateRecoveryCode();
    yield Lock.setRecoveryCode(code);
    setRecoveryCode(code);
  }), []);
  var handleLockNow = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    yield Lock.enableLock();
    setEnabled(true);
  }), []);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: _style.default.container,
    testID: "security-settings",
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: _style.default.sectionTitle,
      children: "\uD83D\uDD12 S\xE9curit\xE9"
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: _style.default.row,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: _style.default.label,
        children: "Activer le verrouillage"
      }), (0, _jsxRuntime.jsx)(_reactNative.Switch, {
        testID: "security-toggle",
        value: enabled,
        onValueChange: handleToggleEnabled
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      testID: "set-pin-button",
      style: _style.default.button,
      onPress: openPinModal,
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: _style.default.buttonText,
        children: enabled ? 'Changer le PIN' : 'DÃ©finir un PIN'
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: _style.default.row,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: _style.default.label,
        children: "Biom\xE9trie"
      }), (0, _jsxRuntime.jsx)(_reactNative.Switch, {
        testID: "biometrics-toggle",
        value: bioEnabled,
        onValueChange: handleToggleBiometrics
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      testID: "recovery-generate-button",
      style: _style.default.secondaryButton,
      onPress: handleShowOrGenerateRecovery,
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: _style.default.secondaryText,
        children: "Afficher / G\xE9n\xE9rer code de r\xE9cup\xE9ration"
      })
    }), recoveryCode ? (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: _style.default.recoveryBox,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: _style.default.recoveryLabel,
        children: "Code de r\xE9cup\xE9ration:"
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        selectable: true,
        testID: "recovery-code",
        style: _style.default.recoveryCode,
        children: recoveryCode
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: _style.default.recoveryHint,
        children: "Conserve ce code en lieu s\xFBr. Il permet de r\xE9initialiser le PIN."
      })]
    }) : null, (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      testID: "lock-now-button",
      style: _style.default.secondaryButton,
      onPress: handleLockNow,
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: _style.default.secondaryText,
        children: "Verrouiller maintenant"
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.Modal, {
      visible: showPinModal,
      transparent: true,
      animationType: "fade",
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _style.default.modalBackdrop,
        children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: _style.default.modalCard,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: _style.default.modalTitle,
            children: "D\xE9finir un code PIN"
          }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
            testID: "pin-input-1",
            value: pin1,
            onChangeText: setPin1,
            placeholder: "Code PIN (4+)",
            secureTextEntry: true,
            keyboardType: "number-pad",
            style: _style.default.input
          }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
            testID: "pin-input-2",
            value: pin2,
            onChangeText: setPin2,
            placeholder: "Confirmer le PIN",
            secureTextEntry: true,
            keyboardType: "number-pad",
            style: _style.default.input
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: _style.default.modalActions,
            children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
              testID: "pin-cancel",
              style: _style.default.modalCancel,
              onPress: closePinModal,
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: _style.default.modalCancelText,
                children: "Annuler"
              })
            }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
              testID: "pin-save",
              style: _style.default.modalSave,
              onPress: handleSavePin,
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: _style.default.modalSaveText,
                children: "Enregistrer"
              })
            })]
          })]
        })
      })
    })]
  });
};
var _default = exports.default = SecuritySettings;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,