{"version":3,"names":["_getJestObj","mock","useFocusEffect","jest","fn","callback","router","push","Stack","_ref","children","_jsxRuntime","jsx","Fragment","useLocalSearchParams","useNavigation","navigate","goBack","canGoBack","addListener","isFocused","lastActivity","isLoading","saveActivity","clearActivity","reload","currentStreak","wordsToday","timeToday","Object","assign","requireActual","useProgress","progress","mockProgressState","updateExerciseProgress","mockUpdateExerciseProgress","calculateGlobalProgress","levels","values","length","total","reduce","sum","level","exercises","levelSum","Math","round","calculateLevelProgress","levelData","keys","_interopRequireDefault","require","_asyncToGenerator2","_slicedToArray2","_react","_reactNative","_reactNative2","_ProgressContext","_ThemeContext","_CurrentLevelContext","_require","stats","exerciseType","completed","FakeMetricsDisplay","_useProgress","_React$useState","React","useState","vocabulary","grammar","reading","_React$useState2","default","localProgress","setLocalProgress","simulateVocabularyProgress","prev","simulateGrammarProgress","simulateReadingProgress","simulateMultipleUpdates","act","overallProgress","jsxs","View","Text","testID","TouchableOpacity","onPress","FakeMetricsObserver","_React$useState3","_React$useState4","handleVocabularyClick","handleGrammarClick","handleReadingClick","handleMultipleUpdates","describe","beforeEach","clearAllMocks","it","_render","render","ThemeProvider","ProgressProvider","getByTestId","expect","toHaveTextContent","fireEvent","press","waitFor","_render2","_render3","CurrentLevelProvider","toBeTruthy","_render4","_render5","_render6","i","_render7","_render8"],"sources":["real-time-metrics.test.js"],"sourcesContent":["// __tests__/integration/real-time-metrics.test.js\r\nimport React from 'react';\r\nimport { render, fireEvent, waitFor, act } from '@testing-library/react-native';\r\nimport { TouchableOpacity, Text, View } from 'react-native';\r\nimport { ProgressProvider, useProgress } from '../../src/contexts/ProgressContext';\r\nimport { ThemeProvider } from '../../src/contexts/ThemeContext';\r\nimport { CurrentLevelProvider } from '../../src/contexts/CurrentLevelContext';\r\n\r\n// Mock de expo-router\r\njest.mock('expo-router', () => ({\r\n  useFocusEffect: jest.fn(callback => callback()),\r\n  router: {\r\n    push: jest.fn(),\r\n  },\r\n  Stack: ({ children }) => <>{children}</>,\r\n  useLocalSearchParams: () => ({}),\r\n  useNavigation: () => ({\r\n    navigate: jest.fn(),\r\n    goBack: jest.fn(),\r\n    canGoBack: jest.fn(() => true),\r\n    addListener: jest.fn(),\r\n    isFocused: jest.fn(() => true),\r\n  }),\r\n}));\r\n\r\n// Mock des hooks\r\njest.mock('../../src/hooks/useLastActivity', () => () => ({\r\n  lastActivity: null,\r\n  isLoading: false,\r\n  saveActivity: jest.fn(),\r\n  clearActivity: jest.fn(),\r\n  reload: jest.fn(),\r\n}));\r\n\r\njest.mock('../../src/hooks/useActivityMetrics', () => () => ({\r\n  currentStreak: 5,\r\n  wordsToday: 0,\r\n  timeToday: 0,\r\n  isLoading: false,\r\n}));\r\n\r\n// Mock du ProgressContext avec état simulé\r\nlet mockProgressState = {\r\n  levels: {},\r\n  exercises: {},\r\n  stats: {},\r\n  lastActivity: {}\r\n};\r\n\r\nconst mockUpdateExerciseProgress = jest.fn((exerciseType, level, completed) => {\r\n  // Simuler la mise à jour de l'état\r\n  if (!mockProgressState.exercises[exerciseType]) {\r\n    mockProgressState.exercises[exerciseType] = {};\r\n  }\r\n  if (!mockProgressState.exercises[exerciseType][level]) {\r\n    mockProgressState.exercises[exerciseType][level] = { completed: 0, total: 100 };\r\n  }\r\n  mockProgressState.exercises[exerciseType][level].completed = completed;\r\n  \r\n  // Mettre à jour la progression du niveau\r\n  if (!mockProgressState.levels[level]) {\r\n    mockProgressState.levels[level] = {};\r\n  }\r\n  mockProgressState.levels[level][exerciseType] = completed;\r\n});\r\n\r\njest.mock('../../src/contexts/ProgressContext', () => ({\r\n  ...jest.requireActual('../../src/contexts/ProgressContext'),\r\n  useProgress: () => ({\r\n    progress: mockProgressState,\r\n    isLoading: false,\r\n    updateExerciseProgress: mockUpdateExerciseProgress,\r\n    calculateGlobalProgress: () => {\r\n      const levels = Object.values(mockProgressState.levels);\r\n      if (levels.length === 0) return 0;\r\n      const total = levels.reduce((sum, level) => {\r\n        const exercises = Object.values(level);\r\n        if (exercises.length === 0) return sum;\r\n        return sum + exercises.reduce((levelSum, progress) => levelSum + (progress || 0), 0) / exercises.length;\r\n      }, 0);\r\n      return Math.round(total / levels.length);\r\n    },\r\n    calculateLevelProgress: (level) => {\r\n      const levelData = mockProgressState.levels[level];\r\n      if (!levelData || Object.keys(levelData).length === 0) return 0;\r\n      const total = Object.values(levelData).reduce((sum, progress) => sum + (progress || 0), 0);\r\n      return Math.round(total / Object.keys(levelData).length);\r\n    },\r\n  }),\r\n}));\r\n\r\n// Composant de test pour simuler les métriques en temps réel\r\nconst FakeMetricsDisplay = () => {\r\n  const { progress, updateExerciseProgress } = useProgress();\r\n  const [localProgress, setLocalProgress] = React.useState({\r\n    vocabulary: 0,\r\n    grammar: 0,\r\n    reading: 0\r\n  });\r\n\r\n  const simulateVocabularyProgress = () => {\r\n    updateExerciseProgress('vocabulary', 'A1', 80);\r\n    setLocalProgress(prev => ({ ...prev, vocabulary: 80 }));\r\n  };\r\n\r\n  const simulateGrammarProgress = () => {\r\n    updateExerciseProgress('grammar', 'A1', 60);\r\n    setLocalProgress(prev => ({ ...prev, grammar: 60 }));\r\n  };\r\n\r\n  const simulateReadingProgress = () => {\r\n    updateExerciseProgress('reading', 'A1', 40);\r\n    setLocalProgress(prev => ({ ...prev, reading: 40 }));\r\n  };\r\n\r\n  const simulateMultipleUpdates = () => {\r\n    act(() => {\r\n      updateExerciseProgress('vocabulary', 'A1', 90);\r\n      updateExerciseProgress('grammar', 'A1', 70);\r\n      updateExerciseProgress('reading', 'A1', 50);\r\n      setLocalProgress({ vocabulary: 90, grammar: 70, reading: 50 });\r\n    });\r\n  };\r\n\r\n  // Calculer la progression globale\r\n  const overallProgress = localProgress.vocabulary + localProgress.grammar + localProgress.reading > 0\r\n    ? Math.round((localProgress.vocabulary + localProgress.grammar + localProgress.reading) / 3)\r\n    : 0;\r\n\r\n  return (\r\n    <View>\r\n      <Text testID=\"overall-progress\">\r\n        Progression globale: {overallProgress}%\r\n      </Text>\r\n      <Text testID=\"vocabulary-progress\">\r\n        Vocabulaire: {localProgress.vocabulary}%\r\n      </Text>\r\n      <Text testID=\"grammar-progress\">\r\n        Grammaire: {localProgress.grammar}%\r\n      </Text>\r\n      <Text testID=\"reading-progress\">\r\n        Lecture: {localProgress.reading}%\r\n      </Text>\r\n      \r\n      <TouchableOpacity testID=\"vocabulary-button\" onPress={simulateVocabularyProgress}>\r\n        <Text>Progression Vocabulaire</Text>\r\n      </TouchableOpacity>\r\n      \r\n      <TouchableOpacity testID=\"grammar-button\" onPress={simulateGrammarProgress}>\r\n        <Text>Progression Grammaire</Text>\r\n      </TouchableOpacity>\r\n      \r\n      <TouchableOpacity testID=\"reading-button\" onPress={simulateReadingProgress}>\r\n        <Text>Progression Lecture</Text>\r\n      </TouchableOpacity>\r\n      \r\n      <TouchableOpacity testID=\"multiple-updates\" onPress={simulateMultipleUpdates}>\r\n        <Text>Mises à jour multiples</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\n// Composant de test pour vérifier la synchronisation\r\nconst FakeMetricsObserver = () => {\r\n  const [localProgress, setLocalProgress] = React.useState({\r\n    vocabulary: 0,\r\n    grammar: 0,\r\n    reading: 0\r\n  });\r\n\r\n  // Simuler la synchronisation en écoutant les clics sur les boutons\r\n  const handleVocabularyClick = () => {\r\n    setLocalProgress(prev => ({ ...prev, vocabulary: 80 }));\r\n  };\r\n\r\n  const handleGrammarClick = () => {\r\n    setLocalProgress(prev => ({ ...prev, grammar: 60 }));\r\n  };\r\n\r\n  const handleReadingClick = () => {\r\n    setLocalProgress(prev => ({ ...prev, reading: 40 }));\r\n  };\r\n\r\n  const handleMultipleUpdates = () => {\r\n    setLocalProgress({ vocabulary: 90, grammar: 70, reading: 50 });\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      <Text testID=\"observer-vocabulary\">\r\n        Obs: {localProgress.vocabulary}%\r\n      </Text>\r\n      <Text testID=\"observer-grammar\">\r\n        Obs: {localProgress.grammar}%\r\n      </Text>\r\n      <Text testID=\"observer-reading\">\r\n        Obs: {localProgress.reading}%\r\n      </Text>\r\n      \r\n      <TouchableOpacity testID=\"observer-vocabulary-button\" onPress={handleVocabularyClick}>\r\n        <Text>Observer Vocabulaire</Text>\r\n      </TouchableOpacity>\r\n      \r\n      <TouchableOpacity testID=\"observer-grammar-button\" onPress={handleGrammarClick}>\r\n        <Text>Observer Grammaire</Text>\r\n      </TouchableOpacity>\r\n      \r\n      <TouchableOpacity testID=\"observer-reading-button\" onPress={handleReadingClick}>\r\n        <Text>Observer Lecture</Text>\r\n      </TouchableOpacity>\r\n      \r\n      <TouchableOpacity testID=\"observer-multiple-updates\" onPress={handleMultipleUpdates}>\r\n        <Text>Observer Mises à jour multiples</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\ndescribe('Scénario 1: Métriques en temps réel - Mise à jour instantanée', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    // Reset de l'état mock\r\n    mockProgressState = {\r\n      levels: {},\r\n      exercises: {},\r\n      stats: {},\r\n      lastActivity: {}\r\n    };\r\n  });\r\n\r\n  it(\"devrait mettre à jour les métriques instantanément après modification\", async () => {\r\n    const { getByTestId } = render(\r\n      <ThemeProvider>\r\n        <ProgressProvider>\r\n          <FakeMetricsDisplay />\r\n        </ProgressProvider>\r\n      </ThemeProvider>\r\n    );\r\n\r\n    // Vérifier l'état initial\r\n    expect(getByTestId('vocabulary-progress')).toHaveTextContent('Vocabulaire: 0%');\r\n    expect(getByTestId('grammar-progress')).toHaveTextContent('Grammaire: 0%');\r\n    expect(getByTestId('reading-progress')).toHaveTextContent('Lecture: 0%');\r\n\r\n    // Simuler la progression en vocabulaire\r\n    fireEvent.press(getByTestId('vocabulary-button'));\r\n\r\n    await waitFor(() => {\r\n      expect(getByTestId('vocabulary-progress')).toHaveTextContent('Vocabulaire: 80%');\r\n    });\r\n\r\n    // Simuler la progression en grammaire\r\n    fireEvent.press(getByTestId('grammar-button'));\r\n\r\n    await waitFor(() => {\r\n      expect(getByTestId('grammar-progress')).toHaveTextContent('Grammaire: 60%');\r\n    });\r\n\r\n    // Simuler la progression en lecture\r\n    fireEvent.press(getByTestId('reading-button'));\r\n\r\n    await waitFor(() => {\r\n      expect(getByTestId('reading-progress')).toHaveTextContent('Lecture: 40%');\r\n    });\r\n  });\r\n\r\n  it(\"devrait calculer correctement la progression globale\", async () => {\r\n    const { getByTestId } = render(\r\n      <ThemeProvider>\r\n        <ProgressProvider>\r\n          <FakeMetricsDisplay />\r\n        </ProgressProvider>\r\n      </ThemeProvider>\r\n    );\r\n\r\n    // Vérifier l'état initial\r\n    expect(getByTestId('overall-progress')).toHaveTextContent('Progression globale: 0%');\r\n\r\n    // Simuler des progressions\r\n    fireEvent.press(getByTestId('vocabulary-button')); // 80%\r\n    fireEvent.press(getByTestId('grammar-button'));    // 60%\r\n    fireEvent.press(getByTestId('reading-button'));    // 40%\r\n\r\n    await waitFor(() => {\r\n      // (80 + 60 + 40) / 3 = 60%\r\n      expect(getByTestId('overall-progress')).toHaveTextContent('Progression globale: 60%');\r\n    });\r\n  });\r\n});\r\n\r\ndescribe('Scénario 2: Synchronisation entre composants', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    // Reset de l'état mock\r\n    mockProgressState = {\r\n      levels: {},\r\n      exercises: {},\r\n      stats: {},\r\n      lastActivity: {}\r\n    };\r\n  });\r\n\r\n  it(\"devrait synchroniser les métriques entre plusieurs composants\", async () => {\r\n    const { getByTestId } = render(\r\n      <ThemeProvider>\r\n        <ProgressProvider>\r\n          <CurrentLevelProvider>\r\n            <FakeMetricsDisplay />\r\n            <FakeMetricsObserver />\r\n          </CurrentLevelProvider>\r\n        </ProgressProvider>\r\n      </ThemeProvider>\r\n    );\r\n\r\n    // Vérifier que les deux composants sont rendus\r\n    expect(getByTestId('vocabulary-progress')).toBeTruthy();\r\n    expect(getByTestId('observer-vocabulary')).toBeTruthy();\r\n\r\n    // Vérifier l'état initial synchronisé\r\n    expect(getByTestId('vocabulary-progress')).toHaveTextContent('Vocabulaire: 0%');\r\n    expect(getByTestId('observer-vocabulary')).toHaveTextContent('Obs: 0%');\r\n\r\n    // Simuler une mise à jour dans le composant principal\r\n    fireEvent.press(getByTestId('vocabulary-button'));\r\n\r\n    await waitFor(() => {\r\n      // Le composant principal devrait être mis à jour\r\n      expect(getByTestId('vocabulary-progress')).toHaveTextContent('Vocabulaire: 80%');\r\n    });\r\n\r\n    // Simuler une mise à jour dans le composant observer\r\n    fireEvent.press(getByTestId('observer-vocabulary-button'));\r\n\r\n    await waitFor(() => {\r\n      // Le composant observer devrait être mis à jour\r\n      expect(getByTestId('observer-vocabulary')).toHaveTextContent('Obs: 80%');\r\n    });\r\n  });\r\n\r\n  it(\"devrait maintenir la cohérence lors de mises à jour multiples\", async () => {\r\n    const { getByTestId } = render(\r\n      <ThemeProvider>\r\n        <ProgressProvider>\r\n          <CurrentLevelProvider>\r\n            <FakeMetricsDisplay />\r\n            <FakeMetricsObserver />\r\n          </CurrentLevelProvider>\r\n        </ProgressProvider>\r\n      </ThemeProvider>\r\n    );\r\n\r\n    // Simuler des mises à jour multiples\r\n    fireEvent.press(getByTestId('multiple-updates'));\r\n\r\n    await waitFor(() => {\r\n      // Vérifier que tous les composants sont synchronisés\r\n      expect(getByTestId('vocabulary-progress')).toHaveTextContent('Vocabulaire: 90%');\r\n      expect(getByTestId('observer-vocabulary')).toHaveTextContent('Obs: 90%');\r\n      \r\n      expect(getByTestId('grammar-progress')).toHaveTextContent('Grammaire: 70%');\r\n      expect(getByTestId('observer-grammar')).toHaveTextContent('Obs: 70%');\r\n      \r\n      expect(getByTestId('reading-progress')).toHaveTextContent('Lecture: 50%');\r\n      expect(getByTestId('observer-reading')).toHaveTextContent('Obs: 50%');\r\n    });\r\n  });\r\n});\r\n\r\ndescribe('Scénario 3: Performance et réactivité', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    // Reset de l'état mock\r\n    mockProgressState = {\r\n      levels: {},\r\n      exercises: {},\r\n      stats: {},\r\n      lastActivity: {}\r\n    };\r\n  });\r\n\r\n  it(\"devrait gérer les mises à jour rapides sans perte de données\", async () => {\r\n    const { getByTestId } = render(\r\n      <ThemeProvider>\r\n        <ProgressProvider>\r\n          <FakeMetricsDisplay />\r\n        </ProgressProvider>\r\n      </ThemeProvider>\r\n    );\r\n\r\n    // Simuler des mises à jour très rapides\r\n    act(() => {\r\n      fireEvent.press(getByTestId('vocabulary-button'));\r\n      fireEvent.press(getByTestId('grammar-button'));\r\n      fireEvent.press(getByTestId('reading-button'));\r\n    });\r\n\r\n    await waitFor(() => {\r\n      // Toutes les mises à jour devraient être prises en compte\r\n      expect(getByTestId('vocabulary-progress')).toHaveTextContent('Vocabulaire: 80%');\r\n      expect(getByTestId('grammar-progress')).toHaveTextContent('Grammaire: 60%');\r\n      expect(getByTestId('reading-progress')).toHaveTextContent('Lecture: 40%');\r\n    });\r\n  });\r\n\r\n  it(\"devrait maintenir la cohérence des données lors de stress\", async () => {\r\n    const { getByTestId } = render(\r\n      <ThemeProvider>\r\n        <ProgressProvider>\r\n          <FakeMetricsDisplay />\r\n        </ProgressProvider>\r\n      </ThemeProvider>\r\n    );\r\n\r\n    // Simuler un stress test avec beaucoup de mises à jour\r\n    for (let i = 0; i < 10; i++) {\r\n      act(() => {\r\n        fireEvent.press(getByTestId('vocabulary-button'));\r\n      });\r\n    }\r\n\r\n    await waitFor(() => {\r\n      // La dernière valeur devrait être correcte\r\n      expect(getByTestId('vocabulary-progress')).toHaveTextContent('Vocabulaire: 80%');\r\n    });\r\n  });\r\n});\r\n\r\ndescribe('Scénario 4: Gestion des erreurs et cas limites', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    // Reset de l'état mock\r\n    mockProgressState = {\r\n      levels: {},\r\n      exercises: {},\r\n      stats: {},\r\n      lastActivity: {}\r\n    };\r\n  });\r\n\r\n  it(\"devrait gérer les valeurs de progression invalides\", async () => {\r\n    const { getByTestId } = render(\r\n      <ThemeProvider>\r\n        <ProgressProvider>\r\n          <FakeMetricsDisplay />\r\n        </ProgressProvider>\r\n      </ThemeProvider>\r\n    );\r\n\r\n    // Vérifier l'état initial\r\n    expect(getByTestId('overall-progress')).toHaveTextContent('Progression globale: 0%');\r\n\r\n    // Simuler des progressions avec des valeurs extrêmes\r\n    act(() => {\r\n      // Ces valeurs devraient être gérées correctement\r\n      fireEvent.press(getByTestId('vocabulary-button')); // 80%\r\n    });\r\n\r\n    await waitFor(() => {\r\n      expect(getByTestId('overall-progress')).toHaveTextContent('Progression globale: 80%');\r\n    });\r\n  });\r\n\r\n  it(\"devrait gérer l'absence de données de progression\", async () => {\r\n    const { getByTestId } = render(\r\n      <ThemeProvider>\r\n        <ProgressProvider>\r\n          <FakeMetricsDisplay />\r\n        </ProgressProvider>\r\n      </ThemeProvider>\r\n    );\r\n\r\n    // Vérifier que l'application fonctionne même sans données\r\n    expect(getByTestId('overall-progress')).toHaveTextContent('Progression globale: 0%');\r\n    expect(getByTestId('vocabulary-progress')).toHaveTextContent('Vocabulaire: 0%');\r\n    expect(getByTestId('grammar-progress')).toHaveTextContent('Grammaire: 0%');\r\n    expect(getByTestId('reading-progress')).toHaveTextContent('Lecture: 0%');\r\n  });\r\n});\r\n"],"mappings":"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","ignoreList":[]}