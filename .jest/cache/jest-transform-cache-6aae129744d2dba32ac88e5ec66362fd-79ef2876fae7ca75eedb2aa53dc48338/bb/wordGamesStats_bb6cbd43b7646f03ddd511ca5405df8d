50d9148f7518474c7736a812625586b6
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPerformanceLevel = exports.generateFeedbackMessage = exports.calculateTotalScore = exports.calculateTotalProgress = exports.calculateTotalGames = exports.calculateMaxPossibleScore = exports.calculateGameTypeStats = exports.calculateGameTypeProgress = exports.calculateFinalScore = exports.calculateCurrentProgress = exports.calculateCompletedGamesCount = exports.calculateCompleteStats = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var calculateTotalGames = exports.calculateTotalGames = function calculateTotalGames() {
  var wordGamesData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var games = wordGamesData.games || [];
  return games.length;
};
var calculateCompletedGamesCount = exports.calculateCompletedGamesCount = function calculateCompletedGamesCount() {
  var completedGames = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return Object.values(completedGames).filter(function (game) {
    return game.completed;
  }).length;
};
var calculateTotalScore = exports.calculateTotalScore = function calculateTotalScore() {
  var gameResults = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return gameResults.reduce(function (total, result) {
    return total + (result.score || 0);
  }, 0);
};
var calculateMaxPossibleScore = exports.calculateMaxPossibleScore = function calculateMaxPossibleScore() {
  var wordGamesData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var games = wordGamesData.games || [];
  return games.reduce(function (total, game) {
    return total + (game.maxScore || 10);
  }, 0);
};
var calculateTotalProgress = exports.calculateTotalProgress = function calculateTotalProgress() {
  var wordGamesData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var completedGames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var totalGames = calculateTotalGames(wordGamesData);
  var completedCount = calculateCompletedGamesCount(completedGames);
  return totalGames > 0 ? Math.min(100, completedCount / totalGames * 100) : 0;
};
var calculateCurrentProgress = exports.calculateCurrentProgress = function calculateCurrentProgress() {
  var currentGameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var totalGames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return totalGames > 0 ? (currentGameIndex + 1) / totalGames * 100 : 0;
};
var calculateGameTypeProgress = exports.calculateGameTypeProgress = function calculateGameTypeProgress() {
  var wordGamesData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var completedGames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var games = wordGamesData.games || [];
  var gamesByType = games.reduce(function (acc, game, index) {
    var type = game.type || 'unknown';
    if (!acc[type]) {
      acc[type] = {
        games: [],
        indices: []
      };
    }
    acc[type].games.push(game);
    acc[type].indices.push(index);
    return acc;
  }, {});
  return Object.entries(gamesByType).map(function (_ref) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
      type = _ref2[0],
      data = _ref2[1];
    var totalInType = data.games.length;
    var completedInType = data.indices.filter(function (index) {
      var _completedGames$index;
      return (_completedGames$index = completedGames[index]) == null ? void 0 : _completedGames$index.completed;
    }).length;
    var progress = totalInType > 0 ? completedInType / totalInType * 100 : 0;
    return {
      title: type.charAt(0).toUpperCase() + type.slice(1),
      totalGames: totalInType,
      completedGames: completedInType,
      progress: Math.round(progress)
    };
  });
};
var calculateFinalScore = exports.calculateFinalScore = function calculateFinalScore() {
  var gameResults = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var totalScore = calculateTotalScore(gameResults);
  var totalMaxScore = gameResults.reduce(function (sum, result) {
    return sum + (result.maxScore || 0);
  }, 0);
  return {
    score: totalScore,
    maxScore: totalMaxScore,
    percentage: totalMaxScore > 0 ? totalScore / totalMaxScore * 100 : 0
  };
};
var getPerformanceLevel = exports.getPerformanceLevel = function getPerformanceLevel(percentage) {
  if (percentage >= 90) return {
    level: 'perfect',
    color: '#059669',
    message: '🏆 Perfect! Outstanding word skills!',
    description: 'You absolutely nailed it!'
  };
  if (percentage >= 80) return {
    level: 'excellent',
    color: '#16a34a',
    message: '🌟 Excellent! Great word mastery!',
    description: 'You have excellent vocabulary skills!'
  };
  if (percentage >= 70) return {
    level: 'good',
    color: '#65a30d',
    message: '👍 Good job! Solid performance!',
    description: 'Keep up the good work!'
  };
  if (percentage >= 60) return {
    level: 'fair',
    color: '#ea580c',
    message: '👌 Not bad! Room for improvement!',
    description: 'Practice makes perfect!'
  };
  if (percentage >= 40) return {
    level: 'needs_work',
    color: '#dc2626',
    message: '📚 Keep practicing!',
    description: 'Focus on building your vocabulary!'
  };
  return {
    level: 'poor',
    color: '#b91c1c',
    message: '💪 Don\'t give up!',
    description: 'Everyone starts somewhere. Keep going!'
  };
};
var calculateGameTypeStats = exports.calculateGameTypeStats = function calculateGameTypeStats() {
  var wordGamesData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var gameResults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var games = wordGamesData.games || [];
  var statsByType = {};
  games.forEach(function (game, index) {
    var type = game.type || 'unknown';
    var result = gameResults[index] || {
      score: 0,
      maxScore: 0
    };
    if (!statsByType[type]) {
      statsByType[type] = {
        type: type,
        totalScore: 0,
        totalMaxScore: 0,
        gamesCount: 0,
        completedCount: 0
      };
    }
    statsByType[type].totalScore += result.score;
    statsByType[type].totalMaxScore += result.maxScore;
    statsByType[type].gamesCount += 1;
    if (result.completed) {
      statsByType[type].completedCount += 1;
    }
  });
  return Object.values(statsByType).map(function (stat) {
    return Object.assign({}, stat, {
      percentage: stat.totalMaxScore > 0 ? stat.totalScore / stat.totalMaxScore * 100 : 0,
      completion: stat.gamesCount > 0 ? stat.completedCount / stat.gamesCount * 100 : 0
    });
  });
};
var calculateCompleteStats = exports.calculateCompleteStats = function calculateCompleteStats() {
  var wordGamesData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var gameResults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var completedGames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var currentGameIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var totalGames = calculateTotalGames(wordGamesData);
  var completedGamesCount = calculateCompletedGamesCount(completedGames);
  var totalProgress = calculateTotalProgress(wordGamesData, completedGames);
  var currentProgress = calculateCurrentProgress(currentGameIndex, totalGames);
  var finalScore = calculateFinalScore(gameResults);
  var performance = getPerformanceLevel(finalScore.percentage);
  var gameTypeProgress = calculateGameTypeProgress(wordGamesData, completedGames);
  var gameTypeStats = calculateGameTypeStats(wordGamesData, gameResults);
  return {
    totalGames: totalGames,
    completedGamesCount: completedGamesCount,
    totalProgress: totalProgress,
    currentProgress: currentProgress,
    finalScore: finalScore,
    performance: performance,
    gameTypeProgress: gameTypeProgress,
    gameTypeStats: gameTypeStats,
    completionRate: totalGames > 0 ? completedGamesCount / totalGames * 100 : 0,
    averageScore: completedGamesCount > 0 ? finalScore.score / completedGamesCount : 0
  };
};
var generateFeedbackMessage = exports.generateFeedbackMessage = function generateFeedbackMessage(finalScore, gameTypeStats) {
  var performance = getPerformanceLevel(finalScore.percentage);
  var message = `${performance.message}\n\n`;
  if (gameTypeStats.length > 1) {
    var bestType = gameTypeStats.reduce(function (best, current) {
      return current.percentage > best.percentage ? current : best;
    });
    var worstType = gameTypeStats.reduce(function (worst, current) {
      return current.percentage < worst.percentage ? current : worst;
    });
    if (bestType.percentage > worstType.percentage + 20) {
      message += `You excel at ${bestType.type} games! `;
      message += `Consider practicing more ${worstType.type} games to improve your overall score.`;
    }
  }
  return message.trim();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,