{"version":3,"names":["_reactNative","require","_expoLinearGradient","_vectorIcons","_propTypes","_interopRequireDefault","_HeroCard","_ContentSection","_style","_react","_jsxRuntime","getOptionStyles","showFeedback","isCorrectOption","isSelectedOption","isCorrect","levelColor","getOptionIcon","jsx","Ionicons","name","size","color","getOptionTextStyles","styles","textStyles","optionText","push","correctOptionText","incorrectOptionText","selectedOptionText","getInputStyles","inputText","exerciseAnswer","baseStyle","inputStyles","trim","toLowerCase","correctInput","incorrectInput","neutralInput","OptionItem","_ref","option","index","exercise","selectedOption","onPress","answer","gradientColors","optionIcon","TouchableOpacity","style","optionContainer","disabled","activeOpacity","children","LinearGradient","colors","start","x","y","end","optionGradient","jsxs","View","optionInner","optionIconContainer","Text","ExerciseContent","_ref2","title","content","_ref2$isItalic","isItalic","Fragment","default","question","fontSize","showUnderline","sentence","backgroundColor","showIcon","GrammarExerciseRenderer","_ref3","setSelectedOption","setInputText","exerciseIndex","attempts","createStyles","handleChangeText1","useCallback","text","handleChangeText2","handleOptionPress","getOptionPressHandler","renderMultipleChoiceExercise","_exercise$sentence","container","replace","optionsSection","options","map","renderFillBlankExercise","inputSection","TextInput","fillBlankInput","value","onChangeText","placeholder","editable","autoCapitalize","autoCorrect","renderTransformationExercise","transformationInput","multiline","type","propTypes","PropTypes","shape","string","isRequired","arrayOf","oneOfType","number","oneOf","func","bool","_default","exports"],"sources":["index.js"],"sourcesContent":["// GrammarExerciseRenderer/index.js - REFACTORISÃ‰ pour rÃ©duire la complexitÃ© cognitive\r\n\r\nimport { View, Text, TouchableOpacity, TextInput } from \"react-native\";\r\nimport { LinearGradient } from \"expo-linear-gradient\";\r\nimport { Ionicons } from \"@expo/vector-icons\";\r\nimport PropTypes from 'prop-types';\r\nimport HeroCard from \"../../../../components/ui/HeroCard\";\r\nimport ContentSection from \"../../../../components/ui/ContentSection\";\r\nimport createStyles from \"./style\";\r\nimport { useCallback } from 'react';\r\n\r\n// Fonction pour obtenir les styles d'une option\r\nconst getOptionStyles = (showFeedback, isCorrectOption, isSelectedOption, isCorrect, levelColor) => {\r\n  if (showFeedback && isCorrectOption) {\r\n    return ['#10B981', '#059669', '#047857']; // Vert pour correct\r\n  }\r\n  if (showFeedback && isSelectedOption && !isCorrectOption) {\r\n    return ['#EF4444', '#DC2626', '#B91C1C']; // Rouge pour incorrect\r\n  }\r\n  if (isSelectedOption) {\r\n    return [levelColor, `${levelColor}E6`, `${levelColor}CC`]; // Bleu pour sÃ©lectionnÃ©\r\n  }\r\n  return ['#FFFFFF', '#F8FAFC', '#F1F5F9']; // Neutre\r\n};\r\n\r\n// Fonction pour obtenir l'icÃ´ne d'une option\r\nconst getOptionIcon = (showFeedback, isCorrectOption, isSelectedOption, isCorrect) => {\r\n  if (showFeedback && isCorrectOption) {\r\n    return <Ionicons name=\"checkmark-circle\" size={20} color=\"white\" />;\r\n  }\r\n  if (showFeedback && isSelectedOption && !isCorrectOption) {\r\n    return <Ionicons name=\"close-circle\" size={20} color=\"white\" />;\r\n  }\r\n  if (isSelectedOption) {\r\n    return <Ionicons name=\"radio-button-on\" size={20} color=\"white\" />;\r\n  }\r\n  return <Ionicons name=\"radio-button-off\" size={20} color=\"#9CA3AF\" />;\r\n};\r\n\r\n// Fonction pour obtenir les styles de texte d'une option\r\nconst getOptionTextStyles = (showFeedback, isCorrectOption, isSelectedOption, isCorrect, styles) => {\r\n  const textStyles = [styles.optionText];\r\n  \r\n  if (showFeedback && isCorrectOption) {\r\n    textStyles.push(styles.correctOptionText);\r\n  }\r\n  if (showFeedback && isSelectedOption && !isCorrectOption) {\r\n    textStyles.push(styles.incorrectOptionText);\r\n  }\r\n  if (isSelectedOption && !showFeedback) {\r\n    textStyles.push(styles.selectedOptionText);\r\n  }\r\n  \r\n  return textStyles;\r\n};\r\n\r\n// Fonction pour obtenir les styles d'input\r\nconst getInputStyles = (showFeedback, inputText, exerciseAnswer, isCorrect, styles, baseStyle) => {\r\n  const inputStyles = [baseStyle];\r\n  \r\n  if (showFeedback && inputText.trim().toLowerCase() === exerciseAnswer.toLowerCase()) {\r\n    inputStyles.push(styles.correctInput);\r\n  } else if (showFeedback && !isCorrect) {\r\n    inputStyles.push(styles.incorrectInput);\r\n  } else {\r\n    inputStyles.push(styles.neutralInput);\r\n  }\r\n  \r\n  return inputStyles;\r\n};\r\n\r\n// Composant pour rendre une option individuelle\r\nconst OptionItem = ({ option, index, exercise, selectedOption, showFeedback, isCorrect, onPress, styles, levelColor }) => {\r\n  const isCorrectOption = index === exercise.answer || option === exercise.answer;\r\n  const isSelectedOption = selectedOption === index;\r\n  \r\n  const gradientColors = getOptionStyles(showFeedback, isCorrectOption, isSelectedOption, isCorrect, levelColor);\r\n  const optionIcon = getOptionIcon(showFeedback, isCorrectOption, isSelectedOption, isCorrect);\r\n  const textStyles = getOptionTextStyles(showFeedback, isCorrectOption, isSelectedOption, isCorrect, styles);\r\n  \r\n  return (\r\n    <TouchableOpacity\r\n      key={option}\r\n      style={styles.optionContainer}\r\n      onPress={onPress}\r\n      disabled={showFeedback && isCorrect}\r\n      activeOpacity={0.8}\r\n    >\r\n      <LinearGradient\r\n        colors={gradientColors}\r\n        start={{ x: 0, y: 0 }}\r\n        end={{ x: 1, y: 1 }}\r\n        style={styles.optionGradient}\r\n      >\r\n        <View style={styles.optionInner}>\r\n          <View style={styles.optionIconContainer}>\r\n            {optionIcon}\r\n          </View>\r\n          <Text style={textStyles}>\r\n            {option}\r\n          </Text>\r\n        </View>\r\n      </LinearGradient>\r\n    </TouchableOpacity>\r\n  );\r\n};\r\n\r\n// Composant pour le contenu commun des exercices\r\nconst ExerciseContent = ({ exercise, levelColor, title, content, isItalic = false }) => (\r\n  <>\r\n    <HeroCard \r\n      content={exercise.question}\r\n      fontSize={24}\r\n      levelColor={levelColor}\r\n      showUnderline\r\n    />\r\n    \r\n    {exercise.sentence && (\r\n      <ContentSection\r\n        title={title}\r\n        content={content || exercise.sentence}\r\n        levelColor={levelColor}\r\n        backgroundColor=\"#F8FAFC\"\r\n        isItalic={isItalic}\r\n        showIcon={false}\r\n      />\r\n    )}\r\n  </>\r\n);\r\n\r\n/**\r\n * ðŸŽ¯ GrammarExerciseRenderer - Version RefactorisÃ©e avec composants gÃ©nÃ©riques\r\n * Utilise HeroCard pour la question principale\r\n * Design cohÃ©rent avec VocabularyWordCard et PhraseCard\r\n * ComplexitÃ© cognitive rÃ©duite de 19 Ã  15\r\n */\r\nconst GrammarExerciseRenderer = ({\r\n  exercise,\r\n  selectedOption,\r\n  setSelectedOption,\r\n  inputText,\r\n  setInputText,\r\n  showFeedback,\r\n  isCorrect,\r\n  exerciseIndex,\r\n  attempts,\r\n}) => {\r\n  if (!exercise) return null;\r\n\r\n  const styles = createStyles();\r\n  const levelColor = \"#3b82f6\"; // Couleur Grammar\r\n\r\n  // Remplace les fonctions flÃ©chÃ©es inline par des callbacks mÃ©morisÃ©s\r\n  const handleChangeText1 = useCallback((text) => {\r\n    if (!showFeedback) setInputText(text);\r\n  }, [showFeedback, setInputText]);\r\n\r\n  const handleChangeText2 = useCallback((text) => {\r\n    if (!showFeedback) setInputText(text);\r\n  }, [showFeedback, setInputText]);\r\n\r\n  const handleOptionPress = useCallback((index) => {\r\n    if (!showFeedback) setSelectedOption(index);\r\n  }, [showFeedback, setSelectedOption]);\r\n\r\n  // Handler stable pour chaque option\r\n  const getOptionPressHandler = useCallback(\r\n    (index) => () => handleOptionPress(index),\r\n    [handleOptionPress]\r\n  );\r\n\r\n  // Render pour un exercice Ã  choix multiples\r\n  const renderMultipleChoiceExercise = () => (\r\n    <View style={styles.container}>\r\n      <ExerciseContent \r\n        exercise={exercise}\r\n        levelColor={levelColor}\r\n        title=\"Complete the sentence\"\r\n        content={exercise.sentence?.replace(\"___\", \"______\")}\r\n      />\r\n\r\n      <View style={styles.optionsSection}>\r\n        {exercise.options.map((option, index) => (\r\n          <OptionItem\r\n            key={option}\r\n            option={option}\r\n            index={index}\r\n            exercise={exercise}\r\n            selectedOption={selectedOption}\r\n            showFeedback={showFeedback}\r\n            isCorrect={isCorrect}\r\n            onPress={getOptionPressHandler(index)}\r\n            styles={styles}\r\n            levelColor={levelColor}\r\n          />\r\n        ))}\r\n      </View>\r\n    </View>\r\n  );\r\n\r\n  // Render pour un exercice Ã  remplir les blancs\r\n  const renderFillBlankExercise = () => (\r\n    <View style={styles.container}>\r\n      <ExerciseContent \r\n        exercise={exercise}\r\n        levelColor={levelColor}\r\n        title=\"Complete the sentence\"\r\n        content={exercise.sentence || \"Fill in the blank\"}\r\n      />\r\n\r\n      <View style={styles.inputSection}>\r\n        <TextInput\r\n          key={`fill-blank-input-${exerciseIndex}-${attempts}`}\r\n          style={getInputStyles(showFeedback, inputText, exercise.answer, isCorrect, styles, styles.fillBlankInput)}\r\n          value={inputText}\r\n          onChangeText={handleChangeText1}\r\n          placeholder=\"Type your answer...\"\r\n          editable={!showFeedback || !isCorrect}\r\n          autoCapitalize=\"none\"\r\n          autoCorrect={false}\r\n        />\r\n      </View>\r\n    </View>\r\n  );\r\n\r\n  // Render pour un exercice de transformation\r\n  const renderTransformationExercise = () => (\r\n    <View style={styles.container}>\r\n      <ExerciseContent \r\n        exercise={exercise}\r\n        levelColor={levelColor}\r\n        title=\"Transform this sentence\"\r\n        content={exercise.sentence}\r\n        isItalic={true}\r\n      />\r\n\r\n      <View style={styles.inputSection}>\r\n        <TextInput\r\n          key={`transformation-input-${exerciseIndex}-${attempts}`}\r\n          style={getInputStyles(showFeedback, inputText, exercise.answer, isCorrect, styles, styles.transformationInput)}\r\n          value={inputText}\r\n          onChangeText={handleChangeText2}\r\n          placeholder=\"Write your transformed sentence...\"\r\n          editable={!showFeedback || !isCorrect}\r\n          multiline\r\n          autoCapitalize=\"none\"\r\n          autoCorrect={false}\r\n        />\r\n      </View>\r\n    </View>\r\n  );\r\n\r\n  // DÃ©terminer quel type d'exercice afficher\r\n  if (exercise.type === \"fillInTheBlank\" && exercise.options) {\r\n    return renderMultipleChoiceExercise();\r\n  } else if (exercise.type === \"fillInTheBlank\") {\r\n    return renderFillBlankExercise();\r\n  } else if (exercise.type === \"transformation\") {\r\n    return renderTransformationExercise();\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\n// PropTypes pour le composant principal GrammarExerciseRenderer\r\nGrammarExerciseRenderer.propTypes = {\r\n  exercise: PropTypes.shape({\r\n    question: PropTypes.string.isRequired,\r\n    sentence: PropTypes.string,\r\n    options: PropTypes.arrayOf(PropTypes.string),\r\n    answer: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n    type: PropTypes.oneOf(['fillInTheBlank', 'transformation']).isRequired,\r\n  }),\r\n  selectedOption: PropTypes.number,\r\n  setSelectedOption: PropTypes.func.isRequired,\r\n  inputText: PropTypes.string,\r\n  setInputText: PropTypes.func.isRequired,\r\n  showFeedback: PropTypes.bool,\r\n  isCorrect: PropTypes.bool,\r\n  exerciseIndex: PropTypes.number,\r\n  attempts: PropTypes.number,\r\n};\r\n\r\nexport default GrammarExerciseRenderer;"],"mappings":"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","ignoreList":[]}