66107e7e5e349fd9a9a9e64d0319ef6d
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn()
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
_getJestObj().mock('react-native', function () {
  var ReactNative = jest.requireActual('react-native');
  return Object.assign({}, ReactNative, {
    View: ReactNative.View,
    ActivityIndicator: function ActivityIndicator(props) {
      return (0, _jsxRuntime.jsx)(ReactNative.ActivityIndicator, Object.assign({}, props, {
        testID: props.testID || 'activity-indicator'
      }));
    }
  });
});
_getJestObj().mock('../../../../src/screens/exercises/phrases/PhrasesHeader', function () {
  var _jest$requireActual = jest.requireActual('react-native'),
    View = _jest$requireActual.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "PhrasesHeader"
    }, props));
  };
});
_getJestObj().mock('../../../../src/screens/exercises/phrases/PhrasesCategorySelector', function () {
  var _jest$requireActual2 = jest.requireActual('react-native'),
    View = _jest$requireActual2.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "PhrasesCategorySelector"
    }, props));
  };
});
_getJestObj().mock('../../../../src/screens/exercises/phrases/PhrasesProgress', function () {
  var _jest$requireActual3 = jest.requireActual('react-native'),
    View = _jest$requireActual3.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "PhrasesProgress"
    }, props));
  };
});
_getJestObj().mock('../../../../src/screens/exercises/phrases/PhraseCard', function () {
  var _jest$requireActual4 = jest.requireActual('react-native'),
    View = _jest$requireActual4.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "PhraseCard"
    }, props));
  };
});
_getJestObj().mock('../../../../src/screens/exercises/phrases/PhrasesNavigation', function () {
  var _jest$requireActual5 = jest.requireActual('react-native'),
    View = _jest$requireActual5.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "PhrasesNavigation"
    }, props));
  };
});
_getJestObj().mock('../../../../src/components/layout/Container', function () {
  var _jest$requireActual6 = jest.requireActual('react-native'),
    View = _jest$requireActual6.View;
  return {
    CONTAINER_SAFE_EDGES: {
      ALL: 'mocked-all-edges',
      TOP: 'mocked-top-edge',
      BOTTOM: 'mocked-bottom-edge'
    },
    __esModule: true,
    default: function _default(_ref) {
      var children = _ref.children,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      return (0, _jsxRuntime.jsx)(View, Object.assign({}, props, {
        children: children
      }));
    }
  };
});
_getJestObj().mock('../../../../src/screens/exercises/phrases/hooks/usePhrases');
_getJestObj().mock('../../../../src/hooks/useLastActivity');
_getJestObj().mock('../../../../src/utils/phrases/phrasesDataHelper', function () {
  return {
    getPhrasesData: jest.fn(function () {
      return {
        categories: [{
          id: 'cat1',
          name: 'Greetings',
          phrases: [{
            id: 'p1',
            french: 'Bonjour',
            english: 'Hello'
          }]
        }, {
          id: 'cat2',
          name: 'Travel',
          phrases: [{
            id: 'p2',
            french: 'Merci',
            english: 'Thank you'
          }]
        }]
      };
    }),
    getLevelColor: jest.fn(function () {
      return '#007AFF';
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _native = require("@react-navigation/native");
var _expoRouter = require("expo-router");
var _phrases = _interopRequireDefault(require("../../../../src/screens/exercises/phrases"));
var _usePhrases = _interopRequireDefault(require("../../../../src/screens/exercises/phrases/hooks/usePhrases"));
var _useLastActivity = _interopRequireDefault(require("../../../../src/hooks/useLastActivity"));
var _phrasesDataHelper = require("../../../../src/utils/phrases/phrasesDataHelper");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children"];
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('PhrasesExercise - Comprehensive Tests', function () {
  var mockSaveActivity = jest.fn();
  var mockNavigate = jest.fn();
  var mockGoBack = jest.fn();
  var mockChangeCategory = jest.fn();
  var mockToggleTranslation = jest.fn();
  var mockToggleDetailedProgress = jest.fn();
  var mockHandleNext = jest.fn(function () {
    return {
      completed: false
    };
  });
  var mockHandlePrevious = jest.fn();
  var mockPhrasesData = {
    categories: [{
      id: 'cat1',
      name: 'Greetings',
      phrases: [{
        id: 'p1',
        french: 'Bonjour',
        english: 'Hello'
      }, {
        id: 'p2',
        french: 'Bonsoir',
        english: 'Good evening'
      }]
    }, {
      id: 'cat2',
      name: 'Travel',
      phrases: [{
        id: 'p3',
        french: 'Merci',
        english: 'Thank you'
      }]
    }]
  };
  var setupMocks = function setupMocks() {
    var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var defaultUsePhrases = Object.assign({
      categoryIndex: 0,
      phraseIndex: 0,
      showTranslation: false,
      completedPhrases: [],
      loaded: true,
      showDetailedProgress: false,
      currentPhrase: {
        id: 'p1',
        french: 'Bonjour',
        english: 'Hello'
      },
      currentPhrases: mockPhrasesData.categories[0].phrases,
      totalPhrasesInCategory: 2,
      hasValidData: true,
      changeCategory: mockChangeCategory,
      toggleTranslation: mockToggleTranslation,
      toggleDetailedProgress: mockToggleDetailedProgress,
      handleNext: mockHandleNext,
      handlePrevious: mockHandlePrevious,
      canGoToPrevious: false,
      isLastPhraseInCategory: false,
      stats: {
        completionProgress: 0.5,
        completedPhrasesCount: 1
      },
      display: {
        categories: mockPhrasesData.categories.map(function (cat, index) {
          return Object.assign({}, cat, {
            isActive: index === 0
          });
        })
      }
    }, overrides);
    _usePhrases.default.mockReturnValue(defaultUsePhrases);
    _useLastActivity.default.mockReturnValue({
      saveActivity: mockSaveActivity
    });
    _native.useNavigation.mockReturnValue({
      navigate: mockNavigate,
      goBack: mockGoBack
    });
    _phrasesDataHelper.getPhrasesData.mockReturnValue(mockPhrasesData);
  };
  beforeEach(function () {
    jest.clearAllMocks();
    setupMocks();
  });
  describe('Core Functionality and Rendering', function () {
    it('should render the main phrases exercise view correctly', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_phrases.default, {
        route: {
          params: {
            level: 'A2'
          }
        }
      }));
      expect(_reactNative.screen.getByTestId('PhrasesHeader')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('PhrasesProgress')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('PhrasesCategorySelector')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('PhraseCard')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('PhrasesNavigation')).toBeTruthy();
    });
    it('should call hooks with correct parameters', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_phrases.default, {
        route: {
          params: {
            level: 'B1'
          }
        }
      }));
      expect(_usePhrases.default).toHaveBeenCalledWith(mockPhrasesData, 'B1');
      expect(_useLastActivity.default).toHaveBeenCalled();
      expect(_phrasesDataHelper.getPhrasesData).toHaveBeenCalledWith('B1');
    });
    it('should save activity on initial render', (0, _asyncToGenerator2.default)(function* () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_phrases.default, {
        route: {
          params: {
            level: 'A1'
          }
        }
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockSaveActivity).toHaveBeenCalledWith({
          title: 'Expressions',
          level: 'A1',
          type: 'phrases',
          metadata: {
            phrase: 0,
            totalPhrases: 2,
            category: 'Greetings',
            categoryIndex: 0,
            totalCategories: 2
          }
        });
      });
    }));
  });
  describe('States and Edge Cases', function () {
    it('should render loading state when not loaded', function () {
      setupMocks({
        loaded: false,
        hasValidData: false
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_phrases.default, {
        route: {
          params: {
            level: 'A1'
          }
        }
      }));
      expect(_reactNative.screen.getByTestId('activity-indicator')).toBeTruthy();
      expect(_reactNative.screen.queryByTestId('PhraseCard')).toBeNull();
    });
    it('should render loading state when data is invalid', function () {
      setupMocks({
        loaded: true,
        hasValidData: false
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_phrases.default, {
        route: {
          params: {
            level: 'A1'
          }
        }
      }));
      expect(_reactNative.screen.getByTestId('activity-indicator')).toBeTruthy();
      expect(_reactNative.screen.queryByTestId('PhraseCard')).toBeNull();
    });
    it('should render empty state when no phrases available', function () {
      setupMocks({
        loaded: true,
        hasValidData: true,
        currentPhrases: []
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_phrases.default, {
        route: {
          params: {
            level: 'A1'
          }
        }
      }));
      expect(_reactNative.screen.getByTestId('PhrasesHeader')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('activity-indicator')).toBeTruthy();
      expect(_reactNative.screen.queryByTestId('PhraseCard')).toBeNull();
    });
    it('should handle missing route params by using default level', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_phrases.default, {
        route: {}
      }));
      expect(_phrasesDataHelper.getPhrasesData).toHaveBeenCalledWith('A1');
    });
    it('should not save activity when phraseIndex is too high (protection against infinite loop)', function () {
      setupMocks({
        phraseIndex: 150
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_phrases.default, {
        route: {
          params: {
            level: 'A1'
          }
        }
      }));
      expect(mockSaveActivity).not.toHaveBeenCalled();
    });
  });
  describe('Navigation and User Actions', function () {
    it('should navigate back to exercise selection on back press', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_phrases.default, {
        route: {
          params: {
            level: 'A2'
          }
        }
      }));
      var header = _reactNative.screen.getByTestId('PhrasesHeader');
      var backButtonPress = header.props.onBackPress;
      backButtonPress();
      expect(_expoRouter.router.push).toHaveBeenCalledWith({
        pathname: '/tabs/exerciseSelection',
        params: {
          level: 'A2'
        }
      });
    });
    it('should call changeCategory when category is selected', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_phrases.default, {
        route: {
          params: {
            level: 'B2'
          }
        }
      }));
      var categorySelector = _reactNative.screen.getByTestId('PhrasesCategorySelector');
      var onSelectCategory = categorySelector.props.onSelectCategory;
      onSelectCategory(1);
      expect(mockChangeCategory).toHaveBeenCalledWith(1);
    });
    it('should call toggleDetailedProgress when progress is toggled', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_phrases.default, {
        route: {
          params: {
            level: 'B1'
          }
        }
      }));
      var progress = _reactNative.screen.getByTestId('PhrasesProgress');
      var onToggleExpand = progress.props.onToggleExpand;
      onToggleExpand();
      expect(mockToggleDetailedProgress).toHaveBeenCalled();
    });
    it('should call toggleTranslation when translation is toggled', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_phrases.default, {
        route: {
          params: {
            level: 'B1'
          }
        }
      }));
      var phraseCard = _reactNative.screen.getByTestId('PhraseCard');
      var onToggleTranslation = phraseCard.props.onToggleTranslation;
      onToggleTranslation();
      expect(mockToggleTranslation).toHaveBeenCalled();
    });
    it('should call handleNext when next button is pressed', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_phrases.default, {
        route: {
          params: {
            level: 'B2'
          }
        }
      }));
      var navigation = _reactNative.screen.getByTestId('PhrasesNavigation');
      var onNext = navigation.props.onNext;
      onNext();
      expect(mockHandleNext).toHaveBeenCalled();
    });
    it('should call handlePrevious when previous button is pressed', function () {
      setupMocks({
        canGoToPrevious: true
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_phrases.default, {
        route: {
          params: {
            level: 'B2'
          }
        }
      }));
      var navigation = _reactNative.screen.getByTestId('PhrasesNavigation');
      var onPrevious = navigation.props.onPrevious;
      onPrevious();
      expect(mockHandlePrevious).toHaveBeenCalled();
    });
    it('should navigate back when exercise is completed', function () {
      var mockHandleNextCompletes = jest.fn(function () {
        return {
          completed: true
        };
      });
      setupMocks({
        handleNext: mockHandleNextCompletes
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_phrases.default, {
        route: {
          params: {
            level: 'B1'
          }
        }
      }));
      var navigation = _reactNative.screen.getByTestId('PhrasesNavigation');
      var onNext = navigation.props.onNext;
      onNext();
      expect(mockHandleNextCompletes).toHaveBeenCalled();
      expect(mockGoBack).toHaveBeenCalled();
    });
  });
  describe('Activity Saving', function () {
    it('should save activity with correct metadata when phrase changes', (0, _asyncToGenerator2.default)(function* () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_phrases.default, {
          route: {
            params: {
              level: 'A1'
            }
          }
        })),
        rerender = _render.rerender;
      setupMocks({
        phraseIndex: 1,
        currentPhrase: {
          id: 'p2',
          french: 'Bonsoir',
          english: 'Good evening'
        }
      });
      rerender((0, _jsxRuntime.jsx)(_phrases.default, {
        route: {
          params: {
            level: 'A1'
          }
        }
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockSaveActivity).toHaveBeenCalledWith({
          title: 'Expressions',
          level: 'A1',
          type: 'phrases',
          metadata: {
            phrase: 1,
            totalPhrases: 2,
            category: 'Greetings',
            categoryIndex: 0,
            totalCategories: 2
          }
        });
      });
    }));
    it('should save activity with correct metadata when category changes', (0, _asyncToGenerator2.default)(function* () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_phrases.default, {
          route: {
            params: {
              level: 'A1'
            }
          }
        })),
        rerender = _render2.rerender;
      setupMocks({
        categoryIndex: 1,
        currentPhrase: {
          id: 'p3',
          french: 'Merci',
          english: 'Thank you'
        },
        currentPhrases: mockPhrasesData.categories[1].phrases,
        totalPhrasesInCategory: 1
      });
      rerender((0, _jsxRuntime.jsx)(_phrases.default, {
        route: {
          params: {
            level: 'A1'
          }
        }
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockSaveActivity).toHaveBeenCalledWith({
          title: 'Expressions',
          level: 'A1',
          type: 'phrases',
          metadata: {
            phrase: 0,
            totalPhrases: 1,
            category: 'Travel',
            categoryIndex: 1,
            totalCategories: 2
          }
        });
      });
    }));
  });
  describe('Component Props Validation', function () {
    it('should pass correct props to PhrasesHeader', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_phrases.default, {
        route: {
          params: {
            level: 'C1'
          }
        }
      }));
      var header = _reactNative.screen.getByTestId('PhrasesHeader');
      expect(header.props.level).toBe('C1');
      expect(typeof header.props.onBackPress).toBe('function');
    });
    it('should pass correct props to PhrasesProgress', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_phrases.default, {
        route: {
          params: {
            level: 'B1'
          }
        }
      }));
      var progress = _reactNative.screen.getByTestId('PhrasesProgress');
      expect(progress.props.progress).toBe(0.5);
      expect(progress.props.currentPhrase).toBe(1);
      expect(progress.props.totalPhrases).toBe(2);
      expect(progress.props.completedCount).toBe(1);
      expect(progress.props.levelColor).toBe('#007AFF');
    });
    it('should pass correct props to PhraseCard', function () {
      var currentPhrase = {
        id: 'p1',
        french: 'Bonjour',
        english: 'Hello'
      };
      setupMocks({
        currentPhrase: currentPhrase,
        showTranslation: true
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_phrases.default, {
        route: {
          params: {
            level: 'B1'
          }
        }
      }));
      var phraseCard = _reactNative.screen.getByTestId('PhraseCard');
      expect(phraseCard.props.phraseData).toEqual(currentPhrase);
      expect(phraseCard.props.showTranslation).toBe(true);
      expect(phraseCard.props.levelColor).toBe('#007AFF');
    });
    it('should pass correct props to PhrasesNavigation', function () {
      setupMocks({
        canGoToPrevious: true,
        isLastPhraseInCategory: true
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_phrases.default, {
        route: {
          params: {
            level: 'B1'
          }
        }
      }));
      var navigation = _reactNative.screen.getByTestId('PhrasesNavigation');
      expect(navigation.props.disablePrevious).toBe(false);
      expect(navigation.props.disableNext).toBe(false);
      expect(navigation.props.isLast).toBe(true);
      expect(navigation.props.levelColor).toBe('#007AFF');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,