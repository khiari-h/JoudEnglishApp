560ad656916bf340cba7ad56bcf3671b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var AnimatedScoreCard = function AnimatedScoreCard(_ref) {
  var score = _ref.score,
    totalQuestions = _ref.totalQuestions,
    percentage = _ref.percentage,
    resultConfig = _ref.resultConfig,
    colors = _ref.colors,
    localStyles = _ref.localStyles;
  var progressAnim = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
  var scoreAnim = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    displayedScore = _useState2[0],
    setDisplayedScore = _useState2[1];
  (0, _react.useEffect)(function () {
    _reactNative.Animated.parallel([_reactNative.Animated.timing(progressAnim, {
      toValue: percentage,
      duration: 800,
      delay: 300,
      useNativeDriver: false
    }), _reactNative.Animated.timing(scoreAnim, {
      toValue: score,
      duration: 800,
      delay: 300,
      useNativeDriver: true
    })]).start();
    var scoreListenerId = scoreAnim.addListener(function (_ref2) {
      var value = _ref2.value;
      setDisplayedScore(Math.floor(value));
    });
    return function () {
      scoreAnim.removeListener(scoreListenerId);
    };
  }, [score, percentage]);
  var progressWidth = progressAnim.interpolate({
    inputRange: [0, 100],
    outputRange: ['0%', '100%']
  });
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [localStyles.scoreCard, {
      backgroundColor: colors.surface
    }],
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: localStyles.scoreRow,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [localStyles.scoreNumber, {
          color: resultConfig.color
        }],
        children: displayedScore
      }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: [localStyles.scoreSlash, {
          color: colors.textSecondary
        }],
        children: ["/", totalQuestions]
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [localStyles.progressBar, {
        backgroundColor: '#F3F4F6'
      }],
      children: (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
        style: [localStyles.progressFill, {
          backgroundColor: resultConfig.color,
          width: progressWidth
        }]
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
      style: [localStyles.percentageText, {
        color: resultConfig.color
      }],
      children: [" ", percentage, "% de r\xE9ussite "]
    })]
  });
};
var ResultButtons = function ResultButtons(_ref3) {
  var colors = _ref3.colors,
    resultConfig = _ref3.resultConfig,
    handleRestartPress = _ref3.handleRestartPress,
    handleFinishPress = _ref3.handleFinishPress,
    localStyles = _ref3.localStyles;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: localStyles.buttonsContainer,
    children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      style: [localStyles.restartButton, {
        backgroundColor: colors.surface
      }],
      onPress: handleRestartPress,
      activeOpacity: 0.8,
      children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: localStyles.buttonContent,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: localStyles.restartIcon,
          children: "\uD83D\uDD04"
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [localStyles.restartText, {
            color: colors.text
          }],
          children: "Rejouer"
        })]
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      style: [localStyles.finishButton, {
        backgroundColor: resultConfig.color
      }],
      onPress: handleFinishPress,
      activeOpacity: 0.8,
      children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: localStyles.buttonContent,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: localStyles.finishIcon,
          children: "\u2713"
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: localStyles.finishText,
          children: "Terminer"
        })]
      })
    })]
  });
};
var ResultScreen = function ResultScreen(_ref4) {
  var score = _ref4.score,
    totalQuestions = _ref4.totalQuestions,
    source = _ref4.source,
    handleRestart = _ref4.handleRestart,
    handleFinish = _ref4.handleFinish,
    localStyles = _ref4.localStyles,
    colors = _ref4.colors;
  var percentage = totalQuestions > 0 ? Math.round(score / totalQuestions * 100) : 0;
  var resultConfig;
  if (percentage >= 80) {
    resultConfig = {
      emoji: "üéâ",
      title: "Excellent !",
      message: "Vous ma√Ætrisez parfaitement ces mots !",
      color: "#10B981"
    };
  } else if (percentage >= 60) {
    resultConfig = {
      emoji: "üëç",
      title: "Bien jou√© !",
      message: "Bonne progression, continuez !",
      color: "#3B82F6"
    };
  } else {
    resultConfig = {
      emoji: "üìñ",
      title: "√Ä am√©liorer",
      message: "R√©visez encore ces mots pour progresser",
      color: "#F59E0B"
    };
  }
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: localStyles.resultContainer,
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: localStyles.resultEmoji,
      children: resultConfig.emoji
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [localStyles.resultTitle, {
        color: colors.text
      }],
      children: resultConfig.title
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [localStyles.resultMessage, {
        color: colors.textSecondary
      }],
      children: resultConfig.message
    }), (0, _jsxRuntime.jsx)(AnimatedScoreCard, {
      score: score,
      totalQuestions: totalQuestions,
      percentage: percentage,
      resultConfig: resultConfig,
      colors: colors,
      localStyles: localStyles
    }), source && (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [localStyles.sourceText, {
        color: colors.textSecondary
      }],
      children: source === 'popup_trigger' ? 'ü§ñ R√©vision automatique' : 'üë§ R√©vision manuelle'
    }), (0, _jsxRuntime.jsx)(ResultButtons, {
      colors: colors,
      resultConfig: resultConfig,
      handleRestartPress: handleRestart,
      handleFinishPress: handleFinish,
      localStyles: localStyles
    })]
  });
};
AnimatedScoreCard.propTypes = {
  score: _propTypes.default.any.isRequired,
  totalQuestions: _propTypes.default.func.isRequired,
  percentage: _propTypes.default.any.isRequired,
  resultConfig: _propTypes.default.func.isRequired,
  colors: _propTypes.default.any.isRequired,
  localStyles: _propTypes.default.any.isRequired
};
var _default = exports.default = ResultScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,