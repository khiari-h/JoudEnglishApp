fe6b6903b36266ead69d4650bd23aebb
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _RevealButton = _interopRequireDefault(require("../../../src/components/ui/RevealButton"));
var _jsxRuntime = require("react/jsx-runtime");
describe('RevealButton', function () {
  it('renders reveal button when not revealed', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevealButton.default, {
      isRevealed: false,
      onToggle: jest.fn(),
      revealText: "Show Answer"
    }));
    expect(_reactNative.screen.getByText('Show Answer')).toBeOnTheScreen();
    expect(_reactNative.screen.queryByText('Hide Translation')).toBeNull();
  });
  it('renders revealed content and hide button when revealed', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevealButton.default, {
      isRevealed: true,
      onToggle: jest.fn(),
      revealedContent: "The answer is 42",
      hideText: "Hide Answer"
    }));
    expect(_reactNative.screen.getByText('The answer is 42')).toBeOnTheScreen();
    expect(_reactNative.screen.getByText('Hide Answer')).toBeOnTheScreen();
    expect(_reactNative.screen.queryByText('Reveal Translation')).toBeNull();
  });
  it('calls onToggle when reveal button is pressed', function () {
    var handleToggle = jest.fn();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevealButton.default, {
      isRevealed: false,
      onToggle: handleToggle
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Reveal Translation'));
    expect(handleToggle).toHaveBeenCalledTimes(1);
  });
  it('calls onToggle when hide button is pressed', function () {
    var handleToggle = jest.fn();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevealButton.default, {
      isRevealed: true,
      onToggle: handleToggle
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Hide Translation'));
    expect(handleToggle).toHaveBeenCalledTimes(1);
  });
  it('displays custom revealText', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevealButton.default, {
      isRevealed: false,
      onToggle: jest.fn(),
      revealText: "Custom Reveal"
    }));
    expect(_reactNative.screen.getByText('Custom Reveal')).toBeOnTheScreen();
  });
  it('displays custom hideText', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevealButton.default, {
      isRevealed: true,
      onToggle: jest.fn(),
      hideText: "Custom Hide"
    }));
    expect(_reactNative.screen.getByText('Custom Hide')).toBeOnTheScreen();
  });
  it('displays custom revealedContent', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevealButton.default, {
      isRevealed: true,
      onToggle: jest.fn(),
      revealedContent: "Custom Content"
    }));
    expect(_reactNative.screen.getByText('Custom Content')).toBeOnTheScreen();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9SZXZlYWxCdXR0b24iLCJfanN4UnVudGltZSIsImRlc2NyaWJlIiwiaXQiLCJyZW5kZXIiLCJqc3giLCJkZWZhdWx0IiwiaXNSZXZlYWxlZCIsIm9uVG9nZ2xlIiwiamVzdCIsImZuIiwicmV2ZWFsVGV4dCIsImV4cGVjdCIsInNjcmVlbiIsImdldEJ5VGV4dCIsInRvQmVPblRoZVNjcmVlbiIsInF1ZXJ5QnlUZXh0IiwidG9CZU51bGwiLCJyZXZlYWxlZENvbnRlbnQiLCJoaWRlVGV4dCIsImhhbmRsZVRvZ2dsZSIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIl0sInNvdXJjZXMiOlsiUmV2ZWFsQnV0dG9uLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgc2NyZWVuLCBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgUmV2ZWFsQnV0dG9uIGZyb20gJy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3VpL1JldmVhbEJ1dHRvbic7XG5cbmRlc2NyaWJlKCdSZXZlYWxCdXR0b24nLCAoKSA9PiB7XG4gIGl0KCdyZW5kZXJzIHJldmVhbCBidXR0b24gd2hlbiBub3QgcmV2ZWFsZWQnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxSZXZlYWxCdXR0b24gaXNSZXZlYWxlZD17ZmFsc2V9IG9uVG9nZ2xlPXtqZXN0LmZuKCl9IHJldmVhbFRleHQ9XCJTaG93IEFuc3dlclwiIC8+KTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnU2hvdyBBbnN3ZXInKSkudG9CZU9uVGhlU2NyZWVuKCk7XG4gICAgZXhwZWN0KHNjcmVlbi5xdWVyeUJ5VGV4dCgnSGlkZSBUcmFuc2xhdGlvbicpKS50b0JlTnVsbCgpO1xuICB9KTtcblxuICBpdCgncmVuZGVycyByZXZlYWxlZCBjb250ZW50IGFuZCBoaWRlIGJ1dHRvbiB3aGVuIHJldmVhbGVkJywgKCkgPT4ge1xuICAgIHJlbmRlcihcbiAgICAgIDxSZXZlYWxCdXR0b25cbiAgICAgICAgaXNSZXZlYWxlZD17dHJ1ZX1cbiAgICAgICAgb25Ub2dnbGU9e2plc3QuZm4oKX1cbiAgICAgICAgcmV2ZWFsZWRDb250ZW50PVwiVGhlIGFuc3dlciBpcyA0MlwiXG4gICAgICAgIGhpZGVUZXh0PVwiSGlkZSBBbnN3ZXJcIlxuICAgICAgLz5cbiAgICApO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdUaGUgYW5zd2VyIGlzIDQyJykpLnRvQmVPblRoZVNjcmVlbigpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdIaWRlIEFuc3dlcicpKS50b0JlT25UaGVTY3JlZW4oKTtcbiAgICBleHBlY3Qoc2NyZWVuLnF1ZXJ5QnlUZXh0KCdSZXZlYWwgVHJhbnNsYXRpb24nKSkudG9CZU51bGwoKTtcbiAgfSk7XG5cbiAgaXQoJ2NhbGxzIG9uVG9nZ2xlIHdoZW4gcmV2ZWFsIGJ1dHRvbiBpcyBwcmVzc2VkJywgKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZVRvZ2dsZSA9IGplc3QuZm4oKTtcbiAgICByZW5kZXIoPFJldmVhbEJ1dHRvbiBpc1JldmVhbGVkPXtmYWxzZX0gb25Ub2dnbGU9e2hhbmRsZVRvZ2dsZX0gLz4pO1xuICAgIGZpcmVFdmVudC5wcmVzcyhzY3JlZW4uZ2V0QnlUZXh0KCdSZXZlYWwgVHJhbnNsYXRpb24nKSk7XG4gICAgZXhwZWN0KGhhbmRsZVRvZ2dsZSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICB9KTtcblxuICBpdCgnY2FsbHMgb25Ub2dnbGUgd2hlbiBoaWRlIGJ1dHRvbiBpcyBwcmVzc2VkJywgKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZVRvZ2dsZSA9IGplc3QuZm4oKTtcbiAgICByZW5kZXIoPFJldmVhbEJ1dHRvbiBpc1JldmVhbGVkPXt0cnVlfSBvblRvZ2dsZT17aGFuZGxlVG9nZ2xlfSAvPik7XG4gICAgZmlyZUV2ZW50LnByZXNzKHNjcmVlbi5nZXRCeVRleHQoJ0hpZGUgVHJhbnNsYXRpb24nKSk7XG4gICAgZXhwZWN0KGhhbmRsZVRvZ2dsZSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICB9KTtcblxuICBpdCgnZGlzcGxheXMgY3VzdG9tIHJldmVhbFRleHQnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxSZXZlYWxCdXR0b24gaXNSZXZlYWxlZD17ZmFsc2V9IG9uVG9nZ2xlPXtqZXN0LmZuKCl9IHJldmVhbFRleHQ9XCJDdXN0b20gUmV2ZWFsXCIgLz4pO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdDdXN0b20gUmV2ZWFsJykpLnRvQmVPblRoZVNjcmVlbigpO1xuICB9KTtcblxuICBpdCgnZGlzcGxheXMgY3VzdG9tIGhpZGVUZXh0JywgKCkgPT4ge1xuICAgIHJlbmRlcig8UmV2ZWFsQnV0dG9uIGlzUmV2ZWFsZWQ9e3RydWV9IG9uVG9nZ2xlPXtqZXN0LmZuKCl9IGhpZGVUZXh0PVwiQ3VzdG9tIEhpZGVcIiAvPik7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0N1c3RvbSBIaWRlJykpLnRvQmVPblRoZVNjcmVlbigpO1xuICB9KTtcblxuICBpdCgnZGlzcGxheXMgY3VzdG9tIHJldmVhbGVkQ29udGVudCcsICgpID0+IHtcbiAgICByZW5kZXIoPFJldmVhbEJ1dHRvbiBpc1JldmVhbGVkPXt0cnVlfSBvblRvZ2dsZT17amVzdC5mbigpfSByZXZlYWxlZENvbnRlbnQ9XCJDdXN0b20gQ29udGVudFwiIC8+KTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnQ3VzdG9tIENvbnRlbnQnKSkudG9CZU9uVGhlU2NyZWVuKCk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFB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