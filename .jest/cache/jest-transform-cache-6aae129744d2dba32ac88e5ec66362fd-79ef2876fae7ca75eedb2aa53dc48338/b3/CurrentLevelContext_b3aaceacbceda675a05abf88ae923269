8bd7966c18d4ad3481f68c073cbb6aa3
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CurrentLevelProvider = CurrentLevelProvider;
exports.useCurrentLevel = useCurrentLevel;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
function cov_22z9cams1k() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\contexts\\CurrentLevelContext.js";
  var hash = "baa5b61091b1d3d6732e958daabe37cf76765bbd";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\contexts\\CurrentLevelContext.js",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 28
        },
        end: {
          line: 5,
          column: 43
        }
      },
      "1": {
        start: {
          line: 9,
          column: 42
        },
        end: {
          line: 9,
          column: 64
        }
      },
      "2": {
        start: {
          line: 11,
          column: 2
        },
        end: {
          line: 15,
          column: 4
        }
      },
      "3": {
        start: {
          line: 18,
          column: 0
        },
        end: {
          line: 21,
          column: 2
        }
      },
      "4": {
        start: {
          line: 25,
          column: 18
        },
        end: {
          line: 25,
          column: 49
        }
      },
      "5": {
        start: {
          line: 26,
          column: 2
        },
        end: {
          line: 28,
          column: 3
        }
      },
      "6": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 27,
          column: 83
        }
      },
      "7": {
        start: {
          line: 29,
          column: 2
        },
        end: {
          line: 29,
          column: 17
        }
      }
    },
    fnMap: {
      "0": {
        name: "CurrentLevelProvider",
        decl: {
          start: {
            line: 8,
            column: 16
          },
          end: {
            line: 8,
            column: 36
          }
        },
        loc: {
          start: {
            line: 8,
            column: 71
          },
          end: {
            line: 16,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "useCurrentLevel",
        decl: {
          start: {
            line: 24,
            column: 16
          },
          end: {
            line: 24,
            column: 31
          }
        },
        loc: {
          start: {
            line: 24,
            column: 34
          },
          end: {
            line: 30,
            column: 1
          }
        },
        line: 24
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 8,
            column: 49
          },
          end: {
            line: 8,
            column: 67
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 8,
            column: 64
          },
          end: {
            line: 8,
            column: 67
          }
        }],
        line: 8
      },
      "1": {
        loc: {
          start: {
            line: 26,
            column: 2
          },
          end: {
            line: 28,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 2
          },
          end: {
            line: 28,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0],
      "1": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "baa5b61091b1d3d6732e958daabe37cf76765bbd"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_22z9cams1k = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_22z9cams1k();
var CurrentLevelContext = (cov_22z9cams1k().s[0]++, (0, _react.createContext)());
function CurrentLevelProvider(_ref) {
  var children = _ref.children,
    _ref$initialLevel = _ref.initialLevel,
    initialLevel = _ref$initialLevel === void 0 ? (cov_22z9cams1k().b[0][0]++, "1") : _ref$initialLevel;
  cov_22z9cams1k().f[0]++;
  var _ref2 = (cov_22z9cams1k().s[1]++, (0, _react.useState)(initialLevel)),
    _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
    currentLevel = _ref3[0],
    setCurrentLevel = _ref3[1];
  cov_22z9cams1k().s[2]++;
  return (0, _jsxRuntime.jsx)(CurrentLevelContext.Provider, {
    value: {
      currentLevel: currentLevel,
      setCurrentLevel: setCurrentLevel
    },
    children: children
  });
}
cov_22z9cams1k().s[3]++;
CurrentLevelProvider.propTypes = {
  children: _propTypes.default.node.isRequired,
  initialLevel: _propTypes.default.string
};
function useCurrentLevel() {
  cov_22z9cams1k().f[1]++;
  var context = (cov_22z9cams1k().s[4]++, (0, _react.useContext)(CurrentLevelContext));
  cov_22z9cams1k().s[5]++;
  if (!context) {
    cov_22z9cams1k().b[1][0]++;
    cov_22z9cams1k().s[6]++;
    throw new Error("useCurrentLevel doit être utilisé dans CurrentLevelProvider");
  } else {
    cov_22z9cams1k().b[1][1]++;
  }
  cov_22z9cams1k().s[7]++;
  return context;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3Byb3BUeXBlcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfanN4UnVudGltZSIsImNvdl8yMno5Y2FtczFrIiwicGF0aCIsImhhc2giLCJnbG9iYWwiLCJGdW5jdGlvbiIsImdjdiIsImNvdmVyYWdlRGF0YSIsInN0YXRlbWVudE1hcCIsInN0YXJ0IiwibGluZSIsImNvbHVtbiIsImVuZCIsImZuTWFwIiwibmFtZSIsImRlY2wiLCJsb2MiLCJicmFuY2hNYXAiLCJ0eXBlIiwibG9jYXRpb25zIiwidW5kZWZpbmVkIiwicyIsImYiLCJiIiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsIkN1cnJlbnRMZXZlbENvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiQ3VycmVudExldmVsUHJvdmlkZXIiLCJfcmVmIiwiY2hpbGRyZW4iLCJfcmVmJGluaXRpYWxMZXZlbCIsImluaXRpYWxMZXZlbCIsIl9yZWYyIiwidXNlU3RhdGUiLCJfcmVmMyIsIl9zbGljZWRUb0FycmF5MiIsImRlZmF1bHQiLCJjdXJyZW50TGV2ZWwiLCJzZXRDdXJyZW50TGV2ZWwiLCJqc3giLCJQcm92aWRlciIsInZhbHVlIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwibm9kZSIsImlzUmVxdWlyZWQiLCJzdHJpbmciLCJ1c2VDdXJyZW50TGV2ZWwiLCJjb250ZXh0IiwidXNlQ29udGV4dCIsIkVycm9yIl0sInNvdXJjZXMiOlsiQ3VycmVudExldmVsQ29udGV4dC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5cclxuLy8gQ3LDqWUgbGUgY29udGV4dGVcclxuY29uc3QgQ3VycmVudExldmVsQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcclxuXHJcbi8vIFByb3ZpZGVyIHBvdXIgZW5nbG9iZXIgbCdhcHBcclxuZXhwb3J0IGZ1bmN0aW9uIEN1cnJlbnRMZXZlbFByb3ZpZGVyKHsgY2hpbGRyZW4sIGluaXRpYWxMZXZlbCA9IFwiMVwiIH0pIHtcclxuICBjb25zdCBbY3VycmVudExldmVsLCBzZXRDdXJyZW50TGV2ZWxdID0gdXNlU3RhdGUoaW5pdGlhbExldmVsKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxDdXJyZW50TGV2ZWxDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7IGN1cnJlbnRMZXZlbCwgc2V0Q3VycmVudExldmVsIH19PlxyXG4gICAgICB7Y2hpbGRyZW59XHJcbiAgICA8L0N1cnJlbnRMZXZlbENvbnRleHQuUHJvdmlkZXI+XHJcbiAgKTtcclxufVxyXG5cclxuQ3VycmVudExldmVsUHJvdmlkZXIucHJvcFR5cGVzID0ge1xyXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxyXG4gIGluaXRpYWxMZXZlbDogUHJvcFR5cGVzLnN0cmluZyxcclxufTtcclxuXHJcbi8vIEhvb2sgZCdhY2PDqHMgcHJhdGlxdWVcclxuZXhwb3J0IGZ1bmN0aW9uIHVzZUN1cnJlbnRMZXZlbCgpIHtcclxuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChDdXJyZW50TGV2ZWxDb250ZXh0KTtcclxuICBpZiAoIWNvbnRleHQpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihcInVzZUN1cnJlbnRMZXZlbCBkb2l0IMOqdHJlIHV0aWxpc8OpIGRhbnMgQ3VycmVudExldmVsUHJvdmlkZXJcIik7XHJcbiAgfVxyXG4gIHJldHVybiBjb250ZXh0O1xyXG59ICJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUFtQyxJQUFBRyxXQUFBLEdBQUFILE9BQUE7QUFBQSxTQUFBSSxlQUFBO0VBQUEsSUFBQUMsSUFBQTtFQUFBLElBQUFDLElBQUE7RUFBQSxJQUFBQyxNQUFBLE9BQUFDLFFBQUE7RUFBQSxJQUFBQyxHQUFBO0VBQUEsSUFBQUMsWUFBQTtJQUFBTCxJQUFBO0lBQUFNLFlBQUE7TUFBQTtRQUFBQyxLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO0lBQUE7SUFBQUUsS0FBQTtNQUFBO1FBQUFDLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtJQUFBO0lBQUFPLFNBQUE7TUFBQTtRQUFBRCxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFB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