3ad2a03198c7b4f2a5a8dd8cc1e9fbf4
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  return Object.assign({}, RN, {
    useColorScheme: jest.fn(function () {
      return 'light';
    })
  });
});
_getJestObj().mock('../../src/utils/storageUtils', function () {
  return {
    storeData: jest.fn(function () {
      return Promise.resolve();
    }),
    getData: jest.fn(function () {
      return Promise.resolve(null);
    })
  };
});
_getJestObj().mock('../../src/utils/constants', function () {
  return {
    COLORS: {
      background: '#FFFFFF',
      text: '#000000',
      darkBackground: '#121212',
      darkText: '#FFFFFF'
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _ThemeContext = require("../../src/contexts/ThemeContext");
var _storageUtils = require("../../src/utils/storageUtils");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var flattenChildren = function flattenChildren(children) {
  return Array.isArray(children) ? children.join('') : children;
};
var TestComponent = function TestComponent() {
  var _React$useContext = _react.default.useContext(_ThemeContext.ThemeContext),
    theme = _React$useContext.theme,
    isDarkTheme = _React$useContext.isDarkTheme,
    colors = _React$useContext.colors,
    loaded = _React$useContext.loaded,
    setAppTheme = _React$useContext.setTheme,
    toggleTheme = _React$useContext.toggleTheme,
    resetToSystemTheme = _React$useContext.resetToSystemTheme;
  if (!loaded) {
    return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "loading-status",
      children: "Loading Theme..."
    });
  }
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [(0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "current-theme",
      children: ["Theme: ", theme]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "is-dark-theme",
      children: ["Is Dark: ", isDarkTheme ? 'Yes' : 'No']
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "background-color",
      children: ["Background: ", colors.background]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "text-color",
      children: ["Text: ", colors.text]
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Set Light",
      onPress: function onPress() {
        return setAppTheme('light');
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Set Dark",
      onPress: function onPress() {
        return setAppTheme('dark');
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Set System",
      onPress: function onPress() {
        return setAppTheme('system');
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Toggle Theme",
      onPress: toggleTheme
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Reset to System",
      onPress: resetToSystemTheme
    })]
  });
};
describe('ThemeContext', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _storageUtils.getData.mockResolvedValue(null);
    _reactNative2.useColorScheme.mockReturnValue('light');
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.runOnlyPendingTimers();
    jest.useRealTimers();
  });
  it('loads default theme (system) if none saved', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    expect(_reactNative.screen.getByTestId('loading-status')).toBeTruthy();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_reactNative.screen.queryByTestId('loading-status')).toBeNull();
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: system');
    expect(flattenChildren(_reactNative.screen.getByTestId('is-dark-theme').props.children)).toBe('Is Dark: No');
    expect(flattenChildren(_reactNative.screen.getByTestId('background-color').props.children)).toBe('Background: #FFFFFF');
    expect(_storageUtils.getData).toHaveBeenCalledWith('appTheme');
    expect(_storageUtils.storeData).not.toHaveBeenCalled();
  }));
  it('loads saved theme from storage', (0, _asyncToGenerator2.default)(function* () {
    _storageUtils.getData.mockResolvedValueOnce('dark');
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: dark');
    expect(flattenChildren(_reactNative.screen.getByTestId('is-dark-theme').props.children)).toBe('Is Dark: Yes');
    expect(flattenChildren(_reactNative.screen.getByTestId('background-color').props.children)).toBe('Background: #121212');
  }));
  it('sets theme to light and saves it', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Light'));
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: light');
    expect(flattenChildren(_reactNative.screen.getByTestId('is-dark-theme').props.children)).toBe('Is Dark: No');
    expect(flattenChildren(_reactNative.screen.getByTestId('background-color').props.children)).toBe('Background: #FFFFFF');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_storageUtils.storeData).toHaveBeenCalledWith('appTheme', 'light');
  }));
  it('sets theme to dark and saves it', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Dark'));
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: dark');
    expect(flattenChildren(_reactNative.screen.getByTestId('is-dark-theme').props.children)).toBe('Is Dark: Yes');
    expect(flattenChildren(_reactNative.screen.getByTestId('background-color').props.children)).toBe('Background: #121212');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_storageUtils.storeData).toHaveBeenCalledWith('appTheme', 'dark');
  }));
  it('toggles theme from light to dark', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Light'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Toggle Theme'));
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: dark');
    expect(flattenChildren(_reactNative.screen.getByTestId('is-dark-theme').props.children)).toBe('Is Dark: Yes');
  }));
  it('toggles theme from dark to light', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Dark'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Toggle Theme'));
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: light');
    expect(flattenChildren(_reactNative.screen.getByTestId('is-dark-theme').props.children)).toBe('Is Dark: No');
  }));
  it('toggles theme from system based on systemColorScheme', (0, _asyncToGenerator2.default)(function* () {
    _reactNative2.useColorScheme.mockReturnValue('dark');
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: system');
    expect(flattenChildren(_reactNative.screen.getByTestId('is-dark-theme').props.children)).toBe('Is Dark: Yes');
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Toggle Theme'));
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: light');
    expect(flattenChildren(_reactNative.screen.getByTestId('is-dark-theme').props.children)).toBe('Is Dark: No');
  }));
  it('resets to system theme and saves it', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Dark'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Reset to System'));
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: system');
    expect(flattenChildren(_reactNative.screen.getByTestId('is-dark-theme').props.children)).toBe('Is Dark: No');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_storageUtils.storeData).toHaveBeenCalledWith('appTheme', 'system');
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,