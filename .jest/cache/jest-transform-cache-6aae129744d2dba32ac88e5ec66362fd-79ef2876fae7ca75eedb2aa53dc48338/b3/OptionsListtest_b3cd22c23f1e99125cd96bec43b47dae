0306b62b2082bf815d729ebb0eab56db
_getJestObj().mock('@expo/vector-icons', function () {
  var _require = require('react-native'),
    Text = _require.Text;
  return {
    Ionicons: function Ionicons(props) {
      return (0, _jsxRuntime.jsx)(Text, {
        testID: `icon-${props.name}`,
        children: props.name
      });
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _OptionsList = _interopRequireDefault(require("../../../src/components/exercise-common/OptionsList"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('OptionsList', function () {
  var options = [{
    id: '1',
    text: 'Apple'
  }, {
    id: '2',
    text: 'Banana'
  }, {
    id: '3',
    text: 'Cherry'
  }];
  var onSelectOptionMock = jest.fn();
  afterEach(function () {
    onSelectOptionMock.mockClear();
  });
  it('renders all options correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
        options: options
      })),
      getByText = _render.getByText;
    expect(getByText('Apple')).toBeTruthy();
    expect(getByText('Banana')).toBeTruthy();
    expect(getByText('Cherry')).toBeTruthy();
  });
  it('calls onSelectOption with the correct id when an option is pressed', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
        options: options,
        onSelectOption: onSelectOptionMock
      })),
      getByText = _render2.getByText;
    _reactNative.fireEvent.press(getByText('Banana'));
    expect(onSelectOptionMock).toHaveBeenCalledWith('2');
  });
  it('does not call onSelectOption when disabled', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
        options: options,
        onSelectOption: onSelectOptionMock,
        disabled: true
      })),
      getByText = _render3.getByText;
    _reactNative.fireEvent.press(getByText('Banana'));
    expect(onSelectOptionMock).not.toHaveBeenCalled();
  });
  it('shows no correctness icons when an option is just selected', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
        options: options,
        selectedOptionId: '1'
      })),
      queryAllByTestId = _render4.queryAllByTestId;
    expect(queryAllByTestId('icon-checkmark-circle').length).toBe(0);
    expect(queryAllByTestId('icon-close-circle').length).toBe(0);
  });
  describe('Layout and Logic', function () {
    it('renders with vertical layout by default', function () {
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
          options: options
        })),
        getByText = _render5.getByText;
      expect(getByText('Apple').parent.props.style).toEqual(expect.arrayContaining([expect.objectContaining({
        flexDirection: 'column'
      })]));
    });
    it('renders with grid layout when specified', function () {
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
          options: options,
          layout: "grid"
        })),
        getByText = _render6.getByText;
      expect(getByText('Apple').parent.parent.props.style).toEqual(expect.objectContaining({
        flexDirection: 'row'
      }));
    });
    it('renders correctly with only one option in vertical layout', function () {
      var oneOption = [{
        id: '1',
        text: 'One'
      }];
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
          options: oneOption
        })),
        getByText = _render7.getByText;
      expect(getByText('One')).toBeTruthy();
    });
    it('renders correctly with only one option in grid layout', function () {
      var oneOption = [{
        id: '1',
        text: 'One'
      }];
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
          options: oneOption,
          layout: "grid"
        })),
        getByText = _render8.getByText;
      expect(getByText('One')).toBeTruthy();
    });
  });
  describe('when showing correct answer', function () {
    it('shows a checkmark for the correct answer', function () {
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
          options: options,
          selectedOptionId: '2',
          correctOptionId: '2',
          showCorrectAnswer: true
        })),
        getByTestId = _render9.getByTestId;
      expect(getByTestId('icon-checkmark-circle')).toBeTruthy();
    });
    it('shows a cross for the incorrect selection and a checkmark for the correct answer', function () {
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
          options: options,
          selectedOptionId: '1',
          correctOptionId: '2',
          showCorrectAnswer: true
        })),
        getByTestId = _render0.getByTestId;
      expect(getByTestId('icon-close-circle')).toBeTruthy();
      expect(getByTestId('icon-checkmark-circle')).toBeTruthy();
    });
    it('handles correct and incorrect answers in grid layout', function () {
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
          options: options,
          selectedOptionId: '1',
          correctOptionId: '2',
          showCorrectAnswer: true,
          layout: "grid"
        })),
        getByTestId = _render1.getByTestId,
        queryByTestId = _render1.queryByTestId;
      expect(getByTestId('icon-close-circle')).toBeTruthy();
      expect(getByTestId('icon-checkmark-circle')).toBeTruthy();
      expect(queryByTestId('icon-close-circle')).toBeTruthy();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,