4eb249a194d2be6ebf6b73a650f088d5
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useGameAnimation2 = _interopRequireDefault(require("./useGameAnimation"));
var useWordGames = function useWordGames() {
  var wordGamesData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "A1";
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    currentGameIndex = _useState2[0],
    setCurrentGameIndex = _useState2[1];
  var _useState3 = (0, _react.useState)([]),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    selectedItems = _useState4[0],
    setSelectedItems = _useState4[1];
  var _useState5 = (0, _react.useState)([]),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    matchedItems = _useState6[0],
    setMatchedItems = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    showFeedback = _useState8[0],
    setShowFeedback = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    isCorrect = _useState0[0],
    setIsCorrect = _useState0[1];
  var _useState1 = (0, _react.useState)(false),
    _useState10 = (0, _slicedToArray2.default)(_useState1, 2),
    showResults = _useState10[0],
    setShowResults = _useState10[1];
  var _useState11 = (0, _react.useState)(0),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    score = _useState12[0],
    setScore = _useState12[1];
  var _useState13 = (0, _react.useState)([]),
    _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
    gameResults = _useState14[0],
    setGameResults = _useState14[1];
  var _useState15 = (0, _react.useState)([]),
    _useState16 = (0, _slicedToArray2.default)(_useState15, 2),
    shuffledOptions = _useState16[0],
    setShuffledOptions = _useState16[1];
  var _useState17 = (0, _react.useState)({}),
    _useState18 = (0, _slicedToArray2.default)(_useState17, 2),
    completedGames = _useState18[0],
    setCompletedGames = _useState18[1];
  var _useState19 = (0, _react.useState)({
      gameIndex: 0
    }),
    _useState20 = (0, _slicedToArray2.default)(_useState19, 2),
    lastPosition = _useState20[0],
    setLastPosition = _useState20[1];
  var _useState21 = (0, _react.useState)(false),
    _useState22 = (0, _slicedToArray2.default)(_useState21, 2),
    loaded = _useState22[0],
    setLoaded = _useState22[1];
  var isInitialized = (0, _react.useRef)(false);
  var _useGameAnimation = (0, _useGameAnimation2.default)(),
    fadeAnim = _useGameAnimation.fadeAnim,
    bounceAnim = _useGameAnimation.bounceAnim;
  var games = (wordGamesData == null ? void 0 : wordGamesData.games) || [];
  var currentGame = games[currentGameIndex] || null;
  var totalGames = games.length;
  var STORAGE_KEY = `word_games_${level}`;
  var COMPLETED_KEY = `word_games_completed_${level}`;
  var SCORES_KEY = `word_games_scores_${level}`;
  (0, _react.useEffect)(function () {
    var loadData = function () {
      var _ref = (0, _asyncToGenerator2.default)(function* () {
        try {
          var savedPosition = yield _asyncStorage.default.getItem(STORAGE_KEY);
          if (savedPosition) {
            var _JSON$parse = JSON.parse(savedPosition),
              gameIndex = _JSON$parse.gameIndex;
            setLastPosition({
              gameIndex: gameIndex
            });
          }
          var savedCompleted = yield _asyncStorage.default.getItem(COMPLETED_KEY);
          if (savedCompleted) {
            setCompletedGames(JSON.parse(savedCompleted));
          }
          if (games.length > 0) {
            setGameResults(Array(games.length).fill({
              score: 0,
              maxScore: 0,
              completed: false
            }));
          }
        } catch (error) {} finally {
          setLoaded(true);
        }
      });
      return function loadData() {
        return _ref.apply(this, arguments);
      };
    }();
    loadData();
  }, [level, games.length]);
  var saveData = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      var dataToSave = {
        gameIndex: currentGameIndex,
        timestamp: Date.now()
      };
      yield _asyncStorage.default.setItem(STORAGE_KEY, JSON.stringify(dataToSave));
      yield _asyncStorage.default.setItem(COMPLETED_KEY, JSON.stringify(completedGames));
    } catch (error) {}
  }), [currentGameIndex, completedGames, STORAGE_KEY, COMPLETED_KEY]);
  (0, _react.useEffect)(function () {
    if (loaded) saveData();
  }, [saveData, loaded]);
  (0, _react.useEffect)(function () {
    if (loaded && games.length > 0 && !isInitialized.current) {
      if (lastPosition && lastPosition.gameIndex < games.length) {
        setCurrentGameIndex(lastPosition.gameIndex);
      }
      var newCompletedGames = Object.assign({}, completedGames);
      games.forEach(function (_, index) {
        if (!newCompletedGames[index]) {
          newCompletedGames[index] = {
            completed: false
          };
        }
      });
      setCompletedGames(newCompletedGames);
      isInitialized.current = true;
    }
  }, [loaded, games, lastPosition, completedGames]);
  var shuffleGameOptions = function shuffleGameOptions(game) {
    var optionsToShuffle = [];
    if (game.type === "matching") {
      var allItems = game.pairs.flatMap(function (pair) {
        return [pair.word, pair.match];
      });
      optionsToShuffle = allItems.sort(function () {
        return Math.random() - 0.5;
      });
    } else if (game.type === "categorization") {
      optionsToShuffle = (0, _toConsumableArray2.default)(game.words).sort(function () {
        return Math.random() - 0.5;
      });
    }
    setShuffledOptions(optionsToShuffle);
  };
  (0, _react.useEffect)(function () {
    if (currentGame) {
      setSelectedItems([]);
      setMatchedItems([]);
      setShowFeedback(false);
      setIsCorrect(false);
      shuffleGameOptions(currentGame);
    }
  }, [currentGameIndex, currentGame]);
  var handleNext = (0, _react.useCallback)(function () {
    if (currentGameIndex < games.length - 1) {
      setCurrentGameIndex(function (prev) {
        return prev + 1;
      });
      setShowFeedback(false);
      setIsCorrect(false);
      return {
        completed: false
      };
    } else {
      setShowResults(true);
      return {
        completed: true
      };
    }
  }, [currentGameIndex, games.length]);
  var handlePrevious = (0, _react.useCallback)(function () {
    if (currentGameIndex > 0) {
      setCurrentGameIndex(function (prev) {
        return prev - 1;
      });
      setShowFeedback(false);
      setIsCorrect(false);
      return true;
    }
    return false;
  }, [currentGameIndex]);
  var resetGames = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      yield _asyncStorage.default.multiRemove([STORAGE_KEY, COMPLETED_KEY, SCORES_KEY]);
      setCurrentGameIndex(0);
      setSelectedItems([]);
      setMatchedItems([]);
      setShowFeedback(false);
      setIsCorrect(false);
      setShowResults(false);
      setScore(0);
      setCompletedGames({});
      setLastPosition({
        gameIndex: 0
      });
      if (games.length > 0) {
        setGameResults(Array(games.length).fill({
          score: 0,
          maxScore: 0,
          completed: false
        }));
        shuffleGameOptions(games[0]);
      }
    } catch (error) {}
  }), [STORAGE_KEY, COMPLETED_KEY, SCORES_KEY, games]);
  var getStats = (0, _react.useCallback)(function () {
    var completedGamesCount = Object.values(completedGames).filter(function (game) {
      return game.completed;
    }).length;
    var totalMaxScore = gameResults.reduce(function (sum, result) {
      return sum + result.maxScore;
    }, 0);
    var totalProgress = totalGames > 0 ? Math.round(completedGamesCount / totalGames * 100) : 0;
    var currentProgress = totalGames > 0 ? (currentGameIndex + 1) / totalGames * 100 : 0;
    return {
      totalGames: totalGames,
      completedGamesCount: completedGamesCount,
      totalProgress: totalProgress,
      currentProgress: currentProgress,
      score: score,
      totalMaxScore: totalMaxScore,
      percentage: totalMaxScore > 0 ? Math.round(score / totalMaxScore * 100) : 0
    };
  }, [totalGames, completedGames, gameResults, currentGameIndex, score]);
  var getDisplayData = (0, _react.useCallback)(function () {
    var gameCounter = `${currentGameIndex + 1} / ${totalGames}`;
    var gameTitle = (currentGame == null ? void 0 : currentGame.title) || `Game ${currentGameIndex + 1}`;
    return {
      gameCounter: gameCounter,
      gameTitle: gameTitle,
      currentGame: currentGame,
      currentGameIndex: currentGameIndex + 1
    };
  }, [currentGameIndex, totalGames, currentGame]);
  var canGoToPrevious = currentGameIndex > 0;
  var isLastGame = currentGameIndex === totalGames - 1;
  return {
    currentGameIndex: currentGameIndex,
    selectedItems: selectedItems,
    matchedItems: matchedItems,
    showFeedback: showFeedback,
    isCorrect: isCorrect,
    showResults: showResults,
    score: score,
    gameResults: gameResults,
    shuffledOptions: shuffledOptions,
    completedGames: completedGames,
    loaded: loaded,
    games: games,
    currentGame: currentGame,
    totalGames: totalGames,
    fadeAnim: fadeAnim,
    bounceAnim: bounceAnim,
    handleNext: handleNext,
    handlePrevious: handlePrevious,
    resetGames: resetGames,
    setCurrentGameIndex: setCurrentGameIndex,
    canGoToPrevious: canGoToPrevious,
    isLastGame: isLastGame,
    stats: getStats(),
    display: getDisplayData()
  };
};
var _default = exports.default = useWordGames;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX2FzeW5jU3RvcmFnZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfdXNlR2FtZUFuaW1hdGlvbjIiLCJ1c2VXb3JkR2FtZXMiLCJ3b3JkR2FtZXNEYXRhIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwibGV2ZWwiLCJfdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsIl91c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheTIiLCJkZWZhdWx0IiwiY3VycmVudEdhbWVJbmRleCIsInNldEN1cnJlbnRHYW1lSW5kZXgiLCJfdXNlU3RhdGUzIiwiX3VzZVN0YXRlNCIsInNlbGVjdGVkSXRlbXMiLCJzZXRTZWxlY3RlZEl0ZW1zIiwiX3VzZVN0YXRlNSIsIl91c2VTdGF0ZTYiLCJtYXRjaGVkSXRlbXMiLCJzZXRNYXRjaGVkSXRlbXMiLCJfdXNlU3RhdGU3IiwiX3VzZVN0YXRlOCIsInNob3dGZWVkYmFjayIsInNldFNob3dGZWVkYmFjayIsIl91c2VTdGF0ZTkiLCJfdXNlU3RhdGUwIiwiaXNDb3JyZWN0Iiwic2V0SXNDb3JyZWN0IiwiX3VzZVN0YXRlMSIsIl91c2VTdGF0ZTEwIiwic2hvd1Jlc3VsdHMiLCJzZXRTaG93UmVzdWx0cyIsIl91c2VTdGF0ZTExIiwiX3VzZVN0YXRlMTIiLCJzY29yZSIsInNldFNjb3JlIiwiX3VzZVN0YXRlMTMiLCJfdXNlU3RhdGUxNCIsImdhbWVSZXN1bHRzIiwic2V0R2FtZVJlc3VsdHMiLCJfdXNlU3RhdGUxNSIsIl91c2VTdGF0ZTE2Iiwic2h1ZmZsZWRPcHRpb25zIiwic2V0U2h1ZmZsZWRPcHRpb25zIiwiX3VzZVN0YXRlMTciLCJfdXNlU3RhdGUxOCIsImNvbXBsZXRlZEdhbWVzIiwic2V0Q29tcGxldGVkR2FtZXMiLCJfdXNlU3RhdGUxOSIsImdhbWVJbmRleCIsIl91c2VTdGF0ZTIwIiwibGFzdFBvc2l0aW9uIiwic2V0TGFzdFBvc2l0aW9uIiwiX3VzZVN0YXRlMjEiLCJfdXNlU3RhdGUyMiIsImxvYWRlZCIsInNldExvYWRlZCIsImlzSW5pdGlhbGl6ZWQiLCJ1c2VSZWYiLCJfdXNlR2FtZUFuaW1hdGlvbiIsInVzZUdhbWVBbmltYXRpb24iLCJmYWRlQW5pbSIsImJvdW5jZUFuaW0iLCJnYW1lcyIsImN1cnJlbnRHYW1lIiwidG90YWxHYW1lcyIsIlNUT1JBR0VfS0VZIiwiQ09NUExFVEVEX0tFWSIsIlNDT1JFU19LRVkiLCJ1c2VFZmZlY3QiLCJsb2FkRGF0YSIsIl9yZWYiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJzYXZlZFBvc2l0aW9uIiwiQXN5bmNTdG9yYWdlIiwiZ2V0SXRlbSIsIl9KU09OJHBhcnNlIiwiSlNPTiIsInBhcnNlIiwic2F2ZWRDb21wbGV0ZWQiLCJBcnJheSIsImZpbGwiLCJtYXhTY29yZSIsImNvbXBsZXRlZCIsImVycm9yIiwiYXBwbHkiLCJzYXZlRGF0YSIsInVzZUNhbGxiYWNrIiwiZGF0YVRvU2F2ZSIsInRpbWVzdGFtcCIsIkRhdGUiLCJub3ciLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwiY3VycmVudCIsIm5ld0NvbXBsZXRlZEdhbWVzIiwiT2JqZWN0IiwiYXNzaWduIiwiZm9yRWFjaCIsIl8iLCJpbmRleCIsInNodWZmbGVHYW1lT3B0aW9ucyIsImdhbWUiLCJvcHRpb25zVG9TaHVmZmxlIiwidHlwZSIsImFsbEl0ZW1zIiwicGFpcnMiLCJmbGF0TWFwIiwicGFpciIsIndvcmQiLCJtYXRjaCIsInNvcnQiLCJNYXRoIiwicmFuZG9tIiwiX3RvQ29uc3VtYWJsZUFycmF5MiIsIndvcmRzIiwiaGFuZGxlTmV4dCIsInByZXYiLCJoYW5kbGVQcmV2aW91cyIsInJlc2V0R2FtZXMiLCJtdWx0aVJlbW92ZSIsImdldFN0YXRzIiwiY29tcGxldGVkR2FtZXNDb3VudCIsInZhbHVlcyIsImZpbHRlciIsInRvdGFsTWF4U2NvcmUiLCJyZWR1Y2UiLCJzdW0iLCJyZXN1bHQiLCJ0b3RhbFByb2dyZXNzIiwicm91bmQiLCJjdXJyZW50UHJvZ3Jlc3MiLCJwZXJjZW50YWdlIiwiZ2V0RGlzcGxheURhdGEiLCJnYW1lQ291bnRlciIsImdhbWVUaXRsZSIsInRpdGxlIiwiY2FuR29Ub1ByZXZpb3VzIiwiaXNMYXN0R2FtZSIsInN0YXRzIiwiZGlzcGxheSIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInVzZVdvcmRHYW1lcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBob29rcy91c2VXb3JkR2FtZXMuanMgLSBIT09LIFVOSUZJw4kgU0lNUExFXHJcbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZUNhbGxiYWNrLCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBBc3luY1N0b3JhZ2UgZnJvbSAnQHJlYWN0LW5hdGl2ZS1hc3luYy1zdG9yYWdlL2FzeW5jLXN0b3JhZ2UnO1xyXG5pbXBvcnQgdXNlR2FtZUFuaW1hdGlvbiBmcm9tICcuL3VzZUdhbWVBbmltYXRpb24nO1xyXG5cclxuLyoqXHJcbiAqIPCfjq8gSG9vayB1bmlmacOpIHBvdXIgV29yZCBHYW1lc1xyXG4gKiBSZW1wbGFjZSB1c2VXb3JkR2FtZXNTdGF0ZSArIHVzZVdvcmRHYW1lc1Byb2dyZXNzXHJcbiAqIFNpbXBsZSwgZWZmaWNhY2UsIG1haW50ZW5hYmxlIC0gcGF0dGVybiBpZGVudGlxdWUgw6AgdXNlVm9jYWJ1bGFyeSBldCB1c2VBc3Nlc3NtZW50XHJcbiAqL1xyXG5jb25zdCB1c2VXb3JkR2FtZXMgPSAod29yZEdhbWVzRGF0YSA9IG51bGwsIGxldmVsID0gXCJBMVwiKSA9PiB7XHJcbiAgXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PSBDT1JFIFNUQVRFID09PT09PT09PT09PT09PT09PT1cclxuICBjb25zdCBbY3VycmVudEdhbWVJbmRleCwgc2V0Q3VycmVudEdhbWVJbmRleF0gPSB1c2VTdGF0ZSgwKTtcclxuICBjb25zdCBbc2VsZWN0ZWRJdGVtcywgc2V0U2VsZWN0ZWRJdGVtc10gPSB1c2VTdGF0ZShbXSk7XHJcbiAgY29uc3QgW21hdGNoZWRJdGVtcywgc2V0TWF0Y2hlZEl0ZW1zXSA9IHVzZVN0YXRlKFtdKTtcclxuICBjb25zdCBbc2hvd0ZlZWRiYWNrLCBzZXRTaG93RmVlZGJhY2tdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gIGNvbnN0IFtpc0NvcnJlY3QsIHNldElzQ29ycmVjdF0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgY29uc3QgW3Nob3dSZXN1bHRzLCBzZXRTaG93UmVzdWx0c10gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgY29uc3QgW3Njb3JlLCBzZXRTY29yZV0gPSB1c2VTdGF0ZSgwKTtcclxuICBjb25zdCBbZ2FtZVJlc3VsdHMsIHNldEdhbWVSZXN1bHRzXSA9IHVzZVN0YXRlKFtdKTtcclxuICBjb25zdCBbc2h1ZmZsZWRPcHRpb25zLCBzZXRTaHVmZmxlZE9wdGlvbnNdID0gdXNlU3RhdGUoW10pO1xyXG4gIGNvbnN0IFtjb21wbGV0ZWRHYW1lcywgc2V0Q29tcGxldGVkR2FtZXNdID0gdXNlU3RhdGUoe30pO1xyXG4gIGNvbnN0IFtsYXN0UG9zaXRpb24sIHNldExhc3RQb3NpdGlvbl0gPSB1c2VTdGF0ZSh7IGdhbWVJbmRleDogMCB9KTtcclxuICBjb25zdCBbbG9hZGVkLCBzZXRMb2FkZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG5cclxuICAvLyA9PT09PT09PT09PT09PT09PT09IFJFRlMgPT09PT09PT09PT09PT09PT09PVxyXG4gIGNvbnN0IGlzSW5pdGlhbGl6ZWQgPSB1c2VSZWYoZmFsc2UpO1xyXG5cclxuICAvLyA9PT09PT09PT09PT09PT09PT09IEFOSU1BVElPTlMgPT09PT09PT09PT09PT09PT09PVxyXG4gIGNvbnN0IHsgZmFkZUFuaW0sIGJvdW5jZUFuaW0gfSA9IHVzZUdhbWVBbmltYXRpb24oKTtcclxuXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PSBDT01QVVRFRCBWQUxVRVMgPT09PT09PT09PT09PT09PT09PVxyXG4gIGNvbnN0IGdhbWVzID0gd29yZEdhbWVzRGF0YT8uZ2FtZXMgfHwgW107XHJcbiAgY29uc3QgY3VycmVudEdhbWUgPSBnYW1lc1tjdXJyZW50R2FtZUluZGV4XSB8fCBudWxsO1xyXG4gIGNvbnN0IHRvdGFsR2FtZXMgPSBnYW1lcy5sZW5ndGg7XHJcbiAgXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PSBQRVJTSVNURU5DRSA9PT09PT09PT09PT09PT09PT09XHJcbiAgY29uc3QgU1RPUkFHRV9LRVkgPSBgd29yZF9nYW1lc18ke2xldmVsfWA7XHJcbiAgY29uc3QgQ09NUExFVEVEX0tFWSA9IGB3b3JkX2dhbWVzX2NvbXBsZXRlZF8ke2xldmVsfWA7XHJcbiAgY29uc3QgU0NPUkVTX0tFWSA9IGB3b3JkX2dhbWVzX3Njb3Jlc18ke2xldmVsfWA7XHJcblxyXG4gIC8vIExvYWQgZGF0YSBmcm9tIHN0b3JhZ2VcclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgY29uc3QgbG9hZERhdGEgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgLy8gQ2hhcmdlciBwb3NpdGlvblxyXG4gICAgICAgIGNvbnN0IHNhdmVkUG9zaXRpb24gPSBhd2FpdCBBc3luY1N0b3JhZ2UuZ2V0SXRlbShTVE9SQUdFX0tFWSk7XHJcbiAgICAgICAgaWYgKHNhdmVkUG9zaXRpb24pIHtcclxuICAgICAgICAgIGNvbnN0IHsgZ2FtZUluZGV4IH0gPSBKU09OLnBhcnNlKHNhdmVkUG9zaXRpb24pO1xyXG4gICAgICAgICAgc2V0TGFzdFBvc2l0aW9uKHsgZ2FtZUluZGV4IH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2hhcmdlciBqZXV4IGNvbXBsw6l0w6lzXHJcbiAgICAgICAgY29uc3Qgc2F2ZWRDb21wbGV0ZWQgPSBhd2FpdCBBc3luY1N0b3JhZ2UuZ2V0SXRlbShDT01QTEVURURfS0VZKTtcclxuICAgICAgICBpZiAoc2F2ZWRDb21wbGV0ZWQpIHtcclxuICAgICAgICAgIHNldENvbXBsZXRlZEdhbWVzKEpTT04ucGFyc2Uoc2F2ZWRDb21wbGV0ZWQpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEluaXRpYWxpc2VyIGdhbWVSZXN1bHRzIHNlbG9uIGxlIG5vbWJyZSBkZSBqZXV4XHJcbiAgICAgICAgaWYgKGdhbWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIHNldEdhbWVSZXN1bHRzKEFycmF5KGdhbWVzLmxlbmd0aCkuZmlsbCh7XHJcbiAgICAgICAgICAgIHNjb3JlOiAwLFxyXG4gICAgICAgICAgICBtYXhTY29yZTogMCxcclxuICAgICAgICAgICAgY29tcGxldGVkOiBmYWxzZSxcclxuICAgICAgICAgIH0pKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgLy8gSWdub3JlZCBvbiBwdXJwb3NlXHJcbiAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgc2V0TG9hZGVkKHRydWUpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgbG9hZERhdGEoKTtcclxuICB9LCBbbGV2ZWwsIGdhbWVzLmxlbmd0aF0pO1xyXG5cclxuICAvLyBTYXZlIGRhdGEgdG8gc3RvcmFnZVxyXG4gIGNvbnN0IHNhdmVEYXRhID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gU2F1dmVnYXJkZXIgcG9zaXRpb25cclxuICAgICAgY29uc3QgZGF0YVRvU2F2ZSA9IHtcclxuICAgICAgICBnYW1lSW5kZXg6IGN1cnJlbnRHYW1lSW5kZXgsXHJcbiAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpXHJcbiAgICAgIH07XHJcbiAgICAgIGF3YWl0IEFzeW5jU3RvcmFnZS5zZXRJdGVtKFNUT1JBR0VfS0VZLCBKU09OLnN0cmluZ2lmeShkYXRhVG9TYXZlKSk7XHJcblxyXG4gICAgICAvLyBTYXV2ZWdhcmRlciBqZXV4IGNvbXBsw6l0w6lzXHJcbiAgICAgIGF3YWl0IEFzeW5jU3RvcmFnZS5zZXRJdGVtKENPTVBMRVRFRF9LRVksIEpTT04uc3RyaW5naWZ5KGNvbXBsZXRlZEdhbWVzKSk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAvLyBJZ25vcmVkIG9uIHB1cnBvc2VcclxuICAgIH1cclxuICB9LCBbY3VycmVudEdhbWVJbmRleCwgY29tcGxldGVkR2FtZXMsIFNUT1JBR0VfS0VZLCBDT01QTEVURURfS0VZXSk7XHJcblxyXG4gIC8vIEF1dG8tc2F2ZSB3aGVuIGRhdGEgY2hhbmdlc1xyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAobG9hZGVkKSBzYXZlRGF0YSgpO1xyXG4gIH0sIFtzYXZlRGF0YSwgbG9hZGVkXSk7XHJcblxyXG4gIC8vIEluaXRpYWxpemUgZ2FtZSBzZXR1cFxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAobG9hZGVkICYmIGdhbWVzLmxlbmd0aCA+IDAgJiYgIWlzSW5pdGlhbGl6ZWQuY3VycmVudCkge1xyXG4gICAgICAvLyBSZXN0YXVyZXIgcG9zaXRpb24gb3UgY29tbWVuY2VyIGF1IGTDqWJ1dFxyXG4gICAgICBpZiAobGFzdFBvc2l0aW9uICYmIGxhc3RQb3NpdGlvbi5nYW1lSW5kZXggPCBnYW1lcy5sZW5ndGgpIHtcclxuICAgICAgICBzZXRDdXJyZW50R2FtZUluZGV4KGxhc3RQb3NpdGlvbi5nYW1lSW5kZXgpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvLyBJbml0aWFsaXNlciBwcm9ncmVzc2lvbiBzaSBuw6ljZXNzYWlyZVxyXG4gICAgICBjb25zdCBuZXdDb21wbGV0ZWRHYW1lcyA9IHsgLi4uY29tcGxldGVkR2FtZXMgfTtcclxuICAgICAgZ2FtZXMuZm9yRWFjaCgoXywgaW5kZXgpID0+IHtcclxuICAgICAgICBpZiAoIW5ld0NvbXBsZXRlZEdhbWVzW2luZGV4XSkge1xyXG4gICAgICAgICAgbmV3Q29tcGxldGVkR2FtZXNbaW5kZXhdID0geyBjb21wbGV0ZWQ6IGZhbHNlIH07XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgc2V0Q29tcGxldGVkR2FtZXMobmV3Q29tcGxldGVkR2FtZXMpO1xyXG4gICAgICBpc0luaXRpYWxpemVkLmN1cnJlbnQgPSB0cnVlO1xyXG4gICAgfVxyXG4gIH0sIFtsb2FkZWQsIGdhbWVzLCBsYXN0UG9zaXRpb24sIGNvbXBsZXRlZEdhbWVzXSk7XHJcblxyXG4gIC8vIETDqWNsYXJhdGlvbiBkZXMgZm9uY3Rpb25zIHV0aWxpdGFpcmVzIGF2YW50IGxldXIgdXRpbGlzYXRpb25cclxuICBjb25zdCBzaHVmZmxlR2FtZU9wdGlvbnMgPSAoZ2FtZSkgPT4ge1xyXG4gICAgbGV0IG9wdGlvbnNUb1NodWZmbGUgPSBbXTtcclxuXHJcbiAgICBpZiAoZ2FtZS50eXBlID09PSBcIm1hdGNoaW5nXCIpIHtcclxuICAgICAgY29uc3QgYWxsSXRlbXMgPSBnYW1lLnBhaXJzLmZsYXRNYXAoKHBhaXIpID0+IFtwYWlyLndvcmQsIHBhaXIubWF0Y2hdKTtcclxuICAgICAgb3B0aW9uc1RvU2h1ZmZsZSA9IGFsbEl0ZW1zLnNvcnQoKCkgPT4gTWF0aC5yYW5kb20oKSAtIDAuNSk7XHJcbiAgICB9IGVsc2UgaWYgKGdhbWUudHlwZSA9PT0gXCJjYXRlZ29yaXphdGlvblwiKSB7XHJcbiAgICAgIG9wdGlvbnNUb1NodWZmbGUgPSBbLi4uZ2FtZS53b3Jkc10uc29ydCgoKSA9PiBNYXRoLnJhbmRvbSgpIC0gMC41KTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRTaHVmZmxlZE9wdGlvbnMob3B0aW9uc1RvU2h1ZmZsZSk7XHJcbiAgfTtcclxuXHJcbiAgLy8gU2V0dXAgY3VycmVudCBnYW1lXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmIChjdXJyZW50R2FtZSkge1xyXG4gICAgICAvLyBSw6lpbml0aWFsaXNlciBsZXMgw6l0YXRzIHBvdXIgbGUgamV1IGFjdHVlbFxyXG4gICAgICBzZXRTZWxlY3RlZEl0ZW1zKFtdKTtcclxuICAgICAgc2V0TWF0Y2hlZEl0ZW1zKFtdKTtcclxuICAgICAgc2V0U2hvd0ZlZWRiYWNrKGZhbHNlKTtcclxuICAgICAgc2V0SXNDb3JyZWN0KGZhbHNlKTtcclxuXHJcbiAgICAgIC8vIE3DqWxhbmdlciBsZXMgb3B0aW9ucyBzZWxvbiBsZSB0eXBlIGRlIGpldVxyXG4gICAgICBzaHVmZmxlR2FtZU9wdGlvbnMoY3VycmVudEdhbWUpO1xyXG4gICAgfVxyXG4gIH0sIFtjdXJyZW50R2FtZUluZGV4LCBjdXJyZW50R2FtZV0pO1xyXG5cclxuICAvLyA9PT09PT09PT09PT09PT09PT09IEdBTUUgTE9HSUMgPT09PT09PT09PT09PT09PT09PVxyXG4gIFxyXG4gIC8vID09PT09PT09PT09PT09PT09PT0gTUFJTiBOQVZJR0FUSU9OID09PT09PT09PT09PT09PT09PT1cclxuICBcclxuICBjb25zdCBoYW5kbGVOZXh0ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgaWYgKGN1cnJlbnRHYW1lSW5kZXggPCBnYW1lcy5sZW5ndGggLSAxKSB7XHJcbiAgICAgIHNldEN1cnJlbnRHYW1lSW5kZXgocHJldiA9PiBwcmV2ICsgMSk7XHJcbiAgICAgIHNldFNob3dGZWVkYmFjayhmYWxzZSk7XHJcbiAgICAgIHNldElzQ29ycmVjdChmYWxzZSk7XHJcbiAgICAgIHJldHVybiB7IGNvbXBsZXRlZDogZmFsc2UgfTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHNldFNob3dSZXN1bHRzKHRydWUpO1xyXG4gICAgICByZXR1cm4geyBjb21wbGV0ZWQ6IHRydWUgfTtcclxuICAgIH1cclxuICB9LCBbY3VycmVudEdhbWVJbmRleCwgZ2FtZXMubGVuZ3RoXSk7XHJcblxyXG4gIGNvbnN0IGhhbmRsZVByZXZpb3VzID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgaWYgKGN1cnJlbnRHYW1lSW5kZXggPiAwKSB7XHJcbiAgICAgIHNldEN1cnJlbnRHYW1lSW5kZXgocHJldiA9PiBwcmV2IC0gMSk7XHJcbiAgICAgIHNldFNob3dGZWVkYmFjayhmYWxzZSk7XHJcbiAgICAgIHNldElzQ29ycmVjdChmYWxzZSk7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH0sIFtjdXJyZW50R2FtZUluZGV4XSk7XHJcblxyXG4gIGNvbnN0IHJlc2V0R2FtZXMgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBhd2FpdCBBc3luY1N0b3JhZ2UubXVsdGlSZW1vdmUoW1NUT1JBR0VfS0VZLCBDT01QTEVURURfS0VZLCBTQ09SRVNfS0VZXSk7XHJcbiAgICAgIFxyXG4gICAgICBzZXRDdXJyZW50R2FtZUluZGV4KDApO1xyXG4gICAgICBzZXRTZWxlY3RlZEl0ZW1zKFtdKTtcclxuICAgICAgc2V0TWF0Y2hlZEl0ZW1zKFtdKTtcclxuICAgICAgc2V0U2hvd0ZlZWRiYWNrKGZhbHNlKTtcclxuICAgICAgc2V0SXNDb3JyZWN0KGZhbHNlKTtcclxuICAgICAgc2V0U2hvd1Jlc3VsdHMoZmFsc2UpO1xyXG4gICAgICBzZXRTY29yZSgwKTtcclxuICAgICAgc2V0Q29tcGxldGVkR2FtZXMoe30pO1xyXG4gICAgICBzZXRMYXN0UG9zaXRpb24oeyBnYW1lSW5kZXg6IDAgfSk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoZ2FtZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHNldEdhbWVSZXN1bHRzKEFycmF5KGdhbWVzLmxlbmd0aCkuZmlsbCh7XHJcbiAgICAgICAgICBzY29yZTogMCxcclxuICAgICAgICAgIG1heFNjb3JlOiAwLFxyXG4gICAgICAgICAgY29tcGxldGVkOiBmYWxzZSxcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgc2h1ZmZsZUdhbWVPcHRpb25zKGdhbWVzWzBdKTtcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgLy8gSWdub3JlZCBvbiBwdXJwb3NlXHJcbiAgICB9XHJcbiAgfSwgW1NUT1JBR0VfS0VZLCBDT01QTEVURURfS0VZLCBTQ09SRVNfS0VZLCBnYW1lc10pO1xyXG5cclxuICAvLyA9PT09PT09PT09PT09PT09PT09IENPTVBVVEVEIFNUQVRTID09PT09PT09PT09PT09PT09PT1cclxuICBcclxuICBjb25zdCBnZXRTdGF0cyA9IHVzZUNhbGxiYWNrKCgpID0+IHtcclxuICAgIGNvbnN0IGNvbXBsZXRlZEdhbWVzQ291bnQgPSBPYmplY3QudmFsdWVzKGNvbXBsZXRlZEdhbWVzKS5maWx0ZXIoXHJcbiAgICAgIGdhbWUgPT4gZ2FtZS5jb21wbGV0ZWRcclxuICAgICkubGVuZ3RoO1xyXG4gICAgXHJcbiAgICBjb25zdCB0b3RhbE1heFNjb3JlID0gZ2FtZVJlc3VsdHMucmVkdWNlKChzdW0sIHJlc3VsdCkgPT4gc3VtICsgcmVzdWx0Lm1heFNjb3JlLCAwKTtcclxuICAgIGNvbnN0IHRvdGFsUHJvZ3Jlc3MgPSB0b3RhbEdhbWVzID4gMCA/IE1hdGgucm91bmQoKGNvbXBsZXRlZEdhbWVzQ291bnQgLyB0b3RhbEdhbWVzKSAqIDEwMCkgOiAwO1xyXG4gICAgY29uc3QgY3VycmVudFByb2dyZXNzID0gdG90YWxHYW1lcyA+IDAgPyAoKGN1cnJlbnRHYW1lSW5kZXggKyAxKSAvIHRvdGFsR2FtZXMpICogMTAwIDogMDtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0b3RhbEdhbWVzLFxyXG4gICAgICBjb21wbGV0ZWRHYW1lc0NvdW50LFxyXG4gICAgICB0b3RhbFByb2dyZXNzLFxyXG4gICAgICBjdXJyZW50UHJvZ3Jlc3MsXHJcbiAgICAgIHNjb3JlLFxyXG4gICAgICB0b3RhbE1heFNjb3JlLFxyXG4gICAgICBwZXJjZW50YWdlOiB0b3RhbE1heFNjb3JlID4gMCA/IE1hdGgucm91bmQoKHNjb3JlIC8gdG90YWxNYXhTY29yZSkgKiAxMDApIDogMFxyXG4gICAgfTtcclxuICB9LCBbdG90YWxHYW1lcywgY29tcGxldGVkR2FtZXMsIGdhbWVSZXN1bHRzLCBjdXJyZW50R2FtZUluZGV4LCBzY29yZV0pO1xyXG5cclxuICAvLyA9PT09PT09PT09PT09PT09PT09IENPTVBVVEVEIERJU1BMQVkgPT09PT09PT09PT09PT09PT09PVxyXG4gIFxyXG4gIGNvbnN0IGdldERpc3BsYXlEYXRhID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgY29uc3QgZ2FtZUNvdW50ZXIgPSBgJHtjdXJyZW50R2FtZUluZGV4ICsgMX0gLyAke3RvdGFsR2FtZXN9YDtcclxuICAgIGNvbnN0IGdhbWVUaXRsZSA9IGN1cnJlbnRHYW1lPy50aXRsZSB8fCBgR2FtZSAke2N1cnJlbnRHYW1lSW5kZXggKyAxfWA7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgZ2FtZUNvdW50ZXIsXHJcbiAgICAgIGdhbWVUaXRsZSxcclxuICAgICAgY3VycmVudEdhbWUsXHJcbiAgICAgIGN1cnJlbnRHYW1lSW5kZXg6IGN1cnJlbnRHYW1lSW5kZXggKyAxXHJcbiAgICB9O1xyXG4gIH0sIFtjdXJyZW50R2FtZUluZGV4LCB0b3RhbEdhbWVzLCBjdXJyZW50R2FtZV0pO1xyXG5cclxuICAvLyA9PT09PT09PT09PT09PT09PT09IFZBTElEQVRJT04gPT09PT09PT09PT09PT09PT09PVxyXG4gIFxyXG4gIGNvbnN0IGNhbkdvVG9QcmV2aW91cyA9IGN1cnJlbnRHYW1lSW5kZXggPiAwO1xyXG4gIGNvbnN0IGlzTGFzdEdhbWUgPSBjdXJyZW50R2FtZUluZGV4ID09PSB0b3RhbEdhbWVzIC0gMTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIC8vIFN0YXRlXHJcbiAgICBjdXJyZW50R2FtZUluZGV4LFxyXG4gICAgc2VsZWN0ZWRJdGVtcyxcclxuICAgIG1hdGNoZWRJdGVtcyxcclxuICAgIHNob3dGZWVkYmFjayxcclxuICAgIGlzQ29ycmVjdCxcclxuICAgIHNob3dSZXN1bHRzLFxyXG4gICAgc2NvcmUsXHJcbiAgICBnYW1lUmVzdWx0cyxcclxuICAgIHNodWZmbGVkT3B0aW9ucyxcclxuICAgIGNvbXBsZXRlZEdhbWVzLFxyXG4gICAgbG9hZGVkLFxyXG4gICAgXHJcbiAgICAvLyBEYXRhXHJcbiAgICBnYW1lcyxcclxuICAgIGN1cnJlbnRHYW1lLFxyXG4gICAgdG90YWxHYW1lcyxcclxuICAgIFxyXG4gICAgLy8gQW5pbWF0aW9uc1xyXG4gICAgZmFkZUFuaW0sXHJcbiAgICBib3VuY2VBbmltLFxyXG4gICAgXHJcbiAgICAvLyBBY3Rpb25zXHJcbiAgICBoYW5kbGVOZXh0LFxyXG4gICAgaGFuZGxlUHJldmlvdXMsXHJcbiAgICByZXNldEdhbWVzLFxyXG4gICAgc2V0Q3VycmVudEdhbWVJbmRleCxcclxuICAgIFxyXG4gICAgLy8gQ29tcHV0ZWRcclxuICAgIGNhbkdvVG9QcmV2aW91cyxcclxuICAgIGlzTGFzdEdhbWUsXHJcbiAgICBzdGF0czogZ2V0U3RhdHMoKSxcclxuICAgIGRpc3BsYXk6IGdldERpc3BsYXlEYXRhKCksXHJcbiAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHVzZVdvcmRHYW1lczsiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQ0EsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsYUFBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUcsa0JBQUEsR0FBQUQsc0JBQUEsQ0FBQUYsT0FBQTtBQU9BLElBQU1JLFlBQVksR0FBRyxTQUFmQSxZQUFZQSxDQUFBLEVBQTJDO0VBQUEsSUFBdkNDLGFBQWEsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsSUFBSTtFQUFBLElBQUVHLEtBQUssR0FBQUgsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsSUFBSTtFQUd0RCxJQUFBSSxTQUFBLEdBQWdELElBQUFDLGVBQVEsRUFBQyxDQUFDLENBQUM7SUFBQUMsVUFBQSxPQUFBQyxlQUFBLENBQUFDLE9BQUEsRUFBQUosU0FBQTtJQUFwREssZ0JBQWdCLEdBQUFILFVBQUE7SUFBRUksbUJBQW1C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