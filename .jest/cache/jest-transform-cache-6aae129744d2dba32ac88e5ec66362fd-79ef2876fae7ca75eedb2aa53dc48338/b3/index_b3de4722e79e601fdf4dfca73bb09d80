2a3bf40612521f0c05c914d850855ea3
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _vectorIcons = require("@expo/vector-icons");
var _native = require("@react-navigation/native");
var _react = require("react");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _constants = require("../../../utils/constants");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var ExerciseHeader = function ExerciseHeader(_ref) {
  var title = _ref.title,
    level = _ref.level,
    _ref$exerciseType = _ref.exerciseType,
    exerciseType = _ref$exerciseType === void 0 ? "vocabulary" : _ref$exerciseType,
    onClose = _ref.onClose,
    _ref$backIcon = _ref.backIcon,
    backIcon = _ref$backIcon === void 0 ? "arrow-back" : _ref$backIcon;
  var navigation = (0, _native.useNavigation)();
  var exerciseInfo = _constants.EXERCISE_TYPES[exerciseType] || _constants.EXERCISE_TYPES.vocabulary;
  var exerciseColor = exerciseInfo.color;
  var exerciseIcon = exerciseInfo.icon;
  var mapCECRToNumeric = function mapCECRToNumeric(cecrLevel) {
    var mapping = {
      A1: "1",
      A2: "2",
      B1: "3",
      B2: "4",
      C1: "5",
      C2: "6"
    };
    return mapping[cecrLevel] || "1";
  };
  var numericLevel = mapCECRToNumeric(level);
  var levelInfo = _constants.LANGUAGE_LEVELS[numericLevel] || _constants.LANGUAGE_LEVELS["1"];
  var levelColor = levelInfo.color;
  var displayLevel = level === "bonus" ? "B" : level;
  var handleClose = (0, _react.useCallback)(function () {
    if (onClose) {
      onClose();
    } else {
      navigation.goBack();
    }
  }, [onClose, navigation]);
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: _style.default.container,
    children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: _style.default.content,
      children: [(0, _jsxRuntime.jsx)(HeaderLeftSection, {
        handleClose: handleClose,
        backIcon: backIcon,
        exerciseIcon: exerciseIcon,
        title: title,
        exerciseColor: exerciseColor,
        localStyles: _style.default
      }), (0, _jsxRuntime.jsx)(LevelBadge, {
        displayLevel: displayLevel,
        levelColor: levelColor,
        localStyles: _style.default
      })]
    })
  });
};
var HeaderLeftSection = function HeaderLeftSection(_ref2) {
  var handleClose = _ref2.handleClose,
    backIcon = _ref2.backIcon,
    exerciseIcon = _ref2.exerciseIcon,
    title = _ref2.title,
    exerciseColor = _ref2.exerciseColor,
    localStyles = _ref2.localStyles;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: localStyles.leftSection,
    children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      testID: "back-button",
      style: localStyles.backButton,
      onPress: handleClose,
      hitSlop: {
        top: 12,
        bottom: 12,
        left: 12,
        right: 12
      },
      activeOpacity: 0.6,
      accessibilityRole: "button",
      children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
        name: backIcon,
        size: 22,
        color: "#64748b"
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: localStyles.titleSection,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: localStyles.exerciseIcon,
        children: exerciseIcon
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [localStyles.title, {
          color: exerciseColor
        }],
        children: title
      })]
    })]
  });
};
HeaderLeftSection.propTypes = {
  handleClose: _propTypes.default.func.isRequired,
  backIcon: _propTypes.default.string.isRequired,
  exerciseIcon: _propTypes.default.string.isRequired,
  title: _propTypes.default.string.isRequired,
  exerciseColor: _propTypes.default.string.isRequired,
  localStyles: _propTypes.default.object.isRequired
};
var LevelBadge = function LevelBadge(_ref3) {
  var displayLevel = _ref3.displayLevel,
    levelColor = _ref3.levelColor,
    localStyles = _ref3.localStyles;
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: [localStyles.levelBadge, {
      backgroundColor: levelColor
    }],
    children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: localStyles.levelText,
      children: displayLevel
    })
  });
};
LevelBadge.propTypes = {
  displayLevel: _propTypes.default.string.isRequired,
  levelColor: _propTypes.default.string.isRequired,
  localStyles: _propTypes.default.object.isRequired
};
ExerciseHeader.propTypes = {
  title: _propTypes.default.string.isRequired,
  level: _propTypes.default.string.isRequired,
  exerciseType: _propTypes.default.string,
  onClose: _propTypes.default.func,
  backIcon: _propTypes.default.string
};
var _default = exports.default = ExerciseHeader;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,