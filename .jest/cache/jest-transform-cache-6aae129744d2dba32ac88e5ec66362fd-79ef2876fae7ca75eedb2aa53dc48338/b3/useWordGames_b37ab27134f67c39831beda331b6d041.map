{"version":3,"names":["_react","require","_asyncStorage","_interopRequireDefault","_useGameAnimation2","useWordGames","wordGamesData","arguments","length","undefined","level","_useState","useState","_useState2","_slicedToArray2","default","currentGameIndex","setCurrentGameIndex","_useState3","_useState4","selectedItems","setSelectedItems","_useState5","_useState6","matchedItems","setMatchedItems","_useState7","_useState8","showFeedback","setShowFeedback","_useState9","_useState0","isCorrect","setIsCorrect","_useState1","_useState10","showResults","setShowResults","_useState11","_useState12","score","setScore","_useState13","_useState14","gameResults","setGameResults","_useState15","_useState16","shuffledOptions","setShuffledOptions","_useState17","_useState18","completedGames","setCompletedGames","_useState19","gameIndex","_useState20","lastPosition","setLastPosition","_useState21","_useState22","loaded","setLoaded","isInitialized","useRef","_useGameAnimation","useGameAnimation","fadeAnim","bounceAnim","games","currentGame","totalGames","STORAGE_KEY","COMPLETED_KEY","SCORES_KEY","useEffect","loadData","_ref","_asyncToGenerator2","savedPosition","AsyncStorage","getItem","_JSON$parse","JSON","parse","savedCompleted","Array","fill","maxScore","completed","error","apply","saveData","useCallback","dataToSave","timestamp","Date","now","setItem","stringify","current","newCompletedGames","Object","assign","forEach","_","index","shuffleGameOptions","game","optionsToShuffle","type","allItems","pairs","flatMap","pair","word","match","sort","Math","random","_toConsumableArray2","words","handleNext","prev","handlePrevious","resetGames","multiRemove","getStats","completedGamesCount","values","filter","totalMaxScore","reduce","sum","result","totalProgress","round","currentProgress","percentage","getDisplayData","gameCounter","gameTitle","title","canGoToPrevious","isLastGame","stats","display","_default","exports"],"sources":["useWordGames.js"],"sourcesContent":["// hooks/useWordGames.js - HOOK UNIFI√â SIMPLE\r\nimport { useState, useEffect, useCallback, useRef } from 'react';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport useGameAnimation from './useGameAnimation';\r\n\r\n/**\r\n * üéØ Hook unifi√© pour Word Games\r\n * Remplace useWordGamesState + useWordGamesProgress\r\n * Simple, efficace, maintenable - pattern identique √† useVocabulary et useAssessment\r\n */\r\nconst useWordGames = (wordGamesData = null, level = \"A1\") => {\r\n  \r\n  // =================== CORE STATE ===================\r\n  const [currentGameIndex, setCurrentGameIndex] = useState(0);\r\n  const [selectedItems, setSelectedItems] = useState([]);\r\n  const [matchedItems, setMatchedItems] = useState([]);\r\n  const [showFeedback, setShowFeedback] = useState(false);\r\n  const [isCorrect, setIsCorrect] = useState(false);\r\n  const [showResults, setShowResults] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [gameResults, setGameResults] = useState([]);\r\n  const [shuffledOptions, setShuffledOptions] = useState([]);\r\n  const [completedGames, setCompletedGames] = useState({});\r\n  const [lastPosition, setLastPosition] = useState({ gameIndex: 0 });\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  // =================== REFS ===================\r\n  const isInitialized = useRef(false);\r\n\r\n  // =================== ANIMATIONS ===================\r\n  const { fadeAnim, bounceAnim } = useGameAnimation();\r\n\r\n  // =================== COMPUTED VALUES ===================\r\n  const games = wordGamesData?.games || [];\r\n  const currentGame = games[currentGameIndex] || null;\r\n  const totalGames = games.length;\r\n  \r\n  // =================== PERSISTENCE ===================\r\n  const STORAGE_KEY = `word_games_${level}`;\r\n  const COMPLETED_KEY = `word_games_completed_${level}`;\r\n  const SCORES_KEY = `word_games_scores_${level}`;\r\n\r\n  // Load data from storage\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      try {\r\n        // Charger position\r\n        const savedPosition = await AsyncStorage.getItem(STORAGE_KEY);\r\n        if (savedPosition) {\r\n          const { gameIndex } = JSON.parse(savedPosition);\r\n          setLastPosition({ gameIndex });\r\n        }\r\n\r\n        // Charger jeux compl√©t√©s\r\n        const savedCompleted = await AsyncStorage.getItem(COMPLETED_KEY);\r\n        if (savedCompleted) {\r\n          setCompletedGames(JSON.parse(savedCompleted));\r\n        }\r\n\r\n        // Initialiser gameResults selon le nombre de jeux\r\n        if (games.length > 0) {\r\n          setGameResults(Array(games.length).fill({\r\n            score: 0,\r\n            maxScore: 0,\r\n            completed: false,\r\n          }));\r\n        }\r\n      } catch (error) {\r\n        // Ignored on purpose\r\n      } finally {\r\n        setLoaded(true);\r\n      }\r\n    };\r\n    loadData();\r\n  }, [level, games.length]);\r\n\r\n  // Save data to storage\r\n  const saveData = useCallback(async () => {\r\n    try {\r\n      // Sauvegarder position\r\n      const dataToSave = {\r\n        gameIndex: currentGameIndex,\r\n        timestamp: Date.now()\r\n      };\r\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(dataToSave));\r\n\r\n      // Sauvegarder jeux compl√©t√©s\r\n      await AsyncStorage.setItem(COMPLETED_KEY, JSON.stringify(completedGames));\r\n    } catch (error) {\r\n      // Ignored on purpose\r\n    }\r\n  }, [currentGameIndex, completedGames, STORAGE_KEY, COMPLETED_KEY]);\r\n\r\n  // Auto-save when data changes\r\n  useEffect(() => {\r\n    if (loaded) saveData();\r\n  }, [saveData, loaded]);\r\n\r\n  // Initialize game setup\r\n  useEffect(() => {\r\n    if (loaded && games.length > 0 && !isInitialized.current) {\r\n      // Restaurer position ou commencer au d√©but\r\n      if (lastPosition && lastPosition.gameIndex < games.length) {\r\n        setCurrentGameIndex(lastPosition.gameIndex);\r\n      }\r\n      \r\n      // Initialiser progression si n√©cessaire\r\n      const newCompletedGames = { ...completedGames };\r\n      games.forEach((_, index) => {\r\n        if (!newCompletedGames[index]) {\r\n          newCompletedGames[index] = { completed: false };\r\n        }\r\n      });\r\n      setCompletedGames(newCompletedGames);\r\n      isInitialized.current = true;\r\n    }\r\n  }, [loaded, games, lastPosition, completedGames]);\r\n\r\n  // D√©claration des fonctions utilitaires avant leur utilisation\r\n  const shuffleGameOptions = (game) => {\r\n    let optionsToShuffle = [];\r\n\r\n    if (game.type === \"matching\") {\r\n      const allItems = game.pairs.flatMap((pair) => [pair.word, pair.match]);\r\n      optionsToShuffle = allItems.sort(() => Math.random() - 0.5);\r\n    } else if (game.type === \"categorization\") {\r\n      optionsToShuffle = [...game.words].sort(() => Math.random() - 0.5);\r\n    }\r\n\r\n    setShuffledOptions(optionsToShuffle);\r\n  };\r\n\r\n  // Setup current game\r\n  useEffect(() => {\r\n    if (currentGame) {\r\n      // R√©initialiser les √©tats pour le jeu actuel\r\n      setSelectedItems([]);\r\n      setMatchedItems([]);\r\n      setShowFeedback(false);\r\n      setIsCorrect(false);\r\n\r\n      // M√©langer les options selon le type de jeu\r\n      shuffleGameOptions(currentGame);\r\n    }\r\n  }, [currentGameIndex, currentGame]);\r\n\r\n  // =================== GAME LOGIC ===================\r\n  \r\n  // =================== MAIN NAVIGATION ===================\r\n  \r\n  const handleNext = useCallback(() => {\r\n    if (currentGameIndex < games.length - 1) {\r\n      setCurrentGameIndex(prev => prev + 1);\r\n      setShowFeedback(false);\r\n      setIsCorrect(false);\r\n      return { completed: false };\r\n    } else {\r\n      setShowResults(true);\r\n      return { completed: true };\r\n    }\r\n  }, [currentGameIndex, games.length]);\r\n\r\n  const handlePrevious = useCallback(() => {\r\n    if (currentGameIndex > 0) {\r\n      setCurrentGameIndex(prev => prev - 1);\r\n      setShowFeedback(false);\r\n      setIsCorrect(false);\r\n      return true;\r\n    }\r\n    return false;\r\n  }, [currentGameIndex]);\r\n\r\n  const resetGames = useCallback(async () => {\r\n    try {\r\n      await AsyncStorage.multiRemove([STORAGE_KEY, COMPLETED_KEY, SCORES_KEY]);\r\n      \r\n      setCurrentGameIndex(0);\r\n      setSelectedItems([]);\r\n      setMatchedItems([]);\r\n      setShowFeedback(false);\r\n      setIsCorrect(false);\r\n      setShowResults(false);\r\n      setScore(0);\r\n      setCompletedGames({});\r\n      setLastPosition({ gameIndex: 0 });\r\n      \r\n      if (games.length > 0) {\r\n        setGameResults(Array(games.length).fill({\r\n          score: 0,\r\n          maxScore: 0,\r\n          completed: false,\r\n        }));\r\n        shuffleGameOptions(games[0]);\r\n      }\r\n    } catch (error) {\r\n      // Ignored on purpose\r\n    }\r\n  }, [STORAGE_KEY, COMPLETED_KEY, SCORES_KEY, games]);\r\n\r\n  // =================== COMPUTED STATS ===================\r\n  \r\n  const getStats = useCallback(() => {\r\n    const completedGamesCount = Object.values(completedGames).filter(\r\n      game => game.completed\r\n    ).length;\r\n    \r\n    const totalMaxScore = gameResults.reduce((sum, result) => sum + result.maxScore, 0);\r\n    const totalProgress = totalGames > 0 ? Math.round((completedGamesCount / totalGames) * 100) : 0;\r\n    const currentProgress = totalGames > 0 ? ((currentGameIndex + 1) / totalGames) * 100 : 0;\r\n\r\n    return {\r\n      totalGames,\r\n      completedGamesCount,\r\n      totalProgress,\r\n      currentProgress,\r\n      score,\r\n      totalMaxScore,\r\n      percentage: totalMaxScore > 0 ? Math.round((score / totalMaxScore) * 100) : 0\r\n    };\r\n  }, [totalGames, completedGames, gameResults, currentGameIndex, score]);\r\n\r\n  // =================== COMPUTED DISPLAY ===================\r\n  \r\n  const getDisplayData = useCallback(() => {\r\n    const gameCounter = `${currentGameIndex + 1} / ${totalGames}`;\r\n    const gameTitle = currentGame?.title || `Game ${currentGameIndex + 1}`;\r\n\r\n    return {\r\n      gameCounter,\r\n      gameTitle,\r\n      currentGame,\r\n      currentGameIndex: currentGameIndex + 1\r\n    };\r\n  }, [currentGameIndex, totalGames, currentGame]);\r\n\r\n  // =================== VALIDATION ===================\r\n  \r\n  const canGoToPrevious = currentGameIndex > 0;\r\n  const isLastGame = currentGameIndex === totalGames - 1;\r\n\r\n  return {\r\n    // State\r\n    currentGameIndex,\r\n    selectedItems,\r\n    matchedItems,\r\n    showFeedback,\r\n    isCorrect,\r\n    showResults,\r\n    score,\r\n    gameResults,\r\n    shuffledOptions,\r\n    completedGames,\r\n    loaded,\r\n    \r\n    // Data\r\n    games,\r\n    currentGame,\r\n    totalGames,\r\n    \r\n    // Animations\r\n    fadeAnim,\r\n    bounceAnim,\r\n    \r\n    // Actions\r\n    handleNext,\r\n    handlePrevious,\r\n    resetGames,\r\n    setCurrentGameIndex,\r\n    \r\n    // Computed\r\n    canGoToPrevious,\r\n    isLastGame,\r\n    stats: getStats(),\r\n    display: getDisplayData(),\r\n  };\r\n};\r\n\r\nexport default useWordGames;"],"mappings":";;;;;;;;AACA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,aAAA,GAAAC,sBAAA,CAAAF,OAAA;AACA,IAAAG,kBAAA,GAAAD,sBAAA,CAAAF,OAAA;AAOA,IAAMI,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAA2C;EAAA,IAAvCC,aAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAAA,IAAEG,KAAK,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAGtD,IAAAI,SAAA,GAAgD,IAAAC,eAAQ,EAAC,CAAC,CAAC;IAAAC,UAAA,OAAAC,eAAA,CAAAC,OAAA,EAAAJ,SAAA;IAApDK,gBAAgB,GAAAH,UAAA;IAAEI,mBAAmB,GAAAJ,UAAA;EAC5C,IAAAK,UAAA,GAA0C,IAAAN,eAAQ,EAAC,EAAE,CAAC;IAAAO,UAAA,OAAAL,eAAA,CAAAC,OAAA,EAAAG,UAAA;IAA/CE,aAAa,GAAAD,UAAA;IAAEE,gBAAgB,GAAAF,UAAA;EACtC,IAAAG,UAAA,GAAwC,IAAAV,eAAQ,EAAC,EAAE,CAAC;IAAAW,UAAA,OAAAT,eAAA,CAAAC,OAAA,EAAAO,UAAA;IAA7CE,YAAY,GAAAD,UAAA;IAAEE,eAAe,GAAAF,UAAA;EACpC,IAAAG,UAAA,GAAwC,IAAAd,eAAQ,EAAC,KAAK,CAAC;IAAAe,UAAA,OAAAb,eAAA,CAAAC,OAAA,EAAAW,UAAA;IAAhDE,YAAY,GAAAD,UAAA;IAAEE,eAAe,GAAAF,UAAA;EACpC,IAAAG,UAAA,GAAkC,IAAAlB,eAAQ,EAAC,KAAK,CAAC;IAAAmB,UAAA,OAAAjB,eAAA,CAAAC,OAAA,EAAAe,UAAA;IAA1CE,SAAS,GAAAD,UAAA;IAAEE,YAAY,GAAAF,UAAA;EAC9B,IAAAG,UAAA,GAAsC,IAAAtB,eAAQ,EAAC,KAAK,CAAC;IAAAuB,WAAA,OAAArB,eAAA,CAAAC,OAAA,EAAAmB,UAAA;IAA9CE,WAAW,GAAAD,WAAA;IAAEE,cAAc,GAAAF,WAAA;EAClC,IAAAG,WAAA,GAA0B,IAAA1B,eAAQ,EAAC,CAAC,CAAC;IAAA2B,WAAA,OAAAzB,eAAA,CAAAC,OAAA,EAAAuB,WAAA;IAA9BE,KAAK,GAAAD,WAAA;IAAEE,QAAQ,GAAAF,WAAA;EACtB,IAAAG,WAAA,GAAsC,IAAA9B,eAAQ,EAAC,EAAE,CAAC;IAAA+B,WAAA,OAAA7B,eAAA,CAAAC,OAAA,EAAA2B,WAAA;IAA3CE,WAAW,GAAAD,WAAA;IAAEE,cAAc,GAAAF,WAAA;EAClC,IAAAG,WAAA,GAA8C,IAAAlC,eAAQ,EAAC,EAAE,CAAC;IAAAmC,WAAA,OAAAjC,eAAA,CAAAC,OAAA,EAAA+B,WAAA;IAAnDE,eAAe,GAAAD,WAAA;IAAEE,kBAAkB,GAAAF,WAAA;EAC1C,IAAAG,WAAA,GAA4C,IAAAtC,eAAQ,EAAC,CAAC,CAAC,CAAC;IAAAuC,WAAA,OAAArC,eAAA,CAAAC,OAAA,EAAAmC,WAAA;IAAjDE,cAAc,GAAAD,WAAA;IAAEE,iBAAiB,GAAAF,WAAA;EACxC,IAAAG,WAAA,GAAwC,IAAA1C,eAAQ,EAAC;MAAE2C,SAAS,EAAE;IAAE,CAAC,CAAC;IAAAC,WAAA,OAAA1C,eAAA,CAAAC,OAAA,EAAAuC,WAAA;IAA3DG,YAAY,GAAAD,WAAA;IAAEE,eAAe,GAAAF,WAAA;EACpC,IAAAG,WAAA,GAA4B,IAAA/C,eAAQ,EAAC,KAAK,CAAC;IAAAgD,WAAA,OAAA9C,eAAA,CAAAC,OAAA,EAAA4C,WAAA;IAApCE,MAAM,GAAAD,WAAA;IAAEE,SAAS,GAAAF,WAAA;EAGxB,IAAMG,aAAa,GAAG,IAAAC,aAAM,EAAC,KAAK,CAAC;EAGnC,IAAAC,iBAAA,GAAiC,IAAAC,0BAAgB,EAAC,CAAC;IAA3CC,QAAQ,GAAAF,iBAAA,CAARE,QAAQ;IAAEC,UAAU,GAAAH,iBAAA,CAAVG,UAAU;EAG5B,IAAMC,KAAK,GAAG,CAAA/D,aAAa,oBAAbA,aAAa,CAAE+D,KAAK,KAAI,EAAE;EACxC,IAAMC,WAAW,GAAGD,KAAK,CAACrD,gBAAgB,CAAC,IAAI,IAAI;EACnD,IAAMuD,UAAU,GAAGF,KAAK,CAAC7D,MAAM;EAG/B,IAAMgE,WAAW,GAAG,cAAc9D,KAAK,EAAE;EACzC,IAAM+D,aAAa,GAAG,wBAAwB/D,KAAK,EAAE;EACrD,IAAMgE,UAAU,GAAG,qBAAqBhE,KAAK,EAAE;EAG/C,IAAAiE,gBAAS,EAAC,YAAM;IACd,IAAMC,QAAQ;MAAA,IAAAC,IAAA,OAAAC,kBAAA,CAAA/D,OAAA,EAAG,aAAY;QAC3B,IAAI;UAEF,IAAMgE,aAAa,SAASC,qBAAY,CAACC,OAAO,CAACT,WAAW,CAAC;UAC7D,IAAIO,aAAa,EAAE;YACjB,IAAAG,WAAA,GAAsBC,IAAI,CAACC,KAAK,CAACL,aAAa,CAAC;cAAvCxB,SAAS,GAAA2B,WAAA,CAAT3B,SAAS;YACjBG,eAAe,CAAC;cAAEH,SAAS,EAATA;YAAU,CAAC,CAAC;UAChC;UAGA,IAAM8B,cAAc,SAASL,qBAAY,CAACC,OAAO,CAACR,aAAa,CAAC;UAChE,IAAIY,cAAc,EAAE;YAClBhC,iBAAiB,CAAC8B,IAAI,CAACC,KAAK,CAACC,cAAc,CAAC,CAAC;UAC/C;UAGA,IAAIhB,KAAK,CAAC7D,MAAM,GAAG,CAAC,EAAE;YACpBqC,cAAc,CAACyC,KAAK,CAACjB,KAAK,CAAC7D,MAAM,CAAC,CAAC+E,IAAI,CAAC;cACtC/C,KAAK,EAAE,CAAC;cACRgD,QAAQ,EAAE,CAAC;cACXC,SAAS,EAAE;YACb,CAAC,CAAC,CAAC;UACL;QACF,CAAC,CAAC,OAAOC,KAAK,EAAE,CAEhB,CAAC,SAAS;UACR5B,SAAS,CAAC,IAAI,CAAC;QACjB;MACF,CAAC;MAAA,gBA5BKc,QAAQA,CAAA;QAAA,OAAAC,IAAA,CAAAc,KAAA,OAAApF,SAAA;MAAA;IAAA,GA4Bb;IACDqE,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,CAAClE,KAAK,EAAE2D,KAAK,CAAC7D,MAAM,CAAC,CAAC;EAGzB,IAAMoF,QAAQ,GAAG,IAAAC,kBAAW,MAAAf,kBAAA,CAAA/D,OAAA,EAAC,aAAY;IACvC,IAAI;MAEF,IAAM+E,UAAU,GAAG;QACjBvC,SAAS,EAAEvC,gBAAgB;QAC3B+E,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;MACtB,CAAC;MACD,MAAMjB,qBAAY,CAACkB,OAAO,CAAC1B,WAAW,EAAEW,IAAI,CAACgB,SAAS,CAACL,UAAU,CAAC,CAAC;MAGnE,MAAMd,qBAAY,CAACkB,OAAO,CAACzB,aAAa,EAAEU,IAAI,CAACgB,SAAS,CAAC/C,cAAc,CAAC,CAAC;IAC3E,CAAC,CAAC,OAAOsC,KAAK,EAAE,CAEhB;EACF,CAAC,GAAE,CAAC1E,gBAAgB,EAAEoC,cAAc,EAAEoB,WAAW,EAAEC,aAAa,CAAC,CAAC;EAGlE,IAAAE,gBAAS,EAAC,YAAM;IACd,IAAId,MAAM,EAAE+B,QAAQ,CAAC,CAAC;EACxB,CAAC,EAAE,CAACA,QAAQ,EAAE/B,MAAM,CAAC,CAAC;EAGtB,IAAAc,gBAAS,EAAC,YAAM;IACd,IAAId,MAAM,IAAIQ,KAAK,CAAC7D,MAAM,GAAG,CAAC,IAAI,CAACuD,aAAa,CAACqC,OAAO,EAAE;MAExD,IAAI3C,YAAY,IAAIA,YAAY,CAACF,SAAS,GAAGc,KAAK,CAAC7D,MAAM,EAAE;QACzDS,mBAAmB,CAACwC,YAAY,CAACF,SAAS,CAAC;MAC7C;MAGA,IAAM8C,iBAAiB,GAAAC,MAAA,CAAAC,MAAA,KAAQnD,cAAc,CAAE;MAC/CiB,KAAK,CAACmC,OAAO,CAAC,UAACC,CAAC,EAAEC,KAAK,EAAK;QAC1B,IAAI,CAACL,iBAAiB,CAACK,KAAK,CAAC,EAAE;UAC7BL,iBAAiB,CAACK,KAAK,CAAC,GAAG;YAAEjB,SAAS,EAAE;UAAM,CAAC;QACjD;MACF,CAAC,CAAC;MACFpC,iBAAiB,CAACgD,iBAAiB,CAAC;MACpCtC,aAAa,CAACqC,OAAO,GAAG,IAAI;IAC9B;EACF,CAAC,EAAE,CAACvC,MAAM,EAAEQ,KAAK,EAAEZ,YAAY,EAAEL,cAAc,CAAC,CAAC;EAGjD,IAAMuD,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAIC,IAAI,EAAK;IACnC,IAAIC,gBAAgB,GAAG,EAAE;IAEzB,IAAID,IAAI,CAACE,IAAI,KAAK,UAAU,EAAE;MAC5B,IAAMC,QAAQ,GAAGH,IAAI,CAACI,KAAK,CAACC,OAAO,CAAC,UAACC,IAAI;QAAA,OAAK,CAACA,IAAI,CAACC,IAAI,EAAED,IAAI,CAACE,KAAK,CAAC;MAAA,EAAC;MACtEP,gBAAgB,GAAGE,QAAQ,CAACM,IAAI,CAAC;QAAA,OAAMC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;MAAA,EAAC;IAC7D,CAAC,MAAM,IAAIX,IAAI,CAACE,IAAI,KAAK,gBAAgB,EAAE;MACzCD,gBAAgB,GAAG,IAAAW,mBAAA,CAAAzG,OAAA,EAAI6F,IAAI,CAACa,KAAK,EAAEJ,IAAI,CAAC;QAAA,OAAMC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;MAAA,EAAC;IACpE;IAEAtE,kBAAkB,CAAC4D,gBAAgB,CAAC;EACtC,CAAC;EAGD,IAAAlC,gBAAS,EAAC,YAAM;IACd,IAAIL,WAAW,EAAE;MAEfjD,gBAAgB,CAAC,EAAE,CAAC;MACpBI,eAAe,CAAC,EAAE,CAAC;MACnBI,eAAe,CAAC,KAAK,CAAC;MACtBI,YAAY,CAAC,KAAK,CAAC;MAGnB0E,kBAAkB,CAACrC,WAAW,CAAC;IACjC;EACF,CAAC,EAAE,CAACtD,gBAAgB,EAAEsD,WAAW,CAAC,CAAC;EAMnC,IAAMoD,UAAU,GAAG,IAAA7B,kBAAW,EAAC,YAAM;IACnC,IAAI7E,gBAAgB,GAAGqD,KAAK,CAAC7D,MAAM,GAAG,CAAC,EAAE;MACvCS,mBAAmB,CAAC,UAAA0G,IAAI;QAAA,OAAIA,IAAI,GAAG,CAAC;MAAA,EAAC;MACrC9F,eAAe,CAAC,KAAK,CAAC;MACtBI,YAAY,CAAC,KAAK,CAAC;MACnB,OAAO;QAAEwD,SAAS,EAAE;MAAM,CAAC;IAC7B,CAAC,MAAM;MACLpD,cAAc,CAAC,IAAI,CAAC;MACpB,OAAO;QAAEoD,SAAS,EAAE;MAAK,CAAC;IAC5B;EACF,CAAC,EAAE,CAACzE,gBAAgB,EAAEqD,KAAK,CAAC7D,MAAM,CAAC,CAAC;EAEpC,IAAMoH,cAAc,GAAG,IAAA/B,kBAAW,EAAC,YAAM;IACvC,IAAI7E,gBAAgB,GAAG,CAAC,EAAE;MACxBC,mBAAmB,CAAC,UAAA0G,IAAI;QAAA,OAAIA,IAAI,GAAG,CAAC;MAAA,EAAC;MACrC9F,eAAe,CAAC,KAAK,CAAC;MACtBI,YAAY,CAAC,KAAK,CAAC;MACnB,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd,CAAC,EAAE,CAACjB,gBAAgB,CAAC,CAAC;EAEtB,IAAM6G,UAAU,GAAG,IAAAhC,kBAAW,MAAAf,kBAAA,CAAA/D,OAAA,EAAC,aAAY;IACzC,IAAI;MACF,MAAMiE,qBAAY,CAAC8C,WAAW,CAAC,CAACtD,WAAW,EAAEC,aAAa,EAAEC,UAAU,CAAC,CAAC;MAExEzD,mBAAmB,CAAC,CAAC,CAAC;MACtBI,gBAAgB,CAAC,EAAE,CAAC;MACpBI,eAAe,CAAC,EAAE,CAAC;MACnBI,eAAe,CAAC,KAAK,CAAC;MACtBI,YAAY,CAAC,KAAK,CAAC;MACnBI,cAAc,CAAC,KAAK,CAAC;MACrBI,QAAQ,CAAC,CAAC,CAAC;MACXY,iBAAiB,CAAC,CAAC,CAAC,CAAC;MACrBK,eAAe,CAAC;QAAEH,SAAS,EAAE;MAAE,CAAC,CAAC;MAEjC,IAAIc,KAAK,CAAC7D,MAAM,GAAG,CAAC,EAAE;QACpBqC,cAAc,CAACyC,KAAK,CAACjB,KAAK,CAAC7D,MAAM,CAAC,CAAC+E,IAAI,CAAC;UACtC/C,KAAK,EAAE,CAAC;UACRgD,QAAQ,EAAE,CAAC;UACXC,SAAS,EAAE;QACb,CAAC,CAAC,CAAC;QACHkB,kBAAkB,CAACtC,KAAK,CAAC,CAAC,CAAC,CAAC;MAC9B;IACF,CAAC,CAAC,OAAOqB,KAAK,EAAE,CAEhB;EACF,CAAC,GAAE,CAAClB,WAAW,EAAEC,aAAa,EAAEC,UAAU,EAAEL,KAAK,CAAC,CAAC;EAInD,IAAM0D,QAAQ,GAAG,IAAAlC,kBAAW,EAAC,YAAM;IACjC,IAAMmC,mBAAmB,GAAG1B,MAAM,CAAC2B,MAAM,CAAC7E,cAAc,CAAC,CAAC8E,MAAM,CAC9D,UAAAtB,IAAI;MAAA,OAAIA,IAAI,CAACnB,SAAS;IAAA,CACxB,CAAC,CAACjF,MAAM;IAER,IAAM2H,aAAa,GAAGvF,WAAW,CAACwF,MAAM,CAAC,UAACC,GAAG,EAAEC,MAAM;MAAA,OAAKD,GAAG,GAAGC,MAAM,CAAC9C,QAAQ;IAAA,GAAE,CAAC,CAAC;IACnF,IAAM+C,aAAa,GAAGhE,UAAU,GAAG,CAAC,GAAG+C,IAAI,CAACkB,KAAK,CAAER,mBAAmB,GAAGzD,UAAU,GAAI,GAAG,CAAC,GAAG,CAAC;IAC/F,IAAMkE,eAAe,GAAGlE,UAAU,GAAG,CAAC,GAAI,CAACvD,gBAAgB,GAAG,CAAC,IAAIuD,UAAU,GAAI,GAAG,GAAG,CAAC;IAExF,OAAO;MACLA,UAAU,EAAVA,UAAU;MACVyD,mBAAmB,EAAnBA,mBAAmB;MACnBO,aAAa,EAAbA,aAAa;MACbE,eAAe,EAAfA,eAAe;MACfjG,KAAK,EAALA,KAAK;MACL2F,aAAa,EAAbA,aAAa;MACbO,UAAU,EAAEP,aAAa,GAAG,CAAC,GAAGb,IAAI,CAACkB,KAAK,CAAEhG,KAAK,GAAG2F,aAAa,GAAI,GAAG,CAAC,GAAG;IAC9E,CAAC;EACH,CAAC,EAAE,CAAC5D,UAAU,EAAEnB,cAAc,EAAER,WAAW,EAAE5B,gBAAgB,EAAEwB,KAAK,CAAC,CAAC;EAItE,IAAMmG,cAAc,GAAG,IAAA9C,kBAAW,EAAC,YAAM;IACvC,IAAM+C,WAAW,GAAG,GAAG5H,gBAAgB,GAAG,CAAC,MAAMuD,UAAU,EAAE;IAC7D,IAAMsE,SAAS,GAAG,CAAAvE,WAAW,oBAAXA,WAAW,CAAEwE,KAAK,KAAI,QAAQ9H,gBAAgB,GAAG,CAAC,EAAE;IAEtE,OAAO;MACL4H,WAAW,EAAXA,WAAW;MACXC,SAAS,EAATA,SAAS;MACTvE,WAAW,EAAXA,WAAW;MACXtD,gBAAgB,EAAEA,gBAAgB,GAAG;IACvC,CAAC;EACH,CAAC,EAAE,CAACA,gBAAgB,EAAEuD,UAAU,EAAED,WAAW,CAAC,CAAC;EAI/C,IAAMyE,eAAe,GAAG/H,gBAAgB,GAAG,CAAC;EAC5C,IAAMgI,UAAU,GAAGhI,gBAAgB,KAAKuD,UAAU,GAAG,CAAC;EAEtD,OAAO;IAELvD,gBAAgB,EAAhBA,gBAAgB;IAChBI,aAAa,EAAbA,aAAa;IACbI,YAAY,EAAZA,YAAY;IACZI,YAAY,EAAZA,YAAY;IACZI,SAAS,EAATA,SAAS;IACTI,WAAW,EAAXA,WAAW;IACXI,KAAK,EAALA,KAAK;IACLI,WAAW,EAAXA,WAAW;IACXI,eAAe,EAAfA,eAAe;IACfI,cAAc,EAAdA,cAAc;IACdS,MAAM,EAANA,MAAM;IAGNQ,KAAK,EAALA,KAAK;IACLC,WAAW,EAAXA,WAAW;IACXC,UAAU,EAAVA,UAAU;IAGVJ,QAAQ,EAARA,QAAQ;IACRC,UAAU,EAAVA,UAAU;IAGVsD,UAAU,EAAVA,UAAU;IACVE,cAAc,EAAdA,cAAc;IACdC,UAAU,EAAVA,UAAU;IACV5G,mBAAmB,EAAnBA,mBAAmB;IAGnB8H,eAAe,EAAfA,eAAe;IACfC,UAAU,EAAVA,UAAU;IACVC,KAAK,EAAElB,QAAQ,CAAC,CAAC;IACjBmB,OAAO,EAAEP,cAAc,CAAC;EAC1B,CAAC;AACH,CAAC;AAAC,IAAAQ,QAAA,GAAAC,OAAA,CAAArI,OAAA,GAEaV,YAAY","ignoreList":[]}