ee54c718baedb2a346e09dfb4361abb4
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IS_ENV_WITH_LOCAL_ASSETS = void 0;
exports.getLocalAssets = getLocalAssets;
exports.getManifest2 = getManifest2;
exports.manifestBaseUrl = void 0;
var _expoConstants = _interopRequireWildcard(require("expo-constants"));
var _expoModulesCore = require("expo-modules-core");
var _AssetUris = require("./AssetUris");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var ExpoUpdates = (0, _expoModulesCore.requireOptionalNativeModule)('ExpoUpdates');
var isRunningInExpoGo = _expoConstants.default.appOwnership === _expoConstants.AppOwnership.Expo;
var expoUpdatesIsInstalledAndEnabled = !!(ExpoUpdates != null && ExpoUpdates.isEnabled);
var expoUpdatesIsUsingEmbeddedAssets = ExpoUpdates == null ? void 0 : ExpoUpdates.isUsingEmbeddedAssets;
var shouldUseUpdatesAssetResolution = expoUpdatesIsInstalledAndEnabled && !expoUpdatesIsUsingEmbeddedAssets;
var IS_ENV_WITH_LOCAL_ASSETS = exports.IS_ENV_WITH_LOCAL_ASSETS = isRunningInExpoGo || shouldUseUpdatesAssetResolution;
function getLocalAssets() {
  var _ExpoUpdates$localAss;
  return (_ExpoUpdates$localAss = ExpoUpdates == null ? void 0 : ExpoUpdates.localAssets) != null ? _ExpoUpdates$localAss : {};
}
function getManifest2() {
  return _expoConstants.default.__unsafeNoWarnManifest2;
}
var manifestBaseUrl = exports.manifestBaseUrl = _expoConstants.default.experienceUrl ? (0, _AssetUris.getManifestBaseUrl)(_expoConstants.default.experienceUrl) : null;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwb0NvbnN0YW50cyIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9leHBvTW9kdWxlc0NvcmUiLCJfQXNzZXRVcmlzIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsIl90IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJFeHBvVXBkYXRlcyIsInJlcXVpcmVPcHRpb25hbE5hdGl2ZU1vZHVsZSIsImlzUnVubmluZ0luRXhwb0dvIiwiQ29uc3RhbnRzIiwiYXBwT3duZXJzaGlwIiwiQXBwT3duZXJzaGlwIiwiRXhwbyIsImV4cG9VcGRhdGVzSXNJbnN0YWxsZWRBbmRFbmFibGVkIiwiaXNFbmFibGVkIiwiZXhwb1VwZGF0ZXNJc1VzaW5nRW1iZWRkZWRBc3NldHMiLCJpc1VzaW5nRW1iZWRkZWRBc3NldHMiLCJzaG91bGRVc2VVcGRhdGVzQXNzZXRSZXNvbHV0aW9uIiwiSVNfRU5WX1dJVEhfTE9DQUxfQVNTRVRTIiwiZXhwb3J0cyIsImdldExvY2FsQXNzZXRzIiwiX0V4cG9VcGRhdGVzJGxvY2FsQXNzIiwibG9jYWxBc3NldHMiLCJnZXRNYW5pZmVzdDIiLCJfX3Vuc2FmZU5vV2Fybk1hbmlmZXN0MiIsIm1hbmlmZXN0QmFzZVVybCIsImV4cGVyaWVuY2VVcmwiLCJnZXRNYW5pZmVzdEJhc2VVcmwiXSwic291cmNlcyI6WyIuLi9zcmMvUGxhdGZvcm1VdGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ29uc3RhbnRzLCB7IEFwcE93bmVyc2hpcCB9IGZyb20gJ2V4cG8tY29uc3RhbnRzJztcbmltcG9ydCB7IHJlcXVpcmVPcHRpb25hbE5hdGl2ZU1vZHVsZSB9IGZyb20gJ2V4cG8tbW9kdWxlcy1jb3JlJztcbi8vIEB0cy1pZ25vcmUgLS0gb3B0aW9uYWwgaW50ZXJmYWNlLCB3aWxsIGdyYWNlZnVsbHkgZGVncmFkZSB0byBgYW55YCBpZiBub3QgaW5zdGFsbGVkXG5pbXBvcnQgdHlwZSB7IEV4cG9VcGRhdGVzTW9kdWxlIH0gZnJvbSAnZXhwby11cGRhdGVzJztcblxuaW1wb3J0IHsgZ2V0TWFuaWZlc3RCYXNlVXJsIH0gZnJvbSAnLi9Bc3NldFVyaXMnO1xuXG5jb25zdCBFeHBvVXBkYXRlcyA9IHJlcXVpcmVPcHRpb25hbE5hdGl2ZU1vZHVsZTxFeHBvVXBkYXRlc01vZHVsZT4oJ0V4cG9VcGRhdGVzJyk7XG5cbmNvbnN0IGlzUnVubmluZ0luRXhwb0dvID0gQ29uc3RhbnRzLmFwcE93bmVyc2hpcCA9PT0gQXBwT3duZXJzaGlwLkV4cG87XG5cbi8vIGV4cG8tdXBkYXRlcyAoYW5kIEV4cG8gR28gZXhwby11cGRhdGVzIG92ZXJyaWRlKSBtYW5hZ2VzIGFzc2V0cyBmcm9tIHVwZGF0ZXMgYW5kIGV4cG9zZXNcbi8vIHRoZSBFeHBvVXBkYXRlcy5sb2NhbEFzc2V0cyBjb25zdGFudCBjb250YWluaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSBhc3NldHMuXG5jb25zdCBleHBvVXBkYXRlc0lzSW5zdGFsbGVkQW5kRW5hYmxlZCA9ICEhRXhwb1VwZGF0ZXM/LmlzRW5hYmxlZDtcbmNvbnN0IGV4cG9VcGRhdGVzSXNVc2luZ0VtYmVkZGVkQXNzZXRzID0gRXhwb1VwZGF0ZXM/LmlzVXNpbmdFbWJlZGRlZEFzc2V0cztcblxuLy8gaWYgZXhwby11cGRhdGVzIGlzIGluc3RhbGxlZCBidXQgd2UncmUgcnVubmluZyBkaXJlY3RseSBmcm9tIHRoZSBlbWJlZGRlZCBidW5kbGUsIHdlIGRvbid0IHdhbnRcbi8vIHRvIG92ZXJyaWRlIHRoZSBBc3NldFNvdXJjZVJlc29sdmVyLlxuY29uc3Qgc2hvdWxkVXNlVXBkYXRlc0Fzc2V0UmVzb2x1dGlvbiA9XG4gIGV4cG9VcGRhdGVzSXNJbnN0YWxsZWRBbmRFbmFibGVkICYmICFleHBvVXBkYXRlc0lzVXNpbmdFbWJlZGRlZEFzc2V0cztcblxuLy8gRXhwbyBHbyBhbHdheXMgdXNlcyB0aGUgdXBkYXRlcyBtb2R1bGUgZm9yIGFzc2V0IHJlc29sdXRpb24gKGxvY2FsIGFzc2V0cykgc2luY2UgaXRcbi8vIG92ZXJyaWRlcyB0aGUgZXhwby11cGRhdGVzIG1vZHVsZS5cbmV4cG9ydCBjb25zdCBJU19FTlZfV0lUSF9MT0NBTF9BU1NFVFMgPSBpc1J1bm5pbmdJbkV4cG9HbyB8fCBzaG91bGRVc2VVcGRhdGVzQXNzZXRSZXNvbHV0aW9uO1xuXG4vLyBHZXQgdGhlIGxvY2FsQXNzZXRzIHByb3BlcnR5IGZyb20gdGhlIEV4cG9VcGRhdGVzIG5hdGl2ZSBtb2R1bGUgc28gdGhhdCB3ZSBkb1xuLy8gbm90IG5lZWQgdG8gaW5jbHVkZSBleHBvLXVwZGF0ZXMgYXMgYSBkZXBlbmRlbmN5IG9mIGV4cG8tYXNzZXRcbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2NhbEFzc2V0cygpOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHtcbiAgcmV0dXJuIEV4cG9VcGRhdGVzPy5sb2NhbEFzc2V0cyA/PyB7fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1hbmlmZXN0MigpOiB0eXBlb2YgQ29uc3RhbnRzLl9fdW5zYWZlTm9XYXJuTWFuaWZlc3QyIHtcbiAgcmV0dXJuIENvbnN0YW50cy5fX3Vuc2FmZU5vV2Fybk1hbmlmZXN0Mjtcbn1cblxuLy8gQ29tcHV0ZSBtYW5pZmVzdCBiYXNlIFVSTCBpZiBhdmFpbGFibGVcbmV4cG9ydCBjb25zdCBtYW5pZmVzdEJhc2VVcmwgPSBDb25zdGFudHMuZXhwZXJpZW5jZVVybFxuICA/IGdldE1hbmlmZXN0QmFzZVVybChDb25zdGFudHMuZXhwZXJpZW5jZVVybClcbiAgOiBudWxsO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQUEsY0FBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsZ0JBQUEsR0FBQUQsT0FBQTtBQUlBLElBQUFFLFVBQUEsR0FBQUYsT0FBQTtBQUFpRCxTQUFBRCx3QkFBQUksQ0FBQSxFQUFBQyxDQUFBLDZCQUFBQyxPQUFBLE1BQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQU4sdUJBQUEsWUFBQUEsd0JBQUFJLENBQUEsRUFBQUMsQ0FBQSxTQUFBQSxDQUFBLElBQUFELENBQUEsSUFBQUEsQ0FBQSxDQUFBSyxVQUFBLFNBQUFMLENBQUEsTUFBQU0sQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsS0FBQUMsU0FBQSxRQUFBQyxPQUFBLEVBQUFWLENBQUEsaUJBQUFBLENBQUEsdUJBQUFBLENBQUEseUJBQUFBLENBQUEsU0FBQVEsQ0FBQSxNQUFBRixDQUFBLEdBQUFMLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLFFBQUFHLENBQUEsQ0FBQUssR0FBQSxDQUFBWCxDQUFBLFVBQUFNLENBQUEsQ0FBQU0sR0FBQSxDQUFBWixDQUFBLEdBQUFNLENBQUEsQ0FBQU8sR0FBQSxDQUFBYixDQUFBLEVBQUFRLENBQUEsY0FBQU0sRUFBQSxJQUFBZCxDQUFBLGdCQUFBYyxFQUFBLE9BQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBaEIsQ0FBQSxFQUFBYyxFQUFBLE9BQUFQLENBQUEsSUFBQUQsQ0FBQSxHQUFBVyxNQUFBLENBQUFDLGNBQUEsS0FBQUQsTUFBQSxDQUFBRSx3QkFBQSxDQUFBbkIsQ0FBQSxFQUFBYyxFQUFBLE9BQUFQLENBQUEsQ0FBQUssR0FBQSxJQUFBTCxDQUFBLENBQUFNLEdBQUEsSUFBQVAsQ0FBQSxDQUFBRSxDQUFBLEVBQUFNLEVBQUEsRUFBQVAsQ0FBQSxJQUFBQyxDQUFBLENBQUFNLEVBQUEsSUFBQWQsQ0FBQSxDQUFBYyxFQUFBLFdBQUFOLENBQUEsS0FBQVIsQ0FBQSxFQUFBQyxDQUFBO0FBRWpELElBQU1tQixXQUFXLEdBQUcsSUFBQUMsNENBQTJCLEVBQW9CLGFBQWEsQ0FBQztBQUVqRixJQUFNQyxpQkFBaUIsR0FBR0Msc0JBQVMsQ0FBQ0MsWUFBWSxLQUFLQywyQkFBWSxDQUFDQyxJQUFJO0FBSXRFLElBQU1DLGdDQUFnQyxHQUFHLENBQUMsRUFBQ1AsV0FBVyxZQUFYQSxXQUFXLENBQUVRLFNBQVM7QUFDakUsSUFBTUMsZ0NBQWdDLEdBQUdULFdBQVcsb0JBQVhBLFdBQVcsQ0FBRVUscUJBQXFCO0FBSTNFLElBQU1DLCtCQUErQixHQUNuQ0osZ0NBQWdDLElBQUksQ0FBQ0UsZ0NBQWdDO0FBSWhFLElBQU1HLHdCQUF3QixHQUFBQyxPQUFBLENBQUFELHdCQUFBLEdBQUdWLGlCQUFpQixJQUFJUywrQkFBK0I7QUFJdEYsU0FBVUcsY0FBY0EsQ0FBQTtFQUFBLElBQUFDLHFCQUFBO0VBQzVCLFFBQUFBLHFCQUFBLEdBQU9mLFdBQVcsb0JBQVhBLFdBQVcsQ0FBRWdCLFdBQVcsWUFBQUQscUJBQUEsR0FBSSxFQUFFO0FBQ3ZDO0FBRU0sU0FBVUUsWUFBWUEsQ0FBQTtFQUMxQixPQUFPZCxzQkFBUyxDQUFDZSx1QkFBdUI7QUFDMUM7QUFHTyxJQUFNQyxlQUFlLEdBQUFOLE9BQUEsQ0FBQU0sZUFBQSxHQUFHaEIsc0JBQVMsQ0FBQ2lCLGFBQWEsR0FDbEQsSUFBQUMsNkJBQWtCLEVBQUNsQixzQkFBUyxDQUFDaUIsYUFBYSxDQUFDLEdBQzNDLElBQUkiLCJpZ25vcmVMaXN0IjpbXX0=