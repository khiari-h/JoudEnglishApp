{"version":3,"names":["_getJestObj","mock","useFocusEffect","jest","fn","callback","router","push","Stack","_ref","children","_jsxRuntime","jsx","Fragment","useLocalSearchParams","useNavigation","navigate","goBack","canGoBack","addListener","isFocused","useDashboardState","showLevelProgress","setShowLevelProgress","openLevelProgressModal","closeLevelProgressModal","refreshing","activeTab","setActiveTab","onRefresh","mockResolvedValue","lastActivity","isLoading","reload","getLevelProgress","refresh","Object","assign","requireActual","useProgress","progress","overall","levels","updateProgress","mockUpdateProgress","getProgressForLevel","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_reactNative2","_ProgressContext","_require","FakeExerciseScreen","_useProgress","handleComplete","TouchableOpacity","testID","onPress","Text","describe","beforeEach","clearAllMocks","it","default","_render","render","ProgressProvider","getByTestId","fireEvent","press","waitFor","expect","toHaveBeenCalledWith","toHaveBeenCalledTimes"],"sources":["progress-update.test.js"],"sourcesContent":["// __tests__/integration/progress-update.test.js\nimport React from 'react';\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\nimport { TouchableOpacity, Text } from 'react-native';\nimport { ProgressProvider, useProgress } from '../../src/contexts/ProgressContext';\n\n// Mock de expo-router\njest.mock('expo-router', () => ({\n  useFocusEffect: jest.fn(callback => callback()),\n  router: {\n    push: jest.fn(),\n  },\n  Stack: ({ children }) => <>{children}</>,\n  useLocalSearchParams: () => ({}),\n  useNavigation: () => ({\n    navigate: jest.fn(),\n    goBack: jest.fn(),\n    canGoBack: jest.fn(() => true),\n    addListener: jest.fn(),\n    isFocused: jest.fn(() => true),\n  }),\n}));\n\n// Mocks des hooks et composants\njest.mock('../../src/screens/Dashboard/hooks/useDashboardState', () => ({\n  useDashboardState: jest.fn(() => ({\n    showLevelProgress: false,\n    setShowLevelProgress: jest.fn(),\n    openLevelProgressModal: jest.fn(),\n    closeLevelProgressModal: jest.fn(),\n    refreshing: false,\n    activeTab: \"home\",\n    setActiveTab: jest.fn(),\n    onRefresh: jest.fn().mockResolvedValue(),\n  })),\n}));\n\njest.mock('../../src/hooks/useLastActivity', () => () => ({\n  lastActivity: null,\n  isLoading: false,\n  reload: jest.fn(),\n}));\n\njest.mock('../../src/hooks/useRealTimeProgress', () => () => ({\n  getLevelProgress: jest.fn(() => 0),\n  refresh: jest.fn(),\n}));\n\nconst mockUpdateProgress = jest.fn();\n\njest.mock('../../src/contexts/ProgressContext', () => ({\n  ...jest.requireActual('../../src/contexts/ProgressContext'),\n  useProgress: () => ({\n    progress: { overall: 0, levels: {} },\n    isLoading: false,\n    updateProgress: mockUpdateProgress,\n    getProgressForLevel: () => 0,\n  }),\n}));\n\n// Composant de test pour simuler un exercice qui utilise le contexte de progression\nconst FakeExerciseScreen = () => {\n  const { updateProgress } = useProgress();\n\n  const handleComplete = () => {\n    updateProgress('A1', 'vocabulary', 80);\n  };\n\n  return (\n    <TouchableOpacity testID=\"complete-exercise\" onPress={handleComplete}>\n      <Text>Terminer l'exercice</Text>\n    </TouchableOpacity>\n  );\n};\n\ndescribe('Scénario 1: Mise à jour de la progression', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it(\"devrait appeler updateProgress avec les bonnes données après la fin d'un exercice\", async () => {\n    // NOTE: Ce test vérifie que le `ProgressContext` est correctement utilisé par un écran d'exercice (simulé)\n    // pour mettre à jour la progression.\n\n    const { getByTestId } = render(\n      <ProgressProvider>\n        <FakeExerciseScreen />\n      </ProgressProvider>\n    );\n\n    // Simuler la fin de l'exercice\n    fireEvent.press(getByTestId('complete-exercise'));\n\n    // Vérifier que la mise à jour de la progression a été appelée via le contexte\n    await waitFor(() => {\n      expect(mockUpdateProgress).toHaveBeenCalledWith('A1', 'vocabulary', 80);\n      expect(mockUpdateProgress).toHaveBeenCalledTimes(1);\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}