f0d983db49efe4f0dd3d8504e4afe690
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useVocabularyStorage;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = require("react");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
function useVocabularyStorage(_ref) {
  var STORAGE_KEY = _ref.STORAGE_KEY,
    progressKey = _ref.progressKey,
    loaded = _ref.loaded,
    setLoaded = _ref.setLoaded,
    completedWords = _ref.completedWords,
    setCompletedWords = _ref.setCompletedWords,
    setCategoryIndex = _ref.setCategoryIndex,
    setWordIndex = _ref.setWordIndex,
    exercises = _ref.exercises,
    isInitialized = _ref.isInitialized;
  (0, _react.useEffect)(function () {
    var loadData = function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* () {
        try {
          var saved = yield _asyncStorage.default.getItem(STORAGE_KEY);
          if (saved) {
            var _JSON$parse = JSON.parse(saved),
              savedCompleted = _JSON$parse.completedWords,
              lastPosition = _JSON$parse.lastPosition;
            setCompletedWords(savedCompleted || {});
            if (lastPosition) {
              setCategoryIndex(lastPosition.categoryIndex || 0);
              setWordIndex(lastPosition.wordIndex || 0);
            }
          }
        } catch (error) {} finally {
          setLoaded(true);
        }
      });
      return function loadData() {
        return _ref2.apply(this, arguments);
      };
    }();
    loadData();
  }, [progressKey, STORAGE_KEY, setCompletedWords, setCategoryIndex, setWordIndex, setLoaded]);
  var saveData = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      var dataToSave = {
        completedWords: completedWords,
        lastPosition: {
          categoryIndex: 0,
          wordIndex: 0
        }
      };
      yield _asyncStorage.default.setItem(STORAGE_KEY, JSON.stringify(dataToSave));
    } catch (error) {}
  }), [completedWords, STORAGE_KEY]);
  (0, _react.useEffect)(function () {
    if (loaded) saveData();
  }, [saveData, loaded]);
  (0, _react.useEffect)(function () {
    if (loaded && exercises && !isInitialized.current) {
      var newCompletedWords = Object.assign({}, completedWords);
      exercises.forEach(function (_, index) {
        if (!newCompletedWords[index]) newCompletedWords[index] = [];
      });
      setCompletedWords(newCompletedWords);
      isInitialized.current = true;
    }
  }, [loaded, exercises, completedWords, setCompletedWords, isInitialized]);
  return {
    saveData: saveData
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX2FzeW5jU3RvcmFnZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJ1c2VWb2NhYnVsYXJ5U3RvcmFnZSIsIl9yZWYiLCJTVE9SQUdFX0tFWSIsInByb2dyZXNzS2V5IiwibG9hZGVkIiwic2V0TG9hZGVkIiwiY29tcGxldGVkV29yZHMiLCJzZXRDb21wbGV0ZWRXb3JkcyIsInNldENhdGVnb3J5SW5kZXgiLCJzZXRXb3JkSW5kZXgiLCJleGVyY2lzZXMiLCJpc0luaXRpYWxpemVkIiwidXNlRWZmZWN0IiwibG9hZERhdGEiLCJfcmVmMiIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImRlZmF1bHQiLCJzYXZlZCIsIkFzeW5jU3RvcmFnZSIsImdldEl0ZW0iLCJfSlNPTiRwYXJzZSIsIkpTT04iLCJwYXJzZSIsInNhdmVkQ29tcGxldGVkIiwibGFzdFBvc2l0aW9uIiwiY2F0ZWdvcnlJbmRleCIsIndvcmRJbmRleCIsImVycm9yIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJzYXZlRGF0YSIsInVzZUNhbGxiYWNrIiwiZGF0YVRvU2F2ZSIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJjdXJyZW50IiwibmV3Q29tcGxldGVkV29yZHMiLCJPYmplY3QiLCJhc3NpZ24iLCJmb3JFYWNoIiwiXyIsImluZGV4Il0sInNvdXJjZXMiOlsidXNlVm9jYWJ1bGFyeVN0b3JhZ2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3NjcmVlbnMvZXhlcmNpc2VzL3ZvY2FidWxhcnkvaG9va3MvaW50ZXJuYWwvdXNlVm9jYWJ1bGFyeVN0b3JhZ2UuanNcclxuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IEFzeW5jU3RvcmFnZSBmcm9tICdAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VWb2NhYnVsYXJ5U3RvcmFnZSh7XHJcbiAgU1RPUkFHRV9LRVksXHJcbiAgcHJvZ3Jlc3NLZXksXHJcbiAgbG9hZGVkLFxyXG4gIHNldExvYWRlZCxcclxuICBjb21wbGV0ZWRXb3JkcyxcclxuICBzZXRDb21wbGV0ZWRXb3JkcyxcclxuICBzZXRDYXRlZ29yeUluZGV4LFxyXG4gIHNldFdvcmRJbmRleCxcclxuICBleGVyY2lzZXMsXHJcbiAgaXNJbml0aWFsaXplZCxcclxufSkge1xyXG4gIC8vIExvYWQgZGF0YSBmcm9tIHN0b3JhZ2VcclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgY29uc3QgbG9hZERhdGEgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3Qgc2F2ZWQgPSBhd2FpdCBBc3luY1N0b3JhZ2UuZ2V0SXRlbShTVE9SQUdFX0tFWSk7XHJcbiAgICAgICAgaWYgKHNhdmVkKSB7XHJcbiAgICAgICAgICBjb25zdCB7IGNvbXBsZXRlZFdvcmRzOiBzYXZlZENvbXBsZXRlZCwgbGFzdFBvc2l0aW9uIH0gPSBKU09OLnBhcnNlKHNhdmVkKTtcclxuICAgICAgICAgIHNldENvbXBsZXRlZFdvcmRzKHNhdmVkQ29tcGxldGVkIHx8IHt9KTtcclxuICAgICAgICAgIGlmIChsYXN0UG9zaXRpb24pIHtcclxuICAgICAgICAgICAgc2V0Q2F0ZWdvcnlJbmRleChsYXN0UG9zaXRpb24uY2F0ZWdvcnlJbmRleCB8fCAwKTtcclxuICAgICAgICAgICAgc2V0V29yZEluZGV4KGxhc3RQb3NpdGlvbi53b3JkSW5kZXggfHwgMCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIC8vIFNpbGVudGx5IGZhaWxcclxuICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICBzZXRMb2FkZWQodHJ1ZSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICBsb2FkRGF0YSgpO1xyXG4gIH0sIFtwcm9ncmVzc0tleSwgU1RPUkFHRV9LRVksIHNldENvbXBsZXRlZFdvcmRzLCBzZXRDYXRlZ29yeUluZGV4LCBzZXRXb3JkSW5kZXgsIHNldExvYWRlZF0pO1xyXG5cclxuICAvLyBTYXZlIGRhdGEgdG8gc3RvcmFnZVxyXG4gIGNvbnN0IHNhdmVEYXRhID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgZGF0YVRvU2F2ZSA9IHtcclxuICAgICAgICBjb21wbGV0ZWRXb3JkcyxcclxuICAgICAgICBsYXN0UG9zaXRpb246IHsgY2F0ZWdvcnlJbmRleDogMCwgd29yZEluZGV4OiAwIH0sXHJcbiAgICAgIH07XHJcbiAgICAgIGF3YWl0IEFzeW5jU3RvcmFnZS5zZXRJdGVtKFNUT1JBR0VfS0VZLCBKU09OLnN0cmluZ2lmeShkYXRhVG9TYXZlKSk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAvLyBTaWxlbnRseSBmYWlsXHJcbiAgICB9XHJcbiAgfSwgW2NvbXBsZXRlZFdvcmRzLCBTVE9SQUdFX0tFWV0pO1xyXG5cclxuICAvLyBBdXRvLXNhdmUgd2hlbiBkYXRhIGNoYW5nZXNcclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgaWYgKGxvYWRlZCkgc2F2ZURhdGEoKTtcclxuICB9LCBbc2F2ZURhdGEsIGxvYWRlZF0pO1xyXG5cclxuICAvLyBJbml0aWFsaXplIHByb2dyZXNzIGZvciBuZXcgY2F0ZWdvcmllc1xyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAobG9hZGVkICYmIGV4ZXJjaXNlcyAmJiAhaXNJbml0aWFsaXplZC5jdXJyZW50KSB7XHJcbiAgICAgIGNvbnN0IG5ld0NvbXBsZXRlZFdvcmRzID0geyAuLi5jb21wbGV0ZWRXb3JkcyB9O1xyXG4gICAgICBleGVyY2lzZXMuZm9yRWFjaCgoXywgaW5kZXgpID0+IHtcclxuICAgICAgICBpZiAoIW5ld0NvbXBsZXRlZFdvcmRzW2luZGV4XSkgbmV3Q29tcGxldGVkV29yZHNbaW5kZXhdID0gW107XHJcbiAgICAgIH0pO1xyXG4gICAgICBzZXRDb21wbGV0ZWRXb3JkcyhuZXdDb21wbGV0ZWRXb3Jkcyk7XHJcbiAgICAgIGlzSW5pdGlhbGl6ZWQuY3VycmVudCA9IHRydWU7XHJcbiAgICB9XHJcbiAgfSwgW2xvYWRlZCwgZXhlcmNpc2VzLCBjb21wbGV0ZWRXb3Jkcywgc2V0Q29tcGxldGVkV29yZHMsIGlzSW5pdGlhbGl6ZWRdKTtcclxuXHJcbiAgcmV0dXJuIHsgc2F2ZURhdGEgfTtcclxufVxyXG5cclxuXHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsYUFBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBRWUsU0FBU0csb0JBQW9CQSxDQUFBQyxJQUFBLEVBV3pDO0VBQUEsSUFWREMsV0FBVyxHQUFBRCxJQUFBLENBQVhDLFdBQVc7SUFDWEMsV0FBVyxHQUFBRixJQUFBLENBQVhFLFdBQVc7SUFDWEMsTUFBTSxHQUFBSCxJQUFBLENBQU5HLE1BQU07SUFDTkMsU0FBUyxHQUFBSixJQUFBLENBQVRJLFNBQVM7SUFDVEMsY0FBYyxHQUFBTCxJQUFBLENBQWRLLGNBQWM7SUFDZEMsaUJBQWlCLEdBQUFOLElBQUEsQ0FBakJNLGlCQUFpQjtJQUNqQkMsZ0JBQWdCLEdBQUFQLElBQUEsQ0FBaEJPLGdCQUFnQjtJQUNoQkMsWUFBWSxHQUFBUixJQUFBLENBQVpRLFlBQVk7SUFDWkMsU0FBUyxHQUFBVCxJQUFBLENBQVRTLFNBQVM7SUFDVEMsYUFBYSxHQUFBVixJQUFBLENBQWJVLGFBQWE7RUFHYixJQUFBQyxnQkFBUyxFQUFDLFlBQU07SUFDZCxJQUFNQyxRQUFRO01BQUEsSUFBQUMsS0FBQSxPQUFBQyxrQkFBQSxDQUFBQyxPQUFBLEVBQUcsYUFBWTtRQUMzQixJQUFJO1VBQ0YsSUFBTUMsS0FBSyxTQUFTQyxxQkFBWSxDQUFDQyxPQUFPLENBQUNqQixXQUFXLENBQUM7VUFDckQsSUFBSWUsS0FBSyxFQUFFO1lBQ1Qs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