c107c9aefc19fd615e619d3eb3f3dd9a
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    setItem: jest.fn(function () {
      return Promise.resolve();
    }),
    getItem: jest.fn(function () {
      return Promise.resolve(null);
    }),
    removeItem: jest.fn(function () {
      return Promise.resolve();
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _ProgressContext = require("../../src/contexts/ProgressContext");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _constants = require("../../src/utils/constants");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var TestComponent = function TestComponent() {
  var _progress$exercises$v;
  var _useProgress = (0, _ProgressContext.useProgress)(),
    progress = _useProgress.progress,
    isLoading = _useProgress.isLoading,
    updateExerciseProgress = _useProgress.updateExerciseProgress,
    updateStats = _useProgress.updateStats,
    calculateGlobalProgress = _useProgress.calculateGlobalProgress,
    calculateLevelProgress = _useProgress.calculateLevelProgress,
    resetProgress = _useProgress.resetProgress;
  if (isLoading) {
    return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "loading-status",
      children: "Loading..."
    });
  }
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [(0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "global-progress",
      children: ["Global: ", calculateGlobalProgress(), "%"]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "level1-progress",
      children: ["Level 1: ", calculateLevelProgress('1'), "%"]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "level-bonus-progress",
      children: ["Level Bonus: ", calculateLevelProgress('bonus'), "%"]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "vocab-level1-completed",
      children: ["Vocab Level 1 Completed: ", ((_progress$exercises$v = progress.exercises.vocabulary) == null || (_progress$exercises$v = _progress$exercises$v['1']) == null ? void 0 : _progress$exercises$v.completed) || 0]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "streak",
      children: ["Streak: ", progress.stats.streak]
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Update Vocab Level 1",
      onPress: function onPress() {
        return updateExerciseProgress('vocabulary', '1', 50);
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Update Streak",
      onPress: function onPress() {
        return updateStats({
          streak: 5
        });
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Reset Progress",
      onPress: resetProgress
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Update Vocab Bonus",
      onPress: function onPress() {
        return updateExerciseProgress('vocabulary', 'bonus', 75);
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Update Grammar Bonus",
      onPress: function onPress() {
        return updateExerciseProgress('grammar', 'bonus', 50);
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Add New Exercise Type",
      onPress: function onPress() {
        return updateExerciseProgress('newType', '1', 25);
      }
    })]
  });
};
var ComponentWithoutUseProgress = function ComponentWithoutUseProgress() {
  (0, _ProgressContext.useProgress)();
  return null;
};
var ComponentWithoutUseProgressRead = function ComponentWithoutUseProgressRead() {
  (0, _ProgressContext.useProgressRead)();
  return null;
};
var ComponentWithoutUseProgressWrite = function ComponentWithoutUseProgressWrite() {
  (0, _ProgressContext.useProgressWrite)();
  return null;
};
var ComponentWithUseProgressRead = function ComponentWithUseProgressRead() {
  var _useProgressRead = (0, _ProgressContext.useProgressRead)(),
    progress = _useProgressRead.progress,
    calculateGlobalProgress = _useProgressRead.calculateGlobalProgress;
  return (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
    testID: "read-hook-test",
    children: ["Global from read hook: ", calculateGlobalProgress(), "%"]
  });
};
var ComponentWithUseProgressWrite = function ComponentWithUseProgressWrite() {
  var _useProgressWrite = (0, _ProgressContext.useProgressWrite)(),
    updateStats = _useProgressWrite.updateStats;
  return (0, _jsxRuntime.jsx)(_reactNative2.Button, {
    testID: "write-hook-test",
    title: "Update from write hook",
    onPress: function onPress() {
      return updateStats({
        streak: 10
      });
    }
  });
};
describe('ProgressContext', function () {
  beforeEach(function () {
    jest.useFakeTimers();
    _asyncStorage.default.getItem.mockClear();
    _asyncStorage.default.setItem.mockClear();
    _asyncStorage.default.removeItem.mockClear();
  });
  afterEach(function () {
    jest.runOnlyPendingTimers();
    jest.useRealTimers();
  });
  it('loads initial progress from AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
    var mockProgress = Object.assign({}, (0, _ProgressContext.createInitialProgress)(), {
      levels: {
        '1': {
          completed: 25,
          total: 100
        }
      },
      exercises: {
        vocabulary: {
          '1': {
            completed: 25,
            total: 100
          }
        }
      },
      stats: {
        streak: 1
      }
    });
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(mockProgress));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    expect(_reactNative.screen.getByTestId('loading-status')).toBeTruthy();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_reactNative.screen.queryByTestId('loading-status')).toBeNull();
    var level1ProgressText = _reactNative.screen.getByTestId('level1-progress').props.children.join('');
    expect(level1ProgressText).toBe('Level 1: 25%');
    var streakDisplay = _reactNative.screen.getByTestId('streak').props.children.join('');
    expect(streakDisplay).toBe('Streak: 1');
  }));
  it('updates exercise progress and recalculates level progress', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Vocab Level 1'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var savedProgress = JSON.parse(_asyncStorage.default.setItem.mock.calls[0][1]);
    expect(savedProgress.exercises.vocabulary['1'].completed).toBe(50);
    expect(savedProgress.levels['1'].completed).toBe(6);
  }));
  it('updates progress for a new exercise type and calculates average', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Add New Exercise Type'));
    var level1Text = _reactNative.screen.getByTestId('level1-progress').props.children.join('');
    expect(level1Text).toBe('Level 1: 3%');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var savedProgress = JSON.parse(_asyncStorage.default.setItem.mock.calls[0][1]);
    expect(savedProgress.exercises.newType['1'].completed).toBe(25);
  }));
  it('updates stats and saves to AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var streakChildren = _reactNative.screen.getByTestId('streak').props.children;
    var streakText = Array.isArray(streakChildren) ? streakChildren.join('') : streakChildren;
    expect(streakText).toBe('Streak: 0');
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Streak'));
    streakChildren = _reactNative.screen.getByTestId('streak').props.children;
    streakText = Array.isArray(streakChildren) ? streakChildren.join('') : streakChildren;
    expect(streakText).toBe('Streak: 5');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_asyncStorage.default.setItem).toHaveBeenCalledTimes(1);
    var savedProgress = JSON.parse(_asyncStorage.default.setItem.mock.calls[0][1]);
    expect(savedProgress.stats.streak).toBe(5);
  }));
  it('resets progress and removes from AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Vocab Level 1'));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Streak'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_asyncStorage.default.setItem).toHaveBeenCalledTimes(1);
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Reset Progress'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield Promise.resolve();
    }));
    expect(_asyncStorage.default.removeItem).toHaveBeenCalledWith(_constants.STORAGE_KEYS.USER_PROGRESS);
    var level1Children = _reactNative.screen.getByTestId('level1-progress').props.children;
    var level1Text = Array.isArray(level1Children) ? level1Children.join('') : level1Children;
    expect(level1Text).toBe('Level 1: 0%');
    var streakChildren = _reactNative.screen.getByTestId('streak').props.children;
    var streakText = Array.isArray(streakChildren) ? streakChildren.join('') : streakChildren;
    expect(streakText).toBe('Streak: 0');
  }));
  it('calculates level progress correctly when there are no exercises for a level', (0, _asyncToGenerator2.default)(function* () {
    var mockInitialProgress = (0, _ProgressContext.createInitialProgress)();
    mockInitialProgress.exercises = {};
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(mockInitialProgress));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var level1Text = _reactNative.screen.getByTestId('level1-progress').props.children.join('');
    expect(level1Text).toBe('Level 1: 0%');
  }));
  it('handles errors during initial loading', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockRejectedValueOnce(new Error('Mock AsyncStorage Error'));
    var consoleErrorSpy = jest.spyOn(console, 'error');
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(consoleErrorSpy).toHaveBeenCalledWith('Erreur chargement progression:', expect.any(Error));
    expect(_reactNative.screen.queryByTestId('loading-status')).toBeNull();
    var globalProgressText = _reactNative.screen.getByTestId('global-progress').props.children.join('');
    expect(globalProgressText).toBe('Global: 0%');
    consoleErrorSpy.mockRestore();
  }));
  it('handles errors during saving progress gracefully', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.setItem.mockRejectedValueOnce(new Error('Mock AsyncStorage Save Error'));
    var consoleErrorSpy = jest.spyOn(console, 'error');
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Streak'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(500);
    }));
    expect(consoleErrorSpy).toHaveBeenCalledWith('Erreur sauvegarde progression:', expect.any(Error));
    consoleErrorSpy.mockRestore();
  }));
  it('handles error during progress reset gracefully', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.removeItem.mockRejectedValueOnce(new Error('Mock AsyncStorage removeItem Error'));
    var consoleErrorSpy = jest.spyOn(console, 'error');
    var mockProgress = Object.assign({}, (0, _ProgressContext.createInitialProgress)(), {
      stats: {
        streak: 1
      },
      levels: {
        '1': {
          completed: 50,
          total: 100
        }
      }
    });
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(mockProgress));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_reactNative.screen.getByTestId('streak').props.children.join('')).toBe('Streak: 1');
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Reset Progress'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield Promise.resolve();
    }));
    expect(consoleErrorSpy).toHaveBeenCalledWith('Erreur reset progression:', expect.any(Error));
    var streakText = _reactNative.screen.getByTestId('streak').props.children.join('');
    expect(streakText).toBe('Streak: 1');
    consoleErrorSpy.mockRestore();
  }));
  it('throws an error if useProgress is used outside of ProgressProvider', function () {
    var originalError = console.error;
    console.error = jest.fn();
    expect(function () {
      return (0, _reactNative.render)((0, _jsxRuntime.jsx)(ComponentWithoutUseProgress, {}));
    }).toThrow('useProgress must be used within a ProgressProvider');
    console.error = originalError;
  });
  it('throws an error if useProgressRead is used outside of ProgressProvider', function () {
    var originalError = console.error;
    console.error = jest.fn();
    expect(function () {
      return (0, _reactNative.render)((0, _jsxRuntime.jsx)(ComponentWithoutUseProgressRead, {}));
    }).toThrow('useProgressRead must be used within a ProgressProvider');
    console.error = originalError;
  });
  it('throws an error if useProgressWrite is used outside of ProgressProvider', function () {
    var originalError = console.error;
    console.error = jest.fn();
    expect(function () {
      return (0, _reactNative.render)((0, _jsxRuntime.jsx)(ComponentWithoutUseProgressWrite, {}));
    }).toThrow('useProgressWrite must be used within a ProgressProvider');
    console.error = originalError;
  });
  it('useProgressRead returns context successfully when used within provider', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(ComponentWithUseProgressRead, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var readHookText = _reactNative.screen.getByTestId('read-hook-test').props.children.join('');
    expect(readHookText).toBe('Global from read hook: 0%');
  }));
  it('useProgressWrite returns context successfully when used within provider', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsxs)(_ProgressContext.ProgressProvider, {
      children: [(0, _jsxRuntime.jsx)(ComponentWithUseProgressWrite, {}), (0, _jsxRuntime.jsx)(TestComponent, {})]
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByTestId('write-hook-test'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var streakText = _reactNative.screen.getByTestId('streak').props.children.join('');
    expect(streakText).toBe('Streak: 10');
  }));
  it('should clear previous timeout on rapid updates', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    (0, _reactNative.act)(function () {
      _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Streak'));
    });
    jest.advanceTimersByTime(250);
    (0, _reactNative.act)(function () {
      _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Vocab Level 1'));
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_asyncStorage.default.setItem).toHaveBeenCalledTimes(1);
  }));
  it('should definitively clear the previous timeout on rapid updates', (0, _asyncToGenerator2.default)(function* () {
    jest.useFakeTimers();
    var clearTimeoutSpy = jest.spyOn(global, 'clearTimeout');
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Streak'));
    }));
    yield Promise.resolve();
    jest.advanceTimersByTime(1);
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Vocab Level 1'));
    }));
    expect(clearTimeoutSpy).toHaveBeenCalledWith(expect.any(Object));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_asyncStorage.default.setItem).toHaveBeenCalledTimes(1);
    clearTimeoutSpy.mockRestore();
    jest.useRealTimers();
  }));
  it('should calculate level progress correctly when there are no exercises for a level', (0, _asyncToGenerator2.default)(function* () {
    var customInitialState = {
      levels: {
        'level-1': {
          exercises: []
        }
      }
    };
    _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify(customInitialState));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var _yield$waitFor = yield waitFor(function () {
        return _reactNative.screen.getByTestId('test-component').props;
      }),
      getLevelProgress = _yield$waitFor.getLevelProgress;
    expect(getLevelProgress('level-1')).toBe(0);
  }));
  it('should correctly calculate global progress without a bonus level', (0, _asyncToGenerator2.default)(function* () {
    var customStateWithoutBonus = {
      'level-1': {
        exercises: [{
          progress: 50
        }]
      },
      'level-2': {
        exercises: [{
          progress: 100
        }]
      }
    };
    _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify(customStateWithoutBonus));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var _yield$waitFor2 = yield waitFor(function () {
        return _reactNative.screen.getByTestId('test-component').props;
      }),
      getGlobalProgress = _yield$waitFor2.getGlobalProgress;
    expect(getGlobalProgress()).toBe(75);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJzZXRJdGVtIiwiamVzdCIsImZuIiwiUHJvbWlzZSIsInJlc29sdmUiLCJnZXRJdGVtIiwicmVtb3ZlSXRlbSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX3JlYWN0IiwiX3JlYWN0TmF0aXZlIiwiX3JlYWN0TmF0aXZlMiIsIl9Qcm9ncmVzc0NvbnRleHQiLCJfYXN5bmNTdG9yYWdlIiwiX2NvbnN0YW50cyIsIl9qc3hSdW50aW1lIiwiX3JlcXVpcmUiLCJUZXN0Q29tcG9uZW50IiwiX3Byb2dyZXNzJGV4ZXJjaXNlcyR2IiwiX3VzZVByb2dyZXNzIiwidXNlUHJvZ3Jlc3MiLCJwcm9ncmVzcyIsImlzTG9hZGluZyIsInVwZGF0ZUV4ZXJjaXNlUHJvZ3Jlc3MiLCJ1cGRhdGVTdGF0cyIsImNhbGN1bGF0ZUdsb2JhbFByb2dyZXNzIiwiY2FsY3VsYXRlTGV2ZWxQcm9ncmVzcyIsInJlc2V0UHJvZ3Jlc3MiLCJqc3giLCJUZXh0IiwidGVzdElEIiwiY2hpbGRyZW4iLCJqc3hzIiwiRnJhZ21lbnQiLCJleGVyY2lzZXMiLCJ2b2NhYnVsYXJ5IiwiY29tcGxldGVkIiwic3RhdHMiLCJzdHJlYWsiLCJCdXR0b24iLCJ0aXRsZSIsIm9uUHJlc3MiLCJDb21wb25lbnRXaXRob3V0VXNlUHJvZ3Jlc3MiLCJDb21wb25lbnRXaXRob3V0VXNlUHJvZ3Jlc3NSZWFkIiwidXNlUHJvZ3Jlc3NSZWFkIiwiQ29tcG9uZW50V2l0aG91dFVzZVByb2dyZXNzV3JpdGUiLCJ1c2VQcm9ncmVzc1dyaXRlIiwiQ29tcG9uZW50V2l0aFVzZVByb2dyZXNzUmVhZCIsIl91c2VQcm9ncmVzc1JlYWQiLCJDb21wb25lbnRXaXRoVXNlUHJvZ3Jlc3NXcml0ZSIsIl91c2VQcm9ncmVzc1dyaXRlIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwidXNlRmFrZVRpbWVycyIsIkFzeW5jU3RvcmFnZSIsIm1vY2tDbGVhciIsImFmdGVyRWFjaCIsInJ1bk9ubHlQZW5kaW5nVGltZXJzIiwidXNlUmVhbFRpbWVycyIsIml0IiwiZGVmYXVsdCIsIm1vY2tQcm9ncmVzcyIsIk9iamVjdCIsImFzc2lnbiIsImNyZWF0ZUluaXRpYWxQcm9ncmVzcyIsImxldmVscyIsInRvdGFsIiwibW9ja1Jlc29sdmVkVmFsdWVPbmNlIiwiSlNPTiIsInN0cmluZ2lmeSIsInJlbmRlciIsIlByb2dyZXNzUHJvdmlkZXIiLCJleHBlY3QiLCJzY3JlZW4iLCJnZXRCeVRlc3RJZCIsInRvQmVUcnV0aHkiLCJhY3QiLCJydW5BbGxUaW1lcnMiLCJxdWVyeUJ5VGVzdElkIiwidG9CZU51bGwiLCJsZXZlbDFQcm9ncmVzc1RleHQiLCJwcm9wcyIsImpvaW4iLCJ0b0JlIiwic3RyZWFrRGlzcGxheSIsImZpcmVFdmVudCIsInByZXNzIiwiZ2V0QnlUZXh0Iiwic2F2ZWRQcm9ncmVzcyIsInBhcnNlIiwiY2FsbHMiLCJsZXZlbDFUZXh0IiwibmV3VHlwZSIsInN0cmVha0NoaWxkcmVuIiwic3RyZWFrVGV4dCIsIkFycmF5IiwiaXNBcnJheSIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiU1RPUkFHRV9LRVlTIiwiVVNFUl9QUk9HUkVTUyIsImxldmVsMUNoaWxkcmVuIiwibW9ja0luaXRpYWxQcm9ncmVzcyIsIm1vY2tSZWplY3RlZFZhbHVlT25jZSIsIkVycm9yIiwiY29uc29sZUVycm9yU3B5Iiwic3B5T24iLCJjb25zb2xlIiwiYW55IiwiZ2xvYmFsUHJvZ3Jlc3NUZXh0IiwibW9ja1Jlc3RvcmUiLCJhZHZhbmNlVGltZXJzQnlUaW1lIiwib3JpZ2luYWxFcnJvciIsImVycm9yIiwidG9UaHJvdyIsInJlYWRIb29rVGV4dCIsImNsZWFyVGltZW91dFNweSIsImdsb2JhbCIsImN1c3RvbUluaXRpYWxTdGF0ZSIsIm1vY2tSZXNvbHZlZFZhbHVlIiwiX3lpZWxkJHdhaXRGb3IiLCJ3YWl0Rm9yIiwiZ2V0TGV2ZWxQcm9ncmVzcyIsImN1c3RvbVN0YXRlV2l0aG91dEJvbnVzIiwiX3lpZWxkJHdhaXRGb3IyIiwiZ2V0R2xvYmFsUHJvZ3Jlc3MiXSwic291cmNlcyI6WyJQcm9ncmVzc0NvbnRleHQudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4sIGFjdCwgZmlyZUV2ZW50IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgVGV4dCwgQnV0dG9uIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IFByb2dyZXNzUHJvdmlkZXIsIHVzZVByb2dyZXNzLCBjcmVhdGVJbml0aWFsUHJvZ3Jlc3MsIHVzZVByb2dyZXNzUmVhZCwgdXNlUHJvZ3Jlc3NXcml0ZSB9IGZyb20gJy4uLy4uL3NyYy9jb250ZXh0cy9Qcm9ncmVzc0NvbnRleHQnO1xuaW1wb3J0IEFzeW5jU3RvcmFnZSBmcm9tICdAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZSc7XG5pbXBvcnQgeyBTVE9SQUdFX0tFWVMgfSBmcm9tICcuLi8uLi9zcmMvdXRpbHMvY29uc3RhbnRzJztcblxuLy8gTW9jayBBc3luY1N0b3JhZ2Vcbmplc3QubW9jaygnQHJlYWN0LW5hdGl2ZS1hc3luYy1zdG9yYWdlL2FzeW5jLXN0b3JhZ2UnLCAoKSA9PiAoe1xuICBzZXRJdGVtOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgpKSxcbiAgZ2V0SXRlbTogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUobnVsbCkpLFxuICByZW1vdmVJdGVtOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgpKSxcbn0pKTtcblxuLy8gQSB0ZXN0IGNvbXBvbmVudCB0byBjb25zdW1lIHRoZSBjb250ZXh0XG5jb25zdCBUZXN0Q29tcG9uZW50ID0gKCkgPT4ge1xuICBjb25zdCB7XG4gICAgcHJvZ3Jlc3MsXG4gICAgaXNMb2FkaW5nLFxuICAgIHVwZGF0ZUV4ZXJjaXNlUHJvZ3Jlc3MsXG4gICAgdXBkYXRlU3RhdHMsXG4gICAgY2FsY3VsYXRlR2xvYmFsUHJvZ3Jlc3MsXG4gICAgY2FsY3VsYXRlTGV2ZWxQcm9ncmVzcyxcbiAgICByZXNldFByb2dyZXNzLFxuICB9ID0gdXNlUHJvZ3Jlc3MoKTtcblxuICBpZiAoaXNMb2FkaW5nKSB7XG4gICAgcmV0dXJuIDxUZXh0IHRlc3RJRD1cImxvYWRpbmctc3RhdHVzXCI+TG9hZGluZy4uLjwvVGV4dD47XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8VGV4dCB0ZXN0SUQ9XCJnbG9iYWwtcHJvZ3Jlc3NcIj5HbG9iYWw6IHtjYWxjdWxhdGVHbG9iYWxQcm9ncmVzcygpfSU8L1RleHQ+XG4gICAgICA8VGV4dCB0ZXN0SUQ9XCJsZXZlbDEtcHJvZ3Jlc3NcIj5MZXZlbCAxOiB7Y2FsY3VsYXRlTGV2ZWxQcm9ncmVzcygnMScpfSU8L1RleHQ+XG4gICAgICA8VGV4dCB0ZXN0SUQ9XCJsZXZlbC1ib251cy1wcm9ncmVzc1wiPkxldmVsIEJvbnVzOiB7Y2FsY3VsYXRlTGV2ZWxQcm9ncmVzcygnYm9udXMnKX0lPC9UZXh0PlxuICAgICAgPFRleHQgdGVzdElEPVwidm9jYWItbGV2ZWwxLWNvbXBsZXRlZFwiPlxuICAgICAgICBWb2NhYiBMZXZlbCAxIENvbXBsZXRlZDoge3Byb2dyZXNzLmV4ZXJjaXNlcy52b2NhYnVsYXJ5Py5bJzEnXT8uY29tcGxldGVkIHx8IDB9XG4gICAgICA8L1RleHQ+XG4gICAgICA8VGV4dCB0ZXN0SUQ9XCJzdHJlYWtcIj5TdHJlYWs6IHtwcm9ncmVzcy5zdGF0cy5zdHJlYWt9PC9UZXh0PlxuXG4gICAgICA8QnV0dG9uIHRpdGxlPVwiVXBkYXRlIFZvY2FiIExldmVsIDFcIiBvblByZXNzPXsoKSA9PiB1cGRhdGVFeGVyY2lzZVByb2dyZXNzKCd2b2NhYnVsYXJ5JywgJzEnLCA1MCl9IC8+XG4gICAgICA8QnV0dG9uIHRpdGxlPVwiVXBkYXRlIFN0cmVha1wiIG9uUHJlc3M9eygpID0+IHVwZGF0ZVN0YXRzKHsgc3RyZWFrOiA1IH0pfSAvPlxuICAgICAgPEJ1dHRvbiB0aXRsZT1cIlJlc2V0IFByb2dyZXNzXCIgb25QcmVzcz17cmVzZXRQcm9ncmVzc30gLz5cbiAgICAgIDxCdXR0b24gdGl0bGU9XCJVcGRhdGUgVm9jYWIgQm9udXNcIiBvblByZXNzPXsoKSA9PiB1cGRhdGVFeGVyY2lzZVByb2dyZXNzKCd2b2NhYnVsYXJ5JywgJ2JvbnVzJywgNzUpfSAvPlxuICAgICAgPEJ1dHRvbiB0aXRsZT1cIlVwZGF0ZSBHcmFtbWFyIEJvbnVzXCIgb25QcmVzcz17KCkgPT4gdXBkYXRlRXhlcmNpc2VQcm9ncmVzcygnZ3JhbW1hcicsICdib251cycsIDUwKX0gLz5cbiAgICAgIDxCdXR0b24gdGl0bGU9XCJBZGQgTmV3IEV4ZXJjaXNlIFR5cGVcIiBvblByZXNzPXsoKSA9PiB1cGRhdGVFeGVyY2lzZVByb2dyZXNzKCduZXdUeXBlJywgJzEnLCAyNSl9IC8+XG4gICAgPC8+XG4gICk7XG59O1xuXG4vLyBDb21wb25lbnRzIHRvIHRlc3QgaG9va3Mgb3V0c2lkZSB0aGUgcHJvdmlkZXJcbmNvbnN0IENvbXBvbmVudFdpdGhvdXRVc2VQcm9ncmVzcyA9ICgpID0+IHtcbiAgdXNlUHJvZ3Jlc3MoKTtcbiAgcmV0dXJuIG51bGw7XG59O1xuXG5jb25zdCBDb21wb25lbnRXaXRob3V0VXNlUHJvZ3Jlc3NSZWFkID0gKCkgPT4ge1xuICB1c2VQcm9ncmVzc1JlYWQoKTtcbiAgcmV0dXJuIG51bGw7XG59O1xuXG5jb25zdCBDb21wb25lbnRXaXRob3V0VXNlUHJvZ3Jlc3NXcml0ZSA9ICgpID0+IHtcbiAgdXNlUHJvZ3Jlc3NXcml0ZSgpO1xuICByZXR1cm4gbnVsbDtcbn07XG5cbiAgLy8gQ29tcG9zYW50cyBkZSB0ZXN0IHBvdXIgdXRpbGlzZXIgbGVzIGhvb2tzIEFWRUMgbGUgcHJvdmlkZXIgKGNhcyBkZSBzdWNjw6hzKVxuY29uc3QgQ29tcG9uZW50V2l0aFVzZVByb2dyZXNzUmVhZCA9ICgpID0+IHtcbiAgY29uc3QgeyBwcm9ncmVzcywgY2FsY3VsYXRlR2xvYmFsUHJvZ3Jlc3MgfSA9IHVzZVByb2dyZXNzUmVhZCgpO1xuICByZXR1cm4gKFxuICAgIDxUZXh0IHRlc3RJRD1cInJlYWQtaG9vay10ZXN0XCI+XG4gICAgICBHbG9iYWwgZnJvbSByZWFkIGhvb2s6IHtjYWxjdWxhdGVHbG9iYWxQcm9ncmVzcygpfSVcbiAgICA8L1RleHQ+XG4gICk7XG59O1xuXG5jb25zdCBDb21wb25lbnRXaXRoVXNlUHJvZ3Jlc3NXcml0ZSA9ICgpID0+IHtcbiAgY29uc3QgeyB1cGRhdGVTdGF0cyB9ID0gdXNlUHJvZ3Jlc3NXcml0ZSgpO1xuICByZXR1cm4gKFxuICAgIDxCdXR0b24gXG4gICAgICB0ZXN0SUQ9XCJ3cml0ZS1ob29rLXRlc3RcIiBcbiAgICAgIHRpdGxlPVwiVXBkYXRlIGZyb20gd3JpdGUgaG9va1wiIFxuICAgICAgb25QcmVzcz17KCkgPT4gdXBkYXRlU3RhdHMoeyBzdHJlYWs6IDEwIH0pfSBcbiAgICAvPlxuICApO1xufTtcblxuZGVzY3JpYmUoJ1Byb2dyZXNzQ29udGV4dCcsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC51c2VGYWtlVGltZXJzKCk7XG4gICAgQXN5bmNTdG9yYWdlLmdldEl0ZW0ubW9ja0NsZWFyKCk7XG4gICAgQXN5bmNTdG9yYWdlLnNldEl0ZW0ubW9ja0NsZWFyKCk7XG4gICAgQXN5bmNTdG9yYWdlLnJlbW92ZUl0ZW0ubW9ja0NsZWFyKCk7XG4gIH0pO1xuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgamVzdC5ydW5Pbmx5UGVuZGluZ1RpbWVycygpO1xuICAgIGplc3QudXNlUmVhbFRpbWVycygpO1xuICB9KTtcblxuICAvLyA9PT09PT09PT09IEJhc2UgVGVzdHMgPT09PT09PT09PVxuXG4gIGl0KCdsb2FkcyBpbml0aWFsIHByb2dyZXNzIGZyb20gQXN5bmNTdG9yYWdlJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tQcm9ncmVzcyA9IHtcbiAgICAgIC4uLmNyZWF0ZUluaXRpYWxQcm9ncmVzcygpLFxuICAgICAgbGV2ZWxzOiB7ICcxJzogeyBjb21wbGV0ZWQ6IDI1LCB0b3RhbDogMTAwIH0gfSxcbiAgICAgIGV4ZXJjaXNlczogeyB2b2NhYnVsYXJ5OiB7ICcxJzogeyBjb21wbGV0ZWQ6IDI1LCB0b3RhbDogMTAwIH0gfSB9LFxuICAgICAgc3RhdHM6IHsgc3RyZWFrOiAxIH0sXG4gICAgfTtcbiAgICBBc3luY1N0b3JhZ2UuZ2V0SXRlbS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoSlNPTi5zdHJpbmdpZnkobW9ja1Byb2dyZXNzKSk7XG5cbiAgICByZW5kZXIoXG4gICAgICA8UHJvZ3Jlc3NQcm92aWRlcj5cbiAgICAgICAgPFRlc3RDb21wb25lbnQgLz5cbiAgICAgIDwvUHJvZ3Jlc3NQcm92aWRlcj5cbiAgICApO1xuXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnbG9hZGluZy1zdGF0dXMnKSkudG9CZVRydXRoeSgpO1xuXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGplc3QucnVuQWxsVGltZXJzKCk7XG4gICAgfSk7XG5cbiAgICBleHBlY3Qoc2NyZWVuLnF1ZXJ5QnlUZXN0SWQoJ2xvYWRpbmctc3RhdHVzJykpLnRvQmVOdWxsKCk7XG4gICAgY29uc3QgbGV2ZWwxUHJvZ3Jlc3NUZXh0ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdsZXZlbDEtcHJvZ3Jlc3MnKS5wcm9wcy5jaGlsZHJlbi5qb2luKCcnKTtcbiAgICBleHBlY3QobGV2ZWwxUHJvZ3Jlc3NUZXh0KS50b0JlKCdMZXZlbCAxOiAyNSUnKTtcbiAgICBjb25zdCBzdHJlYWtEaXNwbGF5ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdzdHJlYWsnKS5wcm9wcy5jaGlsZHJlbi5qb2luKCcnKTtcbiAgICBleHBlY3Qoc3RyZWFrRGlzcGxheSkudG9CZSgnU3RyZWFrOiAxJyk7XG4gIH0pO1xuXG4gIGl0KCd1cGRhdGVzIGV4ZXJjaXNlIHByb2dyZXNzIGFuZCByZWNhbGN1bGF0ZXMgbGV2ZWwgcHJvZ3Jlc3MnLCBhc3luYyAoKSA9PiB7XG4gICAgcmVuZGVyKFxuICAgICAgPFByb2dyZXNzUHJvdmlkZXI+XG4gICAgICAgIDxUZXN0Q29tcG9uZW50IC8+XG4gICAgICA8L1Byb2dyZXNzUHJvdmlkZXI+XG4gICAgKTtcblxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBqZXN0LnJ1bkFsbFRpbWVycygpO1xuICAgIH0pO1xuXG4gICAgZmlyZUV2ZW50LnByZXNzKHNjcmVlbi5nZXRCeVRleHQoJ1VwZGF0ZSBWb2NhYiBMZXZlbCAxJykpO1xuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBqZXN0LnJ1bkFsbFRpbWVycygpO1xuICAgIH0pO1xuXG4gICAgY29uc3Qgc2F2ZWRQcm9ncmVzcyA9IEpTT04ucGFyc2UoQXN5bmNTdG9yYWdlLnNldEl0ZW0ubW9jay5jYWxsc1swXVsxXSk7XG4gICAgZXhwZWN0KHNhdmVkUHJvZ3Jlc3MuZXhlcmNpc2VzLnZvY2FidWxhcnlbJzEnXS5jb21wbGV0ZWQpLnRvQmUoNTApO1xuICAgIGV4cGVjdChzYXZlZFByb2dyZXNzLmxldmVsc1snMSddLmNvbXBsZXRlZCkudG9CZSg2KTtcbiAgfSk7XG5cbiAgaXQoJ3VwZGF0ZXMgcHJvZ3Jlc3MgZm9yIGEgbmV3IGV4ZXJjaXNlIHR5cGUgYW5kIGNhbGN1bGF0ZXMgYXZlcmFnZScsIGFzeW5jICgpID0+IHtcbiAgICByZW5kZXIoXG4gICAgICA8UHJvZ3Jlc3NQcm92aWRlcj5cbiAgICAgICAgPFRlc3RDb21wb25lbnQgLz5cbiAgICAgIDwvUHJvZ3Jlc3NQcm92aWRlcj5cbiAgICApO1xuICAgIFxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBqZXN0LnJ1bkFsbFRpbWVycygpO1xuICAgIH0pO1xuXG4gICAgZmlyZUV2ZW50LnByZXNzKHNjcmVlbi5nZXRCeVRleHQoJ0FkZCBOZXcgRXhlcmNpc2UgVHlwZScpKTtcbiAgICBcbiAgICBjb25zdCBsZXZlbDFUZXh0ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdsZXZlbDEtcHJvZ3Jlc3MnKS5wcm9wcy5jaGlsZHJlbi5qb2luKCcnKTtcbiAgICBleHBlY3QobGV2ZWwxVGV4dCkudG9CZSgnTGV2ZWwgMTogMyUnKTtcbiAgICBcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgamVzdC5ydW5BbGxUaW1lcnMoKTtcbiAgICB9KTtcbiAgICBcbiAgICBjb25zdCBzYXZlZFByb2dyZXNzID0gSlNPTi5wYXJzZShBc3luY1N0b3JhZ2Uuc2V0SXRlbS5tb2NrLmNhbGxzWzBdWzFdKTtcbiAgICBleHBlY3Qoc2F2ZWRQcm9ncmVzcy5leGVyY2lzZXMubmV3VHlwZVsnMSddLmNvbXBsZXRlZCkudG9CZSgyNSk7XG4gIH0pO1xuXG4gIGl0KCd1cGRhdGVzIHN0YXRzIGFuZCBzYXZlcyB0byBBc3luY1N0b3JhZ2UnLCBhc3luYyAoKSA9PiB7XG4gICAgcmVuZGVyKFxuICAgICAgPFByb2dyZXNzUHJvdmlkZXI+XG4gICAgICAgIDxUZXN0Q29tcG9uZW50IC8+XG4gICAgICA8L1Byb2dyZXNzUHJvdmlkZXI+XG4gICAgKTtcblxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBqZXN0LnJ1bkFsbFRpbWVycygpO1xuICAgIH0pO1xuXG4gICAgbGV0IHN0cmVha0NoaWxkcmVuID0gc2NyZWVuLmdldEJ5VGVzdElkKCdzdHJlYWsnKS5wcm9wcy5jaGlsZHJlbjtcbiAgICBsZXQgc3RyZWFrVGV4dCA9IEFycmF5LmlzQXJyYXkoc3RyZWFrQ2hpbGRyZW4pID8gc3RyZWFrQ2hpbGRyZW4uam9pbignJykgOiBzdHJlYWtDaGlsZHJlbjtcbiAgICBleHBlY3Qoc3RyZWFrVGV4dCkudG9CZSgnU3RyZWFrOiAwJyk7XG5cbiAgICBmaXJlRXZlbnQucHJlc3Moc2NyZWVuLmdldEJ5VGV4dCgnVXBkYXRlIFN0cmVhaycpKTtcblxuICAgIHN0cmVha0NoaWxkcmVuID0gc2NyZWVuLmdldEJ5VGVzdElkKCdzdHJlYWsnKS5wcm9wcy5jaGlsZHJlbjtcbiAgICBzdHJlYWtUZXh0ID0gQXJyYXkuaXNBcnJheShzdHJlYWtDaGlsZHJlbikgPyBzdHJlYWtDaGlsZHJlbi5qb2luKCcnKSA6IHN0cmVha0NoaWxkcmVuO1xuICAgIGV4cGVjdChzdHJlYWtUZXh0KS50b0JlKCdTdHJlYWs6IDUnKTtcblxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBqZXN0LnJ1bkFsbFRpbWVycygpO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KEFzeW5jU3RvcmFnZS5zZXRJdGVtKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgY29uc3Qgc2F2ZWRQcm9ncmVzcyA9IEpTT04ucGFyc2UoQXN5bmNTdG9yYWdlLnNldEl0ZW0ubW9jay5jYWxsc1swXVsxXSk7XG4gICAgZXhwZWN0KHNhdmVkUHJvZ3Jlc3Muc3RhdHMuc3RyZWFrKS50b0JlKDUpO1xuICB9KTtcbiAgXG4gIGl0KCdyZXNldHMgcHJvZ3Jlc3MgYW5kIHJlbW92ZXMgZnJvbSBBc3luY1N0b3JhZ2UnLCBhc3luYyAoKSA9PiB7XG4gICAgcmVuZGVyKFxuICAgICAgPFByb2dyZXNzUHJvdmlkZXI+XG4gICAgICAgIDxUZXN0Q29tcG9uZW50IC8+XG4gICAgICA8L1Byb2dyZXNzUHJvdmlkZXI+XG4gICAgKTtcblxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBqZXN0LnJ1bkFsbFRpbWVycygpO1xuICAgIH0pO1xuXG4gICAgZmlyZUV2ZW50LnByZXNzKHNjcmVlbi5nZXRCeVRleHQoJ1VwZGF0ZSBWb2NhYiBMZXZlbCAxJykpO1xuICAgIGZpcmVFdmVudC5wcmVzcyhzY3JlZW4uZ2V0QnlUZXh0KCdVcGRhdGUgU3RyZWFrJykpO1xuXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGplc3QucnVuQWxsVGltZXJzKCk7XG4gICAgfSk7XG5cbiAgICBleHBlY3QoQXN5bmNTdG9yYWdlLnNldEl0ZW0pLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcblxuICAgIGZpcmVFdmVudC5wcmVzcyhzY3JlZW4uZ2V0QnlUZXh0KCdSZXNldCBQcm9ncmVzcycpKTtcblxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChBc3luY1N0b3JhZ2UucmVtb3ZlSXRlbSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoU1RPUkFHRV9LRVlTLlVTRVJfUFJPR1JFU1MpO1xuXG4gICAgY29uc3QgbGV2ZWwxQ2hpbGRyZW4gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2xldmVsMS1wcm9ncmVzcycpLnByb3BzLmNoaWxkcmVuO1xuICAgIGNvbnN0IGxldmVsMVRleHQgPSBBcnJheS5pc0FycmF5KGxldmVsMUNoaWxkcmVuKSA/IGxldmVsMUNoaWxkcmVuLmpvaW4oJycpIDogbGV2ZWwxQ2hpbGRyZW47XG4gICAgZXhwZWN0KGxldmVsMVRleHQpLnRvQmUoJ0xldmVsIDE6IDAlJyk7XG5cbiAgICBjb25zdCBzdHJlYWtDaGlsZHJlbiA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnc3RyZWFrJykucHJvcHMuY2hpbGRyZW47XG4gICAgY29uc3Qgc3RyZWFrVGV4dCA9IEFycmF5LmlzQXJyYXkoc3RyZWFrQ2hpbGRyZW4pID8gc3RyZWFrQ2hpbGRyZW4uam9pbignJykgOiBzdHJlYWtDaGlsZHJlbjtcbiAgICBleHBlY3Qoc3RyZWFrVGV4dCkudG9CZSgnU3RyZWFrOiAwJyk7XG4gIH0pO1xuXG4gIC8vID09PT09PT09PT0gTmV3IFRlc3RzIGZvciBDb3ZlcmFnZSA9PT09PT09PT09XG5cbiAgaXQoJ2NhbGN1bGF0ZXMgbGV2ZWwgcHJvZ3Jlc3MgY29ycmVjdGx5IHdoZW4gdGhlcmUgYXJlIG5vIGV4ZXJjaXNlcyBmb3IgYSBsZXZlbCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtb2NrSW5pdGlhbFByb2dyZXNzID0gY3JlYXRlSW5pdGlhbFByb2dyZXNzKCk7XG4gICAgbW9ja0luaXRpYWxQcm9ncmVzcy5leGVyY2lzZXMgPSB7fTsgXG4gICAgQXN5bmNTdG9yYWdlLmdldEl0ZW0ubW9ja1Jlc29sdmVkVmFsdWVPbmNlKEpTT04uc3RyaW5naWZ5KG1vY2tJbml0aWFsUHJvZ3Jlc3MpKTtcblxuICAgIHJlbmRlcihcbiAgICAgIDxQcm9ncmVzc1Byb3ZpZGVyPlxuICAgICAgICA8VGVzdENvbXBvbmVudCAvPlxuICAgICAgPC9Qcm9ncmVzc1Byb3ZpZGVyPlxuICAgICk7XG5cbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgamVzdC5ydW5BbGxUaW1lcnMoKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGxldmVsMVRleHQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2xldmVsMS1wcm9ncmVzcycpLnByb3BzLmNoaWxkcmVuLmpvaW4oJycpO1xuICAgIGV4cGVjdChsZXZlbDFUZXh0KS50b0JlKCdMZXZlbCAxOiAwJScpO1xuICB9KTtcblxuICBpdCgnaGFuZGxlcyBlcnJvcnMgZHVyaW5nIGluaXRpYWwgbG9hZGluZycsIGFzeW5jICgpID0+IHtcbiAgICBBc3luY1N0b3JhZ2UuZ2V0SXRlbS5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UobmV3IEVycm9yKCdNb2NrIEFzeW5jU3RvcmFnZSBFcnJvcicpKTtcbiAgICBjb25zdCBjb25zb2xlRXJyb3JTcHkgPSBqZXN0LnNweU9uKGNvbnNvbGUsICdlcnJvcicpO1xuXG4gICAgcmVuZGVyKFxuICAgICAgPFByb2dyZXNzUHJvdmlkZXI+XG4gICAgICAgIDxUZXN0Q29tcG9uZW50IC8+XG4gICAgICA8L1Byb2dyZXNzUHJvdmlkZXI+XG4gICAgKTtcblxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBqZXN0LnJ1bkFsbFRpbWVycygpO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KGNvbnNvbGVFcnJvclNweSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ0VycmV1ciBjaGFyZ2VtZW50IHByb2dyZXNzaW9uOicsIGV4cGVjdC5hbnkoRXJyb3IpKTtcbiAgICBleHBlY3Qoc2NyZWVuLnF1ZXJ5QnlUZXN0SWQoJ2xvYWRpbmctc3RhdHVzJykpLnRvQmVOdWxsKCk7XG4gICAgY29uc3QgZ2xvYmFsUHJvZ3Jlc3NUZXh0ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdnbG9iYWwtcHJvZ3Jlc3MnKS5wcm9wcy5jaGlsZHJlbi5qb2luKCcnKTtcbiAgICBleHBlY3QoZ2xvYmFsUHJvZ3Jlc3NUZXh0KS50b0JlKCdHbG9iYWw6IDAlJyk7XG4gICAgY29uc29sZUVycm9yU3B5Lm1vY2tSZXN0b3JlKCk7XG4gIH0pO1xuXG5pdCgnaGFuZGxlcyBlcnJvcnMgZHVyaW5nIHNhdmluZyBwcm9ncmVzcyBncmFjZWZ1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIFNpbXVsZXIgdW5lIGVycmV1ciBkZSBzYXV2ZWdhcmRlXG4gICAgQXN5bmNTdG9yYWdlLnNldEl0ZW0ubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignTW9jayBBc3luY1N0b3JhZ2UgU2F2ZSBFcnJvcicpKTtcbiAgICBjb25zdCBjb25zb2xlRXJyb3JTcHkgPSBqZXN0LnNweU9uKGNvbnNvbGUsICdlcnJvcicpO1xuXG4gICAgcmVuZGVyKFxuICAgICAgICA8UHJvZ3Jlc3NQcm92aWRlcj5cbiAgICAgICAgICAgIDxUZXN0Q29tcG9uZW50IC8+XG4gICAgICAgIDwvUHJvZ3Jlc3NQcm92aWRlcj5cbiAgICApO1xuXG4gICAgLy8gSW5pdGlhbCBsb2FkXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgamVzdC5ydW5BbGxUaW1lcnMoKTtcbiAgICB9KTtcblxuICAgIC8vIETDqWNsZW5jaGVyIGwnw6l2w6luZW1lbnQgcXVpIHZhIHByb3ZvcXVlciB1bmUgc2F1dmVnYXJkZVxuICAgIGZpcmVFdmVudC5wcmVzcyhzY3JlZW4uZ2V0QnlUZXh0KCdVcGRhdGUgU3RyZWFrJykpO1xuXG4gICAgLy8gQXR0ZW5kcmUgcXVlIGxlIHNldFRpbWVvdXQgc2UgZMOpY2xlbmNoZSAoNTAwbXMgZGUgZGVib3VuY2UpIGV0IHF1ZSBsYSBwcm9tZXNzZSDDqWNob3VlXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgamVzdC5hZHZhbmNlVGltZXJzQnlUaW1lKDUwMCk7XG4gICAgfSk7XG5cbiAgICAvLyBWw6lyaWZpZXIgcXVlIGwnZXJyZXVyIGEgw6l0w6kgY29ycmVjdGVtZW50IGxvZ3XDqWVcbiAgICBleHBlY3QoY29uc29sZUVycm9yU3B5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnRXJyZXVyIHNhdXZlZ2FyZGUgcHJvZ3Jlc3Npb246JywgZXhwZWN0LmFueShFcnJvcikpO1xuICAgIGNvbnNvbGVFcnJvclNweS5tb2NrUmVzdG9yZSgpO1xufSk7XG5cbiAgaXQoJ2hhbmRsZXMgZXJyb3IgZHVyaW5nIHByb2dyZXNzIHJlc2V0IGdyYWNlZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgQXN5bmNTdG9yYWdlLnJlbW92ZUl0ZW0ubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignTW9jayBBc3luY1N0b3JhZ2UgcmVtb3ZlSXRlbSBFcnJvcicpKTtcbiAgICBjb25zdCBjb25zb2xlRXJyb3JTcHkgPSBqZXN0LnNweU9uKGNvbnNvbGUsICdlcnJvcicpO1xuICAgIFxuICAgIGNvbnN0IG1vY2tQcm9ncmVzcyA9IHtcbiAgICAgICAgLi4uY3JlYXRlSW5pdGlhbFByb2dyZXNzKCksXG4gICAgICAgIHN0YXRzOiB7IHN0cmVhazogMSB9LFxuICAgICAgICBsZXZlbHM6IHsgJzEnOiB7IGNvbXBsZXRlZDogNTAsIHRvdGFsOiAxMDAgfSB9XG4gICAgfTtcbiAgICBBc3luY1N0b3JhZ2UuZ2V0SXRlbS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoSlNPTi5zdHJpbmdpZnkobW9ja1Byb2dyZXNzKSk7XG4gICAgXG4gICAgcmVuZGVyKFxuICAgICAgICA8UHJvZ3Jlc3NQcm92aWRlcj5cbiAgICAgICAgICAgIDxUZXN0Q29tcG9uZW50IC8+XG4gICAgICAgIDwvUHJvZ3Jlc3NQcm92aWRlcj5cbiAgICApO1xuXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgamVzdC5ydW5BbGxUaW1lcnMoKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ3N0cmVhaycpLnByb3BzLmNoaWxkcmVuLmpvaW4oJycpKS50b0JlKCdTdHJlYWs6IDEnKTtcblxuICAgIGZpcmVFdmVudC5wcmVzcyhzY3JlZW4uZ2V0QnlUZXh0KCdSZXNldCBQcm9ncmVzcycpKTtcblxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KGNvbnNvbGVFcnJvclNweSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ0VycmV1ciByZXNldCBwcm9ncmVzc2lvbjonLCBleHBlY3QuYW55KEVycm9yKSk7XG4gICAgXG4gICAgY29uc3Qgc3RyZWFrVGV4dCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnc3RyZWFrJykucHJvcHMuY2hpbGRyZW4uam9pbignJyk7XG4gICAgZXhwZWN0KHN0cmVha1RleHQpLnRvQmUoJ1N0cmVhazogMScpO1xuXG4gICAgY29uc29sZUVycm9yU3B5Lm1vY2tSZXN0b3JlKCk7XG4gIH0pO1xuXG4gIC8vID09PT09PT09PT0gVGVzdHMgZm9yIG91dC1vZi1wcm92aWRlciB1c2FnZSA9PT09PT09PT09XG4gIGl0KCd0aHJvd3MgYW4gZXJyb3IgaWYgdXNlUHJvZ3Jlc3MgaXMgdXNlZCBvdXRzaWRlIG9mIFByb2dyZXNzUHJvdmlkZXInLCAoKSA9PiB7XG4gICAgY29uc3Qgb3JpZ2luYWxFcnJvciA9IGNvbnNvbGUuZXJyb3I7XG4gICAgY29uc29sZS5lcnJvciA9IGplc3QuZm4oKTtcblxuICAgIGV4cGVjdCgoKSA9PiByZW5kZXIoPENvbXBvbmVudFdpdGhvdXRVc2VQcm9ncmVzcyAvPikpLnRvVGhyb3coXG4gICAgICAndXNlUHJvZ3Jlc3MgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIFByb2dyZXNzUHJvdmlkZXInXG4gICAgKTtcblxuICAgIGNvbnNvbGUuZXJyb3IgPSBvcmlnaW5hbEVycm9yO1xuICB9KTtcblxuICBpdCgndGhyb3dzIGFuIGVycm9yIGlmIHVzZVByb2dyZXNzUmVhZCBpcyB1c2VkIG91dHNpZGUgb2YgUHJvZ3Jlc3NQcm92aWRlcicsICgpID0+IHtcbiAgICBjb25zdCBvcmlnaW5hbEVycm9yID0gY29uc29sZS5lcnJvcjtcbiAgICBjb25zb2xlLmVycm9yID0gamVzdC5mbigpO1xuXG4gICAgZXhwZWN0KCgpID0+IHJlbmRlcig8Q29tcG9uZW50V2l0aG91dFVzZVByb2dyZXNzUmVhZCAvPikpLnRvVGhyb3coXG4gICAgICAndXNlUHJvZ3Jlc3NSZWFkIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBQcm9ncmVzc1Byb3ZpZGVyJ1xuICAgICk7XG4gICAgY29uc29sZS5lcnJvciA9IG9yaWdpbmFsRXJyb3I7XG4gIH0pO1xuXG4gIGl0KCd0aHJvd3MgYW4gZXJyb3IgaWYgdXNlUHJvZ3Jlc3NXcml0ZSBpcyB1c2VkIG91dHNpZGUgb2YgUHJvZ3Jlc3NQcm92aWRlcicsICgpID0+IHtcbiAgICBjb25zdCBvcmlnaW5hbEVycm9yID0gY29uc29sZS5lcnJvcjtcbiAgICBjb25zb2xlLmVycm9yID0gamVzdC5mbigpO1xuICAgIFxuICAgIGV4cGVjdCgoKSA9PiByZW5kZXIoPENvbXBvbmVudFdpdGhvdXRVc2VQcm9ncmVzc1dyaXRlIC8+KSkudG9UaHJvdyhcbiAgICAgICd1c2VQcm9ncmVzc1dyaXRlIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBQcm9ncmVzc1Byb3ZpZGVyJ1xuICAgICk7XG5cbiAgICBjb25zb2xlLmVycm9yID0gb3JpZ2luYWxFcnJvcjtcbiAgfSk7XG5cblxuLy8gQWpvdXRleiBjZXMgdGVzdHMgw6AgbGEgZmluIGRlIHZvdHJlIGRlc2NyaWJlIGJsb2NrLCBqdXN0ZSBhdmFudCBsZXMgdGVzdHMgZCdlcnJldXJcblxuLy8gPT09PT09PT09PSBUZXN0cyBwb3VyIGNvdXZyaXIgbGVzIHJldHVybiBkZXMgaG9va3MgPT09PT09PT09PVxuaXQoJ3VzZVByb2dyZXNzUmVhZCByZXR1cm5zIGNvbnRleHQgc3VjY2Vzc2Z1bGx5IHdoZW4gdXNlZCB3aXRoaW4gcHJvdmlkZXInLCBhc3luYyAoKSA9PiB7XG4gIHJlbmRlcihcbiAgICA8UHJvZ3Jlc3NQcm92aWRlcj5cbiAgICAgIDxDb21wb25lbnRXaXRoVXNlUHJvZ3Jlc3NSZWFkIC8+XG4gICAgPC9Qcm9ncmVzc1Byb3ZpZGVyPlxuICApO1xuXG4gIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgamVzdC5ydW5BbGxUaW1lcnMoKTtcbiAgfSk7XG5cbiAgY29uc3QgcmVhZEhvb2tUZXh0ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdyZWFkLWhvb2stdGVzdCcpLnByb3BzLmNoaWxkcmVuLmpvaW4oJycpO1xuICBleHBlY3QocmVhZEhvb2tUZXh0KS50b0JlKCdHbG9iYWwgZnJvbSByZWFkIGhvb2s6IDAlJyk7XG59KTtcblxuaXQoJ3VzZVByb2dyZXNzV3JpdGUgcmV0dXJucyBjb250ZXh0IHN1Y2Nlc3NmdWxseSB3aGVuIHVzZWQgd2l0aGluIHByb3ZpZGVyJywgYXN5bmMgKCkgPT4ge1xuICByZW5kZXIoXG4gICAgPFByb2dyZXNzUHJvdmlkZXI+XG4gICAgICA8Q29tcG9uZW50V2l0aFVzZVByb2dyZXNzV3JpdGUgLz5cbiAgICAgIDxUZXN0Q29tcG9uZW50IC8+XG4gICAgPC9Qcm9ncmVzc1Byb3ZpZGVyPlxuICApO1xuXG4gIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgamVzdC5ydW5BbGxUaW1lcnMoKTtcbiAgfSk7XG5cbiAgZmlyZUV2ZW50LnByZXNzKHNjcmVlbi5nZXRCeVRlc3RJZCgnd3JpdGUtaG9vay10ZXN0JykpO1xuXG4gIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgamVzdC5ydW5BbGxUaW1lcnMoKTtcbiAgfSk7XG5cbiAgY29uc3Qgc3RyZWFrVGV4dCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnc3RyZWFrJykucHJvcHMuY2hpbGRyZW4uam9pbignJyk7XG4gIGV4cGVjdChzdHJlYWtUZXh0KS50b0JlKCdTdHJlYWs6IDEwJyk7XG59KTtcbi8vIFRlc3RzIGZpbmF1eCBwb3VyIGF0dGVpbmRyZSAxMDAlIGRlIGNvdXZlcnR1cmVcbml0KCdzaG91bGQgY2xlYXIgcHJldmlvdXMgdGltZW91dCBvbiByYXBpZCB1cGRhdGVzJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIDEuIFJlbmR1IGR1IGNvbXBvc2FudFxuICAgIHJlbmRlcihcbiAgICAgICAgPFByb2dyZXNzUHJvdmlkZXI+XG4gICAgICAgICAgICA8VGVzdENvbXBvbmVudCAvPlxuICAgICAgICA8L1Byb2dyZXNzUHJvdmlkZXI+XG4gICAgKTtcblxuICAgIC8vIDIuIEF0dGVuZHJlIGxlIGNoYXJnZW1lbnQgaW5pdGlhbFxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGplc3QucnVuQWxsVGltZXJzKCk7XG4gICAgfSk7XG5cbiAgICAvLyAzLiBEw6ljbGVuY2hlciB1bmUgbWlzZSDDoCBqb3VyIHF1aSB2YSBkw6ltYXJyZXIgbGUgdGltZW91dCBkZSA1MDBtc1xuICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIGZpcmVFdmVudC5wcmVzcyhzY3JlZW4uZ2V0QnlUZXh0KCdVcGRhdGUgU3RyZWFrJykpO1xuICAgIH0pO1xuXG4gICAgLy8gNC4gQXZhbmNlciBsZXMgdGltZXJzIGRlIG1vaW5zIGRlIDUwMG1zIChwYXIgZXguIDI1MG1zKVxuICAgIC8vIENlbGEgZW1ww6pjaGUgbGEgcHJlbWnDqHJlIHNhdXZlZ2FyZGUgZGUgc2UgZMOpY2xlbmNoZXJcbiAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoMjUwKTtcblxuICAgIC8vIDUuIETDqWNsZW5jaGVyIHVuZSBkZXV4acOobWUgbWlzZSDDoCBqb3VyXG4gICAgLy8gQydlc3QgY2V0dGUgYWN0aW9uIHF1aSB2YSDDqXZhbHVlciBsZSBcImlmIChzYXZlVGltZW91dFJlZi5jdXJyZW50KVwiIMOgIHRydWUgZXQgZXjDqWN1dGVyIGNsZWFyVGltZW91dCgpXG4gICAgYWN0KCgpID0+IHtcbiAgICAgICAgZmlyZUV2ZW50LnByZXNzKHNjcmVlbi5nZXRCeVRleHQoJ1VwZGF0ZSBWb2NhYiBMZXZlbCAxJykpO1xuICAgIH0pO1xuXG4gICAgLy8gNi4gQXZhbmNlciBsZSB0ZW1wcyBwb3VyIGTDqWNsZW5jaGVyIGxlIGRlcm5pZXIgc2F2ZVxuICAgIC8vIFNldWwgbGUgc2Vjb25kIHRpbWVvdXQgZGV2cmFpdCBzZSBkw6ljbGVuY2hlciwgY2FyIGxlIHByZW1pZXIgYSDDqXTDqSBhbm51bMOpXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgamVzdC5ydW5BbGxUaW1lcnMoKTtcbiAgICB9KTtcblxuICAgIC8vIDcuIFbDqXJpZmllciBxdWUgQXN5bmNTdG9yYWdlLnNldEl0ZW0gYSDDqXTDqSBhcHBlbMOpIHVuZSBzZXVsZSBmb2lzXG4gICAgLy8gQ2VsYSBwcm91dmUgcXVlIGxlIHByZW1pZXIgdGltZW91dCBhIMOpdMOpIGNvcnJlY3RlbWVudCBhbm51bMOpXG4gICAgZXhwZWN0KEFzeW5jU3RvcmFnZS5zZXRJdGVtKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG59KTtcblxuLy9UZXN0cyBicmFuY2hlc1xuXG5pdCgnc2hvdWxkIGRlZmluaXRpdmVseSBjbGVhciB0aGUgcHJldmlvdXMgdGltZW91dCBvbiByYXBpZCB1cGRhdGVzJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIDEuIEFjdGl2ZXIgbGVzIHRpbWVycyBmYWN0aWNlcy5cbiAgICBqZXN0LnVzZUZha2VUaW1lcnMoKTtcbiAgICBjb25zdCBjbGVhclRpbWVvdXRTcHkgPSBqZXN0LnNweU9uKGdsb2JhbCwgJ2NsZWFyVGltZW91dCcpO1xuXG4gICAgLy8gMi4gUmVuZHJlIGxlIGNvbXBvc2FudC5cbiAgICByZW5kZXIoXG4gICAgICAgIDxQcm9ncmVzc1Byb3ZpZGVyPlxuICAgICAgICAgICAgPFRlc3RDb21wb25lbnQgLz5cbiAgICAgICAgPC9Qcm9ncmVzc1Byb3ZpZGVyPlxuICAgICk7XG5cbiAgICAvLyAzLiBQYXNzZXIgbGUgY2hhcmdlbWVudCBpbml0aWFsLlxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGplc3QucnVuQWxsVGltZXJzKCk7XG4gICAgfSk7XG5cbiAgICAvLyA0LiBEw6ljbGVuY2hlciB1bmUgcHJlbWnDqHJlIG1pc2Ugw6Agam91ciBkJ8OpdGF0IHF1aSB2YSBwcm9ncmFtbWVyIHVuIHRpbWVvdXQuXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgZmlyZUV2ZW50LnByZXNzKHNjcmVlbi5nZXRCeVRleHQoJ1VwZGF0ZSBTdHJlYWsnKSk7XG4gICAgfSk7XG5cbiAgICAvLyDDiVRBUEUgQ1JVQ0lBTEUgOiBBdHRlbmRyZSB1bmUgbWljcm90w6JjaGUgcG91ciBnYXJhbnRpciBxdWUgbGUgcmVmIGVzdCBtaXMgw6Agam91ci5cbiAgICBhd2FpdCBQcm9taXNlLnJlc29sdmUoKTtcblxuICAgIC8vIDUuIEF2YW5jZXIgbGUgdGVtcHMgZGUgMSBtcyBwb3VyIHMnYXNzdXJlciBxdWUgbGUgdGltZW91dCBlc3QgYmllbiBwcm9ncmFtbcOpLlxuICAgIGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSgxKTtcblxuICAgIC8vIDYuIETDqWNsZW5jaGVyIHVuZSBkZXV4acOobWUgbWlzZSDDoCBqb3VyLlxuICAgIC8vIENlbGEgZm9yY2UgbGEgcsOpZXjDqWN1dGlvbiBkZSBsJ2VmZmV0LCBxdWkgdmEgYXBwZWxlciBjbGVhclRpbWVvdXQuXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgZmlyZUV2ZW50LnByZXNzKHNjcmVlbi5nZXRCeVRleHQoJ1VwZGF0ZSBWb2NhYiBMZXZlbCAxJykpO1xuICAgIH0pO1xuXG4gICAgLy8gNy4gVsOpcmlmaWVyIHF1ZSBjbGVhclRpbWVvdXQgYSDDqXTDqSBhcHBlbMOpLlxuICAgIGV4cGVjdChjbGVhclRpbWVvdXRTcHkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGV4cGVjdC5hbnkoT2JqZWN0KSk7XG5cbiAgICAvLyA4LiBFeMOpY3V0ZXIgdG91cyBsZXMgdGltZXJzIHJlc3RhbnRzIGV0IHbDqXJpZmllciBsYSBzYXV2ZWdhcmRlLlxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGplc3QucnVuQWxsVGltZXJzKCk7XG4gICAgfSk7XG4gICAgZXhwZWN0KEFzeW5jU3RvcmFnZS5zZXRJdGVtKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG5cbiAgICAvLyA5LiBOZXR0b3llciBsZSBtb2NrLlxuICAgIGNsZWFyVGltZW91dFNweS5tb2NrUmVzdG9yZSgpO1xuICAgIGplc3QudXNlUmVhbFRpbWVycygpO1xufSk7XG5cbml0KCdzaG91bGQgY2FsY3VsYXRlIGxldmVsIHByb2dyZXNzIGNvcnJlY3RseSB3aGVuIHRoZXJlIGFyZSBubyBleGVyY2lzZXMgZm9yIGEgbGV2ZWwnLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGN1c3RvbUluaXRpYWxTdGF0ZSA9IHtcbiAgICAvLyBJbCBmYXV0IHF1ZSBsYSBzdHJ1Y3R1cmUgY29ycmVzcG9uZGUgw6AgYHByb2dyZXNzLmxldmVsc2BcbiAgICBsZXZlbHM6IHtcbiAgICAgICdsZXZlbC0xJzogeyBleGVyY2lzZXM6IFtdIH1cbiAgICB9XG4gIH07XG5cbiAgQXN5bmNTdG9yYWdlLmdldEl0ZW0ubW9ja1Jlc29sdmVkVmFsdWUoSlNPTi5zdHJpbmdpZnkoY3VzdG9tSW5pdGlhbFN0YXRlKSk7XG4gIFxuICByZW5kZXIoXG4gICAgPFByb2dyZXNzUHJvdmlkZXI+XG4gICAgICA8VGVzdENvbXBvbmVudCAvPlxuICAgIDwvUHJvZ3Jlc3NQcm92aWRlcj5cbiAgKTtcbiAgXG4gIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgamVzdC5ydW5BbGxUaW1lcnMoKTtcbiAgfSk7XG4gIFxuICBjb25zdCB7IGdldExldmVsUHJvZ3Jlc3MgfSA9IGF3YWl0IHdhaXRGb3IoKCkgPT4gc2NyZWVuLmdldEJ5VGVzdElkKCd0ZXN0LWNvbXBvbmVudCcpLnByb3BzKTtcbiAgZXhwZWN0KGdldExldmVsUHJvZ3Jlc3MoJ2xldmVsLTEnKSkudG9CZSgwKTtcbn0pO1xuXG5pdCgnc2hvdWxkIGNvcnJlY3RseSBjYWxjdWxhdGUgZ2xvYmFsIHByb2dyZXNzIHdpdGhvdXQgYSBib251cyBsZXZlbCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBjdXN0b21TdGF0ZVdpdGhvdXRCb251cyA9IHtcbiAgICAgICAgJ2xldmVsLTEnOiB7IGV4ZXJjaXNlczogW3sgcHJvZ3Jlc3M6IDUwIH1dIH0sXG4gICAgICAgICdsZXZlbC0yJzogeyBleGVyY2lzZXM6IFt7IHByb2dyZXNzOiAxMDAgfV0gfSxcbiAgICB9O1xuXG4gICAgLy8gMS4gT24gY29uZmlndXJlIGxlIG1vY2sgQXN5bmNTdG9yYWdlLlxuICAgIEFzeW5jU3RvcmFnZS5nZXRJdGVtLm1vY2tSZXNvbHZlZFZhbHVlKEpTT04uc3RyaW5naWZ5KGN1c3RvbVN0YXRlV2l0aG91dEJvbnVzKSk7XG5cbiAgICAvLyAyLiBPbiByZW5kIGxlIGNvbXBvc2FudCBzYW5zIGBhY3RgLlxuICAgIHJlbmRlcihcbiAgICAgICAgPFByb2dyZXNzUHJvdmlkZXI+XG4gICAgICAgICAgICA8VGVzdENvbXBvbmVudCAvPlxuICAgICAgICA8L1Byb2dyZXNzUHJvdmlkZXI+XG4gICAgKTtcblxuICAgIC8vIDMuIE9uIHV0aWxpc2UgYGFjdGAgcG91ciBsZXMgb3DDqXJhdGlvbnMgYXN5bmNocm9uZXMuXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgamVzdC5ydW5BbGxUaW1lcnMoKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHsgZ2V0R2xvYmFsUHJvZ3Jlc3MgfSA9IGF3YWl0IHdhaXRGb3IoKCkgPT4gc2NyZWVuLmdldEJ5VGVzdElkKCd0ZXN0LWNvbXBvbmVudCcpLnByb3BzKTtcbiAgICBleHBlY3QoZ2V0R2xvYmFsUHJvZ3Jlc3MoKSkudG9CZSg3NSk7XG59KTtcblxufSk7Il0sIm1hcHBpbmdzIjoiQUFRQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsMkNBQTJDLEVBQUU7RUFBQSxPQUFPO0lBQzVEQyxPQUFPLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDO01BQUEsT0FBTUMsT0FBTyxDQUFDQyxPQUFPLENBQUMsQ0FBQztJQUFBLEVBQUM7SUFDekNDLE9BQU8sRUFBRUosSUFBSSxDQUFDQyxFQUFFLENBQUM7TUFBQSxPQUFNQyxPQUFPLENBQUNDLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFBQSxFQUFDO0lBQzdDRSxVQUFVLEVBQUVMLElBQUksQ0FBQ0MsRUFBRSxDQUFDO01BQUEsT0FBTUMsT0FBTyxDQUFDQyxPQUFPLENBQUMsQ0FBQztJQUFBO0VBQzdDLENBQUM7QUFBQSxDQUFDLENBQUM7QUFBQyxJQUFBRyxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsa0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQVpKLElBQUFFLE1BQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLFlBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLGFBQUEsR0FBQUosT0FBQTtBQUNBLElBQUFLLGdCQUFBLEdBQUFMLE9BQUE7QUFDQSxJQUFBTSxhQUFBLEdBQUFQLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBTyxVQUFBLEdBQUFQLE9BQUE7QUFBeUQsSUFBQVEsV0FBQSxHQUFBUixPQUFBO0FBQUEsU0FBQVYsWUFBQTtFQUFBLElBQUFtQixRQUFBLEdBQUFULE9BQUE7SUFBQVAsSUFBQSxHQUFBZ0IsUUFBQSxDQUFBaEIs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