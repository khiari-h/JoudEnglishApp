31dc1de79b3ec1bcde946c3a67c2a04c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ButtonSpinner = _interopRequireDefault(require("../../../../src/components/ui/Button/ButtonSpinner"));
var ReactNative = _interopRequireWildcard(require("react-native"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var mockActivityIndicator = jest.fn(function () {
  return null;
});
jest.spyOn(ReactNative, 'ActivityIndicator', 'get').mockReturnValue(mockActivityIndicator);
describe('ButtonSpinner', function () {
  it('devrait rendre un ActivityIndicator avec les props size et color', function () {
    var mockSize = 'large';
    var mockColor = '#FF0000';
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ButtonSpinner.default, {
      size: mockSize,
      color: mockColor
    }));
    expect(mockActivityIndicator).toHaveBeenCalledWith(expect.objectContaining({
      size: mockSize,
      color: mockColor
    }), {});
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9CdXR0b25TcGlubmVyIiwiUmVhY3ROYXRpdmUiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9qc3hSdW50aW1lIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsIl90IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJtb2NrQWN0aXZpdHlJbmRpY2F0b3IiLCJqZXN0IiwiZm4iLCJzcHlPbiIsIm1vY2tSZXR1cm5WYWx1ZSIsImRlc2NyaWJlIiwiaXQiLCJtb2NrU2l6ZSIsIm1vY2tDb2xvciIsInJlbmRlciIsImpzeCIsInNpemUiLCJjb2xvciIsImV4cGVjdCIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwib2JqZWN0Q29udGFpbmluZyJdLCJzb3VyY2VzIjpbIkJ1dHRvblNwaW5uZXIudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCBCdXR0b25TcGlubmVyIGZyb20gJy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3VpL0J1dHRvbi9CdXR0b25TcGlubmVyJztcclxuaW1wb3J0ICogYXMgUmVhY3ROYXRpdmUgZnJvbSAncmVhY3QtbmF0aXZlJztcclxuXHJcbi8vIENyZWF0ZSBhIHNweWFibGUgbW9jayBmb3IgQWN0aXZpdHlJbmRpY2F0b3JcclxuY29uc3QgbW9ja0FjdGl2aXR5SW5kaWNhdG9yID0gamVzdC5mbigoKSA9PiBudWxsKTtcclxuamVzdC5zcHlPbihSZWFjdE5hdGl2ZSwgJ0FjdGl2aXR5SW5kaWNhdG9yJywgJ2dldCcpLm1vY2tSZXR1cm5WYWx1ZShtb2NrQWN0aXZpdHlJbmRpY2F0b3IpO1xyXG5cclxuZGVzY3JpYmUoJ0J1dHRvblNwaW5uZXInLCAoKSA9PiB7XHJcbiAgaXQoJ2RldnJhaXQgcmVuZHJlIHVuIEFjdGl2aXR5SW5kaWNhdG9yIGF2ZWMgbGVzIHByb3BzIHNpemUgZXQgY29sb3InLCAoKSA9PiB7XHJcbiAgICBjb25zdCBtb2NrU2l6ZSA9ICdsYXJnZSc7XHJcbiAgICBjb25zdCBtb2NrQ29sb3IgPSAnI0ZGMDAwMCc7XHJcbiAgICByZW5kZXIoPEJ1dHRvblNwaW5uZXIgc2l6ZT17bW9ja1NpemV9IGNvbG9yPXttb2NrQ29sb3J9IC8+KTtcclxuICAgIFxyXG4gICAgLy8gV2UgZ2V0IHRoZSBzcHlhYmxlIG1vY2sgYW5kIGFzc2VydCBvbiBpdHMgY2FsbHNcclxuICAgIGV4cGVjdChtb2NrQWN0aXZpdHlJbmRpY2F0b3IpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxyXG4gICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XHJcbiAgICAgICAgc2l6ZTogbW9ja1NpemUsXHJcbiAgICAgICAgY29sb3I6IG1vY2tDb2xvcixcclxuICAgICAgfSksXHJcbiAgICAgIHt9XHJcbiAgICApO1xyXG4gIH0pO1xyXG59KTsiXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxjQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxXQUFBLEdBQUFDLHVCQUFBLENBQUFKLE9BQUE7QUFBNEMsSUFBQUssV0FBQSxHQUFBTCxPQUFBO0FBQUEsU0FBQUksd0JBQUFFLENBQUEsRUFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFKLHVCQUFBLFlBQUFBLHdCQUFBRSxDQUFBLEVBQUFDLENBQUEsU0FBQUEsQ0FBQSxJQUFBRCxDQUFBLElBQUFBLENBQUEsQ0FBQUssVUFBQSxTQUFBTCxDQUFBLE1BQUFNLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLEtBQUFDLFNBQUEsUUFBQUMsT0FBQSxFQUFBVixDQUFBLGlCQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFNBQUFRLENBQUEsTUFBQUYsQ0FBQSxHQUFBTCxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxRQUFBRyxDQUFBLENBQUFLLEdBQUEsQ0FBQVgsQ0FBQSxVQUFBTSxDQUFBLENBQUFNLEdBQUEsQ0FBQVosQ0FBQSxHQUFBTSxDQUFBLENBQUFPLEdBQUEsQ0FBQWIsQ0FBQSxFQUFBUSxDQUFBLGNBQUFNLEVBQUEsSUFBQWQsQ0FBQSxnQkFBQWMsRUFBQSxPQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWhCLENBQUEsRUFBQWMsRUFBQSxPQUFBUCxDQUFBLElBQUFELENBQUEsR0FBQVcsTUFBQSxDQUFBQyxjQUFBLEtBQUFELE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQW5CLENBQUEsRUFBQWMsRUFBQSxPQUFBUCxDQUFBLENBQUFLLEdBQUEsSUFBQUwsQ0FBQSxDQUFBTSxHQUFBLElBQUFQLENBQUEsQ0FBQUUsQ0FBQSxFQUFBTSxFQUFBLEVBQUFQLENBQUEsSUFBQUMsQ0FBQSxDQUFBTSxFQUFBLElBQUFkLENBQUEsQ0FBQWMsRUFBQSxXQUFBTixDQUFBLEtBQUFSLENBQUEsRUFBQUMsQ0FBQTtBQUc1QyxJQUFNbUIscUJBQXFCLEdBQUdDLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0VBQUEsT0FBTSxJQUFJO0FBQUEsRUFBQztBQUNqREQsSUFBSSxDQUFDRSxLQUFLLENBQUMxQixXQUFXLEVBQUUsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLENBQUMyQixlQUFlLENBQUNKLHFCQUFxQixDQUFDO0FBRTFGSyxRQUFRLENBQUMsZUFBZSxFQUFFLFlBQU07RUFDOUJDLEVBQUUsQ0FBQyxrRUFBa0UsRUFBRSxZQUFNO0lBQzNFLElBQU1DLFFBQVEsR0FBRyxPQUFPO0lBQ3hCLElBQU1DLFNBQVMsR0FBRyxTQUFTO0lBQzNCLElBQUFDLG1CQUFNLEVBQUMsSUFBQTlCLFdBQUEsQ0FBQStCLEdBQUEsRUFBQ2xDLGNBQUEsQ0FBQWMsT0FBYTtNQUFDcUIsSUFBSSxFQUFFSixRQUFTO01BQUNLLEtBQUssRUFBRUo7SUFBVSxDQUFFLENBQUMsQ0FBQztJQUczREssTUFBTSxDQUFDYixxQkFBcUIsQ0FBQyxDQUFDYyxvQkFBb0IsQ0FDaERELE1BQU0sQ0FBQ0UsZ0JBQWdCLENBQUM7TUFDdEJKLElBQUksRUFBRUosUUFBUTtNQUNkSyxLQUFLLEVBQUVKO0lBQ1QsQ0FBQyxDQUFDLEVBQ0YsQ0FBQyxDQUNILENBQUM7RUFDSCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=