81118d79b5c24b3dd1c3b5f8d65dc3ce
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateErrorCorrectionExercise = exports.validateErrorCorrectionData = exports.getRecommendedExercises = exports.getRandomErrorCorrectionExercise = exports.getModeInfo = exports.getLevelColor = exports.getLevelCharacteristics = exports.getGlobalErrorCorrectionStats = exports.getExercisesByType = exports.getExercisesByCategoryAndType = exports.getExercisesByCategory = exports.getErrorsData = exports.getErrorCorrectionStats = exports.getAvailableLevels = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _A = _interopRequireDefault(require("../../data/errorCorrection/A1"));
var _A2 = _interopRequireDefault(require("../../data/errorCorrection/A2"));
var _B = _interopRequireDefault(require("../../data/errorCorrection/B1"));
var _B2 = _interopRequireDefault(require("../../data/errorCorrection/B2"));
var _C = _interopRequireDefault(require("../../data/errorCorrection/C1"));
var _C2 = _interopRequireDefault(require("../../data/errorCorrection/C2"));
var getErrorsData = exports.getErrorsData = function getErrorsData(level) {
  var dataMap = {
    A1: _A.default,
    A2: _A2.default,
    B1: _B.default,
    B2: _B2.default,
    C1: _C.default,
    C2: _C2.default
  };
  return dataMap[level] || _A.default;
};
var getLevelColor = exports.getLevelColor = function getLevelColor(level) {
  var colors = {
    A1: "#3b82f6",
    A2: "#8b5cf6",
    B1: "#10b981",
    B2: "#f59e0b",
    C1: "#ef4444",
    C2: "#6366f1"
  };
  return colors[level] || "#4361EE";
};
var getLevelCharacteristics = exports.getLevelCharacteristics = function getLevelCharacteristics(level) {
  var characteristics = {
    A1: {
      name: "Débutant",
      textLength: "1-2 phrases (50-100 caractères)",
      errorCount: "1-2 erreurs par exercice",
      errorTypes: ["Basic grammar", "Simple vocabulary", "Word order"],
      difficulty: "Très facile",
      focus: "Erreurs évidentes, correction directe"
    },
    A2: {
      name: "Élémentaire",
      textLength: "2-3 phrases (80-150 caractères)",
      errorCount: "2-3 erreurs par exercice",
      errorTypes: ["Intermediate grammar", "Tense usage", "Prepositions"],
      difficulty: "Facile",
      focus: "Erreurs communes, inférences simples"
    },
    B1: {
      name: "Intermédiaire",
      textLength: "3-4 phrases (120-200 caractères)",
      errorCount: "3-4 erreurs par exercice",
      errorTypes: ["Complex tenses", "Passive voice", "Reported speech"],
      difficulty: "Modéré",
      focus: "Erreurs subtiles, analyse requise"
    },
    B2: {
      name: "Intermédiaire avancé",
      textLength: "4-5 phrases (150-250 caractères)",
      errorCount: "4-5 erreurs par exercice",
      errorTypes: ["Advanced conditionals", "Register", "Discourse markers"],
      difficulty: "Difficile",
      focus: "Nuances grammaticales et stylistiques"
    },
    C1: {
      name: "Autonome",
      textLength: "5-6 phrases (200-300 caractères)",
      errorCount: "5-6 erreurs par exercice",
      errorTypes: ["Sophisticated structures", "Cultural references", "Stylistic nuances"],
      difficulty: "Très difficile",
      focus: "Erreurs sophistiquées, analyse approfondie"
    },
    C2: {
      name: "Maîtrise",
      textLength: "6-8 phrases (250-400 caractères)",
      errorCount: "6-8 erreurs par exercice",
      errorTypes: ["Literary language", "Archaic forms", "Creative expression"],
      difficulty: "Expert",
      focus: "Subtilités linguistiques maximales"
    }
  };
  return characteristics[level] || characteristics.A1;
};
var getErrorCorrectionStats = exports.getErrorCorrectionStats = function getErrorCorrectionStats(level) {
  var stats = {
    exerciseCount: 0,
    totalQuestions: 0,
    categoryCount: 0,
    typeDistribution: {
      full: 0,
      identify: 0,
      multiple_choice: 0
    },
    categories: [],
    averageTextLength: 0,
    totalErrorPositions: 0
  };
  try {
    var data = getErrorsData(level);
    if (data != null && data.exercises) {
      stats.exerciseCount = data.exercises.length;
      stats.totalQuestions = data.exercises.length;
      stats.categoryCount = data.categories ? data.categories.length : 0;
      if (data.statistics) {
        stats.typeDistribution = {
          full: data.statistics.full || 0,
          identify: data.statistics.identify || 0,
          multiple_choice: data.statistics.multiple_choice || 0
        };
      }
      if (data.categories) {
        stats.categories = data.categories.map(function (cat) {
          return {
            id: cat.id,
            name: cat.name,
            count: cat.exerciseCount || 0,
            difficulty: cat.difficulty || "Unknown"
          };
        });
      }
      var textLengths = data.exercises.map(function (ex) {
        return ex.text ? ex.text.length : 0;
      });
      stats.averageTextLength = textLengths.length > 0 ? Math.round(textLengths.reduce(function (a, b) {
        return a + b;
      }, 0) / textLengths.length) : 0;
      stats.totalErrorPositions = data.exercises.filter(function (ex) {
        return ex.errorPositions;
      }).reduce(function (total, ex) {
        return total + ex.errorPositions.length;
      }, 0);
    }
  } catch (error) {}
  return stats;
};
var getGlobalErrorCorrectionStats = exports.getGlobalErrorCorrectionStats = function getGlobalErrorCorrectionStats() {
  var levels = ["A1", "A2", "B1", "B2", "C1", "C2"];
  var globalStats = {
    totalExercises: 0,
    totalQuestions: 0,
    totalCategories: 0,
    byLevel: {},
    byType: {
      full: 0,
      identify: 0,
      multiple_choice: 0
    },
    implementedLevels: 6,
    progression: []
  };
  levels.forEach(function (level) {
    var levelStats = getErrorCorrectionStats(level);
    globalStats.byLevel[level] = levelStats;
    if (levelStats.exerciseCount > 0) {
      globalStats.totalExercises += levelStats.exerciseCount;
      globalStats.totalQuestions += levelStats.totalQuestions;
      globalStats.totalCategories += levelStats.categoryCount;
      globalStats.byType.full += levelStats.typeDistribution.full;
      globalStats.byType.identify += levelStats.typeDistribution.identify;
      globalStats.byType.multiple_choice += levelStats.typeDistribution.multiple_choice;
      globalStats.progression.push({
        level: level,
        exercises: levelStats.exerciseCount,
        difficulty: getLevelCharacteristics(level).difficulty
      });
    }
  });
  return globalStats;
};
var getExercisesByCategory = exports.getExercisesByCategory = function getExercisesByCategory(level, categoryId) {
  var _data$exercises;
  var data = getErrorsData(level);
  if (data != null && data.getExercisesByCategory) {
    return data.getExercisesByCategory(categoryId);
  }
  return (data == null || (_data$exercises = data.exercises) == null ? void 0 : _data$exercises.filter(function (ex) {
    return ex.categoryId === categoryId;
  })) || [];
};
var getExercisesByType = exports.getExercisesByType = function getExercisesByType(level, type) {
  var _data$exercises2;
  var data = getErrorsData(level);
  if (data != null && data.getExercisesByType) {
    return data.getExercisesByType(type);
  }
  return (data == null || (_data$exercises2 = data.exercises) == null ? void 0 : _data$exercises2.filter(function (ex) {
    return ex.type === type;
  })) || [];
};
var getExercisesByCategoryAndType = exports.getExercisesByCategoryAndType = function getExercisesByCategoryAndType(level, categoryId, type) {
  var _data$exercises3;
  var data = getErrorsData(level);
  if (data != null && data.getExercisesByCategoryAndType) {
    return data.getExercisesByCategoryAndType(categoryId, type);
  }
  return (data == null || (_data$exercises3 = data.exercises) == null ? void 0 : _data$exercises3.filter(function (ex) {
    return ex.categoryId === categoryId && ex.type === type;
  })) || [];
};
var validateErrorCorrectionExercise = exports.validateErrorCorrectionExercise = function validateErrorCorrectionExercise(exercise) {
  if (!exercise || typeof exercise !== "object") {
    return false;
  }
  var requiredFields = ["categoryId", "type", "text", "correctedText", "hint", "explanation"];
  for (var field of requiredFields) {
    if (!exercise[field]) {
      return false;
    }
  }
  var validTypes = ["full", "identify", "multiple_choice"];
  if (!validTypes.includes(exercise.type)) {
    return false;
  }
  if (exercise.type === "multiple_choice") {
    if (!exercise.choices || !Array.isArray(exercise.choices) || exercise.choices.length < 2) {
      return false;
    }
    if (typeof exercise.correctChoiceIndex !== "number" || exercise.correctChoiceIndex < 0 || exercise.correctChoiceIndex >= exercise.choices.length) {
      return false;
    }
  } else {
    if (!exercise.errorPositions || !Array.isArray(exercise.errorPositions)) {
      return false;
    }
  }
  return true;
};
var validateErrorCorrectionData = exports.validateErrorCorrectionData = function validateErrorCorrectionData(level) {
  var data = getErrorsData(level);
  if (!data || !data.exercises) {
    return {
      valid: false,
      error: "No error correction data found",
      exerciseCount: 0
    };
  }
  var results = {
    valid: true,
    exerciseCount: data.exercises.length,
    invalidExercises: [],
    errors: [],
    categoryCount: data.categories ? data.categories.length : 0,
    typeDistribution: {
      full: 0,
      identify: 0,
      multiple_choice: 0
    }
  };
  data.exercises.forEach(function (exercise, index) {
    if (!validateErrorCorrectionExercise(exercise)) {
      results.valid = false;
      results.invalidExercises.push(index);
      results.errors.push(`Exercise ${index + 1} (category ${exercise.categoryId || "unknown"}) is invalid`);
    } else {
      if (Object.prototype.hasOwnProperty.call(results.typeDistribution, exercise.type)) {
        results.typeDistribution[exercise.type]++;
      }
    }
  });
  if (data.validateStructure && !data.validateStructure()) {
    results.valid = false;
    results.errors.push("Level structure validation failed");
  }
  return results;
};
var getRandomErrorCorrectionExercise = exports.getRandomErrorCorrectionExercise = function getRandomErrorCorrectionExercise(level) {
  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var categoryId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var data = getErrorsData(level);
  if (!data || !data.exercises || data.exercises.length === 0) {
    return null;
  }
  var filteredExercises = data.exercises;
  if (type) {
    filteredExercises = filteredExercises.filter(function (ex) {
      return ex.type === type;
    });
  }
  if (categoryId) {
    filteredExercises = filteredExercises.filter(function (ex) {
      return ex.categoryId === categoryId;
    });
  }
  if (filteredExercises.length === 0) {
    return null;
  }
  var randomIndex = Math.floor(Math.random() * filteredExercises.length);
  return Object.assign({}, filteredExercises[randomIndex], {
    index: randomIndex,
    totalCount: filteredExercises.length,
    level: level
  });
};
var getModeInfo = exports.getModeInfo = function getModeInfo(mode) {
  var modes = {
    full: {
      name: "Full Correction",
      description: "Rewrite the entire text correcting all errors",
      difficulty: "Hard",
      icon: "✏️",
      color: "#ef4444"
    },
    identify: {
      name: "Identify Errors",
      description: "Click on words that contain errors",
      difficulty: "Medium",
      icon: "🔍",
      color: "#f59e0b"
    },
    multiple_choice: {
      name: "Multiple Choice",
      description: "Choose the correct option from multiple choices",
      difficulty: "Easy",
      icon: "✅",
      color: "#10b981"
    }
  };
  return modes[mode] || modes.full;
};
var getRecommendedExercises = exports.getRecommendedExercises = function getRecommendedExercises(level) {
  var completedExercises = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var performance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var data = getErrorsData(level);
  if (!data || !data.exercises) {
    return [];
  }
  var availableExercises = data.exercises.filter(function (ex) {
    return !completedExercises.includes(`${ex.categoryId}_${ex.type}`);
  });
  if (!performance.weakCategories) {
    return availableExercises.slice(0, 5);
  }
  var recommendedExercises = [];
  performance.weakCategories.forEach(function (categoryId) {
    var categoryExercises = availableExercises.filter(function (ex) {
      return ex.categoryId === categoryId;
    });
    recommendedExercises.push.apply(recommendedExercises, (0, _toConsumableArray2.default)(categoryExercises.slice(0, 2)));
  });
  return recommendedExercises.slice(0, 5);
};
var getAvailableLevels = exports.getAvailableLevels = function getAvailableLevels() {
  return [{
    level: "A1",
    name: "Débutant",
    exercises: getErrorCorrectionStats("A1").exerciseCount
  }, {
    level: "A2",
    name: "Élémentaire",
    exercises: getErrorCorrectionStats("A2").exerciseCount
  }, {
    level: "B1",
    name: "Intermédiaire",
    exercises: getErrorCorrectionStats("B1").exerciseCount
  }, {
    level: "B2",
    name: "Intermédiaire avancé",
    exercises: getErrorCorrectionStats("B2").exerciseCount
  }, {
    level: "C1",
    name: "Autonome",
    exercises: getErrorCorrectionStats("C1").exerciseCount
  }, {
    level: "C2",
    name: "Maîtrise",
    exercises: getErrorCorrectionStats("C2").exerciseCount
  }];
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,