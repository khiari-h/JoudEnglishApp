0f6f23a0e8504a9a6790bbfb00ceea97
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDashboardLevel = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _constants = require("../../../utils/constants");
var ACTIVE_LEVEL_KEY = "user_active_level";
var mapOldToNewLevel = function mapOldToNewLevel(level) {
  var mapping = {
    A1: "1",
    A2: "2",
    B1: "3",
    B2: "4",
    C1: "5",
    C2: "6"
  };
  return mapping[level] || level;
};
var useDashboardLevel = exports.useDashboardLevel = function useDashboardLevel(_ref) {
  var _LANGUAGE_LEVELS$curr;
  var progressData = _ref.progress;
  var _useState = (0, _react.useState)("1"),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    currentLevel = _useState2[0],
    setCurrentLevel = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isLoaded = _useState4[0],
    setIsLoaded = _useState4[1];
  var _useState5 = (0, _react.useState)(null),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    levelFoundInStorage = _useState6[0],
    setLevelFoundInStorage = _useState6[1];
  (0, _react.useEffect)(function () {
    var loadFromStorage = function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* () {
        try {
          var savedLevel = yield _asyncStorage.default.getItem(ACTIVE_LEVEL_KEY);
          if (savedLevel && _constants.LANGUAGE_LEVELS[savedLevel]) {
            setCurrentLevel(mapOldToNewLevel(savedLevel));
            setLevelFoundInStorage(true);
          } else {
            setLevelFoundInStorage(false);
          }
        } catch (error) {
          console.error('Erreur chargement niveau actif:', error);
          setLevelFoundInStorage(false);
        } finally {
          setIsLoaded(true);
        }
      });
      return function loadFromStorage() {
        return _ref2.apply(this, arguments);
      };
    }();
    loadFromStorage();
  }, []);
  (0, _react.useEffect)(function () {
    if (isLoaded && !levelFoundInStorage) {
      var levelFromProgress = progressData == null ? void 0 : progressData.currentLevel;
      if (levelFromProgress) {
        var mappedLevel = mapOldToNewLevel(levelFromProgress);
        if (_constants.LANGUAGE_LEVELS[mappedLevel]) {
          setCurrentLevel(mappedLevel);
        }
      }
    }
  }, [isLoaded, levelFoundInStorage, progressData]);
  var handleChangeActiveLevel = (0, _react.useCallback)(function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (newLevel) {
      if (!_constants.LANGUAGE_LEVELS[newLevel]) return;
      setCurrentLevel(newLevel);
      try {
        yield _asyncStorage.default.setItem(ACTIVE_LEVEL_KEY, newLevel);
        setLevelFoundInStorage(true);
      } catch (error) {
        console.error('Erreur sauvegarde niveau actif:', error);
      }
    });
    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }(), []);
  var levelColor = ((_LANGUAGE_LEVELS$curr = _constants.LANGUAGE_LEVELS[currentLevel]) == null ? void 0 : _LANGUAGE_LEVELS$curr.color) || "#3B82F6";
  return {
    currentLevel: currentLevel,
    handleChangeActiveLevel: handleChangeActiveLevel,
    levelColor: levelColor,
    isLoaded: isLoaded
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,