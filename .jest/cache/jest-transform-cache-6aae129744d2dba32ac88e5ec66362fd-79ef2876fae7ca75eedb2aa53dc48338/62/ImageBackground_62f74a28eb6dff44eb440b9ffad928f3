2e96cb733b931a8cb8c7b8acfac985a6
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _View = _interopRequireDefault(require("../Components/View/View"));
var _flattenStyle = _interopRequireDefault(require("../StyleSheet/flattenStyle"));
var _StyleSheet = _interopRequireDefault(require("../StyleSheet/StyleSheet"));
var _Image = _interopRequireDefault(require("./Image"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "style", "imageStyle", "imageRef", "importantForAccessibility"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var ImageBackground = function (_React$Component) {
  function ImageBackground() {
    var _this;
    (0, _classCallCheck2.default)(this, ImageBackground);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, ImageBackground, [].concat(args));
    _this._viewRef = null;
    _this._captureRef = function (ref) {
      _this._viewRef = ref;
    };
    return _this;
  }
  (0, _inherits2.default)(ImageBackground, _React$Component);
  return (0, _createClass2.default)(ImageBackground, [{
    key: "setNativeProps",
    value: function setNativeProps(props) {
      var viewRef = this._viewRef;
      if (viewRef) {
        viewRef.setNativeProps(props);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        children = _this$props.children,
        style = _this$props.style,
        imageStyle = _this$props.imageStyle,
        imageRef = _this$props.imageRef,
        importantForAccessibility = _this$props.importantForAccessibility,
        props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
      var flattenedStyle = (0, _flattenStyle.default)(style);
      return (0, _jsxRuntime.jsxs)(_View.default, {
        accessibilityIgnoresInvertColors: true,
        importantForAccessibility: importantForAccessibility,
        style: style,
        ref: this._captureRef,
        children: [(0, _jsxRuntime.jsx)(_Image.default, Object.assign({}, props, {
          importantForAccessibility: importantForAccessibility,
          style: [_StyleSheet.default.absoluteFill, {
            width: flattenedStyle == null ? void 0 : flattenedStyle.width,
            height: flattenedStyle == null ? void 0 : flattenedStyle.height
          }, imageStyle],
          ref: imageRef
        })), children]
      });
    }
  }]);
}(React.Component);
module.exports = ImageBackground;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllczIiLCJfY2xhc3NDYWxsQ2hlY2syIiwiX2NyZWF0ZUNsYXNzMiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsIl9nZXRQcm90b3R5cGVPZjIiLCJfaW5oZXJpdHMyIiwiX1ZpZXciLCJfZmxhdHRlblN0eWxlIiwiX1N0eWxlU2hlZXQiLCJfSW1hZ2UiLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2pzeFJ1bnRpbWUiLCJfZXhjbHVkZWQiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9jYWxsU3VwZXIiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImNvbnN0cnVjdG9yIiwiYXBwbHkiLCJCb29sZWFuIiwicHJvdG90eXBlIiwidmFsdWVPZiIsIkltYWdlQmFja2dyb3VuZCIsIl9SZWFjdCRDb21wb25lbnQiLCJfdGhpcyIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiY29uY2F0IiwiX3ZpZXdSZWYiLCJfY2FwdHVyZVJlZiIsInJlZiIsImtleSIsInZhbHVlIiwic2V0TmF0aXZlUHJvcHMiLCJwcm9wcyIsInZpZXdSZWYiLCJyZW5kZXIiLCJfdGhpcyRwcm9wcyIsImNoaWxkcmVuIiwic3R5bGUiLCJpbWFnZVN0eWxlIiwiaW1hZ2VSZWYiLCJpbXBvcnRhbnRGb3JBY2Nlc3NpYmlsaXR5IiwiZmxhdHRlbmVkU3R5bGUiLCJmbGF0dGVuU3R5bGUiLCJqc3hzIiwiYWNjZXNzaWJpbGl0eUlnbm9yZXNJbnZlcnRDb2xvcnMiLCJqc3giLCJhc3NpZ24iLCJTdHlsZVNoZWV0IiwiYWJzb2x1dGVGaWxsIiwid2lkdGgiLCJoZWlnaHQiLCJDb21wb25lbnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiSW1hZ2VCYWNrZ3JvdW5kLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0eXBlIHtWaWV3UHJvcHN9IGZyb20gJy4uL0NvbXBvbmVudHMvVmlldy9WaWV3UHJvcFR5cGVzJztcbmltcG9ydCB0eXBlIHtIb3N0Q29tcG9uZW50fSBmcm9tICcuLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZVR5cGVzJztcbmltcG9ydCB0eXBlIHtJbWFnZUJhY2tncm91bmRQcm9wc30gZnJvbSAnLi9JbWFnZVByb3BzJztcblxuaW1wb3J0IFZpZXcgZnJvbSAnLi4vQ29tcG9uZW50cy9WaWV3L1ZpZXcnO1xuaW1wb3J0IGZsYXR0ZW5TdHlsZSBmcm9tICcuLi9TdHlsZVNoZWV0L2ZsYXR0ZW5TdHlsZSc7XG5pbXBvcnQgU3R5bGVTaGVldCBmcm9tICcuLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnO1xuaW1wb3J0IEltYWdlIGZyb20gJy4vSW1hZ2UnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIFZlcnkgc2ltcGxlIGRyb3AtaW4gcmVwbGFjZW1lbnQgZm9yIDxJbWFnZT4gd2hpY2ggc3VwcG9ydHMgbmVzdGluZyB2aWV3cy5cbiAqXG4gKiBgYGBSZWFjdE5hdGl2ZVdlYlBsYXllclxuICogaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbiAqIGltcG9ydCB7IEFwcFJlZ2lzdHJ5LCBWaWV3LCBJbWFnZUJhY2tncm91bmQsIFRleHQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuICpcbiAqIGNsYXNzIERpc3BsYXlBbkltYWdlQmFja2dyb3VuZCBleHRlbmRzIENvbXBvbmVudCB7XG4gKiAgIHJlbmRlcigpIHtcbiAqICAgICByZXR1cm4gKFxuICogICAgICAgPEltYWdlQmFja2dyb3VuZFxuICogICAgICAgICBzdHlsZT17e3dpZHRoOiA1MCwgaGVpZ2h0OiA1MH19XG4gKiAgICAgICAgIHNvdXJjZT17e3VyaTogJ2h0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2ltZy9vcGVuZ3JhcGgucG5nJ319XG4gKiAgICAgICA+XG4gKiAgICAgICAgIDxUZXh0PlJlYWN0PC9UZXh0PlxuICogICAgICAgPC9JbWFnZUJhY2tncm91bmQ+XG4gKiAgICAgKTtcbiAqICAgfVxuICogfVxuICpcbiAqIC8vIEFwcCByZWdpc3RyYXRpb24gYW5kIHJlbmRlcmluZ1xuICogQXBwUmVnaXN0cnkucmVnaXN0ZXJDb21wb25lbnQoJ0Rpc3BsYXlBbkltYWdlQmFja2dyb3VuZCcsICgpID0+IERpc3BsYXlBbkltYWdlQmFja2dyb3VuZCk7XG4gKiBgYGBcbiAqL1xuY2xhc3MgSW1hZ2VCYWNrZ3JvdW5kIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PEltYWdlQmFja2dyb3VuZFByb3BzPiB7XG4gIHNldE5hdGl2ZVByb3BzKHByb3BzOiB7Li4ufSkge1xuICAgIC8vIFdvcmstYXJvdW5kIGZsb3dcbiAgICBjb25zdCB2aWV3UmVmID0gdGhpcy5fdmlld1JlZjtcbiAgICBpZiAodmlld1JlZikge1xuICAgICAgdmlld1JlZi5zZXROYXRpdmVQcm9wcyhwcm9wcyk7XG4gICAgfVxuICB9XG5cbiAgX3ZpZXdSZWY6ID9SZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBWaWV3PiA9IG51bGw7XG5cbiAgX2NhcHR1cmVSZWYgPSAocmVmOiBudWxsIHwgUmVhY3QuRWxlbWVudFJlZjxIb3N0Q29tcG9uZW50PFZpZXdQcm9wcz4+KSA9PiB7XG4gICAgdGhpcy5fdmlld1JlZiA9IHJlZjtcbiAgfTtcblxuICByZW5kZXIoKTogUmVhY3QuTm9kZSB7XG4gICAgY29uc3Qge1xuICAgICAgY2hpbGRyZW4sXG4gICAgICBzdHlsZSxcbiAgICAgIGltYWdlU3R5bGUsXG4gICAgICBpbWFnZVJlZixcbiAgICAgIGltcG9ydGFudEZvckFjY2Vzc2liaWxpdHksXG4gICAgICAuLi5wcm9wc1xuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgLy8gJEZsb3dGaXhNZVt1bmRlcmNvbnN0cmFpbmVkLWltcGxpY2l0LWluc3RhbnRpYXRpb25dXG4gICAgY29uc3QgZmxhdHRlbmVkU3R5bGUgPSBmbGF0dGVuU3R5bGUoc3R5bGUpO1xuICAgIHJldHVybiAoXG4gICAgICA8Vmlld1xuICAgICAgICBhY2Nlc3NpYmlsaXR5SWdub3Jlc0ludmVydENvbG9ycz17dHJ1ZX1cbiAgICAgICAgaW1wb3J0YW50Rm9yQWNjZXNzaWJpbGl0eT17aW1wb3J0YW50Rm9yQWNjZXNzaWJpbGl0eX1cbiAgICAgICAgc3R5bGU9e3N0eWxlfVxuICAgICAgICByZWY9e3RoaXMuX2NhcHR1cmVSZWZ9PlxuICAgICAgICB7LyogJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdXNlXSAqL31cbiAgICAgICAgPEltYWdlXG4gICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAgIGltcG9ydGFudEZvckFjY2Vzc2liaWxpdHk9e2ltcG9ydGFudEZvckFjY2Vzc2liaWxpdHl9XG4gICAgICAgICAgc3R5bGU9e1tcbiAgICAgICAgICAgIFN0eWxlU2hlZXQuYWJzb2x1dGVGaWxsLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAvLyBUZW1wb3JhcnkgV29ya2Fyb3VuZDpcbiAgICAgICAgICAgICAgLy8gQ3VycmVudCAoaW1wZXJmZWN0IHlldCkgaW1wbGVtZW50YXRpb24gb2YgPEltYWdlPiBvdmVyd3JpdGVzIHdpZHRoIGFuZCBoZWlnaHQgc3R5bGVzXG4gICAgICAgICAgICAgIC8vICh3aGljaCBpcyBub3QgcXVpdGUgY29ycmVjdCksIGFuZCB0aGVzZSBzdHlsZXMgY29uZmxpY3Qgd2l0aCBleHBsaWNpdGx5IHNldCBzdHlsZXNcbiAgICAgICAgICAgICAgLy8gb2YgPEltYWdlQmFja2dyb3VuZD4gYW5kIHdpdGggb3VyIGludGVybmFsIGxheW91dCBtb2RlbCBoZXJlLlxuICAgICAgICAgICAgICAvLyBTbywgd2UgaGF2ZSB0byBwcm94eS9yZWFwcGx5IHRoZXNlIHN0eWxlcyBleHBsaWNpdGx5IGZvciBhY3R1YWwgPEltYWdlPiBjb21wb25lbnQuXG4gICAgICAgICAgICAgIC8vIFRoaXMgd29ya2Fyb3VuZCBzaG91bGQgYmUgcmVtb3ZlZCBhZnRlciBpbXBsZW1lbnRpbmcgcHJvcGVyIHN1cHBvcnQgb2ZcbiAgICAgICAgICAgICAgLy8gaW50cmluc2ljIGNvbnRlbnQgc2l6ZSBvZiB0aGUgPEltYWdlPi5cbiAgICAgICAgICAgICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICAgICAgICAgIHdpZHRoOiBmbGF0dGVuZWRTdHlsZT8ud2lkdGgsXG4gICAgICAgICAgICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgICAgICAgICAgICBoZWlnaHQ6IGZsYXR0ZW5lZFN0eWxlPy5oZWlnaHQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW1hZ2VTdHlsZSxcbiAgICAgICAgICBdfVxuICAgICAgICAgIHJlZj17aW1hZ2VSZWZ9XG4gICAgICAgIC8+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvVmlldz5cbiAgICApO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gSW1hZ2VCYWNrZ3Jv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