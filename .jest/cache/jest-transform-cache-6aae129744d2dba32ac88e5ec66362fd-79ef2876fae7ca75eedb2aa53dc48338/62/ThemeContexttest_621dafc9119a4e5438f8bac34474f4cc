d22681f12636ab96e22207e182af169c
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  return Object.assign({}, RN, {
    useColorScheme: jest.fn(function () {
      return 'light';
    })
  });
});
_getJestObj().mock('../../src/utils/storageUtils', function () {
  return {
    storeData: jest.fn(function () {
      return Promise.resolve();
    }),
    getData: jest.fn(function () {
      return Promise.resolve(null);
    })
  };
});
_getJestObj().mock('../../src/utils/constants', function () {
  return {
    COLORS: {
      background: '#FFFFFF',
      surface: '#F0F0F0',
      primary: '#007AFF',
      text: '#000000',
      textSecondary: '#666666',
      border: '#CCCCCC',
      divider: '#E0E0E0',
      disabled: '#999999',
      icon: '#000000',
      error: '#ff3b30'
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _ThemeContext = require("../../src/contexts/ThemeContext");
var _storageUtils = require("../../src/utils/storageUtils");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var TestComponent = function TestComponent() {
  var _React$useContext = _react.default.useContext(_ThemeContext.ThemeContext),
    theme = _React$useContext.theme,
    isDarkTheme = _React$useContext.isDarkTheme,
    colors = _React$useContext.colors,
    loaded = _React$useContext.loaded,
    spacing = _React$useContext.spacing,
    typography = _React$useContext.typography,
    borderRadius = _React$useContext.borderRadius,
    shadows = _React$useContext.shadows,
    setTheme = _React$useContext.setTheme,
    toggleTheme = _React$useContext.toggleTheme,
    resetToSystemTheme = _React$useContext.resetToSystemTheme;
  if (!loaded) {
    return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "loading-status",
      children: "Loading Theme..."
    });
  }
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [(0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "current-theme",
      children: ["Theme: ", theme]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "is-dark-theme",
      children: ["Is Dark: ", isDarkTheme ? 'Yes' : 'No']
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "background-color",
      children: ["Background: ", colors.background]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "text-color",
      children: ["Text: ", colors.text]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "spacing-md",
      children: ["Spacing: ", spacing.md]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "typography-md-font-size",
      children: ["Font Size: ", typography.fontSizes.md]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "border-radius-md",
      children: ["Border Radius: ", borderRadius.md]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "shadows-md-elevation",
      children: ["Shadows: ", shadows.md.elevation]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "level-A1",
      children: ["Level A1: ", colors.level.A1]
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Set Light",
      onPress: function onPress() {
        return setTheme('light');
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Set Dark",
      onPress: function onPress() {
        return setTheme('dark');
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Set System",
      onPress: function onPress() {
        return setTheme('system');
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Toggle Theme",
      onPress: toggleTheme
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Reset to System",
      onPress: resetToSystemTheme
    })]
  });
};
var flattenChildren = function flattenChildren(children) {
  return Array.isArray(children) ? children.join('') : children;
};
describe('ThemeProvider', function () {
  var mockGetDataPromise;
  var resolveMockPromise;
  var rejectMockPromise;
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
    mockGetDataPromise = new Promise(function (resolve, reject) {
      resolveMockPromise = resolve;
      rejectMockPromise = reject;
    });
    _storageUtils.getData.mockReturnValue(mockGetDataPromise);
    _reactNative2.useColorScheme.mockReturnValue('light');
  });
  afterEach(function () {
    jest.runOnlyPendingTimers();
    jest.useRealTimers();
  });
  it('should load default system theme when no saved theme exists', (0, _asyncToGenerator2.default)(function* () {
    resolveMockPromise(null);
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    expect(_reactNative.screen.getByTestId('loading-status')).toBeTruthy();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    expect(_reactNative.screen.queryByTestId('loading-status')).toBeNull();
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: system');
    expect(flattenChildren(_reactNative.screen.getByTestId('is-dark-theme').props.children)).toBe('Is Dark: No');
    expect(flattenChildren(_reactNative.screen.getByTestId('background-color').props.children)).toBe('Background: #FFFFFF');
    expect(_storageUtils.getData).toHaveBeenCalledWith('appTheme');
  }));
  it('should load saved theme from storage', (0, _asyncToGenerator2.default)(function* () {
    resolveMockPromise('dark');
    _reactNative2.useColorScheme.mockReturnValue('light');
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: dark');
    expect(flattenChildren(_reactNative.screen.getByTestId('is-dark-theme').props.children)).toBe('Is Dark: Yes');
    expect(flattenChildren(_reactNative.screen.getByTestId('background-color').props.children)).toBe('Background: #121212');
    expect(flattenChildren(_reactNative.screen.getByTestId('text-color').props.children)).toBe('Text: #FFFFFF');
  }));
  it('should set theme to light and save it', (0, _asyncToGenerator2.default)(function* () {
    resolveMockPromise(null);
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Light'));
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: light');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    expect(_storageUtils.storeData).toHaveBeenCalledWith('appTheme', 'light');
  }));
  it('should set theme to dark and save it', (0, _asyncToGenerator2.default)(function* () {
    resolveMockPromise(null);
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Dark'));
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: dark');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    expect(_storageUtils.storeData).toHaveBeenCalledWith('appTheme', 'dark');
  }));
  it('should reset to system theme and save it', (0, _asyncToGenerator2.default)(function* () {
    resolveMockPromise(null);
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Dark'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Reset to System'));
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: system');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    expect(_storageUtils.storeData).toHaveBeenCalledWith('appTheme', 'system');
  }));
  it('should toggle from light to dark theme', (0, _asyncToGenerator2.default)(function* () {
    resolveMockPromise('light');
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Toggle Theme'));
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: dark');
  }));
  it('should toggle from dark to light theme', (0, _asyncToGenerator2.default)(function* () {
    resolveMockPromise('dark');
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Toggle Theme'));
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: light');
  }));
  it('should toggle from system to light theme if systemColorScheme is dark', (0, _asyncToGenerator2.default)(function* () {
    _reactNative2.useColorScheme.mockReturnValue('dark');
    resolveMockPromise(null);
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: system');
    expect(flattenChildren(_reactNative.screen.getByTestId('is-dark-theme').props.children)).toBe('Is Dark: Yes');
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Toggle Theme'));
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: light');
  }));
  it('should toggle from system to dark theme if systemColorScheme is light', (0, _asyncToGenerator2.default)(function* () {
    _reactNative2.useColorScheme.mockReturnValue('light');
    resolveMockPromise(null);
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: system');
    expect(flattenChildren(_reactNative.screen.getByTestId('is-dark-theme').props.children)).toBe('Is Dark: No');
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Toggle Theme'));
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: dark');
  }));
  it('should correctly provide static memoized values', (0, _asyncToGenerator2.default)(function* () {
    resolveMockPromise(null);
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    expect(flattenChildren(_reactNative.screen.getByTestId('spacing-md').props.children)).toBe('Spacing: 16');
    expect(flattenChildren(_reactNative.screen.getByTestId('typography-md-font-size').props.children)).toBe('Font Size: 16');
    expect(flattenChildren(_reactNative.screen.getByTestId('border-radius-md').props.children)).toBe('Border Radius: 8');
  }));
  it('should apply correct shadows based on theme', (0, _asyncToGenerator2.default)(function* () {
    resolveMockPromise(null);
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    expect(flattenChildren(_reactNative.screen.getByTestId('is-dark-theme').props.children)).toBe('Is Dark: No');
    expect(flattenChildren(_reactNative.screen.getByTestId('shadows-md-elevation').props.children)).toBe('Shadows: 4');
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Dark'));
    expect(flattenChildren(_reactNative.screen.getByTestId('is-dark-theme').props.children)).toBe('Is Dark: Yes');
    expect(flattenChildren(_reactNative.screen.getByTestId('background-color').props.children)).toBe('Background: #121212');
    expect(flattenChildren(_reactNative.screen.getByTestId('shadows-md-elevation').props.children)).toBe('Shadows: 4');
  }));
  it('should handle storage read error gracefully and proceed with default theme', (0, _asyncToGenerator2.default)(function* () {
    rejectMockPromise(new Error('Storage read failed'));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    expect(_reactNative.screen.queryByTestId('loading-status')).toBeNull();
    expect(flattenChildren(_reactNative.screen.getByTestId('current-theme').props.children)).toBe('Theme: system');
  }));
  it('should not update state after unmount (in try block)', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(TestComponent, {})
      })),
      unmount = _render.unmount;
    unmount();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      resolveMockPromise('light');
      jest.runAllTimers();
    }));
    expect(_reactNative.screen.queryByTestId('loading-status')).toBeTruthy();
    expect(_reactNative.screen.queryByTestId('current-theme')).toBeNull();
  }));
  it('should not update state after unmount (in catch block)', (0, _asyncToGenerator2.default)(function* () {
    var consoleSpy = jest.spyOn(console, 'error');
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(TestComponent, {})
      })),
      unmount = _render2.unmount;
    unmount();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      rejectMockPromise(new Error('Storage read failed'));
      jest.runAllTimers();
    }));
    expect(_reactNative.screen.queryByTestId('loading-status')).toBeTruthy();
    expect(_reactNative.screen.queryByTestId('current-theme')).toBeNull();
    expect(consoleSpy).toHaveBeenCalledWith('Error loading theme:', expect.any(Error));
    consoleSpy.mockRestore();
  }));
  it('should not save theme if not loaded', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    expect(_reactNative.screen.queryByText('Set Dark')).toBeNull();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Dark'));
    expect(_storageUtils.storeData).not.toHaveBeenCalled();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_storageUtils.storeData).toHaveBeenCalledTimes(1);
    expect(_storageUtils.storeData).toHaveBeenCalledWith('appTheme', 'dark');
  }));
  it('should debounce theme saving', (0, _asyncToGenerator2.default)(function* () {
    resolveMockPromise(null);
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Light'));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Dark'));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set System'));
    expect(_storageUtils.storeData).not.toHaveBeenCalled();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return jest.advanceTimersByTime(300);
    }));
    expect(_storageUtils.storeData).toHaveBeenCalledTimes(1);
    expect(_storageUtils.storeData).toHaveBeenCalledWith('appTheme', 'system');
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,