9c1369e7827f4e78779640f8bf5c55ad
_getJestObj().mock('react-native-safe-area-context', function () {
  var _require = require('react-native'),
    View = _require.View;
  return {
    SafeAreaView: function SafeAreaView(_ref) {
      var children = _ref.children,
        style = _ref.style,
        rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      return (0, _jsxRuntime.jsx)(View, Object.assign({
        style: style
      }, rest, {
        children: children
      }));
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _Container = _interopRequireDefault(require("../../../src/components/layout/Container"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "style"];
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Container', function () {
  it('renders children correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Hello World"
        })
      })),
      getByText = _render.getByText;
    expect(getByText('Hello World')).toBeTruthy();
  });
  it('renders StatusBar with default props', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {})),
      UNSAFE_getByType = _render2.UNSAFE_getByType;
    var statusBar = UNSAFE_getByType(_reactNative2.StatusBar);
    expect(statusBar.props.barStyle).toBe('dark-content');
    expect(statusBar.props.backgroundColor).toBe('#FFFFFF');
  });
  it('renders StatusBar with custom props', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {
        statusBarStyle: "light-content",
        statusBarColor: "#FF0000"
      })),
      UNSAFE_getByType = _render3.UNSAFE_getByType;
    var statusBar = UNSAFE_getByType(_reactNative2.StatusBar);
    expect(statusBar.props.barStyle).toBe('light-content');
    expect(statusBar.props.backgroundColor).toBe('#FF0000');
  });
  it('does not render StatusBar when withStatusBar is false', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {
        withStatusBar: false
      })),
      UNSAFE_queryByType = _render4.UNSAFE_queryByType;
    var statusBar = UNSAFE_queryByType(_reactNative2.StatusBar);
    expect(statusBar).toBeNull();
  });
  it('renders content inside ScrollView when withScrollView is true', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {
        withScrollView: true,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Inside Scroll"
        })
      })),
      getByText = _render5.getByText,
      UNSAFE_getByType = _render5.UNSAFE_getByType;
    expect(UNSAFE_getByType(_reactNative2.ScrollView)).toBeTruthy();
    expect(getByText('Inside Scroll')).toBeTruthy();
  });
  it('renders content directly when withScrollView is false', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {
        withScrollView: false,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "No Scroll"
        })
      })),
      getByText = _render6.getByText,
      UNSAFE_queryByType = _render6.UNSAFE_queryByType;
    expect(UNSAFE_queryByType(_reactNative2.ScrollView)).toBeNull();
    expect(getByText('No Scroll')).toBeTruthy();
  });
  it('applies default backgroundColor', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {})),
      UNSAFE_getByType = _render7.UNSAFE_getByType;
    var wrapper = UNSAFE_getByType(_reactNative2.View);
    var style = _reactNative2.StyleSheet.flatten(wrapper.props.style);
    expect(style.backgroundColor).toBe('#F9FAFB');
  });
  it('applies custom backgroundColor', function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {
        backgroundColor: "#123456"
      })),
      UNSAFE_getByType = _render8.UNSAFE_getByType;
    var wrapper = UNSAFE_getByType(_reactNative2.View);
    var style = _reactNative2.StyleSheet.flatten(wrapper.props.style);
    expect(style.backgroundColor).toBe('#123456');
  });
  it('applies padding by default', function () {
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {})),
      UNSAFE_getByType = _render9.UNSAFE_getByType;
    var wrapper = UNSAFE_getByType(_reactNative2.View);
    var style = _reactNative2.StyleSheet.flatten(wrapper.props.style);
    expect(style.padding).toBe(16);
  });
  it('does not apply padding if withPadding is false', function () {
    var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {
        withPadding: false
      })),
      UNSAFE_getByType = _render0.UNSAFE_getByType;
    var wrapper = UNSAFE_getByType(_reactNative2.View);
    var style = _reactNative2.StyleSheet.flatten(wrapper.props.style);
    expect(style.padding).toBeUndefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfcmVxdWlyZSIsInJlcXVpcmUiLCJWaWV3IiwiU2FmZUFyZWFWaWV3IiwiX3JlZiIsImNoaWxkcmVuIiwic3R5bGUiLCJyZXN0IiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiIsImRlZmF1bHQiLCJfZXhjbHVkZWQiLCJfanN4UnVudGltZSIsImpzeCIsIk9iamVjdCIsImFzc2lnbiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfcmVhY3ROYXRpdmUyIiwiX0NvbnRhaW5lciIsIl9yZXF1aXJlMiIsImplc3QiLCJkZXNjcmliZSIsIml0IiwiX3JlbmRlciIsInJlbmRlciIsIlRleHQiLCJnZXRCeVRleHQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwiX3JlbmRlcjIiLCJVTlNBRkVfZ2V0QnlUeXBlIiwic3RhdHVzQmFyIiwiU3RhdHVzQmFyIiwicHJvcHMiLCJiYXJTdHlsZSIsInRvQmUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJfcmVuZGVyMyIsInN0YXR1c0JhclN0eWxlIiwic3RhdHVzQmFyQ29sb3IiLCJfcmVuZGVyNCIsIndpdGhTdGF0dXNCYXIiLCJVTlNBRkVfcXVlcnlCeVR5cGUiLCJ0b0JlTnVsbCIsIl9yZW5kZXI1Iiwid2l0aFNjcm9sbFZpZXciLCJTY3JvbGxWaWV3IiwiX3JlbmRlcjYiLCJfcmVuZGVyNyIsIndyYXBwZXIiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsIl9yZW5kZXI4IiwiX3JlbmRlcjkiLCJwYWRkaW5nIiwiX3JlbmRlcjAiLCJ3aXRoUGFkZGluZyIsInRvQmVVbmRlZmluZWQiXSwic291cmNlcyI6WyJDb250YWluZXIudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgVmlldywgU2Nyb2xsVmlldywgVGV4dCwgU3R5bGVTaGVldCwgU3RhdHVzQmFyIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBDb250YWluZXIgZnJvbSAnLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvbGF5b3V0L0NvbnRhaW5lcic7XG5cbi8vIE1vY2sgcmVhY3QtbmF0aXZlLXNhZmUtYXJlYS1jb250ZXh0XG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS1zYWZlLWFyZWEtY29udGV4dCcsICgpID0+IHtcbiAgY29uc3QgeyBWaWV3IH0gPSByZXF1aXJlKCdyZWFjdC1uYXRpdmUnKTtcbiAgcmV0dXJuIHtcbiAgICBTYWZlQXJlYVZpZXc6ICh7IGNoaWxkcmVuLCBzdHlsZSwgLi4ucmVzdCB9KSA9PiAoXG4gICAgICA8VmlldyBzdHlsZT17c3R5bGV9IHsuLi5yZXN0fT5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9WaWV3PlxuICAgICksXG4gIH07XG59KTtcblxuZGVzY3JpYmUoJ0NvbnRhaW5lcicsICgpID0+IHtcbiAgaXQoJ3JlbmRlcnMgY2hpbGRyZW4gY29ycmVjdGx5JywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPENvbnRhaW5lcj48VGV4dD5IZWxsbyBXb3JsZDwvVGV4dD48L0NvbnRhaW5lcj4pO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ0hlbGxvIFdvcmxkJykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgU3RhdHVzQmFyIHdpdGggZGVmYXVsdCBwcm9wcycsICgpID0+IHtcbiAgICBjb25zdCB7IFVOU0FGRV9nZXRCeVR5cGUgfSA9IHJlbmRlcig8Q29udGFpbmVyIC8+KTtcbiAgICBjb25zdCBzdGF0dXNCYXIgPSBVTlNBRkVfZ2V0QnlUeXBlKFN0YXR1c0Jhcik7XG4gICAgZXhwZWN0KHN0YXR1c0Jhci5wcm9wcy5iYXJTdHlsZSkudG9CZSgnZGFyay1jb250ZW50Jyk7XG4gICAgZXhwZWN0KHN0YXR1c0Jhci5wcm9wcy5iYWNrZ3JvdW5kQ29sb3IpLnRvQmUoJyNGRkZGRkYnKTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgU3RhdHVzQmFyIHdpdGggY3VzdG9tIHByb3BzJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgVU5TQUZFX2dldEJ5VHlwZSB9ID0gcmVuZGVyKFxuICAgICAgPENvbnRhaW5lciBzdGF0dXNCYXJTdHlsZT1cImxpZ2h0LWNvbnRlbnRcIiBzdGF0dXNCYXJDb2xvcj1cIiNGRjAwMDBcIiAvPlxuICAgICk7XG4gICAgY29uc3Qgc3RhdHVzQmFyID0gVU5TQUZFX2dldEJ5VHlwZShTdGF0dXNCYXIpO1xuICAgIGV4cGVjdChzdGF0dXNCYXIucHJvcHMuYmFyU3R5bGUpLnRvQmUoJ2xpZ2h0LWNvbnRlbnQnKTtcbiAgICBleHBlY3Qoc3RhdHVzQmFyLnByb3BzLmJhY2tncm91bmRDb2xvcikudG9CZSgnI0ZGMDAwMCcpO1xuICB9KTtcblxuICBpdCgnZG9lcyBub3QgcmVuZGVyIFN0YXR1c0JhciB3aGVuIHdpdGhTdGF0dXNCYXIgaXMgZmFsc2UnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBVTlNBRkVfcXVlcnlCeVR5cGUgfSA9IHJlbmRlcig8Q29udGFpbmVyIHdpdGhTdGF0dXNCYXI9e2ZhbHNlfSAvPik7XG4gICAgY29uc3Qgc3RhdHVzQmFyID0gVU5TQUZFX3F1ZXJ5QnlUeXBlKFN0YXR1c0Jhcik7XG4gICAgZXhwZWN0KHN0YXR1c0JhcikudG9CZU51bGwoKTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgY29udGVudCBpbnNpZGUgU2Nyb2xsVmlldyB3aGVuIHdpdGhTY3JvbGxWaWV3IGlzIHRydWUnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQsIFVOU0FGRV9nZXRCeVR5cGUgfSA9IHJlbmRlcihcbiAgICAgIDxDb250YWluZXIgd2l0aFNjcm9sbFZpZXc+PFRleHQ+SW5zaWRlIFNjcm9sbDwvVGV4dD48L0NvbnRhaW5lcj5cbiAgICApO1xuICAgIGV4cGVjdChVTlNBRkVfZ2V0QnlUeXBlKFNjcm9sbFZpZXcpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnSW5zaWRlIFNjcm9sbCcpKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KCdyZW5kZXJzIGNvbnRlbnQgZGlyZWN0bHkgd2hlbiB3aXRoU2Nyb2xsVmlldyBpcyBmYWxzZScsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCwgVU5TQUZFX3F1ZXJ5QnlUeXBlIH0gPSByZW5kZXIoXG4gICAgICA8Q29udGFpbmVyIHdpdGhTY3JvbGxWaWV3PXtmYWxzZX0+PFRleHQ+Tm8gU2Nyb2xsPC9UZXh0PjwvQ29udGFpbmVyPlxuICAgICk7XG4gICAgZXhwZWN0KFVOU0FGRV9xdWVyeUJ5VHlwZShTY3JvbGxWaWV3KSkudG9CZU51bGwoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdObyBTY3JvbGwnKSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICBpdCgnYXBwbGllcyBkZWZhdWx0IGJhY2tncm91bmRDb2xvcicsICgpID0+IHtcbiAgICBjb25zdCB7IFVOU0FGRV9nZXRCeVR5cGUgfSA9IHJlbmRlcig8Q29udGFpbmVyIC8+KTtcbiAgICBjb25zdCB3cmFwcGVyID0gVU5TQUZFX2dldEJ5VHlwZShWaWV3KTtcbiAgICBjb25zdCBzdHlsZSA9IFN0eWxlU2hlZXQuZmxhdHRlbih3cmFwcGVyLnByb3BzLnN0eWxlKTtcbiAgICBleHBlY3Qoc3R5bGUuYmFja2dyb3VuZENvbG9yKS50b0JlKCcjRjlGQUZCJyk7XG4gIH0pO1xuXG4gIGl0KCdhcHBsaWVzIGN1c3RvbSBiYWNrZ3JvdW5kQ29sb3InLCAoKSA9PiB7XG4gICAgY29uc3QgeyBVTlNBRkVfZ2V0QnlUeXBlIH0gPSByZW5kZXIoPENvbnRhaW5lciBiYWNrZ3JvdW5kQ29sb3I9XCIjMTIzNDU2XCIgLz4pO1xuICAgIGNvbnN0IHdyYXBwZXIgPSBVTlNBRkVfZ2V0QnlUeXBlKFZpZXcpO1xuICAgIGNvbnN0IHN0eWxlID0gU3R5bGVTaGVldC5mbGF0dGVuKHdyYXBwZXIucHJvcHMuc3R5bGUpO1xuICAgIGV4cGVjdChzdHlsZS5iYWNrZ3JvdW5kQ29sb3IpLnRvQmUoJyMxMjM0NTYnKTtcbiAgfSk7XG5cbiAgaXQoJ2FwcGxpZXMgcGFkZGluZyBieSBkZWZhdWx0JywgKCkgPT4ge1xuICAgIGNvbnN0IHsgVU5TQUZFX2dldEJ5VHlwZSB9ID0gcmVuZGVyKDxDb250YWluZXIgLz4pO1xuICAgIGNvbnN0IHdyYXBwZXIgPSBVTlNBRkVfZ2V0QnlUeXBlKFZpZXcpO1xuICAgIGNvbnN0IHN0eWxlID0gU3R5bGVTaGVldC5mbGF0dGVuKHdyYXBwZXIucHJvcHMuc3R5bGUpO1xuICAgIGV4cGVjdChzdHlsZS5wYWRkaW5nKS50b0JlKDE2KTtcbiAgfSk7XG5cbiAgaXQoJ2RvZXMgbm90IGFwcGx5IHBhZGRpbmcgaWYgd2l0aFBhZGRpbmcgaXMgZmFsc2UnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBVTlNBRkVfZ2V0QnlUeXBlIH0gPSByZW5kZXIoPENvbnRhaW5lciB3aXRoUGFkZGluZz17ZmFsc2V9IC8+KTtcbiAgICBjb25zdCB3cmFwcGVyID0gVU5TQUZFX2dldEJ5VHlwZShWaWV3KTtcbiAgICBjb25zdCBzdHlsZSA9IFN0eWxlU2hlZXQuZmxhdHRlbih3cmFwcGVyLnByb3BzLnN0eWxlKTtcbiAgICBleHBlY3Qoc3R5bGUucGFkZGluZykudG9CZVVuZGVmaW5lZCgpO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFNQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsZ0NBQWdDLEVBQUUsWUFBTTtFQUNoRCxJQUFBQyxRQUFBLEdBQWlCQyxPQUFPLENBQUMsY0FBYyxDQUFDO0lBQWhDQyxJQUFJLEdBQUFGLFFBQUEsQ0FBSkUsSUFBSTtFQUNaLE9BQU87SUFDTEMsWUFBWSxFQUFFLFNBQWRBLFlBQVlBLENBQUFDLElBQUE7TUFBQSxJQUFLQyxRQUFRLEdBQUFELElBQUEsQ0FBUkMsUUFBUTtRQUFFQyxLQUFLLEdBQUFGLElBQUEsQ0FBTEUs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O01BQXBFTixnQkFBZ0IsR0FBQXNCLFFBQUEsQ0FBaEJ0QixnQkFBZ0I7SUFDeEIsSUFBTW1CLE9BQU8sR0FBR25CLGdCQUFnQixDQUFDN0Isa0JBQUksQ0FBQztJQUN0QyxJQUFNSSxLQUFLLEdBQUc2Qyx3QkFBVSxDQUFDQyxPQUFPLENBQUNGLE9BQU8sQ0FBQ2hCLEtBQUssQ0FBQzVCLEtBQUssQ0FBQztJQUNyRHNCLE1BQU0sQ0FBQ3RCLEtBQUssQ0FBQytCLGVBQWUsQ0FBQyxDQUFDRCxJQUFJLENBQUMsU0FBUyxDQUFDO0VBQy9DLENBQUMsQ0FBQztFQUVGYixFQUFFLENBQUMsNEJBQTRCLEVBQUUsWUFBTTtJQUNyQyxJQUFBK0IsUUFBQSxHQUE2QixJQUFBN0IsbUJBQU0sRUFBQyxJQUFBZCxXQUFBLENBQUFDLEdBQUEsRUFBQ08sVUFBQSxDQUFBVixPQUFTLElBQUUsQ0FBQyxDQUFDO01BQTFDc0IsZ0JBQWdCLEdBQUF1QixRQUFBLENBQWhCdkIsZ0JBQWdCO0lBQ3hCLElBQU1tQixPQUFPLEdBQUduQixnQkFBZ0IsQ0FBQzdCLGtCQUFJLENBQUM7SUFDdEMsSUFBTUksS0FBSyxHQUFHNkMsd0JBQVUsQ0FBQ0MsT0FBTyxDQUFDRixPQUFPLENBQUNoQixLQUFLLENBQUM1QixLQUFLLENBQUM7SUFDckRzQixNQUFNLENBQUN0QixLQUFLLENBQUNpRCxPQUFPLENBQUMsQ0FBQ25CLElBQUksQ0FBQyxFQUFFLENBQUM7RUFDaEMsQ0FBQyxDQUFDO0VBRUZiLEVBQUUsQ0FBQyxnREFBZ0QsRUFBRSxZQUFNO0lBQ3pELElBQUFpQyxRQUFBLEdBQTZCLElBQUEvQixtQkFBTSxFQUFDLElBQUFkLFdBQUEsQ0FBQUMsR0FBQSxFQUFDTyxVQUFBLENBQUFWLE9BQVM7UUFBQ2dELFdBQVcsRUFBRTtNQUFNLENBQUUsQ0FBQyxDQUFDO01BQTlEMUIsZ0JBQWdCLEdBQUF5QixRQUFBLENBQWhCekIsZ0JBQWdCO0lBQ3hCLElBQU1tQixPQUFPLEdBQUduQixnQkFBZ0IsQ0FBQzdCLGtCQUFJLENBQUM7SUFDdEMsSUFBTUksS0FBSyxHQUFHNkMsd0JBQVUsQ0FBQ0MsT0FBTyxDQUFDRixPQUFPLENBQUNoQixLQUFLLENBQUM1QixLQUFLLENBQUM7SUFDckRzQixNQUFNLENBQUN0QixLQUFLLENBQUNpRCxPQUFPLENBQUMsQ0FBQ0csYUFBYSxDQUFDLENBQUM7RUFDdkMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119