ea1703ee4982dd59c710f8825fa1d0b0
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAllA1Exercises = exports.getA1ExercisesByTopic = exports.getA1ExercisesByDifficulty = exports.getA1ExerciseById = exports.default = exports.a1Metadata = void 0;
Object.defineProperty(exports, "readingQuestionsA1", {
  enumerable: true,
  get: function get() {
    return _readingQuestionsA.default;
  }
});
Object.defineProperty(exports, "readingTextsA1", {
  enumerable: true,
  get: function get() {
    return _readingTextsA.default;
  }
});
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _readingTextsA = _interopRequireDefault(require("./categories/readingTextsA1.js"));
var _readingQuestionsA = _interopRequireDefault(require("./categories/readingQuestionsA1.js"));
var combineTextWithQuestions = function combineTextWithQuestions(textId) {
  var text = _readingTextsA.default.find(function (t) {
    return t.id === textId;
  });
  var questions = _readingQuestionsA.default.find(function (q) {
    return q.textId === textId;
  });
  if (!text || !questions) {
    return null;
  }
  return Object.assign({}, text, {
    questions: questions.questions
  });
};
var getAllA1Exercises = exports.getAllA1Exercises = function getAllA1Exercises() {
  return _readingTextsA.default.map(function (text) {
    return combineTextWithQuestions(text.id);
  }).filter(Boolean);
};
var getA1ExerciseById = exports.getA1ExerciseById = function getA1ExerciseById(textId) {
  return combineTextWithQuestions(textId);
};
var getA1ExercisesByDifficulty = exports.getA1ExercisesByDifficulty = function getA1ExercisesByDifficulty(difficulty) {
  var filteredTexts = _readingTextsA.default.filter(function (text) {
    return text.difficulty === difficulty;
  });
  return filteredTexts.map(function (text) {
    return combineTextWithQuestions(text.id);
  }).filter(Boolean);
};
var getA1ExercisesByTopic = exports.getA1ExercisesByTopic = function getA1ExercisesByTopic(topic) {
  var filteredTexts = _readingTextsA.default.filter(function (text) {
    var _text$topics;
    return (_text$topics = text.topics) == null ? void 0 : _text$topics.includes(topic);
  });
  return filteredTexts.map(function (text) {
    return combineTextWithQuestions(text.id);
  }).filter(Boolean);
};
var a1Metadata = exports.a1Metadata = {
  level: "A1",
  totalTexts: _readingTextsA.default.length,
  totalQuestions: _readingQuestionsA.default.reduce(function (sum, q) {
    return sum + q.questions.length;
  }, 0),
  averageWordCount: Math.round(_readingTextsA.default.reduce(function (sum, text) {
    return sum + text.wordCount;
  }, 0) / _readingTextsA.default.length),
  difficulties: (0, _toConsumableArray2.default)(new Set(_readingTextsA.default.map(function (text) {
    return text.difficulty;
  }))).sort(),
  topics: (0, _toConsumableArray2.default)(new Set(_readingTextsA.default.flatMap(function (text) {
    return text.topics;
  }))).sort(),
  description: "Beginner level reading comprehension exercises focusing on everyday situations and basic vocabulary."
};
var readingA1Data = {
  metadata: a1Metadata,
  exercises: getAllA1Exercises(),
  getAll: getAllA1Exercises,
  getById: getA1ExerciseById,
  getByDifficulty: getA1ExercisesByDifficulty,
  getByTopic: getA1ExercisesByTopic,
  texts: _readingTextsA.default,
  questions: _readingQuestionsA.default
};
var _default = exports.default = readingA1Data;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,