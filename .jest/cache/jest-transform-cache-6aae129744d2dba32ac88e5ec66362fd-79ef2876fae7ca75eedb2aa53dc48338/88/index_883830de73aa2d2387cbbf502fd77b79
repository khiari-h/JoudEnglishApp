bf0979716c97f2c66c38fb5160f3136e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _expoRouter = require("expo-router");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _RevisionPopup = _interopRequireDefault(require("../../Dashboard/components/popup/RevisionPopup"));
var _useRevisionSettings2 = require("../../../hooks/useRevisionSettings");
var _jsxRuntime = require("react/jsx-runtime");
var RevisionOrchestrator = function RevisionOrchestrator(_ref) {
  var _ref$currentLevel = _ref.currentLevel,
    currentLevel = _ref$currentLevel === void 0 ? "mixed" : _ref$currentLevel;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    showPopup = _useState2[0],
    setShowPopup = _useState2[1];
  var _useState3 = (0, _react.useState)(0),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    totalWords = _useState4[0],
    setTotalWords = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    isLoaded = _useState6[0],
    setIsLoaded = _useState6[1];
  var _useRevisionSettings = (0, _useRevisionSettings2.useRevisionSettings)(),
    preferences = _useRevisionSettings.preferences,
    disableRevisions = _useRevisionSettings.disableRevisions,
    resetToNextTarget = _useRevisionSettings.resetToNextTarget,
    updatePreferences = _useRevisionSettings.updatePreferences;
  var popupShownRef = (0, _react.useRef)(false);
  var countWords = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      try {
        var total = 0;
        var levels = ['1', '2', '3', '4', '5', '6', 'bonus'];
        var modes = ['classic', 'fast'];
        for (var level of levels) {
          for (var mode of modes) {
            var stored = yield _asyncStorage.default.getItem(`vocabulary_${level}_${mode}`);
            if (stored) {
              var data = JSON.parse(stored);
              var completedWords = data.completedWords || {};
              total += Object.values(completedWords).reduce(function (acc, words) {
                if (Array.isArray(words)) {
                  return acc + words.length;
                }
                return acc;
              }, 0);
            }
          }
        }
        setTotalWords(total);
        return total;
      } catch (error) {
        return 0;
      }
    });
    return function countWords() {
      return _ref2.apply(this, arguments);
    };
  }();
  (0, _react.useEffect)(function () {
    var initializeRevision = function () {
      var _ref3 = (0, _asyncToGenerator2.default)(function* () {
        yield countWords();
        setIsLoaded(true);
      });
      return function initializeRevision() {
        return _ref3.apply(this, arguments);
      };
    }();
    initializeRevision();
  }, []);
  (0, _react.useEffect)(function () {
    if (!isLoaded) return;
    var shouldShow = !preferences.isDisabled && totalWords >= preferences.nextRevisionAt && totalWords > 0 && !popupShownRef.current;
    if (shouldShow) {
      popupShownRef.current = true;
      setTimeout(function () {
        return setShowPopup(true);
      }, 1000);
    }
  }, [isLoaded, preferences.isDisabled, totalWords, preferences.nextRevisionAt]);
  var handleChoice = (0, _react.useCallback)(function () {
    var _ref4 = (0, _asyncToGenerator2.default)(function* (choice) {
      setShowPopup(false);
      popupShownRef.current = false;
      switch (choice) {
        case 'now':
          {
            yield resetToNextTarget(totalWords);
            _expoRouter.router.push({
              pathname: "/tabs/vocabularyRevision",
              params: {
                level: currentLevel,
                questionsCount: preferences.questionsCount,
                source: 'popup_trigger'
              }
            });
            break;
          }
        case 'later_50':
          {
            var next50 = totalWords + 50;
            yield updatePreferences({
              nextRevisionAt: next50
            });
            break;
          }
        case 'later_100':
          {
            var next100 = totalWords + 100;
            yield updatePreferences({
              nextRevisionAt: next100
            });
            break;
          }
        case 'disable':
          {
            yield disableRevisions();
            break;
          }
        default:
          {
            var defaultNext = totalWords + 50;
            yield updatePreferences({
              nextRevisionAt: defaultNext
            });
            break;
          }
      }
    });
    return function (_x) {
      return _ref4.apply(this, arguments);
    };
  }(), [totalWords, disableRevisions, resetToNextTarget, updatePreferences, currentLevel, preferences.questionsCount]);
  var handleDismiss = (0, _react.useCallback)(function () {
    return handleChoice('later_50');
  }, [handleChoice]);
  if (preferences.isDisabled) {
    return null;
  }
  return (0, _jsxRuntime.jsx)(_RevisionPopup.default, {
    visible: showPopup,
    totalWordsLearned: totalWords,
    questionsCount: preferences.questionsCount,
    currentLevel: currentLevel,
    onChoice: handleChoice,
    onDismiss: handleDismiss
  });
};
var _default = exports.default = RevisionOrchestrator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,