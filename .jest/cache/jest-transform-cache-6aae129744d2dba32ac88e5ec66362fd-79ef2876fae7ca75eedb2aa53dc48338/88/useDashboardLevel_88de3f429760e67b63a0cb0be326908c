27a6ec53c8c6e2dc22898528444bb434
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDashboardLevel = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _constants = require("../../../utils/constants");
var ACTIVE_LEVEL_KEY = "user_active_level";
var useDashboardLevel = exports.useDashboardLevel = function useDashboardLevel(_ref) {
  var _LANGUAGE_LEVELS$curr;
  var progressData = _ref.progress;
  var _useState = (0, _react.useState)("1"),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    currentLevel = _useState2[0],
    setCurrentLevel = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isLoaded = _useState4[0],
    setIsLoaded = _useState4[1];
  var isInitialLoad = (0, _react.useRef)(true);
  var mapOldToNewLevel = (0, _react.useCallback)(function (level) {
    var mapping = {
      A1: "1",
      A2: "2",
      B1: "3",
      B2: "4",
      C1: "5",
      C2: "6",
      bonus: "bonus"
    };
    return mapping[level] || level;
  }, []);
  var handleChangeActiveLevel = (0, _react.useCallback)(function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (newLevel) {
      if (!_constants.LANGUAGE_LEVELS[newLevel]) return;
      setCurrentLevel(newLevel);
      try {
        yield _asyncStorage.default.setItem(ACTIVE_LEVEL_KEY, newLevel);
      } catch (error) {
        console.error('Erreur sauvegarde niveau actif:', error);
      }
    });
    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), []);
  (0, _react.useEffect)(function () {
    var loadActiveLevel = function () {
      var _ref3 = (0, _asyncToGenerator2.default)(function* () {
        try {
          var savedLevel = yield _asyncStorage.default.getItem(ACTIVE_LEVEL_KEY);
          if (savedLevel && _constants.LANGUAGE_LEVELS[savedLevel]) {
            setCurrentLevel(mapOldToNewLevel(savedLevel));
          } else if (progressData != null && progressData.currentLevel) {
            setCurrentLevel(mapOldToNewLevel(progressData.currentLevel));
          }
          setIsLoaded(true);
        } catch (error) {
          console.error('Erreur chargement niveau actif:', error);
          setIsLoaded(true);
        }
      });
      return function loadActiveLevel() {
        return _ref3.apply(this, arguments);
      };
    }();
    loadActiveLevel();
  }, [progressData]);
  var levelColor = ((_LANGUAGE_LEVELS$curr = _constants.LANGUAGE_LEVELS[currentLevel]) == null ? void 0 : _LANGUAGE_LEVELS$curr.color) || "#3B82F6";
  return {
    currentLevel: currentLevel,
    handleChangeActiveLevel: handleChangeActiveLevel,
    levelColor: levelColor,
    isLoaded: isLoaded
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX2FzeW5jU3RvcmFnZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfY29uc3RhbnRzIiwiQUNUSVZFX0xFVkVMX0tFWSIsInVzZURhc2hib2FyZExldmVsIiwiZXhwb3J0cyIsIl9yZWYiLCJfTEFOR1VBR0VfTEVWRUxTJGN1cnIiLCJwcm9ncmVzc0RhdGEiLCJwcm9ncmVzcyIsIl91c2VTdGF0ZSIsInVzZVN0YXRlIiwiX3VzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5MiIsImRlZmF1bHQiLCJjdXJyZW50TGV2ZWwiLCJzZXRDdXJyZW50TGV2ZWwiLCJfdXNlU3RhdGUzIiwiX3VzZVN0YXRlNCIsImlzTG9hZGVkIiwic2V0SXNMb2FkZWQiLCJpc0luaXRpYWxMb2FkIiwidXNlUmVmIiwibWFwT2xkVG9OZXdMZXZlbCIsInVzZUNhbGxiYWNrIiwibGV2ZWwiLCJtYXBwaW5nIiwiQTEiLCJBMiIsIkIxIiwiQjIiLCJDMSIsIkMyIiwiYm9udXMiLCJoYW5kbGVDaGFuZ2VBY3RpdmVMZXZlbCIsIl9yZWYyIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwibmV3TGV2ZWwiLCJMQU5HVUFHRV9MRVZFTFMiLCJBc3luY1N0b3JhZ2UiLCJzZXRJdGVtIiwiZXJyb3IiLCJjb25zb2xlIiwiX3giLCJhcHBseSIsImFyZ3VtZW50cyIsInVzZUVmZmVjdCIsImxvYWRBY3RpdmVMZXZlbCIsIl9yZWYzIiwic2F2ZWRMZXZlbCIsImdldEl0ZW0iLCJsZXZlbENvbG9yIiwiY29sb3IiXSwic291cmNlcyI6WyJ1c2VEYXNoYm9hcmRMZXZlbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvc2NyZWVucy9EYXNoYm9hcmQvaG9va3MvdXNlRGFzaGJvYXJkTGV2ZWwuanMgLSBWRVJTSU9OIENPUlJJR8OJRVxuaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2ssIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IEFzeW5jU3RvcmFnZSBmcm9tIFwiQHJlYWN0LW5hdGl2ZS1hc3luYy1zdG9yYWdlL2FzeW5jLXN0b3JhZ2VcIjtcbmltcG9ydCB7IExBTkdVQUdFX0xFVkVMUyB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9jb25zdGFudHNcIjtcblxuY29uc3QgQUNUSVZFX0xFVkVMX0tFWSA9IFwidXNlcl9hY3RpdmVfbGV2ZWxcIjtcblxuZXhwb3J0IGNvbnN0IHVzZURhc2hib2FyZExldmVsID0gKHsgcHJvZ3Jlc3M6IHByb2dyZXNzRGF0YSB9KSA9PiB7XG4gIGNvbnN0IFtjdXJyZW50TGV2ZWwsIHNldEN1cnJlbnRMZXZlbF0gPSB1c2VTdGF0ZShcIjFcIik7XG4gIGNvbnN0IFtpc0xvYWRlZCwgc2V0SXNMb2FkZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBpc0luaXRpYWxMb2FkID0gdXNlUmVmKHRydWUpO1xuXG4gIC8vIOKchSBDT1JSRUNUSU9OIDogTcOpbW9yaXNlciBsYSBmb25jdGlvbiBkZSBtYXBwaW5nXG4gIGNvbnN0IG1hcE9sZFRvTmV3TGV2ZWwgPSB1c2VDYWxsYmFjaygobGV2ZWwpID0+IHtcbiAgICBjb25zdCBtYXBwaW5nID0ge1xuICAgICAgQTE6IFwiMVwiLFxuICAgICAgQTI6IFwiMlwiLCBcbiAgICAgIEIxOiBcIjNcIixcbiAgICAgIEIyOiBcIjRcIixcbiAgICAgIEMxOiBcIjVcIixcbiAgICAgIEMyOiBcIjZcIixcbiAgICAgIGJvbnVzOiBcImJvbnVzXCIsXG4gICAgfTtcbiAgICByZXR1cm4gbWFwcGluZ1tsZXZlbF0gfHwgbGV2ZWw7XG4gIH0sIFtdKTtcblxuICAvLyDinIUgQ09SUkVDVElPTiA6IE3DqW1vcmlzZXIgbGEgZm9uY3Rpb24gZGUgY2hhbmdlbWVudCBkZSBuaXZlYXVcbiAgY29uc3QgaGFuZGxlQ2hhbmdlQWN0aXZlTGV2ZWwgPSB1c2VDYWxsYmFjayhhc3luYyAobmV3TGV2ZWwpID0+IHtcbiAgICBpZiAoIUxBTkdVQUdFX0xFVkVMU1tuZXdMZXZlbF0pIHJldHVybjtcblxuICAgIHNldEN1cnJlbnRMZXZlbChuZXdMZXZlbCk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IEFzeW5jU3RvcmFnZS5zZXRJdGVtKEFDVElWRV9MRVZFTF9LRVksIG5ld0xldmVsKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyZXVyIHNhdXZlZ2FyZGUgbml2ZWF1IGFjdGlmOicsIGVycm9yKTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICAvLyA9PT09PT09PT09IPCfmqggQ09SUkVDVElPTiBQUklOQ0lQQUxFIDogQ0hBUkdFTUVOVCBVTklRVUUgPT09PT09PT09PVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGxvYWRBY3RpdmVMZXZlbCA9IGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHNhdmVkTGV2ZWwgPSBhd2FpdCBBc3luY1N0b3JhZ2UuZ2V0SXRlbShBQ1RJVkVfTEVWRUxfS0VZKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChzYXZlZExldmVsICYmIExBTkdVQUdFX0xFVkVMU1tzYXZlZExldmVsXSkge1xuICAgICAgICAgIHNldEN1cnJlbnRMZXZlbChtYXBPbGRUb05ld0xldmVsKHNhdmVkTGV2ZWwpKTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9ncmVzc0RhdGE/LmN1cnJlbnRMZXZlbCkge1xuICAgICAgICAgIHNldEN1cnJlbnRMZXZlbChtYXBPbGRUb05ld0xldmVsKHByb2dyZXNzRGF0YS5jdXJyZW50TGV2ZWwpKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgc2V0SXNMb2FkZWQodHJ1ZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJldXIgY2hhcmdlbWVudCBuaXZlYXUgYWN0aWY6JywgZXJyb3IpO1xuICAgICAgICBzZXRJc0xvYWRlZCh0cnVlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgbG9hZEFjdGl2ZUxldmVsKCk7XG4gIH0sIFtwcm9ncmVzc0RhdGFdKTtcblxuICBcblxuICAvLyDinIUgQ09SUkVDVElPTiA6IE3DqW1vcmlzZXIgbGEgY291bGV1ciBkdSBuaXZlYXVcbiAgY29uc3QgbGV2ZWxDb2xvciA9IExBTkdVQUdFX0xFVkVMU1tjdXJyZW50TGV2ZWxdPy5jb2xvciB8fCBcIiMzQjgyRjZcIjtcblxuICByZXR1cm4ge1xuICAgIGN1cnJlbnRMZXZlbCxcbiAgICBoYW5kbGVDaGFuZ2VBY3RpdmVMZXZlbCxcbiAgICBsZXZlbENvbG9yLFxuICAgIGlzTG9hZGVkLCAvLyBFeHBvc2VyIGwnw6l0YXQgZGUgY2hhcmdlbWVudCBzaSBuw6ljZXNzYWlyZVxuICB9O1xufTsiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQSxJQUFBQSxNQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxhQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBRyxVQUFBLEdBQUFILE9BQUE7QUFFQSxJQUFNSSxnQkFBZ0IsR0FBRyxtQkFBbUI7QUFFckMsSUFBTUMsaUJBQWlCLEdBQUFDLE9BQUEsQ0FBQUQsaUJBQUEsR0FBRyxTQUFwQkEsaUJBQWlCQSxDQUFBRSxJQUFBLEVBQW1DO0VBQUEsSUFBQUMscUJBQUE7RUFBQSxJQUFuQkMsWUFBWSxHQUFBRixJQUFBLENBQXRCRyxRQUFRO0VBQzFDLElBQUFDLFNBQUEsR0FBd0MsSUFBQUMsZUFBUSxFQUFDLEdBQUcsQ0FBQztJQUFBQyxVQUFBLE9BQUFDLGVBQUEsQ0FBQUMsT0FBQSxFQUFBSixTQUFBO0lBQTlDSyxZQUFZLEdBQUFILFVBQUE7SUFBRUksZUFBZSxHQUFBSixVQUFBO0VBQ3BDLElBQUFLLFVBQUEsR0FBZ0MsSUFBQU4sZUFBUSxFQUFDLEtBQUssQ0FBQztJQUFBTyxVQUFBLE9BQUFMLGVBQUEsQ0FBQUMsT0FBQSxFQUFBRyxVQUFBO0lBQXhDRSxRQUFRLEdBQUFELFVBQUE7SUFBRUUsV0FBVyxHQUFBRixVQUFBO0VBQzVCLElBQU1HLGFBQWEsR0FBRyxJQUFBQyxhQUFNLEVBQUMsSUFBSSxDQUFDO0VBR2xDLElBQU1DLGdCQUFnQixHQUFHLElBQUFDLGtCQUFXLEVBQUMsVUFBQ0MsS0FBSyxFQUFLO0lBQzlDLElBQU1DLE9BQU8sR0FBRztNQUNkQyxFQUFFLEVBQUUsR0FBRztNQUNQQyxFQUFFLEVBQUUsR0FBRztNQUNQQyxFQUFFLEVBQUUsR0FBRztNQUNQQyxFQUFFLEVBQUUsR0FBRztNQUNQQyxFQUFFLEVBQUUsR0FBRztNQUNQQyxFQUFFLEVBQUUsR0FBRztNQUNQQyxLQUFLLEVBQUU7SUFDVCxDQUFDO0lBQ0QsT0FBT1AsT0FBTyxDQUFDRCxLQUFLLENBQUMsSUFBSUEsS0FBSztFQUNoQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBR04sSUFBTVMsdUJBQXVCLEdBQUcsSUFBQVYsa0JBQVc7SUFBQSxJQUFBVyxLQUFBLE9BQUFDLGtCQUFBLENBQUF0QixPQUFBLEVBQUMsV0FBT3VCLFFBQVEsRUFBSztNQUM5RCxJQUFJLENBQUNDLDBCQUFlLENBQUNELFFBQVEsQ0FBQyxFQUFFO01BRWhDckIsZUFBZSxDQUFDcUIsUUFBUSxDQUFDO01BQ3pCLElBQUk7UUFDRixNQUFNRSxxQkFBWSxDQUFDQyxPQUFPLENBQUNyQyxnQkFBZ0IsRUFBRWtDLFFBQVEsQ0FBQztNQUN4RCxDQUFDLENBQUMsT0FBT0ksS0FBSyxFQUFFO1FBQ2RDLE9BQU8sQ0FBQ0QsS0FBSyxDQUFDLGlDQUFpQyxFQUFFQSxLQUFLLENBQUM7TUFDekQ7SUFDRixDQUFDO0lBQUEsaUJBQUFFLEVBQUE7TUFBQSxPQUFBUixLQUFBLENBQUFTLEtBQUEsT0FBQUMsU0FBQTtJQUFBO0VBQUEsS0FBRSxFQUFFLENBQUM7RUFHTixJQUFBQyxnQkFBUyxFQUFDLFlBQU07SUFDZCxJQUFNQyxlQUFlO01BQUEsSUFBQUMsS0FBQSxPQUFBWixrQkFBQSxDQUFBdEIsT0FBQSxFQUFHLGFBQVk7UUFDbEMsSUFBSTtVQUNGLElBQU1tQyxVQUFVLFNBQVNWLHFCQUFZLENBQUNXLE9BQU8sQ0FBQy9DLGdCQUFnQixDQUFDO1VBRS9ELElBQUk4QyxVQUFVLElBQUlYLDBCQUFlLENBQUNXLFVBQVUsQ0FBQyxFQUFFO1lBQzdDakMsZUFBZSxDQUFDTyxnQkFBZ0IsQ0FBQzBCLFVBQVUsQ0FBQyxDQUFDO1VBQy9DLENBQUMsTUFBTSxJQUFJekMsWUFBWSxZQUFaQSxZQUFZLENBQUVPLFlBQVksRUFBRTtZQUNyQ0MsZUFBZSxDQUFDTyxnQkFBZ0IsQ0FBQ2YsWUFBWSxDQUFDTyxZQUFZLENBQUMsQ0FBQztVQUM5RDtVQUVBSyxXQUFXLENBQUMsSUFBSSxDQUFDO1FBQ25CLENBQUMsQ0FBQyxPQUFPcUIsS0FBSyxFQUFFO1VBQ2RDLE9BQU8sQ0FBQ0QsS0FBSyxDQUFDLGlDQUFpQyxFQUFFQSxLQUFLLENBQUM7VUFDdkRyQixXQUFXLENBQUMsSUFBSSxDQUFDO1FBQ25CO01BQ0YsQ0FBQztNQUFBLGdCQWZLMkIsZUFBZUEsQ0FBQTtRQUFBLE9BQUFDLEtBQUEsQ0FBQUosS0FBQSxPQUFBQyxTQUFBO01BQUE7SUFBQSxHQWVwQjtJQUVERSxlQUFlLENBQUMsQ0FBQztFQUNuQixDQUFDLEVBQUUsQ0FBQ3ZDLFlBQVksQ0FBQyxDQUFDO0VBS2xCLElBQU0yQyxVQUFVLEdBQUcsRUFBQTVDLHFCQUFBLEdBQUErQiwwQkFBZSxDQUFDdkIsWUFBWSxDQUFDLHFCQUE3QlIscUJBQUEsQ0FBK0I2QyxLQUFLLEtBQUksU0FBUztFQUVwRSxPQUFPO0lBQ0xyQyxZQUFZLEVBQVpBLFlBQVk7SUFDWm1CLHVCQUF1QixFQUF2QkEsdUJBQXVCO0lBQ3ZCaUIsVUFBVSxFQUFWQSxVQUFVO0lBQ1ZoQyxRQUFRLEVBQVJBO0VBQ0YsQ0FBQztBQUNILENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=