{"version":3,"names":["useMemo","ProgressCard","jsx","_jsx","cov_1pyas5t8fv","s","AssessmentProgress","_ref","_ref$currentSection","currentSection","b","_ref$totalSections","totalSections","_ref$currentQuestion","currentQuestion","_ref$totalQuestions","totalQuestions","_ref$answeredQuestion","answeredQuestionsInSection","_ref$levelColor","levelColor","f","sectionProgress","Math","round","title","subtitle","progress","completed","total","unit","expandable","expanded","onToggleExpand","undefined","categoryData","onCategoryPress"],"sources":["index.js"],"sourcesContent":["// AssessmentProgress/index.js - VERSION CORRIGÃ‰E AVEC useMemo\r\n\r\nimport { useMemo } from \"react\";\r\nimport ProgressCard from \"../../../../components/ui/ProgressCard\";\r\n\r\n/**\r\n * ðŸ“Š AssessmentProgress - Version corrigÃ©e avec mÃ©morisation\r\n * âœ… Ã‰vite les boucles infinies avec useMemo\r\n * âœ… Performance optimisÃ©e\r\n */\r\nconst AssessmentProgress = ({\r\n  currentSection = 1,\r\n  totalSections = 0,\r\n  currentQuestion = 1,\r\n  totalQuestions = 0,\r\n  answeredQuestionsInSection = 0,\r\n  levelColor = \"#3b82f6\",\r\n}) => {\r\n  \r\n  // âœ… MÃ‰MORISER le calcul de progression de section\r\n  const sectionProgress = useMemo(() => {\r\n    return totalQuestions > 0 \r\n      ? Math.round((answeredQuestionsInSection / totalQuestions) * 100)\r\n      : 0;\r\n  }, [answeredQuestionsInSection, totalQuestions]);\r\n\r\n  return (\r\n    <ProgressCard\r\n      title=\"Progression\"\r\n      subtitle={`Section ${currentSection}/${totalSections} â€¢ Question ${currentQuestion}/${totalQuestions}`}\r\n      progress={sectionProgress}\r\n      completed={answeredQuestionsInSection}\r\n      total={totalQuestions}\r\n      unit=\"questions\"\r\n      levelColor={levelColor}\r\n      expandable={false}\r\n      expanded={false}\r\n      onToggleExpand={undefined}\r\n      categoryData={[]}\r\n      onCategoryPress={undefined}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AssessmentProgress;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAASA,OAAO,QAAQ,OAAO;AAC/B,OAAOC,YAAY,MAAM,wCAAwC;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAAC,cAAA,GAAAC,CAAA;AAOlE,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAAC,IAAA,EAOlB;EAAA,IAAAC,mBAAA,GAAAD,IAAA,CANJE,cAAc;IAAdA,cAAc,GAAAD,mBAAA,eAAAJ,cAAA,GAAAM,CAAA,UAAG,CAAC,IAAAF,mBAAA;IAAAG,kBAAA,GAAAJ,IAAA,CAClBK,aAAa;IAAbA,aAAa,GAAAD,kBAAA,eAAAP,cAAA,GAAAM,CAAA,UAAG,CAAC,IAAAC,kBAAA;IAAAE,oBAAA,GAAAN,IAAA,CACjBO,eAAe;IAAfA,eAAe,GAAAD,oBAAA,eAAAT,cAAA,GAAAM,CAAA,UAAG,CAAC,IAAAG,oBAAA;IAAAE,mBAAA,GAAAR,IAAA,CACnBS,cAAc;IAAdA,cAAc,GAAAD,mBAAA,eAAAX,cAAA,GAAAM,CAAA,UAAG,CAAC,IAAAK,mBAAA;IAAAE,qBAAA,GAAAV,IAAA,CAClBW,0BAA0B;IAA1BA,0BAA0B,GAAAD,qBAAA,eAAAb,cAAA,GAAAM,CAAA,UAAG,CAAC,IAAAO,qBAAA;IAAAE,eAAA,GAAAZ,IAAA,CAC9Ba,UAAU;IAAVA,UAAU,GAAAD,eAAA,eAAAf,cAAA,GAAAM,CAAA,UAAG,SAAS,IAAAS,eAAA;EAAAf,cAAA,GAAAiB,CAAA;EAItB,IAAMC,eAAe,IAAAlB,cAAA,GAAAC,CAAA,OAAGL,OAAO,CAAC,YAAM;IAAAI,cAAA,GAAAiB,CAAA;IAAAjB,cAAA,GAAAC,CAAA;IACpC,OAAOW,cAAc,GAAG,CAAC,IAAAZ,cAAA,GAAAM,CAAA,UACrBa,IAAI,CAACC,KAAK,CAAEN,0BAA0B,GAAGF,cAAc,GAAI,GAAG,CAAC,KAAAZ,cAAA,GAAAM,CAAA,UAC/D,CAAC;EACP,CAAC,EAAE,CAACQ,0BAA0B,EAAEF,cAAc,CAAC,CAAC;EAACZ,cAAA,GAAAC,CAAA;EAEjD,OACEF,IAAA,CAACF,YAAY;IACXwB,KAAK,EAAC,aAAa;IACnBC,QAAQ,EAAE,WAAWjB,cAAc,IAAIG,aAAa,eAAeE,eAAe,IAAIE,cAAc,EAAG;IACvGW,QAAQ,EAAEL,eAAgB;IAC1BM,SAAS,EAAEV,0BAA2B;IACtCW,KAAK,EAAEb,cAAe;IACtBc,IAAI,EAAC,WAAW;IAChBV,UAAU,EAAEA,UAAW;IACvBW,UAAU,EAAE,KAAM;IAClBC,QAAQ,EAAE,KAAM;IAChBC,cAAc,EAAEC,SAAU;IAC1BC,YAAY,EAAE,EAAG;IACjBC,eAAe,EAAEF;EAAU,CAC5B,CAAC;AAEN,CAAC;AAED,eAAe5B,kBAAkB","ignoreList":[]}