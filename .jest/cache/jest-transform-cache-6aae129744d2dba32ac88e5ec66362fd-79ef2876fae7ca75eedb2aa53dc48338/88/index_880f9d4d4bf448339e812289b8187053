7fd2f66c7f0c2d629f12139d71355dde
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _HeroCard = _interopRequireDefault(require("../../../../components/ui/HeroCard"));
var _RevealButton = _interopRequireDefault(require("../../../../components/ui/RevealButton"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
function cov_bw36uwtyo() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\exercises\\phrases\\PhraseCard\\index.js";
  var hash = "43e03eb22a42f70159c52bbf7c5fdbc288fae03a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\exercises\\phrases\\PhraseCard\\index.js",
    statementMap: {
      "0": {
        start: {
          line: 12,
          column: 19
        },
        end: {
          line: 60,
          column: 1
        }
      },
      "1": {
        start: {
          line: 18,
          column: 17
        },
        end: {
          line: 18,
          column: 41
        }
      },
      "2": {
        start: {
          line: 21,
          column: 2
        },
        end: {
          line: 32,
          column: 3
        }
      },
      "3": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 31,
          column: 6
        }
      },
      "4": {
        start: {
          line: 35,
          column: 17
        },
        end: {
          line: 35,
          column: 35
        }
      },
      "5": {
        start: {
          line: 36,
          column: 22
        },
        end: {
          line: 36,
          column: 44
        }
      },
      "6": {
        start: {
          line: 38,
          column: 2
        },
        end: {
          line: 59,
          column: 4
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 19
          },
          end: {
            line: 12,
            column: 20
          }
        },
        loc: {
          start: {
            line: 17,
            column: 6
          },
          end: {
            line: 60,
            column: 1
          }
        },
        line: 17
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 2
          },
          end: {
            line: 16,
            column: 24
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 16,
            column: 24
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 2
          },
          end: {
            line: 32,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 2
          },
          end: {
            line: 32,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0],
      "1": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "43e03eb22a42f70159c52bbf7c5fdbc288fae03a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_bw36uwtyo = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_bw36uwtyo();
cov_bw36uwtyo().s[0]++;
var PhraseCard = function PhraseCard(_ref) {
  var phraseData = _ref.phraseData,
    showTranslation = _ref.showTranslation,
    onToggleTranslation = _ref.onToggleTranslation,
    _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? (cov_bw36uwtyo().b[0][0]++, "#5E60CE") : _ref$levelColor;
  cov_bw36uwtyo().f[0]++;
  var styles = (cov_bw36uwtyo().s[1]++, (0, _style.default)(levelColor));
  cov_bw36uwtyo().s[2]++;
  if (!phraseData) {
    cov_bw36uwtyo().b[1][0]++;
    cov_bw36uwtyo().s[3]++;
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.container,
      children: (0, _jsxRuntime.jsx)(_HeroCard.default, {
        content: "Loading phrase...",
        fontSize: 24,
        levelColor: levelColor,
        showUnderline: false
      })
    });
  } else {
    cov_bw36uwtyo().b[1][1]++;
  }
  var phrase = (cov_bw36uwtyo().s[4]++, phraseData.english);
  var translation = (cov_bw36uwtyo().s[5]++, phraseData.translation);
  cov_bw36uwtyo().s[6]++;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsx)(_HeroCard.default, {
      content: phrase,
      fontSize: 28,
      levelColor: levelColor,
      showUnderline: true,
      lineHeight: 36
    }), (0, _jsxRuntime.jsx)(_RevealButton.default, {
      isRevealed: showTranslation,
      revealedContent: translation,
      revealText: "Reveal Translation",
      hideText: "Hide Translation",
      onToggle: onToggleTranslation,
      levelColor: levelColor
    })]
  });
};
var _default = exports.default = PhraseCard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,