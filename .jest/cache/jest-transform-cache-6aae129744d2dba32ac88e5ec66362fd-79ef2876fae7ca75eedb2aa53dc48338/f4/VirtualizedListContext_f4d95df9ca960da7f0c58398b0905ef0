2c1677b1e402588fa1ecde2152caff04
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VirtualizedListCellContextProvider = VirtualizedListCellContextProvider;
exports.VirtualizedListContext = void 0;
exports.VirtualizedListContextProvider = VirtualizedListContextProvider;
exports.VirtualizedListContextResetter = VirtualizedListContextResetter;
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var VirtualizedListContext = exports.VirtualizedListContext = React.createContext(null);
if (__DEV__) {
  VirtualizedListContext.displayName = 'VirtualizedListContext';
}
function VirtualizedListContextResetter(_ref) {
  var children = _ref.children;
  return (0, _jsxRuntime.jsx)(VirtualizedListContext.Provider, {
    value: null,
    children: children
  });
}
function VirtualizedListContextProvider(_ref2) {
  var children = _ref2.children,
    value = _ref2.value;
  var context = (0, _react.useMemo)(function () {
    return {
      cellKey: null,
      getScrollMetrics: value.getScrollMetrics,
      horizontal: value.horizontal,
      getOutermostParentListRef: value.getOutermostParentListRef,
      registerAsNestedChild: value.registerAsNestedChild,
      unregisterAsNestedChild: value.unregisterAsNestedChild
    };
  }, [value.getScrollMetrics, value.horizontal, value.getOutermostParentListRef, value.registerAsNestedChild, value.unregisterAsNestedChild]);
  return (0, _jsxRuntime.jsx)(VirtualizedListContext.Provider, {
    value: context,
    children: children
  });
}
function VirtualizedListCellContextProvider(_ref3) {
  var cellKey = _ref3.cellKey,
    children = _ref3.children;
  var currContext = (0, _react.useContext)(VirtualizedListContext);
  var context = (0, _react.useMemo)(function () {
    return currContext == null ? null : Object.assign({}, currContext, {
      cellKey: cellKey
    });
  }, [currContext, cellKey]);
  return (0, _jsxRuntime.jsx)(VirtualizedListContext.Provider, {
    value: context,
    children: children
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJSZWFjdCIsIl9qc3hSdW50aW1lIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsIl90IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJWaXJ0dWFsaXplZExpc3RDb250ZXh0IiwiZXhwb3J0cyIsImNyZWF0ZUNvbnRleHQiLCJfX0RFVl9fIiwiZGlzcGxheU5hbWUiLCJWaXJ0dWFsaXplZExpc3RDb250ZXh0UmVzZXR0ZXIiLCJfcmVmIiwiY2hpbGRyZW4iLCJqc3giLCJQcm92aWRlciIsInZhbHVlIiwiVmlydHVhbGl6ZWRMaXN0Q29udGV4dFByb3ZpZGVyIiwiX3JlZjIiLCJjb250ZXh0IiwidXNlTWVtbyIsImNlbGxLZXkiLCJnZXRTY3JvbGxNZXRyaWNzIiwiaG9yaXpvbnRhbCIsImdldE91dGVybW9zdFBhcmVudExpc3RSZWYiLCJyZWdpc3RlckFzTmVzdGVkQ2hpbGQiLCJ1bnJlZ2lzdGVyQXNOZXN0ZWRDaGlsZCIsIlZpcnR1YWxpemVkTGlzdENlbGxDb250ZXh0UHJvdmlkZXIiLCJfcmVmMyIsImN1cnJDb250ZXh0IiwidXNlQ29udGV4dCIsImFzc2lnbiJdLCJzb3VyY2VzIjpbIlZpcnR1YWxpemVkTGlzdENvbnRleHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCB0eXBlb2YgVmlydHVhbGl6ZWRMaXN0IGZyb20gJy4vVmlydHVhbGl6ZWRMaXN0JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHt1c2VDb250ZXh0LCB1c2VNZW1vfSBmcm9tICdyZWFjdCc7XG5cbnR5cGUgQ29udGV4dCA9ICRSZWFkT25seTx7XG4gIGNlbGxLZXk6ID9zdHJpbmcsXG4gIGdldFNjcm9sbE1ldHJpY3M6ICgpID0+IHtcbiAgICBjb250ZW50TGVuZ3RoOiBudW1iZXIsXG4gICAgZE9mZnNldDogbnVtYmVyLFxuICAgIGR0OiBudW1iZXIsXG4gICAgb2Zmc2V0OiBudW1iZXIsXG4gICAgdGltZXN0YW1wOiBudW1iZXIsXG4gICAgdmVsb2NpdHk6IG51bWJlcixcbiAgICB2aXNpYmxlTGVuZ3RoOiBudW1iZXIsXG4gICAgem9vbVNjYWxlOiBudW1iZXIsXG4gIH0sXG4gIGhvcml6b250YWw6ID9ib29sZWFuLFxuICBnZXRPdXRlcm1vc3RQYXJlbnRMaXN0UmVmOiAoKSA9PiBSZWFjdC5FbGVtZW50UmVmPFZpcnR1YWxpemVkTGlzdD4sXG4gIHJlZ2lzdGVyQXNOZXN0ZWRDaGlsZDogKHtcbiAgICBjZWxsS2V5OiBzdHJpbmcsXG4gICAgcmVmOiBSZWFjdC5FbGVtZW50UmVmPFZpcnR1YWxpemVkTGlzdD4sXG4gIH0pID0+IHZvaWQsXG4gIHVucmVnaXN0ZXJBc05lc3RlZENoaWxkOiAoe3JlZjogUmVhY3QuRWxlbWVudFJlZjxWaXJ0dWFsaXplZExpc3Q+fSkgPT4gdm9pZCxcbn0+O1xuXG5leHBvcnQgY29uc3QgVmlydHVhbGl6ZWRMaXN0Q29udGV4dDogUmVhY3QuQ29udGV4dDw/Q29udGV4dD4gPVxuICBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKF9fREVWX18pIHtcbiAgVmlydHVhbGl6ZWRMaXN0Q29udGV4dC5kaXNwbGF5TmFtZSA9ICdWaXJ0dWFsaXplZExpc3RDb250ZXh0Jztcbn1cblxuLyoqXG4gKiBSZXNldHMgdGhlIGNvbnRleHQuIEludGVuZGVkIGZvciB1c2UgYnkgcG9ydGFsLWxpa2UgY29tcG9uZW50cyAoZS5nLiBNb2RhbCkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBWaXJ0dWFsaXplZExpc3RDb250ZXh0UmVzZXR0ZXIoe1xuICBjaGlsZHJlbixcbn06IHtcbiAgY2hpbGRyZW46IFJlYWN0Lk5vZGUsXG59KTogUmVhY3QuTm9kZSB7XG4gIHJldHVybiAoXG4gICAgPFZpcnR1YWxpemVkTGlzdENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e251bGx9PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvVmlydHVhbGl6ZWRMaXN0Q29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBjb250ZXh0IHdpdGggbWVtb2l6YXRpb24uIEludGVuZGVkIHRvIGJlIHVzZWQgYnkgYFZpcnR1YWxpemVkTGlzdGAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBWaXJ0dWFsaXplZExpc3RDb250ZXh0UHJvdmlkZXIoe1xuICBjaGlsZHJlbixcbiAgdmFsdWUsXG59OiB7XG4gIGNoaWxkcmVuOiBSZWFjdC5Ob2RlLFxuICB2YWx1ZTogQ29udGV4dCxcbn0pOiBSZWFjdC5Ob2RlIHtcbiAgLy8gQXZvaWQgc2V0dGluZyBhIG5ld2x5IGNyZWF0ZWQgY29udGV4dCBvYmplY3QgaWYgdGhlIHZhbHVlcyBhcmUgaWRlbnRpY2FsLlxuICBjb25zdCBjb250ZXh0ID0gdXNlTWVtbyhcbiAgICAoKSA9PiAoe1xuICAgICAgY2VsbEtleTogbnVsbCxcbiAgICAgIGdldFNjcm9sbE1ldHJpY3M6IHZhbHVlLmdldFNjcm9sbE1ldHJpY3MsXG4gICAgICBob3Jpem9udGFsOiB2YWx1ZS5ob3Jpem9udGFsLFxuICAgICAgZ2V0T3V0ZXJtb3N0UGFyZW50TGlzdFJlZjogdmFsdWUuZ2V0T3V0ZXJtb3N0UGFyZW50TGlzdFJlZixcbiAgICAgIHJlZ2lzdGVyQXNOZXN0ZWRDaGlsZDogdmFsdWUucmVnaXN0ZXJBc05lc3RlZENoaWxkLFxuICAgICAgdW5yZWdpc3RlckFzTmVzdGVkQ2hpbGQ6IHZhbHVlLnVucmVnaXN0ZXJBc05lc3RlZENoaWxkLFxuICAgIH0pLFxuICAgIFtcbiAgICAgIHZhbHVlLmdldFNjcm9sbE1ldHJpY3MsXG4gICAgICB2YWx1ZS5ob3Jpem9udGFsLFxuICAgICAgdmFsdWUuZ2V0T3V0ZXJtb3N0UGFyZW50TGlzdFJlZixcbiAgICAgIHZhbHVlLnJlZ2lzdGVyQXNOZXN0ZWRDaGlsZCxcbiAgICAgIHZhbHVlLnVucmVnaXN0ZXJBc05lc3RlZENoaWxkLFxuICAgIF0sXG4gICk7XG4gIHJldHVybiAoXG4gICAgPFZpcnR1YWxpemVkTGlzdENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NvbnRleHR9PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvVmlydHVhbGl6ZWRMaXN0Q29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBgY2VsbEtleWAuIEludGVuZGVkIHRvIGJlIHVzZWQgYnkgYFZpcnR1YWxpemVkTGlzdGAgZm9yIGVhY2ggY2VsbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFZpcnR1YWxpemVkTGlzdENlbGxDb250ZXh0UHJvdmlkZXIoe1xuICBjZWxsS2V5LFxuICBjaGlsZHJlbixcbn06IHtcbiAgY2VsbEtleTogc3RyaW5nLFxuICBjaGlsZHJlbjogUmVhY3QuTm9kZSxcbn0pOiBSZWFjdC5Ob2RlIHtcbiAgLy8gQXZvaWQgc2V0dGluZyBhIG5ld2x5IGNyZWF0ZWQgY29udGV4dCBvYmplY3QgaWYgdGhlIHZhbHVlcyBhcmUgaWRlbnRpY2FsLlxuICBjb25zdCBjdXJyQ29udGV4dCA9IHVzZUNvbnRleHQoVmlydHVhbGl6ZWRMaXN0Q29udGV4dCk7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VNZW1vKFxuICAgICgpID0+IChjdXJyQ29udGV4dCA9PSBudWxsID8gbnVsbCA6IHsuLi5jdXJyQ29udGV4dCwgY2VsbEtleX0pLFxuICAgIFtjdXJyQ29udGV4dCwgY2VsbEtleV0sXG4gICk7XG4gIHJldHVybiAoXG4gICAgPFZpcnR1YWxpemVkTGlzdENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NvbnRleHR9PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvVmlydHVhbGl6ZWRMaXN0Q29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVlBLElBQUFBLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUErQixJQUFBQyxLQUFBLEdBQUFILE1BQUE7QUFBQSxJQUFBSSxXQUFBLEdBQUFGLE9BQUE7QUFBQSxTQUFBRCx3QkFBQUksQ0FBQSxFQUFBQyxDQUFBLDZCQUFBQyxPQUFBLE1BQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQU4sdUJBQUEsWUFBQUEsd0JBQUFJLENBQUEsRUFBQUMsQ0FBQSxTQUFBQSxDQUFBLElBQUFELENBQUEsSUFBQUEsQ0FBQSxDQUFBSyxVQUFBLFNBQUFMLENBQUEsTUFBQU0sQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsS0FBQUMsU0FBQSxRQUFBQyxPQUFBLEVBQUFWLENBQUEsaUJBQUFBLENBQUEsdUJBQUFBLENBQUEseUJBQUFBLENBQUEsU0FBQVEsQ0FBQSxNQUFBRixDQUFBLEdBQUFMLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLFFBQUFHLENBQUEsQ0FBQUssR0FBQSxDQUFBWCxDQUFBLFVBQUFNLENBQUEsQ0FBQU0sR0FBQSxDQUFBWixDQUFBLEdBQUFNLENBQUEsQ0FBQU8sR0FBQSxDQUFBYixDQUFBLEVBQUFRLENBQUEsY0FBQU0sRUFBQSxJQUFBZCxDQUFBLGdCQUFBYyxFQUFBLE9BQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBaEIsQ0FBQSxFQUFBYyxFQUFBLE9BQUFQLENBQUEsSUFBQUQsQ0FBQSxHQUFBVyxN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