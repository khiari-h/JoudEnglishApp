1efe0d85eb8c0c35e35e735442d14a56
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.areEqual = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _styles = require("../../../../styles");
var _StyledText = require("../StyledText");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var CategoryPill = _react.default.memo(function (_ref) {
  var category = _ref.category,
    selected = _ref.selected,
    onSelectCategory = _ref.onSelectCategory;
  var animatedScale = (0, _react.useRef)(new _reactNative.Animated.Value(1)).current;
  var handlePressIn = (0, _react.useCallback)(function () {
    _reactNative.Animated.timing(animatedScale, {
      toValue: 0.95,
      duration: 150,
      useNativeDriver: true
    }).start();
  }, [animatedScale]);
  var handlePressOut = (0, _react.useCallback)(function () {
    _reactNative.Animated.timing(animatedScale, {
      toValue: 1,
      duration: 150,
      useNativeDriver: true
    }).start();
  }, [animatedScale]);
  var handlePress = (0, _react.useCallback)(function () {
    onSelectCategory == null || onSelectCategory(category.id);
  }, [category.id, onSelectCategory]);
  return (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
    testID: `category-pill-${category.id}`,
    style: [styles.categoryPill, selected && styles.categoryPillSelected, {
      transform: [{
        scale: animatedScale
      }]
    }],
    children: (0, _jsxRuntime.jsx)(_reactNative.Pressable, {
      onPressIn: handlePressIn,
      onPressOut: handlePressOut,
      onPress: handlePress,
      style: styles.pressable,
      accessible: true,
      accessibilityRole: "button",
      accessibilityLabel: category.name,
      accessibilityState: {
        selected: selected
      },
      children: (0, _jsxRuntime.jsxs)(_StyledText.StyledText, {
        style: styles.categoryPillText,
        children: [category.name, selected && ' âœ¨']
      })
    })
  });
});
CategoryPill.propTypes = {
  category: _propTypes.default.shape({
    id: _propTypes.default.string.isRequired,
    name: _propTypes.default.string.isRequired
  }).isRequired,
  selected: _propTypes.default.bool.isRequired,
  onSelectCategory: _propTypes.default.func
};
var areEqual = exports.areEqual = function areEqual(prevProps, nextProps) {
  return prevProps.selected === nextProps.selected && prevProps.category.id === nextProps.category.id;
};
var CategorySelector = function CategorySelector(_ref2) {
  var categories = _ref2.categories,
    selectedCategory = _ref2.selectedCategory,
    onSelectCategory = _ref2.onSelectCategory;
  var scrollViewRef = (0, _react.useRef)(null);
  var isAnimatingRef = (0, _react.useRef)(false);
  (0, _react.useEffect)(function () {
    if (selectedCategory) {
      var selectedIndex = categories.findIndex(function (cat) {
        return cat.id === selectedCategory;
      });
      if (selectedIndex !== -1) {
        if (scrollViewRef.current) {
          scrollViewRef.current.scrollTo({
            x: selectedIndex * 100,
            y: 0,
            animated: true
          });
        }
      }
    }
  }, [categories, selectedCategory]);
  var handleSelectCategory = (0, _react.useCallback)(function (categoryId) {
    if (!isAnimatingRef.current) {
      isAnimatingRef.current = true;
      onSelectCategory == null || onSelectCategory(categoryId);
      setTimeout(function () {
        isAnimatingRef.current = false;
      }, 500);
    }
  }, [onSelectCategory]);
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: styles.container,
    children: (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
      ref: scrollViewRef,
      testID: "category-selector-scroll-view",
      horizontal: true,
      showsHorizontalScrollIndicator: false,
      contentContainerStyle: styles.scrollViewContent,
      children: categories.map(function (category) {
        return (0, _jsxRuntime.jsx)(CategoryPill, {
          category: category,
          selected: category.id === selectedCategory,
          onSelectCategory: handleSelectCategory
        }, category.id);
      })
    })
  });
};
CategorySelector.propTypes = {
  categories: _propTypes.default.arrayOf(_propTypes.default.shape({
    id: _propTypes.default.string.isRequired,
    name: _propTypes.default.string.isRequired
  })).isRequired,
  selectedCategory: _propTypes.default.string,
  onSelectCategory: _propTypes.default.func
};
var styles = _reactNative.StyleSheet.create({
  container: {
    paddingVertical: _styles.metrics.small
  },
  scrollViewContent: {
    paddingHorizontal: _styles.metrics.large
  },
  categoryPill: {
    borderWidth: 1,
    borderColor: _styles.colors.gray,
    borderRadius: 20,
    paddingHorizontal: _styles.metrics.small,
    paddingVertical: _styles.metrics.tiny,
    marginRight: _styles.metrics.small
  },
  categoryPillSelected: {
    backgroundColor: _styles.colors.primary,
    borderColor: _styles.colors.primary
  },
  pressable: {
    padding: _styles.metrics.small
  },
  categoryPillText: {
    color: _styles.colors.dark,
    fontWeight: 'bold'
  }
});
var _default = exports.default = _react.default.memo(CategorySelector, areEqual);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,