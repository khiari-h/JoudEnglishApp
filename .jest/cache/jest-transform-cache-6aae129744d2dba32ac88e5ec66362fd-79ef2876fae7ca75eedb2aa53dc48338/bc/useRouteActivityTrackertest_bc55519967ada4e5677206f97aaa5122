76a8a38ddba457c48c689973f15d5f07
_getJestObj().mock('expo-router', function () {
  return {
    useSegments: jest.fn(function () {
      return [];
    }),
    usePathname: jest.fn(function () {
      return '/';
    })
  };
});
_getJestObj().mock('../../src/hooks/useActivityMetrics', function () {
  return {
    __esModule: true,
    default: jest.fn(function () {
      return {
        startSession: jest.fn(),
        endSession: jest.fn(),
        updateStreak: jest.fn()
      };
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactNative = require("@testing-library/react-native");
var _useRouteActivityTracker = _interopRequireDefault(require("../../src/hooks/useRouteActivityTracker"));
function _getJestObj() {
  var _require1 = require("@jest/globals"),
    jest = _require1.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useRouteActivityTracker', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('Fonctions utilitaires extraites', function () {
    it('devrait d√©tecter correctement les exercices', function () {
      var mockStartSession = jest.fn();
      var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
      useActivityMetrics.mockReturnValue({
        startSession: mockStartSession,
        endSession: jest.fn(),
        updateStreak: jest.fn()
      });
      var _require = require('expo-router'),
        useSegments = _require.useSegments;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');
      jest.clearAllMocks();
      useSegments.mockReturnValue(['level', 'GrammarExercise']);
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('GrammarExercise');
      jest.clearAllMocks();
      useSegments.mockReturnValue(['level', 'Assessment']);
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('Assessment');
    });
    it('devrait g√©rer les transitions entre exercices', function () {
      var mockStartSession = jest.fn();
      var mockEndSession = jest.fn();
      var mockUpdateStreak = jest.fn();
      var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
      useActivityMetrics.mockReturnValue({
        startSession: mockStartSession,
        endSession: mockEndSession,
        updateStreak: mockUpdateStreak
      });
      var _require2 = require('expo-router'),
        useSegments = _require2.useSegments,
        usePathname = _require2.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');
      expect(mockStartSession).toHaveBeenCalledTimes(1);
      jest.clearAllMocks();
      useSegments.mockReturnValue(['level', 'GrammarExercise']);
      usePathname.mockReturnValue('/level/GrammarExercise');
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('GrammarExercise');
      expect(mockStartSession).toHaveBeenCalledTimes(1);
    });
    it('devrait g√©rer les erreurs de session gracieusement', function () {
      var mockStartSession = jest.fn().mockImplementation(function () {
        throw new Error('Erreur de session');
      });
      var mockEndSession = jest.fn();
      var mockUpdateStreak = jest.fn();
      var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
      useActivityMetrics.mockReturnValue({
        startSession: mockStartSession,
        endSession: mockEndSession,
        updateStreak: mockUpdateStreak
      });
      var _require3 = require('expo-router'),
        useSegments = _require3.useSegments,
        usePathname = _require3.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      expect(function () {
        (0, _reactNative.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        });
      }).not.toThrow();
    });
    it('devrait √©viter les re-d√©clenchements inutiles', function () {
      var mockStartSession = jest.fn();
      var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
      useActivityMetrics.mockReturnValue({
        startSession: mockStartSession,
        endSession: jest.fn(),
        updateStreak: jest.fn()
      });
      var _require4 = require('expo-router'),
        useSegments = _require4.useSegments,
        usePathname = _require4.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      var hook = (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledTimes(1);
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      hook.rerender();
      expect(mockStartSession).toHaveBeenCalledTimes(1);
    });
    it('devrait nettoyer correctement lors du d√©montage', function () {
      var mockEndSession = jest.fn();
      var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
      useActivityMetrics.mockReturnValue({
        startSession: jest.fn(),
        endSession: mockEndSession,
        updateStreak: jest.fn()
      });
      var _require5 = require('expo-router'),
        useSegments = _require5.useSegments,
        usePathname = _require5.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      var hook = (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      console.log('üîç DEBUG: Hook rendu, mockEndSession calls:', mockEndSession.mock.calls.length);
      expect(mockEndSession).not.toHaveBeenCalled();
      console.log('üîç DEBUG: Avant unmount, mockEndSession calls:', mockEndSession.mock.calls.length);
      hook.unmount();
      console.log('üîç DEBUG: Apr√®s unmount, mockEndSession calls:', mockEndSession.mock.calls.length);
      expect(mockEndSession).toHaveBeenCalled();
    });
  });
  it('devrait s\'initialiser sans erreur', function () {
    var _require6 = require('expo-router'),
      useSegments = _require6.useSegments,
      usePathname = _require6.usePathname;
    useSegments.mockReturnValue(['home']);
    usePathname.mockReturnValue('/home');
    expect(function () {
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
    }).not.toThrow();
  });
  it('devrait d√©tecter un exercice de vocabulaire', function () {
    var mockStartSession = jest.fn();
    var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
    useActivityMetrics.mockReturnValue({
      startSession: mockStartSession,
      endSession: jest.fn(),
      updateStreak: jest.fn()
    });
    var _require7 = require('expo-router'),
      useSegments = _require7.useSegments,
      usePathname = _require7.usePathname;
    useSegments.mockReturnValue(['level', 'VocabularyExercise']);
    usePathname.mockReturnValue('/level/VocabularyExercise');
    (0, _reactNative.renderHook)(function () {
      return (0, _useRouteActivityTracker.default)();
    });
    expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');
  });
  it('devrait d√©tecter un assessment', function () {
    var mockStartSession = jest.fn();
    var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
    useActivityMetrics.mockReturnValue({
      startSession: mockStartSession,
      endSession: jest.fn(),
      updateStreak: jest.fn()
    });
    var _require8 = require('expo-router'),
      useSegments = _require8.useSegments,
      usePathname = _require8.usePathname;
    useSegments.mockReturnValue(['level', 'Assessment']);
    usePathname.mockReturnValue('/level/Assessment');
    (0, _reactNative.renderHook)(function () {
      return (0, _useRouteActivityTracker.default)();
    });
    expect(mockStartSession).toHaveBeenCalledWith('Assessment');
  });
  it('ne devrait pas d√©marrer de session pour une page normale', function () {
    var mockStartSession = jest.fn();
    var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
    useActivityMetrics.mockReturnValue({
      startSession: mockStartSession,
      endSession: jest.fn(),
      updateStreak: jest.fn()
    });
    var _require9 = require('expo-router'),
      useSegments = _require9.useSegments,
      usePathname = _require9.usePathname;
    useSegments.mockReturnValue(['home', 'dashboard']);
    usePathname.mockReturnValue('/home/dashboard');
    (0, _reactNative.renderHook)(function () {
      return (0, _useRouteActivityTracker.default)();
    });
    expect(mockStartSession).not.toHaveBeenCalled();
  });
  it('devrait g√©rer les segments vides', function () {
    var mockStartSession = jest.fn();
    var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
    useActivityMetrics.mockReturnValue({
      startSession: mockStartSession,
      endSession: jest.fn(),
      updateStreak: jest.fn()
    });
    var _require0 = require('expo-router'),
      useSegments = _require0.useSegments,
      usePathname = _require0.usePathname;
    useSegments.mockReturnValue([]);
    usePathname.mockReturnValue('/');
    expect(function () {
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
    }).not.toThrow();
    expect(mockStartSession).not.toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,