76dc93021a8f3fe3da529f2c2cf80080
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    setItem: jest.fn(function () {
      return Promise.resolve();
    }),
    getItem: jest.fn(function () {
      return Promise.resolve(null);
    }),
    removeItem: jest.fn(function () {
      return Promise.resolve();
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = require("@testing-library/react");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useDailyWords = _interopRequireDefault(require("../../src/hooks/useDailyWords"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useDailyWords', function () {
  var MOCK_DATE_TODAY = new Date('2025-01-01T10:00:00.000Z');
  var MOCK_DATE_YESTERDAY = new Date('2024-12-31T10:00:00.000Z');
  beforeEach(function () {
    jest.useFakeTimers();
    jest.setSystemTime(MOCK_DATE_TODAY);
    _asyncStorage.default.getItem.mockClear();
    _asyncStorage.default.setItem.mockClear();
  });
  afterEach(function () {
    jest.runOnlyPendingTimers();
    jest.useRealTimers();
  });
  it('initializes with 0 wordsToday and isLoading true, then false', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook = (0, _react.renderHook)(function () {
        return (0, _useDailyWords.default)();
      }),
      result = _renderHook.result,
      waitForNextUpdate = _renderHook.waitForNextUpdate;
    expect(result.current.wordsToday).toBe(0);
    expect(result.current.isLoading).toBe(true);
    yield waitForNextUpdate();
    expect(result.current.isLoading).toBe(false);
    expect(_asyncStorage.default.getItem).toHaveBeenCalledTimes(6);
  }));
  it('calculates wordsToday based on today\'s completed words', (0, _asyncToGenerator2.default)(function* () {
    var mockVocabData = function mockVocabData(dateString) {
      return JSON.stringify({
        completedWords: {
          '0': [{
            word: 'hello',
            timestamp: dateString
          }, {
            word: 'world',
            timestamp: dateString
          }],
          '1': [{
            word: 'test',
            timestamp: dateString
          }]
        }
      });
    };
    _asyncStorage.default.getItem.mockResolvedValueOnce(mockVocabData(MOCK_DATE_TODAY.toDateString())).mockResolvedValueOnce(null).mockResolvedValueOnce(mockVocabData(MOCK_DATE_YESTERDAY.toDateString())).mockResolvedValue(null);
    var _renderHook2 = (0, _react.renderHook)(function () {
        return (0, _useDailyWords.default)();
      }),
      result = _renderHook2.result,
      waitForNextUpdate = _renderHook2.waitForNextUpdate;
    yield waitForNextUpdate();
    expect(result.current.wordsToday).toBe(3);
  }));
  it('refreshes wordsToday on refresh call', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook3 = (0, _react.renderHook)(function () {
        return (0, _useDailyWords.default)();
      }),
      result = _renderHook3.result,
      waitForNextUpdate = _renderHook3.waitForNextUpdate;
    yield waitForNextUpdate();
    _asyncStorage.default.getItem.mockClear();
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify({
      completedWords: {
        '0': [{
          word: 'new',
          timestamp: MOCK_DATE_TODAY.toDateString()
        }]
      }
    }));
    for (var i = 1; i < 6; i++) {
      _asyncStorage.default.getItem.mockResolvedValueOnce(null);
    }
    (0, _react.act)(function () {
      result.current.refresh();
    });
    yield waitForNextUpdate();
    expect(result.current.wordsToday).toBe(1);
    expect(_asyncStorage.default.getItem).toHaveBeenCalledTimes(6);
  }));
  it('resets wordsToday at midnight and reloads', (0, _asyncToGenerator2.default)(function* () {
    var mockVocabData = JSON.stringify({
      completedWords: {
        '0': [{
          word: 'today',
          timestamp: MOCK_DATE_TODAY.toDateString()
        }]
      }
    });
    _asyncStorage.default.getItem.mockResolvedValue(mockVocabData);
    var _renderHook4 = (0, _react.renderHook)(function () {
        return (0, _useDailyWords.default)();
      }),
      result = _renderHook4.result,
      waitForNextUpdate = _renderHook4.waitForNextUpdate;
    yield waitForNextUpdate();
    expect(result.current.wordsToday).toBe(6);
    jest.setSystemTime(new Date('2025-01-01T23:59:59.000Z'));
    jest.advanceTimersByTime(2000);
    _asyncStorage.default.getItem.mockResolvedValueOnce(mockVocabData);
    _asyncStorage.default.getItem.mockResolvedValue(null);
    _asyncStorage.default.getItem.mockResolvedValue(null);
    _asyncStorage.default.getItem.mockResolvedValue(null);
    _asyncStorage.default.getItem.mockResolvedValue(null);
    _asyncStorage.default.getItem.mockResolvedValue(null);
    yield waitForNextUpdate();
    expect(result.current.wordsToday).toBe(6);
    expect(_asyncStorage.default.getItem).toHaveBeenCalledTimes(12);
  }));
  it('handles AsyncStorage errors gracefully', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockRejectedValueOnce(new Error('AsyncStorage error'));
    var _renderHook5 = (0, _react.renderHook)(function () {
        return (0, _useDailyWords.default)();
      }),
      result = _renderHook5.result,
      waitForNextUpdate = _renderHook5.waitForNextUpdate;
    yield waitForNextUpdate();
    expect(result.current.isLoading).toBe(false);
    expect(result.current.wordsToday).toBe(0);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,