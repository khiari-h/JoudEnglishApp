480137b33c3a4811f390163b16bb34d4
_getJestObj().mock('@expo/vector-icons', function () {
  var _require = require('react-native'),
    Text = _require.Text;
  return {
    Ionicons: function Ionicons(props) {
      return (0, _jsxRuntime.jsx)(Text, {
        testID: `icon-${props.name}`,
        children: props.name
      });
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _OptionsList = _interopRequireDefault(require("../../../src/components/exercise-common/OptionsList"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('OptionsList', function () {
  var options = [{
    id: '1',
    text: 'Apple'
  }, {
    id: '2',
    text: 'Banana'
  }, {
    id: '3',
    text: 'Cherry'
  }];
  var onSelectOptionMock = jest.fn();
  afterEach(function () {
    onSelectOptionMock.mockClear();
  });
  it('renders all options correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
        options: options
      })),
      getByText = _render.getByText;
    expect(getByText('Apple')).toBeTruthy();
    expect(getByText('Banana')).toBeTruthy();
    expect(getByText('Cherry')).toBeTruthy();
  });
  it('calls onSelectOption with the correct id when an option is pressed', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
        options: options,
        onSelectOption: onSelectOptionMock
      })),
      getByText = _render2.getByText;
    _reactNative.fireEvent.press(getByText('Banana'));
    expect(onSelectOptionMock).toHaveBeenCalledWith('2');
  });
  it('does not call onSelectOption when disabled', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
        options: options,
        onSelectOption: onSelectOptionMock,
        disabled: true
      })),
      getByText = _render3.getByText;
    _reactNative.fireEvent.press(getByText('Banana'));
    expect(onSelectOptionMock).not.toHaveBeenCalled();
  });
  it('shows no correctness icons when an option is just selected', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
        options: options,
        selectedOptionId: '1'
      })),
      queryAllByTestId = _render4.queryAllByTestId;
    expect(queryAllByTestId('icon-checkmark-circle').length).toBe(0);
    expect(queryAllByTestId('icon-close-circle').length).toBe(0);
  });
  describe('Layout and Logic', function () {
    it('renders with vertical layout by default', function () {
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
          options: options
        })),
        getByTestId = _render5.getByTestId;
      expect(getByTestId('vertical-container').props.style).toEqual(expect.objectContaining({
        flexDirection: 'column'
      }));
    });
    it('renders with grid layout when specified', function () {
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
          options: options,
          layout: "grid"
        })),
        getByTestId = _render6.getByTestId;
      var style = getByTestId('grid-container').props.style;
      expect(style).toEqual(expect.objectContaining({
        flexDirection: 'row',
        flexWrap: 'wrap'
      }));
    });
    it('renders correctly with only one option in vertical layout', function () {
      var oneOption = [{
        id: '1',
        text: 'One'
      }];
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
          options: oneOption
        })),
        getByText = _render7.getByText;
      expect(getByText('One')).toBeTruthy();
    });
    it('renders correctly with only one option in grid layout', function () {
      var oneOption = [{
        id: '1',
        text: 'One'
      }];
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
          options: oneOption,
          layout: "grid"
        })),
        getByText = _render8.getByText;
      expect(getByText('One')).toBeTruthy();
    });
  });
  describe('when showing correct answer', function () {
    it('shows a checkmark for the correct answer', function () {
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
          options: options,
          selectedOptionId: '2',
          correctOptionId: '2',
          showCorrectAnswer: true
        })),
        getByTestId = _render9.getByTestId;
      expect(getByTestId('icon-checkmark-circle')).toBeTruthy();
    });
    it('shows a cross for the incorrect selection and a checkmark for the correct answer', function () {
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
          options: options,
          selectedOptionId: '1',
          correctOptionId: '2',
          showCorrectAnswer: true
        })),
        getByTestId = _render0.getByTestId,
        queryAllByTestId = _render0.queryAllByTestId;
      expect(getByTestId('icon-close-circle')).toBeTruthy();
      expect(queryAllByTestId('icon-checkmark-circle').length).toBe(1);
    });
    it('handles correct and incorrect answers in grid layout', function () {
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_OptionsList.default, {
          options: options,
          selectedOptionId: '1',
          correctOptionId: '2',
          showCorrectAnswer: true,
          layout: "grid"
        })),
        getByTestId = _render1.getByTestId,
        queryAllByTestId = _render1.queryAllByTestId;
      expect(getByTestId('icon-close-circle')).toBeTruthy();
      expect(queryAllByTestId('icon-checkmark-circle').length).toBe(1);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfcmVxdWlyZSIsInJlcXVpcmUiLCJUZXh0IiwiSW9uaWNvbnMiLCJwcm9wcyIsIl9qc3hSdW50aW1lIiwianN4IiwidGVzdElEIiwibmFtZSIsImNoaWxkcmVuIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9PcHRpb25zTGlzdCIsIl9yZXF1aXJlMiIsImplc3QiLCJkZXNjcmliZSIsIm9wdGlvbnMiLCJpZCIsInRleHQiLCJvblNlbGVjdE9wdGlvbk1vY2siLCJmbiIsImFmdGVyRWFjaCIsIm1vY2tDbGVhciIsIml0IiwiX3JlbmRlciIsInJlbmRlciIsImRlZmF1bHQiLCJnZXRCeVRleHQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwiX3JlbmRlcjIiLCJvblNlbGVjdE9wdGlvbiIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJfcmVuZGVyMyIsImRpc2FibGVkIiwibm90IiwidG9IYXZlQmVlbkNhbGxlZCIsIl9yZW5kZXI0Iiwic2VsZWN0ZWRPcHRpb25JZCIsInF1ZXJ5QWxsQnlUZXN0SWQiLCJsZW5ndGgiLCJ0b0JlIiwiX3JlbmRlcjUiLCJnZXRCeVRlc3RJZCIsInN0eWxlIiwidG9FcXVhbCIsIm9iamVjdENvbnRhaW5pbmciLCJmbGV4RGlyZWN0aW9uIiwiX3JlbmRlcjYiLCJsYXlvdXQiLCJmbGV4V3JhcCIsIm9uZU9wdGlvbiIsIl9yZW5kZXI3IiwiX3JlbmRlcjgiLCJfcmVuZGVyOSIsImNvcnJlY3RPcHRpb25JZCIsInNob3dDb3JyZWN0QW5zd2VyIiwiX3JlbmRlcjAiLCJfcmVuZGVyMSJdLCJzb3VyY2VzIjpbIk9wdGlvbnNMaXN0LnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IE9wdGlvbnNMaXN0IGZyb20gJy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2V4ZXJjaXNlLWNvbW1vbi9PcHRpb25zTGlzdCc7XG5cbmplc3QubW9jaygnQGV4cG8vdmVjdG9yLWljb25zJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgVGV4dCB9ID0gcmVxdWlyZSgncmVhY3QtbmF0aXZlJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgSW9uaWNvbnM6IChwcm9wcykgPT4gPFRleHQgdGVzdElEPXtgaWNvbi0ke3Byb3BzLm5hbWV9YH0+e3Byb3BzLm5hbWV9PC9UZXh0PixcbiAgICB9O1xufSk7XG5cbmRlc2NyaWJlKCdPcHRpb25zTGlzdCcsICgpID0+IHtcbiAgICBjb25zdCBvcHRpb25zID0gW1xuICAgICAgICB7IGlkOiAnMScsIHRleHQ6ICdBcHBsZScgfSxcbiAgICAgICAgeyBpZDogJzInLCB0ZXh0OiAnQmFuYW5hJyB9LFxuICAgICAgICB7IGlkOiAnMycsIHRleHQ6ICdDaGVycnknIH0sXG4gICAgXTtcbiAgICBjb25zdCBvblNlbGVjdE9wdGlvbk1vY2sgPSBqZXN0LmZuKCk7XG5cbiAgICBhZnRlckVhY2goKCkgPT4ge1xuICAgICAgICBvblNlbGVjdE9wdGlvbk1vY2subW9ja0NsZWFyKCk7XG4gICAgfSk7XG5cbiAgICAvLyAtLS0gVGVzdHMgZGUgcmVuZHUgZGUgYmFzZSAtLS1cbiAgICBpdCgncmVuZGVycyBhbGwgb3B0aW9ucyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPE9wdGlvbnNMaXN0IG9wdGlvbnM9e29wdGlvbnN9IC8+KTtcbiAgICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnQXBwbGUnKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KCdCYW5hbmEnKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KCdDaGVycnknKSkudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2NhbGxzIG9uU2VsZWN0T3B0aW9uIHdpdGggdGhlIGNvcnJlY3QgaWQgd2hlbiBhbiBvcHRpb24gaXMgcHJlc3NlZCcsICgpID0+IHtcbiAgICAgICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgICAgICAgIDxPcHRpb25zTGlzdCBvcHRpb25zPXtvcHRpb25zfSBvblNlbGVjdE9wdGlvbj17b25TZWxlY3RPcHRpb25Nb2NrfSAvPlxuICAgICAgICApO1xuICAgICAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCdCYW5hbmEnKSk7XG4gICAgICAgIGV4cGVjdChvblNlbGVjdE9wdGlvbk1vY2spLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcyJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnZG9lcyBub3QgY2FsbCBvblNlbGVjdE9wdGlvbiB3aGVuIGRpc2FibGVkJywgKCkgPT4ge1xuICAgICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgICAgICAgPE9wdGlvbnNMaXN0IG9wdGlvbnM9e29wdGlvbnN9IG9uU2VsZWN0T3B0aW9uPXtvblNlbGVjdE9wdGlvbk1vY2t9IGRpc2FibGVkPXt0cnVlfSAvPlxuICAgICAgICApO1xuICAgICAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCdCYW5hbmEnKSk7XG4gICAgICAgIGV4cGVjdChvblNlbGVjdE9wdGlvbk1vY2spLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvd3Mgbm8gY29ycmVjdG5lc3MgaWNvbnMgd2hlbiBhbiBvcHRpb24gaXMganVzdCBzZWxlY3RlZCcsICgpID0+IHtcbiAgICAgICAgY29uc3QgeyBxdWVyeUFsbEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICAgICAgICA8T3B0aW9uc0xpc3Qgb3B0aW9ucz17b3B0aW9uc30gc2VsZWN0ZWRPcHRpb25JZD17JzEnfSAvPlxuICAgICAgICApO1xuICAgICAgICBleHBlY3QocXVlcnlBbGxCeVRlc3RJZCgnaWNvbi1jaGVja21hcmstY2lyY2xlJykubGVuZ3RoKS50b0JlKDApO1xuICAgICAgICBleHBlY3QocXVlcnlBbGxCeVRlc3RJZCgnaWNvbi1jbG9zZS1jaXJjbGUnKS5sZW5ndGgpLnRvQmUoMCk7XG4gICAgfSk7XG5cbiAgICAvLyAtLS0gVGVzdHMgZGUgbWlzZSBlbiBwYWdlIGV0IGRlIGxvZ2lxdWUgLS0tXG4gICAgZGVzY3JpYmUoJ0xheW91dCBhbmQgTG9naWMnLCAoKSA9PiB7XG4gICAgICAgIGl0KCdyZW5kZXJzIHdpdGggdmVydGljYWwgbGF5b3V0IGJ5IGRlZmF1bHQnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoPE9wdGlvbnNMaXN0IG9wdGlvbnM9e29wdGlvbnN9IC8+KTtcbiAgICAgICAgICAgIGV4cGVjdChnZXRCeVRlc3RJZCgndmVydGljYWwtY29udGFpbmVyJykucHJvcHMuc3R5bGUpLnRvRXF1YWwoZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoeyBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyB9KSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdyZW5kZXJzIHdpdGggZ3JpZCBsYXlvdXQgd2hlbiBzcGVjaWZpZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoPE9wdGlvbnNMaXN0IG9wdGlvbnM9e29wdGlvbnN9IGxheW91dD1cImdyaWRcIiAvPik7XG4gICAgICAgICAgICBjb25zdCBzdHlsZSA9IGdldEJ5VGVzdElkKCdncmlkLWNvbnRhaW5lcicpLnByb3BzLnN0eWxlO1xuICAgICAgICAgICAgZXhwZWN0KHN0eWxlKS50b0VxdWFsKGV4cGVjdC5vYmplY3RDb250YWluaW5nKHsgZmxleERpcmVjdGlvbjogJ3JvdycsIGZsZXhXcmFwOiAnd3JhcCcgfSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGl0KCdyZW5kZXJzIGNvcnJlY3RseSB3aXRoIG9ubHkgb25lIG9wdGlvbiBpbiB2ZXJ0aWNhbCBsYXlvdXQnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBvbmVPcHRpb24gPSBbeyBpZDogJzEnLCB0ZXh0OiAnT25lJyB9XTtcbiAgICAgICAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPE9wdGlvbnNMaXN0IG9wdGlvbnM9e29uZU9wdGlvbn0gLz4pO1xuICAgICAgICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnT25lJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3JlbmRlcnMgY29ycmVjdGx5IHdpdGggb25seSBvbmUgb3B0aW9uIGluIGdyaWQgbGF5b3V0JywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgb25lT3B0aW9uID0gW3sgaWQ6ICcxJywgdGV4dDogJ09uZScgfV07XG4gICAgICAgICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKDxPcHRpb25zTGlzdCBvcHRpb25zPXtvbmVPcHRpb259IGxheW91dD1cImdyaWRcIiAvPik7XG4gICAgICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KCdPbmUnKSkudG9CZVRydXRoeSgpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIC0tLSBUZXN0cyBkJ2FmZmljaGFnZSBkZSBsYSByw6lwb25zZSAtLS1cbiAgICBkZXNjcmliZSgnd2hlbiBzaG93aW5nIGNvcnJlY3QgYW5zd2VyJywgKCkgPT4ge1xuICAgICAgICBpdCgnc2hvd3MgYSBjaGVja21hcmsgZm9yIHRoZSBjb3JyZWN0IGFuc3dlcicsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICAgICAgICAgICAgICA8T3B0aW9uc0xpc3RcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucz17b3B0aW9uc31cbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRPcHRpb25JZD17JzInfVxuICAgICAgICAgICAgICAgICAgICBjb3JyZWN0T3B0aW9uSWQ9eycyJ31cbiAgICAgICAgICAgICAgICAgICAgc2hvd0NvcnJlY3RBbnN3ZXI9e3RydWV9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2ljb24tY2hlY2ttYXJrLWNpcmNsZScpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG93cyBhIGNyb3NzIGZvciB0aGUgaW5jb3JyZWN0IHNlbGVjdGlvbiBhbmQgYSBjaGVja21hcmsgZm9yIHRoZSBjb3JyZWN0IGFuc3dlcicsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQsIHF1ZXJ5QWxsQnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICAgICAgICAgICAgICA8T3B0aW9uc0xpc3RcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucz17b3B0aW9uc31cbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRPcHRpb25JZD17JzEnfVxuICAgICAgICAgICAgICAgICAgICBjb3JyZWN0T3B0aW9uSWQ9eycyJ31cbiAgICAgICAgICAgICAgICAgICAgc2hvd0NvcnJlY3RBbnN3ZXI9e3RydWV9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2ljb24tY2xvc2UtY2lyY2xlJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgICAgIGV4cGVjdChxdWVyeUFsbEJ5VGVzdElkKCdpY29uLWNoZWNrbWFyay1jaXJjbGUnKS5sZW5ndGgpLnRvQmUoMSk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgaXQoJ2hhbmRsZXMgY29ycmVjdCBhbmQgaW5jb3JyZWN0IGFuc3dlcnMgaW4gZ3JpZCBsYXlvdXQnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGdldEJ5VGVzdElkLCBxdWVyeUFsbEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICAgICAgICAgICAgPE9wdGlvbnNMaXN0XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnM9e29wdGlvbnN9XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkT3B0aW9uSWQ9eycxJ31cbiAgICAgICAgICAgICAgICAgICAgY29ycmVjdE9wdGlvbklkPXsnMid9XG4gICAgICAgICAgICAgICAgICAgIHNob3dDb3JyZWN0QW5zd2VyPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICBsYXlvdXQ9XCJncmlkXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnaWNvbi1jbG9zZS1jaXJjbGUnKSkudG9CZVRydXRoeSgpO1xuICAgICAgICAgICAgZXhwZWN0KHF1ZXJ5QWxsQnlUZXN0SWQoJ2ljb24tY2hlY2ttYXJrLWNpcmNsZScpLmxlbmd0aCkudG9CZSgxKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiJBQUlBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxZQUFNO0VBQ2xDLElBQUFDLFFBQUEsR0FBaUJDLE9BQU8sQ0FBQyxjQUFjLENBQUM7SUFBaENDLElBQUksR0FBQUYsUUFBQSxDQUFKRSxJQUFJO0VBQ1osT0FBTztJQUNIQyxRQUFRLEVBQUUsU0FBVkEsUUFBUUEsQ0FBR0MsS0FBSztNQUFBLE9BQUssSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNKLElBQUk7UUFBQ0ssTUFBTSxFQUFFLFFBQVFILEtBQUssQ0FBQ0ksSUFBSSxFQUFHO1FBQUFDLFFBQUEsRUFBRUwsS0FBSyxDQUFDSTtNQUFJLENBQU8sQ0FBQztJQUFBO0VBQ2hGLENBQUM7QUFDTCxDQUFDLENBQUM7QUFBQyxJQUFBRSxzQkFBQSxHQUFBVCxPQUFBO0FBVEgsSUFBQVUsTUFBQSxHQUFBRCxzQkFBQSxDQUFBVCxP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