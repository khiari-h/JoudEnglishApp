558328d505e978e7c878e5cf32a332f8
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var Lock = _interopRequireWildcard(require("../../services/lockService"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var EmergencyResetScreen = function EmergencyResetScreen(_ref) {
  var onDone = _ref.onDone;
  var _useState = (0, _react.useState)(''),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    confirm = _useState2[0],
    setConfirm = _useState2[1];
  var onReset = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    if (confirm !== 'ERASE') return;
    yield Lock.emergencyReset();
    onDone == null || onDone();
  }), [confirm, onDone]);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: {
      flex: 1,
      alignItems: 'center',
      justifyContent: 'center',
      padding: 24
    },
    testID: "emergency-reset-screen",
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: {
        fontSize: 20,
        fontWeight: '700',
        marginBottom: 12
      },
      children: "R\xE9initialisation d'urgence"
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: {
        color: '#6B7280',
        textAlign: 'center',
        marginBottom: 12
      },
      children: "Cette action efface toutes les donn\xE9es locales (verrou, pr\xE9f\xE9rences, progression)."
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: {
        color: '#DC2626',
        marginBottom: 8
      },
      children: "Tape \"ERASE\" pour confirmer"
    }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
      value: confirm,
      onChangeText: setConfirm,
      placeholder: "ERASE",
      autoCapitalize: "characters",
      style: {
        width: '80%',
        borderWidth: 1,
        borderColor: '#E5E7EB',
        borderRadius: 8,
        padding: 12,
        marginBottom: 8
      },
      testID: "reset-confirm-input"
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      testID: "reset-confirm-button",
      onPress: onReset,
      style: {
        backgroundColor: '#DC2626',
        padding: 12,
        borderRadius: 8
      },
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: {
          color: 'white',
          fontWeight: '700'
        },
        children: "Effacer"
      })
    })]
  });
};
EmergencyResetScreen.propTypes = {
  onDone: _propTypes.default.func.isRequired
};
var _default = exports.default = EmergencyResetScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlIiwiTG9jayIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX3Byb3BUeXBlcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfanN4UnVudGltZSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiRW1lcmdlbmN5UmVzZXRTY3JlZW4iLCJfcmVmIiwib25Eb25lIiwiX3VzZVN0YXRlIiwidXNlU3RhdGUiLCJfdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkyIiwiY29uZmlybSIsInNldENvbmZpcm0iLCJvblJlc2V0IiwidXNlQ2FsbGJhY2siLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJlbWVyZ2VuY3lSZXNldCIsImpzeHMiLCJWaWV3Iiwic3R5bGUiLCJmbGV4IiwiYWxpZ25JdGVtcyIsImp1c3RpZnlDb250ZW50IiwicGFkZGluZyIsInRlc3RJRCIsImNoaWxkcmVuIiwianN4IiwiVGV4dCIsImZvbnRTaXplIiwiZm9udFdlaWdodCIsIm1hcmdpbkJvdHRvbSIsImNvbG9yIiwidGV4dEFsaWduIiwiVGV4dElucHV0IiwidmFsdWUiLCJvbkNoYW5nZVRleHQiLCJwbGFjZWhvbGRlciIsImF1dG9DYXBpdGFsaXplIiwid2lkdGgiLCJib3JkZXJXaWR0aCIsImJvcmRlckNvbG9yIiwiYm9yZGVyUmFkaXVzIiwiVG91Y2hhYmxlT3BhY2l0eSIsIm9uUHJlc3MiLCJiYWNrZ3JvdW5kQ29sb3IiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJmdW5jIiwiaXNSZXF1aXJlZCIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkVtZXJnZW5jeVJlc2V0U2NyZWVuLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9zY3JlZW5zL0xvY2svRW1lcmdlbmN5UmVzZXRTY3JlZW4uanNcclxuaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBWaWV3LCBUZXh0LCBUZXh0SW5wdXQsIFRvdWNoYWJsZU9wYWNpdHkgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgKiBhcyBMb2NrIGZyb20gJy4uLy4uL3NlcnZpY2VzL2xvY2tTZXJ2aWNlJztpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXHJcblxyXG5jb25zdCBFbWVyZ2VuY3lSZXNldFNjcmVlbiA9ICh7IG9uRG9uZSB9KSA9PiB7XHJcbiAgY29uc3QgW2NvbmZpcm0sIHNldENvbmZpcm1dID0gdXNlU3RhdGUoJycpO1xyXG5cclxuICBjb25zdCBvblJlc2V0ID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xyXG4gICAgaWYgKGNvbmZpcm0gIT09ICdFUkFTRScpIHJldHVybjtcclxuICAgIGF3YWl0IExvY2suZW1lcmdlbmN5UmVzZXQoKTtcclxuICAgIG9uRG9uZT8uKCk7XHJcbiAgfSwgW2NvbmZpcm0sIG9uRG9uZV0pO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPFZpZXcgc3R5bGU9e3sgZmxleDogMSwgYWxpZ25JdGVtczogJ2NlbnRlcicsIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJywgcGFkZGluZzogMjQgfX0gdGVzdElEPVwiZW1lcmdlbmN5LXJlc2V0LXNjcmVlblwiPlxyXG4gICAgICA8VGV4dCBzdHlsZT17eyBmb250U2l6ZTogMjAsIGZvbnRXZWlnaHQ6ICc3MDAnLCBtYXJnaW5Cb3R0b206IDEyIH19PlLDqWluaXRpYWxpc2F0aW9uIGQndXJnZW5jZTwvVGV4dD5cclxuICAgICAgPFRleHQgc3R5bGU9e3sgY29sb3I6ICcjNkI3MjgwJywgdGV4dEFsaWduOiAnY2VudGVyJywgbWFyZ2luQm90dG9tOiAxMiB9fT5cclxuICAgICAgICBDZXR0ZSBhY3Rpb24gZWZmYWNlIHRvdXRlcyBsZXMgZG9ubsOpZXMgbG9jYWxlcyAodmVycm91LCBwcsOpZsOpcmVuY2VzLCBwcm9ncmVzc2lvbikuXHJcbiAgICAgIDwvVGV4dD5cclxuICAgICAgPFRleHQgc3R5bGU9e3sgY29sb3I6ICcjREMyNjI2JywgbWFyZ2luQm90dG9tOiA4IH19PlRhcGUgXCJFUkFTRVwiIHBvdXIgY29uZmlybWVyPC9UZXh0PlxyXG4gICAgICA8VGV4dElucHV0XHJcbiAgICAgICAgdmFsdWU9e2NvbmZpcm19XHJcbiAgICAgICAgb25DaGFuZ2VUZXh0PXtzZXRDb25maXJtfVxyXG4gICAgICAgIHBsYWNlaG9sZGVyPVwiRVJBU0VcIlxyXG4gICAgICAgIGF1dG9DYXBpdGFsaXplPVwiY2hhcmFjdGVyc1wiXHJcbiAgICAgICAgc3R5bGU9e3sgd2lkdGg6ICc4MCUnLCBib3JkZXJXaWR0aDogMSwgYm9yZGVyQ29sb3I6ICcjRTVFN0VCJywgYm9yZGVyUmFkaXVzOiA4LCBwYWRkaW5nOiAxMiwgbWFyZ2luQm90dG9tOiA4IH19XHJcbiAgICAgICAgdGVzdElEPVwicmVzZXQtY29uZmlybS1pbnB1dFwiXHJcbiAgICAgIC8+XHJcbiAgICAgIDxUb3VjaGFibGVPcGFjaXR5IHRlc3RJRD1cInJlc2V0LWNvbmZpcm0tYnV0dG9uXCIgb25QcmVzcz17b25SZXNldH0gc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiAnI0RDMjYyNicsIHBhZGRpbmc6IDEyLCBib3JkZXJSYWRpdXM6IDggfX0+XHJcbiAgICAgICAgPFRleHQgc3R5bGU9e3sgY29sb3I6ICd3aGl0ZScsIGZvbnRXZWlnaHQ6ICc3MDAnIH19PkVmZmFjZXI8L1RleHQ+XHJcbiAgICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cclxuICAgIDwvVmlldz5cclxuICApO1xyXG59O1xyXG5cclxuXG5FbWVyZ2VuY3lSZXNldFNjcmVlbi5wcm9wVHlwZXMgPSB7XG4gIG9uRG9uZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEVtZXJnZW5jeVJlc2V0U2NyZWVuO1xyXG5cclxuXHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLElBQUEsR0FBQUMsdUJBQUEsQ0FBQUgsT0FBQTtBQUFtRCxJQUFBSSxVQUFBLEdBQUFDLHNCQUFBLENBQUFMLE9BQUE7QUFBbUMsSUFBQU0sV0FBQSxHQUFBTixPQUFBO0FBQUEsU0FBQUcsd0JBQUFJLENBQUEsRUFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFOLHVCQUFBLFlBQUFBLHdCQUFBSSxDQUFBLEVBQUFDLENBQUEsU0FBQUEsQ0FBQSxJQUFBRCxDQUFBLElBQUFBLENBQUEsQ0FBQUssVUFBQSxTQUFBTCxDQUFBLE1BQUFNLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLEtBQUFDLFNBQUEsUUFBQUMsT0FBQSxFQUFBVixDQUFBLGlCQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFNBQUFRLENBQUEsTUFBQUYsQ0FBQSxHQUFBTCxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxRQUFBRyxDQUFBLENBQUFLLEdBQUEsQ0FBQVgsQ0FBQSxVQUFBTSxDQUFBLENBQUFNLEdBQUEsQ0FBQVosQ0FBQSxHQUFBTSxDQUFBLENBQUFPLEdBQUEsQ0FBQWIsQ0FBQSxFQUFBUSxDQUFBLGNBQUFNLEVBQUEsSUFBQWQsQ0FBQSxnQkFBQWMsRUFBQSxPQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWhCLENBQUEsRUFBQWMsRUFBQSxPQUFBUCxDQUFBLElBQUFELENBQUEsR0FBQVcsTUFBQSxDQUFBQyxjQUFBLEtBQUFELE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQW5CLENBQUEsRUFBQWMsRUFBQSxPQUFBUCxD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