6c65348ed689654c8953259805cb115b
_getJestObj().mock('expo-router', function () {
  return {
    useFocusEffect: jest.fn(function (callback) {
      return callback();
    }),
    router: {
      push: jest.fn(),
      back: jest.fn()
    },
    Stack: function Stack(_ref) {
      var children = _ref.children;
      return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
        children: children
      });
    },
    useLocalSearchParams: function useLocalSearchParams() {
      return {};
    },
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn(),
        canGoBack: jest.fn(function () {
          return true;
        }),
        addListener: jest.fn(),
        isFocused: jest.fn(function () {
          return true;
        })
      };
    }
  };
});
_getJestObj().mock('../../src/contexts/CurrentLevelContext', function () {
  return {
    useCurrentLevel: mockUseCurrentLevel
  };
});
_getJestObj().mock('../../src/screens/exercises/vocabulary/hooks/useVocabulary', function () {
  var actualUseVocabulary = jest.requireActual('../../src/screens/exercises/vocabulary/hooks/useVocabulary').default;
  return jest.fn(function (vocabularyData, level, mode) {
    if (!vocabularyData) {
      return {
        loaded: false
      };
    }
    return Object.assign({}, actualUseVocabulary(vocabularyData, level, mode), {
      loaded: true,
      currentWord: vocabularyData.exercises[0].words[0],
      display: {
        wordCounter: '1 / 1',
        categories: vocabularyData.exercises.map(function (ex) {
          return {
            name: ex.title,
            words: ex.words
          };
        })
      }
    });
  });
});
_getJestObj().mock('../../src/utils/vocabulary/vocabularyDataHelper', function () {
  return {
    isBonusLevel: jest.fn(function () {
      return false;
    }),
    getLevelColor: jest.fn(function (level) {
      if (!level) return 'gray';
      return 'blue';
    }),
    getVocabularyData: jest.fn(function (level, mode) {
      if (!level || level === 'invalid' || level === undefined) {
        return null;
      }
      if (level === 'A1' || level === '1') {
        return {
          exercises: [{
            title: 'Identité & informations personnelles',
            words: [{
              word: 'name',
              translation: 'nom',
              example: 'My name is Sarah.'
            }]
          }]
        };
      }
      return null;
    })
  };
});
_getJestObj().mock('../../src/hooks/useLastActivity', function () {
  return jest.fn(function () {
    return {
      saveActivity: jest.fn()
    };
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ExerciseSelection = _interopRequireDefault(require("../../src/screens/ExerciseSelection"));
var _vocabulary = _interopRequireDefault(require("../../src/screens/exercises/vocabulary"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockUseCurrentLevel = jest.fn();
var MOCK_LANGUAGE_LEVELS = {
  1: {
    title: 'Niveau Débutant A1',
    color: 'blue'
  },
  2: {
    title: 'Niveau Élémentaire A2',
    color: 'green'
  },
  3: {
    title: 'Niveau Intermédiaire B1',
    color: 'orange'
  }
};
describe('Test d\'intégration: Robustesse de la navigation', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('ExerciseSelection - Gestion des niveaux manquants', function () {
    test('Affiche un état contrôlé quand aucun niveau n\'est fourni', (0, _asyncToGenerator2.default)(function* () {
      mockUseCurrentLevel.mockReturnValue({
        currentLevel: undefined
      });
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseSelection.default, {})),
        queryByText = _render.queryByText,
        getByText = _render.getByText,
        toJSON = _render.toJSON;
      yield (0, _reactNative.waitFor)(function () {
        expect(toJSON()).toBeNull();
      });
    }));
    test('Affiche un état contrôlé avec un niveau invalide', (0, _asyncToGenerator2.default)(function* () {
      mockUseCurrentLevel.mockReturnValue({
        currentLevel: 'invalid_level'
      });
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseSelection.default, {})),
        queryByText = _render2.queryByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByText('name')).toBeNull();
        expect(queryByText('rhetoric')).toBeNull();
      });
    }));
  });
  describe('VocabularyExercise - Gestion des paramètres manquants', function () {
    test('Affiche un indicateur de chargement sans paramètre de niveau', (0, _asyncToGenerator2.default)(function* () {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
          route: {
            params: {}
          }
        })),
        getByTestId = _render3.getByTestId,
        queryByText = _render3.queryByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('activity-indicator')).toBeTruthy();
        expect(queryByText('name')).toBeNull();
        expect(queryByText('rhetoric')).toBeNull();
      });
    }));
    test('Affiche un indicateur de chargement avec un niveau undefined', (0, _asyncToGenerator2.default)(function* () {
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
          route: {
            params: {
              level: undefined,
              mode: 'classic'
            }
          }
        })),
        getByTestId = _render4.getByTestId,
        queryByText = _render4.queryByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('activity-indicator')).toBeTruthy();
        expect(queryByText('name')).toBeNull();
      });
    }));
    test('Affiche un indicateur de chargement avec un niveau invalide', (0, _asyncToGenerator2.default)(function* () {
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
          route: {
            params: {
              level: 'invalid_level',
              mode: 'classic'
            }
          }
        })),
        getByTestId = _render5.getByTestId,
        queryByText = _render5.queryByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('activity-indicator')).toBeTruthy();
        expect(queryByText('name')).toBeNull();
        expect(queryByText('rhetoric')).toBeNull();
      });
    }));
    test('Gère gracieusement l\'absence de mode', (0, _asyncToGenerator2.default)(function* () {
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
          route: {
            params: {
              level: 'A1'
            }
          }
        })),
        getByTestId = _render6.getByTestId,
        queryByText = _render6.queryByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('activity-indicator') || queryByText('name')).toBeTruthy();
      });
    }));
    test('Gère correctement les paramètres de route malformés', (0, _asyncToGenerator2.default)(function* () {
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
          route: {}
        })),
        getByTestId = _render7.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('activity-indicator')).toBeTruthy();
      });
    }));
    test('Fonctionne correctement avec des paramètres valides', (0, _asyncToGenerator2.default)(function* () {
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
          route: {
            params: {
              level: '1',
              mode: 'classic'
            }
          }
        })),
        getByText = _render8.getByText,
        queryByTestId = _render8.queryByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('name')).toBeTruthy();
        expect(getByText('nom')).toBeTruthy();
        expect(queryByTestId('activity-indicator')).toBeNull();
      });
    }));
  });
  describe('Cas limites et edge cases', function () {
    test('Gère les valeurs null dans les paramètres', (0, _asyncToGenerator2.default)(function* () {
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
          route: {
            params: {
              level: null,
              mode: null
            }
          }
        })),
        getByTestId = _render9.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('activity-indicator')).toBeTruthy();
      });
    }));
    test('Gère les chaînes vides dans les paramètres', (0, _asyncToGenerator2.default)(function* () {
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
          route: {
            params: {
              level: '',
              mode: ''
            }
          }
        })),
        getByTestId = _render0.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('activity-indicator')).toBeTruthy();
      });
    }));
    test('Gère les types de données inattendus', (0, _asyncToGenerator2.default)(function* () {
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
          route: {
            params: {
              level: 123,
              mode: {}
            }
          }
        })),
        getByTestId = _render1.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('activity-indicator')).toBeTruthy();
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VGb2N1c0VmZmVjdCIsImplc3QiLCJmbiIsImNhbGxiYWNrIiwicm91dGVyIiwicHVzaCIsImJhY2siLCJTdGFjayIsIl9yZWYiLCJjaGlsZHJlbiIsIl9qc3hSdW50aW1lIiwianN4IiwiRnJhZ21lbnQiLCJ1c2VMb2NhbFNlYXJjaFBhcmFtcyIsInVzZU5hdmlnYXRpb24iLCJuYXZpZ2F0ZSIsImdvQmFjayIsImNhbkdvQmFjayIsImFkZExpc3RlbmVyIiwiaXNGb2N1c2VkIiwidXNlQ3VycmVudExldmVsIiwibW9ja1VzZUN1cnJlbnRMZXZlbCIsImFjdHVhbFVzZVZvY2FidWxhcnkiLCJyZXF1aXJlQWN0dWFsIiwiZGVmYXVsdCIsInZvY2FidWxhcnlEYXRhIiwibGV2ZWwiLCJtb2RlIiwibG9hZGVkIiwiT2JqZWN0IiwiYXNzaWduIiwiY3VycmVudFdvcmQiLCJleGVyY2lzZXMiLCJ3b3JkcyIsImRpc3BsYXkiLCJ3b3JkQ291bnRlciIsImNhdGVnb3JpZXMiLCJtYXAiLCJleCIsIm5hbWUiLCJ0aXRsZSIsImlzQm9udXNMZXZlbCIsImdldExldmVsQ29sb3IiLCJnZXRWb2NhYnVsYXJ5RGF0YSIsInVuZGVmaW5lZCIsIndvcmQiLCJ0cmFuc2xhdGlvbiIsImV4YW1wbGUiLCJzYXZlQWN0aXZpdHkiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9FeGVyY2lzZVNlbGVjdGlvbiIsIl92b2NhYnVsYXJ5IiwiX3JlcXVpcmUiLCJNT0NLX0xBTkdVQUdFX0xFVkVMUyIsImNvbG9yIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsInRlc3QiLCJtb2NrUmV0dXJuVmFsdWUiLCJjdXJyZW50TGV2ZWwiLCJfcmVuZGVyIiwicmVuZGVyIiwicXVlcnlCeVRleHQiLCJnZXRCeVRleHQiLCJ0b0pTT04iLCJ3YWl0Rm9yIiwiZXhwZWN0IiwidG9CZU51bGwiLCJfcmVuZGVyMiIsIl9yZW5kZXIzIiwicm91dGUiLCJwYXJhbXMiLCJnZXRCeVRlc3RJZCIsInRvQmVUcnV0aHkiLCJfcmVuZGVyNCIsIl9yZW5kZXI1IiwiX3JlbmRlcjYiLCJfcmVuZGVyNyIsIl9yZW5kZXI4IiwicXVlcnlCeVRlc3RJZCIsIl9yZW5kZXI5IiwiX3JlbmRlcjAiLCJfcmVuZGVyMSJdLCJzb3VyY2VzIjpbInJvYnVzdGVzc2UtbmF2aWdhdGlvbi50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIHdhaXRGb3IgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5cbi8vIFNjcmVlbnMgdG8gdGVzdFxuaW1wb3J0IEV4ZXJjaXNlU2VsZWN0aW9uIGZyb20gJy4uLy4uL3NyYy9zY3JlZW5zL0V4ZXJjaXNlU2VsZWN0aW9uJztcbmltcG9ydCBWb2NhYnVsYXJ5RXhlcmNpc2UgZnJvbSAnLi4vLi4vc3JjL3NjcmVlbnMvZXhlcmNpc2VzL3ZvY2FidWxhcnknO1xuXG4vLyBNb2NrIGV4cG8tcm91dGVyXG5qZXN0Lm1vY2soJ2V4cG8tcm91dGVyJywgKCkgPT4gKHtcbiAgdXNlRm9jdXNFZmZlY3Q6IGplc3QuZm4oY2FsbGJhY2sgPT4gY2FsbGJhY2soKSksXG4gIHJvdXRlcjoge1xuICAgIHB1c2g6IGplc3QuZm4oKSxcbiAgICBiYWNrOiBqZXN0LmZuKCksXG4gIH0sXG4gIFN0YWNrOiAoeyBjaGlsZHJlbiB9KSA9PiA8PntjaGlsZHJlbn08Lz4sXG4gIHVzZUxvY2FsU2VhcmNoUGFyYW1zOiAoKSA9PiAoe30pLFxuICB1c2VOYXZpZ2F0aW9uOiAoKSA9PiAoe1xuICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXG4gICAgZ29CYWNrOiBqZXN0LmZuKCksXG4gICAgY2FuR29CYWNrOiBqZXN0LmZuKCgpID0+IHRydWUpLFxuICAgIGFkZExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgaXNGb2N1c2VkOiBqZXN0LmZuKCgpID0+IHRydWUpLFxuICB9KSxcbn0pKTtcblxuLy8gTW9jayB1c2VDdXJyZW50TGV2ZWwgd2l0aCBkaWZmZXJlbnQgc2NlbmFyaW9zXG5jb25zdCBtb2NrVXNlQ3VycmVudExldmVsID0gamVzdC5mbigpO1xuamVzdC5tb2NrKCcuLi8uLi9zcmMvY29udGV4dHMvQ3VycmVudExldmVsQ29udGV4dCcsICgpID0+ICh7XG4gIHVzZUN1cnJlbnRMZXZlbDogbW9ja1VzZUN1cnJlbnRMZXZlbCxcbn0pKTtcblxuLy8gTW9jayB1c2VWb2NhYnVsYXJ5IGhvb2tcbmplc3QubW9jaygnLi4vLi4vc3JjL3NjcmVlbnMvZXhlcmNpc2VzL3ZvY2FidWxhcnkvaG9va3MvdXNlVm9jYWJ1bGFyeScsICgpID0+IHtcbiAgY29uc3QgYWN0dWFsVXNlVm9jYWJ1bGFyeSA9IGplc3QucmVxdWlyZUFjdHVhbCgnLi4vLi4vc3JjL3NjcmVlbnMvZXhlcmNpc2VzL3ZvY2FidWxhcnkvaG9va3MvdXNlVm9jYWJ1bGFyeScpLmRlZmF1bHQ7XG4gIHJldHVybiBqZXN0LmZuKCh2b2NhYnVsYXJ5RGF0YSwgbGV2ZWwsIG1vZGUpID0+IHtcbiAgICBpZiAoIXZvY2FidWxhcnlEYXRhKSB7XG4gICAgICByZXR1cm4geyBsb2FkZWQ6IGZhbHNlIH07IC8vIFNpbXVsYXRlIGxvYWRpbmcgc3RhdGUgd2hlbiBubyBkYXRhXG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAuLi5hY3R1YWxVc2VWb2NhYnVsYXJ5KHZvY2FidWxhcnlEYXRhLCBsZXZlbCwgbW9kZSksXG4gICAgICBsb2FkZWQ6IHRydWUsXG4gICAgICBjdXJyZW50V29yZDogdm9jYWJ1bGFyeURhdGEuZXhlcmNpc2VzWzBdLndvcmRzWzBdLFxuICAgICAgZGlzcGxheToge1xuICAgICAgICB3b3JkQ291bnRlcjogJzEgLyAxJyxcbiAgICAgICAgY2F0ZWdvcmllczogdm9jYWJ1bGFyeURhdGEuZXhlcmNpc2VzLm1hcChleCA9PiAoeyBuYW1lOiBleC50aXRsZSwgd29yZHM6IGV4LndvcmRzIH0pKSxcbiAgICAgIH0sXG4gICAgfTtcbiAgfSk7XG59KTtcblxuLy8gTW9jayB2b2NhYnVsYXJ5RGF0YUhlbHBlclxuamVzdC5tb2NrKCcuLi8uLi9zcmMvdXRpbHMvdm9jYWJ1bGFyeS92b2NhYnVsYXJ5RGF0YUhlbHBlcicsICgpID0+ICh7XG4gIGlzQm9udXNMZXZlbDogamVzdC5mbigoKSA9PiBmYWxzZSksXG4gIGdldExldmVsQ29sb3I6IGplc3QuZm4oKGxldmVsKSA9PiB7XG4gICAgaWYgKCFsZXZlbCkgcmV0dXJuICdncmF5JzsgLy8gRGVmYXVsdCBjb2xvciBmb3IgbWlzc2luZyBsZXZlbFxuICAgIHJldHVybiAnYmx1ZSc7XG4gIH0pLFxuICBnZXRWb2NhYnVsYXJ5RGF0YTogamVzdC5mbigobGV2ZWwsIG1vZGUpID0+IHtcbiAgICAvLyBSZXR1cm4gbnVsbCBmb3IgaW52YWxpZC9taXNzaW5nIGxldmVsc1xuICAgIGlmICghbGV2ZWwgfHwgbGV2ZWwgPT09ICdpbnZhbGlkJyB8fCBsZXZlbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgXG4gICAgaWYgKGxldmVsID09PSAnQTEnIHx8IGxldmVsID09PSAnMScpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGV4ZXJjaXNlczogW3tcbiAgICAgICAgICB0aXRsZTogJ0lkZW50aXTDqSAmIGluZm9ybWF0aW9ucyBwZXJzb25uZWxsZXMnLFxuICAgICAgICAgIHdvcmRzOiBbeyB3b3JkOiAnbmFtZScsIHRyYW5zbGF0aW9uOiAnbm9tJywgZXhhbXBsZTogJ015IG5hbWUgaXMgU2FyYWguJyB9XSxcbiAgICAgICAgfV0sXG4gICAgICB9O1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gbnVsbDsgLy8gRm9yIGFueSBvdGhlciBsZXZlbFxuICB9KSxcbn0pKTtcblxuLy8gTW9jayBvdGhlciBob29rc1xuamVzdC5tb2NrKCcuLi8uLi9zcmMvaG9va3MvdXNlTGFzdEFjdGl2aXR5JywgKCkgPT4gamVzdC5mbigoKSA9PiAoe1xuICBzYXZlQWN0aXZpdHk6IGplc3QuZm4oKSxcbn0pKSk7XG5cbi8vIE1vY2sgY29uc3RhbnRzIHBvdXIgbGVzIG5pdmVhdXggZGUgbGFuZ3VlXG5jb25zdCBNT0NLX0xBTkdVQUdFX0xFVkVMUyA9IHtcbiAgMTogeyB0aXRsZTogJ05pdmVhdSBEw6lidXRhbnQgQTEnLCBjb2xvcjogJ2JsdWUnIH0sXG4gIDI6IHsgdGl0bGU6ICdOaXZlYXUgw4lsw6ltZW50YWlyZSBBMicsIGNvbG9yOiAnZ3JlZW4nIH0sXG4gIDM6IHsgdGl0bGU6ICdOaXZlYXUgSW50ZXJtw6lkaWFpcmUgQjEnLCBjb2xvcjogJ29yYW5nZScgfSxcbn07XG5cbmRlc2NyaWJlKCdUZXN0IGRcXCdpbnTDqWdyYXRpb246IFJvYnVzdGVzc2UgZGUgbGEgbmF2aWdhdGlvbicsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdFeGVyY2lzZVNlbGVjdGlvbiAtIEdlc3Rpb24gZGVzIG5pdmVhdXggbWFucXVhbnRzJywgKCkgPT4ge1xuICAgIHRlc3QoJ0FmZmljaGUgdW4gw6l0YXQgY29udHLDtGzDqSBxdWFuZCBhdWN1biBuaXZlYXUgblxcJ2VzdCBmb3VybmknLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBNb2NrOiBwYXMgZGUgbml2ZWF1IGNvdXJhbnRcbiAgICAgIG1vY2tVc2VDdXJyZW50TGV2ZWwubW9ja1JldHVyblZhbHVlKHtcbiAgICAgICAgY3VycmVudExldmVsOiB1bmRlZmluZWQsXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgeyBxdWVyeUJ5VGV4dCwgZ2V0QnlUZXh0LCB0b0pTT04gfSA9IHJlbmRlcig8RXhlcmNpc2VTZWxlY3Rpb24gLz4pO1xuXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgLy8gVsOpcmlmaWVyIHF1ZSBsZSBjb21wb3NhbnQgbmUgcmVuZCByaWVuIChyZXRvdXJuZSBudWxsKVxuICAgICAgICBleHBlY3QodG9KU09OKCkpLnRvQmVOdWxsKCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ0FmZmljaGUgdW4gw6l0YXQgY29udHLDtGzDqSBhdmVjIHVuIG5pdmVhdSBpbnZhbGlkZScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tVc2VDdXJyZW50TGV2ZWwubW9ja1JldHVyblZhbHVlKHtcbiAgICAgICAgY3VycmVudExldmVsOiAnaW52YWxpZF9sZXZlbCcsXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgeyBxdWVyeUJ5VGV4dCB9ID0gcmVuZGVyKDxFeGVyY2lzZVNlbGVjdGlvbiAvPik7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICAvLyBOZSBkb2l0IHBhcyBhZmZpY2hlciBkJ2V4ZXJjaWNlcyB2YWxpZGVzXG4gICAgICAgIGV4cGVjdChxdWVyeUJ5VGV4dCgnbmFtZScpKS50b0JlTnVsbCgpO1xuICAgICAgICBleHBlY3QocXVlcnlCeVRleHQoJ3JoZXRvcmljJykpLnRvQmVOdWxsKCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuXG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdWb2NhYnVsYXJ5RXhlcmNpc2UgLSBHZXN0aW9uIGRlcyBwYXJhbcOodHJlcyBtYW5xdWFudHMnLCAoKSA9PiB7XG4gICAgdGVzdCgnQWZmaWNoZSB1biBpbmRpY2F0ZXVyIGRlIGNoYXJnZW1lbnQgc2FucyBwYXJhbcOodHJlIGRlIG5pdmVhdScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQsIHF1ZXJ5QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICAgIDxWb2NhYnVsYXJ5RXhlcmNpc2Ugcm91dGU9e3sgcGFyYW1zOiB7fSB9fSAvPlxuICAgICAgKTtcblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIC8vIFbDqXJpZmllciBxdWUgbCdpbmRpY2F0ZXVyIGRlIGNoYXJnZW1lbnQgZXN0IGFmZmljaMOpXG4gICAgICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnYWN0aXZpdHktaW5kaWNhdG9yJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFbDqXJpZmllciBxdSdhdWN1biBjb250ZW51IGQnZXhlcmNpY2Ugbidlc3QgYWZmaWNow6lcbiAgICAgICAgZXhwZWN0KHF1ZXJ5QnlUZXh0KCduYW1lJykpLnRvQmVOdWxsKCk7XG4gICAgICAgIGV4cGVjdChxdWVyeUJ5VGV4dCgncmhldG9yaWMnKSkudG9CZU51bGwoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnQWZmaWNoZSB1biBpbmRpY2F0ZXVyIGRlIGNoYXJnZW1lbnQgYXZlYyB1biBuaXZlYXUgdW5kZWZpbmVkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgeyBnZXRCeVRlc3RJZCwgcXVlcnlCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgICAgPFZvY2FidWxhcnlFeGVyY2lzZSByb3V0ZT17eyBwYXJhbXM6IHsgbGV2ZWw6IHVuZGVmaW5lZCwgbW9kZTogJ2NsYXNzaWMnIH0gfX0gLz5cbiAgICAgICk7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2FjdGl2aXR5LWluZGljYXRvcicpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIGV4cGVjdChxdWVyeUJ5VGV4dCgnbmFtZScpKS50b0JlTnVsbCgpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdBZmZpY2hlIHVuIGluZGljYXRldXIgZGUgY2hhcmdlbWVudCBhdmVjIHVuIG5pdmVhdSBpbnZhbGlkZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQsIHF1ZXJ5QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICAgIDxWb2NhYnVsYXJ5RXhlcmNpc2Ugcm91dGU9e3sgcGFyYW1zOiB7IGxldmVsOiAnaW52YWxpZF9sZXZlbCcsIG1vZGU6ICdjbGFzc2ljJyB9IH19IC8+XG4gICAgICApO1xuXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KGdldEJ5VGVzdElkKCdhY3Rpdml0eS1pbmRpY2F0b3InKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBleHBlY3QocXVlcnlCeVRleHQoJ25hbWUnKSkudG9CZU51bGwoKTtcbiAgICAgICAgZXhwZWN0KHF1ZXJ5QnlUZXh0KCdyaGV0b3JpYycpKS50b0JlTnVsbCgpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdHw6hyZSBncmFjaWV1c2VtZW50IGxcXCdhYnNlbmNlIGRlIG1vZGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEJ5VGVzdElkLCBxdWVyeUJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgICA8Vm9jYWJ1bGFyeUV4ZXJjaXNlIHJvdXRlPXt7IHBhcmFtczogeyBsZXZlbDogJ0ExJyB9IH19IC8+XG4gICAgICApO1xuXG4gICAgICAvLyBNw6ptZSBhdmVjIHVuIG5pdmVhdSB2YWxpZGUgbWFpcyBzYW5zIG1vZGUsIFxuICAgICAgLy8gbCdhcHBsaWNhdGlvbiBuZSBkb2l0IHBhcyBjcmFzaGVyXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgLy8gUG91cnJhaXQgYWZmaWNoZXIgbGUgY29udGVudSBvdSB1biBpbmRpY2F0ZXVyIGRlIGNoYXJnZW1lbnRcbiAgICAgICAgLy8gc2Vsb24gbCdpbXBsw6ltZW50YXRpb25cbiAgICAgICAgZXhwZWN0KFxuICAgICAgICAgIGdldEJ5VGVzdElkKCdhY3Rpdml0eS1pbmRpY2F0b3InKSB8fCBcbiAgICAgICAgICBxdWVyeUJ5VGV4dCgnbmFtZScpXG4gICAgICAgICkudG9CZVRydXRoeSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdHw6hyZSBjb3JyZWN0ZW1lbnQgbGVzIHBhcmFtw6h0cmVzIGRlIHJvdXRlIG1hbGZvcm3DqXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBUZXN0IGF2ZWMgZGVzIHBhcmFtw6h0cmVzIGNvbXBsw6h0ZW1lbnQgYWJzZW50c1xuICAgICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgICA8Vm9jYWJ1bGFyeUV4ZXJjaXNlIHJvdXRlPXt7fX0gLz5cbiAgICAgICk7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2FjdGl2aXR5LWluZGljYXRvcicpKS50b0JlVHJ1dGh5KCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ0ZvbmN0aW9ubmUgY29ycmVjdGVtZW50IGF2ZWMgZGVzIHBhcmFtw6h0cmVzIHZhbGlkZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCwgcXVlcnlCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgICA8Vm9jYWJ1bGFyeUV4ZXJjaXNlIHJvdXRlPXt7IHBhcmFtczogeyBsZXZlbDogJzEnLCBtb2RlOiAnY2xhc3NpYycgfSB9fSAvPlxuICAgICAgKTtcblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIC8vIEF2ZWMgZGVzIHBhcmFtw6h0cmVzIHZhbGlkZXMsIGxlIGNvbnRlbnUgZG9pdCBzJ2FmZmljaGVyXG4gICAgICAgIGV4cGVjdChnZXRCeVRleHQoJ25hbWUnKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KCdub20nKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBcbiAgICAgICAgLy8gUGx1cyBkJ2luZGljYXRldXIgZGUgY2hhcmdlbWVudFxuICAgICAgICBleHBlY3QocXVlcnlCeVRlc3RJZCgnYWN0aXZpdHktaW5kaWNhdG9yJykpLnRvQmVOdWxsKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0NhcyBsaW1pdGVzIGV0IGVkZ2UgY2FzZXMnLCAoKSA9PiB7XG4gICAgdGVzdCgnR8OocmUgbGVzIHZhbGV1cnMgbnVsbCBkYW5zIGxlcyBwYXJhbcOodHJlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICAgICAgPFZvY2FidWxhcnlFeGVyY2lzZSByb3V0ZT17eyBwYXJhbXM6IHsgbGV2ZWw6IG51bGwsIG1vZGU6IG51bGwgfSB9fSAvPlxuICAgICAgKTtcblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnYWN0aXZpdHktaW5kaWNhdG9yJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnR8OocmUgbGVzIGNoYcOubmVzIHZpZGVzIGRhbnMgbGVzIHBhcmFtw6h0cmVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgICA8Vm9jYWJ1bGFyeUV4ZXJjaXNlIHJvdXRlPXt7IHBhcmFtczogeyBsZXZlbDogJycsIG1vZGU6ICcnIH0gfX0gLz5cbiAgICAgICk7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2FjdGl2aXR5LWluZGljYXRvcicpKS50b0JlVHJ1dGh5KCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ0fDqHJlIGxlcyB0eXBlcyBkZSBkb25uw6llcyBpbmF0dGVuZHVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgICA8Vm9jYWJ1bGFyeUV4ZXJjaXNlIHJvdXRlPXt7IHBhcmFtczogeyBsZXZlbDogMTIzLCBtb2RlOiB7fSB9IH19IC8+XG4gICAgICApO1xuXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KGdldEJ5VGVzdElkKCdhY3Rpdml0eS1pbmRpY2F0b3InKSkudG9CZVRydXRoeSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufSk7Il0sIm1hcHBpbmdzIjoiQUFRQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsYUFBYSxFQUFFO0VBQUEsT0FBTztJQUM5QkMsY0FBYyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxVQUFBQyxRQUFRO01BQUEsT0FBSUEsUUFBUSxDQUFDLENBQUM7SUFBQSxFQUFDO0lBQy9DQyxNQUFNLEVBQUU7TUFDTkMsSUFBSSxFQUFFSixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ2ZJLElBQUksRUFBRUwsSUFBSSxDQUFDQyxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUNESyxLQUFLLEVBQUUsU0FBUEEsS0FBS0EsQ0FBQUMsSUFBQTtNQUFBLElBQUtDLFFBQVEsR0FBQUQsSUFBQSxDQUFSQyxRQUFRO01BQUEsT0FBTyxJQUFBQyxXQUFBLENBQUFDLEdBQUEsRUFBQUQsV0FBQSxDQUFBRSxRQUFBO1FBQUFILFFBQUEsRUFBR0E7TUFBUSxDQUFHLENBQUM7SUFBQTtJQUN4Q0ksb0JBQW9CLEVBQUUsU0FBdEJBLG9CQUFvQkEsQ0FBQTtNQUFBLE9BQVMsQ0FBQyxDQUFDO0lBQUEsQ0FBQztJQUNoQ0MsYUFBYSxFQUFFLFNBQWZBLGFBQWFBLENBQUE7TUFBQSxPQUFTO1FBQ3BCQyxRQUFRLEVBQUVkLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7UUFDbkJjLE1BQU0sRUFBRWYsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztRQUNqQmUsU0FBUyxFQUFFaEIsSUFBSSxDQUFDQyxFQUFFLENBQUM7VUFBQSxPQUFNLElBQUk7UUFBQSxFQUFDO1FBQzlCZ0IsV0FBVyxFQUFFakIsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztRQUN0QmlCLFNBQVMsRUFBRWxCLElBQUksQ0FBQ0MsRUFBRSxDQUFDO1VBQUEsT0FB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