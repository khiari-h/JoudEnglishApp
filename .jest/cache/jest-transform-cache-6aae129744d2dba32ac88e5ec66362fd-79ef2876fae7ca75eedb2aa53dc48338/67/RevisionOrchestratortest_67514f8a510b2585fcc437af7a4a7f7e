a2cd096f22b2c66fbb4642a5791bf4b0
_getJestObj().mock('../../../src/hooks/useRevisionSettings');
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn()
  };
});
_getJestObj().mock('../../../src/contexts/ThemeContext', function () {
  return {
    ThemeContext: {
      Consumer: function Consumer(_ref) {
        var children = _ref.children;
        return children({
          colors: {
            surface: "#FFFFFF",
            text: "#1F2937",
            textSecondary: "#6B7280",
            primary: "#10B981",
            accent: "#3B82F6",
            warning: "#F59E0B"
          }
        });
      },
      Provider: function Provider(_ref2) {
        var children = _ref2.children,
          value = _ref2.value;
        return children;
      }
    },
    useTheme: function useTheme() {
      return {
        colors: {
          surface: "#FFFFFF",
          text: "#1F2937",
          textSecondary: "#6B7280",
          primary: "#10B981",
          accent: "#3B82F6",
          warning: "#F59E0B"
        }
      };
    }
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/popup/RevisionPopup', function () {
  var React = require('react');
  var _require = require('react-native'),
    View = _require.View,
    Text = _require.Text,
    TouchableOpacity = _require.TouchableOpacity;
  return function (_ref3) {
    var visible = _ref3.visible,
      onChoice = _ref3.onChoice,
      onDismiss = _ref3.onDismiss,
      totalWordsLearned = _ref3.totalWordsLearned,
      questionsCount = _ref3.questionsCount;
    if (!visible) return null;
    return (0, _jsxRuntime.jsxs)(View, {
      testID: "revision-popup",
      children: [(0, _jsxRuntime.jsxs)(Text, {
        testID: "popup-words",
        children: ["Words: ", totalWordsLearned]
      }), (0, _jsxRuntime.jsxs)(Text, {
        testID: "popup-questions",
        children: ["Questions: ", questionsCount]
      }), (0, _jsxRuntime.jsx)(TouchableOpacity, {
        testID: "popup-now",
        onPress: function onPress() {
          return onChoice('now');
        },
        children: (0, _jsxRuntime.jsx)(Text, {
          children: "Now"
        })
      }), (0, _jsxRuntime.jsx)(TouchableOpacity, {
        testID: "popup-later50",
        onPress: function onPress() {
          return onChoice('later_50');
        },
        children: (0, _jsxRuntime.jsx)(Text, {
          children: "Later 50"
        })
      }), (0, _jsxRuntime.jsx)(TouchableOpacity, {
        testID: "popup-disable",
        onPress: function onPress() {
          return onChoice('disable');
        },
        children: (0, _jsxRuntime.jsx)(Text, {
          children: "Disable"
        })
      }), (0, _jsxRuntime.jsx)(TouchableOpacity, {
        testID: "popup-dismiss",
        onPress: onDismiss,
        children: (0, _jsxRuntime.jsx)(Text, {
          children: "Dismiss"
        })
      })]
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _RevisionOrchestrator = _interopRequireDefault(require("../../../src/screens/VocabularyRevision/RevisionOrchestrator"));
var RevisionSettingsHook = _interopRequireWildcard(require("../../../src/hooks/useRevisionSettings"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _expoRouter = require("expo-router");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('RevisionOrchestrator', function () {
  var mockUseRevisionSettings;
  var createWordsData = function createWordsData(wordCount) {
    var levels = ['1', '2', '3', '4', '5', '6', 'bonus'];
    var modes = ['classic', 'fast'];
    var result = {};
    var totalCreated = 0;
    var _loop = function _loop(level) {
      var _loop2 = function _loop2(mode) {
          if (totalCreated >= wordCount) return 0;
          var wordsForThisSection = Math.min(wordCount - totalCreated, Math.ceil(wordCount / (levels.length * modes.length)));
          result[`vocabulary_${level}_${mode}`] = JSON.stringify({
            completedWords: {
              unit1: Array.from({
                length: wordsForThisSection
              }, function (_, i) {
                return `word_${level}_${mode}_${i}`;
              })
            }
          });
          totalCreated += wordsForThisSection;
          if (totalCreated >= wordCount) return 0;
        },
        _ret;
      for (var mode of modes) {
        _ret = _loop2(mode);
        if (_ret === 0) break;
      }
      if (totalCreated >= wordCount) return 1;
    };
    for (var level of levels) {
      if (_loop(level)) break;
    }
    return result;
  };
  beforeEach(function () {
    jest.clearAllMocks();
    jest.resetModules();
    jest.useFakeTimers();
    mockUseRevisionSettings = {
      preferences: {
        isDisabled: false,
        nextRevisionAt: 50,
        questionsCount: 10,
        frequency: 50
      },
      disableRevisions: jest.fn().mockResolvedValue(true),
      resetToNextTarget: jest.fn().mockResolvedValue(true),
      updatePreferences: jest.fn().mockResolvedValue(true)
    };
    RevisionSettingsHook.useRevisionSettings.mockReturnValue(mockUseRevisionSettings);
    _asyncStorage.default.getItem.mockReset();
    var defaultWordsData = createWordsData(3);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(defaultWordsData[key] || null);
    });
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  it('ne rend rien si les révisions sont désactivées', (0, _asyncToGenerator2.default)(function* () {
    mockUseRevisionSettings.preferences.isDisabled = true;
    RevisionSettingsHook.useRevisionSettings.mockReturnValue(mockUseRevisionSettings);
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      queryByTestId = _render.queryByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(2000);
    }));
    expect(queryByTestId('revision-popup')).toBeNull();
  }));
  it('ne montre pas la popup si le nombre de mots est inférieur au seuil', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      queryByTestId = _render2.queryByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(2000);
    }));
    expect(queryByTestId('revision-popup')).toBeNull();
  }));
  it('montre la popup quand le nombre de mots atteint le seuil', (0, _asyncToGenerator2.default)(function* () {
    var wordsData = createWordsData(60);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(wordsData[key] || null);
    });
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      getByTestId = _render3.getByTestId,
      getByText = _render3.getByText,
      queryByTestId = _render3.queryByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(_asyncStorage.default.getItem).toHaveBeenCalled();
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(2000);
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByTestId('revision-popup')).toBeTruthy();
    });
    expect(getByText('Words: 60')).toBeTruthy();
    expect(getByText('Questions: 10')).toBeTruthy();
  }));
  it('appelle resetToNextTarget et navigue quand "now" est choisi', (0, _asyncToGenerator2.default)(function* () {
    var wordsData = createWordsData(60);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(wordsData[key] || null);
    });
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {
        currentLevel: "A1"
      })),
      getByTestId = _render4.getByTestId,
      queryByTestId = _render4.queryByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(3000);
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByTestId('revision-popup')).toBeTruthy();
    });
    var nowButton = getByTestId('popup-now');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(nowButton);
    }));
    expect(mockUseRevisionSettings.resetToNextTarget).toHaveBeenCalledWith(60);
    expect(_expoRouter.router.push).toHaveBeenCalledWith({
      pathname: "/tabs/vocabularyRevision",
      params: {
        level: "A1",
        questionsCount: 10,
        source: 'popup_trigger'
      }
    });
  }));
  it('appelle updatePreferences quand "later_50" est choisi', (0, _asyncToGenerator2.default)(function* () {
    var wordsData = createWordsData(60);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(wordsData[key] || null);
    });
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      getByTestId = _render5.getByTestId,
      queryByTestId = _render5.queryByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(3000);
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByTestId('revision-popup')).toBeTruthy();
    });
    var laterButton = getByTestId('popup-later50');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(laterButton);
    }));
    expect(mockUseRevisionSettings.updatePreferences).toHaveBeenCalledWith({
      nextRevisionAt: 110
    });
  }));
  it('appelle disableRevisions quand "disable" est choisi', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockReset();
    var wordsData = createWordsData(60);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(wordsData[key] || null);
    });
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      getByTestId = _render6.getByTestId,
      queryByTestId = _render6.queryByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(3000);
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByTestId('revision-popup')).toBeTruthy();
    });
    var disableButton = getByTestId('popup-disable');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(disableButton);
    }));
    expect(mockUseRevisionSettings.disableRevisions).toHaveBeenCalled();
  }));
  it('gère la fermeture (dismiss) en choisissant "later_50" par défaut', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockReset();
    var wordsData = createWordsData(60);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(wordsData[key] || null);
    });
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      getByTestId = _render7.getByTestId,
      queryByTestId = _render7.queryByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(3000);
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByTestId('revision-popup')).toBeTruthy();
    });
    var dismissButton = getByTestId('popup-dismiss');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(dismissButton);
    }));
    expect(mockUseRevisionSettings.updatePreferences).toHaveBeenCalledWith({
      nextRevisionAt: 110
    });
  }));
  it('debug - vérifie les conditions de la popup', (0, _asyncToGenerator2.default)(function* () {
    var wordsData = createWordsData(60);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(wordsData[key] || null);
    });
    var getItemSpy = jest.spyOn(_asyncStorage.default, 'getItem');
    var TestComponent = function TestComponent() {
      var _React$useState = _react.default.useState({}),
        _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
        debugInfo = _React$useState2[0],
        setDebugInfo = _React$useState2[1];
      var _RevisionSettingsHook = RevisionSettingsHook.useRevisionSettings(),
        preferences = _RevisionSettingsHook.preferences;
      _react.default.useEffect(function () {
        var countWords = function () {
          var _ref21 = (0, _asyncToGenerator2.default)(function* () {
            var total = 0;
            var levels = ['1', '2', '3', '4', '5', '6', 'bonus'];
            var modes = ['classic', 'fast'];
            for (var level of levels) {
              for (var mode of modes) {
                var stored = yield _asyncStorage.default.getItem(`vocabulary_${level}_${mode}`);
                if (stored) {
                  var data = JSON.parse(stored);
                  var completedWords = data.completedWords || {};
                  total += Object.values(completedWords).reduce(function (acc, words) {
                    if (Array.isArray(words)) {
                      return acc + words.length;
                    }
                    return acc;
                  }, 0);
                }
              }
            }
            setDebugInfo({
              totalWords: total,
              isDisabled: preferences.isDisabled,
              nextRevisionAt: preferences.nextRevisionAt,
              shouldShow: !preferences.isDisabled && total >= preferences.nextRevisionAt && total > 0
            });
          });
          return function countWords() {
            return _ref21.apply(this, arguments);
          };
        }();
        countWords();
      }, [preferences]);
      return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
        testID: "debug-info",
        children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "debug-total",
          children: debugInfo.totalWords
        }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "debug-disabled",
          children: String(debugInfo.isDisabled)
        }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "debug-threshold",
          children: debugInfo.nextRevisionAt
        }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "debug-should-show",
          children: String(debugInfo.shouldShow)
        })]
      });
    };
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestComponent, {})),
      getByTestId = _render8.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getItemSpy).toHaveBeenCalled();
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(1000);
    }));
    var totalWords = getByTestId('debug-total').children[0];
    var isDisabled = getByTestId('debug-disabled').children[0];
    var threshold = getByTestId('debug-threshold').children[0];
    var shouldShow = getByTestId('debug-should-show').children[0];
    console.log('Debug info:', {
      totalWords: totalWords,
      isDisabled: isDisabled,
      threshold: threshold,
      shouldShow: shouldShow
    });
    expect(totalWords).toBe('60');
    expect(isDisabled).toBe('false');
    expect(threshold).toBe('50');
    expect(shouldShow).toBe('true');
  }));
  it('compte correctement les mots depuis AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
    var wordsData = createWordsData(35);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(wordsData[key] || null);
    });
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      queryByTestId = _render9.queryByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(2000);
    }));
    expect(queryByTestId('revision-popup')).toBeNull();
    var expectedCalls = ['1', '2', '3', '4', '5', '6', 'bonus'].flatMap(function (level) {
      return ['classic', 'fast'].map(function (mode) {
        return `vocabulary_${level}_${mode}`;
      });
    });
    expectedCalls.forEach(function (key) {
      expect(_asyncStorage.default.getItem).toHaveBeenCalledWith(key);
    });
  }));
  it('debug - vérifie l\'état du composant RevisionOrchestrator', (0, _asyncToGenerator2.default)(function* () {
    var wordsData = createWordsData(60);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(wordsData[key] || null);
    });
    var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      getByTestId = _render0.getByTestId,
      queryByTestId = _render0.queryByTestId,
      debug = _render0.debug;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(1000);
    }));
    console.log('=== ÉTAT INITIAL ===');
    console.log('Popup visible:', queryByTestId('revision-popup') ? 'OUI' : 'NON');
    debug();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(2000);
    }));
    console.log('=== APRÈS 3 SECONDES ===');
    console.log('Popup visible:', queryByTestId('revision-popup') ? 'OUI' : 'NON');
    debug();
    var popup = queryByTestId('revision-popup');
    expect(popup).toBeTruthy();
  }));
  it('debug - vérifie le mock AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
    var wordsData = createWordsData(60);
    console.log('=== DONNÉES CRÉÉES ===');
    console.log('Words data:', wordsData);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      var result = wordsData[key] || null;
      console.log(`AsyncStorage.getItem("${key}") →`, result);
      return Promise.resolve(result);
    });
    var levels = ['1', '2', '3', '4', '5', '6', 'bonus'];
    var modes = ['classic', 'fast'];
    var total = 0;
    for (var level of levels) {
      for (var mode of modes) {
        var key = `vocabulary_${level}_${mode}`;
        var stored = yield _asyncStorage.default.getItem(key);
        if (stored) {
          var data = JSON.parse(stored);
          var completedWords = data.completedWords || {};
          var count = Object.values(completedWords).reduce(function (acc, words) {
            if (Array.isArray(words)) {
              return acc + words.length;
            }
            return acc;
          }, 0);
          total += count;
          console.log(`${key}: ${count} mots`);
        }
      }
    }
    console.log('Total calculé:', total);
    expect(total).toBe(60);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,