80b666812a7f9d8f722c50b9adaab7e4
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactNative = require("@testing-library/react-native");
var _Button = _interopRequireDefault(require("../../../../src/components/ui/Button"));
var _jsxRuntime = require("react/jsx-runtime");
describe('Button', function () {
  it('devrait rendre le texte correct', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        title: "Mon Bouton",
        onPress: function onPress() {}
      })),
      getByText = _render.getByText;
    expect(getByText('Mon Bouton')).toBeTruthy();
  });
  it('devrait appeler la fonction onPress quand le bouton est pressé', function () {
    var mockOnPress = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        title: "Mon Bouton",
        onPress: mockOnPress
      })),
      getByText = _render2.getByText;
    _reactNative.fireEvent.press(getByText('Mon Bouton'));
    expect(mockOnPress).toHaveBeenCalledTimes(1);
  });
  it('ne devrait pas appeler la fonction onPress quand le bouton est désactivé', function () {
    var mockOnPress = jest.fn();
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        title: "Mon Bouton",
        onPress: mockOnPress,
        disabled: true
      })),
      getByText = _render3.getByText;
    _reactNative.fireEvent.press(getByText('Mon Bouton'));
    expect(mockOnPress).not.toHaveBeenCalled();
  });
  it('devrait afficher un indicateur de chargement si loading est vrai', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        title: "Mon Bouton",
        onPress: function onPress() {},
        loading: true
      })),
      queryByTestId = _render4.queryByTestId;
    expect(queryByTestId('button-loader')).toBeTruthy();
  });
  it('ne devrait pas afficher un indicateur de chargement si loading est faux', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        title: "Mon Bouton",
        onPress: function onPress() {},
        loading: false
      })),
      queryByTestId = _render5.queryByTestId;
    expect(queryByTestId('button-loader')).toBeNull();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX0J1dHRvbiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfanN4UnVudGltZSIsImRlc2NyaWJlIiwiaXQiLCJfcmVuZGVyIiwicmVuZGVyIiwianN4IiwiZGVmYXVsdCIsInRpdGxlIiwib25QcmVzcyIsImdldEJ5VGV4dCIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJtb2NrT25QcmVzcyIsImplc3QiLCJmbiIsIl9yZW5kZXIyIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJfcmVuZGVyMyIsImRpc2FibGVkIiwibm90IiwidG9IYXZlQmVlbkNhbGxlZCIsIl9yZW5kZXI0IiwibG9hZGluZyIsInF1ZXJ5QnlUZXN0SWQiLCJfcmVuZGVyNSIsInRvQmVOdWxsIl0sInNvdXJjZXMiOlsiQnV0dG9uLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcblxyXG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3VpL0J1dHRvbic7XHJcblxyXG5cclxuXHJcbmRlc2NyaWJlKCdCdXR0b24nLCAoKSA9PiB7XHJcblxyXG7CoCBpdCgnZGV2cmFpdCByZW5kcmUgbGUgdGV4dGUgY29ycmVjdCcsICgpID0+IHtcclxuXHJcbsKgIMKgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPEJ1dHRvbiB0aXRsZT1cIk1vbiBCb3V0b25cIiBvblByZXNzPXsoKSA9PiB7fX0gLz4pO1xyXG5cclxuwqAgwqAgZXhwZWN0KGdldEJ5VGV4dCgnTW9uIEJvdXRvbicpKS50b0JlVHJ1dGh5KCk7XHJcblxyXG7CoCB9KTtcclxuXHJcblxyXG5cclxuwqAgaXQoJ2RldnJhaXQgYXBwZWxlciBsYSBmb25jdGlvbiBvblByZXNzIHF1YW5kIGxlIGJvdXRvbiBlc3QgcHJlc3PDqScsICgpID0+IHtcclxuXHJcbsKgIMKgIGNvbnN0IG1vY2tPblByZXNzID0gamVzdC5mbigpO1xyXG5cclxuwqAgwqAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcig8QnV0dG9uIHRpdGxlPVwiTW9uIEJvdXRvblwiIG9uUHJlc3M9e21vY2tPblByZXNzfSAvPik7XHJcblxyXG7CoCDCoCBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCdNb24gQm91dG9uJykpO1xyXG5cclxuwqAgwqAgZXhwZWN0KG1vY2tPblByZXNzKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XHJcblxyXG7CoCB9KTtcclxuXHJcblxyXG5cclxuwqAgaXQoJ25lIGRldnJhaXQgcGFzIGFwcGVsZXIgbGEgZm9uY3Rpb24gb25QcmVzcyBxdWFuZCBsZSBib3V0b24gZXN0IGTDqXNhY3RpdsOpJywgKCkgPT4ge1xyXG5cclxuwqAgwqAgY29uc3QgbW9ja09uUHJlc3MgPSBqZXN0LmZuKCk7XHJcblxyXG7CoCDCoCBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKDxCdXR0b24gdGl0bGU9XCJNb24gQm91dG9uXCIgb25QcmVzcz17bW9ja09uUHJlc3N9IGRpc2FibGVkIC8+KTtcclxuXHJcbsKgIMKgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ01vbiBCb3V0b24nKSk7XHJcblxyXG7CoCDCoCBleHBlY3QobW9ja09uUHJlc3MpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcblxyXG7CoCB9KTtcclxuXHJcblxyXG5cclxuwqAgaXQoJ2RldnJhaXQgYWZmaWNoZXIgdW4gaW5kaWNhdGV1ciBkZSBjaGFyZ2VtZW50IHNpIGxvYWRpbmcgZXN0IHZyYWknLCAoKSA9PiB7XHJcblxyXG7CoCDCoCBjb25zdCB7IHF1ZXJ5QnlUZXN0SWQgfSA9IHJlbmRlcig8QnV0dG9uIHRpdGxlPVwiTW9uIEJvdXRvblwiIG9uUHJlc3M9eygpID0+IHt9fSBsb2FkaW5nIC8+KTtcclxuXHJcbsKgIMKgIGV4cGVjdChxdWVyeUJ5VGVzdElkKCdidXR0b24tbG9hZGVyJykpLnRvQmVUcnV0aHkoKTtcclxuXHJcbsKgIH0pO1xyXG5cclxuXHJcblxyXG7CoCBpdCgnbmUgZGV2cmFpdCBwYXMgYWZmaWNoZXIgdW4gaW5kaWNhdGV1ciBkZSBjaGFyZ2VtZW50IHNpIGxvYWRpbmcgZXN0IGZhdXgnLCAoKSA9PiB7XHJcblxyXG7CoCDCoCBjb25zdCB7IHF1ZXJ5QnlUZXN0SWQgfSA9IHJlbmRlcig8QnV0dG9uIHRpdGxlPVwiTW9uIEJvdXRvblwiIG9uUHJlc3M9eygpID0+IHt9fSBsb2FkaW5nPXtmYWxzZX0gLz4pO1xyXG5cclxuwqAgwqAgZXhwZWN0KHF1ZXJ5QnlUZXN0SWQoJ2J1dHRvbi1sb2FkZXInKSkudG9CZU51bGwoKTtcclxuXHJcbsKgIH0pO1xyXG5cclxufSk7XHJcblxyXG4iXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBQSxZQUFBLEdBQUFDLE9BQUE7QUFFQSxJQUFBQyxPQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFBMEQsSUFBQUcsV0FBQSxHQUFBSCxPQUFBO0FBSTFESSxRQUFRLENBQUMsUUFBUSxFQUFFLFlBQU07RUFFdkJDLEVBQUUsQ0FBQyxpQ0FBaUMsRUFBRSxZQUFNO0lBRTFDLElBQUFDLE9BQUEsR0FBc0IsSUFBQUMsbUJBQU0sRUFBQyxJQUFBSixXQUFBLENBQUFLLEdBQUEsRUFBQ1AsT0FBQSxDQUFBUSxPQUFNO1FBQUNDLEtBQUssRUFBQyxZQUFZO1FBQUNDLE9BQU8sRUFBRSxTQUFUQSxPQUFPQSxDQUFBLEVBQVEsQ0FBQztNQUFFLENBQUUsQ0FBQyxDQUFDO01BQXRFQyxTQUFTLEdBQUFOLE9BQUEsQ0FBVE0sU0FBUztJQUVqQkMsTUFBTSxDQUFDRCxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQ0UsVUFBVSxDQUFDLENBQUM7RUFFOUMsQ0FBQyxDQUFDO0VBSUZULEVBQUUsQ0FBQyxnRUFBZ0UsRUFBRSxZQUFNO0lBRXpFLElBQU1VLFdBQVcsR0FBR0MsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUU3QixJQUFBQyxRQUFBLEdBQXNCLElBQUFYLG1CQUFNLEVBQUMsSUFBQUosV0FBQSxDQUFBSyxHQUFBLEVBQUNQLE9BQUEsQ0FBQVEsT0FBTTtRQUFDQyxLQUFLLEVBQUMsWUFBWTtRQUFDQyxPQUFPLEVBQUVJO01BQVksQ0FBRSxDQUFDLENBQUM7TUFBekVILFNBQVMsR0FBQU0sUUFBQSxDQUFUTixTQUFTO0lBRWpCTyxzQkFBUyxDQUFDQyxLQUFLLENBQUNSLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUV4Q0MsTUFBTSxDQUFDRSxXQUFXLENBQUMsQ0FBQ00scUJBQXFCLENBQUMsQ0FBQyxDQUFDO0VBRTlDLENBQUMsQ0FBQztFQUlGaEIsRUFBRSxDQUFDLDBFQUEwRSxFQUFFLFlBQU07SUFFbkYsSUFBTVUsV0FBVyxHQUFHQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBRTdCLElBQUFLLFFBQUEsR0FBc0IsSUFBQWYsbUJBQU0sRUFBQyxJQUFBSixXQUFBLENBQUFLLEdBQUEsRUFBQ1AsT0FBQSxDQUFBUSxPQUFNO1FBQUNDLEtBQUssRUFBQyxZQUFZO1FBQUNDLE9BQU8sRUFBRUksV0FBWTtRQUFDUSxRQUFRO01BQUEsQ0FBRSxDQUFDLENBQUM7TUFBbEZYLFNBQVMsR0FBQVUsUUFBQSxDQUFUVixTQUFTO0lBRWpCTyxzQkFBUyxDQUFDQyxLQUFLLENBQUNSLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUV4Q0MsTUFBTSxDQUFDRSxXQUFXLENBQUMsQ0FBQ1MsR0FBRyxDQUFDQyxnQkFBZ0IsQ0FBQyxDQUFDO0VBRTVDLENBQUMsQ0FBQztFQUlGcEIsRUFBRSxDQUFDLGtFQUFrRSxFQUFFLFlBQU07SUFFM0UsSUFBQXFCLFFBQUEsR0FBMEIsSUFBQW5CLG1CQUFNLEVBQUMsSUFBQUosV0FBQSxDQUFBSyxHQUFBLEVBQUNQLE9BQUEsQ0FBQVEsT0FBTTtRQUFDQyxLQUFLLEVBQUMsWUFBWTtRQUFDQyxPQUFPLEVBQUUsU0FBVEEsT0FBT0EsQ0FBQSxFQUFRLENBQUMsQ0FBRTtRQUFDZ0IsT0FBTztNQUFBLENBQUUsQ0FBQyxDQUFDO01BQWxGQyxhQUFhLEdBQUFGLFFBQUEsQ0FBYkUsYUFBYTtJQUVyQmYsTUFBTSxDQUFDZSxhQUFhLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQ2QsVUFBVSxDQUFDLENBQUM7RUFFckQsQ0FBQyxDQUFDO0VBSUZULEVBQUUsQ0FBQyx5RUFBeUUsRUFBRSxZQUFNO0lBRWxGLElBQUF3QixRQUFBLEdBQTBCLElBQUF0QixtQkFBTSxFQUFDLElBQUFKLFdBQUEsQ0FBQUssR0FBQSxFQUFDUCxPQUFBLENBQUFRLE9BQU07UUFBQ0MsS0FBSyxFQUFDLFlBQVk7UUFBQ0MsT0FBTyxFQUFFLFNBQVRBLE9BQU9BLENBQUEsRUFBUSxDQUFDLENBQUU7UUFBQ2dCLE9BQU8sRUFBRTtNQUFNLENBQUUsQ0FBQyxDQUFDO01BQTFGQyxhQUFhLEdBQUFDLFFBQUEsQ0FBYkQsYUFBYTtJQUVyQmYsTUFBTSxDQUFDZSxhQUFhLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQ0UsUUFBUSxDQUFDLENBQUM7RUFFbkQsQ0FBQyxDQUFDO0FBRUosQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119