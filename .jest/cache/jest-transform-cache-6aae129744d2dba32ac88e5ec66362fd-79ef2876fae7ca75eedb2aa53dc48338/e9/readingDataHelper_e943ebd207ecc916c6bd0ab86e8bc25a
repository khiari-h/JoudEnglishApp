70d2a001206afe38a24c63d90cb9aceb
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isBonusLevel = exports.getReadingStats = exports.getReadingMetadata = exports.getReadingExercisesByTopic = exports.getReadingExercisesByDifficulty = exports.getReadingExerciseById = exports.getReadingData = exports.getRandomReadingExercise = exports.getLevelTitle = exports.getLevelIcon = exports.getLevelDisplayName = exports.getLevelDescription = exports.getLevelColor = exports.getAvailableTopics = exports.getAvailableLevels = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _ = _interopRequireDefault(require("../../data/reading/1"));
var _2 = _interopRequireDefault(require("../../data/reading/2"));
var _3 = _interopRequireDefault(require("../../data/reading/3"));
var _4 = _interopRequireDefault(require("../../data/reading/4"));
var _5 = _interopRequireDefault(require("../../data/reading/5"));
var _6 = _interopRequireDefault(require("../../data/reading/6"));
var _bonus = _interopRequireDefault(require("../../data/reading/bonus"));
var getReadingData = exports.getReadingData = function getReadingData(level) {
  var dataMap = {
    "1": _.default,
    "2": _2.default,
    "3": _3.default,
    "4": _4.default,
    "5": _5.default,
    "6": _6.default,
    "bonus": _bonus.default
  };
  return dataMap[level] || _.default;
};
var getLevelColor = exports.getLevelColor = function getLevelColor(level) {
  var colors = {
    "1": "#3b82f6",
    "2": "#8b5cf6",
    "3": "#10b981",
    "4": "#f59e0b",
    "5": "#ef4444",
    "6": "#6366f1",
    "bonus": "#9333EA"
  };
  return colors[level] || "#3b82f6";
};
var getLevelDisplayName = exports.getLevelDisplayName = function getLevelDisplayName(level) {
  var displayNames = {
    "1": "Niveau 1",
    "2": "Niveau 2",
    "3": "Niveau 3",
    "4": "Niveau 4",
    "5": "Niveau 5",
    "6": "Niveau 6",
    "bonus": "Bonus"
  };
  return displayNames[level] || `Niveau ${level}`;
};
var getLevelDescription = exports.getLevelDescription = function getLevelDescription(level) {
  var descriptions = {
    "1": "Communication basique, expressions simples du quotidien",
    "2": "Expressions simples, conversations courantes",
    "3": "Communication claire sur des sujets familiers",
    "4": "Communication complexe, discussions techniques",
    "5": "Expression fluide, sujets complexes",
    "6": "Niveau proche du locuteur natif, ma√Ætrise de la langue",
    "bonus": "Contenu exclusif et avanc√©"
  };
  return descriptions[level] || "Niveau de langue";
};
var getLevelIcon = exports.getLevelIcon = function getLevelIcon(level) {
  var icons = {
    "1": "üå±",
    "2": "üåø",
    "3": "üå≥",
    "4": "üöÄ",
    "5": "üíé",
    "6": "üèÜ",
    "bonus": "üî•"
  };
  return icons[level] || "üìñ";
};
var getLevelTitle = exports.getLevelTitle = function getLevelTitle(level) {
  var displayName = getLevelDisplayName(level);
  var description = getLevelDescription(level);
  return `${displayName} - ${description}`;
};
var isBonusLevel = exports.isBonusLevel = function isBonusLevel(level) {
  return level === "bonus";
};
var getAvailableLevels = exports.getAvailableLevels = function getAvailableLevels() {
  return ["1", "2", "3", "4", "5", "6", "bonus"];
};
var getReadingStats = exports.getReadingStats = function getReadingStats(level) {
  var _data$metadata;
  var data = getReadingData(level);
  if (!data || !data.exercises) {
    return {
      totalTexts: 0,
      totalQuestions: 0,
      averageWordCount: 0,
      averageQuestionsPerText: 0
    };
  }
  var totalTexts = data.exercises.length;
  var totalQuestions = data.exercises.reduce(function (sum, exercise) {
    return sum + (exercise.questions ? exercise.questions.length : 0);
  }, 0);
  var totalWords = data.exercises.reduce(function (sum, exercise) {
    return sum + (exercise.wordCount || 0);
  }, 0);
  return {
    totalTexts: totalTexts,
    totalQuestions: totalQuestions,
    averageWordCount: totalTexts > 0 ? Math.round(totalWords / totalTexts) : 0,
    averageQuestionsPerText: totalTexts > 0 ? Math.round(totalQuestions / totalTexts) : 0,
    level: ((_data$metadata = data.metadata) == null ? void 0 : _data$metadata.level) || level
  };
};
var getReadingExerciseById = exports.getReadingExerciseById = function getReadingExerciseById(level, textId) {
  var data = getReadingData(level);
  if (!data.exercises) return null;
  return data.exercises.find(function (exercise) {
    return exercise.id === textId;
  }) || null;
};
var getReadingExercisesByDifficulty = exports.getReadingExercisesByDifficulty = function getReadingExercisesByDifficulty(level, difficulty) {
  var data = getReadingData(level);
  if (!data.exercises) return [];
  return data.exercises.filter(function (exercise) {
    return exercise.difficulty === difficulty;
  });
};
var getReadingExercisesByTopic = exports.getReadingExercisesByTopic = function getReadingExercisesByTopic(level, topic) {
  var data = getReadingData(level);
  if (!data.exercises) return [];
  return data.exercises.filter(function (exercise) {
    var _exercise$topics;
    return (_exercise$topics = exercise.topics) == null ? void 0 : _exercise$topics.includes(topic);
  });
};
var getAvailableTopics = exports.getAvailableTopics = function getAvailableTopics(level) {
  var data = getReadingData(level);
  if (!data.exercises) return [];
  var allTopics = data.exercises.flatMap(function (exercise) {
    return exercise.topics || [];
  });
  return (0, _toConsumableArray2.default)(new Set(allTopics)).sort();
};
var getReadingMetadata = exports.getReadingMetadata = function getReadingMetadata(level) {
  var data = getReadingData(level);
  return data.metadata || {
    level: level,
    totalTexts: 0,
    totalQuestions: 0,
    averageWordCount: 0,
    difficulties: [],
    topics: [],
    description: "Exercices de compr√©hension √©crite"
  };
};
var getRandomReadingExercise = exports.getRandomReadingExercise = function getRandomReadingExercise(level) {
  var data = getReadingData(level);
  if (!data.exercises || data.exercises.length === 0) return null;
  var randomIndex = Math.floor(Math.random() * data.exercises.length);
  return data.exercises[randomIndex];
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,