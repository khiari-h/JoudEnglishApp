{"version":3,"names":["_","_interopRequireDefault","require","_2","_3","_4","_5","_6","_bonus","getReadingData","exports","level","dataMap","reading1Data","reading2Data","reading3Data","reading4Data","reading5Data","reading6Data","readingBonusData","getLevelColor","colors","getLevelDisplayName","displayNames","getLevelDescription","descriptions","getLevelIcon","icons","getLevelTitle","displayName","description","isBonusLevel","getAvailableLevels","getReadingStats","_data$metadata","data","exercises","totalTexts","totalQuestions","averageWordCount","averageQuestionsPerText","length","reduce","sum","exercise","questions","totalWords","wordCount","Math","round","metadata","getReadingExerciseById","textId","find","id","getReadingExercisesByDifficulty","difficulty","filter","getReadingExercisesByTopic","topic","_exercise$topics","topics","includes","getAvailableTopics","allTopics","flatMap","_toConsumableArray2","default","Set","sort","getReadingMetadata","difficulties","getRandomReadingExercise","randomIndex","floor","random"],"sources":["readingDataHelper.js"],"sourcesContent":["// src/utils/reading/readingDataHelper.js\r\n\r\n// Import de tous les index des niveaux de lecture (6 niveaux + bonus)\r\nimport reading1Data from \"../../data/reading/1\";\r\nimport reading2Data from \"../../data/reading/2\";\r\nimport reading3Data from \"../../data/reading/3\";\r\nimport reading4Data from \"../../data/reading/4\";\r\nimport reading5Data from \"../../data/reading/5\";\r\nimport reading6Data from \"../../data/reading/6\";\r\nimport readingBonusData from \"../../data/reading/bonus\";\r\n\r\n/**\r\n * Récupère les données de lecture en fonction du niveau\r\n * @param {string} level - Le niveau de langue (1, 2, 3, 4, 5, 6, bonus)\r\n * @returns {Object} Les données de lecture pour le niveau spécifié\r\n */\r\nexport const getReadingData = (level) => {\r\n  const dataMap = {\r\n    \"1\": reading1Data,\r\n    \"2\": reading2Data,\r\n    \"3\": reading3Data,\r\n    \"4\": reading4Data,\r\n    \"5\": reading5Data,\r\n    \"6\": reading6Data,\r\n    \"bonus\": readingBonusData,\r\n  };\r\n  \r\n  // Si le niveau demandé n'existe pas, on retourne le niveau 1 par défaut\r\n  return dataMap[level] || reading1Data;\r\n};\r\n\r\n/**\r\n * Récupère la couleur associée à un niveau de langue\r\n * @param {string} level - Le niveau de langue (1, 2, 3, 4, 5, 6, bonus)\r\n * @returns {string} Code couleur hexadécimal pour le niveau\r\n */\r\nexport const getLevelColor = (level) => {\r\n  const colors = {\r\n    \"1\": \"#3b82f6\", // Bleu - Niveau 1\r\n    \"2\": \"#8b5cf6\", // Violet - Niveau 2\r\n    \"3\": \"#10b981\", // Vert - Niveau 3\r\n    \"4\": \"#f59e0b\", // Orange - Niveau 4\r\n    \"5\": \"#ef4444\", // Rouge - Niveau 5\r\n    \"6\": \"#6366f1\", // Indigo - Niveau 6\r\n    \"bonus\": \"#9333EA\", // Violet premium - Bonus\r\n  };\r\n  return colors[level] || \"#3b82f6\"; // Bleu par défaut (niveau 1)\r\n};\r\n\r\n/**\r\n * Récupère le nom d'affichage d'un niveau\r\n * @param {string} level - Le niveau de langue (1, 2, 3, 4, 5, 6, bonus)\r\n * @returns {string} Nom d'affichage du niveau\r\n */\r\nexport const getLevelDisplayName = (level) => {\r\n  const displayNames = {\r\n    \"1\": \"Niveau 1\",\r\n    \"2\": \"Niveau 2\",\r\n    \"3\": \"Niveau 3\",\r\n    \"4\": \"Niveau 4\", \r\n    \"5\": \"Niveau 5\",\r\n    \"6\": \"Niveau 6\",\r\n    \"bonus\": \"Bonus\",\r\n  };\r\n  return displayNames[level] || `Niveau ${level}`;\r\n};\r\n\r\n/**\r\n * Récupère la description d'un niveau\r\n * @param {string} level - Le niveau de langue (1, 2, 3, 4, 5, 6, bonus)\r\n * @returns {string} Description du niveau\r\n */\r\nexport const getLevelDescription = (level) => {\r\n  const descriptions = {\r\n    \"1\": \"Communication basique, expressions simples du quotidien\",\r\n    \"2\": \"Expressions simples, conversations courantes\",\r\n    \"3\": \"Communication claire sur des sujets familiers\", \r\n    \"4\": \"Communication complexe, discussions techniques\",\r\n    \"5\": \"Expression fluide, sujets complexes\",\r\n    \"6\": \"Niveau proche du locuteur natif, maîtrise de la langue\",\r\n    \"bonus\": \"Contenu exclusif et avancé\",\r\n  };\r\n  return descriptions[level] || \"Niveau de langue\";\r\n};\r\n\r\n/**\r\n * Récupère l'icône associée à un niveau\r\n * @param {string} level - Le niveau de langue\r\n * @returns {string} Emoji icône pour le niveau\r\n */\r\nexport const getLevelIcon = (level) => {\r\n  const icons = {\r\n    \"1\": \"🌱\",\r\n    \"2\": \"🌿\",\r\n    \"3\": \"🌳\", \r\n    \"4\": \"🚀\",\r\n    \"5\": \"💎\",\r\n    \"6\": \"🏆\",\r\n    \"bonus\": \"🔥\",\r\n  };\r\n  return icons[level] || \"📖\";\r\n};\r\n\r\n/**\r\n * Récupère le titre complet d'un niveau\r\n * @param {string} level - Le niveau de langue (1, 2, 3, 4, 5, 6, bonus)\r\n * @returns {string} Titre complet du niveau\r\n */\r\nexport const getLevelTitle = (level) => {\r\n  const displayName = getLevelDisplayName(level);\r\n  const description = getLevelDescription(level);\r\n  return `${displayName} - ${description}`;\r\n};\r\n\r\n/**\r\n * Vérifie si un niveau est un niveau bonus\r\n * @param {string} level - Le niveau à vérifier\r\n * @returns {boolean} True si c'est un niveau bonus\r\n */\r\nexport const isBonusLevel = (level) => {\r\n  return level === \"bonus\";\r\n};\r\n\r\n/**\r\n * Récupère la liste des niveaux disponibles\r\n * @returns {Array} Liste des niveaux disponibles\r\n */\r\nexport const getAvailableLevels = () => {\r\n  return [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"bonus\"];\r\n};\r\n\r\n/**\r\n * Récupère les statistiques d'un niveau de lecture\r\n * @param {string} level - Le niveau de langue\r\n * @returns {Object} Statistiques du niveau\r\n */\r\nexport const getReadingStats = (level) => {\r\n  const data = getReadingData(level);\r\n  \r\n  if (!data || !data.exercises) {\r\n    return { \r\n      totalTexts: 0, \r\n      totalQuestions: 0,\r\n      averageWordCount: 0,\r\n      averageQuestionsPerText: 0\r\n    };\r\n  }\r\n\r\n  const totalTexts = data.exercises.length;\r\n  const totalQuestions = data.exercises.reduce((sum, exercise) => {\r\n    return sum + (exercise.questions ? exercise.questions.length : 0);\r\n  }, 0);\r\n  \r\n  const totalWords = data.exercises.reduce((sum, exercise) => {\r\n    return sum + (exercise.wordCount || 0);\r\n  }, 0);\r\n\r\n  return {\r\n    totalTexts,\r\n    totalQuestions,\r\n    averageWordCount: totalTexts > 0 ? Math.round(totalWords / totalTexts) : 0,\r\n    averageQuestionsPerText: totalTexts > 0 ? Math.round(totalQuestions / totalTexts) : 0,\r\n    level: data.metadata?.level || level,\r\n  };\r\n};\r\n\r\n/**\r\n * Récupère un exercice de lecture par ID\r\n * @param {string} level - Le niveau de langue\r\n * @param {string} textId - L'ID du texte\r\n * @returns {Object|null} L'exercice trouvé ou null\r\n */\r\nexport const getReadingExerciseById = (level, textId) => {\r\n  const data = getReadingData(level);\r\n  if (!data.exercises) return null;\r\n  \r\n  return data.exercises.find(exercise => exercise.id === textId) || null;\r\n};\r\n\r\n/**\r\n * Récupère les exercices par difficulté\r\n * @param {string} level - Le niveau de langue\r\n * @param {number} difficulty - La difficulté (1, 2, 3...)\r\n * @returns {Array} Liste des exercices de cette difficulté\r\n */\r\nexport const getReadingExercisesByDifficulty = (level, difficulty) => {\r\n  const data = getReadingData(level);\r\n  if (!data.exercises) return [];\r\n  \r\n  return data.exercises.filter(exercise => exercise.difficulty === difficulty);\r\n};\r\n\r\n/**\r\n * Récupère les exercices par sujet/topic\r\n * @param {string} level - Le niveau de langue\r\n * @param {string} topic - Le sujet recherché\r\n * @returns {Array} Liste des exercices sur ce sujet\r\n */\r\nexport const getReadingExercisesByTopic = (level, topic) => {\r\n  const data = getReadingData(level);\r\n  if (!data.exercises) return [];\r\n  \r\n  return data.exercises.filter(exercise => \r\n    exercise.topics?.includes(topic)\r\n  );\r\n};\r\n\r\n/**\r\n * Récupère tous les sujets disponibles pour un niveau\r\n * @param {string} level - Le niveau de langue\r\n * @returns {Array} Liste unique des sujets disponibles\r\n */\r\nexport const getAvailableTopics = (level) => {\r\n  const data = getReadingData(level);\r\n  if (!data.exercises) return [];\r\n  \r\n  const allTopics = data.exercises.flatMap(exercise => exercise.topics || []);\r\n  return [...new Set(allTopics)].sort();\r\n};\r\n\r\n/**\r\n * Récupère les métadonnées d'un niveau de lecture\r\n * @param {string} level - Le niveau de langue\r\n * @returns {Object} Métadonnées du niveau\r\n */\r\nexport const getReadingMetadata = (level) => {\r\n  const data = getReadingData(level);\r\n  return data.metadata || {\r\n    level,\r\n    totalTexts: 0,\r\n    totalQuestions: 0,\r\n    averageWordCount: 0,\r\n    difficulties: [],\r\n    topics: [],\r\n    description: \"Exercices de compréhension écrite\"\r\n  };\r\n};\r\n\r\n/**\r\n * Récupère un exercice aléatoire pour un niveau\r\n * @param {string} level - Le niveau de langue\r\n * @returns {Object|null} Un exercice aléatoire ou null\r\n */\r\nexport const getRandomReadingExercise = (level) => {\r\n  const data = getReadingData(level);\r\n  if (!data.exercises || data.exercises.length === 0) return null;\r\n  \r\n  const randomIndex = Math.floor(Math.random() * data.exercises.length);\r\n  return data.exercises[randomIndex];\r\n};"],"mappings":"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","ignoreList":[]}