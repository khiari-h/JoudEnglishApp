e5e834b3e773f2961cf86a2a96b13dae
_getJestObj().mock('expo-linear-gradient', function () {
  return {
    LinearGradient: function LinearGradient(_ref) {
      var children = _ref.children;
      return children;
    }
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
_getJestObj().mock('../../../src/contexts/ProgressContext', function () {
  return {
    useProgress: mockUseProgress
  };
});
_getJestObj().mock('../../../src/contexts/CurrentLevelContext', function () {
  return {
    useCurrentLevel: mockUseCurrentLevel
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/hooks/useDashboardLevel', function () {
  return {
    useDashboardLevel: mockUseDashboardLevel
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/hooks/useDashboardState', function () {
  return {
    useDashboardState: mockUseDashboardState
  };
});
_getJestObj().mock('../../../src/hooks/useLastActivity', function () {
  return {
    __esModule: true,
    default: mockUseLastActivity
  };
});
_getJestObj().mock('../../../src/hooks/useRealTimeProgress', function () {
  return {
    __esModule: true,
    default: mockUseRealTimeProgress
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/ModernHeader', function () {
  return function (_ref2) {
    var level = _ref2.level,
      levelColor = _ref2.levelColor;
    return `ModernHeader-${level}-${levelColor}`;
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/HeroContinueSection', function () {
  return function (_ref3) {
    var lastActivity = _ref3.lastActivity,
      isLoading = _ref3.isLoading;
    return `HeroContinueSection-${(lastActivity == null ? void 0 : lastActivity.type) || 'none'}-${isLoading}`;
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/QuickActions', function () {
  return function (_ref4) {
    var currentLevel = _ref4.currentLevel,
      accentColor = _ref4.accentColor;
    return `QuickActions-${currentLevel}-${accentColor}`;
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/SimpleMetrics', function () {
  return function (_ref5) {
    var accentColor = _ref5.accentColor;
    return `SimpleMetrics-${accentColor}`;
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/LearningProgress', function () {
  return function (_ref6) {
    var globalProgress = _ref6.globalProgress,
      currentLevel = _ref6.currentLevel;
    return `LearningProgress-${globalProgress}-${currentLevel}`;
  };
});
_getJestObj().mock('../../../src/screens/VocabularyRevision/RevisionOrchestrator', function () {
  return function (_ref7) {
    var currentLevel = _ref7.currentLevel;
    return `RevisionOrchestrator-${currentLevel}`;
  };
});
_getJestObj().mock('../../../src/components/layout/Container', function () {
  return function (_ref8) {
    var children = _ref8.children;
    return children;
  };
});
_getJestObj().mock('../../../src/utils/constants', function () {
  return {
    LANGUAGE_LEVELS: {
      '1': {
        title: 'D√©butant',
        color: '#10B981',
        icon: 'üå±'
      },
      '2': {
        title: '√âl√©mentaire',
        color: '#3B82F6',
        icon: 'üìö'
      },
      '3': {
        title: 'Interm√©diaire',
        color: '#8B5CF6',
        icon: 'üéØ'
      },
      '4': {
        title: 'Interm√©diaire+',
        color: '#F59E0B',
        icon: 'üöÄ'
      },
      '5': {
        title: 'Avanc√©',
        color: '#EF4444',
        icon: '‚≠ê'
      },
      '6': {
        title: 'Expert',
        color: '#EC4899',
        icon: 'üëë'
      },
      'bonus': {
        title: 'Bonus',
        color: '#6366F1',
        icon: 'üéÅ'
      }
    },
    EXERCISES: {
      vocabulary: {
        id: 'vocabulary',
        route: '/tabs/vocabulary'
      },
      grammar: {
        id: 'grammar',
        route: '/tabs/grammar'
      }
    },
    CONTAINER_SAFE_EDGES: {
      NO_BOTTOM: ['top', 'left', 'right']
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ThemeContext = require("../../../src/contexts/ThemeContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockUseProgress = jest.fn();
var mockUseCurrentLevel = jest.fn();
var mockUseDashboardLevel = jest.fn();
var mockUseDashboardState = jest.fn();
var mockUseLastActivity = jest.fn();
var mockUseRealTimeProgress = jest.fn();
var Dashboard = require('../../../src/screens/Dashboard').default;
describe('Dashboard', function () {
  var mockTheme = {
    colors: {
      background: '#F8FAFC',
      primary: '#3B82F6',
      surface: '#FFFFFF',
      text: '#1F2937',
      textSecondary: '#6B7280'
    }
  };
  var setupDefaultMocks = function setupDefaultMocks() {
    mockUseProgress.mockReturnValue({
      isLoading: false,
      progress: {
        level1: 50
      }
    });
    mockUseCurrentLevel.mockReturnValue({
      setCurrentLevel: jest.fn()
    });
    mockUseDashboardLevel.mockReturnValue({
      currentLevel: '1',
      handleChangeActiveLevel: jest.fn(),
      levelColor: '#10B981'
    });
    mockUseDashboardState.mockReturnValue({
      refreshing: false,
      onRefresh: jest.fn()
    });
    mockUseLastActivity.mockReturnValue({
      lastActivity: null,
      isLoading: false,
      reload: jest.fn()
    });
    mockUseRealTimeProgress.mockReturnValue({
      getLevelProgress: jest.fn(function () {
        return 25;
      }),
      refresh: jest.fn()
    });
  };
  var renderComponent = function renderComponent() {
    var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : mockTheme;
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
      value: theme,
      children: (0, _jsxRuntime.jsx)(Dashboard, {})
    }));
  };
  beforeEach(function () {
    jest.clearAllMocks();
    setupDefaultMocks();
  });
  describe('Rendu de base', function () {
    it('devrait afficher le loading', function () {
      mockUseProgress.mockReturnValue({
        isLoading: true,
        progress: {}
      });
      var _renderComponent = renderComponent(),
        getByText = _renderComponent.getByText;
      expect(getByText('Chargement du tableau de bord...')).toBeTruthy();
    });
    it('devrait rendre le composant sans erreur', function () {
      var _renderComponent2 = renderComponent(),
        container = _renderComponent2.container;
      expect(container.firstChild).toBeTruthy();
    });
    it('devrait fonctionner sans contexte theme', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(Dashboard, {})),
        container = _render.container;
      expect(container.firstChild).toBeTruthy();
    });
  });
  describe('Gestion des niveaux', function () {
    it('devrait utiliser le niveau du hook useDashboardLevel', function () {
      mockUseDashboardLevel.mockReturnValue({
        currentLevel: '3',
        handleChangeActiveLevel: jest.fn(),
        levelColor: '#8B5CF6'
      });
      var _renderComponent3 = renderComponent(),
        container = _renderComponent3.container;
      expect(container.firstChild).toBeTruthy();
    });
    it('devrait calculer la progression des niveaux', function () {
      mockUseRealTimeProgress.mockReturnValue({
        getLevelProgress: jest.fn(function (level) {
          var progress = {
            '1': 30,
            '2': 60,
            '3': 90
          };
          return progress[level] || 0;
        }),
        refresh: jest.fn()
      });
      var _renderComponent4 = renderComponent(),
        container = _renderComponent4.container;
      expect(container.firstChild).toBeTruthy();
    });
  });
  describe('Gestion des activit√©s', function () {
    it('devrait passer lastActivity √† HeroContinueSection', function () {
      mockUseLastActivity.mockReturnValue({
        lastActivity: {
          type: 'vocabulary',
          level: '2'
        },
        isLoading: false,
        reload: jest.fn()
      });
      var _renderComponent5 = renderComponent(),
        container = _renderComponent5.container;
      expect(container.firstChild).toBeTruthy();
    });
    it('devrait passer isLoading √† HeroContinueSection', function () {
      mockUseLastActivity.mockReturnValue({
        lastActivity: null,
        isLoading: true,
        reload: jest.fn()
      });
      var _renderComponent6 = renderComponent(),
        container = _renderComponent6.container;
      expect(container.firstChild).toBeTruthy();
    });
  });
  describe('Gestion des erreurs', function () {
    it('devrait g√©rer l\'absence de progress', function () {
      mockUseProgress.mockReturnValue({
        isLoading: false
      });
      var _renderComponent7 = renderComponent(),
        container = _renderComponent7.container;
      expect(container.firstChild).toBeTruthy();
    });
    it('devrait g√©rer l\'absence de currentLevel', function () {
      mockUseCurrentLevel.mockReturnValue({});
      var _renderComponent8 = renderComponent(),
        container = _renderComponent8.container;
      expect(container.firstChild).toBeTruthy();
    });
  });
  describe('Couleurs et th√®me', function () {
    it('devrait utiliser les couleurs par d√©faut sans th√®me', function () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(Dashboard, {})),
        container = _render2.container;
      expect(container.firstChild).toBeTruthy();
    });
    it('devrait appliquer les couleurs du niveau courant', function () {
      mockUseDashboardLevel.mockReturnValue({
        currentLevel: '2',
        handleChangeActiveLevel: jest.fn(),
        levelColor: '#3B82F6'
      });
      var _renderComponent9 = renderComponent(),
        container = _renderComponent9.container;
      expect(container.firstChild).toBeTruthy();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,