18e18639903d934f61a38324a60de131
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBackgroundGradient = exports.default = void 0;
var _reactNative = require("react-native");
function cov_1tir3x4717() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\LevelSelection\\style.js";
  var hash = "6c0abb37f2de2049c1e26b69ab3d5060a3877474";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\LevelSelection\\style.js",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 37
        },
        end: {
          line: 13,
          column: 1
        }
      },
      "1": {
        start: {
          line: 6,
          column: 2
        },
        end: {
          line: 12,
          column: 4
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 5,
            column: 37
          },
          end: {
            line: 5,
            column: 38
          }
        },
        loc: {
          start: {
            line: 5,
            column: 72
          },
          end: {
            line: 13,
            column: 1
          }
        },
        line: 5
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0
    },
    f: {
      "0": 0
    },
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6c0abb37f2de2049c1e26b69ab3d5060a3877474"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_1tir3x4717 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1tir3x4717();
cov_1tir3x4717().s[0]++;
var getBackgroundGradient = exports.getBackgroundGradient = function getBackgroundGradient(primaryColor, backgroundColor) {
  cov_1tir3x4717().f[0]++;
  cov_1tir3x4717().s[1]++;
  return {
    colors: [`${primaryColor}10`, backgroundColor],
    locations: [0, 0.3]
  };
};
var _default = exports.default = _reactNative.StyleSheet.create({
  headerContainer: {},
  headerGradient: {
    paddingBottom: 20
  },
  headerTitle: {},
  modernScrollContent: {
    paddingTop: 20
  },
  modernIntro: {
    paddingHorizontal: 20,
    paddingVertical: 16,
    marginBottom: 30
  },
  modernIntroText: {
    fontSize: 16,
    fontWeight: "500",
    textAlign: "center"
  },
  modernLevelsContainer: {
    paddingHorizontal: 20
  },
  modernCard: Object.assign({
    backgroundColor: 'white',
    borderRadius: 16,
    marginBottom: 16
  }, _reactNative.Platform.select({
    ios: {
      shadowColor: "#000",
      shadowOffset: {
        width: 0,
        height: 2
      },
      shadowOpacity: 0.1,
      shadowRadius: 4
    },
    android: {
      elevation: 2
    }
  })),
  modernCardContent: {
    padding: 20
  },
  modernCardHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12
  },
  modernTitleContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1
  },
  modernTitle: {
    fontSize: 18,
    fontWeight: '600',
    marginRight: 12
  },
  modernBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12
  },
  modernBadgeText: {
    color: 'white',
    fontSize: 12,
    fontWeight: '600'
  },
  modernIcon: {
    fontSize: 24
  },
  modernProgressContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
    gap: 12
  },
  modernProgressBar: {
    flex: 1,
    height: 6,
    backgroundColor: '#F3F4F6',
    borderRadius: 3,
    overflow: 'hidden'
  },
  modernProgressFill: {
    height: 6,
    borderRadius: 3
  },
  modernProgressText: {
    fontSize: 12,
    fontWeight: '500',
    minWidth: 30
  },
  modernButton: {
    marginTop: 4
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,