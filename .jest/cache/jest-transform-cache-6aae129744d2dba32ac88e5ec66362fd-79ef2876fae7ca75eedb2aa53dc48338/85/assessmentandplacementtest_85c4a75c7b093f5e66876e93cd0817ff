e2dc3bab38411f664aaf300c73629c39
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    },
    useRoute: function useRoute() {
      return {
        params: {}
      };
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _entry = _interopRequireDefault(require("expo-router/entry"));
var _AppProvider = require("../../src/contexts/AppProvider");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Assessment and Placement Integration Test', function () {
  it('should place the user at the correct level based on assessment results', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AppProvider.AppProvider, {
        children: (0, _jsxRuntime.jsx)(_entry.default, {})
      })),
      getByText = _render.getByText,
      findByText = _render.findByText;
    _reactNative.fireEvent.press(getByText(/Commencer le test de niveau/i));
    _reactNative.fireEvent.press(getByText(/Réponse A/i));
    _reactNative.fireEvent.press(getByText(/Réponse B/i));
    _reactNative.fireEvent.press(getByText(/Terminer le test/i));
    var recommendedLevel = yield findByText(/Niveau recommandé : B1/i);
    expect(recommendedLevel).toBeTruthy();
    _reactNative.fireEvent.press(getByText(/Continuer/i));
    var levelB1 = yield findByText(/Niveau B1/i);
    expect(levelB1).toBeTruthy();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsInVzZU5hdmlnYXRpb24iLCJuYXZpZ2F0ZSIsImZuIiwiZ29CYWNrIiwidXNlUm91dGUiLCJwYXJhbXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9lbnRyeSIsIl9BcHBQcm92aWRlciIsIl9qc3hSdW50aW1lIiwiX3JlcXVpcmUiLCJkZXNjcmliZSIsIml0IiwiZGVmYXVsdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJBcHBQcm92aWRlciIsImNoaWxkcmVuIiwiZ2V0QnlUZXh0IiwiZmluZEJ5VGV4dCIsImZpcmVFdmVudCIsInByZXNzIiwicmVjb21tZW5kZWRMZXZlbCIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJsZXZlbEIxIl0sInNvdXJjZXMiOlsiYXNzZXNzbWVudC1hbmQtcGxhY2VtZW50LnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQsIHdhaXRGb3IgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgQXBwIGZyb20gJ2V4cG8tcm91dGVyL2VudHJ5JztcbmltcG9ydCB7IEFwcFByb3ZpZGVyIH0gZnJvbSAnLi4vLi4vc3JjL2NvbnRleHRzL0FwcFByb3ZpZGVyJztcblxuXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+ICh7XG4gIC4uLmplc3QucmVxdWlyZUFjdHVhbCgnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJyksXG4gIHVzZU5hdmlnYXRpb246ICgpID0+ICh7XG4gICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcbiAgICBnb0JhY2s6IGplc3QuZm4oKSxcbiAgfSksXG4gIHVzZVJvdXRlOiAoKSA9PiAoe1xuICAgIHBhcmFtczoge30sXG4gIH0pLFxufSkpO1xuXG5kZXNjcmliZSgnQXNzZXNzbWVudCBhbmQgUGxhY2VtZW50IEludGVncmF0aW9uIFRlc3QnLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgcGxhY2UgdGhlIHVzZXIgYXQgdGhlIGNvcnJlY3QgbGV2ZWwgYmFzZWQgb24gYXNzZXNzbWVudCByZXN1bHRzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0LCBmaW5kQnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICA8QXBwUHJvdmlkZXI+XG4gICAgICAgICAgPEFwcCAvPlxuICAgICAgPC9BcHBQcm92aWRlcj5cbiAgICApO1xuXG4gICAgLy8gMS4gRMOpbWFycmVyIGxlIHRlc3QgZGUgbml2ZWF1XG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgvQ29tbWVuY2VyIGxlIHRlc3QgZGUgbml2ZWF1L2kpKTtcblxuICAgIC8vIDIuIFNpbXVsZXIgbGVzIHLDqXBvbnNlcyBhdSB0ZXN0XG4gICAgLy8gKENldHRlIHBhcnRpZSBkw6lwZW5kIGRlIGxhIHN0cnVjdHVyZSBkZSB2b3RyZSB0ZXN0IGRlIG5pdmVhdSlcbiAgICAvLyBFeGVtcGxlIDogcsOpcG9uZHJlIGNvcnJlY3RlbWVudCDDoCBkZXMgcXVlc3Rpb25zIHBvdXIgdW4gbml2ZWF1IEIxXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgvUsOpcG9uc2UgQS9pKSk7IC8vIFNpbXVsZXogbGVzIHLDqXBvbnNlc1xuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoL1LDqXBvbnNlIEIvaSkpO1xuICAgIC8vIC4uLiBjb250aW51ZXogcG91ciB0b3V0ZXMgbGVzIHF1ZXN0aW9uc1xuXG4gICAgLy8gMy4gVGVybWluZXIgbGUgdGVzdFxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoL1Rlcm1pbmVyIGxlIHRlc3QvaSkpO1xuXG4gICAgLy8gNC4gVsOpcmlmaWVyIHF1ZSBsJ3V0aWxpc2F0ZXVyIGVzdCByZWRpcmlnw6kgdmVycyBsZSBib24gbml2ZWF1XG4gICAgY29uc3QgcmVjb21tZW5kZWRMZXZlbCA9IGF3YWl0IGZpbmRCeVRleHQoL05pdmVhdSByZWNvbW1hbmTDqSA6IEIxL2kpO1xuICAgIGV4cGVjdChyZWNvbW1lbmRlZExldmVsKS50b0JlVHJ1dGh5KCk7XG5cbiAgICAvLyA1LiBOYXZpZ3VlciB2ZXJzIGxhIHPDqWxlY3Rpb24gZGUgbml2ZWF1IHBvdXIgY29uZmlybWVyXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgvQ29udGludWVyL2kpKTtcbiAgICBjb25zdCBsZXZlbEIxID0gYXdhaXQgZmluZEJ5VGV4dCgvTml2ZWF1IEIxL2kpO1xuICAgIGV4cGVjdChsZXZlbEIxKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQU9BQSxXQUFBLEdBQUtDLElBQUksQ0FBQywwQkFBMEIsRUFBRTtFQUFBLE9BQUFDLE1BQUEsQ0FBQUMsTUFBQSxLQUNqQ0MsSUFBSSxDQUFDQyxhQUFhLENBQUMsMEJBQTBCLENBQUM7SUFDakRDLGFBQWEsRUFBRSxTQUFmQSxhQUFhQSxDQUFBO01BQUEsT0FBUztRQUNwQkMsUUFBUSxFQUFFSCxJQUFJLENBQUNJLEVBQUUsQ0FBQyxDQUFDO1FBQ25CQyxNQUFNLEVBQUVMLElBQUksQ0FBQ0ksRUFBRSxDQUFDO01BQ2xCLENBQUM7SUFBQSxDQUFDO0lBQ0ZFLFFBQVEsRUFBRSxTQUFWQSxRQUFRQSxDQUFBO01BQUEsT0FBUztRQUNmQyxNQUFNLEVBQUUsQ0FBQztNQUNYLENBQUM7SUFBQTtFQUFDO0FBQUEsQ0FDRixDQUFDO0FBQUMsSUFBQUMsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLGtCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFmSixJQUFBRSxNQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxZQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxNQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSyxZQUFBLEdBQUFMLE9BQUE7QUFBNkQsSUFBQU0sV0FBQSxHQUFBTixPQUFBO0FBQUEsU0FBQWIsWUFBQTtFQUFBLElBQUFvQixRQUFBLEdBQUFQLE9BQUE7SUFBQVQsSUFBQSxHQUFBZ0IsUUFBQSxDQUFBaEIsSUFBQTtFQUFBSixXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBSSxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFjN0RpQixRQUFRLENBQUMsMkNBQTJDLEVBQUUsWUFBTTtFQUMxREMsRUFBRSxDQUFDLHdFQUF3RSxNQUFBUixrQkFBQSxDQUFBUyxPQUFBLEVBQUUsYUFBWTtJQUN2RixJQUFBQyxPQUFBLEdBQWtDLElBQUFDLG1CQUFNLEVBQ3RDLElBQUFOLFdBQUEsQ0FBQU8sR0FBQSxFQUFDUixZQUFBLENBQUFTLFdBQVc7UUFBQUMsUUFBQSxFQUNSLElBQUFULFdBQUEsQ0FBQU8sR0FBQSxFQUFDVCxNQUFBLENBQUFNLE9BQUcsSUFBRTtNQUFDLENBQ0UsQ0FDZixDQUFDO01BSk9NLFNBQVMsR0FBQUwsT0FBQSxDQUFUSyxTQUFTO01BQUVDLFVBQVUsR0FBQU4sT0FBQSxDQUFWTSxVQUFVO0lBTzdCQyxzQkFBUyxDQUFDQyxLQUFLLENBQUNILFNBQVMsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0lBSzFERSxzQkFBUyxDQUFDQyxLQUFLLENBQUNILFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN4Q0Usc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDSCxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7SUFJeENFLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0gsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFHL0MsSUFBTUksZ0JBQWdCLFNBQVNILFVBQVUsQ0FBQyx5QkFBeUIsQ0FBQztJQUNwRUksTUFBTSxDQUFDRCxnQkFBZ0IsQ0FBQyxDQUFDRSxVQUFVLENBQUMsQ0FBQztJQUdyQ0osc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDSCxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDeEMsSUFBTU8sT0FBTyxTQUFTTixVQUFVLENBQUMsWUFBWSxDQUFDO0lBQzlDSSxNQUFNLENBQUNFLE9BQU8sQ0FBQyxDQUFDRCxVQUFVLENBQUMsQ0FBQztFQUM5QixDQUFDLEVBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=