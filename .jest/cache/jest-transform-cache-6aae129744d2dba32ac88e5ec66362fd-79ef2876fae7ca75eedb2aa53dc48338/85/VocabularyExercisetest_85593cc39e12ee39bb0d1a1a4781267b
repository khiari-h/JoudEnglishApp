6db7f8f5e69fd40cb42c00a63c00b299
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn()
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    },
    useFocusEffect: jest.fn(function () {})
  };
});
_getJestObj().mock('../../../../src/screens/exercises/vocabulary/hooks/useVocabulary', function () {
  return {
    __esModule: true,
    default: jest.fn()
  };
});
_getJestObj().mock('../../../../src/hooks/useLastActivity', function () {
  return {
    __esModule: true,
    default: jest.fn(function () {
      return {
        saveActivity: jest.fn()
      };
    })
  };
});
_getJestObj().mock('../../../../src/utils/vocabulary/vocabularyDataHelper', function () {
  return {
    isBonusLevel: jest.fn(function () {
      return false;
    }),
    getLevelColor: jest.fn(function () {
      return '#007AFF';
    }),
    loadVocabularyData: jest.fn((0, _asyncToGenerator2.default)(function* () {
      return {
        exercises: [{
          title: 'Greetings',
          words: [{
            word: 'hello',
            translation: 'bonjour'
          }, {
            word: 'world',
            translation: 'monde'
          }]
        }]
      };
    }))
  };
});
_getJestObj().mock('../../../../src/screens/exercises/vocabulary/style', function () {
  return {
    __esModule: true,
    default: jest.fn(function () {
      return {
        loadingContainer: {
          flex: 1,
          justifyContent: 'center',
          alignItems: 'center'
        },
        scrollContent: {
          flexGrow: 1
        }
      };
    })
  };
});
_getJestObj().mock('../../../../src/components/layout/Container', function () {
  var _require = require('react-native'),
    View = _require.View;
  var CONTAINER_SAFE_EDGES = {
    ALL: ['top', 'bottom', 'left', 'right'],
    NO_BOTTOM: ['top', 'left', 'right'],
    NO_TOP: ['bottom', 'left', 'right'],
    HORIZONTAL: ['left', 'right'],
    NONE: []
  };
  var Container = function Container(_ref2) {
    var children = _ref2.children,
      safeAreaEdges = _ref2.safeAreaEdges,
      props = (0, _objectWithoutProperties2.default)(_ref2, _excluded);
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "Container"
    }, props, {
      children: children
    }));
  };
  Container.CONTAINER_SAFE_EDGES = CONTAINER_SAFE_EDGES;
  return {
    __esModule: true,
    default: Container,
    CONTAINER_SAFE_EDGES: CONTAINER_SAFE_EDGES
  };
});
_getJestObj().mock('../../../../src/screens/exercises/vocabulary/VocabularyHeader', function () {
  var _require2 = require('react-native'),
    View = _require2.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "VocabularyHeader"
    }, props));
  };
});
_getJestObj().mock('../../../../src/screens/exercises/vocabulary/VocabularyCategorySelector', function () {
  var _require3 = require('react-native'),
    View = _require3.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "VocabularyCategorySelector"
    }, props));
  };
});
_getJestObj().mock('../../../../src/screens/exercises/vocabulary/VocabularyProgress', function () {
  var _require4 = require('react-native'),
    View = _require4.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "VocabularyProgress"
    }, props));
  };
});
_getJestObj().mock('../../../../src/screens/exercises/vocabulary/VocabularyWordSection', function () {
  var _require5 = require('react-native'),
    View = _require5.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "VocabularyWordSection"
    }, props));
  };
});
_getJestObj().mock('../../../../src/screens/exercises/vocabulary/VocabularyNavigation', function () {
  var _require6 = require('react-native'),
    View = _require6.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "VocabularyNavigation"
    }, props));
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _vocabulary = _interopRequireDefault(require("../../../../src/screens/exercises/vocabulary"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "safeAreaEdges"];
function _getJestObj() {
  var _require7 = require("@jest/globals"),
    jest = _require7.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockUseVocabulary = require('../../../../src/screens/exercises/vocabulary/hooks/useVocabulary').default;
var mockUseLastActivity = require('../../../../src/hooks/useLastActivity').default;
describe('VocabularyExercise', function () {
  var mockRouteParams = {
    level: 'A1',
    mode: 'classic'
  };
  var mockNavigationGoBack = jest.fn();
  var mockRouterPush = jest.fn();
  var mockSaveActivity = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
    require('@react-navigation/native').useNavigation.mockReturnValue({
      goBack: mockNavigationGoBack
    });
    require('expo-router').router.push.mockImplementation(mockRouterPush);
    mockUseLastActivity.mockReturnValue({
      saveActivity: mockSaveActivity
    });
    mockUseVocabulary.mockReturnValue({
      categoryIndex: 0,
      wordIndex: 0,
      showTranslation: false,
      completedWords: [],
      loaded: true,
      showDetailedProgress: false,
      currentWord: {
        word: 'hello',
        translation: 'bonjour'
      },
      currentCategory: {
        name: 'Greetings'
      },
      changeCategory: jest.fn(),
      toggleTranslation: jest.fn(),
      toggleDetailedProgress: jest.fn(),
      handleNext: jest.fn(function () {
        return {
          completed: false
        };
      }),
      handlePrevious: jest.fn(),
      canGoToPrevious: false,
      isLastWordInExercise: false,
      display: {
        categories: [{
          name: 'Greetings'
        }],
        wordCounter: '1/10'
      },
      saveData: jest.fn()
    });
  });
  it('should render loading state when not loaded', function () {
    mockUseVocabulary.mockReturnValueOnce({
      loaded: false
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
      route: {
        params: mockRouteParams
      }
    }));
    expect(_reactNative.screen.getByTestId('Container')).toBeTruthy();
    expect(_reactNative.screen.getByTestId('activity-indicator')).toBeTruthy();
  });
  it('should render main components when loaded', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
      route: {
        params: mockRouteParams
      }
    }));
    expect(_reactNative.screen.getByTestId('VocabularyHeader')).toBeTruthy();
    expect(_reactNative.screen.getByTestId('VocabularyProgress')).toBeTruthy();
    expect(_reactNative.screen.getByTestId('VocabularyCategorySelector')).toBeTruthy();
    expect(_reactNative.screen.getByTestId('VocabularyWordSection')).toBeTruthy();
    expect(_reactNative.screen.getByTestId('VocabularyNavigation')).toBeTruthy();
  });
  it('should call useVocabulary with correct parameters', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
      route: {
        params: mockRouteParams
      }
    }));
    expect(mockUseVocabulary).toHaveBeenCalledWith(expect.any(Object), mockRouteParams.level, mockRouteParams.mode);
  });
  it('should save activity on wordIndex change', (0, _asyncToGenerator2.default)(function* () {
    var mockHandleNext = jest.fn(function () {
      return {
        completed: false
      };
    });
    mockUseVocabulary.mockReturnValue({
      categoryIndex: 0,
      wordIndex: 0,
      showTranslation: false,
      completedWords: [],
      loaded: true,
      showDetailedProgress: false,
      currentWord: {
        word: 'hello',
        translation: 'bonjour'
      },
      currentCategory: {
        name: 'Greetings'
      },
      changeCategory: jest.fn(),
      toggleTranslation: jest.fn(),
      toggleDetailedProgress: jest.fn(),
      handleNext: mockHandleNext,
      handlePrevious: jest.fn(),
      canGoToPrevious: false,
      isLastWordInExercise: false,
      display: {
        categories: [{
          name: 'Greetings',
          words: [{
            word: 'hello'
          }, {
            word: 'world'
          }]
        }],
        wordCounter: '1/2'
      },
      saveData: jest.fn()
    });
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: mockRouteParams
        }
      })),
      rerender = _render.rerender;
    yield (0, _reactNative.waitFor)(function () {
      expect(mockSaveActivity).toHaveBeenCalledWith(expect.objectContaining({
        level: 'A1',
        type: 'vocabulary',
        mode: 'classic',
        metadata: expect.objectContaining({
          word: 0,
          category: 'Greetings',
          categoryIndex: 0,
          wordIndex: 0
        })
      }));
    });
    mockUseVocabulary.mockReturnValue({
      categoryIndex: 0,
      wordIndex: 1,
      showTranslation: false,
      completedWords: [],
      loaded: true,
      showDetailedProgress: false,
      currentWord: {
        word: 'world',
        translation: 'monde'
      },
      currentCategory: {
        name: 'Greetings'
      },
      changeCategory: jest.fn(),
      toggleTranslation: jest.fn(),
      toggleDetailedProgress: jest.fn(),
      handleNext: mockHandleNext,
      handlePrevious: jest.fn(),
      canGoToPrevious: false,
      isLastWordInExercise: false,
      display: {
        categories: [{
          name: 'Greetings',
          words: [{
            word: 'hello'
          }, {
            word: 'world'
          }]
        }],
        wordCounter: '2/2'
      },
      saveData: jest.fn()
    });
    rerender((0, _jsxRuntime.jsx)(_vocabulary.default, {
      route: {
        params: mockRouteParams
      }
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockSaveActivity).toHaveBeenCalledWith(expect.objectContaining({
        metadata: expect.objectContaining({
          word: 1,
          wordIndex: 1
        })
      }));
    });
  }));
  it('should navigate back to exercise selection on back press', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
      route: {
        params: mockRouteParams
      }
    }));
    var header = _reactNative.screen.getByTestId('VocabularyHeader');
    (0, _reactNative.fireEvent)(header, 'onBackPress');
    expect(mockRouterPush).toHaveBeenCalledWith({
      pathname: '/tabs/exerciseSelection',
      params: {
        level: 'A1'
      }
    });
  });
  it('should call changeCategory when category is selected', function () {
    var mockChangeCategory = jest.fn();
    mockUseVocabulary.mockReturnValueOnce(Object.assign({}, mockUseVocabulary(), {
      changeCategory: mockChangeCategory,
      display: {
        categories: [{
          name: 'Cat1'
        }, {
          name: 'Cat2'
        }]
      }
    }));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
      route: {
        params: mockRouteParams
      }
    }));
    var categorySelector = _reactNative.screen.getByTestId('VocabularyCategorySelector');
    (0, _reactNative.fireEvent)(categorySelector, 'onSelectCategory', 1);
    expect(mockChangeCategory).toHaveBeenCalledWith(1);
  });
  it('should call toggleDetailedProgress when progress is toggled', function () {
    var mockToggleDetailedProgress = jest.fn();
    mockUseVocabulary.mockReturnValueOnce(Object.assign({}, mockUseVocabulary(), {
      toggleDetailedProgress: mockToggleDetailedProgress
    }));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
      route: {
        params: mockRouteParams
      }
    }));
    var progress = _reactNative.screen.getByTestId('VocabularyProgress');
    (0, _reactNative.fireEvent)(progress, 'onToggleExpand');
    expect(mockToggleDetailedProgress).toHaveBeenCalled();
  });
  it('should call toggleTranslation when translation is toggled', function () {
    var mockToggleTranslation = jest.fn();
    mockUseVocabulary.mockReturnValueOnce(Object.assign({}, mockUseVocabulary(), {
      toggleTranslation: mockToggleTranslation
    }));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
      route: {
        params: mockRouteParams
      }
    }));
    var wordSection = _reactNative.screen.getByTestId('VocabularyWordSection');
    (0, _reactNative.fireEvent)(wordSection, 'onToggleTranslation');
    expect(mockToggleTranslation).toHaveBeenCalled();
  });
  it('should call handleNextWord and saveData on next button press', (0, _asyncToGenerator2.default)(function* () {
    var mockHandleNext = jest.fn(function () {
      return {
        completed: false
      };
    });
    var mockSaveData = jest.fn();
    mockUseVocabulary.mockReturnValueOnce(Object.assign({}, mockUseVocabulary(), {
      handleNext: mockHandleNext,
      saveData: mockSaveData
    }));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
      route: {
        params: mockRouteParams
      }
    }));
    var navigation = _reactNative.screen.getByTestId('VocabularyNavigation');
    (0, _reactNative.fireEvent)(navigation, 'onNext');
    expect(mockHandleNext).toHaveBeenCalled();
    yield (0, _reactNative.waitFor)(function () {
      return expect(mockSaveData).toHaveBeenCalled();
    });
  }));
  it('should navigate back when handleNext indicates completion', (0, _asyncToGenerator2.default)(function* () {
    var mockHandleNext = jest.fn(function () {
      return {
        completed: true
      };
    });
    var mockSaveData = jest.fn();
    mockUseVocabulary.mockReturnValueOnce(Object.assign({}, mockUseVocabulary(), {
      handleNext: mockHandleNext,
      saveData: mockSaveData
    }));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
      route: {
        params: mockRouteParams
      }
    }));
    var navigation = _reactNative.screen.getByTestId('VocabularyNavigation');
    (0, _reactNative.fireEvent)(navigation, 'onNext');
    expect(mockHandleNext).toHaveBeenCalled();
    yield (0, _reactNative.waitFor)(function () {
      return expect(mockSaveData).toHaveBeenCalled();
    });
    yield (0, _reactNative.waitFor)(function () {
      return expect(mockNavigationGoBack).toHaveBeenCalled();
    });
  }));
  it('should call handlePreviousWord on previous button press', function () {
    var mockHandlePrevious = jest.fn();
    mockUseVocabulary.mockReturnValueOnce(Object.assign({}, mockUseVocabulary(), {
      handlePrevious: mockHandlePrevious
    }));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
      route: {
        params: mockRouteParams
      }
    }));
    var navigation = _reactNative.screen.getByTestId('VocabularyNavigation');
    (0, _reactNative.fireEvent)(navigation, 'onPrevious');
    expect(mockHandlePrevious).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,