d4ba36507f44ebb0619bd1b93c82c4d9
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _Card = _interopRequireDefault(require("../../../../components/ui/Card"));
var _ThemeContext = require("../../../../contexts/ThemeContext");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var HeroCardContent = function HeroCardContent(_ref) {
  var _lastActivity$metadat, _lastActivity$metadat2, _lastActivity$metadat3;
  var lastActivity = _ref.lastActivity,
    accentColor = _ref.accentColor,
    colors = _ref.colors,
    handleContinue = _ref.handleContinue,
    localStyles = _ref.localStyles;
  var currentWord = (((_lastActivity$metadat = lastActivity.metadata) == null ? void 0 : _lastActivity$metadat.word) || 0) + 1;
  var totalWords = ((_lastActivity$metadat2 = lastActivity.metadata) == null ? void 0 : _lastActivity$metadat2.totalWords) || 15;
  var percentage = Math.min(Math.round(currentWord / totalWords * 100), 100);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: localStyles.content,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: localStyles.header,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: localStyles.emoji,
        children: "\uD83D\uDCDA"
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [localStyles.label, {
          color: colors.textSecondary
        }],
        children: "Reprendre"
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [localStyles.title, {
        color: colors.text
      }],
      children: lastActivity.title
    }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
      style: [localStyles.subtitle, {
        color: colors.textSecondary
      }],
      children: ["Niv ", lastActivity.level || 1, typeof ((_lastActivity$metadat3 = lastActivity.metadata) == null ? void 0 : _lastActivity$metadat3.categoryIndex) === 'number' ? ` • Catégorie ${lastActivity.metadata.categoryIndex + 1}` : '', "\u2022 Mot ", currentWord, "/", totalWords]
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: localStyles.progressContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [localStyles.progressTrack, {
          backgroundColor: `${accentColor}15`
        }],
        children: (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [localStyles.progressFill, {
            width: `${percentage}%`,
            backgroundColor: accentColor
          }]
        })
      }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: [localStyles.progressText, {
          color: accentColor
        }],
        children: [percentage, "%"]
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      testID: "continue-activity-button",
      style: [localStyles.button, {
        backgroundColor: accentColor
      }],
      onPress: handleContinue,
      activeOpacity: 0.8,
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: localStyles.buttonText,
        children: "Continuer \u25B6\uFE0F"
      })
    })]
  });
};
var HeroEmptyCardContent = function HeroEmptyCardContent(_ref2) {
  var accentColor = _ref2.accentColor,
    colors = _ref2.colors,
    handleLevelSelection = _ref2.handleLevelSelection,
    localStyles = _ref2.localStyles;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: localStyles.content,
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: localStyles.emoji,
      children: "\uD83D\uDE80"
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [localStyles.title, {
        color: colors.text
      }],
      children: "Commencer l'apprentissage"
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [localStyles.subtitle, {
        color: colors.textSecondary
      }],
      children: "Choisissez votre premier exercice"
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      testID: "level-selection-button",
      accessibilityLabel: "Commencer",
      accessibilityRole: "button",
      style: [localStyles.button, {
        backgroundColor: accentColor
      }],
      onPress: handleLevelSelection,
      activeOpacity: 0.8,
      children: (0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: localStyles.buttonText,
        children: ["Commencer ", '>']
      })
    })]
  });
};
var HeroContinueSection = function HeroContinueSection(_ref3) {
  var lastActivity = _ref3.lastActivity,
    onPress = _ref3.onPress,
    _ref3$accentColor = _ref3.accentColor,
    accentColor = _ref3$accentColor === void 0 ? "#3B82F6" : _ref3$accentColor,
    _ref3$isLoading = _ref3.isLoading,
    isLoading = _ref3$isLoading === void 0 ? false : _ref3$isLoading;
  var themeContext = (0, _react.useContext)(_ThemeContext.ThemeContext);
  var colors = (themeContext == null ? void 0 : themeContext.colors) || {
    surface: "#FFFFFF",
    text: "#1F2937",
    textSecondary: "#6B7280"
  };
  var handleLevelSelection = (0, _react.useCallback)(function () {
    return onPress == null ? void 0 : onPress('levelSelection');
  }, [onPress]);
  var handleContinue = (0, _react.useCallback)(function () {
    return onPress == null ? void 0 : onPress(lastActivity);
  }, [onPress, lastActivity]);
  if (isLoading) {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.container,
      children: (0, _jsxRuntime.jsx)(_Card.default, {
        style: [_style.default.card, {
          backgroundColor: colors.surface
        }],
        children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: _style.default.loadingContainer,
          children: [(0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
            size: "small",
            color: accentColor
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [_style.default.loadingText, {
              color: colors.textSecondary
            }],
            children: "Chargement..."
          })]
        })
      })
    });
  }
  if (!lastActivity) {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      testID: "hero-empty-section",
      style: _style.default.container,
      children: (0, _jsxRuntime.jsx)(_Card.default, {
        style: [_style.default.card, {
          backgroundColor: colors.surface
        }],
        children: (0, _jsxRuntime.jsx)(HeroEmptyCardContent, {
          accentColor: accentColor,
          colors: colors,
          handleLevelSelection: handleLevelSelection,
          localStyles: _style.default
        })
      })
    });
  }
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    testID: "hero-continue-section",
    style: _style.default.container,
    children: (0, _jsxRuntime.jsx)(_Card.default, {
      style: [_style.default.card, {
        backgroundColor: colors.surface
      }],
      children: (0, _jsxRuntime.jsx)(HeroCardContent, {
        lastActivity: lastActivity,
        accentColor: accentColor,
        colors: colors,
        handleContinue: handleContinue,
        localStyles: _style.default
      })
    })
  });
};
var _default = exports.default = HeroContinueSection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlIiwiX0NhcmQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX1RoZW1lQ29udGV4dCIsIl9zdHlsZSIsIl9qc3hSdW50aW1lIiwiSGVyb0NhcmRDb250ZW50IiwiX3JlZiIsIl9sYXN0QWN0aXZpdHkkbWV0YWRhdCIsIl9sYXN0QWN0aXZpdHkkbWV0YWRhdDIiLCJfbGFzdEFjdGl2aXR5JG1ldGFkYXQzIiwibGFzdEFjdGl2aXR5IiwiYWNjZW50Q29sb3IiLCJjb2xvcnMiLCJoYW5kbGVDb250aW51ZSIsImxvY2FsU3R5bGVzIiwiY3VycmVudFdvcmQiLCJtZXRhZGF0YSIsIndvcmQiLCJ0b3RhbFdvcmRzIiwicGVyY2VudGFnZSIsIk1hdGgiLCJtaW4iLCJyb3VuZCIsImpzeHMiLCJWaWV3Iiwic3R5bGUiLCJjb250ZW50IiwiY2hpbGRyZW4iLCJoZWFkZXIiLCJqc3giLCJUZXh0IiwiZW1vamkiLCJsYWJlbCIsImNvbG9yIiwidGV4dFNlY29uZGFyeSIsInRpdGxlIiwidGV4dCIsInN1YnRpdGxlIiwibGV2ZWwiLCJjYXRlZ29yeUluZGV4IiwicHJvZ3Jlc3NDb250YWluZXIiLCJwcm9ncmVzc1RyYWNrIiwiYmFja2dyb3VuZENvbG9yIiwicHJvZ3Jlc3NGaWxsIiwid2lkdGgiLCJwcm9ncmVzc1RleHQiLCJUb3VjaGFibGVPcGFjaXR5IiwidGVzdElEIiwiYnV0dG9uIiwib25QcmVzcyIsImFjdGl2ZU9wYWNpdHkiLCJidXR0b25UZXh0IiwiSGVyb0VtcHR5Q2FyZENvbnRlbnQiLCJfcmVmMiIsImhhbmRsZUxldmVsU2VsZWN0aW9uIiwiYWNjZXNzaWJpbGl0eUxhYmVsIiwiYWNjZXNzaWJpbGl0eVJvbGUiLCJIZXJvQ29udGludWVTZWN0aW9uIiwiX3JlZjMiLCJfcmVmMyRhY2NlbnRDb2xvciIsIl9yZWYzJGlzTG9hZGluZyIsImlzTG9hZGluZyIsInRoZW1lQ29udGV4dCIsInVzZUNvbnRleHQiLCJUaGVtZUNvbnRleHQiLCJzdXJmYWNlIiwidXNlQ2FsbGJhY2siLCJzdHlsZXMiLCJjb250YWluZXIiLCJkZWZhdWx0IiwiY2FyZCIsImxvYWRpbmdDb250YWluZXIiLCJBY3Rpdml0eUluZGljYXRvciIsInNpemUiLCJsb2FkaW5nVGV4dCIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9zY3JlZW5zL0Rhc2hib2FyZC9jb21wb25lbnRzL0hlcm9Db250aW51ZVNlY3Rpb24vaW5kZXguanNcclxuaW1wb3J0IHsgdXNlQ29udGV4dCwgdXNlQ2FsbGJhY2sgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgVmlldywgVGV4dCwgVG91Y2hhYmxlT3BhY2l0eSwgQWN0aXZpdHlJbmRpY2F0b3IgfSBmcm9tIFwicmVhY3QtbmF0aXZlXCI7XHJcbmltcG9ydCBDYXJkIGZyb20gXCIuLi8uLi8uLi8uLi9jb21wb25lbnRzL3VpL0NhcmRcIjtcclxuaW1wb3J0IHsgVGhlbWVDb250ZXh0IH0gZnJvbSBcIi4uLy4uLy4uLy4uL2NvbnRleHRzL1RoZW1lQ29udGV4dFwiO1xyXG5pbXBvcnQgc3R5bGVzIGZyb20gXCIuL3N0eWxlXCI7XHJcblxyXG5jb25zdCBIZXJvQ2FyZENvbnRlbnQgPSAoeyBsYXN0QWN0aXZpdHksIGFjY2VudENvbG9yLCBjb2xvcnMsIGhhbmRsZUNvbnRpbnVlLCBsb2NhbFN0eWxlcyB9KSA9PiB7XHJcbiAgY29uc3QgY3VycmVudFdvcmQgPSAobGFzdEFjdGl2aXR5Lm1ldGFkYXRhPy53b3JkIHx8IDApICsgMTtcclxuICBjb25zdCB0b3RhbFdvcmRzID0gbGFzdEFjdGl2aXR5Lm1ldGFkYXRhPy50b3RhbFdvcmRzIHx8IDE1O1xyXG4gIGNvbnN0IHBlcmNlbnRhZ2UgPSBNYXRoLm1pbihNYXRoLnJvdW5kKChjdXJyZW50V29yZCAvIHRvdGFsV29yZHMpICogMTAwKSwgMTAwKTtcclxuICByZXR1cm4gKFxyXG4gICAgPFZpZXcgc3R5bGU9e2xvY2FsU3R5bGVzLmNvbnRlbnR9PlxyXG4gICAgICA8VmlldyBzdHlsZT17bG9jYWxTdHlsZXMuaGVhZGVyfT5cclxuICAgICAgICA8VGV4dCBzdHlsZT17bG9jYWxTdHlsZXMuZW1vaml9PvCfk5o8L1RleHQ+XHJcbiAgICAgICAgPFRleHQgc3R5bGU9e1tsb2NhbFN0eWxlcy5sYWJlbCwgeyBjb2xvcjogY29sb3JzLnRleHRTZWNvbmRhcnkgfV19PlJlcHJlbmRyZTwvVGV4dD5cclxuICAgICAgPC9WaWV3PlxyXG4gICAgICA8VGV4dCBzdHlsZT17W2xvY2FsU3R5bGVzLnRpdGxlLCB7IGNvbG9yOiBjb2xvcnMudGV4dCB9XX0+e2xhc3RBY3Rpdml0eS50aXRsZX08L1RleHQ+XHJcbiAgICAgIDxUZXh0IHN0eWxlPXtbbG9jYWxTdHlsZXMuc3VidGl0bGUsIHsgY29sb3I6IGNvbG9ycy50ZXh0U2Vjb25kYXJ5IH1dfT4gXHJcbiAgICAgICAgTml2IHtsYXN0QWN0aXZpdHkubGV2ZWwgfHwgMX1cclxuICAgICAgICB7dHlwZW9mIGxhc3RBY3Rpdml0eS5tZXRhZGF0YT8uY2F0ZWdvcnlJbmRleCA9PT0gJ251bWJlcicgPyBgIOKAoiBDYXTDqWdvcmllICR7bGFzdEFjdGl2aXR5Lm1ldGFkYXRhLmNhdGVnb3J5SW5kZXggKyAxfWAgOiAnJ31cclxuICAgICAgICDigKIgTW90IHtjdXJyZW50V29yZH0ve3RvdGFsV29yZHN9XHJcbiAgICAgIDwvVGV4dD5cclxuICAgICAgPFZpZXcgc3R5bGU9e2xvY2FsU3R5bGVzLnByb2dyZXNzQ29udGFpbmVyfT5cclxuICAgICAgICA8VmlldyBzdHlsZT17W2xvY2FsU3R5bGVzLnByb2dyZXNzVHJhY2ssIHsgYmFja2dyb3VuZENvbG9yOiBgJHthY2NlbnRDb2xvcn0xNWAgfV19PiBcclxuICAgICAgICAgIDxWaWV3IFxyXG4gICAgICAgICAgICBzdHlsZT17W1xyXG4gICAgICAgICAgICAgIGxvY2FsU3R5bGVzLnByb2dyZXNzRmlsbCxcclxuICAgICAgICAgICAgICB7IFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IGAke3BlcmNlbnRhZ2V9JWAsXHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGFjY2VudENvbG9yXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdfSBcclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9WaWV3PlxyXG4gICAgICAgIDxUZXh0IHN0eWxlPXtbbG9jYWxTdHlsZXMucHJvZ3Jlc3NUZXh0LCB7IGNvbG9yOiBhY2NlbnRDb2xvciB9XX0+e3BlcmNlbnRhZ2V9JTwvVGV4dD5cclxuICAgICAgPC9WaWV3PlxyXG4gICAgICA8VG91Y2hhYmxlT3BhY2l0eVxyXG4gICAgICAgIHRlc3RJRD1cImNvbnRpbnVlLWFjdGl2aXR5LWJ1dHRvblwiXHJcbiAgICAgICAgc3R5bGU9e1tsb2NhbFN0eWxlcy5idXR0b24sIHsgYmFja2dyb3VuZENvbG9yOiBhY2NlbnRDb2xvciB9XX1cclxuICAgICAgICBvblByZXNzPXtoYW5kbGVDb250aW51ZX1cclxuICAgICAgICBhY3RpdmVPcGFjaXR5PXswLjh9XHJcbiAgICAgID5cclxuICAgICAgICA8VGV4dCBzdHlsZT17bG9jYWxTdHlsZXMuYnV0dG9uVGV4dH0+Q29udGludWVyIOKWtu+4jzwvVGV4dD5cclxuICAgICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxyXG4gICAgPC9WaWV3PlxyXG4gICk7XHJcbn07XHJcblxyXG5jb25zdCBIZXJvRW1wdHlDYXJkQ29udGVudCA9ICh7IGFjY2VudENvbG9yLCBjb2xvcnMsIGhhbmRsZUxldmVsU2VsZWN0aW9uLCBsb2NhbFN0eWxlcyB9KSA9PiAoXHJcbiAgPFZpZXcgc3R5bGU9e2xvY2FsU3R5bGVzLmNvbnRlbnR9PlxyXG4gICAgPFRleHQgc3R5bGU9e2xvY2FsU3R5bGVzLmVtb2ppfT7wn5qAPC9UZXh0PlxyXG4gICAgPFRleHQgc3R5bGU9e1tsb2NhbFN0eWxlcy50aXRsZSwgeyBjb2xvcjogY29sb3JzLnRleHQgfV19PkNvbW1lbmNlciBsJmFwb3M7YXBwcmVudGlzc2FnZTwvVGV4dD5cclxuICAgIDxUZXh0IHN0eWxlPXtbbG9jYWxTdHlsZXMuc3VidGl0bGUsIHsgY29sb3I6IGNvbG9ycy50ZXh0U2Vjb25kYXJ5IH1dfT5DaG9pc2lzc2V6IHZvdHJlIHByZW1pZXIgZXhlcmNpY2U8L1RleHQ+XHJcbiAgICAgIDxUb3VjaGFibGVPcGFjaXR5XHJcbiAgICAgICAgdGVzdElEPVwibGV2ZWwtc2VsZWN0aW9uLWJ1dHRvblwiXHJcbiAgICAgICAgYWNjZXNzaWJpbGl0eUxhYmVsPVwiQ29tbWVuY2VyXCJcclxuICAgICAgICBhY2Nlc3NpYmlsaXR5Um9sZT1cImJ1dHRvblwiXHJcbiAgICAgICAgc3R5bGU9e1tsb2NhbFN0eWxlcy5idXR0b24sIHsgYmFja2dyb3VuZENvbG9yOiBhY2NlbnRDb2xvciB9XX1cclxuICAgICAgICBvblByZXNzPXtoYW5kbGVMZXZlbFNlbGVjdGlvbn1cclxuICAgICAgICBhY3RpdmVPcGFjaXR5PXswLjh9XHJcbiAgICAgID5cclxuICAgICAgPFRleHQgc3R5bGU9e2xvY2FsU3R5bGVzLmJ1dHRvblRleHR9PkNvbW1lbmNlciB7Jz4nfTwvVGV4dD5cclxuICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cclxuICA8L1ZpZXc+XHJcbik7XHJcblxyXG5jb25zdCBIZXJvQ29udGludWVTZWN0aW9uID0gKHtcclxuICBsYXN0QWN0aXZpdHksXHJcbiAgb25QcmVzcyxcclxuICBhY2NlbnRDb2xvciA9IFwiIzNCODJGNlwiLFxyXG4gIGlzTG9hZGluZyA9IGZhbHNlLFxyXG59KSA9PiB7XHJcbiAgY29uc3QgdGhlbWVDb250ZXh0ID0gdXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xyXG4gIGNvbnN0IGNvbG9ycyA9IHRoZW1lQ29udGV4dD8uY29sb3JzIHx8IHtcclxuICAgIHN1cmZhY2U6IFwiI0ZGRkZGRlwiLFxyXG4gICAgdGV4dDogXCIjMUYyOTM3XCIsXHJcbiAgICB0ZXh0U2Vjb25kYXJ5OiBcIiM2QjcyODBcIixcclxuICB9O1xyXG5cclxuICBjb25zdCBoYW5kbGVMZXZlbFNlbGVjdGlvbiA9IHVzZUNhbGxiYWNrKCgpID0+IG9uUHJlc3M/LignbGV2ZWxTZWxlY3Rpb24nKSwgW29uUHJlc3NdKTtcclxuICBjb25zdCBoYW5kbGVDb250aW51ZSA9IHVzZUNhbGxiYWNrKCgpID0+IG9uUHJlc3M/LihsYXN0QWN0aXZpdHkpLCBbb25QcmVzcywgbGFzdEFjdGl2aXR5XSk7XHJcblxyXG4gIGlmIChpc0xvYWRpbmcpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfT5cclxuICAgICAgICA8Q2FyZCBzdHlsZT17W3N0eWxlcy5jYXJkLCB7IGJhY2tncm91bmRDb2xvcjogY29sb3JzLnN1cmZhY2UgfV19PlxyXG4gICAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5sb2FkaW5nQ29udGFpbmVyfT5cclxuICAgICAgICAgICAgPEFjdGl2aXR5SW5kaWNhdG9yIHNpemU9XCJzbWFsbFwiIGNvbG9yPXthY2NlbnRDb2xvcn0gLz5cclxuICAgICAgICAgICAgPFRleHQgc3R5bGU9e1tzdHlsZXMubG9hZGluZ1RleHQsIHsgY29sb3I6IGNvbG9ycy50ZXh0U2Vjb25kYXJ5IH1dfT5cclxuICAgICAgICAgICAgICBDaGFyZ2VtZW50Li4uXHJcbiAgICAgICAgICAgIDwvVGV4dD5cclxuICAgICAgICAgIDwvVmlldz5cclxuICAgICAgICA8L0NhcmQ+XHJcbiAgICAgIDwvVmlldz5cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvLyDDiXRhdCB2aWRlIC0gcHJlbWnDqHJlIHV0aWxpc2F0aW9uXHJcbiAgaWYgKCFsYXN0QWN0aXZpdHkpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxWaWV3IHRlc3RJRD1cImhlcm8tZW1wdHktc2VjdGlvblwiIHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfT5cclxuICAgICAgICA8Q2FyZCBzdHlsZT17W3N0eWxlcy5jYXJkLCB7IGJhY2tncm91bmRDb2xvcjogY29sb3JzLnN1cmZhY2UgfV19PlxyXG4gICAgICAgICAgPEhlcm9FbXB0eUNhcmRDb250ZW50XHJcbiAgICAgICAgICAgIGFjY2VudENvbG9yPXthY2NlbnRDb2xvcn1cclxuICAgICAgICAgICAgY29sb3JzPXtjb2xvcnN9XHJcbiAgICAgICAgICAgIGhhbmRsZUxldmVsU2VsZWN0aW9uPXtoYW5kbGVMZXZlbFNlbGVjdGlvbn1cclxuICAgICAgICAgICAgbG9jYWxTdHlsZXM9e3N0eWxlc31cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9DYXJkPlxyXG4gICAgICA8L1ZpZXc+XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxWaWV3IHRlc3RJRD1cImhlcm8tY29udGludWUtc2VjdGlvblwiIHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfT5cclxuICAgICAgPENhcmQgc3R5bGU9e1tzdHlsZXMuY2FyZCwgeyBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9ycy5zdXJmYWNlIH1dfT5cclxuICAgICAgICA8SGVyb0NhcmRDb250ZW50XHJcbiAgICAgICAgICBsYXN0QWN0aXZpdHk9e2xhc3RBY3Rpdml0eX1cclxuICAgICAgICAgIGFjY2VudENvbG9yPXthY2NlbnRDb2xvcn1cclxuICAgICAgICAgIGNvbG9ycz17Y29sb3JzfVxyXG4gICAgICAgICAgaGFuZGxlQ29udGludWU9e2hhbmRsZUNvbnRpbnVlfVxyXG4gICAgICAgICAgbG9jYWxTdHlsZXM9e3N0eWxlc31cclxuICAgICAgICAvPlxyXG4gICAgICA8L0NhcmQ+XHJcbiAgICA8L1ZpZXc+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEhlcm9Db250aW51ZVNlY3Rpb247Il0sIm1hcHBpbmdzIjoiOzs7OztBQUNBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNB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O1VBRXBFLENBQU0sQ0FBQztRQUFBLENBQ0g7TUFBQyxDQUNIO0lBQUMsQ0FDSCxDQUFDO0VBRVg7RUFHQSxJQUFJLENBQUNqQixZQUFZLEVBQUU7SUFDakIsT0FDRSxJQUFBTixXQUFBLENBQUF5QixHQUFBLEVBQUM5QixZQUFBLENBQUF5QixJQUFJO01BQUN1QixNQUFNLEVBQUMsb0JBQW9CO01BQUN0QixLQUFLLEVBQUUwQyxjQUFNLENBQUNDLFNBQVU7TUFBQXpDLFFBQUEsRUFDeEQsSUFBQXZCLFdBQUEsQ0FBQXlCLEdBQUEsRUFBQzdCLEtBQUEsQ0FBQXFFLE9BQUk7UUFBQzVDLEtBQUssRUFBRSxDQUFDMEMsY0FBTSxDQUFDRyxJQUFJLEVBQUU7VUFBRTVCLGVBQWUsRUFBRTlCLE1BQU0sQ0FBQ3FEO1FBQVEsQ0FBQyxDQUFFO1FBQUF0QyxRQUFBLEVBQzlELElBQUF2QixXQUFBLENBQUF5QixHQUFBLEVBQUN1QixvQkFBb0I7VUFDbkJ6QyxXQUFXLEVBQUVBLFdBQVk7VUFDekJDLE1BQU0sRUFBRUEsTUFBTztVQUNmMEMsb0JBQW9CLEVBQUVBLG9CQUFxQjtVQUMzQ3hDLFdBQVcsRUFBRXFEO1FBQU8sQ0FDckI7TUFBQyxDQUNFO0lBQUMsQ0FDSCxDQUFDO0VBRVg7RUFFQSxPQUNFLElBQUEvRCxXQUFBLENBQUF5QixHQUFBLEVBQUM5QixZQUFBLENBQUF5QixJQUFJO0lBQUN1QixNQUFNLEVBQUMsdUJBQXVCO0lBQUN0QixLQUFLLEVBQUUwQyxjQUFNLENBQUNDLFNBQVU7SUFBQXpDLFFBQUEsRUFDM0QsSUFBQXZCLFdBQUEsQ0FBQXlCLEdBQUEsRUFBQzdCLEtBQUEsQ0FBQXFFLE9BQUk7TUFBQzVDLEtBQUssRUFBRSxDQUFDMEMsY0FBTSxDQUFDRyxJQUFJLEVBQUU7UUFBRTVCLGVBQWUsRUFBRTlCLE1BQU0sQ0FBQ3FEO01BQVEsQ0FBQyxDQUFFO01BQUF0QyxRQUFBLEVBQzlELElBQUF2QixXQUFBLENBQUF5QixHQUFBLEVBQUN4QixlQUFlO1FBQ2RLLFlBQVksRUFBRUEsWUFBYTtRQUMzQkMsV0FBVyxFQUFFQSxXQUFZO1FBQ3pCQyxNQUFNLEVBQUVBLE1BQU87UUFDZkMsY0FBYyxFQUFFQSxjQUFlO1FBQy9CQyxXQUFXLEVBQUVxRDtNQUFPLENBQ3JCO0lBQUMsQ0FDRTtFQUFDLENBQ0gsQ0FBQztBQUVYLENBQUM7QUFBQyxJQUFBUSxRQUFBLEdBQUFDLE9BQUEsQ0FBQVAsT0FBQSxHQUVhWixtQkFBbUIiLCJpZ25vcmVMaXN0IjpbXX0=