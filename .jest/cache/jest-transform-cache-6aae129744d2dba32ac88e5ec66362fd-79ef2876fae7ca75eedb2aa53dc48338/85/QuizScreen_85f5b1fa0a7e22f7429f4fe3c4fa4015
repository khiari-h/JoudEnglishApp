61d100fa5d8bdb81c3c27c9f8906362d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _QuizHeader = _interopRequireDefault(require("./QuizHeader.js"));
var _QuizContent = _interopRequireDefault(require("./QuizContent"));
var _jsxRuntime = require("react/jsx-runtime");
function cov_1ggi7r9y4() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\VocabularyRevision\\components\\QuizScreen.js";
  var hash = "f74c31ca084a7969ff4c8d23b5d822858bee814f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\VocabularyRevision\\components\\QuizScreen.js",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 20
        },
        end: {
          line: 29,
          column: 1
        }
      },
      "1": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 81
        }
      },
      "2": {
        start: {
          line: 11,
          column: 2
        },
        end: {
          line: 28,
          column: 4
        }
      },
      "3": {
        start: {
          line: 31,
          column: 19
        },
        end: {
          line: 81,
          column: 1
        }
      },
      "4": {
        start: {
          line: 49,
          column: 6
        },
        end: {
          line: 49,
          column: 16
        }
      },
      "5": {
        start: {
          line: 51,
          column: 2
        },
        end: {
          line: 80,
          column: 4
        }
      },
      "6": {
        start: {
          line: 85,
          column: 0
        },
        end: {
          line: 89,
          column: 2
        }
      },
      "7": {
        start: {
          line: 92,
          column: 0
        },
        end: {
          line: 109,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 20
          },
          end: {
            line: 9,
            column: 21
          }
        },
        loc: {
          start: {
            line: 9,
            column: 59
          },
          end: {
            line: 29,
            column: 1
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 31,
            column: 19
          },
          end: {
            line: 31,
            column: 20
          }
        },
        loc: {
          start: {
            line: 40,
            column: 6
          },
          end: {
            line: 81,
            column: 1
          }
        },
        line: 40
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 26
          },
          end: {
            line: 10,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 10,
            column: 57
          },
          end: {
            line: 10,
            column: 58
          }
        }, {
          start: {
            line: 10,
            column: 61
          },
          end: {
            line: 10,
            column: 81
          }
        }],
        line: 10
      },
      "1": {
        loc: {
          start: {
            line: 10,
            column: 26
          },
          end: {
            line: 10,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 10,
            column: 26
          },
          end: {
            line: 10,
            column: 35
          }
        }, {
          start: {
            line: 10,
            column: 39
          },
          end: {
            line: 10,
            column: 54
          }
        }],
        line: 10
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f74c31ca084a7969ff4c8d23b5d822858bee814f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_1ggi7r9y4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ggi7r9y4();
cov_1ggi7r9y4().s[0]++;
var ProgressBar = function ProgressBar(_ref) {
  var progress = _ref.progress,
    colors = _ref.colors,
    localStyles = _ref.localStyles;
  cov_1ggi7r9y4().f[0]++;
  var displayProgress = (cov_1ggi7r9y4().s[1]++, (cov_1ggi7r9y4().b[1][0]++, !progress) || (cov_1ggi7r9y4().b[1][1]++, isNaN(progress)) ? (cov_1ggi7r9y4().b[0][0]++, 0) : (cov_1ggi7r9y4().b[0][1]++, Math.round(progress)));
  cov_1ggi7r9y4().s[2]++;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: localStyles.progressSection,
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [localStyles.progressTrack, {
        backgroundColor: '#F3F4F6'
      }],
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [localStyles.progressBarQuiz, {
          backgroundColor: colors.primary,
          width: `${displayProgress}%`
        }]
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
      style: [localStyles.progressText, {
        color: colors.textSecondary
      }],
      children: [displayProgress, "%"]
    })]
  });
};
cov_1ggi7r9y4().s[3]++;
var QuizScreen = function QuizScreen(_ref2) {
  var quizEngine = _ref2.quizEngine,
    onGoBack = _ref2.onGoBack,
    onAnswer = _ref2.onAnswer,
    onContinue = _ref2.onContinue,
    slideAnim = _ref2.slideAnim,
    shakeAnim = _ref2.shakeAnim,
    colors = _ref2.colors,
    localStyles = _ref2.localStyles;
  cov_1ggi7r9y4().f[1]++;
  var _ref3 = (cov_1ggi7r9y4().s[4]++, quizEngine),
    currentIndex = _ref3.currentQuestionIndex,
    totalQuestions = _ref3.totalQuestions,
    score = _ref3.score,
    progress = _ref3.progress,
    currentQuestion = _ref3.currentQuestion,
    selectedAnswer = _ref3.selectedChoice,
    showResult = _ref3.showResult;
  cov_1ggi7r9y4().s[5]++;
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [(0, _jsxRuntime.jsx)(_QuizHeader.default, {
      onGoBack: onGoBack,
      currentIndex: currentIndex,
      totalQuestions: totalQuestions,
      score: score,
      colors: colors,
      localStyles: localStyles
    }), (0, _jsxRuntime.jsx)(ProgressBar, {
      progress: progress,
      colors: colors,
      localStyles: localStyles
    }), (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
      style: {
        flex: 1,
        transform: [{
          translateX: slideAnim
        }, {
          translateX: shakeAnim
        }]
      },
      children: (0, _jsxRuntime.jsx)(_QuizContent.default, {
        currentQuestion: currentQuestion,
        selectedAnswer: selectedAnswer,
        showResult: showResult,
        handleAnswer: onAnswer,
        handleContinue: onContinue,
        colors: colors,
        localStyles: localStyles
      })
    })]
  });
};
cov_1ggi7r9y4().s[6]++;
ProgressBar.propTypes = {
  progress: _propTypes.default.number.isRequired,
  colors: _propTypes.default.object.isRequired,
  localStyles: _propTypes.default.object.isRequired
};
cov_1ggi7r9y4().s[7]++;
QuizScreen.propTypes = {
  quizEngine: _propTypes.default.shape({
    currentQuestionIndex: _propTypes.default.number.isRequired,
    totalQuestions: _propTypes.default.number.isRequired,
    score: _propTypes.default.number.isRequired,
    progress: _propTypes.default.number.isRequired,
    currentQuestion: _propTypes.default.object.isRequired,
    selectedChoice: _propTypes.default.number,
    showResult: _propTypes.default.bool.isRequired
  }).isRequired,
  onGoBack: _propTypes.default.func.isRequired,
  onAnswer: _propTypes.default.func.isRequired,
  onContinue: _propTypes.default.func.isRequired,
  slideAnim: _propTypes.default.object.isRequired,
  shakeAnim: _propTypes.default.object.isRequired,
  colors: _propTypes.default.object.isRequired,
  localStyles: _propTypes.default.object.isRequired
};
var _default = exports.default = QuizScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,