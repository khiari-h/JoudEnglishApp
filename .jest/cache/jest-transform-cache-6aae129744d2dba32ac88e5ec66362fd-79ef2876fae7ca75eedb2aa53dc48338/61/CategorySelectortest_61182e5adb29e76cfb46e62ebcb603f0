6c02cd16c9f7f84c6bbc06ce58e3ae35
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  return Object.assign({}, RN, {
    Animated: Object.assign({}, RN.Animated, {
      Value: mockAnimatedValue,
      timing: mockTiming
    }),
    View: RN.View,
    Text: RN.Text,
    TouchableOpacity: RN.TouchableOpacity,
    ScrollView: RN.ScrollView
  });
});
_getJestObj().mock('expo-linear-gradient', function () {
  var _require = require('react-native'),
    View = _require.View;
  return {
    LinearGradient: function LinearGradient(props) {
      return (0, _jsxRuntime.jsx)(View, Object.assign({}, props));
    }
  };
});
_getJestObj().mock('../../../src/components/exercise-common/CategorySelector/style', function () {
  var _require2 = require('react-native'),
    StyleSheet = _require2.StyleSheet;
  return function () {
    return StyleSheet.create({
      container: {},
      backgroundGradient: {},
      scrollView: {},
      scrollContent: {},
      categoryItemWrapper: {},
      categoryTouchable: {},
      selectedCategoryItem: {},
      selectedInner: {},
      selectedCategoryText: {},
      sparkleContainer: {},
      sparkle: {},
      categoryItem: {},
      categoryInner: {},
      categoryText: {}
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _CategorySelector = _interopRequireDefault(require("../../../src/components/exercise-common/CategorySelector"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockStart = jest.fn();
var mockTiming = jest.fn(function () {
  return {
    start: mockStart
  };
});
var mockAnimatedValue = jest.fn(function () {
  return {
    interpolate: jest.fn(function () {
      return {};
    }),
    timing: mockTiming
  };
});
describe('CategorySelector', function () {
  var categories = [{
    id: '1',
    name: 'Grammar'
  }, {
    id: '2',
    name: 'Vocabulary'
  }, {
    id: '3',
    name: 'Reading'
  }];
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('should render all categories correctly with minimum props', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories
      })),
      getByText = _render.getByText;
    expect(getByText('Grammar')).toBeTruthy();
    expect(getByText('Vocabulary')).toBeTruthy();
    expect(getByText('Reading')).toBeTruthy();
  });
  it('should render nothing when the categories array is empty', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: []
      })),
      queryByText = _render2.queryByText;
    expect(queryByText('Grammar')).toBeNull();
  });
  it('should display the selected category with the sparkle emoji', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: function onSelectCategory() {}
      })),
      getByText = _render3.getByText;
    expect(getByText('âœ¨')).toBeTruthy();
  });
  it('should call onSelectCategory with the correct category id when a category is pressed', function () {
    var onSelectCategory = jest.fn();
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        onSelectCategory: onSelectCategory
      })),
      getByText = _render4.getByText;
    _reactNative.fireEvent.press(getByText('Vocabulary'));
    expect(onSelectCategory).toHaveBeenCalledWith('2');
  });
  it('should deselect the previous category when a new one is selected and trigger two animations', function () {
    var onSelectCategory = jest.fn();
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: onSelectCategory
      })),
      getByText = _render5.getByText,
      rerender = _render5.rerender;
    _reactNative.fireEvent.press(getByText('Vocabulary'));
    rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
      categories: categories,
      selectedCategory: "2",
      onSelectCategory: onSelectCategory
    }));
    expect(mockStart).toHaveBeenCalledTimes(2);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,