{"version":3,"names":["_getJestObj","mock","useFonts","hideAsync","jest","fn","mockResolvedValue","undefined","mockImplementation","actualNav","requireActual","Object","assign","useNavigation","navigate","mockNavigate","goBack","mockGoBack","replace","mockReplace","useRoute","params","name","MockLevelAssessment","_ref","route","_ref2","_ref2$level","level","_jsxRuntime","jsxs","testID","children","jsx","onPress","MockAssessmentHeader","_ref3","onBackPress","MockAssessmentResults","_ref4","userScore","onContinue","onRetry","getRecommendedLevel","score","percentage","correctAnswers","totalQuestions","recommendedLevel","mockCurrentQuestionIndex","mockSelectedAnswer","mockTestCompleted","currentSection","id","title","currentQuestionIndex","selectedAnswer","showFeedback","testCompleted","userAnswers","loaded","currentQuestion","text","options","correct","totalSections","totalQuestionsInSection","handleSelectAnswer","answer","validateAnswer","tryAgain","handleNext","completed","handlePrevious","Math","max","saveAssessmentResults","resetAssessment","canGoToPrevious","isLastQuestionInSection","stats","answeredInCurrentSection","display","currentSectionIndex","sectionTitle","questionNumber","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_native","_AppProvider","_index","_require","renderWithProviders","component","arguments","length","AllTheProviders","_ref5","NavigationContainer","default","render","wrapper","waitForElement","_ref6","testId","timeout","waitFor","element","screen","getByTestId","expect","toBeTruthy","_x","apply","describe","beforeEach","clearAllMocks","it","mockRoute","levelDisplay","getByTestID","props","toContain","answerOptionA","fireEvent","press","validateBtn","i","nextBtn","queryByTestID","scoreDisplay","continueBtn","toHaveBeenCalledWith","mockUseAssessment","mockReturnValueOnce","retryBtn","toHaveBeenCalled","loadingIndicator","testCases","expectedLevel","description","forEach","_ref0","backBtn","progressText","startTime","performance","now","endTime","renderTime","toBeLessThan","assessmentScreen","levels","_renderWithProviders","unmount","afterAll","resetModules"],"sources":["assessment-and-placement.test.js"],"sourcesContent":["import React from 'react';\nimport { render, fireEvent, waitFor, screen } from '@testing-library/react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport AppProvider from '../../src/contexts/AppProvider';\nimport LevelAssessment from '../../src/screens/exercises/level-assessment/index.js';\n\n// === MOCKS ===\n// Mock des dépendances externes\njest.mock('expo-font', () => ({\n  useFonts: () => [true],\n}));\n\njest.mock('expo-splash-screen', () => ({\n  hideAsync: jest.fn().mockResolvedValue(undefined),\n}));\n\njest.mock('../../src/hooks/useRouteActivityTracker', () => \n  jest.fn().mockImplementation(() => ({}))\n);\n\n// Mock de la navigation avec des méthodes contrôlables\nconst mockNavigate = jest.fn();\nconst mockGoBack = jest.fn();\nconst mockReplace = jest.fn();\n\njest.mock('@react-navigation/native', () => {\n  const actualNav = jest.requireActual('@react-navigation/native');\n  return {\n    ...actualNav,\n    useNavigation: () => ({\n      navigate: mockNavigate,\n      goBack: mockGoBack,\n      replace: mockReplace,\n    }),\n    useRoute: () => ({\n      params: {},\n      name: 'dashboard',\n    }),\n  };\n});\n\n// Mock du composant LevelAssessment principal\njest.mock('../../src/screens/exercises/level-assessment/index.js', () => {\n  return function MockLevelAssessment({ route }) {\n    const { level = 'A1' } = route?.params || {};\n    \n    return (\n      <div testID=\"level-assessment-screen\">\n        <div testID=\"assessment-header\">\n          <text testID=\"assessment-level\">Évaluation - Niveau {level}</text>\n        </div>\n        \n        <div testID=\"assessment-content\">\n          <text testID=\"assessment-question\">Question d'évaluation simulée</text>\n          \n          {/* Boutons de réponse simulés */}\n          <button testID=\"answer-option-a\" onPress={() => {}}>\n            Réponse A\n          </button>\n          <button testID=\"answer-option-b\" onPress={() => {}}>\n            Réponse B\n          </button>\n          \n          {/* Bouton de validation */}\n          <button \n            testID=\"validate-answer-btn\"\n            onPress={() => {\n              // Simuler la progression vers la fin du test\n              mockNavigate('Dashboard');\n            }}\n          >\n            Valider\n          </button>\n          \n          {/* Bouton de navigation suivante */}\n          <button \n            testID=\"next-question-btn\"\n            onPress={() => {\n              // Simuler la completion du test après quelques questions\n              mockNavigate('Dashboard');\n            }}\n          >\n            Question suivante\n          </button>\n        </div>\n        \n        <div testID=\"assessment-progress\">\n          <text testID=\"progress-text\">Question 1 sur 10</text>\n        </div>\n      </div>\n    );\n  };\n});\n\n// Mock des sous-composants utilisés par LevelAssessment\njest.mock('../../src/screens/exercises/level-assessment/AssessmentHeader', () => {\n  return function MockAssessmentHeader({ level, onBackPress }) {\n    return (\n      <div testID=\"assessment-header\">\n        <button testID=\"back-btn\" onPress={onBackPress}>\n          Retour\n        </button>\n        <text testID=\"header-level\">Niveau {level}</text>\n      </div>\n    );\n  };\n});\n\njest.mock('../../src/screens/exercises/level-assessment/AssessmentResults', () => {\n  return function MockAssessmentResults({ level, userScore, onContinue, onRetry }) {\n    // Simuler le calcul du niveau recommandé basé sur le score\n    const getRecommendedLevel = (score) => {\n      const percentage = (score?.correctAnswers / score?.totalQuestions) * 100 || 50;\n      if (percentage >= 85) return 'B2';\n      if (percentage >= 70) return 'B1';\n      if (percentage >= 50) return 'A2';\n      return 'A1';\n    };\n    \n    const recommendedLevel = getRecommendedLevel(userScore);\n    \n    return (\n      <div testID=\"assessment-results\">\n        <text testID=\"current-level\">Niveau testé : {level}</text>\n        <text testID=\"recommended-level\">Niveau recommandé : {recommendedLevel}</text>\n        <text testID=\"score-display\">\n          Score : {userScore?.correctAnswers || 0}/{userScore?.totalQuestions || 0}\n        </text>\n        \n        <button testID=\"continue-btn\" onPress={onContinue}>\n          Continuer\n        </button>\n        \n        <button testID=\"retry-btn\" onPress={onRetry}>\n          Recommencer\n        </button>\n      </div>\n    );\n  };\n});\n\n// Mock du hook useAssessment (sans état React dans le mock)\njest.mock('../../src/screens/exercises/level-assessment/hooks/useAssessment', () => {\n  return jest.fn().mockImplementation((level) => {\n    // État simulé sans React.useState\n    let mockCurrentQuestionIndex = 0;\n    let mockSelectedAnswer = null;\n    let mockTestCompleted = false;\n    \n    return {\n      currentSection: { id: 'grammar', title: 'Grammaire' },\n      currentQuestionIndex: mockCurrentQuestionIndex,\n      selectedAnswer: mockSelectedAnswer,\n      showFeedback: false,\n      testCompleted: mockTestCompleted,\n      userAnswers: [],\n      loaded: true,\n      currentQuestion: {\n        id: 'q1',\n        text: 'Question d\\'évaluation simulée',\n        options: ['A', 'B', 'C', 'D'],\n        correct: 'A'\n      },\n      totalSections: 3,\n      totalQuestionsInSection: 10,\n      handleSelectAnswer: jest.fn((answer) => {\n        mockSelectedAnswer = answer;\n      }),\n      validateAnswer: jest.fn(),\n      tryAgain: jest.fn(() => {\n        mockSelectedAnswer = null;\n      }),\n      handleNext: jest.fn(() => {\n        if (mockCurrentQuestionIndex < 9) {\n          mockCurrentQuestionIndex += 1;\n          return { completed: false };\n        } else {\n          mockTestCompleted = true;\n          return { completed: true };\n        }\n      }),\n      handlePrevious: jest.fn(() => {\n        mockCurrentQuestionIndex = Math.max(0, mockCurrentQuestionIndex - 1);\n      }),\n      saveAssessmentResults: jest.fn(),\n      resetAssessment: jest.fn(() => {\n        mockCurrentQuestionIndex = 0;\n        mockSelectedAnswer = null;\n        mockTestCompleted = false;\n      }),\n      canGoToPrevious: mockCurrentQuestionIndex > 0,\n      isLastQuestionInSection: mockCurrentQuestionIndex === 9,\n      stats: {\n        correctAnswers: 7,\n        totalQuestions: 10,\n        totalSections: 3,\n        answeredInCurrentSection: mockCurrentQuestionIndex + 1\n      },\n      display: {\n        currentSectionIndex: 0,\n        sectionTitle: 'Grammaire',\n        questionNumber: mockCurrentQuestionIndex + 1\n      }\n    };\n  });\n});\n\n// === HELPERS ===\n/**\n * Render helper qui configure tous les providers nécessaires\n */\nconst renderWithProviders = (component, options = {}) => {\n  const AllTheProviders = ({ children }) => (\n    <NavigationContainer>\n      <AppProvider>\n        {children}\n      </AppProvider>\n    </NavigationContainer>\n  );\n\n  return render(component, { wrapper: AllTheProviders, ...options });\n};\n\n/**\n * Helper pour attendre qu'un élément apparaisse\n */\nconst waitForElement = async (testId, timeout = 5000) => {\n  return await waitFor(\n    () => {\n      const element = screen.getByTestId(testId);\n      expect(element).toBeTruthy();\n      return element;\n    },\n    { timeout }\n  );\n};\n\n// === TESTS ===\ndescribe('Assessment and Placement Integration Test', () => {\n  // Reset des mocks avant chaque test\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('User Assessment Flow', () => {\n    it('should successfully complete the full assessment and placement workflow', async () => {\n      // === ARRANGE ===\n      const mockRoute = { params: { level: 'B1' } };\n      renderWithProviders(<LevelAssessment route={mockRoute} />);\n\n      // === ACT & ASSERT ===\n      \n      // Étape 1: Vérifier que l'évaluation est chargée\n      await waitForElement('level-assessment-screen');\n      \n      // Vérifier que le niveau est correct\n      const levelDisplay = screen.getByTestID('assessment-level');\n      expect(levelDisplay.props.children).toContain('Niveau B1');\n\n      // Étape 2: Répondre à une question\n      const answerOptionA = screen.getByTestID('answer-option-a');\n      fireEvent.press(answerOptionA);\n\n      // Valider la réponse\n      const validateBtn = screen.getByTestID('validate-answer-btn');\n      fireEvent.press(validateBtn);\n\n      // Étape 3: Passer à la question suivante (simuler plusieurs questions)\n      for (let i = 0; i < 9; i++) {\n        const nextBtn = screen.queryByTestID('next-question-btn');\n        if (nextBtn) {\n          fireEvent.press(nextBtn);\n        }\n      }\n\n      // Étape 4: Vérifier l'affichage des résultats\n      await waitFor(() => {\n        expect(screen.getByTestID('assessment-results')).toBeTruthy();\n      });\n\n      const recommendedLevel = screen.getByTestID('recommended-level');\n      expect(recommendedLevel.props.children).toContain('Niveau recommandé :');\n\n      const scoreDisplay = screen.getByTestID('score-display');\n      expect(scoreDisplay.props.children).toContain('Score :');\n\n      // Étape 5: Continuer après les résultats\n      const continueBtn = screen.getByTestID('continue-btn');\n      fireEvent.press(continueBtn);\n\n      // Vérifier la navigation vers le dashboard\n      expect(mockNavigate).toHaveBeenCalledWith('Dashboard');\n    });\n\n    it('should handle assessment retry functionality', async () => {\n      const mockRoute = { params: { level: 'A2' } };\n      \n      // Créer un mock spécifique pour ce test avec testCompleted: true\n      const mockUseAssessment = require('../../src/screens/exercises/level-assessment/hooks/useAssessment');\n      mockUseAssessment.mockReturnValueOnce({\n        testCompleted: true,\n        loaded: true,\n        currentSection: null,\n        currentQuestion: null,\n        stats: { correctAnswers: 3, totalQuestions: 10 },\n        resetAssessment: jest.fn().mockResolvedValue(undefined),\n      });\n\n      renderWithProviders(<LevelAssessment route={mockRoute} />);\n\n      // Vérifier que les résultats s'affichent\n      await waitForElement('assessment-results');\n\n      // Cliquer sur recommencer\n      const retryBtn = screen.getByTestID('retry-btn');\n      expect(retryBtn).toBeTruthy();\n      \n      fireEvent.press(retryBtn);\n\n      // Vérifier que resetAssessment a été appelé\n      await waitFor(() => {\n        expect(mockUseAssessment().resetAssessment).toHaveBeenCalled();\n      });\n    });\n\n    it('should show loading state correctly', async () => {\n      // Créer un mock spécifique avec état de chargement\n      const mockUseAssessment = require('../../src/screens/exercises/level-assessment/hooks/useAssessment');\n      mockUseAssessment.mockReturnValueOnce({\n        loaded: false,\n        currentSection: null,\n        currentQuestion: null,\n        testCompleted: false,\n      });\n\n      const mockRoute = { params: { level: 'A1' } };\n      renderWithProviders(<LevelAssessment route={mockRoute} />);\n\n      // Vérifier que l'indicateur de chargement s'affiche\n      const loadingIndicator = await waitForElement('activity-indicator');\n      expect(loadingIndicator).toBeTruthy();\n    });\n  });\n\n  describe('Level Placement Scenarios', () => {\n    const testCases = [\n      { correctAnswers: 9, totalQuestions: 10, expectedLevel: 'B2', description: 'high score (90%)' },\n      { correctAnswers: 7, totalQuestions: 10, expectedLevel: 'B1', description: 'good score (70%)' },\n      { correctAnswers: 5, totalQuestions: 10, expectedLevel: 'A2', description: 'average score (50%)' },\n      { correctAnswers: 3, totalQuestions: 10, expectedLevel: 'A1', description: 'low score (30%)' },\n    ];\n\n    testCases.forEach(({ correctAnswers, totalQuestions, expectedLevel, description }) => {\n      it(`should place user at ${expectedLevel} level with ${description}`, async () => {\n        // Créer un mock spécifique pour ce test\n        const mockUseAssessment = require('../../src/screens/exercises/level-assessment/hooks/useAssessment');\n        mockUseAssessment.mockReturnValueOnce({\n          testCompleted: true,\n          loaded: true,\n          currentSection: null,\n          currentQuestion: null,\n          stats: { correctAnswers, totalQuestions },\n          display: { currentSectionIndex: 0, sectionTitle: 'Test', questionNumber: 1 },\n          totalSections: 1,\n          totalQuestionsInSection: totalQuestions,\n        });\n\n        const mockRoute = { params: { level: 'B1' } };\n        renderWithProviders(<LevelAssessment route={mockRoute} />);\n\n        // Vérifier que les résultats s'affichent\n        await waitForElement('assessment-results');\n\n        // Vérifier le niveau recommandé\n        const recommendedLevel = screen.getByTestID('recommended-level');\n        expect(recommendedLevel.props.children).toContain(`Niveau recommandé : ${expectedLevel}`);\n\n        // Vérifier le score affiché\n        const scoreDisplay = screen.getByTestID('score-display');\n        expect(scoreDisplay.props.children).toContain(`Score : ${correctAnswers}/${totalQuestions}`);\n      });\n    });\n  });\n\n  describe('Navigation Integration', () => {\n    it('should handle back navigation correctly', async () => {\n      const mockRoute = { params: { level: 'B1' } };\n      renderWithProviders(<LevelAssessment route={mockRoute} />);\n\n      await waitForElement('level-assessment-screen');\n\n      // Tester la navigation retour\n      const backBtn = screen.getByTestID('back-btn');\n      fireEvent.press(backBtn);\n\n      // Vérifier que router.push a été appelé avec les bons paramètres\n      // (Dans un vrai test, vous mockeriez expo-router)\n      expect(backBtn).toBeTruthy();\n    });\n\n    it('should maintain proper state during question navigation', async () => {\n      const mockRoute = { params: { level: 'A1' } };\n      renderWithProviders(<LevelAssessment route={mockRoute} />);\n\n      await waitForElement('level-assessment-screen');\n\n      // Vérifier l'affichage initial\n      const progressText = screen.getByTestID('progress-text');\n      expect(progressText.props.children).toContain('Question 1 sur 10');\n\n      // Simuler la progression dans les questions\n      const nextBtn = screen.queryByTestID('next-question-btn');\n      if (nextBtn) {\n        fireEvent.press(nextBtn);\n        \n        // Vérifier que la progression a été mise à jour\n        await waitFor(() => {\n          expect(screen.getByTestID('progress-text')).toBeTruthy();\n        });\n      }\n    });\n  });\n\n  describe('Performance and Accessibility', () => {\n    it('should render assessment components efficiently', async () => {\n      const startTime = performance.now();\n      \n      const mockRoute = { params: { level: 'B1' } };\n      renderWithProviders(<LevelAssessment route={mockRoute} />);\n      \n      await waitForElement('level-assessment-screen');\n      \n      const endTime = performance.now();\n      const renderTime = endTime - startTime;\n      \n      // Le rendu devrait prendre moins d'une seconde\n      expect(renderTime).toBeLessThan(1000);\n    });\n\n    it('should have proper accessibility and test identifiers', async () => {\n      const mockRoute = { params: { level: 'A1' } };\n      renderWithProviders(<LevelAssessment route={mockRoute} />);\n      \n      const assessmentScreen = await waitForElement('level-assessment-screen');\n      \n      // Vérifier que les éléments principaux sont accessibles\n      expect(assessmentScreen).toBeTruthy();\n      expect(screen.getByTestID('assessment-header')).toBeTruthy();\n      expect(screen.getByTestID('assessment-content')).toBeTruthy();\n      expect(screen.getByTestID('assessment-progress')).toBeTruthy();\n    });\n\n    it('should handle different level parameters correctly', async () => {\n      const levels = ['A1', 'A2', 'B1', 'B2'];\n      \n      for (const level of levels) {\n        const mockRoute = { params: { level } };\n        const { unmount } = renderWithProviders(<LevelAssessment route={mockRoute} />);\n        \n        await waitForElement('level-assessment-screen');\n        \n        const levelDisplay = screen.getByTestID('assessment-level');\n        expect(levelDisplay.props.children).toContain(`Niveau ${level}`);\n        \n        unmount();\n      }\n    });\n  });\n});\n\n// === SETUP ET TEARDOWN ===\nafterAll(() => {\n  jest.clearAllMocks();\n  jest.resetModules();\n});"],"mappings":"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","ignoreList":[]}