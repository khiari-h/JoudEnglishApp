d61dafb42b8bf0d2ff3167327cb1b5ef
_getJestObj().mock('expo-font', function () {
  return {
    useFonts: function useFonts() {
      return [true];
    }
  };
});
_getJestObj().mock('expo-splash-screen', function () {
  return {
    hideAsync: jest.fn().mockResolvedValue(undefined)
  };
});
_getJestObj().mock('../../src/hooks/useRouteActivityTracker', function () {
  return jest.fn().mockImplementation(function () {
    return {};
  });
});
_getJestObj().mock('@react-navigation/native', function () {
  var actualNav = jest.requireActual('@react-navigation/native');
  return Object.assign({}, actualNav, {
    useNavigation: function useNavigation() {
      return {
        navigate: mockNavigate,
        goBack: mockGoBack,
        replace: mockReplace
      };
    },
    useRoute: function useRoute() {
      return {
        params: {},
        name: 'dashboard'
      };
    }
  });
});
_getJestObj().mock('../../src/screens/exercises/level-assessment/index.js', function () {
  return function MockLevelAssessment(_ref) {
    var route = _ref.route;
    var _ref2 = (route == null ? void 0 : route.params) || {},
      _ref2$level = _ref2.level,
      level = _ref2$level === void 0 ? 'A1' : _ref2$level;
    return (0, _jsxRuntime.jsxs)("div", {
      testID: "level-assessment-screen",
      children: [(0, _jsxRuntime.jsx)("div", {
        testID: "assessment-header",
        children: (0, _jsxRuntime.jsxs)("text", {
          testID: "assessment-level",
          children: ["\xC9valuation - Niveau ", level]
        })
      }), (0, _jsxRuntime.jsxs)("div", {
        testID: "assessment-content",
        children: [(0, _jsxRuntime.jsx)("text", {
          testID: "assessment-question",
          children: "Question d'\xE9valuation simul\xE9e"
        }), (0, _jsxRuntime.jsx)("button", {
          testID: "answer-option-a",
          onPress: function onPress() {},
          children: "R\xE9ponse A"
        }), (0, _jsxRuntime.jsx)("button", {
          testID: "answer-option-b",
          onPress: function onPress() {},
          children: "R\xE9ponse B"
        }), (0, _jsxRuntime.jsx)("button", {
          testID: "validate-answer-btn",
          onPress: function onPress() {
            mockNavigate('Dashboard');
          },
          children: "Valider"
        }), (0, _jsxRuntime.jsx)("button", {
          testID: "next-question-btn",
          onPress: function onPress() {
            mockNavigate('Dashboard');
          },
          children: "Question suivante"
        })]
      }), (0, _jsxRuntime.jsx)("div", {
        testID: "assessment-progress",
        children: (0, _jsxRuntime.jsx)("text", {
          testID: "progress-text",
          children: "Question 1 sur 10"
        })
      })]
    });
  };
});
_getJestObj().mock('../../src/screens/exercises/level-assessment/AssessmentHeader', function () {
  return function MockAssessmentHeader(_ref3) {
    var level = _ref3.level,
      onBackPress = _ref3.onBackPress;
    return (0, _jsxRuntime.jsxs)("div", {
      testID: "assessment-header",
      children: [(0, _jsxRuntime.jsx)("button", {
        testID: "back-btn",
        onPress: onBackPress,
        children: "Retour"
      }), (0, _jsxRuntime.jsxs)("text", {
        testID: "header-level",
        children: ["Niveau ", level]
      })]
    });
  };
});
_getJestObj().mock('../../src/screens/exercises/level-assessment/AssessmentResults', function () {
  return function MockAssessmentResults(_ref4) {
    var level = _ref4.level,
      userScore = _ref4.userScore,
      onContinue = _ref4.onContinue,
      onRetry = _ref4.onRetry;
    var getRecommendedLevel = function getRecommendedLevel(score) {
      var percentage = (score == null ? void 0 : score.correctAnswers) / (score == null ? void 0 : score.totalQuestions) * 100 || 50;
      if (percentage >= 85) return 'B2';
      if (percentage >= 70) return 'B1';
      if (percentage >= 50) return 'A2';
      return 'A1';
    };
    var recommendedLevel = getRecommendedLevel(userScore);
    return (0, _jsxRuntime.jsxs)("div", {
      testID: "assessment-results",
      children: [(0, _jsxRuntime.jsxs)("text", {
        testID: "current-level",
        children: ["Niveau test\xE9 : ", level]
      }), (0, _jsxRuntime.jsxs)("text", {
        testID: "recommended-level",
        children: ["Niveau recommand\xE9 : ", recommendedLevel]
      }), (0, _jsxRuntime.jsxs)("text", {
        testID: "score-display",
        children: ["Score : ", (userScore == null ? void 0 : userScore.correctAnswers) || 0, "/", (userScore == null ? void 0 : userScore.totalQuestions) || 0]
      }), (0, _jsxRuntime.jsx)("button", {
        testID: "continue-btn",
        onPress: onContinue,
        children: "Continuer"
      }), (0, _jsxRuntime.jsx)("button", {
        testID: "retry-btn",
        onPress: onRetry,
        children: "Recommencer"
      })]
    });
  };
});
_getJestObj().mock('../../src/screens/exercises/level-assessment/hooks/useAssessment', function () {
  return jest.fn().mockImplementation(function (level) {
    var mockCurrentQuestionIndex = 0;
    var mockSelectedAnswer = null;
    var mockTestCompleted = false;
    return {
      currentSection: {
        id: 'grammar',
        title: 'Grammaire'
      },
      currentQuestionIndex: mockCurrentQuestionIndex,
      selectedAnswer: mockSelectedAnswer,
      showFeedback: false,
      testCompleted: mockTestCompleted,
      userAnswers: [],
      loaded: true,
      currentQuestion: {
        id: 'q1',
        text: 'Question d\'évaluation simulée',
        options: ['A', 'B', 'C', 'D'],
        correct: 'A'
      },
      totalSections: 3,
      totalQuestionsInSection: 10,
      handleSelectAnswer: jest.fn(function (answer) {
        mockSelectedAnswer = answer;
      }),
      validateAnswer: jest.fn(),
      tryAgain: jest.fn(function () {
        mockSelectedAnswer = null;
      }),
      handleNext: jest.fn(function () {
        if (mockCurrentQuestionIndex < 9) {
          mockCurrentQuestionIndex += 1;
          return {
            completed: false
          };
        } else {
          mockTestCompleted = true;
          return {
            completed: true
          };
        }
      }),
      handlePrevious: jest.fn(function () {
        mockCurrentQuestionIndex = Math.max(0, mockCurrentQuestionIndex - 1);
      }),
      saveAssessmentResults: jest.fn(),
      resetAssessment: jest.fn(function () {
        mockCurrentQuestionIndex = 0;
        mockSelectedAnswer = null;
        mockTestCompleted = false;
      }),
      canGoToPrevious: mockCurrentQuestionIndex > 0,
      isLastQuestionInSection: mockCurrentQuestionIndex === 9,
      stats: {
        correctAnswers: 7,
        totalQuestions: 10,
        totalSections: 3,
        answeredInCurrentSection: mockCurrentQuestionIndex + 1
      },
      display: {
        currentSectionIndex: 0,
        sectionTitle: 'Grammaire',
        questionNumber: mockCurrentQuestionIndex + 1
      }
    };
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _native = require("@react-navigation/native");
var _AppProvider = _interopRequireDefault(require("../../src/contexts/AppProvider"));
var _index = _interopRequireDefault(require("../../src/screens/exercises/level-assessment/index.js"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigate = jest.fn();
var mockGoBack = jest.fn();
var mockReplace = jest.fn();
var renderWithProviders = function renderWithProviders(component) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var AllTheProviders = function AllTheProviders(_ref5) {
    var children = _ref5.children;
    return (0, _jsxRuntime.jsx)(_native.NavigationContainer, {
      children: (0, _jsxRuntime.jsx)(_AppProvider.default, {
        children: children
      })
    });
  };
  return (0, _reactNative.render)(component, Object.assign({
    wrapper: AllTheProviders
  }, options));
};
var waitForElement = function () {
  var _ref6 = (0, _asyncToGenerator2.default)(function* (testId) {
    var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5000;
    return yield (0, _reactNative.waitFor)(function () {
      var element = _reactNative.screen.getByTestId(testId);
      expect(element).toBeTruthy();
      return element;
    }, {
      timeout: timeout
    });
  });
  return function waitForElement(_x) {
    return _ref6.apply(this, arguments);
  };
}();
describe('Assessment and Placement Integration Test', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('User Assessment Flow', function () {
    it('should successfully complete the full assessment and placement workflow', (0, _asyncToGenerator2.default)(function* () {
      var mockRoute = {
        params: {
          level: 'B1'
        }
      };
      renderWithProviders((0, _jsxRuntime.jsx)(_index.default, {
        route: mockRoute
      }));
      yield waitForElement('level-assessment-screen');
      var levelDisplay = _reactNative.screen.getByTestID('assessment-level');
      expect(levelDisplay.props.children).toContain('Niveau B1');
      var answerOptionA = _reactNative.screen.getByTestID('answer-option-a');
      _reactNative.fireEvent.press(answerOptionA);
      var validateBtn = _reactNative.screen.getByTestID('validate-answer-btn');
      _reactNative.fireEvent.press(validateBtn);
      for (var i = 0; i < 9; i++) {
        var nextBtn = _reactNative.screen.queryByTestID('next-question-btn');
        if (nextBtn) {
          _reactNative.fireEvent.press(nextBtn);
        }
      }
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative.screen.getByTestID('assessment-results')).toBeTruthy();
      });
      var recommendedLevel = _reactNative.screen.getByTestID('recommended-level');
      expect(recommendedLevel.props.children).toContain('Niveau recommandé :');
      var scoreDisplay = _reactNative.screen.getByTestID('score-display');
      expect(scoreDisplay.props.children).toContain('Score :');
      var continueBtn = _reactNative.screen.getByTestID('continue-btn');
      _reactNative.fireEvent.press(continueBtn);
      expect(mockNavigate).toHaveBeenCalledWith('Dashboard');
    }));
    it('should handle assessment retry functionality', (0, _asyncToGenerator2.default)(function* () {
      var mockRoute = {
        params: {
          level: 'A2'
        }
      };
      var mockUseAssessment = require('../../src/screens/exercises/level-assessment/hooks/useAssessment');
      mockUseAssessment.mockReturnValueOnce({
        testCompleted: true,
        loaded: true,
        currentSection: null,
        currentQuestion: null,
        stats: {
          correctAnswers: 3,
          totalQuestions: 10
        },
        resetAssessment: jest.fn().mockResolvedValue(undefined)
      });
      renderWithProviders((0, _jsxRuntime.jsx)(_index.default, {
        route: mockRoute
      }));
      yield waitForElement('assessment-results');
      var retryBtn = _reactNative.screen.getByTestID('retry-btn');
      expect(retryBtn).toBeTruthy();
      _reactNative.fireEvent.press(retryBtn);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockUseAssessment().resetAssessment).toHaveBeenCalled();
      });
    }));
    it('should show loading state correctly', (0, _asyncToGenerator2.default)(function* () {
      var mockUseAssessment = require('../../src/screens/exercises/level-assessment/hooks/useAssessment');
      mockUseAssessment.mockReturnValueOnce({
        loaded: false,
        currentSection: null,
        currentQuestion: null,
        testCompleted: false
      });
      var mockRoute = {
        params: {
          level: 'A1'
        }
      };
      renderWithProviders((0, _jsxRuntime.jsx)(_index.default, {
        route: mockRoute
      }));
      var loadingIndicator = yield waitForElement('activity-indicator');
      expect(loadingIndicator).toBeTruthy();
    }));
  });
  describe('Level Placement Scenarios', function () {
    var testCases = [{
      correctAnswers: 9,
      totalQuestions: 10,
      expectedLevel: 'B2',
      description: 'high score (90%)'
    }, {
      correctAnswers: 7,
      totalQuestions: 10,
      expectedLevel: 'B1',
      description: 'good score (70%)'
    }, {
      correctAnswers: 5,
      totalQuestions: 10,
      expectedLevel: 'A2',
      description: 'average score (50%)'
    }, {
      correctAnswers: 3,
      totalQuestions: 10,
      expectedLevel: 'A1',
      description: 'low score (30%)'
    }];
    testCases.forEach(function (_ref0) {
      var correctAnswers = _ref0.correctAnswers,
        totalQuestions = _ref0.totalQuestions,
        expectedLevel = _ref0.expectedLevel,
        description = _ref0.description;
      it(`should place user at ${expectedLevel} level with ${description}`, (0, _asyncToGenerator2.default)(function* () {
        var mockUseAssessment = require('../../src/screens/exercises/level-assessment/hooks/useAssessment');
        mockUseAssessment.mockReturnValueOnce({
          testCompleted: true,
          loaded: true,
          currentSection: null,
          currentQuestion: null,
          stats: {
            correctAnswers: correctAnswers,
            totalQuestions: totalQuestions
          },
          display: {
            currentSectionIndex: 0,
            sectionTitle: 'Test',
            questionNumber: 1
          },
          totalSections: 1,
          totalQuestionsInSection: totalQuestions
        });
        var mockRoute = {
          params: {
            level: 'B1'
          }
        };
        renderWithProviders((0, _jsxRuntime.jsx)(_index.default, {
          route: mockRoute
        }));
        yield waitForElement('assessment-results');
        var recommendedLevel = _reactNative.screen.getByTestID('recommended-level');
        expect(recommendedLevel.props.children).toContain(`Niveau recommandé : ${expectedLevel}`);
        var scoreDisplay = _reactNative.screen.getByTestID('score-display');
        expect(scoreDisplay.props.children).toContain(`Score : ${correctAnswers}/${totalQuestions}`);
      }));
    });
  });
  describe('Navigation Integration', function () {
    it('should handle back navigation correctly', (0, _asyncToGenerator2.default)(function* () {
      var mockRoute = {
        params: {
          level: 'B1'
        }
      };
      renderWithProviders((0, _jsxRuntime.jsx)(_index.default, {
        route: mockRoute
      }));
      yield waitForElement('level-assessment-screen');
      var backBtn = _reactNative.screen.getByTestID('back-btn');
      _reactNative.fireEvent.press(backBtn);
      expect(backBtn).toBeTruthy();
    }));
    it('should maintain proper state during question navigation', (0, _asyncToGenerator2.default)(function* () {
      var mockRoute = {
        params: {
          level: 'A1'
        }
      };
      renderWithProviders((0, _jsxRuntime.jsx)(_index.default, {
        route: mockRoute
      }));
      yield waitForElement('level-assessment-screen');
      var progressText = _reactNative.screen.getByTestID('progress-text');
      expect(progressText.props.children).toContain('Question 1 sur 10');
      var nextBtn = _reactNative.screen.queryByTestID('next-question-btn');
      if (nextBtn) {
        _reactNative.fireEvent.press(nextBtn);
        yield (0, _reactNative.waitFor)(function () {
          expect(_reactNative.screen.getByTestID('progress-text')).toBeTruthy();
        });
      }
    }));
  });
  describe('Performance and Accessibility', function () {
    it('should render assessment components efficiently', (0, _asyncToGenerator2.default)(function* () {
      var startTime = performance.now();
      var mockRoute = {
        params: {
          level: 'B1'
        }
      };
      renderWithProviders((0, _jsxRuntime.jsx)(_index.default, {
        route: mockRoute
      }));
      yield waitForElement('level-assessment-screen');
      var endTime = performance.now();
      var renderTime = endTime - startTime;
      expect(renderTime).toBeLessThan(1000);
    }));
    it('should have proper accessibility and test identifiers', (0, _asyncToGenerator2.default)(function* () {
      var mockRoute = {
        params: {
          level: 'A1'
        }
      };
      renderWithProviders((0, _jsxRuntime.jsx)(_index.default, {
        route: mockRoute
      }));
      var assessmentScreen = yield waitForElement('level-assessment-screen');
      expect(assessmentScreen).toBeTruthy();
      expect(_reactNative.screen.getByTestID('assessment-header')).toBeTruthy();
      expect(_reactNative.screen.getByTestID('assessment-content')).toBeTruthy();
      expect(_reactNative.screen.getByTestID('assessment-progress')).toBeTruthy();
    }));
    it('should handle different level parameters correctly', (0, _asyncToGenerator2.default)(function* () {
      var levels = ['A1', 'A2', 'B1', 'B2'];
      for (var level of levels) {
        var mockRoute = {
          params: {
            level: level
          }
        };
        var _renderWithProviders = renderWithProviders((0, _jsxRuntime.jsx)(_index.default, {
            route: mockRoute
          })),
          unmount = _renderWithProviders.unmount;
        yield waitForElement('level-assessment-screen');
        var levelDisplay = _reactNative.screen.getByTestID('assessment-level');
        expect(levelDisplay.props.children).toContain(`Niveau ${level}`);
        unmount();
      }
    }));
  });
});
afterAll(function () {
  jest.clearAllMocks();
  jest.resetModules();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,