9f2708a1053c202289d12148aa0110c5
_getJestObj().mock('expo-linear-gradient', function () {
  return {
    LinearGradient: function LinearGradient(_ref) {
      var children = _ref.children;
      var _require = require('react-native'),
        View = _require.View;
      return (0, _jsxRuntime.jsx)(View, {
        children: children
      });
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _CategorySelector = _interopRequireWildcard(require("../../../src/components/exercise-common/CategorySelector"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockTimingStart = jest.fn(function (callback) {
  if (callback) {
    callback({
      finished: true
    });
  }
});
var mockParallelStart = jest.fn(function (callback) {
  if (callback) {
    callback({
      finished: true
    });
  }
});
var spyOnAnimatedTiming = jest.spyOn(_reactNative2.Animated, 'timing').mockReturnValue({
  start: mockTimingStart
});
var spyOnAnimatedParallel = jest.spyOn(_reactNative2.Animated, 'parallel').mockReturnValue({
  start: mockParallelStart
});
var spyOnAnimatedValue = jest.spyOn(_reactNative2.Animated, 'Value').mockImplementation(function () {
  return {
    interpolate: jest.fn(function () {
      return {
        _nativeTag: 1
      };
    }),
    setValue: jest.fn(),
    addListener: jest.fn(),
    removeListener: jest.fn()
  };
});
var categories = [{
  id: '1',
  name: 'Grammar'
}, {
  id: '2',
  name: 'Vocabulary'
}, {
  id: '3',
  name: 'Reading'
}];
describe('CategorySelector', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('Basic rendering', function () {
    it('renders all categories', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          onSelectCategory: function onSelectCategory() {}
        })),
        getByText = _render.getByText;
      expect(getByText('Grammar')).toBeTruthy();
      expect(getByText('Vocabulary')).toBeTruthy();
      expect(getByText('Reading')).toBeTruthy();
    });
    it('shows sparkle for selected category', function () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: function onSelectCategory() {}
        })),
        getByText = _render2.getByText;
      expect(getByText('âœ¨')).toBeTruthy();
    });
  });
  describe('User interactions', function () {
    it('calls onSelectCategory when pressing category', function () {
      var onSelectCategory = jest.fn();
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          onSelectCategory: onSelectCategory
        })),
        getByText = _render3.getByText;
      _reactNative.fireEvent.press(getByText('Vocabulary'));
      expect(onSelectCategory).toHaveBeenCalledWith('2');
    });
    it('does not call onSelectCategory if category is already selected', function () {
      var onSelectCategory = jest.fn();
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        })),
        getByText = _render4.getByText;
      _reactNative.fireEvent.press(getByText('Grammar'));
      expect(onSelectCategory).not.toHaveBeenCalled();
    });
  });
  describe('Animations', function () {
    it('triggers parallel animations when selectedCategory changes', (0, _asyncToGenerator2.default)(function* () {
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: jest.fn()
        })),
        rerender = _render5.rerender;
      spyOnAnimatedParallel.mockClear();
      spyOnAnimatedTiming.mockClear();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "2",
          onSelectCategory: jest.fn()
        }));
      }));
      expect(spyOnAnimatedParallel).toHaveBeenCalledTimes(1);
      expect(spyOnAnimatedTiming).toHaveBeenCalledTimes(2);
    }));
    it('prevents animation conflicts with isAnimatingRef', (0, _asyncToGenerator2.default)(function* () {
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: jest.fn()
        })),
        rerender = _render6.rerender;
      spyOnAnimatedParallel.mockClear();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "2",
          onSelectCategory: jest.fn()
        }));
      }));
      expect(spyOnAnimatedParallel).toHaveBeenCalledTimes(1);
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: jest.fn()
        }));
      }));
      expect(spyOnAnimatedParallel).toHaveBeenCalledTimes(1);
    }));
  });
  describe('Dynamic category management', function () {
    it('handles category addition', function () {
      var onSelectCategory = jest.fn();
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        })),
        rerender = _render7.rerender,
        getByText = _render7.getByText;
      (0, _reactNative.act)(function () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: [].concat(categories, [{
            id: '4',
            name: 'Writing'
          }]),
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        }));
      });
      expect(getByText('Writing')).toBeTruthy();
    });
    it('handles category removal', function () {
      var onSelectCategory = jest.fn();
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        })),
        rerender = _render8.rerender,
        queryByText = _render8.queryByText;
      (0, _reactNative.act)(function () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: [categories[0]],
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        }));
      });
      expect(queryByText('Vocabulary')).toBeNull();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,