6240227c523ca5366b6f0f62be5ab774
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    },
    useFocusEffect: jest.fn(function () {})
  };
});
_getJestObj().mock('../../src/utils/reading/readingDataHelper', function () {
  return {
    getLevelColor: jest.fn(function () {
      return '#007AFF';
    }),
    getReadingData: jest.fn(function () {
      return {
        exercises: [{
          id: 't1',
          title: 'The Weather',
          questions: [{
            text: 'Q1',
            options: ['a', 'b'],
            correctAnswer: 0
          }]
        }]
      };
    }),
    loadReadingData: jest.fn((0, _asyncToGenerator2.default)(function* () {
      return {
        exercises: [{
          id: 't1',
          title: 'The Weather',
          questions: [{
            text: 'Q1',
            options: ['a', 'b'],
            correctAnswer: 0
          }]
        }]
      };
    }))
  };
});
_getJestObj().mock('../../src/screens/exercises/reading/hooks/useReading', function () {
  return {
    __esModule: true,
    default: jest.fn(function () {
      return {
        selectedExerciseIndex: 0,
        currentQuestionIndex: 0,
        selectedAnswer: null,
        showFeedback: false,
        textExpanded: false,
        attempts: 0,
        completedQuestions: {},
        loaded: true,
        showDetailedProgress: false,
        currentExercise: {
          title: 'The Weather',
          questions: [{
            text: 'Q1',
            options: ['a', 'b'],
            correctAnswer: 0
          }]
        },
        currentQuestion: {
          text: 'Q1',
          options: ['a', 'b'],
          correctAnswer: 0
        },
        totalQuestions: 1,
        isCorrect: false,
        changeExercise: jest.fn(),
        changeQuestion: jest.fn(),
        selectAnswer: jest.fn(),
        submitAnswer: jest.fn(),
        nextQuestion: jest.fn(),
        previousQuestion: jest.fn(),
        retryQuestion: jest.fn(),
        toggleTextExpansion: jest.fn(),
        toggleDetailedProgress: jest.fn(),
        scrollViewRef: {
          current: null
        },
        textsScrollViewRef: {
          current: null
        },
        fadeAnim: {},
        slideAnim: {}
      };
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reading = _interopRequireDefault(require("../../src/screens/exercises/reading"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ReadingExercise accessibility', function () {
  it('should render navigation buttons with role button', function () {
    var params = {
      level: '1'
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reading.default, {
        route: {
          params: params
        }
      })),
      getAllByRole = _render.getAllByRole;
    var buttons = getAllByRole('button');
    expect(buttons.length).toBeGreaterThan(0);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,