c8fbfe7b40973b1c1b7525690ae2c563
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn(),
      replace: jest.fn(),
      setParams: jest.fn()
    },
    useFocusEffect: jest.fn(function (callback) {
      return callback();
    }),
    useLocalSearchParams: jest.fn(function () {
      return {};
    }),
    Stack: function Stack(_ref) {
      var children = _ref.children;
      return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
        children: children
      });
    },
    Link: function Link(_ref2) {
      var children = _ref2.children;
      return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
        children: children
      });
    }
  };
});
_getJestObj().mock('../../src/hooks/useLastActivity', function () {
  return function () {
    return {
      lastActivity: null,
      isLoading: false,
      reload: jest.fn()
    };
  };
});
_getJestObj().mock('../../src/hooks/useRealTimeProgress', function () {
  return function () {
    return {
      getLevelProgress: mockGetLevelProgress,
      refresh: mockRefresh
    };
  };
});
_getJestObj().mock('../../src/contexts/ProgressContext', function () {
  var originalModule = jest.requireActual('../../src/contexts/ProgressContext');
  return Object.assign({}, originalModule, {
    useProgress: function useProgress() {
      return {
        progress: {
          overall: 0,
          levels: {}
        },
        isLoading: false,
        updateProgress: mockUpdateProgress,
        getProgressForLevel: function getProgressForLevel() {
          return 0;
        }
      };
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _expoRouter = require("expo-router");
var _Dashboard = _interopRequireDefault(require("../../src/screens/Dashboard"));
var _ProgressContext = require("../../src/contexts/ProgressContext");
var _ThemeContext = require("../../src/contexts/ThemeContext");
var _CurrentLevelContext = require("../../src/contexts/CurrentLevelContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockRefresh = jest.fn();
var mockGetLevelProgress = jest.fn(function () {
  return 0;
});
var mockUpdateProgress = jest.fn();
var renderDashboard = function renderDashboard() {
  return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
    children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(_CurrentLevelContext.CurrentLevelProvider, {
        children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
      })
    })
  }));
};
describe('Scénario 1: Mise à jour de la progression', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockUpdateProgress.mockClear();
  });
  it('devrait mettre à jour la progression après avoir terminé un exercice', (0, _asyncToGenerator2.default)(function* () {
    var _renderDashboard = renderDashboard(),
      getByTestId = _renderDashboard.getByTestId,
      findByText = _renderDashboard.findByText;
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByTestId('level-selection-button')).toBeTruthy();
    });
    var startButton = getByTestId('level-selection-button');
    _reactNative.fireEvent.press(startButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_expoRouter.router.push).toHaveBeenCalledWith('/tabs/levelSelection');
    });
    var level = 'A1';
    var exerciseType = 'vocabulary';
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      var score = 80;
      mockUpdateProgress(level, exerciseType, score);
    }));
    expect(mockUpdateProgress).toHaveBeenCalledWith(level, exerciseType, 80);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,