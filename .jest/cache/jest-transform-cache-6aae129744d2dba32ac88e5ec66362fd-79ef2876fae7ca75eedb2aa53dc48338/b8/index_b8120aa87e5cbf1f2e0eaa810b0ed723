88eb722d03a08e383418e98f5ff3ce2d
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
function cov_qexcq7cvj() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\data\\phrases\\6\\index.js";
  var hash = "5e753653ab4be148aeef0384c1b13ff2ef51cc95";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\data\\phrases\\6\\index.js",
    statementMap: {
      "0": {
        start: {
          line: 33,
          column: 18
        },
        end: {
          line: 60,
          column: 1
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5e753653ab4be148aeef0384c1b13ff2ef51cc95"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_qexcq7cvj = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_qexcq7cvj();
import { CATEGORIES, DIFFICULTY, CATEGORY_DESCRIPTIONS, USAGE_NOTES, LEVEL_INFO, CONTENT_STATS, LEARNING_SEQUENCE } from './metadata.js';
import rareIdiomaticExpressions from './categories/rare-idiomatic-expressions.js';
import wordplayDoubleMeaning from './categories/wordplay-double-meaning.js';
import ironySarcasmHumor from './categories/irony-sarcasm-humor.js';
import metaphorsCulturalAllusions from './categories/metaphors-cultural-allusions.js';
import legalAdministrative from './categories/legal-administrative.js';
import academicScientific from './categories/academic-scientific.js';
import literaryArtisticCriticism from './categories/literary-artistic-criticism.js';
import rhetoricSophisticatedPersuasion from './categories/rhetoric-sophisticated-persuasion.js';
import preciseEmotionalNuances from './categories/precise-emotional-nuances.js';
import quotesCulturalReferences from './categories/quotes-cultural-references.js';
import complexAnalysisInterpretation from './categories/complex-analysis-interpretation.js';
import poeticFigurativeLanguage from './categories/poetic-figurative-language.js';
import advancedInterculturalCommunication from './categories/advanced-intercultural-communication.js';
import stylisticMasteryVariations from './categories/stylistic-mastery-variations.js';
var phrasesC2 = (cov_qexcq7cvj().s[0]++, {
  difficulty: DIFFICULTY,
  categoryDescriptions: CATEGORY_DESCRIPTIONS,
  usageNotes: USAGE_NOTES,
  levelInfo: LEVEL_INFO,
  contentStats: CONTENT_STATS,
  learningSequence: LEARNING_SEQUENCE,
  categories: CATEGORIES,
  phrases: [].concat(_toConsumableArray(rareIdiomaticExpressions), _toConsumableArray(wordplayDoubleMeaning), _toConsumableArray(ironySarcasmHumor), _toConsumableArray(metaphorsCulturalAllusions), _toConsumableArray(legalAdministrative), _toConsumableArray(academicScientific), _toConsumableArray(literaryArtisticCriticism), _toConsumableArray(rhetoricSophisticatedPersuasion), _toConsumableArray(preciseEmotionalNuances), _toConsumableArray(quotesCulturalReferences), _toConsumableArray(complexAnalysisInterpretation), _toConsumableArray(poeticFigurativeLanguage), _toConsumableArray(advancedInterculturalCommunication), _toConsumableArray(stylisticMasteryVariations))
});
export default phrasesC2;
export { rareIdiomaticExpressions, wordplayDoubleMeaning, ironySarcasmHumor, metaphorsCulturalAllusions, legalAdministrative, academicScientific, literaryArtisticCriticism, rhetoricSophisticatedPersuasion, preciseEmotionalNuances, quotesCulturalReferences, complexAnalysisInterpretation, poeticFigurativeLanguage, advancedInterculturalCommunication, stylisticMasteryVariations, CATEGORIES, DIFFICULTY, CATEGORY_DESCRIPTIONS, USAGE_NOTES, LEVEL_INFO, CONTENT_STATS, LEARNING_SEQUENCE };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDQVRFR09SSUVTIiwiRElGRklDVUxUWSIsIkNBVEVHT1JZX0RFU0NSSVBUSU9OUyIsIlVTQUdFX05PVEVTIiwiTEVWRUxfSU5GTyIsIkNPTlRFTlRfU1RBVFMiLCJMRUFSTklOR19TRVFVRU5DRSIsInJhcmVJZGlvbWF0aWNFeHByZXNzaW9ucyIsIndvcmRwbGF5RG91YmxlTWVhbmluZyIsImlyb255U2FyY2FzbUh1bW9yIiwibWV0YXBob3JzQ3VsdHVyYWxBbGx1c2lvbnMiLCJsZWdhbEFkbWluaXN0cmF0aXZlIiwiYWNhZGVtaWNTY2llbnRpZmljIiwibGl0ZXJhcnlBcnRpc3RpY0NyaXRpY2lzbSIsInJoZXRvcmljU29waGlzdGljYXRlZFBlcnN1YXNpb24iLCJwcmVjaXNlRW1vdGlvbmFsTnVhbmNlcyIsInF1b3Rlc0N1bHR1cmFsUmVmZXJlbmNlcyIsImNvbXBsZXhBbmFseXNpc0ludGVycHJldGF0aW9uIiwicG9ldGljRmlndXJhdGl2ZUxhbmd1YWdlIiwiYWR2YW5jZWRJbnRlcmN1bHR1cmFsQ29tbXVuaWNhdGlvbiIsInN0eWxpc3RpY01hc3RlcnlWYXJpYXRpb25zIiwicGhyYXNlc0MyIiwiY292X3FleGNxN2N2aiIsInMiLCJkaWZmaWN1bHR5IiwiY2F0ZWdvcnlEZXNjcmlwdGlvbnMiLCJ1c2FnZU5vdGVzIiwibGV2ZWxJbmZvIiwiY29udGVudFN0YXRzIiwibGVhcm5pbmdTZXF1ZW5jZSIsImNhdGVnb3JpZXMiLCJwaHJhc2VzIiwiY29uY2F0IiwiX3RvQ29uc3VtYWJsZUFycmF5Il0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2RhdGEvZXhlcmNpc2VzL3BocmFzZXMvYzIvaW5kZXguanNcbi8vIEZpY2hpZXIgaW5kZXggcG91ciBsZSBuaXZlYXUgQzJcbi8vIEltcG9ydGUgdG91dGVzIGxlcyBjYXTDqWdvcmllcyBldCBsZXMgZXhwb3J0ZSBjb21tZSB1biBzZXVsIG9iamV0XG5cbmltcG9ydCB7IENBVEVHT1JJRVMsIERJRkZJQ1VMVFksIENBVEVHT1JZX0RFU0NSSVBUSU9OUywgVVNBR0VfTk9URVMsIExFVkVMX0lORk8sIENPTlRFTlRfU1RBVFMsIExFQVJOSU5HX1NFUVVFTkNFIH0gZnJvbSAnLi9tZXRhZGF0YS5qcyc7XG5pbXBvcnQgcmFyZUlkaW9tYXRpY0V4cHJlc3Npb25zIGZyb20gJy4vY2F0ZWdvcmllcy9yYXJlLWlkaW9tYXRpYy1leHByZXNzaW9ucy5qcyc7XG5pbXBvcnQgd29yZHBsYXlEb3VibGVNZWFuaW5nIGZyb20gJy4vY2F0ZWdvcmllcy93b3JkcGxheS1kb3VibGUtbWVhbmluZy5qcyc7XG5pbXBvcnQgaXJvbnlTYXJjYXNtSHVtb3IgZnJvbSAnLi9jYXRlZ29yaWVzL2lyb255LXNhcmNhc20taHVtb3IuanMnO1xuaW1wb3J0IG1ldGFwaG9yc0N1bHR1cmFsQWxsdXNpb25zIGZyb20gJy4vY2F0ZWdvcmllcy9tZXRhcGhvcnMtY3VsdHVyYWwtYWxsdXNpb25zLmpzJztcbmltcG9ydCBsZWdhbEFkbWluaXN0cmF0aXZlIGZyb20gJy4vY2F0ZWdvcmllcy9sZWdhbC1hZG1pbmlzdHJhdGl2ZS5qcyc7XG5pbXBvcnQgYWNhZGVtaWNTY2llbnRpZmljIGZyb20gJy4vY2F0ZWdvcmllcy9hY2FkZW1pYy1zY2llbnRpZmljLmpzJztcbmltcG9ydCBsaXRlcmFyeUFydGlzdGljQ3JpdGljaXNtIGZyb20gJy4vY2F0ZWdvcmllcy9saXRlcmFyeS1hcnRpc3RpYy1jcml0aWNpc20uanMnO1xuaW1wb3J0IHJoZXRvcmljU29waGlzdGljYXRlZFBlcnN1YXNpb24gZnJvbSAnLi9jYXRlZ29yaWVzL3JoZXRvcmljLXNvcGhpc3RpY2F0ZWQtcGVyc3Vhc2lvbi5qcyc7XG5pbXBvcnQgcHJlY2lzZUVtb3Rpb25hbE51YW5jZXMgZnJvbSAnLi9jYXRlZ29yaWVzL3ByZWNpc2UtZW1vdGlvbmFsLW51YW5jZXMuanMnO1xuaW1wb3J0IHF1b3Rlc0N1bHR1cmFsUmVmZXJlbmNlcyBmcm9tICcuL2NhdGVnb3JpZXMvcXVvdGVzLWN1bHR1cmFsLXJlZmVyZW5jZXMuanMnO1xuaW1wb3J0IGNvbXBsZXhBbmFseXNpc0ludGVycHJldGF0aW9uIGZyb20gJy4vY2F0ZWdvcmllcy9jb21wbGV4LWFuYWx5c2lzLWludGVycHJldGF0aW9uLmpzJztcbmltcG9ydCBwb2V0aWNGaWd1cmF0aXZlTGFuZ3VhZ2UgZnJvbSAnLi9jYXRlZ29yaWVzL3BvZXRpYy1maWd1cmF0aXZlLWxhbmd1YWdlLmpzJztcbmltcG9ydCBhZHZhbmNlZEludGVyY3VsdHVyYWxDb21tdW5pY2F0aW9uIGZyb20gJy4vY2F0ZWdvcmllcy9hZHZhbmNlZC1pbnRlcmN1bHR1cmFsLWNvbW11bmljYXRpb24uanMnO1xuaW1wb3J0IHN0eWxpc3RpY01hc3RlcnlWYXJpYXRpb25zIGZyb20gJy4vY2F0ZWdvcmllcy9zdHlsaXN0aWMtbWFzdGVyeS12YXJpYXRpb25zLmpzJztcblxuLyoqXG4gKiBDb250aWVudCB0b3V0ZXMgbGVzIGRvbm7DqWVzIHBvdXIgbGVzIHBocmFzZXMgZGUgbml2ZWF1IEMyXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBQaHJhc2VzQzJcbiAqIEBwcm9wZXJ0eSB7QXJyYXk8T2JqZWN0Pn0gY2F0ZWdvcmllcyAtIExpc3RlIGRlcyBjYXTDqWdvcmllc1xuICogQHByb3BlcnR5IHtBcnJheTxPYmplY3Q+fSBwaHJhc2VzIC0gTGlzdGUgY29tcGzDqHRlIGRlcyBwaHJhc2VzIGRlIHRvdXRlcyBsZXMgY2F0w6lnb3JpZXNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkaWZmaWN1bHR5IC0gTml2ZWF1IGRlIGRpZmZpY3VsdMOpIENFQ1JcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBjYXRlZ29yeURlc2NyaXB0aW9ucyAtIERlc2NyaXB0aW9ucyBkw6l0YWlsbMOpZXMgZGUgY2hhcXVlIGNhdMOpZ29yaWVcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSB1c2FnZU5vdGVzIC0gTm90ZXMgc3VyIGwndXRpbGlzYXRpb24gc2Vsb24gbGVzIHJlZ2lzdHJlc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGxldmVsSW5mbyAtIEluZm9ybWF0aW9ucyBzdXIgbGUgbml2ZWF1IEMyXG4gKiBAcHJvcGVydHkge09iamVjdH0gY29udGVudFN0YXRzIC0gU3RhdGlzdGlxdWVzIHN1ciBsZSBjb250ZW51XG4gKiBAcHJvcGVydHkge0FycmF5PHN0cmluZz59IGxlYXJuaW5nU2VxdWVuY2UgLSBTw6lxdWVuY2UgZCdhcHByZW50aXNzYWdlIHJlY29tbWFuZMOpZVxuICovXG5jb25zdCBwaHJhc2VzQzIgPSB7XG4gIC8vIE3DqXRhZG9ubsOpZXNcbiAgZGlmZmljdWx0eTogRElGRklDVUxUWSxcbiAgY2F0ZWdvcnlEZXNjcmlwdGlvbnM6IENBVEVHT1JZX0RFU0NSSVBUSU9OUyxcbiAgdXNhZ2VOb3RlczogVVNBR0VfTk9URVMsXG4gIGxldmVsSW5mbzogTEVWRUxfSU5GTyxcbiAgY29udGVudFN0YXRzOiBDT05URU5UX1NUQVRTLFxuICBsZWFybmluZ1NlcXVlbmNlOiBMRUFSTklOR19TRVFVRU5DRSxcblxuICAvLyBEb25uw6llcyBwcmluY2lwYWxlc1xuICBjYXRlZ29yaWVzOiBDQVRFR09SSUVTLFxuICBwaHJhc2VzOiBbXG4gICAgLi4ucmFyZUlkaW9tYXRpY0V4cHJlc3Npb25zLFxuICAgIC4uLndvcmRwbGF5RG91YmxlTWVhbmluZyxcbiAgICAuLi5pcm9ueVNhcmNhc21IdW1vcixcbiAgICAuLi5tZXRhcGhvcnNDdWx0dXJhbEFsbHVzaW9ucyxcbiAgICAuLi5sZWdhbEFkbWluaXN0cmF0aXZlLFxuICAgIC4uLmFjYWRlbWljU2NpZW50aWZpYyxcbiAgICAuLi5saXRlcmFyeUFydGlzdGljQ3JpdGljaXNtLFxuICAgIC4uLnJoZXRvcmljU29waGlzdGljYXRlZFBlcnN1YXNpb24sXG4gICAgLi4ucHJlY2lzZUVtb3Rpb25hbE51YW5jZXMsXG4gICAgLi4ucXVvdGVzQ3VsdHVyYWxSZWZlcmVuY2VzLFxuICAgIC4uLmNvbXBsZXhBbmFseXNpc0ludGVycHJldGF0aW9uLFxuICAgIC4uLnBvZXRpY0ZpZ3VyYXRpdmVMYW5ndWFnZSxcbiAgICAuLi5hZHZhbmNlZEludGVyY3VsdHVyYWxDb21tdW5pY2F0aW9uLFxuICAgIC4uLnN0eWxpc3RpY01hc3RlcnlWYXJpYXRpb25zXG4gIF1cbn07XG5cbi8vIEV4cG9ydCBwcmluY2lwYWwgKHBvdXIgaW1wb3J0IGRlZmF1bHQpXG5leHBvcnQgZGVmYXVsdCBwaHJhc2VzQzI7XG5cbi8vIEV4cG9ydHMgbm9tbcOpcyBwb3VyIHBlcm1ldHRyZSBkJ2ltcG9ydGVyIGRlcyBjYXTDqWdvcmllcyBzcMOpY2lmaXF1ZXNcbmV4cG9ydCB7IFxuICByYXJlSWRpb21hdGljRXhwcmVzc2lvbnMsXG4gIHdvcmRwbGF5RG91YmxlTWVhbmluZyxcbiAgaXJvbnlTYXJjYXNtSHVtb3IsXG4gIG1ldGFwaG9yc0N1bHR1cmFsQWxsdXNpb25zLFxuICBsZWdhbEFkbWluaXN0cmF0aXZlLFxuICBhY2FkZW1pY1NjaWVudGlmaWMsXG4gIGxpdGVyYXJ5QXJ0aXN0aWNDcml0aWNpc20sXG4gIHJoZXRvcmljU29waGlzdGljYXRlZFBlcnN1YXNpb24sXG4gIHByZWNpc2VFbW90aW9uYWxOdWFuY2VzLFxuICBxdW90ZXNDdWx0dXJhbFJlZmVyZW5jZXMsXG4gIGNvbXBsZXhBbmFseXNpc0ludGVycHJldGF0aW9uLFxuICBwb2V0aWNGaWd1cmF0aXZlTGFuZ3VhZ2UsXG4gIGFkdmFuY2VkSW50ZXJjdWx0dXJhbENvbW11bmljYXRpb24sXG4gIHN0eWxpc3RpY01hc3RlcnlWYXJpYXRpb25zLFxuICBDQVRFR09SSUVTLFxuICBESUZGSUNVTFRZLFxuICBDQVRFR09SWV9ERVNDUklQVElPTlMsXG4gIFVTQUdFX05PVEVTLFxuICBMRVZFTF9JTkZPLFxuICBDT05URU5UX1NUQVRTLFxuICBMRUFSTklOR19TRVFVRU5DRVxufTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUlBLFNBQVNBLFVBQVUsRUFBRUMsVUFBVSxFQUFFQyxxQkFBcUIsRUFBRUMsV0FBVyxFQUFFQyxVQUFVLEVBQUVDLGFBQWEsRUFBRUMsaUJBQWlCLFFBQVEsZUFBZTtBQUN4SSxPQUFPQyx3QkFBd0IsTUFBTSw0Q0FBNEM7QUFDakYsT0FBT0MscUJBQXFCLE1BQU0seUNBQXlDO0FBQzNFLE9BQU9DLGlCQUFpQixNQUFNLHFDQUFxQztBQUNuRSxPQUFPQywwQkFBMEIsTUFBTSw4Q0FBOEM7QUFDckYsT0FBT0MsbUJBQW1CLE1BQU0sc0NBQXNDO0FBQ3RFLE9BQU9DLGtCQUFrQixNQUFNLHFDQUFxQztBQUNwRSxPQUFPQyx5QkFBeUIsTUFBTSw2Q0FBNkM7QUFDbkYsT0FBT0MsK0JBQStCLE1BQU0sbURBQW1EO0FBQy9GLE9BQU9DLHVCQUF1QixNQUFNLDJDQUEyQztBQUMvRSxPQUFPQyx3QkFBd0IsTUFBTSw0Q0FBNEM7QUFDakYsT0FBT0MsNkJBQTZCLE1BQU0saURBQWlEO0FBQzNGLE9BQU9DLHdCQUF3QixNQUFNLDRDQUE0QztBQUNqRixPQUFPQyxrQ0FBa0MsTUFBTSxzREFBc0Q7QUFDckcsT0FBT0MsMEJBQTBCLE1BQU0sOENBQThDO0FBY3JGLElBQU1DLFNBQVMsSUFBQUMsYUFBQSxHQUFBQyxDQUFBLE9BQUc7RUFFaEJDLFVBQVUsRUFBRXZCLFVBQVU7RUFDdEJ3QixvQkFBb0IsRUFBRXZCLHFCQUFxQjtFQUMzQ3dCLFVBQVUsRUFBRXZCLFdBQVc7RUFDdkJ3QixTQUFTLEVBQUV2QixVQUFVO0VBQ3JCd0IsWUFBWSxFQUFFdkIsYUFBYTtFQUMzQndCLGdCQUFnQixFQUFFdkIsaUJBQWlCO0VBR25Dd0IsVUFBVSxFQUFFOUIsVUFBVTtFQUN0QitCLE9BQU8sS0FBQUMsTUFBQSxDQUFBQyxrQkFBQSxDQUNGMUIsd0JBQXdCLEdBQUEwQixrQkFBQSxDQUN4QnpCLHFCQUFxQixHQUFBeUIsa0JBQUEsQ0FDckJ4QixpQkFBaUIsR0FBQXdCLGtCQUFBLENBQ2pCdkIsMEJBQTBCLEdBQUF1QixrQkFBQSxDQUMxQnRCLG1CQUFtQixHQUFBc0Isa0JBQUEsQ0FDbkJyQixrQkFBa0IsR0FBQXFCLGtCQUFBLENBQ2xCcEIseUJBQXlCLEdBQUFvQixrQkFBQSxDQUN6Qm5CLCtCQUErQixHQUFBbUIsa0JBQUEsQ0FDL0JsQix1QkFBdUIsR0FBQWtCLGtCQUFBLENBQ3ZCakIsd0JBQXdCLEdBQUFpQixrQkFBQSxDQUN4QmhCLDZCQUE2QixHQUFBZ0Isa0JBQUEsQ0FDN0JmLHdCQUF3QixHQUFBZSxrQkFBQSxDQUN4QmQsa0NBQWtDLEdBQUFjLGtCQUFBLENBQ2xDYiwwQkFBMEI7QUFFakMsQ0FBQztBQUdELGVBQWVDLFNBQVM7QUFHeEIsU0FDRWQsd0JBQXdCLEVBQ3hCQyxxQkFBcUIsRUFDckJDLGlCQUFpQixFQUNqQkMsMEJBQTBCLEVBQzFCQyxtQkFBbUIsRUFDbkJDLGtCQUFrQixFQUNsQkMseUJBQXlCLEVBQ3pCQywrQkFBK0IsRUFDL0JDLHVCQUF1QixFQUN2QkMsd0JBQXdCLEVBQ3hCQyw2QkFBNkIsRUFDN0JDLHdCQUF3QixFQUN4QkMsa0NBQWtDLEVBQ2xDQywwQkFBMEIsRUFDMUJwQixVQUFVLEVBQ1ZDLFVBQVUsRUFDVkMscUJBQXFCLEVBQ3JCQyxXQUFXLEVBQ1hDLFVBQVUsRUFDVkMsYUFBYSxFQUNiQyxpQkFBaUIiLCJpZ25vcmVMaXN0IjpbXX0=