e2f92c089b9b288e3e92e1b09d73bd3a
_getJestObj().mock('../../../src/hooks/useRevisionSettings');
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn()
  };
});
_getJestObj().mock('../../../src/contexts/ThemeContext', function () {
  return {
    ThemeContext: {
      Consumer: function Consumer(_ref) {
        var children = _ref.children;
        return children({
          colors: {
            surface: "#FFFFFF",
            text: "#1F2937",
            textSecondary: "#6B7280",
            primary: "#10B981",
            accent: "#3B82F6",
            warning: "#F59E0B"
          }
        });
      },
      Provider: function Provider(_ref2) {
        var children = _ref2.children,
          value = _ref2.value;
        return children;
      }
    },
    useTheme: function useTheme() {
      return {
        colors: {
          surface: "#FFFFFF",
          text: "#1F2937",
          textSecondary: "#6B7280",
          primary: "#10B981",
          accent: "#3B82F6",
          warning: "#F59E0B"
        }
      };
    }
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/popup/RevisionPopup', function () {
  var React = require('react');
  var _require = require('react-native'),
    View = _require.View,
    Text = _require.Text,
    TouchableOpacity = _require.TouchableOpacity;
  return function (_ref3) {
    var visible = _ref3.visible,
      onChoice = _ref3.onChoice,
      onDismiss = _ref3.onDismiss,
      totalWordsLearned = _ref3.totalWordsLearned,
      questionsCount = _ref3.questionsCount;
    if (!visible) return null;
    return (0, _jsxRuntime.jsxs)(View, {
      testID: "revision-popup",
      children: [(0, _jsxRuntime.jsxs)(Text, {
        testID: "popup-words",
        children: ["Words: ", totalWordsLearned]
      }), (0, _jsxRuntime.jsxs)(Text, {
        testID: "popup-questions",
        children: ["Questions: ", questionsCount]
      }), (0, _jsxRuntime.jsx)(TouchableOpacity, {
        testID: "popup-now",
        onPress: function onPress() {
          return onChoice('now');
        },
        children: (0, _jsxRuntime.jsx)(Text, {
          children: "Now"
        })
      }), (0, _jsxRuntime.jsx)(TouchableOpacity, {
        testID: "popup-later50",
        onPress: function onPress() {
          return onChoice('later_50');
        },
        children: (0, _jsxRuntime.jsx)(Text, {
          children: "Later 50"
        })
      }), (0, _jsxRuntime.jsx)(TouchableOpacity, {
        testID: "popup-disable",
        onPress: function onPress() {
          return onChoice('disable');
        },
        children: (0, _jsxRuntime.jsx)(Text, {
          children: "Disable"
        })
      }), (0, _jsxRuntime.jsx)(TouchableOpacity, {
        testID: "popup-dismiss",
        onPress: onDismiss,
        children: (0, _jsxRuntime.jsx)(Text, {
          children: "Dismiss"
        })
      })]
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _RevisionOrchestrator = _interopRequireDefault(require("../../../src/screens/VocabularyRevision/RevisionOrchestrator"));
var RevisionSettingsHook = _interopRequireWildcard(require("../../../src/hooks/useRevisionSettings"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _expoRouter = require("expo-router");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('RevisionOrchestrator', function () {
  var mockUseRevisionSettings;
  var createWordsData = function createWordsData(wordCount) {
    var levels = ['1', '2', '3', '4', '5', '6', 'bonus'];
    var modes = ['classic', 'fast'];
    var result = {};
    var totalCreated = 0;
    var _loop = function _loop(level) {
      var _loop2 = function _loop2(mode) {
          if (totalCreated >= wordCount) return 0;
          var wordsForThisSection = Math.min(wordCount - totalCreated, Math.ceil(wordCount / (levels.length * modes.length)));
          result[`vocabulary_${level}_${mode}`] = JSON.stringify({
            completedWords: {
              unit1: Array.from({
                length: wordsForThisSection
              }, function (_, i) {
                return `word_${level}_${mode}_${i}`;
              })
            }
          });
          totalCreated += wordsForThisSection;
          if (totalCreated >= wordCount) return 0;
        },
        _ret;
      for (var mode of modes) {
        _ret = _loop2(mode);
        if (_ret === 0) break;
      }
      if (totalCreated >= wordCount) return 1;
    };
    for (var level of levels) {
      if (_loop(level)) break;
    }
    return result;
  };
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
    mockUseRevisionSettings = {
      preferences: {
        isDisabled: false,
        nextRevisionAt: 50,
        questionsCount: 10,
        frequency: 50
      },
      disableRevisions: jest.fn().mockResolvedValue(true),
      resetToNextTarget: jest.fn().mockResolvedValue(true),
      updatePreferences: jest.fn().mockResolvedValue(true)
    };
    RevisionSettingsHook.useRevisionSettings.mockReturnValue(mockUseRevisionSettings);
    var defaultWordsData = createWordsData(3);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(defaultWordsData[key] || null);
    });
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  it('ne rend rien si les révisions sont désactivées', (0, _asyncToGenerator2.default)(function* () {
    mockUseRevisionSettings.preferences.isDisabled = true;
    RevisionSettingsHook.useRevisionSettings.mockReturnValue(mockUseRevisionSettings);
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      queryByTestId = _render.queryByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(2000);
    }));
    expect(queryByTestId('revision-popup')).toBeNull();
  }));
  it('ne montre pas la popup si le nombre de mots est inférieur au seuil', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      queryByTestId = _render2.queryByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(2000);
    }));
    expect(queryByTestId('revision-popup')).toBeNull();
  }));
  it('montre la popup quand le nombre de mots atteint le seuil', (0, _asyncToGenerator2.default)(function* () {
    var wordsData = createWordsData(60);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(wordsData[key] || null);
    });
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      getByTestId = _render3.getByTestId,
      getByText = _render3.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(_asyncStorage.default.getItem).toHaveBeenCalled();
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(2000);
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('revision-popup')).toBeTruthy();
    }, {
      timeout: 3000
    });
    expect(getByText('Words: 60')).toBeTruthy();
    expect(getByText('Questions: 10')).toBeTruthy();
  }));
  it('appelle resetToNextTarget et navigue quand "now" est choisi', (0, _asyncToGenerator2.default)(function* () {
    var wordsData = createWordsData(60);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(wordsData[key] || null);
    });
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {
        currentLevel: "A1"
      })),
      getByTestId = _render4.getByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(3000);
    }));
    var popup = getByTestId('revision-popup');
    expect(popup).toBeTruthy();
    var nowButton = getByTestId('popup-now');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(nowButton);
    }));
    expect(mockUseRevisionSettings.resetToNextTarget).toHaveBeenCalledWith(60);
    expect(_expoRouter.router.push).toHaveBeenCalledWith({
      pathname: "/tabs/vocabularyRevision",
      params: {
        level: "A1",
        questionsCount: 10,
        source: 'popup_trigger'
      }
    });
  }));
  it('appelle updatePreferences quand "later_50" est choisi', (0, _asyncToGenerator2.default)(function* () {
    var wordsData = createWordsData(60);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(wordsData[key] || null);
    });
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      getByTestId = _render5.getByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(3000);
    }));
    var popup = getByTestId('revision-popup');
    expect(popup).toBeTruthy();
    var laterButton = getByTestId('popup-later50');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(laterButton);
    }));
    expect(mockUseRevisionSettings.updatePreferences).toHaveBeenCalledWith({
      nextRevisionAt: 110
    });
  }));
  it('appelle disableRevisions quand "disable" est choisi', (0, _asyncToGenerator2.default)(function* () {
    var wordsData = createWordsData(60);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(wordsData[key] || null);
    });
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      getByTestId = _render6.getByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(3000);
    }));
    var popup = getByTestId('revision-popup');
    expect(popup).toBeTruthy();
    var disableButton = getByTestId('popup-disable');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(disableButton);
    }));
    expect(mockUseRevisionSettings.disableRevisions).toHaveBeenCalled();
  }));
  it('gère la fermeture (dismiss) en choisissant "later_50" par défaut', (0, _asyncToGenerator2.default)(function* () {
    var wordsData = createWordsData(60);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(wordsData[key] || null);
    });
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      getByTestId = _render7.getByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(3000);
    }));
    var popup = getByTestId('revision-popup');
    expect(popup).toBeTruthy();
    var dismissButton = getByTestId('popup-dismiss');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(dismissButton);
    }));
    expect(mockUseRevisionSettings.updatePreferences).toHaveBeenCalledWith({
      nextRevisionAt: 110
    });
  }));
  it('debug - vérifie les conditions de la popup', (0, _asyncToGenerator2.default)(function* () {
    var wordsData = createWordsData(120);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(wordsData[key] || null);
    });
    var getItemSpy = jest.spyOn(_asyncStorage.default, 'getItem');
    var TestComponent = function TestComponent() {
      var _React$useState = _react.default.useState({}),
        _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
        debugInfo = _React$useState2[0],
        setDebugInfo = _React$useState2[1];
      var _RevisionSettingsHook = RevisionSettingsHook.useRevisionSettings(),
        preferences = _RevisionSettingsHook.preferences;
      _react.default.useEffect(function () {
        var countWords = function () {
          var _ref21 = (0, _asyncToGenerator2.default)(function* () {
            var total = 0;
            var levels = ['1', '2', '3', '4', '5', '6', 'bonus'];
            var modes = ['classic', 'fast'];
            for (var level of levels) {
              for (var mode of modes) {
                var stored = yield _asyncStorage.default.getItem(`vocabulary_${level}_${mode}`);
                if (stored) {
                  var data = JSON.parse(stored);
                  var completedWords = data.completedWords || {};
                  total += Object.values(completedWords).reduce(function (acc, words) {
                    if (Array.isArray(words)) {
                      return acc + words.length;
                    }
                    return acc;
                  }, 0);
                }
              }
            }
            setDebugInfo({
              totalWords: total,
              isDisabled: preferences.isDisabled,
              nextRevisionAt: preferences.nextRevisionAt,
              shouldShow: !preferences.isDisabled && total >= preferences.nextRevisionAt && total > 0
            });
          });
          return function countWords() {
            return _ref21.apply(this, arguments);
          };
        }();
        countWords();
      }, [preferences]);
      return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
        testID: "debug-info",
        children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "debug-total",
          children: debugInfo.totalWords
        }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "debug-disabled",
          children: String(debugInfo.isDisabled)
        }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "debug-threshold",
          children: debugInfo.nextRevisionAt
        }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "debug-should-show",
          children: String(debugInfo.shouldShow)
        })]
      });
    };
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestComponent, {})),
      getByTestId = _render8.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getItemSpy).toHaveBeenCalled();
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(1000);
    }));
    var totalWords = getByTestId('debug-total').children[0];
    var isDisabled = getByTestId('debug-disabled').children[0];
    var threshold = getByTestId('debug-threshold').children[0];
    var shouldShow = getByTestId('debug-should-show').children[0];
    console.log('Debug info:', {
      totalWords: totalWords,
      isDisabled: isDisabled,
      threshold: threshold,
      shouldShow: shouldShow
    });
    expect(totalWords).toBe('120');
    expect(isDisabled).toBe('false');
    expect(threshold).toBe('100');
    expect(shouldShow).toBe('true');
  }));
  it('compte correctement les mots depuis AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
    var wordsData = createWordsData(85);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(wordsData[key] || null);
    });
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      queryByTestId = _render9.queryByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(2000);
    }));
    expect(queryByTestId('revision-popup')).toBeNull();
    var expectedCalls = ['1', '2', '3', '4', '5', '6', 'bonus'].flatMap(function (level) {
      return ['classic', 'fast'].map(function (mode) {
        return `vocabulary_${level}_${mode}`;
      });
    });
    expectedCalls.forEach(function (key) {
      expect(_asyncStorage.default.getItem).toHaveBeenCalledWith(key);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJyb3V0ZXIiLCJwdXNoIiwiamVzdCIsImZuIiwiZ2V0SXRlbSIsIlRoZW1lQ29udGV4dCIsIkNvbnN1bWVyIiwiX3JlZiIsImNoaWxkcmVuIiwiY29sb3JzIiwic3VyZmFjZSIsInRleHQiLCJ0ZXh0U2Vjb25kYXJ5IiwicHJpbWFyeSIsImFjY2VudCIsIndhcm5pbmciLCJQcm92aWRlciIsIl9yZWYyIiwidmFsdWUiLCJ1c2VUaGVtZSIsIlJlYWN0IiwicmVxdWlyZSIsIl9yZXF1aXJlIiwiVmlldyIsIlRleHQiLCJUb3VjaGFibGVPcGFjaXR5IiwiX3JlZjMiLCJ2aXNpYmxlIiwib25DaG9pY2UiLCJvbkRpc21pc3MiLCJ0b3RhbFdvcmRzTGVhcm5lZCIsInF1ZXN0aW9uc0NvdW50IiwiX2pzeFJ1bnRpbWUiLCJqc3hzIiwidGVzdElEIiwianN4Iiwib25QcmVzcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfc2xpY2VkVG9BcnJheTIiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfcmVhY3ROYXRpdmUyIiwiX1JldmlzaW9uT3JjaGVzdHJhdG9yIiwiUmV2aXNpb25TZXR0aW5nc0hvb2siLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9hc3luY1N0b3JhZ2UiLCJfZXhwb1JvdXRlciIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX3JlcXVpcmUyIiwiZGVzY3JpYmUiLCJtb2NrVXNlUmV2aXNpb25TZXR0aW5ncyIsImNyZWF0ZVdvcmRzRGF0YSIsIndvcmRDb3VudCIsImxldmVscyIsIm1vZGVzIiwicmVzdWx0IiwidG90YWxDcmVhdGVkIiwiX2xvb3AiLCJsZXZlbCIsIl9sb29wMiIsIm1vZGUiLCJ3b3Jkc0ZvclRoaXNTZWN0aW9uIiwiTWF0aCIsIm1pbiIsImNlaWwiLCJsZW5ndGgiLCJKU09OIiwic3RyaW5naWZ5IiwiY29tcGxldGVkV29yZHMiLCJ1bml0MSIsIkFycmF5IiwiZnJvbSIsIl8iLCJfcmV0IiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJ1c2VGYWtlVGltZXJzIiwicHJlZmVyZW5jZXMiLCJpc0Rpc2FibGVkIiwibmV4dFJldmlzaW9uQXQiLCJmcmVxdWVuY3kiLCJkaXNhYmxlUmV2aXNpb25zIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJyZXNldFRvTmV4dFRhcmdldCIsInVwZGF0ZVByZWZlcmVuY2VzIiwidXNlUmV2aXNpb25TZXR0aW5ncyIsIm1vY2tSZXR1cm5WYWx1ZSIsImRlZmF1bHRXb3Jkc0RhdGEiLCJBc3luY1N0b3JhZ2UiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJrZXkiLCJQcm9taXNlIiwicmVzb2x2ZSIsImFmdGVyRWFjaCIsInVzZVJlYWxUaW1lcnMiLCJpdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJxdWVyeUJ5VGVzdElkIiwiYWN0IiwiYWR2YW5jZVRpbWVyc0J5VGltZSIsImV4cGVjdCIsInRvQmVOdWxsIiwiX3JlbmRlcjIiLCJ3b3Jkc0RhdGEiLCJfcmVuZGVyMyIsImdldEJ5VGVzdElkIiwiZ2V0QnlUZXh0Iiwid2FpdEZvciIsInRvSGF2ZUJlZW5DYWxsZWQiLCJ0b0JlVHJ1dGh5IiwidGltZW91dCIsIl9yZW5kZXI0IiwiY3VycmVudExldmVsIiwicG9wdXAiLCJub3dCdXR0b24iLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwicGF0aG5hbWUiLCJwYXJhbXMiLCJzb3VyY2UiLCJfcmVuZGVyNSIsImxhdGVyQnV0dG9uIiwiX3JlbmRlcjYiLCJkaXNhYmxlQnV0dG9uIiwiX3JlbmRlcjciLCJkaXNtaXNzQnV0dG9uIiwiZ2V0SXRlbVNweSIsInNweU9uIiwiVGVzdENvbXBvbmVudCIsIl9SZWFjdCR1c2VTdGF0ZSIsInVzZVN0YXRlIiwiX1JlYWN0JHVzZVN0YXRlMiIsImRlYnVnSW5mbyIsInNldERlYnVnSW5mbyIsIl9SZXZpc2lvblNldHRpbmdzSG9vayIsInVzZUVmZmVjdCIsImNvdW50V29yZHMiLCJfcmVmMjEiLCJ0b3RhbCIsInN0b3JlZCIsImRhdGEiLCJwYXJzZSIsInZhbHVlcyIsInJlZHVjZSIsImFjYyIsIndvcmRzIiwiaXNBcnJheSIsInRvdGFsV29yZHMiLCJzaG91bGRTaG93IiwiYXBwbHkiLCJhcmd1bWVudHMiLCJTdHJpbmciLCJfcmVuZGVyOCIsInRocmVzaG9sZCIsImNvbnNvbGUiLCJsb2ciLCJ0b0JlIiwiX3JlbmRlcjkiLCJleHBlY3RlZENhbGxzIiwiZmxhdE1hcCIsIm1hcCIsImZvckVhY2giXSwic291cmNlcyI6WyJSZXZpc2lvbk9yY2hlc3RyYXRvci50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIHdhaXRGb3IsIGZpcmVFdmVudCwgYWN0IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgVmlldywgVGV4dCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgUmV2aXNpb25PcmNoZXN0cmF0b3IgZnJvbSAnLi4vLi4vLi4vc3JjL3NjcmVlbnMvVm9jYWJ1bGFyeVJldmlzaW9uL1JldmlzaW9uT3JjaGVzdHJhdG9yJztcbmltcG9ydCAqIGFzIFJldmlzaW9uU2V0dGluZ3NIb29rIGZyb20gJy4uLy4uLy4uL3NyYy9ob29rcy91c2VSZXZpc2lvblNldHRpbmdzJztcbmltcG9ydCBBc3luY1N0b3JhZ2UgZnJvbSAnQHJlYWN0LW5hdGl2ZS1hc3luYy1zdG9yYWdlL2FzeW5jLXN0b3JhZ2UnO1xuaW1wb3J0IHsgcm91dGVyIH0gZnJvbSAnZXhwby1yb3V0ZXInO1xuXG4vLyBNb2NraW5nIGRlcGVuZGVuY2llc1xuamVzdC5tb2NrKCcuLi8uLi8uLi9zcmMvaG9va3MvdXNlUmV2aXNpb25TZXR0aW5ncycpO1xuamVzdC5tb2NrKCdleHBvLXJvdXRlcicsICgpID0+ICh7XG4gIHJvdXRlcjoge1xuICAgIHB1c2g6IGplc3QuZm4oKSxcbiAgfSxcbn0pKTtcbmplc3QubW9jaygnQHJlYWN0LW5hdGl2ZS1hc3luYy1zdG9yYWdlL2FzeW5jLXN0b3JhZ2UnLCAoKSA9PiAoe1xuICBnZXRJdGVtOiBqZXN0LmZuKCksXG59KSk7XG5cbi8vIE1vY2sgZHUgVGhlbWVDb250ZXh0XG5qZXN0Lm1vY2soJy4uLy4uLy4uL3NyYy9jb250ZXh0cy9UaGVtZUNvbnRleHQnLCAoKSA9PiAoe1xuICBUaGVtZUNvbnRleHQ6IHtcbiAgICBDb25zdW1lcjogKHsgY2hpbGRyZW4gfSkgPT4gY2hpbGRyZW4oe1xuICAgICAgY29sb3JzOiB7XG4gICAgICAgIHN1cmZhY2U6IFwiI0ZGRkZGRlwiLFxuICAgICAgICB0ZXh0OiBcIiMxRjI5MzdcIixcbiAgICAgICAgdGV4dFNlY29uZGFyeTogXCIjNkI3MjgwXCIsXG4gICAgICAgIHByaW1hcnk6IFwiIzEwQjk4MVwiLFxuICAgICAgICBhY2NlbnQ6IFwiIzNCODJGNlwiLFxuICAgICAgICB3YXJuaW5nOiBcIiNGNTlFMEJcIixcbiAgICAgIH1cbiAgICB9KSxcbiAgICBQcm92aWRlcjogKHsgY2hpbGRyZW4sIHZhbHVlIH0pID0+IGNoaWxkcmVuLFxuICB9LFxuICB1c2VUaGVtZTogKCkgPT4gKHtcbiAgICBjb2xvcnM6IHtcbiAgICAgIHN1cmZhY2U6IFwiI0ZGRkZGRlwiLFxuICAgICAgdGV4dDogXCIjMUYyOTM3XCIsXG4gICAgICB0ZXh0U2Vjb25kYXJ5OiBcIiM2QjcyODBcIixcbiAgICAgIHByaW1hcnk6IFwiIzEwQjk4MVwiLFxuICAgICAgYWNjZW50OiBcIiMzQjgyRjZcIixcbiAgICAgIHdhcm5pbmc6IFwiI0Y1OUUwQlwiLFxuICAgIH1cbiAgfSksXG59KSk7XG5cbi8vIE1vY2sgc2ltcGxlIGRlIFJldmlzaW9uUG9wdXAgcG91ciDDqXZpdGVyIGxlcyBhbmltYXRpb25zXG5qZXN0Lm1vY2soJy4uLy4uLy4uL3NyYy9zY3JlZW5zL0Rhc2hib2FyZC9jb21wb25lbnRzL3BvcHVwL1JldmlzaW9uUG9wdXAnLCAoKSA9PiB7XG4gIGNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbiAgY29uc3QgeyBWaWV3LCBUZXh0LCBUb3VjaGFibGVPcGFjaXR5IH0gPSByZXF1aXJlKCdyZWFjdC1uYXRpdmUnKTtcbiAgXG4gIHJldHVybiAoeyB2aXNpYmxlLCBvbkNob2ljZSwgb25EaXNtaXNzLCB0b3RhbFdvcmRzTGVhcm5lZCwgcXVlc3Rpb25zQ291bnQgfSkgPT4ge1xuICAgIGlmICghdmlzaWJsZSkgcmV0dXJuIG51bGw7XG4gICAgXG4gICAgcmV0dXJuIChcbiAgICAgIDxWaWV3IHRlc3RJRD1cInJldmlzaW9uLXBvcHVwXCI+XG4gICAgICAgIDxUZXh0IHRlc3RJRD1cInBvcHVwLXdvcmRzXCI+V29yZHM6IHt0b3RhbFdvcmRzTGVhcm5lZH08L1RleHQ+XG4gICAgICAgIDxUZXh0IHRlc3RJRD1cInBvcHVwLXF1ZXN0aW9uc1wiPlF1ZXN0aW9uczoge3F1ZXN0aW9uc0NvdW50fTwvVGV4dD5cbiAgICAgICAgPFRvdWNoYWJsZU9wYWNpdHkgdGVzdElEPVwicG9wdXAtbm93XCIgb25QcmVzcz17KCkgPT4gb25DaG9pY2UoJ25vdycpfT5cbiAgICAgICAgICA8VGV4dD5Ob3c8L1RleHQ+XG4gICAgICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cbiAgICAgICAgPFRvdWNoYWJsZU9wYWNpdHkgdGVzdElEPVwicG9wdXAtbGF0ZXI1MFwiIG9uUHJlc3M9eygpID0+IG9uQ2hvaWNlKCdsYXRlcl81MCcpfT5cbiAgICAgICAgICA8VGV4dD5MYXRlciA1MDwvVGV4dD5cbiAgICAgICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxuICAgICAgICA8VG91Y2hhYmxlT3BhY2l0eSB0ZXN0SUQ9XCJwb3B1cC1kaXNhYmxlXCIgb25QcmVzcz17KCkgPT4gb25DaG9pY2UoJ2Rpc2FibGUnKX0+XG4gICAgICAgICAgPFRleHQ+RGlzYWJsZTwvVGV4dD5cbiAgICAgICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxuICAgICAgICA8VG91Y2hhYmxlT3BhY2l0eSB0ZXN0SUQ9XCJwb3B1cC1kaXNtaXNzXCIgb25QcmVzcz17b25EaXNtaXNzfT5cbiAgICAgICAgICA8VGV4dD5EaXNtaXNzPC9UZXh0PlxuICAgICAgICA8L1RvdWNoYWJsZU9wYWNpdHk+XG4gICAgICA8L1ZpZXc+XG4gICAgKTtcbiAgfTtcbn0pO1xuXG5kZXNjcmliZSgnUmV2aXNpb25PcmNoZXN0cmF0b3InLCAoKSA9PiB7XG4gIGxldCBtb2NrVXNlUmV2aXNpb25TZXR0aW5ncztcblxuICAvLyBIZWxwZXIgcG91ciBjcsOpZXIgZGVzIGRvbm7DqWVzIGRlIG1vdHMgYXBwcmlzXG4gIGNvbnN0IGNyZWF0ZVdvcmRzRGF0YSA9ICh3b3JkQ291bnQpID0+IHtcbiAgICBjb25zdCBsZXZlbHMgPSBbJzEnLCAnMicsICczJywgJzQnLCAnNScsICc2JywgJ2JvbnVzJ107XG4gICAgY29uc3QgbW9kZXMgPSBbJ2NsYXNzaWMnLCAnZmFzdCddO1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIFxuICAgIGxldCB0b3RhbENyZWF0ZWQgPSAwO1xuICAgIGZvciAoY29uc3QgbGV2ZWwgb2YgbGV2ZWxzKSB7XG4gICAgICBmb3IgKGNvbnN0IG1vZGUgb2YgbW9kZXMpIHtcbiAgICAgICAgaWYgKHRvdGFsQ3JlYXRlZCA+PSB3b3JkQ291bnQpIGJyZWFrO1xuICAgICAgICBcbiAgICAgICAgY29uc3Qgd29yZHNGb3JUaGlzU2VjdGlvbiA9IE1hdGgubWluKHdvcmRDb3VudCAtIHRvdGFsQ3JlYXRlZCwgTWF0aC5jZWlsKHdvcmRDb3VudCAvIChsZXZlbHMubGVuZ3RoICogbW9kZXMubGVuZ3RoKSkpO1xuICAgICAgICByZXN1bHRbYHZvY2FidWxhcnlfJHtsZXZlbH1fJHttb2RlfWBdID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIGNvbXBsZXRlZFdvcmRzOiB7XG4gICAgICAgICAgICB1bml0MTogQXJyYXkuZnJvbSh7IGxlbmd0aDogd29yZHNGb3JUaGlzU2VjdGlvbiB9LCAoXywgaSkgPT4gYHdvcmRfJHtsZXZlbH1fJHttb2RlfV8ke2l9YClcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0b3RhbENyZWF0ZWQgKz0gd29yZHNGb3JUaGlzU2VjdGlvbjtcbiAgICAgICAgXG4gICAgICAgIGlmICh0b3RhbENyZWF0ZWQgPj0gd29yZENvdW50KSBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmICh0b3RhbENyZWF0ZWQgPj0gd29yZENvdW50KSBicmVhaztcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAvLyBSw6lpbml0aWFsaXNlciB0b3VzIGxlcyBtb2NrcyBhdmFudCBjaGFxdWUgdGVzdFxuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICAgIGplc3QudXNlRmFrZVRpbWVycygpO1xuXG4gICAgLy8gTW9jayBwYXIgZMOpZmF1dCBwb3VyIGxlIGhvb2sgdXNlUmV2aXNpb25TZXR0aW5nc1xuICAgIG1vY2tVc2VSZXZpc2lvblNldHRpbmdzID0ge1xuICAgICAgcHJlZmVyZW5jZXM6IHtcbiAgICAgICAgaXNEaXNhYmxlZDogZmFsc2UsXG4gICAgICAgIG5leHRSZXZpc2lvbkF0OiA1MCwgLy8g4pyFIEFsaWduw6kgYXZlYyBsZSBob29rIHLDqWVsICjDqXRhaXQgMTAwKVxuICAgICAgICBxdWVzdGlvbnNDb3VudDogMTAsXG4gICAgICAgIGZyZXF1ZW5jeTogNTAsXG4gICAgICB9LFxuICAgICAgZGlzYWJsZVJldmlzaW9uczogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpLFxuICAgICAgcmVzZXRUb05leHRUYXJnZXQ6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh0cnVlKSxcbiAgICAgIHVwZGF0ZVByZWZlcmVuY2VzOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSksXG4gICAgfTtcbiAgICBSZXZpc2lvblNldHRpbmdzSG9vay51c2VSZXZpc2lvblNldHRpbmdzLm1vY2tSZXR1cm5WYWx1ZShtb2NrVXNlUmV2aXNpb25TZXR0aW5ncyk7XG5cbiAgICAvLyBNb2NrIHBhciBkw6lmYXV0IHBvdXIgQXN5bmNTdG9yYWdlIChwZXUgZGUgbW90cylcbiAgICBjb25zdCBkZWZhdWx0V29yZHNEYXRhID0gY3JlYXRlV29yZHNEYXRhKDMpO1xuICAgIEFzeW5jU3RvcmFnZS5nZXRJdGVtLm1vY2tJbXBsZW1lbnRhdGlvbigoa2V5KSA9PiB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGRlZmF1bHRXb3Jkc0RhdGFba2V5XSB8fCBudWxsKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LnVzZVJlYWxUaW1lcnMoKTtcbiAgfSk7XG5cbiAgaXQoJ25lIHJlbmQgcmllbiBzaSBsZXMgcsOpdmlzaW9ucyBzb250IGTDqXNhY3RpdsOpZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgbW9ja1VzZVJldmlzaW9uU2V0dGluZ3MucHJlZmVyZW5jZXMuaXNEaXNhYmxlZCA9IHRydWU7XG4gICAgUmV2aXNpb25TZXR0aW5nc0hvb2sudXNlUmV2aXNpb25TZXR0aW5ncy5tb2NrUmV0dXJuVmFsdWUobW9ja1VzZVJldmlzaW9uU2V0dGluZ3MpO1xuXG4gICAgY29uc3QgeyBxdWVyeUJ5VGVzdElkIH0gPSByZW5kZXIoPFJldmlzaW9uT3JjaGVzdHJhdG9yIC8+KTtcbiAgICBcbiAgICAvLyBBdHRlbmRyZSBxdWUgbGVzIGRvbm7DqWVzIHNvaWVudCBjaGFyZ8OpZXNcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgamVzdC5hZHZhbmNlVGltZXJzQnlUaW1lKDIwMDApO1xuICAgIH0pO1xuICAgIFxuICAgIGV4cGVjdChxdWVyeUJ5VGVzdElkKCdyZXZpc2lvbi1wb3B1cCcpKS50b0JlTnVsbCgpO1xuICB9KTtcblxuICBpdCgnbmUgbW9udHJlIHBhcyBsYSBwb3B1cCBzaSBsZSBub21icmUgZGUgbW90cyBlc3QgaW5mw6lyaWV1ciBhdSBzZXVpbCcsIGFzeW5jICgpID0+IHtcbiAgICAvLyBMZSBtb2NrIHBhciBkw6lmYXV0IGEgMyBtb3RzLCBsZSBzZXVpbCBlc3QgbWFpbnRlbmFudCDDoCA1MFxuICAgIGNvbnN0IHsgcXVlcnlCeVRlc3RJZCB9ID0gcmVuZGVyKDxSZXZpc2lvbk9yY2hlc3RyYXRvciAvPik7XG4gICAgXG4gICAgLy8gQXR0ZW5kcmUgcXVlIGxlcyBkb25uw6llcyBzb2llbnQgY2hhcmfDqWVzIGV0IGxlIHRpbWVyIHMnZXjDqWN1dGVcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgamVzdC5hZHZhbmNlVGltZXJzQnlUaW1lKDIwMDApO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KHF1ZXJ5QnlUZXN0SWQoJ3JldmlzaW9uLXBvcHVwJykpLnRvQmVOdWxsKCk7XG4gIH0pO1xuXG4gIGl0KCdtb250cmUgbGEgcG9wdXAgcXVhbmQgbGUgbm9tYnJlIGRlIG1vdHMgYXR0ZWludCBsZSBzZXVpbCcsIGFzeW5jICgpID0+IHtcbiAgICAvLyBDb25maWd1cmVyIEFzeW5jU3RvcmFnZSBwb3VyIHJldG91cm5lciA2MCBtb3RzICjiiaUgNTApXG4gICAgY29uc3Qgd29yZHNEYXRhID0gY3JlYXRlV29yZHNEYXRhKDYwKTtcbiAgICBBc3luY1N0b3JhZ2UuZ2V0SXRlbS5tb2NrSW1wbGVtZW50YXRpb24oKGtleSkgPT4ge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh3b3Jkc0RhdGFba2V5XSB8fCBudWxsKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQsIGdldEJ5VGV4dCB9ID0gcmVuZGVyKDxSZXZpc2lvbk9yY2hlc3RyYXRvciAvPik7XG4gICAgXG4gICAgLy8gQXR0ZW5kcmUgcXVlIGxlcyBkb25uw6llcyBBc3luY1N0b3JhZ2Ugc29pZW50IGNoYXJnw6llc1xuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KEFzeW5jU3RvcmFnZS5nZXRJdGVtKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICAvLyBBdHRlbmRyZSBxdWUgbGVzIGRvbm7DqWVzIHNvaWVudCBjaGFyZ8OpZXMgZXQgbGUgdGltZXIgcydleMOpY3V0ZVxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoMjAwMCk7IC8vIETDqXBhc3NlIGxlIGTDqWxhaSBkZSAxMDAwbXMgZHUgc2V0VGltZW91dFxuICAgIH0pO1xuXG4gICAgLy8gQXR0ZW5kcmUgdW4gcGV1IHBsdXMgcG91ciBxdWUgbGUgc3RhdGUgc2UgbWV0dGUgw6Agam91clxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KGdldEJ5VGVzdElkKCdyZXZpc2lvbi1wb3B1cCcpKS50b0JlVHJ1dGh5KCk7XG4gICAgfSwgeyB0aW1lb3V0OiAzMDAwIH0pO1xuXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnV29yZHM6IDYwJykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdRdWVzdGlvbnM6IDEwJykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ2FwcGVsbGUgcmVzZXRUb05leHRUYXJnZXQgZXQgbmF2aWd1ZSBxdWFuZCBcIm5vd1wiIGVzdCBjaG9pc2knLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gQ29uZmlndXJlciBBc3luY1N0b3JhZ2UgcG91ciByZXRvdXJuZXIgNjAgbW90c1xuICAgIGNvbnN0IHdvcmRzRGF0YSA9IGNyZWF0ZVdvcmRzRGF0YSg2MCk7XG4gICAgQXN5bmNTdG9yYWdlLmdldEl0ZW0ubW9ja0ltcGxlbWVudGF0aW9uKChrZXkpID0+IHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUod29yZHNEYXRhW2tleV0gfHwgbnVsbCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoPFJldmlzaW9uT3JjaGVzdHJhdG9yIGN1cnJlbnRMZXZlbD1cIkExXCIgLz4pO1xuICAgIFxuICAgIC8vIEF0dGVuZHJlIHF1ZSBsYSBwb3B1cCBhcHBhcmFpc3NlIC0gYXBwcm9jaGUgcGx1cyBzaW1wbGVcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgamVzdC5hZHZhbmNlVGltZXJzQnlUaW1lKDMwMDApOyAvLyBBdHRlbmRyZSBwbHVzIGxvbmd0ZW1wc1xuICAgIH0pO1xuXG4gICAgLy8gVsOpcmlmaWVyIHF1ZSBsYSBwb3B1cCBlc3QgdmlzaWJsZVxuICAgIGNvbnN0IHBvcHVwID0gZ2V0QnlUZXN0SWQoJ3JldmlzaW9uLXBvcHVwJyk7XG4gICAgZXhwZWN0KHBvcHVwKS50b0JlVHJ1dGh5KCk7XG5cbiAgICBjb25zdCBub3dCdXR0b24gPSBnZXRCeVRlc3RJZCgncG9wdXAtbm93Jyk7XG4gICAgXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhub3dCdXR0b24pO1xuICAgIH0pO1xuXG4gICAgLy8gVsOpcmlmaWVyIGxlcyBhcHBlbHNcbiAgICBleHBlY3QobW9ja1VzZVJldmlzaW9uU2V0dGluZ3MucmVzZXRUb05leHRUYXJnZXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKDYwKTtcbiAgICBleHBlY3Qocm91dGVyLnB1c2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgIHBhdGhuYW1lOiBcIi90YWJzL3ZvY2FidWxhcnlSZXZpc2lvblwiLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIGxldmVsOiBcIkExXCIsXG4gICAgICAgIHF1ZXN0aW9uc0NvdW50OiAxMCxcbiAgICAgICAgc291cmNlOiAncG9wdXBfdHJpZ2dlcicsXG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcblxuICBpdCgnYXBwZWxsZSB1cGRhdGVQcmVmZXJlbmNlcyBxdWFuZCBcImxhdGVyXzUwXCIgZXN0IGNob2lzaScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB3b3Jkc0RhdGEgPSBjcmVhdGVXb3Jkc0RhdGEoNjApO1xuICAgIEFzeW5jU3RvcmFnZS5nZXRJdGVtLm1vY2tJbXBsZW1lbnRhdGlvbigoa2V5KSA9PiB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHdvcmRzRGF0YVtrZXldIHx8IG51bGwpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxSZXZpc2lvbk9yY2hlc3RyYXRvciAvPik7XG4gICAgXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSgzMDAwKTtcbiAgICB9KTtcblxuICAgIC8vIFbDqXJpZmllciBxdWUgbGEgcG9wdXAgZXN0IHZpc2libGVcbiAgICBjb25zdCBwb3B1cCA9IGdldEJ5VGVzdElkKCdyZXZpc2lvbi1wb3B1cCcpO1xuICAgIGV4cGVjdChwb3B1cCkudG9CZVRydXRoeSgpO1xuXG4gICAgY29uc3QgbGF0ZXJCdXR0b24gPSBnZXRCeVRlc3RJZCgncG9wdXAtbGF0ZXI1MCcpO1xuICAgIFxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBmaXJlRXZlbnQucHJlc3MobGF0ZXJCdXR0b24pO1xuICAgIH0pO1xuXG4gICAgLy8gVsOpcmlmaWVyIGwnYXBwZWwgLSA2MCBtb3RzICsgNTAgPSAxMTBcbiAgICBleHBlY3QobW9ja1VzZVJldmlzaW9uU2V0dGluZ3MudXBkYXRlUHJlZmVyZW5jZXMpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHsgXG4gICAgICBuZXh0UmV2aXNpb25BdDogMTEwIFxuICAgIH0pO1xuICB9KTtcblxuICBpdCgnYXBwZWxsZSBkaXNhYmxlUmV2aXNpb25zIHF1YW5kIFwiZGlzYWJsZVwiIGVzdCBjaG9pc2knLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgd29yZHNEYXRhID0gY3JlYXRlV29yZHNEYXRhKDYwKTtcbiAgICBBc3luY1N0b3JhZ2UuZ2V0SXRlbS5tb2NrSW1wbGVtZW50YXRpb24oKGtleSkgPT4ge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh3b3Jkc0RhdGFba2V5XSB8fCBudWxsKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcig8UmV2aXNpb25PcmNoZXN0cmF0b3IgLz4pO1xuICAgIFxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoMzAwMCk7XG4gICAgfSk7XG5cbiAgICAvLyBWw6lyaWZpZXIgcXVlIGxhIHBvcHVwIGVzdCB2aXNpYmxlXG4gICAgY29uc3QgcG9wdXAgPSBnZXRCeVRlc3RJZCgncmV2aXNpb24tcG9wdXAnKTtcbiAgICBleHBlY3QocG9wdXApLnRvQmVUcnV0aHkoKTtcblxuICAgIGNvbnN0IGRpc2FibGVCdXR0b24gPSBnZXRCeVRlc3RJZCgncG9wdXAtZGlzYWJsZScpO1xuICAgIFxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBmaXJlRXZlbnQucHJlc3MoZGlzYWJsZUJ1dHRvbik7XG4gICAgfSk7XG5cbiAgICAvLyBWw6lyaWZpZXIgbCdhcHBlbFxuICAgIGV4cGVjdChtb2NrVXNlUmV2aXNpb25TZXR0aW5ncy5kaXNhYmxlUmV2aXNpb25zKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xuXG4gIGl0KCdnw6hyZSBsYSBmZXJtZXR1cmUgKGRpc21pc3MpIGVuIGNob2lzaXNzYW50IFwibGF0ZXJfNTBcIiBwYXIgZMOpZmF1dCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB3b3Jkc0RhdGEgPSBjcmVhdGVXb3Jkc0RhdGEoNjApO1xuICAgIEFzeW5jU3RvcmFnZS5nZXRJdGVtLm1vY2tJbXBsZW1lbnRhdGlvbigoa2V5KSA9PiB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHdvcmRzRGF0YVtrZXldIHx8IG51bGwpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxSZXZpc2lvbk9yY2hlc3RyYXRvciAvPik7XG4gICAgXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSgzMDAwKTtcbiAgICB9KTtcblxuICAgIC8vIFbDqXJpZmllciBxdWUgbGEgcG9wdXAgZXN0IHZpc2libGVcbiAgICBjb25zdCBwb3B1cCA9IGdldEJ5VGVzdElkKCdyZXZpc2lvbi1wb3B1cCcpO1xuICAgIGV4cGVjdChwb3B1cCkudG9CZVRydXRoeSgpO1xuXG4gICAgY29uc3QgZGlzbWlzc0J1dHRvbiA9IGdldEJ5VGVzdElkKCdwb3B1cC1kaXNtaXNzJyk7XG4gICAgXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhkaXNtaXNzQnV0dG9uKTtcbiAgICB9KTtcblxuICAgIC8vIFbDqXJpZmllciBsJ2FwcGVsIC0gNjAgbW90cyArIDUwID0gMTEwXG4gICAgZXhwZWN0KG1vY2tVc2VSZXZpc2lvblNldHRpbmdzLnVwZGF0ZVByZWZlcmVuY2VzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7IFxuICAgICAgbmV4dFJldmlzaW9uQXQ6IDExMCBcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gVGVzdCBkZSBkZWJ1Z2dpbmcgcG91ciBjb21wcmVuZHJlIGxlIGNvbXBvcnRlbWVudFxuICBpdCgnZGVidWcgLSB2w6lyaWZpZSBsZXMgY29uZGl0aW9ucyBkZSBsYSBwb3B1cCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB3b3Jkc0RhdGEgPSBjcmVhdGVXb3Jkc0RhdGEoMTIwKTtcbiAgICBBc3luY1N0b3JhZ2UuZ2V0SXRlbS5tb2NrSW1wbGVtZW50YXRpb24oKGtleSkgPT4ge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh3b3Jkc0RhdGFba2V5XSB8fCBudWxsKTtcbiAgICB9KTtcblxuICAgIC8vIEVzcGlvbm5lciBsZXMgYXBwZWxzIEFzeW5jU3RvcmFnZVxuICAgIGNvbnN0IGdldEl0ZW1TcHkgPSBqZXN0LnNweU9uKEFzeW5jU3RvcmFnZSwgJ2dldEl0ZW0nKTtcblxuICAgIGNvbnN0IFRlc3RDb21wb25lbnQgPSAoKSA9PiB7XG4gICAgICBjb25zdCBbZGVidWdJbmZvLCBzZXREZWJ1Z0luZm9dID0gUmVhY3QudXNlU3RhdGUoe30pO1xuICAgICAgY29uc3QgeyBwcmVmZXJlbmNlcyB9ID0gUmV2aXNpb25TZXR0aW5nc0hvb2sudXNlUmV2aXNpb25TZXR0aW5ncygpO1xuICAgICAgXG4gICAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zdCBjb3VudFdvcmRzID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgIGxldCB0b3RhbCA9IDA7XG4gICAgICAgICAgY29uc3QgbGV2ZWxzID0gWycxJywgJzInLCAnMycsICc0JywgJzUnLCAnNicsICdib251cyddO1xuICAgICAgICAgIGNvbnN0IG1vZGVzID0gWydjbGFzc2ljJywgJ2Zhc3QnXTtcblxuICAgICAgICAgIGZvciAoY29uc3QgbGV2ZWwgb2YgbGV2ZWxzKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG1vZGUgb2YgbW9kZXMpIHtcbiAgICAgICAgICAgICAgY29uc3Qgc3RvcmVkID0gYXdhaXQgQXN5bmNTdG9yYWdlLmdldEl0ZW0oYHZvY2FidWxhcnlfJHtsZXZlbH1fJHttb2RlfWApO1xuICAgICAgICAgICAgICBpZiAoc3RvcmVkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2Uoc3RvcmVkKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjb21wbGV0ZWRXb3JkcyA9IGRhdGEuY29tcGxldGVkV29yZHMgfHwge307XG4gICAgICAgICAgICAgICAgdG90YWwgKz0gT2JqZWN0LnZhbHVlcyhjb21wbGV0ZWRXb3JkcykucmVkdWNlKChhY2MsIHdvcmRzKSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh3b3JkcykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjYyArIHdvcmRzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgc2V0RGVidWdJbmZvKHtcbiAgICAgICAgICAgIHRvdGFsV29yZHM6IHRvdGFsLFxuICAgICAgICAgICAgaXNEaXNhYmxlZDogcHJlZmVyZW5jZXMuaXNEaXNhYmxlZCxcbiAgICAgICAgICAgIG5leHRSZXZpc2lvbkF0OiBwcmVmZXJlbmNlcy5uZXh0UmV2aXNpb25BdCxcbiAgICAgICAgICAgIHNob3VsZFNob3c6ICFwcmVmZXJlbmNlcy5pc0Rpc2FibGVkICYmIHRvdGFsID49IHByZWZlcmVuY2VzLm5leHRSZXZpc2lvbkF0ICYmIHRvdGFsID4gMFxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvdW50V29yZHMoKTtcbiAgICAgIH0sIFtwcmVmZXJlbmNlc10pO1xuXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8VmlldyB0ZXN0SUQ9XCJkZWJ1Zy1pbmZvXCI+XG4gICAgICAgICAgPFRleHQgdGVzdElEPVwiZGVidWctdG90YWxcIj57ZGVidWdJbmZvLnRvdGFsV29yZHN9PC9UZXh0PlxuICAgICAgICAgIDxUZXh0IHRlc3RJRD1cImRlYnVnLWRpc2FibGVkXCI+e1N0cmluZyhkZWJ1Z0luZm8uaXNEaXNhYmxlZCl9PC9UZXh0PlxuICAgICAgICAgIDxUZXh0IHRlc3RJRD1cImRlYnVnLXRocmVzaG9sZFwiPntkZWJ1Z0luZm8ubmV4dFJldmlzaW9uQXR9PC9UZXh0PlxuICAgICAgICAgIDxUZXh0IHRlc3RJRD1cImRlYnVnLXNob3VsZC1zaG93XCI+e1N0cmluZyhkZWJ1Z0luZm8uc2hvdWxkU2hvdyl9PC9UZXh0PlxuICAgICAgICA8L1ZpZXc+XG4gICAgICApO1xuICAgIH07XG5cbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoPFRlc3RDb21wb25lbnQgLz4pO1xuICAgIFxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KGdldEl0ZW1TcHkpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoMTAwMCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCB0b3RhbFdvcmRzID0gZ2V0QnlUZXN0SWQoJ2RlYnVnLXRvdGFsJykuY2hpbGRyZW5bMF07XG4gICAgY29uc3QgaXNEaXNhYmxlZCA9IGdldEJ5VGVzdElkKCdkZWJ1Zy1kaXNhYmxlZCcpLmNoaWxkcmVuWzBdO1xuICAgIGNvbnN0IHRocmVzaG9sZCA9IGdldEJ5VGVzdElkKCdkZWJ1Zy10aHJlc2hvbGQnKS5jaGlsZHJlblswXTtcbiAgICBjb25zdCBzaG91bGRTaG93ID0gZ2V0QnlUZXN0SWQoJ2RlYnVnLXNob3VsZC1zaG93JykuY2hpbGRyZW5bMF07XG5cbiAgICBjb25zb2xlLmxvZygnRGVidWcgaW5mbzonLCB7XG4gICAgICB0b3RhbFdvcmRzLFxuICAgICAgaXNEaXNhYmxlZCxcbiAgICAgIHRocmVzaG9sZCxcbiAgICAgIHNob3VsZFNob3dcbiAgICB9KTtcblxuICAgIGV4cGVjdCh0b3RhbFdvcmRzKS50b0JlKCcxMjAnKTtcbiAgICBleHBlY3QoaXNEaXNhYmxlZCkudG9CZSgnZmFsc2UnKTtcbiAgICBleHBlY3QodGhyZXNob2xkKS50b0JlKCcxMDAnKTtcbiAgICBleHBlY3Qoc2hvdWxkU2hvdykudG9CZSgndHJ1ZScpO1xuICB9KTtcblxuICAvLyBUZXN0IHN1cHBsw6ltZW50YWlyZSBwb3VyIHbDqXJpZmllciBsZSBjb21wdGFnZSBkZXMgbW90c1xuICBpdCgnY29tcHRlIGNvcnJlY3RlbWVudCBsZXMgbW90cyBkZXB1aXMgQXN5bmNTdG9yYWdlJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHdvcmRzRGF0YSA9IGNyZWF0ZVdvcmRzRGF0YSg4NSk7XG4gICAgQXN5bmNTdG9yYWdlLmdldEl0ZW0ubW9ja0ltcGxlbWVudGF0aW9uKChrZXkpID0+IHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUod29yZHNEYXRhW2tleV0gfHwgbnVsbCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCB7IHF1ZXJ5QnlUZXN0SWQgfSA9IHJlbmRlcig8UmV2aXNpb25PcmNoZXN0cmF0b3IgLz4pO1xuICAgIFxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoMjAwMCk7XG4gICAgfSk7XG5cbiAgICAvLyBBdmVjIDg1IG1vdHMgZXQgdW4gc2V1aWwgw6AgMTAwLCBsYSBwb3B1cCBuZSBkb2l0IHBhcyBhcHBhcmHDrnRyZVxuICAgIGV4cGVjdChxdWVyeUJ5VGVzdElkKCdyZXZpc2lvbi1wb3B1cCcpKS50b0JlTnVsbCgpO1xuICAgIFxuICAgIC8vIFbDqXJpZmllciBxdWUgQXN5bmNTdG9yYWdlIGEgw6l0w6kgYXBwZWzDqSBwb3VyIHRvdXMgbGVzIG5pdmVhdXgvbW9kZXNcbiAgICBjb25zdCBleHBlY3RlZENhbGxzID0gWycxJywgJzInLCAnMycsICc0JywgJzUnLCAnNicsICdib251cyddXG4gICAgICAuZmxhdE1hcChsZXZlbCA9PiBbJ2NsYXNzaWMnLCAnZmFzdCddLm1hcChtb2RlID0+IGB2b2NhYnVsYXJ5XyR7bGV2ZWx9XyR7bW9kZX1gKSk7XG4gICAgXG4gICAgZXhwZWN0ZWRDYWxscy5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBleHBlY3QoQXN5bmNTdG9yYWdlLmdldEl0ZW0pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGtleSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQVNBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyx3Q0FBd0MsQ0FBQztBQUNuREQsV0FBQSxHQUFLQyxJQUFJLENBQUMsYUFBYSxFQUFFO0VBQUEsT0FBTztJQUM5QkMsTUFBTSxFQUFFO01BQ05DLElBQUksRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUM7SUFDaEI7RUFDRixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBQ0hMLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDJDQUEyQyxFQUFFO0VBQUEsT0FBTztJQUM1REssT0FBTyxFQUFFRixJQUFJLENBQUNDLEVBQUUsQ0FBQztFQUNuQixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBR0hMLFdBQUEsR0FBS0MsSUFBSSxDQUFDLG9DQUFvQyxFQUFFO0VBQUEsT0FBTztJQUNyRE0sWUFBWSxFQUFFO01BQ1pDLFFBQVEsRUFBRSxTQUFWQSxRQUFRQSxDQUFBQyxJQUFBO1FBQUEsSUFBS0MsUUFBUSxHQUFBRCxJQUFBLENBQVJDLFFBQVE7UUFBQSxPQUFPQSxRQUFRLENBQUM7VUFDbkNDLE1BQU0sRUFBRTtZQUNOQyxPQUFPLEVBQUUsU0FBUztZQUNsQkMsSUFBSSxFQUFFLFNBQVM7WUFDZkMsYUFBYSxFQUFFLFNBQVM7WUFDeEJDLE9BQU8sRUFBRSxTQUFTO1lBQ2xCQyxNQUFNLEVBQUUsU0FBUztZQUNqQkMsT0FBTyxFQUFFO1VBQ1g7UUFDRixDQUFDLENBQUM7TUFBQTtNQUNGQyxRQUFRLEVBQUUsU0FBVkEsUUFBUUEsQ0FBQUMsS0FBQTtRQUFBLElBQUtULFFBQVEsR0FBQVMsS0FBQSxDQUFSVCxRQUFRO1VBQUVVLEtBQUssR0FBQUQsS0FBQSxDQUFMQyxLQUFLO1FBQUEsT0FBT1YsUUFBUTtNQUFBO0lBQzdDLENBQUM7SUFDRFcsUUFBUSxFQUFFLFNBQVZBLFFBQVFBLENBQUE7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