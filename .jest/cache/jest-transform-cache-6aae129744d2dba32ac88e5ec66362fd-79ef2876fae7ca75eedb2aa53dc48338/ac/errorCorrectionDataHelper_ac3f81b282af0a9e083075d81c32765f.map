{"version":3,"names":["_A","_interopRequireDefault","require","_A2","_B","_B2","_C","_C2","cov_22yl3zlzyz","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","_coverageSchema","coverage","actualCoverage","getErrorsData","exports","level","dataMap","A1","errorCorrectionA1","A2","errorCorrectionA2","B1","errorCorrectionB1","B2","errorCorrectionB2","C1","errorCorrectionC1","C2","errorCorrectionC2","getLevelColor","colors","getLevelCharacteristics","characteristics","textLength","errorCount","errorTypes","difficulty","focus","getErrorCorrectionStats","stats","exerciseCount","totalQuestions","categoryCount","typeDistribution","full","identify","multiple_choice","categories","averageTextLength","totalErrorPositions","data","exercises","length","statistics","map","cat","id","count","textLengths","ex","text","Math","round","reduce","a","filter","errorPositions","total","error","getGlobalErrorCorrectionStats","levels","globalStats","totalExercises","totalCategories","byLevel","byType","implementedLevels","progression","forEach","levelStats","push","getExercisesByCategory","categoryId","_data$exercises","getExercisesByType","_data$exercises2","getExercisesByCategoryAndType","_data$exercises3","validateErrorCorrectionExercise","exercise","requiredFields","field","validTypes","includes","choices","Array","isArray","correctChoiceIndex","validateErrorCorrectionData","valid","results","invalidExercises","errors","index","Object","prototype","hasOwnProperty","call","validateStructure","getRandomErrorCorrectionExercise","arguments","filteredExercises","randomIndex","floor","random","assign","totalCount","getModeInfo","mode","modes","description","icon","color","getRecommendedExercises","completedExercises","performance","availableExercises","weakCategories","slice","recommendedExercises","categoryExercises","apply","_toConsumableArray2","default","getAvailableLevels"],"sources":["errorCorrectionDataHelper.js"],"sourcesContent":["// src/utils/errorCorrection/errorCorrectionDataHelper.js\r\n\r\n// Import des données d'error correction par niveau\r\n// Niveau A1\r\nimport errorCorrectionA1 from \"../../data/errorCorrection/A1\";\r\n\r\n// Niveau A2\r\nimport errorCorrectionA2 from \"../../data/errorCorrection/A2\";\r\n\r\n// Niveau B1\r\nimport errorCorrectionB1 from \"../../data/errorCorrection/B1\";\r\n\r\n// Niveau B2\r\nimport errorCorrectionB2 from \"../../data/errorCorrection/B2\";\r\n\r\n// Niveau C1\r\nimport errorCorrectionC1 from \"../../data/errorCorrection/C1\";\r\n\r\n// Niveau C2\r\nimport errorCorrectionC2 from \"../../data/errorCorrection/C2\";\r\n\r\n/**\r\n * Récupère les données d'exercices d'error correction en fonction du niveau\r\n * @param {string} level - Le niveau de langue (A1, A2, B1, B2, C1, C2)\r\n * @returns {Object} Les données d'exercices d'error correction pour le niveau spécifié\r\n */\r\nexport const getErrorsData = (level) => {\r\n  const dataMap = {\r\n    A1: errorCorrectionA1,\r\n    A2: errorCorrectionA2,\r\n    B1: errorCorrectionB1,\r\n    B2: errorCorrectionB2,\r\n    C1: errorCorrectionC1,\r\n    C2: errorCorrectionC2,\r\n  };\r\n\r\n  return dataMap[level] || errorCorrectionA1; // Fallback vers A1 si niveau non trouvé\r\n};\r\n\r\n/**\r\n * Récupère la couleur associée à un niveau de langue\r\n * @param {string} level - Le niveau de langue (A1, A2, B1, B2, C1, C2)\r\n * @returns {string} Code couleur hexadécimal pour le niveau\r\n */\r\nexport const getLevelColor = (level) => {\r\n  const colors = {\r\n    A1: \"#3b82f6\", // Bleu\r\n    A2: \"#8b5cf6\", // Violet\r\n    B1: \"#10b981\", // Vert\r\n    B2: \"#f59e0b\", // Orange\r\n    C1: \"#ef4444\", // Rouge\r\n    C2: \"#6366f1\", // Indigo\r\n  };\r\n  return colors[level] || \"#4361EE\"; // Couleur par défaut\r\n};\r\n\r\n/**\r\n * Récupère les caractéristiques d'un niveau d'error correction\r\n * @param {string} level - Le niveau de langue\r\n * @returns {Object} Caractéristiques du niveau (difficulté, types d'erreurs, etc.)\r\n */\r\nexport const getLevelCharacteristics = (level) => {\r\n  const characteristics = {\r\n    A1: {\r\n      name: \"Débutant\",\r\n      textLength: \"1-2 phrases (50-100 caractères)\",\r\n      errorCount: \"1-2 erreurs par exercice\",\r\n      errorTypes: [\"Basic grammar\", \"Simple vocabulary\", \"Word order\"],\r\n      difficulty: \"Très facile\",\r\n      focus: \"Erreurs évidentes, correction directe\",\r\n    },\r\n    A2: {\r\n      name: \"Élémentaire\",\r\n      textLength: \"2-3 phrases (80-150 caractères)\",\r\n      errorCount: \"2-3 erreurs par exercice\",\r\n      errorTypes: [\"Intermediate grammar\", \"Tense usage\", \"Prepositions\"],\r\n      difficulty: \"Facile\",\r\n      focus: \"Erreurs communes, inférences simples\",\r\n    },\r\n    B1: {\r\n      name: \"Intermédiaire\",\r\n      textLength: \"3-4 phrases (120-200 caractères)\",\r\n      errorCount: \"3-4 erreurs par exercice\",\r\n      errorTypes: [\"Complex tenses\", \"Passive voice\", \"Reported speech\"],\r\n      difficulty: \"Modéré\",\r\n      focus: \"Erreurs subtiles, analyse requise\",\r\n    },\r\n    B2: {\r\n      name: \"Intermédiaire avancé\",\r\n      textLength: \"4-5 phrases (150-250 caractères)\",\r\n      errorCount: \"4-5 erreurs par exercice\",\r\n      errorTypes: [\"Advanced conditionals\", \"Register\", \"Discourse markers\"],\r\n      difficulty: \"Difficile\",\r\n      focus: \"Nuances grammaticales et stylistiques\",\r\n    },\r\n    C1: {\r\n      name: \"Autonome\",\r\n      textLength: \"5-6 phrases (200-300 caractères)\",\r\n      errorCount: \"5-6 erreurs par exercice\",\r\n      errorTypes: [\r\n        \"Sophisticated structures\",\r\n        \"Cultural references\",\r\n        \"Stylistic nuances\",\r\n      ],\r\n      difficulty: \"Très difficile\",\r\n      focus: \"Erreurs sophistiquées, analyse approfondie\",\r\n    },\r\n    C2: {\r\n      name: \"Maîtrise\",\r\n      textLength: \"6-8 phrases (250-400 caractères)\",\r\n      errorCount: \"6-8 erreurs par exercice\",\r\n      errorTypes: [\"Literary language\", \"Archaic forms\", \"Creative expression\"],\r\n      difficulty: \"Expert\",\r\n      focus: \"Subtilités linguistiques maximales\",\r\n    },\r\n  };\r\n\r\n  return characteristics[level] || characteristics.A1;\r\n};\r\n\r\n/**\r\n * Récupère les statistiques d'exercices pour un niveau donné\r\n * @param {string} level - Le niveau de langue\r\n * @returns {Object} Statistiques des exercices (nombre, types, catégories, etc.)\r\n */\r\nexport const getErrorCorrectionStats = (level) => {\r\n  const stats = {\r\n    exerciseCount: 0,\r\n    totalQuestions: 0,\r\n    categoryCount: 0,\r\n    typeDistribution: {\r\n      full: 0,\r\n      identify: 0,\r\n      multiple_choice: 0,\r\n    },\r\n    categories: [],\r\n    averageTextLength: 0,\r\n    totalErrorPositions: 0,\r\n  };\r\n\r\n  try {\r\n    const data = getErrorsData(level);\r\n\r\n    if (data?.exercises) {\r\n      stats.exerciseCount = data.exercises.length;\r\n      stats.totalQuestions = data.exercises.length; // Chaque exercice = 1 question\r\n      stats.categoryCount = data.categories ? data.categories.length : 0;\r\n\r\n      // Distribution par type\r\n      if (data.statistics) {\r\n        stats.typeDistribution = {\r\n          full: data.statistics.full || 0,\r\n          identify: data.statistics.identify || 0,\r\n          multiple_choice: data.statistics.multiple_choice || 0,\r\n        };\r\n      }\r\n\r\n      // Informations sur les catégories\r\n      if (data.categories) {\r\n        stats.categories = data.categories.map((cat) => ({\r\n          id: cat.id,\r\n          name: cat.name,\r\n          count: cat.exerciseCount || 0,\r\n          difficulty: cat.difficulty || \"Unknown\",\r\n        }));\r\n      }\r\n\r\n      // Calcul longueur moyenne des textes\r\n      const textLengths = data.exercises.map((ex) =>\r\n        ex.text ? ex.text.length : 0\r\n      );\r\n      stats.averageTextLength =\r\n        textLengths.length > 0\r\n          ? Math.round(\r\n              textLengths.reduce((a, b) => a + b, 0) / textLengths.length\r\n            )\r\n          : 0;\r\n\r\n      // Calcul total des positions d'erreurs\r\n      stats.totalErrorPositions = data.exercises\r\n        .filter((ex) => ex.errorPositions)\r\n        .reduce((total, ex) => total + ex.errorPositions.length, 0);\r\n    }\r\n  } catch (error) {\r\n    // Ignored on purpose\r\n  }\r\n\r\n  return stats;\r\n};\r\n\r\n/**\r\n * Récupère les statistiques globales pour tous les niveaux implémentés\r\n * @returns {Object} Statistiques complètes du programme d'error correction\r\n */\r\nexport const getGlobalErrorCorrectionStats = () => {\r\n  const levels = [\"A1\", \"A2\", \"B1\", \"B2\", \"C1\", \"C2\"];\r\n  const globalStats = {\r\n    totalExercises: 0,\r\n    totalQuestions: 0,\r\n    totalCategories: 0,\r\n    byLevel: {},\r\n    byType: {\r\n      full: 0,\r\n      identify: 0,\r\n      multiple_choice: 0,\r\n    },\r\n    implementedLevels: 6, // Maintenant tous les niveaux sont implémentés\r\n    progression: [],\r\n  };\r\n\r\n  levels.forEach((level) => {\r\n    const levelStats = getErrorCorrectionStats(level);\r\n    globalStats.byLevel[level] = levelStats;\r\n\r\n    if (levelStats.exerciseCount > 0) {\r\n      globalStats.totalExercises += levelStats.exerciseCount;\r\n      globalStats.totalQuestions += levelStats.totalQuestions;\r\n      globalStats.totalCategories += levelStats.categoryCount;\r\n\r\n      // Cumul par type\r\n      globalStats.byType.full += levelStats.typeDistribution.full;\r\n      globalStats.byType.identify += levelStats.typeDistribution.identify;\r\n      globalStats.byType.multiple_choice +=\r\n        levelStats.typeDistribution.multiple_choice;\r\n\r\n      // Progression des niveaux\r\n      globalStats.progression.push({\r\n        level,\r\n        exercises: levelStats.exerciseCount,\r\n        difficulty: getLevelCharacteristics(level).difficulty,\r\n      });\r\n    }\r\n  });\r\n\r\n  return globalStats;\r\n};\r\n\r\n/**\r\n * Récupère les exercices par catégorie pour un niveau donné\r\n * @param {string} level - Le niveau de langue\r\n * @param {number} categoryId - L'ID de la catégorie\r\n * @returns {Array} Liste des exercices de la catégorie\r\n */\r\nexport const getExercisesByCategory = (level, categoryId) => {\r\n  const data = getErrorsData(level);\r\n  if (data?.getExercisesByCategory) {\r\n    return data.getExercisesByCategory(categoryId);\r\n  }\r\n  return data?.exercises?.filter((ex) => ex.categoryId === categoryId) || [];\r\n};\r\n\r\n/**\r\n * Récupère les exercices par type pour un niveau donné\r\n * @param {string} level - Le niveau de langue\r\n * @param {string} type - Le type d'exercice (full, identify, multiple_choice)\r\n * @returns {Array} Liste des exercices du type spécifié\r\n */\r\nexport const getExercisesByType = (level, type) => {\r\n  const data = getErrorsData(level);\r\n  if (data?.getExercisesByType) {\r\n    return data.getExercisesByType(type);\r\n  }\r\n  return data?.exercises?.filter((ex) => ex.type === type) || [];\r\n};\r\n\r\n/**\r\n * Récupère les exercices par catégorie ET type\r\n * @param {string} level - Le niveau de langue\r\n * @param {number} categoryId - L'ID de la catégorie\r\n * @param {string} type - Le type d'exercice\r\n * @returns {Array} Liste des exercices filtrés\r\n */\r\nexport const getExercisesByCategoryAndType = (level, categoryId, type) => {\r\n  const data = getErrorsData(level);\r\n  if (data?.getExercisesByCategoryAndType) {\r\n    return data.getExercisesByCategoryAndType(categoryId, type);\r\n  }\r\n  return (\r\n    data?.exercises?.filter(\r\n      (ex) => ex.categoryId === categoryId && ex.type === type\r\n    ) || []\r\n  );\r\n};\r\n\r\n/**\r\n * Valide qu'un exercice d'error correction a la structure correcte\r\n * @param {Object} exercise - L'exercice à valider\r\n * @returns {boolean} True si l'exercice est valide\r\n */\r\nexport const validateErrorCorrectionExercise = (exercise) => {\r\n  if (!exercise || typeof exercise !== \"object\") {\r\n    return false;\r\n  }\r\n\r\n  // Champs requis pour tous les types\r\n  const requiredFields = [\r\n    \"categoryId\",\r\n    \"type\",\r\n    \"text\",\r\n    \"correctedText\",\r\n    \"hint\",\r\n    \"explanation\",\r\n  ];\r\n\r\n  for (const field of requiredFields) {\r\n    if (!exercise[field]) {\r\n\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Validation des types autorisés\r\n  const validTypes = [\"full\", \"identify\", \"multiple_choice\"];\r\n  if (!validTypes.includes(exercise.type)) {\r\n\r\n    return false;\r\n  }\r\n\r\n  // Validation spécifique par type\r\n  if (exercise.type === \"multiple_choice\") {\r\n    if (\r\n      !exercise.choices ||\r\n      !Array.isArray(exercise.choices) ||\r\n      exercise.choices.length < 2\r\n    ) {\r\n\r\n      return false;\r\n    }\r\n\r\n    if (\r\n      typeof exercise.correctChoiceIndex !== \"number\" ||\r\n      exercise.correctChoiceIndex < 0 ||\r\n      exercise.correctChoiceIndex >= exercise.choices.length\r\n    ) {\r\n\r\n      return false;\r\n    }\r\n  } else {\r\n    // Pour \"full\" et \"identify\", errorPositions est requis\r\n    if (!exercise.errorPositions || !Array.isArray(exercise.errorPositions)) {\r\n\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\n/**\r\n * Valide toutes les données d'un niveau donné\r\n * @param {string} level - Le niveau à valider\r\n * @returns {Object} Résultat de la validation avec détails\r\n */\r\nexport const validateErrorCorrectionData = (level) => {\r\n  const data = getErrorsData(level);\r\n\r\n  if (!data || !data.exercises) {\r\n    return {\r\n      valid: false,\r\n      error: \"No error correction data found\",\r\n      exerciseCount: 0,\r\n    };\r\n  }\r\n\r\n  const results = {\r\n    valid: true,\r\n    exerciseCount: data.exercises.length,\r\n    invalidExercises: [],\r\n    errors: [],\r\n    categoryCount: data.categories ? data.categories.length : 0,\r\n    typeDistribution: {\r\n      full: 0,\r\n      identify: 0,\r\n      multiple_choice: 0,\r\n    },\r\n  };\r\n\r\n  // Validation des exercices\r\n  data.exercises.forEach((exercise, index) => {\r\n    if (!validateErrorCorrectionExercise(exercise)) {\r\n      results.valid = false;\r\n      results.invalidExercises.push(index);\r\n      results.errors.push(\r\n        `Exercise ${index + 1} (category ${\r\n          exercise.categoryId || \"unknown\"\r\n        }) is invalid`\r\n      );\r\n    } else {\r\n      // Comptage par type\r\n      if (Object.prototype.hasOwnProperty.call(results.typeDistribution, exercise.type)) {\r\n        results.typeDistribution[exercise.type]++;\r\n      }\r\n    }\r\n  });\r\n\r\n  // Validation de la structure du niveau\r\n  if (data.validateStructure && !data.validateStructure()) {\r\n    results.valid = false;\r\n    results.errors.push(\"Level structure validation failed\");\r\n  }\r\n\r\n  return results;\r\n};\r\n\r\n/**\r\n * Récupère un exercice aléatoire d'un niveau et type donnés\r\n * @param {string} level - Le niveau de langue\r\n * @param {string} type - Le type d'exercice (optionnel)\r\n * @param {number} categoryId - L'ID de la catégorie (optionnel)\r\n * @returns {Object|null} Un exercice aléatoire ou null si aucun trouvé\r\n */\r\nexport const getRandomErrorCorrectionExercise = (\r\n  level,\r\n  type = null,\r\n  categoryId = null\r\n) => {\r\n  const data = getErrorsData(level);\r\n\r\n  if (!data || !data.exercises || data.exercises.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  let filteredExercises = data.exercises;\r\n\r\n  // Filtrage par type si spécifié\r\n  if (type) {\r\n    filteredExercises = filteredExercises.filter((ex) => ex.type === type);\r\n  }\r\n\r\n  // Filtrage par catégorie si spécifiée\r\n  if (categoryId) {\r\n    filteredExercises = filteredExercises.filter(\r\n      (ex) => ex.categoryId === categoryId\r\n    );\r\n  }\r\n\r\n  if (filteredExercises.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const randomIndex = Math.floor(Math.random() * filteredExercises.length);\r\n  return {\r\n    ...filteredExercises[randomIndex],\r\n    index: randomIndex,\r\n    totalCount: filteredExercises.length,\r\n    level,\r\n  };\r\n};\r\n\r\n/**\r\n * Récupère les informations d'un mode d'exercice\r\n * @param {string} mode - Le mode (full, identify, multiple_choice)\r\n * @returns {Object} Informations sur le mode\r\n */\r\nexport const getModeInfo = (mode) => {\r\n  const modes = {\r\n    full: {\r\n      name: \"Full Correction\",\r\n      description: \"Rewrite the entire text correcting all errors\",\r\n      difficulty: \"Hard\",\r\n      icon: \"✏️\",\r\n      color: \"#ef4444\",\r\n    },\r\n    identify: {\r\n      name: \"Identify Errors\",\r\n      description: \"Click on words that contain errors\",\r\n      difficulty: \"Medium\",\r\n      icon: \"🔍\",\r\n      color: \"#f59e0b\",\r\n    },\r\n    multiple_choice: {\r\n      name: \"Multiple Choice\",\r\n      description: \"Choose the correct option from multiple choices\",\r\n      difficulty: \"Easy\",\r\n      icon: \"✅\",\r\n      color: \"#10b981\",\r\n    },\r\n  };\r\n\r\n  return modes[mode] || modes.full;\r\n};\r\n\r\n/**\r\n * Récupère des exercices recommandés basés sur les performances\r\n * @param {string} level - Le niveau actuel\r\n * @param {Array} completedExercises - Liste des exercices complétés\r\n * @param {Object} performance - Statistiques de performance\r\n * @returns {Array} Exercices recommandés\r\n */\r\nexport const getRecommendedExercises = (\r\n  level,\r\n  completedExercises = [],\r\n  performance = {}\r\n) => {\r\n  const data = getErrorsData(level);\r\n\r\n  if (!data || !data.exercises) {\r\n    return [];\r\n  }\r\n\r\n  // Filtrer les exercices non complétés\r\n  const availableExercises = data.exercises.filter(\r\n    (ex) => !completedExercises.includes(`${ex.categoryId}_${ex.type}`)\r\n  );\r\n\r\n  // Si pas de données de performance, retourner des exercices variés\r\n  if (!performance.weakCategories) {\r\n    return availableExercises.slice(0, 5);\r\n  }\r\n\r\n  // Prioriser les catégories faibles\r\n  const recommendedExercises = [];\r\n\r\n  performance.weakCategories.forEach((categoryId) => {\r\n    const categoryExercises = availableExercises.filter(\r\n      (ex) => ex.categoryId === categoryId\r\n    );\r\n    recommendedExercises.push(...categoryExercises.slice(0, 2));\r\n  });\r\n\r\n  return recommendedExercises.slice(0, 5);\r\n};\r\n\r\n/**\r\n * Export des niveaux disponibles avec leurs métadonnées\r\n */\r\nexport const getAvailableLevels = () => {\r\n  return [\r\n    {\r\n      level: \"A1\",\r\n      name: \"Débutant\",\r\n      exercises: getErrorCorrectionStats(\"A1\").exerciseCount,\r\n    },\r\n    {\r\n      level: \"A2\",\r\n      name: \"Élémentaire\",\r\n      exercises: getErrorCorrectionStats(\"A2\").exerciseCount,\r\n    },\r\n    {\r\n      level: \"B1\",\r\n      name: \"Intermédiaire\",\r\n      exercises: getErrorCorrectionStats(\"B1\").exerciseCount,\r\n    },\r\n    {\r\n      level: \"B2\",\r\n      name: \"Intermédiaire avancé\",\r\n      exercises: getErrorCorrectionStats(\"B2\").exerciseCount,\r\n    },\r\n    {\r\n      level: \"C1\",\r\n      name: \"Autonome\",\r\n      exercises: getErrorCorrectionStats(\"C1\").exerciseCount,\r\n    },\r\n    {\r\n      level: \"C2\",\r\n      name: \"Maîtrise\",\r\n      exercises: getErrorCorrectionStats(\"C2\").exerciseCount,\r\n    },\r\n  ];\r\n};\r\n\r\n"],"mappings":";;;;;;AAIA,IAAAA,EAAA,GAAAC,sBAAA,CAAAC,OAAA;AAGA,IAAAC,GAAA,GAAAF,sBAAA,CAAAC,OAAA;AAGA,IAAAE,EAAA,GAAAH,sBAAA,CAAAC,OAAA;AAGA,IAAAG,GAAA,GAAAJ,sBAAA,CAAAC,OAAA;AAGA,IAAAI,EAAA,GAAAL,sBAAA,CAAAC,OAAA;AAGA,IAAAK,GAAA,GAAAN,sBAAA,CAAAC,OAAA;AAA8D,SAAAM,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;U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","ignoreList":[]}