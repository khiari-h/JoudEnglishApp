{"version":3,"names":["_getJestObj","mock","_require","require","Text","Ionicons","props","_jsxRuntime","jsx","testID","name","children","_interopRequireDefault","_react","_reactNative","_reactNative2","_OptionsList","_require2","jest","describe","options","id","text","onSelectOptionMock","fn","afterEach","mockClear","it","_render","render","default","getByText","expect","toBeTruthy","_render2","onSelectOption","fireEvent","press","toHaveBeenCalledWith","_render3","disabled","not","toHaveBeenCalled","_render4","selectedOptionId","getByTestId","queryByTestId","toBeNull","_render5","optionStyle","StyleSheet","flatten","style","toEqual","objectContaining","flexDirection","_render6","layout","gridContainer","flexWrap","width","_render7","oneOption","_render8","_render9","_render0","correctOptionId","showCorrectAnswer","_render1","queryAllByTestId","length","toBe","_render10","rerender","newOptions","_render11"],"sources":["OptionsList.test.js"],"sourcesContent":["import React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport { StyleSheet } from 'react-native';\nimport OptionsList from '../../../src/components/exercise-common/OptionsList';\n\n// Mock des icônes\njest.mock('@expo/vector-icons', () => {\n    const { Text } = require('react-native');\n    return {\n        Ionicons: (props) => <Text testID={`icon-${props.name}`}>{props.name}</Text>,\n    };\n});\n\ndescribe('OptionsList', () => {\n    const options = [\n        { id: '1', text: 'Apple' },\n        { id: '2', text: 'Banana' },\n        { id: '3', text: 'Cherry' },\n    ];\n    const onSelectOptionMock = jest.fn();\n\n    afterEach(() => {\n        onSelectOptionMock.mockClear();\n    });\n\n    // --- Tests de rendu de base ---\n    it('renders all options correctly', () => {\n        const { getByText } = render(<OptionsList options={options} />);\n        expect(getByText('Apple')).toBeTruthy();\n        expect(getByText('Banana')).toBeTruthy();\n        expect(getByText('Cherry')).toBeTruthy();\n    });\n\n    it('calls onSelectOption with the correct id when an option is pressed', () => {\n        const { getByText } = render(\n            <OptionsList options={options} onSelectOption={onSelectOptionMock} />\n        );\n        fireEvent.press(getByText('Banana'));\n        expect(onSelectOptionMock).toHaveBeenCalledWith('2');\n    });\n\n    it('does not call onSelectOption when disabled', () => {\n        const { getByText } = render(\n            <OptionsList options={options} onSelectOption={onSelectOptionMock} disabled={true} />\n        );\n        fireEvent.press(getByText('Banana'));\n        expect(onSelectOptionMock).not.toHaveBeenCalled();\n    });\n\n    it('shows a selected indicator for the selected option when answer is not shown', () => {\n        const { getByTestId, queryByTestId } = render(\n            <OptionsList options={options} selectedOptionId={'1'} />\n        );\n        // Vérifie que l'indicateur de sélection est bien présent\n        expect(getByTestId('selected-indicator-1')).toBeTruthy();\n        // Vérifie qu'il n'y a pas d'icône de bonne/mauvaise réponse\n        expect(queryByTestId('icon-checkmark-circle')).toBeNull();\n        expect(queryByTestId('icon-close-circle')).toBeNull();\n    });\n\n    // --- Tests de mise en page et de logique ---\n    describe('Layout and Logic', () => {\n        it('renders with vertical layout by default', () => {\n            const { getByTestId } = render(<OptionsList options={options} />);\n            const optionStyle = StyleSheet.flatten(getByTestId('option-item-1').props.style);\n            expect(optionStyle).toEqual(expect.objectContaining({ flexDirection: 'row' }));\n        });\n\n        it('renders with grid layout when specified', () => {\n            const { getByTestId } = render(<OptionsList options={options} layout=\"grid\" />);\n            const gridContainer = StyleSheet.flatten(getByTestId('grid-container').props.style);\n            expect(gridContainer).toEqual(expect.objectContaining({ flexDirection: 'row', flexWrap: 'wrap' }));\n\n            const optionStyle = StyleSheet.flatten(getByTestId('grid-option-item-1').props.style);\n            expect(optionStyle).toEqual(expect.objectContaining({ width: '48%' }));\n        });\n\n        it('handles grid layout with more than 2 options', () => {\n            const { getByTestId } = render(<OptionsList options={options} layout=\"grid\" />);\n            const optionStyle = StyleSheet.flatten(getByTestId('grid-option-item-1').props.style);\n            expect(optionStyle).toEqual(expect.objectContaining({ width: '48%' }));\n        });\n\n        it('handles grid layout with a single option', () => {\n            const oneOption = [{ id: '1', text: 'One' }];\n            const { getByTestId } = render(<OptionsList options={oneOption} layout=\"grid\" />);\n            const optionStyle = StyleSheet.flatten(getByTestId('grid-option-item-1').props.style);\n            expect(optionStyle).toEqual(expect.objectContaining({ width: '98%' }));\n        });\n        \n        it('renders correctly with only one option in vertical layout', () => {\n            const oneOption = [{ id: '1', text: 'One' }];\n            const { getByText } = render(<OptionsList options={oneOption} />);\n            expect(getByText('One')).toBeTruthy();\n        });\n    });\n\n    // --- Tests d'affichage de la réponse ---\n    describe('when showing correct answer', () => {\n        it('shows a checkmark for the correct answer', () => {\n            const { getByTestId, queryByTestId } = render(\n                <OptionsList\n                    options={options}\n                    selectedOptionId={'2'}\n                    correctOptionId={'2'}\n                    showCorrectAnswer={true}\n                />\n            );\n            expect(getByTestId('icon-checkmark-circle')).toBeTruthy();\n            expect(queryByTestId('selected-indicator-2')).toBeNull();\n        });\n\n        it('shows a cross for the incorrect selection and a checkmark for the correct answer', () => {\n            const { getByTestId, queryAllByTestId } = render(\n                <OptionsList\n                    options={options}\n                    selectedOptionId={'1'}\n                    correctOptionId={'2'}\n                    showCorrectAnswer={true}\n                />\n            );\n            expect(getByTestId('icon-close-circle')).toBeTruthy();\n            expect(queryAllByTestId('icon-checkmark-circle').length).toBe(1);\n        });\n\n        it('should correctly memoize the component based on props', () => {\n    const { rerender } = render(<OptionsList options={[]} selectedOptionId={null} />);\n\n    // Rerender avec les mêmes props pour vérifier que areEqual retourne true\n    rerender(<OptionsList options={[]} selectedOptionId={null} />);\n\n    // Rerender avec des props différentes pour vérifier que areEqual retourne false\n    // et que le composant se met à jour\n    const newOptions = [{ id: '4', text: 'Mango' }];\n    rerender(<OptionsList options={newOptions} selectedOptionId={'4'} />);\n});\n\n        it('handles correct and incorrect answers in grid layout', () => {\n            const { getByTestId, queryAllByTestId } = render(\n                <OptionsList\n                    options={options}\n                    selectedOptionId={'1'}\n                    correctOptionId={'2'}\n                    showCorrectAnswer={true}\n                    layout=\"grid\"\n                />\n            );\n            expect(getByTestId('icon-close-circle')).toBeTruthy();\n            expect(queryAllByTestId('icon-checkmark-circle').length).toBe(1);\n        });\n    });\n});"],"mappings":"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","ignoreList":[]}