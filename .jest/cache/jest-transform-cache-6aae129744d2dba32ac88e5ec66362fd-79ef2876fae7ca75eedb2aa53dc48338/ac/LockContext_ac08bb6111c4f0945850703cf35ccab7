e3c8ae8d57c948ed8a3818079f139caa
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LockProvider = LockProvider;
exports.useLock = useLock;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _propTypes = _interopRequireDefault(require("prop-types"));
var Lock = _interopRequireWildcard(require("../services/lockService"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var LockContext = (0, _react.createContext)(null);
function LockProvider(_ref) {
  var children = _ref.children;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isEnabled = _useState2[0],
    setIsEnabled = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isLocked = _useState4[0],
    setIsLocked = _useState4[1];
  var _useState5 = (0, _react.useState)(true),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    isLoading = _useState6[0],
    setIsLoading = _useState6[1];
  (0, _react.useEffect)(function () {
    (0, _asyncToGenerator2.default)(function* () {
      try {
        var enabled = yield Lock.isEnabled();
        setIsEnabled(enabled);
        setIsLocked(enabled);
      } finally {
        setIsLoading(false);
      }
    })();
  }, []);
  var lockNow = (0, _react.useCallback)(function () {
    if (isEnabled) setIsLocked(true);
  }, [isEnabled]);
  var unlockWithPin = (0, _react.useCallback)(function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (pin) {
      var res = yield Lock.verifyPin(pin);
      if (res.ok) {
        setIsLocked(false);
        return {
          ok: true
        };
      }
      if (res.reason === 'lockout') return {
        ok: false,
        reason: 'lockout'
      };
      return {
        ok: false
      };
    });
    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }(), []);
  var disable = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    yield Lock.disableLock();
    setIsEnabled(false);
    setIsLocked(false);
  }), []);
  var enable = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    yield Lock.enableLock();
    setIsEnabled(true);
    setIsLocked(true);
  }), []);
  var value = {
    isEnabled: isEnabled,
    isLocked: isLocked,
    isLoading: isLoading,
    lockNow: lockNow,
    unlockWithPin: unlockWithPin,
    enable: enable,
    disable: disable
  };
  return (0, _jsxRuntime.jsx)(LockContext.Provider, {
    value: value,
    children: children
  });
}
LockProvider.propTypes = {
  children: _propTypes.default.node.isRequired
};
function useLock() {
  var ctx = (0, _react.useContext)(LockContext);
  if (!ctx) throw new Error('useLock must be used within LockProvider');
  return ctx;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,