e5900b09332548a639e4d57f87158c44
'use client';
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sortRoutes = exports.sortRoutesWithInitial = exports.Route = exports.useContextKey = exports.useRouteNode = exports.LocalRouteParamsContext = void 0;
var react_1 = __importStar(require("react"));
var matchers_1 = require("./matchers");
var sortRoutes_1 = require("./sortRoutes");
Object.defineProperty(exports, "sortRoutesWithInitial", {
  enumerable: true,
  get: function get() {
    return sortRoutes_1.sortRoutesWithInitial;
  }
});
Object.defineProperty(exports, "sortRoutes", {
  enumerable: true,
  get: function get() {
    return sortRoutes_1.sortRoutes;
  }
});
var CurrentRouteContext = react_1.default.createContext(null);
exports.LocalRouteParamsContext = react_1.default.createContext({});
if (process.env.NODE_ENV !== 'production') {
  CurrentRouteContext.displayName = 'RouteNode';
}
function useRouteNode() {
  return (0, react_1.useContext)(CurrentRouteContext);
}
exports.useRouteNode = useRouteNode;
function useContextKey() {
  var node = useRouteNode();
  if (node == null) {
    throw new Error('No filename found. This is likely a bug in expo-router.');
  }
  return (0, matchers_1.getContextKey)(node.contextKey);
}
exports.useContextKey = useContextKey;
function Route(_ref) {
  var children = _ref.children,
    node = _ref.node,
    route = _ref.route;
  return (0, _jsxRuntime.jsx)(exports.LocalRouteParamsContext.Provider, {
    value: route == null ? void 0 : route.params,
    children: (0, _jsxRuntime.jsx)(CurrentRouteContext.Provider, {
      value: node,
      children: children
    })
  });
}
exports.Route = Route;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnRTdGFyIiwicmVxdWlyZSIsIm1hdGNoZXJzXzEiLCJzb3J0Um91dGVzXzEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwic29ydFJvdXRlc1dpdGhJbml0aWFsIiwic29ydFJvdXRlcyIsIkN1cnJlbnRSb3V0ZUNvbnRleHQiLCJkZWZhdWx0IiwiY3JlYXRlQ29udGV4dCIsIkxvY2FsUm91dGVQYXJhbXNDb250ZXh0IiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiZGlzcGxheU5hbWUiLCJ1c2VSb3V0ZU5vZGUiLCJ1c2VDb250ZXh0IiwidXNlQ29udGV4dEtleSIsIm5vZGUiLCJFcnJvciIsImdldENvbnRleHRLZXkiLCJjb250ZXh0S2V5IiwiUm91dGUiLCJfcmVmIiwiY2hpbGRyZW4iLCJyb3V0ZSIsIl9qc3hSdW50aW1lIiwianN4IiwiUHJvdmlkZXIiLCJ2YWx1ZSIsInBhcmFtcyJdLCJzb3VyY2VzIjpbIi4uL3NyYy9Sb3V0ZS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlLCB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgdHlwZSB7IEVycm9yQm91bmRhcnlQcm9wcyB9IGZyb20gJy4vZXhwb3J0cyc7XG5pbXBvcnQgeyBnZXRDb250ZXh0S2V5IH0gZnJvbSAnLi9tYXRjaGVycyc7XG5pbXBvcnQgeyBzb3J0Um91dGVzV2l0aEluaXRpYWwsIHNvcnRSb3V0ZXMgfSBmcm9tICcuL3NvcnRSb3V0ZXMnO1xuXG5leHBvcnQgdHlwZSBEeW5hbWljQ29udmVudGlvbiA9IHsgbmFtZTogc3RyaW5nOyBkZWVwOiBib29sZWFuOyBub3RGb3VuZD86IGJvb2xlYW4gfTtcblxuZXhwb3J0IHR5cGUgTG9hZGVkUm91dGUgPSB7XG4gIEVycm9yQm91bmRhcnk/OiBSZWFjdC5Db21wb25lbnRUeXBlPEVycm9yQm91bmRhcnlQcm9wcz47XG4gIGRlZmF1bHQ/OiBSZWFjdC5Db21wb25lbnRUeXBlPGFueT47XG4gIHVuc3RhYmxlX3NldHRpbmdzPzogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgZ2V0TmF2T3B0aW9ucz86IChhcmdzOiBhbnkpID0+IGFueTtcbiAgZ2VuZXJhdGVTdGF0aWNQYXJhbXM/OiAocHJvcHM6IHtcbiAgICBwYXJhbXM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBzdHJpbmdbXT47XG4gIH0pID0+IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IHN0cmluZ1tdPltdO1xufTtcblxuZXhwb3J0IHR5cGUgUm91dGVOb2RlID0ge1xuICAvKiogVGhlIHR5cGUgb2YgUm91dGVOb2RlICovXG4gIHR5cGU6ICdyb3V0ZScgfCAnYXBpJyB8ICdsYXlvdXQnO1xuICAvKiogTG9hZCBhIHJvdXRlIGludG8gbWVtb3J5LiBSZXR1cm5zIHRoZSBleHBvcnRzIGZyb20gYSByb3V0ZS4gKi9cbiAgbG9hZFJvdXRlOiAoKSA9PiBQYXJ0aWFsPExvYWRlZFJvdXRlPjtcbiAgLyoqIExvYWRlZCBpbml0aWFsIHJvdXRlIG5hbWUuICovXG4gIGluaXRpYWxSb3V0ZU5hbWU/OiBzdHJpbmc7XG4gIC8qKiBuZXN0ZWQgcm91dGVzICovXG4gIGNoaWxkcmVuOiBSb3V0ZU5vZGVbXTtcbiAgLyoqIElzIHRoZSByb3V0ZSBhIGR5bmFtaWMgcGF0aCAqL1xuICBkeW5hbWljOiBudWxsIHwgRHluYW1pY0NvbnZlbnRpb25bXTtcbiAgLyoqIGBpbmRleGAsIGBlcnJvci1ib3VuZGFyeWAsIGV0Yy4gKi9cbiAgcm91dGU6IHN0cmluZztcbiAgLyoqIENvbnRleHQgTW9kdWxlIElELCB1c2VkIGZvciBtYXRjaGluZyBjaGlsZHJlbi4gKi9cbiAgY29udGV4dEtleTogc3RyaW5nO1xuICAvKiogQWRkZWQgaW4tbWVtb3J5ICovXG4gIGdlbmVyYXRlZD86IGJvb2xlYW47XG4gIC8qKiBJbnRlcm5hbCBzY3JlZW5zIGxpa2UgdGhlIGRpcmVjdG9yeSBvciB0aGUgYXV0byA0MDQgc2hvdWxkIGJlIG1hcmtlZCBhcyBpbnRlcm5hbC4gKi9cbiAgaW50ZXJuYWw/OiBib29sZWFuO1xuICAvKiogRmlsZSBwYXRocyBmb3IgYXN5bmMgZW50cnkgbW9kdWxlcyB0aGF0IHNob3VsZCBiZSBpbmNsdWRlZCBpbiB0aGUgaW5pdGlhbCBjaHVuayByZXF1ZXN0IHRvIGVuc3VyZSB0aGUgcnVudGltZSBKYXZhU2NyaXB0IG1hdGNoZXMgdGhlIHN0YXRpY2FsbHkgcmVuZGVyZWQgSFRNTCByZXByZXNlbnRhdGlvbi4gKi9cbiAgZW50cnlQb2ludHM/OiBzdHJpbmdbXTtcbn07XG5cbmNvbnN0IEN1cnJlbnRSb3V0ZUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PFJvdXRlTm9kZSB8IG51bGw+KG51bGwpO1xuZXhwb3J0IGNvbnN0IExvY2FsUm91dGVQYXJhbXNDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxcbiAgUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgdW5kZWZpbmVkPiB8IHVuZGVmaW5lZFxuPih7fSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEN1cnJlbnRSb3V0ZUNvbnRleHQuZGlzcGxheU5hbWUgPSAnUm91dGVOb2RlJztcbn1cblxuLyoqIFJldHVybiB0aGUgUm91dGVOb2RlIGF0IHRoZSBjdXJyZW50IGNvbnRleHR1YWwgYm91bmRhcnkuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlUm91dGVOb2RlKCk6IFJvdXRlTm9kZSB8IG51bGwge1xuICByZXR1cm4gdXNlQ29udGV4dChDdXJyZW50Um91dGVDb250ZXh0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUNvbnRleHRLZXkoKTogc3RyaW5nIHtcbiAgY29uc3Qgbm9kZSA9IHVzZVJvdXRlTm9kZSgpO1xuICBpZiAobm9kZSA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBmaWxlbmFtZSBmb3VuZC4gVGhpcyBpcyBsaWtlbHkgYSBidWcgaW4gZXhwby1yb3V0ZXIuJyk7XG4gIH1cbiAgcmV0dXJuIGdldENvbnRleHRLZXkobm9kZS5jb250ZXh0S2V5KTtcbn1cblxuLyoqIFByb3ZpZGVzIHRoZSBtYXRjaGluZyByb3V0ZXMgYW5kIGZpbGVuYW1lIHRvIHRoZSBjaGlsZHJlbi4gKi9cbmV4cG9ydCBmdW5jdGlvbiBSb3V0ZSh7XG4gIGNoaWxkcmVuLFxuICBub2RlLFxuICByb3V0ZSxcbn06IHtcbiAgY2hpbGRyZW46IFJlYWN0Tm9kZTtcbiAgbm9kZTogUm91dGVOb2RlO1xuICByb3V0ZT86IHsgcGFyYW1zOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCB1bmRlZmluZWQ+IH07XG59KSB7XG4gIHJldHVybiAoXG4gICAgPExvY2FsUm91dGVQYXJhbXNDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtyb3V0ZT8ucGFyYW1zfT5cbiAgICAgIDxDdXJyZW50Um91dGVDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtub2RlfT57Y2hpbGRyZW59PC9DdXJyZW50Um91dGVDb250ZXh0LlByb3ZpZGVyPlxuICAgIDwvTG9jYWxSb3V0ZVBhcmFtc0NvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59XG5cbmV4cG9ydCB7IHNvcnRSb3V0ZXNXaXRoSW5pdGlhbCwgc29ydFJvdXRlcyB9O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFWixJQUFBQSxPQUFBLEdBQUFDLFlBQUEsQ0FBQUMsT0FBQTtBQUdBLElBQUFDLFVBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFlBQUEsR0FBQUYsT0FBQTtBQTRFU0csTUFBQSxDQUFBQyxjQUFBLENBQUFDLE9BQUE7RUFBQUMsVUFBQTtFQUFBQyxHQUFBLFdBQUFBLElBQUE7SUFBQSxPQTVFQUwsWUFBQSxDQUFBTSxxQkFBcUI7RUFBQTtBQUFBO0FBNEVFTCxNQUFBLENBQUFDLGNBQUEsQ0FBQUMsT0FBQTtFQUFBQyxVQUFBO0VBQUFDLEdBQUEsV0FBQUEsSUFBQTtJQUFBLE9BNUVBTCxZQUFBLENBQUFPLFVBQVU7RUFBQTtBQUFBO0FBcUMxQyxJQUFNQyxtQkFBbUIsR0FBR1osT0FBQSxDQUFBYSxPQUFLLENBQUNDLGFBQWEsQ0FBbUIsSUFBSSxDQUFDO0FBQzFEUCxPQUFBLENBQUFRLHVCQUF1QixHQUFHZixPQUFBLENBQUFhLE9BQUssQ0FBQ0MsYUFBYSxDQUV4RCxFQUFFLENBQUM7QUFFTCxJQUFJRSxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsUUFBUSxLQUFLLFlBQVksRUFBRTtFQUN6Q04sbUJBQW1CLENBQUNPLFdBQVcsR0FBRyxXQUFXOztBQUkvQyxTQUFnQkMsWUFBWUEsQ0FBQTtFQUMxQixPQUFPLElBQUFwQixPQUFBLENBQUFxQixVQUFVLEVBQUNULG1CQUFtQixDQUFDO0FBQ3hDO0FBRkFMLE9BQUEsQ0FBQWEsWUFBQSxHQUFBQSxZQUFBO0FBSUEsU0FBZ0JFLGFBQWFBLENBQUE7RUFDM0IsSUFBTUMsSUFBSSxHQUFHSCxZQUFZLEVBQUU7RUFDM0IsSUFBSUcsSUFBSSxJQUFJLElBQUksRUFBRTtJQUNoQixNQUFNLElBQUlDLEtBQUssQ0FBQyx5REFBeUQsQ0FBQzs7RUFFNUUsT0FBTyxJQUFBckIsVUFBQSxDQUFBc0IsYUFBYSxFQUFDRixJQUFJLENBQUNHLFVBQVUsQ0FBQztBQUN2QztBQU5BbkIsT0FBQSxDQUFBZSxhQUFBLEdBQUFBLGFBQUE7QUFTQSxTQUFnQkssS0FBS0EsQ0FBQUMsSUFBQSxFQVFwQjtFQUFBLElBUENDLFFBQVEsR0FBQUQsSUFBQSxDQUFSQyxRQUFRO0lBQ1JOLElBQUksR0FBQUssSUFBQSxDQUFKTCxJQUFJO0lBQ0pPLEtBQUssR0FBQUYsSUFBQSxDQUFMRSxLQUFLO0VBTUwsT0FDRSxJQUFBQyxXQUFBLENBQUFDLEdBQUEsRUFBQ3pCLE9BQUEsQ0FBQVEsdUJBQXVCLENBQUNrQixRQUFRO0lBQUNDLEtBQUssRUFBRUosS0FBSyxvQkFBTEEsS0FBSyxDQUFFSyxNQUFPO0lBQUFOLFFBQUEsRUFDckQsSUFBQUUsV0FBQSxDQUFBQyxHQUFBLEVBQUNwQixtQkFBbUIsQ0FBQ3FCLFFBQVE7TUFBQ0MsS0FBSyxFQUFFWCxJQUFLO01BQUFNLFFBQUEsRUFBRUE7SUFBUSxDQUErQjtFQUNyRixDQUFrQyxDQUFDO0FBRXZDO0FBZEF0QixPQUFBLENBQUFvQixLQUFBLEdBQUFBLEtBQUEiLCJpZ25vcmVMaXN0IjpbXX0=