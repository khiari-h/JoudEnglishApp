610cb8336e4d80a149b242f3c4ffd556
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _expoLinearGradient = require("expo-linear-gradient");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _VocabularyWordCard = _interopRequireDefault(require("../VocabularyWordCard"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
function cov_2crqeahcs4() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\exercises\\vocabulary\\VocabularyWordSection\\index.js";
  var hash = "5ad1508dc22914a4a484e44ebe159239c3499c58";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\exercises\\vocabulary\\VocabularyWordSection\\index.js",
    statementMap: {
      "0": {
        start: {
          line: 22,
          column: 30
        },
        end: {
          line: 48,
          column: 2
        }
      },
      "1": {
        start: {
          line: 29,
          column: 17
        },
        end: {
          line: 29,
          column: 41
        }
      },
      "2": {
        start: {
          line: 31,
          column: 2
        },
        end: {
          line: 47,
          column: 4
        }
      },
      "3": {
        start: {
          line: 50,
          column: 23
        },
        end: {
          line: 66,
          column: 1
        }
      },
      "4": {
        start: {
          line: 51,
          column: 2
        },
        end: {
          line: 65,
          column: 9
        }
      },
      "5": {
        start: {
          line: 69,
          column: 0
        },
        end: {
          line: 73,
          column: 2
        }
      },
      "6": {
        start: {
          line: 76,
          column: 0
        },
        end: {
          line: 87,
          column: 2
        }
      },
      "7": {
        start: {
          line: 89,
          column: 0
        },
        end: {
          line: 89,
          column: 60
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 22,
            column: 35
          },
          end: {
            line: 22,
            column: 36
          }
        },
        loc: {
          start: {
            line: 28,
            column: 6
          },
          end: {
            line: 48,
            column: 1
          }
        },
        line: 28
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 50,
            column: 23
          },
          end: {
            line: 50,
            column: 24
          }
        },
        loc: {
          start: {
            line: 51,
            column: 2
          },
          end: {
            line: 65,
            column: 9
          }
        },
        line: 51
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 38,
            column: 14
          },
          end: {
            line: 38,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 14
          },
          end: {
            line: 38,
            column: 30
          }
        }, {
          start: {
            line: 38,
            column: 34
          },
          end: {
            line: 38,
            column: 36
          }
        }],
        line: 38
      },
      "1": {
        loc: {
          start: {
            line: 39,
            column: 21
          },
          end: {
            line: 39,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 21
          },
          end: {
            line: 39,
            column: 44
          }
        }, {
          start: {
            line: 39,
            column: 48
          },
          end: {
            line: 39,
            column: 50
          }
        }],
        line: 39
      },
      "2": {
        loc: {
          start: {
            line: 40,
            column: 20
          },
          end: {
            line: 40,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 20
          },
          end: {
            line: 40,
            column: 42
          }
        }, {
          start: {
            line: 40,
            column: 46
          },
          end: {
            line: 40,
            column: 48
          }
        }],
        line: 40
      },
      "3": {
        loc: {
          start: {
            line: 41,
            column: 17
          },
          end: {
            line: 41,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 17
          },
          end: {
            line: 41,
            column: 36
          }
        }, {
          start: {
            line: 41,
            column: 40
          },
          end: {
            line: 41,
            column: 42
          }
        }],
        line: 41
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5ad1508dc22914a4a484e44ebe159239c3499c58"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_2crqeahcs4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2crqeahcs4();
var VocabularyWordSection = (cov_2crqeahcs4().s[0]++, (0, _react.memo)(function (_ref) {
  var currentWord = _ref.currentWord,
    wordCounter = _ref.wordCounter,
    levelColor = _ref.levelColor,
    showTranslation = _ref.showTranslation,
    onToggleTranslation = _ref.onToggleTranslation;
  cov_2crqeahcs4().f[0]++;
  var styles = (cov_2crqeahcs4().s[1]++, (0, _style.default)(levelColor));
  cov_2crqeahcs4().s[2]++;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsx)(CounterSection, {
      wordCounter: wordCounter,
      levelColor: levelColor,
      styles: styles
    }), (0, _jsxRuntime.jsx)(_VocabularyWordCard.default, {
      word: (cov_2crqeahcs4().b[0][0]++, currentWord.word) || (cov_2crqeahcs4().b[0][1]++, ""),
      translation: (cov_2crqeahcs4().b[1][0]++, currentWord.translation) || (cov_2crqeahcs4().b[1][1]++, ""),
      definition: (cov_2crqeahcs4().b[2][0]++, currentWord.definition) || (cov_2crqeahcs4().b[2][1]++, ""),
      example: (cov_2crqeahcs4().b[3][0]++, currentWord.example) || (cov_2crqeahcs4().b[3][1]++, ""),
      showTranslation: showTranslation,
      onToggleTranslation: onToggleTranslation,
      levelColor: levelColor
    })]
  });
}));
cov_2crqeahcs4().s[3]++;
var CounterSection = function CounterSection(_ref2) {
  var wordCounter = _ref2.wordCounter,
    levelColor = _ref2.levelColor,
    styles = _ref2.styles;
  cov_2crqeahcs4().f[1]++;
  cov_2crqeahcs4().s[4]++;
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: styles.counterSection,
    children: (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
      colors: [`${levelColor}08`, `${levelColor}04`, 'transparent'],
      start: {
        x: 0,
        y: 0
      },
      end: {
        x: 1,
        y: 1
      },
      style: styles.counterGradient,
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.counterBadge, {
          borderColor: `${levelColor}20`
        }],
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [styles.counterText, {
            color: levelColor
          }],
          children: wordCounter
        })
      })
    })
  });
};
cov_2crqeahcs4().s[5]++;
CounterSection.propTypes = {
  wordCounter: _propTypes.default.string.isRequired,
  levelColor: _propTypes.default.string.isRequired,
  styles: _propTypes.default.object.isRequired
};
cov_2crqeahcs4().s[6]++;
VocabularyWordSection.propTypes = {
  currentWord: _propTypes.default.shape({
    word: _propTypes.default.string,
    translation: _propTypes.default.string,
    definition: _propTypes.default.string,
    example: _propTypes.default.string
  }),
  wordCounter: _propTypes.default.string.isRequired,
  levelColor: _propTypes.default.string.isRequired,
  showTranslation: _propTypes.default.bool.isRequired,
  onToggleTranslation: _propTypes.default.func.isRequired
};
cov_2crqeahcs4().s[7]++;
VocabularyWordSection.displayName = "VocabularyWordSection";
var _default = exports.default = VocabularyWordSection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,