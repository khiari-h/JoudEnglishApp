b99dce2a529dd42908453b8b4786e856
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HScrollViewNativeComponent = exports.HScrollContentViewNativeComponent = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _AndroidHorizontalScrollViewNativeComponent = _interopRequireDefault(require("../../../Libraries/Components/ScrollView/AndroidHorizontalScrollViewNativeComponent"));
var _ScrollContentViewNativeComponent = _interopRequireDefault(require("../../../Libraries/Components/ScrollView/ScrollContentViewNativeComponent"));
var _ScrollViewNativeComponent = _interopRequireDefault(require("../../../Libraries/Components/ScrollView/ScrollViewNativeComponent"));
var _Platform = _interopRequireDefault(require("../../../Libraries/Utilities/Platform"));
var _AndroidHorizontalScrollContentViewNativeComponent = _interopRequireDefault(require("../specs/components/AndroidHorizontalScrollContentViewNativeComponent"));
var _useSyncOnScroll3 = _interopRequireDefault(require("./useSyncOnScroll"));
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var HScrollViewNativeComponentForPlatform = _Platform.default.OS === 'android' ? _AndroidHorizontalScrollViewNativeComponent.default : _ScrollViewNativeComponent.default;
var HScrollViewNativeComponent = exports.HScrollViewNativeComponent = (0, _react.forwardRef)(function HScrollViewNativeComponent(props, ref) {
  var _useSyncOnScroll = (0, _useSyncOnScroll3.default)(ref),
    _useSyncOnScroll2 = (0, _slicedToArray2.default)(_useSyncOnScroll, 2),
    componentRef = _useSyncOnScroll2[0],
    enableSyncOnScroll = _useSyncOnScroll2[1];
  return (0, _jsxRuntime.jsx)(HScrollViewNativeComponentForPlatform, Object.assign({}, props, {
    ref: componentRef,
    enableSyncOnScroll: enableSyncOnScroll
  }));
});
var HScrollContentViewNativeComponent = exports.HScrollContentViewNativeComponent = _Platform.default.OS === 'android' ? _AndroidHorizontalScrollContentViewNativeComponent.default : _ScrollContentViewNativeComponent.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfQW5kcm9pZEhvcml6b250YWxTY3JvbGxWaWV3TmF0aXZlQ29tcG9uZW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfU2Nyb2xsQ29udGVudFZpZXdOYXRpdmVDb21wb25lbnQiLCJfU2Nyb2xsVmlld05hdGl2ZUNvbXBvbmVudCIsIl9QbGF0Zm9ybSIsIl9BbmRyb2lkSG9yaXpvbnRhbFNjcm9sbENvbnRlbnRWaWV3TmF0aXZlQ29tcG9uZW50IiwiX3VzZVN5bmNPblNjcm9sbDMiLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIlJlYWN0IiwiX2pzeFJ1bnRpbWUiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIkhTY3JvbGxWaWV3TmF0aXZlQ29tcG9uZW50Rm9yUGxhdGZvcm0iLCJQbGF0Zm9ybSIsIk9TIiwiQW5kcm9pZEhvcml6b250YWxTY3JvbGxWaWV3TmF0aXZlQ29tcG9uZW50IiwiU2Nyb2xsVmlld05hdGl2ZUNvbXBvbmVudCIsIkhTY3JvbGxWaWV3TmF0aXZlQ29tcG9uZW50IiwiZXhwb3J0cyIsImZvcndhcmRSZWYiLCJwcm9wcyIsInJlZiIsIl91c2VTeW5jT25TY3JvbGwiLCJ1c2VTeW5jT25TY3JvbGwiLCJfdXNlU3luY09uU2Nyb2xsMiIsIl9zbGljZWRUb0FycmF5MiIsImNvbXBvbmVudFJlZiIsImVuYWJsZVN5bmNPblNjcm9sbCIsImpzeCIsImFzc2lnbiIsIkhTY3JvbGxDb250ZW50Vmlld05hdGl2ZUNvbXBvbmVudCIsIkFuZHJvaWRIb3Jpem9udGFsU2Nyb2xsQ29udGVudFZpZXdOYXRpdmVDb21wb25lbnQiLCJTY3JvbGxDb250ZW50Vmlld05hdGl2ZUNvbXBvbmVudCJdLCJzb3VyY2VzIjpbIkhTY3JvbGxWaWV3TmF0aXZlQ29tcG9uZW50cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKiBAZm9ybWF0XG4gKiBAb25jYWxsIHJlYWN0X25hdGl2ZVxuICovXG5cbmltcG9ydCB0eXBlIHtTY3JvbGxWaWV3TmF0aXZlUHJvcHN9IGZyb20gJy4uLy4uLy4uL0xpYnJhcmllcy9Db21wb25lbnRzL1Njcm9sbFZpZXcvU2Nyb2xsVmlld05hdGl2ZUNvbXBvbmVudFR5cGUnO1xuaW1wb3J0IHR5cGUge1ZpZXdQcm9wc30gZnJvbSAnLi4vLi4vLi4vTGlicmFyaWVzL0NvbXBvbmVudHMvVmlldy9WaWV3UHJvcFR5cGVzJztcbmltcG9ydCB0eXBlIHtIb3N0Q29tcG9uZW50fSBmcm9tICcuLi8uLi8uLi9MaWJyYXJpZXMvUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmVUeXBlcyc7XG5pbXBvcnQgdHlwZSB7VFNjcm9sbFZpZXdOYXRpdmVJbXBlcmF0aXZlSGFuZGxlfSBmcm9tICcuL3VzZVN5bmNPblNjcm9sbCc7XG5cbmltcG9ydCBBbmRyb2lkSG9yaXpvbnRhbFNjcm9sbFZpZXdOYXRpdmVDb21wb25lbnQgZnJvbSAnLi4vLi4vLi4vTGlicmFyaWVzL0NvbXBvbmVudHMvU2Nyb2xsVmlldy9BbmRyb2lkSG9yaXpvbnRhbFNjcm9sbFZpZXdOYXRpdmVDb21wb25lbnQnO1xuaW1wb3J0IFNjcm9sbENvbnRlbnRWaWV3TmF0aXZlQ29tcG9uZW50IGZyb20gJy4uLy4uLy4uL0xpYnJhcmllcy9Db21wb25lbnRzL1Njcm9sbFZpZXcvU2Nyb2xsQ29udGVudFZpZXdOYXRpdmVDb21wb25lbnQnO1xuaW1wb3J0IFNjcm9sbFZpZXdOYXRpdmVDb21wb25lbnQgZnJvbSAnLi4vLi4vLi4vTGlicmFyaWVzL0NvbXBvbmVudHMvU2Nyb2xsVmlldy9TY3JvbGxWaWV3TmF0aXZlQ29tcG9uZW50JztcbmltcG9ydCBQbGF0Zm9ybSBmcm9tICcuLi8uLi8uLi9MaWJyYXJpZXMvVXRpbGl0aWVzL1BsYXRmb3JtJztcbmltcG9ydCBBbmRyb2lkSG9yaXpvbnRhbFNjcm9sbENvbnRlbnRWaWV3TmF0aXZlQ29tcG9uZW50IGZyb20gJy4uL3NwZWNzL2NvbXBvbmVudHMvQW5kcm9pZEhvcml6b250YWxTY3JvbGxDb250ZW50Vmlld05hdGl2ZUNvbXBvbmVudCc7XG5pbXBvcnQgdXNlU3luY09uU2Nyb2xsIGZyb20gJy4vdXNlU3luY09uU2Nyb2xsJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7Zm9yd2FyZFJlZn0gZnJvbSAncmVhY3QnO1xuXG5jb25zdCBIU2Nyb2xsVmlld05hdGl2ZUNvbXBvbmVudEZvclBsYXRmb3JtID1cbiAgUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJ1xuICAgID8gQW5kcm9pZEhvcml6b250YWxTY3JvbGxWaWV3TmF0aXZlQ29tcG9uZW50XG4gICAgOiBTY3JvbGxWaWV3TmF0aXZlQ29tcG9uZW50O1xuXG4vLyBUT0RPOiBBZnRlciB1cGdyYWRpbmcgdG8gUmVhY3QgMTksIHJlbW92ZSBgZm9yd2FyZFJlZmAgZnJvbSB0aGlzIGNvbXBvbmVudC5cbmV4cG9ydCBjb25zdCBIU2Nyb2xsVmlld05hdGl2ZUNvbXBvbmVudDogUmVhY3QuQWJzdHJhY3RDb21wb25lbnQ8XG4gIFNjcm9sbFZpZXdOYXRpdmVQcm9wcyxcbiAgVFNjcm9sbFZpZXdOYXRpdmVJbXBlcmF0aXZlSGFuZGxlLFxuICAvLyAkRmxvd0V4cGVjdGVkRXJyb3JbaW5jb21wYXRpYmxlLXR5cGVdIC0gRmxvdyBjYW5ub3QgbW9kZWwgaW1wZXJhdGl2ZSBoYW5kbGVzLCB5ZXQuXG4+ID0gZm9yd2FyZFJlZihmdW5jdGlvbiBIU2Nyb2xsVmlld05hdGl2ZUNvbXBvbmVudChcbiAgcHJvcHM6IFNjcm9sbFZpZXdOYXRpdmVQcm9wcyxcbiAgcmVmOiA/UmVhY3QuUmVmU2V0dGVyPFRTY3JvbGxWaWV3TmF0aXZlSW1wZXJhdGl2ZUhhbmRsZSB8IG51bGw+LFxuKTogUmVhY3QuTm9kZSB7XG4gIGNvbnN0IFtjb21wb25lbnRSZWYsIGVuYWJsZVN5bmNPblNjcm9sbF0gPSB1c2VTeW5jT25TY3JvbGwocmVmKTtcbiAgLy8gTk9URTogV2hlbiBgdXNlU3luY09uU2Nyb2xsYCB0cmlnZ2VycyBhbiB1cGRhdGUsIGBwcm9wc2Agd2lsbCBub3QgaGF2ZVxuICAvLyBjaGFuZ2VkLiBOb3RhYmx5LCBgcHJvcHMuY2hpbGRyZW5gIHdpbGwgYmUgdGhlIHNhbWUsIGFsbG93aW5nIFJlYWN0IHRvXG4gIC8vIGJhaWwgb3V0IGR1cmluZyByZWNvbmNpbGlhdGlvbi5cbiAgcmV0dXJuIChcbiAgICA8SFNjcm9sbFZpZXdOYXRpdmVDb21wb25lbnRGb3JQbGF0Zm9ybVxuICAgICAgey4uLnByb3BzfVxuICAgICAgcmVmPXtjb21wb25lbnRSZWZ9XG4gICAgICBlbmFibGVTeW5jT25TY3JvbGw9e2VuYWJsZVN5bmNPblNjcm9sbH1cbiAgICAvPlxuICApO1xufSk7XG5cbmV4cG9ydCBjb25zdCBIU2Nyb2xsQ29udGVudFZpZXdOYXRpdmVDb21wb25lbnQ6IEhvc3RDb21wb25lbnQ8Vmlld1Byb3BzPiA9XG4gIFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCdcbiAgICA/IEFuZHJvaWRIb3Jpem9udGFsU2Nyb2xsQ29udGVudFZpZXdOYXRpdmVDb21wb25lbnRcbiAgICA6IFNjcm9sbENvbnRlbnRWaWV3TmF0aXZlQ29tcG9uZW50O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFn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