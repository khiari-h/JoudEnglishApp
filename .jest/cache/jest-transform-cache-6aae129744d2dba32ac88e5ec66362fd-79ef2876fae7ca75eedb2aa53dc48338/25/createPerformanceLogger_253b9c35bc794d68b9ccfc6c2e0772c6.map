{"version":3,"names":["_infoLog","_interopRequireDefault","require","_global$nativeQPLTime","PRINT_TO_CONSOLE","getCurrentTimestamp","exports","global","nativeQPLTimestamp","performance","now","PerformanceLogger","_classCallCheck2","default","_timespans","_extras","_points","_pointExtras","_closed","_createClass2","key","value","addTimespan","startTime","endTime","startExtras","endExtras","__DEV__","infoLog","totalTime","append","performanceLogger","Object","assign","getTimespans","getExtras","getPoints","getPointExtras","clear","clearCompleted","_this$_timespans$_key","close","currentTimestamp","hasTimespan","isClosed","logEverything","_this$_timespans$_key2","markPoint","timestamp","arguments","length","undefined","extras","removeExtra","setExtra","hasOwnProperty","currentValue","attemptedValue","startTimespan","stopTimespan","timespan","createPerformanceLogger"],"sources":["createPerformanceLogger.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {\n  Extras,\n  ExtraValue,\n  IPerformanceLogger,\n  Timespan,\n} from './IPerformanceLogger';\n\nimport infoLog from './infoLog';\n\nconst PRINT_TO_CONSOLE: false = false; // Type as false to prevent accidentally committing `true`;\n\nexport const getCurrentTimestamp: () => number =\n  global.nativeQPLTimestamp ?? (() => global.performance.now());\n\nclass PerformanceLogger implements IPerformanceLogger {\n  _timespans: {[key: string]: ?Timespan} = {};\n  _extras: {[key: string]: ?ExtraValue} = {};\n  _points: {[key: string]: ?number} = {};\n  _pointExtras: {[key: string]: ?Extras, ...} = {};\n  _closed: boolean = false;\n\n  addTimespan(\n    key: string,\n    startTime: number,\n    endTime: number,\n    startExtras?: Extras,\n    endExtras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: addTimespan - has closed ignoring: ', key);\n      }\n      return;\n    }\n    if (this._timespans[key]) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to add a timespan that already exists ',\n          key,\n        );\n      }\n      return;\n    }\n\n    this._timespans[key] = {\n      startTime,\n      endTime,\n      totalTime: endTime - (startTime || 0),\n      startExtras,\n      endExtras,\n    };\n  }\n\n  append(performanceLogger: IPerformanceLogger) {\n    this._timespans = {\n      ...performanceLogger.getTimespans(),\n      ...this._timespans,\n    };\n    this._extras = {...performanceLogger.getExtras(), ...this._extras};\n    this._points = {...performanceLogger.getPoints(), ...this._points};\n    this._pointExtras = {\n      ...performanceLogger.getPointExtras(),\n      ...this._pointExtras,\n    };\n  }\n\n  clear() {\n    this._timespans = {};\n    this._extras = {};\n    this._points = {};\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'clear');\n    }\n  }\n\n  clearCompleted() {\n    for (const key in this._timespans) {\n      if (this._timespans[key]?.totalTime != null) {\n        delete this._timespans[key];\n      }\n    }\n    this._extras = {};\n    this._points = {};\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'clearCompleted');\n    }\n  }\n\n  close() {\n    this._closed = true;\n  }\n\n  currentTimestamp(): number {\n    return getCurrentTimestamp();\n  }\n\n  getExtras(): {[key: string]: ?ExtraValue} {\n    return this._extras;\n  }\n\n  getPoints(): {[key: string]: ?number} {\n    return this._points;\n  }\n\n  getPointExtras(): {[key: string]: ?Extras} {\n    return this._pointExtras;\n  }\n\n  getTimespans(): {[key: string]: ?Timespan} {\n    return this._timespans;\n  }\n\n  hasTimespan(key: string): boolean {\n    return !!this._timespans[key];\n  }\n\n  isClosed(): boolean {\n    return this._closed;\n  }\n\n  logEverything() {\n    if (PRINT_TO_CONSOLE) {\n      // log timespans\n      for (const key in this._timespans) {\n        if (this._timespans[key]?.totalTime != null) {\n          infoLog(key + ': ' + this._timespans[key].totalTime + 'ms');\n        }\n      }\n\n      // log extras\n      infoLog(this._extras);\n\n      // log points\n      for (const key in this._points) {\n        if (this._points[key] != null) {\n          infoLog(key + ': ' + this._points[key] + 'ms');\n        }\n      }\n    }\n  }\n\n  markPoint(\n    key: string,\n    timestamp?: number = getCurrentTimestamp(),\n    extras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: markPoint - has closed ignoring: ', key);\n      }\n      return;\n    }\n    if (this._points[key] != null) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to mark a point that has been already logged ',\n          key,\n        );\n      }\n      return;\n    }\n    this._points[key] = timestamp;\n    if (extras) {\n      this._pointExtras[key] = extras;\n    }\n  }\n\n  removeExtra(key: string): ?ExtraValue {\n    const value = this._extras[key];\n    delete this._extras[key];\n    return value;\n  }\n\n  setExtra(key: string, value: ExtraValue) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: setExtra - has closed ignoring: ', key);\n      }\n      return;\n    }\n\n    if (this._extras.hasOwnProperty(key)) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to set an extra that already exists ',\n          {key, currentValue: this._extras[key], attemptedValue: value},\n        );\n      }\n      return;\n    }\n    this._extras[key] = value;\n  }\n\n  startTimespan(\n    key: string,\n    timestamp?: number = getCurrentTimestamp(),\n    extras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: startTimespan - has closed ignoring: ',\n          key,\n        );\n      }\n      return;\n    }\n\n    if (this._timespans[key]) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to start a timespan that already exists ',\n          key,\n        );\n      }\n      return;\n    }\n\n    this._timespans[key] = {\n      startTime: timestamp,\n      startExtras: extras,\n    };\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'start: ' + key);\n    }\n  }\n\n  stopTimespan(\n    key: string,\n    timestamp?: number = getCurrentTimestamp(),\n    extras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: stopTimespan - has closed ignoring: ', key);\n      }\n      return;\n    }\n\n    const timespan = this._timespans[key];\n    if (!timespan || timespan.startTime == null) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to end a timespan that has not started ',\n          key,\n        );\n      }\n      return;\n    }\n    if (timespan.endTime != null) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to end a timespan that has already ended ',\n          key,\n        );\n      }\n      return;\n    }\n\n    timespan.endExtras = extras;\n    timespan.endTime = timestamp;\n    timespan.totalTime = timespan.endTime - (timespan.startTime || 0);\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'end: ' + key);\n    }\n  }\n}\n\n// Re-exporting for backwards compatibility with all the clients that\n// may still import it from this module.\nexport type {Extras, ExtraValue, IPerformanceLogger, Timespan};\n\n/**\n * This function creates performance loggers that can be used to collect and log\n * various performance data such as timespans, points and extras.\n * The loggers need to have minimal overhead since they're used in production.\n */\nexport default function createPerformanceLogger(): IPerformanceLogger {\n  return new PerformanceLogger();\n}\n"],"mappings":"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","ignoreList":[]}