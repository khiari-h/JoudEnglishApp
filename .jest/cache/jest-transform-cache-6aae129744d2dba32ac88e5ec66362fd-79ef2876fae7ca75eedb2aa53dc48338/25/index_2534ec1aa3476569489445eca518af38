7e52480221a751c7f3eb682418da3e9e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _native = require("@react-navigation/native");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _Container = _interopRequireDefault(require("../../../components/layout/Container"));
var _SpellingHeader = _interopRequireDefault(require("./SpellingHeader"));
var _SpellingProgress = _interopRequireDefault(require("./SpellingProgress"));
var _SpellingCard = _interopRequireDefault(require("./SpellingCard"));
var _SpellingActions = _interopRequireDefault(require("./SpellingActions"));
var _useSpelling2 = _interopRequireDefault(require("./hooks/useSpelling"));
var _useLastActivity2 = _interopRequireDefault(require("../../../hooks/useLastActivity"));
var _spellingDataHelper = require("../../../utils/spelling/spellingDataHelper");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var SpellingExercise = function SpellingExercise(_ref) {
  var route = _ref.route;
  var _ref2 = route.params || {},
    _ref2$level = _ref2.level,
    level = _ref2$level === void 0 ? "1" : _ref2$level,
    _ref2$exerciseType = _ref2.exerciseType,
    exerciseType = _ref2$exerciseType === void 0 ? "correction" : _ref2$exerciseType;
  var navigation = (0, _native.useNavigation)();
  var styles = (0, _style.default)();
  var _useLastActivity = (0, _useLastActivity2.default)(),
    saveActivity = _useLastActivity.saveActivity;
  var levelColor = (0, _spellingDataHelper.getLevelColor)(level);
  var exerciseTypeName = exerciseType === "correction" ? "Correction" : exerciseType === "rules" ? "RÃ¨gles" : "Homophones";
  var spellingData = (0, _react.useMemo)(function () {
    try {
      return (0, _spellingDataHelper.getSpellingData)(level, exerciseType);
    } catch (error) {
      return null;
    }
  }, [level, exerciseType]);
  var _useSpelling = (0, _useSpelling2.default)(spellingData, level, exerciseType),
    currentExerciseIndex = _useSpelling.currentExerciseIndex,
    userInput = _useSpelling.userInput,
    showHint = _useSpelling.showHint,
    showFeedback = _useSpelling.showFeedback,
    isCorrect = _useSpelling.isCorrect,
    loaded = _useSpelling.loaded,
    currentExercise = _useSpelling.currentExercise,
    totalExercises = _useSpelling.totalExercises,
    setUserInput = _useSpelling.setUserInput,
    toggleHint = _useSpelling.toggleHint,
    checkAnswer = _useSpelling.checkAnswer,
    handleNext = _useSpelling.handleNext,
    retryExercise = _useSpelling.retryExercise,
    isLastExercise = _useSpelling.isLastExercise,
    hasValidData = _useSpelling.hasValidData;
  (0, _react.useEffect)(function () {
    if (loaded && hasValidData && currentExercise) {
      try {
        saveActivity({
          title: `Orthographe ${exerciseTypeName}`,
          level: level,
          type: "spelling",
          metadata: {
            word: currentExerciseIndex,
            totalWords: totalExercises,
            exerciseType: exerciseType,
            content: currentExercise.wordToCorrect || `Exercice ${currentExerciseIndex + 1}`
          }
        });
      } catch (error) {
        console.error("Error saving activity:", error);
      }
    }
  }, [loaded, hasValidData, currentExercise, level, exerciseType, currentExerciseIndex, totalExercises, saveActivity]);
  var handleBack = (0, _react.useCallback)(function () {
    return navigation.goBack();
  }, [navigation]);
  if (!loaded) {
    return (0, _jsxRuntime.jsxs)(_Container.default, {
      children: [(0, _jsxRuntime.jsx)(_SpellingHeader.default, {
        title: `Orthographe ${exerciseTypeName}`,
        level: level,
        levelColor: levelColor,
        onBack: handleBack
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.loadingContainer,
        children: [(0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
          size: "large",
          color: levelColor,
          testID: "activity-indicator"
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.loadingText,
          children: "Chargement des exercices..."
        })]
      })]
    });
  }
  if (!hasValidData) {
    return (0, _jsxRuntime.jsxs)(_Container.default, {
      children: [(0, _jsxRuntime.jsx)(_SpellingHeader.default, {
        title: `Orthographe ${exerciseTypeName}`,
        level: level,
        levelColor: levelColor,
        onBack: handleBack
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.errorContainer,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.errorText,
          children: "Aucune donn\xE9e trouv\xE9e pour ce niveau."
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.errorText,
          children: "Veuillez r\xE9essayer plus tard."
        })]
      })]
    });
  }
  return (0, _jsxRuntime.jsxs)(_Container.default, {
    children: [(0, _jsxRuntime.jsx)(_SpellingHeader.default, {
      title: `Orthographe ${exerciseTypeName}`,
      level: level,
      levelColor: levelColor,
      onBack: handleBack
    }), (0, _jsxRuntime.jsx)(_SpellingProgress.default, {
      currentExerciseIndex: currentExerciseIndex + 1,
      totalExercises: totalExercises,
      levelColor: levelColor
    }), (0, _jsxRuntime.jsx)(_SpellingCard.default, {
      currentExercise: currentExercise,
      userInput: userInput,
      showHint: showHint,
      showFeedback: showFeedback,
      isCorrect: isCorrect,
      onUserInputChange: setUserInput,
      onHintToggle: toggleHint,
      onCheckAnswer: checkAnswer,
      onNext: handleNext,
      onRetry: retryExercise,
      isLastExercise: isLastExercise,
      levelColor: levelColor
    }), (0, _jsxRuntime.jsx)(_SpellingActions.default, {
      isCorrect: isCorrect,
      onNext: handleNext,
      onRetry: retryExercise,
      isLastExercise: isLastExercise,
      levelColor: levelColor
    })]
  });
};
var _default = exports.default = SpellingExercise;
SpellingExercise.propTypes = {
  route: _propTypes.default.shape({
    params: _propTypes.default.shape({
      level: _propTypes.default.string,
      exerciseType: _propTypes.default.string
    })
  }).isRequired
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,