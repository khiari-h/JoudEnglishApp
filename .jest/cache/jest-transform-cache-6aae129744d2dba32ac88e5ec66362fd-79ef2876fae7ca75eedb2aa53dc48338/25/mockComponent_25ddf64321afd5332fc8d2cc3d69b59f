14a60f2a046752cb740a3b3deddc1525
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 */

'use strict';

module.exports = (moduleName, instanceMethods, isESModule) => {
  const RealComponent = isESModule ? jest.requireActual(moduleName).default : jest.requireActual(moduleName);
  const React = require('react');
  const SuperClass = typeof RealComponent === 'function' && RealComponent.prototype.constructor instanceof React.Component ? RealComponent : React.Component;
  const name = RealComponent.displayName || RealComponent.name || (RealComponent.render // handle React.forwardRef
  ? RealComponent.render.displayName || RealComponent.render.name : 'Unknown');
  const nameWithoutPrefix = name.replace(/^(RCT|RK)/, '');
  const Component = class extends SuperClass {
    static displayName = 'Component';
    render() {
      const props = Object.assign({}, RealComponent.defaultProps);
      if (this.props) {
        Object.keys(this.props).forEach(prop => {
          // We can't just assign props on top of defaultProps
          // because React treats undefined as special and different from null.
          // If a prop is specified but set to undefined it is ignored and the
          // default prop is used instead. If it is set to null, then the
          // null value overwrites the default value.
          if (this.props[prop] !== undefined) {
            props[prop] = this.props[prop];
          }
        });
      }
      return React.createElement(nameWithoutPrefix, props, this.props.children);
    }
  };
  Object.defineProperty(Component, 'name', {
    value: name,
    writable: false,
    enumerable: false,
    configurable: true
  });
  Component.displayName = nameWithoutPrefix;
  Object.keys(RealComponent).forEach(classStatic => {
    Component[classStatic] = RealComponent[classStatic];
  });
  if (instanceMethods != null) {
    Object.assign(Component.prototype, instanceMethods);
  }
  return Component;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibW9kdWxlTmFtZSIsImluc3RhbmNlTWV0aG9kcyIsImlzRVNNb2R1bGUiLCJSZWFsQ29tcG9uZW50IiwiamVzdCIsInJlcXVpcmVBY3R1YWwiLCJkZWZhdWx0IiwiUmVhY3QiLCJyZXF1aXJlIiwiU3VwZXJDbGFzcyIsInByb3RvdHlwZSIsImNvbnN0cnVjdG9yIiwiQ29tcG9uZW50IiwibmFtZSIsImRpc3BsYXlOYW1lIiwicmVuZGVyIiwibmFtZVdpdGhvdXRQcmVmaXgiLCJyZXBsYWNlIiwicHJvcHMiLCJPYmplY3QiLCJhc3NpZ24iLCJkZWZhdWx0UHJvcHMiLCJrZXlzIiwiZm9yRWFjaCIsInByb3AiLCJ1bmRlZmluZWQiLCJjcmVhdGVFbGVtZW50IiwiY2hpbGRyZW4iLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwid3JpdGFibGUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwiY2xhc3NTdGF0aWMiXSwic291cmNlcyI6WyJtb2NrQ29tcG9uZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChtb2R1bGVOYW1lLCBpbnN0YW5jZU1ldGhvZHMsIGlzRVNNb2R1bGUpID0+IHtcbiAgY29uc3QgUmVhbENvbXBvbmVudCA9IGlzRVNNb2R1bGVcbiAgICA/IGplc3QucmVxdWlyZUFjdHVhbChtb2R1bGVOYW1lKS5kZWZhdWx0XG4gICAgOiBqZXN0LnJlcXVpcmVBY3R1YWwobW9kdWxlTmFtZSk7XG4gIGNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxuICBjb25zdCBTdXBlckNsYXNzID1cbiAgICB0eXBlb2YgUmVhbENvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIFJlYWxDb21wb25lbnQucHJvdG90eXBlLmNvbnN0cnVjdG9yIGluc3RhbmNlb2YgUmVhY3QuQ29tcG9uZW50XG4gICAgICA/IFJlYWxDb21wb25lbnRcbiAgICAgIDogUmVhY3QuQ29tcG9uZW50O1xuXG4gIGNvbnN0IG5hbWUgPVxuICAgIFJlYWxDb21wb25lbnQuZGlzcGxheU5hbWUgfHxcbiAgICBSZWFsQ29tcG9uZW50Lm5hbWUgfHxcbiAgICAoUmVhbENvbXBvbmVudC5yZW5kZXIgLy8gaGFuZGxlIFJlYWN0LmZvcndhcmRSZWZcbiAgICAgID8gUmVhbENvbXBvbmVudC5yZW5kZXIuZGlzcGxheU5hbWUgfHwgUmVhbENvbXBvbmVudC5yZW5kZXIubmFtZVxuICAgICAgOiAnVW5rbm93bicpO1xuXG4gIGNvbnN0IG5hbWVXaXRob3V0UHJlZml4ID0gbmFtZS5yZXBsYWNlKC9eKFJDVHxSSykvLCAnJyk7XG5cbiAgY29uc3QgQ29tcG9uZW50ID0gY2xhc3MgZXh0ZW5kcyBTdXBlckNsYXNzIHtcbiAgICBzdGF0aWMgZGlzcGxheU5hbWUgPSAnQ29tcG9uZW50JztcblxuICAgIHJlbmRlcigpIHtcbiAgICAgIGNvbnN0IHByb3BzID0gT2JqZWN0LmFzc2lnbih7fSwgUmVhbENvbXBvbmVudC5kZWZhdWx0UHJvcHMpO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcykge1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLnByb3BzKS5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgICAgIC8vIFdlIGNhbid0IGp1c3QgYXNzaWduIHByb3BzIG9uIHRvcCBvZiBkZWZhdWx0UHJvcHNcbiAgICAgICAgICAvLyBiZWNhdXNlIFJlYWN0IHRyZWF0cyB1bmRlZmluZWQgYXMgc3BlY2lhbCBhbmQgZGlmZmVyZW50IGZyb20gbnVsbC5cbiAgICAgICAgICAvLyBJZiBhIHByb3AgaXMgc3BlY2lmaWVkIGJ1dCBzZXQgdG8gdW5kZWZpbmVkIGl0IGlzIGlnbm9yZWQgYW5kIHRoZVxuICAgICAgICAgIC8vIGRlZmF1bHQgcHJvcCBpcyB1c2VkIGluc3RlYWQuIElmIGl0IGlzIHNldCB0byBudWxsLCB0aGVuIHRoZVxuICAgICAgICAgIC8vIG51bGwgdmFsdWUgb3ZlcndyaXRlcyB0aGUgZGVmYXVsdCB2YWx1ZS5cbiAgICAgICAgICBpZiAodGhpcy5wcm9wc1twcm9wXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwcm9wc1twcm9wXSA9IHRoaXMucHJvcHNbcHJvcF07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQobmFtZVdpdGhvdXRQcmVmaXgsIHByb3BzLCB0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICB9XG4gIH07XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbXBvbmVudCwgJ25hbWUnLCB7XG4gICAgdmFsdWU6IG5hbWUsXG4gICAgd3JpdGFibGU6IGZhbHNlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgfSk7XG5cbiAgQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gbmFtZVdpdGhvdXRQcmVmaXg7XG5cbiAgT2JqZWN0LmtleXMoUmVhbENvbXBvbmVudCkuZm9yRWFjaChjbGFzc1N0YXRpYyA9PiB7XG4gICAgQ29tcG9uZW50W2NsYXNzU3RhdGljXSA9IFJlYWxDb21wb25lbnRbY2xhc3NTdGF0aWNdO1xuICB9KTtcblxuICBpZiAoaW5zdGFuY2VNZXRob2RzICE9IG51bGwpIHtcbiAgICBPYmplY3QuYXNzaWduKENvbXBvbmVudC5wcm90b3R5cGUsIGluc3RhbmNlTWV0aG9kcyk7XG4gIH1cblxuICByZXR1cm4gQ29tcG9uZW50O1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBRyxDQUFDQyxVQUFVLEVBQUVDLGVBQWUsRUFBRUMsVUFBVSxLQUFLO0VBQzVELE1BQU1DLGFBQWEsR0FBR0QsVUFBVSxHQUM1QkUsSUFBSSxDQUFDQyxhQUFhLENBQUNMLFVBQVUsQ0FBQyxDQUFDTSxPQUFPLEdBQ3RDRixJQUFJLENBQUNDLGFBQWEsQ0FBQ0wsVUFBVSxDQUFDO0VBQ2xDLE1BQU1PLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztFQUU5QixNQUFNQyxVQUFVLEdBQ2QsT0FBT04sYUFBYSxLQUFLLFVBQVUsSUFDbkNBLGFBQWEsQ0FBQ08sU0FBUyxDQUFDQyxXQUFXLFlBQVlKLEtBQUssQ0FBQ0ssU0FBUyxHQUMxRFQsYUFBYSxHQUNiSSxLQUFLLENBQUNLLFNBQVM7RUFFckIsTUFBTUMsSUFBSSxHQUNSVixhQUFhLENBQUNXLFdBQVcsSUFDekJYLGFBQWEsQ0FBQ1UsSUFBSSxLQUNqQlYsYUFBYSxDQUFDWSxNQUFNLENBQUM7RUFBQSxFQUNsQlosYUFBYSxDQUFDWSxNQUFNLENBQUNELFdBQVcsSUFBSVgsYUFBYSxDQUFDWSxNQUFNLENBQUNGLElBQUksR0FDN0QsU0FBUyxDQUFDO0VBRWhCLE1BQU1HLGlCQUFpQixHQUFHSCxJQUFJLENBQUNJLE9BQU8sQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDO0VBRXZELE1BQU1MLFNBQVMsR0FBRyxjQUFjSCxVQUFVLENBQUM7SUFDekMsT0FBT0ssV0FBVyxHQUFHLFdBQVc7SUFFaENDLE1BQU1BLENBQUEsRUFBRztNQUNQLE1BQU1HLEtBQUssR0FBR0MsTUFBTSxDQUFDQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUVqQixhQUFhLENBQUNrQixZQUFZLENBQUM7TUFFM0QsSUFBSSxJQUFJLENBQUNILEtBQUssRUFBRTtRQUNkQyxNQUFNLENBQUNHLElBQUksQ0FBQyxJQUFJLENBQUNKLEtBQUssQ0FBQyxDQUFDSyxPQUFPLENBQUNDLElBQUksSUFBSTtVQUN0QztVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0EsSUFBSSxJQUFJLENBQUNOLEtBQUssQ0FBQ00sSUFBSSxDQUFDLEtBQUtDLFNBQVMsRUFBRTtZQUNsQ1AsS0FBSyxDQUFDTSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUNOLEtBQUssQ0FBQ00sSUFBSSxDQUFDO1VBQ2hDO1FBQ0YsQ0FBQyxDQUFDO01BQ0o7TUFFQSxPQUFPakIsS0FBSyxDQUFDbUIsYUFBYSxDQUFDVixpQkFBaUIsRUFBRUUsS0FBSyxFQUFFLElBQUksQ0FBQ0EsS0FBSyxDQUFDUyxRQUFRLENBQUM7SUFDM0U7RUFDRixDQUFDO0VBRURSLE1BQU0sQ0FBQ1MsY0FBYyxDQUFDaEIsU0FBUyxFQUFFLE1BQU0sRUFBRTtJQUN2Q2lCLEtBQUssRUFBRWhCLElBQUk7SUFDWGlCLFFBQVEsRUFBRSxLQUFLO0lBQ2ZDLFVBQVUsRUFBRSxLQUFLO0lBQ2pCQyxZQUFZLEVBQUU7RUFDaEIsQ0FBQyxDQUFDO0VBRUZwQixTQUFTLENBQUNFLFdBQVcsR0FBR0UsaUJBQWlCO0VBRXpDRyxNQUFNLENBQUNHLElBQUksQ0FBQ25CLGFBQWEsQ0FBQyxDQUFDb0IsT0FBTyxDQUFDVSxXQUFXLElBQUk7SUFDaERyQixTQUFTLENBQUNxQixXQUFXLENBQUMsR0FBRzlCLGFBQWEsQ0FBQzhCLFdBQVcsQ0FBQztFQUNyRCxDQUFDLENBQUM7RUFFRixJQUFJaEMsZUFBZSxJQUFJLElBQUksRUFBRTtJQUMzQmtCLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDUixTQUFTLENBQUNGLFNBQVMsRUFBRVQsZUFBZSxDQUFDO0VBQ3JEO0VBRUEsT0FBT1csU0FBUztBQUNsQixDQUFDIiwiaWdub3JlTGlzdCI6W119