5b7b91e770690ec3a7a86dac4ce27e94
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn()
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
_getJestObj().mock('react-native', function () {
  var ReactNative = jest.requireActual('react-native');
  return Object.assign({}, ReactNative, {
    View: ReactNative.View,
    Text: ReactNative.Text,
    ActivityIndicator: function ActivityIndicator(props) {
      return (0, _jsxRuntime.jsx)(ReactNative.View, {
        testID: props.testID || 'activity-indicator'
      });
    }
  });
});
_getJestObj().mock('../../../../src/screens/exercises/vocabulary/VocabularyHeader', function () {
  var _jest$requireActual = jest.requireActual('react-native'),
    View = _jest$requireActual.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "VocabularyHeader"
    }, props));
  };
});
_getJestObj().mock('../../../../src/screens/exercises/vocabulary/VocabularyProgress', function () {
  var _jest$requireActual2 = jest.requireActual('react-native'),
    View = _jest$requireActual2.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "VocabularyProgress"
    }, props));
  };
});
_getJestObj().mock('../../../../src/screens/exercises/vocabulary/VocabularyCategorySelector', function () {
  var _jest$requireActual3 = jest.requireActual('react-native'),
    View = _jest$requireActual3.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "VocabularyCategorySelector"
    }, props));
  };
});
_getJestObj().mock('../../../../src/screens/exercises/vocabulary/VocabularyWordSection', function () {
  var _jest$requireActual4 = jest.requireActual('react-native'),
    View = _jest$requireActual4.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "VocabularyWordSection"
    }, props));
  };
});
_getJestObj().mock('../../../../src/screens/exercises/vocabulary/VocabularyNavigation', function () {
  var _jest$requireActual5 = jest.requireActual('react-native'),
    View = _jest$requireActual5.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "VocabularyNavigation"
    }, props));
  };
});
_getJestObj().mock('../../../../src/components/layout/Container', function () {
  var _jest$requireActual6 = jest.requireActual('react-native'),
    View = _jest$requireActual6.View;
  return function (_ref) {
    var children = _ref.children,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "Container"
    }, props, {
      children: children
    }));
  };
});
_getJestObj().mock('../../../../src/screens/exercises/vocabulary/hooks/useVocabulary');
_getJestObj().mock('../../../../src/hooks/useLastActivity');
_getJestObj().mock('../../../../src/utils/vocabulary/vocabularyDataHelper');
_getJestObj().mock('../../../../src/screens/exercises/vocabulary/style', function () {
  return jest.fn(function () {
    return {
      loadingContainer: {},
      scrollContent: {}
    };
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _native = require("@react-navigation/native");
var _expoRouter = require("expo-router");
var _vocabulary = _interopRequireDefault(require("../../../../src/screens/exercises/vocabulary"));
var _useVocabulary = _interopRequireDefault(require("../../../../src/screens/exercises/vocabulary/hooks/useVocabulary"));
var _useLastActivity = _interopRequireDefault(require("../../../../src/hooks/useLastActivity"));
var _vocabularyDataHelper = require("../../../../src/utils/vocabulary/vocabularyDataHelper");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children"];
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('VocabularyExercise - Comprehensive Tests', function () {
  var mockSaveActivity = jest.fn();
  var mockNavigate = jest.fn();
  var mockGoBack = jest.fn();
  var mockChangeCategory = jest.fn();
  var mockToggleTranslation = jest.fn();
  var mockToggleDetailedProgress = jest.fn();
  var mockHandleNext = jest.fn();
  var mockHandlePrevious = jest.fn();
  var mockSaveData = jest.fn();
  var mockVocabularyData = {
    categories: [{
      name: 'Animals',
      words: [{
        french: 'chien',
        english: 'dog',
        pronunciation: 'dɔɡ'
      }, {
        french: 'chat',
        english: 'cat',
        pronunciation: 'kæt'
      }]
    }, {
      name: 'Colors',
      words: [{
        french: 'rouge',
        english: 'red',
        pronunciation: 'rɛd'
      }, {
        french: 'bleu',
        english: 'blue',
        pronunciation: 'blu'
      }]
    }]
  };
  var setupMocks = function setupMocks() {
    var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var defaultUseVocabulary = Object.assign({
      categoryIndex: 0,
      wordIndex: 0,
      showTranslation: false,
      completedWords: new Set(),
      loaded: true,
      showDetailedProgress: false,
      currentWord: mockVocabularyData.categories[0].words[0],
      currentCategory: mockVocabularyData.categories[0],
      changeCategory: mockChangeCategory,
      toggleTranslation: mockToggleTranslation,
      toggleDetailedProgress: mockToggleDetailedProgress,
      handleNext: mockHandleNext,
      handlePrevious: mockHandlePrevious,
      canGoToPrevious: false,
      isLastWordInExercise: false,
      display: {
        categories: mockVocabularyData.categories,
        wordCounter: {
          current: 1,
          total: 4
        }
      },
      saveData: mockSaveData
    }, overrides);
    _useVocabulary.default.mockReturnValue(defaultUseVocabulary);
    _useLastActivity.default.mockReturnValue({
      saveActivity: mockSaveActivity
    });
    _native.useNavigation.mockReturnValue({
      navigate: mockNavigate,
      goBack: mockGoBack
    });
    _vocabularyDataHelper.getVocabularyData.mockReturnValue(mockVocabularyData);
    _vocabularyDataHelper.getLevelColor.mockReturnValue('#007AFF');
    _vocabularyDataHelper.isBonusLevel.mockReturnValue(false);
  };
  beforeEach(function () {
    jest.clearAllMocks();
    setupMocks();
  });
  describe('Core Functionality and Rendering', function () {
    it('should render the main vocabulary exercise view correctly', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'A1',
            mode: 'classic'
          }
        }
      }));
      expect(_reactNative.screen.getByTestId('VocabularyHeader')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('VocabularyProgress')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('VocabularyCategorySelector')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('VocabularyWordSection')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('VocabularyNavigation')).toBeTruthy();
    });
    it('should call hooks with correct parameters for classic mode', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'B1',
            mode: 'classic'
          }
        }
      }));
      expect(_useVocabulary.default).toHaveBeenCalledWith(mockVocabularyData, 'B1', 'classic');
      expect(_useLastActivity.default).toHaveBeenCalled();
      expect(_vocabularyDataHelper.getVocabularyData).toHaveBeenCalledWith('B1', 'classic');
      expect(_vocabularyDataHelper.getLevelColor).toHaveBeenCalledWith('B1');
    });
    it('should call hooks with correct parameters for fast mode', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'B2',
            mode: 'fast'
          }
        }
      }));
      expect(_useVocabulary.default).toHaveBeenCalledWith(mockVocabularyData, 'B2', 'fast');
      expect(_vocabularyDataHelper.getVocabularyData).toHaveBeenCalledWith('B2', 'fast');
    });
    it('should handle missing route params by using defaults', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {}
        }
      }));
      expect(_vocabularyDataHelper.getVocabularyData).toHaveBeenCalled();
      expect(_useVocabulary.default).toHaveBeenCalled();
    });
    it('should handle completely missing route', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {}
      }));
      expect(_vocabularyDataHelper.getVocabularyData).toHaveBeenCalled();
      expect(_useVocabulary.default).toHaveBeenCalled();
    });
  });
  describe('States and Edge Cases', function () {
    it('should render loading state when not loaded', function () {
      setupMocks({
        loaded: false
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'A1',
            mode: 'classic'
          }
        }
      }));
      expect(_reactNative.screen.getByTestId('activity-indicator')).toBeTruthy();
      expect(_reactNative.screen.queryByTestId('VocabularyWordSection')).toBeNull();
    });
    it('should render loading state when vocabularyData is null', function () {
      _vocabularyDataHelper.getVocabularyData.mockReturnValue(null);
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'A1',
            mode: 'classic'
          }
        }
      }));
      expect(_reactNative.screen.getByTestId('activity-indicator')).toBeTruthy();
      expect(_reactNative.screen.queryByTestId('VocabularyWordSection')).toBeNull();
    });
    it('should render loading state when vocabularyData is undefined', function () {
      _vocabularyDataHelper.getVocabularyData.mockReturnValue(undefined);
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'A1',
            mode: 'classic'
          }
        }
      }));
      expect(_reactNative.screen.getByTestId('activity-indicator')).toBeTruthy();
      expect(_reactNative.screen.queryByTestId('VocabularyWordSection')).toBeNull();
    });
    it('should use classic mode when no mode provided and not bonus level', function () {
      _vocabularyDataHelper.isBonusLevel.mockReturnValue(false);
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'A1'
          }
        }
      }));
      expect(_useVocabulary.default).toHaveBeenCalledWith(mockVocabularyData, 'A1', 'classic');
    });
    it('should use fast mode when no mode provided but is bonus level', function () {
      _vocabularyDataHelper.isBonusLevel.mockReturnValue(true);
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'BONUS1'
          }
        }
      }));
      expect(_useVocabulary.default).toHaveBeenCalledWith(mockVocabularyData, 'BONUS1', 'fast');
    });
    it('should override mode detection when mode is explicitly provided', function () {
      _vocabularyDataHelper.isBonusLevel.mockReturnValue(true);
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'BONUS1',
            mode: 'classic'
          }
        }
      }));
      expect(_useVocabulary.default).toHaveBeenCalledWith(mockVocabularyData, 'BONUS1', 'classic');
    });
  });
  describe('Navigation and User Actions', function () {
    it('should navigate back when back button is pressed', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'A2',
            mode: 'classic'
          }
        }
      }));
      var header = _reactNative.screen.getByTestId('VocabularyHeader');
      var onBackPress = header.props.onBackPress;
      onBackPress();
      expect(_expoRouter.router.push).toHaveBeenCalledWith({
        pathname: "/tabs/exerciseSelection",
        params: {
          level: 'A2'
        }
      });
    });
    it('should call changeCategory when category is selected', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'A1',
            mode: 'classic'
          }
        }
      }));
      var categorySelector = _reactNative.screen.getByTestId('VocabularyCategorySelector');
      var onSelectCategory = categorySelector.props.onSelectCategory;
      onSelectCategory(1);
      expect(mockChangeCategory).toHaveBeenCalledWith(1);
    });
    it('should call toggleTranslation when translation is toggled', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'A1',
            mode: 'classic'
          }
        }
      }));
      var wordSection = _reactNative.screen.getByTestId('VocabularyWordSection');
      var onToggleTranslation = wordSection.props.onToggleTranslation;
      onToggleTranslation();
      expect(mockToggleTranslation).toHaveBeenCalled();
    });
    it('should call toggleDetailedProgress when progress is toggled', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'A1',
            mode: 'classic'
          }
        }
      }));
      var progress = _reactNative.screen.getByTestId('VocabularyProgress');
      var onToggleExpand = progress.props.onToggleExpand;
      onToggleExpand();
      expect(mockToggleDetailedProgress).toHaveBeenCalled();
    });
    it('should call changeCategory from progress when category is pressed', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'A1',
            mode: 'classic'
          }
        }
      }));
      var progress = _reactNative.screen.getByTestId('VocabularyProgress');
      var onCategoryPress = progress.props.onCategoryPress;
      onCategoryPress(1);
      expect(mockChangeCategory).toHaveBeenCalledWith(1);
    });
    it('should call handleNext and saveData when next button is pressed', (0, _asyncToGenerator2.default)(function* () {
      mockHandleNext.mockReturnValue({
        completed: false
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'A1',
            mode: 'classic'
          }
        }
      }));
      var navigation = _reactNative.screen.getByTestId('VocabularyNavigation');
      var onNext = navigation.props.onNext;
      yield onNext();
      expect(mockHandleNext).toHaveBeenCalled();
      expect(mockSaveData).toHaveBeenCalled();
    }));
    it('should navigate back when exercise is completed', (0, _asyncToGenerator2.default)(function* () {
      mockHandleNext.mockReturnValue({
        completed: true
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'A1',
            mode: 'classic'
          }
        }
      }));
      var navigation = _reactNative.screen.getByTestId('VocabularyNavigation');
      var onNext = navigation.props.onNext;
      yield onNext();
      expect(mockHandleNext).toHaveBeenCalled();
      expect(mockGoBack).toHaveBeenCalled();
    }));
    it('should call handlePrevious when previous button is pressed', function () {
      setupMocks({
        canGoToPrevious: true
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'A1',
            mode: 'classic'
          }
        }
      }));
      var navigation = _reactNative.screen.getByTestId('VocabularyNavigation');
      var onPrevious = navigation.props.onPrevious;
      onPrevious();
      expect(mockHandlePrevious).toHaveBeenCalled();
    });
  });
  describe('Activity Saving', function () {
    it('should save activity on component mount', (0, _asyncToGenerator2.default)(function* () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'A1',
            mode: 'classic'
          }
        }
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockSaveActivity).toHaveBeenCalledWith({
          title: 'Vocabulaire ',
          level: 'A1',
          type: 'vocabulary',
          mode: 'classic',
          metadata: {
            word: 0,
            totalWords: 4,
            category: 'Animals',
            categoryIndex: 0,
            wordIndex: 0
          }
        });
      });
    }));
    it('should save activity with correct title for fast mode', (0, _asyncToGenerator2.default)(function* () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'B1',
            mode: 'fast'
          }
        }
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockSaveActivity).toHaveBeenCalledWith({
          title: 'Vocabulaire Fast',
          level: 'B1',
          type: 'vocabulary',
          mode: 'fast',
          metadata: {
            word: 0,
            totalWords: 4,
            category: 'Animals',
            categoryIndex: 0,
            wordIndex: 0
          }
        });
      });
    }));
    it('should not save activity when not loaded', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        loaded: false
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'A1',
            mode: 'classic'
          }
        }
      }));
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 100);
      });
      expect(mockSaveActivity).not.toHaveBeenCalled();
    }));
    it('should not save activity when vocabularyData is null', (0, _asyncToGenerator2.default)(function* () {
      _vocabularyDataHelper.getVocabularyData.mockReturnValue(null);
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'A1',
            mode: 'classic'
          }
        }
      }));
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 100);
      });
      expect(mockSaveActivity).not.toHaveBeenCalled();
    }));
    it('should not save activity when currentWord is null', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        currentWord: null
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'A1',
            mode: 'classic'
          }
        }
      }));
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 100);
      });
      expect(mockSaveActivity).not.toHaveBeenCalled();
    }));
  });
  describe('Component Props Validation', function () {
    it('should pass correct props to VocabularyHeader', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'B2',
            mode: 'fast'
          }
        }
      }));
      var header = _reactNative.screen.getByTestId('VocabularyHeader');
      expect(header.props.level).toBe('B2');
      expect(header.props.mode).toBe('fast');
      expect(typeof header.props.onBackPress).toBe('function');
    });
    it('should pass correct props to VocabularyProgress', function () {
      setupMocks({
        completedWords: new Set(['chien', 'chat']),
        showDetailedProgress: true
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'A1',
            mode: 'classic'
          }
        }
      }));
      var progress = _reactNative.screen.getByTestId('VocabularyProgress');
      expect(progress.props.vocabularyData).toEqual(mockVocabularyData);
      expect(progress.props.completedWords).toEqual(new Set(['chien', 'chat']));
      expect(progress.props.levelColor).toBe('#007AFF');
      expect(progress.props.expanded).toBe(true);
      expect(typeof progress.props.onToggleExpand).toBe('function');
      expect(typeof progress.props.onCategoryPress).toBe('function');
    });
    it('should pass correct props to VocabularyCategorySelector', function () {
      setupMocks({
        categoryIndex: 1
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'A1',
            mode: 'classic'
          }
        }
      }));
      var categorySelector = _reactNative.screen.getByTestId('VocabularyCategorySelector');
      expect(categorySelector.props.categories).toEqual(mockVocabularyData.categories);
      expect(categorySelector.props.selectedIndex).toBe(1);
      expect(categorySelector.props.levelColor).toBe('#007AFF');
      expect(typeof categorySelector.props.onSelectCategory).toBe('function');
    });
    it('should pass correct props to VocabularyWordSection', function () {
      setupMocks({
        showTranslation: true,
        currentWord: mockVocabularyData.categories[0].words[0],
        display: {
          wordCounter: {
            current: 2,
            total: 4
          }
        }
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'A1',
            mode: 'classic'
          }
        }
      }));
      var wordSection = _reactNative.screen.getByTestId('VocabularyWordSection');
      expect(wordSection.props.currentWord).toEqual(mockVocabularyData.categories[0].words[0]);
      expect(wordSection.props.wordCounter).toEqual({
        current: 2,
        total: 4
      });
      expect(wordSection.props.mode).toBe('classic');
      expect(wordSection.props.level).toBe('A1');
      expect(wordSection.props.levelColor).toBe('#007AFF');
      expect(wordSection.props.showTranslation).toBe(true);
      expect(typeof wordSection.props.onToggleTranslation).toBe('function');
    });
    it('should pass correct props to VocabularyNavigation', function () {
      setupMocks({
        canGoToPrevious: true,
        isLastWordInExercise: false
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'A1',
            mode: 'classic'
          }
        }
      }));
      var navigation = _reactNative.screen.getByTestId('VocabularyNavigation');
      expect(navigation.props.canGoPrevious).toBe(true);
      expect(navigation.props.isLast).toBe(false);
      expect(navigation.props.levelColor).toBe('#007AFF');
      expect(typeof navigation.props.onNext).toBe('function');
      expect(typeof navigation.props.onPrevious).toBe('function');
    });
  });
  describe('Error Handling', function () {
    it('should handle getVocabularyData throwing error gracefully', function () {
      _vocabularyDataHelper.getVocabularyData.mockImplementation(function () {
        throw new Error('Data loading failed');
      });
      expect(function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
          route: {
            params: {
              level: 'A1',
              mode: 'classic'
            }
          }
        }));
      }).not.toThrow();
    });
    it('should handle saveActivity error gracefully', (0, _asyncToGenerator2.default)(function* () {
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation(function () {});
      mockSaveActivity.mockImplementation(function () {
        throw new Error('Save failed');
      });
      expect(function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
          route: {
            params: {
              level: 'A1',
              mode: 'classic'
            }
          }
        }));
      }).not.toThrow();
      consoleSpy.mockRestore();
    }));
    it('should handle saveData error in handleNextWord gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockSaveData.mockRejectedValue(new Error('Save failed'));
      mockHandleNext.mockReturnValue({
        completed: false
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_vocabulary.default, {
        route: {
          params: {
            level: 'A1',
            mode: 'classic'
          }
        }
      }));
      var navigation = _reactNative.screen.getByTestId('VocabularyNavigation');
      var onNext = navigation.props.onNext;
      yield expect(onNext()).resolves.not.toThrow();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,