99b0cabe1120379c9885e340b3f3d6a9
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  var ActualReact = jest.requireActual('react');
  var mockAnimatedValue = jest.fn().mockImplementation(function (initialValue) {
    return {
      interpolate: jest.fn().mockReturnValue(initialValue),
      setValue: jest.fn(),
      addListener: jest.fn(),
      removeListener: jest.fn(),
      removeAllListeners: jest.fn(),
      stopAnimation: jest.fn(),
      resetAnimation: jest.fn(),
      _value: initialValue
    };
  });
  return Object.assign({}, RN, {
    Animated: Object.assign({}, RN.Animated, {
      Value: mockAnimatedValue,
      timing: mockTiming
    }),
    ScrollView: ActualReact.forwardRef(function (_ref, ref) {
      var children = _ref.children,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      return (0, _jsxRuntime.jsx)(RN.ScrollView, Object.assign({}, props, {
        ref: ref,
        scrollTo: mockScrollViewScrollTo,
        children: children
      }));
    }),
    TouchableOpacity: function TouchableOpacity(_ref2) {
      var children = _ref2.children,
        props = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
      return (0, _jsxRuntime.jsx)(RN.TouchableOpacity, Object.assign({}, props, {
        onPressIn: function onPressIn() {
          return props.onPressIn == null ? void 0 : props.onPressIn();
        },
        onPressOut: function onPressOut() {
          return props.onPressOut == null ? void 0 : props.onPressOut();
        },
        children: children
      }));
    }
  });
});
_getJestObj().mock('expo-linear-gradient', function () {
  return {
    LinearGradient: function LinearGradient(_ref3) {
      var children = _ref3.children,
        props = (0, _objectWithoutProperties2.default)(_ref3, _excluded3);
      var _require = require('react-native'),
        View = _require.View;
      return (0, _jsxRuntime.jsx)(View, Object.assign({}, props, {
        children: children
      }));
    }
  };
});
_getJestObj().mock('../../../src/components/exercise-common/CategorySelector/style', function () {
  var _jest$requireActual = jest.requireActual('react-native'),
    StyleSheet = _jest$requireActual.StyleSheet;
  return function () {
    return StyleSheet.create({
      container: {},
      backgroundGradient: {},
      scrollView: {},
      scrollContent: {},
      categoryItemWrapper: {},
      categoryTouchable: {},
      selectedCategoryItem: {},
      selectedInner: {},
      selectedCategoryText: {
        color: '#FFFFFF'
      },
      sparkleContainer: {},
      sparkle: {},
      categoryItem: {},
      categoryInner: {},
      categoryText: {}
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _CategorySelector = _interopRequireWildcard(require("../../../src/components/exercise-common/CategorySelector"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children"],
  _excluded2 = ["children"],
  _excluded3 = ["children"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockStart = jest.fn(function (callback) {
  if (callback) callback();
});
var mockTiming = jest.fn(function () {
  return {
    start: mockStart
  };
});
var mockScrollViewScrollTo = jest.fn();
describe('CategorySelector', function () {
  var categories = [{
    id: '1',
    name: 'Grammar'
  }, {
    id: '2',
    name: 'Vocabulary'
  }, {
    id: '3',
    name: 'Reading'
  }];
  beforeEach(function () {
    jest.useFakeTimers();
    jest.clearAllMocks();
    _reactNative2.Animated.Value = jest.fn(function () {
      return {
        interpolate: jest.fn().mockReturnValue(1),
        setValue: jest.fn(),
        addListener: jest.fn(),
        removeListener: jest.fn(),
        removeAllListeners: jest.fn(),
        stopAnimation: jest.fn(),
        resetAnimation: jest.fn()
      };
    });
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  it('should render all categories correctly with minimum props', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories
      })),
      getByText = _render.getByText;
    expect(getByText('Grammar')).toBeTruthy();
    expect(getByText('Vocabulary')).toBeTruthy();
    expect(getByText('Reading')).toBeTruthy();
  });
  it('should render nothing when the categories array is empty', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: []
      })),
      queryByText = _render2.queryByText;
    expect(queryByText('Grammar')).toBeNull();
  });
  it('should display the selected category with the sparkle emoji', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: function onSelectCategory() {}
      })),
      getByText = _render3.getByText;
    expect(getByText('âœ¨')).toBeTruthy();
  });
  it('should call onSelectCategory with the correct category id when a category is pressed', function () {
    var onSelectCategory = jest.fn();
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        onSelectCategory: onSelectCategory
      })),
      getByText = _render4.getByText;
    _reactNative.fireEvent.press(getByText('Vocabulary'));
    expect(onSelectCategory).toHaveBeenCalledWith('2');
  });
  it('should create animations for all categories on mount', (0, _asyncToGenerator2.default)(function* () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: function onSelectCategory() {}
      })),
      getByText = _render5.getByText;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(1);
    }));
    expect(_reactNative2.Animated.Value).toHaveBeenCalledTimes(categories.length);
    expect(_reactNative2.Animated.Value).toHaveBeenCalledWith(1);
    expect(_reactNative2.Animated.Value).toHaveBeenCalledWith(0);
  }));
  it('should trigger animation logic when selectedCategory changes', (0, _asyncToGenerator2.default)(function* () {
    var onSelectCategory = jest.fn();
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: onSelectCategory
      })),
      rerender = _render6.rerender;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "2",
        onSelectCategory: onSelectCategory
      }));
      jest.advanceTimersByTime(300);
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockTiming).toHaveBeenCalledTimes(2);
    });
    expect(mockTiming).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({
      toValue: 0
    }));
    expect(mockTiming).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({
      toValue: 1
    }));
  }));
  it('should trigger press animations on touch', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: function onSelectCategory() {}
      })),
      getByText = _render7.getByText;
    mockTiming.mockClear();
    _reactNative.fireEvent.pressIn(getByText('Vocabulary'));
    expect(mockTiming).toHaveBeenCalledTimes(1);
    expect(mockTiming).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({
      toValue: 0.95,
      useNativeDriver: true
    }));
    _reactNative.fireEvent.pressOut(getByText('Vocabulary'));
    expect(mockTiming).toHaveBeenCalledTimes(2);
    expect(mockTiming).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({
      toValue: 1,
      useNativeDriver: true
    }));
  });
  it('should scroll to the selected category', (0, _asyncToGenerator2.default)(function* () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: function onSelectCategory() {}
      })),
      rerender = _render8.rerender,
      getByText = _render8.getByText;
    var grammarPill = getByText('Grammar').parent;
    var vocabularyPill = getByText('Vocabulary').parent;
    var readingPill = getByText('Reading').parent;
    yield (0, _reactNative.act)(function () {
      _reactNative.fireEvent.layout(grammarPill, {
        nativeEvent: {
          layout: {
            x: 0,
            width: 100
          }
        }
      });
      _reactNative.fireEvent.layout(vocabularyPill, {
        nativeEvent: {
          layout: {
            x: 100,
            width: 100
          }
        }
      });
      _reactNative.fireEvent.layout(readingPill, {
        nativeEvent: {
          layout: {
            x: 200,
            width: 100
          }
        }
      });
    });
    mockScrollViewScrollTo.mockClear();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "2",
        onSelectCategory: function onSelectCategory() {}
      }));
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockScrollViewScrollTo).toHaveBeenCalled();
    });
  }));
  it('should handle user interaction correctly', function () {
    var onSelectCategory = jest.fn();
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: onSelectCategory
      })),
      getByText = _render9.getByText;
    _reactNative.fireEvent.press(getByText('Vocabulary'));
    expect(onSelectCategory).toHaveBeenCalledWith('2');
  });
  describe('areEqual', function () {
    it('should return true for identical props', function () {
      var props = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: [{
          id: '1',
          name: 'Cat1'
        }],
        onSelectCategory: jest.fn()
      };
      var result = (0, _CategorySelector.areEqual)(props, props);
      expect(result).toBe(true);
    });
    it('should return false when selectedCategory changes', function () {
      var prevProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: [],
        onSelectCategory: jest.fn()
      };
      var nextProps = {
        selectedCategory: '2',
        primaryColor: '#000',
        categories: [],
        onSelectCategory: jest.fn()
      };
      var result = (0, _CategorySelector.areEqual)(prevProps, nextProps);
      expect(result).toBe(false);
    });
    it('should return false when primaryColor changes', function () {
      var prevProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: [],
        onSelectCategory: jest.fn()
      };
      var nextProps = {
        selectedCategory: '1',
        primaryColor: '#111',
        categories: [],
        onSelectCategory: jest.fn()
      };
      var result = (0, _CategorySelector.areEqual)(prevProps, nextProps);
      expect(result).toBe(false);
    });
    it('should return true when categories array reference changes but content is the same', function () {
      var categories1 = [{
        id: '1',
        name: 'Cat1'
      }];
      var categories2 = [{
        id: '1',
        name: 'Cat1'
      }];
      var prevProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: categories1,
        onSelectCategory: jest.fn()
      };
      var nextProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: categories2,
        onSelectCategory: jest.fn()
      };
      var result = (0, _CategorySelector.areEqual)(prevProps, nextProps);
      expect(result).toBe(true);
    });
    it('should return true when array reference is the same', function () {
      var categoriesList = [{
        id: '1',
        name: 'Cat1'
      }];
      var prevProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: categoriesList,
        onSelectCategory: jest.fn()
      };
      var nextProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: categoriesList,
        onSelectCategory: jest.fn()
      };
      var result = (0, _CategorySelector.areEqual)(prevProps, nextProps);
      expect(result).toBe(true);
    });
    it('should handle undefined selectedCategory correctly', function () {
      var categories = [];
      var prevProps = {
        selectedCategory: undefined,
        primaryColor: '#000',
        categories: categories,
        onSelectCategory: jest.fn()
      };
      var nextProps = {
        selectedCategory: undefined,
        primaryColor: '#000',
        categories: categories,
        onSelectCategory: jest.fn()
      };
      var result = (0, _CategorySelector.areEqual)(prevProps, nextProps);
      expect(result).toBe(true);
    });
  });
  describe('Edge cases', function () {
    it('should handle empty categories gracefully', function () {
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: [],
          onSelectCategory: function onSelectCategory() {}
        })),
        root = _render0.root;
      expect(root).toBeTruthy();
    });
    it('should handle undefined selectedCategory', function () {
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: undefined,
          onSelectCategory: function onSelectCategory() {}
        })),
        getByText = _render1.getByText;
      expect(getByText('Grammar')).toBeTruthy();
    });
    it('should not crash when selecting non-existent category', function () {
      var onSelectCategory = jest.fn();
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "999",
          onSelectCategory: onSelectCategory
        })),
        getByText = _render10.getByText;
      _reactNative.fireEvent.press(getByText('Grammar'));
      expect(onSelectCategory).toHaveBeenCalledWith('1');
    });
    it('should handle categories with different id types', function () {
      var mixedCategories = [{
        id: 1,
        name: 'Numeric'
      }, {
        id: 'string',
        name: 'String'
      }];
      var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: mixedCategories,
          selectedCategory: 1,
          onSelectCategory: function onSelectCategory() {}
        })),
        getByText = _render11.getByText;
      expect(getByText('âœ¨')).toBeTruthy();
    });
    it('should handle prop changes without crashing', function () {
      var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: function onSelectCategory() {},
          primaryColor: "#123"
        })),
        rerender = _render12.rerender;
      expect(function () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: [].concat(categories, [{
            id: '4',
            name: 'New'
          }]),
          selectedCategory: "2",
          onSelectCategory: function onSelectCategory() {},
          primaryColor: "#456"
        }));
      }).not.toThrow();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJSTiIsImplc3QiLCJyZXF1aXJlQWN0dWFsIiwiQWN0dWFsUmVhY3QiLCJtb2NrQW5pbWF0ZWRWYWx1ZSIsImZuIiwibW9ja0ltcGxlbWVudGF0aW9uIiwiaW5pdGlhbFZhbHVlIiwiaW50ZXJwb2xhdGUiLCJtb2NrUmV0dXJuVmFsdWUiLCJzZXRWYWx1ZSIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJzdG9wQW5pbWF0aW9uIiwicmVzZXRBbmltYXRpb24iLCJfdmFsdWUiLCJPYmplY3QiLCJhc3NpZ24iLCJBbmltYXRlZCIsIlZhbHVlIiwidGltaW5nIiwibW9ja1RpbWluZyIsIlNjcm9sbFZpZXciLCJmb3J3YXJkUmVmIiwiX3JlZiIsInJlZiIsImNoaWxkcmVuIiwicHJvcHMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwiZGVmYXVsdCIsIl9leGNsdWRlZCIsIl9qc3hSdW50aW1lIiwianN4Iiwic2Nyb2xsVG8iLCJtb2NrU2Nyb2xsVmlld1Njcm9sbFRvIiwiVG91Y2hhYmxlT3BhY2l0eSIsIl9yZWYyIiwiX2V4Y2x1ZGVkMiIsIm9uUHJlc3NJbiIsIm9uUHJlc3NPdXQiLCJMaW5lYXJHcmFkaWVudCIsIl9yZWYzIiwiX2V4Y2x1ZGVkMyIsIl9yZXF1aXJlIiwicmVxdWlyZSIsIlZpZXciLCJfamVzdCRyZXF1aXJlQWN0dWFsIiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsImNvbnRhaW5lciIsImJhY2tncm91bmRHcmFkaWVudCIsInNjcm9sbFZpZXciLCJzY3JvbGxDb250ZW50IiwiY2F0ZWdvcnlJdGVtV3JhcHBlciIsImNhdGVnb3J5VG91Y2hhYmxlIiwic2VsZWN0ZWRDYXRlZ29yeUl0ZW0iLCJzZWxlY3RlZElubmVyIiwic2VsZWN0ZWRDYXRlZ29yeVRleHQiLCJjb2xvciIsInNwYXJrbGVDb250YWluZXIiLCJzcGFya2xlIiwiY2F0ZWdvcnlJdGVtIiwiY2F0ZWdvcnlJbm5lciIsImNhdGVnb3J5VGV4dCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfQ2F0ZWdvcnlTZWxlY3RvciIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX3JlYWN0TmF0aXZlMiIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImhhcyIsImdldCIsInNldCIsIl90IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfcmVxdWlyZTIiLCJtb2NrU3RhcnQiLCJjYWxsYmFjayIsInN0YXJ0IiwiZGVzY3JpYmUiLCJjYXRlZ29yaWVzIiwiaWQiLCJuYW1lIiwiYmVmb3JlRWFjaCIsInVzZUZha2VUaW1lcnMiLCJjbGVhckFsbE1vY2tzIiwiYWZ0ZXJFYWNoIiwidXNlUmVhbFRpbWVycyIsIml0IiwiX3JlbmRlciIsInJlbmRlciIsImdldEJ5VGV4dCIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJfcmVuZGVyMiIsInF1ZXJ5QnlUZXh0IiwidG9CZU51bGwiLCJfcmVuZGVyMyIsInNlbGVjdGVkQ2F0ZWdvcnkiLCJvblNlbGVjdENhdGVnb3J5IiwiX3JlbmRlcjQiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiX3JlbmRlcjUiLCJhY3QiLCJhZHZhbmNlVGltZXJzQnlUaW1lIiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIiwibGVuZ3RoIiwiX3JlbmRlcjYiLCJyZXJlbmRlciIsIndhaXRGb3IiLCJhbnl0aGluZyIsIm9iamVjdENvbnRhaW5pbmciLCJ0b1ZhbHVlIiwiX3JlbmRlcjciLCJtb2NrQ2xlYXIiLCJwcmVzc0luIiwidXNlTmF0aXZlRHJpdmVyIiwicHJlc3NPdXQiLCJfcmVuZGVyOCIsImdyYW1tYXJQaWxsIiwicGFyZW50Iiwidm9jYWJ1bGFyeVBpbGwiLCJyZWFkaW5nUGlsbCIsImxheW91dCIsIm5hdGl2ZUV2ZW50IiwieCIsIndpZHRoIiwidG9IYXZlQmVlbkNhbGxlZCIsIl9yZW5kZXI5IiwicHJpbWFyeUNvbG9yIiwicmVzdWx0IiwiYXJlRXF1YWwiLCJ0b0JlIiwicHJldlByb3BzIiwibmV4dFByb3BzIiwiY2F0ZWdvcmllczEiLCJjYXRlZ29yaWVzMiIsImNhdGVnb3JpZXNMaXN0IiwidW5kZWZpbmVkIiwiX3JlbmRlcjAiLCJyb290IiwiX3JlbmRlcjEiLCJfcmVuZGVyMTAiLCJtaXhlZENhdGVnb3JpZXMiLCJfcmVuZGVyMTEiLCJfcmVuZGVyMTIiLCJjb25jYXQiLCJub3QiLCJ0b1Rocm93Il0sInNvdXJjZXMiOlsiQ2F0ZWdvcnlTZWxlY3Rvci50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCwgYWN0LCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IENhdGVnb3J5U2VsZWN0b3IsIHsgYXJlRXF1YWwgfSBmcm9tICcuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9leGVyY2lzZS1jb21tb24vQ2F0ZWdvcnlTZWxlY3Rvcic7XG5pbXBvcnQgeyBBbmltYXRlZCwgU2Nyb2xsVmlldywgVG91Y2hhYmxlT3BhY2l0eSwgVGV4dCwgVmlldyB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbi8vIC0tLSBOb3V2ZWF1eCBNb2NrcyBkZXMgYW5pbWF0aW9ucyBldCBkZSBTY3JvbGxWaWV3IC0tLVxuY29uc3QgbW9ja1N0YXJ0ID0gamVzdC5mbigoY2FsbGJhY2spID0+IHtcbsKgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbn0pO1xuY29uc3QgbW9ja1RpbWluZyA9IGplc3QuZm4oKCkgPT4gKHsgc3RhcnQ6IG1vY2tTdGFydCB9KSk7XG5jb25zdCBtb2NrU2Nyb2xsVmlld1Njcm9sbFRvID0gamVzdC5mbigpO1xuXG5cbi8vIE1vY2sgQW5pbWF0ZWQuVmFsdWUgZXQgQW5pbWF0ZWQudGltaW5nXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZScsICgpID0+IHtcbiAgY29uc3QgUk4gPSBqZXN0LnJlcXVpcmVBY3R1YWwoJ3JlYWN0LW5hdGl2ZScpO1xuICBjb25zdCBBY3R1YWxSZWFjdCA9IGplc3QucmVxdWlyZUFjdHVhbCgncmVhY3QnKTtcbiAgXG4gIGNvbnN0IG1vY2tBbmltYXRlZFZhbHVlID0gamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbihpbml0aWFsVmFsdWUgPT4gKHtcbiAgICBpbnRlcnBvbGF0ZTogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZShpbml0aWFsVmFsdWUpLFxuICAgIHNldFZhbHVlOiBqZXN0LmZuKCksXG4gICAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICByZW1vdmVMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgIHJlbW92ZUFsbExpc3RlbmVyczogamVzdC5mbigpLFxuICAgIHN0b3BBbmltYXRpb246IGplc3QuZm4oKSxcbiAgICByZXNldEFuaW1hdGlvbjogamVzdC5mbigpLFxuICAgIF92YWx1ZTogaW5pdGlhbFZhbHVlLFxuICB9KSk7XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5STixcbiAgICBBbmltYXRlZDoge1xuICAgICAgLi4uUk4uQW5pbWF0ZWQsXG4gICAgICBWYWx1ZTogbW9ja0FuaW1hdGVkVmFsdWUsXG4gICAgICB0aW1pbmc6IG1vY2tUaW1pbmcsXG4gICAgfSxcbiAgICAvLyBNb2NraW5nIFNjcm9sbFZpZXcgd2l0aCByZWZcbiAgICBTY3JvbGxWaWV3OiBBY3R1YWxSZWFjdC5mb3J3YXJkUmVmKCh7IGNoaWxkcmVuLCAuLi5wcm9wcyB9LCByZWYpID0+IChcbiAgICAgIDxSTi5TY3JvbGxWaWV3IHsuLi5wcm9wc30gcmVmPXtyZWZ9IHNjcm9sbFRvPXttb2NrU2Nyb2xsVmlld1Njcm9sbFRvfT5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9STi5TY3JvbGxWaWV3PlxuICAgICkpLFxuICAgIFRvdWNoYWJsZU9wYWNpdHk6ICh7IGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PiAoXG4gICAgICA8Uk4uVG91Y2hhYmxlT3BhY2l0eVxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgIG9uUHJlc3NJbj17KCkgPT4gcHJvcHMub25QcmVzc0luPy4oKX1cbiAgICAgICAgb25QcmVzc091dD17KCkgPT4gcHJvcHMub25QcmVzc091dD8uKCl9XG4gICAgICA+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvUk4uVG91Y2hhYmxlT3BhY2l0eT5cbiAgICApLFxuICB9O1xufSk7XG5cbi8vIE1vY2sgZXhwby1saW5lYXItZ3JhZGllbnRcbmplc3QubW9jaygnZXhwby1saW5lYXItZ3JhZGllbnQnLCAoKSA9PiAoe1xuwqAgTGluZWFyR3JhZGllbnQ6ICh7IGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PiB7XG7CoCDCoCBjb25zdCB7IFZpZXcgfSA9IHJlcXVpcmUoJ3JlYWN0LW5hdGl2ZScpO1xuwqAgwqAgcmV0dXJuIDxWaWV3IHsuLi5wcm9wc30+e2NoaWxkcmVufTwvVmlldz47XG7CoCB9LFxufSkpO1xuXG4vLyBNb2NrIGR1IHN0eWxlIChzaW1wbGlmacOpKVxuamVzdC5tb2NrKCcuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9leGVyY2lzZS1jb21tb24vQ2F0ZWdvcnlTZWxlY3Rvci9zdHlsZScsICgpID0+IHtcbiAgY29uc3QgeyBTdHlsZVNoZWV0IH0gPSBqZXN0LnJlcXVpcmVBY3R1YWwoJ3JlYWN0LW5hdGl2ZScpO1xuICByZXR1cm4gKCkgPT4gU3R5bGVTaGVldC5jcmVhdGUoe1xuICAgIGNvbnRhaW5lcjoge30sXG4gICAgYmFja2dyb3VuZEdyYWRpZW50OiB7fSxcbiAgICBzY3JvbGxWaWV3OiB7fSxcbiAgICBzY3JvbGxDb250ZW50OiB7fSxcbiAgICBjYXRlZ29yeUl0ZW1XcmFwcGVyOiB7fSxcbiAgICBjYXRlZ29yeVRvdWNoYWJsZToge30sXG4gICAgc2VsZWN0ZWRDYXRlZ29yeUl0ZW06IHt9LFxuICAgIHNlbGVjdGVkSW5uZXI6IHt9LFxuICAgIHNlbGVjdGVkQ2F0ZWdvcnlUZXh0OiB7IGNvbG9yOiAnI0ZGRkZGRicgfSxcbiAgICBzcGFya2xlQ29udGFpbmVyOiB7fSxcbiAgICBzcGFya2xlOiB7fSxcbiAgICBjYXRlZ29yeUl0ZW06IHt9LFxuICAgIGNhdGVnb3J5SW5uZXI6IHt9LFxuICAgIGNhdGVnb3J5VGV4dDoge30sXG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdDYXRlZ29yeVNlbGVjdG9yJywgKCkgPT4ge1xuwqAgY29uc3QgY2F0ZWdvcmllcyA9IFtcbsKgIMKgIHsgaWQ6ICcxJywgbmFtZTogJ0dyYW1tYXInIH0sXG7CoCDCoCB7IGlkOiAnMicsIG5hbWU6ICdWb2NhYnVsYXJ5JyB9LFxuwqAgwqAgeyBpZDogJzMnLCBuYW1lOiAnUmVhZGluZycgfSxcbsKgIF07XG5cbsKgIGJlZm9yZUVhY2goKCkgPT4ge1xuwqAgwqAgamVzdC51c2VGYWtlVGltZXJzKCk7XG7CoCDCoCBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICBBbmltYXRlZC5WYWx1ZSA9IGplc3QuZm4oKCkgPT4gKHtcbiAgICAgIGludGVycG9sYXRlOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKDEpLFxuICAgICAgc2V0VmFsdWU6IGplc3QuZm4oKSxcbiAgICAgIGFkZExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgICByZW1vdmVMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgcmVtb3ZlQWxsTGlzdGVuZXJzOiBqZXN0LmZuKCksXG4gICAgICBzdG9wQW5pbWF0aW9uOiBqZXN0LmZuKCksXG4gICAgICByZXNldEFuaW1hdGlvbjogamVzdC5mbigpLFxuICAgIH0pKTtcbsKgIH0pO1xuXG7CoCBhZnRlckVhY2goKCkgPT4ge1xuwqAgwqAgamVzdC51c2VSZWFsVGltZXJzKCk7XG7CoCB9KTtcblxuwqAgaXQoJ3Nob3VsZCByZW5kZXIgYWxsIGNhdGVnb3JpZXMgY29ycmVjdGx5IHdpdGggbWluaW11bSBwcm9wcycsICgpID0+IHtcbsKgIMKgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPENhdGVnb3J5U2VsZWN0b3IgY2F0ZWdvcmllcz17Y2F0ZWdvcmllc30gLz4pO1xuwqAgwqAgZXhwZWN0KGdldEJ5VGV4dCgnR3JhbW1hcicpKS50b0JlVHJ1dGh5KCk7XG7CoCDCoCBleHBlY3QoZ2V0QnlUZXh0KCdWb2NhYnVsYXJ5JykpLnRvQmVUcnV0aHkoKTtcbsKgIMKgIGV4cGVjdChnZXRCeVRleHQoJ1JlYWRpbmcnKSkudG9CZVRydXRoeSgpO1xuwqAgfSk7XG5cbsKgIGl0KCdzaG91bGQgcmVuZGVyIG5vdGhpbmcgd2hlbiB0aGUgY2F0ZWdvcmllcyBhcnJheSBpcyBlbXB0eScsICgpID0+IHtcbsKgIMKgIGNvbnN0IHsgcXVlcnlCeVRleHQgfSA9IHJlbmRlcig8Q2F0ZWdvcnlTZWxlY3RvciBjYXRlZ29yaWVzPXtbXX0gLz4pO1xuwqAgwqAgZXhwZWN0KHF1ZXJ5QnlUZXh0KCdHcmFtbWFyJykpLnRvQmVOdWxsKCk7XG7CoCB9KTtcblxuwqAgaXQoJ3Nob3VsZCBkaXNwbGF5IHRoZSBzZWxlY3RlZCBjYXRlZ29yeSB3aXRoIHRoZSBzcGFya2xlIGVtb2ppJywgKCkgPT4ge1xuwqAgwqAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcbsKgIMKgIMKgIDxDYXRlZ29yeVNlbGVjdG9yXG7CoCDCoCDCoCDCoCBjYXRlZ29yaWVzPXtjYXRlZ29yaWVzfVxuwqAgwqAgwqAgwqAgc2VsZWN0ZWRDYXRlZ29yeT1cIjFcIlxuwqAgwqAgwqAgwqAgb25TZWxlY3RDYXRlZ29yeT17KCkgPT4ge319XG7CoCDCoCDCoCAvPlxuwqAgwqAgKTtcbsKgIMKgIGV4cGVjdChnZXRCeVRleHQoJ+KcqCcpKS50b0JlVHJ1dGh5KCk7XG7CoCB9KTtcblxuwqAgaXQoJ3Nob3VsZCBjYWxsIG9uU2VsZWN0Q2F0ZWdvcnkgd2l0aCB0aGUgY29ycmVjdCBjYXRlZ29yeSBpZCB3aGVuIGEgY2F0ZWdvcnkgaXMgcHJlc3NlZCcsICgpID0+IHtcbsKgIMKgIGNvbnN0IG9uU2VsZWN0Q2F0ZWdvcnkgPSBqZXN0LmZuKCk7XG7CoCDCoCBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuwqAgwqAgwqAgPENhdGVnb3J5U2VsZWN0b3JcbsKgIMKgIMKgIMKgIGNhdGVnb3JpZXM9e2NhdGVnb3JpZXN9XG7CoCDCoCDCoCDCoCBvblNlbGVjdENhdGVnb3J5PXtvblNlbGVjdENhdGVnb3J5fVxuwqAgwqAgwqAgLz5cbsKgIMKgICk7XG7CoCDCoCBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCdWb2NhYnVsYXJ5JykpO1xuwqAgwqAgZXhwZWN0KG9uU2VsZWN0Q2F0ZWdvcnkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcyJyk7XG7CoCB9KTtcblxuwqAgaXQoJ3Nob3VsZCBjcmVhdGUgYW5pbWF0aW9ucyBmb3IgYWxsIGNhdGVnb3JpZXMgb24gbW91bnQnLCBhc3luYyAoKSA9PiB7XG7CoCDCoCBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuwqAgwqAgwqAgPENhdGVnb3J5U2VsZWN0b3JcbsKgIMKgIMKgIMKgIGNhdGVnb3JpZXM9e2NhdGVnb3JpZXN9XG7CoCDCoCDCoCDCoCBzZWxlY3RlZENhdGVnb3J5PVwiMVwiXG7CoCDCoCDCoCDCoCBvblNlbGVjdENhdGVnb3J5PXsoKSA9PiB7fX1cbsKgIMKgIMKgIC8+XG7CoCDCoCApO1xuXG7CoCDCoCBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuwqAgwqAgwqAgamVzdC5hZHZhbmNlVGltZXJzQnlUaW1lKDEpO1xuwqAgwqAgfSk7XG4gICAgXG4gICAgLy8gTGUgdGVzdCBvcmlnaW5hbCB1dGlsaXNlIE1vY2tBbmltYXRlZFZhbHVlIHF1aSBuJ2V4aXN0ZSBwbHVzIGRhbnMgbGUgbW9jayBtaXMgw6Agam91ci5cbiAgICAvLyBMJ2Fzc2VydGlvbiBkb2l0IMOqdHJlIG1vZGlmacOpZSBwb3VyIHRlc3RlciBxdWUgbGVzIGFwcGVscyBkZSBgbmV3IEFuaW1hdGVkLlZhbHVlYCBzZSBzb250IGJpZW4gcHJvZHVpdHMuXG7CoCDCoCBleHBlY3QoQW5pbWF0ZWQuVmFsdWUpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcyhjYXRlZ29yaWVzLmxlbmd0aCk7XG7CoCDCoCBleHBlY3QoQW5pbWF0ZWQuVmFsdWUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKDEpO1xuwqAgwqAgZXhwZWN0KEFuaW1hdGVkLlZhbHVlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgwKTtcbsKgIH0pO1xuXG7CoCBpdCgnc2hvdWxkIHRyaWdnZXIgYW5pbWF0aW9uIGxvZ2ljIHdoZW4gc2VsZWN0ZWRDYXRlZ29yeSBjaGFuZ2VzJywgYXN5bmMgKCkgPT4ge1xuwqAgwqAgY29uc3Qgb25TZWxlY3RDYXRlZ29yeSA9IGplc3QuZm4oKTtcbsKgIMKgIGNvbnN0IHsgcmVyZW5kZXIgfSA9IHJlbmRlcihcbsKgIMKgIMKgIDxDYXRlZ29yeVNlbGVjdG9yXG7CoCDCoCDCoCDCoCBjYXRlZ29yaWVzPXtjYXRlZ29yaWVzfVxuwqAgwqAgwqAgwqAgc2VsZWN0ZWRDYXRlZ29yeT1cIjFcIlxuwqAgwqAgwqAgwqAgb25TZWxlY3RDYXRlZ29yeT17b25TZWxlY3RDYXRlZ29yeX1cbsKgIMKgIMKgIC8+XG7CoCDCoCApO1xuXG7CoCDCoCBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuwqAgwqAgwqAgcmVyZW5kZXIoXG7CoCDCoCDCoCDCoCA8Q2F0ZWdvcnlTZWxlY3RvclxuwqAgwqAgwqAgwqAgwqAgY2F0ZWdvcmllcz17Y2F0ZWdvcmllc31cbsKgIMKgIMKgIMKgIMKgIHNlbGVjdGVkQ2F0ZWdvcnk9XCIyXCJcbsKgIMKgIMKgIMKgIMKgIG9uU2VsZWN0Q2F0ZWdvcnk9e29uU2VsZWN0Q2F0ZWdvcnl9XG7CoCDCoCDCoCDCoCAvPlxuwqAgwqAgwqAgKTtcbsKgIMKgIMKgIGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSgzMDApO1xuwqAgwqAgfSk7XG5cbsKgIMKgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuwqAgwqAgwqAgZXhwZWN0KG1vY2tUaW1pbmcpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygyKTtcbsKgIMKgIH0pO1xuXG7CoCDCoCBleHBlY3QobW9ja1RpbWluZykudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG7CoCDCoCDCoCBleHBlY3QuYW55dGhpbmcoKSxcbsKgIMKgIMKgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHsgdG9WYWx1ZTogMCB9KVxuwqAgwqAgKTtcbsKgIMKgIGV4cGVjdChtb2NrVGltaW5nKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbsKgIMKgIMKgIGV4cGVjdC5hbnl0aGluZygpLFxuwqAgwqAgwqAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoeyB0b1ZhbHVlOiAxIH0pXG7CoCDCoCApO1xuwqAgfSk7XG5cbsKgIGl0KCdzaG91bGQgdHJpZ2dlciBwcmVzcyBhbmltYXRpb25zIG9uIHRvdWNoJywgKCkgPT4ge1xuwqAgwqAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcbsKgIMKgIMKgIDxDYXRlZ29yeVNlbGVjdG9yIGNhdGVnb3JpZXM9e2NhdGVnb3JpZXN9IHNlbGVjdGVkQ2F0ZWdvcnk9XCIxXCIgb25TZWxlY3RDYXRlZ29yeT17KCkgPT4ge319IC8+XG7CoCDCoCApO1xuXG7CoCDCoCBtb2NrVGltaW5nLm1vY2tDbGVhcigpO1xuwqAgwqAgXG4gICAgZmlyZUV2ZW50LnByZXNzSW4oZ2V0QnlUZXh0KCdWb2NhYnVsYXJ5JykpO1xuwqAgwqAgZXhwZWN0KG1vY2tUaW1pbmcpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbsKgIMKgIGV4cGVjdChtb2NrVGltaW5nKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbsKgIMKgIMKgIGV4cGVjdC5hbnl0aGluZygpLFxuwqAgwqAgwqAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoeyB0b1ZhbHVlOiAwLjk1LCB1c2VOYXRpdmVEcml2ZXI6IHRydWUgfSlcbsKgIMKgICk7XG7CoCDCoCBcbiAgICBmaXJlRXZlbnQucHJlc3NPdXQoZ2V0QnlUZXh0KCdWb2NhYnVsYXJ5JykpO1xuwqAgwqAgZXhwZWN0KG1vY2tUaW1pbmcpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygyKTtcbsKgIMKgIGV4cGVjdChtb2NrVGltaW5nKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbsKgIMKgIMKgIGV4cGVjdC5hbnl0aGluZygpLFxuwqAgwqAgwqAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoeyB0b1ZhbHVlOiAxLCB1c2VOYXRpdmVEcml2ZXI6IHRydWUgfSlcbsKgIMKgICk7XG7CoCB9KTtcblxuwqAgaXQoJ3Nob3VsZCBzY3JvbGwgdG8gdGhlIHNlbGVjdGVkIGNhdGVnb3J5JywgYXN5bmMgKCkgPT4ge1xuwqAgwqAgY29uc3QgeyByZXJlbmRlciwgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG7CoCDCoCDCoCA8Q2F0ZWdvcnlTZWxlY3RvclxuwqAgwqAgwqAgwqAgY2F0ZWdvcmllcz17Y2F0ZWdvcmllc31cbsKgIMKgIMKgIMKgIHNlbGVjdGVkQ2F0ZWdvcnk9XCIxXCJcbsKgIMKgIMKgIMKgIG9uU2VsZWN0Q2F0ZWdvcnk9eygpID0+IHt9fVxuwqAgwqAgwqAgLz5cbsKgIMKgICk7XG7CoCDCoCBcbsKgIMKgIGNvbnN0IGdyYW1tYXJQaWxsID0gZ2V0QnlUZXh0KCdHcmFtbWFyJykucGFyZW50O1xuwqAgwqAgY29uc3Qgdm9jYWJ1bGFyeVBpbGwgPSBnZXRCeVRleHQoJ1ZvY2FidWxhcnknKS5wYXJlbnQ7XG7CoCDCoCBjb25zdCByZWFkaW5nUGlsbCA9IGdldEJ5VGV4dCgnUmVhZGluZycpLnBhcmVudDtcblxuwqAgwqAgYXdhaXQgYWN0KCgpID0+IHtcbsKgIMKgIMKgIGZpcmVFdmVudC5sYXlvdXQoZ3JhbW1hclBpbGwsIHsgbmF0aXZlRXZlbnQ6IHsgbGF5b3V0OiB7IHg6IDAsIHdpZHRoOiAxMDAgfSB9IH0pO1xuwqAgwqAgwqAgZmlyZUV2ZW50LmxheW91dCh2b2NhYnVsYXJ5UGlsbCwgeyBuYXRpdmVFdmVudDogeyBsYXlvdXQ6IHsgeDogMTAwLCB3aWR0aDogMTAwIH0gfSB9KTtcbsKgIMKgIMKgIGZpcmVFdmVudC5sYXlvdXQocmVhZGluZ1BpbGwsIHsgbmF0aXZlRXZlbnQ6IHsgbGF5b3V0OiB7IHg6IDIwMCwgd2lkdGg6IDEwMCB9IH0gfSk7XG7CoCDCoCB9KTtcbiAgICBcbsKgIMKgIG1vY2tTY3JvbGxWaWV3U2Nyb2xsVG8ubW9ja0NsZWFyKCk7XG5cbsKgIMKgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG7CoCDCoCDCoCByZXJlbmRlcihcbsKgIMKgIMKgIMKgIDxDYXRlZ29yeVNlbGVjdG9yXG7CoCDCoCDCoCDCoCDCoCBjYXRlZ29yaWVzPXtjYXRlZ29yaWVzfVxuwqAgwqAgwqAgwqAgwqAgc2VsZWN0ZWRDYXRlZ29yeT1cIjJcIlxuwqAgwqAgwqAgwqAgwqAgb25TZWxlY3RDYXRlZ29yeT17KCkgPT4ge319XG7CoCDCoCDCoCDCoCAvPlxuwqAgwqAgwqAgKTtcbsKgIMKgIH0pO1xuXG7CoCDCoCBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbsKgIMKgIMKgIGV4cGVjdChtb2NrU2Nyb2xsVmlld1Njcm9sbFRvKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG7CoCDCoCB9KTtcbsKgIH0pO1xuXG7CoCBpdCgnc2hvdWxkIGhhbmRsZSB1c2VyIGludGVyYWN0aW9uIGNvcnJlY3RseScsICgpID0+IHtcbsKgIMKgIGNvbnN0IG9uU2VsZWN0Q2F0ZWdvcnkgPSBqZXN0LmZuKCk7XG7CoCDCoCBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuwqAgwqAgwqAgPENhdGVnb3J5U2VsZWN0b3JcbsKgIMKgIMKgIMKgIGNhdGVnb3JpZXM9e2NhdGVnb3JpZXN9XG7CoCDCoCDCoCDCoCBzZWxlY3RlZENhdGVnb3J5PVwiMVwiXG7CoCDCoCDCoCDCoCBvblNlbGVjdENhdGVnb3J5PXtvblNlbGVjdENhdGVnb3J5fVxuwqAgwqAgwqAgLz5cbsKgIMKgICk7XG5cbsKgIMKgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ1ZvY2FidWxhcnknKSk7XG7CoCDCoCBleHBlY3Qob25TZWxlY3RDYXRlZ29yeSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJzInKTtcbsKgIH0pO1xuXG7CoCBkZXNjcmliZSgnYXJlRXF1YWwnLCAoKSA9PiB7XG7CoCDCoCBpdCgnc2hvdWxkIHJldHVybiB0cnVlIGZvciBpZGVudGljYWwgcHJvcHMnLCAoKSA9PiB7XG7CoCDCoCDCoCBjb25zdCBwcm9wcyA9IHtcbsKgIMKgIMKgIMKgIHNlbGVjdGVkQ2F0ZWdvcnk6ICcxJyxcbsKgIMKgIMKgIMKgIHByaW1hcnlDb2xvcjogJyMwMDAnLFxuwqAgwqAgwqAgwqAgY2F0ZWdvcmllczogW3sgaWQ6ICcxJywgbmFtZTogJ0NhdDEnIH1dLFxuwqAgwqAgwqAgwqAgb25TZWxlY3RDYXRlZ29yeTogamVzdC5mbigpLFxuwqAgwqAgwqAgfTtcbsKgIMKgIMKgIGNvbnN0IHJlc3VsdCA9IGFyZUVxdWFsKHByb3BzLCBwcm9wcyk7XG7CoCDCoCDCoCBleHBlY3QocmVzdWx0KS50b0JlKHRydWUpO1xuwqAgwqAgfSk7XG5cbsKgIMKgIGl0KCdzaG91bGQgcmV0dXJuIGZhbHNlIHdoZW4gc2VsZWN0ZWRDYXRlZ29yeSBjaGFuZ2VzJywgKCkgPT4ge1xuwqAgwqAgwqAgY29uc3QgcHJldlByb3BzID0geyBzZWxlY3RlZENhdGVnb3J5OiAnMScsIHByaW1hcnlDb2xvcjogJyMwMDAnLCBjYXRlZ29yaWVzOiBbXSwgb25TZWxlY3RDYXRlZ29yeTogamVzdC5mbigpIH07XG7CoCDCoCDCoCBjb25zdCBuZXh0UHJvcHMgPSB7IHNlbGVjdGVkQ2F0ZWdvcnk6ICcyJywgcHJpbWFyeUNvbG9yOiAnIzAwMCcsIGNhdGVnb3JpZXM6IFtdLCBvblNlbGVjdENhdGVnb3J5OiBqZXN0LmZuKCkgfTtcbsKgIMKgIMKgIGNvbnN0IHJlc3VsdCA9IGFyZUVxdWFsKHByZXZQcm9wcywgbmV4dFByb3BzKTtcbsKgIMKgIMKgIGV4cGVjdChyZXN1bHQpLnRvQmUoZmFsc2UpO1xuwqAgwqAgfSk7XG5cbsKgIMKgIGl0KCdzaG91bGQgcmV0dXJuIGZhbHNlIHdoZW4gcHJpbWFyeUNvbG9yIGNoYW5nZXMnLCAoKSA9PiB7XG7CoCDCoCDCoCBjb25zdCBwcmV2UHJvcHMgPSB7IHNlbGVjdGVkQ2F0ZWdvcnk6ICcxJywgcHJpbWFyeUNvbG9yOiAnIzAwMCcsIGNhdGVnb3JpZXM6IFtdLCBvblNlbGVjdENhdGVnb3J5OiBqZXN0LmZuKCkgfTtcbsKgIMKgIMKgIGNvbnN0IG5leHRQcm9wcyA9IHsgc2VsZWN0ZWRDYXRlZ29yeTogJzEnLCBwcmltYXJ5Q29sb3I6ICcjMTExJywgY2F0ZWdvcmllczogW10sIG9uU2VsZWN0Q2F0ZWdvcnk6IGplc3QuZm4oKSB9O1xuwqAgwqAgwqAgY29uc3QgcmVzdWx0ID0gYXJlRXF1YWwocHJldlByb3BzLCBuZXh0UHJvcHMpO1xuwqAgwqAgwqAgZXhwZWN0KHJlc3VsdCkudG9CZShmYWxzZSk7XG7CoCDCoCB9KTtcblxuwqAgwqAgaXQoJ3Nob3VsZCByZXR1cm4gdHJ1ZSB3aGVuIGNhdGVnb3JpZXMgYXJyYXkgcmVmZXJlbmNlIGNoYW5nZXMgYnV0IGNvbnRlbnQgaXMgdGhlIHNhbWUnLCAoKSA9PiB7XG7CoCDCoCDCoCBjb25zdCBjYXRlZ29yaWVzMSA9IFt7IGlkOiAnMScsIG5hbWU6ICdDYXQxJyB9XTtcbsKgIMKgIMKgIGNvbnN0IGNhdGVnb3JpZXMyID0gW3sgaWQ6ICcxJywgbmFtZTogJ0NhdDEnIH1dO1xuwqAgwqAgwqAgY29uc3QgcHJldlByb3BzID0geyBzZWxlY3RlZENhdGVnb3J5OiAnMScsIHByaW1hcnlDb2xvcjogJyMwMDAnLCBjYXRlZ29yaWVzOiBjYXRlZ29yaWVzMSwgb25TZWxlY3RDYXRlZ29yeTogamVzdC5mbigpIH07XG7CoCDCoCDCoCBjb25zdCBuZXh0UHJvcHMgPSB7IHNlbGVjdGVkQ2F0ZWdvcnk6ICcxJywgcHJpbWFyeUNvbG9yOiAnIzAwMCcsIGNhdGVnb3JpZXM6IGNhdGVnb3JpZXMyLCBvblNlbGVjdENhdGVnb3J5OiBqZXN0LmZuKCkgfTtcbsKgIMKgIMKgIGNvbnN0IHJlc3VsdCA9IGFyZUVxdWFsKHByZXZQcm9wcywgbmV4dFByb3BzKTtcbsKgIMKgIMKgIGV4cGVjdChyZXN1bHQpLnRvQmUodHJ1ZSk7XG7CoCDCoCB9KTtcblxuwqAgwqAgaXQoJ3Nob3VsZCByZXR1cm4gdHJ1ZSB3aGVuIGFycmF5IHJlZmVyZW5jZSBpcyB0aGUgc2FtZScsICgpID0+IHtcbsKgIMKgIMKgIGNvbnN0IGNhdGVnb3JpZXNMaXN0ID0gW3sgaWQ6ICcxJywgbmFtZTogJ0NhdDEnIH1dO1xuwqAgwqAgwqAgY29uc3QgcHJldlByb3BzID0geyBzZWxlY3RlZENhdGVnb3J5OiAnMScsIHByaW1hcnlDb2xvcjogJyMwMDAnLCBjYXRlZ29yaWVzOiBjYXRlZ29yaWVzTGlzdCwgb25TZWxlY3RDYXRlZ29yeTogamVzdC5mbigpIH07XG7CoCDCoCDCoCBjb25zdCBuZXh0UHJvcHMgPSB7IHNlbGVjdGVkQ2F0ZWdvcnk6ICcxJywgcHJpbWFyeUNvbG9yOiAnIzAwMCcsIGNhdGVnb3JpZXM6IGNhdGVnb3JpZXNMaXN0LCBvblNlbGVjdENhdGVnb3J5OiBqZXN0LmZuKCkgfTtcbsKgIMKgIMKgIGNvbnN0IHJlc3VsdCA9IGFyZUVxdWFsKHByZXZQcm9wcywgbmV4dFByb3BzKTtcbsKgIMKgIMKgIGV4cGVjdChyZXN1bHQpLnRvQmUodHJ1ZSk7XG7CoCDCoCB9KTtcblxuwqAgwqAgaXQoJ3Nob3VsZCBoYW5kbGUgdW5kZWZpbmVkIHNlbGVjdGVkQ2F0ZWdvcnkgY29ycmVjdGx5JywgKCkgPT4ge1xuwqAgwqAgwqAgY29uc3QgY2F0ZWdvcmllcyA9IFtdO1xuwqAgwqAgwqAgY29uc3QgcHJldlByb3BzID0geyBzZWxlY3RlZENhdGVnb3J5OiB1bmRlZmluZWQsIHByaW1hcnlDb2xvcjogJyMwMDAnLCBjYXRlZ29yaWVzLCBvblNlbGVjdENhdGVnb3J5OiBqZXN0LmZuKCkgfTtcbsKgIMKgIMKgIGNvbnN0IG5leHRQcm9wcyA9IHsgc2VsZWN0ZWRDYXRlZ29yeTogdW5kZWZpbmVkLCBwcmltYXJ5Q29sb3I6ICcjMDAwJywgY2F0ZWdvcmllcywgb25TZWxlY3RDYXRlZ29yeTogamVzdC5mbigpIH07XG7CoCDCoCDCoCBjb25zdCByZXN1bHQgPSBhcmVFcXVhbChwcmV2UHJvcHMsIG5leHRQcm9wcyk7XG7CoCDCoCDCoCBleHBlY3QocmVzdWx0KS50b0JlKHRydWUpO1xuwqAgwqAgfSk7XG7CoCB9KTtcblxuwqAgZGVzY3JpYmUoJ0VkZ2UgY2FzZXMnLCAoKSA9PiB7XG7CoCDCoCBpdCgnc2hvdWxkIGhhbmRsZSBlbXB0eSBjYXRlZ29yaWVzIGdyYWNlZnVsbHknLCAoKSA9PiB7XG7CoCDCoCDCoCBjb25zdCB7IHJvb3QgfSA9IHJlbmRlcihcbsKgIMKgIMKgIMKgIDxDYXRlZ29yeVNlbGVjdG9yXG7CoCDCoCDCoCDCoCDCoCBjYXRlZ29yaWVzPXtbXX1cbsKgIMKgIMKgIMKgIMKgIG9uU2VsZWN0Q2F0ZWdvcnk9eygpID0+IHt9fVxuwqAgwqAgwqAgwqAgLz5cbsKgIMKgIMKgICk7XG7CoCDCoCDCoCBleHBlY3Qocm9vdCkudG9CZVRydXRoeSgpO1xuwqAgwqAgfSk7XG5cbsKgIMKgIGl0KCdzaG91bGQgaGFuZGxlIHVuZGVmaW5lZCBzZWxlY3RlZENhdGVnb3J5JywgKCkgPT4ge1xuwqAgwqAgwqAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcbsKgIMKgIMKgIMKgIDxDYXRlZ29yeVNlbGVjdG9yXG7CoCDCoCDCoCDCoCDCoCBjYXRlZ29yaWVzPXtjYXRlZ29yaWVzfVxuwqAgwqAgwqAgwqAgwqAgc2VsZWN0ZWRDYXRlZ29yeT17dW5kZWZpbmVkfVxuwqAgwqAgwqAgwqAgwqAgb25TZWxlY3RDYXRlZ29yeT17KCkgPT4ge319XG7CoCDCoCDCoCDCoCAvPlxuwqAgwqAgwqAgKTtcbsKgIMKgIMKgIGV4cGVjdChnZXRCeVRleHQoJ0dyYW1tYXInKSkudG9CZVRydXRoeSgpO1xuwqAgwqAgfSk7XG5cbsKgIMKgIGl0KCdzaG91bGQgbm90IGNyYXNoIHdoZW4gc2VsZWN0aW5nIG5vbi1leGlzdGVudCBjYXRlZ29yeScsICgpID0+IHtcbsKgIMKgIMKgIGNvbnN0IG9uU2VsZWN0Q2F0ZWdvcnkgPSBqZXN0LmZuKCk7XG7CoCDCoCDCoCBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuwqAgwqAgwqAgwqAgPENhdGVnb3J5U2VsZWN0b3JcbsKgIMKgIMKgIMKgIMKgIGNhdGVnb3JpZXM9e2NhdGVnb3JpZXN9XG7CoCDCoCDCoCDCoCDCoCBzZWxlY3RlZENhdGVnb3J5PVwiOTk5XCJcbsKgIMKgIMKgIMKgIMKgIG9uU2VsZWN0Q2F0ZWdvcnk9e29uU2VsZWN0Q2F0ZWdvcnl9XG7CoCDCoCDCoCDCoCAvPlxuwqAgwqAgwqAgKTtcbsKgIMKgIMKgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ0dyYW1tYXInKSk7XG7CoCDCoCDCoCBleHBlY3Qob25TZWxlY3RDYXRlZ29yeSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJzEnKTtcbsKgIMKgIH0pO1xuXG7CoCDCoCBpdCgnc2hvdWxkIGhhbmRsZSBjYXRlZ29yaWVzIHdpdGggZGlmZmVyZW50IGlkIHR5cGVzJywgKCkgPT4ge1xuwqAgwqAgwqAgY29uc3QgbWl4ZWRDYXRlZ29yaWVzID0gW1xuwqAgwqAgwqAgwqAgeyBpZDogMSwgbmFtZTogJ051bWVyaWMnIH0sXG7CoCDCoCDCoCDCoCB7IGlkOiAnc3RyaW5nJywgbmFtZTogJ1N0cmluZycgfSxcbsKgIMKgIMKgIF07XG7CoCDCoCDCoCBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuwqAgwqAgwqAgwqAgPENhdGVnb3J5U2VsZWN0b3JcbsKgIMKgIMKgIMKgIMKgIGNhdGVnb3JpZXM9e21peGVkQ2F0ZWdvcmllc31cbsKgIMKgIMKgIMKgIMKgIHNlbGVjdGVkQ2F0ZWdvcnk9ezF9XG7CoCDCoCDCoCDCoCDCoCBvblNlbGVjdENhdGVnb3J5PXsoKSA9PiB7fX1cbsKgIMKgIMKgIMKgIC8+XG7CoCDCoCDCoCApO1xuwqAgwqAgwqAgZXhwZWN0KGdldEJ5VGV4dCgn4pyoJykpLnRvQmVUcnV0aHkoKTtcbsKgIMKgIH0pO1xuXG7CoCDCoCBpdCgnc2hvdWxkIGhhbmRsZSBwcm9wIGNoYW5nZXMgd2l0aG91dCBjcmFzaGluZycsICgpID0+IHtcbsKgIMKgIMKgIGNvbnN0IHsgcmVyZW5kZXIgfSA9IHJlbmRlcihcbsKgIMKgIMKgIMKgIDxDYXRlZ29yeVNlbGVjdG9yXG7CoCDCoCDCoCDCoCDCoCBjYXRlZ29yaWVzPXtjYXRlZ29yaWVzfVxuwqAgwqAgwqAgwqAgwqAgc2VsZWN0ZWRDYXRlZ29yeT1cIjFcIlxuwqAgwqAgwqAgwqAgwqAgb25TZWxlY3RDYXRlZ29yeT17KCkgPT4ge319XG7CoCDCoCDCoCDCoCDCoCBwcmltYXJ5Q29sb3I9XCIjMTIzXCJcbsKgIMKgIMKgIMKgIC8+XG7CoCDCoCDCoCApO1xuwqAgwqAgwqAgZXhwZWN0KCgpID0+IHtcbsKgIMKgIMKgIMKgIHJlcmVuZGVyKFxuwqAgwqAgwqAgwqAgwqAgPENhdGVnb3J5U2VsZWN0b3JcbsKgIMKgIMKgIMKgIMKgIMKgIGNhdGVnb3JpZXM9e1suLi5jYXRlZ29yaWVzLCB7IGlkOiAnNCcsIG5hbWU6ICdOZXcnIH1dfVxuwqAgwqAgwqAgwqAgwqAgwqAgc2VsZWN0ZWRDYXRlZ29yeT1cIjJcIlxuwqAgwqAgwqAgwqAgwqAgwqAgb25TZWxlY3RDYXRlZ29yeT17KCkgPT4ge319XG7CoCDCoCDCoCDCoCDCoCDCoCBwcmltYXJ5Q29sb3I9XCIjNDU2XCJcbsKgIMKgIMKgIMKgIMKgIC8+XG7CoCDCoCDCoCDCoCApO1xuwqAgwqAgwqAgfSkubm90LnRvVGhyb3coKTtcbsKgIMKgIH0pO1xuwqAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiJBQWNBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxjQUFjLEVBQUUsWUFBTTtFQUM5QixJQUFNQyxFQUFFLEdBQUdDLElBQUksQ0FBQ0MsYUFBYSxDQUFDLGNBQWMsQ0FBQztFQUM3QyxJQUFNQyxXQUFXLEdBQUdGLElB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