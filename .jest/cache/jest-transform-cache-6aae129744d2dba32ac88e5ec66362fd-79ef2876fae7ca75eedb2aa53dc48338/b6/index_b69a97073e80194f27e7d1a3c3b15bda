f9f7d006ed767a9ce781f7db48480d7a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _vectorIcons = require("@expo/vector-icons");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var OptionsList = function OptionsList(_ref) {
  var _ref$options = _ref.options,
    options = _ref$options === void 0 ? [] : _ref$options,
    _ref$selectedOptionId = _ref.selectedOptionId,
    selectedOptionId = _ref$selectedOptionId === void 0 ? null : _ref$selectedOptionId,
    onSelectOption = _ref.onSelectOption,
    _ref$correctOptionId = _ref.correctOptionId,
    correctOptionId = _ref$correctOptionId === void 0 ? null : _ref$correctOptionId,
    _ref$showCorrectAnswe = _ref.showCorrectAnswer,
    showCorrectAnswer = _ref$showCorrectAnswe === void 0 ? false : _ref$showCorrectAnswe,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$primaryColor = _ref.primaryColor,
    primaryColor = _ref$primaryColor === void 0 ? "#5E60CE" : _ref$primaryColor,
    _ref$layout = _ref.layout,
    layout = _ref$layout === void 0 ? "vertical" : _ref$layout;
  var isCorrectOption = function isCorrectOption(optionId) {
    return showCorrectAnswer && optionId === correctOptionId;
  };
  var isIncorrectSelection = function isIncorrectSelection(optionId) {
    return showCorrectAnswer && selectedOptionId === optionId && optionId !== correctOptionId;
  };
  var getOptionStyle = function getOptionStyle(optionId) {
    if (isCorrectOption(optionId)) {
      return _style.default.correctOption;
    }
    if (isIncorrectSelection(optionId)) {
      return _style.default.incorrectOption;
    }
    if (selectedOptionId === optionId) {
      return Object.assign({}, _style.default.selectedOption, {
        borderColor: primaryColor
      });
    }
    return _style.default.option;
  };
  var getOptionTextStyle = function getOptionTextStyle(optionId) {
    if (isCorrectOption(optionId)) {
      return _style.default.correctOptionText;
    }
    if (isIncorrectSelection(optionId)) {
      return _style.default.incorrectOptionText;
    }
    if (selectedOptionId === optionId) {
      return Object.assign({}, _style.default.selectedOptionText, {
        color: primaryColor
      });
    }
    return _style.default.optionText;
  };
  var handleOptionPress = (0, _react.useCallback)(function (optionId) {
    return function () {
      if (!disabled) onSelectOption(optionId);
    };
  }, [onSelectOption, disabled]);
  var renderVerticalOptions = function renderVerticalOptions() {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.verticalContainer,
      children: options.map(function (option) {
        return (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
          style: [_style.default.optionItem, getOptionStyle(option.id)],
          onPress: handleOptionPress(option.id),
          disabled: disabled,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [_style.default.optionItemText, getOptionTextStyle(option.id)],
            children: option.text
          }), isCorrectOption(option.id) && (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
            name: "checkmark-circle",
            size: 24,
            color: "#10B981"
          }), isIncorrectSelection(option.id) && (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
            name: "close-circle",
            size: 24,
            color: "#EF4444"
          }), selectedOptionId === option.id && !showCorrectAnswer && (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [_style.default.selectedIndicator, {
              backgroundColor: primaryColor
            }]
          })]
        }, option.id);
      })
    });
  };
  var renderGridOptions = function renderGridOptions() {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.gridContainer,
      children: options.map(function (option) {
        return (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
          style: [_style.default.gridOptionItem, getOptionStyle(option.id), {
            width: `${100 / Math.min(options.length, 2) - 2}%`
          }],
          onPress: handleOptionPress(option.id),
          disabled: disabled,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [_style.default.gridOptionText, getOptionTextStyle(option.id)],
            children: option.text
          }), isCorrectOption(option.id) && (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
            name: "checkmark-circle",
            size: 24,
            color: "#10B981"
          }), isIncorrectSelection(option.id) && (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
            name: "close-circle",
            size: 24,
            color: "#EF4444"
          })]
        }, option.id);
      })
    });
  };
  return layout === "vertical" ? renderVerticalOptions() : renderGridOptions();
};
function areEqual(prevProps, nextProps) {
  return prevProps.selectedOptionId === nextProps.selectedOptionId && prevProps.correctOptionId === nextProps.correctOptionId && prevProps.showCorrectAnswer === nextProps.showCorrectAnswer && prevProps.disabled === nextProps.disabled && prevProps.primaryColor === nextProps.primaryColor && prevProps.layout === nextProps.layout && prevProps.options === nextProps.options;
}
var _default = exports.default = (0, _react.memo)(OptionsList, areEqual);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,