80a7ec3f794e23a74efb8724c37306fc
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _useModalAnimation = _interopRequireDefault(require("../../../../src/components/ui/Modal/useModalAnimation"));
var mockAnimatedValue = {
  interpolate: jest.fn(),
  addListener: jest.fn(),
  removeAllListeners: jest.fn()
};
jest.spyOn(_reactNative2.Animated, 'Value').mockImplementation(function () {
  return mockAnimatedValue;
});
var mockStart = jest.fn();
jest.spyOn(_reactNative2.Animated, 'timing').mockImplementation(function () {
  return {
    start: mockStart,
    stop: jest.fn()
  };
});
describe('useModalAnimation', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('should not start animation if isVisible is false on initial render', function () {
    (0, _reactNative.renderHook)(function () {
      return (0, _useModalAnimation.default)({
        isVisible: false
      });
    });
    expect(_reactNative2.Animated.timing).not.toHaveBeenCalled();
  });
  it('should start animation when isVisible becomes true', function () {
    var _renderHook = (0, _reactNative.renderHook)(function (_ref) {
        var isVisible = _ref.isVisible;
        return (0, _useModalAnimation.default)({
          isVisible: isVisible
        });
      }, {
        initialProps: {
          isVisible: false
        }
      }),
      rerender = _renderHook.rerender;
    rerender({
      isVisible: true
    });
    expect(_reactNative2.Animated.timing).toHaveBeenCalledTimes(1);
    expect(mockStart).toHaveBeenCalledTimes(1);
  });
  it('should call Animated.timing with the correct values for "top" position', function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function (_ref2) {
        var isVisible = _ref2.isVisible,
          position = _ref2.position;
        return (0, _useModalAnimation.default)({
          isVisible: isVisible,
          position: position
        });
      }, {
        initialProps: {
          isVisible: false,
          position: 'top'
        }
      }),
      rerender = _renderHook2.rerender;
    rerender({
      isVisible: true,
      position: 'top'
    });
    expect(_reactNative2.Animated.timing).toHaveBeenCalledWith(mockAnimatedValue, expect.objectContaining({
      toValue: 1,
      duration: 300
    }));
  });
  it('should return the correct transform styles for "top" position', function () {
    var result;
    (0, _reactNative.act)(function () {
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useModalAnimation.default)({
          isVisible: true,
          position: 'top'
        });
      });
      result = _renderHook3.result;
    });
    expect(result.current.transformStyle).toEqual(expect.objectContaining({
      transform: expect.arrayContaining([expect.objectContaining({
        translateY: expect.any(Object)
      })])
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9yZWFjdE5hdGl2ZTIiLCJfdXNlTW9kYWxBbmltYXRpb24iLCJtb2NrQW5pbWF0ZWRWYWx1ZSIsImludGVycG9sYXRlIiwiamVzdCIsImZuIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJzcHlPbiIsIkFuaW1hdGVkIiwibW9ja0ltcGxlbWVudGF0aW9uIiwibW9ja1N0YXJ0Iiwic3RhcnQiLCJzdG9wIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIml0IiwicmVuZGVySG9vayIsInVzZU1vZGFsQW5pbWF0aW9uIiwiaXNWaXNpYmxlIiwiZXhwZWN0IiwidGltaW5nIiwibm90IiwidG9IYXZlQmVlbkNhbGxlZCIsIl9yZW5kZXJIb29rIiwiX3JlZiIsImluaXRpYWxQcm9wcyIsInJlcmVuZGVyIiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIiwiX3JlbmRlckhvb2syIiwiX3JlZjIiLCJwb3NpdGlvbiIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwib2JqZWN0Q29udGFpbmluZyIsInRvVmFsdWUiLCJkdXJhdGlvbiIsInJlc3VsdCIsImFjdCIsIl9yZW5kZXJIb29rMyIsImN1cnJlbnQiLCJ0cmFuc2Zvcm1TdHlsZSIsInRvRXF1YWwiLCJ0cmFuc2Zvcm0iLCJhcnJheUNvbnRhaW5pbmciLCJ0cmFuc2xhdGVZIiwiYW55IiwiT2JqZWN0Il0sInNvdXJjZXMiOlsidXNlTW9kYWxBbmltYXRpb24udGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyByZW5kZXJIb29rLCBhY3QgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCB7IEFuaW1hdGVkIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcclxuaW1wb3J0IHVzZU1vZGFsQW5pbWF0aW9uIGZyb20gJy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3VpL01vZGFsL3VzZU1vZGFsQW5pbWF0aW9uJztcclxuXHJcbi8vIE1vY2sgdGhlIEFuaW1hdGVkLlZhbHVlIGNvbnN0cnVjdG9yXHJcbmNvbnN0IG1vY2tBbmltYXRlZFZhbHVlID0ge1xyXG4gIGludGVycG9sYXRlOiBqZXN0LmZuKCksXHJcbiAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKSxcclxuICByZW1vdmVBbGxMaXN0ZW5lcnM6IGplc3QuZm4oKSxcclxufTtcclxuamVzdC5zcHlPbihBbmltYXRlZCwgJ1ZhbHVlJykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IG1vY2tBbmltYXRlZFZhbHVlKTtcclxuXHJcbi8vIFNweSBvbiBBbmltYXRlZC50aW1pbmdcclxuY29uc3QgbW9ja1N0YXJ0ID0gamVzdC5mbigpO1xyXG5qZXN0LnNweU9uKEFuaW1hdGVkLCAndGltaW5nJykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XHJcbiAgc3RhcnQ6IG1vY2tTdGFydCxcclxuICBzdG9wOiBqZXN0LmZuKCksXHJcbn0pKTtcclxuXHJcbmRlc2NyaWJlKCd1c2VNb2RhbEFuaW1hdGlvbicsICgpID0+IHtcclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIC8vIENsZWFyIG1vY2tzIGJlZm9yZSBlYWNoIHRlc3QgdG8gcHJldmVudCBzaWRlIGVmZmVjdHNcclxuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIG5vdCBzdGFydCBhbmltYXRpb24gaWYgaXNWaXNpYmxlIGlzIGZhbHNlIG9uIGluaXRpYWwgcmVuZGVyJywgKCkgPT4ge1xyXG4gICAgcmVuZGVySG9vaygoKSA9PiB1c2VNb2RhbEFuaW1hdGlvbih7IGlzVmlzaWJsZTogZmFsc2UgfSkpO1xyXG4gICAgZXhwZWN0KEFuaW1hdGVkLnRpbWluZykubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBzdGFydCBhbmltYXRpb24gd2hlbiBpc1Zpc2libGUgYmVjb21lcyB0cnVlJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyByZXJlbmRlciB9ID0gcmVuZGVySG9vaygoeyBpc1Zpc2libGUgfSkgPT4gdXNlTW9kYWxBbmltYXRpb24oeyBpc1Zpc2libGUgfSksIHtcclxuICAgICAgaW5pdGlhbFByb3BzOiB7IGlzVmlzaWJsZTogZmFsc2UgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIHJlcmVuZGVyKHsgaXNWaXNpYmxlOiB0cnVlIH0pO1xyXG5cclxuICAgIGV4cGVjdChBbmltYXRlZC50aW1pbmcpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcclxuICAgIGV4cGVjdChtb2NrU3RhcnQpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBjYWxsIEFuaW1hdGVkLnRpbWluZyB3aXRoIHRoZSBjb3JyZWN0IHZhbHVlcyBmb3IgXCJ0b3BcIiBwb3NpdGlvbicsICgpID0+IHtcclxuICAgIGNvbnN0IHsgcmVyZW5kZXIgfSA9IHJlbmRlckhvb2soKHsgaXNWaXNpYmxlLCBwb3NpdGlvbiB9KSA9PiB1c2VNb2RhbEFuaW1hdGlvbih7IGlzVmlzaWJsZSwgcG9zaXRpb24gfSksIHtcclxuICAgICAgaW5pdGlhbFByb3BzOiB7IGlzVmlzaWJsZTogZmFsc2UsIHBvc2l0aW9uOiAndG9wJyB9LFxyXG4gICAgfSk7XHJcblxyXG4gICAgcmVyZW5kZXIoeyBpc1Zpc2libGU6IHRydWUsIHBvc2l0aW9uOiAndG9wJyB9KTtcclxuXHJcbiAgICBleHBlY3QoQW5pbWF0ZWQudGltaW5nKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcclxuICAgICAgbW9ja0FuaW1hdGVkVmFsdWUsIC8vIE5vdyBhIHZhbGlkIEFuaW1hdGVkLlZhbHVlIG1vY2tcclxuICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xyXG4gICAgICAgIHRvVmFsdWU6IDEsXHJcbiAgICAgICAgZHVyYXRpb246IDMwMCxcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgcmV0dXJuIHRoZSBjb3JyZWN0IHRyYW5zZm9ybSBzdHlsZXMgZm9yIFwidG9wXCIgcG9zaXRpb24nLCAoKSA9PiB7XHJcbiAgICAvLyBVc2UgYGFjdGAgdG8gZW5zdXJlIHNpZGUgZWZmZWN0cyBhcmUgYXBwbGllZCBmb3IgcmVuZGVySG9va1xyXG4gICAgbGV0IHJlc3VsdDtcclxuICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgICh7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VNb2RhbEFuaW1hdGlvbih7IGlzVmlzaWJsZTogdHJ1ZSwgcG9zaXRpb246ICd0b3AnIH0pKSk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnRyYW5zZm9ybVN0eWxlKS50b0VxdWFsKFxyXG4gICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XHJcbiAgICAgICAgdHJhbnNmb3JtOiBleHBlY3QuYXJyYXlDb250YWluaW5nKFtcclxuICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcclxuICAgICAgICAgICAgdHJhbnNsYXRlWTogZXhwZWN0LmFueShPYmplY3QpLFxyXG4gICAgICAgICAgfSksXHJcbiAgICAgICAgXSksXHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH0pO1xyXG59KTsiXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxhQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxrQkFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBR0EsSUFBTUksaUJBQWlCLEdBQUc7RUFDeEJDLFdBQVcsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztFQUN0QkMsV0FB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