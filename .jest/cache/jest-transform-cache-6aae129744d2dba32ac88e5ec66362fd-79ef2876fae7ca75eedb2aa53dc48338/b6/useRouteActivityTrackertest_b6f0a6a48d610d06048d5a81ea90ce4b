42c4b4d86f1bbfc4ed20a7b29238b7f5
_getJestObj().mock('expo-router', function () {
  return {
    useSegments: jest.fn(function () {
      return [];
    }),
    usePathname: jest.fn(function () {
      return '/';
    })
  };
});
_getJestObj().mock('../../src/hooks/useActivityMetrics', function () {
  return {
    __esModule: true,
    default: jest.fn(function () {
      return {
        startSession: jest.fn(),
        endSession: jest.fn(),
        updateStreak: jest.fn()
      };
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactNative = require("@testing-library/react-native");
var _useRouteActivityTracker = _interopRequireDefault(require("../../src/hooks/useRouteActivityTracker"));
function _getJestObj() {
  var _require10 = require("@jest/globals"),
    jest = _require10.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useRouteActivityTracker', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('Fonctions utilitaires extraites', function () {
    it('devrait détecter correctement les exercices', function () {
      var mockStartSession = jest.fn();
      var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
      useActivityMetrics.mockReturnValue({
        startSession: mockStartSession,
        endSession: jest.fn(),
        updateStreak: jest.fn()
      });
      var _require = require('expo-router'),
        useSegments = _require.useSegments;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');
      jest.clearAllMocks();
      useSegments.mockReturnValue(['level', 'GrammarExercise']);
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('GrammarExercise');
      jest.clearAllMocks();
      useSegments.mockReturnValue(['level', 'Assessment']);
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('Assessment');
    });
    it('devrait gérer les transitions entre exercices', function () {
      var mockStartSession = jest.fn();
      var mockEndSession = jest.fn();
      var mockUpdateStreak = jest.fn();
      var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
      useActivityMetrics.mockReturnValue({
        startSession: mockStartSession,
        endSession: mockEndSession,
        updateStreak: mockUpdateStreak
      });
      var _require2 = require('expo-router'),
        useSegments = _require2.useSegments,
        usePathname = _require2.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');
      expect(mockStartSession).toHaveBeenCalledTimes(1);
      jest.clearAllMocks();
      useSegments.mockReturnValue(['level', 'GrammarExercise']);
      usePathname.mockReturnValue('/level/GrammarExercise');
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('GrammarExercise');
      expect(mockStartSession).toHaveBeenCalledTimes(1);
    });
    it('devrait gérer les erreurs de session gracieusement', function () {
      var mockStartSession = jest.fn().mockImplementation(function () {
        throw new Error('Erreur de session');
      });
      var mockEndSession = jest.fn();
      var mockUpdateStreak = jest.fn();
      var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
      useActivityMetrics.mockReturnValue({
        startSession: mockStartSession,
        endSession: mockEndSession,
        updateStreak: mockUpdateStreak
      });
      var _require3 = require('expo-router'),
        useSegments = _require3.useSegments,
        usePathname = _require3.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      expect(function () {
        (0, _reactNative.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        });
      }).not.toThrow();
    });
    it('devrait éviter les re-déclenchements inutiles', function () {
      var mockStartSession = jest.fn();
      var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
      useActivityMetrics.mockReturnValue({
        startSession: mockStartSession,
        endSession: jest.fn(),
        updateStreak: jest.fn()
      });
      var _require4 = require('expo-router'),
        useSegments = _require4.useSegments,
        usePathname = _require4.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      var hook = (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledTimes(1);
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      hook.rerender();
      expect(mockStartSession).toHaveBeenCalledTimes(1);
    });
    it('devrait nettoyer correctement lors du démontage', function () {
      var mockStartSession = jest.fn();
      var mockEndSession = jest.fn();
      var mockUpdateStreak = jest.fn();
      var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
      useActivityMetrics.mockReturnValue({
        startSession: mockStartSession,
        endSession: mockEndSession,
        updateStreak: mockUpdateStreak
      });
      var _require5 = require('expo-router'),
        useSegments = _require5.useSegments,
        usePathname = _require5.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      var hook = (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');
      expect(mockStartSession).toHaveBeenCalledTimes(1);
      expect(mockEndSession).not.toHaveBeenCalled();
      hook.unmount();
      expect(mockEndSession).toHaveBeenCalledTimes(1);
    });
    it('devrait diagnostiquer le comportement de nettoyage', function () {
      var mockStartSession = jest.fn();
      var mockEndSession = jest.fn();
      var mockUpdateStreak = jest.fn();
      var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
      useActivityMetrics.mockReturnValue({
        startSession: mockStartSession,
        endSession: mockEndSession,
        updateStreak: mockUpdateStreak
      });
      var _require6 = require('expo-router'),
        useSegments = _require6.useSegments,
        usePathname = _require6.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      console.log('Avant renderHook');
      var hook = (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      console.log('Après renderHook - startSession appelé:', mockStartSession.mock.calls.length);
      console.log('endSession appelé avant unmount:', mockEndSession.mock.calls.length);
      hook.unmount();
      console.log('Après unmount - endSession appelé:', mockEndSession.mock.calls.length);
      if (mockEndSession.mock.calls.length === 0) {
        console.warn('DIAGNOSTIC: endSession n\'est pas appelé lors du démontage. Vérifiez l\'implémentation du hook useRouteActivityTracker.');
      }
    });
  });
  it('devrait s\'initialiser sans erreur', function () {
    var _require7 = require('expo-router'),
      useSegments = _require7.useSegments,
      usePathname = _require7.usePathname;
    useSegments.mockReturnValue(['home']);
    usePathname.mockReturnValue('/home');
    expect(function () {
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
    }).not.toThrow();
  });
  it('devrait détecter un exercice de vocabulaire', function () {
    var mockStartSession = jest.fn();
    var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
    useActivityMetrics.mockReturnValue({
      startSession: mockStartSession,
      endSession: jest.fn(),
      updateStreak: jest.fn()
    });
    var _require8 = require('expo-router'),
      useSegments = _require8.useSegments,
      usePathname = _require8.usePathname;
    useSegments.mockReturnValue(['level', 'VocabularyExercise']);
    usePathname.mockReturnValue('/level/VocabularyExercise');
    (0, _reactNative.renderHook)(function () {
      return (0, _useRouteActivityTracker.default)();
    });
    expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');
  });
  it('devrait détecter un assessment', function () {
    var mockStartSession = jest.fn();
    var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
    useActivityMetrics.mockReturnValue({
      startSession: mockStartSession,
      endSession: jest.fn(),
      updateStreak: jest.fn()
    });
    var _require9 = require('expo-router'),
      useSegments = _require9.useSegments,
      usePathname = _require9.usePathname;
    useSegments.mockReturnValue(['level', 'Assessment']);
    usePathname.mockReturnValue('/level/Assessment');
    (0, _reactNative.renderHook)(function () {
      return (0, _useRouteActivityTracker.default)();
    });
    expect(mockStartSession).toHaveBeenCalledWith('Assessment');
  });
  it('ne devrait pas démarrer de session pour une page normale', function () {
    var mockStartSession = jest.fn();
    var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
    useActivityMetrics.mockReturnValue({
      startSession: mockStartSession,
      endSession: jest.fn(),
      updateStreak: jest.fn()
    });
    var _require0 = require('expo-router'),
      useSegments = _require0.useSegments,
      usePathname = _require0.usePathname;
    useSegments.mockReturnValue(['home', 'dashboard']);
    usePathname.mockReturnValue('/home/dashboard');
    (0, _reactNative.renderHook)(function () {
      return (0, _useRouteActivityTracker.default)();
    });
    expect(mockStartSession).not.toHaveBeenCalled();
  });
  it('devrait gérer les segments vides', function () {
    var mockStartSession = jest.fn();
    var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
    useActivityMetrics.mockReturnValue({
      startSession: mockStartSession,
      endSession: jest.fn(),
      updateStreak: jest.fn()
    });
    var _require1 = require('expo-router'),
      useSegments = _require1.useSegments,
      usePathname = _require1.usePathname;
    useSegments.mockReturnValue([]);
    usePathname.mockReturnValue('/');
    expect(function () {
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
    }).not.toThrow();
    expect(mockStartSession).not.toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,