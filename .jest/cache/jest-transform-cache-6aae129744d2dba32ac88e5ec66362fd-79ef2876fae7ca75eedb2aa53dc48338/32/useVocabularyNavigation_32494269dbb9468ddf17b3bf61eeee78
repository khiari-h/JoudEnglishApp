1e78b6a72ee48e6e42e3e1a4652ec3dc
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useVocabularyNavigation;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = require("react");
var _reactNative = require("react-native");
function useVocabularyNavigation(_ref) {
  var exercises = _ref.exercises,
    level = _ref.level,
    mode = _ref.mode,
    categoryIndex = _ref.categoryIndex,
    wordIndex = _ref.wordIndex,
    totalWordsInCategory = _ref.totalWordsInCategory,
    setCategoryIndex = _ref.setCategoryIndex,
    setWordIndex = _ref.setWordIndex,
    setShowTranslation = _ref.setShowTranslation,
    completedWords = _ref.completedWords,
    setCompletedWords = _ref.setCompletedWords;
  var changeCategory = (0, _react.useCallback)(function (newCategoryIndex) {
    setCategoryIndex(newCategoryIndex);
    setWordIndex(0);
    setShowTranslation(false);
  }, [setCategoryIndex, setWordIndex, setShowTranslation]);
  var goToNextWord = (0, _react.useCallback)(function () {
    setWordIndex(function (prev) {
      return prev + 1;
    });
    setShowTranslation(false);
  }, [setWordIndex, setShowTranslation]);
  var goToPreviousWord = (0, _react.useCallback)(function () {
    if (wordIndex > 0) {
      setWordIndex(function (prev) {
        return prev - 1;
      });
      setShowTranslation(false);
      return true;
    }
    return false;
  }, [wordIndex, setWordIndex, setShowTranslation]);
  var markWordAsCompleted = (0, _react.useCallback)(function (catIndex, wIndex) {
    setCompletedWords(function (prev) {
      var categoryCompleted = prev[catIndex] || [];
      var isAlreadyCompleted = categoryCompleted.find(function (word) {
        return typeof word === 'number' && word === wIndex || typeof word === 'object' && word.wordIndex === wIndex;
      });
      if (!isAlreadyCompleted) {
        var newWordEntry = {
          wordIndex: wIndex,
          timestamp: Date.now(),
          date: new Date().toDateString()
        };
        return Object.assign({}, prev, (0, _defineProperty2.default)({}, catIndex, [].concat((0, _toConsumableArray2.default)(categoryCompleted), [newWordEntry])));
      }
      return prev;
    });
  }, [setCompletedWords]);
  var findNextUncompletedCategory = (0, _react.useCallback)(function () {
    var numCategories = exercises.length;
    for (var i = 1; i <= numCategories; i++) {
      var _completedWords$nextI, _category$words;
      var nextIndex = (categoryIndex + i) % numCategories;
      var category = exercises[nextIndex];
      var completedInCategory = ((_completedWords$nextI = completedWords[nextIndex]) == null ? void 0 : _completedWords$nextI.length) || 0;
      var totalInCategory = ((_category$words = category.words) == null ? void 0 : _category$words.length) || 0;
      if (completedInCategory < totalInCategory) return nextIndex;
    }
    return -1;
  }, [exercises, categoryIndex, completedWords]);
  var handleNext = (0, _react.useCallback)(function () {
    markWordAsCompleted(categoryIndex, wordIndex);
    if (wordIndex < totalWordsInCategory - 1) {
      goToNextWord();
    } else {
      var nextCategoryIndex = findNextUncompletedCategory();
      if (nextCategoryIndex === -1) {
        var completionMessage = mode === 'fast' ? `Félicitations ! Vous avez terminé le Fast Vocabulary ${level} !` : `Félicitations ! Vous avez terminé le vocabulaire ${level} !`;
        _reactNative.Alert.alert('Félicitations', completionMessage);
        return {
          completed: true
        };
      } else {
        changeCategory(nextCategoryIndex);
      }
    }
    return {
      completed: false
    };
  }, [categoryIndex, wordIndex, totalWordsInCategory, markWordAsCompleted, goToNextWord, findNextUncompletedCategory, changeCategory, mode, level]);
  var handlePrevious = (0, _react.useCallback)(function () {
    if (wordIndex > 0) {
      goToPreviousWord();
      return;
    }
    if (categoryIndex > 0) {
      var _previousCategory$wor;
      var previousCategoryIndex = categoryIndex - 1;
      var previousCategory = exercises[previousCategoryIndex];
      var lastWordIndex = (((_previousCategory$wor = previousCategory.words) == null ? void 0 : _previousCategory$wor.length) || 1) - 1;
      setCategoryIndex(previousCategoryIndex);
      setWordIndex(lastWordIndex);
      setShowTranslation(false);
    }
  }, [wordIndex, categoryIndex, exercises, goToPreviousWord, setCategoryIndex, setWordIndex, setShowTranslation]);
  return {
    changeCategory: changeCategory,
    goToNextWord: goToNextWord,
    goToPreviousWord: goToPreviousWord,
    markWordAsCompleted: markWordAsCompleted,
    findNextUncompletedCategory: findNextUncompletedCategory,
    handleNext: handleNext,
    handlePrevious: handlePrevious
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,