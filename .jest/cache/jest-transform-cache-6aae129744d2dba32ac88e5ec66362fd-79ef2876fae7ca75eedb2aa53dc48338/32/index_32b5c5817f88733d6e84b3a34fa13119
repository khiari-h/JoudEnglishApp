d2b3d3d0f03348b4c20cd6803b42207f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _native = require("@react-navigation/native");
var _expoRouter = require("expo-router");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _Container = _interopRequireWildcard(require("../../../components/layout/Container"));
var _PhrasesHeader = _interopRequireDefault(require("./PhrasesHeader"));
var _PhrasesCategorySelector = _interopRequireDefault(require("./PhrasesCategorySelector"));
var _PhrasesProgress = _interopRequireDefault(require("./PhrasesProgress"));
var _PhraseCard = _interopRequireDefault(require("./PhraseCard"));
var _PhrasesNavigation = _interopRequireDefault(require("./PhrasesNavigation"));
var _usePhrases2 = _interopRequireDefault(require("./hooks/usePhrases"));
var _useLastActivity2 = _interopRequireDefault(require("../../../hooks/useLastActivity"));
var _phrasesDataHelper = require("../../../utils/phrases/phrasesDataHelper");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var PhrasesExercise = function PhrasesExercise(_ref) {
  var route = _ref.route;
  var navigation = (0, _native.useNavigation)();
  var _ref2 = (route == null ? void 0 : route.params) || {},
    _ref2$level = _ref2.level,
    level = _ref2$level === void 0 ? "A1" : _ref2$level;
  var styles = (0, _style.default)();
  var _useLastActivity = (0, _useLastActivity2.default)(),
    saveActivity = _useLastActivity.saveActivity;
  var levelColor = (0, _phrasesDataHelper.getLevelColor)(level);
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    phrasesData = _useState2[0],
    setPhrasesData = _useState2[1];
  (0, _react.useEffect)(function () {
    var isMounted = true;
    var load = function () {
      var _ref3 = (0, _asyncToGenerator2.default)(function* () {
        if (process.env.JEST_WORKER_ID) {
          var _data = (0, _phrasesDataHelper.getPhrasesData)(level);
          if (isMounted) setPhrasesData(_data);
          return;
        }
        var data = yield (0, _phrasesDataHelper.loadPhrasesData)(level);
        if (isMounted) setPhrasesData(data);
      });
      return function load() {
        return _ref3.apply(this, arguments);
      };
    }();
    load();
    return function () {
      isMounted = false;
    };
  }, [level]);
  var _usePhrases = (0, _usePhrases2.default)(phrasesData, level),
    categoryIndex = _usePhrases.categoryIndex,
    phraseIndex = _usePhrases.phraseIndex,
    showTranslation = _usePhrases.showTranslation,
    completedPhrases = _usePhrases.completedPhrases,
    loaded = _usePhrases.loaded,
    showDetailedProgress = _usePhrases.showDetailedProgress,
    currentPhrase = _usePhrases.currentPhrase,
    currentPhrases = _usePhrases.currentPhrases,
    totalPhrasesInCategory = _usePhrases.totalPhrasesInCategory,
    hasValidData = _usePhrases.hasValidData,
    changeCategory = _usePhrases.changeCategory,
    toggleTranslation = _usePhrases.toggleTranslation,
    toggleDetailedProgress = _usePhrases.toggleDetailedProgress,
    handleNext = _usePhrases.handleNext,
    handlePrevious = _usePhrases.handlePrevious,
    canGoToPrevious = _usePhrases.canGoToPrevious,
    isLastPhraseInCategory = _usePhrases.isLastPhraseInCategory,
    stats = _usePhrases.stats,
    display = _usePhrases.display;
  (0, _react.useEffect)(function () {
    if (loaded && hasValidData && currentPhrase && currentPhrases.length > 0 && phraseIndex < 100) {
      var _phrasesData$categori, _phrasesData$categori2;
      var currentCategory = phrasesData == null || (_phrasesData$categori = phrasesData.categories) == null ? void 0 : _phrasesData$categori[categoryIndex];
      var activityData = {
        title: "Expressions",
        level: level,
        type: "phrases",
        metadata: {
          phrase: phraseIndex,
          totalPhrases: totalPhrasesInCategory || currentPhrases.length,
          category: (currentCategory == null ? void 0 : currentCategory.name) || "Général",
          categoryIndex: categoryIndex,
          totalCategories: (phrasesData == null || (_phrasesData$categori2 = phrasesData.categories) == null ? void 0 : _phrasesData$categori2.length) || 1
        }
      };
      saveActivity(activityData);
    }
  }, [loaded, hasValidData, currentPhrase, currentPhrases.length, phraseIndex, totalPhrasesInCategory, categoryIndex, level, phrasesData]);
  var handleBackPress = (0, _react.useCallback)(function () {
    _expoRouter.router.push({
      pathname: "/tabs/exerciseSelection",
      params: {
        level: level
      }
    });
  }, [level]);
  var handleCategoryChange = (0, _react.useCallback)(function (index) {
    return changeCategory(index);
  }, [changeCategory]);
  var handleToggleProgressDetails = (0, _react.useCallback)(function () {
    return toggleDetailedProgress();
  }, [toggleDetailedProgress]);
  var handleNextPhrase = (0, _react.useCallback)(function () {
    var result = handleNext();
    if (result.completed) {
      navigation.goBack();
    }
  }, [handleNext, navigation]);
  var handlePreviousPhrase = (0, _react.useCallback)(function () {
    return handlePrevious();
  }, [handlePrevious]);
  if (!loaded || !hasValidData) {
    return (0, _jsxRuntime.jsx)(_Container.default, {
      safeArea: true,
      safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
      backgroundColor: "#f8fafc",
      statusBarStyle: "dark-content",
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.loadingContainer,
        children: (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
          size: "large",
          color: levelColor,
          testID: "activity-indicator"
        })
      })
    });
  }
  if (currentPhrases.length === 0) {
    return (0, _jsxRuntime.jsxs)(_Container.default, {
      safeArea: true,
      safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
      backgroundColor: "#f8fafc",
      statusBarStyle: "dark-content",
      children: [(0, _jsxRuntime.jsx)(_PhrasesHeader.default, {
        level: level,
        onBackPress: handleBackPress
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.emptyStateContainer,
        children: (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
          size: "large",
          color: levelColor,
          testID: "activity-indicator"
        })
      })]
    });
  }
  return (0, _jsxRuntime.jsxs)(_Container.default, {
    safeArea: true,
    safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
    withScrollView: true,
    backgroundColor: "#f8fafc",
    statusBarStyle: "dark-content",
    withPadding: false,
    scrollViewProps: {
      showsVerticalScrollIndicator: false,
      contentContainerStyle: styles.scrollContent
    },
    children: [(0, _jsxRuntime.jsx)(_PhrasesHeader.default, {
      level: level,
      onBackPress: handleBackPress
    }), (0, _jsxRuntime.jsx)(_PhrasesProgress.default, {
      progress: stats.completionProgress,
      currentPhrase: phraseIndex + 1,
      totalPhrases: totalPhrasesInCategory,
      completedCount: stats.completedPhrasesCount,
      levelColor: levelColor,
      phrasesData: phrasesData,
      completedPhrases: completedPhrases,
      expanded: showDetailedProgress,
      onToggleExpand: handleToggleProgressDetails,
      onCategoryPress: handleCategoryChange
    }), (0, _jsxRuntime.jsx)(_PhrasesCategorySelector.default, {
      categories: display.categories,
      selectedIndex: categoryIndex,
      onSelectCategory: handleCategoryChange,
      levelColor: levelColor
    }), (0, _jsxRuntime.jsx)(_PhraseCard.default, {
      phraseData: currentPhrase,
      showTranslation: showTranslation,
      onToggleTranslation: toggleTranslation,
      levelColor: levelColor
    }), (0, _jsxRuntime.jsx)(_PhrasesNavigation.default, {
      onNext: handleNextPhrase,
      onPrevious: handlePreviousPhrase,
      disablePrevious: !canGoToPrevious,
      disableNext: false,
      isLast: isLastPhraseInCategory,
      levelColor: levelColor
    })]
  });
};
var _default = exports.default = PhrasesExercise;
PhrasesExercise.propTypes = {
  route: _propTypes.default.shape({
    params: _propTypes.default.shape({
      level: _propTypes.default.string
    })
  }).isRequired
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlIiwiX25hdGl2ZSIsIl9leHBvUm91dGVyIiwiX3Byb3BUeXBlcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfQ29udGFpbmVyIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfUGhyYXNlc0hlYWRlciIsIl9QaHJhc2VzQ2F0ZWdvcnlTZWxlY3RvciIsIl9QaHJhc2VzUHJvZ3Jlc3MiLCJfUGhyYXNlQ2FyZCIsIl9QaHJhc2VzTmF2aWdhdGlvbiIsIl91c2VQaHJhc2VzMiIsIl91c2VMYXN0QWN0aXZpdHkyIiwiX3BocmFzZXNEYXRhSGVscGVyIiwiX3N0eWxlIiwiX2pzeFJ1bnRpbWUiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlBocmFzZXNFeGVyY2lzZSIsIl9yZWYiLCJyb3V0ZSIsIm5hdmlnYXRpb24iLCJ1c2VOYXZpZ2F0aW9uIiwiX3JlZjIiLCJwYXJhbXMiLCJfcmVmMiRsZXZlbCIsImxldmVsIiwic3R5bGVzIiwiY3JlYXRlU3R5bGVzIiwiX3VzZUxhc3RBY3Rpdml0eSIsInVzZUxhc3RBY3Rpdml0eSIsInNhdmVBY3Rpdml0eSIsImxldmVsQ29sb3IiLCJnZXRMZXZlbENvbG9yIiwiX3VzZVN0YXRlIiwidXNlU3RhdGUiLCJfdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkyIiwicGhyYXNlc0RhdGEiLCJzZXRQaHJhc2VzRGF0YSIsInVzZUVmZmVjdCIsImlzTW91bnRlZCIsImxvYWQiLCJfcmVmMyIsIl9hc3luY1RvR2VuZXJhdG9yMiIsInByb2Nlc3MiLCJlbnYiLCJKRVNUX1dPUktFUl9JRCIsImRhdGEiLCJnZXRQaHJhc2VzRGF0YSIsImxvYWRQaHJhc2VzRGF0YSIsImFwcGx5IiwiYXJndW1lbnRzIiwiX3VzZVBocmFzZXMiLCJ1c2VQaHJhc2VzIiwiY2F0ZWdvcnlJbmRleCIsInBocmFzZUluZGV4Iiwic2hvd1RyYW5zbGF0aW9uIiwiY29tcGxldGVkUGhyYXNlcyIsImxvYWRlZCIsInNob3dEZXRhaWxlZFByb2dyZXNzIiwiY3VycmVudFBocmFzZSIsImN1cnJlbnRQaHJhc2VzIiwidG90YWxQaHJhc2VzSW5DYXRlZ29yeSIsImhhc1ZhbGlkRGF0YSIsImNoYW5nZUNhdGVnb3J5IiwidG9nZ2xlVHJhbnNsYXRpb24iLCJ0b2dnbGVEZXRhaWxlZFByb2dyZXNzIiwiaGFuZGxlTmV4dCIsImhhbmRsZVByZXZpb3VzIiwiY2FuR29Ub1ByZXZpb3VzIiwiaXNMYXN0UGhyYXNlSW5DYXRlZ29yeSIsInN0YXRzIiwiZGlzcGxheSIsImxlbmd0aCIsIl9waHJhc2VzRGF0YSRjYXRlZ29yaSIsIl9waHJhc2VzRGF0YSRjYXRlZ29yaTIiLCJjdXJyZW50Q2F0ZWdvcnkiLCJjYXRlZ29yaWVzIiwiYWN0aXZpdHlEYXRhIiwidGl0bGUiLCJ0eXBlIiwibWV0YWRhdGEiLCJwaHJhc2UiLCJ0b3RhbFBocmFzZXMiLCJjYXRlZ29yeSIsIm5hbWUiLCJ0b3RhbENhdGVnb3JpZXMiLCJoYW5kbGVCYWNrUHJlc3MiLCJ1c2VDYWxsYmFjayIsInJvdXRlciIsInB1c2giLCJwYXRobmFtZSIsImhhbmRsZUNhdGVnb3J5Q2hhbmdlIiwiaW5kZXgiLCJoYW5kbGVUb2dnbGVQcm9ncmVzc0RldGFpbHMiLCJoYW5kbGVOZXh0UGhyYXNlIiwicmVzdWx0IiwiY29tcGxldGVkIiwiZ29CYWNrIiwiaGFuZGxlUHJldmlvdXNQaHJhc2UiLCJqc3giLCJzYWZlQXJlYSIsInNhZmVBcmVhRWRnZXMiLCJDT05UQUlORVJfU0FGRV9FREdFUyIsIkFMTCIsImJhY2tncm91bmRDb2xvciIsInN0YXR1c0JhclN0eWxlIiwiY2hpbGRyZW4iLCJWaWV3Iiwic3R5bGUiLCJsb2FkaW5nQ29udGFpbmVyIiwiQWN0aXZpdHlJbmRpY2F0b3IiLCJzaXplIiwiY29sb3IiLCJ0ZXN0SUQiLCJqc3hzIiwib25CYWNrUHJlc3MiLCJlbXB0eVN0YXRlQ29udGFpbmVyIiwid2l0aFNjcm9sbFZpZXciLCJ3aXRoUGFkZGluZyIsInNjcm9sbFZpZXdQcm9wcyIsInNob3dzVmVydGljYWxTY3JvbGxJbmRpY2F0b3IiLCJjb250ZW50Q29udGFpbmVyU3R5bGUiLCJzY3JvbGxDb250ZW50IiwicHJvZ3Jlc3MiLCJjb21wbGV0aW9uUHJvZ3Jlc3MiLCJjb21wbGV0ZWRDb3VudCIsImNvbXBsZXRlZFBocmFzZXNDb3VudCIsImV4cGFuZGVkIiwib25Ub2dnbGVFeHBhbmQiLCJvbkNhdGVnb3J5UHJlc3MiLCJzZWxlY3RlZEluZGV4Iiwib25TZWxlY3RDYXRlZ29yeSIsInBocmFzZURhdGEiLCJvblRvZ2dsZVRyYW5zbGF0aW9uIiwib25OZXh0Iiwib25QcmV2aW91cyIsImRpc2FibGVQcmV2aW91cyIsImRpc2FibGVOZXh0IiwiaXNMYXN0IiwiX2RlZmF1bHQiLCJleHBvcnRzIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwic2hhcGUiLCJzdHJpbmciLCJpc1JlcXVpcmVkIl0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gUGhyYXNlc0V4ZXJjaXNlL2luZGV4LmpzIC0gVkVSU0lPTiBBVkVDIFNBVVZFR0FSREUgQUNUSVZJVMOJXHJcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2ssIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IFZpZXcsIEFjdGl2aXR5SW5kaWNhdG9yIH0gZnJvbSBcInJlYWN0LW5hdGl2ZVwiO1xyXG5pbXBvcnQgeyB1c2VOYXZpZ2F0aW9uIH0gZnJvbSBcIkByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZVwiO1xyXG5pbXBvcnQgeyByb3V0ZXIgfSBmcm9tIFwiZXhwby1yb3V0ZXJcIjtcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuXHJcbi8vIExheW91dFxyXG5pbXBvcnQgQ29udGFpbmVyLCB7IENPTlRBSU5FUl9TQUZFX0VER0VTIH0gZnJvbSBcIi4uLy4uLy4uL2NvbXBvbmVudHMvbGF5b3V0L0NvbnRhaW5lclwiO1xyXG5cclxuLy8gQ29tcG9uZW50c1xyXG5pbXBvcnQgUGhyYXNlc0hlYWRlciBmcm9tIFwiLi9QaHJhc2VzSGVhZGVyXCI7XHJcbmltcG9ydCBQaHJhc2VzQ2F0ZWdvcnlTZWxlY3RvciBmcm9tIFwiLi9QaHJhc2VzQ2F0ZWdvcnlTZWxlY3RvclwiO1xyXG5pbXBvcnQgUGhyYXNlc1Byb2dyZXNzIGZyb20gXCIuL1BocmFzZXNQcm9ncmVzc1wiO1xyXG5pbXBvcnQgUGhyYXNlQ2FyZCBmcm9tIFwiLi9QaHJhc2VDYXJkXCI7XHJcbmltcG9ydCBQaHJhc2VzTmF2aWdhdGlvbiBmcm9tIFwiLi9QaHJhc2VzTmF2aWdhdGlvblwiO1xyXG5cclxuLy8gSG9vayAmIFV0aWxzXHJcbmltcG9ydCB1c2VQaHJhc2VzIGZyb20gXCIuL2hvb2tzL3VzZVBocmFzZXNcIjtcclxuaW1wb3J0IHVzZUxhc3RBY3Rpdml0eSBmcm9tIFwiLi4vLi4vLi4vaG9va3MvdXNlTGFzdEFjdGl2aXR5XCI7IC8vIOKchSBBSk9VVMOJXHJcbmltcG9ydCB7IGdldFBocmFzZXNEYXRhLCBsb2FkUGhyYXNlc0RhdGEsIGdldExldmVsQ29sb3IgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvcGhyYXNlcy9waHJhc2VzRGF0YUhlbHBlclwiO1xyXG5pbXBvcnQgY3JlYXRlU3R5bGVzIGZyb20gXCIuL3N0eWxlXCI7XHJcblxyXG4vKipcclxuICog8J+OryBQaHJhc2VzRXhlcmNpc2UgLSBWRVJTSU9OIEFWRUMgU0FVVkVHQVJERSBBQ1RJVklUw4lcclxuICovXHJcbmNvbnN0IFBocmFzZXNFeGVyY2lzZSA9ICh7IHJvdXRlIH0pID0+IHtcclxuICBjb25zdCBuYXZpZ2F0aW9uID0gdXNlTmF2aWdhdGlvbigpO1xyXG4gIGNvbnN0IHsgbGV2ZWwgPSBcIkExXCIgfSA9IHJvdXRlPy5wYXJhbXMgfHwge307XHJcbiAgY29uc3Qgc3R5bGVzID0gY3JlYXRlU3R5bGVzKCk7XHJcblxyXG4gIC8vIOKchSBBSk9VVMOJIDogSG9vayBwb3VyIHNhdXZlZ2FyZGVyIGwnYWN0aXZpdMOpXHJcbiAgY29uc3QgeyBzYXZlQWN0aXZpdHkgfSA9IHVzZUxhc3RBY3Rpdml0eSgpO1xyXG5cclxuICAvLyBEYXRhXHJcbiAgY29uc3QgbGV2ZWxDb2xvciA9IGdldExldmVsQ29sb3IobGV2ZWwpO1xyXG4gIGNvbnN0IFtwaHJhc2VzRGF0YSwgc2V0UGhyYXNlc0RhdGFdID0gdXNlU3RhdGUobnVsbCk7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBsZXQgaXNNb3VudGVkID0gdHJ1ZTtcclxuICAgIGNvbnN0IGxvYWQgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGlmIChwcm9jZXNzLmVudi5KRVNUX1dPUktFUl9JRCkge1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBnZXRQaHJhc2VzRGF0YShsZXZlbCk7XHJcbiAgICAgICAgaWYgKGlzTW91bnRlZCkgc2V0UGhyYXNlc0RhdGEoZGF0YSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBsb2FkUGhyYXNlc0RhdGEobGV2ZWwpO1xyXG4gICAgICBpZiAoaXNNb3VudGVkKSBzZXRQaHJhc2VzRGF0YShkYXRhKTtcclxuICAgIH07XHJcbiAgICBsb2FkKCk7XHJcbiAgICByZXR1cm4gKCkgPT4geyBpc01vdW50ZWQgPSBmYWxzZTsgfTtcclxuICB9LCBbbGV2ZWxdKTtcclxuXHJcbiAgLy8gSG9vayB1bmlmacOpIC0gR2FyZGUgc2V1bGVtZW50IGxlcyB2YXJpYWJsZXMgdXRpbGlzw6llc1xyXG4gIGNvbnN0IHtcclxuICAgIGNhdGVnb3J5SW5kZXgsXHJcbiAgICBwaHJhc2VJbmRleCxcclxuICAgIHNob3dUcmFuc2xhdGlvbixcclxuICAgIGNvbXBsZXRlZFBocmFzZXMsXHJcbiAgICBsb2FkZWQsXHJcbiAgICBzaG93RGV0YWlsZWRQcm9ncmVzcyxcclxuICAgIGN1cnJlbnRQaHJhc2UsXHJcbiAgICBjdXJyZW50UGhyYXNlcyxcclxuICAgIHRvdGFsUGhyYXNlc0luQ2F0ZWdvcnksXHJcbiAgICBoYXNWYWxpZERhdGEsXHJcbiAgICBjaGFuZ2VDYXRlZ29yeSxcclxuICAgIHRvZ2dsZVRyYW5zbGF0aW9uLFxyXG4gICAgdG9nZ2xlRGV0YWlsZWRQcm9ncmVzcyxcclxuICAgIGhhbmRsZU5leHQsXHJcbiAgICBoYW5kbGVQcmV2aW91cyxcclxuICAgIGNhbkdvVG9QcmV2aW91cyxcclxuICAgIGlzTGFzdFBocmFzZUluQ2F0ZWdvcnksXHJcbiAgICBzdGF0cyxcclxuICAgIGRpc3BsYXksXHJcbiAgfSA9IHVzZVBocmFzZXMocGhyYXNlc0RhdGEsIGxldmVsKTtcclxuXHJcbiAgLy8g4pyFIEFKT1VUw4kgOiBTYXV2ZWdhcmRlciBsJ2FjdGl2aXTDqSDDoCBjaGFxdWUgY2hhbmdlbWVudCBkZSBwaHJhc2UvY2F0w6lnb3JpZVxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAobG9hZGVkICYmIGhhc1ZhbGlkRGF0YSAmJiBjdXJyZW50UGhyYXNlICYmIGN1cnJlbnRQaHJhc2VzLmxlbmd0aCA+IDAgJiYgcGhyYXNlSW5kZXggPCAxMDApIHsgLy8g4pyFIFByb3RlY3Rpb24gYm91Y2xlXHJcbiAgICAgIGNvbnN0IGN1cnJlbnRDYXRlZ29yeSA9IHBocmFzZXNEYXRhPy5jYXRlZ29yaWVzPy5bY2F0ZWdvcnlJbmRleF07XHJcbiAgICAgIFxyXG4gICAgICBjb25zdCBhY3Rpdml0eURhdGEgPSB7XHJcbiAgICAgICAgdGl0bGU6IFwiRXhwcmVzc2lvbnNcIixcclxuICAgICAgICBsZXZlbCxcclxuICAgICAgICB0eXBlOiBcInBocmFzZXNcIixcclxuICAgICAgICBtZXRhZGF0YToge1xyXG4gICAgICAgICAgcGhyYXNlOiBwaHJhc2VJbmRleCxcclxuICAgICAgICAgIHRvdGFsUGhyYXNlczogdG90YWxQaHJhc2VzSW5DYXRlZ29yeSB8fCBjdXJyZW50UGhyYXNlcy5sZW5ndGgsIC8vIOKchSBGYWxsYmFja1xyXG4gICAgICAgICAgY2F0ZWdvcnk6IGN1cnJlbnRDYXRlZ29yeT8ubmFtZSB8fCBcIkfDqW7DqXJhbFwiLFxyXG4gICAgICAgICAgY2F0ZWdvcnlJbmRleCxcclxuICAgICAgICAgIHRvdGFsQ2F0ZWdvcmllczogcGhyYXNlc0RhdGE/LmNhdGVnb3JpZXM/Lmxlbmd0aCB8fCAxXHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgc2F2ZUFjdGl2aXR5KGFjdGl2aXR5RGF0YSk7XHJcbiAgICB9XHJcbiAgfSwgW2xvYWRlZCwgaGFzVmFsaWREYXRhLCBjdXJyZW50UGhyYXNlLCBjdXJyZW50UGhyYXNlcy5sZW5ndGgsIHBocmFzZUluZGV4LCB0b3RhbFBocmFzZXNJbkNhdGVnb3J5LCBjYXRlZ29yeUluZGV4LCBsZXZlbCwgcGhyYXNlc0RhdGFdKTtcclxuXHJcbiAgLy8gSGFuZGxlcnNcclxuICBjb25zdCBoYW5kbGVCYWNrUHJlc3MgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICByb3V0ZXIucHVzaCh7XHJcbiAgICAgIHBhdGhuYW1lOiBcIi90YWJzL2V4ZXJjaXNlU2VsZWN0aW9uXCIsXHJcbiAgICAgIHBhcmFtczogeyBsZXZlbCB9XHJcbiAgICB9KTtcclxuICB9LCBbbGV2ZWxdKTtcclxuXHJcbiAgY29uc3QgaGFuZGxlQ2F0ZWdvcnlDaGFuZ2UgPSB1c2VDYWxsYmFjaygoaW5kZXgpID0+IGNoYW5nZUNhdGVnb3J5KGluZGV4KSwgW2NoYW5nZUNhdGVnb3J5XSk7XHJcblxyXG4gIGNvbnN0IGhhbmRsZVRvZ2dsZVByb2dyZXNzRGV0YWlscyA9IHVzZUNhbGxiYWNrKCgpID0+IHRvZ2dsZURldGFpbGVkUHJvZ3Jlc3MoKSwgW3RvZ2dsZURldGFpbGVkUHJvZ3Jlc3NdKTtcclxuXHJcbiAgY29uc3QgaGFuZGxlTmV4dFBocmFzZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IGhhbmRsZU5leHQoKTtcclxuICAgIGlmIChyZXN1bHQuY29tcGxldGVkKSB7XHJcbiAgICAgIG5hdmlnYXRpb24uZ29CYWNrKCk7XHJcbiAgICB9XHJcbiAgfSwgW2hhbmRsZU5leHQsIG5hdmlnYXRpb25dKTtcclxuXHJcbiAgY29uc3QgaGFuZGxlUHJldmlvdXNQaHJhc2UgPSB1c2VDYWxsYmFjaygoKSA9PiBoYW5kbGVQcmV2aW91cygpLCBbaGFuZGxlUHJldmlvdXNdKTtcclxuXHJcbiAgLy8gTG9hZGluZyBzdGF0ZVxyXG4gIGlmICghbG9hZGVkIHx8ICFoYXNWYWxpZERhdGEpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxDb250YWluZXJcclxuICAgICAgICBzYWZlQXJlYVxyXG4gICAgICAgIHNhZmVBcmVhRWRnZXM9e0NPTlRBSU5FUl9TQUZFX0VER0VTLkFMTH1cclxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I9XCIjZjhmYWZjXCJcclxuICAgICAgICBzdGF0dXNCYXJTdHlsZT1cImRhcmstY29udGVudFwiXHJcbiAgICAgID5cclxuICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmxvYWRpbmdDb250YWluZXJ9PlxyXG4gICAgICAgICAgPEFjdGl2aXR5SW5kaWNhdG9yIHNpemU9XCJsYXJnZVwiIGNvbG9yPXtsZXZlbENvbG9yfSB0ZXN0SUQ9XCJhY3Rpdml0eS1pbmRpY2F0b3JcIiAvPlxyXG4gICAgICAgIDwvVmlldz5cclxuICAgICAgPC9Db250YWluZXI+XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLy8gRW1wdHkgc3RhdGVcclxuICBpZiAoY3VycmVudFBocmFzZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8Q29udGFpbmVyXHJcbiAgICAgICAgc2FmZUFyZWFcclxuICAgICAgICBzYWZlQXJlYUVkZ2VzPXtDT05UQUlORVJfU0FGRV9FREdFUy5BTEx9XHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yPVwiI2Y4ZmFmY1wiXHJcbiAgICAgICAgc3RhdHVzQmFyU3R5bGU9XCJkYXJrLWNvbnRlbnRcIlxyXG4gICAgICA+XHJcbiAgICAgICAgPFBocmFzZXNIZWFkZXJcclxuICAgICAgICAgIGxldmVsPXtsZXZlbH1cclxuICAgICAgICAgIG9uQmFja1ByZXNzPXtoYW5kbGVCYWNrUHJlc3N9XHJcbiAgICAgICAgLz5cclxuICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmVtcHR5U3RhdGVDb250YWluZXJ9PlxyXG4gICAgICAgICAgPEFjdGl2aXR5SW5kaWNhdG9yIHNpemU9XCJsYXJnZVwiIGNvbG9yPXtsZXZlbENvbG9yfSB0ZXN0SUQ9XCJhY3Rpdml0eS1pbmRpY2F0b3JcIiAvPlxyXG4gICAgICAgIDwvVmlldz5cclxuICAgICAgPC9Db250YWluZXI+XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxDb250YWluZXJcclxuICAgICAgc2FmZUFyZWFcclxuICAgICAgc2FmZUFyZWFFZGdlcz17Q09OVEFJTkVSX1NBRkVfRURHRVMuQUxMfVxyXG4gICAgICB3aXRoU2Nyb2xsVmlld1xyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I9XCIjZjhmYWZjXCJcclxuICAgICAgc3RhdHVzQmFyU3R5bGU9XCJkYXJrLWNvbnRlbnRcIlxyXG4gICAgICB3aXRoUGFkZGluZz17ZmFsc2V9XHJcbiAgICAgIHNjcm9sbFZpZXdQcm9wcz17e1xyXG4gICAgICAgIHNob3dzVmVydGljYWxTY3JvbGxJbmRpY2F0b3I6IGZhbHNlLFxyXG4gICAgICAgIGNvbnRlbnRDb250YWluZXJTdHlsZTogc3R5bGVzLnNjcm9sbENvbnRlbnQsXHJcbiAgICAgIH19XHJcbiAgICA+XHJcbiAgICAgIHsvKiBIZWFkZXIgKi99XHJcbiAgICAgIDxQaHJhc2VzSGVhZGVyXHJcbiAgICAgICAgbGV2ZWw9e2xldmVsfVxyXG4gICAgICAgIG9uQmFja1ByZXNzPXtoYW5kbGVCYWNrUHJlc3N9XHJcbiAgICAgIC8+XHJcblxyXG4gICAgICB7LyogUHJvZ3Jlc3MgLSBNQUlOVEVOQU5UIENPTEzDiSBBVSBIRUFERVIgKi99XHJcbiAgICAgIDxQaHJhc2VzUHJvZ3Jlc3NcclxuICAgICAgICBwcm9ncmVzcz17c3RhdHMuY29tcGxldGlvblByb2dyZXNzfVxyXG4gICAgICAgIGN1cnJlbnRQaHJhc2U9e3BocmFzZUluZGV4ICsgMX1cclxuICAgICAgICB0b3RhbFBocmFzZXM9e3RvdGFsUGhyYXNlc0luQ2F0ZWdvcnl9XHJcbiAgICAgICAgY29tcGxldGVkQ291bnQ9e3N0YXRzLmNvbXBsZXRlZFBocmFzZXNDb3VudH1cclxuICAgICAgICBsZXZlbENvbG9yPXtsZXZlbENvbG9yfVxyXG4gICAgICAgIHBocmFzZXNEYXRhPXtwaHJhc2VzRGF0YX1cclxuICAgICAgICBjb21wbGV0ZWRQaHJhc2VzPXtjb21wbGV0ZWRQaHJhc2VzfVxyXG4gICAgICAgIGV4cGFuZGVkPXtzaG93RGV0YWlsZWRQcm9ncmVzc31cclxuICAgICAgICBvblRvZ2dsZUV4cGFuZD17aGFuZGxlVG9nZ2xlUHJvZ3Jlc3NEZXRhaWxzfVxyXG4gICAgICAgIG9uQ2F0ZWdvcnlQcmVzcz17aGFuZGxlQ2F0ZWdvcnlDaGFuZ2V9XHJcbiAgICAgIC8+XHJcblxyXG4gICAgICB7LyogQ2F0ZWdvcnkgU2VsZWN0b3IgLSBBUFLDiFMgUFJPR1JFU1MgY29tbWUgbGVzIGF1dHJlcyBleGVyY2ljZXMgKi99XHJcbiAgICAgIDxQaHJhc2VzQ2F0ZWdvcnlTZWxlY3RvclxyXG4gICAgICAgIGNhdGVnb3JpZXM9e2Rpc3BsYXkuY2F0ZWdvcmllc31cclxuICAgICAgICBzZWxlY3RlZEluZGV4PXtjYXRlZ29yeUluZGV4fVxyXG4gICAgICAgIG9uU2VsZWN0Q2F0ZWdvcnk9e2hhbmRsZUNhdGVnb3J5Q2hhbmdlfVxyXG4gICAgICAgIGxldmVsQ29sb3I9e2xldmVsQ29sb3J9XHJcbiAgICAgIC8+XHJcblxyXG4gICAgICB7LyogUGhyYXNlIENhcmQgKi99XHJcbiAgICAgIDxQaHJhc2VDYXJkXHJcbiAgICAgICAgcGhyYXNlRGF0YT17Y3VycmVudFBocmFzZX1cclxuICAgICAgICBzaG93VHJhbnNsYXRpb249e3Nob3dUcmFuc2xhdGlvbn1cclxuICAgICAgICBvblRvZ2dsZVRyYW5zbGF0aW9uPXt0b2dnbGVUcmFuc2xhdGlvbn1cclxuICAgICAgICBsZXZlbENvbG9yPXtsZXZlbENvbG9yfVxyXG4gICAgICAvPlxyXG5cclxuICAgICAgey8qIE5hdmlnYXRpb24gKi99XHJcbiAgICAgIDxQaHJhc2VzTmF2aWdhdGlvblxyXG4gICAgICAgIG9uTmV4dD17aGFuZGxlTmV4dFBocmFzZX1cclxuICAgICAgICBvblByZXZpb3VzPXtoYW5kbGVQcmV2aW91c1BocmFzZX1cclxuICAgICAgICBkaXNhYmxlUHJldmlvdXM9eyFjYW5Hb1RvUHJldmlvdXN9XHJcbiAgICAgICAgZGlzYWJsZU5leHQ9e2ZhbHNlfVxyXG4gICAgICAgIGlzTGFzdD17aXNMYXN0UGhyYXNlSW5DYXRlZ29yeX1cclxuICAgICAgICBsZXZlbENvbG9yPXtsZXZlbENvbG9yfVxyXG4gICAgICAvPlxyXG4gICAgPC9Db250YWluZXI+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBocmFzZXNFeGVyY2lzZTtcclxuXHJcbi8vIOKchSBBam91dCBkZSBsYSB2YWxpZGF0aW9uIGRlcyBwcm9wc1xyXG5QaHJhc2VzRXhlcmNpc2UucHJvcFR5cGVzID0ge1xyXG4gIHJvdXRlOiBQcm9wVHlwZXMuc2hhcGUoe1xyXG4gICAgcGFyYW1zOiBQcm9wVHlwZXMuc2hhcGUoe1xyXG4gICAgICBsZXZlbDogUHJvcFR5cGVzLnN0cmluZyxcclxuICAgIH0pLFxyXG4gIH0pLmlzUmVxdWlyZWQsXHJcbn07Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FB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Q25DakUsYUFBYSxFQUFFTCxXQUFXLEdBQUcsQ0FBRTtNQUMvQjRCLFlBQVksRUFBRXJCLHNCQUF1QjtNQUNyQ2dFLGNBQWMsRUFBRXZELEtBQUssQ0FBQ3dELHFCQUFzQjtNQUM1Q2hHLFVBQVUsRUFBRUEsVUFBVztNQUN2Qk0sV0FBVyxFQUFFQSxXQUFZO01BQ3pCb0IsZ0JBQWdCLEVBQUVBLGdCQUFpQjtNQUNuQ3VFLFFBQVEsRUFBRXJFLG9CQUFxQjtNQUMvQnNFLGNBQWMsRUFBRW5DLDJCQUE0QjtNQUM1Q29DLGVBQWUsRUFBRXRDO0lBQXFCLENBQ3ZDLENBQUMsRUFHRixJQUFBaEcsV0FBQSxDQUFBd0csR0FBQSxFQUFDaEgsd0JBQUEsQ0FBQW1CLE9BQXVCO01BQ3RCc0UsVUFBVSxFQUFFTCxPQUFPLENBQUNLLFVBQVc7TUFDL0JzRCxhQUFhLEVBQUU3RSxhQUFjO01BQzdCOEUsZ0JBQWdCLEVBQUV4QyxvQkFBcUI7TUFDdkM3RCxVQUFVLEVBQUVBO0lBQVcsQ0FDeEIsQ0FBQyxFQUdGLElBQUFuQyxXQUFBLENBQUF3RyxHQUFBLEVBQUM5RyxXQUFBLENBQUFpQixPQUFVO01BQ1Q4SCxVQUFVLEVBQUV6RSxhQUFjO01BQzFCSixlQUFlLEVBQUVBLGVBQWdCO01BQ2pDOEUsbUJBQW1CLEVBQUVyRSxpQkFBa0I7TUFDdkNsQyxVQUFVLEVBQUVBO0lBQVcsQ0FDeEIsQ0FBQyxFQUdGLElBQUFuQyxXQUFBLENBQUF3RyxHQUFBLEVBQUM3RyxrQkFBQSxDQUFBZ0IsT0FBaUI7TUFDaEJnSSxNQUFNLEVBQUV4QyxnQkFBaUI7TUFDekJ5QyxVQUFVLEVBQUVyQyxvQkFBcUI7TUFDakNzQyxlQUFlLEVBQUUsQ0FBQ3BFLGVBQWdCO01BQ2xDcUUsV0FBVyxFQUFFLEtBQU07TUFDbkJDLE1BQU0sRUFBRXJFLHNCQUF1QjtNQUMvQnZDLFVBQVUsRUFBRUE7SUFBVyxDQUN4QixDQUFDO0VBQUEsQ0FDTyxDQUFDO0FBRWhCLENBQUM7QUFBQyxJQUFBNkcsUUFBQSxHQUFBQyxPQUFBLENBQUF0SSxPQUFBLEdBRWFVLGVBQWU7QUFHOUJBLGVBQWUsQ0FBQzZILFNBQVMsR0FBRztFQUMxQjNILEtBQUssRUFBRTRILGtCQUFTLENBQUNDLEtBQUssQ0FBQztJQUNyQnpILE1BQU0sRUFBRXdILGtCQUFTLENBQUNDLEtBQUssQ0FBQztNQUN0QnZILEtBQUssRUFBRXNILGtCQUFTLENBQUNFO0lBQ25CLENBQUM7RUFDSCxDQUFDLENBQUMsQ0FBQ0M7QUFDTCxDQUFDIiwiaWdub3JlTGlzdCI6W119