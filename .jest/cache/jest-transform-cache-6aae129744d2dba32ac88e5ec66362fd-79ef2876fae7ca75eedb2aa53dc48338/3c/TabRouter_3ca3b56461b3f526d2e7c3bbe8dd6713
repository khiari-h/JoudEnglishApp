cb28e4d3394ac7ec6f961cd9ab7e0198
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TabActions = void 0;
exports.TabRouter = TabRouter;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _nonSecure = require("nanoid/non-secure");
var _BaseRouter = require("./BaseRouter.js");
var TYPE_ROUTE = 'route';
var TabActions = exports.TabActions = {
  jumpTo: function jumpTo(name, params) {
    return {
      type: 'JUMP_TO',
      payload: {
        name: name,
        params: params
      }
    };
  }
};
var getRouteHistory = function getRouteHistory(routes, index, backBehavior, initialRouteName) {
  var history = [{
    type: TYPE_ROUTE,
    key: routes[index].key
  }];
  var initialRouteIndex;
  switch (backBehavior) {
    case 'order':
      for (var i = index; i > 0; i--) {
        history.unshift({
          type: TYPE_ROUTE,
          key: routes[i - 1].key
        });
      }
      break;
    case 'firstRoute':
      if (index !== 0) {
        history.unshift({
          type: TYPE_ROUTE,
          key: routes[0].key
        });
      }
      break;
    case 'initialRoute':
      initialRouteIndex = routes.findIndex(function (route) {
        return route.name === initialRouteName;
      });
      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;
      if (index !== initialRouteIndex) {
        history.unshift({
          type: TYPE_ROUTE,
          key: routes[initialRouteIndex].key
        });
      }
      break;
    case 'history':
    case 'fullHistory':
      break;
  }
  return history;
};
var changeIndex = function changeIndex(state, index, backBehavior, initialRouteName) {
  var history = state.history;
  if (backBehavior === 'history' || backBehavior === 'fullHistory') {
    var currentRouteKey = state.routes[index].key;
    if (backBehavior === 'history') {
      history = history.filter(function (it) {
        return it.type === 'route' ? it.key !== currentRouteKey : false;
      });
    } else if (backBehavior === 'fullHistory') {
      var _history$lastHistoryR;
      var lastHistoryRouteItemIndex = history.findLastIndex(function (item) {
        return item.type === 'route';
      });
      if (currentRouteKey === ((_history$lastHistoryR = history[lastHistoryRouteItemIndex]) == null ? void 0 : _history$lastHistoryR.key)) {
        history = [].concat((0, _toConsumableArray2.default)(history.slice(0, lastHistoryRouteItemIndex)), (0, _toConsumableArray2.default)(history.slice(lastHistoryRouteItemIndex + 1)));
      }
    }
    history = history.concat({
      type: TYPE_ROUTE,
      key: currentRouteKey
    });
  } else {
    history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);
  }
  return Object.assign({}, state, {
    index: index,
    history: history
  });
};
function TabRouter(_ref) {
  var initialRouteName = _ref.initialRouteName,
    _ref$backBehavior = _ref.backBehavior,
    backBehavior = _ref$backBehavior === void 0 ? 'firstRoute' : _ref$backBehavior;
  var router = Object.assign({}, _BaseRouter.BaseRouter, {
    type: 'tab',
    getInitialState: function getInitialState(_ref2) {
      var routeNames = _ref2.routeNames,
        routeParamList = _ref2.routeParamList;
      var index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;
      var routes = routeNames.map(function (name) {
        return {
          name: name,
          key: `${name}-${(0, _nonSecure.nanoid)()}`,
          params: routeParamList[name]
        };
      });
      var history = getRouteHistory(routes, index, backBehavior, initialRouteName);
      return {
        stale: false,
        type: 'tab',
        key: `tab-${(0, _nonSecure.nanoid)()}`,
        index: index,
        routeNames: routeNames,
        history: history,
        routes: routes,
        preloadedRouteKeys: []
      };
    },
    getRehydratedState: function getRehydratedState(partialState, _ref3) {
      var _state$routes, _state$index, _state$history$filter, _state$history, _state$preloadedRoute, _state$preloadedRoute2;
      var routeNames = _ref3.routeNames,
        routeParamList = _ref3.routeParamList;
      var state = partialState;
      if (state.stale === false) {
        return state;
      }
      var routes = routeNames.map(function (name) {
        var route = state.routes.find(function (r) {
          return r.name === name;
        });
        return Object.assign({}, route, {
          name: name,
          key: route && route.name === name && route.key ? route.key : `${name}-${(0, _nonSecure.nanoid)()}`,
          params: routeParamList[name] !== undefined ? Object.assign({}, routeParamList[name], route ? route.params : undefined) : route ? route.params : undefined
        });
      });
      var index = Math.min(Math.max(routeNames.indexOf((_state$routes = state.routes[(_state$index = state == null ? void 0 : state.index) != null ? _state$index : 0]) == null ? void 0 : _state$routes.name), 0), routes.length - 1);
      var routeKeys = routes.map(function (route) {
        return route.key;
      });
      var history = (_state$history$filter = (_state$history = state.history) == null ? void 0 : _state$history.filter(function (it) {
        return routeKeys.includes(it.key);
      })) != null ? _state$history$filter : [];
      return changeIndex({
        stale: false,
        type: 'tab',
        key: `tab-${(0, _nonSecure.nanoid)()}`,
        index: index,
        routeNames: routeNames,
        history: history,
        routes: routes,
        preloadedRouteKeys: (_state$preloadedRoute = (_state$preloadedRoute2 = state.preloadedRouteKeys) == null ? void 0 : _state$preloadedRoute2.filter(function (key) {
          return routeKeys.includes(key);
        })) != null ? _state$preloadedRoute : []
      }, index, backBehavior, initialRouteName);
    },
    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref4) {
      var routeNames = _ref4.routeNames,
        routeParamList = _ref4.routeParamList,
        routeKeyChanges = _ref4.routeKeyChanges;
      var routes = routeNames.map(function (name) {
        return state.routes.find(function (r) {
          return r.name === name && !routeKeyChanges.includes(r.name);
        }) || {
          name: name,
          key: `${name}-${(0, _nonSecure.nanoid)()}`,
          params: routeParamList[name]
        };
      });
      var index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));
      var history = state.history.filter(function (it) {
        return it.type !== 'route' || routes.find(function (r) {
          return r.key === it.key;
        });
      });
      if (!history.length) {
        history = getRouteHistory(routes, index, backBehavior, initialRouteName);
      }
      return Object.assign({}, state, {
        history: history,
        routeNames: routeNames,
        routes: routes,
        index: index
      });
    },
    getStateForRouteFocus: function getStateForRouteFocus(state, key) {
      var index = state.routes.findIndex(function (r) {
        return r.key === key;
      });
      if (index === -1 || index === state.index) {
        return state;
      }
      return changeIndex(state, index, backBehavior, initialRouteName);
    },
    getStateForAction: function getStateForAction(state, action, _ref5) {
      var routeParamList = _ref5.routeParamList,
        routeGetIdList = _ref5.routeGetIdList;
      switch (action.type) {
        case 'JUMP_TO':
        case 'NAVIGATE':
        case 'NAVIGATE_DEPRECATED':
          {
            var index = state.routes.findIndex(function (route) {
              return route.name === action.payload.name;
            });
            if (index === -1) {
              return null;
            }
            var updatedState = changeIndex(Object.assign({}, state, {
              routes: state.routes.map(function (route) {
                if (route.name !== action.payload.name) {
                  return route;
                }
                var getId = routeGetIdList[route.name];
                var currentId = getId == null ? void 0 : getId({
                  params: route.params
                });
                var nextId = getId == null ? void 0 : getId({
                  params: action.payload.params
                });
                var key = currentId === nextId ? route.key : `${route.name}-${(0, _nonSecure.nanoid)()}`;
                var params;
                if ((action.type === 'NAVIGATE' || action.type === 'NAVIGATE_DEPRECATED') && action.payload.merge && currentId === nextId) {
                  params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], route.params, action.payload.params) : route.params;
                } else {
                  params = routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], action.payload.params) : action.payload.params;
                }
                var path = action.type === 'NAVIGATE' && action.payload.path != null ? action.payload.path : route.path;
                return params !== route.params || path !== route.path ? Object.assign({}, route, {
                  key: key,
                  path: path,
                  params: params
                }) : route;
              })
            }), index, backBehavior, initialRouteName);
            return Object.assign({}, updatedState, {
              preloadedRouteKeys: updatedState.preloadedRouteKeys.filter(function (key) {
                return key !== state.routes[updatedState.index].key;
              })
            });
          }
        case 'GO_BACK':
          {
            var _state$history2;
            if (state.history.length === 1) {
              return null;
            }
            var previousKey = (_state$history2 = state.history[state.history.length - 2]) == null ? void 0 : _state$history2.key;
            var _index = state.routes.findLastIndex(function (route) {
              return route.key === previousKey;
            });
            if (_index === -1) {
              return null;
            }
            return Object.assign({}, state, {
              preloadedRouteKeys: state.preloadedRouteKeys.filter(function (key) {
                return key !== state.routes[_index].key;
              }),
              history: state.history.slice(0, -1),
              index: _index
            });
          }
        case 'PRELOAD':
          {
            var routeIndex = state.routes.findIndex(function (route) {
              return route.name === action.payload.name;
            });
            if (routeIndex === -1) {
              return null;
            }
            var route = state.routes[routeIndex];
            var getId = routeGetIdList[route.name];
            var currentId = getId == null ? void 0 : getId({
              params: route.params
            });
            var nextId = getId == null ? void 0 : getId({
              params: action.payload.params
            });
            var key = currentId === nextId ? route.key : `${route.name}-${(0, _nonSecure.nanoid)()}`;
            var params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], action.payload.params) : undefined;
            var newRoute = params !== route.params ? Object.assign({}, route, {
              key: key,
              params: params
            }) : route;
            return Object.assign({}, state, {
              preloadedRouteKeys: state.preloadedRouteKeys.filter(function (key) {
                return key !== route.key;
              }).concat(newRoute.key),
              routes: state.routes.map(function (route, index) {
                return index === routeIndex ? newRoute : route;
              }),
              history: key === route.key ? state.history : state.history.filter(function (record) {
                return record.key !== route.key;
              })
            });
          }
        default:
          return _BaseRouter.BaseRouter.getStateForAction(state, action);
      }
    },
    actionCreators: TabActions
  });
  return router;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,