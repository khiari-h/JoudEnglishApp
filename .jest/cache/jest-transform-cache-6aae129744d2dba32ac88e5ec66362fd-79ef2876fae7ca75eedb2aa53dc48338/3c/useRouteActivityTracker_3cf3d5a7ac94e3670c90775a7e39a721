72d8e62511b884c85ed513b78c36e4f7
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _expoRouter = require("expo-router");
var _useActivityMetrics2 = _interopRequireDefault(require("./useActivityMetrics"));
var useRouteActivityTracker = function useRouteActivityTracker() {
  var segments = (0, _expoRouter.useSegments)();
  var pathname = (0, _expoRouter.usePathname)();
  var _useActivityMetrics = (0, _useActivityMetrics2.default)(),
    startSession = _useActivityMetrics.startSession,
    endSession = _useActivityMetrics.endSession,
    updateStreak = _useActivityMetrics.updateStreak;
  var currentSessionRef = (0, _react.useRef)(null);
  var isTrackingRef = (0, _react.useRef)(false);
  var lastPathnameRef = (0, _react.useRef)(null);
  var safeExecute = function safeExecute(fn, errorMessage) {
    try {
      return fn();
    } catch (error) {
      console.warn(errorMessage, error);
      return false;
    }
  };
  var detectExercise = function detectExercise(segments) {
    return segments.some(function (segment) {
      return segment.includes('Exercise') || segment.includes('exercise') || segment.includes('Assessment') || segment.includes('assessment');
    });
  };
  var handleExerciseStart = function handleExerciseStart(exerciseType) {
    if (isTrackingRef.current && currentSessionRef.current === exerciseType) {
      return;
    }
    if (isTrackingRef.current) {
      safeExecute(function () {
        endSession();
        updateStreak();
      }, 'Erreur lors de la fin de session:');
    }
    var success = safeExecute(function () {
      startSession(exerciseType);
    }, 'Erreur lors du d√©marrage de session:');
    if (success) {
      isTrackingRef.current = true;
      currentSessionRef.current = exerciseType;
    } else {
      isTrackingRef.current = false;
      currentSessionRef.current = null;
    }
  };
  var handleExerciseEnd = function handleExerciseEnd() {
    if (!isTrackingRef.current) {
      return;
    }
    safeExecute(function () {
      endSession();
      updateStreak();
    }, 'Erreur lors de la fin de session:');
    isTrackingRef.current = false;
    currentSessionRef.current = null;
  };
  var cleanup = (0, _react.useCallback)(function () {
    if (isTrackingRef.current) {
      safeExecute(function () {
        endSession();
      }, 'Erreur lors du cleanup:');
      isTrackingRef.current = false;
      currentSessionRef.current = null;
    }
  }, [endSession]);
  (0, _react.useEffect)(function () {
    if (lastPathnameRef.current === pathname) {
      return;
    }
    lastPathnameRef.current = pathname;
    var isExercise = detectExercise(segments);
    if (isExercise) {
      var exerciseType = segments[segments.length - 1];
      handleExerciseStart(exerciseType);
    } else {
      handleExerciseEnd();
    }
    return cleanup;
  }, [segments, pathname, startSession, endSession, updateStreak, cleanup]);
  (0, _react.useEffect)(function () {
    return function () {
      if (isTrackingRef.current) {
        try {
          endSession();
        } catch (error) {
          console.warn('Erreur lors du cleanup final:', error);
        }
        isTrackingRef.current = false;
        currentSessionRef.current = null;
      }
    };
  }, [endSession]);
};
var _default = exports.default = useRouteActivityTracker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,