abbfc4ae206adbf527122e4ca6d25697
_getJestObj().mock('expo-linear-gradient', function () {
  var _require = require('react-native'),
    View = _require.View;
  return {
    LinearGradient: function LinearGradient(props) {
      return (0, _jsxRuntime.jsx)(View, Object.assign({}, props));
    }
  };
});
_getJestObj().mock('@expo/vector-icons', function () {
  var _require2 = require('react-native'),
    Text = _require2.Text;
  return {
    Ionicons: function Ionicons(props) {
      return (0, _jsxRuntime.jsx)(Text, {
        testID: `icon-${props.name}`,
        children: props.name
      });
    }
  };
});
_getJestObj().mock('react-native', function () {
  return Object.assign({}, jest.requireActual('react-native'), {
    Share: {
      share: jest.fn()
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ResultsScreen = _interopRequireDefault(require("../../../src/components/exercise-common/ResultsScreen"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ResultsScreen', function () {
  beforeAll(function () {
    jest.useFakeTimers();
  });
  afterAll(function () {
    jest.useRealTimers();
  });
  var defaultProps = {
    totalQuestions: 10,
    correctAnswers: 8,
    incorrectAnswers: 1,
    skippedAnswers: 2,
    timeTaken: '01:30',
    exerciseType: 'Vocabulary',
    level: 'B1',
    levelColor: '#3B82F6',
    feedback: '',
    onRetry: jest.fn(),
    onContinue: jest.fn(),
    showDetailedResults: false,
    detailedResults: []
  };
  afterEach(function () {
    jest.clearAllMocks();
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
  });
  it('renders basic statistics correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps))),
      getByText = _render.getByText;
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    expect(getByText('80%')).toBeTruthy();
    expect(getByText('8/10')).toBeTruthy();
    expect(getByText('Correctes')).toBeTruthy();
    expect(getByText('8')).toBeTruthy();
    expect(getByText('Incorrectes')).toBeTruthy();
    expect(getByText('1')).toBeTruthy();
    expect(getByText('Passées')).toBeTruthy();
    expect(getByText('2')).toBeTruthy();
    expect(getByText('Temps')).toBeTruthy();
    expect(getByText('01:30')).toBeTruthy();
  });
  it('displays feedback when provided', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        feedback: "Great job!"
      }))),
      getByText = _render2.getByText;
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    expect(getByText('Conseils pour progresser')).toBeTruthy();
    expect(getByText('Great job!')).toBeTruthy();
  });
  it('does not display feedback when not provided', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        feedback: ""
      }))),
      queryByText = _render3.queryByText;
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    expect(queryByText('Conseils pour progresser')).toBeNull();
  });
  it('displays detailed results when showDetailedResults is true and data is present', function () {
    var detailedResults = [{
      question: 'Q1',
      userAnswer: 'A',
      correctAnswer: 'B',
      isCorrect: false,
      isSkipped: false
    }];
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        showDetailedResults: true,
        detailedResults: detailedResults
      }))),
      getByText = _render4.getByText;
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    expect(getByText('Détail des réponses')).toBeTruthy();
    expect(getByText('Question 1')).toBeTruthy();
    expect(getByText('Q1')).toBeTruthy();
    expect(getByText('Votre réponse:')).toBeTruthy();
    expect(getByText('A')).toBeTruthy();
    expect(getByText('Réponse correcte:')).toBeTruthy();
    expect(getByText('B')).toBeTruthy();
  });
  it('does not display detailed results when showDetailedResults is false', function () {
    var detailedResults = [{
      question: 'Q1',
      userAnswer: 'A',
      correctAnswer: 'B',
      isCorrect: false,
      isSkipped: false
    }];
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        showDetailedResults: false,
        detailedResults: detailedResults
      }))),
      queryByText = _render5.queryByText;
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    expect(queryByText('Détail des réponses')).toBeNull();
  });
  it('shows "Excellent!" for >= 80% score', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        correctAnswers: 8,
        totalQuestions: 10
      }))),
      getByText = _render6.getByText,
      getByTestId = _render6.getByTestId;
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    expect(getByText('Excellent!')).toBeTruthy();
    expect(getByTestId('icon-trophy')).toBeTruthy();
  });
  it('shows "Bien joué!" for >= 60% score', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        correctAnswers: 6,
        totalQuestions: 10
      }))),
      getByText = _render7.getByText,
      getByTestId = _render7.getByTestId;
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    expect(getByText('Bien joué!')).toBeTruthy();
    expect(getByTestId('icon-thumbs-up')).toBeTruthy();
  });
  it('shows "Pas mal!" for >= 40% score', function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        correctAnswers: 4,
        totalQuestions: 10
      }))),
      getByText = _render8.getByText,
      getByTestId = _render8.getByTestId;
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    expect(getByText('Pas mal!')).toBeTruthy();
    expect(getByTestId('icon-fitness')).toBeTruthy();
  });
  it('shows "Continuez vos efforts" for < 40% score', function () {
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        correctAnswers: 3,
        totalQuestions: 10
      }))),
      getByText = _render9.getByText,
      getByTestId = _render9.getByTestId;
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    expect(getByText('Continuez vos efforts')).toBeTruthy();
    expect(getByTestId('icon-school')).toBeTruthy();
  });
  it('calls onRetry when the retry button is pressed', function () {
    var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps))),
      getByText = _render0.getByText;
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    _reactNative.fireEvent.press(getByText('Réessayer'));
    expect(defaultProps.onRetry).toHaveBeenCalledTimes(1);
  });
  it('calls onContinue when the continue button is pressed', function () {
    var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps))),
      getByText = _render1.getByText;
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    _reactNative.fireEvent.press(getByText('Continuer'));
    expect(defaultProps.onContinue).toHaveBeenCalledTimes(1);
  });
  it('calls Share.share with correct data when share button is pressed', (0, _asyncToGenerator2.default)(function* () {
    var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps))),
      getByText = _render10.getByText;
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    _reactNative.fireEvent.press(getByText('Partager'));
    expect(_reactNative2.Share.share).toHaveBeenCalledWith({
      message: 'J\'ai obtenu 8/10 (80%) dans mon exercice de Vocabulary niveau B1 sur l\'application JOUD English!',
      title: 'Mes résultats d\'apprentissage'
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfcmVxdWlyZSIsInJlcXVpcmUiLCJWaWV3IiwiTGluZWFyR3JhZGllbnQiLCJwcm9wcyIsIl9qc3hSdW50aW1lIiwianN4IiwiT2JqZWN0IiwiYXNzaWduIiwiX3JlcXVpcmUyIiwiVGV4dCIsIklvbmljb25zIiwidGVzdElEIiwibmFtZSIsImNoaWxkcmVuIiwiamVzdCIsInJlcXVpcmVBY3R1YWwiLCJTaGFyZSIsInNoYXJlIiwiZm4iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX3JlYWN0IiwiX3JlYWN0TmF0aXZlIiwiX1Jlc3VsdHNTY3JlZW4iLCJfcmVhY3ROYXRpdmUyIiwiX3JlcXVpcmUzIiwiZGVzY3JpYmUiLCJiZWZvcmVBbGwiLCJ1c2VGYWtlVGltZXJzIiwiYWZ0ZXJBbGwiLCJ1c2VSZWFsVGltZXJzIiwiZGVmYXVsdFByb3BzIiwidG90YWxRdWVzdGlvbnMiLCJjb3JyZWN0QW5zd2VycyIsImluY29ycmVjdEFuc3dlcnMiLCJza2lwcGVkQW5zd2VycyIsInRpbWVUYWtlbiIsImV4ZXJjaXNlVHlwZSIsImxldmVsIiwibGV2ZWxDb2xvciIsImZlZWRiYWNrIiwib25SZXRyeSIsIm9uQ29udGludWUiLCJzaG93RGV0YWlsZWRSZXN1bHRzIiwiZGV0YWlsZWRSZXN1bHRzIiwiYWZ0ZXJFYWNoIiwiY2xlYXJBbGxNb2NrcyIsImFjdCIsInJ1bkFsbFRpbWVycyIsIml0IiwiX3JlbmRlciIsInJlbmRlciIsImRlZmF1bHQiLCJnZXRCeVRleHQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwiX3JlbmRlcjIiLCJfcmVuZGVyMyIsInF1ZXJ5QnlUZXh0IiwidG9CZU51bGwiLCJxdWVzdGlvbiIsInVzZXJBbnN3ZXIiLCJjb3JyZWN0QW5zd2VyIiwiaXNDb3JyZWN0IiwiaXNTa2lwcGVkIiwiX3JlbmRlcjQiLCJfcmVuZGVyNSIsIl9yZW5kZXI2IiwiZ2V0QnlUZXN0SWQiLCJfcmVuZGVyNyIsIl9yZW5kZXI4IiwiX3JlbmRlcjkiLCJfcmVuZGVyMCIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIiwiX3JlbmRlcjEiLCJfcmVuZGVyMTAiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsIm1lc3NhZ2UiLCJ0aXRsZSJdLCJzb3VyY2VzIjpbIlJlc3VsdHNTY3JlZW4udGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBfX3Rlc3RzX18vY29tcG9uZW50cy9leGVyY2lzZS1jb21tb24vUmVzdWx0c1NjcmVlbi50ZXN0LmpzXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQsIGFjdCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCBSZXN1bHRzU2NyZWVuIGZyb20gJy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2V4ZXJjaXNlLWNvbW1vbi9SZXN1bHRzU2NyZWVuJztcbmltcG9ydCB7IFNoYXJlIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcblxuLy8gTW9jayBkZXMgZMOpcGVuZGFuY2VzXG5qZXN0Lm1vY2soJ2V4cG8tbGluZWFyLWdyYWRpZW50JywgKCkgPT4ge1xuICBjb25zdCB7IFZpZXcgfSA9IHJlcXVpcmUoJ3JlYWN0LW5hdGl2ZScpO1xuICByZXR1cm4ge1xuICAgIExpbmVhckdyYWRpZW50OiAocHJvcHMpID0+IDxWaWV3IHsuLi5wcm9wc30gLz4sXG4gIH07XG59KTtcbmplc3QubW9jaygnQGV4cG8vdmVjdG9yLWljb25zJywgKCkgPT4ge1xuICBjb25zdCB7IFRleHQgfSA9IHJlcXVpcmUoJ3JlYWN0LW5hdGl2ZScpO1xuICByZXR1cm4ge1xuICAgIElvbmljb25zOiAocHJvcHMpID0+IDxUZXh0IHRlc3RJRD17YGljb24tJHtwcm9wcy5uYW1lfWB9Pntwcm9wcy5uYW1lfTwvVGV4dD4sXG4gIH07XG59KTtcblxuLy8gTW9jayBkdSBtb2R1bGUgU2hhcmUgZGUgbWFuacOocmUgcm9idXN0ZVxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUnLCAoKSA9PiAoe1xuICAuLi5qZXN0LnJlcXVpcmVBY3R1YWwoJ3JlYWN0LW5hdGl2ZScpLFxuICBTaGFyZToge1xuICAgIHNoYXJlOiBqZXN0LmZuKCksXG4gIH0sXG59KSk7XG5cbmRlc2NyaWJlKCdSZXN1bHRzU2NyZWVuJywgKCkgPT4ge1xuICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgIGplc3QudXNlRmFrZVRpbWVycygpO1xuICB9KTtcblxuICBhZnRlckFsbCgoKSA9PiB7XG4gICAgamVzdC51c2VSZWFsVGltZXJzKCk7XG4gIH0pO1xuXG4gIGNvbnN0IGRlZmF1bHRQcm9wcyA9IHtcbiAgICB0b3RhbFF1ZXN0aW9uczogMTAsXG4gICAgY29ycmVjdEFuc3dlcnM6IDgsXG4gICAgaW5jb3JyZWN0QW5zd2VyczogMSxcbiAgICBza2lwcGVkQW5zd2VyczogMiwgLy8gTW9kaWZpw6kgcG91ciDDqnRyZSB1bmlxdWVcbiAgICB0aW1lVGFrZW46ICcwMTozMCcsXG4gICAgZXhlcmNpc2VUeXBlOiAnVm9jYWJ1bGFyeScsXG4gICAgbGV2ZWw6ICdCMScsXG4gICAgbGV2ZWxDb2xvcjogJyMzQjgyRjYnLFxuICAgIGZlZWRiYWNrOiAnJyxcbiAgICBvblJldHJ5OiBqZXN0LmZuKCksXG4gICAgb25Db250aW51ZTogamVzdC5mbigpLFxuICAgIHNob3dEZXRhaWxlZFJlc3VsdHM6IGZhbHNlLFxuICAgIGRldGFpbGVkUmVzdWx0czogW10sXG4gIH07XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICBhY3QoKCkgPT4ge1xuICAgICAgamVzdC5ydW5BbGxUaW1lcnMoKTsgLy8gQXNzdXJlIHF1ZSB0b3V0ZXMgbGVzIGFuaW1hdGlvbnMgc29udCB0ZXJtaW7DqWVzXG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdyZW5kZXJzIGJhc2ljIHN0YXRpc3RpY3MgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPFJlc3VsdHNTY3JlZW4gey4uLmRlZmF1bHRQcm9wc30gLz4pO1xuICAgIGFjdCgoKSA9PiB7IGplc3QucnVuQWxsVGltZXJzKCk7IH0pO1xuXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnODAlJykpLnRvQmVUcnV0aHkoKTsgLy8gOC8xMFxuICAgIGV4cGVjdChnZXRCeVRleHQoJzgvMTAnKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ0NvcnJlY3RlcycpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnOCcpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnSW5jb3JyZWN0ZXMnKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJzEnKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ1Bhc3PDqWVzJykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCcyJykpLnRvQmVUcnV0aHkoKTsgLy8gVsOpcmlmaWUgbGEgbm91dmVsbGUgdmFsZXVyXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnVGVtcHMnKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJzAxOjMwJykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ2Rpc3BsYXlzIGZlZWRiYWNrIHdoZW4gcHJvdmlkZWQnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcig8UmVzdWx0c1NjcmVlbiB7Li4uZGVmYXVsdFByb3BzfSBmZWVkYmFjaz1cIkdyZWF0IGpvYiFcIiAvPik7XG4gICAgYWN0KCgpID0+IHsgamVzdC5ydW5BbGxUaW1lcnMoKTsgfSk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnQ29uc2VpbHMgcG91ciBwcm9ncmVzc2VyJykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdHcmVhdCBqb2IhJykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ2RvZXMgbm90IGRpc3BsYXkgZmVlZGJhY2sgd2hlbiBub3QgcHJvdmlkZWQnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBxdWVyeUJ5VGV4dCB9ID0gcmVuZGVyKDxSZXN1bHRzU2NyZWVuIHsuLi5kZWZhdWx0UHJvcHN9IGZlZWRiYWNrPVwiXCIgLz4pO1xuICAgIGFjdCgoKSA9PiB7IGplc3QucnVuQWxsVGltZXJzKCk7IH0pO1xuICAgIGV4cGVjdChxdWVyeUJ5VGV4dCgnQ29uc2VpbHMgcG91ciBwcm9ncmVzc2VyJykpLnRvQmVOdWxsKCk7XG4gIH0pO1xuXG4gIGl0KCdkaXNwbGF5cyBkZXRhaWxlZCByZXN1bHRzIHdoZW4gc2hvd0RldGFpbGVkUmVzdWx0cyBpcyB0cnVlIGFuZCBkYXRhIGlzIHByZXNlbnQnLCAoKSA9PiB7XG4gICAgY29uc3QgZGV0YWlsZWRSZXN1bHRzID0gW1xuICAgICAgeyBxdWVzdGlvbjogJ1ExJywgdXNlckFuc3dlcjogJ0EnLCBjb3JyZWN0QW5zd2VyOiAnQicsIGlzQ29ycmVjdDogZmFsc2UsIGlzU2tpcHBlZDogZmFsc2UgfSxcbiAgICBdO1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICA8UmVzdWx0c1NjcmVlbiB7Li4uZGVmYXVsdFByb3BzfSBzaG93RGV0YWlsZWRSZXN1bHRzPXt0cnVlfSBkZXRhaWxlZFJlc3VsdHM9e2RldGFpbGVkUmVzdWx0c30gLz5cbiAgICApO1xuICAgIGFjdCgoKSA9PiB7IGplc3QucnVuQWxsVGltZXJzKCk7IH0pO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ0TDqXRhaWwgZGVzIHLDqXBvbnNlcycpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnUXVlc3Rpb24gMScpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnUTEnKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ1ZvdHJlIHLDqXBvbnNlOicpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnQScpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnUsOpcG9uc2UgY29ycmVjdGU6JykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdCJykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ2RvZXMgbm90IGRpc3BsYXkgZGV0YWlsZWQgcmVzdWx0cyB3aGVuIHNob3dEZXRhaWxlZFJlc3VsdHMgaXMgZmFsc2UnLCAoKSA9PiB7XG4gICAgY29uc3QgZGV0YWlsZWRSZXN1bHRzID0gW1xuICAgICAgeyBxdWVzdGlvbjogJ1ExJywgdXNlckFuc3dlcjogJ0EnLCBjb3JyZWN0QW5zd2VyOiAnQicsIGlzQ29ycmVjdDogZmFsc2UsIGlzU2tpcHBlZDogZmFsc2UgfSxcbiAgICBdO1xuICAgIGNvbnN0IHsgcXVlcnlCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgIDxSZXN1bHRzU2NyZWVuIHsuLi5kZWZhdWx0UHJvcHN9IHNob3dEZXRhaWxlZFJlc3VsdHM9e2ZhbHNlfSBkZXRhaWxlZFJlc3VsdHM9e2RldGFpbGVkUmVzdWx0c30gLz5cbiAgICApO1xuICAgIGFjdCgoKSA9PiB7IGplc3QucnVuQWxsVGltZXJzKCk7IH0pO1xuICAgIGV4cGVjdChxdWVyeUJ5VGV4dCgnRMOpdGFpbCBkZXMgcsOpcG9uc2VzJykpLnRvQmVOdWxsKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG93cyBcIkV4Y2VsbGVudCFcIiBmb3IgPj0gODAlIHNjb3JlJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0LCBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxSZXN1bHRzU2NyZWVuIHsuLi5kZWZhdWx0UHJvcHN9IGNvcnJlY3RBbnN3ZXJzPXs4fSB0b3RhbFF1ZXN0aW9ucz17MTB9IC8+KTtcbiAgICBhY3QoKCkgPT4geyBqZXN0LnJ1bkFsbFRpbWVycygpOyB9KTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdFeGNlbGxlbnQhJykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2ljb24tdHJvcGh5JykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3dzIFwiQmllbiBqb3XDqSFcIiBmb3IgPj0gNjAlIHNjb3JlJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0LCBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxSZXN1bHRzU2NyZWVuIHsuLi5kZWZhdWx0UHJvcHN9IGNvcnJlY3RBbnN3ZXJzPXs2fSB0b3RhbFF1ZXN0aW9ucz17MTB9IC8+KTtcbiAgICBhY3QoKCkgPT4geyBqZXN0LnJ1bkFsbFRpbWVycygpOyB9KTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdCaWVuIGpvdcOpIScpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCdpY29uLXRodW1icy11cCcpKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KCdzaG93cyBcIlBhcyBtYWwhXCIgZm9yID49IDQwJSBzY29yZScsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCwgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcig8UmVzdWx0c1NjcmVlbiB7Li4uZGVmYXVsdFByb3BzfSBjb3JyZWN0QW5zd2Vycz17NH0gdG90YWxRdWVzdGlvbnM9ezEwfSAvPik7XG4gICAgYWN0KCgpID0+IHsgamVzdC5ydW5BbGxUaW1lcnMoKTsgfSk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnUGFzIG1hbCEnKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnaWNvbi1maXRuZXNzJykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3dzIFwiQ29udGludWV6IHZvcyBlZmZvcnRzXCIgZm9yIDwgNDAlIHNjb3JlJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0LCBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxSZXN1bHRzU2NyZWVuIHsuLi5kZWZhdWx0UHJvcHN9IGNvcnJlY3RBbnN3ZXJzPXszfSB0b3RhbFF1ZXN0aW9ucz17MTB9IC8+KTtcbiAgICBhY3QoKCkgPT4geyBqZXN0LnJ1bkFsbFRpbWVycygpOyB9KTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdDb250aW51ZXogdm9zIGVmZm9ydHMnKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnaWNvbi1zY2hvb2wnKSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICBpdCgnY2FsbHMgb25SZXRyeSB3aGVuIHRoZSByZXRyeSBidXR0b24gaXMgcHJlc3NlZCcsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKDxSZXN1bHRzU2NyZWVuIHsuLi5kZWZhdWx0UHJvcHN9IC8+KTtcbiAgICBhY3QoKCkgPT4geyBqZXN0LnJ1bkFsbFRpbWVycygpOyB9KTtcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCdSw6llc3NheWVyJykpO1xuICAgIGV4cGVjdChkZWZhdWx0UHJvcHMub25SZXRyeSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICB9KTtcblxuICBpdCgnY2FsbHMgb25Db250aW51ZSB3aGVuIHRoZSBjb250aW51ZSBidXR0b24gaXMgcHJlc3NlZCcsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKDxSZXN1bHRzU2NyZWVuIHsuLi5kZWZhdWx0UHJvcHN9IC8+KTtcbiAgICBhY3QoKCkgPT4geyBqZXN0LnJ1bkFsbFRpbWVycygpOyB9KTtcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCdDb250aW51ZXInKSk7XG4gICAgZXhwZWN0KGRlZmF1bHRQcm9wcy5vbkNvbnRpbnVlKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xuXG4gIGl0KCdjYWxscyBTaGFyZS5zaGFyZSB3aXRoIGNvcnJlY3QgZGF0YSB3aGVuIHNoYXJlIGJ1dHRvbiBpcyBwcmVzc2VkJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPFJlc3VsdHNTY3JlZW4gey4uLmRlZmF1bHRQcm9wc30gLz4pO1xuICAgIGFjdCgoKSA9PiB7IGplc3QucnVuQWxsVGltZXJzKCk7IH0pO1xuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ1BhcnRhZ2VyJykpO1xuXG4gICAgZXhwZWN0KFNoYXJlLnNoYXJlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICBtZXNzYWdlOiAnSlxcJ2FpIG9idGVudSA4LzEwICg4MCUpIGRhbnMgbW9uIGV4ZXJjaWNlIGRlIFZvY2FidWxhcnkgbml2ZWF1IEIxIHN1ciBsXFwnYXBwbGljYXRpb24gSk9VRCBFbmdsaXNoIScsXG4gICAgICB0aXRsZTogJ01lcyByw6lzdWx0YXRzIGRcXCdhcHByZW50aXNzYWdlJyxcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiJBQU9BQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxZQUFNO0VBQ3RDLElBQUFDLFFBQUEsR0FBaUJDLE9BQU8sQ0FBQyxjQUFjLENBQUM7SUFBaENDLElBQUksR0FBQUYsUUFBQSxDQUFKRSxJQUFJO0VBQ1osT0FBTztJQUNMQyxjQUFjLEVBQUUsU0FBaEJBLGNBQWNBLENBQUdDLEtBQUs7TUFBQSxPQUFLLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDSixJQUFJLEVBQUFLLE1BQUEsQ0FBQUMsTUFBQSxLQUFLSixLQUFLLENBQUcsQ0FBQztJQUFBO0VBQ2hELENBQUM7QUFDSCxDQUFDLENBQUM7QUFDRk4sV0FBQSxHQUFLQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsWUFBTTtFQUNwQyxJQUFBVSxTQUFBLEdBQWlCUixPQUFPLENBQUMsY0FBYyxDQUFDO0lBQWhDUyxJQUFJLEdBQUFELFNBQUEsQ0FBSkMsSUFBSTtFQUNaLE9BQU87SUFDTEMsUUFBUSxFQUFFLFNBQVZBLFFBQVFBLENBQUdQ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