7139fd551b9faa7de3e6f9b02a24e247
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _CategorySelector = _interopRequireWildcard(require("../../../src/components/exercise-common/CategorySelector"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
jest.spyOn(_reactNative2.Animated, 'timing').mockImplementation(function (value, config) {
  var mockTiming = {
    start: function start(callback) {
      if (callback) {
        callback({
          finished: true
        });
      }
    },
    stop: jest.fn()
  };
  return mockTiming;
});
jest.spyOn(_reactNative2.ScrollView.prototype, 'scrollTo').mockImplementation(function () {});
describe('CategorySelector Component', function () {
  var mockCategories = [{
    id: '1',
    name: 'Fruits'
  }, {
    id: '2',
    name: 'Vegetables'
  }, {
    id: '3',
    name: 'Dairy Products'
  }, {
    id: '4',
    name: 'Meat & Fish'
  }, {
    id: '5',
    name: 'Beverages'
  }];
  var defaultProps = {
    categories: mockCategories,
    selectedCategory: '1',
    onSelectCategory: jest.fn()
  };
  var renderCategorySelector = function renderCategorySelector() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, props)));
  };
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('Rendering', function () {
    it('should render without crashing', function () {
      expect(renderCategorySelector()).toBeTruthy();
    });
    it('should render all categories correctly', function () {
      var _renderCategorySelect = renderCategorySelector(),
        getByText = _renderCategorySelect.getByText;
      mockCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should render categories in the correct order', function () {
      var _renderCategorySelect2 = renderCategorySelector(),
        getAllByRole = _renderCategorySelect2.getAllByRole;
      var categoryNames = getAllByRole('button').map(function (element) {
        return element.props.accessibilityLabel;
      });
      expect(categoryNames).toEqual(mockCategories.map(function (cat) {
        return cat.name;
      }));
    });
    it('should handle empty categories array gracefully', function () {
      var _renderCategorySelect3 = renderCategorySelector({
          categories: []
        }),
        queryByText = _renderCategorySelect3.queryByText;
      mockCategories.forEach(function (category) {
        expect(queryByText(category.name)).toBeNull();
      });
    });
    it('should highlight the selected category visually', function () {
      var _renderCategorySelect4 = renderCategorySelector({
          selectedCategory: '2'
        }),
        getByRole = _renderCategorySelect4.getByRole;
      var selectedPill = getByRole('button', {
        name: 'Vegetables'
      });
      expect(selectedPill).toHaveAccessibilityState({
        selected: true
      });
    });
  });
  describe('User Interactions', function () {
    it('should call onSelectCategory when a different category is pressed', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect5 = renderCategorySelector({
          selectedCategory: '1',
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect5.getByText;
      _reactNative.fireEvent.press(getByText('Vegetables'));
      expect(mockOnSelect).toHaveBeenCalledTimes(1);
      expect(mockOnSelect).toHaveBeenCalledWith('2');
    });
    it('should not call onSelectCategory when the same category is pressed', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect6 = renderCategorySelector({
          selectedCategory: '1',
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect6.getByText;
      _reactNative.fireEvent.press(getByText('Fruits'));
      expect(mockOnSelect).not.toHaveBeenCalled();
    });
    it('should call onSelectCategory with correct category id for each category', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect7 = renderCategorySelector({
          selectedCategory: '1',
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect7.getByText;
      var categoriesToTest = mockCategories.filter(function (cat) {
        return cat.id !== '1';
      });
      categoriesToTest.forEach(function (category) {
        _reactNative.fireEvent.press(getByText(category.name));
        expect(mockOnSelect).toHaveBeenCalledWith(category.id);
      });
      expect(mockOnSelect).toHaveBeenCalledTimes(categoriesToTest.length);
    });
  });
  describe('Animations', function () {
    it('should trigger press animations correctly', function () {
      var _renderCategorySelect8 = renderCategorySelector(),
        getByText = _renderCategorySelect8.getByText;
      var categoryPill = getByText('Vegetables');
      (0, _reactNative.act)(function () {
        (0, _reactNative.fireEvent)(categoryPill, 'pressIn');
        (0, _reactNative.fireEvent)(categoryPill, 'pressOut');
      });
      expect(categoryPill).toBeTruthy();
    });
    it('should handle rapid press interactions without crashing', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect9 = renderCategorySelector({
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect9.getByText;
      var categoryPill = getByText('Vegetables');
      (0, _reactNative.act)(function () {
        (0, _reactNative.fireEvent)(categoryPill, 'pressIn');
        (0, _reactNative.fireEvent)(categoryPill, 'pressOut');
        _reactNative.fireEvent.press(categoryPill);
        (0, _reactNative.fireEvent)(categoryPill, 'pressIn');
        (0, _reactNative.fireEvent)(categoryPill, 'pressOut');
      });
      expect(mockOnSelect).toHaveBeenCalledWith('2');
      expect(categoryPill).toBeTruthy();
    });
    it('should not trigger new animation if one is already in progress', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect0 = renderCategorySelector({
          selectedCategory: '1',
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect0.getByText;
      var animatedSpy = jest.spyOn(_reactNative2.Animated, 'timing');
      _reactNative.fireEvent.press(getByText('Vegetables'));
      _reactNative.fireEvent.press(getByText('Dairy Products'));
      expect(mockOnSelect).toHaveBeenCalledTimes(1);
      expect(mockOnSelect).toHaveBeenCalledWith('2');
      animatedSpy.mockRestore();
    });
  });
  describe('Scrolling Behavior', function () {
    it('should scroll to selected category on mount', (0, _asyncToGenerator2.default)(function* () {
      var _renderCategorySelect1 = renderCategorySelector({
          selectedCategory: '4'
        }),
        getByText = _renderCategorySelect1.getByText;
      expect(getByText('Meat & Fish')).toBeTruthy();
    }));
    it('should handle scrolling when selectedCategory changes', (0, _asyncToGenerator2.default)(function* () {
      var _renderCategorySelect10 = renderCategorySelector({
          selectedCategory: '1'
        }),
        rerender = _renderCategorySelect10.rerender,
        getByText = _renderCategorySelect10.getByText;
      var scrollToSpy = jest.spyOn(_reactNative2.ScrollView.prototype, 'scrollTo');
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
        selectedCategory: "5"
      })));
      yield (0, _reactNative.waitFor)(function () {
        expect(scrollToSpy).toHaveBeenCalled();
      });
      expect(getByText('Beverages')).toBeTruthy();
      scrollToSpy.mockRestore();
    }));
  });
  describe('Edge Cases', function () {
    it('should handle undefined selectedCategory gracefully', function () {
      var _renderCategorySelect11 = renderCategorySelector({
          selectedCategory: undefined
        }),
        getByText = _renderCategorySelect11.getByText;
      mockCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should handle null selectedCategory gracefully', function () {
      var _renderCategorySelect12 = renderCategorySelector({
          selectedCategory: null
        }),
        getByText = _renderCategorySelect12.getByText;
      mockCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should handle non-existent selectedCategory id', function () {
      var _renderCategorySelect13 = renderCategorySelector({
          selectedCategory: 'non-existent'
        }),
        getByText = _renderCategorySelect13.getByText;
      mockCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should handle missing onSelectCategory prop gracefully', function () {
      var _renderCategorySelect14 = renderCategorySelector({
          onSelectCategory: undefined
        }),
        getByText = _renderCategorySelect14.getByText;
      expect(function () {
        _reactNative.fireEvent.press(getByText('Vegetables'));
      }).not.toThrow();
    });
    it('should handle categories with special characters in names', function () {
      var specialCategories = [{
        id: '1',
        name: 'Café & Thé'
      }, {
        id: '2',
        name: 'Fruits & Légumes'
      }, {
        id: '3',
        name: 'Viande/Poisson'
      }];
      var _renderCategorySelect15 = renderCategorySelector({
          categories: specialCategories
        }),
        getByText = _renderCategorySelect15.getByText;
      specialCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should handle very long category names', function () {
      var longNameCategories = [{
        id: '1',
        name: 'This is a very long category name that might cause layout issues'
      }, {
        id: '2',
        name: 'Short'
      }];
      var _renderCategorySelect16 = renderCategorySelector({
          categories: longNameCategories
        }),
        getByText = _renderCategorySelect16.getByText;
      longNameCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
  });
  describe('Performance', function () {
    it('should not re-render unnecessarily when props do not change', function () {
      var renderSpy = jest.fn();
      var TestWrapper = function TestWrapper(props) {
        renderSpy();
        return (0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, props));
      };
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, Object.assign({}, defaultProps))),
        rerender = _render.rerender;
      renderSpy.mockClear();
      rerender((0, _jsxRuntime.jsx)(TestWrapper, Object.assign({}, defaultProps)));
      expect(renderSpy).toHaveBeenCalledTimes(0);
    });
    it('should handle large number of categories efficiently', function () {
      var manyCategories = Array.from({
        length: 100
      }, function (_, i) {
        return {
          id: `${i + 1}`,
          name: `Category ${i + 1}`
        };
      });
      var startTime = Date.now();
      var _renderCategorySelect17 = renderCategorySelector({
          categories: manyCategories
        }),
        queryAllByText = _renderCategorySelect17.queryAllByText;
      var endTime = Date.now();
      expect(endTime - startTime).toBeLessThan(1000);
      var categoryElements = queryAllByText(/^Category/);
      expect(categoryElements).toHaveLength(100);
    });
  });
  describe('Accessibility', function () {
    it('should have proper accessibility labels', function () {
      var _renderCategorySelect18 = renderCategorySelector(),
        getByLabelText = _renderCategorySelect18.getByLabelText;
      mockCategories.forEach(function (category) {
        var element = getByLabelText(category.name);
        expect(element).toBeTruthy();
      });
    });
    it('should support screen reader navigation', function () {
      var _renderCategorySelect19 = renderCategorySelector(),
        getAllByRole = _renderCategorySelect19.getAllByRole;
      var buttons = getAllByRole('button');
      expect(buttons).toHaveLength(mockCategories.length);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,