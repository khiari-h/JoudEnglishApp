19f9f11ea2aeea5028919f9784d9992b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = require("react");
var _reactNative = require("react-native");
var _native = require("@react-navigation/native");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _Container = _interopRequireDefault(require("../../../components/layout/Container"));
var _SpellingHeader = _interopRequireDefault(require("./SpellingHeader"));
var _SpellingProgress = _interopRequireDefault(require("./SpellingProgress"));
var _SpellingCard = _interopRequireDefault(require("./SpellingCard"));
var _SpellingActions = _interopRequireDefault(require("./SpellingActions"));
var _useSpelling2 = _interopRequireDefault(require("./hooks/useSpelling"));
var _useLastActivity2 = _interopRequireDefault(require("../../../hooks/useLastActivity"));
var _spellingDataHelper = require("../../../utils/spelling/spellingDataHelper");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var SpellingExercise = function SpellingExercise(_ref) {
  var route = _ref.route;
  var _ref2 = route.params || {},
    _ref2$level = _ref2.level,
    level = _ref2$level === void 0 ? "1" : _ref2$level,
    _ref2$exerciseType = _ref2.exerciseType,
    exerciseType = _ref2$exerciseType === void 0 ? "correction" : _ref2$exerciseType;
  var navigation = (0, _native.useNavigation)();
  var styles = (0, _style.default)();
  var _useLastActivity = (0, _useLastActivity2.default)(),
    saveActivity = _useLastActivity.saveActivity;
  var levelColor = (0, _spellingDataHelper.getLevelColor)(level);
  var getExerciseTypeName = function getExerciseTypeName() {
    if (exerciseType === "correction") return "Correction";
    if (exerciseType === "rules") return "R√®gles";
    return "Homophones";
  };
  var exerciseTypeName = getExerciseTypeName();
  var spellingData = (0, _react.useMemo)(function () {
    try {
      return (0, _spellingDataHelper.getSpellingData)(level, exerciseType);
    } catch (error) {
      console.warn(`Error getting spelling data for level ${level}, type ${exerciseType}:`, error);
      return null;
    }
  }, [level, exerciseType]);
  var _useSpelling = (0, _useSpelling2.default)(spellingData, level, exerciseType),
    currentExerciseIndex = _useSpelling.currentExerciseIndex,
    userInput = _useSpelling.userInput,
    showHint = _useSpelling.showHint,
    showFeedback = _useSpelling.showFeedback,
    isCorrect = _useSpelling.isCorrect,
    loaded = _useSpelling.loaded,
    currentExercise = _useSpelling.currentExercise,
    totalExercises = _useSpelling.totalExercises,
    setUserInput = _useSpelling.setUserInput,
    toggleHint = _useSpelling.toggleHint,
    checkAnswer = _useSpelling.checkAnswer,
    handleNext = _useSpelling.handleNext,
    retryExercise = _useSpelling.retryExercise,
    isLastExercise = _useSpelling.isLastExercise,
    hasValidData = _useSpelling.hasValidData;
  console.log('üîç DEBUG SpellingExercise Component:', {
    loaded: loaded,
    hasValidData: hasValidData,
    currentExercise: !!currentExercise,
    currentExerciseIndex: currentExerciseIndex,
    totalExercises: totalExercises,
    spellingData: !!spellingData,
    level: level,
    exerciseType: exerciseType
  });
  (0, _react.useEffect)(function () {
    if (loaded && hasValidData && currentExercise) {
      var saveActivityAsync = function () {
        var _ref3 = (0, _asyncToGenerator2.default)(function* () {
          try {
            yield saveActivity({
              title: `Orthographe ${exerciseTypeName}`,
              level: level,
              type: "spelling",
              metadata: {
                word: currentExerciseIndex,
                totalWords: totalExercises,
                exerciseType: exerciseType,
                content: currentExercise.wordToCorrect || `Exercice ${currentExerciseIndex + 1}`
              }
            });
          } catch (error) {
            console.error("Error saving activity:", error);
          }
        });
        return function saveActivityAsync() {
          return _ref3.apply(this, arguments);
        };
      }();
      saveActivityAsync();
    }
  }, [loaded, hasValidData, currentExercise, level, exerciseType, currentExerciseIndex, totalExercises, saveActivity]);
  var handleBack = (0, _react.useCallback)(function () {
    return navigation.goBack();
  }, [navigation]);
  if (!loaded) {
    return (0, _jsxRuntime.jsxs)(_Container.default, {
      children: [(0, _jsxRuntime.jsx)(_SpellingHeader.default, {
        title: `Orthographe ${exerciseTypeName}`,
        level: level,
        levelColor: levelColor,
        onBack: handleBack
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.loadingContainer,
        children: (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
          size: "large",
          color: levelColor,
          testID: "activity-indicator"
        })
      })]
    });
  }
  if (!hasValidData) {
    return (0, _jsxRuntime.jsxs)(_Container.default, {
      children: [(0, _jsxRuntime.jsx)(_SpellingHeader.default, {
        title: `Orthographe ${exerciseTypeName}`,
        level: level,
        levelColor: levelColor,
        onBack: handleBack
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.loadingContainer,
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: {
            fontSize: 16,
            color: '#64748b',
            textAlign: 'center'
          },
          children: "Aucune donn\xE9e trouv\xE9e pour ce niveau."
        })
      })]
    });
  }
  return (0, _jsxRuntime.jsxs)(_Container.default, {
    children: [(0, _jsxRuntime.jsx)(_SpellingHeader.default, {
      title: `Orthographe ${exerciseTypeName}`,
      level: level,
      levelColor: levelColor,
      onBack: handleBack
    }), (0, _jsxRuntime.jsx)(_SpellingProgress.default, {
      currentExerciseIndex: currentExerciseIndex + 1,
      totalExercises: totalExercises,
      levelColor: levelColor
    }), (0, _jsxRuntime.jsx)(_SpellingCard.default, {
      exercise: currentExercise,
      userInput: userInput,
      showHint: showHint,
      showFeedback: showFeedback,
      isCorrect: isCorrect,
      onChangeText: setUserInput,
      onToggleHint: toggleHint,
      onCheckAnswer: checkAnswer,
      onNext: handleNext,
      onRetry: retryExercise,
      isLastExercise: isLastExercise,
      levelColor: levelColor
    }), (0, _jsxRuntime.jsx)(_SpellingActions.default, {
      showFeedback: showFeedback,
      isCorrect: isCorrect,
      userInput: userInput,
      isLastExercise: isLastExercise,
      exerciseType: exerciseType,
      levelColor: levelColor,
      onCheck: checkAnswer,
      onNext: handleNext,
      onRetry: retryExercise
    })]
  });
};
var _default = exports.default = SpellingExercise;
SpellingExercise.propTypes = {
  route: _propTypes.default.shape({
    params: _propTypes.default.shape({
      level: _propTypes.default.string,
      exerciseType: _propTypes.default.string
    })
  }).isRequired
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlIiwiX25hdGl2ZSIsIl9wcm9wVHlwZXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX0NvbnRhaW5lciIsIl9TcGVsbGluZ0hlYWRlciIsIl9TcGVsbGluZ1Byb2dyZXNzIiwiX1NwZWxsaW5nQ2FyZCIsIl9TcGVsbGluZ0FjdGlvbnMiLCJfdXNlU3BlbGxpbmcyIiwiX3VzZUxhc3RBY3Rpdml0eTIiLCJfc3BlbGxpbmdEYXRhSGVscGVyIiwiX3N0eWxlIiwiX2pzeFJ1bnRpbWUiLCJTcGVsbGluZ0V4ZXJjaXNlIiwiX3JlZiIsInJvdXRlIiwiX3JlZjIiLCJwYXJhbXMiLCJfcmVmMiRsZXZlbCIsImxldmVsIiwiX3JlZjIkZXhlcmNpc2VUeXBlIiwiZXhlcmNpc2VUeXBlIiwibmF2aWdhdGlvbiIsInVzZU5hdmlnYXRpb24iLCJzdHlsZXMiLCJjcmVhdGVTdHlsZXMiLCJfdXNlTGFzdEFjdGl2aXR5IiwidXNlTGFzdEFjdGl2aXR5Iiwic2F2ZUFjdGl2aXR5IiwibGV2ZWxDb2xvciIsImdldExldmVsQ29sb3IiLCJnZXRFeGVyY2lzZVR5cGVOYW1lIiwiZXhlcmNpc2VUeXBlTmFtZSIsInNwZWxsaW5nRGF0YSIsInVzZU1lbW8iLCJnZXRTcGVsbGluZ0RhdGEiLCJlcnJvciIsImNvbnNvbGUiLCJ3YXJuIiwiX3VzZVNwZWxsaW5nIiwidXNlU3BlbGxpbmciLCJjdXJyZW50RXhlcmNpc2VJbmRleCIsInVzZXJJbnB1dCIsInNob3dIaW50Iiwic2hvd0ZlZWRiYWNrIiwiaXNDb3JyZWN0IiwibG9hZGVkIiwiY3VycmVudEV4ZXJjaXNlIiwidG90YWxFeGVyY2lzZXMiLCJzZXRVc2VySW5wdXQiLCJ0b2dnbGVIaW50IiwiY2hlY2tBbnN3ZXIiLCJoYW5kbGVOZXh0IiwicmV0cnlFeGVyY2lzZSIsImlzTGFzdEV4ZXJjaXNlIiwiaGFzVmFsaWREYXRhIiwibG9nIiwidXNlRWZmZWN0Iiwic2F2ZUFjdGl2aXR5QXN5bmMiLCJfcmVmMyIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImRlZmF1bHQiLCJ0aXRsZSIsInR5cGUiLCJtZXRhZGF0YSIsIndvcmQiLCJ0b3RhbFdvcmRzIiwiY29udGVudCIsIndvcmRUb0NvcnJlY3QiLCJhcHBseSIsImFyZ3VtZW50cyIsImhhbmRsZUJhY2siLCJ1c2VDYWxsYmFjayIsImdvQmFjayIsImpzeHMiLCJjaGlsZHJlbiIsImpzeCIsIm9uQmFjayIsIlZpZXciLCJzdHlsZSIsImxvYWRpbmdDb250YWluZXIiLCJBY3Rpdml0eUluZGljYXRvciIsInNpemUiLCJjb2xvciIsInRlc3RJRCIsIlRleHQiLCJmb250U2l6ZSIsInRleHRBbGlnbiIsImV4ZXJjaXNlIiwib25DaGFuZ2VUZXh0Iiwib25Ub2dnbGVIaW50Iiwib25DaGVja0Fuc3dlciIsIm9uTmV4dCIsIm9uUmV0cnkiLCJvbkNoZWNrIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwic2hhcGUiLCJzdHJpbmciLCJpc1JlcXVpcmVkIl0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU3BlbGxpbmdFeGVyY2lzZS9pbmRleC5qcyAtIFZFUlNJT04gUFJPUFJFXHJcblxyXG5pbXBvcnQgeyB1c2VNZW1vLCB1c2VFZmZlY3QsIHVzZUNhbGxiYWNrIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IFZpZXcsIEFjdGl2aXR5SW5kaWNhdG9yLCBUZXh0IH0gZnJvbSBcInJlYWN0LW5hdGl2ZVwiO1xyXG5pbXBvcnQgeyB1c2VOYXZpZ2F0aW9uIH0gZnJvbSBcIkByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZVwiO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5cclxuaW1wb3J0IENvbnRhaW5lciBmcm9tIFwiLi4vLi4vLi4vY29tcG9uZW50cy9sYXlvdXQvQ29udGFpbmVyXCI7XHJcbmltcG9ydCBTcGVsbGluZ0hlYWRlciBmcm9tIFwiLi9TcGVsbGluZ0hlYWRlclwiO1xyXG5pbXBvcnQgU3BlbGxpbmdQcm9ncmVzcyBmcm9tIFwiLi9TcGVsbGluZ1Byb2dyZXNzXCI7XHJcbmltcG9ydCBTcGVsbGluZ0NhcmQgZnJvbSBcIi4vU3BlbGxpbmdDYXJkXCI7XHJcbmltcG9ydCBTcGVsbGluZ0FjdGlvbnMgZnJvbSBcIi4vU3BlbGxpbmdBY3Rpb25zXCI7XHJcblxyXG5pbXBvcnQgdXNlU3BlbGxpbmcgZnJvbSBcIi4vaG9va3MvdXNlU3BlbGxpbmdcIjtcclxuaW1wb3J0IHVzZUxhc3RBY3Rpdml0eSBmcm9tIFwiLi4vLi4vLi4vaG9va3MvdXNlTGFzdEFjdGl2aXR5XCI7XHJcbmltcG9ydCB7IGdldFNwZWxsaW5nRGF0YSwgZ2V0TGV2ZWxDb2xvciB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9zcGVsbGluZy9zcGVsbGluZ0RhdGFIZWxwZXJcIjtcclxuaW1wb3J0IGNyZWF0ZVN0eWxlcyBmcm9tIFwiLi9zdHlsZVwiO1xyXG5cclxuY29uc3QgU3BlbGxpbmdFeGVyY2lzZSA9ICh7IHJvdXRlIH0pID0+IHtcclxuICBjb25zdCB7IGxldmVsID0gXCIxXCIsIGV4ZXJjaXNlVHlwZSA9IFwiY29ycmVjdGlvblwiIH0gPSByb3V0ZS5wYXJhbXMgfHwge307XHJcbiAgY29uc3QgbmF2aWdhdGlvbiA9IHVzZU5hdmlnYXRpb24oKTtcclxuICBjb25zdCBzdHlsZXMgPSBjcmVhdGVTdHlsZXMoKTtcclxuICBjb25zdCB7IHNhdmVBY3Rpdml0eSB9ID0gdXNlTGFzdEFjdGl2aXR5KCk7XHJcblxyXG4gIGNvbnN0IGxldmVsQ29sb3IgPSBnZXRMZXZlbENvbG9yKGxldmVsKTtcclxuXHJcbiAgLy8g4pyFIEV4dHJhY3Rpb24gZGUgbGEgbG9naXF1ZSBjb25kaXRpb25uZWxsZSBwb3VyIGFtw6lsaW9yZXIgbGEgbGlzaWJpbGl0w6lcclxuICBjb25zdCBnZXRFeGVyY2lzZVR5cGVOYW1lID0gKCkgPT4ge1xyXG4gICAgaWYgKGV4ZXJjaXNlVHlwZSA9PT0gXCJjb3JyZWN0aW9uXCIpIHJldHVybiBcIkNvcnJlY3Rpb25cIjtcclxuICAgIGlmIChleGVyY2lzZVR5cGUgPT09IFwicnVsZXNcIikgcmV0dXJuIFwiUsOoZ2xlc1wiO1xyXG4gICAgcmV0dXJuIFwiSG9tb3Bob25lc1wiO1xyXG4gIH07XHJcbiAgXHJcbiAgLy8gRMOpZmluaXIgZXhlcmNpc2VUeXBlTmFtZSBwb3VyIHRvdXQgbGUgY29tcG9zYW50XHJcbiAgY29uc3QgZXhlcmNpc2VUeXBlTmFtZSA9IGdldEV4ZXJjaXNlVHlwZU5hbWUoKTtcclxuICBcclxuICBjb25zdCBzcGVsbGluZ0RhdGEgPSB1c2VNZW1vKCgpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHJldHVybiBnZXRTcGVsbGluZ0RhdGEobGV2ZWwsIGV4ZXJjaXNlVHlwZSk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAvLyDinIUgR2VzdGlvbiBkJ2VycmV1ciBhcHByb3ByacOpZVxyXG4gICAgICBjb25zb2xlLndhcm4oYEVycm9yIGdldHRpbmcgc3BlbGxpbmcgZGF0YSBmb3IgbGV2ZWwgJHtsZXZlbH0sIHR5cGUgJHtleGVyY2lzZVR5cGV9OmAsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgfSwgW2xldmVsLCBleGVyY2lzZVR5cGVdKTtcclxuXHJcbiAgY29uc3Qge1xyXG4gICAgY3VycmVudEV4ZXJjaXNlSW5kZXgsXHJcbiAgICB1c2VySW5wdXQsXHJcbiAgICBzaG93SGludCxcclxuICAgIHNob3dGZWVkYmFjayxcclxuICAgIGlzQ29ycmVjdCxcclxuICAgIGxvYWRlZCxcclxuICAgIGN1cnJlbnRFeGVyY2lzZSxcclxuICAgIHRvdGFsRXhlcmNpc2VzLFxyXG4gICAgc2V0VXNlcklucHV0LFxyXG4gICAgdG9nZ2xlSGludCxcclxuICAgIGNoZWNrQW5zd2VyLFxyXG4gICAgaGFuZGxlTmV4dCxcclxuICAgIHJldHJ5RXhlcmNpc2UsXHJcbiAgICBpc0xhc3RFeGVyY2lzZSxcclxuICAgIGhhc1ZhbGlkRGF0YSxcclxuICB9ID0gdXNlU3BlbGxpbmcoc3BlbGxpbmdEYXRhLCBsZXZlbCwgZXhlcmNpc2VUeXBlKTtcclxuXHJcbiAgLy8g4pyFIEFKT1VUw4kgOiBEZWJ1ZyBwb3VyIHZvaXIgY2UgcXVlIGxlIGNvbXBvc2FudCByZcOnb2l0IGR1IGhvb2tcclxuICBjb25zb2xlLmxvZygn8J+UjSBERUJVRyBTcGVsbGluZ0V4ZXJjaXNlIENvbXBvbmVudDonLCB7XHJcbiAgICBsb2FkZWQsXHJcbiAgICBoYXNWYWxpZERhdGEsXHJcbiAgICBjdXJyZW50RXhlcmNpc2U6ICEhY3VycmVudEV4ZXJjaXNlLFxyXG4gICAgY3VycmVudEV4ZXJjaXNlSW5kZXgsXHJcbiAgICB0b3RhbEV4ZXJjaXNlcyxcclxuICAgIHNwZWxsaW5nRGF0YTogISFzcGVsbGluZ0RhdGEsXHJcbiAgICBsZXZlbCxcclxuICAgIGV4ZXJjaXNlVHlwZVxyXG4gIH0pO1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgaWYgKGxvYWRlZCAmJiBoYXNWYWxpZERhdGEgJiYgY3VycmVudEV4ZXJjaXNlKSB7XHJcbiAgICAgIGNvbnN0IHNhdmVBY3Rpdml0eUFzeW5jID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBhd2FpdCBzYXZlQWN0aXZpdHkoe1xyXG4gICAgICAgICAgICB0aXRsZTogYE9ydGhvZ3JhcGhlICR7ZXhlcmNpc2VUeXBlTmFtZX1gLFxyXG4gICAgICAgICAgICBsZXZlbCxcclxuICAgICAgICAgICAgdHlwZTogXCJzcGVsbGluZ1wiLFxyXG4gICAgICAgICAgICBtZXRhZGF0YToge1xyXG4gICAgICAgICAgICAgIHdvcmQ6IGN1cnJlbnRFeGVyY2lzZUluZGV4LCAgICAgICAgICAgLy8g4pyFIEluZGV4IGFjdHVlbCAocG91ciBwcm9ncmVzc2lvbilcclxuICAgICAgICAgICAgICB0b3RhbFdvcmRzOiB0b3RhbEV4ZXJjaXNlcywgICAgICAgICAgIC8vIOKchSBUb3RhbCAocG91ciBwcm9ncmVzc2lvbilcclxuICAgICAgICAgICAgICBleGVyY2lzZVR5cGUsXHJcbiAgICAgICAgICAgICAgY29udGVudDogY3VycmVudEV4ZXJjaXNlLndvcmRUb0NvcnJlY3QgfHwgYEV4ZXJjaWNlICR7Y3VycmVudEV4ZXJjaXNlSW5kZXggKyAxfWAgLy8g4pyFIENvbnRlbnUgZGUgbCdleGVyY2ljZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHNhdmluZyBhY3Rpdml0eTpcIiwgZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIHNhdmVBY3Rpdml0eUFzeW5jKCk7XHJcbiAgICB9XHJcbiAgfSwgW2xvYWRlZCwgaGFzVmFsaWREYXRhLCBjdXJyZW50RXhlcmNpc2UsIGxldmVsLCBleGVyY2lzZVR5cGUsIGN1cnJlbnRFeGVyY2lzZUluZGV4LCB0b3RhbEV4ZXJjaXNlcywgc2F2ZUFjdGl2aXR5XSk7XHJcblxyXG4gIGNvbnN0IGhhbmRsZUJhY2sgPSB1c2VDYWxsYmFjaygoKSA9PiBuYXZpZ2F0aW9uLmdvQmFjaygpLCBbbmF2aWdhdGlvbl0pO1xyXG5cclxuICBpZiAoIWxvYWRlZCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPENvbnRhaW5lcj5cclxuICAgICAgICA8U3BlbGxpbmdIZWFkZXJcclxuICAgICAgICAgIHRpdGxlPXtgT3J0aG9ncmFwaGUgJHtleGVyY2lzZVR5cGVOYW1lfWB9XHJcbiAgICAgICAgICBsZXZlbD17bGV2ZWx9XHJcbiAgICAgICAgICBsZXZlbENvbG9yPXtsZXZlbENvbG9yfVxyXG4gICAgICAgICAgb25CYWNrPXtoYW5kbGVCYWNrfVxyXG4gICAgICAgIC8+XHJcbiAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5sb2FkaW5nQ29udGFpbmVyfT5cclxuICAgICAgICAgIDxBY3Rpdml0eUluZGljYXRvciBzaXplPVwibGFyZ2VcIiBjb2xvcj17bGV2ZWxDb2xvcn0gdGVzdElEPVwiYWN0aXZpdHktaW5kaWNhdG9yXCIgLz5cclxuICAgICAgICAgIHsvKiDinIUgTU9ERVJOSVPDiSA6IFN1cHByaW3DqSBsZSB0ZXh0ZSBkZSBjaGFyZ2VtZW50IHBvdXIgw6p0cmUgY29ow6lyZW50IGF2ZWMgbGVzIGF1dHJlcyBtb2R1bGVzICovfVxyXG4gICAgICAgIDwvVmlldz5cclxuICAgICAgPC9Db250YWluZXI+XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgaWYgKCFoYXNWYWxpZERhdGEpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxDb250YWluZXI+XHJcbiAgICAgICAgPFNwZWxsaW5nSGVhZGVyXHJcbiAgICAgICAgICB0aXRsZT17YE9ydGhvZ3JhcGhlICR7ZXhlcmNpc2VUeXBlTmFtZX1gfVxyXG4gICAgICAgICAgbGV2ZWw9e2xldmVsfVxyXG4gICAgICAgICAgbGV2ZWxDb2xvcj17bGV2ZWxDb2xvcn1cclxuICAgICAgICAgIG9uQmFjaz17aGFuZGxlQmFja31cclxuICAgICAgICAvPlxyXG4gICAgICAgIHsvKiDinIUgTU9ERVJOSVPDiSA6IFV0aWxpc2UgdW4gbWVzc2FnZSBzaW1wbGUgYXUgbGlldSBkZSBzdHlsZXMgZCdlcnJldXIgcGVyc29ubmFsaXPDqXMgKi99XHJcbiAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5sb2FkaW5nQ29udGFpbmVyfT5cclxuICAgICAgICAgIDxUZXh0IHN0eWxlPXt7IGZvbnRTaXplOiAxNiwgY29sb3I6ICcjNjQ3NDhiJywgdGV4dEFsaWduOiAnY2VudGVyJyB9fT5cclxuICAgICAgICAgICAgQXVjdW5lIGRvbm7DqWUgdHJvdXbDqWUgcG91ciBjZSBuaXZlYXUuXHJcbiAgICAgICAgICA8L1RleHQ+XHJcbiAgICAgICAgPC9WaWV3PlxyXG4gICAgICA8L0NvbnRhaW5lcj5cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPENvbnRhaW5lcj5cclxuICAgICAgPFNwZWxsaW5nSGVhZGVyXHJcbiAgICAgICAgdGl0bGU9e2BPcnRob2dyYXBoZSAke2V4ZXJjaXNlVHlwZU5hbWV9YH1cclxuICAgICAgICBsZXZlbD17bGV2ZWx9XHJcbiAgICAgICAgbGV2ZWxDb2xvcj17bGV2ZWxDb2xvcn1cclxuICAgICAgICBvbkJhY2s9e2hhbmRsZUJhY2t9XHJcbiAgICAgIC8+XHJcbiAgICAgIDxTcGVsbGluZ1Byb2dyZXNzXHJcbiAgICAgICAgY3VycmVudEV4ZXJjaXNlSW5kZXg9e2N1cnJlbnRFeGVyY2lzZUluZGV4ICsgMX1cclxuICAgICAgICB0b3RhbEV4ZXJjaXNlcz17dG90YWxFeGVyY2lzZXN9XHJcbiAgICAgICAgbGV2ZWxDb2xvcj17bGV2ZWxDb2xvcn1cclxuICAgICAgLz5cclxuICAgICAgPFNwZWxsaW5nQ2FyZFxyXG4gICAgICAgIGV4ZXJjaXNlPXtjdXJyZW50RXhlcmNpc2V9XHJcbiAgICAgICAgdXNlcklucHV0PXt1c2VySW5wdXR9XHJcbiAgICAgICAgc2hvd0hpbnQ9e3Nob3dIaW50fVxyXG4gICAgICAgIHNob3dGZWVkYmFjaz17c2hvd0ZlZWRiYWNrfVxyXG4gICAgICAgIGlzQ29ycmVjdD17aXNDb3JyZWN0fVxyXG4gICAgICAgIG9uQ2hhbmdlVGV4dD17c2V0VXNlcklucHV0fVxyXG4gICAgICAgIG9uVG9nZ2xlSGludD17dG9nZ2xlSGludH1cclxuICAgICAgICBvbkNoZWNrQW5zd2VyPXtjaGVja0Fuc3dlcn1cclxuICAgICAgICBvbk5leHQ9e2hhbmRsZU5leHR9XHJcbiAgICAgICAgb25SZXRyeT17cmV0cnlFeGVyY2lzZX1cclxuICAgICAgICBpc0xhc3RFeGVyY2lzZT17aXNMYXN0RXhlcmNpc2V9XHJcbiAgICAgICAgbGV2ZWxDb2xvcj17bGV2ZWxDb2xvcn1cclxuICAgICAgLz5cclxuICAgICAgPFNwZWxsaW5nQWN0aW9uc1xyXG4gICAgICAgIHNob3dGZWVkYmFjaz17c2hvd0ZlZWRiYWNrfVxyXG4gICAgICAgIGlzQ29ycmVjdD17aXNDb3JyZWN0fVxyXG4gICAgICAgIHVzZXJJbnB1dD17dXNlcklucHV0fVxyXG4gICAgICAgIGlzTGFzdEV4ZXJjaXNlPXtpc0xhc3RFeGVyY2lzZX1cclxuICAgICAgICBleGVyY2lzZVR5cGU9e2V4ZXJjaXNlVHlwZX1cclxuICAgICAgICBsZXZlbENvbG9yPXtsZXZlbENvbG9yfVxyXG4gICAgICAgIG9uQ2hlY2s9e2NoZWNrQW5zd2VyfVxyXG4gICAgICAgIG9uTmV4dD17aGFuZGxlTmV4dH1cclxuICAgICAgICBvblJldHJ5PXtyZXRyeUV4ZXJjaXNlfVxyXG4gICAgICAvPlxyXG4gICAgPC9Db250YWluZXI+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNwZWxsaW5nRXhlcmNpc2U7XHJcblxyXG4vLyDinIUgQWpvdXQgZGUgbGEgdmFsaWRhdGlvbiBkZXMgcHJvcHNcclxuU3BlbGxpbmdFeGVyY2lzZS5wcm9wVHlwZXMgPSB7XHJcbiAgcm91dGU6IFByb3BUeXBlcy5zaGFwZSh7XHJcbiAgICBwYXJhbXM6IFByb3BUeXBlcy5zaGFwZSh7XHJcbiAgICAgIGxldmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gICAgICBleGVyY2lzZVR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXHJcbiAgICB9KSxcclxuICB9KS5pc1JlcXVpcmVkLFxyXG59OyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRUEsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsT0FBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsVUFBQSxHQUFBQyxzQkFBQSxDQUFBSixPQUFBO0FBRUEsSUFBQUssVUFBQSxHQUFBRCxzQkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQU0sZUFBQSxHQUFBRixzQkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQU8saUJB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