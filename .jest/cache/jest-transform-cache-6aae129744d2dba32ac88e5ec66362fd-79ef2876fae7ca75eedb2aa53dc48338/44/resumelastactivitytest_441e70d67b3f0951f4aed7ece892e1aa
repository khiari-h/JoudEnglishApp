15476e88212802523687192596463195
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    },
    useFocusEffect: jest.fn(function (callback) {
      return callback();
    })
  };
});
_getJestObj().mock('../../src/hooks/useLastActivity');
_getJestObj().mock('../../src/hooks/useRealTimeProgress', function () {
  return function () {
    return {
      getLevelProgress: jest.fn(function () {
        return 50;
      }),
      refresh: jest.fn()
    };
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _expoRouter = require("expo-router");
var _Dashboard = _interopRequireDefault(require("../../src/screens/Dashboard"));
var LastActivity = _interopRequireWildcard(require("../../src/hooks/useLastActivity"));
var _ProgressContext = require("../../src/contexts/ProgressContext");
var _ThemeContext = require("../../src/contexts/ThemeContext");
var _CurrentLevelContext = require("../../src/contexts/CurrentLevelContext");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockLastActivityData = {
  type: 'grammar',
  level: 'A1',
  title: 'Grammaire de base',
  timestamp: Date.now(),
  metadata: {
    categoryIndex: 1,
    word: 5,
    totalWords: 15
  }
};
var renderDashboard = function renderDashboard() {
  return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
    children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(_CurrentLevelContext.CurrentLevelProvider, {
        children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
      })
    })
  }));
};
describe('Scénario 2: Reprise de la dernière activité', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('devrait afficher la section "Continuer" et naviguer correctement', (0, _asyncToGenerator2.default)(function* () {
    LastActivity.default.mockReturnValue({
      lastActivity: mockLastActivityData,
      isLoading: false,
      saveActivity: jest.fn(),
      clearActivity: jest.fn(),
      reload: jest.fn()
    });
    var _renderDashboard = renderDashboard(),
      getByTestId = _renderDashboard.getByTestId,
      getByText = _renderDashboard.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('hero-continue-section')).toBeTruthy();
    });
    expect(getByText('Grammaire de base')).toBeTruthy();
    expect(getByText(/Niv A1/)).toBeTruthy();
    expect(getByText(/Mot 6\/15/)).toBeTruthy();
    var continueButton = getByTestId('continue-activity-button');
    _reactNative.fireEvent.press(continueButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_expoRouter.router.push).toHaveBeenCalledWith({
        pathname: '/tabs/grammarExercise',
        params: {
          level: 'A1'
        }
      });
    });
  }));
  it('devrait afficher la section vide s\'il n\'y a pas de dernière activité', (0, _asyncToGenerator2.default)(function* () {
    LastActivity.default.mockReturnValue({
      lastActivity: null,
      isLoading: false,
      saveActivity: jest.fn(),
      clearActivity: jest.fn(),
      reload: jest.fn()
    });
    var _renderDashboard2 = renderDashboard(),
      getByTestId = _renderDashboard2.getByTestId,
      getByText = _renderDashboard2.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('hero-empty-section')).toBeTruthy();
    });
    expect(getByText("Commencer l'apprentissage")).toBeTruthy();
    var startButton = getByTestId('level-selection-button');
    _reactNative.fireEvent.press(startButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_expoRouter.router.push).toHaveBeenCalledWith('/tabs/levelSelection');
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJyb3V0ZXIiLCJwdXNoIiwiamVzdCIsImZuIiwidXNlRm9jdXNFZmZlY3QiLCJjYWxsYmFjayIsImdldExldmVsUHJvZ3Jlc3MiLCJyZWZyZXNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfZXhwb1JvdXRlciIsIl9EYXNoYm9hcmQiLCJMYXN0QWN0aXZpdHkiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9Qcm9ncmVzc0NvbnRleHQiLCJfVGhlbWVDb250ZXh0IiwiX0N1cnJlbnRMZXZlbENvbnRleHQiLCJfanN4UnVudGltZSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX3JlcXVpcmUiLCJtb2NrTGFzdEFjdGl2aXR5RGF0YSIsInR5cGUiLCJsZXZlbCIsInRpdGxlIiwidGltZXN0YW1wIiwiRGF0ZSIsIm5vdyIsIm1ldGFkYXRhIiwiY2F0ZWdvcnlJbmRleCIsIndvcmQiLCJ0b3RhbFdvcmRzIiwicmVuZGVyRGFzaGJvYXJkIiwicmVuZGVyIiwianN4IiwiVGhlbWVQcm92aWRlciIsImNoaWxkcmVuIiwiUHJvZ3Jlc3NQcm92aWRlciIsIkN1cnJlbnRMZXZlbFByb3ZpZGVyIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIml0IiwibW9ja1JldHVyblZhbHVlIiwibGFzdEFjdGl2aXR5IiwiaXNMb2FkaW5nIiwic2F2ZUFjdGl2aXR5IiwiY2xlYXJBY3Rpdml0eSIsInJlbG9hZCIsIl9yZW5kZXJEYXNoYm9hcmQiLCJnZXRCeVRlc3RJZCIsImdldEJ5VGV4dCIsIndhaXRGb3IiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwiY29udGludWVCdXR0b24iLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwicGF0aG5hbWUiLCJwYXJhbXMiLCJfcmVuZGVyRGFzaGJvYXJkMiIsInN0YXJ0QnV0dG9uIl0sInNvdXJjZXMiOlsicmVzdW1lLWxhc3QtYWN0aXZpdHkudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBfX3Rlc3RzX18vaW50ZWdyYXRpb24vcmVzdW1lLWxhc3QtYWN0aXZpdHkudGVzdC5qc1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgcm91dGVyIH0gZnJvbSAnZXhwby1yb3V0ZXInO1xuaW1wb3J0IERhc2hib2FyZCBmcm9tICcuLi8uLi9zcmMvc2NyZWVucy9EYXNoYm9hcmQnO1xuaW1wb3J0ICogYXMgTGFzdEFjdGl2aXR5IGZyb20gJy4uLy4uL3NyYy9ob29rcy91c2VMYXN0QWN0aXZpdHknO1xuaW1wb3J0IHsgUHJvZ3Jlc3NQcm92aWRlciB9IGZyb20gJy4uLy4uL3NyYy9jb250ZXh0cy9Qcm9ncmVzc0NvbnRleHQnO1xuaW1wb3J0IHsgVGhlbWVQcm92aWRlciB9IGZyb20gJy4uLy4uL3NyYy9jb250ZXh0cy9UaGVtZUNvbnRleHQnO1xuaW1wb3J0IHsgQ3VycmVudExldmVsUHJvdmlkZXIgfSBmcm9tICcuLi8uLi9zcmMvY29udGV4dHMvQ3VycmVudExldmVsQ29udGV4dCc7XG5cbi8vIE1vY2sgZGUgZXhwby1yb3V0ZXJcbmplc3QubW9jaygnZXhwby1yb3V0ZXInLCAoKSA9PiAoe1xuICByb3V0ZXI6IHtcbiAgICBwdXNoOiBqZXN0LmZuKCksXG4gIH0sXG4gIHVzZUZvY3VzRWZmZWN0OiBqZXN0LmZuKGNhbGxiYWNrID0+IGNhbGxiYWNrKCkpLFxufSkpO1xuXG4vLyBNb2NrIGRlcyBob29rcyBldCBjb250ZXh0ZXNcbmplc3QubW9jaygnLi4vLi4vc3JjL2hvb2tzL3VzZUxhc3RBY3Rpdml0eScpO1xuamVzdC5tb2NrKCcuLi8uLi9zcmMvaG9va3MvdXNlUmVhbFRpbWVQcm9ncmVzcycsICgpID0+ICgpID0+ICh7XG4gIGdldExldmVsUHJvZ3Jlc3M6IGplc3QuZm4oKCkgPT4gNTApLFxuICByZWZyZXNoOiBqZXN0LmZuKCksXG59KSk7XG5cbmNvbnN0IG1vY2tMYXN0QWN0aXZpdHlEYXRhID0ge1xuICB0eXBlOiAnZ3JhbW1hcicsXG4gIGxldmVsOiAnQTEnLFxuICB0aXRsZTogJ0dyYW1tYWlyZSBkZSBiYXNlJyxcbiAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICBtZXRhZGF0YToge1xuICAgIGNhdGVnb3J5SW5kZXg6IDEsXG4gICAgd29yZDogNSxcbiAgICB0b3RhbFdvcmRzOiAxNSxcbiAgfSxcbn07XG5cbmNvbnN0IHJlbmRlckRhc2hib2FyZCA9ICgpID0+IHtcbiAgcmV0dXJuIHJlbmRlcihcbiAgICA8VGhlbWVQcm92aWRlcj5cbiAgICAgIDxQcm9ncmVzc1Byb3ZpZGVyPlxuICAgICAgICA8Q3VycmVudExldmVsUHJvdmlkZXI+XG4gICAgICAgICAgPERhc2hib2FyZCAvPlxuICAgICAgICA8L0N1cnJlbnRMZXZlbFByb3ZpZGVyPlxuICAgICAgPC9Qcm9ncmVzc1Byb3ZpZGVyPlxuICAgIDwvVGhlbWVQcm92aWRlcj5cbiAgKTtcbn07XG5cbmRlc2NyaWJlKCdTY8OpbmFyaW8gMjogUmVwcmlzZSBkZSBsYSBkZXJuacOocmUgYWN0aXZpdMOpJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgaXQoJ2RldnJhaXQgYWZmaWNoZXIgbGEgc2VjdGlvbiBcIkNvbnRpbnVlclwiIGV0IG5hdmlndWVyIGNvcnJlY3RlbWVudCcsIGFzeW5jICgpID0+IHtcbiAgICAvLyAxLiBTaW11bGVyIHVuZSBhY3Rpdml0w6kgZXhpc3RhbnRlXG4gICAgTGFzdEFjdGl2aXR5LmRlZmF1bHQubW9ja1JldHVyblZhbHVlKHtcbiAgICAgIGxhc3RBY3Rpdml0eTogbW9ja0xhc3RBY3Rpdml0eURhdGEsXG4gICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgc2F2ZUFjdGl2aXR5OiBqZXN0LmZuKCksXG4gICAgICBjbGVhckFjdGl2aXR5OiBqZXN0LmZuKCksXG4gICAgICByZWxvYWQ6IGplc3QuZm4oKSxcbiAgICB9KTtcblxuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQsIGdldEJ5VGV4dCB9ID0gcmVuZGVyRGFzaGJvYXJkKCk7XG5cbiAgICAvLyAyLiBWw6lyaWZpZXIgcXVlIGxhIHNlY3Rpb24gXCJDb250aW51ZXJcIiBlc3QgYWZmaWNow6llIGF2ZWMgbGVzIGJvbm5lcyBpbmZvcm1hdGlvbnNcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnaGVyby1jb250aW51ZS1zZWN0aW9uJykpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChnZXRCeVRleHQoJ0dyYW1tYWlyZSBkZSBiYXNlJykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KC9OaXYgQTEvKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRleHQoL01vdCA2XFwvMTUvKSkudG9CZVRydXRoeSgpOyAvLyA1KzEgLyAxNVxuXG4gICAgLy8gMy4gU2ltdWxlciB1biBjbGljIHN1ciBsZSBib3V0b24gXCJDb250aW51ZXJcIlxuICAgIGNvbnN0IGNvbnRpbnVlQnV0dG9uID0gZ2V0QnlUZXN0SWQoJ2NvbnRpbnVlLWFjdGl2aXR5LWJ1dHRvbicpO1xuICAgIGZpcmVFdmVudC5wcmVzcyhjb250aW51ZUJ1dHRvbik7XG5cbiAgICAvLyA0LiBWw6lyaWZpZXIgcXVlIGxhIG5hdmlnYXRpb24gYSDDqXTDqSBhcHBlbMOpZSBhdmVjIGxlcyBib25zIHBhcmFtw6h0cmVzXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3Qocm91dGVyLnB1c2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgICAgcGF0aG5hbWU6ICcvdGFicy9ncmFtbWFyRXhlcmNpc2UnLFxuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICBsZXZlbDogJ0ExJyxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBpdCgnZGV2cmFpdCBhZmZpY2hlciBsYSBzZWN0aW9uIHZpZGUgc1xcJ2lsIG5cXCd5IGEgcGFzIGRlIGRlcm5pw6hyZSBhY3Rpdml0w6knLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gMS4gU2ltdWxlciBhdWN1bmUgYWN0aXZpdMOpXG4gICAgTGFzdEFjdGl2aXR5LmRlZmF1bHQubW9ja1JldHVyblZhbHVlKHtcbiAgICAgIGxhc3RBY3Rpdml0eTogbnVsbCxcbiAgICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgICBzYXZlQWN0aXZpdHk6IGplc3QuZm4oKSxcbiAgICAgIGNsZWFyQWN0aXZpdHk6IGplc3QuZm4oKSxcbiAgICAgIHJlbG9hZDogamVzdC5mbigpLFxuICAgIH0pO1xuXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCwgZ2V0QnlUZXh0IH0gPSByZW5kZXJEYXNoYm9hcmQoKTtcblxuICAgIC8vIDIuIFbDqXJpZmllciBxdWUgbGEgc2VjdGlvbiB2aWRlIGVzdCBhZmZpY2jDqWVcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnaGVyby1lbXB0eS1zZWN0aW9uJykpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChnZXRCeVRleHQoXCJDb21tZW5jZXIgbCdhcHByZW50aXNzYWdlXCIpKS50b0JlVHJ1dGh5KCk7XG5cbiAgICAvLyAzLiBTaW11bGVyIHVuIGNsaWMgc3VyIGxlIGJvdXRvbiBwb3VyIGNvbW1lbmNlclxuICAgIGNvbnN0IHN0YXJ0QnV0dG9uID0gZ2V0QnlUZXN0SWQoJ2xldmVsLXNlbGVjdGlvbi1idXR0b24nKTtcbiAgICBmaXJlRXZlbnQucHJlc3Moc3RhcnRCdXR0b24pO1xuXG4gICAgLy8gNC4gVsOpcmlmaWVyIGxhIG5hdmlnYXRpb24gdmVycyBsYSBzw6lsZWN0aW9uIGRlIG5pdmVhdVxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KHJvdXRlci5wdXNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnL3RhYnMvbGV2ZWxTZWxlY3Rpb24nKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiJBQVdBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxhQUFhLEVBQUU7RUFBQSxPQUFPO0lBQzlCQyxNQUFNLEVBQUU7TUFDTkMsSUFBSSxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBQ0RDLGNBQWMsRUFBRUYsSUFBSSxDQUFDQyxFQUFFLENBQUMsVUFBQUUsUUFBUTtNQUFBLE9BQUlBLFFBQVEsQ0FBQyxDQUFDO0lBQUE7RUFDaEQsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUdIUCxXQUFBLEdBQUtDLElBQUksQ0FBQyxpQ0FBaUMsQ0FBQztBQUM1Q0QsV0FBQSxHQUFLQyxJQUFJLENBQUMscUNBQXFDLEVBQUU7RUFBQSxPQUFNO0lBQUEsT0FBTztNQUM1RE8sZ0JBQWdCLEVBQUVKLElBQUksQ0FBQ0MsRUFBRSxDQUFDO1FBQUEsT0FBTSxFQUFFO01BQUEsRUFBQztNQUNuQ0ksT0FBTyxFQUFFTCxJQUFJLENBQUNDLEVBQUUsQ0FBQztJQUNuQixDQUFDO0VBQUEsQ0FBQztBQUFBLEVBQUM7QUFBQyxJQUFBSyxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsa0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQXRCSixJQUFBRSxNQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxZQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxXQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxVQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBTSxZQUFBLEdBQUFDLHVCQUFBLENBQUFQLE9BQUE7QUFDQSxJQUFBUSxnQkFBQSxHQUFBUixPQUFBO0FBQ0EsSUFBQVMsYUFBQSxHQUFBVCxPQUFBO0FBQ0EsSUFBQVUsb0JBQUEsR0FBQVYsT0FBQTtBQUE4RSxJQUFBVyxXQUFBLEdBQUFYLE9BQUE7QUFBQSxTQUFBTyx3QkFBQUssQ0FBQSxFQUFBQyxDQUFBLDZCQUFBQyxPQUFBLE1BQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQVAsdUJBQUEsWUFBQUEsd0JBQUFLLENBQUEsRUFBQUMsQ0FBQSxTQUFBQSxDQUFBLElBQUFELENBQUEsSUFBQUEsQ0FBQSxDQUFBSyxVQUFBLFNBQUFMLENBQUEsTUFBQU0sQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsS0FBQUMsU0FBQSxRQUFBQyxPQUFBLEVBQUFWLENBQUEsaUJBQUFBLENBQUEsdUJBQUFBLENBQUEseUJBQUFBLENBQUEsU0FBQVEsQ0FBQSxNQUFBRixDQUFBLEdBQUFMLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLFFBQUFHLENBQUEsQ0FBQUssR0FBQSxDQUFBWCxDQUFBLFVBQUFNLENBQUEsQ0FBQU0sR0FBQSxDQUFBWixDQUFBLEdBQUFNLENBQUEsQ0FBQU8sR0FBQSxDQUFBYixDQUFBLEVBQUFRLENBQUEsY0FBQU0sRUFBQSxJQUFBZCxDQUFBLGdCQUFBYyxFQUFBLE9BQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBaEIsQ0FBQSxFQUFBYyxFQUFBLE9BQUFQLENBQUEsSUFBQUQsQ0FBQSxHQUFBVyxNQUFBLENBQUFDLGNBQUEsS0FBQUQsTUFBQSxDQUFBRSx3QkFBQSxDQUFBbkIsQ0FBQSxFQUFBYyxFQUFBLE9BQUFQLENBQUEsQ0FBQUssR0FBQSxJQUFBTCxDQUFBLENBQUFNLEdBQUEsSUFBQVAsQ0FBQSxDQUFBRSxDQUFBLEVBQUFNLEVBQUEsRUFBQVAsQ0FBQSxJQUFBQyxDQUFBLENBQUFNLEVBQUEsSUFBQWQsQ0FBQSxDQUFBYyxFQUFBLFdBQUFOLENBQUEsS0FBQVIsQ0FBQSxFQUFBQyxDQUFBO0FBQUEsU0FBQXhCLFlBQUE7RUFBQSxJQUFBMkMsUUFBQSxHQUFBaEMsT0FBQTtJQUFBUCxJQUFBLEdBQUF1QyxRQUFBLENBQUF2QyxJQUFBO0VBQUFKLFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFJLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQWlCOUUsSUFBTXdDLG9CQUFvQixHQUFHO0VBQzNCQyxJQUFJLEVBQUUsU0FBUztFQUNmQyxLQUFLLEVBQUUsSUFBSTtFQUNYQyxLQUFLLEVBQUUsbUJBQW1CO0VBQzFCQyxTQUFTLEVBQUVDLElBQUksQ0FBQ0MsR0FBRyxDQUFDLENBQUM7RUFDckJDLFFBQVEsRUFBRTtJQUNSQyxhQUFhLEVBQUUsQ0FBQztJQUNoQkMsSUFBSSxFQUFFLENBQUM7SUFDUEMsVUFBVSxFQUFFO0VBQ2Q7QUFDRixDQUFDO0FBRUQsSUFBTUMsZUFBZSxHQUFHLFNBQWxCQSxlQUFlQSxDQUFBLEVBQVM7RUFDNUIsT0FBTyxJQUFBQyxtQkFBTSxFQUNYLElBQUFsQyxXQUFBLENBQUFtQyxHQUFBLEVBQUNyQyxhQUFBLENBQUFzQyxhQUFhO0lBQUFDLFFBQUEsRUFDWixJQUFBckMsV0FBQSxDQUFBbUMsR0FBQSxFQUFDdEMsZ0JBQUEsQ0FBQXlDLGdCQUFnQjtNQUFBRCxRQUFBLEVBQ2YsSUFBQXJDLFdBQUEsQ0FBQW1DLEdBQUEsRUFBQ3BDLG9CQUFBLENBQUF3QyxvQkFBb0I7UUFBQUYsUUFBQSxFQUNuQixJQUFBckMsV0FBQSxDQUFBbUMsR0FBQSxFQUFDekMsVUFBQSxDQUFBaUIsT0FBUyxJQUFFO01BQUMsQ0FDTztJQUFDLENBQ1A7RUFBQyxDQUNOLENBQ2pCLENBQUM7QUFDSCxDQUFDO0FBRUQ2QixRQUFRLENBQUMsNkNBQTZDLEVBQUUsWUFBTTtFQUM1REMsVUFBVSxDQUFDLFlBQU07SUFDZjNELElBQUksQ0FBQzRELGFBQWEsQ0FBQyxDQUFDO0VBQ3RCLENBQUMsQ0FBQztFQUVGQyxFQUFFLENBQUMsa0VBQWtFLE1BQUFyRCxrQkFBQSxDQUFBcUIsT0FBQSxFQUFFLGFBQVk7SUFFakZoQixZQUFZLENBQUNnQixPQUFPLENBQUNpQyxlQUFlLENBQUM7TUFDbkNDLFlBQVksRUFBRXZCLG9CQUFvQjtNQUNsQ3dCLFNBQVMsRUFBRSxLQUFLO01BQ2hCQyxZQUFZLEVBQUVqRSxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ3ZCaUUsYUFBYSxFQUFFbEUsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUN4QmtFLE1BQU0sRUFBRW5FLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0lBQ2xCLENBQUMsQ0FBQztJQUVGLElBQUFtRSxnQkFBQSxHQUFtQ2pCLGVBQWUsQ0FBQyxDQUFDO01BQTVDa0IsV0FBVyxHQUFBRCxnQkFBQSxDQUFYQyxXQUFXO01BQUVDLFNBQVMsR0FBQUYsZ0JBQUEsQ0FBVEUsU0FBUztJQUc5QixNQUFNLElBQUFDLG9CQUFPLEVBQUMsWUFBTTtNQUNsQkMsTUFBTSxDQUFDSCxXQUFXLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDSSxVQUFVLENBQUMsQ0FBQztJQUMzRCxDQUFDLENBQUM7SUFFRkQsTUFBTSxDQUFDRixTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDRyxVQUFVLENBQUMsQ0FBQztJQUNuREQsTUFBTSxDQUFDRixTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQ0csVUFBVSxDQUFDLENBQUM7SUFDeENELE1BQU0sQ0FBQ0YsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUNHLFVBQVUsQ0FBQyxDQUFDO0lBRzNDLElBQU1DLGNBQWMsR0FBR0wsV0FBVyxDQUFDLDBCQUEwQixDQUFDO0lBQzlETSxzQkFBUyxDQUFDQyxLQUFLLENBQUNGLGNBQWMsQ0FBQztJQUcvQixNQUFNLElBQUFILG9CQUFPLEVBQUMsWUFBTTtNQUNsQkMsTUFBTSxDQUFDMUUsa0JBQU0sQ0FBQ0MsSUFBSSxDQUFDLENBQUM4RSxvQkFBb0IsQ0FBQztRQUN2Q0MsUUFBUSxFQUFFLHVCQUF1QjtRQUNqQ0MsTUFBTSxFQUFFO1VBQ05yQyxLQUFLLEVBQUU7UUFDVDtNQUNGLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQztFQUNKLENBQUMsRUFBQztFQUVGbUIsRUFBRSxDQUFDLHdFQUF3RSxNQUFBckQsa0JBQUEsQ0FBQXFCLE9BQUEsRUFBRSxhQUFZO0lBRXZGaEIsWUFBWSxDQUFDZ0IsT0FBTyxDQUFDaUMsZUFBZSxDQUFDO01BQ25DQyxZQUFZLEVBQUUsSUFBSTtNQUNsQkMsU0FBUyxFQUFFLEtBQUs7TUFDaEJDLFlBQVksRUFBRWpFLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDdkJpRSxhQUFhLEVBQUVsRSxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ3hCa0UsTUFBTSxFQUFFbkUsSUFBSSxDQUFDQyxFQUFFLENBQUM7SUFDbEIsQ0FBQyxDQUFDO0lBRUYsSUFBQStFLGlCQUFBLEdBQW1DN0IsZUFBZSxDQUFDLENBQUM7TUFBNUNrQixXQUFXLEdBQUFXLGlCQUFBLENBQVhYLFdBQVc7TUFBRUMsU0FBUyxHQUFBVSxpQkFBQSxDQUFUVixTQUFTO0lBRzlCLE1BQU0sSUFBQUMsb0JBQU8sRUFBQyxZQUFNO01BQ2xCQyxNQUFNLENBQUNILFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUNJLFVBQVUsQ0FBQyxDQUFDO0lBQ3hELENBQUMsQ0FBQztJQUVGRCxNQUFNLENBQUNGLFNBQVMsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLENBQUNHLFVBQVUsQ0FBQyxDQUFDO0lBRzNELElBQU1RLFdBQVcsR0FBR1osV0FBVyxDQUFDLHdCQUF3QixDQUFDO0lBQ3pETSxzQkFBUyxDQUFDQyxLQUFLLENBQUNLLFdBQVcsQ0FBQztJQUc1QixNQUFNLElBQUFWLG9CQUFPLEVBQUMsWUFBTTtNQUNsQkMsTUFBTSxDQUFDMUUsa0JBQU0sQ0FBQ0MsSUFBSSxDQUFDLENBQUM4RSxvQkFBb0IsQ0FBQyxzQkFBc0IsQ0FBQztJQUNsRSxDQUFDLENBQUM7RUFDSixDQUFDLEVBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=