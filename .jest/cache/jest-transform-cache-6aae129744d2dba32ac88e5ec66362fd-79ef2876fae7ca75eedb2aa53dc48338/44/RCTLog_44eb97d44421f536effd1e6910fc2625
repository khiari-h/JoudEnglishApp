a25862f82dcbae078ac1f79c2de4afc9
'use strict';

var invariant = require('invariant');
var levelsMap = {
  log: 'log',
  info: 'info',
  warn: 'warn',
  error: 'error',
  fatal: 'error'
};
var warningHandler = null;
var RCTLog = {
  logIfNoNativeHook: function logIfNoNativeHook(level) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    if (typeof global.nativeLoggingHook === 'undefined') {
      RCTLog.logToConsole.apply(RCTLog, [level].concat(args));
    } else {
      if (warningHandler && level === 'warn') {
        warningHandler.apply(void 0, args);
      }
    }
  },
  logToConsole: function logToConsole(level) {
    var _console;
    var logFn = levelsMap[level];
    invariant(logFn, 'Level "' + level + '" not one of ' + Object.keys(levelsMap).toString());
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }
    (_console = console)[logFn].apply(_console, args);
  },
  setWarningHandler: function setWarningHandler(handler) {
    warningHandler = handler;
  }
};
module.exports = RCTLog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpbnZhcmlhbnQiLCJyZXF1aXJlIiwibGV2ZWxzTWFwIiwibG9nIiwiaW5mbyIsIndhcm4iLCJlcnJvciIsImZhdGFsIiwid2FybmluZ0hhbmRsZXIiLCJSQ1RMb2ciLCJsb2dJZk5vTmF0aXZlSG9vayIsImxldmVsIiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJnbG9iYWwiLCJuYXRpdmVMb2dnaW5nSG9vayIsImxvZ1RvQ29uc29sZSIsImFwcGx5IiwiY29uY2F0IiwiX2NvbnNvbGUiLCJsb2dGbiIsIk9iamVjdCIsImtleXMiLCJ0b1N0cmluZyIsIl9sZW4yIiwiX2tleTIiLCJjb25zb2xlIiwic2V0V2FybmluZ0hhbmRsZXIiLCJoYW5kbGVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlJDVExvZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxuY29uc3QgbGV2ZWxzTWFwID0ge1xuICBsb2c6ICdsb2cnLFxuICBpbmZvOiAnaW5mbycsXG4gIHdhcm46ICd3YXJuJyxcbiAgZXJyb3I6ICdlcnJvcicsXG4gIGZhdGFsOiAnZXJyb3InLFxufTtcblxubGV0IHdhcm5pbmdIYW5kbGVyOiA/KC4uLkFycmF5PG1peGVkPikgPT4gdm9pZCA9IG51bGw7XG5cbmNvbnN0IFJDVExvZyA9IHtcbiAgLy8gbGV2ZWwgb25lIG9mIGxvZywgaW5mbywgd2FybiwgZXJyb3IsIG11c3RmaXhcbiAgbG9nSWZOb05hdGl2ZUhvb2sobGV2ZWw6IHN0cmluZywgLi4uYXJnczogQXJyYXk8bWl4ZWQ+KTogdm9pZCB7XG4gICAgLy8gV2UgYWxyZWFkeSBwcmludGVkIGluIHRoZSBuYXRpdmUgY29uc29sZSwgc28gb25seSBsb2cgaGVyZSBpZiB1c2luZyBhIGpzIGRlYnVnZ2VyXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwubmF0aXZlTG9nZ2luZ0hvb2sgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBSQ1RMb2cubG9nVG9Db25zb2xlKGxldmVsLCAuLi5hcmdzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmVwb3J0IG5hdGl2ZSB3YXJuaW5ncyB0byBMb2dCb3hcbiAgICAgIGlmICh3YXJuaW5nSGFuZGxlciAmJiBsZXZlbCA9PT0gJ3dhcm4nKSB7XG4gICAgICAgIHdhcm5pbmdIYW5kbGVyKC4uLmFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvLyBMb2cgdG8gY29uc29sZSByZWdhcmRsZXNzIG9mIG5hdGl2ZUxvZ2dpbmdIb29rXG4gIGxvZ1RvQ29uc29sZShsZXZlbDogc3RyaW5nLCAuLi5hcmdzOiBBcnJheTxtaXhlZD4pOiB2b2lkIHtcbiAgICAvLyAkRmxvd0ZpeE1lW2ludmFsaWQtY29tcHV0ZWQtcHJvcF1cbiAgICBjb25zdCBsb2dGbiA9IGxldmVsc01hcFtsZXZlbF07XG4gICAgaW52YXJpYW50KFxuICAgICAgbG9nRm4sXG4gICAgICAnTGV2ZWwgXCInICsgbGV2ZWwgKyAnXCIgbm90IG9uZSBvZiAnICsgT2JqZWN0LmtleXMobGV2ZWxzTWFwKS50b1N0cmluZygpLFxuICAgICk7XG5cbiAgICBjb25zb2xlW2xvZ0ZuXSguLi5hcmdzKTtcbiAgfSxcblxuICBzZXRXYXJuaW5nSGFuZGxlcihoYW5kbGVyOiB0eXBlb2Ygd2FybmluZ0hhbmRsZXIpOiB2b2lkIHtcbiAgICB3YXJuaW5nSGFuZGxlciA9IGhhbmRsZXI7XG4gIH0sXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJDVExvZztcbiJdLCJtYXBwaW5ncyI6IkFBVUEsWUFBWTs7QUFFWixJQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFFdEMsSUFBTUMsU0FBUyxHQUFHO0VBQ2hCQyxHQUFHLEVBQUUsS0FBSztFQUNWQyxJQUFJLEVBQUUsTUFBTTtFQUNaQyxJQUFJLEVBQUUsTUFBTTtFQUNaQyxLQUFLLEVBQUUsT0FBTztFQUNkQyxLQUFLLEVBQUU7QUFDVCxDQUFDO0FBRUQsSUFBSUMsY0FBMEMsR0FBRyxJQUFJO0FBRXJELElBQU1DLE1BQU0sR0FBRztFQUViQyxpQkFBaUIsV0FBakJBLGlCQUFpQkEsQ0FBQ0MsS0FBYSxFQUErQjtJQUFBLFNBQUFDLElBQUEsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLEVBQTFCQyxJQUFJLE9BQUFDLEtBQUEsQ0FBQUosSUFBQSxPQUFBQSxJQUFBLFdBQUFLLElBQUEsTUFBQUEsSUFBQSxHQUFBTCxJQUFBLEVBQUFLLElBQUE7TUFBSkYsSUFBSSxDQUFBRSxJQUFBLFFBQUFKLFNBQUEsQ0FBQUksSUFBQTtJQUFBO0lBRXRDLElBQUksT0FBT0MsTUFBTSxDQUFDQyxpQkFBaUIsS0FBSyxXQUFXLEVBQUU7TUFDbkRWLE1BQU0sQ0FBQ1csWUFBWSxDQUFBQyxLQUFBLENBQW5CWixNQUFNLEdBQWNFLEtBQUssRUFBQVcsTUFBQSxDQUFLUCxJQUFJLEVBQUM7SUFDckMsQ0FBQyxNQUFNO01BRUwsSUFBSVAsY0FBYyxJQUFJRyxLQUFLLEtBQUssTUFBTSxFQUFFO1FBQ3RDSCxjQUFjLENBQUFhLEtBQUEsU0FBSU4sSUFBSSxDQUFDO01BQ3pCO0lBQ0Y7RUFDRixDQUFDO0VBR0RLLFlBQVksV0FBWkEsWUFBWUEsQ0FBQ1QsS0FBYSxFQUErQjtJQUFBLElBQUFZLFFBQUE7SUFFdkQsSUFBTUMsS0FBSyxHQUFHdEIsU0FBUyxDQUFDUyxLQUFLLENBQUM7SUFDOUJYLFNBQVMsQ0FDUHdCLEtBQUssRUFDTCxTQUFTLEdBQUdiLEtBQUssR0FBRyxlQUFlLEdBQUdjLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDeEIsU0FBUyxDQUFDLENBQUN5QixRQUFRLENBQUMsQ0FDeEUsQ0FBQztJQUFDLFNBQUFDLEtBQUEsR0FBQWYsU0FBQSxDQUFBQyxNQUFBLEVBTjJCQyxJQUFJLE9BQUFDLEtBQUEsQ0FBQVksS0FBQSxPQUFBQSxLQUFBLFdBQUFDLEtBQUEsTUFBQUEsS0FBQSxHQUFBRCxLQUFBLEVBQUFDLEtBQUE7TUFBSmQsSUFBSSxDQUFBYyxLQUFBLFFBQUFoQixTQUFBLENBQUFnQixLQUFBO0lBQUE7SUFRakMsQ0FBQU4sUUFBQSxHQUFBTyxPQUFPLEVBQUNOLEtBQUssQ0FBQyxDQUFBSCxLQUFBLENBQUFFLFFBQUEsRUFBSVIsSUFBSSxDQUFDO0VBQ3pCLENBQUM7RUFFRGdCLGlCQUFpQixXQUFqQkEsaUJBQWlCQSxDQUFDQyxPQUE4QixFQUFRO0lBQ3REeEIsY0FBYyxHQUFHd0IsT0FBTztFQUMxQjtBQUNGLENBQUM7QUFFREMsTUFBTSxDQUFDQyxPQUFPLEdBQUd6QixNQUFNIiwiaWdub3JlTGlzdCI6W119