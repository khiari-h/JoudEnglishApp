013ab42a215b69a889d69c74f30a4690
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseBase"));
var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseKey"));
var _registry = (0, _classPrivateFieldLooseKey2.default)("registry");
var EventEmitter = exports.default = function () {
  function EventEmitter() {
    (0, _classCallCheck2.default)(this, EventEmitter);
    Object.defineProperty(this, _registry, {
      writable: true,
      value: {}
    });
  }
  return (0, _createClass2.default)(EventEmitter, [{
    key: "addListener",
    value: function addListener(eventType, listener, context) {
      if (typeof listener !== 'function') {
        throw new TypeError('EventEmitter.addListener(...): 2nd argument must be a function.');
      }
      var registrations = allocate((0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry], eventType);
      var registration = {
        context: context,
        listener: listener,
        remove: function remove() {
          registrations.delete(registration);
        }
      };
      registrations.add(registration);
      return registration;
    }
  }, {
    key: "emit",
    value: function emit(eventType) {
      var registrations = (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry][eventType];
      if (registrations != null) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        for (var registration of Array.from(registrations)) {
          registration.listener.apply(registration.context, args);
        }
      }
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners(eventType) {
      if (eventType == null) {
        (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry] = {};
      } else {
        delete (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry][eventType];
      }
    }
  }, {
    key: "listenerCount",
    value: function listenerCount(eventType) {
      var registrations = (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry][eventType];
      return registrations == null ? 0 : registrations.size;
    }
  }]);
}();
function allocate(registry, eventType) {
  var registrations = registry[eventType];
  if (registrations == null) {
    registrations = new Set();
    registry[eventType] = registrations;
  }
  return registrations;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,