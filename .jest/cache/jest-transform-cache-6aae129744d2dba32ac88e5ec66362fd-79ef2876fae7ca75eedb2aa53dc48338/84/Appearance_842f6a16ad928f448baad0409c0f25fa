499052a4edb49b08bd9461ed45dcbb47
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addChangeListener = addChangeListener;
exports.getColorScheme = getColorScheme;
exports.setColorScheme = setColorScheme;
var _NativeEventEmitter = _interopRequireDefault(require("../EventEmitter/NativeEventEmitter"));
var _EventEmitter = _interopRequireDefault(require("../vendor/emitter/EventEmitter"));
var _DebugEnvironment = require("./DebugEnvironment");
var _invariant = _interopRequireDefault(require("invariant"));
var lazyState;
function getState() {
  if (lazyState != null) {
    return lazyState;
  }
  var eventEmitter = new _EventEmitter.default();
  var NativeAppearance = require('./NativeAppearance').default;
  if (NativeAppearance == null) {
    lazyState = {
      NativeAppearance: null,
      appearance: null,
      eventEmitter: eventEmitter
    };
  } else {
    var state = {
      NativeAppearance: NativeAppearance,
      appearance: null,
      eventEmitter: eventEmitter
    };
    new _NativeEventEmitter.default(NativeAppearance).addListener('appearanceChanged', function (newAppearance) {
      state.appearance = {
        colorScheme: toColorScheme(newAppearance.colorScheme)
      };
      eventEmitter.emit('change', state.appearance);
    });
    lazyState = state;
  }
  return lazyState;
}
function getColorScheme() {
  if (__DEV__) {
    if (_DebugEnvironment.isAsyncDebugging) {
      return 'light';
    }
  }
  var colorScheme = null;
  var state = getState();
  var NativeAppearance = state.NativeAppearance;
  if (NativeAppearance != null) {
    if (state.appearance == null) {
      state.appearance = {
        colorScheme: toColorScheme(NativeAppearance.getColorScheme())
      };
    }
    colorScheme = state.appearance.colorScheme;
  }
  return colorScheme;
}
function setColorScheme(colorScheme) {
  var state = getState();
  var NativeAppearance = state.NativeAppearance;
  if (NativeAppearance != null) {
    NativeAppearance.setColorScheme(colorScheme != null ? colorScheme : 'unspecified');
    state.appearance = {
      colorScheme: toColorScheme(NativeAppearance.getColorScheme())
    };
  }
}
function addChangeListener(listener) {
  var _getState = getState(),
    eventEmitter = _getState.eventEmitter;
  return eventEmitter.addListener('change', listener);
}
function toColorScheme(colorScheme) {
  (0, _invariant.default)(colorScheme === 'dark' || colorScheme === 'light' || colorScheme == null, "Unrecognized color scheme. Did you mean 'dark', 'light' or null?");
  return colorScheme;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,