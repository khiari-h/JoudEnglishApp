63106dc0d6bb29ee8ba27e0c9a12d27f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var ReactNativeFeatureFlags = _interopRequireWildcard(require("../featureflags/ReactNativeFeatureFlags"));
var _NativeEventEmitter = _interopRequireDefault(require("../../../Libraries/EventEmitter/NativeEventEmitter"));
var _RCTDeviceEventEmitter = _interopRequireDefault(require("../../../Libraries/EventEmitter/RCTDeviceEventEmitter"));
var _Platform = _interopRequireDefault(require("../../../Libraries/Utilities/Platform"));
var _NativeAnimatedModule = _interopRequireDefault(require("../../../Libraries/Animated/NativeAnimatedModule"));
var _NativeAnimatedTurboModule = _interopRequireDefault(require("../../../Libraries/Animated/NativeAnimatedTurboModule"));
var _invariant = _interopRequireDefault(require("invariant"));
var _nullthrows = _interopRequireDefault(require("nullthrows"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var NativeAnimatedModule = _NativeAnimatedModule.default != null ? _NativeAnimatedModule.default : _NativeAnimatedTurboModule.default;
var __nativeAnimatedNodeTagCount = 1;
var __nativeAnimationIdCount = 1;
var nativeEventEmitter;
var waitingForQueuedOperations = new Set();
var queueOperations = false;
var queue = [];
var singleOpQueue = [];
var isSingleOpBatching = _Platform.default.OS === 'android' && (NativeAnimatedModule == null ? void 0 : NativeAnimatedModule.queueAndExecuteBatchedOperations) != null && ReactNativeFeatureFlags.animatedShouldUseSingleOp();
var flushQueueTimeout = null;
var eventListenerGetValueCallbacks = {};
var eventListenerAnimationFinishedCallbacks = {};
var globalEventEmitterGetValueListener = null;
var globalEventEmitterAnimationFinishedListener = null;
function createNativeOperations() {
  var methodNames = ['createAnimatedNode', 'updateAnimatedNodeConfig', 'getValue', 'startListeningToAnimatedNodeValue', 'stopListeningToAnimatedNodeValue', 'connectAnimatedNodes', 'disconnectAnimatedNodes', 'startAnimatingNode', 'stopAnimation', 'setAnimatedNodeValue', 'setAnimatedNodeOffset', 'flattenAnimatedNodeOffset', 'extractAnimatedNodeOffset', 'connectAnimatedNodeToView', 'disconnectAnimatedNodeFromView', 'restoreDefaultValues', 'dropAnimatedNode', 'addAnimatedEventToView', 'removeAnimatedEventFromView', 'addListener', 'removeListener'];
  var nativeOperations = {};
  if (isSingleOpBatching) {
    var _loop = function _loop() {
      var methodName = methodNames[ii];
      var operationID = ii + 1;
      nativeOperations[methodName] = function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        singleOpQueue.push.apply(singleOpQueue, [operationID].concat(args));
      };
    };
    for (var ii = 0, length = methodNames.length; ii < length; ii++) {
      _loop();
    }
  } else {
    var _loop2 = function _loop2() {
      var methodName = methodNames[_ii];
      nativeOperations[methodName] = function () {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        var method = (0, _nullthrows.default)(NativeAnimatedModule)[methodName];
        if (queueOperations || queue.length !== 0) {
          queue.push(function () {
            return method.apply(void 0, args);
          });
        } else {
          method.apply(void 0, args);
        }
      };
    };
    for (var _ii = 0, _length = methodNames.length; _ii < _length; _ii++) {
      _loop2();
    }
  }
  return nativeOperations;
}
var NativeOperations = createNativeOperations();
var API = {
  getValue: isSingleOpBatching ? function (tag, saveValueCallback) {
    if (saveValueCallback) {
      eventListenerGetValueCallbacks[tag] = saveValueCallback;
    }
    NativeOperations.getValue(tag);
  } : function (tag, saveValueCallback) {
    NativeOperations.getValue(tag, saveValueCallback);
  },
  setWaitingForIdentifier: function setWaitingForIdentifier(id) {
    waitingForQueuedOperations.add(id);
    queueOperations = true;
    if (ReactNativeFeatureFlags.animatedShouldDebounceQueueFlush() && flushQueueTimeout) {
      clearTimeout(flushQueueTimeout);
    }
  },
  unsetWaitingForIdentifier: function unsetWaitingForIdentifier(id) {
    waitingForQueuedOperations.delete(id);
    if (waitingForQueuedOperations.size === 0) {
      queueOperations = false;
      API.disableQueue();
    }
  },
  disableQueue: function disableQueue() {
    (0, _invariant.default)(NativeAnimatedModule, 'Native animated module is not available');
    if (ReactNativeFeatureFlags.animatedShouldDebounceQueueFlush()) {
      var prevTimeout = flushQueueTimeout;
      clearImmediate(prevTimeout);
      flushQueueTimeout = setImmediate(API.flushQueue);
    } else {
      API.flushQueue();
    }
  },
  flushQueue: isSingleOpBatching ? function () {
    (0, _invariant.default)(NativeAnimatedModule || process.env.NODE_ENV === 'test', 'Native animated module is not available');
    flushQueueTimeout = null;
    if (singleOpQueue.length === 0) {
      return;
    }
    ensureGlobalEventEmitterListeners();
    NativeAnimatedModule == null || NativeAnimatedModule.queueAndExecuteBatchedOperations == null || NativeAnimatedModule.queueAndExecuteBatchedOperations(singleOpQueue);
    singleOpQueue.length = 0;
  } : function () {
    (0, _invariant.default)(NativeAnimatedModule || process.env.NODE_ENV === 'test', 'Native animated module is not available');
    flushQueueTimeout = null;
    if (queue.length === 0) {
      return;
    }
    if (_Platform.default.OS === 'android') {
      NativeAnimatedModule == null || NativeAnimatedModule.startOperationBatch == null || NativeAnimatedModule.startOperationBatch();
    }
    for (var q = 0, l = queue.length; q < l; q++) {
      queue[q]();
    }
    queue.length = 0;
    if (_Platform.default.OS === 'android') {
      NativeAnimatedModule == null || NativeAnimatedModule.finishOperationBatch == null || NativeAnimatedModule.finishOperationBatch();
    }
  },
  createAnimatedNode: function createAnimatedNode(tag, config) {
    NativeOperations.createAnimatedNode(tag, config);
  },
  updateAnimatedNodeConfig: function updateAnimatedNodeConfig(tag, config) {
    NativeOperations.updateAnimatedNodeConfig == null || NativeOperations.updateAnimatedNodeConfig(tag, config);
  },
  startListeningToAnimatedNodeValue: function startListeningToAnimatedNodeValue(tag) {
    NativeOperations.startListeningToAnimatedNodeValue(tag);
  },
  stopListeningToAnimatedNodeValue: function stopListeningToAnimatedNodeValue(tag) {
    NativeOperations.stopListeningToAnimatedNodeValue(tag);
  },
  connectAnimatedNodes: function connectAnimatedNodes(parentTag, childTag) {
    NativeOperations.connectAnimatedNodes(parentTag, childTag);
  },
  disconnectAnimatedNodes: function disconnectAnimatedNodes(parentTag, childTag) {
    NativeOperations.disconnectAnimatedNodes(parentTag, childTag);
  },
  startAnimatingNode: isSingleOpBatching ? function (animationId, nodeTag, config, endCallback) {
    if (endCallback) {
      eventListenerAnimationFinishedCallbacks[animationId] = endCallback;
    }
    NativeOperations.startAnimatingNode(animationId, nodeTag, config);
  } : function (animationId, nodeTag, config, endCallback) {
    NativeOperations.startAnimatingNode(animationId, nodeTag, config, endCallback);
  },
  stopAnimation: function stopAnimation(animationId) {
    NativeOperations.stopAnimation(animationId);
  },
  setAnimatedNodeValue: function setAnimatedNodeValue(nodeTag, value) {
    NativeOperations.setAnimatedNodeValue(nodeTag, value);
  },
  setAnimatedNodeOffset: function setAnimatedNodeOffset(nodeTag, offset) {
    NativeOperations.setAnimatedNodeOffset(nodeTag, offset);
  },
  flattenAnimatedNodeOffset: function flattenAnimatedNodeOffset(nodeTag) {
    NativeOperations.flattenAnimatedNodeOffset(nodeTag);
  },
  extractAnimatedNodeOffset: function extractAnimatedNodeOffset(nodeTag) {
    NativeOperations.extractAnimatedNodeOffset(nodeTag);
  },
  connectAnimatedNodeToView: function connectAnimatedNodeToView(nodeTag, viewTag) {
    NativeOperations.connectAnimatedNodeToView(nodeTag, viewTag);
  },
  disconnectAnimatedNodeFromView: function disconnectAnimatedNodeFromView(nodeTag, viewTag) {
    NativeOperations.disconnectAnimatedNodeFromView(nodeTag, viewTag);
  },
  restoreDefaultValues: function restoreDefaultValues(nodeTag) {
    NativeOperations.restoreDefaultValues == null || NativeOperations.restoreDefaultValues(nodeTag);
  },
  dropAnimatedNode: function dropAnimatedNode(tag) {
    NativeOperations.dropAnimatedNode(tag);
  },
  addAnimatedEventToView: function addAnimatedEventToView(viewTag, eventName, eventMapping) {
    NativeOperations.addAnimatedEventToView(viewTag, eventName, eventMapping);
  },
  removeAnimatedEventFromView: function removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag) {
    NativeOperations.removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag);
  }
};
function ensureGlobalEventEmitterListeners() {
  if (globalEventEmitterGetValueListener && globalEventEmitterAnimationFinishedListener) {
    return;
  }
  globalEventEmitterGetValueListener = _RCTDeviceEventEmitter.default.addListener('onNativeAnimatedModuleGetValue', function (params) {
    var tag = params.tag;
    var callback = eventListenerGetValueCallbacks[tag];
    if (!callback) {
      return;
    }
    callback(params.value);
    delete eventListenerGetValueCallbacks[tag];
  });
  globalEventEmitterAnimationFinishedListener = _RCTDeviceEventEmitter.default.addListener('onNativeAnimatedModuleAnimationFinished', function (params) {
    var animations = Array.isArray(params) ? params : [params];
    for (var animation of animations) {
      var animationId = animation.animationId;
      var callback = eventListenerAnimationFinishedCallbacks[animationId];
      if (callback) {
        callback(animation);
        delete eventListenerAnimationFinishedCallbacks[animationId];
      }
    }
  });
}
function generateNewNodeTag() {
  return __nativeAnimatedNodeTagCount++;
}
function generateNewAnimationId() {
  return __nativeAnimationIdCount++;
}
function assertNativeAnimatedModule() {
  (0, _invariant.default)(NativeAnimatedModule, 'Native animated module is not available');
}
var _warnedMissingNativeAnimated = false;
function shouldUseNativeDriver(config) {
  if (config.useNativeDriver == null) {
    console.warn('Animated: `useNativeDriver` was not specified. This is a required ' + 'option and must be explicitly set to `true` or `false`');
  }
  if (config.useNativeDriver === true && !NativeAnimatedModule) {
    if (process.env.NODE_ENV !== 'test') {
      if (!_warnedMissingNativeAnimated) {
        console.warn('Animated: `useNativeDriver` is not supported because the native ' + 'animated module is missing. Falling back to JS-based animation. To ' + 'resolve this, add `RCTAnimation` module to this app, or remove ' + '`useNativeDriver`. ' + 'Make sure to run `bundle exec pod install` first. Read more about autolinking: https://github.com/react-native-community/cli/blob/master/docs/autolinking.md');
        _warnedMissingNativeAnimated = true;
      }
    }
    return false;
  }
  return config.useNativeDriver || false;
}
function transformDataType(value) {
  if (typeof value !== 'string') {
    return value;
  }
  if (value.endsWith('deg')) {
    var degrees = parseFloat(value) || 0;
    return degrees * Math.PI / 180.0;
  } else if (value.endsWith('rad')) {
    return parseFloat(value) || 0;
  } else {
    return value;
  }
}
var _default = exports.default = {
  API: API,
  generateNewNodeTag: generateNewNodeTag,
  generateNewAnimationId: generateNewAnimationId,
  assertNativeAnimatedModule: assertNativeAnimatedModule,
  shouldUseNativeDriver: shouldUseNativeDriver,
  transformDataType: transformDataType,
  get nativeEventEmitter() {
    if (!nativeEventEmitter) {
      nativeEventEmitter = new _NativeEventEmitter.default(_Platform.default.OS !== 'ios' ? null : NativeAnimatedModule);
    }
    return nativeEventEmitter;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,