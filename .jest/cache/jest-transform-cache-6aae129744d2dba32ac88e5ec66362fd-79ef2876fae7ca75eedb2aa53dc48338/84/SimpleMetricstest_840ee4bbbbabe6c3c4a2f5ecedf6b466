697f58a3f6b042102998cd7618fa8f70
_getJestObj().mock('../../../../src/hooks/useActivityMetrics', function () {
  return {
    __esModule: true,
    default: jest.fn()
  };
});
_getJestObj().mock('../../../../src/hooks/useDailyWords', function () {
  return {
    __esModule: true,
    default: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _SimpleMetrics = _interopRequireDefault(require("../../../../src/screens/Dashboard/components/SimpleMetrics"));
var _ThemeContext = require("../../../../src/contexts/ThemeContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('SimpleMetrics', function () {
  var mockTheme = {
    colors: {
      surface: '#FFFFFF',
      text: '#1F2937',
      textSecondary: '#6B7280'
    }
  };
  var useActivityMetrics = require('../../../../src/hooks/useActivityMetrics').default;
  var useDailyWords = require('../../../../src/hooks/useDailyWords').default;
  var renderComponent = function renderComponent() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
      value: mockTheme,
      children: (0, _jsxRuntime.jsx)(_SimpleMetrics.default, Object.assign({}, props))
    }));
  };
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('√âtat de chargement', function () {
    it('devrait afficher l\'indicateur de chargement', function () {
      useActivityMetrics.mockReturnValue({
        currentStreak: 0,
        streakTrend: null,
        formattedTime: '0min'
      });
      useDailyWords.mockReturnValue({
        wordsToday: 0,
        isLoading: true
      });
      var _renderComponent = renderComponent(),
        getByText = _renderComponent.getByText;
      expect(getByText('Chargement des m√©triques...')).toBeTruthy();
    });
  });
  describe('√âtat vide', function () {
    it('devrait afficher l\'√©tat vide quand aucune activit√©', function () {
      useActivityMetrics.mockReturnValue({
        currentStreak: 0,
        streakTrend: null,
        formattedTime: '0min'
      });
      useDailyWords.mockReturnValue({
        wordsToday: 0,
        isLoading: false
      });
      var _renderComponent2 = renderComponent(),
        getByText = _renderComponent2.getByText;
      expect(getByText('üéØ')).toBeTruthy();
      expect(getByText('Commencez votre premi√®re session !')).toBeTruthy();
      expect(getByText('Vos statistiques appara√Ætront ici')).toBeTruthy();
    });
  });
  describe('Affichage des m√©triques', function () {
    it('devrait afficher toutes les m√©triques avec activit√©', function () {
      useActivityMetrics.mockReturnValue({
        currentStreak: 5,
        streakTrend: '+1 üî•',
        formattedTime: '15min'
      });
      useDailyWords.mockReturnValue({
        wordsToday: 12,
        isLoading: false
      });
      var _renderComponent3 = renderComponent(),
        getByText = _renderComponent3.getByText;
      expect(getByText('üìä Aujourd\'hui')).toBeTruthy();
      expect(getByText('üî•')).toBeTruthy();
      expect(getByText('üìö')).toBeTruthy();
      expect(getByText('‚è±Ô∏è')).toBeTruthy();
      expect(getByText('5')).toBeTruthy();
      expect(getByText('12')).toBeTruthy();
      expect(getByText('15min')).toBeTruthy();
      expect(getByText('Jours de suite')).toBeTruthy();
      expect(getByText('Mots aujourd\'hui')).toBeTruthy();
      expect(getByText('Temps aujourd\'hui')).toBeTruthy();
    });
    it('devrait afficher le trend pour le streak', function () {
      useActivityMetrics.mockReturnValue({
        currentStreak: 3,
        streakTrend: '+2 üí™',
        formattedTime: '10min'
      });
      useDailyWords.mockReturnValue({
        wordsToday: 8,
        isLoading: false
      });
      var _renderComponent4 = renderComponent(),
        getByText = _renderComponent4.getByText;
      expect(getByText('+2 üí™')).toBeTruthy();
    });
  });
  describe('Gestion des valeurs nulles', function () {
    it('devrait g√©rer les valeurs nulles gracieusement', function () {
      useActivityMetrics.mockReturnValue({
        currentStreak: null,
        streakTrend: null,
        formattedTime: null
      });
      useDailyWords.mockReturnValue({
        wordsToday: null,
        isLoading: false
      });
      var _renderComponent5 = renderComponent(),
        getByText = _renderComponent5.getByText;
      expect(getByText('Commencez votre premi√®re session !')).toBeTruthy();
    });
    it('devrait afficher 0 pour les valeurs undefined', function () {
      useActivityMetrics.mockReturnValue({
        currentStreak: undefined,
        streakTrend: null,
        formattedTime: '5min'
      });
      useDailyWords.mockReturnValue({
        wordsToday: undefined,
        isLoading: false
      });
      var _renderComponent6 = renderComponent(),
        getByText = _renderComponent6.getByText;
      expect(getByText('0')).toBeTruthy();
      expect(getByText('5min')).toBeTruthy();
    });
  });
  describe('Couleurs et th√®me', function () {
    it('devrait utiliser la couleur d\'accent personnalis√©e', function () {
      useActivityMetrics.mockReturnValue({
        currentStreak: 0,
        streakTrend: null,
        formattedTime: '0min'
      });
      useDailyWords.mockReturnValue({
        wordsToday: 0,
        isLoading: true
      });
      var _renderComponent7 = renderComponent({
          accentColor: '#FF5722'
        }),
        getByText = _renderComponent7.getByText;
      expect(getByText('Chargement des m√©triques...')).toBeTruthy();
    });
    it('devrait fonctionner sans contexte de th√®me', function () {
      useActivityMetrics.mockReturnValue({
        currentStreak: 1,
        streakTrend: null,
        formattedTime: '5min'
      });
      useDailyWords.mockReturnValue({
        wordsToday: 3,
        isLoading: false
      });
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SimpleMetrics.default, {})),
        getByText = _render.getByText;
      expect(getByText('üìä Aujourd\'hui')).toBeTruthy();
    });
  });
  describe('Cas limites', function () {
    it('devrait afficher les m√©triques avec une seule valeur non-nulle', function () {
      useActivityMetrics.mockReturnValue({
        currentStreak: 0,
        streakTrend: null,
        formattedTime: '0min'
      });
      useDailyWords.mockReturnValue({
        wordsToday: 1,
        isLoading: false
      });
      var _renderComponent8 = renderComponent(),
        getByText = _renderComponent8.getByText;
      expect(getByText('üìä Aujourd\'hui')).toBeTruthy();
      expect(getByText('1')).toBeTruthy();
    });
    it('devrait g√©rer les grandes valeurs', function () {
      useActivityMetrics.mockReturnValue({
        currentStreak: 365,
        streakTrend: '+1 üèÜ',
        formattedTime: '2h 45min'
      });
      useDailyWords.mockReturnValue({
        wordsToday: 100,
        isLoading: false
      });
      var _renderComponent9 = renderComponent(),
        getByText = _renderComponent9.getByText;
      expect(getByText('365')).toBeTruthy();
      expect(getByText('100')).toBeTruthy();
      expect(getByText('2h 45min')).toBeTruthy();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,