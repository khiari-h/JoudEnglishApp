5aaa0809523d3643e0eb51febf28a483
_getJestObj().mock('../../../src/components/ui/Button/style', function () {
  return {
    button: {},
    contentContainer: {},
    smallButton: {
      padding: 8
    },
    mediumButton: {
      padding: 12
    },
    largeButton: {
      padding: 16
    },
    smallText: {
      fontSize: 14
    },
    mediumText: {
      fontSize: 16
    },
    largeText: {
      fontSize: 18
    },
    filled: {},
    outlined: {
      borderWidth: 1
    },
    text: {},
    tonal: {},
    withElevation: {
      elevation: 2
    },
    rounded: {
      borderRadius: 999
    },
    fullWidth: {
      width: '100%'
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactHooks = require("@testing-library/react-hooks");
var _useButtonStyles = _interopRequireDefault(require("../../../src/components/ui/Button/useButtonStyles"));
var _style = _interopRequireDefault(require("../../../src/components/ui/Button/style"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var PRIMARY_COLOR = '#5E60CE';
var DANGER_COLOR = '#EF4444';
var DISABLED_TEXT_COLOR = '#9CA3AF';
var DISABLED_BORDER_COLOR = '#D1D5DB';
describe('useButtonStyles', function () {
  it('devrait retourner les styles pour la taille "medium" par défaut', function () {
    var _renderHook = (0, _reactHooks.renderHook)(function () {
        return (0, _useButtonStyles.default)({});
      }),
      result = _renderHook.result;
    expect(result.current.sizeStyles.button).toEqual(_style.default.mediumButton);
    expect(result.current.sizeStyles.text).toEqual(_style.default.mediumText);
    expect(result.current.sizeStyles.iconSize).toBe(20);
  });
  it('devrait retourner les styles pour la taille "large"', function () {
    var _renderHook2 = (0, _reactHooks.renderHook)(function () {
        return (0, _useButtonStyles.default)({
          size: 'large'
        });
      }),
      result = _renderHook2.result;
    expect(result.current.sizeStyles.button).toEqual(_style.default.largeButton);
    expect(result.current.sizeStyles.iconSize).toBe(24);
  });
  it('devrait retourner les styles pour la variante "outlined"', function () {
    var _renderHook3 = (0, _reactHooks.renderHook)(function () {
        return (0, _useButtonStyles.default)({
          variant: 'outlined',
          color: 'primary'
        });
      }),
      result = _renderHook3.result;
    expect(result.current.variantStyles.button.borderColor).toBe(PRIMARY_COLOR);
    expect(result.current.variantStyles.text.color).toBe(PRIMARY_COLOR);
  });
  it('devrait retourner les styles pour la variante "text"', function () {
    var _renderHook4 = (0, _reactHooks.renderHook)(function () {
        return (0, _useButtonStyles.default)({
          variant: 'text',
          color: 'danger'
        });
      }),
      result = _renderHook4.result;
    expect(result.current.variantStyles.button.backgroundColor).toBe('transparent');
    expect(result.current.variantStyles.text.color).toBe(DANGER_COLOR);
  });
  it('devrait retourner les styles pour la variante "tonal"', function () {
    var _renderHook5 = (0, _reactHooks.renderHook)(function () {
        return (0, _useButtonStyles.default)({
          variant: 'tonal',
          color: 'secondary'
        });
      }),
      result = _renderHook5.result;
    expect(result.current.variantStyles.text.color).toBe('#6B7280');
  });
  it('devrait retourner les styles pour la variante "icon"', function () {
    var _renderHook6 = (0, _reactHooks.renderHook)(function () {
        return (0, _useButtonStyles.default)({
          variant: 'icon',
          size: 'large',
          color: 'primary'
        });
      }),
      result = _renderHook6.result;
    expect(result.current.variantStyles.icon.color).toBe('primary');
    expect(result.current.variantStyles.button.padding).toBe(0);
  });
  it('devrait retourner les styles désactivés pour la variante "outlined"', function () {
    var _renderHook7 = (0, _reactHooks.renderHook)(function () {
        return (0, _useButtonStyles.default)({
          variant: 'outlined',
          disabled: true
        });
      }),
      result = _renderHook7.result;
    expect(result.current.variantStyles.button.borderColor).toBe(DISABLED_BORDER_COLOR);
    expect(result.current.variantStyles.text.color).toBe(DISABLED_TEXT_COLOR);
  });
  it('devrait retourner les styles désactivés pour la variante "text"', function () {
    var _renderHook8 = (0, _reactHooks.renderHook)(function () {
        return (0, _useButtonStyles.default)({
          variant: 'text',
          disabled: true
        });
      }),
      result = _renderHook8.result;
    expect(result.current.variantStyles.text.color).toBe(DISABLED_TEXT_COLOR);
  });
  it('devrait retourner les styles désactivés pour la variante "filled"', function () {
    var _renderHook9 = (0, _reactHooks.renderHook)(function () {
        return (0, _useButtonStyles.default)({
          variant: 'filled',
          disabled: true
        });
      }),
      result = _renderHook9.result;
    expect(result.current.variantStyles.button.backgroundColor).toBe('#E5E7EB');
    expect(result.current.variantStyles.text.color).toBe('white');
  });
  it('devrait appliquer le style d’élévation si elevation est true et variant est "filled"', function () {
    var _renderHook0 = (0, _reactHooks.renderHook)(function () {
        return (0, _useButtonStyles.default)({
          elevation: true,
          variant: 'filled'
        });
      }),
      result = _renderHook0.result;
    expect(result.current.elevationStyle).toEqual(_style.default.withElevation);
  });
  it('ne devrait pas appliquer le style d’élévation si elevation est false', function () {
    var _renderHook1 = (0, _reactHooks.renderHook)(function () {
        return (0, _useButtonStyles.default)({
          elevation: false,
          variant: 'filled'
        });
      }),
      result = _renderHook1.result;
    expect(result.current.elevationStyle).toEqual({});
  });
  it('ne devrait pas appliquer le style d’élévation si le bouton est désactivé', function () {
    var _renderHook10 = (0, _reactHooks.renderHook)(function () {
        return (0, _useButtonStyles.default)({
          disabled: true,
          variant: 'filled'
        });
      }),
      result = _renderHook10.result;
    expect(result.current.elevationStyle).toEqual({});
  });
  it('devrait appliquer le style arrondi si rounded est true', function () {
    var _renderHook11 = (0, _reactHooks.renderHook)(function () {
        return (0, _useButtonStyles.default)({
          rounded: true
        });
      }),
      result = _renderHook11.result;
    expect(result.current.radiusStyle).toEqual(_style.default.rounded);
  });
  it('devrait appliquer le style fullWidth si fullWidth est true', function () {
    var _renderHook12 = (0, _reactHooks.renderHook)(function () {
        return (0, _useButtonStyles.default)({
          fullWidth: true
        });
      }),
      result = _renderHook12.result;
    expect(result.current.fullWidthStyle).toEqual(_style.default.fullWidth);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,