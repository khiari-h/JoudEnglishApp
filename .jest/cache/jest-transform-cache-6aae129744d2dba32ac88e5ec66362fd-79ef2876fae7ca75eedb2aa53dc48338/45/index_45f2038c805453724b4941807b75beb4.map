{"version":3,"names":["_errorCorrectionC1Full","_interopRequireDefault","require","_errorCorrectionC1Identify","_errorCorrectionC1MultipleChoice","cov_zdw7k4q5d","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","_coverageSchema","coverage","actualCoverage","allExercises","concat","_toConsumableArray2","default","errorCorrectionC1Full","errorCorrectionC1Identify","errorCorrectionC1MultipleChoice","sort","a","categoryId","typeOrder","errorCorrectionC1","level","totalExercises","length","statistics","full","identify","multiple_choice","byCategory","count","categories","id","description","exerciseCount","difficulty","color","topics","commonErrors","skillsTargeted","exercises","getExercisesByCategory","filter","exercise","getExercisesByType","getExercisesByCategoryAndType","getExpertLevelExercises","wordCount","text","split","hasAdvancedVocab","getCulturalReferenceExercises","culturalKeywords","some","keyword","toLowerCase","includes","getAcademicPrecisionExercises","academicKeywords","getStylisticExercises","explanation","validateStructure","requiredFields","validTypes","every","hasRequiredFields","field","Object","prototype","hasOwnProperty","call","hasValidType","hasValidCategory","hasExpertComplexity","hasSophisticatedVocab","hasTypeSpecificFields","choices","Array","isArray","correctChoiceIndex","errorPositions","getSummary","totalErrorPositions","ex","reduce","sum","totalTextLength","expertExercises","culturalExercises","academicExercises","focus","progression","distribution","complexity","averageTextLength","Math","round","averageWordCount","averageErrorsPerExercise","expertExercisesPercentage","culturalReferencePercentage","academicFocusPercentage","_default","exports"],"sources":["index.js"],"sourcesContent":["// src/data/exercises/errorCorrection/C1/index.js\r\n\r\nimport errorCorrectionC1Full from './categories/errorCorrectionC1Full';\r\nimport errorCorrectionC1Identify from './categories/errorCorrectionC1Identify';\r\nimport errorCorrectionC1MultipleChoice from './categories/errorCorrectionC1MultipleChoice';\r\n\r\n// Combine all exercises from the 3 files\r\nconst allExercises = [\r\n  ...errorCorrectionC1Full,\r\n  ...errorCorrectionC1Identify,\r\n  ...errorCorrectionC1MultipleChoice\r\n];\r\n\r\n// Sort exercises by categoryId to maintain logical order\r\nallExercises.sort((a, b) => {\r\n  if (a.categoryId !== b.categoryId) {\r\n    return a.categoryId - b.categoryId;\r\n  }\r\n  // Within same category, order by type: full, identify, multiple_choice\r\n  const typeOrder = { 'full': 1, 'identify': 2, 'multiple_choice': 3 };\r\n  return typeOrder[a.type] - typeOrder[b.type];\r\n});\r\n\r\nconst errorCorrectionC1 = {\r\n  level: \"C1\",\r\n  totalExercises: allExercises.length,\r\n\r\n  // Statistics by type\r\n  statistics: {\r\n    full: errorCorrectionC1Full.length,\r\n    identify: errorCorrectionC1Identify.length,\r\n    multiple_choice: errorCorrectionC1MultipleChoice.length,\r\n    byCategory: {\r\n      1: { name: \"Nuanced Grammar & Style\", count: 9 },          // 3 full + 4 identify + 2 multiple_choice\r\n      2: { name: \"Advanced Discourse & Rhetoric\", count: 10 },  // 3 full + 4 identify + 3 multiple_choice\r\n      3: { name: \"Cultural & Contextual Language\", count: 9 },   // 3 full + 4 identify + 2 multiple_choice\r\n      4: { name: \"Complex Argumentation\", count: 11 },          // 4 full + 4 identify + 3 multiple_choice\r\n      5: { name: \"Linguistic Precision\", count: 9 }             // 3 full + 4 identify + 2 multiple_choice\r\n    }\r\n  },\r\n\r\n  // Categories metadata for C1 expert level\r\n  categories: [\r\n    {\r\n      id: 1,\r\n      name: \"Nuanced Grammar & Style\",\r\n      description: \"Sophisticated grammatical structures, stylistic nuances, advanced syntax\",\r\n      exerciseCount: 9,\r\n      difficulty: \"Expert\",\r\n      color: \"#3b82f6\",\r\n      topics: [\"complex inversions\", \"parallel structures\", \"nuanced modality\", \"sophisticated conjunctions\", \"advanced syntax\"],\r\n      commonErrors: [\"tense inconsistency\", \"redundant expressions\", \"inappropriate register\"],\r\n      skillsTargeted: [\"grammatical sophistication\", \"stylistic awareness\", \"syntactic complexity\", \"academic precision\"]\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"Advanced Discourse & Rhetoric\",\r\n      description: \"Rhetorical devices, advanced discourse markers, persuasive language structures\",\r\n      exerciseCount: 10,\r\n      difficulty: \"Expert\",\r\n      color: \"#10b981\",\r\n      topics: [\"rhetorical devices\", \"advanced connectors\", \"discourse sophistication\", \"formal transitions\", \"academic argumentation\"],\r\n      commonErrors: [\"inappropriate connectors\", \"redundant hedging\", \"informal discourse markers\"],\r\n      skillsTargeted: [\"rhetorical competence\", \"advanced argumentation\", \"discourse mastery\", \"academic sophistication\"]\r\n    },\r\n    {\r\n      id: 3,\r\n      name: \"Cultural & Contextual Language\",\r\n      description: \"Cultural references, idiomatic sophistication, contextual appropriateness\",\r\n      exerciseCount: 9,\r\n      difficulty: \"Expert\",\r\n      color: \"#f59e0b\",\r\n      topics: [\"cultural allusions\", \"mythological references\", \"sophisticated idioms\", \"contextual precision\", \"literary references\"],\r\n      commonErrors: [\"incorrect cultural references\", \"inappropriate register\", \"spelling of cultural terms\"],\r\n      skillsTargeted: [\"cultural competence\", \"implicit understanding\", \"contextual sensitivity\", \"literary knowledge\"]\r\n    },\r\n    {\r\n      id: 4,\r\n      name: \"Complex Argumentation\",\r\n      description: \"Advanced argumentative structures, logical precision, academic reasoning\",\r\n      exerciseCount: 11,\r\n      difficulty: \"Expert\",\r\n      color: \"#8b5cf6\",\r\n      topics: [\"complex reasoning\", \"logical structures\", \"academic argumentation\", \"analytical precision\", \"empirical reasoning\"],\r\n      commonErrors: [\"misused logical terms\", \"unsupported claims\", \"redundant qualifications\", \"imprecise terminology\"],\r\n      skillsTargeted: [\"analytical thinking\", \"logical precision\", \"academic discourse\", \"critical reasoning\"]\r\n    },\r\n    {\r\n      id: 5,\r\n      name: \"Linguistic Precision\",\r\n      description: \"Precise word choice, semantic nuances, register mastery, conciseness\",\r\n      exerciseCount: 9,\r\n      difficulty: \"Expert\",\r\n      color: \"#ef4444\",\r\n      topics: [\"semantic precision\", \"register mastery\", \"lexical sophistication\", \"conciseness\", \"elegant expression\"],\r\n      commonErrors: [\"redundant expressions\", \"wordy constructions\", \"imprecise vocabulary\", \"inappropriate formality\"],\r\n      skillsTargeted: [\"lexical precision\", \"semantic awareness\", \"register expertise\", \"expressive economy\"]\r\n    }\r\n  ],\r\n\r\n  // All exercises combined and sorted\r\n  exercises: allExercises,\r\n\r\n  // Advanced helper methods for C1 level\r\n  getExercisesByCategory: (categoryId) => {\r\n    return allExercises.filter(exercise => exercise.categoryId === categoryId);\r\n  },\r\n\r\n  getExercisesByType: (type) => {\r\n    return allExercises.filter(exercise => exercise.type === type);\r\n  },\r\n\r\n  getExercisesByCategoryAndType: (categoryId, type) => {\r\n    return allExercises.filter(exercise => \r\n      exercise.categoryId === categoryId && exercise.type === type\r\n    );\r\n  },\r\n\r\n  // Get exercises by specific expert skills\r\n  getExpertLevelExercises: () => {\r\n    return allExercises.filter(exercise => {\r\n      const wordCount = exercise.text.split(' ').length;\r\n      const hasAdvancedVocab = exercise.text.length > 100;\r\n      return wordCount >= 15 && hasAdvancedVocab; // Very sophisticated texts\r\n    });\r\n  },\r\n\r\n  // Get exercises with cultural references\r\n  getCulturalReferenceExercises: () => {\r\n    return allExercises.filter(exercise => {\r\n      const culturalKeywords = ['Sisyphean', 'Kafkaesque', 'Machiavellian', 'Pyrrhic', 'Achilles', 'quixotic'];\r\n      return culturalKeywords.some(keyword => \r\n        exercise.text.toLowerCase().includes(keyword.toLowerCase())\r\n      );\r\n    });\r\n  },\r\n\r\n  // Get exercises focusing on academic precision\r\n  getAcademicPrecisionExercises: () => {\r\n    return allExercises.filter(exercise => {\r\n      const academicKeywords = ['research', 'methodology', 'hypothesis', 'empirical', 'evidence'];\r\n      return academicKeywords.some(keyword => \r\n        exercise.text.toLowerCase().includes(keyword)\r\n      );\r\n    });\r\n  },\r\n\r\n  // Get exercises for stylistic sophistication\r\n  getStylisticExercises: () => {\r\n    return allExercises.filter(exercise => {\r\n      return exercise.categoryId === 1 || exercise.categoryId === 5 ||\r\n             exercise.explanation.toLowerCase().includes('style') ||\r\n             exercise.explanation.toLowerCase().includes('sophisticated');\r\n    });\r\n  },\r\n\r\n  // Enhanced validation for C1 expert level\r\n  validateStructure: () => {\r\n    const requiredFields = ['categoryId', 'type', 'text', 'correctedText', 'hint', 'explanation'];\r\n    const validTypes = ['full', 'identify', 'multiple_choice'];\r\n\r\n    return allExercises.every(exercise => {\r\n      // Check required fields\r\n      const hasRequiredFields = requiredFields.every(field => \r\n        Object.prototype.hasOwnProperty.call(exercise, field) && exercise[field] !== undefined\r\n      );\r\n\r\n      // Check valid type\r\n      const hasValidType = validTypes.includes(exercise.type);\r\n\r\n      // Check valid category (1-5 for C1)\r\n      const hasValidCategory = exercise.categoryId >= 1 && exercise.categoryId <= 5;\r\n\r\n      // Check C1 level complexity (sophisticated texts and vocabulary)\r\n      const hasExpertComplexity = exercise.text.split(' ').length >= 12;\r\n      const hasSophisticatedVocab = exercise.text.length > 80;\r\n\r\n      // Check type-specific fields with C1 standards\r\n      let hasTypeSpecificFields = true;\r\n      if (exercise.type === 'multiple_choice') {\r\n        hasTypeSpecificFields = exercise.choices && \r\n                               Array.isArray(exercise.choices) &&\r\n                               exercise.choices.length >= 4 && // C1 should have 4 sophisticated choices\r\n                               exercise.correctChoiceIndex !== undefined &&\r\n                               exercise.correctChoiceIndex >= 0 &&\r\n                               exercise.correctChoiceIndex < exercise.choices.length;\r\n      } else {\r\n        hasTypeSpecificFields = exercise.errorPositions && Array.isArray(exercise.errorPositions);\r\n      }\r\n\r\n      return hasRequiredFields && hasValidType && hasValidCategory && \r\n             hasExpertComplexity && hasSophisticatedVocab && hasTypeSpecificFields;\r\n    });\r\n  },\r\n\r\n  // Comprehensive C1 summary with expert metrics\r\n  getSummary: () => {\r\n    const totalErrorPositions = allExercises\r\n      .filter(ex => ex.errorPositions)\r\n      .reduce((sum, ex) => sum + ex.errorPositions.length, 0);\r\n\r\n    const totalTextLength = allExercises.reduce((sum, ex) => sum + ex.text.length, 0);\r\n    const expertExercises = errorCorrectionC1.getExpertLevelExercises().length;\r\n    const culturalExercises = errorCorrectionC1.getCulturalReferenceExercises().length;\r\n    const academicExercises = errorCorrectionC1.getAcademicPrecisionExercises().length;\r\n\r\n    return {\r\n      level: \"C1\",\r\n      totalExercises: allExercises.length,\r\n      categories: errorCorrectionC1.categories.length,\r\n      difficulty: \"Expert\",\r\n      focus: \"Sophisticated grammatical structures, cultural competence, rhetorical mastery, academic precision\",\r\n      progression: \"Builds on B2 with advanced stylistic awareness, cultural sophistication, and expert-level precision\",\r\n      distribution: {\r\n        full: errorCorrectionC1Full.length,\r\n        identify: errorCorrectionC1Identify.length,\r\n        multiple_choice: errorCorrectionC1MultipleChoice.length\r\n      },\r\n      complexity: {\r\n        averageTextLength: Math.round(totalTextLength / allExercises.length),\r\n        averageWordCount: Math.round(allExercises.reduce((sum, ex) => sum + ex.text.split(' ').length, 0) / allExercises.length),\r\n        totalErrorPositions,\r\n        averageErrorsPerExercise: Math.round(totalErrorPositions / allExercises.filter(ex => ex.errorPositions).length * 10) / 10,\r\n        expertExercisesPercentage: Math.round((expertExercises / allExercises.length) * 100),\r\n        culturalReferencePercentage: Math.round((culturalExercises / allExercises.length) * 100),\r\n        academicFocusPercentage: Math.round((academicExercises / allExercises.length) * 100)\r\n      },\r\n      skillsTargeted: [\r\n        \"Expert grammatical competence\",\r\n        \"Cultural and literary sophistication\",\r\n        \"Advanced rhetorical skills\",\r\n        \"Academic precision and register mastery\",\r\n        \"Sophisticated stylistic awareness\"\r\n      ]\r\n    };\r\n  }\r\n};\r\n\r\n// Validate structure on export\r\nif (!errorCorrectionC1.validateStructure()) {\r\n  // empty: structure invalid, handle if needed\r\n} else {\r\n  // empty: structure valid, nothing to do\r\n}\r\n\r\nexport default errorCorrectionC1;\r\n"],"mappings":";;;;;;AAEA,IAAAA,sBAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,0BAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,gCAAA,GAAAH,sBAAA,CAAAC,OAAA;AAA2F,SAAAG,cAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,M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","ignoreList":[]}