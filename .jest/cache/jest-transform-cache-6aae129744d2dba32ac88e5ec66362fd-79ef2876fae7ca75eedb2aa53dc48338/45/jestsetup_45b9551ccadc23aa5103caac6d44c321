23e9012d260920c4c7fdd7edf97783aa
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return require('@react-native-async-storage/async-storage/jest/async-storage-mock');
});
_getJestObj().mock('expo-font', function () {
  return {
    useFonts: function useFonts() {
      return [true];
    },
    isLoaded: function isLoaded() {
      return true;
    }
  };
});
_getJestObj().mock('expo-haptics', function () {
  return {
    impactAsync: jest.fn()
  };
});
_getJestObj().mock('react-native-reanimated', function () {
  var Reanimated = require('react-native-reanimated/mock');
  Reanimated.default.call = function () {};
  return Reanimated;
});
_getJestObj().mock('react-native/Libraries/Settings/Settings', function () {
  return {
    get: jest.fn(function () {
      return 'light';
    }),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn()
  };
});
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  RN.Animated = Object.assign({}, RN.Animated, {
    Value: jest.fn(function () {
      return {
        interpolate: jest.fn(function (config) {
          return config.outputRange[0];
        }),
        addListener: jest.fn(),
        removeListener: jest.fn(),
        removeAllListeners: jest.fn(),
        stopAnimation: jest.fn(),
        resetAnimation: jest.fn(),
        setValue: jest.fn()
      };
    }),
    timing: jest.fn(function () {
      return {
        start: jest.fn(function (callback) {
          if (callback) {
            callback({
              finished: true
            });
          }
        })
      };
    })
  });
  return RN;
});
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn(),
        canGoBack: function canGoBack() {
          return true;
        }
      };
    }
  });
});
var _reactNative = require("react-native");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
_reactNative.NativeModules.SettingsManager = _reactNative.NativeModules.SettingsManager || {
  settings: {
    AppleLocale: 'en_US'
  }
};
if (typeof setImmediate === 'undefined') {
  global.setImmediate = function (fn) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return setTimeout.apply(void 0, [fn, 0].concat(args));
  };
}
if (typeof clearImmediate === 'undefined') {
  global.clearImmediate = function (id) {
    return clearTimeout(id);
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJyZXF1aXJlIiwidXNlRm9udHMiLCJpc0xvYWRlZCIsImltcGFjdEFzeW5jIiwiamVzdCIsImZuIiwiUmVhbmltYXRlZCIsImRlZmF1bHQiLCJjYWxsIiwiZ2V0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJSTiIsInJlcXVpcmVBY3R1YWwiLCJBbmltYXRlZCIsIk9iamVjdCIsImFzc2lnbiIsIlZhbHVlIiwiaW50ZXJwb2xhdGUiLCJjb25maWciLCJvdXRwdXRSYW5nZSIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJzdG9wQW5pbWF0aW9uIiwicmVzZXRBbmltYXRpb24iLCJzZXRWYWx1ZSIsInRpbWluZyIsInN0YXJ0IiwiY2FsbGJhY2siLCJmaW5pc2hlZCIsInVzZU5hdmlnYXRpb24iLCJuYXZpZ2F0ZSIsImdvQmFjayIsImNhbkdvQmFjayIsIl9yZWFjdE5hdGl2ZSIsIl9yZXF1aXJlIiwiTmF0aXZlTW9kdWxlcyIsIlNldHRpbmdzTWFuYWdlciIsInNldHRpbmdzIiwiQXBwbGVMb2NhbGUiLCJzZXRJbW1lZGlhdGUiLCJnbG9iYWwiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsInNldFRpbWVvdXQiLCJhcHBseSIsImNvbmNhdCIsImNsZWFySW1tZWRpYXRlIiwiaWQiLCJjbGVhclRpbWVvdXQiXSwic291cmNlcyI6WyJqZXN0LnNldHVwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGplc3Quc2V0dXAuanNcblxuaW1wb3J0IHsgTmF0aXZlTW9kdWxlcyB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbi8vIE1vY2sgQXN5bmNTdG9yYWdlICh0csOocyB1dGlsaXPDqSBkYW5zIFJOKVxuamVzdC5tb2NrKCdAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZScsICgpID0+XG4gIHJlcXVpcmUoJ0ByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlL2plc3QvYXN5bmMtc3RvcmFnZS1tb2NrJylcbik7XG5cbi8vIE1vY2sgRXhwbyBmb250IChzaSB0dSB1dGlsaXNlcyBleHBvLWZvbnQsIHNpbm9uIHR1IHBldXggcmV0aXJlcilcbmplc3QubW9jaygnZXhwby1mb250JywgKCkgPT4gKHtcbiAgdXNlRm9udHM6ICgpID0+IFt0cnVlXSxcbiAgaXNMb2FkZWQ6ICgpID0+IHRydWUsXG59KSk7XG5cbi8vIE1vY2sgRXhwbyBoYXB0aWNzICh2aWJyYXRpb24pXG5qZXN0Lm1vY2soJ2V4cG8taGFwdGljcycsICgpID0+ICh7XG4gIGltcGFjdEFzeW5jOiBqZXN0LmZuKCksXG59KSk7XG5cbi8vIE1vY2sgcmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWQgcG91ciDDqXZpdGVyIGxlcyBlcnJldXJzIGRhbnMgbGVzIHRlc3RzXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS1yZWFuaW1hdGVkJywgKCkgPT4ge1xuICBjb25zdCBSZWFuaW1hdGVkID0gcmVxdWlyZSgncmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWQvbW9jaycpO1xuXG4gIC8vIFBhdGNoIHBvdXIgw6l2aXRlciBkZXMgZXJyZXVycyBzdXBwbMOpbWVudGFpcmVzXG4gIFJlYW5pbWF0ZWQuZGVmYXVsdC5jYWxsID0gKCkgPT4ge307XG5cbiAgcmV0dXJuIFJlYW5pbWF0ZWQ7XG59KTtcblxuLy8gTW9jayBkZXMgU2V0dGluZ3MgbmF0aXZlcyAocG91ciDDqXZpdGVyIGVycmV1cnMgVHVyYm9Nb2R1bGVSZWdpc3RyeSlcbmplc3QubW9jaygncmVhY3QtbmF0aXZlL0xpYnJhcmllcy9TZXR0aW5ncy9TZXR0aW5ncycsICgpID0+ICh7XG4gIGdldDogamVzdC5mbigoKSA9PiAnbGlnaHQnKSxcbiAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICByZW1vdmVFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXG59KSk7XG5cbi8vIE1vY2sgTmF0aXZlTW9kdWxlcy5TZXR0aW5nc01hbmFnZXIgKHNpbXVsZSBsb2NhbGUpXG5OYXRpdmVNb2R1bGVzLlNldHRpbmdzTWFuYWdlciA9IE5hdGl2ZU1vZHVsZXMuU2V0dGluZ3NNYW5hZ2VyIHx8IHtcbiAgc2V0dGluZ3M6IHsgQXBwbGVMb2NhbGU6ICdlbl9VUycgfSxcbn07XG5cbi8vIFBvbHlmaWxsIGdsb2JhbCBwb3VyIHNldEltbWVkaWF0ZSAvIGNsZWFySW1tZWRpYXRlIChwYXJmb2lzIG1hbnF1YW50KVxuaWYgKHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIGdsb2JhbC5zZXRJbW1lZGlhdGUgPSAoZm4sIC4uLmFyZ3MpID0+IHNldFRpbWVvdXQoZm4sIDAsIC4uLmFyZ3MpO1xufVxuaWYgKHR5cGVvZiBjbGVhckltbWVkaWF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgZ2xvYmFsLmNsZWFySW1tZWRpYXRlID0gKGlkKSA9PiBjbGVhclRpbWVvdXQoaWQpO1xufVxuXG4vLyBNb2NrIGNvbXBsZXQgZXQgcm9idXN0ZSBkdSBtb2R1bGUgQW5pbWF0ZWRcbmplc3QubW9jaygncmVhY3QtbmF0aXZlJywgKCkgPT4ge1xuICBjb25zdCBSTiA9IGplc3QucmVxdWlyZUFjdHVhbCgncmVhY3QtbmF0aXZlJyk7XG5cbiAgLy8gTW9jayBBbmltYXRlZFxuICBSTi5BbmltYXRlZCA9IHtcbiAgICAuLi5STi5BbmltYXRlZCxcbiAgICBWYWx1ZTogamVzdC5mbigoKSA9PiAoe1xuICAgICAgaW50ZXJwb2xhdGU6IGplc3QuZm4oY29uZmlnID0+IGNvbmZpZy5vdXRwdXRSYW5nZVswXSksXG4gICAgICBhZGRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgcmVtb3ZlTGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICAgIHJlbW92ZUFsbExpc3RlbmVyczogamVzdC5mbigpLFxuICAgICAgc3RvcEFuaW1hdGlvbjogamVzdC5mbigpLFxuICAgICAgcmVzZXRBbmltYXRpb246IGplc3QuZm4oKSxcbiAgICAgIHNldFZhbHVlOiBqZXN0LmZuKCksXG4gICAgfSkpLFxuICAgIHRpbWluZzogamVzdC5mbigoKSA9PiAoe1xuICAgICAgc3RhcnQ6IGplc3QuZm4oY2FsbGJhY2sgPT4ge1xuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICBjYWxsYmFjayh7IGZpbmlzaGVkOiB0cnVlIH0pO1xuICAgICAgICB9XG4gICAgICB9KSxcbiAgICB9KSksXG4gIH07XG5cbiAgcmV0dXJuIFJOO1xufSk7XG4vLyBNb2NrIHJlYWN0LW5hdmlnYXRpb24gKMOgIGxhIGZpbiBkdSBmaWNoaWVyKVxuamVzdC5tb2NrKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnLCAoKSA9PiAoe1xuICAuLi5qZXN0LnJlcXVpcmVBY3R1YWwoJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScpLFxuICB1c2VOYXZpZ2F0aW9uOiAoKSA9PiAoe1xuICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXG4gICAgZ29CYWNrOiBqZXN0LmZuKCksXG4gICAgY2FuR29CYWNrOiAoKSA9PiB0cnVlLFxuICB9KSxcbn0pKTsiXSwibWFwcGluZ3MiOiJBQUtBQSxXQUFBLEdBQUtDLElBQUksQ0FBQywyQ0FBMkMsRUFBRTtFQUFBLE9BQ3JEQyxPQUFPLENBQUMsbUVBQW1FLENBQUM7QUFBQSxDQUM5RSxDQUFDO0FBR0RGLFdBQUEsR0FBS0MsSUFBSSxDQUFDLFdBQVcsRUFBRTtFQUFBLE9BQU87SUFDNUJFLFFBQVEsRUFBRSxTQUFWQSxRQUFRQSxDQUFBO01BQUEsT0FBUSxDQUFDLElBQUksQ0FBQztJQUFBO0lBQ3RCQyxRQUFRLEVBQUUsU0FBVkEsUUFBUUEsQ0FBQTtNQUFBLE9BQVEsSUFBSTtJQUFBO0VBQ3RCLENBQUM7QUFBQSxDQUFDLENBQUM7QUFHSEosV0FBQSxHQUFLQyxJQUFJLENBQUMsY0FBYyxFQUFFO0VBQUEsT0FBTztJQUMvQkksV0FBVyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQztFQUN2QixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBR0hQLFdBQUEsR0FBS0MsSUFBSSxDQUFDLHlCQUF5QixFQUFFLFlBQU07RUFDekMsSUFBTU8sVUFBVSxHQUFHTixPQUFPLENBQUMsOEJBQThCLENBQUM7RUFHMURNLFVBQVUsQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLEdBQUcsWUFBTSxDQUFDLENBQUM7RUFFbEMsT0FBT0YsVUFBVTtBQUNuQixDQUFDLENBQUM7QUFHRlIsV0FBQSxHQUFLQyxJQUFJLENBQUMsMENBQTBDLEVBQUU7RUFBQSxPQUFPO0lBQzNEVSxHQUFHLEVBQUVMLElBQUksQ0FBQ0MsRUFBRSxDQUFDO01BQUEsT0FBTSxPQUFPO0lBQUEsRUFBQztJQUMzQkssZ0JBQWdCLEVBQUVOLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDM0JNLG1CQUFtQixFQUFFUCxJQUFJLENBQUNDLEVBQUUsQ0FBQztFQUMvQixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBZ0JIUCxXQUFBLEdBQUtDLElBQUksQ0FBQyxjQUFjLEVBQUUsWUFBTTtFQUM5QixJQUFNYSxFQUFFLEdBQUdSLElBQUksQ0FBQ1MsYUFBYSxDQUFDLGNBQWMsQ0FBQztFQUc3Q0QsRUFBRSxDQUFDRSxRQUFRLEdBQUFDLE1BQUEsQ0FBQUMsTUFBQSxLQUNOSixFQUFFLENBQUNFLFFBQVE7SUFDZEcsS0FBSyxFQUFFYixJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFBLE9BQU87UUFDcEJhLFdBQVcsRUFBRWQsSUFBSSxDQUFDQyxFQUFFLENBQUMsVUFBQWMsTUFBTTtVQUFBLE9BQUlBLE1BQU0sQ0FBQ0MsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUFBLEVBQUM7UUFDckRDLFdBQVcsRUFBRWpCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7UUFDdEJpQixjQUFjLEVBQUVsQixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO1FBQ3pCa0Isa0JBQWtCLEVBQUVuQixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO1FBQzdCbUIsYUFBYSxFQUFFcEIsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztRQUN4Qm9CLGNBQWMsRUFBRXJCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7UUFDekJxQixRQUFRLEVBQUV0QixJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUNwQixDQUFDO0lBQUEsQ0FBQyxDQUFDO0lBQ0hzQixNQUFNLEVBQUV2QixJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFBLE9BQU87UUFDckJ1QixLQUFLLEVBQUV4QixJQUFJLENBQUNDLEVBQUUsQ0FBQyxVQUFBd0IsUUFBUSxFQUFJO1VBQ3pCLElBQUlBLFFBQVEsRUFBRTtZQUNaQSxRQUFRLENBQUM7Y0FBRUMsUUFBUSxFQUFFO1lBQUssQ0FBQyxDQUFDO1VBQzlCO1FBQ0YsQ0FBQztNQUNILENBQUM7SUFBQSxDQUFDO0VBQUMsRUFDSjtFQUVELE9BQU9sQixFQUFFO0FBQ1gsQ0FBQyxDQUFDO0FBRUZkLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDBCQUEwQixFQUFFO0VBQUEsT0FBQWdCLE1BQUEsQ0FBQUMsTUFBQSxLQUNqQ1osSUFBSSxDQUFDUyxhQUFhLENBQUMsMEJBQTBCLENBQUM7SUFDakRrQixhQUFhLEVBQUUsU0FBZkEsYUFBYUEsQ0FBQTtNQUFBLE9BQVM7UUFDcEJDLFFBQVEsRUFBRTVCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7UUFDbkI0QixNQUFNLEVBQUU3QixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCNkIsU0FBUyxFQUFFLFNBQVhBLFNBQVNBLENBQUE7VUFBQSxPQUFRLElBQUk7UUFBQTtNQUN2QixDQUFDO0lBQUE7RUFBQztBQUFBLENBQ0YsQ0FBQztBQW5GSCxJQUFBQyxZQUFBLEdBQUFuQyxPQUFBO0FBQTZDLFNBQUFGLFlBQUE7RUFBQSxJQUFBc0MsUUFBQSxHQUFBcEMsT0FBQTtJQUFBSSxJQUFBLEdBQUFnQyxRQUFBLENBQUFoQyxJQUFBO0VBQUFOLFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFNLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQW9DN0NpQywwQkFBYSxDQUFDQyxlQUFlLEdBQUdELDBCQUFhLENBQUNDLGVBQWUsSUFBSTtFQUMvREMsUUFBUSxFQUFFO0lBQUVDLFdBQVcsRUFBRTtFQUFRO0FBQ25DLENBQUM7QUFHRCxJQUFJLE9BQU9DLFlBQVksS0FBSyxXQUFXLEVBQUU7RUFDdkNDLE1BQU0sQ0FBQ0QsWUFBWSxHQUFHLFVBQUNwQyxFQUFFO0lBQUEsU0FBQXNDLElBQUEsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLEVBQUtDLElBQUksT0FBQUMsS0FBQSxDQUFBSixJQUFBLE9BQUFBLElBQUEsV0FBQUssSUFBQSxNQUFBQSxJQUFBLEdBQUFMLElBQUEsRUFBQUssSUFBQTtNQUFKRixJQUFJLENBQUFFLElBQUEsUUFBQUosU0FBQSxDQUFBSSxJQUFBO0lBQUE7SUFBQSxPQUFLQyxVQUFVLENBQUFDLEtBQUEsVUFBQzdDLEVBQUUsRUFBRSxDQUFDLEVBQUE4QyxNQUFBLENBQUtMLElBQUksRUFBQztFQUFBO0FBQ25FO0FBQ0EsSUFBSSxPQUFPTSxjQUFjLEtBQUssV0FBVyxFQUFFO0VBQ3pDVixNQUFNLENBQUNVLGNBQWMsR0FBRyxVQUFDQyxFQUFFO0lBQUEsT0FBS0MsWUFBWSxDQUFDRCxFQUFFLENBQUM7RUFBQTtBQUNsRCIsImlnbm9yZUxpc3QiOltdfQ==