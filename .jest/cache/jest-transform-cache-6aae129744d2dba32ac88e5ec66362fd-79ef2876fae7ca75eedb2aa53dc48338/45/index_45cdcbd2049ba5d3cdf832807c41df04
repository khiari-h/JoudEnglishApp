9e4ef442b38dc8fe5c2900c3dbdb3ef4
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _native = require("@react-navigation/native");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _ThemeContext = require("../../contexts/ThemeContext");
var _useRevisionManager2 = _interopRequireDefault(require("../../hooks/useRevisionManager"));
var _useRevisionData2 = _interopRequireDefault(require("../../hooks/useRevisionData"));
var _useQuizEngine = _interopRequireDefault(require("../../hooks/useQuizEngine"));
var _EmptyState = _interopRequireDefault(require("./components/EmptyState"));
var _QuizScreen = _interopRequireDefault(require("./components/QuizScreen"));
var _ResultScreen = _interopRequireDefault(require("./components/ResultScreen"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var _Dimensions$get = _reactNative.Dimensions.get('window'),
  width = _Dimensions$get.width;
var MIN_WORDS_FOR_REVISION_UNLOCK = 50;
var VocabularyRevision = function VocabularyRevision(_ref) {
  var route = _ref.route;
  var navigation = (0, _native.useNavigation)();
  var themeContext = (0, _react.useContext)(_ThemeContext.ThemeContext);
  var _useRevisionManager = (0, _useRevisionManager2.default)(),
    markRevisionCompleted = _useRevisionManager.markRevisionCompleted;
  var _ref2 = (route == null ? void 0 : route.params) || {},
    _ref2$level = _ref2.level,
    level = _ref2$level === void 0 ? "mixed" : _ref2$level,
    _ref2$questionsCount = _ref2.questionsCount,
    questionsCount = _ref2$questionsCount === void 0 ? 10 : _ref2$questionsCount,
    _ref2$source = _ref2.source,
    source = _ref2$source === void 0 ? 'manual' : _ref2$source;
  var colors = (themeContext == null ? void 0 : themeContext.colors) || {
    background: "#F8FAFC",
    surface: "#FFFFFF",
    text: "#1F2937",
    textSecondary: "#6B7280",
    primary: "#3B82F6"
  };
  var _useRevisionData = (0, _useRevisionData2.default)(level, questionsCount),
    revisionQuestions = _useRevisionData.revisionQuestions,
    isLoading = _useRevisionData.isLoading,
    error = _useRevisionData.error,
    stats = _useRevisionData.stats,
    hasEnoughWords = _useRevisionData.hasEnoughWords,
    canGenerateQuestions = _useRevisionData.canGenerateQuestions;
  var quizEngine = (0, _useQuizEngine.default)(revisionQuestions);
  var slideAnim = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
  var shakeAnim = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
  var handleGoBack = (0, _react.useCallback)(function () {
    return navigation.goBack();
  }, [navigation]);
  var triggerShakeAnimation = function triggerShakeAnimation() {
    shakeAnim.setValue(0);
    _reactNative.Animated.sequence([_reactNative.Animated.timing(shakeAnim, {
      toValue: 10,
      duration: 80,
      useNativeDriver: true
    }), _reactNative.Animated.timing(shakeAnim, {
      toValue: -10,
      duration: 80,
      useNativeDriver: true
    }), _reactNative.Animated.timing(shakeAnim, {
      toValue: 10,
      duration: 80,
      useNativeDriver: true
    }), _reactNative.Animated.timing(shakeAnim, {
      toValue: 0,
      duration: 80,
      useNativeDriver: true
    })]).start();
  };
  var handleContinue = (0, _react.useCallback)(function () {
    _reactNative.Animated.timing(slideAnim, {
      toValue: -width,
      duration: 300,
      useNativeDriver: true
    }).start(function () {
      quizEngine.goToNextQuestion();
      slideAnim.setValue(width);
      _reactNative.Animated.spring(slideAnim, {
        toValue: 0,
        speed: 12,
        bounciness: 5,
        useNativeDriver: true
      }).start();
    });
  }, [slideAnim, quizEngine, width]);
  var handleAnswer = (0, _react.useCallback)(function (choice) {
    if (quizEngine.showResult) return;
    var isCorrect = quizEngine.handleAnswer(choice);
    if (!isCorrect) {
      triggerShakeAnimation();
    }
  }, [quizEngine, triggerShakeAnimation]);
  var handleRestart = (0, _react.useCallback)(function () {
    quizEngine.handleRestart();
    slideAnim.setValue(0);
  }, [quizEngine, slideAnim]);
  var handleFinish = (0, _react.useCallback)(function () {
    if (markRevisionCompleted) {
      try {
        var result = markRevisionCompleted(revisionQuestions, quizEngine.score, quizEngine.totalQuestions);
        if (result && typeof result.then === 'function') {
          result.catch(function (error) {
            console.error('Erreur lors de la finalisation de la révision:', error);
          });
        }
      } catch (error) {
        console.error('Erreur lors de la finalisation de la révision:', error);
      }
    }
    navigation.goBack();
  }, [navigation, markRevisionCompleted, revisionQuestions, quizEngine.score, quizEngine.totalQuestions]);
  var renderContent = function renderContent() {
    if (isLoading) {
      return (0, _jsxRuntime.jsx)(_EmptyState.default, {
        type: "loading",
        message: "R\xE9cup\xE9ration de vos mots appris",
        colors: colors,
        localStyles: _style.default
      });
    }
    if (error) {
      return (0, _jsxRuntime.jsx)(_EmptyState.default, {
        type: "error",
        message: error,
        onAction: handleGoBack,
        colors: colors,
        localStyles: _style.default
      });
    }
    if (!canGenerateQuestions || !hasEnoughWords) {
      if (hasEnoughWords && !canGenerateQuestions) {
        return (0, _jsxRuntime.jsx)(_EmptyState.default, {
          type: "noWords",
          message: `Continuez d'apprendre pour diversifier les questions !\nUn quiz de ${questionsCount} questions ne peut pas être généré pour ce niveau.`,
          onAction: handleGoBack,
          colors: colors,
          localStyles: _style.default
        });
      }
      return (0, _jsxRuntime.jsx)(_EmptyState.default, {
        type: "locked",
        progress: stats.totalLearned,
        goal: MIN_WORDS_FOR_REVISION_UNLOCK,
        onAction: handleGoBack,
        colors: colors,
        localStyles: _style.default
      });
    }
    if (quizEngine.isFinished) {
      return (0, _jsxRuntime.jsx)(_ResultScreen.default, {
        score: quizEngine.score,
        totalQuestions: quizEngine.totalQuestions,
        source: source,
        handleRestart: handleRestart,
        handleFinish: handleFinish,
        localStyles: _style.default,
        colors: colors
      });
    }
    return (0, _jsxRuntime.jsx)(_QuizScreen.default, {
      quizEngine: quizEngine,
      onGoBack: handleGoBack,
      onAnswer: handleAnswer,
      onContinue: handleContinue,
      slideAnim: slideAnim,
      shakeAnim: shakeAnim,
      colors: colors,
      localStyles: _style.default
    });
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [_style.default.container, {
      backgroundColor: colors.background
    }],
    children: [(0, _jsxRuntime.jsx)(_reactNative.StatusBar, {
      barStyle: "dark-content",
      backgroundColor: colors.background
    }), renderContent()]
  });
};
VocabularyRevision.propTypes = {
  route: _propTypes.default.shape({
    params: _propTypes.default.shape({
      level: _propTypes.default.string,
      questionsCount: _propTypes.default.number,
      source: _propTypes.default.string
    })
  }).isRequired
};
var _default = exports.default = VocabularyRevision;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,