6408a82b2b34be611552aaa617b0c938
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useScrollViewOffset = void 0;
var _react = require("react");
var _useEvent = require("./useEvent");
var _useSharedValue = require("./useSharedValue");
var _PlatformChecker = require("../PlatformChecker");
var IS_WEB = (0, _PlatformChecker.isWeb)();
var useScrollViewOffset = exports.useScrollViewOffset = IS_WEB ? useScrollViewOffsetWeb : useScrollViewOffsetNative;
var _worklet_11808413640710_init_data = {
  code: "function useScrollViewOffsetTs1(){const{animatedRef,getWebScrollableElement,offset}=this.__closure;if(animatedRef){const element=getWebScrollableElement(animatedRef.current);offset.value=element.scrollLeft===0?element.scrollTop:element.scrollLeft;}}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\hook\\useScrollViewOffset.ts",
  sourceMap: "{\"version\":3,\"names\":[\"useScrollViewOffsetTs1\",\"animatedRef\",\"getWebScrollableElement\",\"offset\",\"__closure\",\"element\",\"current\",\"value\",\"scrollLeft\",\"scrollTop\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/hook/useScrollViewOffset.ts\"],\"mappings\":\"AAoCmC,SAAAA,sBAAMA,CAAA,QAAAC,WAAA,CAAAC,uBAAA,CAAAC,MAAA,OAAAC,SAAA,CAErC,GAAIH,WAAW,CAAE,CACf,KAAM,CAAAI,OAAO,CAAGH,uBAAuB,CAACD,WAAW,CAACK,OAAO,CAAC,CAE5DH,MAAM,CAACI,KAAK,CACVF,OAAO,CAACG,UAAU,GAAK,CAAC,CAAGH,OAAO,CAACI,SAAS,CAAGJ,OAAO,CAACG,UAAU,CACrE,CAEF\",\"ignoreList\":[]}",
  version: "3.16.7"
};
function useScrollViewOffsetWeb(animatedRef, providedOffset) {
  var internalOffset = (0, _useSharedValue.useSharedValue)(0);
  var offset = (0, _react.useRef)(providedOffset != null ? providedOffset : internalOffset).current;
  var eventHandler = (0, _react.useCallback)(function () {
    var _e = [new global.Error(), -4, -27];
    var useScrollViewOffsetTs1 = function useScrollViewOffsetTs1() {
      if (animatedRef) {
        var element = getWebScrollableElement(animatedRef.current);
        offset.value = element.scrollLeft === 0 ? element.scrollTop : element.scrollLeft;
      }
    };
    useScrollViewOffsetTs1.__closure = {
      animatedRef: animatedRef,
      getWebScrollableElement: getWebScrollableElement,
      offset: offset
    };
    useScrollViewOffsetTs1.__workletHash = 11808413640710;
    useScrollViewOffsetTs1.__initData = _worklet_11808413640710_init_data;
    useScrollViewOffsetTs1.__stackDetails = _e;
    return useScrollViewOffsetTs1;
  }(), [animatedRef, animatedRef == null ? void 0 : animatedRef.current]);
  (0, _react.useEffect)(function () {
    var element = animatedRef != null && animatedRef.current ? getWebScrollableElement(animatedRef.current) : null;
    if (element) {
      element.addEventListener('scroll', eventHandler);
    }
    return function () {
      if (element) {
        element.removeEventListener('scroll', eventHandler);
      }
    };
  }, [animatedRef, animatedRef == null ? void 0 : animatedRef.current, eventHandler]);
  return offset;
}
var _worklet_1312696806867_init_data = {
  code: "function useScrollViewOffsetTs2(event){const{offset}=this.__closure;offset.value=event.contentOffset.x===0?event.contentOffset.y:event.contentOffset.x;}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\hook\\useScrollViewOffset.ts",
  sourceMap: "{\"version\":3,\"names\":[\"useScrollViewOffsetTs2\",\"event\",\"offset\",\"__closure\",\"value\",\"contentOffset\",\"x\",\"y\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/hook/useScrollViewOffset.ts\"],\"mappings\":\"AA6EI,QAAC,CAAAA,sBAAiCA,CAAAC,KAAA,QAAAC,MAAA,OAAAC,SAAA,CAEhCD,MAAM,CAACE,KAAK,CACVH,KAAK,CAACI,aAAa,CAACC,CAAC,GAAK,CAAC,CACvBL,KAAK,CAACI,aAAa,CAACE,CAAC,CACrBN,KAAK,CAACI,aAAa,CAACC,CAAC,CAC7B\",\"ignoreList\":[]}",
  version: "3.16.7"
};
function useScrollViewOffsetNative(animatedRef, providedOffset) {
  var internalOffset = (0, _useSharedValue.useSharedValue)(0);
  var offset = (0, _react.useRef)(providedOffset != null ? providedOffset : internalOffset).current;
  var eventHandler = (0, _useEvent.useEvent)(function () {
    var _e = [new global.Error(), -2, -27];
    var useScrollViewOffsetTs2 = function useScrollViewOffsetTs2(event) {
      offset.value = event.contentOffset.x === 0 ? event.contentOffset.y : event.contentOffset.x;
    };
    useScrollViewOffsetTs2.__closure = {
      offset: offset
    };
    useScrollViewOffsetTs2.__workletHash = 1312696806867;
    useScrollViewOffsetTs2.__initData = _worklet_1312696806867_init_data;
    useScrollViewOffsetTs2.__stackDetails = _e;
    return useScrollViewOffsetTs2;
  }(), scrollNativeEventNames);
  (0, _react.useEffect)(function () {
    var _animatedRef$getTag;
    var elementTag = (_animatedRef$getTag = animatedRef == null ? void 0 : animatedRef.getTag()) != null ? _animatedRef$getTag : null;
    if (elementTag) {
      eventHandler.workletEventHandler.registerForEvents(elementTag);
    }
    return function () {
      if (elementTag) {
        eventHandler.workletEventHandler.unregisterFromEvents(elementTag);
      }
    };
  }, [animatedRef, animatedRef == null ? void 0 : animatedRef.current, eventHandler]);
  return offset;
}
function getWebScrollableElement(scrollComponent) {
  var _ref;
  return (_ref = scrollComponent == null ? void 0 : scrollComponent.getScrollableNode()) != null ? _ref : scrollComponent;
}
var scrollNativeEventNames = ['onScroll', 'onScrollBeginDrag', 'onScrollEndDrag', 'onMomentumScrollBegin', 'onMomentumScrollEnd'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,