9378174cfc8cb6c180bf894625a038b6
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  RN.ActivityIndicator = jest.fn(function () {
    return null;
  });
  return RN;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ButtonSpinner = _interopRequireDefault(require("../../../../src/components/ui/Button/ButtonSpinner"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ButtonSpinner', function () {
  beforeEach(function () {
    var _require = require('react-native'),
      ActivityIndicator = _require.ActivityIndicator;
    ActivityIndicator.mockClear();
  });
  it('devrait rendre un ActivityIndicator avec les props size et color', function () {
    var mockSize = 'large';
    var mockColor = '#FF0000';
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ButtonSpinner.default, {
      size: mockSize,
      color: mockColor
    }));
    var _require2 = require('react-native'),
      ActivityIndicator = _require2.ActivityIndicator;
    expect(ActivityIndicator).toHaveBeenCalledTimes(1);
    expect(ActivityIndicator).toHaveBeenCalledWith(expect.objectContaining({
      size: mockSize,
      color: mockColor
    }), {});
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJSTiIsImplc3QiLCJyZXF1aXJlQWN0dWFsIiwiQWN0aXZpdHlJbmRpY2F0b3IiLCJmbiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3JlYWN0IiwiX3JlYWN0TmF0aXZlIiwiX0J1dHRvblNwaW5uZXIiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlMyIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsIl9yZXF1aXJlIiwibW9ja0NsZWFyIiwiaXQiLCJtb2NrU2l6ZSIsIm1vY2tDb2xvciIsInJlbmRlciIsImpzeCIsImRlZmF1bHQiLCJzaXplIiwiY29sb3IiLCJfcmVxdWlyZTIiLCJleHBlY3QiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsIm9iamVjdENvbnRhaW5pbmciXSwic291cmNlcyI6WyJCdXR0b25TcGlubmVyLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgQnV0dG9uU3Bpbm5lciBmcm9tICcuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy91aS9CdXR0b24vQnV0dG9uU3Bpbm5lcic7XHJcblxyXG4vLyBUaGlzIGlzIHRoZSBtb3N0IHJlbGlhYmxlIHdheSB0byBtb2NrIGEgY29tcG9uZW50IGZyb20gJ3JlYWN0LW5hdGl2ZScuXHJcbi8vIFdlIGNyZWF0ZSBhIG1vY2sgYW5kIG1ha2Ugc3VyZSBpdCdzIGxvYWRlZCBiZWZvcmUgYW55dGhpbmcgZWxzZS5cclxuLy8gVGhlIGFjdHVhbCBtb2NrIGltcGxlbWVudGF0aW9uIHdpbGwgYmUgcGxhY2VkIGluIGEgX19tb2Nrc19fIGZvbGRlci5cclxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUnLCAoKSA9PiB7XHJcbiAgY29uc3QgUk4gPSBqZXN0LnJlcXVpcmVBY3R1YWwoJ3JlYWN0LW5hdGl2ZScpO1xyXG4gIC8vIFdlIGV4cGxpY2l0bHkgbW9jayBBY3Rpdml0eUluZGljYXRvciBhbmQgZW5zdXJlIGl0J3MgYSBzcHlhYmxlIGZ1bmN0aW9uXHJcbiAgUk4uQWN0aXZpdHlJbmRpY2F0b3IgPSBqZXN0LmZuKCgpID0+IG51bGwpO1xyXG4gIHJldHVybiBSTjtcclxufSk7XHJcblxyXG5kZXNjcmliZSgnQnV0dG9uU3Bpbm5lcicsICgpID0+IHtcclxuICAvLyBJdCdzIGEgZ29vZCBwcmFjdGljZSB0byBjbGVhciBtb2NrcyBiZWZvcmUgZWFjaCB0ZXN0XHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICAvLyBXZSBnZXQgdGhlIG1vY2tlZCBjb21wb25lbnQgaGVyZSB0byBhc3NlcnQgb24gaXRzIGNhbGxzXHJcbiAgICBjb25zdCB7IEFjdGl2aXR5SW5kaWNhdG9yIH0gPSByZXF1aXJlKCdyZWFjdC1uYXRpdmUnKTtcclxuICAgIEFjdGl2aXR5SW5kaWNhdG9yLm1vY2tDbGVhcigpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnZGV2cmFpdCByZW5kcmUgdW4gQWN0aXZpdHlJbmRpY2F0b3IgYXZlYyBsZXMgcHJvcHMgc2l6ZSBldCBjb2xvcicsICgpID0+IHtcclxuICAgIGNvbnN0IG1vY2tTaXplID0gJ2xhcmdlJztcclxuICAgIGNvbnN0IG1vY2tDb2xvciA9ICcjRkYwMDAwJztcclxuICAgIHJlbmRlcig8QnV0dG9uU3Bpbm5lciBzaXplPXttb2NrU2l6ZX0gY29sb3I9e21vY2tDb2xvcn0gLz4pO1xyXG4gICAgXHJcbiAgICAvLyBXZSBnZXQgdGhlIG1vY2tlZCBjb21wb25lbnQgZnJvbSB0aGUgcmVxdWlyZWQgbW9kdWxlXHJcbiAgICBjb25zdCB7IEFjdGl2aXR5SW5kaWNhdG9yIH0gPSByZXF1aXJlKCdyZWFjdC1uYXRpdmUnKTtcclxuICAgIGV4cGVjdChBY3Rpdml0eUluZGljYXRvcikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xyXG4gICAgZXhwZWN0KEFjdGl2aXR5SW5kaWNhdG9yKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcclxuICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xyXG4gICAgICAgIHNpemU6IG1vY2tTaXplLFxyXG4gICAgICAgIGNvbG9yOiBtb2NrQ29sb3IsXHJcbiAgICAgIH0pLFxyXG4gICAgICB7fVxyXG4gICAgKTtcclxuICB9KTtcclxufSk7Il0sIm1hcHBpbmdzIjoiQUFPQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsY0FBYyxFQUFFLFlBQU07RUFDOUIsSUFBTUMsRUFBRSxHQUFHQyxJQUFJLENBQUNDLGFBQWEsQ0FBQyxjQUFjLENBQUM7RUFFN0NGLEVBQUUsQ0FBQ0csaUJBQWlCLEdBQUdGLElBQUksQ0FBQ0csRUFBRSxDQUFDO0lBQUEsT0FBTSxJQUFJO0VBQUEsRUFBQztFQUMxQyxPQUFPSixFQUFFO0FBQ1gsQ0FBQyxDQUFDO0FBQUMsSUFBQUssc0JBQUEsR0FBQUMsT0FBQTtBQVpILElBQUFDLE1BQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFlBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLGNBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUErRSxJQUFBSSxXQUFBLEdBQUFKLE9BQUE7QUFBQSxTQUFBUixZQUFBO0VBQUEsSUFBQWEsU0FBQSxHQUFBTCxPQUFBO0lBQUFMLElBQUEsR0FBQVUsU0FBQSxDQUFBVixJQUFBO0VBQUFILFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFHLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQVkvRVcsUUFBUSxDQUFDLGVBQWUsRUFBRSxZQUFNO0VBRTlCQyxVQUFVLENBQUMsWUFBTTtJQUVmLElBQUFDLFFBQUEsR0FBOEJSLE9BQU8sQ0FBQyxjQUFjLENBQUM7TUFBN0NILGlCQUFpQixHQUFBVyxRQUFBLENBQWpCWCxpQkFBaUI7SUFDekJBLGlCQUFpQixDQUFDWSxTQUFTLENBQUMsQ0FBQztFQUMvQixDQUFDLENBQUM7RUFFRkMsRUFBRSxDQUFDLGtFQUFrRSxFQUFFLFlBQU07SUFDM0UsSUFBTUMsUUFBUSxHQUFHLE9BQU87SUFDeEIsSUFBTUMsU0FBUyxHQUFHLFNBQVM7SUFDM0IsSUFBQUMsbUJBQU0sRUFBQyxJQUFBVCxXQUFBLENBQUFVLEdBQUEsRUFBQ1gsY0FBQSxDQUFBWSxPQUFhO01BQUNDLElBQUksRUFBRUwsUUFBUztNQUFDTSxLQUFLLEVBQUVMO0lBQVUsQ0FBRSxDQUFDLENBQUM7SUFHM0QsSUFBQU0sU0FBQSxHQUE4QmxCLE9BQU8sQ0FBQyxjQUFjLENBQUM7TUFBN0NILGlCQUFpQixHQUFBcUIsU0FBQSxDQUFqQnJCLGlCQUFpQjtJQUN6QnNCLE1BQU0sQ0FBQ3RCLGlCQUFpQixDQUFDLENBQUN1QixxQkFBcUIsQ0FBQyxDQUFDLENBQUM7SUFDbERELE1BQU0sQ0FBQ3RCLGlCQUFpQixDQUFDLENBQUN3QixvQkFBb0IsQ0FDNUNGLE1BQU0sQ0FBQ0csZ0JBQWdCLENBQUM7TUFDdEJOLElBQUksRUFBRUwsUUFBUTtNQUNkTSxLQUFLLEVBQUVMO0lBQ1QsQ0FBQyxDQUFDLEVBQ0YsQ0FBQyxDQUNILENBQUM7RUFDSCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=