b2082e82a3f3b1f15786a11ebf4444de
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn()
  };
});
_getJestObj().mock('../../src/utils/constants', function () {
  return {
    STORAGE_KEYS: {
      LAST_ACTIVITY: 'last_activity'
    }
  };
});
_getJestObj().mock('../../src/utils/eventBus', function () {
  return {
    emit: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useLastActivity = _interopRequireDefault(require("../../src/hooks/useLastActivity"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useLastActivity', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    jest.spyOn(Date, 'now').mockReturnValue(1640995200000);
  });
  afterEach(function () {
    jest.restoreAllMocks();
  });
  it('devrait initialiser avec null', function () {
    _asyncStorage.default.getItem.mockResolvedValue(null);
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook.result;
    expect(result.current.lastActivity).toBeNull();
    expect(result.current.isLoading).toBe(true);
  });
  it('devrait charger une activit�� existante', (0, _asyncToGenerator2.default)(function* () {
    var mockActivity = {
      type: 'vocabulary',
      timestamp: 1640995200000 - 300000
    };
    _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify(mockActivity));
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook2.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.lastActivity).toBeDefined();
      expect(result.current.lastActivity.type).toBe('vocabulary');
      expect(result.current.isLoading).toBe(false);
    });
  }));
  it('devrait sauvegarder une nouvelle activité', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValue(null);
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook3.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    var activityData = {
      type: 'grammar',
      score: 85
    };
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.saveActivity(activityData);
    }));
    expect(_asyncStorage.default.setItem).toHaveBeenCalled();
  }));
  it('devrait avoir toutes les fonctions nécessaires', function () {
    _asyncStorage.default.getItem.mockResolvedValue(null);
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook4.result;
    expect(typeof result.current.saveActivity).toBe('function');
    expect(typeof result.current.clearActivity).toBe('function');
    expect(typeof result.current.reload).toBe('function');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,