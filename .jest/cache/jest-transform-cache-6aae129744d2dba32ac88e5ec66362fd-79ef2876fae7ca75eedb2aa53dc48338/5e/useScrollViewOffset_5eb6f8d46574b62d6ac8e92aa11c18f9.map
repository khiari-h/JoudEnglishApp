{"version":3,"names":["Object","defineProperty","exports","value","useScrollViewOffset","_react","require","_useEvent","_useSharedValue","_PlatformChecker","IS_WEB","isWeb","useScrollViewOffsetWeb","useScrollViewOffsetNative","_worklet_11808413640710_init_data","code","location","sourceMap","version","animatedRef","providedOffset","internalOffset","useSharedValue","offset","useRef","current","eventHandler","useCallback","_e","global","Error","useScrollViewOffsetTs1","element","getWebScrollableElement","scrollLeft","scrollTop","__closure","__workletHash","__initData","__stackDetails","useEffect","addEventListener","removeEventListener","_worklet_1312696806867_init_data","useEvent","useScrollViewOffsetTs2","event","contentOffset","x","y","scrollNativeEventNames","_animatedRef$getTag","elementTag","getTag","workletEventHandler","registerForEvents","unregisterFromEvents","scrollComponent","_ref","getScrollableNode"],"sources":["useScrollViewOffset.ts"],"sourcesContent":["'use strict';\nimport { useEffect, useRef, useCallback } from 'react';\nimport type { SharedValue } from '../commonTypes';\nimport type { EventHandlerInternal } from './useEvent';\nimport { useEvent } from './useEvent';\nimport { useSharedValue } from './useSharedValue';\nimport type { AnimatedScrollView } from '../component/ScrollView';\nimport type {\n  AnimatedRef,\n  RNNativeScrollEvent,\n  ReanimatedScrollEvent,\n} from './commonTypes';\nimport { isWeb } from '../PlatformChecker';\n\nconst IS_WEB = isWeb();\n\n/**\n * Lets you synchronously get the current offset of a `ScrollView`.\n *\n * @param animatedRef - An [animated\n *   ref](https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedRef)\n *   attached to an Animated.ScrollView component.\n * @returns A shared value which holds the current offset of the `ScrollView`.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/scroll/useScrollViewOffset\n */\nexport const useScrollViewOffset = IS_WEB\n  ? useScrollViewOffsetWeb\n  : useScrollViewOffsetNative;\n\nfunction useScrollViewOffsetWeb(\n  animatedRef: AnimatedRef<AnimatedScrollView> | null,\n  providedOffset?: SharedValue<number>\n): SharedValue<number> {\n  const internalOffset = useSharedValue(0);\n  const offset = useRef(providedOffset ?? internalOffset).current;\n\n  const eventHandler = useCallback(() => {\n    'worklet';\n    if (animatedRef) {\n      const element = getWebScrollableElement(animatedRef.current);\n      // scrollLeft is the X axis scrolled offset, works properly also with RTL layout\n      offset.value =\n        element.scrollLeft === 0 ? element.scrollTop : element.scrollLeft;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [animatedRef, animatedRef?.current]);\n\n  useEffect(() => {\n    const element = animatedRef?.current\n      ? getWebScrollableElement(animatedRef.current)\n      : null;\n\n    if (element) {\n      element.addEventListener('scroll', eventHandler);\n    }\n    return () => {\n      if (element) {\n        element.removeEventListener('scroll', eventHandler);\n      }\n    };\n    // React here has a problem with `animatedRef.current` since a Ref .current\n    // field shouldn't be used as a dependency. However, in this case we have\n    // to do it this way.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [animatedRef, animatedRef?.current, eventHandler]);\n\n  return offset;\n}\n\nfunction useScrollViewOffsetNative(\n  animatedRef: AnimatedRef<AnimatedScrollView> | null,\n  providedOffset?: SharedValue<number>\n): SharedValue<number> {\n  const internalOffset = useSharedValue(0);\n  const offset = useRef(providedOffset ?? internalOffset).current;\n\n  const eventHandler = useEvent<RNNativeScrollEvent>(\n    (event: ReanimatedScrollEvent) => {\n      'worklet';\n      offset.value =\n        event.contentOffset.x === 0\n          ? event.contentOffset.y\n          : event.contentOffset.x;\n    },\n    scrollNativeEventNames\n    // Read https://github.com/software-mansion/react-native-reanimated/pull/5056\n    // for more information about this cast.\n  ) as unknown as EventHandlerInternal<ReanimatedScrollEvent>;\n\n  useEffect(() => {\n    const elementTag = animatedRef?.getTag() ?? null;\n\n    if (elementTag) {\n      eventHandler.workletEventHandler.registerForEvents(elementTag);\n    }\n    return () => {\n      if (elementTag) {\n        eventHandler.workletEventHandler.unregisterFromEvents(elementTag);\n      }\n    };\n    // React here has a problem with `animatedRef.current` since a Ref .current\n    // field shouldn't be used as a dependency. However, in this case we have\n    // to do it this way.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [animatedRef, animatedRef?.current, eventHandler]);\n\n  return offset;\n}\n\nfunction getWebScrollableElement(\n  scrollComponent: AnimatedScrollView | null\n): HTMLElement {\n  return (\n    (scrollComponent?.getScrollableNode() as unknown as HTMLElement) ??\n    scrollComponent\n  );\n}\n\nconst scrollNativeEventNames = [\n  'onScroll',\n  'onScrollBeginDrag',\n  'onScrollEndDrag',\n  'onMomentumScrollBegin',\n  'onMomentumScrollEnd',\n];\n"],"mappings":"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","ignoreList":[]}