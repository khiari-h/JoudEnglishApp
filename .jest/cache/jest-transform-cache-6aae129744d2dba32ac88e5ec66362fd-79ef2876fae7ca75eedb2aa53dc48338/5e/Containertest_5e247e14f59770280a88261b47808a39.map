{"version":3,"names":["_getJestObj","mock","RN","jest","requireActual","StatusBar","Object","assign","setBarStyle","fn","setBackgroundColor","_require","require","View","SafeAreaView","_ref","children","style","edges","rest","_objectWithoutProperties2","default","_excluded","_jsxRuntime","jsx","testID","useSafeAreaInsets","top","bottom","left","right","useSafeAreaFrame","x","y","width","height","_interopRequireDefault","_react","_reactNative","_reactNative2","_reactNativeSafeAreaContext","_Container","_require2","describe","it","_render","render","Text","getByText","expect","toBeTruthy","_render2","getByTestId","_render3","safeArea","queryByTestId","UNSAFE_getByType","toBeNull","_render4","container","props","toHaveProperty","_render5","withPadding","not","_render6","withScrollView","ScrollView","_render7","scrollViewProps","keyboardShouldPersistTaps","toBe","_render8","queryByText","UNSAFE_queryByType","toHaveBeenCalledWith","withStatusBar","toHaveBeenCalled","statusBarColor","statusBarStyle","_render9","backgroundColor","_render0","safeAreaEdges","safeAreaView","toEqual"],"sources":["Container.test.js"],"sourcesContent":["// __tests__/components/layout/Container.test.js\nimport React from 'react';\nimport { render } from '@testing-library/react-native';\nimport { View, StatusBar, ScrollView } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport Container from '../../../src/components/layout/Container';\n\n// Mock StatusBar\njest.mock('react-native', () => {\n  const RN = jest.requireActual('react-native');\n  RN.StatusBar = {\n    ...RN.StatusBar,\n    setBarStyle: jest.fn(),\n    setBackgroundColor: jest.fn(),\n  };\n  return RN;\n});\n\n// Mock SafeAreaView from react-native-safe-area-context\njest.mock('react-native-safe-area-context', () => {\n  const { View } = require('react-native'); // Import View here\n  return {\n    SafeAreaView: ({ children, style, edges, ...rest }) => (\n      <View style={style} {...rest} testID=\"mock-safe-area-view\">\n        {children}\n      </View>\n    ),\n    useSafeAreaInsets: () => ({ top: 0, bottom: 0, left: 0, right: 0 }),\n    useSafeAreaFrame: () => ({ x: 0, y: 0, width: 320, height: 640 }),\n  };\n});\n\ndescribe('Container', () => {\n  it('renders children correctly', () => {\n    const { getByText } = render(<Container><Text>Hello World</Text></Container>);\n    expect(getByText('Hello World')).toBeTruthy();\n  });\n\n  it('uses SafeAreaView by default', () => {\n    const { getByTestId } = render(<Container />);\n    expect(getByTestId('mock-safe-area-view')).toBeTruthy();\n  });\n\n  it('uses View when safeArea is false', () => {\n    const { queryByTestId, UNSAFE_getByType } = render(<Container safeArea={false} />);\n    expect(queryByTestId('mock-safe-area-view')).toBeNull();\n    expect(UNSAFE_getByType(View)).toBeTruthy(); // Check if it renders a plain View\n  });\n\n  it('applies padding by default', () => {\n    const { getByTestId } = render(<Container />);\n    const container = getByTestId('mock-safe-area-view');\n    // Assuming styles.withPadding adds a specific padding value\n    // This test might need adjustment based on actual style implementation\n    // For now, we'll just check if the style prop is present\n    expect(container.props.style).toHaveProperty('paddingHorizontal', 20); // Example, adjust based on your style.js\n  });\n\n  it('does not apply padding when withPadding is false', () => {\n    const { getByTestId } = render(<Container withPadding={false} />);\n    const container = getByTestId('mock-safe-area-view');\n    expect(container.props.style).not.toHaveProperty('paddingHorizontal', 20); // Example, adjust based on your style.js\n  });\n\n  it('renders ScrollView when withScrollView is true', () => {\n    const { getByTestId, UNSAFE_getByType } = render(<Container withScrollView={true}><Text>Scrollable Content</Text></Container>);\n    expect(UNSAFE_getByType(ScrollView)).toBeTruthy();\n    expect(getByTestId('mock-safe-area-view')).toBeTruthy(); // Still wrapped by SafeAreaView\n    expect(getByText('Scrollable Content')).toBeTruthy();\n  });\n\n  it('passes scrollViewProps to ScrollView', () => {\n    const { UNSAFE_getByType } = render(\n      <Container withScrollView={true} scrollViewProps={{ keyboardShouldPersistTaps: 'always' }} />\n    );\n    expect(UNSAFE_getByType(ScrollView).props.keyboardShouldPersistTaps).toBe('always');\n  });\n\n  it('does not render ScrollView when withScrollView is false', () => {\n    const { queryByText, UNSAFE_queryByType } = render(<Container withScrollView={false}><Text>Static Content</Text></Container>);\n    expect(UNSAFE_queryByType(ScrollView)).toBeNull();\n    expect(queryByText('Static Content')).toBeTruthy();\n  });\n\n  it('renders StatusBar by default', () => {\n    render(<Container />);\n    expect(StatusBar.setBarStyle).toHaveBeenCalledWith('dark-content');\n    expect(StatusBar.setBackgroundColor).toHaveBeenCalledWith('#FFFFFF');\n  });\n\n  it('does not render StatusBar when withStatusBar is false', () => {\n    render(<Container withStatusBar={false} />);\n    expect(StatusBar.setBarStyle).not.toHaveBeenCalled();\n    expect(StatusBar.setBackgroundColor).not.toHaveBeenCalled();\n  });\n\n  it('applies custom statusBarColor and statusBarStyle', () => {\n    render(<Container statusBarColor=\"#FF0000\" statusBarStyle=\"light-content\" />);\n    expect(StatusBar.setBarStyle).toHaveBeenCalledWith('light-content');\n    expect(StatusBar.setBackgroundColor).toHaveBeenCalledWith('#FF0000');\n  });\n\n  it('applies custom backgroundColor', () => {\n    const { getByTestId } = render(<Container backgroundColor=\"#FF00FF\" />);\n    const container = getByTestId('mock-safe-area-view');\n    expect(container.props.style).toHaveProperty('backgroundColor', '#FF00FF');\n  });\n\n  it('passes safeAreaEdges to SafeAreaView', () => {\n    const { getByTestId } = render(<Container safeAreaEdges={['bottom']} />);\n    const safeAreaView = getByTestId('mock-safe-area-view');\n    expect(safeAreaView.props.edges).toEqual(['bottom']);\n  });\n});"],"mappings":"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","ignoreList":[]}