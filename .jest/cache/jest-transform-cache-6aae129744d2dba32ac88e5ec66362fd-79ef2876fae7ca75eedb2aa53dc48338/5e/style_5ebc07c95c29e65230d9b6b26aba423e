5880ce2bf838247610d36da553bd2304
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
function cov_244vdioltq() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\components\\ui\\RevealButton\\style.js";
  var hash = "bc6e0597c94831a890db5af6502b4cd94cd93655";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\components\\ui\\RevealButton\\style.js",
    statementMap: {
      "0": {
        start: {
          line: 11,
          column: 21
        },
        end: {
          line: 106,
          column: 4
        }
      },
      "1": {
        start: {
          line: 12,
          column: 2
        },
        end: {
          line: 106,
          column: 4
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 21
          },
          end: {
            line: 11,
            column: 22
          }
        },
        loc: {
          start: {
            line: 12,
            column: 2
          },
          end: {
            line: 106,
            column: 4
          }
        },
        line: 12
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 11,
            column: 22
          },
          end: {
            line: 11,
            column: 44
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 11,
            column: 35
          },
          end: {
            line: 11,
            column: 44
          }
        }],
        line: 11
      }
    },
    s: {
      "0": 0,
      "1": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bc6e0597c94831a890db5af6502b4cd94cd93655"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_244vdioltq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_244vdioltq();
cov_244vdioltq().s[0]++;
var createStyles = function createStyles() {
  var levelColor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (cov_244vdioltq().b[0][0]++, "#5E60CE");
  cov_244vdioltq().f[0]++;
  cov_244vdioltq().s[1]++;
  return _reactNative.StyleSheet.create({
    card: {
      marginBottom: 20,
      backgroundColor: 'white'
    },
    cardContent: {
      padding: 20
    },
    revealedContainer: {
      alignItems: 'center'
    },
    contentWrapper: {
      alignItems: 'center',
      marginBottom: 20,
      paddingHorizontal: 8
    },
    revealedText: {
      fontSize: 24,
      fontWeight: '700',
      textAlign: 'center',
      lineHeight: 32,
      letterSpacing: 0.4
    },
    hideButton: Object.assign({
      paddingVertical: 12,
      paddingHorizontal: 18,
      backgroundColor: 'white',
      borderRadius: 16,
      borderWidth: 1.5,
      borderColor: `${levelColor}25`,
      alignSelf: 'center'
    }, _reactNative.Platform.select({
      ios: {
        shadowColor: '#000',
        shadowOffset: {
          width: 0,
          height: 2
        },
        shadowOpacity: 0.08,
        shadowRadius: 8
      },
      android: {
        elevation: 3
      }
    })),
    hideButtonText: {
      fontSize: 15,
      fontWeight: '600',
      letterSpacing: 0.2
    },
    revealButtonContainer: Object.assign({
      borderRadius: 18,
      overflow: 'hidden',
      alignSelf: 'center'
    }, _reactNative.Platform.select({
      ios: {
        shadowColor: levelColor,
        shadowOffset: {
          width: 0,
          height: 4
        },
        shadowOpacity: 0.2,
        shadowRadius: 12
      },
      android: {
        elevation: 6
      }
    })),
    revealButton: {
      alignItems: 'center',
      justifyContent: 'center',
      paddingVertical: 16,
      paddingHorizontal: 28,
      borderRadius: 18
    },
    revealButtonText: {
      fontSize: 16,
      fontWeight: '700',
      color: 'white',
      letterSpacing: 0.3
    }
  });
};
var _default = exports.default = createStyles;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiY292XzI0NHZkaW9sdHEiLCJwYXRoIiwiaGFzaCIsImdsb2JhbCIsIkZ1bmN0aW9uIiwiZ2N2IiwiY292ZXJhZ2VEYXRhIiwic3RhdGVtZW50TWFwIiwic3RhcnQiLCJsaW5lIiwiY29sdW1uIiwiZW5kIiwiZm5NYXAiLCJuYW1lIiwiZGVjbCIsImxvYyIsImJyYW5jaE1hcCIsInR5cGUiLCJsb2NhdGlvbnMiLCJzIiwiZiIsImIiLCJfY292ZXJhZ2VTY2hlbWEiLCJjb3ZlcmFnZSIsImFjdHVhbENvdmVyYWdlIiwiY3JlYXRlU3R5bGVzIiwibGV2ZWxDb2xvciIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJjYXJkIiwibWFyZ2luQm90dG9tIiwiYmFja2dyb3VuZENvbG9yIiwiY2FyZENvbnRlbnQiLCJwYWRkaW5nIiwicmV2ZWFsZWRDb250YWluZXIiLCJhbGlnbkl0ZW1zIiwiY29udGVudFdyYXBwZXIiLCJwYWRkaW5nSG9yaXpvbnRhbCIsInJldmVhbGVkVGV4dCIsImZvbnRTaXplIiwiZm9udFdlaWdodCIsInRleHRBbGlnbiIsImxpbmVIZWlnaHQiLCJsZXR0ZXJTcGFjaW5nIiwiaGlkZUJ1dHRvbiIsIk9iamVjdCIsImFzc2lnbiIsInBhZGRpbmdWZXJ0aWNhbCIsImJvcmRlclJhZGl1cyIsImJvcmRlcldpZHRoIiwiYm9yZGVyQ29sb3IiLCJhbGlnblNlbGYiLCJQbGF0Zm9ybSIsInNlbGVjdCIsImlvcyIsInNoYWRvd0NvbG9yIiwic2hhZG93T2Zmc2V0Iiwid2lkdGgiLCJoZWlnaHQiLCJzaGFkb3dPcGFjaXR5Iiwic2hhZG93UmFkaXVzIiwiYW5kcm9pZCIsImVsZXZhdGlvbiIsImhpZGVCdXR0b25UZXh0IiwicmV2ZWFsQnV0dG9uQ29udGFpbmVyIiwib3ZlcmZsb3ciLCJyZXZlYWxCdXR0b24iLCJqdXN0aWZ5Q29udGVudCIsInJldmVhbEJ1dHRvblRleHQiLCJjb2xvciIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlcyI6WyJzdHlsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvY29tcG9uZW50cy91aS9SZXZlYWxCdXR0b24vc3R5bGUuanMgLSBERVNJR04gQkFCQkVMIDIwMjUg8J+Or1xuXG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBQbGF0Zm9ybSB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcblxuLyoqXG4gKiDwn5SYIFN0eWxlcyBCYWJiZWwgMjAyNSBwb3VyIFJldmVhbEJ1dHRvblxuICogLSBTaW1wbGUgZXQgY29ow6lyZW50IGF2ZWMgTmF2aWdhdGlvbkJ1dHRvbnNcbiAqIC0gUGFzIGRlIGTDqWxpcmUgc2hpbW1lci9nbGFzc21vcnBoaXNtXG4gKiAtIEp1c3RlIHByb3ByZSBldCBlZmZpY2FjZVxuICovXG5jb25zdCBjcmVhdGVTdHlsZXMgPSAobGV2ZWxDb2xvciA9IFwiIzVFNjBDRVwiKSA9PlxuICBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gICAgXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PSBDQVJEIENPTlRBSU5FUiA9PT09PT09PT09PT09PT09PT09XG4gICAgY2FyZDoge1xuICAgICAgbWFyZ2luQm90dG9tOiAyMCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICB9LFxuICAgIGNhcmRDb250ZW50OiB7XG4gICAgICBwYWRkaW5nOiAyMCxcbiAgICB9LFxuXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PSBDT05URU5VIFLDiVbDiUzDiSA9PT09PT09PT09PT09PT09PT09XG4gICAgcmV2ZWFsZWRDb250YWluZXI6IHtcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIH0sXG4gICAgXG4gICAgY29udGVudFdyYXBwZXI6IHtcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgbWFyZ2luQm90dG9tOiAyMCxcbiAgICAgIHBhZGRpbmdIb3Jpem9udGFsOiA4LFxuICAgIH0sXG4gICAgXG4gICAgcmV2ZWFsZWRUZXh0OiB7XG4gICAgICBmb250U2l6ZTogMjQsXG4gICAgICBmb250V2VpZ2h0OiAnNzAwJyxcbiAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICBsaW5lSGVpZ2h0OiAzMixcbiAgICAgIGxldHRlclNwYWNpbmc6IDAuNCxcbiAgICB9LFxuXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PSBCT1VUT04gSElERSAtIFN0eWxlIGdob3N0IGNvbW1lIFwiUHLDqWPDqWRlbnRcIiA9PT09PT09PT09PT09PT09PT09XG4gICAgaGlkZUJ1dHRvbjoge1xuICAgICAgcGFkZGluZ1ZlcnRpY2FsOiAxMixcbiAgICAgIHBhZGRpbmdIb3Jpem9udGFsOiAxOCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICAgIGJvcmRlclJhZGl1czogMTYsXG4gICAgICBib3JkZXJXaWR0aDogMS41LFxuICAgICAgYm9yZGVyQ29sb3I6IGAke2xldmVsQ29sb3J9MjVgLFxuICAgICAgYWxpZ25TZWxmOiAnY2VudGVyJyxcbiAgICAgIFxuICAgICAgLy8gT21icmUgc3VidGlsZSBjb21tZSBsZXMgYXV0cmVzIGJvdXRvbnNcbiAgICAgIC4uLlBsYXRmb3JtLnNlbGVjdCh7XG4gICAgICAgIGlvczoge1xuICAgICAgICAgIHNoYWRvd0NvbG9yOiAnIzAwMCcsXG4gICAgICAgICAgc2hhZG93T2Zmc2V0OiB7IHdpZHRoOiAwLCBoZWlnaHQ6IDIgfSxcbiAgICAgICAgICBzaGFkb3dPcGFjaXR5OiAwLjA4LFxuICAgICAgICAgIHNoYWRvd1JhZGl1czogOCxcbiAgICAgICAgfSxcbiAgICAgICAgYW5kcm9pZDoge1xuICAgICAgICAgIGVsZXZhdGlvbjogMyxcbiAgICAgICAgfSxcbiAgICAgIH0pLFxuICAgIH0sXG4gICAgXG4gICAgaGlkZUJ1dHRvblRleHQ6IHtcbiAgICAgIGZvbnRTaXplOiAxNSxcbiAgICAgIGZvbnRXZWlnaHQ6ICc2MDAnLFxuICAgICAgbGV0dGVyU3BhY2luZzogMC4yLFxuICAgIH0sXG5cbiAgICAvLyA9PT09PT09PT09PT09PT09PT09IEJPVVRPTiBSRVZFQUwgLSBTdHlsZSBjb2jDqXJlbnQgYXZlYyBcIlN1aXZhbnRcIiA9PT09PT09PT09PT09PT09PT09XG4gICAgcmV2ZWFsQnV0dG9uQ29udGFpbmVyOiB7XG4gICAgICBib3JkZXJSYWRpdXM6IDE4LFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgYWxpZ25TZWxmOiAnY2VudGVyJyxcbiAgICAgIFxuICAgICAgLy8gT21icmUgY29sb3LDqWUgY29tbWUgbGUgYm91dG9uIFwiU3VpdmFudFwiXG4gICAgICAuLi5QbGF0Zm9ybS5zZWxlY3Qoe1xuICAgICAgICBpb3M6IHtcbiAgICAgICAgICBzaGFkb3dDb2xvcjogbGV2ZWxDb2xvcixcbiAgICAgICAgICBzaGFkb3dPZmZzZXQ6IHsgd2lkdGg6IDAsIGhlaWdodDogNCB9LFxuICAgICAgICAgIHNoYWRvd09wYWNpdHk6IDAuMixcbiAgICAgICAgICBzaGFkb3dSYWRpdXM6IDEyLFxuICAgICAgICB9LFxuICAgICAgICBhbmRyb2lkOiB7XG4gICAgICAgICAgZWxldmF0aW9uOiA2LFxuICAgICAgICB9LFxuICAgICAgfSksXG4gICAgfSxcbiAgICBcbiAgICByZXZlYWxCdXR0b246IHtcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgcGFkZGluZ1ZlcnRpY2FsOiAxNixcbiAgICAgIHBhZGRpbmdIb3Jpem9udGFsOiAyOCxcbiAgICAgIGJvcmRlclJhZGl1czogMTgsXG4gICAgfSxcbiAgICBcbiAgICByZXZlYWxCdXR0b25UZXh0OiB7XG4gICAgICBmb250U2l6ZTogMTYsXG4gICAgICBmb250V2VpZ2h0OiAnNzAwJyxcbiAgICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgICAgbGV0dGVyU3BhY2luZzog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