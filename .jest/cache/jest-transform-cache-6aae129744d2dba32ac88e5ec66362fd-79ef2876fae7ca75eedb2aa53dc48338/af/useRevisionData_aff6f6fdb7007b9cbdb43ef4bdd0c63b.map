{"version":3,"names":["_react","require","_asyncStorage","_interopRequireDefault","_vocabularyDataHelper","useRevisionData","level","arguments","length","undefined","questionsCount","_useState","useState","_useState2","_slicedToArray2","default","allLearnedWords","setAllLearnedWords","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","error","setError","useEffect","loadLearnedWords","_ref","_asyncToGenerator2","learnedWords","levels","modes","_loop","levelKey","_loop2","mode","storageKey","stored","AsyncStorage","getItem","data","JSON","parse","completedWordsRefs","completedWords","Object","keys","originalData","getVocabularyData","exercises","v","entries","forEach","_ref2","_ref3","categoryIndex","wordRefs","Array","isArray","catIndex","parseInt","category","words","wordRef","wordIndex","timestamp","Date","now","foundIndex","findIndex","w","word","realWord","push","translation","definition","example","fromLevel","fromMode","uniqueId","storageError","console","_ret2","_ret","uniqueWords","filter","index","self","mainError","message","apply","revisionQuestions","useMemo","shuffledWords","_toConsumableArray2","sort","Math","random","selectedWords","slice","min","questionsWithChoices","map","otherWords","wrongAnswers","_fallbackData$exercis","fallbackData","needed","randomFallback","includes","concat","choices","assign","correctAnswer","stats","totalLearned","byLevel","byMode","questionsGenerated","hasEnoughWords","canGenerateQuestions","_default","exports"],"sources":["useRevisionData.js"],"sourcesContent":["// src/hooks/useRevisionData.js - HOOK POUR RÉCUPÉRER LES MOTS APPRIS\r\nimport { useState, useEffect, useMemo } from 'react';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { getVocabularyData } from '../utils/vocabulary/vocabularyDataHelper';\r\n\r\nconst useRevisionData = (level = \"mixed\", questionsCount = 10) => {\r\n  const [allLearnedWords, setAllLearnedWords] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // ========== RÉCUPÉRATION DES MOTS APPRIS ==========\r\n  useEffect(() => {\r\n    const loadLearnedWords = async () => {\r\n      \r\n      try {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        const learnedWords = [];\r\n        \r\n        const levels = level === \"mixed\" ? ['1', '2', '3', '4', '5', '6', 'bonus'] : [level];\r\n        const modes = ['classic', 'fast'];\r\n\r\n        for (const levelKey of levels) {\r\n          for (const mode of modes) {\r\n            const storageKey = `vocabulary_${levelKey}_${mode}`;\r\n            \r\n            try {\r\n              const stored = await AsyncStorage.getItem(storageKey);\r\n              if (!stored) {\r\n                continue;\r\n              }\r\n\r\n              const data = JSON.parse(stored);\r\n              const completedWordsRefs = data.completedWords || {};\r\n              \r\n              if (Object.keys(completedWordsRefs).length === 0) {\r\n                continue;\r\n              }\r\n              \r\n              // Récupérer les données originales du vocabulaire\r\n              const originalData = getVocabularyData(levelKey, mode);\r\n              if (!originalData?.exercises) {\r\n                // Pas de données originales pour ce niveau/mode\r\n                return;\r\n              }\r\n              \r\n              // Traiter chaque catégorie\r\n              Object.entries(completedWordsRefs).forEach(([categoryIndex, wordRefs]) => {\r\n                if (!Array.isArray(wordRefs) || wordRefs.length === 0) return;\r\n                \r\n                const catIndex = parseInt(categoryIndex);\r\n                const category = originalData.exercises[catIndex];\r\n                \r\n                if (!category?.words) {\r\n                  // Catégorie introuvable dans ce niveau/mode\r\n                  return;\r\n                }\r\n                \r\n                // Récupérer chaque mot appris\r\n                wordRefs.forEach((wordRef) => {\r\n                  let wordIndex; // skipcq: JS-0119 - Initialisation dépend de la logique ci-dessous\r\n                  let timestamp = Date.now();\r\n                  \r\n                  // Support nouveau format (objet avec wordIndex + timestamp)\r\n                  if (typeof wordRef === 'object' && wordRef.wordIndex !== undefined) {\r\n                    wordIndex = wordRef.wordIndex;\r\n                    timestamp = wordRef.timestamp || timestamp;\r\n                  } \r\n                  // Support ancien format (juste l'index)\r\n                  else if (typeof wordRef === 'number') {\r\n                    wordIndex = wordRef;\r\n                  }\r\n                  // Support très ancien format (string du mot)\r\n                  else if (typeof wordRef === 'string') {\r\n                    const foundIndex = category.words.findIndex(w => w.word === wordRef);\r\n                    if (foundIndex !== -1) wordIndex = foundIndex;\r\n                  }\r\n                  \r\n                  // Récupérer le vrai mot depuis les données originales\r\n                  if (wordIndex !== undefined && category.words[wordIndex]) {\r\n                    const realWord = category.words[wordIndex];\r\n                    learnedWords.push({\r\n                      // Données du mot\r\n                      word: realWord.word,\r\n                      translation: realWord.translation,\r\n                      definition: realWord.definition || '',\r\n                      example: realWord.example || '',\r\n                      \r\n                      // Métadonnées\r\n                      fromLevel: levelKey,\r\n                      fromMode: mode,\r\n                      categoryIndex: catIndex,\r\n                      wordIndex,\r\n                      timestamp,\r\n                      \r\n                      // ID unique pour éviter doublons\r\n                      uniqueId: `${levelKey}_${mode}_${catIndex}_${wordIndex}`\r\n                    });\r\n                    \r\n                  } else {\r\n                    // WordIndex introuvable dans la catégorie\r\n                  }\r\n                });\r\n              });\r\n              \r\n            } catch (storageError) {\r\n              console.error(`❌ Erreur traitement ${storageKey}:`, storageError);\r\n            }\r\n          }\r\n        }\r\n        \r\n        // Supprimer les doublons potentiels basés sur uniqueId\r\n        const uniqueWords = learnedWords.filter((word, index, self) => \r\n          index === self.findIndex(w => w.uniqueId === word.uniqueId)\r\n        );\r\n        \r\n        setAllLearnedWords(uniqueWords);\r\n        \r\n      } catch (mainError) {\r\n        console.error('❌ Erreur générale useRevisionData:', mainError);\r\n        setError(mainError.message);\r\n        setAllLearnedWords([]);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    loadLearnedWords();\r\n  }, [level]); // Recharger si le niveau change\r\n\r\n  // ========== GÉNÉRATION DES QUESTIONS ==========\r\n  const revisionQuestions = useMemo(() => {\r\n    if (allLearnedWords.length === 0) return [];\r\n\r\n    // Mélanger et sélectionner\r\n    const shuffledWords = [...allLearnedWords].sort(() => Math.random() - 0.5);\r\n    const selectedWords = shuffledWords.slice(0, Math.min(questionsCount, allLearnedWords.length));\r\n    \r\n    // Générer les choix pour chaque question\r\n    const questionsWithChoices = selectedWords.map((word) => {\r\n      // Pool des autres mots pour les mauvaises réponses\r\n      const otherWords = allLearnedWords.filter(w => w.uniqueId !== word.uniqueId);\r\n      \r\n      // Prendre 3 mauvaises réponses\r\n      let wrongAnswers = otherWords\r\n        .sort(() => Math.random() - 0.5)\r\n        .slice(0, 3)\r\n        .map(w => w.translation);\r\n      \r\n      // Si pas assez de mauvaises réponses, compléter avec dataset de fallback\r\n      if (wrongAnswers.length < 3) {\r\n        const fallbackData = getVocabularyData('1', 'classic');\r\n        if (fallbackData?.exercises?.[0]?.words) {\r\n          const needed = 3 - wrongAnswers.length;\r\n          const randomFallback = fallbackData.exercises[0].words\r\n            .sort(() => Math.random() - 0.5)\r\n            .filter(w => !wrongAnswers.includes(w.translation) && w.translation !== word.translation)\r\n            .slice(0, needed)\r\n            .map(w => w.translation);\r\n          \r\n          wrongAnswers = [...wrongAnswers, ...randomFallback];\r\n        }\r\n      }\r\n      \r\n      // Mélanger toutes les réponses\r\n      const choices = [word.translation, ...wrongAnswers.slice(0, 3)]\r\n        .sort(() => Math.random() - 0.5);\r\n      \r\n      return {\r\n        ...word,\r\n        choices,\r\n        correctAnswer: word.translation\r\n      };\r\n    });\r\n\r\n    return questionsWithChoices;\r\n    \r\n  }, [allLearnedWords, questionsCount]);\r\n\r\n  // ========== STATISTIQUES ==========\r\n  const stats = useMemo(() => {\r\n    const totalLearned = allLearnedWords.length;\r\n    const byLevel = {};\r\n    const byMode = {};\r\n    \r\n    allLearnedWords.forEach(word => {\r\n      byLevel[word.fromLevel] = (byLevel[word.fromLevel] || 0) + 1;\r\n      byMode[word.fromMode] = (byMode[word.fromMode] || 0) + 1;\r\n    });\r\n    \r\n    return {\r\n      totalLearned,\r\n      byLevel,\r\n      byMode,\r\n      questionsGenerated: revisionQuestions.length\r\n    };\r\n  }, [allLearnedWords, revisionQuestions]);\r\n\r\n  return {\r\n    // Données principales\r\n    allLearnedWords,\r\n    revisionQuestions,\r\n    \r\n    // État\r\n    isLoading,\r\n    error,\r\n    \r\n    // Statistiques\r\n    stats,\r\n    \r\n    // Méthodes utiles\r\n    hasEnoughWords: allLearnedWords.length > 0,\r\n    canGenerateQuestions: revisionQuestions.length > 0\r\n  };\r\n};\r\n\r\nexport default useRevisionData;"],"mappings":"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","ignoreList":[]}