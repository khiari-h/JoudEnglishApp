032594eaee8836f9d59739faf79b81f0
_getJestObj().mock('@react-native-async-storage/async-storage');
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _useErrorCorrection = _interopRequireDefault(require("../src/screens/exercises/errorCorrection/hooks/useErrorCorrection"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockErrorCorrectionData = {
  categories: [{
    id: 1,
    name: 'Tenses'
  }, {
    id: 2,
    name: 'Prepositions'
  }],
  exercises: [{
    id: 101,
    categoryId: 1,
    text: 'I has a car.',
    correctedText: 'I have a car.',
    errorPositions: [1]
  }, {
    id: 102,
    categoryId: 1,
    text: 'She go to school.',
    correctedText: 'She goes to school.',
    errorPositions: [1],
    choices: ['She go to school.', 'She goes to school.', 'She going to school.'],
    correctChoiceIndex: 1
  }, {
    id: 201,
    categoryId: 2,
    text: 'He is good on math.',
    correctedText: 'He is good at math.',
    errorPositions: [3]
  }]
};
describe('useErrorCorrection Hook', function () {
  var alertSpy;
  beforeEach(function () {
    _asyncStorage.default.clear();
    alertSpy = jest.spyOn(_reactNative2.Alert, 'alert').mockImplementation(function () {});
  });
  afterEach(function () {
    alertSpy.mockRestore();
  });
  it('should initialize with the first category and exercise', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useErrorCorrection.default)(mockErrorCorrectionData, 'A1');
      }),
      result = _renderHook.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
    expect(result.current.loaded).toBe(true);
    expect(result.current.selectedCategory).toBe(1);
    expect(result.current.currentExercise.id).toBe(101);
  }));
  describe('checkAnswer function', function () {
    it('should handle correct answer in "full" mode', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useErrorCorrection.default)(mockErrorCorrectionData, 'A1');
        }),
        result = _renderHook2.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
      (0, _reactNative.act)(function () {
        result.current.startExercise('full');
        result.current.setUserCorrection('I have a car.');
      });
      (0, _reactNative.act)(function () {
        result.current.checkAnswer();
      });
      expect(result.current.isCorrect).toBe(true);
      expect(result.current.showFeedback).toBe(true);
      expect(result.current.score).toBe(1);
    }));
    it('should handle incorrect answer in "full" mode', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useErrorCorrection.default)(mockErrorCorrectionData, 'A1');
        }),
        result = _renderHook3.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
      (0, _reactNative.act)(function () {
        result.current.startExercise('full');
        result.current.setUserCorrection('I having a car.');
      });
      (0, _reactNative.act)(function () {
        result.current.checkAnswer();
      });
      expect(result.current.isCorrect).toBe(false);
      expect(result.current.showFeedback).toBe(true);
      expect(result.current.score).toBe(0);
    }));
    it('should handle correct answer in "identify" mode', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useErrorCorrection.default)(mockErrorCorrectionData, 'A1');
        }),
        result = _renderHook4.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
      (0, _reactNative.act)(function () {
        result.current.startExercise('identify');
      });
      (0, _reactNative.act)(function () {
        result.current.handleWordPress(1);
      });
      (0, _reactNative.act)(function () {
        result.current.checkAnswer();
      });
      expect(result.current.isCorrect).toBe(true);
      expect(result.current.score).toBe(1);
    }));
    it('should handle incorrect answer in "identify" mode', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useErrorCorrection.default)(mockErrorCorrectionData, 'A1');
        }),
        result = _renderHook5.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
      (0, _reactNative.act)(function () {
        result.current.startExercise('identify');
      });
      (0, _reactNative.act)(function () {
        result.current.handleWordPress(0);
      });
      (0, _reactNative.act)(function () {
        result.current.checkAnswer();
      });
      expect(result.current.isCorrect).toBe(false);
      expect(result.current.score).toBe(0);
    }));
    it('should handle correct answer in "multiple_choice" mode', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useErrorCorrection.default)(mockErrorCorrectionData, 'A1');
        }),
        result = _renderHook6.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
      (0, _reactNative.act)(function () {
        result.current.handleNext();
      });
      (0, _reactNative.act)(function () {
        result.current.startExercise('multiple_choice');
        result.current.handleChoiceSelect(1);
      });
      (0, _reactNative.act)(function () {
        result.current.checkAnswer();
      });
      expect(result.current.isCorrect).toBe(true);
      expect(result.current.score).toBe(1);
    }));
    it('should handle incorrect answer in "multiple_choice" mode', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _useErrorCorrection.default)(mockErrorCorrectionData, 'A1');
        }),
        result = _renderHook7.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
      (0, _reactNative.act)(function () {
        result.current.handleNext();
      });
      (0, _reactNative.act)(function () {
        result.current.startExercise('multiple_choice');
        result.current.handleChoiceSelect(0);
      });
      (0, _reactNative.act)(function () {
        result.current.checkAnswer();
      });
      expect(result.current.isCorrect).toBe(false);
      expect(result.current.score).toBe(0);
    }));
  });
  describe('Navigation and Progress', function () {
    it('should navigate to the next exercise with handleNext and mark as complete', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useErrorCorrection.default)(mockErrorCorrectionData, 'A1');
        }),
        result = _renderHook8.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
      expect(result.current.currentExercise.id).toBe(101);
      (0, _reactNative.act)(function () {
        result.current.handleNext();
      });
      expect(result.current.currentExercise.id).toBe(102);
      expect(result.current.completedExercises[1]).toContain(0);
    }));
    it('should navigate to the previous exercise with handlePrevious', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _useErrorCorrection.default)(mockErrorCorrectionData, 'A1');
        }),
        result = _renderHook9.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
      (0, _reactNative.act)(function () {
        result.current.handleNext();
      });
      expect(result.current.currentExercise.id).toBe(102);
      (0, _reactNative.act)(function () {
        result.current.handlePrevious();
      });
      expect(result.current.currentExercise.id).toBe(101);
    }));
    it('should navigate to the next category when the current one is finished', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook0 = (0, _reactNative.renderHook)(function () {
          return (0, _useErrorCorrection.default)(mockErrorCorrectionData, 'A1');
        }),
        result = _renderHook0.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
      (0, _reactNative.act)(function () {
        result.current.handleNext();
      });
      (0, _reactNative.act)(function () {
        result.current.handleNext();
      });
      expect(result.current.selectedCategory).toBe(2);
      expect(result.current.currentExercise.id).toBe(201);
    }));
  });
  describe('Persistence with AsyncStorage', function () {
    it('should save progress and restore it on re-initialization', (0, _asyncToGenerator2.default)(function* () {
      var level = 'A1';
      var _renderHook1 = (0, _reactNative.renderHook)(function () {
          return (0, _useErrorCorrection.default)(mockErrorCorrectionData, level);
        }),
        result = _renderHook1.result,
        unmount = _renderHook1.unmount;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
      (0, _reactNative.act)(function () {
        result.current.handleNext();
      });
      expect(result.current.currentExercise.id).toBe(102);
      expect(result.current.completedExercises[1]).toContain(0);
      unmount();
      var _renderHook10 = (0, _reactNative.renderHook)(function () {
          return (0, _useErrorCorrection.default)(mockErrorCorrectionData, level);
        }),
        result2 = _renderHook10.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
      expect(result2.current.loaded).toBe(true);
      expect(result2.current.currentExercise.id).toBe(102);
      expect(result2.current.completedExercises[1]).toContain(0);
      expect(result2.current.selectedCategory).toBe(1);
    }));
  });
  describe('Completion and Category Selection', function () {
    it('should set isFinished to true when all exercises are completed', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook11 = (0, _reactNative.renderHook)(function () {
          return (0, _useErrorCorrection.default)(mockErrorCorrectionData, 'A1');
        }),
        result = _renderHook11.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
      (0, _reactNative.act)(function () {
        result.current.handleNext();
      });
      (0, _reactNative.act)(function () {
        result.current.handleNext();
      });
      (0, _reactNative.act)(function () {
        result.current.handleNext();
      });
      expect(result.current.isFinished).toBe(true);
    }));
    it('should switch to the correct category and exercise when changeCategory is called', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook12 = (0, _reactNative.renderHook)(function () {
          return (0, _useErrorCorrection.default)(mockErrorCorrectionData, 'A1');
        }),
        result = _renderHook12.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
      expect(result.current.selectedCategory).toBe(1);
      expect(result.current.currentExercise.id).toBe(101);
      (0, _reactNative.act)(function () {
        result.current.changeCategory(2);
      });
      expect(result.current.selectedCategory).toBe(2);
      expect(result.current.currentExercise.id).toBe(201);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,