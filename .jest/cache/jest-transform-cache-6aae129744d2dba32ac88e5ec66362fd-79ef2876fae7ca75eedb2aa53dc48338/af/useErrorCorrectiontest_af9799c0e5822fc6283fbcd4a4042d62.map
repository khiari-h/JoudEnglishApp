{"version":3,"names":["_getJestObj","mock","_interopRequireDefault","require","_asyncToGenerator2","_reactNative","_reactNative2","_useErrorCorrection","_asyncStorage","_require","jest","mockErrorCorrectionData","categories","id","name","exercises","categoryId","text","correctedText","errorPositions","choices","correctChoiceIndex","describe","alertSpy","beforeEach","AsyncStorage","clear","spyOn","Alert","mockImplementation","afterEach","mockRestore","it","default","_renderHook","renderHook","useErrorCorrection","result","act","expect","current","loaded","toBe","selectedCategory","currentExercise","_renderHook2","startExercise","setUserCorrection","checkAnswer","isCorrect","showFeedback","score","_renderHook3","_renderHook4","handleWordPress","_renderHook5","_renderHook6","handleNext","handleChoiceSelect","_renderHook7","_renderHook8","completedExercises","toContain","_renderHook9","handlePrevious","_renderHook0","level","_renderHook1","unmount","_renderHook10","result2","_renderHook11","isFinished","_renderHook12","changeCategory"],"sources":["useErrorCorrection.test.js"],"sourcesContent":["import { renderHook, act } from '@testing-library/react-native';\r\nimport { Alert } from 'react-native';\r\nimport useErrorCorrection from '../src/screens/exercises/errorCorrection/hooks/useErrorCorrection';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\n// Le mock d'AsyncStorage est déjà dans jest.setup.js, mais c'est une bonne pratique de l'avoir ici aussi pour la clarté.\r\njest.mock('@react-native-async-storage/async-storage');\r\n\r\n// Données de test minimales pour le hook\r\nconst mockErrorCorrectionData = {\r\n  categories: [\r\n    { id: 1, name: 'Tenses' },\r\n    { id: 2, name: 'Prepositions' },\r\n  ],\r\n  exercises: [\r\n    { \r\n      id: 101, categoryId: 1, text: 'I has a car.', correctedText: 'I have a car.', errorPositions: [1] \r\n    },\r\n    { \r\n      id: 102, categoryId: 1, text: 'She go to school.', correctedText: 'She goes to school.', errorPositions: [1], \r\n      choices: ['She go to school.', 'She goes to school.', 'She going to school.'], correctChoiceIndex: 1 \r\n    },\r\n    { \r\n      id: 201, categoryId: 2, text: 'He is good on math.', correctedText: 'He is good at math.', errorPositions: [3] \r\n    },\r\n  ],\r\n};\r\n\r\ndescribe('useErrorCorrection Hook', () => {\r\n  let alertSpy;\r\n\r\n  beforeEach(() => {\r\n    // S'assure que le stockage est vide avant chaque test\r\n    AsyncStorage.clear();\r\n    // Empêche Alert.alert de bloquer les tests et nettoie les appels précédents\r\n    alertSpy = jest.spyOn(Alert, 'alert').mockImplementation(() => {});\r\n  });\r\n\r\n  afterEach(() => {\r\n    // Restaure l'implémentation originale après chaque test\r\n    alertSpy.mockRestore();\r\n  });\r\n\r\n  it('should initialize with the first category and exercise', async () => {\r\n    // On \"rend\" le hook avec nos données de test\r\n    const { result } = renderHook(() => useErrorCorrection(mockErrorCorrectionData, 'A1'));\r\n\r\n    // On attend que le hook ait fini de charger ses données asynchrones\r\n    await act(async () => {\r\n      // Cette attente est nécessaire pour que les useEffect asynchrones se terminent\r\n    });\r\n\r\n    expect(result.current.loaded).toBe(true);\r\n    expect(result.current.selectedCategory).toBe(1); // L'ID de la première catégorie\r\n    expect(result.current.currentExercise.id).toBe(101); // L'ID du premier exercice de cette catégorie\r\n  });\r\n\r\n  describe('checkAnswer function', () => {\r\n    it('should handle correct answer in \"full\" mode', async () => {\r\n      const { result } = renderHook(() => useErrorCorrection(mockErrorCorrectionData, 'A1'));\r\n      \r\n      await act(async () => { /* wait for init */ });\r\n      \r\n      act(() => {\r\n        result.current.startExercise('full');\r\n        result.current.setUserCorrection('I have a car.');\r\n      });\r\n\r\n      act(() => {\r\n        result.current.checkAnswer();\r\n      });\r\n\r\n      expect(result.current.isCorrect).toBe(true);\r\n      expect(result.current.showFeedback).toBe(true);\r\n      expect(result.current.score).toBe(1);\r\n    });\r\n\r\n    it('should handle incorrect answer in \"full\" mode', async () => {\r\n      const { result } = renderHook(() => useErrorCorrection(mockErrorCorrectionData, 'A1'));\r\n\r\n      await act(async () => { /* wait for init */ });\r\n\r\n      act(() => {\r\n        result.current.startExercise('full');\r\n        result.current.setUserCorrection('I having a car.'); // Incorrect\r\n      });\r\n\r\n      act(() => {\r\n        result.current.checkAnswer();\r\n      });\r\n\r\n      expect(result.current.isCorrect).toBe(false);\r\n      expect(result.current.showFeedback).toBe(true);\r\n      expect(result.current.score).toBe(0);\r\n    });\r\n\r\n    it('should handle correct answer in \"identify\" mode', async () => {\r\n      const { result } = renderHook(() => useErrorCorrection(mockErrorCorrectionData, 'A1'));\r\n      await act(async () => { /* wait for init */ });\r\n\r\n      act(() => {\r\n        result.current.startExercise('identify');\r\n      });\r\n\r\n      act(() => {\r\n        // L'erreur dans l'exercice 101 est sur le mot à l'index 1 (\"has\")\r\n        result.current.handleWordPress(1); \r\n      });\r\n\r\n      act(() => {\r\n        result.current.checkAnswer();\r\n      });\r\n\r\n      expect(result.current.isCorrect).toBe(true);\r\n      expect(result.current.score).toBe(1);\r\n    });\r\n\r\n    it('should handle incorrect answer in \"identify\" mode', async () => {\r\n      const { result } = renderHook(() => useErrorCorrection(mockErrorCorrectionData, 'A1'));\r\n      await act(async () => { /* wait for init */ });\r\n\r\n      act(() => {\r\n        result.current.startExercise('identify');\r\n      });\r\n\r\n      act(() => {\r\n        // L'utilisateur sélectionne le mauvais mot (index 0)\r\n        result.current.handleWordPress(0); \r\n      });\r\n\r\n      act(() => {\r\n        result.current.checkAnswer();\r\n      });\r\n\r\n      expect(result.current.isCorrect).toBe(false);\r\n      expect(result.current.score).toBe(0);\r\n    });\r\n\r\n    it('should handle correct answer in \"multiple_choice\" mode', async () => {\r\n      const { result } = renderHook(() => useErrorCorrection(mockErrorCorrectionData, 'A1'));\r\n      await act(async () => { /* wait for init */ });\r\n\r\n      // On passe à l'exercice suivant qui a des choix multiples\r\n      act(() => { result.current.handleNext(); });\r\n      \r\n      act(() => {\r\n        result.current.startExercise('multiple_choice');\r\n        // Le bon choix pour l'exercice 102 est à l'index 1\r\n        result.current.handleChoiceSelect(1);\r\n      });\r\n\r\n      act(() => { result.current.checkAnswer(); });\r\n\r\n      expect(result.current.isCorrect).toBe(true);\r\n      expect(result.current.score).toBe(1);\r\n    });\r\n\r\n    it('should handle incorrect answer in \"multiple_choice\" mode', async () => {\r\n      const { result } = renderHook(() => useErrorCorrection(mockErrorCorrectionData, 'A1'));\r\n      await act(async () => { /* wait for init */ });\r\n\r\n      act(() => { result.current.handleNext(); });\r\n      act(() => { result.current.startExercise('multiple_choice'); result.current.handleChoiceSelect(0); });\r\n      act(() => { result.current.checkAnswer(); });\r\n\r\n      expect(result.current.isCorrect).toBe(false);\r\n      expect(result.current.score).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('Navigation and Progress', () => {\r\n    it('should navigate to the next exercise with handleNext and mark as complete', async () => {\r\n      const { result } = renderHook(() => useErrorCorrection(mockErrorCorrectionData, 'A1'));\r\n      await act(async () => { /* wait for init */ });\r\n\r\n      expect(result.current.currentExercise.id).toBe(101);\r\n\r\n      act(() => {\r\n        result.current.handleNext();\r\n      });\r\n\r\n      expect(result.current.currentExercise.id).toBe(102);\r\n      // Vérifie que l'exercice précédent (index 0) est marqué comme complété pour la catégorie 1\r\n      expect(result.current.completedExercises[1]).toContain(0);\r\n    });\r\n\r\n    it('should navigate to the previous exercise with handlePrevious', async () => {\r\n      const { result } = renderHook(() => useErrorCorrection(mockErrorCorrectionData, 'A1'));\r\n      await act(async () => { /* wait for init */ });\r\n\r\n      act(() => {\r\n        result.current.handleNext();\r\n      });\r\n\r\n      expect(result.current.currentExercise.id).toBe(102);\r\n\r\n      act(() => {\r\n        result.current.handlePrevious();\r\n      });\r\n\r\n      expect(result.current.currentExercise.id).toBe(101);\r\n    });\r\n\r\n    it('should navigate to the next category when the current one is finished', async () => {\r\n      const { result } = renderHook(() => useErrorCorrection(mockErrorCorrectionData, 'A1'));\r\n      await act(async () => { /* wait for init */ });\r\n\r\n      // Passe le premier exercice\r\n      act(() => { result.current.handleNext(); });\r\n      // Passe le deuxième (et dernier) exercice de la catégorie 1\r\n      act(() => { result.current.handleNext(); });\r\n\r\n      // Doit maintenant être dans la catégorie 2, au premier exercice\r\n      expect(result.current.selectedCategory).toBe(2);\r\n      expect(result.current.currentExercise.id).toBe(201);\r\n    });\r\n  });\r\n\r\n  describe('Persistence with AsyncStorage', () => {\r\n    it('should save progress and restore it on re-initialization', async () => {\r\n      const level = 'A1';\r\n      \r\n      // --- Première session ---\r\n      // On simule un utilisateur qui commence l'exercice\r\n      const { result, unmount } = renderHook(() => useErrorCorrection(mockErrorCorrectionData, level));\r\n      await act(async () => { /* wait for init */ });\r\n\r\n      // L'utilisateur progresse : il passe à l'exercice suivant\r\n      act(() => {\r\n        result.current.handleNext();\r\n      });\r\n\r\n      // On vérifie que l'état a bien changé\r\n      expect(result.current.currentExercise.id).toBe(102);\r\n      expect(result.current.completedExercises[1]).toContain(0);\r\n\r\n      // L'utilisateur quitte l'écran. Le hook est \"démonté\", ce qui doit déclencher la sauvegarde.\r\n      unmount();\r\n\r\n      // --- Deuxième session ---\r\n      // L'utilisateur revient plus tard. On \"remonte\" un nouveau hook.\r\n      const { result: result2 } = renderHook(() => useErrorCorrection(mockErrorCorrectionData, level));\r\n      \r\n      // On attend que le hook se charge et lise les données depuis AsyncStorage.\r\n      await act(async () => { /* wait for init and load */ });\r\n\r\n      // On vérifie que la progression a été correctement restaurée.\r\n      expect(result2.current.loaded).toBe(true);\r\n      expect(result2.current.currentExercise.id).toBe(102); // Doit être sur le deuxième exercice\r\n      expect(result2.current.completedExercises[1]).toContain(0); // Le premier exercice doit être marqué comme complété\r\n      expect(result2.current.selectedCategory).toBe(1);\r\n    });\r\n  });\r\n\r\n  describe('Completion and Category Selection', () => {\r\n    it('should set isFinished to true when all exercises are completed', async () => {\r\n      const { result } = renderHook(() => useErrorCorrection(mockErrorCorrectionData, 'A1'));\r\n      await act(async () => { /* wait for init */ });\r\n\r\n      // Complete all exercises in category 1 (2 exercises)\r\n      act(() => { result.current.handleNext(); });\r\n      act(() => { result.current.handleNext(); });\r\n\r\n      // Complete all exercises in category 2 (1 exercise)\r\n      act(() => { result.current.handleNext(); });\r\n\r\n      // After the last exercise, isFinished should be true\r\n      expect(result.current.isFinished).toBe(true);\r\n    });\r\n\r\n    it('should switch to the correct category and exercise when changeCategory is called', async () => {\r\n      const { result } = renderHook(() => useErrorCorrection(mockErrorCorrectionData, 'A1'));\r\n      await act(async () => { /* wait for init */ });\r\n\r\n      // Initially on category 1, exercise 101\r\n      expect(result.current.selectedCategory).toBe(1);\r\n      expect(result.current.currentExercise.id).toBe(101);\r\n\r\n      // User selects category 2\r\n      act(() => {\r\n        result.current.changeCategory(2);\r\n      });\r\n\r\n      // The hook should now be on category 2, and its first exercise (201)\r\n      expect(result.current.selectedCategory).toBe(2);\r\n      expect(result.current.currentExercise.id).toBe(201);\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}