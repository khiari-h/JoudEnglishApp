{"version":3,"names":["_react","require","_reactNative","_asyncStorage","_interopRequireDefault","usePhrases","phrasesData","arguments","length","undefined","level","_useState","useState","_useState2","_slicedToArray2","default","categoryIndex","setCategoryIndex","_useState3","_useState4","phraseIndex","setPhraseIndex","_useState5","_useState6","showTranslation","setShowTranslation","_useState7","_useState8","completedPhrases","setCompletedPhrases","_useState9","_useState0","loaded","setLoaded","_useState1","_useState10","showDetailedProgress","setShowDetailedProgress","isInitialized","useRef","categories","allPhrases","phrases","currentCategory","id","name","currentPhrases","filter","phrase","categoryId","currentPhrase","translation","context","totalCategories","totalPhrasesInCategory","STORAGE_KEY","useEffect","loadData","_ref","_asyncToGenerator2","saved","AsyncStorage","getItem","_JSON$parse","JSON","parse","savedCompleted","lastPosition","error","apply","saveData","useCallback","dataToSave","setItem","stringify","current","newCompletedPhrases","Object","assign","forEach","_","index","changeCategory","newCategoryIndex","goToNextPhrase","prev","goToPreviousPhrase","toggleTranslation","toggleDetailedProgress","markPhraseAsCompleted","catIndex","pIndex","categoryCompleted","includes","_defineProperty2","concat","_toConsumableArray2","findNextUncompletedCategory","numCategories","_loop","_completedPhrases$nex","nextIndex","i","category","categoryPhrases","p","completedInCategory","v","_ret","handleNext","nextCategoryIndex","Alert","alert","completed","handlePrevious","getStats","_completedPhrases$cat","totalPhrases","completedPhrasesCount","values","reduce","sum","totalProgress","Math","round","completionProgress","completedInCurrentCategory","totalInCurrentCategory","getDisplayData","phraseCounter","categoriesNames","map","cat","hasValidData","Array","isArray","canGoToPrevious","isLastPhraseInCategory","stats","display","_default","exports"],"sources":["usePhrases.js"],"sourcesContent":["// hooks/usePhrases.js - HOOK UNIFIÃ‰ SIMPLE\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { Alert } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n/**\n * ðŸŽ¯ Hook unifiÃ© pour Phrases Exercise\n * Remplace usePhrasesExerciseState + usePhrasesProgress + usePhrasesDisplay\n * Simple, efficace, maintenable - pattern identique Ã  useReading, useGrammar et useVocabulary\n */\nconst usePhrases = (phrasesData = null, level = \"A1\") => {\n  \n  // =================== CORE STATE ===================\n  const [categoryIndex, setCategoryIndex] = useState(0);\n  const [phraseIndex, setPhraseIndex] = useState(0);\n  const [showTranslation, setShowTranslation] = useState(false);\n  const [completedPhrases, setCompletedPhrases] = useState({});\n  const [loaded, setLoaded] = useState(false);\n  const [showDetailedProgress, setShowDetailedProgress] = useState(false);\n\n  // =================== REFS ===================\n  const isInitialized = useRef(false);\n\n  // =================== COMPUTED VALUES ===================\n  const categories = phrasesData?.categories || [];\n  const allPhrases = phrasesData?.phrases || [];\n  const currentCategory = categories[categoryIndex] || { id: null, name: \"Loading...\", phrases: [] };\n  const currentPhrases = currentCategory.id \n    ? allPhrases.filter(phrase => phrase.categoryId === currentCategory.id)\n    : [];\n  const currentPhrase = currentPhrases[phraseIndex] || { id: \"\", phrase: \"\", translation: \"\", context: \"\" };\n  const totalCategories = categories.length;\n  const totalPhrasesInCategory = currentPhrases.length;\n  \n  // =================== PERSISTENCE ===================\n  const STORAGE_KEY = `phrases_${level}`;\n\n  // Load data from storage\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const saved = await AsyncStorage.getItem(STORAGE_KEY);\n        if (saved) {\n          const { completedPhrases: savedCompleted, lastPosition } = JSON.parse(saved);\n          setCompletedPhrases(savedCompleted || {});\n          if (lastPosition) {\n            setCategoryIndex(lastPosition.categoryIndex || 0);\n            setPhraseIndex(lastPosition.phraseIndex || 0);\n          }\n        }\n      } catch (error) {\n        // Ignored on purpose\n      } finally {\n        setLoaded(true);\n      }\n    };\n    loadData();\n  }, [level]);\n\n  // Save data to storage\n  const saveData = useCallback(async () => {\n    try {\n      const dataToSave = {\n        completedPhrases,\n        lastPosition: {\n          categoryIndex,\n          phraseIndex\n        }\n      };\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(dataToSave));\n    } catch (error) {\n      // Ignored on purpose\n    }\n  }, [completedPhrases, categoryIndex, phraseIndex, STORAGE_KEY]);\n\n  // Auto-save when data changes\n  useEffect(() => {\n    if (loaded) saveData();\n  }, [saveData, loaded]);\n\n  // Initialize progress for new categories\n  useEffect(() => {\n    if (loaded && phrasesData && !isInitialized.current) {\n      const newCompletedPhrases = { ...completedPhrases };\n      categories.forEach((_, index) => {\n        if (!newCompletedPhrases[index]) {\n          newCompletedPhrases[index] = [];\n        }\n      });\n      setCompletedPhrases(newCompletedPhrases);\n      isInitialized.current = true;\n    }\n  }, [loaded, phrasesData, categories, completedPhrases]);\n\n  // =================== NAVIGATION ACTIONS ===================\n  const changeCategory = useCallback((newCategoryIndex) => {\n    if (newCategoryIndex !== categoryIndex && newCategoryIndex >= 0 && newCategoryIndex < categories.length) {\n      setCategoryIndex(newCategoryIndex);\n      setPhraseIndex(0);\n      setShowTranslation(false);\n    }\n  }, [categoryIndex, categories.length]);\n\n  const goToNextPhrase = useCallback(() => {\n    if (phraseIndex < totalPhrasesInCategory - 1) {\n      setPhraseIndex(prev => prev + 1);\n      setShowTranslation(false);\n    }\n  }, [phraseIndex, totalPhrasesInCategory]);\n\n  const goToPreviousPhrase = useCallback(() => {\n    if (phraseIndex > 0) {\n      setPhraseIndex(prev => prev - 1);\n      setShowTranslation(false);\n      return true;\n    }\n    return false;\n  }, [phraseIndex]);\n\n  const toggleTranslation = useCallback(() => {\n    setShowTranslation(prev => !prev);\n  }, []);\n\n  const toggleDetailedProgress = useCallback(() => {\n    setShowDetailedProgress(prev => !prev);\n  }, []);\n\n  // =================== COMPLETION LOGIC ===================\n  const markPhraseAsCompleted = useCallback((catIndex, pIndex) => {\n    setCompletedPhrases(prev => {\n      const categoryCompleted = prev[catIndex] || [];\n      if (!categoryCompleted.includes(pIndex)) {\n        return {\n          ...prev,\n          [catIndex]: [...categoryCompleted, pIndex]\n        };\n      }\n      return prev;\n    });\n  }, []);\n\n  // Find next uncompleted category\n  const findNextUncompletedCategory = useCallback(() => {\n    const numCategories = categories.length;\n    for (let i = 1; i <= numCategories; i++) {\n      const nextIndex = (categoryIndex + i) % numCategories;\n      const category = categories[nextIndex];\n      const categoryPhrases = allPhrases.filter(p => p.categoryId === category.id);\n      const completedInCategory = completedPhrases[nextIndex]?.length || 0;\n      \n      if (completedInCategory < categoryPhrases.length) {\n        return nextIndex;\n      }\n    }\n    return -1;\n  }, [categories, categoryIndex, allPhrases, completedPhrases]);\n\n  // =================== MAIN NAVIGATION ===================\n  const handleNext = useCallback(() => {\n    // Mark current phrase as completed\n    markPhraseAsCompleted(categoryIndex, phraseIndex);\n\n    // Check if there are more phrases in current category\n    if (phraseIndex < totalPhrasesInCategory - 1) {\n      goToNextPhrase();\n    } else {\n      // End of category - find next uncompleted category\n      const nextCategoryIndex = findNextUncompletedCategory();\n      if (nextCategoryIndex === -1) {\n        // All done!\n        Alert.alert(\n          \"FÃ©licitations\",\n          \"Vous avez terminÃ© tous les exercices de phrases !\"\n        );\n        return { completed: true };\n      } else {\n        changeCategory(nextCategoryIndex);\n      }\n    }\n    return { completed: false };\n  }, [categoryIndex, phraseIndex, totalPhrasesInCategory, markPhraseAsCompleted, goToNextPhrase, findNextUncompletedCategory, changeCategory]);\n\n  const handlePrevious = useCallback(() => {\n    goToPreviousPhrase();\n  }, [goToPreviousPhrase]);\n\n  // =================== COMPUTED STATS ===================\n  const getStats = useCallback(() => {\n    const totalPhrases = allPhrases.length;\n    const completedPhrasesCount = Object.values(completedPhrases).reduce((sum, completed) => sum + (completed?.length || 0), 0);\n    const totalProgress = totalPhrases > 0 ? Math.round((completedPhrasesCount / totalPhrases) * 100) : 0;\n    const completionProgress = totalPhrasesInCategory > 0 ? ((phraseIndex + 1) / totalPhrasesInCategory) * 100 : 0;\n\n    return {\n      totalPhrases,\n      completedPhrasesCount,\n      totalProgress,\n      completionProgress,\n      completedInCurrentCategory: completedPhrases[categoryIndex]?.length || 0,\n      totalInCurrentCategory: totalPhrasesInCategory\n    };\n  }, [allPhrases, completedPhrases, totalPhrasesInCategory, phraseIndex, categoryIndex]);\n\n  // =================== COMPUTED DISPLAY ===================\n  const getDisplayData = useCallback(() => {\n    const phraseCounter = `${phraseIndex + 1} / ${totalPhrasesInCategory || 0}`;\n    const categoriesNames = categories.map(cat => cat.name);\n    \n    return {\n      phraseCounter,\n      categories: categoriesNames,\n      currentPhrase,\n      currentCategory,\n      currentPhrases\n    };\n  }, [phraseIndex, totalPhrasesInCategory, categories, currentPhrase, currentCategory, currentPhrases]);\n\n  // =================== VALIDATION ===================\n  const hasValidData = phrasesData?.categories && Array.isArray(phrasesData.categories) && phrasesData.categories.length > 0;\n\n  const canGoToPrevious = phraseIndex > 0;\n  const isLastPhraseInCategory = phraseIndex === totalPhrasesInCategory - 1;\n\n  return {\n    // State\n    categoryIndex,\n    phraseIndex,\n    showTranslation,\n    completedPhrases,\n    loaded,\n    showDetailedProgress,\n    \n    // Data\n    currentPhrase,\n    currentCategory,\n    currentPhrases,\n    totalCategories,\n    totalPhrasesInCategory,\n    hasValidData,\n    \n    // Actions\n    changeCategory,\n    toggleTranslation,\n    toggleDetailedProgress,\n    handleNext,\n    handlePrevious,\n    \n    // Computed\n    canGoToPrevious,\n    isLastPhraseInCategory,\n    stats: getStats(),\n    display: getDisplayData(),\n  };\n};\n\nexport default usePhrases;"],"mappings":"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","ignoreList":[]}