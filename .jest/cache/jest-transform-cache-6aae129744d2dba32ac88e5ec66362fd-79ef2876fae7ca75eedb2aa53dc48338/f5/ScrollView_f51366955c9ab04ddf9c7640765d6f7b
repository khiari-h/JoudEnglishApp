ae50263ba91f77d785d7e580b8493422
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnimatedScrollView = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _createAnimatedComponent = require("../createAnimatedComponent");
var _hook = require("../hook");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["scrollViewOffset"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var AnimatedScrollViewComponent = (0, _createAnimatedComponent.createAnimatedComponent)(_reactNative.ScrollView);
var AnimatedScrollView = exports.AnimatedScrollView = (0, _react.forwardRef)(function (props, ref) {
  var scrollViewOffset = props.scrollViewOffset,
    restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
  var animatedRef = ref === null ? (0, _hook.useAnimatedRef)() : ref;
  if (scrollViewOffset) {
    (0, _hook.useScrollViewOffset)(animatedRef, scrollViewOffset);
  }
  if (!('scrollEventThrottle' in restProps)) {
    restProps.scrollEventThrottle = 1;
  }
  return (0, _jsxRuntime.jsx)(AnimatedScrollViewComponent, Object.assign({
    ref: animatedRef
  }, restProps));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQW5pbWF0ZWRTY3JvbGxWaWV3IiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiIsIl9yZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX3JlYWN0TmF0aXZlIiwiX2NyZWF0ZUFuaW1hdGVkQ29tcG9uZW50IiwiX2hvb2siLCJfanN4UnVudGltZSIsIl9leGNsdWRlZCIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIkFuaW1hdGVkU2Nyb2xsVmlld0NvbXBvbmVudCIsImNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50IiwiU2Nyb2xsVmlldyIsImZvcndhcmRSZWYiLCJwcm9wcyIsInJlZiIsInNjcm9sbFZpZXdPZmZzZXQiLCJyZXN0UHJvcHMiLCJhbmltYXRlZFJlZiIsInVzZUFuaW1hdGVkUmVmIiwidXNlU2Nyb2xsVmlld09mZnNldCIsInNjcm9sbEV2ZW50VGhyb3R0bGUiLCJqc3giLCJhc3NpZ24iXSwic291cmNlcyI6WyJTY3JvbGxWaWV3LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5pbXBvcnQgdHlwZSB7IEZvcndhcmRlZFJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdCwgeyBmb3J3YXJkUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBTY3JvbGxWaWV3UHJvcHMgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgU2Nyb2xsVmlldyB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBjcmVhdGVBbmltYXRlZENvbXBvbmVudCB9IGZyb20gJy4uL2NyZWF0ZUFuaW1hdGVkQ29tcG9uZW50JztcbmltcG9ydCB0eXBlIHsgU2hhcmVkVmFsdWUgfSBmcm9tICcuLi9jb21tb25UeXBlcyc7XG5pbXBvcnQgdHlwZSB7IEFuaW1hdGVkUmVmIH0gZnJvbSAnLi4vaG9vayc7XG5pbXBvcnQgeyB1c2VBbmltYXRlZFJlZiwgdXNlU2Nyb2xsVmlld09mZnNldCB9IGZyb20gJy4uL2hvb2snO1xuaW1wb3J0IHR5cGUgeyBBbmltYXRlZFByb3BzIH0gZnJvbSAnLi4vaGVscGVyVHlwZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFuaW1hdGVkU2Nyb2xsVmlld1Byb3BzXG4gIGV4dGVuZHMgQW5pbWF0ZWRQcm9wczxTY3JvbGxWaWV3UHJvcHM+IHtcbiAgc2Nyb2xsVmlld09mZnNldD86IFNoYXJlZFZhbHVlPG51bWJlcj47XG59XG5cbi8vIFNpbmNlIGNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50IHJldHVybiB0eXBlIGlzIENvbXBvbmVudENsYXNzIHRoYXQgaGFzIHRoZSBwcm9wcyBvZiB0aGUgYXJndW1lbnQsXG4vLyBidXQgbm90IHRoaW5ncyBsaWtlIE5hdGl2ZU1ldGhvZHMsIGV0Yy4gd2UgbmVlZCB0byBhZGQgdGhlbSBtYW51YWxseSBieSBleHRlbmRpbmcgdGhlIHR5cGUuXG5pbnRlcmZhY2UgQW5pbWF0ZWRTY3JvbGxWaWV3Q29tcGxlbWVudCBleHRlbmRzIFNjcm9sbFZpZXcge1xuICBnZXROb2RlKCk6IFNjcm9sbFZpZXc7XG59XG5cbmNvbnN0IEFuaW1hdGVkU2Nyb2xsVmlld0NvbXBvbmVudCA9IGNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50KFNjcm9sbFZpZXcpO1xuXG5leHBvcnQgY29uc3QgQW5pbWF0ZWRTY3JvbGxWaWV3ID0gZm9yd2FyZFJlZihcbiAgKHByb3BzOiBBbmltYXRlZFNjcm9sbFZpZXdQcm9wcywgcmVmOiBGb3J3YXJkZWRSZWY8QW5pbWF0ZWRTY3JvbGxWaWV3PikgPT4ge1xuICAgIGNvbnN0IHsgc2Nyb2xsVmlld09mZnNldCwgLi4ucmVzdFByb3BzIH0gPSBwcm9wcztcbiAgICBjb25zdCBhbmltYXRlZFJlZiA9IChcbiAgICAgIHJlZiA9PT0gbnVsbFxuICAgICAgICA/IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgICAgICAgIHVzZUFuaW1hdGVkUmVmPFNjcm9sbFZpZXc+KClcbiAgICAgICAgOiByZWZcbiAgICApIGFzIEFuaW1hdGVkUmVmPEFuaW1hdGVkU2Nyb2xsVmlldz47XG5cbiAgICBpZiAoc2Nyb2xsVmlld09mZnNldCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgICB1c2VTY3JvbGxWaWV3T2Zmc2V0KGFuaW1hdGVkUmVmLCBzY3JvbGxWaWV3T2Zmc2V0KTtcbiAgICB9XG5cbiAgICAvLyBTZXQgZGVmYXVsdCBzY3JvbGxFdmVudFRocm90dGxlLCBiZWNhdXNlIHVzZXIgZXhwZWN0c1xuICAgIC8vIHRvIGhhdmUgY29udGludW91cyBzY3JvbGwgZXZlbnRzLlxuICAgIC8vIFdlIHNldCBpdCB0byAxIHNvIHdlIGhhdmUgcGVhY2UgdW50aWxcbiAgICAvLyB0aGVyZSBhcmUgOTYwIGZwcyBzY3JlZW5zLlxuICAgIGlmICghKCdzY3JvbGxFdmVudFRocm90dGxlJyBpbiByZXN0UHJvcHMpKSB7XG4gICAgICByZXN0UHJvcHMuc2Nyb2xsRXZlbnRUaHJvdHRsZSA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIDxBbmltYXRlZFNjcm9sbFZpZXdDb21wb25lbnQgcmVmPXthbmltYXRlZFJlZn0gey4uLnJlc3RQcm9wc30gLz47XG4gIH1cbik7XG5cbmV4cG9ydCB0eXBlIEFuaW1hdGVkU2Nyb2xsVmlldyA9IEFuaW1hdGVkU2Nyb2xsVmlld0NvbXBsZW1lbnQgJlxuICB0eXBlb2YgQW5pbWF0ZWRTY3JvbGxWaWV3Q29tcG9uZW50O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUFDLElBQUFBLHNCQUFBLEdBQUFDLE9BQUE7QUFBQUMsTUFBQSxDQUFBQyxjQUFBLENBQUFDLE9BQUE7RUFBQUMsS0FBQTtBQUFBO0FBQUFELE9BQUEsQ0FBQUUsa0JBQUE7QUFBQSxJQUFBQyx5QkFBQSxHQUFBUCxzQkFBQSxDQUFBQyxPQUFBO0FBRWIsSUFBQU8sTUFBQSxHQUFBQyx1QkFBQSxDQUFBUixPQUFBO0FBRUEsSUFBQVMsWUFBQSxHQUFBVCxPQUFBO0FBQ0EsSUFBQVUsd0JBQUEsR0FBQVYsT0FBQTtBQUdBLElBQUFXLEtBQUEsR0FBQVgsT0FBQTtBQUE4RCxJQUFBWSxXQUFBLEdBQUFaLE9BQUE7QUFBQSxJQUFBYSxTQUFBO0FBQUEsU0FBQUwsd0JBQUFNLENBQUEsRUFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFSLHVCQUFBLFlBQUFBLHdCQUFBTSxDQUFBLEVBQUFDLENBQUEsU0FBQUEsQ0FBQSxJQUFBRCxDQUFBLElBQUFBLENBQUEsQ0FBQUssVUFBQSxTQUFBTCxDQUFBLE1BQUFNLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLEtBQUFDLFNBQUEsUUFBQUMsT0FBQSxFQUFBVixDQUFBLGlCQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFNBQUFRLENBQUEsTUFBQUYsQ0FBQSxHQUFBTCxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxRQUFBRyxDQUFBLENBQUFLLEdBQUEsQ0FBQVgsQ0FBQSxVQUFBTSxDQUFBLENBQUFNLEdBQUEsQ0FBQVosQ0FBQSxHQUFBTSxDQUFBLENBQUFPLEdBQUEsQ0FBQWIsQ0FBQSxFQUFBUSxDQUFBLGNBQUFNLEVBQUEsSUFBQWQsQ0FBQSxnQkFBQWMsRUFBQSxPQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWhCLENBQUEsRUFBQWMsRUFBQSxPQUFBUCxDQUFBLElBQUFELENBQUEsR0FBQW5CLE1BQUEsQ0FBQUMsY0FBQSxLQUFBRCxNQUFBLENBQUE4Qix3QkFBQSxDQUFBakIsQ0FBQSxFQUFBYyxFQUFBLE9BQUFQLENBQUEsQ0FBQUssR0FBQSxJQUFBTCxDQUFBLENBQUFNLEdBQUEsSUFBQVAsQ0FBQSxDQUFBRSxDQUFBLEVBQUFNLEVBQUEsRUFBQVAsQ0FBQSxJQUFBQyxDQUFBLENBQUFNLEVBQUEsSUFBQWQsQ0FBQSxDQUFBYyxFQUFBLFdBQUFOLENBQUEsS0FBQVIsQ0FBQSxFQUFBQyxDQUFBO0FBYzlELElBQU1pQiwyQkFBMkIsR0FBRyxJQUFBQyxnREFBdUIsRUFBQ0MsdUJBQVUsQ0FBQztBQUVoRSxJQUFNN0Isa0JBQWtCLEdBQUFGLE9BQUEsQ0FBQUUsa0JBQUEsR0FBRyxJQUFBOEIsaUJBQVUsRUFDMUMsVUFBQ0MsS0FBOEIsRUFBRUMsR0FBcUMsRUFBSztFQUN6RSxJQUFRQyxnQkFBZ0IsR0FBbUJGLEtBQUssQ0FBeENFLGdCQUFnQjtJQUFLQyxTQUFTLE9BQUFqQyx5QkFBQSxDQUFBa0IsT0FBQSxFQUFLWSxLQUFLLEVBQUF2QixTQUFBO0VBQ2hELElBQU0yQixXQUFXLEdBQ2ZILEdBQUcsS0FBSyxJQUFJLEdBRVIsSUFBQUksb0JBQWMsRUFBYSxDQUFDLEdBQzVCSixHQUM4QjtFQUVwQyxJQUFJQyxnQkFBZ0IsRUFBRTtJQUVwQixJQUFBSSx5QkFBbUIsRUFBQ0YsV0FBVyxFQUFFRixnQkFBZ0IsQ0FBQztFQUNwRDtFQU1BLElBQUksRUFBRSxxQkFBcUIsSUFBSUMsU0FBUyxDQUFDLEVBQUU7SUFDekNBLFNBQVMsQ0FBQ0ksbUJBQW1CLEdBQUcsQ0FBQztFQUNuQztFQUVBLE9BQU8sSUFBQS9CLFdBQUEsQ0FBQWdDLEdBQUEsRUFBQ1osMkJBQTJCLEVBQUEvQixNQUFBLENBQUE0QyxNQUFBO0lBQUNSLEdBQUcsRUFBRUc7RUFBWSxHQUFLRCxTQUFTLENBQUcsQ0FBQztBQUN6RSxDQUNGLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=