728c3399cbee6b711b75fd30979798df
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LockProvider = LockProvider;
exports.useLock = useLock;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _propTypes = _interopRequireDefault(require("prop-types"));
var Lock = _interopRequireWildcard(require("../services/lockService"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var LockContext = (0, _react.createContext)(null);
function LockProvider(_ref) {
  var children = _ref.children;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isEnabled = _useState2[0],
    setIsEnabled = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isLocked = _useState4[0],
    setIsLocked = _useState4[1];
  var _useState5 = (0, _react.useState)(true),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    isLoading = _useState6[0],
    setIsLoading = _useState6[1];
  (0, _react.useEffect)(function () {
    (0, _asyncToGenerator2.default)(function* () {
      try {
        var enabled = yield Lock.isEnabled();
        setIsEnabled(enabled);
        setIsLocked(enabled);
      } finally {
        setIsLoading(false);
      }
    })();
  }, []);
  var lockNow = (0, _react.useCallback)(function () {
    if (isEnabled) setIsLocked(true);
  }, [isEnabled]);
  var unlockWithPin = (0, _react.useCallback)(function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (pin) {
      var res = yield Lock.verifyPin(pin);
      if (res.ok) {
        setIsLocked(false);
        return {
          ok: true
        };
      }
      if (res.reason === 'lockout') return {
        ok: false,
        reason: 'lockout'
      };
      return {
        ok: false
      };
    });
    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }(), []);
  var disable = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    yield Lock.disableLock();
    setIsEnabled(false);
    setIsLocked(false);
  }), []);
  var enable = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    yield Lock.enableLock();
    setIsEnabled(true);
    setIsLocked(true);
  }), []);
  var value = (0, _react.useMemo)(function () {
    return {
      isEnabled: isEnabled,
      isLocked: isLocked,
      isLoading: isLoading,
      lockNow: lockNow,
      unlockWithPin: unlockWithPin,
      enable: enable,
      disable: disable
    };
  }, [isEnabled, isLocked, isLoading, lockNow, unlockWithPin, enable, disable]);
  return (0, _jsxRuntime.jsx)(LockContext.Provider, {
    value: value,
    children: children
  });
}
LockProvider.propTypes = {
  children: _propTypes.default.node.isRequired
};
function useLock() {
  var ctx = (0, _react.useContext)(LockContext);
  if (!ctx) throw new Error('useLock must be used within LockProvider');
  return ctx;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3Byb3BUeXBlcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJMb2NrIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfanN4UnVudGltZSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiTG9ja0NvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiTG9ja1Byb3ZpZGVyIiwiX3JlZiIsImNoaWxkcmVuIiwiX3VzZVN0YXRlIiwidXNlU3RhdGUiLCJfdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkyIiwiaXNFbmFibGVkIiwic2V0SXNFbmFibGVkIiwiX3VzZVN0YXRlMyIsIl91c2VTdGF0ZTQiLCJpc0xvY2tlZCIsInNldElzTG9ja2VkIiwiX3VzZVN0YXRlNSIsIl91c2VTdGF0ZTYiLCJpc0xvYWRpbmciLCJzZXRJc0xvYWRpbmciLCJ1c2VFZmZlY3QiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJlbmFibGVkIiwibG9ja05vdyIsInVzZUNhbGxiYWNrIiwidW5sb2NrV2l0aFBpbiIsIl9yZWYzIiwicGluIiwicmVzIiwidmVyaWZ5UGluIiwib2siLCJyZWFzb24iLCJfeCIsImFwcGx5IiwiYXJndW1lbnRzIiwiZGlzYWJsZSIsImRpc2FibGVMb2NrIiwiZW5hYmxlIiwiZW5hYmxlTG9jayIsInZhbHVlIiwidXNlTWVtbyIsImpzeCIsIlByb3ZpZGVyIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwibm9kZSIsImlzUmVxdWlyZWQiLCJ1c2VMb2NrIiwiY3R4IiwidXNlQ29udGV4dCIsIkVycm9yIl0sInNvdXJjZXMiOlsiTG9ja0NvbnRleHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2NvbnRleHRzL0xvY2tDb250ZXh0LmpzXHJcbmltcG9ydCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNhbGxiYWNrLCB1c2VDb250ZXh0LCB1c2VFZmZlY3QsIHVzZVN0YXRlLCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5pbXBvcnQgKiBhcyBMb2NrIGZyb20gJy4uL3NlcnZpY2VzL2xvY2tTZXJ2aWNlJztcclxuXHJcbmNvbnN0IExvY2tDb250ZXh0ID0gY3JlYXRlQ29udGV4dChudWxsKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBMb2NrUHJvdmlkZXIoeyBjaGlsZHJlbiB9KSB7XHJcbiAgY29uc3QgW2lzRW5hYmxlZCwgc2V0SXNFbmFibGVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICBjb25zdCBbaXNMb2NrZWQsIHNldElzTG9ja2VkXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUodHJ1ZSk7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAoYXN5bmMgKCkgPT4ge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGVuYWJsZWQgPSBhd2FpdCBMb2NrLmlzRW5hYmxlZCgpO1xyXG4gICAgICAgIHNldElzRW5hYmxlZChlbmFibGVkKTtcclxuICAgICAgICBzZXRJc0xvY2tlZChlbmFibGVkKTtcclxuICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xyXG4gICAgICB9XHJcbiAgICB9KSgpO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgY29uc3QgbG9ja05vdyA9IHVzZUNhbGxiYWNrKCgpID0+IHtcclxuICAgIGlmIChpc0VuYWJsZWQpIHNldElzTG9ja2VkKHRydWUpO1xyXG4gIH0sIFtpc0VuYWJsZWRdKTtcclxuXHJcbiAgY29uc3QgdW5sb2NrV2l0aFBpbiA9IHVzZUNhbGxiYWNrKGFzeW5jIChwaW4pID0+IHtcclxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IExvY2sudmVyaWZ5UGluKHBpbik7XHJcbiAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgIHNldElzTG9ja2VkKGZhbHNlKTtcclxuICAgICAgcmV0dXJuIHsgb2s6IHRydWUgfTtcclxuICAgIH1cclxuICAgIGlmIChyZXMucmVhc29uID09PSAnbG9ja291dCcpIHJldHVybiB7IG9rOiBmYWxzZSwgcmVhc29uOiAnbG9ja291dCcgfTtcclxuICAgIHJldHVybiB7IG9rOiBmYWxzZSB9O1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgY29uc3QgZGlzYWJsZSA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcclxuICAgIGF3YWl0IExvY2suZGlzYWJsZUxvY2soKTtcclxuICAgIHNldElzRW5hYmxlZChmYWxzZSk7XHJcbiAgICBzZXRJc0xvY2tlZChmYWxzZSk7XHJcbiAgfSwgW10pO1xyXG5cclxuICBjb25zdCBlbmFibGUgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XHJcbiAgICBhd2FpdCBMb2NrLmVuYWJsZUxvY2soKTtcclxuICAgIHNldElzRW5hYmxlZCh0cnVlKTtcclxuICAgIHNldElzTG9ja2VkKHRydWUpO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgLy8gTcOpbW9yaXNlIGxhIHZhbGV1ciBkdSBjb250ZXh0ZSBwb3VyIMOpdml0ZXIgbGVzIHJlLXJlbmR1cyBpbnV0aWxlc1xyXG4gIGNvbnN0IHZhbHVlID0gdXNlTWVtbygoKSA9PiAoe1xyXG4gICAgaXNFbmFibGVkLFxyXG4gICAgaXNMb2NrZWQsXHJcbiAgICBpc0xvYWRpbmcsXHJcbiAgICBsb2NrTm93LFxyXG4gICAgdW5sb2NrV2l0aFBpbixcclxuICAgIGVuYWJsZSxcclxuICAgIGRpc2FibGUsXHJcbiAgfSksIFtpc0VuYWJsZWQsIGlzTG9ja2VkLCBpc0xvYWRpbmcsIGxvY2tOb3csIHVubG9ja1dpdGhQaW4sIGVuYWJsZSwgZGlzYWJsZV0pO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPExvY2tDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt2YWx1ZX0+e2NoaWxkcmVufTwvTG9ja0NvbnRleHQuUHJvdmlkZXI+XHJcbiAgKTtcclxufVxyXG5cclxuTG9ja1Byb3ZpZGVyLnByb3BUeXBlcyA9IHtcclxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VMb2NrKCkge1xyXG4gIGNvbnN0IGN0eCA9IHVzZUNvbnRleHQoTG9ja0NvbnRleHQpO1xyXG4gIGlmICghY3R4KSB0aHJvdyBuZXcgRXJyb3IoJ3VzZUxvY2sgbXVzdCBiZSB1c2VkIHdpdGhpbiBMb2NrUHJvdmlkZXInKTtcclxuICByZXR1cm4gY3R4O1xyXG59XHJcblxyXG5cclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUNBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFHLElBQUEsR0FBQUMsdUJBQUEsQ0FBQUosT0FBQTtBQUFnRCxJQUFBSyxXQUFBLEdBQUFMLE9BQUE7QUFBQSxTQUFBSSx3QkFBQUUsQ0FBQSxFQUFBQyxDQUFBLDZCQUFBQyxPQUFBLE1BQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQUosdUJBQUEsWUFBQUEsd0JBQUFFLENBQUEsRUFBQUMsQ0FBQSxTQUFBQSxDQUFBLElBQUFELENBQUEsSUFBQUEsQ0FBQSxDQUFBSyxVQUFBLFNBQUFMLENBQUEsTUFBQU0sQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsS0FBQUMsU0FBQSxRQUFBQyxPQUFBLEVBQUFWLENBQUEsaUJBQUFBLENBQUEsdUJBQUFBLENBQUEseUJBQUFBLENBQUEsU0FBQVEsQ0FBQSxNQUFBRixDQUFBLEdBQUFMLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLFFBQUFHLENBQUEs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QUEsQ0FBQU8sS0FBQSxPQUFBQyxTQUFBO0lBQUE7RUFBQSxLQUFFLEVBQUUsQ0FBQztFQUVOLElBQU1DLE9BQU8sR0FBRyxJQUFBWCxrQkFBVyxNQUFBSCxrQkFBQSxDQUFBOUIsT0FBQSxFQUFDLGFBQVk7SUFDdEMsTUFBTWIsSUFBSSxDQUFDMEQsV0FBVyxDQUFDLENBQUM7SUFDeEJ6QixZQUFZLENBQUMsS0FBSyxDQUFDO0lBQ25CSSxXQUFXLENBQUMsS0FBSyxDQUFDO0VBQ3BCLENBQUMsR0FBRSxFQUFFLENBQUM7RUFFTixJQUFNc0IsTUFBTSxHQUFHLElBQUFiLGtCQUFXLE1BQUFILGtCQUFBLENBQUE5QixPQUFBLEVBQUMsYUFBWTtJQUNyQyxNQUFNYixJQUFJLENBQUM0RCxVQUFVLENBQUMsQ0FBQztJQUN2QjNCLFlBQVksQ0FBQyxJQUFJLENBQUM7SUFDbEJJLFdBQVcsQ0FBQyxJQUFJLENBQUM7RUFDbkIsQ0FBQyxHQUFFLEVBQUUsQ0FBQztFQUdOLElBQU13QixLQUFLLEdBQUcsSUFBQUMsY0FBTyxFQUFDO0lBQUEsT0FBTztNQUMzQjlCLFNBQVMsRUFBVEEsU0FBUztNQUNUSSxRQUFRLEVBQVJBLFFBQVE7TUFDUkksU0FBUyxFQUFUQSxTQUFTO01BQ1RLLE9BQU8sRUFBUEEsT0FBTztNQUNQRSxhQUFhLEVBQWJBLGFBQWE7TUFDYlksTUFBTSxFQUFOQSxNQUFNO01BQ05GLE9BQU8sRUFBUEE7SUFDRixDQUFDO0VBQUEsQ0FBQyxFQUFFLENBQUN6QixTQUFTLEVBQUVJLFFBQVEsRUFBRUksU0FBUyxFQUFFSyxPQUFPLEVBQUVFLGFBQWEsRUFBRVksTUFBTSxFQUFFRixPQUFPLENBQUMsQ0FBQztFQUU5RSxPQUNFLElBQUF2RCxXQUFBLENBQUE2RCxHQUFBLEVBQUN4QyxXQUFXLENBQUN5QyxRQUFRO0lBQUNILEtBQUssRUFBRUEsS0FBTTtJQUFBbEMsUUFBQSxFQUFFQTtFQUFRLENBQXVCLENBQUM7QUFFekU7QUFFQUYsWUFBWSxDQUFDd0MsU0FBUyxHQUFHO0VBQ3ZCdEMsUUFBUSxFQUFFdUMsa0JBQVMsQ0FBQ0MsSUFBSSxDQUFDQztBQUMzQixDQUFDO0FBRU0sU0FBU0MsT0FBT0EsQ0FBQSxFQUFHO0VBQ3hCLElBQU1DLEdBQUcsR0FBRyxJQUFBQyxpQkFBVSxFQUFDaEQsV0FBVyxDQUFDO0VBQ25DLElBQUksQ0FBQytDLEdBQUcsRUFBRSxNQUFNLElBQUlFLEtBQUssQ0FBQywwQ0FBMEMsQ0FBQztFQUNyRSxPQUFPRixHQUFHO0FBQ1oiLCJpZ25vcmVMaXN0IjpbXX0=