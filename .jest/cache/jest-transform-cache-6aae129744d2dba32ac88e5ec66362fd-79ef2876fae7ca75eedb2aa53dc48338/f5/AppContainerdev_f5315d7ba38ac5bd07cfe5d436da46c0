d95d89f1e5cb9e277fa987e2e4df3daf
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _ReactNativeStyleAttributes = _interopRequireDefault(require("../Components/View/ReactNativeStyleAttributes"));
var _View = _interopRequireDefault(require("../Components/View/View"));
var _DebuggingOverlay = _interopRequireDefault(require("../Debugging/DebuggingOverlay"));
var _useSubscribeToDebuggingOverlayRegistry = _interopRequireDefault(require("../Debugging/useSubscribeToDebuggingOverlayRegistry"));
var _RCTDeviceEventEmitter = _interopRequireDefault(require("../EventEmitter/RCTDeviceEventEmitter"));
var _LogBoxNotificationContainer = _interopRequireDefault(require("../LogBox/LogBoxNotificationContainer"));
var _StyleSheet = _interopRequireDefault(require("../StyleSheet/StyleSheet"));
var _RootTag = require("./RootTag");
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var useEffect = React.useEffect,
  useState = React.useState,
  useCallback = React.useCallback;
var reactDevToolsHook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
if (reactDevToolsHook) {
  reactDevToolsHook.resolveRNStyle = require('../StyleSheet/flattenStyle');
  reactDevToolsHook.nativeStyleEditorValidAttributes = Object.keys(_ReactNativeStyleAttributes.default);
}
var InspectorDeferred = function InspectorDeferred(_ref) {
  var inspectedViewRef = _ref.inspectedViewRef,
    onInspectedViewRerenderRequest = _ref.onInspectedViewRerenderRequest,
    reactDevToolsAgent = _ref.reactDevToolsAgent;
  var Inspector = require('../Inspector/Inspector');
  return (0, _jsxRuntime.jsx)(Inspector, {
    inspectedViewRef: inspectedViewRef,
    onRequestRerenderApp: onInspectedViewRerenderRequest,
    reactDevToolsAgent: reactDevToolsAgent
  });
};
var ReactDevToolsOverlayDeferred = function ReactDevToolsOverlayDeferred(_ref2) {
  var inspectedViewRef = _ref2.inspectedViewRef,
    reactDevToolsAgent = _ref2.reactDevToolsAgent;
  var ReactDevToolsOverlay = require('../Inspector/ReactDevToolsOverlay').default;
  return (0, _jsxRuntime.jsx)(ReactDevToolsOverlay, {
    inspectedViewRef: inspectedViewRef,
    reactDevToolsAgent: reactDevToolsAgent
  });
};
var AppContainer = function AppContainer(_ref3) {
  var children = _ref3.children,
    fabric = _ref3.fabric,
    initialProps = _ref3.initialProps,
    _ref3$internal_exclud = _ref3.internal_excludeInspector,
    internal_excludeInspector = _ref3$internal_exclud === void 0 ? false : _ref3$internal_exclud,
    _ref3$internal_exclud2 = _ref3.internal_excludeLogBox,
    internal_excludeLogBox = _ref3$internal_exclud2 === void 0 ? false : _ref3$internal_exclud2,
    rootTag = _ref3.rootTag,
    WrapperComponent = _ref3.WrapperComponent,
    rootViewStyle = _ref3.rootViewStyle;
  var appContainerRootViewRef = React.useRef(null);
  var innerViewRef = React.useRef(null);
  var debuggingOverlayRef = React.useRef(null);
  (0, _useSubscribeToDebuggingOverlayRegistry.default)(appContainerRootViewRef, debuggingOverlayRef);
  var _useState = useState(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    key = _useState2[0],
    setKey = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    shouldRenderInspector = _useState4[0],
    setShouldRenderInspector = _useState4[1];
  var _useState5 = useState(reactDevToolsHook == null ? void 0 : reactDevToolsHook.reactDevtoolsAgent),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    reactDevToolsAgent = _useState6[0],
    setReactDevToolsAgent = _useState6[1];
  useEffect(function () {
    var inspectorSubscription = null;
    if (!internal_excludeInspector) {
      inspectorSubscription = _RCTDeviceEventEmitter.default.addListener('toggleElementInspector', function () {
        return setShouldRenderInspector(function (value) {
          return !value;
        });
      });
    }
    var reactDevToolsAgentListener = null;
    if (reactDevToolsHook != null && reactDevToolsAgent == null) {
      reactDevToolsAgentListener = setReactDevToolsAgent;
      reactDevToolsHook.on == null || reactDevToolsHook.on('react-devtools', reactDevToolsAgentListener);
    }
    return function () {
      var _inspectorSubscriptio;
      (_inspectorSubscriptio = inspectorSubscription) == null || _inspectorSubscriptio.remove();
      if ((reactDevToolsHook == null ? void 0 : reactDevToolsHook.off) != null && reactDevToolsAgentListener != null) {
        reactDevToolsHook.off('react-devtools', reactDevToolsAgentListener);
      }
    };
  }, []);
  var innerView = (0, _jsxRuntime.jsx)(_View.default, {
    collapsable: reactDevToolsAgent == null && !shouldRenderInspector,
    pointerEvents: "box-none",
    style: rootViewStyle || styles.container,
    ref: innerViewRef,
    children: children
  }, key);
  if (WrapperComponent != null) {
    innerView = (0, _jsxRuntime.jsx)(WrapperComponent, {
      initialProps: initialProps,
      fabric: fabric === true,
      children: innerView
    });
  }
  var onInspectedViewRerenderRequest = useCallback(function () {
    return setKey(function (k) {
      return k + 1;
    });
  }, []);
  return (0, _jsxRuntime.jsx)(_RootTag.RootTagContext.Provider, {
    value: (0, _RootTag.createRootTag)(rootTag),
    children: (0, _jsxRuntime.jsxs)(_View.default, {
      ref: appContainerRootViewRef,
      style: rootViewStyle || styles.container,
      pointerEvents: "box-none",
      children: [innerView, (0, _jsxRuntime.jsx)(_DebuggingOverlay.default, {
        ref: debuggingOverlayRef
      }), reactDevToolsAgent != null && (0, _jsxRuntime.jsx)(ReactDevToolsOverlayDeferred, {
        inspectedViewRef: innerViewRef,
        reactDevToolsAgent: reactDevToolsAgent
      }), shouldRenderInspector && (0, _jsxRuntime.jsx)(InspectorDeferred, {
        inspectedViewRef: innerViewRef,
        onInspectedViewRerenderRequest: onInspectedViewRerenderRequest,
        reactDevToolsAgent: reactDevToolsAgent
      }), !internal_excludeLogBox && (0, _jsxRuntime.jsx)(_LogBoxNotificationContainer.default, {})]
    })
  });
};
var styles = _StyleSheet.default.create({
  container: {
    flex: 1
  }
});
var _default = exports.default = AppContainer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9WaWV3IiwiX0RlYnVnZ2luZ092ZXJsYXkiLCJfdXNlU3Vic2NyaWJlVG9EZWJ1Z2dpbmdPdmVybGF5UmVnaXN0cnkiLCJfUkNURGV2aWNlRXZlbnRFbWl0dGVyIiwiX0xvZ0JveE5vdGlmaWNhdGlvbkNvbnRhaW5lciIsIl9TdHlsZVNoZWV0IiwiX1Jvb3RUYWciLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2pzeFJ1bnRpbWUiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwidXNlQ2FsbGJhY2siLCJyZWFjdERldlRvb2xzSG9vayIsIndpbmRvdyIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsInJlc29sdmVSTlN0eWxlIiwibmF0aXZlU3R5bGVFZGl0b3JWYWxpZEF0dHJpYnV0ZXMiLCJrZXlzIiwiUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMiLCJJbnNwZWN0b3JEZWZlcnJlZCIsIl9yZWYiLCJpbnNwZWN0ZWRWaWV3UmVmIiwib25JbnNwZWN0ZWRWaWV3UmVyZW5kZXJSZXF1ZXN0IiwicmVhY3REZXZUb29sc0FnZW50IiwiSW5zcGVjdG9yIiwianN4Iiwib25SZXF1ZXN0UmVyZW5kZXJBcHAiLCJSZWFjdERldlRvb2xzT3ZlcmxheURlZmVycmVkIiwiX3JlZjIiLCJSZWFjdERldlRvb2xzT3ZlcmxheSIsIkFwcENvbnRhaW5lciIsIl9yZWYzIiwiY2hpbGRyZW4iLCJmYWJyaWMiLCJpbml0aWFsUHJvcHMiLCJfcmVmMyRpbnRlcm5hbF9leGNsdWQiLCJpbnRlcm5hbF9leGNsdWRlSW5zcGVjdG9yIiwiX3JlZjMkaW50ZXJuYWxfZXhjbHVkMiIsImludGVybmFsX2V4Y2x1ZGVMb2dCb3giLCJyb290VGFnIiwiV3JhcHBlckNvbXBvbmVudCIsInJvb3RWaWV3U3R5bGUiLCJhcHBDb250YWluZXJSb290Vmlld1JlZiIsInVzZVJlZiIsImlubmVyVmlld1JlZiIsImRlYnVnZ2luZ092ZXJsYXlSZWYiLCJ1c2VTdWJzY3JpYmVUb0RlYnVnZ2luZ092ZXJsYXlSZWdpc3RyeSIsIl91c2VTdGF0ZSIsIl91c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheTIiLCJrZXkiLCJzZXRLZXkiLCJfdXNlU3RhdGUzIiwiX3VzZVN0YXRlNCIsInNob3VsZFJlbmRlckluc3BlY3RvciIsInNldFNob3VsZFJlbmRlckluc3BlY3RvciIsIl91c2VTdGF0ZTUiLCJyZWFjdERldnRvb2xzQWdlbnQiLCJfdXNlU3RhdGU2Iiwic2V0UmVhY3REZXZUb29sc0FnZW50IiwiaW5zcGVjdG9yU3Vic2NyaXB0aW9uIiwiUkNURGV2aWNlRXZlbnRFbWl0dGVyIiwiYWRkTGlzdGVuZXIiLCJ2YWx1ZSIsInJlYWN0RGV2VG9vbHNBZ2VudExpc3RlbmVyIiwib24iLCJfaW5zcGVjdG9yU3Vic2NyaXB0aW8iLCJyZW1vdmUiLCJvZmYiLCJpbm5lclZpZXciLCJjb2xsYXBzYWJsZSIsInBvaW50ZXJFdmVudHMiLCJzdHlsZSIsInN0eWxlcyIsImNvbnRhaW5lciIsInJlZiIsImsiLCJSb290VGFnQ29udGV4dCIsIlByb3ZpZGVyIiwiY3JlYXRlUm9vdFRhZyIsImpzeHMiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiZmxleCIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkFwcENvbnRhaW5lci1kZXYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICogQG9uY2FsbCByZWFjdF9uYXRpdmVcbiAqL1xuXG5pbXBvcnQgdHlwZSB7XG4gIFJlYWN0RGV2VG9vbHNBZ2VudCxcbiAgUmVhY3REZXZUb29sc0dsb2JhbEhvb2ssXG59IGZyb20gJy4uL1R5cGVzL1JlYWN0RGV2VG9vbHNUeXBlcyc7XG5pbXBvcnQgdHlwZSB7UHJvcHN9IGZyb20gJy4vQXBwQ29udGFpbmVyJztcblxuaW1wb3J0IFJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzIGZyb20gJy4uL0NvbXBvbmVudHMvVmlldy9SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcyc7XG5pbXBvcnQgVmlldyBmcm9tICcuLi9Db21wb25lbnRzL1ZpZXcvVmlldyc7XG5pbXBvcnQgRGVidWdnaW5nT3ZlcmxheSBmcm9tICcuLi9EZWJ1Z2dpbmcvRGVidWdnaW5nT3ZlcmxheSc7XG5pbXBvcnQgdXNlU3Vic2NyaWJlVG9EZWJ1Z2dpbmdPdmVybGF5UmVnaXN0cnkgZnJvbSAnLi4vRGVidWdnaW5nL3VzZVN1YnNjcmliZVRvRGVidWdnaW5nT3ZlcmxheVJlZ2lzdHJ5JztcbmltcG9ydCBSQ1REZXZpY2VFdmVudEVtaXR0ZXIgZnJvbSAnLi4vRXZlbnRFbWl0dGVyL1JDVERldmljZUV2ZW50RW1pdHRlcic7XG5pbXBvcnQgTG9nQm94Tm90aWZpY2F0aW9uQ29udGFpbmVyIGZyb20gJy4uL0xvZ0JveC9Mb2dCb3hOb3RpZmljYXRpb25Db250YWluZXInO1xuaW1wb3J0IFN0eWxlU2hlZXQgZnJvbSAnLi4vU3R5bGVTaGVldC9TdHlsZVNoZWV0JztcbmltcG9ydCB7Um9vdFRhZ0NvbnRleHQsIGNyZWF0ZVJvb3RUYWd9IGZyb20gJy4vUm9vdFRhZyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IHt1c2VFZmZlY3QsIHVzZVN0YXRlLCB1c2VDYWxsYmFja30gPSBSZWFjdDtcblxuY29uc3QgcmVhY3REZXZUb29sc0hvb2s6IFJlYWN0RGV2VG9vbHNHbG9iYWxIb29rID1cbiAgd2luZG93Ll9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztcblxuLy8gUmVxdWlyZWQgZm9yIFJlYWN0IERldlRvb2xzIHRvIHZpZXcgLyBlZGl0IFJlYWN0IE5hdGl2ZSBzdHlsZXMgaW4gRmxpcHBlci5cbi8vIEZsaXBwZXIgZG9lc24ndCBpbmplY3QgdGhlc2UgdmFsdWVzIHdoZW4gaW5pdGlhbGl6aW5nIERldlRvb2xzLlxuaWYgKHJlYWN0RGV2VG9vbHNIb29rKSB7XG4gIHJlYWN0RGV2VG9vbHNIb29rLnJlc29sdmVSTlN0eWxlID0gcmVxdWlyZSgnLi4vU3R5bGVTaGVldC9mbGF0dGVuU3R5bGUnKTtcbiAgcmVhY3REZXZUb29sc0hvb2submF0aXZlU3R5bGVFZGl0b3JWYWxpZEF0dHJpYnV0ZXMgPSBPYmplY3Qua2V5cyhcbiAgICBSZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcyxcbiAgKTtcbn1cblxudHlwZSBJbnNwZWN0b3JEZWZlcnJlZFByb3BzID0ge1xuICBpbnNwZWN0ZWRWaWV3UmVmOiBJbnNwZWN0ZWRWaWV3UmVmLFxuICBvbkluc3BlY3RlZFZpZXdSZXJlbmRlclJlcXVlc3Q6ICgpID0+IHZvaWQsXG4gIHJlYWN0RGV2VG9vbHNBZ2VudD86IFJlYWN0RGV2VG9vbHNBZ2VudCxcbn07XG5cbmNvbnN0IEluc3BlY3RvckRlZmVycmVkID0gKHtcbiAgaW5zcGVjdGVkVmlld1JlZixcbiAgb25JbnNwZWN0ZWRWaWV3UmVyZW5kZXJSZXF1ZXN0LFxuICByZWFjdERldlRvb2xzQWdlbnQsXG59OiBJbnNwZWN0b3JEZWZlcnJlZFByb3BzKSA9PiB7XG4gIC8vIEQzOTM4Mjk2NyBhZGRzIGEgcmVxdWlyZSBjeWNsZTogSW5pdGlhbGl6ZUNvcmUgLT4gQXBwQ29udGFpbmVyIC0+IEluc3BlY3RvciAtPiBJbnNwZWN0b3JQYW5lbCAtPiBTY3JvbGxWaWV3IC0+IEluaXRpYWxpemVDb3JlXG4gIC8vIFdlIGNhbid0IHJlbW92ZSBpdCB5ZXQsIGZhbGxiYWNrIHRvIGR5bmFtaWMgcmVxdWlyZSBmb3Igbm93LiBUaGlzIGlzIHRoZSBvbmx5IHJlYXNvbiB3aHkgdGhpcyBsb2dpYyBpcyBpbiBhIHNlcGFyYXRlIGZ1bmN0aW9uLlxuICBjb25zdCBJbnNwZWN0b3IgPSByZXF1aXJlKCcuLi9JbnNwZWN0b3IvSW5zcGVjdG9yJyk7XG5cbiAgcmV0dXJuIChcbiAgICA8SW5zcGVjdG9yXG4gICAgICBpbnNwZWN0ZWRWaWV3UmVmPXtpbnNwZWN0ZWRWaWV3UmVmfVxuICAgICAgb25SZXF1ZXN0UmVyZW5kZXJBcHA9e29uSW5zcGVjdGVkVmlld1JlcmVuZGVyUmVxdWVzdH1cbiAgICAgIHJlYWN0RGV2VG9vbHNBZ2VudD17cmVhY3REZXZUb29sc0FnZW50fVxuICAgIC8+XG4gICk7XG59O1xuXG50eXBlIFJlYWN0RGV2VG9vbHNPdmVybGF5RGVmZXJyZWRQcm9wcyA9IHtcbiAgaW5zcGVjdGVkVmlld1JlZjogSW5zcGVjdGVkVmlld1JlZixcbiAgcmVhY3REZXZUb29sc0FnZW50OiBSZWFjdERldlRvb2xzQWdlbnQsXG59O1xuXG5jb25zdCBSZWFjdERldlRvb2xzT3ZlcmxheURlZmVycmVkID0gKHtcbiAgaW5zcGVjdGVkVmlld1JlZixcbiAgcmVhY3REZXZUb29sc0FnZW50LFxufTogUmVhY3REZXZUb29sc092ZXJsYXlEZWZlcnJlZFByb3BzKSA9PiB7XG4gIGNvbnN0IFJlYWN0RGV2VG9vbHNPdmVybGF5ID1cbiAgICByZXF1aXJlKCcuLi9JbnNwZWN0b3IvUmVhY3REZXZUb29sc092ZXJsYXknKS5kZWZhdWx0O1xuXG4gIHJldHVybiAoXG4gICAgPFJlYWN0RGV2VG9vbHNPdmVybGF5XG4gICAgICBpbnNwZWN0ZWRWaWV3UmVmPXtpbnNwZWN0ZWRWaWV3UmVmfVxuICAgICAgcmVhY3REZXZUb29sc0FnZW50PXtyZWFjdERldlRvb2xzQWdlbnR9XG4gICAgLz5cbiAgKTtcbn07XG5cbmNvbnN0IEFwcENvbnRhaW5lciA9ICh7XG4gIGNoaWxkcmVuLFxuICBmYWJyaWMsXG4gIGluaXRpYWxQcm9wcyxcbiAgaW50ZXJuYWxfZXhjbHVkZUluc3BlY3RvciA9IGZhbHNlLFxuICBpbnRlcm5hbF9leGNsdWRlTG9nQm94ID0gZmFsc2UsXG4gIHJvb3RUYWcsXG4gIFdyYXBwZXJDb21wb25lbnQsXG4gIHJvb3RWaWV3U3R5bGUsXG59OiBQcm9wcyk6IFJlYWN0Lk5vZGUgPT4ge1xuICBjb25zdCBhcHBDb250YWluZXJSb290Vmlld1JlZjogQXBwQ29udGFpbmVyUm9vdFZpZXdSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGlubmVyVmlld1JlZjogSW5zcGVjdGVkVmlld1JlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgZGVidWdnaW5nT3ZlcmxheVJlZjogRGVidWdnaW5nT3ZlcmxheVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcblxuICB1c2VTdWJzY3JpYmVUb0RlYnVnZ2luZ092ZXJsYXlSZWdpc3RyeShcbiAgICBhcHBDb250YWluZXJSb290Vmlld1JlZixcbiAgICBkZWJ1Z2dpbmdPdmVybGF5UmVmLFxuICApO1xuXG4gIGNvbnN0IFtrZXksIHNldEtleV0gPSB1c2VTdGF0ZSgwKTtcbiAgY29uc3QgW3Nob3VsZFJlbmRlckluc3BlY3Rvciwgc2V0U2hvdWxkUmVuZGVySW5zcGVjdG9yXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3JlYWN0RGV2VG9vbHNBZ2VudCwgc2V0UmVhY3REZXZUb29sc0FnZW50XSA9XG4gICAgdXNlU3RhdGU8UmVhY3REZXZUb29sc0FnZW50IHwgdm9pZD4ocmVhY3REZXZUb29sc0hvb2s/LnJlYWN0RGV2dG9vbHNBZ2VudCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQgaW5zcGVjdG9yU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICBpZiAoIWludGVybmFsX2V4Y2x1ZGVJbnNwZWN0b3IpIHtcbiAgICAgIGluc3BlY3RvclN1YnNjcmlwdGlvbiA9IFJDVERldmljZUV2ZW50RW1pdHRlci5hZGRMaXN0ZW5lcihcbiAgICAgICAgJ3RvZ2dsZUVsZW1lbnRJbnNwZWN0b3InLFxuICAgICAgICAoKSA9PiBzZXRTaG91bGRSZW5kZXJJbnNwZWN0b3IodmFsdWUgPT4gIXZhbHVlKSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgbGV0IHJlYWN0RGV2VG9vbHNBZ2VudExpc3RlbmVyID0gbnVsbDtcbiAgICAvLyBJZiB0aGlzIGlzIGZpcnN0IHJlbmRlciwgc3Vic2NyaWJlIHRvIHRoZSBldmVudCBmcm9tIFJlYWN0IERldlRvb2xzIGhvb2tcbiAgICBpZiAocmVhY3REZXZUb29sc0hvb2sgIT0gbnVsbCAmJiByZWFjdERldlRvb2xzQWdlbnQgPT0gbnVsbCkge1xuICAgICAgcmVhY3REZXZUb29sc0FnZW50TGlzdGVuZXIgPSBzZXRSZWFjdERldlRvb2xzQWdlbnQ7XG4gICAgICByZWFjdERldlRvb2xzSG9vay5vbj8uKCdyZWFjdC1kZXZ0b29scycsIHJlYWN0RGV2VG9vbHNBZ2VudExpc3RlbmVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaW5zcGVjdG9yU3Vic2NyaXB0aW9uPy5yZW1vdmUoKTtcblxuICAgICAgaWYgKFxuICAgICAgICByZWFjdERldlRvb2xzSG9vaz8ub2ZmICE9IG51bGwgJiZcbiAgICAgICAgcmVhY3REZXZUb29sc0FnZW50TGlzdGVuZXIgIT0gbnVsbFxuICAgICAgKSB7XG4gICAgICAgIHJlYWN0RGV2VG9vbHNIb29rLm9mZigncmVhY3QtZGV2dG9vbHMnLCByZWFjdERldlRvb2xzQWdlbnRMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgfTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtdKTtcblxuICBsZXQgaW5uZXJWaWV3OiBSZWFjdC5Ob2RlID0gKFxuICAgIDxWaWV3XG4gICAgICBjb2xsYXBzYWJsZT17cmVhY3REZXZUb29sc0FnZW50ID09IG51bGwgJiYgIXNob3VsZFJlbmRlckluc3BlY3Rvcn1cbiAgICAgIHBvaW50ZXJFdmVudHM9XCJib3gtbm9uZVwiXG4gICAgICBrZXk9e2tleX1cbiAgICAgIHN0eWxlPXtyb290Vmlld1N0eWxlIHx8IHN0eWxlcy5jb250YWluZXJ9XG4gICAgICByZWY9e2lubmVyVmlld1JlZn0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9WaWV3PlxuICApO1xuXG4gIGlmIChXcmFwcGVyQ29tcG9uZW50ICE9IG51bGwpIHtcbiAgICBpbm5lclZpZXcgPSAoXG4gICAgICA8V3JhcHBlckNvbXBvbmVudCBpbml0aWFsUHJvcHM9e2luaXRpYWxQcm9wc30gZmFicmljPXtmYWJyaWMgPT09IHRydWV9PlxuICAgICAgICB7aW5uZXJWaWV3fVxuICAgICAgPC9XcmFwcGVyQ29tcG9uZW50PlxuICAgICk7XG4gIH1cblxuICBjb25zdCBvbkluc3BlY3RlZFZpZXdSZXJlbmRlclJlcXVlc3QgPSB1c2VDYWxsYmFjayhcbiAgICAoKSA9PiBzZXRLZXkoayA9PiBrICsgMSksXG4gICAgW10sXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8Um9vdFRhZ0NvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NyZWF0ZVJvb3RUYWcocm9vdFRhZyl9PlxuICAgICAgPFZpZXdcbiAgICAgICAgcmVmPXthcHBDb250YWluZXJSb290Vmlld1JlZn1cbiAgICAgICAgc3R5bGU9e3Jvb3RWaWV3U3R5bGUgfHwgc3R5bGVzLmNvbnRhaW5lcn1cbiAgICAgICAgcG9pbnRlckV2ZW50cz1cImJveC1ub25lXCI+XG4gICAgICAgIHtpbm5lclZpZXd9XG5cbiAgICAgICAgPERlYnVnZ2luZ092ZXJsYXkgcmVmPXtkZWJ1Z2dpbmdPdmVybGF5UmVmfSAvPlxuXG4gICAgICAgIHtyZWFjdERldlRvb2xzQWdlbnQgIT0gbnVsbCAmJiAoXG4gICAgICAgICAgPFJlYWN0RGV2VG9vbHNPdmVybGF5RGVmZXJyZWRcbiAgICAgICAgICAgIGluc3BlY3RlZFZpZXdSZWY9e2lubmVyVmlld1JlZn1cbiAgICAgICAgICAgIHJlYWN0RGV2VG9vbHNBZ2VudD17cmVhY3REZXZUb29sc0FnZW50fVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG5cbiAgICAgICAge3Nob3VsZFJlbmRlckluc3BlY3RvciAmJiAoXG4gICAgICAgICAgPEluc3BlY3RvckRlZmVycmVkXG4gICAgICAgICAgICBpbnNwZWN0ZWRWaWV3UmVmPXtpbm5lclZpZXdSZWZ9XG4gICAgICAgICAgICBvbkluc3BlY3RlZFZpZXdSZXJlbmRlclJlcXVlc3Q9e29uSW5zcGVjdGVkVmlld1JlcmVuZGVyUmVxdWVzdH1cbiAgICAgICAgICAgIHJlYWN0RGV2VG9vbHNBZ2VudD17cmVhY3REZXZUb29sc0FnZW50fVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG5cbiAgICAgICAgeyFpbnRlcm5hbF9leGNsdWRlTG9nQm94ICYmIDxMb2dCb3hOb3RpZmljYXRpb25Db250YWluZXIgLz59XG4gICAgICA8L1ZpZXc+XG4gICAgPC9Sb290VGFnQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn07XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgY29udGFpbmVyOiB7ZmxleDogMX0sXG59KTtcblxuZXhwb3J0IHR5cGUgQXBwQ29udGFpbmVyUm9vdFZpZXdSZWYgPSBSZWFjdC5SZWZPYmplY3Q8UmVhY3QuRWxlbWVudFJlZjxcbiAgdHlwZW9mIFZpZXcsXG4+IHwgbnVsbD47XG5leHBvcnQgdHlwZSBJbnNwZWN0ZWRWaWV3UmVmID0gUmVhY3QuUmVmT2JqZWN0PFJlYWN0LkVsZW1lbnRSZWY8XG4gIHR5cGVvZiBWaWV3LFxuPiB8IG51bGw+O1xuZXhwb3J0IHR5cGUgRGVidWdnaW5nT3ZlcmxheVJlZiA9IFJlYWN0LlJlZk9iamVjdDxSZWFjdC5FbGVtZW50UmVmPFxuICB0eXBlb2YgRGVidWdnaW5nT3ZlcmxheSxcbj4gfCBudWxsPjtcblxuZXhwb3J0IGRlZmF1bHQgQXBwQ29udGFpbmVyO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFpQkEsSUFBQUEsMkJBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLEtBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLGlCQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyx1Q0FBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUksc0JBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFLLDRCQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBTSxXQUFBLEdBQUFQLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBTyxRQUFBLEdBQUFQLE9BQUE7QUFDQSxJQUFBUSxLQUFBLEdBQUFDLHVCQUFBLENBQUFULE9BQUE7QUFBK0IsSUFBQVUsV0FBQSxHQUFBVixPQUFBO0FBQUEsU0FBQVMsd0JBQUFFLENBQUEsRUFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFKLHVCQUFBLFlBQUFBLHdCQUFBRSxDQUFBLEVBQUFDLENBQUEsU0FBQUEsQ0FBQSxJQUFBRCxDQUFBLElBQUFBLENBQUEsQ0FBQUssVUFBQSxTQUFBTCxDQUFBLE1BQUFNLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLEtBQUFDLFNBQUEsUUFBQUMsT0FBQSxFQUFBVixDQUFBLGlCQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFNBQUFRLENBQUEsTUFBQUYsQ0FBQSxHQUFBTCxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxR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