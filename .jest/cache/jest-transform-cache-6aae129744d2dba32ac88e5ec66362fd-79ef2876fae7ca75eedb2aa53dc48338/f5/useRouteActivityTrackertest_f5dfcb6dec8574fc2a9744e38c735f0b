054c95e82f2df7aa3f30c162b3fa4720
_getJestObj().mock('expo-router', function () {
  return {
    useSegments: jest.fn(function () {
      return [];
    }),
    usePathname: jest.fn(function () {
      return '/';
    })
  };
});
_getJestObj().mock('../../src/hooks/useActivityMetrics', function () {
  return {
    __esModule: true,
    default: jest.fn(function () {
      return {
        startSession: jest.fn(),
        endSession: jest.fn(),
        updateStreak: jest.fn()
      };
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactNative = require("@testing-library/react-native");
var _useRouteActivityTracker = _interopRequireDefault(require("../../src/hooks/useRouteActivityTracker"));
function _getJestObj() {
  var _require1 = require("@jest/globals"),
    jest = _require1.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useRouteActivityTracker', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('Fonctions utilitaires extraites', function () {
    it('devrait détecter correctement les exercices', function () {
      var _require = require('expo-router'),
        useSegments = _require.useSegments;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      var hook = (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(hook.result.current).toBeDefined();
      useSegments.mockReturnValue(['level', 'GrammarExercise']);
      hook = (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(hook.result.current).toBeDefined();
      useSegments.mockReturnValue(['level', 'Assessment']);
      hook = (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(hook.result.current).toBeDefined();
    });
    it('devrait gérer les transitions entre exercices', function () {
      var mockStartSession = jest.fn();
      var mockEndSession = jest.fn();
      var mockUpdateStreak = jest.fn();
      var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
      useActivityMetrics.mockReturnValue({
        startSession: mockStartSession,
        endSession: mockEndSession,
        updateStreak: mockUpdateStreak
      });
      var _require2 = require('expo-router'),
        useSegments = _require2.useSegments,
        usePathname = _require2.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      var hook = (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');
      expect(mockStartSession).toHaveBeenCalledTimes(1);
      useSegments.mockReturnValue(['level', 'GrammarExercise']);
      usePathname.mockReturnValue('/level/GrammarExercise');
      hook = (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockEndSession).toHaveBeenCalled();
      expect(mockUpdateStreak).toHaveBeenCalled();
      expect(mockStartSession).toHaveBeenCalledWith('GrammarExercise');
    });
    it('devrait gérer les erreurs de session gracieusement', function () {
      var mockStartSession = jest.fn().mockImplementation(function () {
        throw new Error('Erreur de session');
      });
      var mockEndSession = jest.fn();
      var mockUpdateStreak = jest.fn();
      var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
      useActivityMetrics.mockReturnValue({
        startSession: mockStartSession,
        endSession: mockEndSession,
        updateStreak: mockUpdateStreak
      });
      var _require3 = require('expo-router'),
        useSegments = _require3.useSegments,
        usePathname = _require3.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      expect(function () {
        (0, _reactNative.renderHook)(function () {
          return (0, _useRouteActivityTracker.default)();
        });
      }).not.toThrow();
    });
    it('devrait éviter les re-déclenchements inutiles', function () {
      var mockStartSession = jest.fn();
      var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
      useActivityMetrics.mockReturnValue({
        startSession: mockStartSession,
        endSession: jest.fn(),
        updateStreak: jest.fn()
      });
      var _require4 = require('expo-router'),
        useSegments = _require4.useSegments,
        usePathname = _require4.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      var hook = (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledTimes(1);
      hook = (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      expect(mockStartSession).toHaveBeenCalledTimes(1);
    });
    it('devrait nettoyer correctement lors du démontage', function () {
      var mockEndSession = jest.fn();
      var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
      useActivityMetrics.mockReturnValue({
        startSession: jest.fn(),
        endSession: mockEndSession,
        updateStreak: jest.fn()
      });
      var _require5 = require('expo-router'),
        useSegments = _require5.useSegments,
        usePathname = _require5.usePathname;
      useSegments.mockReturnValue(['level', 'VocabularyExercise']);
      usePathname.mockReturnValue('/level/VocabularyExercise');
      var hook = (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
      hook.unmount();
      expect(mockEndSession).toHaveBeenCalled();
    });
  });
  it('devrait s\'initialiser sans erreur', function () {
    var _require6 = require('expo-router'),
      useSegments = _require6.useSegments,
      usePathname = _require6.usePathname;
    useSegments.mockReturnValue(['home']);
    usePathname.mockReturnValue('/home');
    expect(function () {
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
    }).not.toThrow();
  });
  it('devrait détecter un exercice de vocabulaire', function () {
    var mockStartSession = jest.fn();
    var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
    useActivityMetrics.mockReturnValue({
      startSession: mockStartSession,
      endSession: jest.fn(),
      updateStreak: jest.fn()
    });
    var _require7 = require('expo-router'),
      useSegments = _require7.useSegments,
      usePathname = _require7.usePathname;
    useSegments.mockReturnValue(['level', 'VocabularyExercise']);
    usePathname.mockReturnValue('/level/VocabularyExercise');
    (0, _reactNative.renderHook)(function () {
      return (0, _useRouteActivityTracker.default)();
    });
    expect(mockStartSession).toHaveBeenCalledWith('VocabularyExercise');
  });
  it('devrait détecter un assessment', function () {
    var mockStartSession = jest.fn();
    var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
    useActivityMetrics.mockReturnValue({
      startSession: mockStartSession,
      endSession: jest.fn(),
      updateStreak: jest.fn()
    });
    var _require8 = require('expo-router'),
      useSegments = _require8.useSegments,
      usePathname = _require8.usePathname;
    useSegments.mockReturnValue(['level', 'Assessment']);
    usePathname.mockReturnValue('/level/Assessment');
    (0, _reactNative.renderHook)(function () {
      return (0, _useRouteActivityTracker.default)();
    });
    expect(mockStartSession).toHaveBeenCalledWith('Assessment');
  });
  it('ne devrait pas démarrer de session pour une page normale', function () {
    var mockStartSession = jest.fn();
    var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
    useActivityMetrics.mockReturnValue({
      startSession: mockStartSession,
      endSession: jest.fn(),
      updateStreak: jest.fn()
    });
    var _require9 = require('expo-router'),
      useSegments = _require9.useSegments,
      usePathname = _require9.usePathname;
    useSegments.mockReturnValue(['home', 'dashboard']);
    usePathname.mockReturnValue('/home/dashboard');
    (0, _reactNative.renderHook)(function () {
      return (0, _useRouteActivityTracker.default)();
    });
    expect(mockStartSession).not.toHaveBeenCalled();
  });
  it('devrait gérer les segments vides', function () {
    var mockStartSession = jest.fn();
    var useActivityMetrics = require('../../src/hooks/useActivityMetrics').default;
    useActivityMetrics.mockReturnValue({
      startSession: mockStartSession,
      endSession: jest.fn(),
      updateStreak: jest.fn()
    });
    var _require0 = require('expo-router'),
      useSegments = _require0.useSegments,
      usePathname = _require0.usePathname;
    useSegments.mockReturnValue([]);
    usePathname.mockReturnValue('/');
    expect(function () {
      (0, _reactNative.renderHook)(function () {
        return (0, _useRouteActivityTracker.default)();
      });
    }).not.toThrow();
    expect(mockStartSession).not.toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VTZWdtZW50cyIsImplc3QiLCJmbiIsInVzZVBhdGhuYW1lIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJzdGFydFNlc3Npb24iLCJlbmRTZXNzaW9uIiwidXBkYXRlU3RyZWFrIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmUiLCJfdXNlUm91dGVBY3Rpdml0eVRyYWNrZXIiLCJfcmVxdWlyZTEiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwiaXQiLCJfcmVxdWlyZSIsIm1vY2tSZXR1cm5WYWx1ZSIsImhvb2siLCJyZW5kZXJIb29rIiwidXNlUm91dGVBY3Rpdml0eVRyYWNrZXIiLCJleHBlY3QiLCJyZXN1bHQiLCJjdXJyZW50IiwidG9CZURlZmluZWQiLCJtb2NrU3RhcnRTZXNzaW9uIiwibW9ja0VuZFNlc3Npb24iLCJtb2NrVXBkYXRlU3RyZWFrIiwidXNlQWN0aXZpdHlNZXRyaWNzIiwiX3JlcXVpcmUyIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwibW9ja0ltcGxlbWVudGF0aW9uIiwiRXJyb3IiLCJfcmVxdWlyZTMiLCJub3QiLCJ0b1Rocm93IiwiX3JlcXVpcmU0IiwiX3JlcXVpcmU1IiwidW5tb3VudCIsIl9yZXF1aXJlNiIsIl9yZXF1aXJlNyIsIl9yZXF1aXJlOCIsIl9yZXF1aXJlOSIsIl9yZXF1aXJlMCJdLCJzb3VyY2VzIjpbInVzZVJvdXRlQWN0aXZpdHlUcmFja2VyLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gX190ZXN0c19fL2hvb2tzL3VzZVJvdXRlQWN0aXZpdHlUcmFja2VyLnRlc3QuanNcbmltcG9ydCB7IHJlbmRlckhvb2sgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgdXNlUm91dGVBY3Rpdml0eVRyYWNrZXIgZnJvbSAnLi4vLi4vc3JjL2hvb2tzL3VzZVJvdXRlQWN0aXZpdHlUcmFja2VyJztcblxuamVzdC5tb2NrKCdleHBvLXJvdXRlcicsICgpID0+ICh7XG4gIHVzZVNlZ21lbnRzOiBqZXN0LmZuKCgpID0+IFtdKSxcbiAgdXNlUGF0aG5hbWU6IGplc3QuZm4oKCkgPT4gJy8nKSxcbn0pKTtcblxuamVzdC5tb2NrKCcuLi8uLi9zcmMvaG9va3MvdXNlQWN0aXZpdHlNZXRyaWNzJywgKCkgPT4gKHtcbiAgX19lc01vZHVsZTogdHJ1ZSxcbiAgZGVmYXVsdDogamVzdC5mbigoKSA9PiAoe1xuICAgIHN0YXJ0U2Vzc2lvbjogamVzdC5mbigpLFxuICAgIGVuZFNlc3Npb246IGplc3QuZm4oKSxcbiAgICB1cGRhdGVTdHJlYWs6IGplc3QuZm4oKSxcbiAgfSkpLFxufSkpO1xuXG5kZXNjcmliZSgndXNlUm91dGVBY3Rpdml0eVRyYWNrZXInLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICB9KTtcblxuICBkZXNjcmliZSgnRm9uY3Rpb25zIHV0aWxpdGFpcmVzIGV4dHJhaXRlcycsICgpID0+IHtcbiAgICBpdCgnZGV2cmFpdCBkw6l0ZWN0ZXIgY29ycmVjdGVtZW50IGxlcyBleGVyY2ljZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHVzZVNlZ21lbnRzIH0gPSByZXF1aXJlKCdleHBvLXJvdXRlcicpO1xuICAgICAgXG4gICAgICAvLyBUZXN0IGF2ZWMgZGlmZsOpcmVudHMgdHlwZXMgZCdleGVyY2ljZXNcbiAgICAgIHVzZVNlZ21lbnRzLm1vY2tSZXR1cm5WYWx1ZShbJ2xldmVsJywgJ1ZvY2FidWxhcnlFeGVyY2lzZSddKTtcbiAgICAgIGxldCBob29rID0gcmVuZGVySG9vaygoKSA9PiB1c2VSb3V0ZUFjdGl2aXR5VHJhY2tlcigpKTtcbiAgICAgIGV4cGVjdChob29rLnJlc3VsdC5jdXJyZW50KS50b0JlRGVmaW5lZCgpO1xuXG4gICAgICB1c2VTZWdtZW50cy5tb2NrUmV0dXJuVmFsdWUoWydsZXZlbCcsICdHcmFtbWFyRXhlcmNpc2UnXSk7XG4gICAgICBob29rID0gcmVuZGVySG9vaygoKSA9PiB1c2VSb3V0ZUFjdGl2aXR5VHJhY2tlcigpKTtcbiAgICAgIGV4cGVjdChob29rLnJlc3VsdC5jdXJyZW50KS50b0JlRGVmaW5lZCgpO1xuXG4gICAgICB1c2VTZWdtZW50cy5tb2NrUmV0dXJuVmFsdWUoWydsZXZlbCcsICdBc3Nlc3NtZW50J10pO1xuICAgICAgaG9vayA9IHJlbmRlckhvb2soKCkgPT4gdXNlUm91dGVBY3Rpdml0eVRyYWNrZXIoKSk7XG4gICAgICBleHBlY3QoaG9vay5yZXN1bHQuY3VycmVudCkudG9CZURlZmluZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZyYWl0IGfDqXJlciBsZXMgdHJhbnNpdGlvbnMgZW50cmUgZXhlcmNpY2VzJywgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1N0YXJ0U2Vzc2lvbiA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IG1vY2tFbmRTZXNzaW9uID0gamVzdC5mbigpO1xuICAgICAgY29uc3QgbW9ja1VwZGF0ZVN0cmVhayA9IGplc3QuZm4oKTtcbiAgICAgIFxuICAgICAgY29uc3QgdXNlQWN0aXZpdHlNZXRyaWNzID0gcmVxdWlyZSgnLi4vLi4vc3JjL2hvb2tzL3VzZUFjdGl2aXR5TWV0cmljcycpLmRlZmF1bHQ7XG4gICAgICB1c2VBY3Rpdml0eU1ldHJpY3MubW9ja1JldHVyblZhbHVlKHtcbiAgICAgICAgc3RhcnRTZXNzaW9uOiBtb2NrU3RhcnRTZXNzaW9uLFxuICAgICAgICBlbmRTZXNzaW9uOiBtb2NrRW5kU2Vzc2lvbixcbiAgICAgICAgdXBkYXRlU3RyZWFrOiBtb2NrVXBkYXRlU3RyZWFrLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHsgdXNlU2VnbWVudHMsIHVzZVBhdGhuYW1lIH0gPSByZXF1aXJlKCdleHBvLXJvdXRlcicpO1xuICAgICAgXG4gICAgICAvLyBQcmVtaWVyIGV4ZXJjaWNlXG4gICAgICB1c2VTZWdtZW50cy5tb2NrUmV0dXJuVmFsdWUoWydsZXZlbCcsICdWb2NhYnVsYXJ5RXhlcmNpc2UnXSk7XG4gICAgICB1c2VQYXRobmFtZS5tb2NrUmV0dXJuVmFsdWUoJy9sZXZlbC9Wb2NhYnVsYXJ5RXhlcmNpc2UnKTtcbiAgICAgIGxldCBob29rID0gcmVuZGVySG9vaygoKSA9PiB1c2VSb3V0ZUFjdGl2aXR5VHJhY2tlcigpKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KG1vY2tTdGFydFNlc3Npb24pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdWb2NhYnVsYXJ5RXhlcmNpc2UnKTtcbiAgICAgIGV4cGVjdChtb2NrU3RhcnRTZXNzaW9uKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG5cbiAgICAgIC8vIERldXhpw6htZSBleGVyY2ljZSAoZGV2cmFpdCBhcnLDqnRlciBsZSBwcmVtaWVyIGV0IGTDqW1hcnJlciBsZSBzZWNvbmQpXG4gICAgICB1c2VTZWdtZW50cy5tb2NrUmV0dXJuVmFsdWUoWydsZXZlbCcsICdHcmFtbWFyRXhlcmNpc2UnXSk7XG4gICAgICB1c2VQYXRobmFtZS5tb2NrUmV0dXJuVmFsdWUoJy9sZXZlbC9HcmFtbWFyRXhlcmNpc2UnKTtcbiAgICAgIGhvb2sgPSByZW5kZXJIb29rKCgpID0+IHVzZVJvdXRlQWN0aXZpdHlUcmFja2VyKCkpO1xuICAgICAgXG4gICAgICBleHBlY3QobW9ja0VuZFNlc3Npb24pLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChtb2NrVXBkYXRlU3RyZWFrKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICBleHBlY3QobW9ja1N0YXJ0U2Vzc2lvbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ0dyYW1tYXJFeGVyY2lzZScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldnJhaXQgZ8OpcmVyIGxlcyBlcnJldXJzIGRlIHNlc3Npb24gZ3JhY2lldXNlbWVudCcsICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tTdGFydFNlc3Npb24gPSBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFcnJldXIgZGUgc2Vzc2lvbicpO1xuICAgICAgfSk7XG4gICAgICBjb25zdCBtb2NrRW5kU2Vzc2lvbiA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IG1vY2tVcGRhdGVTdHJlYWsgPSBqZXN0LmZuKCk7XG4gICAgICBcbiAgICAgIGNvbnN0IHVzZUFjdGl2aXR5TWV0cmljcyA9IHJlcXVpcmUoJy4uLy4uL3NyYy9ob29rcy91c2VBY3Rpdml0eU1ldHJpY3MnKS5kZWZhdWx0O1xuICAgICAgdXNlQWN0aXZpdHlNZXRyaWNzLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICAgIHN0YXJ0U2Vzc2lvbjogbW9ja1N0YXJ0U2Vzc2lvbixcbiAgICAgICAgZW5kU2Vzc2lvbjogbW9ja0VuZFNlc3Npb24sXG4gICAgICAgIHVwZGF0ZVN0cmVhazogbW9ja1VwZGF0ZVN0cmVhayxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB7IHVzZVNlZ21lbnRzLCB1c2VQYXRobmFtZSB9ID0gcmVxdWlyZSgnZXhwby1yb3V0ZXInKTtcbiAgICAgIHVzZVNlZ21lbnRzLm1vY2tSZXR1cm5WYWx1ZShbJ2xldmVsJywgJ1ZvY2FidWxhcnlFeGVyY2lzZSddKTtcbiAgICAgIHVzZVBhdGhuYW1lLm1vY2tSZXR1cm5WYWx1ZSgnL2xldmVsL1ZvY2FidWxhcnlFeGVyY2lzZScpO1xuXG4gICAgICAvLyBOZSBkZXZyYWl0IHBhcyBwbGFudGVyIG1hbGdyw6kgbCdlcnJldXJcbiAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgIHJlbmRlckhvb2soKCkgPT4gdXNlUm91dGVBY3Rpdml0eVRyYWNrZXIoKSk7XG4gICAgICB9KS5ub3QudG9UaHJvdygpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldnJhaXQgw6l2aXRlciBsZXMgcmUtZMOpY2xlbmNoZW1lbnRzIGludXRpbGVzJywgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1N0YXJ0U2Vzc2lvbiA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IHVzZUFjdGl2aXR5TWV0cmljcyA9IHJlcXVpcmUoJy4uLy4uL3NyYy9ob29rcy91c2VBY3Rpdml0eU1ldHJpY3MnKS5kZWZhdWx0O1xuICAgICAgdXNlQWN0aXZpdHlNZXRyaWNzLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICAgIHN0YXJ0U2Vzc2lvbjogbW9ja1N0YXJ0U2Vzc2lvbixcbiAgICAgICAgZW5kU2Vzc2lvbjogamVzdC5mbigpLFxuICAgICAgICB1cGRhdGVTdHJlYWs6IGplc3QuZm4oKSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB7IHVzZVNlZ21lbnRzLCB1c2VQYXRobmFtZSB9ID0gcmVxdWlyZSgnZXhwby1yb3V0ZXInKTtcbiAgICAgIHVzZVNlZ21lbnRzLm1vY2tSZXR1cm5WYWx1ZShbJ2xldmVsJywgJ1ZvY2FidWxhcnlFeGVyY2lzZSddKTtcbiAgICAgIHVzZVBhdGhuYW1lLm1vY2tSZXR1cm5WYWx1ZSgnL2xldmVsL1ZvY2FidWxhcnlFeGVyY2lzZScpO1xuXG4gICAgICAvLyBQcmVtaWVyIHJlbmR1XG4gICAgICBsZXQgaG9vayA9IHJlbmRlckhvb2soKCkgPT4gdXNlUm91dGVBY3Rpdml0eVRyYWNrZXIoKSk7XG4gICAgICBleHBlY3QobW9ja1N0YXJ0U2Vzc2lvbikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuXG4gICAgICAvLyBNw6ptZSBwYXRobmFtZSwgbmUgZGV2cmFpdCBwYXMgcmVkw6ltYXJyZXJcbiAgICAgIGhvb2sgPSByZW5kZXJIb29rKCgpID0+IHVzZVJvdXRlQWN0aXZpdHlUcmFja2VyKCkpO1xuICAgICAgZXhwZWN0KG1vY2tTdGFydFNlc3Npb24pLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTsgLy8gVG91am91cnMgMSwgcGFzIDJcbiAgICB9KTtcblxuICAgIGl0KCdkZXZyYWl0IG5ldHRveWVyIGNvcnJlY3RlbWVudCBsb3JzIGR1IGTDqW1vbnRhZ2UnLCAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrRW5kU2Vzc2lvbiA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IHVzZUFjdGl2aXR5TWV0cmljcyA9IHJlcXVpcmUoJy4uLy4uL3NyYy9ob29rcy91c2VBY3Rpdml0eU1ldHJpY3MnKS5kZWZhdWx0O1xuICAgICAgdXNlQWN0aXZpdHlNZXRyaWNzLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICAgIHN0YXJ0U2Vzc2lvbjogamVzdC5mbigpLFxuICAgICAgICBlbmRTZXNzaW9uOiBtb2NrRW5kU2Vzc2lvbixcbiAgICAgICAgdXBkYXRlU3RyZWFrOiBqZXN0LmZuKCksXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgeyB1c2VTZWdtZW50cywgdXNlUGF0aG5hbWUgfSA9IHJlcXVpcmUoJ2V4cG8tcm91dGVyJyk7XG4gICAgICB1c2VTZWdtZW50cy5tb2NrUmV0dXJuVmFsdWUoWydsZXZlbCcsICdWb2NhYnVsYXJ5RXhlcmNpc2UnXSk7XG4gICAgICB1c2VQYXRobmFtZS5tb2NrUmV0dXJuVmFsdWUoJy9sZXZlbC9Wb2NhYnVsYXJ5RXhlcmNpc2UnKTtcblxuICAgICAgLy8gRMOpbWFycmVyIHVuZSBzZXNzaW9uXG4gICAgICBsZXQgaG9vayA9IHJlbmRlckhvb2soKCkgPT4gdXNlUm91dGVBY3Rpdml0eVRyYWNrZXIoKSk7XG4gICAgICBcbiAgICAgIC8vIFNpbXVsZXIgbGUgZMOpbW9udGFnZVxuICAgICAgaG9vay51bm1vdW50KCk7XG4gICAgICBcbiAgICAgIC8vIFbDqXJpZmllciBxdWUgZW5kU2Vzc2lvbiBhIMOpdMOpIGFwcGVsw6lcbiAgICAgIGV4cGVjdChtb2NrRW5kU2Vzc2lvbikudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBpdCgnZGV2cmFpdCBzXFwnaW5pdGlhbGlzZXIgc2FucyBlcnJldXInLCAoKSA9PiB7XG4gICAgY29uc3QgeyB1c2VTZWdtZW50cywgdXNlUGF0aG5hbWUgfSA9IHJlcXVpcmUoJ2V4cG8tcm91dGVyJyk7XG4gICAgdXNlU2VnbWVudHMubW9ja1JldHVyblZhbHVlKFsnaG9tZSddKTtcbiAgICB1c2VQYXRobmFtZS5tb2NrUmV0dXJuVmFsdWUoJy9ob21lJyk7XG5cbiAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgcmVuZGVySG9vaygoKSA9PiB1c2VSb3V0ZUFjdGl2aXR5VHJhY2tlcigpKTtcbiAgICB9KS5ub3QudG9UaHJvdygpO1xuICB9KTtcblxuICBpdCgnZGV2cmFpdCBkw6l0ZWN0ZXIgdW4gZXhlcmNpY2UgZGUgdm9jYWJ1bGFpcmUnLCAoKSA9PiB7XG4gICAgY29uc3QgbW9ja1N0YXJ0U2Vzc2lvbiA9IGplc3QuZm4oKTtcbiAgICBjb25zdCB1c2VBY3Rpdml0eU1ldHJpY3MgPSByZXF1aXJlKCcuLi8uLi9zcmMvaG9va3MvdXNlQWN0aXZpdHlNZXRyaWNzJykuZGVmYXVsdDtcbiAgICB1c2VBY3Rpdml0eU1ldHJpY3MubW9ja1JldHVyblZhbHVlKHtcbiAgICAgIHN0YXJ0U2Vzc2lvbjogbW9ja1N0YXJ0U2Vzc2lvbixcbiAgICAgIGVuZFNlc3Npb246IGplc3QuZm4oKSxcbiAgICAgIHVwZGF0ZVN0cmVhazogamVzdC5mbigpLFxuICAgIH0pO1xuXG4gICAgY29uc3QgeyB1c2VTZWdtZW50cywgdXNlUGF0aG5hbWUgfSA9IHJlcXVpcmUoJ2V4cG8tcm91dGVyJyk7XG4gICAgdXNlU2VnbWVudHMubW9ja1JldHVyblZhbHVlKFsnbGV2ZWwnLCAnVm9jYWJ1bGFyeUV4ZXJjaXNlJ10pO1xuICAgIHVzZVBhdGhuYW1lLm1vY2tSZXR1cm5WYWx1ZSgnL2xldmVsL1ZvY2FidWxhcnlFeGVyY2lzZScpO1xuXG4gICAgcmVuZGVySG9vaygoKSA9PiB1c2VSb3V0ZUFjdGl2aXR5VHJhY2tlcigpKTtcblxuICAgIGV4cGVjdChtb2NrU3RhcnRTZXNzaW9uKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnVm9jYWJ1bGFyeUV4ZXJjaXNlJyk7XG4gIH0pO1xuXG4gIGl0KCdkZXZyYWl0IGTDqXRlY3RlciB1biBhc3Nlc3NtZW50JywgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tTdGFydFNlc3Npb24gPSBqZXN0LmZuKCk7XG4gICAgY29uc3QgdXNlQWN0aXZpdHlNZXRyaWNzID0gcmVxdWlyZSgnLi4vLi4vc3JjL2hvb2tzL3VzZUFjdGl2aXR5TWV0cmljcycpLmRlZmF1bHQ7XG4gICAgdXNlQWN0aXZpdHlNZXRyaWNzLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICBzdGFydFNlc3Npb246IG1vY2tTdGFydFNlc3Npb24sXG4gICAgICBlbmRTZXNzaW9uOiBqZXN0LmZuKCksXG4gICAgICB1cGRhdGVTdHJlYWs6IGplc3QuZm4oKSxcbiAgICB9KTtcblxuICAgIGNvbnN0IHsgdXNlU2VnbWVudHMsIHVzZVBhdGhuYW1lIH0gPSByZXF1aXJlKCdleHBvLXJvdXRlcicpO1xuICAgIHVzZVNlZ21lbnRzLm1vY2tSZXR1cm5WYWx1ZShbJ2xldmVsJywgJ0Fzc2Vzc21lbnQnXSk7XG4gICAgdXNlUGF0aG5hbWUubW9ja1JldHVyblZhbHVlKCcvbGV2ZWwvQXNzZXNzbWVudCcpO1xuXG4gICAgcmVuZGVySG9vaygoKSA9PiB1c2VSb3V0ZUFjdGl2aXR5VHJhY2tlcigpKTtcblxuICAgIGV4cGVjdChtb2NrU3RhcnRTZXNzaW9uKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnQXNzZXNzbWVudCcpO1xuICB9KTtcblxuICBpdCgnbmUgZGV2cmFpdCBwYXMgZMOpbWFycmVyIGRlIHNlc3Npb24gcG91ciB1bmUgcGFnZSBub3JtYWxlJywgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tTdGFydFNlc3Npb24gPSBqZXN0LmZuKCk7XG4gICAgY29uc3QgdXNlQWN0aXZpdHlNZXRyaWNzID0gcmVxdWlyZSgnLi4vLi4vc3JjL2hvb2tzL3VzZUFjdGl2aXR5TWV0cmljcycpLmRlZmF1bHQ7XG4gICAgdXNlQWN0aXZpdHlNZXRyaWNzLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICBzdGFydFNlc3Npb246IG1vY2tTdGFydFNlc3Npb24sXG4gICAgICBlbmRTZXNzaW9uOiBqZXN0LmZuKCksXG4gICAgICB1cGRhdGVTdHJlYWs6IGplc3QuZm4oKSxcbiAgICB9KTtcblxuICAgIGNvbnN0IHsgdXNlU2VnbWVudHMsIHVzZVBhdGhuYW1lIH0gPSByZXF1aXJlKCdleHBvLXJvdXRlcicpO1xuICAgIHVzZVNlZ21lbnRzLm1vY2tSZXR1cm5WYWx1ZShbJ2hvbWUnLCAnZGFzaGJvYXJkJ10pO1xuICAgIHVzZVBhdGhuYW1lLm1vY2tSZXR1cm5WYWx1ZSgnL2hvbWUvZGFzaGJvYXJkJyk7XG5cbiAgICByZW5kZXJIb29rKCgpID0+IHVzZVJvdXRlQWN0aXZpdHlUcmFja2VyKCkpO1xuXG4gICAgZXhwZWN0KG1vY2tTdGFydFNlc3Npb24pLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xuXG4gIGl0KCdkZXZyYWl0IGfDqXJlciBsZXMgc2VnbWVudHMgdmlkZXMnLCAoKSA9PiB7XG4gICAgY29uc3QgbW9ja1N0YXJ0U2Vzc2lvbiA9IGplc3QuZm4oKTtcbiAgICBjb25zdCB1c2VBY3Rpdml0eU1ldHJpY3MgPSByZXF1aXJlKCcuLi8uLi9zcmMvaG9va3MvdXNlQWN0aXZpdHlNZXRyaWNzJykuZGVmYXVsdDtcbiAgICB1c2VBY3Rpdml0eU1ldHJpY3MubW9ja1JldHVyblZhbHVlKHtcbiAgICAgIHN0YXJ0U2Vzc2lvbjogbW9ja1N0YXJ0U2Vzc2lvbixcbiAgICAgIGVuZFNlc3Npb246IGplc3QuZm4oKSxcbiAgICAgIHVwZGF0ZVN0cmVhazogamVzdC5mbigpLFxuICAgIH0pO1xuXG4gICAgY29uc3QgeyB1c2VTZWdtZW50cywgdXNlUGF0aG5hbWUgfSA9IHJlcXVpcmUoJ2V4cG8tcm91dGVyJyk7XG4gICAgdXNlU2VnbWVudHMubW9ja1JldHVyblZhbHVlKFtdKTtcbiAgICB1c2VQYXRobmFtZS5tb2NrUmV0dXJuVmFsdWUoJy8nKTtcblxuICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICByZW5kZXJIb29rKCgpID0+IHVzZVJvdXRlQWN0aXZpdHlUcmFja2VyKCkpO1xuICAgIH0pLm5vdC50b1Rocm93KCk7XG5cbiAgICBleHBlY3QobW9ja1N0YXJ0U2Vzc2lvbikubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiJBQUlBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxhQUFhLEVBQUU7RUFBQSxPQUFPO0lBQzlCQyxXQUFXLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDO01BQUEsT0FBTSxFQUFFO0lBQUEsRUFBQztJQUM5QkMsV0FBVyxFQUFFRixJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFBLE9BQU0sR0FBRztJQUFBO0VBQ2hDLENBQUM7QUFBQSxDQUFDLENBQUM7QUFFSEosV0FBQSxHQUFLQyxJQUFJLENBQUMsb0NBQW9DLEVBQUU7RUFBQSxPQUFPO0lBQ3JESyxVQUFVLEVBQUUsSUFBSTtJQUNoQkMsT0FBTyxFQUFFSixJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFBLE9BQU87UUFDdEJJLFlBQVksRUFBRUwsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztRQUN2QkssVUFBVSxFQUFFTixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO1FBQ3JCTSxZQUFZLEVBQUVQLElBQUksQ0FBQ0MsRUFBRSxDQUFDO01BQ3hCLENBQUM7SUFBQSxDQUFDO0VBQ0osQ0FBQztBQUFBLENBQUMsQ0FBQztBQUFDLElBQUFPLHNCQUFBLEdBQUFDLE9BQUE7QUFmSixJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSx3QkFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQThFLFNBQUFaLFlBQUE7RUFBQSxJQUFBZSxTQUFBLEdBQUFILE9BQUE7SUFBQVQsSUFBQSxHQUFBWSxTQUFBLENBQUFaLElBQUE7RUFBQUgsV0FBQSxZQUFBQSxZQUFBO0lBQUEsT0FBQUcsSUFBQTtFQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBZ0I5RWEsUUFBUSxD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