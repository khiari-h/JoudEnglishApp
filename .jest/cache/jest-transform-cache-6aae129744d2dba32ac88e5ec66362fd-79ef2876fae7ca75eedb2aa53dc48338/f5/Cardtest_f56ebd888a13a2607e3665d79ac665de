1be4b92061c6e3c3400740fd87c16391
_getJestObj().mock('../../../src/components/ui/ProgressBar', function () {
  var React = require('react');
  var _require = require('react-native'),
    View = _require.View,
    Text = _require.Text;
  return function (_ref) {
    var progress = _ref.progress,
      _ref$testID = _ref.testID,
      testID = _ref$testID === void 0 ? 'progress-bar' : _ref$testID,
      showPercentage = _ref.showPercentage,
      percentageFormatter = _ref.percentageFormatter,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    return (0, _jsxRuntime.jsxs)(View, Object.assign({
      testID: testID
    }, props, {
      children: [(0, _jsxRuntime.jsx)(View, {
        testID: "progress-fill",
        style: {
          width: `${progress}%`
        }
      }), showPercentage && (0, _jsxRuntime.jsx)(Text, {
        testID: "progress-percentage",
        children: percentageFormatter ? percentageFormatter(progress) : `${progress}%`
      })]
    }));
  };
});
_getJestObj().mock('@expo/vector-icons', function () {
  return {
    Ionicons: function Ionicons(_ref2) {
      var name = _ref2.name,
        size = _ref2.size,
        color = _ref2.color,
        testID = _ref2.testID,
        props = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
      var React = require('react');
      var _require2 = require('react-native'),
        Text = _require2.Text;
      return React.createElement(Text, Object.assign({}, props, {
        testID: testID || `icon-${name}`
      }), name);
    }
  };
});
_getJestObj().mock('../../../src/components/ui/Card/style', function () {
  return {
    container: {},
    shadow: {},
    bordered: {},
    withSideBorder: {},
    elevated: {},
    margin: {},
    activeCard: {},
    containerCompact: {},
    header: {},
    headerColumn: {},
    headerCompact: {},
    headerLeft: {},
    headerLeftColumn: {},
    headerIconContainer: {},
    headerIconContainerCompact: {},
    headerIcon: {},
    headerTextContainer: {},
    titleWithBadgeContainer: {},
    title: {},
    titleCompact: {},
    titleBadge: {},
    titleBadgeCompact: {},
    titleBadgeText: {},
    titleBadgeTextCompact: {},
    subtitle: {},
    subtitleCompact: {},
    headerRight: {},
    rightIconText: {},
    rightIconTextCompact: {},
    cardBadge: {},
    badgeText: {},
    content: {},
    contentPadding: {},
    contentCompact: {},
    footer: {},
    overlay: {}
  };
});
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  return Object.assign({}, RN, {
    Animated: {
      View: RN.View,
      Value: (0, _createClass2.default)(function Value(value) {
        var _this = this;
        (0, _classCallCheck2.default)(this, Value);
        this.setValue = jest.fn();
        this.interpolate = function () {
          return _this.value;
        };
        this.value = value;
      }),
      timing: jest.fn(function () {
        return {
          start: jest.fn()
        };
      }),
      spring: jest.fn(function () {
        return {
          start: jest.fn()
        };
      }),
      sequence: jest.fn(function () {
        return {
          start: jest.fn()
        };
      }),
      parallel: jest.fn(function () {
        return {
          start: jest.fn()
        };
      })
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _Card = _interopRequireDefault(require("../../../src/components/ui/Card"));
var _ThemeContext = require("../../../src/contexts/ThemeContext");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["progress", "testID", "showPercentage", "percentageFormatter"],
  _excluded2 = ["name", "size", "color", "testID"];
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockThemeContext = {
  colors: {
    primary: '#5E60CE',
    text: '#000000',
    background: '#ffffff'
  }
};
describe('Card', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('should render correctly with title and children', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
        value: mockThemeContext,
        children: (0, _jsxRuntime.jsx)(_Card.default, {
          title: "Test Title",
          children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
            children: "Test Children"
          })
        })
      })),
      getByText = _render.getByText;
    expect(getByText('Test Title')).toBeTruthy();
    expect(getByText('Test Children')).toBeTruthy();
  });
  it('should call onPress when the card is pressed', function () {
    var mockOnPress = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
        value: mockThemeContext,
        children: (0, _jsxRuntime.jsx)(_Card.default, {
          title: "Pressable Card",
          onPress: mockOnPress,
          testID: "pressable-card",
          children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
            children: "Content"
          })
        })
      })),
      getByTestId = _render2.getByTestId;
    _reactNative.fireEvent.press(getByTestId('pressable-card'));
    expect(mockOnPress).toHaveBeenCalledTimes(1);
  });
  it('should render header icon when headerIcon is provided', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
        value: mockThemeContext,
        children: (0, _jsxRuntime.jsx)(_Card.default, {
          title: "Card with Icon",
          headerIcon: "star",
          testID: "card-with-icon",
          children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
            children: "Content"
          })
        })
      })),
      getByTestId = _render3.getByTestId;
    expect(getByTestId('card-with-icon')).toBeTruthy();
    expect(getByTestId('icon-star')).toBeTruthy();
  });
  it('should render progress bar when progress is provided', (0, _asyncToGenerator2.default)(function* () {
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
          value: mockThemeContext,
          children: (0, _jsxRuntime.jsx)(_Card.default, {
            title: "Card with Progress",
            progress: 50,
            testID: "card-with-progress",
            children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
              children: "Content"
            })
          })
        })),
        getByTestId = _render4.getByTestId;
      expect(getByTestId('card-with-progress')).toBeTruthy();
      expect(getByTestId('progress-bar')).toBeTruthy();
      expect(getByTestId('progress-fill')).toBeTruthy();
    }));
  }));
  it('should render footer when footer is provided', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
        value: mockThemeContext,
        children: (0, _jsxRuntime.jsx)(_Card.default, {
          title: "Card with Footer",
          footer: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
            children: "Test Footer"
          }),
          children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
            children: "Content"
          })
        })
      })),
      getByText = _render5.getByText;
    expect(getByText('Test Footer')).toBeTruthy();
  });
  it('should render overlay when showOverlay is true', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
        value: mockThemeContext,
        children: (0, _jsxRuntime.jsx)(_Card.default, {
          title: "Card with Overlay",
          showOverlay: true,
          overlayContent: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
            children: "Overlay Content"
          }),
          children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
            children: "Content"
          })
        })
      })),
      getByText = _render6.getByText;
    expect(getByText('Overlay Content')).toBeTruthy();
  });
  it('should render progress bar with percentage when showPercentage is true', (0, _asyncToGenerator2.default)(function* () {
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
          value: mockThemeContext,
          children: (0, _jsxRuntime.jsx)(_Card.default, {
            title: "Card with Progress Percentage",
            progress: 75,
            showPercentage: true,
            testID: "card-with-percentage",
            children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
              children: "Content"
            })
          })
        })),
        getByTestId = _render7.getByTestId;
      expect(getByTestId('card-with-percentage')).toBeTruthy();
      expect(getByTestId('progress-bar')).toBeTruthy();
      expect(getByTestId('progress-percentage')).toBeTruthy();
    }));
  }));
  it('should render title badge when titleBadge is provided', function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
        value: mockThemeContext,
        children: (0, _jsxRuntime.jsx)(_Card.default, {
          title: "Level",
          titleBadge: "1",
          testID: "card-with-title-badge",
          children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
            children: "Content"
          })
        })
      })),
      getByText = _render8.getByText;
    expect(getByText('Level')).toBeTruthy();
    expect(getByText('1')).toBeTruthy();
  });
  it('should render right icon when rightIcon is provided', function () {
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
        value: mockThemeContext,
        children: (0, _jsxRuntime.jsx)(_Card.default, {
          title: "Card with Right Icon",
          rightIcon: "\uD83C\uDF31",
          testID: "card-with-right-icon",
          children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
            children: "Content"
          })
        })
      })),
      getByText = _render9.getByText;
    expect(getByText('🌱')).toBeTruthy();
  });
  it('should apply compact mode styles when compactMode is true', function () {
    var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
        value: mockThemeContext,
        children: (0, _jsxRuntime.jsx)(_Card.default, {
          title: "Compact Card",
          compactMode: true,
          testID: "compact-card",
          children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
            children: "Content"
          })
        })
      })),
      getByTestId = _render0.getByTestId;
    expect(getByTestId('compact-card')).toBeTruthy();
  });
  it('should render subtitle when provided', function () {
    var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
        value: mockThemeContext,
        children: (0, _jsxRuntime.jsx)(_Card.default, {
          title: "Card Title",
          subtitle: "Card Subtitle",
          children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
            children: "Content"
          })
        })
      })),
      getByText = _render1.getByText;
    expect(getByText('Card Title')).toBeTruthy();
    expect(getByText('Card Subtitle')).toBeTruthy();
  });
  it('should render badge when badge is provided', function () {
    var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
        value: mockThemeContext,
        children: (0, _jsxRuntime.jsx)(_Card.default, {
          title: "Card with Badge",
          badge: "NEW",
          children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
            children: "Content"
          })
        })
      })),
      getByText = _render10.getByText;
    expect(getByText('NEW')).toBeTruthy();
  });
  it('should handle missing theme context gracefully', function () {
    var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Card.default, {
        title: "Card without Theme",
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Content"
        })
      })),
      getByText = _render11.getByText;
    expect(getByText('Card without Theme')).toBeTruthy();
    expect(getByText('Content')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,