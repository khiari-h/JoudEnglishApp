d28cca1fd2c81e97a31bb6f9c0ab4d00
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.disableLock = disableLock;
exports.emergencyReset = emergencyReset;
exports.enableLock = enableLock;
exports.generateRecoveryCode = generateRecoveryCode;
exports.getAutoLockTimeout = getAutoLockTimeout;
exports.isBiometricsEnabled = isBiometricsEnabled;
exports.isEnabled = isEnabled;
exports.lockStorageKeys = void 0;
exports.setAutoLockTimeout = setAutoLockTimeout;
exports.setBiometricsEnabled = setBiometricsEnabled;
exports.setPin = setPin;
exports.setRecoveryCode = setRecoveryCode;
exports.unlockWithBiometrics = unlockWithBiometrics;
exports.verifyPin = verifyPin;
exports.verifyRecovery = verifyRecovery;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var STORAGE_KEYS = {
  ENABLED: 'app_lock.enabled',
  PIN_HASH: 'app_lock.pin_hash',
  PIN_SALT: 'app_lock.pin_salt',
  BIO_ENABLED: 'app_lock.bio_enabled',
  RECOVERY_HASH: 'app_lock.recovery_hash',
  TIMEOUT_SECONDS: 'app_lock.timeout_seconds',
  LOCKOUT_UNTIL: 'app_lock.lockout_until',
  FAILED_ATTEMPTS: 'app_lock.failed_attempts'
};
function simpleHash(input) {
  var hash = 0;
  var str = String(input);
  for (var i = 0; i < str.length; i += 1) {
    hash = (hash << 5) - hash + str.charCodeAt(i);
    hash |= 0;
  }
  return Math.abs(hash).toString(16);
}
function getSecureRandomBytes(_x) {
  return _getSecureRandomBytes.apply(this, arguments);
}
function _getSecureRandomBytes() {
  _getSecureRandomBytes = (0, _asyncToGenerator2.default)(function* (length) {
    try {
      if (typeof require !== 'undefined') {
        try {
          var _require = require('expo-crypto'),
            getRandomBytes = _require.getRandomBytes;
          return yield getRandomBytes(length);
        } catch (expoError) {
          console.warn('expo-crypto not available:', expoError.message);
        }
      }
      try {
        if (typeof crypto !== 'undefined' && crypto.getRandomValues) {
          var randomValues = new Uint8Array(length);
          crypto.getRandomValues(randomValues);
          return randomValues;
        }
      } catch (webCryptoError) {
        console.warn('Web Crypto API failed:', webCryptoError);
      }
      try {
        if (typeof require !== 'undefined') {
          var nodeCrypto = require('crypto');
          return nodeCrypto.randomBytes(length);
        }
      } catch (nodeCryptoError) {
        console.warn('Node.js crypto failed:', nodeCryptoError);
      }
      throw new Error('No secure random source available');
    } catch (error) {
      console.warn('All secure random methods failed, using fallback:', error.message);
      throw error;
    }
  });
  return _getSecureRandomBytes.apply(this, arguments);
}
function secureRandomSalt() {
  return _secureRandomSalt.apply(this, arguments);
}
function _secureRandomSalt() {
  _secureRandomSalt = (0, _asyncToGenerator2.default)(function* () {
    var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 16;
    try {
      var randomBytes = yield getSecureRandomBytes(length);
      var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
      var out = '';
      for (var i = 0; i < length; i += 1) {
        var randomIndex = randomBytes[i] % chars.length;
        out += chars[randomIndex];
      }
      return out;
    } catch (error) {
      console.warn('Secure random failed, using fallback method:', error.message);
      return fallbackRandomSalt(length);
    }
  });
  return _secureRandomSalt.apply(this, arguments);
}
function fallbackRandomSalt() {
  return _fallbackRandomSalt.apply(this, arguments);
}
function _fallbackRandomSalt() {
  _fallbackRandomSalt = (0, _asyncToGenerator2.default)(function* () {
    var _performance, _crypto;
    var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 16;
    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    var out = '';
    var entropySources = [Date.now() % 1000000, process.hrtime ? process.hrtime()[1] : 0, Math.floor(((_performance = performance) == null ? void 0 : _performance.now()) || 0), (_crypto = crypto) != null && _crypto.getRandomValues ? crypto.getRandomValues(new Uint8Array(1))[0] : 0];
    for (var i = 0; i < length; i += 1) {
      var entropy = entropySources.reduce(function (acc, source, index) {
        return acc + source * (index + 1) % chars.length;
      }, i);
      var randomIndex = entropy % chars.length;
      out += chars[randomIndex];
    }
    return out;
  });
  return _fallbackRandomSalt.apply(this, arguments);
}
function generateRecoveryCode() {
  return _generateRecoveryCode.apply(this, arguments);
}
function _generateRecoveryCode() {
  _generateRecoveryCode = (0, _asyncToGenerator2.default)(function* () {
    try {
      var randomBytes = yield getSecureRandomBytes(16);
      var chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';
      var code = '';
      for (var i = 0; i < 16; i += 1) {
        var randomIndex = randomBytes[i] % chars.length;
        code += chars[randomIndex];
      }
      return code;
    } catch (error) {
      console.warn('Secure random failed, using fallback method:', error.message);
      return fallbackGenerateRecoveryCode();
    }
  });
  return _generateRecoveryCode.apply(this, arguments);
}
function fallbackGenerateRecoveryCode() {
  return _fallbackGenerateRecoveryCode.apply(this, arguments);
}
function _fallbackGenerateRecoveryCode() {
  _fallbackGenerateRecoveryCode = (0, _asyncToGenerator2.default)(function* () {
    var _performance2, _crypto2;
    var chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';
    var code = '';
    var entropySources = [Date.now() % 1000000, process.hrtime ? process.hrtime()[1] : 0, Math.floor(((_performance2 = performance) == null ? void 0 : _performance2.now()) || 0), (_crypto2 = crypto) != null && _crypto2.getRandomValues ? crypto.getRandomValues(new Uint8Array(1))[0] : 0];
    for (var i = 0; i < 16; i += 1) {
      var entropy = entropySources.reduce(function (acc, source, index) {
        return acc + source * (index + 1) % chars.length;
      }, i);
      var randomIndex = entropy % chars.length;
      code += chars[randomIndex];
    }
    return code;
  });
  return _fallbackGenerateRecoveryCode.apply(this, arguments);
}
function isEnabled() {
  return _isEnabled.apply(this, arguments);
}
function _isEnabled() {
  _isEnabled = (0, _asyncToGenerator2.default)(function* () {
    var enabled = yield _asyncStorage.default.getItem(STORAGE_KEYS.ENABLED);
    return enabled === '1';
  });
  return _isEnabled.apply(this, arguments);
}
function enableLock() {
  return _enableLock.apply(this, arguments);
}
function _enableLock() {
  _enableLock = (0, _asyncToGenerator2.default)(function* () {
    yield _asyncStorage.default.setItem(STORAGE_KEYS.ENABLED, '1');
    return true;
  });
  return _enableLock.apply(this, arguments);
}
function disableLock() {
  return _disableLock.apply(this, arguments);
}
function _disableLock() {
  _disableLock = (0, _asyncToGenerator2.default)(function* () {
    yield _asyncStorage.default.multiRemove([STORAGE_KEYS.ENABLED, STORAGE_KEYS.PIN_HASH, STORAGE_KEYS.PIN_SALT, STORAGE_KEYS.BIO_ENABLED, STORAGE_KEYS.RECOVERY_HASH, STORAGE_KEYS.TIMEOUT_SECONDS, STORAGE_KEYS.LOCKOUT_UNTIL, STORAGE_KEYS.FAILED_ATTEMPTS]);
    return true;
  });
  return _disableLock.apply(this, arguments);
}
function setPin(_x2) {
  return _setPin.apply(this, arguments);
}
function _setPin() {
  _setPin = (0, _asyncToGenerator2.default)(function* (pin) {
    var salt = yield secureRandomSalt();
    var pinHash = simpleHash(`${salt}:${pin}`);
    yield _asyncStorage.default.setItem(STORAGE_KEYS.PIN_SALT, salt);
    yield _asyncStorage.default.setItem(STORAGE_KEYS.PIN_HASH, pinHash);
    return true;
  });
  return _setPin.apply(this, arguments);
}
function verifyPin(_x3) {
  return _verifyPin.apply(this, arguments);
}
function _verifyPin() {
  _verifyPin = (0, _asyncToGenerator2.default)(function* (pin) {
    var lockoutUntil = Number((yield _asyncStorage.default.getItem(STORAGE_KEYS.LOCKOUT_UNTIL)) || '0');
    var now = Date.now();
    if (lockoutUntil && now < lockoutUntil) {
      return {
        ok: false,
        reason: 'lockout'
      };
    }
    var salt = yield _asyncStorage.default.getItem(STORAGE_KEYS.PIN_SALT);
    var expected = yield _asyncStorage.default.getItem(STORAGE_KEYS.PIN_HASH);
    if (!salt || !expected) return {
      ok: false
    };
    var given = simpleHash(`${salt}:${pin}`);
    var ok = given === expected;
    var attempts = Number((yield _asyncStorage.default.getItem(STORAGE_KEYS.FAILED_ATTEMPTS)) || '0');
    if (ok) {
      yield _asyncStorage.default.setItem(STORAGE_KEYS.FAILED_ATTEMPTS, '0');
      return {
        ok: true
      };
    }
    attempts += 1;
    yield _asyncStorage.default.setItem(STORAGE_KEYS.FAILED_ATTEMPTS, String(attempts));
    if (attempts >= 5) {
      var lockMs = 30000 * Math.min(4, attempts - 4);
      yield _asyncStorage.default.setItem(STORAGE_KEYS.LOCKOUT_UNTIL, String(now + lockMs));
      return {
        ok: false,
        reason: 'lockout'
      };
    }
    return {
      ok: false
    };
  });
  return _verifyPin.apply(this, arguments);
}
function setBiometricsEnabled(_x4) {
  return _setBiometricsEnabled.apply(this, arguments);
}
function _setBiometricsEnabled() {
  _setBiometricsEnabled = (0, _asyncToGenerator2.default)(function* (enabled) {
    yield _asyncStorage.default.setItem(STORAGE_KEYS.BIO_ENABLED, enabled ? '1' : '0');
    return true;
  });
  return _setBiometricsEnabled.apply(this, arguments);
}
function isBiometricsEnabled() {
  return _isBiometricsEnabled.apply(this, arguments);
}
function _isBiometricsEnabled() {
  _isBiometricsEnabled = (0, _asyncToGenerator2.default)(function* () {
    var v = yield _asyncStorage.default.getItem(STORAGE_KEYS.BIO_ENABLED);
    return v === '1';
  });
  return _isBiometricsEnabled.apply(this, arguments);
}
function unlockWithBiometrics() {
  return _unlockWithBiometrics.apply(this, arguments);
}
function _unlockWithBiometrics() {
  _unlockWithBiometrics = (0, _asyncToGenerator2.default)(function* () {
    var enabled = yield isBiometricsEnabled();
    if (!enabled) return {
      ok: false
    };
    return {
      ok: true
    };
  });
  return _unlockWithBiometrics.apply(this, arguments);
}
function setRecoveryCode(_x5) {
  return _setRecoveryCode.apply(this, arguments);
}
function _setRecoveryCode() {
  _setRecoveryCode = (0, _asyncToGenerator2.default)(function* (code) {
    var hash = simpleHash(code);
    yield _asyncStorage.default.setItem(STORAGE_KEYS.RECOVERY_HASH, hash);
    return true;
  });
  return _setRecoveryCode.apply(this, arguments);
}
function verifyRecovery(_x6) {
  return _verifyRecovery.apply(this, arguments);
}
function _verifyRecovery() {
  _verifyRecovery = (0, _asyncToGenerator2.default)(function* (code) {
    var expected = yield _asyncStorage.default.getItem(STORAGE_KEYS.RECOVERY_HASH);
    if (!expected) return false;
    return simpleHash(code) === expected;
  });
  return _verifyRecovery.apply(this, arguments);
}
function setAutoLockTimeout(_x7) {
  return _setAutoLockTimeout.apply(this, arguments);
}
function _setAutoLockTimeout() {
  _setAutoLockTimeout = (0, _asyncToGenerator2.default)(function* (seconds) {
    yield _asyncStorage.default.setItem(STORAGE_KEYS.TIMEOUT_SECONDS, String(seconds));
    return true;
  });
  return _setAutoLockTimeout.apply(this, arguments);
}
function getAutoLockTimeout() {
  return _getAutoLockTimeout.apply(this, arguments);
}
function _getAutoLockTimeout() {
  _getAutoLockTimeout = (0, _asyncToGenerator2.default)(function* () {
    return Number((yield _asyncStorage.default.getItem(STORAGE_KEYS.TIMEOUT_SECONDS)) || '0');
  });
  return _getAutoLockTimeout.apply(this, arguments);
}
function emergencyReset() {
  return _emergencyReset.apply(this, arguments);
}
function _emergencyReset() {
  _emergencyReset = (0, _asyncToGenerator2.default)(function* () {
    yield disableLock();
    return true;
  });
  return _emergencyReset.apply(this, arguments);
}
var lockStorageKeys = exports.lockStorageKeys = STORAGE_KEYS;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,