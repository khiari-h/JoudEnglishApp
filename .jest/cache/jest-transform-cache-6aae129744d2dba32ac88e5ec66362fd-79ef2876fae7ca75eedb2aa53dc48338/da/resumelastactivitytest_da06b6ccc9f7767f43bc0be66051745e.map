{"version":3,"names":["_getJestObj","mock","useDashboardState","showLevelProgress","setShowLevelProgress","jest","fn","openLevelProgressModal","closeLevelProgressModal","refreshing","activeTab","setActiveTab","onRefresh","getLevelProgress","mockGetLevelProgress","refresh","mockRefresh","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_expoRouter","_Dashboard","LastActivity","_interopRequireWildcard","_ProgressContext","_ThemeContext","_CurrentLevelContext","_jsxRuntime","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","_require","mockLastActivityData","type","level","title","timestamp","Date","now","metadata","categoryIndex","word","totalWords","renderDashboard","render","jsx","ThemeProvider","children","ProgressProvider","CurrentLevelProvider","describe","beforeEach","clearAllMocks","router","push","mockClear","it","mockReturnValue","lastActivity","isLoading","saveActivity","clearActivity","reload","component","act","_component","getByTestId","getByText","waitFor","expect","toBeTruthy","continueButton","fireEvent","press","toHaveBeenCalledWith","pathname","params","_component2","startButton"],"sources":["resume-last-activity.test.js"],"sourcesContent":["// __tests__/integration/resume-last-activity.test.js\nimport React from 'react';\nimport { render, fireEvent, waitFor, act } from '@testing-library/react-native';\nimport { router } from 'expo-router';\nimport Dashboard from '../../src/screens/Dashboard';\nimport * as LastActivity from '../../src/hooks/useLastActivity';\nimport { ProgressProvider } from '../../src/contexts/ProgressContext';\nimport { ThemeProvider } from '../../src/contexts/ThemeContext';\nimport { CurrentLevelProvider } from '../../src/contexts/CurrentLevelContext';\n\n// Mock useDashboardState pour éviter les boucles infinies\njest.mock('../../src/screens/Dashboard/hooks/useDashboardState', () => ({\n  useDashboardState: () => ({\n    showLevelProgress: false,\n    setShowLevelProgress: jest.fn(),\n    openLevelProgressModal: jest.fn(),\n    closeLevelProgressModal: jest.fn(),\n    refreshing: false,\n    activeTab: \"home\",\n    setActiveTab: jest.fn(),\n    onRefresh: jest.fn(),\n  }),\n}));\n\n// Mock de useLastActivity avec fonction stable\njest.mock('../../src/hooks/useLastActivity');\n\n// Mock de useRealTimeProgress\nconst mockRefresh = jest.fn();\nconst mockGetLevelProgress = jest.fn(() => 50);\n\njest.mock('../../src/hooks/useRealTimeProgress', () => () => ({\n  getLevelProgress: mockGetLevelProgress,\n  refresh: mockRefresh,\n}));\n\nconst mockLastActivityData = {\n  type: 'grammar',\n  level: 'A1',\n  title: 'Grammaire de base',\n  timestamp: Date.now(),\n  metadata: {\n    categoryIndex: 1,\n    word: 5,\n    totalWords: 15,\n  },\n};\n\nconst renderDashboard = () => {\n  return render(\n    <ThemeProvider>\n      <ProgressProvider>\n        <CurrentLevelProvider>\n          <Dashboard />\n        </CurrentLevelProvider>\n      </ProgressProvider>\n    </ThemeProvider>\n  );\n};\n\ndescribe('Scénario 2: Reprise de la dernière activité', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    router.push.mockClear();\n  });\n\n  it('devrait afficher la section \"Continuer\" et naviguer correctement', async () => {\n    // Mock avec activité existante\n    LastActivity.default.mockReturnValue({\n      lastActivity: mockLastActivityData,\n      isLoading: false,\n      saveActivity: jest.fn(),\n      clearActivity: jest.fn(),\n      reload: jest.fn(),\n    });\n\n    let component;\n    await act(async () => {\n      component = renderDashboard();\n    });\n\n    const { getByTestId, getByText } = component;\n\n    // Vérifier que la section \"Continuer\" est affichée\n    await waitFor(() => {\n      expect(getByTestId('hero-continue-section')).toBeTruthy();\n    });\n\n    expect(getByText('Grammaire de base')).toBeTruthy();\n    expect(getByText(/Niv A1/)).toBeTruthy();\n    expect(getByText(/Mot 6\\/15/)).toBeTruthy();\n\n    // Cliquer sur le bouton \"Continuer\"\n    const continueButton = getByTestId('continue-activity-button');\n    await act(async () => {\n      fireEvent.press(continueButton);\n    });\n\n    // Vérifier la navigation\n    expect(router.push).toHaveBeenCalledWith({\n      pathname: '/tabs/grammarExercise',\n      params: {\n        level: 'A1',\n      },\n    });\n  });\n\n  it('devrait afficher la section vide s\\'il n\\'y a pas de dernière activité', async () => {\n    // Mock sans activité\n    LastActivity.default.mockReturnValue({\n      lastActivity: null,\n      isLoading: false,\n      saveActivity: jest.fn(),\n      clearActivity: jest.fn(),\n      reload: jest.fn(),\n    });\n\n    let component;\n    await act(async () => {\n      component = renderDashboard();\n    });\n\n    const { getByTestId, getByText } = component;\n\n    // Vérifier que la section vide est affichée\n    await waitFor(() => {\n      expect(getByTestId('hero-empty-section')).toBeTruthy();\n    });\n\n    expect(getByText(\"Commencer l'apprentissage\")).toBeTruthy();\n\n    // Cliquer sur le bouton pour commencer\n    const startButton = getByTestId('level-selection-button');\n    await act(async () => {\n      fireEvent.press(startButton);\n    });\n\n    // Vérifier la navigation\n    expect(router.push).toHaveBeenCalledWith('/tabs/levelSelection');\n  });\n});"],"mappings":"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","ignoreList":[]}