75747708f5c7834f95ae034acc919253
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _ExerciseCard = _interopRequireDefault(require("../../../src/components/exercise-common/ExerciseCard"));
var _jsxRuntime = require("react/jsx-runtime");
describe('ExerciseCard', function () {
  var defaultProps = {
    title: 'Vocabulary Practice',
    description: 'Expand your word knowledge',
    icon: 'ðŸ“š',
    onPress: jest.fn()
  };
  afterEach(function () {
    jest.clearAllMocks();
  });
  it('renders the basic card information correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, defaultProps))),
      getByText = _render.getByText;
    expect(getByText('Vocabulary Practice')).toBeTruthy();
    expect(getByText('Expand your word knowledge')).toBeTruthy();
    expect(getByText('ðŸ“š')).toBeTruthy();
  });
  it('calls onPress when the card is pressed', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, defaultProps))),
      getByText = _render2.getByText;
    _reactNative.fireEvent.press(getByText('Vocabulary Practice'));
    expect(defaultProps.onPress).toHaveBeenCalledTimes(1);
  });
  it('calls onPress when the "Commencer" button is pressed', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, defaultProps))),
      getByText = _render3.getByText;
    _reactNative.fireEvent.press(getByText('Commencer'));
    expect(defaultProps.onPress).toHaveBeenCalledTimes(1);
  });
  it('displays the progress bar correctly', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, defaultProps, {
        progress: 50
      }))),
      getByText = _render4.getByText,
      getByTestId = _render4.getByTestId;
    expect(getByText('50%')).toBeTruthy();
    var progressFill = getByTestId('progress-fill');
    var flatStyle = _reactNative2.StyleSheet.flatten(progressFill.props.style);
    expect(flatStyle.width).toBe('50%');
  });
  it('does not display the progress bar when progress is 0', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, defaultProps, {
        progress: 0
      }))),
      queryByTestId = _render5.queryByTestId;
    expect(queryByTestId('progress-fill')).toBeNull();
  });
  it('displays the "Nouveau" badge only when isNew is true and progress is 0', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, defaultProps, {
        progress: 0,
        isNew: true
      }))),
      getByText = _render6.getByText,
      queryByText = _render6.queryByText,
      rerender = _render6.rerender;
    expect(getByText('Nouveau')).toBeTruthy();
    rerender((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, defaultProps, {
      progress: 50,
      isNew: true
    })));
    expect(queryByText('Nouveau')).toBeNull();
    rerender((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, defaultProps, {
      progress: 0,
      isNew: false
    })));
    expect(queryByText('Nouveau')).toBeNull();
    rerender((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, defaultProps, {
      progress: 50,
      isNew: false
    })));
    expect(queryByText('Nouveau')).toBeNull();
  });
  it('returns null for bottom content when progress is 0 and isNew is false', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, defaultProps, {
        progress: 0,
        isNew: false
      }))),
      queryByTestId = _render7.queryByTestId,
      queryByText = _render7.queryByText;
    expect(queryByTestId('progress-fill')).toBeNull();
    expect(queryByText('Nouveau')).toBeNull();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9yZWFjdE5hdGl2ZTIiLCJfRXhlcmNpc2VDYXJkIiwiX2pzeFJ1bnRpbWUiLCJkZXNjcmliZSIsImRlZmF1bHRQcm9wcyIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJpY29uIiwib25QcmVzcyIsImplc3QiLCJmbiIsImFmdGVyRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJpdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJkZWZhdWx0IiwiT2JqZWN0IiwiYXNzaWduIiwiZ2V0QnlUZXh0IiwiZXhwZWN0IiwidG9CZVRydXRoeSIsIl9yZW5kZXIyIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJfcmVuZGVyMyIsIl9yZW5kZXI0IiwicHJvZ3Jlc3MiLCJnZXRCeVRlc3RJZCIsInByb2dyZXNzRmlsbCIsImZsYXRTdHlsZSIsIlN0eWxlU2hlZXQiLCJmbGF0dGVuIiwicHJvcHMiLCJzdHlsZSIsIndpZHRoIiwidG9CZSIsIl9yZW5kZXI1IiwicXVlcnlCeVRlc3RJZCIsInRvQmVOdWxsIiwiX3JlbmRlcjYiLCJpc05ldyIsInF1ZXJ5QnlUZXh0IiwicmVyZW5kZXIiLCJfcmVuZGVyNyJdLCJzb3VyY2VzIjpbIkV4ZXJjaXNlQ2FyZC50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIF9fdGVzdHNfXy9jb21wb25lbnRzL2V4ZXJjaXNlLWNvbW1vbi9FeGVyY2lzZUNhcmQudGVzdC5qc1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgU3R5bGVTaGVldCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgRXhlcmNpc2VDYXJkIGZyb20gJy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2V4ZXJjaXNlLWNvbW1vbi9FeGVyY2lzZUNhcmQnO1xuXG5kZXNjcmliZSgnRXhlcmNpc2VDYXJkJywgKCkgPT4ge1xuICBjb25zdCBkZWZhdWx0UHJvcHMgPSB7XG4gICAgdGl0bGU6ICdWb2NhYnVsYXJ5IFByYWN0aWNlJyxcbiAgICBkZXNjcmlwdGlvbjogJ0V4cGFuZCB5b3VyIHdvcmQga25vd2xlZGdlJyxcbiAgICBpY29uOiAn8J+TmicsXG4gICAgb25QcmVzczogamVzdC5mbigpLFxuICB9O1xuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gIH0pO1xuXG4gIGl0KCdyZW5kZXJzIHRoZSBiYXNpYyBjYXJkIGluZm9ybWF0aW9uIGNvcnJlY3RseScsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKDxFeGVyY2lzZUNhcmQgey4uLmRlZmF1bHRQcm9wc30gLz4pO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ1ZvY2FidWxhcnkgUHJhY3RpY2UnKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ0V4cGFuZCB5b3VyIHdvcmQga25vd2xlZGdlJykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCfwn5OaJykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ2NhbGxzIG9uUHJlc3Mgd2hlbiB0aGUgY2FyZCBpcyBwcmVzc2VkJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPEV4ZXJjaXNlQ2FyZCB7Li4uZGVmYXVsdFByb3BzfSAvPik7XG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgnVm9jYWJ1bGFyeSBQcmFjdGljZScpKTtcbiAgICBleHBlY3QoZGVmYXVsdFByb3BzLm9uUHJlc3MpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgfSk7XG5cbiAgaXQoJ2NhbGxzIG9uUHJlc3Mgd2hlbiB0aGUgXCJDb21tZW5jZXJcIiBidXR0b24gaXMgcHJlc3NlZCcsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKDxFeGVyY2lzZUNhcmQgey4uLmRlZmF1bHRQcm9wc30gLz4pO1xuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ0NvbW1lbmNlcicpKTtcbiAgICBleHBlY3QoZGVmYXVsdFByb3BzLm9uUHJlc3MpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgfSk7XG5cbiAgaXQoJ2Rpc3BsYXlzIHRoZSBwcm9ncmVzcyBiYXIgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0LCBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgPEV4ZXJjaXNlQ2FyZCB7Li4uZGVmYXVsdFByb3BzfSBwcm9ncmVzcz17NTB9IC8+XG4gICAgKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCc1MCUnKSkudG9CZVRydXRoeSgpO1xuICAgIGNvbnN0IHByb2dyZXNzRmlsbCA9IGdldEJ5VGVzdElkKCdwcm9ncmVzcy1maWxsJyk7XG4gICAgY29uc3QgZmxhdFN0eWxlID0gU3R5bGVTaGVldC5mbGF0dGVuKHByb2dyZXNzRmlsbC5wcm9wcy5zdHlsZSk7XG4gICAgZXhwZWN0KGZsYXRTdHlsZS53aWR0aCkudG9CZSgnNTAlJyk7XG4gIH0pO1xuXG4gIGl0KCdkb2VzIG5vdCBkaXNwbGF5IHRoZSBwcm9ncmVzcyBiYXIgd2hlbiBwcm9ncmVzcyBpcyAwJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgcXVlcnlCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgPEV4ZXJjaXNlQ2FyZCB7Li4uZGVmYXVsdFByb3BzfSBwcm9ncmVzcz17MH0gLz5cbiAgICApO1xuICAgIGV4cGVjdChxdWVyeUJ5VGVzdElkKCdwcm9ncmVzcy1maWxsJykpLnRvQmVOdWxsKCk7XG4gIH0pO1xuXG4gIGl0KCdkaXNwbGF5cyB0aGUgXCJOb3V2ZWF1XCIgYmFkZ2Ugb25seSB3aGVuIGlzTmV3IGlzIHRydWUgYW5kIHByb2dyZXNzIGlzIDAnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQsIHF1ZXJ5QnlUZXh0LCByZXJlbmRlciB9ID0gcmVuZGVyKFxuICAgICAgPEV4ZXJjaXNlQ2FyZCB7Li4uZGVmYXVsdFByb3BzfSBwcm9ncmVzcz17MH0gaXNOZXc9e3RydWV9IC8+XG4gICAgKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdOb3V2ZWF1JykpLnRvQmVUcnV0aHkoKTtcblxuICAgIC8vIHByb2dyZXNzID4gMCwgaXNOZXcgPSB0cnVlXG4gICAgcmVyZW5kZXIoPEV4ZXJjaXNlQ2FyZCB7Li4uZGVmYXVsdFByb3BzfSBwcm9ncmVzcz17NTB9IGlzTmV3PXt0cnVlfSAvPik7XG4gICAgZXhwZWN0KHF1ZXJ5QnlUZXh0KCdOb3V2ZWF1JykpLnRvQmVOdWxsKCk7XG5cbiAgICAvLyBwcm9ncmVzcyA9IDAsIGlzTmV3ID0gZmFsc2VcbiAgICByZXJlbmRlcig8RXhlcmNpc2VDYXJkIHsuLi5kZWZhdWx0UHJvcHN9IHByb2dyZXNzPXswfSBpc05ldz17ZmFsc2V9IC8+KTtcbiAgICBleHBlY3QocXVlcnlCeVRleHQoJ05vdXZlYXUnKSkudG9CZU51bGwoKTtcblxuICAgIC8vIHByb2dyZXNzID4gMCwgaXNOZXcgPSBmYWxzZVxuICAgIHJlcmVuZGVyKDxFeGVyY2lzZUNhcmQgey4uLmRlZmF1bHRQcm9wc30gcHJvZ3Jlc3M9ezUwfSBpc05ldz17ZmFsc2V9IC8+KTtcbiAgICBleHBlY3QocXVlcnlCeVRleHQoJ05vdXZlYXUnKSkudG9CZU51bGwoKTtcbiAgfSk7XG5cbiAgaXQoJ3JldHVybnMgbnVsbCBmb3IgYm90dG9tIGNvbnRlbnQgd2hlbiBwcm9ncmVzcyBpcyAwIGFuZCBpc05ldyBpcyBmYWxzZScsICgpID0+IHtcbiAgICBjb25zdCB7IHF1ZXJ5QnlUZXN0SWQsIHF1ZXJ5QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICA8RXhlcmNpc2VDYXJkIHsuLi5kZWZhdWx0UHJvcHN9IHByb2dyZXNzPXswfSBpc05ldz17ZmFsc2V9IC8+XG4gICAgKTtcbiAgICBleHBlY3QocXVlcnlCeVRlc3RJZCgncHJvZ3Jlc3MtZmlsbCcpKS50b0JlTnVsbCgpO1xuICAgIGV4cGVjdChxdWVyeUJ5VGV4dCgnTm91dmVhdScpKS50b0JlTnVsbCgpO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiO0FBQ0EsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsYUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsYUFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQWdGLElBQUFJLFdBQUEsR0FBQUosT0FBQTtBQUVoRkssUUFBUSxDQUFDLGNBQWMsRUFBRSxZQUFNO0VBQzdCLElBQU1DLFlBQVksR0FBRztJQUNuQkMsS0FBSyxFQUFFLHFCQUFxQjtJQUM1QkMsV0FBVyxFQUFFLDRCQUE0QjtJQUN6Q0MsSUFBSSxFQUFFLElBQUk7SUFDVkMsT0FBTyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQztFQUNuQixDQUFDO0VBRURDLFNBQVMsQ0FBQyxZQUFNO0lBQ2RGLElBQUksQ0FBQ0csYUFBYSxDQUFDLENBQUM7RUFDdEIsQ0FBQyxDQUFDO0VBRUZDLEVBQUUsQ0FBQyw4Q0FBOEMsRUFBRSxZQUFNO0lBQ3ZELElBQUFDLE9BQUEsR0FBc0IsSUFBQUMsbUJBQU0sRUFBQyxJQUFBYixXQUFBLENBQUFjLEdBQUEsRUFBQ2YsYUFBQSxDQUFBZ0IsT0FBWSxFQUFBQyxNQUFBLENBQUFDLE1BQUEsS0FBS2YsWUFBWSxDQUFHLENBQUMsQ0FBQztNQUF4RGdCLFNBQVMsR0FBQU4sT0FBQSxDQUFUTSxTQUFTO0lBQ2pCQyxNQUFNLENBQUNELFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0lBQ3JERCxNQUFNLENBQUNELFNBQVMsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0lBQzVE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