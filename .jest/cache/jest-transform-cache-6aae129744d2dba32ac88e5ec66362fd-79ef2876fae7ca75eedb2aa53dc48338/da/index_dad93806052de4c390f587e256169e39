0a98918cb19adf0aba96b381228f57bd
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ProgressCard = _interopRequireDefault(require("../../../../components/ui/ProgressCard"));
var _phrasesStats = require("../../../../utils/phrases/phrasesStats");
var _jsxRuntime = require("react/jsx-runtime");
var PhrasesProgress = function PhrasesProgress(_ref) {
  var _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? "#5E60CE" : _ref$levelColor,
    _ref$phrasesData = _ref.phrasesData,
    phrasesData = _ref$phrasesData === void 0 ? null : _ref$phrasesData,
    _ref$completedPhrases = _ref.completedPhrases,
    completedPhrases = _ref$completedPhrases === void 0 ? {} : _ref$completedPhrases,
    _ref$expanded = _ref.expanded,
    expanded = _ref$expanded === void 0 ? false : _ref$expanded,
    _ref$onToggleExpand = _ref.onToggleExpand,
    onToggleExpand = _ref$onToggleExpand === void 0 ? function () {} : _ref$onToggleExpand,
    _ref$onCategoryPress = _ref.onCategoryPress,
    onCategoryPress = _ref$onCategoryPress === void 0 ? function () {} : _ref$onCategoryPress;
  var categories = (phrasesData == null ? void 0 : phrasesData.categories) || [];
  var phrases = (phrasesData == null ? void 0 : phrasesData.phrases) || [];
  var totalPhrasesCount = (0, _phrasesStats.calculateTotalPhrases)(categories, phrases);
  var completedPhrasesCount = (0, _phrasesStats.calculateCompletedPhrasesCount)(completedPhrases);
  var totalProgress = (0, _phrasesStats.calculateTotalPhrasesProgress)(categories, phrases, completedPhrases);
  var categoryProgressData = (0, _phrasesStats.calculateCategoryPhrasesProgress)(categories, phrases, completedPhrases);
  var formattedCategoryData = categoryProgressData.map(function (category) {
    return {
      title: category.title,
      completed: category.completedPhrases,
      total: category.totalPhrases,
      progress: category.progress
    };
  });
  return (0, _jsxRuntime.jsx)(_ProgressCard.default, {
    title: "Progression",
    progress: totalProgress,
    completed: completedPhrasesCount,
    total: totalPhrasesCount,
    unit: "phrases",
    levelColor: levelColor,
    expandable: categoryProgressData.length > 0,
    expanded: expanded,
    onToggleExpand: onToggleExpand,
    categoryData: formattedCategoryData,
    onCategoryPress: onCategoryPress
  });
};
var _default = exports.default = PhrasesProgress;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfUHJvZ3Jlc3NDYXJkIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcGhyYXNlc1N0YXRzIiwiX2pzeFJ1bnRpbWUiLCJQaHJhc2VzUHJvZ3Jlc3MiLCJfcmVmIiwiX3JlZiRsZXZlbENvbG9yIiwibGV2ZWxDb2xvciIsIl9yZWYkcGhyYXNlc0RhdGEiLCJwaHJhc2VzRGF0YSIsIl9yZWYkY29tcGxldGVkUGhyYXNlcyIsImNvbXBsZXRlZFBocmFzZXMiLCJfcmVmJGV4cGFuZGVkIiwiZXhwYW5kZWQiLCJfcmVmJG9uVG9nZ2xlRXhwYW5kIiwib25Ub2dnbGVFeHBhbmQiLCJfcmVmJG9uQ2F0ZWdvcnlQcmVzcyIsIm9uQ2F0ZWdvcnlQcmVzcyIsImNhdGVnb3JpZXMiLCJwaHJhc2VzIiwidG90YWxQaHJhc2VzQ291bnQiLCJjYWxjdWxhdGVUb3RhbFBocmFzZXMiLCJjb21wbGV0ZWRQaHJhc2VzQ291bnQiLCJjYWxjdWxhdGVDb21wbGV0ZWRQaHJhc2VzQ291bnQiLCJ0b3RhbFByb2dyZXNzIiwiY2FsY3VsYXRlVG90YWxQaHJhc2VzUHJvZ3Jlc3MiLCJjYXRlZ29yeVByb2dyZXNzRGF0YSIsImNhbGN1bGF0ZUNhdGVnb3J5UGhyYXNlc1Byb2dyZXNzIiwiZm9ybWF0dGVkQ2F0ZWdvcnlEYXRhIiwibWFwIiwiY2F0ZWdvcnkiLCJ0aXRsZSIsImNvbXBsZXRlZCIsInRvdGFsIiwidG90YWxQaHJhc2VzIiwicHJvZ3Jlc3MiLCJqc3giLCJkZWZhdWx0IiwidW5pdCIsImV4cGFuZGFibGUiLCJsZW5ndGgiLCJjYXRlZ29yeURhdGEiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBQaHJhc2VzUHJvZ3Jlc3MvaW5kZXguanMgLSBWRVJTSU9OIENPUlJJR8OJRSBBVkVDIFBIUkFTRVNUQVRTXHJcblxyXG5pbXBvcnQgUHJvZ3Jlc3NDYXJkIGZyb20gXCIuLi8uLi8uLi8uLi9jb21wb25lbnRzL3VpL1Byb2dyZXNzQ2FyZFwiO1xyXG5pbXBvcnQge1xyXG4gIGNhbGN1bGF0ZVRvdGFsUGhyYXNlcyxcclxuICBjYWxjdWxhdGVDb21wbGV0ZWRQaHJhc2VzQ291bnQsXHJcbiAgY2FsY3VsYXRlVG90YWxQaHJhc2VzUHJvZ3Jlc3MsXHJcbiAgY2FsY3VsYXRlQ2F0ZWdvcnlQaHJhc2VzUHJvZ3Jlc3MsXHJcbn0gZnJvbSBcIi4uLy4uLy4uLy4uL3V0aWxzL3BocmFzZXMvcGhyYXNlc1N0YXRzXCI7XHJcblxyXG4vKipcclxuICog8J+TiiBQaHJhc2VzUHJvZ3Jlc3MgLSBWZXJzaW9uIENvcnJpZ8OpZSBhdmVjIHBocmFzZXNTdGF0c1xyXG4gKiDinIUgVXRpbGlzZSBsZXMgdnJhaWVzIGZvbmN0aW9ucyBkZSBjYWxjdWxcclxuICog4pyFIEfDqHJlIGNvcnJlY3RlbWVudCBsYSBzdHJ1Y3R1cmUgZGVzIGRvbm7DqWVzIHBocmFzZXNcclxuICogXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwcm9ncmVzcyAtIFBvdXJjZW50YWdlIGRlIHByb2dyZXNzaW9uICgwLTEwMCkgW0lHTk9Sw4kgLSByZWNhbGN1bMOpXVxyXG4gKiBAcGFyYW0ge251bWJlcn0gY3VycmVudFBocmFzZSAtIFBocmFzZSBhY3R1ZWxsZSAoMS1iYXNlZCkgW0lHTk9Sw4kgLSByZWNhbGN1bMOpXVxyXG4gKiBAcGFyYW0ge251bWJlcn0gdG90YWxQaHJhc2VzIC0gTm9tYnJlIHRvdGFsIGRlIHBocmFzZXMgW0lHTk9Sw4kgLSByZWNhbGN1bMOpXVxyXG4gKiBAcGFyYW0ge251bWJlcn0gY29tcGxldGVkQ291bnQgLSBOb21icmUgZGUgcGhyYXNlcyBjb21wbMOpdMOpZXMgW0lHTk9Sw4kgLSByZWNhbGN1bMOpXVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbGV2ZWxDb2xvciAtIENvdWxldXIgZHUgbml2ZWF1XHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBwaHJhc2VzRGF0YSAtIERvbm7DqWVzIGRlcyBwaHJhc2VzXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb21wbGV0ZWRQaHJhc2VzIC0gUGhyYXNlcyBjb21wbMOpdMOpZXMgcGFyIGNhdMOpZ29yaWVcclxuICogQHBhcmFtIHtib29sZWFufSBleHBhbmRlZCAtIMOJdGF0IGQnZXhwYW5zaW9uXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG9uVG9nZ2xlRXhwYW5kIC0gRm9uY3Rpb24gcG91ciB0b2dnbGUgZXhwYW5zaW9uXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG9uQ2F0ZWdvcnlQcmVzcyAtIEZvbmN0aW9uIGFwcGVsw6llIGxvcnMgZHUgY2xpYyBzdXIgY2F0w6lnb3JpZVxyXG4gKi9cclxuY29uc3QgUGhyYXNlc1Byb2dyZXNzID0gKHtcclxuICBsZXZlbENvbG9yID0gXCIjNUU2MENFXCIsXHJcbiAgcGhyYXNlc0RhdGEgPSBudWxsLFxyXG4gIGNvbXBsZXRlZFBocmFzZXMgPSB7fSxcclxuICBleHBhbmRlZCA9IGZhbHNlLFxyXG4gIG9uVG9nZ2xlRXhwYW5kID0gKCkgPT4geyAvKiBpbnRlbnRpb25hbGx5IGVtcHR5OiBkZWZhdWx0IG5vLW9wIHRvIGF2b2lkIGVycm9ycyBpZiBub3QgcHJvdmlkZWQgKi8gfSxcclxuICBvbkNhdGVnb3J5UHJlc3MgPSAoKSA9PiB7IC8qIGludGVudGlvbmFsbHkgZW1wdHk6IGRlZmF1bHQgbm8tb3AgdG8gYXZvaWQgZXJyb3JzIGlmIG5vdCBwcm92aWRlZCAqLyB9LFxyXG59KSA9PiB7XHJcbiAgXHJcbiAgLy8g4pyFIENPUlJFQ1RJT04gOiBVdGlsaXNlIGxlcyB2cmFpZXMgZm9uY3Rpb25zIGRlIGNhbGN1bFxyXG4gIGNvbnN0IGNhdGVnb3JpZXMgPSBwaHJhc2VzRGF0YT8uY2F0ZWdvcmllcyB8fCBbXTtcclxuICBjb25zdCBwaHJhc2VzID0gcGhyYXNlc0RhdGE/LnBocmFzZXMgfHwgW107XHJcbiAgXHJcbiAgY29uc3QgdG90YWxQaHJhc2VzQ291bnQgPSBjYWxjdWxhdGVUb3RhbFBocmFzZXMoY2F0ZWdvcmllcywgcGhyYXNlcyk7XHJcbiAgY29uc3QgY29tcGxldGVkUGhyYXNlc0NvdW50ID0gY2FsY3VsYXRlQ29tcGxldGVkUGhyYXNlc0NvdW50KGNvbXBsZXRlZFBocmFzZXMpO1xyXG4gIGNvbnN0IHRvdGFsUHJvZ3Jlc3MgPSBjYWxjdWxhdGVUb3RhbFBocmFzZXNQcm9ncmVzcyhjYXRlZ29yaWVzLCBwaHJhc2VzLCBjb21wbGV0ZWRQaHJhc2VzKTtcclxuICBjb25zdCBjYXRlZ29yeVByb2dyZXNzRGF0YSA9IGNhbGN1bGF0ZUNhdGVnb3J5UGhyYXNlc1Byb2dyZXNzKGNhdGVnb3JpZXMsIHBocmFzZXMsIGNvbXBsZXRlZFBocmFzZXMpO1xyXG5cclxuICAvLyBUcmFuc2Zvcm1hdGlvbiBwb3VyIGxlIGZvcm1hdCBQcm9ncmVzc0NhcmRcclxuICBjb25zdCBmb3JtYXR0ZWRDYXRlZ29yeURhdGEgPSBjYXRlZ29yeVByb2dyZXNzRGF0YS5tYXAoKGNhdGVnb3J5KSA9PiAoe1xyXG4gICAgdGl0bGU6IGNhdGVnb3J5LnRpdGxlLFxyXG4gICAgY29tcGxldGVkOiBjYXRlZ29yeS5jb21wbGV0ZWRQaHJhc2VzLFxyXG4gICAgdG90YWw6IGNhdGVnb3J5LnRvdGFsUGhyYXNlcyxcclxuICAgIHByb2dyZXNzOiBjYXRlZ29yeS5wcm9ncmVzcyxcclxuICB9KSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8UHJvZ3Jlc3NDYXJkXHJcbiAgICAgIHRpdGxlPVwiUHJvZ3Jlc3Npb25cIlxyXG4gICAgICBwcm9ncmVzcz17dG90YWxQcm9ncmVzc30gLy8g4pyFIFV0aWxpc2UgbGUgY2FsY3VsIGNvcnJlY3RcclxuICAgICAgY29tcGxldGVkPXtjb21wbGV0ZWRQaHJhc2VzQ291bnR9IC8vIOKchSBVdGlsaXNlIGxlIGNhbGN1bCBjb3JyZWN0XHJcbiAgICAgIHRvdGFsPXt0b3RhbFBocmFzZXNDb3VudH0gLy8g4pyFIFV0aWxpc2UgbGUgY2FsY3VsIGNvcnJlY3RcclxuICAgICAgdW5pdD1cInBocmFzZXNcIlxyXG4gICAgICBsZXZlbENvbG9yPXtsZXZlbENvbG9yfVxyXG4gICAgICBleHBhbmRhYmxlPXtjYXRlZ29yeVByb2dyZXNzRGF0YS5sZW5ndGggPiAwfVxyXG4gICAgICBleHBhbmRlZD17ZXhwYW5kZWR9XHJcbiAgICAgIG9uVG9nZ2xlRXhwYW5kPXtvblRvZ2dsZUV4cGFuZH1cclxuICAgICAgY2F0ZWdvcnlEYXRhPXtmb3JtYXR0ZWRDYXRlZ29yeURhdGF9XHJcbiAgICAgIG9uQ2F0ZWdvcnlQcmVzcz17b25DYXRlZ29yeVByZXNzfVxyXG4gICAgLz5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgUGhyYXNlc1Byb2dyZXNzO1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsSUFBQUEsYUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsYUFBQSxHQUFBRCxPQUFBO0FBS2dELElBQUFFLFdBQUEsR0FBQUYsT0FBQTtBQWtCaEQsSUFBTUcsZUFBZSxHQUFHLFNBQWxCQSxlQUFlQSxDQUFBQyxJQUFBLEVBT2Y7RUFBQSxJQUFBQyxlQUFBLEdBQUFELElBQUEsQ0FOSkUsVUFBVTtJQUFWQSxVQUFVLEdBQUFELGVBQUEsY0FBRyxTQUFTLEdBQUFBLGVBQUE7SUFBQUUsZ0JBQUEsR0FBQUgsSUFBQSxDQUN0QkksV0FBVztJQUFYQSxXQUFXLEdBQUFELGdCQUFBLGNBQUcsSUFBSSxHQUFBQSxnQkFBQTtJQUFBRSxxQkFBQSxHQUFBTCxJQUFBLENBQ2xCTSxnQkFBZ0I7SUFBaEJBLGdCQUFnQixHQUFBRCxxQkFBQSxjQUFHLENBQUMsQ0FBQyxHQUFBQSxxQkFBQTtJQUFBRSxhQUFBLEdBQUFQLElBQUEsQ0FDckJRLFFBQVE7SUFBUkEsUUFBUSxHQUFBRCxhQUFBLGNBQUcsS0FBSyxHQUFBQSxhQUFBO0lBQUFFLG1CQUFBLEdBQUFULElBQUEsQ0FDaEJVLGNBQWM7SUFBZEEsY0FBYyxHQUFBRCxtQkFBQSxjQUFHLFlBQU0sQ0FBMkUsQ0FBQyxHQUFBQSxtQkFBQTtJQUFBRSxvQkFBQSxHQUFBWCxJQUFBLENBQ25HWSxlQUFlO0lBQWZBLGVBQWUsR0FBQUQsb0JBQUEsY0FBRyxZQUFNLENBQTJFLENBQUMsR0FBQUEsb0JBQUE7RUFJcEcsSUFBTUUsVUFBVSxHQUFHLENBQUFULFdBQVcsb0JBQVhBLFdBQVcsQ0FBRVMsVUFBVSxLQUFJLEVBQUU7RUFDaEQsSUFBTUMsT0FBTyxHQUFHLENBQUFWLFdBQVcsb0JBQVhBLFdBQVcsQ0FBRVUsT0FBTyxLQUFJLEVBQUU7RUFFMUMsSUFBTUMsaUJBQWlCLEdBQUcsSUFBQUMsbUNBQXFCLEVBQUNILFVBQVUsRUFBRUMsT0FBTyxDQUFDO0VBQ3BFLElBQU1HLHFCQUFxQixHQUFHLElBQUFDLDRDQUE4QixFQUFDWixnQkFBZ0IsQ0FBQztFQUM5RSxJQUFNYSxhQUFhLEdBQUcsSUFBQUMsMkNBQTZCLEVBQUNQLFVBQVUsRUFBRUMsT0FBTyxFQUFFUixnQkFBZ0IsQ0FBQztFQUMxRixJQUFNZSxvQkFBb0IsR0FBRyxJQUFBQyw4Q0FBZ0MsRUFBQ1QsVUFBVSxFQUFFQyxPQUFPLEVBQUVSLGdCQUFnQixDQUFDO0VBR3BHLElBQU1pQixxQkFBcUIsR0FBR0Ysb0JBQW9CLENBQUNHLEdBQUcsQ0FBQyxVQUFDQyxRQUFRO0lBQUEsT0FBTTtNQUNwRUMsS0FBSyxFQUFFRCxRQUFRLENBQUNDLEtBQUs7TUFDckJDLFNBQVMsRUFBRUYsUUFBUSxDQUFDbkIsZ0JBQWdCO01BQ3BDc0IsS0FBSyxFQUFFSCxRQUFRLENBQUNJLFlBQVk7TUFDNUJDLFFBQVEsRUFBRUwsUUFBUSxDQUFDSztJQUNyQixDQUFDO0VBQUEsQ0FBQyxDQUFDO0VBRUgsT0FDRSxJQUFBaEMsV0FBQSxDQUFBaUMsR0FBQSxFQUFDckMsYUFBQSxDQUFBc0MsT0FBWTtJQUNYTixLQUFLLEVBQUMsYUFBYTtJQUNuQkksUUFBUSxFQUFFWCxhQUFjO0lBQ3hCUSxTQUFTLEVBQUVWLHFCQUFzQjtJQUNqQ1csS0FBSyxFQUFFYixpQkFBa0I7SUFDekJrQixJQUFJLEVBQUMsU0FBUztJQUNkL0IsVUFBVSxFQUFFQSxVQUFXO0lBQ3ZCZ0MsVUFBVSxFQUFFYixvQkFBb0IsQ0FBQ2MsTUFBTSxHQUFHLENBQUU7SUFDNUMzQixRQUFRLEVBQUVBLFFBQVM7SUFDbkJFLGNBQWMsRUFBRUEsY0FBZTtJQUMvQjBCLFlBQVksRUFBRWIscUJBQXNCO0lBQ3BDWCxlQUFlLEVBQUVBO0VBQWdCLENBQ2xDLENBQUM7QUFFTixDQUFDO0FBQUMsSUFBQXlCLFFBQUEsR0FBQUMsT0FBQSxDQUFBTixPQUFBLEdBRWFqQyxlQUFlIiwiaWdub3JlTGlzdCI6W119