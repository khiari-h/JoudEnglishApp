2b106e893caf7eaabe36b274cf7a1f49
_getJestObj().mock('../../src/screens/Dashboard/hooks/useDashboardState', function () {
  return {
    useDashboardState: function useDashboardState() {
      return {
        showLevelProgress: false,
        setShowLevelProgress: jest.fn(),
        openLevelProgressModal: jest.fn(),
        closeLevelProgressModal: jest.fn(),
        refreshing: false,
        activeTab: "home",
        setActiveTab: jest.fn(),
        onRefresh: jest.fn()
      };
    }
  };
});
_getJestObj().mock('../../src/hooks/useLastActivity');
_getJestObj().mock('../../src/hooks/useRealTimeProgress', function () {
  return function () {
    return {
      getLevelProgress: mockGetLevelProgress,
      refresh: mockRefresh
    };
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _expoRouter = require("expo-router");
var _Dashboard = _interopRequireDefault(require("../../src/screens/Dashboard"));
var LastActivity = _interopRequireWildcard(require("../../src/hooks/useLastActivity"));
var _ProgressContext = require("../../src/contexts/ProgressContext");
var _ThemeContext = require("../../src/contexts/ThemeContext");
var _CurrentLevelContext = require("../../src/contexts/CurrentLevelContext");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockRefresh = jest.fn();
var mockGetLevelProgress = jest.fn(function () {
  return 50;
});
var mockLastActivityData = {
  type: 'grammar',
  level: 'A1',
  title: 'Grammaire de base',
  timestamp: Date.now(),
  metadata: {
    categoryIndex: 1,
    word: 5,
    totalWords: 15
  }
};
var renderDashboard = function renderDashboard() {
  return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
    children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(_CurrentLevelContext.CurrentLevelProvider, {
        children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
      })
    })
  }));
};
describe('Scénario 2: Reprise de la dernière activité', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _expoRouter.router.push.mockClear();
  });
  it('devrait afficher la section "Continuer" et naviguer correctement', (0, _asyncToGenerator2.default)(function* () {
    LastActivity.default.mockReturnValue({
      lastActivity: mockLastActivityData,
      isLoading: false,
      saveActivity: jest.fn(),
      clearActivity: jest.fn(),
      reload: jest.fn()
    });
    var component;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      component = renderDashboard();
    }));
    var _component = component,
      getByTestId = _component.getByTestId,
      getByText = _component.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('hero-continue-section')).toBeTruthy();
    });
    expect(getByText('Grammaire de base')).toBeTruthy();
    expect(getByText(/Niv A1/)).toBeTruthy();
    expect(getByText(/Mot 6\/15/)).toBeTruthy();
    var continueButton = getByTestId('continue-activity-button');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(continueButton);
    }));
    expect(_expoRouter.router.push).toHaveBeenCalledWith({
      pathname: '/tabs/grammarExercise',
      params: {
        level: 'A1'
      }
    });
  }));
  it('devrait afficher la section vide s\'il n\'y a pas de dernière activité', (0, _asyncToGenerator2.default)(function* () {
    LastActivity.default.mockReturnValue({
      lastActivity: null,
      isLoading: false,
      saveActivity: jest.fn(),
      clearActivity: jest.fn(),
      reload: jest.fn()
    });
    var component;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      component = renderDashboard();
    }));
    var _component2 = component,
      getByTestId = _component2.getByTestId,
      getByText = _component2.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('hero-empty-section')).toBeTruthy();
    });
    expect(getByText("Commencer l'apprentissage")).toBeTruthy();
    var startButton = getByTestId('level-selection-button');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(startButton);
    }));
    expect(_expoRouter.router.push).toHaveBeenCalledWith('/tabs/levelSelection');
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,