f62c6b361c3f03d64467b1707105b1ee
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _useModalAnimation = _interopRequireDefault(require("../../../../src/components/ui/Modal/useModalAnimation"));
var mockStart = jest.fn();
jest.spyOn(_reactNative2.Animated, 'timing').mockImplementation(function () {
  return {
    start: mockStart,
    stop: jest.fn()
  };
});
describe('useModalAnimation', function () {
  beforeEach(function () {
    mockStart.mockClear();
    _reactNative2.Animated.timing.mockClear();
  });
  it('ne devrait pas démarrer d\'animation si isVisible est faux à l\'initialisation', function () {
    (0, _reactNative.renderHook)(function () {
      return (0, _useModalAnimation.default)({
        isVisible: false
      });
    });
    expect(_reactNative2.Animated.timing).not.toHaveBeenCalled();
    expect(mockStart).not.toHaveBeenCalled();
  });
  it('devrait démarrer l\'animation si isVisible devient vrai', function () {
    var _renderHook = (0, _reactNative.renderHook)(function (_ref) {
        var isVisible = _ref.isVisible;
        return (0, _useModalAnimation.default)({
          isVisible: isVisible
        });
      }, {
        initialProps: {
          isVisible: false
        }
      }),
      rerender = _renderHook.rerender;
    rerender({
      isVisible: true
    });
    expect(_reactNative2.Animated.timing).toHaveBeenCalledTimes(1);
    expect(mockStart).toHaveBeenCalledTimes(1);
  });
  it('devrait appeler Animated.timing avec les bonnes valeurs pour la position "top"', function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function (_ref2) {
        var isVisible = _ref2.isVisible,
          position = _ref2.position;
        return (0, _useModalAnimation.default)({
          isVisible: isVisible,
          position: position
        });
      }, {
        initialProps: {
          isVisible: false,
          position: 'top'
        }
      }),
      rerender = _renderHook2.rerender;
    rerender({
      isVisible: true,
      position: 'top'
    });
    expect(_reactNative2.Animated.timing).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({
      toValue: 1,
      duration: 300
    }));
  });
  it('devrait appeler Animated.timing avec les bonnes valeurs pour la position "bottom"', function () {
    var _renderHook3 = (0, _reactNative.renderHook)(function (_ref3) {
        var isVisible = _ref3.isVisible,
          position = _ref3.position;
        return (0, _useModalAnimation.default)({
          isVisible: isVisible,
          position: position
        });
      }, {
        initialProps: {
          isVisible: false,
          position: 'bottom'
        }
      }),
      rerender = _renderHook3.rerender;
    rerender({
      isVisible: true,
      position: 'bottom'
    });
    expect(_reactNative2.Animated.timing).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({
      toValue: 1,
      duration: 300
    }));
  });
  it('devrait appeler Animated.timing avec les bonnes valeurs pour la position "center"', function () {
    var _renderHook4 = (0, _reactNative.renderHook)(function (_ref4) {
        var isVisible = _ref4.isVisible,
          position = _ref4.position;
        return (0, _useModalAnimation.default)({
          isVisible: isVisible,
          position: position
        });
      }, {
        initialProps: {
          isVisible: false,
          position: 'center'
        }
      }),
      rerender = _renderHook4.rerender;
    rerender({
      isVisible: true,
      position: 'center'
    });
    expect(_reactNative2.Animated.timing).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({
      toValue: 1,
      duration: 300
    }));
  });
  it('devrait retourner les styles de transformation corrects pour la position "top"', function () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useModalAnimation.default)({
          isVisible: true,
          position: 'top'
        });
      }),
      result = _renderHook5.result;
    expect(result.current.transformStyle).toEqual(expect.objectContaining({
      transform: expect.arrayContaining([expect.objectContaining({
        translateY: expect.any(Object)
      })])
    }));
  });
  it('devrait retourner les styles de transformation corrects pour la position "bottom"', function () {
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useModalAnimation.default)({
          isVisible: true,
          position: 'bottom'
        });
      }),
      result = _renderHook6.result;
    expect(result.current.transformStyle).toEqual(expect.objectContaining({
      transform: expect.arrayContaining([expect.objectContaining({
        translateY: expect.any(Object)
      })])
    }));
  });
  it('devrait retourner les styles de transformation corrects pour la position "center"', function () {
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useModalAnimation.default)({
          isVisible: true,
          position: 'center'
        });
      }),
      result = _renderHook7.result;
    expect(result.current.transformStyle).toEqual(expect.objectContaining({
      transform: expect.arrayContaining([expect.objectContaining({
        scale: expect.any(Object)
      })])
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,