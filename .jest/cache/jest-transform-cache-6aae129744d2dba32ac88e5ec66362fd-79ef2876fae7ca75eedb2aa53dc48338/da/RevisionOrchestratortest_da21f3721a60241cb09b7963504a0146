24da48709109997a50b36f21d9bed839
_getJestObj().mock('../../../src/hooks/useRevisionSettings');
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn()
  };
});
_getJestObj().mock('../../../src/contexts/ThemeContext', function () {
  return {
    ThemeContext: {
      Consumer: function Consumer(_ref) {
        var children = _ref.children;
        return children({
          colors: {
            surface: "#FFFFFF",
            text: "#1F2937",
            textSecondary: "#6B7280",
            primary: "#10B981",
            accent: "#3B82F6",
            warning: "#F59E0B"
          }
        });
      },
      Provider: function Provider(_ref2) {
        var children = _ref2.children,
          value = _ref2.value;
        return children;
      }
    },
    useTheme: function useTheme() {
      return {
        colors: {
          surface: "#FFFFFF",
          text: "#1F2937",
          textSecondary: "#6B7280",
          primary: "#10B981",
          accent: "#3B82F6",
          warning: "#F59E0B"
        }
      };
    }
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/popup/RevisionPopup', function () {
  var React = require('react');
  var _require = require('react-native'),
    View = _require.View,
    Text = _require.Text,
    TouchableOpacity = _require.TouchableOpacity;
  return function (_ref3) {
    var visible = _ref3.visible,
      onChoice = _ref3.onChoice,
      onDismiss = _ref3.onDismiss,
      totalWordsLearned = _ref3.totalWordsLearned,
      questionsCount = _ref3.questionsCount;
    if (!visible) return null;
    return (0, _jsxRuntime.jsxs)(View, {
      testID: "revision-popup",
      children: [(0, _jsxRuntime.jsxs)(Text, {
        testID: "popup-words",
        children: ["Words: ", totalWordsLearned]
      }), (0, _jsxRuntime.jsxs)(Text, {
        testID: "popup-questions",
        children: ["Questions: ", questionsCount]
      }), (0, _jsxRuntime.jsx)(TouchableOpacity, {
        testID: "popup-now",
        onPress: function onPress() {
          return onChoice('now');
        },
        children: (0, _jsxRuntime.jsx)(Text, {
          children: "Now"
        })
      }), (0, _jsxRuntime.jsx)(TouchableOpacity, {
        testID: "popup-later50",
        onPress: function onPress() {
          return onChoice('later_50');
        },
        children: (0, _jsxRuntime.jsx)(Text, {
          children: "Later 50"
        })
      }), (0, _jsxRuntime.jsx)(TouchableOpacity, {
        testID: "popup-disable",
        onPress: function onPress() {
          return onChoice('disable');
        },
        children: (0, _jsxRuntime.jsx)(Text, {
          children: "Disable"
        })
      }), (0, _jsxRuntime.jsx)(TouchableOpacity, {
        testID: "popup-dismiss",
        onPress: onDismiss,
        children: (0, _jsxRuntime.jsx)(Text, {
          children: "Dismiss"
        })
      })]
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _RevisionOrchestrator = _interopRequireDefault(require("../../../src/screens/VocabularyRevision/RevisionOrchestrator"));
var RevisionSettingsHook = _interopRequireWildcard(require("../../../src/hooks/useRevisionSettings"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _expoRouter = require("expo-router");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('RevisionOrchestrator', function () {
  var mockUseRevisionSettings;
  var createWordsData = function createWordsData(wordCount) {
    var levels = ['1', '2', '3', '4', '5', '6', 'bonus'];
    var modes = ['classic', 'fast'];
    var result = {};
    var totalCreated = 0;
    var _loop = function _loop(level) {
      var _loop2 = function _loop2(mode) {
          if (totalCreated >= wordCount) return 0;
          var wordsForThisSection = Math.min(wordCount - totalCreated, Math.ceil(wordCount / (levels.length * modes.length)));
          result[`vocabulary_${level}_${mode}`] = JSON.stringify({
            completedWords: {
              unit1: Array.from({
                length: wordsForThisSection
              }, function (_, i) {
                return `word_${level}_${mode}_${i}`;
              })
            }
          });
          totalCreated += wordsForThisSection;
          if (totalCreated >= wordCount) return 0;
        },
        _ret;
      for (var mode of modes) {
        _ret = _loop2(mode);
        if (_ret === 0) break;
      }
      if (totalCreated >= wordCount) return 1;
    };
    for (var level of levels) {
      if (_loop(level)) break;
    }
    return result;
  };
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
    mockUseRevisionSettings = {
      preferences: {
        isDisabled: false,
        nextRevisionAt: 50,
        questionsCount: 10,
        frequency: 50
      },
      disableRevisions: jest.fn().mockResolvedValue(true),
      resetToNextTarget: jest.fn().mockResolvedValue(true),
      updatePreferences: jest.fn().mockResolvedValue(true)
    };
    RevisionSettingsHook.useRevisionSettings.mockReturnValue(mockUseRevisionSettings);
    _asyncStorage.default.getItem.mockReset();
    var defaultWordsData = createWordsData(3);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(defaultWordsData[key] || null);
    });
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  it('ne rend rien si les révisions sont désactivées', (0, _asyncToGenerator2.default)(function* () {
    mockUseRevisionSettings.preferences.isDisabled = true;
    RevisionSettingsHook.useRevisionSettings.mockReturnValue(mockUseRevisionSettings);
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      queryByTestId = _render.queryByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(2000);
    }));
    expect(queryByTestId('revision-popup')).toBeNull();
  }));
  it('ne montre pas la popup si le nombre de mots est inférieur au seuil', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      queryByTestId = _render2.queryByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(2000);
    }));
    expect(queryByTestId('revision-popup')).toBeNull();
  }));
  it('montre la popup quand le nombre de mots atteint le seuil', (0, _asyncToGenerator2.default)(function* () {
    var wordsData = createWordsData(60);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(wordsData[key] || null);
    });
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      getByTestId = _render3.getByTestId,
      getByText = _render3.getByText,
      queryByTestId = _render3.queryByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(100);
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(1000);
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByTestId('revision-popup')).toBeTruthy();
    });
    expect(getByText('Words: 60')).toBeTruthy();
    expect(getByText('Questions: 10')).toBeTruthy();
  }));
  it('appelle resetToNextTarget et navigue quand "now" est choisi', (0, _asyncToGenerator2.default)(function* () {
    var wordsData = createWordsData(60);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(wordsData[key] || null);
    });
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {
        currentLevel: "A1"
      })),
      getByTestId = _render4.getByTestId,
      queryByTestId = _render4.queryByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(100);
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(1000);
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByTestId('revision-popup')).toBeTruthy();
    });
    var nowButton = getByTestId('popup-now');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(nowButton);
    }));
    expect(mockUseRevisionSettings.resetToNextTarget).toHaveBeenCalledWith(60);
    expect(_expoRouter.router.push).toHaveBeenCalledWith({
      pathname: "/tabs/vocabularyRevision",
      params: {
        level: "A1",
        questionsCount: 10,
        source: 'popup_trigger'
      }
    });
  }));
  it('appelle updatePreferences quand "later_50" est choisi', (0, _asyncToGenerator2.default)(function* () {
    var wordsData = createWordsData(60);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(wordsData[key] || null);
    });
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      getByTestId = _render5.getByTestId,
      queryByTestId = _render5.queryByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(100);
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(1000);
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByTestId('revision-popup')).toBeTruthy();
    });
    var laterButton = getByTestId('popup-later50');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(laterButton);
    }));
    expect(mockUseRevisionSettings.updatePreferences).toHaveBeenCalledWith({
      nextRevisionAt: 110
    });
  }));
  it('appelle disableRevisions quand "disable" est choisi', (0, _asyncToGenerator2.default)(function* () {
    var wordsData = createWordsData(60);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(wordsData[key] || null);
    });
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      getByTestId = _render6.getByTestId,
      queryByTestId = _render6.queryByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(100);
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(1000);
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByTestId('revision-popup')).toBeTruthy();
    });
    var disableButton = getByTestId('popup-disable');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(disableButton);
    }));
    expect(mockUseRevisionSettings.disableRevisions).toHaveBeenCalled();
  }));
  it('gère la fermeture (dismiss) en choisissant "later_50" par défaut', (0, _asyncToGenerator2.default)(function* () {
    var wordsData = createWordsData(60);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(wordsData[key] || null);
    });
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      getByTestId = _render7.getByTestId,
      queryByTestId = _render7.queryByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(100);
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(1000);
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByTestId('revision-popup')).toBeTruthy();
    });
    var dismissButton = getByTestId('popup-dismiss');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(dismissButton);
    }));
    expect(mockUseRevisionSettings.updatePreferences).toHaveBeenCalledWith({
      nextRevisionAt: 110
    });
  }));
  it('debug - vérifie les conditions de la popup', (0, _asyncToGenerator2.default)(function* () {
    var wordsData = createWordsData(60);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(wordsData[key] || null);
    });
    var getItemSpy = jest.spyOn(_asyncStorage.default, 'getItem');
    var TestComponent = function TestComponent() {
      var _React$useState = _react.default.useState({}),
        _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
        debugInfo = _React$useState2[0],
        setDebugInfo = _React$useState2[1];
      var _RevisionSettingsHook = RevisionSettingsHook.useRevisionSettings(),
        preferences = _RevisionSettingsHook.preferences;
      _react.default.useEffect(function () {
        var countWords = function () {
          var _ref26 = (0, _asyncToGenerator2.default)(function* () {
            var total = 0;
            var levels = ['1', '2', '3', '4', '5', '6', 'bonus'];
            var modes = ['classic', 'fast'];
            for (var level of levels) {
              for (var mode of modes) {
                var stored = yield _asyncStorage.default.getItem(`vocabulary_${level}_${mode}`);
                if (stored) {
                  var data = JSON.parse(stored);
                  var completedWords = data.completedWords || {};
                  total += Object.values(completedWords).reduce(function (acc, words) {
                    if (Array.isArray(words)) {
                      return acc + words.length;
                    }
                    return acc;
                  }, 0);
                }
              }
            }
            setDebugInfo({
              totalWords: total,
              isDisabled: preferences.isDisabled,
              nextRevisionAt: preferences.nextRevisionAt,
              shouldShow: !preferences.isDisabled && total >= preferences.nextRevisionAt && total > 0
            });
          });
          return function countWords() {
            return _ref26.apply(this, arguments);
          };
        }();
        countWords();
      }, [preferences]);
      return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
        testID: "debug-info",
        children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "debug-total",
          children: debugInfo.totalWords
        }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "debug-disabled",
          children: String(debugInfo.isDisabled)
        }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "debug-threshold",
          children: debugInfo.nextRevisionAt
        }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "debug-should-show",
          children: String(debugInfo.shouldShow)
        })]
      });
    };
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestComponent, {})),
      getByTestId = _render8.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getItemSpy).toHaveBeenCalled();
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(1000);
    }));
    var totalWords = getByTestId('debug-total').children[0];
    var isDisabled = getByTestId('debug-disabled').children[0];
    var threshold = getByTestId('debug-threshold').children[0];
    var shouldShow = getByTestId('debug-should-show').children[0];
    expect(totalWords).toBe('60');
    expect(isDisabled).toBe('false');
    expect(threshold).toBe('50');
    expect(shouldShow).toBe('true');
  }));
  it('compte correctement les mots depuis AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
    var wordsData = createWordsData(35);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(wordsData[key] || null);
    });
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      queryByTestId = _render9.queryByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(2000);
    }));
    expect(queryByTestId('revision-popup')).toBeNull();
    var expectedCalls = ['1', '2', '3', '4', '5', '6', 'bonus'].flatMap(function (level) {
      return ['classic', 'fast'].map(function (mode) {
        return `vocabulary_${level}_${mode}`;
      });
    });
    expectedCalls.forEach(function (key) {
      expect(_asyncStorage.default.getItem).toHaveBeenCalledWith(key);
    });
  }));
  it('debug - vérifie l\'état du composant RevisionOrchestrator', (0, _asyncToGenerator2.default)(function* () {
    var wordsData = createWordsData(60);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(wordsData[key] || null);
    });
    var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      queryByTestId = _render0.queryByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(100);
    }));
    expect(queryByTestId('revision-popup')).toBeNull();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(1000);
    }));
    var popup = queryByTestId('revision-popup');
    expect(popup).toBeTruthy();
  }));
  it('debug - vérifie le mock AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
    var wordsData = createWordsData(60);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      var result = wordsData[key] || null;
      return Promise.resolve(result);
    });
    var levels = ['1', '2', '3', '4', '5', '6', 'bonus'];
    var modes = ['classic', 'fast'];
    var total = 0;
    for (var level of levels) {
      for (var mode of modes) {
        var key = `vocabulary_${level}_${mode}`;
        var stored = yield _asyncStorage.default.getItem(key);
        if (stored) {
          var data = JSON.parse(stored);
          var completedWords = data.completedWords || {};
          var count = Object.values(completedWords).reduce(function (acc, words) {
            if (Array.isArray(words)) {
              return acc + words.length;
            }
            return acc;
          }, 0);
          total += count;
        }
      }
    }
    expect(total).toBe(60);
  }));
  it('respecte le délai de 1000ms avant d\'afficher la popup', (0, _asyncToGenerator2.default)(function* () {
    var wordsData = createWordsData(60);
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      return Promise.resolve(wordsData[key] || null);
    });
    var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {})),
      queryByTestId = _render1.queryByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(100);
    }));
    expect(queryByTestId('revision-popup')).toBeNull();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(999);
    }));
    expect(queryByTestId('revision-popup')).toBeNull();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(1);
    }));
    expect(queryByTestId('revision-popup')).toBeTruthy();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJyb3V0ZXIiLCJwdXNoIiwiamVzdCIsImZuIiwiZ2V0SXRlbSIsIlRoZW1lQ29udGV4dCIsIkNvbnN1bWVyIiwiX3JlZiIsImNoaWxkcmVuIiwiY29sb3JzIiwic3VyZmFjZSIsInRleHQiLCJ0ZXh0U2Vjb25kYXJ5IiwicHJpbWFyeSIsImFjY2VudCIsIndhcm5pbmciLCJQcm92aWRlciIsIl9yZWYyIiwidmFsdWUiLCJ1c2VUaGVtZSIsIlJlYWN0IiwicmVxdWlyZSIsIl9yZXF1aXJlIiwiVmlldyIsIlRleHQiLCJUb3VjaGFibGVPcGFjaXR5IiwiX3JlZjMiLCJ2aXNpYmxlIiwib25DaG9pY2UiLCJvbkRpc21pc3MiLCJ0b3RhbFdvcmRzTGVhcm5lZCIsInF1ZXN0aW9uc0NvdW50IiwiX2pzeFJ1bnRpbWUiLCJqc3hzIiwidGVzdElEIiwianN4Iiwib25QcmVzcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfc2xpY2VkVG9BcnJheTIiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfcmVhY3ROYXRpdmUyIiwiX1JldmlzaW9uT3JjaGVzdHJhdG9yIiwiUmV2aXNpb25TZXR0aW5nc0hvb2siLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9hc3luY1N0b3JhZ2UiLCJfZXhwb1JvdXRlciIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX3JlcXVpcmUyIiwiZGVzY3JpYmUiLCJtb2NrVXNlUmV2aXNpb25TZXR0aW5ncyIsImNyZWF0ZVdvcmRzRGF0YSIsIndvcmRDb3VudCIsImxldmVscyIsIm1vZGVzIiwicmVzdWx0IiwidG90YWxDcmVhdGVkIiwiX2xvb3AiLCJsZXZlbCIsIl9sb29wMiIsIm1vZGUiLCJ3b3Jkc0ZvclRoaXNTZWN0aW9uIiwiTWF0aCIsIm1pbiIsImNlaWwiLCJsZW5ndGgiLCJKU09OIiwic3RyaW5naWZ5IiwiY29tcGxldGVkV29yZHMiLCJ1bml0MSIsIkFycmF5IiwiZnJvbSIsIl8iLCJfcmV0IiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJ1c2VGYWtlVGltZXJzIiwicHJlZmVyZW5jZXMiLCJpc0Rpc2FibGVkIiwibmV4dFJldmlzaW9uQXQiLCJmcmVxdWVuY3kiLCJkaXNhYmxlUmV2aXNpb25zIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJyZXNldFRvTmV4dFRhcmdldCIsInVwZGF0ZVByZWZlcmVuY2VzIiwidXNlUmV2aXNpb25TZXR0aW5ncyIsIm1vY2tSZXR1cm5WYWx1ZSIsIkFzeW5jU3RvcmFnZSIsIm1vY2tSZXNldCIsImRlZmF1bHRXb3Jkc0RhdGEiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJrZXkiLCJQcm9taXNlIiwicmVzb2x2ZSIsImFmdGVyRWFjaCIsInVzZVJlYWxUaW1lcnMiLCJpdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJxdWVyeUJ5VGVzdElkIiwiYWN0IiwiYWR2YW5jZVRpbWVyc0J5VGltZSIsImV4cGVjdCIsInRvQmVOdWxsIiwiX3JlbmRlcjIiLCJ3b3Jkc0RhdGEiLCJfcmVuZGVyMyIsImdldEJ5VGVzdElkIiwiZ2V0QnlUZXh0Iiwid2FpdEZvciIsInRvQmVUcnV0aHkiLCJfcmVuZGVyNCIsImN1cnJlbnRMZXZlbCIsIm5vd0J1dHRvbiIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJwYXRobmFtZSIsInBhcmFtcyIsInNvdXJjZSIsIl9yZW5kZXI1IiwibGF0ZXJCdXR0b24iLCJfcmVuZGVyNiIsImRpc2FibGVCdXR0b24iLCJ0b0hhdmVCZWVuQ2FsbGVkIiwiX3JlbmRlcjciLCJkaXNtaXNzQnV0dG9uIiwiZ2V0SXRlbVNweSIsInNweU9uIiwiVGVzdENvbXBvbmVudCIsIl9SZWFjdCR1c2VTdGF0ZSIsInVzZVN0YXRlIiwiX1JlYWN0JHVzZVN0YXRlMiIsImRlYnVnSW5mbyIsInNldERlYnVnSW5mbyIsIl9SZXZpc2lvblNldHRpbmdzSG9vayIsInVzZUVmZmVjdCIsImNvdW50V29yZHMiLCJfcmVmMjYiLCJ0b3RhbCIsInN0b3JlZCIsImRhdGEiLCJwYXJzZSIsInZhbHVlcyIsInJlZHVjZSIsImFjYyIsIndvcmRzIiwiaXNBcnJheSIsInRvdGFsV29yZHMiLCJzaG91bGRTaG93IiwiYXBwbHkiLCJhcmd1bWVudHMiLCJTdHJpbmciLCJfcmVuZGVyOCIsInRocmVzaG9sZCIsInRvQmUiLCJfcmVuZGVyOSIsImV4cGVjdGVkQ2FsbHMiLCJmbGF0TWFwIiwibWFwIiwiZm9yRWFjaCIsIl9yZW5kZXIwIiwicG9wdXAiLCJjb3VudCIsIl9yZW5kZXIxIl0sInNvdXJjZXMiOlsiUmV2aXNpb25PcmNoZXN0cmF0b3IudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCB3YWl0Rm9yLCBmaXJlRXZlbnQsIGFjdCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IFZpZXcsIFRleHQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IFJldmlzaW9uT3JjaGVzdHJhdG9yIGZyb20gJy4uLy4uLy4uL3NyYy9zY3JlZW5zL1ZvY2FidWxhcnlSZXZpc2lvbi9SZXZpc2lvbk9yY2hlc3RyYXRvcic7XG5pbXBvcnQgKiBhcyBSZXZpc2lvblNldHRpbmdzSG9vayBmcm9tICcuLi8uLi8uLi9zcmMvaG9va3MvdXNlUmV2aXNpb25TZXR0aW5ncyc7XG5pbXBvcnQgQXN5bmNTdG9yYWdlIGZyb20gJ0ByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlJztcbmltcG9ydCB7IHJvdXRlciB9IGZyb20gJ2V4cG8tcm91dGVyJztcblxuLy8gTW9ja2luZyBkZXBlbmRlbmNpZXNcbmplc3QubW9jaygnLi4vLi4vLi4vc3JjL2hvb2tzL3VzZVJldmlzaW9uU2V0dGluZ3MnKTtcbmplc3QubW9jaygnZXhwby1yb3V0ZXInLCAoKSA9PiAoe1xuICByb3V0ZXI6IHtcbiAgICBwdXNoOiBqZXN0LmZuKCksXG4gIH0sXG59KSk7XG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlJywgKCkgPT4gKHtcbiAgZ2V0SXRlbTogamVzdC5mbigpLFxufSkpO1xuXG4vLyBNb2NrIGR1IFRoZW1lQ29udGV4dFxuamVzdC5tb2NrKCcuLi8uLi8uLi9zcmMvY29udGV4dHMvVGhlbWVDb250ZXh0JywgKCkgPT4gKHtcbiAgVGhlbWVDb250ZXh0OiB7XG4gICAgQ29uc3VtZXI6ICh7IGNoaWxkcmVuIH0pID0+IGNoaWxkcmVuKHtcbiAgICAgIGNvbG9yczoge1xuICAgICAgICBzdXJmYWNlOiBcIiNGRkZGRkZcIixcbiAgICAgICAgdGV4dDogXCIjMUYyOTM3XCIsXG4gICAgICAgIHRleHRTZWNvbmRhcnk6IFwiIzZCNzI4MFwiLFxuICAgICAgICBwcmltYXJ5OiBcIiMxMEI5ODFcIixcbiAgICAgICAgYWNjZW50OiBcIiMzQjgyRjZcIixcbiAgICAgICAgd2FybmluZzogXCIjRjU5RTBCXCIsXG4gICAgICB9XG4gICAgfSksXG4gICAgUHJvdmlkZXI6ICh7IGNoaWxkcmVuLCB2YWx1ZSB9KSA9PiBjaGlsZHJlbixcbiAgfSxcbiAgdXNlVGhlbWU6ICgpID0+ICh7XG4gICAgY29sb3JzOiB7XG4gICAgICBzdXJmYWNlOiBcIiNGRkZGRkZcIixcbiAgICAgIHRleHQ6IFwiIzFGMjkzN1wiLFxuICAgICAgdGV4dFNlY29uZGFyeTogXCIjNkI3MjgwXCIsXG4gICAgICBwcmltYXJ5OiBcIiMxMEI5ODFcIixcbiAgICAgIGFjY2VudDogXCIjM0I4MkY2XCIsXG4gICAgICB3YXJuaW5nOiBcIiNGNTlFMEJcIixcbiAgICB9XG4gIH0pLFxufSkpO1xuXG4vLyBNb2NrIHNpbXBsZSBkZSBSZXZpc2lvblBvcHVwIHBvdXIgw6l2aXRlciBsZXMgYW5pbWF0aW9uc1xuamVzdC5tb2NrKCcuLi8uLi8uLi9zcmMvc2NyZWVucy9EYXNoYm9hcmQvY29tcG9uZW50cy9wb3B1cC9SZXZpc2lvblBvcHVwJywgKCkgPT4ge1xuICBjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG4gIGNvbnN0IHsgVmlldywgVGV4dCwgVG91Y2hhYmxlT3BhY2l0eSB9ID0gcmVxdWlyZSgncmVhY3QtbmF0aXZlJyk7XG4gIFxuICByZXR1cm4gKHsgdmlzaWJsZSwgb25DaG9pY2UsIG9uRGlzbWlzcywgdG90YWxXb3Jkc0xlYXJuZWQsIHF1ZXN0aW9uc0NvdW50IH0pID0+IHtcbiAgICBpZiAoIXZpc2libGUpIHJldHVybiBudWxsO1xuICAgIFxuICAgIHJldHVybiAoXG4gICAgICA8VmlldyB0ZXN0SUQ9XCJyZXZpc2lvbi1wb3B1cFwiPlxuICAgICAgICA8VGV4dCB0ZXN0SUQ9XCJwb3B1cC13b3Jkc1wiPldvcmRzOiB7dG90YWxXb3Jkc0xlYXJuZWR9PC9UZXh0PlxuICAgICAgICA8VGV4dCB0ZXN0SUQ9XCJwb3B1cC1xdWVzdGlvbnNcIj5RdWVzdGlvbnM6IHtxdWVzdGlvbnNDb3VudH08L1RleHQ+XG4gICAgICAgIDxUb3VjaGFibGVPcGFjaXR5IHRlc3RJRD1cInBvcHVwLW5vd1wiIG9uUHJlc3M9eygpID0+IG9uQ2hvaWNlKCdub3cnKX0+XG4gICAgICAgICAgPFRleHQ+Tm93PC9UZXh0PlxuICAgICAgICA8L1RvdWNoYWJsZU9wYWNpdHk+XG4gICAgICAgIDxUb3VjaGFibGVPcGFjaXR5IHRlc3RJRD1cInBvcHVwLWxhdGVyNTBcIiBvblByZXNzPXsoKSA9PiBvbkNob2ljZSgnbGF0ZXJfNTAnKX0+XG4gICAgICAgICAgPFRleHQ+TGF0ZXIgNTA8L1RleHQ+XG4gICAgICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cbiAgICAgICAgPFRvdWNoYWJsZU9wYWNpdHkgdGVzdElEPVwicG9wdXAtZGlzYWJsZVwiIG9uUHJlc3M9eygpID0+IG9uQ2hvaWNlKCdkaXNhYmxlJyl9PlxuICAgICAgICAgIDxUZXh0PkRpc2FibGU8L1RleHQ+XG4gICAgICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cbiAgICAgICAgPFRvdWNoYWJsZU9wYWNpdHkgdGVzdElEPVwicG9wdXAtZGlzbWlzc1wiIG9uUHJlc3M9e29uRGlzbWlzc30+XG4gICAgICAgICAgPFRleHQ+RGlzbWlzczwvVGV4dD5cbiAgICAgICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxuICAgICAgPC9WaWV3PlxuICAgICk7XG4gIH07XG59KTtcblxuZGVzY3JpYmUoJ1JldmlzaW9uT3JjaGVzdHJhdG9yJywgKCkgPT4ge1xuICBsZXQgbW9ja1VzZVJldmlzaW9uU2V0dGluZ3M7XG5cbiAgLy8gSGVscGVyIHBvdXIgY3LDqWVyIGRlcyBkb25uw6llcyBkZSBtb3RzIGFwcHJpc1xuICBjb25zdCBjcmVhdGVXb3Jkc0RhdGEgPSAod29yZENvdW50KSA9PiB7XG4gICAgY29uc3QgbGV2ZWxzID0gWycxJywgJzInLCAnMycsICc0JywgJzUnLCAnNicsICdib251cyddO1xuICAgIGNvbnN0IG1vZGVzID0gWydjbGFzc2ljJywgJ2Zhc3QnXTtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBcbiAgICBsZXQgdG90YWxDcmVhdGVkID0gMDtcbiAgICBmb3IgKGNvbnN0IGxldmVsIG9mIGxldmVscykge1xuICAgICAgZm9yIChjb25zdCBtb2RlIG9mIG1vZGVzKSB7XG4gICAgICAgIGlmICh0b3RhbENyZWF0ZWQgPj0gd29yZENvdW50KSBicmVhaztcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHdvcmRzRm9yVGhpc1NlY3Rpb24gPSBNYXRoLm1pbih3b3JkQ291bnQgLSB0b3RhbENyZWF0ZWQsIE1hdGguY2VpbCh3b3JkQ291bnQgLyAobGV2ZWxzLmxlbmd0aCAqIG1vZGVzLmxlbmd0aCkpKTtcbiAgICAgICAgcmVzdWx0W2B2b2NhYnVsYXJ5XyR7bGV2ZWx9XyR7bW9kZX1gXSA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBjb21wbGV0ZWRXb3Jkczoge1xuICAgICAgICAgICAgdW5pdDE6IEFycmF5LmZyb20oeyBsZW5ndGg6IHdvcmRzRm9yVGhpc1NlY3Rpb24gfSwgKF8sIGkpID0+IGB3b3JkXyR7bGV2ZWx9XyR7bW9kZX1fJHtpfWApXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdG90YWxDcmVhdGVkICs9IHdvcmRzRm9yVGhpc1NlY3Rpb247XG4gICAgICAgIFxuICAgICAgICBpZiAodG90YWxDcmVhdGVkID49IHdvcmRDb3VudCkgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAodG90YWxDcmVhdGVkID49IHdvcmRDb3VudCkgYnJlYWs7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgLy8gUsOpaW5pdGlhbGlzZXIgdG91cyBsZXMgbW9ja3MgYXZhbnQgY2hhcXVlIHRlc3RcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICBqZXN0LnVzZUZha2VUaW1lcnMoKTtcblxuICAgIC8vIE1vY2sgcGFyIGTDqWZhdXQgcG91ciBsZSBob29rIHVzZVJldmlzaW9uU2V0dGluZ3NcbiAgICBtb2NrVXNlUmV2aXNpb25TZXR0aW5ncyA9IHtcbiAgICAgIHByZWZlcmVuY2VzOiB7XG4gICAgICAgIGlzRGlzYWJsZWQ6IGZhbHNlLFxuICAgICAgICBuZXh0UmV2aXNpb25BdDogNTAsXG4gICAgICAgIHF1ZXN0aW9uc0NvdW50OiAxMCxcbiAgICAgICAgZnJlcXVlbmN5OiA1MCxcbiAgICAgIH0sXG4gICAgICBkaXNhYmxlUmV2aXNpb25zOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSksXG4gICAgICByZXNldFRvTmV4dFRhcmdldDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpLFxuICAgICAgdXBkYXRlUHJlZmVyZW5jZXM6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh0cnVlKSxcbiAgICB9O1xuICAgIFJldmlzaW9uU2V0dGluZ3NIb29rLnVzZVJldmlzaW9uU2V0dGluZ3MubW9ja1JldHVyblZhbHVlKG1vY2tVc2VSZXZpc2lvblNldHRpbmdzKTtcblxuICAgIC8vIFLDqWluaXRpYWxpc2F0aW9uIGNvbXBsw6h0ZSBkJ0FzeW5jU3RvcmFnZVxuICAgIEFzeW5jU3RvcmFnZS5nZXRJdGVtLm1vY2tSZXNldCgpO1xuICAgIFxuICAgIC8vIE1vY2sgcGFyIGTDqWZhdXQgcG91ciBBc3luY1N0b3JhZ2UgKHBldSBkZSBtb3RzKVxuICAgIGNvbnN0IGRlZmF1bHRXb3Jkc0RhdGEgPSBjcmVhdGVXb3Jkc0RhdGEoMyk7XG4gICAgQXN5bmNTdG9yYWdlLmdldEl0ZW0ubW9ja0ltcGxlbWVudGF0aW9uKChrZXkpID0+IHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZGVmYXVsdFdvcmRzRGF0YVtrZXldIHx8IG51bGwpO1xuICAgIH0pO1xuICB9KTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGplc3QudXNlUmVhbFRpbWVycygpO1xuICB9KTtcblxuICBpdCgnbmUgcmVuZCByaWVuIHNpIGxlcyByw6l2aXNpb25zIHNvbnQgZMOpc2FjdGl2w6llcycsIGFzeW5jICgpID0+IHtcbiAgICBtb2NrVXNlUmV2aXNpb25TZXR0aW5ncy5wcmVmZXJlbmNlcy5pc0Rpc2FibGVkID0gdHJ1ZTtcbiAgICBSZXZpc2lvblNldHRpbmdzSG9vay51c2VSZXZpc2lvblNldHRpbmdzLm1vY2tSZXR1cm5WYWx1ZShtb2NrVXNlUmV2aXNpb25TZXR0aW5ncyk7XG5cbiAgICBjb25zdCB7IHF1ZXJ5QnlUZXN0SWQgfSA9IHJlbmRlcig8UmV2aXNpb25PcmNoZXN0cmF0b3IgLz4pO1xuICAgIFxuICAgIC8vIEF0dGVuZHJlIHF1ZSBsZXMgZG9ubsOpZXMgc29pZW50IGNoYXJnw6llc1xuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoMjAwMCk7XG4gICAgfSk7XG4gICAgXG4gICAgZXhwZWN0KHF1ZXJ5QnlUZXN0SWQoJ3JldmlzaW9uLXBvcHVwJykpLnRvQmVOdWxsKCk7XG4gIH0pO1xuXG4gIGl0KCduZSBtb250cmUgcGFzIGxhIHBvcHVwIHNpIGxlIG5vbWJyZSBkZSBtb3RzIGVzdCBpbmbDqXJpZXVyIGF1IHNldWlsJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIExlIG1vY2sgcGFyIGTDqWZhdXQgYSAzIG1vdHMsIGxlIHNldWlsIGVzdCBtYWludGVuYW50IMOgIDUwXG4gICAgY29uc3QgeyBxdWVyeUJ5VGVzdElkIH0gPSByZW5kZXIoPFJldmlzaW9uT3JjaGVzdHJhdG9yIC8+KTtcbiAgICBcbiAgICAvLyBBdHRlbmRyZSBxdWUgbGVzIGRvbm7DqWVzIHNvaWVudCBjaGFyZ8OpZXMgZXQgbGUgdGltZXIgcydleMOpY3V0ZVxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoMjAwMCk7XG4gICAgfSk7XG5cbiAgICBleHBlY3QocXVlcnlCeVRlc3RJZCgncmV2aXNpb24tcG9wdXAnKSkudG9CZU51bGwoKTtcbiAgfSk7XG5cbiAgaXQoJ21vbnRyZSBsYSBwb3B1cCBxdWFuZCBsZSBub21icmUgZGUgbW90cyBhdHRlaW50IGxlIHNldWlsJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIENvbmZpZ3VyZXIgQXN5bmNTdG9yYWdlIHBvdXIgcmV0b3VybmVyIDYwIG1vdHMgKOKJpSA1MClcbiAgICBjb25zdCB3b3Jkc0RhdGEgPSBjcmVhdGVXb3Jkc0RhdGEoNjApO1xuICAgIEFzeW5jU3RvcmFnZS5nZXRJdGVtLm1vY2tJbXBsZW1lbnRhdGlvbigoa2V5KSA9PiB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHdvcmRzRGF0YVtrZXldIHx8IG51bGwpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCwgZ2V0QnlUZXh0LCBxdWVyeUJ5VGVzdElkIH0gPSByZW5kZXIoPFJldmlzaW9uT3JjaGVzdHJhdG9yIC8+KTtcbiAgICBcbiAgICAvLyBBdHRlbmRyZSBxdWUgbGVzIGRvbm7DqWVzIEFzeW5jU3RvcmFnZSBzb2llbnQgY2hhcmfDqWVzIGV0IHByb2Nlc3PDqWVzXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSgxMDApOyAvLyBMYWlzc2VyIGxlIHRlbXBzIGF1eCBwcm9taXNlcyBBc3luY1N0b3JhZ2VcbiAgICB9KTtcblxuICAgIC8vIEF0dGVuZHJlIHF1ZSBsZSBzZXRUaW1lb3V0IGRlIDEwMDBtcyBzJ2V4w6ljdXRlXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSgxMDAwKTtcbiAgICB9KTtcblxuICAgIC8vIEF0dGVuZHJlIHF1ZSBsYSBwb3B1cCBzb2l0IHJlbmR1ZVxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KHF1ZXJ5QnlUZXN0SWQoJ3JldmlzaW9uLXBvcHVwJykpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChnZXRCeVRleHQoJ1dvcmRzOiA2MCcpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnUXVlc3Rpb25zOiAxMCcpKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KCdhcHBlbGxlIHJlc2V0VG9OZXh0VGFyZ2V0IGV0IG5hdmlndWUgcXVhbmQgXCJub3dcIiBlc3QgY2hvaXNpJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIENvbmZpZ3VyZXIgQXN5bmNTdG9yYWdlIHBvdXIgcmV0b3VybmVyIDYwIG1vdHNcbiAgICBjb25zdCB3b3Jkc0RhdGEgPSBjcmVhdGVXb3Jkc0RhdGEoNjApO1xuICAgIEFzeW5jU3RvcmFnZS5nZXRJdGVtLm1vY2tJbXBsZW1lbnRhdGlvbigoa2V5KSA9PiB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHdvcmRzRGF0YVtrZXldIHx8IG51bGwpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCwgcXVlcnlCeVRlc3RJZCB9ID0gcmVuZGVyKDxSZXZpc2lvbk9yY2hlc3RyYXRvciBjdXJyZW50TGV2ZWw9XCJBMVwiIC8+KTtcbiAgICBcbiAgICAvLyBBdHRlbmRyZSBsZSBjaGFyZ2VtZW50IGRlcyBkb25uw6llcyBldCBsJ2FmZmljaGFnZSBkZSBsYSBwb3B1cFxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoMTAwKTsgLy8gQXN5bmNTdG9yYWdlXG4gICAgfSk7XG5cbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgamVzdC5hZHZhbmNlVGltZXJzQnlUaW1lKDEwMDApOyAvLyBzZXRUaW1lb3V0IHBvdXIgYWZmaWNoZXIgbGEgcG9wdXBcbiAgICB9KTtcblxuICAgIC8vIEF0dGVuZHJlIHF1ZSBsYSBwb3B1cCBzb2l0IHJlbmR1ZVxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KHF1ZXJ5QnlUZXN0SWQoJ3JldmlzaW9uLXBvcHVwJykpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IG5vd0J1dHRvbiA9IGdldEJ5VGVzdElkKCdwb3B1cC1ub3cnKTtcbiAgICBcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgZmlyZUV2ZW50LnByZXNzKG5vd0J1dHRvbik7XG4gICAgfSk7XG5cbiAgICAvLyBWw6lyaWZpZXIgbGVzIGFwcGVsc1xuICAgIGV4cGVjdChtb2NrVXNlUmV2aXNpb25TZXR0aW5ncy5yZXNldFRvTmV4dFRhcmdldCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoNjApO1xuICAgIGV4cGVjdChyb3V0ZXIucHVzaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgcGF0aG5hbWU6IFwiL3RhYnMvdm9jYWJ1bGFyeVJldmlzaW9uXCIsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgbGV2ZWw6IFwiQTFcIixcbiAgICAgICAgcXVlc3Rpb25zQ291bnQ6IDEwLFxuICAgICAgICBzb3VyY2U6ICdwb3B1cF90cmlnZ2VyJyxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdhcHBlbGxlIHVwZGF0ZVByZWZlcmVuY2VzIHF1YW5kIFwibGF0ZXJfNTBcIiBlc3QgY2hvaXNpJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHdvcmRzRGF0YSA9IGNyZWF0ZVdvcmRzRGF0YSg2MCk7XG4gICAgQXN5bmNTdG9yYWdlLmdldEl0ZW0ubW9ja0ltcGxlbWVudGF0aW9uKChrZXkpID0+IHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUod29yZHNEYXRhW2tleV0gfHwgbnVsbCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCB7IGdldEJ5VGVzdElkLCBxdWVyeUJ5VGVzdElkIH0gPSByZW5kZXIoPFJldmlzaW9uT3JjaGVzdHJhdG9yIC8+KTtcbiAgICBcbiAgICAvLyBBdHRlbmRyZSBsZSBjaGFyZ2VtZW50IGRlcyBkb25uw6llcyBldCBsJ2FmZmljaGFnZSBkZSBsYSBwb3B1cFxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoMTAwKTtcbiAgICB9KTtcblxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoMTAwMCk7XG4gICAgfSk7XG5cbiAgICAvLyBBdHRlbmRyZSBxdWUgbGEgcG9wdXAgc29pdCByZW5kdWVcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChxdWVyeUJ5VGVzdElkKCdyZXZpc2lvbi1wb3B1cCcpKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBsYXRlckJ1dHRvbiA9IGdldEJ5VGVzdElkKCdwb3B1cC1sYXRlcjUwJyk7XG4gICAgXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhsYXRlckJ1dHRvbik7XG4gICAgfSk7XG5cbiAgICAvLyBWw6lyaWZpZXIgbCdhcHBlbCAtIDYwIG1vdHMgKyA1MCA9IDExMFxuICAgIGV4cGVjdChtb2NrVXNlUmV2aXNpb25TZXR0aW5ncy51cGRhdGVQcmVmZXJlbmNlcykudG9IYXZlQmVlbkNhbGxlZFdpdGgoeyBcbiAgICAgIG5leHRSZXZpc2lvbkF0OiAxMTAgXG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdhcHBlbGxlIGRpc2FibGVSZXZpc2lvbnMgcXVhbmQgXCJkaXNhYmxlXCIgZXN0IGNob2lzaScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB3b3Jkc0RhdGEgPSBjcmVhdGVXb3Jkc0RhdGEoNjApO1xuICAgIEFzeW5jU3RvcmFnZS5nZXRJdGVtLm1vY2tJbXBsZW1lbnRhdGlvbigoa2V5KSA9PiB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHdvcmRzRGF0YVtrZXldIHx8IG51bGwpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCwgcXVlcnlCeVRlc3RJZCB9ID0gcmVuZGVyKDxSZXZpc2lvbk9yY2hlc3RyYXRvciAvPik7XG4gICAgXG4gICAgLy8gQXR0ZW5kcmUgbGUgY2hhcmdlbWVudCBkZXMgZG9ubsOpZXMgZXQgbCdhZmZpY2hhZ2UgZGUgbGEgcG9wdXBcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgamVzdC5hZHZhbmNlVGltZXJzQnlUaW1lKDEwMCk7XG4gICAgfSk7XG5cbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgamVzdC5hZHZhbmNlVGltZXJzQnlUaW1lKDEwMDApO1xuICAgIH0pO1xuXG4gICAgLy8gQXR0ZW5kcmUgcXVlIGxhIHBvcHVwIHNvaXQgcmVuZHVlXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3QocXVlcnlCeVRlc3RJZCgncmV2aXNpb24tcG9wdXAnKSkudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgZGlzYWJsZUJ1dHRvbiA9IGdldEJ5VGVzdElkKCdwb3B1cC1kaXNhYmxlJyk7XG4gICAgXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhkaXNhYmxlQnV0dG9uKTtcbiAgICB9KTtcblxuICAgIC8vIFbDqXJpZmllciBsJ2FwcGVsXG4gICAgZXhwZWN0KG1vY2tVc2VSZXZpc2lvblNldHRpbmdzLmRpc2FibGVSZXZpc2lvbnMpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ2fDqHJlIGxhIGZlcm1ldHVyZSAoZGlzbWlzcykgZW4gY2hvaXNpc3NhbnQgXCJsYXRlcl81MFwiIHBhciBkw6lmYXV0JywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHdvcmRzRGF0YSA9IGNyZWF0ZVdvcmRzRGF0YSg2MCk7XG4gICAgQXN5bmNTdG9yYWdlLmdldEl0ZW0ubW9ja0ltcGxlbWVudGF0aW9uKChrZXkpID0+IHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUod29yZHNEYXRhW2tleV0gfHwgbnVsbCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCB7IGdldEJ5VGVzdElkLCBxdWVyeUJ5VGVzdElkIH0gPSByZW5kZXIoPFJldmlzaW9uT3JjaGVzdHJhdG9yIC8+KTtcbiAgICBcbiAgICAvLyBBdHRlbmRyZSBsZSBjaGFyZ2VtZW50IGRlcyBkb25uw6llcyBldCBsJ2FmZmljaGFnZSBkZSBsYSBwb3B1cFxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoMTAwKTtcbiAgICB9KTtcblxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoMTAwMCk7XG4gICAgfSk7XG5cbiAgICAvLyBBdHRlbmRyZSBxdWUgbGEgcG9wdXAgc29pdCByZW5kdWVcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChxdWVyeUJ5VGVzdElkKCdyZXZpc2lvbi1wb3B1cCcpKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBkaXNtaXNzQnV0dG9uID0gZ2V0QnlUZXN0SWQoJ3BvcHVwLWRpc21pc3MnKTtcbiAgICBcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgZmlyZUV2ZW50LnByZXNzKGRpc21pc3NCdXR0b24pO1xuICAgIH0pO1xuXG4gICAgLy8gVsOpcmlmaWVyIGwnYXBwZWwgLSA2MCBtb3RzICsgNTAgPSAxMTBcbiAgICBleHBlY3QobW9ja1VzZVJldmlzaW9uU2V0dGluZ3MudXBkYXRlUHJlZmVyZW5jZXMpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHsgXG4gICAgICBuZXh0UmV2aXNpb25BdDogMTEwIFxuICAgIH0pO1xuICB9KTtcblxuICAvLyBUZXN0IGRlIGRlYnVnZ2luZyBwb3VyIGNvbXByZW5kcmUgbGUgY29tcG9ydGVtZW50XG4gIGl0KCdkZWJ1ZyAtIHbDqXJpZmllIGxlcyBjb25kaXRpb25zIGRlIGxhIHBvcHVwJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHdvcmRzRGF0YSA9IGNyZWF0ZVdvcmRzRGF0YSg2MCk7XG4gICAgQXN5bmNTdG9yYWdlLmdldEl0ZW0ubW9ja0ltcGxlbWVudGF0aW9uKChrZXkpID0+IHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUod29yZHNEYXRhW2tleV0gfHwgbnVsbCk7XG4gICAgfSk7XG5cbiAgICAvLyBFc3Bpb25uZXIgbGVzIGFwcGVscyBBc3luY1N0b3JhZ2VcbiAgICBjb25zdCBnZXRJdGVtU3B5ID0gamVzdC5zcHlPbihBc3luY1N0b3JhZ2UsICdnZXRJdGVtJyk7XG5cbiAgICBjb25zdCBUZXN0Q29tcG9uZW50ID0gKCkgPT4ge1xuICAgICAgY29uc3QgW2RlYnVnSW5mbywgc2V0RGVidWdJbmZvXSA9IFJlYWN0LnVzZVN0YXRlKHt9KTtcbiAgICAgIGNvbnN0IHsgcHJlZmVyZW5jZXMgfSA9IFJldmlzaW9uU2V0dGluZ3NIb29rLnVzZVJldmlzaW9uU2V0dGluZ3MoKTtcbiAgICAgIFxuICAgICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgY29uc3QgY291bnRXb3JkcyA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICBsZXQgdG90YWwgPSAwO1xuICAgICAgICAgIGNvbnN0IGxldmVscyA9IFsnMScsICcyJywgJzMnLCAnNCcsICc1JywgJzYnLCAnYm9udXMnXTtcbiAgICAgICAgICBjb25zdCBtb2RlcyA9IFsnY2xhc3NpYycsICdmYXN0J107XG5cbiAgICAgICAgICBmb3IgKGNvbnN0IGxldmVsIG9mIGxldmVscykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBtb2RlIG9mIG1vZGVzKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHN0b3JlZCA9IGF3YWl0IEFzeW5jU3RvcmFnZS5nZXRJdGVtKGB2b2NhYnVsYXJ5XyR7bGV2ZWx9XyR7bW9kZX1gKTtcbiAgICAgICAgICAgICAgaWYgKHN0b3JlZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKHN0b3JlZCk7XG4gICAgICAgICAgICAgICAgY29uc3QgY29tcGxldGVkV29yZHMgPSBkYXRhLmNvbXBsZXRlZFdvcmRzIHx8IHt9O1xuICAgICAgICAgICAgICAgIHRvdGFsICs9IE9iamVjdC52YWx1ZXMoY29tcGxldGVkV29yZHMpLnJlZHVjZSgoYWNjLCB3b3JkcykgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkod29yZHMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhY2MgKyB3b3Jkcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIHNldERlYnVnSW5mbyh7XG4gICAgICAgICAgICB0b3RhbFdvcmRzOiB0b3RhbCxcbiAgICAgICAgICAgIGlzRGlzYWJsZWQ6IHByZWZlcmVuY2VzLmlzRGlzYWJsZWQsXG4gICAgICAgICAgICBuZXh0UmV2aXNpb25BdDogcHJlZmVyZW5jZXMubmV4dFJldmlzaW9uQXQsXG4gICAgICAgICAgICBzaG91bGRTaG93OiAhcHJlZmVyZW5jZXMuaXNEaXNhYmxlZCAmJiB0b3RhbCA+PSBwcmVmZXJlbmNlcy5uZXh0UmV2aXNpb25BdCAmJiB0b3RhbCA+IDBcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb3VudFdvcmRzKCk7XG4gICAgICB9LCBbcHJlZmVyZW5jZXNdKTtcblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFZpZXcgdGVzdElEPVwiZGVidWctaW5mb1wiPlxuICAgICAgICAgIDxUZXh0IHRlc3RJRD1cImRlYnVnLXRvdGFsXCI+e2RlYnVnSW5mby50b3RhbFdvcmRzfTwvVGV4dD5cbiAgICAgICAgICA8VGV4dCB0ZXN0SUQ9XCJkZWJ1Zy1kaXNhYmxlZFwiPntTdHJpbmcoZGVidWdJbmZvLmlzRGlzYWJsZWQpfTwvVGV4dD5cbiAgICAgICAgICA8VGV4dCB0ZXN0SUQ9XCJkZWJ1Zy10aHJlc2hvbGRcIj57ZGVidWdJbmZvLm5leHRSZXZpc2lvbkF0fTwvVGV4dD5cbiAgICAgICAgICA8VGV4dCB0ZXN0SUQ9XCJkZWJ1Zy1zaG91bGQtc2hvd1wiPntTdHJpbmcoZGVidWdJbmZvLnNob3VsZFNob3cpfTwvVGV4dD5cbiAgICAgICAgPC9WaWV3PlxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxUZXN0Q29tcG9uZW50IC8+KTtcbiAgICBcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChnZXRJdGVtU3B5KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgamVzdC5hZHZhbmNlVGltZXJzQnlUaW1lKDEwMDApO1xuICAgIH0pO1xuXG4gICAgY29uc3QgdG90YWxXb3JkcyA9IGdldEJ5VGVzdElkKCdkZWJ1Zy10b3RhbCcpLmNoaWxkcmVuWzBdO1xuICAgIGNvbnN0IGlzRGlzYWJsZWQgPSBnZXRCeVRlc3RJZCgnZGVidWctZGlzYWJsZWQnKS5jaGlsZHJlblswXTtcbiAgICBjb25zdCB0aHJlc2hvbGQgPSBnZXRCeVRlc3RJZCgnZGVidWctdGhyZXNob2xkJykuY2hpbGRyZW5bMF07XG4gICAgY29uc3Qgc2hvdWxkU2hvdyA9IGdldEJ5VGVzdElkKCdkZWJ1Zy1zaG91bGQtc2hvdycpLmNoaWxkcmVuWzBdO1xuXG4gICAgZXhwZWN0KHRvdGFsV29yZHMpLnRvQmUoJzYwJyk7XG4gICAgZXhwZWN0KGlzRGlzYWJsZWQpLnRvQmUoJ2ZhbHNlJyk7XG4gICAgZXhwZWN0KHRocmVzaG9sZCkudG9CZSgnNTAnKTtcbiAgICBleHBlY3Qoc2hvdWxkU2hvdykudG9CZSgndHJ1ZScpO1xuICB9KTtcblxuICAvLyBUZXN0IHN1cHBsw6ltZW50YWlyZSBwb3VyIHbDqXJpZmllciBsZSBjb21wdGFnZSBkZXMgbW90c1xuICBpdCgnY29tcHRlIGNvcnJlY3RlbWVudCBsZXMgbW90cyBkZXB1aXMgQXN5bmNTdG9yYWdlJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHdvcmRzRGF0YSA9IGNyZWF0ZVdvcmRzRGF0YSgzNSk7XG4gICAgQXN5bmNTdG9yYWdlLmdldEl0ZW0ubW9ja0ltcGxlbWVudGF0aW9uKChrZXkpID0+IHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUod29yZHNEYXRhW2tleV0gfHwgbnVsbCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCB7IHF1ZXJ5QnlUZXN0SWQgfSA9IHJlbmRlcig8UmV2aXNpb25PcmNoZXN0cmF0b3IgLz4pO1xuICAgIFxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoMjAwMCk7XG4gICAgfSk7XG5cbiAgICAvLyBBdmVjIDM1IG1vdHMgZXQgdW4gc2V1aWwgw6AgNTAsIGxhIHBvcHVwIG5lIGRvaXQgcGFzIGFwcGFyYcOudHJlXG4gICAgZXhwZWN0KHF1ZXJ5QnlUZXN0SWQoJ3JldmlzaW9uLXBvcHVwJykpLnRvQmVOdWxsKCk7XG4gICAgXG4gICAgLy8gVsOpcmlmaWVyIHF1ZSBBc3luY1N0b3JhZ2UgYSDDqXTDqSBhcHBlbMOpIHBvdXIgdG91cyBsZXMgbml2ZWF1eC9tb2Rlc1xuICAgIGNvbnN0IGV4cGVjdGVkQ2FsbHMgPSBbJzEnLCAnMicsICczJywgJzQnLCAnNScsICc2JywgJ2JvbnVzJ11cbiAgICAgIC5mbGF0TWFwKGxldmVsID0+IFsnY2xhc3NpYycsICdmYXN0J10ubWFwKG1vZGUgPT4gYHZvY2FidWxhcnlfJHtsZXZlbH1fJHttb2RlfWApKTtcbiAgICBcbiAgICBleHBlY3RlZENhbGxzLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGV4cGVjdChBc3luY1N0b3JhZ2UuZ2V0SXRlbSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoa2V5KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gVGVzdCBkZSBkZWJ1ZyBwb3VyIHbDqXJpZmllciBsJ8OpdGF0IGR1IGNvbXBvc2FudCBSZXZpc2lvbk9yY2hlc3RyYXRvclxuICBpdCgnZGVidWcgLSB2w6lyaWZpZSBsXFwnw6l0YXQgZHUgY29tcG9zYW50IFJldmlzaW9uT3JjaGVzdHJhdG9yJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHdvcmRzRGF0YSA9IGNyZWF0ZVdvcmRzRGF0YSg2MCk7XG4gICAgQXN5bmNTdG9yYWdlLmdldEl0ZW0ubW9ja0ltcGxlbWVudGF0aW9uKChrZXkpID0+IHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUod29yZHNEYXRhW2tleV0gfHwgbnVsbCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCB7IHF1ZXJ5QnlUZXN0SWQgfSA9IHJlbmRlcig8UmV2aXNpb25PcmNoZXN0cmF0b3IgLz4pO1xuICAgIFxuICAgIC8vIEF0dGVuZHJlIHF1ZSBsZXMgZG9ubsOpZXMgc29pZW50IGNoYXJnw6llc1xuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoMTAwKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChxdWVyeUJ5VGVzdElkKCdyZXZpc2lvbi1wb3B1cCcpKS50b0JlTnVsbCgpO1xuXG4gICAgLy8gQXR0ZW5kcmUgcXVlIGxhIHBvcHVwIGFwcGFyYWlzc2UgYXByw6hzIGxlIHNldFRpbWVvdXRcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgamVzdC5hZHZhbmNlVGltZXJzQnlUaW1lKDEwMDApO1xuICAgIH0pO1xuXG4gICAgLy8gVsOpcmlmaWVyIHF1ZSBsYSBwb3B1cCBlc3QgdmlzaWJsZVxuICAgIGNvbnN0IHBvcHVwID0gcXVlcnlCeVRlc3RJZCgncmV2aXNpb24tcG9wdXAnKTtcbiAgICBleHBlY3QocG9wdXApLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgLy8gVGVzdCBwb3VyIHbDqXJpZmllciBsZSBtb2NrIEFzeW5jU3RvcmFnZVxuICBpdCgnZGVidWcgLSB2w6lyaWZpZSBsZSBtb2NrIEFzeW5jU3RvcmFnZScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB3b3Jkc0RhdGEgPSBjcmVhdGVXb3Jkc0RhdGEoNjApO1xuICAgIFxuICAgIEFzeW5jU3RvcmFnZS5nZXRJdGVtLm1vY2tJbXBsZW1lbnRhdGlvbigoa2V5KSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSB3b3Jkc0RhdGFba2V5XSB8fCBudWxsO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHQpO1xuICAgIH0pO1xuXG4gICAgLy8gU2ltdWxlciBsZXMgYXBwZWxzXG4gICAgY29uc3QgbGV2ZWxzID0gWycxJywgJzInLCAnMycsICc0JywgJzUnLCAnNicsICdib251cyddO1xuICAgIGNvbnN0IG1vZGVzID0gWydjbGFzc2ljJywgJ2Zhc3QnXTtcbiAgICBcbiAgICBsZXQgdG90YWwgPSAwO1xuICAgIGZvciAoY29uc3QgbGV2ZWwgb2YgbGV2ZWxzKSB7XG4gICAgICBmb3IgKGNvbnN0IG1vZGUgb2YgbW9kZXMpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gYHZvY2FidWxhcnlfJHtsZXZlbH1fJHttb2RlfWA7XG4gICAgICAgIGNvbnN0IHN0b3JlZCA9IGF3YWl0IEFzeW5jU3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgICAgIGlmIChzdG9yZWQpIHtcbiAgICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShzdG9yZWQpO1xuICAgICAgICAgIGNvbnN0IGNvbXBsZXRlZFdvcmRzID0gZGF0YS5jb21wbGV0ZWRXb3JkcyB8fCB7fTtcbiAgICAgICAgICBjb25zdCBjb3VudCA9IE9iamVjdC52YWx1ZXMoY29tcGxldGVkV29yZHMpLnJlZHVjZSgoYWNjLCB3b3JkcykgPT4ge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkod29yZHMpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBhY2MgKyB3b3Jkcy5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICAgIHRvdGFsICs9IGNvdW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIGV4cGVjdCh0b3RhbCkudG9CZSg2MCk7XG4gIH0pO1xuXG4gIC8vIE5vdXZlYXUgdGVzdCBwb3VyIHbDqXJpZmllciBsZSB0aW1pbmcgZXhhY3RcbiAgaXQoJ3Jlc3BlY3RlIGxlIGTDqWxhaSBkZSAxMDAwbXMgYXZhbnQgZFxcJ2FmZmljaGVyIGxhIHBvcHVwJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHdvcmRzRGF0YSA9IGNyZWF0ZVdvcmRzRGF0YSg2MCk7XG4gICAgQXN5bmNTdG9yYWdlLmdldEl0ZW0ubW9ja0ltcGxlbWVudGF0aW9uKChrZXkpID0+IHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUod29yZHNEYXRhW2tleV0gfHwgbnVsbCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCB7IHF1ZXJ5QnlUZXN0SWQgfSA9IHJlbmRlcig8UmV2aXNpb25PcmNoZXN0cmF0b3IgLz4pO1xuICAgIFxuICAgIC8vIEF0dGVuZHJlIGxlIGNoYXJnZW1lbnQgZGVzIGRvbm7DqWVzIEFzeW5jU3RvcmFnZVxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoMTAwKTtcbiAgICB9KTtcblxuICAgIC8vIMOAIGNlIG1vbWVudCwgbGEgcG9wdXAgbmUgZG9pdCBwYXMgZW5jb3JlIMOqdHJlIHZpc2libGVcbiAgICBleHBlY3QocXVlcnlCeVRlc3RJZCgncmV2aXNpb24tcG9wdXAnKSkudG9CZU51bGwoKTtcblxuICAgIC8vIEF2YW5jZXIgZGUgOTk5bXMgLSBwb3B1cCB0b3Vqb3VycyBwYXMgdmlzaWJsZVxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoOTk5KTtcbiAgICB9KTtcbiAgICBleHBlY3QocXVlcnlCeVRlc3RJZCgncmV2aXNpb24tcG9wdXAnKSkudG9CZU51bGwoKTtcblxuICAgIC8vIEF2YW5jZXIgZGUgMW1zIHN1cHBsw6ltZW50YWlyZSAtIG1haW50ZW5hbnQgbGEgcG9wdXAgZG9pdCDDqnRyZSB2aXNpYmxlXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSgxKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChxdWVyeUJ5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