b53a4eae958d54b713a8a1362aa93676
_getJestObj().mock('../../../../src/screens/exercises/grammar/hooks/useGrammar', function () {
  return {
    __esModule: true,
    default: jest.fn()
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useNavigation: function useNavigation() {
      return {
        goBack: jest.fn()
      };
    }
  });
});
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _grammar = _interopRequireDefault(require("../../../../src/screens/exercises/grammar"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockUseGrammar = require('../../../../src/screens/exercises/grammar/hooks/useGrammar').default;
describe('GrammarExercise', function () {
  var mockRoute = {
    params: {
      level: 'A1'
    }
  };
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('should render loading state initially', function () {
    mockUseGrammar.mockReturnValue({
      loaded: false,
      grammarData: []
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_grammar.default, {
      route: mockRoute
    }));
    expect(_reactNative.screen.getByTestId('activity-indicator')).toBeTruthy();
  });
  it('should render the main components when loaded', function () {
    mockUseGrammar.mockReturnValue({
      loaded: true,
      grammarData: [{
        title: 'Rule 1',
        exercises: [{
          type: 'multiple-choice',
          question: 'Question 1'
        }]
      }],
      ruleIndex: 0,
      exerciseIndex: 0,
      currentRule: {
        title: 'Rule 1',
        content: 'Content 1'
      },
      currentExercise: {
        type: 'multiple-choice',
        question: 'Question 1'
      },
      completedExercises: {},
      showDetailedProgress: false,
      canCheckAnswer: true,
      isFirstExercise: true,
      isLastExercise: false,
      showFeedback: false,
      attempts: 0
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_grammar.default, {
      route: mockRoute
    }));
    expect(_reactNative.screen.getByText('Rule 1')).toBeTruthy();
    expect(_reactNative.screen.getByText('Question 1')).toBeTruthy();
  });
  it('should call changeRule when a rule is selected', function () {
    var changeRule = jest.fn();
    mockUseGrammar.mockReturnValue({
      loaded: true,
      grammarData: [{
        title: 'Rule 1'
      }, {
        title: 'Rule 2'
      }],
      ruleIndex: 0,
      completedExercises: {},
      changeRule: changeRule
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_grammar.default, {
      route: mockRoute
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Rule 2'));
    expect(changeRule).toHaveBeenCalledWith(1);
  });
  it('should call submitAnswer when check answer button is pressed', function () {
    var submitAnswer = jest.fn();
    mockUseGrammar.mockReturnValue({
      loaded: true,
      grammarData: [{
        title: 'Rule 1'
      }],
      currentExercise: {
        type: 'multiple-choice',
        question: 'Question 1'
      },
      canCheckAnswer: true,
      completedExercises: {},
      submitAnswer: submitAnswer
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_grammar.default, {
      route: mockRoute
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Check Answer'));
    expect(submitAnswer).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,