0517920654a831fa27f48034320f5051
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SettingsProvider = exports.SettingsContext = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _storageUtils = require("../utils/storageUtils");
var _constants = require("../utils/constants");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
var SettingsContext = exports.SettingsContext = (0, _react.createContext)();
var SettingsProvider = exports.SettingsProvider = function SettingsProvider(_ref) {
  var children = _ref.children;
  var _useState = (0, _react.useState)(_constants.DEFAULT_SETTINGS),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    settings = _useState2[0],
    setSettings = _useState2[1];
  var _useState3 = (0, _react.useState)(true),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isLoading = _useState4[0],
    setIsLoading = _useState4[1];
  (0, _react.useEffect)(function () {
    var loadSettings = function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* () {
        try {
          setIsLoading(true);
          var savedSettings = yield (0, _storageUtils.getData)('userSettings');
          if (savedSettings) {
            setSettings(Object.assign({}, _constants.DEFAULT_SETTINGS, savedSettings));
          } else {
            setSettings(_constants.DEFAULT_SETTINGS);
          }
        } catch (error) {
          console.warn('Error loading settings, using defaults:', error);
          setSettings(_constants.DEFAULT_SETTINGS);
        } finally {
          setIsLoading(false);
        }
      });
      return function loadSettings() {
        return _ref2.apply(this, arguments);
      };
    }();
    loadSettings();
  }, []);
  (0, _react.useEffect)(function () {
    if (!isLoading) {
      (0, _storageUtils.storeData)('userSettings', settings);
    }
  }, [settings, isLoading]);
  var updateSetting = (0, _react.useCallback)(function (key, value) {
    if (settings[key] === undefined) {
      return;
    }
    setSettings(function (prevSettings) {
      return Object.assign({}, prevSettings, (0, _defineProperty2.default)({}, key, value));
    });
  }, [settings]);
  var updateSettings = (0, _react.useCallback)(function (newSettings) {
    setSettings(function (prevSettings) {
      return Object.assign({}, prevSettings, newSettings);
    });
  }, []);
  var resetSettings = (0, _react.useCallback)(function () {
    setSettings(_constants.DEFAULT_SETTINGS);
  }, []);
  var areNotificationsEnabled = (0, _react.useMemo)(function () {
    return settings.notifications;
  }, [settings.notifications]);
  var getDailyGoal = (0, _react.useMemo)(function () {
    return settings.dailyGoal;
  }, [settings.dailyGoal]);
  var setDailyGoal = (0, _react.useCallback)(function (minutes) {
    updateSetting('dailyGoal', Math.max(1, Math.min(120, minutes)));
  }, [updateSetting]);
  var contextValue = (0, _react.useMemo)(function () {
    return {
      settings: settings,
      updateSetting: updateSetting,
      updateSettings: updateSettings,
      resetSettings: resetSettings,
      areNotificationsEnabled: areNotificationsEnabled,
      getDailyGoal: getDailyGoal,
      setDailyGoal: setDailyGoal,
      isLoading: isLoading
    };
  }, [settings, updateSetting, updateSettings, resetSettings, areNotificationsEnabled, getDailyGoal, setDailyGoal, isLoading]);
  return (0, _jsxRuntime.jsx)(SettingsContext.Provider, {
    value: contextValue,
    children: children
  });
};
SettingsProvider.propTypes = {
  children: _propTypes.default.node.isRequired
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3N0b3JhZ2VVdGlscyIsIl9jb25zdGFudHMiLCJfcHJvcFR5cGVzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9qc3hSdW50aW1lIiwiU2V0dGluZ3NDb250ZXh0IiwiZXhwb3J0cyIsImNyZWF0ZUNvbnRleHQiLCJTZXR0aW5nc1Byb3ZpZGVyIiwiX3JlZiIsImNoaWxkcmVuIiwiX3VzZVN0YXRlIiwidXNlU3RhdGUiLCJERUZBVUxUX1NFVFRJTkdTIiwiX3VzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5MiIsImRlZmF1bHQiLCJzZXR0aW5ncyIsInNldFNldHRpbmdzIiwiX3VzZVN0YXRlMyIsIl91c2VTdGF0ZTQiLCJpc0xvYWRpbmciLCJzZXRJc0xvYWRpbmciLCJ1c2VFZmZlY3QiLCJsb2FkU2V0dGluZ3MiLCJfcmVmMiIsIl9hc3luY1RvR2VuZXJhdG9yMiIsInNhdmVkU2V0dGluZ3MiLCJnZXREYXRhIiwiT2JqZWN0IiwiYXNzaWduIiwiZXJyb3IiLCJjb25zb2xlIiwid2FybiIsImFwcGx5IiwiYXJndW1lbnRzIiwic3RvcmVEYXRhIiwidXBkYXRlU2V0dGluZyIsInVzZUNhbGxiYWNrIiwia2V5IiwidmFsdWUiLCJ1bmRlZmluZWQiLCJwcmV2U2V0dGluZ3MiLCJfZGVmaW5lUHJvcGVydHkyIiwidXBkYXRlU2V0dGluZ3MiLCJuZXdTZXR0aW5ncyIsInJlc2V0U2V0dGluZ3MiLCJhcmVOb3RpZmljYXRpb25zRW5hYmxlZCIsInVzZU1lbW8iLCJub3RpZmljYXRpb25zIiwiZ2V0RGFpbHlHb2FsIiwiZGFpbHlHb2FsIiwic2V0RGFpbHlHb2FsIiwibWludXRlcyIsIk1hdGgiLCJtYXgiLCJtaW4iLCJjb250ZXh0VmFsdWUiLCJqc3giLCJQcm92aWRlciIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsIm5vZGUiLCJpc1JlcXVpcmVkIl0sInNvdXJjZXMiOlsiU2V0dGluZ0NvbnRleHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2NvbnRleHRzL1NldHRpbmdzQ29udGV4dC5qc1xyXG5pbXBvcnQgeyBjcmVhdGVDb250ZXh0LCB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VNZW1vLCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgc3RvcmVEYXRhLCBnZXREYXRhIH0gZnJvbSAnLi4vdXRpbHMvc3RvcmFnZVV0aWxzJztcclxuaW1wb3J0IHsgREVGQVVMVF9TRVRUSU5HUyB9IGZyb20gJy4uL3V0aWxzL2NvbnN0YW50cyc7XHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XHJcblxyXG4vLyBDcsOpZXIgbGUgY29udGV4dGVcclxuZXhwb3J0IGNvbnN0IFNldHRpbmdzQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcclxuXHJcbi8qKlxyXG4gKiBGb3Vybmlzc2V1ciBkZSBjb250ZXh0ZSBwb3VyIGfDqXJlciBsZXMgcGFyYW3DqHRyZXMgZGUgbCdhcHBsaWNhdGlvblxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFNldHRpbmdzUHJvdmlkZXIgPSAoeyBjaGlsZHJlbiB9KSA9PiB7XHJcbiAgLy8gw4l0YXQgZGVzIHBhcmFtw6h0cmVzXHJcbiAgY29uc3QgW3NldHRpbmdzLCBzZXRTZXR0aW5nc10gPSB1c2VTdGF0ZShERUZBVUxUX1NFVFRJTkdTKTtcclxuICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUodHJ1ZSk7XHJcblxyXG4gIC8vIENoYXJnZXIgbGVzIHBhcmFtw6h0cmVzIGF1IGTDqW1hcnJhZ2VcclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgY29uc3QgbG9hZFNldHRpbmdzID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHNldElzTG9hZGluZyh0cnVlKTtcclxuICAgICAgICBjb25zdCBzYXZlZFNldHRpbmdzID0gYXdhaXQgZ2V0RGF0YSgndXNlclNldHRpbmdzJyk7XHJcblxyXG4gICAgICAgIGlmIChzYXZlZFNldHRpbmdzKSB7XHJcbiAgICAgICAgICAvLyBGdXNpb25uZXIgYXZlYyBsZXMgcGFyYW3DqHRyZXMgcGFyIGTDqWZhdXQgcG91ciBzJ2Fzc3VyZXIgcXVlIHRvdXMgbGVzIGNoYW1wcyBzb250IHByw6lzZW50c1xyXG4gICAgICAgICAgc2V0U2V0dGluZ3MoeyAuLi5ERUZBVUxUX1NFVFRJTkdTLCAuLi5zYXZlZFNldHRpbmdzIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyBJZiBubyBzYXZlZCBzZXR0aW5ncywgdXNlIGRlZmF1bHRcclxuICAgICAgICAgIHNldFNldHRpbmdzKERFRkFVTFRfU0VUVElOR1MpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAvLyDinIUgR2VzdGlvbiBkJ2VycmV1ciBhcHByb3ByacOpZVxyXG4gICAgICAgIGNvbnNvbGUud2FybignRXJyb3IgbG9hZGluZyBzZXR0aW5ncywgdXNpbmcgZGVmYXVsdHM6JywgZXJyb3IpO1xyXG4gICAgICAgIHNldFNldHRpbmdzKERFRkFVTFRfU0VUVElOR1MpO1xyXG4gICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgbG9hZFNldHRpbmdzKCk7XHJcbiAgfSwgW10pO1xyXG5cclxuICAvLyBTYXV2ZWdhcmRlciBsZXMgcGFyYW3DqHRyZXMgbG9yc3F1J2lscyBjaGFuZ2VudFxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAoIWlzTG9hZGluZykge1xyXG4gICAgICBzdG9yZURhdGEoJ3VzZXJTZXR0aW5ncycsIHNldHRpbmdzKTtcclxuICAgIH1cclxuICB9LCBbc2V0dGluZ3MsIGlzTG9hZGluZ10pO1xyXG5cclxuICAvLyBNZXR0cmUgw6Agam91ciB1biBwYXJhbcOodHJlIHNww6ljaWZpcXVlXHJcbiAgY29uc3QgdXBkYXRlU2V0dGluZyA9IHVzZUNhbGxiYWNrKChrZXksIHZhbHVlKSA9PiB7XHJcbiAgICBpZiAoc2V0dGluZ3Nba2V5XSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBzZXRTZXR0aW5ncyhwcmV2U2V0dGluZ3MgPT4gKHtcclxuICAgICAgLi4ucHJldlNldHRpbmdzLFxyXG4gICAgICBba2V5XTogdmFsdWVcclxuICAgIH0pKTtcclxuICB9LCBbc2V0dGluZ3NdKTtcclxuXHJcbiAgLy8gTWV0dHJlIMOgIGpvdXIgcGx1c2lldXJzIHBhcmFtw6h0cmVzIMOgIGxhIGZvaXNcclxuICBjb25zdCB1cGRhdGVTZXR0aW5ncyA9IHVzZUNhbGxiYWNrKChuZXdTZXR0aW5ncykgPT4ge1xyXG4gICAgc2V0U2V0dGluZ3MocHJldlNldHRpbmdzID0+ICh7XHJcbiAgICAgIC4uLnByZXZTZXR0aW5ncyxcclxuICAgICAgLi4ubmV3U2V0dGluZ3NcclxuICAgIH0pKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIC8vIFLDqWluaXRpYWxpc2VyIHRvdXMgbGVzIHBhcmFtw6h0cmVzXHJcbiAgY29uc3QgcmVzZXRTZXR0aW5ncyA9IHVzZUNhbGxiYWNrKCgpID0+IHtcclxuICAgIHNldFNldHRpbmdzKERFRkFVTFRfU0VUVElOR1MpO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgLy8gVsOpcmlmaWVyIHNpIGxlcyBub3RpZmljYXRpb25zIHNvbnQgYWN0aXbDqWVzXHJcbiAgY29uc3QgYXJlTm90aWZpY2F0aW9uc0VuYWJsZWQgPSB1c2VNZW1vKCgpID0+IHtcclxuICAgIHJldHVybiBzZXR0aW5ncy5ub3RpZmljYXRpb25zO1xyXG4gIH0sIFtzZXR0aW5ncy5ub3RpZmljYXRpb25zXSk7XHJcblxyXG4gIC8vIE9idGVuaXIgbGUgZMOpbGFpIGpvdXJuYWxpZXJcclxuICBjb25zdCBnZXREYWlseUdvYWwgPSB1c2VNZW1vKCgpID0+IHtcclxuICAgIHJldHVybiBzZXR0aW5ncy5kYWlseUdvYWw7XHJcbiAgfSwgW3NldHRpbmdzLmRhaWx5R29hbF0pO1xyXG5cclxuICAvLyBEw6lmaW5pciBsZSBkw6lsYWkgam91cm5hbGllclxyXG4gIGNvbnN0IHNldERhaWx5R29hbCA9IHVzZUNhbGxiYWNrKChtaW51dGVzKSA9PiB7XHJcbiAgICB1cGRhdGVTZXR0aW5nKCdkYWlseUdvYWwnLCBNYXRoLm1heCgxLCBNYXRoLm1pbigxMjAsIG1pbnV0ZXMpKSk7IC8vIEVudHJlIDEgZXQgMTIwIG1pbnV0ZXNcclxuICB9LCBbdXBkYXRlU2V0dGluZ10pO1xyXG5cclxuICAvLyBWYWxldXIgZm91cm5pZSBwYXIgbGUgY29udGV4dGVcclxuICBjb25zdCBjb250ZXh0VmFsdWUgPSB1c2VNZW1vKCgpID0+ICh7XHJcbiAgICBzZXR0aW5ncyxcclxuICAgIHVwZGF0ZVNldHRpbmcsXHJcbiAgICB1cGRhdGVTZXR0aW5ncyxcclxuICAgIHJlc2V0U2V0dGluZ3MsXHJcbiAgICBhcmVOb3RpZmljYXRpb25zRW5hYmxlZCxcclxuICAgIGdldERhaWx5R29hbCxcclxuICAgIHNldERhaWx5R29hbCxcclxuICAgIGlzTG9hZGluZyxcclxuICB9KSwgW1xyXG4gICAgc2V0dGluZ3MsXHJcbiAgICB1cGRhdGVTZXR0aW5nLFxyXG4gICAgdXBkYXRlU2V0dGluZ3MsXHJcbiAgICByZXNldFNldHRpbmdzLFxyXG4gICAgYXJlTm90aWZpY2F0aW9uc0VuYWJsZWQsXHJcbiAgICBnZXREYWlseUdvYWwsXHJcbiAgICBzZXREYWlseUdvYWwsXHJcbiAgICBpc0xvYWRpbmcsXHJcbiAgXSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8U2V0dGluZ3NDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtjb250ZXh0VmFsdWV9PlxyXG4gICAgICB7Y2hpbGRyZW59XHJcbiAgICA8L1NldHRpbmdzQ29udGV4dC5Qcm92aWRlcj5cclxuICApO1xyXG59O1xyXG5cclxuLy8g4pyFIETDqWZpbml0aW9uIGRlIFByb3BUeXBlcyBwb3VyIGxlIGZvdXJuaXNzZXVyIGRlIGNvbnRleHRlXHJcblNldHRpbmdzUHJvdmlkZXIucHJvcFR5cGVzID0ge1xyXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxyXG59OyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFDQSxJQUFBQSxNQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxhQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxVQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxVQUFBLEdBQUFDLHNCQUFBLENBQUFKLE9BQUE7QUFBbUMsSUFBQUssV0FBQSxHQUFBTCxPQUFBO0FBRzVCLElBQU1NLGVBQWUsR0FBQUMsT0FBQSxDQUFBRCxlQUFBLEdBQUcsSUFBQUUsb0JBQWEsRUFBQyxDQUFDO0FBS3ZDLElBQU1DLGdCQUFnQixHQUFBRixPQUFBLENBQUFFLGdCQUFBLEdBQUcsU0FBbkJBLGdCQUFnQkEsQ0FBQUMsSUFBQSxFQUFxQjtFQUFBLElBQWZDLFFBQVEsR0FBQUQsSUFBQSxDQUFSQyxRQUFRO0VBRXpDLElBQUFDLFNBQUEsR0FBZ0MsSUFBQUMsZUFBUSxFQUFDQywyQkFBZ0IsQ0FBQztJQUFBQyxVQUFBLE9BQUFDLGVBQUEsQ0FBQUMsT0FBQSxFQUFBTCxTQUFBO0lBQW5ETSxRQUFRLEdBQUFILFVBQUE7SUFBRUksV0FBVyxHQUFBSixVQUFBO0VBQzVCLElBQUFLLFVBQUEsR0FBa0MsSUFBQVAsZUFBUSxFQUFDLElBQUksQ0FBQztJQUFBUSxVQUFBLE9BQUFMLGVBQUEsQ0FBQUMsT0FBQSxFQUFBRyxVQUFBO0lBQXpDRSxTQUFTLEdBQUFELFVBQUE7SUFBRUUsWUFBWSxHQUFBRixVQUFBO0VBRzlCLElBQUFHLGdCQUFTLEVBQUMsWUFBTTtJQUNkLElBQU1DLFlBQVk7TUFBQSxJQUFBQyxLQUFBLE9BQUFDLGtCQUFBLENBQUFWLE9BQUEsRUFBRyxhQUFZO1FBQy9CLElBQUk7VUFDRk0sWUFBWSxDQUFDLElBQUksQ0FBQztVQUNsQixJQUFNSyxhQUFhLFNBQVMs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