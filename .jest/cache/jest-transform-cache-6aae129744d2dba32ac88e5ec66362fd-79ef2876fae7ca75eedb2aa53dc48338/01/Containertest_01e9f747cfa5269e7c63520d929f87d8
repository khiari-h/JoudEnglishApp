6491d81ba21f06141b9b8bca6c2e635f
_getJestObj().mock('react-native-safe-area-context', function () {
  var _require = require('react-native'),
    View = _require.View;
  return {
    SafeAreaView: function SafeAreaView(_ref) {
      var children = _ref.children,
        style = _ref.style,
        edges = _ref.edges,
        rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      return (0, _jsxRuntime.jsx)(View, Object.assign({
        style: style
      }, rest, {
        testID: "mock-safe-area-view",
        edges: edges,
        children: children
      }));
    },
    useSafeAreaInsets: function useSafeAreaInsets() {
      return {
        top: 0,
        bottom: 0,
        left: 0,
        right: 0
      };
    },
    useSafeAreaFrame: function useSafeAreaFrame() {
      return {
        x: 0,
        y: 0,
        width: 320,
        height: 640
      };
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _Container = _interopRequireDefault(require("../../../src/components/layout/Container"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "style", "edges"];
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Container', function () {
  it('renders children correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Hello World"
        })
      })),
      getByText = _render.getByText;
    expect(getByText('Hello World')).toBeTruthy();
  });
  it('uses SafeAreaView by default', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {})),
      getByTestId = _render2.getByTestId;
    expect(getByTestId('mock-safe-area-view')).toBeTruthy();
  });
  it('uses View when safeArea is false', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {
        safeArea: false
      })),
      queryByTestId = _render3.queryByTestId,
      UNSAFE_getByType = _render3.UNSAFE_getByType;
    expect(queryByTestId('mock-safe-area-view')).toBeNull();
    expect(UNSAFE_getByType(_reactNative2.View)).toBeTruthy();
  });
  it('applies padding by default', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {})),
      getByTestId = _render4.getByTestId;
    var container = getByTestId('mock-safe-area-view');
    var flatStyle = _reactNative2.StyleSheet.flatten(container.props.style);
    expect(flatStyle).toHaveProperty('paddingHorizontal', 20);
  });
  it('does not apply padding when withPadding is false', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {
        withPadding: false
      })),
      getByTestId = _render5.getByTestId;
    var container = getByTestId('mock-safe-area-view');
    var flatStyle = _reactNative2.StyleSheet.flatten(container.props.style);
    expect(flatStyle).not.toHaveProperty('paddingHorizontal', 20);
  });
  it('renders ScrollView when withScrollView is true', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {
        withScrollView: true,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Scrollable Content"
        })
      })),
      getByTestId = _render6.getByTestId,
      UNSAFE_getByType = _render6.UNSAFE_getByType,
      getByText = _render6.getByText;
    expect(UNSAFE_getByType(_reactNative2.ScrollView)).toBeTruthy();
    expect(getByTestId('mock-safe-area-view')).toBeTruthy();
    expect(getByText('Scrollable Content')).toBeTruthy();
  });
  it('passes scrollViewProps to ScrollView', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {
        withScrollView: true,
        scrollViewProps: {
          keyboardShouldPersistTaps: 'always'
        }
      })),
      UNSAFE_getByType = _render7.UNSAFE_getByType;
    expect(UNSAFE_getByType(_reactNative2.ScrollView).props.keyboardShouldPersistTaps).toBe('always');
  });
  it('does not render ScrollView when withScrollView is false', function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {
        withScrollView: false,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Static Content"
        })
      })),
      queryByText = _render8.queryByText,
      UNSAFE_queryByType = _render8.UNSAFE_queryByType;
    expect(UNSAFE_queryByType(_reactNative2.ScrollView)).toBeNull();
    expect(queryByText('Static Content')).toBeTruthy();
  });
  it('renders StatusBar by default', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {}));
    expect(_reactNative2.StatusBar.setBarStyle).toHaveBeenCalledWith('dark-content');
    expect(_reactNative2.StatusBar.setBackgroundColor).toHaveBeenCalledWith('#FFFFFF');
  });
  it('does not render StatusBar when withStatusBar is false', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {
      withStatusBar: false
    }));
    expect(_reactNative2.StatusBar.setBarStyle).not.toHaveBeenCalled();
    expect(_reactNative2.StatusBar.setBackgroundColor).not.toHaveBeenCalled();
  });
  it('applies custom statusBarColor and statusBarStyle', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {
      statusBarColor: "#FF0000",
      statusBarStyle: "light-content"
    }));
    expect(_reactNative2.StatusBar.setBarStyle).toHaveBeenCalledWith('light-content');
    expect(_reactNative2.StatusBar.setBackgroundColor).toHaveBeenCalledWith('#FF0000');
  });
  it('applies custom backgroundColor', function () {
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {
        backgroundColor: "#FF00FF"
      })),
      getByTestId = _render9.getByTestId;
    var container = getByTestId('mock-safe-area-view');
    var flatStyle = _reactNative2.StyleSheet.flatten(container.props.style);
    expect(flatStyle).toHaveProperty('backgroundColor', '#FF00FF');
  });
  it('passes safeAreaEdges to SafeAreaView', function () {
    var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Container.default, {
        safeAreaEdges: ['bottom']
      })),
      getByTestId = _render0.getByTestId;
    var safeAreaView = getByTestId('mock-safe-area-view');
    expect(safeAreaView.props.edges).toEqual(['bottom']);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfcmVxdWlyZSIsInJlcXVpcmUiLCJWaWV3IiwiU2FmZUFyZWFWaWV3IiwiX3JlZiIsImNoaWxkcmVuIiwic3R5bGUiLCJlZGdlcyIsInJlc3QiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwiZGVmYXVsdCIsIl9leGNsdWRlZCIsIl9qc3hSdW50aW1lIiwianN4IiwiT2JqZWN0IiwiYXNzaWduIiwidGVzdElEIiwidXNlU2FmZUFyZWFJbnNldHMiLCJ0b3AiLCJib3R0b20iLCJsZWZ0IiwicmlnaHQiLCJ1c2VTYWZlQXJlYUZyYW1lIiwieCIsInkiLCJ3aWR0aCIsImhlaWdodCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfcmVhY3ROYXRpdmUyIiwiX3JlYWN0TmF0aXZlU2FmZUFyZWFDb250ZXh0IiwiX0NvbnRhaW5lciIsIl9yZXF1aXJlMiIsImplc3QiLCJkZXNjcmliZSIsIml0IiwiX3JlbmRlciIsInJlbmRlciIsIlRleHQiLCJnZXRCeVRleHQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwiX3JlbmRlcjIiLCJnZXRCeVRlc3RJZCIsIl9yZW5kZXIzIiwic2FmZUFyZWEiLCJxdWVyeUJ5VGVzdElkIiwiVU5TQUZFX2dldEJ5VHlwZSIsInRvQmVOdWxsIiwiX3JlbmRlcjQiLCJjb250YWluZXIiLCJmbGF0U3R5bGUiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsInByb3BzIiwidG9IYXZlUHJvcGVydHkiLCJfcmVuZGVyNSIsIndpdGhQYWRkaW5nIiwibm90IiwiX3JlbmRlcjYiLCJ3aXRoU2Nyb2xsVmlldyIsIlNjcm9sbFZpZXciLCJfcmVuZGVyNyIsInNjcm9sbFZpZXdQcm9wcyIsImtleWJvYXJkU2hvdWxkUGVyc2lzdFRhcHMiLCJ0b0JlIiwiX3JlbmRlcjgiLCJxdWVyeUJ5VGV4dCIsIlVOU0FGRV9xdWVyeUJ5VHlwZSIsIlN0YXR1c0JhciIsInNldEJhclN0eWxlIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJzZXRCYWNrZ3JvdW5kQ29sb3IiLCJ3aXRoU3RhdHVzQmFyIiwidG9IYXZlQmVlbkNhbGxlZCIsInN0YXR1c0JhckNvbG9yIiwic3RhdHVzQmFyU3R5bGUiLCJfcmVuZGVyOSIsImJhY2tncm91bmRDb2xvciIsIl9yZW5kZXIwIiwic2FmZUFyZWFFZGdlcyIsInNhZmVBcmVhVmlldyIsInRvRXF1YWwiXSwic291cmNlcyI6WyJDb250YWluZXIudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBfX3Rlc3RzX18vY29tcG9uZW50cy9sYXlvdXQvQ29udGFpbmVyLnRlc3QuanNcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBWaWV3LCBTY3JvbGxWaWV3LCBUZXh0LCBTdHlsZVNoZWV0LCBTdGF0dXNCYXIgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgU2FmZUFyZWFWaWV3IH0gZnJvbSAncmVhY3QtbmF0aXZlLXNhZmUtYXJlYS1jb250ZXh0JztcbmltcG9ydCBDb250YWluZXIgZnJvbSAnLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvbGF5b3V0L0NvbnRhaW5lcic7XG5cbi8vIE1vY2sgU2FmZUFyZWFWaWV3IGZyb20gcmVhY3QtbmF0aXZlLXNhZmUtYXJlYS1jb250ZXh0XG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS1zYWZlLWFyZWEtY29udGV4dCcsICgpID0+IHtcbiAgY29uc3QgeyBWaWV3IH0gPSByZXF1aXJlKCdyZWFjdC1uYXRpdmUnKTtcbiAgcmV0dXJuIHtcbiAgICBTYWZlQXJlYVZpZXc6ICh7IGNoaWxkcmVuLCBzdHlsZSwgZWRnZXMsIC4uLnJlc3QgfSkgPT4gKFxuICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlfSB7Li4ucmVzdH0gdGVzdElEPVwibW9jay1zYWZlLWFyZWEtdmlld1wiIGVkZ2VzPXtlZGdlc30+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvVmlldz5cbiAgICApLFxuICAgIHVzZVNhZmVBcmVhSW5zZXRzOiAoKSA9PiAoeyB0b3A6IDAsIGJvdHRvbTogMCwgbGVmdDogMCwgcmlnaHQ6IDAgfSksXG4gICAgdXNlU2FmZUFyZWFGcmFtZTogKCkgPT4gKHsgeDogMCwgeTogMCwgd2lkdGg6IDMyMCwgaGVpZ2h0OiA2NDAgfSksXG4gIH07XG59KTtcblxuZGVzY3JpYmUoJ0NvbnRhaW5lcicsICgpID0+IHtcbiAgLy8gTm8gbmVlZCB0byBjbGVhciBTdGF0dXNCYXIgbW9ja3MgaGVyZSwgaXQncyBoYW5kbGVkIGdsb2JhbGx5IGluIGplc3Quc2V0dXAuanNcbiAgLy8gYmVmb3JlRWFjaCgoKSA9PiB7XG4gIC8vICAgU3RhdHVzQmFyLnNldEJhclN0eWxlLm1vY2tDbGVhcigpO1xuICAvLyAgIFN0YXR1c0Jhci5zZXRCYWNrZ3JvdW5kQ29sb3IubW9ja0NsZWFyKCk7XG4gIC8vIH0pO1xuXG4gIGl0KCdyZW5kZXJzIGNoaWxkcmVuIGNvcnJlY3RseScsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKDxDb250YWluZXI+PFRleHQ+SGVsbG8gV29ybGQ8L1RleHQ+PC9Db250YWluZXI+KTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdIZWxsbyBXb3JsZCcpKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KCd1c2VzIFNhZmVBcmVhVmlldyBieSBkZWZhdWx0JywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcig8Q29udGFpbmVyIC8+KTtcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ21vY2stc2FmZS1hcmVhLXZpZXcnKSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICBpdCgndXNlcyBWaWV3IHdoZW4gc2FmZUFyZWEgaXMgZmFsc2UnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBxdWVyeUJ5VGVzdElkLCBVTlNBRkVfZ2V0QnlUeXBlIH0gPSByZW5kZXIoPENvbnRhaW5lciBzYWZlQXJlYT17ZmFsc2V9IC8+KTtcbiAgICBleHBlY3QocXVlcnlCeVRlc3RJZCgnbW9jay1zYWZlLWFyZWEtdmlldycpKS50b0JlTnVsbCgpO1xuICAgIGV4cGVjdChVTlNBRkVfZ2V0QnlUeXBlKFZpZXcpKS50b0JlVHJ1dGh5KCk7IC8vIENoZWNrIGlmIGl0IHJlbmRlcnMgYSBwbGFpbiBWaWV3XG4gIH0pO1xuXG4gIGl0KCdhcHBsaWVzIHBhZGRpbmcgYnkgZGVmYXVsdCcsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoPENvbnRhaW5lciAvPik7XG4gICAgY29uc3QgY29udGFpbmVyID0gZ2V0QnlUZXN0SWQoJ21vY2stc2FmZS1hcmVhLXZpZXcnKTtcbiAgICBjb25zdCBmbGF0U3R5bGUgPSBTdHlsZVNoZWV0LmZsYXR0ZW4oY29udGFpbmVyLnByb3BzLnN0eWxlKTtcbiAgICBleHBlY3QoZmxhdFN0eWxlKS50b0hhdmVQcm9wZXJ0eSgncGFkZGluZ0hvcml6b250YWwnLCAyMCk7IC8vIEV4YW1wbGUsIGFkanVzdCBiYXNlZCBvbiB5b3VyIHN0eWxlLmpzXG4gIH0pO1xuXG4gIGl0KCdkb2VzIG5vdCBhcHBseSBwYWRkaW5nIHdoZW4gd2l0aFBhZGRpbmcgaXMgZmFsc2UnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxDb250YWluZXIgd2l0aFBhZGRpbmc9e2ZhbHNlfSAvPik7XG4gICAgY29uc3QgY29udGFpbmVyID0gZ2V0QnlUZXN0SWQoJ21vY2stc2FmZS1hcmVhLXZpZXcnKTtcbiAgICBjb25zdCBmbGF0U3R5bGUgPSBTdHlsZVNoZWV0LmZsYXR0ZW4oY29udGFpbmVyLnByb3BzLnN0eWxlKTtcbiAgICBleHBlY3QoZmxhdFN0eWxlKS5ub3QudG9IYXZlUHJvcGVydHkoJ3BhZGRpbmdIb3Jpem9udGFsJywgMjApOyAvLyBFeGFtcGxlLCBhZGp1c3QgYmFzZWQgb24geW91ciBzdHlsZS5qc1xuICB9KTtcblxuICBpdCgncmVuZGVycyBTY3JvbGxWaWV3IHdoZW4gd2l0aFNjcm9sbFZpZXcgaXMgdHJ1ZScsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkLCBVTlNBRkVfZ2V0QnlUeXBlLCBnZXRCeVRleHQgfSA9IHJlbmRlcig8Q29udGFpbmVyIHdpdGhTY3JvbGxWaWV3PXt0cnVlfT48VGV4dD5TY3JvbGxhYmxlIENvbnRlbnQ8L1RleHQ+PC9Db250YWluZXI+KTtcbiAgICBleHBlY3QoVU5TQUZFX2dldEJ5VHlwZShTY3JvbGxWaWV3KSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnbW9jay1zYWZlLWFyZWEtdmlldycpKS50b0JlVHJ1dGh5KCk7IC8vIFN0aWxsIHdyYXBwZWQgYnkgU2FmZUFyZWFWaWV3XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnU2Nyb2xsYWJsZSBDb250ZW50JykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ3Bhc3NlcyBzY3JvbGxWaWV3UHJvcHMgdG8gU2Nyb2xsVmlldycsICgpID0+IHtcbiAgICBjb25zdCB7IFVOU0FGRV9nZXRCeVR5cGUgfSA9IHJlbmRlcihcbiAgICAgIDxDb250YWluZXIgd2l0aFNjcm9sbFZpZXc9e3RydWV9IHNjcm9sbFZpZXdQcm9wcz17eyBrZXlib2FyZFNob3VsZFBlcnNpc3RUYXBzOiAnYWx3YXlzJyB9fSAvPlxuICAgICk7XG4gICAgZXhwZWN0KFVOU0FGRV9nZXRCeVR5cGUoU2Nyb2xsVmlldykucHJvcHMua2V5Ym9hcmRTaG91bGRQZXJzaXN0VGFwcykudG9CZSgnYWx3YXlzJyk7XG4gIH0pO1xuXG4gIGl0KCdkb2VzIG5vdCByZW5kZXIgU2Nyb2xsVmlldyB3aGVuIHdpdGhTY3JvbGxWaWV3IGlzIGZhbHNlJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgcXVlcnlCeVRleHQsIFVOU0FGRV9xdWVyeUJ5VHlwZSB9ID0gcmVuZGVyKDxDb250YWluZXIgd2l0aFNjcm9sbFZpZXc9e2ZhbHNlfT48VGV4dD5TdGF0aWMgQ29udGVudDwvVGV4dD48L0NvbnRhaW5lcj4pO1xuICAgIGV4cGVjdChVTlNBRkVfcXVlcnlCeVR5cGUoU2Nyb2xsVmlldykpLnRvQmVOdWxsKCk7XG4gICAgZXhwZWN0KHF1ZXJ5QnlUZXh0KCdTdGF0aWMgQ29udGVudCcpKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KCdyZW5kZXJzIFN0YXR1c0JhciBieSBkZWZhdWx0JywgKCkgPT4ge1xuICAgIHJlbmRlcig8Q29udGFpbmVyIC8+KTtcbiAgICBleHBlY3QoU3RhdHVzQmFyLnNldEJhclN0eWxlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnZGFyay1jb250ZW50Jyk7XG4gICAgZXhwZWN0KFN0YXR1c0Jhci5zZXRCYWNrZ3JvdW5kQ29sb3IpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcjRkZGRkZGJyk7XG4gIH0pO1xuXG4gIGl0KCdkb2VzIG5vdCByZW5kZXIgU3RhdHVzQmFyIHdoZW4gd2l0aFN0YXR1c0JhciBpcyBmYWxzZScsICgpID0+IHtcbiAgICByZW5kZXIoPENvbnRhaW5lciB3aXRoU3RhdHVzQmFyPXtmYWxzZX0gLz4pO1xuICAgIGV4cGVjdChTdGF0dXNCYXIuc2V0QmFyU3R5bGUpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgZXhwZWN0KFN0YXR1c0Jhci5zZXRCYWNrZ3JvdW5kQ29sb3IpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xuXG4gIGl0KCdhcHBsaWVzIGN1c3RvbSBzdGF0dXNCYXJDb2xvciBhbmQgc3RhdHVzQmFyU3R5bGUnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxDb250YWluZXIgc3RhdHVzQmFyQ29sb3I9XCIjRkYwMDAwXCIgc3RhdHVzQmFyU3R5bGU9XCJsaWdodC1jb250ZW50XCIgLz4pO1xuICAgIGV4cGVjdChTdGF0dXNCYXIuc2V0QmFyU3R5bGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdsaWdodC1jb250ZW50Jyk7XG4gICAgZXhwZWN0KFN0YXR1c0Jhci5zZXRCYWNrZ3JvdW5kQ29sb3IpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcjRkYwMDAwJyk7XG4gIH0pO1xuXG4gIGl0KCdhcHBsaWVzIGN1c3RvbSBiYWNrZ3JvdW5kQ29sb3InLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxDb250YWluZXIgYmFja2dyb3VuZENvbG9yPVwiI0ZGMDBGRlwiIC8+KTtcbiAgICBjb25zdCBjb250YWluZXIgPSBnZXRCeVRlc3RJZCgnbW9jay1zYWZlLWFyZWEtdmlldycpO1xuICAgIGNvbnN0IGZsYXRTdHlsZSA9IFN0eWxlU2hlZXQuZmxhdHRlbihjb250YWluZXIucHJvcHMuc3R5bGUpO1xuICAgIGV4cGVjdChmbGF0U3R5bGUpLnRvSGF2ZVByb3BlcnR5KCdiYWNrZ3JvdW5kQ29sb3InLCAnI0ZGMDBGRicpO1xuICB9KTtcblxuICBpdCgncGFzc2VzIHNhZmVBcmVhRWRnZXMgdG8gU2FmZUFyZWFWaWV3JywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcig8Q29udGFpbmVyIHNhZmVBcmVhRWRnZXM9e1snYm90dG9tJ119IC8+KTtcbiAgICBjb25zdCBzYWZlQXJlYVZpZXcgPSBnZXRCeVRlc3RJZCgnbW9jay1zYWZlLWFyZWEtdmlldycpO1xuICAgIGV4cGVjdChzYWZlQXJlYVZpZXcucHJvcHMuZWRnZXMpLnRvRXF1YWwoWydib3R0b20nXSk7XG4gIH0pO1xufSk7Il0sIm1hcHBpbmdzIjoiQUFRQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsZ0NBQWdDLEVBQUUsWUFBTTtFQUNoRCxJQUFBQyxRQUFBLEdBQWlCQyxPQUFPLENBQUMsY0FBYyxDQUFDO0lBQWhDQyxJQUFJLEdBQUFGLFFBQUEsQ0FBSkUsSUFBSTtFQUNaLE9BQU87SUFDTEMsWUFBWSxFQUFFLFNBQWRBLFlBQVlBLENBQUFDLElBQUE7TUFBQSxJQUFLQyxRQUFRLEdBQUFELElBQUEsQ0FBUkMs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