5c946e706dd2f118bf1361f5330ed98a
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
function cov_2h4rdf96ha() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\Dashboard\\components\\SimpleMetrics\\style.js";
  var hash = "d406e6a19999088e8dd30e8904bba63caf993759";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\Dashboard\\components\\SimpleMetrics\\style.js",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 150,
          column: 2
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d406e6a19999088e8dd30e8904bba63caf993759"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_2h4rdf96ha = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2h4rdf96ha();
var styles = (cov_2h4rdf96ha().s[0]++, _reactNative.StyleSheet.create({
  container: {
    marginHorizontal: 16,
    marginVertical: 12
  },
  loadingContainer: Object.assign({
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 24,
    paddingHorizontal: 16,
    backgroundColor: 'white',
    borderRadius: 16
  }, _reactNative.Platform.select({
    ios: {
      shadowColor: '#000',
      shadowOffset: {
        width: 0,
        height: 2
      },
      shadowOpacity: 0.06,
      shadowRadius: 8
    },
    android: {
      elevation: 2
    }
  })),
  loadingText: {
    fontSize: 14,
    fontWeight: '500',
    marginLeft: 12
  },
  emptyState: Object.assign({
    alignItems: 'center',
    paddingVertical: 32,
    paddingHorizontal: 16,
    backgroundColor: 'white',
    borderRadius: 16
  }, _reactNative.Platform.select({
    ios: {
      shadowColor: '#000',
      shadowOffset: {
        width: 0,
        height: 2
      },
      shadowOpacity: 0.06,
      shadowRadius: 8
    },
    android: {
      elevation: 2
    }
  })),
  emptyIcon: {
    fontSize: 32,
    marginBottom: 12
  },
  emptyTitle: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 6,
    textAlign: 'center'
  },
  emptySubtitle: {
    fontSize: 14,
    textAlign: 'center',
    lineHeight: 20
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '700',
    marginBottom: 16,
    paddingHorizontal: 4
  },
  metricsGrid: {
    flexDirection: 'row',
    gap: 12
  },
  metricCard: Object.assign({
    flex: 1,
    backgroundColor: 'white',
    borderRadius: 16,
    padding: 16,
    alignItems: 'center',
    position: 'relative',
    minHeight: 100
  }, _reactNative.Platform.select({
    ios: {
      shadowColor: '#000',
      shadowOffset: {
        width: 0,
        height: 2
      },
      shadowOpacity: 0.06,
      shadowRadius: 8
    },
    android: {
      elevation: 2
    }
  })),
  trendIndicator: {
    position: 'absolute',
    top: 8,
    right: 8,
    paddingHorizontal: 6,
    paddingVertical: 3,
    borderRadius: 8,
    minWidth: 20
  },
  trendText: {
    fontSize: 10,
    fontWeight: '600',
    textAlign: 'center'
  },
  metricIcon: {
    fontSize: 24,
    marginBottom: 8
  },
  metricValue: {
    fontSize: 20,
    fontWeight: '700',
    marginBottom: 4,
    textAlign: 'center'
  },
  metricLabel: {
    fontSize: 12,
    fontWeight: '500',
    textAlign: 'center',
    lineHeight: 16
  }
}));
var _default = exports.default = styles;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiY292XzJoNHJkZjk2aGEiLCJwYXRoIiwiaGFzaCIsImdsb2JhbCIsIkZ1bmN0aW9uIiwiZ2N2IiwiY292ZXJhZ2VEYXRhIiwic3RhdGVtZW50TWFwIiwic3RhcnQiLCJsaW5lIiwiY29sdW1uIiwiZW5kIiwiZm5NYXAiLCJicmFuY2hNYXAiLCJzIiwiZiIsImIiLCJfY292ZXJhZ2VTY2hlbWEiLCJjb3ZlcmFnZSIsImFjdHVhbENvdmVyYWdlIiwic3R5bGVzIiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsImNvbnRhaW5lciIsIm1hcmdpbkhvcml6b250YWwiLCJtYXJnaW5WZXJ0aWNhbCIsImxvYWRpbmdDb250YWluZXIiLCJPYmplY3QiLCJhc3NpZ24iLCJmbGV4RGlyZWN0aW9uIiwiYWxpZ25JdGVtcyIsImp1c3RpZnlDb250ZW50IiwicGFkZGluZ1ZlcnRpY2FsIiwicGFkZGluZ0hvcml6b250YWwiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJSYWRpdXMiLCJQbGF0Zm9ybSIsInNlbGVjdCIsImlvcyIsInNoYWRvd0NvbG9yIiwic2hhZG93T2Zmc2V0Iiwid2lkdGgiLCJoZWlnaHQiLCJzaGFkb3dPcGFjaXR5Iiwic2hhZG93UmFkaXVzIiwiYW5kcm9pZCIsImVsZXZhdGlvbiIsImxvYWRpbmdUZXh0IiwiZm9udFNpemUiLCJmb250V2VpZ2h0IiwibWFyZ2luTGVmdCIsImVtcHR5U3RhdGUiLCJlbXB0eUljb24iLCJtYXJnaW5Cb3R0b20iLCJlbXB0eVRpdGxlIiwidGV4dEFsaWduIiwiZW1wdHlTdWJ0aXRsZSIsImxpbmVIZWlnaHQiLCJzZWN0aW9uVGl0bGUiLCJtZXRyaWNzR3JpZCIsImdhcCIsIm1ldHJpY0NhcmQiLCJmbGV4IiwicGFkZGluZyIsInBvc2l0aW9uIiwibWluSGVpZ2h0IiwidHJlbmRJbmRpY2F0b3IiLCJ0b3AiLCJyaWdodCIsIm1pbldpZHRoIiwidHJlbmRUZXh0IiwibWV0cmljSWNvbiIsIm1ldHJpY1ZhbHVlIiwibWV0cmljTGFiZWwiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsic3R5bGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3NjcmVlbnMvRGFzaGJvYXJkL2NvbXBvbmVudHMvU2ltcGxlTWV0cmljcy9zdHlsZS5qcyAtIFNUWUxFUyBDT01QTEVUU1xuXG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBQbGF0Zm9ybSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgLy8gPT09PT09PT09PT09PT09PT09PSBDT05UQUlORVIgPT09PT09PT09PT09PT09PT09PVxuICBjb250YWluZXI6IHtcbiAgICBtYXJnaW5Ib3Jpem9udGFsOiAxNixcbiAgICBtYXJnaW5WZXJ0aWNhbDogMTIsXG4gIH0sXG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PSBMT0FESU5HIFNUQVRFID09PT09PT09PT09PT09PT09PT1cbiAgbG9hZGluZ0NvbnRhaW5lcjoge1xuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBwYWRkaW5nVmVydGljYWw6IDI0LFxuICAgIHBhZGRpbmdIb3Jpem9udGFsOiAxNixcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXG4gICAgYm9yZGVyUmFkaXVzOiAxNixcbiAgICAuLi5QbGF0Zm9ybS5zZWxlY3Qoe1xuICAgICAgaW9zOiB7XG4gICAgICAgIHNoYWRvd0NvbG9yOiAnIzAwMCcsXG4gICAgICAgIHNoYWRvd09mZnNldDogeyB3aWR0aDogMCwgaGVpZ2h0OiAyIH0sXG4gICAgICAgIHNoYWRvd09wYWNpdHk6IDAuMDYsXG4gICAgICAgIHNoYWRvd1JhZGl1czogOCxcbiAgICAgIH0sXG4gICAgICBhbmRyb2lkOiB7XG4gICAgICAgIGVsZXZhdGlvbjogMixcbiAgICAgIH0sXG4gICAgfSksXG4gIH0sXG5cbiAgbG9hZGluZ1RleHQ6IHtcbiAgICBmb250U2l6ZTogMTQsXG4gICAgZm9udFdlaWdodDogJzUwMCcsXG4gICAgbWFyZ2luTGVmdDogMTIsXG4gIH0sXG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PSBFTVBUWSBTVEFURSA9PT09PT09PT09PT09PT09PT09XG4gIGVtcHR5U3RhdGU6IHtcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBwYWRkaW5nVmVydGljYWw6IDMyLFxuICAgIHBhZGRpbmdIb3Jpem9udGFsOiAxNixcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXG4gICAgYm9yZGVyUmFkaXVzOiAxNixcbiAgICAuLi5QbGF0Zm9ybS5zZWxlY3Qoe1xuICAgICAgaW9zOiB7XG4gICAgICAgIHNoYWRvd0NvbG9yOiAnIzAwMCcsXG4gICAgICAgIHNoYWRvd09mZnNldDogeyB3aWR0aDogMCwgaGVpZ2h0OiAyIH0sXG4gICAgICAgIHNoYWRvd09wYWNpdHk6IDAuMDYsXG4gICAgICAgIHNoYWRvd1JhZGl1czogOCxcbiAgICAgIH0sXG4gICAgICBhbmRyb2lkOiB7XG4gICAgICAgIGVsZXZhdGlvbjogMixcbiAgICAgIH0sXG4gICAgfSksXG4gIH0sXG5cbiAgZW1wdHlJY29uOiB7XG4gICAgZm9udFNpemU6IDMyLFxuICAgIG1hcmdpbkJvdHRvbTogMTIsXG4gIH0sXG5cbiAgZW1wdHlUaXRsZToge1xuICAgIGZvbnRTaXplOiAxNixcbiAgICBmb250V2VpZ2h0OiAnNjAwJyxcbiAgICBtYXJnaW5Cb3R0b206IDYsXG4gICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgfSxcblxuICBlbXB0eVN1YnRpdGxlOiB7XG4gICAgZm9udFNpemU6IDE0LFxuICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgbGluZUhlaWdodDogMjAsXG4gIH0sXG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PSBIRUFERVIgPT09PT09PT09PT09PT09PT09PVxuICBzZWN0aW9uVGl0bGU6IHtcbiAgICBmb250U2l6ZTogMTgsXG4gICAgZm9udFdlaWdodDogJzcwMCcsXG4gICAgbWFyZ2luQm90dG9tOiAxNixcbiAgICBwYWRkaW5nSG9yaXpvbnRhbDogNCxcbiAgfSxcblxuICAvLyA9PT09PT09PT09PT09PT09PT09IE1FVFJJQ1MgR1JJRCA9PT09PT09PT09PT09PT09PT09XG4gIG1ldHJpY3NHcmlkOiB7XG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgZ2FwOiAxMixcbiAgfSxcblxuICAvLyA9PT09PT09PT09PT09PT09PT09IE1FVFJJQyBDQVJEID09PT09PT09PT09PT09PT09PT1cbiAgbWV0cmljQ2FyZDoge1xuICAgIGZsZXg6IDEsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuICAgIGJvcmRlclJhZGl1czogMTYsXG4gICAgcGFkZGluZzogMTYsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgbWluSGVpZ2h0OiAxMDAsXG4gICAgLi4uUGxhdGZvcm0uc2VsZWN0KHtcbiAgICAgIGlvczoge1xuICAgICAgICBzaGFkb3dDb2xvcjogJyMwMDAnLFxuICAgICAgICBzaGFkb3dPZmZzZXQ6IHsgd2lkdGg6IDAsIGhlaWdodDogMiB9LFxuICAgICAgICBzaGFkb3dPcGFjaXR5OiAwLjA2LFxuICAgICAgICBzaGFkb3dSYWRpdXM6IDgsXG4gICAgICB9LFxuICAgICAgYW5kcm9pZDoge1xuICAgICAgICBlbGV2YXRpb246IDIsXG4gICAgICB9LFxuICAgIH0pLFxuICB9LFxuXG4gIC8vID09PT09PT09PT09PT09PT09PT0gVFJFTkQgSU5ESUNBVE9SID09PT09PT09PT09PT09PT09PT1cbiAgdHJlbmRJbmRpY2F0b3I6IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3A6IDgsXG4gICAgcmlnaHQ6IDgsXG4gICAgcGFkZGluZ0hvcml6b250YWw6IDYsXG4gICAgcGFkZGluZ1ZlcnRpY2FsOiAzLFxuICAgIGJvcmRlclJhZGl1czogOCxcbiAgICBtaW5XaWR0aDogMjAsXG4gIH0sXG5cbiAgdHJlbmRUZXh0OiB7XG4gICAgZm9udFNpemU6IDEwLFxuICAgIGZvbnRXZWlnaHQ6ICc2MDAnLFxuICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gIH0sXG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PSBNRVRSSUMgQ09OVEVOVCA9PT09PT09PT09PT09PT09PT09XG4gIG1ldHJpY0ljb246IHtcbiAgICBmb250U2l6ZTogMjQsXG4gICAgbWFyZ2luQm90dG9tOiA4LFxuICB9LFxuXG4gIG1ldHJpY1ZhbHVlOiB7XG4gICAgZm9udFNpemU6IDIwLFxuICAgIGZvbnRXZWlnaHQ6ICc3MDAnLFxuICAgIG1hcmdpbkJvdHRvbTogNCxcbiAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICB9LFxuXG4gIG1ldHJpY0xhYmVsOiB7XG4gICAgZm9udFNpemU6IDEyLFxuICAgIGZvbnRXZWlnaHQ6ICc1MDAnLFxuICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgbGluZUhlaWdodDogMTYsXG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgc3R5bGVzOyJdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLElBQUFBLFlBQUEsR0FBQUMsT0FBQTtBQUFvRCxTQUFBQyxlQUFBO0VBQUEsSUFBQUMsSUFBQTtFQUFBLElBQUFDLElBQUE7RUFBQSxJQUFBQyxNQUFBLE9BQUFDLFFBQUE7RUFBQSxJQUFBQyxHQUFBO0VBQUEsSUFBQUMsWUFBQTtJQUFBTCxJQUFBO0lBQUFNLFlBQUE7TUFBQTtRQUFBQyxLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtJQUFBO0lBQUFFLEtBQUE7SUFBQUMsU0FBQTtJQUFBQyxDQUFBO01BQUE7SUFBQTtJQUFBQyxDQUFBO0lBQUFDLENBQUE7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