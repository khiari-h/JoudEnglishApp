04b2040a7fc3eedce1aa00a49213030f
_getJestObj().mock('../../../src/components/exercise-common/CategorySelector/style', function () {
  var _jest$requireActual = jest.requireActual('react-native'),
    StyleSheet = _jest$requireActual.StyleSheet;
  return function () {
    return StyleSheet.create({
      container: {},
      backgroundGradient: {},
      scrollView: {},
      scrollContent: {},
      categoryItemWrapper: {},
      categoryTouchable: {},
      selectedCategoryItem: {},
      selectedInner: {},
      selectedCategoryText: {
        color: '#FFFFFF'
      },
      sparkleContainer: {},
      sparkle: {},
      categoryItem: {},
      categoryInner: {},
      categoryText: {}
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _CategorySelector = _interopRequireWildcard(require("../../../src/components/exercise-common/CategorySelector"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('CategorySelector', function () {
  var categories = [{
    id: '1',
    name: 'Grammar'
  }, {
    id: '2',
    name: 'Vocabulary'
  }, {
    id: '3',
    name: 'Reading'
  }];
  var onSelectCategoryMock = jest.fn();
  beforeEach(function () {
    jest.useFakeTimers();
    jest.clearAllMocks();
  });
  afterEach(function () {
    jest.useRealTimers();
    jest.restoreAllMocks();
  });
  it('should render all categories and select one correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "2",
        onSelectCategory: onSelectCategoryMock
      })),
      getByText = _render.getByText;
    expect(getByText('Grammar')).toBeTruthy();
    expect(getByText('Vocabulary')).toBeTruthy();
    expect(getByText('Reading')).toBeTruthy();
    expect(getByText('âœ¨')).toBeTruthy();
    _reactNative.fireEvent.press(getByText('Grammar'));
    expect(onSelectCategoryMock).toHaveBeenCalledWith('1');
    expect(onSelectCategoryMock).not.toHaveBeenCalledWith('2');
  });
  it('should trigger animation when selectedCategory changes', (0, _asyncToGenerator2.default)(function* () {
    var mockTiming = jest.spyOn(_reactNative2.Animated, 'timing');
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: onSelectCategoryMock
      })),
      rerender = _render2.rerender;
    mockTiming.mockClear();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "2",
        onSelectCategory: onSelectCategoryMock
      }));
      jest.advanceTimersByTime(300);
    }));
    expect(mockTiming).toHaveBeenCalledTimes(2);
    expect(mockTiming).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({
      toValue: 0,
      duration: 200
    }));
    expect(mockTiming).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({
      toValue: 1,
      duration: 300
    }));
  }));
  it('should not call onSelectCategory if an animation is in progress', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: onSelectCategoryMock
      })),
      rerender = _render3.rerender,
      getByText = _render3.getByText;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "2",
        onSelectCategory: onSelectCategoryMock
      }));
      jest.advanceTimersByTime(100);
    }));
    _reactNative.fireEvent.press(getByText('Reading'));
    expect(onSelectCategoryMock).not.toHaveBeenCalled();
    expect(onSelectCategoryMock).not.toHaveBeenCalledWith('3');
  }));
  it('should handle new categories correctly and rerender the new list', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1"
      })),
      rerender = _render4.rerender,
      getByText = _render4.getByText,
      queryByText = _render4.queryByText;
    var newCategories = [{
      id: '4',
      name: 'Writing'
    }].concat(categories);
    rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
      categories: newCategories,
      selectedCategory: "1"
    }));
    expect(getByText('Writing')).toBeTruthy();
    expect(getByText('Grammar')).toBeTruthy();
    var updatedCategories = [{
      id: '1',
      name: 'Grammar'
    }];
    rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
      categories: updatedCategories,
      selectedCategory: "1"
    }));
    expect(queryByText('Vocabulary')).toBeNull();
  });
  it('should scroll to the selected category on layout', (0, _asyncToGenerator2.default)(function* () {
    var mockScrollTo = jest.fn();
    var mockRef = {
      current: {
        scrollTo: mockScrollTo
      }
    };
    jest.spyOn(_react.default, 'useRef').mockReturnValueOnce(mockRef);
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1"
      })),
      getByText = _render5.getByText,
      rerender = _render5.rerender;
    expect(mockScrollTo).not.toHaveBeenCalled();
    rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
      categories: categories,
      selectedCategory: "2"
    }));
    (0, _reactNative.fireEvent)(getByText('Vocabulary'), 'layout', {
      nativeEvent: {
        layout: {
          x: 100,
          y: 0,
          width: 80,
          height: 30
        }
      }
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(mockScrollTo).toHaveBeenCalledWith({
      x: 60,
      y: 0,
      animated: true
    });
  }));
  it('should correctly memoize the component based on prop changes', function () {
    var prevProps = {
      categories: [{
        id: '1',
        name: 'Grammar'
      }],
      selectedCategory: '1',
      primaryColor: '#abc'
    };
    var nextPropsSame = {
      categories: [{
        id: '1',
        name: 'Grammar'
      }],
      selectedCategory: '1',
      primaryColor: '#abc'
    };
    var nextPropsDifferentCat = {
      categories: [{
        id: '2',
        name: 'Vocabulary'
      }],
      selectedCategory: '1',
      primaryColor: '#abc'
    };
    var nextPropsDifferentSel = {
      categories: [{
        id: '1',
        name: 'Grammar'
      }],
      selectedCategory: '2',
      primaryColor: '#abc'
    };
    var nextPropsDifferentColor = {
      categories: [{
        id: '1',
        name: 'Grammar'
      }],
      selectedCategory: '1',
      primaryColor: '#def'
    };
    expect((0, _CategorySelector.areEqual)(prevProps, nextPropsSame)).toBe(true);
    expect((0, _CategorySelector.areEqual)(prevProps, nextPropsDifferentCat)).toBe(false);
    expect((0, _CategorySelector.areEqual)(prevProps, nextPropsDifferentSel)).toBe(false);
    expect((0, _CategorySelector.areEqual)(prevProps, nextPropsDifferentColor)).toBe(false);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfamVzdCRyZXF1aXJlQWN0dWFsIiwiamVzdCIsInJlcXVpcmVBY3R1YWwiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiY29udGFpbmVyIiwiYmFja2dyb3VuZEdyYWRpZW50Iiwic2Nyb2xsVmlldyIsInNjcm9sbENvbnRlbnQiLCJjYXRlZ29yeUl0ZW1XcmFwcGVyIiwiY2F0ZWdvcnlUb3VjaGFibGUiLCJzZWxlY3RlZENhdGVnb3J5SXRlbSIsInNlbGVjdGVkSW5uZXIiLCJzZWxlY3RlZENhdGVnb3J5VGV4dCIsImNvbG9yIiwic3BhcmtsZUNvbnRhaW5lciIsInNwYXJrbGUiLCJjYXRlZ29yeUl0ZW0iLCJjYXRlZ29yeUlubmVyIiwiY2F0ZWdvcnlUZXh0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfcmVhY3ROYXRpdmUyIiwiX0NhdGVnb3J5U2VsZWN0b3IiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9qc3hSdW50aW1lIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsIl90IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwiY2F0ZWdvcmllcyIsImlkIiwibmFtZSIsIm9uU2VsZWN0Q2F0ZWdvcnlNb2NrIiwiZm4iLCJiZWZvcmVFYWNoIiwidXNlRmFrZVRpbWVycyIsImNsZWFyQWxsTW9ja3MiLCJhZnRlckVhY2giLCJ1c2VSZWFsVGltZXJzIiwicmVzdG9yZUFsbE1vY2tzIiwiaXQiLCJfcmVuZGVyIiwicmVuZGVyIiwianN4Iiwic2VsZWN0ZWRDYXRlZ29yeSIsIm9uU2VsZWN0Q2F0ZWdvcnkiLCJnZXRCeVRleHQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsIm5vdCIsIm1vY2tUaW1pbmciLCJzcHlPbiIsIkFuaW1hdGVkIiwiX3JlbmRlcjIiLCJyZXJlbmRlciIsIm1vY2tDbGVhciIsImFjdCIsImFkdmFuY2VUaW1lcnNCeVRpbWUiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJhbnl0aGluZyIsIm9iamVjdENvbnRhaW5pbmciLCJ0b1ZhbHVlIiwiZHVyYXRpb24iLCJfcmVuZGVyMyIsInRvSGF2ZUJlZW5DYWxsZWQiLCJfcmVuZGVyNCIsInF1ZXJ5QnlUZXh0IiwibmV3Q2F0ZWdvcmllcyIsImNvbmNhdCIsInVwZGF0ZWRDYXRlZ29yaWVzIiwidG9CZU51bGwiLCJtb2NrU2Nyb2xsVG8iLCJtb2NrUmVmIiwiY3VycmVudCIsInNjcm9sbFRvIiwiUmVhY3QiLCJtb2NrUmV0dXJuVmFsdWVPbmNlIiwiX3JlbmRlcjUiLCJuYXRpdmVFdmVudCIsImxheW91dCIsIngiLCJ5Iiwid2lkdGgiLCJoZWlnaHQiLCJydW5BbGxUaW1lcnMiLCJhbmltYXRlZCIsInByZXZQcm9wcyIsInByaW1hcnlDb2xvciIsIm5leHRQcm9wc1NhbWUiLCJuZXh0UHJvcHNEaWZmZXJlbnRDYXQiLCJuZXh0UHJvcHNEaWZmZXJlbnRTZWwiLCJuZXh0UHJvcHNEaWZmZXJlbnRDb2xvciIsImFyZUVxdWFsIiwidG9CZSJdLCJzb3VyY2VzIjpbIkNhdGVnb3J5U2VsZWN0b3IudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQsIGFjdCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IEFuaW1hdGVkIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBDYXRlZ29yeVNlbGVjdG9yLCB7IGFyZUVxdWFsIH0gZnJvbSAnLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvZXhlcmNpc2UtY29tbW9uL0NhdGVnb3J5U2VsZWN0b3InO1xuXG4vLyBNb2NrIGRlcyBzdHlsZXMgcG91ciDDqXZpdGVyIGxlcyBlcnJldXJzIGRlIHN0eWxlIHBlbmRhbnQgbGVzIHRlc3RzXG5qZXN0Lm1vY2soJy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2V4ZXJjaXNlLWNvbW1vbi9DYXRlZ29yeVNlbGVjdG9yL3N0eWxlJywgKCkgPT4ge1xuICBjb25zdCB7IFN0eWxlU2hlZXQgfSA9IGplc3QucmVxdWlyZUFjdHVhbCgncmVhY3QtbmF0aXZlJyk7XG4gIHJldHVybiAoKSA9PiBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gICAgY29udGFpbmVyOiB7fSxcbiAgICBiYWNrZ3JvdW5kR3JhZGllbnQ6IHt9LFxuICAgIHNjcm9sbFZpZXc6IHt9LFxuICAgIHNjcm9sbENvbnRlbnQ6IHt9LFxuICAgIGNhdGVnb3J5SXRlbVdyYXBwZXI6IHt9LFxuICAgIGNhdGVnb3J5VG91Y2hhYmxlOiB7fSxcbiAgICBzZWxlY3RlZENhdGVnb3J5SXRlbToge30sXG4gICAgc2VsZWN0ZWRJbm5lcjoge30sXG4gICAgc2VsZWN0ZWRDYXRlZ29yeVRleHQ6IHsgY29sb3I6ICcjRkZGRkZGJyB9LFxuICAgIHNwYXJrbGVDb250YWluZXI6IHt9LFxuICAgIHNwYXJrbGU6IHt9LFxuICAgIGNhdGVnb3J5SXRlbToge30sXG4gICAgY2F0ZWdvcnlJbm5lcjoge30sXG4gICAgY2F0ZWdvcnlUZXh0OiB7fSxcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ0NhdGVnb3J5U2VsZWN0b3InLCAoKSA9PiB7XG4gIGNvbnN0IGNhdGVnb3JpZXMgPSBbXG4gICAgeyBpZDogJzEnLCBuYW1lOiAnR3JhbW1hcicgfSxcbiAgICB7IGlkOiAnMicsIG5hbWU6ICdWb2NhYnVsYXJ5JyB9LFxuICAgIHsgaWQ6ICczJywgbmFtZTogJ1JlYWRpbmcnIH0sXG4gIF07XG4gIGNvbnN0IG9uU2VsZWN0Q2F0ZWdvcnlNb2NrID0gamVzdC5mbigpO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QudXNlRmFrZVRpbWVycygpO1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICB9KTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGplc3QudXNlUmVhbFRpbWVycygpO1xuICAgIGplc3QucmVzdG9yZUFsbE1vY2tzKCk7XG4gIH0pO1xuXG4gIC8vIFRlc3RzIGRlIHJlbmR1IGV0IGQnaW50ZXJhY3Rpb24gZGUgYmFzZVxuXG4gIGl0KCdzaG91bGQgcmVuZGVyIGFsbCBjYXRlZ29yaWVzIGFuZCBzZWxlY3Qgb25lIGNvcnJlY3RseScsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgPENhdGVnb3J5U2VsZWN0b3IgY2F0ZWdvcmllcz17Y2F0ZWdvcmllc30gc2VsZWN0ZWRDYXRlZ29yeT1cIjJcIiBvblNlbGVjdENhdGVnb3J5PXtvblNlbGVjdENhdGVnb3J5TW9ja30gLz5cbiAgICApO1xuICAgIFxuICAgIGV4cGVjdChnZXRCeVRleHQoJ0dyYW1tYXInKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ1ZvY2FidWxhcnknKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ1JlYWRpbmcnKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ+KcqCcpKS50b0JlVHJ1dGh5KCk7XG5cbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCdHcmFtbWFyJykpO1xuICAgIGV4cGVjdChvblNlbGVjdENhdGVnb3J5TW9jaykudG9IYXZlQmVlbkNhbGxlZFdpdGgoJzEnKTtcbiAgICBleHBlY3Qob25TZWxlY3RDYXRlZ29yeU1vY2spLm5vdC50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnMicpO1xuICB9KTtcbiAgXG4gIC8vIFRlc3RzIGRlIGxhIGxvZ2lxdWUgZCdhbmltYXRpb25cblxuICBpdCgnc2hvdWxkIHRyaWdnZXIgYW5pbWF0aW9uIHdoZW4gc2VsZWN0ZWRDYXRlZ29yeSBjaGFuZ2VzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tUaW1pbmcgPSBqZXN0LnNweU9uKEFuaW1hdGVkLCAndGltaW5nJyk7XG4gICAgY29uc3QgeyByZXJlbmRlciB9ID0gcmVuZGVyKFxuICAgICAgPENhdGVnb3J5U2VsZWN0b3IgY2F0ZWdvcmllcz17Y2F0ZWdvcmllc30gc2VsZWN0ZWRDYXRlZ29yeT1cIjFcIiBvblNlbGVjdENhdGVnb3J5PXtvblNlbGVjdENhdGVnb3J5TW9ja30gLz5cbiAgICApO1xuICAgIG1vY2tUaW1pbmcubW9ja0NsZWFyKCk7XG4gICAgXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIHJlcmVuZGVyKDxDYXRlZ29yeVNlbGVjdG9yIGNhdGVnb3JpZXM9e2NhdGVnb3JpZXN9IHNlbGVjdGVkQ2F0ZWdvcnk9XCIyXCIgb25TZWxlY3RDYXRlZ29yeT17b25TZWxlY3RDYXRlZ29yeU1vY2t9IC8+KTtcbiAgICAgIGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSgzMDApO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KG1vY2tUaW1pbmcpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygyKTtcbiAgICBleHBlY3QobW9ja1RpbWluZykudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICBleHBlY3QuYW55dGhpbmcoKSxcbiAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHsgdG9WYWx1ZTogMCwgZHVyYXRpb246IDIwMCB9KVxuICAgICk7XG4gICAgZXhwZWN0KG1vY2tUaW1pbmcpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgZXhwZWN0LmFueXRoaW5nKCksXG4gICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7IHRvVmFsdWU6IDEsIGR1cmF0aW9uOiAzMDAgfSlcbiAgICApO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIG5vdCBjYWxsIG9uU2VsZWN0Q2F0ZWdvcnkgaWYgYW4gYW5pbWF0aW9uIGlzIGluIHByb2dyZXNzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVyZW5kZXIsIGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgPENhdGVnb3J5U2VsZWN0b3IgY2F0ZWdvcmllcz17Y2F0ZWdvcmllc30gc2VsZWN0ZWRDYXRlZ29yeT1cIjFcIiBvblNlbGVjdENhdGVnb3J5PXtvblNlbGVjdENhdGVnb3J5TW9ja30gLz5cbiAgICApO1xuICAgIFxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICByZXJlbmRlcig8Q2F0ZWdvcnlTZWxlY3RvciBjYXRlZ29yaWVzPXtjYXRlZ29yaWVzfSBzZWxlY3RlZENhdGVnb3J5PVwiMlwiIG9uU2VsZWN0Q2F0ZWdvcnk9e29uU2VsZWN0Q2F0ZWdvcnlNb2NrfSAvPik7XG4gICAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoMTAwKTtcbiAgICB9KTtcbiAgICBcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCdSZWFkaW5nJykpO1xuICAgIGV4cGVjdChvblNlbGVjdENhdGVnb3J5TW9jaykubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICBleHBlY3Qob25TZWxlY3RDYXRlZ29yeU1vY2spLm5vdC50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnMycpO1xuICB9KTtcblxuICAvLyBUZXN0cyBkZSBsYSBsb2dpcXVlIGF2YW5jw6llIGV0IGRlIGxhIG3DqW1vcmlzYXRpb25cblxuICBpdCgnc2hvdWxkIGhhbmRsZSBuZXcgY2F0ZWdvcmllcyBjb3JyZWN0bHkgYW5kIHJlcmVuZGVyIHRoZSBuZXcgbGlzdCcsICgpID0+IHtcbiAgICBjb25zdCB7IHJlcmVuZGVyLCBnZXRCeVRleHQsIHF1ZXJ5QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICA8Q2F0ZWdvcnlTZWxlY3RvciBjYXRlZ29yaWVzPXtjYXRlZ29yaWVzfSBzZWxlY3RlZENhdGVnb3J5PVwiMVwiIC8+XG4gICAgKTtcblxuICAgIGNvbnN0IG5ld0NhdGVnb3JpZXMgPSBbeyBpZDogJzQnLCBuYW1lOiAnV3JpdGluZycgfSwgLi4uY2F0ZWdvcmllc107XG4gICAgcmVyZW5kZXIoPENhdGVnb3J5U2VsZWN0b3IgY2F0ZWdvcmllcz17bmV3Q2F0ZWdvcmllc30gc2VsZWN0ZWRDYXRlZ29yeT1cIjFcIiAvPik7XG4gICAgXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnV3JpdGluZycpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnR3JhbW1hcicpKS50b0JlVHJ1dGh5KCk7XG5cbiAgICBjb25zdCB1cGRhdGVkQ2F0ZWdvcmllcyA9IFt7IGlkOiAnMScsIG5hbWU6ICdHcmFtbWFyJyB9XTtcbiAgICByZXJlbmRlcig8Q2F0ZWdvcnlTZWxlY3RvciBjYXRlZ29yaWVzPXt1cGRhdGVkQ2F0ZWdvcmllc30gc2VsZWN0ZWRDYXRlZ29yeT1cIjFcIiAvPik7XG4gICAgZXhwZWN0KHF1ZXJ5QnlUZXh0KCdWb2NhYnVsYXJ5JykpLnRvQmVOdWxsKCk7XG4gIH0pO1xuICBcbiAgaXQoJ3Nob3VsZCBzY3JvbGwgdG8gdGhlIHNlbGVjdGVkIGNhdGVnb3J5IG9uIGxheW91dCcsIGFzeW5jICgpID0+IHtcbiAgICAvLyBDcsOpYXRpb24gZGVzIG1vY2tzIHNww6ljaWZpcXVlcyDDoCBjZSB0ZXN0XG4gICAgY29uc3QgbW9ja1Njcm9sbFRvID0gamVzdC5mbigpO1xuICAgIGNvbnN0IG1vY2tSZWYgPSB7IGN1cnJlbnQ6IHsgc2Nyb2xsVG86IG1vY2tTY3JvbGxUbyB9IH07XG5cbiAgICAvLyBNb2NrIGB1c2VSZWZgIHBvdXIgcXUnaWwgcmV0b3VybmUgbm90cmUgbW9ja1JlZiBzZXVsZW1lbnQgcG91ciBsZSBwcmVtaWVyIGFwcGVsXG4gICAgamVzdC5zcHlPbihSZWFjdCwgJ3VzZVJlZicpLm1vY2tSZXR1cm5WYWx1ZU9uY2UobW9ja1JlZik7XG5cbiAgICBjb25zdCB7IGdldEJ5VGV4dCwgcmVyZW5kZXIgfSA9IHJlbmRlcihcbiAgICAgIDxDYXRlZ29yeVNlbGVjdG9yIGNhdGVnb3JpZXM9e2NhdGVnb3JpZXN9IHNlbGVjdGVkQ2F0ZWdvcnk9XCIxXCIgLz5cbiAgICApO1xuICAgIFxuICAgIGV4cGVjdChtb2NrU2Nyb2xsVG8pLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG5cbiAgICByZXJlbmRlcig8Q2F0ZWdvcnlTZWxlY3RvciBjYXRlZ29yaWVzPXtjYXRlZ29yaWVzfSBzZWxlY3RlZENhdGVnb3J5PVwiMlwiIC8+KTtcbiAgICBcbiAgICBmaXJlRXZlbnQoZ2V0QnlUZXh0KCdWb2NhYnVsYXJ5JyksICdsYXlvdXQnLCB7XG4gICAgICBuYXRpdmVFdmVudDoge1xuICAgICAgICBsYXlvdXQ6IHsgeDogMTAwLCB5OiAwLCB3aWR0aDogODAsIGhlaWdodDogMzAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgamVzdC5ydW5BbGxUaW1lcnMoKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChtb2NrU2Nyb2xsVG8pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHsgeDogNjAsIHk6IDAsIGFuaW1hdGVkOiB0cnVlIH0pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGNvcnJlY3RseSBtZW1vaXplIHRoZSBjb21wb25lbnQgYmFzZWQgb24gcHJvcCBjaGFuZ2VzJywgKCkgPT4ge1xuICAgIGNvbnN0IHByZXZQcm9wcyA9IHsgY2F0ZWdvcmllczogW3sgaWQ6ICcxJywgbmFtZTogJ0dyYW1tYXInIH1dLCBzZWxlY3RlZENhdGVnb3J5OiAnMScsIHByaW1hcnlDb2xvcjogJyNhYmMnIH07XG4gICAgY29uc3QgbmV4dFByb3BzU2FtZSA9IHsgY2F0ZWdvcmllczogW3sgaWQ6ICcxJywgbmFtZTogJ0dyYW1tYXInIH1dLCBzZWxlY3RlZENhdGVnb3J5OiAnMScsIHByaW1hcnlDb2xvcjogJyNhYmMnIH07XG4gICAgY29uc3QgbmV4dFByb3BzRGlmZmVyZW50Q2F0ID0geyBjYXRlZ29yaWVzOiBbeyBpZDogJzInLCBuYW1lOiAnVm9jYWJ1bGFyeScgfV0sIHNlbGVjdGVkQ2F0ZWdvcnk6ICcxJywgcHJpbWFyeUNvbG9yOiAnI2FiYycgfTtcbiAgICBjb25zdCBuZXh0UHJvcHNEaWZmZXJlbnRTZWwgPSB7IGNhdGVnb3JpZXM6IFt7IGlkOiAnMScsIG5hbWU6ICdHcmFtbWFyJyB9XSwgc2VsZWN0ZWRDYXRlZ29yeTogJzInLCBwcmltYXJ5Q29sb3I6ICcjYWJjJyB9O1xuICAgIGNvbnN0IG5leHRQcm9wc0RpZmZlcmVudENvbG9yID0geyBjYXRlZ29yaWVzOiBbeyBpZDogJzEnLCBuYW1lOiAnR3JhbW1hcicgfV0sIHNlbGVjdGVkQ2F0ZWdvcnk6ICcxJywgcHJpbWFyeUNvbG9yOiAnI2RlZicgfTtcbiAgICBcbiAgICBleHBlY3QoYXJlRXF1YWwocHJldlByb3BzLCBuZXh0UHJvcHNTYW1lKSkudG9CZSh0cnVlKTtcbiAgICBleHBlY3QoYXJlRXF1YWwocHJldlByb3BzLCBuZXh0UHJvcHNEaWZmZXJlbnRDYXQpKS50b0JlKGZhbHNlKTtcbiAgICBleHBlY3QoYXJlRXF1YWwocHJldlByb3BzLCBuZXh0UHJvcHNEaWZmZXJlbnRTZWwpKS50b0JlKGZhbHNlKTtcbiAgICBleHBlY3QoYXJlRXF1YWwocHJldlByb3BzLCBuZXh0UHJvcHNEaWZmZXJlbnRDb2xvcikpLnRvQmUoZmFsc2UpO1xuICB9KTtcbn0pOyJdLCJtYXBwaW5ncyI6IkFBTUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLGdFQUFnRSxFQUFFLFlBQU07RUFDaEYsSUFBQUMsbUJBQUEsR0FBdUJDLElBQUksQ0FBQ0MsYUFBYSxDQUFDLGNBQWMsQ0FBQztJQUFqREMsVUFBVSxHQUFBSCxtQkFBQSxDQUFWRyxVQUFVO0VBQ2xCLE9BQU87SUFBQSxPQUFNQSxVQUFVLENBQUNDLE1BQU0sQ0FBQztNQUM3QkMsU0FBUyxFQUFFLENBQUMsQ0FBQztNQUNiQyxrQkFBa0IsRUFBRSxDQUFDLENB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