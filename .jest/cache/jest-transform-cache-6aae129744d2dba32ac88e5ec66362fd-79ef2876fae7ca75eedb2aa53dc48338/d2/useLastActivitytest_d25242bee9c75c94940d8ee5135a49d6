261df5503055ee761fe5aea34535111d
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    setItem: jest.fn(function () {
      return Promise.resolve();
    }),
    getItem: jest.fn(function () {
      return Promise.resolve(null);
    }),
    removeItem: jest.fn(function () {
      return Promise.resolve();
    })
  };
});
_getJestObj().mock('../../src/utils/constants', function () {
  return {
    STORAGE_KEYS: {
      LAST_ACTIVITY: 'last_activity'
    }
  };
});
_getJestObj().mock('../../src/utils/eventBus', function () {
  return {
    emit: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useLastActivity = _interopRequireDefault(require("../../src/hooks/useLastActivity"));
var _constants = require("../../src/utils/constants");
var _eventBus = require("../../src/utils/eventBus");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useLastActivity', function () {
  var MOCK_NOW = new Date('2025-01-01T12:00:00.000Z').getTime();
  beforeEach(function () {
    jest.useFakeTimers();
    jest.setSystemTime(MOCK_NOW);
    _asyncStorage.default.getItem.mockClear();
    _asyncStorage.default.setItem.mockClear();
    _asyncStorage.default.removeItem.mockClear();
    _eventBus.emit.mockClear();
  });
  afterEach(function () {
    jest.runOnlyPendingTimers();
    jest.useRealTimers();
  });
  it('initializes with null lastActivity and isLoading true, then false', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook.result,
      waitForNextUpdate = _renderHook.waitForNextUpdate;
    expect(result.current.lastActivity).toBeNull();
    expect(result.current.isLoading).toBe(true);
    yield waitForNextUpdate();
    expect(result.current.isLoading).toBe(false);
    expect(_asyncStorage.default.getItem).toHaveBeenCalledWith(_constants.STORAGE_KEYS.LAST_ACTIVITY);
  }));
  it('loads last activity from AsyncStorage and calculates timeElapsed', (0, _asyncToGenerator2.default)(function* () {
    var mockActivity = {
      type: 'exercise',
      level: '1',
      timestamp: MOCK_NOW - 5 * 60 * 1000
    };
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(mockActivity));
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook2.result,
      waitForNextUpdate = _renderHook2.waitForNextUpdate;
    yield waitForNextUpdate();
    expect(result.current.lastActivity).toEqual(Object.assign({}, mockActivity, {
      timeElapsed: 'Il y a 5 min'
    }));
  }));
  it('saves new activity and updates state', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook3.result,
      waitForNextUpdate = _renderHook3.waitForNextUpdate;
    yield waitForNextUpdate();
    var newActivityData = {
      type: 'quiz',
      level: '2'
    };
    yield act((0, _asyncToGenerator2.default)(function* () {
      yield result.current.saveActivity(newActivityData);
    }));
    expect(_asyncStorage.default.setItem).toHaveBeenCalledWith(_constants.STORAGE_KEYS.LAST_ACTIVITY, JSON.stringify(Object.assign({}, newActivityData, {
      timestamp: MOCK_NOW
    })));
    expect(result.current.lastActivity).toEqual(Object.assign({}, newActivityData, {
      timestamp: MOCK_NOW,
      timeElapsed: 'À l\'instant'
    }));
    expect(_eventBus.emit).toHaveBeenCalledWith('progress-updated', Object.assign({}, newActivityData, {
      timestamp: MOCK_NOW
    }));
  }));
  it('clears activity from AsyncStorage and state', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify({
      type: 'exercise',
      level: '1',
      timestamp: MOCK_NOW
    }));
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook4.result,
      waitForNextUpdate = _renderHook4.waitForNextUpdate;
    yield waitForNextUpdate();
    expect(result.current.lastActivity).not.toBeNull();
    yield act((0, _asyncToGenerator2.default)(function* () {
      yield result.current.clearActivity();
    }));
    expect(_asyncStorage.default.removeItem).toHaveBeenCalledWith(_constants.STORAGE_KEYS.LAST_ACTIVITY);
    expect(result.current.lastActivity).toBeNull();
  }));
  it('reloads activity when reload is called', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook5.result,
      waitForNextUpdate = _renderHook5.waitForNextUpdate;
    yield waitForNextUpdate();
    _asyncStorage.default.getItem.mockClear();
    var updatedActivity = {
      type: 'reading',
      level: '3',
      timestamp: MOCK_NOW - 10 * 60 * 1000
    };
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(updatedActivity));
    yield act((0, _asyncToGenerator2.default)(function* () {
      yield result.current.reload();
    }));
    expect(_asyncStorage.default.getItem).toHaveBeenCalledWith(_constants.STORAGE_KEYS.LAST_ACTIVITY);
    expect(result.current.lastActivity).toEqual(Object.assign({}, updatedActivity, {
      timeElapsed: 'Il y a 10 min'
    }));
  }));
  it('calculates timeElapsed correctly for different durations', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook6.result,
      waitForNextUpdate = _renderHook6.waitForNextUpdate;
    yield waitForNextUpdate();
    yield act((0, _asyncToGenerator2.default)(function* () {
      yield result.current.saveActivity({
        type: 'test',
        timestamp: MOCK_NOW
      });
    }));
    expect(result.current.lastActivity.timeElapsed).toBe('À l\'instant');
    jest.setSystemTime(MOCK_NOW + 30 * 60 * 1000);
    yield act((0, _asyncToGenerator2.default)(function* () {
      yield result.current.reload();
    }));
    expect(result.current.lastActivity.timeElapsed).toBe('Il y a 30 min');
    jest.setSystemTime(MOCK_NOW + 60 * 60 * 1000);
    yield act((0, _asyncToGenerator2.default)(function* () {
      yield result.current.reload();
    }));
    expect(result.current.lastActivity.timeElapsed).toBe('Il y a 1h');
    jest.setSystemTime(MOCK_NOW + 120 * 60 * 1000);
    yield act((0, _asyncToGenerator2.default)(function* () {
      yield result.current.reload();
    }));
    expect(result.current.lastActivity.timeElapsed).toBe('Il y a 2h');
    jest.setSystemTime(MOCK_NOW + 24 * 60 * 60 * 1000);
    yield act((0, _asyncToGenerator2.default)(function* () {
      yield result.current.reload();
    }));
    expect(result.current.lastActivity.timeElapsed).toBe('Il y a 1j');
    jest.setSystemTime(MOCK_NOW + 5 * 24 * 60 * 60 * 1000);
    yield act((0, _asyncToGenerator2.default)(function* () {
      yield result.current.reload();
    }));
    expect(result.current.lastActivity.timeElapsed).toBe('Il y a 5j');
  }));
  it('handles AsyncStorage errors gracefully during load', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockRejectedValueOnce(new Error('Load error'));
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook7.result,
      waitForNextUpdate = _renderHook7.waitForNextUpdate;
    yield waitForNextUpdate();
    expect(result.current.isLoading).toBe(false);
    expect(result.current.lastActivity).toBeNull();
  }));
  it('handles AsyncStorage errors gracefully during save', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook8.result,
      waitForNextUpdate = _renderHook8.waitForNextUpdate;
    yield waitForNextUpdate();
    _asyncStorage.default.setItem.mockRejectedValueOnce(new Error('Save error'));
    var newActivityData = {
      type: 'quiz',
      level: '2'
    };
    yield act((0, _asyncToGenerator2.default)(function* () {
      yield result.current.saveActivity(newActivityData);
    }));
    expect(_asyncStorage.default.setItem).toHaveBeenCalledTimes(1);
  }));
  it('handles AsyncStorage errors gracefully during clear', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useLastActivity.default)();
      }),
      result = _renderHook9.result,
      waitForNextUpdate = _renderHook9.waitForNextUpdate;
    yield waitForNextUpdate();
    _asyncStorage.default.removeItem.mockRejectedValueOnce(new Error('Clear error'));
    yield act((0, _asyncToGenerator2.default)(function* () {
      yield result.current.clearActivity();
    }));
    expect(_asyncStorage.default.removeItem).toHaveBeenCalledTimes(1);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJzZXRJdGVtIiwiamVzdCIsImZuIiwiUHJvbWlzZSIsInJlc29sdmUiLCJnZXRJdGVtIiwicmVtb3ZlSXRlbSIsIlNUT1JBR0VfS0VZUyIsIkxBU1RfQUNUSVZJVFkiLCJlbWl0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVhY3ROYXRpdmUiLCJfYXN5bmNTdG9yYWdlIiwiX3VzZUxhc3RBY3Rpdml0eSIsIl9jb25zdGFudHMiLCJfZXZlbnRCdXMiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwiTU9DS19OT1ciLCJEYXRlIiwiZ2V0VGltZSIsImJlZm9yZUVhY2giLCJ1c2VGYWtlVGltZXJzIiwic2V0U3lzdGVtVGltZSIsIkFzeW5jU3RvcmFnZSIsIm1vY2tDbGVhciIsImFmdGVyRWFjaCIsInJ1bk9ubHlQZW5kaW5nVGltZXJzIiwidXNlUmVhbFRpbWVycyIsIml0IiwiZGVmYXVsdCIsIl9yZW5kZXJIb29rIiwicmVuZGVySG9vayIsInVzZUxhc3RBY3Rpdml0eSIsInJlc3VsdCIsIndhaXRGb3JOZXh0VXBkYXRlIiwiZXhwZWN0IiwiY3VycmVudCIsImxhc3RBY3Rpdml0eSIsInRvQmVOdWxsIiwiaXNMb2FkaW5nIiwidG9CZSIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwibW9ja0FjdGl2aXR5IiwidHlwZSIsImxldmVsIiwidGltZXN0YW1wIiwibW9ja1Jlc29sdmVkVmFsdWVPbmNlIiwiSlNPTiIsInN0cmluZ2lmeSIsIl9yZW5kZXJIb29rMiIsInRvRXF1YWwiLCJPYmplY3QiLCJhc3NpZ24iLCJ0aW1lRWxhcHNlZCIsIl9yZW5kZXJIb29rMyIsIm5ld0FjdGl2aXR5RGF0YSIsImFjdCIsInNhdmVBY3Rpdml0eSIsIl9yZW5kZXJIb29rNCIsIm5vdCIsImNsZWFyQWN0aXZpdHkiLCJfcmVuZGVySG9vazUiLCJ1cGRhdGVkQWN0aXZpdHkiLCJyZWxvYWQiLCJfcmVuZGVySG9vazYiLCJtb2NrUmVqZWN0ZWRWYWx1ZU9uY2UiLCJFcnJvciIsIl9yZW5kZXJIb29rNyIsIl9yZW5kZXJIb29rOCIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsIl9yZW5kZXJIb29rOSJdLCJzb3VyY2VzIjpbInVzZUxhc3RBY3Rpdml0eS50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGplc3QtZW52aXJvbm1lbnQganNkb21cbiAqL1xuXG5pbXBvcnQgeyByZW5kZXJIb29rIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IEFzeW5jU3RvcmFnZSBmcm9tICdAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZSc7XG5pbXBvcnQgdXNlTGFzdEFjdGl2aXR5IGZyb20gJy4uLy4uL3NyYy9ob29rcy91c2VMYXN0QWN0aXZpdHknO1xuXG4vLyBNb2NrIEFzeW5jU3RvcmFnZVxuamVzdC5tb2NrKCdAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZScsICgpID0+ICh7XG4gIHNldEl0ZW06IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkpLFxuICBnZXRJdGVtOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZShudWxsKSksXG4gIHJlbW92ZUl0ZW06IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkpLFxufSkpO1xuXG4vLyBNb2NrIFNUT1JBR0VfS0VZU1xuamVzdC5tb2NrKCcuLi8uLi9zcmMvdXRpbHMvY29uc3RhbnRzJywgKCkgPT4gKHtcbiAgU1RPUkFHRV9LRVlTOiB7XG4gICAgTEFTVF9BQ1RJVklUWTogJ2xhc3RfYWN0aXZpdHknLFxuICB9LFxufSkpO1xuXG4vLyBNb2NrIGV2ZW50QnVzXG5qZXN0Lm1vY2soJy4uLy4uL3NyYy91dGlscy9ldmVudEJ1cycsICgpID0+ICh7XG4gIGVtaXQ6IGplc3QuZm4oKSxcbn0pKTtcblxuaW1wb3J0IHsgU1RPUkFHRV9LRVlTIH0gZnJvbSAnLi4vLi4vc3JjL3V0aWxzL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBlbWl0IH0gZnJvbSAnLi4vLi4vc3JjL3V0aWxzL2V2ZW50QnVzJztcblxuZGVzY3JpYmUoJ3VzZUxhc3RBY3Rpdml0eScsICgpID0+IHtcbiAgY29uc3QgTU9DS19OT1cgPSBuZXcgRGF0ZSgnMjAyNS0wMS0wMVQxMjowMDowMC4wMDBaJykuZ2V0VGltZSgpO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QudXNlRmFrZVRpbWVycygpO1xuICAgIGplc3Quc2V0U3lzdGVtVGltZShNT0NLX05PVyk7XG4gICAgQXN5bmNTdG9yYWdlLmdldEl0ZW0ubW9ja0NsZWFyKCk7XG4gICAgQXN5bmNTdG9yYWdlLnNldEl0ZW0ubW9ja0NsZWFyKCk7XG4gICAgQXN5bmNTdG9yYWdlLnJlbW92ZUl0ZW0ubW9ja0NsZWFyKCk7XG4gICAgZW1pdC5tb2NrQ2xlYXIoKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LnJ1bk9ubHlQZW5kaW5nVGltZXJzKCk7XG4gICAgamVzdC51c2VSZWFsVGltZXJzKCk7XG4gIH0pO1xuXG4gIGl0KCdpbml0aWFsaXplcyB3aXRoIG51bGwgbGFzdEFjdGl2aXR5IGFuZCBpc0xvYWRpbmcgdHJ1ZSwgdGhlbiBmYWxzZScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7IHJlc3VsdCwgd2FpdEZvck5leHRVcGRhdGUgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlTGFzdEFjdGl2aXR5KCkpO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50Lmxhc3RBY3Rpdml0eSkudG9CZU51bGwoKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNMb2FkaW5nKS50b0JlKHRydWUpO1xuXG4gICAgYXdhaXQgd2FpdEZvck5leHRVcGRhdGUoKTtcblxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0xvYWRpbmcpLnRvQmUoZmFsc2UpO1xuICAgIGV4cGVjdChBc3luY1N0b3JhZ2UuZ2V0SXRlbSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoU1RPUkFHRV9LRVlTLkxBU1RfQUNUSVZJVFkpO1xuICB9KTtcblxuICBpdCgnbG9hZHMgbGFzdCBhY3Rpdml0eSBmcm9tIEFzeW5jU3RvcmFnZSBhbmQgY2FsY3VsYXRlcyB0aW1lRWxhcHNlZCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtb2NrQWN0aXZpdHkgPSB7XG4gICAgICB0eXBlOiAnZXhlcmNpc2UnLFxuICAgICAgbGV2ZWw6ICcxJyxcbiAgICAgIHRpbWVzdGFtcDogTU9DS19OT1cgLSAoNSAqIDYwICogMTAwMCksIC8vIDUgbWludXRlcyBhZ29cbiAgICB9O1xuICAgIEFzeW5jU3RvcmFnZS5nZXRJdGVtLm1vY2tSZXNvbHZlZFZhbHVlT25jZShKU09OLnN0cmluZ2lmeShtb2NrQWN0aXZpdHkpKTtcblxuICAgIGNvbnN0IHsgcmVzdWx0LCB3YWl0Rm9yTmV4dFVwZGF0ZSB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VMYXN0QWN0aXZpdHkoKSk7XG4gICAgYXdhaXQgd2FpdEZvck5leHRVcGRhdGUoKTtcblxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5sYXN0QWN0aXZpdHkpLnRvRXF1YWwoe1xuICAgICAgLi4ubW9ja0FjdGl2aXR5LFxuICAgICAgdGltZUVsYXBzZWQ6ICdJbCB5IGEgNSBtaW4nLFxuICAgIH0pO1xuICB9KTtcblxuICBpdCgnc2F2ZXMgbmV3IGFjdGl2aXR5IGFuZCB1cGRhdGVzIHN0YXRlJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVzdWx0LCB3YWl0Rm9yTmV4dFVwZGF0ZSB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VMYXN0QWN0aXZpdHkoKSk7XG4gICAgYXdhaXQgd2FpdEZvck5leHRVcGRhdGUoKTsgLy8gSW5pdGlhbCBsb2FkXG5cbiAgICBjb25zdCBuZXdBY3Rpdml0eURhdGEgPSB7IHR5cGU6ICdxdWl6JywgbGV2ZWw6ICcyJyB9O1xuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5zYXZlQWN0aXZpdHkobmV3QWN0aXZpdHlEYXRhKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChBc3luY1N0b3JhZ2Uuc2V0SXRlbSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICBTVE9SQUdFX0tFWVMuTEFTVF9BQ1RJVklUWSxcbiAgICAgIEpTT04uc3RyaW5naWZ5KHsgLi4ubmV3QWN0aXZpdHlEYXRhLCB0aW1lc3RhbXA6IE1PQ0tfTk9XIH0pXG4gICAgKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQubGFzdEFjdGl2aXR5KS50b0VxdWFsKHtcbiAgICAgIC4uLm5ld0FjdGl2aXR5RGF0YSxcbiAgICAgIHRpbWVzdGFtcDogTU9DS19OT1csXG4gICAgICB0aW1lRWxhcHNlZDogJ8OAIGxcXCdpbnN0YW50JyxcbiAgICB9KTtcbiAgICBleHBlY3QoZW1pdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3Byb2dyZXNzLXVwZGF0ZWQnLCB7IC4uLm5ld0FjdGl2aXR5RGF0YSwgdGltZXN0YW1wOiBNT0NLX05PVyB9KTtcbiAgfSk7XG5cbiAgaXQoJ2NsZWFycyBhY3Rpdml0eSBmcm9tIEFzeW5jU3RvcmFnZSBhbmQgc3RhdGUnLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gUHJlLWxvYWQgc29tZSBhY3Rpdml0eSB0byBjbGVhclxuICAgIEFzeW5jU3RvcmFnZS5nZXRJdGVtLm1vY2tSZXNvbHZlZFZhbHVlT25jZShKU09OLnN0cmluZ2lmeSh7XG4gICAgICB0eXBlOiAnZXhlcmNpc2UnLCBsZXZlbDogJzEnLCB0aW1lc3RhbXA6IE1PQ0tfTk9XXG4gICAgfSkpO1xuXG4gICAgY29uc3QgeyByZXN1bHQsIHdhaXRGb3JOZXh0VXBkYXRlIH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUxhc3RBY3Rpdml0eSgpKTtcbiAgICBhd2FpdCB3YWl0Rm9yTmV4dFVwZGF0ZSgpOyAvLyBJbml0aWFsIGxvYWRcblxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5sYXN0QWN0aXZpdHkpLm5vdC50b0JlTnVsbCgpO1xuXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHJlc3VsdC5jdXJyZW50LmNsZWFyQWN0aXZpdHkoKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChBc3luY1N0b3JhZ2UucmVtb3ZlSXRlbSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoU1RPUkFHRV9LRVlTLkxBU1RfQUNUSVZJVFkpO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5sYXN0QWN0aXZpdHkpLnRvQmVOdWxsKCk7XG4gIH0pO1xuXG4gIGl0KCdyZWxvYWRzIGFjdGl2aXR5IHdoZW4gcmVsb2FkIGlzIGNhbGxlZCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7IHJlc3VsdCwgd2FpdEZvck5leHRVcGRhdGUgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlTGFzdEFjdGl2aXR5KCkpO1xuICAgIGF3YWl0IHdhaXRGb3JOZXh0VXBkYXRlKCk7IC8vIEluaXRpYWwgbG9hZFxuXG4gICAgQXN5bmNTdG9yYWdlLmdldEl0ZW0ubW9ja0NsZWFyKCk7XG4gICAgY29uc3QgdXBkYXRlZEFjdGl2aXR5ID0geyB0eXBlOiAncmVhZGluZycsIGxldmVsOiAnMycsIHRpbWVzdGFtcDogTU9DS19OT1cgLSAoMTAgKiA2MCAqIDEwMDApIH07IC8vIDEwIG1pbnMgYWdvXG4gICAgQXN5bmNTdG9yYWdlLmdldEl0ZW0ubW9ja1Jlc29sdmVkVmFsdWVPbmNlKEpTT04uc3RyaW5naWZ5KHVwZGF0ZWRBY3Rpdml0eSkpO1xuXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHJlc3VsdC5jdXJyZW50LnJlbG9hZCgpO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KEFzeW5jU3RvcmFnZS5nZXRJdGVtKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChTVE9SQUdFX0tFWVMuTEFTVF9BQ1RJVklUWSk7XG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50Lmxhc3RBY3Rpdml0eSkudG9FcXVhbCh7XG4gICAgICAuLi51cGRhdGVkQWN0aXZpdHksXG4gICAgICB0aW1lRWxhcHNlZDogJ0lsIHkgYSAxMCBtaW4nLFxuICAgIH0pO1xuICB9KTtcblxuICBpdCgnY2FsY3VsYXRlcyB0aW1lRWxhcHNlZCBjb3JyZWN0bHkgZm9yIGRpZmZlcmVudCBkdXJhdGlvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgeyByZXN1bHQsIHdhaXRGb3JOZXh0VXBkYXRlIH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUxhc3RBY3Rpdml0eSgpKTtcbiAgICBhd2FpdCB3YWl0Rm9yTmV4dFVwZGF0ZSgpOyAvLyBJbml0aWFsIGxvYWRcblxuICAgIC8vIMOAIGwnaW5zdGFudFxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5zYXZlQWN0aXZpdHkoeyB0eXBlOiAndGVzdCcsIHRpbWVzdGFtcDogTU9DS19OT1cgfSk7XG4gICAgfSk7XG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50Lmxhc3RBY3Rpdml0eS50aW1lRWxhcHNlZCkudG9CZSgnw4AgbFxcJ2luc3RhbnQnKTtcblxuICAgIC8vIDMwIG1pbnV0ZXMgYWdvXG4gICAgamVzdC5zZXRTeXN0ZW1UaW1lKE1PQ0tfTk9XICsgKDMwICogNjAgKiAxMDAwKSk7XG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHJlc3VsdC5jdXJyZW50LnJlbG9hZCgpO1xuICAgIH0pO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5sYXN0QWN0aXZpdHkudGltZUVsYXBzZWQpLnRvQmUoJ0lsIHkgYSAzMCBtaW4nKTtcblxuICAgIC8vIDEgaG91ciBhZ29cbiAgICBqZXN0LnNldFN5c3RlbVRpbWUoTU9DS19OT1cgKyAoNjAgKiA2MCAqIDEwMDApKTtcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgcmVzdWx0LmN1cnJlbnQucmVsb2FkKCk7XG4gICAgfSk7XG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50Lmxhc3RBY3Rpdml0eS50aW1lRWxhcHNlZCkudG9CZSgnSWwgeSBhIDFoJyk7XG5cbiAgICAvLyAyIGhvdXJzIGFnb1xuICAgIGplc3Quc2V0U3lzdGVtVGltZShNT0NLX05PVyArICgxMjAgKiA2MCAqIDEwMDApKTtcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgcmVzdWx0LmN1cnJlbnQucmVsb2FkKCk7XG4gICAgfSk7XG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50Lmxhc3RBY3Rpdml0eS50aW1lRWxhcHNlZCkudG9CZSgnSWwgeSBhIDJoJyk7XG5cbiAgICAvLyAxIGRheSBhZ29cbiAgICBqZXN0LnNldFN5c3RlbVRpbWUoTU9DS19OT1cgKyAoMjQgKiA2MCAqIDYwICogMTAwMCkpO1xuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5yZWxvYWQoKTtcbiAgICB9KTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQubGFzdEFjdGl2aXR5LnRpbWVFbGFwc2VkKS50b0JlKCdJbCB5IGEgMWonKTtcblxuICAgIC8vIDUgZGF5cyBhZ29cbiAgICBqZXN0LnNldFN5c3RlbVRpbWUoTU9DS19OT1cgKyAoNSAqIDI0ICogNjAgKiA2MCAqIDEwMDApKTtcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgcmVzdWx0LmN1cnJlbnQucmVsb2FkKCk7XG4gICAgfSk7XG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50Lmxhc3RBY3Rpdml0eS50aW1lRWxhcHNlZCkudG9CZSgnSWwgeSBhIDVqJyk7XG4gIH0pO1xuXG4gIGl0KCdoYW5kbGVzIEFzeW5jU3RvcmFnZSBlcnJvcnMgZ3JhY2VmdWxseSBkdXJpbmcgbG9hZCcsIGFzeW5jICgpID0+IHtcbiAgICBBc3luY1N0b3JhZ2UuZ2V0SXRlbS5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UobmV3IEVycm9yKCdMb2FkIGVycm9yJykpO1xuXG4gICAgY29uc3QgeyByZXN1bHQsIHdhaXRGb3JOZXh0VXBkYXRlIH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUxhc3RBY3Rpdml0eSgpKTtcbiAgICBhd2FpdCB3YWl0Rm9yTmV4dFVwZGF0ZSgpO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzTG9hZGluZykudG9CZShmYWxzZSk7XG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50Lmxhc3RBY3Rpdml0eSkudG9CZU51bGwoKTtcbiAgfSk7XG5cbiAgaXQoJ2hhbmRsZXMgQXN5bmNTdG9yYWdlIGVycm9ycyBncmFjZWZ1bGx5IGR1cmluZyBzYXZlJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVzdWx0LCB3YWl0Rm9yTmV4dFVwZGF0ZSB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VMYXN0QWN0aXZpdHkoKSk7XG4gICAgYXdhaXQgd2FpdEZvck5leHRVcGRhdGUoKTtcblxuICAgIEFzeW5jU3RvcmFnZS5zZXRJdGVtLm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoJ1NhdmUgZXJyb3InKSk7XG5cbiAgICBjb25zdCBuZXdBY3Rpdml0eURhdGEgPSB7IHR5cGU6ICdxdWl6JywgbGV2ZWw6ICcyJyB9O1xuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5zYXZlQWN0aXZpdHkobmV3QWN0aXZpdHlEYXRhKTtcbiAgICB9KTtcblxuICAgIC8vIFNob3VsZCBub3QgdGhyb3csIGJ1dCBsYXN0QWN0aXZpdHkgbWlnaHQgbm90IGJlIHVwZGF0ZWQgaWYgc2F2ZSBmYWlsZWRcbiAgICAvLyBGb3IgdGhpcyB0ZXN0LCB3ZSBqdXN0IGVuc3VyZSBubyBjcmFzaCBhbmQgc2V0SXRlbSB3YXMgY2FsbGVkLlxuICAgIGV4cGVjdChBc3luY1N0b3JhZ2Uuc2V0SXRlbSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICB9KTtcblxuICBpdCgnaGFuZGxlcyBBc3luY1N0b3JhZ2UgZXJyb3JzIGdyYWNlZnVsbHkgZHVyaW5nIGNsZWFyJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVzdWx0LCB3YWl0Rm9yTmV4dFVwZGF0ZSB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VMYXN0QWN0aXZpdHkoKSk7XG4gICAgYXdhaXQgd2FpdEZvck5leHRVcGRhdGUoKTtcblxuICAgIEFzeW5jU3RvcmFnZS5yZW1vdmVJdGVtLm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoJ0NsZWFyIGVycm9yJykpO1xuXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHJlc3VsdC5jdXJyZW50LmNsZWFyQWN0aXZpdHkoKTtcbiAgICB9KTtcblxuICAgIC8vIFNob3VsZCBub3QgdGhyb3csIGJ1dCByZW1vdmVJdGVtIHdhcyBjYWxsZWQuXG4gICAgZXhwZWN0KEFzeW5jU3RvcmFnZS5yZW1vdmVJdGVtKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xufSk7Il0sIm1hcHBpbmdzIjoiQUFTQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsMkNBQTJDLEVBQUU7RUFBQSxPQUFPO0lBQzVEQyxPQUFPLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDO01BQUEsT0FBTUMsT0FBTyxDQUFDQyxPQUFPLENBQUMsQ0FBQztJQUFBLEVBQUM7SUFDekNDLE9BQU8sRUFBRUosSUFBSSxDQUFDQyxFQUFFLENBQUM7TUFBQSxPQUFNQyxPQUFPLENBQUNDLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFBQSxFQUFDO0lBQzdDRSxVQUFVLEVBQUVMLElBQUksQ0FBQ0MsRUFBRSxDQUFDO01BQUEsT0FBTUMsT0FBTyxDQUFDQyxPQUFPLENBQUMsQ0FBQztJQUFBO0VBQzdDLENBQUM7QUFBQSxDQUFDLENBQUM7QUFHSE4sV0FBQSxHQUFLQyxJQUFJLENBQUMsMkJBQTJCLEVBQUU7RUFBQSxPQUFPO0lBQzVDUSxZQUFZLEVBQUU7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SUFDbkUsSUFBQXVDLFlBQUEsR0FBc0MsSUFBQXJDLHVCQUFVLEVBQUM7UUFBQSxPQUFNLElBQUFDLHdCQUFlLEVBQUMsQ0FBQztNQUFBLEVBQUM7TUFBakVDLE1BQU0sR0FBQW1DLFlBQUEsQ0FBTm5DLE1BQU07TUFBRUMsaUJBQWlCLEdBQUFrQyxZQUFBLENBQWpCbEMsaUJBQWlCO0lBQ2pDLE1BQU1BLGlCQUFpQixDQUFDLENBQUM7SUFFekJYLHFCQUFZLENBQUMxQixPQUFPLENBQUNvRSxxQkFBcUIsQ0FBQyxJQUFJQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7SUFFbkUsSUFBTVgsZUFBZSxHQUFHO01BQUVaLElBQUksRUFBRSxNQUFNO01BQUVDLEtBQUssRUFBRTtJQUFJLENBQUM7SUFDcEQsTUFBTVksR0FBRyxLQUFBL0Msa0JBQUEsQ0FBQW9CLE9BQUEsRUFBQyxhQUFZO01BQ3BCLE1BQU1JLE1BQU0sQ0FBQ0csT0FBTyxDQUFDcUIsWUFBWSxDQUFDRixlQUFlLENBQUM7SUFDcEQsQ0FBQyxFQUFDO0lBSUZwQixNQUFNLENBQUNaLHFCQUFZLENBQUMxQixPQUFPLENBQUMsQ0FBQ3dFLHFCQUFxQixDQUFDLENBQUMsQ0FBQztFQUN2RCxDQUFDLEVBQUM7RUFFRnpDLEVBQUUsQ0FBQyxxREFBcUQsTUFBQW5CLGtCQUFBLENBQUFvQixPQUFBLEVBQUUsYUFBWTtJQUNwRSxJQUFBeUMsWUFBQSxHQUFzQyxJQUFBdkMsdUJBQVUsRUFBQztRQUFBLE9BQU0sSUFBQUMsd0JBQWUsRUFBQyxDQUFDO01BQUEsRUFBQztNQUFqRUMsTUFBTSxHQUFBcUMsWUFBQSxDQUFOckMsTUFBTTtNQUFFQyxpQkFBaUIsR0FBQW9DLFlBQUEsQ0FBakJwQyxpQkFBaUI7SUFDakMsTUFBTUEsaUJBQWlCLENBQUMsQ0FBQztJQUV6QlgscUJBQVksQ0FBQ3BCLFVBQVUsQ0FBQzhELHFCQUFxQixDQUFDLElBQUlDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUV2RSxNQUFNVixHQUFHLEtBQUEvQyxrQkFBQSxDQUFBb0IsT0FBQSxFQUFDLGFBQVk7TUFDcEIsTUFBTUksTUFBTSxDQUFDRyxPQUFPLENBQUN3QixhQUFhLENBQUMsQ0FBQztJQUN0QyxDQUFDLEVBQUM7SUFHRnpCLE1BQU0sQ0FBQ1oscUJBQVksQ0FBQ3BCLFVBQVUsQ0FBQyxDQUFDa0UscUJBQXFCLENBQUMsQ0FBQyxDQUFDO0VBQzFELENBQUMsRUFBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==