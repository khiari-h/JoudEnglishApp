{"version":3,"names":["useRef","useEffect","ScrollView","ConversationMessage","ConversationTypingIndicator","styles","jsx","_jsx","jsxs","_jsxs","cov_25yvcod4na","s","ConversationMessageList","_ref","messages","isTyping","levelColor","f","scrollViewRef","current","b","setTimeout","scrollToEnd","animated","ref","style","container","contentContainerStyle","contentContainer","showsVerticalScrollIndicator","children","map","message","id"],"sources":["index.js"],"sourcesContent":["import { useRef, useEffect } from 'react';\r\nimport { ScrollView } from 'react-native';\r\nimport ConversationMessage from '../ConversationMessage';\r\nimport ConversationTypingIndicator from '../ConversationTypingIndicator';\r\nimport styles from './style';\r\n\r\n/**\r\n * Composant qui affiche la liste des messages dans la conversation\r\n * \r\n * @param {Array} messages - Liste des messages à afficher\r\n * @param {boolean} isTyping - Indique si le bot est en train de taper\r\n * @param {string} levelColor - Couleur associée au niveau courant\r\n */\r\nconst ConversationMessageList = ({ messages, isTyping, levelColor }) => {\r\n  const scrollViewRef = useRef(null);\r\n\r\n  // Faire défiler automatiquement vers le bas quand de nouveaux messages arrivent\r\n  useEffect(() => {\r\n    if (scrollViewRef.current) {\r\n      setTimeout(() => {\r\n        scrollViewRef.current.scrollToEnd({ animated: true });\r\n      }, 100);\r\n    }\r\n  }, [messages, isTyping]);\r\n\r\n  return (\r\n    <ScrollView\r\n      ref={scrollViewRef}\r\n      style={styles.container}\r\n      contentContainerStyle={styles.contentContainer}\r\n      showsVerticalScrollIndicator={false}\r\n    >\r\n      {/* Afficher tous les messages */}\r\n      {messages.map((message) => (\r\n        <ConversationMessage\r\n          key={message.id}\r\n          message={message}\r\n          levelColor={levelColor}\r\n        />\r\n      ))}\r\n\r\n      {/* Afficher l'indicateur de frappe si nécessaire */}\r\n      {isTyping && <ConversationTypingIndicator levelColor={levelColor} />}\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nexport default ConversationMessageList;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,MAAM,EAAEC,SAAS,QAAQ,OAAO;AACzC,SAASC,UAAU,QAAQ,cAAc;AACzC,OAAOC,mBAAmB,MAAM,wBAAwB;AACxD,OAAOC,2BAA2B,MAAM,gCAAgC;AACxE,OAAOC,MAAM,MAAM,SAAS;AAAC,SAAAC,GAAA,IAAAC,IAAA,EAAAC,IAAA,IAAAC,KAAA;AAAAC,cAAA,GAAAC,CAAA;AAS7B,IAAMC,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAAAC,IAAA,EAA2C;EAAA,IAArCC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;IAAEC,QAAQ,GAAAF,IAAA,CAARE,QAAQ;IAAEC,UAAU,GAAAH,IAAA,CAAVG,UAAU;EAAAN,cAAA,GAAAO,CAAA;EAC/D,IAAMC,aAAa,IAAAR,cAAA,GAAAC,CAAA,OAAGX,MAAM,CAAC,IAAI,CAAC;EAACU,cAAA,GAAAC,CAAA;EAGnCV,SAAS,CAAC,YAAM;IAAAS,cAAA,GAAAO,CAAA;IAAAP,cAAA,GAAAC,CAAA;IACd,IAAIO,aAAa,CAACC,OAAO,EAAE;MAAAT,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAC,CAAA;MACzBU,UAAU,CAAC,YAAM;QAAAX,cAAA,GAAAO,CAAA;QAAAP,cAAA,GAAAC,CAAA;QACfO,aAAa,CAACC,OAAO,CAACG,WAAW,CAAC;UAAEC,QAAQ,EAAE;QAAK,CAAC,CAAC;MACvD,CAAC,EAAE,GAAG,CAAC;IACT,CAAC;MAAAb,cAAA,GAAAU,CAAA;IAAA;EACH,CAAC,EAAE,CAACN,QAAQ,EAAEC,QAAQ,CAAC,CAAC;EAACL,cAAA,GAAAC,CAAA;EAEzB,OACEF,KAAA,CAACP,UAAU;IACTsB,GAAG,EAAEN,aAAc;IACnBO,KAAK,EAAEpB,MAAM,CAACqB,SAAU;IACxBC,qBAAqB,EAAEtB,MAAM,CAACuB,gBAAiB;IAC/CC,4BAA4B,EAAE,KAAM;IAAAC,QAAA,GAGnChB,QAAQ,CAACiB,GAAG,CAAC,UAACC,OAAO,EACpB;MAAAtB,cAAA,GAAAO,CAAA;MAAAP,cAAA,GAAAC,CAAA;MAAA,OAAAJ,IAAA,CAACJ,mBAAmB;QAElB6B,OAAO,EAAEA,OAAQ;QACjBhB,UAAU,EAAEA;MAAW,GAFlBgB,OAAO,CAACC,EAGd,CAAC;IAAD,CACF,CAAC,EAGD,CAAAvB,cAAA,GAAAU,CAAA,UAAAL,QAAQ,MAAAL,cAAA,GAAAU,CAAA,UAAIb,IAAA,CAACH,2BAA2B;MAACY,UAAU,EAAEA;IAAW,CAAE,CAAC;EAAA,CAC1D,CAAC;AAEjB,CAAC;AAED,eAAeJ,uBAAuB","ignoreList":[]}