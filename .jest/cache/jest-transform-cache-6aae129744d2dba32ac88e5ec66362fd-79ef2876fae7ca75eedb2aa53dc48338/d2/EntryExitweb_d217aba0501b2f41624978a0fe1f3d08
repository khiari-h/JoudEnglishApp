2e01b919bc5f4202a3eeb71d27951780
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EntryExitTransition = EntryExitTransition;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _config = require("../config");
var ExitingFinalStep = 49;
var EnteringStartStep = 50;
function addTransformToKeepPosition(keyframeStyleData, animationStyle, transformData, isExiting) {
  for (var _ref of Object.entries(animationStyle)) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
    var timestamp = _ref2[0];
    var styles = _ref2[1];
    if (styles.transform !== undefined) {
      styles.transform.unshift(transformData);
    } else {
      styles.transform = [transformData];
    }
    var newTimestamp = parseInt(timestamp) / 2;
    var index = isExiting ? Math.min(newTimestamp, ExitingFinalStep) : newTimestamp + EnteringStartStep;
    keyframeStyleData[`${index}`] = styles;
  }
}
function hideComponentBetweenAnimations(keyframeStyleData) {
  var opacityInStep = new Map();
  if (keyframeStyleData[0].opacity === undefined) {
    opacityInStep.set(48, 1);
    opacityInStep.set(49, 0);
  }
  if (keyframeStyleData[50].opacity === undefined) {
    opacityInStep.set(50, 0);
    opacityInStep.set(51, 1);
  }
  for (var _ref3 of opacityInStep) {
    var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);
    var step = _ref4[0];
    var opacity = _ref4[1];
    keyframeStyleData[step] = Object.assign({}, keyframeStyleData[step], {
      opacity: opacity
    });
  }
}
function EntryExitTransition(name, transitionData) {
  var exitingAnimationData = structuredClone(_config.AnimationsData[transitionData.exiting]);
  var enteringAnimationData = structuredClone(_config.AnimationsData[transitionData.entering]);
  var additionalExitingData = {
    translateX: `${transitionData.translateX}px`,
    translateY: `${transitionData.translateY}px`,
    scale: `${transitionData.scaleX},${transitionData.scaleY}`
  };
  var additionalEnteringData = {
    translateX: `0px`,
    translateY: `0px`,
    scale: `1,1`
  };
  var keyframeData = {
    name: name,
    style: {},
    duration: 300
  };
  addTransformToKeepPosition(keyframeData.style, exitingAnimationData.style, additionalExitingData, true);
  addTransformToKeepPosition(keyframeData.style, enteringAnimationData.style, additionalEnteringData, false);
  hideComponentBetweenAnimations(keyframeData.style);
  return keyframeData;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,