61043d8ebac85fb992906eb045cf7d49
_getJestObj().mock('expo-linear-gradient', function () {
  var _require = require('react-native'),
    View = _require.View;
  return {
    LinearGradient: function LinearGradient(props) {
      return (0, _jsxRuntime.jsx)(View, Object.assign({}, props));
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _CategorySelector = _interopRequireDefault(require("../../../src/components/exercise-common/CategorySelector"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('CategorySelector', function () {
  var categories = [{
    id: '1',
    name: 'Grammar'
  }, {
    id: '2',
    name: 'Vocabulary'
  }, {
    id: '3',
    name: 'Reading'
  }];
  it('renders correctly with minimum props', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories
      })),
      getByText = _render.getByText;
    expect(getByText('Grammar')).toBeTruthy();
    expect(getByText('Vocabulary')).toBeTruthy();
    expect(getByText('Reading')).toBeTruthy();
  });
  it('renders nothing when categories array is empty', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: []
      })),
      queryByText = _render2.queryByText;
    expect(queryByText('Grammar')).toBeNull();
  });
  it('displays the selected category with the correct style', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: function onSelectCategory() {}
      })),
      getByText = _render3.getByText;
    expect(getByText('âœ¨')).toBeTruthy();
  });
  it('calls onSelectCategory with the correct category id when a category is pressed', function () {
    var onSelectCategory = jest.fn();
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        onSelectCategory: onSelectCategory
      })),
      getByText = _render4.getByText;
    _reactNative.fireEvent.press(getByText('Vocabulary'));
    expect(onSelectCategory).toHaveBeenCalledWith('2');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfcmVxdWlyZSIsInJlcXVpcmUiLCJWaWV3IiwiTGluZWFyR3JhZGllbnQiLCJwcm9wcyIsIl9qc3hSdW50aW1lIiwianN4IiwiT2JqZWN0IiwiYXNzaWduIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9DYXRlZ29yeVNlbGVjdG9yIiwiX3JlcXVpcmUyIiwiamVzdCIsImRlc2NyaWJlIiwiY2F0ZWdvcmllcyIsImlkIiwibmFtZSIsIml0IiwiX3JlbmRlciIsInJlbmRlciIsImRlZmF1bHQiLCJnZXRCeVRleHQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwiX3JlbmRlcjIiLCJxdWVyeUJ5VGV4dCIsInRvQmVOdWxsIiwiX3JlbmRlcjMiLCJzZWxlY3RlZENhdGVnb3J5Iiwib25TZWxlY3RDYXRlZ29yeSIsImZuIiwiX3JlbmRlcjQiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIl0sInNvdXJjZXMiOlsiQ2F0ZWdvcnlTZWxlY3Rvci50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuLy8gX190ZXN0c19fL2NvbXBvbmVudHMvZXhlcmNpc2UtY29tbW9uL0NhdGVnb3J5U2VsZWN0b3IudGVzdC5qc1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IENhdGVnb3J5U2VsZWN0b3IgZnJvbSAnLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvZXhlcmNpc2UtY29tbW9uL0NhdGVnb3J5U2VsZWN0b3InO1xuXG4vLyBNb2NrIGRlcyBkw6lwZW5kYW5jZXNcbmplc3QubW9jaygnZXhwby1saW5lYXItZ3JhZGllbnQnLCAoKSA9PiB7XG4gIGNvbnN0IHsgVmlldyB9ID0gcmVxdWlyZSgncmVhY3QtbmF0aXZlJyk7XG4gIHJldHVybiB7XG4gICAgTGluZWFyR3JhZGllbnQ6IChwcm9wcykgPT4gPFZpZXcgey4uLnByb3BzfSAvPixcbiAgfTtcbn0pO1xuXG5kZXNjcmliZSgnQ2F0ZWdvcnlTZWxlY3RvcicsICgpID0+IHtcbiAgY29uc3QgY2F0ZWdvcmllcyA9IFtcbiAgICB7IGlkOiAnMScsIG5hbWU6ICdHcmFtbWFyJyB9LFxuICAgIHsgaWQ6ICcyJywgbmFtZTogJ1ZvY2FidWxhcnknIH0sXG4gICAgeyBpZDogJzMnLCBuYW1lOiAnUmVhZGluZycgfSxcbiAgXTtcblxuICBpdCgncmVuZGVycyBjb3JyZWN0bHkgd2l0aCBtaW5pbXVtIHByb3BzJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPENhdGVnb3J5U2VsZWN0b3IgY2F0ZWdvcmllcz17Y2F0ZWdvcmllc30gLz4pO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ0dyYW1tYXInKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ1ZvY2FidWxhcnknKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ1JlYWRpbmcnKSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICBpdCgncmVuZGVycyBub3RoaW5nIHdoZW4gY2F0ZWdvcmllcyBhcnJheSBpcyBlbXB0eScsICgpID0+IHtcbiAgICBjb25zdCB7IHF1ZXJ5QnlUZXh0IH0gPSByZW5kZXIoPENhdGVnb3J5U2VsZWN0b3IgY2F0ZWdvcmllcz17W119IC8+KTtcbiAgICBleHBlY3QocXVlcnlCeVRleHQoJ0dyYW1tYXInKSkudG9CZU51bGwoKTtcbiAgfSk7XG5cbiAgaXQoJ2Rpc3BsYXlzIHRoZSBzZWxlY3RlZCBjYXRlZ29yeSB3aXRoIHRoZSBjb3JyZWN0IHN0eWxlJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICA8Q2F0ZWdvcnlTZWxlY3RvclxuICAgICAgICBjYXRlZ29yaWVzPXtjYXRlZ29yaWVzfVxuICAgICAgICBzZWxlY3RlZENhdGVnb3J5PVwiMVwiXG4gICAgICAgIG9uU2VsZWN0Q2F0ZWdvcnk9eygpID0+IHt9fVxuICAgICAgLz5cbiAgICApO1xuXG4gICAgLy8gRGFucyBsZSBjb21wb3NhbnQsIGxhIGNhdMOpZ29yaWUgc8OpbGVjdGlvbm7DqWUgY29udGllbnQgdW4gZW1vamkgXCLinKhcIlxuICAgIGV4cGVjdChnZXRCeVRleHQoJ+KcqCcpKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KCdjYWxscyBvblNlbGVjdENhdGVnb3J5IHdpdGggdGhlIGNvcnJlY3QgY2F0ZWdvcnkgaWQgd2hlbiBhIGNhdGVnb3J5IGlzIHByZXNzZWQnLCAoKSA9PiB7XG4gICAgY29uc3Qgb25TZWxlY3RDYXRlZ29yeSA9IGplc3QuZm4oKTtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgPENhdGVnb3J5U2VsZWN0b3JcbiAgICAgICAgY2F0ZWdvcmllcz17Y2F0ZWdvcmllc31cbiAgICAgICAgb25TZWxlY3RDYXRlZ29yeT17b25TZWxlY3RDYXRlZ29yeX1cbiAgICAgIC8+XG4gICAgKTtcblxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ1ZvY2FidWxhcnknKSk7XG4gICAgZXhwZWN0KG9uU2VsZWN0Q2F0ZWdvcnkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcyJyk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQU9BQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxZQUFNO0VBQ3RDLElBQUFDLFFBQUEsR0FBaUJDLE9BQU8sQ0FBQyxjQUFjLENBQUM7SUFBaENDLElBQUksR0FBQUYsUUFBQSxDQUFKRSxJQUFJO0VBQ1osT0FBTztJQUNMQyxjQUFjLEVBQUUsU0FBaEJBLGNBQWNBLENBQUdDLEtBQUs7TUFBQSxPQUFLLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDSixJQUFJLEVBQUFLLE1BQUEsQ0FBQUMsTUFBQSxLQUFLSixLQUFLLENBQUcsQ0FBQztJQUFBO0VBQ2hELENBQUM7QUFDSCxDQUFDLENBQUM7QUFBQyxJQUFBSyxzQkFBQSxHQUFBUixPQUFBO0FBVkgsSUFBQVMsTUFBQSxHQUFBRCxzQkFBQSxDQUFBUixPQUFBO0FBQ0EsSUFBQVUsWUFBQSxHQUFBVixPQUFBO0FBQ0EsSUFBQVcsaUJBQUEsR0FBQUgsc0JBQUEsQ0FBQVIsT0FBQTtBQUF3RixJQUFBSSxXQUFBLEdBQUFKLE9BQUE7QUFBQSxTQUFBSCxZQUFBO0VBQUEsSUFBQWUsU0FBQSxHQUFBWixPQUFBO0lBQUFhLElBQUEsR0FBQUQsU0FBQSxDQUFBQyxJQUFBO0VBQUFoQixXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBZ0IsSUFBQTtFQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBVXhGQyxRQUFRLENBQUMsa0JBQWtCLEVBQUUsWUFBTTtFQUNqQyxJQUFNQyxVQUFVLEdBQUcsQ0FDakI7SUFBRUMsRUFBRSxFQUFFLEdBQUc7SUFBRUMsSUFBSSxFQUFFO0VBQVUsQ0FBQyxFQUM1QjtJQUFFRCxFQUFFLEVBQUUsR0FBRztJQUFFQyxJQUFJLEVBQUU7RUFBYSxDQUFDLEVBQy9CO0lBQUVELEVBQUUsRUFBRSxHQUFHO0lBQUVDLElBQUksRUFBRTtFQUFVLENBQUMsQ0FDN0I7RUFFREMsRUFBRSxDQUFDLHNDQUFzQyxFQUFFLFlBQU07SUFDL0MsSUFBQUMsT0FBQSxHQUFzQixJQUFBQyxtQkFBTSxFQUFDLElBQUFoQixXQUFBLENBQUFDLEdBQUEsRUFBQ00saUJBQUEsQ0FBQVUsT0FBZ0I7UUFBQ04sVUFBVSxFQUFFQTtNQUFXLENBQUUsQ0FBQyxDQUFDO01BQWxFTyxTQUFTLEdBQUFILE9BQUEsQ0FBVEcsU0FBUztJQUNqQkMsTUFBTSxDQUFDRCxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQ0UsVUFBVSxDQUFDLENBQUM7SUFDekNELE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0lBQzVDRCxNQUFNLENBQUNELFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDRSxVQUFVLENBQUMsQ0FBQztFQUMzQyxDQUFDLENBQUM7RUFFRk4sRUFBRSxDQUFDLGdEQUFnRCxFQUFFLFlBQU07SUFDekQsSUFBQU8sUUFBQSxHQUF3QixJQUFBTCxtQkFBTSxFQUFDLElBQUFoQixXQUFBLENBQUFDLEdBQUEsRUFBQ00saUJBQUEsQ0FBQVUsT0FBZ0I7UUFBQ04sVUFBVSxFQUFFO01BQUcsQ0FBRSxDQUFDLENBQUM7TUFBNURXLFdBQVcsR0FBQUQsUUFBQSxDQUFYQyxXQUFXO0lBQ25CSCxNQUFNLENBQUNHLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDQyxRQUFRLENBQUMsQ0FBQztFQUMzQyxDQUFDLENBQUM7RUFFRlQsRUFBRSxDQUFDLHVEQUF1RCxFQUFFLFlBQU07SUFDaEUsSUFBQVUsUUFBQSxHQUFzQixJQUFBUixtQkFBTSxFQUMxQixJQUFBaEIsV0FBQSxDQUFBQyxHQUFBLEVBQUNNLGlCQUFBLENBQUFVLE9BQWdCO1FBQ2ZOLFVBQVUsRUFBRUEsVUFBVztRQUN2QmMsZ0JBQWdCLEVBQUMsR0FBRztRQUNwQkMsZ0JBQWdCLEVBQUUsU0FBbEJBLGdCQUFnQkEsQ0FBQSxFQUFRLENBQUM7TUFBRSxDQUM1QixDQUNILENBQUM7TUFOT1IsU0FBUyxHQUFBTSxRQUFBLENBQVROLFNBQVM7SUFTakJDLE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0VBQ3JDLENBQUMsQ0FBQztFQUVGTixFQUFFLENBQUMsZ0ZBQWdGLEVBQUUsWUFBTTtJQUN6RixJQUFNWSxnQkFBZ0IsR0FBR2pCLElBQUksQ0FBQ2tCLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLElBQUFDLFFBQUEsR0FBc0IsSUFBQVosbUJBQU0sRUFDMUIsSUFBQWhCLFdBQUEsQ0FBQUMsR0FBQSxFQUFDTSxpQkFBQSxDQUFBVSxPQUFnQjtRQUNmTixVQUFVLEVBQUVBLFVBQVc7UUFDdkJlLGdCQUFnQixFQUFFQTtNQUFpQixDQUNwQyxDQUNILENBQUM7TUFMT1IsU0FBUyxHQUFBVSxRQUFBLENBQVRWLFNBQVM7SUFPakJXLHNCQUFTLENBQUNDLEtBQUssQ0FBQ1osU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3hDQyxNQUFNLENBQUNPLGdCQUFnQixDQUFDLENBQUNLLG9CQUFvQixDQUFDLEdBQUcsQ0FBQztFQUNwRCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=