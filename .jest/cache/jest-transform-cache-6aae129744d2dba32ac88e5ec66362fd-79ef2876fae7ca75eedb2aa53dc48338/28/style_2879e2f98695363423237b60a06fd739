8485cc86f48ce1788cd8e372c46f2a67
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBackgroundGradient = exports.default = void 0;
var _reactNative = require("react-native");
var getBackgroundGradient = exports.getBackgroundGradient = function getBackgroundGradient(primaryColor, backgroundColor) {
  return {
    colors: [`${primaryColor}10`, backgroundColor],
    locations: [0, 0.3]
  };
};
var _default = exports.default = _reactNative.StyleSheet.create({
  headerContainer: {},
  headerGradient: {
    paddingBottom: 20
  },
  headerTitle: {},
  modernScrollContent: {
    paddingTop: 20
  },
  modernIntro: {
    paddingHorizontal: 20,
    paddingVertical: 16,
    marginBottom: 30
  },
  modernIntroText: {
    fontSize: 16,
    fontWeight: "500",
    textAlign: "center"
  },
  modernLevelsContainer: {
    paddingHorizontal: 20
  },
  modernCard: Object.assign({
    backgroundColor: 'white',
    borderRadius: 16,
    marginBottom: 16
  }, _reactNative.Platform.select({
    ios: {
      shadowColor: "#000",
      shadowOffset: {
        width: 0,
        height: 2
      },
      shadowOpacity: 0.1,
      shadowRadius: 4
    },
    android: {
      elevation: 2
    }
  })),
  modernCardContent: {
    padding: 20
  },
  modernCardHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12
  },
  modernTitleContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1
  },
  modernTitle: {
    fontSize: 18,
    fontWeight: '600',
    marginRight: 12
  },
  modernBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12
  },
  modernBadgeText: {
    color: 'white',
    fontSize: 12,
    fontWeight: '600'
  },
  modernIcon: {
    fontSize: 24
  },
  modernProgressContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
    gap: 12
  },
  modernProgressBar: {
    flex: 1,
    height: 6,
    backgroundColor: '#F3F4F6',
    borderRadius: 3,
    overflow: 'hidden'
  },
  modernProgressFill: {
    height: 6,
    borderRadius: 3
  },
  modernProgressText: {
    fontSize: 12,
    fontWeight: '500',
    minWidth: 30
  },
  modernButton: {
    marginTop: 4
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiZ2V0QmFja2dyb3VuZEdyYWRpZW50IiwiZXhwb3J0cyIsInByaW1hcnlDb2xvciIsImJhY2tncm91bmRDb2xvciIsImNvbG9ycyIsImxvY2F0aW9ucyIsIl9kZWZhdWx0IiwiZGVmYXVsdCIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJoZWFkZXJDb250YWluZXIiLCJoZWFkZXJHcmFkaWVudCIsInBhZGRpbmdCb3R0b20iLCJoZWFkZXJUaXRsZSIsIm1vZGVyblNjcm9sbENvbnRlbnQiLCJwYWRkaW5nVG9wIiwibW9kZXJuSW50cm8iLCJwYWRkaW5nSG9yaXpvbnRhbCIsInBhZGRpbmdWZXJ0aWNhbCIsIm1hcmdpbkJvdHRvbSIsIm1vZGVybkludHJvVGV4dCIsImZvbnRTaXplIiwiZm9udFdlaWdodCIsInRleHRBbGlnbiIsIm1vZGVybkxldmVsc0NvbnRhaW5lciIsIm1vZGVybkNhcmQiLCJPYmplY3QiLCJhc3NpZ24iLCJib3JkZXJSYWRpdXMiLCJQbGF0Zm9ybSIsInNlbGVjdCIsImlvcyIsInNoYWRvd0NvbG9yIiwic2hhZG93T2Zmc2V0Iiwid2lkdGgiLCJoZWlnaHQiLCJzaGFkb3dPcGFjaXR5Iiwic2hhZG93UmFkaXVzIiwiYW5kcm9pZCIsImVsZXZhdGlvbiIsIm1vZGVybkNhcmRDb250ZW50IiwicGFkZGluZyIsIm1vZGVybkNhcmRIZWFkZXIiLCJmbGV4RGlyZWN0aW9uIiwianVzdGlmeUNvbnRlbnQiLCJhbGlnbkl0ZW1zIiwibW9kZXJuVGl0bGVDb250YWluZXIiLCJmbGV4IiwibW9kZXJuVGl0bGUiLCJtYXJnaW5SaWdodCIsIm1vZGVybkJhZGdlIiwibW9kZXJuQmFkZ2VUZXh0IiwiY29sb3IiLCJtb2Rlcm5JY29uIiwibW9kZXJuUHJvZ3Jlc3NDb250YWluZXIiLCJnYXAiLCJtb2Rlcm5Qcm9ncmVzc0JhciIsIm92ZXJmbG93IiwibW9kZXJuUHJvZ3Jlc3NGaWxsIiwibW9kZXJuUHJvZ3Jlc3NUZXh0IiwibWluV2lkdGgiLCJtb2Rlcm5CdXR0b24iLCJtYXJnaW5Ub3AiXSwic291cmNlcyI6WyJzdHlsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvc2NyZWVucy9MZXZlbFNlbGVjdGlvbi9zdHlsZS5qcyAtIFZFUlNJT04gQ09NUEzDiFRFIFNJTVBMRVxuaW1wb3J0IHsgU3R5bGVTaGVldCwgUGxhdGZvcm0gfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuXG4vLyBIZWxwZXIgcG91ciBsZXMgZ3JhZGllbnRzXG5leHBvcnQgY29uc3QgZ2V0QmFja2dyb3VuZEdyYWRpZW50ID0gKHByaW1hcnlDb2xvciwgYmFja2dyb3VuZENvbG9yKSA9PiB7XG4gIHJldHVybiB7XG4gICAgY29sb3JzOiBbXG4gICAgICBgJHtwcmltYXJ5Q29sb3J9MTBgLCAvLyBUcsOocyB0cmFuc3BhcmVudCBlbiBoYXV0XG4gICAgICBiYWNrZ3JvdW5kQ29sb3IsICAgICAvLyBDb3VsZXVyIG5vcm1hbGUgZW4gYmFzXG4gICAgXSxcbiAgICBsb2NhdGlvbnM6IFswLCAwLjNdLFxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU3R5bGVTaGVldC5jcmVhdGUoe1xuICAvLyA9PT09PT09PT09PT09PT09PT09IEhFQURFUiA9PT09PT09PT09PT09PT09PT09XG4gIGhlYWRlckNvbnRhaW5lcjoge1xuICAgIC8vIENvbnRhaW5lciBkdSBoZWFkZXIgYXZlYyBncmFkaWVudFxuICB9LFxuXG4gIGhlYWRlckdyYWRpZW50OiB7XG4gICAgcGFkZGluZ0JvdHRvbTogMjAsXG4gIH0sXG5cbiAgaGVhZGVyVGl0bGU6IHtcbiAgICAvLyBTdHlsZSBkdSB0aXRyZSBkYW5zIGxlIGhlYWRlclxuICB9LFxuXG4gIC8vID09PT09PT09PT09PT09PT09PT0gU0NST0xMIENPTlRFTlQgPT09PT09PT09PT09PT09PT09PVxuICBtb2Rlcm5TY3JvbGxDb250ZW50OiB7XG4gICAgcGFkZGluZ1RvcDogMjAsXG4gIH0sXG5cbiAgbW9kZXJuSW50cm86IHtcbiAgICBwYWRkaW5nSG9yaXpvbnRhbDogMjAsXG4gICAgcGFkZGluZ1ZlcnRpY2FsOiAxNixcbiAgICBtYXJnaW5Cb3R0b206IDMwLCAvLyBQbHVzIGQnZXNwYWNlIHNvdXMgbGUgdGV4dGUgZCdpbnRyb1xuICB9LFxuXG4gIG1vZGVybkludHJvVGV4dDoge1xuICAgIGZvbnRTaXplOiAxNixcbiAgICBmb250V2VpZ2h0OiBcIjUwMFwiLFxuICAgIHRleHRBbGlnbjogXCJjZW50ZXJcIixcbiAgfSxcblxuICAvLyA9PT09PT09PT09PT09PT09PT09IE5JVkVBVVggQ09OVEFJTkVSID09PT09PT09PT09PT09PT09PT1cbiAgbW9kZXJuTGV2ZWxzQ29udGFpbmVyOiB7XG4gICAgcGFkZGluZ0hvcml6b250YWw6IDIwLFxuICB9LFxuXG4gIC8vID09PT09PT09PT09PT09PT09PT0gQ0FSRFMgREUgTklWRUFVWCA9PT09PT09PT09PT09PT09PT09XG4gIG1vZGVybkNhcmQ6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXG4gICAgYm9yZGVyUmFkaXVzOiAxNixcbiAgICBtYXJnaW5Cb3R0b206IDE2LFxuICAgIC4uLlBsYXRmb3JtLnNlbGVjdCh7XG4gICAgICBpb3M6IHtcbiAgICAgICAgc2hhZG93Q29sb3I6IFwiIzAwMFwiLFxuICAgICAgICBzaGFkb3dPZmZzZXQ6IHsgd2lkdGg6IDAsIGhlaWdodDogMiB9LFxuICAgICAgICBzaGFkb3dPcGFjaXR5OiAwLjEsXG4gICAgICAgIHNoYWRvd1JhZGl1czogNCxcbiAgICAgIH0sXG4gICAgICBhbmRyb2lkOiB7XG4gICAgICAgIGVsZXZhdGlvbjogMixcbiAgICAgIH0sXG4gICAgfSksXG4gIH0sXG5cbiAgbW9kZXJuQ2FyZENvbnRlbnQ6IHtcbiAgICBwYWRkaW5nOiAyMCxcbiAgfSxcblxuICAvLyA9PT09PT09PT09PT09PT09PT09IEhFQURFUiBERSBDQVJEID09PT09PT09PT09PT09PT09PT1cbiAgbW9kZXJuQ2FyZEhlYWRlcjoge1xuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgbWFyZ2luQm90dG9tOiAxMixcbiAgfSxcblxuICBtb2Rlcm5UaXRsZUNvbnRhaW5lcjoge1xuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGZsZXg6IDEsXG4gIH0sXG5cbiAgbW9kZXJuVGl0bGU6IHtcbiAgICBmb250U2l6ZTogMTgsXG4gICAgZm9udFdlaWdodDogJzYwMCcsXG4gICAgbWFyZ2luUmlnaHQ6IDEyLFxuICB9LFxuXG4gIG1vZGVybkJhZGdlOiB7XG4gICAgcGFkZGluZ0hvcml6b250YWw6IDgsXG4gICAgcGFkZGluZ1ZlcnRpY2FsOiA0LFxuICAgIGJvcmRlclJhZGl1czogMTIsXG4gIH0sXG5cbiAgbW9kZXJuQmFkZ2VUZXh0OiB7XG4gICAgY29sb3I6ICd3aGl0ZScsXG4gICAgZm9udFNpemU6IDEyLFxuICAgIGZvbnRXZWlnaHQ6ICc2MDAnLFxuICB9LFxuXG4gIG1vZGVybkljb246IHtcbiAgICBmb250U2l6ZTogMjQsXG4gIH0sXG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PSBQUk9HUkVTU0lPTiA9PT09PT09PT09PT09PT09PT09XG4gIG1vZGVyblByb2dyZXNzQ29udGFpbmVyOiB7XG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgbWFyZ2luQm90dG9tOiAxNixcbiAgICBnYXA6IDEyLFxuICB9LFxuXG4gIG1vZGVyblByb2dyZXNzQmFyOiB7XG4gICAgZmxleDogMSxcbiAgICBoZWlnaHQ6IDYsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnI0YzRjRGNicsXG4gICAgYm9yZGVyUmFkaXVzOiAzLFxuICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgfSxcblxuICBtb2Rlcm5Qcm9ncmVzc0ZpbGw6IHtcbiAgICBoZWlnaHQ6IDYsXG4gICAgYm9yZGVyUmFkaXVzOiAzLFxuICB9LFxuXG4gIG1vZGVyblByb2dyZXNzVGV4dDoge1xuICAgIGZvbnRTaXplOiAxMixcbiAgICBmb250V2VpZ2h0OiAnNTAwJyxcbiAgICBtaW5XaWR0aDogMzAsXG4gIH0sXG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PSBCT1VUT04gPT09PT09PT09PT09PT09PT09PVxuICBtb2Rlcm5CdXR0b246IHtcbiAgICBtYXJnaW5Ub3A6IDQsXG4gIH0sXG59KTsiXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxJQUFBQSxZQUFBLEdBQUFDLE9BQUE7QUFHTyxJQUFNQyxxQkFBcUIsR0FBQUMsT0FBQSxDQUFBRCxxQkFBQSxHQUFHLFNBQXhCQSxxQkFBcUJBLENBQUlFLFlBQVksRUFBRUMsZUFBZSxFQUFLO0VBQ3RFLE9BQU87SUFDTEMsTUFBTSxFQUFFLENBQ04sR0FBR0YsWUFBWSxJQUFJLEVBQ25CQyxlQUFlLENBQ2hCO0lBQ0RFLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHO0VBQ3BCLENBQUM7QUFDSCxDQUFDO0FBQUMsSUFBQUMsUUFBQSxHQUFBTCxPQUFBLENBQUFNLE9BQUEsR0FFYUMsdUJBQVUsQ0FBQ0MsTUFBTSxDQUFDO0VBRS9CQyxlQUFlLEVBQUUsQ0FFakIsQ0FBQztFQUVEQyxjQUFjLEVBQUU7SUFDZEMsYUFBYSxFQUFFO0VBQ2pCLENBQUM7RUFFREMsV0FBVyxFQUFFLENBRWIsQ0FBQztFQUdEQyxtQkFBbUIsRUFBRTtJQUNuQkMsVUFBVSxFQUFFO0VBQ2QsQ0FBQztFQUVEQyxXQUFXLEVBQUU7SUFDWEMsaUJBQWlCLEVBQUUsRUFBRTtJQUNyQkMsZUFBZSxFQUFFLEVBQUU7SUFDbkJDLFlBQVksRUFBRTtFQUNoQixDQUFDO0VBRURDLGVBQWUsRUFBRTtJQUNmQyxRQUFRLEVBQUUsRUFBRTtJQUNaQyxVQUFVLEVBQUUsS0FBSztJQUNqQkMsU0FBUyxFQUFFO0VBQ2IsQ0FBQztFQUdEQyxxQkFBcUIsRUFBRTtJQUNyQlAsaUJBQWlCLEVBQUU7RUFDckIsQ0FBQztFQUdEUSxVQUFVLEVBQUFDLE1BQUEsQ0FBQUMsTUFBQTtJQUNSeEIsZUFBZSxFQUFFLE9BQU87SUFDeEJ5QixZQUFZLEVBQUUsRUFBRTtJQUNoQlQsWUFBWSxFQUFFO0VBQUUsR0FDYlUscUJBQVEsQ0FBQ0MsTUFBTSxDQUFDO0lBQ2pCQyxHQUFHLEVBQUU7TUFDSEMsV0FBVyxFQUFFLE1BQU07TUFDbkJDLFlBQVksRUFBRTtRQUFFQyxLQUFLLEVBQUUsQ0FBQztRQUFFQyxNQUFNLEVBQUU7TUFBRSxDQUFDO01BQ3JDQyxhQUFhLEVBQUUsR0FBRztNQUNsQkMsWUFBWSxFQUFFO0lBQ2hCLENBQUM7SUFDREMsT0FBTyxFQUFFO01BQ1BDLFNBQVMsRUFBRTtJQUNiO0VBQ0YsQ0FBQyxDQUFDLENBQ0g7RUFFREMsaUJBQWlCLEVBQUU7SUFDakJDLE9BQU8sRUFBRTtFQUNYLENBQUM7RUFHREMsZ0JBQWdCLEVBQUU7SUFDaEJDLGFBQWEsRUFBRSxLQUFLO0lBQ3BCQyxjQUFjLEVBQUUsZUFBZTtJQUMvQkMsVUFBVSxFQUFFLFFBQVE7SUFDcEIxQixZQUFZLEVBQUU7RUFDaEIsQ0FBQztFQUVEMkIsb0JBQW9CLEVBQUU7SUFDcEJILGFBQWEsRUFBRSxLQUFLO0lBQ3BCRSxVQUFVLEVBQUUsUUFBUTtJQUNwQkUsSUFBSSxFQUFFO0VBQ1IsQ0FBQztFQUVEQyxXQUFXLEVBQUU7SUFDWDNCLFFBQVEsRUFBRSxFQUFFO0lBQ1pDLFVBQVUsRUFBRSxLQUFLO0lBQ2pCMkIsV0FBVyxFQUFFO0VBQ2YsQ0FBQztFQUVEQyxXQUFXLEVBQUU7SUFDWGpDLGlCQUFpQixFQUFFLENBQUM7SUFDcEJDLGVBQWUsRUFBRSxDQUFDO0lBQ2xCVSxZQUFZLEVBQUU7RUFDaEIsQ0FBQztFQUVEdUIsZUFBZSxFQUFFO0lBQ2ZDLEtBQUssRUFBRSxPQUFPO0lBQ2QvQixRQUFRLEVBQUUsRUFBRTtJQUNaQyxVQUFVLEVBQUU7RUFDZCxDQUFDO0VBRUQrQixVQUFVLEVBQUU7SUFDVmhDLFFBQVEsRUFBRTtFQUNaLENBQUM7RUFHRGlDLHVCQUF1QixFQUFFO0lBQ3ZCWCxhQUFhLEVBQUUsS0FBSztJQUNwQkUsVUFBVSxFQUFFLFFBQVE7SUFDcEIxQixZQUFZLEVBQUUsRUFBRTtJQUNoQm9DLEdBQUcsRUFBRTtFQUNQLENBQUM7RUFFREMsaUJBQWlCLEVBQUU7SUFDakJULElBQUksRUFBRSxDQUFDO0lBQ1BaLE1BQU0sRUFBRSxDQUFDO0lBQ1RoQyxlQUFlLEVBQUUsU0FBUztJQUMxQnlCLFlBQVksRUFBRSxDQUFDO0lBQ2Y2QixRQUFRLEVBQUU7RUFDWixDQUFDO0VBRURDLGtCQUFrQixFQUFFO0lBQ2xCdkIsTUFBTSxFQUFFLENBQUM7SUFDVFAsWUFBWSxFQUFFO0VBQ2hCLENBQUM7RUFFRCtCLGtCQUFrQixFQUFFO0lBQ2xCdEMsUUFBUSxFQUFFLEVBQUU7SUFDWkMsVUFBVSxFQUFFLEtBQUs7SUFDakJzQyxRQUFRLEVBQUU7RUFDWixDQUFDO0VBR0RDLFlBQVksRUFBRTtJQUNaQyxTQUFTLEVBQUU7RUFDYjtBQUNGLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==