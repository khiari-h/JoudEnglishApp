e5762e28dc89d00900e5ddd230ce047f
_getJestObj().mock('expo-router', function () {
  return {
    useFocusEffect: jest.fn(function () {}),
    router: {
      push: jest.fn(),
      back: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Dashboard = _interopRequireDefault(require("../../src/screens/Dashboard"));
var _ProgressContext = require("../../src/contexts/ProgressContext");
var _ThemeContext = require("../../src/contexts/ThemeContext");
var _CurrentLevelContext = require("../../src/contexts/CurrentLevelContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Dashboard accessibility', function () {
  it('should expose accessible buttons for actions/levels', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsx)(_CurrentLevelContext.CurrentLevelProvider, {
            children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
          })
        })
      })),
      getAllByA11yRole = _render.getAllByA11yRole;
    var buttons = getAllByA11yRole('button');
    expect(buttons.length).toBeGreaterThan(0);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VGb2N1c0VmZmVjdCIsImplc3QiLCJmbiIsInJvdXRlciIsInB1c2giLCJiYWNrIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfRGFzaGJvYXJkIiwiX1Byb2dyZXNzQ29udGV4dCIsIl9UaGVtZUNvbnRleHQiLCJfQ3VycmVudExldmVsQ29udGV4dCIsIl9qc3hSdW50aW1lIiwiX3JlcXVpcmUiLCJkZXNjcmliZSIsIml0IiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsIlRoZW1lUHJvdmlkZXIiLCJjaGlsZHJlbiIsIlByb2dyZXNzUHJvdmlkZXIiLCJDdXJyZW50TGV2ZWxQcm92aWRlciIsImRlZmF1bHQiLCJnZXRBbGxCeUExMXlSb2xlIiwiYnV0dG9ucyIsImV4cGVjdCIsImxlbmd0aCIsInRvQmVHcmVhdGVyVGhhbiJdLCJzb3VyY2VzIjpbIkRhc2hib2FyZC5hMTF5LnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgRGFzaGJvYXJkIGZyb20gJy4uLy4uL3NyYy9zY3JlZW5zL0Rhc2hib2FyZCc7XHJcbmltcG9ydCB7IFByb2dyZXNzUHJvdmlkZXIgfSBmcm9tICcuLi8uLi9zcmMvY29udGV4dHMvUHJvZ3Jlc3NDb250ZXh0JztcclxuaW1wb3J0IHsgVGhlbWVQcm92aWRlciB9IGZyb20gJy4uLy4uL3NyYy9jb250ZXh0cy9UaGVtZUNvbnRleHQnO1xyXG5pbXBvcnQgeyBDdXJyZW50TGV2ZWxQcm92aWRlciB9IGZyb20gJy4uLy4uL3NyYy9jb250ZXh0cy9DdXJyZW50TGV2ZWxDb250ZXh0JztcclxuXHJcbmplc3QubW9jaygnZXhwby1yb3V0ZXInLCAoKSA9PiAoe1xyXG4gIHVzZUZvY3VzRWZmZWN0OiBqZXN0LmZuKCgpID0+IHt9KSxcclxuICByb3V0ZXI6IHsgcHVzaDogamVzdC5mbigpLCBiYWNrOiBqZXN0LmZuKCkgfSxcclxufSkpO1xyXG5cclxuZGVzY3JpYmUoJ0Rhc2hib2FyZCBhY2Nlc3NpYmlsaXR5JywgKCkgPT4ge1xyXG4gIGl0KCdzaG91bGQgZXhwb3NlIGFjY2Vzc2libGUgYnV0dG9ucyBmb3IgYWN0aW9ucy9sZXZlbHMnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEFsbEJ5QTExeVJvbGUgfSA9IHJlbmRlcihcclxuICAgICAgPFRoZW1lUHJvdmlkZXI+XHJcbiAgICAgICAgPFByb2dyZXNzUHJvdmlkZXI+XHJcbiAgICAgICAgICA8Q3VycmVudExldmVsUHJvdmlkZXI+XHJcbiAgICAgICAgICAgIDxEYXNoYm9hcmQgLz5cclxuICAgICAgICAgIDwvQ3VycmVudExldmVsUHJvdmlkZXI+XHJcbiAgICAgICAgPC9Qcm9ncmVzc1Byb3ZpZGVyPlxyXG4gICAgICA8L1RoZW1lUHJvdmlkZXI+XHJcbiAgICApO1xyXG4gICAgY29uc3QgYnV0dG9ucyA9IGdldEFsbEJ5QTExeVJvbGUoJ2J1dHRvbicpO1xyXG4gICAgZXhwZWN0KGJ1dHRvbnMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuXHJcbiJdLCJtYXBwaW5ncyI6IkFBT0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLGFBQWEsRUFBRTtFQUFBLE9BQU87SUFDOUJDLGNBQWMsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsWUFBTSxDQUFDLENBQUMsQ0FBQztJQUNqQ0MsTUFBTSxFQUFFO01BQUVDLElBQUksRUFBRUgsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUFFRyxJQUFJLEVBQUVKLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0lBQUU7RUFDN0MsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUFDLElBQUFJLHNCQUFBLEdBQUFDLE9BQUE7QUFWSixJQUFBQyxNQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxZQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxVQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSSxnQkFBQSxHQUFBSixPQUFBO0FBQ0EsSUFBQUssYUFBQSxHQUFBTCxPQUFBO0FBQ0EsSUFBQU0sb0JBQUEsR0FBQU4sT0FBQTtBQUE4RSxJQUFBTyxXQUFBLEdBQUFQLE9BQUE7QUFBQSxTQUFBVCxZQUFBO0VBQUEsSUFBQWlCLFFBQUEsR0FBQVIsT0FBQTtJQUFBTixJQUFBLEdBQUFjLFFBQUEsQ0FBQWQsSUFBQTtFQUFBSCxXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBRyxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFPOUVlLFFBQVEsQ0FBQyx5QkFBeUIsRUFBRSxZQUFNO0VBQ3hDQyxFQUFFLENBQUMscURBQXFELEVBQUUsWUFBTTtJQUM5RCxJQUFBQyxPQUFBLEdBQTZCLElBQUFDLG1CQUFNLEVBQ2pDLElBQUFMLFdBQUEsQ0FBQU0sR0FBQSxFQUFDUixhQUFBLENBQUFTLGFBQWE7UUFBQUMsUUFBQSxFQUNaLElBQUFSLFdBQUEsQ0FBQU0sR0FBQSxFQUFDVCxnQkFBQSxDQUFBWSxnQkFBZ0I7VUFBQUQsUUFBQSxFQUNmLElBQUFSLFdBQUEsQ0FBQU0sR0FBQSxFQUFDUCxvQkFBQSxDQUFBVyxvQkFBb0I7WUFBQUYsUUFBQSxFQUNuQixJQUFBUixXQUFBLENBQUFNLEdBQUEsRUFBQ1YsVUFBQSxDQUFBZSxPQUFTLElBQUU7VUFBQyxDQUNPO1FBQUMsQ0FDUDtNQUFDLENBQ04sQ0FDakIsQ0FBQztNQVJPQyxnQkFBZ0IsR0FBQVIsT0FBQSxDQUFoQlEsZ0JBQWdCO0lBU3hCLElBQU1DLE9BQU8sR0FBR0QsZ0JBQWdCLENBQUMsUUFBUSxDQUFDO0lBQzFDRSxNQUFNLENBQUNELE9BQU8sQ0FBQ0UsTUFBTSxDQUFDLENBQUNDLGVBQWUsQ0FBQyxDQUFDLENBQUM7RUFDM0MsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119