{"version":3,"names":["View","TextInput","TouchableOpacity","Text","styles","useCallback","jsx","_jsx","jsxs","_jsxs","cov_jgbzjhsff","s","ConversationInput","_ref","message","onChangeMessage","onSendMessage","levelColor","f","isButtonEnabled","trim","handleSend","b","style","container","children","textInput","value","onChangeText","placeholder","placeholderTextColor","multiline","sendButton","backgroundColor","disabledButton","onPress","disabled","sendButtonText"],"sources":["index.js"],"sourcesContent":["import { View, TextInput, TouchableOpacity, Text } from 'react-native';\r\nimport styles from './style';\r\nimport { useCallback } from 'react';\r\n\r\n/**\r\n * Composant pour la saisie de messages dans le Conversation\r\n * \r\n * @param {string} message - Texte actuellement dans l'input\r\n * @param {Function} onChangeMessage - Fonction appelée quand le texte change\r\n * @param {Function} onSendMessage - Fonction appelée quand le message est envoyé\r\n * @param {string} levelColor - Couleur associée au niveau courant\r\n */\r\nconst ConversationInput = ({ message, onChangeMessage, onSendMessage, levelColor }) => {\r\n  // Vérifier si le bouton d'envoi doit être activé\r\n  const isButtonEnabled = message.trim() !== '';\r\n\r\n  // Gérer l'envoi du message\r\n  const handleSend = useCallback(() => {\r\n    if (isButtonEnabled) {\r\n      onSendMessage();\r\n    }\r\n  }, [isButtonEnabled, onSendMessage]);\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <TextInput\r\n        style={styles.textInput}\r\n        value={message}\r\n        onChangeText={onChangeMessage}\r\n        placeholder=\"Type your message...\"\r\n        placeholderTextColor=\"#9ca3af\"\r\n        multiline\r\n      />\r\n      <TouchableOpacity\r\n        style={[\r\n          styles.sendButton,\r\n          isButtonEnabled\r\n            ? { backgroundColor: levelColor }\r\n            : styles.disabledButton\r\n        ]}\r\n        onPress={handleSend}\r\n        disabled={!isButtonEnabled}\r\n      >\r\n        <Text style={styles.sendButtonText}>↑</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default ConversationInput;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,IAAI,EAAEC,SAAS,EAAEC,gBAAgB,EAAEC,IAAI,QAAQ,cAAc;AACtE,OAAOC,MAAM,MAAM,SAAS;AAC5B,SAASC,WAAW,QAAQ,OAAO;AAAC,SAAAC,GAAA,IAAAC,IAAA,EAAAC,IAAA,IAAAC,KAAA;AAAAC,aAAA,GAAAC,CAAA;AAUpC,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAAC,IAAA,EAAgE;EAAA,IAA1DC,OAAO,GAAAD,IAAA,CAAPC,OAAO;IAAEC,eAAe,GAAAF,IAAA,CAAfE,eAAe;IAAEC,aAAa,GAAAH,IAAA,CAAbG,aAAa;IAAEC,UAAU,GAAAJ,IAAA,CAAVI,UAAU;EAAAP,aAAA,GAAAQ,CAAA;EAE9E,IAAMC,eAAe,IAAAT,aAAA,GAAAC,CAAA,OAAGG,OAAO,CAACM,IAAI,CAAC,CAAC,KAAK,EAAE;EAG7C,IAAMC,UAAU,IAAAX,aAAA,GAAAC,CAAA,OAAGN,WAAW,CAAC,YAAM;IAAAK,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAC,CAAA;IACnC,IAAIQ,eAAe,EAAE;MAAAT,aAAA,GAAAY,CAAA;MAAAZ,aAAA,GAAAC,CAAA;MACnBK,aAAa,CAAC,CAAC;IACjB,CAAC;MAAAN,aAAA,GAAAY,CAAA;IAAA;EACH,CAAC,EAAE,CAACH,eAAe,EAAEH,aAAa,CAAC,CAAC;EAACN,aAAA,GAAAC,CAAA;EAErC,OACEF,KAAA,CAACT,IAAI;IAACuB,KAAK,EAAEnB,MAAM,CAACoB,SAAU;IAAAC,QAAA,GAC5BlB,IAAA,CAACN,SAAS;MACRsB,KAAK,EAAEnB,MAAM,CAACsB,SAAU;MACxBC,KAAK,EAAEb,OAAQ;MACfc,YAAY,EAAEb,eAAgB;MAC9Bc,WAAW,EAAC,sBAAsB;MAClCC,oBAAoB,EAAC,SAAS;MAC9BC,SAAS;IAAA,CACV,CAAC,EACFxB,IAAA,CAACL,gBAAgB;MACfqB,KAAK,EAAE,CACLnB,MAAM,CAAC4B,UAAU,EACjBb,eAAe,IAAAT,aAAA,GAAAY,CAAA,UACX;QAAEW,eAAe,EAAEhB;MAAW,CAAC,KAAAP,aAAA,GAAAY,CAAA,UAC/BlB,MAAM,CAAC8B,cAAc,EACzB;MACFC,OAAO,EAAEd,UAAW;MACpBe,QAAQ,EAAE,CAACjB,eAAgB;MAAAM,QAAA,EAE3BlB,IAAA,CAACJ,IAAI;QAACoB,KAAK,EAAEnB,MAAM,CAACiC,cAAe;QAAAZ,QAAA,EAAC;MAAC,CAAM;IAAC,CAC5B,CAAC;EAAA,CACf,CAAC;AAEX,CAAC;AAED,eAAeb,iBAAiB","ignoreList":[]}