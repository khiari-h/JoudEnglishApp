e125a07168ce419f9388ac15627965a0
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useButtonStyles;
var _style = _interopRequireDefault(require("./style"));
var COLOR_MAP = {
  primary: "#5E60CE",
  secondary: "#6B7280",
  success: "#10B981",
  warning: "#F59E0B",
  danger: "#EF4444",
  info: "#3B82F6"
};
var DISABLED_COLORS = {
  text: "#9CA3AF",
  icon: "#9CA3AF",
  background: "#F3F4F6",
  border: "#D1D5DB"
};
var SIZE_CONFIGS = {
  small: {
    button: _style.default.smallButton,
    text: _style.default.smallText,
    iconSize: 16,
    loaderSize: "small"
  },
  medium: {
    button: _style.default.mediumButton,
    text: _style.default.mediumText,
    iconSize: 20,
    loaderSize: "small"
  },
  large: {
    button: _style.default.largeButton,
    text: _style.default.largeText,
    iconSize: 24,
    loaderSize: "large"
  }
};
var getOutlinedStyles = function getOutlinedStyles(baseColor, disabled) {
  return {
    button: {
      backgroundColor: "transparent",
      borderWidth: 1,
      borderColor: disabled ? DISABLED_COLORS.border : baseColor
    },
    text: {
      color: disabled ? DISABLED_COLORS.text : baseColor
    },
    icon: disabled ? DISABLED_COLORS.icon : baseColor,
    pressed: {
      backgroundColor: `${baseColor}10`
    }
  };
};
var getTextStyles = function getTextStyles(baseColor, disabled) {
  return {
    button: {
      backgroundColor: "transparent",
      borderWidth: 0,
      paddingHorizontal: 12
    },
    text: {
      color: disabled ? DISABLED_COLORS.text : baseColor
    },
    icon: disabled ? DISABLED_COLORS.icon : baseColor,
    pressed: {
      backgroundColor: `${baseColor}10`
    }
  };
};
var getTonalStyles = function getTonalStyles(baseColor, disabled) {
  return {
    button: {
      backgroundColor: disabled ? DISABLED_COLORS.background : `${baseColor}15`,
      borderWidth: 0
    },
    text: {
      color: disabled ? DISABLED_COLORS.text : baseColor
    },
    icon: disabled ? DISABLED_COLORS.icon : baseColor,
    pressed: {
      backgroundColor: `${baseColor}25`
    }
  };
};
var getIconStyles = function getIconStyles(iconSize, disabled, colorName) {
  return {
    button: {
      backgroundColor: disabled ? DISABLED_COLORS.background : "transparent",
      borderWidth: 0,
      padding: 0,
      minWidth: 0,
      minHeight: 0
    },
    icon: {
      fontSize: iconSize,
      color: disabled ? "#A1A1AA" : colorName
    }
  };
};
var getFilledStyles = function getFilledStyles(baseColor, disabled) {
  return {
    button: {
      backgroundColor: disabled ? "#E5E7EB" : baseColor,
      borderWidth: 0
    },
    text: {
      color: "white"
    },
    icon: "white",
    pressed: {
      backgroundColor: disabled ? "#E5E7EB" : `${baseColor}DD`
    }
  };
};
var getSizeStyles = function getSizeStyles(buttonSize) {
  return SIZE_CONFIGS[buttonSize] || SIZE_CONFIGS.medium;
};
var getVariantStyles = function getVariantStyles(_ref) {
  var _variantMap$variant;
  var variant = _ref.variant,
    disabled = _ref.disabled,
    baseColor = _ref.baseColor,
    sizeStyles = _ref.sizeStyles,
    colorName = _ref.colorName;
  var variantMap = {
    outlined: function outlined() {
      return getOutlinedStyles(baseColor, disabled);
    },
    text: function text() {
      return getTextStyles(baseColor, disabled);
    },
    tonal: function tonal() {
      return getTonalStyles(baseColor, disabled);
    },
    icon: function icon() {
      return getIconStyles((sizeStyles == null ? void 0 : sizeStyles.iconSize) || 24, disabled, colorName);
    },
    filled: function filled() {
      return getFilledStyles(baseColor, disabled);
    }
  };
  return ((_variantMap$variant = variantMap[variant]) == null ? void 0 : _variantMap$variant.call(variantMap)) || variantMap.filled();
};
function useButtonStyles(_ref2) {
  var _ref2$variant = _ref2.variant,
    variant = _ref2$variant === void 0 ? "filled" : _ref2$variant,
    _ref2$size = _ref2.size,
    size = _ref2$size === void 0 ? "medium" : _ref2$size,
    _ref2$color = _ref2.color,
    color = _ref2$color === void 0 ? "primary" : _ref2$color,
    _ref2$disabled = _ref2.disabled,
    disabled = _ref2$disabled === void 0 ? false : _ref2$disabled,
    _ref2$elevation = _ref2.elevation,
    elevation = _ref2$elevation === void 0 ? true : _ref2$elevation,
    _ref2$rounded = _ref2.rounded,
    rounded = _ref2$rounded === void 0 ? false : _ref2$rounded,
    _ref2$fullWidth = _ref2.fullWidth,
    fullWidth = _ref2$fullWidth === void 0 ? false : _ref2$fullWidth;
  var baseColor = COLOR_MAP[color] || COLOR_MAP.primary;
  var sizeStyles = getSizeStyles(size);
  var variantStyles = getVariantStyles({
    variant: variant,
    disabled: disabled,
    baseColor: baseColor,
    sizeStyles: sizeStyles,
    colorName: color
  });
  var elevationStyle = elevation && variant === "filled" && !disabled ? _style.default.withElevation : {};
  var radiusStyle = rounded ? _style.default.rounded : {};
  return {
    baseColor: baseColor,
    sizeStyles: sizeStyles,
    variantStyles: variantStyles,
    elevationStyle: elevationStyle,
    radiusStyle: radiusStyle,
    fullWidthStyle: fullWidth ? _style.default.fullWidth : null
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,