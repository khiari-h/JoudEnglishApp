8b78d689043a94d03bb08fcb08be300f
function cov_jgbzjhsff() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\exercises\\conversations\\ConversationInput\\index.js";
  var hash = "5ac8db7bd7a2d6154912eea94af4e76aa6da6f6b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\exercises\\conversations\\ConversationInput\\index.js",
    statementMap: {
      "0": {
        start: {
          line: 13,
          column: 26
        },
        end: {
          line: 48,
          column: 1
        }
      },
      "1": {
        start: {
          line: 15,
          column: 26
        },
        end: {
          line: 15,
          column: 47
        }
      },
      "2": {
        start: {
          line: 18,
          column: 21
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "3": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 21,
          column: 5
        }
      },
      "4": {
        start: {
          line: 20,
          column: 6
        },
        end: {
          line: 20,
          column: 22
        }
      },
      "5": {
        start: {
          line: 24,
          column: 2
        },
        end: {
          line: 47,
          column: 4
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 27
          }
        },
        loc: {
          start: {
            line: 13,
            column: 87
          },
          end: {
            line: 48,
            column: 1
          }
        },
        line: 13
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 18,
            column: 33
          },
          end: {
            line: 18,
            column: 34
          }
        },
        loc: {
          start: {
            line: 18,
            column: 39
          },
          end: {
            line: 22,
            column: 3
          }
        },
        line: 18
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 19
      },
      "1": {
        loc: {
          start: {
            line: 37,
            column: 10
          },
          end: {
            line: 39,
            column: 35
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 38,
            column: 14
          },
          end: {
            line: 38,
            column: 45
          }
        }, {
          start: {
            line: 39,
            column: 14
          },
          end: {
            line: 39,
            column: 35
          }
        }],
        line: 37
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5ac8db7bd7a2d6154912eea94af4e76aa6da6f6b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_jgbzjhsff = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_jgbzjhsff();
import { View, TextInput, TouchableOpacity, Text } from 'react-native';
import styles from './style';
import { useCallback } from 'react';
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
cov_jgbzjhsff().s[0]++;
var ConversationInput = function ConversationInput(_ref) {
  var message = _ref.message,
    onChangeMessage = _ref.onChangeMessage,
    onSendMessage = _ref.onSendMessage,
    levelColor = _ref.levelColor;
  cov_jgbzjhsff().f[0]++;
  var isButtonEnabled = (cov_jgbzjhsff().s[1]++, message.trim() !== '');
  var handleSend = (cov_jgbzjhsff().s[2]++, useCallback(function () {
    cov_jgbzjhsff().f[1]++;
    cov_jgbzjhsff().s[3]++;
    if (isButtonEnabled) {
      cov_jgbzjhsff().b[0][0]++;
      cov_jgbzjhsff().s[4]++;
      onSendMessage();
    } else {
      cov_jgbzjhsff().b[0][1]++;
    }
  }, [isButtonEnabled, onSendMessage]));
  cov_jgbzjhsff().s[5]++;
  return _jsxs(View, {
    style: styles.container,
    children: [_jsx(TextInput, {
      style: styles.textInput,
      value: message,
      onChangeText: onChangeMessage,
      placeholder: "Type your message...",
      placeholderTextColor: "#9ca3af",
      multiline: true
    }), _jsx(TouchableOpacity, {
      style: [styles.sendButton, isButtonEnabled ? (cov_jgbzjhsff().b[1][0]++, {
        backgroundColor: levelColor
      }) : (cov_jgbzjhsff().b[1][1]++, styles.disabledButton)],
      onPress: handleSend,
      disabled: !isButtonEnabled,
      children: _jsx(Text, {
        style: styles.sendButtonText,
        children: "\u2191"
      })
    })]
  });
};
export default ConversationInput;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWaWV3IiwiVGV4dElucHV0IiwiVG91Y2hhYmxlT3BhY2l0eSIsIlRleHQiLCJzdHlsZXMiLCJ1c2VDYWxsYmFjayIsImpzeCIsIl9qc3giLCJqc3hzIiwiX2pzeHMiLCJjb3Zfamdiempoc2ZmIiwicyIsIkNvbnZlcnNhdGlvbklucHV0IiwiX3JlZiIsIm1lc3NhZ2UiLCJvbkNoYW5nZU1lc3NhZ2UiLCJvblNlbmRNZXNzYWdlIiwibGV2ZWxDb2xvciIsImYiLCJpc0J1dHRvbkVuYWJsZWQiLCJ0cmltIiwiaGFuZGxlU2VuZCIsImIiLCJzdHlsZSIsImNvbnRhaW5lciIsImNoaWxkcmVuIiwidGV4dElucHV0IiwidmFsdWUiLCJvbkNoYW5nZVRleHQiLCJwbGFjZWhvbGRlciIsInBsYWNlaG9sZGVyVGV4dENvbG9yIiwibXVsdGlsaW5lIiwic2VuZEJ1dHRvbiIsImJhY2tncm91bmRDb2xvciIsImRpc2FibGVkQnV0dG9uIiwib25QcmVzcyIsImRpc2FibGVkIiwic2VuZEJ1dHRvblRleHQiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWaWV3LCBUZXh0SW5wdXQsIFRvdWNoYWJsZU9wYWNpdHksIFRleHQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGUnO1xyXG5pbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcclxuXHJcbi8qKlxyXG4gKiBDb21wb3NhbnQgcG91ciBsYSBzYWlzaWUgZGUgbWVzc2FnZXMgZGFucyBsZSBDb252ZXJzYXRpb25cclxuICogXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0gVGV4dGUgYWN0dWVsbGVtZW50IGRhbnMgbCdpbnB1dFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvbkNoYW5nZU1lc3NhZ2UgLSBGb25jdGlvbiBhcHBlbMOpZSBxdWFuZCBsZSB0ZXh0ZSBjaGFuZ2VcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gb25TZW5kTWVzc2FnZSAtIEZvbmN0aW9uIGFwcGVsw6llIHF1YW5kIGxlIG1lc3NhZ2UgZXN0IGVudm95w6lcclxuICogQHBhcmFtIHtzdHJpbmd9IGxldmVsQ29sb3IgLSBDb3VsZXVyIGFzc29jacOpZSBhdSBuaXZlYXUgY291cmFudFxyXG4gKi9cclxuY29uc3QgQ29udmVyc2F0aW9uSW5wdXQgPSAoeyBtZXNzYWdlLCBvbkNoYW5nZU1lc3NhZ2UsIG9uU2VuZE1lc3NhZ2UsIGxldmVsQ29sb3IgfSkgPT4ge1xyXG4gIC8vIFbDqXJpZmllciBzaSBsZSBib3V0b24gZCdlbnZvaSBkb2l0IMOqdHJlIGFjdGl2w6lcclxuICBjb25zdCBpc0J1dHRvbkVuYWJsZWQgPSBtZXNzYWdlLnRyaW0oKSAhPT0gJyc7XHJcblxyXG4gIC8vIEfDqXJlciBsJ2Vudm9pIGR1IG1lc3NhZ2VcclxuICBjb25zdCBoYW5kbGVTZW5kID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgaWYgKGlzQnV0dG9uRW5hYmxlZCkge1xyXG4gICAgICBvblNlbmRNZXNzYWdlKCk7XHJcbiAgICB9XHJcbiAgfSwgW2lzQnV0dG9uRW5hYmxlZCwgb25TZW5kTWVzc2FnZV0pO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9PlxyXG4gICAgICA8VGV4dElucHV0XHJcbiAgICAgICAgc3R5bGU9e3N0eWxlcy50ZXh0SW5wdXR9XHJcbiAgICAgICAgdmFsdWU9e21lc3NhZ2V9XHJcbiAgICAgICAgb25DaGFuZ2VUZXh0PXtvbkNoYW5nZU1lc3NhZ2V9XHJcbiAgICAgICAgcGxhY2Vob2xkZXI9XCJUeXBlIHlvdXIgbWVzc2FnZS4uLlwiXHJcbiAgICAgICAgcGxhY2Vob2xkZXJUZXh0Q29sb3I9XCIjOWNhM2FmXCJcclxuICAgICAgICBtdWx0aWxpbmVcclxuICAgICAgLz5cclxuICAgICAgPFRvdWNoYWJsZU9wYWNpdHlcclxuICAgICAgICBzdHlsZT17W1xyXG4gICAgICAgICAgc3R5bGVzLnNlbmRCdXR0b24sXHJcbiAgICAgICAgICBpc0J1dHRvbkVuYWJsZWRcclxuICAgICAgICAgICAgPyB7IGJhY2tncm91bmRDb2xvcjogbGV2ZWxDb2xvciB9XHJcbiAgICAgICAgICAgIDogc3R5bGVzLmRpc2FibGVkQnV0dG9uXHJcbiAgICAgICAgXX1cclxuICAgICAgICBvblByZXNzPXtoYW5kbGVTZW5kfVxyXG4gICAgICAgIGRpc2FibGVkPXshaXNCdXR0b25FbmFibGVkfVxyXG4gICAgICA+XHJcbiAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5zZW5kQnV0dG9uVGV4dH0+4oaRPC9UZXh0PlxyXG4gICAgICA8L1RvdWNoYWJsZU9wYWNpdHk+XHJcbiAgICA8L1ZpZXc+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbnZlcnNhdGlvbklucHV0O1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLFNBQVNBLElBQUksRUFBRUMsU0FBUyxFQUFFQyxnQkFBZ0IsRUFBRUMsSUFBSSxRQUFRLGNBQWM7QUFDdEUsT0FBT0MsTUFBTSxNQUFNLFNBQVM7QUFDNUIsU0FBU0MsV0FBVyxRQUFRLE9BQU87QUFBQyxTQUFBQyxHQUFBLElBQUFDLElBQUEsRUFBQUMsSUFBQSxJQUFBQyxLQUFBO0FBQUFDLGFBQUEsR0FBQUMsQ0FBQTtBQVVwQyxJQUFNQyxpQkFBaUIsR0FBRyxTQUFwQkEsaUJBQWlCQSxDQUFBQyxJQUFBLEVBQWdFO0VBQUEsSUFBMURDLE9BQU8sR0FBQUQsSUFBQSxDQUFQQyxPQUFPO0lBQUVDLGVBQWUsR0FBQUYsSUFBQSxDQUFmRSxlQUFlO0lBQUVDLGFBQWEsR0FBQUgsSUFBQSxDQUFiRyxhQUFhO0lBQUVDLFVBQVUsR0FBQUosSUFBQSxDQUFWSSxVQUFVO0VBQUFQLGFBQUEsR0FBQVEsQ0FBQTtFQUU5RSxJQUFNQyxlQUFlLElBQUFULGFBQUEsR0FBQUMsQ0FBQSxPQUFHRyxPQUFPLENBQUNNLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRTtFQUc3QyxJQUFNQyxVQUFVLElBQUFYLGFBQUEsR0FBQUMsQ0FBQSxPQUFHTixXQUFXLENBQUMsWUFBTTtJQUFBSyxhQUFBLEdBQUFRLENBQUE7SUFBQVIsYUFBQSxHQUFBQyxDQUFBO0lBQ25DLElBQUlRLGVBQWUsRUFBRTtNQUFBVCxhQUFBLEdBQUFZLENBQUE7TUFBQVosYUFBQSxHQUFBQyxDQUFBO01BQ25CSyxhQUFhLENBQUMsQ0FBQztJQUNqQixDQUFDO01BQUFOLGFBQUEsR0FBQVksQ0FBQTtJQUFBO0VBQ0gsQ0FBQyxFQUFFLENBQUNILGVBQWUsRUFBRUgsYUFBYSxDQUFDLENBQUM7RUFBQ04sYUFBQSxHQUFBQyxDQUFBO0VBRXJDLE9BQ0VGLEtBQUEsQ0FBQ1QsSUFBSTtJQUFDdUIsS0FBSyxFQUFFbkIsTUFBTSxDQUFDb0IsU0FBVTtJQUFBQyxRQUFBLEdBQzVCbEIsSUFBQSxDQUFDTixTQUFTO01BQ1JzQixLQUFLLEVBQUVuQixNQUFNLENBQUNzQixTQUFVO01BQ3hCQyxLQUFLLEVBQUViLE9BQVE7TUFDZmMsWUFBWSxFQUFFYixlQUFnQjtNQUM5QmMsV0FBVyxFQUFDLHNCQUFzQjtNQUNsQ0Msb0JBQW9CLEVBQUMsU0FBUztNQUM5QkMsU0FBUztJQUFBLENBQ1YsQ0FBQyxFQUNGeEIsSUFBQSxDQUFDTCxnQkFBZ0I7TUFDZnFCLEtBQUssRUFBRSxDQUNMbkIsTUFBTSxDQUFDNEIsVUFBVSxFQUNqQmIsZUFBZSxJQUFBVCxhQUFBLEdBQUFZLENBQUEsVUFDWDtRQUFFVyxlQUFlLEVBQUVoQjtNQUFXLENBQUMsS0FBQVAsYUFBQSxHQUFBWSxDQUFBLFVBQy9CbEIsTUFBTSxDQUFDOEIsY0FBYyxFQUN6QjtNQUNGQyxPQUFPLEVBQUVkLFVBQVc7TUFDcEJlLFFBQVEsRUFBRSxDQUFDakIsZUFBZ0I7TUFBQU0sUUFBQSxFQUUzQmxCLElBQUEsQ0FBQ0osSUFBSTtRQUFDb0IsS0FBSyxFQUFFbkIsTUFBTSxDQUFDaUMsY0FBZTtRQUFBWixRQUFBLEVBQUM7TUFBQyxDQUFNO0lBQUMsQ0FDNUIsQ0FBQztFQUFBLENBQ2YsQ0FBQztBQUVYLENBQUM7QUFFRCxlQUFlYixpQkFBaUIiLCJpZ25vcmVMaXN0IjpbXX0=