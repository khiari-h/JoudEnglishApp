0d4338e6b392d2e39429310535039498
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _ExerciseCard = _interopRequireDefault(require("../../../src/components/exercise-common/ExerciseCard"));
var _jsxRuntime = require("react/jsx-runtime");
describe('ExerciseCard', function () {
  var defaultProps = {
    title: 'Vocabulary Practice',
    description: 'Expand your word knowledge',
    icon: 'ðŸ“š',
    onPress: jest.fn()
  };
  afterEach(function () {
    jest.clearAllMocks();
  });
  it('renders the basic card information correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, defaultProps))),
      getByText = _render.getByText;
    expect(getByText('Vocabulary Practice')).toBeTruthy();
    expect(getByText('Expand your word knowledge')).toBeTruthy();
    expect(getByText('ðŸ“š')).toBeTruthy();
  });
  it('calls onPress when the card is pressed', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, defaultProps))),
      getByText = _render2.getByText;
    _reactNative.fireEvent.press(getByText('Vocabulary Practice'));
    expect(defaultProps.onPress).toHaveBeenCalledTimes(1);
  });
  it('calls onPress when the "Commencer" button is pressed', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, defaultProps))),
      getByText = _render3.getByText;
    _reactNative.fireEvent.press(getByText('Commencer'));
    expect(defaultProps.onPress).toHaveBeenCalledTimes(1);
  });
  it('displays the progress bar when progress is greater than 0', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, defaultProps, {
        progress: 50
      }))),
      getByText = _render4.getByText,
      getByTestId = _render4.getByTestId;
    expect(getByText('50%')).toBeTruthy();
    var progressFill = getByTestId('progress-fill');
    var flatStyle = _reactNative2.StyleSheet.flatten(progressFill.props.style);
    expect(flatStyle.width).toBe('50%');
  });
  it('displays the progress bar correctly at 100%', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, defaultProps, {
        progress: 100
      }))),
      getByText = _render5.getByText,
      getByTestId = _render5.getByTestId;
    expect(getByText('100%')).toBeTruthy();
    var progressFill = getByTestId('progress-fill');
    var flatStyle = _reactNative2.StyleSheet.flatten(progressFill.props.style);
    expect(flatStyle.width).toBe('100%');
  });
  it('does not display the progress bar when progress is 0', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, defaultProps, {
        progress: 0
      }))),
      queryByText = _render6.queryByText,
      queryByTestId = _render6.queryByTestId;
    expect(queryByText('50%')).toBeNull();
    expect(queryByTestId('progress-fill')).toBeNull();
  });
  it('displays the "Nouveau" badge when isNew is true and progress is 0', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, defaultProps, {
        isNew: true,
        progress: 0
      }))),
      getByText = _render7.getByText;
    expect(getByText('Nouveau')).toBeTruthy();
  });
  it('does not display the "Nouveau" badge when progress is greater than 0', function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, defaultProps, {
        isNew: true,
        progress: 50
      }))),
      queryByText = _render8.queryByText;
    expect(queryByText('Nouveau')).toBeNull();
  });
  it('does not display the "Nouveau" badge when isNew is false', function () {
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, defaultProps, {
        isNew: false
      }))),
      queryByText = _render9.queryByText;
    expect(queryByText('Nouveau')).toBeNull();
  });
  it('renders nothing for bottom content when progress is 0 and isNew is false', function () {
    var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, defaultProps, {
        progress: 0,
        isNew: false
      }))),
      queryByTestId = _render0.queryByTestId,
      queryByText = _render0.queryByText;
    expect(queryByTestId('progress-fill')).toBeNull();
    expect(queryByText('Nouveau')).toBeNull();
  });
  it('handles invalid or negative progress values gracefully', function () {
    var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, defaultProps, {
        progress: -10
      }))),
      queryByTestId = _render1.queryByTestId;
    expect(queryByTestId('progress-fill')).toBeNull();
    var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseCard.default, Object.assign({}, defaultProps, {
        progress: NaN
      }))),
      queryNaN = _render10.queryByTestId;
    expect(queryNaN('progress-fill')).toBeNull();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,