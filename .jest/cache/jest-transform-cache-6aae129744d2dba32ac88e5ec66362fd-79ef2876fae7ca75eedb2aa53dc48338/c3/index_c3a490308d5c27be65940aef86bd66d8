5e63505725a10a4e88a610fac415865a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ExerciseHeader = _interopRequireDefault(require("../../../../components/exercise-common/ExerciseHeader"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
function cov_19zffkdged() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\exercises\\vocabulary\\VocabularyHeader\\index.js";
  var hash = "5f42be14942aedf6f58576fc7becd262b03bf73e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\exercises\\vocabulary\\VocabularyHeader\\index.js",
    statementMap: {
      "0": {
        start: {
          line: 12,
          column: 25
        },
        end: {
          line: 28,
          column: 1
        }
      },
      "1": {
        start: {
          line: 14,
          column: 19
        },
        end: {
          line: 17,
          column: 3
        }
      },
      "2": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 39
        }
      },
      "3": {
        start: {
          line: 15,
          column: 25
        },
        end: {
          line: 15,
          column: 39
        }
      },
      "4": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 25
        }
      },
      "5": {
        start: {
          line: 19,
          column: 2
        },
        end: {
          line: 27,
          column: 4
        }
      },
      "6": {
        start: {
          line: 31,
          column: 0
        },
        end: {
          line: 38,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 25
          },
          end: {
            line: 12,
            column: 26
          }
        },
        loc: {
          start: {
            line: 12,
            column: 59
          },
          end: {
            line: 28,
            column: 1
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 19
          },
          end: {
            line: 14,
            column: 20
          }
        },
        loc: {
          start: {
            line: 14,
            column: 25
          },
          end: {
            line: 17,
            column: 3
          }
        },
        line: 14
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 39
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 39
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 15
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5f42be14942aedf6f58576fc7becd262b03bf73e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_19zffkdged = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_19zffkdged();
cov_19zffkdged().s[0]++;
var VocabularyHeader = function VocabularyHeader(_ref) {
  var level = _ref.level,
    mode = _ref.mode,
    onBackPress = _ref.onBackPress;
  cov_19zffkdged().f[0]++;
  cov_19zffkdged().s[1]++;
  var getTitle = function getTitle() {
    cov_19zffkdged().f[1]++;
    cov_19zffkdged().s[2]++;
    if (mode === 'fast') {
      cov_19zffkdged().b[0][0]++;
      cov_19zffkdged().s[3]++;
      return 'Fast';
    } else {
      cov_19zffkdged().b[0][1]++;
    }
    cov_19zffkdged().s[4]++;
    return 'Vocabulaire';
  };
  cov_19zffkdged().s[5]++;
  return (0, _jsxRuntime.jsx)(_ExerciseHeader.default, {
    title: getTitle(),
    level: level,
    exerciseType: "vocabulary",
    onClose: onBackPress,
    backIcon: "arrow-back"
  });
};
cov_19zffkdged().s[6]++;
VocabularyHeader.propTypes = {
  mode: _propTypes.default.oneOf(['fast', 'classic']).isRequired,
  onBackPress: _propTypes.default.func.isRequired,
  level: _propTypes.default.string.isRequired
};
var _default = exports.default = VocabularyHeader;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfRXhlcmNpc2VIZWFkZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfanN4UnVudGltZSIsImNvdl8xOXpmZmtkZ2VkIiwicGF0aCIsImhhc2giLCJnbG9iYWwiLCJGdW5jdGlvbiIsImdjdiIsImNvdmVyYWdlRGF0YSIsInN0YXRlbWVudE1hcCIsInN0YXJ0IiwibGluZSIsImNvbHVtbiIsImVuZCIsImZuTWFwIiwibmFtZSIsImRlY2wiLCJsb2MiLCJicmFuY2hNYXAiLCJ0eXBlIiwibG9jYXRpb25zIiwidW5kZWZpbmVkIiwicyIsImYiLCJiIiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsIlZvY2FidWxhcnlIZWFkZXIiLCJfcmVmIiwibGV2ZWwiLCJtb2RlIiwib25CYWNrUHJlc3MiLCJnZXRUaXRsZSIsImpzeCIsImRlZmF1bHQiLCJ0aXRsZSIsImV4ZXJjaXNlVHlwZSIsIm9uQ2xvc2UiLCJiYWNrSWNvbiIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsIm9uZU9mIiwiaXNSZXF1aXJlZCIsImZ1bmMiLCJzdHJpbmciLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBWb2NhYnVsYXJ5SGVhZGVyIC0gVmVyc2lvbiDDqXB1csOpZSBtb2JpbGUtZmlyc3RcclxuaW1wb3J0IEV4ZXJjaXNlSGVhZGVyIGZyb20gXCIuLi8uLi8uLi8uLi9jb21wb25lbnRzL2V4ZXJjaXNlLWNvbW1vbi9FeGVyY2lzZUhlYWRlclwiO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5cclxuLyoqXHJcbiAqIPCfjq8gVm9jYWJ1bGFyeUhlYWRlciAtIFZlcnNpb24gTW9iaWxlLUZpcnN0IMOJcHVyw6llXHJcbiAqIC0gVGl0cmVzIGNvdXJ0cyBldCBjbGFpcnNcclxuICogLSBDb2jDqXJlbmNlIGF2ZWMgRXhlcmNpc2VTZWxlY3Rpb25cclxuICogLSBGb2N1cyBzdXIgbCdlc3NlbnRpZWxcclxuICogLSBQYXMgZGUgcmVkb25kYW5jZVxyXG4gKi9cclxuY29uc3QgVm9jYWJ1bGFyeUhlYWRlciA9ICh7IGxldmVsLCBtb2RlLCBvbkJhY2tQcmVzcyB9KSA9PiB7XHJcbiAgLy8g8J+OryBUSVRSRVMgw4lQVVLDiVMgLSBNb2JpbGUtZmlyc3RcclxuICBjb25zdCBnZXRUaXRsZSA9ICgpID0+IHtcclxuICAgIGlmIChtb2RlID09PSAnZmFzdCcpIHJldHVybiAnRmFzdCc7IC8vIFNpbXBsZSBldCBjbGFpciDimqFcclxuICAgIHJldHVybiAnVm9jYWJ1bGFpcmUnOyAvLyBQYXIgZMOpZmF1dCBwb3VyIGNsYXNzaWNcclxuICB9O1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPEV4ZXJjaXNlSGVhZGVyXHJcbiAgICAgIHRpdGxlPXtnZXRUaXRsZSgpfVxyXG4gICAgICBsZXZlbD17bGV2ZWx9XHJcbiAgICAgIGV4ZXJjaXNlVHlwZT1cInZvY2FidWxhcnlcIiAvLyBNw6ptZSB0eXBlLCBzZXVsIGxlIG1vZGUgY2hhbmdlXHJcbiAgICAgIG9uQ2xvc2U9e29uQmFja1ByZXNzfVxyXG4gICAgICBiYWNrSWNvbj1cImFycm93LWJhY2tcIlxyXG4gICAgLz5cclxuICApO1xyXG59O1xyXG5cclxuLy8g4pyFIETDqWZpbml0aW9uIGRlIFByb3BUeXBlcyBwb3VyIGxhIHZhbGlkYXRpb24gZGVzIHByb3BzXHJcblZvY2FidWxhcnlIZWFkZXIucHJvcFR5cGVzID0ge1xyXG4gIC8vICdtb2RlJyBlc3QgbWFucXVhbnQgZGFucyBsYSB2YWxpZGF0aW9uXHJcbiAgbW9kZTogUHJvcFR5cGVzLm9uZU9mKFsnZmFzdCcsICdjbGFzc2ljJ10pLmlzUmVxdWlyZWQsXHJcbiAgLy8gJ29uQmFja1ByZXNzJyBlc3QgbWFucXVhbnQgZGFucyBsYSB2YWxpZGF0aW9uXHJcbiAgb25CYWNrUHJlc3M6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcbiAgLy8gJ2xldmVsJyBlc3QgbWFucXVhbnQgZGFucyBsYSB2YWxpZGF0aW9uXHJcbiAgbGV2ZWw6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFZvY2FidWxhcnlIZWFkZXI7Il0sIm1hcHBpbmdzIjoiOzs7OztBQUNBLElBQUFBLGVBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUFtQyxJQUFBRSxXQUFBLEdBQUFGLE9BQUE7QUFBQSxTQUFBRyxlQUFBO0VBQUEsSUFBQUMsSUFBQTtFQUFBLElBQUFDLElBQUE7RUFBQSxJQUFBQyxNQUFBLE9BQUFDLFFBQUE7RUFBQSxJQUFBQyxHQUFBO0VBQUEsSUFBQUMsWUFBQTtJQUFBTCxJQUFBO0lBQUFNLFlBQUE7TUFBQTtRQUFBQyxLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtJQUFBO0lBQUFFLEtBQUE7TUFBQTtRQUFBQyxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7SUFBQTtJQUFBTyxTQUFBO01BQUE7UUFBQUQsR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtJQUFBO0lBQUFXLENBQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtJQUFBO0lBQUFDLENBQUE7TUFBQTtNQUFBO0lBQUE7SUFBQUMsQ0FBQTtNQUFBO0lBQUE7SUFBQUMsZUFBQTtJQUFBckIsSUFBQTtFQUFBO0VBQUEsSUFBQXNCLFFBQUEsR0FBQXJCLE1BQUEsQ0FBQUUsR0FBQSxNQUFBRixNQUFBLENBQUFFLEdBQUE7RUFBQSxLQUFBbUIsUUFBQSxDQUFBdkIsSUFBQSxLQUFBdUIsUUFBQSxDQUFBdkIsSUFBQSxFQUFBQyxJQUFBLEtBQUFBLElBQUE7SUFBQXNCLFFBQUEsQ0FBQXZCLElBQUEsSUFBQUssWUFBQTtFQUFBO0VBQUEsSUFBQW1CLGNBQUEsR0FBQUQsUUFBQSxDQUFBdkIsSUFBQTtFQUFBO0lBQUFELGNBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUF5QixjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBekIsY0FBQTtBQUFBQSxjQUFBLEdBQUFvQixDQUFBO0FBU25DLElBQU1NLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBZ0JBLENBQUFDLElBQUEsRUFBcUM7RUFBQSxJQUEvQkMsS0FBSyxHQUFBRCxJQUFBLENBQUxDLEtBQUs7SUFBRUMsSUFBSSxHQUFBRixJQUFBLENBQUpFLElBQUk7SUFBRUMsV0FBVyxHQUFBSCxJQUFBLENBQVhHLFdBQVc7RUFBQTlCLGNBQUEsR0FBQXFCLENBQUE7RUFBQXJCLGNBQUEsR0FBQW9CLENBQUE7RUFFbEQsSUFBTVcsUUFBUSxHQUFHLFNBQVhBLFFBQVFBLENBQUEsRUFBUztJQUFBL0IsY0FBQSxHQUFBcUIsQ0FBQTtJQUFBckIsY0FBQSxHQUFBb0IsQ0FBQTtJQUNyQixJQUFJUyxJQUFJLEtBQUssTUFBTSxFQUFFO01BQUE3QixjQUFBLEdBQUFzQixDQUFBO01BQUF0QixjQUFBLEdBQUFvQixDQUFBO01BQUEsT0FBTyxNQUFNO0lBQUEsQ0FBQztNQUFBcEIsY0FBQSxHQUFBc0IsQ0FBQTtJQUFBO0lBQUF0QixjQUFBLEdBQUFvQixDQUFBO0lBQ25DLE9BQU8sYUFBYTtFQUN0QixDQUFDO0VBQUNwQixjQUFBLEdBQUFvQixDQUFBO0VBRUYsT0FDRSxJQUFBckIsV0FBQSxDQUFBaUMsR0FBQSxFQUFDckMsZUFBQSxDQUFBc0MsT0FBYztJQUNiQyxLQUFLLEVBQUVILFFBQVEsQ0FBQyxDQUFFO0lBQ2xCSCxLQUFLLEVBQUVBLEtBQU07SUFDYk8sWUFBWSxFQUFDLFlBQVk7SUFDekJDLE9BQU8sRUFBRU4sV0FBWTtJQUNyQk8sUUFBUSxFQUFDO0VBQVksQ0FDdEIsQ0FBQztBQUVOLENBQUM7QUFBQ3JDLGNBQUEsR0FBQW9CLENBQUE7QUFHRk0sZ0JBQWdCLENBQUNZLFNBQVMsR0FBRztFQUUzQlQsSUFBSSxFQUFFVSxrQkFBUyxDQUFDQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQ0MsVUFBVTtFQUVyRFgsV0FBVyxFQUFFUyxrQkFBUyxDQUFDRyxJQUFJLENBQUNELFVBQVU7RUFFdENiLEtBQUssRUFBRVcsa0JBQVMsQ0FBQ0ksTUFBTSxDQUFDRjtBQUMxQixDQUFDO0FBQUMsSUFBQUcsUUFBQSxHQUFBQyxPQUFBLENBQUFaLE9BQUEsR0FFYVAsZ0JBQWdCIiwiaWdub3JlTGlzdCI6W119