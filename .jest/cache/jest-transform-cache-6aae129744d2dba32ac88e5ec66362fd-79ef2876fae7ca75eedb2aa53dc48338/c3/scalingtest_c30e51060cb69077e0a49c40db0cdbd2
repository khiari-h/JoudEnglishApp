20d0f383fb4ae6ebd34e32f8dd0472a7
var _scaling = require("../../src/utils/scaling");
describe('scaling', function () {
  describe('Fonctions de base', function () {
    it('devrait exporter toutes les fonctions nécessaires', function () {
      expect(typeof _scaling.scale).toBe('function');
      expect(typeof _scaling.verticalScale).toBe('function');
      expect(typeof _scaling.moderateScale).toBe('function');
      expect(typeof _scaling.pixelRound).toBe('function');
    });
    it('devrait retourner des nombres pour scale', function () {
      var result = (0, _scaling.scale)(10);
      expect(typeof result).toBe('number');
      expect(isFinite(result)).toBe(true);
    });
    it('devrait retourner des nombres pour verticalScale', function () {
      var result = (0, _scaling.verticalScale)(10);
      expect(typeof result).toBe('number');
      expect(isFinite(result)).toBe(true);
    });
    it('devrait retourner des nombres pour moderateScale', function () {
      var result = (0, _scaling.moderateScale)(10);
      expect(typeof result).toBe('number');
      expect(isFinite(result)).toBe(true);
    });
    it('devrait retourner des nombres pour pixelRound', function () {
      var result = (0, _scaling.pixelRound)(10.5);
      expect(typeof result).toBe('number');
      expect(isFinite(result)).toBe(true);
    });
  });
  describe('Gestion des valeurs spéciales', function () {
    it('devrait gérer la valeur 0', function () {
      expect((0, _scaling.scale)(0)).toBe(0);
      expect((0, _scaling.verticalScale)(0)).toBe(0);
      expect((0, _scaling.moderateScale)(0)).toBe(0);
      expect((0, _scaling.pixelRound)(0)).toBe(0);
    });
    it('devrait gérer les valeurs négatives', function () {
      var negativeResult = (0, _scaling.scale)(-10);
      expect(typeof negativeResult).toBe('number');
      expect(isFinite(negativeResult)).toBe(true);
    });
    it('devrait gérer les valeurs décimales', function () {
      var decimalResult = (0, _scaling.scale)(10.5);
      expect(typeof decimalResult).toBe('number');
      expect(isFinite(decimalResult)).toBe(true);
    });
  });
  describe('moderateScale avec facteurs', function () {
    it('devrait accepter un facteur personnalisé', function () {
      var result1 = (0, _scaling.moderateScale)(20, 0);
      var result2 = (0, _scaling.moderateScale)(20, 1);
      var result3 = (0, _scaling.moderateScale)(20, 0.5);
      expect(typeof result1).toBe('number');
      expect(typeof result2).toBe('number');
      expect(typeof result3).toBe('number');
    });
    it('devrait utiliser le facteur par défaut', function () {
      var result = (0, _scaling.moderateScale)(20);
      expect(typeof result).toBe('number');
      expect(isFinite(result)).toBe(true);
    });
  });
  describe('Robustesse', function () {
    it('devrait gérer les très grandes valeurs', function () {
      var largeValue = 10000;
      expect(typeof (0, _scaling.scale)(largeValue)).toBe('number');
      expect(typeof (0, _scaling.verticalScale)(largeValue)).toBe('number');
      expect(typeof (0, _scaling.moderateScale)(largeValue)).toBe('number');
      expect(isFinite((0, _scaling.scale)(largeValue))).toBe(true);
    });
    it('devrait gérer les très petites valeurs', function () {
      var smallValue = 0.1;
      expect(typeof (0, _scaling.scale)(smallValue)).toBe('number');
      expect(typeof (0, _scaling.verticalScale)(smallValue)).toBe('number');
      expect(typeof (0, _scaling.moderateScale)(smallValue)).toBe('number');
      expect(isFinite((0, _scaling.scale)(smallValue))).toBe(true);
    });
    it('devrait être cohérent entre les appels', function () {
      var size = 15;
      var result1 = (0, _scaling.scale)(size);
      var result2 = (0, _scaling.scale)(size);
      expect(result1).toBe(result2);
    });
  });
  describe('Performance', function () {
    it('devrait être rapide pour de nombreux calculs', function () {
      var iterations = 100;
      var start = Date.now();
      for (var i = 0; i < iterations; i++) {
        (0, _scaling.scale)(10 + i);
        (0, _scaling.verticalScale)(10 + i);
        (0, _scaling.moderateScale)(10 + i);
        (0, _scaling.pixelRound)(10 + i);
      }
      var end = Date.now();
      var duration = end - start;
      expect(duration).toBeLessThan(1000);
    });
  });
  describe('Cas d\'usage réels', function () {
    it('devrait produire des résultats utilisables pour l\'UI', function () {
      var fontSize = (0, _scaling.scale)(16);
      var padding = (0, _scaling.moderateScale)(20);
      var iconSize = (0, _scaling.pixelRound)(24.5);
      expect(fontSize).toBeGreaterThan(0);
      expect(padding).toBeGreaterThan(0);
      expect(iconSize).toBeGreaterThan(0);
      expect(Number.isInteger(Math.round(fontSize))).toBe(true);
      expect(Number.isInteger(Math.round(padding))).toBe(true);
      expect(Number.isInteger(Math.round(iconSize))).toBe(true);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,