f24267a68513c6cabe06ec05ba6507e7
_getJestObj().mock('@expo/vector-icons', function () {
  var _require = require('react-native'),
    Text = _require.Text;
  return {
    Ionicons: function Ionicons(props) {
      return (0, _jsxRuntime.jsx)(Text, {
        testID: `icon-${props.name}`,
        children: props.name
      });
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _ExerciseFeedback = _interopRequireDefault(require("../../../src/components/exercise-common/ExerciseFeedback"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ExerciseFeedback', function () {
  var onDismissMock = jest.fn();
  var animatedTimingSpy;
  var animatedValueSpy;
  beforeAll(function () {
    jest.useFakeTimers();
  });
  afterAll(function () {
    jest.useRealTimers();
  });
  beforeEach(function () {
    animatedTimingSpy = jest.spyOn(_reactNative2.Animated, 'timing').mockImplementation(function () {
      return {
        start: jest.fn(function (callback) {
          if (callback) {
            callback({
              finished: true
            });
          }
        })
      };
    });
    animatedValueSpy = jest.spyOn(_reactNative2.Animated, 'Value').mockImplementation(function () {
      return {
        setValue: jest.fn(),
        addListener: jest.fn(),
        removeListener: jest.fn(),
        removeAllListeners: jest.fn(),
        stopAnimation: jest.fn(),
        resetAnimation: jest.fn(),
        _value: 0
      };
    });
  });
  afterEach(function () {
    onDismissMock.mockClear();
    animatedTimingSpy.mockRestore();
    animatedValueSpy.mockRestore();
    jest.clearAllMocks();
  });
  describe('Rendering and Content', function () {
    it('renders the message correctly', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
          message: "Correct!"
        })),
        getByText = _render.getByText;
      expect(getByText('Correct!')).toBeTruthy();
    });
    it('renders the explanation when provided', function () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
          message: "Incorrect",
          explanation: "The answer was X."
        })),
        getByText = _render2.getByText;
      expect(getByText('The answer was X.')).toBeTruthy();
    });
    it('does not render the explanation when not provided', function () {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
          message: "Correct!"
        })),
        queryByText = _render3.queryByText;
      expect(queryByText('The answer was X.')).toBeNull();
    });
  });
  describe('Icons and Button Behavior', function () {
    it('shows a success icon for type "success"', function () {
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
          message: "Success",
          type: "success"
        })),
        getByTestId = _render4.getByTestId;
      expect(getByTestId('icon-checkmark-circle')).toBeTruthy();
    });
    it('shows an error icon for type "error"', function () {
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
          message: "Error",
          type: "error"
        })),
        getByTestId = _render5.getByTestId;
      expect(getByTestId('icon-close-circle')).toBeTruthy();
    });
    it('shows an info icon for type "info" and for unknown type', function () {
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
          message: "Info",
          type: "info"
        })),
        getByTestId = _render6.getByTestId,
        rerender = _render6.rerender;
      expect(getByTestId('icon-information-circle')).toBeTruthy();
      rerender((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        message: "Test",
        type: "unknown"
      }));
      expect(getByTestId('icon-information-circle')).toBeTruthy();
    });
    it('calls onDismiss when the dismiss button is pressed', function () {
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
          message: "Test",
          onDismiss: onDismissMock,
          showDismissButton: true
        })),
        getByTestId = _render7.getByTestId;
      _reactNative.fireEvent.press(getByTestId('icon-close'));
      expect(onDismissMock).toHaveBeenCalledTimes(1);
    });
    it('does not show the dismiss button if showDismissButton is false', function () {
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
          message: "Test",
          showDismissButton: false
        })),
        queryByTestId = _render8.queryByTestId;
      expect(queryByTestId('icon-close')).toBeNull();
    });
  });
  describe('Dismissal Behavior', function () {
    it('calls onDismiss automatically when autoHide is true', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        message: "Hiding soon...",
        onDismiss: onDismissMock,
        autoHide: true,
        autoHideDuration: 5000
      }));
      (0, _reactNative.act)(function () {
        jest.runAllTimers();
      });
      expect(onDismissMock).toHaveBeenCalledTimes(1);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,