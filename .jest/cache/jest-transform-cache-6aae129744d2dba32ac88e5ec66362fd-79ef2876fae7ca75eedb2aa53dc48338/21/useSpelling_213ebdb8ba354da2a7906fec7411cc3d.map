{"version":3,"names":["_react","require","_reactNative","_asyncStorage","_interopRequireDefault","useSpelling","spellingData","arguments","length","undefined","level","exerciseType","_useState","useState","_useState2","_slicedToArray2","default","currentExerciseIndex","setCurrentExerciseIndex","_useState3","_useState4","userInput","setUserInput","_useState5","_useState6","showHint","setShowHint","_useState7","_useState8","showFeedback","setShowFeedback","_useState9","_useState0","isCorrect","setIsCorrect","_useState1","_useState10","completedExercises","setCompletedExercises","_useState11","_useState12","userAnswers","setUserAnswers","_useState13","_useState14","loaded","setLoaded","isInitialized","useRef","exercises","totalExercises","hasValidData","Boolean","Array","isArray","currentExercise","STORAGE_KEY","loadStoredData","useCallback","_asyncToGenerator2","saved","AsyncStorage","getItem","_data$lastPosition","data","JSON","parse","lastPosition","exerciseIndex","error","useEffect","current","saveToStorage","_ref2","dataToSave","setItem","stringify","_x","apply","resetExerciseState","toggleHint","prev","checkAnswer","correctAnswer","Alert","alert","correct","type","userAnswer","String","trim","toLowerCase","handleNext","newCompleted","includes","concat","_toConsumableArray2","newAnswer","timestamp","Date","now","newAnswers","completed","retryExercise","stats","completedExercisesCount","totalProgress","Math","round","remainingExercises","performance","total","filter","answer","incorrect","accuracy","isLastExercise","_default","exports"],"sources":["useSpelling.js"],"sourcesContent":["// hooks/useSpelling.js - BOUCLES INFINIES CORRIGÉES\r\n\r\nimport { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { Alert } from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nconst useSpelling = (spellingData = null, level = \"1\", exerciseType = \"correction\") => {\r\n\r\n  const [currentExerciseIndex, setCurrentExerciseIndex] = useState(0);\r\n  const [userInput, setUserInput] = useState('');\r\n  const [showHint, setShowHint] = useState(false);\r\n  const [showFeedback, setShowFeedback] = useState(false);\r\n  const [isCorrect, setIsCorrect] = useState(false);\r\n  const [completedExercises, setCompletedExercises] = useState([]);\r\n  const [userAnswers, setUserAnswers] = useState([]);\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  const isInitialized = useRef(false);\r\n\r\n  const exercises = spellingData?.exercises || [];\r\n  const totalExercises = exercises.length;\r\n  \r\n  const hasValidData = Boolean(spellingData?.exercises && \r\n    Array.isArray(spellingData.exercises) && \r\n    spellingData.exercises.length > 0);\r\n\r\n  const currentExercise = exercises[currentExerciseIndex] || null;\r\n  \r\n  // ✅ STORAGE_KEY STABLE\r\n  const STORAGE_KEY = `spelling_${level}_${exerciseType}`;\r\n\r\n  // ✅ FONCTION STABLE avec useCallback et dépendances fixes\r\n  const loadStoredData = useCallback(async () => {\r\n    try {\r\n      const saved = await AsyncStorage.getItem(STORAGE_KEY);\r\n      if (saved) {\r\n        const data = JSON.parse(saved);\r\n        \r\n        setCompletedExercises(data.completedExercises || []);\r\n        setUserAnswers(data.userAnswers || []);\r\n        \r\n        if (data.lastPosition?.exerciseIndex !== undefined && \r\n            data.lastPosition.exerciseIndex >= 0 && \r\n            data.lastPosition.exerciseIndex < totalExercises) {\r\n          setCurrentExerciseIndex(data.lastPosition.exerciseIndex);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Silently fail\r\n    } finally {\r\n      setLoaded(true);\r\n    }\r\n  }, [STORAGE_KEY]); // ✅ SEULEMENT STORAGE_KEY\r\n\r\n  // ✅ EFFET SIMPLIFIÉ - une seule fois\r\n  useEffect(() => {\r\n    if (!isInitialized.current) {\r\n      loadStoredData();\r\n      isInitialized.current = true;\r\n    }\r\n  }, [loadStoredData]);\r\n\r\n  // ✅ SAVE FONCTION STABLE\r\n  const saveToStorage = useCallback(async (dataToSave) => {\r\n    try {\r\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(dataToSave));\r\n    } catch (error) {\r\n      // Silently fail\r\n    }\r\n  }, [STORAGE_KEY]);\r\n\r\n  const resetExerciseState = useCallback(() => {\r\n    setUserInput('');\r\n    setShowHint(false);\r\n    setShowFeedback(false);\r\n    setIsCorrect(false);\r\n  }, []);\r\n\r\n  const toggleHint = useCallback(() => {\r\n    setShowHint(prev => !prev);\r\n  }, []);\r\n\r\n  const checkAnswer = useCallback(() => {\r\n    if (!currentExercise?.correctAnswer) {\r\n      Alert.alert('Erreur', 'Réponse correcte non définie');\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      let correct = false;\r\n\r\n      switch (currentExercise.type) {\r\n        case 'homophones':\r\n          correct = userInput === currentExercise.correctAnswer;\r\n          break;\r\n        case 'correction':\r\n        case 'spelling_rule':\r\n        default: {\r\n          const userAnswer = String(userInput).trim().toLowerCase();\r\n          const correctAnswer = String(currentExercise.correctAnswer).trim().toLowerCase();\r\n          correct = userAnswer === correctAnswer;\r\n          break;\r\n        }\r\n      }\r\n\r\n      setIsCorrect(correct);\r\n      setShowFeedback(true);\r\n      return correct;\r\n\r\n    } catch (error) {\r\n      setIsCorrect(false);\r\n      setShowFeedback(true);\r\n      return false;\r\n    }\r\n  }, [userInput, currentExercise]);\r\n\r\n  const handleNext = useCallback(() => {\r\n    // Marquer comme complété\r\n    const newCompleted = completedExercises.includes(currentExerciseIndex) \r\n      ? completedExercises \r\n      : [...completedExercises, currentExerciseIndex];\r\n\r\n    const newAnswer = {\r\n      exerciseIndex: currentExerciseIndex,\r\n      isCorrect,\r\n      userAnswer: userInput,\r\n      correctAnswer: currentExercise?.correctAnswer || '',\r\n      exerciseType: currentExercise?.type || 'correction',\r\n      timestamp: Date.now()\r\n    };\r\n\r\n    const newAnswers = [...userAnswers, newAnswer];\r\n\r\n    // Sauvegarder immédiatement\r\n    const dataToSave = {\r\n      completedExercises: newCompleted,\r\n      userAnswers: newAnswers,\r\n      lastPosition: {\r\n        exerciseIndex: currentExerciseIndex < totalExercises - 1 ? currentExerciseIndex + 1 : currentExerciseIndex,\r\n        exerciseType,\r\n        timestamp: Date.now()\r\n      }\r\n    };\r\n\r\n    saveToStorage(dataToSave);\r\n\r\n    // Mettre à jour les states\r\n    setCompletedExercises(newCompleted);\r\n    setUserAnswers(newAnswers);\r\n\r\n    if (currentExerciseIndex < totalExercises - 1) {\r\n      setCurrentExerciseIndex(prev => prev + 1);\r\n      resetExerciseState();\r\n    } else {\r\n      Alert.alert(\r\n        \"Félicitations\", \r\n        `Vous avez terminé tous les exercices d'orthographe ${exerciseType} du niveau ${level} !`\r\n      );\r\n      return { completed: true };\r\n    }\r\n    \r\n    return { completed: false };\r\n  }, [\r\n    currentExerciseIndex, \r\n    totalExercises, \r\n    isCorrect, \r\n    userInput, \r\n    currentExercise, \r\n    completedExercises, \r\n    userAnswers, \r\n    saveToStorage, \r\n    resetExerciseState, \r\n    exerciseType, \r\n    level\r\n  ]);\r\n\r\n  const retryExercise = useCallback(() => {\r\n    resetExerciseState();\r\n  }, [resetExerciseState]);\r\n\r\n  const stats = {\r\n    totalExercises,\r\n    completedExercisesCount: completedExercises.length,\r\n    totalProgress: totalExercises > 0 ? Math.round((completedExercises.length / totalExercises) * 100) : 0,\r\n    remainingExercises: totalExercises - completedExercises.length,\r\n    performance: {\r\n      total: userAnswers.length,\r\n      correct: userAnswers.filter(answer => answer.isCorrect).length,\r\n      incorrect: userAnswers.filter(answer => !answer.isCorrect).length,\r\n      accuracy: userAnswers.length > 0 ? Math.round((userAnswers.filter(answer => answer.isCorrect).length / userAnswers.length) * 100) : 0\r\n    },\r\n    completedExercises,\r\n    userAnswers\r\n  };\r\n\r\n  const isLastExercise = currentExerciseIndex === totalExercises - 1;\r\n\r\n  return {\r\n    currentExerciseIndex,\r\n    userInput,\r\n    showHint,\r\n    showFeedback,\r\n    isCorrect,\r\n    completedExercises,\r\n    userAnswers,\r\n    loaded,\r\n    currentExercise,\r\n    totalExercises,\r\n    exercises,\r\n    setUserInput,\r\n    toggleHint,\r\n    checkAnswer,\r\n    handleNext,\r\n    retryExercise,\r\n    resetExerciseState,\r\n    isLastExercise,\r\n    hasValidData,\r\n    stats,\r\n  };\r\n};\r\n\r\nexport default useSpelling;"],"mappings":";;;;;;;;AAEA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AACA,IAAAE,aAAA,GAAAC,sBAAA,CAAAH,OAAA;AAEA,IAAMI,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAsE;EAAA,IAAlEC,YAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAAA,IAAEG,KAAK,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,GAAG;EAAA,IAAEI,YAAY,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,YAAY;EAEhF,IAAAK,SAAA,GAAwD,IAAAC,eAAQ,EAAC,CAAC,CAAC;IAAAC,UAAA,OAAAC,eAAA,CAAAC,OAAA,EAAAJ,SAAA;IAA5DK,oBAAoB,GAAAH,UAAA;IAAEI,uBAAuB,GAAAJ,UAAA;EACpD,IAAAK,UAAA,GAAkC,IAAAN,eAAQ,EAAC,EAAE,CAAC;IAAAO,UAAA,OAAAL,eAAA,CAAAC,OAAA,EAAAG,UAAA;IAAvCE,SAAS,GAAAD,UAAA;IAAEE,YAAY,GAAAF,UAAA;EAC9B,IAAAG,UAAA,GAAgC,IAAAV,eAAQ,EAAC,KAAK,CAAC;IAAAW,UAAA,OAAAT,eAAA,CAAAC,OAAA,EAAAO,UAAA;IAAxCE,QAAQ,GAAAD,UAAA;IAAEE,WAAW,GAAAF,UAAA;EAC5B,IAAAG,UAAA,GAAwC,IAAAd,eAAQ,EAAC,KAAK,CAAC;IAAAe,UAAA,OAAAb,eAAA,CAAAC,OAAA,EAAAW,UAAA;IAAhDE,YAAY,GAAAD,UAAA;IAAEE,eAAe,GAAAF,UAAA;EACpC,IAAAG,UAAA,GAAkC,IAAAlB,eAAQ,EAAC,KAAK,CAAC;IAAAmB,UAAA,OAAAjB,eAAA,CAAAC,OAAA,EAAAe,UAAA;IAA1CE,SAAS,GAAAD,UAAA;IAAEE,YAAY,GAAAF,UAAA;EAC9B,IAAAG,UAAA,GAAoD,IAAAtB,eAAQ,EAAC,EAAE,CAAC;IAAAuB,WAAA,OAAArB,eAAA,CAAAC,OAAA,EAAAmB,UAAA;IAAzDE,kBAAkB,GAAAD,WAAA;IAAEE,qBAAqB,GAAAF,WAAA;EAChD,IAAAG,WAAA,GAAsC,IAAA1B,eAAQ,EAAC,EAAE,CAAC;IAAA2B,WAAA,OAAAzB,eAAA,CAAAC,OAAA,EAAAuB,WAAA;IAA3CE,WAAW,GAAAD,WAAA;IAAEE,cAAc,GAAAF,WAAA;EAClC,IAAAG,WAAA,GAA4B,IAAA9B,eAAQ,EAAC,KAAK,CAAC;IAAA+B,WAAA,OAAA7B,eAAA,CAAAC,OAAA,EAAA2B,WAAA;IAApCE,MAAM,GAAAD,WAAA;IAAEE,SAAS,GAAAF,WAAA;EAExB,IAAMG,aAAa,GAAG,IAAAC,aAAM,EAAC,KAAK,CAAC;EAEnC,IAAMC,SAAS,GAAG,CAAA3C,YAAY,oBAAZA,YAAY,CAAE2C,SAAS,KAAI,EAAE;EAC/C,IAAMC,cAAc,GAAGD,SAAS,CAACzC,MAAM;EAEvC,IAAM2C,YAAY,GAAGC,OAAO,CAAC,CAAA9C,YAAY,oBAAZA,YAAY,CAAE2C,SAAS,KAClDI,KAAK,CAACC,OAAO,CAAChD,YAAY,CAAC2C,SAAS,CAAC,IACrC3C,YAAY,CAAC2C,SAAS,CAACzC,MAAM,GAAG,CAAC,CAAC;EAEpC,IAAM+C,eAAe,GAAGN,SAAS,CAAChC,oBAAoB,CAAC,IAAI,IAAI;EAG/D,IAAMuC,WAAW,GAAG,YAAY9C,KAAK,IAAIC,YAAY,EAAE;EAGvD,IAAM8C,cAAc,GAAG,IAAAC,kBAAW,MAAAC,kBAAA,CAAA3C,OAAA,EAAC,aAAY;IAC7C,IAAI;MACF,IAAM4C,KAAK,SAASC,qBAAY,CAACC,OAAO,CAACN,WAAW,CAAC;MACrD,IAAII,KAAK,EAAE;QAAA,IAAAG,kBAAA;QACT,IAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACN,KAAK,CAAC;QAE9BtB,qBAAqB,CAAC0B,IAAI,CAAC3B,kBAAkB,IAAI,EAAE,CAAC;QACpDK,cAAc,CAACsB,IAAI,CAACvB,WAAW,IAAI,EAAE,CAAC;QAEtC,IAAI,EAAAsB,kBAAA,GAAAC,IAAI,CAACG,YAAY,qBAAjBJ,kBAAA,CAAmBK,aAAa,MAAK3D,SAAS,IAC9CuD,IAAI,CAACG,YAAY,CAACC,aAAa,IAAI,CAAC,IACpCJ,IAAI,CAACG,YAAY,CAACC,aAAa,GAAGlB,cAAc,EAAE;UACpDhC,uBAAuB,CAAC8C,IAAI,CAACG,YAAY,CAACC,aAAa,CAAC;QAC1D;MACF;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE,CAEhB,CAAC,SAAS;MACRvB,SAAS,CAAC,IAAI,CAAC;IACjB;EACF,CAAC,GAAE,CAACU,WAAW,CAAC,CAAC;EAGjB,IAAAc,gBAAS,EAAC,YAAM;IACd,IAAI,CAACvB,aAAa,CAACwB,OAAO,EAAE;MAC1Bd,cAAc,CAAC,CAAC;MAChBV,aAAa,CAACwB,OAAO,GAAG,IAAI;IAC9B;EACF,CAAC,EAAE,CAACd,cAAc,CAAC,CAAC;EAGpB,IAAMe,aAAa,GAAG,IAAAd,kBAAW;IAAA,IAAAe,KAAA,OAAAd,kBAAA,CAAA3C,OAAA,EAAC,WAAO0D,UAAU,EAAK;MACtD,IAAI;QACF,MAAMb,qBAAY,CAACc,OAAO,CAACnB,WAAW,EAAES,IAAI,CAACW,SAAS,CAACF,UAAU,CAAC,CAAC;MACrE,CAAC,CAAC,OAAOL,KAAK,EAAE,CAEhB;IACF,CAAC;IAAA,iBAAAQ,EAAA;MAAA,OAAAJ,KAAA,CAAAK,KAAA,OAAAvE,SAAA;IAAA;EAAA,KAAE,CAACiD,WAAW,CAAC,CAAC;EAEjB,IAAMuB,kBAAkB,GAAG,IAAArB,kBAAW,EAAC,YAAM;IAC3CpC,YAAY,CAAC,EAAE,CAAC;IAChBI,WAAW,CAAC,KAAK,CAAC;IAClBI,eAAe,CAAC,KAAK,CAAC;IACtBI,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAM8C,UAAU,GAAG,IAAAtB,kBAAW,EAAC,YAAM;IACnChC,WAAW,CAAC,UAAAuD,IAAI;MAAA,OAAI,CAACA,IAAI;IAAA,EAAC;EAC5B,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMC,WAAW,GAAG,IAAAxB,kBAAW,EAAC,YAAM;IACpC,IAAI,EAACH,eAAe,YAAfA,eAAe,CAAE4B,aAAa,GAAE;MACnCC,kBAAK,CAACC,KAAK,CAAC,QAAQ,EAAE,8BAA8B,CAAC;MACrD,OAAO,KAAK;IACd;IAEA,IAAI;MACF,IAAIC,OAAO,GAAG,KAAK;MAEnB,QAAQ/B,eAAe,CAACgC,IAAI;QAC1B,KAAK,YAAY;UACfD,OAAO,GAAGjE,SAAS,KAAKkC,eAAe,CAAC4B,aAAa;UACrD;QACF,KAAK,YAAY;QACjB,KAAK,eAAe;QACpB;UAAS;YACP,IAAMK,UAAU,GAAGC,MAAM,CAACpE,SAAS,CAAC,CAACqE,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;YACzD,IAAMR,aAAa,GAAGM,MAAM,CAAClC,eAAe,CAAC4B,aAAa,CAAC,CAACO,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;YAChFL,OAAO,GAAGE,UAAU,KAAKL,aAAa;YACtC;UACF;MACF;MAEAjD,YAAY,CAACoD,OAAO,CAAC;MACrBxD,eAAe,CAAC,IAAI,CAAC;MACrB,OAAOwD,OAAO;IAEhB,CAAC,CAAC,OAAOjB,KAAK,EAAE;MACdnC,YAAY,CAAC,KAAK,CAAC;MACnBJ,eAAe,CAAC,IAAI,CAAC;MACrB,OAAO,KAAK;IACd;EACF,CAAC,EAAE,CAACT,SAAS,EAAEkC,eAAe,CAAC,CAAC;EAEhC,IAAMqC,UAAU,GAAG,IAAAlC,kBAAW,EAAC,YAAM;IAEnC,IAAMmC,YAAY,GAAGxD,kBAAkB,CAACyD,QAAQ,CAAC7E,oBAAoB,CAAC,GAClEoB,kBAAkB,MAAA0D,MAAA,KAAAC,mBAAA,CAAAhF,OAAA,EACdqB,kBAAkB,IAAEpB,oBAAoB,EAAC;IAEjD,IAAMgF,SAAS,GAAG;MAChB7B,aAAa,EAAEnD,oBAAoB;MACnCgB,SAAS,EAATA,SAAS;MACTuD,UAAU,EAAEnE,SAAS;MACrB8D,aAAa,EAAE,CAAA5B,eAAe,oBAAfA,eAAe,CAAE4B,aAAa,KAAI,EAAE;MACnDxE,YAAY,EAAE,CAAA4C,eAAe,oBAAfA,eAAe,CAAEgC,IAAI,KAAI,YAAY;MACnDW,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;IACtB,CAAC;IAED,IAAMC,UAAU,MAAAN,MAAA,KAAAC,mBAAA,CAAAhF,OAAA,EAAOyB,WAAW,IAAEwD,SAAS,EAAC;IAG9C,IAAMvB,UAAU,GAAG;MACjBrC,kBAAkB,EAAEwD,YAAY;MAChCpD,WAAW,EAAE4D,UAAU;MACvBlC,YAAY,EAAE;QACZC,aAAa,EAAEnD,oBAAoB,GAAGiC,cAAc,GAAG,CAAC,GAAGjC,oBAAoB,GAAG,CAAC,GAAGA,oBAAoB;QAC1GN,YAAY,EAAZA,YAAY;QACZuF,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;MACtB;IACF,CAAC;IAED5B,aAAa,CAACE,UAAU,CAAC;IAGzBpC,qBAAqB,CAACuD,YAAY,CAAC;IACnCnD,cAAc,CAAC2D,UAAU,CAAC;IAE1B,IAAIpF,oBAAoB,GAAGiC,cAAc,GAAG,CAAC,EAAE;MAC7ChC,uBAAuB,CAAC,UAAA+D,IAAI;QAAA,OAAIA,IAAI,GAAG,CAAC;MAAA,EAAC;MACzCF,kBAAkB,CAAC,CAAC;IACtB,CAAC,MAAM;MACLK,kBAAK,CAACC,KAAK,CACT,eAAe,EACf,sDAAsD1E,YAAY,cAAcD,KAAK,IACvF,CAAC;MACD,OAAO;QAAE4F,SAAS,EAAE;MAAK,CAAC;IAC5B;IAEA,OAAO;MAAEA,SAAS,EAAE;IAAM,CAAC;EAC7B,CAAC,EAAE,CACDrF,oBAAoB,EACpBiC,cAAc,EACdjB,SAAS,EACTZ,SAAS,EACTkC,eAAe,EACflB,kBAAkB,EAClBI,WAAW,EACX+B,aAAa,EACbO,kBAAkB,EAClBpE,YAAY,EACZD,KAAK,CACN,CAAC;EAEF,IAAM6F,aAAa,GAAG,IAAA7C,kBAAW,EAAC,YAAM;IACtCqB,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,CAACA,kBAAkB,CAAC,CAAC;EAExB,IAAMyB,KAAK,GAAG;IACZtD,cAAc,EAAdA,cAAc;IACduD,uBAAuB,EAAEpE,kBAAkB,CAAC7B,MAAM;IAClDkG,aAAa,EAAExD,cAAc,GAAG,CAAC,GAAGyD,IAAI,CAACC,KAAK,CAAEvE,kBAAkB,CAAC7B,MAAM,GAAG0C,cAAc,GAAI,GAAG,CAAC,GAAG,CAAC;IACtG2D,kBAAkB,EAAE3D,cAAc,GAAGb,kBAAkB,CAAC7B,MAAM;IAC9DsG,WAAW,EAAE;MACXC,KAAK,EAAEtE,WAAW,CAACjC,MAAM;MACzB8E,OAAO,EAAE7C,WAAW,CAACuE,MAAM,CAAC,UAAAC,MAAM;QAAA,OAAIA,MAAM,CAAChF,SAAS;MAAA,EAAC,CAACzB,MAAM;MAC9D0G,SAAS,EAAEzE,WAAW,CAACuE,MAAM,CAAC,UAAAC,MAAM;QAAA,OAAI,CAACA,MAAM,CAAChF,SAAS;MAAA,EAAC,CAACzB,MAAM;MACjE2G,QAAQ,EAAE1E,WAAW,CAACjC,MAAM,GAAG,CAAC,GAAGmG,IAAI,CAACC,KAAK,CAAEnE,WAAW,CAACuE,MAAM,CAAC,UAAAC,MAAM;QAAA,OAAIA,MAAM,CAAChF,SAAS;MAAA,EAAC,CAACzB,MAAM,GAAGiC,WAAW,CAACjC,MAAM,GAAI,GAAG,CAAC,GAAG;IACtI,CAAC;IACD6B,kBAAkB,EAAlBA,kBAAkB;IAClBI,WAAW,EAAXA;EACF,CAAC;EAED,IAAM2E,cAAc,GAAGnG,oBAAoB,KAAKiC,cAAc,GAAG,CAAC;EAElE,OAAO;IACLjC,oBAAoB,EAApBA,oBAAoB;IACpBI,SAAS,EAATA,SAAS;IACTI,QAAQ,EAARA,QAAQ;IACRI,YAAY,EAAZA,YAAY;IACZI,SAAS,EAATA,SAAS;IACTI,kBAAkB,EAAlBA,kBAAkB;IAClBI,WAAW,EAAXA,WAAW;IACXI,MAAM,EAANA,MAAM;IACNU,eAAe,EAAfA,eAAe;IACfL,cAAc,EAAdA,cAAc;IACdD,SAAS,EAATA,SAAS;IACT3B,YAAY,EAAZA,YAAY;IACZ0D,UAAU,EAAVA,UAAU;IACVE,WAAW,EAAXA,WAAW;IACXU,UAAU,EAAVA,UAAU;IACVW,aAAa,EAAbA,aAAa;IACbxB,kBAAkB,EAAlBA,kBAAkB;IAClBqC,cAAc,EAAdA,cAAc;IACdjE,YAAY,EAAZA,YAAY;IACZqD,KAAK,EAALA;EACF,CAAC;AACH,CAAC;AAAC,IAAAa,QAAA,GAAAC,OAAA,CAAAtG,OAAA,GAEaX,WAAW","ignoreList":[]}