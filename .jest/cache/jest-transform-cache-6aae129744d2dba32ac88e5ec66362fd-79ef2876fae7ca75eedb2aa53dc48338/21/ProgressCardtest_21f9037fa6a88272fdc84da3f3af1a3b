17a534597ffbeca6bb1937fbac4c4b80
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ProgressCard = _interopRequireDefault(require("../../../src/components/ui/ProgressCard"));
var _jsxRuntime = require("react/jsx-runtime");
describe('ProgressCard', function () {
  it('renders correctly with default props', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressCard.default, {}));
    expect(_reactNative.screen.getByText('Progression')).toBeOnTheScreen();
    expect(_reactNative.screen.getByText('0/0')).toBeOnTheScreen();
    expect(_reactNative.screen.getByText('0%')).toBeOnTheScreen();
  });
  it('renders with custom title and subtitle', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressCard.default, {
      title: "My Progress",
      subtitle: "Daily Goals"
    }));
    expect(_reactNative.screen.getByText('My Progress')).toBeOnTheScreen();
    expect(_reactNative.screen.getByText('Daily Goals')).toBeOnTheScreen();
  });
  it('displays correct progress values', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressCard.default, {
      progress: 50,
      completed: 5,
      total: 10
    }));
    expect(_reactNative.screen.getByText('5/10')).toBeOnTheScreen();
    expect(_reactNative.screen.getByText('50%')).toBeOnTheScreen();
  });
  it('expands and collapses when expandable and onToggleExpand are provided', function () {
    var handleToggleExpand = jest.fn();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressCard.default, {
      expandable: true,
      expanded: false,
      onToggleExpand: handleToggleExpand,
      categoryData: [{
        id: '1',
        title: 'Category 1',
        completed: 1,
        total: 2,
        progress: 50
      }]
    }));
    expect(_reactNative.screen.queryByText('Par catégorie')).toBeNull();
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Progression'));
    expect(handleToggleExpand).toHaveBeenCalledTimes(1);
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressCard.default, {
      expandable: true,
      expanded: true,
      onToggleExpand: handleToggleExpand,
      categoryData: [{
        id: '1',
        title: 'Category 1',
        completed: 1,
        total: 2,
        progress: 50
      }]
    }));
    expect(_reactNative.screen.getByText('Par catégorie')).toBeOnTheScreen();
    expect(_reactNative.screen.getByText('Category 1')).toBeOnTheScreen();
  });
  it('calls onCategoryPress when a category is pressed', function () {
    var handleCategoryPress = jest.fn();
    var categoryData = [{
      id: '1',
      title: 'Category 1',
      completed: 1,
      total: 2,
      progress: 50
    }];
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressCard.default, {
      expandable: true,
      expanded: true,
      categoryData: categoryData,
      onCategoryPress: handleCategoryPress
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Category 1'));
    expect(handleCategoryPress).toHaveBeenCalledWith(0);
  });
  it('does not expand when expandable is false', function () {
    var handleToggleExpand = jest.fn();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressCard.default, {
      expandable: false,
      onToggleExpand: handleToggleExpand,
      categoryData: [{
        id: '1',
        title: 'Category 1',
        completed: 1,
        total: 2,
        progress: 50
      }]
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Progression'));
    expect(handleToggleExpand).not.toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9Qcm9ncmVzc0NhcmQiLCJfanN4UnVudGltZSIsImRlc2NyaWJlIiwiaXQiLCJyZW5kZXIiLCJqc3giLCJkZWZhdWx0IiwiZXhwZWN0Iiwic2NyZWVuIiwiZ2V0QnlUZXh0IiwidG9CZU9uVGhlU2NyZWVuIiwidGl0bGUiLCJzdWJ0aXRsZSIsInByb2dyZXNzIiwiY29tcGxldGVkIiwidG90YWwiLCJoYW5kbGVUb2dnbGVFeHBhbmQiLCJqZXN0IiwiZm4iLCJleHBhbmRhYmxlIiwiZXhwYW5kZWQiLCJvblRvZ2dsZUV4cGFuZCIsImNhdGVnb3J5RGF0YSIsImlkIiwicXVlcnlCeVRleHQiLCJ0b0JlTnVsbCIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIiwiaGFuZGxlQ2F0ZWdvcnlQcmVzcyIsIm9uQ2F0ZWdvcnlQcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwibm90IiwidG9IYXZlQmVlbkNhbGxlZCJdLCJzb3VyY2VzIjpbIlByb2dyZXNzQ2FyZC50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiwgZmlyZUV2ZW50IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IFByb2dyZXNzQ2FyZCBmcm9tICcuLi8uLi8uLi9zcmMvY29tcG9uZW50cy91aS9Qcm9ncmVzc0NhcmQnO1xuXG5kZXNjcmliZSgnUHJvZ3Jlc3NDYXJkJywgKCkgPT4ge1xuICBpdCgncmVuZGVycyBjb3JyZWN0bHkgd2l0aCBkZWZhdWx0IHByb3BzJywgKCkgPT4ge1xuICAgIHJlbmRlcig8UHJvZ3Jlc3NDYXJkIC8+KTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnUHJvZ3Jlc3Npb24nKSkudG9CZU9uVGhlU2NyZWVuKCk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJzAvMCcpKS50b0JlT25UaGVTY3JlZW4oKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnMCUnKSkudG9CZU9uVGhlU2NyZWVuKCk7XG4gIH0pO1xuXG4gIGl0KCdyZW5kZXJzIHdpdGggY3VzdG9tIHRpdGxlIGFuZCBzdWJ0aXRsZScsICgpID0+IHtcbiAgICByZW5kZXIoPFByb2dyZXNzQ2FyZCB0aXRsZT1cIk15IFByb2dyZXNzXCIgc3VidGl0bGU9XCJEYWlseSBHb2Fsc1wiIC8+KTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnTXkgUHJvZ3Jlc3MnKSkudG9CZU9uVGhlU2NyZWVuKCk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0RhaWx5IEdvYWxzJykpLnRvQmVPblRoZVNjcmVlbigpO1xuICB9KTtcblxuICBpdCgnZGlzcGxheXMgY29ycmVjdCBwcm9ncmVzcyB2YWx1ZXMnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxQcm9ncmVzc0NhcmQgcHJvZ3Jlc3M9ezUwfSBjb21wbGV0ZWQ9ezV9IHRvdGFsPXsxMH0gLz4pO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCc1LzEwJykpLnRvQmVPblRoZVNjcmVlbigpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCc1MCUnKSkudG9CZU9uVGhlU2NyZWVuKCk7XG4gIH0pO1xuXG4gIGl0KCdleHBhbmRzIGFuZCBjb2xsYXBzZXMgd2hlbiBleHBhbmRhYmxlIGFuZCBvblRvZ2dsZUV4cGFuZCBhcmUgcHJvdmlkZWQnLCAoKSA9PiB7XG4gICAgY29uc3QgaGFuZGxlVG9nZ2xlRXhwYW5kID0gamVzdC5mbigpO1xuICAgIHJlbmRlcihcbiAgICAgIDxQcm9ncmVzc0NhcmRcbiAgICAgICAgZXhwYW5kYWJsZT17dHJ1ZX1cbiAgICAgICAgZXhwYW5kZWQ9e2ZhbHNlfVxuICAgICAgICBvblRvZ2dsZUV4cGFuZD17aGFuZGxlVG9nZ2xlRXhwYW5kfVxuICAgICAgICBjYXRlZ29yeURhdGE9e1t7IGlkOiAnMScsIHRpdGxlOiAnQ2F0ZWdvcnkgMScsIGNvbXBsZXRlZDogMSwgdG90YWw6IDIsIHByb2dyZXNzOiA1MCB9XX1cbiAgICAgIC8+XG4gICAgKTtcblxuICAgIC8vIEluaXRpYWxseSBjb2xsYXBzZWQsIGNhdGVnb3J5IGRhdGEgc2hvdWxkIG5vdCBiZSB2aXNpYmxlXG4gICAgZXhwZWN0KHNjcmVlbi5xdWVyeUJ5VGV4dCgnUGFyIGNhdMOpZ29yaWUnKSkudG9CZU51bGwoKTtcblxuICAgIC8vIFRhcCB0byBleHBhbmRcbiAgICBmaXJlRXZlbnQucHJlc3Moc2NyZWVuLmdldEJ5VGV4dCgnUHJvZ3Jlc3Npb24nKSk7XG4gICAgZXhwZWN0KGhhbmRsZVRvZ2dsZUV4cGFuZCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuXG4gICAgLy8gUmUtcmVuZGVyIHdpdGggZXhwYW5kZWQgc3RhdGVcbiAgICByZW5kZXIoXG4gICAgICA8UHJvZ3Jlc3NDYXJkXG4gICAgICAgIGV4cGFuZGFibGU9e3RydWV9XG4gICAgICAgIGV4cGFuZGVkPXt0cnVlfVxuICAgICAgICBvblRvZ2dsZUV4cGFuZD17aGFuZGxlVG9nZ2xlRXhwYW5kfVxuICAgICAgICBjYXRlZ29yeURhdGE9e1t7IGlkOiAnMScsIHRpdGxlOiAnQ2F0ZWdvcnkgMScsIGNvbXBsZXRlZDogMSwgdG90YWw6IDIsIHByb2dyZXNzOiA1MCB9XX1cbiAgICAgIC8+XG4gICAgKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnUGFyIGNhdMOpZ29yaWUnKSkudG9CZU9uVGhlU2NyZWVuKCk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0NhdGVnb3J5IDEnKSkudG9CZU9uVGhlU2NyZWVuKCk7XG4gIH0pO1xuXG4gIGl0KCdjYWxscyBvbkNhdGVnb3J5UHJlc3Mgd2hlbiBhIGNhdGVnb3J5IGlzIHByZXNzZWQnLCAoKSA9PiB7XG4gICAgY29uc3QgaGFuZGxlQ2F0ZWdvcnlQcmVzcyA9IGplc3QuZm4oKTtcbiAgICBjb25zdCBjYXRlZ29yeURhdGEgPSBbeyBpZDogJzEnLCB0aXRsZTogJ0NhdGVnb3J5IDEnLCBjb21wbGV0ZWQ6IDEsIHRvdGFsOiAyLCBwcm9ncmVzczogNTAgfV07XG4gICAgcmVuZGVyKFxuICAgICAgPFByb2dyZXNzQ2FyZFxuICAgICAgICBleHBhbmRhYmxlPXt0cnVlfVxuICAgICAgICBleHBhbmRlZD17dHJ1ZX1cbiAgICAgICAgY2F0ZWdvcnlEYXRhPXtjYXRlZ29yeURhdGF9XG4gICAgICAgIG9uQ2F0ZWdvcnlQcmVzcz17aGFuZGxlQ2F0ZWdvcnlQcmVzc31cbiAgICAgIC8+XG4gICAgKTtcblxuICAgIGZpcmVFdmVudC5wcmVzcyhzY3JlZW4uZ2V0QnlUZXh0KCdDYXRlZ29yeSAxJykpO1xuICAgIGV4cGVjdChoYW5kbGVDYXRlZ29yeVByZXNzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgwKTtcbiAgfSk7XG5cbiAgaXQoJ2RvZXMgbm90IGV4cGFuZCB3aGVuIGV4cGFuZGFibGUgaXMgZmFsc2UnLCAoKSA9PiB7XG4gICAgY29uc3QgaGFuZGxlVG9nZ2xlRXhwYW5kID0gamVzdC5mbigpO1xuICAgIHJlbmRlcihcbiAgICAgIDxQcm9ncmVzc0NhcmRcbiAgICAgICAgZXhwYW5kYWJsZT17ZmFsc2V9XG4gICAgICAgIG9uVG9nZ2xlRXhwYW5kPXtoYW5kbGVUb2dnbGVFeHBhbmR9XG4gICAgICAgIGNhdGVnb3J5RGF0YT17W3sgaWQ6ICcxJywgdGl0bGU6ICdDYXRlZ29yeSAxJywgY29tcGxldGVkOiAxLCB0b3RhbDogMiwgcHJvZ3Jlc3M6IDUwIH1dfVxuICAgICAgLz5cbiAgICApO1xuXG4gICAgZmlyZUV2ZW50LnByZXNzKHNjcmVlbi5nZXRCeVRleHQoJ1Byb2dyZXNzaW9uJykpO1xuICAgIGV4cGVjdChoYW5kbGVUb2dnbGVFeHBhbmQpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7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