4a2b9369077837e83b0edd88bd4551db
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isBonusLevel = exports.getVocabularyStats = exports.getVocabularyData = exports.getLevelIcon = exports.getLevelDisplayName = exports.getLevelDescription = exports.getLevelColor = exports.getAvailableLevels = exports.formatVocabularyList = void 0;
var _ = _interopRequireDefault(require("../../data/vocabulary/1"));
var _2 = _interopRequireDefault(require("../../data/vocabulary/2"));
var _3 = _interopRequireDefault(require("../../data/vocabulary/3"));
var _4 = _interopRequireDefault(require("../../data/vocabulary/4"));
var _5 = _interopRequireDefault(require("../../data/vocabulary/5"));
var _6 = _interopRequireDefault(require("../../data/vocabulary/6"));
var _bonus = _interopRequireDefault(require("../../data/vocabulary/bonus"));
var _7 = require("../../data/fastVocabulary/1");
var _8 = require("../../data/fastVocabulary/2");
var _9 = require("../../data/fastVocabulary/3");
var _0 = require("../../data/fastVocabulary/4");
var _1 = require("../../data/fastVocabulary/5");
var _10 = require("../../data/fastVocabulary/6");
var _bonus2 = require("../../data/fastVocabulary/bonus");
var formatVocabularyList = exports.formatVocabularyList = function formatVocabularyList() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return data.map(function (entry) {
    return {
      word: entry.word,
      translation: entry.translation
    };
  });
};
var convertFastVocabToExercises = function convertFastVocabToExercises(fastVocab) {
  if (!fastVocab || !fastVocab.words) {
    return {
      exercises: []
    };
  }
  return {
    exercises: [{
      title: fastVocab.title || "Vocabulaire Fast",
      words: fastVocab.words
    }]
  };
};
var getVocabularyData = exports.getVocabularyData = function getVocabularyData(level) {
  var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "classic";
  if (mode === "fast") {
    var fastDataMap = {
      "1": convertFastVocabToExercises(_7.vocab),
      "2": convertFastVocabToExercises(_8.vocab),
      "3": convertFastVocabToExercises(_9.vocab),
      "4": convertFastVocabToExercises(_0.vocab),
      "5": convertFastVocabToExercises(_1.vocab),
      "6": convertFastVocabToExercises(_10.vocab),
      "bonus": convertFastVocabToExercises(_bonus2.vocab)
    };
    return fastDataMap[level] || convertFastVocabToExercises(_7.vocab);
  }
  var classicDataMap = {
    "1": _.default,
    "2": _2.default,
    "3": _3.default,
    "4": _4.default,
    "5": _5.default,
    "6": _6.default,
    "bonus": _bonus.default
  };
  return classicDataMap[level] || _.default;
};
var getAvailableLevels = exports.getAvailableLevels = function getAvailableLevels() {
  return ["1", "2", "3", "4", "5", "6", "bonus"];
};
var getLevelColor = exports.getLevelColor = function getLevelColor(level) {
  var colors = {
    "1": "#3b82f6",
    "2": "#8b5cf6",
    "3": "#10b981",
    "4": "#f59e0b",
    "5": "#ef4444",
    "6": "#6366f1",
    "bonus": "#9333EA"
  };
  return colors[level] || "#5E60CE";
};
var getLevelDisplayName = exports.getLevelDisplayName = function getLevelDisplayName(level) {
  var displayNames = {
    "1": "Niveau 1",
    "2": "Niveau 2",
    "3": "Niveau 3",
    "4": "Niveau 4",
    "5": "Niveau 5",
    "6": "Niveau 6",
    "bonus": "Bonus"
  };
  return displayNames[level] || `Niveau ${level}`;
};
var getLevelDescription = exports.getLevelDescription = function getLevelDescription(level) {
  var descriptions = {
    "1": "Communication basique, expressions simples du quotidien",
    "2": "Expressions simples, conversations courantes",
    "3": "Communication claire sur des sujets familiers",
    "4": "Communication complexe, discussions techniques",
    "5": "Expression fluide, sujets complexes",
    "6": "Niveau proche du locuteur natif, maîtrise de la langue",
    "bonus": "Contenu exclusif et avancé"
  };
  return descriptions[level] || "Niveau de langue";
};
var getLevelIcon = exports.getLevelIcon = function getLevelIcon(level) {
  var icons = {
    "1": "🌱",
    "2": "🌿",
    "3": "🌳",
    "4": "🚀",
    "5": "💎",
    "6": "🏆",
    "bonus": "🔥"
  };
  return icons[level] || "📚";
};
var isBonusLevel = exports.isBonusLevel = function isBonusLevel(level) {
  return level === "bonus";
};
var getVocabularyStats = exports.getVocabularyStats = function getVocabularyStats(level) {
  var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "classic";
  var data = getVocabularyData(level, mode);
  if (!data || !data.exercises) {
    return {
      totalWords: 0,
      totalExercises: 0
    };
  }
  var totalExercises = data.exercises.length;
  var totalWords = data.exercises.reduce(function (sum, exercise) {
    return sum + (exercise.words ? exercise.words.length : 0);
  }, 0);
  return {
    totalWords: totalWords,
    totalExercises: totalExercises,
    averageWordsPerExercise: totalExercises > 0 ? Math.round(totalWords / totalExercises) : 0
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,