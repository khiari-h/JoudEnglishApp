a5557bd90eee28481f5f3b88acd28279
'use client';
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _jsxRuntime = require("react/jsx-runtime");
var _react = require("react");
var _excluded = ["ErrorBoundary"],
  _excluded2 = ["route", "navigation"],
  _excluded3 = ["options"];
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.routeToScreen = exports.screenOptionsFactory = exports.createGetIdForRoute = exports.getQualifiedRouteComponent = exports.useSortedScreens = void 0;
var react_1 = __importDefault(require("react"));
var Route_1 = require("./Route");
var import_mode_1 = __importDefault(require("./import-mode"));
var primitives_1 = require("./primitives");
var EmptyRoute_1 = require("./views/EmptyRoute");
var SuspenseFallback_1 = require("./views/SuspenseFallback");
var Try_1 = require("./views/Try");
function getSortedChildren(children, order, initialRouteName) {
  if (!(order != null && order.length)) {
    return children.sort((0, Route_1.sortRoutesWithInitial)(initialRouteName)).map(function (route) {
      return {
        route: route,
        props: {}
      };
    });
  }
  var entries = (0, _toConsumableArray2.default)(children);
  var ordered = order.map(function (_ref) {
    var name = _ref.name,
      redirect = _ref.redirect,
      initialParams = _ref.initialParams,
      listeners = _ref.listeners,
      options = _ref.options,
      getId = _ref.getId;
    if (!entries.length) {
      console.warn(`[Layout children]: Too many screens defined. Route "${name}" is extraneous.`);
      return null;
    }
    var matchIndex = entries.findIndex(function (child) {
      return child.route === name;
    });
    if (matchIndex === -1) {
      console.warn(`[Layout children]: No route named "${name}" exists in nested children:`, children.map(function (_ref2) {
        var route = _ref2.route;
        return route;
      }));
      return null;
    } else {
      var match = entries[matchIndex];
      entries.splice(matchIndex, 1);
      if (redirect) {
        if (typeof redirect === 'string') {
          throw new Error(`Redirecting to a specific route is not supported yet.`);
        }
        return null;
      }
      return {
        route: match,
        props: {
          initialParams: initialParams,
          listeners: listeners,
          options: options,
          getId: getId
        }
      };
    }
  }).filter(Boolean);
  ordered.push.apply(ordered, (0, _toConsumableArray2.default)(entries.sort((0, Route_1.sortRoutesWithInitial)(initialRouteName)).map(function (route) {
    return {
      route: route,
      props: {}
    };
  })));
  return ordered;
}
function useSortedScreens(order) {
  var _node$children;
  var node = (0, Route_1.useRouteNode)();
  var sorted = node != null && (_node$children = node.children) != null && _node$children.length ? getSortedChildren(node.children, order, node.initialRouteName) : [];
  return react_1.default.useMemo(function () {
    return sorted.map(function (value) {
      return routeToScreen(value.route, value.props);
    });
  }, [sorted]);
}
exports.useSortedScreens = useSortedScreens;
function fromImport(_ref3) {
  var ErrorBoundary = _ref3.ErrorBoundary,
    component = (0, _objectWithoutProperties2.default)(_ref3, _excluded);
  if (ErrorBoundary) {
    return {
      default: react_1.default.forwardRef(function (props, ref) {
        var children = react_1.default.createElement(component.default || EmptyRoute_1.EmptyRoute, Object.assign({}, props, {
          ref: ref
        }));
        return (0, _jsxRuntime.jsx)(Try_1.Try, {
          catch: ErrorBoundary,
          children: children
        });
      })
    };
  }
  if (process.env.NODE_ENV !== 'production') {
    if (typeof component.default === 'object' && component.default && Object.keys(component.default).length === 0) {
      return {
        default: EmptyRoute_1.EmptyRoute
      };
    }
  }
  return {
    default: component.default
  };
}
function fromLoadedRoute(res) {
  if (!(res instanceof Promise)) {
    return fromImport(res);
  }
  return res.then(fromImport);
}
var qualifiedStore = new WeakMap();
function getQualifiedRouteComponent(value) {
  if (qualifiedStore.has(value)) {
    return qualifiedStore.get(value);
  }
  var ScreenComponent;
  if (import_mode_1.default === 'lazy') {
    ScreenComponent = react_1.default.lazy((0, _asyncToGenerator2.default)(function* () {
      var res = value.loadRoute();
      return fromLoadedRoute(res);
    }));
  } else {
    var res = value.loadRoute();
    var Component = fromImport(res).default;
    ScreenComponent = react_1.default.forwardRef(function (props, ref) {
      return (0, _jsxRuntime.jsx)(Component, Object.assign({}, props, {
        ref: ref
      }));
    });
  }
  var getLoadable = function getLoadable(props, ref) {
    return (0, _jsxRuntime.jsx)(react_1.default.Suspense, {
      fallback: (0, _jsxRuntime.jsx)(SuspenseFallback_1.SuspenseFallback, {
        route: value
      }),
      children: (0, _jsxRuntime.jsx)(ScreenComponent, Object.assign({}, Object.assign({}, props, {
        ref: ref,
        segment: value.route
      })))
    });
  };
  var QualifiedRoute = react_1.default.forwardRef(function (_ref5, ref) {
    var route = _ref5.route,
      navigation = _ref5.navigation,
      props = (0, _objectWithoutProperties2.default)(_ref5, _excluded2);
    var loadable = getLoadable(props, ref);
    return (0, _jsxRuntime.jsx)(Route_1.Route, {
      node: value,
      route: route,
      children: loadable
    });
  });
  QualifiedRoute.displayName = `Route(${value.route})`;
  qualifiedStore.set(value, QualifiedRoute);
  return QualifiedRoute;
}
exports.getQualifiedRouteComponent = getQualifiedRouteComponent;
function createGetIdForRoute(route) {
  var include = new Map();
  if (route.dynamic) {
    for (var segment of route.dynamic) {
      include.set(segment.name, segment);
    }
  }
  return function () {
    var _segments$join;
    var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref6$params = _ref6.params,
      params = _ref6$params === void 0 ? {} : _ref6$params;
    if (params.__EXPO_ROUTER_key) {
      var key = params.__EXPO_ROUTER_key;
      delete params.__EXPO_ROUTER_key;
      return key;
    }
    var segments = [];
    for (var dynamic of include.values()) {
      var value = params == null ? void 0 : params[dynamic.name];
      if (Array.isArray(value) && value.length > 0) {
        segments.push(value.join('/'));
      } else if (value && !Array.isArray(value)) {
        segments.push(value);
      } else if (dynamic.deep) {
        segments.push(`[...${dynamic.name}]`);
      } else {
        segments.push(`[${dynamic.name}]`);
      }
    }
    return (_segments$join = segments.join('/')) != null ? _segments$join : route.contextKey;
  };
}
exports.createGetIdForRoute = createGetIdForRoute;
function screenOptionsFactory(route, options) {
  return function (args) {
    var _route$loadRoute;
    var staticOptions = route.generated ? (_route$loadRoute = route.loadRoute()) == null ? void 0 : _route$loadRoute.getNavOptions : null;
    var staticResult = typeof staticOptions === 'function' ? staticOptions(args) : staticOptions;
    var dynamicResult = typeof options === 'function' ? options == null ? void 0 : options(args) : options;
    var output = Object.assign({}, staticResult, dynamicResult);
    if (route.generated) {
      output.tabBarItemStyle = {
        display: 'none'
      };
      output.tabBarButton = function () {
        return null;
      };
      output.drawerItemStyle = {
        height: 0,
        display: 'none'
      };
    }
    return output;
  };
}
exports.screenOptionsFactory = screenOptionsFactory;
function routeToScreen(route) {
  var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var options = _ref7.options,
    props = (0, _objectWithoutProperties2.default)(_ref7, _excluded3);
  return (0, _react.createElement)(primitives_1.Screen, Object.assign({
    getId: createGetIdForRoute(route)
  }, props, {
    name: route.route,
    key: route.route,
    options: screenOptionsFactory(route, options),
    getComponent: function getComponent() {
      return getQualifiedRouteComponent(route);
    }
  }));
}
exports.routeToScreen = routeToScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsIlJvdXRlXzEiLCJpbXBvcnRfbW9kZV8xIiwicHJpbWl0aXZlc18xIiwiRW1wdHlSb3V0ZV8xIiwiU3VzcGVuc2VGYWxsYmFja18xIiwiVHJ5XzEiLCJnZXRTb3J0ZWRDaGlsZHJlbiIsImNoaWxkcmVuIiwib3JkZXIiLCJpbml0aWFsUm91dGVOYW1lIiwibGVuZ3RoIiwic29ydCIsInNvcnRSb3V0ZXNXaXRoSW5pdGlhbCIsIm1hcCIsInJvdXRlIiwicHJvcHMiLCJlbnRyaWVzIiwiX3RvQ29uc3VtYWJsZUFycmF5MiIsImRlZmF1bHQiLCJvcmRlcmVkIiwiX3JlZiIsIm5hbWUiLCJyZWRpcmVjdCIsImluaXRpYWxQYXJhbXMiLCJsaXN0ZW5lcnMiLCJvcHRpb25zIiwiZ2V0SWQiLCJjb25zb2xlIiwid2FybiIsIm1hdGNoSW5kZXgiLCJmaW5kSW5kZXgiLCJjaGlsZCIsIl9yZWYyIiwibWF0Y2giLCJzcGxpY2UiLCJFcnJvciIsImZpbHRlciIsIkJvb2xlYW4iLCJwdXNoIiwiYXBwbHkiLCJ1c2VTb3J0ZWRTY3JlZW5zIiwiX25vZGUkY2hpbGRyZW4iLCJub2RlIiwidXNlUm91dGVOb2RlIiwic29ydGVkIiwidXNlTWVtbyIsInZhbHVlIiwicm91dGVUb1NjcmVlbiIsImV4cG9ydHMiLCJmcm9tSW1wb3J0IiwiX3JlZjMiLCJFcnJvckJvdW5kYXJ5IiwiY29tcG9uZW50IiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiIsIl9leGNsdWRlZCIsImZvcndhcmRSZWYiLCJyZWYiLCJjcmVhdGVFbGVtZW50IiwiRW1wdHlSb3V0ZSIsIk9iamVjdCIsImFzc2lnbiIsIl9qc3hSdW50aW1lIiwianN4IiwiVHJ5IiwiY2F0Y2giLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJrZXlzIiwiZnJvbUxvYWRlZFJvdXRlIiwicmVzIiwiUHJvbWlzZSIsInRoZW4iLCJxdWFsaWZpZWRTdG9yZSIsIldlYWtNYXAiLCJnZXRRdWFsaWZpZWRSb3V0ZUNvbXBvbmVudCIsImhhcyIsImdldCIsIlNjcmVlbkNvbXBvbmVudCIsImxhenkiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJsb2FkUm91dGUiLCJDb21wb25lbnQiLCJnZXRMb2FkYWJsZSIsIlN1c3BlbnNlIiwiZmFsbGJhY2siLCJTdXNwZW5zZUZhbGxiYWNrIiwic2VnbWVudCIsIlF1YWxpZmllZFJvdXRlIiwiX3JlZjUiLCJuYXZpZ2F0aW9uIiwiX2V4Y2x1ZGVkMiIsImxvYWRhYmxlIiwiUm91dGUiLCJkaXNwbGF5TmFtZSIsInNldCIsImNyZWF0ZUdldElkRm9yUm91dGUiLCJpbmNsdWRlIiwiTWFwIiwiZHluYW1pYyIsIl9zZWdtZW50cyRqb2luIiwiX3JlZjYiLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJfcmVmNiRwYXJhbXMiLCJwYXJhbXMiLCJfX0VYUE9fUk9VVEVSX2tleSIsImtleSIsInNlZ21lbnRzIiwidmFsdWVzIiwiQXJyYXkiLCJpc0FycmF5Iiwiam9pbiIsImRlZXAiLCJjb250ZXh0S2V5Iiwic2NyZWVuT3B0aW9uc0ZhY3RvcnkiLCJhcmdzIiwiX3JvdXRlJGxvYWRSb3V0ZSIsInN0YXRpY09wdGlvbnMiLCJnZW5lcmF0ZWQiLCJnZXROYXZPcHRpb25zIiwic3RhdGljUmVzdWx0IiwiZHluYW1pY1Jlc3VsdCIsIm91dHB1dCIsInRhYkJhckl0ZW1TdHlsZSIsImRpc3BsYXkiLCJ0YWJCYXJCdXR0b24iLCJkcmF3ZXJJdGVtU3R5bGUiLCJoZWlnaHQiLCJfcmVmNyIsIl9leGNsdWRlZDMiLCJfcmVhY3QiLCJTY3JlZW4iLCJnZXRDb21wb25lbnQiXSwic291cmNlcyI6WyIuLi9zcmMvdXNlU2NyZWVucy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgdHlwZSB7XG4gIEV2ZW50TWFwQmFzZSxcbiAgTmF2aWdhdGlvblN0YXRlLFxuICBQYXJhbUxpc3RCYXNlLFxuICBSb3V0ZUNvbmZpZyxcbiAgUm91dGVQcm9wLFxuICBTY3JlZW5MaXN0ZW5lcnMsXG59IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQge1xuICBEeW5hbWljQ29udmVudGlvbixcbiAgTG9hZGVkUm91dGUsXG4gIFJvdXRlLFxuICBSb3V0ZU5vZGUsXG4gIHNvcnRSb3V0ZXNXaXRoSW5pdGlhbCxcbiAgdXNlUm91dGVOb2RlLFxufSBmcm9tICcuL1JvdXRlJztcbmltcG9ydCBFWFBPX1JPVVRFUl9JTVBPUlRfTU9ERSBmcm9tICcuL2ltcG9ydC1tb2RlJztcbmltcG9ydCB7IFNjcmVlbiB9IGZyb20gJy4vcHJpbWl0aXZlcyc7XG5pbXBvcnQgeyBFbXB0eVJvdXRlIH0gZnJvbSAnLi92aWV3cy9FbXB0eVJvdXRlJztcbmltcG9ydCB7IFN1c3BlbnNlRmFsbGJhY2sgfSBmcm9tICcuL3ZpZXdzL1N1c3BlbnNlRmFsbGJhY2snO1xuaW1wb3J0IHsgVHJ5IH0gZnJvbSAnLi92aWV3cy9UcnknO1xuXG5leHBvcnQgdHlwZSBTY3JlZW5Qcm9wczxcbiAgVE9wdGlvbnMgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0gUmVjb3JkPHN0cmluZywgYW55PixcbiAgVFN0YXRlIGV4dGVuZHMgTmF2aWdhdGlvblN0YXRlID0gTmF2aWdhdGlvblN0YXRlLFxuICBURXZlbnRNYXAgZXh0ZW5kcyBFdmVudE1hcEJhc2UgPSBFdmVudE1hcEJhc2UsXG4+ID0ge1xuICAvKiogTmFtZSBpcyByZXF1aXJlZCB3aGVuIHVzZWQgaW5zaWRlIGEgTGF5b3V0IGNvbXBvbmVudC4gKi9cbiAgbmFtZT86IHN0cmluZztcbiAgLyoqXG4gICAqIFJlZGlyZWN0IHRvIHRoZSBuZWFyZXN0IHNpYmxpbmcgcm91dGUuXG4gICAqIElmIGFsbCBjaGlsZHJlbiBhcmUgYHJlZGlyZWN0PXt0cnVlfWAsIHRoZSBsYXlvdXQgd2lsbCByZW5kZXIgYG51bGxgIGFzIHRoZXJlIGFyZSBubyBjaGlsZHJlbiB0byByZW5kZXIuXG4gICAqL1xuICByZWRpcmVjdD86IGJvb2xlYW47XG4gIGluaXRpYWxQYXJhbXM/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xuICBvcHRpb25zPzpcbiAgICB8IFRPcHRpb25zXG4gICAgfCAoKHByb3A6IHsgcm91dGU6IFJvdXRlUHJvcDxQYXJhbUxpc3RCYXNlLCBzdHJpbmc+OyBuYXZpZ2F0aW9uOiBhbnkgfSkgPT4gVE9wdGlvbnMpO1xuXG4gIGxpc3RlbmVycz86XG4gICAgfCBTY3JlZW5MaXN0ZW5lcnM8VFN0YXRlLCBURXZlbnRNYXA+XG4gICAgfCAoKHByb3A6IHtcbiAgICAgICAgcm91dGU6IFJvdXRlUHJvcDxQYXJhbUxpc3RCYXNlLCBzdHJpbmc+O1xuICAgICAgICBuYXZpZ2F0aW9uOiBhbnk7XG4gICAgICB9KSA9PiBTY3JlZW5MaXN0ZW5lcnM8VFN0YXRlLCBURXZlbnRNYXA+KTtcblxuICBnZXRJZD86ICh7IHBhcmFtcyB9OiB7IHBhcmFtcz86IFJlY29yZDxzdHJpbmcsIGFueT4gfSkgPT4gc3RyaW5nIHwgdW5kZWZpbmVkO1xufTtcblxuZnVuY3Rpb24gZ2V0U29ydGVkQ2hpbGRyZW4oXG4gIGNoaWxkcmVuOiBSb3V0ZU5vZGVbXSxcbiAgb3JkZXI/OiBTY3JlZW5Qcm9wc1tdLFxuICBpbml0aWFsUm91dGVOYW1lPzogc3RyaW5nXG4pOiB7IHJvdXRlOiBSb3V0ZU5vZGU7IHByb3BzOiBQYXJ0aWFsPFNjcmVlblByb3BzPiB9W10ge1xuICBpZiAoIW9yZGVyPy5sZW5ndGgpIHtcbiAgICByZXR1cm4gY2hpbGRyZW5cbiAgICAgIC5zb3J0KHNvcnRSb3V0ZXNXaXRoSW5pdGlhbChpbml0aWFsUm91dGVOYW1lKSlcbiAgICAgIC5tYXAoKHJvdXRlKSA9PiAoeyByb3V0ZSwgcHJvcHM6IHt9IH0pKTtcbiAgfVxuICBjb25zdCBlbnRyaWVzID0gWy4uLmNoaWxkcmVuXTtcblxuICBjb25zdCBvcmRlcmVkID0gb3JkZXJcbiAgICAubWFwKCh7IG5hbWUsIHJlZGlyZWN0LCBpbml0aWFsUGFyYW1zLCBsaXN0ZW5lcnMsIG9wdGlvbnMsIGdldElkIH0pID0+IHtcbiAgICAgIGlmICghZW50cmllcy5sZW5ndGgpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBbTGF5b3V0IGNoaWxkcmVuXTogVG9vIG1hbnkgc2NyZWVucyBkZWZpbmVkLiBSb3V0ZSBcIiR7bmFtZX1cIiBpcyBleHRyYW5lb3VzLmApO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG1hdGNoSW5kZXggPSBlbnRyaWVzLmZpbmRJbmRleCgoY2hpbGQpID0+IGNoaWxkLnJvdXRlID09PSBuYW1lKTtcbiAgICAgIGlmIChtYXRjaEluZGV4ID09PSAtMSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgYFtMYXlvdXQgY2hpbGRyZW5dOiBObyByb3V0ZSBuYW1lZCBcIiR7bmFtZX1cIiBleGlzdHMgaW4gbmVzdGVkIGNoaWxkcmVuOmAsXG4gICAgICAgICAgY2hpbGRyZW4ubWFwKCh7IHJvdXRlIH0pID0+IHJvdXRlKVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEdldCBtYXRjaCBhbmQgcmVtb3ZlIGZyb20gZW50cmllc1xuICAgICAgICBjb25zdCBtYXRjaCA9IGVudHJpZXNbbWF0Y2hJbmRleF07XG4gICAgICAgIGVudHJpZXMuc3BsaWNlKG1hdGNoSW5kZXgsIDEpO1xuXG4gICAgICAgIC8vIEVuc3VyZSB0byByZXR1cm4gbnVsbCBhZnRlciByZW1vdmluZyBmcm9tIGVudHJpZXMuXG4gICAgICAgIGlmIChyZWRpcmVjdCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgcmVkaXJlY3QgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFJlZGlyZWN0aW5nIHRvIGEgc3BlY2lmaWMgcm91dGUgaXMgbm90IHN1cHBvcnRlZCB5ZXQuYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICByb3V0ZTogbWF0Y2gsXG4gICAgICAgICAgcHJvcHM6IHsgaW5pdGlhbFBhcmFtcywgbGlzdGVuZXJzLCBvcHRpb25zLCBnZXRJZCB9LFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0pXG4gICAgLmZpbHRlcihCb29sZWFuKSBhcyB7XG4gICAgcm91dGU6IFJvdXRlTm9kZTtcbiAgICBwcm9wczogUGFydGlhbDxTY3JlZW5Qcm9wcz47XG4gIH1bXTtcblxuICAvLyBBZGQgYW55IHJlbWFpbmluZyBjaGlsZHJlblxuICBvcmRlcmVkLnB1c2goXG4gICAgLi4uZW50cmllcy5zb3J0KHNvcnRSb3V0ZXNXaXRoSW5pdGlhbChpbml0aWFsUm91dGVOYW1lKSkubWFwKChyb3V0ZSkgPT4gKHsgcm91dGUsIHByb3BzOiB7fSB9KSlcbiAgKTtcblxuICByZXR1cm4gb3JkZXJlZDtcbn1cblxuLyoqXG4gKiBAcmV0dXJucyBSZWFjdCBOYXZpZ2F0aW9uIHNjcmVlbnMgc29ydGVkIGJ5IHRoZSBgcm91dGVgIHByb3BlcnR5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlU29ydGVkU2NyZWVucyhvcmRlcjogU2NyZWVuUHJvcHNbXSk6IFJlYWN0LlJlYWN0Tm9kZVtdIHtcbiAgY29uc3Qgbm9kZSA9IHVzZVJvdXRlTm9kZSgpO1xuXG4gIGNvbnN0IHNvcnRlZCA9IG5vZGU/LmNoaWxkcmVuPy5sZW5ndGhcbiAgICA/IGdldFNvcnRlZENoaWxkcmVuKG5vZGUuY2hpbGRyZW4sIG9yZGVyLCBub2RlLmluaXRpYWxSb3V0ZU5hbWUpXG4gICAgOiBbXTtcbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oXG4gICAgKCkgPT4gc29ydGVkLm1hcCgodmFsdWUpID0+IHJvdXRlVG9TY3JlZW4odmFsdWUucm91dGUsIHZhbHVlLnByb3BzKSksXG4gICAgW3NvcnRlZF1cbiAgKTtcbn1cblxuZnVuY3Rpb24gZnJvbUltcG9ydCh7IEVycm9yQm91bmRhcnksIC4uLmNvbXBvbmVudCB9OiBMb2FkZWRSb3V0ZSkge1xuICBpZiAoRXJyb3JCb3VuZGFyeSkge1xuICAgIHJldHVybiB7XG4gICAgICBkZWZhdWx0OiBSZWFjdC5mb3J3YXJkUmVmKChwcm9wczogYW55LCByZWY6IGFueSkgPT4ge1xuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LmRlZmF1bHQgfHwgRW1wdHlSb3V0ZSwge1xuICAgICAgICAgIC4uLnByb3BzLFxuICAgICAgICAgIHJlZixcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiA8VHJ5IGNhdGNoPXtFcnJvckJvdW5kYXJ5fT57Y2hpbGRyZW59PC9Ucnk+O1xuICAgICAgfSksXG4gICAgfTtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChcbiAgICAgIHR5cGVvZiBjb21wb25lbnQuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgIGNvbXBvbmVudC5kZWZhdWx0ICYmXG4gICAgICBPYmplY3Qua2V5cyhjb21wb25lbnQuZGVmYXVsdCkubGVuZ3RoID09PSAwXG4gICAgKSB7XG4gICAgICByZXR1cm4geyBkZWZhdWx0OiBFbXB0eVJvdXRlIH07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHsgZGVmYXVsdDogY29tcG9uZW50LmRlZmF1bHQgfTtcbn1cblxuZnVuY3Rpb24gZnJvbUxvYWRlZFJvdXRlKHJlczogTG9hZGVkUm91dGUpIHtcbiAgaWYgKCEocmVzIGluc3RhbmNlb2YgUHJvbWlzZSkpIHtcbiAgICByZXR1cm4gZnJvbUltcG9ydChyZXMpO1xuICB9XG5cbiAgcmV0dXJuIHJlcy50aGVuKGZyb21JbXBvcnQpO1xufVxuXG4vLyBUT0RPOiBNYXliZSB0aGVyZSdzIGEgbW9yZSBSZWFjdC15IHdheSB0byBkbyB0aGlzP1xuLy8gV2l0aG91dCB0aGlzIHN0b3JlLCB0aGUgcHJvY2VzcyBlbnRlcnMgYSByZWN1cnNpdmUgbG9vcC5cbmNvbnN0IHF1YWxpZmllZFN0b3JlID0gbmV3IFdlYWtNYXA8Um91dGVOb2RlLCBSZWFjdC5Db21wb25lbnRUeXBlPGFueT4+KCk7XG5cbi8qKiBXcmFwIHRoZSBjb21wb25lbnQgd2l0aCB2YXJpb3VzIGVuaGFuY2VtZW50cyBhbmQgYWRkIGFjY2VzcyB0byBjaGlsZCByb3V0ZXMuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UXVhbGlmaWVkUm91dGVDb21wb25lbnQodmFsdWU6IFJvdXRlTm9kZSkge1xuICBpZiAocXVhbGlmaWVkU3RvcmUuaGFzKHZhbHVlKSkge1xuICAgIHJldHVybiBxdWFsaWZpZWRTdG9yZS5nZXQodmFsdWUpITtcbiAgfVxuXG4gIGxldCBTY3JlZW5Db21wb25lbnQ6IFJlYWN0LkZvcndhcmRSZWZFeG90aWNDb21wb25lbnQ8UmVhY3QuUmVmQXR0cmlidXRlczx1bmtub3duPj47XG5cbiAgLy8gVE9ETzogVGhpcyBlbnN1cmVzIHN5bmMgZG9lc24ndCB1c2UgUmVhY3QubGF6eSwgYnV0IGl0J3Mgbm90IGlkZWFsLlxuICBpZiAoRVhQT19ST1VURVJfSU1QT1JUX01PREUgPT09ICdsYXp5Jykge1xuICAgIFNjcmVlbkNvbXBvbmVudCA9IFJlYWN0LmxhenkoYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzID0gdmFsdWUubG9hZFJvdXRlKCk7XG4gICAgICByZXR1cm4gZnJvbUxvYWRlZFJvdXRlKHJlcykgYXMgUHJvbWlzZTx7XG4gICAgICAgIGRlZmF1bHQ6IFJlYWN0LkNvbXBvbmVudFR5cGU8YW55PjtcbiAgICAgIH0+O1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHJlcyA9IHZhbHVlLmxvYWRSb3V0ZSgpO1xuICAgIGNvbnN0IENvbXBvbmVudCA9IGZyb21JbXBvcnQocmVzKS5kZWZhdWx0IGFzIFJlYWN0LkNvbXBvbmVudFR5cGU8YW55PjtcbiAgICBTY3JlZW5Db21wb25lbnQgPSBSZWFjdC5mb3J3YXJkUmVmKChwcm9wcywgcmVmKSA9PiB7XG4gICAgICByZXR1cm4gPENvbXBvbmVudCB7Li4ucHJvcHN9IHJlZj17cmVmfSAvPjtcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IGdldExvYWRhYmxlID0gKHByb3BzOiBhbnksIHJlZjogYW55KSA9PiAoXG4gICAgPFJlYWN0LlN1c3BlbnNlIGZhbGxiYWNrPXs8U3VzcGVuc2VGYWxsYmFjayByb3V0ZT17dmFsdWV9IC8+fT5cbiAgICAgIDxTY3JlZW5Db21wb25lbnRcbiAgICAgICAgey4uLntcbiAgICAgICAgICAuLi5wcm9wcyxcbiAgICAgICAgICByZWYsXG4gICAgICAgICAgLy8gRXhwb3NlIHRoZSB0ZW1wbGF0ZSBzZWdtZW50IHBhdGgsIGUuZy4gYChob21lKWAsIGBbZm9vXWAsIGBpbmRleGBcbiAgICAgICAgICAvLyB0aGUgaW50ZW50aW9uIGlzIHRvIG1ha2UgaXQgcG9zc2libGUgdG8gZGVkdWNlIHNoYXJlZCByb3V0ZXMuXG4gICAgICAgICAgc2VnbWVudDogdmFsdWUucm91dGUsXG4gICAgICAgIH19XG4gICAgICAvPlxuICAgIDwvUmVhY3QuU3VzcGVuc2U+XG4gICk7XG5cbiAgY29uc3QgUXVhbGlmaWVkUm91dGUgPSBSZWFjdC5mb3J3YXJkUmVmKFxuICAgIChcbiAgICAgIHtcbiAgICAgICAgLy8gUmVtb3ZlIHRoZXNlIFJlYWN0IE5hdmlnYXRpb24gcHJvcHMgdG9cbiAgICAgICAgLy8gZW5mb3JjZSB1c2FnZSBvZiBleHBvLXJvdXRlciBob29rcyAod2hlcmUgdGhlIHF1ZXJ5IHBhcmFtcyBhcmUgY29ycmVjdCkuXG4gICAgICAgIHJvdXRlLFxuICAgICAgICBuYXZpZ2F0aW9uLFxuXG4gICAgICAgIC8vIFBhc3MgYWxsIG90aGVyIHByb3BzIHRvIHRoZSBjb21wb25lbnRcbiAgICAgICAgLi4ucHJvcHNcbiAgICAgIH06IGFueSxcbiAgICAgIHJlZjogYW55XG4gICAgKSA9PiB7XG4gICAgICBjb25zdCBsb2FkYWJsZSA9IGdldExvYWRhYmxlKHByb3BzLCByZWYpO1xuXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8Um91dGUgbm9kZT17dmFsdWV9IHJvdXRlPXtyb3V0ZX0+XG4gICAgICAgICAge2xvYWRhYmxlfVxuICAgICAgICA8L1JvdXRlPlxuICAgICAgKTtcbiAgICB9XG4gICk7XG5cbiAgUXVhbGlmaWVkUm91dGUuZGlzcGxheU5hbWUgPSBgUm91dGUoJHt2YWx1ZS5yb3V0ZX0pYDtcblxuICBxdWFsaWZpZWRTdG9yZS5zZXQodmFsdWUsIFF1YWxpZmllZFJvdXRlKTtcbiAgcmV0dXJuIFF1YWxpZmllZFJvdXRlO1xufVxuXG4vKiogQHJldHVybnMgYSBmdW5jdGlvbiB3aGljaCBwcm92aWRlcyBhIHNjcmVlbiBpZCB0aGF0IG1hdGNoZXMgdGhlIGR5bmFtaWMgcm91dGUgbmFtZSBpbiBwYXJhbXMuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlR2V0SWRGb3JSb3V0ZShcbiAgcm91dGU6IFBpY2s8Um91dGVOb2RlLCAnZHluYW1pYycgfCAncm91dGUnIHwgJ2NvbnRleHRLZXknIHwgJ2NoaWxkcmVuJz5cbikge1xuICBjb25zdCBpbmNsdWRlID0gbmV3IE1hcDxzdHJpbmcsIER5bmFtaWNDb252ZW50aW9uPigpO1xuXG4gIGlmIChyb3V0ZS5keW5hbWljKSB7XG4gICAgZm9yIChjb25zdCBzZWdtZW50IG9mIHJvdXRlLmR5bmFtaWMpIHtcbiAgICAgIGluY2x1ZGUuc2V0KHNlZ21lbnQubmFtZSwgc2VnbWVudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICh7IHBhcmFtcyA9IHt9IH0gPSB7fSBhcyB7IHBhcmFtcz86IFJlY29yZDxzdHJpbmcsIGFueT4gfSkgPT4ge1xuICAgIGlmIChwYXJhbXMuX19FWFBPX1JPVVRFUl9rZXkpIHtcbiAgICAgIGNvbnN0IGtleSA9IHBhcmFtcy5fX0VYUE9fUk9VVEVSX2tleTtcbiAgICAgIGRlbGV0ZSBwYXJhbXMuX19FWFBPX1JPVVRFUl9rZXk7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cblxuICAgIGNvbnN0IHNlZ21lbnRzOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgZm9yIChjb25zdCBkeW5hbWljIG9mIGluY2x1ZGUudmFsdWVzKCkpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gcGFyYW1zPy5bZHluYW1pYy5uYW1lXTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIElmIHdlIGFyZSBhbiBhcnJheSB3aXRoIGEgdmFsdWVcbiAgICAgICAgc2VnbWVudHMucHVzaCh2YWx1ZS5qb2luKCcvJykpO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZSAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIHZhbHVlIGFuZCBub3QgYW4gZW1wdHkgYXJyYXlcbiAgICAgICAgc2VnbWVudHMucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGR5bmFtaWMuZGVlcCkge1xuICAgICAgICBzZWdtZW50cy5wdXNoKGBbLi4uJHtkeW5hbWljLm5hbWV9XWApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VnbWVudHMucHVzaChgWyR7ZHluYW1pYy5uYW1lfV1gKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2VnbWVudHMuam9pbignLycpID8/IHJvdXRlLmNvbnRleHRLZXk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzY3JlZW5PcHRpb25zRmFjdG9yeShcbiAgcm91dGU6IFJvdXRlTm9kZSxcbiAgb3B0aW9ucz86IFNjcmVlblByb3BzWydvcHRpb25zJ11cbik6IFJvdXRlQ29uZmlnPGFueSwgYW55LCBhbnksIGFueSwgYW55LCBhbnk+WydvcHRpb25zJ10ge1xuICByZXR1cm4gKGFyZ3MpID0+IHtcbiAgICAvLyBPbmx5IGVhZ2VyIGxvYWQgZ2VuZXJhdGVkIGNvbXBvbmVudHNcbiAgICBjb25zdCBzdGF0aWNPcHRpb25zID0gcm91dGUuZ2VuZXJhdGVkID8gcm91dGUubG9hZFJvdXRlKCk/LmdldE5hdk9wdGlvbnMgOiBudWxsO1xuICAgIGNvbnN0IHN0YXRpY1Jlc3VsdCA9IHR5cGVvZiBzdGF0aWNPcHRpb25zID09PSAnZnVuY3Rpb24nID8gc3RhdGljT3B0aW9ucyhhcmdzKSA6IHN0YXRpY09wdGlvbnM7XG4gICAgY29uc3QgZHluYW1pY1Jlc3VsdCA9IHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucz8uKGFyZ3MpIDogb3B0aW9ucztcbiAgICBjb25zdCBvdXRwdXQgPSB7XG4gICAgICAuLi5zdGF0aWNSZXN1bHQsXG4gICAgICAuLi5keW5hbWljUmVzdWx0LFxuICAgIH07XG5cbiAgICAvLyBQcmV2ZW50IGdlbmVyYXRlZCBzY3JlZW5zIGZyb20gc2hvd2luZyB1cCBpbiB0aGUgdGFiIGJhci5cbiAgICBpZiAocm91dGUuZ2VuZXJhdGVkKSB7XG4gICAgICBvdXRwdXQudGFiQmFySXRlbVN0eWxlID0geyBkaXNwbGF5OiAnbm9uZScgfTtcbiAgICAgIG91dHB1dC50YWJCYXJCdXR0b24gPSAoKSA9PiBudWxsO1xuICAgICAgLy8gVE9ETzogUmVhY3QgTmF2aWdhdGlvbiBkb2Vzbid0IHByb3ZpZGUgYSB3YXkgdG8gcHJldmVudCByZW5kZXJpbmcgdGhlIGRyYXdlciBpdGVtLlxuICAgICAgb3V0cHV0LmRyYXdlckl0ZW1TdHlsZSA9IHsgaGVpZ2h0OiAwLCBkaXNwbGF5OiAnbm9uZScgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcm91dGVUb1NjcmVlbihyb3V0ZTogUm91dGVOb2RlLCB7IG9wdGlvbnMsIC4uLnByb3BzIH06IFBhcnRpYWw8U2NyZWVuUHJvcHM+ID0ge30pIHtcbiAgcmV0dXJuIChcbiAgICA8U2NyZWVuXG4gICAgICAvLyBVc2VycyBjYW4gb3ZlcnJpZGUgdGhlIHNjcmVlbiBnZXRJZCBmdW5jdGlvbi5cbiAgICAgIGdldElkPXtjcmVhdGVHZXRJZEZvclJvdXRlKHJvdXRlKX1cbiAgICAgIHsuLi5wcm9wc31cbiAgICAgIG5hbWU9e3JvdXRlLnJvdXRlfVxuICAgICAga2V5PXtyb3V0ZS5yb3V0ZX1cbiAgICAgIG9wdGlvbnM9e3NjcmVlbk9wdGlvbnNGYWN0b3J5KHJvdXRlLCBvcHRpb25zKX1cbiAgICAgIGdldENvbXBvbmVudD17KCkgPT4gZ2V0UXVhbGlmaWVkUm91dGVDb21wb25lbnQocm91dGUpfVxuICAgIC8+XG4gICk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVVaLElBQUFBLE9BQUEsR0FBQUMsZUFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUMsT0FBQSxHQUFBRCxPQUFBO0FBUUEsSUFBQUUsYUFBQSxHQUFBSCxlQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxZQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxZQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxrQkFBQSxHQUFBTCxPQUFBO0FBQ0EsSUFBQU0sS0FBQSxHQUFBTixPQUFBO0FBNkJBLFNBQVNPLGlCQUFpQkEsQ0FDeEJDLFFBQXFCLEVBQ3JCQyxLQUFxQixFQUNyQkMsZ0JBQXlCO0VBRXpCLElBQUksRUFBQ0QsS0FBSyxZQUFMQSxLQUFLLENBQUVFLE1BQU0sR0FBRTtJQUNsQixPQUFPSCxRQUFRLENBQ1pJLElBQUksQ0FBQyxJQUFBWCxPQUFBLENBQUFZLHFCQUFxQixFQUFDSCxnQkFBZ0IsQ0FBQyxDQUFDLENBQzdDSSxHQUFHLENBQUMsVUFBQ0MsS0FBSztNQUFBLE9BQU07UUFBRUEsS0FBSyxFQUFMQSxLQUFLO1FBQUVDLEtBQUssRUFBRTtNQUFFLENBQUU7SUFBQSxDQUFDLENBQUM7O0VBRTNDLElBQU1DLE9BQU8sT0FBQUMsbUJBQUEsQ0FBQUMsT0FBQSxFQUFPWCxRQUFRLENBQUM7RUFFN0IsSUFBTVksT0FBTyxHQUFHWCxLQUFLLENBQ2xCSyxHQUFHLENB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