{"version":3,"names":["_asyncStorage","_interopRequireDefault","require","STORAGE_KEYS","ENABLED","PIN_HASH","PIN_SALT","BIO_ENABLED","RECOVERY_HASH","TIMEOUT_SECONDS","LOCKOUT_UNTIL","FAILED_ATTEMPTS","simpleHash","input","hash","str","String","i","length","charCodeAt","Math","abs","toString","getSecureRandomBytes","crypto","getRandomValues","randomValues","Uint8Array","nodeCrypto","randomBytes","nodeCryptoError","console","warn","message","expoCrypto","getRandomBytes","expoError","Error","error","secureRandomSalt","arguments","undefined","chars","out","randomIndex","fallbackRandomSalt","_performance","_crypto","entropySources","Date","now","process","hrtime","floor","performance","entropy","reduce","acc","source","index","generateRecoveryCode","code","fallbackGenerateRecoveryCode","_performance2","_crypto2","isEnabled","_isEnabled","apply","_asyncToGenerator2","default","enabled","AsyncStorage","getItem","enableLock","_enableLock","setItem","disableLock","_disableLock","multiRemove","setPin","_x","_setPin","pin","salt","pinHash","verifyPin","_x2","_verifyPin","lockoutUntil","Number","ok","reason","expected","given","attempts","lockMs","min","setBiometricsEnabled","_x3","_setBiometricsEnabled","isBiometricsEnabled","_isBiometricsEnabled","v","unlockWithBiometrics","_unlockWithBiometrics","setRecoveryCode","_x4","_setRecoveryCode","verifyRecovery","_x5","_verifyRecovery","setAutoLockTimeout","_x6","_setAutoLockTimeout","seconds","getAutoLockTimeout","_getAutoLockTimeout","emergencyReset","_emergencyReset","lockStorageKeys","exports"],"sources":["lockService.js"],"sourcesContent":["// src/services/lockService.js - Simple offline app lock service (PIN + recovery)\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nconst STORAGE_KEYS = {\r\n  ENABLED: 'app_lock.enabled',\r\n  PIN_HASH: 'app_lock.pin_hash',\r\n  PIN_SALT: 'app_lock.pin_salt',\r\n  BIO_ENABLED: 'app_lock.bio_enabled',\r\n  RECOVERY_HASH: 'app_lock.recovery_hash',\r\n  TIMEOUT_SECONDS: 'app_lock.timeout_seconds',\r\n  LOCKOUT_UNTIL: 'app_lock.lockout_until',\r\n  FAILED_ATTEMPTS: 'app_lock.failed_attempts',\r\n};\r\n\r\n// NOTE: This is not cryptographically strong. For local lock UX only.\r\nfunction simpleHash(input) {\r\n  let hash = 0;\r\n  const str = String(input);\r\n  for (let i = 0; i < str.length; i += 1) {\r\n    hash = (hash << 5) - hash + str.charCodeAt(i);\r\n    hash |= 0;\r\n  }\r\n  return Math.abs(hash).toString(16);\r\n}\r\n\r\n/**\r\n * Génère des bytes aléatoires cryptographiquement sûrs\r\n * @param {number} length - Nombre de bytes à générer\r\n * @returns {Uint8Array} Bytes aléatoires\r\n */\r\nfunction getSecureRandomBytes(length) {\r\n  try {\r\n    // Méthode 1: Web Crypto API (disponible dans React Native)\r\n    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\r\n      const randomValues = new Uint8Array(length);\r\n      crypto.getRandomValues(randomValues);\r\n      return randomValues;\r\n    }\r\n    \r\n    // Méthode 2: Node.js crypto (si disponible)\r\n    if (typeof require !== 'undefined') {\r\n      try {\r\n        const nodeCrypto = require('crypto');\r\n        return nodeCrypto.randomBytes(length);\r\n      } catch (nodeCryptoError) {\r\n        console.warn('Node.js crypto failed:', nodeCryptoError.message);\r\n      }\r\n    }\r\n    \r\n    // Méthode 3: expo-crypto (si disponible et importé)\r\n    if (typeof require !== 'undefined') {\r\n      try {\r\n        const expoCrypto = require('expo-crypto');\r\n        if (expoCrypto?.getRandomBytes) {\r\n          // expo-crypto.getRandomBytes est synchrone, pas besoin d'await\r\n          return expoCrypto.getRandomBytes(length);\r\n        }\r\n      } catch (expoError) {\r\n        console.warn('expo-crypto not available:', expoError.message);\r\n      }\r\n    }\r\n    \r\n    throw new Error('No secure random source available');\r\n  } catch (error) {\r\n    console.warn('All secure random methods failed, using fallback:', error.message);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Génère un salt cryptographiquement sûr\r\n * @param {number} length - Longueur du salt (défaut: 16)\r\n * @returns {string} Salt sécurisé\r\n */\r\nfunction secureRandomSalt(length = 16) {\r\n  try {\r\n    const randomBytes = getSecureRandomBytes(length);\r\n    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r\n    let out = '';\r\n    \r\n    for (let i = 0; i < length; i += 1) {\r\n      const randomIndex = randomBytes[i] % chars.length;\r\n      out += chars[randomIndex];\r\n    }\r\n    return out;\r\n  } catch (error) {\r\n    console.warn('Secure random failed, using fallback method:', error.message);\r\n    // Dernier recours : méthode moins sécurisée mais fonctionnelle\r\n    return fallbackRandomSalt(length);\r\n  }\r\n}\r\n\r\n/**\r\n * Fallback moins sécurisé (utilisé uniquement en cas d'échec de toutes les méthodes sécurisées)\r\n * @param {number} length - Longueur du salt\r\n * @returns {string} Salt moins sécurisé\r\n */\r\nfunction fallbackRandomSalt(length = 16) {\r\n  const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r\n  let out = '';\r\n  \r\n  // Utilise une combinaison d'entropie système au lieu de Math.random\r\n  const entropySources = [\r\n    Date.now() % 1000000,\r\n    process.hrtime ? process.hrtime()[1] : 0,\r\n    Math.floor(performance?.now() || 0),\r\n    crypto?.getRandomValues ? crypto.getRandomValues(new Uint8Array(1))[0] : 0\r\n  ];\r\n  \r\n  for (let i = 0; i < length; i += 1) {\r\n    // Combine plusieurs sources d'entropie pour améliorer la qualité\r\n    const entropy = entropySources.reduce((acc, source, index) => {\r\n      return acc + (source * (index + 1)) % chars.length;\r\n    }, i);\r\n    const randomIndex = entropy % chars.length;\r\n    out += chars[randomIndex];\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Génère un code de récupération cryptographiquement sûr\r\n * @returns {string} Code de récupération sécurisé\r\n */\r\nexport function generateRecoveryCode() {\r\n  try {\r\n    const randomBytes = getSecureRandomBytes(16);\r\n    const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';\r\n    let code = '';\r\n    \r\n    for (let i = 0; i < 16; i += 1) {\r\n      const randomIndex = randomBytes[i] % chars.length;\r\n      code += chars[randomIndex];\r\n    }\r\n    return code;\r\n  } catch (error) {\r\n    console.warn('Secure random failed, using fallback method:', error.message);\r\n    // Dernier recours : méthode moins sécurisée mais fonctionnelle\r\n    return fallbackGenerateRecoveryCode();\r\n  }\r\n}\r\n\r\n/**\r\n * Fallback moins sécurisé pour la génération de code de récupération\r\n * @returns {string} Code de récupération moins sécurisé\r\n */\r\nfunction fallbackGenerateRecoveryCode() {\r\n  const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';\r\n  let code = '';\r\n  \r\n  // Utilise une combinaison d'entropie système au lieu de Math.random\r\n  const entropySources = [\r\n    Date.now() % 1000000,\r\n    process.hrtime ? process.hrtime()[1] : 0,\r\n    Math.floor(performance?.now() || 0),\r\n    crypto?.getRandomValues ? crypto.getRandomValues(new Uint8Array(1))[0] : 0\r\n  ];\r\n  \r\n  for (let i = 0; i < 16; i += 1) {\r\n    // Combine plusieurs sources d'entropie pour améliorer la qualité\r\n    const entropy = entropySources.reduce((acc, source, index) => {\r\n      return acc + (source * (index + 1)) % chars.length;\r\n    }, i);\r\n    const randomIndex = entropy % chars.length;\r\n    code += chars[randomIndex];\r\n  }\r\n  return code;\r\n}\r\n\r\nexport async function isEnabled() {\r\n  const enabled = await AsyncStorage.getItem(STORAGE_KEYS.ENABLED);\r\n  return enabled === '1';\r\n}\r\n\r\nexport async function enableLock() {\r\n  await AsyncStorage.setItem(STORAGE_KEYS.ENABLED, '1');\r\n  return true;\r\n}\r\n\r\nexport async function disableLock() {\r\n  await AsyncStorage.multiRemove([\r\n    STORAGE_KEYS.ENABLED,\r\n    STORAGE_KEYS.PIN_HASH,\r\n    STORAGE_KEYS.PIN_SALT,\r\n    STORAGE_KEYS.BIO_ENABLED,\r\n    STORAGE_KEYS.RECOVERY_HASH,\r\n    STORAGE_KEYS.TIMEOUT_SECONDS,\r\n    STORAGE_KEYS.LOCKOUT_UNTIL,\r\n    STORAGE_KEYS.FAILED_ATTEMPTS,\r\n  ]);\r\n  return true;\r\n}\r\n\r\nexport async function setPin(pin) {\r\n  const salt = await secureRandomSalt();\r\n  const pinHash = simpleHash(`${salt}:${pin}`);\r\n  await AsyncStorage.setItem(STORAGE_KEYS.PIN_SALT, salt);\r\n  await AsyncStorage.setItem(STORAGE_KEYS.PIN_HASH, pinHash);\r\n  return true;\r\n}\r\n\r\nexport async function verifyPin(pin) {\r\n  const lockoutUntil = Number(await AsyncStorage.getItem(STORAGE_KEYS.LOCKOUT_UNTIL) || '0');\r\n  const now = Date.now();\r\n  if (lockoutUntil && now < lockoutUntil) {\r\n    return { ok: false, reason: 'lockout' };\r\n  }\r\n\r\n  const salt = await AsyncStorage.getItem(STORAGE_KEYS.PIN_SALT);\r\n  const expected = await AsyncStorage.getItem(STORAGE_KEYS.PIN_HASH);\r\n  if (!salt || !expected) return { ok: false };\r\n  const given = simpleHash(`${salt}:${pin}`);\r\n  const ok = given === expected;\r\n\r\n  let attempts = Number(await AsyncStorage.getItem(STORAGE_KEYS.FAILED_ATTEMPTS) || '0');\r\n  if (ok) {\r\n    await AsyncStorage.setItem(STORAGE_KEYS.FAILED_ATTEMPTS, '0');\r\n    return { ok: true };\r\n  }\r\n  attempts += 1;\r\n  await AsyncStorage.setItem(STORAGE_KEYS.FAILED_ATTEMPTS, String(attempts));\r\n  if (attempts >= 5) {\r\n    const lockMs = 30_000 * Math.min(4, attempts - 4); // 30s, 60s, 90s, 120s\r\n    await AsyncStorage.setItem(STORAGE_KEYS.LOCKOUT_UNTIL, String(now + lockMs));\r\n    return { ok: false, reason: 'lockout' };\r\n  }\r\n  return { ok: false };\r\n}\r\n\r\nexport async function setBiometricsEnabled(enabled) {\r\n  await AsyncStorage.setItem(STORAGE_KEYS.BIO_ENABLED, enabled ? '1' : '0');\r\n  return true;\r\n}\r\n\r\nexport async function isBiometricsEnabled() {\r\n  const v = await AsyncStorage.getItem(STORAGE_KEYS.BIO_ENABLED);\r\n  return v === '1';\r\n}\r\n\r\nexport async function unlockWithBiometrics() {\r\n  // Placeholder for real expo-local-authentication integration\r\n  const enabled = await isBiometricsEnabled();\r\n  if (!enabled) return { ok: false };\r\n  // In real app: prompt biometric and return result\r\n  return { ok: true };\r\n}\r\n\r\nexport async function setRecoveryCode(code) {\r\n  const hash = simpleHash(code);\r\n  await AsyncStorage.setItem(STORAGE_KEYS.RECOVERY_HASH, hash);\r\n  return true;\r\n}\r\n\r\nexport async function verifyRecovery(code) {\r\n  const expected = await AsyncStorage.getItem(STORAGE_KEYS.RECOVERY_HASH);\r\n  if (!expected) return false;\r\n  return simpleHash(code) === expected;\r\n}\r\n\r\nexport async function setAutoLockTimeout(seconds) {\r\n  await AsyncStorage.setItem(STORAGE_KEYS.TIMEOUT_SECONDS, String(seconds));\r\n  return true;\r\n}\r\n\r\nexport async function getAutoLockTimeout() {\r\n  return Number(await AsyncStorage.getItem(STORAGE_KEYS.TIMEOUT_SECONDS) || '0');\r\n}\r\n\r\nexport async function emergencyReset() {\r\n  await disableLock();\r\n  return true;\r\n}\r\n\r\nexport const lockStorageKeys = STORAGE_KEYS;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]}