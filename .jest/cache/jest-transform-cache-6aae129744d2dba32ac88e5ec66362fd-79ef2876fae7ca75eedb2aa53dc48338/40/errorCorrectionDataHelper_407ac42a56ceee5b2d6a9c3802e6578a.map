{"version":3,"names":["_A","_interopRequireDefault","require","_A2","_B","_B2","_C","_C2","getErrorsData","exports","level","dataMap","A1","errorCorrectionA1","A2","errorCorrectionA2","B1","errorCorrectionB1","B2","errorCorrectionB2","C1","errorCorrectionC1","C2","errorCorrectionC2","getLevelColor","colors","getLevelCharacteristics","characteristics","name","textLength","errorCount","errorTypes","difficulty","focus","getErrorCorrectionStats","stats","exerciseCount","totalQuestions","categoryCount","typeDistribution","full","identify","multiple_choice","categories","averageTextLength","totalErrorPositions","data","exercises","_data$categories","length","statistics","map","cat","id","count","textLengths","ex","text","Math","round","reduce","a","b","filter","errorPositions","total","error","console","warn","getGlobalErrorCorrectionStats","levels","globalStats","totalExercises","totalCategories","byLevel","byType","implementedLevels","progression","forEach","levelStats","push","getExercisesByCategory","categoryId","_data$exercises","getExercisesByType","type","_data$exercises2","getExercisesByCategoryAndType","_data$exercises3","validateErrorCorrectionExercise","exercise","requiredFields","field","validTypes","includes","choices","Array","isArray","correctChoiceIndex","validateErrorCorrectionData","_data$categories$leng","_data$categories2","valid","results","invalidExercises","errors","index","_exercise$categoryId","hasOwnProperty","validateStructure","getRandomErrorCorrectionExercise","_data$exercises4","arguments","undefined","filteredExercises","randomIndex","floor","random","Object","assign","totalCount","getModeInfo","mode","_modes$mode","modes","description","icon","color","getRecommendedExercises","completedExercises","performance","availableExercises","weakCategories","slice","recommendedExercises","categoryExercises","apply","_toConsumableArray2","default","getAvailableLevels"],"sources":["errorCorrectionDataHelper.js"],"sourcesContent":["// src/utils/errorCorrection/errorCorrectionDataHelper.js\r\n\r\n// Import des données d'error correction par niveau\r\n// Niveau A1\r\nimport errorCorrectionA1 from \"../../data/errorCorrection/A1\";\r\n\r\n// Niveau A2\r\nimport errorCorrectionA2 from \"../../data/errorCorrection/A2\";\r\n\r\n// Niveau B1\r\nimport errorCorrectionB1 from \"../../data/errorCorrection/B1\";\r\n\r\n// Niveau B2\r\nimport errorCorrectionB2 from \"../../data/errorCorrection/B2\";\r\n\r\n// Niveau C1\r\nimport errorCorrectionC1 from \"../../data/errorCorrection/C1\";\r\n\r\n// Niveau C2\r\nimport errorCorrectionC2 from \"../../data/errorCorrection/C2\";\r\n\r\n/**\r\n * Récupère les données d'exercices d'error correction en fonction du niveau\r\n * @param {string} level - Le niveau de langue (A1, A2, B1, B2, C1, C2)\r\n * @returns {Object} Les données d'exercices d'error correction pour le niveau spécifié\r\n */\r\nexport const getErrorsData = (level) => {\r\n  const dataMap = {\r\n    A1: errorCorrectionA1,\r\n    A2: errorCorrectionA2,\r\n    B1: errorCorrectionB1,\r\n    B2: errorCorrectionB2,\r\n    C1: errorCorrectionC1,\r\n    C2: errorCorrectionC2,\r\n  };\r\n\r\n  return dataMap[level] || errorCorrectionA1; // Fallback vers A1 si niveau non trouvé\r\n};\r\n\r\n/**\r\n * Récupère la couleur associée à un niveau de langue\r\n * @param {string} level - Le niveau de langue (A1, A2, B1, B2, C1, C2)\r\n * @returns {string} Code couleur hexadécimal pour le niveau\r\n */\r\nexport const getLevelColor = (level) => {\r\n  const colors = {\r\n    A1: \"#3b82f6\", // Bleu\r\n    A2: \"#8b5cf6\", // Violet\r\n    B1: \"#10b981\", // Vert\r\n    B2: \"#f59e0b\", // Orange\r\n    C1: \"#ef4444\", // Rouge\r\n    C2: \"#6366f1\", // Indigo\r\n  };\r\n  return colors[level] || \"#4361EE\"; // Couleur par défaut\r\n};\r\n\r\n/**\r\n * Récupère les caractéristiques d'un niveau d'error correction\r\n * @param {string} level - Le niveau de langue\r\n * @returns {Object} Caractéristiques du niveau (difficulté, types d'erreurs, etc.)\r\n */\r\nexport const getLevelCharacteristics = (level) => {\r\n  const characteristics = {\r\n    A1: {\r\n      name: \"Débutant\",\r\n      textLength: \"1-2 phrases (50-100 caractères)\",\r\n      errorCount: \"1-2 erreurs par exercice\",\r\n      errorTypes: [\"Basic grammar\", \"Simple vocabulary\", \"Word order\"],\r\n      difficulty: \"Très facile\",\r\n      focus: \"Erreurs évidentes, correction directe\",\r\n    },\r\n    A2: {\r\n      name: \"Élémentaire\",\r\n      textLength: \"2-3 phrases (80-150 caractères)\",\r\n      errorCount: \"2-3 erreurs par exercice\",\r\n      errorTypes: [\"Intermediate grammar\", \"Tense usage\", \"Prepositions\"],\r\n      difficulty: \"Facile\",\r\n      focus: \"Erreurs communes, inférences simples\",\r\n    },\r\n    B1: {\r\n      name: \"Intermédiaire\",\r\n      textLength: \"3-4 phrases (120-200 caractères)\",\r\n      errorCount: \"3-4 erreurs par exercice\",\r\n      errorTypes: [\"Complex tenses\", \"Passive voice\", \"Reported speech\"],\r\n      difficulty: \"Modéré\",\r\n      focus: \"Erreurs subtiles, analyse requise\",\r\n    },\r\n    B2: {\r\n      name: \"Intermédiaire avancé\",\r\n      textLength: \"4-5 phrases (150-250 caractères)\",\r\n      errorCount: \"4-5 erreurs par exercice\",\r\n      errorTypes: [\"Advanced conditionals\", \"Register\", \"Discourse markers\"],\r\n      difficulty: \"Difficile\",\r\n      focus: \"Nuances grammaticales et stylistiques\",\r\n    },\r\n    C1: {\r\n      name: \"Autonome\",\r\n      textLength: \"5-6 phrases (200-300 caractères)\",\r\n      errorCount: \"5-6 erreurs par exercice\",\r\n      errorTypes: [\r\n        \"Sophisticated structures\",\r\n        \"Cultural references\",\r\n        \"Stylistic nuances\",\r\n      ],\r\n      difficulty: \"Très difficile\",\r\n      focus: \"Erreurs sophistiquées, analyse approfondie\",\r\n    },\r\n    C2: {\r\n      name: \"Maîtrise\",\r\n      textLength: \"6-8 phrases (250-400 caractères)\",\r\n      errorCount: \"6-8 erreurs par exercice\",\r\n      errorTypes: [\"Literary language\", \"Archaic forms\", \"Creative expression\"],\r\n      difficulty: \"Expert\",\r\n      focus: \"Subtilités linguistiques maximales\",\r\n    },\r\n  };\r\n\r\n  return characteristics[level] || characteristics.A1;\r\n};\r\n\r\n/**\r\n * Récupère les statistiques d'exercices pour un niveau donné\r\n * @param {string} level - Le niveau de langue\r\n * @returns {Object} Statistiques des exercices (nombre, types, catégories, etc.)\r\n */\r\nexport const getErrorCorrectionStats = (level) => {\r\n  const stats = {\r\n    exerciseCount: 0,\r\n    totalQuestions: 0,\r\n    categoryCount: 0,\r\n    typeDistribution: {\r\n      full: 0,\r\n      identify: 0,\r\n      multiple_choice: 0,\r\n    },\r\n    categories: [],\r\n    averageTextLength: 0,\r\n    totalErrorPositions: 0,\r\n  };\r\n\r\n  try {\r\n    const data = getErrorsData(level);\r\n\r\n    if (data?.exercises) {\r\n      stats.exerciseCount = data.exercises.length;\r\n      stats.totalQuestions = data.exercises.length; // Chaque exercice = 1 question\r\n      stats.categoryCount = data.categories?.length || 0;\r\n\r\n      // Distribution par type\r\n      if (data.statistics) {\r\n        stats.typeDistribution = {\r\n          full: data.statistics.full || 0,\r\n          identify: data.statistics.identify || 0,\r\n          multiple_choice: data.statistics.multiple_choice || 0,\r\n        };\r\n      }\r\n\r\n      // Informations sur les catégories\r\n      if (data.categories) {\r\n        stats.categories = data.categories.map((cat) => ({\r\n          id: cat.id,\r\n          name: cat.name,\r\n          count: cat.exerciseCount || 0,\r\n          difficulty: cat.difficulty || \"Unknown\",\r\n        }));\r\n      }\r\n\r\n      // Calcul longueur moyenne des textes\r\n      const textLengths = data.exercises.map((ex) =>\r\n        ex.text ? ex.text.length : 0\r\n      );\r\n      stats.averageTextLength =\r\n        textLengths.length > 0\r\n          ? Math.round(\r\n              textLengths.reduce((a, b) => a + b, 0) / textLengths.length\r\n            )\r\n          : 0;\r\n\r\n      // Calcul total des positions d'erreurs\r\n      stats.totalErrorPositions = data.exercises\r\n        .filter((ex) => ex.errorPositions)\r\n        .reduce((total, ex) => total + ex.errorPositions.length, 0);\r\n    }\r\n  } catch (error) {\r\n    console.warn(`Error calculating stats for level ${level}:`, error);\r\n  }\r\n\r\n  return stats;\r\n};\r\n\r\n/**\r\n * Récupère les statistiques globales pour tous les niveaux implémentés\r\n * @returns {Object} Statistiques complètes du programme d'error correction\r\n */\r\nexport const getGlobalErrorCorrectionStats = () => {\r\n  const levels = [\"A1\", \"A2\", \"B1\", \"B2\", \"C1\", \"C2\"];\r\n  const globalStats = {\r\n    totalExercises: 0,\r\n    totalQuestions: 0,\r\n    totalCategories: 0,\r\n    byLevel: {},\r\n    byType: {\r\n      full: 0,\r\n      identify: 0,\r\n      multiple_choice: 0,\r\n    },\r\n    implementedLevels: 6, // Maintenant tous les niveaux sont implémentés\r\n    progression: [],\r\n  };\r\n\r\n  levels.forEach((level) => {\r\n    const levelStats = getErrorCorrectionStats(level);\r\n    globalStats.byLevel[level] = levelStats;\r\n\r\n    if (levelStats.exerciseCount > 0) {\r\n      globalStats.totalExercises += levelStats.exerciseCount;\r\n      globalStats.totalQuestions += levelStats.totalQuestions;\r\n      globalStats.totalCategories += levelStats.categoryCount;\r\n\r\n      // Cumul par type\r\n      globalStats.byType.full += levelStats.typeDistribution.full;\r\n      globalStats.byType.identify += levelStats.typeDistribution.identify;\r\n      globalStats.byType.multiple_choice +=\r\n        levelStats.typeDistribution.multiple_choice;\r\n\r\n      // Progression des niveaux\r\n      globalStats.progression.push({\r\n        level,\r\n        exercises: levelStats.exerciseCount,\r\n        difficulty: getLevelCharacteristics(level).difficulty,\r\n      });\r\n    }\r\n  });\r\n\r\n  return globalStats;\r\n};\r\n\r\n/**\r\n * Récupère les exercices par catégorie pour un niveau donné\r\n * @param {string} level - Le niveau de langue\r\n * @param {number} categoryId - L'ID de la catégorie\r\n * @returns {Array} Liste des exercices de la catégorie\r\n */\r\nexport const getExercisesByCategory = (level, categoryId) => {\r\n  const data = getErrorsData(level);\r\n  \r\n  if (data?.getExercisesByCategory) {\r\n    return data.getExercisesByCategory(categoryId);\r\n  }\r\n  \r\n  return data?.exercises?.filter((ex) => ex.categoryId === categoryId) || [];\r\n};\r\n\r\n/**\r\n * Récupère les exercices par type pour un niveau donné\r\n * @param {string} level - Le niveau de langue\r\n * @param {string} type - Le type d'exercice (full, identify, multiple_choice)\r\n * @returns {Array} Liste des exercices du type spécifié\r\n */\r\nexport const getExercisesByType = (level, type) => {\r\n  const data = getErrorsData(level);\r\n  \r\n  if (data?.getExercisesByType) {\r\n    return data.getExercisesByType(type);\r\n  }\r\n  \r\n  return data?.exercises?.filter((ex) => ex.type === type) || [];\r\n};\r\n\r\n/**\r\n * Récupère les exercices par catégorie ET type\r\n * @param {string} level - Le niveau de langue\r\n * @param {number} categoryId - L'ID de la catégorie\r\n * @param {string} type - Le type d'exercice\r\n * @returns {Array} Liste des exercices filtrés\r\n */\r\nexport const getExercisesByCategoryAndType = (level, categoryId, type) => {\r\n  const data = getErrorsData(level);\r\n  \r\n  if (data?.getExercisesByCategoryAndType) {\r\n    return data.getExercisesByCategoryAndType(categoryId, type);\r\n  }\r\n  \r\n  return (\r\n    data?.exercises?.filter(\r\n      (ex) => ex.categoryId === categoryId && ex.type === type\r\n    ) || []\r\n  );\r\n};\r\n\r\n/**\r\n * Valide qu'un exercice d'error correction a la structure correcte\r\n * @param {Object} exercise - L'exercice à valider\r\n * @returns {boolean} True si l'exercice est valide\r\n */\r\nexport const validateErrorCorrectionExercise = (exercise) => {\r\n  if (!exercise || typeof exercise !== \"object\") {\r\n    return false;\r\n  }\r\n\r\n  // Champs requis pour tous les types\r\n  const requiredFields = [\r\n    \"categoryId\",\r\n    \"type\",\r\n    \"text\",\r\n    \"correctedText\",\r\n    \"hint\",\r\n    \"explanation\",\r\n  ];\r\n\r\n  for (const field of requiredFields) {\r\n    if (!exercise[field]) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Validation des types autorisés\r\n  const validTypes = [\"full\", \"identify\", \"multiple_choice\"];\r\n  if (!validTypes.includes(exercise.type)) {\r\n    return false;\r\n  }\r\n\r\n  // Validation spécifique par type\r\n  if (exercise.type === \"multiple_choice\") {\r\n    if (\r\n      !exercise.choices ||\r\n      !Array.isArray(exercise.choices) ||\r\n      exercise.choices.length < 2\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    if (\r\n      typeof exercise.correctChoiceIndex !== \"number\" ||\r\n      exercise.correctChoiceIndex < 0 ||\r\n      exercise.correctChoiceIndex >= exercise.choices.length\r\n    ) {\r\n      return false;\r\n    }\r\n  } else if (!exercise.errorPositions || !Array.isArray(exercise.errorPositions)) {\r\n    // Pour \"full\" et \"identify\", errorPositions est requis\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\n/**\r\n * Valide toutes les données d'un niveau donné\r\n * @param {string} level - Le niveau à valider\r\n * @returns {Object} Résultat de la validation avec détails\r\n */\r\nexport const validateErrorCorrectionData = (level) => {\r\n  const data = getErrorsData(level);\r\n\r\n  if (!data?.exercises) {\r\n    return {\r\n      valid: false,\r\n      error: \"No error correction data found\",\r\n      exerciseCount: 0,\r\n    };\r\n  }\r\n\r\n  const results = {\r\n    valid: true,\r\n    exerciseCount: data.exercises.length,\r\n    invalidExercises: [],\r\n    errors: [],\r\n    categoryCount: data.categories?.length ?? 0,\r\n    typeDistribution: {\r\n      full: 0,\r\n      identify: 0,\r\n      multiple_choice: 0,\r\n    },\r\n  };\r\n\r\n  // Validation des exercices\r\n  data.exercises.forEach((exercise, index) => {\r\n    if (!validateErrorCorrectionExercise(exercise)) {\r\n      results.valid = false;\r\n      results.invalidExercises.push(index);\r\n      results.errors.push(\r\n        `Exercise ${index + 1} (category ${\r\n          exercise.categoryId ?? \"unknown\"\r\n        }) is invalid`\r\n      );\r\n    } else if (results.typeDistribution.hasOwnProperty(exercise.type)) {\r\n      // Comptage par type\r\n      results.typeDistribution[exercise.type]++;\r\n    }\r\n  });\r\n\r\n  // Validation de la structure du niveau\r\n  if (data.validateStructure && !data.validateStructure()) {\r\n    results.valid = false;\r\n    results.errors.push(\"Level structure validation failed\");\r\n  }\r\n\r\n  return results;\r\n};\r\n\r\n/**\r\n * Récupère un exercice aléatoire d'un niveau et type donnés\r\n * @param {string} level - Le niveau de langue\r\n * @param {string} type - Le type d'exercice (optionnel)\r\n * @param {number} categoryId - L'ID de la catégorie (optionnel)\r\n * @returns {Object|null} Un exercice aléatoire ou null si aucun trouvé\r\n */\r\nexport const getRandomErrorCorrectionExercise = (\r\n  level,\r\n  type = null,\r\n  categoryId = null\r\n) => {\r\n  const data = getErrorsData(level);\r\n\r\n  if (!data?.exercises?.length) {\r\n    return null;\r\n  }\r\n\r\n  let filteredExercises = data.exercises;\r\n\r\n  // Filtrage par type si spécifié\r\n  if (type) {\r\n    filteredExercises = filteredExercises.filter((ex) => ex.type === type);\r\n  }\r\n\r\n  // Filtrage par catégorie si spécifiée\r\n  if (categoryId) {\r\n    filteredExercises = filteredExercises.filter(\r\n      (ex) => ex.categoryId === categoryId\r\n    );\r\n  }\r\n\r\n  if (filteredExercises.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const randomIndex = Math.floor(Math.random() * filteredExercises.length);\r\n  return {\r\n    ...filteredExercises[randomIndex],\r\n    index: randomIndex,\r\n    totalCount: filteredExercises.length,\r\n    level,\r\n  };\r\n};\r\n\r\n/**\r\n * Récupère les informations d'un mode d'exercice\r\n * @param {string} mode - Le mode (full, identify, multiple_choice)\r\n * @returns {Object} Informations sur le mode\r\n */\r\nexport const getModeInfo = (mode) => {\r\n  const modes = {\r\n    full: {\r\n      name: \"Full Correction\",\r\n      description: \"Rewrite the entire text correcting all errors\",\r\n      difficulty: \"Hard\",\r\n      icon: \"✏️\",\r\n      color: \"#ef4444\",\r\n    },\r\n    identify: {\r\n      name: \"Identify Errors\",\r\n      description: \"Click on words that contain errors\",\r\n      difficulty: \"Medium\",\r\n      icon: \"🔍\",\r\n      color: \"#f59e0b\",\r\n    },\r\n    multiple_choice: {\r\n      name: \"Multiple Choice\",\r\n      description: \"Choose the correct option from multiple choices\",\r\n      difficulty: \"Easy\",\r\n      icon: \"✅\",\r\n      color: \"#10b981\",\r\n    },\r\n  };\r\n\r\n  return modes[mode] ?? modes.full;\r\n};\r\n\r\n/**\r\n * Récupère des exercices recommandés basés sur les performances\r\n * @param {string} level - Le niveau actuel\r\n * @param {Array} completedExercises - Liste des exercices complétés\r\n * @param {Object} performance - Statistiques de performance\r\n * @returns {Array} Exercices recommandés\r\n */\r\nexport const getRecommendedExercises = (\r\n  level,\r\n  completedExercises = [],\r\n  performance = {}\r\n) => {\r\n  const data = getErrorsData(level);\r\n\r\n  if (!data?.exercises) {\r\n    return [];\r\n  }\r\n\r\n  // Filtrer les exercices non complétés\r\n  const availableExercises = data.exercises.filter(\r\n    (ex) => !completedExercises.includes(`${ex.categoryId}_${ex.type}`)\r\n  );\r\n\r\n  // Si pas de données de performance, retourner des exercices variés\r\n  if (!performance?.weakCategories) {\r\n    return availableExercises.slice(0, 5);\r\n  }\r\n\r\n  // Prioriser les catégories faibles\r\n  const recommendedExercises = [];\r\n\r\n  performance.weakCategories.forEach((categoryId) => {\r\n    const categoryExercises = availableExercises.filter(\r\n      (ex) => ex.categoryId === categoryId\r\n    );\r\n    recommendedExercises.push(...categoryExercises.slice(0, 2));\r\n  });\r\n\r\n  return recommendedExercises.slice(0, 5);\r\n};\r\n\r\n/**\r\n * Export des niveaux disponibles avec leurs métadonnées\r\n */\r\nexport const getAvailableLevels = () => {\r\n  return [\r\n    {\r\n      level: \"A1\",\r\n      name: \"Débutant\",\r\n      exercises: getErrorCorrectionStats(\"A1\").exerciseCount,\r\n    },\r\n    {\r\n      level: \"A2\",\r\n      name: \"Élémentaire\",\r\n      exercises: getErrorCorrectionStats(\"A2\").exerciseCount,\r\n    },\r\n    {\r\n      level: \"B1\",\r\n      name: \"Intermédiaire\",\r\n      exercises: getErrorCorrectionStats(\"B1\").exerciseCount,\r\n    },\r\n    {\r\n      level: \"B2\",\r\n      name: \"Intermédiaire avancé\",\r\n      exercises: getErrorCorrectionStats(\"B2\").exerciseCount,\r\n    },\r\n    {\r\n      level: \"C1\",\r\n      name: \"Autonome\",\r\n      exercises: getErrorCorrectionStats(\"C1\").exerciseCount,\r\n    },\r\n    {\r\n      level: \"C2\",\r\n      name: \"Maîtrise\",\r\n      exercises: getErrorCorrectionStats(\"C2\").exerciseCount,\r\n    },\r\n  ];\r\n};"],"mappings":"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","ignoreList":[]}