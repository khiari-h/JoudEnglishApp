c18aea24a5d390eff977dbff7817ec94
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _expoRouter = require("expo-router");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _RevisionPopup = _interopRequireDefault(require("../../Dashboard/components/popup/RevisionPopup"));
var _useRevisionSettings2 = require("../../../hooks/useRevisionSettings");
var _jsxRuntime = require("react/jsx-runtime");
var RevisionOrchestrator = function RevisionOrchestrator(_ref) {
  var _ref$currentLevel = _ref.currentLevel,
    currentLevel = _ref$currentLevel === void 0 ? "mixed" : _ref$currentLevel;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    showPopup = _useState2[0],
    setShowPopup = _useState2[1];
  var _useState3 = (0, _react.useState)(0),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    totalWords = _useState4[0],
    setTotalWords = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    isLoaded = _useState6[0],
    setIsLoaded = _useState6[1];
  var _useRevisionSettings = (0, _useRevisionSettings2.useRevisionSettings)(),
    preferences = _useRevisionSettings.preferences,
    disableRevisions = _useRevisionSettings.disableRevisions,
    resetToNextTarget = _useRevisionSettings.resetToNextTarget,
    updatePreferences = _useRevisionSettings.updatePreferences;
  var popupShownRef = (0, _react.useRef)(false);
  var countWords = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      try {
        var total = 0;
        var levels = ['1', '2', '3', '4', '5', '6', 'bonus'];
        var modes = ['classic', 'fast'];
        for (var level of levels) {
          for (var mode of modes) {
            var stored = yield _asyncStorage.default.getItem(`vocabulary_${level}_${mode}`);
            if (stored) {
              var data = JSON.parse(stored);
              var completedWords = data.completedWords || {};
              total += Object.values(completedWords).reduce(function (acc, words) {
                if (Array.isArray(words)) {
                  return acc + words.length;
                }
                return acc;
              }, 0);
            }
          }
        }
        setTotalWords(total);
        return total;
      } catch (error) {
        return 0;
      }
    });
    return function countWords() {
      return _ref2.apply(this, arguments);
    };
  }();
  (0, _react.useEffect)(function () {
    var initializeRevision = function () {
      var _ref3 = (0, _asyncToGenerator2.default)(function* () {
        yield countWords();
        setIsLoaded(true);
        var shouldShow = !preferences.isDisabled && totalWords >= preferences.nextRevisionAt && totalWords > 0 && !popupShownRef.current;
        if (shouldShow) {
          popupShownRef.current = true;
          setTimeout(function () {
            return setShowPopup(true);
          }, 1000);
        }
      });
      return function initializeRevision() {
        return _ref3.apply(this, arguments);
      };
    }();
    initializeRevision();
  }, [preferences.isDisabled, preferences.nextRevisionAt]);
  (0, _react.useEffect)(function () {
    if (!isLoaded) return;
    var shouldShow = !preferences.isDisabled && totalWords >= preferences.nextRevisionAt && totalWords > 0 && !popupShownRef.current;
    if (shouldShow) {
      popupShownRef.current = true;
      setTimeout(function () {
        return setShowPopup(true);
      }, 1000);
    }
  }, [isLoaded, preferences.isDisabled, preferences.nextRevisionAt, totalWords]);
  var handleChoice = (0, _react.useCallback)(function () {
    var _ref4 = (0, _asyncToGenerator2.default)(function* (choice) {
      setShowPopup(false);
      popupShownRef.current = false;
      switch (choice) {
        case 'now':
          {
            yield resetToNextTarget(totalWords);
            _expoRouter.router.push({
              pathname: "/tabs/vocabularyRevision",
              params: {
                level: currentLevel,
                questionsCount: preferences.questionsCount,
                source: 'popup_trigger'
              }
            });
            break;
          }
        case 'later_50':
          {
            var next50 = totalWords + 50;
            yield updatePreferences({
              nextRevisionAt: next50
            });
            break;
          }
        case 'later_100':
          {
            var next100 = totalWords + 100;
            yield updatePreferences({
              nextRevisionAt: next100
            });
            break;
          }
        case 'disable':
          {
            yield disableRevisions();
            break;
          }
        default:
          {
            var defaultNext = totalWords + 50;
            yield updatePreferences({
              nextRevisionAt: defaultNext
            });
            break;
          }
      }
    });
    return function (_x) {
      return _ref4.apply(this, arguments);
    };
  }(), [totalWords, disableRevisions, resetToNextTarget, updatePreferences, currentLevel, preferences.questionsCount]);
  var handleDismiss = (0, _react.useCallback)(function () {
    return handleChoice('later_50');
  }, [handleChoice]);
  if (preferences.isDisabled) {
    return null;
  }
  return (0, _jsxRuntime.jsx)(_RevisionPopup.default, {
    visible: showPopup,
    totalWordsLearned: totalWords,
    questionsCount: preferences.questionsCount,
    currentLevel: currentLevel,
    onChoice: handleChoice,
    onDismiss: handleDismiss
  });
};
RevisionOrchestrator.propTypes = {
  currentLevel: _propTypes.default.string.isRequired
};
var _default = exports.default = RevisionOrchestrator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX2V4cG9Sb3V0ZXIiLCJfYXN5bmNTdG9yYWdlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9wcm9wVHlwZXMiLCJfUmV2aXNpb25Qb3B1cCIsIl91c2VSZXZpc2lvblNldHRpbmdzMiIsIl9qc3hSdW50aW1lIiwiUmV2aXNpb25PcmNoZXN0cmF0b3IiLCJfcmVmIiwiX3JlZiRjdXJyZW50TGV2ZWwiLCJjdXJyZW50TGV2ZWwiLCJfdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsIl91c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheTIiLCJkZWZhdWx0Iiwic2hvd1BvcHVwIiwic2V0U2hvd1BvcHVwIiwiX3VzZVN0YXRlMyIsIl91c2VTdGF0ZTQiLCJ0b3RhbFdvcmRzIiwic2V0VG90YWxXb3JkcyIsIl91c2VTdGF0ZTUiLCJfdXNlU3RhdGU2IiwiaXNMb2FkZWQiLCJzZXRJc0xvYWRlZCIsIl91c2VSZXZpc2lvblNldHRpbmdzIiwidXNlUmV2aXNpb25TZXR0aW5ncyIsInByZWZlcmVuY2VzIiwiZGlzYWJsZVJldmlzaW9ucyIsInJlc2V0VG9OZXh0VGFyZ2V0IiwidXBkYXRlUHJlZmVyZW5jZXMiLCJwb3B1cFNob3duUmVmIiwidXNlUmVmIiwiY291bnRXb3JkcyIsIl9yZWYyIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwidG90YWwiLCJsZXZlbHMiLCJtb2RlcyIsImxldmVsIiwibW9kZSIsInN0b3JlZCIsIkFzeW5jU3RvcmFnZSIsImdldEl0ZW0iLCJkYXRhIiwiSlNPTiIsInBhcnNlIiwiY29tcGxldGVkV29yZHMiLCJPYmplY3QiLCJ2YWx1ZXMiLCJyZWR1Y2UiLCJhY2MiLCJ3b3JkcyIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsImVycm9yIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJ1c2VFZmZlY3QiLCJpbml0aWFsaXplUmV2aXNpb24iLCJfcmVmMyIsInNob3VsZFNob3ciLCJpc0Rpc2FibGVkIiwibmV4dFJldmlzaW9uQXQiLCJjdXJyZW50Iiwic2V0VGltZW91dCIsImhhbmRsZUNob2ljZSIsInVzZUNhbGxiYWNrIiwiX3JlZjQiLCJjaG9pY2UiLCJyb3V0ZXIiLCJwdXNoIiwicGF0aG5hbWUiLCJwYXJhbXMiLCJxdWVzdGlvbnNDb3VudCIsInNvdXJjZSIsIm5leHQ1MCIsIm5leHQxMDAiLCJkZWZhdWx0TmV4dCIsIl94IiwiaGFuZGxlRGlzbWlzcyIsImpzeCIsInZpc2libGUiLCJ0b3RhbFdvcmRzTGVhcm5lZCIsIm9uQ2hvaWNlIiwib25EaXNtaXNzIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwic3RyaW5nIiwiaXNSZXF1aXJlZCIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9jb21wb25lbnRzL3JldmlzaW9uL1JldmlzaW9uT3JjaGVzdHJhdG9yL2luZGV4LmpzIC0gVkVSU0lPTiBBVkVDIEhPT0sgUEFSVEFHw4lcclxuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSwgdXNlUmVmLCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgcm91dGVyIH0gZnJvbSAnZXhwby1yb3V0ZXInO1xyXG5pbXBvcnQgQXN5bmNTdG9yYWdlIGZyb20gJ0ByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlJztcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJzsgLy8g4pyFIEltcG9ydCBkZSBQcm9wVHlwZXNcclxuaW1wb3J0IFJldmlzaW9uUG9wdXAgZnJvbSAnLi4vLi4vRGFzaGJvYXJkL2NvbXBvbmVudHMvcG9wdXAvUmV2aXNpb25Qb3B1cCc7XHJcbmltcG9ydCB7IHVzZVJldmlzaW9uU2V0dGluZ3MgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2VSZXZpc2lvblNldHRpbmdzJztcclxuXHJcbmNvbnN0IFJldmlzaW9uT3JjaGVzdHJhdG9yID0gKHsgY3VycmVudExldmVsID0gXCJtaXhlZFwiIH0pID0+IHtcclxuICBjb25zdCBbc2hvd1BvcHVwLCBzZXRTaG93UG9wdXBdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gIGNvbnN0IFt0b3RhbFdvcmRzLCBzZXRUb3RhbFdvcmRzXSA9IHVzZVN0YXRlKDApO1xyXG4gIGNvbnN0IFtpc0xvYWRlZCwgc2V0SXNMb2FkZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gIFxyXG4gIGNvbnN0IHsgXHJcbiAgICBwcmVmZXJlbmNlcywgXHJcbiAgICBkaXNhYmxlUmV2aXNpb25zLCBcclxuICAgIHJlc2V0VG9OZXh0VGFyZ2V0LFxyXG4gICAgdXBkYXRlUHJlZmVyZW5jZXMgXHJcbiAgfSA9IHVzZVJldmlzaW9uU2V0dGluZ3MoKTtcclxuICBcclxuICBjb25zdCBwb3B1cFNob3duUmVmID0gdXNlUmVmKGZhbHNlKTtcclxuXHJcbiAgLy8gPT09PT09PT09PSBDT01QVEFHRSBTSU1QTEUgKElOQ0hBTkfDiSkgPT09PT09PT09PVxyXG4gIGNvbnN0IGNvdW50V29yZHMgPSBhc3luYyAoKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBsZXQgdG90YWwgPSAwO1xyXG4gICAgICBjb25zdCBsZXZlbHMgPSBbJzEnLCAnMicsICczJywgJzQnLCAnNScsICc2JywgJ2JvbnVzJ107XHJcbiAgICAgIGNvbnN0IG1vZGVzID0gWydjbGFzc2ljJywgJ2Zhc3QnXTtcclxuXHJcbiAgICAgIGZvciAoY29uc3QgbGV2ZWwgb2YgbGV2ZWxzKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBtb2RlIG9mIG1vZGVzKSB7XHJcbiAgICAgICAgICBjb25zdCBzdG9yZWQgPSBhd2FpdCBBc3luY1N0b3JhZ2UuZ2V0SXRlbShgdm9jYWJ1bGFyeV8ke2xldmVsfV8ke21vZGV9YCk7XHJcbiAgICAgICAgICBpZiAoc3RvcmVkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKHN0b3JlZCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbXBsZXRlZFdvcmRzID0gZGF0YS5jb21wbGV0ZWRXb3JkcyB8fCB7fTtcclxuICAgICAgICAgICAgdG90YWwgKz0gT2JqZWN0LnZhbHVlcyhjb21wbGV0ZWRXb3JkcykucmVkdWNlKChhY2MsIHdvcmRzKSA9PiB7XHJcbiAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkod29yZHMpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjICsgd29yZHMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICByZXR1cm4gYWNjO1xyXG4gICAgICAgICAgICB9LCAwKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNldFRvdGFsV29yZHModG90YWwpO1xyXG4gICAgICByZXR1cm4gdG90YWw7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyA9PT09PT09PT09IENIQVJHRU1FTlQgSU5JVElBTCBFVCBWw4lSSUZJQ0FUSU9OIFLDiVZJU0lPTiA9PT09PT09PT09XHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGNvbnN0IGluaXRpYWxpemVSZXZpc2lvbiA9IGFzeW5jICgpID0+IHtcclxuICAgICAgYXdhaXQgY291bnRXb3JkcygpO1xyXG4gICAgICBzZXRJc0xvYWRlZCh0cnVlKTtcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHNob3VsZFNob3cgPSAhcHJlZmVyZW5jZXMuaXNEaXNhYmxlZCAmJiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbFdvcmRzID49IHByZWZlcmVuY2VzLm5leHRSZXZpc2lvbkF0ICYmIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsV29yZHMgPiAwICYmIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICFwb3B1cFNob3duUmVmLmN1cnJlbnQ7XHJcblxyXG4gICAgICBpZiAoc2hvdWxkU2hvdykge1xyXG4gICAgICAgIHBvcHVwU2hvd25SZWYuY3VycmVudCA9IHRydWU7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiBzZXRTaG93UG9wdXAodHJ1ZSksIDEwMDApO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGluaXRpYWxpemVSZXZpc2lvbigpO1xyXG4gIH0sIFtwcmVmZXJlbmNlcy5pc0Rpc2FibGVkLCBwcmVmZXJlbmNlcy5uZXh0UmV2aXNpb25BdF0pO1xyXG5cclxuICAvLyA9PT09PT09PT09IFbDiVJJRklDQVRJT04gUsOJVklTSU9OIFFVQU5EIExFUyBQUkVGRVJFTkNFUyBDSEFOR0VOVCA9PT09PT09PT09XHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmICghaXNMb2FkZWQpIHJldHVybjtcclxuICAgIFxyXG4gICAgY29uc3Qgc2hvdWxkU2hvdyA9ICFwcmVmZXJlbmNlcy5pc0Rpc2FibGVkICYmIFxyXG4gICAgICAgICAgICAgICAgICAgICAgdG90YWxXb3JkcyA+PSBwcmVmZXJlbmNlcy5uZXh0UmV2aXNpb25BdCAmJiBcclxuICAgICAgICAgICAgICAgICAgICAgIHRvdGFsV29yZHMgPiAwICYmIFxyXG4gICAgICAgICAgICAgICAgICAgICAgIXBvcHVwU2hvd25SZWYuY3VycmVudDtcclxuXHJcbiAgICBpZiAoc2hvdWxkU2hvdykge1xyXG4gICAgICBwb3B1cFNob3duUmVmLmN1cnJlbnQgPSB0cnVlO1xyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHNldFNob3dQb3B1cCh0cnVlKSwgMTAwMCk7XHJcbiAgICB9XHJcbiAgfSwgW2lzTG9hZGVkLCBwcmVmZXJlbmNlcy5pc0Rpc2FibGVkLCBwcmVmZXJlbmNlcy5uZXh0UmV2aXNpb25BdCwgdG90YWxXb3Jkc10pO1xyXG5cclxuICAvLyA9PT09PT09PT09IEhBTkRMRVJTIEFWRUMgSE9PSyBQQVJUQUfDiSA9PT09PT09PT09XHJcbiAgY29uc3QgaGFuZGxlQ2hvaWNlID0gdXNlQ2FsbGJhY2soYXN5bmMgKGNob2ljZSkgPT4ge1xyXG4gICAgc2V0U2hvd1BvcHVwKGZhbHNlKTtcclxuICAgIHBvcHVwU2hvd25SZWYuY3VycmVudCA9IGZhbHNlO1xyXG4gICAgXHJcbiAgICBzd2l0Y2ggKGNob2ljZSkge1xyXG4gICAgICBjYXNlICdub3cnOiB7XHJcbiAgICAgICAgYXdhaXQgcmVzZXRUb05leHRUYXJnZXQodG90YWxXb3Jkcyk7XHJcbiAgICAgICAgcm91dGVyLnB1c2goe1xyXG4gICAgICAgICAgcGF0aG5hbWU6IFwiL3RhYnMvdm9jYWJ1bGFyeVJldmlzaW9uXCIsXHJcbiAgICAgICAgICBwYXJhbXM6IHtcclxuICAgICAgICAgICAgbGV2ZWw6IGN1cnJlbnRMZXZlbCxcclxuICAgICAgICAgICAgcXVlc3Rpb25zQ291bnQ6IHByZWZlcmVuY2VzLnF1ZXN0aW9uc0NvdW50LFxyXG4gICAgICAgICAgICBzb3VyY2U6ICdwb3B1cF90cmlnZ2VyJ1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ2xhdGVyXzUwJzoge1xyXG4gICAgICAgIGNvbnN0IG5leHQ1MCA9IHRvdGFsV29yZHMgKyA1MDtcclxuICAgICAgICBhd2FpdCB1cGRhdGVQcmVmZXJlbmNlcyh7IG5leHRSZXZpc2lvbkF0OiBuZXh0NTAgfSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnbGF0ZXJfMTAwJzoge1xyXG4gICAgICAgIGNvbnN0IG5leHQxMDAgPSB0b3RhbFdvcmRzICsgMTAwO1xyXG4gICAgICAgIGF3YWl0IHVwZGF0ZVByZWZlcmVuY2VzKHsgbmV4dFJldmlzaW9uQXQ6IG5leHQxMDAgfSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnZGlzYWJsZSc6IHtcclxuICAgICAgICBhd2FpdCBkaXNhYmxlUmV2aXNpb25zKCk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgZGVmYXVsdDoge1xyXG4gICAgICAgIGNvbnN0IGRlZmF1bHROZXh0ID0gdG90YWxXb3JkcyArIDUwO1xyXG4gICAgICAgIGF3YWl0IHVwZGF0ZVByZWZlcmVuY2VzKHsgbmV4dFJldmlzaW9uQXQ6IGRlZmF1bHROZXh0IH0pO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSwgW3RvdGFsV29yZHMsIGRpc2FibGVSZXZpc2lvbnMsIHJlc2V0VG9OZXh0VGFyZ2V0LCB1cGRhdGVQcmVmZXJlbmNlcywgY3VycmVudExldmVsLCBwcmVmZXJlbmNlcy5xdWVzdGlvbnNDb3VudF0pO1xyXG5cclxuICBjb25zdCBoYW5kbGVEaXNtaXNzID0gdXNlQ2FsbGJhY2soKCkgPT4gaGFuZGxlQ2hvaWNlKCdsYXRlcl81MCcpLCBbaGFuZGxlQ2hvaWNlXSk7XHJcblxyXG4gIGlmIChwcmVmZXJlbmNlcy5pc0Rpc2FibGVkKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8UmV2aXNpb25Qb3B1cFxyXG4gICAgICB2aXNpYmxlPXtzaG93UG9wdXB9XHJcbiAgICAgIHRvdGFsV29yZHNMZWFybmVkPXt0b3RhbFdvcmRzfVxyXG4gICAgICBxdWVzdGlvbnNDb3VudD17cHJlZmVyZW5jZXMucXVlc3Rpb25zQ291bnR9XHJcbiAgICAgIGN1cnJlbnRMZXZlbD17Y3VycmVudExldmVsfVxyXG4gICAgICBvbkNob2ljZT17aGFuZGxlQ2hvaWNlfVxyXG4gICAgICBvbkRpc21pc3M9e2hhbmRsZURpc21pc3N9XHJcbiAgICAvPlxyXG4gICk7XHJcbn07XHJcblxyXG4vLyDinIUgQWpvdXQgZGUgbGEgdmFsaWRhdGlvbiBkZXMgcHJvcHNcclxuUmV2aXNpb25PcmNoZXN0cmF0b3IucHJvcFR5cGVzID0ge1xyXG4gIGN1cnJlbnRMZXZlbDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxy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LENBQUMsQ0FBQztZQUNuRDtVQUNGO1FBQ0EsS0FBSyxXQUFXO1VBQUU7WUFDaEIsSUFBTUMsT0FBTyxHQUFHM0QsVUFBVSxHQUFHLEdBQUc7WUFDaEMsTUFBTVcsaUJBQWlCLENBQUM7Y0FBRWtDLGNBQWMsRUFBRWM7WUFBUSxDQUFDLENBQUM7WUFDcEQ7VUFDRjtRQUNBLEtBQUssU0FBUztVQUFFO1lBQ2QsTUFBTWxELGdCQUFnQixDQUFDLENBQUM7WUFDeEI7VUFDRjtRQUNBO1VBQVM7WUFDUCxJQUFNbUQsV0FBVyxHQUFHNUQsVUFBVSxHQUFHLEVBQUU7WUFDbkMsTUFBTVcsaUJBQWlCLENBQUM7Y0FBRWtDLGNBQWMsRUFBRWU7WUFBWSxDQUFDLENBQUM7WUFDeEQ7VUFDRjtNQUNGO0lBQ0YsQ0FBQztJQUFBLGlCQUFBQyxFQUFBO01BQUEsT0FBQVgsS0FBQSxDQUFBWixLQUFBLE9BQUFDLFNBQUE7SUFBQTtFQUFBLEtBQUUsQ0FBQ3ZDLFVBQVUsRUFBRVMsZ0JBQWdCLEVBQUVDLGlCQUFpQixFQUFFQyxpQkFBaUIsRUFBRXJCLFlBQVksRUFBRWtCLFdBQVcsQ0FBQ2dELGNBQWMsQ0FBQyxDQUFDO0VBRWxILElBQU1NLGFBQWEsR0FBRyxJQUFBYixrQkFBVyxFQUFDO0lBQUEsT0FBTUQsWUFBWSxDQUFDLFVBQVUsQ0FBQztFQUFBLEdBQUUsQ0FBQ0EsWUFBWSxDQUFDLENBQUM7RUFFakYsSUFBSXhDLFdBQVcsQ0FBQ29DLFVBQVUsRUFBRTtJQUMxQixPQUFPLElBQUk7RUFDYjtFQUVBLE9BQ0UsSUFBQTFELFdBQUEsQ0FBQTZFLEdBQUEsRUFBQy9FLGNBQUEsQ0FBQVcsT0FBYTtJQUNacUUsT0FBTyxFQUFFcEUsU0FBVTtJQUNuQnFFLGlCQUFpQixFQUFFakUsVUFBVztJQUM5QndELGNBQWMsRUFBRWhELFdBQVcsQ0FBQ2dELGNBQWU7SUFDM0NsRSxZQUFZLEVBQUVBLFlBQWE7SUFDM0I0RSxRQUFRLEVBQUVsQixZQUFhO0lBQ3ZCbUIsU0FBUyxFQUFFTDtFQUFjLENBQzFCLENBQUM7QUFFTixDQUFDO0FBR0QzRSxvQkFBb0IsQ0FBQ2lGLFNBQVMsR0FBRztFQUMvQjlFLFlBQVksRUFBRStFLGtCQUFTLENBQUNDLE1BQU0sQ0FBQ0M7QUFDakMsQ0FBQztBQUFDLElBQUFDLFFBQUEsR0FBQUMsT0FBQSxDQUFBOUUsT0FBQSxHQUVhUixvQkFBb0IiLCJpZ25vcmVMaXN0IjpbXX0=