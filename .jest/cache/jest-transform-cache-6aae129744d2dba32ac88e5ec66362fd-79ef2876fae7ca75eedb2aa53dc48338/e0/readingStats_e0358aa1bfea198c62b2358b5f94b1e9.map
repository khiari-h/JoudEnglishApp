{"version":3,"names":["calculateTotalQuestions","exports","readingData","reduce","total","exercise","_exercise$questions","questions","length","calculateCompletedQuestionsCount","completedQuestions","Object","values","calculateTotalProgress","totalQuestions","completedCount","Math","round","calculateExerciseProgress","map","index","_exercise$questions2","_completedQuestions$i","progress","title"],"sources":["readingStats.js"],"sourcesContent":["// utils/reading/readingStats.js - Fonctions utilitaires (pattern identique Ã  vocabularyStats)\n\n/**\n * ðŸ“Š Utilitaires de calcul pour Reading\n * Pattern identique Ã  utils/vocabulary/vocabularyStats.js\n * Garde la logique mÃ©tier sÃ©parÃ©e des composants\n */\n\n/**\n * Calculer le nombre total de questions\n * @param {Array} readingData - DonnÃ©es de lecture [{ questions: [...] }]\n * @returns {number} Nombre total de questions\n */\nexport const calculateTotalQuestions = (readingData) => {\n  return readingData.reduce((total, exercise) => {\n    return total + (exercise.questions?.length || 0);\n  }, 0);\n};\n\n/**\n * Calculer le nombre de questions complÃ©tÃ©es\n * @param {Object} completedQuestions - Questions complÃ©tÃ©es {0: [0,1,2], 1: [0]}\n * @returns {number} Nombre de questions complÃ©tÃ©es\n */\nexport const calculateCompletedQuestionsCount = (completedQuestions) => {\n  return Object.values(completedQuestions).reduce((total, questions) => {\n    return total + (questions?.length || 0);\n  }, 0);\n};\n\n/**\n * Calculer la progression totale en pourcentage\n * @param {Array} readingData - DonnÃ©es de lecture\n * @param {Object} completedQuestions - Questions complÃ©tÃ©es\n * @returns {number} Pourcentage de progression (0-100)\n */\nexport const calculateTotalProgress = (readingData, completedQuestions) => {\n  const totalQuestions = calculateTotalQuestions(readingData);\n  const completedCount = calculateCompletedQuestionsCount(completedQuestions);\n  \n  return totalQuestions > 0 ? Math.round((completedCount / totalQuestions) * 100) : 0;\n};\n\n/**\n * Calculer la progression par exercice de lecture\n * @param {Array} readingData - DonnÃ©es de lecture\n * @param {Object} completedQuestions - Questions complÃ©tÃ©es\n * @returns {Array} Progression par exercice\n */\nexport const calculateExerciseProgress = (readingData, completedQuestions) => {\n  return readingData.map((exercise, index) => {\n    const totalQuestions = exercise.questions?.length || 0;\n    const completedCount = completedQuestions[index]?.length || 0;\n    const progress = totalQuestions > 0 ? (completedCount / totalQuestions) * 100 : 0;\n    \n    return {\n      title: exercise.title,\n      totalQuestions,\n      completedQuestions: completedCount,\n      progress: Math.round(progress),\n    };\n  });\n};"],"mappings":";;;;AAaO,IAAMA,uBAAuB,GAAAC,OAAA,CAAAD,uBAAA,GAAG,SAA1BA,uBAAuBA,CAAIE,WAAW,EAAK;EACtD,OAAOA,WAAW,CAACC,MAAM,CAAC,UAACC,KAAK,EAAEC,QAAQ,EAAK;IAAA,IAAAC,mBAAA;IAC7C,OAAOF,KAAK,IAAI,EAAAE,mBAAA,GAAAD,QAAQ,CAACE,SAAS,qBAAlBD,mBAAA,CAAoBE,MAAM,KAAI,CAAC,CAAC;EAClD,CAAC,EAAE,CAAC,CAAC;AACP,CAAC;AAOM,IAAMC,gCAAgC,GAAAR,OAAA,CAAAQ,gCAAA,GAAG,SAAnCA,gCAAgCA,CAAIC,kBAAkB,EAAK;EACtE,OAAOC,MAAM,CAACC,MAAM,CAACF,kBAAkB,CAAC,CAACP,MAAM,CAAC,UAACC,KAAK,EAAEG,SAAS,EAAK;IACpE,OAAOH,KAAK,IAAI,CAAAG,SAAS,oBAATA,SAAS,CAAEC,MAAM,KAAI,CAAC,CAAC;EACzC,CAAC,EAAE,CAAC,CAAC;AACP,CAAC;AAQM,IAAMK,sBAAsB,GAAAZ,OAAA,CAAAY,sBAAA,GAAG,SAAzBA,sBAAsBA,CAAIX,WAAW,EAAEQ,kBAAkB,EAAK;EACzE,IAAMI,cAAc,GAAGd,uBAAuB,CAACE,WAAW,CAAC;EAC3D,IAAMa,cAAc,GAAGN,gCAAgC,CAACC,kBAAkB,CAAC;EAE3E,OAAOI,cAAc,GAAG,CAAC,GAAGE,IAAI,CAACC,KAAK,CAAEF,cAAc,GAAGD,cAAc,GAAI,GAAG,CAAC,GAAG,CAAC;AACrF,CAAC;AAQM,IAAMI,yBAAyB,GAAAjB,OAAA,CAAAiB,yBAAA,GAAG,SAA5BA,yBAAyBA,CAAIhB,WAAW,EAAEQ,kBAAkB,EAAK;EAC5E,OAAOR,WAAW,CAACiB,GAAG,CAAC,UAACd,QAAQ,EAAEe,KAAK,EAAK;IAAA,IAAAC,oBAAA,EAAAC,qBAAA;IAC1C,IAAMR,cAAc,GAAG,EAAAO,oBAAA,GAAAhB,QAAQ,CAACE,SAAS,qBAAlBc,oBAAA,CAAoBb,MAAM,KAAI,CAAC;IACtD,IAAMO,cAAc,GAAG,EAAAO,qBAAA,GAAAZ,kBAAkB,CAACU,KAAK,CAAC,qBAAzBE,qBAAA,CAA2Bd,MAAM,KAAI,CAAC;IAC7D,IAAMe,QAAQ,GAAGT,cAAc,GAAG,CAAC,GAAIC,cAAc,GAAGD,cAAc,GAAI,GAAG,GAAG,CAAC;IAEjF,OAAO;MACLU,KAAK,EAAEnB,QAAQ,CAACmB,KAAK;MACrBV,cAAc,EAAdA,cAAc;MACdJ,kBAAkB,EAAEK,cAAc;MAClCQ,QAAQ,EAAEP,IAAI,CAACC,KAAK,CAACM,QAAQ;IAC/B,CAAC;EACH,CAAC,CAAC;AACJ,CAAC","ignoreList":[]}