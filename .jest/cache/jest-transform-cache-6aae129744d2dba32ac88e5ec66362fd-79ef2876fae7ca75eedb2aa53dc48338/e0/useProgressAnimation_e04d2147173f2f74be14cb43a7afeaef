17326b86facf07d0b8de36670e10b5b8
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useProgressAnimation;
var _react = require("react");
var _reactNative = require("react-native");
function useProgressAnimation(_ref) {
  var _ref$progress = _ref.progress,
    progress = _ref$progress === void 0 ? 0 : _ref$progress,
    _ref$animated = _ref.animated,
    animated = _ref$animated === void 0 ? true : _ref$animated,
    _ref$duration = _ref.duration,
    duration = _ref$duration === void 0 ? 600 : _ref$duration;
  var clamped = Math.min(Math.max(progress, 0), 100);
  var animatedValue = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
  var updateMethods = {
    animated: function animated(value) {
      _reactNative.Animated.timing(animatedValue, {
        toValue: value,
        duration: duration,
        useNativeDriver: false
      }).start();
    },
    instant: function instant(value) {
      animatedValue.setValue(value);
    }
  };
  (0, _react.useEffect)(function () {
    var updateMethod = animated ? updateMethods.animated : updateMethods.instant;
    updateMethod(clamped);
  }, [clamped, animated, duration, animatedValue]);
  var width = animatedValue.interpolate({
    inputRange: [0, 100],
    outputRange: ["0%", "100%"]
  });
  return {
    width: width
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlIiwidXNlUHJvZ3Jlc3NBbmltYXRpb24iLCJfcmVmIiwiX3JlZiRwcm9ncmVzcyIsInByb2dyZXNzIiwiX3JlZiRhbmltYXRlZCIsImFuaW1hdGVkIiwiX3JlZiRkdXJhdGlvbiIsImR1cmF0aW9uIiwiY2xhbXBlZCIsIk1hdGgiLCJtaW4iLCJtYXgiLCJhbmltYXRlZFZhbHVlIiwidXNlUmVmIiwiQW5pbWF0ZWQiLCJWYWx1ZSIsImN1cnJlbnQiLCJ1cGRhdGVNZXRob2RzIiwidmFsdWUiLCJ0aW1pbmciLCJ0b1ZhbHVlIiwidXNlTmF0aXZlRHJpdmVyIiwic3RhcnQiLCJpbnN0YW50Iiwic2V0VmFsdWUiLCJ1c2VFZmZlY3QiLCJ1cGRhdGVNZXRob2QiLCJ3aWR0aCIsImludGVycG9sYXRlIiwiaW5wdXRSYW5nZSIsIm91dHB1dFJhbmdlIl0sInNvdXJjZXMiOlsidXNlUHJvZ3Jlc3NBbmltYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2NvbXBvbmVudHMvdWkvUHJvZ3Jlc3NCYXIvdXNlUHJvZ3Jlc3NBbmltYXRpb24uanNcclxuXHJcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IEFuaW1hdGVkIH0gZnJvbSBcInJlYWN0LW5hdGl2ZVwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlUHJvZ3Jlc3NBbmltYXRpb24oe1xyXG4gIHByb2dyZXNzID0gMCxcclxuICBhbmltYXRlZCA9IHRydWUsXHJcbiAgZHVyYXRpb24gPSA2MDAsXHJcbn0pIHtcclxuICBjb25zdCBjbGFtcGVkID0gTWF0aC5taW4oTWF0aC5tYXgocHJvZ3Jlc3MsIDApLCAxMDApO1xyXG4gIGNvbnN0IGFuaW1hdGVkVmFsdWUgPSB1c2VSZWYobmV3IEFuaW1hdGVkLlZhbHVlKDApKS5jdXJyZW50O1xyXG5cclxuICAvLyBPbiBzdG9ja2UgbGVzIG3DqXRob2RlcyBkZSBtaXNlIMOgIGpvdXIgZGFucyB1biBvYmpldC5cclxuICBjb25zdCB1cGRhdGVNZXRob2RzID0ge1xyXG4gICAgYW5pbWF0ZWQ6ICh2YWx1ZSkgPT4ge1xyXG4gICAgICBBbmltYXRlZC50aW1pbmcoYW5pbWF0ZWRWYWx1ZSwge1xyXG4gICAgICAgIHRvVmFsdWU6IHZhbHVlLFxyXG4gICAgICAgIGR1cmF0aW9uLFxyXG4gICAgICAgIHVzZU5hdGl2ZURyaXZlcjogZmFsc2UsXHJcbiAgICAgIH0pLnN0YXJ0KCk7XHJcbiAgICB9LFxyXG4gICAgaW5zdGFudDogKHZhbHVlKSA9PiB7XHJcbiAgICAgIGFuaW1hdGVkVmFsdWUuc2V0VmFsdWUodmFsdWUpO1xyXG4gICAgfSxcclxuICB9O1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgLy8gT24gY2hvaXNpdCBsYSBtw6l0aG9kZSDDoCBleMOpY3V0ZXIgZW4gZGVob3JzIGR1ICdpZicuXHJcbiAgICBjb25zdCB1cGRhdGVNZXRob2QgPSBhbmltYXRlZCA/IHVwZGF0ZU1ldGhvZHMuYW5pbWF0ZWQgOiB1cGRhdGVNZXRob2RzLmluc3RhbnQ7XHJcbiAgICBcclxuICAgIC8vIE9uIGwnZXjDqWN1dGUsIGxlICdpZicgYSBkaXNwYXJ1IGR1IGhvb2suXHJcbiAgICB1cGRhdGVNZXRob2QoY2xhbXBlZCk7XHJcbiAgfSwgW2NsYW1wZWQsIGFuaW1hdGVkLCBkdXJhdGlvbiwgYW5pbWF0ZWRWYWx1ZV0pO1xyXG5cclxuICBjb25zdCB3aWR0aCA9IGFuaW1hdGVkVmFsdWUuaW50ZXJwb2xhdGUoe1xyXG4gICAgaW5wdXRSYW5nZTogWzAsIDEwMF0sXHJcbiAgICBvdXRwdXRSYW5nZTogW1wiMCVcIiwgXCIxMDAlXCJdLFxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4geyB3aWR0aCB9O1xyXG59Il0sIm1hcHBpbmdzIjoiOzs7O0FBRUEsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBRWUsU0FBU0Usb0JBQW9CQSxDQUFBQyxJQUFBLEVBSXpDO0VBQUEsSUFBQUMsYUFBQSxHQUFBRCxJQUFBLENBSERFLFFBQVE7SUFBUkEsUUFBUSxHQUFBRCxhQUFBLGNBQUcsQ0FBQyxHQUFBQSxhQUFBO0lBQUFFLGFBQUEsR0FBQUgsSUFBQSxDQUNaSSxRQUFRO0lBQVJBLFFBQVEsR0FBQUQsYUFBQSxjQUFHLElBQUksR0FBQUEsYUFBQTtJQUFBRSxhQUFBLEdBQUFMLElBQUEsQ0FDZk0sUUFBUTtJQUFSQSxRQUFRLEdBQUFELGFBQUEsY0FBRyxHQUFHLEdBQUFBLGFBQUE7RUFFZCxJQUFNRSxPQUFPLEdBQUdDLElBQUksQ0FBQ0MsR0FBRyxDQUFDRCxJQUFJLENBQUNFLEdBQUcsQ0FBQ1IsUUFBUSxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztFQUNwRCxJQUFNUyxhQUFhLEdBQUcsSUFBQUMsYUFBTSxFQUFDLElBQUlDLHFCQUFRLENBQUNDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDQyxPQUFPO0VBRzNELElBQU1DLGFBQWEsR0FBRztJQUNwQlosUUFBUSxFQUFFLFNBQVZBLFFBQVFBLENBQUdhLEtBQUssRUFBSztNQUNuQkoscUJBQVEsQ0FBQ0ssTUFBTSxDQUFDUCxhQUFhLEVBQUU7UUFDN0JRLE9BQU8sRUFBRUYsS0FBSztRQUNkWCxRQUFRLEVBQVJBLFFBQVE7UUFDUmMsZUFBZSxFQUFFO01BQ25CLENBQUMsQ0FBQyxDQUFDQyxLQUFLLENBQUMsQ0FBQztJQUNaLENBQUM7SUFDREMsT0FBTyxFQUFFLFNBQVRBLE9BQU9BLENBQUdMLEtBQUssRUFBSztNQUNsQk4sYUFBYSxDQUFDWSxRQUFRLENBQUNOLEtBQUssQ0FBQztJQUMvQjtFQUNGLENBQUM7RUFFRCxJQUFBTyxnQkFBUyxFQUFDLFlBQU07SUFFZCxJQUFNQyxZQUFZLEdBQUdyQixRQUFRLEdBQUdZLGFBQWEsQ0FBQ1osUUFBUSxHQUFHWSxhQUFhLENBQUNNLE9BQU87SUFHOUVHLFlBQVksQ0FBQ2xCLE9BQU8sQ0FBQztFQUN2QixDQUFDLEVBQUUsQ0FBQ0EsT0FBTyxFQUFFSCxRQUFRLEVBQUVFLFFBQVEsRUFBRUssYUFBYSxDQUFDLENBQUM7RUFFaEQsSUFBTWUsS0FBSyxHQUFHZixhQUFhLENBQUNnQixXQUFXLENBQUM7SUFDdENDLFVBQVUsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUM7SUFDcEJDLFdBQVcsRUFBRSxDQUFDLElBQUksRUFBRSxNQUFNO0VBQzVCLENBQUMsQ0FBQztFQUVGLE9BQU87SUFBRUgsS0FBSyxFQUFMQTtFQUFNLENBQUM7QUFDbEIiLCJpZ25vcmVMaXN0IjpbXX0=