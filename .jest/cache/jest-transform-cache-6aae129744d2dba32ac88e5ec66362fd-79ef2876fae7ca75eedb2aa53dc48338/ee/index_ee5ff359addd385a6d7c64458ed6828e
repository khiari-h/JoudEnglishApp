86013e73cfe8fe8a29d272f32f44a910
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _expoLinearGradient = require("expo-linear-gradient");
var _expoRouter = require("expo-router");
var _ThemeContext = require("../../contexts/ThemeContext");
var _ProgressContext = require("../../contexts/ProgressContext");
var _CurrentLevelContext = require("../../contexts/CurrentLevelContext");
var _useRealTimeProgress2 = _interopRequireDefault(require("../../hooks/useRealTimeProgress"));
var _useDashboardLevel2 = require("./hooks/useDashboardLevel");
var _useDashboardState2 = require("./hooks/useDashboardState");
var _useLastActivity2 = _interopRequireDefault(require("../../hooks/useLastActivity"));
var _Container = _interopRequireWildcard(require("../../components/layout/Container"));
var _ModernHeader = _interopRequireDefault(require("./components/ModernHeader"));
var _HeroContinueSection = _interopRequireDefault(require("./components/HeroContinueSection"));
var _QuickActions = _interopRequireDefault(require("./components/QuickActions"));
var _SimpleMetrics = _interopRequireDefault(require("./components/SimpleMetrics"));
var _LearningProgress = _interopRequireDefault(require("./components/LearningProgress"));
var _RevisionOrchestrator = _interopRequireDefault(require("../VocabularyRevision/RevisionOrchestrator"));
var _constants = require("../../utils/constants");
var _style = _interopRequireDefault(require("./style"));
var _useDashboardRefresh2 = _interopRequireDefault(require("./hooks/useDashboardRefresh"));
var _useDashboardNavigation = _interopRequireDefault(require("./hooks/useDashboardNavigation"));
var _useDashboardSelectors = _interopRequireDefault(require("./hooks/useDashboardSelectors"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var Dashboard = function Dashboard() {
  var themeContext = (0, _react.useContext)(_ThemeContext.ThemeContext);
  var progressData = (0, _ProgressContext.useProgress)();
  var _useRealTimeProgress = (0, _useRealTimeProgress2.default)(),
    getLevelProgress = _useRealTimeProgress.getLevelProgress,
    refreshProgress = _useRealTimeProgress.refresh;
  var colors = (themeContext == null ? void 0 : themeContext.colors) || {
    background: "#F8FAFC",
    primary: "#3B82F6",
    surface: "#FFFFFF",
    text: "#1F2937",
    textSecondary: "#6B7280"
  };
  var _useDashboardLevel = (0, _useDashboardLevel2.useDashboardLevel)({
      progress: progressData.progress
    }),
    currentLevel = _useDashboardLevel.currentLevel,
    handleChangeActiveLevel = _useDashboardLevel.handleChangeActiveLevel,
    levelColor = _useDashboardLevel.levelColor;
  var _useCurrentLevel = (0, _CurrentLevelContext.useCurrentLevel)(),
    setCurrentLevel = _useCurrentLevel.setCurrentLevel;
  var _useLastActivity = (0, _useLastActivity2.default)(),
    lastActivity = _useLastActivity.lastActivity,
    isActivityLoading = _useLastActivity.isLoading,
    reloadActivity = _useLastActivity.reload;
  var _useDashboardState = (0, _useDashboardState2.useDashboardState)(reloadActivity),
    refreshing = _useDashboardState.refreshing,
    originalOnRefresh = _useDashboardState.onRefresh;
  var _useDashboardRefresh = (0, _useDashboardRefresh2.default)({
      originalOnRefresh: originalOnRefresh,
      refreshProgress: refreshProgress
    }),
    refreshKey = _useDashboardRefresh.refreshKey,
    onRefresh = _useDashboardRefresh.onRefresh;
  (0, _expoRouter.useFocusEffect)((0, _react.useCallback)(function () {
    onRefresh();
  }, [onRefresh]));
  var _useDashboardNavigati = (0, _useDashboardNavigation.default)({
      setCurrentLevel: setCurrentLevel,
      handleChangeActiveLevel: handleChangeActiveLevel
    }),
    handleContinue = _useDashboardNavigati.handleContinue,
    handleChangeLevelVisual = _useDashboardNavigati.handleChangeLevelVisual,
    handleLevelSelect = _useDashboardNavigati.handleLevelSelect;
  var _useDashboardSelector = (0, _useDashboardSelectors.default)({
      getLevelProgress: getLevelProgress,
      currentLevel: currentLevel
    }),
    allLevels = _useDashboardSelector.allLevels,
    globalProgress = _useDashboardSelector.globalProgress;
  if (progressData.isLoading) {
    return (0, _jsxRuntime.jsx)(_Container.default, {
      safeArea: true,
      backgroundColor: colors.background,
      withPadding: true,
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _style.default.loadingContainer,
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [_style.default.loadingText, {
            color: colors.primary
          }],
          children: "Chargement du tableau de bord..."
        })
      })
    });
  }
  var backgroundGradient = {
    colors: [`${levelColor}05`, colors.background, `${levelColor}08`],
    locations: [0, 0.6, 1]
  };
  return (0, _jsxRuntime.jsx)(_Container.default, {
    safeArea: true,
    safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.NO_BOTTOM,
    withScrollView: false,
    backgroundColor: "transparent",
    statusBarStyle: "light-content",
    withPadding: false,
    children: (0, _jsxRuntime.jsxs)(_expoLinearGradient.LinearGradient, {
      colors: backgroundGradient.colors,
      locations: backgroundGradient.locations,
      start: {
        x: 0,
        y: 0
      },
      end: {
        x: 0,
        y: 1
      },
      style: _style.default.container,
      children: [(0, _jsxRuntime.jsx)(_ModernHeader.default, {
        level: currentLevel,
        levelColor: levelColor
      }), (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
        style: _style.default.scrollView,
        contentContainerStyle: _style.default.scrollContent,
        showsVerticalScrollIndicator: false,
        refreshControl: (0, _jsxRuntime.jsx)(_reactNative.RefreshControl, {
          refreshing: refreshing,
          onRefresh: onRefresh,
          colors: [levelColor],
          tintColor: levelColor
        }),
        children: [(0, _jsxRuntime.jsx)(_HeroContinueSection.default, {
          lastActivity: lastActivity,
          onPress: handleContinue,
          accentColor: levelColor,
          isLoading: isActivityLoading
        }, `continue-${refreshKey}`), (0, _jsxRuntime.jsx)(_QuickActions.default, {
          currentLevel: currentLevel,
          progressContext: progressData,
          accentColor: levelColor
        }, `actions-${refreshKey}`), (0, _jsxRuntime.jsx)(_SimpleMetrics.default, {
          accentColor: levelColor,
          refreshKey: refreshKey
        }, `metrics-${refreshKey}`), (0, _jsxRuntime.jsx)(_LearningProgress.default, {
          globalProgress: globalProgress,
          levels: allLevels,
          currentLevel: currentLevel,
          onSelectLevel: handleLevelSelect,
          onChangeLevelVisual: handleChangeLevelVisual,
          primaryColor: levelColor
        }, `progress-${refreshKey}`), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: _style.default.bottomSpacer
        })]
      }), (0, _jsxRuntime.jsx)(_RevisionOrchestrator.default, {
        currentLevel: currentLevel,
        refreshKey: refreshKey
      }, `revision-${refreshKey}`)]
    })
  });
};
var _default = exports.default = Dashboard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,