e5a0f3b03d39f5c57c6211f8f6ee4a67
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useAndroidRippleForView;
var _processColor = _interopRequireDefault(require("../../StyleSheet/processColor"));
var _Platform = _interopRequireDefault(require("../../Utilities/Platform"));
var _View = _interopRequireDefault(require("../View/View"));
var _ViewNativeComponent = require("../View/ViewNativeComponent");
var _invariant = _interopRequireDefault(require("invariant"));
var _react = _interopRequireWildcard(require("react"));
var React = _react;
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function useAndroidRippleForView(rippleConfig, viewRef) {
  var _ref = rippleConfig != null ? rippleConfig : {},
    color = _ref.color,
    borderless = _ref.borderless,
    radius = _ref.radius,
    foreground = _ref.foreground;
  return (0, _react.useMemo)(function () {
    if (_Platform.default.OS === 'android' && (color != null || borderless != null || radius != null)) {
      var processedColor = (0, _processColor.default)(color);
      (0, _invariant.default)(processedColor == null || typeof processedColor === 'number', 'Unexpected color given for Ripple color');
      var nativeRippleValue = {
        type: 'RippleAndroid',
        color: processedColor,
        borderless: borderless === true,
        rippleRadius: radius
      };
      return {
        viewProps: foreground === true ? {
          nativeForegroundAndroid: nativeRippleValue
        } : {
          nativeBackgroundAndroid: nativeRippleValue
        },
        onPressIn: function onPressIn(event) {
          var view = viewRef.current;
          if (view != null) {
            var _event$nativeEvent$lo, _event$nativeEvent$lo2;
            _ViewNativeComponent.Commands.hotspotUpdate(view, (_event$nativeEvent$lo = event.nativeEvent.locationX) != null ? _event$nativeEvent$lo : 0, (_event$nativeEvent$lo2 = event.nativeEvent.locationY) != null ? _event$nativeEvent$lo2 : 0);
            _ViewNativeComponent.Commands.setPressed(view, true);
          }
        },
        onPressMove: function onPressMove(event) {
          var view = viewRef.current;
          if (view != null) {
            var _event$nativeEvent$lo3, _event$nativeEvent$lo4;
            _ViewNativeComponent.Commands.hotspotUpdate(view, (_event$nativeEvent$lo3 = event.nativeEvent.locationX) != null ? _event$nativeEvent$lo3 : 0, (_event$nativeEvent$lo4 = event.nativeEvent.locationY) != null ? _event$nativeEvent$lo4 : 0);
          }
        },
        onPressOut: function onPressOut(event) {
          var view = viewRef.current;
          if (view != null) {
            _ViewNativeComponent.Commands.setPressed(view, false);
          }
        }
      };
    }
    return null;
  }, [borderless, color, foreground, radius, viewRef]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,