d0b40cfa99037d08f7968bf10d66650b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var REVISION_CONFIG = {
  TRIGGER_INTERVAL: 50,
  QUESTIONS_COUNT: 10,
  STORAGE_KEY: 'revision_manager_data'
};
var useRevisionManager = function useRevisionManager() {
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    totalWordsLearned = _useState2[0],
    setTotalWordsLearned = _useState2[1];
  var _useState3 = (0, _react.useState)(50),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    nextRevisionAt = _useState4[0],
    setNextRevisionAt = _useState4[1];
  var _useState5 = (0, _react.useState)([]),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    lastRevisionWords = _useState6[0],
    setLastRevisionWords = _useState6[1];
  var _useState7 = (0, _react.useState)([]),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    revisionHistory = _useState8[0],
    setRevisionHistory = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    isRevisionDisabled = _useState0[0],
    setIsRevisionDisabled = _useState0[1];
  var _useState1 = (0, _react.useState)(true),
    _useState10 = (0, _slicedToArray2.default)(_useState1, 2),
    isLoading = _useState10[0],
    setIsLoading = _useState10[1];
  var lastCalculationRef = (0, _react.useRef)(0);
  var loadRevisionData = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* () {
      try {
        var stored = yield _asyncStorage.default.getItem(REVISION_CONFIG.STORAGE_KEY);
        if (stored) {
          var data = JSON.parse(stored);
          setNextRevisionAt(data.nextRevisionAt || 50);
          setLastRevisionWords(data.lastRevisionWords || []);
          setRevisionHistory(data.revisionHistory || []);
          setIsRevisionDisabled(data.isRevisionDisabled || false);
        }
      } catch (error) {
        console.warn('Erreur chargement données révision:', error);
      } finally {
        setIsLoading(false);
      }
    });
    return function loadRevisionData() {
      return _ref.apply(this, arguments);
    };
  }();
  (0, _react.useEffect)(function () {
    loadRevisionData();
  }, []);
  var saveRevisionData = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    if (isLoading) return;
    try {
      var data = {
        nextRevisionAt: nextRevisionAt,
        lastRevisionWords: lastRevisionWords,
        revisionHistory: revisionHistory,
        isRevisionDisabled: isRevisionDisabled,
        lastUpdate: Date.now()
      };
      yield _asyncStorage.default.setItem(REVISION_CONFIG.STORAGE_KEY, JSON.stringify(data));
    } catch (error) {
      console.warn('Erreur sauvegarde données révision:', error);
    }
  }), [nextRevisionAt, lastRevisionWords, revisionHistory, isRevisionDisabled, isLoading]);
  (0, _react.useEffect)(function () {
    saveRevisionData();
  }, [saveRevisionData]);
  var calculateTotalWords = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    var now = Date.now();
    if (now - lastCalculationRef.current < 2000) return;
    lastCalculationRef.current = now;
    try {
      var total = 0;
      var levels = ['1', '2', '3', '4', '5', '6', 'bonus'];
      var modes = ['classic', 'fast'];
      for (var level of levels) {
        for (var mode of modes) {
          var stored = yield _asyncStorage.default.getItem(`vocabulary_${level}_${mode}`);
          if (stored) {
            var data = JSON.parse(stored);
            var completedWords = data.completedWords || {};
            total += Object.values(completedWords).reduce(function (acc, words) {
              if (Array.isArray(words)) {
                return acc + words.length;
              }
              return acc;
            }, 0);
          }
        }
      }
      setTotalWordsLearned(total);
    } catch (error) {
      console.warn('Erreur calcul mots appris:', error);
    }
  }), []);
  var getAllLearnedWords = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      var allWords = [];
      var levels = ['1', '2', '3', '4', '5', '6', 'bonus'];
      var modes = ['classic', 'fast'];
      var _loop = function* _loop(level) {
        var _loop2 = function* _loop2(mode) {
          var stored = yield _asyncStorage.default.getItem(`vocabulary_${level}_${mode}`);
          if (stored) {
            var data = JSON.parse(stored);
            var completedWords = data.completedWords || {};
            Object.entries(completedWords).forEach(function (_ref5) {
              var _ref6 = (0, _slicedToArray2.default)(_ref5, 2),
                categoryIndex = _ref6[0],
                words = _ref6[1];
              if (Array.isArray(words)) {
                words.forEach(function (word) {
                  if (typeof word === 'object' && word.word) {
                    allWords.push(Object.assign({}, word, {
                      fromLevel: level,
                      fromMode: mode,
                      categoryIndex: parseInt(categoryIndex)
                    }));
                  } else if (typeof word === 'string') {
                    allWords.push({
                      word: word,
                      translation: '?',
                      fromLevel: level,
                      fromMode: mode,
                      categoryIndex: parseInt(categoryIndex),
                      timestamp: null
                    });
                  }
                });
              }
            });
          }
        };
        for (var mode of modes) {
          yield* _loop2(mode);
        }
      };
      for (var level of levels) {
        yield* _loop(level);
      }
      return allWords;
    } catch (error) {
      console.warn('Erreur récupération mots appris:', error);
      return [];
    }
  }), []);
  var selectRevisionWords = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : REVISION_CONFIG.QUESTIONS_COUNT;
    var allWords = yield getAllLearnedWords();
    if (allWords.length === 0) return [];
    if (allWords.length <= count) return allWords;
    var lastWords = new Set(lastRevisionWords.map(function (w) {
      return w.word;
    }));
    var availableWords = allWords.filter(function (word) {
      return !lastWords.has(word.word);
    });
    var poolWords = availableWords.length >= count ? availableWords : allWords;
    var sortedByAge = poolWords.sort(function (a, b) {
      var aTime = a.timestamp ? new Date(a.timestamp).getTime() : 0;
      var bTime = b.timestamp ? new Date(b.timestamp).getTime() : 0;
      return aTime - bTime;
    });
    var oldCount = Math.floor(count * 0.6);
    var randomCount = count - oldCount;
    var oldWords = sortedByAge.slice(0, oldCount);
    var remainingWords = sortedByAge.slice(oldCount);
    var randomWords = remainingWords.sort(function () {
      return Math.random() - 0.5;
    }).slice(0, randomCount);
    var selectedWords = [].concat((0, _toConsumableArray2.default)(oldWords), (0, _toConsumableArray2.default)(randomWords)).sort(function () {
      return Math.random() - 0.5;
    });
    return selectedWords.slice(0, count);
  }), [lastRevisionWords, getAllLearnedWords]);
  var shouldShowRevision = !isRevisionDisabled && totalWordsLearned >= nextRevisionAt && totalWordsLearned > 0;
  var handleRevisionChoice = (0, _react.useCallback)(function () {
    var _ref8 = (0, _asyncToGenerator2.default)(function* (choice) {
      switch (choice) {
        case 'now':
          return {
            action: 'navigate',
            words: yield selectRevisionWords(),
            questionsCount: REVISION_CONFIG.QUESTIONS_COUNT
          };
        case 'later_50':
          {
            var newTarget50 = totalWordsLearned + 50;
            setNextRevisionAt(newTarget50);
            return {
              action: 'postponed',
              nextAt: newTarget50
            };
          }
        case 'later_100':
          {
            var newTarget100 = totalWordsLearned + 100;
            setNextRevisionAt(newTarget100);
            return {
              action: 'postponed',
              nextAt: newTarget100
            };
          }
        case 'disable':
          setIsRevisionDisabled(true);
          return {
            action: 'disabled'
          };
        default:
          return {
            action: 'cancelled'
          };
      }
    });
    return function (_x) {
      return _ref8.apply(this, arguments);
    };
  }(), [totalWordsLearned, selectRevisionWords]);
  var markRevisionCompleted = (0, _react.useCallback)(function (completedWords, score, questionsCount) {
    try {
      var revisionRecord = {
        timestamp: Date.now(),
        wordsCount: completedWords.length,
        score: score,
        questionsCount: questionsCount,
        percentage: Math.round(score / questionsCount * 100),
        totalWordsAtTime: totalWordsLearned
      };
      setRevisionHistory(function (prev) {
        return [].concat((0, _toConsumableArray2.default)(prev), [revisionRecord]);
      });
      setLastRevisionWords(completedWords);
      var nextTarget = totalWordsLearned + REVISION_CONFIG.TRIGGER_INTERVAL;
      setNextRevisionAt(nextTarget);
    } catch (error) {
      console.warn('Erreur enregistrement révision:', error);
    }
  }, [totalWordsLearned]);
  var enableRevisions = (0, _react.useCallback)(function () {
    setIsRevisionDisabled(false);
    var nextTarget = totalWordsLearned + REVISION_CONFIG.TRIGGER_INTERVAL;
    setNextRevisionAt(nextTarget);
  }, [totalWordsLearned]);
  (0, _react.useEffect)(function () {
    calculateTotalWords();
    var interval = setInterval(calculateTotalWords, 10000);
    return function () {
      return clearInterval(interval);
    };
  }, [calculateTotalWords]);
  var getRevisionStats = (0, _react.useCallback)(function () {
    if (revisionHistory.length === 0) {
      return {
        totalRevisions: 0,
        averageScore: 0,
        lastRevision: null,
        streak: 0
      };
    }
    var totalRevisions = revisionHistory.length;
    var averageScore = revisionHistory.reduce(function (sum, r) {
      return sum + r.percentage;
    }, 0) / totalRevisions;
    var lastRevision = revisionHistory[revisionHistory.length - 1];
    var streak = 0;
    for (var i = revisionHistory.length - 1; i >= 0; i--) {
      if (revisionHistory[i].percentage >= 70) {
        streak++;
      } else {
        break;
      }
    }
    return {
      totalRevisions: totalRevisions,
      averageScore: Math.round(averageScore),
      lastRevision: lastRevision,
      streak: streak
    };
  }, [revisionHistory]);
  return {
    totalWordsLearned: totalWordsLearned,
    nextRevisionAt: nextRevisionAt,
    shouldShowRevision: shouldShowRevision,
    isRevisionDisabled: isRevisionDisabled,
    isLoading: isLoading,
    handleRevisionChoice: handleRevisionChoice,
    markRevisionCompleted: markRevisionCompleted,
    enableRevisions: enableRevisions,
    calculateTotalWords: calculateTotalWords,
    selectRevisionWords: selectRevisionWords,
    getRevisionStats: getRevisionStats,
    config: REVISION_CONFIG
  };
};
var _default = exports.default = useRevisionManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX2FzeW5jU3RvcmFnZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJSRVZJU0lPTl9DT05GSUciLCJUUklHR0VSX0lOVEVSVkFMIiwiUVVFU1RJT05TX0NPVU5UIiwiU1RPUkFHRV9LRVkiLCJ1c2VSZXZpc2lvbk1hbmFnZXIiLCJfdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsIl91c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheTIiLCJkZWZhdWx0IiwidG90YWxXb3Jkc0xlYXJuZWQiLCJzZXRUb3RhbFdvcmRzTGVhcm5lZCIsIl91c2VTdGF0ZTMiLCJfdXNlU3RhdGU0IiwibmV4dFJldmlzaW9uQXQiLCJzZXROZXh0UmV2aXNpb25BdCIsIl91c2VTdGF0ZTUiLCJfdXNlU3RhdGU2IiwibGFzdFJldmlzaW9uV29yZHMiLCJzZXRMYXN0UmV2aXNpb25Xb3JkcyIsIl91c2VTdGF0ZTciLCJfdXNlU3RhdGU4IiwicmV2aXNpb25IaXN0b3J5Iiwic2V0UmV2aXNpb25IaXN0b3J5IiwiX3VzZVN0YXRlOSIsIl91c2VTdGF0ZTAiLCJpc1JldmlzaW9uRGlzYWJsZWQiLCJzZXRJc1JldmlzaW9uRGlzYWJsZWQiLCJfdXNlU3RhdGUxIiwiX3VzZVN0YXRlMTAiLCJpc0xvYWRpbmciLCJzZXRJc0xvYWRpbmciLCJsYXN0Q2FsY3VsYXRpb25SZWYiLCJ1c2VSZWYiLCJsb2FkUmV2aXNpb25EYXRhIiwiX3JlZiIsIl9hc3luY1RvR2VuZXJhdG9yMiIsInN0b3JlZCIsIkFzeW5jU3RvcmFnZSIsImdldEl0ZW0iLCJkYXRhIiwiSlNPTiIsInBhcnNlIiwiZXJyb3IiLCJjb25zb2xlIiwid2FybiIsImFwcGx5IiwiYXJndW1lbnRzIiwidXNlRWZmZWN0Iiwic2F2ZVJldmlzaW9uRGF0YSIsInVzZUNhbGxiYWNrIiwibGFzdFVwZGF0ZSIsIkRhdGUiLCJub3ciLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwiY2FsY3VsYXRlVG90YWxXb3JkcyIsImN1cnJlbnQiLCJ0b3RhbCIsImxldmVscyIsIm1vZGVzIiwibGV2ZWwiLCJtb2RlIiwiY29tcGxldGVkV29yZHMiLCJPYmplY3QiLCJ2YWx1ZXMiLCJyZWR1Y2UiLCJhY2MiLCJ3b3JkcyIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsImdldEFsbExlYXJuZWRXb3JkcyIsImFsbFdvcmRzIiwiX2xvb3AiLCJfbG9vcDIiLCJlbnRyaWVzIiwiZm9yRWFjaCIsIl9yZWY1IiwiX3JlZjYiLCJjYXRlZ29yeUluZGV4Iiwid29yZCIsInB1c2giLCJhc3NpZ24iLCJmcm9tTGV2ZWwiLCJmcm9tTW9kZSIsInBhcnNlSW50IiwidHJhbnNsYXRpb24iLCJ0aW1lc3RhbXAiLCJzZWxlY3RSZXZpc2lvbldvcmRzIiwiY291bnQiLCJ1bmRlZmluZWQiLCJsYXN0V29yZHMiLCJTZXQiLCJtYXAiLCJ3IiwiYXZhaWxhYmxlV29yZHMiLCJmaWx0ZXIiLCJoYXMiLCJwb29sV29yZHMiLCJzb3J0ZWRCeUFnZSIsInNvcnQiLCJhIiwiYiIsImFUaW1lIiwiZ2V0VGltZSIsImJUaW1lIiwib2xkQ291bnQiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb21Db3VudCIsIm9sZFdvcmRzIiwic2xpY2UiLCJyZW1haW5pbmdXb3JkcyIsInJhbmRvbVdvcmRzIiwicmFuZG9tIiwic2VsZWN0ZWRXb3JkcyIsImNvbmNhdCIsIl90b0NvbnN1bWFibGVBcnJheTIiLCJzaG91bGRTaG93UmV2aXNpb24iLCJoYW5kbGVSZXZpc2lvbkNob2ljZSIsIl9yZWY4IiwiY2hvaWNlIiwiYWN0aW9uIiwicXVlc3Rpb25zQ291bnQiLCJuZXdUYXJnZXQ1MCIsIm5leHRBdCIsIm5ld1RhcmdldDEwMCIsIl94IiwibWFya1JldmlzaW9uQ29tcGxldGVkIiwic2NvcmUiLCJyZXZpc2lvblJlY29yZCIsIndvcmRzQ291bnQiLCJwZXJjZW50YWdlIiwicm91bmQiLCJ0b3RhbFdvcmRzQXRUaW1lIiwicHJldiIsIm5leHRUYXJnZXQiLCJlbmFibGVSZXZpc2lvbnMiLCJpbnRlcnZhbCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsImdldFJldmlzaW9uU3RhdHMiLCJ0b3RhbFJldmlzaW9ucyIsImF2ZXJhZ2VTY29yZSIsImxhc3RSZXZpc2lvbiIsInN0cmVhayIsInN1bSIsInIiLCJpIiwiY29uZmlnIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsidXNlUmV2aXNpb25NYW5hZ2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9ob29rcy91c2VSZXZpc2lvbk1hbmFnZXIuanMgLSBTWVNUw4hNRSBJTlRFTExJR0VOVCBTSU1QTEVcclxuaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2ssIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IEFzeW5jU3RvcmFnZSBmcm9tICdAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZSc7XHJcblxyXG5jb25zdCBSRVZJU0lPTl9DT05GSUcgPSB7XHJcbiAgVFJJR0dFUl9JTlRFUlZBTDogNTAsICAgIC8vIFRvdXMgbGVzIDUwIG1vdHNcclxuICBRVUVTVElPTlNfQ09VTlQ6IDEwLCAgICAgLy8gVG91am91cnMgMTAgcXVlc3Rpb25zXHJcbiAgU1RPUkFHRV9LRVk6ICdyZXZpc2lvbl9tYW5hZ2VyX2RhdGEnXHJcbn07XHJcblxyXG5jb25zdCB1c2VSZXZpc2lvbk1hbmFnZXIgPSAoKSA9PiB7XHJcbiAgLy8gPT09PT09PT09PSDDiVRBVFMgPT09PT09PT09PVxyXG4gIGNvbnN0IFt0b3RhbFdvcmRzTGVhcm5lZCwgc2V0VG90YWxXb3Jkc0xlYXJuZWRdID0gdXNlU3RhdGUoMCk7XHJcbiAgY29uc3QgW25leHRSZXZpc2lvbkF0LCBzZXROZXh0UmV2aXNpb25BdF0gPSB1c2VTdGF0ZSg1MCk7XHJcbiAgY29uc3QgW2xhc3RSZXZpc2lvbldvcmRzLCBzZXRMYXN0UmV2aXNpb25Xb3Jkc10gPSB1c2VTdGF0ZShbXSk7XHJcbiAgY29uc3QgW3JldmlzaW9uSGlzdG9yeSwgc2V0UmV2aXNpb25IaXN0b3J5XSA9IHVzZVN0YXRlKFtdKTtcclxuICBjb25zdCBbaXNSZXZpc2lvbkRpc2FibGVkLCBzZXRJc1JldmlzaW9uRGlzYWJsZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcclxuICBcclxuICAvLyBSZWYgcG91ciDDqXZpdGVyIGxlcyBjYWxjdWxzIHRyb3AgZnLDqXF1ZW50c1xyXG4gIGNvbnN0IGxhc3RDYWxjdWxhdGlvblJlZiA9IHVzZVJlZigwKTtcclxuXHJcbiAgY29uc3QgbG9hZFJldmlzaW9uRGF0YSA9IGFzeW5jICgpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHN0b3JlZCA9IGF3YWl0IEFzeW5jU3RvcmFnZS5nZXRJdGVtKFJFVklTSU9OX0NPTkZJRy5TVE9SQUdFX0tFWSk7XHJcbiAgICAgIGlmIChzdG9yZWQpIHtcclxuICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShzdG9yZWQpO1xyXG4gICAgICAgIHNldE5leHRSZXZpc2lvbkF0KGRhdGEubmV4dFJldmlzaW9uQXQgfHwgNTApO1xyXG4gICAgICAgIHNldExhc3RSZXZpc2lvbldvcmRzKGRhdGEubGFzdFJldmlzaW9uV29yZHMgfHwgW10pO1xyXG4gICAgICAgIHNldFJldmlzaW9uSGlzdG9yeShkYXRhLnJldmlzaW9uSGlzdG9yeSB8fCBbXSk7XHJcbiAgICAgICAgc2V0SXNSZXZpc2lvbkRpc2FibGVkKGRhdGEuaXNSZXZpc2lvbkRpc2FibGVkIHx8IGZhbHNlKTtcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS53YXJuKCdFcnJldXIgY2hhcmdlbWVudCBkb25uw6llcyByw6l2aXNpb246JywgZXJyb3IpO1xyXG4gICAgfSBmaW5hbGx5IHtcclxuICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyA9PT09PT09PT09IENIQVJHRU1FTlQgSU5JVElBTCA9PT09PT09PT09XHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGxvYWRSZXZpc2lvbkRhdGEoKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIC8vID09PT09PT09PT0gU0FVVkVHQVJERSBBVVRPID09PT09PT09PT1cclxuICBjb25zdCBzYXZlUmV2aXNpb25EYXRhID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xyXG4gICAgaWYgKGlzTG9hZGluZykgcmV0dXJuO1xyXG4gICAgXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBkYXRhID0ge1xyXG4gICAgICAgIG5leHRSZXZpc2lvbkF0LFxyXG4gICAgICAgIGxhc3RSZXZpc2lvbldvcmRzLFxyXG4gICAgICAgIHJldmlzaW9uSGlzdG9yeSxcclxuICAgICAgICBpc1JldmlzaW9uRGlzYWJsZWQsXHJcbiAgICAgICAgbGFzdFVwZGF0ZTogRGF0ZS5ub3coKVxyXG4gICAgICB9O1xyXG4gICAgICBhd2FpdCBBc3luY1N0b3JhZ2Uuc2V0SXRlbShSRVZJU0lPTl9DT05GSUcuU1RPUkFHRV9LRVksIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybignRXJyZXVyIHNhdXZlZ2FyZGUgZG9ubsOpZXMgcsOpdmlzaW9uOicsIGVycm9yKTtcclxuICAgIH1cclxuICB9LCBbbmV4dFJldmlzaW9uQXQsIGxhc3RSZXZpc2lvbldvcmRzLCByZXZpc2lvbkhpc3RvcnksIGlzUmV2aXNpb25EaXNhYmxlZCwgaXNMb2FkaW5nXSk7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBzYXZlUmV2aXNpb25EYXRhKCk7XHJcbiAgfSwgW3NhdmVSZXZpc2lvbkRhdGFdKTtcclxuXHJcbiAgLy8gPT09PT09PT09PSBDT01QVEFHRSBERVMgTU9UUyBBUFBSSVMgPT09PT09PT09PVxyXG4gIGNvbnN0IGNhbGN1bGF0ZVRvdGFsV29yZHMgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xyXG4gICAgaWYgKG5vdyAtIGxhc3RDYWxjdWxhdGlvblJlZi5jdXJyZW50IDwgMjAwMCkgcmV0dXJuOyAvLyBEZWJvdW5jZSAyc1xyXG4gICAgbGFzdENhbGN1bGF0aW9uUmVmLmN1cnJlbnQgPSBub3c7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgbGV0IHRvdGFsID0gMDtcclxuICAgICAgY29uc3QgbGV2ZWxzID0gWycxJywgJzInLCAnMycsICc0JywgJzUnLCAnNicsICdib251cyddO1xyXG4gICAgICBjb25zdCBtb2RlcyA9IFsnY2xhc3NpYycsICdmYXN0J107XHJcblxyXG4gICAgICBmb3IgKGNvbnN0IGxldmVsIG9mIGxldmVscykge1xyXG4gICAgICAgIGZvciAoY29uc3QgbW9kZSBvZiBtb2Rlcykge1xyXG4gICAgICAgICAgY29uc3Qgc3RvcmVkID0gYXdhaXQgQXN5bmNTdG9yYWdlLmdldEl0ZW0oYHZvY2FidWxhcnlfJHtsZXZlbH1fJHttb2RlfWApO1xyXG4gICAgICAgICAgaWYgKHN0b3JlZCkge1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShzdG9yZWQpO1xyXG4gICAgICAgICAgICBjb25zdCBjb21wbGV0ZWRXb3JkcyA9IGRhdGEuY29tcGxldGVkV29yZHMgfHwge307XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBDb21wdGVyIHRvdXMgbGVzIG1vdHMgYXBwcmlzXHJcbiAgICAgICAgICAgIHRvdGFsICs9IE9iamVjdC52YWx1ZXMoY29tcGxldGVkV29yZHMpLnJlZHVjZSgoYWNjLCB3b3JkcykgPT4ge1xyXG4gICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHdvcmRzKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYyArIHdvcmRzLmxlbmd0aDtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGFjYztcclxuICAgICAgICAgICAgfSwgMCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBzZXRUb3RhbFdvcmRzTGVhcm5lZCh0b3RhbCk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLndhcm4oJ0VycmV1ciBjYWxjdWwgbW90cyBhcHByaXM6JywgZXJyb3IpO1xyXG4gICAgfVxyXG4gIH0sIFtdKTtcclxuXHJcbiAgLy8gPT09PT09PT09PSBSw4lDVVDDiVJBVElPTiBERVMgTU9UUyBQT1VSIFLDiVZJU0lPTiA9PT09PT09PT09XHJcbiAgY29uc3QgZ2V0QWxsTGVhcm5lZFdvcmRzID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgYWxsV29yZHMgPSBbXTtcclxuICAgICAgY29uc3QgbGV2ZWxzID0gWycxJywgJzInLCAnMycsICc0JywgJzUnLCAnNicsICdib251cyddO1xyXG4gICAgICBjb25zdCBtb2RlcyA9IFsnY2xhc3NpYycsICdmYXN0J107XHJcblxyXG4gICAgICBmb3IgKGNvbnN0IGxldmVsIG9mIGxldmVscykge1xyXG4gICAgICAgIGZvciAoY29uc3QgbW9kZSBvZiBtb2Rlcykge1xyXG4gICAgICAgICAgY29uc3Qgc3RvcmVkID0gYXdhaXQgQXN5bmNTdG9yYWdlLmdldEl0ZW0oYHZvY2FidWxhcnlfJHtsZXZlbH1fJHttb2RlfWApO1xyXG4gICAgICAgICAgaWYgKHN0b3JlZCkge1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShzdG9yZWQpO1xyXG4gICAgICAgICAgICBjb25zdCBjb21wbGV0ZWRXb3JkcyA9IGRhdGEuY29tcGxldGVkV29yZHMgfHwge307XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBSw6ljdXDDqXJlciB0b3VzIGxlcyBtb3RzIGF2ZWMgbcOpdGFkb25uw6llc1xyXG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyhjb21wbGV0ZWRXb3JkcykuZm9yRWFjaCgoW2NhdGVnb3J5SW5kZXgsIHdvcmRzXSkgPT4ge1xyXG4gICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHdvcmRzKSkge1xyXG4gICAgICAgICAgICAgICAgd29yZHMuZm9yRWFjaCh3b3JkID0+IHtcclxuICAgICAgICAgICAgICAgICAgLy8gU3VwcG9ydCBhbmNpZW4gZXQgbm91dmVhdSBmb3JtYXRcclxuICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB3b3JkID09PSAnb2JqZWN0JyAmJiB3b3JkLndvcmQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbGxXb3Jkcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgIC4uLndvcmQsXHJcbiAgICAgICAgICAgICAgICAgICAgICBmcm9tTGV2ZWw6IGxldmVsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgZnJvbU1vZGU6IG1vZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeUluZGV4OiBwYXJzZUludChjYXRlZ29yeUluZGV4KVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB3b3JkID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEFuY2llbiBmb3JtYXQgLSBvbiBmYWl0IGRlIG5vdHJlIG1pZXV4XHJcbiAgICAgICAgICAgICAgICAgICAgYWxsV29yZHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICB3b3JkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb246ICc/JywgLy8gU2VyYSByw6ljdXDDqXLDqSBkZXB1aXMgbGVzIGRvbm7DqWVzIG9yaWdpbmFsZXNcclxuICAgICAgICAgICAgICAgICAgICAgIGZyb21MZXZlbDogbGV2ZWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICBmcm9tTW9kZTogbW9kZSxcclxuICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5SW5kZXg6IHBhcnNlSW50KGNhdGVnb3J5SW5kZXgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wOiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gYWxsV29yZHM7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLndhcm4oJ0VycmV1ciByw6ljdXDDqXJhdGlvbiBtb3RzIGFwcHJpczonLCBlcnJvcik7XHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuICB9LCBbXSk7XHJcblxyXG4gIC8vID09PT09PT09PT0gQUxHT1JJVEhNRSBBTlRJLVLDiVDDiVRJVElPTiA9PT09PT09PT09XHJcbiAgY29uc3Qgc2VsZWN0UmV2aXNpb25Xb3JkcyA9IHVzZUNhbGxiYWNrKGFzeW5jIChjb3VudCA9IFJFVklTSU9OX0NPTkZJRy5RVUVTVElPTlNfQ09VTlQpID0+IHtcclxuICAgIGNvbnN0IGFsbFdvcmRzID0gYXdhaXQgZ2V0QWxsTGVhcm5lZFdvcmRzKCk7XHJcbiAgICBcclxuICAgIGlmIChhbGxXb3Jkcy5sZW5ndGggPT09IDApIHJldHVybiBbXTtcclxuICAgIGlmIChhbGxXb3Jkcy5sZW5ndGggPD0gY291bnQpIHJldHVybiBhbGxXb3JkcztcclxuXHJcbiAgICAvLyBGaWx0cmVyIGxlcyBtb3RzIGRlIGxhIGRlcm5pw6hyZSByw6l2aXNpb24gKMOpdml0ZXIgcsOpcMOpdGl0aW9uIGltbcOpZGlhdGUpXHJcbiAgICBjb25zdCBsYXN0V29yZHMgPSBuZXcgU2V0KGxhc3RSZXZpc2lvbldvcmRzLm1hcCh3ID0+IHcud29yZCkpO1xyXG4gICAgY29uc3QgYXZhaWxhYmxlV29yZHMgPSBhbGxXb3Jkcy5maWx0ZXIod29yZCA9PiAhbGFzdFdvcmRzLmhhcyh3b3JkLndvcmQpKTtcclxuICAgIFxyXG4gICAgLy8gU2kgcGFzIGFzc2V6IGRlIG1vdHMgZGlmZsOpcmVudHMsIG9uIHByZW5kIHF1YW5kIG3Dqm1lIGRhbnMgdG91c1xyXG4gICAgY29uc3QgcG9vbFdvcmRzID0gYXZhaWxhYmxlV29yZHMubGVuZ3RoID49IGNvdW50ID8gYXZhaWxhYmxlV29yZHMgOiBhbGxXb3JkcztcclxuICAgIFxyXG4gICAgLy8gQWxnb3JpdGhtZSBkZSBzw6lsZWN0aW9uIGludGVsbGlnZW50IDpcclxuICAgIC8vIDEuIFByaW9yaXNlciBsZXMgbW90cyBsZXMgcGx1cyBhbmNpZW5zIChub24gcsOpdmlzw6lzIHLDqWNlbW1lbnQpXHJcbiAgICAvLyAyLiBNw6lsYW5nZXIgbGVzIG5pdmVhdXggZXQgbW9kZXNcclxuICAgIC8vIDMuIMOJdml0ZXIgdHJvcCBkZSBtb3RzIGR1IG3Dqm1lIG5pdmVhdSBkJ2FmZmlsw6llXHJcblxyXG4gICAgY29uc3Qgc29ydGVkQnlBZ2UgPSBwb29sV29yZHMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICBjb25zdCBhVGltZSA9IGEudGltZXN0YW1wID8gbmV3IERhdGUoYS50aW1lc3RhbXApLmdldFRpbWUoKSA6IDA7XHJcbiAgICAgIGNvbnN0IGJUaW1lID0gYi50aW1lc3RhbXAgPyBuZXcgRGF0ZShiLnRpbWVzdGFtcCkuZ2V0VGltZSgpIDogMDtcclxuICAgICAgcmV0dXJuIGFUaW1lIC0gYlRpbWU7IC8vIFBsdXMgYW5jaWVuIGVuIHByZW1pZXJcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFByZW5kcmUgdW5lIG1peCA6IDYwJSBkZXMgcGx1cyBhbmNpZW5zICsgNDAlIGFsw6lhdG9pcmVcclxuICAgIGNvbnN0IG9sZENvdW50ID0gTWF0aC5mbG9vcihjb3VudCAqIDAuNik7XHJcbiAgICBjb25zdCByYW5kb21Db3VudCA9IGNvdW50IC0gb2xkQ291bnQ7XHJcbiAgICBcclxuICAgIGNvbnN0IG9sZFdvcmRzID0gc29ydGVkQnlBZ2Uuc2xpY2UoMCwgb2xkQ291bnQpO1xyXG4gICAgY29uc3QgcmVtYWluaW5nV29yZHMgPSBzb3J0ZWRCeUFnZS5zbGljZShvbGRDb3VudCk7XHJcbiAgICBjb25zdCByYW5kb21Xb3JkcyA9IHJlbWFpbmluZ1dvcmRzXHJcbiAgICAgIC5zb3J0KCgpID0+IE1hdGgucmFuZG9tKCkgLSAwLjUpXHJcbiAgICAgIC5zbGljZSgwLCByYW5kb21Db3VudCk7XHJcblxyXG4gICAgY29uc3Qgc2VsZWN0ZWRXb3JkcyA9IFsuLi5vbGRXb3JkcywgLi4ucmFuZG9tV29yZHNdXHJcbiAgICAgIC5zb3J0KCgpID0+IE1hdGgucmFuZG9tKCkgLSAwLjUpOyAvLyBNw6lsYW5nZXIgbGUgcsOpc3VsdGF0IGZpbmFsXHJcblxyXG4gICAgcmV0dXJuIHNlbGVjdGVkV29yZHMuc2xpY2UoMCwgY291bnQpO1xyXG4gIH0sIFtsYXN0UmV2aXNpb25Xb3JkcywgZ2V0QWxsTGVhcm5lZFdvcmRzXSk7XHJcblxyXG4gIC8vID09PT09PT09PT0gTE9HSVFVRSBERSBEw4lDTEVOQ0hFTUVOVCA9PT09PT09PT09XHJcbiAgY29uc3Qgc2hvdWxkU2hvd1JldmlzaW9uID0gIWlzUmV2aXNpb25EaXNhYmxlZCAmJiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxXb3Jkc0xlYXJuZWQgPj0gbmV4dFJldmlzaW9uQXQgJiYgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsV29yZHNMZWFybmVkID4gMDtcclxuXHJcbiAgLy8gPT09PT09PT09PSBIQU5ETEVSUyBEVSBQT1BVUCA9PT09PT09PT09XHJcbiAgY29uc3QgaGFuZGxlUmV2aXNpb25DaG9pY2UgPSB1c2VDYWxsYmFjayhhc3luYyAoY2hvaWNlKSA9PiB7XHJcbiAgICBzd2l0Y2ggKGNob2ljZSkge1xyXG4gICAgICBjYXNlICdub3cnOlxyXG4gICAgICAgIC8vIExhIG5hdmlnYXRpb24gc2VyYSBnw6lyw6llIHBhciBsZSBjb21wb3NhbnQgcGFyZW50XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIGFjdGlvbjogJ25hdmlnYXRlJyxcclxuICAgICAgICAgIHdvcmRzOiBhd2FpdCBzZWxlY3RSZXZpc2lvbldvcmRzKCksXHJcbiAgICAgICAgICBxdWVzdGlvbnNDb3VudDogUkVWSVNJT05fQ09ORklHLlFVRVNUSU9OU19DT1VOVFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgXHJcbiAgICAgIGNhc2UgJ2xhdGVyXzUwJzoge1xyXG4gICAgICAgIGNvbnN0IG5ld1RhcmdldDUwID0gdG90YWxXb3Jkc0xlYXJuZWQgKyA1MDtcclxuICAgICAgICBzZXROZXh0UmV2aXNpb25BdChuZXdUYXJnZXQ1MCk7XHJcbiAgICAgICAgcmV0dXJuIHsgYWN0aW9uOiAncG9zdHBvbmVkJywgbmV4dEF0OiBuZXdUYXJnZXQ1MCB9O1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ2xhdGVyXzEwMCc6IHtcclxuICAgICAgICBjb25zdCBuZXdUYXJnZXQxMDAgPSB0b3RhbFdvcmRzTGVhcm5lZCArIDEwMDtcclxuICAgICAgICBzZXROZXh0UmV2aXNpb25BdChuZXdUYXJnZXQxMDApO1xyXG4gICAgICAgIHJldHVybiB7IGFjdGlvbjogJ3Bvc3Rwb25lZCcsIG5leHRBdDogbmV3VGFyZ2V0MTAwIH07XHJcbiAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgY2FzZSAnZGlzYWJsZSc6XHJcbiAgICAgICAgc2V0SXNSZXZpc2lvbkRpc2FibGVkKHRydWUpO1xyXG4gICAgICAgIHJldHVybiB7IGFjdGlvbjogJ2Rpc2FibGVkJyB9O1xyXG4gICAgICAgIFxyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHJldHVybiB7IGFjdGlvbjogJ2NhbmNlbGxlZCcgfTtcclxuICAgIH1cclxuICB9LCBbdG90YWxXb3Jkc0xlYXJuZWQsIHNlbGVjdFJldmlzaW9uV29yZHNdKTtcclxuXHJcbiAgLy8gPT09PT09PT09PSBDT01QTEVUSU9OIEQnVU5FIFLDiVZJU0lPTiA9PT09PT09PT09XHJcbiAgY29uc3QgbWFya1JldmlzaW9uQ29tcGxldGVkID0gdXNlQ2FsbGJhY2soKGNvbXBsZXRlZFdvcmRzLCBzY29yZSwgcXVlc3Rpb25zQ291bnQpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIEVucmVnaXN0cmVyIGwnaGlzdG9yaXF1ZVxyXG4gICAgICBjb25zdCByZXZpc2lvblJlY29yZCA9IHtcclxuICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXHJcbiAgICAgICAgd29yZHNDb3VudDogY29tcGxldGVkV29yZHMubGVuZ3RoLFxyXG4gICAgICAgIHNjb3JlLFxyXG4gICAgICAgIHF1ZXN0aW9uc0NvdW50LFxyXG4gICAgICAgIHBlcmNlbnRhZ2U6IE1hdGgucm91bmQoKHNjb3JlIC8gcXVlc3Rpb25zQ291bnQpICogMTAwKSxcclxuICAgICAgICB0b3RhbFdvcmRzQXRUaW1lOiB0b3RhbFdvcmRzTGVhcm5lZFxyXG4gICAgICB9O1xyXG5cclxuICAgICAgc2V0UmV2aXNpb25IaXN0b3J5KHByZXYgPT4gWy4uLnByZXYsIHJldmlzaW9uUmVjb3JkXSk7XHJcbiAgICAgIHNldExhc3RSZXZpc2lvbldvcmRzKGNvbXBsZXRlZFdvcmRzKTtcclxuICAgICAgXHJcbiAgICAgIC8vIFByb2dyYW1tZXIgbGEgcHJvY2hhaW5lIHLDqXZpc2lvblxyXG4gICAgICBjb25zdCBuZXh0VGFyZ2V0ID0gdG90YWxXb3Jkc0xlYXJuZWQgKyBSRVZJU0lPTl9DT05GSUcuVFJJR0dFUl9JTlRFUlZBTDtcclxuICAgICAgc2V0TmV4dFJldmlzaW9uQXQobmV4dFRhcmdldCk7XHJcblxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS53YXJuKCdFcnJldXIgZW5yZWdpc3RyZW1lbnQgcsOpdmlzaW9uOicsIGVycm9yKTtcclxuICAgIH1cclxuICB9LCBbdG90YWxXb3Jkc0xlYXJuZWRdKTtcclxuXHJcbiAgLy8gPT09PT09PT09PSBSw4lBQ1RJVkFUSU9OIERFUyBSw4lWSVNJT05TID09PT09PT09PT1cclxuICBjb25zdCBlbmFibGVSZXZpc2lvbnMgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICBzZXRJc1JldmlzaW9uRGlzYWJsZWQoZmFsc2UpO1xyXG4gICAgY29uc3QgbmV4dFRhcmdldCA9IHRvdGFsV29yZHNMZWFybmVkICsgUkVWSVNJT05fQ09ORklHLlRSSUdHRVJfSU5URVJWQUw7XHJcbiAgICBzZXROZXh0UmV2aXNpb25BdChuZXh0VGFyZ2V0KTtcclxuICB9LCBbdG90YWxXb3Jkc0xlYXJuZWRdKTtcclxuXHJcbiAgLy8gPT09PT09PT09PSBDQUxDVUwgQVVUTyBEVSBUT1RBTCA9PT09PT09PT09XHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGNhbGN1bGF0ZVRvdGFsV29yZHMoKTtcclxuICAgIFxyXG4gICAgLy8gUmVjYWxjdWxlciBww6lyaW9kaXF1ZW1lbnRcclxuICAgIGNvbnN0IGludGVydmFsID0gc2V0SW50ZXJ2YWwoY2FsY3VsYXRlVG90YWxXb3JkcywgMTAwMDApOyAvLyBUb3V0ZXMgbGVzIDEwc1xyXG4gICAgcmV0dXJuICgpID0+IGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xyXG4gIH0sIFtjYWxjdWxhdGVUb3RhbFdvcmRzXSk7XHJcblxyXG4gIC8vID09PT09PT09PT0gU1RBVElTVElRVUVTID09PT09PT09PT1cclxuICBjb25zdCBnZXRSZXZpc2lvblN0YXRzID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgaWYgKHJldmlzaW9uSGlzdG9yeS5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICB0b3RhbFJldmlzaW9uczogMCxcclxuICAgICAgICBhdmVyYWdlU2NvcmU6IDAsXHJcbiAgICAgICAgbGFzdFJldmlzaW9uOiBudWxsLFxyXG4gICAgICAgIHN0cmVhazogMFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHRvdGFsUmV2aXNpb25zID0gcmV2aXNpb25IaXN0b3J5Lmxlbmd0aDtcclxuICAgIGNvbnN0IGF2ZXJhZ2VTY29yZSA9IHJldmlzaW9uSGlzdG9yeS5yZWR1Y2UoKHN1bSwgcikgPT4gc3VtICsgci5wZXJjZW50YWdlLCAwKSAvIHRvdGFsUmV2aXNpb25zO1xyXG4gICAgY29uc3QgbGFzdFJldmlzaW9uID0gcmV2aXNpb25IaXN0b3J5W3JldmlzaW9uSGlzdG9yeS5sZW5ndGggLSAxXTtcclxuICAgIFxyXG4gICAgLy8gQ2FsY3VsZXIgbGUgc3RyZWFrIChyw6l2aXNpb25zIHLDqWNlbnRlcyBhdmVjID43MCUpXHJcbiAgICBsZXQgc3RyZWFrID0gMDtcclxuICAgIGZvciAobGV0IGkgPSByZXZpc2lvbkhpc3RvcnkubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgaWYgKHJldmlzaW9uSGlzdG9yeVtpXS5wZXJjZW50YWdlID49IDcwKSB7XHJcbiAgICAgICAgc3RyZWFrKys7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0b3RhbFJldmlzaW9ucyxcclxuICAgICAgYXZlcmFnZVNjb3JlOiBNYXRoLnJvdW5kKGF2ZXJhZ2VTY29yZSksXHJcbiAgICAgIGxhc3RSZXZpc2lvbixcclxuICAgICAgc3RyZWFrXHJcbiAgICB9O1xyXG4gIH0sIFtyZXZpc2lvbkhpc3RvcnldKTtcclxuXHJcbiAgLy8gPT09PT09PT09PSBSRVRVUk4gPT09PT09PT09PVxyXG4gIHJldHVybiB7XHJcbiAgICAvLyDDiXRhdFxyXG4gICAgdG90YWxXb3Jkc0xlYXJuZWQsXHJcbiAgICBuZXh0UmV2aXNpb25BdCxcclxuICAgIHNob3VsZFNob3dSZXZpc2lvbixcclxuICAgIGlzUmV2aXNpb25EaXNhYmxlZCxcclxuICAgIGlzTG9hZGluZyxcclxuICAgIFxyXG4gICAgLy8gQWN0aW9uc1xyXG4gICAgaGFuZGxlUmV2aXNpb25DaG9pY2UsXHJcbiAgICBtYXJrUmV2aXNpb25Db21wbGV0ZWQsXHJcbiAgICBlbmFibGVSZXZpc2lvbnMsXHJcbiAgICBjYWxjdWxhdGVUb3RhbFdvcmRzLFxyXG4gICAgc2VsZWN0UmV2aXNpb25Xb3JkcyxcclxuICAgIFxyXG4gICAgLy8gVXRpbGl0YWlyZXNcclxuICAgIGdldFJldmlzaW9uU3RhdHMsXHJcbiAgICBcclxuICAgIC8vIENvbmZpZ3VyYXRpb25cclxuICAgIGNvbmZpZzogUkVWSVNJT05fQ09ORklHXHJcbiAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHVzZVJldmlzaW9uTWFuYWdlcjsiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQ0EsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsYUFBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBRUEsSUFBTUcsZUFBZSxHQUFHO0VBQ3RCQyxnQkFBZ0IsRUFBRSxFQUFFO0VBQ3BCQyxlQUFlLEVBQUUsRUFBRTtFQUNuQkMsV0FBVyxFQUFFO0FBQ2YsQ0FBQztBQUVELElBQU1DLGtCQUFrQixHQUFHLFNBQXJCQSxrQkFBa0JBLENBQUEsRUFBUztFQUUvQixJQUFBQyxTQUFBLEdBQWtELElBQUFDLGVBQVEsRUFBQyxDQUFDLENBQUM7SUFBQUMsVUFBQSxPQUFBQyxlQUFBLENBQUFDLE9BQUEsRUFBQUosU0FBQTtJQUF0REssaUJBQWlCLEdBQUFILFVBQUE7SUFBRUksb0JBQW9CLEdBQUFKLFVBQUE7RUFDOUMsSUFBQUssVUFBQSxHQUE0QyxJQUFBTixlQUFRLEVBQUMsRUFBRSxDQUFDO0lBQUFPLFVBQUEsT0FBQUwsZUFBQSxDQUFBQyxPQUFBLEVBQUFHLFVBQUE7SUFBakRFLGNBQWMsR0FBQUQsVUFBQTtJQUFFRSxpQkFBaUIsR0FBQUYsVUFBQTtFQUN4QyxJQUFBRyxVQUFBLEdBQWtELElBQUFWLGVBQVEsRUFBQyxFQUFFLENBQUM7SUFBQVcsVUFBQSxPQUFBVCxlQUFBLENBQUFDLE9BQUEsRUFBQU8sVUFBQTtJQUF2REUsaUJBQWlCLEdBQUFELFVBQUE7SUFBRUUsb0JBQW9CLEdBQUFGLFVBQUE7RUFDOUMsSUFBQUcsVUFBQSxHQUE4QyxJQUFBZCxlQUFRLEVBQUMsRUFBRSxDQUFDO0lBQUFlLFVBQUEsT0FBQWIsZUFBQSxDQUFBQyxPQUFBLEVBQUFXLFVBQUE7SUFBbkRFLGVBQWUsR0FBQUQsVUFBQTtJQUFFRSxrQkFBa0IsR0FBQUYsVUFBQTtFQUMxQyxJQUFBRyxVQUFBLEdBQW9ELElBQUFsQixlQUFRLEVBQUMsS0FBSyxDQUFDO0lBQUFtQixVQUFBLE9BQUFqQixlQUFBLENBQUFDLE9BQUEsRUFBQWUsVUFBQTtJQUE1REUsa0JBQWtCLEdBQUFELFVBQUE7SUFBRUUscUJBQXFCLEdBQUFGLFVBQUE7RUFDaEQsSUFBQUcsVUFBQSxHQUFrQyxJQUFBdEIsZUFBUSxFQUFDLElBQUksQ0FBQztJQUFBdUIsV0FBQSxPQUFBckIsZUFBQSxDQUFBQyxPQUFBLEVBQUFtQixVQUFBO0lBQXpDRSxTQUFTLEdBQUFELFdBQUE7SUFBRUUsWUFBWSxHQUFBRixXQUFBO0VBRzlCLElBQU1HLGtCQUFrQixHQUFHLElBQUFDLGFBQU0sRUFBQyxDQUFDLENBQUM7RUFFcEMsSUFBTUMsZ0JBQWdCO0lBQUEsSUFBQUMsSUFBQSxPQUFBQyxrQkFBQSxDQUFBM0IsT0FBQSxFQUFHLGFBQVk7TUFDbkMsSUFBSTtRQUNGLElBQU00QixNQUFNLFNBQVNDLHFCQUFZLENBQUNDLE9BQU8sQ0FBQ3ZDLGVBQWUsQ0FBQ0csV0FBVyxDQUFDO1FBQ3RFLElBQUlrQyxNQUFNLEVBQUU7VUFDVixJQUFNRyxJQUFJLEdBQUdDLElBQUksQ0FBQ0MsS0FBSyxDQUFDTCxNQUFNLENBQUM7VUFDL0J0QixpQkFBaUIsQ0FBQ3lCLElBQUksQ0FBQzFCLGNBQWMsSUFBSSxFQUFFLENBQUM7VUFDNUNLLG9CQUFvQixDQUFDcUIsSUFBSSxDQUFDdEIsaUJBQWlCLElBQUksRUFBRSxDQUFDO1VBQ2xESyxrQkFBa0IsQ0FBQ2lCLElBQUksQ0FBQ2xCLGVBQWUsSUFBSSxFQUFFLENBQUM7VUFDOUNLLHFCQUFxQixDQUFDYSxJQUFJLENBQUNkLGtCQUFrQixJQUFJLEtBQUssQ0FBQztRQUN6RDtNQUNGLENBQUMsQ0FBQyxPQUFPaUIsS0FBSyxFQUFFO1FBQ2RDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLHFDQUFxQyxFQUFFRixLQUFLLENBQUM7TUFDNUQsQ0FBQyxTQUFTO1FBQ1JaLFlBQVksQ0FBQyxLQUFLLENBQUM7TUFDckI7SUFDRixDQUFDO0lBQUEsZ0JBZktHLGdCQUFnQkEsQ0FBQTtNQUFBLE9BQUFDLElBQUEsQ0FBQVcsS0FBQSxPQUFBQyxTQUFBO0lBQUE7RUFBQSxHQWVyQjtFQUdELElBQUFDLGdCQUFTLEVBQUMsWUFBTTtJQUNkZCxnQkFBZ0IsQ0FBQyxDQUFDO0VBQ3BCLENBQUMsRUFBRSxFQUFFLENBQUM7RUFHTixJQUFNZSxnQkFBZ0IsR0FBRyxJQUFBQyxrQkFBVyxNQUFBZCxrQkFBQSxDQUFBM0IsT0FBQSxFQUFDLGFBQVk7SUFDL0MsSUFBSXFCLFNBQVMsRUFBRTtJQUVmLElBQUk7TUFDRixJQUFNVSxJQUFJLEdBQUc7UUFDWDFCLGNBQWMsRUFBZEEsY0FBYztRQUNkSSxpQkFBaUIsRUFBakJBLGlCQUFpQjtRQUNqQkksZUFBZSxFQUFmQSxlQUFlO1FBQ2ZJLGtCQUFrQixFQUFsQkEsa0JBQWtCO1FBQ2xCeUIsVUFBVSxFQUFFQyxJQUFJLENBQUNDLEdBQUcsQ0FBQztNQUN2QixDQUFDO01BQ0QsTUFBTWYscUJBQVksQ0FBQ2dCLE9BQU8sQ0FBQ3RELGVBQWUsQ0FBQ0csV0FBVyxFQUFFc0MsSUFBSSxDQUFDYyxTQUFTLENBQUNmLElBQUksQ0FBQyxDQUFDO0lBQy9FLENBQUMsQ0FBQyxPQUFPRyxLQUFLLEVBQUU7TUFDZEMsT0FBTyxDQUFDQyxJQUFJLENBQUMscUNBQXFDLEVBQUVGLEtBQUssQ0FBQztJQUM1RDtFQUNGLENBQUMsR0FBRSxDQUFDN0IsY0FBYyxFQUFFSSxpQkFBaUIsRUFBRUksZUFBZSxFQUFFSSxrQkFBa0IsRUFBRUksU0FBUyxDQUFDLENBQUM7RUFFdkYsSUFBQWtCLGdCQUFTLEVBQUMsWUFBTTtJQUNkQyxnQkFBZ0IsQ0FBQyxDQUFDO0VBQ3BCLENBQUMsRUFBRSxDQUFDQSxnQkFBZ0IsQ0FBQyxDQUFDO0VBR3RCLElBQU1PLG1CQUFtQixHQUFHLElBQUFOLGtCQUFXLE1BQUFkLGtCQUFBLENBQUEzQixPQUFBLEVBQUMsYUFBWTtJQUNsRCxJQUFNNEMsR0FBRyxHQUFHRCxJQUFJLENBQUNDLEdBQUcsQ0FBQyxDQUFDO0lBQ3RCLElBQUlBLEdBQUcsR0FBR3JCLGtCQUFrQixDQUFDeUIsT0FBTyxHQUFHLElBQUksRUFBRTtJQUM3Q3pCLGtCQUFrQixDQUFDeUIsT0FBTyxHQUFHSixHQUFHO0lBRWhDLElBQUk7TUFDRixJQUFJSyxLQUFLLEdBQUcsQ0FBQztNQUNiLElBQU1DLE1BQU0sR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQztNQUN0RCxJQUFNQyxLQUFLLEdBQUcsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDO01BRWpDLEtBQUssSUFBTUMsS0FBSyxJQUFJRixNQUFNLEVBQUU7UUFDMUIsS0FBSyxJQUFNRyxJQUFJLElBQUlGLEtBQUssRUFBRTtVQUN4QixJQUFNdkIsTUFBTSxTQUFTQyxxQkFBWSxDQUFDQyxPQUFPLENBQUMsY0FBY3NCLEtBQUssSUFBSUMsSUFBSSxFQUFFLENBQUM7VUFDeEUsSUFBSXpCLE1BQU0sRUFBRTtZQUNWLElBQU1HLElBQUksR0FBR0MsSUFBSSxDQUFDQyxLQUFLLENBQUNMLE1BQU0sQ0FBQztZQUMvQixJQUFNMEIsY0FBYyxHQUFHdkIsSUFBSSxDQUFDdUIsY0FBYyxJQUFJLENBQUMsQ0FBQztZQUdoREwsS0FBSyxJQUFJTSxNQUFNLENBQUNDLE1BQU0sQ0FBQ0YsY0FBYyxDQUFDLENBQUNHLE1BQU0sQ0FBQyxVQUFDQyxHQUFHLEVBQUVDLEtBQUssRUFBSztjQUM1RCxJQUFJQyxLQUFLLENBQUNDLE9BQU8sQ0FBQ0YsS0FBSyxDQUFDLEVBQUU7Z0JBQ3hCLE9BQU9ELEdBQUcsR0FBR0MsS0FBSyxDQUFDRyxNQUFNO2NBQzNCO2NBQ0EsT0FBT0osR0FBRztZQUNaLENBQUMsRUFBRSxDQUFDLENBQUM7VUFDUDtRQUNGO01BQ0Y7TUFFQXhELG9CQUFvQixDQUFDK0MsS0FBSyxDQUFDO0lBQzdCLENBQUMsQ0FBQyxPQUFPZixLQUFLLEVBQUU7TUFDZEMsT0FBTyxDQUFDQyxJQUFJLENBQUMsNEJBQTRCLEVBQUVGLEtBQUssQ0FBQztJQUNuRDtFQUNGLENBQUMsR0FBRSxFQUFFLENBQUM7RUFHTixJQUFNNkIsa0JBQWtCLEdBQUcsSUFBQXRCLGtCQUFXLE1BQUFkLGtCQUFBLENBQUEzQixPQUFBLEVBQUMsYUFBWTtJQUNqRCxJQUFJO01BQ0YsSUFBTWdFLFFBQVEsR0FBRyxFQUFFO01BQ25CLElBQU1kLE1BQU0sR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQztNQUN0RCxJQUFNQyxLQUFLLEdBQUcsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDO01BQUMsSUFBQWMsS0FBQSxhQUFBQSxNQUFBYixLQUFBLEVBRU47UUFBQSxJQUFBYyxNQUFBLGFBQUFBLE9BQUFiLElBQUEsRUFDQTtVQUN4QixJQUFNekIsTUFBTSxTQUFTQyxxQkFBWSxDQUFDQyxPQUFPLENBQUMsY0FBY3NCLEtBQUssSUFBSUMsSUFBSSxFQUFFLENBQUM7VUFDeEUsSUFBSXpCLE1BQU0sRUFBRTtZQUNWLElBQU1HLElBQUksR0FBR0MsSUFBSSxDQUFDQyxLQUFLLENBQUNMLE1BQU0sQ0FBQztZQUMvQixJQUFNMEIsY0FBYyxHQUFHdkIsSUFBSSxDQUFDdUIsY0FBYyxJQUFJLENBQUMsQ0FBQztZQUdoREMsTUFBTSxDQUFDWSxPQUFPLENBQUNiLGNBQWMsQ0FBQyxDQUFDYyxPQUFPLENBQUMsVUFBQUMsS0FBQSxFQUE0QjtjQUFBLElBQUFDLEtBQUEsT0FBQXZFLGVBQUEsQ0FBQUMsT0FBQSxFQUFBcUUsS0FBQTtnQkFBMUJFLGFBQWEsR0FBQUQsS0FBQTtnQkFBRVgsS0FBSyxHQUFBVyxLQUFBO2NBQzNELElBQUlWLEtBQUssQ0FBQ0MsT0FBTyxDQUFDRixLQUFLLENBQUMsRUFBRTtnQkFDeEJBLEtBQUssQ0FBQ1MsT0FBTyxDQUFDLFVBQUFJLElBQUksRUFBSTtrQkFFcEIsSUFBSSxPQUFPQSxJQUFJLEtBQUssUUFBUSxJQUFJQSxJQUFJLENBQUNBLElBQUksRUFBRTtvQkFDekNSLFFBQVEsQ0FBQ1MsSUFBSSxDQUFBbEIsTUFBQSxDQUFBbUIsTUFBQSxLQUNSRixJQUFJO3NCQUNQRyxTQUFTLEVBQUV2QixLQUFLO3NCQUNoQndCLFFBQVEsRUFBRXZCLElBQUk7c0JBQ2RrQixhQUFhLEVBQUVNLFFBQVEsQ0FBQ04sYUFBYTtvQkFBQyxFQUN2QyxDQUFDO2tCQUNKLENBQUMsTUFBTSxJQUFJLE9BQU9DLElBQUksS0FBSyxRQUFRLEVBQUU7b0JBRW5DUixRQUFRLENBQUNTLElBQUksQ0FBQztzQkFDWkQsSUFBSSxFQUFKQSxJQUFJO3NCQUNKTSxXQUFXLEVBQUUsR0FBRztzQkFDaEJILFNBQVMsRUFBRXZCLEtBQUs7c0JBQ2hCd0IsUUFBUSxFQUFFdkIsSUFBSTtzQkFDZGtCLGFBQWEsRUFBRU0sUUFBUSxDQUFDTixhQUFhLENBQUM7c0JBQ3RDUSxTQUFTLEVBQUU7b0JBQ2IsQ0FBQyxDQUFDO2tCQUNKO2dCQUNGLENBQUMsQ0FBQztjQUNKO1lBQ0YsQ0FBQyxDQUFDO1VBQ0o7UUFDRixDQUFDO1FBakNELEtBQUssSUFBTTFCLElBQUksSUFBSUYsS0FBSztVQUFBLE9BQUFlLE1BQUEsQ0FBQWIsSUFBQTtRQUFBO01Ba0MxQixDQUFDO01BbkNELEtBQUssSUFBTUQsS0FBSyxJQUFJRixNQUFNO1FBQUEsT0FBQWUsS0FBQSxDQUFBYixLQUFBO01BQUE7TUFxQzFCLE9BQU9ZLFFBQVE7SUFDakIsQ0FBQyxDQUFDLE9BQU85QixLQUFLLEVBQUU7TUFDZEMsT0FBTyxDQUFDQyxJQUFJLENBQUMsa0NBQWtDLEVBQUVGLEtBQUssQ0FBQztNQUN2RCxPQUFPLEVBQUU7SUFDWDtFQUNGLENBQUMsR0FBRSxFQUFFLENBQUM7RUFHTixJQUFNOEMsbUJBQW1CLEdBQUcsSUFBQXZDLGtCQUFXLE1BQUFkLGtCQUFBLENBQUEzQixPQUFBLEVBQUMsYUFBbUQ7SUFBQSxJQUE1Q2lGLEtBQUssR0FBQTNDLFNBQUEsQ0FBQXdCLE1BQUEsUUFBQXhCLFNBQUEsUUFBQTRDLFNBQUEsR0FBQTVDLFNBQUEsTUFBRy9DLGVBQWUsQ0FBQ0UsZUFBZTtJQUNwRixJQUFNdUUsUUFBUSxTQUFTRCxrQkFBa0IsQ0FBQyxDQUFDO0lBRTNDLElBQUlDLFFBQVEsQ0FBQ0YsTUFBTSxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUU7SUFDcEMsSUFBSUUsUUFBUSxDQUFDRixNQUFNLElBQUltQixLQUFLLEVBQUUsT0FBT2pCLFFBQVE7SUFHN0MsSUFBTW1CLFNBQVMsR0FBRyxJQUFJQyxHQUFHLENBQUMzRSxpQkFBaUIsQ0FBQzRFLEdBQUcsQ0FBQyxVQUFBQyxDQUFDO01BQUEsT0FBSUEsQ0FBQyxDQUFDZCxJQUFJO0lBQUEsRUFBQyxDQUFDO0lBQzdELElBQU1lLGNBQWMsR0FBR3ZCLFFBQVEsQ0FBQ3dCLE1BQU0sQ0FBQyxVQUFBaEIsSUFBSTtNQUFBLE9BQUksQ0FBQ1csU0FBUyxDQUFDTSxHQUFHLENBQUNqQixJQUFJLENBQUNBLElBQUksQ0FBQztJQUFBLEVBQUM7SUFHekUsSUFBTWtCLFNBQVMsR0FBR0gsY0FBYyxDQUFDekIsTUFBTSxJQUFJbUIsS0FBSyxHQUFHTSxjQUFjLEdBQUd2QixRQUFRO0lBTzVFLElBQU0yQixXQUFXLEdBQUdELFNBQVMsQ0FBQ0UsSUFBSSxDQUFDLFVBQUNDLENBQUMsRUFBRUMsQ0FBQyxFQUFLO01BQzNDLElBQU1DLEtBQUssR0FBR0YsQ0FBQyxDQUFDZCxTQUFTLEdBQUcsSUFBSXBDLElBQUksQ0FBQ2tELENBQUMsQ0FBQ2QsU0FBUyxDQUFDLENBQUNpQixPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUM7TUFDL0QsSUFBTUMsS0FBSyxHQUFHSCxDQUFDLENBQUNmLFNBQVMsR0FBRyxJQUFJcEMsSUFBSSxDQUFDbUQsQ0FBQyxDQUFDZixTQUFTLENBQUMsQ0FBQ2lCLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQztNQUMvRCxPQUFPRCxLQUFLLEdBQUdFLEtBQUs7SUFDdEIsQ0FBQyxDQUFDO0lBR0YsSUFBTUMsUUFBUSxHQUFHQyxJQUFJLENBQUNDLEtBQUssQ0FBQ25CLEtBQUssR0FBRyxHQUFHLENBQUM7SUFDeEMsSUFBTW9CLFdBQVcsR0FBR3BCLEtBQUssR0FBR2lCLFFBQVE7SUFFcEMsSUFBTUksUUFBUSxHQUFHWCxXQUFXLENBQUNZLEtBQUssQ0FBQyxDQUFDLEVBQUVMLFFBQVEsQ0FBQztJQUMvQyxJQUFNTSxjQUFjLEdBQUdiLFdBQVcsQ0FBQ1ksS0FBSyxDQUFDTCxRQUFRLENBQUM7SUFDbEQsSUFBTU8sV0FBVyxHQUFHRCxjQUFjLENBQy9CWixJQUFJLENBQUM7TUFBQSxPQUFNTyxJQUFJLENBQUNPLE1BQU0sQ0FBQyxDQUFDLEdBQUcsR0FBRztJQUFBLEVBQUMsQ0FDL0JILEtBQUssQ0FBQyxDQUFDLEVBQUVGLFdBQVcsQ0FBQztJQUV4QixJQUFNTSxhQUFhLEdBQUcsR0FBQUMsTUFBQSxLQUFBQyxtQkFBQSxDQUFBN0csT0FBQSxFQUFJc0csUUFBUSxPQUFBTyxtQkFBQSxDQUFBN0csT0FBQSxFQUFLeUcsV0FBVyxHQUMvQ2IsSUFBSSxDQUFDO01BQUEsT0FBTU8sSUFBSSxDQUFDTyxNQUFNLENBQUMsQ0FBQyxHQUFHLEdBQUc7SUFBQSxFQUFDO0lBRWxDLE9BQU9DLGFBQWEsQ0FBQ0osS0FBSyxDQUFDLENBQUMsRUFBRXRCLEtBQUssQ0FBQztFQUN0QyxDQUFDLEdBQUUsQ0FBQ3hFLGlCQUFpQixFQUFFc0Qsa0JBQWtCLENBQUMsQ0FBQztFQUczQyxJQUFNK0Msa0JBQWtCLEdBQUcsQ0FBQzdGLGtCQUFrQixJQUNyQmhCLGlCQUFpQixJQUFJSSxjQUFjLElBQ25DSixpQkFBaUIsR0FBRyxDQUFDO0VBRzlDLElBQU04RyxvQkFBb0IsR0FBRyxJQUFBdEUsa0JBQVc7SUFBQSxJQUFBdUUsS0FBQSxPQUFBckYsa0JBQUEsQ0FBQTNCLE9BQUEsRUFBQyxXQUFPaUgsTUFBTSxFQUFLO01BQ3pELFFBQVFBLE1BQU07UUFDWixLQUFLLEtBQUs7VUFFUixPQUFPO1lBQ0xDLE1BQU0sRUFBRSxVQUFVO1lBQ2xCdkQsS0FBSyxRQUFRcUIsbUJBQW1CLENBQUMsQ0FBQztZQUNsQ21DLGNBQWMsRUFBRTVILGVBQWUsQ0FBQ0U7VUFDbEMsQ0FBQztRQUVILEtBQUssVUFBVTtVQUFFO1lBQ2YsSUFBTTJILFdBQVcsR0FBR25ILGlCQUFpQixHQUFHLEVBQUU7WUFDMUNLLGlCQUFpQixDQUFDOEcsV0FBVyxDQUFDO1lBQzlCLE9BQU87Y0FBRUYsTUFBTSxFQUFFLFdBQVc7Y0FBRUcsTUFBTSxFQUFFRDtZQUFZLENBQUM7VUFDckQ7UUFDQSxLQUFLLFdBQVc7VUFBRTtZQUNoQixJQUFNRSxZQUFZLEdBQUdySCxpQkFBaUIsR0FBRyxHQUFHO1lBQzVDSyxpQkFBaUIsQ0FBQ2dILFlBQVksQ0FBQztZQUMvQixPQUFPO2NBQUVKLE1BQU0sRUFBRSxXQUFXO2NBQUVHLE1BQU0sRUFBRUM7WUFBYSxDQUFDO1VBQ3REO1FBRUEsS0FBSyxTQUFTO1VBQ1pwRyxxQkFBcUIsQ0FBQyxJQUFJLENBQUM7VUFDM0IsT0FBTztZQUFFZ0csTUFBTSxFQUFFO1VBQVcsQ0FBQztRQUUvQjtVQUNFLE9BQU87WUFBRUEsTUFBTSxFQUFFO1VBQVksQ0FBQztNQUNsQztJQUNGLENBQUM7SUFBQSxpQkFBQUssRUFBQTtNQUFBLE9BQUFQLEtBQUEsQ0FBQTNFLEtBQUEsT0FBQUMsU0FBQTtJQUFBO0VBQUEsS0FBRSxDQUFDckMsaUJBQWlCLEVBQUUrRSxtQkFBbUIsQ0FBQyxDQUFDO0VBRzVDLElBQU13QyxxQkFBcUIsR0FBRyxJQUFBL0Usa0JBQVcsRUFBQyxVQUFDYSxjQUFjLEVBQUVtRSxLQUFLLEVBQUVOLGNBQWMsRUFBSztJQUNuRixJQUFJO01BRUYsSUFBTU8sY0FBYyxHQUFHO1FBQ3JCM0MsU0FBUyxFQUFFcEMsSUFBSSxDQUFDQyxHQUFHLENBQUMsQ0FBQztRQUNyQitFLFVBQVUsRUFBRXJFLGNBQWMsQ0FBQ1EsTUFBTTtRQUNqQzJELEtBQUssRUFBTEEsS0FBSztRQUNMTixjQUFjLEVBQWRBLGNBQWM7UUFDZFMsVUFBVSxFQUFFekIsSUFBSSxDQUFDMEIsS0FBSyxDQUFFSixLQUFLLEdBQUdOLGNBQWMsR0FBSSxHQUFHLENBQUM7UUFDdERXLGdCQUFnQixFQUFFN0g7TUFDcEIsQ0FBQztNQUVEYSxrQkFBa0IsQ0FBQyxVQUFBaUgsSUFBSTtRQUFBLFVBQUFuQixNQUFBLEtBQUFDLG1CQUFBLENBQUE3RyxPQUFBLEVBQVErSCxJQUFJLElBQUVMLGNBQWM7TUFBQSxDQUFDLENBQUM7TUFDckRoSCxvQkFBb0IsQ0FBQzRDLGNBQWMsQ0FBQztNQUdwQyxJQUFNMEUsVUFBVSxHQUFHL0gsaUJBQWlCLEdBQUdWLGVBQWUsQ0FBQ0MsZ0JBQWdCO01BQ3ZFYyxpQkFBaUIsQ0FBQzBILFVBQVUsQ0FBQztJQUUvQixDQUFDLENBQUMsT0FBTzlGLEtBQUssRUFBRTtNQUNkQyxPQUFPLENBQUNDLElBQUksQ0FBQyxpQ0FBaUMsRUFBRUYsS0FBSyxDQUFDO0lBQ3hEO0VBQ0YsQ0FBQyxFQUFFLENBQUNqQyxpQkFBaUIsQ0FBQyxDQUFDO0VBR3ZCLElBQU1nSSxlQUFlLEdBQUcsSUFBQXhGLGtCQUFXLEVBQUMsWUFBTTtJQUN4Q3ZCLHFCQUFxQixDQUFDLEtBQUssQ0FBQztJQUM1QixJQUFNOEcsVUFBVSxHQUFHL0gsaUJBQWlCLEdBQUdWLGVBQWUsQ0FBQ0MsZ0JBQWdCO0lBQ3ZFYyxpQkFBaUIsQ0FBQzBILFVBQVUsQ0FBQztFQUMvQixDQUFDLEVBQUUsQ0FBQy9ILGlCQUFpQixDQUFDLENBQUM7RUFHdkIsSUFBQXNDLGdCQUFTLEVBQUMsWUFBTTtJQUNkUSxtQkFBbUIsQ0FBQyxDQUFDO0lBR3JCLElBQU1tRixRQUFRLEdBQUdDLFdBQVcsQ0FBQ3BGLG1CQUFtQixFQUFFLEtBQUssQ0FBQztJQUN4RCxPQUFPO01BQUEsT0FBTXFGLGFBQWEsQ0FBQ0YsUUFBUSxDQUFDO0lBQUE7RUFDdEMsQ0FBQyxFQUFFLENBQUNuRixtQkFBbUIsQ0FBQyxDQUFDO0VBR3pCLElBQU1zRixnQkFBZ0IsR0FBRyxJQUFBNUYsa0JBQVcsRUFBQyxZQUFNO0lBQ3pDLElBQUk1QixlQUFlLENBQUNpRCxNQUFNLEtBQUssQ0FBQyxFQUFFO01BQ2hDLE9BQU87UUFDTHdFLGNBQWMsRUFBRSxDQUFDO1FBQ2pCQyxZQUFZLEVBQUUsQ0FBQztRQUNmQyxZQUFZLEVBQUUsSUFBSTtRQUNsQkMsTUFBTSxFQUFFO01BQ1YsQ0FBQztJQUNIO0lBRUEsSUFBTUgsY0FBYyxHQUFHekgsZUFBZSxDQUFDaUQsTUFBTTtJQUM3QyxJQUFNeUUsWUFBWSxHQUFHMUgsZUFBZSxDQUFDNEMsTUFBTSxDQUFDLFVBQUNpRixHQUFHLEVBQUVDLENBQUM7TUFBQSxPQUFLRCxHQUFHLEdBQUdDLENBQUMsQ0FBQ2YsVUFBVTtJQUFBLEdBQUUsQ0FBQyxDQUFDLEdBQUdVLGNBQWM7SUFDL0YsSUFBTUUsWUFBWSxHQUFHM0gsZUFBZSxDQUFDQSxlQUFlLENBQUNpRCxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBR2hFLElBQUkyRSxNQUFNLEdBQUcsQ0FBQztJQUNkLEtBQUssSUFBSUcsQ0FBQyxHQUFHL0gsZUFBZSxDQUFDaUQsTUFBTSxHQUFHLENBQUMsRUFBRThFLENBQUMsSUFBSSxDQUFDLEVBQUVBLENBQUMsRUFBRSxFQUFFO01BQ3BELElBQUkvSCxlQUFlLENBQUMrSCxDQUFDLENBQUMsQ0FBQ2hCLFVBQVUsSUFBSSxFQUFFLEVBQUU7UUFDdkNhLE1BQU0sRUFBRTtNQUNWLENBQUMsTUFBTTtRQUNMO01BQ0Y7SUFDRjtJQUVBLE9BQU87TUFDTEgsY0FBYyxFQUFkQSxjQUFjO01BQ2RDLFlBQVksRUFBRXBDLElBQUksQ0FBQzBCLEtBQUssQ0FBQ1UsWUFBWSxDQUFDO01BQ3RDQyxZQUFZLEVBQVpBLFlBQVk7TUFDWkMsTUFBTSxFQUFOQTtJQUNGLENBQUM7RUFDSCxDQUFDLEVBQUUsQ0FBQzVILGVBQWUsQ0FBQyxDQUFDO0VBR3JCLE9BQU87SUFFTFosaUJBQWlCLEVBQWpCQSxpQkFBaUI7SUFDakJJLGNBQWMsRUFBZEEsY0FBYztJQUNkeUcsa0JBQWtCLEVBQWxCQSxrQkFBa0I7SUFDbEI3RixrQkFBa0IsRUFBbEJBLGtCQUFrQjtJQUNsQkksU0FBUyxFQUFUQSxTQUFTO0lBR1QwRixvQkFBb0IsRUFBcEJBLG9CQUFvQjtJQUNwQlMscUJBQXFCLEVBQXJCQSxxQkFBcUI7SUFDckJTLGVBQWUsRUFBZkEsZUFBZTtJQUNmbEYsbUJBQW1CLEVBQW5CQSxtQkFBbUI7SUFDbkJpQyxtQkFBbUIsRUFBbkJBLG1CQUFtQjtJQUduQnFELGdCQUFnQixFQUFoQkEsZ0JBQWdCO0lBR2hCUSxNQUFNLEVBQUV0SjtFQUNWLENBQUM7QUFDSCxDQUFDO0FBQUMsSUFBQXVKLFFBQUEsR0FBQUMsT0FBQSxDQUFBL0ksT0FBQSxHQUVhTCxrQkFBa0IiLCJpZ25vcmVMaXN0IjpbXX0=