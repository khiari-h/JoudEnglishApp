a6855501ec8690944a0ca29f7a74801c
_getJestObj().mock('../../../src/components/exercise-common/CategorySelector/style', function () {
  var _jest$requireActual = jest.requireActual('react-native'),
    StyleSheet = _jest$requireActual.StyleSheet;
  return function () {
    return StyleSheet.create({
      container: {},
      backgroundGradient: {},
      scrollView: {},
      scrollContent: {},
      categoryItemWrapper: {},
      categoryTouchable: {},
      selectedCategoryItem: {},
      selectedInner: {},
      selectedCategoryText: {
        color: '#FFFFFF'
      },
      sparkleContainer: {},
      sparkle: {},
      categoryItem: {},
      categoryInner: {},
      categoryText: {}
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _CategorySelector = _interopRequireWildcard(require("../../../src/components/exercise-common/CategorySelector"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('CategorySelector', function () {
  var categories = [{
    id: '1',
    name: 'Grammar'
  }, {
    id: '2',
    name: 'Vocabulary'
  }, {
    id: '3',
    name: 'Reading'
  }];
  beforeEach(function () {
    jest.useFakeTimers();
    jest.clearAllMocks();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  it('should render all categories correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories
      })),
      getByText = _render.getByText;
    expect(getByText('Grammar')).toBeTruthy();
    expect(getByText('Vocabulary')).toBeTruthy();
    expect(getByText('Reading')).toBeTruthy();
  });
  it('should display the selected category with the sparkle emoji', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: function onSelectCategory() {}
      })),
      getByText = _render2.getByText;
    expect(getByText('âœ¨')).toBeTruthy();
  });
  it('should call onSelectCategory with the correct category id when a category is pressed', function () {
    var onSelectCategory = jest.fn();
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        onSelectCategory: onSelectCategory
      })),
      getByText = _render3.getByText;
    _reactNative.fireEvent.press(getByText('Vocabulary'));
    expect(onSelectCategory).toHaveBeenCalledWith('2');
  });
  it('should trigger animation logic when selectedCategory changes', (0, _asyncToGenerator2.default)(function* () {
    var onSelectCategory = jest.fn();
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: onSelectCategory
      })),
      rerender = _render4.rerender;
    var mockTiming = jest.spyOn(_reactNative2.Animated, 'timing');
    mockTiming.mockClear();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "2",
        onSelectCategory: onSelectCategory
      }));
      jest.advanceTimersByTime(300);
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockTiming).toHaveBeenCalledTimes(2);
    });
  }));
  it('should trigger press animations on touch', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: function onSelectCategory() {}
      })),
      getByText = _render5.getByText;
    var mockTiming = jest.spyOn(_reactNative2.Animated, 'timing');
    mockTiming.mockClear();
    (0, _reactNative.fireEvent)(getByText('Vocabulary'), 'pressIn');
    expect(mockTiming).toHaveBeenCalledTimes(1);
    expect(mockTiming).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({
      toValue: 0.95,
      useNativeDriver: true
    }));
    (0, _reactNative.fireEvent)(getByText('Vocabulary'), 'pressOut');
    expect(mockTiming).toHaveBeenCalledTimes(2);
    expect(mockTiming).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({
      toValue: 1,
      useNativeDriver: true
    }));
  });
  it('should not call onSelectCategory if the same category is pressed', function () {
    var onSelectCategory = jest.fn();
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "2",
        onSelectCategory: onSelectCategory
      })),
      getByText = _render6.getByText;
    _reactNative.fireEvent.press(getByText('Vocabulary'));
    expect(onSelectCategory).not.toHaveBeenCalled();
  });
  it('should not trigger a new animation if one is already running', (0, _asyncToGenerator2.default)(function* () {
    var onSelectCategory = jest.fn();
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: onSelectCategory
      })),
      rerender = _render7.rerender;
    var mockTiming = jest.spyOn(_reactNative2.Animated, 'timing');
    mockTiming.mockClear();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "2",
        onSelectCategory: onSelectCategory
      }));
    }));
    jest.advanceTimersByTime(100);
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "3",
        onSelectCategory: onSelectCategory
      }));
      jest.advanceTimersByTime(200);
    }));
    expect(mockTiming).toHaveBeenCalledTimes(2);
  }));
  it('should not trigger an animation if selectedCategory does not change', (0, _asyncToGenerator2.default)(function* () {
    var onSelectCategory = jest.fn();
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: onSelectCategory
      })),
      rerender = _render8.rerender;
    var mockTiming = jest.spyOn(_reactNative2.Animated, 'timing');
    mockTiming.mockClear();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: onSelectCategory
      }));
      jest.advanceTimersByTime(100);
    }));
    expect(mockTiming).not.toHaveBeenCalled();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfamVzdCRyZXF1aXJlQWN0dWFsIiwiamVzdCIsInJlcXVpcmVBY3R1YWwiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiY29udGFpbmVyIiwiYmFja2dyb3VuZEdyYWRpZW50Iiwic2Nyb2xsVmlldyIsInNjcm9sbENvbnRlbnQiLCJjYXRlZ29yeUl0ZW1XcmFwcGVyIiwiY2F0ZWdvcnlUb3VjaGFibGUiLCJzZWxlY3RlZENhdGVnb3J5SXRlbSIsInNlbGVjdGVkSW5uZXIiLCJzZWxlY3RlZENhdGVnb3J5VGV4dCIsImNvbG9yIiwic3BhcmtsZUNvbnRhaW5lciIsInNwYXJrbGUiLCJjYXRlZ29yeUl0ZW0iLCJjYXRlZ29yeUlubmVyIiwiY2F0ZWdvcnlUZXh0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfcmVhY3ROYXRpdmUyIiwiX0NhdGVnb3J5U2VsZWN0b3IiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9qc3hSdW50aW1lIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsIl90IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwiY2F0ZWdvcmllcyIsImlkIiwibmFtZSIsImJlZm9yZUVhY2giLCJ1c2VGYWtlVGltZXJzIiwiY2xlYXJBbGxNb2NrcyIsImFmdGVyRWFjaCIsInVzZVJlYWxUaW1lcnMiLCJpdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJnZXRCeVRleHQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwiX3JlbmRlcjIiLCJzZWxlY3RlZENhdGVnb3J5Iiwib25TZWxlY3RDYXRlZ29yeSIsImZuIiwiX3JlbmRlcjMiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiX3JlbmRlcjQiLCJyZXJlbmRlciIsIm1vY2tUaW1pbmciLCJzcHlPbiIsIkFuaW1hdGVkIiwibW9ja0NsZWFyIiwiYWN0IiwiYWR2YW5jZVRpbWVyc0J5VGltZSIsIndhaXRGb3IiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJfcmVuZGVyNSIsImFueXRoaW5nIiwib2JqZWN0Q29udGFpbmluZyIsInRvVmFsdWUiLCJ1c2VOYXRpdmVEcml2ZXIiLCJfcmVuZGVyNiIsIm5vdCIsInRvSGF2ZUJlZW5DYWxsZWQiLCJfcmVuZGVyNyIsIl9yZW5kZXI4Il0sInNvdXJjZXMiOlsiQ2F0ZWdvcnlTZWxlY3Rvci50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCwgYWN0LCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgQW5pbWF0ZWQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IENhdGVnb3J5U2VsZWN0b3IsIHsgYXJlRXF1YWwgfSBmcm9tICcuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9leGVyY2lzZS1jb21tb24vQ2F0ZWdvcnlTZWxlY3Rvcic7XG5cbi8vIE1vY2sgZHUgc3R5bGUgcG91ciBxdWUgbGVzIHRlc3RzIGZvbmN0aW9ubmVudCBzYW5zIGVycmV1ciBkZSBzdHlsZVxuamVzdC5tb2NrKCcuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9leGVyY2lzZS1jb21tb24vQ2F0ZWdvcnlTZWxlY3Rvci9zdHlsZScsICgpID0+IHtcbsKgIGNvbnN0IHsgU3R5bGVTaGVldCB9ID0gamVzdC5yZXF1aXJlQWN0dWFsKCdyZWFjdC1uYXRpdmUnKTtcbsKgIHJldHVybiAoKSA9PiBTdHlsZVNoZWV0LmNyZWF0ZSh7XG7CoCDCoCBjb250YWluZXI6IHt9LFxuwqAgwqAgYmFja2dyb3VuZEdyYWRpZW50OiB7fSxcbsKgIMKgIHNjcm9sbFZpZXc6IHt9LFxuwqAgwqAgc2Nyb2xsQ29udGVudDoge30sXG7CoCDCoCBjYXRlZ29yeUl0ZW1XcmFwcGVyOiB7fSxcbsKgIMKgIGNhdGVnb3J5VG91Y2hhYmxlOiB7fSxcbsKgIMKgIHNlbGVjdGVkQ2F0ZWdvcnlJdGVtOiB7fSxcbsKgIMKgIHNlbGVjdGVkSW5uZXI6IHt9LFxuwqAgwqAgc2VsZWN0ZWRDYXRlZ29yeVRleHQ6IHsgY29sb3I6ICcjRkZGRkZGJyB9LFxuwqAgwqAgc3BhcmtsZUNvbnRhaW5lcjoge30sXG7CoCDCoCBzcGFya2xlOiB7fSxcbsKgIMKgIGNhdGVnb3J5SXRlbToge30sXG7CoCDCoCBjYXRlZ29yeUlubmVyOiB7fSxcbsKgIMKgIGNhdGVnb3J5VGV4dDoge30sXG7CoCB9KTtcbn0pO1xuXG5kZXNjcmliZSgnQ2F0ZWdvcnlTZWxlY3RvcicsICgpID0+IHtcbsKgIGNvbnN0IGNhdGVnb3JpZXMgPSBbXG7CoCDCoCB7IGlkOiAnMScsIG5hbWU6ICdHcmFtbWFyJyB9LFxuwqAgwqAgeyBpZDogJzInLCBuYW1lOiAnVm9jYWJ1bGFyeScgfSxcbsKgIMKgIHsgaWQ6ICczJywgbmFtZTogJ1JlYWRpbmcnIH0sXG7CoCBdO1xuXG7CoCBiZWZvcmVFYWNoKCgpID0+IHtcbsKgIMKgIGplc3QudXNlRmFrZVRpbWVycygpO1xuwqAgwqAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG7CoCB9KTtcblxuwqAgYWZ0ZXJFYWNoKCgpID0+IHtcbsKgIMKgIGplc3QudXNlUmVhbFRpbWVycygpO1xuwqAgfSk7XG5cbsKgIC8vIFRlc3QgMSA6IFJlbmR1IGluaXRpYWxcbsKgIGl0KCdzaG91bGQgcmVuZGVyIGFsbCBjYXRlZ29yaWVzIGNvcnJlY3RseScsICgpID0+IHtcbsKgIMKgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPENhdGVnb3J5U2VsZWN0b3IgY2F0ZWdvcmllcz17Y2F0ZWdvcmllc30gLz4pO1xuwqAgwqAgZXhwZWN0KGdldEJ5VGV4dCgnR3JhbW1hcicpKS50b0JlVHJ1dGh5KCk7XG7CoCDCoCBleHBlY3QoZ2V0QnlUZXh0KCdWb2NhYnVsYXJ5JykpLnRvQmVUcnV0aHkoKTtcbsKgIMKgIGV4cGVjdChnZXRCeVRleHQoJ1JlYWRpbmcnKSkudG9CZVRydXRoeSgpO1xuwqAgfSk7XG5cbsKgIC8vIFRlc3QgMiA6IEFmZmljaGFnZSBkZSBsYSBjYXTDqWdvcmllIHPDqWxlY3Rpb25uw6llXG7CoCBpdCgnc2hvdWxkIGRpc3BsYXkgdGhlIHNlbGVjdGVkIGNhdGVnb3J5IHdpdGggdGhlIHNwYXJrbGUgZW1vamknLCAoKSA9PiB7XG7CoCDCoCBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuwqAgwqAgwqAgPENhdGVnb3J5U2VsZWN0b3JcbsKgIMKgIMKgIMKgIGNhdGVnb3JpZXM9e2NhdGVnb3JpZXN9XG7CoCDCoCDCoCDCoCBzZWxlY3RlZENhdGVnb3J5PVwiMVwiXG7CoCDCoCDCoCDCoCBvblNlbGVjdENhdGVnb3J5PXsoKSA9PiB7fX1cbsKgIMKgIMKgIC8+XG7CoCDCoCApO1xuwqAgwqAgZXhwZWN0KGdldEJ5VGV4dCgn4pyoJykpLnRvQmVUcnV0aHkoKTtcbsKgIH0pO1xuXG7CoCAvLyBUZXN0IDMgOiBBcHBlbCBkZSBsYSBmb25jdGlvbiBvblNlbGVjdENhdGVnb3J5XG7CoCBpdCgnc2hvdWxkIGNhbGwgb25TZWxlY3RDYXRlZ29yeSB3aXRoIHRoZSBjb3JyZWN0IGNhdGVnb3J5IGlkIHdoZW4gYSBjYXRlZ29yeSBpcyBwcmVzc2VkJywgKCkgPT4ge1xuwqAgwqAgY29uc3Qgb25TZWxlY3RDYXRlZ29yeSA9IGplc3QuZm4oKTtcbsKgIMKgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG7CoCDCoCDCoCA8Q2F0ZWdvcnlTZWxlY3RvclxuwqAgwqAgwqAgwqAgY2F0ZWdvcmllcz17Y2F0ZWdvcmllc31cbsKgIMKgIMKgIMKgIG9uU2VsZWN0Q2F0ZWdvcnk9e29uU2VsZWN0Q2F0ZWdvcnl9XG7CoCDCoCDCoCAvPlxuwqAgwqAgKTtcbsKgIMKgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ1ZvY2FidWxhcnknKSk7XG7CoCDCoCBleHBlY3Qob25TZWxlY3RDYXRlZ29yeSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJzInKTtcbsKgIH0pO1xuXG7CoCAvLyBUZXN0IDQgOiBBbmltYXRpb24gbG9ycyBkdSBjaGFuZ2VtZW50IGRlIHPDqWxlY3Rpb25cbsKgIGl0KCdzaG91bGQgdHJpZ2dlciBhbmltYXRpb24gbG9naWMgd2hlbiBzZWxlY3RlZENhdGVnb3J5IGNoYW5nZXMnLCBhc3luYyAoKSA9PiB7XG7CoCDCoCBjb25zdCBvblNlbGVjdENhdGVnb3J5ID0gamVzdC5mbigpO1xuwqAgwqAgY29uc3QgeyByZXJlbmRlciB9ID0gcmVuZGVyKFxuwqAgwqAgwqAgPENhdGVnb3J5U2VsZWN0b3JcbsKgIMKgIMKgIMKgIGNhdGVnb3JpZXM9e2NhdGVnb3JpZXN9XG7CoCDCoCDCoCDCoCBzZWxlY3RlZENhdGVnb3J5PVwiMVwiXG7CoCDCoCDCoCDCoCBvblNlbGVjdENhdGVnb3J5PXtvblNlbGVjdENhdGVnb3J5fVxuwqAgwqAgwqAgLz5cbsKgIMKgICk7XG7CoCDCoCBjb25zdCBtb2NrVGltaW5nID0gamVzdC5zcHlPbihBbmltYXRlZCwgJ3RpbWluZycpO1xuwqAgwqAgbW9ja1RpbWluZy5tb2NrQ2xlYXIoKTtcblxuwqAgwqAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbsKgIMKgIMKgIHJlcmVuZGVyKFxuwqAgwqAgwqAgwqAgPENhdGVnb3J5U2VsZWN0b3JcbsKgIMKgIMKgIMKgIMKgIGNhdGVnb3JpZXM9e2NhdGVnb3JpZXN9XG7CoCDCoCDCoCDCoCDCoCBzZWxlY3RlZENhdGVnb3J5PVwiMlwiXG7CoCDCoCDCoCDCoCDCoCBvblNlbGVjdENhdGVnb3J5PXtvblNlbGVjdENhdGVnb3J5fVxuwqAgwqAgwqAgwqAgLz5cbsKgIMKgIMKgICk7XG7CoCDCoCDCoCBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoMzAwKTtcbsKgIMKgIH0pO1xuXG7CoCDCoCBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbsKgIMKgIMKgIGV4cGVjdChtb2NrVGltaW5nKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMik7XG7CoCDCoCB9KTtcbsKgIH0pO1xuXG7CoCAvLyBUZXN0IDUgOiBBbmltYXRpb25zIGRlIHByZXNzaW9uXG7CoCBpdCgnc2hvdWxkIHRyaWdnZXIgcHJlc3MgYW5pbWF0aW9ucyBvbiB0b3VjaCcsICgpID0+IHtcbsKgIMKgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG7CoCDCoCDCoCA8Q2F0ZWdvcnlTZWxlY3RvciBjYXRlZ29yaWVzPXtjYXRlZ29yaWVzfSBzZWxlY3RlZENhdGVnb3J5PVwiMVwiIG9uU2VsZWN0Q2F0ZWdvcnk9eygpID0+IHt9fSAvPlxuwqAgwqAgKTtcbsKgIMKgIGNvbnN0IG1vY2tUaW1pbmcgPSBqZXN0LnNweU9uKEFuaW1hdGVkLCAndGltaW5nJyk7XG7CoCDCoCBtb2NrVGltaW5nLm1vY2tDbGVhcigpO1xuwqAgwqAgXG7CoCDCoCBmaXJlRXZlbnQoZ2V0QnlUZXh0KCdWb2NhYnVsYXJ5JyksICdwcmVzc0luJyk7XG7CoCDCoCBleHBlY3QobW9ja1RpbWluZykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuwqAgwqAgZXhwZWN0KG1vY2tUaW1pbmcpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuwqAgwqAgwqAgZXhwZWN0LmFueXRoaW5nKCksXG7CoCDCoCDCoCBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7IHRvVmFsdWU6IDAuOTUsIHVzZU5hdGl2ZURyaXZlcjogdHJ1ZSB9KVxuwqAgwqAgKTtcbsKgIMKgIFxuwqAgwqAgZmlyZUV2ZW50KGdldEJ5VGV4dCgnVm9jYWJ1bGFyeScpLCAncHJlc3NPdXQnKTtcbsKgIMKgIGV4cGVjdChtb2NrVGltaW5nKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMik7XG7CoCDCoCBleHBlY3QobW9ja1RpbWluZykudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG7CoCDCoCDCoCBleHBlY3QuYW55dGhpbmcoKSxcbsKgIMKgIMKgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHsgdG9WYWx1ZTogMSwgdXNlTmF0aXZlRHJpdmVyOiB0cnVlIH0pXG7CoCDCoCApO1xuwqAgfSk7XG5cbsKgIC8vIFRlc3QgNiA6IE5lIHBhcyBhcHBlbGVyIG9uU2VsZWN0Q2F0ZWdvcnkgcG91ciBsYSBtw6ptZSBjYXTDqWdvcmllXG7CoCBpdCgnc2hvdWxkIG5vdCBjYWxsIG9uU2VsZWN0Q2F0ZWdvcnkgaWYgdGhlIHNhbWUgY2F0ZWdvcnkgaXMgcHJlc3NlZCcsICgpID0+IHtcbsKgIMKgIGNvbnN0IG9uU2VsZWN0Q2F0ZWdvcnkgPSBqZXN0LmZuKCk7XG7CoCDCoCBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuwqAgwqAgwqAgPENhdGVnb3J5U2VsZWN0b3JcbsKgIMKgIMKgIMKgIGNhdGVnb3JpZXM9e2NhdGVnb3JpZXN9XG7CoCDCoCDCoCDCoCBzZWxlY3RlZENhdGVnb3J5PVwiMlwiXG7CoCDCoCDCoCDCoCBvblNlbGVjdENhdGVnb3J5PXtvblNlbGVjdENhdGVnb3J5fVxuwqAgwqAgwqAgLz5cbsKgIMKgICk7XG7CoCDCoCBcbsKgIMKgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ1ZvY2FidWxhcnknKSk7XG7CoCDCoCBleHBlY3Qob25TZWxlY3RDYXRlZ29yeSkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbsKgIH0pO1xuXG7CoCAvLyBUZXN0IDcgOiBOZSBwYXMgZMOpY2xlbmNoZXIgZGUgbm91dmVsbGUgYW5pbWF0aW9uIHNpIHVuZSBlc3QgZW4gY291cnNcbsKgIGl0KCdzaG91bGQgbm90IHRyaWdnZXIgYSBuZXcgYW5pbWF0aW9uIGlmIG9uZSBpcyBhbHJlYWR5IHJ1bm5pbmcnLCBhc3luYyAoKSA9PiB7XG7CoCDCoCBjb25zdCBvblNlbGVjdENhdGVnb3J5ID0gamVzdC5mbigpO1xuwqAgwqAgY29uc3QgeyByZXJlbmRlciB9ID0gcmVuZGVyKFxuwqAgwqAgwqAgPENhdGVnb3J5U2VsZWN0b3JcbsKgIMKgIMKgIMKgIGNhdGVnb3JpZXM9e2NhdGVnb3JpZXN9XG7CoCDCoCDCoCDCoCBzZWxlY3RlZENhdGVnb3J5PVwiMVwiXG7CoCDCoCDCoCDCoCBvblNlbGVjdENhdGVnb3J5PXtvblNlbGVjdENhdGVnb3J5fVxuwqAgwqAgwqAgLz5cbsKgIMKgICk7XG7CoCDCoCBjb25zdCBtb2NrVGltaW5nID0gamVzdC5zcHlPbihBbmltYXRlZCwgJ3RpbWluZycpO1xuwqAgwqAgbW9ja1RpbWluZy5tb2NrQ2xlYXIoKTtcblxuwqAgwqAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbsKgIMKgIMKgIHJlcmVuZGVyKFxuwqAgwqAgwqAgwqAgPENhdGVnb3J5U2VsZWN0b3JcbsKgIMKgIMKgIMKgIMKgIGNhdGVnb3JpZXM9e2NhdGVnb3JpZXN9XG7CoCDCoCDCoCDCoCDCoCBzZWxlY3RlZENhdGVnb3J5PVwiMlwiXG7CoCDCoCDCoCDCoCDCoCBvblNlbGVjdENhdGVnb3J5PXtvblNlbGVjdENhdGVnb3J5fVxuwqAgwqAgwqAgwqAgLz5cbsKgIMKgIMKgICk7XG7CoCDCoCB9KTtcbsKgIMKgIFxuwqAgwqAgLy8gQXZhbmNlciBsZSB0ZW1wcywgbWFpcyBwYXMgYXNzZXogcG91ciBxdWUgbGEgcHJlbWnDqHJlIGFuaW1hdGlvbiBzZSB0ZXJtaW5lXG7CoCDCoCBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoMTAwKTtcblxuwqAgwqAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbsKgIMKgIMKgIC8vIETDqWNsZW5jaGVyIHVuIHNlY29uZCBjaGFuZ2VtZW50IHBlbmRhbnQgcXVlIGxlIHByZW1pZXIgZXN0IGVuIGNvdXJzXG7CoCDCoCDCoCByZXJlbmRlcihcbsKgIMKgIMKgIMKgIDxDYXRlZ29yeVNlbGVjdG9yXG7CoCDCoCDCoCDCoCDCoCBjYXRlZ29yaWVzPXtjYXRlZ29yaWVzfVxuwqAgwqAgwqAgwqAgwqAgc2VsZWN0ZWRDYXRlZ29yeT1cIjNcIlxuwqAgwqAgwqAgwqAgwqAgb25TZWxlY3RDYXRlZ29yeT17b25TZWxlY3RDYXRlZ29yeX1cbsKgIMKgIMKgIMKgIC8+XG7CoCDCoCDCoCApO1xuwqAgwqAgwqAgamVzdC5hZHZhbmNlVGltZXJzQnlUaW1lKDIwMCk7XG7CoCDCoCB9KTtcblxuwqAgwqAgLy8gT24gcydhdHRlbmQgw6AgY2UgcXVlIGxlIG1vY2tUaW1pbmcgYWl0IMOpdMOpIGFwcGVsw6kgMiBmb2lzIHBvdXIgbGEgcHJlbWnDqHJlIGFuaW1hdGlvblxuwqAgwqAgZXhwZWN0KG1vY2tUaW1pbmcpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygyKTtcbsKgIH0pO1xuXG7CoCAvLyBUZXN0IDggOiBOZSBwYXMgZMOpY2xlbmNoZXIgZCdhbmltYXRpb24gc2kgbGEgY2F0w6lnb3JpZSBuZSBjaGFuZ2UgcGFzXG7CoCBpdCgnc2hvdWxkIG5vdCB0cmlnZ2VyIGFuIGFuaW1hdGlvbiBpZiBzZWxlY3RlZENhdGVnb3J5IGRvZXMgbm90IGNoYW5nZScsIGFzeW5jICgpID0+IHtcbsKgIMKgIGNvbnN0IG9uU2VsZWN0Q2F0ZWdvcnkgPSBqZXN0LmZuKCk7XG7CoCDCoCBjb25zdCB7IHJlcmVuZGVyIH0gPSByZW5kZXIoXG7CoCDCoCDCoCA8Q2F0ZWdvcnlTZWxlY3RvclxuwqAgwqAgwqAgwqAgY2F0ZWdvcmllcz17Y2F0ZWdvcmllc31cbsKgIMKgIMKgIMKgIHNlbGVjdGVkQ2F0ZWdvcnk9XCIxXCJcbsKgIMKgIMKgIMKgIG9uU2VsZWN0Q2F0ZWdvcnk9e29uU2VsZWN0Q2F0ZWdvcnl9XG7CoCDCoCDCoCAvPlxuwqAgwqAgKTtcbsKgIMKgIGNvbnN0IG1vY2tUaW1pbmcgPSBqZXN0LnNweU9uKEFuaW1hdGVkLCAndGltaW5nJyk7XG7CoCDCoCBtb2NrVGltaW5nLm1vY2tDbGVhcigpO1xuXG7CoCDCoCBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuwqAgwqAgwqAgLy8gUmVyZW5kZXIgbGUgY29tcG9zYW50IHNhbnMgY2hhbmdlciBsYSBwcm9wIGBzZWxlY3RlZENhdGVnb3J5YFxuwqAgwqAgwqAgcmVyZW5kZXIoXG7CoCDCoCDCoCDCoCA8Q2F0ZWdvcnlTZWxlY3RvclxuwqAgwqAgwqAgwqAgwqAgY2F0ZWdvcmllcz17Y2F0ZWdvcmllc31cbsKgIMKgIMKgIMKgIMKgIHNlbGVjdGVkQ2F0ZWdvcnk9XCIxXCJcbsKgIMKgIMKgIMKgIMKgIG9uU2VsZWN0Q2F0ZWdvcnk9e29uU2VsZWN0Q2F0ZWdvcnl9XG7CoCDCoCDCoCDCoCAvPlxuwqAgwqAgwqAgKTtcbsKgIMKgIMKgIGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSgxMDApO1xuwqAgwqAgfSk7XG5cbsKgIMKgIGV4cGVjdChtb2NrVGltaW5nKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuwqAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiJBQU1BQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxnRUFBZ0UsRUFBRSxZQUFNO0VBQ2hGLElBQUFDLG1CQUFBLEdBQXVCQyxJQUFJLENBQUNDLGFBQWEsQ0FBQyxjQUFjLENBQUM7SUFBakRDLFVBQVUsR0FBQUgsbUJBQUEsQ0FBVkcsVUFBVTtFQUNsQixPQUFPO0lBQUEsT0FBTUEsVUFBVSxDQUFDQyxNQUFNLENBQUM7TUFDN0JDLFNBQVMsRUFBRSxDQUFDLENBQUM7TUFDYkMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO01BQ3RCQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO01BQ2RDLGFBQWEsRUFBRSxDQUFDLENBQUM7TUFDakJDLG1CQUFtQixFQUFFLENBQUMsQ0FBQztNQUN2QkMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO01BQ3JCQyxvQkFBb0IsRUFBRSxDQUFDLENBQUM7TUFDeEJDLGFBQWEsRUFBRSxDQUFDLENBQUM7TUFDakJDLG9CQUFvQixFQUFFO1FBQUVDLEtBQUssRUFBRTtNQUFVLENBQUM7TUFDMUNDLGdCQUFnQixFQUFFLENBQUMsQ0FBQztNQUNwQkMsT0FBTyxFQUFFLENBQUMsQ0FBQztNQUNYQyxZ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