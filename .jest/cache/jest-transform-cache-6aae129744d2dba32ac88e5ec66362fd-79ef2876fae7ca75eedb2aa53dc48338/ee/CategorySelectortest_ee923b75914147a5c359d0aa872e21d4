3d60e3d2616a646b8ce813d138aa0f23
_getJestObj().mock('react-native', function () {
  var React = require('react');
  var scrollToSpy = jest.fn();
  var MockScrollView = React.forwardRef(function (props, ref) {
    React.useImperativeHandle(ref, function () {
      return {
        scrollTo: scrollToSpy
      };
    });
    return React.createElement('div', null, React.Children.map(props.children, function (child) {
      return child;
    }));
  });
  return {
    ScrollView: MockScrollView,
    __scrollToSpy: scrollToSpy,
    View: function View(props) {
      return React.createElement('div', null, props.children);
    },
    Text: function Text(props) {
      return React.createElement('span', null, props.children);
    }
  };
});
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var React = require('react');
var _require = require('@testing-library/react-native'),
  render = _require.render;
var CategorySelector = require('../../../components/exercise-common/CategorySelector');
describe('CategorySelector', function () {
  it('renders without crashing', function () {
    render((0, _jsxRuntime.jsx)(CategorySelector, {}));
  });
  it('can call scrollTo', function () {
    var _require2 = require('react-native'),
      __scrollToSpy = _require2.__scrollToSpy;
    __scrollToSpy();
    expect(__scrollToSpy).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJSZWFjdCIsInJlcXVpcmUiLCJzY3JvbGxUb1NweSIsImplc3QiLCJmbiIsIk1vY2tTY3JvbGxWaWV3IiwiZm9yd2FyZFJlZiIsInByb3BzIiwicmVmIiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInNjcm9sbFRvIiwiY3JlYXRlRWxlbWVudCIsIkNoaWxkcmVuIiwibWFwIiwiY2hpbGRyZW4iLCJjaGlsZCIsIlNjcm9sbFZpZXciLCJfX3Njcm9sbFRvU3B5IiwiVmlldyIsIlRleHQiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlMyIsIl9yZXF1aXJlIiwicmVuZGVyIiwiQ2F0ZWdvcnlTZWxlY3RvciIsImRlc2NyaWJlIiwiaXQiLCJqc3giLCJfcmVxdWlyZTIiLCJleHBlY3QiLCJ0b0hhdmVCZWVuQ2FsbGVkIl0sInNvdXJjZXMiOlsiQ2F0ZWdvcnlTZWxlY3Rvci50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIF9fdGVzdHNfXy9jb21wb25lbnRzL2V4ZXJjaXNlLWNvbW1vbi9DYXRlZ29yeVNlbGVjdG9yLnRlc3QuanNcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHsgcmVuZGVyIH0gPSByZXF1aXJlKCdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZScpO1xuY29uc3QgQ2F0ZWdvcnlTZWxlY3RvciA9IHJlcXVpcmUoJy4uLy4uLy4uL2NvbXBvbmVudHMvZXhlcmNpc2UtY29tbW9uL0NhdGVnb3J5U2VsZWN0b3InKTtcblxuLy8gTW9jayByZWFjdC1uYXRpdmUgU2Nyb2xsVmlld1xuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUnLCAoKSA9PiB7XG4gIGNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxuICAvLyBTcHkgaW50ZXJuZSDDoCBsYSBmYWN0b3J5XG4gIGNvbnN0IHNjcm9sbFRvU3B5ID0gamVzdC5mbigpO1xuXG4gIGNvbnN0IE1vY2tTY3JvbGxWaWV3ID0gUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4ge1xuICAgIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCAoKSA9PiAoeyBzY3JvbGxUbzogc2Nyb2xsVG9TcHkgfSkpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIG51bGwsXG4gICAgICBSZWFjdC5DaGlsZHJlbi5tYXAocHJvcHMuY2hpbGRyZW4sIChjaGlsZCkgPT4gY2hpbGQpXG4gICAgKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICBTY3JvbGxWaWV3OiBNb2NrU2Nyb2xsVmlldyxcbiAgICBfX3Njcm9sbFRvU3B5OiBzY3JvbGxUb1NweSwgLy8gcG91ciBwb3V2b2lyIGFjY8OpZGVyIGF1IHNweSBkYW5zIGxlcyB0ZXN0c1xuICAgIFZpZXc6IChwcm9wcykgPT4gUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgbnVsbCwgcHJvcHMuY2hpbGRyZW4pLFxuICAgIFRleHQ6IChwcm9wcykgPT4gUmVhY3QuY3JlYXRlRWxlbWVudCgnc3BhbicsIG51bGwsIHByb3BzLmNoaWxkcmVuKSxcbiAgfTtcbn0pO1xuXG5kZXNjcmliZSgnQ2F0ZWdvcnlTZWxlY3RvcicsICgpID0+IHtcbiAgaXQoJ3JlbmRlcnMgd2l0aG91dCBjcmFzaGluZycsICgpID0+IHtcbiAgICByZW5kZXIoPENhdGVnb3J5U2VsZWN0b3IgLz4pO1xuICB9KTtcblxuICBpdCgnY2FuIGNhbGwgc2Nyb2xsVG8nLCAoKSA9PiB7XG4gICAgY29uc3QgeyBfX3Njcm9sbFRvU3B5IH0gPSByZXF1aXJlKCdyZWFjdC1uYXRpdmUnKTtcbiAgICBcbiAgICAvLyBBcHBlbCBtYW51ZWwgcG91ciB0ZXN0XG4gICAgX19zY3JvbGxUb1NweSgpO1xuICAgIGV4cGVjdChfX3Njcm9sbFRvU3B5KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQU1BQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxjQUFjLEVBQUUsWUFBTTtFQUM5QixJQUFNQyxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUM7RUFHOUIsSUFBTUMsV0FBVyxHQUFHQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0VBRTdCLElBQU1DLGNBQWMsR0FBR0wsS0FBSyxDQUFDTSxVQUFVLENBQUMsVUFBQ0MsS0FBSyxFQUFFQyxHQUFHLEVBQUs7SUFDdERSLEtBQUssQ0FBQ1MsbUJBQW1CLENBQUNELEdBQUcsRUFBRTtNQUFBLE9BQU87UUFBRUUsUUFBUSxFQUFFUjtNQUFZLENBQUM7SUFBQSxDQUFDLENBQUM7SUFFakUsT0FBT0YsS0FBSyxDQUFDVyxhQUFhLENBQ3hCLEtBQUssRUFDTCxJQUFJLEVBQ0pYLEtBQUssQ0FBQ1ksUUFBUSxDQUFDQyxHQUFHLENBQUNOLEtBQUssQ0FBQ08sUUFBUSxFQUFFLFVBQUNDLEtBQUs7TUFBQSxPQUFLQSxLQUFLO0lBQUEsRUFDckQsQ0FBQztFQUNILENBQUMsQ0FBQztFQUVGLE9BQU87SUFDTEMsVUFBVSxFQUFFWCxjQUFjO0lBQzFCWSxhQUFhLEVBQUVmLFdBQVc7SUFDMUJnQixJQUFJLEVBQUUsU0FBTkEsSUFBSUEsQ0FBR1gsS0FBSztNQUFBLE9BQUtQLEtBQUssQ0FBQ1csYUFBYSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUVKLEtBQUssQ0FBQ08sUUFBUSxDQUFDO0lBQUE7SUFDakVLLElBQUksRUFBRSxTQUFOQSxJQUFJQSxDQUFHWixLQUFLO01BQUEsT0FBS1AsS0FBSyxDQUFDVyxhQUFhLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRUosS0FBSyxDQUFDTyxRQUFRLENBQUM7SUFBQTtFQUNwRSxDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBQUMsSUFBQU0sV0FBQSxHQUFBbkIsT0FBQTtBQUFBLFNBQUFILFlBQUE7RUFBQSxJQUFBdUIsU0FBQSxHQUFBcEIsT0FBQTtJQUFBRSxJQUFBLEdBQUFrQixTQUFBLENBQUFsQixJQUFBO0VBQUFMLFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFLLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQTNCSCxJQUFNSCxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDOUIsSUFBQXFCLFFBQUEsR0FBbUJyQixPQUFPLENBQUMsK0JBQStCLENBQUM7RUFBbkRzQixNQUFNLEdBQUFELFFBQUEsQ0FBTkMsTUFBTTtBQUNkLElBQU1DLGdCQUFnQixHQUFHdkIsT0FBTyxDQUFDLHNEQUFzRCxDQUFDO0FBMkJ4RndCLFFBQVEsQ0FBQyxrQkFBa0IsRUFBRSxZQUFNO0VBQ2pDQyxFQUFFLENBQUMsMEJBQTBCLEVBQUUsWUFBTTtJQUNuQ0gsTUFBTSxDQUFDLElBQUFILFdBQUEsQ0FBQU8sR0FBQSxFQUFDSCxnQkFBZ0IsSUFBRSxDQUFDLENBQUM7RUFDOUIsQ0FBQyxDQUFDO0VBRUZFLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxZQUFNO0lBQzVCLElBQUFFLFNBQUEsR0FBMEIzQixPQUFPLENBQUMsY0FBYyxDQUFDO01BQXpDZ0IsYUFBYSxHQUFBVyxTQUFBLENBQWJYLGFBQWE7SUFHckJBLGFBQWEsQ0FBQyxDQUFDO0lBQ2ZZLE1BQU0sQ0FBQ1osYUFBYSxDQUFDLENBQUNhLGdCQUFnQixDQUFDLENBQUM7RUFDMUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119