b0d0396ed73996839faaf59b69cbddd0
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _expoLinearGradient = require("expo-linear-gradient");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _ThemeContext = require("../../../../contexts/ThemeContext");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var ModernHeader = function ModernHeader(_ref) {
  var _ref$level = _ref.level,
    level = _ref$level === void 0 ? "1" : _ref$level,
    _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? "#3B82F6" : _ref$levelColor;
  var themeContext = (0, _react.useContext)(_ThemeContext.ThemeContext);
  var colors = (themeContext == null ? void 0 : themeContext.colors) || {
    surface: "#FFFFFF"
  };
  var displayLevel = level === "bonus" ? "B" : level;
  return (0, _jsxRuntime.jsxs)(_expoLinearGradient.LinearGradient, {
    colors: [levelColor, `${levelColor}DD`],
    start: {
      x: 0,
      y: 0
    },
    end: {
      x: 1,
      y: 1
    },
    style: _style.default.container,
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.backgroundPattern
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: _style.default.content,
      children: [(0, _jsxRuntime.jsx)(HeaderLeftSection, {
        colors: colors,
        localStyles: _style.default
      }), (0, _jsxRuntime.jsx)(HeaderRightSection, {
        displayLevel: displayLevel,
        levelColor: levelColor,
        colors: colors,
        localStyles: _style.default
      })]
    })]
  });
};
var HeaderLeftSection = function HeaderLeftSection(_ref2) {
  var colors = _ref2.colors,
    localStyles = _ref2.localStyles;
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: localStyles.leftSection,
    children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: localStyles.logoContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: localStyles.logoEmoji,
        children: "\uD83C\uDF93"
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [localStyles.logoText, {
          color: colors.surface
        }],
        children: "JOUD"
      })]
    })
  });
};
HeaderLeftSection.propTypes = {
  colors: _propTypes.default.object.isRequired,
  localStyles: _propTypes.default.object.isRequired
};
var HeaderRightSection = function HeaderRightSection(_ref3) {
  var displayLevel = _ref3.displayLevel,
    levelColor = _ref3.levelColor,
    colors = _ref3.colors,
    localStyles = _ref3.localStyles;
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: localStyles.rightSection,
    children: (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [localStyles.levelBadge, {
        backgroundColor: colors.surface
      }],
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [localStyles.levelText, {
          color: levelColor
        }],
        children: displayLevel
      })
    })
  });
};
HeaderRightSection.propTypes = {
  displayLevel: _propTypes.default.string.isRequired,
  levelColor: _propTypes.default.string.isRequired,
  colors: _propTypes.default.object.isRequired,
  localStyles: _propTypes.default.object.isRequired
};
ModernHeader.propTypes = {
  level: _propTypes.default.string,
  levelColor: _propTypes.default.string
};
var _default = exports.default = ModernHeader;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,