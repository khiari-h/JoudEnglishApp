{"version":3,"names":["_react","require","_reactNative","_asyncStorage","_interopRequireDefault","useErrorCorrection","_errorCorrectionData$","errorCorrectionData","arguments","length","undefined","level","_useState","useState","_useState2","_slicedToArray2","default","selectedCategory","setSelectedCategory","_useState3","_useState4","currentExerciseIndex","setCurrentExerciseIndex","_useState5","_useState6","correctionMode","setCorrectionMode","_useState7","_useState8","showFeedback","setShowFeedback","_useState9","_useState0","isCorrect","setIsCorrect","_useState1","_useState10","showResults","setShowResults","_useState11","_useState12","isFinished","setIsFinished","_useState13","_useState14","completedExercises","setCompletedExercises","_useState15","_useState16","loaded","setLoaded","_useState17","_useState18","showDetailedProgress","setShowDetailedProgress","_useState19","_useState20","userCorrection","setUserCorrection","_useState21","_useState22","selectedErrorIndices","setSelectedErrorIndices","_useState23","_useState24","selectedChoiceIndex","setSelectedChoiceIndex","_useState25","_useState26","score","setScore","_useState27","_useState28","showHint","setShowHint","isInitialized","useRef","categories","exercises","filter","ex","categoryId","currentCategory","find","cat","id","name","currentExercise","text","correctedText","errorPositions","choices","totalCategories","totalExercisesInCategory","STORAGE_KEY","useEffect","loadData","_ref","_asyncToGenerator2","saved","AsyncStorage","getItem","_JSON$parse","JSON","parse","savedCompleted","lastPosition","exerciseIndex","error","apply","saveData","useCallback","dataToSave","setItem","stringify","current","newCompletedExercises","Object","assign","forEach","category","resetExerciseState","changeCategory","newCategoryId","startExercise","mode","firstExercise","toggleDetailedProgress","prev","handleWordPress","wordIndex","includes","i","concat","_toConsumableArray2","handleChoiceSelect","choiceIndex","markExerciseAsCompleted","catId","exIndex","categoryCompleted","_defineProperty2","findNextUncompletedCategory","numCategories","_loop","_errorCorrectionData$2","_completedExercises$n","nextIndex","findIndex","nextCategory","exercisesInCategory","completedInCategory","v","_ret","checkAnswer","answerCorrect","trim","toLowerCase","every","index","correctChoiceIndex","handleNext","nextExercise","nextCategoryId","completionMessage","Alert","alert","completed","handlePrevious","prevIndex","prevExercise","currentCategoryIndex","_errorCorrectionData$3","previousCategory","exercisesInPreviousCategory","lastExerciseIndex","getStats","_completedExercises$s","totalExercises","reduce","sum","_errorCorrectionData$4","exercisesInCat","completedExercisesCount","values","totalProgress","Math","round","completedInCurrentCategory","totalInCurrentCategory","getDisplayData","exerciseCounter","categoryNames","map","canGoToPrevious","_errorCorrectionData$5","isLastExerciseInCategory","hasValidData","Array","isArray","stats","display","_default","exports"],"sources":["useErrorCorrection.js"],"sourcesContent":["// hooks/useErrorCorrection.js - HOOK UNIFIÃ‰ SIMPLE\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { Alert } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n/**\n * ðŸŽ¯ Hook unifiÃ© pour Error Correction Exercise\n * Remplace useErrorCorrectionExerciseState + useErrorCorrectionProgress\n * Simple, efficace, maintenable - pattern identique Ã  useVocabulary\n */\nconst useErrorCorrection = (errorCorrectionData = null, level = \"A1\") => {\n  \n  // =================== CORE STATE ===================\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [currentExerciseIndex, setCurrentExerciseIndex] = useState(0);\n  const [correctionMode, setCorrectionMode] = useState('full'); // 'full', 'identify', 'multiple_choice'\n  const [showFeedback, setShowFeedback] = useState(false);\n  const [isCorrect, setIsCorrect] = useState(false);\n  const [showResults, setShowResults] = useState(false);\n  const [isFinished, setIsFinished] = useState(false);\n  const [completedExercises, setCompletedExercises] = useState({});\n  const [loaded, setLoaded] = useState(false);\n  const [showDetailedProgress, setShowDetailedProgress] = useState(false);\n\n  // =================== MODE-SPECIFIC STATE ===================\n  const [userCorrection, setUserCorrection] = useState('');\n  const [selectedErrorIndices, setSelectedErrorIndices] = useState([]);\n  const [selectedChoiceIndex, setSelectedChoiceIndex] = useState(null);\n  const [score, setScore] = useState(0);\n  const [showHint, setShowHint] = useState(false);\n\n  // =================== REFS ===================\n  const isInitialized = useRef(false);\n\n  // =================== COMPUTED VALUES ===================\n  const categories = errorCorrectionData?.categories || [];\n  const exercises = errorCorrectionData?.exercises?.filter(\n    ex => ex.categoryId === selectedCategory\n  ) || [];\n  const currentCategory = categories.find(cat => cat.id === selectedCategory) || { name: \"\", id: null };\n  const currentExercise = exercises[currentExerciseIndex] || { text: \"\", correctedText: \"\", errorPositions: [], choices: [] };\n  const totalCategories = categories.length;\n  const totalExercisesInCategory = exercises.length;\n  \n  // =================== PERSISTENCE ===================\n  const STORAGE_KEY = `error_correction_${level}`;\n\n  // Load data from storage\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const saved = await AsyncStorage.getItem(STORAGE_KEY);\n        if (saved) {\n          const { completedExercises: savedCompleted, lastPosition } = JSON.parse(saved);\n          setCompletedExercises(savedCompleted || {});\n          if (lastPosition) {\n            setSelectedCategory(lastPosition.categoryId || null);\n            setCurrentExerciseIndex(lastPosition.exerciseIndex || 0);\n          }\n        }\n      } catch (error) {\n        // Ignored on purpose\n      } finally {\n        setLoaded(true);\n      }\n    };\n    loadData();\n  }, [STORAGE_KEY]); // DÃ©pendance plus explicite et cohÃ©rente\n\n  // Save data to storage\n  const saveData = useCallback(async () => {\n    try {\n      const dataToSave = {\n        completedExercises,\n        lastPosition: {\n          categoryId: selectedCategory,\n          exerciseIndex: currentExerciseIndex\n        }\n      };\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(dataToSave));\n    } catch (error) {\n      // Ignored on purpose\n    }\n  }, [completedExercises, selectedCategory, currentExerciseIndex, STORAGE_KEY]);\n\n  // Auto-save when data changes\n  useEffect(() => {\n    if (loaded) saveData();\n  }, [saveData, loaded]);\n\n  // Initialize progress for new categories\n  useEffect(() => {\n    if (loaded && errorCorrectionData && !isInitialized.current) {\n      const newCompletedExercises = { ...completedExercises };\n      categories.forEach((category) => {\n        if (!newCompletedExercises[category.id]) {\n          newCompletedExercises[category.id] = [];\n        }\n      });\n      setCompletedExercises(newCompletedExercises);\n      isInitialized.current = true;\n    }\n  }, [loaded, errorCorrectionData, categories, completedExercises]);\n\n  // Initialize first category\n  useEffect(() => {\n    if (loaded && categories.length > 0 && !selectedCategory) {\n      setSelectedCategory(categories[0].id);\n    }\n  }, [loaded, categories, selectedCategory]);\n\n  // =================== NAVIGATION ACTIONS ===================\n  const resetExerciseState = useCallback(() => {\n    setSelectedErrorIndices([]);\n    setShowFeedback(false);\n    setIsCorrect(false);\n    setShowHint(false);\n    setUserCorrection('');\n  }, []);\n\n  const changeCategory = useCallback((newCategoryId) => {\n    setSelectedCategory(newCategoryId);\n    setCurrentExerciseIndex(0);\n    resetExerciseState();\n  }, [resetExerciseState]);\n\n  const startExercise = useCallback((mode = 'full') => {\n    setCorrectionMode(mode);\n    resetExerciseState();\n    setShowResults(false);\n    setScore(0);\n\n    // Initialize based on mode\n    if (exercises.length > 0) {\n      const firstExercise = exercises[0];\n      switch(mode) {\n        case 'full':\n          setUserCorrection(firstExercise.text || '');\n          break;\n        case 'identify':\n          setSelectedErrorIndices([]);\n          break;\n        case 'multiple_choice':\n          setSelectedChoiceIndex(null);\n          break;\n        default:\n          // No default action needed\n          break;\n      }\n    }\n  }, [exercises, resetExerciseState]);\n\n  const toggleDetailedProgress = useCallback(() => {\n    setShowDetailedProgress(prev => !prev);\n  }, []);\n\n  // =================== MODE-SPECIFIC ACTIONS ===================\n  const handleWordPress = useCallback((wordIndex) => {\n    if (showFeedback || correctionMode !== 'identify') return;\n\n    setSelectedErrorIndices(prev => \n      prev.includes(wordIndex) \n        ? prev.filter(i => i !== wordIndex)\n        : [...prev, wordIndex]\n    );\n  }, [showFeedback, correctionMode]);\n\n  const handleChoiceSelect = useCallback((choiceIndex) => {\n    if (showFeedback) return;\n    setSelectedChoiceIndex(choiceIndex);\n  }, [showFeedback]);\n\n  // =================== COMPLETION LOGIC ===================\n  const markExerciseAsCompleted = useCallback((catId, exIndex) => {\n    setCompletedExercises(prev => {\n      const categoryCompleted = prev[catId] || [];\n      if (!categoryCompleted.includes(exIndex)) {\n        return {\n          ...prev,\n          [catId]: [...categoryCompleted, exIndex]\n        };\n      }\n      return prev;\n    });\n  }, []);\n\n  // Find next uncompleted category\n  const findNextUncompletedCategory = useCallback(() => {\n    const numCategories = categories.length;\n    for (let i = 1; i <= numCategories; i++) {\n      const nextIndex = (categories.findIndex(cat => cat.id === selectedCategory) + i) % numCategories;\n      const nextCategory = categories[nextIndex];\n      const exercisesInCategory = errorCorrectionData?.exercises?.filter(\n        ex => ex.categoryId === nextCategory.id\n      )?.length || 0;\n      const completedInCategory = completedExercises[nextCategory.id]?.length || 0;\n      \n      if (completedInCategory < exercisesInCategory) {\n        return nextCategory.id;\n      }\n    }\n    return null;\n  }, [categories, selectedCategory, completedExercises, errorCorrectionData]);\n\n  // =================== ANSWER CHECKING ===================\n  const checkAnswer = useCallback(() => {\n    if (showFeedback) return false;\n\n    let answerCorrect = false;\n\n    switch(correctionMode) {\n      case 'full':\n        if (!userCorrection.trim()) return false;\n        answerCorrect = userCorrection.trim().toLowerCase() === \n                       (currentExercise.correctedText || '').trim().toLowerCase();\n        break;\n\n      case 'identify': {\n        const errorPositions = currentExercise.errorPositions || [];\n        answerCorrect = selectedErrorIndices.length === errorPositions.length &&\n          selectedErrorIndices.every(index => errorPositions.includes(index));\n        break;\n      }\n\n      case 'multiple_choice':\n        answerCorrect = selectedChoiceIndex === currentExercise.correctChoiceIndex;\n        break;\n\n      default:\n        return false;\n    }\n\n    setIsCorrect(answerCorrect);\n    setShowFeedback(true);\n\n    if (answerCorrect) {\n      setScore(prev => prev + 1);\n    }\n\n    return answerCorrect;\n  }, [showFeedback, correctionMode, userCorrection, selectedErrorIndices, selectedChoiceIndex, currentExercise]);\n\n  // =================== MAIN NAVIGATION ===================\n  const handleNext = useCallback(() => {\n    // Mark current exercise as completed\n    markExerciseAsCompleted(selectedCategory, currentExerciseIndex);\n\n    // Check if there are more exercises in current category\n    if (currentExerciseIndex < totalExercisesInCategory - 1) {\n      const nextIndex = currentExerciseIndex + 1;\n      setCurrentExerciseIndex(nextIndex);\n      resetExerciseState();\n\n      // Initialize next exercise based on mode\n      const nextExercise = exercises[nextIndex];\n      switch(correctionMode) {\n        case 'full':\n          setUserCorrection(nextExercise.text || '');\n          break;\n        case 'identify':\n          setSelectedErrorIndices([]);\n          break;\n        case 'multiple_choice':\n          setSelectedChoiceIndex(null);\n          break;\n        default:\n          // No default action needed\n          break;\n      }\n    } else {\n      // End of category - find next uncompleted category\n      const nextCategoryId = findNextUncompletedCategory();\n      if (nextCategoryId === null) {\n        // All done!\n        setIsFinished(true);\n        const completionMessage = `FÃ©licitations ! Vous avez terminÃ© tous les exercices de correction d'erreurs ${level} !`;\n        Alert.alert(\"FÃ©licitations\", completionMessage);\n        return { completed: true };\n      } else {\n        changeCategory(nextCategoryId);\n      }\n    }\n    return { completed: false };\n  }, [selectedCategory, currentExerciseIndex, totalExercisesInCategory, markExerciseAsCompleted, \n      resetExerciseState, exercises, correctionMode, findNextUncompletedCategory, changeCategory, level]);\n\n  const handlePrevious = useCallback(() => {\n    // Case 1: Not first exercise in category\n    if (currentExerciseIndex > 0) {\n      const prevIndex = currentExerciseIndex - 1;\n      setCurrentExerciseIndex(prevIndex);\n      resetExerciseState();\n\n      // Initialize previous exercise based on mode\n      const prevExercise = exercises[prevIndex];\n      switch(correctionMode) {\n        case 'full':\n          setUserCorrection(prevExercise.text || '');\n          break;\n        case 'identify':\n          setSelectedErrorIndices([]);\n          break;\n        case 'multiple_choice':\n          setSelectedChoiceIndex(null);\n          break;\n        default:\n          // No default action needed\n          break;\n      }\n      return;\n    }\n    \n    // Case 2: First exercise in category - go to previous category\n    const currentCategoryIndex = categories.findIndex(cat => cat.id === selectedCategory);\n    if (currentCategoryIndex > 0) {\n      const previousCategory = categories[currentCategoryIndex - 1];\n      const exercisesInPreviousCategory = errorCorrectionData?.exercises?.filter(\n        ex => ex.categoryId === previousCategory.id\n      ) || [];\n      const lastExerciseIndex = exercisesInPreviousCategory.length - 1;\n      \n      changeCategory(previousCategory.id);\n      setCurrentExerciseIndex(lastExerciseIndex);\n    }\n  }, [currentExerciseIndex, exercises, correctionMode, resetExerciseState, \n      categories, selectedCategory, errorCorrectionData, changeCategory]);\n\n  // =================== COMPUTED STATS ===================\n  const getStats = useCallback(() => {\n    const totalExercises = categories.reduce((sum, cat) => {\n      const exercisesInCat = errorCorrectionData?.exercises?.filter(\n        ex => ex.categoryId === cat.id\n      )?.length || 0;\n      return sum + exercisesInCat;\n    }, 0);\n    \n    const completedExercisesCount = Object.values(completedExercises).reduce(\n      (sum, completed) => sum + (completed?.length || 0), 0\n    );\n    \n    const totalProgress = totalExercises > 0 ? Math.round((completedExercisesCount / totalExercises) * 100) : 0;\n\n    return {\n      totalExercises,\n      completedExercisesCount,\n      totalProgress,\n      completedInCurrentCategory: completedExercises[selectedCategory]?.length || 0,\n      totalInCurrentCategory: totalExercisesInCategory,\n      completedExercises,\n      score\n    };\n  }, [categories, errorCorrectionData, completedExercises, selectedCategory, totalExercisesInCategory, score]);\n\n  // =================== COMPUTED DISPLAY ===================\n  const getDisplayData = useCallback(() => {\n    const exerciseCounter = `${currentExerciseIndex + 1} / ${totalExercisesInCategory}`;\n    const categoryNames = categories.map(cat => cat.name);\n    \n    return {\n      exerciseCounter,\n      categories: categoryNames,\n      currentExercise,\n      currentCategory\n    };\n  }, [currentExerciseIndex, totalExercisesInCategory, categories, currentExercise, currentCategory]);\n\n  // =================== VALIDATION ===================\n  const canGoToPrevious = useCallback(() => {\n    if (currentExerciseIndex > 0) return true;\n    const currentCategoryIndex = categories.findIndex(cat => cat.id === selectedCategory);\n    if (currentCategoryIndex > 0) {\n      const previousCategory = categories[currentCategoryIndex - 1];\n      const exercisesInPreviousCategory = errorCorrectionData?.exercises?.filter(\n        ex => ex.categoryId === previousCategory.id\n      ) || [];\n      return exercisesInPreviousCategory.length > 0;\n    }\n    return false;\n  }, [currentExerciseIndex, categories, selectedCategory, errorCorrectionData]);\n\n  const isLastExerciseInCategory = useCallback(() => {\n    return currentExerciseIndex === totalExercisesInCategory - 1;\n  }, [currentExerciseIndex, totalExercisesInCategory]);\n\n  const hasValidData = errorCorrectionData?.categories && \n                      Array.isArray(errorCorrectionData.categories) && \n                      errorCorrectionData.categories.length > 0;\n\n  return {\n    // State\n    selectedCategory,\n    currentExerciseIndex,\n    correctionMode,\n    showFeedback,\n    isCorrect,\n    showResults,\n    isFinished,\n    completedExercises,\n    loaded,\n    showDetailedProgress,\n    \n    // Mode-specific state\n    userCorrection,\n    selectedErrorIndices,\n    selectedChoiceIndex,\n    score,\n    showHint,\n    \n    // Data\n    currentExercise,\n    currentCategory,\n    totalCategories,\n    totalExercisesInCategory,\n    exercises,\n    \n    // Actions\n    changeCategory,\n    startExercise,\n    resetExerciseState,\n    toggleDetailedProgress,\n    handleNext,\n    handlePrevious,\n    checkAnswer,\n    handleWordPress,\n    handleChoiceSelect,\n    setUserCorrection,\n    setShowHint,\n    setShowResults,\n    \n    // Computed\n    canGoToPrevious: canGoToPrevious(),\n    isLastExerciseInCategory: isLastExerciseInCategory(),\n    hasValidData,\n    stats: getStats(),\n    display: getDisplayData(),\n  };\n};\n\nexport default useErrorCorrection;"],"mappings":"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","ignoreList":[]}