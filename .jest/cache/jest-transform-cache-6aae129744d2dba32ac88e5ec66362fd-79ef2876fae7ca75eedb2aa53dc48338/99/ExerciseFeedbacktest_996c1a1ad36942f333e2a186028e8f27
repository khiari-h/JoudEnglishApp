2429d1e4e4429e697f5c762e02b781c7
_getJestObj().mock('@expo/vector-icons', function () {
  var _require = require('react-native'),
    Text = _require.Text;
  return {
    Ionicons: function Ionicons(props) {
      return (0, _jsxRuntime.jsx)(Text, {
        testID: `icon-${props.name}`,
        children: props.name
      });
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ExerciseFeedback = _interopRequireDefault(require("../../../src/components/exercise-common/ExerciseFeedback"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ExerciseFeedback', function () {
  beforeAll(function () {
    jest.useFakeTimers();
  });
  afterAll(function () {
    jest.useRealTimers();
  });
  var onDismissMock = jest.fn();
  afterEach(function () {
    onDismissMock.mockClear();
  });
  it('renders the message correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        message: "Correct!"
      })),
      getByText = _render.getByText;
    expect(getByText('Correct!')).toBeTruthy();
  });
  it('renders the explanation when provided', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        message: "Incorrect",
        explanation: "The answer was X."
      })),
      getByText = _render2.getByText;
    expect(getByText('The answer was X.')).toBeTruthy();
  });
  it('does not render the explanation when not provided', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        message: "Correct!"
      })),
      queryByText = _render3.queryByText;
    expect(queryByText('The answer was X.')).toBeNull();
  });
  it('shows a success icon for type "success"', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        message: "Success",
        type: "success"
      })),
      getByTestId = _render4.getByTestId;
    expect(getByTestId('icon-checkmark-circle')).toBeTruthy();
  });
  it('shows an error icon for type "error"', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        message: "Error",
        type: "error"
      })),
      getByTestId = _render5.getByTestId;
    expect(getByTestId('icon-close-circle')).toBeTruthy();
  });
  it('shows an info icon for type "info"', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        message: "Info",
        type: "info"
      })),
      getByTestId = _render6.getByTestId;
    expect(getByTestId('icon-information-circle')).toBeTruthy();
  });
  it('calls onDismiss when the dismiss button is pressed', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        message: "Test",
        onDismiss: onDismissMock
      })),
      getByTestId = _render7.getByTestId;
    _reactNative.fireEvent.press(getByTestId('icon-close'));
    expect(onDismissMock).toHaveBeenCalledTimes(1);
  });
  it('does not show the dismiss button if showDismissButton is false', function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
        message: "Test",
        showDismissButton: false
      })),
      queryByTestId = _render8.queryByTestId;
    expect(queryByTestId('icon-close')).toBeNull();
  });
  it('calls onDismiss automatically when autoHide is true', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ExerciseFeedback.default, {
      message: "Hiding soon...",
      onDismiss: onDismissMock,
      autoHide: true,
      autoHideDuration: 5000
    }));
    expect(onDismissMock).not.toHaveBeenCalled();
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    expect(onDismissMock).toHaveBeenCalledTimes(1);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfcmVxdWlyZSIsInJlcXVpcmUiLCJUZXh0IiwiSW9uaWNvbnMiLCJwcm9wcyIsIl9qc3hSdW50aW1lIiwianN4IiwidGVzdElEIiwibmFtZSIsImNoaWxkcmVuIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9FeGVyY2lzZUZlZWRiYWNrIiwiX3JlcXVpcmUyIiwiamVzdCIsImRlc2NyaWJlIiwiYmVmb3JlQWxsIiwidXNlRmFrZVRpbWVycyIsImFmdGVyQWxsIiwidXNlUmVhbFRpbWVycyIsIm9uRGlzbWlzc01vY2siLCJmbiIsImFmdGVyRWFjaCIsIm1vY2tDbGVhciIsIml0IiwiX3JlbmRlciIsInJlbmRlciIsImRlZmF1bHQiLCJtZXNzYWdlIiwiZ2V0QnlUZXh0IiwiZXhwZWN0IiwidG9CZVRydXRoeSIsIl9yZW5kZXIyIiwiZXhwbGFuYXRpb24iLCJfcmVuZGVyMyIsInF1ZXJ5QnlUZXh0IiwidG9CZU51bGwiLCJfcmVuZGVyNCIsInR5cGUiLCJnZXRCeVRlc3RJZCIsIl9yZW5kZXI1IiwiX3JlbmRlcjYiLCJfcmVuZGVyNyIsIm9uRGlzbWlzcyIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIiwiX3JlbmRlcjgiLCJzaG93RGlzbWlzc0J1dHRvbiIsInF1ZXJ5QnlUZXN0SWQiLCJhdXRvSGlkZSIsImF1dG9IaWRlRHVyYXRpb24iLCJub3QiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwiYWN0IiwicnVuQWxsVGltZXJzIl0sInNvdXJjZXMiOlsiRXhlcmNpc2VGZWVkYmFjay50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuLy8gX190ZXN0c19fL2NvbXBvbmVudHMvZXhlcmNpc2UtY29tbW9uL0V4ZXJjaXNlRmVlZGJhY2sudGVzdC5qc1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCBhY3QgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgRXhlcmNpc2VGZWVkYmFjayBmcm9tICcuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9leGVyY2lzZS1jb21tb24vRXhlcmNpc2VGZWVkYmFjayc7XG5cbi8vIE1vY2sgZGVzIGljw7RuZXMgcG91ciBsJ2Vudmlyb25uZW1lbnQgZGUgdGVzdFxuamVzdC5tb2NrKCdAZXhwby92ZWN0b3ItaWNvbnMnLCAoKSA9PiB7XG4gIGNvbnN0IHsgVGV4dCB9ID0gcmVxdWlyZSgncmVhY3QtbmF0aXZlJyk7XG4gIHJldHVybiB7XG4gICAgSW9uaWNvbnM6IChwcm9wcykgPT4gPFRleHQgdGVzdElEPXtgaWNvbi0ke3Byb3BzLm5hbWV9YH0+e3Byb3BzLm5hbWV9PC9UZXh0PixcbiAgfTtcbn0pO1xuXG5kZXNjcmliZSgnRXhlcmNpc2VGZWVkYmFjaycsICgpID0+IHtcbiAgLy8gQWN0aXZlciBsZXMgZmFrZSB0aW1lcnMgcG91ciB0ZXN0ZXIgbGVzIGTDqWxhaXNcbiAgYmVmb3JlQWxsKCgpID0+IHtcbiAgICBqZXN0LnVzZUZha2VUaW1lcnMoKTtcbiAgfSk7XG5cbiAgLy8gUmVzdGF1cmVyIGxlcyB0aW1lcnMgcsOpZWxzIGFwcsOocyBsZXMgdGVzdHNcbiAgYWZ0ZXJBbGwoKCkgPT4ge1xuICAgIGplc3QudXNlUmVhbFRpbWVycygpO1xuICB9KTtcblxuICBjb25zdCBvbkRpc21pc3NNb2NrID0gamVzdC5mbigpO1xuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgb25EaXNtaXNzTW9jay5tb2NrQ2xlYXIoKTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgdGhlIG1lc3NhZ2UgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPEV4ZXJjaXNlRmVlZGJhY2sgbWVzc2FnZT1cIkNvcnJlY3QhXCIgLz4pO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ0NvcnJlY3QhJykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgdGhlIGV4cGxhbmF0aW9uIHdoZW4gcHJvdmlkZWQnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgIDxFeGVyY2lzZUZlZWRiYWNrIG1lc3NhZ2U9XCJJbmNvcnJlY3RcIiBleHBsYW5hdGlvbj1cIlRoZSBhbnN3ZXIgd2FzIFguXCIgLz5cbiAgICApO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ1RoZSBhbnN3ZXIgd2FzIFguJykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ2RvZXMgbm90IHJlbmRlciB0aGUgZXhwbGFuYXRpb24gd2hlbiBub3QgcHJvdmlkZWQnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBxdWVyeUJ5VGV4dCB9ID0gcmVuZGVyKDxFeGVyY2lzZUZlZWRiYWNrIG1lc3NhZ2U9XCJDb3JyZWN0IVwiIC8+KTtcbiAgICBleHBlY3QocXVlcnlCeVRleHQoJ1RoZSBhbnN3ZXIgd2FzIFguJykpLnRvQmVOdWxsKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG93cyBhIHN1Y2Nlc3MgaWNvbiBmb3IgdHlwZSBcInN1Y2Nlc3NcIicsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoPEV4ZXJjaXNlRmVlZGJhY2sgbWVzc2FnZT1cIlN1Y2Nlc3NcIiB0eXBlPVwic3VjY2Vzc1wiIC8+KTtcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2ljb24tY2hlY2ttYXJrLWNpcmNsZScpKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KCdzaG93cyBhbiBlcnJvciBpY29uIGZvciB0eXBlIFwiZXJyb3JcIicsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoPEV4ZXJjaXNlRmVlZGJhY2sgbWVzc2FnZT1cIkVycm9yXCIgdHlwZT1cImVycm9yXCIgLz4pO1xuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnaWNvbi1jbG9zZS1jaXJjbGUnKSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICBpdCgnc2hvd3MgYW4gaW5mbyBpY29uIGZvciB0eXBlIFwiaW5mb1wiJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcig8RXhlcmNpc2VGZWVkYmFjayBtZXNzYWdlPVwiSW5mb1wiIHR5cGU9XCJpbmZvXCIgLz4pO1xuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnaWNvbi1pbmZvcm1hdGlvbi1jaXJjbGUnKSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICBpdCgnY2FsbHMgb25EaXNtaXNzIHdoZW4gdGhlIGRpc21pc3MgYnV0dG9uIGlzIHByZXNzZWQnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgPEV4ZXJjaXNlRmVlZGJhY2sgbWVzc2FnZT1cIlRlc3RcIiBvbkRpc21pc3M9e29uRGlzbWlzc01vY2t9IC8+XG4gICAgKTtcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ2ljb24tY2xvc2UnKSk7XG4gICAgZXhwZWN0KG9uRGlzbWlzc01vY2spLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgfSk7XG5cbiAgaXQoJ2RvZXMgbm90IHNob3cgdGhlIGRpc21pc3MgYnV0dG9uIGlmIHNob3dEaXNtaXNzQnV0dG9uIGlzIGZhbHNlJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgcXVlcnlCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgPEV4ZXJjaXNlRmVlZGJhY2sgbWVzc2FnZT1cIlRlc3RcIiBzaG93RGlzbWlzc0J1dHRvbj17ZmFsc2V9IC8+XG4gICAgKTtcbiAgICBleHBlY3QocXVlcnlCeVRlc3RJZCgnaWNvbi1jbG9zZScpKS50b0JlTnVsbCgpO1xuICB9KTtcblxuICBpdCgnY2FsbHMgb25EaXNtaXNzIGF1dG9tYXRpY2FsbHkgd2hlbiBhdXRvSGlkZSBpcyB0cnVlJywgKCkgPT4ge1xuICAgIHJlbmRlcihcbiAgICAgIDxFeGVyY2lzZUZlZWRiYWNrXG4gICAgICAgIG1lc3NhZ2U9XCJIaWRpbmcgc29vbi4uLlwiXG4gICAgICAgIG9uRGlzbWlzcz17b25EaXNtaXNzTW9ja31cbiAgICAgICAgYXV0b0hpZGU9e3RydWV9XG4gICAgICAgIGF1dG9IaWRlRHVyYXRpb249ezUwMDB9XG4gICAgICAvPlxuICAgICk7XG5cbiAgICAvLyBMZSBvbkRpc21pc3MgbmUgZG9pdCBwYXMgw6p0cmUgYXBwZWzDqSBpbW3DqWRpYXRlbWVudFxuICAgIGV4cGVjdChvbkRpc21pc3NNb2NrKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuXG4gICAgLy8gRXjDqWN1dGVyIHRvdXMgbGVzIHRpbWVycyBlbiBhdHRlbnRlXG4gICAgYWN0KCgpID0+IHtcbiAgICAgIGplc3QucnVuQWxsVGltZXJzKCk7XG4gICAgfSk7XG5cbiAgICAvLyBNYWludGVuYW50LCBvbkRpc21pc3MgZG9pdCBhdm9pciDDqXTDqSBhcHBlbMOpXG4gICAgZXhwZWN0KG9uRGlzbWlzc01vY2spLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBT0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLG9CQUFvQixFQUFFLFlBQU07RUFDcEMsSUFBQUMsUUFBQSxHQUFpQkMsT0FBTyxDQUFDLGNBQWMsQ0FBQztJQUFoQ0MsSUFBSSxHQUFBRixRQUFBLENBQUpFLElBQUk7RUFDWixPQUFPO0lBQ0xDLFFBQVEsRUFBRSxTQUFWQSxRQUFRQSxDQUFHQyxLQUFLO01BQUEsT0FBSyxJQUFBQyxXQUFBLENBQUFDLEdBQUEsRUFBQ0osSUFBSTtRQUFDSyxNQUFNLEVBQUUsUUFBUUgsS0FBSyxDQUFDSSxJQUFJLEVBQUc7UUFBQUMsUUFBQSxFQUFFTCxLQUFLLENBQUNJO01BQUksQ0FBTyxDQUFDO0lBQUE7RUFDOUUsQ0FBQztBQUNILENBQUMsQ0FBQztBQUFDLElBQUFFLHNCQUFBLEdBQUFULE9BQUE7QUFWSCxJQUFBVSxNQUFBLEdBQUFELHNCQUFBLENB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