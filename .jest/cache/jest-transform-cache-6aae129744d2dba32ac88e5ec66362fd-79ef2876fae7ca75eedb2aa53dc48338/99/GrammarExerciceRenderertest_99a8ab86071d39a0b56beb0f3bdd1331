6d65b73699c5711253cbf16fda3dfd24
_getJestObj().mock('../../../../src/components/ui/HeroCard', function () {
  return 'HeroCard';
});
_getJestObj().mock('../../../../src/components/ui/ContentSection', function () {
  return 'ContentSection';
});
_getJestObj().mock('../../../../src/screens/exercises/grammar/GrammarExerciceRenderer/style', function () {
  return {
    __esModule: true,
    default: function _default() {
      return {
        container: {
          padding: 10
        },
        optionsSection: {
          marginTop: 10
        },
        optionContainer: {
          marginBottom: 5
        },
        optionGradient: {
          borderRadius: 8
        },
        optionInner: {
          padding: 10
        },
        optionIconContainer: {
          marginRight: 10
        },
        optionText: {
          fontSize: 16
        },
        correctOptionText: {
          color: 'green'
        },
        incorrectOptionText: {
          color: 'red'
        },
        selectedOptionText: {
          color: 'blue'
        },
        inputSection: {
          marginTop: 10
        },
        fillBlankInput: {
          borderWidth: 1
        },
        transformationInput: {
          borderWidth: 1
        },
        correctInput: {
          borderColor: 'green'
        },
        incorrectInput: {
          borderColor: 'red'
        },
        neutralInput: {
          borderColor: 'gray'
        }
      };
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _GrammarExerciceRenderer = _interopRequireDefault(require("../../../../src/screens/exercises/grammar/GrammarExerciceRenderer"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('GrammarExerciseRenderer', function () {
  var defaultProps = {
    exercise: {
      question: 'What is the correct form?',
      sentence: 'I ___ to school every day.',
      options: ['go', 'goes', 'going', 'went'],
      answer: 0,
      type: 'fillInTheBlank'
    },
    selectedOption: null,
    setSelectedOption: jest.fn(),
    inputText: '',
    setInputText: jest.fn(),
    showFeedback: false,
    isCorrect: false,
    exerciseIndex: 0,
    attempts: 0
  };
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('Rendu de base', function () {
    it('devrait rendre null si pas d\'exercice', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_GrammarExerciceRenderer.default, Object.assign({}, defaultProps, {
          exercise: null
        }))),
        UNSAFE_root = _render.UNSAFE_root;
      expect(UNSAFE_root.children).toHaveLength(0);
    });
    it('devrait rendre le composant avec les props de base', function () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_GrammarExerciceRenderer.default, Object.assign({}, defaultProps))),
        getByText = _render2.getByText;
      expect(getByText('What is the correct form?')).toBeTruthy();
    });
  });
  describe('Exercice à choix multiples', function () {
    var multipleChoiceProps = Object.assign({}, defaultProps, {
      exercise: Object.assign({}, defaultProps.exercise, {
        type: 'fillInTheBlank',
        options: ['go', 'goes', 'going', 'went'],
        answer: 0
      })
    });
    it('devrait rendre un exercice à choix multiples', function () {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_GrammarExerciceRenderer.default, Object.assign({}, multipleChoiceProps))),
        getByText = _render3.getByText;
      expect(getByText('What is the correct form?')).toBeTruthy();
      expect(getByText('Complete the sentence')).toBeTruthy();
    });
    it('devrait gérer la sélection d\'option', function () {
      var setSelectedOption = jest.fn();
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_GrammarExerciceRenderer.default, Object.assign({}, multipleChoiceProps, {
          setSelectedOption: setSelectedOption
        }))),
        getByText = _render4.getByText;
      _reactNative.fireEvent.press(getByText('go'));
      expect(setSelectedOption).toHaveBeenCalledWith(0);
    });
    it('devrait désactiver les options après feedback correct', function () {
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_GrammarExerciceRenderer.default, Object.assign({}, multipleChoiceProps, {
          showFeedback: true,
          isCorrect: true
        }))),
        getByText = _render5.getByText;
      var option = getByText('go');
      expect(option.props.accessibilityState.disabled).toBe(true);
    });
  });
  describe('Exercice à remplir les blancs', function () {
    var fillBlankProps = Object.assign({}, defaultProps, {
      exercise: Object.assign({}, defaultProps.exercise, {
        type: 'fillInTheBlank',
        options: undefined,
        answer: 'go'
      })
    });
    it('devrait rendre un exercice à remplir les blancs', function () {
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_GrammarExerciceRenderer.default, Object.assign({}, fillBlankProps))),
        getByText = _render6.getByText,
        getByPlaceholderText = _render6.getByPlaceholderText;
      expect(getByText('What is the correct form?')).toBeTruthy();
      expect(getByText('Complete the sentence')).toBeTruthy();
      expect(getByPlaceholderText('Type your answer...')).toBeTruthy();
    });
    it('devrait gérer la saisie de texte', function () {
      var setInputText = jest.fn();
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_GrammarExerciceRenderer.default, Object.assign({}, fillBlankProps, {
          setInputText: setInputText
        }))),
        getByPlaceholderText = _render7.getByPlaceholderText;
      var input = getByPlaceholderText('Type your answer...');
      _reactNative.fireEvent.changeText(input, 'go');
      expect(setInputText).toHaveBeenCalledWith('go');
    });
    it('devrait désactiver l\'input après feedback correct', function () {
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_GrammarExerciceRenderer.default, Object.assign({}, fillBlankProps, {
          showFeedback: true,
          isCorrect: true
        }))),
        getByPlaceholderText = _render8.getByPlaceholderText;
      var input = getByPlaceholderText('Type your answer...');
      expect(input.props.editable).toBe(false);
    });
  });
  describe('Exercice de transformation', function () {
    var transformationProps = Object.assign({}, defaultProps, {
      exercise: Object.assign({}, defaultProps.exercise, {
        type: 'transformation',
        sentence: 'I go to school.',
        answer: 'I went to school.'
      })
    });
    it('devrait rendre un exercice de transformation', function () {
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_GrammarExerciceRenderer.default, Object.assign({}, transformationProps))),
        getByText = _render9.getByText,
        getByPlaceholderText = _render9.getByPlaceholderText;
      expect(getByText('What is the correct form?')).toBeTruthy();
      expect(getByText('Transform this sentence')).toBeTruthy();
      expect(getByPlaceholderText('Write your transformed sentence...')).toBeTruthy();
    });
    it('devrait gérer la saisie de texte multiligne', function () {
      var setInputText = jest.fn();
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_GrammarExerciceRenderer.default, Object.assign({}, transformationProps, {
          setInputText: setInputText
        }))),
        getByPlaceholderText = _render0.getByPlaceholderText;
      var input = getByPlaceholderText('Write your transformed sentence...');
      _reactNative.fireEvent.changeText(input, 'I went to school.');
      expect(setInputText).toHaveBeenCalledWith('I went to school.');
    });
  });
  describe('Gestion des états et feedback', function () {
    it('devrait appliquer les styles corrects pour les réponses correctes', function () {
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_GrammarExerciceRenderer.default, Object.assign({}, defaultProps, {
          showFeedback: true,
          selectedOption: 0
        }))),
        getByText = _render1.getByText;
      var option = getByText('go');
      expect(option).toBeTruthy();
    });
    it('devrait appliquer les styles corrects pour les réponses incorrectes', function () {
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_GrammarExerciceRenderer.default, Object.assign({}, defaultProps, {
          showFeedback: true,
          selectedOption: 1
        }))),
        getByText = _render10.getByText;
      var option = getByText('goes');
      expect(option).toBeTruthy();
    });
  });
  describe('Gestion des clés uniques', function () {
    it('devrait générer des clés uniques pour les inputs', function () {
      var fillBlankProps = Object.assign({}, defaultProps, {
        exercise: Object.assign({}, defaultProps.exercise, {
          type: 'fillInTheBlank',
          options: undefined,
          answer: 'go'
        })
      });
      var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_GrammarExerciceRenderer.default, Object.assign({}, fillBlankProps, {
          exerciseIndex: 5,
          attempts: 3
        }))),
        getByPlaceholderText = _render11.getByPlaceholderText;
      var input = getByPlaceholderText('Type your answer...');
      expect(input.props.key).toContain('fill-blank-input-5-3');
    });
  });
  describe('Composants extraits', function () {
    it('devrait utiliser ExerciseContent pour le contenu commun', function () {
      var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_GrammarExerciceRenderer.default, Object.assign({}, defaultProps))),
        getByText = _render12.getByText;
      expect(getByText('What is the correct form?')).toBeTruthy();
      expect(getByText('Complete the sentence')).toBeTruthy();
    });
    it('devrait utiliser OptionItem pour les options', function () {
      var _render13 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_GrammarExerciceRenderer.default, Object.assign({}, defaultProps))),
        getByText = _render13.getByText;
      expect(getByText('go')).toBeTruthy();
      expect(getByText('goes')).toBeTruthy();
      expect(getByText('going')).toBeTruthy();
      expect(getByText('went')).toBeTruthy();
    });
  });
  describe('Gestion des erreurs et cas limites', function () {
    it('devrait gérer les exercices sans phrase', function () {
      var propsWithoutSentence = Object.assign({}, defaultProps, {
        exercise: Object.assign({}, defaultProps.exercise, {
          sentence: undefined
        })
      });
      var _render14 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_GrammarExerciceRenderer.default, Object.assign({}, propsWithoutSentence))),
        getByText = _render14.getByText;
      expect(getByText('What is the correct form?')).toBeTruthy();
    });
    it('devrait gérer les exercices avec type inconnu', function () {
      var propsWithUnknownType = Object.assign({}, defaultProps, {
        exercise: Object.assign({}, defaultProps.exercise, {
          type: 'unknownType'
        })
      });
      var _render15 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_GrammarExerciceRenderer.default, Object.assign({}, propsWithUnknownType))),
        UNSAFE_root = _render15.UNSAFE_root;
      expect(UNSAFE_root.children).toHaveLength(0);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,