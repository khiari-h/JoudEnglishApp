305b029e8b5483f715ec68514b328501
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _vectorIcons = require("@expo/vector-icons");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var ExerciseFooter = function ExerciseFooter(_ref) {
  var _ref$primaryLabel = _ref.primaryLabel,
    primaryLabel = _ref$primaryLabel === void 0 ? 'Continuer' : _ref$primaryLabel,
    _ref$secondaryLabel = _ref.secondaryLabel,
    secondaryLabel = _ref$secondaryLabel === void 0 ? 'Précédent' : _ref$secondaryLabel,
    onPrimaryPress = _ref.onPrimaryPress,
    onSecondaryPress = _ref.onSecondaryPress,
    _ref$showSecondary = _ref.showSecondary,
    showSecondary = _ref$showSecondary === void 0 ? true : _ref$showSecondary,
    _ref$showCheck = _ref.showCheck,
    showCheck = _ref$showCheck === void 0 ? false : _ref$showCheck,
    _ref$isDisabled = _ref.isDisabled,
    isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled,
    _ref$color = _ref.color,
    color = _ref$color === void 0 ? '#5E60CE' : _ref$color,
    _ref$isLastQuestion = _ref.isLastQuestion,
    isLastQuestion = _ref$isLastQuestion === void 0 ? false : _ref$isLastQuestion,
    _ref$hideSkip = _ref.hideSkip,
    hideSkip = _ref$hideSkip === void 0 ? false : _ref$hideSkip,
    onSkip = _ref.onSkip,
    _ref$skipLabel = _ref.skipLabel,
    skipLabel = _ref$skipLabel === void 0 ? 'Passer' : _ref$skipLabel;
  var finalPrimaryLabel = isLastQuestion ? 'Terminer' : primaryLabel;
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: _style.default.container,
    children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: _style.default.buttonRow,
      children: [showSecondary ? (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
        style: _style.default.secondaryButton,
        onPress: onSecondaryPress,
        children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: "chevron-back",
          size: 20,
          color: "#6B7280"
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: _style.default.secondaryButtonText,
          children: secondaryLabel
        })]
      }) : (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: {
          flex: 1
        }
      }), !hideSkip && onSkip && (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: _style.default.skipButton,
        onPress: onSkip,
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: _style.default.skipText,
          children: skipLabel
        })
      }), (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
        style: [_style.default.primaryButton, {
          backgroundColor: color
        }, isDisabled && _style.default.disabledButton],
        onPress: onPrimaryPress,
        disabled: isDisabled,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: _style.default.primaryButtonText,
          children: finalPrimaryLabel
        }), showCheck ? (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: "checkmark",
          size: 20,
          color: "white"
        }) : (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: "chevron-forward",
          size: 20,
          color: "white"
        })]
      })]
    })
  });
};
var _default = exports.default = ExerciseFooter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX3ZlY3Rvckljb25zIiwiX3N0eWxlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9qc3hSdW50aW1lIiwiRXhlcmNpc2VGb290ZXIiLCJfcmVmIiwiX3JlZiRwcmltYXJ5TGFiZWwiLCJwcmltYXJ5TGFiZWwiLCJfcmVmJHNlY29uZGFyeUxhYmVsIiwic2Vjb25kYXJ5TGFiZWwiLCJvblByaW1hcnlQcmVzcyIsIm9uU2Vjb25kYXJ5UHJlc3MiLCJfcmVmJHNob3dTZWNvbmRhcnkiLCJzaG93U2Vjb25kYXJ5IiwiX3JlZiRzaG93Q2hlY2siLCJzaG93Q2hlY2siLCJfcmVmJGlzRGlzYWJsZWQiLCJpc0Rpc2FibGVkIiwiX3JlZiRjb2xvciIsImNvbG9yIiwiX3JlZiRpc0xhc3RRdWVzdGlvbiIsImlzTGFzdFF1ZXN0aW9uIiwiX3JlZiRoaWRlU2tpcCIsImhpZGVTa2lwIiwib25Ta2lwIiwiX3JlZiRza2lwTGFiZWwiLCJza2lwTGFiZWwiLCJmaW5hbFByaW1hcnlMYWJlbCIsImpzeCIsIlZpZXciLCJzdHlsZSIsInN0eWxlcyIsImNvbnRhaW5lciIsImNoaWxkcmVuIiwianN4cyIsImJ1dHRvblJvdyIsIlRvdWNoYWJsZU9wYWNpdHkiLCJzZWNvbmRhcnlCdXR0b24iLCJvblByZXNzIiwiSW9uaWNvbnMiLCJuYW1lIiwic2l6ZSIsIlRleHQiLCJzZWNvbmRhcnlCdXR0b25UZXh0IiwiZmxleCIsInNraXBCdXR0b24iLCJza2lwVGV4dCIsInByaW1hcnlCdXR0b24iLCJiYWNrZ3JvdW5kQ29sb3IiLCJkaXNhYmxlZEJ1dHRvbiIsImRpc2FibGVkIiwicHJpbWFyeUJ1dHRvblRleHQiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2NvbXBvbmVudHMvZXhlcmNpc2UtY29tbW9uL0V4ZXJjaXNlRm9vdGVyL2luZGV4LmpzXHJcbmltcG9ydCB7IFZpZXcsIFRleHQsIFRvdWNoYWJsZU9wYWNpdHkgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgeyBJb25pY29ucyB9IGZyb20gJ0BleHBvL3ZlY3Rvci1pY29ucyc7XHJcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZSc7XHJcblxyXG4vKipcclxuICogUGllZCBkZSBwYWdlIHN0YW5kYXJkaXPDqSBwb3VyIHRvdXMgbGVzIMOpY3JhbnMgZCdleGVyY2ljZXMgXHJcbiAqIGF2ZWMgYm91dG9ucyBkZSBuYXZpZ2F0aW9uIGV0IHZhbGlkYXRpb25cclxuICovXHJcbmNvbnN0IEV4ZXJjaXNlRm9vdGVyID0gKHtcclxuICBwcmltYXJ5TGFiZWwgPSAnQ29udGludWVyJyxcclxuICBzZWNvbmRhcnlMYWJlbCA9ICdQcsOpY8OpZGVudCcsXHJcbiAgb25QcmltYXJ5UHJlc3MsXHJcbiAgb25TZWNvbmRhcnlQcmVzcyxcclxuICBzaG93U2Vjb25kYXJ5ID0gdHJ1ZSxcclxuICBzaG93Q2hlY2sgPSBmYWxzZSxcclxuICBpc0Rpc2FibGVkID0gZmFsc2UsXHJcbiAgY29sb3IgPSAnIzVFNjBDRScsXHJcbiAgaXNMYXN0UXVlc3Rpb24gPSBmYWxzZSxcclxuICBoaWRlU2tpcCA9IGZhbHNlLFxyXG4gIG9uU2tpcCxcclxuICBza2lwTGFiZWwgPSAnUGFzc2VyJ1xyXG59KSA9PiB7XHJcbiAgLy8gQWp1c3RlbWVudCBkdSBsYWJlbCBwb3VyIGxlIGRlcm5pZXIgZXhlcmNpY2VcclxuICBjb25zdCBmaW5hbFByaW1hcnlMYWJlbCA9IGlzTGFzdFF1ZXN0aW9uID8gJ1Rlcm1pbmVyJyA6IHByaW1hcnlMYWJlbDtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfT5cclxuICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5idXR0b25Sb3d9PlxyXG4gICAgICAgIHtzaG93U2Vjb25kYXJ5ID8gKFxyXG4gICAgICAgICAgPFRvdWNoYWJsZU9wYWNpdHlcclxuICAgICAgICAgICAgc3R5bGU9e3N0eWxlcy5zZWNvbmRhcnlCdXR0b259XHJcbiAgICAgICAgICAgIG9uUHJlc3M9e29uU2Vjb25kYXJ5UHJlc3N9XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDxJb25pY29ucyBuYW1lPVwiY2hldnJvbi1iYWNrXCIgc2l6ZT17MjB9IGNvbG9yPVwiIzZCNzI4MFwiIC8+XHJcbiAgICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMuc2Vjb25kYXJ5QnV0dG9uVGV4dH0+e3NlY29uZGFyeUxhYmVsfTwvVGV4dD5cclxuICAgICAgICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cclxuICAgICAgICApIDogKFxyXG4gICAgICAgICAgPFZpZXcgc3R5bGU9e3sgZmxleDogMSB9fSAvPlxyXG4gICAgICAgICl9XHJcblxyXG4gICAgICAgIHshaGlkZVNraXAgJiYgb25Ta2lwICYmIChcclxuICAgICAgICAgIDxUb3VjaGFibGVPcGFjaXR5IFxyXG4gICAgICAgICAgICBzdHlsZT17c3R5bGVzLnNraXBCdXR0b259IFxyXG4gICAgICAgICAgICBvblByZXNzPXtvblNraXB9XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMuc2tpcFRleHR9Pntza2lwTGFiZWx9PC9UZXh0PlxyXG4gICAgICAgICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxyXG4gICAgICAgICl9XHJcblxyXG4gICAgICAgIDxUb3VjaGFibGVPcGFjaXR5XHJcbiAgICAgICAgICBzdHlsZT17W1xyXG4gICAgICAgICAgICBzdHlsZXMucHJpbWFyeUJ1dHRvbixcclxuICAgICAgICAgICAgeyBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yIH0sXHJcbiAgICAgICAgICAgIGlzRGlzYWJsZWQgJiYgc3R5bGVzLmRpc2FibGVkQnV0dG9uXHJcbiAgICAgICAgICBdfVxyXG4gICAgICAgICAgb25QcmVzcz17b25QcmltYXJ5UHJlc3N9XHJcbiAgICAgICAgICBkaXNhYmxlZD17aXNEaXNhYmxlZH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLnByaW1hcnlCdXR0b25UZXh0fT57ZmluYWxQcmltYXJ5TGFiZWx9PC9UZXh0PlxyXG4gICAgICAgICAge3Nob3dDaGVjayA/IChcclxuICAgICAgICAgICAgPElvbmljb25zIG5hbWU9XCJjaGVja21hcmtcIiBzaXplPXsyMH0gY29sb3I9XCJ3aGl0ZVwiIC8+XHJcbiAgICAgICAgICApIDogKFxyXG4gICAgICAgICAgICA8SW9uaWNvbnMgbmFtZT1cImNoZXZyb24tZm9yd2FyZFwiIHNpemU9ezIwfSBjb2xvcj1cIndoaXRlXCIgLz5cclxuICAgICAgICAgICl9XHJcbiAgICAgICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxyXG4gICAgICA8L1ZpZXc+XHJcbiAgICA8L1ZpZXc+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEV4ZXJjaXNlRm9vdGVyO1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsSUFBQUEsWUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsTUFBQSxHQUFBQyxzQkFBQSxDQUFBSCxPQUFBO0FBQTZCLElBQUFJLFdBQUEsR0FBQUosT0FBQTtBQU03QixJQUFNSyxjQUFjLEdBQUcsU0FBakJBLGNBQWNBLENBQUFDLElBQUEsRUFhZDtFQUFBLElBQUFDLGlCQUFBLEdBQUFELElBQUEsQ0FaSkUsWUFBWTtJQUFaQSxZQUFZLEdBQUFELGlCQUFBLGNBQUcsV0FBVyxHQUFBQSxpQkFBQTtJQUFBRSxtQkFBQSxHQUFBSCxJQUFBLENBQzFCSSxjQUFjO0lBQWRBLGNBQWMsR0FBQUQsbUJBQUEsY0FBRyxXQUFXLEdBQUFBLG1CQUFBO0lBQzVCRSxjQUFjLEdBQUFMLElBQUEsQ0FBZEssY0FBYztJQUNkQyxnQkFBZ0IsR0FBQU4sSUFBQSxDQUFoQk0sZ0JBQWdCO0lBQUFDLGtCQUFBLEdBQUFQLElBQUEsQ0FDaEJRLGFBQWE7SUFBYkEsYUFBYSxHQUFBRCxrQkFBQSxjQUFHLElBQUksR0FBQUEsa0JBQUE7SUFBQUUsY0FBQSxHQUFBVCxJQUFBLENBQ3BCVSxTQUFTO0lBQVRBLFNBQVMsR0FBQUQsY0FBQSxjQUFHLEtBQUssR0FBQUEsY0FBQTtJQUFBRSxlQUFBLEdBQUFYLElBQUEsQ0FDakJZLFVBQVU7SUFBVkEsVUFBVSxHQUFBRCxlQUFBLGNBQUcsS0FBSyxHQUFBQSxlQUFBO0lBQUFFLFVBQUEsR0FBQWIsSUFBQSxDQUNsQmMsS0FBSztJQUFMQSxLQUFLLEdBQUFELFVBQUEsY0FBRyxTQUFTLEdBQUFBLFVBQUE7SUFBQUUsbUJBQUEsR0FBQWYsSUFBQSxDQUNqQmdCLGNBQWM7SUFBZEEsY0FBYyxHQUFBRCxtQkFBQSxjQUFHLEtBQUssR0FBQUEsbUJBQUE7SUFBQUUsYUFBQSxHQUFBakIsSUFBQSxDQUN0QmtCLFFBQVE7SUFBUkEsUUFBUSxHQUFBRCxhQUFBLGNBQUcsS0FBSyxHQUFBQSxhQUFBO0lBQ2hCRSxNQUFNLEdBQUFuQixJQUFBLENBQU5tQixNQUFNO0lBQUFDLGNBQUEsR0FBQXBCLElBQUEsQ0FDTnFCLFNBQVM7SUFBVEEsU0FBUyxHQUFBRCxjQUFBLGNBQUcsUUFBUSxHQUFBQSxjQUFBO0VBR3BCLElBQU1FLGlCQUFpQixHQUFHTixjQUFjLEdBQUcsVUFBVSxHQUFHZCxZQUFZO0VBRXBFLE9BQ0UsSUFBQUosV0FBQSxDQUFBeUIsR0FBQSxFQUFDOUIsWUFBQSxDQUFBK0IsSUFBSTtJQUFDQyxLQUFLLEVBQUVDLGNBQU0sQ0FBQ0MsU0FBVTtJQUFBQyxRQUFBLEVBQzVCLElBQUE5QixXQUFBLENBQUErQixJQUFBLEVBQUNwQyxZQUFBLENBQUErQixJQUFJO01BQUNDLEtBQUssRUFBRUMsY0FBTSxDQUFDSSxTQUFVO01BQUFGLFFBQUEsR0FDM0JwQixhQUFhLEdBQ1osSUFBQVYsV0FBQSxDQUFBK0IsSUFBQSxFQUFDcEMsWUFBQSxDQUFBc0MsZ0JBQWdCO1FBQ2ZOLEtBQUssRUFBRUMsY0FBTSxDQUFDTSxlQUFnQjtRQUM5QkMsT0FBTyxFQUFFM0IsZ0JBQWlCO1FBQUFzQixRQUFBLEdBRTFCLElBQUE5QixXQUFBLENBQUF5QixHQUFBLEVBQUM1QixZQUFBLENBQUF1QyxRQUFRO1VBQUNDLElBQUksRUFBQyxjQUFjO1VBQUNDLElBQUksRUFBRSxFQUFHO1VBQUN0QixLQUFLLEVBQUM7UUFBUyxDQUFFLENBQUMsRUFDMUQsSUFBQWhCLFdBQUEsQ0FBQXlCLEdBQUEsRUFBQzlCLFlBQUEsQ0FBQTRDLElBQUk7VUFBQ1osS0FBSyxFQUFFQyxjQUFNLENBQUNZLG1CQUFvQjtVQUFBVixRQUFBLEVBQUV4QjtRQUFjLENBQU8sQ0FBQztNQUFBLENBQ2hELENBQUMsR0FFbkIsSUFBQU4sV0FBQSxDQUFBeUIsR0FBQSxFQUFDOUIsWUFBQSxDQUFBK0IsSUFBSTtRQUFDQyxLQUFLLEVBQUU7VUFBRWMsSUFBSSxFQUFFO1FBQUU7TUFBRSxDQUFFLENBQzVCLEVBRUEsQ0FBQ3JCLFFBQVEsSUFBSUMsTUFBTSxJQUNsQixJQUFBckIsV0FBQSxDQUFBeUIsR0FBQSxFQUFDOUIsWUFBQSxDQUFBc0MsZ0JBQWdCO1FBQ2ZOLEtBQUssRUFBRUMsY0FBTSxDQUFDYyxVQUFXO1FBQ3pCUCxPQUFPLEVBQUVkLE1BQU87UUFBQVMsUUFBQSxFQUVoQixJQUFBOUIsV0FBQSxDQUFBeUIsR0FBQSxFQUFDOUIsWUFBQSxDQUFBNEMsSUFBSTtVQUFDWixLQUFLLEVBQUVDLGNBQU0sQ0FBQ2UsUUFBUztVQUFBYixRQUFBLEVBQUVQO1FBQVMsQ0FBTztNQUFDLENBQ2hDLENBQ25CLEVBRUQsSUFBQXZCLFdBQUEsQ0FBQStCLElBQUEsRUFBQ3BDLFlBQUEsQ0FBQXNDLGdCQUFnQjtRQUNmTixLQUFLLEVBQUUsQ0FDTEMsY0FBTSxDQUFDZ0IsYUFBYSxFQUNwQjtVQUFFQyxlQUFlLEVBQUU3QjtRQUFNLENBQUMsRUFDMUJGLFVBQVUsSUFBSWMsY0FBTSxDQUFDa0IsY0FBYyxDQUNuQztRQUNGWCxPQUFPLEVBQUU1QixjQUFlO1FBQ3hCd0MsUUFBUSxFQUFFakMsVUFBVztRQUFBZ0IsUUFBQSxHQUVyQixJQUFBOUIsV0FBQSxDQUFBeUIsR0FBQSxFQUFDOUIsWUFBQSxDQUFBNEMsSUFBSTtVQUFDWixLQUFLLEVBQUVDLGNBQU0sQ0FBQ29CLGlCQUFrQjtVQUFBbEIsUUFBQSxFQUFFTjtRQUFpQixDQUFPLENBQUMsRUFDaEVaLFNBQVMsR0FDUixJQUFBWixXQUFBLENBQUF5QixHQUFBLEVBQUM1QixZQUFBLENBQUF1QyxRQUFRO1VBQUNDLElBQUksRUFBQyxXQUFXO1VBQUNDLElBQUksRUFBRSxFQUFHO1VBQUN0QixLQUFLLEVBQUM7UUFBTyxDQUFFLENBQUMsR0FFckQsSUFBQWhCLFdBQUEsQ0FBQXlCLEdBQUEsRUFBQzVCLFlBQUEsQ0FBQXVDLFFBQVE7VUFBQ0MsSUFBSSxFQUFDLGlCQUFpQjtVQUFDQyxJQUFJLEVBQUUsRUFBRztVQUFDdEIsS0FBSyxFQUFDO1FBQU8sQ0FBRSxDQUMzRDtNQUFBLENBQ2UsQ0FBQztJQUFBLENBQ2Y7RUFBQyxDQUNILENBQUM7QUFFWCxDQUFDO0FBQUMsSUFBQWlDLFFBQUEsR0FBQUMsT0FBQSxDQUFBQyxPQUFBLEdBRWFsRCxjQUFjIiwiaWdub3JlTGlzdCI6W119