82fb1efe6653d46550899e544b69c028
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _vocabularyDataHelper = require("../utils/vocabulary/vocabularyDataHelper");
var useRealTimeProgress = function useRealTimeProgress() {
  var _useState = (0, _react.useState)({}),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    levelProgress = _useState2[0],
    setLevelProgress = _useState2[1];
  var _useState3 = (0, _react.useState)({}),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    exerciseProgress = _useState4[0],
    setExerciseProgress = _useState4[1];
  var _useState5 = (0, _react.useState)(true),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    isLoading = _useState6[0],
    setIsLoading = _useState6[1];
  var handleProgressError = function handleProgressError(error, operation, level) {
    var fallback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    console.warn(`Progress calculation error in ${operation} for level ${level}:`, error);
    return fallback;
  };
  var calculateVocabularyProgress = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* (level) {
      try {
        var storageKey = `vocabulary_${level}_classic`;
        var savedData = yield _asyncStorage.default.getItem(storageKey);
        if (!savedData) return 0;
        var data = JSON.parse(savedData);
        var completedWords = data.completedWords || {};
        var vocabularyData = (0, _vocabularyDataHelper.getVocabularyData)(level, 'classic');
        if (!(vocabularyData != null && vocabularyData.exercises)) return 0;
        var totalWords = vocabularyData.exercises.reduce(function (sum, cat) {
          var _cat$words;
          return sum + (((_cat$words = cat.words) == null ? void 0 : _cat$words.length) || 0);
        }, 0);
        var completedCount = 0;
        Object.values(completedWords).forEach(function (categoryWords) {
          if (Array.isArray(categoryWords)) {
            completedCount += categoryWords.length;
          }
        });
        var percentage = totalWords > 0 ? completedCount / totalWords * 100 : 0;
        return Math.min(Math.round(percentage), 100);
      } catch (error) {
        return handleProgressError(error, 'calculateVocabularyProgress', level, 0);
      }
    });
    return function calculateVocabularyProgress(_x) {
      return _ref.apply(this, arguments);
    };
  }();
  var calculateVocabularyFastProgress = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (level) {
      try {
        var storageKey = `vocabulary_${level}_fast`;
        var savedData = yield _asyncStorage.default.getItem(storageKey);
        if (!savedData) return 0;
        var data = JSON.parse(savedData);
        var completedWords = data.completedWords || {};
        var vocabularyData = (0, _vocabularyDataHelper.getVocabularyData)(level, 'fast');
        if (!(vocabularyData != null && vocabularyData.exercises)) return 0;
        var totalWords = vocabularyData.exercises.reduce(function (sum, cat) {
          var _cat$words2;
          return sum + (((_cat$words2 = cat.words) == null ? void 0 : _cat$words2.length) || 0);
        }, 0);
        var completedCount = 0;
        Object.values(completedWords).forEach(function (categoryWords) {
          if (Array.isArray(categoryWords)) {
            completedCount += categoryWords.length;
          }
        });
        var percentage = totalWords > 0 ? completedCount / totalWords * 100 : 0;
        return Math.min(Math.round(percentage), 100);
      } catch (error) {
        return handleProgressError(error, 'calculateVocabularyFastProgress', level, 0);
      }
    });
    return function calculateVocabularyFastProgress(_x2) {
      return _ref2.apply(this, arguments);
    };
  }();
  var calculateGrammarProgress = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (level) {
      try {
        var storageKey = `grammar_${level}`;
        var savedData = yield _asyncStorage.default.getItem(storageKey);
        if (!savedData) return 0;
        var data = JSON.parse(savedData);
        var completedExercises = data.completedExercises || {};
        var completedCount = 0;
        Object.values(completedExercises).forEach(function (exerciseIndices) {
          if (Array.isArray(exerciseIndices)) {
            completedCount += exerciseIndices.length;
          }
        });
        var EXERCISES_PER_LEVEL = 20;
        var percentage = completedCount / EXERCISES_PER_LEVEL * 100;
        return Math.min(Math.round(percentage), 100);
      } catch (error) {
        return handleProgressError(error, 'calculateGrammarProgress', level, 0);
      }
    });
    return function calculateGrammarProgress(_x3) {
      return _ref3.apply(this, arguments);
    };
  }();
  var calculateReadingProgress = function () {
    var _ref4 = (0, _asyncToGenerator2.default)(function* (level) {
      try {
        var storageKey = `reading_${level}`;
        var savedData = yield _asyncStorage.default.getItem(storageKey);
        if (!savedData) return 0;
        var data = JSON.parse(savedData);
        var completedQuestions = data.completedQuestions || {};
        var completedCount = 0;
        Object.values(completedQuestions).forEach(function (questionIndices) {
          if (Array.isArray(questionIndices)) {
            completedCount += questionIndices.length;
          }
        });
        var QUESTIONS_PER_LEVEL = 15;
        var percentage = completedCount / QUESTIONS_PER_LEVEL * 100;
        return Math.min(Math.round(percentage), 100);
      } catch (error) {
        return handleProgressError(error, 'calculateReadingProgress', level, 0);
      }
    });
    return function calculateReadingProgress(_x4) {
      return _ref4.apply(this, arguments);
    };
  }();
  var calculatePhrasesProgress = function () {
    var _ref5 = (0, _asyncToGenerator2.default)(function* (level) {
      try {
        var storageKey = `phrases_${level}`;
        var savedData = yield _asyncStorage.default.getItem(storageKey);
        if (!savedData) return 0;
        var data = JSON.parse(savedData);
        var completedPhrases = data.completedPhrases || {};
        var completedCount = 0;
        Object.values(completedPhrases).forEach(function (phraseIndices) {
          if (Array.isArray(phraseIndices)) {
            completedCount += phraseIndices.length;
          }
        });
        var PHRASES_PER_LEVEL = 30;
        var percentage = completedCount / PHRASES_PER_LEVEL * 100;
        return Math.min(Math.round(percentage), 100);
      } catch (error) {
        return handleProgressError(error, 'calculatePhrasesProgress', level, 0);
      }
    });
    return function calculatePhrasesProgress(_x5) {
      return _ref5.apply(this, arguments);
    };
  }();
  var calculateConversationsProgress = function () {
    var _ref6 = (0, _asyncToGenerator2.default)(function* (level) {
      try {
        var storageKey = `conversation_${level}`;
        var savedData = yield _asyncStorage.default.getItem(storageKey);
        if (!savedData) return 0;
        var data = JSON.parse(savedData);
        var completedScenarios = data.completedScenarios || {};
        var completedCount = Object.values(completedScenarios).filter(function (scenario) {
          return scenario && (scenario.completed || scenario.completedAt);
        }).length;
        var CONVERSATIONS_PER_LEVEL = 8;
        var percentage = completedCount / CONVERSATIONS_PER_LEVEL * 100;
        return Math.min(Math.round(percentage), 100);
      } catch (error) {
        return handleProgressError(error, 'calculateConversationsProgress', level, 0);
      }
    });
    return function calculateConversationsProgress(_x6) {
      return _ref6.apply(this, arguments);
    };
  }();
  var calculateErrorCorrectionProgress = function () {
    var _ref7 = (0, _asyncToGenerator2.default)(function* (level) {
      try {
        var storageKey = `error_correction_${level}`;
        var savedData = yield _asyncStorage.default.getItem(storageKey);
        if (!savedData) return 0;
        var data = JSON.parse(savedData);
        var completedExercises = data.completedExercises || {};
        var completedCount = 0;
        Object.values(completedExercises).forEach(function (exerciseIndices) {
          if (Array.isArray(exerciseIndices)) {
            completedCount += exerciseIndices.length;
          }
        });
        var EXERCISES_PER_LEVEL = 20;
        var percentage = completedCount / EXERCISES_PER_LEVEL * 100;
        return Math.min(Math.round(percentage), 100);
      } catch (error) {
        return handleProgressError(error, 'calculateErrorCorrectionProgress', level, 0);
      }
    });
    return function calculateErrorCorrectionProgress(_x7) {
      return _ref7.apply(this, arguments);
    };
  }();
  var calculateWordGamesProgress = function () {
    var _ref8 = (0, _asyncToGenerator2.default)(function* (level) {
      try {
        var storageKey = `word_games_completed_${level}`;
        var savedData = yield _asyncStorage.default.getItem(storageKey);
        if (!savedData) return 0;
        var data = JSON.parse(savedData);
        var completedCount = Object.values(data).filter(function (game) {
          return game == null ? void 0 : game.completed;
        }).length;
        var GAMES_PER_LEVEL = 10;
        var percentage = completedCount / GAMES_PER_LEVEL * 100;
        return Math.min(Math.round(percentage), 100);
      } catch (error) {
        return handleProgressError(error, 'calculateWordGamesProgress', level, 0);
      }
    });
    return function calculateWordGamesProgress(_x8) {
      return _ref8.apply(this, arguments);
    };
  }();
  var calculateAssessmentProgress = function () {
    var _ref9 = (0, _asyncToGenerator2.default)(function* (level) {
      try {
        var storageKey = `assessment_results_${level}`;
        var savedData = yield _asyncStorage.default.getItem(storageKey);
        if (!savedData) return 0;
        var data = JSON.parse(savedData);
        return data.completedAt ? 100 : 0;
      } catch (error) {
        return handleProgressError(error, 'calculateAssessmentProgress', level, 0);
      }
    });
    return function calculateAssessmentProgress(_x9) {
      return _ref9.apply(this, arguments);
    };
  }();
  var calculateProgress = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      setIsLoading(true);
      var newLevelProgress = {};
      var newExerciseProgress = {};
      var levels = ['1', '2', '3', '4', '5', '6', 'bonus'];
      var exerciseCalculators = {
        vocabulary: calculateVocabularyProgress,
        vocabulary_fast: calculateVocabularyFastProgress,
        grammar: calculateGrammarProgress,
        reading: calculateReadingProgress,
        phrases: calculatePhrasesProgress,
        conversations: calculateConversationsProgress,
        errorCorrection: calculateErrorCorrectionProgress,
        wordGames: calculateWordGamesProgress,
        assessment: calculateAssessmentProgress
      };
      yield Promise.all(levels.map(function () {
        var _ref1 = (0, _asyncToGenerator2.default)(function* (level) {
          var availableExercises = level === 'bonus' ? ['reading', 'vocabulary', 'phrases'] : Object.keys(exerciseCalculators);
          var results = yield Promise.all(availableExercises.map(function () {
            var _ref10 = (0, _asyncToGenerator2.default)(function* (exerciseType) {
              try {
                var calculator = exerciseCalculators[exerciseType];
                var value = yield calculator(level);
                return {
                  exerciseType: exerciseType,
                  value: value
                };
              } catch (e) {
                console.warn(`Erreur calcul ${exerciseType} niveau ${level}:`, e);
                return {
                  exerciseType: exerciseType,
                  value: 0
                };
              }
            });
            return function (_x1) {
              return _ref10.apply(this, arguments);
            };
          }()));
          var levelTotal = 0;
          var levelCompleted = 0;
          results.forEach(function (_ref11) {
            var exerciseType = _ref11.exerciseType,
              value = _ref11.value;
            if (!newExerciseProgress[exerciseType]) newExerciseProgress[exerciseType] = {};
            newExerciseProgress[exerciseType][level] = value;
            levelTotal += 100;
            levelCompleted += value;
          });
          newLevelProgress[level] = levelTotal > 0 ? Math.round(levelCompleted / levelTotal * 100) : 0;
        });
        return function (_x0) {
          return _ref1.apply(this, arguments);
        };
      }()));
      setLevelProgress(newLevelProgress);
      setExerciseProgress(newExerciseProgress);
    } catch (error) {
      console.error('Erreur calcul progression:', error);
    } finally {
      setIsLoading(false);
    }
  }), []);
  var getLevelProgress = (0, _react.useCallback)(function (level) {
    return levelProgress[level] || 0;
  }, [levelProgress]);
  var getExerciseProgress = (0, _react.useCallback)(function (exerciseType, level) {
    var _exerciseProgress$exe;
    return ((_exerciseProgress$exe = exerciseProgress[exerciseType]) == null ? void 0 : _exerciseProgress$exe[level]) || 0;
  }, [exerciseProgress]);
  var hasProgress = (0, _react.useCallback)(function (exerciseType, level) {
    return getExerciseProgress(exerciseType, level) > 0;
  }, [getExerciseProgress]);
  var hasVocabularyStarted = (0, _react.useCallback)(function (level) {
    return hasProgress('vocabulary', level);
  }, [hasProgress]);
  var hasVocabularyFastStarted = (0, _react.useCallback)(function (level) {
    return hasProgress('vocabulary_fast', level);
  }, [hasProgress]);
  (0, _react.useEffect)(function () {
    calculateProgress();
  }, [calculateProgress]);
  var refresh = (0, _react.useCallback)(function () {
    calculateProgress();
  }, [calculateProgress]);
  return {
    levelProgress: levelProgress,
    exerciseProgress: exerciseProgress,
    isLoading: isLoading,
    getLevelProgress: getLevelProgress,
    getExerciseProgress: getExerciseProgress,
    hasProgress: hasProgress,
    hasVocabularyStarted: hasVocabularyStarted,
    hasVocabularyFastStarted: hasVocabularyFastStarted,
    refresh: refresh
  };
};
var _default = exports.default = useRealTimeProgress;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,