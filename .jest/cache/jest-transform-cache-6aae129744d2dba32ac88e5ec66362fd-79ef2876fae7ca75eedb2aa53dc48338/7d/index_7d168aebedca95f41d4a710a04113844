f0f0cab573c89e7fe31ec8a9c55cdbed
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _react = require("react");
var _GameInstructions = _interopRequireDefault(require("../GameInstructions"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var MatchingGame = function MatchingGame(_ref) {
  var game = _ref.game,
    selectedItems = _ref.selectedItems,
    matchedItems = _ref.matchedItems,
    shuffledOptions = _ref.shuffledOptions,
    showFeedback = _ref.showFeedback,
    levelColor = _ref.levelColor,
    onSelectItem = _ref.onSelectItem;
  var handleSelectItem = (0, _react.useCallback)(function (item, index, isMatched, feedbackVisible) {
    return function () {
      if (!isMatched && !feedbackVisible) {
        onSelectItem(item, index);
      }
    };
  }, [onSelectItem]);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: _style.default.gameContainer,
    children: [(0, _jsxRuntime.jsx)(_GameInstructions.default, {
      instructions: game.instructions
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.matchingContainer,
      children: shuffledOptions.map(function (item, index) {
        var isMatched = matchedItems.includes(item);
        var isSelected = selectedItems.some(function (selected) {
          return selected.index === index;
        });
        return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          style: [_style.default.matchingTile, isSelected && [_style.default.selectedMatchingTile, {
            borderColor: levelColor
          }], isMatched && [_style.default.matchedTile, {
            backgroundColor: `${levelColor}20`
          }]],
          onPress: handleSelectItem(item, index, isMatched, showFeedback),
          disabled: isMatched || showFeedback,
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [_style.default.matchingText, isMatched && {
              color: levelColor
            }],
            children: item
          })
        }, item);
      })
    }), game.hint && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.hintContainer,
      children: (0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: _style.default.hintText,
        children: ["Hint: ", game.hint]
      })
    })]
  });
};
var _default = exports.default = MatchingGame;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX3JlYWN0IiwiX0dhbWVJbnN0cnVjdGlvbnMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3N0eWxlIiwiX2pzeFJ1bnRpbWUiLCJNYXRjaGluZ0dhbWUiLCJfcmVmIiwiZ2FtZSIsInNlbGVjdGVkSXRlbXMiLCJtYXRjaGVkSXRlbXMiLCJzaHVmZmxlZE9wdGlvbnMiLCJzaG93RmVlZGJhY2siLCJsZXZlbENvbG9yIiwib25TZWxlY3RJdGVtIiwiaGFuZGxlU2VsZWN0SXRlbSIsInVzZUNhbGxiYWNrIiwiaXRlbSIsImluZGV4IiwiaXNNYXRjaGVkIiwiZmVlZGJhY2tWaXNpYmxlIiwianN4cyIsIlZpZXciLCJzdHlsZSIsInN0eWxlcyIsImdhbWVDb250YWluZXIiLCJjaGlsZHJlbiIsImpzeCIsImRlZmF1bHQiLCJpbnN0cnVjdGlvbnMiLCJtYXRjaGluZ0NvbnRhaW5lciIsIm1hcCIsImluY2x1ZGVzIiwiaXNTZWxlY3RlZCIsInNvbWUiLCJzZWxlY3RlZCIsIlRvdWNoYWJsZU9wYWNpdHkiLCJtYXRjaGluZ1RpbGUiLCJzZWxlY3RlZE1hdGNoaW5nVGlsZSIsImJvcmRlckNvbG9yIiwibWF0Y2hlZFRpbGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJvblByZXNzIiwiZGlzYWJsZWQiLCJUZXh0IiwibWF0Y2hpbmdUZXh0IiwiY29sb3IiLCJoaW50IiwiaGludENvbnRhaW5lciIsImhpbnRUZXh0IiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3NjcmVlbnMvZXhlcmNpc2VzL3dvcmRHYW1lcy9nYW1lcy9NYXRjaGluZ0dhbWUvaW5kZXguanNcbmltcG9ydCB7IFZpZXcsIFRleHQsIFRvdWNoYWJsZU9wYWNpdHkgfSBmcm9tIFwicmVhY3QtbmF0aXZlXCI7XG5pbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IEdhbWVJbnN0cnVjdGlvbnMgZnJvbSBcIi4uL0dhbWVJbnN0cnVjdGlvbnNcIjtcbmltcG9ydCBzdHlsZXMgZnJvbSBcIi4vc3R5bGVcIjtcblxuLyoqXG4gKiBDb21wb3NhbnQgcG91ciBsZSBqZXUgZCdhc3NvY2lhdGlvbiBkZSBwYWlyZXNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZ2FtZSAtIERvbm7DqWVzIGR1IGpldVxuICogQHBhcmFtIHtBcnJheX0gc2VsZWN0ZWRJdGVtcyAtIEl0ZW1zIHPDqWxlY3Rpb25uw6lzIHBhciBsJ3V0aWxpc2F0ZXVyXG4gKiBAcGFyYW0ge0FycmF5fSBtYXRjaGVkSXRlbXMgLSBJdGVtcyBjb3JyZWN0ZW1lbnQgYXBwYXJpw6lzXG4gKiBAcGFyYW0ge0FycmF5fSBzaHVmZmxlZE9wdGlvbnMgLSBPcHRpb25zIG3DqWxhbmfDqWVzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHNob3dGZWVkYmFjayAtIEluZGlxdWUgc2kgbGUgZmVlZGJhY2sgZXN0IGFmZmljaMOpXG4gKiBAcGFyYW0ge3N0cmluZ30gbGV2ZWxDb2xvciAtIENvdWxldXIgYXNzb2Npw6llIGF1IG5pdmVhdVxuICogQHBhcmFtIHtGdW5jdGlvbn0gb25TZWxlY3RJdGVtIC0gRm9uY3Rpb24gYXBwZWzDqWUgbG9ycyBkZSBsYSBzw6lsZWN0aW9uIGQndW4gaXRlbVxuICovXG5jb25zdCBNYXRjaGluZ0dhbWUgPSAoe1xuICBnYW1lLFxuICBzZWxlY3RlZEl0ZW1zLFxuICBtYXRjaGVkSXRlbXMsXG4gIHNodWZmbGVkT3B0aW9ucyxcbiAgc2hvd0ZlZWRiYWNrLFxuICBsZXZlbENvbG9yLFxuICBvblNlbGVjdEl0ZW0sXG59KSA9PiB7XG4gIC8vIEhhbmRsZXIgc3RhYmxlIHBvdXIgbGEgc8OpbGVjdGlvbiBkJ3VuIGl0ZW1cbiAgY29uc3QgaGFuZGxlU2VsZWN0SXRlbSA9IHVzZUNhbGxiYWNrKFxuICAgIChpdGVtLCBpbmRleCwgaXNNYXRjaGVkLCBmZWVkYmFja1Zpc2libGUpID0+ICgpID0+IHtcbiAgICAgIGlmICghaXNNYXRjaGVkICYmICFmZWVkYmFja1Zpc2libGUpIHtcbiAgICAgICAgb25TZWxlY3RJdGVtKGl0ZW0sIGluZGV4KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtvblNlbGVjdEl0ZW1dXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8VmlldyBzdHlsZT17c3R5bGVzLmdhbWVDb250YWluZXJ9PlxuICAgICAgPEdhbWVJbnN0cnVjdGlvbnMgaW5zdHJ1Y3Rpb25zPXtnYW1lLmluc3RydWN0aW9uc30gLz5cblxuICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5tYXRjaGluZ0NvbnRhaW5lcn0+XG4gICAgICAgIHtzaHVmZmxlZE9wdGlvbnMubWFwKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGlzTWF0Y2hlZCA9IG1hdGNoZWRJdGVtcy5pbmNsdWRlcyhpdGVtKTtcbiAgICAgICAgICBjb25zdCBpc1NlbGVjdGVkID0gc2VsZWN0ZWRJdGVtcy5zb21lKFxuICAgICAgICAgICAgKHNlbGVjdGVkKSA9PiBzZWxlY3RlZC5pbmRleCA9PT0gaW5kZXhcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxUb3VjaGFibGVPcGFjaXR5XG4gICAgICAgICAgICAgIGtleT17aXRlbX1cbiAgICAgICAgICAgICAgc3R5bGU9e1tcbiAgICAgICAgICAgICAgICBzdHlsZXMubWF0Y2hpbmdUaWxlLFxuICAgICAgICAgICAgICAgIGlzU2VsZWN0ZWQgJiYgW1xuICAgICAgICAgICAgICAgICAgc3R5bGVzLnNlbGVjdGVkTWF0Y2hpbmdUaWxlLFxuICAgICAgICAgICAgICAgICAgeyBib3JkZXJDb2xvcjogbGV2ZWxDb2xvciB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgaXNNYXRjaGVkICYmIFtcbiAgICAgICAgICAgICAgICAgIHN0eWxlcy5tYXRjaGVkVGlsZSxcbiAgICAgICAgICAgICAgICAgIHsgYmFja2dyb3VuZENvbG9yOiBgJHtsZXZlbENvbG9yfTIwYCB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIF19XG4gICAgICAgICAgICAgIG9uUHJlc3M9e2hhbmRsZVNlbGVjdEl0ZW0oaXRlbSwgaW5kZXgsIGlzTWF0Y2hlZCwgc2hvd0ZlZWRiYWNrKX1cbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e2lzTWF0Y2hlZCB8fCBzaG93RmVlZGJhY2t9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxUZXh0XG4gICAgICAgICAgICAgICAgc3R5bGU9e1tcbiAgICAgICAgICAgICAgICAgIHN0eWxlcy5tYXRjaGluZ1RleHQsXG4gICAgICAgICAgICAgICAgICBpc01hdGNoZWQgJiYgeyBjb2xvcjogbGV2ZWxDb2xvciB9LFxuICAgICAgICAgICAgICAgIF19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7aXRlbX1cbiAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxuICAgICAgICAgICk7XG4gICAgICAgIH0pfVxuICAgICAgPC9WaWV3PlxuXG4gICAgICB7Z2FtZS5oaW50ICYmIChcbiAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5oaW50Q29udGFpbmVyfT5cbiAgICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLmhpbnRUZXh0fT5IaW50OiB7Z2FtZS5oaW50fTwvVGV4dD5cbiAgICAgICAgPC9WaWV3PlxuICAgICAgKX1cbiAgICA8L1ZpZXc+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBNYXRjaGluZ0dhbWU7XG5cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxJQUFBQSxZQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxNQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxpQkFBQSxHQUFBQyxzQkFBQSxDQUFBSCxPQUFBO0FBQ0EsSUFBQUksTUFBQSxHQUFBRCxzQkFBQSxDQUFBSCxPQUFBO0FB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