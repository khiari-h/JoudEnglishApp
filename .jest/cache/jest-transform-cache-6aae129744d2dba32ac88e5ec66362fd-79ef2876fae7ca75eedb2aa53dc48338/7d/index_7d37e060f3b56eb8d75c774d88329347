f7d7f8699d716b555b33449c9a5658dc
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _MatchingGame = _interopRequireDefault(require("../MatchingGame"));
var _CategorizationGame = _interopRequireDefault(require("../CategorizationGame"));
var _FeedbackMessage = _interopRequireDefault(require("../FeedbackMessage"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var WordGamesCard = function WordGamesCard(_ref) {
  var currentGame = _ref.currentGame,
    selectedItems = _ref.selectedItems,
    matchedItems = _ref.matchedItems,
    shuffledOptions = _ref.shuffledOptions,
    showFeedback = _ref.showFeedback,
    isCorrect = _ref.isCorrect,
    levelColor = _ref.levelColor,
    fadeAnim = _ref.fadeAnim,
    bounceAnim = _ref.bounceAnim,
    onSelectItem = _ref.onSelectItem;
  var renderGameByType = function renderGameByType() {
    switch (currentGame.type) {
      case "matching":
        return (0, _jsxRuntime.jsx)(_MatchingGame.default, {
          game: currentGame,
          selectedItems: selectedItems,
          matchedItems: matchedItems,
          shuffledOptions: shuffledOptions,
          showFeedback: showFeedback,
          levelColor: levelColor,
          onSelectItem: onSelectItem
        });
      case "categorization":
        return (0, _jsxRuntime.jsx)(_CategorizationGame.default, {
          game: currentGame,
          selectedItems: selectedItems,
          shuffledOptions: shuffledOptions,
          showFeedback: showFeedback,
          levelColor: levelColor,
          onSelectItem: onSelectItem
        });
      default:
        return (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: _style.default.errorContainer,
          children: [(0, _jsxRuntime.jsxs)(_reactNative.Text, {
            style: _style.default.errorText,
            children: ["Unsupported game type: ", currentGame.type]
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: _style.default.errorSubText,
            children: "Only matching and categorization games are supported."
          })]
        });
    }
  };
  return (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
    style: _style.default.scrollView,
    contentContainerStyle: _style.default.contentContainer,
    children: (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
      style: [_style.default.gameCardContainer, {
        opacity: fadeAnim,
        transform: [{
          scale: bounceAnim
        }]
      }],
      children: [currentGame.title && (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: _style.default.gameTitle,
        children: currentGame.title
      }), renderGameByType(), showFeedback && (0, _jsxRuntime.jsx)(_FeedbackMessage.default, {
        isCorrect: isCorrect,
        successMessage: currentGame.successMessage,
        failureMessage: currentGame.failureMessage,
        levelColor: levelColor
      })]
    })
  });
};
var _default = exports.default = WordGamesCard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,