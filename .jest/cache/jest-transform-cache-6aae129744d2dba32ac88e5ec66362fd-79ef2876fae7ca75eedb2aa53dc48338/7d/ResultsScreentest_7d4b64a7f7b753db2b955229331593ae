59d81a5dc1312239a3bf741bfc353fe7
_getJestObj().mock('expo-linear-gradient', function () {
  var _require = require('react-native'),
    View = _require.View;
  return {
    LinearGradient: function LinearGradient(props) {
      return (0, _jsxRuntime.jsx)(View, Object.assign({}, props));
    }
  };
});
_getJestObj().mock('@expo/vector-icons', function () {
  var _require2 = require('react-native'),
    Text = _require2.Text;
  return {
    Ionicons: function Ionicons(props) {
      return (0, _jsxRuntime.jsx)(Text, {
        testID: `icon-${props.name}`,
        children: props.name
      });
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ResultsScreen = _interopRequireDefault(require("../../../src/components/exercise-common/ResultsScreen"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ResultsScreen', function () {
  beforeAll(function () {
    jest.useFakeTimers();
  });
  afterAll(function () {
    jest.useRealTimers();
  });
  beforeEach(function () {
    _reactNative2.Share.share = jest.fn();
  });
  var defaultProps = {
    totalQuestions: 10,
    correctAnswers: 8,
    incorrectAnswers: 1,
    skippedAnswers: 2,
    timeTaken: '01:30',
    exerciseType: 'Vocabulary',
    level: 'B1',
    levelColor: '#3B82F6',
    feedback: '',
    onRetry: jest.fn(),
    onContinue: jest.fn(),
    showDetailedResults: false,
    detailedResults: []
  };
  afterEach(function () {
    jest.clearAllMocks();
    jest.runOnlyPendingTimers();
  });
  it('renders basic statistics correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps))),
      getByText = _render.getByText;
    expect(getByText('80%')).toBeTruthy();
    expect(getByText('8/10')).toBeTruthy();
    expect(getByText('Correctes')).toBeTruthy();
    expect(getByText('8')).toBeTruthy();
    expect(getByText('Incorrectes')).toBeTruthy();
    expect(getByText('1')).toBeTruthy();
    expect(getByText('Passées')).toBeTruthy();
    expect(getByText('2')).toBeTruthy();
    expect(getByText('Temps')).toBeTruthy();
    expect(getByText('01:30')).toBeTruthy();
  });
  it('displays feedback when provided', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        feedback: "Great job!"
      }))),
      getByText = _render2.getByText;
    expect(getByText('Conseils pour progresser')).toBeTruthy();
    expect(getByText('Great job!')).toBeTruthy();
  });
  it('does not display feedback when not provided', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        feedback: ""
      }))),
      queryByText = _render3.queryByText;
    expect(queryByText('Conseils pour progresser')).toBeNull();
  });
  it('displays detailed results when showDetailedResults is true and data is present', function () {
    var detailedResults = [{
      question: 'Q1',
      userAnswer: 'A',
      correctAnswer: 'B',
      isCorrect: false,
      isSkipped: false
    }];
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        showDetailedResults: true,
        detailedResults: detailedResults
      }))),
      getByText = _render4.getByText;
    expect(getByText('Détail des réponses')).toBeTruthy();
    expect(getByText('Question 1')).toBeTruthy();
    expect(getByText('Q1')).toBeTruthy();
    expect(getByText('Votre réponse:')).toBeTruthy();
    expect(getByText('A')).toBeTruthy();
    expect(getByText('Réponse correcte:')).toBeTruthy();
    expect(getByText('B')).toBeTruthy();
  });
  it('does not display detailed results when showDetailedResults is false', function () {
    var detailedResults = [{
      question: 'Q1',
      userAnswer: 'A',
      correctAnswer: 'B',
      isCorrect: false,
      isSkipped: false
    }];
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        showDetailedResults: false,
        detailedResults: detailedResults
      }))),
      queryByText = _render5.queryByText;
    expect(queryByText('Détail des réponses')).toBeNull();
  });
  it('shows "Excellent!" for >= 80% score', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        correctAnswers: 8,
        totalQuestions: 10
      }))),
      getByText = _render6.getByText,
      getByTestId = _render6.getByTestId;
    expect(getByText('Excellent!')).toBeTruthy();
    expect(getByTestId('icon-trophy')).toBeTruthy();
  });
  it('shows "Bien joué!" for >= 60% score', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        correctAnswers: 6,
        totalQuestions: 10
      }))),
      getByText = _render7.getByText,
      getByTestId = _render7.getByTestId;
    expect(getByText('Bien joué!')).toBeTruthy();
    expect(getByTestId('icon-thumbs-up')).toBeTruthy();
  });
  it('shows "Pas mal!" for >= 40% score', function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        correctAnswers: 4,
        totalQuestions: 10
      }))),
      getByText = _render8.getByText,
      getByTestId = _render8.getByTestId;
    expect(getByText('Pas mal!')).toBeTruthy();
    expect(getByTestId('icon-fitness')).toBeTruthy();
  });
  it('shows "Continuez vos efforts" for < 40% score', function () {
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        correctAnswers: 3,
        totalQuestions: 10
      }))),
      getByText = _render9.getByText,
      getByTestId = _render9.getByTestId;
    expect(getByText('Continuez vos efforts')).toBeTruthy();
    expect(getByTestId('icon-school')).toBeTruthy();
  });
  it('calls onRetry when the retry button is pressed', function () {
    var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps))),
      getByText = _render0.getByText;
    _reactNative.fireEvent.press(getByText('Réessayer'));
    expect(defaultProps.onRetry).toHaveBeenCalledTimes(1);
  });
  it('calls onContinue when the continue button is pressed', function () {
    var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps))),
      getByText = _render1.getByText;
    _reactNative.fireEvent.press(getByText('Continuer'));
    expect(defaultProps.onContinue).toHaveBeenCalledTimes(1);
  });
  it('calls Share.share with correct data when share button is pressed', (0, _asyncToGenerator2.default)(function* () {
    var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps))),
      getByText = _render10.getByText;
    _reactNative.fireEvent.press(getByText('Partager'));
    expect(_reactNative2.Share.share).toHaveBeenCalledWith({
      message: 'J\'ai obtenu 8/10 (80%) dans mon exercice de Vocabulary niveau B1 sur l\'application JOUD English!',
      title: 'Mes résultats d\'apprentissage'
    });
  }));
  it('handles share error gracefully without crashing', (0, _asyncToGenerator2.default)(function* () {
    var shareError = new Error('Share operation failed');
    _reactNative2.Share.share.mockRejectedValue(shareError);
    var warnSpy = jest.spyOn(console, 'warn');
    var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps))),
      getByText = _render11.getByText;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(getByText('Partager'));
    }));
    expect(_reactNative2.Share.share).toHaveBeenCalledTimes(1);
    expect(warnSpy).toHaveBeenCalledWith('Error sharing results:', shareError);
    warnSpy.mockRestore();
  }));
  describe('Detailed Results - Edge Cases', function () {
    it('displays skipped questions correctly', function () {
      var detailedResults = [{
        question: 'What is 2+2?',
        userAnswer: '',
        correctAnswer: '4',
        isCorrect: false,
        isSkipped: true
      }];
      var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
          showDetailedResults: true,
          detailedResults: detailedResults
        }))),
        getByText = _render12.getByText,
        getByTestId = _render12.getByTestId;
      expect(getByTestId('icon-play-skip-forward')).toBeTruthy();
      expect(getByText('Passée')).toBeTruthy();
      expect(function () {
        return getByText('Réponse correcte:');
      }).toThrow();
    });
    it('displays correct questions without showing correct answer section', function () {
      var detailedResults = [{
        question: 'What is 3+3?',
        userAnswer: '6',
        correctAnswer: '6',
        isCorrect: true,
        isSkipped: false
      }];
      var _render13 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
          showDetailedResults: true,
          detailedResults: detailedResults
        }))),
        getByText = _render13.getByText,
        getByTestId = _render13.getByTestId,
        queryByText = _render13.queryByText;
      expect(getByTestId('icon-checkmark-circle')).toBeTruthy();
      expect(getByText('6')).toBeTruthy();
      expect(queryByText('Réponse correcte:')).toBeNull();
    });
    it('displays mixed types of detailed results (correct, incorrect, skipped)', function () {
      var detailedResults = [{
        question: 'Question 1 - Correct',
        userAnswer: 'A',
        correctAnswer: 'A',
        isCorrect: true,
        isSkipped: false
      }, {
        question: 'Question 2 - Incorrect',
        userAnswer: 'B',
        correctAnswer: 'C',
        isCorrect: false,
        isSkipped: false
      }, {
        question: 'Question 3 - Skipped',
        userAnswer: '',
        correctAnswer: 'D',
        isCorrect: false,
        isSkipped: true
      }];
      var _render14 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
          showDetailedResults: true,
          detailedResults: detailedResults
        }))),
        getByText = _render14.getByText,
        getByTestId = _render14.getByTestId;
      expect(getByTestId('icon-checkmark-circle')).toBeTruthy();
      expect(getByText('Question 1 - Correct')).toBeTruthy();
      expect(getByTestId('icon-close-circle')).toBeTruthy();
      expect(getByText('Question 2 - Incorrect')).toBeTruthy();
      expect(getByText('B')).toBeTruthy();
      expect(getByText('C')).toBeTruthy();
      expect(getByTestId('icon-play-skip-forward')).toBeTruthy();
      expect(getByText('Question 3 - Skipped')).toBeTruthy();
      expect(getByText('Passée')).toBeTruthy();
    });
    it('does not display detailed results when array is empty', function () {
      var _render15 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
          showDetailedResults: true,
          detailedResults: []
        }))),
        queryByText = _render15.queryByText;
      expect(queryByText('Détail des réponses')).toBeNull();
    });
    it('does not display detailed results when showDetailedResults is false even with data', function () {
      var detailedResults = [{
        question: 'Hidden question',
        userAnswer: 'A',
        correctAnswer: 'B',
        isCorrect: false,
        isSkipped: false
      }];
      var _render16 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
          showDetailedResults: false,
          detailedResults: detailedResults
        }))),
        queryByText = _render16.queryByText;
      expect(queryByText('Détail des réponses')).toBeNull();
      expect(queryByText('Hidden question')).toBeNull();
    });
  });
  describe('Edge Cases - Props handling', function () {
    it('handles zero totalQuestions gracefully', function () {
      var _render17 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
          totalQuestions: 0,
          correctAnswers: 0
        }))),
        getByText = _render17.getByText;
      expect(getByText('0%')).toBeTruthy();
      expect(getByText('0/0')).toBeTruthy();
    });
    it('handles missing onRetry and onContinue props gracefully', function () {
      var propsWithoutCallbacks = Object.assign({}, defaultProps, {
        onRetry: undefined,
        onContinue: undefined
      });
      var _render18 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, propsWithoutCallbacks))),
        getByText = _render18.getByText;
      expect(function () {
        _reactNative.fireEvent.press(getByText('Réessayer'));
        _reactNative.fireEvent.press(getByText('Continuer'));
      }).not.toThrow();
    });
    it('handles empty feedback prop correctly', function () {
      var _render19 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
          feedback: null
        }))),
        queryByText = _render19.queryByText;
      expect(queryByText('Conseils pour progresser')).toBeNull();
    });
  });
  describe('Performance Data Edge Cases', function () {
    it('handles fractional percentages correctly', function () {
      var _render20 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
          correctAnswers: 1,
          totalQuestions: 3
        }))),
        getByText = _render20.getByText;
      expect(getByText('33%')).toBeTruthy();
      expect(getByText('1/3')).toBeTruthy();
    });
    it('displays all performance tiers correctly', function () {
      var testCases = [{
        score: 9,
        total: 10,
        expected: 'Excellent!'
      }, {
        score: 7,
        total: 10,
        expected: 'Bien joué!'
      }, {
        score: 5,
        total: 10,
        expected: 'Pas mal!'
      }, {
        score: 2,
        total: 10,
        expected: 'Continuez vos efforts'
      }];
      testCases.forEach(function (_ref4) {
        var score = _ref4.score,
          total = _ref4.total,
          expected = _ref4.expected;
        var _render21 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
            correctAnswers: score,
            totalQuestions: total
          }))),
          getByText = _render21.getByText,
          unmount = _render21.unmount;
        expect(getByText(expected)).toBeTruthy();
        unmount();
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,