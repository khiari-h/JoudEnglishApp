{"version":3,"names":["_react","require","_asyncStorage","_interopRequireDefault","_assessmentDataHelper","useAssessment","level","arguments","length","undefined","handleStorageError","error","operation","fallback","console","warn","STORAGE_KEY","ANSWERS_KEY","RESULTS_KEY","_useState","useState","_useState2","_slicedToArray2","default","sections","setSections","_useState3","_useState4","currentSection","setCurrentSection","_useState5","_useState6","currentQuestionIndex","setCurrentQuestionIndex","_useState7","_useState8","selectedAnswer","setSelectedAnswer","_useState9","_useState0","showFeedback","setShowFeedback","_useState1","_useState10","testCompleted","setTestCompleted","_useState11","_useState12","userAnswers","setUserAnswers","_useState13","_useState14","assessmentResults","setAssessmentResults","_useState15","_useState16","lastPosition","setLastPosition","_useState17","_useState18","loaded","setLoaded","_useState19","_useState20","assessmentData","setAssessmentData","isInitialized","useRef","useEffect","loadData","_ref","_asyncToGenerator2","data","getAssessmentData","Object","keys","savedPosition","AsyncStorage","getItem","position","JSON","parse","positionError","savedAnswers","answers","answersError","savedResults","results","completedAt","resultsError","apply","saveData","useCallback","dataToSave","sectionIndex","indexOf","questionIndex","timestamp","Date","now","setItem","stringify","current","changeSection","sectionKey","includes","changeQuestion","totalQuestionsInSection","handleSelectAnswer","answerIndex","validateAnswer","isCorrect","currentQuestion","correctAnswer","prev","assign","_defineProperty2","tryAgain","handleNext","currentSectionIndex","isLastSection","isLastQuestion","completed","nextSectionIndex","handlePrevious","_prevSectionData$ques","prevSection","prevSectionData","lastQuestionIndex","questions","saveAssessmentResults","_ref3","resultsWithTimestamp","_x","resetAssessment","multiRemove","getStats","totalQuestions","reduce","sum","_assessmentData$secti","correctAnswers","answeredQuestions","values","forEach","section","answer","answeredInCurrentSection","totalSections","percentage","getDisplayData","sectionTitle","currentSectionData","title","questionNumber","canGoToPrevious","isLastQuestionInSection","stats","display","_default","exports"],"sources":["useAssessment.js"],"sourcesContent":["// src/screens/exercises/level-assessment/hooks/useAssessment.js - VERSION CORRIG√âE\r\n\r\nimport { useState, useEffect, useRef, useCallback } from 'react';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { getAssessmentData } from '../../../utils/assessment/assessmentDataHelper';\r\n\r\n/**\r\n * üéØ Hook unifi√© pour Level Assessment\r\n * Remplace useAssessmentState + useAssessmentProgress\r\n * Simple, efficace, maintenable - pattern identique √† useVocabulary\r\n */\r\nconst useAssessment = (level = \"A1\") => {\r\n  \r\n  // =================== ERROR HANDLING HELPER ===================\r\n  const handleStorageError = (error, operation, fallback = null) => {\r\n    console.warn(`Assessment storage error in ${operation}:`, error);\r\n    return fallback;\r\n  };\r\n\r\n  // =================== STORAGE KEYS ===================\r\n  const STORAGE_KEY = `assessment_${level}_position`;\r\n  const ANSWERS_KEY = `assessment_${level}_answers`;\r\n  const RESULTS_KEY = `assessment_${level}_results`;\r\n\r\n  // =================== STATE ===================\r\n  const [sections, setSections] = useState([]);\r\n  const [currentSection, setCurrentSection] = useState(null);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n  const [showFeedback, setShowFeedback] = useState(false);\r\n  const [testCompleted, setTestCompleted] = useState(false);\r\n  const [userAnswers, setUserAnswers] = useState({});\r\n  const [assessmentResults, setAssessmentResults] = useState({});\r\n  const [lastPosition, setLastPosition] = useState(null);\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [assessmentData, setAssessmentData] = useState({});\r\n\r\n  const isInitialized = useRef(false);\r\n\r\n  // =================== DATA LOADING ===================\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      try {\r\n        // Charger donn√©es d'√©valuation\r\n        const data = getAssessmentData(level);\r\n        setAssessmentData(data);\r\n        setSections(Object.keys(data));\r\n\r\n        // Charger position sauvegard√©e\r\n        try {\r\n          const savedPosition = await AsyncStorage.getItem(STORAGE_KEY);\r\n          if (savedPosition) {\r\n            const position = JSON.parse(savedPosition);\r\n            setLastPosition(position);\r\n          }\r\n        } catch (positionError) {\r\n          handleStorageError(positionError, 'load position');\r\n        }\r\n\r\n        // Charger r√©ponses sauvegard√©es\r\n        try {\r\n          const savedAnswers = await AsyncStorage.getItem(ANSWERS_KEY);\r\n          if (savedAnswers) {\r\n            const answers = JSON.parse(savedAnswers);\r\n            setUserAnswers(answers);\r\n          }\r\n        } catch (answersError) {\r\n          handleStorageError(answersError, 'load answers');\r\n        }\r\n\r\n        // Charger r√©sultats sauvegard√©s\r\n        try {\r\n          const savedResults = await AsyncStorage.getItem(RESULTS_KEY);\r\n          if (savedResults) {\r\n            const results = JSON.parse(savedResults);\r\n            setAssessmentResults(results);\r\n            if (results.completedAt) {\r\n              setTestCompleted(true);\r\n            }\r\n          }\r\n        } catch (resultsError) {\r\n          handleStorageError(resultsError, 'load results');\r\n        }\r\n      } catch (error) {\r\n        // ‚úÖ Gestion d'erreur appropri√©e\r\n        console.error('Error loading assessment data:', error);\r\n      } finally {\r\n        setLoaded(true);\r\n      }\r\n    };\r\n    loadData();\r\n  }, [level]);\r\n\r\n  // Save data to storage\r\n  const saveData = useCallback(async () => {\r\n    try {\r\n      // Sauvegarder position\r\n      const dataToSave = {\r\n        sectionIndex: sections.indexOf(currentSection),\r\n        questionIndex: currentQuestionIndex,\r\n        timestamp: Date.now()\r\n      };\r\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(dataToSave));\r\n\r\n      // Sauvegarder r√©ponses\r\n      await AsyncStorage.setItem(ANSWERS_KEY, JSON.stringify(userAnswers));\r\n    } catch (error) {\r\n      // ‚úÖ Gestion d'erreur appropri√©e\r\n      handleStorageError(error, 'saveData');\r\n      // Fallback: continuer sans sauvegarde\r\n    }\r\n  }, [currentSection, currentQuestionIndex, userAnswers, sections, STORAGE_KEY, ANSWERS_KEY]);\r\n\r\n  // Auto-save when data changes\r\n  useEffect(() => {\r\n    if (loaded && currentSection) saveData();\r\n  }, [saveData, loaded, currentSection]);\r\n\r\n  // Initialize first section\r\n  useEffect(() => {\r\n    if (loaded && !currentSection && sections.length > 0 && !isInitialized.current) {\r\n      // Restaurer position ou commencer au d√©but\r\n      if (lastPosition && sections[lastPosition.sectionIndex]) {\r\n        setCurrentSection(sections[lastPosition.sectionIndex]);\r\n        setCurrentQuestionIndex(lastPosition.questionIndex);\r\n      } else {\r\n        setCurrentSection(sections[0]);\r\n        setCurrentQuestionIndex(0);\r\n      }\r\n      isInitialized.current = true;\r\n    }\r\n  }, [loaded, currentSection, sections, lastPosition]);\r\n\r\n  // =================== NAVIGATION ACTIONS ===================\r\n  const changeSection = useCallback((sectionKey) => {\r\n    if (sections.includes(sectionKey)) {\r\n      setCurrentSection(sectionKey);\r\n      setCurrentQuestionIndex(0);\r\n      setSelectedAnswer(null);\r\n      setShowFeedback(false);\r\n    }\r\n  }, [sections]);\r\n\r\n  const changeQuestion = useCallback((questionIndex) => {\r\n    if (questionIndex >= 0 && questionIndex < totalQuestionsInSection) {\r\n      setCurrentQuestionIndex(questionIndex);\r\n      setSelectedAnswer(null);\r\n      setShowFeedback(false);\r\n    }\r\n  }, [totalQuestionsInSection]);\r\n\r\n  const handleSelectAnswer = useCallback((answerIndex) => {\r\n    if (!showFeedback) {\r\n      setSelectedAnswer(answerIndex);\r\n    }\r\n  }, [showFeedback]);\r\n\r\n  const validateAnswer = useCallback(() => {\r\n    if (selectedAnswer !== null && !showFeedback) {\r\n      setShowFeedback(true);\r\n      \r\n      // Sauvegarder la r√©ponse\r\n      const isCorrect = selectedAnswer === currentQuestion.correctAnswer;\r\n      setUserAnswers(prev => ({\r\n        ...prev,\r\n        [currentSection]: {\r\n          ...prev[currentSection],\r\n          [currentQuestionIndex]: {\r\n            selectedAnswer,\r\n            isCorrect,\r\n            timestamp: Date.now()\r\n          }\r\n        }\r\n      }));\r\n    }\r\n  }, [selectedAnswer, showFeedback, currentQuestion, currentSection, currentQuestionIndex]);\r\n\r\n  const tryAgain = useCallback(() => {\r\n    setSelectedAnswer(null);\r\n    setShowFeedback(false);\r\n  }, []);\r\n\r\n  // =================== MAIN NAVIGATION ===================\r\n  const handleNext = useCallback(() => {\r\n    // V√©rifier si fin de l'√©valuation\r\n    const currentSectionIndex = sections.indexOf(currentSection);\r\n    const isLastSection = currentSectionIndex === sections.length - 1;\r\n    const isLastQuestion = currentQuestionIndex === totalQuestionsInSection - 1;\r\n\r\n    if (isLastSection && isLastQuestion) {\r\n      // Calculer et sauvegarder r√©sultats finaux\r\n      setTestCompleted(true);\r\n      return { completed: true };\r\n    }\r\n\r\n    // Navigation normale\r\n    if (currentQuestionIndex < totalQuestionsInSection - 1) {\r\n      // Question suivante dans la section\r\n      setCurrentQuestionIndex(prev => prev + 1);\r\n    } else {\r\n      // Section suivante\r\n      const nextSectionIndex = currentSectionIndex + 1;\r\n      if (nextSectionIndex < sections.length) {\r\n        setCurrentSection(sections[nextSectionIndex]);\r\n        setCurrentQuestionIndex(0);\r\n      }\r\n    }\r\n    \r\n    setSelectedAnswer(null);\r\n    setShowFeedback(false);\r\n    return { completed: false };\r\n  }, [sections, currentSection, currentQuestionIndex, totalQuestionsInSection]);\r\n\r\n  const handlePrevious = useCallback(() => {\r\n    if (currentQuestionIndex > 0) {\r\n      // Question pr√©c√©dente dans la section\r\n      setCurrentQuestionIndex(prev => prev - 1);\r\n    } else {\r\n      // Section pr√©c√©dente\r\n      const currentSectionIndex = sections.indexOf(currentSection);\r\n      if (currentSectionIndex > 0) {\r\n        const prevSection = sections[currentSectionIndex - 1];\r\n        const prevSectionData = assessmentData[prevSection];\r\n        const lastQuestionIndex = (prevSectionData.questions?.length || 1) - 1;\r\n        \r\n        setCurrentSection(prevSection);\r\n        setCurrentQuestionIndex(lastQuestionIndex);\r\n      }\r\n    }\r\n    \r\n    setSelectedAnswer(null);\r\n    setShowFeedback(false);\r\n  }, [currentQuestionIndex, sections, currentSection, assessmentData]);\r\n\r\n  // =================== COMPLETION LOGIC ===================\r\n  const saveAssessmentResults = useCallback(async (results) => {\r\n    try {\r\n      const resultsWithTimestamp = {\r\n        ...results,\r\n        timestamp: Date.now(),\r\n      };\r\n      setAssessmentResults(resultsWithTimestamp);\r\n      await AsyncStorage.setItem(RESULTS_KEY, JSON.stringify(resultsWithTimestamp));\r\n    } catch (error) {\r\n      // ‚úÖ Gestion d'erreur appropri√©e\r\n      handleStorageError(error, 'saveAssessmentResults');\r\n      // Fallback: garder les r√©sultats en m√©moire m√™me si la sauvegarde √©choue\r\n    }\r\n  }, [RESULTS_KEY]);\r\n\r\n  const resetAssessment = useCallback(async () => {\r\n    try {\r\n      await AsyncStorage.multiRemove([STORAGE_KEY, RESULTS_KEY, ANSWERS_KEY]);\r\n      setCurrentSection(sections[0]);\r\n      setCurrentQuestionIndex(0);\r\n      setSelectedAnswer(null);\r\n      setShowFeedback(false);\r\n      setTestCompleted(false);\r\n      setUserAnswers({});\r\n      setAssessmentResults({});\r\n      setLastPosition({ sectionIndex: 0, questionIndex: 0 });\r\n    } catch (error) {\r\n      // ‚úÖ Gestion d'erreur appropri√©e\r\n      handleStorageError(error, 'resetAssessment');\r\n      // Fallback: r√©initialiser l'√©tat local m√™me si la suppression √©choue\r\n      setCurrentSection(sections[0]);\r\n      setCurrentQuestionIndex(0);\r\n      setSelectedAnswer(null);\r\n      setShowFeedback(false);\r\n      setTestCompleted(false);\r\n      setUserAnswers({});\r\n      setAssessmentResults({});\r\n      setLastPosition({ sectionIndex: 0, questionIndex: 0 });\r\n    }\r\n  }, [STORAGE_KEY, RESULTS_KEY, ANSWERS_KEY, sections]);\r\n\r\n  // =================== COMPUTED STATS ===================\r\n  const getStats = useCallback(() => {\r\n    const totalQuestions = sections.reduce((sum, sectionKey) => {\r\n      return sum + (assessmentData[sectionKey]?.questions?.length || 0);\r\n    }, 0);\r\n\r\n    let correctAnswers = 0;\r\n    let answeredQuestions = 0;\r\n\r\n    Object.values(userAnswers).forEach(section => {\r\n      Object.values(section).forEach(answer => {\r\n        answeredQuestions++;\r\n        if (answer.isCorrect) {\r\n          correctAnswers++;\r\n        }\r\n      });\r\n    });\r\n\r\n    const currentSectionIndex = sections.indexOf(currentSection) + 1;\r\n    const answeredInCurrentSection = Object.keys(userAnswers[currentSection] || {}).length;\r\n\r\n    return {\r\n      totalQuestions,\r\n      answeredQuestions,\r\n      correctAnswers,\r\n      totalSections,\r\n      currentSectionIndex,\r\n      totalQuestionsInSection,\r\n      answeredInCurrentSection,\r\n      percentage: answeredQuestions > 0 ? (correctAnswers / answeredQuestions) * 100 : 0\r\n    };\r\n  }, [sections, assessmentData, userAnswers, currentSection, totalQuestionsInSection]);\r\n\r\n  // =================== COMPUTED DISPLAY ===================\r\n  const getDisplayData = useCallback(() => {\r\n    const currentSectionIndex = sections.indexOf(currentSection) + 1;\r\n    const sectionTitle = currentSectionData.title || `Section ${currentSectionIndex}`;\r\n    const questionNumber = currentQuestionIndex + 1;\r\n\r\n    return {\r\n      currentSectionIndex,\r\n      sectionTitle,\r\n      questionNumber,\r\n      currentQuestion,\r\n      currentSectionData\r\n    };\r\n  }, [sections, currentSection, currentSectionData, currentQuestionIndex, currentQuestion]);\r\n\r\n  // =================== VALIDATION ===================\r\n  const canGoToPrevious = useCallback(() => {\r\n    if (currentQuestionIndex > 0) return true;\r\n    return sections.indexOf(currentSection) > 0;\r\n  }, [currentQuestionIndex, sections, currentSection]);\r\n\r\n  const isLastQuestionInSection = currentQuestionIndex === totalQuestionsInSection - 1;\r\n  const isLastSection = sections.indexOf(currentSection) === sections.length - 1;\r\n\r\n  return {\r\n    // State\r\n    currentSection,\r\n    currentQuestionIndex,\r\n    selectedAnswer,\r\n    showFeedback,\r\n    testCompleted,\r\n    userAnswers,\r\n    assessmentResults,\r\n    loaded,\r\n    \r\n    // Data\r\n    currentQuestion,\r\n    currentSectionData,\r\n    totalSections,\r\n    totalQuestionsInSection,\r\n    \r\n    // Actions\r\n    changeSection,\r\n    changeQuestion,\r\n    handleSelectAnswer,\r\n    validateAnswer,\r\n    tryAgain,\r\n    handleNext,\r\n    handlePrevious,\r\n    saveAssessmentResults,\r\n    resetAssessment,\r\n    setTestCompleted,\r\n    \r\n    // Computed\r\n    canGoToPrevious: canGoToPrevious(),\r\n    isLastQuestionInSection,\r\n    isLastSection,\r\n    stats: getStats(),\r\n    display: getDisplayData(),\r\n  };\r\n};\r\n\r\nexport default useAssessment;"],"mappings":"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","ignoreList":[]}