92ba508339ee8c71c8bde7326c509d4e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _assessmentDataHelper = require("../../../utils/assessment/assessmentDataHelper");
var useAssessment = function useAssessment() {
  var level = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "A1";
  var handleStorageError = function handleStorageError(error, operation) {
    var fallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    console.warn(`Assessment storage error in ${operation}:`, error);
    return fallback;
  };
  var STORAGE_KEY = `assessment_${level}_position`;
  var ANSWERS_KEY = `assessment_${level}_answers`;
  var RESULTS_KEY = `assessment_${level}_results`;
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    sections = _useState2[0],
    setSections = _useState2[1];
  var _useState3 = (0, _react.useState)(null),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    currentSection = _useState4[0],
    setCurrentSection = _useState4[1];
  var _useState5 = (0, _react.useState)(0),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    currentQuestionIndex = _useState6[0],
    setCurrentQuestionIndex = _useState6[1];
  var _useState7 = (0, _react.useState)(null),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    selectedAnswer = _useState8[0],
    setSelectedAnswer = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    showFeedback = _useState0[0],
    setShowFeedback = _useState0[1];
  var _useState1 = (0, _react.useState)(false),
    _useState10 = (0, _slicedToArray2.default)(_useState1, 2),
    testCompleted = _useState10[0],
    setTestCompleted = _useState10[1];
  var _useState11 = (0, _react.useState)({}),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    userAnswers = _useState12[0],
    setUserAnswers = _useState12[1];
  var _useState13 = (0, _react.useState)({}),
    _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
    assessmentResults = _useState14[0],
    setAssessmentResults = _useState14[1];
  var _useState15 = (0, _react.useState)(null),
    _useState16 = (0, _slicedToArray2.default)(_useState15, 2),
    lastPosition = _useState16[0],
    setLastPosition = _useState16[1];
  var _useState17 = (0, _react.useState)(false),
    _useState18 = (0, _slicedToArray2.default)(_useState17, 2),
    loaded = _useState18[0],
    setLoaded = _useState18[1];
  var _useState19 = (0, _react.useState)({}),
    _useState20 = (0, _slicedToArray2.default)(_useState19, 2),
    assessmentData = _useState20[0],
    setAssessmentData = _useState20[1];
  var isInitialized = (0, _react.useRef)(false);
  (0, _react.useEffect)(function () {
    var loadData = function () {
      var _ref = (0, _asyncToGenerator2.default)(function* () {
        try {
          var data = (0, _assessmentDataHelper.getAssessmentData)(level);
          setAssessmentData(data);
          setSections(Object.keys(data));
          try {
            var savedPosition = yield _asyncStorage.default.getItem(STORAGE_KEY);
            if (savedPosition) {
              var position = JSON.parse(savedPosition);
              setLastPosition(position);
            }
          } catch (positionError) {
            handleStorageError(positionError, 'load position');
          }
          try {
            var savedAnswers = yield _asyncStorage.default.getItem(ANSWERS_KEY);
            if (savedAnswers) {
              var answers = JSON.parse(savedAnswers);
              setUserAnswers(answers);
            }
          } catch (answersError) {
            handleStorageError(answersError, 'load answers');
          }
          try {
            var savedResults = yield _asyncStorage.default.getItem(RESULTS_KEY);
            if (savedResults) {
              var results = JSON.parse(savedResults);
              setAssessmentResults(results);
              if (results.completedAt) {
                setTestCompleted(true);
              }
            }
          } catch (resultsError) {
            handleStorageError(resultsError, 'load results');
          }
        } catch (error) {
          console.error('Error loading assessment data:', error);
        } finally {
          setLoaded(true);
        }
      });
      return function loadData() {
        return _ref.apply(this, arguments);
      };
    }();
    loadData();
  }, [level]);
  var saveData = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      var dataToSave = {
        sectionIndex: sections.indexOf(currentSection),
        questionIndex: currentQuestionIndex,
        timestamp: Date.now()
      };
      yield _asyncStorage.default.setItem(STORAGE_KEY, JSON.stringify(dataToSave));
      yield _asyncStorage.default.setItem(ANSWERS_KEY, JSON.stringify(userAnswers));
    } catch (error) {
      handleStorageError(error, 'saveData');
    }
  }), [currentSection, currentQuestionIndex, userAnswers, sections, STORAGE_KEY, ANSWERS_KEY]);
  (0, _react.useEffect)(function () {
    if (loaded && currentSection) saveData();
  }, [saveData, loaded, currentSection]);
  (0, _react.useEffect)(function () {
    if (loaded && !currentSection && sections.length > 0 && !isInitialized.current) {
      if (lastPosition && sections[lastPosition.sectionIndex]) {
        setCurrentSection(sections[lastPosition.sectionIndex]);
        setCurrentQuestionIndex(lastPosition.questionIndex);
      } else {
        setCurrentSection(sections[0]);
        setCurrentQuestionIndex(0);
      }
      isInitialized.current = true;
    }
  }, [loaded, currentSection, sections, lastPosition]);
  var changeSection = (0, _react.useCallback)(function (sectionKey) {
    if (sections.includes(sectionKey)) {
      setCurrentSection(sectionKey);
      setCurrentQuestionIndex(0);
      setSelectedAnswer(null);
      setShowFeedback(false);
    }
  }, [sections]);
  var changeQuestion = (0, _react.useCallback)(function (questionIndex) {
    if (questionIndex >= 0 && questionIndex < totalQuestionsInSection) {
      setCurrentQuestionIndex(questionIndex);
      setSelectedAnswer(null);
      setShowFeedback(false);
    }
  }, [totalQuestionsInSection]);
  var handleSelectAnswer = (0, _react.useCallback)(function (answerIndex) {
    if (!showFeedback) {
      setSelectedAnswer(answerIndex);
    }
  }, [showFeedback]);
  var validateAnswer = (0, _react.useCallback)(function () {
    if (selectedAnswer !== null && !showFeedback) {
      setShowFeedback(true);
      var isCorrect = selectedAnswer === currentQuestion.correctAnswer;
      setUserAnswers(function (prev) {
        return Object.assign({}, prev, (0, _defineProperty2.default)({}, currentSection, Object.assign({}, prev[currentSection], (0, _defineProperty2.default)({}, currentQuestionIndex, {
          selectedAnswer: selectedAnswer,
          isCorrect: isCorrect,
          timestamp: Date.now()
        }))));
      });
    }
  }, [selectedAnswer, showFeedback, currentQuestion, currentSection, currentQuestionIndex]);
  var tryAgain = (0, _react.useCallback)(function () {
    setSelectedAnswer(null);
    setShowFeedback(false);
  }, []);
  var handleNext = (0, _react.useCallback)(function () {
    var currentSectionIndex = sections.indexOf(currentSection);
    var isLastSection = currentSectionIndex === sections.length - 1;
    var isLastQuestion = currentQuestionIndex === totalQuestionsInSection - 1;
    if (isLastSection && isLastQuestion) {
      setTestCompleted(true);
      return {
        completed: true
      };
    }
    if (currentQuestionIndex < totalQuestionsInSection - 1) {
      setCurrentQuestionIndex(function (prev) {
        return prev + 1;
      });
    } else {
      var nextSectionIndex = currentSectionIndex + 1;
      if (nextSectionIndex < sections.length) {
        setCurrentSection(sections[nextSectionIndex]);
        setCurrentQuestionIndex(0);
      }
    }
    setSelectedAnswer(null);
    setShowFeedback(false);
    return {
      completed: false
    };
  }, [sections, currentSection, currentQuestionIndex, totalQuestionsInSection]);
  var handlePrevious = (0, _react.useCallback)(function () {
    if (currentQuestionIndex > 0) {
      setCurrentQuestionIndex(function (prev) {
        return prev - 1;
      });
    } else {
      var currentSectionIndex = sections.indexOf(currentSection);
      if (currentSectionIndex > 0) {
        var _prevSectionData$ques;
        var prevSection = sections[currentSectionIndex - 1];
        var prevSectionData = assessmentData[prevSection];
        var lastQuestionIndex = (((_prevSectionData$ques = prevSectionData.questions) == null ? void 0 : _prevSectionData$ques.length) || 1) - 1;
        setCurrentSection(prevSection);
        setCurrentQuestionIndex(lastQuestionIndex);
      }
    }
    setSelectedAnswer(null);
    setShowFeedback(false);
  }, [currentQuestionIndex, sections, currentSection, assessmentData]);
  var saveAssessmentResults = (0, _react.useCallback)(function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (results) {
      try {
        var resultsWithTimestamp = Object.assign({}, results, {
          timestamp: Date.now()
        });
        setAssessmentResults(resultsWithTimestamp);
        yield _asyncStorage.default.setItem(RESULTS_KEY, JSON.stringify(resultsWithTimestamp));
      } catch (error) {
        handleStorageError(error, 'saveAssessmentResults');
      }
    });
    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }(), [RESULTS_KEY]);
  var resetAssessment = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      yield _asyncStorage.default.multiRemove([STORAGE_KEY, RESULTS_KEY, ANSWERS_KEY]);
      setCurrentSection(sections[0]);
      setCurrentQuestionIndex(0);
      setSelectedAnswer(null);
      setShowFeedback(false);
      setTestCompleted(false);
      setUserAnswers({});
      setAssessmentResults({});
      setLastPosition({
        sectionIndex: 0,
        questionIndex: 0
      });
    } catch (error) {
      handleStorageError(error, 'resetAssessment');
      setCurrentSection(sections[0]);
      setCurrentQuestionIndex(0);
      setSelectedAnswer(null);
      setShowFeedback(false);
      setTestCompleted(false);
      setUserAnswers({});
      setAssessmentResults({});
      setLastPosition({
        sectionIndex: 0,
        questionIndex: 0
      });
    }
  }), [STORAGE_KEY, RESULTS_KEY, ANSWERS_KEY, sections]);
  var getStats = (0, _react.useCallback)(function () {
    var totalQuestions = sections.reduce(function (sum, sectionKey) {
      var _assessmentData$secti;
      return sum + (((_assessmentData$secti = assessmentData[sectionKey]) == null || (_assessmentData$secti = _assessmentData$secti.questions) == null ? void 0 : _assessmentData$secti.length) || 0);
    }, 0);
    var correctAnswers = 0;
    var answeredQuestions = 0;
    Object.values(userAnswers).forEach(function (section) {
      Object.values(section).forEach(function (answer) {
        answeredQuestions++;
        if (answer.isCorrect) {
          correctAnswers++;
        }
      });
    });
    var currentSectionIndex = sections.indexOf(currentSection) + 1;
    var answeredInCurrentSection = Object.keys(userAnswers[currentSection] || {}).length;
    return {
      totalQuestions: totalQuestions,
      answeredQuestions: answeredQuestions,
      correctAnswers: correctAnswers,
      totalSections: totalSections,
      currentSectionIndex: currentSectionIndex,
      totalQuestionsInSection: totalQuestionsInSection,
      answeredInCurrentSection: answeredInCurrentSection,
      percentage: answeredQuestions > 0 ? correctAnswers / answeredQuestions * 100 : 0
    };
  }, [sections, assessmentData, userAnswers, currentSection, totalQuestionsInSection]);
  var getDisplayData = (0, _react.useCallback)(function () {
    var currentSectionIndex = sections.indexOf(currentSection) + 1;
    var sectionTitle = currentSectionData.title || `Section ${currentSectionIndex}`;
    var questionNumber = currentQuestionIndex + 1;
    return {
      currentSectionIndex: currentSectionIndex,
      sectionTitle: sectionTitle,
      questionNumber: questionNumber,
      currentQuestion: currentQuestion,
      currentSectionData: currentSectionData
    };
  }, [sections, currentSection, currentSectionData, currentQuestionIndex, currentQuestion]);
  var canGoToPrevious = (0, _react.useCallback)(function () {
    if (currentQuestionIndex > 0) return true;
    return sections.indexOf(currentSection) > 0;
  }, [currentQuestionIndex, sections, currentSection]);
  var isLastQuestionInSection = currentQuestionIndex === totalQuestionsInSection - 1;
  var isLastSection = sections.indexOf(currentSection) === sections.length - 1;
  return {
    currentSection: currentSection,
    currentQuestionIndex: currentQuestionIndex,
    selectedAnswer: selectedAnswer,
    showFeedback: showFeedback,
    testCompleted: testCompleted,
    userAnswers: userAnswers,
    assessmentResults: assessmentResults,
    loaded: loaded,
    currentQuestion: currentQuestion,
    currentSectionData: currentSectionData,
    totalSections: totalSections,
    totalQuestionsInSection: totalQuestionsInSection,
    changeSection: changeSection,
    changeQuestion: changeQuestion,
    handleSelectAnswer: handleSelectAnswer,
    validateAnswer: validateAnswer,
    tryAgain: tryAgain,
    handleNext: handleNext,
    handlePrevious: handlePrevious,
    saveAssessmentResults: saveAssessmentResults,
    resetAssessment: resetAssessment,
    setTestCompleted: setTestCompleted,
    canGoToPrevious: canGoToPrevious(),
    isLastQuestionInSection: isLastQuestionInSection,
    isLastSection: isLastSection,
    stats: getStats(),
    display: getDisplayData()
  };
};
var _default = exports.default = useAssessment;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,