3fbac3b30f8e8f9ac2ba36fef5f51eb2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _Card = _interopRequireDefault(require("../Card"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var ContentSection = function ContentSection(_ref) {
  var _ref$title = _ref.title,
    title = _ref$title === void 0 ? "Content" : _ref$title,
    content = _ref.content,
    _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? "#5E60CE" : _ref$levelColor,
    backgroundColor = _ref.backgroundColor,
    _ref$isItalic = _ref.isItalic,
    isItalic = _ref$isItalic === void 0 ? false : _ref$isItalic,
    _ref$showIcon = _ref.showIcon,
    showIcon = _ref$showIcon === void 0 ? true : _ref$showIcon,
    _ref$containerStyle = _ref.containerStyle,
    containerStyle = _ref$containerStyle === void 0 ? {} : _ref$containerStyle,
    children = _ref.children;
  var styles = (0, _style.default)(levelColor, backgroundColor);
  if (!content && !children) return null;
  return (0, _jsxRuntime.jsxs)(_Card.default, {
    withShadow: true,
    borderRadius: 18,
    style: [styles.card, containerStyle],
    contentStyle: styles.cardContent,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.header,
      children: [showIcon && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.iconDot, {
          backgroundColor: levelColor
        }]
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.title,
        children: title
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.decorativeLine
      })]
    }), content ? (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [styles.contentText, isItalic && styles.italicText],
      children: content
    }) : null, children]
  });
};
var _default = exports.default = ContentSection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX0NhcmQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3N0eWxlIiwiX2pzeFJ1bnRpbWUiLCJDb250ZW50U2VjdGlvbiIsIl9yZWYiLCJfcmVmJHRpdGxlIiwidGl0bGUiLCJjb250ZW50IiwiX3JlZiRsZXZlbENvbG9yIiwibGV2ZWxDb2xvciIsImJhY2tncm91bmRDb2xvciIsIl9yZWYkaXNJdGFsaWMiLCJpc0l0YWxpYyIsIl9yZWYkc2hvd0ljb24iLCJzaG93SWNvbiIsIl9yZWYkY29udGFpbmVyU3R5bGUiLCJjb250YWluZXJTdHlsZSIsImNoaWxkcmVuIiwic3R5bGVzIiwiY3JlYXRlU3R5bGVzIiwianN4cyIsImRlZmF1bHQiLCJ3aXRoU2hhZG93IiwiYm9yZGVyUmFkaXVzIiwic3R5bGUiLCJjYXJkIiwiY29udGVudFN0eWxlIiwiY2FyZENvbnRlbnQiLCJWaWV3IiwiaGVhZGVyIiwianN4IiwiaWNvbkRvdCIsIlRleHQiLCJkZWNvcmF0aXZlTGluZSIsImNvbnRlbnRUZXh0IiwiaXRhbGljVGV4dCIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9jb21wb25lbnRzL3VpL0NvbnRlbnRTZWN0aW9uL2luZGV4LmpzXHJcbmltcG9ydCB7IFZpZXcsIFRleHQgfSBmcm9tIFwicmVhY3QtbmF0aXZlXCI7XHJcbmltcG9ydCBDYXJkIGZyb20gXCIuLi9DYXJkXCI7XHJcbmltcG9ydCBjcmVhdGVTdHlsZXMgZnJvbSBcIi4vc3R5bGVcIjtcclxuXHJcbi8qKlxyXG4gKiDwn5OdIENvbnRlbnRTZWN0aW9uIC0gQ29tcG9zYW50IGfDqW7DqXJpcXVlIHBvdXIgc2VjdGlvbnMgZGUgY29udGVudVxyXG4gKiBVc2FnZSA6IEV4YW1wbGVzLCBDb250ZXh0LCBSdWxlcywgRXhwbGFuYXRpb25zLCBldGMuXHJcbiAqIFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdGl0bGUgLSBUaXRyZSBkZSBsYSBzZWN0aW9uIChleDogXCJFeGFtcGxlXCIsIFwiQ29udGV4dFwiLCBcIlJ1bGVcIilcclxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgLSBDb250ZW51IHByaW5jaXBhbCBkZSBsYSBzZWN0aW9uXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBsZXZlbENvbG9yIC0gQ291bGV1ciBkdSBuaXZlYXVcclxuICogQHBhcmFtIHtzdHJpbmd9IGJhY2tncm91bmRDb2xvciAtIENvdWxldXIgZGUgZm9uZCAob3B0aW9ubmVsKVxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzSXRhbGljIC0gTWV0dHJlIGxlIGNvbnRlbnUgZW4gaXRhbGlxdWVcclxuICogQHBhcmFtIHtib29sZWFufSBzaG93SWNvbiAtIEFmZmljaGVyIGwnaWPDtG5lL2RvdCBjb2xvcsOpXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb250YWluZXJTdHlsZSAtIFN0eWxlIHBlcnNvbm5hbGlzw6kgcG91ciBsZSBjb250YWluZXJcclxuICovXHJcbmNvbnN0IENvbnRlbnRTZWN0aW9uID0gKHtcclxuICB0aXRsZSA9IFwiQ29udGVudFwiLFxyXG4gIGNvbnRlbnQsXHJcbiAgbGV2ZWxDb2xvciA9IFwiIzVFNjBDRVwiLFxyXG4gIGJhY2tncm91bmRDb2xvcixcclxuICBpc0l0YWxpYyA9IGZhbHNlLFxyXG4gIHNob3dJY29uID0gdHJ1ZSxcclxuICBjb250YWluZXJTdHlsZSA9IHt9LFxyXG4gIGNoaWxkcmVuLFxyXG59KSA9PiB7XHJcbiAgY29uc3Qgc3R5bGVzID0gY3JlYXRlU3R5bGVzKGxldmVsQ29sb3IsIGJhY2tncm91bmRDb2xvcik7XHJcblxyXG4gIC8vIE5lIHBhcyByZW5kcmUgc2kgcGFzIGRlIGNvbnRlbnUgZXQgcGFzIGQnZW5mYW50c1xyXG4gIGlmICghY29udGVudCAmJiAhY2hpbGRyZW4pIHJldHVybiBudWxsO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPENhcmRcclxuICAgICAgd2l0aFNoYWRvd1xyXG4gICAgICBib3JkZXJSYWRpdXM9ezE4fVxyXG4gICAgICBzdHlsZT17W3N0eWxlcy5jYXJkLCBjb250YWluZXJTdHlsZV19XHJcbiAgICAgIGNvbnRlbnRTdHlsZT17c3R5bGVzLmNhcmRDb250ZW50fVxyXG4gICAgPlxyXG4gICAgICB7LyogSGVhZGVyIGF2ZWMgdGl0cmUgZXQgbGlnbmUgZMOpY29yYXRpdmUgKi99XHJcbiAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuaGVhZGVyfT5cclxuICAgICAgICB7c2hvd0ljb24gJiYgKFxyXG4gICAgICAgICAgPFZpZXcgc3R5bGU9e1tzdHlsZXMuaWNvbkRvdCwgeyBiYWNrZ3JvdW5kQ29sb3I6IGxldmVsQ29sb3IgfV19IC8+XHJcbiAgICAgICAgKX1cclxuICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLnRpdGxlfT57dGl0bGV9PC9UZXh0PlxyXG4gICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuZGVjb3JhdGl2ZUxpbmV9IC8+XHJcbiAgICAgIDwvVmlldz5cclxuICAgICAgXHJcbiAgICAgIHsvKiBDb250ZW51ICovfVxyXG4gICAgICB7Y29udGVudCA/IChcclxuICAgICAgICA8VGV4dCBzdHlsZT17W3N0eWxlcy5jb250ZW50VGV4dCwgaXNJdGFsaWMgJiYgc3R5bGVzLml0YWxpY1RleHRdfT5cclxuICAgICAgICAgIHtjb250ZW50fVxyXG4gICAgICAgIDwvVGV4dD5cclxuICAgICAgKSA6IG51bGx9XHJcbiAgICAgIHtjaGlsZHJlbn1cclxuICAgIDwvQ2FyZD5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29udGVudFNlY3Rpb247Il0sIm1hcHBpbmdzIjoiOzs7OztBQUNBLElBQUFBLFlBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLEtBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFHLE1BQUEsR0FBQUQsc0JBQUEsQ0FBQUYsT0FBQTtBQUFtQyxJQUFBSSxXQUFB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