8b509d662ae16a56705831f40ecdfb77
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _expoLinearGradient = require("expo-linear-gradient");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var HeroCard = function HeroCard(_ref) {
  var content = _ref.content,
    _ref$fontSize = _ref.fontSize,
    fontSize = _ref$fontSize === void 0 ? 32 : _ref$fontSize,
    _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? "#5E60CE" : _ref$levelColor,
    lineHeight = _ref.lineHeight,
    _ref$textAlign = _ref.textAlign,
    textAlign = _ref$textAlign === void 0 ? "center" : _ref$textAlign,
    _ref$showUnderline = _ref.showUnderline,
    showUnderline = _ref$showUnderline === void 0 ? true : _ref$showUnderline,
    _ref$containerStyle = _ref.containerStyle,
    containerStyle = _ref$containerStyle === void 0 ? {} : _ref$containerStyle,
    children = _ref.children;
  var styles = (0, _style.default)(levelColor);
  var calculatedLineHeight = lineHeight || Math.round(fontSize * 1.3);
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: [styles.heroSection, containerStyle],
    children: (0, _jsxRuntime.jsxs)(_expoLinearGradient.LinearGradient, {
      colors: ['white', `${levelColor}08`, `${levelColor}12`],
      start: {
        x: 0,
        y: 0
      },
      end: {
        x: 1,
        y: 1
      },
      style: styles.heroGradient,
      children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.decorativeCircle, styles.circle1, {
          backgroundColor: `${levelColor}15`
        }]
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.decorativeCircle, styles.circle2, {
          backgroundColor: `${levelColor}10`
        }]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.contentContainer,
        children: [content && typeof content === 'string' && content.trim() ? (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [styles.contentText, {
            color: levelColor,
            fontSize: fontSize,
            lineHeight: calculatedLineHeight,
            textAlign: textAlign
          }],
          children: content
        }) : null, children, showUnderline && (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [styles.underline, {
            backgroundColor: levelColor
          }]
        })]
      })]
    })
  });
};
HeroCard.propTypes = {
  content: _propTypes.default.string,
  fontSize: _propTypes.default.number,
  levelColor: _propTypes.default.string,
  lineHeight: _propTypes.default.number,
  textAlign: _propTypes.default.oneOf(['left', 'center', 'right', 'justify']),
  showUnderline: _propTypes.default.bool,
  containerStyle: _propTypes.default.object,
  children: _propTypes.default.node
};
HeroCard.defaultProps = {
  content: null,
  fontSize: 32,
  levelColor: "#5E60CE",
  lineHeight: null,
  textAlign: "center",
  showUnderline: true,
  containerStyle: {},
  children: null
};
var _default = exports.default = HeroCard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,