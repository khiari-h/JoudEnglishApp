b3729a3602b1c540cdb0d8aca8a2fcf4
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return require('@react-native-async-storage/async-storage/jest/async-storage-mock');
});
_getJestObj().mock('expo-font', function () {
  return {
    useFonts: function useFonts() {
      return [true];
    },
    isLoaded: function isLoaded() {
      return true;
    }
  };
});
_getJestObj().mock('expo-haptics', function () {
  return {
    impactAsync: jest.fn()
  };
});
_getJestObj().mock('react-native-reanimated', function () {
  var Reanimated = require('react-native-reanimated/mock');
  Reanimated.default.call = function () {};
  return Reanimated;
});
_getJestObj().mock('react-native/Libraries/Settings/Settings', function () {
  return {
    get: jest.fn(function () {
      return 'light';
    }),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn()
  };
});
_getJestObj().mock('react-native/Libraries/Animated/Animated', function () {
  return {
    Value: jest.fn().mockImplementation(function (val) {
      return {
        _value: val,
        setValue: jest.fn(),
        addListener: jest.fn(),
        removeListener: jest.fn(),
        removeAllListeners: jest.fn(),
        interpolate: jest.fn(function () {
          return {
            interpolate: jest.fn()
          };
        })
      };
    }),
    View: jest.fn(),
    timing: jest.fn(function () {
      return {
        start: function start(cb) {
          return cb && cb({
            finished: true
          });
        }
      };
    }),
    spring: jest.fn(function () {
      return {
        start: function start(cb) {
          return cb && cb({
            finished: true
          });
        }
      };
    }),
    decay: jest.fn(function () {
      return {
        start: function start(cb) {
          return cb && cb({
            finished: true
          });
        }
      };
    }),
    sequence: jest.fn(function () {
      return {
        start: function start(cb) {
          return cb && cb({
            finished: true
          });
        }
      };
    }),
    parallel: jest.fn(function () {
      return {
        start: function start(cb) {
          return cb && cb({
            finished: true
          });
        }
      };
    }),
    event: jest.fn()
  };
});
var _reactNative = require("react-native");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
_reactNative.NativeModules.SettingsManager = _reactNative.NativeModules.SettingsManager || {
  settings: {
    AppleLocale: 'en_US'
  }
};
if (typeof setImmediate === 'undefined') {
  global.setImmediate = function (fn) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return setTimeout.apply(void 0, [fn, 0].concat(args));
  };
}
if (typeof clearImmediate === 'undefined') {
  global.clearImmediate = function (id) {
    return clearTimeout(id);
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,