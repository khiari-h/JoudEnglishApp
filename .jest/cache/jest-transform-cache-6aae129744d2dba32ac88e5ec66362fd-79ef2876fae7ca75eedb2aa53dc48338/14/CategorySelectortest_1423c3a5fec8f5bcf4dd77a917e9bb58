3e8f6d639e9c65c80a3f2ce6128833b1
_getJestObj().mock('react-native/Libraries/Components/ScrollView/ScrollView', function () {
  var React = require('react');
  var scrollToSpy = jest.fn();
  var MockScrollView = React.forwardRef(function (props, ref) {
    React.useImperativeHandle(ref, function () {
      return {
        scrollTo: scrollToSpy
      };
    });
    var childrenWithLayouts = React.Children.map(props.children, function (child, index) {
      if (!child) return null;
      return React.cloneElement(child, {
        onLayout: function onLayout() {
          return child.props.onLayout == null ? void 0 : child.props.onLayout({
            nativeEvent: {
              layout: {
                x: index * 100,
                y: 0,
                width: 80,
                height: 40
              }
            }
          });
        }
      });
    });
    return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
      children: childrenWithLayouts
    });
  });
  MockScrollView.scrollToSpy = scrollToSpy;
  return MockScrollView;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
require("@testing-library/jest-native");
var _CategorySelector = _interopRequireDefault(require("../../../src/components/exercise-common/CategorySelector"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.useFakeTimers();
jest.spyOn(_reactNative2.Animated, 'timing').mockImplementation(function () {
  return {
    start: function start(callback) {
      setTimeout(function () {
        (0, _reactNative.act)(function () {
          return callback == null ? void 0 : callback({
            finished: true
          });
        });
      }, 500);
    },
    stop: jest.fn()
  };
});
describe('CategorySelector', function () {
  var mockCategories = [{
    id: '1',
    name: 'Fruits'
  }, {
    id: '2',
    name: 'Vegetables'
  }, {
    id: '3',
    name: 'Dairy Products'
  }, {
    id: '4',
    name: 'Meat & Fish'
  }, {
    id: '5',
    name: 'Beverages'
  }];
  var stableProps = {
    categories: mockCategories,
    selectedCategory: '1',
    onSelectCategory: jest.fn()
  };
  var renderSelector = function renderSelector() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, stableProps, props)));
  };
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
    _reactNative2.ScrollView.scrollToSpy.mockClear();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  it('renders correctly with categories', function () {
    var _renderSelector = renderSelector(),
      getByText = _renderSelector.getByText;
    mockCategories.forEach(function (cat) {
      return expect(getByText(cat.name)).toBeTruthy();
    });
  });
  it('highlights selected category', function () {
    var _renderSelector2 = renderSelector({
        selectedCategory: '2'
      }),
      getByRole = _renderSelector2.getByRole;
    expect(getByRole('button', {
      name: 'Vegetables'
    })).toHaveAccessibilityState({
      selected: true
    });
  });
  it('handles empty categories gracefully', function () {
    var _renderSelector3 = renderSelector({
        categories: []
      }),
      queryByText = _renderSelector3.queryByText;
    mockCategories.forEach(function (cat) {
      return expect(queryByText(cat.name)).toBeNull();
    });
  });
  it('calls onSelectCategory on different category press', function () {
    var onSelect = jest.fn();
    var _renderSelector4 = renderSelector({
        selectedCategory: '1',
        onSelectCategory: onSelect
      }),
      getByText = _renderSelector4.getByText;
    _reactNative.fireEvent.press(getByText('Vegetables'));
    expect(onSelect).toHaveBeenCalledWith('2');
  });
  it('does not call onSelectCategory when pressing same category', function () {
    var onSelect = jest.fn();
    var _renderSelector5 = renderSelector({
        selectedCategory: '1',
        onSelectCategory: onSelect
      }),
      getByText = _renderSelector5.getByText;
    _reactNative.fireEvent.press(getByText('Fruits'));
    expect(onSelect).not.toHaveBeenCalled();
  });
  it('triggers press animations safely', function () {
    var _renderSelector6 = renderSelector(),
      getByText = _renderSelector6.getByText;
    var pill = getByText('Vegetables');
    (0, _reactNative.act)(function () {
      (0, _reactNative.fireEvent)(pill, 'pressIn');
      (0, _reactNative.fireEvent)(pill, 'pressOut');
    });
    expect(pill).toBeTruthy();
  });
  it('prevents overlapping animations', function () {
    var onSelect = jest.fn();
    var _renderSelector7 = renderSelector({
        selectedCategory: '1',
        onSelectCategory: onSelect
      }),
      getByText = _renderSelector7.getByText;
    _reactNative.fireEvent.press(getByText('Vegetables'));
    (0, _reactNative.act)(function () {
      return jest.runAllTimers();
    });
    _reactNative.fireEvent.press(getByText('Dairy Products'));
    expect(onSelect).toHaveBeenCalledTimes(1);
  });
  it('scrolls to selected category on mount', (0, _asyncToGenerator2.default)(function* () {
    renderSelector({
      selectedCategory: '4'
    });
    (0, _reactNative.act)(function () {
      return jest.runAllTimers();
    });
    yield (0, _reactNative.waitFor)(function () {
      return expect(_reactNative2.ScrollView.scrollToSpy).toHaveBeenCalled();
    });
  }));
  it('scrolls when selectedCategory changes', (0, _asyncToGenerator2.default)(function* () {
    var _renderSelector8 = renderSelector({
        selectedCategory: '1'
      }),
      rerender = _renderSelector8.rerender;
    (0, _reactNative.act)(function () {
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, stableProps, {
        selectedCategory: "5"
      })));
      jest.runAllTimers();
    });
    yield (0, _reactNative.waitFor)(function () {
      return expect(_reactNative2.ScrollView.scrollToSpy).toHaveBeenCalledTimes(1);
    });
  }));
  it('handles undefined, null, or invalid selectedCategory', function () {
    [undefined, null, 'non-existent'].forEach(function (sel) {
      var _renderSelector9 = renderSelector({
          selectedCategory: sel
        }),
        getByText = _renderSelector9.getByText;
      mockCategories.forEach(function (cat) {
        return expect(getByText(cat.name)).toBeTruthy();
      });
    });
  });
  it('handles missing onSelectCategory prop', function () {
    var _renderSelector0 = renderSelector({
        onSelectCategory: undefined
      }),
      getByText = _renderSelector0.getByText;
    expect(function () {
      return _reactNative.fireEvent.press(getByText('Vegetables'));
    }).not.toThrow();
  });
  it('renders categories with special or long names', function () {
    var special = [{
      id: '1',
      name: 'Café & Thé'
    }, {
      id: '2',
      name: 'Fruits & Légumes'
    }, {
      id: '3',
      name: 'Viande/Poisson'
    }, {
      id: '4',
      name: 'This is a very long category name that might cause layout issues'
    }];
    var _renderSelector1 = renderSelector({
        categories: special
      }),
      getByText = _renderSelector1.getByText;
    special.forEach(function (cat) {
      return expect(getByText(cat.name)).toBeTruthy();
    });
  });
  it('handles large number of categories efficiently', function () {
    var many = Array.from({
      length: 100
    }, function (_, i) {
      return {
        id: `${i + 1}`,
        name: `Category ${i + 1}`
      };
    });
    var start = Date.now();
    var _renderSelector10 = renderSelector({
        categories: many
      }),
      queryAllByText = _renderSelector10.queryAllByText;
    var end = Date.now();
    expect(end - start).toBeLessThan(1000);
    expect(queryAllByText(/^Category/)).toHaveLength(100);
  });
  it('provides correct accessibility labels', function () {
    var _renderSelector11 = renderSelector(),
      getByLabelText = _renderSelector11.getByLabelText;
    mockCategories.forEach(function (cat) {
      return expect(getByLabelText(cat.name)).toBeTruthy();
    });
  });
  it('supports screen reader navigation', function () {
    var _renderSelector12 = renderSelector(),
      getAllByRole = _renderSelector12.getAllByRole;
    expect(getAllByRole('button')).toHaveLength(mockCategories.length);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,