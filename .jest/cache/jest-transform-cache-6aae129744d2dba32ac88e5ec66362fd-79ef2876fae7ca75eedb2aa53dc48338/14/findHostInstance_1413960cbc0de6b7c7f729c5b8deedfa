12bdd6e324facb1bd9e82f66afc5f7b0
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findHostInstance = findHostInstance;
var _errors = require("../errors");
var _PlatformChecker = require("../PlatformChecker");
function findHostInstanceFastPath(maybeNativeRef) {
  if (!maybeNativeRef) {
    return undefined;
  }
  if (maybeNativeRef.__internalInstanceHandle && maybeNativeRef.__nativeTag && maybeNativeRef._viewConfig) {
    return maybeNativeRef;
  }
  if (maybeNativeRef._nativeTag && maybeNativeRef.viewConfig) {
    return maybeNativeRef;
  }
  return undefined;
}
function resolveFindHostInstance_DEPRECATED() {
  if (findHostInstance_DEPRECATED !== undefined) {
    return;
  }
  if ((0, _PlatformChecker.isFabric)()) {
    try {
      var _ReactFabric$default$, _ReactFabric$default;
      var ReactFabric = require('react-native/Libraries/Renderer/shims/ReactFabric');
      findHostInstance_DEPRECATED = (_ReactFabric$default$ = ReactFabric == null || (_ReactFabric$default = ReactFabric.default) == null ? void 0 : _ReactFabric$default.findHostInstance_DEPRECATED) != null ? _ReactFabric$default$ : ReactFabric == null ? void 0 : ReactFabric.findHostInstance_DEPRECATED;
    } catch (e) {
      throw new _errors.ReanimatedError('Failed to resolve findHostInstance_DEPRECATED');
    }
  } else {
    var _ReactNative$default$, _ReactNative$default;
    var ReactNative = require('react-native/Libraries/Renderer/shims/ReactNative');
    findHostInstance_DEPRECATED = (_ReactNative$default$ = ReactNative == null || (_ReactNative$default = ReactNative.default) == null ? void 0 : _ReactNative$default.findHostInstance_DEPRECATED) != null ? _ReactNative$default$ : ReactNative == null ? void 0 : ReactNative.findHostInstance_DEPRECATED;
  }
}
var findHostInstance_DEPRECATED;
function findHostInstance(component) {
  var hostInstance = findHostInstanceFastPath(component._componentRef);
  if (hostInstance !== undefined) {
    return hostInstance;
  }
  resolveFindHostInstance_DEPRECATED();
  return findHostInstance_DEPRECATED((0, _PlatformChecker.isFabric)() ? component : component._componentRef);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImZpbmRIb3N0SW5zdGFuY2UiLCJfZXJyb3JzIiwicmVxdWlyZSIsIl9QbGF0Zm9ybUNoZWNrZXIiLCJmaW5kSG9zdEluc3RhbmNlRmFzdFBhdGgiLCJtYXliZU5hdGl2ZVJlZiIsInVuZGVmaW5lZCIsIl9faW50ZXJuYWxJbnN0YW5jZUhhbmRsZSIsIl9fbmF0aXZlVGFnIiwiX3ZpZXdDb25maWciLCJfbmF0aXZlVGFnIiwidmlld0NvbmZpZyIsInJlc29sdmVGaW5kSG9zdEluc3RhbmNlX0RFUFJFQ0FURUQiLCJmaW5kSG9zdEluc3RhbmNlX0RFUFJFQ0FURUQiLCJpc0ZhYnJpYyIsIl9SZWFjdEZhYnJpYyRkZWZhdWx0JCIsIl9SZWFjdEZhYnJpYyRkZWZhdWx0IiwiUmVhY3RGYWJyaWMiLCJkZWZhdWx0IiwiZSIsIlJlYW5pbWF0ZWRFcnJvciIsIl9SZWFjdE5hdGl2ZSRkZWZhdWx0JCIsIl9SZWFjdE5hdGl2ZSRkZWZhdWx0IiwiUmVhY3ROYXRpdmUiLCJjb21wb25lbnQiLCJob3N0SW5zdGFuY2UiLCJfY29tcG9uZW50UmVmIl0sInNvdXJjZXMiOlsiZmluZEhvc3RJbnN0YW5jZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHR5cGUgeyBJQW5pbWF0ZWRDb21wb25lbnRJbnRlcm5hbCB9IGZyb20gJy4uL2NyZWF0ZUFuaW1hdGVkQ29tcG9uZW50L2NvbW1vblR5cGVzJztcbmltcG9ydCB7IFJlYW5pbWF0ZWRFcnJvciB9IGZyb20gJy4uL2Vycm9ycyc7XG5pbXBvcnQgeyBpc0ZhYnJpYyB9IGZyb20gJy4uL1BsYXRmb3JtQ2hlY2tlcic7XG5cbnR5cGUgSG9zdEluc3RhbmNlRmFicmljID0ge1xuICBfX2ludGVybmFsSW5zdGFuY2VIYW5kbGU/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbiAgX19uYXRpdmVUYWc/OiBudW1iZXI7XG4gIF92aWV3Q29uZmlnPzogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG59O1xuXG50eXBlIEhvc3RJbnN0YW5jZVBhcGVyID0ge1xuICBfbmF0aXZlVGFnPzogbnVtYmVyO1xuICB2aWV3Q29uZmlnPzogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG59O1xuXG5leHBvcnQgdHlwZSBIb3N0SW5zdGFuY2UgPSBIb3N0SW5zdGFuY2VGYWJyaWMgJiBIb3N0SW5zdGFuY2VQYXBlcjtcblxuZnVuY3Rpb24gZmluZEhvc3RJbnN0YW5jZUZhc3RQYXRoKG1heWJlTmF0aXZlUmVmOiBIb3N0SW5zdGFuY2UgfCB1bmRlZmluZWQpIHtcbiAgaWYgKCFtYXliZU5hdGl2ZVJlZikge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKFxuICAgIG1heWJlTmF0aXZlUmVmLl9faW50ZXJuYWxJbnN0YW5jZUhhbmRsZSAmJlxuICAgIG1heWJlTmF0aXZlUmVmLl9fbmF0aXZlVGFnICYmXG4gICAgbWF5YmVOYXRpdmVSZWYuX3ZpZXdDb25maWdcbiAgKSB7XG4gICAgLy8gVGhpcyBpcyBhIG5hdGl2ZSByZWYgdG8gYSBGYWJyaWMgY29tcG9uZW50XG4gICAgcmV0dXJuIG1heWJlTmF0aXZlUmVmO1xuICB9XG4gIGlmIChtYXliZU5hdGl2ZVJlZi5fbmF0aXZlVGFnICYmIG1heWJlTmF0aXZlUmVmLnZpZXdDb25maWcpIHtcbiAgICAvLyBUaGlzIGlzIGEgbmF0aXZlIHJlZiB0byBhIFBhcGVyIGNvbXBvbmVudFxuICAgIHJldHVybiBtYXliZU5hdGl2ZVJlZjtcbiAgfVxuICAvLyBUaGF0IG1lYW5zIGl04oCZcyBhIHJlZiB0byBhIG5vbi1uYXRpdmUgY29tcG9uZW50LCBhbmQgaXTigJlzIG5lY2Vzc2FyeVxuICAvLyB0byBjYWxsIGBmaW5kSG9zdEluc3RhbmNlX0RFUFJFQ0FURURgIG9uIHRoZW0uXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVGaW5kSG9zdEluc3RhbmNlX0RFUFJFQ0FURUQoKSB7XG4gIGlmIChmaW5kSG9zdEluc3RhbmNlX0RFUFJFQ0FURUQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoaXNGYWJyaWMoKSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBSZWFjdEZhYnJpYyA9IHJlcXVpcmUoJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvUmVuZGVyZXIvc2hpbXMvUmVhY3RGYWJyaWMnKTtcbiAgICAgIC8vIFNpbmNlIFJOIDAuNzcgUmVhY3RGYWJyaWMgZXhwb3J0cyBmaW5kSG9zdEluc3RhbmNlX0RFUFJFQ0FURUQgaW4gZGVmYXVsdCBvYmplY3Qgc28gd2UncmUgdHJ5aW5nIHRvXG4gICAgICAvLyBhY2Nlc3MgaXQgZmlyc3QsIHRoZW4gZmFsbGJhY2sgb24gbmFtZWQgZXhwb3J0XG4gICAgICBmaW5kSG9zdEluc3RhbmNlX0RFUFJFQ0FURUQgPVxuICAgICAgICBSZWFjdEZhYnJpYz8uZGVmYXVsdD8uZmluZEhvc3RJbnN0YW5jZV9ERVBSRUNBVEVEID8/XG4gICAgICAgIFJlYWN0RmFicmljPy5maW5kSG9zdEluc3RhbmNlX0RFUFJFQ0FURUQ7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgbmV3IFJlYW5pbWF0ZWRFcnJvcihcbiAgICAgICAgJ0ZhaWxlZCB0byByZXNvbHZlIGZpbmRIb3N0SW5zdGFuY2VfREVQUkVDQVRFRCdcbiAgICAgICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IFJlYWN0TmF0aXZlID0gcmVxdWlyZSgncmVhY3QtbmF0aXZlL0xpYnJhcmllcy9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZScpO1xuICAgIC8vIFNpbmNlIFJOIDAuNzcgUmVhY3RGYWJyaWMgZXhwb3J0cyBmaW5kSG9zdEluc3RhbmNlX0RFUFJFQ0FURUQgaW4gZGVmYXVsdCBvYmplY3Qgc28gd2UncmUgdHJ5aW5nIHRvXG4gICAgLy8gYWNjZXNzIGl0IGZpcnN0LCB0aGVuIGZhbGxiYWNrIG9uIG5hbWVkIGV4cG9ydFxuICAgIGZpbmRIb3N0SW5zdGFuY2VfREVQUkVDQVRFRCA9XG4gICAgICBSZWFjdE5hdGl2ZT8uZGVmYXVsdD8uZmluZEhvc3RJbnN0YW5jZV9ERVBSRUNBVEVEID8/XG4gICAgICBSZWFjdE5hdGl2ZT8uZmluZEhvc3RJbnN0YW5jZV9ERVBSRUNBVEVEO1xuICB9XG59XG5cbmxldCBmaW5kSG9zdEluc3RhbmNlX0RFUFJFQ0FURUQ6IChyZWY6IHVua25vd24pID0+IEhvc3RJbnN0YW5jZTtcbmV4cG9ydCBmdW5jdGlvbiBmaW5kSG9zdEluc3RhbmNlKFxuICBjb21wb25lbnQ6IElBbmltYXRlZENvbXBvbmVudEludGVybmFsIHwgUmVhY3QuQ29tcG9uZW50XG4pOiBIb3N0SW5zdGFuY2Uge1xuICAvLyBGYXN0IHBhdGggZm9yIG5hdGl2ZSByZWZzXG4gIGNvbnN0IGhvc3RJbnN0YW5jZSA9IGZpbmRIb3N0SW5zdGFuY2VGYXN0UGF0aChcbiAgICAoY29tcG9uZW50IGFzIElBbmltYXRlZENvbXBvbmVudEludGVybmFsKS5fY29tcG9uZW50UmVmIGFzIEhvc3RJbnN0YW5jZVxuICApO1xuICBpZiAoaG9zdEluc3RhbmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gaG9zdEluc3RhbmNlO1xuICB9XG5cbiAgcmVzb2x2ZUZpbmRIb3N0SW5zdGFuY2VfREVQUkVDQVRFRCgpO1xuICAvLyBGYWJyaWMgaW1wbGVtZW50YXRpb24gb2YgZmluZEhvc3RJbnN0YW5jZV9ERVBSRUNBVEVEIGRvZXNuJ3QgYWNjZXB0IGEgcmVmIGFzIGFuIGFyZ3VtZW50XG4gIHJldHVybiBmaW5kSG9zdEluc3RhbmNlX0RFUFJFQ0FURUQoXG4gICAgaXNGYWJyaWMoKVxuICAgICAgPyBjb21wb25lbnRcbiAgICAgIDogKGNvbXBvbmVudCBhcyBJQW5pbWF0ZWRDb21wb25lbnRJbnRlcm5hbCkuX2NvbXBvbmVudFJlZlxuICApO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxZQUFZOztBQUFDQSxNQUFBLENBQUFDLGNBQUEsQ0FBQUMsT0FBQTtFQUFBQyxLQUFBO0FBQUE7QUFBQUQsT0FBQSxDQUFBRSxnQkFBQSxHQUFBQSxnQkFBQTtBQUdiLElBQUFDLE9BQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLGdCQUFBLEdBQUFELE9BQUE7QUFlQSxTQUFTRSx3QkFBd0JBLENBQUNDLGNBQXdDLEVBQUU7RUFDMUUsSUFBSSxDQUFDQSxjQUFjLEVBQUU7SUFDbkIsT0FBT0MsU0FBUztFQUNsQjtFQUNBLElBQ0VELGNBQWMsQ0FBQ0Usd0JBQXdCLElBQ3ZDRixjQUFjLENBQUNHLFdBQVcsSUFDMUJILGNBQWMsQ0FBQ0ksV0FBVyxFQUMxQjtJQUVBLE9BQU9KLGNBQWM7RUFDdkI7RUFDQSxJQUFJQSxjQUFjLENBQUNLLFVBQVUsSUFBSUwsY0FBYyxDQUFDTSxVQUFVLEVBQUU7SUFFMUQsT0FBT04sY0FBYztFQUN2QjtFQUdBLE9BQU9DLFNBQVM7QUFDbEI7QUFFQSxTQUFTTSxrQ0FBa0NBLENBQUEsRUFBRztFQUM1QyxJQUFJQywyQkFBMkIsS0FBS1AsU0FBUyxFQUFFO0lBQzdDO0VBQ0Y7RUFDQSxJQUFJLElBQUFRLHlCQUFRLEVBQUMsQ0FBQyxFQUFFO0lBQ2QsSUFBSTtNQUFBLElBQUFDLHFCQUFBLEVBQUFDLG9CQUFBO01BQ0YsSUFBTUMsV0FBVyxHQUFHZixPQUFPLENBQUMsbURBQW1ELENBQUM7TUFHaEZXLDJCQUEyQixJQUFBRSxxQkFBQSxHQUN6QkUsV0FBVyxhQUFBRCxvQkFBQSxHQUFYQyxXQUFXLENBQUVDLE9BQU8scUJBQXBCRixvQkFBQSxDQUFzQkgsMkJBQTJCLFlBQUFFLHFCQUFBLEdBQ2pERSxXQUFXLG9CQUFYQSxXQUFXLENBQUVKLDJCQUEyQjtJQUM1QyxDQUFDLENBQUMsT0FBT00sQ0FBQyxFQUFFO01BQ1YsTUFBTSxJQUFJQyx1QkFBZSxDQUN2QiwrQ0FDRixDQUFDO0lBQ0g7RUFDRixDQUFDLE1BQU07SUFBQSxJQUFBQyxxQkFBQSxFQUFBQyxvQkFBQTtJQUNMLElBQU1DLFdBQVcsR0FBR3JCLE9BQU8sQ0FBQyxtREFBbUQsQ0FBQztJQUdoRlcsMkJBQTJCLElBQUFRLHFCQUFBLEdBQ3pCRSxXQUFXLGFBQUFELG9CQUFBLEdBQVhDLFdBQVcsQ0FBRUwsT0FBTyxxQkFBcEJJLG9CQUFBLENBQXNCVCwyQkFBMkIsWUFBQVEscUJBQUEsR0FDakRFLFdBQVcsb0JBQVhBLFdBQVcsQ0FBRVYsMkJBQTJCO0VBQzVDO0FBQ0Y7QUFFQSxJQUFJQSwyQkFBMkQ7QUFDeEQsU0FBU2IsZ0JBQWdCQSxDQUM5QndCLFNBQXVELEVBQ3pDO0VBRWQsSUFBTUMsWUFBWSxHQUFHckIsd0JBQXdCLENBQzFDb0IsU0FBUyxDQUFnQ0UsYUFDNUMsQ0FBQztFQUNELElBQUlELFlBQVksS0FBS25CLFNBQVMsRUFBRTtJQUM5QixPQUFPbUIsWUFBWTtFQUNyQjtFQUVBYixrQ0FBa0MsQ0FBQyxDQUFDO0VBRXBDLE9BQU9DLDJCQUEyQixDQUNoQyxJQUFBQyx5QkFBUSxFQUFDLENBQUMsR0FDTlUsU0FBUyxHQUNSQSxTQUFTLENBQWdDRSxhQUNoRCxDQUFDO0FBQ0giLCJpZ25vcmVMaXN0IjpbXX0=