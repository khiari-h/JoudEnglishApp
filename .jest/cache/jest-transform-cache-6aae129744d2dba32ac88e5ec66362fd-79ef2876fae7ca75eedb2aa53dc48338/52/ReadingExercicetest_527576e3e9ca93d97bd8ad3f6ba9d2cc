ee4b672d9c8311a3b79e778aa0a9641a
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
_getJestObj().mock('react-native', function () {
  var ReactNative = jest.requireActual('react-native');
  return Object.assign({}, ReactNative, {
    View: ReactNative.View,
    ActivityIndicator: function ActivityIndicator(props) {
      return (0, _jsxRuntime.jsx)(ReactNative.ActivityIndicator, Object.assign({}, props, {
        testID: props.testID || 'activity-indicator'
      }));
    }
  });
});
_getJestObj().mock('../../../../src/screens/exercises/reading/ReadingHeader', function () {
  var _jest$requireActual = jest.requireActual('react-native'),
    View = _jest$requireActual.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "ReadingHeader"
    }, props));
  };
});
_getJestObj().mock('../../../../src/screens/exercises/reading/ReadingTextSelector', function () {
  var _jest$requireActual2 = jest.requireActual('react-native'),
    View = _jest$requireActual2.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "ReadingTextSelector"
    }, props));
  };
});
_getJestObj().mock('../../../../src/screens/exercises/reading/ReadingProgress', function () {
  var _jest$requireActual3 = jest.requireActual('react-native'),
    View = _jest$requireActual3.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "ReadingProgress"
    }, props));
  };
});
_getJestObj().mock('../../../../src/screens/exercises/reading/ReadingText', function () {
  var _jest$requireActual4 = jest.requireActual('react-native'),
    View = _jest$requireActual4.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "ReadingText"
    }, props));
  };
});
_getJestObj().mock('../../../../src/screens/exercises/reading/ReadingQuestionCard', function () {
  var _jest$requireActual5 = jest.requireActual('react-native'),
    View = _jest$requireActual5.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "ReadingQuestionCard"
    }, props));
  };
});
_getJestObj().mock('../../../../src/screens/exercises/reading/QuestionIndicators', function () {
  var _jest$requireActual6 = jest.requireActual('react-native'),
    View = _jest$requireActual6.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "QuestionIndicators"
    }, props));
  };
});
_getJestObj().mock('../../../../src/screens/exercises/reading/ReadingNavigation', function () {
  var _jest$requireActual7 = jest.requireActual('react-native'),
    View = _jest$requireActual7.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "ReadingNavigation"
    }, props));
  };
});
_getJestObj().mock('../../../../src/components/exercise-common/ExerciseFeedback', function () {
  var _jest$requireActual8 = jest.requireActual('react-native'),
    View = _jest$requireActual8.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "ExerciseFeedback"
    }, props));
  };
});
_getJestObj().mock('../../../../src/components/exercise-common/InstructionBox', function () {
  var _jest$requireActual9 = jest.requireActual('react-native'),
    View = _jest$requireActual9.View;
  return function (props) {
    return (0, _jsxRuntime.jsx)(View, Object.assign({
      testID: "InstructionBox"
    }, props));
  };
});
_getJestObj().mock('../../../../src/components/layout/Container', function () {
  var _jest$requireActual0 = jest.requireActual('react-native'),
    View = _jest$requireActual0.View;
  return {
    CONTAINER_SAFE_EDGES: {
      ALL: 'mocked-all-edges',
      TOP: 'mocked-top-edge',
      BOTTOM: 'mocked-bottom-edge'
    },
    __esModule: true,
    default: function _default(_ref) {
      var children = _ref.children,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      return (0, _jsxRuntime.jsx)(View, Object.assign({}, props, {
        children: children
      }));
    }
  };
});
_getJestObj().mock('../../../../src/screens/exercises/reading/hooks/useReading');
_getJestObj().mock('../../../../src/hooks/useLastActivity');
_getJestObj().mock('../../../../src/utils/reading/readingDataHelper', function () {
  return {
    getReadingData: jest.fn(function () {
      return {
        exercises: [{
          id: 'ex1',
          title: 'The Weather',
          text: 'Today is sunny.',
          questions: [{
            id: 'q1',
            question: 'What is the weather?',
            options: ['Sunny', 'Rainy'],
            correctAnswer: 0
          }]
        }, {
          id: 'ex2',
          title: 'My Family',
          text: 'I have a sister.',
          questions: [{
            id: 'q2',
            question: 'Who do I have?',
            options: ['Brother', 'Sister'],
            correctAnswer: 1
          }]
        }]
      };
    }),
    getLevelColor: jest.fn(function () {
      return '#007AFF';
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _expoRouter = require("expo-router");
var _reading = _interopRequireDefault(require("../../../../src/screens/exercises/reading"));
var _useReading = _interopRequireDefault(require("../../../../src/screens/exercises/reading/hooks/useReading"));
var _useLastActivity = _interopRequireDefault(require("../../../../src/hooks/useLastActivity"));
var _readingDataHelper = require("../../../../src/utils/reading/readingDataHelper");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children"];
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ReadingExercise - Comprehensive Tests', function () {
  var mockSaveActivity = jest.fn();
  var mockChangeExercise = jest.fn();
  var mockChangeQuestion = jest.fn();
  var mockSelectAnswer = jest.fn();
  var mockSubmitAnswer = jest.fn();
  var mockNextQuestion = jest.fn();
  var mockPreviousQuestion = jest.fn();
  var mockRetryQuestion = jest.fn();
  var mockToggleTextExpansion = jest.fn();
  var mockToggleDetailedProgress = jest.fn();
  var mockReadingData = {
    exercises: [{
      id: 'ex1',
      title: 'The Weather',
      text: 'Today is sunny.',
      questions: [{
        id: 'q1',
        question: 'What is the weather?',
        options: ['Sunny', 'Rainy'],
        correctAnswer: 0,
        explanation: 'The text says "Today is sunny"'
      }]
    }, {
      id: 'ex2',
      title: 'My Family',
      text: 'I have a sister.',
      questions: [{
        id: 'q2',
        question: 'Who do I have?',
        options: ['Brother', 'Sister'],
        correctAnswer: 1,
        explanation: 'The text mentions "I have a sister"'
      }]
    }]
  };
  var setupMocks = function setupMocks() {
    var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var defaultUseReading = Object.assign({
      selectedExerciseIndex: 0,
      currentQuestionIndex: 0,
      selectedAnswer: null,
      showFeedback: false,
      textExpanded: false,
      attempts: 1,
      completedQuestions: {
        0: [],
        1: []
      },
      loaded: true,
      showDetailedProgress: false,
      currentExercise: mockReadingData.exercises[0],
      currentQuestion: mockReadingData.exercises[0].questions[0],
      totalQuestions: 1,
      isCorrect: false,
      changeExercise: mockChangeExercise,
      changeQuestion: mockChangeQuestion,
      selectAnswer: mockSelectAnswer,
      submitAnswer: mockSubmitAnswer,
      nextQuestion: mockNextQuestion,
      previousQuestion: mockPreviousQuestion,
      retryQuestion: mockRetryQuestion,
      toggleTextExpansion: mockToggleTextExpansion,
      toggleDetailedProgress: mockToggleDetailedProgress,
      scrollViewRef: {
        current: null
      },
      textsScrollViewRef: {
        current: null
      },
      fadeAnim: {
        current: null
      },
      slideAnim: {
        current: null
      }
    }, overrides);
    _useReading.default.mockReturnValue(defaultUseReading);
    _useLastActivity.default.mockReturnValue({
      saveActivity: mockSaveActivity
    });
    _readingDataHelper.getReadingData.mockReturnValue(mockReadingData);
  };
  beforeEach(function () {
    jest.clearAllMocks();
    setupMocks();
  });
  describe('Core Functionality and Rendering', function () {
    it('should render the main reading exercise view correctly', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reading.default, {
        route: {
          params: {
            level: 'A2'
          }
        }
      }));
      expect(_reactNative.screen.getByTestId('ReadingHeader')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('ReadingProgress')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('ReadingTextSelector')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('InstructionBox')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('ReadingText')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('ReadingQuestionCard')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('QuestionIndicators')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('ReadingNavigation')).toBeTruthy();
    });
    it('should call hooks with correct parameters', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reading.default, {
        route: {
          params: {
            level: 'B1'
          }
        }
      }));
      expect(_useReading.default).toHaveBeenCalledWith(mockReadingData.exercises, 'B1');
      expect(_useLastActivity.default).toHaveBeenCalled();
      expect(_readingDataHelper.getReadingData).toHaveBeenCalledWith('B1');
    });
    it('should save activity on initial render', (0, _asyncToGenerator2.default)(function* () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reading.default, {
        route: {
          params: {
            level: 'A1'
          }
        }
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockSaveActivity).toHaveBeenCalledWith({
          title: 'Lecture',
          level: 'A1',
          type: 'reading',
          metadata: {
            word: 0,
            totalWords: 2,
            exercise: 0,
            question: 0,
            totalQuestions: 1,
            exerciseTitle: 'The Weather',
            totalExercises: 2
          }
        });
      });
    }));
  });
  describe('States and Edge Cases', function () {
    it('should render loading state when not loaded', function () {
      setupMocks({
        loaded: false
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reading.default, {
        route: {
          params: {
            level: 'A1'
          }
        }
      }));
      expect(_reactNative.screen.getByTestId('activity-indicator')).toBeTruthy();
      expect(_reactNative.screen.queryByTestId('ReadingQuestionCard')).toBeNull();
    });
    it('should render loading state when no exercises available', function () {
      _readingDataHelper.getReadingData.mockReturnValue({
        exercises: []
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reading.default, {
        route: {
          params: {
            level: 'A1'
          }
        }
      }));
      expect(_reactNative.screen.getByTestId('activity-indicator')).toBeTruthy();
      expect(_reactNative.screen.queryByTestId('ReadingQuestionCard')).toBeNull();
    });
    it('should handle missing route params by using default level', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reading.default, {
        route: {}
      }));
      expect(_readingDataHelper.getReadingData).toHaveBeenCalledWith('A1');
    });
    it('should render feedback when showFeedback is true and isCorrect is true', function () {
      setupMocks({
        showFeedback: true,
        isCorrect: true,
        selectedAnswer: 0
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reading.default, {
        route: {
          params: {
            level: 'A1'
          }
        }
      }));
      expect(_reactNative.screen.getByTestId('ExerciseFeedback')).toBeTruthy();
    });
    it('should not render question card when currentQuestion is null', function () {
      setupMocks({
        currentQuestion: null
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reading.default, {
        route: {
          params: {
            level: 'A1'
          }
        }
      }));
      expect(_reactNative.screen.queryByTestId('ReadingQuestionCard')).toBeNull();
      expect(_reactNative.screen.queryByTestId('ExerciseFeedback')).toBeNull();
    });
  });
  describe('Navigation and User Actions', function () {
    it('should navigate back to exercise selection on back press', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reading.default, {
        route: {
          params: {
            level: 'A2'
          }
        }
      }));
      var header = _reactNative.screen.getByTestId('ReadingHeader');
      var backButtonPress = header.props.onBackPress;
      backButtonPress();
      expect(_expoRouter.router.push).toHaveBeenCalledWith({
        pathname: '/tabs/exerciseSelection',
        params: {
          level: 'A2'
        }
      });
    });
    it('should call changeExercise when exercise is selected', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reading.default, {
        route: {
          params: {
            level: 'B1'
          }
        }
      }));
      var textSelector = _reactNative.screen.getByTestId('ReadingTextSelector');
      var onSelectExercise = textSelector.props.onSelectExercise;
      onSelectExercise(1);
      expect(mockChangeExercise).toHaveBeenCalledWith(1);
    });
    it('should call toggleDetailedProgress when progress is toggled', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reading.default, {
        route: {
          params: {
            level: 'B1'
          }
        }
      }));
      var progress = _reactNative.screen.getByTestId('ReadingProgress');
      var onToggleExpand = progress.props.onToggleExpand;
      onToggleExpand();
      expect(mockToggleDetailedProgress).toHaveBeenCalled();
    });
    it('should call changeExercise when exercise is pressed in progress', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reading.default, {
        route: {
          params: {
            level: 'B1'
          }
        }
      }));
      var progress = _reactNative.screen.getByTestId('ReadingProgress');
      var onExercisePress = progress.props.onExercisePress;
      onExercisePress(1);
      expect(mockChangeExercise).toHaveBeenCalledWith(1);
    });
    it('should call toggleTextExpansion when text expand is toggled', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reading.default, {
        route: {
          params: {
            level: 'B1'
          }
        }
      }));
      var readingText = _reactNative.screen.getByTestId('ReadingText');
      var onToggleExpand = readingText.props.onToggleExpand;
      onToggleExpand();
      expect(mockToggleTextExpansion).toHaveBeenCalled();
    });
    it('should call selectAnswer when answer is selected', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reading.default, {
        route: {
          params: {
            level: 'B1'
          }
        }
      }));
      var questionCard = _reactNative.screen.getByTestId('ReadingQuestionCard');
      var onSelectAnswer = questionCard.props.onSelectAnswer;
      onSelectAnswer(1);
      expect(mockSelectAnswer).toHaveBeenCalledWith(1);
    });
    it('should call changeQuestion when question indicator is pressed', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reading.default, {
        route: {
          params: {
            level: 'B1'
          }
        }
      }));
      var indicators = _reactNative.screen.getByTestId('QuestionIndicators');
      var onSelectQuestion = indicators.props.onSelectQuestion;
      onSelectQuestion(0);
      expect(mockChangeQuestion).toHaveBeenCalledWith(0);
    });
  });
  describe('Navigation Buttons', function () {
    it('should call submitAnswer when next is pressed and no feedback shown', function () {
      setupMocks({
        showFeedback: false,
        selectedAnswer: 0
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reading.default, {
        route: {
          params: {
            level: 'B1'
          }
        }
      }));
      var navigation = _reactNative.screen.getByTestId('ReadingNavigation');
      var onNext = navigation.props.onNext;
      onNext();
      expect(mockSubmitAnswer).toHaveBeenCalled();
    });
    it('should call nextQuestion when next is pressed and feedback is shown', function () {
      setupMocks({
        showFeedback: true,
        isCorrect: true
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reading.default, {
        route: {
          params: {
            level: 'B1'
          }
        }
      }));
      var navigation = _reactNative.screen.getByTestId('ReadingNavigation');
      var onNext = navigation.props.onNext;
      onNext();
      expect(mockNextQuestion).toHaveBeenCalled();
    });
    it('should call previousQuestion when previous is pressed', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reading.default, {
        route: {
          params: {
            level: 'B1'
          }
        }
      }));
      var navigation = _reactNative.screen.getByTestId('ReadingNavigation');
      var onPrevious = navigation.props.onPrevious;
      onPrevious();
      expect(mockPreviousQuestion).toHaveBeenCalled();
    });
    it('should call retryQuestion when retry is pressed', function () {
      setupMocks({
        showFeedback: true,
        isCorrect: false,
        attempts: 2
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reading.default, {
        route: {
          params: {
            level: 'B1'
          }
        }
      }));
      var navigation = _reactNative.screen.getByTestId('ReadingNavigation');
      var onRetry = navigation.props.onRetry;
      onRetry();
      expect(mockRetryQuestion).toHaveBeenCalled();
    });
  });
  describe('Activity Saving', function () {
    it('should save activity when exercise changes', (0, _asyncToGenerator2.default)(function* () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reading.default, {
          route: {
            params: {
              level: 'A1'
            }
          }
        })),
        rerender = _render.rerender;
      setupMocks({
        selectedExerciseIndex: 1,
        currentExercise: mockReadingData.exercises[1],
        currentQuestion: mockReadingData.exercises[1].questions[0]
      });
      rerender((0, _jsxRuntime.jsx)(_reading.default, {
        route: {
          params: {
            level: 'A1'
          }
        }
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockSaveActivity).toHaveBeenCalledWith({
          title: 'Lecture',
          level: 'A1',
          type: 'reading',
          metadata: {
            word: 1,
            totalWords: 2,
            exercise: 1,
            question: 0,
            totalQuestions: 1,
            exerciseTitle: 'My Family',
            totalExercises: 2
          }
        });
      });
    }));
    it('should save activity when question changes', (0, _asyncToGenerator2.default)(function* () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reading.default, {
          route: {
            params: {
              level: 'A1'
            }
          }
        })),
        rerender = _render2.rerender;
      var exerciseWithMultipleQuestions = Object.assign({}, mockReadingData.exercises[0], {
        questions: [mockReadingData.exercises[0].questions[0], {
          id: 'q1b',
          question: 'Second question?',
          options: ['A', 'B'],
          correctAnswer: 0
        }]
      });
      setupMocks({
        currentQuestionIndex: 1,
        currentExercise: exerciseWithMultipleQuestions,
        currentQuestion: exerciseWithMultipleQuestions.questions[1],
        totalQuestions: 2
      });
      rerender((0, _jsxRuntime.jsx)(_reading.default, {
        route: {
          params: {
            level: 'A1'
          }
        }
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockSaveActivity).toHaveBeenCalledWith({
          title: 'Lecture',
          level: 'A1',
          type: 'reading',
          metadata: {
            word: 0,
            totalWords: 2,
            exercise: 0,
            question: 1,
            totalQuestions: 2,
            exerciseTitle: 'The Weather',
            totalExercises: 2
          }
        });
      });
    }));
    it('should not save activity when not loaded', function () {
      setupMocks({
        loaded: false
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reading.default, {
        route: {
          params: {
            level: 'A1'
          }
        }
      }));
      expect(mockSaveActivity).not.toHaveBeenCalled();
    });
    it('should not save activity when no exercises', function () {
      _readingDataHelper.getReadingData.mockReturnValue({
        exercises: []
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reading.default, {
        route: {
          params: {
            level: 'A1'
          }
        }
      }));
      expect(mockSaveActivity).not.toHaveBeenCalled();
    });
  });
  describe('Component Props Validation', function () {
    it('should pass correct props to ReadingHeader', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reading.default, {
        route: {
          params: {
            level: 'C1'
          }
        }
      }));
      var header = _reactNative.screen.getByTestId('ReadingHeader');
      expect(header.props.level).toBe('C1');
      expect(typeof header.props.onBackPress).toBe('function');
    });
    it('should pass correct props to ReadingProgress', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reading.default, {
        route: {
          params: {
            level: 'B1'
          }
        }
      }));
      var progress = _reactNative.screen.getByTestId('ReadingProgress');
      expect(progress.props.readingData).toEqual(mockReadingData);
      expect(progress.props.completedQuestions).toEqual({
        0: [],
        1: []
      });
      expect(progress.props.levelColor).toBe('#007AFF');
      expect(progress.props.expanded).toBe(false);
    });
    it('should pass correct props to ReadingText', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reading.default, {
        route: {
          params: {
            level: 'B1'
          }
        }
      }));
      var readingText = _reactNative.screen.getByTestId('ReadingText');
      expect(readingText.props.exercise).toEqual(mockReadingData.exercises[0]);
      expect(readingText.props.textExpanded).toBe(false);
      expect(readingText.props.levelColor).toBe('#007AFF');
    });
    it('should pass correct props to ReadingQuestionCard', function () {
      var currentQuestion = mockReadingData.exercises[0].questions[0];
      setupMocks({
        currentQuestion: currentQuestion,
        selectedAnswer: 1,
        showFeedback: true
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reading.default, {
        route: {
          params: {
            level: 'B1'
          }
        }
      }));
      var questionCard = _reactNative.screen.getByTestId('ReadingQuestionCard');
      expect(questionCard.props.question).toEqual(currentQuestion);
      expect(questionCard.props.questionIndex).toBe(0);
      expect(questionCard.props.selectedAnswer).toBe(1);
      expect(questionCard.props.showFeedback).toBe(true);
      expect(questionCard.props.levelColor).toBe('#007AFF');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,