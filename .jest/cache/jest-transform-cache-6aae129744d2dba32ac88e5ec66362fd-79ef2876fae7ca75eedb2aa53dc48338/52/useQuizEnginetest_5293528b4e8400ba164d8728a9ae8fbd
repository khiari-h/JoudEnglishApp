974646b6f9160c02cf15536396ef4998
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactNative = require("@testing-library/react-native");
var _useQuizEngine = _interopRequireDefault(require("../../../src/hooks/useQuizEngine"));
describe('useQuizEngine', function () {
  var mockQuestions = [{
    id: 1,
    word: 'Hello',
    choices: ['Bonjour', 'Au revoir'],
    correctAnswer: 'Bonjour'
  }, {
    id: 2,
    word: 'World',
    choices: ['Monde', 'Terre'],
    correctAnswer: 'Monde'
  }, {
    id: 3,
    word: 'Cat',
    choices: ['Chat', 'Chien'],
    correctAnswer: 'Chat'
  }];
  it('initializes with correct default values', function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useQuizEngine.default)(mockQuestions);
      }),
      result = _renderHook.result;
    expect(result.current.currentQuestionIndex).toBe(0);
    expect(result.current.score).toBe(0);
    expect(result.current.selectedChoice).toBeNull();
    expect(result.current.showResult).toBe(false);
    expect(result.current.isFinished).toBe(false);
    expect(result.current.userAnswers).toEqual([]);
    expect(result.current.totalQuestions).toBe(mockQuestions.length);
    expect(result.current.currentQuestion).toEqual(mockQuestions[0]);
    expect(result.current.progress).toBe(0);
  });
  it('handles a correct answer', function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useQuizEngine.default)(mockQuestions);
      }),
      result = _renderHook2.result;
    (0, _reactNative.act)(function () {
      result.current.handleAnswer('Bonjour');
    });
    expect(result.current.score).toBe(1);
    expect(result.current.selectedChoice).toBe('Bonjour');
    expect(result.current.showResult).toBe(true);
    expect(result.current.userAnswers).toEqual([{
      question: 'Hello',
      choice: 'Bonjour',
      isCorrect: true
    }]);
  });
  it('handles an incorrect answer', function () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useQuizEngine.default)(mockQuestions);
      }),
      result = _renderHook3.result;
    (0, _reactNative.act)(function () {
      result.current.handleAnswer('Au revoir');
    });
    expect(result.current.score).toBe(0);
    expect(result.current.selectedChoice).toBe('Au revoir');
    expect(result.current.showResult).toBe(true);
    expect(result.current.userAnswers).toEqual([{
      question: 'Hello',
      choice: 'Au revoir',
      isCorrect: false
    }]);
  });
  it('moves to the next question', function () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useQuizEngine.default)(mockQuestions);
      }),
      result = _renderHook4.result;
    (0, _reactNative.act)(function () {
      result.current.handleAnswer('Bonjour');
    });
    (0, _reactNative.act)(function () {
      result.current.goToNextQuestion();
    });
    expect(result.current.currentQuestionIndex).toBe(1);
    expect(result.current.selectedChoice).toBeNull();
    expect(result.current.showResult).toBe(false);
    expect(result.current.currentQuestion).toEqual(mockQuestions[1]);
    expect(result.current.progress).toBeCloseTo(1 / 3 * 100);
  });
  it('finishes the quiz when all questions are answered', function () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useQuizEngine.default)(mockQuestions);
      }),
      result = _renderHook5.result;
    (0, _reactNative.act)(function () {
      result.current.handleAnswer('Bonjour');
    });
    (0, _reactNative.act)(function () {
      result.current.goToNextQuestion();
    });
    (0, _reactNative.act)(function () {
      result.current.handleAnswer('Monde');
    });
    (0, _reactNative.act)(function () {
      result.current.goToNextQuestion();
    });
    (0, _reactNative.act)(function () {
      result.current.handleAnswer('Chat');
    });
    (0, _reactNative.act)(function () {
      result.current.goToNextQuestion();
    });
    expect(result.current.isFinished).toBe(true);
    expect(result.current.currentQuestion).toBeNull();
    expect(result.current.progress).toBe(100);
  });
  it('restarts the quiz', function () {
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useQuizEngine.default)(mockQuestions);
      }),
      result = _renderHook6.result;
    (0, _reactNative.act)(function () {
      result.current.handleAnswer('Bonjour');
    });
    (0, _reactNative.act)(function () {
      result.current.goToNextQuestion();
    });
    (0, _reactNative.act)(function () {
      result.current.handleAnswer('Monde');
    });
    (0, _reactNative.act)(function () {
      result.current.goToNextQuestion();
    });
    (0, _reactNative.act)(function () {
      result.current.handleAnswer('Chat');
    });
    (0, _reactNative.act)(function () {
      result.current.goToNextQuestion();
    });
    expect(result.current.isFinished).toBe(true);
    (0, _reactNative.act)(function () {
      result.current.handleRestart();
    });
    expect(result.current.currentQuestionIndex).toBe(0);
    expect(result.current.score).toBe(0);
    expect(result.current.selectedChoice).toBeNull();
    expect(result.current.showResult).toBe(false);
    expect(result.current.isFinished).toBe(false);
    expect(result.current.userAnswers).toEqual([]);
    expect(result.current.currentQuestion).toEqual(mockQuestions[0]);
    expect(result.current.progress).toBe(0);
  });
  it('does not allow answering if showResult is true', function () {
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useQuizEngine.default)(mockQuestions);
      }),
      result = _renderHook7.result;
    (0, _reactNative.act)(function () {
      result.current.handleAnswer('Bonjour');
    });
    expect(result.current.score).toBe(1);
    expect(result.current.showResult).toBe(true);
    (0, _reactNative.act)(function () {
      result.current.handleAnswer('Au revoir');
    });
    expect(result.current.score).toBe(1);
    expect(result.current.selectedChoice).toBe('Bonjour');
  });
  it('returns null for currentQuestion if no questions are provided', function () {
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useQuizEngine.default)([]);
      }),
      result = _renderHook8.result;
    expect(result.current.currentQuestion).toBeNull();
    expect(result.current.totalQuestions).toBe(0);
    expect(result.current.progress).toBe(0);
  });
  it('returns null for currentQuestion if index is out of bounds', function () {
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useQuizEngine.default)(mockQuestions);
      }),
      result = _renderHook9.result;
    (0, _reactNative.act)(function () {
      result.current.goToNextQuestion();
      result.current.goToNextQuestion();
      result.current.goToNextQuestion();
      result.current.goToNextQuestion();
    });
    expect(result.current.currentQuestion).toBeNull();
    expect(result.current.isFinished).toBe(true);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,