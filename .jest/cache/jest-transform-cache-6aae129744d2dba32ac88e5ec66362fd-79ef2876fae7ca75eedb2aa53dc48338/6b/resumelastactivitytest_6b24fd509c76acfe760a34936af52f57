e9d758278756bc97873bfc088c9a4b6c
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    },
    useFocusEffect: jest.fn(function (callback) {
      return callback();
    })
  };
});
_getJestObj().mock('../../src/hooks/useLastActivity');
_getJestObj().mock('../../src/hooks/useRealTimeProgress', function () {
  return function () {
    return {
      getLevelProgress: mockGetLevelProgress,
      refresh: mockRefresh
    };
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _expoRouter = require("expo-router");
var _Dashboard = _interopRequireDefault(require("../../src/screens/Dashboard"));
var LastActivity = _interopRequireWildcard(require("../../src/hooks/useLastActivity"));
var _ProgressContext = require("../../src/contexts/ProgressContext");
var _ThemeContext = require("../../src/contexts/ThemeContext");
var _CurrentLevelContext = require("../../src/contexts/CurrentLevelContext");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockRefresh = jest.fn();
var mockGetLevelProgress = jest.fn(function () {
  return 50;
});
var mockLastActivityData = {
  type: 'grammar',
  level: 'A1',
  title: 'Grammaire de base',
  timestamp: Date.now(),
  metadata: {
    categoryIndex: 1,
    word: 5,
    totalWords: 15
  }
};
var renderDashboard = function renderDashboard() {
  return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
    children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(_CurrentLevelContext.CurrentLevelProvider, {
        children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
      })
    })
  }));
};
describe('Scénario 2: Reprise de la dernière activité', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('devrait afficher la section "Continuer" et naviguer correctement', (0, _asyncToGenerator2.default)(function* () {
    LastActivity.default.mockReturnValue({
      lastActivity: mockLastActivityData,
      isLoading: false,
      saveActivity: jest.fn(),
      clearActivity: jest.fn(),
      reload: jest.fn()
    });
    var _renderDashboard = renderDashboard(),
      getByTestId = _renderDashboard.getByTestId,
      getByText = _renderDashboard.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('hero-continue-section')).toBeTruthy();
    });
    expect(getByText('Grammaire de base')).toBeTruthy();
    expect(getByText(/Niv A1/)).toBeTruthy();
    expect(getByText(/Mot 6\/15/)).toBeTruthy();
    var continueButton = getByTestId('continue-activity-button');
    _reactNative.fireEvent.press(continueButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_expoRouter.router.push).toHaveBeenCalledWith({
        pathname: '/tabs/grammarExercise',
        params: {
          level: 'A1'
        }
      });
    });
  }));
  it('devrait afficher la section vide s\'il n\'y a pas de dernière activité', (0, _asyncToGenerator2.default)(function* () {
    LastActivity.default.mockReturnValue({
      lastActivity: null,
      isLoading: false,
      saveActivity: jest.fn(),
      clearActivity: jest.fn(),
      reload: jest.fn()
    });
    var _renderDashboard2 = renderDashboard(),
      getByTestId = _renderDashboard2.getByTestId,
      getByText = _renderDashboard2.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('hero-empty-section')).toBeTruthy();
    });
    expect(getByText("Commencer l'apprentissage")).toBeTruthy();
    var startButton = getByTestId('level-selection-button');
    _reactNative.fireEvent.press(startButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_expoRouter.router.push).toHaveBeenCalledWith('/tabs/levelSelection');
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJyb3V0ZXIiLCJwdXNoIiwiamVzdCIsImZuIiwidXNlRm9jdXNFZmZlY3QiLCJjYWxsYmFjayIsImdldExldmVsUHJvZ3Jlc3MiLCJtb2NrR2V0TGV2ZWxQcm9ncmVzcyIsInJlZnJlc2giLCJtb2NrUmVmcmVzaCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX3JlYWN0IiwiX3JlYWN0TmF0aXZlIiwiX2V4cG9Sb3V0ZXIiLCJfRGFzaGJvYXJkIiwiTGFzdEFjdGl2aXR5IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfUHJvZ3Jlc3NDb250ZXh0IiwiX1RoZW1lQ29udGV4dCIsIl9DdXJyZW50TGV2ZWxDb250ZXh0IiwiX2pzeFJ1bnRpbWUiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9yZXF1aXJlIiwibW9ja0xhc3RBY3Rpdml0eURhdGEiLCJ0eXBlIiwibGV2ZWwiLCJ0aXRsZSIsInRpbWVzdGFtcCIsIkRhdGUiLCJub3ciLCJtZXRhZGF0YSIsImNhdGVnb3J5SW5kZXgiLCJ3b3JkIiwidG90YWxXb3JkcyIsInJlbmRlckRhc2hib2FyZCIsInJlbmRlciIsImpzeCIsIlRoZW1lUHJvdmlkZXIiLCJjaGlsZHJlbiIsIlByb2dyZXNzUHJvdmlkZXIiLCJDdXJyZW50TGV2ZWxQcm92aWRlciIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJpdCIsIm1vY2tSZXR1cm5WYWx1ZSIsImxhc3RBY3Rpdml0eSIsImlzTG9hZGluZyIsInNhdmVBY3Rpdml0eSIsImNsZWFyQWN0aXZpdHkiLCJyZWxvYWQiLCJfcmVuZGVyRGFzaGJvYXJkIiwiZ2V0QnlUZXN0SWQiLCJnZXRCeVRleHQiLCJ3YWl0Rm9yIiwiZXhwZWN0IiwidG9CZVRydXRoeSIsImNvbnRpbnVlQnV0dG9uIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsInBhdGhuYW1lIiwicGFyYW1zIiwiX3JlbmRlckRhc2hib2FyZDIiLCJzdGFydEJ1dHRvbiJdLCJzb3VyY2VzIjpbInJlc3VtZS1sYXN0LWFjdGl2aXR5LnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gX190ZXN0c19fL2ludGVncmF0aW9uL3Jlc3VtZS1sYXN0LWFjdGl2aXR5LnRlc3QuanNcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCwgd2FpdEZvciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IHJvdXRlciB9IGZyb20gJ2V4cG8tcm91dGVyJztcbmltcG9ydCBEYXNoYm9hcmQgZnJvbSAnLi4vLi4vc3JjL3NjcmVlbnMvRGFzaGJvYXJkJztcbmltcG9ydCAqIGFzIExhc3RBY3Rpdml0eSBmcm9tICcuLi8uLi9zcmMvaG9va3MvdXNlTGFzdEFjdGl2aXR5JztcbmltcG9ydCB7IFByb2dyZXNzUHJvdmlkZXIgfSBmcm9tICcuLi8uLi9zcmMvY29udGV4dHMvUHJvZ3Jlc3NDb250ZXh0JztcbmltcG9ydCB7IFRoZW1lUHJvdmlkZXIgfSBmcm9tICcuLi8uLi9zcmMvY29udGV4dHMvVGhlbWVDb250ZXh0JztcbmltcG9ydCB7IEN1cnJlbnRMZXZlbFByb3ZpZGVyIH0gZnJvbSAnLi4vLi4vc3JjL2NvbnRleHRzL0N1cnJlbnRMZXZlbENvbnRleHQnO1xuXG4vLyBNb2NrIGRlIGV4cG8tcm91dGVyXG5qZXN0Lm1vY2soJ2V4cG8tcm91dGVyJywgKCkgPT4gKHtcbiAgcm91dGVyOiB7XG4gICAgcHVzaDogamVzdC5mbigpLFxuICB9LFxuICB1c2VGb2N1c0VmZmVjdDogamVzdC5mbihjYWxsYmFjayA9PiBjYWxsYmFjaygpKSxcbn0pKTtcblxuLy8gTW9jayBkZXMgaG9va3MgZXQgY29udGV4dGVzXG5qZXN0Lm1vY2soJy4uLy4uL3NyYy9ob29rcy91c2VMYXN0QWN0aXZpdHknKTtcblxuY29uc3QgbW9ja1JlZnJlc2ggPSBqZXN0LmZuKCk7XG5jb25zdCBtb2NrR2V0TGV2ZWxQcm9ncmVzcyA9IGplc3QuZm4oKCkgPT4gNTApO1xuXG5qZXN0Lm1vY2soJy4uLy4uL3NyYy9ob29rcy91c2VSZWFsVGltZVByb2dyZXNzJywgKCkgPT4gKCkgPT4gKHtcbiAgZ2V0TGV2ZWxQcm9ncmVzczogbW9ja0dldExldmVsUHJvZ3Jlc3MsXG4gIHJlZnJlc2g6IG1vY2tSZWZyZXNoLFxufSkpO1xuXG5jb25zdCBtb2NrTGFzdEFjdGl2aXR5RGF0YSA9IHtcbiAgdHlwZTogJ2dyYW1tYXInLFxuICBsZXZlbDogJ0ExJyxcbiAgdGl0bGU6ICdHcmFtbWFpcmUgZGUgYmFzZScsXG4gIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgbWV0YWRhdGE6IHtcbiAgICBjYXRlZ29yeUluZGV4OiAxLFxuICAgIHdvcmQ6IDUsXG4gICAgdG90YWxXb3JkczogMTUsXG4gIH0sXG59O1xuXG5jb25zdCByZW5kZXJEYXNoYm9hcmQgPSAoKSA9PiB7XG4gIHJldHVybiByZW5kZXIoXG4gICAgPFRoZW1lUHJvdmlkZXI+XG4gICAgICA8UHJvZ3Jlc3NQcm92aWRlcj5cbiAgICAgICAgPEN1cnJlbnRMZXZlbFByb3ZpZGVyPlxuICAgICAgICAgIDxEYXNoYm9hcmQgLz5cbiAgICAgICAgPC9DdXJyZW50TGV2ZWxQcm92aWRlcj5cbiAgICAgIDwvUHJvZ3Jlc3NQcm92aWRlcj5cbiAgICA8L1RoZW1lUHJvdmlkZXI+XG4gICk7XG59O1xuXG5kZXNjcmliZSgnU2PDqW5hcmlvIDI6IFJlcHJpc2UgZGUgbGEgZGVybmnDqHJlIGFjdGl2aXTDqScsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gIH0pO1xuXG4gIGl0KCdkZXZyYWl0IGFmZmljaGVyIGxhIHNlY3Rpb24gXCJDb250aW51ZXJcIiBldCBuYXZpZ3VlciBjb3JyZWN0ZW1lbnQnLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gMS4gU2ltdWxlciB1bmUgYWN0aXZpdMOpIGV4aXN0YW50ZVxuICAgIExhc3RBY3Rpdml0eS5kZWZhdWx0Lm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICBsYXN0QWN0aXZpdHk6IG1vY2tMYXN0QWN0aXZpdHlEYXRhLFxuICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgIHNhdmVBY3Rpdml0eTogamVzdC5mbigpLFxuICAgICAgY2xlYXJBY3Rpdml0eTogamVzdC5mbigpLFxuICAgICAgcmVsb2FkOiBqZXN0LmZuKCksXG4gICAgfSk7XG5cbiAgICBjb25zdCB7IGdldEJ5VGVzdElkLCBnZXRCeVRleHQgfSA9IHJlbmRlckRhc2hib2FyZCgpO1xuXG4gICAgLy8gMi4gVsOpcmlmaWVyIHF1ZSBsYSBzZWN0aW9uIFwiQ29udGludWVyXCIgZXN0IGFmZmljaMOpZSBhdmVjIGxlcyBib25uZXMgaW5mb3JtYXRpb25zXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2hlcm8tY29udGludWUtc2VjdGlvbicpKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG5cbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdHcmFtbWFpcmUgZGUgYmFzZScpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgvTml2IEExLykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KC9Nb3QgNlxcLzE1LykpLnRvQmVUcnV0aHkoKTsgLy8gNSsxIC8gMTVcblxuICAgIC8vIDMuIFNpbXVsZXIgdW4gY2xpYyBzdXIgbGUgYm91dG9uIFwiQ29udGludWVyXCJcbiAgICBjb25zdCBjb250aW51ZUJ1dHRvbiA9IGdldEJ5VGVzdElkKCdjb250aW51ZS1hY3Rpdml0eS1idXR0b24nKTtcbiAgICBmaXJlRXZlbnQucHJlc3MoY29udGludWVCdXR0b24pO1xuXG4gICAgLy8gNC4gVsOpcmlmaWVyIHF1ZSBsYSBuYXZpZ2F0aW9uIGEgw6l0w6kgYXBwZWzDqWUgYXZlYyBsZXMgYm9ucyBwYXJhbcOodHJlc1xuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KHJvdXRlci5wdXNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAgIHBhdGhuYW1lOiAnL3RhYnMvZ3JhbW1hckV4ZXJjaXNlJyxcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgbGV2ZWw6ICdBMScsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ2RldnJhaXQgYWZmaWNoZXIgbGEgc2VjdGlvbiB2aWRlIHNcXCdpbCBuXFwneSBhIHBhcyBkZSBkZXJuacOocmUgYWN0aXZpdMOpJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIDEuIFNpbXVsZXIgYXVjdW5lIGFjdGl2aXTDqVxuICAgIExhc3RBY3Rpdml0eS5kZWZhdWx0Lm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICBsYXN0QWN0aXZpdHk6IG51bGwsXG4gICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgc2F2ZUFjdGl2aXR5OiBqZXN0LmZuKCksXG4gICAgICBjbGVhckFjdGl2aXR5OiBqZXN0LmZuKCksXG4gICAgICByZWxvYWQ6IGplc3QuZm4oKSxcbiAgICB9KTtcblxuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQsIGdldEJ5VGV4dCB9ID0gcmVuZGVyRGFzaGJvYXJkKCk7XG5cbiAgICAvLyAyLiBWw6lyaWZpZXIgcXVlIGxhIHNlY3Rpb24gdmlkZSBlc3QgYWZmaWNow6llXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2hlcm8tZW1wdHktc2VjdGlvbicpKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG5cbiAgICBleHBlY3QoZ2V0QnlUZXh0KFwiQ29tbWVuY2VyIGwnYXBwcmVudGlzc2FnZVwiKSkudG9CZVRydXRoeSgpO1xuXG4gICAgLy8gMy4gU2ltdWxlciB1biBjbGljIHN1ciBsZSBib3V0b24gcG91ciBjb21tZW5jZXJcbiAgICBjb25zdCBzdGFydEJ1dHRvbiA9IGdldEJ5VGVzdElkKCdsZXZlbC1zZWxlY3Rpb24tYnV0dG9uJyk7XG4gICAgZmlyZUV2ZW50LnByZXNzKHN0YXJ0QnV0dG9uKTtcblxuICAgIC8vIDQuIFbDqXJpZmllciBsYSBuYXZpZ2F0aW9uIHZlcnMgbGEgc8OpbGVjdGlvbiBkZSBuaXZlYXVcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChyb3V0ZXIucHVzaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy90YWJzL2xldmVsU2VsZWN0aW9uJyk7XG4gICAgfSk7XG4gIH0pO1xufSk7Il0sIm1hcHBpbmdzIjoiQUFXQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsYUFBYSxFQUFFO0VBQUEsT0FBTztJQUM5QkMsTUFBTSxFQUFFO01BQ05DLElBQUksRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUNEQyxjQUFjLEVBQUVGLElBQUksQ0FBQ0MsRUFBRSxDQUFDLFVBQUFFLFFBQVE7TUFBQSxPQUFJQSxRQUFRLENBQUMsQ0FBQztJQUFBO0VBQ2hELENBQUM7QUFBQSxDQUFDLENBQUM7QUFHSFAsV0FBQSxHQUFLQyxJQUFJLENBQUMsaUNBQWlDLENBQUM7QUFLNUNELFdBQUEsR0FBS0MsSUFBSSxDQUFDLHFDQUFxQyxFQUFFO0VBQUEsT0FBTTtJQUFBLE9BQU87TUFDNURPLGdCQUFnQixFQUFFQyxvQkFBb0I7TUFDdENDLE9BQU8sRUFBRUM7SUFDWCxDQUFDO0VBQUEsQ0FBQztBQUFBLEVBQUM7QUFBQyxJQUFBQyxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsa0JBQUEs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