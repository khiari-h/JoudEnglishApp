25652d99de03aa4e0ba277dd8885ee5e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = LogBoxNotificationMessage;
var _View = _interopRequireDefault(require("../../Components/View/View"));
var _StyleSheet = _interopRequireDefault(require("../../StyleSheet/StyleSheet"));
var _Text = _interopRequireDefault(require("../../Text/Text"));
var _LogBoxMessage = _interopRequireDefault(require("./LogBoxMessage"));
var LogBoxStyle = _interopRequireWildcard(require("./LogBoxStyle"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function LogBoxNotificationMessage(props) {
  return (0, _jsxRuntime.jsx)(_View.default, {
    style: styles.container,
    children: (0, _jsxRuntime.jsx)(_Text.default, {
      numberOfLines: 1,
      style: styles.text,
      children: props.message && (0, _jsxRuntime.jsx)(_LogBoxMessage.default, {
        plaintext: true,
        message: props.message,
        style: styles.substitutionText
      })
    })
  });
}
var styles = _StyleSheet.default.create({
  container: {
    alignSelf: 'stretch',
    flexGrow: 1,
    flexShrink: 1,
    flexBasis: 'auto',
    borderLeftColor: LogBoxStyle.getTextColor(0.2),
    borderLeftWidth: 1,
    paddingLeft: 8
  },
  text: {
    color: LogBoxStyle.getTextColor(1),
    flex: 1,
    fontSize: 14,
    lineHeight: 22
  },
  substitutionText: {
    color: LogBoxStyle.getTextColor(0.6)
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfVmlldyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX1N0eWxlU2hlZXQiLCJfVGV4dCIsIl9Mb2dCb3hNZXNzYWdlIiwiTG9nQm94U3R5bGUiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIlJlYWN0IiwiX2pzeFJ1bnRpbWUiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIkxvZ0JveE5vdGlmaWNhdGlvbk1lc3NhZ2UiLCJwcm9wcyIsImpzeCIsInN0eWxlIiwic3R5bGVzIiwiY29udGFpbmVyIiwiY2hpbGRyZW4iLCJudW1iZXJPZkxpbmVzIiwidGV4dCIsIm1lc3NhZ2UiLCJwbGFpbnRleHQiLCJzdWJzdGl0dXRpb25UZXh0IiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsImFsaWduU2VsZiIsImZsZXhHcm93IiwiZmxleFNocmluayIsImZsZXhCYXNpcyIsImJvcmRlckxlZnRDb2xvciIsImdldFRleHRDb2xvciIsImJvcmRlckxlZnRXaWR0aCIsInBhZGRpbmdMZWZ0IiwiY29sb3IiLCJmbGV4IiwiZm9udFNpemUiLCJsaW5lSGVpZ2h0Il0sInNvdXJjZXMiOlsiTG9nQm94Tm90aWZpY2F0aW9uTWVzc2FnZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IHR5cGUge01lc3NhZ2UgYXMgTWVzc2FnZVR5cGV9IGZyb20gJy4uL0RhdGEvcGFyc2VMb2dCb3hMb2cnO1xuXG5pbXBvcnQgVmlldyBmcm9tICcuLi8uLi9Db21wb25lbnRzL1ZpZXcvVmlldyc7XG5pbXBvcnQgU3R5bGVTaGVldCBmcm9tICcuLi8uLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnO1xuaW1wb3J0IFRleHQgZnJvbSAnLi4vLi4vVGV4dC9UZXh0JztcbmltcG9ydCBMb2dCb3hNZXNzYWdlIGZyb20gJy4vTG9nQm94TWVzc2FnZSc7XG5pbXBvcnQgKiBhcyBMb2dCb3hTdHlsZSBmcm9tICcuL0xvZ0JveFN0eWxlJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTG9nQm94Tm90aWZpY2F0aW9uTWVzc2FnZShwcm9wczoge1xuICBtZXNzYWdlOiBNZXNzYWdlVHlwZSxcbn0pOiBSZWFjdC5Ob2RlIHtcbiAgcmV0dXJuIChcbiAgICA8VmlldyBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn0+XG4gICAgICA8VGV4dCBudW1iZXJPZkxpbmVzPXsxfSBzdHlsZT17c3R5bGVzLnRleHR9PlxuICAgICAgICB7cHJvcHMubWVzc2FnZSAmJiAoXG4gICAgICAgICAgPExvZ0JveE1lc3NhZ2VcbiAgICAgICAgICAgIHBsYWludGV4dFxuICAgICAgICAgICAgbWVzc2FnZT17cHJvcHMubWVzc2FnZX1cbiAgICAgICAgICAgIHN0eWxlPXtzdHlsZXMuc3Vic3RpdHV0aW9uVGV4dH1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgPC9UZXh0PlxuICAgIDwvVmlldz5cbiAgKTtcbn1cblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBjb250YWluZXI6IHtcbiAgICBhbGlnblNlbGY6ICdzdHJldGNoJyxcbiAgICBmbGV4R3JvdzogMSxcbiAgICBmbGV4U2hyaW5rOiAxLFxuICAgIGZsZXhCYXNpczogJ2F1dG8nLFxuICAgIGJvcmRlckxlZnRDb2xvcjogTG9nQm94U3R5bGUuZ2V0VGV4dENvbG9yKDAuMiksXG4gICAgYm9yZGVyTGVmdFdpZHRoOiAxLFxuICAgIHBhZGRpbmdMZWZ0OiA4LFxuICB9LFxuICB0ZXh0OiB7XG4gICAgY29sb3I6IExvZ0JveFN0eWxlLmdldFRleHRDb2xvcigxKSxcbiAgICBmbGV4OiAxLFxuICAgIGZvbnRTaXplOiAxNCxcbiAgICBsaW5lSGVpZ2h0OiAyMixcbiAgfSxcbiAgc3Vic3RpdHV0aW9uVGV4dDoge1xuICAgIGNvbG9yOiBMb2dCb3hTdHlsZS5nZXRUZXh0Q29sb3IoMC42KSxcbiAgfSxcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7OztBQVlBLElBQUFBLEtBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFdBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLEtBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLGNBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFJLFdBQUEsR0FBQUMsdUJBQUEsQ0FBQUwsT0FBQTtBQUNBLElBQUFNLEtBQUEsR0FBQUQsdUJBQUEsQ0FBQUwsT0FBQTtBQUErQixJQUFBTyxXQUFBLEdBQUFQLE9BQUE7QUFBQSxTQUFBSyx3QkFBQUcsQ0FBQSxFQUFBQyxDQUFBLDZCQUFBQyxPQUFBLE1BQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQUwsdUJBQUEsWUFBQUEsd0JBQUFHLENBQUEsRUFBQUMsQ0FBQSxTQUFBQSxDQUFBLElBQUFELENBQUEsSUFBQUEsQ0FBQSxDQUFBSyxVQUFBLFNBQUFMLENBQUEsTUFBQU0sQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsS0FBQUMsU0FBQSxRQUFBQyxPQUFBLEVBQUFWLENBQUEsaUJBQUFBLENBQUEsdUJBQUFBLENBQUEseUJBQUFBLENBQUEsU0FBQVEsQ0FBQSxNQUFBRixDQUFBLEdBQUFMLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLFFBQUFHLENBQUEsQ0FBQUssR0FBQSxDQUFBWCxDQUFBLFVBQUFNLENBQUEsQ0FBQU0sR0FBQSxDQUFBWixDQUFBLEdBQUFNLENBQUEsQ0FBQU8sR0FBQSxDQUFBYixDQUFBLEVBQUFRLENBQUEsY0FBQU0sRUFBQSxJQUFBZCxDQUFBLGdCQUFBYyxFQUFBLE9BQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBaEIsQ0FBQSxFQUFBYyxFQUFBLE9BQUFQLENBQUEsSUFBQUQsQ0FBQSxHQUFBVyxNQUFBLENBQUFDLGNBQUEsS0FBQUQsTUFBQSxDQUFBRSx3QkFBQSxDQUFBbkIsQ0FBQSxFQUFBYyxFQUFBLE9BQUFQLENBQUEsQ0FBQUssR0FBQSxJQUFBTCxDQUFBLENBQUFNLEdBQUEsSUFBQVAsQ0FBQSxDQUFBRSxDQUFBLEVBQUFNLEVBQUEsRUFBQVAsQ0FBQSxJQUFBQyxDQUFBLENBQUFNLEVBQUEsSUFBQWQsQ0FBQSxDQUFBYyxFQUFBLFdBQUFOLENBQUEsS0FBQVIsQ0FBQSxFQUFBQyxDQUFBO0FBRWhCLFNBQVNtQix5QkFBeUJBLENBQUNDLEtBRWpELEVBQWM7RUFDYixPQUNFLElBQUF0QixXQUFBLENBQUF1QixHQUFBLEVBQUNoQyxLQUFBLENBQUFvQixPQUFJO0lBQUNhLEtBQUssRUFBRUMsTUFBTSxDQUFDQyxTQUFVO0lBQUFDLFFBQUEsRUFDNUIsSUFBQTNCLFdBQUEsQ0FBQXVCLEdBQUEsRUFBQzVCLEtBQUEsQ0FBQWdCLE9BQUk7TUFBQ2lCLGFBQWEsRUFBRSxDQUFFO01BQUNKLEtBQUssRUFBRUMsTUFBTSxDQUFDSSxJQUFLO01BQUFGLFFBQUEsRUFDeENMLEtBQUssQ0FBQ1EsT0FBTyxJQUNaLElBQUE5QixXQUFBLENBQUF1QixHQUFBLEVBQUMzQixjQUFBLENBQUFlLE9BQWE7UUFDWm9CLFNBQVM7UUFDVEQsT0FBTyxFQUFFUixLQUFLLENBQUNRLE9BQVE7UUFDdkJOLEtBQUssRUFBRUMsTUFBTSxDQUFDTztNQUFpQixDQUNoQztJQUNGLENBQ0c7RUFBQyxDQUNILENBQUM7QUFFWDtBQUVBLElBQU1QLE1BQU0sR0FBR1EsbUJBQVUsQ0FBQ0MsTUFBTSxDQUFDO0VBQy9CUixTQUFTLEVBQUU7SUFDVFMsU0FBUyxFQUFFLFNBQVM7SUFDcEJDLFFBQVEsRUFBRSxDQUFDO0lBQ1hDLFVBQVUsRUFBRSxDQUFDO0lBQ2JDLFNBQVMsRUFBRSxNQUFNO0lBQ2pCQyxlQUFlLEVBQUUxQyxXQUFXLENBQUMyQyxZQUFZLENBQUMsR0FBRyxDQUFDO0lBQzlDQyxlQUFlLEVBQUUsQ0FBQztJQUNsQkMsV0FBVyxFQUFFO0VBQ2YsQ0FBQztFQUNEYixJQUFJLEVBQUU7SUFDSmMsS0FBSyxFQUFFOUMsV0FBVyxDQUFDMkMsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUNsQ0ksSUFBSSxFQUFFLENBQUM7SUFDUEMsUUFBUSxFQUFFLEVBQUU7SUFDWkMsVUFBVSxFQUFFO0VBQ2QsQ0FBQztFQUNEZCxnQkFBZ0IsRUFBRTtJQUNoQlcsS0FBSyxFQUFFOUMsV0FBVyxDQUFDMkMsWUFBWSxDQUFDLEdBQUc7RUFDckM7QUFDRixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=