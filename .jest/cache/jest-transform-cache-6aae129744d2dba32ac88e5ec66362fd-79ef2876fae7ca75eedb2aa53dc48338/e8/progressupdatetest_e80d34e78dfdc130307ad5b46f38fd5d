addf9edb1d4132c8d49110e4cae18b8a
_getJestObj().mock('expo-router', function () {
  return Object.assign({}, jest.requireActual('expo-router'), {
    router: {
      push: jest.fn()
    },
    useFocusEffect: jest.fn()
  });
});
_getJestObj().mock('../../src/screens/VocabularyRevision/RevisionOrchestrator', function () {
  var _require = require('react-native'),
    View = _require.View;
  return function () {
    return (0, _jsxRuntime.jsx)(View, {
      testID: "revision-orchestrator-mock"
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Dashboard = _interopRequireDefault(require("../../src/screens/Dashboard"));
var _AppProvider = require("../../src/contexts/AppProvider");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Integration: Progress Update', function () {
  it('should update progress on Dashboard after completing an exercise', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AppProvider.AppProvider, {
        children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
      })),
      getByText = _render.getByText,
      findByText = _render.findByText;
    yield findByText('Continue');
    expect(getByText(/0%/i)).toBeTruthy();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsInJvdXRlciIsInB1c2giLCJmbiIsInVzZUZvY3VzRWZmZWN0IiwiX3JlcXVpcmUiLCJyZXF1aXJlIiwiVmlldyIsIl9qc3hSdW50aW1lIiwianN4IiwidGVzdElEIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9EYXNoYm9hcmQiLCJfQXBwUHJvdmlkZXIiLCJfcmVxdWlyZTIiLCJkZXNjcmliZSIsIml0IiwiZGVmYXVsdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJBcHBQcm92aWRlciIsImNoaWxkcmVuIiwiZ2V0QnlUZXh0IiwiZmluZEJ5VGV4dCIsImV4cGVjdCIsInRvQmVUcnV0aHkiXSwic291cmNlcyI6WyJwcm9ncmVzcy11cGRhdGUudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIGFjdCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCBEYXNoYm9hcmQgZnJvbSAnLi4vLi4vc3JjL3NjcmVlbnMvRGFzaGJvYXJkJztcbmltcG9ydCB7IEFwcFByb3ZpZGVyIH0gZnJvbSAnLi4vLi4vc3JjL2NvbnRleHRzL0FwcFByb3ZpZGVyJztcblxuLy8gTW9jayBkZSBFeHBvIFJvdXRlclxuamVzdC5tb2NrKCdleHBvLXJvdXRlcicsICgpID0+ICh7XG4gIC4uLmplc3QucmVxdWlyZUFjdHVhbCgnZXhwby1yb3V0ZXInKSxcbiAgcm91dGVyOiB7XG4gICAgcHVzaDogamVzdC5mbigpLFxuICB9LFxuICB1c2VGb2N1c0VmZmVjdDogamVzdC5mbigpLFxufSkpO1xuXG4vLyBNb2NrIHBvdXIgbGEgc2VjdGlvbiBkZSByw6l2aXNpb24gcXVpIHBvdXJyYWl0IMOqdHJlIGNvbXBsZXhlIMOgIGfDqXJlclxuamVzdC5tb2NrKCcuLi8uLi9zcmMvc2NyZWVucy9Wb2NhYnVsYXJ5UmV2aXNpb24vUmV2aXNpb25PcmNoZXN0cmF0b3InLCAoKSA9PiB7XG4gIGNvbnN0IHsgVmlldyB9ID0gcmVxdWlyZSgncmVhY3QtbmF0aXZlJyk7XG4gIHJldHVybiAoKSA9PiA8VmlldyB0ZXN0SUQ9XCJyZXZpc2lvbi1vcmNoZXN0cmF0b3ItbW9ja1wiIC8+O1xufSk7XG5cbmRlc2NyaWJlKCdJbnRlZ3JhdGlvbjogUHJvZ3Jlc3MgVXBkYXRlJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIHVwZGF0ZSBwcm9ncmVzcyBvbiBEYXNoYm9hcmQgYWZ0ZXIgY29tcGxldGluZyBhbiBleGVyY2lzZScsIGFzeW5jICgpID0+IHtcbiAgICAvLyAxLiBBUlJBTkdFOiBSZW5kcmUgbGUgRGFzaGJvYXJkIGF2ZWMgbGVzIHByb3ZpZGVycyBuw6ljZXNzYWlyZXNcbiAgICAvLyBBcHBQcm92aWRlciBlc3QgdW4gYm9uIGNhbmRpZGF0IGNhciBpbCBkZXZyYWl0IGNvbnRlbmlyIHRvdXMgbGVzIGNvbnRleHRlc1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0LCBmaW5kQnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICA8QXBwUHJvdmlkZXI+XG4gICAgICAgIDxEYXNoYm9hcmQgLz5cbiAgICAgIDwvQXBwUHJvdmlkZXI+XG4gICAgKTtcblxuICAgIC8vIEF0dGVuZHJlIHF1ZSBsZSBjaGFyZ2VtZW50IGluaXRpYWwgc29pdCB0ZXJtaW7DqVxuICAgIGF3YWl0IGZpbmRCeVRleHQoJ0NvbnRpbnVlJyk7IFxuXG4gICAgLy8gVsOpcmlmaWVyIGwnw6l0YXQgaW5pdGlhbCAocGFyIGV4ZW1wbGUsIGxhIHByb2dyZXNzaW9uIGQndW4gbml2ZWF1KVxuICAgIC8vIE5PVEU6IENlIHNlcmEgYWRhcHTDqSBlbiBmb25jdGlvbiBkZSBsJ2ltcGzDqW1lbnRhdGlvbiByw6llbGxlXG4gICAgLy8gUG91ciBsJ2luc3RhbnQsIG9uIHN1cHBvc2UgcXUnb24gcGV1dCB0cm91dmVyIGxlIHRleHRlIFwiMCVcIlxuICAgIGV4cGVjdChnZXRCeVRleHQoLzAlL2kpKS50b0JlVHJ1dGh5KCk7XG5cbiAgICAvLyAyLiBBQ1Q6IFNpbXVsZXIgbGEgZmluIGQndW4gZXhlcmNpY2UgZXQgbGEgbWlzZSDDoCBqb3VyIGR1IHByb2dyw6hzXG4gICAgLy8gRGFucyB1biB2cmFpIHRlc3QsIG9uIGFwcGVsbGVyYWl0IGljaSB1bmUgZm9uY3Rpb24gcXVpIHNpbXVsZVxuICAgIC8vIGxhIGxvZ2lxdWUgZGUgYHVzZVF1aXpFbmdpbmVgIGV0IG1ldCDDoCBqb3VyIGxlIGBQcm9ncmVzc0NvbnRleHRgLlxuICAgIC8vIFBvdXIgY2UgcHJlbWllciBqZXQsIG5vdXMgYWxsb25zIHNpbXVsZXIgY2VsYSBjb25jZXB0dWVsbGVtZW50LlxuICAgIC8vIEwnw6l0YXBlIHN1aXZhbnRlIHNlcmEgZGUgcmVuZHJlIGNlbGEgZm9uY3Rpb25uZWwuXG4gICAgXG4gICAgLy8gLS0tIFNJTVVMQVRJT04gKMOgIHJlbXBsYWNlciBwYXIgdW5lIHZyYWllIGludGVyYWN0aW9uKSAtLS1cbiAgICAvLyBJbWFnaW5vbnMgcXVlIG5vdXMgYXZvbnMgdW5lIGZvbmN0aW9uIGBjb21wbGV0ZUV4ZXJjaXNlYCBxdWkgbWV0IMOgIGpvdXIgbGUgY29udGV4dGUuXG4gICAgLy8gYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAvLyAgIHByb2dyZXNzQ29udGV4dC51cGRhdGVQcm9ncmVzcygnMScsICd2b2NhYnVsYXJ5JywgMTApO1xuICAgIC8vIH0pO1xuICAgIC8vIC0tLSBGSU4gU0lNVUxBVElPTiAtLS1cblxuICAgIC8vIDMuIEFTU0VSVDogVsOpcmlmaWVyIHF1ZSBsZSBEYXNoYm9hcmQgcmVmbMOodGUgbGEgbm91dmVsbGUgcHJvZ3Jlc3Npb25cbiAgICAvLyBPbiBzJ2F0dGVuZHJhaXQgw6Agdm9pciBsYSBwcm9ncmVzc2lvbiBtaXNlIMOgIGpvdXIuXG4gICAgLy8gUGFyIGV4ZW1wbGUsIHNpIG9uIGEgYWpvdXTDqSAxMCUgZGUgcHJvZ3Jlc3Npb24gOlxuICAgIC8vIGNvbnN0IHVwZGF0ZWRQcm9ncmVzcyA9IGF3YWl0IGZpbmRCeVRleHQoLzEwJS9pKTtcbiAgICAvLyBleHBlY3QodXBkYXRlZFByb2dyZXNzKS50b0JlVHJ1dGh5KCk7XG5cbiAgICAvLyBOT1RFOiBDZSB0ZXN0IGVzdCB1biBzcXVlbGV0dGUuIExhIHByb2NoYWluZSDDqXRhcGUgc2VyYSBkZSBsZSBjb25uZWN0ZXJcbiAgICAvLyBhdXggdnJhaXMgbcOpY2FuaXNtZXMgZGUgbWlzZSDDoCBqb3VyIGR1IFByb2dyZXNzQ29udGV4dCBwb3VyIGxlIHJlbmRyZSBmb25jdGlvbm5lbC5cbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBT0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLGFBQWEsRUFBRTtFQUFBLE9BQUFDLE1BQUEsQ0FBQUMsTUFBQSxLQUNwQkMsSUFBSSxDQUFDQyxhQUFhLENBQUMsYUFBYSxDQUFDO0lBQ3BDQyxNQUFNLEVBQUU7TUFDTkMsSUFBSSxFQUFFSCxJQUFJLENBQUNJLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBQ0RDLGNBQWMsRUFBRUwsSUFBSSxDQUFDSSxFQUFFLENBQUM7RUFBQztBQUFBLENBQ3pCLENBQUM7QUFHSFIsV0FBQSxHQUFLQyxJQUFJLENBQUMsMkRBQTJELEVBQUUsWUFBTTtFQUMzRSxJQUFBUyxRQUFBLEdBQWlCQyxPQUFPLENBQUMsY0FBYyxDQUFDO0lBQWhDQyxJQUFJLEdBQUFGLFFBQUEsQ0FBSkUsSUFBSTtFQUNaLE9BQU87SUFBQSxPQUFNLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDRixJQUFJO01BQUNHLE1BQU0sRUFBQztJQUE0QixDQUFFLENBQUM7RUFBQTtBQUMzRCxDQUFDLENBQUM7QUFBQyxJQUFBQyxzQkFBQSxHQUFBTCxPQUFBO0FBQUEsSUFBQU0sa0JBQUEsR0FBQUQsc0JBQUEsQ0FBQUwsT0FBQTtBQWxCSCxJQUFBTyxNQUFBLEdBQUFGLHNCQUFBLENBQUFMLE9BQUE7QUFDQSxJQUFBUSxZQUFBLEdBQUFSLE9BQUE7QUFDQSxJQUFBUyxVQUFBLEdBQUFKLHNCQUFBLENBQUFMLE9BQUE7QUFDQSxJQUFBVSxZQUFBLEdBQUFWLE9BQUE7QUFBNkQsSUFBQUUsV0FBQSxHQUFBRixPQUFBO0FBQUEsU0FBQVgsWUFBQTtFQUFBLElBQUFzQixTQUFBLEdBQUFYLE9BQUE7SUFBQVAsSUFBQSxHQUFBa0IsU0FBQSxDQUFBbEIsSUFBQTtFQUFBSixXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBSSxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFpQjdEbUIsUUFBUSxDQUFDLDhCQUE4QixFQUFFLFlBQU07RUFDN0NDLEVBQUUsQ0FBQyxrRUFBa0UsTUFBQVAsa0JBQUEsQ0FBQVEsT0FBQSxFQUFFLGFBQVk7SUFHakYsSUFBQUMsT0FBQSxHQUFrQyxJQUFBQyxtQkFBTSxFQUN0QyxJQUFBZCxXQUFBLENBQUFDLEdBQUEsRUFBQ08sWUFBQSxDQUFBTyxXQUFXO1FBQUFDLFFBQUEsRUFDVixJQUFBaEIsV0FBQSxDQUFBQyxHQUFBLEVBQUNNLFVBQUEsQ0FBQUssT0FBUyxJQUFFO01BQUMsQ0FDRixDQUNmLENBQUM7TUFKT0ssU0FBUyxHQUFBSixPQUFBLENBQVRJLFNBQVM7TUFBRUMsVUFBVSxHQUFBTCxPQUFBLENBQVZLLFVBQVU7SUFPN0IsTUFBTUEsVUFBVSxDQUFDLFVBQVUsQ0FBQztJQUs1QkMsTUFBTSxDQUFDRixTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQ0csVUFBVSxDQUFDLENBQUM7RUF1QnZDLENBQUMsRUFBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==