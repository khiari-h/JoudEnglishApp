c18cc96f89049710e425eb117a75962b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _react = require("react");
var _HeroCard = _interopRequireDefault(require("../../../../components/ui/HeroCard"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var HomophoneChoices = function HomophoneChoices(_ref) {
  var sentence = _ref.sentence,
    _ref$choices = _ref.choices,
    choices = _ref$choices === void 0 ? [] : _ref$choices,
    selectedChoice = _ref.selectedChoice,
    onSelectChoice = _ref.onSelectChoice,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? "#3b82f6" : _ref$levelColor;
  var styles = (0, _style.default)(levelColor);
  var handleSelectChoice = (0, _react.useCallback)(function (choice) {
    return function () {
      if (!disabled) {
        onSelectChoice(choice);
      }
    };
  }, [onSelectChoice, disabled]);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsx)(_HeroCard.default, {
      content: sentence,
      fontSize: 20,
      levelColor: levelColor,
      showUnderline: false,
      style: styles.heroCard
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: styles.choicesLabel,
      children: "Choisissez le mot correct :"
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.choicesGrid,
      children: choices.map(function (choice, index) {
        var isSelected = selectedChoice === choice;
        return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          style: [styles.choiceButton, isSelected && {
            borderColor: levelColor,
            backgroundColor: `${levelColor}15`
          }, disabled && styles.disabledChoice],
          onPress: handleSelectChoice(choice),
          disabled: disabled,
          children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.choiceContent,
            children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
              style: [styles.choiceIndicator, isSelected && {
                backgroundColor: levelColor
              }],
              children: (0, _jsxRuntime.jsxs)(_reactNative.Text, {
                style: [styles.choiceIndicatorText, isSelected && {
                  color: 'white'
                }],
                children: [String.fromCharCode(65 + index), " "]
              })
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: [styles.choiceText, isSelected && {
                color: levelColor,
                fontWeight: '700'
              }],
              children: choice
            })]
          })
        }, choice);
      })
    })]
  });
};
var _default = exports.default = HomophoneChoices;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,