{"version":3,"names":["_getJestObj","mock","_interopRequireDefault","require","_react","_reactNative","_SimpleMetrics","_ThemeContext","_useActivityMetrics","_useDailyWords","_jsxRuntime","_require","jest","describe","mockThemeContext","colors","surface","text","textSecondary","renderWithTheme","component","themeValue","arguments","length","undefined","render","jsx","ThemeContext","Provider","value","children","beforeEach","clearAllMocks","it","useActivityMetrics","mockReturnValue","currentStreak","streakTrend","formattedTime","useDailyWords","wordsToday","isLoading","_renderWithTheme","default","getByText","expect","toBeTruthy","_renderWithTheme2","_renderWithTheme3","queryByText","toBeNull","_renderWithTheme4","_renderWithTheme5","_renderWithTheme6","_renderWithTheme7","_renderWithTheme8","_renderWithTheme9","_renderWithTheme0","_renderWithTheme1","_renderWithTheme10","trendElements","customColor","_renderWithTheme11","accentColor","_renderWithTheme12","_render","_renderWithTheme13","_renderWithTheme14","_renderWithTheme15","_renderWithTheme16","_renderWithTheme17"],"sources":["SimpleMetrics.test.js"],"sourcesContent":["// __tests__/screens/Dashboard/components/SimpleMetrics.test.js\nimport React from 'react';\nimport { render, waitFor } from '@testing-library/react-native';\nimport SimpleMetrics from '../../../../src/screens/Dashboard/components/SimpleMetrics';\nimport { ThemeContext } from '../../../../src/contexts/ThemeContext';\nimport useActivityMetrics from '../../../../src/hooks/useActivityMetrics';\nimport useDailyWords from '../../../../src/hooks/useDailyWords';\n\n// Mock des hooks\njest.mock('../../../../src/hooks/useActivityMetrics');\njest.mock('../../../../src/hooks/useDailyWords');\n\ndescribe('SimpleMetrics', () => {\n  const mockThemeContext = {\n    colors: {\n      surface: '#FFFFFF',\n      text: '#1F2937',\n      textSecondary: '#6B7280'\n    }\n  };\n\n  const renderWithTheme = (component, themeValue = mockThemeContext) => {\n    return render(\n      <ThemeContext.Provider value={themeValue}>\n        {component}\n      </ThemeContext.Provider>\n    );\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('État de chargement', () => {\n    it('devrait afficher l\\'indicateur de chargement', () => {\n      useActivityMetrics.mockReturnValue({\n        currentStreak: 0,\n        streakTrend: null,\n        formattedTime: '0min'\n      });\n\n      useDailyWords.mockReturnValue({\n        wordsToday: 0,\n        isLoading: true\n      });\n\n      const { getByText } = renderWithTheme(<SimpleMetrics />);\n\n      expect(getByText('Chargement des métriques...')).toBeTruthy();\n    });\n  });\n\n  describe('État vide (pas d\\'activité)', () => {\n    beforeEach(() => {\n      useActivityMetrics.mockReturnValue({\n        currentStreak: 0,\n        streakTrend: null,\n        formattedTime: '0min'\n      });\n\n      useDailyWords.mockReturnValue({\n        wordsToday: 0,\n        isLoading: false\n      });\n    });\n\n    it('devrait afficher l\\'état vide quand aucune activité', () => {\n      const { getByText } = renderWithTheme(<SimpleMetrics />);\n\n      expect(getByText('🎯')).toBeTruthy();\n      expect(getByText('Commencez votre première session !')).toBeTruthy();\n      expect(getByText('Vos statistiques apparaîtront ici')).toBeTruthy();\n    });\n\n    it('ne devrait pas afficher les métriques dans l\\'état vide', () => {\n      const { queryByText } = renderWithTheme(<SimpleMetrics />);\n\n      expect(queryByText('📊 Aujourd\\'hui')).toBeNull();\n      expect(queryByText('🔥')).toBeNull();\n      expect(queryByText('📚')).toBeNull();\n      expect(queryByText('⏱️')).toBeNull();\n    });\n  });\n\n  describe('Affichage des métriques avec activité', () => {\n    beforeEach(() => {\n      useActivityMetrics.mockReturnValue({\n        currentStreak: 5,\n        streakTrend: '+1 🔥',\n        formattedTime: '15min'\n      });\n\n      useDailyWords.mockReturnValue({\n        wordsToday: 12,\n        isLoading: false\n      });\n    });\n\n    it('devrait afficher le titre de section', () => {\n      const { getByText } = renderWithTheme(<SimpleMetrics />);\n\n      expect(getByText('📊 Aujourd\\'hui')).toBeTruthy();\n    });\n\n    it('devrait afficher toutes les métriques', () => {\n      const { getByText } = renderWithTheme(<SimpleMetrics />);\n\n      // Icônes\n      expect(getByText('🔥')).toBeTruthy();\n      expect(getByText('📚')).toBeTruthy();\n      expect(getByText('⏱️')).toBeTruthy();\n\n      // Valeurs\n      expect(getByText('5')).toBeTruthy();\n      expect(getByText('12')).toBeTruthy();\n      expect(getByText('15min')).toBeTruthy();\n\n      // Labels\n      expect(getByText('Jours de suite')).toBeTruthy();\n      expect(getByText('Mots aujourd\\'hui')).toBeTruthy();\n      expect(getByText('Temps aujourd\\'hui')).toBeTruthy();\n    });\n\n    it('devrait afficher le trend pour le streak', () => {\n      const { getByText } = renderWithTheme(<SimpleMetrics />);\n\n      expect(getByText('+1 🔥')).toBeTruthy();\n    });\n  });\n\n  describe('Gestion des valeurs nulles/undefined', () => {\n    it('devrait gérer les valeurs nulles gracieusement', () => {\n      useActivityMetrics.mockReturnValue({\n        currentStreak: null,\n        streakTrend: null,\n        formattedTime: null\n      });\n\n      useDailyWords.mockReturnValue({\n        wordsToday: null,\n        isLoading: false\n      });\n\n      const { getByText } = renderWithTheme(<SimpleMetrics />);\n\n      // Devrait afficher l'état vide\n      expect(getByText('Commencez votre première session !')).toBeTruthy();\n    });\n\n    it('devrait afficher 0 pour les valeurs undefined', () => {\n      useActivityMetrics.mockReturnValue({\n        currentStreak: undefined,\n        streakTrend: null,\n        formattedTime: '5min' // Au moins une valeur pour éviter l'état vide\n      });\n\n      useDailyWords.mockReturnValue({\n        wordsToday: undefined,\n        isLoading: false\n      });\n\n      const { getByText } = renderWithTheme(<SimpleMetrics />);\n\n      expect(getByText('0')).toBeTruthy(); // currentStreak\n      expect(getByText('5min')).toBeTruthy();\n    });\n  });\n\n  describe('Différents types de trends', () => {\n    it('devrait afficher un trend positif', () => {\n      useActivityMetrics.mockReturnValue({\n        currentStreak: 3,\n        streakTrend: '+2 💪',\n        formattedTime: '10min'\n      });\n\n      useDailyWords.mockReturnValue({\n        wordsToday: 8,\n        isLoading: false\n      });\n\n      const { getByText } = renderWithTheme(<SimpleMetrics />);\n\n      expect(getByText('+2 💪')).toBeTruthy();\n    });\n\n    it('devrait afficher un trend négatif', () => {\n      useActivityMetrics.mockReturnValue({\n        currentStreak: 1,\n        streakTrend: '-1',\n        formattedTime: '5min'\n      });\n\n      useDailyWords.mockReturnValue({\n        wordsToday: 3,\n        isLoading: false\n      });\n\n      const { getByText } = renderWithTheme(<SimpleMetrics />);\n\n      expect(getByText('-1')).toBeTruthy();\n    });\n\n    it('devrait afficher un trend neutre', () => {\n      useActivityMetrics.mockReturnValue({\n        currentStreak: 2,\n        streakTrend: '=',\n        formattedTime: '8min'\n      });\n\n      useDailyWords.mockReturnValue({\n        wordsToday: 5,\n        isLoading: false\n      });\n\n      const { getByText } = renderWithTheme(<SimpleMetrics />);\n\n      expect(getByText('=')).toBeTruthy();\n    });\n\n    it('ne devrait pas afficher de trend pour les mots et le temps', () => {\n      useActivityMetrics.mockReturnValue({\n        currentStreak: 4,\n        streakTrend: '+1 🔥',\n        formattedTime: '20min'\n      });\n\n      useDailyWords.mockReturnValue({\n        wordsToday: 15,\n        isLoading: false\n      });\n\n      const { queryByText } = renderWithTheme(<SimpleMetrics />);\n\n      // Seul le trend du streak devrait être visible\n      expect(queryByText('+1 🔥')).toBeTruthy();\n      \n      // Pas de trends pour les autres métriques\n      const trendElements = queryByText(/\\+|\\-/);\n      expect(trendElements).toBeTruthy(); // Seulement le trend du streak\n    });\n  });\n\n  describe('Couleurs et thème', () => {\n    it('devrait utiliser la couleur d\\'accent personnalisée', () => {\n      useActivityMetrics.mockReturnValue({\n        currentStreak: 0,\n        streakTrend: null,\n        formattedTime: '0min'\n      });\n\n      useDailyWords.mockReturnValue({\n        wordsToday: 0,\n        isLoading: true\n      });\n\n      const customColor = '#FF5722';\n      const { getByText } = renderWithTheme(\n        <SimpleMetrics accentColor={customColor} />\n      );\n\n      expect(getByText('Chargement des métriques...')).toBeTruthy();\n    });\n\n    it('devrait utiliser la couleur par défaut si aucune couleur n\\'est spécifiée', () => {\n      useActivityMetrics.mockReturnValue({\n        currentStreak: 2,\n        streakTrend: null,\n        formattedTime: '10min'\n      });\n\n      useDailyWords.mockReturnValue({\n        wordsToday: 5,\n        isLoading: false\n      });\n\n      const { getByText } = renderWithTheme(<SimpleMetrics />);\n\n      expect(getByText('📊 Aujourd\\'hui')).toBeTruthy();\n    });\n\n    it('devrait fonctionner sans contexte de thème', () => {\n      useActivityMetrics.mockReturnValue({\n        currentStreak: 1,\n        streakTrend: null,\n        formattedTime: '5min'\n      });\n\n      useDailyWords.mockReturnValue({\n        wordsToday: 3,\n        isLoading: false\n      });\n\n      const { getByText } = render(<SimpleMetrics />);\n\n      expect(getByText('📊 Aujourd\\'hui')).toBeTruthy();\n      expect(getByText('1')).toBeTruthy();\n      expect(getByText('3')).toBeTruthy();\n      expect(getByText('5min')).toBeTruthy();\n    });\n  });\n\n  describe('Cas limites', () => {\n    it('devrait afficher les métriques même avec une seule valeur non-nulle', () => {\n      useActivityMetrics.mockReturnValue({\n        currentStreak: 0,\n        streakTrend: null,\n        formattedTime: '0min'\n      });\n\n      useDailyWords.mockReturnValue({\n        wordsToday: 1, // Seule valeur non-nulle\n        isLoading: false\n      });\n\n      const { getByText } = renderWithTheme(<SimpleMetrics />);\n\n      expect(getByText('📊 Aujourd\\'hui')).toBeTruthy();\n      expect(getByText('1')).toBeTruthy();\n    });\n\n    it('devrait gérer les temps formatés différemment', () => {\n      useActivityMetrics.mockReturnValue({\n        currentStreak: 1,\n        streakTrend: null,\n        formattedTime: '1h 30min'\n      });\n\n      useDailyWords.mockReturnValue({\n        wordsToday: 25,\n        isLoading: false\n      });\n\n      const { getByText } = renderWithTheme(<SimpleMetrics />);\n\n      expect(getByText('1h 30min')).toBeTruthy();\n    });\n\n    it('devrait gérer les grandes valeurs', () => {\n      useActivityMetrics.mockReturnValue({\n        currentStreak: 365,\n        streakTrend: '+1 🏆',\n        formattedTime: '2h 45min'\n      });\n\n      useDailyWords.mockReturnValue({\n        wordsToday: 100,\n        isLoading: false\n      });\n\n      const { getByText } = renderWithTheme(<SimpleMetrics />);\n\n      expect(getByText('365')).toBeTruthy();\n      expect(getByText('100')).toBeTruthy();\n      expect(getByText('2h 45min')).toBeTruthy();\n    });\n  });\n\n  describe('Erreurs des hooks', () => {\n    it('devrait gérer les erreurs d\\'useActivityMetrics', () => {\n      useActivityMetrics.mockReturnValue({\n        currentStreak: 0,\n        streakTrend: null,\n        formattedTime: null\n      });\n\n      useDailyWords.mockReturnValue({\n        wordsToday: 5,\n        isLoading: false\n      });\n\n      const { getByText } = renderWithTheme(<SimpleMetrics />);\n\n      // Devrait quand même afficher les métriques avec les valeurs disponibles\n      expect(getByText('📊 Aujourd\\'hui')).toBeTruthy();\n      expect(getByText('5')).toBeTruthy();\n    });\n\n    it('devrait gérer les erreurs d\\'useDailyWords', () => {\n      useActivityMetrics.mockReturnValue({\n        currentStreak: 3,\n        streakTrend: '+1',\n        formattedTime: '15min'\n      });\n\n      useDailyWords.mockReturnValue({\n        wordsToday: 0,\n        isLoading: false\n      });\n\n      const { getByText } = renderWithTheme(<SimpleMetrics />);\n\n      // Devrait afficher les métriques avec les valeurs disponibles\n      expect(getByText('📊 Aujourd\\'hui')).toBeTruthy();\n      expect(getByText('3')).toBeTruthy();\n      expect(getByText('15min')).toBeTruthy();\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}