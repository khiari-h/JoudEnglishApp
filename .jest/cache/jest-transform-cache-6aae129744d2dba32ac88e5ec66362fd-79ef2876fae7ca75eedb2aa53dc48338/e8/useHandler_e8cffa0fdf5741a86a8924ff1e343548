69518e5b9fefce2c3bb16b22ffb36a7c
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useHandler = useHandler;
var _react = require("react");
var _PlatformChecker = require("../PlatformChecker");
var _utils = require("./utils");
var _shareables = require("../shareables");
function useHandler(handlers, dependencies) {
  var initRef = (0, _react.useRef)(null);
  if (initRef.current === null) {
    var _context = (0, _shareables.makeShareable)({});
    initRef.current = {
      context: _context,
      savedDependencies: []
    };
  }
  (0, _react.useEffect)(function () {
    return function () {
      initRef.current = null;
    };
  }, []);
  var _initRef$current = initRef.current,
    context = _initRef$current.context,
    savedDependencies = _initRef$current.savedDependencies;
  dependencies = (0, _utils.buildDependencies)(dependencies, handlers);
  var doDependenciesDiffer = !(0, _utils.areDependenciesEqual)(dependencies, savedDependencies);
  initRef.current.savedDependencies = dependencies;
  var useWeb = (0, _PlatformChecker.isWeb)() || (0, _PlatformChecker.isJest)();
  return {
    context: context,
    doDependenciesDiffer: doDependenciesDiffer,
    useWeb: useWeb
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInVzZUhhbmRsZXIiLCJfcmVhY3QiLCJyZXF1aXJlIiwiX1BsYXRmb3JtQ2hlY2tlciIsIl91dGlscyIsIl9zaGFyZWFibGVzIiwiaGFuZGxlcnMiLCJkZXBlbmRlbmNpZXMiLCJpbml0UmVmIiwidXNlUmVmIiwiY3VycmVudCIsImNvbnRleHQiLCJtYWtlU2hhcmVhYmxlIiwic2F2ZWREZXBlbmRlbmNpZXMiLCJ1c2VFZmZlY3QiLCJfaW5pdFJlZiRjdXJyZW50IiwiYnVpbGREZXBlbmRlbmNpZXMiLCJkb0RlcGVuZGVuY2llc0RpZmZlciIsImFyZURlcGVuZGVuY2llc0VxdWFsIiwidXNlV2ViIiwiaXNXZWIiLCJpc0plc3QiXSwic291cmNlcyI6WyJ1c2VIYW5kbGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBXb3JrbGV0RnVuY3Rpb24gfSBmcm9tICcuLi9jb21tb25UeXBlcyc7XG5pbXBvcnQgeyBpc1dlYiwgaXNKZXN0IH0gZnJvbSAnLi4vUGxhdGZvcm1DaGVja2VyJztcbmltcG9ydCB0eXBlIHsgRGVwZW5kZW5jeUxpc3QsIFJlYW5pbWF0ZWRFdmVudCB9IGZyb20gJy4vY29tbW9uVHlwZXMnO1xuaW1wb3J0IHsgYXJlRGVwZW5kZW5jaWVzRXF1YWwsIGJ1aWxkRGVwZW5kZW5jaWVzIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBtYWtlU2hhcmVhYmxlIH0gZnJvbSAnLi4vc2hhcmVhYmxlcyc7XG5cbmludGVyZmFjZSBHZW5lcmFsSGFuZGxlcjxcbiAgRXZlbnQgZXh0ZW5kcyBvYmplY3QsXG4gIENvbnRleHQgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPixcbj4ge1xuICAoZXZlbnQ6IFJlYW5pbWF0ZWRFdmVudDxFdmVudD4sIGNvbnRleHQ6IENvbnRleHQpOiB2b2lkO1xufVxuXG50eXBlIEdlbmVyYWxXb3JrbGV0SGFuZGxlcjxcbiAgRXZlbnQgZXh0ZW5kcyBvYmplY3QsXG4gIENvbnRleHQgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPixcbj4gPSBXb3JrbGV0RnVuY3Rpb248W2V2ZW50OiBSZWFuaW1hdGVkRXZlbnQ8RXZlbnQ+LCBjb250ZXh0OiBDb250ZXh0XT47XG5cbnR5cGUgR2VuZXJhbEhhbmRsZXJzPFxuICBFdmVudCBleHRlbmRzIG9iamVjdCxcbiAgQ29udGV4dCBleHRlbmRzIFJlY29yZDxzdHJpbmcsIHVua25vd24+LFxuPiA9IFJlY29yZDxzdHJpbmcsIEdlbmVyYWxIYW5kbGVyPEV2ZW50LCBDb250ZXh0PiB8IHVuZGVmaW5lZD47XG5cbnR5cGUgR2VuZXJhbFdvcmtsZXRIYW5kbGVyczxcbiAgRXZlbnQgZXh0ZW5kcyBvYmplY3QsXG4gIENvbnRleHQgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPixcbj4gPSBSZWNvcmQ8c3RyaW5nLCBHZW5lcmFsV29ya2xldEhhbmRsZXI8RXZlbnQsIENvbnRleHQ+IHwgdW5kZWZpbmVkPjtcblxuaW50ZXJmYWNlIENvbnRleHRXaXRoRGVwZW5kZW5jaWVzPENvbnRleHQgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4ge1xuICBjb250ZXh0OiBDb250ZXh0O1xuICBzYXZlZERlcGVuZGVuY2llczogRGVwZW5kZW5jeUxpc3Q7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlSGFuZGxlckNvbnRleHQ8Q29udGV4dCBleHRlbmRzIFJlY29yZDxzdHJpbmcsIHVua25vd24+PiB7XG4gIGNvbnRleHQ6IENvbnRleHQ7XG4gIGRvRGVwZW5kZW5jaWVzRGlmZmVyOiBib29sZWFuO1xuICB1c2VXZWI6IGJvb2xlYW47XG59XG5cbi8qKlxuICogTGV0cyB5b3UgZmluZCBvdXQgd2hldGhlciB0aGUgZXZlbnQgaGFuZGxlciBkZXBlbmRlbmNpZXMgaGF2ZSBjaGFuZ2VkLlxuICpcbiAqIEBwYXJhbSBoYW5kbGVycyAtIEFuIG9iamVjdCBvZiBldmVudCBoYW5kbGVycy5cbiAqIEBwYXJhbSBkZXBlbmRlbmNpZXMgLSBBbiBvcHRpb25hbCBhcnJheSBvZiBkZXBlbmRlbmNpZXMuXG4gKiBAcmV0dXJucyBBbiBvYmplY3QgY29udGFpbmluZyBhIGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBkZXBlbmRlbmNpZXNcbiAqICAgaGF2ZSBjaGFuZ2VkLCBhbmQgYSBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgY29kZSBpcyBydW5uaW5nIG9uIHRoZVxuICogICB3ZWIuXG4gKiBAc2VlIGh0dHBzOi8vZG9jcy5zd21hbnNpb24uY29tL3JlYWN0LW5hdGl2ZS1yZWFuaW1hdGVkL2RvY3MvYWR2YW5jZWQvdXNlSGFuZGxlclxuICovXG4vLyBAdHMtZXhwZWN0LWVycm9yIFRoaXMgb3ZlcmxvYWQgaXMgcmVxdWlyZWQgYnkgb3VyIEFQSS5cbmV4cG9ydCBmdW5jdGlvbiB1c2VIYW5kbGVyPFxuICBFdmVudCBleHRlbmRzIG9iamVjdCxcbiAgQ29udGV4dCBleHRlbmRzIFJlY29yZDxzdHJpbmcsIHVua25vd24+LFxuPihcbiAgaGFuZGxlcnM6IEdlbmVyYWxIYW5kbGVyczxFdmVudCwgQ29udGV4dD4sXG4gIGRlcGVuZGVuY2llcz86IERlcGVuZGVuY3lMaXN0XG4pOiBVc2VIYW5kbGVyQ29udGV4dDxDb250ZXh0PjtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUhhbmRsZXI8XG4gIEV2ZW50IGV4dGVuZHMgb2JqZWN0LFxuICBDb250ZXh0IGV4dGVuZHMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4sXG4+KFxuICBoYW5kbGVyczogR2VuZXJhbFdvcmtsZXRIYW5kbGVyczxFdmVudCwgQ29udGV4dD4sXG4gIGRlcGVuZGVuY2llcz86IERlcGVuZGVuY3lMaXN0XG4pOiBVc2VIYW5kbGVyQ29udGV4dDxDb250ZXh0PiB7XG4gIGNvbnN0IGluaXRSZWYgPSB1c2VSZWY8Q29udGV4dFdpdGhEZXBlbmRlbmNpZXM8Q29udGV4dD4gfCBudWxsPihudWxsKTtcbiAgaWYgKGluaXRSZWYuY3VycmVudCA9PT0gbnVsbCkge1xuICAgIGNvbnN0IGNvbnRleHQgPSBtYWtlU2hhcmVhYmxlKHt9IGFzIENvbnRleHQpO1xuICAgIGluaXRSZWYuY3VycmVudCA9IHtcbiAgICAgIGNvbnRleHQsXG4gICAgICBzYXZlZERlcGVuZGVuY2llczogW10sXG4gICAgfTtcbiAgfVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGluaXRSZWYuY3VycmVudCA9IG51bGw7XG4gICAgfTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IHsgY29udGV4dCwgc2F2ZWREZXBlbmRlbmNpZXMgfSA9IGluaXRSZWYuY3VycmVudDtcblxuICBkZXBlbmRlbmNpZXMgPSBidWlsZERlcGVuZGVuY2llcyhcbiAgICBkZXBlbmRlbmNpZXMsXG4gICAgaGFuZGxlcnMgYXMgUmVjb3JkPHN0cmluZywgV29ya2xldEZ1bmN0aW9uIHwgdW5kZWZpbmVkPlxuICApO1xuXG4gIGNvbnN0IGRvRGVwZW5kZW5jaWVzRGlmZmVyID0gIWFyZURlcGVuZGVuY2llc0VxdWFsKFxuICAgIGRlcGVuZGVuY2llcyxcbiAgICBzYXZlZERlcGVuZGVuY2llc1xuICApO1xuICBpbml0UmVmLmN1cnJlbnQuc2F2ZWREZXBlbmRlbmNpZXMgPSBkZXBlbmRlbmNpZXM7XG4gIGNvbnN0IHVzZVdlYiA9IGlzV2ViKCkgfHwgaXNKZXN0KCk7XG5cbiAgcmV0dXJuIHsgY29udGV4dCwgZG9EZXBlbmRlbmNpZXNEaWZmZXIsIHVzZVdlYiB9O1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUFDQSxNQUFBLENBQUFDLGNBQUEsQ0FBQUMsT0FBQTtFQUFBQyxLQUFBO0FBQUE7QUFBQUQsT0FBQSxDQUFBRSxVQUFBLEdBQUFBLFVBQUE7QUFDYixJQUFBQyxNQUFBLEdBQUFDLE9BQUE7QUFFQSxJQUFBQyxnQkFBQSxHQUFBRCxPQUFBO0FBRUEsSUFBQUUsTUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsV0FBQSxHQUFBSCxPQUFBO0FBc0RPLFNBQVNGLFVBQVVBLENBSXhCTSxRQUFnRCxFQUNoREMsWUFBNkIsRUFDRDtFQUM1QixJQUFNQyxPQUFPLEdBQUcsSUFBQUMsYUFBTSxFQUEwQyxJQUFJLENBQUM7RUFDckUsSUFBSUQsT0FBTyxDQUFDRSxPQUFPLEtBQUssSUFBSSxFQUFFO0lBQzVCLElBQU1DLFFBQU8sR0FBRyxJQUFBQyx5QkFBYSxFQUFDLENBQUMsQ0FBWSxDQUFDO0lBQzVDSixPQUFPLENBQUNFLE9BQU8sR0FBRztNQUNoQkMsT0FBTyxFQUFQQSxRQUFPO01BQ1BFLGlCQUFpQixFQUFFO0lBQ3JCLENBQUM7RUFDSDtFQUVBLElBQUFDLGdCQUFTLEVBQUMsWUFBTTtJQUNkLE9BQU8sWUFBTTtNQUNYTixPQUFPLENBQUNFLE9BQU8sR0FBRyxJQUFJO0lBQ3hCLENBQUM7RUFDSCxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBRU4sSUFBQUssZ0JBQUEsR0FBdUNQLE9BQU8sQ0FBQ0UsT0FBTztJQUE5Q0MsT0FBTyxHQUFBSSxnQkFBQSxDQUFQSixPQUFPO0lBQUVFLGlCQUFpQixHQUFBRSxnQkFBQSxDQUFqQkYsaUJBQWlCO0VBRWxDTixZQUFZLEdBQUcsSUFBQVMsd0JBQWlCLEVBQzlCVCxZQUFZLEVBQ1pELFFBQ0YsQ0FBQztFQUVELElBQU1XLG9CQUFvQixHQUFHLENBQUMsSUFBQUMsMkJBQW9CLEVBQ2hEWCxZQUFZLEVBQ1pNLGlCQUNGLENBQUM7RUFDREwsT0FBTyxDQUFDRSxPQUFPLENBQUNHLGlCQUFpQixHQUFHTixZQUFZO0VBQ2hELElBQU1ZLE1BQU0sR0FBRyxJQUFBQyxzQkFBSyxFQUFDLENBQUMsSUFBSSxJQUFBQyx1QkFBTSxFQUFDLENBQUM7RUFFbEMsT0FBTztJQUFFVixPQUFPLEVBQVBBLE9BQU87SUFBRU0sb0JBQW9CLEVBQXBCQSxvQkFBb0I7SUFBRUUsTUFBTSxFQUFOQTtFQUFPLENBQUM7QUFDbEQiLCJpZ25vcmVMaXN0IjpbXX0=