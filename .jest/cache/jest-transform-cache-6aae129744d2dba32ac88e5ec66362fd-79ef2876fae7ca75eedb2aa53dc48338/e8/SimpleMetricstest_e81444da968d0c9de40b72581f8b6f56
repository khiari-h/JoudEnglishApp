3e5c781b42f4947fd348b6f0367a3efd
_getJestObj().mock('../../../../src/hooks/useActivityMetrics');
_getJestObj().mock('../../../../src/hooks/useDailyWords');
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _SimpleMetrics = _interopRequireDefault(require("../../../../src/screens/Dashboard/components/SimpleMetrics"));
var _ThemeContext = require("../../../../src/contexts/ThemeContext");
var _useActivityMetrics = _interopRequireDefault(require("../../../../src/hooks/useActivityMetrics"));
var _useDailyWords = _interopRequireDefault(require("../../../../src/hooks/useDailyWords"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('SimpleMetrics', function () {
  var mockThemeContext = {
    colors: {
      surface: '#FFFFFF',
      text: '#1F2937',
      textSecondary: '#6B7280'
    }
  };
  var renderWithTheme = function renderWithTheme(component) {
    var themeValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : mockThemeContext;
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
      value: themeValue,
      children: component
    }));
  };
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('√âtat de chargement', function () {
    it('devrait afficher l\'indicateur de chargement', function () {
      _useActivityMetrics.default.mockReturnValue({
        currentStreak: 0,
        streakTrend: null,
        formattedTime: '0min'
      });
      _useDailyWords.default.mockReturnValue({
        wordsToday: 0,
        isLoading: true
      });
      var _renderWithTheme = renderWithTheme((0, _jsxRuntime.jsx)(_SimpleMetrics.default, {})),
        getByText = _renderWithTheme.getByText;
      expect(getByText('Chargement des m√©triques...')).toBeTruthy();
    });
  });
  describe('√âtat vide (pas d\'activit√©)', function () {
    beforeEach(function () {
      _useActivityMetrics.default.mockReturnValue({
        currentStreak: 0,
        streakTrend: null,
        formattedTime: '0min'
      });
      _useDailyWords.default.mockReturnValue({
        wordsToday: 0,
        isLoading: false
      });
    });
    it('devrait afficher l\'√©tat vide quand aucune activit√©', function () {
      var _renderWithTheme2 = renderWithTheme((0, _jsxRuntime.jsx)(_SimpleMetrics.default, {})),
        getByText = _renderWithTheme2.getByText;
      expect(getByText('üéØ')).toBeTruthy();
      expect(getByText('Commencez votre premi√®re session !')).toBeTruthy();
      expect(getByText('Vos statistiques appara√Ætront ici')).toBeTruthy();
    });
    it('ne devrait pas afficher les m√©triques dans l\'√©tat vide', function () {
      var _renderWithTheme3 = renderWithTheme((0, _jsxRuntime.jsx)(_SimpleMetrics.default, {})),
        queryByText = _renderWithTheme3.queryByText;
      expect(queryByText('üìä Aujourd\'hui')).toBeNull();
      expect(queryByText('üî•')).toBeNull();
      expect(queryByText('üìö')).toBeNull();
      expect(queryByText('‚è±Ô∏è')).toBeNull();
    });
  });
  describe('Affichage des m√©triques avec activit√©', function () {
    beforeEach(function () {
      _useActivityMetrics.default.mockReturnValue({
        currentStreak: 5,
        streakTrend: '+1 üî•',
        formattedTime: '15min'
      });
      _useDailyWords.default.mockReturnValue({
        wordsToday: 12,
        isLoading: false
      });
    });
    it('devrait afficher le titre de section', function () {
      var _renderWithTheme4 = renderWithTheme((0, _jsxRuntime.jsx)(_SimpleMetrics.default, {})),
        getByText = _renderWithTheme4.getByText;
      expect(getByText('üìä Aujourd\'hui')).toBeTruthy();
    });
    it('devrait afficher toutes les m√©triques', function () {
      var _renderWithTheme5 = renderWithTheme((0, _jsxRuntime.jsx)(_SimpleMetrics.default, {})),
        getByText = _renderWithTheme5.getByText;
      expect(getByText('üî•')).toBeTruthy();
      expect(getByText('üìö')).toBeTruthy();
      expect(getByText('‚è±Ô∏è')).toBeTruthy();
      expect(getByText('5')).toBeTruthy();
      expect(getByText('12')).toBeTruthy();
      expect(getByText('15min')).toBeTruthy();
      expect(getByText('Jours de suite')).toBeTruthy();
      expect(getByText('Mots aujourd\'hui')).toBeTruthy();
      expect(getByText('Temps aujourd\'hui')).toBeTruthy();
    });
    it('devrait afficher le trend pour le streak', function () {
      var _renderWithTheme6 = renderWithTheme((0, _jsxRuntime.jsx)(_SimpleMetrics.default, {})),
        getByText = _renderWithTheme6.getByText;
      expect(getByText('+1 üî•')).toBeTruthy();
    });
  });
  describe('Gestion des valeurs nulles/undefined', function () {
    it('devrait g√©rer les valeurs nulles gracieusement', function () {
      _useActivityMetrics.default.mockReturnValue({
        currentStreak: null,
        streakTrend: null,
        formattedTime: null
      });
      _useDailyWords.default.mockReturnValue({
        wordsToday: null,
        isLoading: false
      });
      var _renderWithTheme7 = renderWithTheme((0, _jsxRuntime.jsx)(_SimpleMetrics.default, {})),
        getByText = _renderWithTheme7.getByText;
      expect(getByText('Commencez votre premi√®re session !')).toBeTruthy();
    });
    it('devrait afficher 0 pour les valeurs undefined', function () {
      _useActivityMetrics.default.mockReturnValue({
        currentStreak: undefined,
        streakTrend: null,
        formattedTime: '5min'
      });
      _useDailyWords.default.mockReturnValue({
        wordsToday: undefined,
        isLoading: false
      });
      var _renderWithTheme8 = renderWithTheme((0, _jsxRuntime.jsx)(_SimpleMetrics.default, {})),
        getByText = _renderWithTheme8.getByText;
      expect(getByText('0')).toBeTruthy();
      expect(getByText('5min')).toBeTruthy();
    });
  });
  describe('Diff√©rents types de trends', function () {
    it('devrait afficher un trend positif', function () {
      _useActivityMetrics.default.mockReturnValue({
        currentStreak: 3,
        streakTrend: '+2 üí™',
        formattedTime: '10min'
      });
      _useDailyWords.default.mockReturnValue({
        wordsToday: 8,
        isLoading: false
      });
      var _renderWithTheme9 = renderWithTheme((0, _jsxRuntime.jsx)(_SimpleMetrics.default, {})),
        getByText = _renderWithTheme9.getByText;
      expect(getByText('+2 üí™')).toBeTruthy();
    });
    it('devrait afficher un trend n√©gatif', function () {
      _useActivityMetrics.default.mockReturnValue({
        currentStreak: 1,
        streakTrend: '-1',
        formattedTime: '5min'
      });
      _useDailyWords.default.mockReturnValue({
        wordsToday: 3,
        isLoading: false
      });
      var _renderWithTheme0 = renderWithTheme((0, _jsxRuntime.jsx)(_SimpleMetrics.default, {})),
        getByText = _renderWithTheme0.getByText;
      expect(getByText('-1')).toBeTruthy();
    });
    it('devrait afficher un trend neutre', function () {
      _useActivityMetrics.default.mockReturnValue({
        currentStreak: 2,
        streakTrend: '=',
        formattedTime: '8min'
      });
      _useDailyWords.default.mockReturnValue({
        wordsToday: 5,
        isLoading: false
      });
      var _renderWithTheme1 = renderWithTheme((0, _jsxRuntime.jsx)(_SimpleMetrics.default, {})),
        getByText = _renderWithTheme1.getByText;
      expect(getByText('=')).toBeTruthy();
    });
    it('ne devrait pas afficher de trend pour les mots et le temps', function () {
      _useActivityMetrics.default.mockReturnValue({
        currentStreak: 4,
        streakTrend: '+1 üî•',
        formattedTime: '20min'
      });
      _useDailyWords.default.mockReturnValue({
        wordsToday: 15,
        isLoading: false
      });
      var _renderWithTheme10 = renderWithTheme((0, _jsxRuntime.jsx)(_SimpleMetrics.default, {})),
        queryByText = _renderWithTheme10.queryByText;
      expect(queryByText('+1 üî•')).toBeTruthy();
      var trendElements = queryByText(/\+|\-/);
      expect(trendElements).toBeTruthy();
    });
  });
  describe('Couleurs et th√®me', function () {
    it('devrait utiliser la couleur d\'accent personnalis√©e', function () {
      _useActivityMetrics.default.mockReturnValue({
        currentStreak: 0,
        streakTrend: null,
        formattedTime: '0min'
      });
      _useDailyWords.default.mockReturnValue({
        wordsToday: 0,
        isLoading: true
      });
      var customColor = '#FF5722';
      var _renderWithTheme11 = renderWithTheme((0, _jsxRuntime.jsx)(_SimpleMetrics.default, {
          accentColor: customColor
        })),
        getByText = _renderWithTheme11.getByText;
      expect(getByText('Chargement des m√©triques...')).toBeTruthy();
    });
    it('devrait utiliser la couleur par d√©faut si aucune couleur n\'est sp√©cifi√©e', function () {
      _useActivityMetrics.default.mockReturnValue({
        currentStreak: 2,
        streakTrend: null,
        formattedTime: '10min'
      });
      _useDailyWords.default.mockReturnValue({
        wordsToday: 5,
        isLoading: false
      });
      var _renderWithTheme12 = renderWithTheme((0, _jsxRuntime.jsx)(_SimpleMetrics.default, {})),
        getByText = _renderWithTheme12.getByText;
      expect(getByText('üìä Aujourd\'hui')).toBeTruthy();
    });
    it('devrait fonctionner sans contexte de th√®me', function () {
      _useActivityMetrics.default.mockReturnValue({
        currentStreak: 1,
        streakTrend: null,
        formattedTime: '5min'
      });
      _useDailyWords.default.mockReturnValue({
        wordsToday: 3,
        isLoading: false
      });
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SimpleMetrics.default, {})),
        getByText = _render.getByText;
      expect(getByText('üìä Aujourd\'hui')).toBeTruthy();
      expect(getByText('1')).toBeTruthy();
      expect(getByText('3')).toBeTruthy();
      expect(getByText('5min')).toBeTruthy();
    });
  });
  describe('Cas limites', function () {
    it('devrait afficher les m√©triques m√™me avec une seule valeur non-nulle', function () {
      _useActivityMetrics.default.mockReturnValue({
        currentStreak: 0,
        streakTrend: null,
        formattedTime: '0min'
      });
      _useDailyWords.default.mockReturnValue({
        wordsToday: 1,
        isLoading: false
      });
      var _renderWithTheme13 = renderWithTheme((0, _jsxRuntime.jsx)(_SimpleMetrics.default, {})),
        getByText = _renderWithTheme13.getByText;
      expect(getByText('üìä Aujourd\'hui')).toBeTruthy();
      expect(getByText('1')).toBeTruthy();
    });
    it('devrait g√©rer les temps format√©s diff√©remment', function () {
      _useActivityMetrics.default.mockReturnValue({
        currentStreak: 1,
        streakTrend: null,
        formattedTime: '1h 30min'
      });
      _useDailyWords.default.mockReturnValue({
        wordsToday: 25,
        isLoading: false
      });
      var _renderWithTheme14 = renderWithTheme((0, _jsxRuntime.jsx)(_SimpleMetrics.default, {})),
        getByText = _renderWithTheme14.getByText;
      expect(getByText('1h 30min')).toBeTruthy();
    });
    it('devrait g√©rer les grandes valeurs', function () {
      _useActivityMetrics.default.mockReturnValue({
        currentStreak: 365,
        streakTrend: '+1 üèÜ',
        formattedTime: '2h 45min'
      });
      _useDailyWords.default.mockReturnValue({
        wordsToday: 100,
        isLoading: false
      });
      var _renderWithTheme15 = renderWithTheme((0, _jsxRuntime.jsx)(_SimpleMetrics.default, {})),
        getByText = _renderWithTheme15.getByText;
      expect(getByText('365')).toBeTruthy();
      expect(getByText('100')).toBeTruthy();
      expect(getByText('2h 45min')).toBeTruthy();
    });
  });
  describe('Erreurs des hooks', function () {
    it('devrait g√©rer les erreurs d\'useActivityMetrics', function () {
      _useActivityMetrics.default.mockReturnValue({
        currentStreak: 0,
        streakTrend: null,
        formattedTime: null
      });
      _useDailyWords.default.mockReturnValue({
        wordsToday: 5,
        isLoading: false
      });
      var _renderWithTheme16 = renderWithTheme((0, _jsxRuntime.jsx)(_SimpleMetrics.default, {})),
        getByText = _renderWithTheme16.getByText;
      expect(getByText('üìä Aujourd\'hui')).toBeTruthy();
      expect(getByText('5')).toBeTruthy();
    });
    it('devrait g√©rer les erreurs d\'useDailyWords', function () {
      _useActivityMetrics.default.mockReturnValue({
        currentStreak: 3,
        streakTrend: '+1',
        formattedTime: '15min'
      });
      _useDailyWords.default.mockReturnValue({
        wordsToday: 0,
        isLoading: false
      });
      var _renderWithTheme17 = renderWithTheme((0, _jsxRuntime.jsx)(_SimpleMetrics.default, {})),
        getByText = _renderWithTheme17.getByText;
      expect(getByText('üìä Aujourd\'hui')).toBeTruthy();
      expect(getByText('3')).toBeTruthy();
      expect(getByText('15min')).toBeTruthy();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,