{"version":3,"names":["_reactNative","require","_style","_interopRequireDefault","_react","_jsxRuntime","ConversationInput","_ref","message","onChangeMessage","onSendMessage","levelColor","isButtonEnabled","trim","handleSend","useCallback","jsxs","View","style","styles","container","children","jsx","TextInput","textInput","value","onChangeText","placeholder","placeholderTextColor","multiline","TouchableOpacity","sendButton","backgroundColor","disabledButton","onPress","disabled","Text","sendButtonText","_default","exports","default"],"sources":["index.js"],"sourcesContent":["import { View, TextInput, TouchableOpacity, Text } from 'react-native';\r\nimport styles from './style';\r\nimport { useCallback } from 'react';\r\n\r\n/**\r\n * Composant pour la saisie de messages dans le Conversation\r\n * \r\n * @param {string} message - Texte actuellement dans l'input\r\n * @param {Function} onChangeMessage - Fonction appelée quand le texte change\r\n * @param {Function} onSendMessage - Fonction appelée quand le message est envoyé\r\n * @param {string} levelColor - Couleur associée au niveau courant\r\n */\r\nconst ConversationInput = ({ message, onChangeMessage, onSendMessage, levelColor }) => {\r\n  // Vérifier si le bouton d'envoi doit être activé\r\n  const isButtonEnabled = message.trim() !== '';\r\n\r\n  // Gérer l'envoi du message\r\n  const handleSend = useCallback(() => {\r\n    if (isButtonEnabled) {\r\n      onSendMessage();\r\n    }\r\n  }, [isButtonEnabled, onSendMessage]);\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <TextInput\r\n        style={styles.textInput}\r\n        value={message}\r\n        onChangeText={onChangeMessage}\r\n        placeholder=\"Type your message...\"\r\n        placeholderTextColor=\"#9ca3af\"\r\n        multiline\r\n      />\r\n      <TouchableOpacity\r\n        style={[\r\n          styles.sendButton,\r\n          isButtonEnabled\r\n            ? { backgroundColor: levelColor }\r\n            : styles.disabledButton\r\n        ]}\r\n        onPress={handleSend}\r\n        disabled={!isButtonEnabled}\r\n      >\r\n        <Text style={styles.sendButtonText}>↑</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default ConversationInput;\r\n"],"mappings":";;;;;AAAA,IAAAA,YAAA,GAAAC,OAAA;AACA,IAAAC,MAAA,GAAAC,sBAAA,CAAAF,OAAA;AACA,IAAAG,MAAA,GAAAH,OAAA;AAAoC,IAAAI,WAAA,GAAAJ,OAAA;AAUpC,IAAMK,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAAC,IAAA,EAAgE;EAAA,IAA1DC,OAAO,GAAAD,IAAA,CAAPC,OAAO;IAAEC,eAAe,GAAAF,IAAA,CAAfE,eAAe;IAAEC,aAAa,GAAAH,IAAA,CAAbG,aAAa;IAAEC,UAAU,GAAAJ,IAAA,CAAVI,UAAU;EAE9E,IAAMC,eAAe,GAAGJ,OAAO,CAACK,IAAI,CAAC,CAAC,KAAK,EAAE;EAG7C,IAAMC,UAAU,GAAG,IAAAC,kBAAW,EAAC,YAAM;IACnC,IAAIH,eAAe,EAAE;MACnBF,aAAa,CAAC,CAAC;IACjB;EACF,CAAC,EAAE,CAACE,eAAe,EAAEF,aAAa,CAAC,CAAC;EAEpC,OACE,IAAAL,WAAA,CAAAW,IAAA,EAAChB,YAAA,CAAAiB,IAAI;IAACC,KAAK,EAAEC,cAAM,CAACC,SAAU;IAAAC,QAAA,GAC5B,IAAAhB,WAAA,CAAAiB,GAAA,EAACtB,YAAA,CAAAuB,SAAS;MACRL,KAAK,EAAEC,cAAM,CAACK,SAAU;MACxBC,KAAK,EAAEjB,OAAQ;MACfkB,YAAY,EAAEjB,eAAgB;MAC9BkB,WAAW,EAAC,sBAAsB;MAClCC,oBAAoB,EAAC,SAAS;MAC9BC,SAAS;IAAA,CACV,CAAC,EACF,IAAAxB,WAAA,CAAAiB,GAAA,EAACtB,YAAA,CAAA8B,gBAAgB;MACfZ,KAAK,EAAE,CACLC,cAAM,CAACY,UAAU,EACjBnB,eAAe,GACX;QAAEoB,eAAe,EAAErB;MAAW,CAAC,GAC/BQ,cAAM,CAACc,cAAc,CACzB;MACFC,OAAO,EAAEpB,UAAW;MACpBqB,QAAQ,EAAE,CAACvB,eAAgB;MAAAS,QAAA,EAE3B,IAAAhB,WAAA,CAAAiB,GAAA,EAACtB,YAAA,CAAAoC,IAAI;QAAClB,KAAK,EAAEC,cAAM,CAACkB,cAAe;QAAAhB,QAAA,EAAC;MAAC,CAAM;IAAC,CAC5B,CAAC;EAAA,CACf,CAAC;AAEX,CAAC;AAAC,IAAAiB,QAAA,GAAAC,OAAA,CAAAC,OAAA,GAEalC,iBAAiB","ignoreList":[]}