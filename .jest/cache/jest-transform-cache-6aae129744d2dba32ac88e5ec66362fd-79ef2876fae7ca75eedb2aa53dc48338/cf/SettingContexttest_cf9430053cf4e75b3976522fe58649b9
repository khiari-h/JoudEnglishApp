9404f01d5f28d46ea81da2eba30892e2
_getJestObj().mock('../../src/utils/storageUtils', function () {
  return {
    storeData: jest.fn().mockResolvedValue(undefined),
    getData: jest.fn().mockResolvedValue(null)
  };
});
_getJestObj().mock('../../src/utils/constants', function () {
  return {
    DEFAULT_SETTINGS: {
      notifications: true,
      dailyGoal: 30,
      theme: 'light'
    },
    STORAGE_KEYS: {
      USER_SETTINGS: 'userSettings'
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _SettingContext = require("../../src/contexts/SettingContext");
var _storageUtils = require("../../src/utils/storageUtils");
var _constants = require("../../src/utils/constants");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var TestConsumer = function TestConsumer() {
  var _React$useContext = _react.default.useContext(_SettingContext.SettingsContext),
    settings = _React$useContext.settings,
    isLoading = _React$useContext.isLoading,
    updateSetting = _React$useContext.updateSetting,
    updateSettings = _React$useContext.updateSettings,
    resetSettings = _React$useContext.resetSettings,
    areNotificationsEnabled = _React$useContext.areNotificationsEnabled,
    getDailyGoal = _React$useContext.getDailyGoal,
    setDailyGoal = _React$useContext.setDailyGoal;
  if (isLoading) {
    return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "loading-status",
      children: "Loading..."
    });
  }
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    children: [(0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "notifications-status",
      children: ["Notifications: ", settings.notifications ? 'On' : 'Off']
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "daily-goal-status",
      children: ["Daily Goal: ", settings.dailyGoal]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "theme-status",
      children: ["Theme: ", settings.theme]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "are-notifications-enabled",
      children: ["Are Notifs Enabled: ", areNotificationsEnabled ? 'Yes' : 'No']
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "get-daily-goal",
      children: ["Get Daily Goal: ", getDailyGoal]
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Toggle Notifications",
      onPress: function onPress() {
        return updateSetting('notifications', !settings.notifications);
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Set Goal to 90",
      onPress: function onPress() {
        return setDailyGoal(90);
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Set Goal to -10",
      onPress: function onPress() {
        return setDailyGoal(-10);
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Set Goal to 200",
      onPress: function onPress() {
        return setDailyGoal(200);
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Update Theme",
      onPress: function onPress() {
        return updateSetting('theme', 'dark');
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Update Multiple",
      onPress: function onPress() {
        return updateSettings({
          notifications: false,
          dailyGoal: 45
        });
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Reset",
      onPress: resetSettings
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Update Invalid",
      onPress: function onPress() {
        return updateSetting('nonExistentKey', 'some-value');
      }
    })]
  });
};
var renderWithProvider = function renderWithProvider(component) {
  return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SettingContext.SettingsProvider, {
    children: component
  }));
};
describe('SettingsContext', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _storageUtils.getData.mockResolvedValue(null);
  });
  it('should show loading state initially', function () {
    renderWithProvider((0, _jsxRuntime.jsx)(TestConsumer, {}));
    expect(_reactNative.screen.getByTestId('loading-status')).toBeTruthy();
  });
  it('should load default settings when no data is in storage', (0, _asyncToGenerator2.default)(function* () {
    renderWithProvider((0, _jsxRuntime.jsx)(TestConsumer, {}));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
    expect(_reactNative.screen.queryByTestId('loading-status')).toBeNull();
    expect(_reactNative.screen.getByTestId('notifications-status')).toHaveTextContent('Notifications: On');
    expect(_reactNative.screen.getByTestId('daily-goal-status')).toHaveTextContent('Daily Goal: 30');
    expect(_reactNative.screen.getByTestId('theme-status')).toHaveTextContent('Theme: light');
    expect(_storageUtils.getData).toHaveBeenCalledWith(_constants.STORAGE_KEYS.USER_SETTINGS);
    expect(_storageUtils.storeData).toHaveBeenCalledTimes(1);
    expect(_storageUtils.storeData).toHaveBeenCalledWith(_constants.STORAGE_KEYS.USER_SETTINGS, _constants.DEFAULT_SETTINGS);
  }));
  it('should load saved settings from storage', (0, _asyncToGenerator2.default)(function* () {
    var savedSettings = {
      notifications: false,
      dailyGoal: 90,
      theme: 'dark'
    };
    _storageUtils.getData.mockResolvedValueOnce(savedSettings);
    renderWithProvider((0, _jsxRuntime.jsx)(TestConsumer, {}));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
    expect(_reactNative.screen.getByTestId('notifications-status')).toHaveTextContent('Notifications: Off');
    expect(_reactNative.screen.getByTestId('daily-goal-status')).toHaveTextContent('Daily Goal: 90');
    expect(_reactNative.screen.getByTestId('theme-status')).toHaveTextContent('Theme: dark');
    expect(_storageUtils.storeData).toHaveBeenCalledWith(_constants.STORAGE_KEYS.USER_SETTINGS, Object.assign({}, _constants.DEFAULT_SETTINGS, savedSettings));
  }));
  it('should update a single setting and persist the change', (0, _asyncToGenerator2.default)(function* () {
    renderWithProvider((0, _jsxRuntime.jsx)(TestConsumer, {}));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
    expect(_reactNative.screen.getByTestId('notifications-status')).toHaveTextContent('Notifications: On');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(_reactNative.screen.getByText('Toggle Notifications'));
    }));
    expect(_reactNative.screen.getByTestId('notifications-status')).toHaveTextContent('Notifications: Off');
    expect(_storageUtils.storeData).toHaveBeenCalledTimes(2);
    expect(_storageUtils.storeData).toHaveBeenCalledWith(_constants.STORAGE_KEYS.USER_SETTINGS, Object.assign({}, _constants.DEFAULT_SETTINGS, {
      notifications: false
    }));
  }));
  it('should update multiple settings at once and persist changes', (0, _asyncToGenerator2.default)(function* () {
    renderWithProvider((0, _jsxRuntime.jsx)(TestConsumer, {}));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Multiple'));
    }));
    expect(_reactNative.screen.getByTestId('notifications-status')).toHaveTextContent('Notifications: Off');
    expect(_reactNative.screen.getByTestId('daily-goal-status')).toHaveTextContent('Daily Goal: 45');
    expect(_storageUtils.storeData).toHaveBeenCalledWith(_constants.STORAGE_KEYS.USER_SETTINGS, Object.assign({}, _constants.DEFAULT_SETTINGS, {
      notifications: false,
      dailyGoal: 45
    }));
  }));
  it('should reset settings to default and persist the change', (0, _asyncToGenerator2.default)(function* () {
    var savedSettings = {
      notifications: false,
      dailyGoal: 90,
      theme: 'dark'
    };
    _storageUtils.getData.mockResolvedValueOnce(savedSettings);
    renderWithProvider((0, _jsxRuntime.jsx)(TestConsumer, {}));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
    expect(_reactNative.screen.getByTestId('notifications-status')).toHaveTextContent('Notifications: Off');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(_reactNative.screen.getByText('Reset'));
    }));
    expect(_reactNative.screen.getByTestId('notifications-status')).toHaveTextContent('Notifications: On');
    expect(_reactNative.screen.getByTestId('daily-goal-status')).toHaveTextContent('Daily Goal: 30');
    expect(_storageUtils.storeData).toHaveBeenCalledWith(_constants.STORAGE_KEYS.USER_SETTINGS, _constants.DEFAULT_SETTINGS);
  }));
  it('should correctly report status via helper functions', (0, _asyncToGenerator2.default)(function* () {
    renderWithProvider((0, _jsxRuntime.jsx)(TestConsumer, {}));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
    expect(_reactNative.screen.getByTestId('are-notifications-enabled')).toHaveTextContent('Are Notifs Enabled: Yes');
    expect(_reactNative.screen.getByTestId('get-daily-goal')).toHaveTextContent('Get Daily Goal: 30');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(_reactNative.screen.getByText('Toggle Notifications'));
      _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Goal to 90'));
    }));
    expect(_reactNative.screen.getByTestId('are-notifications-enabled')).toHaveTextContent('Are Notifs Enabled: No');
    expect(_reactNative.screen.getByTestId('get-daily-goal')).toHaveTextContent('Get Daily Goal: 90');
  }));
  it('should clamp daily goal values using setDailyGoal', (0, _asyncToGenerator2.default)(function* () {
    renderWithProvider((0, _jsxRuntime.jsx)(TestConsumer, {}));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Goal to -10'));
    }));
    expect(_reactNative.screen.getByTestId('daily-goal-status')).toHaveTextContent('Daily Goal: 1');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Goal to 200'));
    }));
    expect(_reactNative.screen.getByTestId('daily-goal-status')).toHaveTextContent('Daily Goal: 120');
  }));
  it('should not update state for an invalid setting key', (0, _asyncToGenerator2.default)(function* () {
    renderWithProvider((0, _jsxRuntime.jsx)(TestConsumer, {}));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
    var initialSettings = Object.assign({}, _constants.DEFAULT_SETTINGS);
    expect(_storageUtils.storeData).toHaveBeenCalledTimes(1);
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Invalid'));
    }));
    expect(_reactNative.screen.getByTestId('notifications-status')).toHaveTextContent('Notifications: On');
    expect(_reactNative.screen.getByTestId('theme-status')).toHaveTextContent('Theme: light');
    expect(_storageUtils.storeData).toHaveBeenCalledTimes(1);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,