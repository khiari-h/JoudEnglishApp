9d4be5ac518fa323ce56537fa44945fb
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _vectorIcons = require("@expo/vector-icons");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var ExerciseFooter = function ExerciseFooter(_ref) {
  var _ref$primaryLabel = _ref.primaryLabel,
    primaryLabel = _ref$primaryLabel === void 0 ? 'Continuer' : _ref$primaryLabel,
    _ref$secondaryLabel = _ref.secondaryLabel,
    secondaryLabel = _ref$secondaryLabel === void 0 ? 'Précédent' : _ref$secondaryLabel,
    onPrimaryPress = _ref.onPrimaryPress,
    onSecondaryPress = _ref.onSecondaryPress,
    _ref$showSecondary = _ref.showSecondary,
    showSecondary = _ref$showSecondary === void 0 ? true : _ref$showSecondary,
    _ref$showCheck = _ref.showCheck,
    showCheck = _ref$showCheck === void 0 ? false : _ref$showCheck,
    _ref$isDisabled = _ref.isDisabled,
    isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled,
    _ref$color = _ref.color,
    color = _ref$color === void 0 ? '#5E60CE' : _ref$color,
    _ref$isLastQuestion = _ref.isLastQuestion,
    isLastQuestion = _ref$isLastQuestion === void 0 ? false : _ref$isLastQuestion,
    _ref$hideSkip = _ref.hideSkip,
    hideSkip = _ref$hideSkip === void 0 ? false : _ref$hideSkip,
    onSkip = _ref.onSkip,
    _ref$skipLabel = _ref.skipLabel,
    skipLabel = _ref$skipLabel === void 0 ? 'Passer' : _ref$skipLabel;
  var finalPrimaryLabel = isLastQuestion ? 'Terminer' : primaryLabel;
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: _style.default.container,
    children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: _style.default.buttonRow,
      children: [showSecondary ? (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
        style: _style.default.secondaryButton,
        onPress: onSecondaryPress,
        children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: "chevron-back",
          size: 20,
          color: "#6B7280"
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: _style.default.secondaryButtonText,
          children: secondaryLabel
        })]
      }) : (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: {
          flex: 1
        }
      }), !hideSkip && onSkip && (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: _style.default.skipButton,
        onPress: onSkip,
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: _style.default.skipText,
          children: skipLabel
        })
      }), (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
        style: [_style.default.primaryButton, {
          backgroundColor: color
        }, isDisabled && _style.default.disabledButton],
        onPress: onPrimaryPress,
        disabled: isDisabled,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: _style.default.primaryButtonText,
          children: finalPrimaryLabel
        }), showCheck ? (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: "checkmark",
          size: 20,
          color: "white"
        }) : (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: "chevron-forward",
          size: 20,
          color: "white"
        })]
      })]
    })
  });
};
var _default = exports.default = ExerciseFooter;
ExerciseFooter.propTypes = {
  primaryLabel: _propTypes.default.string,
  secondaryLabel: _propTypes.default.string,
  onPrimaryPress: _propTypes.default.func.isRequired,
  onSecondaryPress: _propTypes.default.func,
  showSecondary: _propTypes.default.bool,
  showCheck: _propTypes.default.bool,
  isDisabled: _propTypes.default.bool,
  color: _propTypes.default.string,
  isLastQuestion: _propTypes.default.bool,
  hideSkip: _propTypes.default.bool,
  onSkip: _propTypes.default.func,
  skipLabel: _propTypes.default.string
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,