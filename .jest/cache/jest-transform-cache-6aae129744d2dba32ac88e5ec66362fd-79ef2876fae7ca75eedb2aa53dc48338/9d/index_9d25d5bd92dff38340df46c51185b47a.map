{"version":3,"names":["_CategorySelector","_interopRequireDefault","require","_react","_propTypes","_jsxRuntime","VocabularyCategorySelector","_ref","_ref$categories","categories","_ref$selectedIndex","selectedIndex","onSelectCategory","levelColor","formattedCategories","map","categoryTitle","index","id","name","handleCategorySelect","useCallback","categoryId","jsx","default","selectedCategory","undefined","primaryColor","propTypes","PropTypes","arrayOf","string","isRequired","number","func","_default","exports"],"sources":["index.js"],"sourcesContent":["// VocabularyExercise/VocabularyCategorySelector.js\r\nimport CategorySelector from \"../../../../components/exercise-common/CategorySelector\";\r\nimport { useCallback } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * Adaptateur pour le sélecteur de catégories de vocabulaire\r\n * Réutilise le composant générique CategorySelector\r\n */\r\nconst VocabularyCategorySelector = ({\r\n  categories = [],\r\n  selectedIndex = 0,\r\n  onSelectCategory,\r\n  levelColor,\r\n}) => {\r\n  // Transformation du format des catégories pour correspondre au composant générique\r\n  const formattedCategories = categories.map((categoryTitle, index) => ({\r\n    id: index,\r\n    name: categoryTitle,\r\n  }));\r\n\r\n  // Fonction de callback adaptée - notre composant utilise des indices,\r\n  // le composant générique utilise des IDs\r\n  const handleCategorySelect = useCallback((categoryId) => {\r\n    // Si l'option \"Tous\" est sélectionnée (null), nous sélectionnons la première catégorie\r\n    if (categoryId === null) {\r\n      onSelectCategory(0);\r\n    } else {\r\n      onSelectCategory(categoryId);\r\n    }\r\n  }, [onSelectCategory]);\r\n\r\n  return (\r\n    <CategorySelector\r\n      categories={formattedCategories}\r\n      selectedCategory={selectedIndex === undefined ? 0 : selectedIndex}\r\n      onSelectCategory={handleCategorySelect}\r\n      primaryColor={levelColor}\r\n    />\r\n  );\r\n};\r\n\r\n// ✅ Définition de PropTypes pour la validation des props\r\nVocabularyCategorySelector.propTypes = {\r\n  // 'categories' est manquant dans la validation\r\n  categories: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  // 'selectedIndex' est manquant dans la validation\r\n  selectedIndex: PropTypes.number,\r\n  // 'onSelectCategory' est manquant dans la validation\r\n  onSelectCategory: PropTypes.func.isRequired,\r\n  // 'levelColor' est manquant dans la validation\r\n  levelColor: PropTypes.string,\r\n};\r\n\r\nexport default VocabularyCategorySelector;"],"mappings":";;;;;AACA,IAAAA,iBAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,MAAA,GAAAD,OAAA;AACA,IAAAE,UAAA,GAAAH,sBAAA,CAAAC,OAAA;AAAmC,IAAAG,WAAA,GAAAH,OAAA;AAMnC,IAAMI,0BAA0B,GAAG,SAA7BA,0BAA0BA,CAAAC,IAAA,EAK1B;EAAA,IAAAC,eAAA,GAAAD,IAAA,CAJJE,UAAU;IAAVA,UAAU,GAAAD,eAAA,cAAG,EAAE,GAAAA,eAAA;IAAAE,kBAAA,GAAAH,IAAA,CACfI,aAAa;IAAbA,aAAa,GAAAD,kBAAA,cAAG,CAAC,GAAAA,kBAAA;IACjBE,gBAAgB,GAAAL,IAAA,CAAhBK,gBAAgB;IAChBC,UAAU,GAAAN,IAAA,CAAVM,UAAU;EAGV,IAAMC,mBAAmB,GAAGL,UAAU,CAACM,GAAG,CAAC,UAACC,aAAa,EAAEC,KAAK;IAAA,OAAM;MACpEC,EAAE,EAAED,KAAK;MACTE,IAAI,EAAEH;IACR,CAAC;EAAA,CAAC,CAAC;EAIH,IAAMI,oBAAoB,GAAG,IAAAC,kBAAW,EAAC,UAACC,UAAU,EAAK;IAEvD,IAAIA,UAAU,KAAK,IAAI,EAAE;MACvBV,gBAAgB,CAAC,CAAC,CAAC;IACrB,CAAC,MAAM;MACLA,gBAAgB,CAACU,UAAU,CAAC;IAC9B;EACF,CAAC,EAAE,CAACV,gBAAgB,CAAC,CAAC;EAEtB,OACE,IAAAP,WAAA,CAAAkB,GAAA,EAACvB,iBAAA,CAAAwB,OAAgB;IACff,UAAU,EAAEK,mBAAoB;IAChCW,gBAAgB,EAAEd,aAAa,KAAKe,SAAS,GAAG,CAAC,GAAGf,aAAc;IAClEC,gBAAgB,EAAEQ,oBAAqB;IACvCO,YAAY,EAAEd;EAAW,CAC1B,CAAC;AAEN,CAAC;AAGDP,0BAA0B,CAACsB,SAAS,GAAG;EAErCnB,UAAU,EAAEoB,kBAAS,CAACC,OAAO,CAACD,kBAAS,CAACE,MAAM,CAAC,CAACC,UAAU;EAE1DrB,aAAa,EAAEkB,kBAAS,CAACI,MAAM;EAE/BrB,gBAAgB,EAAEiB,kBAAS,CAACK,IAAI,CAACF,UAAU;EAE3CnB,UAAU,EAAEgB,kBAAS,CAACE;AACxB,CAAC;AAAC,IAAAI,QAAA,GAAAC,OAAA,CAAAZ,OAAA,GAEalB,0BAA0B","ignoreList":[]}