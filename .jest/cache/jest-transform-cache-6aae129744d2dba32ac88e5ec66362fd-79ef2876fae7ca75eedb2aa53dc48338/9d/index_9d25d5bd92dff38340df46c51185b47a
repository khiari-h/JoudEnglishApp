718aee25a5d4f42c89d11a364d02d209
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CategorySelector = _interopRequireDefault(require("../../../../components/exercise-common/CategorySelector"));
var _react = require("react");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
var VocabularyCategorySelector = function VocabularyCategorySelector(_ref) {
  var _ref$categories = _ref.categories,
    categories = _ref$categories === void 0 ? [] : _ref$categories,
    _ref$selectedIndex = _ref.selectedIndex,
    selectedIndex = _ref$selectedIndex === void 0 ? 0 : _ref$selectedIndex,
    onSelectCategory = _ref.onSelectCategory,
    levelColor = _ref.levelColor;
  var formattedCategories = categories.map(function (categoryTitle, index) {
    return {
      id: index,
      name: categoryTitle
    };
  });
  var handleCategorySelect = (0, _react.useCallback)(function (categoryId) {
    if (categoryId === null) {
      onSelectCategory(0);
    } else {
      onSelectCategory(categoryId);
    }
  }, [onSelectCategory]);
  return (0, _jsxRuntime.jsx)(_CategorySelector.default, {
    categories: formattedCategories,
    selectedCategory: selectedIndex === undefined ? 0 : selectedIndex,
    onSelectCategory: handleCategorySelect,
    primaryColor: levelColor
  });
};
VocabularyCategorySelector.propTypes = {
  categories: _propTypes.default.arrayOf(_propTypes.default.string).isRequired,
  selectedIndex: _propTypes.default.number,
  onSelectCategory: _propTypes.default.func.isRequired,
  levelColor: _propTypes.default.string
};
var _default = exports.default = VocabularyCategorySelector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfQ2F0ZWdvcnlTZWxlY3RvciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3JlYWN0IiwiX3Byb3BUeXBlcyIsIl9qc3hSdW50aW1lIiwiVm9jYWJ1bGFyeUNhdGVnb3J5U2VsZWN0b3IiLCJfcmVmIiwiX3JlZiRjYXRlZ29yaWVzIiwiY2F0ZWdvcmllcyIsIl9yZWYkc2VsZWN0ZWRJbmRleCIsInNlbGVjdGVkSW5kZXgiLCJvblNlbGVjdENhdGVnb3J5IiwibGV2ZWxDb2xvciIsImZvcm1hdHRlZENhdGVnb3JpZXMiLCJtYXAiLCJjYXRlZ29yeVRpdGxlIiwiaW5kZXgiLCJpZCIsIm5hbWUiLCJoYW5kbGVDYXRlZ29yeVNlbGVjdCIsInVzZUNhbGxiYWNrIiwiY2F0ZWdvcnlJZCIsImpzeCIsImRlZmF1bHQiLCJzZWxlY3RlZENhdGVnb3J5IiwidW5kZWZpbmVkIiwicHJpbWFyeUNvbG9yIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiYXJyYXlPZiIsInN0cmluZyIsImlzUmVxdWlyZWQiLCJudW1iZXIiLCJmdW5jIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVm9jYWJ1bGFyeUV4ZXJjaXNlL1ZvY2FidWxhcnlDYXRlZ29yeVNlbGVjdG9yLmpzXHJcbmltcG9ydCBDYXRlZ29yeVNlbGVjdG9yIGZyb20gXCIuLi8uLi8uLi8uLi9jb21wb25lbnRzL2V4ZXJjaXNlLWNvbW1vbi9DYXRlZ29yeVNlbGVjdG9yXCI7XHJcbmltcG9ydCB7IHVzZUNhbGxiYWNrIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XHJcblxyXG4vKipcclxuICogQWRhcHRhdGV1ciBwb3VyIGxlIHPDqWxlY3RldXIgZGUgY2F0w6lnb3JpZXMgZGUgdm9jYWJ1bGFpcmVcclxuICogUsOpdXRpbGlzZSBsZSBjb21wb3NhbnQgZ8OpbsOpcmlxdWUgQ2F0ZWdvcnlTZWxlY3RvclxyXG4gKi9cclxuY29uc3QgVm9jYWJ1bGFyeUNhdGVnb3J5U2VsZWN0b3IgPSAoe1xyXG4gIGNhdGVnb3JpZXMgPSBbXSxcclxuICBzZWxlY3RlZEluZGV4ID0gMCxcclxuICBvblNlbGVjdENhdGVnb3J5LFxyXG4gIGxldmVsQ29sb3IsXHJcbn0pID0+IHtcclxuICAvLyBUcmFuc2Zvcm1hdGlvbiBkdSBmb3JtYXQgZGVzIGNhdMOpZ29yaWVzIHBvdXIgY29ycmVzcG9uZHJlIGF1IGNvbXBvc2FudCBnw6luw6lyaXF1ZVxyXG4gIGNvbnN0IGZvcm1hdHRlZENhdGVnb3JpZXMgPSBjYXRlZ29yaWVzLm1hcCgoY2F0ZWdvcnlUaXRsZSwgaW5kZXgpID0+ICh7XHJcbiAgICBpZDogaW5kZXgsXHJcbiAgICBuYW1lOiBjYXRlZ29yeVRpdGxlLFxyXG4gIH0pKTtcclxuXHJcbiAgLy8gRm9uY3Rpb24gZGUgY2FsbGJhY2sgYWRhcHTDqWUgLSBub3RyZSBjb21wb3NhbnQgdXRpbGlzZSBkZXMgaW5kaWNlcyxcclxuICAvLyBsZSBjb21wb3NhbnQgZ8OpbsOpcmlxdWUgdXRpbGlzZSBkZXMgSURzXHJcbiAgY29uc3QgaGFuZGxlQ2F0ZWdvcnlTZWxlY3QgPSB1c2VDYWxsYmFjaygoY2F0ZWdvcnlJZCkgPT4ge1xyXG4gICAgLy8gU2kgbCdvcHRpb24gXCJUb3VzXCIgZXN0IHPDqWxlY3Rpb25uw6llIChudWxsKSwgbm91cyBzw6lsZWN0aW9ubm9ucyBsYSBwcmVtacOocmUgY2F0w6lnb3JpZVxyXG4gICAgaWYgKGNhdGVnb3J5SWQgPT09IG51bGwpIHtcclxuICAgICAgb25TZWxlY3RDYXRlZ29yeSgwKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG9uU2VsZWN0Q2F0ZWdvcnkoY2F0ZWdvcnlJZCk7XHJcbiAgICB9XHJcbiAgfSwgW29uU2VsZWN0Q2F0ZWdvcnldKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxDYXRlZ29yeVNlbGVjdG9yXHJcbiAgICAgIGNhdGVnb3JpZXM9e2Zvcm1hdHRlZENhdGVnb3JpZXN9XHJcbiAgICAgIHNlbGVjdGVkQ2F0ZWdvcnk9e3NlbGVjdGVkSW5kZXggPT09IHVuZGVmaW5lZCA/IDAgOiBzZWxlY3RlZEluZGV4fVxyXG4gICAgICBvblNlbGVjdENhdGVnb3J5PXtoYW5kbGVDYXRlZ29yeVNlbGVjdH1cclxuICAgICAgcHJpbWFyeUNvbG9yPXtsZXZlbENvbG9yfVxyXG4gICAgLz5cclxuICApO1xyXG59O1xyXG5cclxuLy8g4pyFIETDqWZpbml0aW9uIGRlIFByb3BUeXBlcyBwb3VyIGxhIHZhbGlkYXRpb24gZGVzIHByb3BzXHJcblZvY2FidWxhcnlDYXRlZ29yeVNlbGVjdG9yLnByb3BUeXBlcyA9IHtcclxuICAvLyAnY2F0ZWdvcmllcycgZXN0IG1hbnF1YW50IGRhbnMgbGEgdmFsaWRhdGlvblxyXG4gIGNhdGVnb3JpZXM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpLmlzUmVxdWlyZWQsXHJcbiAgLy8gJ3NlbGVjdGVkSW5kZXgnIGVzdCBtYW5xdWFudCBkYW5zIGxhIHZhbGlkYXRpb25cclxuICBzZWxlY3RlZEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxyXG4gIC8vICdvblNlbGVjdENhdGVnb3J5JyBlc3QgbWFucXVhbnQgZGFucyBsYSB2YWxpZGF0aW9uXHJcbiAgb25TZWxlY3RDYXRlZ29yeTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuICAvLyAnbGV2ZWxDb2xvcicgZXN0IG1hbnF1YW50IGRhbnMgbGEgdmFsaWRhdGlvblxyXG4gIGxldmVsQ29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBWb2NhYnVsYXJ5Q2F0ZWdvcnlTZWxlY3RvcjsiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsSUFBQUEsaUJBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLE1BQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFVBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUFtQyxJQUFBRyxXQUFBLEdBQUFILE9BQUE7QUFNbkMsSUFBTUksMEJBQTBCLEdBQUcsU0FBN0JBLDBCQUEwQkEsQ0FBQUMsSUFBQSxFQUsxQjtFQUFBLElBQUFDLGVBQUEsR0FBQUQsSUFBQSxDQUpKRSxVQUFVO0lBQVZBLFVBQVUsR0FBQUQsZUFBQSxjQUFHLEVBQUUsR0FBQUEsZUFBQTtJQUFBRSxrQkFBQSxHQUFBSCxJQUFBLENBQ2ZJLGFBQWE7SUFBYkEsYUFBYSxHQUFBRCxrQkFBQSxjQUFHLENBQUMsR0FBQUEsa0JBQUE7SUFDakJFLGdCQUFnQixHQUFBTCxJQUFBLENBQWhCSyxnQkFBZ0I7SUFDaEJDLFVBQVUsR0FBQU4sSUFBQSxDQUFWTSxVQUFVO0VBR1YsSUFBTUMsbUJBQW1CLEdBQUdMLFVBQVUsQ0FBQ00sR0FBRyxDQUFDLFVBQUNDLGFBQWEsRUFBRUMsS0FBSztJQUFBLE9BQU07TUFDcEVDLEVBQUUsRUFBRUQsS0FBSztNQUNURSxJQUFJLEVBQUVIO0lBQ1IsQ0FBQztFQUFBLENBQUMsQ0FBQztFQUlILElBQU1JLG9CQUFvQixHQUFHLElBQUFDLGtCQUFXLEVBQUMsVUFBQ0MsVUFBVSxFQUFLO0lBRXZELElBQUlBLFVBQVUsS0FBSyxJQUFJLEVBQUU7TUFDdkJWLGdCQUFnQixDQUFDLENBQUMsQ0FBQztJQUNyQixDQUFDLE1BQU07TUFDTEEsZ0JBQWdCLENBQUNVLFVBQVUsQ0FBQztJQUM5QjtFQUNGLENBQUMsRUFBRSxDQUFDVixnQkFBZ0IsQ0FBQyxDQUFDO0VBRXRCLE9BQ0UsSUFBQVAsV0FBQSxDQUFBa0IsR0FBQSxFQUFDdkIsaUJBQUEsQ0FBQXdCLE9BQWdCO0lBQ2ZmLFVBQVUsRUFBRUssbUJBQW9CO0lBQ2hDVyxnQkFBZ0IsRUFBRWQsYUFBYSxLQUFLZSxTQUFTLEdBQUcsQ0FBQyxHQUFHZixhQUFjO0lBQ2xFQyxnQkFBZ0IsRUFBRVEsb0JBQXFCO0lBQ3ZDTyxZQUFZLEVBQUVkO0VBQVcsQ0FDMUIsQ0FBQztBQUVOLENBQUM7QUFHRFAsMEJBQTBCLENBQUNzQixTQUFTLEdBQUc7RUFFckNuQixVQUFVLEVBQUVvQixrQkFBUyxDQUFDQyxPQUFPLENBQUNELGtCQUFTLENBQUNFLE1BQU0sQ0FBQyxDQUFDQyxVQUFVO0VBRTFEckIsYUFBYSxFQUFFa0Isa0JBQVMsQ0FBQ0ksTUFBTTtFQUUvQnJCLGdCQUFnQixFQUFFaUIsa0JBQVMsQ0FBQ0ssSUFBSSxDQUFDRixVQUFVO0VBRTNDbkIsVUFBVSxFQUFFZ0Isa0JBQVMsQ0FBQ0U7QUFDeEIsQ0FBQztBQUFDLElBQUFJLFFBQUEsR0FBQUMsT0FBQSxDQUFBWixPQUFBLEdBRWFsQiwwQkFBMEIiLCJpZ25vcmVMaXN0IjpbXX0=