80bfd970f3d1d0af5e9659c1aea18300
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTotalStepsCount = exports.getLevelColor = exports.getConversationScenariosCount = exports.getConversationLevelStats = exports.getConversationData = void 0;
var _A = _interopRequireDefault(require("../../data/conversation/A1"));
var _A2 = _interopRequireDefault(require("../../data/conversation/A2"));
var _B = _interopRequireDefault(require("../../data/conversation/B1"));
var _B2 = _interopRequireDefault(require("../../data/conversation/B2"));
var _C = _interopRequireDefault(require("../../data/conversation/C1"));
var _C2 = _interopRequireDefault(require("../../data/conversation/C2"));
var getConversationData = exports.getConversationData = function getConversationData(level) {
  var dataMap = {
    A1: {
      exercises: _A.default
    },
    A2: {
      exercises: _A2.default
    },
    B1: {
      exercises: _B.default
    },
    B2: {
      exercises: _B2.default
    },
    C1: {
      exercises: _C.default
    },
    C2: {
      exercises: _C2.default
    }
  };
  return dataMap[level] || dataMap.A1;
};
var getLevelColor = exports.getLevelColor = function getLevelColor(level) {
  var colors = {
    A1: "#3b82f6",
    A2: "#8b5cf6",
    B1: "#10b981",
    B2: "#f59e0b",
    C1: "#ef4444",
    C2: "#6366f1"
  };
  return colors[level] || "#4361EE";
};
var getConversationScenariosCount = exports.getConversationScenariosCount = function getConversationScenariosCount(level) {
  var data = getConversationData(level);
  return data.exercises ? data.exercises.length : 0;
};
var getTotalStepsCount = exports.getTotalStepsCount = function getTotalStepsCount(level) {
  var data = getConversationData(level);
  if (!data.exercises) return 0;
  return data.exercises.reduce(function (total, scenario) {
    return total + (scenario.steps ? scenario.steps.length : 0);
  }, 0);
};
var getConversationLevelStats = exports.getConversationLevelStats = function getConversationLevelStats(level) {
  var data = getConversationData(level);
  if (!data.exercises) return {
    scenarios: 0,
    totalSteps: 0,
    averageStepsPerScenario: 0
  };
  var totalScenarios = data.exercises.length;
  var totalSteps = getTotalStepsCount(level);
  return {
    scenarios: totalScenarios,
    totalSteps: totalSteps,
    averageStepsPerScenario: totalScenarios > 0 ? totalSteps / totalScenarios : 0
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfQSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX0EyIiwiX0IiLCJfQjIiLCJfQyIsIl9DMiIsImdldENvbnZlcnNhdGlvbkRhdGEiLCJleHBvcnRzIiwibGV2ZWwiLCJkYXRhTWFwIiwiQTEiLCJleGVyY2lzZXMiLCJDb252ZXJzYXRpb25BMSIsIkEyIiwiQ29udmVyc2F0aW9uQTIiLCJCMSIsIkNvbnZlcnNhdGlvbkIxIiwiQjIiLCJDb252ZXJzYXRpb25CMiIsIkMxIiwiQ29udmVyc2F0aW9uQzEiLCJDMiIsIkNvbnZlcnNhdGlvbkMyIiwiZ2V0TGV2ZWxDb2xvciIsImNvbG9ycyIsImdldENvbnZlcnNhdGlvblNjZW5hcmlvc0NvdW50IiwiZGF0YSIsImxlbmd0aCIsImdldFRvdGFsU3RlcHNDb3VudCIsInJlZHVjZSIsInRvdGFsIiwic2NlbmFyaW8iLCJzdGVwcyIsImdldENvbnZlcnNhdGlvbkxldmVsU3RhdHMiLCJzY2VuYXJpb3MiLCJ0b3RhbFN0ZXBzIiwiYXZlcmFnZVN0ZXBzUGVyU2NlbmFyaW8iLCJ0b3RhbFNjZW5hcmlvcyJdLCJzb3VyY2VzIjpbImNvbnZlcnNhdGlvbkRhdGFIZWxwZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gdXRpbHMvQ29udmVyc2F0aW9uL0NvbnZlcnNhdGlvbkRhdGFIZWxwZXIuanNcblxuLy8gSW1wb3J0IGRlcyBkb25uw6llcyBkZSBDb252ZXJzYXRpb24gcGFyIG5pdmVhdVxuaW1wb3J0IENvbnZlcnNhdGlvbkExIGZyb20gXCIuLi8uLi9kYXRhL2NvbnZlcnNhdGlvbi9BMVwiO1xuaW1wb3J0IENvbnZlcnNhdGlvbkEyIGZyb20gXCIuLi8uLi9kYXRhL2NvbnZlcnNhdGlvbi9BMlwiO1xuaW1wb3J0IENvbnZlcnNhdGlvbkIxIGZyb20gXCIuLi8uLi9kYXRhL2NvbnZlcnNhdGlvbi9CMVwiO1xuaW1wb3J0IENvbnZlcnNhdGlvbkIyIGZyb20gXCIuLi8uLi9kYXRhL2NvbnZlcnNhdGlvbi9CMlwiO1xuaW1wb3J0IENvbnZlcnNhdGlvbkMxIGZyb20gIFwiLi4vLi4vZGF0YS9jb252ZXJzYXRpb24vQzFcIjtcbmltcG9ydCBDb252ZXJzYXRpb25DMiBmcm9tICBcIi4uLy4uL2RhdGEvY29udmVyc2F0aW9uL0MyXCI7XG5cbi8vIE5vdGU6IExlIGNvbXBvc2FudCBhdHRlbmQgdW5lIHN0cnVjdHVyZSB7IGV4ZXJjaXNlczogWy4uLl0gfVxuLy8gTm91cyBkZXZvbnMgYWRhcHRlciBsZXMgZG9ubsOpZXMgcG91ciBjb3JyZXNwb25kcmUgw6AgY2UgZm9ybWF0XG5cbi8qKlxuICogUsOpY3Vww6hyZSBsZXMgZG9ubsOpZXMgZGUgc2PDqW5hcmlvcyBkZSBDb252ZXJzYXRpb24gZW4gZm9uY3Rpb24gZHUgbml2ZWF1XG4gKiBAcGFyYW0ge3N0cmluZ30gbGV2ZWwgLSBMZSBuaXZlYXUgZGUgbGFuZ3VlIChBMSwgQTIsIEIxLCBCMiwgQzEsIEMyKVxuICogQHJldHVybnMge09iamVjdH0gTGVzIGRvbm7DqWVzIGRlIENvbnZlcnNhdGlvbiBwb3VyIGxlIG5pdmVhdSBzcMOpY2lmacOpXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRDb252ZXJzYXRpb25EYXRhID0gKGxldmVsKSA9PiB7XG4gIGNvbnN0IGRhdGFNYXAgPSB7XG4gICAgQTE6IHtcbiAgICAgIGV4ZXJjaXNlczogQ29udmVyc2F0aW9uQTEsIC8vIENvbnZlcnNhdGlvbkExIGVzdCBkw6lqw6AgdW4gdGFibGVhdSBkZSBzY8OpbmFyaW9zXG4gICAgfSxcbiAgICBBMjoge1xuICAgICAgZXhlcmNpc2VzOiBDb252ZXJzYXRpb25BMixcbiAgICB9LFxuICAgIEIxOiB7XG4gICAgICBleGVyY2lzZXM6IENvbnZlcnNhdGlvbkIxLFxuICAgIH0sXG4gICAgQjI6IHtcbiAgICAgIGV4ZXJjaXNlczogQ29udmVyc2F0aW9uQjIsXG4gICAgfSxcbiAgICAgQzE6IHtcbiAgICAgIGV4ZXJjaXNlczogQ29udmVyc2F0aW9uQzEsXG4gICAgfSxcbiAgICAgQzI6IHtcbiAgICAgIGV4ZXJjaXNlczogQ29udmVyc2F0aW9uQzIsXG4gICAgfSxcblxuICB9O1xuXG4gIHJldHVybiBkYXRhTWFwW2xldmVsXSB8fCBkYXRhTWFwLkExOyAvLyBQYXIgZMOpZmF1dCwgcmV0b3VybmUgQTEgc2kgbGUgbml2ZWF1IG4nZXhpc3RlIHBhc1xufTtcblxuLyoqXG4gKiBSw6ljdXDDqHJlIGxhIGNvdWxldXIgYXNzb2Npw6llIMOgIHVuIG5pdmVhdSBkZSBsYW5ndWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBsZXZlbCAtIExlIG5pdmVhdSBkZSBsYW5ndWUgKEExLCBBMiwgQjEsIEIyLCBDMSwgQzIpXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBDb2RlIGNvdWxldXIgaGV4YWTDqWNpbWFsIHBvdXIgbGUgbml2ZWF1XG4gKi9cbmV4cG9ydCBjb25zdCBnZXRMZXZlbENvbG9yID0gKGxldmVsKSA9PiB7XG4gIGNvbnN0IGNvbG9ycyA9IHtcbiAgICBBMTogXCIjM2I4MmY2XCIsIC8vIEJsZXVcbiAgICBBMjogXCIjOGI1Y2Y2XCIsIC8vIFZpb2xldFxuICAgIEIxOiBcIiMxMGI5ODFcIiwgLy8gVmVydFxuICAgIEIyOiBcIiNmNTllMGJcIiwgLy8gT3JhbmdlXG4gICAgQzE6IFwiI2VmNDQ0NFwiLCAvLyBSb3VnZVxuICAgIEMyOiBcIiM2MzY2ZjFcIiwgLy8gSW5kaWdvXG4gIH07XG4gIHJldHVybiBjb2xvcnNbbGV2ZWxdIHx8IFwiIzQzNjFFRVwiOyAvLyBDb3VsZXVyIHBhciBkw6lmYXV0XG59O1xuXG4vKipcbiAqIFLDqWN1cMOocmUgbGUgbm9tYnJlIHRvdGFsIGRlIHNjw6luYXJpb3MgcG91ciB1biBuaXZlYXVcbiAqIEBwYXJhbSB7c3RyaW5nfSBsZXZlbCAtIExlIG5pdmVhdSBkZSBsYW5ndWVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IE5vbWJyZSB0b3RhbCBkZSBzY8OpbmFyaW9zXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRDb252ZXJzYXRpb25TY2VuYXJpb3NDb3VudCA9IChsZXZlbCkgPT4ge1xuICBjb25zdCBkYXRhID0gZ2V0Q29udmVyc2F0aW9uRGF0YShsZXZlbCk7XG4gIHJldHVybiBkYXRhLmV4ZXJjaXNlcyA/IGRhdGEuZXhlcmNpc2VzLmxlbmd0aCA6IDA7XG59O1xuXG4vKipcbiAqIFLDqWN1cMOocmUgbGUgbm9tYnJlIHRvdGFsIGQnw6l0YXBlcyBwb3VyIHRvdXMgbGVzIHNjw6luYXJpb3MgZCd1biBuaXZlYXVcbiAqIEBwYXJhbSB7c3RyaW5nfSBsZXZlbCAtIExlIG5pdmVhdSBkZSBsYW5ndWVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IE5vbWJyZSB0b3RhbCBkJ8OpdGFwZXNcbiAqL1xuZXhwb3J0IGNvbnN0IGdldFRvdGFsU3RlcHNDb3VudCA9IChsZXZlbCkgPT4ge1xuICBjb25zdCBkYXRhID0gZ2V0Q29udmVyc2F0aW9uRGF0YShsZXZlbCk7XG4gIGlmICghZGF0YS5leGVyY2lzZXMpIHJldHVybiAwO1xuXG4gIHJldHVybiBkYXRhLmV4ZXJjaXNlcy5yZWR1Y2UoKHRvdGFsLCBzY2VuYXJpbykgPT4ge1xuICAgIHJldHVybiB0b3RhbCArIChzY2VuYXJpby5zdGVwcyA/IHNjZW5hcmlvLnN0ZXBzLmxlbmd0aCA6IDApO1xuICB9LCAwKTtcbn07XG5cbi8qKlxuICogUsOpY3Vww6hyZSBsZXMgc3RhdGlzdGlxdWVzIGNvbXBsw6h0ZXMgcG91ciB1biBuaXZlYXVcbiAqIEBwYXJhbSB7c3RyaW5nfSBsZXZlbCAtIExlIG5pdmVhdSBkZSBsYW5ndWVcbiAqIEByZXR1cm5zIHtPYmplY3R9IFN0YXRpc3RpcXVlcyBkdSBuaXZlYXVcbiAqL1xuZXhwb3J0IGNvbnN0IGdldENvbnZlcnNhdGlvbkxldmVsU3RhdHMgPSAobGV2ZWwpID0+IHtcbiAgY29uc3QgZGF0YSA9IGdldENvbnZlcnNhdGlvbkRhdGEobGV2ZWwpO1xuXG4gIGlmICghZGF0YS5leGVyY2lzZXMpXG4gICAgcmV0dXJuIHtcbiAgICAgIHNjZW5hcmlvczogMCxcbiAgICAgIHRvdGFsU3RlcHM6IDAsXG4gICAgICBhdmVyYWdlU3RlcHNQZXJTY2VuYXJpbzogMCxcbiAgICB9O1xuXG4gIGNvbnN0IHRvdGFsU2NlbmFyaW9zID0gZGF0YS5leGVyY2lzZXMubGVuZ3RoO1xuICBjb25zdCB0b3RhbFN0ZXBzID0gZ2V0VG90YWxTdGVwc0NvdW50KGxldmVsKTtcblxuICByZXR1cm4ge1xuICAgIHNjZW5hcmlvczogdG90YWxTY2VuYXJpb3MsXG4gICAgdG90YWxTdGVwcyxcbiAgICBhdmVyYWdlU3RlcHNQZXJTY2VuYXJpbzpcbiAgICAgIHRvdGFsU2NlbmFyaW9zID4gMCA/IHRvdGFsU3RlcHMgLyB0b3RhbFNjZW5hcmlvcyA6IDAsXG4gIH07XG59O1xuXG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBR0EsSUFBQUEsRUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsR0FBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsRUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsR0FBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUksRUFBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUssR0FBQSxHQUFBTixzQkFBQSxDQUFBQyxPQUFBO0FBVU8sSUFBTU0sbUJBQW1CLEdBQUFDLE9BQUEsQ0FBQUQsbUJBQUEsR0FBRyxTQUF0QkEsbUJBQW1CQSxDQUFJRSxLQUFLLEVBQUs7RUFDNUMsSUFBTUMsT0FBTyxHQUFHO0lBQ2RDLEVBQUUsRUFBRTtNQUNGQyxTQUFTLEVBQUVDO0lBQ2IsQ0FBQztJQUNEQyxFQUFFLEVBQUU7TUFDRkYsU0FBUyxFQUFFRztJQUNiLENBQUM7SUFDREMsRUFBRSxFQUFFO01BQ0ZKLFNBQVMsRUFBRUs7SUFDYixDQUFDO0lBQ0RDLEVBQUUsRUFBRTtNQUNGTixTQUFTLEVBQUVPO0lBQ2IsQ0FBQztJQUNBQyxFQUFFLEVBQUU7TUFDSFIsU0FBUyxFQUFFUztJQUNiLENBQUM7SUFDQUMsRUFBRSxFQUFFO01BQ0hWLFNBQVMsRUFBRVc7SUFDYjtFQUVGLENBQUM7RUFFRCxPQUFPYixPQUFPLENBQUNELEtBQUssQ0FBQyxJQUFJQyxPQUFPLENBQUNDLEVBQUU7QUFDckMsQ0FBQztBQU9NLElBQU1hLGFBQWEsR0FBQWhCLE9BQUEsQ0FBQWdCLGFBQUEsR0FBRyxTQUFoQkEsYUFBYUEsQ0FBSWYsS0FBSyxFQUFLO0VBQ3RDLElBQU1nQixNQUFNLEdBQUc7SUFDYmQsRUFBRSxFQUFFLFNBQVM7SUFDYkcsRUFBRSxFQUFFLFNBQVM7SUFDYkUsRUFBRSxFQUFFLFNBQVM7SUFDYkUsRUFBRSxFQUFFLFNBQVM7SUFDYkUsRUFBRSxFQUFFLFNBQVM7SUFDYkUsRUFBRSxFQUFFO0VBQ04sQ0FBQztFQUNELE9BQU9HLE1BQU0sQ0FBQ2hCLEtBQUssQ0FBQyxJQUFJLFNBQVM7QUFDbkMsQ0FBQztBQU9NLElBQU1pQiw2QkFBNkIsR0FBQWxCLE9BQUEsQ0FBQWtCLDZCQUFBLEdBQUcsU0FBaENBLDZCQUE2QkEsQ0FBSWpCLEtBQUssRUFBSztFQUN0RCxJQUFNa0IsSUFBSSxHQUFHcEIsbUJBQW1CLENBQUNFLEtBQUssQ0FBQztFQUN2QyxPQUFPa0IsSUFBSSxDQUFDZixTQUFTLEdBQUdlLElBQUksQ0FBQ2YsU0FBUyxDQUFDZ0IsTUFBTSxHQUFHLENBQUM7QUFDbkQsQ0FBQztBQU9NLElBQU1DLGtCQUFrQixHQUFBckIsT0FBQSxDQUFBcUIsa0JBQUEsR0FBRyxTQUFyQkEsa0JBQWtCQSxDQUFJcEIsS0FBSyxFQUFLO0VBQzNDLElBQU1rQixJQUFJLEdBQUdwQixtQkFBbUIsQ0FBQ0UsS0FBSyxDQUFDO0VBQ3ZDLElBQUksQ0FBQ2tCLElBQUksQ0FBQ2YsU0FBUyxFQUFFLE9BQU8sQ0FBQztFQUU3QixPQUFPZSxJQUFJLENBQUNmLFNBQVMsQ0FBQ2tCLE1BQU0sQ0FBQyxVQUFDQyxLQUFLLEVBQUVDLFFBQVEsRUFBSztJQUNoRCxPQUFPRCxLQUFLLElBQUlDLFFBQVEsQ0FBQ0MsS0FBSyxHQUFHRCxRQUFRLENBQUNDLEtBQUssQ0FBQ0wsTUFBTSxHQUFHLENBQUMsQ0FBQztFQUM3RCxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQU9NLElBQU1NLHlCQUF5QixHQUFBMUIsT0FBQSxDQUFBMEIseUJBQUEsR0FBRyxTQUE1QkEseUJBQXlCQSxDQUFJekIsS0FBSyxFQUFLO0VBQ2xELElBQU1rQixJQUFJLEdBQUdwQixtQkFBbUIsQ0FBQ0UsS0FBSyxDQUFDO0VBRXZDLElBQUksQ0FBQ2tCLElBQUksQ0FBQ2YsU0FBUyxFQUNqQixPQUFPO0lBQ0x1QixTQUFTLEVBQUUsQ0FBQztJQUNaQyxVQUFVLEVBQUUsQ0FBQztJQUNiQyx1QkFBdUIsRUFBRTtFQUMzQixDQUFDO0VBRUgsSUFBTUMsY0FBYyxHQUFHWCxJQUFJLENBQUNmLFNBQVMsQ0FBQ2dCLE1BQU07RUFDNUMsSUFBTVEsVUFBVSxHQUFHUCxrQkFBa0IsQ0FBQ3BCLEtBQUssQ0FBQztFQUU1QyxPQUFPO0lBQ0wwQixTQUFTLEVBQUVHLGNBQWM7SUFDekJGLFVBQVUsRUFBVkEsVUFBVTtJQUNWQyx1QkFBdUIsRUFDckJDLGNBQWMsR0FBRyxDQUFDLEdBQUdGLFVBQVUsR0FBR0UsY0FBYyxHQUFHO0VBQ3ZELENBQUM7QUFDSCxDQUFDIiwiaWdub3JlTGlzdCI6W119