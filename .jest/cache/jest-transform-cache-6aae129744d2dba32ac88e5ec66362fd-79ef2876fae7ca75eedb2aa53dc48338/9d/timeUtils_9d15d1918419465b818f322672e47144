f1840adae45806772c9c0b04da4fa0ed
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.secondsToMinutes = exports.sanitizeTimeStats = exports.minutesToSeconds = exports.isValidTimeInSeconds = exports.isValidStatsStructure = exports.hasMinimumTime = exports.getTotalTimeFromStats = exports.getSortedStatsByTime = exports.getElapsedSeconds = exports.formatTimeCompact = exports.formatTime = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _timeConstants = require("./timeConstants.js");
var isValidTimeInSeconds = exports.isValidTimeInSeconds = function isValidTimeInSeconds(timeInSeconds) {
  return typeof timeInSeconds === 'number' && !isNaN(timeInSeconds) && isFinite(timeInSeconds) && timeInSeconds >= 0 && timeInSeconds <= 86400;
};
var sanitizeTimeStats = exports.sanitizeTimeStats = function sanitizeTimeStats(stats) {
  if (!stats || typeof stats !== 'object') {
    return Object.assign({}, _timeConstants.DEFAULT_STATS);
  }
  var sanitized = Object.assign({}, _timeConstants.DEFAULT_STATS);
  Object.values(_timeConstants.EXERCISE_TYPES).forEach(function (exerciseType) {
    var timeValue = stats[exerciseType];
    if (isValidTimeInSeconds(timeValue)) {
      sanitized[exerciseType] = Math.floor(timeValue);
    } else {
      sanitized[exerciseType] = 0;
    }
  });
  return sanitized;
};
var getElapsedSeconds = exports.getElapsedSeconds = function getElapsedSeconds(startTime) {
  if (!startTime || typeof startTime !== 'number') {
    return 0;
  }
  var elapsed = Math.floor((Date.now() - startTime) / 1000);
  return Math.max(0, elapsed);
};
var secondsToMinutes = exports.secondsToMinutes = function secondsToMinutes(seconds) {
  if (!isValidTimeInSeconds(seconds)) {
    return 0;
  }
  return Math.floor(seconds / 60);
};
var minutesToSeconds = exports.minutesToSeconds = function minutesToSeconds(minutes) {
  if (typeof minutes !== 'number' || isNaN(minutes) || minutes < 0) {
    return 0;
  }
  return minutes * 60;
};
var formatTime = exports.formatTime = function formatTime(seconds) {
  if (!isValidTimeInSeconds(seconds)) {
    return "0s";
  }
  var minutes = Math.floor(seconds / 60);
  var remainingSeconds = seconds % 60;
  if (minutes === 0) {
    return `${remainingSeconds}s`;
  }
  if (remainingSeconds === 0) {
    return `${minutes}m`;
  }
  return `${minutes}m ${remainingSeconds}s`;
};
var formatTimeCompact = exports.formatTimeCompact = function formatTimeCompact(seconds) {
  if (!isValidTimeInSeconds(seconds)) {
    return "0:00";
  }
  var minutes = Math.floor(seconds / 60);
  var remainingSeconds = seconds % 60;
  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
};
var isValidStatsStructure = exports.isValidStatsStructure = function isValidStatsStructure(stats) {
  if (!stats || typeof stats !== 'object') {
    return false;
  }
  var requiredTypes = Object.values(_timeConstants.EXERCISE_TYPES);
  var hasAllTypes = requiredTypes.every(function (type) {
    return Object.hasOwn(stats, type) && isValidTimeInSeconds(stats[type]);
  });
  return hasAllTypes;
};
var getTotalTimeFromStats = exports.getTotalTimeFromStats = function getTotalTimeFromStats(stats) {
  if (!isValidStatsStructure(stats)) {
    return 0;
  }
  return Object.values(stats).reduce(function (total, time) {
    return total + time;
  }, 0);
};
var getSortedStatsByTime = exports.getSortedStatsByTime = function getSortedStatsByTime(stats) {
  if (!isValidStatsStructure(stats)) {
    return [];
  }
  return Object.entries(stats).map(function (_ref) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
      exerciseType = _ref2[0],
      time = _ref2[1];
    return {
      exerciseType: exerciseType,
      time: time
    };
  }).sort(function (a, b) {
    return b.time - a.time;
  });
};
var hasMinimumTime = exports.hasMinimumTime = function hasMinimumTime(stats, exerciseType) {
  var minimumMinutes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  if (!isValidStatsStructure(stats) || !Object.values(_timeConstants.EXERCISE_TYPES).includes(exerciseType)) {
    return false;
  }
  var timeInSeconds = stats[exerciseType] || 0;
  var minimumSeconds = minutesToSeconds(minimumMinutes);
  return timeInSeconds >= minimumSeconds;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdGltZUNvbnN0YW50cyIsInJlcXVpcmUiLCJpc1ZhbGlkVGltZUluU2Vjb25kcyIsImV4cG9ydHMiLCJ0aW1lSW5TZWNvbmRzIiwiaXNOYU4iLCJpc0Zpbml0ZSIsInNhbml0aXplVGltZVN0YXRzIiwic3RhdHMiLCJPYmplY3QiLCJhc3NpZ24iLCJERUZBVUxUX1NUQVRTIiwic2FuaXRpemVkIiwidmFsdWVzIiwiRVhFUkNJU0VfVFlQRVMiLCJmb3JFYWNoIiwiZXhlcmNpc2VUeXBlIiwidGltZVZhbHVlIiwiTWF0aCIsImZsb29yIiwiZ2V0RWxhcHNlZFNlY29uZHMiLCJzdGFydFRpbWUiLCJlbGFwc2VkIiwiRGF0ZSIsIm5vdyIsIm1heCIsInNlY29uZHNUb01pbnV0ZXMiLCJzZWNvbmRzIiwibWludXRlc1RvU2Vjb25kcyIsIm1pbnV0ZXMiLCJmb3JtYXRUaW1lIiwicmVtYWluaW5nU2Vjb25kcyIsImZvcm1hdFRpbWVDb21wYWN0IiwidG9TdHJpbmciLCJwYWRTdGFydCIsImlzVmFsaWRTdGF0c1N0cnVjdHVyZSIsInJlcXVpcmVkVHlwZXMiLCJoYXNBbGxUeXBlcyIsImV2ZXJ5IiwidHlwZSIsImhhc093biIsImdldFRvdGFsVGltZUZyb21TdGF0cyIsInJlZHVjZSIsInRvdGFsIiwidGltZSIsImdldFNvcnRlZFN0YXRzQnlUaW1lIiwiZW50cmllcyIsIm1hcCIsIl9yZWYiLCJfcmVmMiIsIl9zbGljZWRUb0FycmF5MiIsImRlZmF1bHQiLCJzb3J0IiwiYSIsImIiLCJoYXNNaW5pbXVtVGltZSIsIm1pbmltdW1NaW51dGVzIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiaW5jbHVkZXMiLCJtaW5pbXVtU2Vjb25kcyJdLCJzb3VyY2VzIjpbInRpbWVVdGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB1dGlscy90aW1lVXRpbHMuanNcclxuLyoqXHJcbiAqIFV0aWxpdGFpcmVzIHBvdXIgbGEgZ2VzdGlvbiBldCB2YWxpZGF0aW9uIGRlcyB0ZW1wc1xyXG4gKi9cclxuXHJcbmltcG9ydCB7IERFRkFVTFRfU1RBVFMsIEVYRVJDSVNFX1RZUEVTIH0gZnJvbSAnLi90aW1lQ29uc3RhbnRzLmpzJztcclxuXHJcbi8qKlxyXG4gKiBWYWxpZGUgcXUndW5lIHZhbGV1ciBkZSB0ZW1wcyBlbiBzZWNvbmRlcyBlc3QgY29ycmVjdGVcclxuICogQHBhcmFtIHthbnl9IHRpbWVJblNlY29uZHMgLSBWYWxldXIgw6AgdmFsaWRlclxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBzaSB2YWxpZGVcclxuICovXHJcbmV4cG9ydCBjb25zdCBpc1ZhbGlkVGltZUluU2Vjb25kcyA9ICh0aW1lSW5TZWNvbmRzKSA9PiB7XHJcbiAgcmV0dXJuIChcclxuICAgIHR5cGVvZiB0aW1lSW5TZWNvbmRzID09PSAnbnVtYmVyJyAmJlxyXG4gICAgIWlzTmFOKHRpbWVJblNlY29uZHMpICYmXHJcbiAgICBpc0Zpbml0ZSh0aW1lSW5TZWNvbmRzKSAmJlxyXG4gICAgdGltZUluU2Vjb25kcyA+PSAwICYmXHJcbiAgICB0aW1lSW5TZWNvbmRzIDw9IDg2NDAwIC8vIE1heCAyNGggcGFyIHNlc3Npb25cclxuICApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNhbml0aXNlIGxlcyBzdGF0cyBkZSB0ZW1wcyBwb3VyIMOpdml0ZXIgbGVzIHZhbGV1cnMgaW52YWxpZGVzXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0cyAtIFN0YXRzIMOgIHNhbml0aXNlclxyXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBTdGF0cyBuZXR0b3nDqWVzXHJcbiAqL1xyXG5leHBvcnQgY29uc3Qgc2FuaXRpemVUaW1lU3RhdHMgPSAoc3RhdHMpID0+IHtcclxuICBpZiAoIXN0YXRzIHx8IHR5cGVvZiBzdGF0cyAhPT0gJ29iamVjdCcpIHtcclxuICAgIHJldHVybiB7IC4uLkRFRkFVTFRfU1RBVFMgfTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHNhbml0aXplZCA9IHsgLi4uREVGQVVMVF9TVEFUUyB9O1xyXG5cclxuICAvLyBWYWxpZGVyIGNoYXF1ZSB0eXBlIGQnZXhlcmNpY2VcclxuICBPYmplY3QudmFsdWVzKEVYRVJDSVNFX1RZUEVTKS5mb3JFYWNoKGV4ZXJjaXNlVHlwZSA9PiB7XHJcbiAgICBjb25zdCB0aW1lVmFsdWUgPSBzdGF0c1tleGVyY2lzZVR5cGVdO1xyXG4gICAgXHJcbiAgICBpZiAoaXNWYWxpZFRpbWVJblNlY29uZHModGltZVZhbHVlKSkge1xyXG4gICAgICBzYW5pdGl6ZWRbZXhlcmNpc2VUeXBlXSA9IE1hdGguZmxvb3IodGltZVZhbHVlKTsgLy8gQXJyb25kaXIgw6AgbCdlbnRpZXJcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHNhbml0aXplZFtleGVyY2lzZVR5cGVdID0gMDsgLy8gVmFsZXVyIHBhciBkw6lmYXV0XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiBzYW5pdGl6ZWQ7XHJcbn07XHJcblxyXG4vKipcclxuICogQ2FsY3VsZSBsZSB0ZW1wcyDDqWNvdWzDqSBkZXB1aXMgdW4gdGltZXN0YW1wXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydFRpbWUgLSBUaW1lc3RhbXAgZGUgZMOpYnV0XHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRlbXBzIMOpY291bMOpIGVuIHNlY29uZGVzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZ2V0RWxhcHNlZFNlY29uZHMgPSAoc3RhcnRUaW1lKSA9PiB7XHJcbiAgaWYgKCFzdGFydFRpbWUgfHwgdHlwZW9mIHN0YXJ0VGltZSAhPT0gJ251bWJlcicpIHtcclxuICAgIHJldHVybiAwO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgZWxhcHNlZCA9IE1hdGguZmxvb3IoKERhdGUubm93KCkgLSBzdGFydFRpbWUpIC8gMTAwMCk7XHJcbiAgcmV0dXJuIE1hdGgubWF4KDAsIGVsYXBzZWQpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRpdCBkZXMgc2Vjb25kZXMgZW4gbWludXRlcyAoYXJyb25kaSlcclxuICogQHBhcmFtIHtudW1iZXJ9IHNlY29uZHMgLSBTZWNvbmRlcyDDoCBjb252ZXJ0aXJcclxuICogQHJldHVybnMge251bWJlcn0gTWludXRlcyBhcnJvbmRpZXNcclxuICovXHJcbmV4cG9ydCBjb25zdCBzZWNvbmRzVG9NaW51dGVzID0gKHNlY29uZHMpID0+IHtcclxuICBpZiAoIWlzVmFsaWRUaW1lSW5TZWNvbmRzKHNlY29uZHMpKSB7XHJcbiAgICByZXR1cm4gMDtcclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIE1hdGguZmxvb3Ioc2Vjb25kcyAvIDYwKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0aXQgZGVzIG1pbnV0ZXMgZW4gc2Vjb25kZXNcclxuICogQHBhcmFtIHtudW1iZXJ9IG1pbnV0ZXMgLSBNaW51dGVzIMOgIGNvbnZlcnRpclxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBTZWNvbmRlc1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IG1pbnV0ZXNUb1NlY29uZHMgPSAobWludXRlcykgPT4ge1xyXG4gIGlmICh0eXBlb2YgbWludXRlcyAhPT0gJ251bWJlcicgfHwgaXNOYU4obWludXRlcykgfHwgbWludXRlcyA8IDApIHtcclxuICAgIHJldHVybiAwO1xyXG4gIH1cclxuICBcclxuICByZXR1cm4gbWludXRlcyAqIDYwO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEZvcm1hdGUgdW4gdGVtcHMgZW4gc2Vjb25kZXMgcG91ciBsJ2FmZmljaGFnZVxyXG4gKiBAcGFyYW0ge251bWJlcn0gc2Vjb25kcyAtIFNlY29uZGVzIMOgIGZvcm1hdGVyXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRlbXBzIGZvcm1hdMOpIChleDogXCI1bSAzMHNcIilcclxuICovXHJcbmV4cG9ydCBjb25zdCBmb3JtYXRUaW1lID0gKHNlY29uZHMpID0+IHtcclxuICBpZiAoIWlzVmFsaWRUaW1lSW5TZWNvbmRzKHNlY29uZHMpKSB7XHJcbiAgICByZXR1cm4gXCIwc1wiO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgbWludXRlcyA9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIDYwKTtcclxuICBjb25zdCByZW1haW5pbmdTZWNvbmRzID0gc2Vjb25kcyAlIDYwO1xyXG5cclxuICBpZiAobWludXRlcyA9PT0gMCkge1xyXG4gICAgcmV0dXJuIGAke3JlbWFpbmluZ1NlY29uZHN9c2A7XHJcbiAgfVxyXG5cclxuICBpZiAocmVtYWluaW5nU2Vjb25kcyA9PT0gMCkge1xyXG4gICAgcmV0dXJuIGAke21pbnV0ZXN9bWA7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gYCR7bWludXRlc31tICR7cmVtYWluaW5nU2Vjb25kc31zYDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBGb3JtYXRlIHVuIHRlbXBzIGVuIHNlY29uZGVzIHBvdXIgbCdhZmZpY2hhZ2UgY29tcGFjdFxyXG4gKiBAcGFyYW0ge251bWJlcn0gc2Vjb25kcyAtIFNlY29uZGVzIMOgIGZvcm1hdGVyXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRlbXBzIGZvcm1hdMOpIGNvbXBhY3QgKGV4OiBcIjU6MzBcIilcclxuICovXHJcbmV4cG9ydCBjb25zdCBmb3JtYXRUaW1lQ29tcGFjdCA9IChzZWNvbmRzKSA9PiB7XHJcbiAgaWYgKCFpc1ZhbGlkVGltZUluU2Vjb25kcyhzZWNvbmRzKSkge1xyXG4gICAgcmV0dXJuIFwiMDowMFwiO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgbWludXRlcyA9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIDYwKTtcclxuICBjb25zdCByZW1haW5pbmdTZWNvbmRzID0gc2Vjb25kcyAlIDYwO1xyXG5cclxuICByZXR1cm4gYCR7bWludXRlc306JHtyZW1haW5pbmdTZWNvbmRzLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKX1gO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFZhbGlkZSBxdSd1biBvYmpldCBkZSBzdGF0cyBhIGxhIGJvbm5lIHN0cnVjdHVyZVxyXG4gKiBAcGFyYW0ge2FueX0gc3RhdHMgLSBTdGF0cyDDoCB2YWxpZGVyXHJcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIHNpIHN0cnVjdHVyZSB2YWxpZGVcclxuICovXHJcbmV4cG9ydCBjb25zdCBpc1ZhbGlkU3RhdHNTdHJ1Y3R1cmUgPSAoc3RhdHMpID0+IHtcclxuICBpZiAoIXN0YXRzIHx8IHR5cGVvZiBzdGF0cyAhPT0gJ29iamVjdCcpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIC8vIFbDqXJpZmllciBxdWUgdG91cyBsZXMgdHlwZXMgZCdleGVyY2ljZXMgcmVxdWlzIHNvbnQgcHLDqXNlbnRzXHJcbiAgY29uc3QgcmVxdWlyZWRUeXBlcyA9IE9iamVjdC52YWx1ZXMoRVhFUkNJU0VfVFlQRVMpO1xyXG4gIGNvbnN0IGhhc0FsbFR5cGVzID0gcmVxdWlyZWRUeXBlcy5ldmVyeSh0eXBlID0+IFxyXG4gICAgT2JqZWN0Lmhhc093bihzdGF0cywgdHlwZSkgJiYgaXNWYWxpZFRpbWVJblNlY29uZHMoc3RhdHNbdHlwZV0pXHJcbiAgKTtcclxuXHJcbiAgcmV0dXJuIGhhc0FsbFR5cGVzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENhbGN1bGUgbGUgdGVtcHMgdG90YWwgZGUgdG91dGVzIGxlcyBzdGF0c1xyXG4gKiBAcGFyYW0ge29iamVjdH0gc3RhdHMgLSBTdGF0cyDDoCBhZGRpdGlvbm5lclxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBUZW1wcyB0b3RhbCBlbiBzZWNvbmRlc1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGdldFRvdGFsVGltZUZyb21TdGF0cyA9IChzdGF0cykgPT4ge1xyXG4gIGlmICghaXNWYWxpZFN0YXRzU3RydWN0dXJlKHN0YXRzKSkge1xyXG4gICAgcmV0dXJuIDA7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gT2JqZWN0LnZhbHVlcyhzdGF0cykucmVkdWNlKCh0b3RhbCwgdGltZSkgPT4gdG90YWwgKyB0aW1lLCAwKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBPYnRpZW50IGxlcyBzdGF0cyB0cmnDqWVzIHBhciB0ZW1wcyBkw6ljcm9pc3NhbnRcclxuICogQHBhcmFtIHtvYmplY3R9IHN0YXRzIC0gU3RhdHMgw6AgdHJpZXJcclxuICogQHJldHVybnMge0FycmF5fSBUYWJsZWF1IGQnb2JqZXRzIHtleGVyY2lzZVR5cGUsIHRpbWV9IHRyacOpc1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGdldFNvcnRlZFN0YXRzQnlUaW1lID0gKHN0YXRzKSA9PiB7XHJcbiAgaWYgKCFpc1ZhbGlkU3RhdHNTdHJ1Y3R1cmUoc3RhdHMpKSB7XHJcbiAgICByZXR1cm4gW107XHJcbiAgfVxyXG5cclxuICByZXR1cm4gT2JqZWN0LmVudHJpZXMoc3RhdHMpXHJcbiAgICAubWFwKChbZXhlcmNpc2VUeXBlLCB0aW1lXSkgPT4gKHsgZXhlcmNpc2VUeXBlLCB0aW1lIH0pKVxyXG4gICAgLnNvcnQoKGEsIGIpID0+IGIudGltZSAtIGEudGltZSk7XHJcbn07XHJcblxyXG4vKipcclxuICogVsOpcmlmaWUgc2kgbCd1dGlsaXNhdGV1ciBhIGR1IHRlbXBzIHN1ciB1biBleGVyY2ljZSBzcMOpY2lmaXF1ZVxyXG4gKiBAcGFyYW0ge29iamVjdH0gc3RhdHMgLSBTdGF0cyBkZSBsJ3V0aWxpc2F0ZXVyXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBleGVyY2lzZVR5cGUgLSBUeXBlIGQnZXhlcmNpY2Ugw6AgdsOpcmlmaWVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW5pbXVtTWludXRlcyAtIE1pbmltdW0gZW4gbWludXRlcyAoZMOpZmF1dDogMSlcclxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgc2kgbCd1dGlsaXNhdGV1ciBhIGFzc2V6IGRlIHRlbXBzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgaGFzTWluaW11bVRpbWUgPSAoc3RhdHMsIGV4ZXJjaXNlVHlwZSwgbWluaW11bU1pbnV0ZXMgPSAxKSA9PiB7XHJcbiAgaWYgKCFpc1ZhbGlkU3RhdHNTdHJ1Y3R1cmUoc3RhdHMpIHx8ICFPYmplY3QudmFsdWVzKEVYRVJDSVNFX1RZUEVTKS5pbmNsdWRlcyhleGVyY2lzZVR5cGUpKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBjb25zdCB0aW1lSW5TZWNvbmRzID0gc3RhdHNbZXhlcmNpc2VUeXBlXSB8fCAwO1xyXG4gIGNvbnN0IG1pbmltdW1TZWNvbmRzID0gbWludXRlc1RvU2Vjb25kcyhtaW5pbXVtTWludXRlcyk7XHJcbiAgXHJcbiAgcmV0dXJuIHRpbWVJblNlY29uZHMgPj0gbWluaW11bVNlY29uZHM7XHJcbn07Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFLQSxJQUFBQSxjQUFBLEdBQUFDLE9BQUE7QUFPTyxJQUFNQyxvQkFBb0IsR0FBQUMsT0FBQSxDQUFBRCxvQkFBQSxHQUFHLFNBQXZCQSxvQkFBb0JBLENBQUlFLGFBQWEsRUFBSztFQUNyRCxPQUNFLE9BQU9BLGFBQWEsS0FBSyxRQUFRLElBQ2pDLENBQUNDLEtBQUssQ0FBQ0QsYUFBYSxDQUFDLElBQ3JCRSxRQUFRLENBQUNGLGFBQWEsQ0FBQyxJQUN2QkEsYUFBYSxJQUFJLENBQUMsSUFDbEJBLGFBQWEsSUFBSSxLQUFLO0FBRTFCLENBQUM7QUFPTSxJQUFNRyxpQkFBaUIsR0FBQUosT0FBQSxDQUFBSSxpQkFBQSxHQUFHLFNBQXBCQSxpQkFBaUJBLENBQUlDLEtBQUssRUFBSztFQUMxQyxJQUFJLENBQUNBLEtBQUssSUFBSSxPQUFPQSxLQUFLLEtBQUssUUFBUSxFQUFFO0lBQ3ZDLE9BQUFDLE1BQUEsQ0FBQUMsTUFBQSxLQUFZQyw0QkFBYTtFQUMzQjtFQUVBLElBQU1DLFNBQVMsR0FBQUgsTUFBQSxDQUFBQyxNQUFBLEtBQVFDLDRCQUFhLENBQUU7RUFHdENGLE1BQU0sQ0FBQ0ksTUFBTSxDQUFDQyw2QkFBYyxDQUFDLENBQUNDLE9BQU8sQ0FBQyxVQUFBQyxZQUFZLEVBQUk7SUFDcEQsSUFBTUMsU0FBUyxHQUFHVCxLQUFLLENBQUNRLFlBQVksQ0FBQztJQUVyQyxJQUFJZCxvQkFBb0IsQ0FBQ2UsU0FBUyxDQUFD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