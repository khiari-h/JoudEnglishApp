faedb2ac6080f7213fbad0a7a7377828
_getJestObj().mock('react-native/Libraries/Components/ScrollView/ScrollView', function () {
  var React = require('react');
  var ScrollView = jest.requireActual('react-native/Libraries/Components/ScrollView/ScrollView');
  var scrollToSpy = jest.fn();
  return Object.assign({}, ScrollView, {
    default: React.forwardRef(function (props, ref) {
      React.useImperativeHandle(ref, function () {
        return {
          scrollTo: scrollToSpy
        };
      });
      return (0, _jsxRuntime.jsx)(ScrollView, Object.assign({}, props));
    }),
    scrollToSpy: scrollToSpy
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
require("@testing-library/jest-native");
var _CategorySelector = _interopRequireDefault(require("../../../src/components/exercise-common/CategorySelector"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.useFakeTimers();
jest.spyOn(_reactNative2.Animated, 'timing').mockImplementation(function (value, config) {
  return {
    start: function start(callback) {
      setTimeout(function () {
        if (callback) {
          callback({
            finished: true
          });
        }
      }, config.duration || 300);
    },
    stop: jest.fn()
  };
});
describe('CategorySelector Component', function () {
  var mockCategories = [{
    id: '1',
    name: 'Fruits'
  }, {
    id: '2',
    name: 'Vegetables'
  }, {
    id: '3',
    name: 'Dairy Products'
  }, {
    id: '4',
    name: 'Meat & Fish'
  }, {
    id: '5',
    name: 'Beverages'
  }];
  var defaultProps = {
    categories: mockCategories,
    selectedCategory: '1',
    onSelectCategory: jest.fn()
  };
  var renderCategorySelector = function renderCategorySelector() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, props)));
  };
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  describe('Rendering', function () {
    it('should render without crashing', function () {
      expect(renderCategorySelector()).toBeTruthy();
    });
    it('should render all categories correctly', function () {
      var _renderCategorySelect = renderCategorySelector(),
        getByText = _renderCategorySelect.getByText;
      mockCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should render categories in the correct order', function () {
      var _renderCategorySelect2 = renderCategorySelector(),
        getAllByRole = _renderCategorySelect2.getAllByRole;
      var categoryNames = getAllByRole('button').map(function (element) {
        return element.props.accessibilityLabel;
      });
      expect(categoryNames).toEqual(mockCategories.map(function (cat) {
        return cat.name;
      }));
    });
    it('should handle empty categories array gracefully', function () {
      var _renderCategorySelect3 = renderCategorySelector({
          categories: []
        }),
        queryByText = _renderCategorySelect3.queryByText;
      mockCategories.forEach(function (category) {
        expect(queryByText(category.name)).toBeNull();
      });
    });
    it('should highlight the selected category visually', function () {
      var _renderCategorySelect4 = renderCategorySelector({
          selectedCategory: '2'
        }),
        getByRole = _renderCategorySelect4.getByRole;
      var selectedPill = getByRole('button', {
        name: 'Vegetables'
      });
      expect(selectedPill).toHaveAccessibilityState({
        selected: true
      });
    });
  });
  describe('User Interactions', function () {
    it('should call onSelectCategory when a different category is pressed', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect5 = renderCategorySelector({
          selectedCategory: '1',
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect5.getByText;
      _reactNative.fireEvent.press(getByText('Vegetables'));
      expect(mockOnSelect).toHaveBeenCalledTimes(1);
      expect(mockOnSelect).toHaveBeenCalledWith('2');
    });
    it('should not call onSelectCategory when the same category is pressed', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect6 = renderCategorySelector({
          selectedCategory: '1',
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect6.getByText;
      _reactNative.fireEvent.press(getByText('Fruits'));
      expect(mockOnSelect).not.toHaveBeenCalled();
    });
    it('should call onSelectCategory with correct category id for each category', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect7 = renderCategorySelector({
          selectedCategory: '1',
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect7.getByText;
      var categoriesToTest = mockCategories.filter(function (cat) {
        return cat.id !== '1';
      });
      categoriesToTest.forEach(function (category) {
        _reactNative.fireEvent.press(getByText(category.name));
        expect(mockOnSelect).toHaveBeenCalledWith(category.id);
      });
      expect(mockOnSelect).toHaveBeenCalledTimes(categoriesToTest.length);
    });
  });
  describe('Animations', function () {
    it('should trigger press animations correctly', function () {
      var _renderCategorySelect8 = renderCategorySelector(),
        getByText = _renderCategorySelect8.getByText;
      var categoryPill = getByText('Vegetables');
      (0, _reactNative.act)(function () {
        (0, _reactNative.fireEvent)(categoryPill, 'pressIn');
        (0, _reactNative.fireEvent)(categoryPill, 'pressOut');
      });
      expect(categoryPill).toBeTruthy();
    });
    it('should handle rapid press interactions without crashing', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect9 = renderCategorySelector({
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect9.getByText;
      var categoryPill = getByText('Vegetables');
      (0, _reactNative.act)(function () {
        (0, _reactNative.fireEvent)(categoryPill, 'pressIn');
        (0, _reactNative.fireEvent)(categoryPill, 'pressOut');
        _reactNative.fireEvent.press(categoryPill);
        (0, _reactNative.fireEvent)(categoryPill, 'pressIn');
        (0, _reactNative.fireEvent)(categoryPill, 'pressOut');
      });
      expect(mockOnSelect).toHaveBeenCalledWith('2');
      expect(categoryPill).toBeTruthy();
    });
    it('should not trigger new animation if one is already in progress', function () {
      var mockOnSelect = jest.fn();
      var _renderCategorySelect0 = renderCategorySelector({
          selectedCategory: '1',
          onSelectCategory: mockOnSelect
        }),
        getByText = _renderCategorySelect0.getByText;
      _reactNative.fireEvent.press(getByText('Vegetables'));
      expect(mockOnSelect).toHaveBeenCalledTimes(1);
      jest.advanceTimersByTime(100);
      _reactNative.fireEvent.press(getByText('Dairy Products'));
      expect(mockOnSelect).toHaveBeenCalledTimes(1);
      jest.runAllTimers();
      _reactNative.fireEvent.press(getByText('Dairy Products'));
      expect(mockOnSelect).toHaveBeenCalledTimes(2);
    });
  });
  describe('Scrolling Behavior', function () {
    it('should scroll to selected category on mount', (0, _asyncToGenerator2.default)(function* () {
      var _renderCategorySelect1 = renderCategorySelector({
          selectedCategory: '4'
        }),
        getByText = _renderCategorySelect1.getByText;
      expect(getByText('Meat & Fish')).toBeTruthy();
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative2.ScrollView.scrollToSpy).toHaveBeenCalled();
      });
    }));
    it('should handle scrolling when selectedCategory changes', (0, _asyncToGenerator2.default)(function* () {
      var _renderCategorySelect10 = renderCategorySelector({
          selectedCategory: '1'
        }),
        rerender = _renderCategorySelect10.rerender;
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, defaultProps, {
        selectedCategory: "5"
      })));
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative2.ScrollView.scrollToSpy).toHaveBeenCalled();
      });
    }));
  });
  describe('Edge Cases', function () {
    it('should handle undefined selectedCategory gracefully', function () {
      var _renderCategorySelect11 = renderCategorySelector({
          selectedCategory: undefined
        }),
        getByText = _renderCategorySelect11.getByText;
      mockCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should handle null selectedCategory gracefully', function () {
      var _renderCategorySelect12 = renderCategorySelector({
          selectedCategory: null
        }),
        getByText = _renderCategorySelect12.getByText;
      mockCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should handle non-existent selectedCategory id', function () {
      var _renderCategorySelect13 = renderCategorySelector({
          selectedCategory: 'non-existent'
        }),
        getByText = _renderCategorySelect13.getByText;
      mockCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should handle missing onSelectCategory prop gracefully', function () {
      var _renderCategorySelect14 = renderCategorySelector({
          onSelectCategory: undefined
        }),
        getByText = _renderCategorySelect14.getByText;
      expect(function () {
        _reactNative.fireEvent.press(getByText('Vegetables'));
      }).not.toThrow();
    });
    it('should handle categories with special characters in names', function () {
      var specialCategories = [{
        id: '1',
        name: 'Café & Thé'
      }, {
        id: '2',
        name: 'Fruits & Légumes'
      }, {
        id: '3',
        name: 'Viande/Poisson'
      }];
      var _renderCategorySelect15 = renderCategorySelector({
          categories: specialCategories
        }),
        getByText = _renderCategorySelect15.getByText;
      specialCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
    it('should handle very long category names', function () {
      var longNameCategories = [{
        id: '1',
        name: 'This is a very long category name that might cause layout issues'
      }, {
        id: '2',
        name: 'Short'
      }];
      var _renderCategorySelect16 = renderCategorySelector({
          categories: longNameCategories
        }),
        getByText = _renderCategorySelect16.getByText;
      longNameCategories.forEach(function (category) {
        expect(getByText(category.name)).toBeTruthy();
      });
    });
  });
  describe('Performance', function () {
    it('should not re-render unnecessarily when props do not change', function () {
      var renderSpy = jest.fn();
      var TestWrapper = function TestWrapper(props) {
        renderSpy();
        return (0, _jsxRuntime.jsx)(_CategorySelector.default, Object.assign({}, props));
      };
      var stableProps = Object.assign({}, defaultProps);
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, Object.assign({}, stableProps))),
        rerender = _render.rerender;
      renderSpy.mockClear();
      rerender((0, _jsxRuntime.jsx)(TestWrapper, Object.assign({}, stableProps)));
      expect(renderSpy).toHaveBeenCalledTimes(0);
    });
    it('should handle large number of categories efficiently', function () {
      var manyCategories = Array.from({
        length: 100
      }, function (_, i) {
        return {
          id: `${i + 1}`,
          name: `Category ${i + 1}`
        };
      });
      var startTime = Date.now();
      var _renderCategorySelect17 = renderCategorySelector({
          categories: manyCategories
        }),
        queryAllByText = _renderCategorySelect17.queryAllByText;
      var endTime = Date.now();
      expect(endTime - startTime).toBeLessThan(1000);
      var categoryElements = queryAllByText(/^Category/);
      expect(categoryElements).toHaveLength(100);
    });
  });
  describe('Accessibility', function () {
    it('should have proper accessibility labels', function () {
      var _renderCategorySelect18 = renderCategorySelector(),
        getByLabelText = _renderCategorySelect18.getByLabelText;
      mockCategories.forEach(function (category) {
        var element = getByLabelText(category.name);
        expect(element).toBeTruthy();
      });
    });
    it('should support screen reader navigation', function () {
      var _renderCategorySelect19 = renderCategorySelector(),
        getAllByRole = _renderCategorySelect19.getAllByRole;
      var buttons = getAllByRole('button');
      expect(buttons).toHaveLength(mockCategories.length);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJSZWFjdCIsInJlcXVpcmUiLCJTY3JvbGxWaWV3IiwiamVzdCIsInJlcXVpcmVBY3R1YWwiLCJzY3JvbGxUb1NweSIsImZuIiwiT2JqZWN0IiwiYXNzaWduIiwiZGVmYXVsdCIsImZvcndhcmRSZWYiLCJwcm9wcyIsInJlZiIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJzY3JvbGxUbyIsIl9qc3hSdW50aW1lIiwianN4IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9yZWFjdE5hdGl2ZTIiLCJfQ2F0ZWdvcnlTZWxlY3RvciIsIl9yZXF1aXJlIiwidXNlRmFrZVRpbWVycyIsInNweU9uIiwiQW5pbWF0ZWQiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJ2YWx1ZSIsImNvbmZpZyIsInN0YXJ0IiwiY2FsbGJhY2siLCJzZXRUaW1lb3V0IiwiZmluaXNoZWQiLCJkdXJhdGlvbiIsInN0b3AiLCJkZXNjcmliZSIsIm1vY2tDYXRlZ29yaWVzIiwiaWQiLCJuYW1lIiwiZGVmYXVsdFByb3BzIiwiY2F0ZWdvcmllcyIsInNlbGVjdGVkQ2F0ZWdvcnkiLCJvblNlbGVjdENhdGVnb3J5IiwicmVuZGVyQ2F0ZWdvcnlTZWxlY3RvciIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsInJlbmRlciIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwiYWZ0ZXJFYWNoIiwidXNlUmVhbFRpbWVycyIsIml0IiwiZXhwZWN0IiwidG9CZVRydXRoeSIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdCIsImdldEJ5VGV4dCIsImZvckVhY2giLCJjYXRlZ29yeSIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDIiLCJnZXRBbGxCeVJvbGUiLCJjYXRlZ29yeU5hbWVzIiwibWFwIiwiZWxlbWVudCIsImFjY2Vzc2liaWxpdHlMYWJlbCIsInRvRXF1YWwiLCJjYXQiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3QzIiwicXVlcnlCeVRleHQiLCJ0b0JlTnVsbCIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDQiLCJnZXRCeVJvbGUiLCJzZWxlY3RlZFBpbGwiLCJ0b0hhdmVBY2Nlc3NpYmlsaXR5U3RhdGUiLCJzZWxlY3RlZCIsIm1vY2tPblNlbGVjdCIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDUiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0NiIsIm5vdCIsInRvSGF2ZUJlZW5DYWxsZWQiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3Q3IiwiY2F0ZWdvcmllc1RvVGVzdCIsImZpbHRlciIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDgiLCJjYXRlZ29yeVBpbGwiLCJhY3QiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3Q5IiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0MCIsImFkdmFuY2VUaW1lcnNCeVRpbWUiLCJydW5BbGxUaW1lcnMiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3QxIiwid2FpdEZvciIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDEwIiwicmVyZW5kZXIiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3QxMSIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDEyIiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0MTMiLCJfcmVuZGVyQ2F0ZWdvcnlTZWxlY3QxNCIsInRvVGhyb3ciLCJzcGVjaWFsQ2F0ZWdvcmllcyIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDE1IiwibG9uZ05hbWVDYXRlZ29yaWVzIiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0MTYiLCJyZW5kZXJTcHkiLCJUZXN0V3JhcHBlciIsInN0YWJsZVByb3BzIiwiX3JlbmRlciIsIm1vY2tDbGVhciIsIm1hbnlDYXRlZ29yaWVzIiwiQXJyYXkiLCJmcm9tIiwiXyIsImkiLCJzdGFydFRpbWUiLCJEYXRlIiwibm93IiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0MTciLCJxdWVyeUFsbEJ5VGV4dCIsImVuZFRpbWUiLCJ0b0JlTGVzc1RoYW4iLCJjYXRlZ29yeUVsZW1lbnRzIiwidG9IYXZlTGVuZ3RoIiwiX3JlbmRlckNhdGVnb3J5U2VsZWN0MTgiLCJnZXRCeUxhYmVsVGV4dCIsIl9yZW5kZXJDYXRlZ29yeVNlbGVjdDE5IiwiYnV0dG9ucyJdLCJzb3VyY2VzIjpbIkNhdGVnb3J5U2VsZWN0b3IudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBfX3Rlc3RzX18vQ2F0ZWdvcnlTZWxlY3Rvci50ZXN0LmpzXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQsIGFjdCwgd2FpdEZvciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IEFuaW1hdGVkLCBTY3JvbGxWaWV3IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LW5hdGl2ZSc7XG5pbXBvcnQgQ2F0ZWdvcnlTZWxlY3RvciBmcm9tICcuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9leGVyY2lzZS1jb21tb24vQ2F0ZWdvcnlTZWxlY3Rvcic7XG5cbi8vIC0tLSBEw6lmaW5pdGlvbiBkZXMgTW9ja3MgcG91ciByw6lzb3VkcmUgbGVzIHByb2Jsw6htZXMgZGUgcmVuZHUvYW5pbWF0aW9uIC0tLVxuXG4vLyBBY3RpdmV6IGxlcyBmYXV4IHRpbWVycyBwb3VyIGNvbnRyw7RsZXIgbGUgdGVtcHMgZGFucyBsZXMgdGVzdHMgZCdhbmltYXRpb25cbmplc3QudXNlRmFrZVRpbWVycygpO1xuXG4vLyBNb2NrZXIgQW5pbWF0ZWQudGltaW5nIHBvdXIgc2ltdWxlciB1biBkw6lsYWlcbmplc3Quc3B5T24oQW5pbWF0ZWQsICd0aW1pbmcnKS5tb2NrSW1wbGVtZW50YXRpb24oKHZhbHVlLCBjb25maWcpID0+IHtcbsKgIHJldHVybiB7XG7CoCDCoCBzdGFydDogKGNhbGxiYWNrKSA9PiB7XG7CoCDCoCDCoCBzZXRUaW1lb3V0KCgpID0+IHtcbsKgIMKgIMKgIMKgIGlmIChjYWxsYmFjaykge1xuwqAgwqAgwqAgwqAgwqAgY2FsbGJhY2soeyBmaW5pc2hlZDogdHJ1ZSB9KTtcbsKgIMKgIMKgIMKgIH1cbsKgIMKgIMKgIH0sIGNvbmZpZy5kdXJhdGlvbiB8fCAzMDApO1xuwqAgwqAgfSxcbsKgIMKgIHN0b3A6IGplc3QuZm4oKSxcbsKgIH07XG59KTtcblxuLy8gTW9ja2VyIFNjcm9sbFZpZXcgcG91ciBnw6lyZXIgbGEgcmVmIGV0IGxhIGZvbmN0aW9uIHNjcm9sbFRvXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvQ29tcG9uZW50cy9TY3JvbGxWaWV3L1Njcm9sbFZpZXcnLCAoKSA9PiB7XG7CoCBjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG7CoCBjb25zdCBTY3JvbGxWaWV3ID0gamVzdC5yZXF1aXJlQWN0dWFsKCdyZWFjdC1uYXRpdmUvTGlicmFyaWVzL0NvbXBvbmVudHMvU2Nyb2xsVmlldy9TY3JvbGxWaWV3Jyk7XG7CoCBjb25zdCBzY3JvbGxUb1NweSA9IGplc3QuZm4oKTtcbsKgIHJldHVybiB7XG7CoCDCoCAuLi5TY3JvbGxWaWV3LFxuwqAgwqAgZGVmYXVsdDogUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4ge1xuwqAgwqAgwqAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShyZWYsICgpID0+ICh7XG7CoCDCoCDCoCDCoCBzY3JvbGxUbzogc2Nyb2xsVG9TcHksXG7CoCDCoCDCoCB9KSk7XG7CoCDCoCDCoCByZXR1cm4gPFNjcm9sbFZpZXcgey4uLnByb3BzfSAvPjtcbsKgIMKgIH0pLFxuwqAgwqAgc2Nyb2xsVG9TcHksIC8vIFBvdXIgcG91dm9pciBlc3Bpb25uZXIgbGEgZm9uY3Rpb24gZGFucyBsZXMgdGVzdHNcbsKgIH07XG59KTtcblxuZGVzY3JpYmUoJ0NhdGVnb3J5U2VsZWN0b3IgQ29tcG9uZW50JywgKCkgPT4ge1xuwqAgY29uc3QgbW9ja0NhdGVnb3JpZXMgPSBbXG7CoCDCoCB7IGlkOiAnMScsIG5hbWU6ICdGcnVpdHMnIH0sXG7CoCDCoCB7IGlkOiAnMicsIG5hbWU6ICdWZWdldGFibGVzJyB9LFxuwqAgwqAgeyBpZDogJzMnLCBuYW1lOiAnRGFpcnkgUHJvZHVjdHMnIH0sXG7CoCDCoCB7IGlkOiAnNCcsIG5hbWU6ICdNZWF0ICYgRmlzaCcgfSxcbsKgIMKgIHsgaWQ6ICc1JywgbmFtZTogJ0JldmVyYWdlcycgfSxcbsKgIF07XG5cbsKgIGNvbnN0IGRlZmF1bHRQcm9wcyA9IHtcbsKgIMKgIGNhdGVnb3JpZXM6IG1vY2tDYXRlZ29yaWVzLFxuwqAgwqAgc2VsZWN0ZWRDYXRlZ29yeTogJzEnLFxuwqAgwqAgb25TZWxlY3RDYXRlZ29yeTogamVzdC5mbigpLFxuwqAgfTtcblxuwqAgY29uc3QgcmVuZGVyQ2F0ZWdvcnlTZWxlY3RvciA9IChwcm9wcyA9IHt9KSA9PiB7XG7CoCDCoCByZXR1cm4gcmVuZGVyKDxDYXRlZ29yeVNlbGVjdG9yIHsuLi5kZWZhdWx0UHJvcHN9IHsuLi5wcm9wc30gLz4pO1xuwqAgfTtcblxuwqAgYmVmb3JlRWFjaCgoKSA9PiB7XG7CoCDCoCBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbsKgIMKgIGplc3QudXNlRmFrZVRpbWVycygpO1xuwqAgfSk7XG5cbsKgIGFmdGVyRWFjaCgoKSA9PiB7XG7CoCDCoCBqZXN0LnVzZVJlYWxUaW1lcnMoKTtcbsKgIH0pO1xuXG7CoCAvLyAtLS0gUkVOREVSSU5HIC0tLVxuwqAgZGVzY3JpYmUoJ1JlbmRlcmluZycsICgpID0+IHtcbsKgIMKgIGl0KCdzaG91bGQgcmVuZGVyIHdpdGhvdXQgY3Jhc2hpbmcnLCAoKSA9PiB7XG7CoCDCoCDCoCBleHBlY3QocmVuZGVyQ2F0ZWdvcnlTZWxlY3RvcigpKS50b0JlVHJ1dGh5KCk7XG7CoCDCoCB9KTtcbsKgIMKgIGl0KCdzaG91bGQgcmVuZGVyIGFsbCBjYXRlZ29yaWVzIGNvcnJlY3RseScsICgpID0+IHtcbsKgIMKgIMKgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKCk7XG7CoCDCoCDCoCBtb2NrQ2F0ZWdvcmllcy5mb3JFYWNoKGNhdGVnb3J5ID0+IHtcbsKgIMKgIMKgIMKgIGV4cGVjdChnZXRCeVRleHQoY2F0ZWdvcnkubmFtZSkpLnRvQmVUcnV0aHkoKTtcbsKgIMKgIMKgIH0pO1xuwqAgwqAgfSk7XG7CoCDCoCBpdCgnc2hvdWxkIHJlbmRlciBjYXRlZ29yaWVzIGluIHRoZSBjb3JyZWN0IG9yZGVyJywgKCkgPT4ge1xuwqAgwqAgwqAgY29uc3QgeyBnZXRBbGxCeVJvbGUgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoKTtcbsKgIMKgIMKgIGNvbnN0IGNhdGVnb3J5TmFtZXMgPSBnZXRBbGxCeVJvbGUoJ2J1dHRvbicpLm1hcChlbGVtZW50ID0+IGVsZW1lbnQucHJvcHMuYWNjZXNzaWJpbGl0eUxhYmVsKTtcbsKgIMKgIMKgIGV4cGVjdChjYXRlZ29yeU5hbWVzKS50b0VxdWFsKG1vY2tDYXRlZ29yaWVzLm1hcChjYXQgPT4gY2F0Lm5hbWUpKTtcbsKgIMKgIH0pO1xuwqAgwqAgaXQoJ3Nob3VsZCBoYW5kbGUgZW1wdHkgY2F0ZWdvcmllcyBhcnJheSBncmFjZWZ1bGx5JywgKCkgPT4ge1xuwqAgwqAgwqAgY29uc3QgeyBxdWVyeUJ5VGV4dCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7IGNhdGVnb3JpZXM6IFtdIH0pO1xuwqAgwqAgwqAgbW9ja0NhdGVnb3JpZXMuZm9yRWFjaChjYXRlZ29yeSA9PiB7XG7CoCDCoCDCoCDCoCBleHBlY3QocXVlcnlCeVRleHQoY2F0ZWdvcnkubmFtZSkpLnRvQmVOdWxsKCk7XG7CoCDCoCDCoCB9KTtcbsKgIMKgIH0pO1xuwqAgwqAgaXQoJ3Nob3VsZCBoaWdobGlnaHQgdGhlIHNlbGVjdGVkIGNhdGVnb3J5IHZpc3VhbGx5JywgKCkgPT4ge1xuwqAgwqAgwqAgY29uc3QgeyBnZXRCeVJvbGUgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoeyBzZWxlY3RlZENhdGVnb3J5OiAnMicgfSk7XG7CoCDCoCDCoCBjb25zdCBzZWxlY3RlZFBpbGwgPSBnZXRCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogJ1ZlZ2V0YWJsZXMnIH0pO1xuwqAgwqAgwqAgZXhwZWN0KHNlbGVjdGVkUGlsbCkudG9IYXZlQWNjZXNzaWJpbGl0eVN0YXRlKHsgc2VsZWN0ZWQ6IHRydWUgfSk7XG7CoCDCoCB9KTtcbsKgIH0pO1xuXG7CoCAvLyAtLS0gVVNFUiBJTlRFUkFDVElPTlMgLS0tXG7CoCBkZXNjcmliZSgnVXNlciBJbnRlcmFjdGlvbnMnLCAoKSA9PiB7XG7CoCDCoCBpdCgnc2hvdWxkIGNhbGwgb25TZWxlY3RDYXRlZ29yeSB3aGVuIGEgZGlmZmVyZW50IGNhdGVnb3J5IGlzIHByZXNzZWQnLCAoKSA9PiB7XG7CoCDCoCDCoCBjb25zdCBtb2NrT25TZWxlY3QgPSBqZXN0LmZuKCk7XG7CoCDCoCDCoCBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7IFxuwqAgwqAgwqAgwqAgc2VsZWN0ZWRDYXRlZ29yeTogJzEnLCBcbsKgIMKgIMKgIMKgIG9uU2VsZWN0Q2F0ZWdvcnk6IG1vY2tPblNlbGVjdCBcbsKgIMKgIMKgIH0pO1xuwqAgwqAgwqAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgnVmVnZXRhYmxlcycpKTtcbsKgIMKgIMKgIGV4cGVjdChtb2NrT25TZWxlY3QpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbsKgIMKgIMKgIGV4cGVjdChtb2NrT25TZWxlY3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcyJyk7XG7CoCDCoCB9KTtcbsKgIMKgIGl0KCdzaG91bGQgbm90IGNhbGwgb25TZWxlY3RDYXRlZ29yeSB3aGVuIHRoZSBzYW1lIGNhdGVnb3J5IGlzIHByZXNzZWQnLCAoKSA9PiB7XG7CoCDCoCDCoCBjb25zdCBtb2NrT25TZWxlY3QgPSBqZXN0LmZuKCk7XG7CoCDCoCDCoCBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7IFxuwqAgwqAgwqAgwqAgc2VsZWN0ZWRDYXRlZ29yeTogJzEnLCBcbsKgIMKgIMKgIMKgIG9uU2VsZWN0Q2F0ZWdvcnk6IG1vY2tPblNlbGVjdCBcbsKgIMKgIMKgIH0pO1xuwqAgwqAgwqAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgnRnJ1aXRzJykpO1xuwqAgwqAgwqAgZXhwZWN0KG1vY2tPblNlbGVjdCkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbsKgIMKgIH0pO1xuwqAgwqAgaXQoJ3Nob3VsZCBjYWxsIG9uU2VsZWN0Q2F0ZWdvcnkgd2l0aCBjb3JyZWN0IGNhdGVnb3J5IGlkIGZvciBlYWNoIGNhdGVnb3J5JywgKCkgPT4ge1xuwqAgwqAgwqAgY29uc3QgbW9ja09uU2VsZWN0ID0gamVzdC5mbigpO1xuwqAgwqAgwqAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoeyBcbsKgIMKgIMKgIMKgIHNlbGVjdGVkQ2F0ZWdvcnk6ICcxJywgXG7CoCDCoCDCoCDCoCBvblNlbGVjdENhdGVnb3J5OiBtb2NrT25TZWxlY3QgXG7CoCDCoCDCoCB9KTtcbsKgIMKgIMKgIGNvbnN0IGNhdGVnb3JpZXNUb1Rlc3QgPSBtb2NrQ2F0ZWdvcmllcy5maWx0ZXIoY2F0ID0+IGNhdC5pZCAhPT0gJzEnKTtcbsKgIMKgIMKgIGNhdGVnb3JpZXNUb1Rlc3QuZm9yRWFjaChjYXRlZ29yeSA9PiB7XG7CoCDCoCDCoCDCoCBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KGNhdGVnb3J5Lm5hbWUpKTtcbsKgIMKgIMKgIMKgIGV4cGVjdChtb2NrT25TZWxlY3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGNhdGVnb3J5LmlkKTtcbsKgIMKgIMKgIH0pO1xuwqAgwqAgwqAgZXhwZWN0KG1vY2tPblNlbGVjdCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKGNhdGVnb3JpZXNUb1Rlc3QubGVuZ3RoKTtcbsKgIMKgIH0pO1xuwqAgfSk7XG5cbsKgIC8vIC0tLSBBTklNQVRJT05TIC0tLVxuwqAgZGVzY3JpYmUoJ0FuaW1hdGlvbnMnLCAoKSA9PiB7XG7CoCDCoCBpdCgnc2hvdWxkIHRyaWdnZXIgcHJlc3MgYW5pbWF0aW9ucyBjb3JyZWN0bHknLCAoKSA9PiB7XG7CoCDCoCDCoCBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3RvcigpO1xuwqAgwqAgwqAgY29uc3QgY2F0ZWdvcnlQaWxsID0gZ2V0QnlUZXh0KCdWZWdldGFibGVzJyk7XG7CoCDCoCDCoCBhY3QoKCkgPT4ge1xuwqAgwqAgwqAgwqAgZmlyZUV2ZW50KGNhdGVnb3J5UGlsbCwgJ3ByZXNzSW4nKTtcbsKgIMKgIMKgIMKgIGZpcmVFdmVudChjYXRlZ29yeVBpbGwsICdwcmVzc091dCcpO1xuwqAgwqAgwqAgfSk7XG7CoCDCoCDCoCBleHBlY3QoY2F0ZWdvcnlQaWxsKS50b0JlVHJ1dGh5KCk7XG7CoCDCoCB9KTtcbsKgIMKgIGl0KCdzaG91bGQgaGFuZGxlIHJhcGlkIHByZXNzIGludGVyYWN0aW9ucyB3aXRob3V0IGNyYXNoaW5nJywgKCkgPT4ge1xuwqAgwqAgwqAgY29uc3QgbW9ja09uU2VsZWN0ID0gamVzdC5mbigpO1xuwqAgwqAgwqAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoeyBvblNlbGVjdENhdGVnb3J5OiBtb2NrT25TZWxlY3QgfSk7XG7CoCDCoCDCoCBjb25zdCBjYXRlZ29yeVBpbGwgPSBnZXRCeVRleHQoJ1ZlZ2V0YWJsZXMnKTtcbsKgIMKgIMKgIGFjdCgoKSA9PiB7XG7CoCDCoCDCoCDCoCBmaXJlRXZlbnQoY2F0ZWdvcnlQaWxsLCAncHJlc3NJbicpO1xuwqAgwqAgwqAgwqAgZmlyZUV2ZW50KGNhdGVnb3J5UGlsbCwgJ3ByZXNzT3V0Jyk7XG7CoCDCoCDCoCDCoCBmaXJlRXZlbnQucHJlc3MoY2F0ZWdvcnlQaWxsKTtcbsKgIMKgIMKgIMKgIGZpcmVFdmVudChjYXRlZ29yeVBpbGwsICdwcmVzc0luJyk7XG7CoCDCoCDCoCDCoCBmaXJlRXZlbnQoY2F0ZWdvcnlQaWxsLCAncHJlc3NPdXQnKTtcbsKgIMKgIMKgIH0pO1xuwqAgwqAgwqAgZXhwZWN0KG1vY2tPblNlbGVjdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJzInKTtcbsKgIMKgIMKgIGV4cGVjdChjYXRlZ29yeVBpbGwpLnRvQmVUcnV0aHkoKTtcbsKgIMKgIH0pO1xuwqAgwqAgaXQoJ3Nob3VsZCBub3QgdHJpZ2dlciBuZXcgYW5pbWF0aW9uIGlmIG9uZSBpcyBhbHJlYWR5IGluIHByb2dyZXNzJywgKCkgPT4ge1xuwqAgwqAgwqAgY29uc3QgbW9ja09uU2VsZWN0ID0gamVzdC5mbigpO1xuwqAgwqAgwqAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoeyBzZWxlY3RlZENhdGVnb3J5OiAnMScsIG9uU2VsZWN0Q2F0ZWdvcnk6IG1vY2tPblNlbGVjdCB9KTtcbsKgIMKgIMKgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ1ZlZ2V0YWJsZXMnKSk7XG7CoCDCoCDCoCBleHBlY3QobW9ja09uU2VsZWN0KS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG7CoCDCoCDCoCBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoMTAwKTtcbsKgIMKgIMKgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ0RhaXJ5IFByb2R1Y3RzJykpO1xuwqAgwqAgwqAgZXhwZWN0KG1vY2tPblNlbGVjdCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuwqAgwqAgwqAgamVzdC5ydW5BbGxUaW1lcnMoKTtcbsKgIMKgIMKgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ0RhaXJ5IFByb2R1Y3RzJykpO1xuwqAgwqAgwqAgZXhwZWN0KG1vY2tPblNlbGVjdCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDIpO1xuwqAgwqAgfSk7XG7CoCB9KTtcblxuwqAgLy8gLS0tIFNDUk9MTElORyBCRUhBVklPUiAtLS1cbsKgIGRlc2NyaWJlKCdTY3JvbGxpbmcgQmVoYXZpb3InLCAoKSA9PiB7XG7CoCDCoCBpdCgnc2hvdWxkIHNjcm9sbCB0byBzZWxlY3RlZCBjYXRlZ29yeSBvbiBtb3VudCcsIGFzeW5jICgpID0+IHtcbsKgIMKgIMKgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKHsgc2VsZWN0ZWRDYXRlZ29yeTogJzQnIH0pO1xuwqAgwqAgwqAgZXhwZWN0KGdldEJ5VGV4dCgnTWVhdCAmIEZpc2gnKSkudG9CZVRydXRoeSgpO1xuwqAgwqAgwqAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG7CoCDCoCDCoCDCoCBleHBlY3QoU2Nyb2xsVmlldy5zY3JvbGxUb1NweSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuwqAgwqAgwqAgfSk7XG7CoCDCoCB9KTtcbsKgIMKgIGl0KCdzaG91bGQgaGFuZGxlIHNjcm9sbGluZyB3aGVuIHNlbGVjdGVkQ2F0ZWdvcnkgY2hhbmdlcycsIGFzeW5jICgpID0+IHtcbsKgIMKgIMKgIGNvbnN0IHsgcmVyZW5kZXIgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoeyBzZWxlY3RlZENhdGVnb3J5OiAnMScgfSk7XG7CoCDCoCDCoCByZXJlbmRlcihcbsKgIMKgIMKgIMKgIDxDYXRlZ29yeVNlbGVjdG9yIFxuwqAgwqAgwqAgwqAgwqAgey4uLmRlZmF1bHRQcm9wc30gXG7CoCDCoCDCoCDCoCDCoCBzZWxlY3RlZENhdGVnb3J5PVwiNVwiIFxuwqAgwqAgwqAgwqAgLz5cbsKgIMKgIMKgICk7XG7CoCDCoCDCoCBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbsKgIMKgIMKgIMKgIGV4cGVjdChTY3JvbGxWaWV3LnNjcm9sbFRvU3B5KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG7CoCDCoCDCoCB9KTtcbsKgIMKgIH0pO1xuwqAgfSk7XG5cbsKgIC8vIC0tLSBFREdFIENBU0VTIC0tLVxuwqAgZGVzY3JpYmUoJ0VkZ2UgQ2FzZXMnLCAoKSA9PiB7XG7CoCDCoCBpdCgnc2hvdWxkIGhhbmRsZSB1bmRlZmluZWQgc2VsZWN0ZWRDYXRlZ29yeSBncmFjZWZ1bGx5JywgKCkgPT4ge1xuwqAgwqAgwqAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoeyBzZWxlY3RlZENhdGVnb3J5OiB1bmRlZmluZWQgfSk7XG7CoCDCoCDCoCBtb2NrQ2F0ZWdvcmllcy5mb3JFYWNoKGNhdGVnb3J5ID0+IHtcbsKgIMKgIMKgIMKgIGV4cGVjdChnZXRCeVRleHQoY2F0ZWdvcnkubmFtZSkpLnRvQmVUcnV0aHkoKTtcbsKgIMKgIMKgIH0pO1xuwqAgwqAgfSk7XG7CoCDCoCBpdCgnc2hvdWxkIGhhbmRsZSBudWxsIHNlbGVjdGVkQ2F0ZWdvcnkgZ3JhY2VmdWxseScsICgpID0+IHtcbsKgIMKgIMKgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKHsgc2VsZWN0ZWRDYXRlZ29yeTogbnVsbCB9KTtcbsKgIMKgIMKgIG1vY2tDYXRlZ29yaWVzLmZvckVhY2goY2F0ZWdvcnkgPT4ge1xuwqAgwqAgwqAgwqAgZXhwZWN0KGdldEJ5VGV4dChjYXRlZ29yeS5uYW1lKSkudG9CZVRydXRoeSgpO1xuwqAgwqAgwqAgfSk7XG7CoCDCoCB9KTtcbsKgIMKgIGl0KCdzaG91bGQgaGFuZGxlIG5vbi1leGlzdGVudCBzZWxlY3RlZENhdGVnb3J5IGlkJywgKCkgPT4ge1xuwqAgwqAgwqAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoeyBzZWxlY3RlZENhdGVnb3J5OiAnbm9uLWV4aXN0ZW50JyB9KTtcbsKgIMKgIMKgIG1vY2tDYXRlZ29yaWVzLmZvckVhY2goY2F0ZWdvcnkgPT4ge1xuwqAgwqAgwqAgwqAgZXhwZWN0KGdldEJ5VGV4dChjYXRlZ29yeS5uYW1lKSkudG9CZVRydXRoeSgpO1xuwqAgwqAgwqAgfSk7XG7CoCDCoCB9KTtcbsKgIMKgIGl0KCdzaG91bGQgaGFuZGxlIG1pc3Npbmcgb25TZWxlY3RDYXRlZ29yeSBwcm9wIGdyYWNlZnVsbHknLCAoKSA9PiB7XG7CoCDCoCDCoCBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7IG9uU2VsZWN0Q2F0ZWdvcnk6IHVuZGVmaW5lZCB9KTtcbsKgIMKgIMKgIGV4cGVjdCgoKSA9PiB7XG7CoCDCoCDCoCDCoCBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCdWZWdldGFibGVzJykpO1xuwqAgwqAgwqAgfSkubm90LnRvVGhyb3coKTtcbsKgIMKgIH0pO1xuwqAgwqAgaXQoJ3Nob3VsZCBoYW5kbGUgY2F0ZWdvcmllcyB3aXRoIHNwZWNpYWwgY2hhcmFjdGVycyBpbiBuYW1lcycsICgpID0+IHtcbsKgIMKgIMKgIGNvbnN0IHNwZWNpYWxDYXRlZ29yaWVzID0gW1xuwqAgwqAgwqAgwqAgeyBpZDogJzEnLCBuYW1lOiAnQ2Fmw6kgJiBUaMOpJyB9LFxuwqAgwqAgwqAgwqAgeyBpZDogJzInLCBuYW1lOiAnRnJ1aXRzICYgTMOpZ3VtZXMnIH0sXG7CoCDCoCDCoCDCoCB7IGlkOiAnMycsIG5hbWU6ICdWaWFuZGUvUG9pc3NvbicgfSxcbsKgIMKgIMKgIF07XG7CoCDCoCDCoCBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyQ2F0ZWdvcnlTZWxlY3Rvcih7IGNhdGVnb3JpZXM6IHNwZWNpYWxDYXRlZ29yaWVzIH0pO1xuwqAgwqAgwqAgc3BlY2lhbENhdGVnb3JpZXMuZm9yRWFjaChjYXRlZ29yeSA9PiB7XG7CoCDCoCDCoCDCoCBleHBlY3QoZ2V0QnlUZXh0KGNhdGVnb3J5Lm5hbWUpKS50b0JlVHJ1dGh5KCk7XG7CoCDCoCDCoCB9KTtcbsKgIMKgIH0pO1xuwqAgwqAgaXQoJ3Nob3VsZCBoYW5kbGUgdmVyeSBsb25nIGNhdGVnb3J5IG5hbWVzJywgKCkgPT4ge1xuwqAgwqAgwqAgY29uc3QgbG9uZ05hbWVDYXRlZ29yaWVzID0gW1xuwqAgwqAgwqAgwqAgeyBpZDogJzEnLCBuYW1lOiAnVGhpcyBpcyBhIHZlcnkgbG9uZyBjYXRlZ29yeSBuYW1lIHRoYXQgbWlnaHQgY2F1c2UgbGF5b3V0IGlzc3VlcycgfSxcbsKgIMKgIMKgIMKgIHsgaWQ6ICcyJywgbmFtZTogJ1Nob3J0JyB9LFxuwqAgwqAgwqAgXTtcbsKgIMKgIMKgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXJDYXRlZ29yeVNlbGVjdG9yKHsgY2F0ZWdvcmllczogbG9uZ05hbWVDYXRlZ29yaWVzIH0pO1xuwqAgwqAgwqAgbG9uZ05hbWVDYXRlZ29yaWVzLmZvckVhY2goY2F0ZWdvcnkgPT4ge1xuwqAgwqAgwqAgwqAgZXhwZWN0KGdldEJ5VGV4dChjYXRlZ29yeS5uYW1lKSkudG9CZVRydXRoeSgpO1xuwqAgwqAgwqAgfSk7XG7CoCDCoCB9KTtcbsKgIH0pO1xuXG7CoCAvLyAtLS0gUEVSRk9STUFOQ0UgLS0tXG7CoCBkZXNjcmliZSgnUGVyZm9ybWFuY2UnLCAoKSA9PiB7XG7CoCDCoCBpdCgnc2hvdWxkIG5vdCByZS1yZW5kZXIgdW5uZWNlc3NhcmlseSB3aGVuIHByb3BzIGRvIG5vdCBjaGFuZ2UnLCAoKSA9PiB7XG7CoCDCoCDCoCBjb25zdCByZW5kZXJTcHkgPSBqZXN0LmZuKCk7XG7CoCDCoCDCoCBjb25zdCBUZXN0V3JhcHBlciA9IChwcm9wcykgPT4ge1xuwqAgwqAgwqAgwqAgcmVuZGVyU3B5KCk7XG7CoCDCoCDCoCDCoCByZXR1cm4gPENhdGVnb3J5U2VsZWN0b3Igey4uLnByb3BzfSAvPjtcbsKgIMKgIMKgIH07XG7CoCDCoCDCoCBjb25zdCBzdGFibGVQcm9wcyA9IHsgLi4uZGVmYXVsdFByb3BzIH07XG7CoCDCoCDCoCBjb25zdCB7IHJlcmVuZGVyIH0gPSByZW5kZXIoPFRlc3RXcmFwcGVyIHsuLi5zdGFibGVQcm9wc30gLz4pO1xuwqAgwqAgwqAgcmVuZGVyU3B5Lm1vY2tDbGVhcigpO1xuwqAgwqAgwqAgcmVyZW5kZXIoPFRlc3RXcmFwcGVyIHsuLi5zdGFibGVQcm9wc30gLz4pO1xuwqAgwqAgwqAgZXhwZWN0KHJlbmRlclNweSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDApO1xuwqAgwqAgfSk7XG7CoCDCoCBpdCgnc2hvdWxkIGhhbmRsZSBsYXJnZSBudW1iZXIgb2YgY2F0ZWdvcmllcyBlZmZpY2llbnRseScsICgpID0+IHtcbsKgIMKgIMKgIGNvbnN0IG1hbnlDYXRlZ29yaWVzID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogMTAwIH0sIChfLCBpKSA9PiAoe1xuwqAgwqAgwqAgwqAgaWQ6IGAke2kgKyAxfWAsXG7CoCDCoCDCoCDCoCBuYW1lOiBgQ2F0ZWdvcnkgJHtpICsgMX1gLFxuwqAgwqAgwqAgfSkpO1xuwqAgwqAgwqAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbsKgIMKgIMKgIGNvbnN0IHsgcXVlcnlBbGxCeVRleHQgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoeyBjYXRlZ29yaWVzOiBtYW55Q2F0ZWdvcmllcyB9KTtcbsKgIMKgIMKgIGNvbnN0IGVuZFRpbWUgPSBEYXRlLm5vdygpO1xuwqAgwqAgwqAgZXhwZWN0KGVuZFRpbWUgLSBzdGFydFRpbWUpLnRvQmVMZXNzVGhhbigxMDAwKTtcbsKgIMKgIMKgIGNvbnN0IGNhdGVnb3J5RWxlbWVudHMgPSBxdWVyeUFsbEJ5VGV4dCgvXkNhdGVnb3J5Lyk7XG7CoCDCoCDCoCBleHBlY3QoY2F0ZWdvcnlFbGVtZW50cykudG9IYXZlTGVuZ3RoKDEwMCk7XG7CoCDCoCB9KTtcbsKgIH0pO1xuXG7CoCAvLyAtLS0gQUNDRVNTSUJJTElUWSAtLS1cbsKgIGRlc2NyaWJlKCdBY2Nlc3NpYmlsaXR5JywgKCkgPT4ge1xuwqAgwqAgaXQoJ3Nob3VsZCBoYXZlIHByb3BlciBhY2Nlc3NpYmlsaXR5IGxhYmVscycsICgpID0+IHtcbsKgIMKgIMKgIGNvbnN0IHsgZ2V0QnlMYWJlbFRleHQgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoKTtcbsKgIMKgIMKgIG1vY2tDYXRlZ29yaWVzLmZvckVhY2goY2F0ZWdvcnkgPT4ge1xuwqAgwqAgwqAgwqAgY29uc3QgZWxlbWVudCA9IGdldEJ5TGFiZWxUZXh0KGNhdGVnb3J5Lm5hbWUpO1xuwqAgwqAgwqAgwqAgZXhwZWN0KGVsZW1lbnQpLnRvQmVUcnV0aHkoKTtcbsKgIMKgIMKgIH0pO1xuwqAgwqAgfSk7XG7CoCDCoCBpdCgnc2hvdWxkIHN1cHBvcnQgc2NyZWVuIHJlYWRlciBuYXZpZ2F0aW9uJywgKCkgPT4ge1xuwqAgwqAgwqAgY29uc3QgeyBnZXRBbGxCeVJvbGUgfSA9IHJlbmRlckNhdGVnb3J5U2VsZWN0b3IoKTtcbsKgIMKgIMKgIGNvbnN0IGJ1dHRvbnMgPSBnZXRBbGxCeVJvbGUoJ2J1dHRvbicpO1xuwqAgwqAgwqAgZXhwZWN0KGJ1dHRvbnMpLnRvSGF2ZUxlbmd0aChtb2NrQ2F0ZWdvcmllcy5sZW5ndGgpO1xuwqAgwqAgfSk7XG7CoCB9KTtcbn0pOyJdLCJtYXBwaW5ncyI6IkFBMkJBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyx5REFBeUQsRUFBRSxZQUFNO0VBQ3pFLElBQU1DLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztFQUM5QixJQUFNQyxVQUFVLEdBQUdDLElBQUksQ0FBQ0MsYUFBYSxDQUFDLHlEQUF5RCxDQUFDO0VBQ2hHLElBQU1DLFdBQVcsR0FBR0YsSUFBSSxDQUFDRyxFQUFFLENBQUMsQ0FBQztFQUM3QixPQUFBQyxNQUFBLENBQUFDLE1BQUEsS0FDS04sVUFBVTtJQUNiTyxPQUFPLEVBQUVULEtBQUssQ0FBQ1UsVUFBVSxDQUFDLFVBQUNDLEtBQUssRUFBRUMsR0FBRyxFQUFLO01BQ3hDWixLQUFLLENBQUNhLG1CQUFtQixDQUFDRCxHQUFHLEVBQUU7UUFBQSxPQUFPO1VBQ3BDRSxRQUFRLEVBQUVUO1FBQ1osQ0FBQztNQUFBLENBQUMsQ0FBQztNQUNILE9BQU8sSUFBQVUsV0FBQSxDQUFBQyxHQUFBLEVBQUNkLFVBQVUsRUFBQUssTUFBQSxDQUFBQyxNQUFBLEtBQUtHLEtBQUssQ0FBRyxDQUFDO0lBQ2xDLENBQUMsQ0FBQztJQUNGTixXQUFXLEVBQVhBO0VB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