{"version":3,"names":["calculateTotalScenarios","exports","conversationData","length","calculateTotalSteps","reduce","total","scenario","_scenario$steps","steps","calculateCompletedScenariosCount","completedScenarios","Object","values","filter","Boolean","calculateTotalProgress","totalScenarios","completedCount","Math","round","calculateScenarioProgress","conversationHistory","map","index","_scenario$steps2","_conversationHistory$","totalSteps","isCompleted","completedSteps","conversation","botMessages","msg","sender","min","progress","title","calculateScenarioStats","scenarioIndex","_scenario$steps3","_conversationHistory$2","currentStep","messageCount","hasStarted"],"sources":["conversationStats.js"],"sourcesContent":["// utils/conversation/conversationStats.js - Fonctions utilitaires (pattern identique aux autres exercices)\n\n/**\n * ðŸ“Š Utilitaires de calcul pour Conversation\n * Pattern identique Ã  utils/vocabulary/vocabularyStats.js, utils/grammar/grammarStats.js, etc.\n * Garde la logique mÃ©tier sÃ©parÃ©e des composants\n */\n\n/**\n * Calculer le nombre total de scÃ©narios\n * @param {Array} conversationData - DonnÃ©es de conversation [{ steps: [...] }]\n * @returns {number} Nombre total de scÃ©narios\n */\nexport const calculateTotalScenarios = (conversationData) => {\n  return conversationData.length;\n};\n\n/**\n * Calculer le nombre total d'Ã©tapes\n * @param {Array} conversationData - DonnÃ©es de conversation [{ steps: [...] }]\n * @returns {number} Nombre total d'Ã©tapes\n */\nexport const calculateTotalSteps = (conversationData) => {\n  return conversationData.reduce((total, scenario) => {\n    return total + (scenario.steps?.length || 0);\n  }, 0);\n};\n\n/**\n * Calculer le nombre de scÃ©narios complÃ©tÃ©s\n * @param {Object} completedScenarios - ScÃ©narios complÃ©tÃ©s {0: {...}, 1: {...}}\n * @returns {number} Nombre de scÃ©narios complÃ©tÃ©s\n */\nexport const calculateCompletedScenariosCount = (completedScenarios) => {\n  return Object.values(completedScenarios).filter(Boolean).length;\n};\n\n/**\n * Calculer la progression totale en pourcentage\n * @param {Array} conversationData - DonnÃ©es de conversation\n * @param {Object} completedScenarios - ScÃ©narios complÃ©tÃ©s\n * @returns {number} Pourcentage de progression (0-100)\n */\nexport const calculateTotalProgress = (conversationData, completedScenarios) => {\n  const totalScenarios = calculateTotalScenarios(conversationData);\n  const completedCount = calculateCompletedScenariosCount(completedScenarios);\n  \n  return totalScenarios > 0 ? Math.round((completedCount / totalScenarios) * 100) : 0;\n};\n\n/**\n * Calculer la progression par scÃ©nario\n * @param {Array} conversationData - DonnÃ©es de conversation\n * @param {Object} completedScenarios - ScÃ©narios complÃ©tÃ©s\n * @param {Object} conversationHistory - Historique des conversations\n * @returns {Array} Progression par scÃ©nario\n */\nexport const calculateScenarioProgress = (conversationData, completedScenarios, conversationHistory) => {\n  return conversationData.map((scenario, index) => {\n    const totalSteps = scenario.steps?.length || 0;\n    const isCompleted = Boolean(completedScenarios[index]);\n    \n    let completedSteps = 0;\n    if (isCompleted) {\n      completedSteps = totalSteps;\n    } else if (conversationHistory[index]?.conversation) {\n      // Count bot messages to determine progress\n      const botMessages = conversationHistory[index].conversation.filter(msg => msg.sender === \"bot\");\n      completedSteps = Math.min(botMessages.length, totalSteps);\n    }\n    \n    const progress = totalSteps > 0 ? (completedSteps / totalSteps) * 100 : 0;\n    \n    return {\n      title: scenario.title || `Scenario ${index + 1}`,\n      totalSteps,\n      completedSteps,\n      progress: Math.round(progress),\n      isCompleted,\n    };\n  });\n};\n\n/**\n * Calculer les statistiques d'un scÃ©nario spÃ©cifique\n * @param {Object} scenario - ScÃ©nario spÃ©cifique\n * @param {Object} completedScenarios - ScÃ©narios complÃ©tÃ©s\n * @param {Object} conversationHistory - Historique des conversations\n * @param {number} scenarioIndex - Index du scÃ©nario\n * @returns {Object} Statistiques du scÃ©nario\n */\nexport const calculateScenarioStats = (scenario, completedScenarios, conversationHistory, scenarioIndex) => {\n  const totalSteps = scenario.steps?.length || 0;\n  const isCompleted = Boolean(completedScenarios[scenarioIndex]);\n  \n  let currentStep = 0;\n  let messageCount = 0;\n  \n  if (conversationHistory[scenarioIndex]?.conversation) {\n    const conversation = conversationHistory[scenarioIndex].conversation;\n    messageCount = conversation.length;\n    \n    // Calculate current step based on bot messages\n    const botMessages = conversation.filter(msg => msg.sender === \"bot\");\n    currentStep = Math.min(botMessages.length, totalSteps);\n  }\n  \n  const progress = totalSteps > 0 ? (currentStep / totalSteps) * 100 : 0;\n  \n  return {\n    totalSteps,\n    currentStep,\n    progress: Math.round(progress),\n    messageCount,\n    isCompleted,\n    hasStarted: messageCount > 0,\n  };\n};"],"mappings":"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","ignoreList":[]}