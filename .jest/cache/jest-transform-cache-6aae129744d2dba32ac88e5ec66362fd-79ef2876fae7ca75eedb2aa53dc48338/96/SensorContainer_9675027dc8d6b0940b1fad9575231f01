9de9b46d3229c4cbd8f795e8d9754db0
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SensorContainer = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _Sensor = _interopRequireDefault(require("./Sensor"));
var SensorContainer = exports.SensorContainer = function () {
  function SensorContainer() {
    (0, _classCallCheck2.default)(this, SensorContainer);
    this.nativeSensors = new Map();
  }
  return (0, _createClass2.default)(SensorContainer, [{
    key: "getSensorId",
    value: function getSensorId(sensorType, config) {
      return sensorType * 100 + config.iosReferenceFrame * 10 + Number(config.adjustToInterfaceOrientation);
    }
  }, {
    key: "initializeSensor",
    value: function initializeSensor(sensorType, config) {
      var sensorId = this.getSensorId(sensorType, config);
      if (!this.nativeSensors.has(sensorId)) {
        var newSensor = new _Sensor.default(sensorType, config);
        this.nativeSensors.set(sensorId, newSensor);
      }
      var sensor = this.nativeSensors.get(sensorId);
      return sensor.getSharedValue();
    }
  }, {
    key: "registerSensor",
    value: function registerSensor(sensorType, config, handler) {
      var sensorId = this.getSensorId(sensorType, config);
      if (!this.nativeSensors.has(sensorId)) {
        return -1;
      }
      var sensor = this.nativeSensors.get(sensorId);
      if (sensor && sensor.isAvailable() && (sensor.isRunning() || sensor.register(handler))) {
        sensor.listenersNumber++;
        return sensorId;
      }
      return -1;
    }
  }, {
    key: "unregisterSensor",
    value: function unregisterSensor(sensorId) {
      if (this.nativeSensors.has(sensorId)) {
        var sensor = this.nativeSensors.get(sensorId);
        if (sensor && sensor.isRunning()) {
          sensor.listenersNumber--;
          if (sensor.listenersNumber === 0) {
            sensor.unregister();
          }
        }
      }
    }
  }]);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiU2Vuc29yQ29udGFpbmVyIiwiX2NsYXNzQ2FsbENoZWNrMiIsIl9jcmVhdGVDbGFzczIiLCJfU2Vuc29yIiwiZGVmYXVsdCIsIm5hdGl2ZVNlbnNvcnMiLCJNYXAiLCJrZXkiLCJnZXRTZW5zb3JJZCIsInNlbnNvclR5cGUiLCJjb25maWciLCJpb3NSZWZlcmVuY2VGcmFtZSIsIk51bWJlciIsImFkanVzdFRvSW50ZXJmYWNlT3JpZW50YXRpb24iLCJpbml0aWFsaXplU2Vuc29yIiwic2Vuc29ySWQiLCJoYXMiLCJuZXdTZW5zb3IiLCJTZW5zb3IiLCJzZXQiLCJzZW5zb3IiLCJnZXQiLCJnZXRTaGFyZWRWYWx1ZSIsInJlZ2lzdGVyU2Vuc29yIiwiaGFuZGxlciIsImlzQXZhaWxhYmxlIiwiaXNSdW5uaW5nIiwicmVnaXN0ZXIiLCJsaXN0ZW5lcnNOdW1iZXIiLCJ1bnJlZ2lzdGVyU2Vuc29yIiwidW5yZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNlbnNvckNvbnRhaW5lci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5pbXBvcnQgdHlwZSB7XG4gIFNlbnNvclR5cGUsXG4gIFNlbnNvckNvbmZpZyxcbiAgVmFsdWUzRCxcbiAgVmFsdWVSb3RhdGlvbixcbiAgU2hhcmVhYmxlUmVmLFxuICBTaGFyZWRWYWx1ZSxcbn0gZnJvbSAnLi9jb21tb25UeXBlcyc7XG5pbXBvcnQgU2Vuc29yIGZyb20gJy4vU2Vuc29yJztcblxuZXhwb3J0IGNsYXNzIFNlbnNvckNvbnRhaW5lciB7XG4gIHByaXZhdGUgbmF0aXZlU2Vuc29yczogTWFwPG51bWJlciwgU2Vuc29yPiA9IG5ldyBNYXAoKTtcblxuICBnZXRTZW5zb3JJZChzZW5zb3JUeXBlOiBTZW5zb3JUeXBlLCBjb25maWc6IFNlbnNvckNvbmZpZykge1xuICAgIHJldHVybiAoXG4gICAgICBzZW5zb3JUeXBlICogMTAwICtcbiAgICAgIGNvbmZpZy5pb3NSZWZlcmVuY2VGcmFtZSAqIDEwICtcbiAgICAgIE51bWJlcihjb25maWcuYWRqdXN0VG9JbnRlcmZhY2VPcmllbnRhdGlvbilcbiAgICApO1xuICB9XG5cbiAgaW5pdGlhbGl6ZVNlbnNvcihcbiAgICBzZW5zb3JUeXBlOiBTZW5zb3JUeXBlLFxuICAgIGNvbmZpZzogU2Vuc29yQ29uZmlnXG4gICk6IFNoYXJlZFZhbHVlPFZhbHVlM0QgfCBWYWx1ZVJvdGF0aW9uPiB7XG4gICAgY29uc3Qgc2Vuc29ySWQgPSB0aGlzLmdldFNlbnNvcklkKHNlbnNvclR5cGUsIGNvbmZpZyk7XG5cbiAgICBpZiAoIXRoaXMubmF0aXZlU2Vuc29ycy5oYXMoc2Vuc29ySWQpKSB7XG4gICAgICBjb25zdCBuZXdTZW5zb3IgPSBuZXcgU2Vuc29yKHNlbnNvclR5cGUsIGNvbmZpZyk7XG4gICAgICB0aGlzLm5hdGl2ZVNlbnNvcnMuc2V0KHNlbnNvcklkLCBuZXdTZW5zb3IpO1xuICAgIH1cblxuICAgIGNvbnN0IHNlbnNvciA9IHRoaXMubmF0aXZlU2Vuc29ycy5nZXQoc2Vuc29ySWQpO1xuICAgIHJldHVybiBzZW5zb3IhLmdldFNoYXJlZFZhbHVlKCk7XG4gIH1cblxuICByZWdpc3RlclNlbnNvcihcbiAgICBzZW5zb3JUeXBlOiBTZW5zb3JUeXBlLFxuICAgIGNvbmZpZzogU2Vuc29yQ29uZmlnLFxuICAgIGhhbmRsZXI6IFNoYXJlYWJsZVJlZjwoZGF0YTogVmFsdWUzRCB8IFZhbHVlUm90YXRpb24pID0+IHZvaWQ+XG4gICk6IG51bWJlciB7XG4gICAgY29uc3Qgc2Vuc29ySWQgPSB0aGlzLmdldFNlbnNvcklkKHNlbnNvclR5cGUsIGNvbmZpZyk7XG5cbiAgICBpZiAoIXRoaXMubmF0aXZlU2Vuc29ycy5oYXMoc2Vuc29ySWQpKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgY29uc3Qgc2Vuc29yID0gdGhpcy5uYXRpdmVTZW5zb3JzLmdldChzZW5zb3JJZCk7XG4gICAgaWYgKFxuICAgICAgc2Vuc29yICYmXG4gICAgICBzZW5zb3IuaXNBdmFpbGFibGUoKSAmJlxuICAgICAgKHNlbnNvci5pc1J1bm5pbmcoKSB8fCBzZW5zb3IucmVnaXN0ZXIoaGFuZGxlcikpXG4gICAgKSB7XG4gICAgICBzZW5zb3IubGlzdGVuZXJzTnVtYmVyKys7XG4gICAgICByZXR1cm4gc2Vuc29ySWQ7XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIHVucmVnaXN0ZXJTZW5zb3Ioc2Vuc29ySWQ6IG51bWJlcikge1xuICAgIGlmICh0aGlzLm5hdGl2ZVNlbnNvcnMuaGFzKHNlbnNvcklkKSkge1xuICAgICAgY29uc3Qgc2Vuc29yID0gdGhpcy5uYXRpdmVTZW5zb3JzLmdldChzZW5zb3JJZCk7XG4gICAgICBpZiAoc2Vuc29yICYmIHNlbnNvci5pc1J1bm5pbmcoKSkge1xuICAgICAgICBzZW5zb3IubGlzdGVuZXJzTnVtYmVyLS07XG4gICAgICAgIGlmIChzZW5zb3IubGlzdGVuZXJzTnVtYmVyID09PSAwKSB7XG4gICAgICAgICAgc2Vuc29yLnVucmVnaXN0ZXIoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUFDLElBQUFBLHNCQUFBLEdBQUFDLE9BQUE7QUFBQUMsTUFBQSxDQUFBQyxjQUFBLENBQUFDLE9BQUE7RUFBQUMsS0FBQTtBQUFBO0FBQUFELE9BQUEsQ0FBQUUsZUFBQTtBQUFBLElBQUFDLGdCQUFBLEdBQUFQLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBTyxhQUFBLEdBQUFSLHNCQUFBLENBQUFDLE9BQUE7QUFTYixJQUFBUSxPQUFBLEdBQUFULHNCQUFBLENBQUFDLE9BQUE7QUFBOEIsSUFFakJLLGVBQWUsR0FBQUYsT0FBQSxDQUFBRSxlQUFBO0VBQUEsU0FBQUEsZ0JBQUE7SUFBQSxJQUFBQyxnQkFBQSxDQUFB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