8ad6795fdb32e4210f8e6714a7115a6f
_getJestObj().mock('../../../../src/screens/exercises/grammar/hooks/useGrammar', function () {
  return {
    __esModule: true,
    default: jest.fn()
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useNavigation: function useNavigation() {
      return {
        goBack: jest.fn()
      };
    }
  });
});
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _grammar = _interopRequireDefault(require("../../../../src/screens/exercises/grammar"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockUseGrammar = require('../../../../src/screens/exercises/grammar/hooks/useGrammar').default;
describe('GrammarExercise', function () {
  var mockRoute = {
    params: {
      level: 'A1'
    }
  };
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('should render loading state initially', function () {
    mockUseGrammar.mockReturnValue({
      loaded: false,
      grammarData: []
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_grammar.default, {
      route: mockRoute
    }));
    expect(_reactNative.screen.getByTestId('activity-indicator')).toBeTruthy();
  });
  it('should render the main components when loaded', (0, _asyncToGenerator2.default)(function* () {
    mockUseGrammar.mockReturnValue({
      loaded: true,
      grammarData: [{
        title: 'Le verbe \'être\' (to be)',
        exercises: [{
          type: 'multiple-choice',
          question: 'I ___ a student.'
        }]
      }],
      ruleIndex: 0,
      exerciseIndex: 0,
      currentRule: {
        title: 'Le verbe \'être\' (to be)',
        content: 'Content 1'
      },
      currentExercise: {
        type: 'multiple-choice',
        question: 'I ___ a student.',
        options: ['am', 'is', 'are'],
        answer: 'am'
      },
      completedExercises: {},
      showDetailedProgress: false,
      canCheckAnswer: true,
      isFirstExercise: true,
      isLastExercise: false,
      showFeedback: false,
      attempts: 0
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_grammar.default, {
      route: mockRoute
    }));
    expect(_reactNative.screen.getAllByText('Le verbe \'être\' (to be)').length).toBeGreaterThan(0);
    var question = yield _reactNative.screen.findByText('I ___ a student.');
    expect(question).toBeTruthy();
  }));
  it('should call changeRule when a rule is selected', function () {
    var changeRule = jest.fn();
    mockUseGrammar.mockReturnValue({
      loaded: true,
      grammarData: [{
        title: 'Le verbe \'être\' (to be)'
      }, {
        title: 'Le présent simple'
      }],
      ruleIndex: 0,
      completedExercises: {},
      changeRule: changeRule
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_grammar.default, {
      route: mockRoute
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Le présent simple'));
    expect(changeRule).toHaveBeenCalledWith(1);
  });
  it('should call submitAnswer when check answer button is pressed', (0, _asyncToGenerator2.default)(function* () {
    var submitAnswer = jest.fn();
    mockUseGrammar.mockReturnValue({
      loaded: true,
      grammarData: [{
        title: 'Le verbe \'être\' (to be)'
      }],
      currentExercise: {
        type: 'multiple-choice',
        question: 'I ___ a student.',
        options: ['am', 'is', 'are'],
        answer: 'am'
      },
      canCheckAnswer: true,
      completedExercises: {},
      submitAnswer: submitAnswer
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_grammar.default, {
      route: mockRoute
    }));
    var checkButton = yield _reactNative.screen.findByText('Check Answer');
    _reactNative.fireEvent.press(checkButton);
    expect(submitAnswer).toHaveBeenCalled();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,