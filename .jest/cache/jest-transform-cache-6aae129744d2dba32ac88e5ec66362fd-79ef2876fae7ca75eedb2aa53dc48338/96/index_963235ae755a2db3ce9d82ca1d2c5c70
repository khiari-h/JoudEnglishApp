d83ef39876e49dc63e753207c44fe128
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _expoLinearGradient = require("expo-linear-gradient");
var _expoRouter = require("expo-router");
var _ThemeContext = require("../../contexts/ThemeContext");
var _useRealTimeProgress2 = _interopRequireDefault(require("../../hooks/useRealTimeProgress"));
var _Button = _interopRequireDefault(require("../../components/ui/Button"));
var _Container = _interopRequireWildcard(require("../../components/layout/Container"));
var _Header = _interopRequireDefault(require("../../components/layout/Header"));
var _constants = require("../../utils/constants");
var _style = _interopRequireWildcard(require("./style"));
var _useExerciseListData2 = _interopRequireDefault(require("./hooks/useExerciseListData"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var DEFAULT_THEME = {
  colors: {
    background: "#F9FAFB",
    primary: "#5E60CE",
    text: "#1F2937",
    textSecondary: "#6B7280",
    surface: "#FFFFFF"
  }
};
var CardHeader = function CardHeader(_ref) {
  var exercise = _ref.exercise,
    colors = _ref.colors,
    localStyles = _ref.localStyles;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: localStyles.cardHeader,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: localStyles.levelTitleContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [localStyles.levelMainTitle, {
          color: colors.text
        }],
        children: exercise.title
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [localStyles.levelBadge, {
          backgroundColor: exercise.color
        }],
        children: (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: localStyles.levelBadgeText,
          children: [exercise.progress, "%"]
        })
      }), exercise.id === "vocabulary_fast" && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [localStyles.levelBadge, localStyles.fastBadge],
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [localStyles.levelBadgeText, localStyles.fastBadgeText],
          children: "FAST"
        })
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: localStyles.levelIcon,
      children: exercise.icon
    })]
  });
};
var Progression = function Progression(_ref2) {
  var exercise = _ref2.exercise,
    colors = _ref2.colors,
    localStyles = _ref2.localStyles;
  return exercise.hasProgress && (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: localStyles.progressContainer,
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: localStyles.progressBar,
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [localStyles.progressFill, {
          width: `${exercise.progress}%`,
          backgroundColor: exercise.color
        }]
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
      style: [localStyles.progressText, {
        color: colors.textSecondary
      }],
      children: [exercise.progress, "%"]
    })]
  });
};
var CardButton = function CardButton(_ref3) {
  var exercise = _ref3.exercise,
    handleExercisePress = _ref3.handleExercisePress,
    localStyles = _ref3.localStyles;
  return (0, _jsxRuntime.jsx)(_Button.default, {
    title: exercise.hasProgress ? "Continuer" : "Commencer",
    variant: "filled",
    color: exercise.color,
    fullWidth: true,
    onPress: handleExercisePress(exercise),
    style: localStyles.startButton,
    rightIcon: exercise.hasProgress ? "play-outline" : "rocket-outline",
    testID: `${exercise.id}-button`
  });
};
var ExerciseCardContent = function ExerciseCardContent(_ref4) {
  var exercise = _ref4.exercise,
    colors = _ref4.colors,
    localStyles = _ref4.localStyles,
    handleExercisePress = _ref4.handleExercisePress;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: localStyles.cardContentStyle,
    children: [(0, _jsxRuntime.jsx)(CardHeader, {
      exercise: exercise,
      colors: colors,
      localStyles: localStyles
    }), (0, _jsxRuntime.jsx)(Progression, {
      exercise: exercise,
      colors: colors,
      localStyles: localStyles
    }), (0, _jsxRuntime.jsx)(CardButton, {
      exercise: exercise,
      handleExercisePress: handleExercisePress,
      localStyles: localStyles
    })]
  });
};
var ExerciseListSection = function ExerciseListSection(_ref5) {
  var colors = _ref5.colors,
    localStyles = _ref5.localStyles,
    exercises = _ref5.exercises,
    renderExerciseCard = _ref5.renderExerciseCard;
  return (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
    testID: "exercises-scroll",
    style: {
      flex: 1
    },
    contentContainerStyle: [localStyles.scrollContent, {
      paddingBottom: 60
    }],
    showsVerticalScrollIndicator: false,
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: localStyles.introSection,
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [localStyles.introText, {
          color: colors.textSecondary
        }],
        children: "Choisissez votre exercice"
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: localStyles.levelsContainer,
      children: exercises.map(renderExerciseCard)
    })]
  });
};
var ExerciseSelection = function ExerciseSelection(_ref6) {
  var level = _ref6.level;
  if (!level) {
    return null;
  }
  var themeContext = (0, _react.useContext)(_ThemeContext.ThemeContext) || DEFAULT_THEME;
  var colors = themeContext.colors;
  var _useRealTimeProgress = (0, _useRealTimeProgress2.default)(),
    getExerciseProgress = _useRealTimeProgress.getExerciseProgress,
    hasProgress = _useRealTimeProgress.hasProgress,
    refresh = _useRealTimeProgress.refresh;
  var _useExerciseListData = (0, _useExerciseListData2.default)({
      level: level,
      getExerciseProgress: getExerciseProgress,
      hasProgress: hasProgress
    }),
    computedLevelInfo = _useExerciseListData.levelInfo,
    exercises = _useExerciseListData.exercises;
  var levelInfo = (0, _react.useMemo)(function () {
    return computedLevelInfo || {
      color: colors.primary,
      title: `Niveau ${level}`,
      icon: level === "bonus" ? "‚≠ê" : "üìö"
    };
  }, [computedLevelInfo, level, colors.primary]);
  var levelColor = levelInfo.color;
  var backgroundGradient = (0, _style.getBackgroundGradient)(levelColor, colors.background);
  var handleExerciseSelect = (0, _react.useCallback)(function (exercise) {
    var params = {
      level: level
    };
    if (exercise.id === 'vocabulary') {
      params.mode = 'classic';
    } else if (exercise.id === 'vocabulary_fast') {
      params.mode = 'fast';
    }
    _expoRouter.router.push({
      pathname: exercise.route,
      params: params
    });
  }, [level]);
  var handleExercisePress = (0, _react.useCallback)(function (exercise) {
    return function () {
      return handleExerciseSelect(exercise);
    };
  }, [handleExerciseSelect]);
  (0, _expoRouter.useFocusEffect)((0, _react.useCallback)(function () {
    refresh();
  }, [refresh]));
  var renderHeader = function renderHeader() {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.headerContainer,
      children: (0, _jsxRuntime.jsxs)(_expoLinearGradient.LinearGradient, {
        colors: [levelColor, `${levelColor}DD`],
        start: {
          x: 0,
          y: 0
        },
        end: {
          x: 1,
          y: 1
        },
        style: _style.default.headerGradient,
        children: [(0, _jsxRuntime.jsx)(_Header.default, {
          title: levelInfo.title,
          showBackButton: true,
          onBackPress: function onBackPress() {
            return _expoRouter.router.push('/tabs/levelSelection');
          },
          backgroundColor: "transparent",
          textColor: "white",
          withStatusBar: false,
          withShadow: false,
          titleContainerStyle: _style.default.headerTitle,
          testID: "exercises-header"
        }), level === "bonus" && (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: {
            alignItems: "center",
            paddingBottom: 12
          },
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: _style.default.bonusText,
            children: "Contenu exclusif d\xE9bloqu\xE9 !"
          })
        })]
      })
    });
  };
  var renderExerciseCard = (0, _react.useCallback)(function (exercise) {
    var _exercise$progress;
    return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      testID: `${exercise.id}-exercise`,
      style: _style.default.levelCard,
      onPress: handleExercisePress(exercise),
      activeOpacity: 0.8,
      accessibilityRole: "button",
      accessibilityLabel: `${exercise.title}`,
      accessibilityValue: {
        min: 0,
        max: 100,
        now: (_exercise$progress = exercise.progress) != null ? _exercise$progress : 0
      },
      children: (0, _jsxRuntime.jsx)(ExerciseCardContent, {
        exercise: exercise,
        colors: colors,
        localStyles: _style.default,
        handleExercisePress: handleExercisePress
      })
    }, exercise.id);
  }, [handleExercisePress, colors.text, _style.default]);
  return (0, _jsxRuntime.jsx)(_Container.default, {
    testID: "exercise-selection-container",
    safeArea: true,
    safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.NO_BOTTOM,
    withScrollView: false,
    backgroundColor: "transparent",
    statusBarColor: levelColor,
    statusBarStyle: "light-content",
    withPadding: false,
    children: (0, _jsxRuntime.jsxs)(_expoLinearGradient.LinearGradient, {
      colors: backgroundGradient.colors,
      locations: backgroundGradient.locations,
      start: {
        x: 0,
        y: 0
      },
      end: {
        x: 0,
        y: 1
      },
      style: {
        flex: 1
      },
      children: [renderHeader(), (0, _jsxRuntime.jsx)(ExerciseListSection, {
        colors: colors,
        localStyles: _style.default,
        exercises: exercises,
        renderExerciseCard: renderExerciseCard
      })]
    })
  });
};
var _default = exports.default = ExerciseSelection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,