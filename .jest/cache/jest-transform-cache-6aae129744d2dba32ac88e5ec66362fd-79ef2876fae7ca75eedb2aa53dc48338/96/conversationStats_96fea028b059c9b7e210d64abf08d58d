0121bd2a46cfa2237b928596f8dc4aa7
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateTotalSteps = exports.calculateTotalScenarios = exports.calculateTotalProgress = exports.calculateScenarioStats = exports.calculateScenarioProgress = exports.calculateCompletedScenariosCount = void 0;
var calculateTotalScenarios = exports.calculateTotalScenarios = function calculateTotalScenarios(conversationData) {
  return conversationData.length;
};
var calculateTotalSteps = exports.calculateTotalSteps = function calculateTotalSteps(conversationData) {
  return conversationData.reduce(function (total, scenario) {
    var _scenario$steps;
    return total + (((_scenario$steps = scenario.steps) == null ? void 0 : _scenario$steps.length) || 0);
  }, 0);
};
var calculateCompletedScenariosCount = exports.calculateCompletedScenariosCount = function calculateCompletedScenariosCount(completedScenarios) {
  return Object.values(completedScenarios).filter(Boolean).length;
};
var calculateTotalProgress = exports.calculateTotalProgress = function calculateTotalProgress(conversationData, completedScenarios) {
  var totalScenarios = calculateTotalScenarios(conversationData);
  var completedCount = calculateCompletedScenariosCount(completedScenarios);
  return totalScenarios > 0 ? Math.round(completedCount / totalScenarios * 100) : 0;
};
var calculateScenarioProgress = exports.calculateScenarioProgress = function calculateScenarioProgress(conversationData, completedScenarios, conversationHistory) {
  return conversationData.map(function (scenario, index) {
    var _scenario$steps2, _conversationHistory$;
    var totalSteps = ((_scenario$steps2 = scenario.steps) == null ? void 0 : _scenario$steps2.length) || 0;
    var isCompleted = Boolean(completedScenarios[index]);
    var completedSteps = 0;
    if (isCompleted) {
      completedSteps = totalSteps;
    } else if ((_conversationHistory$ = conversationHistory[index]) != null && _conversationHistory$.conversation) {
      var botMessages = conversationHistory[index].conversation.filter(function (msg) {
        return msg.sender === "bot";
      });
      completedSteps = Math.min(botMessages.length, totalSteps);
    }
    var progress = totalSteps > 0 ? completedSteps / totalSteps * 100 : 0;
    return {
      title: scenario.title || `Scenario ${index + 1}`,
      totalSteps: totalSteps,
      completedSteps: completedSteps,
      progress: Math.round(progress),
      isCompleted: isCompleted
    };
  });
};
var calculateScenarioStats = exports.calculateScenarioStats = function calculateScenarioStats(scenario, completedScenarios, conversationHistory, scenarioIndex) {
  var _scenario$steps3, _conversationHistory$2;
  var totalSteps = ((_scenario$steps3 = scenario.steps) == null ? void 0 : _scenario$steps3.length) || 0;
  var isCompleted = Boolean(completedScenarios[scenarioIndex]);
  var currentStep = 0;
  var messageCount = 0;
  if ((_conversationHistory$2 = conversationHistory[scenarioIndex]) != null && _conversationHistory$2.conversation) {
    var conversation = conversationHistory[scenarioIndex].conversation;
    messageCount = conversation.length;
    var botMessages = conversation.filter(function (msg) {
      return msg.sender === "bot";
    });
    currentStep = Math.min(botMessages.length, totalSteps);
  }
  var progress = totalSteps > 0 ? currentStep / totalSteps * 100 : 0;
  return {
    totalSteps: totalSteps,
    currentStep: currentStep,
    progress: Math.round(progress),
    messageCount: messageCount,
    isCompleted: isCompleted,
    hasStarted: messageCount > 0
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,