{"version":3,"names":["_SafeAreaView","_interopRequireDefault","require","_StyleSheet","_Platform","_useWindowDimensions2","_RCTInputAccessoryViewNativeComponent","React","_interopRequireWildcard","_jsxRuntime","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","InputAccessoryView","props","_useWindowDimensions","useWindowDimensions","width","Platform","OS","Children","count","children","jsx","style","styles","container","nativeID","backgroundColor","safeAreaView","console","warn","StyleSheet","create","position","flex","_default","exports"],"sources":["InputAccessoryView.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport SafeAreaView from '../../Components/SafeAreaView/SafeAreaView';\nimport StyleSheet, {\n  type ColorValue,\n  type ViewStyleProp,\n} from '../../StyleSheet/StyleSheet';\nimport Platform from '../../Utilities/Platform';\nimport useWindowDimensions from '../../Utilities/useWindowDimensions';\nimport RCTInputAccessoryViewNativeComponent from './RCTInputAccessoryViewNativeComponent';\nimport * as React from 'react';\n\n/**\n * Note: iOS only\n *\n * A component which enables customization of the keyboard input accessory view.\n * The input accessory view is displayed above the keyboard whenever a TextInput\n * has focus. This component can be used to create custom toolbars.\n *\n * To use this component wrap your custom toolbar with the\n * InputAccessoryView component, and set a nativeID. Then, pass that nativeID\n * as the inputAccessoryViewID of whatever TextInput you desire. A simple\n * example:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, TextInput, InputAccessoryView, Button } from 'react-native';\n *\n * export default class UselessTextInput extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {text: 'Placeholder Text'};\n *   }\n *\n *   render() {\n *     const inputAccessoryViewID = \"uniqueID\";\n *     return (\n *       <View>\n *         <ScrollView keyboardDismissMode=\"interactive\">\n *           <TextInput\n *             style={{\n *               padding: 10,\n *               paddingTop: 50,\n *             }}\n *             inputAccessoryViewID=inputAccessoryViewID\n *             onChangeText={text => this.setState({text})}\n *             value={this.state.text}\n *           />\n *         </ScrollView>\n *         <InputAccessoryView nativeID=inputAccessoryViewID>\n *           <Button\n *             onPress={() => this.setState({text: 'Placeholder Text'})}\n *             title=\"Reset Text\"\n *           />\n *         </InputAccessoryView>\n *       </View>\n *     );\n *   }\n * }\n *\n * // skip this line if using Create React Native App\n * AppRegistry.registerComponent('AwesomeProject', () => UselessTextInput);\n * ```\n *\n * This component can also be used to create sticky text inputs (text inputs\n * which are anchored to the top of the keyboard). To do this, wrap a\n * TextInput with the InputAccessoryView component, and don't set a nativeID.\n * For an example, look at InputAccessoryViewExample.js in RNTester.\n */\n\ntype Props = $ReadOnly<{|\n  +children: React.Node,\n  /**\n   * An ID which is used to associate this `InputAccessoryView` to\n   * specified TextInput(s).\n   */\n  nativeID?: ?string,\n  style?: ?ViewStyleProp,\n  backgroundColor?: ?ColorValue,\n|}>;\n\nconst InputAccessoryView: React.AbstractComponent<Props> = (props: Props) => {\n  const {width} = useWindowDimensions();\n\n  if (Platform.OS === 'ios') {\n    if (React.Children.count(props.children) === 0) {\n      return null;\n    }\n\n    return (\n      <RCTInputAccessoryViewNativeComponent\n        style={[props.style, styles.container]}\n        nativeID={props.nativeID}\n        backgroundColor={props.backgroundColor}>\n        <SafeAreaView style={[styles.safeAreaView, {width}]}>\n          {props.children}\n        </SafeAreaView>\n      </RCTInputAccessoryViewNativeComponent>\n    );\n  } else {\n    console.warn('<InputAccessoryView> is only supported on iOS.');\n    return null;\n  }\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n  },\n  safeAreaView: {\n    flex: 1,\n  },\n});\n\nexport default InputAccessoryView;\n"],"mappings":"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","ignoreList":[]}