31dc9157d6fe1b611d6221de5a18b9ae
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
  };
});
_getJestObj().mock('expo-linear-gradient', function () {
  return {
    LinearGradient: function LinearGradient(_ref) {
      var children = _ref.children,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      var _require = require('react-native'),
        View = _require.View;
      return (0, _jsxRuntime.jsx)(View, Object.assign({}, props, {
        children: children
      }));
    }
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: mockRouterPush
    }
  };
});
_getJestObj().mock('../../../src/contexts/ProgressContext', function () {
  return {
    useProgress: mockUseProgress
  };
});
_getJestObj().mock('../../../src/contexts/CurrentLevelContext', function () {
  return {
    useCurrentLevel: mockUseCurrentLevel
  };
});
_getJestObj().mock('../../../src/hooks/useRealTimeProgress', function () {
  return {
    __esModule: true,
    default: mockUseRealTimeProgress
  };
});
_getJestObj().mock('../../../src/hooks/useLastActivity', function () {
  return {
    __esModule: true,
    default: mockUseLastActivity
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/ModernHeader', function () {
  var _require2 = require('react-native'),
    View = _require2.View,
    Text = _require2.Text;
  return function (_ref2) {
    var level = _ref2.level,
      levelColor = _ref2.levelColor;
    return (0, _jsxRuntime.jsxs)(View, {
      testID: "modern-header",
      children: [(0, _jsxRuntime.jsxs)(Text, {
        testID: `header-level-${level}`,
        children: ["Level: ", level]
      }), (0, _jsxRuntime.jsxs)(Text, {
        testID: "header-color",
        children: ["Color: ", levelColor]
      })]
    });
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/HeroContinueSection', function () {
  var _require3 = require('react-native'),
    View = _require3.View,
    Text = _require3.Text,
    TouchableOpacity = _require3.TouchableOpacity;
  return function (_ref3) {
    var lastActivity = _ref3.lastActivity,
      _onPress = _ref3.onPress,
      isLoading = _ref3.isLoading;
    if (isLoading) {
      return (0, _jsxRuntime.jsx)(View, {
        testID: "hero-continue-section",
        children: (0, _jsxRuntime.jsx)(Text, {
          testID: "loading-text",
          children: "Chargement..."
        })
      });
    }
    if (lastActivity) {
      return (0, _jsxRuntime.jsx)(View, {
        testID: "hero-continue-section",
        children: (0, _jsxRuntime.jsx)(TouchableOpacity, {
          onPress: function onPress() {
            return _onPress(lastActivity);
          },
          testID: "continue-activity-button",
          children: (0, _jsxRuntime.jsxs)(Text, {
            testID: "continue-text",
            children: ["Continuer: ", lastActivity.title]
          })
        })
      });
    }
    return (0, _jsxRuntime.jsx)(View, {
      testID: "hero-continue-section",
      children: (0, _jsxRuntime.jsx)(TouchableOpacity, {
        onPress: function onPress() {
          return _onPress('levelSelection');
        },
        testID: "start-learning-button",
        children: (0, _jsxRuntime.jsx)(Text, {
          testID: "start-text",
          children: "Commencer l'apprentissage"
        })
      })
    });
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/QuickActions', function () {
  var _require4 = require('react-native'),
    View = _require4.View,
    Text = _require4.Text;
  return function (_ref4) {
    var currentLevel = _ref4.currentLevel;
    return (0, _jsxRuntime.jsx)(View, {
      testID: "quick-actions",
      children: (0, _jsxRuntime.jsxs)(Text, {
        testID: `quick-actions-level-${currentLevel}`,
        children: ["Actions niveau: ", currentLevel]
      })
    });
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/SimpleMetrics', function () {
  var _require5 = require('react-native'),
    View = _require5.View,
    Text = _require5.Text;
  return function (_ref5) {
    var accentColor = _ref5.accentColor;
    return (0, _jsxRuntime.jsx)(View, {
      testID: "simple-metrics",
      children: (0, _jsxRuntime.jsxs)(Text, {
        testID: "metrics-color",
        children: ["Couleur: ", accentColor]
      })
    });
  };
});
_getJestObj().mock('../../../src/screens/Dashboard/components/LearningProgress', function () {
  var _require6 = require('react-native'),
    View = _require6.View,
    Text = _require6.Text,
    TouchableOpacity = _require6.TouchableOpacity;
  return function (_ref6) {
    var globalProgress = _ref6.globalProgress,
      levels = _ref6.levels,
      currentLevel = _ref6.currentLevel,
      onSelectLevel = _ref6.onSelectLevel,
      onChangeLevelVisual = _ref6.onChangeLevelVisual;
    return (0, _jsxRuntime.jsxs)(View, {
      testID: "learning-progress",
      children: [(0, _jsxRuntime.jsxs)(Text, {
        testID: "global-progress",
        children: ["Progr\xE8s global: ", globalProgress, "%"]
      }), (0, _jsxRuntime.jsxs)(Text, {
        testID: `current-level-${currentLevel}`,
        children: ["Niveau actuel: ", currentLevel]
      }), levels.map(function (level) {
        return (0, _jsxRuntime.jsx)(TouchableOpacity, {
          onPress: function onPress() {
            return onSelectLevel == null ? void 0 : onSelectLevel(level.id);
          },
          testID: `level-button-${level.id}`,
          children: (0, _jsxRuntime.jsxs)(Text, {
            testID: `level-progress-${level.id}`,
            children: ["Niveau ", level.id, ": ", level.progress, "%"]
          })
        }, level.id);
      }), (0, _jsxRuntime.jsx)(TouchableOpacity, {
        onPress: function onPress() {
          return onChangeLevelVisual == null ? void 0 : onChangeLevelVisual('2');
        },
        testID: "change-visual-level-button",
        children: (0, _jsxRuntime.jsx)(Text, {
          children: "Changer niveau visuel vers 2"
        })
      }), (0, _jsxRuntime.jsx)(TouchableOpacity, {
        onPress: function onPress() {
          return onSelectLevel == null ? void 0 : onSelectLevel('2');
        },
        testID: "explore-level-button",
        children: (0, _jsxRuntime.jsxs)(Text, {
          testID: "explore-level-text",
          children: ["Explorer le niveau ", currentLevel]
        })
      })]
    });
  };
});
_getJestObj().mock('../../../src/components/layout/Container', function () {
  var _require7 = require('react-native'),
    ScrollView = _require7.ScrollView;
  function Container(_ref7) {
    var children = _ref7.children,
      safeAreaEdges = _ref7.safeAreaEdges,
      props = (0, _objectWithoutProperties2.default)(_ref7, _excluded2);
    return (0, _jsxRuntime.jsx)(ScrollView, Object.assign({
      testID: "container"
    }, props, {
      contentContainerStyle: {
        padding: 16
      },
      children: children
    }));
  }
  Container.CONTAINER_SAFE_EDGES = {
    NO_BOTTOM: ['top', 'left', 'right']
  };
  return Container;
});
_getJestObj().mock('../../../src/screens/VocabularyRevision/RevisionOrchestrator', function () {
  var _require8 = require('react-native'),
    View = _require8.View,
    Text = _require8.Text;
  return function (_ref8) {
    var currentLevel = _ref8.currentLevel;
    return (0, _jsxRuntime.jsx)(View, {
      testID: "revision-orchestrator",
      children: (0, _jsxRuntime.jsxs)(Text, {
        testID: `revision-level-${currentLevel}`,
        children: ["R\xE9vision niveau: ", currentLevel]
      })
    });
  };
});
_getJestObj().mock('../../../src/utils/constants', function () {
  return {
    LANGUAGE_LEVELS: {
      '1': {
        title: 'DÃ©butant',
        color: '#10B981',
        icon: 'ðŸŒ±'
      },
      '2': {
        title: 'Ã‰lÃ©mentaire',
        color: '#3B82F6',
        icon: 'ðŸ“š'
      },
      '3': {
        title: 'IntermÃ©diaire',
        color: '#8B5CF6',
        icon: 'ðŸŽ¯'
      }
    },
    EXERCISES: {
      vocabulary: {
        id: 'vocabulary',
        route: '/tabs/vocabulary',
        title: 'Vocabulaire'
      },
      grammar: {
        id: 'grammar',
        route: '/tabs/grammar',
        title: 'Grammaire'
      }
    },
    CONTAINER_SAFE_EDGES: {
      NO_BOTTOM: ['top', 'left', 'right']
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _Dashboard = _interopRequireDefault(require("../../../src/screens/Dashboard"));
var _ThemeContext = require("../../../src/contexts/ThemeContext");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children"],
  _excluded2 = ["children", "safeAreaEdges"];
function _getJestObj() {
  var _require9 = require("@jest/globals"),
    jest = _require9.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockRouterPush = jest.fn();
var mockUseProgress = jest.fn();
var mockUseCurrentLevel = jest.fn();
var mockGetLevelProgress = jest.fn();
var mockRefresh = jest.fn();
var mockUseLastActivity = jest.fn();
var mockUseRealTimeProgress = jest.fn();
describe('Dashboard - Tests d\'intÃ©gration', function () {
  var defaultThemeContext = {
    colors: {
      background: '#F8FAFC',
      primary: '#3B82F6',
      surface: '#FFFFFF',
      text: '#1F2937',
      textSecondary: '#6B7280'
    }
  };
  var defaultProgressContext = {
    progress: {
      level1: 50,
      level2: 30,
      level3: 75
    },
    isLoading: false
  };
  var defaultCurrentLevelContext = {
    currentLevel: '1',
    setCurrentLevel: jest.fn()
  };
  var setupMocks = function setupMocks() {
    var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _overrides$progressCo = overrides.progressContext,
      progressContext = _overrides$progressCo === void 0 ? defaultProgressContext : _overrides$progressCo,
      _overrides$currentLev = overrides.currentLevelContext,
      currentLevelContext = _overrides$currentLev === void 0 ? defaultCurrentLevelContext : _overrides$currentLev,
      _overrides$lastActivi = overrides.lastActivity,
      lastActivity = _overrides$lastActivi === void 0 ? null : _overrides$lastActivi,
      _overrides$isActivity = overrides.isActivityLoading,
      isActivityLoading = _overrides$isActivity === void 0 ? false : _overrides$isActivity,
      _overrides$levelProgr = overrides.levelProgressMap,
      levelProgressMap = _overrides$levelProgr === void 0 ? {
        '1': 25,
        '2': 50,
        '3': 75
      } : _overrides$levelProgr,
      _overrides$realTimePr = overrides.realTimeProgressLoading,
      realTimeProgressLoading = _overrides$realTimePr === void 0 ? false : _overrides$realTimePr;
    mockUseProgress.mockReturnValue(progressContext);
    mockUseCurrentLevel.mockReturnValue(currentLevelContext);
    mockUseLastActivity.mockReturnValue({
      lastActivity: lastActivity,
      isLoading: isActivityLoading,
      reload: jest.fn().mockResolvedValue()
    });
    mockUseRealTimeProgress.mockReturnValue({
      getLevelProgress: jest.fn(function (level) {
        return levelProgressMap[level] || 0;
      }),
      refresh: mockRefresh.mockResolvedValue(),
      isLoading: realTimeProgressLoading
    });
    _asyncStorage.default.getItem.mockResolvedValue(null);
    _asyncStorage.default.setItem.mockResolvedValue();
  };
  var renderDashboard = function renderDashboard() {
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
      value: defaultThemeContext,
      children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
    }));
  };
  beforeEach(function () {
    jest.clearAllMocks();
    mockRouterPush.mockClear();
    setupMocks();
  });
  describe('Rendu initial et Ã©tats', function () {
    it('devrait afficher tous les composants principaux', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard = renderDashboard(),
        getByTestId = _renderDashboard.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('modern-header')).toBeTruthy();
        expect(getByTestId('hero-continue-section')).toBeTruthy();
        expect(getByTestId('quick-actions')).toBeTruthy();
        expect(getByTestId('simple-metrics')).toBeTruthy();
        expect(getByTestId('learning-progress')).toBeTruthy();
        expect(getByTestId('revision-orchestrator')).toBeTruthy();
      });
    }));
    it('devrait afficher l\'Ã©tat de chargement du contexte Progress', function () {
      setupMocks({
        progressContext: Object.assign({}, defaultProgressContext, {
          isLoading: true
        })
      });
      var _renderDashboard2 = renderDashboard(),
        getByText = _renderDashboard2.getByText;
      expect(getByText('Chargement du tableau de bord...')).toBeTruthy();
    });
    it('devrait afficher l\'Ã©tat de chargement de la derniÃ¨re activitÃ©', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        isActivityLoading: true
      });
      var _renderDashboard3 = renderDashboard(),
        getByTestId = _renderDashboard3.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('loading-text')).toBeTruthy();
      });
    }));
    it('devrait utiliser le niveau par dÃ©faut 1', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard4 = renderDashboard(),
        getByTestId = _renderDashboard4.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('header-level-1')).toBeTruthy();
        expect(getByTestId('quick-actions-level-1')).toBeTruthy();
        expect(getByTestId('current-level-1')).toBeTruthy();
        expect(getByTestId('revision-level-1')).toBeTruthy();
      });
    }));
  });
  describe('Navigation sans activitÃ© rÃ©cente', function () {
    it('devrait naviguer vers la sÃ©lection de niveau quand aucune activitÃ© rÃ©cente', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        lastActivity: null
      });
      var _renderDashboard5 = renderDashboard(),
        getByTestId = _renderDashboard5.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var startButton = getByTestId('start-learning-button');
        _reactNative.fireEvent.press(startButton);
      });
      expect(mockRouterPush).toHaveBeenCalledWith('/(tabs)/levelSelection');
    }));
    it('devrait afficher le bon texte quand aucune activitÃ©', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        lastActivity: null
      });
      var _renderDashboard6 = renderDashboard(),
        getByTestId = _renderDashboard6.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('start-text')).toBeTruthy();
      });
    }));
  });
  describe('Navigation avec activitÃ© rÃ©cente', function () {
    it('devrait permettre de continuer une activitÃ© de vocabulaire', (0, _asyncToGenerator2.default)(function* () {
      var lastActivity = {
        type: 'vocabulary',
        level: '2',
        title: 'Vocabulaire Famille'
      };
      setupMocks({
        lastActivity: lastActivity
      });
      var _renderDashboard7 = renderDashboard(),
        getByTestId = _renderDashboard7.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var continueButton = getByTestId('continue-activity-button');
        expect(getByTestId('continue-text')).toBeTruthy();
        _reactNative.fireEvent.press(continueButton);
      });
      expect(mockRouterPush).toHaveBeenCalledWith({
        pathname: '/tabs/vocabulary',
        params: {
          level: '2'
        }
      });
    }));
    it('devrait permettre de continuer une activitÃ© de grammaire', (0, _asyncToGenerator2.default)(function* () {
      var lastActivity = {
        type: 'grammar',
        level: '1',
        title: 'Grammaire de base'
      };
      setupMocks({
        lastActivity: lastActivity
      });
      var _renderDashboard8 = renderDashboard(),
        getByTestId = _renderDashboard8.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var continueButton = getByTestId('continue-activity-button');
        _reactNative.fireEvent.press(continueButton);
      });
      expect(mockRouterPush).toHaveBeenCalledWith({
        pathname: '/tabs/grammar',
        params: {
          level: '1'
        }
      });
    }));
    it('devrait naviguer vers levelSelection pour une activitÃ© de type levelSelection', (0, _asyncToGenerator2.default)(function* () {
      var lastActivity = {
        type: 'levelSelection'
      };
      setupMocks({
        lastActivity: lastActivity
      });
      var _renderDashboard9 = renderDashboard(),
        getByTestId = _renderDashboard9.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var continueButton = getByTestId('continue-activity-button');
        _reactNative.fireEvent.press(continueButton);
      });
      expect(mockRouterPush).toHaveBeenCalledWith('/(tabs)/levelSelection');
    }));
  });
  describe('Changement de niveau', function () {
    it('devrait permettre de sÃ©lectionner un niveau et naviguer', (0, _asyncToGenerator2.default)(function* () {
      var mockSetCurrentLevel = jest.fn();
      setupMocks({
        currentLevelContext: {
          currentLevel: '1',
          setCurrentLevel: mockSetCurrentLevel
        }
      });
      var _renderDashboard0 = renderDashboard(),
        getByTestId = _renderDashboard0.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var level2Button = getByTestId('level-button-2');
        _reactNative.fireEvent.press(level2Button);
      });
      expect(mockRouterPush).toHaveBeenCalledWith('/tabs/exerciseSelection?level=2');
    }));
    it('devrait changer le niveau visuel', (0, _asyncToGenerator2.default)(function* () {
      var mockSetCurrentLevel = jest.fn();
      setupMocks({
        currentLevelContext: {
          currentLevel: '1',
          setCurrentLevel: mockSetCurrentLevel
        }
      });
      var _renderDashboard1 = renderDashboard(),
        getByTestId = _renderDashboard1.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var changeVisualButton = getByTestId('change-visual-level-button');
        _reactNative.fireEvent.press(changeVisualButton);
      });
      expect(mockSetCurrentLevel).toHaveBeenCalledWith('2');
    }));
    it('devrait afficher la couleur correspondant au niveau', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard10 = renderDashboard(),
        getByTestId = _renderDashboard10.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var colorElement = getByTestId('header-color');
        expect(colorElement.children[0]).toContain('#10B981');
      });
    }));
  });
  describe('Affichage des progrÃ¨s', function () {
    it('devrait afficher le progrÃ¨s global du niveau courant', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        levelProgressMap: {
          '1': 42,
          '2': 67,
          '3': 89
        }
      });
      var _renderDashboard11 = renderDashboard(),
        getByTestId = _renderDashboard11.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        var globalProgress = getByTestId('global-progress');
        expect(globalProgress.children[0]).toContain('42%');
      });
    }));
    it('devrait afficher les progrÃ¨s de tous les niveaux', (0, _asyncToGenerator2.default)(function* () {
      setupMocks({
        levelProgressMap: {
          '1': 25,
          '2': 50,
          '3': 75
        }
      });
      var _renderDashboard12 = renderDashboard(),
        getByTestId = _renderDashboard12.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('level-progress-1').children[0]).toContain('25%');
        expect(getByTestId('level-progress-2').children[0]).toContain('50%');
        expect(getByTestId('level-progress-3').children[0]).toContain('75%');
      });
    }));
  });
  describe('Gestion des erreurs', function () {
    it('devrait gÃ©rer les erreurs AsyncStorage gracieusement', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockRejectedValue(new Error('Storage error'));
      var _renderDashboard13 = renderDashboard(),
        getByTestId = _renderDashboard13.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('container')).toBeTruthy();
        expect(getByTestId('modern-header')).toBeTruthy();
      });
    }));
    it('devrait gÃ©rer l\'absence de contexte Progress', function () {
      mockUseProgress.mockReturnValue({
        isLoading: true
      });
      var _renderDashboard14 = renderDashboard(),
        getByText = _renderDashboard14.getByText;
      expect(getByText('Chargement du tableau de bord...')).toBeTruthy();
    });
    it('devrait gÃ©rer l\'absence de contexte CurrentLevel', (0, _asyncToGenerator2.default)(function* () {
      mockUseCurrentLevel.mockReturnValue({
        setCurrentLevel: jest.fn()
      });
      var _renderDashboard15 = renderDashboard(),
        getByTestId = _renderDashboard15.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('modern-header')).toBeTruthy();
      });
    }));
  });
  describe('IntÃ©gration des donnÃ©es', function () {
    it('devrait synchroniser les donnÃ©es entre les composants', (0, _asyncToGenerator2.default)(function* () {
      var customLevel = '3';
      var customColor = '#8B5CF6';
      setupMocks({
        currentLevelContext: {
          currentLevel: customLevel,
          setCurrentLevel: jest.fn()
        },
        levelProgressMap: {
          '3': 88
        }
      });
      var _renderDashboard16 = renderDashboard(),
        getByTestId = _renderDashboard16.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId(`header-level-${customLevel}`)).toBeTruthy();
        expect(getByTestId(`quick-actions-level-${customLevel}`)).toBeTruthy();
        expect(getByTestId(`current-level-${customLevel}`)).toBeTruthy();
        expect(getByTestId(`revision-level-${customLevel}`)).toBeTruthy();
        expect(getByTestId('metrics-color').children[0]).toContain(customColor);
      });
    }));
    it('devrait rafraÃ®chir les donnÃ©es en temps rÃ©el', (0, _asyncToGenerator2.default)(function* () {
      var _renderDashboard17 = renderDashboard(),
        getByTestId = _renderDashboard17.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('container')).toBeTruthy();
      });
      expect(mockRefresh).toHaveBeenCalled();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,