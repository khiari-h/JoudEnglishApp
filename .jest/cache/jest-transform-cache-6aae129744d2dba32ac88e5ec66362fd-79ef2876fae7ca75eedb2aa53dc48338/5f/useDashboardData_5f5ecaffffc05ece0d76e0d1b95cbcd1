9cb603d4b507e66f687fb92844c42e54
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDashboardData = void 0;
var _react = require("react");
var _constants = require("../../../utils/constants");
var useDashboardData = exports.useDashboardData = function useDashboardData(progressContext, currentLevel, lastActivity, currentStreak) {
  var _ref = progressContext || {},
    _ref$progress = _ref.progress,
    progress = _ref$progress === void 0 ? {} : _ref$progress,
    _ref$calculateGlobalP = _ref.calculateGlobalProgress,
    calculateGlobalProgress = _ref$calculateGlobalP === void 0 ? function () {
      return 0;
    } : _ref$calculateGlobalP,
    _ref$calculateLevelPr = _ref.calculateLevelProgress,
    calculateLevelProgress = _ref$calculateLevelPr === void 0 ? function () {
      return 0;
    } : _ref$calculateLevelPr;
  var globalProgress = (0, _react.useMemo)(function () {
    return calculateGlobalProgress();
  }, [calculateGlobalProgress]);
  var levelProgress = (0, _react.useMemo)(function () {
    return calculateLevelProgress(currentLevel);
  }, [calculateLevelProgress, currentLevel]);
  var allLevels = (0, _react.useMemo)(function () {
    return Object.keys(_constants.LANGUAGE_LEVELS).map(function (levelKey) {
      return {
        id: levelKey,
        color: _constants.LANGUAGE_LEVELS[levelKey].color,
        isActive: levelKey === currentLevel
      };
    });
  }, [currentLevel]);
  var getAllLearningLevels = (0, _react.useMemo)(function () {
    return Object.keys(_constants.LANGUAGE_LEVELS).map(function (levelKey) {
      return {
        id: levelKey,
        title: _constants.LANGUAGE_LEVELS[levelKey].title,
        color: _constants.LANGUAGE_LEVELS[levelKey].color,
        progress: calculateLevelProgress(levelKey),
        isActive: levelKey === currentLevel
      };
    });
  }, [calculateLevelProgress, currentLevel]);
  return {
    progress: progress,
    globalProgress: globalProgress,
    levelProgress: levelProgress,
    allLevels: allLevels,
    getAllLearningLevels: getAllLearningLevels,
    lastActivity: lastActivity,
    currentStreak: currentStreak
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX2NvbnN0YW50cyIsInVzZURhc2hib2FyZERhdGEiLCJleHBvcnRzIiwicHJvZ3Jlc3NDb250ZXh0IiwiY3VycmVudExldmVsIiwibGFzdEFjdGl2aXR5IiwiY3VycmVudFN0cmVhayIsIl9yZWYiLCJfcmVmJHByb2dyZXNzIiwicHJvZ3Jlc3MiLCJfcmVmJGNhbGN1bGF0ZUdsb2JhbFAiLCJjYWxjdWxhdGVHbG9iYWxQcm9ncmVzcyIsIl9yZWYkY2FsY3VsYXRlTGV2ZWxQciIsImNhbGN1bGF0ZUxldmVsUHJvZ3Jlc3MiLCJnbG9iYWxQcm9ncmVzcyIsInVzZU1lbW8iLCJsZXZlbFByb2dyZXNzIiwiYWxsTGV2ZWxzIiwiT2JqZWN0Iiwia2V5cyIsIkxBTkdVQUdFX0xFVkVMUyIsIm1hcCIsImxldmVsS2V5IiwiaWQiLCJjb2xvciIsImlzQWN0aXZlIiwiZ2V0QWxsTGVhcm5pbmdMZXZlbHMiLCJ0aXRsZSJdLCJzb3VyY2VzIjpbInVzZURhc2hib2FyZERhdGEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3NjcmVlbnMvRGFzaGJvYXJkL2hvb2tzL3VzZURhc2hib2FyZERhdGEuanMgLSBWRVJTSU9OIE5FVFRPWcOJRVxuaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgTEFOR1VBR0VfTEVWRUxTIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL2NvbnN0YW50c1wiO1xuXG5leHBvcnQgY29uc3QgdXNlRGFzaGJvYXJkRGF0YSA9IChcbiAgcHJvZ3Jlc3NDb250ZXh0LFxuICBjdXJyZW50TGV2ZWwsXG4gIGxhc3RBY3Rpdml0eSxcbiAgY3VycmVudFN0cmVha1xuKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBwcm9ncmVzcyA9IHt9LFxuICAgIGNhbGN1bGF0ZUdsb2JhbFByb2dyZXNzID0gKCkgPT4gMCxcbiAgICBjYWxjdWxhdGVMZXZlbFByb2dyZXNzID0gKCkgPT4gMCxcbiAgfSA9IHByb2dyZXNzQ29udGV4dCB8fCB7fTtcblxuICAvLyBNw6ltb3Jpc2VyIGxlcyBjYWxjdWxzIGxvdXJkcyBwb3VyIMOpdml0ZXIgbGVzIHJlLWNhbGN1bHMgaW51dGlsZXNcbiAgY29uc3QgZ2xvYmFsUHJvZ3Jlc3MgPSB1c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4gY2FsY3VsYXRlR2xvYmFsUHJvZ3Jlc3MoKTtcbiAgfSwgW2NhbGN1bGF0ZUdsb2JhbFByb2dyZXNzXSk7XG5cbiAgY29uc3QgbGV2ZWxQcm9ncmVzcyA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiBjYWxjdWxhdGVMZXZlbFByb2dyZXNzKGN1cnJlbnRMZXZlbCk7XG4gIH0sIFtjYWxjdWxhdGVMZXZlbFByb2dyZXNzLCBjdXJyZW50TGV2ZWxdKTtcblxuICAvLyBNw6ltb3Jpc2VyIGxhIGxpc3RlIGRlcyBuaXZlYXV4IHBvdXIgw6l2aXRlciBsZXMgcmUtY3LDqWF0aW9uc1xuICBjb25zdCBhbGxMZXZlbHMgPSB1c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoTEFOR1VBR0VfTEVWRUxTKS5tYXAoKGxldmVsS2V5KSA9PiAoe1xuICAgICAgaWQ6IGxldmVsS2V5LFxuICAgICAgY29sb3I6IExBTkdVQUdFX0xFVkVMU1tsZXZlbEtleV0uY29sb3IsXG4gICAgICBpc0FjdGl2ZTogbGV2ZWxLZXkgPT09IGN1cnJlbnRMZXZlbCxcbiAgICB9KSk7XG4gIH0sIFtjdXJyZW50TGV2ZWxdKTtcblxuICAvLyBNw6ltb3Jpc2VyIGxlcyBuaXZlYXV4IGQnYXBwcmVudGlzc2FnZSBhdmVjIHByb2dyZXNzXG4gIGNvbnN0IGdldEFsbExlYXJuaW5nTGV2ZWxzID0gdXNlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKExBTkdVQUdFX0xFVkVMUykubWFwKChsZXZlbEtleSkgPT4gKHtcbiAgICAgIGlkOiBsZXZlbEtleSxcbiAgICAgIHRpdGxlOiBMQU5HVUFHRV9MRVZFTFNbbGV2ZWxLZXldLnRpdGxlLFxuICAgICAgY29sb3I6IExBTkdVQUdFX0xFVkVMU1tsZXZlbEtleV0uY29sb3IsXG4gICAgICBwcm9ncmVzczogY2FsY3VsYXRlTGV2ZWxQcm9ncmVzcyhsZXZlbEtleSksXG4gICAgICBpc0FjdGl2ZTogbGV2ZWxLZXkgPT09IGN1cnJlbnRMZXZlbCxcbiAgICB9KSk7XG4gIH0sIFtjYWxjdWxhdGVMZXZlbFByb2dyZXNzLCBjdXJyZW50TGV2ZWxdKTtcblxuICAvLyDinIUgU1VQUFJJTcOJIDogUGx1cyBiZXNvaW4gZCdleGVyY2lzZVRpbWVTdGF0cyBmYWtlICFcbiAgLy8gUmVjb21tZW5kYXRpb25zU2VjdGlvbiByw6ljdXDDqHJlIG1haW50ZW5hbnQgc2VzIHZyYWllcyBkb25uw6llc1xuICAvLyB2aWEgdXNlRXhlcmNpc2VUcmFja2luZyBkaXJlY3RlbWVudFxuXG4gIHJldHVybiB7XG4gICAgcHJvZ3Jlc3MsXG4gICAgZ2xvYmFsUHJvZ3Jlc3MsXG4gICAgbGV2ZWxQcm9ncmVzcyxcbiAgICBhbGxMZXZlbHMsXG4gICAgZ2V0QWxsTGVhcm5pbmdMZXZlbHMsXG4gICAgLy8gZXhlcmNpc2VUaW1lU3RhdHMsIOKGkCBTVVBQUklNw4kgIVxuICAgIGxhc3RBY3Rpdml0eSxcbiAgICBjdXJyZW50U3RyZWFrLFxuICB9O1xufTsiXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxJQUFBQSxNQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFELE9BQUE7QUFFTyxJQUFNRSxnQkFBZ0IsR0FBQUMsT0FBQSxDQUFBRCxnQkFBQSxHQUFHLFNBQW5CQSxnQkFBZ0JBLENBQzNCRSxlQUFlLEVBQ2ZDLFlBQVksRUFDWkMsWUFBWSxFQUNaQyxhQUFhLEVBQ1Y7RUFDSCxJQUFBQyxJQUFBLEdBSUlKLGVBQWUsSUFBSSxDQUFDLENBQUM7SUFBQUssYUFBQSxHQUFBRCxJQUFBLENBSHZCRSxRQUFRO0lBQVJBLFFBQVEsR0FBQUQsYUFBQSxjQUFHLENBQUMsQ0FBQyxHQUFBQSxhQUFBO0lBQUFFLHFCQUFBLEdBQUFILElBQUEsQ0FDYkksdUJBQXVCO0lBQXZCQSx1QkFBdUIsR0FBQUQscUJBQUEsY0FBRztNQUFBLE9BQU0sQ0FBQztJQUFBLElBQUFBLHFCQUFBO0lBQUFFLHFCQUFBLEdBQUFMLElBQUEsQ0FDakNNLHNCQUFzQjtJQUF0QkEsc0JBQXNCLEdBQUFELHFCQUFBLGNBQUc7TUFBQSxPQUFNLENBQUM7SUFBQSxJQUFBQSxxQkFBQTtFQUlsQyxJQUFNRSxjQUFjLEdBQUcsSUFBQUMsY0FBTyxFQUFDLFlBQU07SUFDbkMsT0FBT0osdUJBQXVCLENBQUMsQ0FBQztFQUNsQyxDQUFDLEVBQUUsQ0FBQ0EsdUJBQXVCLENBQUMsQ0FBQztFQUU3QixJQUFNSyxhQUFhLEdBQUcsSUFBQUQsY0FBTyxFQUFDLFlBQU07SUFDbEMsT0FBT0Ysc0JBQXNCLENBQUNULFlBQVksQ0FBQztFQUM3QyxDQUFDLEVBQUUsQ0FBQ1Msc0JBQXNCLEVBQUVULFlBQVksQ0FBQyxDQUFDO0VBRzFDLElBQU1hLFNBQVMsR0FBRyxJQUFBRixjQUFPLEVBQUMsWUFBTTtJQUM5QixPQUFPRyxNQUFNLENBQUNDLElBQUksQ0FBQ0MsMEJBQWUsQ0FBQyxDQUFDQyxHQUFHLENBQUMsVUFBQ0MsUUFBUTtNQUFBLE9BQU07UUFDckRDLEVBQUUsRUFBRUQsUUFBUTtRQUNaRSxLQUFLLEVBQUVKLDBCQUFlLENBQUNFLFFBQVEsQ0FBQyxDQUFDRSxLQUFLO1FBQ3RDQyxRQUFRLEVBQUVILFFBQVEsS0FBS2xCO01BQ3pCLENBQUM7SUFBQSxDQUFDLENBQUM7RUFDTCxDQUFDLEVBQUUsQ0FBQ0EsWUFBWSxDQUFDLENBQUM7RUFHbEIsSUFBTXNCLG9CQUFvQixHQUFHLElBQUFYLGNBQU8sRUFBQyxZQUFNO0lBQ3pDLE9BQU9HLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDQywwQkFBZSxDQUFDLENBQUNDLEdBQUcsQ0FBQyxVQUFDQyxRQUFRO01BQUEsT0FBTTtRQUNyREMsRUFBRSxFQUFFRCxRQUFRO1FBQ1pLLEtBQUssRUFBRVAsMEJBQWUsQ0FBQ0UsUUFBUSxDQUFDLENBQUNLLEtBQUs7UUFDdENILEtBQUssRUFBRUosMEJBQWUsQ0FBQ0UsUUFBUSxDQUFDLENBQUNFLEtBQUs7UUFDdENmLFFBQVEsRUFBRUksc0JBQXNCLENBQUNTLFFBQVEsQ0FBQztRQUMxQ0csUUFBUSxFQUFFSCxRQUFRLEtBQUtsQjtNQUN6QixDQUFDO0lBQUEsQ0FBQyxDQUFDO0VBQ0wsQ0FBQyxFQUFFLENBQUNTLHNCQUFzQixFQUFFVCxZQUFZLENBQUMsQ0FBQztFQU0xQyxPQUFPO0lBQ0xLLFFBQVEsRUFBUkEsUUFBUTtJQUNSSyxjQUFjLEVBQWRBLGNBQWM7SUFDZEUsYUFBYSxFQUFiQSxhQUFhO0lBQ2JDLFNBQVMsRUFBVEEsU0FBUztJQUNUUyxvQkFBb0IsRUFBcEJBLG9CQUFvQjtJQUVwQnJCLFlBQVksRUFBWkEsWUFBWTtJQUNaQyxhQUFhLEVBQWJBO0VBQ0YsQ0FBQztBQUNILENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=