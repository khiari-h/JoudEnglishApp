fdadd3c7e2a7b99fab14d7be7bd69327
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withReanimatedTimer = exports.setUpTests = exports.getAnimatedStyle = exports.advanceAnimationByTime = exports.advanceAnimationByFrame = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _PlatformChecker = require("./PlatformChecker");
var _errors = require("./errors");
var defaultFramerateConfig = {
  fps: 60
};
var isEmpty = function isEmpty(obj) {
  return Object.keys(obj).length === 0;
};
var getStylesFromObject = function getStylesFromObject(obj) {
  return obj === undefined ? {} : Object.fromEntries(Object.entries(obj).map(function (_ref) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
      property = _ref2[0],
      value = _ref2[1];
    return [property, value._isReanimatedSharedValue ? value.value : value];
  }));
};
var getCurrentStyle = function getCurrentStyle(component) {
  var _component$props$jest;
  var styleObject = component.props.style;
  var currentStyle = {};
  if (Array.isArray(styleObject)) {
    styleObject.forEach(function (style) {
      currentStyle = Object.assign({}, currentStyle, style);
    });
    return currentStyle;
  }
  var jestInlineStyles = component.props.jestInlineStyle;
  var jestAnimatedStyleValue = (_component$props$jest = component.props.jestAnimatedStyle) == null ? void 0 : _component$props$jest.value;
  if (Array.isArray(jestInlineStyles)) {
    for (var obj of jestInlineStyles) {
      if ('jestAnimatedStyle' in obj) {
        continue;
      }
      var _inlineStyles = getStylesFromObject(obj);
      currentStyle = Object.assign({}, currentStyle, _inlineStyles);
    }
    currentStyle = Object.assign({}, styleObject, currentStyle, jestAnimatedStyleValue);
    return currentStyle;
  }
  var inlineStyles = getStylesFromObject(jestInlineStyles);
  currentStyle = isEmpty(jestAnimatedStyleValue) ? Object.assign({}, styleObject, inlineStyles) : Object.assign({}, styleObject, jestAnimatedStyleValue);
  return currentStyle;
};
var _checkEqual = function checkEqual(current, expected) {
  if (Array.isArray(expected)) {
    if (!Array.isArray(current) || expected.length !== current.length) {
      return false;
    }
    for (var i = 0; i < current.length; i++) {
      if (!_checkEqual(current[i], expected[i])) {
        return false;
      }
    }
  } else if (typeof current === 'object' && current) {
    if (typeof expected !== 'object' || !expected) {
      return false;
    }
    for (var property in expected) {
      if (!_checkEqual(current[property], expected[property])) {
        return false;
      }
    }
  } else {
    return current === expected;
  }
  return true;
};
var findStyleDiff = function findStyleDiff(current, expected, shouldMatchAllProps) {
  var diffs = [];
  var isEqual = true;
  var property;
  for (property in expected) {
    if (!_checkEqual(current[property], expected[property])) {
      isEqual = false;
      diffs.push({
        property: property,
        current: current[property],
        expect: expected[property]
      });
    }
  }
  if (shouldMatchAllProps && Object.keys(current).length !== Object.keys(expected).length) {
    isEqual = false;
    var _property;
    for (_property in current) {
      if (expected[_property] === undefined) {
        diffs.push({
          property: _property,
          current: current[_property],
          expect: expected[_property]
        });
      }
    }
  }
  return {
    isEqual: isEqual,
    diffs: diffs
  };
};
var compareStyle = function compareStyle(component, expectedStyle, config) {
  if (!component.props.style) {
    return {
      message: function message() {
        return `Component doesn't have a style.`;
      },
      pass: false
    };
  }
  var shouldMatchAllProps = config.shouldMatchAllProps;
  var currentStyle = getCurrentStyle(component);
  var _findStyleDiff = findStyleDiff(currentStyle, expectedStyle, shouldMatchAllProps),
    isEqual = _findStyleDiff.isEqual,
    diffs = _findStyleDiff.diffs;
  if (isEqual) {
    return {
      message: function message() {
        return 'ok';
      },
      pass: true
    };
  }
  var currentStyleStr = JSON.stringify(currentStyle);
  var expectedStyleStr = JSON.stringify(expectedStyle);
  var differences = diffs.map(function (diff) {
    return `- '${diff.property}' should be ${JSON.stringify(diff.expect)}, but is ${JSON.stringify(diff.current)}`;
  }).join('\n');
  return {
    message: function message() {
      return `Expected: ${expectedStyleStr}\nReceived: ${currentStyleStr}\n\nDifferences:\n${differences}`;
    },
    pass: false
  };
};
var frameTime = Math.round(1000 / defaultFramerateConfig.fps);
var beforeTest = function beforeTest() {
  jest.useFakeTimers();
};
var afterTest = function afterTest() {
  jest.runOnlyPendingTimers();
  jest.useRealTimers();
};
var withReanimatedTimer = exports.withReanimatedTimer = function withReanimatedTimer(animationTest) {
  console.warn('This method is deprecated, you should define your own before and after test hooks to enable jest.useFakeTimers(). Check out the documentation for details on testing');
  beforeTest();
  animationTest();
  afterTest();
};
var advanceAnimationByTime = exports.advanceAnimationByTime = function advanceAnimationByTime() {
  var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : frameTime;
  console.warn('This method is deprecated, use jest.advanceTimersByTime directly');
  jest.advanceTimersByTime(time);
  jest.runOnlyPendingTimers();
};
var advanceAnimationByFrame = exports.advanceAnimationByFrame = function advanceAnimationByFrame(count) {
  console.warn('This method is deprecated, use jest.advanceTimersByTime directly');
  jest.advanceTimersByTime(count * frameTime);
  jest.runOnlyPendingTimers();
};
var requireFunction = (0, _PlatformChecker.isJest)() ? require : function () {
  throw new _errors.ReanimatedError('`setUpTests` is available only in Jest environment.');
};
var setUpTests = exports.setUpTests = function setUpTests() {
  var userFramerateConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var expect = global.expect;
  if (expect === undefined) {
    var expectModule = requireFunction('expect');
    expect = expectModule;
    if (typeof expect === 'object') {
      var jestGlobals = requireFunction('@jest/globals');
      expect = jestGlobals.expect;
    }
    if (expect === undefined || expect.extend === undefined) {
      expect = expectModule.default;
    }
  }
  var framerateConfig = Object.assign({}, defaultFramerateConfig, userFramerateConfig);
  frameTime = Math.round(1000 / framerateConfig.fps);
  expect.extend({
    toHaveAnimatedStyle: function toHaveAnimatedStyle(component, expectedStyle) {
      var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return compareStyle(component, expectedStyle, config);
    }
  });
};
var getAnimatedStyle = exports.getAnimatedStyle = function getAnimatedStyle(component) {
  return getCurrentStyle(component);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,