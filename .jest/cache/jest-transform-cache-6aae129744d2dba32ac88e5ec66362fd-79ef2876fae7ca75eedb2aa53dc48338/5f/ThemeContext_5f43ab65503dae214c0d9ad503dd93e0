017f354c0213a1de70d0998368c6370b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ThemeProvider = exports.ThemeContext = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _storageUtils = require("../utils/storageUtils");
var _constants = require("../utils/constants");
var _jsxRuntime = require("react/jsx-runtime");
var ThemeContext = exports.ThemeContext = (0, _react.createContext)();
var ThemeProvider = exports.ThemeProvider = function ThemeProvider(_ref) {
  var children = _ref.children;
  var _useState = (0, _react.useState)('light'),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    theme = _useState2[0],
    setTheme = _useState2[1];
  var systemColorScheme = (0, _reactNative.useColorScheme)();
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    loaded = _useState4[0],
    setLoaded = _useState4[1];
  var isDarkTheme = (0, _react.useMemo)(function () {
    return theme === 'system' ? systemColorScheme === 'dark' : theme === 'dark';
  }, [theme, systemColorScheme]);
  (0, _react.useEffect)(function () {
    var mounted = true;
    var loadTheme = function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* () {
        try {
          var savedTheme = yield (0, _storageUtils.getData)('appTheme');
          if (mounted) {
            if (savedTheme) {
              setTheme(savedTheme);
            }
            setLoaded(true);
          }
        } catch (error) {
          console.error('Error loading theme:', error);
          if (mounted) {
            setLoaded(true);
          }
        }
      });
      return function loadTheme() {
        return _ref2.apply(this, arguments);
      };
    }();
    loadTheme();
    return function () {
      mounted = false;
    };
  }, []);
  (0, _react.useEffect)(function () {
    var timeoutId = null;
    if (loaded) {
      timeoutId = setTimeout(function () {
        (0, _storageUtils.storeData)('appTheme', theme);
      }, 300);
    }
    return function () {
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
    };
  }, [theme, loaded]);
  var setAppTheme = (0, _react.useCallback)(function (newTheme) {
    setTheme(newTheme);
  }, []);
  var toggleTheme = (0, _react.useCallback)(function () {
    if (theme === 'system') {
      setTheme(systemColorScheme === 'dark' ? 'light' : 'dark');
    } else {
      setTheme(theme === 'dark' ? 'light' : 'dark');
    }
  }, [theme, systemColorScheme]);
  var resetToSystemTheme = (0, _react.useCallback)(function () {
    setTheme('system');
  }, []);
  var colors = (0, _react.useMemo)(function () {
    return isDarkTheme ? {
      background: '#121212',
      surface: '#1E1E1E',
      primary: '#BB86FC',
      primaryDark: '#9F66EB',
      secondary: '#03DAC6',
      accent: '#CF6679',
      error: '#CF6679',
      text: '#FFFFFF',
      textSecondary: '#B0B0B0',
      border: '#2C2C2C',
      divider: '#2C2C2C',
      disabled: '#666666',
      icon: '#FFFFFF',
      level: {
        A1: '#3b82f6',
        A2: '#8b5cf6',
        B1: '#10b981',
        B2: '#f59e0b',
        C1: '#ef4444',
        C2: '#6366f1'
      }
    } : Object.assign({}, _constants.COLORS, {
      level: {
        A1: '#3b82f6',
        A2: '#8b5cf6',
        B1: '#10b981',
        B2: '#f59e0b',
        C1: '#ef4444',
        C2: '#6366f1'
      }
    });
  }, [isDarkTheme]);
  var spacing = (0, _react.useMemo)(function () {
    return {
      xs: 4,
      sm: 8,
      md: 16,
      lg: 24,
      xl: 32,
      xxl: 48
    };
  }, []);
  var typography = (0, _react.useMemo)(function () {
    return {
      fontSizes: {
        xs: 12,
        sm: 14,
        md: 16,
        lg: 18,
        xl: 20,
        xxl: 24,
        xxxl: 30
      },
      fontWeights: {
        light: '300',
        regular: '400',
        medium: '500',
        semibold: '600',
        bold: '700'
      },
      lineHeights: {
        tight: 1.2,
        normal: 1.5,
        loose: 1.8
      }
    };
  }, []);
  var borderRadius = (0, _react.useMemo)(function () {
    return {
      sm: 4,
      md: 8,
      lg: 12,
      xl: 16,
      round: 9999
    };
  }, []);
  var shadows = (0, _react.useMemo)(function () {
    return isDarkTheme ? {
      sm: {
        shadowColor: '#000',
        shadowOffset: {
          width: 0,
          height: 1
        },
        shadowOpacity: 0.2,
        shadowRadius: 2,
        elevation: 2
      },
      md: {
        shadowColor: '#000',
        shadowOffset: {
          width: 0,
          height: 2
        },
        shadowOpacity: 0.3,
        shadowRadius: 4,
        elevation: 4
      },
      lg: {
        shadowColor: '#000',
        shadowOffset: {
          width: 0,
          height: 3
        },
        shadowOpacity: 0.4,
        shadowRadius: 6,
        elevation: 6
      }
    } : {
      sm: {
        shadowColor: '#000',
        shadowOffset: {
          width: 0,
          height: 1
        },
        shadowOpacity: 0.1,
        shadowRadius: 2,
        elevation: 2
      },
      md: {
        shadowColor: '#000',
        shadowOffset: {
          width: 0,
          height: 2
        },
        shadowOpacity: 0.15,
        shadowRadius: 4,
        elevation: 4
      },
      lg: {
        shadowColor: '#000',
        shadowOffset: {
          width: 0,
          height: 3
        },
        shadowOpacity: 0.2,
        shadowRadius: 6,
        elevation: 6
      }
    };
  }, [isDarkTheme]);
  var contextValue = (0, _react.useMemo)(function () {
    return {
      theme: theme,
      setTheme: setAppTheme,
      toggleTheme: toggleTheme,
      resetToSystemTheme: resetToSystemTheme,
      isDarkTheme: isDarkTheme,
      colors: colors,
      spacing: spacing,
      typography: typography,
      borderRadius: borderRadius,
      shadows: shadows,
      loaded: loaded
    };
  }, [theme, setAppTheme, toggleTheme, resetToSystemTheme, isDarkTheme, colors, spacing, typography, borderRadius, shadows, loaded]);
  return (0, _jsxRuntime.jsx)(ThemeContext.Provider, {
    value: contextValue,
    children: children
  });
};
var _default = exports.default = ThemeContext;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,