ecd05f6d0bccc8d46b0a3f5d612ca455
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
function encodeFilename(filename) {
  return encodeURIComponent(filename.replace(/\//g, '_'));
}
var FormData = function () {
  function FormData() {
    (0, _classCallCheck2.default)(this, FormData);
    this._parts = [];
  }
  return (0, _createClass2.default)(FormData, [{
    key: "append",
    value: function append(key, value) {
      this._parts.push([key, value]);
    }
  }, {
    key: "getAll",
    value: function getAll(key) {
      return this._parts.filter(function (_ref) {
        var _ref2 = (0, _slicedToArray2.default)(_ref, 1),
          name = _ref2[0];
        return name === key;
      }).map(function (_ref3) {
        var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
          value = _ref4[1];
        return value;
      });
    }
  }, {
    key: "getParts",
    value: function getParts() {
      return this._parts.map(function (_ref5) {
        var _ref6 = (0, _slicedToArray2.default)(_ref5, 2),
          name = _ref6[0],
          value = _ref6[1];
        var contentDisposition = 'form-data; name="' + name + '"';
        var headers = {
          'content-disposition': contentDisposition
        };
        if (typeof value === 'object' && !Array.isArray(value) && value) {
          if (typeof value.name === 'string') {
            headers['content-disposition'] += `; filename="${encodeFilename(value.name)}"`;
          }
          if (typeof value.type === 'string') {
            headers['content-type'] = value.type;
          }
          return Object.assign({}, value, {
            headers: headers,
            fieldName: name
          });
        }
        return {
          string: String(value),
          headers: headers,
          fieldName: name
        };
      });
    }
  }]);
}();
module.exports = FormData;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9zbGljZWRUb0FycmF5MiIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiZW5jb2RlRmlsZW5hbWUiLCJmaWxlbmFtZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInJlcGxhY2UiLCJGb3JtRGF0YSIsImRlZmF1bHQiLCJfcGFydHMiLCJrZXkiLCJ2YWx1ZSIsImFwcGVuZCIsInB1c2giLCJnZXRBbGwiLCJmaWx0ZXIiLCJfcmVmIiwiX3JlZjIiLCJuYW1lIiwibWFwIiwiX3JlZjMiLCJfcmVmNCIsImdldFBhcnRzIiwiX3JlZjUiLCJfcmVmNiIsImNvbnRlbnREaXNwb3NpdGlvbiIsImhlYWRlcnMiLCJBcnJheSIsImlzQXJyYXkiLCJ0eXBlIiwiT2JqZWN0IiwiYXNzaWduIiwiZmllbGROYW1lIiwic3RyaW5nIiwiU3RyaW5nIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkZvcm1EYXRhLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3RcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnR5cGUgRm9ybURhdGFWYWx1ZSA9IHN0cmluZyB8IHtuYW1lPzogc3RyaW5nLCB0eXBlPzogc3RyaW5nLCB1cmk6IHN0cmluZ307XG50eXBlIEZvcm1EYXRhTmFtZVZhbHVlUGFpciA9IFtzdHJpbmcsIEZvcm1EYXRhVmFsdWVdO1xuXG50eXBlIEhlYWRlcnMgPSB7W25hbWU6IHN0cmluZ106IHN0cmluZywgLi4ufTtcbnR5cGUgRm9ybURhdGFQYXJ0ID1cbiAgfCB7XG4gICAgICBzdHJpbmc6IHN0cmluZyxcbiAgICAgIGhlYWRlcnM6IEhlYWRlcnMsXG4gICAgICAuLi5cbiAgICB9XG4gIHwge1xuICAgICAgdXJpOiBzdHJpbmcsXG4gICAgICBoZWFkZXJzOiBIZWFkZXJzLFxuICAgICAgbmFtZT86IHN0cmluZyxcbiAgICAgIHR5cGU/OiBzdHJpbmcsXG4gICAgICAuLi5cbiAgICB9O1xuXG4vKipcbiAqIEVuY29kZSBhIEZvcm1EYXRhIGZpbGVuYW1lIGNvbXBsaWFudCB3aXRoIFJGQyAyMTgzXG4gKlxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9IZWFkZXJzL0NvbnRlbnQtRGlzcG9zaXRpb24jZGlyZWN0aXZlc1xuICovXG5mdW5jdGlvbiBlbmNvZGVGaWxlbmFtZShmaWxlbmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChmaWxlbmFtZS5yZXBsYWNlKC9cXC8vZywgJ18nKSk7XG59XG5cbi8qKlxuICogUG9seWZpbGwgZm9yIFhNTEh0dHBSZXF1ZXN0MiBGb3JtRGF0YSBBUEksIGFsbG93aW5nIG11bHRpcGFydCBQT1NUIHJlcXVlc3RzXG4gKiB3aXRoIG1peGVkIGRhdGEgKHN0cmluZywgbmF0aXZlIGZpbGVzKSB0byBiZSBzdWJtaXR0ZWQgdmlhIFhNTEh0dHBSZXF1ZXN0LlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICB2YXIgcGhvdG8gPSB7XG4gKiAgICAgdXJpOiB1cmlGcm9tQ2FtZXJhUm9sbCxcbiAqICAgICB0eXBlOiAnaW1hZ2UvanBlZycsXG4gKiAgICAgbmFtZTogJ3Bob3RvLmpwZycsXG4gKiAgIH07XG4gKlxuICogICB2YXIgYm9keSA9IG5ldyBGb3JtRGF0YSgpO1xuICogICBib2R5LmFwcGVuZCgnYXV0aFRva2VuJywgJ3NlY3JldCcpO1xuICogICBib2R5LmFwcGVuZCgncGhvdG8nLCBwaG90byk7XG4gKiAgIGJvZHkuYXBwZW5kKCd0aXRsZScsICdBIGJlYXV0aWZ1bCBwaG90byEnKTtcbiAqXG4gKiAgIHhoci5vcGVuKCdQT1NUJywgc2VydmVyVVJMKTtcbiAqICAgeGhyLnNlbmQoYm9keSk7XG4gKi9cbmNsYXNzIEZvcm1EYXRhIHtcbiAgX3BhcnRzOiBBcnJheTxGb3JtRGF0YU5hbWVWYWx1ZVBhaXI+O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3BhcnRzID0gW107XG4gIH1cblxuICBhcHBlbmQoa2V5OiBzdHJpbmcsIHZhbHVlOiBGb3JtRGF0YVZhbHVlKSB7XG4gICAgLy8gVGhlIFhNTEh0dHBSZXF1ZXN0IHNwZWMgZG9lc24ndCBzcGVjaWZ5IGlmIGR1cGxpY2F0ZSBrZXlzIGFyZSBhbGxvd2VkLlxuICAgIC8vIE1ETiBzYXlzIHRoYXQgYW55IG5ldyB2YWx1ZXMgc2hvdWxkIGJlIGFwcGVuZGVkIHRvIGV4aXN0aW5nIHZhbHVlcy5cbiAgICAvLyBJbiBhbnkgY2FzZSwgbWFqb3IgYnJvd3NlcnMgYWxsb3cgZHVwbGljYXRlIGtleXMsIHNvIHRoYXQncyB3aGF0IHdlJ2xsIGRvXG4gICAgLy8gdG9vLiBUaGV5J2xsIHNpbXBseSBnZXQgYXBwZW5kZWQgYXMgYWRkaXRpb25hbCBmb3JtIGRhdGEgcGFydHMgaW4gdGhlXG4gICAgLy8gcmVxdWVzdCBib2R5LCBsZWF2aW5nIHRoZSBzZXJ2ZXIgdG8gZGVhbCB3aXRoIHRoZW0uXG4gICAgdGhpcy5fcGFydHMucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9XG5cbiAgZ2V0QWxsKGtleTogc3RyaW5nKTogQXJyYXk8Rm9ybURhdGFWYWx1ZT4ge1xuICAgIHJldHVybiB0aGlzLl9wYXJ0c1xuICAgICAgLmZpbHRlcigoW25hbWVdKSA9PiBuYW1lID09PSBrZXkpXG4gICAgICAubWFwKChbLCB2YWx1ZV0pID0+IHZhbHVlKTtcbiAgfVxuXG4gIGdldFBhcnRzKCk6IEFycmF5PEZvcm1EYXRhUGFydD4ge1xuICAgIHJldHVybiB0aGlzLl9wYXJ0cy5tYXAoKFtuYW1lLCB2YWx1ZV0pID0+IHtcbiAgICAgIGNvbnN0IGNvbnRlbnREaXNwb3NpdGlvbiA9ICdmb3JtLWRhdGE7IG5hbWU9XCInICsgbmFtZSArICdcIic7XG5cbiAgICAgIGNvbnN0IGhlYWRlcnM6IEhlYWRlcnMgPSB7J2NvbnRlbnQtZGlzcG9zaXRpb24nOiBjb250ZW50RGlzcG9zaXRpb259O1xuXG4gICAgICAvLyBUaGUgYm9keSBwYXJ0IGlzIGEgXCJibG9iXCIsIHdoaWNoIGluIFJlYWN0IE5hdGl2ZSBqdXN0IG1lYW5zXG4gICAgICAvLyBhbiBvYmplY3Qgd2l0aCBhIGB1cmlgIGF0dHJpYnV0ZS4gT3B0aW9uYWxseSwgaXQgY2FuIGFsc29cbiAgICAgIC8vIGhhdmUgYSBgbmFtZWAgYW5kIGB0eXBlYCBhdHRyaWJ1dGUgdG8gc3BlY2lmeSBmaWxlbmFtZSBhbmRcbiAgICAgIC8vIGNvbnRlbnQgdHlwZSAoY2YuIHdlYiBCbG9iIGludGVyZmFjZS4pXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZS5uYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGhlYWRlcnNbJ2NvbnRlbnQtZGlzcG9zaXRpb24nXSArPVxuICAgICAgICAgICAgYDsgZmlsZW5hbWU9XCIke2VuY29kZUZpbGVuYW1lKHZhbHVlLm5hbWUpfVwiYDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlLnR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaGVhZGVyc1snY29udGVudC10eXBlJ10gPSB2YWx1ZS50eXBlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7Li4udmFsdWUsIGhlYWRlcnMsIGZpZWxkTmFtZTogbmFtZX07XG4gICAgICB9XG4gICAgICAvLyBDb252ZXJ0IG5vbi1vYmplY3QgdmFsdWVzIHRvIHN0cmluZ3MgYXMgcGVyIEZvcm1EYXRhLmFwcGVuZCgpIHNwZWNcbiAgICAgIHJldHVybiB7c3RyaW5nOiBTdHJpbmcodmFsdWUpLCBoZWFkZXJzLCBmaWVsZE5hbWU6IG5hbWV9O1xuICAgIH0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRm9ybURhdGE7XG4iXSwibWFwcGluZ3MiOiJBQVVBLFlBQVk7O0FBQUMsSUFBQUEsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLGVBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFFLGdCQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBRyxhQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUF5QmIsU0FBU0ksY0FBY0EsQ0FBQ0MsUUFBZ0IsRUFBVTtFQUNoRCxPQUFPQyxrQkFBa0IsQ0FBQ0QsUUFBUSxDQUFDRSxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3pEO0FBQUMsSUFzQktDLFFBQVE7RUFHWixTQUFBQSxTQUFBLEVBQWM7SUFBQSxJQUFBTixnQkFBQSxDQUFBTyxPQUFBLFFBQUFELFFBQUE7SUFDWixJQUFJLENBQUNFLE1BQU0sR0FBRyxFQUFFO0VBQ2xCO0VBQUMsV0FBQVAsYUFBQSxDQUFBTSxPQUFBLEVBQUFELFFBQUE7SUFBQUcsR0FBQTtJQUFBQyxLQUFBLEVBRUQsU0FBQUMsTUFBTUEsQ0FBQ0YsR0FBVyxFQUFFQyxLQUFvQixFQUFFO01BTXhDLElBQUksQ0FBQ0YsTUFBTSxDQUFDSSxJQUFJLENBQUMsQ0FBQ0gsR0FBRyxFQUFFQyxLQUFLLENBQUMsQ0FBQztJQUNoQztFQUFDO0lBQUFELEdBQUE7SUFBQUMsS0FBQSxFQUVELFNBQUFHLE1BQU1BLENBQUNKLEdBQVcsRUFBd0I7TUFDeEMsT0FBTyxJQUFJLENBQUNELE1BQU0sQ0FDZk0sTUFBTSxDQUFDLFVBQUFDLElBQUE7UUFBQSxJQUFBQyxLQUFBLE9BQUFqQixlQUFBLENBQUFRLE9BQUEsRUFBQVEsSUFBQTtVQUFFRSxJQUFJLEdBQUFELEtBQUE7UUFBQSxPQUFNQyxJQUFJLEtBQUtSLEdBQUc7TUFBQSxFQUFDLENBQ2hDUyxHQUFHLENBQUMsVUFBQUMsS0FBQTtRQUFBLElBQUFDLEtBQUEsT0FBQXJCLGVBQUEsQ0FBQVEsT0FBQSxFQUFBWSxLQUFBO1VBQUlULEtBQUssR0FBQVUsS0FBQTtRQUFBLE9BQU1WLEtBQUs7TUFBQSxFQUFDO0lBQzlCO0VBQUM7SUFBQUQsR0FBQTtJQUFBQyxLQUFBLEVBRUQsU0FBQVcsUUFBUUEsQ0FBQSxFQUF3QjtNQUM5QixPQUFPLElBQUksQ0FBQ2IsTUFBTSxDQUFDVSxHQUFHLENBQUMsVUFBQUksS0FBQSxFQUFtQjtRQUFBLElBQUFDLEtBQUEsT0FBQXhCLGVBQUEsQ0FBQVEsT0FBQSxFQUFBZSxLQUFBO1VBQWpCTCxJQUFJLEdBQUFNLEtBQUE7VUFBRWIsS0FBSyxHQUFBYSxLQUFBO1FBQ2xDLElBQU1DLGtCQUFrQixHQUFHLG1CQUFtQixHQUFHUCxJQUFJLEdBQUcsR0FBRztRQUUzRCxJQUFNUSxPQUFnQixHQUFHO1VBQUMscUJBQXFCLEVBQUVEO1FBQWtCLENBQUM7UUFNcEUsSUFBSSxPQUFPZCxLQUFLLEtBQUssUUFBUSxJQUFJLENBQUNnQixLQUFLLENBQUNDLE9BQU8sQ0FBQ2pCLEtBQUssQ0FBQyxJQUFJQSxLQUFLLEVBQUU7VUFDL0QsSUFBSSxPQUFPQSxLQUFLLENBQUNPLElBQUksS0FBSyxRQUFRLEVBQUU7WUFDbENRLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxJQUM1QixlQUFldkIsY0FBYyxDQUFDUSxLQUFLLENBQUNPLElBQUksQ0FBQyxHQUFHO1VBQ2hEO1VBQ0EsSUFBSSxPQUFPUCxLQUFLLENBQUNrQixJQUFJLEtBQUssUUFBUSxFQUFFO1lBQ2xDSCxPQUFPLENBQUMsY0FBYyxDQUFDLEdBQUdmLEtBQUssQ0FBQ2tCLElBQUk7VUFDdEM7VUFDQSxPQUFBQyxNQUFBLENBQUFDLE1BQUEsS0FBV3BCLEtBQUs7WUFBRWUsT0FBTyxFQUFQQSxPQUFPO1lBQUVNLFNBQVMsRUFBRWQ7VUFBSTtRQUM1QztRQUVBLE9BQU87VUFBQ2UsTUFBTSxFQUFFQyxNQUFNLENBQUN2QixLQUFLLENBQUM7VUFBRWUsT0FBTyxFQUFQQSxPQUFPO1VBQUVNLFNBQVMsRUFBRWQ7UUFBSSxDQUFDO01BQzFELENBQUMsQ0FBQztJQUNKO0VBQUM7QUFBQTtBQUdIaUIsTUFBTSxDQUFDQyxPQUFPLEdBQUc3QixRQUFRIiwiaWdub3JlTGlzdCI6W119