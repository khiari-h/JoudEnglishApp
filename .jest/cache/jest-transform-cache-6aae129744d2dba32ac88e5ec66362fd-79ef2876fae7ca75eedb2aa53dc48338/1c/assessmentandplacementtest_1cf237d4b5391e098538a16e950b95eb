46debb926f862aee2aa9cb3172bcb09d
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    },
    useRoute: function useRoute() {
      return {
        params: {}
      };
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _layout = _interopRequireDefault(require("../../app/_layout"));
var _AppProvider = require("../../src/contexts/AppProvider");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Assessment and Placement Integration Test', function () {
  it('should place the user at the correct level based on assessment results', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AppProvider.AppProvider, {
        children: (0, _jsxRuntime.jsx)(_layout.default, {})
      })),
      getByText = _render.getByText,
      findByText = _render.findByText;
    _reactNative.fireEvent.press(getByText(/Commencer le test de niveau/i));
    _reactNative.fireEvent.press(getByText(/Réponse A/i));
    _reactNative.fireEvent.press(getByText(/Réponse B/i));
    _reactNative.fireEvent.press(getByText(/Terminer le test/i));
    var recommendedLevel = yield findByText(/Niveau recommandé : B1/i);
    expect(recommendedLevel).toBeTruthy();
    _reactNative.fireEvent.press(getByText(/Continuer/i));
    var levelB1 = yield findByText(/Niveau B1/i);
    expect(levelB1).toBeTruthy();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsInVzZU5hdmlnYXRpb24iLCJuYXZpZ2F0ZSIsImZuIiwiZ29CYWNrIiwidXNlUm91dGUiLCJwYXJhbXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9sYXlvdXQiLCJfQXBwUHJvdmlkZXIiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwiZGVzY3JpYmUiLCJpdCIsImRlZmF1bHQiLCJfcmVuZGVyIiwicmVuZGVyIiwianN4IiwiQXBwUHJvdmlkZXIiLCJjaGlsZHJlbiIsImdldEJ5VGV4dCIsImZpbmRCeVRleHQiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInJlY29tbWVuZGVkTGV2ZWwiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwibGV2ZWxCMSJdLCJzb3VyY2VzIjpbImFzc2Vzc21lbnQtYW5kLXBsYWNlbWVudC50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IEFwcCBmcm9tICcuLi8uLi9hcHAvX2xheW91dCc7XG5pbXBvcnQgeyBBcHBQcm92aWRlciB9IGZyb20gJy4uLy4uL3NyYy9jb250ZXh0cy9BcHBQcm92aWRlcic7XG5cblxuamVzdC5tb2NrKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnLCAoKSA9PiAoe1xuICAuLi5qZXN0LnJlcXVpcmVBY3R1YWwoJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScpLFxuICB1c2VOYXZpZ2F0aW9uOiAoKSA9PiAoe1xuICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXG4gICAgZ29CYWNrOiBqZXN0LmZuKCksXG4gIH0pLFxuICB1c2VSb3V0ZTogKCkgPT4gKHtcbiAgICBwYXJhbXM6IHt9LFxuICB9KSxcbn0pKTtcblxuZGVzY3JpYmUoJ0Fzc2Vzc21lbnQgYW5kIFBsYWNlbWVudCBJbnRlZ3JhdGlvbiBUZXN0JywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIHBsYWNlIHRoZSB1c2VyIGF0IHRoZSBjb3JyZWN0IGxldmVsIGJhc2VkIG9uIGFzc2Vzc21lbnQgcmVzdWx0cycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCwgZmluZEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgPEFwcFByb3ZpZGVyPlxuICAgICAgICAgIDxBcHAgLz5cbiAgICAgIDwvQXBwUHJvdmlkZXI+XG4gICAgKTtcblxuICAgIC8vIDEuIETDqW1hcnJlciBsZSB0ZXN0IGRlIG5pdmVhdVxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoL0NvbW1lbmNlciBsZSB0ZXN0IGRlIG5pdmVhdS9pKSk7XG5cbiAgICAvLyAyLiBTaW11bGVyIGxlcyByw6lwb25zZXMgYXUgdGVzdFxuICAgIC8vIChDZXR0ZSBwYXJ0aWUgZMOpcGVuZCBkZSBsYSBzdHJ1Y3R1cmUgZGUgdm90cmUgdGVzdCBkZSBuaXZlYXUpXG4gICAgLy8gRXhlbXBsZSA6IHLDqXBvbmRyZSBjb3JyZWN0ZW1lbnQgw6AgZGVzIHF1ZXN0aW9ucyBwb3VyIHVuIG5pdmVhdSBCMVxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoL1LDqXBvbnNlIEEvaSkpOyAvLyBTaW11bGV6IGxlcyByw6lwb25zZXNcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KC9Sw6lwb25zZSBCL2kpKTtcbiAgICAvLyAuLi4gY29udGludWV6IHBvdXIgdG91dGVzIGxlcyBxdWVzdGlvbnNcblxuICAgIC8vIDMuIFRlcm1pbmVyIGxlIHRlc3RcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KC9UZXJtaW5lciBsZSB0ZXN0L2kpKTtcblxuICAgIC8vIDQuIFbDqXJpZmllciBxdWUgbCd1dGlsaXNhdGV1ciBlc3QgcmVkaXJpZ8OpIHZlcnMgbGUgYm9uIG5pdmVhdVxuICAgIGNvbnN0IHJlY29tbWVuZGVkTGV2ZWwgPSBhd2FpdCBmaW5kQnlUZXh0KC9OaXZlYXUgcmVjb21tYW5kw6kgOiBCMS9pKTtcbiAgICBleHBlY3QocmVjb21tZW5kZWRMZXZlbCkudG9CZVRydXRoeSgpO1xuXG4gICAgLy8gNS4gTmF2aWd1ZXIgdmVycyBsYSBzw6lsZWN0aW9uIGRlIG5pdmVhdSBwb3VyIGNvbmZpcm1lclxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoL0NvbnRpbnVlci9pKSk7XG4gICAgY29uc3QgbGV2ZWxCMSA9IGF3YWl0IGZpbmRCeVRleHQoL05pdmVhdSBCMS9pKTtcbiAgICBleHBlY3QobGV2ZWxCMSkudG9CZVRydXRoeSgpO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFPQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsMEJBQTBCLEVBQUU7RUFBQSxPQUFBQyxNQUFBLENBQUFDLE1BQUEsS0FDakNDLElBQUksQ0FBQ0MsYUFBYSxDQUFDLDBCQUEwQixDQUFDO0lBQ2pEQyxhQUFhLEVBQUUsU0FBZkEsYUFBYUEsQ0FBQTtNQUFBLE9BQVM7UUFDcEJDLFFBQVEsRUFBRUgsSUFBSSxDQUFDSSxFQUFFLENBQUMsQ0FBQztRQUNuQkMsTUFBTSxFQUFFTCxJQUFJLENBQUNJLEVBQUUsQ0FBQztNQUNsQixDQUFDO0lBQUEsQ0FBQztJQUNGRSxRQUFRLEVBQUUsU0FBVkEsUUFBUUEsQ0FBQTtNQUFBLE9BQVM7UUFDZkMsTUFBTSxFQUFFLENBQUM7TUFDWCxDQUFDO0lBQUE7RUFBQztBQUFBLENBQ0YsQ0FBQztBQUFDLElBQUFDLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxrQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBZkosSUFBQUUsTUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsWUFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksT0FBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUssWUFBQSxHQUFBTCxPQUFBO0FBQTZELElBQUFNLFdBQUEsR0FBQU4sT0FBQTtBQUFBLFNBQUFiLFlBQUE7RUFBQSxJQUFBb0IsUUFBQSxHQUFBUCxPQUFBO0lBQUFULElBQUEsR0FBQWdCLFFBQUEsQ0FBQWhCLElBQUE7RUFBQUosV0FBQSxZQUFBQSxZQUFBO0lBQUEsT0FBQUksSUFBQTtFQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBYzdEaUIsUUFBUSxDQUFDLDJDQUEyQyxFQUFFLFlBQU07RUFDMURDLEVBQUUsQ0FBQyx3RUFBd0UsTUFBQVIsa0JBQUEsQ0FBQVMsT0FBQSxFQUFFLGFBQVk7SUFDdkYsSUFBQUMsT0FBQSxHQUFrQyxJQUFBQyxtQkFBTSxFQUN0QyxJQUFBTixXQUFBLENBQUFPLEdBQUEsRUFBQ1IsWUFBQSxDQUFBUyxXQUFXO1FBQUFDLFFBQUEsRUFDUixJQUFBVCxXQUFBLENBQUFPLEdBQUEsRUFBQ1QsT0FBQSxDQUFBTSxPQUFHLElBQUU7TUFBQyxDQUNFLENBQ2YsQ0FBQztNQUpPTSxTQUFTLEdBQUFMLE9BQUEsQ0FBVEssU0FBUztNQUFFQyxVQUFVLEdBQUFOLE9BQUEsQ0FBVk0sVUFBVTtJQU83QkMsc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDSCxTQUFTLENBQUMsOEJBQThCLENBQUMsQ0FBQztJQUsxREUsc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDSCxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDeENFLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0gsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBSXhDRSxzQkFBUyxDQUFDQyxLQUFLLENBQUNILFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBRy9DLElBQU1JLGdCQUFnQixTQUFTSCxVQUFVLENBQUMseUJBQXlCLENBQUM7SUFDcEVJLE1BQU0sQ0FBQ0QsZ0JBQWdCLENBQUMsQ0FBQ0UsVUFBVSxDQUFDLENBQUM7SUFHckNKLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0gsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3hDLElBQU1PLE9BQU8sU0FBU04sVUFBVSxDQUFDLFlBQVksQ0FBQztJQUM5Q0ksTUFBTSxDQUFDRSxPQUFPLENBQUMsQ0FBQ0QsVUFBVSxDQUFDLENBQUM7RUFDOUIsQ0FBQyxFQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119