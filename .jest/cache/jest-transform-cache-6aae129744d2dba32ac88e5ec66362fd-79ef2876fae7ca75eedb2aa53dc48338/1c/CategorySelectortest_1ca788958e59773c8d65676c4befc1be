9de987c919efe5c7e4d1c0409892a2d8
var createMockAnimatedValue = function createMockAnimatedValue() {
  var initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  return {
    interpolate: jest.fn(function () {
      return {};
    }),
    setValue: jest.fn(),
    addListener: jest.fn(),
    removeListener: jest.fn(),
    removeAllListeners: jest.fn(),
    stopAnimation: jest.fn(),
    resetAnimation: jest.fn(),
    _value: initialValue,
    _offset: 0,
    _animation: null
  };
};
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  return Object.assign({}, RN, {
    Animated: Object.assign({}, RN.Animated, {
      Value: jest.fn(function (initialValue) {
        return createMockAnimatedValue(initialValue);
      }),
      timing: mockAnimatedTiming,
      View: function View(_ref) {
        var children = _ref.children,
          style = _ref.style,
          props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
        return (0, _jsxRuntime.jsx)(RN.View, Object.assign({
          style: style
        }, props, {
          children: children
        }));
      }
    }),
    View: RN.View,
    Text: RN.Text,
    TouchableOpacity: RN.TouchableOpacity,
    ScrollView: RN.ScrollView
  });
});
_getJestObj().mock('expo-linear-gradient', function () {
  var _require = require('react-native'),
    View = _require.View;
  return {
    LinearGradient: function LinearGradient(props) {
      return (0, _jsxRuntime.jsx)(View, Object.assign({}, props));
    }
  };
});
_getJestObj().mock('../../../src/components/exercise-common/CategorySelector/style', function () {
  var _require2 = require('react-native'),
    StyleSheet = _require2.StyleSheet;
  return function () {
    return StyleSheet.create({
      container: {},
      backgroundGradient: {},
      scrollView: {},
      scrollContent: {},
      categoryItemWrapper: {},
      categoryTouchable: {},
      selectedCategoryItem: {},
      selectedInner: {},
      selectedCategoryText: {},
      sparkleContainer: {},
      sparkle: {},
      categoryItem: {},
      categoryInner: {},
      categoryText: {}
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _CategorySelector = _interopRequireWildcard(require("../../../src/components/exercise-common/CategorySelector"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "style"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockStart = jest.fn();
var mockAnimatedTiming = jest.fn(function () {
  return {
    start: mockStart
  };
});
describe('CategorySelector', function () {
  var categories = [{
    id: '1',
    name: 'Grammar'
  }, {
    id: '2',
    name: 'Vocabulary'
  }, {
    id: '3',
    name: 'Reading'
  }];
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('should render all categories correctly with minimum props', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories
      })),
      getByText = _render.getByText;
    expect(getByText('Grammar')).toBeTruthy();
    expect(getByText('Vocabulary')).toBeTruthy();
    expect(getByText('Reading')).toBeTruthy();
  });
  it('should render nothing when the categories array is empty', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: []
      })),
      queryByText = _render2.queryByText;
    expect(queryByText('Grammar')).toBeNull();
  });
  it('should display the selected category with the sparkle emoji', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: function onSelectCategory() {}
      })),
      getByText = _render3.getByText;
    expect(getByText('âœ¨')).toBeTruthy();
  });
  it('should call onSelectCategory with the correct category id when a category is pressed', function () {
    var onSelectCategory = jest.fn();
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        onSelectCategory: onSelectCategory
      })),
      getByText = _render4.getByText;
    _reactNative.fireEvent.press(getByText('Vocabulary'));
    expect(onSelectCategory).toHaveBeenCalledWith('2');
  });
  it('should deselect the previous category when a new one is selected and trigger two animations', (0, _asyncToGenerator2.default)(function* () {
    var onSelectCategory = jest.fn();
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: onSelectCategory
      })),
      rerender = _render5.rerender;
    mockStart.mockClear();
    mockAnimatedTiming.mockClear();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "2",
        onSelectCategory: onSelectCategory
      }));
    }));
    expect(mockAnimatedTiming).toHaveBeenCalledTimes(2);
    expect(mockStart).toHaveBeenCalledTimes(2);
    var calls = mockAnimatedTiming.mock.calls;
    expect(calls[0][1]).toEqual(expect.objectContaining({
      toValue: 0,
      duration: 200,
      useNativeDriver: false
    }));
    expect(calls[1][1]).toEqual(expect.objectContaining({
      toValue: 1,
      duration: 300,
      useNativeDriver: false
    }));
  }));
  describe('areEqual', function () {
    it('should return true for identical props', function () {
      var props = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: [{
          id: '1',
          name: 'Cat1'
        }]
      };
      var result = (0, _CategorySelector.areEqual)(props, props);
      expect(result).toBe(true);
    });
    it('should return false when selectedCategory changes', function () {
      var prevProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: []
      };
      var nextProps = {
        selectedCategory: '2',
        primaryColor: '#000',
        categories: []
      };
      var result = (0, _CategorySelector.areEqual)(prevProps, nextProps);
      expect(result).toBe(false);
    });
    it('should return false when primaryColor changes', function () {
      var prevProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: []
      };
      var nextProps = {
        selectedCategory: '1',
        primaryColor: '#111',
        categories: []
      };
      var result = (0, _CategorySelector.areEqual)(prevProps, nextProps);
      expect(result).toBe(false);
    });
    it('should return false when categories array reference changes', function () {
      var prevProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: [{
          id: '1'
        }]
      };
      var nextProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: [{
          id: '1'
        }]
      };
      var result = (0, _CategorySelector.areEqual)(prevProps, nextProps);
      expect(result).toBe(false);
    });
    it('should return true when categories array reference is the same', function () {
      var categoriesList = [{
        id: '1',
        name: 'Cat1'
      }];
      var prevProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: categoriesList
      };
      var nextProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: categoriesList
      };
      var result = (0, _CategorySelector.areEqual)(prevProps, nextProps);
      expect(result).toBe(true);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,