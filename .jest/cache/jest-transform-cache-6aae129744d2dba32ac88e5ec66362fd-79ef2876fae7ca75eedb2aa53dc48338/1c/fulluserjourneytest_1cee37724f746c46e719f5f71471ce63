818950d1ff5f052e340f8ab2f385729b
_getJestObj().mock('expo-router', function () {
  return {
    useFocusEffect: jest.fn(function (callback) {
      return callback();
    }),
    router: {
      push: jest.fn(),
      back: jest.fn()
    },
    Stack: function Stack(_ref) {
      var children = _ref.children;
      return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
        children: children
      });
    },
    useLocalSearchParams: function useLocalSearchParams() {
      return {};
    },
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn(),
        canGoBack: jest.fn(function () {
          return true;
        }),
        addListener: jest.fn(),
        isFocused: jest.fn(function () {
          return true;
        })
      };
    }
  };
});
_getJestObj().mock('../../src/hooks/useLastActivity', function () {
  return {
    __esModule: true,
    default: function _default() {
      return {
        lastActivity: {
          type: 'vocabulary',
          level: '1',
          timestamp: Date.now()
        },
        updateLastActivity: jest.fn()
      };
    }
  };
});
_getJestObj().mock('../../src/hooks/useActivityMetrics', function () {
  return {
    __esModule: true,
    default: function _default() {
      return {
        metrics: {
          wordsToday: 1,
          exercisesCompleted: 2,
          streakDays: 3
        },
        updateMetrics: jest.fn()
      };
    }
  };
});
_getJestObj().mock('../../src/hooks/useRealTimeProgress', function () {
  return {
    __esModule: true,
    default: function _default() {
      return {
        getExerciseProgress: jest.fn(function () {
          return 0;
        }),
        hasProgress: jest.fn(function () {
          return false;
        }),
        refresh: jest.fn()
      };
    }
  };
});
_getJestObj().mock('../../src/hooks/useDashboardState', function () {
  return {
    __esModule: true,
    default: function _default() {
      return {
        isLoading: false,
        error: null,
        refresh: jest.fn()
      };
    }
  };
});
_getJestObj().mock('../../src/hooks/useDashboardLevel', function () {
  return {
    __esModule: true,
    default: function _default() {
      return {
        currentLevel: '1',
        setCurrentLevel: jest.fn()
      };
    }
  };
});
_getJestObj().mock('../../src/hooks/useDailyWords', function () {
  return {
    __esModule: true,
    default: function _default() {
      return {
        words: ['Hello', 'World'],
        isLoading: false,
        error: null
      };
    }
  };
});
_getJestObj().mock('../../src/screens/exercises/vocabulary/hooks/useVocabulary', function () {
  return {
    __esModule: true,
    default: function _default() {
      return {
        categoryIndex: 0,
        wordIndex: 0,
        showTranslation: false,
        completedWords: {},
        loaded: true,
        showDetailedProgress: false,
        currentWord: {
          word: 'Hello',
          translation: 'Bonjour',
          definition: 'Greeting',
          example: 'Hello world'
        },
        currentCategory: {
          title: 'Basic',
          words: []
        },
        totalCategories: 1,
        totalWordsInCategory: 15,
        changeCategory: jest.fn(),
        toggleTranslation: jest.fn(),
        toggleDetailedProgress: jest.fn(),
        handleNext: jest.fn(),
        handlePrevious: jest.fn(),
        canGoToPrevious: false,
        isLastWordInExercise: false,
        stats: {
          totalWords: 15,
          completedWordsCount: 0,
          totalProgress: 0,
          completedInCurrentCategory: 0,
          totalInCurrentCategory: 15
        },
        display: {
          wordCounter: '1 / 15',
          categories: ['Basic'],
          currentWord: {
            word: 'Hello',
            translation: 'Bonjour'
          },
          currentCategory: {
            title: 'Basic'
          }
        },
        saveData: jest.fn()
      };
    }
  };
});
_getJestObj().mock('../../src/contexts/ProgressContext', function () {
  return Object.assign({}, jest.requireActual('../../src/contexts/ProgressContext'), {
    useProgress: function useProgress() {
      return {
        updateProgress: mockUpdateProgress,
        progress: {
          overall: 0,
          levels: mockProgressData
        },
        isLoading: false
      };
    }
  });
});
_getJestObj().mock('../../src/screens/exercises/vocabulary/hooks/useVocabulary', function () {
  return mockUseVocabulary;
});
_getJestObj().mock('../../src/screens/Dashboard/hooks/useDashboardState', function () {
  return {
    useDashboardState: jest.fn(function () {
      return {
        showLevelProgress: false,
        setShowLevelProgress: jest.fn(),
        openLevelProgressModal: jest.fn(),
        closeLevelProgressModal: jest.fn(),
        refreshing: false,
        activeTab: "home",
        setActiveTab: jest.fn(),
        onRefresh: jest.fn().mockResolvedValue()
      };
    })
  };
});
_getJestObj().mock('../../src/hooks/useLastActivity', function () {
  return function () {
    return {
      lastActivity: null,
      isLoading: false,
      saveActivity: jest.fn(),
      clearActivity: jest.fn(),
      reload: jest.fn()
    };
  };
});
_getJestObj().mock('../../src/hooks/useActivityMetrics', function () {
  return function () {
    return {
      currentStreak: 5,
      wordsToday: 0,
      timeToday: 0,
      isLoading: false
    };
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _expoRouter = require("expo-router");
var _Dashboard = _interopRequireDefault(require("../../src/screens/Dashboard"));
var _LevelSelection = _interopRequireDefault(require("../../src/screens/LevelSelection"));
var _ExerciseSelection = _interopRequireDefault(require("../../src/screens/ExerciseSelection"));
var _vocabulary = _interopRequireDefault(require("../../src/screens/exercises/vocabulary"));
var _ThemeContext = require("../../src/contexts/ThemeContext");
var _CurrentLevelContext = require("../../src/contexts/CurrentLevelContext");
var _ProgressContext = require("../../src/contexts/ProgressContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockUpdateProgress = jest.fn();
var mockProgressData = {};
var mockUseVocabulary = jest.fn();
var TestWrapper = function TestWrapper(_ref2) {
  var children = _ref2.children;
  return (0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
    children: (0, _jsxRuntime.jsx)(_CurrentLevelContext.CurrentLevelProvider, {
      children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
        children: children
      })
    })
  });
};
describe('Parcours utilisateur complet - Navigation et progression', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockProgressData = {};
    mockUseVocabulary.mockReturnValue({
      loaded: true,
      currentWord: {
        word: 'Hello',
        translation: 'Bonjour',
        example: 'Hello, how are you?'
      },
      wordIndex: 0,
      display: {
        wordCounter: '1 / 15',
        categories: ['Basics']
      },
      isLastWordInExercise: false,
      handleNext: jest.fn().mockReturnValue({
        completed: false
      }),
      saveData: jest.fn().mockResolvedValue(undefined),
      toggleTranslation: jest.fn()
    });
  });
  afterEach(function () {
    (0, _reactNative.cleanup)();
  });
  describe('Sc√©nario 1: Parcours complet Dashboard ‚Üí Level ‚Üí Exercise ‚Üí Vocabulary', function () {
    test('Navigation compl√®te entre tous les √©crans avec progression', (0, _asyncToGenerator2.default)(function* () {
      var dashboardResult = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
        children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
      }));
      expect(dashboardResult.getByText('‚ö° Actions rapides')).toBeTruthy();
      expect(dashboardResult.getByText('üèÜ Progression g√©n√©rale')).toBeTruthy();
      var startButton = dashboardResult.getByTestId('level-selection-button');
      _reactNative.fireEvent.press(startButton);
      dashboardResult.unmount();
      var levelSelectionResult = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
        children: (0, _jsxRuntime.jsx)(_LevelSelection.default, {})
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(levelSelectionResult.getByText('Niveaux')).toBeTruthy();
        expect(levelSelectionResult.getByTestId('level-1')).toBeTruthy();
      });
      var level1Card = levelSelectionResult.getByTestId('level-1');
      expect((0, _reactNative.within)(level1Card).getByText('0%')).toBeTruthy();
      _reactNative.fireEvent.press(level1Card);
      levelSelectionResult.unmount();
      var exerciseSelectionResult = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
        children: (0, _jsxRuntime.jsx)(_ExerciseSelection.default, {
          level: "1"
        })
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(exerciseSelectionResult.getByTestId('vocabulary-button')).toBeTruthy();
      });
      var vocabularyButton = exerciseSelectionResult.getByTestId('vocabulary-button');
      _reactNative.fireEvent.press(vocabularyButton);
      exerciseSelectionResult.unmount();
      var vocabularyResult = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
        children: (0, _jsxRuntime.jsx)(_vocabulary.default, {
          route: {
            params: {
              level: '1',
              mode: 'classic'
            }
          }
        })
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(vocabularyResult.getByText('Hello')).toBeTruthy();
        expect(vocabularyResult.getByText('1 / 15')).toBeTruthy();
      });
      var nextButton = vocabularyResult.getByText('Suivant');
      _reactNative.fireEvent.press(nextButton);
      expect(mockUpdateProgress).toHaveBeenCalledWith('1', 'vocabulary', expect.any(Number));
      mockProgressData['1'] = {
        levelProgress: 7,
        vocabulary: 7
      };
      vocabularyResult.unmount();
      var exerciseSelectionResult2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
        children: (0, _jsxRuntime.jsx)(_ExerciseSelection.default, {
          level: "1"
        })
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(exerciseSelectionResult2.getByTestId('exercises-scroll')).toBeTruthy();
      });
      exerciseSelectionResult2.unmount();
      var levelSelectionResult2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
        children: (0, _jsxRuntime.jsx)(_LevelSelection.default, {})
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(levelSelectionResult2.getByTestId('level-selection-container')).toBeTruthy();
      });
      levelSelectionResult2.unmount();
      var dashboardResult2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
        children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(dashboardResult2.getByText('üèÜ Progression g√©n√©rale')).toBeTruthy();
      });
      dashboardResult2.unmount();
    }));
  });
  describe('Sc√©nario 2: Gestion des erreurs et cas limites', function () {
    test('Gestion de la navigation avec donn√©es manquantes', (0, _asyncToGenerator2.default)(function* () {
      mockProgressData['1'] = {
        levelProgress: null,
        vocabulary: undefined
      };
      var result = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
        children: (0, _jsxRuntime.jsx)(_LevelSelection.default, {})
      }));
      yield (0, _reactNative.waitFor)(function () {
        var level1Card = result.getByTestId('level-1');
        expect((0, _reactNative.within)(level1Card).getByText('0%')).toBeTruthy();
      });
      result.unmount();
    }));
    test('Navigation avec exercice en cours', (0, _asyncToGenerator2.default)(function* () {
      mockProgressData['1'] = {
        levelProgress: 45,
        vocabulary: 45
      };
      var result = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
        children: (0, _jsxRuntime.jsx)(_LevelSelection.default, {})
      }));
      yield (0, _reactNative.waitFor)(function () {
        var level1Card = result.getByTestId('level-1');
        expect((0, _reactNative.within)(level1Card).getByTestId('level-1-button')).toBeTruthy();
        expect((0, _reactNative.within)(level1Card).getByText('Continuer')).toBeTruthy();
      });
      result.unmount();
    }));
  });
  describe('Sc√©nario 3: Coh√©rence des donn√©es entre √©crans', function () {
    test('Synchronisation des m√©triques entre Dashboard et Level Selection', (0, _asyncToGenerator2.default)(function* () {
      mockProgressData['1'] = {
        levelProgress: 25,
        vocabulary: 25
      };
      var dashboardResult = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
        children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(dashboardResult.getByText('üèÜ Progression g√©n√©rale')).toBeTruthy();
      });
      dashboardResult.unmount();
      var levelResult = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
        children: (0, _jsxRuntime.jsx)(_LevelSelection.default, {})
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(levelResult.getByTestId('level-selection-container')).toBeTruthy();
      });
      levelResult.unmount();
      mockProgressData['1'] = {
        levelProgress: 50,
        vocabulary: 50
      };
      var dashboardResult2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
        children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(dashboardResult2.getByText('üèÜ Progression g√©n√©rale')).toBeTruthy();
      });
      dashboardResult2.unmount();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,