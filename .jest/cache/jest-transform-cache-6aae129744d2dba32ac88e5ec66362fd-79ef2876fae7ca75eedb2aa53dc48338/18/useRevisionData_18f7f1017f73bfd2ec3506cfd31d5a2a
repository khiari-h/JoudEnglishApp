500cfae549365c47a2d7578cc1fc44c6
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = require("react");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _vocabularyDataHelper = require("../utils/vocabulary/vocabularyDataHelper");
var _arrayUtils = require("../utils/arrayUtils");
var processWordRef = function processWordRef(wordRef, category) {
  var wordIndex;
  var timestamp = Date.now();
  if (typeof wordRef === 'object' && wordRef.wordIndex !== undefined) {
    wordIndex = wordRef.wordIndex;
    timestamp = wordRef.timestamp || timestamp;
  } else if (typeof wordRef === 'number') {
    wordIndex = wordRef;
  } else if (typeof wordRef === 'string') {
    var foundIndex = category.words.findIndex(function (w) {
      return w.word === wordRef;
    });
    if (foundIndex !== -1) wordIndex = foundIndex;
  }
  return {
    wordIndex: wordIndex,
    timestamp: timestamp
  };
};
var processCategoryWords = function processCategoryWords(wordRefs, categoryIndex, originalData, levelKey, mode, learnedWords) {
  if (!Array.isArray(wordRefs) || wordRefs.length === 0) return;
  var catIndex = parseInt(categoryIndex);
  var category = originalData.exercises[catIndex];
  if (!(category != null && category.words)) return;
  wordRefs.forEach(function (wordRef) {
    var _processWordRef = processWordRef(wordRef, category),
      wordIndex = _processWordRef.wordIndex,
      timestamp = _processWordRef.timestamp;
    if (wordIndex !== undefined && category.words[wordIndex]) {
      var realWord = category.words[wordIndex];
      var learnedWord = createLearnedWord(realWord, levelKey, mode, catIndex, wordIndex, timestamp);
      learnedWords.push(learnedWord);
    }
  });
};
var createLearnedWord = function createLearnedWord(realWord, levelKey, mode, catIndex, wordIndex, timestamp) {
  return {
    word: realWord.word,
    translation: realWord.translation,
    definition: realWord.definition || '',
    example: realWord.example || '',
    fromLevel: levelKey,
    fromMode: mode,
    categoryIndex: catIndex,
    wordIndex: wordIndex,
    timestamp: timestamp,
    uniqueId: `${levelKey}_${mode}_${catIndex}_${wordIndex}`
  };
};
var loadLevelData = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (levelKey, mode, learnedWords) {
    var storageKey = `vocabulary_${levelKey}_${mode}`;
    try {
      var stored = yield _asyncStorage.default.getItem(storageKey);
      if (!stored) return;
      var data = JSON.parse(stored);
      var completedWordsRefs = data.completedWords || {};
      if (Object.keys(completedWordsRefs).length === 0) return;
      var originalData = (0, _vocabularyDataHelper.getVocabularyData)(levelKey, mode);
      if (!(originalData != null && originalData.exercises)) return;
      Object.entries(completedWordsRefs).forEach(function (_ref2) {
        var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
          categoryIndex = _ref3[0],
          wordRefs = _ref3[1];
        processCategoryWords(wordRefs, categoryIndex, originalData, levelKey, mode, learnedWords);
      });
    } catch (storageError) {
      console.error(`❌ Erreur traitement ${storageKey}:`, storageError);
    }
  });
  return function loadLevelData(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
var generateQuestionChoices = function generateQuestionChoices(word, allLearnedWords) {
  var otherWords = allLearnedWords.filter(function (w) {
    return w.uniqueId !== word.uniqueId;
  });
  var wrongAnswers = (0, _arrayUtils.shuffleAndTake)(otherWords, 3).map(function (w) {
    return w.translation;
  });
  if (wrongAnswers.length < 3) {
    var _fallbackData$exercis;
    var fallbackData = (0, _vocabularyDataHelper.getVocabularyData)('1', 'classic');
    if (fallbackData != null && (_fallbackData$exercis = fallbackData.exercises) != null && (_fallbackData$exercis = _fallbackData$exercis[0]) != null && _fallbackData$exercis.words) {
      var needed = 3 - wrongAnswers.length;
      var randomFallback = (0, _arrayUtils.shuffleAndTake)(fallbackData.exercises[0].words.filter(function (w) {
        return !wrongAnswers.includes(w.translation) && w.translation !== word.translation;
      }), needed).map(function (w) {
        return w.translation;
      });
      wrongAnswers = [].concat((0, _toConsumableArray2.default)(wrongAnswers), (0, _toConsumableArray2.default)(randomFallback));
    }
  }
  var choices = (0, _arrayUtils.shuffleArray)([word.translation].concat((0, _toConsumableArray2.default)(wrongAnswers.slice(0, 3))));
  return choices;
};
var calculateStats = function calculateStats(allLearnedWords, revisionQuestions) {
  var totalLearned = allLearnedWords.length;
  var byLevel = {};
  var byMode = {};
  allLearnedWords.forEach(function (word) {
    byLevel[word.fromLevel] = (byLevel[word.fromLevel] || 0) + 1;
    byMode[word.fromMode] = (byMode[word.fromMode] || 0) + 1;
  });
  return {
    totalLearned: totalLearned,
    byLevel: byLevel,
    byMode: byMode,
    questionsGenerated: revisionQuestions.length
  };
};
var useRevisionData = function useRevisionData() {
  var level = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "mixed";
  var questionsCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    allLearnedWords = _useState2[0],
    setAllLearnedWords = _useState2[1];
  var _useState3 = (0, _react.useState)(true),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isLoading = _useState4[0],
    setIsLoading = _useState4[1];
  var _useState5 = (0, _react.useState)(null),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    error = _useState6[0],
    setError = _useState6[1];
  var removeDuplicates = function removeDuplicates(words) {
    return words.filter(function (word, index, self) {
      return index === self.findIndex(function (w) {
        return w.uniqueId === word.uniqueId;
      });
    });
  };
  var generateRevisionQuestions = function generateRevisionQuestions(words, count) {
    if (words.length === 0) return [];
    var shuffledWords = (0, _arrayUtils.shuffleArray)(words);
    var selectedWords = shuffledWords.slice(0, Math.min(count, words.length));
    return selectedWords.map(function (word) {
      var choices = generateQuestionChoices(word, words);
      return Object.assign({}, word, {
        choices: choices,
        correctAnswer: word.translation
      });
    });
  };
  var loadLearnedWords = function () {
    var _ref4 = (0, _asyncToGenerator2.default)(function* () {
      try {
        setIsLoading(true);
        setError(null);
        var learnedWords = [];
        var levels = level === "mixed" ? ['1', '2', '3', '4', '5', '6', 'bonus'] : [level];
        var modes = ['classic', 'fast'];
        for (var levelKey of levels) {
          for (var mode of modes) {
            yield loadLevelData(levelKey, mode, learnedWords);
          }
        }
        var uniqueWords = removeDuplicates(learnedWords);
        setAllLearnedWords(uniqueWords);
      } catch (mainError) {
        console.error('❌ Erreur générale useRevisionData:', mainError);
        setError(mainError.message);
        setAllLearnedWords([]);
      } finally {
        setIsLoading(false);
      }
    });
    return function loadLearnedWords() {
      return _ref4.apply(this, arguments);
    };
  }();
  (0, _react.useEffect)(function () {
    loadLearnedWords();
  }, [level]);
  var revisionQuestions = (0, _react.useMemo)(function () {
    return generateRevisionQuestions(allLearnedWords, questionsCount);
  }, [allLearnedWords, questionsCount]);
  var stats = (0, _react.useMemo)(function () {
    return calculateStats(allLearnedWords, revisionQuestions);
  }, [allLearnedWords, revisionQuestions]);
  return {
    allLearnedWords: allLearnedWords,
    revisionQuestions: revisionQuestions,
    isLoading: isLoading,
    error: error,
    stats: stats,
    hasEnoughWords: allLearnedWords.length > 0,
    canGenerateQuestions: revisionQuestions.length > 0
  };
};
var _default = exports.default = useRevisionData;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,