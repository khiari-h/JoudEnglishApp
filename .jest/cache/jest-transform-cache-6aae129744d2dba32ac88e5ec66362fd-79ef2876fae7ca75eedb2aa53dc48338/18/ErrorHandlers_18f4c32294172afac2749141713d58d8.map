{"version":3,"names":["_ExceptionsManager","require","onUncaughtError","errorValue","errorInfo","error","Error","SyntheticError","componentStack","isComponentError","_unused","handleException","onCaughtError","_unused2","onRecoverableError","_unused3","console","warn"],"sources":["ErrorHandlers.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\nimport type {ExtendedError} from '../../../../Libraries/Core/ExtendedError';\n\nimport {\n  SyntheticError,\n  handleException,\n} from '../../../../Libraries/Core/ExceptionsManager';\n\ntype ErrorInfo = {\n  +componentStack?: ?string,\n  // $FlowFixMe[unclear-type] unknown props and state.\n  +errorBoundary?: ?React$Component<any, any>,\n};\n\nexport function onUncaughtError(errorValue: mixed, errorInfo: ErrorInfo): void {\n  let error;\n\n  // Typically, `errorValue` should be an error. However, other values such as\n  // strings (or even null) are sometimes thrown.\n  if (errorValue instanceof Error) {\n    /* $FlowFixMe[class-object-subtyping] added when improving typing for\n     * this parameters */\n    // $FlowFixMe[incompatible-cast]\n    error = (errorValue: ExtendedError);\n  } else if (typeof errorValue === 'string') {\n    /* $FlowFixMe[class-object-subtyping] added when improving typing for\n     * this parameters */\n    // $FlowFixMe[incompatible-cast]\n    error = (new SyntheticError(errorValue): ExtendedError);\n  } else {\n    /* $FlowFixMe[class-object-subtyping] added when improving typing for\n     * this parameters */\n    // $FlowFixMe[incompatible-cast]\n    error = (new SyntheticError('Unspecified error'): ExtendedError);\n  }\n  try {\n    // $FlowFixMe[incompatible-use] this is in try/catch.\n    error.componentStack = errorInfo.componentStack;\n    error.isComponentError = true;\n  } catch {\n    // Ignored.\n  }\n\n  // Uncaught errors are fatal.\n  handleException(error, true);\n}\n\nexport function onCaughtError(errorValue: mixed, errorInfo: ErrorInfo): void {\n  let error;\n\n  // Typically, `errorValue` should be an error. However, other values such as\n  // strings (or even null) are sometimes thrown.\n  if (errorValue instanceof Error) {\n    /* $FlowFixMe[class-object-subtyping] added when improving typing for\n     * this parameters */\n    // $FlowFixMe[incompatible-cast]\n    error = (errorValue: ExtendedError);\n  } else if (typeof errorValue === 'string') {\n    /* $FlowFixMe[class-object-subtyping] added when improving typing for\n     * this parameters */\n    // $FlowFixMe[incompatible-cast]\n    error = (new SyntheticError(errorValue): ExtendedError);\n  } else {\n    /* $FlowFixMe[class-object-subtyping] added when improving typing for\n     * this parameters */\n    // $FlowFixMe[incompatible-cast]\n    error = (new SyntheticError('Unspecified error'): ExtendedError);\n  }\n  try {\n    // $FlowFixMe[incompatible-use] this is in try/catch.\n    error.componentStack = errorInfo.componentStack;\n    error.isComponentError = true;\n  } catch {\n    // Ignored.\n  }\n\n  // Caught errors are not fatal.\n  handleException(error, false);\n}\n\nexport function onRecoverableError(\n  errorValue: mixed,\n  errorInfo: ErrorInfo,\n): void {\n  let error;\n\n  // Typically, `errorValue` should be an error. However, other values such as\n  // strings (or even null) are sometimes thrown.\n  if (errorValue instanceof Error) {\n    /* $FlowFixMe[class-object-subtyping] added when improving typing for\n     * this parameters */\n    // $FlowFixMe[incompatible-cast]\n    error = (errorValue: ExtendedError);\n  } else if (typeof errorValue === 'string') {\n    /* $FlowFixMe[class-object-subtyping] added when improving typing for\n     * this parameters */\n    // $FlowFixMe[incompatible-cast]\n    error = (new SyntheticError(errorValue): ExtendedError);\n  } else {\n    /* $FlowFixMe[class-object-subtyping] added when improving typing for\n     * this parameters */\n    // $FlowFixMe[incompatible-cast]\n    error = (new SyntheticError('Unspecified error'): ExtendedError);\n  }\n  try {\n    // $FlowFixMe[incompatible-use] this is in try/catch.\n    error.componentStack = errorInfo.componentStack;\n    error.isComponentError = true;\n  } catch {\n    // Ignored.\n  }\n\n  // Recoverable errors should only be warnings.\n  // This will make it a soft error in LogBox.\n  // TODO: improve the logging for recoverable errors in prod.\n  console.warn(error);\n}\n"],"mappings":";;;;;;AAYA,IAAAA,kBAAA,GAAAC,OAAA;AAWO,SAASC,eAAeA,CAACC,UAAiB,EAAEC,SAAoB,EAAQ;EAC7E,IAAIC,KAAK;EAIT,IAAIF,UAAU,YAAYG,KAAK,EAAE;IAI/BD,KAAK,GAAIF,UAA0B;EACrC,CAAC,MAAM,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;IAIzCE,KAAK,GAAI,IAAIE,iCAAc,CAACJ,UAAU,CAAiB;EACzD,CAAC,MAAM;IAILE,KAAK,GAAI,IAAIE,iCAAc,CAAC,mBAAmB,CAAiB;EAClE;EACA,IAAI;IAEFF,KAAK,CAACG,cAAc,GAAGJ,SAAS,CAACI,cAAc;IAC/CH,KAAK,CAACI,gBAAgB,GAAG,IAAI;EAC/B,CAAC,CAAC,OAAAC,OAAA,EAAM,CAER;EAGA,IAAAC,kCAAe,EAACN,KAAK,EAAE,IAAI,CAAC;AAC9B;AAEO,SAASO,aAAaA,CAACT,UAAiB,EAAEC,SAAoB,EAAQ;EAC3E,IAAIC,KAAK;EAIT,IAAIF,UAAU,YAAYG,KAAK,EAAE;IAI/BD,KAAK,GAAIF,UAA0B;EACrC,CAAC,MAAM,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;IAIzCE,KAAK,GAAI,IAAIE,iCAAc,CAACJ,UAAU,CAAiB;EACzD,CAAC,MAAM;IAILE,KAAK,GAAI,IAAIE,iCAAc,CAAC,mBAAmB,CAAiB;EAClE;EACA,IAAI;IAEFF,KAAK,CAACG,cAAc,GAAGJ,SAAS,CAACI,cAAc;IAC/CH,KAAK,CAACI,gBAAgB,GAAG,IAAI;EAC/B,CAAC,CAAC,OAAAI,QAAA,EAAM,CAER;EAGA,IAAAF,kCAAe,EAACN,KAAK,EAAE,KAAK,CAAC;AAC/B;AAEO,SAASS,kBAAkBA,CAChCX,UAAiB,EACjBC,SAAoB,EACd;EACN,IAAIC,KAAK;EAIT,IAAIF,UAAU,YAAYG,KAAK,EAAE;IAI/BD,KAAK,GAAIF,UAA0B;EACrC,CAAC,MAAM,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;IAIzCE,KAAK,GAAI,IAAIE,iCAAc,CAACJ,UAAU,CAAiB;EACzD,CAAC,MAAM;IAILE,KAAK,GAAI,IAAIE,iCAAc,CAAC,mBAAmB,CAAiB;EAClE;EACA,IAAI;IAEFF,KAAK,CAACG,cAAc,GAAGJ,SAAS,CAACI,cAAc;IAC/CH,KAAK,CAACI,gBAAgB,GAAG,IAAI;EAC/B,CAAC,CAAC,OAAAM,QAAA,EAAM,CAER;EAKAC,OAAO,CAACC,IAAI,CAACZ,KAAK,CAAC;AACrB","ignoreList":[]}