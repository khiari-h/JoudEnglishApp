{"version":3,"names":["_getJestObj","mock","useFocusEffect","jest","fn","router","push","back","Stack","_ref","children","_jsxRuntime","jsx","Fragment","useLocalSearchParams","useNavigation","navigate","goBack","canGoBack","addListener","isFocused","useCurrentLevel","mockUseCurrentLevel","__esModule","default","vocabularyData","level","mode","loaded","first","exercises","title","words","categoryIndex","wordIndex","showTranslation","completedWords","showDetailedProgress","currentWord","currentCategory","changeCategory","toggleTranslation","toggleDetailedProgress","handleNext","mockReturnValue","completed","handlePrevious","canGoToPrevious","isLastWordInExercise","display","wordCounter","categories","map","ex","saveData","isBonusLevel","getLevelColor","getVocabularyData","undefined","word","translation","example","loadVocabularyData","_ref2","_asyncToGenerator2","mod","module","exports","_x","_x2","apply","arguments","_ref3","_x3","_x4","saveActivity","_interopRequireDefault","require","_react","_reactNative","_ExerciseSelection","_vocabulary","_require","MOCK_LANGUAGE_LEVELS","color","describe","beforeEach","clearAllMocks","test","currentLevel","_render","render","queryByText","getByText","toJSON","waitFor","expect","toBeNull","_render2","_render3","route","params","getByTestId","toBeTruthy","_render4","_render5","_render6","_render7","queryByTestId","_render8","_render9","_render0"],"sources":["robustesse-navigation.test.js"],"sourcesContent":["import React from 'react';\nimport { render, waitFor } from '@testing-library/react-native';\n\n// Screens to test\nimport ExerciseSelection from '../../src/screens/ExerciseSelection';\nimport VocabularyExercise from '../../src/screens/exercises/vocabulary';\n\n// Mock expo-router\njest.mock('expo-router', () => ({\n  useFocusEffect: jest.fn(() => {}),\n  router: {\n    push: jest.fn(),\n    back: jest.fn(),\n  },\n  Stack: ({ children }) => <>{children}</>,\n  useLocalSearchParams: () => ({}),\n  useNavigation: () => ({\n    navigate: jest.fn(),\n    goBack: jest.fn(),\n    canGoBack: jest.fn(() => true),\n    addListener: jest.fn(),\n    isFocused: jest.fn(() => true),\n  }),\n}));\n\n// Mock useCurrentLevel with different scenarios\nconst mockUseCurrentLevel = jest.fn();\njest.mock('../../src/contexts/CurrentLevelContext', () => ({\n  useCurrentLevel: mockUseCurrentLevel,\n}));\n\n// Mock useVocabulary hook\njest.mock('../../src/screens/exercises/vocabulary/hooks/useVocabulary', () => ({\n  __esModule: true,\n  default: jest.fn((vocabularyData, level, mode) => {\n    if (!vocabularyData) {\n      return { loaded: false };\n    }\n    const first = (vocabularyData.exercises && vocabularyData.exercises[0]) || { title: '', words: [] };\n    return {\n      categoryIndex: 0,\n      wordIndex: 0,\n      showTranslation: false,\n      completedWords: {},\n      loaded: true,\n      showDetailedProgress: false,\n      currentWord: first.words[0] || null,\n      currentCategory: first,\n      changeCategory: jest.fn(),\n      toggleTranslation: jest.fn(),\n      toggleDetailedProgress: jest.fn(),\n      handleNext: jest.fn().mockReturnValue({ completed: true }),\n      handlePrevious: jest.fn(),\n      canGoToPrevious: false,\n      isLastWordInExercise: true,\n      display: {\n        wordCounter: '1 / 1',\n        categories: (vocabularyData.exercises || []).map(ex => ex.title),\n      },\n      saveData: jest.fn(),\n    };\n  }),\n}));\n\n// Mock vocabularyDataHelper\njest.mock('../../src/utils/vocabulary/vocabularyDataHelper', () => ({\n  isBonusLevel: jest.fn(() => false),\n  getLevelColor: jest.fn((level) => {\n    if (!level) return 'gray'; // Default color for missing level\n    return 'blue';\n  }),\n  getVocabularyData: jest.fn((level, mode) => {\n    // Return null for invalid/missing levels\n    if (!level || level === 'invalid' || level === undefined) {\n      return null;\n    }\n    \n    if (level === 'A1' || level === '1') {\n      return {\n        exercises: [{\n          title: 'Identité & informations personnelles',\n          words: [{ word: 'name', translation: 'nom', example: 'My name is Sarah.' }],\n        }],\n      };\n    }\n    \n    return null; // For any other level\n  }),\n  loadVocabularyData: jest.fn(async (level, mode) => {\n    const mod = (module.exports && module.exports.getVocabularyData)\n      ? module.exports.getVocabularyData\n      : (() => null);\n    return mod(level, mode);\n  }),\n  loadVocabularyData: jest.fn(async (level, mode) => {\n    if (!level || level === 'invalid' || level === undefined) {\n      return null;\n    }\n    if (level === 'A1' || level === '1') {\n      return {\n        exercises: [{\n          title: 'Identité & informations personnelles',\n          words: [{ word: 'name', translation: 'nom', example: 'My name is Sarah.' }],\n        }],\n      };\n    }\n    return null;\n  }),\n}));\n\n// Mock other hooks\njest.mock('../../src/hooks/useLastActivity', () => jest.fn(() => ({\n  saveActivity: jest.fn(),\n})));\n\n// Mock constants pour les niveaux de langue\nconst MOCK_LANGUAGE_LEVELS = {\n  1: { title: 'Niveau Débutant A1', color: 'blue' },\n  2: { title: 'Niveau Élémentaire A2', color: 'green' },\n  3: { title: 'Niveau Intermédiaire B1', color: 'orange' },\n};\n\ndescribe('Test d\\'intégration: Robustesse de la navigation', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('ExerciseSelection - Gestion des niveaux manquants', () => {\n    test('Affiche un état contrôlé quand aucun niveau n\\'est fourni', async () => {\n      // Mock: pas de niveau courant\n      mockUseCurrentLevel.mockReturnValue({\n        currentLevel: undefined,\n      });\n\n      const { queryByText, getByText, toJSON } = render(<ExerciseSelection />);\n\n      await waitFor(() => {\n        // Vérifier que le composant ne rend rien (retourne null)\n        expect(toJSON()).toBeNull();\n      });\n    });\n\n    test('Affiche un état contrôlé avec un niveau invalide', async () => {\n      mockUseCurrentLevel.mockReturnValue({\n        currentLevel: 'invalid_level',\n      });\n\n      const { queryByText } = render(<ExerciseSelection />);\n\n      await waitFor(() => {\n        // Ne doit pas afficher d'exercices valides\n        expect(queryByText('name')).toBeNull();\n        expect(queryByText('rhetoric')).toBeNull();\n      });\n    });\n\n\n  });\n\n  describe('VocabularyExercise - Gestion des paramètres manquants', () => {\n    test('Affiche un indicateur de chargement sans paramètre de niveau', async () => {\n      const { getByTestId, queryByText } = render(\n        <VocabularyExercise route={{ params: {} }} />\n      );\n\n      await waitFor(() => {\n        // Vérifier que l'indicateur de chargement est affiché\n        expect(getByTestId('activity-indicator')).toBeTruthy();\n        \n        // Vérifier qu'aucun contenu d'exercice n'est affiché\n        expect(queryByText('name')).toBeNull();\n        expect(queryByText('rhetoric')).toBeNull();\n      });\n    });\n\n    test('Affiche un indicateur de chargement avec un niveau undefined', async () => {\n      const { getByTestId, queryByText } = render(\n        <VocabularyExercise route={{ params: { level: undefined, mode: 'classic' } }} />\n      );\n\n      await waitFor(() => {\n        expect(getByTestId('activity-indicator')).toBeTruthy();\n        expect(queryByText('name')).toBeNull();\n      });\n    });\n\n    test('Affiche un indicateur de chargement avec un niveau invalide', async () => {\n      const { getByTestId, queryByText } = render(\n        <VocabularyExercise route={{ params: { level: 'invalid_level', mode: 'classic' } }} />\n      );\n\n      await waitFor(() => {\n        expect(getByTestId('activity-indicator')).toBeTruthy();\n        expect(queryByText('name')).toBeNull();\n        expect(queryByText('rhetoric')).toBeNull();\n      });\n    });\n\n\n    test('Gère correctement les paramètres de route malformés', async () => {\n      // Test avec des paramètres complètement absents\n      const { getByTestId } = render(\n        <VocabularyExercise route={{}} />\n      );\n\n      await waitFor(() => {\n        expect(getByTestId('activity-indicator')).toBeTruthy();\n      });\n    });\n\n    test('Fonctionne correctement avec des paramètres valides', async () => {\n      const { getByText, queryByTestId } = render(\n        <VocabularyExercise route={{ params: { level: '1', mode: 'classic' } }} />\n      );\n\n      await waitFor(() => {\n        // Avec des paramètres valides, le contenu doit s'afficher\n   expect(getByText('name')).toBeTruthy();\n    expect(getByText('My name is Sarah.')).toBeTruthy();\n        \n        // Plus d'indicateur de chargement\n        expect(queryByTestId('activity-indicator')).toBeNull();\n      });\n    });\n  });\n\n  describe('Cas limites et edge cases', () => {\n    test('Gère les valeurs null dans les paramètres', async () => {\n      const { getByTestId } = render(\n        <VocabularyExercise route={{ params: { level: null, mode: null } }} />\n      );\n\n      await waitFor(() => {\n        expect(getByTestId('activity-indicator')).toBeTruthy();\n      });\n    });\n\n    test('Gère les chaînes vides dans les paramètres', async () => {\n      const { getByTestId } = render(\n        <VocabularyExercise route={{ params: { level: '', mode: '' } }} />\n      );\n\n      await waitFor(() => {\n        expect(getByTestId('activity-indicator')).toBeTruthy();\n      });\n    });\n\n    test('Gère les types de données inattendus', async () => {\n      const { getByTestId } = render(\n        <VocabularyExercise route={{ params: { level: 123, mode: {} } }} />\n      );\n\n      await waitFor(() => {\n        expect(getByTestId('activity-indicator')).toBeTruthy();\n      });\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}