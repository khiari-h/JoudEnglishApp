70124355eaee051fb161b013a03832d1
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _vectorIcons = require("@expo/vector-icons");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _ThemeContext = require("../../../../../contexts/ThemeContext");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var PopupHeader = function PopupHeader(_ref) {
  var colors = _ref.colors,
    totalWordsLearned = _ref.totalWordsLearned,
    localStyles = _ref.localStyles;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: localStyles.header,
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: localStyles.celebration,
      children: "\uD83C\uDFC6"
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [localStyles.mainTitle, {
        color: colors.text
      }],
      children: "Pr\xEAt pour une r\xE9vision ?"
    }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
      style: [localStyles.wordsCounter, {
        color: colors.textSecondary
      }],
      children: ["Vous avez appris ", totalWordsLearned, " mots !"]
    })]
  });
};
var OPACITY_LEVELS = {
  normal: '20',
  primary: '30',
  primaryBorder: '40'
};
var UniformChoice = _react.default.memo(function (_ref2) {
  var choice = _ref2.choice,
    onPress = _ref2.onPress,
    localStyles = _ref2.localStyles,
    _ref2$isPrimary = _ref2.isPrimary,
    isPrimary = _ref2$isPrimary === void 0 ? false : _ref2$isPrimary;
  var primarySubtitleStyle = _react.default.useMemo(function () {
    return {
      color: '#047857',
      fontWeight: '600'
    };
  }, []);
  return (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
    style: [localStyles.choiceButton, isPrimary && localStyles.primaryChoiceModifier],
    onPress: onPress,
    activeOpacity: 0.7,
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [localStyles.choiceIconContainer, {
        backgroundColor: choice.color + OPACITY_LEVELS.normal
      }, isPrimary && {
        backgroundColor: choice.color + OPACITY_LEVELS.primary,
        borderWidth: 1,
        borderColor: choice.color + OPACITY_LEVELS.primaryBorder
      }],
      children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
        name: choice.iconName,
        size: isPrimary ? 22 : 20,
        color: choice.color
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: localStyles.choiceTextContainer,
      children: [(0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: [localStyles.choiceLabel, isPrimary && localStyles.primaryChoiceLabel],
        children: [choice.label, isPrimary && ' ⚡']
      }), choice.subtitle && (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [localStyles.choiceSubtitle, isPrimary && primarySubtitleStyle],
        children: choice.subtitle
      })]
    })]
  });
});
var RevisionPopup = function RevisionPopup(_ref3) {
  var _ref3$visible = _ref3.visible,
    visible = _ref3$visible === void 0 ? false : _ref3$visible,
    _ref3$totalWordsLearn = _ref3.totalWordsLearned,
    totalWordsLearned = _ref3$totalWordsLearn === void 0 ? 50 : _ref3$totalWordsLearn,
    _ref3$questionsCount = _ref3.questionsCount,
    questionsCount = _ref3$questionsCount === void 0 ? 10 : _ref3$questionsCount,
    onChoice = _ref3.onChoice,
    onDismiss = _ref3.onDismiss;
  var themeContext = (0, _react.useContext)(_ThemeContext.ThemeContext);
  var colors = (themeContext == null ? void 0 : themeContext.colors) || {
    surface: "#FFFFFF",
    text: "#1F2937",
    textSecondary: "#6B7280",
    primary: "#10B981",
    accent: "#3B82F6",
    warning: "#F59E0B"
  };
  var scaleAnim = (0, _react.useRef)(new _reactNative.Animated.Value(0.95)).current;
  var opacityAnim = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
  var animateIn = (0, _react.useCallback)(function () {
    _reactNative.Animated.parallel([_reactNative.Animated.spring(scaleAnim, {
      toValue: 1,
      friction: 7,
      tension: 40,
      useNativeDriver: true
    }), _reactNative.Animated.timing(opacityAnim, {
      toValue: 1,
      duration: 200,
      useNativeDriver: true
    })]).start();
  }, [scaleAnim, opacityAnim]);
  var animateOut = (0, _react.useCallback)(function () {
    scaleAnim.setValue(0.95);
    opacityAnim.setValue(0);
  }, [scaleAnim, opacityAnim]);
  (0, _react.useEffect)(function () {
    if (visible) {
      animateIn();
    }
  }, [visible, animateIn]);
  (0, _react.useEffect)(function () {
    if (!visible) {
      animateOut();
    }
  }, [visible, animateOut]);
  var allChoices = [{
    id: 'now',
    iconName: 'flash-outline',
    label: `Réviser (${questionsCount} questions)`,
    subtitle: 'Testez vos connaissances maintenant',
    color: colors.primary,
    isPrimary: true
  }, {
    id: 'later_50',
    iconName: 'time-outline',
    label: 'Plus tard (50 mots)',
    subtitle: `Prochaine révision à ${totalWordsLearned + 50} mots`,
    color: colors.accent
  }, {
    id: 'later_100',
    iconName: 'hourglass-outline',
    label: 'Plus tard (100 mots)',
    subtitle: `Prochaine révision à ${totalWordsLearned + 100} mots`,
    color: colors.warning
  }, {
    id: 'disable',
    iconName: 'close-circle-outline',
    label: 'Désactiver',
    subtitle: 'Vous pourrez réactiver via les paramètres',
    color: '#6B7280'
  }];
  var handleChoicePress = (0, _react.useCallback)(function (id) {
    return function () {
      if (onChoice) onChoice(id);
    };
  }, [onChoice]);
  var animatedContainerStyle = {
    opacity: opacityAnim,
    transform: [{
      scale: scaleAnim
    }]
  };
  return (0, _jsxRuntime.jsx)(_reactNative.Modal, {
    transparent: true,
    visible: visible,
    animationType: "fade",
    onRequestClose: onDismiss,
    children: (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.overlay,
      children: (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
        style: [_style.default.popupContainer, animatedContainerStyle],
        children: [(0, _jsxRuntime.jsx)(PopupHeader, {
          colors: colors,
          totalWordsLearned: totalWordsLearned,
          localStyles: _style.default
        }), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: _style.default.body,
          children: (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: _style.default.choicesContainer,
            children: allChoices.map(function (choice) {
              return (0, _jsxRuntime.jsx)(UniformChoice, {
                choice: choice,
                onPress: handleChoicePress(choice.id),
                localStyles: _style.default,
                isPrimary: choice.isPrimary
              }, choice.id);
            })
          })
        })]
      })
    })
  });
};
PopupHeader.propTypes = {
  colors: _propTypes.default.object.isRequired,
  totalWordsLearned: _propTypes.default.number.isRequired,
  localStyles: _propTypes.default.object.isRequired
};
UniformChoice.propTypes = {
  choice: _propTypes.default.shape({
    id: _propTypes.default.string.isRequired,
    iconName: _propTypes.default.string.isRequired,
    label: _propTypes.default.string.isRequired,
    subtitle: _propTypes.default.string,
    color: _propTypes.default.string.isRequired,
    isPrimary: _propTypes.default.bool
  }).isRequired,
  onPress: _propTypes.default.func.isRequired,
  localStyles: _propTypes.default.object.isRequired,
  isPrimary: _propTypes.default.bool
};
RevisionPopup.propTypes = {
  visible: _propTypes.default.bool,
  totalWordsLearned: _propTypes.default.number,
  questionsCount: _propTypes.default.number,
  onChoice: _propTypes.default.func,
  onDismiss: _propTypes.default.func
};
var _default = exports.default = RevisionPopup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,