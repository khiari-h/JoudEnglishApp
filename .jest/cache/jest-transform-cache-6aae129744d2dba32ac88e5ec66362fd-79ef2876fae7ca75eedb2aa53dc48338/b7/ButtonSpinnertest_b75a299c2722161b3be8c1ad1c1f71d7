f682e954ee85ae65345c0f65f69d582b
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  var MockedActivityIndicator = jest.fn().mockReturnValue(null);
  return Object.assign({}, RN, {
    ActivityIndicator: MockedActivityIndicator
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _ButtonSpinner = _interopRequireDefault(require("../../../../src/components/ui/Button/ButtonSpinner"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ButtonSpinner', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('devrait rendre un ActivityIndicator avec les props size et color', function () {
    var mockSize = 'large';
    var mockColor = '#FF0000';
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ButtonSpinner.default, {
      size: mockSize,
      color: mockColor
    }));
    expect(_reactNative2.ActivityIndicator).toHaveBeenCalledTimes(1);
    expect(_reactNative2.ActivityIndicator).toHaveBeenCalledWith(expect.objectContaining({
      testID: 'button-loader',
      size: mockSize,
      color: mockColor
    }), {});
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJSTiIsImplc3QiLCJyZXF1aXJlQWN0dWFsIiwiTW9ja2VkQWN0aXZpdHlJbmRpY2F0b3IiLCJmbiIsIm1vY2tSZXR1cm5WYWx1ZSIsIk9iamVjdCIsImFzc2lnbiIsIkFjdGl2aXR5SW5kaWNhdG9yIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfcmVhY3ROYXRpdmUyIiwiX0J1dHRvblNwaW5uZXIiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIml0IiwibW9ja1NpemUiLCJtb2NrQ29sb3IiLCJyZW5kZXIiLCJqc3giLCJkZWZhdWx0Iiwic2l6ZSIsImNvbG9yIiwiZXhwZWN0IiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJvYmplY3RDb250YWluaW5nIiwidGVzdElEIl0sInNvdXJjZXMiOlsiQnV0dG9uU3Bpbm5lci50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcclxuaW1wb3J0IHsgQWN0aXZpdHlJbmRpY2F0b3IgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgQnV0dG9uU3Bpbm5lciBmcm9tICcuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy91aS9CdXR0b24vQnV0dG9uU3Bpbm5lcic7XHJcblxyXG4vLyBNb2NrIEFjdGl2aXR5SW5kaWNhdG9yIGNvcnJlY3RlbWVudCAtIHNhbnMgcsOpZsOpcmVuY2Ugw6AgUmVhY3QgZGFucyBsYSBmYWN0b3J5XHJcbmplc3QubW9jaygncmVhY3QtbmF0aXZlJywgKCkgPT4ge1xyXG4gIGNvbnN0IFJOID0gamVzdC5yZXF1aXJlQWN0dWFsKCdyZWFjdC1uYXRpdmUnKTtcclxuICBjb25zdCBNb2NrZWRBY3Rpdml0eUluZGljYXRvciA9IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUobnVsbCk7XHJcbiAgXHJcbiAgcmV0dXJuIHtcclxuICAgIC4uLlJOLFxyXG4gICAgQWN0aXZpdHlJbmRpY2F0b3I6IE1vY2tlZEFjdGl2aXR5SW5kaWNhdG9yLFxyXG4gIH07XHJcbn0pO1xyXG5cclxuZGVzY3JpYmUoJ0J1dHRvblNwaW5uZXInLCAoKSA9PiB7XHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICAvLyBOZXR0b3llciBsZXMgYXBwZWxzIHByw6ljw6lkZW50c1xyXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdkZXZyYWl0IHJlbmRyZSB1biBBY3Rpdml0eUluZGljYXRvciBhdmVjIGxlcyBwcm9wcyBzaXplIGV0IGNvbG9yJywgKCkgPT4ge1xyXG4gICAgY29uc3QgbW9ja1NpemUgPSAnbGFyZ2UnO1xyXG4gICAgY29uc3QgbW9ja0NvbG9yID0gJyNGRjAwMDAnO1xyXG4gICAgXHJcbiAgICByZW5kZXIoPEJ1dHRvblNwaW5uZXIgc2l6ZT17bW9ja1NpemV9IGNvbG9yPXttb2NrQ29sb3J9IC8+KTtcclxuICAgIFxyXG4gICAgZXhwZWN0KEFjdGl2aXR5SW5kaWNhdG9yKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XHJcbiAgICBleHBlY3QoQWN0aXZpdHlJbmRpY2F0b3IpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxyXG4gICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XHJcbiAgICAgICAgdGVzdElEOiAnYnV0dG9uLWxvYWRlcicsXHJcbiAgICAgICAgc2l6ZTogbW9ja1NpemUsXHJcbiAgICAgICAgY29sb3I6IG1vY2tDb2xvcixcclxuICAgICAgfSksXHJcbiAgICAgIHt9XHJcbiAgICApO1xyXG4gIH0pO1xyXG59KTsiXSwibWFwcGluZ3MiOiJBQU1BQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxjQUFjLEVBQUUsWUFBTTtFQUM5QixJQUFNQyxFQUFFLEdBQUdDLElBQUksQ0FBQ0MsYUFBYSxDQUFDLGNBQWMsQ0FBQztFQUM3QyxJQUFNQyx1QkFBdUIsR0FBR0YsSUFBSSxDQUFDRyxFQUFFLENBQUMsQ0FBQyxDQUFDQyxlQUFlLENBQUMsSUFBSSxDQUFDO0VBRS9ELE9BQUFDLE1BQUEsQ0FBQUMsTUFBQSxLQUNLUCxFQUFFO0lBQ0xRLGlCQUFpQixFQUFFTDtFQUF1QjtBQUU5QyxDQUFDLENBQUM7QUFBQyxJQUFBTSxzQkFBQSxHQUFBQyxPQUFBO0FBZEgsSUFBQUMsTUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsWUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsYUFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksY0FBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQStFLElBQUFLLFdBQUEsR0FBQUwsT0FBQTtBQUFBLFNBQUFaLFlBQUE7RUFBQSxJQUFBa0IsUUFBQSxHQUFBTixPQUFBO0lBQUFULElBQUEsR0FBQWUsUUFBQSxDQUFBZixJQUFBO0VBQUFILFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFHLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQWEvRWdCLFFBQVEsQ0FBQyxlQUFlLEVBQUUsWUFBTTtFQUM5QkMsVUFBVSxDQUFDLFlBQU07SUFFZmpCLElBQUksQ0FBQ2tCLGFBQWEsQ0FBQyxDQUFDO0VBQ3RCLENBQUMsQ0FBQztFQUVGQyxFQUFFLENBQUMsa0VBQWtFLEVBQUUsWUFBTTtJQUMzRSxJQUFNQyxRQUFRLEdBQUcsT0FBTztJQUN4QixJQUFNQyxTQUFTLEdBQUcsU0FBUztJQUUzQixJQUFBQyxtQkFBTSxFQUFDLElBQUFSLFdBQUEsQ0FBQVMsR0FBQSxFQUFDVixjQUFBLENBQUFXLE9BQWE7TUFBQ0MsSUFBSSxFQUFFTCxRQUFTO01BQUNNLEtBQUssRUFBRUw7SUFBVSxDQUFFLENBQUMsQ0FBQztJQUUzRE0sTUFBTSxDQUFDcEIsK0JBQWlCLENBQUMsQ0FBQ3FCLHFCQUFxQixDQUFDLENBQUMsQ0FBQztJQUNsREQsTUFBTSxDQUFDcEIsK0JBQWlCLENBQUMsQ0FBQ3NCLG9CQUFvQixDQUM1Q0YsTUFBTSxDQUFDRyxnQkFBZ0IsQ0FBQztNQUN0QkMsTUFBTSxFQUFFLGVBQWU7TUFDdkJOLElBQUksRUFBRUwsUUFBUTtNQUNkTSxLQUFLLEVBQUVMO0lBQ1QsQ0FBQyxDQUFDLEVBQ0YsQ0FBQyxDQUNILENBQUM7RUFDSCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=