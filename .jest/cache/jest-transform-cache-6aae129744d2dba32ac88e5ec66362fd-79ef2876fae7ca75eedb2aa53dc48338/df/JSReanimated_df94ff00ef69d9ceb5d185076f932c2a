16f41bd3090f1bcbc54226b2221dc2fb
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _PlatformChecker = require("../PlatformChecker.js");
var _commonTypes = require("../commonTypes.js");
var _mockedRequestAnimationFrame = require("../mockedRequestAnimationFrame.js");
var _index = require("../logger/index.js");
var _errors = require("../errors.js");
var requestAnimationFrameImpl = (0, _PlatformChecker.isJest)() || !globalThis.requestAnimationFrame ? _mockedRequestAnimationFrame.mockedRequestAnimationFrame : globalThis.requestAnimationFrame;
var JSReanimated = exports.default = function () {
  function JSReanimated() {
    var _this = this;
    (0, _classCallCheck2.default)(this, JSReanimated);
    this.nextSensorId = 0;
    this.sensors = new Map();
    this.platform = undefined;
    this.getSensorCallback = function (sensor, sensorType, eventHandler) {
      switch (sensorType) {
        case _commonTypes.SensorType.ACCELEROMETER:
        case _commonTypes.SensorType.GRAVITY:
          return function () {
            var x = sensor.x,
              y = sensor.y,
              z = sensor.z;
            if (_this.platform === Platform.WEB_ANDROID) {
              var _ref = [-x, -y, -z];
              x = _ref[0];
              y = _ref[1];
              z = _ref[2];
            }
            eventHandler({
              x: x,
              y: y,
              z: z,
              interfaceOrientation: 0
            });
          };
        case _commonTypes.SensorType.GYROSCOPE:
        case _commonTypes.SensorType.MAGNETIC_FIELD:
          return function () {
            var x = sensor.x,
              y = sensor.y,
              z = sensor.z;
            eventHandler({
              x: x,
              y: y,
              z: z,
              interfaceOrientation: 0
            });
          };
        case _commonTypes.SensorType.ROTATION:
          return function () {
            var _sensor$quaternion = (0, _slicedToArray2.default)(sensor.quaternion, 4),
              qw = _sensor$quaternion[0],
              qx = _sensor$quaternion[1],
              qy = _sensor$quaternion[2],
              qz = _sensor$quaternion[3];
            if (_this.platform === Platform.WEB_ANDROID) {
              var _ref2 = [qz, -qy];
              qy = _ref2[0];
              qz = _ref2[1];
            }
            var yaw = -Math.atan2(2.0 * (qy * qz + qw * qx), qw * qw - qx * qx - qy * qy + qz * qz);
            var pitch = Math.sin(-2.0 * (qx * qz - qw * qy));
            var roll = -Math.atan2(2.0 * (qx * qy + qw * qz), qw * qw + qx * qx - qy * qy - qz * qz);
            eventHandler({
              qw: qw,
              qx: qx,
              qy: qy,
              qz: qz,
              yaw: yaw,
              pitch: pitch,
              roll: roll,
              interfaceOrientation: 0
            });
          };
      }
    };
  }
  return (0, _createClass2.default)(JSReanimated, [{
    key: "makeShareableClone",
    value: function makeShareableClone() {
      throw new _errors.ReanimatedError('makeShareableClone should never be called in JSReanimated.');
    }
  }, {
    key: "scheduleOnUI",
    value: function scheduleOnUI(worklet) {
      requestAnimationFrameImpl(worklet);
    }
  }, {
    key: "createWorkletRuntime",
    value: function createWorkletRuntime(_name, _initializer) {
      throw new _errors.ReanimatedError('createWorkletRuntime is not available in JSReanimated.');
    }
  }, {
    key: "scheduleOnRuntime",
    value: function scheduleOnRuntime() {
      throw new _errors.ReanimatedError('scheduleOnRuntime is not available in JSReanimated.');
    }
  }, {
    key: "registerEventHandler",
    value: function registerEventHandler(_eventHandler, _eventName, _emitterReactTag) {
      throw new _errors.ReanimatedError('registerEventHandler is not available in JSReanimated.');
    }
  }, {
    key: "unregisterEventHandler",
    value: function unregisterEventHandler(_) {
      throw new _errors.ReanimatedError('unregisterEventHandler is not available in JSReanimated.');
    }
  }, {
    key: "enableLayoutAnimations",
    value: function enableLayoutAnimations() {
      if ((0, _PlatformChecker.isWeb)()) {
        _index.logger.warn('Layout Animations are not supported on web yet.');
      } else if ((0, _PlatformChecker.isJest)()) {
        _index.logger.warn('Layout Animations are no-ops when using Jest.');
      } else if ((0, _PlatformChecker.isChromeDebugger)()) {
        _index.logger.warn('Layout Animations are no-ops when using Chrome Debugger.');
      } else {
        _index.logger.warn('Layout Animations are not supported on this configuration.');
      }
    }
  }, {
    key: "configureLayoutAnimationBatch",
    value: function configureLayoutAnimationBatch() {}
  }, {
    key: "setShouldAnimateExitingForTag",
    value: function setShouldAnimateExitingForTag() {}
  }, {
    key: "registerSensor",
    value: function registerSensor(sensorType, interval, _iosReferenceFrame, eventHandler) {
      if (!(0, _PlatformChecker.isWindowAvailable)()) {
        return -1;
      }
      if (this.platform === undefined) {
        this.detectPlatform();
      }
      if (!(this.getSensorName(sensorType) in window)) {
        _index.logger.warn('Sensor is not available.' + ((0, _PlatformChecker.isWeb)() && location.protocol !== 'https:' ? ' Make sure you use secure origin with `npx expo start --web --https`.' : '') + (this.platform === Platform.WEB_IOS ? ' For iOS web, you will also have to also grant permission in the browser: https://dev.to/li/how-to-requestpermission-for-devicemotion-and-deviceorientation-events-in-ios-13-46g2.' : ''));
        return -1;
      }
      if (this.platform === undefined) {
        this.detectPlatform();
      }
      var sensor = this.initializeSensor(sensorType, interval);
      sensor.addEventListener('reading', this.getSensorCallback(sensor, sensorType, eventHandler));
      sensor.start();
      this.sensors.set(this.nextSensorId, sensor);
      return this.nextSensorId++;
    }
  }, {
    key: "unregisterSensor",
    value: function unregisterSensor(id) {
      var sensor = this.sensors.get(id);
      if (sensor !== undefined) {
        sensor.stop();
        this.sensors.delete(id);
      }
    }
  }, {
    key: "subscribeForKeyboardEvents",
    value: function subscribeForKeyboardEvents(_) {
      if ((0, _PlatformChecker.isWeb)()) {
        _index.logger.warn('useAnimatedKeyboard is not available on web yet.');
      } else if ((0, _PlatformChecker.isJest)()) {
        _index.logger.warn('useAnimatedKeyboard is not available when using Jest.');
      } else if ((0, _PlatformChecker.isChromeDebugger)()) {
        _index.logger.warn('useAnimatedKeyboard is not available when using Chrome Debugger.');
      } else {
        _index.logger.warn('useAnimatedKeyboard is not available on this configuration.');
      }
      return -1;
    }
  }, {
    key: "unsubscribeFromKeyboardEvents",
    value: function unsubscribeFromKeyboardEvents(_) {}
  }, {
    key: "initializeSensor",
    value: function initializeSensor(sensorType, interval) {
      var config = interval <= 0 ? {
        referenceFrame: 'device'
      } : {
        frequency: 1000 / interval
      };
      switch (sensorType) {
        case _commonTypes.SensorType.ACCELEROMETER:
          return new window.Accelerometer(config);
        case _commonTypes.SensorType.GYROSCOPE:
          return new window.Gyroscope(config);
        case _commonTypes.SensorType.GRAVITY:
          return new window.GravitySensor(config);
        case _commonTypes.SensorType.MAGNETIC_FIELD:
          return new window.Magnetometer(config);
        case _commonTypes.SensorType.ROTATION:
          return new window.AbsoluteOrientationSensor(config);
      }
    }
  }, {
    key: "getSensorName",
    value: function getSensorName(sensorType) {
      switch (sensorType) {
        case _commonTypes.SensorType.ACCELEROMETER:
          return 'Accelerometer';
        case _commonTypes.SensorType.GRAVITY:
          return 'GravitySensor';
        case _commonTypes.SensorType.GYROSCOPE:
          return 'Gyroscope';
        case _commonTypes.SensorType.MAGNETIC_FIELD:
          return 'Magnetometer';
        case _commonTypes.SensorType.ROTATION:
          return 'AbsoluteOrientationSensor';
      }
    }
  }, {
    key: "detectPlatform",
    value: function detectPlatform() {
      var userAgent = navigator.userAgent || navigator.vendor || window.opera;
      if (userAgent === undefined) {
        this.platform = Platform.UNKNOWN;
      } else if (/iPad|iPhone|iPod/.test(userAgent)) {
        this.platform = Platform.WEB_IOS;
      } else if (/android/i.test(userAgent)) {
        this.platform = Platform.WEB_ANDROID;
      } else {
        this.platform = Platform.WEB;
      }
    }
  }, {
    key: "getViewProp",
    value: function getViewProp(_viewTag, _propName, _component, _callback) {
      throw new _errors.ReanimatedError('getViewProp is not available in JSReanimated.');
    }
  }, {
    key: "configureProps",
    value: function configureProps() {
      throw new _errors.ReanimatedError('configureProps is not available in JSReanimated.');
    }
  }, {
    key: "executeOnUIRuntimeSync",
    value: function executeOnUIRuntimeSync(_shareable) {
      throw new _errors.ReanimatedError('`executeOnUIRuntimeSync` is not available in JSReanimated.');
    }
  }]);
}();
var Platform = function (Platform) {
  Platform["WEB_IOS"] = "web iOS";
  Platform["WEB_ANDROID"] = "web Android";
  Platform["WEB"] = "web";
  Platform["UNKNOWN"] = "unknown";
  return Platform;
}(Platform || {});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,