613c18cb40b7ecd2ffaa15b023a4d2f7
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ProgressCard = _interopRequireDefault(require("../../../../components/ui/ProgressCard"));
var _readingStats = require("../../../../utils/reading/readingStats.js");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
var ReadingProgress = function ReadingProgress(_ref) {
  var readingData = _ref.readingData,
    completedQuestions = _ref.completedQuestions,
    levelColor = _ref.levelColor,
    _ref$expanded = _ref.expanded,
    expanded = _ref$expanded === void 0 ? false : _ref$expanded,
    onToggleExpand = _ref.onToggleExpand,
    onExercisePress = _ref.onExercisePress;
  var getDataArray = function getDataArray() {
    if (!readingData) return [];
    if (Array.isArray(readingData)) {
      return readingData;
    }
    if (typeof readingData === 'object') {
      return readingData.exercises || readingData.texts || readingData.passages || readingData.readings || readingData.items || [];
    }
    return [];
  };
  var dataArray = getDataArray();
  var totalQuestionsCount = (0, _readingStats.calculateTotalQuestions)(dataArray);
  var completedQuestionsCount = (0, _readingStats.calculateCompletedQuestionsCount)(completedQuestions);
  var totalProgress = (0, _readingStats.calculateTotalProgress)(dataArray, completedQuestions);
  var exerciseProgressData = (0, _readingStats.calculateExerciseProgress)(dataArray, completedQuestions);
  var formattedExerciseData = exerciseProgressData.map(function (exercise) {
    return {
      title: exercise.title,
      completed: exercise.completedQuestions,
      total: exercise.totalQuestions,
      progress: exercise.progress
    };
  });
  return (0, _jsxRuntime.jsx)(_ProgressCard.default, {
    title: "Progression",
    progress: totalProgress,
    completed: completedQuestionsCount,
    total: totalQuestionsCount,
    unit: "questions",
    levelColor: levelColor,
    expandable: true,
    expanded: expanded,
    onToggleExpand: onToggleExpand,
    categoryData: formattedExerciseData,
    onCategoryPress: onExercisePress
  });
};
ReadingProgress.propTypes = {
  readingData: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.shape({
    exercises: _propTypes.default.array,
    texts: _propTypes.default.array,
    passages: _propTypes.default.array,
    readings: _propTypes.default.array,
    items: _propTypes.default.array
  })]).isRequired,
  completedQuestions: _propTypes.default.object,
  levelColor: _propTypes.default.string,
  expanded: _propTypes.default.bool,
  onToggleExpand: _propTypes.default.func,
  onExercisePress: _propTypes.default.func
};
var _default = exports.default = ReadingProgress;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,