aceb9e595caab351c72d2bda16e802cf
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _reactNative = require("react-native");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _style2 = _interopRequireDefault(require("./style"));
var _BasePressable = _interopRequireDefault(require("./BasePressable"));
var _ButtonSpinner = _interopRequireDefault(require("./ButtonSpinner"));
var _ButtonLabel = _interopRequireDefault(require("./ButtonLabel"));
var _ButtonIcon = require("./ButtonIcon");
var _useButtonStyles2 = _interopRequireDefault(require("./useButtonStyles"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["title", "onPress", "variant", "size", "color", "fullWidth", "disabled", "loading", "leftIcon", "rightIcon", "iconOnly", "style", "textStyle", "onLongPress", "elevation", "uppercase", "rounded"];
var mapHexToButtonColor = function mapHexToButtonColor(color) {
  if (['primary', 'secondary', 'success', 'warning', 'danger', 'info'].includes(color)) {
    return color;
  }
  var colorMap = {
    '#3b82f6': 'primary',
    '#8b5cf6': 'secondary',
    '#10b981': 'success',
    '#f59e0b': 'warning',
    '#ef4444': 'danger',
    '#6366f1': 'info',
    '#9333EA': 'secondary'
  };
  return colorMap[color] || 'primary';
};
var Button = function Button(_ref) {
  var title = _ref.title,
    onPress = _ref.onPress,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? "filled" : _ref$variant,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? "medium" : _ref$size,
    _ref$color = _ref.color,
    color = _ref$color === void 0 ? "primary" : _ref$color,
    _ref$fullWidth = _ref.fullWidth,
    fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$loading = _ref.loading,
    loading = _ref$loading === void 0 ? false : _ref$loading,
    leftIcon = _ref.leftIcon,
    rightIcon = _ref.rightIcon,
    iconOnly = _ref.iconOnly,
    _style = _ref.style,
    textStyle = _ref.textStyle,
    onLongPress = _ref.onLongPress,
    _ref$elevation = _ref.elevation,
    elevation = _ref$elevation === void 0 ? true : _ref$elevation,
    _ref$uppercase = _ref.uppercase,
    uppercase = _ref$uppercase === void 0 ? false : _ref$uppercase,
    _ref$rounded = _ref.rounded,
    rounded = _ref$rounded === void 0 ? false : _ref$rounded,
    props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var mappedColor = mapHexToButtonColor(color);
  var _useButtonStyles = (0, _useButtonStyles2.default)({
      variant: variant,
      size: size,
      color: mappedColor,
      disabled: disabled,
      elevation: elevation,
      rounded: rounded,
      fullWidth: fullWidth
    }),
    baseColor = _useButtonStyles.baseColor,
    sizeStyles = _useButtonStyles.sizeStyles,
    variantStyles = _useButtonStyles.variantStyles,
    elevationStyle = _useButtonStyles.elevationStyle,
    radiusStyle = _useButtonStyles.radiusStyle,
    fullWidthStyle = _useButtonStyles.fullWidthStyle;
  var iconSize = sizeStyles.iconSize;
  return (0, _jsxRuntime.jsx)(_BasePressable.default, Object.assign({
    style: function style(_ref2) {
      var pressed = _ref2.pressed;
      return [_style2.default.button, sizeStyles.button, variantStyles.button, fullWidthStyle, pressed && variantStyles.pressed, elevationStyle, radiusStyle, _style];
    },
    onPress: onPress,
    onLongPress: onLongPress,
    disabled: disabled || loading,
    androidRipple: variant !== "text" && variant !== "outlined" ? {
      color: `${baseColor}30`,
      borderless: false
    } : null
  }, props, {
    children: loading ? (0, _jsxRuntime.jsx)(_ButtonSpinner.default, {
      size: sizeStyles.loaderSize,
      color: variantStyles.text.color
    }) : (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: _style2.default.contentContainer,
      children: [leftIcon && !iconOnly && (0, _jsxRuntime.jsx)(_ButtonIcon.LeftIcon, {
        name: leftIcon,
        size: iconSize,
        color: variantStyles.icon
      }), iconOnly && (0, _jsxRuntime.jsx)(_ButtonIcon.IconOnly, {
        name: iconOnly,
        size: iconSize,
        color: variantStyles.icon
      }), !iconOnly && (0, _jsxRuntime.jsx)(_ButtonLabel.default, {
        title: title,
        sizeStyles: sizeStyles,
        variantStyles: variantStyles,
        uppercase: uppercase,
        textStyle: textStyle
      }), rightIcon && !iconOnly && (0, _jsxRuntime.jsx)(_ButtonIcon.RightIcon, {
        name: rightIcon,
        size: iconSize,
        color: variantStyles.icon
      })]
    })
  }));
};
Button.propTypes = {
  title: _propTypes.default.string,
  onPress: _propTypes.default.func.isRequired,
  variant: _propTypes.default.oneOf(['filled', 'outlined', 'text', 'icon', 'tonal']),
  size: _propTypes.default.oneOf(['small', 'medium', 'large']),
  color: _propTypes.default.oneOfType([_propTypes.default.oneOf(['primary', 'secondary', 'success', 'warning', 'danger', 'info']), _propTypes.default.string]),
  fullWidth: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  loading: _propTypes.default.bool,
  leftIcon: _propTypes.default.string,
  rightIcon: _propTypes.default.string,
  iconOnly: _propTypes.default.string,
  style: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array]),
  textStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array]),
  onLongPress: _propTypes.default.func,
  elevation: _propTypes.default.bool,
  uppercase: _propTypes.default.bool,
  rounded: _propTypes.default.bool
};
var _default = exports.default = Button;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,