{"version":3,"names":["calculateTotalExercises","exports","grammarData","reduce","total","rule","_rule$exercises","exercises","length","calculateCompletedExercisesCount","completedExercises","Object","values","calculateTotalProgress","totalExercises","completedCount","Math","round","calculateRuleProgress","map","index","_rule$exercises2","_completedExercises$i","progress","title"],"sources":["grammarStats.js"],"sourcesContent":["// utils/grammar/grammarStats.js - Fonctions utilitaires (pattern identique Ã  vocabularyStats)\n\n/**\n * ðŸ“Š Utilitaires de calcul pour Grammar\n * Pattern identique Ã  utils/vocabulary/vocabularyStats.js\n * Garde la logique mÃ©tier sÃ©parÃ©e des composants\n */\n\n/**\n * Calculer le nombre total d'exercices\n * @param {Array} grammarData - DonnÃ©es de grammaire [{ exercises: [...] }]\n * @returns {number} Nombre total d'exercices\n */\nexport const calculateTotalExercises = (grammarData) => {\n  return grammarData.reduce((total, rule) => {\n    return total + (rule.exercises?.length || 0);\n  }, 0);\n};\n\n/**\n * Calculer le nombre d'exercices complÃ©tÃ©s\n * @param {Object} completedExercises - Exercices complÃ©tÃ©s {0: [0,1], 1: [0]}\n * @returns {number} Nombre d'exercices complÃ©tÃ©s\n */\nexport const calculateCompletedExercisesCount = (completedExercises) => {\n  return Object.values(completedExercises).reduce((total, exercises) => {\n    return total + (exercises?.length || 0);\n  }, 0);\n};\n\n/**\n * Calculer la progression totale en pourcentage\n * @param {Array} grammarData - DonnÃ©es de grammaire\n * @param {Object} completedExercises - Exercices complÃ©tÃ©s\n * @returns {number} Pourcentage de progression (0-100)\n */\nexport const calculateTotalProgress = (grammarData, completedExercises) => {\n  const totalExercises = calculateTotalExercises(grammarData);\n  const completedCount = calculateCompletedExercisesCount(completedExercises);\n  \n  return totalExercises > 0 ? Math.round((completedCount / totalExercises) * 100) : 0;\n};\n\n/**\n * Calculer la progression par rÃ¨gle grammaticale\n * @param {Array} grammarData - DonnÃ©es de grammaire\n * @param {Object} completedExercises - Exercices complÃ©tÃ©s\n * @returns {Array} Progression par rÃ¨gle\n */\nexport const calculateRuleProgress = (grammarData, completedExercises) => {\n  return grammarData.map((rule, index) => {\n    const totalExercises = rule.exercises?.length || 0;\n    const completedCount = completedExercises[index]?.length || 0;\n    const progress = totalExercises > 0 ? (completedCount / totalExercises) * 100 : 0;\n    \n    return {\n      title: rule.title,\n      totalExercises,\n      completedExercises: completedCount,\n      progress: Math.round(progress),\n    };\n  });\n};"],"mappings":";;;;AAaO,IAAMA,uBAAuB,GAAAC,OAAA,CAAAD,uBAAA,GAAG,SAA1BA,uBAAuBA,CAAIE,WAAW,EAAK;EACtD,OAAOA,WAAW,CAACC,MAAM,CAAC,UAACC,KAAK,EAAEC,IAAI,EAAK;IAAA,IAAAC,eAAA;IACzC,OAAOF,KAAK,IAAI,EAAAE,eAAA,GAAAD,IAAI,CAACE,SAAS,qBAAdD,eAAA,CAAgBE,MAAM,KAAI,CAAC,CAAC;EAC9C,CAAC,EAAE,CAAC,CAAC;AACP,CAAC;AAOM,IAAMC,gCAAgC,GAAAR,OAAA,CAAAQ,gCAAA,GAAG,SAAnCA,gCAAgCA,CAAIC,kBAAkB,EAAK;EACtE,OAAOC,MAAM,CAACC,MAAM,CAACF,kBAAkB,CAAC,CAACP,MAAM,CAAC,UAACC,KAAK,EAAEG,SAAS,EAAK;IACpE,OAAOH,KAAK,IAAI,CAAAG,SAAS,oBAATA,SAAS,CAAEC,MAAM,KAAI,CAAC,CAAC;EACzC,CAAC,EAAE,CAAC,CAAC;AACP,CAAC;AAQM,IAAMK,sBAAsB,GAAAZ,OAAA,CAAAY,sBAAA,GAAG,SAAzBA,sBAAsBA,CAAIX,WAAW,EAAEQ,kBAAkB,EAAK;EACzE,IAAMI,cAAc,GAAGd,uBAAuB,CAACE,WAAW,CAAC;EAC3D,IAAMa,cAAc,GAAGN,gCAAgC,CAACC,kBAAkB,CAAC;EAE3E,OAAOI,cAAc,GAAG,CAAC,GAAGE,IAAI,CAACC,KAAK,CAAEF,cAAc,GAAGD,cAAc,GAAI,GAAG,CAAC,GAAG,CAAC;AACrF,CAAC;AAQM,IAAMI,qBAAqB,GAAAjB,OAAA,CAAAiB,qBAAA,GAAG,SAAxBA,qBAAqBA,CAAIhB,WAAW,EAAEQ,kBAAkB,EAAK;EACxE,OAAOR,WAAW,CAACiB,GAAG,CAAC,UAACd,IAAI,EAAEe,KAAK,EAAK;IAAA,IAAAC,gBAAA,EAAAC,qBAAA;IACtC,IAAMR,cAAc,GAAG,EAAAO,gBAAA,GAAAhB,IAAI,CAACE,SAAS,qBAAdc,gBAAA,CAAgBb,MAAM,KAAI,CAAC;IAClD,IAAMO,cAAc,GAAG,EAAAO,qBAAA,GAAAZ,kBAAkB,CAACU,KAAK,CAAC,qBAAzBE,qBAAA,CAA2Bd,MAAM,KAAI,CAAC;IAC7D,IAAMe,QAAQ,GAAGT,cAAc,GAAG,CAAC,GAAIC,cAAc,GAAGD,cAAc,GAAI,GAAG,GAAG,CAAC;IAEjF,OAAO;MACLU,KAAK,EAAEnB,IAAI,CAACmB,KAAK;MACjBV,cAAc,EAAdA,cAAc;MACdJ,kBAAkB,EAAEK,cAAc;MAClCQ,QAAQ,EAAEP,IAAI,CAACC,KAAK,CAACM,QAAQ;IAC/B,CAAC;EACH,CAAC,CAAC;AACJ,CAAC","ignoreList":[]}