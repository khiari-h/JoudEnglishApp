{"version":3,"names":["readingTextsBonus","readingQuestionsBonus","cov_123k39485z","s","combineTextWithQuestions","textId","f","text","find","t","id","questions","q","b","Object","assign","getAllBonusExercises","map","filter","Boolean","getBonusExerciseById","getBonusExercisesByDifficulty","difficulty","filteredTexts","getBonusExercisesByTopic","topic","_text$topics","topics","includes","bonusMetadata","level","totalTexts","length","totalQuestions","reduce","sum","averageWordCount","Math","round","wordCount","difficulties","_toConsumableArray","Set","sort","a","localeCompare","flatMap","description","readingBonusData","metadata","exercises","getAll","getById","getByDifficulty","getByTopic","texts"],"sources":["index.js"],"sourcesContent":["// src/data/exercises/reading/readingBonusIndex.js\n\nimport readingTextsBonus from './categories/readingTextsBonus.js';\nimport readingQuestionsBonus from './categories/readingQuestionsBonus.js';\n\n// Fonction pour combiner textes et questions\nconst combineTextWithQuestions = (textId) => {\n  const text = readingTextsBonus.find(t => t.id === textId);\n  const questions = readingQuestionsBonus.find(q => q.textId === textId);\n\n  if (!text || !questions) {\n    return null;\n  }\n\n  return {\n    ...text,\n    questions: questions.questions\n  };\n};\n\n// Fonction pour obtenir tous les exercices combinés\nconst getAllBonusExercises = () => {\n  return readingTextsBonus.map(text => combineTextWithQuestions(text.id)).filter(Boolean);\n};\n\n// Fonction pour obtenir un exercice par ID\nconst getBonusExerciseById = (textId) => {\n  return combineTextWithQuestions(textId);\n};\n\n// Fonction pour obtenir des exercices par difficulté\nconst getBonusExercisesByDifficulty = (difficulty) => {\n  const filteredTexts = readingTextsBonus.filter(text => text.difficulty === difficulty);\n  return filteredTexts.map(text => combineTextWithQuestions(text.id)).filter(Boolean);\n};\n\n// Fonction pour obtenir des exercices par sujet\nconst getBonusExercisesByTopic = (topic) => {\n  const filteredTexts = readingTextsBonus.filter(text => \n    text.topics?.includes(topic)\n  );\n  return filteredTexts.map(text => combineTextWithQuestions(text.id)).filter(Boolean);\n};\n\n// Métadonnées du niveau Bonus\nconst bonusMetadata = {\n  level: \"bonus\",\n  totalTexts: readingTextsBonus.length,\n  totalQuestions: readingQuestionsBonus.reduce((sum, q) => sum + q.questions.length, 0),\n  averageWordCount: Math.round(readingTextsBonus.reduce((sum, text) => sum + text.wordCount, 0) / readingTextsBonus.length),\n  difficulties: [...new Set(readingTextsBonus.map(text => text.difficulty))].sort((a, b) => a.localeCompare(b)),\n  topics: [...new Set(readingTextsBonus.flatMap(text => text.topics))].sort((a, b) => a.localeCompare(b)),\n  description: \"Native-level reading comprehension exercises featuring authentic content that native speakers encounter daily. Focuses on inference, tone analysis, and cultural understanding.\"\n};\n\n// Export par défaut avec structure complète\nconst readingBonusData = {\n  metadata: bonusMetadata,\n  exercises: getAllBonusExercises(),\n\n  // Fonctions utilitaires\n  getAll: getAllBonusExercises,\n  getById: getBonusExerciseById,\n  getByDifficulty: getBonusExercisesByDifficulty,\n  getByTopic: getBonusExercisesByTopic,\n\n  // Accès séparé aux données brutes\n  texts: readingTextsBonus,\n  questions: readingQuestionsBonus\n};\n\nexport default readingBonusData;\n\n// Exports nommés pour plus de flexibilité\nexport {\n  readingTextsBonus,\n  readingQuestionsBonus,\n  getAllBonusExercises,\n  getBonusExerciseById,\n  getBonusExercisesByDifficulty,\n  getBonusExercisesByTopic,\n  bonusMetadata\n};"],"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","ignoreList":[]}