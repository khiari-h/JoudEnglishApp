01678f42a6e5585573dfdee570e11c23
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Linking = _interopRequireDefault(require("../../Linking/Linking"));
var _StyleSheet = _interopRequireDefault(require("../../StyleSheet/StyleSheet"));
var _Text = _interopRequireDefault(require("../../Text/Text"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function getLinkRanges(string) {
  var regex = /https?:\/\/[^\s$.?#].[^\s]*/gi;
  var matches = [];
  var regexResult;
  while ((regexResult = regex.exec(string)) !== null) {
    if (regexResult != null) {
      matches.push({
        lowerBound: regexResult.index,
        upperBound: regex.lastIndex
      });
    }
  }
  return matches;
}
function TappableLinks(props) {
  var matches = getLinkRanges(props.content);
  if (matches.length === 0) {
    return (0, _jsxRuntime.jsx)(_Text.default, {
      style: props.style,
      children: props.content
    });
  }
  var fragments = [];
  var indexCounter = 0;
  var startIndex = 0;
  var _loop = function _loop() {
    if (startIndex < linkRange.lowerBound) {
      var _text = props.content.substring(startIndex, linkRange.lowerBound);
      fragments.push((0, _jsxRuntime.jsx)(_Text.default, {
        children: _text
      }, ++indexCounter));
    }
    var link = props.content.substring(linkRange.lowerBound, linkRange.upperBound);
    fragments.push((0, _jsxRuntime.jsx)(_Text.default, {
      onPress: function onPress() {
        _Linking.default.openURL(link);
      },
      style: styles.linkText,
      children: link
    }, ++indexCounter));
    startIndex = linkRange.upperBound;
  };
  for (var linkRange of matches) {
    _loop();
  }
  if (startIndex < props.content.length) {
    var text = props.content.substring(startIndex);
    fragments.push((0, _jsxRuntime.jsx)(_Text.default, {
      style: props.style,
      children: text
    }, ++indexCounter));
  }
  return (0, _jsxRuntime.jsx)(_Text.default, {
    style: props.style,
    children: fragments
  });
}
var cleanContent = function cleanContent(content) {
  return content.replace(/^(TransformError |Warning: (Warning: )?|Error: )/g, '');
};
function LogBoxMessage(props) {
  var _props$message = props.message,
    content = _props$message.content,
    substitutions = _props$message.substitutions;
  if (props.plaintext === true) {
    return (0, _jsxRuntime.jsx)(_Text.default, {
      children: cleanContent(content)
    });
  }
  var maxLength = props.maxLength != null ? props.maxLength : Infinity;
  var substitutionStyle = props.style;
  var elements = [];
  var length = 0;
  var createUnderLength = function createUnderLength(key, message, style) {
    var cleanMessage = cleanContent(message);
    if (props.maxLength != null) {
      cleanMessage = cleanMessage.slice(0, props.maxLength - length);
    }
    if (length < maxLength) {
      elements.push((0, _jsxRuntime.jsx)(TappableLinks, {
        content: cleanMessage,
        style: style
      }, key));
    }
    length += cleanMessage.length;
  };
  var lastOffset = substitutions.reduce(function (prevOffset, substitution, index) {
    var key = String(index);
    if (substitution.offset > prevOffset) {
      var prevPart = content.slice(prevOffset, substitution.offset);
      createUnderLength(key, prevPart);
    }
    var substitutionPart = content.slice(substitution.offset, substitution.offset + substitution.length);
    createUnderLength(key + '.5', substitutionPart, substitutionStyle);
    return substitution.offset + substitution.length;
  }, 0);
  if (lastOffset < content.length) {
    var lastPart = content.slice(lastOffset);
    createUnderLength('-1', lastPart);
  }
  return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
    children: elements
  });
}
var styles = _StyleSheet.default.create({
  linkText: {
    textDecorationLine: 'underline'
  }
});
var _default = exports.default = LogBoxMessage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,