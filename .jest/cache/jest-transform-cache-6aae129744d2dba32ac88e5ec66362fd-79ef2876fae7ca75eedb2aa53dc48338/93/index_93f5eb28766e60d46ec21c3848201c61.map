{"version":3,"names":["_errorCorrectionB1Full","_interopRequireDefault","require","_errorCorrectionB1Identify","_errorCorrectionB1MultipleChoice","cov_1ckxope9r","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","_coverageSchema","coverage","actualCoverage","allExercises","concat","_toConsumableArray2","default","errorCorrectionB1Full","errorCorrectionB1Identify","errorCorrectionB1MultipleChoice","sort","a","categoryId","typeOrder","errorCorrectionB1","level","totalExercises","length","statistics","full","identify","multiple_choice","byCategory","count","categories","id","description","exerciseCount","difficulty","color","topics","commonErrors","exercises","getExercisesByCategory","filter","exercise","getExercisesByType","getExercisesByCategoryAndType","getExercisesByTopic","topic","category","find","cat","includes","getExercisesByErrorType","errorType","some","error","getAdvancedExercises","wordCount","text","split","errorCount","errorPositions","validateStructure","requiredFields","validTypes","every","hasRequiredFields","field","Object","prototype","hasOwnProperty","call","hasValidType","hasValidCategory","hasMinimumComplexity","hasTypeSpecificFields","choices","Array","isArray","correctChoiceIndex","getSummary","totalErrorPositions","ex","reduce","sum","focus","progression","distribution","complexity","averageTextLength","Math","round","averageErrorsPerExercise","_default","exports"],"sources":["index.js"],"sourcesContent":["// src/data/exercises/errorCorrection/B1/index.js\r\n\r\nimport errorCorrectionB1Full from './categories/errorCorrectionB1Full';\r\nimport errorCorrectionB1Identify from './categories/errorCorrectionB1Identify';\r\nimport errorCorrectionB1MultipleChoice from './categories/errorCorrectionB1MultipleChoice';\r\n\r\n// Combine all exercises from the 3 files\r\nconst allExercises = [\r\n  ...errorCorrectionB1Full,\r\n  ...errorCorrectionB1Identify,\r\n  ...errorCorrectionB1MultipleChoice\r\n];\r\n\r\n// Sort exercises by categoryId to maintain logical order\r\nallExercises.sort((a, b) => {\r\n  if (a.categoryId !== b.categoryId) {\r\n    return a.categoryId - b.categoryId;\r\n  }\r\n  // Within same category, order by type: full, identify, multiple_choice\r\n  const typeOrder = { 'full': 1, 'identify': 2, 'multiple_choice': 3 };\r\n  return typeOrder[a.type] - typeOrder[b.type];\r\n});\r\n\r\nconst errorCorrectionB1 = {\r\n  level: \"B1\",\r\n  totalExercises: allExercises.length,\r\n\r\n  // Statistics by type\r\n  statistics: {\r\n    full: errorCorrectionB1Full.length,\r\n    identify: errorCorrectionB1Identify.length,\r\n    multiple_choice: errorCorrectionB1MultipleChoice.length,\r\n    byCategory: {\r\n      1: { name: \"Present Perfect\", count: 7 },      // 2 full + 3 identify + 2 multiple_choice\r\n      2: { name: \"Conditionals\", count: 7 },         // 3 full + 3 identify + 1 multiple_choice\r\n      3: { name: \"Passive Voice\", count: 7 },        // 2 full + 3 identify + 2 multiple_choice\r\n      4: { name: \"Reported Speech\", count: 8 },      // 3 full + 3 identify + 2 multiple_choice\r\n      5: { name: \"Relative Clauses\", count: 7 }      // 2 full + 3 identify + 2 multiple_choice\r\n    }\r\n  },\r\n\r\n  // Categories metadata for B1 intermediate-advanced level\r\n  categories: [\r\n    {\r\n      id: 1,\r\n      name: \"Present Perfect\",\r\n      description: \"Present perfect vs past simple, for/since, already/yet/just\",\r\n      exerciseCount: 7,\r\n      difficulty: \"Intermediate-Advanced\",\r\n      color: \"#3b82f6\",\r\n      topics: [\"present perfect formation\", \"vs past simple\", \"time expressions\", \"experience\", \"duration\"],\r\n      commonErrors: [\"using with specific past times\", \"wrong past participle\", \"confusion with past simple\"]\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"Conditionals\",\r\n      description: \"First, second, and mixed conditionals\",\r\n      exerciseCount: 7,\r\n      difficulty: \"Intermediate-Advanced\", \r\n      color: \"#10b981\",\r\n      topics: [\"first conditional\", \"second conditional\", \"third conditional\", \"mixed conditionals\", \"unless\"],\r\n      commonErrors: [\"will in if-clause\", \"wrong verb forms\", \"mixing conditional types\"]\r\n    },\r\n    {\r\n      id: 3,\r\n      name: \"Passive Voice\",\r\n      description: \"Passive voice in different tenses and contexts\",\r\n      exerciseCount: 7,\r\n      difficulty: \"Intermediate-Advanced\",\r\n      color: \"#f59e0b\",\r\n      topics: [\"passive formation\", \"different tenses\", \"by/with agents\", \"passive reporting\"],\r\n      commonErrors: [\"missing be verb\", \"wrong prepositions\", \"incorrect past participle\"]\r\n    },\r\n    {\r\n      id: 4,\r\n      name: \"Reported Speech\",\r\n      description: \"Direct to indirect speech, reporting verbs\",\r\n      exerciseCount: 8,\r\n      difficulty: \"Intermediate-Advanced\",\r\n      color: \"#8b5cf6\",\r\n      topics: [\"tense changes\", \"pronoun changes\", \"time/place changes\", \"reporting questions\", \"reporting verbs\"],\r\n      commonErrors: [\"wrong tense changes\", \"question word order\", \"incorrect reporting verbs\"]\r\n    },\r\n    {\r\n      id: 5,\r\n      name: \"Relative Clauses\",\r\n      description: \"Defining and non-defining relative clauses\",\r\n      exerciseCount: 7,\r\n      difficulty: \"Intermediate-Advanced\",\r\n      color: \"#ef4444\",\r\n      topics: [\"who/which/that\", \"defining vs non-defining\", \"whose\", \"where/when\", \"prepositions\"],\r\n      commonErrors: [\"wrong relative pronouns\", \"unnecessary prepositions\", \"comma usage\"]\r\n    },\r\n  ],\r\n\r\n  // All exercises combined and sorted\r\n  exercises: allExercises,\r\n\r\n  // Helper methods for filtering exercises\r\n  getExercisesByCategory: (categoryId) => {\r\n    return allExercises.filter(exercise => exercise.categoryId === categoryId);\r\n  },\r\n\r\n  getExercisesByType: (type) => {\r\n    return allExercises.filter(exercise => exercise.type === type);\r\n  },\r\n\r\n  getExercisesByCategoryAndType: (categoryId, type) => {\r\n    return allExercises.filter(exercise => \r\n      exercise.categoryId === categoryId && exercise.type === type\r\n    );\r\n  },\r\n\r\n  // Get exercises by difficulty or topic\r\n  getExercisesByTopic: (topic) => {\r\n    return allExercises.filter(exercise => {\r\n      const category = errorCorrectionB1.categories.find(cat => cat.id === exercise.categoryId);\r\n      return category?.topics.includes(topic);\r\n    });\r\n  },\r\n\r\n  // Get exercises by common error type\r\n  getExercisesByErrorType: (errorType) => {\r\n    return allExercises.filter(exercise => {\r\n      const category = errorCorrectionB1.categories.find(cat => cat.id === exercise.categoryId);\r\n      return category?.commonErrors.some(error => error.includes(errorType));\r\n    });\r\n  },\r\n\r\n  // Advanced filtering for B1 level\r\n  getAdvancedExercises: () => {\r\n    // Return exercises that are more challenging (longer texts, multiple errors)\r\n    return allExercises.filter(exercise => {\r\n      const wordCount = exercise.text.split(' ').length;\r\n      const errorCount = exercise.errorPositions ? exercise.errorPositions.length : 1;\r\n      return wordCount > 8 || errorCount > 2;\r\n    });\r\n  },\r\n\r\n  // Validation with B1-specific checks\r\n  validateStructure: () => {\r\n    const requiredFields = ['categoryId', 'type', 'text', 'correctedText', 'hint', 'explanation'];\r\n    const validTypes = ['full', 'identify', 'multiple_choice'];\r\n\r\n    return allExercises.every(exercise => {\r\n      // Check required fields\r\n      const hasRequiredFields = requiredFields.every(field => \r\n        Object.prototype.hasOwnProperty.call(exercise, field) && exercise[field] !== undefined\r\n      );\r\n\r\n      // Check valid type\r\n      const hasValidType = validTypes.includes(exercise.type);\r\n\r\n      // Check valid category (1-5 for B1)\r\n      const hasValidCategory = exercise.categoryId >= 1 && exercise.categoryId <= 5;\r\n\r\n      // Check B1 level complexity (minimum text length)\r\n      const hasMinimumComplexity = exercise.text.split(' ').length >= 6;\r\n\r\n      // Check type-specific fields\r\n      let hasTypeSpecificFields = true;\r\n      if (exercise.type === 'multiple_choice') {\r\n        hasTypeSpecificFields = exercise.choices && \r\n                               Array.isArray(exercise.choices) &&\r\n                               exercise.choices.length >= 3 && // B1 should have at least 3 choices\r\n                               exercise.correctChoiceIndex !== undefined &&\r\n                               exercise.correctChoiceIndex >= 0 &&\r\n                               exercise.correctChoiceIndex < exercise.choices.length;\r\n      } else {\r\n        hasTypeSpecificFields = exercise.errorPositions && Array.isArray(exercise.errorPositions);\r\n      }\r\n\r\n      return hasRequiredFields && hasValidType && hasValidCategory && \r\n             hasMinimumComplexity && hasTypeSpecificFields;\r\n    });\r\n  },\r\n\r\n  // Get comprehensive summary for B1\r\n  getSummary: () => {\r\n    const totalErrorPositions = allExercises\r\n      .filter(ex => ex.errorPositions)\r\n      .reduce((sum, ex) => sum + ex.errorPositions.length, 0);\r\n\r\n    return {\r\n      level: \"B1\",\r\n      totalExercises: allExercises.length,\r\n      categories: errorCorrectionB1.categories.length,\r\n      difficulty: \"Intermediate-Advanced\",\r\n      focus: \"Complex grammatical structures and tense relationships\",\r\n      progression: \"Builds on A2 with present perfect, conditionals, passive voice, reported speech, and relative clauses\",\r\n      distribution: {\r\n        full: errorCorrectionB1Full.length,\r\n        identify: errorCorrectionB1Identify.length,\r\n        multiple_choice: errorCorrectionB1MultipleChoice.length\r\n      },\r\n      complexity: {\r\n        averageTextLength: Math.round(allExercises.reduce((sum, ex) => sum + ex.text.split(' ').length, 0) / allExercises.length),\r\n        totalErrorPositions,\r\n        averageErrorsPerExercise: Math.round(totalErrorPositions / allExercises.filter(ex => ex.errorPositions).length * 10) / 10\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\n// Validate structure on export\r\nif (!errorCorrectionB1.validateStructure()) {\r\n  // empty: structure invalid, handle if needed\r\n} else {\r\n  // empty: structure valid, nothing to do\r\n}\r\n\r\nexport default errorCorrectionB1;\r\n"],"mappings":";;;;;;AAEA,IAAAA,sBAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,0BAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,gCAAA,GAAAH,sBAAA,CAAAC,OAAA;AAA2F,SAAAG,cAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;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","ignoreList":[]}