da57c316fbeee5db78541126762d37ee
_getJestObj().mock('../../../../src/utils/constants', function () {
  return {
    LANGUAGE_LEVELS: {
      '1': {
        title: 'D√©butant',
        color: '#10B981',
        icon: 'üå±'
      },
      '2': {
        title: '√âl√©mentaire',
        color: '#3B82F6',
        icon: 'üìö'
      },
      '3': {
        title: 'Interm√©diaire',
        color: '#8B5CF6',
        icon: 'üéØ'
      },
      '4': {
        title: 'Interm√©diaire+',
        color: '#F59E0B',
        icon: 'üöÄ'
      },
      '5': {
        title: 'Avanc√©',
        color: '#EF4444',
        icon: '‚≠ê'
      },
      '6': {
        title: 'Expert',
        color: '#EC4899',
        icon: 'üëë'
      },
      'bonus': {
        title: 'Bonus',
        color: '#6366F1',
        icon: 'üéÅ'
      }
    }
  };
});
var _reactNative = require("@testing-library/react-native");
var _useDashboardData = require("../../../../src/screens/Dashboard/hooks/useDashboardData");
var _constants = require("../../../../src/utils/constants");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useDashboardData', function () {
  var mockProgressContext = {
    progress: {
      level1: 50,
      level2: 30
    },
    calculateGlobalProgress: jest.fn(function () {
      return 65;
    }),
    calculateLevelProgress: jest.fn(function (level) {
      var progressMap = {
        '1': 50,
        '2': 30,
        '3': 0
      };
      return progressMap[level] || 0;
    })
  };
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('devrait retourner les donn√©es par d√©faut quand progressContext est null', function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardData.useDashboardData)(null, '1', null, 0);
      }),
      result = _renderHook.result;
    expect(result.current.progress).toEqual({});
    expect(result.current.globalProgress).toBe(0);
    expect(result.current.levelProgress).toBe(0);
  });
  it('devrait calculer correctement les donn√©es avec un contexte valide', function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardData.useDashboardData)(mockProgressContext, '1', 'vocabulary', 5);
      }),
      result = _renderHook2.result;
    expect(result.current.progress).toEqual(mockProgressContext.progress);
    expect(result.current.globalProgress).toBe(65);
    expect(result.current.levelProgress).toBe(50);
    expect(result.current.lastActivity).toBe('vocabulary');
    expect(result.current.currentStreak).toBe(5);
  });
  it('devrait m√©moriser la liste de tous les niveaux', function () {
    var _renderHook3 = (0, _reactNative.renderHook)(function (_ref) {
        var currentLevel = _ref.currentLevel;
        return (0, _useDashboardData.useDashboardData)(mockProgressContext, currentLevel, null, 0);
      }, {
        initialProps: {
          currentLevel: '1'
        }
      }),
      result = _renderHook3.result,
      rerender = _renderHook3.rerender;
    var initialLevels = result.current.allLevels;
    expect(initialLevels).toHaveLength(7);
    expect(initialLevels[0]).toEqual({
      id: '1',
      color: '#10B981',
      isActive: true
    });
    rerender({
      currentLevel: '1'
    });
    expect(result.current.allLevels).toBe(initialLevels);
    rerender({
      currentLevel: '2'
    });
    expect(result.current.allLevels).not.toBe(initialLevels);
    expect(result.current.allLevels[1].isActive).toBe(true);
  });
  it('devrait m√©moriser la liste des niveaux d\'apprentissage avec progression', function () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardData.useDashboardData)(mockProgressContext, '2', null, 0);
      }),
      result = _renderHook4.result;
    var learningLevels = result.current.getAllLearningLevels;
    expect(learningLevels).toHaveLength(7);
    var level1 = learningLevels.find(function (l) {
      return l.id === '1';
    });
    expect(level1).toEqual({
      id: '1',
      title: 'D√©butant',
      color: '#10B981',
      progress: 50,
      isActive: false
    });
    var level2 = learningLevels.find(function (l) {
      return l.id === '2';
    });
    expect(level2).toEqual({
      id: '2',
      title: '√âl√©mentaire',
      color: '#3B82F6',
      progress: 30,
      isActive: true
    });
  });
  it('devrait appeler calculateGlobalProgress une seule fois', function () {
    (0, _reactNative.renderHook)(function () {
      return (0, _useDashboardData.useDashboardData)(mockProgressContext, '1', null, 0);
    });
    expect(mockProgressContext.calculateGlobalProgress).toHaveBeenCalledTimes(1);
  });
  it('devrait appeler calculateLevelProgress pour le niveau courant', function () {
    (0, _reactNative.renderHook)(function () {
      return (0, _useDashboardData.useDashboardData)(mockProgressContext, '3', null, 0);
    });
    expect(mockProgressContext.calculateLevelProgress).toHaveBeenCalledWith('3');
  });
  it('devrait recalculer quand le niveau courant change', function () {
    var _renderHook5 = (0, _reactNative.renderHook)(function (_ref2) {
        var currentLevel = _ref2.currentLevel;
        return (0, _useDashboardData.useDashboardData)(mockProgressContext, currentLevel, null, 0);
      }, {
        initialProps: {
          currentLevel: '1'
        }
      }),
      rerender = _renderHook5.rerender;
    expect(mockProgressContext.calculateLevelProgress).toHaveBeenCalledWith('1');
    rerender({
      currentLevel: '2'
    });
    expect(mockProgressContext.calculateLevelProgress).toHaveBeenCalledWith('2');
  });
  it('devrait g√©rer les fonctions manquantes dans progressContext', function () {
    var incompleteContext = {
      progress: {
        level1: 25
      }
    };
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useDashboardData.useDashboardData)(incompleteContext, '1', null, 0);
      }),
      result = _renderHook6.result;
    expect(result.current.globalProgress).toBe(0);
    expect(result.current.levelProgress).toBe(0);
    expect(result.current.progress).toEqual({
      level1: 25
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,