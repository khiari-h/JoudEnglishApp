dcfb6e29d4bd8565040d8a3f59f0ff59
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  return Object.assign({}, RN, {
    Animated: Object.assign({}, RN.Animated, {
      Value: MockAnimatedValue,
      timing: mockTiming,
      parallel: mockParallel,
      multiply: mockMultiply,
      View: RN.View
    })
  });
});
_getJestObj().mock('expo-linear-gradient', function () {
  return {
    LinearGradient: function LinearGradient(_ref) {
      var children = _ref.children,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      var _require = require('react-native'),
        View = _require.View;
      return (0, _jsxRuntime.jsx)(View, Object.assign({
        testID: "linear-gradient"
      }, props, {
        children: children
      }));
    }
  };
});
_getJestObj().mock('../../../src/components/exercise-common/CategorySelector/style', function () {
  var _require2 = require('react-native'),
    StyleSheet = _require2.StyleSheet;
  return function () {
    return StyleSheet.create({
      container: {},
      backgroundGradient: {},
      scrollView: {},
      scrollContent: {},
      categoryItemWrapper: {},
      categoryTouchable: {},
      selectedCategoryItem: {},
      selectedInner: {},
      selectedCategoryText: {
        color: '#FFFFFF'
      },
      sparkleContainer: {},
      sparkle: {},
      categoryItem: {},
      categoryInner: {},
      categoryText: {}
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _CategorySelector = _interopRequireWildcard(require("../../../src/components/exercise-common/CategorySelector"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockStart = jest.fn(function (callback) {
  if (callback) {
    setImmediate(function () {
      (0, _reactNative.act)(function () {
        callback();
      });
    });
  }
});
var mockTiming = jest.fn(function () {
  return {
    start: mockStart
  };
});
var mockParallel = jest.fn(function (animations) {
  return {
    start: mockStart
  };
});
var mockMultiply = jest.fn(function (anim1, anim2) {
  return anim1;
});
var MockAnimatedValue = jest.fn().mockImplementation(function (initialValue) {
  var mockValue = {
    interpolate: jest.fn(function (config) {
      var inputRange = config.inputRange,
        outputRange = config.outputRange,
        extrapolate = config.extrapolate;
      if (extrapolate === 'clamp') {
        return outputRange[initialValue >= 1 ? outputRange.length - 1 : 0];
      }
      return outputRange[0];
    }),
    setValue: jest.fn(),
    addListener: jest.fn(),
    removeListener: jest.fn(),
    removeAllListeners: jest.fn(),
    stopAnimation: jest.fn(),
    resetAnimation: jest.fn(),
    _value: initialValue
  };
  return mockValue;
});
describe('CategorySelector', function () {
  var categories = [{
    id: '1',
    name: 'Grammar'
  }, {
    id: '2',
    name: 'Vocabulary'
  }, {
    id: '3',
    name: 'Reading'
  }];
  beforeEach(function () {
    jest.clearAllMocks();
    MockAnimatedValue.mockClear();
    mockTiming.mockClear();
    mockParallel.mockClear();
    mockStart.mockClear();
    mockMultiply.mockClear();
  });
  describe('Basic rendering', function () {
    it('should render all categories correctly', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          onSelectCategory: function onSelectCategory() {}
        })),
        getByText = _render.getByText;
      expect(getByText('Grammar')).toBeTruthy();
      expect(getByText('Vocabulary')).toBeTruthy();
      expect(getByText('Reading')).toBeTruthy();
    });
    it('should render empty state without crashing', function () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: [],
          onSelectCategory: function onSelectCategory() {}
        })),
        root = _render2.root;
      expect(root).toBeTruthy();
    });
    it('should display sparkle for selected category', function () {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: function onSelectCategory() {}
        })),
        getByText = _render3.getByText;
      expect(getByText('âœ¨')).toBeTruthy();
    });
    it('should apply custom primary color', function () {
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          onSelectCategory: function onSelectCategory() {},
          primaryColor: "#FF6B35"
        })),
        getByText = _render4.getByText;
      expect(getByText('Grammar')).toBeTruthy();
    });
  });
  describe('User interactions', function () {
    it('should call onSelectCategory when category is pressed', function () {
      var onSelectCategory = jest.fn();
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          onSelectCategory: onSelectCategory
        })),
        getByText = _render5.getByText;
      _reactNative.fireEvent.press(getByText('Vocabulary'));
      expect(onSelectCategory).toHaveBeenCalledWith('2');
    });
    it('should not call onSelectCategory for already selected category', function () {
      var onSelectCategory = jest.fn();
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        })),
        getByText = _render6.getByText;
      _reactNative.fireEvent.press(getByText('Grammar'));
      expect(onSelectCategory).not.toHaveBeenCalled();
    });
    it('should handle press in and press out events', function () {
      var onSelectCategory = jest.fn();
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          onSelectCategory: onSelectCategory
        })),
        getByText = _render7.getByText;
      var categoryButton = getByText('Grammar').parent;
      (0, _reactNative.fireEvent)(categoryButton, 'pressIn');
      expect(mockTiming).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({
        toValue: 0.95,
        duration: 150,
        useNativeDriver: true
      }));
      (0, _reactNative.fireEvent)(categoryButton, 'pressOut');
      expect(mockTiming).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({
        toValue: 1,
        duration: 150,
        useNativeDriver: true
      }));
    });
  });
  describe('Animations', function () {
    it('should create animations for categories on mount', function () {
      MockAnimatedValue.mockClear();
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "1",
        onSelectCategory: function onSelectCategory() {}
      }));
      expect(function () {}).not.toThrow();
    });
    it('should trigger parallel animations when selectedCategory changes', (0, _asyncToGenerator2.default)(function* () {
      var onSelectCategory = jest.fn();
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        })),
        rerender = _render8.rerender;
      mockTiming.mockClear();
      mockParallel.mockClear();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "2",
          onSelectCategory: onSelectCategory
        }));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockParallel).toHaveBeenCalledTimes(1);
      });
      expect(mockTiming).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({
        toValue: 0,
        duration: 200,
        useNativeDriver: false
      }));
      expect(mockTiming).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({
        toValue: 1,
        duration: 300,
        useNativeDriver: false
      }));
    }));
    it('should prevent animation conflicts with isAnimatingRef', (0, _asyncToGenerator2.default)(function* () {
      var onSelectCategory = jest.fn();
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        })),
        rerender = _render9.rerender;
      mockParallel.mockClear();
      (0, _reactNative.act)(function () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "2",
          onSelectCategory: onSelectCategory
        }));
      });
      (0, _reactNative.act)(function () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "3",
          onSelectCategory: onSelectCategory
        }));
      });
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 50);
      });
      expect(mockParallel).toHaveBeenCalledTimes(1);
    }));
  });
  describe('Dynamic category management', function () {
    it('should handle category addition without crashing', function () {
      var onSelectCategory = jest.fn();
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        })),
        rerender = _render0.rerender;
      expect(function () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: [].concat(categories, [{
            id: '4',
            name: 'Writing'
          }]),
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        }));
      }).not.toThrow();
    });
    it('should handle category removal without crashing', function () {
      var onSelectCategory = jest.fn();
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        })),
        rerender = _render1.rerender;
      expect(function () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: [categories[0]],
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        }));
      }).not.toThrow();
    });
    it('should handle category replacement', function () {
      var onSelectCategory = jest.fn();
      var newCategories = [{
        id: '10',
        name: 'New Category 1'
      }, {
        id: '20',
        name: 'New Category 2'
      }];
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        })),
        rerender = _render10.rerender,
        getByText = _render10.getByText;
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: newCategories,
        selectedCategory: "10",
        onSelectCategory: onSelectCategory
      }));
      expect(getByText('New Category 1')).toBeTruthy();
      expect(getByText('New Category 2')).toBeTruthy();
    });
  });
  describe('areEqual memoization', function () {
    it('should return true for identical props', function () {
      var props = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: [{
          id: '1',
          name: 'Cat1'
        }]
      };
      expect((0, _CategorySelector.areEqual)(props, props)).toBe(true);
    });
    it('should return false when selectedCategory changes', function () {
      var prevProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: []
      };
      var nextProps = {
        selectedCategory: '2',
        primaryColor: '#000',
        categories: []
      };
      expect((0, _CategorySelector.areEqual)(prevProps, nextProps)).toBe(false);
    });
    it('should return false when primaryColor changes', function () {
      var prevProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: []
      };
      var nextProps = {
        selectedCategory: '1',
        primaryColor: '#111',
        categories: []
      };
      expect((0, _CategorySelector.areEqual)(prevProps, nextProps)).toBe(false);
    });
    it('should return false when categories length changes', function () {
      var prevProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: [{
          id: '1',
          name: 'Cat1'
        }]
      };
      var nextProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: []
      };
      expect((0, _CategorySelector.areEqual)(prevProps, nextProps)).toBe(false);
    });
    it('should return true when array reference is the same', function () {
      var categoriesList = [{
        id: '1',
        name: 'Cat1'
      }];
      var prevProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: categoriesList
      };
      var nextProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: categoriesList
      };
      expect((0, _CategorySelector.areEqual)(prevProps, nextProps)).toBe(true);
    });
    it('should return false when array content changes', function () {
      var categories1 = [{
        id: '1',
        name: 'Cat1'
      }];
      var categories2 = [{
        id: '2',
        name: 'Cat2'
      }];
      var prevProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: categories1
      };
      var nextProps = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: categories2
      };
      expect((0, _CategorySelector.areEqual)(prevProps, nextProps)).toBe(false);
    });
    it('should handle undefined selectedCategory', function () {
      var categories = [];
      var prevProps = {
        selectedCategory: undefined,
        primaryColor: '#000',
        categories: categories
      };
      var nextProps = {
        selectedCategory: undefined,
        primaryColor: '#000',
        categories: categories
      };
      expect((0, _CategorySelector.areEqual)(prevProps, nextProps)).toBe(true);
    });
  });
  describe('Edge cases', function () {
    it('should handle undefined selectedCategory gracefully', function () {
      var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: undefined,
          onSelectCategory: function onSelectCategory() {}
        })),
        getByText = _render11.getByText;
      expect(getByText('Grammar')).toBeTruthy();
      expect(function () {
        return getByText('âœ¨');
      }).toThrow();
    });
    it('should handle non-existent selected category', function () {
      var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "999",
          onSelectCategory: function onSelectCategory() {}
        })),
        getByText = _render12.getByText;
      expect(getByText('Grammar')).toBeTruthy();
      expect(function () {
        return getByText('âœ¨');
      }).toThrow();
    });
    it('should handle mixed id types', function () {
      var mixedCategories = [{
        id: 1,
        name: 'Numeric'
      }, {
        id: 'string',
        name: 'String'
      }];
      var _render13 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: mixedCategories,
          selectedCategory: 1,
          onSelectCategory: function onSelectCategory() {}
        })),
        getByText = _render13.getByText;
      expect(getByText('Numeric')).toBeTruthy();
      expect(getByText('String')).toBeTruthy();
      expect(getByText('âœ¨')).toBeTruthy();
    });
    it('should not crash with rapid prop changes', function () {
      var _render14 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: function onSelectCategory() {},
          primaryColor: "#123"
        })),
        rerender = _render14.rerender;
      expect(function () {
        for (var i = 0; i < 5; i++) {
          rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
            categories: [].concat(categories, [{
              id: `new-${i}`,
              name: `New ${i}`
            }]),
            selectedCategory: i % 2 === 0 ? "1" : "2",
            onSelectCategory: function onSelectCategory() {},
            primaryColor: i % 2 === 0 ? "#456" : "#789"
          }));
        }
      }).not.toThrow();
    });
    it('should handle layout events correctly', function () {
      var _render15 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: function onSelectCategory() {}
        })),
        getByText = _render15.getByText;
      var categoryElement = getByText('Grammar').parent;
      expect(function () {
        (0, _reactNative.fireEvent)(categoryElement, 'layout', {
          nativeEvent: {
            layout: {
              x: 0,
              y: 0,
              width: 100,
              height: 40
            }
          }
        });
      }).not.toThrow();
    });
    it('should handle accessibility properties correctly', function () {
      var _render16 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: function onSelectCategory() {}
        })),
        getByLabelText = _render16.getByLabelText;
      var grammarButton = getByLabelText('Grammar');
      expect(grammarButton).toBeTruthy();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,