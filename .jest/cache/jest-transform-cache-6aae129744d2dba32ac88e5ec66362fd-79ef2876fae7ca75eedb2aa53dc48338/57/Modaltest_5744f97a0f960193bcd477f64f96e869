f7b16363f4cc506237fcc891d53d66a6
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Modal = _interopRequireDefault(require("../../../src/components/ui/Modal"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
describe('Modal', function () {
  it('ne devrait pas rendre le contenu si isVisible est faux', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        isVisible: false,
        onClose: function onClose() {},
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Contenu du modal"
        })
      })),
      queryByText = _render.queryByText;
    expect(queryByText('Contenu du modal')).toBeNull();
  });
  it('devrait rendre le contenu si isVisible est vrai', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        isVisible: true,
        onClose: function onClose() {},
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Contenu du modal"
        })
      })),
      getByText = _render2.getByText;
    expect(getByText('Contenu du modal')).toBeTruthy();
  });
  it('devrait appeler onClose quand le fond est pressé et backdropDismiss est vrai', function () {
    var mockOnClose = jest.fn();
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        isVisible: true,
        onClose: mockOnClose,
        backdropDismiss: true,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Contenu du modal"
        })
      })),
      getByTestId = _render3.getByTestId;
    _reactNative.fireEvent.press(getByTestId('modal-backdrop'));
    expect(mockOnClose).toHaveBeenCalledTimes(1);
  });
  it('ne devrait pas appeler onClose quand le fond est pressé et backdropDismiss est faux', function () {
    var mockOnClose = jest.fn();
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        isVisible: true,
        onClose: mockOnClose,
        backdropDismiss: false,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Contenu du modal"
        })
      })),
      getByTestId = _render4.getByTestId;
    _reactNative.fireEvent.press(getByTestId('modal-backdrop'));
    expect(mockOnClose).not.toHaveBeenCalled();
  });
  it('devrait rendre le titre si fourni', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        isVisible: true,
        onClose: function onClose() {},
        title: "Titre du Modal",
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Contenu"
        })
      })),
      getByText = _render5.getByText;
    expect(getByText('Titre du Modal')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9Nb2RhbCIsIl9yZWFjdE5hdGl2ZTIiLCJfanN4UnVudGltZSIsImRlc2NyaWJlIiwiaXQiLCJfcmVuZGVyIiwicmVuZGVyIiwianN4IiwiZGVmYXVsdCIsImlzVmlzaWJsZSIsIm9uQ2xvc2UiLCJjaGlsZHJlbiIsIlRleHQiLCJxdWVyeUJ5VGV4dCIsImV4cGVjdCIsInRvQmVOdWxsIiwiX3JlbmRlcjIiLCJnZXRCeVRleHQiLCJ0b0JlVHJ1dGh5IiwibW9ja09uQ2xvc2UiLCJqZXN0IiwiZm4iLCJfcmVuZGVyMyIsImJhY2tkcm9wRGlzbWlzcyIsImdldEJ5VGVzdElkIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJfcmVuZGVyNCIsIm5vdCIsInRvSGF2ZUJlZW5DYWxsZWQiLCJfcmVuZGVyNSIsInRpdGxlIl0sInNvdXJjZXMiOlsiTW9kYWwudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdWkvTW9kYWwnO1xuaW1wb3J0IHsgVGV4dCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbmRlc2NyaWJlKCdNb2RhbCcsICgpID0+IHtcbiAgaXQoJ25lIGRldnJhaXQgcGFzIHJlbmRyZSBsZSBjb250ZW51IHNpIGlzVmlzaWJsZSBlc3QgZmF1eCcsICgpID0+IHtcbiAgICBjb25zdCB7IHF1ZXJ5QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICA8TW9kYWwgaXNWaXNpYmxlPXtmYWxzZX0gb25DbG9zZT17KCkgPT4ge319PlxuICAgICAgICA8VGV4dD5Db250ZW51IGR1IG1vZGFsPC9UZXh0PlxuICAgICAgPC9Nb2RhbD5cbiAgICApO1xuICAgIGV4cGVjdChxdWVyeUJ5VGV4dCgnQ29udGVudSBkdSBtb2RhbCcpKS50b0JlTnVsbCgpO1xuICB9KTtcblxuICBpdCgnZGV2cmFpdCByZW5kcmUgbGUgY29udGVudSBzaSBpc1Zpc2libGUgZXN0IHZyYWknLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgIDxNb2RhbCBpc1Zpc2libGU9e3RydWV9IG9uQ2xvc2U9eygpID0+IHt9fT5cbiAgICAgICAgPFRleHQ+Q29udGVudSBkdSBtb2RhbDwvVGV4dD5cbiAgICAgIDwvTW9kYWw+XG4gICAgKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdDb250ZW51IGR1IG1vZGFsJykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ2RldnJhaXQgYXBwZWxlciBvbkNsb3NlIHF1YW5kIGxlIGZvbmQgZXN0IHByZXNzw6kgZXQgYmFja2Ryb3BEaXNtaXNzIGVzdCB2cmFpJywgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tPbkNsb3NlID0gamVzdC5mbigpO1xuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICAgIDxNb2RhbCBpc1Zpc2libGU9e3RydWV9IG9uQ2xvc2U9e21vY2tPbkNsb3NlfSBiYWNrZHJvcERpc21pc3M9e3RydWV9PlxuICAgICAgICA8VGV4dD5Db250ZW51IGR1IG1vZGFsPC9UZXh0PlxuICAgICAgPC9Nb2RhbD5cbiAgICApO1xuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnbW9kYWwtYmFja2Ryb3AnKSk7XG4gICAgZXhwZWN0KG1vY2tPbkNsb3NlKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xuXG4gIGl0KCduZSBkZXZyYWl0IHBhcyBhcHBlbGVyIG9uQ2xvc2UgcXVhbmQgbGUgZm9uZCBlc3QgcHJlc3PDqSBldCBiYWNrZHJvcERpc21pc3MgZXN0IGZhdXgnLCAoKSA9PiB7XG4gICAgY29uc3QgbW9ja09uQ2xvc2UgPSBqZXN0LmZuKCk7XG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgPE1vZGFsIGlzVmlzaWJsZT17dHJ1ZX0gb25DbG9zZT17bW9ja09uQ2xvc2V9IGJhY2tkcm9wRGlzbWlzcz17ZmFsc2V9PlxuICAgICAgICA8VGV4dD5Db250ZW51IGR1IG1vZGFsPC9UZXh0PlxuICAgICAgPC9Nb2RhbD5cbiAgICApO1xuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnbW9kYWwtYmFja2Ryb3AnKSk7XG4gICAgZXhwZWN0KG1vY2tPbkNsb3NlKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcblxuICBpdCgnZGV2cmFpdCByZW5kcmUgbGUgdGl0cmUgc2kgZm91cm5pJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICA8TW9kYWwgaXNWaXNpYmxlPXt0cnVlfSBvbkNsb3NlPXsoKSA9PiB7fX0gdGl0bGU9XCJUaXRyZSBkdSBNb2RhbFwiPlxuICAgICAgICA8VGV4dD5Db250ZW51PC9UZXh0PlxuICAgICAgPC9Nb2RhbD5cbiAgICApO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ1RpdHJlIGR1IE1vZGFsJykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLE1BQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLGFBQUEsR0FBQUgsT0FBQTtBQUFvQyxJQUFBSSxXQUFBLEdBQUFKLE9BQUE7QUFFcENLLFFBQVEsQ0FBQyxPQUFPLEVBQUUsWUFBTTtFQUN0QkMsRUFBRSxDQUFDLHdEQUF3RCxFQUFFLFlBQU07SUFDakUsSUFBQUMsT0FBQSxHQUF3QixJQUFBQyxtQkFBTSxFQUM1QixJ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