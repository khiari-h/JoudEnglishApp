4b9be6d030752378afc549c13d84f03a
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn()
    }
  };
});
_getJestObj().mock('../../../../src/screens/exercises/conversations/hooks/useConversation', function () {
  return jest.fn();
});
_getJestObj().mock('../../../../src/hooks/useLastActivity', function () {
  return {
    __esModule: true,
    default: function _default() {
      return {
        saveActivity: jest.fn()
      };
    }
  };
});
_getJestObj().mock('../../../../src/utils/conversation/conversationDataHelper', function () {
  return {
    getConversationData: jest.fn(),
    getLevelColor: jest.fn(function () {
      return '#000000';
    })
  };
});
_getJestObj().mock('../../../../src/utils/conversation/conversationStats', function () {
  return {
    calculateTotalScenarios: jest.fn(),
    calculateCompletedScenariosCount: jest.fn(),
    calculateTotalSteps: jest.fn(),
    calculateCompletedSteps: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _conversations = _interopRequireDefault(require("../../../../src/screens/exercises/conversations"));
var _useConversation = _interopRequireDefault(require("../../../../src/screens/exercises/conversations/hooks/useConversation"));
var _conversationDataHelper = require("../../../../src/utils/conversation/conversationDataHelper");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockUseConversation = _useConversation.default;
describe('ConversationExercise', function () {
  var mockRoute = {
    params: {
      level: 'A1'
    }
  };
  beforeEach(function () {
    jest.clearAllMocks();
    mockUseConversation.mockReturnValue({
      currentScenarioIndex: 0,
      conversation: [],
      message: '',
      setMessage: jest.fn(),
      isTyping: false,
      suggestions: [],
      showHelp: false,
      completedScenarios: [],
      conversationHistory: [],
      loaded: true,
      showDetailedProgress: false,
      currentScenario: {
        title: 'Test Scenario',
        description: 'Test Description'
      },
      totalScenarios: 1,
      hasValidData: true,
      changeScenario: jest.fn(),
      sendMessage: jest.fn(),
      useSuggestion: jest.fn(),
      toggleHelp: jest.fn(),
      toggleDetailedProgress: jest.fn(),
      isConversationStarted: true,
      stats: {
        completionProgress: 0,
        currentStep: 1,
        totalSteps: 10
      },
      display: {
        currentHelp: 'Some help text'
      }
    });
    _conversationDataHelper.getConversationData.mockReturnValue({
      exercises: [{
        title: 'Scenario 1'
      }]
    });
  });
  it('should render correctly when loaded', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_conversations.default, {
        route: mockRoute
      })),
      getByText = _render.getByText;
    expect(getByText('Test Scenario')).toBeTruthy();
    expect(getByText('Test Description')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,