5fb534308cb9960220091b48cc140316
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SettingsProvider = exports.SettingsContext = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _storageUtils = require("../utils/storageUtils");
var _constants = require("../utils/constants");
var _jsxRuntime = require("react/jsx-runtime");
var SettingsContext = exports.SettingsContext = (0, _react.createContext)();
var SettingsProvider = exports.SettingsProvider = function SettingsProvider(_ref) {
  var children = _ref.children;
  var _useState = (0, _react.useState)(_constants.DEFAULT_SETTINGS),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    settings = _useState2[0],
    setSettings = _useState2[1];
  var _useState3 = (0, _react.useState)(true),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isLoading = _useState4[0],
    setIsLoading = _useState4[1];
  (0, _react.useEffect)(function () {
    var loadSettings = function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* () {
        try {
          setIsLoading(true);
          var savedSettings = yield (0, _storageUtils.getData)('userSettings');
          if (savedSettings) {
            setSettings(Object.assign({}, _constants.DEFAULT_SETTINGS, savedSettings));
          } else {
            setSettings(_constants.DEFAULT_SETTINGS);
            yield (0, _storageUtils.storeData)('userSettings', _constants.DEFAULT_SETTINGS);
          }
        } catch (error) {} finally {
          setIsLoading(false);
        }
      });
      return function loadSettings() {
        return _ref2.apply(this, arguments);
      };
    }();
    loadSettings();
  }, []);
  (0, _react.useEffect)(function () {
    if (!isLoading) {
      (0, _storageUtils.storeData)('userSettings', settings);
    }
  }, [settings, isLoading]);
  var updateSetting = function updateSetting(key, value) {
    if (settings[key] === undefined) {
      return;
    }
    setSettings(function (prevSettings) {
      return Object.assign({}, prevSettings, (0, _defineProperty2.default)({}, key, value));
    });
  };
  var updateSettings = function updateSettings(newSettings) {
    setSettings(function (prevSettings) {
      return Object.assign({}, prevSettings, newSettings);
    });
  };
  var resetSettings = function resetSettings() {
    setSettings(_constants.DEFAULT_SETTINGS);
  };
  var areNotificationsEnabled = function areNotificationsEnabled() {
    return settings.notifications;
  };
  var getDailyGoal = function getDailyGoal() {
    return settings.dailyGoal;
  };
  var setDailyGoal = function setDailyGoal(minutes) {
    updateSetting('dailyGoal', Math.max(1, Math.min(120, minutes)));
  };
  var contextValue = {
    settings: settings,
    updateSetting: updateSetting,
    updateSettings: updateSettings,
    resetSettings: resetSettings,
    areNotificationsEnabled: areNotificationsEnabled,
    getDailyGoal: getDailyGoal,
    setDailyGoal: setDailyGoal,
    isLoading: isLoading
  };
  return (0, _jsxRuntime.jsx)(SettingsContext.Provider, {
    value: contextValue,
    children: children
  });
};
var _default = exports.default = SettingsContext;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3N0b3JhZ2VVdGlscyIsIl9jb25zdGFudHMiLCJfanN4UnVudGltZSIsIlNldHRpbmdzQ29udGV4dCIsImV4cG9ydHMiLCJjcmVhdGVDb250ZXh0IiwiU2V0dGluZ3NQcm92aWRlciIsIl9yZWYiLCJjaGlsZHJlbiIsIl91c2VTdGF0ZSIsInVzZVN0YXRlIiwiREVGQVVMVF9TRVRUSU5HUyIsIl91c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheTIiLCJkZWZhdWx0Iiwic2V0dGluZ3MiLCJzZXRTZXR0aW5ncyIsIl91c2VTdGF0ZTMiLCJfdXNlU3RhdGU0IiwiaXNMb2FkaW5nIiwic2V0SXNMb2FkaW5nIiwidXNlRWZmZWN0IiwibG9hZFNldHRpbmdzIiwiX3JlZjIiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJzYXZlZFNldHRpbmdzIiwiZ2V0RGF0YSIsIk9iamVjdCIsImFzc2lnbiIsInN0b3JlRGF0YSIsImVycm9yIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJ1cGRhdGVTZXR0aW5nIiwia2V5IiwidmFsdWUiLCJ1bmRlZmluZWQiLCJwcmV2U2V0dGluZ3MiLCJfZGVmaW5lUHJvcGVydHkyIiwidXBkYXRlU2V0dGluZ3MiLCJuZXdTZXR0aW5ncyIsInJlc2V0U2V0dGluZ3MiLCJhcmVOb3RpZmljYXRpb25zRW5hYmxlZCIsIm5vdGlmaWNhdGlvbnMiLCJnZXREYWlseUdvYWwiLCJkYWlseUdvYWwiLCJzZXREYWlseUdvYWwiLCJtaW51dGVzIiwiTWF0aCIsIm1heCIsIm1pbiIsImNvbnRleHRWYWx1ZSIsImpzeCIsIlByb3ZpZGVyIiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyJTZXR0aW5nQ29udGV4dC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvY29udGV4dHMvU2V0dGluZ3NDb250ZXh0LmpzXG5pbXBvcnQgeyBjcmVhdGVDb250ZXh0LCB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgc3RvcmVEYXRhLCBnZXREYXRhIH0gZnJvbSAnLi4vdXRpbHMvc3RvcmFnZVV0aWxzJztcbmltcG9ydCB7IERFRkFVTFRfU0VUVElOR1MgfSBmcm9tICcuLi91dGlscy9jb25zdGFudHMnO1xuXG4vLyBDcsOpZXIgbGUgY29udGV4dGVcbmV4cG9ydCBjb25zdCBTZXR0aW5nc0NvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG5cbi8qKlxuICogRm91cm5pc3NldXIgZGUgY29udGV4dGUgcG91ciBnw6lyZXIgbGVzIHBhcmFtw6h0cmVzIGRlIGwnYXBwbGljYXRpb25cbiAqL1xuZXhwb3J0IGNvbnN0IFNldHRpbmdzUHJvdmlkZXIgPSAoeyBjaGlsZHJlbiB9KSA9PiB7XG4gIC8vIMOJdGF0IGRlcyBwYXJhbcOodHJlc1xuICBjb25zdCBbc2V0dGluZ3MsIHNldFNldHRpbmdzXSA9IHVzZVN0YXRlKERFRkFVTFRfU0VUVElOR1MpO1xuICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUodHJ1ZSk7XG5cbiAgLy8gQ2hhcmdlciBsZXMgcGFyYW3DqHRyZXMgYXUgZMOpbWFycmFnZVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGxvYWRTZXR0aW5ncyA9IGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldElzTG9hZGluZyh0cnVlKTtcbiAgICAgICAgY29uc3Qgc2F2ZWRTZXR0aW5ncyA9IGF3YWl0IGdldERhdGEoJ3VzZXJTZXR0aW5ncycpO1xuXG4gICAgICAgIGlmIChzYXZlZFNldHRpbmdzKSB7XG4gICAgICAgICAgLy8gRnVzaW9ubmVyIGF2ZWMgbGVzIHBhcmFtw6h0cmVzIHBhciBkw6lmYXV0IHBvdXIgcydhc3N1cmVyIHF1ZSB0b3VzIGxlcyBjaGFtcHMgc29udCBwcsOpc2VudHNcbiAgICAgICAgICBzZXRTZXR0aW5ncyh7IC4uLkRFRkFVTFRfU0VUVElOR1MsIC4uLnNhdmVkU2V0dGluZ3MgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gSWYgbm8gc2F2ZWQgc2V0dGluZ3MsIHVzZSBkZWZhdWx0IGFuZCBzYXZlIHRoZW1cbiAgICAgICAgICBzZXRTZXR0aW5ncyhERUZBVUxUX1NFVFRJTkdTKTtcbiAgICAgICAgICBhd2FpdCBzdG9yZURhdGEoJ3VzZXJTZXR0aW5ncycsIERFRkFVTFRfU0VUVElOR1MpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyBJZ25vcmVkIG9uIHB1cnBvc2VcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGxvYWRTZXR0aW5ncygpO1xuICB9LCBbXSk7XG5cbiAgLy8gU2F1dmVnYXJkZXIgbGVzIHBhcmFtw6h0cmVzIGxvcnNxdSdpbHMgY2hhbmdlbnRcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWlzTG9hZGluZykge1xuICAgICAgc3RvcmVEYXRhKCd1c2VyU2V0dGluZ3MnLCBzZXR0aW5ncyk7XG4gICAgfVxuICB9LCBbc2V0dGluZ3MsIGlzTG9hZGluZ10pO1xuXG4gIC8vIE1ldHRyZSDDoCBqb3VyIHVuIHBhcmFtw6h0cmUgc3DDqWNpZmlxdWVcbiAgY29uc3QgdXBkYXRlU2V0dGluZyA9IChrZXksIHZhbHVlKSA9PiB7XG4gICAgaWYgKHNldHRpbmdzW2tleV0gPT09IHVuZGVmaW5lZCkge1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2V0U2V0dGluZ3MocHJldlNldHRpbmdzID0+ICh7XG4gICAgICAuLi5wcmV2U2V0dGluZ3MsXG4gICAgICBba2V5XTogdmFsdWVcbiAgICB9KSk7XG4gIH07XG5cbiAgLy8gTWV0dHJlIMOgIGpvdXIgcGx1c2lldXJzIHBhcmFtw6h0cmVzIMOgIGxhIGZvaXNcbiAgY29uc3QgdXBkYXRlU2V0dGluZ3MgPSAobmV3U2V0dGluZ3MpID0+IHtcbiAgICBzZXRTZXR0aW5ncyhwcmV2U2V0dGluZ3MgPT4gKHtcbiAgICAgIC4uLnByZXZTZXR0aW5ncyxcbiAgICAgIC4uLm5ld1NldHRpbmdzXG4gICAgfSkpO1xuICB9O1xuXG4gIC8vIFLDqWluaXRpYWxpc2VyIHRvdXMgbGVzIHBhcmFtw6h0cmVzXG4gIGNvbnN0IHJlc2V0U2V0dGluZ3MgPSAoKSA9PiB7XG4gICAgc2V0U2V0dGluZ3MoREVGQVVMVF9TRVRUSU5HUyk7XG4gIH07XG5cbiAgLy8gVsOpcmlmaWVyIHNpIGxlcyBub3RpZmljYXRpb25zIHNvbnQgYWN0aXbDqWVzXG4gIGNvbnN0IGFyZU5vdGlmaWNhdGlvbnNFbmFibGVkID0gKCkgPT4ge1xuICAgIHJldHVybiBzZXR0aW5ncy5ub3RpZmljYXRpb25zO1xuICB9O1xuXG4gIC8vIE9idGVuaXIgbGUgZMOpbGFpIGpvdXJuYWxpZXJcbiAgY29uc3QgZ2V0RGFpbHlHb2FsID0gKCkgPT4ge1xuICAgIHJldHVybiBzZXR0aW5ncy5kYWlseUdvYWw7XG4gIH07XG5cbiAgLy8gRMOpZmluaXIgbGUgZMOpbGFpIGpvdXJuYWxpZXJcbiAgY29uc3Qgc2V0RGFpbHlHb2FsID0gKG1pbnV0ZXMpID0+IHtcbiAgICB1cGRhdGVTZXR0aW5nKCdkYWlseUdvYWwnLCBNYXRoLm1heCgxLCBNYXRoLm1pbigxMjAsIG1pbnV0ZXMpKSk7IC8vIEVudHJlIDEgZXQgMTIwIG1pbnV0ZXNcbiAgfTtcblxuICAvLyBWYWxldXIgZm91cm5pZSBwYXIgbGUgY29udGV4dGVcbiAgY29uc3QgY29udGV4dFZhbHVlID0ge1xuICAgIHNldHRpbmdzLFxuICAgIHVwZGF0ZVNldHRpbmcsXG4gICAgdXBkYXRlU2V0dGluZ3MsXG4gICAgcmVzZXRTZXR0aW5ncyxcbiAgICBhcmVOb3RpZmljYXRpb25zRW5hYmxlZCxcbiAgICBnZXREYWlseUdvYWwsXG4gICAgc2V0RGFpbHlHb2FsLFxuICAgIGlzTG9hZGluZyxcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxTZXR0aW5nc0NvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NvbnRleHRWYWx1ZX0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9TZXR0aW5nc0NvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTZXR0aW5nc0NvbnRleHQ7Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUNBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLGFBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFVBQUEsR0FBQUYsT0FBQTtBQUFzRCxJQUFBRyxXQUFBLEdBQUFILE9BQUE7QUFHL0MsSUFBTUksZUFBZSxHQUFBQyxPQUFBLENBQUFELGVBQUEsR0FBRyxJQUFBRSxvQkFBYSxFQUFDLENBQUM7QUFLdkMsSUFBTUMsZ0JBQWdCLEdBQUFGLE9BQUEsQ0FBQUUsZ0JBQUEsR0FBRyxTQUFuQkEsZ0JBQWdCQSxDQUFBQyxJQUFBLEVBQXFCO0VBQUEsSUFBZkMsUUFBUSxHQUFBRCxJQUFBLENBQVJDLFFBQVE7RUFFekMsSUFBQUMsU0FBQSxHQUFnQyxJQUFBQyxlQUFRLEVBQUNDLDJCQUFnQixDQUFDO0lBQUFDLFVBQUEsT0FBQUMsZUFBQSxDQUFBQyxPQUFBLEVBQUFMLFNBQUE7SUFBbkRNLFFBQVEsR0FBQUgsVUFBQTtJQUFFSSxXQUFXLEdBQUFKLFVBQUE7RUFDNUIsSUFBQUssVUFBQSxHQUFrQyxJQUFBUCxlQUFRLEVBQUMsSUFBSSxDQUFDO0lBQUFRLFVBQUEsT0FBQUwsZUFBQSxDQUFBQyxPQUFBLEVBQUFHLFVBQUE7SUFBekNFLFNBQVMsR0FBQUQsVUFBQTtJQUFFRSxZQUFZLEdBQUFGLFVBQUE7RUFHOUIsSUFBQUcsZ0JBQVMsRUFBQyxZQUFNO0lBQ2QsSUFBTUMsWUFBWTtNQUFBLElBQUFDLEtBQUEsT0FBQUMsa0JBQUEsQ0FBQVYsT0FBQSxFQUFHLGFBQVk7UUFDL0IsSUFBSTtVQUNGTSxZQUFZLENBQUMsSUFBSSxDQUFDO1VBQ2xCLElBQU1LLGFBQWEsU0FBUyxJQUFBQyxxQkFBTyxFQUFDLGNBQWMsQ0FBQztVQUVuRCxJQUFJRCxhQUFhLEVBQUU7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