91a311ef52085ddc95700f72382db34b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _NavigationButtons = _interopRequireDefault(require("../../../../components/exercise-common/NavigationButtons"));
var _jsxRuntime = require("react/jsx-runtime");
var PhrasesNavigation = function PhrasesNavigation(_ref) {
  var onPrevious = _ref.onPrevious,
    onNext = _ref.onNext,
    _ref$disablePrevious = _ref.disablePrevious,
    disablePrevious = _ref$disablePrevious === void 0 ? false : _ref$disablePrevious,
    _ref$disableNext = _ref.disableNext,
    disableNext = _ref$disableNext === void 0 ? false : _ref$disableNext,
    _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? "#5E60CE" : _ref$levelColor,
    _ref$isLast = _ref.isLast,
    isLast = _ref$isLast === void 0 ? false : _ref$isLast;
  return (0, _jsxRuntime.jsx)(_NavigationButtons.default, {
    onNext: onNext,
    onPrevious: onPrevious,
    disablePrevious: disablePrevious,
    disableNext: disableNext,
    primaryColor: levelColor,
    isLast: isLast,
    buttonLabels: {
      next: "Suivant",
      previous: "Précédent",
      finish: "Terminer"
    }
  });
};
PhrasesNavigation.propTypes = {
  onPrevious: _propTypes.default.func.isRequired,
  onNext: _propTypes.default.func.isRequired,
  disablePrevious: _propTypes.default.bool,
  disableNext: _propTypes.default.bool,
  levelColor: _propTypes.default.string,
  isLast: _propTypes.default.bool
};
PhrasesNavigation.defaultProps = {
  disablePrevious: false,
  disableNext: false,
  levelColor: "#5E60CE",
  isLast: false
};
var _default = exports.default = PhrasesNavigation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcHJvcFR5cGVzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfTmF2aWdhdGlvbkJ1dHRvbnMiLCJfanN4UnVudGltZSIsIlBocmFzZXNOYXZpZ2F0aW9uIiwiX3JlZiIsIm9uUHJldmlvdXMiLCJvbk5leHQiLCJfcmVmJGRpc2FibGVQcmV2aW91cyIsImRpc2FibGVQcmV2aW91cyIsIl9yZWYkZGlzYWJsZU5leHQiLCJkaXNhYmxlTmV4dCIsIl9yZWYkbGV2ZWxDb2xvciIsImxldmVsQ29sb3IiLCJfcmVmJGlzTGFzdCIsImlzTGFzdCIsImpzeCIsImRlZmF1bHQiLCJwcmltYXJ5Q29sb3IiLCJidXR0b25MYWJlbHMiLCJuZXh0IiwicHJldmlvdXMiLCJmaW5pc2giLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJmdW5jIiwiaXNSZXF1aXJlZCIsImJvb2wiLCJzdHJpbmciLCJkZWZhdWx0UHJvcHMiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIFBocmFzZXNOYXZpZ2F0aW9uL2luZGV4LmpzIC0gVkVSU0lPTiBPUFRJTUlTw4lFIGF2ZWMgUHJvcFR5cGVzXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XHJcbmltcG9ydCBOYXZpZ2F0aW9uQnV0dG9ucyBmcm9tIFwiLi4vLi4vLi4vLi4vY29tcG9uZW50cy9leGVyY2lzZS1jb21tb24vTmF2aWdhdGlvbkJ1dHRvbnNcIjtcclxuXHJcbi8qKlxyXG4gKiDij63vuI8gUGhyYXNlc05hdmlnYXRpb24gLSBWZXJzaW9uIE9wdGltaXPDqWUgYXZlYyBQcm9wVHlwZXNcclxuICogLSBQbHVzIGQnaW5kaWNhdGV1ciBcIjEvMlwiIHJlZG9uZGFudCBcclxuICogLSBVdGlsaXNlIGxlIE5hdmlnYXRpb25CdXR0b25zIG9wdGltaXPDqVxyXG4gKiAtIEludGVyZmFjZSBjb2jDqXJlbnRlIGF2ZWMgVm9jYWJ1bGFyeU5hdmlnYXRpb24gZXQgR3JhbW1hck5hdmlnYXRpb25cclxuICogLSBQcm9wcyBzaW1wbGlmacOpZXNcclxuICogXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG9uUHJldmlvdXMgLSBGb25jdGlvbiBwb3VyIGFsbGVyIGF1IHByw6ljw6lkZW50XHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG9uTmV4dCAtIEZvbmN0aW9uIHBvdXIgYWxsZXIgYXUgc3VpdmFudFxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGRpc2FibGVQcmV2aW91cyAtIETDqXNhY3RpdmVyIGxlIGJvdXRvbiBwcsOpY8OpZGVudFxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGRpc2FibGVOZXh0IC0gRMOpc2FjdGl2ZXIgbGUgYm91dG9uIHN1aXZhbnRcclxuICogQHBhcmFtIHtzdHJpbmd9IGxldmVsQ29sb3IgLSBDb3VsZXVyIGR1IG5pdmVhdVxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzTGFzdCAtIFNpIGMnZXN0IGxlIGRlcm5pZXIgw6lsw6ltZW50IChhZmZpY2hlIFwiVGVybWluZXJcIilcclxuICovXHJcbmNvbnN0IFBocmFzZXNOYXZpZ2F0aW9uID0gKHsgXHJcbiAgb25QcmV2aW91cywgXHJcbiAgb25OZXh0LCBcclxuICBkaXNhYmxlUHJldmlvdXMgPSBmYWxzZSwgXHJcbiAgZGlzYWJsZU5leHQgPSBmYWxzZSxcclxuICBsZXZlbENvbG9yID0gXCIjNUU2MENFXCIsXHJcbiAgaXNMYXN0ID0gZmFsc2UsIC8vIE5vdXZlYXUgcHJvcCBzaW1wbGUgcG91ciBcIlRlcm1pbmVyXCJcclxufSkgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8TmF2aWdhdGlvbkJ1dHRvbnNcclxuICAgICAgb25OZXh0PXtvbk5leHR9XHJcbiAgICAgIG9uUHJldmlvdXM9e29uUHJldmlvdXN9XHJcbiAgICAgIGRpc2FibGVQcmV2aW91cz17ZGlzYWJsZVByZXZpb3VzfVxyXG4gICAgICBkaXNhYmxlTmV4dD17ZGlzYWJsZU5leHR9XHJcbiAgICAgIHByaW1hcnlDb2xvcj17bGV2ZWxDb2xvcn1cclxuICAgICAgaXNMYXN0PXtpc0xhc3R9XHJcbiAgICAgIGJ1dHRvbkxhYmVscz17e1xyXG4gICAgICAgIG5leHQ6IFwiU3VpdmFudFwiLFxyXG4gICAgICAgIHByZXZpb3VzOiBcIlByw6ljw6lkZW50XCIsIFxyXG4gICAgICAgIGZpbmlzaDogXCJUZXJtaW5lclwiXHJcbiAgICAgIH19XHJcbiAgICAgIC8vIPCfp7kgU1VQUFJJTcOJIDogY3VycmVudEluZGV4LCB0b3RhbENvdW50LCBzaG93U2tpcCwgdmFyaWFudCwgd3JhcHBlciBWaWV3XHJcbiAgICAgIC8vIFBsdXMgZGUgXCIxLzJcIiByZWRvbmRhbnQgIVxyXG4gICAgLz5cclxuICApO1xyXG59O1xyXG5cclxuLy8g4pyFIFByb3BUeXBlcyBwb3VyIFBocmFzZXNOYXZpZ2F0aW9uIC0gQ29ycmlnZSB0b3V0ZXMgbGVzIGVycmV1cnNcclxuUGhyYXNlc05hdmlnYXRpb24ucHJvcFR5cGVzID0ge1xyXG4gIG9uUHJldmlvdXM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcbiAgb25OZXh0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG4gIGRpc2FibGVQcmV2aW91czogUHJvcFR5cGVzLmJvb2wsXHJcbiAgZGlzYWJsZU5leHQ6IFByb3BUeXBlcy5ib29sLFxyXG4gIGxldmVsQ29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXHJcbiAgaXNMYXN0OiBQcm9wVHlwZXMuYm9vbCxcclxufTtcclxuXHJcbi8vIOKchSBWYWxldXJzIHBhciBkw6lmYXV0IHBvdXIgUGhyYXNlc05hdmlnYXRpb25cclxuUGhyYXNlc05hdmlnYXRpb24uZGVmYXVsdFByb3BzID0ge1xyXG4gIGRpc2FibGVQcmV2aW91czogZmFsc2UsXHJcbiAgZGlzYWJsZU5leHQ6IGZhbHNlLFxyXG4gIGxldmVsQ29sb3I6IFwiIzVFNjBDRVwiLFxyXG4gIGlzTGFzdDogZmFsc2UsXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQaHJhc2VzTmF2aWdhdGlvbjsiXSwibWFwcGluZ3MiOiI7Ozs7O0FBSUEsSUFBQUEsVUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsa0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUF5RixJQUFBRSxXQUFBLEdBQUFGLE9BQUE7QUFnQnpGLElBQU1HLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBaUJBLENBQUFDLElBQUEsRUFPakI7RUFBQSxJQU5KQyxVQUFVLEdBQUFELElBQUEsQ0FBVkMsVUFBVTtJQUNWQyxNQUFNLEdBQUFGLElBQUEsQ0FBTkUsTUFBTTtJQUFBQyxvQkFBQSxHQUFBSCxJQUFBLENBQ05JLGVBQWU7SUFBZkEsZUFBZSxHQUFBRCxvQkFBQSxjQUFHLEtBQUssR0FBQUEsb0JBQUE7SUFBQUUsZ0JBQUEsR0FBQUwsSUFBQSxDQUN2Qk0sV0FBVztJQUFYQSxXQUFXLEdBQUFELGdCQUFBLGNBQUcsS0FBSyxHQUFBQSxnQkFBQTtJQUFBRSxlQUFBLEdBQUFQLElBQUEsQ0FDbkJRLFVBQVU7SUFBVkEsVUFBVSxHQUFBRCxlQUFBLGNBQUcsU0FBUyxHQUFBQSxlQUFBO0lBQUFFLFdBQUEsR0FBQVQsSUFBQSxDQUN0QlUsTUFBTTtJQUFOQSxNQUFNLEdBQUFELFdBQUEsY0FBRyxLQUFLLEdBQUFBLFdBQUE7RUFFZCxPQUNFLElBQUFYLFdBQUEsQ0FBQWEsR0FBQSxFQUFDZCxrQkFBQSxDQUFBZSxPQUFpQjtJQUNoQlYsTUFBTSxFQUFFQSxNQUFPO0lBQ2ZELFVBQVUsRUFBRUEsVUFBVztJQUN2QkcsZUFBZSxFQUFFQSxlQUFnQjtJQUNqQ0UsV0FBVyxFQUFFQSxXQUFZO0lBQ3pCTyxZQUFZLEVBQUVMLFVBQVc7SUFDekJFLE1BQU0sRUFBRUEsTUFBTztJQUNmSSxZQUFZLEVBQUU7TUFDWkMsSUFBSSxFQUFFLFNBQVM7TUFDZkMsUUFBUSxFQUFFLFdBQVc7TUFDckJDLE1BQU0sRUFBRTtJQUNWO0VBQUUsQ0FHSCxDQUFDO0FBRU4sQ0FBQztBQUdEbEIsaUJBQWlCLENBQUNtQixTQUFTLEdBQUc7RUFDNUJqQixVQUFVLEVBQUVrQixrQkFBUyxDQUFDQyxJQUFJLENBQUNDLFVBQVU7RUFDckNuQixNQUFNLEVBQUVpQixrQkFBUyxDQUFDQyxJQUFJLENBQUNDLFVBQVU7RUFDakNqQixlQUFlLEVBQUVlLGtCQUFTLENBQUNHLElBQUk7RUFDL0JoQixXQUFXLEVBQUVhLGtCQUFTLENBQUNHLElBQUk7RUFDM0JkLFVBQVUsRUFBRVcsa0JBQVMsQ0FBQ0ksTUFBTTtFQUM1QmIsTUFBTSxFQUFFUyxrQkFBUyxDQUFDRztBQUNwQixDQUFDO0FBR0R2QixpQkFBaUIsQ0FBQ3lCLFlBQVksR0FBRztFQUMvQnBCLGVBQWUsRUFBRSxLQUFLO0VBQ3RCRSxXQUFXLEVBQUUsS0FBSztFQUNsQkUsVUFBVSxFQUFFLFNBQVM7RUFDckJFLE1BQU0sRUFBRTtBQUNWLENBQUM7QUFBQyxJQUFBZSxRQUFBLEdBQUFDLE9BQUEsQ0FBQWQsT0FBQSxHQUVhYixpQkFBaUIiLCJpZ25vcmVMaXN0IjpbXX0=