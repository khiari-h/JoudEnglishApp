7402c6afafab0b44ad72282c3f9a0213
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn()
  };
});
_getJestObj().mock('../../src/utils/vocabulary/vocabularyDataHelper', function () {
  return {
    getVocabularyData: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useRevisionData = _interopRequireDefault(require("../../src/hooks/useRevisionData"));
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useRevisionData', function () {
  var mockOriginalData = {
    exercises: [{
      words: [{
        word: 'hello',
        translation: 'bonjour',
        definition: 'greeting'
      }, {
        word: 'goodbye',
        translation: 'au revoir',
        definition: 'farewell'
      }]
    }]
  };
  beforeEach(function () {
    jest.clearAllMocks();
    var _require = require('../../src/utils/vocabulary/vocabularyDataHelper'),
      getVocabularyData = _require.getVocabularyData;
    getVocabularyData.mockReturnValue(mockOriginalData);
  });
  it('devrait initialiser avec les bonnes valeurs', function () {
    _asyncStorage.default.getItem.mockResolvedValue(null);
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useRevisionData.default)();
      }),
      result = _renderHook.result;
    expect(result.current.isLoading).toBe(true);
    expect(result.current.allLearnedWords).toEqual([]);
    expect(result.current.revisionQuestions).toEqual([]);
    expect(result.current.error).toBeNull();
  });
  it('devrait accepter des paramètres personnalisés', function () {
    _asyncStorage.default.getItem.mockResolvedValue(null);
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useRevisionData.default)('2', 15);
      }),
      result = _renderHook2.result;
    expect(result.current.isLoading).toBe(true);
  });
  it('devrait récupérer les mots appris', (0, _asyncToGenerator2.default)(function* () {
    var mockStorageData = {
      completedWords: {
        '0': [{
          wordIndex: 0,
          timestamp: 1640995200000
        }, {
          wordIndex: 1,
          timestamp: 1640995300000
        }]
      }
    };
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      if (key === 'vocabulary_1_classic') {
        return Promise.resolve(JSON.stringify(mockStorageData));
      }
      return Promise.resolve(null);
    });
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useRevisionData.default)('1');
      }),
      result = _renderHook3.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.allLearnedWords.length).toBeGreaterThan(0);
      expect(result.current.isLoading).toBe(false);
    });
  }));
  it('devrait avoir les propriétés utilitaires', function () {
    _asyncStorage.default.getItem.mockResolvedValue(null);
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useRevisionData.default)();
      }),
      result = _renderHook4.result;
    expect(result.current.stats).toBeDefined();
    expect(typeof result.current.hasEnoughWords).toBe('boolean');
    expect(typeof result.current.canGenerateQuestions).toBe('boolean');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,