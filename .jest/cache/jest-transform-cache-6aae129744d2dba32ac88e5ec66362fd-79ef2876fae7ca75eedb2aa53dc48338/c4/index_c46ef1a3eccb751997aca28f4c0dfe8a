6f07f93bab97417f8ef6b92f9569b690
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _expoLinearGradient = require("expo-linear-gradient");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var CategorySelector = function CategorySelector(_ref) {
  var _ref$categories = _ref.categories,
    categories = _ref$categories === void 0 ? [] : _ref$categories,
    selectedCategory = _ref.selectedCategory,
    onSelectCategory = _ref.onSelectCategory,
    _ref$primaryColor = _ref.primaryColor,
    primaryColor = _ref$primaryColor === void 0 ? "#5E60CE" : _ref$primaryColor;
  var styles = (0, _style.default)(primaryColor);
  var _useState = (0, _react.useState)(function () {
      return categories.reduce(function (acc, category) {
        acc[category.id] = new _reactNative.Animated.Value(selectedCategory === category.id ? 1 : 0);
        return acc;
      }, {});
    }),
    _useState2 = (0, _slicedToArray2.default)(_useState, 1),
    animations = _useState2[0];
  var animateSelection = function animateSelection(categoryId) {
    if (selectedCategory !== undefined && animations[selectedCategory]) {
      _reactNative.Animated.timing(animations[selectedCategory], {
        toValue: 0,
        duration: 200,
        useNativeDriver: false
      }).start();
    }
    if (animations[categoryId]) {
      _reactNative.Animated.timing(animations[categoryId], {
        toValue: 1,
        duration: 300,
        useNativeDriver: false
      }).start();
    }
    onSelectCategory(categoryId);
  };
  var handleCategoryPress = (0, _react.useCallback)(function (categoryId) {
    return function () {
      return animateSelection(categoryId);
    };
  }, [animateSelection]);
  var renderCategoryPill = function renderCategoryPill(category) {
    var isSelected = selectedCategory === category.id;
    var animation = animations[category.id] || new _reactNative.Animated.Value(0);
    var scale = animation.interpolate({
      inputRange: [0, 1],
      outputRange: [1, 1.05]
    });
    var shadowOpacity = animation.interpolate({
      inputRange: [0, 1],
      outputRange: [0.1, 0.25]
    });
    var borderWidth = animation.interpolate({
      inputRange: [0, 1],
      outputRange: [1, 2]
    });
    return (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
      style: [styles.categoryItemWrapper, {
        transform: [{
          scale: scale
        }]
      }],
      children: (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: styles.categoryTouchable,
        onPress: handleCategoryPress(category.id),
        activeOpacity: 0.8,
        accessibilityRole: "button",
        accessibilityLabel: String(category.name),
        accessibilityState: {
          selected: isSelected
        },
        children: isSelected ? (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
          colors: [primaryColor, `${primaryColor}E6`, `${primaryColor}CC`],
          start: {
            x: 0,
            y: 0
          },
          end: {
            x: 1,
            y: 1
          },
          style: styles.selectedCategoryItem,
          children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.selectedInner,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.selectedCategoryText,
              children: category.name
            }), (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: styles.sparkleContainer,
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.sparkle,
                children: "\u2728"
              })
            })]
          })
        }) : (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
          style: [styles.categoryItem, {
            borderWidth: borderWidth,
            borderColor: `${primaryColor}20`,
            shadowOpacity: shadowOpacity
          }],
          children: (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [styles.categoryInner, {
              backgroundColor: `${primaryColor}08`
            }],
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: [styles.categoryText, {
                color: primaryColor
              }],
              children: category.name
            })
          })
        })
      })
    }, category.id);
  };
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: styles.container,
    children: (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
      colors: [`${primaryColor}04`, 'transparent', `${primaryColor}02`],
      start: {
        x: 0,
        y: 0
      },
      end: {
        x: 1,
        y: 0
      },
      style: styles.backgroundGradient,
      children: (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
        horizontal: true,
        showsHorizontalScrollIndicator: false,
        contentContainerStyle: styles.scrollContent,
        style: styles.scrollView,
        children: categories.map(function (category) {
          return renderCategoryPill(category);
        })
      })
    })
  });
};
function areEqual(prevProps, nextProps) {
  return prevProps.selectedCategory === nextProps.selectedCategory && prevProps.primaryColor === nextProps.primaryColor && prevProps.categories === nextProps.categories;
}
var _default = exports.default = (0, _react.memo)(CategorySelector, areEqual);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlIiwiX2V4cG9MaW5lYXJHcmFkaWVudCIsIl9zdHlsZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfanN4UnVudGltZSIsIkNhdGVnb3J5U2VsZWN0b3IiLCJfcmVmIiwiX3JlZiRjYXRlZ29yaWVzIiwiY2F0ZWdvcmllcyIsInNlbGVjdGVkQ2F0ZWdvcnkiLCJvblNlbGVjdENhdGVnb3J5IiwiX3JlZiRwcmltYXJ5Q29sb3IiLCJwcmltYXJ5Q29sb3IiLCJzdHlsZXMiLCJjcmVhdGVTdHlsZXMiLCJfdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsInJlZHVjZSIsImFjYyIsImNhdGVnb3J5IiwiaWQiLCJBbmltYXRlZCIsIlZhbHVlIiwiX3VzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5MiIsImRlZmF1bHQiLCJhbmltYXRpb25zIiwiYW5pbWF0ZVNlbGVjdGlvbiIsImNhdGVnb3J5SWQiLCJ1bmRlZmluZWQiLCJ0aW1pbmciLCJ0b1ZhbHVlIiwiZHVyYXRpb24iLCJ1c2VOYXRpdmVEcml2ZXIiLCJzdGFydCIsImhhbmRsZUNhdGVnb3J5UHJlc3MiLCJ1c2VDYWxsYmFjayIsInJlbmRlckNhdGVnb3J5UGlsbCIsImlzU2VsZWN0ZWQiLCJhbmltYXRpb24iLCJzY2FsZSIsImludGVycG9sYXRlIiwiaW5wdXRSYW5nZSIsIm91dHB1dFJhbmdlIiwic2hhZG93T3BhY2l0eSIsImJvcmRlcldpZHRoIiwianN4IiwiVmlldyIsInN0eWxlIiwiY2F0ZWdvcnlJdGVtV3JhcHBlciIsInRyYW5zZm9ybSIsImNoaWxkcmVuIiwiVG91Y2hhYmxlT3BhY2l0eSIsImNhdGVnb3J5VG91Y2hhYmxlIiwib25QcmVzcyIsImFjdGl2ZU9wYWNpdHkiLCJhY2Nlc3NpYmlsaXR5Um9sZSIsImFjY2Vzc2liaWxpdHlMYWJlbCIsIlN0cmluZyIsIm5hbWUiLCJhY2Nlc3NpYmlsaXR5U3RhdGUiLCJzZWxlY3RlZCIsIkxpbmVhckdyYWRpZW50IiwiY29sb3JzIiwieCIsInkiLCJlbmQiLCJzZWxlY3RlZENhdGVnb3J5SXRlbSIsImpzeHMiLCJzZWxlY3RlZElubmVyIiwiVGV4dCIsInNlbGVjdGVkQ2F0ZWdvcnlUZXh0Iiwic3BhcmtsZUNvbnRhaW5lciIsInNwYXJrbGUiLCJjYXRlZ29yeUl0ZW0iLCJib3JkZXJDb2xvciIsImNhdGVnb3J5SW5uZXIiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjYXRlZ29yeVRleHQiLCJjb2xvciIsImNvbnRhaW5lciIsImJhY2tncm91bmRHcmFkaWVudCIsIlNjcm9sbFZpZXciLCJob3Jpem9udGFsIiwic2hvd3NIb3Jpem9udGFsU2Nyb2xsSW5kaWNhdG9yIiwiY29udGVudENvbnRhaW5lclN0eWxlIiwic2Nyb2xsQ29udGVudCIsInNjcm9sbFZpZXciLCJtYXAiLCJhcmVFcXVhbCIsInByZXZQcm9wcyIsIm5leHRQcm9wcyIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1lbW8iXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvY29tcG9uZW50cy9leGVyY2lzZS1jb21tb24vQ2F0ZWdvcnlTZWxlY3Rvci9pbmRleC5qc1xyXG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2ssIG1lbW8gfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgVmlldywgU2Nyb2xsVmlldywgVG91Y2hhYmxlT3BhY2l0eSwgVGV4dCwgQW5pbWF0ZWQgfSBmcm9tIFwicmVhY3QtbmF0aXZlXCI7XHJcbmltcG9ydCB7IExpbmVhckdyYWRpZW50IH0gZnJvbSBcImV4cG8tbGluZWFyLWdyYWRpZW50XCI7XHJcbmltcG9ydCBjcmVhdGVTdHlsZXMgZnJvbSBcIi4vc3R5bGVcIjtcclxuXHJcbi8qKlxyXG4gKiDwn4+GIENhdGVnb3J5U2VsZWN0b3IgLSBEZXNpZ24gTml2ZWF1IExEQyAoUGFyaXMgU2FpbnQtR2VybWFpbilcclxuICogLSBQaWxscyBtb2Rlcm5lcyBhdmVjIGdsYXNzbW9ycGhpc21cclxuICogLSBBbmltYXRpb25zIGZsdWlkZXMgZGUgc8OpbGVjdGlvblxyXG4gKiAtIEdyYWRpZW50cyBkeW5hbWlxdWVzXHJcbiAqIC0gTWljcm8taW50ZXJhY3Rpb25zIHByZW1pdW1cclxuICogLSBUeXBvZ3JhcGh5IMOpbMOpZ2FudGVcclxuICovXHJcbmNvbnN0IENhdGVnb3J5U2VsZWN0b3IgPSAoe1xyXG4gIGNhdGVnb3JpZXMgPSBbXSxcclxuICBzZWxlY3RlZENhdGVnb3J5LFxyXG4gIG9uU2VsZWN0Q2F0ZWdvcnksXHJcbiAgcHJpbWFyeUNvbG9yID0gXCIjNUU2MENFXCIsXHJcbn0pID0+IHtcclxuICBjb25zdCBzdHlsZXMgPSBjcmVhdGVTdHlsZXMocHJpbWFyeUNvbG9yKTtcclxuICBjb25zdCBbYW5pbWF0aW9uc10gPSB1c2VTdGF0ZSgoKSA9PiBcclxuICAgIGNhdGVnb3JpZXMucmVkdWNlKChhY2MsIGNhdGVnb3J5KSA9PiB7XHJcbiAgICAgIGFjY1tjYXRlZ29yeS5pZF0gPSBuZXcgQW5pbWF0ZWQuVmFsdWUoc2VsZWN0ZWRDYXRlZ29yeSA9PT0gY2F0ZWdvcnkuaWQgPyAxIDogMCk7XHJcbiAgICAgIHJldHVybiBhY2M7XHJcbiAgICB9LCB7fSlcclxuICApO1xyXG5cclxuICAvLyBBbmltYXRpb24gZGUgc8OpbGVjdGlvblxyXG4gIGNvbnN0IGFuaW1hdGVTZWxlY3Rpb24gPSAoY2F0ZWdvcnlJZCkgPT4ge1xyXG4gICAgLy8gQW5pbWVyIGxhIGTDqXPDqWxlY3Rpb24gZGUgbCdhbmNpZW5uZSBjYXTDqWdvcmllXHJcbiAgICBpZiAoc2VsZWN0ZWRDYXRlZ29yeSAhPT0gdW5kZWZpbmVkICYmIGFuaW1hdGlvbnNbc2VsZWN0ZWRDYXRlZ29yeV0pIHtcclxuICAgICAgQW5pbWF0ZWQudGltaW5nKGFuaW1hdGlvbnNbc2VsZWN0ZWRDYXRlZ29yeV0sIHtcclxuICAgICAgICB0b1ZhbHVlOiAwLFxyXG4gICAgICAgIGR1cmF0aW9uOiAyMDAsXHJcbiAgICAgICAgdXNlTmF0aXZlRHJpdmVyOiBmYWxzZSxcclxuICAgICAgfSkuc3RhcnQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBBbmltZXIgbGEgc8OpbGVjdGlvbiBkZSBsYSBub3V2ZWxsZSBjYXTDqWdvcmllXHJcbiAgICBpZiAoYW5pbWF0aW9uc1tjYXRlZ29yeUlkXSkge1xyXG4gICAgICBBbmltYXRlZC50aW1pbmcoYW5pbWF0aW9uc1tjYXRlZ29yeUlkXSwge1xyXG4gICAgICAgIHRvVmFsdWU6IDEsXHJcbiAgICAgICAgZHVyYXRpb246IDMwMCxcclxuICAgICAgICB1c2VOYXRpdmVEcml2ZXI6IGZhbHNlLFxyXG4gICAgICB9KS5zdGFydCgpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uU2VsZWN0Q2F0ZWdvcnkoY2F0ZWdvcnlJZCk7XHJcbiAgfTtcclxuXHJcbiAgLy8gRmFjdG9yeSBkZSBoYW5kbGVyIHBvdXIgw6l2aXRlciBsYSBjcsOpYXRpb24gZGUgZm9uY3Rpb25zIGlubGluZVxyXG4gIGNvbnN0IGhhbmRsZUNhdGVnb3J5UHJlc3MgPSB1c2VDYWxsYmFjaygoY2F0ZWdvcnlJZCkgPT4gKCkgPT4gYW5pbWF0ZVNlbGVjdGlvbihjYXRlZ29yeUlkKSwgW2FuaW1hdGVTZWxlY3Rpb25dKTtcclxuXHJcbiAgLy8gUmVuZHUgZCd1bmUgcGlsbCBkZSBjYXTDqWdvcmllXHJcbiAgY29uc3QgcmVuZGVyQ2F0ZWdvcnlQaWxsID0gKGNhdGVnb3J5KSA9PiB7XHJcbiAgICBjb25zdCBpc1NlbGVjdGVkID0gc2VsZWN0ZWRDYXRlZ29yeSA9PT0gY2F0ZWdvcnkuaWQ7XHJcbiAgICBjb25zdCBhbmltYXRpb24gPSBhbmltYXRpb25zW2NhdGVnb3J5LmlkXSB8fCBuZXcgQW5pbWF0ZWQuVmFsdWUoMCk7XHJcblxyXG4gICAgLy8gSW50ZXJwb2xhdGlvbnMgcG91ciBsZXMgYW5pbWF0aW9uc1xyXG4gICAgY29uc3Qgc2NhbGUgPSBhbmltYXRpb24uaW50ZXJwb2xhdGUoe1xyXG4gICAgICBpbnB1dFJhbmdlOiBbMCwgMV0sXHJcbiAgICAgIG91dHB1dFJhbmdlOiBbMSwgMS4wNV0sXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBzaGFkb3dPcGFjaXR5ID0gYW5pbWF0aW9uLmludGVycG9sYXRlKHtcclxuICAgICAgaW5wdXRSYW5nZTogWzAsIDFdLFxyXG4gICAgICBvdXRwdXRSYW5nZTogWzAuMSwgMC4yNV0sXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBib3JkZXJXaWR0aCA9IGFuaW1hdGlvbi5pbnRlcnBvbGF0ZSh7XHJcbiAgICAgIGlucHV0UmFuZ2U6IFswLCAxXSxcclxuICAgICAgb3V0cHV0UmFuZ2U6IFsxLCAyXSxcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxBbmltYXRlZC5WaWV3XHJcbiAgICAgICAga2V5PXtjYXRlZ29yeS5pZH1cclxuICAgICAgICBzdHlsZT17W1xyXG4gICAgICAgICAgc3R5bGVzLmNhdGVnb3J5SXRlbVdyYXBwZXIsXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogW3sgc2NhbGUgfV0sXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgXX1cclxuICAgICAgPlxyXG4gICAgICAgIDxUb3VjaGFibGVPcGFjaXR5XHJcbiAgICAgICAgICBzdHlsZT17c3R5bGVzLmNhdGVnb3J5VG91Y2hhYmxlfVxyXG4gICAgICAgICAgb25QcmVzcz17aGFuZGxlQ2F0ZWdvcnlQcmVzcyhjYXRlZ29yeS5pZCl9XHJcbiAgICAgICAgICBhY3RpdmVPcGFjaXR5PXswLjh9XHJcbiAgICAgICAgICBhY2Nlc3NpYmlsaXR5Um9sZT1cImJ1dHRvblwiXHJcbiAgICAgICAgICBhY2Nlc3NpYmlsaXR5TGFiZWw9e1N0cmluZyhjYXRlZ29yeS5uYW1lKX1cclxuICAgICAgICAgIGFjY2Vzc2liaWxpdHlTdGF0ZT17eyBzZWxlY3RlZDogaXNTZWxlY3RlZCB9fVxyXG4gICAgICAgID5cclxuICAgICAgICAgIHtpc1NlbGVjdGVkID8gKFxyXG4gICAgICAgICAgICAvLyDDiXRhdCBzw6lsZWN0aW9ubsOpIC0gR3JhZGllbnQgcHJlbWl1bVxyXG4gICAgICAgICAgICA8TGluZWFyR3JhZGllbnRcclxuICAgICAgICAgICAgICBjb2xvcnM9e1twcmltYXJ5Q29sb3IsIGAke3ByaW1hcnlDb2xvcn1FNmAsIGAke3ByaW1hcnlDb2xvcn1DQ2BdfVxyXG4gICAgICAgICAgICAgIHN0YXJ0PXt7IHg6IDAsIHk6IDAgfX1cclxuICAgICAgICAgICAgICBlbmQ9e3sgeDogMSwgeTogMSB9fVxyXG4gICAgICAgICAgICAgIHN0eWxlPXtzdHlsZXMuc2VsZWN0ZWRDYXRlZ29yeUl0ZW19XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICB7LyogRWZmZXQgZ2xhc3Ntb3JwaGlzbSBzdXIgbGEgcGlsbCBzw6lsZWN0aW9ubsOpZSAqL31cclxuICAgICAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLnNlbGVjdGVkSW5uZXJ9PlxyXG4gICAgICAgICAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5zZWxlY3RlZENhdGVnb3J5VGV4dH0+XHJcbiAgICAgICAgICAgICAgICAgIHtjYXRlZ29yeS5uYW1lfVxyXG4gICAgICAgICAgICAgICAgPC9UZXh0PlxyXG4gICAgICAgICAgICAgICAgey8qIEVmZmV0IHNwYXJrbGUgcG91ciBsYSBzw6lsZWN0aW9uICovfVxyXG4gICAgICAgICAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5zcGFya2xlQ29udGFpbmVyfT5cclxuICAgICAgICAgICAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5zcGFya2xlfT7inKg8L1RleHQ+XHJcbiAgICAgICAgICAgICAgICA8L1ZpZXc+XHJcbiAgICAgICAgICAgICAgPC9WaWV3PlxyXG4gICAgICAgICAgICA8L0xpbmVhckdyYWRpZW50PlxyXG4gICAgICAgICAgKSA6IChcclxuICAgICAgICAgICAgLy8gw4l0YXQgbm9uIHPDqWxlY3Rpb25uw6kgLSBHbGFzc21vcnBoaXNtIHN1YnRpbFxyXG4gICAgICAgICAgICA8QW5pbWF0ZWQuVmlld1xyXG4gICAgICAgICAgICAgIHN0eWxlPXtbXHJcbiAgICAgICAgICAgICAgICBzdHlsZXMuY2F0ZWdvcnlJdGVtLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICBib3JkZXJXaWR0aCxcclxuICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IGAke3ByaW1hcnlDb2xvcn0yMGAsXHJcbiAgICAgICAgICAgICAgICAgIHNoYWRvd09wYWNpdHksXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgXX1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIDxWaWV3IHN0eWxlPXtbc3R5bGVzLmNhdGVnb3J5SW5uZXIsIHsgYmFja2dyb3VuZENvbG9yOiBgJHtwcmltYXJ5Q29sb3J9MDhgIH1dfT5cclxuICAgICAgICAgICAgICAgIDxUZXh0IHN0eWxlPXtbc3R5bGVzLmNhdGVnb3J5VGV4dCwgeyBjb2xvcjogcHJpbWFyeUNvbG9yIH1dfT5cclxuICAgICAgICAgICAgICAgICAge2NhdGVnb3J5Lm5hbWV9XHJcbiAgICAgICAgICAgICAgICA8L1RleHQ+XHJcbiAgICAgICAgICAgICAgPC9WaWV3PlxyXG4gICAgICAgICAgICA8L0FuaW1hdGVkLlZpZXc+XHJcbiAgICAgICAgICApfVxyXG4gICAgICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cclxuICAgICAgPC9BbmltYXRlZC5WaWV3PlxyXG4gICAgKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9PlxyXG4gICAgICB7Lyog8J+OqCBHcmFkaWVudCBkZSBmb25kIHN1YnRpbCAqL31cclxuICAgICAgPExpbmVhckdyYWRpZW50XHJcbiAgICAgICAgY29sb3JzPXtbYCR7cHJpbWFyeUNvbG9yfTA0YCwgJ3RyYW5zcGFyZW50JywgYCR7cHJpbWFyeUNvbG9yfTAyYF19XHJcbiAgICAgICAgc3RhcnQ9e3sgeDogMCwgeTogMCB9fVxyXG4gICAgICAgIGVuZD17eyB4OiAxLCB5OiAwIH19XHJcbiAgICAgICAgc3R5bGU9e3N0eWxlcy5iYWNrZ3JvdW5kR3JhZGllbnR9XHJcbiAgICAgID5cclxuICAgICAgICA8U2Nyb2xsVmlld1xyXG4gICAgICAgICAgaG9yaXpvbnRhbFxyXG4gICAgICAgICAgc2hvd3NIb3Jpem9udGFsU2Nyb2xsSW5kaWNhdG9yPXtmYWxzZX1cclxuICAgICAgICAgIGNvbnRlbnRDb250YWluZXJTdHlsZT17c3R5bGVzLnNjcm9sbENvbnRlbnR9XHJcbiAgICAgICAgICBzdHlsZT17c3R5bGVzLnNjcm9sbFZpZXd9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAge2NhdGVnb3JpZXMubWFwKChjYXRlZ29yeSkgPT4gcmVuZGVyQ2F0ZWdvcnlQaWxsKGNhdGVnb3J5KSl9XHJcbiAgICAgICAgPC9TY3JvbGxWaWV3PlxyXG4gICAgICA8L0xpbmVhckdyYWRpZW50PlxyXG4gICAgPC9WaWV3PlxyXG4gICk7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBhcmVFcXVhbChwcmV2UHJvcHMsIG5leHRQcm9wcykge1xyXG4gIHJldHVybiAoXHJcbiAgICBwcmV2UHJvcHMuc2VsZWN0ZWRDYXRlZ29yeSA9PT0gbmV4dFByb3BzLnNlbGVjdGVkQ2F0ZWdvcnkgJiZcclxuICAgIHByZXZQcm9wcy5wcmltYXJ5Q29sb3IgPT09IG5leHRQcm9wcy5wcmltYXJ5Q29sb3IgJiZcclxuICAgIHByZXZQcm9wcy5jYXRlZ29yaWVzID09PSBuZXh0UHJvcHMuY2F0ZWdvcmllc1xyXG4gICk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG1lbW8oQ2F0ZWdvcnlTZWxlY3RvciwgYXJlRXF1YWwpOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsbUJB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