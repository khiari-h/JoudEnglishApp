{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_jsxRuntime","MockExerciseSelection","_ref","level","jsx","children","jsxs","MockVocabularyExercise","_ref2","_route$params","route","params","describe","beforeEach","jest","clearAllMocks","test","_asyncToGenerator2","default","_render","render","undefined","toJSON","expect","toBeNull","_render2","queryByText","_render3","getByText","toBeTruthy","_render4","getByTestId","_render5","mode","_render6","_render7","_render8","_render9","queryByTestId","_render0","_render1","_render10"],"sources":["robustesse-navigation.test.js"],"sourcesContent":["import React from 'react';\nimport { render, waitFor } from '@testing-library/react-native';\n\n// Mock simple et direct\nconst MockExerciseSelection = ({ level }) => {\n  if (!level) return null;\n  if (level === 'invalid_level') return <div data-testid=\"invalid-level\">Niveau invalide</div>;\n  return (\n    <div>\n      <div>Choisissez votre exercice</div>\n      <div>Niveau Débutant A1</div>\n    </div>\n  );\n};\n\nconst MockVocabularyExercise = ({ route }) => {\n  const level = route?.params?.level;\n  if (!level) return <div data-testid=\"activity-indicator\">Loading...</div>;\n  if (level === 'A1') {\n    return (\n      <div>\n        <div>name</div>\n        <div>nom</div>\n      </div>\n    );\n  }\n  return <div data-testid=\"activity-indicator\">Loading...</div>;\n};\n\ndescribe('Test d\\'intégration: Robustesse de la navigation', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('ExerciseSelection - Gestion des niveaux manquants', () => {\n    test('Affiche un état contrôlé quand aucun niveau n\\'est fourni', async () => {\n      const { toJSON } = render(<MockExerciseSelection level={undefined} />);\n      expect(toJSON()).toBeNull();\n    });\n\n    test('Affiche un état contrôlé avec un niveau invalide', async () => {\n      const { queryByText } = render(<MockExerciseSelection level=\"invalid_level\" />);\n      expect(queryByText('name')).toBeNull();\n      expect(queryByText('rhetoric')).toBeNull();\n    });\n\n    test('Fonctionne correctement avec un niveau valide', async () => {\n      const { getByText } = render(<MockExerciseSelection level=\"1\" />);\n      expect(getByText(/Choisissez votre exercice/i)).toBeTruthy();\n      expect(getByText(/Niveau Débutant A1/i)).toBeTruthy();\n    });\n  });\n\n  describe('VocabularyExercise - Gestion des paramètres manquants', () => {\n    test('Affiche un indicateur de chargement sans paramètre de niveau', async () => {\n      const { getByTestId, queryByText } = render(\n        <MockVocabularyExercise route={{ params: {} }} />\n      );\n      expect(getByTestId('activity-indicator')).toBeTruthy();\n      expect(queryByText('name')).toBeNull();\n    });\n\n    test('Affiche un indicateur de chargement avec un niveau undefined', async () => {\n      const { getByTestId, queryByText } = render(\n        <MockVocabularyExercise route={{ params: { level: undefined, mode: 'classic' } }} />\n      );\n      expect(getByTestId('activity-indicator')).toBeTruthy();\n      expect(queryByText('name')).toBeNull();\n    });\n\n    test('Affiche un indicateur de chargement avec un niveau invalide', async () => {\n      const { getByTestId, queryByText } = render(\n        <MockVocabularyExercise route={{ params: { level: 'invalid_level', mode: 'classic' } }} />\n      );\n      expect(getByTestId('activity-indicator')).toBeTruthy();\n      expect(queryByText('name')).toBeNull();\n    });\n\n    test('Gère gracieusement l\\'absence de mode', async () => {\n      const { getByText } = render(\n        <MockVocabularyExercise route={{ params: { level: 'A1' } }} />\n      );\n      expect(getByText('name')).toBeTruthy();\n    });\n\n    test('Gère correctement les paramètres de route malformés', async () => {\n      const { getByTestId } = render(\n        <MockVocabularyExercise route={{}} />\n      );\n      expect(getByTestId('activity-indicator')).toBeTruthy();\n    });\n\n    test('Fonctionne correctement avec des paramètres valides', async () => {\n      const { getByText, queryByTestId } = render(\n        <MockVocabularyExercise route={{ params: { level: 'A1', mode: 'classic' } }} />\n      );\n      expect(getByText('name')).toBeTruthy();\n      expect(getByText('nom')).toBeTruthy();\n      expect(queryByTestId('activity-indicator')).toBeNull();\n    });\n  });\n\n  describe('Cas limites et edge cases', () => {\n    test('Gère les valeurs null dans les paramètres', async () => {\n      const { getByTestId } = render(\n        <MockVocabularyExercise route={{ params: { level: null, mode: null } }} />\n      );\n      expect(getByTestId('activity-indicator')).toBeTruthy();\n    });\n\n    test('Gère les chaînes vides dans les paramètres', async () => {\n      const { getByTestId } = render(\n        <MockVocabularyExercise route={{ params: { level: '', mode: '' } }} />\n      );\n      expect(getByTestId('activity-indicator')).toBeTruthy();\n    });\n\n    test('Gère les types de données inattendus', async () => {\n      const { getByTestId } = render(\n        <MockVocabularyExercise route={{ params: { level: 123, mode: {} } }} />\n      );\n      expect(getByTestId('activity-indicator')).toBeTruthy();\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}