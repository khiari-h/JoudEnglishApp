{"version":3,"names":["_react","require","_asyncStorage","_interopRequireDefault","_vocabularyDataHelper","processWordRef","wordRef","category","wordIndex","timestamp","Date","now","undefined","foundIndex","words","findIndex","w","word","createLearnedWord","realWord","levelKey","mode","catIndex","translation","definition","example","fromLevel","fromMode","categoryIndex","uniqueId","loadLevelData","_ref","_asyncToGenerator2","default","learnedWords","storageKey","stored","AsyncStorage","getItem","data","JSON","parse","completedWordsRefs","completedWords","Object","keys","length","originalData","getVocabularyData","exercises","entries","forEach","_ref2","_ref3","_slicedToArray2","wordRefs","Array","isArray","parseInt","_processWordRef","learnedWord","push","storageError","console","error","_x","_x2","_x3","apply","arguments","generateQuestionChoices","allLearnedWords","otherWords","filter","wrongAnswers","sort","Math","random","slice","map","_fallbackData$exercis","fallbackData","needed","randomFallback","includes","concat","_toConsumableArray2","choices","calculateStats","revisionQuestions","totalLearned","byLevel","byMode","questionsGenerated","useRevisionData","level","questionsCount","_useState","useState","_useState2","setAllLearnedWords","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","setError","useEffect","loadLearnedWords","_ref4","levels","modes","uniqueWords","index","self","mainError","message","useMemo","shuffledWords","selectedWords","min","questionsWithChoices","assign","correctAnswer","stats","hasEnoughWords","canGenerateQuestions","_default","exports"],"sources":["useRevisionData.js"],"sourcesContent":["// src/hooks/useRevisionData.js - REFACTORISÉ pour réduire la complexité cognitive\r\nimport { useState, useEffect, useMemo } from 'react';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { getVocabularyData } from '../utils/vocabulary/vocabularyDataHelper';\r\n\r\n// Fonction utilitaire pour traiter les différents formats de wordRef\r\nconst processWordRef = (wordRef, category) => {\r\n  let wordIndex;\r\n  let timestamp = Date.now();\r\n  \r\n  // Support nouveau format (objet avec wordIndex + timestamp)\r\n  if (typeof wordRef === 'object' && wordRef.wordIndex !== undefined) {\r\n    wordIndex = wordRef.wordIndex;\r\n    timestamp = wordRef.timestamp || timestamp;\r\n  } \r\n  // Support ancien format (juste l'index)\r\n  else if (typeof wordRef === 'number') {\r\n    wordIndex = wordRef;\r\n  }\r\n  // Support très ancien format (string du mot)\r\n  else if (typeof wordRef === 'string') {\r\n    const foundIndex = category.words.findIndex(w => w.word === wordRef);\r\n    if (foundIndex !== -1) wordIndex = foundIndex;\r\n  }\r\n  \r\n  return { wordIndex, timestamp };\r\n};\r\n\r\n// Fonction pour créer un mot appris avec métadonnées\r\nconst createLearnedWord = (realWord, levelKey, mode, catIndex, wordIndex, timestamp) => ({\r\n  // Données du mot\r\n  word: realWord.word,\r\n  translation: realWord.translation,\r\n  definition: realWord.definition || '',\r\n  example: realWord.example || '',\r\n  \r\n  // Métadonnées\r\n  fromLevel: levelKey,\r\n  fromMode: mode,\r\n  categoryIndex: catIndex,\r\n  wordIndex,\r\n  timestamp,\r\n  \r\n  // ID unique pour éviter doublons\r\n  uniqueId: `${levelKey}_${mode}_${catIndex}_${wordIndex}`\r\n});\r\n\r\n// Fonction pour charger les données d'un niveau spécifique\r\nconst loadLevelData = async (levelKey, mode, learnedWords) => {\r\n  const storageKey = `vocabulary_${levelKey}_${mode}`;\r\n  \r\n  try {\r\n    const stored = await AsyncStorage.getItem(storageKey);\r\n    if (!stored) return;\r\n\r\n    const data = JSON.parse(stored);\r\n    const completedWordsRefs = data.completedWords || {};\r\n    \r\n    if (Object.keys(completedWordsRefs).length === 0) return;\r\n    \r\n    // Récupérer les données originales du vocabulaire\r\n    const originalData = getVocabularyData(levelKey, mode);\r\n    if (!originalData?.exercises) return;\r\n    \r\n    // Traiter chaque catégorie\r\n    Object.entries(completedWordsRefs).forEach(([categoryIndex, wordRefs]) => {\r\n      if (!Array.isArray(wordRefs) || wordRefs.length === 0) return;\r\n      \r\n      const catIndex = parseInt(categoryIndex);\r\n      const category = originalData.exercises[catIndex];\r\n      \r\n      if (!category?.words) return;\r\n      \r\n      // Récupérer chaque mot appris\r\n      wordRefs.forEach((wordRef) => {\r\n        const { wordIndex, timestamp } = processWordRef(wordRef, category);\r\n        \r\n        // Récupérer le vrai mot depuis les données originales\r\n        if (wordIndex !== undefined && category.words[wordIndex]) {\r\n          const realWord = category.words[wordIndex];\r\n          const learnedWord = createLearnedWord(realWord, levelKey, mode, catIndex, wordIndex, timestamp);\r\n          learnedWords.push(learnedWord);\r\n        }\r\n      });\r\n    });\r\n  } catch (storageError) {\r\n    console.error(`❌ Erreur traitement ${storageKey}:`, storageError);\r\n  }\r\n};\r\n\r\n// Fonction pour générer les choix de réponses d'une question\r\nconst generateQuestionChoices = (word, allLearnedWords) => {\r\n  // Pool des autres mots pour les mauvaises réponses\r\n  const otherWords = allLearnedWords.filter(w => w.uniqueId !== word.uniqueId);\r\n  \r\n  // Prendre 3 mauvaises réponses\r\n  let wrongAnswers = otherWords\r\n    .sort(() => Math.random() - 0.5)\r\n    .slice(0, 3)\r\n    .map(w => w.translation);\r\n  \r\n  // Si pas assez de mauvaises réponses, compléter avec dataset de fallback\r\n  if (wrongAnswers.length < 3) {\r\n    const fallbackData = getVocabularyData('1', 'classic');\r\n    if (fallbackData?.exercises?.[0]?.words) {\r\n      const needed = 3 - wrongAnswers.length;\r\n      const randomFallback = fallbackData.exercises[0].words\r\n        .sort(() => Math.random() - 0.5)\r\n        .filter(w => !wrongAnswers.includes(w.translation) && w.translation !== word.translation)\r\n        .slice(0, needed)\r\n        .map(w => w.translation);\r\n      \r\n      wrongAnswers = [...wrongAnswers, ...randomFallback];\r\n    }\r\n  }\r\n  \r\n  // Mélanger toutes les réponses\r\n  const choices = [word.translation, ...wrongAnswers.slice(0, 3)]\r\n    .sort(() => Math.random() - 0.5);\r\n  \r\n  return choices;\r\n};\r\n\r\n// Fonction pour calculer les statistiques\r\nconst calculateStats = (allLearnedWords, revisionQuestions) => {\r\n  const totalLearned = allLearnedWords.length;\r\n  const byLevel = {};\r\n  const byMode = {};\r\n  \r\n  allLearnedWords.forEach(word => {\r\n    byLevel[word.fromLevel] = (byLevel[word.fromLevel] || 0) + 1;\r\n    byMode[word.fromMode] = (byMode[word.fromMode] || 0) + 1;\r\n  });\r\n  \r\n  return {\r\n    totalLearned,\r\n    byLevel,\r\n    byMode,\r\n    questionsGenerated: revisionQuestions.length\r\n  };\r\n};\r\n\r\nconst useRevisionData = (level = \"mixed\", questionsCount = 10) => {\r\n  const [allLearnedWords, setAllLearnedWords] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // ========== RÉCUPÉRATION DES MOTS APPRIS ==========\r\n  useEffect(() => {\r\n    const loadLearnedWords = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        const learnedWords = [];\r\n        \r\n        const levels = level === \"mixed\" ? ['1', '2', '3', '4', '5', '6', 'bonus'] : [level];\r\n        const modes = ['classic', 'fast'];\r\n\r\n        // Charger les données de chaque niveau et mode\r\n        for (const levelKey of levels) {\r\n          for (const mode of modes) {\r\n            await loadLevelData(levelKey, mode, learnedWords);\r\n          }\r\n        }\r\n        \r\n        // Supprimer les doublons potentiels basés sur uniqueId\r\n        const uniqueWords = learnedWords.filter((word, index, self) => \r\n          index === self.findIndex(w => w.uniqueId === word.uniqueId)\r\n        );\r\n        \r\n        setAllLearnedWords(uniqueWords);\r\n        \r\n      } catch (mainError) {\r\n        console.error('❌ Erreur générale useRevisionData:', mainError);\r\n        setError(mainError.message);\r\n        setAllLearnedWords([]);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    loadLearnedWords();\r\n  }, [level]); // Recharger si le niveau change\r\n\r\n  // ========== GÉNÉRATION DES QUESTIONS ==========\r\n  const revisionQuestions = useMemo(() => {\r\n    if (allLearnedWords.length === 0) return [];\r\n\r\n    // Mélanger et sélectionner\r\n    const shuffledWords = [...allLearnedWords].sort(() => Math.random() - 0.5);\r\n    const selectedWords = shuffledWords.slice(0, Math.min(questionsCount, allLearnedWords.length));\r\n    \r\n    // Générer les questions avec choix\r\n    const questionsWithChoices = selectedWords.map((word) => {\r\n      const choices = generateQuestionChoices(word, allLearnedWords);\r\n      \r\n      return {\r\n        ...word,\r\n        choices,\r\n        correctAnswer: word.translation\r\n      };\r\n    });\r\n\r\n    return questionsWithChoices;\r\n    \r\n  }, [allLearnedWords, questionsCount]);\r\n\r\n  // ========== STATISTIQUES ==========\r\n  const stats = useMemo(() => {\r\n    return calculateStats(allLearnedWords, revisionQuestions);\r\n  }, [allLearnedWords, revisionQuestions]);\r\n\r\n  return {\r\n    // Données principales\r\n    allLearnedWords,\r\n    revisionQuestions,\r\n    \r\n    // État\r\n    isLoading,\r\n    error,\r\n    \r\n    // Statistiques\r\n    stats,\r\n    \r\n    // Méthodes utiles\r\n    hasEnoughWords: allLearnedWords.length > 0,\r\n    canGenerateQuestions: revisionQuestions.length > 0\r\n  };\r\n};\r\n\r\nexport default useRevisionData;"],"mappings":";;;;;;;;AACA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,aAAA,GAAAC,sBAAA,CAAAF,OAAA;AACA,IAAAG,qBAAA,GAAAH,OAAA;AAGA,IAAMI,cAAc,GAAG,SAAjBA,cAAcA,CAAIC,OAAO,EAAEC,QAAQ,EAAK;EAC5C,IAAIC,SAAS;EACb,IAAIC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;EAG1B,IAAI,OAAOL,OAAO,KAAK,QAAQ,IAAIA,OAAO,CAACE,SAAS,KAAKI,SAAS,EAAE;IAClEJ,SAAS,GAAGF,OAAO,CAACE,SAAS;IAC7BC,SAAS,GAAGH,OAAO,CAACG,SAAS,IAAIA,SAAS;EAC5C,CAAC,MAEI,IAAI,OAAOH,OAAO,KAAK,QAAQ,EAAE;IACpCE,SAAS,GAAGF,OAAO;EACrB,CAAC,MAEI,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IACpC,IAAMO,UAAU,GAAGN,QAAQ,CAACO,KAAK,CAACC,SAAS,CAAC,UAAAC,CAAC;MAAA,OAAIA,CAAC,CAACC,IAAI,KAAKX,OAAO;IAAA,EAAC;IACpE,IAAIO,UAAU,KAAK,CAAC,CAAC,EAAEL,SAAS,GAAGK,UAAU;EAC/C;EAEA,OAAO;IAAEL,SAAS,EAATA,SAAS;IAAEC,SAAS,EAATA;EAAU,CAAC;AACjC,CAAC;AAGD,IAAMS,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAIC,QAAQ,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,QAAQ,EAAEd,SAAS,EAAEC,SAAS;EAAA,OAAM;IAEvFQ,IAAI,EAAEE,QAAQ,CAACF,IAAI;IACnBM,WAAW,EAAEJ,QAAQ,CAACI,WAAW;IACjCC,UAAU,EAAEL,QAAQ,CAACK,UAAU,IAAI,EAAE;IACrCC,OAAO,EAAEN,QAAQ,CAACM,OAAO,IAAI,EAAE;IAG/BC,SAAS,EAAEN,QAAQ;IACnBO,QAAQ,EAAEN,IAAI;IACdO,aAAa,EAAEN,QAAQ;IACvBd,SAAS,EAATA,SAAS;IACTC,SAAS,EAATA,SAAS;IAGToB,QAAQ,EAAE,GAAGT,QAAQ,IAAIC,IAAI,IAAIC,QAAQ,IAAId,SAAS;EACxD,CAAC;AAAA,CAAC;AAGF,IAAMsB,aAAa;EAAA,IAAAC,IAAA,OAAAC,kBAAA,CAAAC,OAAA,EAAG,WAAOb,QAAQ,EAAEC,IAAI,EAAEa,YAAY,EAAK;IAC5D,IAAMC,UAAU,GAAG,cAAcf,QAAQ,IAAIC,IAAI,EAAE;IAEnD,IAAI;MACF,IAAMe,MAAM,SAASC,qBAAY,CAACC,OAAO,CAACH,UAAU,CAAC;MACrD,IAAI,CAACC,MAAM,EAAE;MAEb,IAAMG,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACL,MAAM,CAAC;MAC/B,IAAMM,kBAAkB,GAAGH,IAAI,CAACI,cAAc,IAAI,CAAC,CAAC;MAEpD,IAAIC,MAAM,CAACC,IAAI,CAACH,kBAAkB,CAAC,CAACI,MAAM,KAAK,CAAC,EAAE;MAGlD,IAAMC,YAAY,GAAG,IAAAC,uCAAiB,EAAC5B,QAAQ,EAAEC,IAAI,CAAC;MACtD,IAAI,EAAC0B,YAAY,YAAZA,YAAY,CAAEE,SAAS,GAAE;MAG9BL,MAAM,CAACM,OAAO,CAACR,kBAAkB,CAAC,CAACS,OAAO,CAAC,UAAAC,KAAA,EAA+B;QAAA,IAAAC,KAAA,OAAAC,eAAA,CAAArB,OAAA,EAAAmB,KAAA;UAA7BxB,aAAa,GAAAyB,KAAA;UAAEE,QAAQ,GAAAF,KAAA;QAClE,IAAI,CAACG,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,IAAIA,QAAQ,CAACT,MAAM,KAAK,CAAC,EAAE;QAEvD,IAAMxB,QAAQ,GAAGoC,QAAQ,CAAC9B,aAAa,CAAC;QACxC,IAAMrB,QAAQ,GAAGwC,YAAY,CAACE,SAAS,CAAC3B,QAAQ,CAAC;QAEjD,IAAI,EAACf,QAAQ,YAARA,QAAQ,CAAEO,KAAK,GAAE;QAGtByC,QAAQ,CAACJ,OAAO,CAAC,UAAC7C,OAAO,EAAK;UAC5B,IAAAqD,eAAA,GAAiCtD,cAAc,CAACC,OAAO,EAAEC,QAAQ,CAAC;YAA1DC,SAAS,GAAAmD,eAAA,CAATnD,SAAS;YAAEC,SAAS,GAAAkD,eAAA,CAATlD,SAAS;UAG5B,IAAID,SAAS,KAAKI,SAAS,IAAIL,QAAQ,CAACO,KAAK,CAACN,SAAS,CAAC,EAAE;YACxD,IAAMW,QAAQ,GAAGZ,QAAQ,CAACO,KAAK,CAACN,SAAS,CAAC;YAC1C,IAAMoD,WAAW,GAAG1C,iBAAiB,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,QAAQ,EAAEd,SAAS,EAAEC,SAAS,CAAC;YAC/FyB,YAAY,CAAC2B,IAAI,CAACD,WAAW,CAAC;UAChC;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOE,YAAY,EAAE;MACrBC,OAAO,CAACC,KAAK,CAAC,uBAAuB7B,UAAU,GAAG,EAAE2B,YAAY,CAAC;IACnE;EACF,CAAC;EAAA,gBAxCKhC,aAAaA,CAAAmC,EAAA,EAAAC,GAAA,EAAAC,GAAA;IAAA,OAAApC,IAAA,CAAAqC,KAAA,OAAAC,SAAA;EAAA;AAAA,GAwClB;AAGD,IAAMC,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAAIrD,IAAI,EAAEsD,eAAe,EAAK;EAEzD,IAAMC,UAAU,GAAGD,eAAe,CAACE,MAAM,CAAC,UAAAzD,CAAC;IAAA,OAAIA,CAAC,CAACa,QAAQ,KAAKZ,IAAI,CAACY,QAAQ;EAAA,EAAC;EAG5E,IAAI6C,YAAY,GAAGF,UAAU,CAC1BG,IAAI,CAAC;IAAA,OAAMC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;EAAA,EAAC,CAC/BC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CACXC,GAAG,CAAC,UAAA/D,CAAC;IAAA,OAAIA,CAAC,CAACO,WAAW;EAAA,EAAC;EAG1B,IAAImD,YAAY,CAAC5B,MAAM,GAAG,CAAC,EAAE;IAAA,IAAAkC,qBAAA;IAC3B,IAAMC,YAAY,GAAG,IAAAjC,uCAAiB,EAAC,GAAG,EAAE,SAAS,CAAC;IACtD,IAAIiC,YAAY,aAAAD,qBAAA,GAAZC,YAAY,CAAEhC,SAAS,cAAA+B,qBAAA,GAAvBA,qBAAA,CAA0B,CAAC,CAAC,aAA5BA,qBAAA,CAA8BlE,KAAK,EAAE;MACvC,IAAMoE,MAAM,GAAG,CAAC,GAAGR,YAAY,CAAC5B,MAAM;MACtC,IAAMqC,cAAc,GAAGF,YAAY,CAAChC,SAAS,CAAC,CAAC,CAAC,CAACnC,KAAK,CACnD6D,IAAI,CAAC;QAAA,OAAMC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;MAAA,EAAC,CAC/BJ,MAAM,CAAC,UAAAzD,CAAC;QAAA,OAAI,CAAC0D,YAAY,CAACU,QAAQ,CAACpE,CAAC,CAACO,WAAW,CAAC,IAAIP,CAAC,CAACO,WAAW,KAAKN,IAAI,CAACM,WAAW;MAAA,EAAC,CACxFuD,KAAK,CAAC,CAAC,EAAEI,MAAM,CAAC,CAChBH,GAAG,CAAC,UAAA/D,CAAC;QAAA,OAAIA,CAAC,CAACO,WAAW;MAAA,EAAC;MAE1BmD,YAAY,MAAAW,MAAA,KAAAC,mBAAA,CAAArD,OAAA,EAAOyC,YAAY,OAAAY,mBAAA,CAAArD,OAAA,EAAKkD,cAAc,EAAC;IACrD;EACF;EAGA,IAAMI,OAAO,GAAG,CAACtE,IAAI,CAACM,WAAW,EAAA8D,MAAA,KAAAC,mBAAA,CAAArD,OAAA,EAAKyC,YAAY,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAC3DH,IAAI,CAAC;IAAA,OAAMC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;EAAA,EAAC;EAElC,OAAOU,OAAO;AAChB,CAAC;AAGD,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAAIjB,eAAe,EAAEkB,iBAAiB,EAAK;EAC7D,IAAMC,YAAY,GAAGnB,eAAe,CAACzB,MAAM;EAC3C,IAAM6C,OAAO,GAAG,CAAC,CAAC;EAClB,IAAMC,MAAM,GAAG,CAAC,CAAC;EAEjBrB,eAAe,CAACpB,OAAO,CAAC,UAAAlC,IAAI,EAAI;IAC9B0E,OAAO,CAAC1E,IAAI,CAACS,SAAS,CAAC,GAAG,CAACiE,OAAO,CAAC1E,IAAI,CAACS,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC;IAC5DkE,MAAM,CAAC3E,IAAI,CAACU,QAAQ,CAAC,GAAG,CAACiE,MAAM,CAAC3E,IAAI,CAACU,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;EAC1D,CAAC,CAAC;EAEF,OAAO;IACL+D,YAAY,EAAZA,YAAY;IACZC,OAAO,EAAPA,OAAO;IACPC,MAAM,EAANA,MAAM;IACNC,kBAAkB,EAAEJ,iBAAiB,CAAC3C;EACxC,CAAC;AACH,CAAC;AAED,IAAMgD,eAAe,GAAG,SAAlBA,eAAeA,CAAA,EAA6C;EAAA,IAAzCC,KAAK,GAAA1B,SAAA,CAAAvB,MAAA,QAAAuB,SAAA,QAAAzD,SAAA,GAAAyD,SAAA,MAAG,OAAO;EAAA,IAAE2B,cAAc,GAAA3B,SAAA,CAAAvB,MAAA,QAAAuB,SAAA,QAAAzD,SAAA,GAAAyD,SAAA,MAAG,EAAE;EAC3D,IAAA4B,SAAA,GAA8C,IAAAC,eAAQ,EAAC,EAAE,CAAC;IAAAC,UAAA,OAAA7C,eAAA,CAAArB,OAAA,EAAAgE,SAAA;IAAnD1B,eAAe,GAAA4B,UAAA;IAAEC,kBAAkB,GAAAD,UAAA;EAC1C,IAAAE,UAAA,GAAkC,IAAAH,eAAQ,EAAC,IAAI,CAAC;IAAAI,UAAA,OAAAhD,eAAA,CAAArB,OAAA,EAAAoE,UAAA;IAAzCE,SAAS,GAAAD,UAAA;IAAEE,YAAY,GAAAF,UAAA;EAC9B,IAAAG,UAAA,GAA0B,IAAAP,eAAQ,EAAC,IAAI,CAAC;IAAAQ,UAAA,OAAApD,eAAA,CAAArB,OAAA,EAAAwE,UAAA;IAAjCzC,KAAK,GAAA0C,UAAA;IAAEC,QAAQ,GAAAD,UAAA;EAGtB,IAAAE,gBAAS,EAAC,YAAM;IACd,IAAMC,gBAAgB;MAAA,IAAAC,KAAA,OAAA9E,kBAAA,CAAAC,OAAA,EAAG,aAAY;QACnC,IAAI;UACFuE,YAAY,CAAC,IAAI,CAAC;UAClBG,QAAQ,CAAC,IAAI,CAAC;UACd,IAAMzE,YAAY,GAAG,EAAE;UAEvB,IAAM6E,MAAM,GAAGhB,KAAK,KAAK,OAAO,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,CAACA,KAAK,CAAC;UACpF,IAAMiB,KAAK,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC;UAGjC,KAAK,IAAM5F,QAAQ,IAAI2F,MAAM,EAAE;YAC7B,KAAK,IAAM1F,IAAI,IAAI2F,KAAK,EAAE;cACxB,MAAMlF,aAAa,CAACV,QAAQ,EAAEC,IAAI,EAAEa,YAAY,CAAC;YACnD;UACF;UAGA,IAAM+E,WAAW,GAAG/E,YAAY,CAACuC,MAAM,CAAC,UAACxD,IAAI,EAAEiG,KAAK,EAAEC,IAAI;YAAA,OACxDD,KAAK,KAAKC,IAAI,CAACpG,SAAS,CAAC,UAAAC,CAAC;cAAA,OAAIA,CAAC,CAACa,QAAQ,KAAKZ,IAAI,CAACY,QAAQ;YAAA,EAAC;UAAA,CAC7D,CAAC;UAEDuE,kBAAkB,CAACa,WAAW,CAAC;QAEjC,CAAC,CAAC,OAAOG,SAAS,EAAE;UAClBrD,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAEoD,SAAS,CAAC;UAC9DT,QAAQ,CAACS,SAAS,CAACC,OAAO,CAAC;UAC3BjB,kBAAkB,CAAC,EAAE,CAAC;QACxB,CAAC,SAAS;UACRI,YAAY,CAAC,KAAK,CAAC;QACrB;MACF,CAAC;MAAA,gBA9BKK,gBAAgBA,CAAA;QAAA,OAAAC,KAAA,CAAA1C,KAAA,OAAAC,SAAA;MAAA;IAAA,GA8BrB;IAEDwC,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,CAACd,KAAK,CAAC,CAAC;EAGX,IAAMN,iBAAiB,GAAG,IAAA6B,cAAO,EAAC,YAAM;IACtC,IAAI/C,eAAe,CAACzB,MAAM,KAAK,CAAC,EAAE,OAAO,EAAE;IAG3C,IAAMyE,aAAa,GAAG,IAAAjC,mBAAA,CAAArD,OAAA,EAAIsC,eAAe,EAAEI,IAAI,CAAC;MAAA,OAAMC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;IAAA,EAAC;IAC1E,IAAM2C,aAAa,GAAGD,aAAa,CAACzC,KAAK,CAAC,CAAC,EAAEF,IAAI,CAAC6C,GAAG,CAACzB,cAAc,EAAEzB,eAAe,CAACzB,MAAM,CAAC,CAAC;IAG9F,IAAM4E,oBAAoB,GAAGF,aAAa,CAACzC,GAAG,CAAC,UAAC9D,IAAI,EAAK;MACvD,IAAMsE,OAAO,GAAGjB,uBAAuB,CAACrD,IAAI,EAAEsD,eAAe,CAAC;MAE9D,OAAA3B,MAAA,CAAA+E,MAAA,KACK1G,IAAI;QACPsE,OAAO,EAAPA,OAAO;QACPqC,aAAa,EAAE3G,IAAI,CAACM;MAAW;IAEnC,CAAC,CAAC;IAEF,OAAOmG,oBAAoB;EAE7B,CAAC,EAAE,CAACnD,eAAe,EAAEyB,cAAc,CAAC,CAAC;EAGrC,IAAM6B,KAAK,GAAG,IAAAP,cAAO,EAAC,YAAM;IAC1B,OAAO9B,cAAc,CAACjB,eAAe,EAAEkB,iBAAiB,CAAC;EAC3D,CAAC,EAAE,CAAClB,eAAe,EAAEkB,iBAAiB,CAAC,CAAC;EAExC,OAAO;IAELlB,eAAe,EAAfA,eAAe;IACfkB,iBAAiB,EAAjBA,iBAAiB;IAGjBc,SAAS,EAATA,SAAS;IACTvC,KAAK,EAALA,KAAK;IAGL6D,KAAK,EAALA,KAAK;IAGLC,cAAc,EAAEvD,eAAe,CAACzB,MAAM,GAAG,CAAC;IAC1CiF,oBAAoB,EAAEtC,iBAAiB,CAAC3C,MAAM,GAAG;EACnD,CAAC;AACH,CAAC;AAAC,IAAAkF,QAAA,GAAAC,OAAA,CAAAhG,OAAA,GAEa6D,eAAe","ignoreList":[]}