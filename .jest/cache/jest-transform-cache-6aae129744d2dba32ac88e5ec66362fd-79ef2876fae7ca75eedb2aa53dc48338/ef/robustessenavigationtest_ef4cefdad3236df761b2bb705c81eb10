d3e70f677ae55175ab733e94f36a875d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _jsxRuntime = require("react/jsx-runtime");
var MockExerciseSelection = function MockExerciseSelection(_ref) {
  var level = _ref.level;
  if (!level) return null;
  if (level === 'invalid_level') return (0, _jsxRuntime.jsx)("div", {
    "data-testid": "invalid-level",
    children: "Niveau invalide"
  });
  return (0, _jsxRuntime.jsxs)("div", {
    children: [(0, _jsxRuntime.jsx)("div", {
      children: "Choisissez votre exercice"
    }), (0, _jsxRuntime.jsx)("div", {
      children: "Niveau D\xE9butant A1"
    })]
  });
};
var MockVocabularyExercise = function MockVocabularyExercise(_ref2) {
  var _route$params;
  var route = _ref2.route;
  var level = route == null || (_route$params = route.params) == null ? void 0 : _route$params.level;
  if (!level) return (0, _jsxRuntime.jsx)("div", {
    "data-testid": "activity-indicator",
    children: "Loading..."
  });
  if (level === 'A1') {
    return (0, _jsxRuntime.jsxs)("div", {
      children: [(0, _jsxRuntime.jsx)("div", {
        children: "name"
      }), (0, _jsxRuntime.jsx)("div", {
        children: "nom"
      })]
    });
  }
  return (0, _jsxRuntime.jsx)("div", {
    "data-testid": "activity-indicator",
    children: "Loading..."
  });
};
describe('Test d\'intégration: Robustesse de la navigation', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('ExerciseSelection - Gestion des niveaux manquants', function () {
    test('Affiche un état contrôlé quand aucun niveau n\'est fourni', (0, _asyncToGenerator2.default)(function* () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockExerciseSelection, {
          level: undefined
        })),
        toJSON = _render.toJSON;
      expect(toJSON()).toBeNull();
    }));
    test('Affiche un état contrôlé avec un niveau invalide', (0, _asyncToGenerator2.default)(function* () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockExerciseSelection, {
          level: "invalid_level"
        })),
        queryByText = _render2.queryByText;
      expect(queryByText('name')).toBeNull();
      expect(queryByText('rhetoric')).toBeNull();
    }));
    test('Fonctionne correctement avec un niveau valide', (0, _asyncToGenerator2.default)(function* () {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockExerciseSelection, {
          level: "1"
        })),
        getByText = _render3.getByText;
      expect(getByText(/Choisissez votre exercice/i)).toBeTruthy();
      expect(getByText(/Niveau Débutant A1/i)).toBeTruthy();
    }));
  });
  describe('VocabularyExercise - Gestion des paramètres manquants', function () {
    test('Affiche un indicateur de chargement sans paramètre de niveau', (0, _asyncToGenerator2.default)(function* () {
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockVocabularyExercise, {
          route: {
            params: {}
          }
        })),
        getByTestId = _render4.getByTestId,
        queryByText = _render4.queryByText;
      expect(getByTestId('activity-indicator')).toBeTruthy();
      expect(queryByText('name')).toBeNull();
    }));
    test('Affiche un indicateur de chargement avec un niveau undefined', (0, _asyncToGenerator2.default)(function* () {
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockVocabularyExercise, {
          route: {
            params: {
              level: undefined,
              mode: 'classic'
            }
          }
        })),
        getByTestId = _render5.getByTestId,
        queryByText = _render5.queryByText;
      expect(getByTestId('activity-indicator')).toBeTruthy();
      expect(queryByText('name')).toBeNull();
    }));
    test('Affiche un indicateur de chargement avec un niveau invalide', (0, _asyncToGenerator2.default)(function* () {
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockVocabularyExercise, {
          route: {
            params: {
              level: 'invalid_level',
              mode: 'classic'
            }
          }
        })),
        getByTestId = _render6.getByTestId,
        queryByText = _render6.queryByText;
      expect(getByTestId('activity-indicator')).toBeTruthy();
      expect(queryByText('name')).toBeNull();
    }));
    test('Gère gracieusement l\'absence de mode', (0, _asyncToGenerator2.default)(function* () {
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockVocabularyExercise, {
          route: {
            params: {
              level: 'A1'
            }
          }
        })),
        getByText = _render7.getByText;
      expect(getByText('name')).toBeTruthy();
    }));
    test('Gère correctement les paramètres de route malformés', (0, _asyncToGenerator2.default)(function* () {
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockVocabularyExercise, {
          route: {}
        })),
        getByTestId = _render8.getByTestId;
      expect(getByTestId('activity-indicator')).toBeTruthy();
    }));
    test('Fonctionne correctement avec des paramètres valides', (0, _asyncToGenerator2.default)(function* () {
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockVocabularyExercise, {
          route: {
            params: {
              level: 'A1',
              mode: 'classic'
            }
          }
        })),
        getByText = _render9.getByText,
        queryByTestId = _render9.queryByTestId;
      expect(getByText('name')).toBeTruthy();
      expect(getByText('nom')).toBeTruthy();
      expect(queryByTestId('activity-indicator')).toBeNull();
    }));
  });
  describe('Cas limites et edge cases', function () {
    test('Gère les valeurs null dans les paramètres', (0, _asyncToGenerator2.default)(function* () {
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockVocabularyExercise, {
          route: {
            params: {
              level: null,
              mode: null
            }
          }
        })),
        getByTestId = _render0.getByTestId;
      expect(getByTestId('activity-indicator')).toBeTruthy();
    }));
    test('Gère les chaînes vides dans les paramètres', (0, _asyncToGenerator2.default)(function* () {
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockVocabularyExercise, {
          route: {
            params: {
              level: '',
              mode: ''
            }
          }
        })),
        getByTestId = _render1.getByTestId;
      expect(getByTestId('activity-indicator')).toBeTruthy();
    }));
    test('Gère les types de données inattendus', (0, _asyncToGenerator2.default)(function* () {
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockVocabularyExercise, {
          route: {
            params: {
              level: 123,
              mode: {}
            }
          }
        })),
        getByTestId = _render10.getByTestId;
      expect(getByTestId('activity-indicator')).toBeTruthy();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,