821ae48dfb25ffb0ab7b6577066f0e9d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
function cov_5hez4tton() {
  var path = "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\VocabularyRevision\\components\\EmptyState.js";
  var hash = "0beaf4ff8c6752034c01175f68f415a5fc737a80";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\src\\screens\\VocabularyRevision\\components\\EmptyState.js",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 20
        },
        end: {
          line: 17,
          column: 1
        }
      },
      "1": {
        start: {
          line: 8,
          column: 21
        },
        end: {
          line: 8,
          column: 59
        }
      },
      "2": {
        start: {
          line: 9,
          column: 2
        },
        end: {
          line: 16,
          column: 4
        }
      },
      "3": {
        start: {
          line: 19,
          column: 19
        },
        end: {
          line: 66,
          column: 1
        }
      },
      "4": {
        start: {
          line: 20,
          column: 17
        },
        end: {
          line: 41,
          column: 3
        }
      },
      "5": {
        start: {
          line: 43,
          column: 39
        },
        end: {
          line: 43,
          column: 67
        }
      },
      "6": {
        start: {
          line: 45,
          column: 24
        },
        end: {
          line: 45,
          column: 109
        }
      },
      "7": {
        start: {
          line: 47,
          column: 2
        },
        end: {
          line: 65,
          column: 4
        }
      },
      "8": {
        start: {
          line: 68,
          column: 15
        },
        end: {
          line: 87,
          column: 2
        }
      },
      "9": {
        start: {
          line: 91,
          column: 0
        },
        end: {
          line: 95,
          column: 2
        }
      },
      "10": {
        start: {
          line: 98,
          column: 0
        },
        end: {
          line: 106,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 7,
            column: 21
          }
        },
        loc: {
          start: {
            line: 7,
            column: 52
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 19,
            column: 19
          },
          end: {
            line: 19,
            column: 20
          }
        },
        loc: {
          start: {
            line: 19,
            column: 89
          },
          end: {
            line: 66,
            column: 1
          }
        },
        line: 19
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 43,
            column: 39
          },
          end: {
            line: 43,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 43,
            column: 39
          },
          end: {
            line: 43,
            column: 51
          }
        }, {
          start: {
            line: 43,
            column: 55
          },
          end: {
            line: 43,
            column: 67
          }
        }],
        line: 43
      },
      "1": {
        loc: {
          start: {
            line: 48,
            column: 53
          },
          end: {
            line: 48,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 48,
            column: 74
          },
          end: {
            line: 48,
            column: 93
          }
        }, {
          start: {
            line: 48,
            column: 96
          },
          end: {
            line: 48,
            column: 105
          }
        }],
        line: 48
      },
      "2": {
        loc: {
          start: {
            line: 53,
            column: 7
          },
          end: {
            line: 55,
            column: 7
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 7
          },
          end: {
            line: 53,
            column: 24
          }
        }, {
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 54,
            column: 71
          }
        }],
        line: 53
      },
      "3": {
        loc: {
          start: {
            line: 57,
            column: 9
          },
          end: {
            line: 57,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 57,
            column: 29
          },
          end: {
            line: 57,
            column: 42
          }
        }, {
          start: {
            line: 57,
            column: 45
          },
          end: {
            line: 57,
            column: 52
          }
        }],
        line: 57
      },
      "4": {
        loc: {
          start: {
            line: 59,
            column: 7
          },
          end: {
            line: 63,
            column: 7
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 7
          },
          end: {
            line: 59,
            column: 17
          }
        }, {
          start: {
            line: 59,
            column: 21
          },
          end: {
            line: 59,
            column: 29
          }
        }, {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 62,
            column: 27
          }
        }],
        line: 59
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0beaf4ff8c6752034c01175f68f415a5fc737a80"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_5hez4tton = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_5hez4tton();
cov_5hez4tton().s[0]++;
var ProgressBar = function ProgressBar(_ref) {
  var progress = _ref.progress,
    goal = _ref.goal,
    colors = _ref.colors;
  cov_5hez4tton().f[0]++;
  var percentage = (cov_5hez4tton().s[1]++, Math.min(progress / goal * 100, 100));
  cov_5hez4tton().s[2]++;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.progressContainer,
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [styles.progressTrack, {
        backgroundColor: colors.surface
      }],
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.progressFill, {
          backgroundColor: colors.primary,
          width: `${percentage}%`
        }]
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
      style: [styles.progressText, {
        color: colors.textSecondary
      }],
      children: [progress, " / ", goal]
    })]
  });
};
cov_5hez4tton().s[3]++;
var EmptyState = function EmptyState(_ref2) {
  var type = _ref2.type,
    message = _ref2.message,
    onAction = _ref2.onAction,
    colors = _ref2.colors,
    localStyles = _ref2.localStyles,
    progress = _ref2.progress,
    goal = _ref2.goal;
  cov_5hez4tton().f[1]++;
  var config = (cov_5hez4tton().s[4]++, {
    locked: {
      emoji: 'üîí',
      title: 'R√©vision Verrouill√©e',
      buttonText: 'Retour'
    },
    loading: {
      emoji: 'üîÑ',
      title: 'Chargement...',
      buttonText: null
    },
    error: {
      emoji: '‚ö†Ô∏è',
      title: 'Erreur',
      buttonText: 'Retour'
    },
    noWords: {
      emoji: 'üìö',
      title: 'Aucun mot disponible',
      buttonText: 'Retour'
    }
  });
  var _ref3 = (cov_5hez4tton().s[5]++, (cov_5hez4tton().b[0][0]++, config[type]) || (cov_5hez4tton().b[0][1]++, config.error)),
    emoji = _ref3.emoji,
    title = _ref3.title,
    buttonText = _ref3.buttonText;
  var lockedMessage = (cov_5hez4tton().s[6]++, `Apprenez ${goal} mots pour d√©bloquer le mode r√©vision et tester vos connaissances !`);
  cov_5hez4tton().s[7]++;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: localStyles.emptyContainer,
    testID: type === 'loading' ? (cov_5hez4tton().b[1][0]++, 'loading-indicator') : (cov_5hez4tton().b[1][1]++, undefined),
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: localStyles.emptyEmoji,
      children: emoji
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [localStyles.emptyTitle, {
        color: colors.text
      }],
      children: title
    }), (cov_5hez4tton().b[2][0]++, type === 'locked') && (cov_5hez4tton().b[2][1]++, (0, _jsxRuntime.jsx)(ProgressBar, {
      progress: progress,
      goal: goal,
      colors: colors
    })), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [localStyles.emptyMessage, {
        color: colors.textSecondary
      }],
      children: type === 'locked' ? (cov_5hez4tton().b[3][0]++, lockedMessage) : (cov_5hez4tton().b[3][1]++, message)
    }), (cov_5hez4tton().b[4][0]++, buttonText) && (cov_5hez4tton().b[4][1]++, onAction) && (cov_5hez4tton().b[4][2]++, (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      style: [localStyles.emptyButton, {
        backgroundColor: colors.primary
      }],
      onPress: onAction,
      activeOpacity: 0.8,
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: localStyles.emptyButtonText,
        children: buttonText
      })
    }))]
  });
};
var styles = (cov_5hez4tton().s[8]++, _reactNative.StyleSheet.create({
  progressContainer: {
    width: '80%',
    alignItems: 'center',
    marginVertical: 16
  },
  progressTrack: {
    width: '100%',
    height: 10,
    borderRadius: 5,
    marginBottom: 8
  },
  progressFill: {
    height: '100%',
    borderRadius: 5
  },
  progressText: {
    fontWeight: '600'
  }
}));
cov_5hez4tton().s[9]++;
ProgressBar.propTypes = {
  progress: _propTypes.default.number.isRequired,
  goal: _propTypes.default.number.isRequired,
  colors: _propTypes.default.object.isRequired
};
cov_5hez4tton().s[10]++;
EmptyState.propTypes = {
  type: _propTypes.default.oneOf(['locked', 'loading', 'error', 'noWords']).isRequired,
  message: _propTypes.default.string,
  onAction: _propTypes.default.func,
  colors: _propTypes.default.object.isRequired,
  localStyles: _propTypes.default.object.isRequired,
  progress: _propTypes.default.number,
  goal: _propTypes.default.number
};
var _default = exports.default = EmptyState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,