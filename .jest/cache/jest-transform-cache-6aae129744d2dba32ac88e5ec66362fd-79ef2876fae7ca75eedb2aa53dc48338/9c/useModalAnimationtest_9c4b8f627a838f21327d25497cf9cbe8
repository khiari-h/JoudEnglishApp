9ee42253208791e9983700c58060300a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _useModalAnimation = _interopRequireDefault(require("../../../../src/components/ui/Modal/useModalAnimation"));
var mockAnimatedValue = {
  interpolate: jest.fn(),
  addListener: jest.fn(),
  removeAllListeners: jest.fn()
};
jest.spyOn(_reactNative2.Animated, 'Value').mockImplementation(function () {
  return mockAnimatedValue;
});
var mockStart = jest.fn();
jest.spyOn(_reactNative2.Animated, 'timing').mockImplementation(function () {
  return {
    start: mockStart,
    stop: jest.fn()
  };
});
describe('useModalAnimation', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('devrait d√©marrer l\'animation si isVisible devient vrai', function () {
    var _renderHook = (0, _reactNative.renderHook)(function (_ref) {
        var isVisible = _ref.isVisible;
        return (0, _useModalAnimation.default)({
          isVisible: isVisible
        });
      }, {
        initialProps: {
          isVisible: false
        }
      }),
      rerender = _renderHook.rerender;
    (0, _reactNative.act)(function () {
      rerender({
        isVisible: true
      });
    });
    expect(_reactNative2.Animated.timing).toHaveBeenCalledTimes(1);
    expect(mockStart).toHaveBeenCalledTimes(1);
  });
  it('devrait appeler Animated.timing avec les bonnes valeurs pour la position "top"', function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function (_ref2) {
        var isVisible = _ref2.isVisible,
          position = _ref2.position;
        return (0, _useModalAnimation.default)({
          isVisible: isVisible,
          position: position
        });
      }, {
        initialProps: {
          isVisible: false,
          position: 'top'
        }
      }),
      rerender = _renderHook2.rerender;
    (0, _reactNative.act)(function () {
      rerender({
        isVisible: true,
        position: 'top'
      });
    });
    expect(_reactNative2.Animated.timing).toHaveBeenCalledWith(mockAnimatedValue, expect.objectContaining({
      toValue: 1,
      duration: 300
    }));
  });
  it('devrait retourner les styles de transformation corrects pour la position "top"', function () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useModalAnimation.default)({
          isVisible: true,
          position: 'top'
        });
      }),
      result = _renderHook3.result;
    expect(result.current.transformStyle).toEqual(expect.objectContaining({
      transform: expect.arrayContaining([expect.objectContaining({
        translateY: expect.any(Object)
      })])
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9yZWFjdE5hdGl2ZTIiLCJfdXNlTW9kYWxBbmltYXRpb24iLCJtb2NrQW5pbWF0ZWRWYWx1ZSIsImludGVycG9sYXRlIiwiamVzdCIsImZuIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJzcHlPbiIsIkFuaW1hdGVkIiwibW9ja0ltcGxlbWVudGF0aW9uIiwibW9ja1N0YXJ0Iiwic3RhcnQiLCJzdG9wIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIml0IiwiX3JlbmRlckhvb2siLCJyZW5kZXJIb29rIiwiX3JlZiIsImlzVmlzaWJsZSIsInVzZU1vZGFsQW5pbWF0aW9uIiwiaW5pdGlhbFByb3BzIiwicmVyZW5kZXIiLCJhY3QiLCJleHBlY3QiLCJ0aW1pbmciLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJfcmVuZGVySG9vazIiLCJfcmVmMiIsInBvc2l0aW9uIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJvYmplY3RDb250YWluaW5nIiwidG9WYWx1ZSIsImR1cmF0aW9uIiwiX3JlbmRlckhvb2szIiwicmVzdWx0IiwiY3VycmVudCIsInRyYW5zZm9ybVN0eWxlIiwidG9FcXVhbCIsInRyYW5zZm9ybSIsImFycmF5Q29udGFpbmluZyIsInRyYW5zbGF0ZVkiLCJhbnkiLCJPYmplY3QiXSwic291cmNlcyI6WyJ1c2VNb2RhbEFuaW1hdGlvbi50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlckhvb2ssIGFjdCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcclxuaW1wb3J0IHsgQW5pbWF0ZWQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgdXNlTW9kYWxBbmltYXRpb24gZnJvbSAnLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdWkvTW9kYWwvdXNlTW9kYWxBbmltYXRpb24nO1xyXG5cclxuLy8gTW9jayB0aGUgQW5pbWF0ZWQuVmFsdWUgY29uc3RydWN0b3JcclxuY29uc3QgbW9ja0FuaW1hdGVkVmFsdWUgPSB7XHJcbiAgaW50ZXJwb2xhdGU6IGplc3QuZm4oKSxcclxuICBhZGRMaXN0ZW5lcjogamVzdC5mbigpLFxyXG4gIHJlbW92ZUFsbExpc3RlbmVyczogamVzdC5mbigpLFxyXG59O1xyXG5qZXN0LnNweU9uKEFuaW1hdGVkLCAnVmFsdWUnKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gbW9ja0FuaW1hdGVkVmFsdWUpO1xyXG5cclxuLy8gU3B5IG9uIEFuaW1hdGVkLnRpbWluZ1xyXG5jb25zdCBtb2NrU3RhcnQgPSBqZXN0LmZuKCk7XHJcbmplc3Quc3B5T24oQW5pbWF0ZWQsICd0aW1pbmcnKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcclxuICBzdGFydDogbW9ja1N0YXJ0LFxyXG4gIHN0b3A6IGplc3QuZm4oKSxcclxufSkpO1xyXG5cclxuZGVzY3JpYmUoJ3VzZU1vZGFsQW5pbWF0aW9uJywgKCkgPT4ge1xyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgLy8gQ2xlYXIgbW9ja3MgYmVmb3JlIGVhY2ggdGVzdCB0byBwcmV2ZW50IHNpZGUgZWZmZWN0c1xyXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdkZXZyYWl0IGTDqW1hcnJlciBsXFwnYW5pbWF0aW9uIHNpIGlzVmlzaWJsZSBkZXZpZW50IHZyYWknLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IHJlcmVuZGVyIH0gPSByZW5kZXJIb29rKCh7IGlzVmlzaWJsZSB9KSA9PiB1c2VNb2RhbEFuaW1hdGlvbih7IGlzVmlzaWJsZSB9KSwge1xyXG4gICAgICBpbml0aWFsUHJvcHM6IHsgaXNWaXNpYmxlOiBmYWxzZSB9LFxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gV2Ugb25seSB3cmFwIHRoZSBhY3Rpb24gdGhhdCBjYXVzZXMgdGhlIHN0YXRlIGNoYW5nZVxyXG4gICAgYWN0KCgpID0+IHtcclxuICAgICAgcmVyZW5kZXIoeyBpc1Zpc2libGU6IHRydWUgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBleHBlY3QoQW5pbWF0ZWQudGltaW5nKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XHJcbiAgICBleHBlY3QobW9ja1N0YXJ0KS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdkZXZyYWl0IGFwcGVsZXIgQW5pbWF0ZWQudGltaW5nIGF2ZWMgbGVzIGJvbm5lcyB2YWxldXJzIHBvdXIgbGEgcG9zaXRpb24gXCJ0b3BcIicsICgpID0+IHtcclxuICAgIGNvbnN0IHsgcmVyZW5kZXIgfSA9IHJlbmRlckhvb2soKHsgaXNWaXNpYmxlLCBwb3NpdGlvbiB9KSA9PiB1c2VNb2RhbEFuaW1hdGlvbih7IGlzVmlzaWJsZSwgcG9zaXRpb24gfSksIHtcclxuICAgICAgaW5pdGlhbFByb3BzOiB7IGlzVmlzaWJsZTogZmFsc2UsIHBvc2l0aW9uOiAndG9wJyB9LFxyXG4gICAgfSk7XHJcblxyXG4gICAgYWN0KCgpID0+IHtcclxuICAgICAgcmVyZW5kZXIoeyBpc1Zpc2libGU6IHRydWUsIHBvc2l0aW9uOiAndG9wJyB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGV4cGVjdChBbmltYXRlZC50aW1pbmcpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxyXG4gICAgICBtb2NrQW5pbWF0ZWRWYWx1ZSxcclxuICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xyXG4gICAgICAgIHRvVmFsdWU6IDEsXHJcbiAgICAgICAgZHVyYXRpb246IDMwMCxcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdkZXZyYWl0IHJldG91cm5lciBsZXMgc3R5bGVzIGRlIHRyYW5zZm9ybWF0aW9uIGNvcnJlY3RzIHBvdXIgbGEgcG9zaXRpb24gXCJ0b3BcIicsICgpID0+IHtcclxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZU1vZGFsQW5pbWF0aW9uKHsgaXNWaXNpYmxlOiB0cnVlLCBwb3NpdGlvbjogJ3RvcCcgfSkpO1xyXG4gICAgXHJcbiAgICAvLyBTaW5jZSB0aGlzIGlzIGFuIGluaXRpYWwgcmVuZGVyLCBubyBgYWN0YCBpcyBuZWVkZWRcclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC50cmFuc2Zvcm1TdHlsZSkudG9FcXVhbChcclxuICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xyXG4gICAgICAgIHRyYW5zZm9ybTogZXhwZWN0LmFycmF5Q29udGFpbmluZyhbXHJcbiAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XHJcbiAgICAgICAgICAgIHRyYW5zbGF0ZVk6IGV4cGVjdC5hbnkoT2JqZWN0KSxcclxuICAgICAgICAgIH0pLFxyXG4gICAgICAgIF0pLFxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9KTtcclxufSk7Il0sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsYUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsa0JBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUdBLElBQU1JLGlCQUFpQixHQUFHO0VBQ3hCQyxXQUFXLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7RUFDdEJDLFdBQVcsRUFBRUYsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztFQUN0QkUsa0JBQWtCLEVBQUVILElBQUksQ0FBQ0MsRUFBRSxDQUFDO0FBQzlCLENBQUM7QUFDREQsSUFBSSxDQUFDSSxLQUFLLENBQUNDLHNCQUFRLEVBQUUsT0FBTyxDQUFDLENBQUNDLGtCQUFrQixDQUFDO0VBQUEsT0FBTVIsaUJBQWlCO0FBQUEsRUFBQztBQUd6RSxJQUFNUyxTQUFTLEdBQUdQLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7QUFDM0JELElBQUksQ0FBQ0ksS0FBSyxDQUFDQyxzQkFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDQyxrQkFBa0IsQ0FBQztFQUFBLE9BQU87SUFDdkRFLEtBQUssRUFBRUQsU0FBUztJQUNoQkUsSUFBSSxFQUFFVCxJQUFJLENBQUNDLEVBQUUsQ0FBQztFQUNoQixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBRUhTLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxZQUFNO0VBQ2xDQyxVQUFVLENBQUMsWUFBTTtJQUVmWCxJQUFJLENBQUNZLGFBQWEsQ0FBQyxDQUFDO0VBQ3RCLENBQUMsQ0FBQztFQUVGQyxFQUFFLENBQUMseURBQXlELEVBQUUsWUFBTTtJQUNsRSxJQUFBQyxXQUFBLEdBQXFCLElBQUFDLHVCQUFVLEVBQUMsVUFBQUMsSUFBQTtRQUFBLElBQUdDLFNBQVMsR0FBQUQsSUFBQSxDQUFUQyxTQUFTO1FBQUEsT0FBTyxJQUFBQywwQkFBaUIsRUFBQztVQUFFRCxTQUFTLEVBQVRBO1FBQVUsQ0FBQyxDQUFDO01BQUEsR0FBRTtRQUNuRkUsWUFBWSxFQUFFO1VBQUVGLFNBQVMsRUFBRTtRQUFNO01BQ25DLENBQUMsQ0FBQztNQUZNRyxRQUFRLEdBQUFOLFdBQUEsQ0FBUk0sUUFBUTtJQUtoQixJQUFBQyxnQkFBRyxFQUFDLFlBQU07TUFDUkQsUUFBUSxDQUFDO1FBQUVILFNBQVMsRUFBRTtNQUFLLENBQUMsQ0FBQztJQUMvQixDQUFDLENBQUM7SUFFRkssTUFBTSxDQUFDakIsc0JBQVEsQ0FBQ2tCLE1BQU0sQ0FBQyxDQUFDQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUM7SUFDaERGLE1BQU0sQ0FBQ2YsU0FBUyxDQUFDLENBQUNpQixxQkFBcUIsQ0FBQyxDQUFDLENBQUM7RUFDNUMsQ0FBQyxDQUFDO0VBRUZYLEVBQUUsQ0FBQyxnRkFBZ0YsRUFBRSxZQUFNO0lBQ3pGLElBQUFZLFlBQUEsR0FBcUIsSUFBQVYsdUJBQVUsRUFBQyxVQUFBVyxLQUFBO1FBQUEsSUFBR1QsU0FBUyxHQUFBUyxLQUFBLENBQVRULFNBQVM7VUFBRVUsUUFBUSxHQUFBRCxLQUFBLENBQVJDLFFBQVE7UUFBQSxPQUFPLElBQUFULDBCQUFpQixFQUFDO1VBQUVELFNBQVMsRUFBVEEsU0FBUztVQUFFVSxRQUFRLEVBQVJBO1FBQVMsQ0FBQyxDQUFDO01BQUEsR0FBRTtRQUN2R1IsWUFBWSxFQUFFO1VBQUVGLFNBQVMsRUFBRSxLQUFLO1VBQUVVLFFBQVEsRUFBRTtRQUFNO01BQ3BELENBQUMsQ0FBQztNQUZNUCxRQUFRLEdBQUFLLFlBQUEsQ0FBUkwsUUFBUTtJQUloQixJQUFBQyxnQkFBRyxFQUFDLFlBQU07TUFDUkQsUUFBUSxDQUFDO1FBQUVILFNBQVMsRUFBRSxJQUFJO1FBQUVVLFFBQVEsRUFBRTtNQUFNLENBQUMsQ0FBQztJQUNoRCxDQUFDLENBQUM7SUFFRkwsTUFBTSxDQUFDakIsc0JBQVEsQ0FBQ2tCLE1BQU0sQ0FBQyxDQUFDSyxvQkFBb0IsQ0FDMUM5QixpQkFBaUIsRUFDakJ3QixNQUFNLENBQUNPLGdCQUFnQixDQUFDO01BQ3RCQyxPQUFPLEVBQUUsQ0FBQztNQUNWQyxRQUFRLEVBQUU7SUFDWixDQUFDLENBQ0gsQ0FBQztFQUNILENBQUMsQ0FBQztFQUVGbEIsRUFBRSxDQUFDLGdGQUFnRixFQUFFLFlBQU07SUFDekYsSUFBQW1CLFlBQUEsR0FBbUIsSUFBQWpCLHVCQUFVLEVBQUM7UUFBQSxPQUFNLElBQUFHLDBCQUFpQixFQUFDO1VBQUVELFNBQVMsRUFBRSxJQUFJO1VBQUVVLFFBQVEsRUFBRTtRQUFNLENBQUMsQ0FBQztNQUFBLEVBQUM7TUFBcEZNLE1BQU0sR0FBQUQsWUFBQSxDQUFOQyxNQUFNO0lBR2RYLE1BQU0sQ0FBQ1csTUFBTSxDQUFDQyxPQUFPLENBQUNDLGNBQWMsQ0FBQyxDQUFDQyxPQUFPLENBQzNDZCxNQUFNLENBQUNPLGdCQUFnQixDQUFDO01BQ3RCUSxTQUFTLEVBQUVmLE1BQU0sQ0FBQ2dCLGVBQWUsQ0FBQyxDQUNoQ2hCLE1BQU0sQ0FBQ08sZ0JBQWdCLENBQUM7UUFDdEJVLFVBQVUsRUFBRWpCLE1BQU0sQ0FBQ2tCLEdBQUcsQ0FBQ0MsTUFBTTtNQUMvQixDQUFDLENBQUMsQ0FDSDtJQUNILENBQUMsQ0FDSCxDQUFDO0VBQ0gsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119