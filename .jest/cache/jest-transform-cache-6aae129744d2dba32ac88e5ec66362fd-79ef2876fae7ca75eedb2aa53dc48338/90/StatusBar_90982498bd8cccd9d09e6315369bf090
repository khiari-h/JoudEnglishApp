33edf293a12e39fe388bbfa04415f312
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _processColor = _interopRequireDefault(require("../../StyleSheet/processColor"));
var _Platform = _interopRequireDefault(require("../../Utilities/Platform"));
var _NativeStatusBarManagerAndroid = _interopRequireDefault(require("./NativeStatusBarManagerAndroid"));
var _NativeStatusBarManagerIOS = _interopRequireDefault(require("./NativeStatusBarManagerIOS"));
var _invariant = _interopRequireDefault(require("invariant"));
var React = _interopRequireWildcard(require("react"));
var _StatusBar, _NativeStatusBarManag;
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function mergePropsStack(propsStack, defaultValues) {
  return propsStack.reduce(function (prev, cur) {
    for (var prop in cur) {
      if (cur[prop] != null) {
        prev[prop] = cur[prop];
      }
    }
    return prev;
  }, Object.assign({}, defaultValues));
}
function createStackEntry(props) {
  var _props$animated, _props$showHideTransi;
  var animated = (_props$animated = props.animated) != null ? _props$animated : false;
  var showHideTransition = (_props$showHideTransi = props.showHideTransition) != null ? _props$showHideTransi : 'fade';
  return {
    backgroundColor: props.backgroundColor != null ? {
      value: props.backgroundColor,
      animated: animated
    } : null,
    barStyle: props.barStyle != null ? {
      value: props.barStyle,
      animated: animated
    } : null,
    translucent: props.translucent,
    hidden: props.hidden != null ? {
      value: props.hidden,
      animated: animated,
      transition: showHideTransition
    } : null,
    networkActivityIndicatorVisible: props.networkActivityIndicatorVisible
  };
}
var StatusBar = function (_React$Component) {
  function StatusBar() {
    var _this;
    (0, _classCallCheck2.default)(this, StatusBar);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, StatusBar, [].concat(args));
    _this._stackEntry = null;
    return _this;
  }
  (0, _inherits2.default)(StatusBar, _React$Component);
  return (0, _createClass2.default)(StatusBar, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this._stackEntry = StatusBar.pushStackEntry(this.props);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      StatusBar.popStackEntry(this._stackEntry);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this._stackEntry = StatusBar.replaceStackEntry(this._stackEntry, this.props);
    }
  }, {
    key: "render",
    value: function render() {
      return null;
    }
  }], [{
    key: "setHidden",
    value: function setHidden(hidden, animation) {
      animation = animation || 'none';
      StatusBar._defaultProps.hidden.value = hidden;
      if (_Platform.default.OS === 'ios') {
        _NativeStatusBarManagerIOS.default.setHidden(hidden, animation);
      } else if (_Platform.default.OS === 'android') {
        _NativeStatusBarManagerAndroid.default.setHidden(hidden);
      }
    }
  }, {
    key: "setBarStyle",
    value: function setBarStyle(style, animated) {
      animated = animated || false;
      StatusBar._defaultProps.barStyle.value = style;
      if (_Platform.default.OS === 'ios') {
        _NativeStatusBarManagerIOS.default.setStyle(style, animated);
      } else if (_Platform.default.OS === 'android') {
        _NativeStatusBarManagerAndroid.default.setStyle(style);
      }
    }
  }, {
    key: "setNetworkActivityIndicatorVisible",
    value: function setNetworkActivityIndicatorVisible(visible) {
      if (_Platform.default.OS !== 'ios') {
        console.warn('`setNetworkActivityIndicatorVisible` is only available on iOS');
        return;
      }
      StatusBar._defaultProps.networkActivityIndicatorVisible = visible;
      _NativeStatusBarManagerIOS.default.setNetworkActivityIndicatorVisible(visible);
    }
  }, {
    key: "setBackgroundColor",
    value: function setBackgroundColor(color, animated) {
      if (_Platform.default.OS !== 'android') {
        console.warn('`setBackgroundColor` is only available on Android');
        return;
      }
      animated = animated || false;
      StatusBar._defaultProps.backgroundColor.value = color;
      var processedColor = (0, _processColor.default)(color);
      if (processedColor == null) {
        console.warn(`\`StatusBar.setBackgroundColor\`: Color ${color} parsed to null or undefined`);
        return;
      }
      (0, _invariant.default)(typeof processedColor === 'number', 'Unexpected color given for StatusBar.setBackgroundColor');
      _NativeStatusBarManagerAndroid.default.setColor(processedColor, animated);
    }
  }, {
    key: "setTranslucent",
    value: function setTranslucent(translucent) {
      if (_Platform.default.OS !== 'android') {
        console.warn('`setTranslucent` is only available on Android');
        return;
      }
      StatusBar._defaultProps.translucent = translucent;
      _NativeStatusBarManagerAndroid.default.setTranslucent(translucent);
    }
  }, {
    key: "pushStackEntry",
    value: function pushStackEntry(props) {
      var entry = createStackEntry(props);
      StatusBar._propsStack.push(entry);
      StatusBar._updatePropsStack();
      return entry;
    }
  }, {
    key: "popStackEntry",
    value: function popStackEntry(entry) {
      var index = StatusBar._propsStack.indexOf(entry);
      if (index !== -1) {
        StatusBar._propsStack.splice(index, 1);
      }
      StatusBar._updatePropsStack();
    }
  }, {
    key: "replaceStackEntry",
    value: function replaceStackEntry(entry, props) {
      var newEntry = createStackEntry(props);
      var index = StatusBar._propsStack.indexOf(entry);
      if (index !== -1) {
        StatusBar._propsStack[index] = newEntry;
      }
      StatusBar._updatePropsStack();
      return newEntry;
    }
  }]);
}(React.Component);
_StatusBar = StatusBar;
StatusBar._propsStack = [];
StatusBar._defaultProps = createStackEntry({
  backgroundColor: _Platform.default.OS === 'android' ? (_NativeStatusBarManag = _NativeStatusBarManagerAndroid.default.getConstants().DEFAULT_BACKGROUND_COLOR) != null ? _NativeStatusBarManag : 'black' : 'black',
  barStyle: 'default',
  translucent: false,
  hidden: false,
  networkActivityIndicatorVisible: false
});
StatusBar._updateImmediate = null;
StatusBar._currentValues = null;
StatusBar.currentHeight = _Platform.default.OS === 'android' ? _NativeStatusBarManagerAndroid.default.getConstants().HEIGHT : null;
StatusBar._updatePropsStack = function () {
  clearImmediate(_StatusBar._updateImmediate);
  _StatusBar._updateImmediate = setImmediate(function () {
    var oldProps = _StatusBar._currentValues;
    var mergedProps = mergePropsStack(_StatusBar._propsStack, _StatusBar._defaultProps);
    if (_Platform.default.OS === 'ios') {
      if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {
        _NativeStatusBarManagerIOS.default.setStyle(mergedProps.barStyle.value, mergedProps.barStyle.animated || false);
      }
      if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
        _NativeStatusBarManagerIOS.default.setHidden(mergedProps.hidden.value, mergedProps.hidden.animated ? mergedProps.hidden.transition : 'none');
      }
      if (!oldProps || oldProps.networkActivityIndicatorVisible !== mergedProps.networkActivityIndicatorVisible) {
        _NativeStatusBarManagerIOS.default.setNetworkActivityIndicatorVisible(mergedProps.networkActivityIndicatorVisible);
      }
    } else if (_Platform.default.OS === 'android') {
      _NativeStatusBarManagerAndroid.default.setStyle(mergedProps.barStyle.value);
      var processedColor = (0, _processColor.default)(mergedProps.backgroundColor.value);
      if (processedColor == null) {
        console.warn(`\`StatusBar._updatePropsStack\`: Color ${mergedProps.backgroundColor.value} parsed to null or undefined`);
      } else {
        (0, _invariant.default)(typeof processedColor === 'number', 'Unexpected color given in StatusBar._updatePropsStack');
        _NativeStatusBarManagerAndroid.default.setColor(processedColor, mergedProps.backgroundColor.animated);
      }
      if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
        _NativeStatusBarManagerAndroid.default.setHidden(mergedProps.hidden.value);
      }
      if (!oldProps || oldProps.translucent !== mergedProps.translucent || mergedProps.translucent) {
        _NativeStatusBarManagerAndroid.default.setTranslucent(mergedProps.translucent);
      }
    }
    _StatusBar._currentValues = mergedProps;
  });
};
module.exports = StatusBar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcHJvY2Vzc0NvbG9yIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfUGxhdGZvcm0iLCJfTmF0aXZlU3RhdHVzQmFyTWFuYWdlckFuZHJvaWQiLCJfTmF0aXZlU3RhdHVzQmFyTWFuYWdlcklPUyIsIl9pbnZhcmlhbnQiLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX1N0YXR1c0JhciIsIl9OYXRpdmVTdGF0dXNCYXJNYW5hZyIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX2NhbGxTdXBlciIsIl9nZXRQcm90b3R5cGVPZjIiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImNvbnN0cnVjdG9yIiwiYXBwbHkiLCJCb29sZWFuIiwicHJvdG90eXBlIiwidmFsdWVPZiIsIm1lcmdlUHJvcHNTdGFjayIsInByb3BzU3RhY2siLCJkZWZhdWx0VmFsdWVzIiwicmVkdWNlIiwicHJldiIsImN1ciIsInByb3AiLCJhc3NpZ24iLCJjcmVhdGVTdGFja0VudHJ5IiwicHJvcHMiLCJfcHJvcHMkYW5pbWF0ZWQiLCJfcHJvcHMkc2hvd0hpZGVUcmFuc2kiLCJhbmltYXRlZCIsInNob3dIaWRlVHJhbnNpdGlvbiIsImJhY2tncm91bmRDb2xvciIsInZhbHVlIiwiYmFyU3R5bGUiLCJ0cmFuc2x1Y2VudCIsImhpZGRlbiIsInRyYW5zaXRpb24iLCJuZXR3b3JrQWN0aXZpdHlJbmRpY2F0b3JWaXNpYmxlIiwiU3RhdHVzQmFyIiwiX1JlYWN0JENvbXBvbmVudCIsIl90aGlzIiwiX2NsYXNzQ2FsbENoZWNrMiIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiY29uY2F0IiwiX3N0YWNrRW50cnkiLCJfaW5oZXJpdHMyIiwiX2NyZWF0ZUNsYXNzMiIsImtleSIsImNvbXBvbmVudERpZE1vdW50IiwicHVzaFN0YWNrRW50cnkiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInBvcFN0YWNrRW50cnkiLCJjb21wb25lbnREaWRVcGRhdGUiLCJyZXBsYWNlU3RhY2tFbnRyeSIsInJlbmRlciIsInNldEhpZGRlbiIsImFuaW1hdGlvbiIsIl9kZWZhdWx0UHJvcHMiLCJQbGF0Zm9ybSIsIk9TIiwiTmF0aXZlU3RhdHVzQmFyTWFuYWdlcklPUyIsIk5hdGl2ZVN0YXR1c0Jhck1hbmFnZXJBbmRyb2lkIiwic2V0QmFyU3R5bGUiLCJzdHlsZSIsInNldFN0eWxlIiwic2V0TmV0d29ya0FjdGl2aXR5SW5kaWNhdG9yVmlzaWJsZSIsInZpc2libGUiLCJjb25zb2xlIiwid2FybiIsInNldEJhY2tncm91bmRDb2xvciIsImNvbG9yIiwicHJvY2Vzc2VkQ29sb3IiLCJwcm9jZXNzQ29sb3IiLCJpbnZhcmlhbnQiLCJzZXRDb2xvciIsInNldFRyYW5zbHVjZW50IiwiZW50cnkiLCJfcHJvcHNTdGFjayIsInB1c2giLCJfdXBkYXRlUHJvcHNTdGFjayIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsIm5ld0VudHJ5IiwiQ29tcG9uZW50IiwiZ2V0Q29uc3RhbnRzIiwiREVGQVVMVF9CQUNLR1JPVU5EX0NPTE9SIiwiX3VwZGF0ZUltbWVkaWF0ZSIsIl9jdXJyZW50VmFsdWVzIiwiY3VycmVudEhlaWdodCIsIkhFSUdIVCIsImNsZWFySW1tZWRpYXRlIiwic2V0SW1tZWRpYXRlIiwib2xkUHJvcHMiLCJtZXJnZWRQcm9wcyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJTdGF0dXNCYXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93XG4gKi9cblxuaW1wb3J0IHR5cGUge0NvbG9yVmFsdWV9IGZyb20gJy4uLy4uL1N0eWxlU2hlZXQvU3R5bGVTaGVldCc7XG5cbmltcG9ydCBwcm9jZXNzQ29sb3IgZnJvbSAnLi4vLi4vU3R5bGVTaGVldC9wcm9jZXNzQ29sb3InO1xuaW1wb3J0IFBsYXRmb3JtIGZyb20gJy4uLy4uL1V0aWxpdGllcy9QbGF0Zm9ybSc7XG5pbXBvcnQgTmF0aXZlU3RhdHVzQmFyTWFuYWdlckFuZHJvaWQgZnJvbSAnLi9OYXRpdmVTdGF0dXNCYXJNYW5hZ2VyQW5kcm9pZCc7XG5pbXBvcnQgTmF0aXZlU3RhdHVzQmFyTWFuYWdlcklPUyBmcm9tICcuL05hdGl2ZVN0YXR1c0Jhck1hbmFnZXJJT1MnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIFN0YXR1cyBiYXIgc3R5bGVcbiAqL1xuZXhwb3J0IHR5cGUgU3RhdHVzQmFyU3R5bGUgPSAkS2V5czx7XG4gIC8qKlxuICAgKiBEZWZhdWx0IHN0YXR1cyBiYXIgc3R5bGUgKGRhcmsgZm9yIGlPUywgbGlnaHQgZm9yIEFuZHJvaWQpXG4gICAqL1xuICBkZWZhdWx0OiBzdHJpbmcsXG4gIC8qKlxuICAgKiBEYXJrIGJhY2tncm91bmQsIHdoaXRlIHRleHRzIGFuZCBpY29uc1xuICAgKi9cbiAgJ2xpZ2h0LWNvbnRlbnQnOiBzdHJpbmcsXG4gIC8qKlxuICAgKiBMaWdodCBiYWNrZ3JvdW5kLCBkYXJrIHRleHRzIGFuZCBpY29uc1xuICAgKi9cbiAgJ2RhcmstY29udGVudCc6IHN0cmluZyxcbiAgLi4uXG59PjtcblxuLyoqXG4gKiBTdGF0dXMgYmFyIGFuaW1hdGlvblxuICovXG5leHBvcnQgdHlwZSBTdGF0dXNCYXJBbmltYXRpb24gPSAkS2V5czx7XG4gIC8qKlxuICAgKiBObyBhbmltYXRpb25cbiAgICovXG4gIG5vbmU6IHN0cmluZyxcbiAgLyoqXG4gICAqIEZhZGUgYW5pbWF0aW9uXG4gICAqL1xuICBmYWRlOiBzdHJpbmcsXG4gIC8qKlxuICAgKiBTbGlkZSBhbmltYXRpb25cbiAgICovXG4gIHNsaWRlOiBzdHJpbmcsXG4gIC4uLlxufT47XG5cbnR5cGUgQW5kcm9pZFByb3BzID0gJFJlYWRPbmx5PHt8XG4gIC8qKlxuICAgKiBUaGUgYmFja2dyb3VuZCBjb2xvciBvZiB0aGUgc3RhdHVzIGJhci5cbiAgICogQHBsYXRmb3JtIGFuZHJvaWRcbiAgICovXG4gIGJhY2tncm91bmRDb2xvcj86ID9Db2xvclZhbHVlLFxuICAvKipcbiAgICogSWYgdGhlIHN0YXR1cyBiYXIgaXMgdHJhbnNsdWNlbnQuXG4gICAqIFdoZW4gdHJhbnNsdWNlbnQgaXMgc2V0IHRvIHRydWUsIHRoZSBhcHAgd2lsbCBkcmF3IHVuZGVyIHRoZSBzdGF0dXMgYmFyLlxuICAgKiBUaGlzIGlzIHVzZWZ1bCB3aGVuIHVzaW5nIGEgc2VtaSB0cmFuc3BhcmVudCBzdGF0dXMgYmFyIGNvbG9yLlxuICAgKlxuICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgKi9cbiAgdHJhbnNsdWNlbnQ/OiA/Ym9vbGVhbixcbnx9PjtcblxudHlwZSBJT1NQcm9wcyA9ICRSZWFkT25seTx7fFxuICAvKipcbiAgICogSWYgdGhlIG5ldHdvcmsgYWN0aXZpdHkgaW5kaWNhdG9yIHNob3VsZCBiZSB2aXNpYmxlLlxuICAgKlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBuZXR3b3JrQWN0aXZpdHlJbmRpY2F0b3JWaXNpYmxlPzogP2Jvb2xlYW4sXG4gIC8qKlxuICAgKiBUaGUgdHJhbnNpdGlvbiBlZmZlY3Qgd2hlbiBzaG93aW5nIGFuZCBoaWRpbmcgdGhlIHN0YXR1cyBiYXIgdXNpbmcgdGhlIGBoaWRkZW5gXG4gICAqIHByb3AuIERlZmF1bHRzIHRvICdmYWRlJy5cbiAgICpcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgc2hvd0hpZGVUcmFuc2l0aW9uPzogPygnZmFkZScgfCAnc2xpZGUnIHwgJ25vbmUnKSxcbnx9PjtcblxudHlwZSBQcm9wcyA9ICRSZWFkT25seTx7fFxuICAuLi5BbmRyb2lkUHJvcHMsXG4gIC4uLklPU1Byb3BzLFxuICAvKipcbiAgICogSWYgdGhlIHN0YXR1cyBiYXIgaXMgaGlkZGVuLlxuICAgKi9cbiAgaGlkZGVuPzogP2Jvb2xlYW4sXG4gIC8qKlxuICAgKiBJZiB0aGUgdHJhbnNpdGlvbiBiZXR3ZWVuIHN0YXR1cyBiYXIgcHJvcGVydHkgY2hhbmdlcyBzaG91bGQgYmUgYW5pbWF0ZWQuXG4gICAqIFN1cHBvcnRlZCBmb3IgYmFja2dyb3VuZENvbG9yLCBiYXJTdHlsZSBhbmQgaGlkZGVuLlxuICAgKi9cbiAgYW5pbWF0ZWQ/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIFNldHMgdGhlIGNvbG9yIG9mIHRoZSBzdGF0dXMgYmFyIHRleHQuXG4gICAqL1xuICBiYXJTdHlsZT86ID8oJ2RlZmF1bHQnIHwgJ2xpZ2h0LWNvbnRlbnQnIHwgJ2RhcmstY29udGVudCcpLFxufH0+O1xuXG4vKipcbiAqIE1lcmdlcyB0aGUgcHJvcCBzdGFjayB3aXRoIHRoZSBkZWZhdWx0IHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VQcm9wc1N0YWNrKFxuICBwcm9wc1N0YWNrOiBBcnJheTxPYmplY3Q+LFxuICBkZWZhdWx0VmFsdWVzOiBPYmplY3QsXG4pOiBPYmplY3Qge1xuICByZXR1cm4gcHJvcHNTdGFjay5yZWR1Y2UoXG4gICAgKHByZXYsIGN1cikgPT4ge1xuICAgICAgZm9yIChjb25zdCBwcm9wIGluIGN1cikge1xuICAgICAgICBpZiAoY3VyW3Byb3BdICE9IG51bGwpIHtcbiAgICAgICAgICBwcmV2W3Byb3BdID0gY3VyW3Byb3BdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJldjtcbiAgICB9LFxuICAgIHsuLi5kZWZhdWx0VmFsdWVzfSxcbiAgKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0byBpbnNlcnQgaW4gdGhlIHByb3BzIHN0YWNrIGZyb20gdGhlIHByb3BzXG4gKiBhbmQgdGhlIHRyYW5zaXRpb24vYW5pbWF0aW9uIGluZm8uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVN0YWNrRW50cnkocHJvcHM6IGFueSk6IGFueSB7XG4gIGNvbnN0IGFuaW1hdGVkID0gcHJvcHMuYW5pbWF0ZWQgPz8gZmFsc2U7XG4gIGNvbnN0IHNob3dIaWRlVHJhbnNpdGlvbiA9IHByb3BzLnNob3dIaWRlVHJhbnNpdGlvbiA/PyAnZmFkZSc7XG4gIHJldHVybiB7XG4gICAgYmFja2dyb3VuZENvbG9yOlxuICAgICAgcHJvcHMuYmFja2dyb3VuZENvbG9yICE9IG51bGxcbiAgICAgICAgPyB7XG4gICAgICAgICAgICB2YWx1ZTogcHJvcHMuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgYW5pbWF0ZWQsXG4gICAgICAgICAgfVxuICAgICAgICA6IG51bGwsXG4gICAgYmFyU3R5bGU6XG4gICAgICBwcm9wcy5iYXJTdHlsZSAhPSBudWxsXG4gICAgICAgID8ge1xuICAgICAgICAgICAgdmFsdWU6IHByb3BzLmJhclN0eWxlLFxuICAgICAgICAgICAgYW5pbWF0ZWQsXG4gICAgICAgICAgfVxuICAgICAgICA6IG51bGwsXG4gICAgdHJhbnNsdWNlbnQ6IHByb3BzLnRyYW5zbHVjZW50LFxuICAgIGhpZGRlbjpcbiAgICAgIHByb3BzLmhpZGRlbiAhPSBudWxsXG4gICAgICAgID8ge1xuICAgICAgICAgICAgdmFsdWU6IHByb3BzLmhpZGRlbixcbiAgICAgICAgICAgIGFuaW1hdGVkLFxuICAgICAgICAgICAgdHJhbnNpdGlvbjogc2hvd0hpZGVUcmFuc2l0aW9uLFxuICAgICAgICAgIH1cbiAgICAgICAgOiBudWxsLFxuICAgIG5ldHdvcmtBY3Rpdml0eUluZGljYXRvclZpc2libGU6IHByb3BzLm5ldHdvcmtBY3Rpdml0eUluZGljYXRvclZpc2libGUsXG4gIH07XG59XG5cbi8qKlxuICogQ29tcG9uZW50IHRvIGNvbnRyb2wgdGhlIGFwcCBzdGF0dXMgYmFyLlxuICpcbiAqIEl0IGlzIHBvc3NpYmxlIHRvIGhhdmUgbXVsdGlwbGUgYFN0YXR1c0JhcmAgY29tcG9uZW50cyBtb3VudGVkIGF0IHRoZSBzYW1lXG4gKiB0aW1lLiBUaGUgcHJvcHMgd2lsbCBiZSBtZXJnZWQgaW4gdGhlIG9yZGVyIHRoZSBgU3RhdHVzQmFyYCBjb21wb25lbnRzIHdlcmVcbiAqIG1vdW50ZWQuXG4gKlxuICogIyMjIEltcGVyYXRpdmUgQVBJXG4gKlxuICogRm9yIGNhc2VzIHdoZXJlIHVzaW5nIGEgY29tcG9uZW50IGlzIG5vdCBpZGVhbCwgdGhlcmUgYXJlIHN0YXRpYyBtZXRob2RzXG4gKiB0byBtYW5pcHVsYXRlIHRoZSBgU3RhdHVzQmFyYCBkaXNwbGF5IHN0YWNrLiBUaGVzZSBtZXRob2RzIGhhdmUgdGhlIHNhbWVcbiAqIGJlaGF2aW9yIGFzIG1vdW50aW5nIGFuZCB1bm1vdW50aW5nIGEgYFN0YXR1c0JhcmAgY29tcG9uZW50LlxuICpcbiAqIEZvciBleGFtcGxlLCB5b3UgY2FuIGNhbGwgYFN0YXR1c0Jhci5wdXNoU3RhY2tFbnRyeWAgdG8gdXBkYXRlIHRoZSBzdGF0dXMgYmFyXG4gKiBiZWZvcmUgbGF1bmNoaW5nIGEgdGhpcmQtcGFydHkgbmF0aXZlIFVJIGNvbXBvbmVudCwgYW5kIHRoZW4gY2FsbFxuICogYFN0YXR1c0Jhci5wb3BTdGFja0VudHJ5YCB3aGVuIGNvbXBsZXRlZC5cbiAqXG4gKiBgYGBcbiAqIGNvbnN0IG9wZW5UaGlyZFBhcnR5QnVnUmVwb3J0ZXIgPSBhc3luYyAoKSA9PiB7XG4gKiAgIC8vIFRoZSBidWcgcmVwb3J0ZXIgaGFzIGEgZGFyayBiYWNrZ3JvdW5kLCBzbyB3ZSBwdXNoIGEgbmV3IHN0YXR1cyBiYXIgc3R5bGUuXG4gKiAgIGNvbnN0IHN0YWNrRW50cnkgPSBTdGF0dXNCYXIucHVzaFN0YWNrRW50cnkoe2JhclN0eWxlOiAnbGlnaHQtY29udGVudCd9KTtcbiAqXG4gKiAgIC8vIGBvcGVuYCByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIFVJIGlzIGRpc21pc3NlZC5cbiAqICAgYXdhaXQgQnVnUmVwb3J0ZXIub3BlbigpO1xuICpcbiAqICAgLy8gRG9uJ3QgZm9yZ2V0IHRvIGNhbGwgYHBvcFN0YWNrRW50cnlgIHdoZW4geW91J3JlIGRvbmUuXG4gKiAgIFN0YXR1c0Jhci5wb3BTdGFja0VudHJ5KHN0YWNrRW50cnkpO1xuICogfTtcbiAqIGBgYFxuICpcbiAqIFRoZXJlIGlzIGEgbGVnYWN5IGltcGVyYXRpdmUgQVBJIHRoYXQgZW5hYmxlcyB5b3UgdG8gbWFudWFsbHkgdXBkYXRlIHRoZVxuICogc3RhdHVzIGJhciBzdHlsZXMuIEhvd2V2ZXIsIHRoZSBsZWdhY3kgQVBJIGRvZXMgbm90IHVwZGF0ZSB0aGUgaW50ZXJuYWxcbiAqIGBTdGF0dXNCYXJgIGRpc3BsYXkgc3RhY2ssIHdoaWNoIG1lYW5zIHRoYXQgYW55IGNoYW5nZXMgd2lsbCBiZSBvdmVycmlkZGVuXG4gKiB3aGVuZXZlciBhIGBTdGF0dXNCYXJgIGNvbXBvbmVudCBpcyBtb3VudGVkIG9yIHVubW91bnRlZC5cbiAqXG4gKiBJdCBpcyBzdHJvbmdseSBhZHZpc2VkIHRoYXQgeW91IHVzZSBgcHVzaFN0YWNrRW50cnlgLCBgcG9wU3RhY2tFbnRyeWAsIG9yXG4gKiBgcmVwbGFjZVN0YWNrRW50cnlgIGluc3RlYWQgb2YgdGhlIHN0YXRpYyBtZXRob2RzIGJlZ2lubmluZyB3aXRoIGBzZXRgLlxuICpcbiAqICMjIyBDb25zdGFudHNcbiAqXG4gKiBgY3VycmVudEhlaWdodGAgKEFuZHJvaWQgb25seSkgVGhlIGhlaWdodCBvZiB0aGUgc3RhdHVzIGJhci5cbiAqL1xuY2xhc3MgU3RhdHVzQmFyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzPiB7XG4gIHN0YXRpYyBfcHJvcHNTdGFjazogQXJyYXk8YW55PiA9IFtdO1xuXG4gIHN0YXRpYyBfZGVmYXVsdFByb3BzOiBhbnkgPSBjcmVhdGVTdGFja0VudHJ5KHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6XG4gICAgICBQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnXG4gICAgICAgID8gTmF0aXZlU3RhdHVzQmFyTWFuYWdlckFuZHJvaWQuZ2V0Q29uc3RhbnRzKClcbiAgICAgICAgICAgIC5ERUZBVUxUX0JBQ0tHUk9VTkRfQ09MT1IgPz8gJ2JsYWNrJ1xuICAgICAgICA6ICdibGFjaycsXG4gICAgYmFyU3R5bGU6ICdkZWZhdWx0JyxcbiAgICB0cmFuc2x1Y2VudDogZmFsc2UsXG4gICAgaGlkZGVuOiBmYWxzZSxcbiAgICBuZXR3b3JrQWN0aXZpdHlJbmRpY2F0b3JWaXNpYmxlOiBmYWxzZSxcbiAgfSk7XG5cbiAgLy8gVGltZXIgZm9yIHVwZGF0aW5nIHRoZSBuYXRpdmUgbW9kdWxlIHZhbHVlcyBhdCB0aGUgZW5kIG9mIHRoZSBmcmFtZS5cbiAgLy8gJEZsb3dGaXhNZVttaXNzaW5nLWxvY2FsLWFubm90XVxuICBzdGF0aWMgX3VwZGF0ZUltbWVkaWF0ZSA9IG51bGw7XG5cbiAgLy8gVGhlIGN1cnJlbnQgbWVyZ2VkIHZhbHVlcyBmcm9tIHRoZSBwcm9wcyBzdGFjay5cbiAgLy8gJEZsb3dGaXhNZVttaXNzaW5nLWxvY2FsLWFubm90XVxuICBzdGF0aWMgX2N1cnJlbnRWYWx1ZXMgPSBudWxsO1xuXG4gIC8vIFRPRE8oamFuaWMpOiBQcm92aWRlIGEgcmVhbCBBUEkgdG8gZGVhbCB3aXRoIHN0YXR1cyBiYXIgaGVpZ2h0LiBTZWUgdGhlXG4gIC8vIGRpc2N1c3Npb24gaW4gIzYxOTUuXG4gIC8qKlxuICAgKiBUaGUgY3VycmVudCBoZWlnaHQgb2YgdGhlIHN0YXR1cyBiYXIgb24gdGhlIGRldmljZS5cbiAgICpcbiAgICogQHBsYXRmb3JtIGFuZHJvaWRcbiAgICovXG4gIHN0YXRpYyBjdXJyZW50SGVpZ2h0OiA/bnVtYmVyID1cbiAgICBQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnXG4gICAgICA/IE5hdGl2ZVN0YXR1c0Jhck1hbmFnZXJBbmRyb2lkLmdldENvbnN0YW50cygpLkhFSUdIVFxuICAgICAgOiBudWxsO1xuXG4gIC8vIFByb3ZpZGUgYW4gaW1wZXJhdGl2ZSBBUEkgYXMgc3RhdGljIGZ1bmN0aW9ucyBvZiB0aGUgY29tcG9uZW50LlxuICAvLyBTZWUgdGhlIGNvcnJlc3BvbmRpbmcgcHJvcCBmb3IgbW9yZSBkZXRhaWwuXG5cbiAgLyoqXG4gICAqIFNob3cgb3IgaGlkZSB0aGUgc3RhdHVzIGJhclxuICAgKiBAcGFyYW0gaGlkZGVuIEhpZGUgdGhlIHN0YXR1cyBiYXIuXG4gICAqIEBwYXJhbSBhbmltYXRpb24gT3B0aW9uYWwgYW5pbWF0aW9uIHdoZW5cbiAgICogICAgY2hhbmdpbmcgdGhlIHN0YXR1cyBiYXIgaGlkZGVuIHByb3BlcnR5LlxuICAgKi9cbiAgc3RhdGljIHNldEhpZGRlbihoaWRkZW46IGJvb2xlYW4sIGFuaW1hdGlvbj86IFN0YXR1c0JhckFuaW1hdGlvbikge1xuICAgIGFuaW1hdGlvbiA9IGFuaW1hdGlvbiB8fCAnbm9uZSc7XG4gICAgU3RhdHVzQmFyLl9kZWZhdWx0UHJvcHMuaGlkZGVuLnZhbHVlID0gaGlkZGVuO1xuICAgIGlmIChQbGF0Zm9ybS5PUyA9PT0gJ2lvcycpIHtcbiAgICAgIE5hdGl2ZVN0YXR1c0Jhck1hbmFnZXJJT1Muc2V0SGlkZGVuKGhpZGRlbiwgYW5pbWF0aW9uKTtcbiAgICB9IGVsc2UgaWYgKFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcpIHtcbiAgICAgIE5hdGl2ZVN0YXR1c0Jhck1hbmFnZXJBbmRyb2lkLnNldEhpZGRlbihoaWRkZW4pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHN0YXR1cyBiYXIgc3R5bGVcbiAgICogQHBhcmFtIHN0eWxlIFN0YXR1cyBiYXIgc3R5bGUgdG8gc2V0XG4gICAqIEBwYXJhbSBhbmltYXRlZCBBbmltYXRlIHRoZSBzdHlsZSBjaGFuZ2UuXG4gICAqL1xuICBzdGF0aWMgc2V0QmFyU3R5bGUoc3R5bGU6IFN0YXR1c0JhclN0eWxlLCBhbmltYXRlZD86IGJvb2xlYW4pIHtcbiAgICBhbmltYXRlZCA9IGFuaW1hdGVkIHx8IGZhbHNlO1xuICAgIFN0YXR1c0Jhci5fZGVmYXVsdFByb3BzLmJhclN0eWxlLnZhbHVlID0gc3R5bGU7XG4gICAgaWYgKFBsYXRmb3JtLk9TID09PSAnaW9zJykge1xuICAgICAgTmF0aXZlU3RhdHVzQmFyTWFuYWdlcklPUy5zZXRTdHlsZShzdHlsZSwgYW5pbWF0ZWQpO1xuICAgIH0gZWxzZSBpZiAoUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJykge1xuICAgICAgTmF0aXZlU3RhdHVzQmFyTWFuYWdlckFuZHJvaWQuc2V0U3R5bGUoc3R5bGUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBERVBSRUNBVEVEIC0gVGhlIHN0YXR1cyBiYXIgbmV0d29yayBhY3Rpdml0eSBpbmRpY2F0b3IgaXMgbm90IHN1cHBvcnRlZCBpbiBpT1MgMTMgYW5kIGxhdGVyLiBUaGlzIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLlxuICAgKiBAcGFyYW0gdmlzaWJsZSBTaG93IHRoZSBpbmRpY2F0b3IuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqL1xuICBzdGF0aWMgc2V0TmV0d29ya0FjdGl2aXR5SW5kaWNhdG9yVmlzaWJsZSh2aXNpYmxlOiBib29sZWFuKSB7XG4gICAgaWYgKFBsYXRmb3JtLk9TICE9PSAnaW9zJykge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnYHNldE5ldHdvcmtBY3Rpdml0eUluZGljYXRvclZpc2libGVgIGlzIG9ubHkgYXZhaWxhYmxlIG9uIGlPUycsXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBTdGF0dXNCYXIuX2RlZmF1bHRQcm9wcy5uZXR3b3JrQWN0aXZpdHlJbmRpY2F0b3JWaXNpYmxlID0gdmlzaWJsZTtcbiAgICBOYXRpdmVTdGF0dXNCYXJNYW5hZ2VySU9TLnNldE5ldHdvcmtBY3Rpdml0eUluZGljYXRvclZpc2libGUodmlzaWJsZSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBiYWNrZ3JvdW5kIGNvbG9yIGZvciB0aGUgc3RhdHVzIGJhclxuICAgKiBAcGFyYW0gY29sb3IgQmFja2dyb3VuZCBjb2xvci5cbiAgICogQHBhcmFtIGFuaW1hdGVkIEFuaW1hdGUgdGhlIHN0eWxlIGNoYW5nZS5cbiAgICovXG4gIHN0YXRpYyBzZXRCYWNrZ3JvdW5kQ29sb3IoY29sb3I6IHN0cmluZywgYW5pbWF0ZWQ/OiBib29sZWFuKTogdm9pZCB7XG4gICAgaWYgKFBsYXRmb3JtLk9TICE9PSAnYW5kcm9pZCcpIHtcbiAgICAgIGNvbnNvbGUud2FybignYHNldEJhY2tncm91bmRDb2xvcmAgaXMgb25seSBhdmFpbGFibGUgb24gQW5kcm9pZCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhbmltYXRlZCA9IGFuaW1hdGVkIHx8IGZhbHNlO1xuICAgIFN0YXR1c0Jhci5fZGVmYXVsdFByb3BzLmJhY2tncm91bmRDb2xvci52YWx1ZSA9IGNvbG9yO1xuXG4gICAgY29uc3QgcHJvY2Vzc2VkQ29sb3IgPSBwcm9jZXNzQ29sb3IoY29sb3IpO1xuICAgIGlmIChwcm9jZXNzZWRDb2xvciA9PSBudWxsKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGBcXGBTdGF0dXNCYXIuc2V0QmFja2dyb3VuZENvbG9yXFxgOiBDb2xvciAke2NvbG9yfSBwYXJzZWQgdG8gbnVsbCBvciB1bmRlZmluZWRgLFxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW52YXJpYW50KFxuICAgICAgdHlwZW9mIHByb2Nlc3NlZENvbG9yID09PSAnbnVtYmVyJyxcbiAgICAgICdVbmV4cGVjdGVkIGNvbG9yIGdpdmVuIGZvciBTdGF0dXNCYXIuc2V0QmFja2dyb3VuZENvbG9yJyxcbiAgICApO1xuXG4gICAgTmF0aXZlU3RhdHVzQmFyTWFuYWdlckFuZHJvaWQuc2V0Q29sb3IocHJvY2Vzc2VkQ29sb3IsIGFuaW1hdGVkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb250cm9sIHRoZSB0cmFuc2x1Y2VuY3kgb2YgdGhlIHN0YXR1cyBiYXJcbiAgICogQHBhcmFtIHRyYW5zbHVjZW50IFNldCBhcyB0cmFuc2x1Y2VudC5cbiAgICovXG4gIHN0YXRpYyBzZXRUcmFuc2x1Y2VudCh0cmFuc2x1Y2VudDogYm9vbGVhbikge1xuICAgIGlmIChQbGF0Zm9ybS5PUyAhPT0gJ2FuZHJvaWQnKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ2BzZXRUcmFuc2x1Y2VudGAgaXMgb25seSBhdmFpbGFibGUgb24gQW5kcm9pZCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBTdGF0dXNCYXIuX2RlZmF1bHRQcm9wcy50cmFuc2x1Y2VudCA9IHRyYW5zbHVjZW50O1xuICAgIE5hdGl2ZVN0YXR1c0Jhck1hbmFnZXJBbmRyb2lkLnNldFRyYW5zbHVjZW50KHRyYW5zbHVjZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdXNoIGEgU3RhdHVzQmFyIGVudHJ5IG9udG8gdGhlIHN0YWNrLlxuICAgKiBUaGUgcmV0dXJuIHZhbHVlIHNob3VsZCBiZSBwYXNzZWQgdG8gYHBvcFN0YWNrRW50cnlgIHdoZW4gY29tcGxldGUuXG4gICAqXG4gICAqIEBwYXJhbSBwcm9wcyBPYmplY3QgY29udGFpbmluZyB0aGUgU3RhdHVzQmFyIHByb3BzIHRvIHVzZSBpbiB0aGUgc3RhY2sgZW50cnkuXG4gICAqL1xuICBzdGF0aWMgcHVzaFN0YWNrRW50cnkocHJvcHM6IGFueSk6IGFueSB7XG4gICAgY29uc3QgZW50cnkgPSBjcmVhdGVTdGFja0VudHJ5KHByb3BzKTtcbiAgICBTdGF0dXNCYXIuX3Byb3BzU3RhY2sucHVzaChlbnRyeSk7XG4gICAgU3RhdHVzQmFyLl91cGRhdGVQcm9wc1N0YWNrKCk7XG4gICAgcmV0dXJuIGVudHJ5O1xuICB9XG5cbiAgLyoqXG4gICAqIFBvcCBhIFN0YXR1c0JhciBlbnRyeSBmcm9tIHRoZSBzdGFjay5cbiAgICpcbiAgICogQHBhcmFtIGVudHJ5IEVudHJ5IHJldHVybmVkIGZyb20gYHB1c2hTdGFja0VudHJ5YC5cbiAgICovXG4gIHN0YXRpYyBwb3BTdGFja0VudHJ5KGVudHJ5OiBhbnkpIHtcbiAgICBjb25zdCBpbmRleCA9IFN0YXR1c0Jhci5fcHJvcHNTdGFjay5pbmRleE9mKGVudHJ5KTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBTdGF0dXNCYXIuX3Byb3BzU3RhY2suc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gICAgU3RhdHVzQmFyLl91cGRhdGVQcm9wc1N0YWNrKCk7XG4gIH1cblxuICAvKipcbiAgICogUmVwbGFjZSBhbiBleGlzdGluZyBTdGF0dXNCYXIgc3RhY2sgZW50cnkgd2l0aCBuZXcgcHJvcHMuXG4gICAqXG4gICAqIEBwYXJhbSBlbnRyeSBFbnRyeSByZXR1cm5lZCBmcm9tIGBwdXNoU3RhY2tFbnRyeWAgdG8gcmVwbGFjZS5cbiAgICogQHBhcmFtIHByb3BzIE9iamVjdCBjb250YWluaW5nIHRoZSBTdGF0dXNCYXIgcHJvcHMgdG8gdXNlIGluIHRoZSByZXBsYWNlbWVudCBzdGFjayBlbnRyeS5cbiAgICovXG4gIHN0YXRpYyByZXBsYWNlU3RhY2tFbnRyeShlbnRyeTogYW55LCBwcm9wczogYW55KTogYW55IHtcbiAgICBjb25zdCBuZXdFbnRyeSA9IGNyZWF0ZVN0YWNrRW50cnkocHJvcHMpO1xuICAgIGNvbnN0IGluZGV4ID0gU3RhdHVzQmFyLl9wcm9wc1N0YWNrLmluZGV4T2YoZW50cnkpO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIFN0YXR1c0Jhci5fcHJvcHNTdGFja1tpbmRleF0gPSBuZXdFbnRyeTtcbiAgICB9XG4gICAgU3RhdHVzQmFyLl91cGRhdGVQcm9wc1N0YWNrKCk7XG4gICAgcmV0dXJuIG5ld0VudHJ5O1xuICB9XG5cbiAgLy8gJEZsb3dGaXhNZVttaXNzaW5nLWxvY2FsLWFubm90XVxuICBfc3RhY2tFbnRyeSA9IG51bGw7XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgLy8gRXZlcnkgdGltZSBhIFN0YXR1c0JhciBjb21wb25lbnQgaXMgbW91bnRlZCwgd2UgcHVzaCBpdCdzIHByb3AgdG8gYSBzdGFja1xuICAgIC8vIGFuZCBhbHdheXMgdXBkYXRlIHRoZSBuYXRpdmUgc3RhdHVzIGJhciB3aXRoIHRoZSBwcm9wcyBmcm9tIHRoZSB0b3Agb2YgdGhlblxuICAgIC8vIHN0YWNrLiBUaGlzIGFsbG93cyBoYXZpbmcgbXVsdGlwbGUgU3RhdHVzQmFyIGNvbXBvbmVudHMgYW5kIHRoZSBvbmUgdGhhdCBpc1xuICAgIC8vIGFkZGVkIGxhc3Qgb3IgaXMgZGVlcGVyIGluIHRoZSB2aWV3IGhpZXJhcmNoeSB3aWxsIGhhdmUgcHJpb3JpdHkuXG4gICAgdGhpcy5fc3RhY2tFbnRyeSA9IFN0YXR1c0Jhci5wdXNoU3RhY2tFbnRyeSh0aGlzLnByb3BzKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIC8vIFdoZW4gYSBTdGF0dXNCYXIgaXMgdW5tb3VudGVkLCByZW1vdmUgaXRzZWxmIGZyb20gdGhlIHN0YWNrIGFuZCB1cGRhdGVcbiAgICAvLyB0aGUgbmF0aXZlIGJhciB3aXRoIHRoZSBuZXh0IHByb3BzLlxuICAgIFN0YXR1c0Jhci5wb3BTdGFja0VudHJ5KHRoaXMuX3N0YWNrRW50cnkpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIHRoaXMuX3N0YWNrRW50cnkgPSBTdGF0dXNCYXIucmVwbGFjZVN0YWNrRW50cnkoXG4gICAgICB0aGlzLl9zdGFja0VudHJ5LFxuICAgICAgdGhpcy5wcm9wcyxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIG5hdGl2ZSBzdGF0dXMgYmFyIHdpdGggdGhlIHByb3BzIGZyb20gdGhlIHN0YWNrLlxuICAgKi9cbiAgc3RhdGljIF91cGRhdGVQcm9wc1N0YWNrID0gKCkgPT4ge1xuICAgIC8vIFNlbmQgdGhlIHVwZGF0ZSB0byB0aGUgbmF0aXZlIG1vZHVsZSBvbmx5IG9uY2UgYXQgdGhlIGVuZCBvZiB0aGUgZnJhbWUuXG4gICAgY2xlYXJJbW1lZGlhdGUoU3RhdHVzQmFyLl91cGRhdGVJbW1lZGlhdGUpO1xuICAgIFN0YXR1c0Jhci5fdXBkYXRlSW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlKCgpID0+IHtcbiAgICAgIGNvbnN0IG9sZFByb3BzID0gU3RhdHVzQmFyLl9jdXJyZW50VmFsdWVzO1xuICAgICAgY29uc3QgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzU3RhY2soXG4gICAgICAgIFN0YXR1c0Jhci5fcHJvcHNTdGFjayxcbiAgICAgICAgU3RhdHVzQmFyLl9kZWZhdWx0UHJvcHMsXG4gICAgICApO1xuXG4gICAgICAvLyBVcGRhdGUgdGhlIHByb3BzIHRoYXQgaGF2ZSBjaGFuZ2VkIHVzaW5nIHRoZSBtZXJnZWQgdmFsdWVzIGZyb20gdGhlIHByb3BzIHN0YWNrLlxuICAgICAgaWYgKFBsYXRmb3JtLk9TID09PSAnaW9zJykge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgIW9sZFByb3BzIHx8XG4gICAgICAgICAgb2xkUHJvcHMuYmFyU3R5bGUudmFsdWUgIT09IG1lcmdlZFByb3BzLmJhclN0eWxlLnZhbHVlXG4gICAgICAgICkge1xuICAgICAgICAgIE5hdGl2ZVN0YXR1c0Jhck1hbmFnZXJJT1Muc2V0U3R5bGUoXG4gICAgICAgICAgICBtZXJnZWRQcm9wcy5iYXJTdHlsZS52YWx1ZSxcbiAgICAgICAgICAgIG1lcmdlZFByb3BzLmJhclN0eWxlLmFuaW1hdGVkIHx8IGZhbHNlLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvbGRQcm9wcyB8fCBvbGRQcm9wcy5oaWRkZW4udmFsdWUgIT09IG1lcmdlZFByb3BzLmhpZGRlbi52YWx1ZSkge1xuICAgICAgICAgIE5hdGl2ZVN0YXR1c0Jhck1hbmFnZXJJT1Muc2V0SGlkZGVuKFxuICAgICAgICAgICAgbWVyZ2VkUHJvcHMuaGlkZGVuLnZhbHVlLFxuICAgICAgICAgICAgbWVyZ2VkUHJvcHMuaGlkZGVuLmFuaW1hdGVkXG4gICAgICAgICAgICAgID8gbWVyZ2VkUHJvcHMuaGlkZGVuLnRyYW5zaXRpb25cbiAgICAgICAgICAgICAgOiAnbm9uZScsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAhb2xkUHJvcHMgfHxcbiAgICAgICAgICBvbGRQcm9wcy5uZXR3b3JrQWN0aXZpdHlJbmRpY2F0b3JWaXNpYmxlICE9PVxuICAgICAgICAgICAgbWVyZ2VkUHJvcHMubmV0d29ya0FjdGl2aXR5SW5kaWNhdG9yVmlzaWJsZVxuICAgICAgICApIHtcbiAgICAgICAgICBOYXRpdmVTdGF0dXNCYXJNYW5hZ2VySU9TLnNldE5ldHdvcmtBY3Rpdml0eUluZGljYXRvclZpc2libGUoXG4gICAgICAgICAgICBtZXJnZWRQcm9wcy5uZXR3b3JrQWN0aXZpdHlJbmRpY2F0b3JWaXNpYmxlLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJykge1xuICAgICAgICAvL3RvZG8oVDYwNjg0Nzg3KTogQWRkIGJhY2sgb3B0aW1pemF0aW9uIHRvIG9ubHkgdXBkYXRlIGJhciBzdHlsZSBhbmRcbiAgICAgICAgLy9iYWNrZ3JvdW5kIGNvbG9yIGlmIHRoZSBuZXcgdmFsdWUgaXMgZGlmZmVyZW50IGZyb20gdGhlIG9sZCB2YWx1ZS5cbiAgICAgICAgTmF0aXZlU3RhdHVzQmFyTWFuYWdlckFuZHJvaWQuc2V0U3R5bGUobWVyZ2VkUHJvcHMuYmFyU3R5bGUudmFsdWUpO1xuICAgICAgICBjb25zdCBwcm9jZXNzZWRDb2xvciA9IHByb2Nlc3NDb2xvcihtZXJnZWRQcm9wcy5iYWNrZ3JvdW5kQ29sb3IudmFsdWUpO1xuICAgICAgICBpZiAocHJvY2Vzc2VkQ29sb3IgPT0gbnVsbCkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIGBcXGBTdGF0dXNCYXIuX3VwZGF0ZVByb3BzU3RhY2tcXGA6IENvbG9yICR7bWVyZ2VkUHJvcHMuYmFja2dyb3VuZENvbG9yLnZhbHVlfSBwYXJzZWQgdG8gbnVsbCBvciB1bmRlZmluZWRgLFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW52YXJpYW50KFxuICAgICAgICAgICAgdHlwZW9mIHByb2Nlc3NlZENvbG9yID09PSAnbnVtYmVyJyxcbiAgICAgICAgICAgICdVbmV4cGVjdGVkIGNvbG9yIGdpdmVuIGluIFN0YXR1c0Jhci5fdXBkYXRlUHJvcHNTdGFjaycsXG4gICAgICAgICAgKTtcbiAgICAgICAgICBOYXRpdmVTdGF0dXNCYXJNYW5hZ2VyQW5kcm9pZC5zZXRDb2xvcihcbiAgICAgICAgICAgIHByb2Nlc3NlZENvbG9yLFxuICAgICAgICAgICAgbWVyZ2VkUHJvcHMuYmFja2dyb3VuZENvbG9yLmFuaW1hdGVkLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvbGRQcm9wcyB8fCBvbGRQcm9wcy5oaWRkZW4udmFsdWUgIT09IG1lcmdlZFByb3BzLmhpZGRlbi52YWx1ZSkge1xuICAgICAgICAgIE5hdGl2ZVN0YXR1c0Jhck1hbmFnZXJBbmRyb2lkLnNldEhpZGRlbihtZXJnZWRQcm9wcy5oaWRkZW4udmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFjdGl2aXRpZXMgYXJlIG5vdCB0cmFuc2x1Y2VudCBieSBkZWZhdWx0LCBzbyBhbHdheXMgc2V0IGlmIHRydWUuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAhb2xkUHJvcHMgfHxcbiAgICAgICAgICBvbGRQcm9wcy50cmFuc2x1Y2VudCAhPT0gbWVyZ2VkUHJvcHMudHJhbnNsdWNlbnQgfHxcbiAgICAgICAgICBtZXJnZWRQcm9wcy50cmFuc2x1Y2VudFxuICAgICAgICApIHtcbiAgICAgICAgICBOYXRpdmVTdGF0dXNCYXJNYW5hZ2VyQW5kcm9pZC5zZXRUcmFuc2x1Y2VudChtZXJnZWRQcm9wcy50cmFuc2x1Y2VudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFVwZGF0ZSB0aGUgY3VycmVudCBwcm9wIHZhbHVlcy5cbiAgICAgIFN0YXR1c0Jhci5fY3VycmVudFZhbHVlcyA9IG1lcmdlZFByb3BzO1xuICAgIH0pO1xuICB9O1xuXG4gIHJlbmRlcigpOiBSZWFjdC5Ob2RlIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFN0YXR1c0JhcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBWUEsSUFBQUEsYUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsU0FBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsOEJBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLDBCQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSSxVQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSyxLQUFBLEdBQUFDLHVCQUFBLENBQUFOLE9BQUE7QUFBK0IsSUFBQU8sVUFBQSxFQUFBQyxxQkFBQTtBQUFBLFNBQUFGLHdCQUFBRyxDQUFBLEVBQUFDLENBQUEsNkJBQUFDLE9BQUEsTUFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBTCx1QkFBQSxZQUFBQSx3QkFBQUcsQ0FBQSxFQUFBQyxDQUFBLFNBQUFBLENBQUEsSUFBQUQsQ0FBQSxJQUFBQSxDQUFB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