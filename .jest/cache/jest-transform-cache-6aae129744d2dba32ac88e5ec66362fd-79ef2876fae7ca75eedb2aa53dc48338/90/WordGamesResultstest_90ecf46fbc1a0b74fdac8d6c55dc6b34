6bf01424480cd26923bb6a0c3a8cb365
_getJestObj().mock('../../../../src/components/ui/ContentSection', function () {
  return function MockContentSection(_ref) {
    var title = _ref.title,
      content = _ref.content,
      children = _ref.children;
    return (0, _jsxRuntime.jsxs)("div", {
      testID: `ContentSection-${title}`,
      children: [(0, _jsxRuntime.jsx)("div", {
        testID: "ContentSection-title",
        children: title
      }), (0, _jsxRuntime.jsx)("div", {
        testID: "ContentSection-content",
        children: content
      }), children]
    });
  };
});
_getJestObj().mock('../../../../src/components/ui/PerformanceCard', function () {
  return function MockPerformanceCard(_ref2) {
    var content = _ref2.content,
      levelColor = _ref2.levelColor,
      backgroundColor = _ref2.backgroundColor,
      icon = _ref2.icon;
    return (0, _jsxRuntime.jsxs)("div", {
      testID: "PerformanceCard",
      children: [(0, _jsxRuntime.jsx)("div", {
        testID: "PerformanceCard-content",
        children: content
      }), (0, _jsxRuntime.jsx)("div", {
        testID: "PerformanceCard-color",
        children: levelColor
      }), (0, _jsxRuntime.jsx)("div", {
        testID: "PerformanceCard-bg",
        children: backgroundColor
      }), (0, _jsxRuntime.jsx)("div", {
        testID: "PerformanceCard-icon",
        children: icon
      })]
    });
  };
});
_getJestObj().mock('../../../../src/components/exercise-common/NavigationButtons', function () {
  return function MockNavigationButtons(_ref3) {
    var onNext = _ref3.onNext,
      buttonLabels = _ref3.buttonLabels,
      primaryColor = _ref3.primaryColor,
      isLast = _ref3.isLast;
    return (0, _jsxRuntime.jsx)("button", {
      testID: "NavigationButtons",
      onClick: onNext,
      children: (buttonLabels == null ? void 0 : buttonLabels.next) || 'Next'
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _WordGamesResults = _interopRequireDefault(require("../../../../src/screens/exercises/word-games/WordGamesResults"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('WordGamesResults', function () {
  var defaultProps = {
    games: [{
      type: 'vocabulary',
      id: 'vocab-1'
    }, {
      type: 'spelling',
      id: 'spell-1'
    }],
    gameResults: [{
      score: 8,
      maxScore: 10
    }, {
      score: 7,
      maxScore: 10
    }],
    finalScore: {
      score: 15,
      percentage: 75,
      totalMaxScore: 20
    },
    levelColor: '#3b82f6',
    onContinue: jest.fn(),
    performance: {
      message: 'ðŸŽ¯ Good Job!',
      description: 'You did well!',
      color: '#10b981'
    },
    gameTypeStats: [{
      type: 'vocabulary',
      percentage: 80,
      completedCount: 8,
      gamesCount: 10
    }, {
      type: 'spelling',
      percentage: 70,
      completedCount: 7,
      gamesCount: 10
    }],
    feedbackMessage: 'Keep practicing to improve!'
  };
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('Rendu de base', function () {
    it('devrait afficher le composant avec toutes les sections', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_WordGamesResults.default, Object.assign({}, defaultProps)));
      expect(_reactNative.screen.getByTestId('PerformanceCard')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('ContentSection-Games Review')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('ContentSection-Performance by Game Type')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('ContentSection-Feedback')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('NavigationButtons')).toBeTruthy();
    });
    it('devrait afficher les statistiques des jeux', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_WordGamesResults.default, Object.assign({}, defaultProps)));
      var gamesReview = _reactNative.screen.getByTestId('ContentSection-Games Review');
      expect(gamesReview).toBeTruthy();
    });
    it('devrait afficher l\'analyse par type de jeu', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_WordGamesResults.default, Object.assign({}, defaultProps)));
      var gameTypeStats = _reactNative.screen.getByTestId('ContentSection-Performance by Game Type');
      expect(gameTypeStats).toBeTruthy();
    });
  });
  describe('Bouton Play Again - Logique Boolean(onPlayAgain)', function () {
    it('devrait afficher le bouton Play Again quand onPlayAgain est dÃ©fini ET score < 80%', function () {
      var propsWithPlayAgain = Object.assign({}, defaultProps, {
        onPlayAgain: jest.fn(),
        finalScore: Object.assign({}, defaultProps.finalScore, {
          percentage: 75
        })
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_WordGamesResults.default, Object.assign({}, propsWithPlayAgain)));
      expect(_reactNative.screen.getByTestId('NavigationButtons')).toBeTruthy();
    });
    it('devrait NE PAS afficher le bouton Play Again quand onPlayAgain est undefined', function () {
      var propsWithoutPlayAgain = Object.assign({}, defaultProps, {
        onPlayAgain: undefined,
        finalScore: Object.assign({}, defaultProps.finalScore, {
          percentage: 75
        })
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_WordGamesResults.default, Object.assign({}, propsWithoutPlayAgain)));
      expect(_reactNative.screen.getByTestId('NavigationButtons')).toBeTruthy();
    });
    it('devrait NE PAS afficher le bouton Play Again quand onPlayAgain est null', function () {
      var propsWithNullPlayAgain = Object.assign({}, defaultProps, {
        onPlayAgain: null,
        finalScore: Object.assign({}, defaultProps.finalScore, {
          percentage: 75
        })
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_WordGamesResults.default, Object.assign({}, propsWithNullPlayAgain)));
      expect(_reactNative.screen.getByTestId('NavigationButtons')).toBeTruthy();
    });
    it('devrait NE PAS afficher le bouton Play Again quand score >= 80%', function () {
      var propsWithHighScore = Object.assign({}, defaultProps, {
        onPlayAgain: jest.fn(),
        finalScore: Object.assign({}, defaultProps.finalScore, {
          percentage: 85
        })
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_WordGamesResults.default, Object.assign({}, propsWithHighScore)));
      expect(_reactNative.screen.getByTestId('NavigationButtons')).toBeTruthy();
    });
    it('devrait NE PAS afficher le bouton Play Again quand onPlayAgain est une chaÃ®ne vide', function () {
      var propsWithEmptyString = Object.assign({}, defaultProps, {
        onPlayAgain: '',
        finalScore: Object.assign({}, defaultProps.finalScore, {
          percentage: 75
        })
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_WordGamesResults.default, Object.assign({}, propsWithEmptyString)));
      expect(_reactNative.screen.getByTestId('NavigationButtons')).toBeTruthy();
    });
    it('devrait NE PAS afficher le bouton Play Again quand onPlayAgain est 0', function () {
      var propsWithZero = Object.assign({}, defaultProps, {
        onPlayAgain: 0,
        finalScore: Object.assign({}, defaultProps.finalScore, {
          percentage: 75
        })
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_WordGamesResults.default, Object.assign({}, propsWithZero)));
      expect(_reactNative.screen.getByTestId('NavigationButtons')).toBeTruthy();
    });
    it('devrait afficher le bouton Play Again quand onPlayAgain est une fonction ET score < 80%', function () {
      var mockFunction = jest.fn();
      var propsWithFunction = Object.assign({}, defaultProps, {
        onPlayAgain: mockFunction,
        finalScore: Object.assign({}, defaultProps.finalScore, {
          percentage: 75
        })
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_WordGamesResults.default, Object.assign({}, propsWithFunction)));
      expect(_reactNative.screen.getByTestId('NavigationButtons')).toBeTruthy();
    });
  });
  describe('Gestion des props manquantes', function () {
    it('devrait gÃ©rer les jeux vides', function () {
      var propsWithoutGames = Object.assign({}, defaultProps, {
        games: []
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_WordGamesResults.default, Object.assign({}, propsWithoutGames)));
      expect(_reactNative.screen.queryByTestId('ContentSection-Games Review')).toBeFalsy();
    });
    it('devrait gÃ©rer les statistiques de type de jeu insuffisantes', function () {
      var propsWithSingleGameType = Object.assign({}, defaultProps, {
        gameTypeStats: [{
          type: 'vocabulary',
          percentage: 80,
          completedCount: 8,
          gamesCount: 10
        }]
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_WordGamesResults.default, Object.assign({}, propsWithoutGames)));
      expect(_reactNative.screen.queryByTestId('ContentSection-Performance by Game Type')).toBeFalsy();
    });
    it('devrait gÃ©rer l\'absence de message de feedback', function () {
      var propsWithoutFeedback = Object.assign({}, defaultProps, {
        feedbackMessage: null
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_WordGamesResults.default, Object.assign({}, propsWithoutFeedback)));
      expect(_reactNative.screen.queryByTestId('ContentSection-Feedback')).toBeFalsy();
    });
  });
  describe('Navigation et callbacks', function () {
    it('devrait appeler onContinue quand le bouton Continue est cliquÃ©', function () {
      var mockOnContinue = jest.fn();
      var props = Object.assign({}, defaultProps, {
        onContinue: mockOnContinue
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_WordGamesResults.default, Object.assign({}, props)));
      var continueButton = _reactNative.screen.getByTestId('NavigationButtons');
      continueButton.click();
      expect(mockOnContinue).toHaveBeenCalledTimes(1);
    });
    it('devrait appeler onPlayAgain quand le bouton Play Again est cliquÃ©', function () {
      var mockOnPlayAgain = jest.fn();
      var props = Object.assign({}, defaultProps, {
        onPlayAgain: mockOnPlayAgain,
        finalScore: Object.assign({}, defaultProps.finalScore, {
          percentage: 75
        })
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_WordGamesResults.default, Object.assign({}, props)));
      var playAgainButton = _reactNative.screen.getByTestId('NavigationButtons');
      playAgainButton.click();
      expect(mockOnPlayAgain).toHaveBeenCalledTimes(1);
    });
  });
  describe('Validation des props', function () {
    it('devrait avoir des PropTypes valides', function () {
      expect(_WordGamesResults.default.propTypes).toBeDefined();
      expect(_WordGamesResults.default.propTypes.games).toBeDefined();
      expect(_WordGamesResults.default.propTypes.gameResults).toBeDefined();
      expect(_WordGamesResults.default.propTypes.finalScore).toBeDefined();
      expect(_WordGamesResults.default.propTypes.levelColor).toBeDefined();
      expect(_WordGamesResults.default.propTypes.onPlayAgain).toBeDefined();
      expect(_WordGamesResults.default.propTypes.onContinue).toBeDefined();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,