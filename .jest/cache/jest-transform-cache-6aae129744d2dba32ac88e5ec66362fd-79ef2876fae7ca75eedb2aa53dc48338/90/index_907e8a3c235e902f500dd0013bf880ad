d36ba8bceedf830746a20794d4d23533
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _react = require("react");
var _expoLinearGradient = require("expo-linear-gradient");
var _vectorIcons = require("@expo/vector-icons");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _ProgressBar = _interopRequireDefault(require("../ProgressBar"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var ProgressCard = function ProgressCard(_ref) {
  var _ref$title = _ref.title,
    title = _ref$title === void 0 ? "Progression" : _ref$title,
    _ref$subtitle = _ref.subtitle,
    subtitle = _ref$subtitle === void 0 ? "" : _ref$subtitle,
    _ref$progress = _ref.progress,
    progress = _ref$progress === void 0 ? 0 : _ref$progress,
    _ref$completed = _ref.completed,
    completed = _ref$completed === void 0 ? 0 : _ref$completed,
    _ref$total = _ref.total,
    total = _ref$total === void 0 ? 0 : _ref$total,
    _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? "#5E60CE" : _ref$levelColor,
    _ref$expandable = _ref.expandable,
    expandable = _ref$expandable === void 0 ? false : _ref$expandable,
    _ref$expanded = _ref.expanded,
    expanded = _ref$expanded === void 0 ? false : _ref$expanded,
    onToggleExpand = _ref.onToggleExpand,
    _ref$categoryData = _ref.categoryData,
    categoryData = _ref$categoryData === void 0 ? [] : _ref$categoryData,
    onCategoryPress = _ref.onCategoryPress;
  var styles = (0, _style.default)(levelColor);
  var configureLayoutAnimation = function configureLayoutAnimation() {
    if (_reactNative.Platform.OS === 'ios') {
      _reactNative.LayoutAnimation.configureNext({
        duration: 300,
        create: {
          type: _reactNative.LayoutAnimation.Types.easeInEaseOut,
          property: _reactNative.LayoutAnimation.Properties.opacity
        },
        update: {
          type: _reactNative.LayoutAnimation.Types.easeInEaseOut,
          property: _reactNative.LayoutAnimation.Properties.scaleXY
        },
        delete: {
          type: _reactNative.LayoutAnimation.Types.easeInEaseOut,
          property: _reactNative.LayoutAnimation.Properties.opacity
        }
      });
    } else {
      _reactNative.LayoutAnimation.configureNext(_reactNative.LayoutAnimation.Presets.easeInEaseOut);
    }
  };
  var toggleExpanded = (0, _react.useCallback)(function () {
    if (!expandable) return;
    configureLayoutAnimation();
    onToggleExpand == null || onToggleExpand();
  }, [expandable, onToggleExpand]);
  var handleCategoryPress = (0, _react.useCallback)(function (idx) {
    return function () {
      return onCategoryPress == null ? void 0 : onCategoryPress(idx);
    };
  }, [onCategoryPress]);
  var CardHeader = function CardHeader(_ref2) {
    var headerTitle = _ref2.headerTitle,
      headerSubtitle = _ref2.headerSubtitle,
      headerCompleted = _ref2.headerCompleted,
      headerTotal = _ref2.headerTotal,
      headerProgress = _ref2.headerProgress,
      headerLevelColor = _ref2.headerLevelColor,
      headerExpandable = _ref2.headerExpandable,
      headerExpanded = _ref2.headerExpanded,
      headerToggleExpanded = _ref2.headerToggleExpanded,
      headerStyles = _ref2.headerStyles;
    return (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
      style: headerStyles.header,
      onPress: headerToggleExpanded,
      activeOpacity: headerExpandable ? 0.8 : 1,
      children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: headerStyles.headerLeft,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: headerStyles.title,
          children: headerTitle || 'Progression'
        }), headerSubtitle && (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: headerStyles.subtitle,
          children: headerSubtitle
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: headerStyles.headerRight,
        children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: headerStyles.statsContainer,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [headerStyles.statsCount, {
              color: headerLevelColor
            }],
            children: headerCompleted || 0
          }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
            style: headerStyles.statsTotal,
            children: ["/", headerTotal || 0]
          })]
        }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: [headerStyles.statsPercentage, {
            color: headerLevelColor
          }],
          children: [Math.round(headerProgress || 0), "%"]
        }), headerExpandable && (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [headerStyles.chevronContainer, headerExpanded && headerStyles.chevronExpanded],
          children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
            name: "chevron-down",
            size: 16,
            color: headerLevelColor
          })
        })]
      })]
    });
  };
  var MainProgressBar = function MainProgressBar(_ref3) {
    var mainProgress = _ref3.mainProgress,
      mainLevelColor = _ref3.mainLevelColor,
      mainStyles = _ref3.mainStyles;
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: mainStyles.progressSection,
      children: (0, _jsxRuntime.jsx)(_ProgressBar.default, {
        progress: mainProgress,
        showPercentage: false,
        fillColor: mainLevelColor,
        height: 6,
        backgroundColor: `${mainLevelColor}15`,
        borderRadius: 3,
        animated: true
      })
    });
  };
  var Expansion = function Expansion(_ref4) {
    var localExpandable = _ref4.expandable,
      localExpanded = _ref4.expanded,
      localCategoryData = _ref4.categoryData,
      localHandleCategoryPress = _ref4.handleCategoryPress,
      localLevelColor = _ref4.levelColor,
      localStyles = _ref4.styles;
    return localExpandable && localExpanded && localCategoryData.length > 0 && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: localStyles.expansionWrapper,
      children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: localStyles.expansionContainer,
        children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: localStyles.expansionHeader,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: localStyles.expansionTitle,
            children: "Par cat\xE9gorie"
          }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
            style: localStyles.expansionSubtitle,
            children: [localCategoryData.length, " ", localCategoryData.length > 1 ? 'catégories' : 'catégorie']
          })]
        }), (0, _jsxRuntime.jsx)(CategoryList, {
          categoryData: localCategoryData,
          handleCategoryPress: localHandleCategoryPress,
          levelColor: localLevelColor,
          styles: localStyles
        })]
      })
    });
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsxs)(_expoLinearGradient.LinearGradient, {
      colors: [`${levelColor}06`, `${levelColor}03`, 'transparent'],
      start: {
        x: 0,
        y: 0
      },
      end: {
        x: 1,
        y: 1
      },
      style: styles.cardGradient,
      children: [(0, _jsxRuntime.jsx)(CardHeader, {
        headerTitle: title,
        headerSubtitle: subtitle,
        headerCompleted: completed,
        headerTotal: total,
        headerProgress: progress,
        headerLevelColor: levelColor,
        headerExpandable: expandable,
        headerExpanded: expanded,
        headerToggleExpanded: toggleExpanded,
        headerStyles: styles
      }), (0, _jsxRuntime.jsx)(MainProgressBar, {
        mainProgress: progress,
        mainLevelColor: levelColor,
        mainStyles: styles
      })]
    }), (0, _jsxRuntime.jsx)(Expansion, {
      expandable: expandable,
      expanded: expanded,
      categoryData: categoryData,
      handleCategoryPress: handleCategoryPress,
      levelColor: levelColor,
      styles: styles
    })]
  });
};
var CategoryList = function CategoryList(_ref5) {
  var categoryData = _ref5.categoryData,
    handleCategoryPress = _ref5.handleCategoryPress,
    levelColor = _ref5.levelColor,
    styles = _ref5.styles;
  if (!categoryData || !Array.isArray(categoryData)) return null;
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: styles.categoriesList,
    children: categoryData.map(function (category, index) {
      if (!category || typeof category !== 'object') return null;
      return (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
        style: styles.categoryItem,
        onPress: handleCategoryPress ? handleCategoryPress(index) : undefined,
        activeOpacity: 0.7,
        children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.categoryRow,
          children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.categoryLeft,
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.categoryTitle,
              numberOfLines: 1,
              children: category.title || 'Catégorie'
            })
          }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
            style: [styles.categoryStats, {
              color: levelColor
            }],
            children: [category.completed || 0, "/", category.total || 0]
          })]
        }), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.categoryProgressContainer,
          children: (0, _jsxRuntime.jsx)(_ProgressBar.default, {
            progress: category.progress || 0,
            showPercentage: false,
            fillColor: levelColor,
            backgroundColor: `${levelColor}10`,
            height: 3,
            borderRadius: 2,
            animated: true
          })
        })]
      }, category.id || category.title || index);
    })
  });
};
ProgressCard.propTypes = {
  title: _propTypes.default.string,
  subtitle: _propTypes.default.string,
  progress: _propTypes.default.number,
  completed: _propTypes.default.number,
  total: _propTypes.default.number,
  levelColor: _propTypes.default.string,
  expandable: _propTypes.default.bool,
  expanded: _propTypes.default.bool,
  onToggleExpand: _propTypes.default.func,
  categoryData: _propTypes.default.arrayOf(_propTypes.default.shape({
    id: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    title: _propTypes.default.string,
    completed: _propTypes.default.number,
    total: _propTypes.default.number,
    progress: _propTypes.default.number
  })),
  onCategoryPress: _propTypes.default.func
};
CategoryList.propTypes = {
  categoryData: _propTypes.default.arrayOf(_propTypes.default.shape({
    id: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    title: _propTypes.default.string,
    completed: _propTypes.default.number,
    total: _propTypes.default.number,
    progress: _propTypes.default.number
  })),
  handleCategoryPress: _propTypes.default.func,
  levelColor: _propTypes.default.string,
  styles: _propTypes.default.object.isRequired
};
var _default = exports.default = ProgressCard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,