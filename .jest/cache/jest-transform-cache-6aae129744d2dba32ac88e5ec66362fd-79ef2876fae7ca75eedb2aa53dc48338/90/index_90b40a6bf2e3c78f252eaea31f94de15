078e1b0c4bcce2fb1a406cc17299c3d0
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _reactNative = require("react-native");
var _vectorIcons = require("@expo/vector-icons");
var _style2 = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["title", "onPress", "variant", "size", "color", "fullWidth", "disabled", "loading", "leftIcon", "rightIcon", "iconOnly", "style", "textStyle", "onLongPress", "elevation", "uppercase", "rounded"];
var Button = function Button(_ref) {
  var title = _ref.title,
    onPress = _ref.onPress,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? "filled" : _ref$variant,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? "medium" : _ref$size,
    _ref$color = _ref.color,
    color = _ref$color === void 0 ? "primary" : _ref$color,
    _ref$fullWidth = _ref.fullWidth,
    fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$loading = _ref.loading,
    loading = _ref$loading === void 0 ? false : _ref$loading,
    leftIcon = _ref.leftIcon,
    rightIcon = _ref.rightIcon,
    iconOnly = _ref.iconOnly,
    _style = _ref.style,
    textStyle = _ref.textStyle,
    onLongPress = _ref.onLongPress,
    _ref$elevation = _ref.elevation,
    elevation = _ref$elevation === void 0 ? true : _ref$elevation,
    _ref$uppercase = _ref.uppercase,
    uppercase = _ref$uppercase === void 0 ? false : _ref$uppercase,
    _ref$rounded = _ref.rounded,
    rounded = _ref$rounded === void 0 ? false : _ref$rounded,
    props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var colors = {
    primary: "#5E60CE",
    secondary: "#6B7280",
    success: "#10B981",
    warning: "#F59E0B",
    danger: "#EF4444",
    info: "#3B82F6"
  };
  var baseColor = colors[color] || colors.primary;
  var getSizeStyles = function getSizeStyles(buttonSize) {
    switch (buttonSize) {
      case "small":
        return {
          button: _style2.default.smallButton,
          text: _style2.default.smallText,
          iconSize: 16,
          loaderSize: "small"
        };
      case "large":
        return {
          button: _style2.default.largeButton,
          text: _style2.default.largeText,
          iconSize: 24,
          loaderSize: "large"
        };
      case "medium":
      default:
        return {
          button: _style2.default.mediumButton,
          text: _style2.default.mediumText,
          iconSize: 20,
          loaderSize: "small"
        };
    }
  };
  var sizeStyles = getSizeStyles(size);
  var getVariantStyles = function getVariantStyles() {
    switch (variant) {
      case "outlined":
        return {
          button: {
            backgroundColor: "transparent",
            borderWidth: 1,
            borderColor: disabled ? "#D1D5DB" : baseColor
          },
          text: {
            color: disabled ? "#9CA3AF" : baseColor
          },
          icon: disabled ? "#9CA3AF" : baseColor,
          pressed: {
            backgroundColor: `${baseColor}10`
          }
        };
      case "text":
        return {
          button: {
            backgroundColor: "transparent",
            borderWidth: 0,
            paddingHorizontal: 12
          },
          text: {
            color: disabled ? "#9CA3AF" : baseColor
          },
          icon: disabled ? "#9CA3AF" : baseColor,
          pressed: {
            backgroundColor: `${baseColor}10`
          }
        };
      case "tonal":
        return {
          button: {
            backgroundColor: disabled ? "#F3F4F6" : `${baseColor}15`,
            borderWidth: 0
          },
          text: {
            color: disabled ? "#9CA3AF" : baseColor
          },
          icon: disabled ? "#9CA3AF" : baseColor,
          pressed: {
            backgroundColor: `${baseColor}25`
          }
        };
      case "icon":
        {
          var iconSizeValue = (sizeStyles == null ? void 0 : sizeStyles.iconSize) || 24;
          return {
            button: {
              backgroundColor: disabled ? "#F3F4F6" : "transparent",
              borderWidth: 0,
              padding: 0,
              minWidth: 0,
              minHeight: 0
            },
            icon: {
              fontSize: iconSizeValue,
              color: disabled ? "#A1A1AA" : color
            }
          };
        }
      case "filled":
      default:
        return {
          button: {
            backgroundColor: disabled ? "#E5E7EB" : baseColor,
            borderWidth: 0
          },
          text: {
            color: "white"
          },
          icon: "white",
          pressed: {
            backgroundColor: disabled ? "#E5E7EB" : `${baseColor}DD`
          }
        };
    }
  };
  var variantStyles = getVariantStyles();
  var iconSize = sizeStyles.iconSize;
  var elevationStyle = elevation && variant === "filled" && !disabled ? _style2.default.withElevation : {};
  var radiusStyle = rounded ? _style2.default.rounded : {};
  return (0, _jsxRuntime.jsx)(_reactNative.Pressable, Object.assign({
    style: function style(_ref2) {
      var pressed = _ref2.pressed;
      return [_style2.default.button, sizeStyles.button, variantStyles.button, fullWidth && _style2.default.fullWidth, pressed && variantStyles.pressed, elevationStyle, radiusStyle, _style];
    },
    onPress: onPress,
    onLongPress: onLongPress,
    disabled: disabled || loading,
    android_ripple: variant !== "text" && variant !== "outlined" ? {
      color: `${baseColor}30`,
      borderless: false
    } : null
  }, props, {
    children: loading ? (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
      size: sizeStyles.loaderSize,
      color: variantStyles.text.color
    }) : (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: _style2.default.contentContainer,
      children: [leftIcon && !iconOnly && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _style2.default.leftIconContainer,
        children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: leftIcon,
          size: iconSize,
          color: variantStyles.icon
        })
      }), iconOnly && (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
        name: iconOnly,
        size: iconSize,
        color: variantStyles.icon
      }), !iconOnly && title && (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [_style2.default.text, sizeStyles.text, variantStyles.text, uppercase && _style2.default.uppercase, textStyle],
        numberOfLines: 1,
        children: title
      }), rightIcon && !iconOnly && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _style2.default.rightIconContainer,
        children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: rightIcon,
          size: iconSize,
          color: variantStyles.icon
        })
      })]
    })
  }));
};
var _default = exports.default = Button;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,