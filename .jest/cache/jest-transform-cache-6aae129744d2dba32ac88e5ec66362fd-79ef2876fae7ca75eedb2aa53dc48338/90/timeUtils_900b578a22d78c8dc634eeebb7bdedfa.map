{"version":3,"names":["_timeConstants","require","isValidTimeInSeconds","exports","timeInSeconds","isNaN","isFinite","sanitizeTimeStats","stats","Object","assign","DEFAULT_STATS","sanitized","values","EXERCISE_TYPES","forEach","exerciseType","timeValue","Math","floor","getElapsedSeconds","startTime","elapsed","Date","now","max","secondsToMinutes","seconds","minutesToSeconds","minutes","formatTime","remainingSeconds","formatTimeCompact","toString","padStart","isValidStatsStructure","requiredTypes","hasAllTypes","every","type","hasOwn","getTotalTimeFromStats","reduce","total","time","getSortedStatsByTime","entries","map","_ref","_ref2","_slicedToArray2","default","sort","a","b","hasMinimumTime","minimumMinutes","arguments","length","undefined","includes","minimumSeconds"],"sources":["timeUtils.js"],"sourcesContent":["// utils/timeUtils.js\r\n/**\r\n * Utilitaires pour la gestion et validation des temps\r\n */\r\n\r\nimport { DEFAULT_STATS, EXERCISE_TYPES } from './timeConstants.js';\r\n\r\n/**\r\n * Valide qu'une valeur de temps en secondes est correcte\r\n * @param {any} timeInSeconds - Valeur à valider\r\n * @returns {boolean} True si valide\r\n */\r\nexport const isValidTimeInSeconds = (timeInSeconds) => {\r\n  return (\r\n    typeof timeInSeconds === 'number' &&\r\n    !isNaN(timeInSeconds) &&\r\n    isFinite(timeInSeconds) &&\r\n    timeInSeconds >= 0 &&\r\n    timeInSeconds <= 86400 // Max 24h par session\r\n  );\r\n};\r\n\r\n/**\r\n * Sanitise les stats de temps pour éviter les valeurs invalides\r\n * @param {object} stats - Stats à sanitiser\r\n * @returns {object} Stats nettoyées\r\n */\r\nexport const sanitizeTimeStats = (stats) => {\r\n  if (!stats || typeof stats !== 'object') {\r\n    return { ...DEFAULT_STATS };\r\n  }\r\n\r\n  const sanitized = { ...DEFAULT_STATS };\r\n\r\n  // Valider chaque type d'exercice\r\n  Object.values(EXERCISE_TYPES).forEach(exerciseType => {\r\n    const timeValue = stats[exerciseType];\r\n    \r\n    if (isValidTimeInSeconds(timeValue)) {\r\n      sanitized[exerciseType] = Math.floor(timeValue); // Arrondir à l'entier\r\n    } else {\r\n      sanitized[exerciseType] = 0; // Valeur par défaut\r\n    }\r\n  });\r\n\r\n  return sanitized;\r\n};\r\n\r\n/**\r\n * Calcule le temps écoulé depuis un timestamp\r\n * @param {number} startTime - Timestamp de début\r\n * @returns {number} Temps écoulé en secondes\r\n */\r\nexport const getElapsedSeconds = (startTime) => {\r\n  if (!startTime || typeof startTime !== 'number') {\r\n    return 0;\r\n  }\r\n\r\n  const elapsed = Math.floor((Date.now() - startTime) / 1000);\r\n  return Math.max(0, elapsed);\r\n};\r\n\r\n/**\r\n * Convertit des secondes en minutes (arrondi)\r\n * @param {number} seconds - Secondes à convertir\r\n * @returns {number} Minutes arrondies\r\n */\r\nexport const secondsToMinutes = (seconds) => {\r\n  if (!isValidTimeInSeconds(seconds)) {\r\n    return 0;\r\n  }\r\n  \r\n  return Math.floor(seconds / 60);\r\n};\r\n\r\n/**\r\n * Convertit des minutes en secondes\r\n * @param {number} minutes - Minutes à convertir\r\n * @returns {number} Secondes\r\n */\r\nexport const minutesToSeconds = (minutes) => {\r\n  if (typeof minutes !== 'number' || isNaN(minutes) || minutes < 0) {\r\n    return 0;\r\n  }\r\n  \r\n  return minutes * 60;\r\n};\r\n\r\n/**\r\n * Formate un temps en secondes pour l'affichage\r\n * @param {number} seconds - Secondes à formater\r\n * @returns {string} Temps formaté (ex: \"5m 30s\")\r\n */\r\nexport const formatTime = (seconds) => {\r\n  if (!isValidTimeInSeconds(seconds)) {\r\n    return \"0s\";\r\n  }\r\n\r\n  const minutes = Math.floor(seconds / 60);\r\n  const remainingSeconds = seconds % 60;\r\n\r\n  if (minutes === 0) {\r\n    return `${remainingSeconds}s`;\r\n  }\r\n\r\n  if (remainingSeconds === 0) {\r\n    return `${minutes}m`;\r\n  }\r\n\r\n  return `${minutes}m ${remainingSeconds}s`;\r\n};\r\n\r\n/**\r\n * Formate un temps en secondes pour l'affichage compact\r\n * @param {number} seconds - Secondes à formater\r\n * @returns {string} Temps formaté compact (ex: \"5:30\")\r\n */\r\nexport const formatTimeCompact = (seconds) => {\r\n  if (!isValidTimeInSeconds(seconds)) {\r\n    return \"0:00\";\r\n  }\r\n\r\n  const minutes = Math.floor(seconds / 60);\r\n  const remainingSeconds = seconds % 60;\r\n\r\n  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\r\n};\r\n\r\n/**\r\n * Valide qu'un objet de stats a la bonne structure\r\n * @param {any} stats - Stats à valider\r\n * @returns {boolean} True si structure valide\r\n */\r\nexport const isValidStatsStructure = (stats) => {\r\n  if (!stats || typeof stats !== 'object') {\r\n    return false;\r\n  }\r\n\r\n  // Vérifier que tous les types d'exercices requis sont présents\r\n  const requiredTypes = Object.values(EXERCISE_TYPES);\r\n  const hasAllTypes = requiredTypes.every(type => \r\n    Object.hasOwn(stats, type) && isValidTimeInSeconds(stats[type])\r\n  );\r\n\r\n  return hasAllTypes;\r\n};\r\n\r\n/**\r\n * Calcule le temps total de toutes les stats\r\n * @param {object} stats - Stats à additionner\r\n * @returns {number} Temps total en secondes\r\n */\r\nexport const getTotalTimeFromStats = (stats) => {\r\n  if (!isValidStatsStructure(stats)) {\r\n    return 0;\r\n  }\r\n\r\n  return Object.values(stats).reduce((total, time) => total + time, 0);\r\n};\r\n\r\n/**\r\n * Obtient les stats triées par temps décroissant\r\n * @param {object} stats - Stats à trier\r\n * @returns {Array} Tableau d'objets {exerciseType, time} triés\r\n */\r\nexport const getSortedStatsByTime = (stats) => {\r\n  if (!isValidStatsStructure(stats)) {\r\n    return [];\r\n  }\r\n\r\n  return Object.entries(stats)\r\n    .map(([exerciseType, time]) => ({ exerciseType, time }))\r\n    .sort((a, b) => b.time - a.time);\r\n};\r\n\r\n/**\r\n * Vérifie si l'utilisateur a du temps sur un exercice spécifique\r\n * @param {object} stats - Stats de l'utilisateur\r\n * @param {string} exerciseType - Type d'exercice à vérifier\r\n * @param {number} minimumMinutes - Minimum en minutes (défaut: 1)\r\n * @returns {boolean} True si l'utilisateur a assez de temps\r\n */\r\nexport const hasMinimumTime = (stats, exerciseType, minimumMinutes = 1) => {\r\n  if (!isValidStatsStructure(stats) || !Object.values(EXERCISE_TYPES).includes(exerciseType)) {\r\n    return false;\r\n  }\r\n\r\n  const timeInSeconds = stats[exerciseType] || 0;\r\n  const minimumSeconds = minutesToSeconds(minimumMinutes);\r\n  \r\n  return timeInSeconds >= minimumSeconds;\r\n};"],"mappings":"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","ignoreList":[]}