1c9ccbd76dd7dd1219e41e336b7dc5f0
_getJestObj().mock('../../../src/hooks/useRevisionManager', function () {
  return {
    __esModule: true,
    default: jest.fn(function () {
      return {
        markRevisionCompleted: mockMarkRevisionCompleted
      };
    })
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn(function () {
      return {
        goBack: mockGoBack
      };
    })
  };
});
_getJestObj().mock('../../../src/hooks/useRevisionData', function () {
  return {
    __esModule: true,
    default: jest.fn(function () {
      return {
        revisionQuestions: [],
        isLoading: false,
        error: null,
        stats: {
          totalLearned: 0
        },
        hasEnoughWords: false,
        canGenerateQuestions: false
      };
    })
  };
});
_getJestObj().mock('../../../src/hooks/useQuizEngine', function () {
  return {
    __esModule: true,
    default: jest.fn(function () {
      return {
        currentQuestion: null,
        currentQuestionIndex: 0,
        totalQuestions: 0,
        score: 0,
        isFinished: false,
        showResult: false,
        handleAnswer: jest.fn(function () {
          return true;
        }),
        goToNextQuestion: jest.fn(),
        handleRestart: jest.fn()
      };
    })
  };
});
_getJestObj().mock('../../../src/contexts/ThemeContext', function () {
  return {
    ThemeContext: {
      Consumer: function Consumer(_ref) {
        var children = _ref.children;
        return children({
          colors: {
            background: "#F8FAFC",
            surface: "#FFFFFF",
            text: "#1F2937",
            textSecondary: "#6B7280",
            primary: "#3B82F6"
          }
        });
      },
      useContext: function useContext() {
        return {
          colors: {
            background: "#F8FAFC",
            surface: "#FFFFFF",
            text: "#1F2937",
            textSecondary: "#6B7280",
            primary: "#3B82F6"
          }
        };
      }
    }
  };
});
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  RN.Animated.timing = function (value, config) {
    return {
      start: function start(callback) {
        value.setValue(config.toValue);
        callback && callback();
      }
    };
  };
  return RN;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _VocabularyRevision = _interopRequireDefault(require("../../../src/screens/VocabularyRevision"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockMarkRevisionCompleted = jest.fn();
var mockGoBack = jest.fn();
jest.spyOn(_reactNative2.Dimensions, 'get').mockReturnValue({
  width: 300,
  height: 600
});
describe('VocabularyRevision Integration Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
    require('../../../src/hooks/useRevisionData').default.mockImplementation(function () {
      return {
        revisionQuestions: [],
        isLoading: false,
        error: null,
        stats: {
          totalLearned: 0
        },
        hasEnoughWords: false,
        canGenerateQuestions: false
      };
    });
    require('../../../src/hooks/useQuizEngine').default.mockImplementation(function () {
      return {
        currentQuestion: null,
        currentQuestionIndex: 0,
        totalQuestions: 0,
        score: 0,
        isFinished: false,
        showResult: false,
        handleAnswer: jest.fn(function () {
          return true;
        }),
        goToNextQuestion: jest.fn(),
        handleRestart: jest.fn()
      };
    });
    mockMarkRevisionCompleted.mockClear();
    mockGoBack.mockClear();
  });
  afterEach(function () {
    jest.clearAllTimers();
  });
  test('renders loading state initially', (0, _asyncToGenerator2.default)(function* () {
    require('../../../src/hooks/useRevisionData').default.mockImplementation(function () {
      return {
        isLoading: true,
        revisionQuestions: [],
        error: null,
        stats: {
          totalLearned: 0
        },
        hasEnoughWords: false,
        canGenerateQuestions: false
      };
    });
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {})),
      getByText = _render.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('Récupération de vos mots appris')).toBeTruthy();
    });
  }));
  test('renders error state', (0, _asyncToGenerator2.default)(function* () {
    require('../../../src/hooks/useRevisionData').default.mockImplementation(function () {
      return {
        isLoading: false,
        error: 'Failed to load data',
        revisionQuestions: [],
        stats: {
          totalLearned: 0
        },
        hasEnoughWords: false,
        canGenerateQuestions: false
      };
    });
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {})),
      getByText = _render2.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('Failed to load data')).toBeTruthy();
    });
  }));
  test('renders locked state when not enough words', (0, _asyncToGenerator2.default)(function* () {
    require('../../../src/hooks/useRevisionData').default.mockImplementation(function () {
      return {
        isLoading: false,
        error: null,
        revisionQuestions: [],
        stats: {
          totalLearned: 30
        },
        hasEnoughWords: false,
        canGenerateQuestions: false
      };
    });
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {})),
      getByText = _render3.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText(/Apprenez 50 mots pour débloquer le mode révision et tester vos connaissances !/i)).toBeTruthy();
      expect(getByText('30 / 50')).toBeTruthy();
    });
  }));
  test('renders noWords state when enough words but cannot generate questions', (0, _asyncToGenerator2.default)(function* () {
    require('../../../src/hooks/useRevisionData').default.mockImplementation(function () {
      return {
        isLoading: false,
        error: null,
        revisionQuestions: [],
        stats: {
          totalLearned: 60
        },
        hasEnoughWords: true,
        canGenerateQuestions: false
      };
    });
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {
        route: {
          params: {
            questionsCount: 10
          }
        }
      })),
      getByText = _render4.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText(/Continuez d'apprendre pour diversifier les questions !/i)).toBeTruthy();
      expect(getByText(/Un quiz de 10 questions ne peut pas être généré pour ce niveau./i)).toBeTruthy();
    });
  }));
  test('renders QuizScreen and handles answer and continue', (0, _asyncToGenerator2.default)(function* () {
    var mockQuestions = [{
      id: 'q1',
      word: 'Word 1',
      choices: ['A', 'B', 'C'],
      correctAnswer: 'A'
    }, {
      id: 'q2',
      word: 'Word 2',
      choices: ['D', 'E', 'F'],
      correctAnswer: 'D'
    }];
    var useRevisionDataMock = require('../../../src/hooks/useRevisionData').default;
    useRevisionDataMock.mockImplementation(function () {
      return {
        revisionQuestions: mockQuestions,
        isLoading: false,
        error: null,
        stats: {
          totalLearned: 100
        },
        hasEnoughWords: true,
        canGenerateQuestions: true
      };
    });
    var useQuizEngineMock = require('../../../src/hooks/useQuizEngine').default;
    var mockGoToNextQuestion = jest.fn();
    useQuizEngineMock.mockImplementationOnce(function () {
      return {
        currentQuestion: mockQuestions[0],
        currentQuestionIndex: 0,
        totalQuestions: mockQuestions.length,
        score: 0,
        isFinished: false,
        showResult: false,
        handleAnswer: jest.fn(function () {
          return true;
        }),
        goToNextQuestion: mockGoToNextQuestion,
        handleRestart: jest.fn()
      };
    }).mockImplementation(function () {
      return {
        currentQuestion: mockQuestions[0],
        currentQuestionIndex: 0,
        totalQuestions: mockQuestions.length,
        score: 1,
        isFinished: false,
        showResult: true,
        handleAnswer: jest.fn(function () {
          return true;
        }),
        goToNextQuestion: mockGoToNextQuestion,
        handleRestart: jest.fn()
      };
    });
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {})),
      getByText = _render5.getByText,
      queryByText = _render5.queryByText,
      rerender = _render5.rerender;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('Word 1')).toBeTruthy();
      expect(queryByText('Result Screen')).toBeNull();
    });
    _reactNative.fireEvent.press(getByText('A'));
    jest.runOnlyPendingTimers();
    rerender((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('Continuer')).toBeTruthy();
    });
    _reactNative.fireEvent.press(getByText('Continuer'));
    expect(mockGoToNextQuestion).toHaveBeenCalled();
  }));
  test('renders ResultScreen when quiz is finished', (0, _asyncToGenerator2.default)(function* () {
    var mockQuestions = [{
      id: 'q1',
      word: 'Word 1',
      choices: ['A', 'B', 'C'],
      correctAnswer: 'A'
    }];
    require('../../../src/hooks/useRevisionData').default.mockImplementation(function () {
      return {
        revisionQuestions: mockQuestions,
        isLoading: false,
        error: null,
        stats: {
          totalLearned: 100
        },
        hasEnoughWords: true,
        canGenerateQuestions: true
      };
    });
    var useQuizEngineMock = require('../../../src/hooks/useQuizEngine').default;
    useQuizEngineMock.mockImplementation(function () {
      return {
        currentQuestion: null,
        currentQuestionIndex: 1,
        totalQuestions: mockQuestions.length,
        score: 1,
        isFinished: true,
        showResult: true,
        handleAnswer: jest.fn(),
        goToNextQuestion: jest.fn(),
        handleRestart: jest.fn()
      };
    });
    var OriginalAnimatedScoreCard = jest.requireActual('../../../src/screens/VocabularyRevision/components/ResultScreen').AnimatedScoreCard;
    jest.doMock('../../../src/screens/VocabularyRevision/components/ResultScreen', function () {
      return Object.assign({}, jest.requireActual('../../../src/screens/VocabularyRevision/components/ResultScreen'), {
        AnimatedScoreCard: function AnimatedScoreCard(_ref8) {
          var score = _ref8.score,
            totalQuestions = _ref8.totalQuestions,
            colors = _ref8.colors,
            localStyles = _ref8.localStyles;
          return (0, _jsxRuntime.jsx)(View, {
            style: [localStyles.scoreCard, {
              backgroundColor: colors.surface
            }],
            children: (0, _jsxRuntime.jsxs)(View, {
              style: localStyles.scoreRow,
              children: [(0, _jsxRuntime.jsxs)(Text, {
                style: [localStyles.scoreNumber, {
                  color: colors.text
                }],
                children: [score, " "]
              }), (0, _jsxRuntime.jsxs)(Text, {
                style: [localStyles.scoreSlash, {
                  color: colors.textSecondary
                }],
                children: ["/", totalQuestions]
              })]
            })
          });
        }
      });
    });
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {})),
      getByText = _render6.getByText,
      findByText = _render6.findByText;
    yield findByText('1');
    expect(getByText('/1')).toBeTruthy();
    expect(getByText('Rejouer')).toBeTruthy();
    expect(getByText('Terminer')).toBeTruthy();
    jest.dontMock('../../../src/screens/VocabularyRevision/components/ResultScreen');
  }));
  test('handles restart from ResultScreen', (0, _asyncToGenerator2.default)(function* () {
    var mockQuestions = [{
      id: 'q1',
      word: 'Word 1',
      choices: ['A', 'B', 'C'],
      correctAnswer: 'A'
    }];
    require('../../../src/hooks/useRevisionData').default.mockImplementation(function () {
      return {
        revisionQuestions: mockQuestions,
        isLoading: false,
        error: null,
        stats: {
          totalLearned: 100
        },
        hasEnoughWords: true,
        canGenerateQuestions: true
      };
    });
    var useQuizEngineMock = require('../../../src/hooks/useQuizEngine').default;
    var mockHandleRestart = jest.fn();
    useQuizEngineMock.mockImplementation(function () {
      return {
        currentQuestion: null,
        currentQuestionIndex: 1,
        totalQuestions: mockQuestions.length,
        score: 1,
        isFinished: true,
        showResult: true,
        handleAnswer: jest.fn(),
        goToNextQuestion: jest.fn(),
        handleRestart: mockHandleRestart
      };
    });
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {})),
      getByText = _render7.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('Rejouer')).toBeTruthy();
    });
    _reactNative.fireEvent.press(getByText('Rejouer'));
    expect(mockHandleRestart).toHaveBeenCalled();
  }));
  test('handles finish from ResultScreen', (0, _asyncToGenerator2.default)(function* () {
    var mockQuestions = [{
      id: 'q1',
      word: 'Word 1',
      choices: ['A', 'B', 'C'],
      correctAnswer: 'A'
    }];
    require('../../../src/hooks/useRevisionData').default.mockImplementation(function () {
      return {
        revisionQuestions: mockQuestions,
        isLoading: false,
        error: null,
        stats: {
          totalLearned: 100
        },
        hasEnoughWords: true,
        canGenerateQuestions: true
      };
    });
    var useQuizEngineMock = require('../../../src/hooks/useQuizEngine').default;
    useQuizEngineMock.mockImplementation(function () {
      return {
        currentQuestion: null,
        currentQuestionIndex: 1,
        totalQuestions: mockQuestions.length,
        score: 1,
        isFinished: true,
        showResult: true,
        handleAnswer: jest.fn(),
        goToNextQuestion: jest.fn(),
        handleRestart: jest.fn()
      };
    });
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {})),
      getByText = _render8.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('Terminer')).toBeTruthy();
    });
    _reactNative.fireEvent.press(getByText('Terminer'));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockMarkRevisionCompleted).toHaveBeenCalledWith(mockQuestions, 1, 1);
      expect(mockGoBack).toHaveBeenCalled();
    });
  }));
  test('handleGoBack is called when back button is pressed in QuizScreen', (0, _asyncToGenerator2.default)(function* () {
    var mockQuestions = [{
      id: 'q1',
      word: 'Word 1',
      choices: ['A', 'B', 'C'],
      correctAnswer: 'A'
    }];
    require('../../../src/hooks/useRevisionData').default.mockImplementation(function () {
      return {
        revisionQuestions: mockQuestions,
        isLoading: false,
        error: null,
        stats: {
          totalLearned: 100
        },
        hasEnoughWords: true,
        canGenerateQuestions: true
      };
    });
    var useQuizEngineMock = require('../../../src/hooks/useQuizEngine').default;
    useQuizEngineMock.mockImplementation(function () {
      return {
        currentQuestion: mockQuestions[0],
        currentQuestionIndex: 0,
        totalQuestions: mockQuestions.length,
        score: 0,
        isFinished: false,
        showResult: false,
        handleAnswer: jest.fn(),
        goToNextQuestion: jest.fn(),
        handleRestart: jest.fn()
      };
    });
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VocabularyRevision.default, {})),
      getByLabelText = _render9.getByLabelText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByLabelText('Retour')).toBeTruthy();
    });
    _reactNative.fireEvent.press(getByLabelText('Retour'));
    expect(mockGoBack).toHaveBeenCalled();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,