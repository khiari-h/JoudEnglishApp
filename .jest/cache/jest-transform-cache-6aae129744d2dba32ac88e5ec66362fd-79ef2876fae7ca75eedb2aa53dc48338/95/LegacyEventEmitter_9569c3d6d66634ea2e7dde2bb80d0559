119afdfa1a8c5f3a8927fb68e93f57f0
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LegacyEventEmitter = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _invariant = _interopRequireDefault(require("invariant"));
var _reactNative = require("react-native");
var nativeEmitterSubscriptionKey = '@@nativeEmitterSubscription@@';
var LegacyEventEmitter = exports.LegacyEventEmitter = function () {
  function LegacyEventEmitter(nativeModule) {
    (0, _classCallCheck2.default)(this, LegacyEventEmitter);
    this._listenerCount = 0;
    if (nativeModule.__expo_module_name__) {
      return nativeModule;
    }
    this._nativeModule = nativeModule;
    this._eventEmitter = new _reactNative.NativeEventEmitter(nativeModule);
  }
  return (0, _createClass2.default)(LegacyEventEmitter, [{
    key: "addListener",
    value: function addListener(eventName, listener) {
      var _this = this;
      if (!this._listenerCount && _reactNative.Platform.OS !== 'ios' && this._nativeModule.startObserving) {
        this._nativeModule.startObserving();
      }
      this._listenerCount++;
      var nativeEmitterSubscription = this._eventEmitter.addListener(eventName, listener);
      var subscription = (0, _defineProperty2.default)((0, _defineProperty2.default)({}, nativeEmitterSubscriptionKey, nativeEmitterSubscription), "remove", function remove() {
        _this.removeSubscription(subscription);
      });
      return subscription;
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners(eventName) {
      var removedListenerCount = this._eventEmitter.listenerCount ? this._eventEmitter.listenerCount(eventName) : this._eventEmitter.listeners(eventName).length;
      this._eventEmitter.removeAllListeners(eventName);
      this._listenerCount -= removedListenerCount;
      (0, _invariant.default)(this._listenerCount >= 0, `EventEmitter must have a non-negative number of listeners`);
      if (!this._listenerCount && _reactNative.Platform.OS !== 'ios' && this._nativeModule.stopObserving) {
        this._nativeModule.stopObserving();
      }
    }
  }, {
    key: "removeSubscription",
    value: function removeSubscription(subscription) {
      var nativeEmitterSubscription = subscription[nativeEmitterSubscriptionKey];
      if (!nativeEmitterSubscription) {
        return;
      }
      if ('remove' in nativeEmitterSubscription) {
        nativeEmitterSubscription.remove();
      }
      this._listenerCount--;
      delete subscription[nativeEmitterSubscriptionKey];
      subscription.remove = function () {};
      if (!this._listenerCount && _reactNative.Platform.OS !== 'ios' && this._nativeModule.stopObserving) {
        this._nativeModule.stopObserving();
      }
    }
  }, {
    key: "emit",
    value: function emit(eventName) {
      var _this$_eventEmitter;
      for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        params[_key - 1] = arguments[_key];
      }
      (_this$_eventEmitter = this._eventEmitter).emit.apply(_this$_eventEmitter, [eventName].concat(params));
    }
  }]);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,