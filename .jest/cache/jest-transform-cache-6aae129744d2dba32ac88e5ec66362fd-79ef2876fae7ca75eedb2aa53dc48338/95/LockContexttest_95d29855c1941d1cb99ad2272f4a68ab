e96edf2cfca50e007158df45ef4378b6
_getJestObj().mock('../../src/services/lockService', function () {
  return {
    isEnabled: jest.fn().mockResolvedValue(true),
    verifyPin: jest.fn(function () {
      var _ref = (0, _asyncToGenerator2.default)(function* (pin) {
        return {
          ok: pin === '1234'
        };
      });
      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }()),
    disableLock: jest.fn().mockResolvedValue(true),
    enableLock: jest.fn().mockResolvedValue(true)
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _LockContext = require("../../src/contexts/LockContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var Consumer = function Consumer() {
  var _useLock = (0, _LockContext.useLock)(),
    isEnabled = _useLock.isEnabled,
    isLocked = _useLock.isLocked,
    unlockWithPin = _useLock.unlockWithPin,
    disable = _useLock.disable;
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [(0, _jsxRuntime.jsx)(TestText, {
      testID: "enabled",
      children: String(isEnabled)
    }), (0, _jsxRuntime.jsx)(TestText, {
      testID: "locked",
      children: String(isLocked)
    }), (0, _jsxRuntime.jsx)(TestButton, {
      testID: "unlock",
      onPress: function onPress() {
        return unlockWithPin('1234');
      }
    }), (0, _jsxRuntime.jsx)(TestButton, {
      testID: "disable",
      onPress: disable
    })]
  });
};
var TestText = function TestText(_ref2) {
  var children = _ref2.children,
    testID = _ref2.testID;
  return (0, _jsxRuntime.jsx)("text", {
    testID: testID,
    children: children
  });
};
var TestButton = function TestButton(_ref3) {
  var onPress = _ref3.onPress,
    testID = _ref3.testID;
  return (0, _jsxRuntime.jsx)("button", {
    testID: testID,
    onPress: onPress
  });
};
describe('LockContext', function () {
  it('initializes locked when enabled, unlocks with correct PIN, and can disable', (0, _asyncToGenerator2.default)(function* () {
    var ui = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_LockContext.LockProvider, {
      children: (0, _jsxRuntime.jsx)(Consumer, {})
    }));
    yield (0, _reactNative.waitFor)(function () {
      return ui.getByTestId('locked');
    });
    expect(ui.getByTestId('enabled').props.children).toBe('true');
    expect(ui.getByTestId('locked').props.children).toBe('true');
    _reactNative.fireEvent.press(ui.getByTestId('unlock'));
    yield (0, _reactNative.waitFor)(function () {
      return expect(ui.getByTestId('locked').props.children).toBe('false');
    });
    _reactNative.fireEvent.press(ui.getByTestId('disable'));
    yield (0, _reactNative.waitFor)(function () {
      return expect(ui.getByTestId('enabled').props.children).toBe('false');
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJpc0VuYWJsZWQiLCJqZXN0IiwiZm4iLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsInZlcmlmeVBpbiIsIl9yZWYiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJkZWZhdWx0IiwicGluIiwib2siLCJfeCIsImFwcGx5IiwiYXJndW1lbnRzIiwiZGlzYWJsZUxvY2siLCJlbmFibGVMb2NrIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfTG9ja0NvbnRleHQiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwiQ29uc3VtZXIiLCJfdXNlTG9jayIsInVzZUxvY2siLCJpc0xvY2tlZCIsInVubG9ja1dpdGhQaW4iLCJkaXNhYmxlIiwianN4cyIsIkZyYWdtZW50IiwiY2hpbGRyZW4iLCJqc3giLCJUZXN0VGV4dCIsInRlc3RJRCIsIlN0cmluZyIsIlRlc3RCdXR0b24iLCJvblByZXNzIiwiX3JlZjIiLCJfcmVmMyIsImRlc2NyaWJlIiwiaXQiLCJ1aSIsInJlbmRlciIsIkxvY2tQcm92aWRlciIsIndhaXRGb3IiLCJnZXRCeVRlc3RJZCIsImV4cGVjdCIsInByb3BzIiwidG9CZSIsImZpcmVFdmVudCIsInByZXNzIl0sInNvdXJjZXMiOlsiTG9ja0NvbnRleHQudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyByZW5kZXIsIGFjdCwgZmlyZUV2ZW50LCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgeyBMb2NrUHJvdmlkZXIsIHVzZUxvY2sgfSBmcm9tICcuLi8uLi9zcmMvY29udGV4dHMvTG9ja0NvbnRleHQnO1xyXG5cclxuamVzdC5tb2NrKCcuLi8uLi9zcmMvc2VydmljZXMvbG9ja1NlcnZpY2UnLCAoKSA9PiAoe1xyXG4gIGlzRW5hYmxlZDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpLFxyXG4gIHZlcmlmeVBpbjogamVzdC5mbihhc3luYyAocGluKSA9PiAoeyBvazogcGluID09PSAnMTIzNCcgfSkpLFxyXG4gIGRpc2FibGVMb2NrOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSksXHJcbiAgZW5hYmxlTG9jazogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpLFxyXG59KSk7XHJcblxyXG5jb25zdCBDb25zdW1lciA9ICgpID0+IHtcclxuICBjb25zdCB7IGlzRW5hYmxlZCwgaXNMb2NrZWQsIHVubG9ja1dpdGhQaW4sIGRpc2FibGUgfSA9IHVzZUxvY2soKTtcclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuICAgICAgPFRlc3RUZXh0IHRlc3RJRD1cImVuYWJsZWRcIj57U3RyaW5nKGlzRW5hYmxlZCl9PC9UZXN0VGV4dD5cclxuICAgICAgPFRlc3RUZXh0IHRlc3RJRD1cImxvY2tlZFwiPntTdHJpbmcoaXNMb2NrZWQpfTwvVGVzdFRleHQ+XHJcbiAgICAgIDxUZXN0QnV0dG9uIHRlc3RJRD1cInVubG9ja1wiIG9uUHJlc3M9eygpID0+IHVubG9ja1dpdGhQaW4oJzEyMzQnKX0gLz5cclxuICAgICAgPFRlc3RCdXR0b24gdGVzdElEPVwiZGlzYWJsZVwiIG9uUHJlc3M9e2Rpc2FibGV9IC8+XHJcbiAgICA8Lz5cclxuICApO1xyXG59O1xyXG5cclxuLy8gVGlueSBzaGltcyB0byBhdm9pZCBpbXBvcnRpbmcgUk4gcHJpbWl0aXZlc1xyXG5jb25zdCBUZXN0VGV4dCA9ICh7IGNoaWxkcmVuLCB0ZXN0SUQgfSkgPT4gKDx0ZXh0IHRlc3RJRD17dGVzdElEfT57Y2hpbGRyZW59PC90ZXh0Pik7XHJcbmNvbnN0IFRlc3RCdXR0b24gPSAoeyBvblByZXNzLCB0ZXN0SUQgfSkgPT4gKDxidXR0b24gdGVzdElEPXt0ZXN0SUR9IG9uUHJlc3M9e29uUHJlc3N9IC8+KTtcclxuXHJcbmRlc2NyaWJlKCdMb2NrQ29udGV4dCcsICgpID0+IHtcclxuICBpdCgnaW5pdGlhbGl6ZXMgbG9ja2VkIHdoZW4gZW5hYmxlZCwgdW5sb2NrcyB3aXRoIGNvcnJlY3QgUElOLCBhbmQgY2FuIGRpc2FibGUnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCB1aSA9IHJlbmRlcihcclxuICAgICAgPExvY2tQcm92aWRlcj5cclxuICAgICAgICA8Q29uc3VtZXIgLz5cclxuICAgICAgPC9Mb2NrUHJvdmlkZXI+XHJcbiAgICApO1xyXG4gICAgLy8gd2FpdCBpbml0aWFsIGxvYWRcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4gdWkuZ2V0QnlUZXN0SWQoJ2xvY2tlZCcpKTtcclxuICAgIGV4cGVjdCh1aS5nZXRCeVRlc3RJZCgnZW5hYmxlZCcpLnByb3BzLmNoaWxkcmVuKS50b0JlKCd0cnVlJyk7XHJcbiAgICBleHBlY3QodWkuZ2V0QnlUZXN0SWQoJ2xvY2tlZCcpLnByb3BzLmNoaWxkcmVuKS50b0JlKCd0cnVlJyk7XHJcblxyXG4gICAgLy8gdW5sb2NrXHJcbiAgICBmaXJlRXZlbnQucHJlc3ModWkuZ2V0QnlUZXN0SWQoJ3VubG9jaycpKTtcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4gZXhwZWN0KHVpLmdldEJ5VGVzdElkKCdsb2NrZWQnKS5wcm9wcy5jaGlsZHJlbikudG9CZSgnZmFsc2UnKSk7XHJcblxyXG4gICAgLy8gZGlzYWJsZVxyXG4gICAgZmlyZUV2ZW50LnByZXNzKHVpLmdldEJ5VGVzdElkKCdkaXNhYmxlJykpO1xyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiBleHBlY3QodWkuZ2V0QnlUZXN0SWQoJ2VuYWJsZWQnKS5wcm9wcy5jaGlsZHJlbikudG9CZSgnZmFsc2UnKSk7XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuXHJcbiJdLCJtYXBwaW5ncyI6IkFBSUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLGdDQUFnQyxFQUFFO0VBQUEsT0FBTztJQUNqREMsU0FBUyxFQUFFQyxJQUFJLENBQUNDLEVB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