bfe53d1ea6daa1d06ea55d47f89b701f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var ExerciseCard = function ExerciseCard(_ref) {
  var title = _ref.title,
    description = _ref.description,
    icon = _ref.icon,
    progress = _ref.progress,
    _ref$color = _ref.color,
    color = _ref$color === void 0 ? "#5E60CE" : _ref$color,
    onPress = _ref.onPress,
    _ref$isNew = _ref.isNew,
    isNew = _ref$isNew === void 0 ? false : _ref$isNew;
  return (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
    style: [_style.default.card, {
      borderLeftColor: color,
      borderLeftWidth: 4
    }],
    onPress: onPress,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: _style.default.topSection,
      children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [_style.default.iconContainer, {
          backgroundColor: `${color}15`
        }],
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: _style.default.icon,
          children: icon
        })
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: _style.default.infoContainer,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: _style.default.title,
          children: title
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: _style.default.description,
          children: description
        })]
      })]
    }), progress > 0 ? (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.progressSection,
      children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: _style.default.progressContainer,
        children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
          style: _style.default.progressBar,
          children: (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [_style.default.progressFill, {
              width: `${Math.round(Number(progress) || 0)}%`,
              backgroundColor: color
            }],
            testID: "progress-fill"
          })
        }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: [_style.default.progressText, {
            color: color
          }],
          children: [progress, "%"]
        })]
      })
    }) : isNew ? (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.badgeContainer,
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [_style.default.badge, {
          backgroundColor: `${color}15`
        }],
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [_style.default.badgeText, {
            color: color
          }],
          children: "Nouveau"
        })
      })
    }) : null, (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.buttonContainer,
      children: (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: [_style.default.startButton, {
          backgroundColor: color
        }],
        onPress: onPress,
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: _style.default.buttonText,
          children: "Commencer"
        })
      })
    })]
  });
};
ExerciseCard.propTypes = {
  title: _propTypes.default.string.isRequired,
  description: _propTypes.default.string.isRequired,
  icon: _propTypes.default.string.isRequired,
  progress: _propTypes.default.number.isRequired,
  color: _propTypes.default.string,
  onPress: _propTypes.default.func.isRequired,
  isNew: _propTypes.default.bool
};
ExerciseCard.defaultProps = {
  color: "#5E60CE",
  isNew: false
};
var _default = exports.default = (0, _react.memo)(ExerciseCard);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,