7ea033af1947a267207273642cb3c09e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ModalHeader;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _vectorIcons = require("@expo/vector-icons");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
function ModalHeader(_ref) {
  var title = _ref.title,
    showCloseButton = _ref.showCloseButton,
    onClose = _ref.onClose,
    headerStyle = _ref.headerStyle;
  if (!title && !showCloseButton) return null;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [_style.default.header, headerStyle],
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: _style.default.title,
      children: title
    }), showCloseButton && (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      style: _style.default.closeButton,
      onPress: onClose,
      hitSlop: {
        top: 10,
        right: 10,
        bottom: 10,
        left: 10
      },
      accessibilityRole: "button",
      accessibilityLabel: "Close modal",
      children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
        name: "close",
        size: 24,
        color: "#6B7280"
      })
    })]
  });
}
ModalHeader.propTypes = {
  title: _propTypes.default.string,
  showCloseButton: _propTypes.default.bool,
  onClose: _propTypes.default.func,
  headerStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array])
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl92ZWN0b3JJY29ucyIsIl9wcm9wVHlwZXMiLCJfc3R5bGUiLCJfanN4UnVudGltZSIsIk1vZGFsSGVhZGVyIiwiX3JlZiIsInRpdGxlIiwic2hvd0Nsb3NlQnV0dG9uIiwib25DbG9zZSIsImhlYWRlclN0eWxlIiwianN4cyIsIlZpZXciLCJzdHlsZSIsInN0eWxlcyIsImhlYWRlciIsImNoaWxkcmVuIiwianN4IiwiVGV4dCIsIlRvdWNoYWJsZU9wYWNpdHkiLCJjbG9zZUJ1dHRvbiIsIm9uUHJlc3MiLCJoaXRTbG9wIiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0IiwiYWNjZXNzaWJpbGl0eVJvbGUiLCJhY2Nlc3NpYmlsaXR5TGFiZWwiLCJJb25pY29ucyIsIm5hbWUiLCJzaXplIiwiY29sb3IiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJib29sIiwiZnVuYyIsIm9uZU9mVHlwZSIsIm9iamVjdCIsImFycmF5Il0sInNvdXJjZXMiOlsiTW9kYWxIZWFkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2NvbXBvbmVudHMvdWkvTW9kYWwvTW9kYWxIZWFkZXIuanNcclxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBWaWV3LCBUZXh0LCBUb3VjaGFibGVPcGFjaXR5IH0gZnJvbSBcInJlYWN0LW5hdGl2ZVwiO1xyXG5pbXBvcnQgeyBJb25pY29ucyB9IGZyb20gXCJAZXhwby92ZWN0b3ItaWNvbnNcIjtcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuaW1wb3J0IHN0eWxlcyBmcm9tIFwiLi9zdHlsZVwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTW9kYWxIZWFkZXIoeyB0aXRsZSwgc2hvd0Nsb3NlQnV0dG9uLCBvbkNsb3NlLCBoZWFkZXJTdHlsZSB9KSB7XHJcbiAgaWYgKCF0aXRsZSAmJiAhc2hvd0Nsb3NlQnV0dG9uKSByZXR1cm4gbnVsbDtcclxuICByZXR1cm4gKFxyXG4gICAgPFZpZXcgc3R5bGU9e1tzdHlsZXMuaGVhZGVyLCBoZWFkZXJTdHlsZV19PlxyXG4gICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLnRpdGxlfT57dGl0bGV9PC9UZXh0PlxyXG4gICAgICB7c2hvd0Nsb3NlQnV0dG9uICYmIChcclxuICAgICAgICA8VG91Y2hhYmxlT3BhY2l0eVxyXG4gICAgICAgICAgc3R5bGU9e3N0eWxlcy5jbG9zZUJ1dHRvbn1cclxuICAgICAgICAgIG9uUHJlc3M9e29uQ2xvc2V9XHJcbiAgICAgICAgICBoaXRTbG9wPXt7IHRvcDogMTAsIHJpZ2h0OiAxMCwgYm90dG9tOiAxMCwgbGVmdDogMTAgfX1cclxuICAgICAgICAgIGFjY2Vzc2liaWxpdHlSb2xlPVwiYnV0dG9uXCJcclxuICAgICAgICAgIGFjY2Vzc2liaWxpdHlMYWJlbD1cIkNsb3NlIG1vZGFsXCJcclxuICAgICAgICA+XHJcbiAgICAgICAgICA8SW9uaWNvbnMgbmFtZT1cImNsb3NlXCIgc2l6ZT17MjR9IGNvbG9yPVwiIzZCNzI4MFwiIC8+XHJcbiAgICAgICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxyXG4gICAgICApfVxyXG4gICAgPC9WaWV3PlxyXG4gICk7XHJcbn1cclxuXHJcbk1vZGFsSGVhZGVyLnByb3BUeXBlcyA9IHtcclxuICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZyxcclxuICBzaG93Q2xvc2VCdXR0b246IFByb3BUeXBlcy5ib29sLFxyXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxyXG4gIGhlYWRlclN0eWxlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYXJyYXldKSxcclxufTtcclxuXHJcblxyXG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsWUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsVUFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUksTUFBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQTZCLElBQUFLLFdBQUEsR0FBQUwsT0FBQTtBQUVkLFNBQVNNLFdBQVdBLENBQUFDLElBQUEsRUFBbUQ7RUFBQSxJQUFoREMsS0FBSyxHQUFBRCxJQUFBLENBQUxDLEtBQUs7SUFBRUMsZUFBZSxHQUFBRixJQUFBLENBQWZFLGVBQWU7SUFBRUMsT0FBTyxHQUFBSCxJQUFBLENBQVBHLE9BQU87SUFBRUMsV0FBVyxHQUFBSixJQUFBLENBQVhJLFdBQVc7RUFDaEYsSUFBSSxDQUFDSCxLQUFLLElBQUksQ0FBQ0MsZUFBZSxFQUFFLE9BQU8sSUFBSTtFQUMzQyxPQUNFLElBQUFKLFdBQUEsQ0FBQU8sSUFBQSxFQUFDWCxZQUFBLENBQUFZLElBQUk7SUFBQ0MsS0FBSyxFQUFFLENBQUNDLGNBQU0sQ0FBQ0MsTUFBTSxFQUFFTCxXQUFXLENBQUU7SUFBQU0sUUFBQSxHQUN4QyxJQUFBWixXQUFBLENBQUFhLEdBQUEsRUFBQ2pCLFlBQUEsQ0FBQWtCLElBQUk7TUFBQ0wsS0FBSyxFQUFFQyxjQUFNLENBQUNQLEtBQU07TUFBQVMsUUFBQSxFQUFFVDtJQUFLLENBQU8sQ0FBQyxFQUN4Q0MsZUFBZSxJQUNkLElBQUFKLFdBQUEsQ0FBQWEsR0FBQSxFQUFDakIsWUFBQSxDQUFBbUIsZ0JBQWdCO01BQ2ZOLEtBQUssRUFBRUMsY0FBTSxDQUFDTSxXQUFZO01BQzFCQyxPQUFPLEVBQUVaLE9BQVE7TUFDakJhLE9BQU8sRUFBRTtRQUFFQyxHQUFHLEVBQUUsRUFBRTtRQUFFQyxLQUFLLEVBQUUsRUFBRTtRQUFFQyxNQUFNLEVBQUUsRUFBRTtRQUFFQyxJQUFJLEVBQUU7TUFBRyxDQUFFO01BQ3REQyxpQkFBaUIsRUFBQyxRQUFRO01BQzFCQyxrQkFBa0IsRUFBQyxhQUFhO01BQUFaLFFBQUEsRUFFaEMsSUFBQVosV0FBQSxDQUFBYSxHQUFBLEVBQUNoQixZQUFBLENBQUE0QixRQUFRO1FBQUNDLElBQUksRUFBQyxPQUFPO1FBQUNDLElBQUksRUFBRSxFQUFHO1FBQUNDLEtBQUssRUFBQztNQUFTLENBQUU7SUFBQyxDQUNuQyxDQUNuQjtFQUFBLENBQ0csQ0FBQztBQUVYO0FBRUEzQixXQUFXLENBQUM0QixTQUFTLEdBQUc7RUFDdEIxQixLQUFLLEVBQUUyQixrQkFBUyxDQUFDQyxNQUFNO0VBQ3ZCM0IsZUFBZSxFQUFFMEIsa0JBQVMsQ0FBQ0UsSUFBSTtFQUMvQjNCLE9BQU8sRUFBRXlCLGtCQUFTLENBQUNHLElBQUk7RUFDdkIzQixXQUFXLEVBQUV3QixrQkFBUyxDQUFDSSxTQUFTLENBQUMsQ0FBQ0osa0JBQVMsQ0FBQ0ssTUFBTSxFQUFFTCxrQkFBUyxDQUFDTSxLQUFLLENBQUM7QUFDdEUsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==