{"version":3,"names":["_react","require","_reactNative","_propTypes","_interopRequireDefault","_style","_jsxRuntime","ExerciseCard","_ref","title","description","icon","progress","_ref$color","color","onPress","_ref$isNew","isNew","jsxs","TouchableOpacity","style","styles","card","borderLeftColor","borderLeftWidth","children","View","topSection","jsx","iconContainer","backgroundColor","Text","infoContainer","progressSection","progressContainer","progressBar","progressFill","width","Math","round","Number","testID","progressText","badgeContainer","badge","badgeText","buttonContainer","startButton","buttonText","propTypes","PropTypes","string","isRequired","number","func","bool","defaultProps","_default","exports","default","memo"],"sources":["index.js"],"sourcesContent":["// src/components/exercise-common/ExerciseCard/index.js\r\nimport { memo } from \"react\";\r\nimport { View, Text, TouchableOpacity } from \"react-native\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./style\";\r\n\r\n/**\r\n * Carte représentant un type d'exercice dans la sélection des exercices\r\n * \r\n * @param {string} title - Titre de l'exercice\r\n * @param {string} description - Description courte de l'exercice\r\n * @param {string} icon - Icône ou emoji représentant l'exercice\r\n * @param {number} progress - Pourcentage de progression (0-100)\r\n * @param {string} color - Couleur principale de la carte\r\n * @param {function} onPress - Callback appelé au clic sur la carte\r\n * @param {boolean} isNew - Indique si l'exercice est nouveau (badge \"Nouveau\")\r\n */\r\nconst ExerciseCard = ({\r\n  title,\r\n  description,\r\n  icon,\r\n  progress,\r\n  color = \"#5E60CE\",\r\n  onPress,\r\n  isNew = false,\r\n}) => {\r\n  return (\r\n    <TouchableOpacity\r\n      style={[styles.card, { borderLeftColor: color, borderLeftWidth: 4 }]}\r\n      onPress={onPress}\r\n    >\r\n      <View style={styles.topSection}>\r\n        <View style={[styles.iconContainer, { backgroundColor: `${color}15` }]}>\r\n          <Text style={styles.icon}>{icon}</Text>\r\n        </View>\r\n\r\n        <View style={styles.infoContainer}>\r\n          <Text style={styles.title}>{title}</Text>\r\n          <Text style={styles.description}>{description}</Text>\r\n        </View>\r\n      </View>\r\n\r\n      {progress > 0 ? (\r\n        <View style={styles.progressSection}>\r\n          <View style={styles.progressContainer}>\r\n            <View style={styles.progressBar}>\r\n              {/* testID utile pour vérifier la largeur dynamique de la barre de progression dans les tests unitaires */}\r\n              <View\r\n                style={[styles.progressFill, { width: `${Math.round(Number(progress) || 0)}%`, backgroundColor: color }]}\r\n                testID=\"progress-fill\"\r\n              />\r\n            </View>\r\n            <Text style={[styles.progressText, { color }]}>{progress}%</Text>\r\n          </View>\r\n        </View>\r\n      ) : isNew ? (\r\n        <View style={styles.badgeContainer}>\r\n          <View style={[styles.badge, { backgroundColor: `${color}15` }]}>\r\n            <Text style={[styles.badgeText, { color }]}>Nouveau</Text>\r\n          </View>\r\n        </View>\r\n      ) : null}\r\n\r\n      <View style={styles.buttonContainer}>\r\n        <TouchableOpacity\r\n          style={[styles.startButton, { backgroundColor: color }]}\r\n          onPress={onPress}\r\n        >\r\n          <Text style={styles.buttonText}>Commencer</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    </TouchableOpacity>\r\n  );\r\n};\r\n\r\n// PropTypes pour la validation des props\r\nExerciseCard.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  description: PropTypes.string.isRequired,\r\n  icon: PropTypes.string.isRequired,\r\n  progress: PropTypes.number.isRequired,\r\n  color: PropTypes.string,\r\n  onPress: PropTypes.func.isRequired,\r\n  isNew: PropTypes.bool,\r\n};\r\n\r\n// Valeurs par défaut\r\nExerciseCard.defaultProps = {\r\n  color: \"#5E60CE\",\r\n  isNew: false,\r\n};\r\n\r\nexport default memo(ExerciseCard);"],"mappings":"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","ignoreList":[]}