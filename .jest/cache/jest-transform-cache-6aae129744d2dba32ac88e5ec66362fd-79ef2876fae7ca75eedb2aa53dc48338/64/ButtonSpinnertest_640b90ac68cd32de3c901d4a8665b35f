bed5eec65f27ef5552543c1616a8c3a7
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  return Object.assign({}, RN, {
    ActivityIndicator: jest.fn(function () {
      return null;
    })
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ButtonSpinner = _interopRequireDefault(require("../../../../src/components/ui/Button/ButtonSpinner"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ButtonSpinner', function () {
  beforeEach(function () {
    var _require = require('react-native'),
      ActivityIndicator = _require.ActivityIndicator;
    if (ActivityIndicator.mockClear) {
      ActivityIndicator.mockClear();
    }
  });
  it('devrait rendre un ActivityIndicator avec les props size et color', function () {
    var mockSize = 'large';
    var mockColor = '#FF0000';
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ButtonSpinner.default, {
      size: mockSize,
      color: mockColor
    }));
    var _require2 = require('react-native'),
      ActivityIndicator = _require2.ActivityIndicator;
    expect(ActivityIndicator).toHaveBeenCalledTimes(1);
    expect(ActivityIndicator).toHaveBeenCalledWith(expect.objectContaining({
      size: mockSize,
      color: mockColor
    }), {});
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJSTiIsImplc3QiLCJyZXF1aXJlQWN0dWFsIiwiT2JqZWN0IiwiYXNzaWduIiwiQWN0aXZpdHlJbmRpY2F0b3IiLCJmbiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3JlYWN0IiwiX3JlYWN0TmF0aXZlIiwiX0J1dHRvblNwaW5uZXIiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlMyIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsIl9yZXF1aXJlIiwibW9ja0NsZWFyIiwiaXQiLCJtb2NrU2l6ZSIsIm1vY2tDb2xvciIsInJlbmRlciIsImpzeCIsImRlZmF1bHQiLCJzaXplIiwiY29sb3IiLCJfcmVxdWlyZTIiLCJleHBlY3QiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsIm9iamVjdENvbnRhaW5pbmciXSwic291cmNlcyI6WyJCdXR0b25TcGlubmVyLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgQnV0dG9uU3Bpbm5lciBmcm9tICcuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy91aS9CdXR0b24vQnV0dG9uU3Bpbm5lcic7XHJcblxyXG4vLyBNb2NrIEFjdGl2aXR5SW5kaWNhdG9yIGNvbW1lIHVuIGNvbXBvc2FudCBSZWFjdCBtb2NrYWJsZVxyXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZScsICgpID0+IHtcclxuICBjb25zdCBSTiA9IGplc3QucmVxdWlyZUFjdHVhbCgncmVhY3QtbmF0aXZlJyk7XHJcbiAgcmV0dXJuIHtcclxuICAgIC4uLlJOLFxyXG4gICAgQWN0aXZpdHlJbmRpY2F0b3I6IGplc3QuZm4oKCkgPT4gbnVsbCksXHJcbiAgfTtcclxufSk7XHJcblxyXG5kZXNjcmliZSgnQnV0dG9uU3Bpbm5lcicsICgpID0+IHtcclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIC8vIE9uIHLDqWN1cMOocmUgbGUgbW9jayBldCBvbiBsZSBuZXR0b2llIGF2YW50IGNoYXF1ZSB0ZXN0XHJcbiAgICBjb25zdCB7IEFjdGl2aXR5SW5kaWNhdG9yIH0gPSByZXF1aXJlKCdyZWFjdC1uYXRpdmUnKTtcclxuICAgIGlmIChBY3Rpdml0eUluZGljYXRvci5tb2NrQ2xlYXIpIHtcclxuICAgICAgQWN0aXZpdHlJbmRpY2F0b3IubW9ja0NsZWFyKCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdkZXZyYWl0IHJlbmRyZSB1biBBY3Rpdml0eUluZGljYXRvciBhdmVjIGxlcyBwcm9wcyBzaXplIGV0IGNvbG9yJywgKCkgPT4ge1xyXG4gICAgY29uc3QgbW9ja1NpemUgPSAnbGFyZ2UnO1xyXG4gICAgY29uc3QgbW9ja0NvbG9yID0gJyNGRjAwMDAnO1xyXG4gICAgXHJcbiAgICByZW5kZXIoPEJ1dHRvblNwaW5uZXIgc2l6ZT17bW9ja1NpemV9IGNvbG9yPXttb2NrQ29sb3J9IC8+KTtcclxuICAgIFxyXG4gICAgY29uc3QgeyBBY3Rpdml0eUluZGljYXRvciB9ID0gcmVxdWlyZSgncmVhY3QtbmF0aXZlJyk7XHJcbiAgICBcclxuICAgIGV4cGVjdChBY3Rpdml0eUluZGljYXRvcikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xyXG4gICAgZXhwZWN0KEFjdGl2aXR5SW5kaWNhdG9yKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcclxuICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xyXG4gICAgICAgIHNpemU6IG1vY2tTaXplLFxyXG4gICAgICAgIGNvbG9yOiBtb2NrQ29sb3IsXHJcbiAgICAgIH0pLFxyXG4gICAgICB7fVxyXG4gICAgKTtcclxuICB9KTtcclxufSk7Il0sIm1hcHBpbmdzIjoiQUFLQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsY0FBYyxFQUFFLFlBQU07RUFDOUIsSUFBTUMsRUFBRSxHQUFHQyxJQUFJLENBQUNDLGFBQWEsQ0FBQyxjQUFjLENBQUM7RUFDN0MsT0FBQUMsTUFBQSxDQUFBQyxNQUFBLEtBQ0tKLEVBQUU7SUFDTEssaUJBQWlCLEVBQUVKLElBQUksQ0FBQ0ssRUFBRSxDQUFDO01BQUEsT0FBTSxJQUFJO0lBQUE7RUFBQztBQUUxQyxDQUFDLENBQUM7QUFBQyxJQUFBQyxzQkFBQSxHQUFBQyxPQUFBO0FBWEgsSUFBQUMsTUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsWUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsY0FBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQStFLElBQUFJLFdBQUEsR0FBQUosT0FBQTtBQUFBLFNBQUFWLFlBQUE7RUFBQSxJQUFBZSxTQUFBLEdBQUFMLE9BQUE7SUFBQVAsSUFBQSxHQUFBWSxTQUFBLENBQUFaLElBQUE7RUFBQUgsV0FBQSxZQUFBQSxZQUFBO0lBQUEsT0FBQUcsSUFBQTtFQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBVy9FYSxRQUFRLENBQUMsZUFBZSxFQUFFLFlBQU07RUFDOUJDLFVBQVUsQ0FBQyxZQUFNO0lBRWYsSUFBQUMsUUFBQSxHQUE4QlIsT0FBTyxDQUFDLGNBQWMsQ0FBQztNQUE3Q0gsaUJBQWlCLEdBQUFXLFFBQUEsQ0FBakJYLGlCQUFpQjtJQUN6QixJQUFJQSxpQkFBaUIsQ0FBQ1ksU0FBUyxFQUFFO01BQy9CWixpQkFBaUIsQ0FBQ1ksU0FBUyxDQUFDLENBQUM7SUFDL0I7RUFDRixDQUFDLENBQUM7RUFFRkMsRUFBRSxDQUFDLGtFQUFrRSxFQUFFLFlBQU07SUFDM0UsSUFBTUMsUUFBUSxHQUFHLE9BQU87SUFDeEIsSUFBTUMsU0FBUyxHQUFHLFNBQVM7SUFFM0IsSUFBQUMsbUJBQU0sRUFBQyxJQUFBVCxXQUFBLENBQUFVLEdBQUEsRUFBQ1gsY0FBQSxDQUFBWSxPQUFhO01BQUNDLElBQUksRUFBRUwsUUFBUztNQUFDTSxLQUFLLEVBQUVMO0lBQVUsQ0FBRSxDQUFDLENBQUM7SUFFM0QsSUFBQU0sU0FBQSxHQUE4QmxCLE9BQU8sQ0FBQyxjQUFjLENBQUM7TUFBN0NILGlCQUFpQixHQUFBcUIsU0FBQSxDQUFqQnJCLGlCQUFpQjtJQUV6QnNCLE1BQU0sQ0FBQ3RCLGlCQUFpQixDQUFDLENBQUN1QixxQkFBcUIsQ0FBQyxDQUFDLENBQUM7SUFDbERELE1BQU0sQ0FBQ3RCLGlCQUFpQixDQUFDLENBQUN3QixvQkFBb0IsQ0FDNUNGLE1BQU0sQ0FBQ0csZ0JBQWdCLENBQUM7TUFDdEJOLElBQUksRUFBRUwsUUFBUTtNQUNkTSxLQUFLLEVBQUVMO0lBQ1QsQ0FBQyxDQUFDLEVBQ0YsQ0FBQyxDQUNILENBQUM7RUFDSCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=