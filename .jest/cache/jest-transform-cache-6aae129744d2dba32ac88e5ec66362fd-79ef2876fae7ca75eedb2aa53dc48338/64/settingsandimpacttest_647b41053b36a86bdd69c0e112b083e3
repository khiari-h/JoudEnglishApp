e945f8a015d31e8aa976129a5dd22dd0
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    },
    useRoute: function useRoute() {
      return {
        params: {}
      };
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _layout = _interopRequireDefault(require("../../app/_layout"));
var _SettingsContext = require("../../src/contexts/SettingsContext");
var _AppProvider = require("../../src/contexts/AppProvider");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Settings and Impact Integration Test', function () {
  it('should reflect settings changes on the Dashboard', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AppProvider.AppProvider, {
        children: (0, _jsxRuntime.jsx)(_SettingsContext.SettingsProvider, {
          children: (0, _jsxRuntime.jsx)(_layout.default, {})
        })
      })),
      getByText = _render.getByText,
      findByText = _render.findByText,
      getByTestId = _render.getByTestId;
    _reactNative.fireEvent.press(getByText(/Param√®tres/i));
    var dailyGoalInput = getByTestId('daily-goal-input');
    _reactNative.fireEvent.changeText(dailyGoalInput, '30');
    _reactNative.fireEvent.press(getByText(/Retour/i));
    var updatedDailyGoal = yield findByText(/Objectif quotidien : 30 minutes/i);
    expect(updatedDailyGoal).toBeTruthy();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsInVzZU5hdmlnYXRpb24iLCJuYXZpZ2F0ZSIsImZuIiwiZ29CYWNrIiwidXNlUm91dGUiLCJwYXJhbXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9sYXlvdXQiLCJfU2V0dGluZ3NDb250ZXh0IiwiX0FwcFByb3ZpZGVyIiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwiaXQiLCJkZWZhdWx0IiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsIkFwcFByb3ZpZGVyIiwiY2hpbGRyZW4iLCJTZXR0aW5nc1Byb3ZpZGVyIiwiZ2V0QnlUZXh0IiwiZmluZEJ5VGV4dCIsImdldEJ5VGVzdElkIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJkYWlseUdvYWxJbnB1dCIsImNoYW5nZVRleHQiLCJ1cGRhdGVkRGFpbHlHb2FsIiwiZXhwZWN0IiwidG9CZVRydXRoeSJdLCJzb3VyY2VzIjpbInNldHRpbmdzLWFuZC1pbXBhY3QudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCwgd2FpdEZvciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCBBcHAgZnJvbSAnLi4vLi4vYXBwL19sYXlvdXQnO1xuaW1wb3J0IHsgU2V0dGluZ3NQcm92aWRlciwgU2V0dGluZ3NDb250ZXh0IH0gZnJvbSAnLi4vLi4vc3JjL2NvbnRleHRzL1NldHRpbmdzQ29udGV4dCc7XG5pbXBvcnQgeyBBcHBQcm92aWRlciB9IGZyb20gJy4uLy4uL3NyYy9jb250ZXh0cy9BcHBQcm92aWRlcic7XG5cbmplc3QubW9jaygnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJywgKCkgPT4gKHtcbiAgLi4uamVzdC5yZXF1aXJlQWN0dWFsKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnKSxcbiAgdXNlTmF2aWdhdGlvbjogKCkgPT4gKHtcbiAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxuICAgIGdvQmFjazogamVzdC5mbigpLFxuICB9KSxcbiAgdXNlUm91dGU6ICgpID0+ICh7XG4gICAgcGFyYW1zOiB7fSxcbiAgfSksXG59KSk7XG5cbmRlc2NyaWJlKCdTZXR0aW5ncyBhbmQgSW1wYWN0IEludGVncmF0aW9uIFRlc3QnLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgcmVmbGVjdCBzZXR0aW5ncyBjaGFuZ2VzIG9uIHRoZSBEYXNoYm9hcmQnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQsIGZpbmRCeVRleHQsIGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICA8QXBwUHJvdmlkZXI+XG4gICAgICAgIDxTZXR0aW5nc1Byb3ZpZGVyPlxuICAgICAgICAgIDxBcHAgLz5cbiAgICAgICAgPC9TZXR0aW5nc1Byb3ZpZGVyPlxuICAgICAgPC9BcHBQcm92aWRlcj5cbiAgICApO1xuXG4gICAgLy8gMS4gTmF2aWd1ZXIgdmVycyBsZXMgcGFyYW3DqHRyZXNcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KC9QYXJhbcOodHJlcy9pKSk7XG5cbiAgICAvLyAyLiBDaGFuZ2VyIHVuIHBhcmFtw6h0cmUgKHBhciBleGVtcGxlLCBsJ29iamVjdGlmIHF1b3RpZGllbilcbiAgICBjb25zdCBkYWlseUdvYWxJbnB1dCA9IGdldEJ5VGVzdElkKCdkYWlseS1nb2FsLWlucHV0Jyk7IC8vIEFzc3VyZXotdm91cyBkJ2F2b2lyIGNlIHRlc3RJRFxuICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGRhaWx5R29hbElucHV0LCAnMzAnKTsgLy8gQ2hhbmdlciBsJ29iamVjdGlmIMOgIDMwIG1pbnV0ZXNcblxuICAgIC8vIDMuIFJldG91cm5lciBhdSBEYXNoYm9hcmRcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KC9SZXRvdXIvaSkpO1xuXG4gICAgLy8gNC4gVsOpcmlmaWVyIHF1ZSBsZSBjaGFuZ2VtZW50IGVzdCByw6lwZXJjdXTDqSBzdXIgbGUgRGFzaGJvYXJkXG4gICAgY29uc3QgdXBkYXRlZERhaWx5R29hbCA9IGF3YWl0IGZpbmRCeVRleHQoL09iamVjdGlmIHF1b3RpZGllbiA6IDMwIG1pbnV0ZXMvaSk7XG4gICAgZXhwZWN0KHVwZGF0ZWREYWlseUdvYWwpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBT0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDBCQUEwQixFQUFFO0VBQUEsT0FBQUMsTUFBQSxDQUFBQyxNQUFBLEtBQ2pDQyxJQUFJLENBQUNDLGFBQWEsQ0FBQywwQkFBMEIsQ0FBQztJQUNqREMsYUFBYSxFQUFFLFNBQWZBLGFBQWFBLENBQUE7TUFBQSxPQUFTO1FBQ3BCQyxRQUFRLEVBQUVILElBQUksQ0FBQ0ksRUFBRSxDQUFDLENBQUM7UUFDbkJDLE1BQU0sRUFBRUwsSUFBSSxDQUFDSSxFQUFFLENBQUM7TUFDbEIsQ0FBQztJQUFBLENBQUM7SUFDRkUsUUFBUSxFQUFFLFNBQVZBLFFBQVFBLENBQUE7TUFBQSxPQUFTO1FBQ2ZDLE1BQU0sRUFBRSxDQUFDO01BQ1gsQ0FBQztJQUFBO0VBQUM7QUFBQSxDQUNGLENBQUM7QUFBQyxJQUFBQyxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsa0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQWZKLElBQUFFLE1BQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLFlBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLE9BQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFLLGdCQUFBLEdBQUFMLE9BQUE7QUFDQSxJQUFBTSxZQUFBLEdBQUFOLE9BQUE7QUFBNkQsSUFBQU8sV0FBQSxHQUFBUCxPQUFBO0FBQUEsU0FBQWIsWUFBQTtFQUFBLElBQUFxQixRQUFBLEdBQUFSLE9BQUE7SUFBQVQsSUFBQSxHQUFBaUIsUUFBQSxDQUFBakIsSUFBQTtFQUFBSixXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBSSxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFhN0RrQixRQUFRLENBQUMsc0NBQXNDLEVBQUUsWUFBTTtFQUNyREMsRUFBRSxDQUFDLGtEQUFrRCxNQUFBVCxrQkFBQSxDQUFBVSxPQUFBLEVBQUUsYUFBWTtJQUNqRSxJQUFBQyxPQUFBLEdBQStDLElBQUFDLG1CQUFNLEVBQ25ELElBQUFOLFdBQUEsQ0FBQU8sR0FBQSxFQUFDUixZQUFBLENBQUFTLFdBQVc7UUFBQUMsUUFBQSxFQUNWLElBQUFULFdBQUEsQ0FBQU8sR0FBQSxFQUFDVCxnQkFBQSxDQUFBWSxnQkFBZ0I7VUFBQUQsUUFBQSxFQUNmLElBQUFULFdBQUEsQ0FBQU8sR0FBQSxFQUFDVixPQUFBLENBQUFPLE9BQUcsSUFBRTtRQUFDLENBQ1M7TUFBQyxDQUNSLENBQ2YsQ0FBQztNQU5PTyxTQUFTLEdBQUFOLE9BQUEsQ0FBVE0sU0FBUztNQUFFQyxVQUFVLEdBQUFQLE9BQUEsQ0FBVk8sVUFBVTtNQUFFQyxXQUFXLEdBQUFSLE9BQUEsQ0FBWFEsV0FBVztJQVMxQ0Msc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDSixTQUFTLENBQUMsYUFBYSxDQUFDLENBQUM7SUFHekMsSUFBTUssY0FBYyxHQUFHSCxXQUFXLENBQUMsa0JBQWtCLENBQUM7SUFDdERDLHNCQUFTLENBQUNHLFVBQVUsQ0FBQ0QsY0FBYyxFQUFFLElBQUksQ0FBQztJQUcxQ0Ysc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDSixTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7SUFHckMsSUFBTU8sZ0JBQWdCLFNBQVNOLFVBQVUsQ0FBQyxrQ0FBa0MsQ0FBQztJQUM3RU8sTUFBTSxDQUFDRCxnQkFBZ0IsQ0FBQyxDQUFDRSxVQUFVLENBQUMsQ0FBQztFQUN2QyxDQUFDLEVBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=