efc53f9ae46b210c5cb3d75418c6f463
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _ProgressCard = _interopRequireDefault(require("../../../../components/ui/ProgressCard"));
var _jsxRuntime = require("react/jsx-runtime");
var AssessmentProgress = function AssessmentProgress(_ref) {
  var _ref$currentSection = _ref.currentSection,
    currentSection = _ref$currentSection === void 0 ? 1 : _ref$currentSection,
    _ref$totalSections = _ref.totalSections,
    totalSections = _ref$totalSections === void 0 ? 0 : _ref$totalSections,
    _ref$currentQuestion = _ref.currentQuestion,
    currentQuestion = _ref$currentQuestion === void 0 ? 1 : _ref$currentQuestion,
    _ref$totalQuestions = _ref.totalQuestions,
    totalQuestions = _ref$totalQuestions === void 0 ? 0 : _ref$totalQuestions,
    _ref$answeredQuestion = _ref.answeredQuestionsInSection,
    answeredQuestionsInSection = _ref$answeredQuestion === void 0 ? 0 : _ref$answeredQuestion,
    _ref$levelColor = _ref.levelColor,
    levelColor = _ref$levelColor === void 0 ? "#3b82f6" : _ref$levelColor;
  var sectionProgress = (0, _react.useMemo)(function () {
    return totalQuestions > 0 ? Math.round(answeredQuestionsInSection / totalQuestions * 100) : 0;
  }, [answeredQuestionsInSection, totalQuestions]);
  return (0, _jsxRuntime.jsx)(_ProgressCard.default, {
    title: "Progression",
    subtitle: `Section ${currentSection}/${totalSections} â€¢ Question ${currentQuestion}/${totalQuestions}`,
    progress: sectionProgress,
    completed: answeredQuestionsInSection,
    total: totalQuestions,
    unit: "questions",
    levelColor: levelColor,
    expandable: false,
    expanded: false,
    onToggleExpand: undefined,
    categoryData: [],
    onCategoryPress: undefined
  });
};
var _default = exports.default = AssessmentProgress;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX1Byb2dyZXNzQ2FyZCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfanN4UnVudGltZSIsIkFzc2Vzc21lbnRQcm9ncmVzcyIsIl9yZWYiLCJfcmVmJGN1cnJlbnRTZWN0aW9uIiwiY3VycmVudFNlY3Rpb24iLCJfcmVmJHRvdGFsU2VjdGlvbnMiLCJ0b3RhbFNlY3Rpb25zIiwiX3JlZiRjdXJyZW50UXVlc3Rpb24iLCJjdXJyZW50UXVlc3Rpb24iLCJfcmVmJHRvdGFsUXVlc3Rpb25zIiwidG90YWxRdWVzdGlvbnMiLCJfcmVmJGFuc3dlcmVkUXVlc3Rpb24iLCJhbnN3ZXJlZFF1ZXN0aW9uc0luU2VjdGlvbiIsIl9yZWYkbGV2ZWxDb2xvciIsImxldmVsQ29sb3IiLCJzZWN0aW9uUHJvZ3Jlc3MiLCJ1c2VNZW1vIiwiTWF0aCIsInJvdW5kIiwianN4IiwiZGVmYXVsdCIsInRpdGxlIiwic3VidGl0bGUiLCJwcm9ncmVzcyIsImNvbXBsZXRlZCIsInRvdGFsIiwidW5pdCIsImV4cGFuZGFibGUiLCJleHBhbmRlZCIsIm9uVG9nZ2xlRXhwYW5kIiwidW5kZWZpbmVkIiwiY2F0ZWdvcnlEYXRhIiwib25DYXRlZ29yeVByZXNzIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQXNzZXNzbWVudFByb2dyZXNzL2luZGV4LmpzIC0gVkVSU0lPTiBDT1JSSUfDiUUgQVZFQyB1c2VNZW1vXHJcblxyXG5pbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBQcm9ncmVzc0NhcmQgZnJvbSBcIi4uLy4uLy4uLy4uL2NvbXBvbmVudHMvdWkvUHJvZ3Jlc3NDYXJkXCI7XHJcblxyXG4vKipcclxuICog8J+TiiBBc3Nlc3NtZW50UHJvZ3Jlc3MgLSBWZXJzaW9uIGNvcnJpZ8OpZSBhdmVjIG3DqW1vcmlzYXRpb25cclxuICog4pyFIMOJdml0ZSBsZXMgYm91Y2xlcyBpbmZpbmllcyBhdmVjIHVzZU1lbW9cclxuICog4pyFIFBlcmZvcm1hbmNlIG9wdGltaXPDqWVcclxuICovXHJcbmNvbnN0IEFzc2Vzc21lbnRQcm9ncmVzcyA9ICh7XHJcbiAgY3VycmVudFNlY3Rpb24gPSAxLFxyXG4gIHRvdGFsU2VjdGlvbnMgPSAwLFxyXG4gIGN1cnJlbnRRdWVzdGlvbiA9IDEsXHJcbiAgdG90YWxRdWVzdGlvbnMgPSAwLFxyXG4gIGFuc3dlcmVkUXVlc3Rpb25zSW5TZWN0aW9uID0gMCxcclxuICBsZXZlbENvbG9yID0gXCIjM2I4MmY2XCIsXHJcbn0pID0+IHtcclxuICBcclxuICAvLyDinIUgTcOJTU9SSVNFUiBsZSBjYWxjdWwgZGUgcHJvZ3Jlc3Npb24gZGUgc2VjdGlvblxyXG4gIGNvbnN0IHNlY3Rpb25Qcm9ncmVzcyA9IHVzZU1lbW8oKCkgPT4ge1xyXG4gICAgcmV0dXJuIHRvdGFsUXVlc3Rpb25zID4gMCBcclxuICAgICAgPyBNYXRoLnJvdW5kKChhbnN3ZXJlZFF1ZXN0aW9uc0luU2VjdGlvbiAvIHRvdGFsUXVlc3Rpb25zKSAqIDEwMClcclxuICAgICAgOiAwO1xyXG4gIH0sIFthbnN3ZXJlZFF1ZXN0aW9uc0luU2VjdGlvbiwgdG90YWxRdWVzdGlvbnNdKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxQcm9ncmVzc0NhcmRcclxuICAgICAgdGl0bGU9XCJQcm9ncmVzc2lvblwiXHJcbiAgICAgIHN1YnRpdGxlPXtgU2VjdGlvbiAke2N1cnJlbnRTZWN0aW9ufS8ke3RvdGFsU2VjdGlvbnN9IOKAoiBRdWVzdGlvbiAke2N1cnJlbnRRdWVzdGlvbn0vJHt0b3RhbFF1ZXN0aW9uc31gfVxyXG4gICAgICBwcm9ncmVzcz17c2VjdGlvblByb2dyZXNzfVxyXG4gICAgICBjb21wbGV0ZWQ9e2Fuc3dlcmVkUXVlc3Rpb25zSW5TZWN0aW9ufVxyXG4gICAgICB0b3RhbD17dG90YWxRdWVzdGlvbnN9XHJcbiAgICAgIHVuaXQ9XCJxdWVzdGlvbnNcIlxyXG4gICAgICBsZXZlbENvbG9yPXtsZXZlbENvbG9yfVxyXG4gICAgICBleHBhbmRhYmxlPXtmYWxzZX1cclxuICAgICAgZXhwYW5kZWQ9e2ZhbHNlfVxyXG4gICAgICBvblRvZ2dsZUV4cGFuZD17dW5kZWZpbmVkfVxyXG4gICAgICBjYXRlZ29yeURhdGE9e1tdfVxyXG4gICAgICBvbkNhdGVnb3J5UHJlc3M9e3VuZGVmaW5lZH1cclxuICAgIC8+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEFzc2Vzc21lbnRQcm9ncmVzczsiXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsYUFBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBQWtFLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQU9sRSxJQUFNSSxrQkFBa0IsR0FBRyxTQUFyQkEsa0JBQWtCQSxDQUFBQyxJQUFBLEVBT2xCO0VBQUEsSUFBQUMsbUJBQUEsR0FBQUQsSUFBQSxDQU5KRSxjQUFjO0lBQWRBLGNBQWMsR0FBQUQsbUJBQUEsY0FBRyxDQUFDLEdBQUFBLG1CQUFBO0lBQUFFLGtCQUFBLEdBQUFILElBQUEsQ0FDbEJJLGFBQWE7SUFBYkEsYUFBYSxHQUFBRCxrQkFBQSxjQUFHLENBQUMsR0FBQUEsa0JBQUE7SUFBQUUsb0JBQUEsR0FBQUwsSUFBQSxDQUNqQk0sZUFBZTtJQUFmQSxlQUFlLEdBQUFELG9CQUFBLGNBQUcsQ0FBQyxHQUFBQSxvQkFBQTtJQUFBRSxtQkFBQSxHQUFBUCxJQUFBLENBQ25CUSxjQUFjO0lBQWRBLGNBQWMsR0FBQUQsbUJBQUEsY0FBRyxDQUFDLEdBQUFBLG1CQUFBO0lBQUFFLHFCQUFBLEdBQUFULElBQUEsQ0FDbEJVLDBCQUEwQjtJQUExQkEsMEJBQTBCLEdBQUFELHFCQUFBLGNBQUcsQ0FBQyxHQUFBQSxxQkFBQTtJQUFBRSxlQUFBLEdBQUFYLElBQUEsQ0FDOUJZLFVBQVU7SUFBVkEsVUFBVSxHQUFBRCxlQUFBLGNBQUcsU0FBUyxHQUFBQSxlQUFBO0VBSXRCLElBQU1FLGVBQWUsR0FBRyxJQUFBQyxjQUFPLEVBQUMsWUFBTTtJQUNwQyxPQUFPTixjQUFjLEdBQUcsQ0FBQyxHQUNyQk8sSUFBSSxDQUFDQyxLQUFLLENBQUVOLDBCQUEwQixHQUFHRixjQUFjLEdBQUksR0FBRyxDQUFDLEdBQy9ELENBQUM7RUFDUCxDQUFDLEVBQUUsQ0FBQ0UsMEJBQTBCLEVBQUVGLGNBQWMsQ0FBQyxDQUFDO0VBRWhELE9BQ0UsSUFBQVYsV0FBQSxDQUFBbUIsR0FBQSxFQUFDckIsYUFBQSxDQUFBc0IsT0FBWTtJQUNYQyxLQUFLLEVBQUMsYUFBYTtJQUNuQkMsUUFBUSxFQUFFLFdBQVdsQixjQUFjLElBQUlFLGFBQWEsZUFBZUUsZUFBZSxJQUFJRSxjQUFjLEVBQUc7SUFDdkdhLFFBQVEsRUFBRVIsZUFBZ0I7SUFDMUJTLFNBQVMsRUFBRVosMEJBQTJCO0lBQ3RDYSxLQUFLLEVBQUVmLGNBQWU7SUFDdEJnQixJQUFJLEVBQUMsV0FBVztJQUNoQlosVUFBVSxFQUFFQSxVQUFXO0lBQ3ZCYSxVQUFVLEVBQUUsS0FBTTtJQUNsQkMsUUFBUSxFQUFFLEtBQU07SUFDaEJDLGNBQWMsRUFBRUMsU0FBVTtJQUMxQkMsWUFBWSxFQUFFLEVBQUc7SUFDakJDLGVBQWUsRUFBRUY7RUFBVSxDQUM1QixDQUFDO0FBRU4sQ0FBQztBQUFDLElBQUFHLFFBQUEsR0FBQUMsT0FBQSxDQUFBZCxPQUFBLEdBRWFuQixrQkFBa0IiLCJpZ25vcmVMaXN0IjpbXX0=