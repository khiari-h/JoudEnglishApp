e977ea782c433ed4cc4168ae44987f3e
_getJestObj().mock('expo-linear-gradient', function () {
  return {
    LinearGradient: function LinearGradient(_ref) {
      var children = _ref.children,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      var _require = require('react-native'),
        View = _require.View;
      return (0, _jsxRuntime.jsx)(View, Object.assign({
        testID: "linear-gradient"
      }, props, {
        children: children
      }));
    }
  };
});
_getJestObj().mock('../../../../src/utils/constants', function () {
  return {
    LANGUAGE_LEVELS: {
      '1': {
        title: 'Débutant',
        color: '#10B981'
      },
      '2': {
        title: 'Élémentaire',
        color: '#3B82F6'
      },
      '3': {
        title: 'Intermédiaire',
        color: '#8B5CF6'
      }
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _HeroContinueSection = _interopRequireDefault(require("../../../../src/screens/Dashboard/components/HeroContinueSection"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children"];
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('HeroContinueSection', function () {
  var mockOnPress = jest.fn();
  var defaultProps = {
    lastActivity: null,
    isLoading: false,
    onPress: mockOnPress,
    accentColor: '#3B82F6'
  };
  var renderComponent = function renderComponent() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HeroContinueSection.default, Object.assign({}, defaultProps, props)));
  };
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('Sans activité récente', function () {
    it('devrait afficher le bouton "Commencer"', function () {
      renderComponent();
      expect(_reactNative.screen.getByText('Commencer')).toBeTruthy();
      expect(_reactNative.screen.getByText('Choisissez votre niveau et commencez à apprendre')).toBeTruthy();
    });
    it('devrait appeler onPress avec "levelSelection" quand on clique sur Commencer', function () {
      renderComponent();
      var button = _reactNative.screen.getByText('Commencer');
      _reactNative.fireEvent.press(button);
      expect(mockOnPress).toHaveBeenCalledWith('levelSelection');
    });
  });
  describe('Avec activité récente', function () {
    var lastActivity = {
      type: 'vocabulary',
      level: '2',
      title: 'Vocabulaire Famille',
      timeElapsed: 'Il y a 5 min'
    };
    it('devrait afficher le bouton "Continuer"', function () {
      renderComponent({
        lastActivity: lastActivity
      });
      expect(_reactNative.screen.getByText('Continuer')).toBeTruthy();
      expect(_reactNative.screen.getByText('Vocabulaire Famille')).toBeTruthy();
      expect(_reactNative.screen.getByText('Il y a 5 min')).toBeTruthy();
    });
    it('devrait appeler onPress avec l\'activité quand on clique sur Continuer', function () {
      renderComponent({
        lastActivity: lastActivity
      });
      var button = _reactNative.screen.getByText('Continuer');
      _reactNative.fireEvent.press(button);
      expect(mockOnPress).toHaveBeenCalledWith(lastActivity);
    });
    it('devrait gérer une activité sans titre', function () {
      var activityWithoutTitle = Object.assign({}, lastActivity, {
        title: undefined
      });
      renderComponent({
        lastActivity: activityWithoutTitle
      });
      expect(_reactNative.screen.getByText('Continuer')).toBeTruthy();
    });
    it('devrait gérer une activité sans temps écoulé', function () {
      var activityWithoutTime = Object.assign({}, lastActivity, {
        timeElapsed: undefined
      });
      renderComponent({
        lastActivity: activityWithoutTime
      });
      expect(_reactNative.screen.getByText('Continuer')).toBeTruthy();
      expect(_reactNative.screen.getByText('Vocabulaire Famille')).toBeTruthy();
    });
  });
  describe('État de chargement', function () {
    it('devrait afficher un indicateur de chargement', function () {
      renderComponent({
        isLoading: true
      });
      expect(_reactNative.screen.getByText('Chargement...')).toBeTruthy();
    });
    it('ne devrait pas afficher de bouton pendant le chargement', function () {
      renderComponent({
        isLoading: true
      });
      expect(_reactNative.screen.queryByText('Commencer')).toBeNull();
      expect(_reactNative.screen.queryByText('Continuer')).toBeNull();
    });
  });
  describe('Gestion des erreurs', function () {
    it('devrait fonctionner sans onPress', function () {
      renderComponent({
        onPress: undefined
      });
      expect(_reactNative.screen.getByText('Commencer')).toBeTruthy();
    });
    it('devrait fonctionner sans accentColor', function () {
      renderComponent({
        accentColor: undefined
      });
      expect(_reactNative.screen.getByText('Commencer')).toBeTruthy();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,