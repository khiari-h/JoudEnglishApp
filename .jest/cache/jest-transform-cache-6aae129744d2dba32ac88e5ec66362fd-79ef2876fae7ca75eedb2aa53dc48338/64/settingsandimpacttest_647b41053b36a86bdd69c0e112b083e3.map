{"version":3,"names":["_getJestObj","mock","Object","assign","jest","requireActual","useNavigation","navigate","fn","goBack","useRoute","params","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_layout","_SettingsContext","_AppProvider","_jsxRuntime","_require","describe","it","default","_render","render","jsx","AppProvider","children","SettingsProvider","getByText","findByText","getByTestId","fireEvent","press","dailyGoalInput","changeText","updatedDailyGoal","expect","toBeTruthy"],"sources":["settings-and-impact.test.js"],"sourcesContent":["\nimport React from 'react';\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\nimport App from '../../app/_layout';\nimport { SettingsProvider, SettingsContext } from '../../src/contexts/SettingsContext';\nimport { AppProvider } from '../../src/contexts/AppProvider';\n\njest.mock('@react-navigation/native', () => ({\n  ...jest.requireActual('@react-navigation/native'),\n  useNavigation: () => ({\n    navigate: jest.fn(),\n    goBack: jest.fn(),\n  }),\n  useRoute: () => ({\n    params: {},\n  }),\n}));\n\ndescribe('Settings and Impact Integration Test', () => {\n  it('should reflect settings changes on the Dashboard', async () => {\n    const { getByText, findByText, getByTestId } = render(\n      <AppProvider>\n        <SettingsProvider>\n          <App />\n        </SettingsProvider>\n      </AppProvider>\n    );\n\n    // 1. Naviguer vers les paramètres\n    fireEvent.press(getByText(/Paramètres/i));\n\n    // 2. Changer un paramètre (par exemple, l'objectif quotidien)\n    const dailyGoalInput = getByTestId('daily-goal-input'); // Assurez-vous d'avoir ce testID\n    fireEvent.changeText(dailyGoalInput, '30'); // Changer l'objectif à 30 minutes\n\n    // 3. Retourner au Dashboard\n    fireEvent.press(getByText(/Retour/i));\n\n    // 4. Vérifier que le changement est répercuté sur le Dashboard\n    const updatedDailyGoal = await findByText(/Objectif quotidien : 30 minutes/i);\n    expect(updatedDailyGoal).toBeTruthy();\n  });\n});\n"],"mappings":"AAOAA,WAAA,GAAKC,IAAI,CAAC,0BAA0B,EAAE;EAAA,OAAAC,MAAA,CAAAC,MAAA,KACjCC,IAAI,CAACC,aAAa,CAAC,0BAA0B,CAAC;IACjDC,aAAa,EAAE,SAAfA,aAAaA,CAAA;MAAA,OAAS;QACpBC,QAAQ,EAAEH,IAAI,CAACI,EAAE,CAAC,CAAC;QACnBC,MAAM,EAAEL,IAAI,CAACI,EAAE,CAAC;MAClB,CAAC;IAAA,CAAC;IACFE,QAAQ,EAAE,SAAVA,QAAQA,CAAA;MAAA,OAAS;QACfC,MAAM,EAAE,CAAC;MACX,CAAC;IAAA;EAAC;AAAA,CACF,CAAC;AAAC,IAAAC,sBAAA,GAAAC,OAAA;AAAA,IAAAC,kBAAA,GAAAF,sBAAA,CAAAC,OAAA;AAfJ,IAAAE,MAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,YAAA,GAAAH,OAAA;AACA,IAAAI,OAAA,GAAAL,sBAAA,CAAAC,OAAA;AACA,IAAAK,gBAAA,GAAAL,OAAA;AACA,IAAAM,YAAA,GAAAN,OAAA;AAA6D,IAAAO,WAAA,GAAAP,OAAA;AAAA,SAAAb,YAAA;EAAA,IAAAqB,QAAA,GAAAR,OAAA;IAAAT,IAAA,GAAAiB,QAAA,CAAAjB,IAAA;EAAAJ,WAAA,YAAAA,YAAA;IAAA,OAAAI,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAa7DkB,QAAQ,CAAC,sCAAsC,EAAE,YAAM;EACrDC,EAAE,CAAC,kDAAkD,MAAAT,kBAAA,CAAAU,OAAA,EAAE,aAAY;IACjE,IAAAC,OAAA,GAA+C,IAAAC,mBAAM,EACnD,IAAAN,WAAA,CAAAO,GAAA,EAACR,YAAA,CAAAS,WAAW;QAAAC,QAAA,EACV,IAAAT,WAAA,CAAAO,GAAA,EAACT,gBAAA,CAAAY,gBAAgB;UAAAD,QAAA,EACf,IAAAT,WAAA,CAAAO,GAAA,EAACV,OAAA,CAAAO,OAAG,IAAE;QAAC,CACS;MAAC,CACR,CACf,CAAC;MANOO,SAAS,GAAAN,OAAA,CAATM,SAAS;MAAEC,UAAU,GAAAP,OAAA,CAAVO,UAAU;MAAEC,WAAW,GAAAR,OAAA,CAAXQ,WAAW;IAS1CC,sBAAS,CAACC,KAAK,CAACJ,SAAS,CAAC,aAAa,CAAC,CAAC;IAGzC,IAAMK,cAAc,GAAGH,WAAW,CAAC,kBAAkB,CAAC;IACtDC,sBAAS,CAACG,UAAU,CAACD,cAAc,EAAE,IAAI,CAAC;IAG1CF,sBAAS,CAACC,KAAK,CAACJ,SAAS,CAAC,SAAS,CAAC,CAAC;IAGrC,IAAMO,gBAAgB,SAASN,UAAU,CAAC,kCAAkC,CAAC;IAC7EO,MAAM,CAACD,gBAAgB,CAAC,CAACE,UAAU,CAAC,CAAC;EACvC,CAAC,EAAC;AACJ,CAAC,CAAC","ignoreList":[]}