8eb83b3c68ac73e011ce8ae86ce9bd79
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTotalExercisesCount = exports.getLevelStats = exports.getLevelColor = exports.getGrammarRulesCount = exports.getGrammarData = void 0;
var _A = _interopRequireDefault(require("../../data/grammar/A1"));
var _A2 = _interopRequireDefault(require("../../data/grammar/A2"));
var _B = _interopRequireDefault(require("../../data/grammar/B1"));
var _B2 = _interopRequireDefault(require("../../data/grammar/B2"));
var _C = _interopRequireDefault(require("../../data/grammar/C1"));
var _C2 = _interopRequireDefault(require("../../data/grammar/C2"));
var getGrammarData = exports.getGrammarData = function getGrammarData(level) {
  var dataMap = {
    A1: _A.default,
    A2: _A2.default,
    B1: _B.default,
    B2: _B2.default,
    C1: _C.default,
    C2: _C2.default
  };
  return dataMap[level] || _A.default;
};
var getLevelColor = exports.getLevelColor = function getLevelColor(level) {
  var colors = {
    A1: "#3b82f6",
    A2: "#8b5cf6",
    B1: "#10b981",
    B2: "#f59e0b",
    C1: "#ef4444",
    C2: "#6366f1"
  };
  return colors[level] || "#3b82f6";
};
var getGrammarRulesCount = exports.getGrammarRulesCount = function getGrammarRulesCount(level) {
  var data = getGrammarData(level);
  return data ? data.length : 0;
};
var getTotalExercisesCount = exports.getTotalExercisesCount = function getTotalExercisesCount(level) {
  var data = getGrammarData(level);
  if (!data) return 0;
  return data.reduce(function (total, rule) {
    return total + (rule.exercises ? rule.exercises.length : 0);
  }, 0);
};
var getLevelStats = exports.getLevelStats = function getLevelStats(level) {
  var data = getGrammarData(level);
  if (!data) return {
    rules: 0,
    exercises: 0,
    averageExercisesPerRule: 0
  };
  var totalRules = data.length;
  var totalExercises = getTotalExercisesCount(level);
  return {
    rules: totalRules,
    exercises: totalExercises,
    averageExercisesPerRule: totalRules > 0 ? totalExercises / totalRules : 0
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfQSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX0EyIiwiX0IiLCJfQjIiLCJfQyIsIl9DMiIsImdldEdyYW1tYXJEYXRhIiwiZXhwb3J0cyIsImxldmVsIiwiZGF0YU1hcCIsIkExIiwiZ3JhbW1hckExIiwiQTIiLCJncmFtbWFyQTIiLCJCMSIsImdyYW1tYXJCMSIsIkIyIiwiZ3JhbW1hckIyIiwiQzEiLCJncmFtbWFyQzEiLCJDMiIsImdyYW1tYXJDMiIsImdldExldmVsQ29sb3IiLCJjb2xvcnMiLCJnZXRHcmFtbWFyUnVsZXNDb3VudCIsImRhdGEiLCJsZW5ndGgiLCJnZXRUb3RhbEV4ZXJjaXNlc0NvdW50IiwicmVkdWNlIiwidG90YWwiLCJydWxlIiwiZXhlcmNpc2VzIiwiZ2V0TGV2ZWxTdGF0cyIsInJ1bGVzIiwiYXZlcmFnZUV4ZXJjaXNlc1BlclJ1bGUiLCJ0b3RhbFJ1bGVzIiwidG90YWxFeGVyY2lzZXMiXSwic291cmNlcyI6WyJncmFtbWFyRGF0YUhlbHBlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB1dGlscy9ncmFtbWFyL2dyYW1tYXJEYXRhSGVscGVyLmpzXG5cbi8vIEltcG9ydCBkZXMgZG9ubsOpZXMgZGUgZ3JhbW1haXJlIHBhciBuaXZlYXVcbmltcG9ydCBncmFtbWFyQTEgZnJvbSBcIi4uLy4uL2RhdGEvZ3JhbW1hci9BMVwiO1xuaW1wb3J0IGdyYW1tYXJBMiBmcm9tIFwiLi4vLi4vZGF0YS9ncmFtbWFyL0EyXCI7XG5pbXBvcnQgZ3JhbW1hckIxIGZyb20gXCIuLi8uLi9kYXRhL2dyYW1tYXIvQjFcIjtcbmltcG9ydCBncmFtbWFyQjIgZnJvbSBcIi4uLy4uL2RhdGEvZ3JhbW1hci9CMlwiO1xuaW1wb3J0IGdyYW1tYXJDMSBmcm9tIFwiLi4vLi4vZGF0YS9ncmFtbWFyL0MxXCI7XG5pbXBvcnQgZ3JhbW1hckMyIGZyb20gXCIuLi8uLi9kYXRhL2dyYW1tYXIvQzJcIjtcblxuLyoqXG4gKiBSw6ljdXDDqHJlIGxlcyBkb25uw6llcyBkZSBncmFtbWFpcmUgZW4gZm9uY3Rpb24gZHUgbml2ZWF1XG4gKiBAcGFyYW0ge3N0cmluZ30gbGV2ZWwgLSBMZSBuaXZlYXUgZGUgbGFuZ3VlIChBMSwgQTIsIEIxLCBCMiwgQzEsIEMyKVxuICogQHJldHVybnMge09iamVjdH0gTGVzIGRvbm7DqWVzIGRlIGdyYW1tYWlyZSBwb3VyIGxlIG5pdmVhdSBzcMOpY2lmacOpXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRHcmFtbWFyRGF0YSA9IChsZXZlbCkgPT4ge1xuICBjb25zdCBkYXRhTWFwID0ge1xuICAgIEExOiBncmFtbWFyQTEsXG4gICAgQTI6IGdyYW1tYXJBMixcbiAgICBCMTogZ3JhbW1hckIxLFxuICAgIEIyOiBncmFtbWFyQjIsXG4gICAgQzE6IGdyYW1tYXJDMSxcbiAgICBDMjogZ3JhbW1hckMyXG4gIH07XG4gIC8vIFJldG91cm5lIEExIHBhciBkw6lmYXV0IHNpIGxlIG5pdmVhdSBuJ2VzdCBwYXMgcmVjb25udVxuICByZXR1cm4gZGF0YU1hcFtsZXZlbF0gfHwgZ3JhbW1hckExO1xufTtcblxuLyoqXG4gKiBSw6ljdXDDqHJlIGxhIGNvdWxldXIgYXNzb2Npw6llIMOgIHVuIG5pdmVhdSBkZSBsYW5ndWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBsZXZlbCAtIExlIG5pdmVhdSBkZSBsYW5ndWUgKEExLCBBMiwgQjEsIEIyLCBDMSwgQzIpXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBDb2RlIGNvdWxldXIgaGV4YWTDqWNpbWFsIHBvdXIgbGUgbml2ZWF1XG4gKi9cbmV4cG9ydCBjb25zdCBnZXRMZXZlbENvbG9yID0gKGxldmVsKSA9PiB7XG4gIGNvbnN0IGNvbG9ycyA9IHtcbiAgICBBMTogXCIjM2I4MmY2XCIsIC8vIEJsZXVcbiAgICBBMjogXCIjOGI1Y2Y2XCIsIC8vIFZpb2xldFxuICAgIEIxOiBcIiMxMGI5ODFcIiwgLy8gVmVydFxuICAgIEIyOiBcIiNmNTllMGJcIiwgLy8gT3JhbmdlXG4gICAgQzE6IFwiI2VmNDQ0NFwiLCAvLyBSb3VnZVxuICAgIEMyOiBcIiM2MzY2ZjFcIiwgLy8gSW5kaWdvXG4gIH07XG4gIHJldHVybiBjb2xvcnNbbGV2ZWxdIHx8IFwiIzNiODJmNlwiOyAvLyBCbGV1IHBhciBkw6lmYXV0XG59O1xuXG4vKipcbiAqIFLDqWN1cMOocmUgbGUgbm9tYnJlIHRvdGFsIGRlIHLDqGdsZXMgZGUgZ3JhbW1haXJlIHBvdXIgdW4gbml2ZWF1XG4gKiBAcGFyYW0ge3N0cmluZ30gbGV2ZWwgLSBMZSBuaXZlYXUgZGUgbGFuZ3VlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBOb21icmUgdG90YWwgZGUgcsOoZ2xlc1xuICovXG5leHBvcnQgY29uc3QgZ2V0R3JhbW1hclJ1bGVzQ291bnQgPSAobGV2ZWwpID0+IHtcbiAgY29uc3QgZGF0YSA9IGdldEdyYW1tYXJEYXRhKGxldmVsKTtcbiAgcmV0dXJuIGRhdGEgPyBkYXRhLmxlbmd0aCA6IDA7XG59O1xuXG4vKipcbiAqIFLDqWN1cMOocmUgbGUgbm9tYnJlIHRvdGFsIGQnZXhlcmNpY2VzIHBvdXIgdW4gbml2ZWF1XG4gKiBAcGFyYW0ge3N0cmluZ30gbGV2ZWwgLSBMZSBuaXZlYXUgZGUgbGFuZ3VlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBOb21icmUgdG90YWwgZCdleGVyY2ljZXNcbiAqL1xuZXhwb3J0IGNvbnN0IGdldFRvdGFsRXhlcmNpc2VzQ291bnQgPSAobGV2ZWwpID0+IHtcbiAgY29uc3QgZGF0YSA9IGdldEdyYW1tYXJEYXRhKGxldmVsKTtcbiAgaWYgKCFkYXRhKSByZXR1cm4gMDtcblxuICByZXR1cm4gZGF0YS5yZWR1Y2UoKHRvdGFsLCBydWxlKSA9PiB7XG4gICAgcmV0dXJuIHRvdGFsICsgKHJ1bGUuZXhlcmNpc2VzID8gcnVsZS5leGVyY2lzZXMubGVuZ3RoIDogMCk7XG4gIH0sIDApO1xufTtcblxuLyoqXG4gKiBSw6ljdXDDqHJlIGxlcyBzdGF0aXN0aXF1ZXMgY29tcGzDqHRlcyBwb3VyIHVuIG5pdmVhdVxuICogQHBhcmFtIHtzdHJpbmd9IGxldmVsIC0gTGUgbml2ZWF1IGRlIGxhbmd1ZVxuICogQHJldHVybnMge09iamVjdH0gU3RhdGlzdGlxdWVzIGR1IG5pdmVhdVxuICovXG5leHBvcnQgY29uc3QgZ2V0TGV2ZWxTdGF0cyA9IChsZXZlbCkgPT4ge1xuICBjb25zdCBkYXRhID0gZ2V0R3JhbW1hckRhdGEobGV2ZWwpO1xuXG4gIGlmICghZGF0YSkgcmV0dXJuIHtcbiAgICBydWxlczogMCxcbiAgICBleGVyY2lzZXM6IDAsXG4gICAgYXZlcmFnZUV4ZXJjaXNlc1BlclJ1bGU6IDBcbiAgfTtcblxuICBjb25zdCB0b3RhbFJ1bGVzID0gZGF0YS5sZW5ndGg7XG4gIGNvbnN0IHRvdGFsRXhlcmNpc2VzID0gZ2V0VG90YWxFeGVyY2lzZXNDb3VudChsZXZlbCk7XG5cbiAgcmV0dXJuIHtcbiAgICBydWxlczogdG90YWxSdWxlcyxcbiAgICBleGVyY2lzZXM6IHRvdGFsRXhlcmNpc2VzLFxuICAgIGF2ZXJhZ2VFeGVyY2lzZXNQZXJSdWxlOiB0b3RhbFJ1bGVzID4gMCA/IHRvdGFsRXhlcmNpc2VzIC8gdG90YWxSdWxlcyA6IDBcbiAgfTtcbn07XG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBR0EsSUFBQUEsRUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsR0FBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsRUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsR0FBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUksRUFBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUssR0FBQSxHQUFBTixzQkFBQSxDQUFBQyxPQUFBO0FBT08sSUFBTU0sY0FBYyxHQUFBQyxPQUFBLENBQUFELGNBQUEsR0FBRyxTQUFqQkEsY0FBY0EsQ0FBSUUsS0FBSyxFQUFLO0VBQ3ZDLElBQU1DLE9BQU8sR0FBRztJQUNkQyxFQUFFLEVBQUVDLFVBQVM7SUFDYkMsRUFBRSxFQUFFQyxXQUFTO0lBQ2JDLEVBQUUsRUFBRUMsVUFBUztJQUNiQyxFQUFFLEVBQUVDLFdBQVM7SUFDYkMsRUFBRSxFQUFFQyxVQUFTO0lBQ2JDLEVBQUUsRUFBRUM7RUFDTixDQUFDO0VBRUQsT0FBT1osT0FBTyxDQUFDRCxLQUFLLENBQUMsSUFBSUcsVUFBUztBQUNwQyxDQUFDO0FBT00sSUFBTVcsYUFBYSxHQUFBZixPQUFBLENBQUFlLGFBQUEsR0FBRyxTQUFoQkEsYUFBYUEsQ0FBSWQsS0FBSyxFQUFLO0VBQ3RDLElBQU1lLE1BQU0sR0FBRztJQUNiYixFQUFFLEVBQUUsU0FBUztJQUNiRSxFQUFFLEVBQUUsU0FBUztJQUNiRSxFQUFFLEVBQUUsU0FBUztJQUNiRSxFQUFFLEVBQUUsU0FBUztJQUNiRSxFQUFFLEVBQUUsU0FBUztJQUNiRSxFQUFFLEVBQUU7RUFDTixDQUFDO0VBQ0QsT0FBT0csTUFBTSxDQUFDZixLQUFLLENBQUMsSUFBSSxTQUFTO0FBQ25DLENBQUM7QUFPTSxJQUFNZ0Isb0JBQW9CLEdBQUFqQixPQUFBLENBQUFpQixvQkFBQSxHQUFHLFNBQXZCQSxvQkFBb0JBLENBQUloQixLQUFLLEVBQUs7RUFDN0MsSUFBTWlCLElBQUksR0FBR25CLGNBQWMsQ0FBQ0UsS0FBSyxDQUFDO0VBQ2xDLE9BQU9pQixJQUFJLEdBQUdBLElBQUksQ0FBQ0MsTUFBTSxHQUFHLENBQUM7QUFDL0IsQ0FBQztBQU9NLElBQU1DLHNCQUFzQixHQUFBcEIsT0FBQSxDQUFBb0Isc0JBQUEsR0FBRyxTQUF6QkEsc0JBQXNCQSxDQUFJbkIsS0FBSyxFQUFLO0VBQy9DLElBQU1pQixJQUFJLEdBQUduQixjQUFjLENBQUNFLEtBQUssQ0FBQztFQUNsQyxJQUFJLENBQUNpQixJQUFJLEVBQUUsT0FBTyxDQUFDO0VBRW5CLE9BQU9BLElBQUksQ0FBQ0csTUFBTSxDQUFDLFVBQUNDLEtBQUssRUFBRUMsSUFBSSxFQUFLO0lBQ2xDLE9BQU9ELEtBQUssSUFBSUMsSUFBSSxDQUFDQyxTQUFTLEdBQUdELElBQUksQ0FBQ0MsU0FBUyxDQUFDTCxNQUFNLEdBQUcsQ0FBQyxDQUFDO0VBQzdELENBQUMsRUFBRSxDQUFDLENBQUM7QUFDUCxDQUFDO0FBT00sSUFBTU0sYUFBYSxHQUFBekIsT0FBQSxDQUFBeUIsYUFBQSxHQUFHLFNBQWhCQSxhQUFhQSxDQUFJeEIsS0FBSyxFQUFLO0VBQ3RDLElBQU1pQixJQUFJLEdBQUduQixjQUFjLENBQUNFLEtBQUssQ0FBQztFQUVsQyxJQUFJLENBQUNpQixJQUFJLEVBQUUsT0FBTztJQUNoQlEsS0FBSyxFQUFFLENBQUM7SUFDUkYsU0FBUyxFQUFFLENBQUM7SUFDWkcsdUJBQXVCLEVBQUU7RUFDM0IsQ0FBQztFQUVELElBQU1DLFVBQVUsR0FBR1YsSUFBSSxDQUFDQyxNQUFNO0VBQzlCLElBQU1VLGNBQWMsR0FBR1Qsc0JBQXNCLENBQUNuQixLQUFLLENBQUM7RUFFcEQsT0FBTztJQUNMeUIsS0FBSyxFQUFFRSxVQUFVO0lBQ2pCSixTQUFTLEVBQUVLLGNBQWM7SUFDekJGLHVCQUF1QixFQUFFQyxVQUFVLEdBQUcsQ0FBQyxHQUFHQyxjQUFjLEdBQUdELFVBQVUsR0FBRztFQUMxRSxDQUFDO0FBQ0gsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==