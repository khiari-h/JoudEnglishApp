{"version":3,"names":["_react","require","_asyncStorage","_interopRequireDefault","_vocabularyDataHelper","_arrayUtils","processWordRef","wordRef","category","wordIndex","timestamp","Date","now","undefined","foundIndex","words","findIndex","w","word","processCategoryWords","wordRefs","categoryIndex","originalData","levelKey","mode","learnedWords","Array","isArray","length","catIndex","parseInt","exercises","forEach","_processWordRef","realWord","learnedWord","createLearnedWord","push","translation","definition","example","fromLevel","fromMode","uniqueId","loadLevelData","_ref","_asyncToGenerator2","default","storageKey","stored","AsyncStorage","getItem","data","JSON","parse","completedWordsRefs","completedWords","Object","keys","getVocabularyData","entries","_ref2","_ref3","_slicedToArray2","storageError","console","error","_x","_x2","_x3","apply","arguments","generateQuestionChoices","allLearnedWords","otherWords","filter","wrongAnswers","shuffleAndTake","map","_fallbackData$exercis","fallbackData","needed","randomFallback","includes","concat","_toConsumableArray2","choices","shuffleArray","slice","calculateStats","revisionQuestions","totalLearned","byLevel","byMode","questionsGenerated","useRevisionData","level","questionsCount","_useState","useState","_useState2","setAllLearnedWords","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","setError","useEffect","loadLearnedWords","_ref4","levels","modes","uniqueWords","index","self","mainError","message","useMemo","shuffledWords","selectedWords","Math","min","questionsWithChoices","assign","correctAnswer","stats","hasEnoughWords","canGenerateQuestions","_default","exports"],"sources":["useRevisionData.js"],"sourcesContent":["// src/hooks/useRevisionData.js - REFACTORISÉ pour réduire la complexité cognitive\r\nimport { useState, useEffect, useMemo } from 'react';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { getVocabularyData } from '../utils/vocabulary/vocabularyDataHelper';\r\nimport { shuffleArray, shuffleAndTake, shuffleWithFallback } from '../utils/arrayUtils';\r\n\r\n// Fonction utilitaire pour traiter les différents formats de wordRef\r\nconst processWordRef = (wordRef, category) => {\r\n  let wordIndex;\r\n  let timestamp = Date.now();\r\n  \r\n  // Support nouveau format (objet avec wordIndex + timestamp)\r\n  if (typeof wordRef === 'object' && wordRef.wordIndex !== undefined) {\r\n    wordIndex = wordRef.wordIndex;\r\n    timestamp = wordRef.timestamp || timestamp;\r\n  } \r\n  // Support ancien format (juste l'index)\r\n  else if (typeof wordRef === 'number') {\r\n    wordIndex = wordRef;\r\n  }\r\n  // Support très ancien format (string du mot)\r\n  else if (typeof wordRef === 'string') {\r\n    const foundIndex = category.words.findIndex(w => w.word === wordRef);\r\n    if (foundIndex !== -1) wordIndex = foundIndex;\r\n  }\r\n  \r\n  return { wordIndex, timestamp };\r\n};\r\n\r\n// Fonction pour traiter les mots d'une catégorie\r\nconst processCategoryWords = (wordRefs, categoryIndex, originalData, levelKey, mode, learnedWords) => {\r\n  if (!Array.isArray(wordRefs) || wordRefs.length === 0) return;\r\n  \r\n  const catIndex = parseInt(categoryIndex);\r\n  const category = originalData.exercises[catIndex];\r\n  \r\n  if (!category?.words) return;\r\n  \r\n  // Récupérer chaque mot appris\r\n  wordRefs.forEach((wordRef) => {\r\n    const { wordIndex, timestamp } = processWordRef(wordRef, category);\r\n    \r\n    // Récupérer le vrai mot depuis les données originales\r\n    if (wordIndex !== undefined && category.words[wordIndex]) {\r\n      const realWord = category.words[wordIndex];\r\n      const learnedWord = createLearnedWord(realWord, levelKey, mode, catIndex, wordIndex, timestamp);\r\n      learnedWords.push(learnedWord);\r\n    }\r\n  });\r\n};\r\n\r\n// Fonction pour créer un mot appris avec métadonnées\r\nconst createLearnedWord = (realWord, levelKey, mode, catIndex, wordIndex, timestamp) => ({\r\n  // Données du mot\r\n  word: realWord.word,\r\n  translation: realWord.translation,\r\n  definition: realWord.definition || '',\r\n  example: realWord.example || '',\r\n  \r\n  // Métadonnées\r\n  fromLevel: levelKey,\r\n  fromMode: mode,\r\n  categoryIndex: catIndex,\r\n  wordIndex,\r\n  timestamp,\r\n  \r\n  // ID unique pour éviter doublons\r\n  uniqueId: `${levelKey}_${mode}_${catIndex}_${wordIndex}`\r\n});\r\n\r\n// Fonction pour charger les données d'un niveau spécifique\r\nconst loadLevelData = async (levelKey, mode, learnedWords) => {\r\n  const storageKey = `vocabulary_${levelKey}_${mode}`;\r\n  \r\n  try {\r\n    const stored = await AsyncStorage.getItem(storageKey);\r\n    if (!stored) return;\r\n\r\n    const data = JSON.parse(stored);\r\n    const completedWordsRefs = data.completedWords || {};\r\n    \r\n    if (Object.keys(completedWordsRefs).length === 0) return;\r\n    \r\n    // Récupérer les données originales du vocabulaire\r\n    const originalData = getVocabularyData(levelKey, mode);\r\n    if (!originalData?.exercises) return;\r\n    \r\n    // Traiter chaque catégorie\r\n    Object.entries(completedWordsRefs).forEach(([categoryIndex, wordRefs]) => {\r\n      processCategoryWords(wordRefs, categoryIndex, originalData, levelKey, mode, learnedWords);\r\n    });\r\n  } catch (storageError) {\r\n    console.error(`❌ Erreur traitement ${storageKey}:`, storageError);\r\n  }\r\n};\r\n\r\n// Fonction pour générer les choix de réponses d'une question\r\nconst generateQuestionChoices = (word, allLearnedWords) => {\r\n  // Pool des autres mots pour les mauvaises réponses\r\n  const otherWords = allLearnedWords.filter(w => w.uniqueId !== word.uniqueId);\r\n  \r\n  // Prendre 3 mauvaises réponses\r\n  let wrongAnswers = shuffleAndTake(otherWords, 3).map(w => w.translation);\r\n  \r\n  // Si pas assez de mauvaises réponses, compléter avec dataset de fallback\r\n  if (wrongAnswers.length < 3) {\r\n    const fallbackData = getVocabularyData('1', 'classic');\r\n    if (fallbackData?.exercises?.[0]?.words) {\r\n      const needed = 3 - wrongAnswers.length;\r\n      const randomFallback = shuffleAndTake(\r\n        fallbackData.exercises[0].words.filter(w => \r\n          !wrongAnswers.includes(w.translation) && w.translation !== word.translation\r\n        ), \r\n        needed\r\n      ).map(w => w.translation);\r\n      \r\n      wrongAnswers = [...wrongAnswers, ...randomFallback];\r\n    }\r\n  }\r\n  \r\n  // Mélanger toutes les réponses\r\n  const choices = shuffleArray([word.translation, ...wrongAnswers.slice(0, 3)]);\r\n  \r\n  return choices;\r\n};\r\n\r\n// Fonction pour calculer les statistiques\r\nconst calculateStats = (allLearnedWords, revisionQuestions) => {\r\n  const totalLearned = allLearnedWords.length;\r\n  const byLevel = {};\r\n  const byMode = {};\r\n  \r\n  allLearnedWords.forEach(word => {\r\n    byLevel[word.fromLevel] = (byLevel[word.fromLevel] || 0) + 1;\r\n    byMode[word.fromMode] = (byMode[word.fromMode] || 0) + 1;\r\n  });\r\n  \r\n  return {\r\n    totalLearned,\r\n    byLevel,\r\n    byMode,\r\n    questionsGenerated: revisionQuestions.length\r\n  };\r\n};\r\n\r\nconst useRevisionData = (level = \"mixed\", questionsCount = 10) => {\r\n  const [allLearnedWords, setAllLearnedWords] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // ========== RÉCUPÉRATION DES MOTS APPRIS ==========\r\n  useEffect(() => {\r\n    const loadLearnedWords = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        const learnedWords = [];\r\n        \r\n        const levels = level === \"mixed\" ? ['1', '2', '3', '4', '5', '6', 'bonus'] : [level];\r\n        const modes = ['classic', 'fast'];\r\n\r\n        // Charger les données de chaque niveau et mode\r\n        for (const levelKey of levels) {\r\n          for (const mode of modes) {\r\n            await loadLevelData(levelKey, mode, learnedWords);\r\n          }\r\n        }\r\n        \r\n        // Supprimer les doublons potentiels basés sur uniqueId\r\n        const uniqueWords = learnedWords.filter((word, index, self) => \r\n          index === self.findIndex(w => w.uniqueId === word.uniqueId)\r\n        );\r\n        \r\n        setAllLearnedWords(uniqueWords);\r\n        \r\n      } catch (mainError) {\r\n        console.error('❌ Erreur générale useRevisionData:', mainError);\r\n        setError(mainError.message);\r\n        setAllLearnedWords([]);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    loadLearnedWords();\r\n  }, [level]); // Recharger si le niveau change\r\n\r\n  // ========== GÉNÉRATION DES QUESTIONS ==========\r\n  const revisionQuestions = useMemo(() => {\r\n    if (allLearnedWords.length === 0) return [];\r\n\r\n    // Mélanger et sélectionner\r\n    const shuffledWords = shuffleArray(allLearnedWords);\r\n    const selectedWords = shuffledWords.slice(0, Math.min(questionsCount, allLearnedWords.length));\r\n    \r\n    // Générer les questions avec choix\r\n    const questionsWithChoices = selectedWords.map((word) => {\r\n      const choices = generateQuestionChoices(word, allLearnedWords);\r\n      \r\n      return {\r\n        ...word,\r\n        choices,\r\n        correctAnswer: word.translation\r\n      };\r\n    });\r\n\r\n    return questionsWithChoices;\r\n    \r\n  }, [allLearnedWords, questionsCount]);\r\n\r\n  // ========== STATISTIQUES ==========\r\n  const stats = useMemo(() => {\r\n    return calculateStats(allLearnedWords, revisionQuestions);\r\n  }, [allLearnedWords, revisionQuestions]);\r\n\r\n  return {\r\n    // Données principales\r\n    allLearnedWords,\r\n    revisionQuestions,\r\n    \r\n    // État\r\n    isLoading,\r\n    error,\r\n    \r\n    // Statistiques\r\n    stats,\r\n    \r\n    // Méthodes utiles\r\n    hasEnoughWords: allLearnedWords.length > 0,\r\n    canGenerateQuestions: revisionQuestions.length > 0\r\n  };\r\n};\r\n\r\nexport default useRevisionData;"],"mappings":"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","ignoreList":[]}