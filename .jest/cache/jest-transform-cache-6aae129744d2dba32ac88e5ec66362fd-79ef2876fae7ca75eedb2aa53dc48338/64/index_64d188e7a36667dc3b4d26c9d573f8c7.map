{"version":3,"names":["_react","require","_ProgressCard","_interopRequireDefault","_jsxRuntime","AssessmentProgress","_ref","_ref$currentSection","currentSection","_ref$totalSections","totalSections","_ref$currentQuestion","currentQuestion","_ref$totalQuestions","totalQuestions","_ref$answeredQuestion","answeredQuestionsInSection","_ref$levelColor","levelColor","sectionProgress","useMemo","Math","round","jsx","default","title","subtitle","progress","completed","total","unit","expandable","expanded","onToggleExpand","undefined","categoryData","onCategoryPress","_default","exports"],"sources":["index.js"],"sourcesContent":["// AssessmentProgress/index.js - VERSION CORRIGÃ‰E AVEC useMemo\r\n\r\nimport { useMemo } from \"react\";\r\nimport ProgressCard from \"../../../../components/ui/ProgressCard\";\r\n\r\n/**\r\n * ðŸ“Š AssessmentProgress - Version corrigÃ©e avec mÃ©morisation\r\n * âœ… Ã‰vite les boucles infinies avec useMemo\r\n * âœ… Performance optimisÃ©e\r\n */\r\nconst AssessmentProgress = ({\r\n  currentSection = 1,\r\n  totalSections = 0,\r\n  currentQuestion = 1,\r\n  totalQuestions = 0,\r\n  answeredQuestionsInSection = 0,\r\n  levelColor = \"#3b82f6\",\r\n}) => {\r\n  \r\n  // âœ… MÃ‰MORISER le calcul de progression de section\r\n  const sectionProgress = useMemo(() => {\r\n    return totalQuestions > 0 \r\n      ? Math.round((answeredQuestionsInSection / totalQuestions) * 100)\r\n      : 0;\r\n  }, [answeredQuestionsInSection, totalQuestions]);\r\n\r\n  return (\r\n    <ProgressCard\r\n      title=\"Progression\"\r\n      subtitle={`Section ${currentSection}/${totalSections} â€¢ Question ${currentQuestion}/${totalQuestions}`}\r\n      progress={sectionProgress}\r\n      completed={answeredQuestionsInSection}\r\n      total={totalQuestions}\r\n      unit=\"questions\"\r\n      levelColor={levelColor}\r\n      expandable={false}\r\n      expanded={false}\r\n      onToggleExpand={undefined}\r\n      categoryData={[]}\r\n      onCategoryPress={undefined}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AssessmentProgress;"],"mappings":";;;;;AAEA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,aAAA,GAAAC,sBAAA,CAAAF,OAAA;AAAkE,IAAAG,WAAA,GAAAH,OAAA;AAOlE,IAAMI,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAAC,IAAA,EAOlB;EAAA,IAAAC,mBAAA,GAAAD,IAAA,CANJE,cAAc;IAAdA,cAAc,GAAAD,mBAAA,cAAG,CAAC,GAAAA,mBAAA;IAAAE,kBAAA,GAAAH,IAAA,CAClBI,aAAa;IAAbA,aAAa,GAAAD,kBAAA,cAAG,CAAC,GAAAA,kBAAA;IAAAE,oBAAA,GAAAL,IAAA,CACjBM,eAAe;IAAfA,eAAe,GAAAD,oBAAA,cAAG,CAAC,GAAAA,oBAAA;IAAAE,mBAAA,GAAAP,IAAA,CACnBQ,cAAc;IAAdA,cAAc,GAAAD,mBAAA,cAAG,CAAC,GAAAA,mBAAA;IAAAE,qBAAA,GAAAT,IAAA,CAClBU,0BAA0B;IAA1BA,0BAA0B,GAAAD,qBAAA,cAAG,CAAC,GAAAA,qBAAA;IAAAE,eAAA,GAAAX,IAAA,CAC9BY,UAAU;IAAVA,UAAU,GAAAD,eAAA,cAAG,SAAS,GAAAA,eAAA;EAItB,IAAME,eAAe,GAAG,IAAAC,cAAO,EAAC,YAAM;IACpC,OAAON,cAAc,GAAG,CAAC,GACrBO,IAAI,CAACC,KAAK,CAAEN,0BAA0B,GAAGF,cAAc,GAAI,GAAG,CAAC,GAC/D,CAAC;EACP,CAAC,EAAE,CAACE,0BAA0B,EAAEF,cAAc,CAAC,CAAC;EAEhD,OACE,IAAAV,WAAA,CAAAmB,GAAA,EAACrB,aAAA,CAAAsB,OAAY;IACXC,KAAK,EAAC,aAAa;IACnBC,QAAQ,EAAE,WAAWlB,cAAc,IAAIE,aAAa,eAAeE,eAAe,IAAIE,cAAc,EAAG;IACvGa,QAAQ,EAAER,eAAgB;IAC1BS,SAAS,EAAEZ,0BAA2B;IACtCa,KAAK,EAAEf,cAAe;IACtBgB,IAAI,EAAC,WAAW;IAChBZ,UAAU,EAAEA,UAAW;IACvBa,UAAU,EAAE,KAAM;IAClBC,QAAQ,EAAE,KAAM;IAChBC,cAAc,EAAEC,SAAU;IAC1BC,YAAY,EAAE,EAAG;IACjBC,eAAe,EAAEF;EAAU,CAC5B,CAAC;AAEN,CAAC;AAAC,IAAAG,QAAA,GAAAC,OAAA,CAAAd,OAAA,GAEanB,kBAAkB","ignoreList":[]}