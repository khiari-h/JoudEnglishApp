61d77e301b2a651fb096d66aacc1f9f4
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _vectorIcons = require("@expo/vector-icons");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _ThemeContext = require("../../../../../contexts/ThemeContext");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var PopupHeader = function PopupHeader(_ref) {
  var colors = _ref.colors,
    totalWordsLearned = _ref.totalWordsLearned,
    localStyles = _ref.localStyles;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: localStyles.header,
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: localStyles.celebration,
      children: "\uD83C\uDFC6"
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [localStyles.mainTitle, {
        color: colors.text
      }],
      children: "Pr\xEAt pour une r\xE9vision ?"
    }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
      style: [localStyles.wordsCounter, {
        color: colors.textSecondary
      }],
      children: ["Vous avez appris ", totalWordsLearned, " mots !"]
    })]
  });
};
var OPACITY_LEVELS = {
  normal: '20',
  primary: '30',
  primaryBorder: '40'
};
var UniformChoice = _react.default.memo(function (_ref2) {
  var choice = _ref2.choice,
    onPress = _ref2.onPress,
    localStyles = _ref2.localStyles,
    _ref2$isPrimary = _ref2.isPrimary,
    isPrimary = _ref2$isPrimary === void 0 ? false : _ref2$isPrimary;
  var primarySubtitleStyle = _react.default.useMemo(function () {
    return {
      color: '#047857',
      fontWeight: '600'
    };
  }, []);
  return (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
    style: [localStyles.choiceButton, isPrimary && localStyles.primaryChoiceModifier],
    onPress: onPress,
    activeOpacity: 0.7,
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [localStyles.choiceIconContainer, {
        backgroundColor: choice.color + OPACITY_LEVELS.normal
      }, isPrimary && {
        backgroundColor: choice.color + OPACITY_LEVELS.primary,
        borderWidth: 1,
        borderColor: choice.color + OPACITY_LEVELS.primaryBorder
      }],
      children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
        name: choice.iconName,
        size: isPrimary ? 22 : 20,
        color: choice.color
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: localStyles.choiceTextContainer,
      children: [(0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: [localStyles.choiceLabel, isPrimary && localStyles.primaryChoiceLabel],
        children: [choice.label, isPrimary && ' ⚡']
      }), choice.subtitle && (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [localStyles.choiceSubtitle, isPrimary && primarySubtitleStyle],
        children: choice.subtitle
      })]
    })]
  });
});
var RevisionPopup = function RevisionPopup(_ref3) {
  var _ref3$visible = _ref3.visible,
    visible = _ref3$visible === void 0 ? false : _ref3$visible,
    _ref3$totalWordsLearn = _ref3.totalWordsLearned,
    totalWordsLearned = _ref3$totalWordsLearn === void 0 ? 50 : _ref3$totalWordsLearn,
    _ref3$questionsCount = _ref3.questionsCount,
    questionsCount = _ref3$questionsCount === void 0 ? 10 : _ref3$questionsCount,
    onChoice = _ref3.onChoice,
    onDismiss = _ref3.onDismiss;
  var themeContext = (0, _react.useContext)(_ThemeContext.ThemeContext);
  var colors = (themeContext == null ? void 0 : themeContext.colors) || {
    surface: "#FFFFFF",
    text: "#1F2937",
    textSecondary: "#6B7280",
    primary: "#10B981",
    accent: "#3B82F6",
    warning: "#F59E0B"
  };
  var scaleAnim = (0, _react.useRef)(new _reactNative.Animated.Value(0.95)).current;
  var opacityAnim = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
  (0, _react.useEffect)(function () {
    if (visible) {
      _reactNative.Animated.parallel([_reactNative.Animated.spring(scaleAnim, {
        toValue: 1,
        friction: 7,
        tension: 40,
        useNativeDriver: true
      }), _reactNative.Animated.timing(opacityAnim, {
        toValue: 1,
        duration: 200,
        useNativeDriver: true
      })]).start();
    } else {
      scaleAnim.setValue(0.95);
      opacityAnim.setValue(0);
    }
  }, [visible, scaleAnim, opacityAnim]);
  var allChoices = [{
    id: 'now',
    iconName: 'flash-outline',
    label: `Réviser (${questionsCount} questions)`,
    subtitle: 'Testez vos connaissances maintenant',
    color: colors.primary,
    isPrimary: true
  }, {
    id: 'later_50',
    iconName: 'time-outline',
    label: 'Plus tard (50 mots)',
    subtitle: `Prochaine révision à ${totalWordsLearned + 50} mots`,
    color: colors.accent
  }, {
    id: 'later_100',
    iconName: 'hourglass-outline',
    label: 'Plus tard (100 mots)',
    subtitle: `Prochaine révision à ${totalWordsLearned + 100} mots`,
    color: colors.warning
  }, {
    id: 'disable',
    iconName: 'close-circle-outline',
    label: 'Désactiver',
    subtitle: 'Vous pourrez réactiver via les paramètres',
    color: '#6B7280'
  }];
  var handleChoicePress = (0, _react.useCallback)(function (id) {
    return function () {
      if (onChoice) onChoice(id);
    };
  }, [onChoice]);
  var animatedContainerStyle = {
    opacity: opacityAnim,
    transform: [{
      scale: scaleAnim
    }]
  };
  return (0, _jsxRuntime.jsx)(_reactNative.Modal, {
    transparent: true,
    visible: visible,
    animationType: "fade",
    onRequestClose: onDismiss,
    children: (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _style.default.overlay,
      children: (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
        style: [_style.default.popupContainer, animatedContainerStyle],
        children: [(0, _jsxRuntime.jsx)(PopupHeader, {
          colors: colors,
          totalWordsLearned: totalWordsLearned,
          localStyles: _style.default
        }), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: _style.default.body,
          children: (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: _style.default.choicesContainer,
            children: allChoices.map(function (choice) {
              return (0, _jsxRuntime.jsx)(UniformChoice, {
                choice: choice,
                onPress: handleChoicePress(choice.id),
                localStyles: _style.default,
                isPrimary: choice.isPrimary
              }, choice.id);
            })
          })
        })]
      })
    })
  });
};
PopupHeader.propTypes = {
  colors: _propTypes.default.object.isRequired,
  totalWordsLearned: _propTypes.default.number.isRequired,
  localStyles: _propTypes.default.object.isRequired
};
UniformChoice.propTypes = {
  choice: _propTypes.default.shape({
    id: _propTypes.default.string.isRequired,
    iconName: _propTypes.default.string.isRequired,
    label: _propTypes.default.string.isRequired,
    subtitle: _propTypes.default.string,
    color: _propTypes.default.string.isRequired,
    isPrimary: _propTypes.default.bool
  }).isRequired,
  onPress: _propTypes.default.func.isRequired,
  localStyles: _propTypes.default.object.isRequired,
  isPrimary: _propTypes.default.bool
};
RevisionPopup.propTypes = {
  visible: _propTypes.default.bool,
  totalWordsLearned: _propTypes.default.number,
  questionsCount: _propTypes.default.number,
  onChoice: _propTypes.default.func,
  onDismiss: _propTypes.default.func
};
var _default = exports.default = RevisionPopup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmUiLCJfdmVjdG9ySWNvbnMiLCJfcHJvcFR5cGVzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9UaGVtZUNvbnRleHQiLCJfc3R5bGUiLCJfanN4UnVudGltZSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiUG9wdXBIZWFkZXIiLCJfcmVmIiwiY29sb3JzIiwidG90YWxXb3Jkc0xlYXJuZWQiLCJsb2NhbFN0eWxlcyIsImpzeHMiLCJWaWV3Iiwic3R5bGUiLCJoZWFkZXIiLCJjaGlsZHJlbiIsImpzeCIsIlRleHQiLCJjZWxlYnJhdGlvbiIsIm1haW5UaXRsZSIsImNvbG9yIiwidGV4dCIsIndvcmRzQ291bnRlciIsInRleHRTZWNvbmRhcnkiLCJPUEFDSVRZX0xFVkVMUyIsIm5vcm1hbCIsInByaW1hcnkiLCJwcmltYXJ5Qm9yZGVyIiwiVW5pZm9ybUNob2ljZSIsIlJlYWN0IiwibWVtbyIsIl9yZWYyIiwiY2hvaWNlIiwib25QcmVzcyIsIl9yZWYyJGlzUHJpbWFyeSIsImlzUHJpbWFyeSIsInByaW1hcnlTdWJ0aXRsZVN0eWxlIiwidXNlTWVtbyIsImZvbnRXZWlnaHQiLCJUb3VjaGFibGVPcGFjaXR5IiwiY2hvaWNlQnV0dG9uIiwicHJpbWFyeUNob2ljZU1vZGlmaWVyIiwiYWN0aXZlT3BhY2l0eSIsImNob2ljZUljb25Db250YWluZXIiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJXaWR0aCIsImJvcmRlckNvbG9yIiwiSW9uaWNvbnMiLCJuYW1lIiwiaWNvbk5hbWUiLCJzaXplIiwiY2hvaWNlVGV4dENvbnRhaW5lciIsImNob2ljZUxhYmVsIiwicHJpbWFyeUNob2ljZUxhYmVsIiwibGFiZWwiLCJzdWJ0aXRsZSIsImNob2ljZVN1YnRpdGxlIiwiUmV2aXNpb25Qb3B1cCIsIl9yZWYzIiwiX3JlZjMkdmlzaWJsZSIsInZpc2libGUiLCJfcmVmMyR0b3RhbFdvcmRzTGVhcm4iLCJfcmVmMyRxdWVzdGlvbnNDb3VudCIsInF1ZXN0aW9uc0NvdW50Iiwib25DaG9pY2UiLCJvbkRpc21pc3MiLCJ0aGVtZUNvbnRleHQiLCJ1c2VDb250ZXh0IiwiVGhlbWVDb250ZXh0Iiwic3VyZmFjZSIsImFjY2VudCIsIndhcm5pbmciLCJzY2FsZUFuaW0iLCJ1c2VSZWYiLCJBbmltYXRlZCIsIlZhbHVlIiwiY3VycmVudCIsIm9wYWNpdHlBbmltIiwidXNlRWZmZWN0IiwicGFyYWxsZWwiLCJzcHJpbmciLCJ0b1ZhbHVlIiwiZnJpY3Rpb24iLCJ0ZW5zaW9uIiwidXNlTmF0aXZlRHJpdmVyIiwidGltaW5nIiwiZHVyYXRpb24iLCJzdGFydCIsInNldFZhbHVlIiwiYWxsQ2hvaWNlcyIsImlkIiwiaGFuZGxlQ2hvaWNlUHJlc3MiLCJ1c2VDYWxsYmFjayIsImFuaW1hdGVkQ29udGFpbmVyU3R5bGUiLCJvcGFjaXR5IiwidHJhbnNmb3JtIiwic2NhbGUiLCJNb2RhbCIsInRyYW5zcGFyZW50IiwiYW5pbWF0aW9uVHlwZSIsIm9uUmVxdWVzdENsb3NlIiwic3R5bGVzIiwib3ZlcmxheSIsInBvcHVwQ29udGFpbmVyIiwiYm9keSIsImNob2ljZXNDb250YWluZXIiLCJtYXAiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJvYmplY3QiLCJpc1JlcXVpcmVkIiwibnVtYmVyIiwic2hhcGUiLCJzdHJpbmciLCJib29sIiwiZnVuYyIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFZpZXcsIFRleHQsIFRvdWNoYWJsZU9wYWNpdHksIE1vZGFsLCBBbmltYXRlZCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCB7IElvbmljb25zIH0gZnJvbSAnQGV4cG8vdmVjdG9yLWljb25zJztcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuaW1wb3J0IHsgVGhlbWVDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29udGV4dHMvVGhlbWVDb250ZXh0JztcclxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlJztcclxuXHJcbi8vIFNvdXMtY29tcG9zYW50IFBvcHVwSGVhZGVyXHJcbmNvbnN0IFBvcHVwSGVhZGVyID0gKHsgY29sb3JzLCB0b3RhbFdvcmRzTGVhcm5lZCwgbG9jYWxTdHlsZXMgfSkgPT4gKFxyXG4gIDxWaWV3IHN0eWxlPXtsb2NhbFN0eWxlcy5oZWFkZXJ9PlxyXG4gICAgPFRleHQgc3R5bGU9e2xvY2FsU3R5bGVzLmNlbGVicmF0aW9ufT7wn4+GPC9UZXh0PlxyXG4gICAgPFRleHQgc3R5bGU9e1tsb2NhbFN0eWxlcy5tYWluVGl0bGUsIHsgY29sb3I6IGNvbG9ycy50ZXh0IH1dfT5QcsOqdCBwb3VyIHVuZSByw6l2aXNpb24gPzwvVGV4dD5cclxuICAgIDxUZXh0IHN0eWxlPXtbbG9jYWxTdHlsZXMud29yZHNDb3VudGVyLCB7IGNvbG9yOiBjb2xvcnMudGV4dFNlY29uZGFyeSB9XX0+XHJcbiAgICAgIFZvdXMgYXZleiBhcHByaXMge3RvdGFsV29yZHNMZWFybmVkfSBtb3RzICFcclxuICAgIDwvVGV4dD5cclxuICA8L1ZpZXc+XHJcbik7XHJcblxyXG4vLyBDb21wb3NhbnQgY2hvaXggdW5pZm9ybWVcclxuY29uc3QgT1BBQ0lUWV9MRVZFTFMgPSB7XHJcbiAgbm9ybWFsOiAnMjAnLFxyXG4gIHByaW1hcnk6ICczMCcsXHJcbiAgcHJpbWFyeUJvcmRlcjogJzQwJyxcclxufTtcclxuXHJcbmNvbnN0IFVuaWZvcm1DaG9pY2UgPSBSZWFjdC5tZW1vKCh7IGNob2ljZSwgb25QcmVzcywgbG9jYWxTdHlsZXMsIGlzUHJpbWFyeSA9IGZhbHNlIH0pID0+IHtcclxuICBjb25zdCBwcmltYXJ5U3VidGl0bGVTdHlsZSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcclxuICAgIGNvbG9yOiAnIzA0Nzg1NycsXHJcbiAgICBmb250V2VpZ2h0OiAnNjAwJ1xyXG4gIH0pLCBbXSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8VG91Y2hhYmxlT3BhY2l0eVxyXG4gICAgICBzdHlsZT17W1xyXG4gICAgICAgIGxvY2FsU3R5bGVzLmNob2ljZUJ1dHRvbixcclxuICAgICAgICBpc1ByaW1hcnkgJiYgbG9jYWxTdHlsZXMucHJpbWFyeUNob2ljZU1vZGlmaWVyLFxyXG4gICAgICBdfVxyXG4gICAgICBvblByZXNzPXtvblByZXNzfVxyXG4gICAgICBhY3RpdmVPcGFjaXR5PXswLjd9XHJcbiAgICA+XHJcbiAgICAgIDxWaWV3IHN0eWxlPXtbXHJcbiAgICAgICAgbG9jYWxTdHlsZXMuY2hvaWNlSWNvbkNvbnRhaW5lcixcclxuICAgICAgICB7IGJhY2tncm91bmRDb2xvcjogY2hvaWNlLmNvbG9yICsgT1BBQ0lUWV9MRVZFTFMubm9ybWFsIH0sXHJcbiAgICAgICAgaXNQcmltYXJ5ICYmIHtcclxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogY2hvaWNlLmNvbG9yICsgT1BBQ0lUWV9MRVZFTFMucHJpbWFyeSxcclxuICAgICAgICAgIGJvcmRlcldpZHRoOiAxLFxyXG4gICAgICAgICAgYm9yZGVyQ29sb3I6IGNob2ljZS5jb2xvciArIE9QQUNJVFlfTEVWRUxTLnByaW1hcnlCb3JkZXIsXHJcbiAgICAgICAgfVxyXG4gICAgICBdfT5cclxuICAgICAgICA8SW9uaWNvbnNcclxuICAgICAgICAgIG5hbWU9e2Nob2ljZS5pY29uTmFtZX1cclxuICAgICAgICAgIHNpemU9e2lzUHJpbWFyeSA/IDIyIDogMjB9XHJcbiAgICAgICAgICBjb2xvcj17Y2hvaWNlLmNvbG9yfVxyXG4gICAgICAgIC8+XHJcbiAgICAgIDwvVmlldz5cclxuICAgICAgPFZpZXcgc3R5bGU9e2xvY2FsU3R5bGVzLmNob2ljZVRleHRDb250YWluZXJ9PlxyXG4gICAgICAgIDxUZXh0IHN0eWxlPXtbXHJcbiAgICAgICAgICBsb2NhbFN0eWxlcy5jaG9pY2VMYWJlbCxcclxuICAgICAgICAgIGlzUHJpbWFyeSAmJiBsb2NhbFN0eWxlcy5wcmltYXJ5Q2hvaWNlTGFiZWxcclxuICAgICAgICBdfT5cclxuICAgICAgICAgIHtjaG9pY2UubGFiZWx9XHJcbiAgICAgICAgICB7aXNQcmltYXJ5ICYmICcg4pqhJ31cclxuICAgICAgICA8L1RleHQ+XHJcbiAgICAgICAge2Nob2ljZS5zdWJ0aXRsZSAmJiAoXHJcbiAgICAgICAgICA8VGV4dCBzdHlsZT17W1xyXG4gICAgICAgICAgICBsb2NhbFN0eWxlcy5jaG9pY2VTdWJ0aXRsZSxcclxuICAgICAgICAgICAgaXNQcmltYXJ5ICYmIHByaW1hcnlTdWJ0aXRsZVN0eWxlXHJcbiAgICAgICAgICBdfT5cclxuICAgICAgICAgICAge2Nob2ljZS5zdWJ0aXRsZX1cclxuICAgICAgICAgIDwvVGV4dD5cclxuICAgICAgICApfVxyXG4gICAgICA8L1ZpZXc+XHJcbiAgICA8L1RvdWNoYWJsZU9wYWNpdHk+XHJcbiAgKTtcclxufSk7XHJcblxyXG5jb25zdCBSZXZpc2lvblBvcHVwID0gKHtcclxuICB2aXNpYmxlID0gZmFsc2UsXHJcbiAgdG90YWxXb3Jkc0xlYXJuZWQgPSA1MCxcclxuICBxdWVzdGlvbnNDb3VudCA9IDEwLFxyXG4gIG9uQ2hvaWNlLFxyXG4gIG9uRGlzbWlzcyxcclxufSkgPT4ge1xyXG4gIGNvbnN0IHRoZW1lQ29udGV4dCA9IHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcclxuICBjb25zdCBjb2xvcnMgPSB0aGVtZUNvbnRleHQ/LmNvbG9ycyB8fCB7XHJcbiAgICBzdXJmYWNlOiBcIiNGRkZGRkZcIixcclxuICAgIHRleHQ6IFwiIzFGMjkzN1wiLFxyXG4gICAgdGV4dFNlY29uZGFyeTogXCIjNkI3MjgwXCIsXHJcbiAgICBwcmltYXJ5OiBcIiMxMEI5ODFcIixcclxuICAgIGFjY2VudDogXCIjM0I4MkY2XCIsXHJcbiAgICB3YXJuaW5nOiBcIiNGNTlFMEJcIixcclxuICB9O1xyXG5cclxuICBjb25zdCBzY2FsZUFuaW0gPSB1c2VSZWYobmV3IEFuaW1hdGVkLlZhbHVlKDAuOTUpKS5jdXJyZW50O1xyXG4gIGNvbnN0IG9wYWNpdHlBbmltID0gdXNlUmVmKG5ldyBBbmltYXRlZC5WYWx1ZSgwKSkuY3VycmVudDtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmICh2aXNpYmxlKSB7XHJcbiAgICAgIEFuaW1hdGVkLnBhcmFsbGVsKFtcclxuICAgICAgICBBbmltYXRlZC5zcHJpbmcoc2NhbGVBbmltLCB7XHJcbiAgICAgICAgICB0b1ZhbHVlOiAxLFxyXG4gICAgICAgICAgZnJpY3Rpb246IDcsXHJcbiAgICAgICAgICB0ZW5zaW9uOiA0MCxcclxuICAgICAgICAgIHVzZU5hdGl2ZURyaXZlcjogdHJ1ZSxcclxuICAgICAgICB9KSxcclxuICAgICAgICBBbmltYXRlZC50aW1pbmcob3BhY2l0eUFuaW0sIHtcclxuICAgICAgICAgIHRvVmFsdWU6IDEsXHJcbiAgICAgICAgICBkdXJhdGlvbjogMjAwLFxyXG4gICAgICAgICAgdXNlTmF0aXZlRHJpdmVyOiB0cnVlLFxyXG4gICAgICAgIH0pLFxyXG4gICAgICBdKS5zdGFydCgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc2NhbGVBbmltLnNldFZhbHVlKDAuOTUpO1xyXG4gICAgICBvcGFjaXR5QW5pbS5zZXRWYWx1ZSgwKTtcclxuICAgIH1cclxuICB9LCBbdmlzaWJsZSwgc2NhbGVBbmltLCBvcGFjaXR5QW5pbV0pO1xyXG5cclxuICAvLyBMaXN0ZSBkZXMgY2hvaXggaG9ycyBkdSB1c2VFZmZlY3QgIVxyXG4gIGNvbnN0IGFsbENob2ljZXMgPSBbXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnbm93JyxcclxuICAgICAgaWNvbk5hbWU6ICdmbGFzaC1vdXRsaW5lJyxcclxuICAgICAgbGFiZWw6IGBSw6l2aXNlciAoJHtxdWVzdGlvbnNDb3VudH0gcXVlc3Rpb25zKWAsXHJcbiAgICAgIHN1YnRpdGxlOiAnVGVzdGV6IHZvcyBjb25uYWlzc2FuY2VzIG1haW50ZW5hbnQnLFxyXG4gICAgICBjb2xvcjogY29sb3JzLnByaW1hcnksXHJcbiAgICAgIGlzUHJpbWFyeTogdHJ1ZSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnbGF0ZXJfNTAnLFxyXG4gICAgICBpY29uTmFtZTogJ3RpbWUtb3V0bGluZScsXHJcbiAgICAgIGxhYmVsOiAnUGx1cyB0YXJkICg1MCBtb3RzKScsXHJcbiAgICAgIHN1YnRpdGxlOiBgUHJvY2hhaW5lIHLDqXZpc2lvbiDDoCAke3RvdGFsV29yZHNMZWFybmVkICsgNTB9IG1vdHNgLFxyXG4gICAgICBjb2xvcjogY29sb3JzLmFjY2VudCxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnbGF0ZXJfMTAwJyxcclxuICAgICAgaWNvbk5hbWU6ICdob3VyZ2xhc3Mtb3V0bGluZScsXHJcbiAgICAgIGxhYmVsOiAnUGx1cyB0YXJkICgxMDAgbW90cyknLFxyXG4gICAgICBzdWJ0aXRsZTogYFByb2NoYWluZSByw6l2aXNpb24gw6AgJHt0b3RhbFdvcmRzTGVhcm5lZCArIDEwMH0gbW90c2AsXHJcbiAgICAgIGNvbG9yOiBjb2xvcnMud2FybmluZyxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnZGlzYWJsZScsXHJcbiAgICAgIGljb25OYW1lOiAnY2xvc2UtY2lyY2xlLW91dGxpbmUnLFxyXG4gICAgICBsYWJlbDogJ0TDqXNhY3RpdmVyJyxcclxuICAgICAgc3VidGl0bGU6ICdWb3VzIHBvdXJyZXogcsOpYWN0aXZlciB2aWEgbGVzIHBhcmFtw6h0cmVzJyxcclxuICAgICAgY29sb3I6ICcjNkI3MjgwJyxcclxuICAgIH0sXHJcbiAgXTtcclxuXHJcbiAgLy8gQ2FsbGJhY2sgcG91ciBnw6lyZXIgbGEgc8OpbGVjdGlvblxyXG4gIGNvbnN0IGhhbmRsZUNob2ljZVByZXNzID0gdXNlQ2FsbGJhY2soKGlkKSA9PiAoKSA9PiB7XHJcbiAgICBpZiAob25DaG9pY2UpIG9uQ2hvaWNlKGlkKTtcclxuICB9LCBbb25DaG9pY2VdKTtcclxuXHJcbiAgY29uc3QgYW5pbWF0ZWRDb250YWluZXJTdHlsZSA9IHtcclxuICAgIG9wYWNpdHk6IG9wYWNpdHlBbmltLFxyXG4gICAgdHJhbnNmb3JtOiBbeyBzY2FsZTogc2NhbGVBbmltIH1dLFxyXG4gIH07XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8TW9kYWxcclxuICAgICAgdHJhbnNwYXJlbnRcclxuICAgICAgdmlzaWJsZT17dmlzaWJsZX1cclxuICAgICAgYW5pbWF0aW9uVHlwZT1cImZhZGVcIlxyXG4gICAgICBvblJlcXVlc3RDbG9zZT17b25EaXNtaXNzfVxyXG4gICAgPlxyXG4gICAgICA8VmlldyBzdHlsZT17c3R5bGVzLm92ZXJsYXl9PlxyXG4gICAgICAgIDxBbmltYXRlZC5WaWV3IHN0eWxlPXtbc3R5bGVzLnBvcHVwQ29udGFpbmVyLCBhbmltYXRlZENvbnRhaW5lclN0eWxlXX0+XHJcbiAgICAgICAgICA8UG9wdXBIZWFkZXJcclxuICAgICAgICAgICAgY29sb3JzPXtjb2xvcnN9XHJcbiAgICAgICAgICAgIHRvdGFsV29yZHNMZWFybmVkPXt0b3RhbFdvcmRzTGVhcm5lZH1cclxuICAgICAgICAgICAgbG9jYWxTdHlsZXM9e3N0eWxlc31cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmJvZHl9PlxyXG4gICAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmNob2ljZXNDb250YWluZXJ9PlxyXG4gICAgICAgICAgICAgIHthbGxDaG9pY2VzLm1hcCgoY2hvaWNlKSA9PiAoXHJcbiAgICAgICAgICAgICAgICA8VW5pZm9ybUNob2ljZVxyXG4gICAgICAgICAgICAgICAgICBrZXk9e2Nob2ljZS5pZH1cclxuICAgICAgICAgICAgICAgICAgY2hvaWNlPXtjaG9pY2V9XHJcbiAgICAgICAgICAgICAgICAgIG9uUHJlc3M9e2hhbmRsZUNob2ljZVByZXNzKGNob2ljZS5pZCl9XHJcbiAgICAgICAgICAgICAgICAgIGxvY2FsU3R5bGVzPXtzdHlsZXN9XHJcbiAgICAgICAgICAgICAgICAgIGlzUHJpbWFyeT17Y2hvaWNlLmlzUHJpbWFyeX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgICAgIDwvVmlldz5cclxuICAgICAgICAgIDwvVmlldz5cclxuICAgICAgICA8L0FuaW1hdGVkLlZpZXc+XHJcbiAgICAgIDwvVmlldz5cclxuICAgIDwvTW9kYWw+XHJcbiAgKTtcclxufTtcclxuXHJcbi8vIFByb3BUeXBlcyBwb3VyIFBvcHVwSGVhZGVyXHJcblBvcHVwSGVhZGVyLnByb3BUeXBlcyA9IHtcclxuICBjb2xvcnM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcclxuICB0b3RhbFdvcmRzTGVhcm5lZDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxyXG4gIGxvY2FsU3R5bGVzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXHJcbn07XHJcblxyXG4vLyBQcm9wVHlwZXMgcG91ciBVbmlmb3JtQ2hvaWNlXHJcblVuaWZvcm1DaG9pY2UucHJvcFR5cGVzID0ge1xyXG4gIGNob2ljZTogUHJvcFR5cGVzLnNoYXBlKHtcclxuICAgIGlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXHJcbiAgICBpY29uTmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxyXG4gICAgbGFiZWw6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcclxuICAgIHN1YnRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gICAgY29sb3I6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcclxuICAgIGlzUHJpbWFyeTogUHJvcFR5cGVzLmJvb2wsXHJcbiAgfSkuaXNSZXF1aXJlZCxcclxuICBvblByZXNzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG4gIGxvY2FsU3R5bGVzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXHJcbiAgaXNQcmltYXJ5OiBQcm9wVHlwZXMuYm9vbCxcclxufTtcclxuXHJcbi8vIFByb3BUeXBlcyBwb3VyIGxlIGNvbXBvc2FudCBwcmluY2lwYWwgUmV2aXNpb25Qb3B1cFxyXG5SZXZpc2lvblBvcHVwLnByb3BUeXBlcyA9IHtcclxuICB2aXNpYmxlOiBQcm9wVHlwZXMuYm9vbCxcclxuICB0b3RhbFdvcmRzTGVhcm5lZDogUHJvcFR5cGVzLm51bWJlcixcclxuICBxdWVzdGlvbnNDb3VudDogUHJvcFR5cGVzLm51bWJlcixcclxuICBvbkNob2ljZTogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgb25EaXNtaXNzOiBQcm9wVHlwZXMuZnVuYyxcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJldmlzaW9uUG9wdXA7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxZQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxVQUFBLEdBQUFDLHNCQUFBLENBQUFKLE9BQUE7QUFDQSxJQUFBSyxhQUFBLEdBQUFMLE9BQUE7QUFDQSxJQUFBTSxNQUFBLEdBQUFGLHNCQUFBLENBQUFKLE9BQUE7QUFBNkIsSUFBQU8sV0FBQSxHQUFBUCxPQUFBO0FBQUEsU0FBQUQsd0JBQUFTLENBQUEsRUFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9B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