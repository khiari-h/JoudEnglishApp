27eedfdd806798770f2376f4b8417cdf
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  return Object.assign({}, RN, {
    ActivityIndicator: mockActivityIndicator
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ButtonSpinner = _interopRequireDefault(require("../../../../src/components/ui/Button/ButtonSpinner"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockActivityIndicator = jest.fn().mockReturnValue(null);
describe('ButtonSpinner', function () {
  beforeEach(function () {
    mockActivityIndicator.mockClear();
  });
  it('devrait rendre un ActivityIndicator avec les props size et color', function () {
    var mockSize = 'large';
    var mockColor = '#FF0000';
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ButtonSpinner.default, {
      size: mockSize,
      color: mockColor
    }));
    expect(mockActivityIndicator).toHaveBeenCalledTimes(1);
    expect(mockActivityIndicator).toHaveBeenCalledWith(expect.objectContaining({
      testID: 'button-loader',
      size: mockSize,
      color: mockColor
    }), {});
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJSTiIsImplc3QiLCJyZXF1aXJlQWN0dWFsIiwiT2JqZWN0IiwiYXNzaWduIiwiQWN0aXZpdHlJbmRpY2F0b3IiLCJtb2NrQWN0aXZpdHlJbmRpY2F0b3IiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9CdXR0b25TcGlubmVyIiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsImZuIiwibW9ja1JldHVyblZhbHVlIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwibW9ja0NsZWFyIiwiaXQiLCJtb2NrU2l6ZSIsIm1vY2tDb2xvciIsInJlbmRlciIsImpzeCIsImRlZmF1bHQiLCJzaXplIiwiY29sb3IiLCJleHBlY3QiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsIm9iamVjdENvbnRhaW5pbmciLCJ0ZXN0SUQiXSwic291cmNlcyI6WyJCdXR0b25TcGlubmVyLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgQnV0dG9uU3Bpbm5lciBmcm9tICcuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy91aS9CdXR0b24vQnV0dG9uU3Bpbm5lcic7XHJcblxyXG4vLyBNb2NrIEFjdGl2aXR5SW5kaWNhdG9yIGF2ZWMgdW5lIGFwcHJvY2hlIGRpZmbDqXJlbnRlXHJcbmNvbnN0IG1vY2tBY3Rpdml0eUluZGljYXRvciA9IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUobnVsbCk7XHJcblxyXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZScsICgpID0+IHtcclxuICBjb25zdCBSTiA9IGplc3QucmVxdWlyZUFjdHVhbCgncmVhY3QtbmF0aXZlJyk7XHJcbiAgcmV0dXJuIHtcclxuICAgIC4uLlJOLFxyXG4gICAgQWN0aXZpdHlJbmRpY2F0b3I6IG1vY2tBY3Rpdml0eUluZGljYXRvcixcclxuICB9O1xyXG59KTtcclxuXHJcbmRlc2NyaWJlKCdCdXR0b25TcGlubmVyJywgKCkgPT4ge1xyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgLy8gTmV0dG95ZXIgbGVzIGFwcGVscyBwcsOpY8OpZGVudHNcclxuICAgIG1vY2tBY3Rpdml0eUluZGljYXRvci5tb2NrQ2xlYXIoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ2RldnJhaXQgcmVuZHJlIHVuIEFjdGl2aXR5SW5kaWNhdG9yIGF2ZWMgbGVzIHByb3BzIHNpemUgZXQgY29sb3InLCAoKSA9PiB7XHJcbiAgICBjb25zdCBtb2NrU2l6ZSA9ICdsYXJnZSc7XHJcbiAgICBjb25zdCBtb2NrQ29sb3IgPSAnI0ZGMDAwMCc7XHJcbiAgICBcclxuICAgIHJlbmRlcig8QnV0dG9uU3Bpbm5lciBzaXplPXttb2NrU2l6ZX0gY29sb3I9e21vY2tDb2xvcn0gLz4pO1xyXG4gICAgXHJcbiAgICBleHBlY3QobW9ja0FjdGl2aXR5SW5kaWNhdG9yKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XHJcbiAgICBleHBlY3QobW9ja0FjdGl2aXR5SW5kaWNhdG9yKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcclxuICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xyXG4gICAgICAgIHRlc3RJRDogJ2J1dHRvbi1sb2FkZXInLFxyXG4gICAgICAgIHNpemU6IG1vY2tTaXplLFxyXG4gICAgICAgIGNvbG9yOiBtb2NrQ29sb3IsXHJcbiAgICAgIH0pLFxyXG4gICAgICB7fVxyXG4gICAgKTtcclxuICB9KTtcclxufSk7Il0sIm1hcHBpbmdzIjoiQUFPQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsY0FBYyxFQUFFLFlBQU07RUFDOUIsSUFBTUMsRUFBRSxHQUFHQyxJQUFJLENBQUNDLGFBQWEsQ0FBQyxjQUFjLENBQUM7RUFDN0MsT0FBQUMsTUFBQSxDQUFBQyxNQUFBLEtBQ0tKLEVBQUU7SUFDTEssaUJBQWlCLEVBQUVDO0VBQXFCO0FBRTVDLENBQUMsQ0FBQztBQUFDLElBQUFDLHNCQUFBLEdBQUFDLE9BQUE7QUFiSCxJQUFBQyxNQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxZQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxjQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFBK0UsSUFBQUksV0FBQSxHQUFBSixPQUFBO0FBQUEsU0FBQVYsWUFBQTtFQUFBLElBQUFlLFFBQUEsR0FBQUwsT0FBQTtJQUFBUCxJQUFBLEdBQUFZLFFBQUEsQ0FBQVosSUFBQTtFQUFBSCxXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBRyxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFHL0UsSUFBTUsscUJBQXFCLEdBQUdMLElBQUksQ0FBQ2EsRUFBRSxDQUFDLENBQUMsQ0FBQ0MsZUFBZSxDQUFDLElBQUksQ0FBQztBQVU3REMsUUFBUSxDQUFDLGVBQWUsRUFBRSxZQUFNO0VBQzlCQyxVQUFVLENBQUMsWUFBTTtJQUVmWCxxQkFBcUIsQ0FBQ1ksU0FBUyxDQUFDLENBQUM7RUFDbkMsQ0FBQyxDQUFDO0VBRUZDLEVBQUUsQ0FBQyxrRUFBa0UsRUFBRSxZQUFNO0lBQzNFLElBQU1DLFFBQVEsR0FBRyxPQUFPO0lBQ3hCLElBQU1DLFNBQVMsR0FBRyxTQUFTO0lBRTNCLElBQUFDLG1CQUFNLEVBQUMsSUFBQVYsV0FBQSxDQUFBVyxHQUFBLEVBQUNaLGNBQUEsQ0FBQWEsT0FBYTtNQUFDQyxJQUFJLEVBQUVMLFFBQVM7TUFBQ00sS0FBSyxFQUFFTDtJQUFVLENBQUUsQ0FBQyxDQUFDO0lBRTNETSxNQUFNLENBQUNyQixxQkFBcUIsQ0FBQyxDQUFDc0IscUJBQXFCLENBQUMsQ0FBQyxDQUFDO0lBQ3RERCxNQUFNLENBQUNyQixxQkFBcUIsQ0FBQyxDQUFDdUIsb0JBQW9CLENBQ2hERixNQUFNLENBQUNHLGdCQUFnQixDQUFDO01BQ3RCQyxNQUFNLEVBQUUsZUFBZTtNQUN2Qk4sSUFBSSxFQUFFTCxRQUFRO01BQ2RNLEtBQUssRUFBRUw7SUFDVCxDQUFDLENBQUMsRUFDRixDQUFDLENBQ0gsQ0FBQztFQUNILENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==