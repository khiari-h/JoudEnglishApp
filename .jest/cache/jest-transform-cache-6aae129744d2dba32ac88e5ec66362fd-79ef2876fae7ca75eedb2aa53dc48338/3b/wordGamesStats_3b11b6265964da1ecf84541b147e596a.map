{"version":3,"names":["calculateTotalGames","wordGamesData","arguments","length","undefined","cov_162pk2gliw","b","f","games","s","calculateCompletedGamesCount","completedGames","Object","values","filter","game","completed","calculateTotalScore","gameResults","reduce","total","result","score","calculateMaxPossibleScore","maxScore","calculateTotalProgress","totalGames","completedCount","Math","min","calculateCurrentProgress","currentGameIndex","calculateGameTypeProgress","gamesByType","acc","index","type","indices","push","entries","map","_ref","_ref2","_slicedToArray","data","totalInType","completedInType","_completedGames$index","progress","title","charAt","toUpperCase","slice","round","calculateFinalScore","totalScore","totalMaxScore","sum","percentage","getPerformanceLevel","level","color","message","description","calculateGameTypeStats","statsByType","forEach","gamesCount","stat","assign","completion","calculateCompleteStats","completedGamesCount","totalProgress","currentProgress","finalScore","performance","gameTypeProgress","gameTypeStats","completionRate","averageScore","generateFeedbackMessage","bestType","best","current","worstType","worst","trim"],"sources":["wordGamesStats.js"],"sourcesContent":["// utils/wordGames/wordGamesStats.js\n\n/**\n * 📊 Fonctions utilitaires pour les statistiques de Word Games\n * Pattern identique à vocabularyStats.js et assessmentStats.js\n */\n\n// =================== CALCULS DE BASE ===================\n\n/**\n * Calcule le nombre total de jeux\n */\nexport const calculateTotalGames = (wordGamesData = {}) => {\n  const games = wordGamesData.games || [];\n  return games.length;\n};\n\n/**\n * Calcule le nombre de jeux complétés\n */\nexport const calculateCompletedGamesCount = (completedGames = {}) =>\n  Object.values(completedGames).filter(game => game.completed).length;\n\n/**\n * Calcule le score total obtenu\n */\nexport const calculateTotalScore = (gameResults = []) =>\n  gameResults.reduce((total, result) => total + (result.score || 0), 0);\n\n/**\n * Calcule le score maximum possible\n */\nexport const calculateMaxPossibleScore = (wordGamesData = {}) => {\n  const games = wordGamesData.games || [];\n  return games.reduce((total, game) => total + (game.maxScore || 10), 0);\n};\n\n// =================== CALCULS DE PROGRESSION ===================\n\n/**\n * Calcule la progression totale (pourcentage de jeux complétés)\n */\nexport const calculateTotalProgress = (wordGamesData = {}, completedGames = {}) => {\n  const totalGames = calculateTotalGames(wordGamesData);\n  const completedCount = calculateCompletedGamesCount(completedGames);\n  return totalGames > 0 ? Math.min(100, (completedCount / totalGames) * 100) : 0;\n};\n\n/**\n * Calcule la progression actuelle (basée sur le jeu en cours)\n */\nexport const calculateCurrentProgress = (currentGameIndex = 0, totalGames = 0) => {\n  return totalGames > 0 ? ((currentGameIndex + 1) / totalGames) * 100 : 0;\n};\n\n/**\n * Calcule la progression par type de jeu pour l'expansion ProgressCard\n */\nexport const calculateGameTypeProgress = (wordGamesData = {}, completedGames = {}) => {\n  const games = wordGamesData.games || [];\n  \n  // Grouper par type de jeu\n  const gamesByType = games.reduce((acc, game, index) => {\n    const type = game.type || 'unknown';\n    if (!acc[type]) {\n      acc[type] = { games: [], indices: [] };\n    }\n    acc[type].games.push(game);\n    acc[type].indices.push(index);\n    return acc;\n  }, {});\n\n  // Calculer la progression par type\n  return Object.entries(gamesByType).map(([type, data]) => {\n    const totalInType = data.games.length;\n    const completedInType = data.indices.filter(index => \n      completedGames[index]?.completed\n    ).length;\n    const progress = totalInType > 0 ? (completedInType / totalInType) * 100 : 0;\n\n    return {\n      title: type.charAt(0).toUpperCase() + type.slice(1), // Capitalize\n      totalGames: totalInType,\n      completedGames: completedInType,\n      progress: Math.round(progress)\n    };\n  });\n};\n\n// =================== CALCULS DE SCORE ===================\n\n/**\n * Calcule le score et pourcentage final\n */\nexport const calculateFinalScore = (gameResults = []) => {\n  const totalScore = calculateTotalScore(gameResults);\n  const totalMaxScore = gameResults.reduce((sum, result) => sum + (result.maxScore || 0), 0);\n  \n  return {\n    score: totalScore,\n    maxScore: totalMaxScore,\n    percentage: totalMaxScore > 0 ? (totalScore / totalMaxScore) * 100 : 0\n  };\n};\n\n/**\n * Détermine le niveau de performance basé sur le pourcentage\n */\nexport const getPerformanceLevel = (percentage) => {\n  if (percentage >= 90) return { \n    level: 'perfect', \n    color: '#059669', \n    message: '🏆 Perfect! Outstanding word skills!',\n    description: 'You absolutely nailed it!'\n  };\n  if (percentage >= 80) return { \n    level: 'excellent', \n    color: '#16a34a', \n    message: '🌟 Excellent! Great word mastery!',\n    description: 'You have excellent vocabulary skills!'\n  };\n  if (percentage >= 70) return { \n    level: 'good', \n    color: '#65a30d', \n    message: '👍 Good job! Solid performance!',\n    description: 'Keep up the good work!'\n  };\n  if (percentage >= 60) return { \n    level: 'fair', \n    color: '#ea580c', \n    message: '👌 Not bad! Room for improvement!',\n    description: 'Practice makes perfect!'\n  };\n  if (percentage >= 40) return { \n    level: 'needs_work', \n    color: '#dc2626', \n    message: '📚 Keep practicing!',\n    description: 'Focus on building your vocabulary!'\n  };\n  return { \n    level: 'poor', \n    color: '#b91c1c', \n    message: '💪 Don\\'t give up!',\n    description: 'Everyone starts somewhere. Keep going!'\n  };\n};\n\n/**\n * Calcule les statistiques par type de jeu\n */\nexport const calculateGameTypeStats = (wordGamesData = {}, gameResults = []) => {\n  const games = wordGamesData.games || [];\n  \n  // Grouper les résultats par type\n  const statsByType = {};\n  \n  games.forEach((game, index) => {\n    const type = game.type || 'unknown';\n    const result = gameResults[index] || { score: 0, maxScore: 0 };\n    \n    if (!statsByType[type]) {\n      statsByType[type] = {\n        type,\n        totalScore: 0,\n        totalMaxScore: 0,\n        gamesCount: 0,\n        completedCount: 0\n      };\n    }\n    \n    statsByType[type].totalScore += result.score;\n    statsByType[type].totalMaxScore += result.maxScore;\n    statsByType[type].gamesCount += 1;\n    if (result.completed) {\n      statsByType[type].completedCount += 1;\n    }\n  });\n  \n  // Calculer les pourcentages\n  return Object.values(statsByType).map(stat => ({\n    ...stat,\n    percentage: stat.totalMaxScore > 0 ? (stat.totalScore / stat.totalMaxScore) * 100 : 0,\n    completion: stat.gamesCount > 0 ? (stat.completedCount / stat.gamesCount) * 100 : 0\n  }));\n};\n\n/**\n * Calcule les statistiques complètes pour l'affichage\n */\nexport const calculateCompleteStats = (wordGamesData = {}, gameResults = [], completedGames = {}, currentGameIndex = 0) => {\n  const totalGames = calculateTotalGames(wordGamesData);\n  const completedGamesCount = calculateCompletedGamesCount(completedGames);\n  const totalProgress = calculateTotalProgress(wordGamesData, completedGames);\n  const currentProgress = calculateCurrentProgress(currentGameIndex, totalGames);\n  const finalScore = calculateFinalScore(gameResults);\n  const performance = getPerformanceLevel(finalScore.percentage);\n  const gameTypeProgress = calculateGameTypeProgress(wordGamesData, completedGames);\n  const gameTypeStats = calculateGameTypeStats(wordGamesData, gameResults);\n\n  return {\n    // Statistiques globales\n    totalGames,\n    completedGamesCount,\n    totalProgress,\n    currentProgress,\n    \n    // Score\n    finalScore,\n    performance,\n    \n    // Données par type de jeu\n    gameTypeProgress,\n    gameTypeStats,\n    \n    // Ratios\n    completionRate: totalGames > 0 ? (completedGamesCount / totalGames) * 100 : 0,\n    averageScore: completedGamesCount > 0 ? finalScore.score / completedGamesCount : 0\n  };\n};\n\n/**\n * Génère un message de feedback basé sur les résultats\n */\nexport const generateFeedbackMessage = (finalScore, gameTypeStats) => {\n  const performance = getPerformanceLevel(finalScore.percentage);\n  \n  // Message principal basé sur la performance\n  let message = `${performance.message}\\n\\n`;\n  \n  // Analyse par type de jeu\n  if (gameTypeStats.length > 1) {\n    const bestType = gameTypeStats.reduce((best, current) => \n      current.percentage > best.percentage ? current : best\n    );\n    const worstType = gameTypeStats.reduce((worst, current) => \n      current.percentage < worst.percentage ? current : worst\n    );\n    \n    if (bestType.percentage > worstType.percentage + 20) {\n      message += `You excel at ${bestType.type} games! `;\n      message += `Consider practicing more ${worstType.type} games to improve your overall score.`;\n    }\n  }\n  \n  return message.trim();\n};"],"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","ignoreList":[]}