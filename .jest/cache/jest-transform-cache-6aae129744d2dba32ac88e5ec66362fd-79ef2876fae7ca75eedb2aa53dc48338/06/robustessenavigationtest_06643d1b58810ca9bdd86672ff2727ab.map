{"version":3,"names":["_getJestObj","mock","useFocusEffect","jest","fn","callback","router","push","back","Stack","_ref","children","_jsxRuntime","jsx","Fragment","useLocalSearchParams","useNavigation","navigate","goBack","canGoBack","addListener","isFocused","useCurrentLevel","mockUseCurrentLevel","actualUseVocabulary","requireActual","default","vocabularyData","level","mode","loaded","Object","assign","currentWord","exercises","words","display","wordCounter","categories","map","ex","title","isBonusLevel","getLevelColor","getVocabularyData","undefined","word","translation","example","saveActivity","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_ExerciseSelection","_vocabulary","_require","MOCK_LANGUAGE_LEVELS","color","describe","beforeEach","clearAllMocks","test","mockReturnValue","currentLevel","_render","render","queryByText","getByText","toJSON","waitFor","expect","toBeNull","_render2","_render3","route","params","getByTestId","toBeTruthy","_render4","_render5","_render6","_render7","queryByTestId","_render8","_render9","_render0"],"sources":["robustesse-navigation.test.js"],"sourcesContent":["import React from 'react';\nimport { render, waitFor } from '@testing-library/react-native';\n\n// Screens to test\nimport ExerciseSelection from '../../src/screens/ExerciseSelection';\nimport VocabularyExercise from '../../src/screens/exercises/vocabulary';\n\n// Mock expo-router\njest.mock('expo-router', () => ({\n  useFocusEffect: jest.fn(callback => callback()),\n  router: {\n    push: jest.fn(),\n    back: jest.fn(),\n  },\n  Stack: ({ children }) => <>{children}</>,\n  useLocalSearchParams: () => ({}),\n  useNavigation: () => ({\n    navigate: jest.fn(),\n    goBack: jest.fn(),\n    canGoBack: jest.fn(() => true),\n    addListener: jest.fn(),\n    isFocused: jest.fn(() => true),\n  }),\n}));\n\n// Mock useCurrentLevel with different scenarios\nconst mockUseCurrentLevel = jest.fn();\njest.mock('../../src/contexts/CurrentLevelContext', () => ({\n  useCurrentLevel: mockUseCurrentLevel,\n}));\n\n// Mock useVocabulary hook\njest.mock('../../src/screens/exercises/vocabulary/hooks/useVocabulary', () => {\n  const actualUseVocabulary = jest.requireActual('../../src/screens/exercises/vocabulary/hooks/useVocabulary').default;\n  return jest.fn((vocabularyData, level, mode) => {\n    if (!vocabularyData) {\n      return { loaded: false }; // Simulate loading state when no data\n    }\n    return {\n      ...actualUseVocabulary(vocabularyData, level, mode),\n      loaded: true,\n      currentWord: vocabularyData.exercises[0].words[0],\n      display: {\n        wordCounter: '1 / 1',\n        categories: vocabularyData.exercises.map(ex => ex.title), // ✅ CORRIGÉ : ex.title au lieu de { name: ex.title, words: ex.words }\n      },\n    };\n  });\n});\n\n// Mock vocabularyDataHelper\njest.mock('../../src/utils/vocabulary/vocabularyDataHelper', () => ({\n  isBonusLevel: jest.fn(() => false),\n  getLevelColor: jest.fn((level) => {\n    if (!level) return 'gray'; // Default color for missing level\n    return 'blue';\n  }),\n  getVocabularyData: jest.fn((level, mode) => {\n    // Return null for invalid/missing levels\n    if (!level || level === 'invalid' || level === undefined) {\n      return null;\n    }\n    \n    if (level === 'A1' || level === '1') {\n      return {\n        exercises: [{\n          title: 'Identité & informations personnelles',\n          words: [{ word: 'name', translation: 'nom', example: 'My name is Sarah.' }],\n        }],\n      };\n    }\n    \n    return null; // For any other level\n  }),\n}));\n\n// Mock other hooks\njest.mock('../../src/hooks/useLastActivity', () => jest.fn(() => ({\n  saveActivity: jest.fn(),\n})));\n\n// Mock constants pour les niveaux de langue\nconst MOCK_LANGUAGE_LEVELS = {\n  1: { title: 'Niveau Débutant A1', color: 'blue' },\n  2: { title: 'Niveau Élémentaire A2', color: 'green' },\n  3: { title: 'Niveau Intermédiaire B1', color: 'orange' },\n};\n\ndescribe('Test d\\'intégration: Robustesse de la navigation', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('ExerciseSelection - Gestion des niveaux manquants', () => {\n    test('Affiche un état contrôlé quand aucun niveau n\\'est fourni', async () => {\n      // Mock: pas de niveau courant\n      mockUseCurrentLevel.mockReturnValue({\n        currentLevel: undefined,\n      });\n\n      const { queryByText, getByText, toJSON } = render(<ExerciseSelection />);\n\n      await waitFor(() => {\n        // Vérifier que le composant ne rend rien (retourne null)\n        expect(toJSON()).toBeNull();\n      });\n    });\n\n    test('Affiche un état contrôlé avec un niveau invalide', async () => {\n      mockUseCurrentLevel.mockReturnValue({\n        currentLevel: 'invalid_level',\n      });\n\n      const { queryByText } = render(<ExerciseSelection />);\n\n      await waitFor(() => {\n        // Ne doit pas afficher d'exercices valides\n        expect(queryByText('name')).toBeNull();\n        expect(queryByText('rhetoric')).toBeNull();\n      });\n    });\n\n\n  });\n\n  describe('VocabularyExercise - Gestion des paramètres manquants', () => {\n    test('Affiche un indicateur de chargement sans paramètre de niveau', async () => {\n      const { getByTestId, queryByText } = render(\n        <VocabularyExercise route={{ params: {} }} />\n      );\n\n      await waitFor(() => {\n        // Vérifier que l'indicateur de chargement est affiché\n        expect(getByTestId('activity-indicator')).toBeTruthy();\n        \n        // Vérifier qu'aucun contenu d'exercice n'est affiché\n        expect(queryByText('name')).toBeNull();\n        expect(queryByText('rhetoric')).toBeNull();\n      });\n    });\n\n    test('Affiche un indicateur de chargement avec un niveau undefined', async () => {\n      const { getByTestId, queryByText } = render(\n        <VocabularyExercise route={{ params: { level: undefined, mode: 'classic' } }} />\n      );\n\n      await waitFor(() => {\n        expect(getByTestId('activity-indicator')).toBeTruthy();\n        expect(queryByText('name')).toBeNull();\n      });\n    });\n\n    test('Affiche un indicateur de chargement avec un niveau invalide', async () => {\n      const { getByTestId, queryByText } = render(\n        <VocabularyExercise route={{ params: { level: 'invalid_level', mode: 'classic' } }} />\n      );\n\n      await waitFor(() => {\n        expect(getByTestId('activity-indicator')).toBeTruthy();\n        expect(queryByText('name')).toBeNull();\n        expect(queryByText('rhetoric')).toBeNull();\n      });\n    });\n\n\n    test('Gère correctement les paramètres de route malformés', async () => {\n      // Test avec des paramètres complètement absents\n      const { getByTestId } = render(\n        <VocabularyExercise route={{}} />\n      );\n\n      await waitFor(() => {\n        expect(getByTestId('activity-indicator')).toBeTruthy();\n      });\n    });\n\n    test('Fonctionne correctement avec des paramètres valides', async () => {\n      const { getByText, queryByTestId } = render(\n        <VocabularyExercise route={{ params: { level: '1', mode: 'classic' } }} />\n      );\n\n      await waitFor(() => {\n        // Avec des paramètres valides, le contenu doit s'afficher\n   expect(getByText('name')).toBeTruthy();\n    expect(getByText('My name is Sarah.')).toBeTruthy();\n        \n        // Plus d'indicateur de chargement\n        expect(queryByTestId('activity-indicator')).toBeNull();\n      });\n    });\n  });\n\n  describe('Cas limites et edge cases', () => {\n    test('Gère les valeurs null dans les paramètres', async () => {\n      const { getByTestId } = render(\n        <VocabularyExercise route={{ params: { level: null, mode: null } }} />\n      );\n\n      await waitFor(() => {\n        expect(getByTestId('activity-indicator')).toBeTruthy();\n      });\n    });\n\n    test('Gère les chaînes vides dans les paramètres', async () => {\n      const { getByTestId } = render(\n        <VocabularyExercise route={{ params: { level: '', mode: '' } }} />\n      );\n\n      await waitFor(() => {\n        expect(getByTestId('activity-indicator')).toBeTruthy();\n      });\n    });\n\n    test('Gère les types de données inattendus', async () => {\n      const { getByTestId } = render(\n        <VocabularyExercise route={{ params: { level: 123, mode: {} } }} />\n      );\n\n      await waitFor(() => {\n        expect(getByTestId('activity-indicator')).toBeTruthy();\n      });\n    });\n  });\n});"],"mappings":"AAQAA,WAAA,GAAKC,IAAI,CAAC,aAAa,EAAE;EAAA,OAAO;IAC9BC,cAAc,EAAEC,IAAI,CAACC,EAAE,CAAC,UAAAC,QAAQ;MAAA,OAAIA,QAAQ,CAAC,CAAC;IAAA,EAAC;IAC/CC,MAAM,EAAE;MACNC,IAAI,EAAEJ,IAAI,CAACC,EAAE,CAAC,CAAC;MACfI,IAAI,EAAEL,IAAI,CAACC,EAAE,CAAC;IAChB,CAAC;IACDK,KAAK,EAAE,SAAPA,KAAKA,CAAAC,IAAA;MAAA,IAAKC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;MAAA,OAAO,IAAAC,WAAA,CAAAC,GAAA,EAAAD,WAAA,CAAAE,QAAA;QAAAH,QAAA,EAAGA;MAAQ,CAAG,CAAC;IAAA;IACxCI,oBAAoB,EAAE,SAAtBA,oBAAoBA,CAAA;MAAA,OAAS,CAAC,CAAC;IAAA,CAAC;IAChCC,aAAa,EAAE,SAAfA,aAAaA,CAAA;MAAA,OAAS;QACpBC,QAAQ,EAAEd,IAAI,CAACC,EAAE,CAAC,CAAC;QACnBc,MAAM,EAAEf,IAAI,CAACC,EAAE,CAAC,CAAC;QACjBe,SAAS,EAAEhB,IAAI,CAACC,EAAE,CAAC;UAAA,OAAM,IAAI;QAAA,EAAC;QAC9BgB,WAAW,EAAEjB,IAAI,CAACC,EAAE,CAAC,CAAC;QACtBiB,SAAS,EAAElB,IAAI,CAACC,EAAE,CAAC;UAAA,OAAM,IAAI;QAAA;MAC/B,CAAC;IAAA;EACH,CAAC;AAAA,CAAC,CAAC;AAIHJ,WAAA,GAAKC,IAAI,CAAC,wCAAwC,EAAE;EAAA,OAAO;IACzDqB,eAAe,EAAEC;EACnB,CAAC;AAAA,CAAC,CAAC;AAGHvB,WAAA,GAAKC,IAAI,CAAC,4DAA4D,EAAE,YAAM;EAC5E,IAAMuB,mBAAmB,GAAGrB,IAAI,CAACsB,aAAa,CAAC,4DAA4D,CAAC,CAACC,OAAO;EACpH,OAAOvB,IAAI,CAACC,EAAE,CAAC,UAACuB,cAAc,EAAEC,KAAK,EAAEC,IAAI,EAAK;IAC9C,IAAI,CAACF,cAAc,EAAE;MACnB,OAAO;QAAEG,MAAM,EAAE;MAAM,CAAC;IAC1B;IACA,OAAAC,MAAA,CAAAC,MAAA,KACKR,mBAAmB,CAACG,cAAc,EAAEC,KAAK,EAAEC,IAAI,CAAC;MACnDC,MAAM,EAAE,IAAI;MACZG,WAAW,EAAEN,cAAc,CAACO,SAAS,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC;MACjDC,OAAO,EAAE;QACPC,WAAW,EAAE,OAAO;QACpBC,UAAU,EAAEX,cAAc,CAACO,SAAS,CAACK,GAAG,CAAC,UAAAC,EAAE;UAAA,OAAIA,EAAE,CAACC,KAAK;QAAA;MACzD;IAAC;EAEL,CAAC,CAAC;AACJ,CAAC,CAAC;AAGFzC,WAAA,GAAKC,IAAI,CAAC,iDAAiD,EAAE;EAAA,OAAO;IAClEyC,YAAY,EAAEvC,IAAI,CAACC,EAAE,CAAC;MAAA,OAAM,KAAK;IAAA,EAAC;IAClCuC,aAAa,EAAExC,IAAI,CAACC,EAAE,CAAC,UAACwB,KAAK,EAAK;MAChC,IAAI,CAACA,KAAK,EAAE,OAAO,MAAM;MACzB,OAAO,MAAM;IACf,CAAC,CAAC;IACFgB,iBAAiB,EAAEzC,IAAI,CAACC,EAAE,CAAC,UAACwB,KAAK,EAAEC,IAAI,EAAK;MAE1C,IAAI,CAACD,KAAK,IAAIA,KAAK,KAAK,SAAS,IAAIA,KAAK,KAAKiB,SAAS,EAAE;QACxD,OAAO,IAAI;MACb;MAEA,IAAIjB,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,GAAG,EAAE;QACnC,OAAO;UACLM,SAAS,EAAE,CAAC;YACVO,KAAK,EAAE,sCAAsC;YAC7CN,KAAK,EAAE,CAAC;cAAEW,IAAI,EAAE,MAAM;cAAEC,WAAW,EAAE,KAAK;cAAEC,OAAO,EAAE;YAAoB,CAAC;UAC5E,CAAC;QACH,CAAC;MACH;MAEA,OAAO,IAAI;IACb,CAAC;EACH,CAAC;AAAA,CAAC,CAAC;AAGHhD,WAAA,GAAKC,IAAI,CAAC,iCAAiC,EAAE;EAAA,OAAME,IAAI,CAACC,EAAE,CAAC;IAAA,OAAO;MAChE6C,YAAY,EAAE9C,IAAI,CAACC,EAAE,CAAC;IACxB,CAAC;EAAA,CAAC,CAAC;AAAA,EAAC;AAAC,IAAA8C,sBAAA,GAAAC,OAAA;AAAA,IAAAC,kBAAA,GAAAF,sBAAA,CAAAC,OAAA;AA/EL,IAAAE,MAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,YAAA,GAAAH,OAAA;AAGA,IAAAI,kBAAA,GAAAL,sBAAA,CAAAC,OAAA;AACA,IAAAK,WAAA,GAAAN,sBAAA,CAAAC,OAAA;AAAwE,IAAAvC,WAAA,GAAAuC,OAAA;AAAA,SAAAnD,YAAA;EAAA,IAAAyD,QAAA,GAAAN,OAAA;IAAAhD,IAAA,GAAAsD,QAAA,CAAAtD,IAAA;EAAAH,WAAA,YAAAA,YAAA;IAAA,OAAAG,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAqBxE,IAAMoB,mBAAmB,GAAGpB,IAAI,CAACC,EAAE,CAAC,CAAC;AAwDrC,IAAMsD,oBAAoB,GAAG;EAC3B,CAAC,EAAE;IAAEjB,KAAK,EAAE,oBAAoB;IAAEkB,KAAK,EAAE;EAAO,CAAC;EACjD,CAAC,EAAE;IAAElB,KAAK,EAAE,uBAAuB;IAAEkB,KAAK,EAAE;EAAQ,CAAC;EACrD,CAAC,EAAE;IAAElB,KAAK,EAAE,yBAAyB;IAAEkB,KAAK,EAAE;EAAS;AACzD,CAAC;AAEDC,QAAQ,CAAC,kDAAkD,EAAE,YAAM;EACjEC,UAAU,CAAC,YAAM;IACf1D,IAAI,CAAC2D,aAAa,CAAC,CAAC;EACtB,CAAC,CAAC;EAEFF,QAAQ,CAAC,mDAAmD,EAAE,YAAM;IAClEG,IAAI,CAAC,2DAA2D,MAAAX,kBAAA,CAAA1B,OAAA,EAAE,aAAY;MAE5EH,mBAAmB,CAACyC,eAAe,CAAC;QAClCC,YAAY,EAAEpB;MAChB,CAAC,CAAC;MAEF,IAAAqB,OAAA,GAA2C,IAAAC,mBAAM,EAAC,IAAAvD,WAAA,CAAAC,GAAA,EAAC0C,kBAAA,CAAA7B,OAAiB,IAAE,CAAC,CAAC;QAAhE0C,WAAW,GAAAF,OAAA,CAAXE,WAAW;QAAEC,SAAS,GAAAH,OAAA,CAATG,SAAS;QAAEC,MAAM,GAAAJ,OAAA,CAANI,MAAM;MAEtC,MAAM,IAAAC,oBAAO,EAAC,YAAM;QAElBC,MAAM,CAACF,MAAM,CAAC,CAAC,CAAC,CAACG,QAAQ,CAAC,CAAC;MAC7B,CAAC,CAAC;IACJ,CAAC,EAAC;IAEFV,IAAI,CAAC,kDAAkD,MAAAX,kBAAA,CAAA1B,OAAA,EAAE,aAAY;MACnEH,mBAAmB,CAACyC,eAAe,CAAC;QAClCC,YAAY,EAAE;MAChB,CAAC,CAAC;MAEF,IAAAS,QAAA,GAAwB,IAAAP,mBAAM,EAAC,IAAAvD,WAAA,CAAAC,GAAA,EAAC0C,kBAAA,CAAA7B,OAAiB,IAAE,CAAC,CAAC;QAA7C0C,WAAW,GAAAM,QAAA,CAAXN,WAAW;MAEnB,MAAM,IAAAG,oBAAO,EAAC,YAAM;QAElBC,MAAM,CAACJ,WAAW,CAAC,MAAM,CAAC,CAAC,CAACK,QAAQ,CAAC,CAAC;QACtCD,MAAM,CAACJ,WAAW,CAAC,UAAU,CAAC,CAAC,CAACK,QAAQ,CAAC,CAAC;MAC5C,CAAC,CAAC;IACJ,CAAC,EAAC;EAGJ,CAAC,CAAC;EAEFb,QAAQ,CAAC,uDAAuD,EAAE,YAAM;IACtEG,IAAI,CAAC,8DAA8D,MAAAX,kBAAA,CAAA1B,OAAA,EAAE,aAAY;MAC/E,IAAAiD,QAAA,GAAqC,IAAAR,mBAAM,EACzC,IAAAvD,WAAA,CAAAC,GAAA,EAAC2C,WAAA,CAAA9B,OAAkB;UAACkD,KAAK,EAAE;YAAEC,MAAM,EAAE,CAAC;UAAE;QAAE,CAAE,CAC9C,CAAC;QAFOC,WAAW,GAAAH,QAAA,CAAXG,WAAW;QAAEV,WAAW,GAAAO,QAAA,CAAXP,WAAW;MAIhC,MAAM,IAAAG,oBAAO,EAAC,YAAM;QAElBC,MAAM,CAACM,WAAW,CAAC,oBAAoB,CAAC,CAAC,CAACC,UAAU,CAAC,CAAC;QAGtDP,MAAM,CAACJ,WAAW,CAAC,MAAM,CAAC,CAAC,CAACK,QAAQ,CAAC,CAAC;QACtCD,MAAM,CAACJ,WAAW,CAAC,UAAU,CAAC,CAAC,CAACK,QAAQ,CAAC,CAAC;MAC5C,CAAC,CAAC;IACJ,CAAC,EAAC;IAEFV,IAAI,CAAC,8DAA8D,MAAAX,kBAAA,CAAA1B,OAAA,EAAE,aAAY;MAC/E,IAAAsD,QAAA,GAAqC,IAAAb,mBAAM,EACzC,IAAAvD,WAAA,CAAAC,GAAA,EAAC2C,WAAA,CAAA9B,OAAkB;UAACkD,KAAK,EAAE;YAAEC,MAAM,EAAE;cAAEjD,KAAK,EAAEiB,SAAS;cAAEhB,IAAI,EAAE;YAAU;UAAE;QAAE,CAAE,CACjF,CAAC;QAFOiD,WAAW,GAAAE,QAAA,CAAXF,WAAW;QAAEV,WAAW,GAAAY,QAAA,CAAXZ,WAAW;MAIhC,MAAM,IAAAG,oBAAO,EAAC,YAAM;QAClBC,MAAM,CAACM,WAAW,CAAC,oBAAoB,CAAC,CAAC,CAACC,UAAU,CAAC,CAAC;QACtDP,MAAM,CAACJ,WAAW,CAAC,MAAM,CAAC,CAAC,CAACK,QAAQ,CAAC,CAAC;MACxC,CAAC,CAAC;IACJ,CAAC,EAAC;IAEFV,IAAI,CAAC,6DAA6D,MAAAX,kBAAA,CAAA1B,OAAA,EAAE,aAAY;MAC9E,IAAAuD,QAAA,GAAqC,IAAAd,mBAAM,EACzC,IAAAvD,WAAA,CAAAC,GAAA,EAAC2C,WAAA,CAAA9B,OAAkB;UAACkD,KAAK,EAAE;YAAEC,MAAM,EAAE;cAAEjD,KAAK,EAAE,eAAe;cAAEC,IAAI,EAAE;YAAU;UAAE;QAAE,CAAE,CACvF,CAAC;QAFOiD,WAAW,GAAAG,QAAA,CAAXH,WAAW;QAAEV,WAAW,GAAAa,QAAA,CAAXb,WAAW;MAIhC,MAAM,IAAAG,oBAAO,EAAC,YAAM;QAClBC,MAAM,CAACM,WAAW,CAAC,oBAAoB,CAAC,CAAC,CAACC,UAAU,CAAC,CAAC;QACtDP,MAAM,CAACJ,WAAW,CAAC,MAAM,CAAC,CAAC,CAACK,QAAQ,CAAC,CAAC;QACtCD,MAAM,CAACJ,WAAW,CAAC,UAAU,CAAC,CAAC,CAACK,QAAQ,CAAC,CAAC;MAC5C,CAAC,CAAC;IACJ,CAAC,EAAC;IAGFV,IAAI,CAAC,qDAAqD,MAAAX,kBAAA,CAAA1B,OAAA,EAAE,aAAY;MAEtE,IAAAwD,QAAA,GAAwB,IAAAf,mBAAM,EAC5B,IAAAvD,WAAA,CAAAC,GAAA,EAAC2C,WAAA,CAAA9B,OAAkB;UAACkD,KAAK,EAAE,CAAC;QAAE,CAAE,CAClC,CAAC;QAFOE,WAAW,GAAAI,QAAA,CAAXJ,WAAW;MAInB,MAAM,IAAAP,oBAAO,EAAC,YAAM;QAClBC,MAAM,CAACM,WAAW,CAAC,oBAAoB,CAAC,CAAC,CAACC,UAAU,CAAC,CAAC;MACxD,CAAC,CAAC;IACJ,CAAC,EAAC;IAEFhB,IAAI,CAAC,qDAAqD,MAAAX,kBAAA,CAAA1B,OAAA,EAAE,aAAY;MACtE,IAAAyD,QAAA,GAAqC,IAAAhB,mBAAM,EACzC,IAAAvD,WAAA,CAAAC,GAAA,EAAC2C,WAAA,CAAA9B,OAAkB;UAACkD,KAAK,EAAE;YAAEC,MAAM,EAAE;cAAEjD,KAAK,EAAE,GAAG;cAAEC,IAAI,EAAE;YAAU;UAAE;QAAE,CAAE,CAC3E,CAAC;QAFOwC,SAAS,GAAAc,QAAA,CAATd,SAAS;QAAEe,aAAa,GAAAD,QAAA,CAAbC,aAAa;MAIhC,MAAM,IAAAb,oBAAO,EAAC,YAAM;QAEvBC,MAAM,CAACH,SAAS,CAAC,MAAM,CAAC,CAAC,CAACU,UAAU,CAAC,CAAC;QACrCP,MAAM,CAACH,SAAS,CAAC,mBAAmB,CAAC,CAAC,CAACU,UAAU,CAAC,CAAC;QAG/CP,MAAM,CAACY,aAAa,CAAC,oBAAoB,CAAC,CAAC,CAACX,QAAQ,CAAC,CAAC;MACxD,CAAC,CAAC;IACJ,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFb,QAAQ,CAAC,2BAA2B,EAAE,YAAM;IAC1CG,IAAI,CAAC,2CAA2C,MAAAX,kBAAA,CAAA1B,OAAA,EAAE,aAAY;MAC5D,IAAA2D,QAAA,GAAwB,IAAAlB,mBAAM,EAC5B,IAAAvD,WAAA,CAAAC,GAAA,EAAC2C,WAAA,CAAA9B,OAAkB;UAACkD,KAAK,EAAE;YAAEC,MAAM,EAAE;cAAEjD,KAAK,EAAE,IAAI;cAAEC,IAAI,EAAE;YAAK;UAAE;QAAE,CAAE,CACvE,CAAC;QAFOiD,WAAW,GAAAO,QAAA,CAAXP,WAAW;MAInB,MAAM,IAAAP,oBAAO,EAAC,YAAM;QAClBC,MAAM,CAACM,WAAW,CAAC,oBAAoB,CAAC,CAAC,CAACC,UAAU,CAAC,CAAC;MACxD,CAAC,CAAC;IACJ,CAAC,EAAC;IAEFhB,IAAI,CAAC,4CAA4C,MAAAX,kBAAA,CAAA1B,OAAA,EAAE,aAAY;MAC7D,IAAA4D,QAAA,GAAwB,IAAAnB,mBAAM,EAC5B,IAAAvD,WAAA,CAAAC,GAAA,EAAC2C,WAAA,CAAA9B,OAAkB;UAACkD,KAAK,EAAE;YAAEC,MAAM,EAAE;cAAEjD,KAAK,EAAE,EAAE;cAAEC,IAAI,EAAE;YAAG;UAAE;QAAE,CAAE,CACnE,CAAC;QAFOiD,WAAW,GAAAQ,QAAA,CAAXR,WAAW;MAInB,MAAM,IAAAP,oBAAO,EAAC,YAAM;QAClBC,MAAM,CAACM,WAAW,CAAC,oBAAoB,CAAC,CAAC,CAACC,UAAU,CAAC,CAAC;MACxD,CAAC,CAAC;IACJ,CAAC,EAAC;IAEFhB,IAAI,CAAC,sCAAsC,MAAAX,kBAAA,CAAA1B,OAAA,EAAE,aAAY;MACvD,IAAA6D,QAAA,GAAwB,IAAApB,mBAAM,EAC5B,IAAAvD,WAAA,CAAAC,GAAA,EAAC2C,WAAA,CAAA9B,OAAkB;UAACkD,KAAK,EAAE;YAAEC,MAAM,EAAE;cAAEjD,KAAK,EAAE,GAAG;cAAEC,IAAI,EAAE,CAAC;YAAE;UAAE;QAAE,CAAE,CACpE,CAAC;QAFOiD,WAAW,GAAAS,QAAA,CAAXT,WAAW;MAInB,MAAM,IAAAP,oBAAO,EAAC,YAAM;QAClBC,MAAM,CAACM,WAAW,CAAC,oBAAoB,CAAC,CAAC,CAACC,UAAU,CAAC,CAAC;MACxD,CAAC,CAAC;IACJ,CAAC,EAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}