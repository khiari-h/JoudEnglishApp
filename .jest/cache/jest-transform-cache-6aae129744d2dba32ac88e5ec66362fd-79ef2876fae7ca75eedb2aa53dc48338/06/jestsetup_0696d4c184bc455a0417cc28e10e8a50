044581aba48e67f2ff6ae675e8be0738
_getJestObj().mock('react-native/Libraries/Settings/Settings', function () {
  return {
    get: jest.fn(function () {
      return 'light';
    }),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn()
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return require('@react-native-async-storage/async-storage/jest/async-storage-mock');
});
_getJestObj().mock('expo-crypto', function () {
  return {
    getRandomBytes: jest.fn().mockImplementation(function () {
      var _ref = (0, _asyncToGenerator2.default)(function* (length) {
        var bytes = new Uint8Array(length);
        for (var i = 0; i < length; i++) {
          bytes[i] = Math.floor(Math.random() * 256);
        }
        return bytes;
      });
      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }()),
    digestStringAsync: jest.fn().mockImplementation(function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* (algorithm, data) {
        return `mock-hash-${data.slice(0, 8)}`;
      });
      return function (_x2, _x3) {
        return _ref2.apply(this, arguments);
      };
    }()),
    randomUUID: jest.fn().mockImplementation(function () {
      return 'mock-uuid-' + Math.random().toString(36).substr(2, 9);
    })
  };
});
_getJestObj().mock('expo-font', function () {
  return {
    useFonts: function useFonts() {
      return [true];
    },
    isLoaded: function isLoaded() {
      return true;
    }
  };
});
_getJestObj().mock('expo-haptics', function () {
  return {
    impactAsync: jest.fn()
  };
});
_getJestObj().mock('expo-splash-screen', function () {
  return {
    hideAsync: jest.fn(),
    preventAutoHideAsync: jest.fn()
  };
});
_getJestObj().mock('expo-constants', function () {
  return Object.assign({}, jest.requireActual('expo-constants'), {
    manifest: {
      extra: {}
    }
  });
});
_getJestObj().mock('expo-asset', function () {
  return {
    Asset: {
      fromModule: jest.fn(function () {
        return {
          downloadAsync: jest.fn(),
          uri: 'test-uri'
        };
      })
    }
  };
});
_getJestObj().mock('@react-native-clipboard/clipboard', function () {
  return {
    getString: jest.fn((0, _asyncToGenerator2.default)(function* () {
      return '';
    })),
    setString: jest.fn()
  };
}, {
  virtual: true
});
_getJestObj().mock('@react-native-community/push-notification-ios', function () {
  return {
    presentLocalNotification: jest.fn()
  };
}, {
  virtual: true
});
_getJestObj().mock('@react-native-community/progress-bar-android', function () {
  return 'ProgressBarAndroid';
}, {
  virtual: true
});
_getJestObj().mock('react-native-reanimated', function () {
  var Reanimated = require('react-native-reanimated/mock');
  Reanimated.useSharedValue = jest.fn(function () {
    return {
      value: 0
    };
  });
  Reanimated.withTiming = function (toValue, options, callback) {
    if (callback) {
      callback(true);
    }
    return toValue;
  };
  Reanimated.withSpring = function (toValue, options, callback) {
    if (callback) {
      callback(true);
    }
    return toValue;
  };
  Reanimated.withRepeat = function (animation, repetitions, reverse) {
    return animation;
  };
  Reanimated.withSequence = function () {
    return arguments.length <= 0 ? undefined : arguments[0];
  };
  Reanimated.withDelay = function (delay, animation) {
    return animation;
  };
  return Reanimated;
});
_getJestObj().mock('expo-modules-core', function () {
  return Object.assign({}, jest.requireActual('expo-modules-core'), {
    requireOptionalNativeModule: jest.fn(),
    NativeModulesProxy: new Proxy({}, {
      get: function get(target, prop) {
        if (prop === 'ExpoLocalization') {
          return {
            locale: 'en-US',
            isoCurrencyCodes: ['USD'],
            timezone: 'America/New_York',
            isRTL: false
          };
        }
        if (prop === 'ExpoRandom') {
          return {
            getRandomBytes: jest.fn(),
            getRandomBytesAsync: jest.fn()
          };
        }
        return {};
      }
    }),
    EventEmitter: jest.fn(function () {
      return {
        addListener: jest.fn(),
        removeListeners: jest.fn()
      };
    }),
    requireNativeViewManager: jest.fn(function () {
      return {};
    })
  });
});
_getJestObj().mock('expo-linear-gradient', function () {
  var React = require('react');
  var _require = require('react-native'),
    View = _require.View;
  return {
    LinearGradient: function LinearGradient(_ref4) {
      var children = _ref4.children,
        colors = _ref4.colors,
        start = _ref4.start,
        end = _ref4.end,
        style = _ref4.style,
        props = (0, _objectWithoutProperties2.default)(_ref4, _excluded);
      return (0, _jsxRuntime.jsx)(View, Object.assign({
        style: [style, {
          backgroundColor: colors ? colors[0] : 'transparent'
        }]
      }, props, {
        children: children
      }));
    }
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn(),
      replace: jest.fn(),
      back: jest.fn(),
      canGoBack: jest.fn(function () {
        return true;
      }),
      setParams: jest.fn()
    },
    useFocusEffect: jest.fn(function () {}),
    useRouter: jest.fn(function () {
      return {
        push: jest.fn(),
        replace: jest.fn(),
        back: jest.fn(),
        canGoBack: jest.fn(function () {
          return true;
        }),
        setParams: jest.fn()
      };
    }),
    useLocalSearchParams: jest.fn(function () {
      return {};
    }),
    useGlobalSearchParams: jest.fn(function () {
      return {};
    }),
    useSegments: jest.fn(function () {
      return [];
    }),
    usePathname: jest.fn(function () {
      return '/';
    }),
    Redirect: function Redirect(_ref5) {
      var href = _ref5.href;
      return null;
    },
    Link: function Link(_ref6) {
      var href = _ref6.href,
        children = _ref6.children,
        props = (0, _objectWithoutProperties2.default)(_ref6, _excluded2);
      var React = require('react');
      var _require2 = require('react-native'),
        TouchableOpacity = _require2.TouchableOpacity,
        Text = _require2.Text;
      return React.createElement(TouchableOpacity, props, typeof children === 'string' ? React.createElement(Text, {}, children) : children);
    },
    Stack: {
      Screen: function Screen(_ref7) {
        var children = _ref7.children,
          props = (0, _objectWithoutProperties2.default)(_ref7, _excluded3);
        var React = require('react');
        return React.createElement('div', props, children);
      }
    },
    Tabs: {
      Screen: function Screen(_ref8) {
        var children = _ref8.children,
          props = (0, _objectWithoutProperties2.default)(_ref8, _excluded4);
        var React = require('react');
        return React.createElement('div', props, children);
      }
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("react-native");
require("@testing-library/jest-native/extend-expect");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "colors", "start", "end", "style"],
  _excluded2 = ["href", "children"],
  _excluded3 = ["children"],
  _excluded4 = ["children"];
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
_reactNative.NativeModules.SettingsManager = _reactNative.NativeModules.SettingsManager || {
  settings: {
    AppleLocale: 'en_US'
  }
};
if (typeof setImmediate === 'undefined') {
  global.setImmediate = function (fn) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return setTimeout.apply(void 0, [fn, 0].concat(args));
  };
}
if (typeof clearImmediate === 'undefined') {
  global.clearImmediate = function (id) {
    return clearTimeout(id);
  };
}
var originalConsole = Object.assign({}, console);
global.console = Object.assign({}, console, {
  error: jest.fn(function (message) {
    if (typeof message === 'string' && message.includes('Warning: An update to') && message.includes('was not wrapped in act')) {
      return;
    }
    originalConsole.error(message);
  }),
  warn: jest.fn(function (message) {
    var msg = typeof message === 'string' ? message : '';
    var ignore = ['Warning: An update to', 'was not wrapped in act', 'has been extracted from react-native core and will be removed in a future release', 'new NativeEventEmitter()', 'PushNotificationIOS has been extracted from react-native core', 'Clipboard has been extracted from react-native core', 'ProgressBarAndroid has been extracted from react-native core'].some(function (t) {
      return msg.includes(t);
    });
    if (ignore) return;
    originalConsole.warn(message);
  })
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,