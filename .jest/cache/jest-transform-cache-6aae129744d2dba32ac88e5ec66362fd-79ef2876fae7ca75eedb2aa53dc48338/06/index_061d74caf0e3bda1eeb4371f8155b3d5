aaf844348421b661842b4d14895fd9b6
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _expoLinearGradient = require("expo-linear-gradient");
var _vectorIcons = require("@expo/vector-icons");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _HeroCard = _interopRequireDefault(require("../../../../components/ui/HeroCard"));
var _ContentSection = _interopRequireDefault(require("../../../../components/ui/ContentSection"));
var _style = _interopRequireDefault(require("./style"));
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
var GrammarExerciseRenderer = function GrammarExerciseRenderer(_ref) {
  var exercise = _ref.exercise,
    selectedOption = _ref.selectedOption,
    setSelectedOption = _ref.setSelectedOption,
    inputText = _ref.inputText,
    setInputText = _ref.setInputText,
    showFeedback = _ref.showFeedback,
    isCorrect = _ref.isCorrect,
    exerciseIndex = _ref.exerciseIndex,
    attempts = _ref.attempts;
  if (!exercise) return null;
  var styles = (0, _style.default)();
  var levelColor = "#3b82f6";
  var handleChangeText1 = (0, _react.useCallback)(function (text) {
    if (!showFeedback) setInputText(text);
  }, [showFeedback, setInputText]);
  var handleChangeText2 = (0, _react.useCallback)(function (text) {
    if (!showFeedback) setInputText(text);
  }, [showFeedback, setInputText]);
  var handleOptionPress = (0, _react.useCallback)(function (index) {
    if (!showFeedback) setSelectedOption(index);
  }, [showFeedback, setSelectedOption]);
  var getOptionPressHandler = (0, _react.useCallback)(function (index) {
    return function () {
      return handleOptionPress(index);
    };
  }, [handleOptionPress]);
  var renderMultipleChoiceExercise = function renderMultipleChoiceExercise() {
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.container,
      children: [(0, _jsxRuntime.jsx)(_HeroCard.default, {
        content: exercise.question,
        fontSize: 24,
        levelColor: levelColor,
        showUnderline: true
      }), exercise.sentence && (0, _jsxRuntime.jsx)(_ContentSection.default, {
        title: "Complete the sentence",
        content: exercise.sentence.replace("___", "______"),
        levelColor: levelColor,
        backgroundColor: "#F8FAFC",
        isItalic: true,
        showIcon: false
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.optionsSection,
        children: exercise.options.map(function (option, index) {
          var isCorrectOption = index === exercise.answer || option === exercise.answer;
          var isSelectedOption = selectedOption === index;
          return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            style: styles.optionContainer,
            onPress: getOptionPressHandler(index),
            disabled: showFeedback && isCorrect,
            activeOpacity: 0.8,
            children: (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
              colors: showFeedback && isCorrectOption ? ['#10B981', '#059669', '#047857'] : showFeedback && isSelectedOption && !isCorrectOption ? ['#EF4444', '#DC2626', '#B91C1C'] : isSelectedOption ? [levelColor, `${levelColor}E6`, `${levelColor}CC`] : ['#FFFFFF', '#F8FAFC', '#F1F5F9'],
              start: {
                x: 0,
                y: 0
              },
              end: {
                x: 1,
                y: 1
              },
              style: styles.optionGradient,
              children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
                style: styles.optionInner,
                children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
                  style: styles.optionIconContainer,
                  children: showFeedback && isCorrectOption ? (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                    name: "checkmark-circle",
                    size: 20,
                    color: "white"
                  }) : showFeedback && isSelectedOption && !isCorrectOption ? (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                    name: "close-circle",
                    size: 20,
                    color: "white"
                  }) : isSelectedOption ? (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                    name: "radio-button-on",
                    size: 20,
                    color: "white"
                  }) : (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                    name: "radio-button-off",
                    size: 20,
                    color: "#9CA3AF"
                  })
                }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                  style: [styles.optionText, showFeedback && isCorrectOption && styles.correctOptionText, showFeedback && isSelectedOption && !isCorrectOption && styles.incorrectOptionText, isSelectedOption && !showFeedback && styles.selectedOptionText],
                  children: option
                })]
              })
            })
          }, option);
        })
      })]
    });
  };
  var renderFillBlankExercise = function renderFillBlankExercise() {
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.container,
      children: [(0, _jsxRuntime.jsx)(_HeroCard.default, {
        content: exercise.question,
        fontSize: 24,
        levelColor: levelColor,
        showUnderline: true
      }), (0, _jsxRuntime.jsx)(_ContentSection.default, {
        title: "Complete the sentence",
        content: exercise.sentence || "Fill in the blank",
        levelColor: levelColor,
        backgroundColor: "#F8FAFC",
        showIcon: false
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.inputSection,
        children: (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
          style: [styles.fillBlankInput, showFeedback && inputText.trim().toLowerCase() === exercise.answer.toLowerCase() ? styles.correctInput : showFeedback && !isCorrect ? styles.incorrectInput : styles.neutralInput],
          value: inputText,
          onChangeText: handleChangeText1,
          placeholder: "Type your answer...",
          editable: !showFeedback || !isCorrect,
          autoCapitalize: "none",
          autoCorrect: false
        }, `fill-blank-input-${exerciseIndex}-${attempts}`)
      })]
    });
  };
  var renderTransformationExercise = function renderTransformationExercise() {
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.container,
      children: [(0, _jsxRuntime.jsx)(_HeroCard.default, {
        content: exercise.question,
        fontSize: 24,
        levelColor: levelColor,
        showUnderline: true
      }), exercise.sentence && (0, _jsxRuntime.jsx)(_ContentSection.default, {
        title: "Transform this sentence",
        content: exercise.sentence,
        levelColor: levelColor,
        backgroundColor: "#F8FAFC",
        isItalic: true,
        showIcon: false
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.inputSection,
        children: (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
          style: [styles.transformationInput, showFeedback && inputText.trim().toLowerCase() === exercise.answer.toLowerCase() ? styles.correctInput : showFeedback && !isCorrect ? styles.incorrectInput : styles.neutralInput],
          value: inputText,
          onChangeText: handleChangeText2,
          placeholder: "Write your transformed sentence...",
          editable: !showFeedback || !isCorrect,
          multiline: true,
          autoCapitalize: "none",
          autoCorrect: false
        }, `transformation-input-${exerciseIndex}-${attempts}`)
      })]
    });
  };
  if (exercise.type === "fillInTheBlank" && exercise.options) {
    return renderMultipleChoiceExercise();
  } else if (exercise.type === "fillInTheBlank") {
    return renderFillBlankExercise();
  } else if (exercise.type === "transformation") {
    return renderTransformationExercise();
  }
  return null;
};
GrammarExerciseRenderer.propTypes = {
  exercise: _propTypes.default.shape({
    question: _propTypes.default.string.isRequired,
    sentence: _propTypes.default.string,
    options: _propTypes.default.arrayOf(_propTypes.default.string),
    answer: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]).isRequired,
    type: _propTypes.default.oneOf(['fillInTheBlank', 'transformation']).isRequired
  }),
  selectedOption: _propTypes.default.number,
  setSelectedOption: _propTypes.default.func.isRequired,
  inputText: _propTypes.default.string,
  setInputText: _propTypes.default.func.isRequired,
  showFeedback: _propTypes.default.bool,
  isCorrect: _propTypes.default.bool,
  exerciseIndex: _propTypes.default.number,
  attempts: _propTypes.default.number
};
var _default = exports.default = GrammarExerciseRenderer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,