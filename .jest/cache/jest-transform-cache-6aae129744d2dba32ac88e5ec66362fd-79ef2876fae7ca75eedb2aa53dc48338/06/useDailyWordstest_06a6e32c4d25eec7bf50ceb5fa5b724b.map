{"version":3,"names":["_getJestObj","mock","getItem","jest","fn","_interopRequireDefault","require","_asyncToGenerator2","_reactNative","_asyncStorage","_useDailyWords","_require","describe","beforeEach","clearAllMocks","spyOn","Date","mockReturnValue","prototype","afterEach","restoreAllMocks","it","default","mockVocabularyData","completedWords","word","timestamp","AsyncStorage","mockImplementation","key","includes","Promise","resolve","JSON","stringify","_renderHook","renderHook","useDailyWords","result","waitForNextUpdate","expect","current","wordsToday","toBe","isLoading","_renderHook2","mockResolvedValue","_renderHook3","_renderHook4","_renderHook5","_renderHook6","toHaveBeenCalledWith","_renderHook7","not","stringContaining","_renderHook8","act","refresh","useFakeTimers","_renderHook9","now","tomorrow","setDate","getDate","setHours","timeUntilMidnight","getTime","advanceTimersByTime","setTimeout","toHaveBeenCalled","useRealTimers","mockRejectedValue","Error","_renderHook0","reject","_renderHook1","_renderHook10","_renderHook11"],"sources":["useDailyWords.test.js"],"sourcesContent":["// __tests__/hooks/useDailyWords.test.js\nimport { renderHook, act } from '@testing-library/react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport useDailyWords from '../../src/hooks/useDailyWords';\n\n// Mock AsyncStorage\njest.mock('@react-native-async-storage/async-storage', () => ({\n  getItem: jest.fn(),\n}));\n\ndescribe('useDailyWords', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.spyOn(Date, 'now').mockReturnValue(1640995200000); // 2022-01-01 00:00:00\n    jest.spyOn(Date.prototype, 'toDateString').mockReturnValue('Sat Jan 01 2022');\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  describe('Calcul des mots quotidiens', () => {\n    it('devrait compter les mots appris aujourd\\'hui', async () => {\n      const mockVocabularyData = {\n        completedWords: {\n          '0': [\n            { word: 'hello', timestamp: 1640995200000 }, // Aujourd'hui\n            { word: 'world', timestamp: 1640995200000 }, // Aujourd'hui\n          ],\n          '1': [\n            { word: 'test', timestamp: 1640908800000 }, // Hier\n          ]\n        }\n      };\n\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key.includes('vocabulary_') && key.includes('_classic')) {\n          return Promise.resolve(JSON.stringify(mockVocabularyData));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { result, waitForNextUpdate } = renderHook(() => useDailyWords());\n\n      await waitForNextUpdate();\n\n      expect(result.current.wordsToday).toBe(12); // 2 mots * 6 niveaux = 12\n      expect(result.current.isLoading).toBe(false);\n    });\n\n    it('devrait ignorer les mots d\\'autres jours', async () => {\n      const mockVocabularyData = {\n        completedWords: {\n          '0': [\n            { word: 'yesterday', timestamp: 1640908800000 }, // Hier\n            { word: 'tomorrow', timestamp: 1641081600000 }, // Demain\n          ]\n        }\n      };\n\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key.includes('vocabulary_') && key.includes('_classic')) {\n          return Promise.resolve(JSON.stringify(mockVocabularyData));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { result, waitForNextUpdate } = renderHook(() => useDailyWords());\n\n      await waitForNextUpdate();\n\n      expect(result.current.wordsToday).toBe(0);\n    });\n\n    it('devrait gérer les données vides ou manquantes', async () => {\n      AsyncStorage.getItem.mockResolvedValue(null);\n\n      const { result, waitForNextUpdate } = renderHook(() => useDailyWords());\n\n      await waitForNextUpdate();\n\n      expect(result.current.wordsToday).toBe(0);\n      expect(result.current.isLoading).toBe(false);\n    });\n\n    it('devrait gérer les données corrompues', async () => {\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key.includes('vocabulary_1_classic')) {\n          return Promise.resolve('invalid json');\n        }\n        return Promise.resolve(null);\n      });\n\n      const { result, waitForNextUpdate } = renderHook(() => useDailyWords());\n\n      await waitForNextUpdate();\n\n      expect(result.current.wordsToday).toBe(0);\n      expect(result.current.isLoading).toBe(false);\n    });\n\n    it('devrait supporter l\\'ancien format de mots (string)', async () => {\n      const mockVocabularyData = {\n        completedWords: {\n          '0': ['hello', 'world'] // Ancien format sans timestamp\n        }\n      };\n\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key.includes('vocabulary_1_classic')) {\n          return Promise.resolve(JSON.stringify(mockVocabularyData));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { result, waitForNextUpdate } = renderHook(() => useDailyWords());\n\n      await waitForNextUpdate();\n\n      // Les mots sans timestamp ne sont pas comptés pour aujourd'hui\n      expect(result.current.wordsToday).toBe(0);\n    });\n  });\n\n  describe('Parcours des niveaux et modes', () => {\n    it('devrait parcourir tous les niveaux (1-6)', async () => {\n      const mockVocabularyData = {\n        completedWords: {\n          '0': [{ word: 'test', timestamp: 1640995200000 }]\n        }\n      };\n\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key.includes('vocabulary_') && key.includes('_classic')) {\n          return Promise.resolve(JSON.stringify(mockVocabularyData));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { result, waitForNextUpdate } = renderHook(() => useDailyWords());\n\n      await waitForNextUpdate();\n\n      // Vérifier que tous les niveaux ont été appelés\n      expect(AsyncStorage.getItem).toHaveBeenCalledWith('vocabulary_1_classic');\n      expect(AsyncStorage.getItem).toHaveBeenCalledWith('vocabulary_2_classic');\n      expect(AsyncStorage.getItem).toHaveBeenCalledWith('vocabulary_3_classic');\n      expect(AsyncStorage.getItem).toHaveBeenCalledWith('vocabulary_4_classic');\n      expect(AsyncStorage.getItem).toHaveBeenCalledWith('vocabulary_5_classic');\n      expect(AsyncStorage.getItem).toHaveBeenCalledWith('vocabulary_6_classic');\n\n      // Devrait compter 1 mot * 6 niveaux = 6 mots\n      expect(result.current.wordsToday).toBe(6);\n    });\n\n    it('ne devrait traiter que le mode classic (pas fast)', async () => {\n      const { result, waitForNextUpdate } = renderHook(() => useDailyWords());\n\n      await waitForNextUpdate();\n\n      // Vérifier qu'aucun appel n'a été fait pour le mode fast\n      expect(AsyncStorage.getItem).not.toHaveBeenCalledWith(expect.stringContaining('_fast'));\n      \n      // Mais que les appels classic ont été faits\n      expect(AsyncStorage.getItem).toHaveBeenCalledWith(expect.stringContaining('_classic'));\n    });\n  });\n\n  describe('Fonction refresh', () => {\n    it('devrait permettre de recalculer manuellement', async () => {\n      AsyncStorage.getItem.mockResolvedValue(null);\n\n      const { result, waitForNextUpdate } = renderHook(() => useDailyWords());\n      await waitForNextUpdate();\n\n      expect(result.current.wordsToday).toBe(0);\n\n      // Changer les données mockées\n      const mockVocabularyData = {\n        completedWords: {\n          '0': [{ word: 'new', timestamp: 1640995200000 }]\n        }\n      };\n\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key.includes('vocabulary_1_classic')) {\n          return Promise.resolve(JSON.stringify(mockVocabularyData));\n        }\n        return Promise.resolve(null);\n      });\n\n      await act(async () => {\n        result.current.refresh();\n      });\n\n      expect(result.current.wordsToday).toBe(1);\n    });\n  });\n\n  describe('Auto-refresh à minuit', () => {\n    it('devrait programmer un refresh à minuit', () => {\n      jest.useFakeTimers();\n      \n      const { result } = renderHook(() => useDailyWords());\n\n      // Avancer le temps jusqu'à minuit\n      const now = new Date(1640995200000); // 2022-01-01 00:00:00\n      const tomorrow = new Date(now);\n      tomorrow.setDate(tomorrow.getDate() + 1);\n      tomorrow.setHours(0, 0, 0, 0);\n      \n      const timeUntilMidnight = tomorrow.getTime() - now.getTime();\n      \n      jest.advanceTimersByTime(timeUntilMidnight);\n\n      // Le timer devrait être configuré\n      expect(setTimeout).toHaveBeenCalled();\n\n      jest.useRealTimers();\n    });\n  });\n\n  describe('Gestion des erreurs', () => {\n    it('devrait gérer les erreurs AsyncStorage gracieusement', async () => {\n      AsyncStorage.getItem.mockRejectedValue(new Error('Storage error'));\n\n      const { result, waitForNextUpdate } = renderHook(() => useDailyWords());\n\n      await waitForNextUpdate();\n\n      expect(result.current.wordsToday).toBe(0);\n      expect(result.current.isLoading).toBe(false);\n    });\n\n    it('devrait continuer même si un niveau échoue', async () => {\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key.includes('vocabulary_1_classic')) {\n          return Promise.reject(new Error('Level 1 error'));\n        }\n        if (key.includes('vocabulary_2_classic')) {\n          return Promise.resolve(JSON.stringify({\n            completedWords: {\n              '0': [{ word: 'test', timestamp: 1640995200000 }]\n            }\n          }));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { result, waitForNextUpdate } = renderHook(() => useDailyWords());\n\n      await waitForNextUpdate();\n\n      // Devrait compter le mot du niveau 2 malgré l'erreur du niveau 1\n      expect(result.current.wordsToday).toBe(1);\n    });\n  });\n\n  describe('Structure des données', () => {\n    it('devrait gérer les catégories multiples', async () => {\n      const mockVocabularyData = {\n        completedWords: {\n          '0': [{ word: 'cat1_word1', timestamp: 1640995200000 }],\n          '1': [\n            { word: 'cat2_word1', timestamp: 1640995200000 },\n            { word: 'cat2_word2', timestamp: 1640995200000 }\n          ],\n          '2': [{ word: 'cat3_word1', timestamp: 1640908800000 }] // Hier\n        }\n      };\n\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key.includes('vocabulary_1_classic')) {\n          return Promise.resolve(JSON.stringify(mockVocabularyData));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { result, waitForNextUpdate } = renderHook(() => useDailyWords());\n\n      await waitForNextUpdate();\n\n      // Devrait compter 3 mots d'aujourd'hui (cat1: 1, cat2: 2, cat3: 0)\n      expect(result.current.wordsToday).toBe(3);\n    });\n\n    it('devrait gérer les tableaux vides', async () => {\n      const mockVocabularyData = {\n        completedWords: {\n          '0': [],\n          '1': [{ word: 'test', timestamp: 1640995200000 }],\n          '2': null\n        }\n      };\n\n      AsyncStorage.getItem.mockImplementation((key) => {\n        if (key.includes('vocabulary_1_classic')) {\n          return Promise.resolve(JSON.stringify(mockVocabularyData));\n        }\n        return Promise.resolve(null);\n      });\n\n      const { result, waitForNextUpdate } = renderHook(() => useDailyWords());\n\n      await waitForNextUpdate();\n\n      expect(result.current.wordsToday).toBe(1);\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}