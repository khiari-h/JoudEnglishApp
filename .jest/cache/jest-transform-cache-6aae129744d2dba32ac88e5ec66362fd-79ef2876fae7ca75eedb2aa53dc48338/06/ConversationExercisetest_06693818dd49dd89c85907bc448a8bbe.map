{"version":3,"names":["createMockComponent","name","props","_jsxRuntime","jsx","_reactNative2","View","Object","assign","testID","_getJestObj","mock","router","push","jest","fn","__esModule","default","getConversationData","getLevelColor","_interopRequireDefault","require","_react","_reactNative","_conversations","_useConversation","_useLastActivity","_expoRouter","_require","describe","mockRoute","params","level","mockSaveActivity","createMockConversationState","overrides","arguments","length","undefined","loaded","hasValidData","currentScenario","title","description","conversation","sender","text","suggestions","message","isTyping","stats","completionProgress","currentStep","totalSteps","isConversationStarted","changeScenario","sendMessage","useSuggestion","toggleHelp","toggleDetailedProgress","setMessage","beforeEach","clearAllMocks","useLastActivity","mockReturnValue","saveActivity","test","useConversation","_render","render","route","queryByTestId","expect","toBeNull","_render2","getByTestId","toBeTruthy","toBe","toHaveBeenCalledTimes","toHaveBeenCalledWith","objectContaining","not","toHaveBeenCalled","_render3","header","onBackPress","pathname","mockConversationState","_render4","selector","onSelectScenario","_render5","input","onSendMessage","_render6","onPressSuggestion"],"sources":["ConversationExercise.test.js"],"sourcesContent":["\nimport React from 'react';\nimport { render } from '@testing-library/react-native';\nimport { View } from 'react-native';\nimport ConversationExercise from '../../../../src/screens/exercises/conversations';\n\n// =================================================================\n// MOCKS SETUP\n// =================================================================\n\n// Mock expo-router for navigation\njest.mock('expo-router', () => ({\n  router: {\n    push: jest.fn(),\n  },\n}));\n\n// Mock the core useConversation hook\njest.mock('../../../../src/screens/exercises/conversations/hooks/useConversation');\n\n// Mock other hooks and utils\njest.mock('../../../../src/hooks/useLastActivity', () => ({\n  __esModule: true,\n  // The default export is now a mock function, allowing us to control its return value\n  default: jest.fn(),\n}));\njest.mock('../../../../src/utils/conversation/conversationDataHelper', () => ({\n  getConversationData: jest.fn(),\n  getLevelColor: jest.fn(() => '#0000FF'),\n}));\n\n// Helper to create mock components that accept props and can be found with testID\nconst createMockComponent = (name) => (props) => <View testID={name} {...props} />;\n\n// Mock all child components to isolate ConversationExercise\njest.mock('../../../../src/screens/exercises/conversations/ConversationHeader', () => createMockComponent('ConversationHeader'));\njest.mock('../../../../src/screens/exercises/conversations/ConversationSelector', () => createMockComponent('ConversationSelector'));\njest.mock('../../../../src/screens/exercises/conversations/ConversationProgress', () => createMockComponent('ConversationProgress'));\njest.mock('../../../../src/screens/exercises/conversations/ConversationScenarioDescription', () => createMockComponent('ConversationScenarioDescription'));\njest.mock('../../../../src/screens/exercises/conversations/ConversationMessageList', () => createMockComponent('ConversationMessageList'));\njest.mock('../../../../src/screens/exercises/conversations/ConversationSuggestions', () => createMockComponent('ConversationSuggestions'));\njest.mock('../../../../src/screens/exercises/conversations/ConversationInput', () => createMockComponent('ConversationInput'));\n\n// Import the mocked hooks to control their behavior\nimport useConversation from '../../../../src/screens/exercises/conversations/hooks/useConversation';\nimport useLastActivity from '../../../../src/hooks/useLastActivity';\nimport { router } from 'expo-router';\n\n// =================================================================\n// TEST SUITE\n// =================================================================\n\ndescribe('ConversationExercise', () => {\n  const mockRoute = { params: { level: 'A1' } };\n  let mockSaveActivity;\n\n  // Helper to create a default mock state for the useConversation hook\n  const createMockConversationState = (overrides = {}) => ({\n    loaded: true,\n    hasValidData: true,\n    currentScenario: {\n      title: 'Scenario de Test',\n      description: 'Description du scenario.',\n    },\n    conversation: [{ sender: 'bot', text: 'Hello!' }],\n    suggestions: ['Hi', 'Hello there'],\n    message: '',\n    isTyping: false,\n    stats: { completionProgress: 50, currentStep: 1, totalSteps: 2 },\n    isConversationStarted: true,\n    // Mock functions that we can spy on\n    changeScenario: jest.fn(),\n    sendMessage: jest.fn(),\n    useSuggestion: jest.fn(),\n    toggleHelp: jest.fn(),\n    toggleDetailedProgress: jest.fn(),\n    setMessage: jest.fn(),\n    ...overrides,\n  });\n\n  beforeEach(() => {\n    // Reset all mocks before each test to ensure isolation\n    jest.clearAllMocks();\n\n    // Setup the mock for useLastActivity correctly\n    mockSaveActivity = jest.fn();\n    useLastActivity.mockReturnValue({ saveActivity: mockSaveActivity });\n  });\n\n  // --- Test Scenarios ---\n\n  test('should render loading state correctly', () => {\n    useConversation.mockReturnValue(createMockConversationState({ loaded: false }));\n    const { queryByTestId } = render(<ConversationExercise route={mockRoute} />);\n    // In loading state, the main content should not be visible\n    expect(queryByTestId('ConversationHeader')).toBeNull();\n  });\n\n  test('should render main content when data is loaded', () => {\n    useConversation.mockReturnValue(createMockConversationState());\n    const { getByTestId } = render(<ConversationExercise route={mockRoute} />);\n\n    // Check that child components are rendered\n    expect(getByTestId('ConversationHeader')).toBeTruthy();\n    const description = getByTestId('ConversationScenarioDescription');\n    expect(description.props.description).toBe('Description du scenario.');\n  });\n\n  test('should call saveActivity on mount if conversation has started', () => {\n    useConversation.mockReturnValue(createMockConversationState({ isConversationStarted: true }));\n    render(<ConversationExercise route={mockRoute} />);\n\n    expect(mockSaveActivity).toHaveBeenCalledTimes(1);\n    expect(mockSaveActivity).toHaveBeenCalledWith(expect.objectContaining({\n      title: 'Conversations',\n      level: 'A1',\n    }));\n  });\n\n  test('should NOT call saveActivity on mount if conversation has not started', () => {\n    useConversation.mockReturnValue(createMockConversationState({ isConversationStarted: false }));\n    render(<ConversationExercise route={mockRoute} />);\n\n    expect(mockSaveActivity).not.toHaveBeenCalled();\n  });\n\n  test('should handle back press correctly', () => {\n    useConversation.mockReturnValue(createMockConversationState());\n    const { getByTestId } = render(<ConversationExercise route={mockRoute} />);\n\n    const header = getByTestId('ConversationHeader');\n    // Directly invoke the callback prop to simulate the event\n    header.props.onBackPress();\n\n    expect(router.push).toHaveBeenCalledWith({ \n      pathname: '/tabs/exerciseSelection', \n      params: { level: 'A1' } \n    });\n  });\n\n  test('should handle scenario change correctly', () => {\n    const mockConversationState = createMockConversationState();\n    useConversation.mockReturnValue(mockConversationState);\n    const { getByTestId } = render(<ConversationExercise route={mockRoute} />);\n\n    const selector = getByTestId('ConversationSelector');\n    // Directly invoke the callback prop with the new scenario index\n    selector.props.onSelectScenario(1);\n\n    expect(mockConversationState.changeScenario).toHaveBeenCalledWith(1);\n  });\n\n  test('should handle sending a message correctly', () => {\n    const mockConversationState = createMockConversationState();\n    useConversation.mockReturnValue(mockConversationState);\n    const { getByTestId } = render(<ConversationExercise route={mockRoute} />);\n\n    const input = getByTestId('ConversationInput');\n    // Directly invoke the callback prop\n    input.props.onSendMessage();\n\n    expect(mockConversationState.sendMessage).toHaveBeenCalledTimes(1);\n  });\n\n  test('should handle using a suggestion correctly', () => {\n    const mockConversationState = createMockConversationState();\n    useConversation.mockReturnValue(mockConversationState);\n    const { getByTestId } = render(<ConversationExercise route={mockRoute} />);\n\n    const suggestions = getByTestId('ConversationSuggestions');\n    // Directly invoke the callback prop with a sample suggestion\n    suggestions.props.onPressSuggestion('Hi');\n\n    expect(mockConversationState.useSuggestion).toHaveBeenCalledWith('Hi');\n  });\n});\n"],"mappings":"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","ignoreList":[]}