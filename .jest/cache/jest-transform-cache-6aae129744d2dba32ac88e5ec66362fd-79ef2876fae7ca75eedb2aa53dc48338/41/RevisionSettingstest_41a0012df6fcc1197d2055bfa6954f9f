dc6f0444f60b03f878fb349725bf6953
_getJestObj().mock('../../../src/hooks/useRevisionSettings');
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _RevisionSettings = _interopRequireDefault(require("../../../src/components/setting/RevisionSettings"));
var _useRevisionSettings = require("../../../src/hooks/useRevisionSettings");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('RevisionSettings', function () {
  var mockPreferences = {
    isDisabled: false,
    frequency: 50,
    questionsCount: 10,
    nextRevisionAt: 150
  };
  var mockEnableRevisions = jest.fn();
  var mockDisableRevisions = jest.fn();
  var mockUpdateFrequency = jest.fn();
  beforeEach(function () {
    _useRevisionSettings.useRevisionSettings.mockReturnValue({
      preferences: mockPreferences,
      isLoading: false,
      enableRevisions: mockEnableRevisions,
      disableRevisions: mockDisableRevisions,
      updateFrequency: mockUpdateFrequency
    });
  });
  afterEach(function () {
    jest.clearAllMocks();
  });
  it('devrait afficher le titre et le switch des r√©visions automatiques', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionSettings.default, {})),
      getByText = _render.getByText,
      getByRole = _render.getByRole;
    expect(getByText('üîÑ R√©visions automatiques')).toBeTruthy();
    expect(getByText('R√©visions automatiques')).toBeTruthy();
    expect(getByRole('switch')).toBeTruthy();
  });
  it('devrait afficher les options de fr√©quence si les r√©visions sont activ√©es', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionSettings.default, {})),
      getByText = _render2.getByText;
    expect(getByText('Fr√©quence :')).toBeTruthy();
    expect(getByText('Tous les 25 mots (l√©ger)')).toBeTruthy();
    expect(getByText('Tous les 50 mots (standard)')).toBeTruthy();
    expect(getByText('Tous les 100 mots (espac√©)')).toBeTruthy();
  });
  it('ne devrait pas afficher les options de fr√©quence si les r√©visions sont d√©sactiv√©es', function () {
    _useRevisionSettings.useRevisionSettings.mockReturnValueOnce({
      preferences: Object.assign({}, mockPreferences, {
        isDisabled: true
      }),
      isLoading: false,
      enableRevisions: mockEnableRevisions,
      disableRevisions: mockDisableRevisions,
      updateFrequency: mockUpdateFrequency
    });
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionSettings.default, {})),
      queryByText = _render3.queryByText;
    expect(queryByText('Fr√©quence :')).toBeNull();
    expect(queryByText('Tous les 25 mots (l√©ger)')).toBeNull();
    expect(queryByText('‚ö†Ô∏è R√©visions d√©sactiv√©es')).toBeTruthy();
  });
  it('devrait appeler disableRevisions quand le switch est d√©sactiv√©', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionSettings.default, {})),
      getByRole = _render4.getByRole;
    var toggleSwitch = getByRole('switch');
    (0, _reactNative.fireEvent)(toggleSwitch, 'onValueChange', false);
    yield (0, _reactNative.waitFor)(function () {
      return expect(mockDisableRevisions).toHaveBeenCalled();
    });
  }));
  it('devrait appeler enableRevisions quand le switch est activ√©', (0, _asyncToGenerator2.default)(function* () {
    _useRevisionSettings.useRevisionSettings.mockReturnValueOnce({
      preferences: Object.assign({}, mockPreferences, {
        isDisabled: true
      }),
      isLoading: false,
      enableRevisions: mockEnableRevisions,
      disableRevisions: mockDisableRevisions,
      updateFrequency: mockUpdateFrequency
    });
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionSettings.default, {})),
      getByRole = _render5.getByRole;
    var toggleSwitch = getByRole('switch');
    (0, _reactNative.fireEvent)(toggleSwitch, 'onValueChange', true);
    yield (0, _reactNative.waitFor)(function () {
      return expect(mockEnableRevisions).toHaveBeenCalledWith(mockPreferences.frequency, mockPreferences.questionsCount);
    });
  }));
  it('devrait appeler updateFrequency quand une option de fr√©quence est press√©e', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionSettings.default, {})),
      getByText = _render6.getByText;
    var option50 = getByText('Tous les 50 mots (standard)');
    _reactNative.fireEvent.press(option50);
    expect(mockUpdateFrequency).toHaveBeenCalledWith(50);
    var option25 = getByText('Tous les 25 mots (l√©ger)');
    _reactNative.fireEvent.press(option25);
    expect(mockUpdateFrequency).toHaveBeenCalledWith(25);
  });
  it('devrait afficher le message de chargement quand isLoading est vrai', function () {
    _useRevisionSettings.useRevisionSettings.mockReturnValueOnce({
      preferences: mockPreferences,
      isLoading: true,
      enableRevisions: mockEnableRevisions,
      disableRevisions: mockDisableRevisions,
      updateFrequency: mockUpdateFrequency
    });
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_RevisionSettings.default, {})),
      getByText = _render7.getByText;
    expect(getByText('Chargement des param√®tres...')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,