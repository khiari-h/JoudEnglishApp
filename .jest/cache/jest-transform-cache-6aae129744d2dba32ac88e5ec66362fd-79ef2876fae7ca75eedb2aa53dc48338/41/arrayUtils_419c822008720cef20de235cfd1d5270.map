{"version":3,"names":["shuffleArray","exports","array","cov_bv1jn9vb7","f","s","Array","isArray","b","length","_toConsumableArray2","default","shuffled","i","j","Math","floor","random","_ref","shuffleAndTake","count","slice","min","shuffleWithFallback","fallbackArray","combined","concat","shuffleInPlace","_ref2"],"sources":["arrayUtils.js"],"sourcesContent":["// src/utils/arrayUtils.js - Utilitaires pour la manipulation d'arrays\r\n\r\n/**\r\n * Mélange un array en utilisant l'algorithme Fisher-Yates (shuffle)\r\n * Plus efficace et prévisible que sort(() => Math.random() - 0.5)\r\n * @param {Array} array - L'array à mélanger\r\n * @returns {Array} - Une copie mélangée de l'array\r\n */\r\nexport const shuffleArray = (array) => {\r\n  if (!Array.isArray(array)) {\r\n    return [];\r\n  }\r\n  \r\n  if (array.length <= 1) {\r\n    return [...array];\r\n  }\r\n\r\n  const shuffled = [...array];\r\n  for (let i = shuffled.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\r\n  }\r\n  \r\n  return shuffled;\r\n};\r\n\r\n/**\r\n * Mélange un array et retourne les n premiers éléments\r\n * @param {Array} array - L'array à mélanger\r\n * @param {number} count - Nombre d'éléments à retourner\r\n * @returns {Array} - Les n premiers éléments mélangés\r\n */\r\nexport const shuffleAndTake = (array, count) => {\r\n  if (!Array.isArray(array) || array.length === 0 || count <= 0) {\r\n    return [];\r\n  }\r\n  \r\n  const shuffled = shuffleArray(array);\r\n  return shuffled.slice(0, Math.min(count, array.length));\r\n};\r\n\r\n/**\r\n * Mélange un array et retourne les n premiers éléments avec fallback\r\n * @param {Array} array - L'array principal\r\n * @param {Array} fallbackArray - Array de fallback si le principal est insuffisant\r\n * @param {number} count - Nombre d'éléments à retourner\r\n * @returns {Array} - Les n premiers éléments mélangés\r\n */\r\nexport const shuffleWithFallback = (array, fallbackArray, count) => {\r\n  if (!Array.isArray(array) || array.length === 0) {\r\n    return shuffleAndTake(fallbackArray, count);\r\n  }\r\n  \r\n  if (array.length >= count) {\r\n    return shuffleAndTake(array, count);\r\n  }\r\n  \r\n  // Combiner les deux arrays et mélanger\r\n  const combined = [...array, ...fallbackArray];\r\n  return shuffleAndTake(combined, count);\r\n};\r\n\r\n/**\r\n * Mélange un array en place (modifie l'array original)\r\n * @param {Array} array - L'array à mélanger\r\n */\r\nexport const shuffleInPlace = (array) => {\r\n  if (!Array.isArray(array) || array.length <= 1) {\r\n    return;\r\n  }\r\n\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n};\r\n"],"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","ignoreList":[]}