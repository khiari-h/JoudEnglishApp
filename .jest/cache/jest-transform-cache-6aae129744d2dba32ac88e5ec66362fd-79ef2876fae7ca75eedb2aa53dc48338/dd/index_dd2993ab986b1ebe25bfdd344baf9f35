92b1bf4a6067a0d49e460aed0d0ca209
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _native = require("@react-navigation/native");
var _expoRouter = require("expo-router");
var _Container = _interopRequireWildcard(require("../../../components/layout/Container"));
var _WordGamesHeader = _interopRequireDefault(require("./WordGamesHeader"));
var _WordGamesProgress = _interopRequireDefault(require("./WordGamesProgress"));
var _WordGamesCard = _interopRequireDefault(require("./WordGamesCard"));
var _WordGamesNavigation = _interopRequireDefault(require("./WordGamesNavigation"));
var _WordGamesResults = _interopRequireDefault(require("./WordGamesResults"));
var _useWordGames2 = _interopRequireDefault(require("./hooks/useWordGames"));
var _useLastActivity2 = _interopRequireDefault(require("../../../hooks/useLastActivity"));
var _wordGamesDataHelper = require("../../../utils/wordGames/wordGamesDataHelper");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var WordGamesExercise = function WordGamesExercise(_ref) {
  var route = _ref.route;
  var navigation = (0, _native.useNavigation)();
  var _ref2 = (route == null ? void 0 : route.params) || {},
    _ref2$level = _ref2.level,
    level = _ref2$level === void 0 ? "A1" : _ref2$level;
  var styles = (0, _style.default)();
  var _useLastActivity = (0, _useLastActivity2.default)(),
    saveActivity = _useLastActivity.saveActivity;
  var levelColor = (0, _wordGamesDataHelper.getLevelColor)(level);
  var wordGamesData = (0, _react.useMemo)(function () {
    return (0, _wordGamesDataHelper.getWordGamesData)(level);
  }, [level]);
  var _useWordGames = (0, _useWordGames2.default)(wordGamesData, level),
    currentGameIndex = _useWordGames.currentGameIndex,
    selectedItems = _useWordGames.selectedItems,
    matchedItems = _useWordGames.matchedItems,
    showFeedback = _useWordGames.showFeedback,
    isCorrect = _useWordGames.isCorrect,
    showResults = _useWordGames.showResults,
    gameResults = _useWordGames.gameResults,
    shuffledOptions = _useWordGames.shuffledOptions,
    loaded = _useWordGames.loaded,
    games = _useWordGames.games,
    currentGame = _useWordGames.currentGame,
    totalGames = _useWordGames.totalGames,
    fadeAnim = _useWordGames.fadeAnim,
    bounceAnim = _useWordGames.bounceAnim,
    handleSelectItem = _useWordGames.handleSelectItem,
    checkAnswer = _useWordGames.checkAnswer,
    handleNext = _useWordGames.handleNext,
    handlePrevious = _useWordGames.handlePrevious,
    resetGames = _useWordGames.resetGames,
    canGoToPrevious = _useWordGames.canGoToPrevious,
    isLastGame = _useWordGames.isLastGame,
    stats = _useWordGames.stats,
    display = _useWordGames.display;
  var activityMetadata = (0, _react.useMemo)(function () {
    return {
      game: currentGameIndex,
      totalGames: totalGames,
      gameType: (currentGame == null ? void 0 : currentGame.type) || "matching",
      gameTitle: (currentGame == null ? void 0 : currentGame.title) || `Jeu ${currentGameIndex + 1}`,
      score: (stats == null ? void 0 : stats.score) || 0
    };
  }, [currentGameIndex, totalGames, currentGame == null ? void 0 : currentGame.type, currentGame == null ? void 0 : currentGame.title, stats == null ? void 0 : stats.score]);
  var handleSaveActivity = (0, _react.useCallback)(function () {
    if (loaded && games.length > 0 && currentGame && !showResults) {
      saveActivity({
        title: "Jeux de mots",
        level: level,
        type: "wordGames",
        metadata: activityMetadata
      });
    }
  }, [loaded, games.length, currentGame, showResults, level, saveActivity, activityMetadata]);
  (0, _react.useEffect)(function () {
    handleSaveActivity();
  }, [handleSaveActivity]);
  var handleBackPress = (0, _react.useCallback)(function () {
    _expoRouter.router.push({
      pathname: "/tabs/exerciseSelection",
      params: {
        level: level
      }
    });
  }, [level]);
  var handleCheckAnswer = (0, _react.useCallback)(function () {
    return checkAnswer();
  }, [checkAnswer]);
  var handleNextGame = (0, _react.useCallback)(function () {
    handleNext();
  }, [handleNext]);
  var handlePreviousGame = (0, _react.useCallback)(function () {
    return handlePrevious();
  }, [handlePrevious]);
  var handleResetGames = (0, _react.useCallback)(function () {
    return resetGames();
  }, [resetGames]);
  var handleContinue = (0, _react.useCallback)(function () {
    return navigation.goBack();
  }, [navigation]);
  if (!loaded || !currentGame) {
    return (0, _jsxRuntime.jsxs)(_Container.default, {
      safeArea: true,
      safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
      backgroundColor: "#f8fafc",
      statusBarStyle: "dark-content",
      children: [(0, _jsxRuntime.jsx)(_WordGamesHeader.default, {
        level: level,
        onBackPress: handleBackPress
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.loadingContainer,
        children: (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
          testID: "activity-indicator",
          size: "large",
          color: levelColor
        })
      })]
    });
  }
  if (games.length === 0) {
    return (0, _jsxRuntime.jsxs)(_Container.default, {
      safeArea: true,
      safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
      backgroundColor: "#f8fafc",
      statusBarStyle: "dark-content",
      children: [(0, _jsxRuntime.jsx)(_WordGamesHeader.default, {
        level: level,
        onBackPress: handleBackPress
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.emptyContainer,
        children: (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
          testID: "activity-indicator",
          size: "large",
          color: levelColor
        })
      })]
    });
  }
  if (showResults) {
    return (0, _jsxRuntime.jsx)(_Container.default, {
      safeArea: true,
      safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
      backgroundColor: "#f8fafc",
      statusBarStyle: "dark-content",
      children: (0, _jsxRuntime.jsx)(_WordGamesResults.default, {
        games: games,
        gameResults: gameResults,
        finalScore: stats,
        levelColor: levelColor,
        onPlayAgain: handleResetGames,
        onContinue: handleContinue
      })
    });
  }
  return (0, _jsxRuntime.jsxs)(_Container.default, {
    safeArea: true,
    safeAreaEdges: _Container.CONTAINER_SAFE_EDGES.ALL,
    backgroundColor: "#f8fafc",
    statusBarStyle: "dark-content",
    withPadding: false,
    children: [(0, _jsxRuntime.jsx)(_WordGamesHeader.default, {
      level: level,
      onBackPress: handleBackPress
    }), (0, _jsxRuntime.jsx)(_WordGamesProgress.default, {
      currentGame: display.currentGameIndex,
      totalGames: totalGames,
      gameTitle: display.gameTitle,
      completedGames: stats.completedGamesCount,
      levelColor: levelColor,
      gameResults: gameResults,
      level: level
    }), (0, _jsxRuntime.jsx)(_WordGamesCard.default, {
      currentGame: currentGame,
      selectedItems: selectedItems,
      matchedItems: matchedItems,
      shuffledOptions: shuffledOptions,
      showFeedback: showFeedback,
      isCorrect: isCorrect,
      levelColor: levelColor,
      fadeAnim: fadeAnim,
      bounceAnim: bounceAnim,
      onSelectItem: handleSelectItem
    }), (0, _jsxRuntime.jsx)(_WordGamesNavigation.default, {
      currentGame: currentGame,
      showFeedback: showFeedback,
      selectedItems: selectedItems,
      isLastGame: isLastGame,
      canGoPrevious: canGoToPrevious,
      levelColor: levelColor,
      onCheckAnswer: handleCheckAnswer,
      onNext: handleNextGame,
      onPrevious: handlePreviousGame
    })]
  });
};
var _default = exports.default = WordGamesExercise;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,