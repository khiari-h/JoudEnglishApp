{"version":3,"names":["_getJestObj","mock","useFocusEffect","jest","fn","callback","router","push","back","Stack","_ref","children","_jsxRuntime","jsx","Fragment","useLocalSearchParams","useNavigation","navigate","goBack","canGoBack","addListener","isFocused","actualUseVocabulary","requireActual","default","vocabularyData","level","mode","loaded","Object","assign","currentWord","exercises","words","display","wordCounter","categories","map","ex","name","title","isLastWordInExercise","handleNext","mockReturnValue","completed","saveData","mockResolvedValue","undefined","isBonusLevel","getLevelColor","getVocabularyData","word","translation","example","useLastActivity","saveActivity","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_vocabulary","_require","describe","beforeEach","clearAllMocks","test","_render","render","route","params","getByText","waitFor","expect","toBeTruthy","_render2","_render3","_render4","getByTextA1","queryByTextA1","queryByText","rerender","toBeNull","_render5"],"sources":["level-loading.test.js"],"sourcesContent":["import React from 'react';\r\nimport { render, waitFor } from '@testing-library/react-native';\r\n\r\n// Screen to test\r\nimport VocabularyExercise from '../../src/screens/exercises/vocabulary';\r\n\r\n// Mock expo-router\r\njest.mock('expo-router', () => ({\r\n  useFocusEffect: jest.fn(callback => callback()),\r\n  router: {\r\n    push: jest.fn(),\r\n    back: jest.fn(),\r\n  },\r\n  Stack: ({ children }) => <>{children}</>,\r\n  useLocalSearchParams: () => ({}),\r\n  useNavigation: () => ({\r\n    navigate: jest.fn(),\r\n    goBack: jest.fn(),\r\n    canGoBack: jest.fn(() => true),\r\n    addListener: jest.fn(),\r\n    isFocused: jest.fn(() => true),\r\n  }),\r\n}));\r\n\r\n// Mock useVocabulary hook\r\njest.mock('../../src/screens/exercises/vocabulary/hooks/useVocabulary', () => {\r\n  const actualUseVocabulary = jest.requireActual('../../src/screens/exercises/vocabulary/hooks/useVocabulary').default;\r\n  return jest.fn((vocabularyData, level, mode) => {\r\n    if (!vocabularyData) {\r\n      return { loaded: false };\r\n    }\r\n    return {\r\n      ...actualUseVocabulary(vocabularyData, level, mode),\r\n      loaded: true,\r\n      currentWord: vocabularyData.exercises[0].words[0],\r\n      display: {\r\n        wordCounter: '1 / 1',\r\n        categories: vocabularyData.exercises.map(ex => ({ name: ex.title, words: ex.words })),\r\n      },\r\n      isLastWordInExercise: true,\r\n      handleNext: jest.fn().mockReturnValue({ completed: true }),\r\n      saveData: jest.fn().mockResolvedValue(undefined),\r\n    };\r\n  });\r\n});\r\n\r\n// Mock vocabularyDataHelper\r\njest.mock('../../src/utils/vocabulary/vocabularyDataHelper', () => ({\r\n  isBonusLevel: jest.fn(() => false),\r\n  getLevelColor: jest.fn(() => 'blue'),\r\n  getVocabularyData: jest.fn((level, mode) => {\r\n    if (level === 'A1' || level === '1') {\r\n      return {\r\n        exercises: [{\r\n          title: 'Identité & informations personnelles',\r\n          words: [\r\n            { word: 'name', translation: 'nom', example: 'My name is Sarah.' },\r\n            { word: 'hello', translation: 'bonjour', example: 'Hello, how are you?' }\r\n          ],\r\n        }],\r\n      };\r\n    }\r\n    if (level === 'B1' || level === '3') {\r\n      return {\r\n        exercises: [{\r\n          title: 'Expression & Communication Avancée',\r\n          words: [\r\n            { word: 'rhetoric', translation: 'rhétorique', example: 'His rhetoric was powerful enough to convince the entire audience.' },\r\n            { word: 'sophisticated', translation: 'sophistiqué', example: 'She has a sophisticated understanding of the topic.' }\r\n          ],\r\n        }],\r\n      };\r\n    }\r\n    if (level === 'C1' || level === '5') {\r\n      return {\r\n        exercises: [{\r\n          title: 'Maîtrise Linguistique Avancée',\r\n          words: [\r\n            { word: 'ubiquitous', translation: 'omniprésent', example: 'Smartphones have become ubiquitous in modern society.' },\r\n            { word: 'paradigm', translation: 'paradigme', example: 'This discovery represents a new paradigm in science.' }\r\n          ],\r\n        }],\r\n      };\r\n    }\r\n    return null;\r\n  }),\r\n}));\r\n\r\n// Mock other hooks\r\njest.mock('../../src/hooks/useLastActivity', () => ({\r\n  useLastActivity: jest.fn(() => ({\r\n    saveActivity: jest.fn(),\r\n  })),\r\n}));\r\n\r\ndescribe('Test d\\'intégration: Chargement des données par niveau', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  test('VocabularyExercise charge les données du niveau A1 correctement', async () => {\r\n    const { getByText } = render(\r\n      <VocabularyExercise route={{ params: { level: 'A1', mode: 'classic' } }} />\r\n    );\r\n\r\n    await waitFor(() => {\r\n      // Vérifier que le mot de niveau A1 est affiché\r\n      expect(getByText('name')).toBeTruthy();\r\n      // Vérifier que la traduction est correcte\r\n      expect(getByText('nom')).toBeTruthy();\r\n      // Vérifier que la catégorie est correcte pour A1\r\n      expect(getByText('Identité & informations personnelles')).toBeTruthy();\r\n    });\r\n  });\r\n\r\n  test('VocabularyExercise charge les données du niveau B1 correctement', async () => {\r\n    const { getByText } = render(\r\n      <VocabularyExercise route={{ params: { level: 'B1', mode: 'classic' } }} />\r\n    );\r\n\r\n    await waitFor(() => {\r\n      // Vérifier que le mot de niveau B1 est affiché\r\n      expect(getByText('rhetoric')).toBeTruthy();\r\n      // Vérifier que la traduction est correcte\r\n      expect(getByText('rhétorique')).toBeTruthy();\r\n      // Vérifier que la catégorie est correcte pour B1\r\n      expect(getByText('Expression & Communication Avancée')).toBeTruthy();\r\n    });\r\n  });\r\n\r\n  test('VocabularyExercise charge les données du niveau C1 correctement', async () => {\r\n    const { getByText } = render(\r\n      <VocabularyExercise route={{ params: { level: 'C1', mode: 'classic' } }} />\r\n    );\r\n\r\n    await waitFor(() => {\r\n      // Vérifier que le mot de niveau C1 est affiché\r\n      expect(getByText('ubiquitous')).toBeTruthy();\r\n      // Vérifier que la traduction est correcte\r\n      expect(getByText('omniprésent')).toBeTruthy();\r\n      // Vérifier que la catégorie est correcte pour C1\r\n      expect(getByText('Maîtrise Linguistique Avancée')).toBeTruthy();\r\n    });\r\n  });\r\n\r\n  test('Vérification que les mots sont bien différents selon les niveaux', async () => {\r\n    // Test avec A1\r\n    const { getByText: getByTextA1, queryByText: queryByTextA1, rerender } = render(\r\n      <VocabularyExercise route={{ params: { level: 'A1', mode: 'classic' } }} />\r\n    );\r\n\r\n    await waitFor(() => {\r\n      expect(getByTextA1('name')).toBeTruthy();\r\n      // Vérifier qu'on n'a pas les mots des autres niveaux\r\n      expect(queryByTextA1('rhetoric')).toBeNull();\r\n      expect(queryByTextA1('ubiquitous')).toBeNull();\r\n    });\r\n\r\n    // Changer pour B1\r\n    rerender(<VocabularyExercise route={{ params: { level: 'B1', mode: 'classic' } }} />);\r\n\r\n    await waitFor(() => {\r\n      expect(getByTextA1('rhetoric')).toBeTruthy();\r\n      // Vérifier qu'on n'a plus les mots A1\r\n      expect(queryByTextA1('name')).toBeNull();\r\n      expect(queryByTextA1('ubiquitous')).toBeNull();\r\n    });\r\n  });\r\n\r\n  test('Le mode d\\'exercice est correctement pris en compte', async () => {\r\n    const { getByText } = render(\r\n      <VocabularyExercise route={{ params: { level: 'A1', mode: 'reverse' } }} />\r\n    );\r\n\r\n    await waitFor(() => {\r\n      // Même avec le mode reverse, on doit avoir les bonnes données de niveau\r\n      expect(getByText('name')).toBeTruthy();\r\n      expect(getByText('nom')).toBeTruthy();\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}