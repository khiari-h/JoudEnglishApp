614757c7cb4cbdbcc8f220f968541c3c
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return require('@react-native-async-storage/async-storage/jest/async-storage-mock');
});
_getJestObj().mock('expo-font', function () {
  return {
    useFonts: function useFonts() {
      return [true];
    },
    isLoaded: function isLoaded() {
      return true;
    }
  };
});
_getJestObj().mock('expo-haptics', function () {
  return {
    impactAsync: jest.fn()
  };
});
_getJestObj().mock('react-native-reanimated', function () {
  var Reanimated = require('react-native-reanimated/mock');
  Reanimated.default.call = function () {};
  return Reanimated;
});
_getJestObj().mock('react-native/Libraries/Settings/Settings', function () {
  return {
    get: jest.fn(function () {
      return 'light';
    }),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn()
  };
});
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  RN.Animated = Object.assign({}, RN.Animated, {
    Value: jest.fn(function () {
      return {
        interpolate: jest.fn(function (config) {
          return config.outputRange[0];
        }),
        addListener: jest.fn(),
        removeListener: jest.fn(),
        removeAllListeners: jest.fn(),
        stopAnimation: jest.fn(),
        resetAnimation: jest.fn(),
        setValue: jest.fn()
      };
    }),
    timing: jest.fn(function () {
      return {
        start: jest.fn(function (callback) {
          if (callback) {
            callback({
              finished: true
            });
          }
        })
      };
    })
  });
  RN.StatusBar = {
    setBarStyle: jest.fn(),
    setBackgroundColor: jest.fn(),
    setHidden: jest.fn(),
    setNetworkActivityIndicatorVisible: jest.fn(),
    setTranslucent: jest.fn()
  };
  return RN;
});
var _reactNative = require("react-native");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
_reactNative.NativeModules.SettingsManager = _reactNative.NativeModules.SettingsManager || {
  settings: {
    AppleLocale: 'en_US'
  }
};
if (typeof setImmediate === 'undefined') {
  global.setImmediate = function (fn) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return setTimeout.apply(void 0, [fn, 0].concat(args));
  };
}
if (typeof clearImmediate === 'undefined') {
  global.clearImmediate = function (id) {
    return clearTimeout(id);
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,