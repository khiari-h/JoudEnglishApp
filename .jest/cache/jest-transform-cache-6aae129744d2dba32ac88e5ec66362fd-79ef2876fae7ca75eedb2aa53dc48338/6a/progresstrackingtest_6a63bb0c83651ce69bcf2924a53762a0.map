{"version":3,"names":["_getJestObj","mock","Object","assign","jest","requireActual","useNavigation","navigate","fn","goBack","useRoute","params","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_layout","_ProgressContext","_AppProvider","_jsxRuntime","_require","describe","it","default","_render","render","jsx","AppProvider","children","ProgressProvider","getByText","findByText","fireEvent","press","levelA1","vocabExercise","updatedVocabExercise","expect","toBeTruthy","updatedLevelA1","continueSection"],"sources":["progress-tracking.test.js"],"sourcesContent":["import React from 'react';\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\nimport App from '../../app/_layout'; // Assurez-vous que le chemin est correct\nimport { ProgressProvider } from '../../src/contexts/ProgressContext';\nimport { AppProvider } from '../../src/contexts/AppProvider';\n\njest.mock('@react-navigation/native', () => ({\n  ...jest.requireActual('@react-navigation/native'),\n  useNavigation: () => ({\n    navigate: jest.fn(),\n    goBack: jest.fn(),\n  }),\n  useRoute: () => ({\n    params: {},\n  }),\n}));\n\ndescribe('Progress Tracking Integration Test', () => {\n  it('should update progress across screens after completing an exercise', async () => {\n    const { getByText, findByText } = render(\n      <AppProvider>\n        <ProgressProvider>\n          <App />\n        </ProgressProvider>\n      </AppProvider>\n    );\n\n    // 1. Démarrer sur le Dashboard et naviguer vers la sélection de niveau\n    fireEvent.press(getByText(/Commencer l'apprentissage/i));\n\n    // 2. Sélectionner un niveau (par exemple, A1)\n    const levelA1 = await findByText(/Niveau A1/i);\n    fireEvent.press(levelA1);\n\n    // 3. Sélectionner un type d'exercice (par exemple, Vocabulaire)\n    const vocabExercise = await findByText(/Vocabulaire/i);\n    fireEvent.press(vocabExercise);\n\n    // 4. Simuler la réalisation de l'exercice et la mise à jour de la progression\n    // (Cette partie peut nécessiter une simulation plus complexe en fonction de votre code)\n    // Pour ce test, nous allons simuler un changement de progression manuellement\n    // et vérifier si l'interface utilisateur réagit correctement.\n\n    // NOTE: La simulation directe de la logique de l'exercice peut être complexe.\n    // Une approche alternative consiste à déclencher des événements qui modifient le contexte de progression.\n    // Par exemple, si vous avez un événement `onExerciseComplete`, déclenchez-le ici.\n\n    // Pour les besoins de ce test, nous allons supposer qu'une action met à jour la progression.\n    // Par exemple, en appelant une fonction du contexte de progression.\n    // Dans un vrai test, vous interagiriez avec les composants de l'exercice.\n\n    // Simuler un retour à l'écran de sélection d'exercices\n    fireEvent.press(getByText(/Retour/i)); // Assurez-vous d'avoir un bouton \"Retour\"\n\n    // 5. Vérifier la mise à jour de la progression sur l'écran de sélection d'exercices\n    const updatedVocabExercise = await findByText(/Vocabulaire - 10%/i);\n    expect(updatedVocabExercise).toBeTruthy();\n\n    // 6. Retourner à l'écran de sélection de niveau\n    fireEvent.press(getByText(/Retour/i));\n\n    // 7. Vérifier la mise à jour de la progression sur l'écran de sélection de niveau\n    const updatedLevelA1 = await findByText(/Niveau A1 - 1%/i);\n    expect(updatedLevelA1).toBeTruthy();\n\n    // 8. Retourner au Dashboard\n    fireEvent.press(getByText(/Retour/i));\n\n    // 9. Vérifier la mise à jour de la progression sur le Dashboard\n    const continueSection = await findByText(/Continuer : Vocabulaire A1/i);\n    expect(continueSection).toBeTruthy();\n  });\n});"],"mappings":"AAMAA,WAAA,GAAKC,IAAI,CAAC,0BAA0B,EAAE;EAAA,OAAAC,MAAA,CAAAC,MAAA,KACjCC,IAAI,CAACC,aAAa,CAAC,0BAA0B,CAAC;IACjDC,aAAa,EAAE,SAAfA,aAAaA,CAAA;MAAA,OAAS;QACpBC,QAAQ,EAAEH,IAAI,CAACI,EAAE,CAAC,CAAC;QACnBC,MAAM,EAAEL,IAAI,CAACI,EAAE,CAAC;MAClB,CAAC;IAAA,CAAC;IACFE,QAAQ,EAAE,SAAVA,QAAQA,CAAA;MAAA,OAAS;QACfC,MAAM,EAAE,CAAC;MACX,CAAC;IAAA;EAAC;AAAA,CACF,CAAC;AAAC,IAAAC,sBAAA,GAAAC,OAAA;AAAA,IAAAC,kBAAA,GAAAF,sBAAA,CAAAC,OAAA;AAfJ,IAAAE,MAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,YAAA,GAAAH,OAAA;AACA,IAAAI,OAAA,GAAAL,sBAAA,CAAAC,OAAA;AACA,IAAAK,gBAAA,GAAAL,OAAA;AACA,IAAAM,YAAA,GAAAN,OAAA;AAA6D,IAAAO,WAAA,GAAAP,OAAA;AAAA,SAAAb,YAAA;EAAA,IAAAqB,QAAA,GAAAR,OAAA;IAAAT,IAAA,GAAAiB,QAAA,CAAAjB,IAAA;EAAAJ,WAAA,YAAAA,YAAA;IAAA,OAAAI,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAa7DkB,QAAQ,CAAC,oCAAoC,EAAE,YAAM;EACnDC,EAAE,CAAC,oEAAoE,MAAAT,kBAAA,CAAAU,OAAA,EAAE,aAAY;IACnF,IAAAC,OAAA,GAAkC,IAAAC,mBAAM,EACtC,IAAAN,WAAA,CAAAO,GAAA,EAACR,YAAA,CAAAS,WAAW;QAAAC,QAAA,EACV,IAAAT,WAAA,CAAAO,GAAA,EAACT,gBAAA,CAAAY,gBAAgB;UAAAD,QAAA,EACf,IAAAT,WAAA,CAAAO,GAAA,EAACV,OAAA,CAAAO,OAAG,IAAE;QAAC,CACS;MAAC,CACR,CACf,CAAC;MANOO,SAAS,GAAAN,OAAA,CAATM,SAAS;MAAEC,UAAU,GAAAP,OAAA,CAAVO,UAAU;IAS7BC,sBAAS,CAACC,KAAK,CAACH,SAAS,CAAC,4BAA4B,CAAC,CAAC;IAGxD,IAAMI,OAAO,SAASH,UAAU,CAAC,YAAY,CAAC;IAC9CC,sBAAS,CAACC,KAAK,CAACC,OAAO,CAAC;IAGxB,IAAMC,aAAa,SAASJ,UAAU,CAAC,cAAc,CAAC;IACtDC,sBAAS,CAACC,KAAK,CAACE,aAAa,CAAC;IAgB9BH,sBAAS,CAACC,KAAK,CAACH,SAAS,CAAC,SAAS,CAAC,CAAC;IAGrC,IAAMM,oBAAoB,SAASL,UAAU,CAAC,oBAAoB,CAAC;IACnEM,MAAM,CAACD,oBAAoB,CAAC,CAACE,UAAU,CAAC,CAAC;IAGzCN,sBAAS,CAACC,KAAK,CAACH,SAAS,CAAC,SAAS,CAAC,CAAC;IAGrC,IAAMS,cAAc,SAASR,UAAU,CAAC,iBAAiB,CAAC;IAC1DM,MAAM,CAACE,cAAc,CAAC,CAACD,UAAU,CAAC,CAAC;IAGnCN,sBAAS,CAACC,KAAK,CAACH,SAAS,CAAC,SAAS,CAAC,CAAC;IAGrC,IAAMU,eAAe,SAAST,UAAU,CAAC,6BAA6B,CAAC;IACvEM,MAAM,CAACG,eAAe,CAAC,CAACF,UAAU,CAAC,CAAC;EACtC,CAAC,EAAC;AACJ,CAAC,CAAC","ignoreList":[]}