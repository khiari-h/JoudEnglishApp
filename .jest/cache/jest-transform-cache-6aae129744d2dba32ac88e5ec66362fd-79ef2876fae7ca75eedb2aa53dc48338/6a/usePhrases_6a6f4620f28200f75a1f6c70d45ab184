9b079b24fe282962ae486caf54c6927d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var usePhrases = function usePhrases(phrasesData, level) {
  var handleStorageError = function handleStorageError(error, operation) {
    var fallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    console.warn(`Phrases storage error in ${operation}:`, error);
    return fallback;
  };
  var STORAGE_KEY = `phrases_${level}`;
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    categoryIndex = _useState2[0],
    setCategoryIndex = _useState2[1];
  var _useState3 = (0, _react.useState)(0),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    phraseIndex = _useState4[0],
    setPhraseIndex = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    showTranslation = _useState6[0],
    setShowTranslation = _useState6[1];
  var _useState7 = (0, _react.useState)({}),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    completedPhrases = _useState8[0],
    setCompletedPhrases = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    loaded = _useState0[0],
    setLoaded = _useState0[1];
  var _useState1 = (0, _react.useState)(false),
    _useState10 = (0, _slicedToArray2.default)(_useState1, 2),
    showDetailedProgress = _useState10[0],
    setShowDetailedProgress = _useState10[1];
  var isInitialized = (0, _react.useRef)(false);
  var categories = (phrasesData == null ? void 0 : phrasesData.categories) || [];
  var allPhrases = (phrasesData == null ? void 0 : phrasesData.phrases) || [];
  var currentCategory = categories[categoryIndex];
  var currentPhrases = allPhrases.filter(function (phrase) {
    return phrase.categoryId === (currentCategory == null ? void 0 : currentCategory.id);
  }) || [];
  var currentPhrase = currentPhrases[phraseIndex];
  var totalPhrasesInCategory = currentPhrases.length;
  var hasValidData = phrasesData && categories.length > 0 && allPhrases.length > 0;
  console.log('🔍 DEBUG usePhrases:', {
    categoryIndex: categoryIndex,
    phraseIndex: phraseIndex,
    categoriesLength: categories.length,
    currentCategory: !!currentCategory,
    currentCategoryName: currentCategory == null ? void 0 : currentCategory.name,
    currentPhrasesLength: currentPhrases.length,
    allPhrasesLength: allPhrases.length,
    hasValidData: hasValidData,
    phrasesData: !!phrasesData,
    categoriesWithPhrases: categories.filter(function (cat) {
      return allPhrases.some(function (phrase) {
        return phrase.categoryId === cat.id;
      });
    }).length
  });
  (0, _react.useEffect)(function () {
    var loadData = function () {
      var _ref = (0, _asyncToGenerator2.default)(function* () {
        try {
          var savedData = yield _asyncStorage.default.getItem(STORAGE_KEY);
          if (savedData) {
            var _JSON$parse = JSON.parse(savedData),
              savedCompleted = _JSON$parse.completedPhrases,
              lastPosition = _JSON$parse.lastPosition;
            setCompletedPhrases(savedCompleted || {});
          }
        } catch (error) {
          handleStorageError(error, 'loadData');
        } finally {
          setLoaded(true);
        }
      });
      return function loadData() {
        return _ref.apply(this, arguments);
      };
    }();
    loadData();
  }, [level]);
  (0, _react.useEffect)(function () {
    if (loaded && phrasesData && categories.length > 0 && !isInitialized.current) {
      var validCategoryIndex = 0;
      var validPhraseIndex = 0;
      setCategoryIndex(validCategoryIndex);
      setPhraseIndex(validPhraseIndex);
      var newCompletedPhrases = {};
      categories.forEach(function (_, index) {
        newCompletedPhrases[index] = [];
      });
      setCompletedPhrases(newCompletedPhrases);
      isInitialized.current = true;
    }
  }, [loaded, phrasesData, categories.length]);
  var saveData = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      var dataToSave = {
        completedPhrases: completedPhrases,
        lastPosition: {
          categoryIndex: categoryIndex,
          phraseIndex: phraseIndex
        }
      };
      yield _asyncStorage.default.setItem(STORAGE_KEY, JSON.stringify(dataToSave));
    } catch (error) {
      handleStorageError(error, 'saveData');
    }
  }), [completedPhrases, categoryIndex, phraseIndex, STORAGE_KEY]);
  (0, _react.useEffect)(function () {
    if (loaded && isInitialized.current) saveData();
  }, [loaded, isInitialized.current]);
  var changeCategory = (0, _react.useCallback)(function (newCategoryIndex) {
    if (newCategoryIndex !== categoryIndex && newCategoryIndex >= 0 && newCategoryIndex < categories.length && isInitialized.current) {
      setCategoryIndex(newCategoryIndex);
      setPhraseIndex(0);
      setShowTranslation(false);
    }
  }, [categoryIndex, categories.length, isInitialized.current]);
  var goToNextPhrase = (0, _react.useCallback)(function () {
    if (phraseIndex < totalPhrasesInCategory - 1 && isInitialized.current) {
      setPhraseIndex(function (prev) {
        return prev + 1;
      });
      setShowTranslation(false);
    }
  }, [phraseIndex, totalPhrasesInCategory, isInitialized.current]);
  var goToPreviousPhrase = (0, _react.useCallback)(function () {
    if (phraseIndex > 0 && isInitialized.current) {
      setPhraseIndex(function (prev) {
        return prev - 1;
      });
      setShowTranslation(false);
      return true;
    }
    return false;
  }, [phraseIndex, isInitialized.current]);
  var toggleTranslation = (0, _react.useCallback)(function () {
    setShowTranslation(function (prev) {
      return !prev;
    });
  }, []);
  var toggleDetailedProgress = (0, _react.useCallback)(function () {
    setShowDetailedProgress(function (prev) {
      return !prev;
    });
  }, []);
  var markPhraseAsCompleted = (0, _react.useCallback)(function (catIndex, pIndex) {
    if (!isInitialized.current) return;
    setCompletedPhrases(function (prev) {
      var categoryCompleted = prev[catIndex] || [];
      if (!categoryCompleted.includes(pIndex)) {
        return Object.assign({}, prev, (0, _defineProperty2.default)({}, catIndex, [].concat((0, _toConsumableArray2.default)(categoryCompleted), [pIndex])));
      }
      return prev;
    });
  }, [isInitialized.current]);
  var findNextUncompletedCategory = (0, _react.useCallback)(function () {
    var numCategories = categories.length;
    var _loop = function _loop() {
        var _completedPhrases$nex;
        var nextIndex = (categoryIndex + i) % numCategories;
        var category = categories[nextIndex];
        var categoryPhrases = allPhrases.filter(function (p) {
          return p.categoryId === category.id;
        });
        var completedInCategory = ((_completedPhrases$nex = completedPhrases[nextIndex]) == null ? void 0 : _completedPhrases$nex.length) || 0;
        if (completedInCategory < categoryPhrases.length) {
          return {
            v: nextIndex
          };
        }
      },
      _ret;
    for (var i = 1; i <= numCategories; i++) {
      _ret = _loop();
      if (_ret) return _ret.v;
    }
    return -1;
  }, [categories, categoryIndex, allPhrases, completedPhrases]);
  var handleNext = (0, _react.useCallback)(function () {
    if (!isInitialized.current) return {
      completed: false
    };
    markPhraseAsCompleted(categoryIndex, phraseIndex);
    if (phraseIndex < totalPhrasesInCategory - 1) {
      goToNextPhrase();
    } else {
      var nextCategoryIndex = findNextUncompletedCategory();
      if (nextCategoryIndex === -1) {
        _reactNative.Alert.alert("Félicitations", "Vous avez terminé tous les exercices de phrases !");
        return {
          completed: true
        };
      } else {
        changeCategory(nextCategoryIndex);
      }
    }
    return {
      completed: false
    };
  }, [categoryIndex, phraseIndex, totalPhrasesInCategory, markPhraseAsCompleted, goToNextPhrase, findNextUncompletedCategory, changeCategory, isInitialized.current]);
  var handlePrevious = (0, _react.useCallback)(function () {
    if (!isInitialized.current) return;
    goToPreviousPhrase();
  }, [goToPreviousPhrase, isInitialized.current]);
  var stats = (0, _react.useMemo)(function () {
    var _completedPhrases$cat;
    if (!isInitialized.current) {
      return {
        totalPhrases: 0,
        completedPhrasesCount: 0,
        totalProgress: 0,
        completionProgress: 0,
        completedInCurrentCategory: 0,
        totalInCurrentCategory: 0
      };
    }
    var totalPhrases = currentPhrases.length;
    var completedPhrasesCount = Object.values(completedPhrases).reduce(function (sum, completed) {
      return sum + ((completed == null ? void 0 : completed.length) || 0);
    }, 0);
    var totalProgress = totalPhrases > 0 ? Math.round(completedPhrasesCount / totalPhrases * 100) : 0;
    var completionProgress = totalPhrasesInCategory > 0 ? (phraseIndex + 1) / totalPhrasesInCategory * 100 : 0;
    return {
      totalPhrases: totalPhrases,
      completedPhrasesCount: completedPhrasesCount,
      totalProgress: totalProgress,
      completionProgress: completionProgress,
      completedInCurrentCategory: ((_completedPhrases$cat = completedPhrases[categoryIndex]) == null ? void 0 : _completedPhrases$cat.length) || 0,
      totalInCurrentCategory: totalPhrasesInCategory
    };
  }, [currentPhrases, completedPhrases, totalPhrasesInCategory, phraseIndex, categoryIndex, isInitialized.current]);
  var display = (0, _react.useMemo)(function () {
    if (!isInitialized.current) {
      return {
        phraseCounter: "0 / 0",
        categories: [],
        currentPhrase: null,
        currentCategory: null,
        currentPhrases: []
      };
    }
    var phraseCounter = `${phraseIndex + 1} / ${totalPhrasesInCategory || 0}`;
    var categoriesNames = categories.map(function (cat) {
      return cat.name;
    });
    return {
      phraseCounter: phraseCounter,
      categories: categoriesNames,
      currentPhrase: currentPhrase,
      currentCategory: currentCategory,
      currentPhrases: currentPhrases
    };
  }, [phraseIndex, totalPhrasesInCategory, categories, currentPhrase, currentCategory, currentPhrases, isInitialized.current]);
  var canGoToPrevious = phraseIndex > 0;
  var isLastPhraseInCategory = phraseIndex === totalPhrasesInCategory - 1;
  return {
    categoryIndex: categoryIndex,
    phraseIndex: phraseIndex,
    showTranslation: showTranslation,
    completedPhrases: completedPhrases,
    loaded: loaded,
    showDetailedProgress: showDetailedProgress,
    currentPhrase: currentPhrase,
    currentCategory: currentCategory,
    currentPhrases: currentPhrases,
    totalCategories: categories.length,
    totalPhrasesInCategory: totalPhrasesInCategory,
    hasValidData: hasValidData,
    changeCategory: changeCategory,
    toggleTranslation: toggleTranslation,
    toggleDetailedProgress: toggleDetailedProgress,
    handleNext: handleNext,
    handlePrevious: handlePrevious,
    canGoToPrevious: canGoToPrevious,
    isLastPhraseInCategory: isLastPhraseInCategory,
    stats: stats,
    display: display
  };
};
var _default = exports.default = usePhrases;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,