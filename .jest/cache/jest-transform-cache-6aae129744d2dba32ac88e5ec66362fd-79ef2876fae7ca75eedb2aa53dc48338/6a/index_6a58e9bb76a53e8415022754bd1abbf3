d80d2bdd0569a38fb677b97c232bab5d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getC1ExercisesByTopic = exports.getC1ExercisesByDifficulty = exports.getC1ExerciseById = exports.getAllC1Exercises = exports.default = exports.c1Metadata = void 0;
Object.defineProperty(exports, "readingQuestionsC1", {
  enumerable: true,
  get: function get() {
    return _readingQuestionsC.default;
  }
});
Object.defineProperty(exports, "readingTextsC1", {
  enumerable: true,
  get: function get() {
    return _readingTextsC.default;
  }
});
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _readingTextsC = _interopRequireDefault(require("./categories/readingTextsC1.js"));
var _readingQuestionsC = _interopRequireDefault(require("./categories/readingQuestionsC1.js"));
var combineTextWithQuestions = function combineTextWithQuestions(textId) {
  var text = _readingTextsC.default.find(function (t) {
    return t.id === textId;
  });
  var questions = _readingQuestionsC.default.find(function (q) {
    return q.textId === textId;
  });
  if (!text || !questions) {
    return null;
  }
  return Object.assign({}, text, {
    questions: questions.questions
  });
};
var getAllC1Exercises = exports.getAllC1Exercises = function getAllC1Exercises() {
  return _readingTextsC.default.map(function (text) {
    return combineTextWithQuestions(text.id);
  }).filter(Boolean);
};
var getC1ExerciseById = exports.getC1ExerciseById = function getC1ExerciseById(textId) {
  return combineTextWithQuestions(textId);
};
var getC1ExercisesByDifficulty = exports.getC1ExercisesByDifficulty = function getC1ExercisesByDifficulty(difficulty) {
  var filteredTexts = _readingTextsC.default.filter(function (text) {
    return text.difficulty === difficulty;
  });
  return filteredTexts.map(function (text) {
    return combineTextWithQuestions(text.id);
  }).filter(Boolean);
};
var getC1ExercisesByTopic = exports.getC1ExercisesByTopic = function getC1ExercisesByTopic(topic) {
  var filteredTexts = _readingTextsC.default.filter(function (text) {
    var _text$topics;
    return (_text$topics = text.topics) == null ? void 0 : _text$topics.includes(topic);
  });
  return filteredTexts.map(function (text) {
    return combineTextWithQuestions(text.id);
  }).filter(Boolean);
};
var c1Metadata = exports.c1Metadata = {
  level: "C1",
  totalTexts: _readingTextsC.default.length,
  totalQuestions: _readingQuestionsC.default.reduce(function (sum, q) {
    return sum + q.questions.length;
  }, 0),
  averageWordCount: Math.round(_readingTextsC.default.reduce(function (sum, text) {
    return sum + text.wordCount;
  }, 0) / _readingTextsC.default.length),
  difficulties: (0, _toConsumableArray2.default)(new Set(_readingTextsC.default.map(function (text) {
    return text.difficulty;
  }))).sort(),
  topics: (0, _toConsumableArray2.default)(new Set(_readingTextsC.default.flatMap(function (text) {
    return text.topics;
  }))).sort(),
  description: "Advanced level reading comprehension exercises featuring complex philosophical, scientific, and cultural texts with sophisticated vocabulary and nuanced argumentation."
};
var readingC1Data = {
  metadata: c1Metadata,
  exercises: getAllC1Exercises(),
  getAll: getAllC1Exercises,
  getById: getC1ExerciseById,
  getByDifficulty: getC1ExercisesByDifficulty,
  getByTopic: getC1ExercisesByTopic,
  texts: _readingTextsC.default,
  questions: _readingQuestionsC.default
};
var _default = exports.default = readingC1Data;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,