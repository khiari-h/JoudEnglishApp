{"version":3,"names":["View","ResultsScreen","styles","jsx","_jsx","cov_tbpo0epsz","s","ErrorCorrectionResultsCard","_ref","score","totalExercises","_ref$userAttempts","userAttempts","b","_ref$exercises","exercises","level","levelColor","onRetry","onContinue","onExit","f","correctAnswers","filter","attempt","isCorrect","length","incorrectAnswers","attempted","skippedAnswers","detailedResults","map","exercise","index","question","text","userAnswer","correction","correctAnswer","correctedText","isSkipped","getFeedback","percentage","Math","round","style","container","children","totalQuestions","exerciseType","feedback","showDetailedResults"],"sources":["index.js"],"sourcesContent":["// src/components/screens/exercises/errorCorrection/ErrorCorrectionResultsCard/index.js\r\nimport { View } from \"react-native\";\r\nimport ResultsScreen from \"../../../../components/exercise-common/ResultsScreen\";\r\nimport styles from \"./style\";\r\n\r\n/**\r\n * Carte de résultats pour les exercices de correction d'erreurs\r\n * Réutilise le composant ResultsScreen générique\r\n */\r\nconst ErrorCorrectionResultsCard = ({\r\n  score,\r\n  totalExercises,\r\n  userAttempts = [],\r\n  exercises = [],\r\n  level,\r\n  levelColor,\r\n  onRetry,\r\n  onContinue,\r\n  onExit,\r\n}) => {\r\n  // Calculer le nombre de réponses correctes, incorrectes et passées\r\n  const correctAnswers = userAttempts.filter(\r\n    (attempt) => attempt.isCorrect\r\n  ).length;\r\n  const incorrectAnswers = userAttempts.filter(\r\n    (attempt) => !attempt.isCorrect && attempt.attempted\r\n  ).length;\r\n  const skippedAnswers = totalExercises - (correctAnswers + incorrectAnswers);\r\n\r\n  // Préparer les résultats détaillés pour chaque exercice\r\n  const detailedResults = exercises.map((exercise, index) => {\r\n    const attempt = userAttempts[index] || {};\r\n\r\n    return {\r\n      question: exercise.text,\r\n      userAnswer: attempt.correction || \"Pas de réponse\",\r\n      correctAnswer: exercise.correctedText,\r\n      isCorrect: attempt.isCorrect || false,\r\n      isSkipped: !attempt.attempted,\r\n    };\r\n  });\r\n\r\n  // Générer un feedback personnalisé en fonction du score\r\n  const getFeedback = () => {\r\n    const percentage = Math.round((correctAnswers / totalExercises) * 100);\r\n\r\n    if (percentage >= 80) {\r\n      return \"Excellent ! Vous avez très bien compris les différentes erreurs grammaticales et d'usage. Continuez sur cette voie !\";\r\n    } else if (percentage >= 60) {\r\n      return \"Bon travail ! Vous commencez à bien repérer les erreurs. Continuez à pratiquer pour améliorer votre précision.\";\r\n    } else {\r\n      return \"Continuez à pratiquer ! La correction d'erreurs demande de la pratique. Revoyez les règles grammaticales et observez attentivement les structures de phrases.\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <ResultsScreen\r\n        score={score}\r\n        totalQuestions={totalExercises}\r\n        correctAnswers={correctAnswers}\r\n        incorrectAnswers={incorrectAnswers}\r\n        skippedAnswers={skippedAnswers}\r\n        exerciseType=\"Correction d'erreurs\"\r\n        level={level}\r\n        levelColor={levelColor}\r\n        feedback={getFeedback()}\r\n        onRetry={onRetry}\r\n        onContinue={onContinue || onExit}\r\n        showDetailedResults\r\n        detailedResults={detailedResults}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default ErrorCorrectionResultsCard;\r\n\r\n"],"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","ignoreList":[]}