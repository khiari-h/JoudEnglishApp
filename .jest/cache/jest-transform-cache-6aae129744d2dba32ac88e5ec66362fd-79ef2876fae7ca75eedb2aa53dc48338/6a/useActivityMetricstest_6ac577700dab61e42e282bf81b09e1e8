ee35d351d915ab24dbf7cade204ad8d7
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactHooks = require("@testing-library/react-hooks");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useActivityMetrics = _interopRequireDefault(require("../../src/hooks/useActivityMetrics"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useActivityMetrics', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    jest.spyOn(Date, 'now').mockReturnValue(1640995200000);
    jest.spyOn(Date.prototype, 'toDateString').mockReturnValue('Sat Jan 01 2022');
  });
  afterEach(function () {
    jest.restoreAllMocks();
  });
  describe('Chargement initial', function () {
    it('devrait charger les m√©triques depuis AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValueOnce('5').mockResolvedValueOnce('30').mockResolvedValueOnce('Sat Jan 01 2022');
      var _renderHook = (0, _reactHooks.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook.result,
        waitForNextUpdate = _renderHook.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.currentStreak).toBe(5);
      expect(result.current.todayMinutes).toBe(30);
      expect(result.current.formattedTime).toBe('30min');
    }));
    it('devrait r√©initialiser les minutes si c\'est un nouveau jour', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValueOnce('3').mockResolvedValueOnce('45').mockResolvedValueOnce('Fri Dec 31 2021');
      var _renderHook2 = (0, _reactHooks.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook2.result,
        waitForNextUpdate = _renderHook2.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.currentStreak).toBe(3);
      expect(result.current.todayMinutes).toBe(0);
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('today_minutes', '0');
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('last_time_date', 'Sat Jan 01 2022');
    }));
    it('devrait utiliser des valeurs par d√©faut si aucune donn√©e n\'est stock√©e', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook3 = (0, _reactHooks.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook3.result,
        waitForNextUpdate = _renderHook3.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.currentStreak).toBe(0);
      expect(result.current.todayMinutes).toBe(0);
      expect(result.current.formattedTime).toBe('0min');
    }));
  });
  describe('Gestion des sessions', function () {
    it('devrait d√©marrer une session', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook4 = (0, _reactHooks.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook4.result,
        waitForNextUpdate = _renderHook4.waitForNextUpdate;
      yield waitForNextUpdate();
      (0, _reactHooks.act)(function () {
        result.current.startSession('vocabulary');
      });
      expect(typeof result.current.startSession).toBe('function');
    }));
    it('devrait terminer une session et mettre √† jour les minutes', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue('0');
      var _renderHook5 = (0, _reactHooks.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook5.result,
        waitForNextUpdate = _renderHook5.waitForNextUpdate;
      yield waitForNextUpdate();
      (0, _reactHooks.act)(function () {
        result.current.startSession('vocabulary');
      });
      jest.spyOn(Date, 'now').mockReturnValue(1640995200000 + 120000);
      yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.endSession();
      }));
      expect(result.current.todayMinutes).toBe(2);
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('today_minutes', '2');
    }));
    it('ne devrait pas mettre √† jour si aucune session n\'est active', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue('0');
      var _renderHook6 = (0, _reactHooks.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook6.result,
        waitForNextUpdate = _renderHook6.waitForNextUpdate;
      yield waitForNextUpdate();
      yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.endSession();
      }));
      expect(result.current.todayMinutes).toBe(0);
      expect(_asyncStorage.default.setItem).not.toHaveBeenCalledWith('today_minutes', expect.any(String));
    }));
  });
  describe('Gestion des streaks', function () {
    it('devrait incr√©menter le streak si l\'activit√© √©tait hier', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValueOnce('3').mockResolvedValueOnce('0').mockResolvedValueOnce('Sat Jan 01 2022').mockResolvedValueOnce('Fri Dec 31 2021');
      var _renderHook7 = (0, _reactHooks.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook7.result,
        waitForNextUpdate = _renderHook7.waitForNextUpdate;
      yield waitForNextUpdate();
      yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.updateStreak();
      }));
      expect(result.current.currentStreak).toBe(4);
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('current_streak', '4');
    }));
    it('devrait r√©initialiser le streak si l\'activit√© n\'√©tait pas hier', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValueOnce('5').mockResolvedValueOnce('0').mockResolvedValueOnce('Sat Jan 01 2022').mockResolvedValueOnce('Wed Dec 29 2021');
      var _renderHook8 = (0, _reactHooks.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook8.result,
        waitForNextUpdate = _renderHook8.waitForNextUpdate;
      yield waitForNextUpdate();
      yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.updateStreak();
      }));
      expect(result.current.currentStreak).toBe(1);
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('current_streak', '1');
    }));
    it('ne devrait pas mettre √† jour le streak si l\'activit√© est d√©j√† aujourd\'hui', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValueOnce('3').mockResolvedValueOnce('0').mockResolvedValueOnce('Sat Jan 01 2022').mockResolvedValueOnce('Sat Jan 01 2022');
      var _renderHook9 = (0, _reactHooks.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook9.result,
        waitForNextUpdate = _renderHook9.waitForNextUpdate;
      yield waitForNextUpdate();
      var initialStreak = result.current.currentStreak;
      yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.updateStreak();
      }));
      expect(result.current.currentStreak).toBe(initialStreak);
    }));
  });
  describe('Formatage du temps', function () {
    it('devrait formater les minutes correctement', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook0 = (0, _reactHooks.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook0.result,
        waitForNextUpdate = _renderHook0.waitForNextUpdate;
      yield waitForNextUpdate();
      var testCases = [{
        minutes: 0,
        expected: '0min'
      }, {
        minutes: 30,
        expected: '30min'
      }, {
        minutes: 60,
        expected: '1h'
      }, {
        minutes: 90,
        expected: '1h30min'
      }, {
        minutes: 120,
        expected: '2h'
      }, {
        minutes: 150,
        expected: '2h30min'
      }];
      for (var testCase of testCases) {
        _asyncStorage.default.getItem.mockResolvedValueOnce('0').mockResolvedValueOnce(testCase.minutes.toString()).mockResolvedValueOnce('Sat Jan 01 2022');
        var _renderHook1 = (0, _reactHooks.renderHook)(function () {
            return (0, _useActivityMetrics.default)();
          }),
          testResult = _renderHook1.result,
          waitForUpdate = _renderHook1.waitForNextUpdate;
        yield waitForUpdate();
        expect(testResult.current.formattedTime).toBe(testCase.expected);
      }
    }));
  });
  describe('Tendances de streak', function () {
    it('devrait retourner les bonnes tendances selon le streak', (0, _asyncToGenerator2.default)(function* () {
      var testCases = [{
        streak: 0,
        expected: null
      }, {
        streak: 1,
        expected: 'üî• Continue!'
      }, {
        streak: 3,
        expected: 'üí™ En forme!'
      }, {
        streak: 7,
        expected: 'üèÜ Incroyable!'
      }, {
        streak: 10,
        expected: 'üèÜ Incroyable!'
      }];
      for (var testCase of testCases) {
        _asyncStorage.default.getItem.mockResolvedValueOnce(testCase.streak.toString()).mockResolvedValueOnce('0').mockResolvedValueOnce('Sat Jan 01 2022');
        var _renderHook10 = (0, _reactHooks.renderHook)(function () {
            return (0, _useActivityMetrics.default)();
          }),
          result = _renderHook10.result,
          waitForNextUpdate = _renderHook10.waitForNextUpdate;
        yield waitForNextUpdate();
        expect(result.current.streakTrend).toBe(testCase.expected);
      }
    }));
  });
  describe('Gestion des erreurs', function () {
    it('devrait g√©rer les erreurs de AsyncStorage silencieusement', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockRejectedValue(new Error('Storage error'));
      var _renderHook11 = (0, _reactHooks.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook11.result,
        waitForNextUpdate = _renderHook11.waitForNextUpdate;
      yield waitForNextUpdate();
      expect(result.current.currentStreak).toBe(0);
      expect(result.current.todayMinutes).toBe(0);
    }));
    it('devrait g√©rer les erreurs lors de la sauvegarde', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue('0');
      _asyncStorage.default.setItem.mockRejectedValue(new Error('Save error'));
      var _renderHook12 = (0, _reactHooks.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook12.result,
        waitForNextUpdate = _renderHook12.waitForNextUpdate;
      yield waitForNextUpdate();
      yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
        result.current.startSession('test');
        jest.spyOn(Date, 'now').mockReturnValue(1640995200000 + 60000);
        yield result.current.endSession();
      }));
      expect(result.current.todayMinutes).toBe(1);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,