d71d1590111bb763da04cc57f52db0b4
_getJestObj().mock('expo-linear-gradient', function () {
  var _require = require('react-native'),
    View = _require.View;
  return {
    LinearGradient: function LinearGradient(props) {
      return (0, _jsxRuntime.jsx)(View, Object.assign({}, props));
    }
  };
});
_getJestObj().mock('@expo/vector-icons', function () {
  var _require2 = require('react-native'),
    Text = _require2.Text;
  return {
    Ionicons: function Ionicons(props) {
      return (0, _jsxRuntime.jsx)(Text, {
        testID: `icon-${props.name}`,
        children: props.name
      });
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ResultsScreen = _interopRequireDefault(require("../../../src/components/exercise-common/ResultsScreen"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ResultsScreen', function () {
  beforeAll(function () {
    jest.useFakeTimers();
  });
  afterAll(function () {
    jest.useRealTimers();
  });
  beforeEach(function () {
    _reactNative2.Share.share = jest.fn();
  });
  var defaultProps = {
    totalQuestions: 10,
    correctAnswers: 8,
    incorrectAnswers: 1,
    skippedAnswers: 2,
    timeTaken: '01:30',
    exerciseType: 'Vocabulary',
    level: 'B1',
    levelColor: '#3B82F6',
    feedback: '',
    onRetry: jest.fn(),
    onContinue: jest.fn(),
    showDetailedResults: false,
    detailedResults: []
  };
  afterEach(function () {
    jest.clearAllMocks();
    jest.runOnlyPendingTimers();
  });
  it('renders basic statistics correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps))),
      getByText = _render.getByText;
    expect(getByText('80%')).toBeTruthy();
    expect(getByText('8/10')).toBeTruthy();
    expect(getByText('Correctes')).toBeTruthy();
    expect(getByText('8')).toBeTruthy();
    expect(getByText('Incorrectes')).toBeTruthy();
    expect(getByText('1')).toBeTruthy();
    expect(getByText('Passées')).toBeTruthy();
    expect(getByText('2')).toBeTruthy();
    expect(getByText('Temps')).toBeTruthy();
    expect(getByText('01:30')).toBeTruthy();
  });
  it('displays feedback when provided', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        feedback: "Great job!"
      }))),
      getByText = _render2.getByText;
    expect(getByText('Conseils pour progresser')).toBeTruthy();
    expect(getByText('Great job!')).toBeTruthy();
  });
  it('does not display feedback when not provided', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        feedback: ""
      }))),
      queryByText = _render3.queryByText;
    expect(queryByText('Conseils pour progresser')).toBeNull();
  });
  it('displays detailed results when showDetailedResults is true and data is present', function () {
    var detailedResults = [{
      question: 'Q1',
      userAnswer: 'A',
      correctAnswer: 'B',
      isCorrect: false,
      isSkipped: false
    }];
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        showDetailedResults: true,
        detailedResults: detailedResults
      }))),
      getByText = _render4.getByText;
    expect(getByText('Détail des réponses')).toBeTruthy();
    expect(getByText('Question 1')).toBeTruthy();
    expect(getByText('Q1')).toBeTruthy();
    expect(getByText('Votre réponse:')).toBeTruthy();
    expect(getByText('A')).toBeTruthy();
    expect(getByText('Réponse correcte:')).toBeTruthy();
    expect(getByText('B')).toBeTruthy();
  });
  it('does not display detailed results when showDetailedResults is false', function () {
    var detailedResults = [{
      question: 'Q1',
      userAnswer: 'A',
      correctAnswer: 'B',
      isCorrect: false,
      isSkipped: false
    }];
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        showDetailedResults: false,
        detailedResults: detailedResults
      }))),
      queryByText = _render5.queryByText;
    expect(queryByText('Détail des réponses')).toBeNull();
  });
  it('shows "Excellent!" for >= 80% score', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        correctAnswers: 8,
        totalQuestions: 10
      }))),
      getByText = _render6.getByText,
      getByTestId = _render6.getByTestId;
    expect(getByText('Excellent!')).toBeTruthy();
    expect(getByTestId('icon-trophy')).toBeTruthy();
  });
  it('shows "Bien joué!" for >= 60% score', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        correctAnswers: 6,
        totalQuestions: 10
      }))),
      getByText = _render7.getByText,
      getByTestId = _render7.getByTestId;
    expect(getByText('Bien joué!')).toBeTruthy();
    expect(getByTestId('icon-thumbs-up')).toBeTruthy();
  });
  it('shows "Pas mal!" for >= 40% score', function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        correctAnswers: 4,
        totalQuestions: 10
      }))),
      getByText = _render8.getByText,
      getByTestId = _render8.getByTestId;
    expect(getByText('Pas mal!')).toBeTruthy();
    expect(getByTestId('icon-fitness')).toBeTruthy();
  });
  it('shows "Continuez vos efforts" for < 40% score', function () {
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
        correctAnswers: 3,
        totalQuestions: 10
      }))),
      getByText = _render9.getByText,
      getByTestId = _render9.getByTestId;
    expect(getByText('Continuez vos efforts')).toBeTruthy();
    expect(getByTestId('icon-school')).toBeTruthy();
  });
  it('calls onRetry when the retry button is pressed', function () {
    var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps))),
      getByText = _render0.getByText;
    _reactNative.fireEvent.press(getByText('Réessayer'));
    expect(defaultProps.onRetry).toHaveBeenCalledTimes(1);
  });
  it('calls onContinue when the continue button is pressed', function () {
    var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps))),
      getByText = _render1.getByText;
    _reactNative.fireEvent.press(getByText('Continuer'));
    expect(defaultProps.onContinue).toHaveBeenCalledTimes(1);
  });
  it('calls Share.share with correct data when share button is pressed', (0, _asyncToGenerator2.default)(function* () {
    var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps))),
      getByText = _render10.getByText;
    _reactNative.fireEvent.press(getByText('Partager'));
    expect(_reactNative2.Share.share).toHaveBeenCalledWith({
      message: 'J\'ai obtenu 8/10 (80%) dans mon exercice de Vocabulary niveau B1 sur l\'application JOUD English!',
      title: 'Mes résultats d\'apprentissage'
    });
  }));
  it('handles share error gracefully without crashing', (0, _asyncToGenerator2.default)(function* () {
    var shareError = new Error('Share operation failed');
    _reactNative2.Share.share.mockRejectedValue(shareError);
    var warnSpy = jest.spyOn(console, 'warn');
    var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps))),
      getByText = _render11.getByText;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(getByText('Partager'));
    }));
    expect(_reactNative2.Share.share).toHaveBeenCalledTimes(1);
    expect(warnSpy).toHaveBeenCalledWith('Error sharing results:', shareError);
    warnSpy.mockRestore();
  }));
  describe('Detailed Results - Edge Cases', function () {
    it('displays skipped questions correctly', function () {
      var detailedResults = [{
        question: 'What is 2+2?',
        userAnswer: '',
        correctAnswer: '4',
        isCorrect: false,
        isSkipped: true
      }];
      var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
          showDetailedResults: true,
          detailedResults: detailedResults
        }))),
        getByText = _render12.getByText,
        getAllByTestId = _render12.getAllByTestId;
      expect(getAllByTestId('icon-play-skip-forward').length).toBeGreaterThan(0);
      expect(getByText('Passée')).toBeTruthy();
      expect(function () {
        return getByText('Réponse correcte:');
      }).toThrow();
    });
    it('displays correct questions without showing correct answer section', function () {
      var detailedResults = [{
        question: 'What is 3+3?',
        userAnswer: '6',
        correctAnswer: '6',
        isCorrect: true,
        isSkipped: false
      }];
      var _render13 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
          showDetailedResults: true,
          detailedResults: detailedResults
        }))),
        getByText = _render13.getByText,
        getAllByTestId = _render13.getAllByTestId,
        queryByText = _render13.queryByText;
      expect(getAllByTestId('icon-checkmark-circle').length).toBeGreaterThan(0);
      expect(getByText('6')).toBeTruthy();
      expect(queryByText('Réponse correcte:')).toBeNull();
    });
    it('displays mixed types of detailed results (correct, incorrect, skipped)', function () {
      var detailedResults = [{
        question: 'Question 1 - Correct',
        userAnswer: 'A',
        correctAnswer: 'A',
        isCorrect: true,
        isSkipped: false
      }, {
        question: 'Question 2 - Incorrect',
        userAnswer: 'B',
        correctAnswer: 'C',
        isCorrect: false,
        isSkipped: false
      }, {
        question: 'Question 3 - Skipped',
        userAnswer: '',
        correctAnswer: 'D',
        isCorrect: false,
        isSkipped: true
      }];
      var _render14 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
          showDetailedResults: true,
          detailedResults: detailedResults
        }))),
        getByText = _render14.getByText,
        getAllByTestId = _render14.getAllByTestId;
      expect(getAllByTestId('icon-checkmark-circle').length).toBeGreaterThan(0);
      expect(getByText('Question 1 - Correct')).toBeTruthy();
      expect(getAllByTestId('icon-close-circle').length).toBeGreaterThan(0);
      expect(getByText('Question 2 - Incorrect')).toBeTruthy();
      expect(getByText('B')).toBeTruthy();
      expect(getByText('C')).toBeTruthy();
      expect(getAllByTestId('icon-play-skip-forward').length).toBeGreaterThan(0);
      expect(getByText('Question 3 - Skipped')).toBeTruthy();
      expect(getByText('Passée')).toBeTruthy();
    });
    it('does not display detailed results when array is empty', function () {
      var _render15 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
          showDetailedResults: true,
          detailedResults: []
        }))),
        queryByText = _render15.queryByText;
      expect(queryByText('Détail des réponses')).toBeNull();
    });
    it('does not display detailed results when showDetailedResults is false even with data', function () {
      var detailedResults = [{
        question: 'Hidden question',
        userAnswer: 'A',
        correctAnswer: 'B',
        isCorrect: false,
        isSkipped: false
      }];
      var _render16 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
          showDetailedResults: false,
          detailedResults: detailedResults
        }))),
        queryByText = _render16.queryByText;
      expect(queryByText('Détail des réponses')).toBeNull();
      expect(queryByText('Hidden question')).toBeNull();
    });
  });
  describe('Edge Cases - Props handling', function () {
    it('handles zero totalQuestions gracefully', function () {
      var _render17 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
          totalQuestions: 0,
          correctAnswers: 0
        }))),
        getByText = _render17.getByText;
      expect(getByText('0%')).toBeTruthy();
      expect(getByText('0/0')).toBeTruthy();
    });
    it('handles missing onRetry and onContinue props gracefully', function () {
      var propsWithoutCallbacks = Object.assign({}, defaultProps, {
        onRetry: undefined,
        onContinue: undefined
      });
      var _render18 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, propsWithoutCallbacks))),
        getByText = _render18.getByText;
      expect(function () {
        _reactNative.fireEvent.press(getByText('Réessayer'));
        _reactNative.fireEvent.press(getByText('Continuer'));
      }).not.toThrow();
    });
    it('handles empty feedback prop correctly', function () {
      var _render19 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
          feedback: null
        }))),
        queryByText = _render19.queryByText;
      expect(queryByText('Conseils pour progresser')).toBeNull();
    });
  });
  describe('Performance Data Edge Cases', function () {
    it('handles fractional percentages correctly', function () {
      var _render20 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
          correctAnswers: 1,
          totalQuestions: 3
        }))),
        getByText = _render20.getByText;
      expect(getByText('33%')).toBeTruthy();
      expect(getByText('1/3')).toBeTruthy();
    });
    it('displays all performance tiers correctly', function () {
      var testCases = [{
        score: 9,
        total: 10,
        expected: 'Excellent!'
      }, {
        score: 7,
        total: 10,
        expected: 'Bien joué!'
      }, {
        score: 5,
        total: 10,
        expected: 'Pas mal!'
      }, {
        score: 2,
        total: 10,
        expected: 'Continuez vos efforts'
      }];
      testCases.forEach(function (_ref4) {
        var score = _ref4.score,
          total = _ref4.total,
          expected = _ref4.expected;
        var _render21 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, defaultProps, {
            correctAnswers: score,
            totalQuestions: total
          }))),
          getByText = _render21.getByText,
          unmount = _render21.unmount;
        expect(getByText(expected)).toBeTruthy();
        unmount();
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfcmVxdWlyZSIsInJlcXVpcmUiLCJWaWV3IiwiTGluZWFyR3JhZGllbnQiLCJwcm9wcyIsIl9qc3hSdW50aW1lIiwianN4IiwiT2JqZWN0IiwiYXNzaWduIiwiX3JlcXVpcmUyIiwiVGV4dCIsIklvbmljb25zIiwidGVzdElEIiwibmFtZSIsImNoaWxkcmVuIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9SZXN1bHRzU2NyZWVuIiwiX3JlYWN0TmF0aXZlMiIsIl9yZXF1aXJlMyIsImplc3QiLCJkZXNjcmliZSIsImJlZm9yZUFsbCIsInVzZUZha2VUaW1lcnMiLCJhZnRlckFsbCIsInVzZVJlYWxUaW1lcnMiLCJiZWZvcmVFYWNoIiwiU2hhcmUiLCJzaGFyZSIsImZuIiwiZGVmYXVsdFByb3BzIiwidG90YWxRdWVzdGlvbnMiLCJjb3JyZWN0QW5zd2VycyIsImluY29ycmVjdEFuc3dlcnMiLCJza2lwcGVkQW5zd2VycyIsInRpbWVUYWtlbiIsImV4ZXJjaXNlVHlwZSIsImxldmVsIiwibGV2ZWxDb2xvciIsImZlZWRiYWNrIiwib25SZXRyeSIsIm9uQ29udGludWUiLCJzaG93RGV0YWlsZWRSZXN1bHRzIiwiZGV0YWlsZWRSZXN1bHRzIiwiYWZ0ZXJFYWNoIiwiY2xlYXJBbGxNb2NrcyIsInJ1bk9ubHlQZW5kaW5nVGltZXJzIiwiaXQiLCJfcmVuZGVyIiwicmVuZGVyIiwiZGVmYXVsdCIsImdldEJ5VGV4dCIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJfcmVuZGVyMiIsIl9yZW5kZXIzIiwicXVlcnlCeVRleHQiLCJ0b0JlTnVsbCIsInF1ZXN0aW9uIiwidXNlckFuc3dlciIsImNvcnJlY3RBbnN3ZXIiLCJpc0NvcnJlY3QiLCJpc1NraXBwZWQiLCJfcmVuZGVyNCIsIl9yZW5kZXI1IiwiX3JlbmRlcjYiLCJnZXRCeVRlc3RJZCIsIl9yZW5kZXI3IiwiX3JlbmRlcjgiLCJfcmVuZGVyOSIsIl9yZW5kZXIwIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJfcmVuZGVyMSIsIl9yZW5kZXIxMCIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwibWVzc2FnZSIsInRpdGxlIiwic2hhcmVFcnJvciIsIkVycm9yIiwibW9ja1JlamVjdGVkVmFsdWUiLCJ3YXJuU3B5Iiwic3B5T24iLCJjb25zb2xlIiwiX3JlbmRlcjExIiwiYWN0IiwibW9ja1Jlc3RvcmUiLCJfcmVuZGVyMTIiLCJnZXRBbGxCeVRlc3RJZCIsImxlbmd0aCIsInRvQmVHcmVhdGVyVGhhbiIsInRvVGhyb3ciLCJfcmVuZGVyMTMiLCJfcmVuZGVyMTQiLCJfcmVuZGVyMTUiLCJfcmVuZGVyMTYiLCJfcmVuZGVyMTciLCJwcm9wc1dpdGhvdXRDYWxsYmFja3MiLCJ1bmRlZmluZWQiLCJfcmVuZGVyMTgiLCJub3QiLCJfcmVuZGVyMTkiLCJfcmVuZGVyMjAiLCJ0ZXN0Q2FzZXMiLCJzY29yZSIsInRvdGFsIiwiZXhwZWN0ZWQiLCJmb3JFYWNoIiwiX3JlZjQiLCJfcmVuZGVyMjEiLCJ1bm1vdW50Il0sInNvdXJjZXMiOlsiUmVzdWx0c1NjcmVlbi50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCwgYWN0IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IFJlc3VsdHNTY3JlZW4gZnJvbSAnLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvZXhlcmNpc2UtY29tbW9uL1Jlc3VsdHNTY3JlZW4nO1xuaW1wb3J0IHsgU2hhcmUgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuXG4vLyBNb2NrIGRlcyBkw6lwZW5kYW5jZXNcbmplc3QubW9jaygnZXhwby1saW5lYXItZ3JhZGllbnQnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBWaWV3IH0gPSByZXF1aXJlKCdyZWFjdC1uYXRpdmUnKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBMaW5lYXJHcmFkaWVudDogKHByb3BzKSA9PiA8VmlldyB7Li4ucHJvcHN9IC8+LFxuICAgIH07XG59KTtcbmplc3QubW9jaygnQGV4cG8vdmVjdG9yLWljb25zJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgVGV4dCB9ID0gcmVxdWlyZSgncmVhY3QtbmF0aXZlJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgSW9uaWNvbnM6IChwcm9wcykgPT4gPFRleHQgdGVzdElEPXtgaWNvbi0ke3Byb3BzLm5hbWV9YH0+e3Byb3BzLm5hbWV9PC9UZXh0PixcbiAgICB9O1xufSk7XG5cbmRlc2NyaWJlKCdSZXN1bHRzU2NyZWVuJywgKCkgPT4ge1xuXG4gICAgYmVmb3JlQWxsKCgpID0+IHtcbiAgICAgICAgamVzdC51c2VGYWtlVGltZXJzKCk7XG4gICAgfSk7XG5cbiAgICBhZnRlckFsbCgoKSA9PiB7XG4gICAgICAgIGplc3QudXNlUmVhbFRpbWVycygpO1xuICAgIH0pO1xuXG4gICAgLy8gQXNzdXJlei12b3VzIHF1ZSBTaGFyZS5zaGFyZSBlc3QgdW4gbW9jayBhdmFudCBjaGFxdWUgdGVzdFxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICBTaGFyZS5zaGFyZSA9IGplc3QuZm4oKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgdG90YWxRdWVzdGlvbnM6IDEwLFxuICAgICAgICBjb3JyZWN0QW5zd2VyczogOCxcbiAgICAgICAgaW5jb3JyZWN0QW5zd2VyczogMSxcbiAgICAgICAgc2tpcHBlZEFuc3dlcnM6IDIsXG4gICAgICAgIHRpbWVUYWtlbjogJzAxOjMwJyxcbiAgICAgICAgZXhlcmNpc2VUeXBlOiAnVm9jYWJ1bGFyeScsXG4gICAgICAgIGxldmVsOiAnQjEnLFxuICAgICAgICBsZXZlbENvbG9yOiAnIzNCODJGNicsXG4gICAgICAgIGZlZWRiYWNrOiAnJyxcbiAgICAgICAgb25SZXRyeTogamVzdC5mbigpLFxuICAgICAgICBvbkNvbnRpbnVlOiBqZXN0LmZuKCksXG4gICAgICAgIHNob3dEZXRhaWxlZFJlc3VsdHM6IGZhbHNlLFxuICAgICAgICBkZXRhaWxlZFJlc3VsdHM6IFtdLFxuICAgIH07XG5cbiAgICBhZnRlckVhY2goKCkgPT4ge1xuICAgICAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICAgICAgamVzdC5ydW5Pbmx5UGVuZGluZ1RpbWVycygpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3JlbmRlcnMgYmFzaWMgc3RhdGlzdGljcyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPFJlc3VsdHNTY3JlZW4gey4uLmRlZmF1bHRQcm9wc30gLz4pO1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KCc4MCUnKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KCc4LzEwJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnQ29ycmVjdGVzJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnOCcpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIGV4cGVjdChnZXRCeVRleHQoJ0luY29ycmVjdGVzJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnMScpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIGV4cGVjdChnZXRCeVRleHQoJ1Bhc3PDqWVzJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnMicpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIGV4cGVjdChnZXRCeVRleHQoJ1RlbXBzJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnMDE6MzAnKSkudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2Rpc3BsYXlzIGZlZWRiYWNrIHdoZW4gcHJvdmlkZWQnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPFJlc3VsdHNTY3JlZW4gey4uLmRlZmF1bHRQcm9wc30gZmVlZGJhY2s9XCJHcmVhdCBqb2IhXCIgLz4pO1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KCdDb25zZWlscyBwb3VyIHByb2dyZXNzZXInKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KCdHcmVhdCBqb2IhJykpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcblxuICAgIGl0KCdkb2VzIG5vdCBkaXNwbGF5IGZlZWRiYWNrIHdoZW4gbm90IHByb3ZpZGVkJywgKCkgPT4ge1xuICAgICAgICBjb25zdCB7IHF1ZXJ5QnlUZXh0IH0gPSByZW5kZXIoPFJlc3VsdHNTY3JlZW4gey4uLmRlZmF1bHRQcm9wc30gZmVlZGJhY2s9XCJcIiAvPik7XG4gICAgICAgIGV4cGVjdChxdWVyeUJ5VGV4dCgnQ29uc2VpbHMgcG91ciBwcm9ncmVzc2VyJykpLnRvQmVOdWxsKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGlzcGxheXMgZGV0YWlsZWQgcmVzdWx0cyB3aGVuIHNob3dEZXRhaWxlZFJlc3VsdHMgaXMgdHJ1ZSBhbmQgZGF0YSBpcyBwcmVzZW50JywgKCkgPT4ge1xuICAgICAgICBjb25zdCBkZXRhaWxlZFJlc3VsdHMgPSBbXG4gICAgICAgICAgICB7IHF1ZXN0aW9uOiAnUTEnLCB1c2VyQW5zd2VyOiAnQScsIGNvcnJlY3RBbnN3ZXI6ICdCJywgaXNDb3JyZWN0OiBmYWxzZSwgaXNTa2lwcGVkOiBmYWxzZSB9LFxuICAgICAgICBdO1xuICAgICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgICAgICAgPFJlc3VsdHNTY3JlZW4gey4uLmRlZmF1bHRQcm9wc30gc2hvd0RldGFpbGVkUmVzdWx0cz17dHJ1ZX0gZGV0YWlsZWRSZXN1bHRzPXtkZXRhaWxlZFJlc3VsdHN9IC8+XG4gICAgICAgICk7XG4gICAgICAgIGV4cGVjdChnZXRCeVRleHQoJ0TDqXRhaWwgZGVzIHLDqXBvbnNlcycpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIGV4cGVjdChnZXRCeVRleHQoJ1F1ZXN0aW9uIDEnKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KCdRMScpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIGV4cGVjdChnZXRCeVRleHQoJ1ZvdHJlIHLDqXBvbnNlOicpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIGV4cGVjdChnZXRCeVRleHQoJ0EnKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KCdSw6lwb25zZSBjb3JyZWN0ZTonKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KCdCJykpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcblxuICAgIGl0KCdkb2VzIG5vdCBkaXNwbGF5IGRldGFpbGVkIHJlc3VsdHMgd2hlbiBzaG93RGV0YWlsZWRSZXN1bHRzIGlzIGZhbHNlJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBkZXRhaWxlZFJlc3VsdHMgPSBbXG4gICAgICAgICAgICB7IHF1ZXN0aW9uOiAnUTEnLCB1c2VyQW5zd2VyOiAnQScsIGNvcnJlY3RBbnN3ZXI6ICdCJywgaXNDb3JyZWN0OiBmYWxzZSwgaXNTa2lwcGVkOiBmYWxzZSB9LFxuICAgICAgICBdO1xuICAgICAgICBjb25zdCB7IHF1ZXJ5QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICAgICAgICA8UmVzdWx0c1NjcmVlbiB7Li4uZGVmYXVsdFByb3BzfSBzaG93RGV0YWlsZWRSZXN1bHRzPXtmYWxzZX0gZGV0YWlsZWRSZXN1bHRzPXtkZXRhaWxlZFJlc3VsdHN9IC8+XG4gICAgICAgICk7XG4gICAgICAgIGV4cGVjdChxdWVyeUJ5VGV4dCgnRMOpdGFpbCBkZXMgcsOpcG9uc2VzJykpLnRvQmVOdWxsKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvd3MgXCJFeGNlbGxlbnQhXCIgZm9yID49IDgwJSBzY29yZScsICgpID0+IHtcbiAgICAgICAgY29uc3QgeyBnZXRCeVRleHQsIGdldEJ5VGVzdElkIH0gPSByZW5kZXIoPFJlc3VsdHNTY3JlZW4gey4uLmRlZmF1bHRQcm9wc30gY29ycmVjdEFuc3dlcnM9ezh9IHRvdGFsUXVlc3Rpb25zPXsxMH0gLz4pO1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KCdFeGNlbGxlbnQhJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgZXhwZWN0KGdldEJ5VGVzdElkKCdpY29uLXRyb3BoeScpKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvd3MgXCJCaWVuIGpvdcOpIVwiIGZvciA+PSA2MCUgc2NvcmUnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0LCBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxSZXN1bHRzU2NyZWVuIHsuLi5kZWZhdWx0UHJvcHN9IGNvcnJlY3RBbnN3ZXJzPXs2fSB0b3RhbFF1ZXN0aW9ucz17MTB9IC8+KTtcbiAgICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnQmllbiBqb3XDqSEnKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2ljb24tdGh1bWJzLXVwJykpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG93cyBcIlBhcyBtYWwhXCIgZm9yID49IDQwJSBzY29yZScsICgpID0+IHtcbiAgICAgICAgY29uc3QgeyBnZXRCeVRleHQsIGdldEJ5VGVzdElkIH0gPSByZW5kZXIoPFJlc3VsdHNTY3JlZW4gey4uLmRlZmF1bHRQcm9wc30gY29ycmVjdEFuc3dlcnM9ezR9IHRvdGFsUXVlc3Rpb25zPXsxMH0gLz4pO1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KCdQYXMgbWFsIScpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnaWNvbi1maXRuZXNzJykpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG93cyBcIkNvbnRpbnVleiB2b3MgZWZmb3J0c1wiIGZvciA8IDQwJSBzY29yZScsICgpID0+IHtcbiAgICAgICAgY29uc3QgeyBnZXRCeVRleHQsIGdldEJ5VGVzdElkIH0gPSByZW5kZXIoPFJlc3VsdHNTY3JlZW4gey4uLmRlZmF1bHRQcm9wc30gY29ycmVjdEFuc3dlcnM9ezN9IHRvdGFsUXVlc3Rpb25zPXsxMH0gLz4pO1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KCdDb250aW51ZXogdm9zIGVmZm9ydHMnKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2ljb24tc2Nob29sJykpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcblxuICAgIGl0KCdjYWxscyBvblJldHJ5IHdoZW4gdGhlIHJldHJ5IGJ1dHRvbiBpcyBwcmVzc2VkJywgKCkgPT4ge1xuICAgICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKDxSZXN1bHRzU2NyZWVuIHsuLi5kZWZhdWx0UHJvcHN9IC8+KTtcbiAgICAgICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgnUsOpZXNzYXllcicpKTtcbiAgICAgICAgZXhwZWN0KGRlZmF1bHRQcm9wcy5vblJldHJ5KS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgfSk7XG5cbiAgICBpdCgnY2FsbHMgb25Db250aW51ZSB3aGVuIHRoZSBjb250aW51ZSBidXR0b24gaXMgcHJlc3NlZCcsICgpID0+IHtcbiAgICAgICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcig8UmVzdWx0c1NjcmVlbiB7Li4uZGVmYXVsdFByb3BzfSAvPik7XG4gICAgICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ0NvbnRpbnVlcicpKTtcbiAgICAgICAgZXhwZWN0KGRlZmF1bHRQcm9wcy5vbkNvbnRpbnVlKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgfSk7XG5cbiAgICBpdCgnY2FsbHMgU2hhcmUuc2hhcmUgd2l0aCBjb3JyZWN0IGRhdGEgd2hlbiBzaGFyZSBidXR0b24gaXMgcHJlc3NlZCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcig8UmVzdWx0c1NjcmVlbiB7Li4uZGVmYXVsdFByb3BzfSAvPik7XG4gICAgICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ1BhcnRhZ2VyJykpO1xuICAgICAgICBleHBlY3QoU2hhcmUuc2hhcmUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdKXFwnYWkgb2J0ZW51IDgvMTAgKDgwJSkgZGFucyBtb24gZXhlcmNpY2UgZGUgVm9jYWJ1bGFyeSBuaXZlYXUgQjEgc3VyIGxcXCdhcHBsaWNhdGlvbiBKT1VEIEVuZ2xpc2ghJyxcbiAgICAgICAgICAgIHRpdGxlOiAnTWVzIHLDqXN1bHRhdHMgZFxcJ2FwcHJlbnRpc3NhZ2UnLFxuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdoYW5kbGVzIHNoYXJlIGVycm9yIGdyYWNlZnVsbHkgd2l0aG91dCBjcmFzaGluZycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgLy8gTW9jayBsJ8OpY2hlYyBkZSBsYSBmb25jdGlvbiBTaGFyZS5zaGFyZVxuICAgICAgICBjb25zdCBzaGFyZUVycm9yID0gbmV3IEVycm9yKCdTaGFyZSBvcGVyYXRpb24gZmFpbGVkJyk7XG4gICAgICAgIFNoYXJlLnNoYXJlLm1vY2tSZWplY3RlZFZhbHVlKHNoYXJlRXJyb3IpO1xuXG4gICAgICAgIC8vIEVzcGlvbm5lIGNvbnNvbGUud2FybiBwb3VyIHbDqXJpZmllciBxdSdlbGxlIGVzdCBhcHBlbMOpZVxuICAgICAgICBjb25zdCB3YXJuU3B5ID0gamVzdC5zcHlPbihjb25zb2xlLCAnd2FybicpO1xuICAgICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKDxSZXN1bHRzU2NyZWVuIHsuLi5kZWZhdWx0UHJvcHN9IC8+KTtcblxuICAgICAgICAvLyBEw6ljbGVuY2hlciBsZSBwYXJ0YWdlXG4gICAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCdQYXJ0YWdlcicpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gVsOpcmlmaWVyIHF1ZSBsZSBtb2NrIGEgw6l0w6kgYXBwZWzDqVxuICAgICAgICBleHBlY3QoU2hhcmUuc2hhcmUpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICAgICAgLy8gVsOpcmlmaWVyIHF1ZSBjb25zb2xlLndhcm4gYSDDqXTDqSBhcHBlbMOpZSBhdmVjIGxlIG1lc3NhZ2UgZCdlcnJldXIgYXBwcm9wcmnDqVxuICAgICAgICBleHBlY3Qod2FyblNweSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ0Vycm9yIHNoYXJpbmcgcmVzdWx0czonLCBzaGFyZUVycm9yKTtcblxuICAgICAgICB3YXJuU3B5Lm1vY2tSZXN0b3JlKCk7XG4gICAgfSk7XG4vLyBUZXN0cyDDoCBham91dGVyIMOgIHRvbiBmaWNoaWVyIFJlc3VsdHNTY3JlZW4udGVzdC5qc1xuXG5kZXNjcmliZSgnRGV0YWlsZWQgUmVzdWx0cyAtIEVkZ2UgQ2FzZXMnLCAoKSA9PiB7XG5pdCgnZGlzcGxheXMgc2tpcHBlZCBxdWVzdGlvbnMgY29ycmVjdGx5JywgKCkgPT4ge1xuICBjb25zdCBkZXRhaWxlZFJlc3VsdHMgPSBbXG4gICAgeyBcbiAgICAgIHF1ZXN0aW9uOiAnV2hhdCBpcyAyKzI/JywgXG4gICAgICB1c2VyQW5zd2VyOiAnJywgXG4gICAgICBjb3JyZWN0QW5zd2VyOiAnNCcsIFxuICAgICAgaXNDb3JyZWN0OiBmYWxzZSwgXG4gICAgICBpc1NraXBwZWQ6IHRydWVcbiAgICB9LFxuICBdO1xuICBjb25zdCB7IGdldEJ5VGV4dCwgZ2V0QWxsQnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICA8UmVzdWx0c1NjcmVlbiBcbiAgICAgIHsuLi5kZWZhdWx0UHJvcHN9IFxuICAgICAgc2hvd0RldGFpbGVkUmVzdWx0cz17dHJ1ZX0gXG4gICAgICBkZXRhaWxlZFJlc3VsdHM9e2RldGFpbGVkUmVzdWx0c30gXG4gICAgLz5cbiAgKTtcbiAgXG4gIC8vIFbDqXJpZmllciBsJ2ljw7RuZSBwb3VyIHF1ZXN0aW9uIHBhc3PDqWUgKHBldXQgYXBwYXJhw650cmUgcGx1c2lldXJzIGZvaXMpXG4gIGV4cGVjdChnZXRBbGxCeVRlc3RJZCgnaWNvbi1wbGF5LXNraXAtZm9yd2FyZCcpLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICBcbiAgLy8gVsOpcmlmaWVyIGxlIHRleHRlIFwiUGFzc8OpZVwiXG4gIGV4cGVjdChnZXRCeVRleHQoJ1Bhc3PDqWUnKSkudG9CZVRydXRoeSgpO1xuICBcbiAgLy8gVsOpcmlmaWVyIHF1J29uIG5lIG1vbnRyZSBQQVMgbGEgcsOpcG9uc2UgY29ycmVjdGUgcG91ciBsZXMgcXVlc3Rpb25zIHBhc3PDqWVzXG4gIGV4cGVjdCgoKSA9PiBnZXRCeVRleHQoJ1LDqXBvbnNlIGNvcnJlY3RlOicpKS50b1Rocm93KCk7XG59KTtcblxuXG5pdCgnZGlzcGxheXMgY29ycmVjdCBxdWVzdGlvbnMgd2l0aG91dCBzaG93aW5nIGNvcnJlY3QgYW5zd2VyIHNlY3Rpb24nLCAoKSA9PiB7XG4gIGNvbnN0IGRldGFpbGVkUmVzdWx0cyA9IFtcbiAgICB7IFxuICAgICAgcXVlc3Rpb246ICdXaGF0IGlzIDMrMz8nLCBcbiAgICAgIHVzZXJBbnN3ZXI6ICc2JywgXG4gICAgICBjb3JyZWN0QW5zd2VyOiAnNicsIFxuICAgICAgaXNDb3JyZWN0OiB0cnVlLCBcbiAgICAgIGlzU2tpcHBlZDogZmFsc2VcbiAgICB9LFxuICBdO1xuICBjb25zdCB7IGdldEJ5VGV4dCwgZ2V0QWxsQnlUZXN0SWQsIHF1ZXJ5QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgPFJlc3VsdHNTY3JlZW4gXG4gICAgICB7Li4uZGVmYXVsdFByb3BzfSBcbiAgICAgIHNob3dEZXRhaWxlZFJlc3VsdHM9e3RydWV9IFxuICAgICAgZGV0YWlsZWRSZXN1bHRzPXtkZXRhaWxlZFJlc3VsdHN9IFxuICAgIC8+XG4gICk7XG4gIFxuICAvLyBWw6lyaWZpZXIgbCdpY8O0bmUgcG91ciByw6lwb25zZSBjb3JyZWN0ZSAocGV1dCBhcHBhcmHDrnRyZSBwbHVzaWV1cnMgZm9pcylcbiAgZXhwZWN0KGdldEFsbEJ5VGVzdElkKCdpY29uLWNoZWNrbWFyay1jaXJjbGUnKS5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgXG4gIC8vIFbDqXJpZmllciBsYSByw6lwb25zZSB1dGlsaXNhdGV1clxuICBleHBlY3QoZ2V0QnlUZXh0KCc2JykpLnRvQmVUcnV0aHkoKTtcbiAgXG4gIC8vIFbDqXJpZmllciBxdSdvbiBuZSBtb250cmUgUEFTIGxhIHNlY3Rpb24gXCJSw6lwb25zZSBjb3JyZWN0ZVwiIHBvdXIgbGVzIGJvbm5lcyByw6lwb25zZXNcbiAgZXhwZWN0KHF1ZXJ5QnlUZXh0KCdSw6lwb25zZSBjb3JyZWN0ZTonKSkudG9CZU51bGwoKTtcbn0pO1xuXG5pdCgnZGlzcGxheXMgbWl4ZWQgdHlwZXMgb2YgZGV0YWlsZWQgcmVzdWx0cyAoY29ycmVjdCwgaW5jb3JyZWN0LCBza2lwcGVkKScsICgpID0+IHtcbiAgY29uc3QgZGV0YWlsZWRSZXN1bHRzID0gW1xuICAgIHsgXG4gICAgICBxdWVzdGlvbjogJ1F1ZXN0aW9uIDEgLSBDb3JyZWN0JywgXG4gICAgICB1c2VyQW5zd2VyOiAnQScsIFxuICAgICAgY29ycmVjdEFuc3dlcjogJ0EnLCBcbiAgICAgIGlzQ29ycmVjdDogdHJ1ZSwgXG4gICAgICBpc1NraXBwZWQ6IGZhbHNlIFxuICAgIH0sXG4gICAgeyBcbiAgICAgIHF1ZXN0aW9uOiAnUXVlc3Rpb24gMiAtIEluY29ycmVjdCcsIFxuICAgICAgdXNlckFuc3dlcjogJ0InLCBcbiAgICAgIGNvcnJlY3RBbnN3ZXI6ICdDJywgXG4gICAgICBpc0NvcnJlY3Q6IGZhbHNlLCBcbiAgICAgIGlzU2tpcHBlZDogZmFsc2UgXG4gICAgfSxcbiAgICB7IFxuICAgICAgcXVlc3Rpb246ICdRdWVzdGlvbiAzIC0gU2tpcHBlZCcsIFxuICAgICAgdXNlckFuc3dlcjogJycsIFxuICAgICAgY29ycmVjdEFuc3dlcjogJ0QnLCBcbiAgICAgIGlzQ29ycmVjdDogZmFsc2UsIFxuICAgICAgaXNTa2lwcGVkOiB0cnVlIFxuICAgIH0sXG4gIF07XG4gIFxuICBjb25zdCB7IGdldEJ5VGV4dCwgZ2V0QWxsQnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICA8UmVzdWx0c1NjcmVlbiBcbiAgICAgIHsuLi5kZWZhdWx0UHJvcHN9IFxuICAgICAgc2hvd0RldGFpbGVkUmVzdWx0cz17dHJ1ZX0gXG4gICAgICBkZXRhaWxlZFJlc3VsdHM9e2RldGFpbGVkUmVzdWx0c30gXG4gICAgLz5cbiAgKTtcbiAgXG4gIC8vIFF1ZXN0aW9uIDEgLSBDb3JyZWN0ZVxuICBleHBlY3QoZ2V0QWxsQnlUZXN0SWQoJ2ljb24tY2hlY2ttYXJrLWNpcmNsZScpLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICBleHBlY3QoZ2V0QnlUZXh0KCdRdWVzdGlvbiAxIC0gQ29ycmVjdCcpKS50b0JlVHJ1dGh5KCk7XG4gIFxuICAvLyBRdWVzdGlvbiAyIC0gSW5jb3JyZWN0ZSAgXG4gIGV4cGVjdChnZXRBbGxCeVRlc3RJZCgnaWNvbi1jbG9zZS1jaXJjbGUnKS5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgZXhwZWN0KGdldEJ5VGV4dCgnUXVlc3Rpb24gMiAtIEluY29ycmVjdCcpKS50b0JlVHJ1dGh5KCk7XG4gIGV4cGVjdChnZXRCeVRleHQoJ0InKSkudG9CZVRydXRoeSgpOyAvLyBSw6lwb25zZSB1dGlsaXNhdGV1clxuICBleHBlY3QoZ2V0QnlUZXh0KCdDJykpLnRvQmVUcnV0aHkoKTsgLy8gQm9ubmUgcsOpcG9uc2VcbiAgXG4gIC8vIFF1ZXN0aW9uIDMgLSBQYXNzw6llXG4gIGV4cGVjdChnZXRBbGxCeVRlc3RJZCgnaWNvbi1wbGF5LXNraXAtZm9yd2FyZCcpLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICBleHBlY3QoZ2V0QnlUZXh0KCdRdWVzdGlvbiAzIC0gU2tpcHBlZCcpKS50b0JlVHJ1dGh5KCk7XG4gIGV4cGVjdChnZXRCeVRleHQoJ1Bhc3PDqWUnKSkudG9CZVRydXRoeSgpO1xufSk7XG5cbiAgaXQoJ2RvZXMgbm90IGRpc3BsYXkgZGV0YWlsZWQgcmVzdWx0cyB3aGVuIGFycmF5IGlzIGVtcHR5JywgKCkgPT4ge1xuICAgIGNvbnN0IHsgcXVlcnlCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgIDxSZXN1bHRzU2NyZWVuIFxuICAgICAgICB7Li4uZGVmYXVsdFByb3BzfSBcbiAgICAgICAgc2hvd0RldGFpbGVkUmVzdWx0cz17dHJ1ZX0gXG4gICAgICAgIGRldGFpbGVkUmVzdWx0cz17W119IC8vIOKGkCBUYWJsZWF1IHZpZGVcbiAgICAgIC8+XG4gICAgKTtcbiAgICBcbiAgICBleHBlY3QocXVlcnlCeVRleHQoJ0TDqXRhaWwgZGVzIHLDqXBvbnNlcycpKS50b0JlTnVsbCgpO1xuICB9KTtcblxuICBpdCgnZG9lcyBub3QgZGlzcGxheSBkZXRhaWxlZCByZXN1bHRzIHdoZW4gc2hvd0RldGFpbGVkUmVzdWx0cyBpcyBmYWxzZSBldmVuIHdpdGggZGF0YScsICgpID0+IHtcbiAgICBjb25zdCBkZXRhaWxlZFJlc3VsdHMgPSBbXG4gICAgICB7IFxuICAgICAgICBxdWVzdGlvbjogJ0hpZGRlbiBxdWVzdGlvbicsIFxuICAgICAgICB1c2VyQW5zd2VyOiAnQScsIFxuICAgICAgICBjb3JyZWN0QW5zd2VyOiAnQicsIFxuICAgICAgICBpc0NvcnJlY3Q6IGZhbHNlLCBcbiAgICAgICAgaXNTa2lwcGVkOiBmYWxzZSBcbiAgICAgIH0sXG4gICAgXTtcbiAgICBcbiAgICBjb25zdCB7IHF1ZXJ5QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICA8UmVzdWx0c1NjcmVlbiBcbiAgICAgICAgey4uLmRlZmF1bHRQcm9wc30gXG4gICAgICAgIHNob3dEZXRhaWxlZFJlc3VsdHM9e2ZhbHNlfSAvLyDihpAgRXhwbGljaXRlbWVudCBmYWxzZVxuICAgICAgICBkZXRhaWxlZFJlc3VsdHM9e2RldGFpbGVkUmVzdWx0c30gXG4gICAgICAvPlxuICAgICk7XG4gICAgXG4gICAgZXhwZWN0KHF1ZXJ5QnlUZXh0KCdEw6l0YWlsIGRlcyByw6lwb25zZXMnKSkudG9CZU51bGwoKTtcbiAgICBleHBlY3QocXVlcnlCeVRleHQoJ0hpZGRlbiBxdWVzdGlvbicpKS50b0JlTnVsbCgpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnRWRnZSBDYXNlcyAtIFByb3BzIGhhbmRsaW5nJywgKCkgPT4ge1xuICBpdCgnaGFuZGxlcyB6ZXJvIHRvdGFsUXVlc3Rpb25zIGdyYWNlZnVsbHknLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgIDxSZXN1bHRzU2NyZWVuIFxuICAgICAgICB7Li4uZGVmYXVsdFByb3BzfSBcbiAgICAgICAgdG90YWxRdWVzdGlvbnM9ezB9IFxuICAgICAgICBjb3JyZWN0QW5zd2Vycz17MH0gXG4gICAgICAvPlxuICAgICk7XG4gICAgXG4gICAgLy8gRGV2cmFpdCBhZmZpY2hlciAwJSBzYW5zIGNyYXNoZXJcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCcwJScpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnMC8wJykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ2hhbmRsZXMgbWlzc2luZyBvblJldHJ5IGFuZCBvbkNvbnRpbnVlIHByb3BzIGdyYWNlZnVsbHknLCAoKSA9PiB7XG4gICAgY29uc3QgcHJvcHNXaXRob3V0Q2FsbGJhY2tzID0ge1xuICAgICAgLi4uZGVmYXVsdFByb3BzLFxuICAgICAgb25SZXRyeTogdW5kZWZpbmVkLFxuICAgICAgb25Db250aW51ZTogdW5kZWZpbmVkLFxuICAgIH07XG4gICAgXG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcig8UmVzdWx0c1NjcmVlbiB7Li4ucHJvcHNXaXRob3V0Q2FsbGJhY2tzfSAvPik7XG4gICAgXG4gICAgLy8gTGVzIGJvdXRvbnMgZG9pdmVudCDDqnRyZSBwcsOpc2VudHMgbWFpcyBuZSBwYXMgY3Jhc2hlciBxdWFuZCBjbGlxdcOpc1xuICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCdSw6llc3NheWVyJykpO1xuICAgICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgnQ29udGludWVyJykpO1xuICAgIH0pLm5vdC50b1Rocm93KCk7XG4gIH0pO1xuXG4gIGl0KCdoYW5kbGVzIGVtcHR5IGZlZWRiYWNrIHByb3AgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgIGNvbnN0IHsgcXVlcnlCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgIDxSZXN1bHRzU2NyZWVuIFxuICAgICAgICB7Li4uZGVmYXVsdFByb3BzfSBcbiAgICAgICAgZmVlZGJhY2s9e251bGx9IC8vIOKGkCBudWxsIGF1IGxpZXUgZGUgc3RyaW5nIHZpZGVcbiAgICAgIC8+XG4gICAgKTtcbiAgICBcbiAgICBleHBlY3QocXVlcnlCeVRleHQoJ0NvbnNlaWxzIHBvdXIgcHJvZ3Jlc3NlcicpKS50b0JlTnVsbCgpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnUGVyZm9ybWFuY2UgRGF0YSBFZGdlIENhc2VzJywgKCkgPT4ge1xuICBpdCgnaGFuZGxlcyBmcmFjdGlvbmFsIHBlcmNlbnRhZ2VzIGNvcnJlY3RseScsICgpID0+IHtcbiAgICAvLyAxLzMgPSAzMy4zMyUg4oaSIGRldnJhaXQgYXJyb25kaXIgw6AgMzMlXG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgIDxSZXN1bHRzU2NyZWVuIFxuICAgICAgICB7Li4uZGVmYXVsdFByb3BzfSBcbiAgICAgICAgY29ycmVjdEFuc3dlcnM9ezF9IFxuICAgICAgICB0b3RhbFF1ZXN0aW9ucz17M30gXG4gICAgICAvPlxuICAgICk7XG4gICAgXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnMzMlJykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCcxLzMnKSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICBpdCgnZGlzcGxheXMgYWxsIHBlcmZvcm1hbmNlIHRpZXJzIGNvcnJlY3RseScsICgpID0+IHtcbiAgICAvLyBUZXN0IGRlcyBkaWZmw6lyZW50cyBzZXVpbHMgZGUgcGVyZm9ybWFuY2UgKGTDqWrDoCBmYWl0IG1haXMgcG91ciDDqnRyZSBzw7tyKVxuICAgIGNvbnN0IHRlc3RDYXNlcyA9IFtcbiAgICAgIHsgc2NvcmU6IDksIHRvdGFsOiAxMCwgZXhwZWN0ZWQ6ICdFeGNlbGxlbnQhJyB9LCAgICAvLyA5MCVcbiAgICAgIHsgc2NvcmU6IDcsIHRvdGFsOiAxMCwgZXhwZWN0ZWQ6ICdCaWVuIGpvdcOpIScgfSwgICAgLy8gNzAlIFxuICAgICAgeyBzY29yZTogNSwgdG90YWw6IDEwLCBleHBlY3RlZDogJ1BhcyBtYWwhJyB9LCAgICAgIC8vIDUwJVxuICAgICAgeyBzY29yZTogMiwgdG90YWw6IDEwLCBleHBlY3RlZDogJ0NvbnRpbnVleiB2b3MgZWZmb3J0cycgfSwgLy8gMjAlXG4gICAgXTtcblxuICAgIHRlc3RDYXNlcy5mb3JFYWNoKCh7IHNjb3JlLCB0b3RhbCwgZXhwZWN0ZWQgfSkgPT4ge1xuICAgICAgY29uc3QgeyBnZXRCeVRleHQsIHVubW91bnQgfSA9IHJlbmRlcihcbiAgICAgICAgPFJlc3VsdHNTY3JlZW4gXG4gICAgICAgICAgey4uLmRlZmF1bHRQcm9wc30gXG4gICAgICAgICAgY29ycmVjdEFuc3dlcnM9e3Njb3JlfSBcbiAgICAgICAgICB0b3RhbFF1ZXN0aW9ucz17dG90YWx9IFxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGdldEJ5VGV4dChleHBlY3RlZCkpLnRvQmVUcnV0aHkoKTtcbiAgICAgIHVubW91bnQoKTsgLy8gTmV0dG95ZXIgZW50cmUgbGVzIHRlc3RzXG4gICAgfSk7XG4gIH0pO1xufSk7XG5cbn0pOyJdLCJtYXBwaW5ncyI6IkFBTUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLHNCQUFzQixFQUFFLFlBQU07RUFDcEMsSUFBQUMsUUFBQSxHQUFpQkMsT0FBTyxDQUFDLGNBQWMsQ0FBQztJQUFoQ0MsSUFBSSxHQUFBRixRQUFBLENBQUpFLElBQUk7RUFDWixPQUFPO0lBQ0hDLGNBQWMsRUFBRSxTQUFoQkEsY0FBY0EsQ0FBR0MsS0FBSztNQUFBLE9BQUssSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNKLElBQUksRUFBQUssTUFBQSxDQUFBQyxNQUFBLEtBQUtKLEtBQUssQ0FBRyxDQUFDO0lBQUE7RUFDbEQsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUNGTixXQUFBLEdBQUtDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxZQUFNO0VBQ2xDLElBQUFVLFNBQUEsR0FBaUJSLE9BQU8sQ0FBQyxjQUFjLENBQUM7SUFBaENTLElBQUksR0FBQUQsU0FBQSxDQUFKQyxJQUFJO0VBQ1osT0FBTztJQUNIQyxRQUFRLEVBQUUsU0FBVkEsUUFBUUEsQ0FBR1AsS0FBSztNQUFBLE9BQUssSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNJLElBQUk7UUFBQ0UsTUFBTSxFQUFFLFFBQVFSLEtBQUssQ0FBQ1MsSUFBSSxFQUFHO1FBQUFDLFFBQUEsRUFBRVYsS0FBSyxDQUFDUztNQUFJLENBQU8sQ0FBQztJQUFBO0VBQ2hGLENBQUM7QUFDTCxDQUFDLENBQUM7QUFBQyxJQUFBRSxzQkFBQSxHQUFBZCxPQUFBO0FBQUEsSUFBQWUsa0JBQUEsR0FBQUQsc0JBQUEsQ0FBQWQsT0FBQTtBQWpCSCxJQUFBZ0IsTUFBQSxHQUFBRixzQkFBQSxDQUFBZCxPQUFBO0FBQ0EsSUFBQWlCLFlBQUEsR0FBQWpCLE9BQUE7QUFDQSxJQUFBa0IsY0FBQSxHQUFBSixzQkFBQSxDQUFBZCxPQUFBO0FBQ0Es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TSxDQUFDRCxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQ0UsVUFBVSxDQUFDLENBQUM7TUFDckNELE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0lBQ3ZDLENBQUMsQ0FBQztJQUVGTixFQUFFLENBQUMsMENBQTBDLEVBQUUsWUFBTTtNQUVuRCxJQUFNeUQsU0FBUyxHQUFHLENBQ2hCO1FBQUVDLEtBQUssRUFBRSxDQUFDO1FBQUVDLEtBQUssRUFBRSxFQUFFO1FBQUVDLFFBQVEsRUFBRTtNQUFhLENBQUMsRUFDL0M7UUFBRUYsS0FBSyxFQUFFLENBQUM7UUFBRUMsS0FBSyxFQUFFLEVBQUU7UUFBRUMsUUFBUSxFQUFFO01BQWEsQ0FBQyxFQUMvQztRQUFFRixLQUFLLEVBQUUsQ0FBQztRQUFFQyxLQUFLLEVBQUUsRUFBRTtRQUFFQyxRQUFRLEVBQUU7TUFBVyxDQUFDLEVBQzdDO1FBQUVGLEtBQUssRUFBRSxDQUFDO1FBQUVDLEtBQUssRUFBRSxFQUFFO1FBQUVDLFFBQVEsRUFBRTtNQUF3QixDQUFDLENBQzNEO01BRURILFNBQVMsQ0FBQ0ksT0FBTyxDQUFDLFVBQUFDLEtBQUEsRUFBZ0M7UUFBQSxJQUE3QkosS0FBSyxHQUFBSSxLQUFBLENBQUxKLEtBQUs7VUFBRUMsS0FBSyxHQUFBRyxLQUFBLENBQUxILEtBQUs7VUFBRUMsUUFBUSxHQUFBRSxLQUFBLENBQVJGLFFBQVE7UUFDekMsSUFBQUcsU0FBQSxHQUErQixJQUFBN0QsbUJBQU0sRUFDbkMsSUFBQTlDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDYSxjQUFBLENBQUFpQyxPQUFhLEVBQUE3QyxNQUFBLENBQUFDLE1BQUEsS0FDUndCLFlBQVk7WUFDaEJFLGNBQWMsRUFBRXlFLEtBQU07WUFDdEIxRSxjQUFjLEVBQUUyRTtVQUFNLEVBQ3ZCLENBQ0gsQ0FBQztVQU5PdkQsU0FBUyxHQUFBMkQsU0FBQSxDQUFUM0QsU0FBUztVQUFFNEQsT0FBTyxHQUFBRCxTQUFBLENBQVBDLE9BQU87UUFRMUIzRCxNQUFNLENBQUNELFNBQVMsQ0FBQ3dELFFBQVEsQ0FBQyxDQUFDLENBQUN0RCxVQUFVLENBQUMsQ0FBQztRQUN4QzBELE9BQU8sQ0FBQyxDQUFDO01BQ1gsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0FBRUYsQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119