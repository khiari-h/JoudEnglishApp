a5dea1ccb8b5479b915adcf8e6c926dc
_getJestObj().mock('../../src/utils/storageUtils', function () {
  return {
    storeData: jest.fn(function () {
      return Promise.resolve();
    }),
    getData: jest.fn(function () {
      return Promise.resolve(null);
    })
  };
});
_getJestObj().mock('../../src/utils/constants', function () {
  return {
    DEFAULT_SETTINGS: {
      notifications: false,
      dailyGoal: 60,
      theme: 'dark'
    },
    STORAGE_KEYS: {
      USER_SETTINGS: 'userSettings'
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _SettingContext = require("../../src/contexts/SettingContext");
var _storageUtils = require("../../src/utils/storageUtils");
var _constants = require("../../src/utils/constants");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var flattenChildren = function flattenChildren(children) {
  return Array.isArray(children) ? children.join('') : children;
};
var TestComponent = function TestComponent() {
  var _React$useContext = _react.default.useContext(_SettingContext.SettingsContext),
    settings = _React$useContext.settings,
    isLoading = _React$useContext.isLoading,
    updateSetting = _React$useContext.updateSetting,
    updateSettings = _React$useContext.updateSettings,
    resetSettings = _React$useContext.resetSettings,
    areNotificationsEnabled = _React$useContext.areNotificationsEnabled,
    getDailyGoal = _React$useContext.getDailyGoal,
    setDailyGoal = _React$useContext.setDailyGoal;
  if (isLoading) {
    return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "loading-status",
      children: "Loading..."
    });
  }
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [(0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "notifications-enabled",
      children: ["Notifications: ", settings.notifications ? 'On' : 'Off']
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "daily-goal",
      children: ["Daily Goal: ", settings.dailyGoal, " minutes"]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "theme",
      children: ["Theme: ", settings.theme]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "are-notifications-enabled-func",
      children: ["Func Notifications: ", areNotificationsEnabled() ? 'On' : 'Off']
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "get-daily-goal-func",
      children: ["Func Daily Goal: ", getDailyGoal(), " minutes"]
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Toggle Notifications",
      onPress: function onPress() {
        return updateSetting('notifications', !settings.notifications);
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Set Daily Goal 60",
      onPress: function onPress() {
        return setDailyGoal(60);
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Set Daily Goal 5",
      onPress: function onPress() {
        return setDailyGoal(5);
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Set Daily Goal 150",
      onPress: function onPress() {
        return setDailyGoal(150);
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Update Theme to Dark",
      onPress: function onPress() {
        return updateSetting('theme', 'dark');
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Update Multiple",
      onPress: function onPress() {
        return updateSettings({
          notifications: false,
          dailyGoal: 45
        });
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Reset Settings",
      onPress: resetSettings
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Update Invalid Setting",
      onPress: function onPress() {
        return updateSetting('invalidKey', 'value');
      }
    })]
  });
};
describe('SettingsContext', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _storageUtils.getData.mockResolvedValue(null);
  });
  it('loads default settings if no saved settings found', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SettingContext.SettingsProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    expect(_reactNative.screen.getByTestId('loading-status')).toBeTruthy();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
    expect(_reactNative.screen.queryByTestId('loading-status')).toBeNull();
    expect(flattenChildren(_reactNative.screen.getByTestId('notifications-enabled').props.children)).toBe('Notifications: On');
    expect(flattenChildren(_reactNative.screen.getByTestId('daily-goal').props.children)).toBe('Daily Goal: 30 minutes');
    expect(flattenChildren(_reactNative.screen.getByTestId('theme').props.children)).toBe('Theme: light');
    expect(_storageUtils.getData).toHaveBeenCalledWith(_constants.STORAGE_KEYS.USER_SETTINGS);
    expect(_storageUtils.storeData).toHaveBeenCalledTimes(2);
  }));
  it('loads saved settings from storage', (0, _asyncToGenerator2.default)(function* () {
    var savedSettings = {
      notifications: false,
      dailyGoal: 60,
      theme: 'dark'
    };
    _storageUtils.getData.mockResolvedValueOnce(savedSettings);
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SettingContext.SettingsProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
    expect(flattenChildren(_reactNative.screen.getByTestId('notifications-enabled').props.children)).toBe('Notifications: Off');
    expect(flattenChildren(_reactNative.screen.getByTestId('daily-goal').props.children)).toBe('Daily Goal: 60 minutes');
    expect(flattenChildren(_reactNative.screen.getByTestId('theme').props.children)).toBe('Theme: dark');
  }));
  it('updates a single setting and saves it', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SettingContext.SettingsProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Toggle Notifications'));
    expect(flattenChildren(_reactNative.screen.getByTestId('notifications-enabled').props.children)).toBe('Notifications: Off');
    expect(_storageUtils.storeData).toHaveBeenCalledWith(_constants.STORAGE_KEYS.USER_SETTINGS, Object.assign({}, _constants.DEFAULT_SETTINGS, {
      notifications: false
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Theme to Dark'));
    expect(flattenChildren(_reactNative.screen.getByTestId('theme').props.children)).toBe('Theme: dark');
    expect(_storageUtils.storeData).toHaveBeenCalledWith(_constants.STORAGE_KEYS.USER_SETTINGS, Object.assign({}, _constants.DEFAULT_SETTINGS, {
      notifications: false,
      theme: 'dark'
    }));
  }));
  it('updates multiple settings and saves them', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SettingContext.SettingsProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Multiple'));
    expect(flattenChildren(_reactNative.screen.getByTestId('notifications-enabled').props.children)).toBe('Notifications: Off');
    expect(flattenChildren(_reactNative.screen.getByTestId('daily-goal').props.children)).toBe('Daily Goal: 45 minutes');
    expect(_storageUtils.storeData).toHaveBeenCalledWith(_constants.STORAGE_KEYS.USER_SETTINGS, Object.assign({}, _constants.DEFAULT_SETTINGS, {
      notifications: false,
      dailyGoal: 45
    }));
  }));
  it('resets settings to defaults and saves', (0, _asyncToGenerator2.default)(function* () {
    _storageUtils.getData.mockResolvedValueOnce({
      notifications: false,
      dailyGoal: 60,
      theme: 'dark'
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SettingContext.SettingsProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
    expect(flattenChildren(_reactNative.screen.getByTestId('notifications-enabled').props.children)).toBe('Notifications: Off');
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Reset Settings'));
    expect(flattenChildren(_reactNative.screen.getByTestId('notifications-enabled').props.children)).toBe('Notifications: On');
    expect(flattenChildren(_reactNative.screen.getByTestId('daily-goal').props.children)).toBe('Daily Goal: 30 minutes');
    expect(_storageUtils.storeData).toHaveBeenCalledWith(_constants.STORAGE_KEYS.USER_SETTINGS, _constants.DEFAULT_SETTINGS);
  }));
  it('areNotificationsEnabled returns correct status', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SettingContext.SettingsProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
    expect(flattenChildren(_reactNative.screen.getByTestId('are-notifications-enabled-func').props.children)).toBe('Func Notifications: On');
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Toggle Notifications'));
    expect(flattenChildren(_reactNative.screen.getByTestId('are-notifications-enabled-func').props.children)).toBe('Func Notifications: Off');
  }));
  it('getDailyGoal returns correct value', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SettingContext.SettingsProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
    expect(flattenChildren(_reactNative.screen.getByTestId('get-daily-goal-func').props.children)).toBe('Func Daily Goal: 30 minutes');
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Daily Goal 60'));
    expect(flattenChildren(_reactNative.screen.getByTestId('get-daily-goal-func').props.children)).toBe('Func Daily Goal: 60 minutes');
  }));
  it('setDailyGoal clamps values between 1 and 120', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SettingContext.SettingsProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Daily Goal 5'));
    expect(flattenChildren(_reactNative.screen.getByTestId('daily-goal').props.children)).toBe('Daily Goal: 5 minutes');
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Set Daily Goal 150'));
    expect(flattenChildren(_reactNative.screen.getByTestId('daily-goal').props.children)).toBe('Daily Goal: 120 minutes');
  }));
  it('does not update invalid setting key', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SettingContext.SettingsProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {}));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Invalid Setting'));
    expect(flattenChildren(_reactNative.screen.getByTestId('notifications-enabled').props.children)).toBe('Notifications: On');
    expect(flattenChildren(_reactNative.screen.getByTestId('daily-goal').props.children)).toBe('Daily Goal: 30 minutes');
    expect(flattenChildren(_reactNative.screen.getByTestId('theme').props.children)).toBe('Theme: light');
    expect(_storageUtils.storeData).toHaveBeenCalledTimes(1);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,