11e7aeaa432301f0caf1d01610d9e131
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    },
    useRoute: function useRoute() {
      return {
        params: {}
      };
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _layout = _interopRequireDefault(require("../../app/_layout"));
var _ProgressContext = require("../../src/contexts/ProgressContext");
var _AppProvider = require("../../src/contexts/AppProvider");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Progress Tracking Integration Test', function () {
  it('should update progress across screens after completing an exercise', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AppProvider.AppProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsx)(_layout.default, {})
        })
      })),
      getByText = _render.getByText,
      findByText = _render.findByText;
    _reactNative.fireEvent.press(getByText(/Commencer l'apprentissage/i));
    var levelA1 = yield findByText(/Niveau A1/i);
    _reactNative.fireEvent.press(levelA1);
    var vocabExercise = yield findByText(/Vocabulaire/i);
    _reactNative.fireEvent.press(vocabExercise);
    _reactNative.fireEvent.press(getByText(/Retour/i));
    var updatedVocabExercise = yield findByText(/Vocabulaire - 10%/i);
    expect(updatedVocabExercise).toBeTruthy();
    _reactNative.fireEvent.press(getByText(/Retour/i));
    var updatedLevelA1 = yield findByText(/Niveau A1 - 1%/i);
    expect(updatedLevelA1).toBeTruthy();
    _reactNative.fireEvent.press(getByText(/Retour/i));
    var continueSection = yield findByText(/Continuer : Vocabulaire A1/i);
    expect(continueSection).toBeTruthy();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsInVzZU5hdmlnYXRpb24iLCJuYXZpZ2F0ZSIsImZuIiwiZ29CYWNrIiwidXNlUm91dGUiLCJwYXJhbXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9sYXlvdXQiLCJfUHJvZ3Jlc3NDb250ZXh0IiwiX0FwcFByb3ZpZGVyIiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwiaXQiLCJkZWZhdWx0IiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsIkFwcFByb3ZpZGVyIiwiY2hpbGRyZW4iLCJQcm9ncmVzc1Byb3ZpZGVyIiwiZ2V0QnlUZXh0IiwiZmluZEJ5VGV4dCIsImZpcmVFdmVudCIsInByZXNzIiwibGV2ZWxBMSIsInZvY2FiRXhlcmNpc2UiLCJ1cGRhdGVkVm9jYWJFeGVyY2lzZSIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJ1cGRhdGVkTGV2ZWxBMSIsImNvbnRpbnVlU2VjdGlvbiJdLCJzb3VyY2VzIjpbInByb2dyZXNzLXRyYWNraW5nLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IEFwcCBmcm9tICcuLi8uLi9hcHAvX2xheW91dCc7IC8vIEFzc3VyZXotdm91cyBxdWUgbGUgY2hlbWluIGVzdCBjb3JyZWN0XG5pbXBvcnQgeyBQcm9ncmVzc1Byb3ZpZGVyIH0gZnJvbSAnLi4vLi4vc3JjL2NvbnRleHRzL1Byb2dyZXNzQ29udGV4dCc7XG5pbXBvcnQgeyBBcHBQcm92aWRlciB9IGZyb20gJy4uLy4uL3NyYy9jb250ZXh0cy9BcHBQcm92aWRlcic7XG5cbmplc3QubW9jaygnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJywgKCkgPT4gKHtcbiAgLi4uamVzdC5yZXF1aXJlQWN0dWFsKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnKSxcbiAgdXNlTmF2aWdhdGlvbjogKCkgPT4gKHtcbiAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxuICAgIGdvQmFjazogamVzdC5mbigpLFxuICB9KSxcbiAgdXNlUm91dGU6ICgpID0+ICh7XG4gICAgcGFyYW1zOiB7fSxcbiAgfSksXG59KSk7XG5cbmRlc2NyaWJlKCdQcm9ncmVzcyBUcmFja2luZyBJbnRlZ3JhdGlvbiBUZXN0JywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIHVwZGF0ZSBwcm9ncmVzcyBhY3Jvc3Mgc2NyZWVucyBhZnRlciBjb21wbGV0aW5nIGFuIGV4ZXJjaXNlJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0LCBmaW5kQnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICA8QXBwUHJvdmlkZXI+XG4gICAgICAgIDxQcm9ncmVzc1Byb3ZpZGVyPlxuICAgICAgICAgIDxBcHAgLz5cbiAgICAgICAgPC9Qcm9ncmVzc1Byb3ZpZGVyPlxuICAgICAgPC9BcHBQcm92aWRlcj5cbiAgICApO1xuXG4gICAgLy8gMS4gRMOpbWFycmVyIHN1ciBsZSBEYXNoYm9hcmQgZXQgbmF2aWd1ZXIgdmVycyBsYSBzw6lsZWN0aW9uIGRlIG5pdmVhdVxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoL0NvbW1lbmNlciBsJ2FwcHJlbnRpc3NhZ2UvaSkpO1xuXG4gICAgLy8gMi4gU8OpbGVjdGlvbm5lciB1biBuaXZlYXUgKHBhciBleGVtcGxlLCBBMSlcbiAgICBjb25zdCBsZXZlbEExID0gYXdhaXQgZmluZEJ5VGV4dCgvTml2ZWF1IEExL2kpO1xuICAgIGZpcmVFdmVudC5wcmVzcyhsZXZlbEExKTtcblxuICAgIC8vIDMuIFPDqWxlY3Rpb25uZXIgdW4gdHlwZSBkJ2V4ZXJjaWNlIChwYXIgZXhlbXBsZSwgVm9jYWJ1bGFpcmUpXG4gICAgY29uc3Qgdm9jYWJFeGVyY2lzZSA9IGF3YWl0IGZpbmRCeVRleHQoL1ZvY2FidWxhaXJlL2kpO1xuICAgIGZpcmVFdmVudC5wcmVzcyh2b2NhYkV4ZXJjaXNlKTtcblxuICAgIC8vIDQuIFNpbXVsZXIgbGEgcsOpYWxpc2F0aW9uIGRlIGwnZXhlcmNpY2UgZXQgbGEgbWlzZSDDoCBqb3VyIGRlIGxhIHByb2dyZXNzaW9uXG4gICAgLy8gKENldHRlIHBhcnRpZSBwZXV0IG7DqWNlc3NpdGVyIHVuZSBzaW11bGF0aW9uIHBsdXMgY29tcGxleGUgZW4gZm9uY3Rpb24gZGUgdm90cmUgY29kZSlcbiAgICAvLyBQb3VyIGNlIHRlc3QsIG5vdXMgYWxsb25zIHNpbXVsZXIgdW4gY2hhbmdlbWVudCBkZSBwcm9ncmVzc2lvbiBtYW51ZWxsZW1lbnRcbiAgICAvLyBldCB2w6lyaWZpZXIgc2kgbCdpbnRlcmZhY2UgdXRpbGlzYXRldXIgcsOpYWdpdCBjb3JyZWN0ZW1lbnQuXG5cbiAgICAvLyBOT1RFOiBMYSBzaW11bGF0aW9uIGRpcmVjdGUgZGUgbGEgbG9naXF1ZSBkZSBsJ2V4ZXJjaWNlIHBldXQgw6p0cmUgY29tcGxleGUuXG4gICAgLy8gVW5lIGFwcHJvY2hlIGFsdGVybmF0aXZlIGNvbnNpc3RlIMOgIGTDqWNsZW5jaGVyIGRlcyDDqXbDqW5lbWVudHMgcXVpIG1vZGlmaWVudCBsZSBjb250ZXh0ZSBkZSBwcm9ncmVzc2lvbi5cbiAgICAvLyBQYXIgZXhlbXBsZSwgc2kgdm91cyBhdmV6IHVuIMOpdsOpbmVtZW50IGBvbkV4ZXJjaXNlQ29tcGxldGVgLCBkw6ljbGVuY2hlei1sZSBpY2kuXG5cbiAgICAvLyBQb3VyIGxlcyBiZXNvaW5zIGRlIGNlIHRlc3QsIG5vdXMgYWxsb25zIHN1cHBvc2VyIHF1J3VuZSBhY3Rpb24gbWV0IMOgIGpvdXIgbGEgcHJvZ3Jlc3Npb24uXG4gICAgLy8gUGFyIGV4ZW1wbGUsIGVuIGFwcGVsYW50IHVuZSBmb25jdGlvbiBkdSBjb250ZXh0ZSBkZSBwcm9ncmVzc2lvbi5cbiAgICAvLyBEYW5zIHVuIHZyYWkgdGVzdCwgdm91cyBpbnRlcmFnaXJpZXogYXZlYyBsZXMgY29tcG9zYW50cyBkZSBsJ2V4ZXJjaWNlLlxuXG4gICAgLy8gU2ltdWxlciB1biByZXRvdXIgw6AgbCfDqWNyYW4gZGUgc8OpbGVjdGlvbiBkJ2V4ZXJjaWNlc1xuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoL1JldG91ci9pKSk7IC8vIEFzc3VyZXotdm91cyBkJ2F2b2lyIHVuIGJvdXRvbiBcIlJldG91clwiXG5cbiAgICAvLyA1LiBWw6lyaWZpZXIgbGEgbWlzZSDDoCBqb3VyIGRlIGxhIHByb2dyZXNzaW9uIHN1ciBsJ8OpY3JhbiBkZSBzw6lsZWN0aW9uIGQnZXhlcmNpY2VzXG4gICAgY29uc3QgdXBkYXRlZFZvY2FiRXhlcmNpc2UgPSBhd2FpdCBmaW5kQnlUZXh0KC9Wb2NhYnVsYWlyZSAtIDEwJS9pKTtcbiAgICBleHBlY3QodXBkYXRlZFZvY2FiRXhlcmNpc2UpLnRvQmVUcnV0aHkoKTtcblxuICAgIC8vIDYuIFJldG91cm5lciDDoCBsJ8OpY3JhbiBkZSBzw6lsZWN0aW9uIGRlIG5pdmVhdVxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoL1JldG91ci9pKSk7XG5cbiAgICAvLyA3LiBWw6lyaWZpZXIgbGEgbWlzZSDDoCBqb3VyIGRlIGxhIHByb2dyZXNzaW9uIHN1ciBsJ8OpY3JhbiBkZSBzw6lsZWN0aW9uIGRlIG5pdmVhdVxuICAgIGNvbnN0IHVwZGF0ZWRMZXZlbEExID0gYXdhaXQgZmluZEJ5VGV4dCgvTml2ZWF1IEExIC0gMSUvaSk7XG4gICAgZXhwZWN0KHVwZGF0ZWRMZXZlbEExKS50b0JlVHJ1dGh5KCk7XG5cbiAgICAvLyA4LiBSZXRvdXJuZXIgYXUgRGFzaGJvYXJkXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgvUmV0b3VyL2kpKTtcblxuICAgIC8vIDkuIFbDqXJpZmllciBsYSBtaXNlIMOgIGpvdXIgZGUgbGEgcHJvZ3Jlc3Npb24gc3VyIGxlIERhc2hib2FyZFxuICAgIGNvbnN0IGNvbnRpbnVlU2VjdGlvbiA9IGF3YWl0IGZpbmRCeVRleHQoL0NvbnRpbnVlciA6IFZvY2FidWxhaXJlIEExL2kpO1xuICAgIGV4cGVjdChjb250aW51ZVNlY3Rpb24pLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiJBQU1BQSxXQUFBLEdBQUtDLElBQUksQ0FBQywwQkFBMEIsRUFBRTtFQUFBLE9BQUFDLE1BQUEsQ0FBQUMsTUFBQSxLQUNqQ0MsSUFBSSxDQUFDQyxhQUFhLENBQUMsMEJBQTBCLENBQUM7SUFDakRDLGFBQWEsRUFBRSxTQUFmQSxhQUFhQSxDQUFBO01BQUEsT0FBUztRQUNwQkMsUUFBUSxFQUFFSCxJQUFJLENBQUNJLEVBQUUsQ0FBQyxDQUFDO1FBQ25CQyxNQUFNLEVBQUVMLElBQUksQ0FBQ0ksRUFBRSxDQUFDO01BQ2xCLENBQUM7SUFBQSxDQUFDO0lBQ0ZFLFFBQVEsRUFBRSxTQUFWQSxRQUFRQSxDQUFBO01BQUEsT0FBUztRQUNmQyxNQUFNLEVBQUUsQ0FBQztNQUNYLENBQUM7SUFBQTtFQUFDO0FBQUEsQ0FDRixDQUFDO0FBQUMsSUFBQUMsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLGtCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFmSixJQUFBRSxNQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxZQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxPQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSyxnQkFBQSxHQUFBTCxPQUFBO0FBQ0EsSUFBQU0sWUFBQSxHQUFBTixPQUFBO0FBQTZELElBQUFPLFdBQUEsR0FBQVAsT0FBQTtBQUFBLFNBQUFiLFlBQUE7RUFBQSxJQUFBcUIsUUFBQSxHQUFBUixPQUFBO0lBQUFULElBQUEsR0FBQWlCLFFBQUEsQ0FBQWpCLElBQUE7RUFBQUosV0FBQSxZQUFBQSxZQUFBO0lBQUEsT0FBQUksSUFBQTtFQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBYTdEa0IsUUFBUSxDQUFDLG9DQUFvQyxFQUFFLFlBQU07RUFDbkRDLEVBQUUsQ0FBQyxvRUFBb0UsTUFBQVQsa0JBQUEsQ0FBQVUsT0FBQSxFQUFFLGFBQVk7SUFDbkYsSUFBQUMsT0FBQSxHQUFrQyxJQUFBQyxtQkFBTSxFQUN0QyxJQUFBTixXQUFBLENBQUFPLEdBQUEsRUFBQ1IsWUFBQSxDQUFBUyxXQUFXO1FBQUFDLFFBQUEsRUFDVixJQUFBVCxXQUFBLENBQUFPLEdBQUEsRUFBQ1QsZ0JBQUEsQ0FBQVksZ0JBQWdCO1VBQUFELFFBQUEsRUFDZixJQUFBVCxXQUFBLENBQUFPLEdBQUEsRUFBQ1YsT0FBQSxDQUFBTyxPQUFHLElBQUU7UUFBQyxDQUNTO01BQUMsQ0FDUixDQUNmLENBQUM7TUFOT08sU0FBUyxHQUFBTixPQUFBLENBQVRNLFNBQVM7TUFBRUMsVUFBVSxHQUFBUCxPQUFBLENBQVZPLFVBQVU7SUFTN0JDLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0gsU0FBUyxDQUFDLDRCQUE0QixDQUFDLENBQUM7SUFHeEQsSUFBTUksT0FBTyxTQUFTSCxVQUFVLENBQUMsWUFBWSxDQUFDO0lBQzlDQyxzQkFBUyxDQUFDQyxLQUFLLENBQUNDLE9BQU8sQ0FBQztJQUd4QixJQUFNQyxhQUFhLFNBQVNKLFVBQVUsQ0FBQyxjQUFjLENBQUM7SUFDdERDLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0UsYUFBYSxDQUFDO0lBZ0I5Qkgsc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDSCxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7SUFHckMsSUFBTU0sb0JBQW9CLFNBQVNMLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQztJQUNuRU0sTUFBTSxDQUFDRCxvQkFBb0IsQ0FBQyxDQUFDRSxVQUFVLENBQUMsQ0FBQztJQUd6Q04sc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDSCxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7SUFHckMsSUFBTVMsY0FBYyxTQUFTUixVQUFVLENBQUMsaUJBQWlCLENBQUM7SUFDMURNLE1BQU0sQ0FBQ0UsY0FBYyxDQUFDLENBQUNELFVBQVUsQ0FBQyxDQUFDO0lBR25DTixzQkFBUyxDQUFDQyxLQUFLLENBQUNILFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUdyQyxJQUFNVSxlQUFlLFNBQVNULFVBQVUsQ0FBQyw2QkFBNkIsQ0FBQztJQUN2RU0sTUFBTSxDQUFDRyxlQUFlLENBQUMsQ0FBQ0YsVUFBVSxDQUFDLENBQUM7RUFDdEMsQ0FBQyxFQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119