{"version":3,"names":["_getJestObj","mock","getItem","jest","fn","_interopRequireDefault","require","_asyncToGenerator2","_reactNative","_asyncStorage","_useDailyWords","_require","describe","FIXED_DATE","Date","MIDNIGHT_TOMORROW","beforeEach","clearAllMocks","useFakeTimers","setSystemTime","spyOn","console","mockImplementation","afterEach","useRealTimers","restoreAllMocks","it","default","AsyncStorage","mockResolvedValue","_renderHook","renderHook","useDailyWords","result","waitFor","expect","current","isLoading","toBe","wordsToday","toHaveBeenCalledTimes","warn","not","toHaveBeenCalled","mockDataLevel1","completedWords","word","timestamp","getTime","mockDataLevel2","mockResolvedValueOnce","JSON","stringify","_renderHook2","mockData","_renderHook3","toHaveBeenCalledWith","stringContaining","any","SyntaxError","_renderHook4","_renderHook5","mockDataInitial","mockDataAfterMidnight","_renderHook6","mockReset","timeUntilMidnight","act","advanceTimersByTime","_renderHook7","unmount","clearIntervalSpy","global"],"sources":["useDailyWords.test.js"],"sourcesContent":["// __tests__/hooks/useDailyWords.test.js\nimport { renderHook, waitFor, act } from '@testing-library/react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport useDailyWords from '../../src/hooks/useDailyWords';\n\njest.mock('@react-native-async-storage/async-storage', () => ({\n  getItem: jest.fn(),\n}));\n\ndescribe('useDailyWords', () => {\n  const FIXED_DATE = new Date('2022-01-01T12:00:00'); // Saturday at noon\n  const MIDNIGHT_TOMORROW = new Date('2022-01-02T00:00:00'); // Sunday at midnight\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.useFakeTimers();\n    jest.setSystemTime(FIXED_DATE);\n    jest.spyOn(console, 'warn').mockImplementation(() => {});\n    jest.spyOn(console, 'error').mockImplementation(() => {});\n  });\n\n  afterEach(() => {\n    jest.useRealTimers();\n    jest.restoreAllMocks();\n  });\n\n  // =================== LOADING AND CALCULATION TESTS ===================\n\n  it('should initialize with 0 words if no data is found', async () => {\n    AsyncStorage.getItem.mockResolvedValue(null);\n    const { result } = renderHook(() => useDailyWords());\n    \n    await waitFor(() => expect(result.current.isLoading).toBe(false));\n\n    expect(result.current.wordsToday).toBe(0);\n    expect(AsyncStorage.getItem).toHaveBeenCalledTimes(6); // 6 levels\n    expect(console.warn).not.toHaveBeenCalled();\n  });\n\n  it('should count today\\'s words for level 1 and level 2', async () => {\n    const mockDataLevel1 = {\n      completedWords: {\n        '0': [\n          { word: 'hello', timestamp: FIXED_DATE.getTime() },\n          { word: 'world', timestamp: FIXED_DATE.getTime() }\n        ],\n      }\n    };\n    const mockDataLevel2 = {\n      completedWords: {\n        '1': [\n          { word: 'test', timestamp: FIXED_DATE.getTime() }\n        ],\n      }\n    };\n\n    AsyncStorage.getItem\n      .mockResolvedValueOnce(JSON.stringify(mockDataLevel1))\n      .mockResolvedValueOnce(JSON.stringify(mockDataLevel2))\n      .mockResolvedValue(null); // For levels 3 to 6\n\n    const { result } = renderHook(() => useDailyWords());\n\n    await waitFor(() => {\n      expect(result.current.isLoading).toBe(false);\n    });\n    \n    expect(result.current.wordsToday).toBe(3);\n  });\n\n  // =================== ERROR HANDLING TESTS ===================\n\n  // ✅ Covers lines 68-69: the inner catch block\n  it('should ignore corrupt data and continue with other levels', async () => {\n    const mockData = {\n      completedWords: { '0': [{ word: 'hello', timestamp: FIXED_DATE.getTime() }] }\n    };\n    \n    AsyncStorage.getItem\n      .mockResolvedValueOnce(JSON.stringify(mockData))   // Level 1 OK\n      .mockResolvedValueOnce('invalid data')            // Level 2 KO\n      .mockResolvedValueOnce(JSON.stringify(mockData))   // Level 3 OK\n      .mockResolvedValue(null);                          // Subsequent levels OK\n\n    const { result } = renderHook(() => useDailyWords());\n    await waitFor(() => expect(result.current.isLoading).toBe(false));\n\n    expect(result.current.wordsToday).toBe(2);\n    expect(console.warn).toHaveBeenCalledWith(\n      expect.stringContaining('Storage error in calculateDailyWords for level 2:'),\n      expect.any(SyntaxError)\n    );\n  });\n\n  // Since the outer catch block is unreachable, we will remove this test.\n  // The inner catch covers the error handling logic sufficiently.\n  // The test below is no longer necessary to achieve full coverage of reachable code.\n  /*\n  it('should handle error during data reading and reset word count', async () => {\n    AsyncStorage.getItem.mockRejectedValue(new Error('Simulated reading error'));\n    \n    const { result } = renderHook(() => useDailyWords());\n    await waitFor(() => expect(result.current.isLoading).toBe(false));\n\n    expect(result.current.wordsToday).toBe(0);\n    expect(console.error).toHaveBeenCalledWith(\n      'Error calculating daily words:',\n      expect.any(Error)\n    );\n  });\n  */\n\n  // =================== ADDITIONAL LOGIC TESTS ===================\n\n  // ✅ Covers lines 53-59: the case where `completedWords` is empty\n  it('should count 0 words if completedWords is an empty object', async () => {\n    const mockData = { completedWords: {} };\n    AsyncStorage.getItem.mockResolvedValue(JSON.stringify(mockData));\n\n    const { result } = renderHook(() => useDailyWords());\n    await waitFor(() => expect(result.current.isLoading).toBe(false));\n\n    expect(result.current.wordsToday).toBe(0);\n  });\n  \n  // ✅ Ensures that all 6 levels are correctly mocked\n  it('should ignore invalid entries in the words array', async () => {\n    const mockData = {\n      completedWords: {\n        '0': [\n          { word: 'hello', timestamp: FIXED_DATE.getTime() },\n          'invalid word',\n          { word: 'word', timestamp: FIXED_DATE.getTime() },\n          { word: 'old', timestamp: new Date('2021-12-31T12:00:00').getTime() }\n        ],\n      }\n    };\n    AsyncStorage.getItem\n      .mockResolvedValueOnce(JSON.stringify(mockData)) // Level 1\n      .mockResolvedValueOnce(null)                      // Level 2\n      .mockResolvedValueOnce(null)                      // Level 3\n      .mockResolvedValueOnce(null)                      // Level 4\n      .mockResolvedValueOnce(null)                      // Level 5\n      .mockResolvedValueOnce(null);                     // Level 6\n\n    const { result } = renderHook(() => useDailyWords());\n    await waitFor(() => expect(result.current.isLoading).toBe(false));\n    \n    expect(result.current.wordsToday).toBe(2); // 'hello' and 'word'\n  });\n\n  // =================== TIMING TESTS (useEffect) ===================\n\n  // ✅ Correctly mocks calls for each level on each refresh\n  it('should refresh the word count at midnight', async () => {\n    const mockDataInitial = { completedWords: { '0': [{ word: 'test', timestamp: FIXED_DATE.getTime() }] } };\n    const mockDataAfterMidnight = { completedWords: { '0': [] } }; // The next day, no words\n\n    // Initial mock (6 calls)\n    AsyncStorage.getItem\n      .mockResolvedValueOnce(JSON.stringify(mockDataInitial))\n      .mockResolvedValue(null);\n\n    const { result } = renderHook(() => useDailyWords());\n    await waitFor(() => expect(result.current.wordsToday).toBe(1));\n\n    // Prepare mocks for the refresh that will happen at midnight\n    AsyncStorage.getItem.mockReset(); // Reset mocks for next set of calls\n    AsyncStorage.getItem\n      .mockResolvedValueOnce(JSON.stringify(mockDataAfterMidnight))\n      .mockResolvedValue(null);\n\n    // Simulate the passage of time until midnight\n    const timeUntilMidnight = MIDNIGHT_TOMORROW.getTime() - FIXED_DATE.getTime();\n    act(() => {\n      jest.advanceTimersByTime(timeUntilMidnight);\n    });\n    \n    // The refresh is called, wordsToday should be reset\n    await waitFor(() => expect(result.current.wordsToday).toBe(0));\n    expect(AsyncStorage.getItem).toHaveBeenCalledTimes(6); // Only the second set of 6 calls\n  });\n\n  // ✅ CORRECTED TEST: Ensures the setInterval is correctly initialized before unmounting\n  it('should clean up the timer on hook unmount', async () => {\n    jest.useFakeTimers();\n    // Set the time just before midnight to trigger the timer quickly\n    jest.setSystemTime(new Date('2022-01-01T23:59:50')); \n\n    const { result, unmount } = renderHook(() => useDailyWords());\n\n    // Advance time past midnight to trigger the setTimeout callback,\n    // which in turn registers the setInterval.\n    act(() => {\n      jest.advanceTimersByTime(11000); // Passes midnight by 1 second\n    });\n\n    const clearIntervalSpy = jest.spyOn(global, 'clearInterval');\n    \n    unmount();\n    \n    expect(clearIntervalSpy).toHaveBeenCalled();\n  });\n});"],"mappings":"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","ignoreList":[]}