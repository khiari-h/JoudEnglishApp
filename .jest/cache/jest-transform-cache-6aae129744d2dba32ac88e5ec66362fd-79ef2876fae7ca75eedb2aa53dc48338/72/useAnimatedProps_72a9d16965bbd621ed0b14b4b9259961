eafc104012d08192791c95512a52adb1
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useAnimatedProps;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var ReactNativeFeatureFlags = _interopRequireWildcard(require("../../src/private/featureflags/ReactNativeFeatureFlags"));
var _ReactFabricPublicInstanceUtils = require("../ReactNative/ReactFabricPublicInstance/ReactFabricPublicInstanceUtils");
var _useRefEffect = _interopRequireDefault(require("../Utilities/useRefEffect"));
var _AnimatedEvent = require("./AnimatedEvent");
var _NativeAnimatedHelper = _interopRequireDefault(require("../../src/private/animated/NativeAnimatedHelper"));
var _AnimatedNode = _interopRequireDefault(require("./nodes/AnimatedNode"));
var _AnimatedProps = _interopRequireDefault(require("./nodes/AnimatedProps"));
var _AnimatedValue = _interopRequireDefault(require("./nodes/AnimatedValue"));
var _react = require("react");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function useAnimatedProps(props) {
  var _useReducer = (0, _react.useReducer)(function (count) {
      return count + 1;
    }, 0),
    _useReducer2 = (0, _slicedToArray2.default)(_useReducer, 2),
    scheduleUpdate = _useReducer2[1];
  var onUpdateRef = (0, _react.useRef)(null);
  var timerRef = (0, _react.useRef)(null);
  var node = (0, _react.useMemo)(function () {
    return new _AnimatedProps.default(props, function () {
      return onUpdateRef.current == null ? void 0 : onUpdateRef.current();
    });
  }, [props]);
  var useNativePropsInFabric = ReactNativeFeatureFlags.shouldUseSetNativePropsInFabric();
  var useSetNativePropsInNativeAnimationsInFabric = ReactNativeFeatureFlags.shouldUseSetNativePropsInNativeAnimationsInFabric();
  var useAnimatedPropsLifecycle = ReactNativeFeatureFlags.usePassiveEffectsForAnimations() ? useAnimatedPropsLifecycle_passiveEffects : useAnimatedPropsLifecycle_layoutEffects;
  useAnimatedPropsLifecycle(node);
  var refEffect = (0, _react.useCallback)(function (instance) {
    node.setNativeView(instance);
    onUpdateRef.current = function () {
      if (process.env.NODE_ENV === 'test') {
        return scheduleUpdate();
      }
      var isFabricNode = isFabricInstance(instance);
      if (node.__isNative) {
        if (isFabricNode) {
          if (useSetNativePropsInNativeAnimationsInFabric) {
            instance.setNativeProps(node.__getAnimatedValue());
          } else {
            scheduleUpdate();
          }
        }
        return;
      }
      if (typeof instance !== 'object' || typeof (instance == null ? void 0 : instance.setNativeProps) !== 'function') {
        return scheduleUpdate();
      }
      if (!isFabricNode) {
        return instance.setNativeProps(node.__getAnimatedValue());
      }
      if (!useNativePropsInFabric) {
        return scheduleUpdate();
      }
      instance.setNativeProps(node.__getAnimatedValue());
      if (timerRef.current != null) {
        clearTimeout(timerRef.current);
      }
      timerRef.current = setTimeout(function () {
        timerRef.current = null;
        scheduleUpdate();
      }, 48);
    };
    var target = getEventTarget(instance);
    var events = [];
    var animatedValueListeners = [];
    for (var propName in props) {
      var propValue = props[propName];
      if (propValue instanceof _AnimatedEvent.AnimatedEvent && propValue.__isNative) {
        propValue.__attach(target, propName);
        events.push([propName, propValue]);
        addListenersToPropsValue(propValue, animatedValueListeners);
      }
    }
    return function () {
      onUpdateRef.current = null;
      for (var _ref of events) {
        var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
        var _propName = _ref2[0];
        var _propValue = _ref2[1];
        _propValue.__detach(target, _propName);
      }
      for (var _ref3 of animatedValueListeners) {
        var _propValue2 = _ref3.propValue;
        var listenerId = _ref3.listenerId;
        _propValue2.removeListener(listenerId);
      }
    };
  }, [node, useNativePropsInFabric, useSetNativePropsInNativeAnimationsInFabric, props]);
  var callbackRef = (0, _useRefEffect.default)(refEffect);
  return [reduceAnimatedProps(node), callbackRef];
}
function reduceAnimatedProps(node) {
  return Object.assign({}, node.__getValue(), {
    collapsable: false
  });
}
function addListenersToPropsValue(propValue, accumulator) {
  if (propValue instanceof _AnimatedValue.default) {
    var listenerId = propValue.addListener(function () {});
    accumulator.push({
      propValue: propValue,
      listenerId: listenerId
    });
  } else if (Array.isArray(propValue)) {
    for (var prop of propValue) {
      addListenersToPropsValue(prop, accumulator);
    }
  } else if (propValue instanceof Object) {
    addAnimatedValuesListenersToProps(propValue, accumulator);
  }
}
function addAnimatedValuesListenersToProps(props, accumulator) {
  for (var propName in props) {
    var propValue = props[propName];
    addListenersToPropsValue(propValue, accumulator);
  }
}
function useAnimatedPropsLifecycle_layoutEffects(node) {
  var prevNodeRef = (0, _react.useRef)(null);
  var isUnmountingRef = (0, _react.useRef)(false);
  (0, _react.useEffect)(function () {
    _NativeAnimatedHelper.default.API.flushQueue();
    var drivenAnimationEndedListener = null;
    if (node.__isNative) {
      drivenAnimationEndedListener = _NativeAnimatedHelper.default.nativeEventEmitter.addListener('onUserDrivenAnimationEnded', function (data) {
        node.update();
      });
    }
    return function () {
      var _drivenAnimationEnded;
      (_drivenAnimationEnded = drivenAnimationEndedListener) == null || _drivenAnimationEnded.remove();
    };
  });
  (0, _react.useLayoutEffect)(function () {
    isUnmountingRef.current = false;
    return function () {
      isUnmountingRef.current = true;
    };
  }, []);
  (0, _react.useLayoutEffect)(function () {
    node.__attach();
    if (prevNodeRef.current != null) {
      var prevNode = prevNodeRef.current;
      prevNode.__restoreDefaultValues();
      prevNode.__detach();
      prevNodeRef.current = null;
    }
    return function () {
      if (isUnmountingRef.current) {
        node.__detach();
      } else {
        prevNodeRef.current = node;
      }
    };
  }, [node]);
}
function useAnimatedPropsLifecycle_passiveEffects(node) {
  var prevNodeRef = (0, _react.useRef)(null);
  var isUnmountingRef = (0, _react.useRef)(false);
  (0, _react.useEffect)(function () {
    _NativeAnimatedHelper.default.API.flushQueue();
  });
  (0, _react.useEffect)(function () {
    isUnmountingRef.current = false;
    return function () {
      isUnmountingRef.current = true;
    };
  }, []);
  (0, _react.useEffect)(function () {
    node.__attach();
    var drivenAnimationEndedListener = null;
    if (node.__isNative) {
      drivenAnimationEndedListener = _NativeAnimatedHelper.default.nativeEventEmitter.addListener('onUserDrivenAnimationEnded', function (data) {
        node.update();
      });
    }
    if (prevNodeRef.current != null) {
      var prevNode = prevNodeRef.current;
      prevNode.__restoreDefaultValues();
      prevNode.__detach();
      prevNodeRef.current = null;
    }
    return function () {
      var _drivenAnimationEnded2;
      if (isUnmountingRef.current) {
        node.__detach();
      } else {
        prevNodeRef.current = node;
      }
      (_drivenAnimationEnded2 = drivenAnimationEndedListener) == null || _drivenAnimationEnded2.remove();
    };
  }, [node]);
}
function getEventTarget(instance) {
  return typeof instance === 'object' && typeof (instance == null ? void 0 : instance.getScrollableNode) === 'function' ? instance.getScrollableNode() : instance;
}
function isFabricInstance(instance) {
  var _instance$getScrollRe;
  return (0, _ReactFabricPublicInstanceUtils.isPublicInstance)(instance) || (0, _ReactFabricPublicInstanceUtils.isPublicInstance)(instance == null || instance.getNativeScrollRef == null ? void 0 : instance.getNativeScrollRef()) || (0, _ReactFabricPublicInstanceUtils.isPublicInstance)(instance == null || instance.getScrollResponder == null || (_instance$getScrollRe = instance.getScrollResponder()) == null || _instance$getScrollRe.getNativeScrollRef == null ? void 0 : _instance$getScrollRe.getNativeScrollRef());
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,