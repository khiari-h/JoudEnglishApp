73f6bf5098b7fba5bc7d873dff5e841f
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useDailyWords = _interopRequireDefault(require("../../src/hooks/useDailyWords"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useDailyWords', function () {
  var FIXED_DATE = new Date('2022-01-01T12:00:00');
  var MIDNIGHT_TOMORROW = new Date('2022-01-02T00:00:00');
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
    jest.setSystemTime(FIXED_DATE);
    jest.spyOn(console, 'warn').mockImplementation(function () {});
    jest.spyOn(console, 'error').mockImplementation(function () {});
  });
  afterEach(function () {
    jest.useRealTimers();
    jest.restoreAllMocks();
  });
  it('should initialize with 0 words if no data is found', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValue(null);
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useDailyWords.default)();
      }),
      result = _renderHook.result;
    yield (0, _reactNative.waitFor)(function () {
      return expect(result.current.isLoading).toBe(false);
    });
    expect(result.current.wordsToday).toBe(0);
    expect(_asyncStorage.default.getItem).toHaveBeenCalledTimes(6);
    expect(console.warn).not.toHaveBeenCalled();
  }));
  it('should count today\'s words for level 1 and level 2', (0, _asyncToGenerator2.default)(function* () {
    var mockDataLevel1 = {
      completedWords: {
        '0': [{
          word: 'hello',
          timestamp: FIXED_DATE.getTime()
        }, {
          word: 'world',
          timestamp: FIXED_DATE.getTime()
        }]
      }
    };
    var mockDataLevel2 = {
      completedWords: {
        '1': [{
          word: 'test',
          timestamp: FIXED_DATE.getTime()
        }]
      }
    };
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(mockDataLevel1)).mockResolvedValueOnce(JSON.stringify(mockDataLevel2)).mockResolvedValue(null);
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useDailyWords.default)();
      }),
      result = _renderHook2.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    expect(result.current.wordsToday).toBe(3);
  }));
  it('should ignore corrupt data and continue with other levels', (0, _asyncToGenerator2.default)(function* () {
    var mockData = {
      completedWords: {
        '0': [{
          word: 'hello',
          timestamp: FIXED_DATE.getTime()
        }]
      }
    };
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(mockData)).mockResolvedValueOnce('invalid data').mockResolvedValueOnce(JSON.stringify(mockData)).mockResolvedValue(null);
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useDailyWords.default)();
      }),
      result = _renderHook3.result;
    yield (0, _reactNative.waitFor)(function () {
      return expect(result.current.isLoading).toBe(false);
    });
    expect(result.current.wordsToday).toBe(2);
    expect(console.warn).toHaveBeenCalledWith(expect.stringContaining('Storage error in calculateDailyWords for level 2:'), expect.any(SyntaxError));
  }));
  it('should count 0 words if completedWords is an empty object', (0, _asyncToGenerator2.default)(function* () {
    var mockData = {
      completedWords: {}
    };
    _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify(mockData));
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useDailyWords.default)();
      }),
      result = _renderHook4.result;
    yield (0, _reactNative.waitFor)(function () {
      return expect(result.current.isLoading).toBe(false);
    });
    expect(result.current.wordsToday).toBe(0);
  }));
  it('should ignore invalid entries in the words array', (0, _asyncToGenerator2.default)(function* () {
    var mockData = {
      completedWords: {
        '0': [{
          word: 'hello',
          timestamp: FIXED_DATE.getTime()
        }, 'invalid word', {
          word: 'word',
          timestamp: FIXED_DATE.getTime()
        }, {
          word: 'old',
          timestamp: new Date('2021-12-31T12:00:00').getTime()
        }]
      }
    };
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(mockData)).mockResolvedValueOnce(null).mockResolvedValueOnce(null).mockResolvedValueOnce(null).mockResolvedValueOnce(null).mockResolvedValueOnce(null);
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useDailyWords.default)();
      }),
      result = _renderHook5.result;
    yield (0, _reactNative.waitFor)(function () {
      return expect(result.current.isLoading).toBe(false);
    });
    expect(result.current.wordsToday).toBe(2);
  }));
  it('should refresh the word count at midnight', (0, _asyncToGenerator2.default)(function* () {
    var mockDataInitial = {
      completedWords: {
        '0': [{
          word: 'test',
          timestamp: FIXED_DATE.getTime()
        }]
      }
    };
    var mockDataAfterMidnight = {
      completedWords: {
        '0': []
      }
    };
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(mockDataInitial)).mockResolvedValue(null);
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useDailyWords.default)();
      }),
      result = _renderHook6.result;
    yield (0, _reactNative.waitFor)(function () {
      return expect(result.current.wordsToday).toBe(1);
    });
    _asyncStorage.default.getItem.mockReset();
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(mockDataAfterMidnight)).mockResolvedValue(null);
    var timeUntilMidnight = MIDNIGHT_TOMORROW.getTime() - FIXED_DATE.getTime();
    (0, _reactNative.act)(function () {
      jest.advanceTimersByTime(timeUntilMidnight);
    });
    yield (0, _reactNative.waitFor)(function () {
      return expect(result.current.wordsToday).toBe(0);
    });
    expect(_asyncStorage.default.getItem).toHaveBeenCalledTimes(6);
  }));
  it('should clean up the timer on hook unmount', (0, _asyncToGenerator2.default)(function* () {
    jest.useFakeTimers();
    jest.setSystemTime(new Date('2022-01-01T23:59:50'));
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useDailyWords.default)();
      }),
      result = _renderHook7.result,
      unmount = _renderHook7.unmount;
    (0, _reactNative.act)(function () {
      jest.advanceTimersByTime(11000);
    });
    var clearIntervalSpy = jest.spyOn(global, 'clearInterval');
    unmount();
    expect(clearIntervalSpy).toHaveBeenCalled();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,