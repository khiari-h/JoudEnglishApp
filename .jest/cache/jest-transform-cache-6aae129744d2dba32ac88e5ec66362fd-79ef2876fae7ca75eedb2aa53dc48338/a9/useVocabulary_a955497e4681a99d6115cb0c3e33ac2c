8d634802bc3f368b55e6c442fcc0d0f7
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _useVocabularySelectors = _interopRequireDefault(require("./internal/useVocabularySelectors"));
var _useVocabularyNavigation = _interopRequireDefault(require("./internal/useVocabularyNavigation"));
var _useVocabularyStorage2 = _interopRequireDefault(require("./internal/useVocabularyStorage"));
var useVocabulary = function useVocabulary() {
  var _currentCategory$word, _currentCategory$word2;
  var vocabularyData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "1";
  var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "classic";
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    categoryIndex = _useState2[0],
    setCategoryIndex = _useState2[1];
  var _useState3 = (0, _react.useState)(0),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    wordIndex = _useState4[0],
    setWordIndex = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    showTranslation = _useState6[0],
    setShowTranslation = _useState6[1];
  var _useState7 = (0, _react.useState)({}),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    completedWords = _useState8[0],
    setCompletedWords = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    loaded = _useState0[0],
    setLoaded = _useState0[1];
  var _useState1 = (0, _react.useState)(false),
    _useState10 = (0, _slicedToArray2.default)(_useState1, 2),
    showDetailedProgress = _useState10[0],
    setShowDetailedProgress = _useState10[1];
  var isInitialized = (0, _react.useRef)(false);
  var exercises = (vocabularyData == null ? void 0 : vocabularyData.exercises) || [];
  var currentCategory = exercises[categoryIndex] || {
    title: "",
    words: []
  };
  var currentWord = ((_currentCategory$word = currentCategory.words) == null ? void 0 : _currentCategory$word[wordIndex]) || {
    word: "",
    translation: "",
    definition: "",
    example: ""
  };
  var totalCategories = exercises.length;
  var totalWordsInCategory = ((_currentCategory$word2 = currentCategory.words) == null ? void 0 : _currentCategory$word2.length) || 0;
  var progressKey = `${level}_${mode}`;
  var STORAGE_KEY = `vocabulary_${progressKey}`;
  var _useVocabularyStorage = (0, _useVocabularyStorage2.default)({
      STORAGE_KEY: STORAGE_KEY,
      progressKey: progressKey,
      loaded: loaded,
      setLoaded: setLoaded,
      completedWords: completedWords,
      setCompletedWords: setCompletedWords,
      setCategoryIndex: setCategoryIndex,
      setWordIndex: setWordIndex,
      exercises: exercises,
      isInitialized: isInitialized
    }),
    saveData = _useVocabularyStorage.saveData;
  var _useVocabularyNavigat = (0, _useVocabularyNavigation.default)({
      exercises: exercises,
      level: level,
      mode: mode,
      categoryIndex: categoryIndex,
      wordIndex: wordIndex,
      totalWordsInCategory: totalWordsInCategory,
      setCategoryIndex: setCategoryIndex,
      setWordIndex: setWordIndex,
      setShowTranslation: setShowTranslation,
      completedWords: completedWords,
      setCompletedWords: setCompletedWords
    }),
    changeCategory = _useVocabularyNavigat.changeCategory,
    handleNext = _useVocabularyNavigat.handleNext,
    handlePrevious = _useVocabularyNavigat.handlePrevious;
  var _useVocabularySelecto = (0, _useVocabularySelectors.default)({
      exercises: exercises,
      completedWords: completedWords,
      categoryIndex: categoryIndex,
      wordIndex: wordIndex,
      totalWordsInCategory: totalWordsInCategory,
      currentWord: currentWord,
      currentCategory: currentCategory
    }),
    getStats = _useVocabularySelecto.getStats,
    getDisplayData = _useVocabularySelecto.getDisplayData,
    canGoToPrevious = _useVocabularySelecto.canGoToPrevious,
    isLastWordInExercise = _useVocabularySelecto.isLastWordInExercise;
  return {
    categoryIndex: categoryIndex,
    wordIndex: wordIndex,
    showTranslation: showTranslation,
    completedWords: completedWords,
    loaded: loaded,
    showDetailedProgress: showDetailedProgress,
    currentWord: currentWord,
    currentCategory: currentCategory,
    totalCategories: totalCategories,
    totalWordsInCategory: totalWordsInCategory,
    changeCategory: changeCategory,
    toggleTranslation: function toggleTranslation() {
      return setShowTranslation(function (prev) {
        return !prev;
      });
    },
    toggleDetailedProgress: function toggleDetailedProgress() {
      return setShowDetailedProgress(function (prev) {
        return !prev;
      });
    },
    handleNext: handleNext,
    handlePrevious: handlePrevious,
    canGoToPrevious: canGoToPrevious(),
    isLastWordInExercise: isLastWordInExercise(),
    stats: getStats(),
    display: getDisplayData(),
    saveData: saveData
  };
};
var _default = exports.default = useVocabulary;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,