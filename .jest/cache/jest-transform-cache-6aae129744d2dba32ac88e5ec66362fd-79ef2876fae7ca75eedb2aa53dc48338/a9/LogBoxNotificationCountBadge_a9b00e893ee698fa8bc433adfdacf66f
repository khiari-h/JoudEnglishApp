1de4c1cf9602b52d24fd3500f486299e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = LogBoxNotificationCountBadge;
var _View = _interopRequireDefault(require("../../Components/View/View"));
var _StyleSheet = _interopRequireDefault(require("../../StyleSheet/StyleSheet"));
var _Text = _interopRequireDefault(require("../../Text/Text"));
var LogBoxStyle = _interopRequireWildcard(require("./LogBoxStyle"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function LogBoxNotificationCountBadge(props) {
  return (0, _jsxRuntime.jsx)(_View.default, {
    style: styles.outside,
    children: (0, _jsxRuntime.jsx)(_View.default, {
      style: [styles.inside, styles[props.level]],
      children: (0, _jsxRuntime.jsx)(_Text.default, {
        style: styles.text,
        children: props.count <= 1 ? '!' : props.count
      })
    })
  });
}
var styles = _StyleSheet.default.create({
  warn: {
    backgroundColor: LogBoxStyle.getWarningColor(1)
  },
  error: {
    backgroundColor: LogBoxStyle.getErrorColor(1)
  },
  outside: {
    padding: 2,
    borderRadius: 25,
    backgroundColor: '#fff',
    marginRight: 8
  },
  inside: {
    minWidth: 18,
    paddingLeft: 4,
    paddingRight: 4,
    borderRadius: 25,
    fontWeight: '600'
  },
  text: {
    color: LogBoxStyle.getTextColor(1),
    fontSize: 14,
    lineHeight: 18,
    textAlign: 'center',
    fontWeight: '600',
    textShadowColor: LogBoxStyle.getBackgroundColor(0.4),
    textShadowOffset: {
      width: 0,
      height: 0
    },
    textShadowRadius: 3
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfVmlldyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX1N0eWxlU2hlZXQiLCJfVGV4dCIsIkxvZ0JveFN0eWxlIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJSZWFjdCIsIl9qc3hSdW50aW1lIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsIl90IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJMb2dCb3hOb3RpZmljYXRpb25Db3VudEJhZGdlIiwicHJvcHMiLCJqc3giLCJzdHlsZSIsInN0eWxlcyIsIm91dHNpZGUiLCJjaGlsZHJlbiIsImluc2lkZSIsImxldmVsIiwidGV4dCIsImNvdW50IiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsIndhcm4iLCJiYWNrZ3JvdW5kQ29sb3IiLCJnZXRXYXJuaW5nQ29sb3IiLCJlcnJvciIsImdldEVycm9yQ29sb3IiLCJwYWRkaW5nIiwiYm9yZGVyUmFkaXVzIiwibWFyZ2luUmlnaHQiLCJtaW5XaWR0aCIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwiZm9udFdlaWdodCIsImNvbG9yIiwiZ2V0VGV4dENvbG9yIiwiZm9udFNpemUiLCJsaW5lSGVpZ2h0IiwidGV4dEFsaWduIiwidGV4dFNoYWRvd0NvbG9yIiwiZ2V0QmFja2dyb3VuZENvbG9yIiwidGV4dFNoYWRvd09mZnNldCIsIndpZHRoIiwiaGVpZ2h0IiwidGV4dFNoYWRvd1JhZGl1cyJdLCJzb3VyY2VzIjpbIkxvZ0JveE5vdGlmaWNhdGlvbkNvdW50QmFkZ2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCBWaWV3IGZyb20gJy4uLy4uL0NvbXBvbmVudHMvVmlldy9WaWV3JztcbmltcG9ydCBTdHlsZVNoZWV0IGZyb20gJy4uLy4uL1N0eWxlU2hlZXQvU3R5bGVTaGVldCc7XG5pbXBvcnQgVGV4dCBmcm9tICcuLi8uLi9UZXh0L1RleHQnO1xuaW1wb3J0ICogYXMgTG9nQm94U3R5bGUgZnJvbSAnLi9Mb2dCb3hTdHlsZSc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExvZ0JveE5vdGlmaWNhdGlvbkNvdW50QmFkZ2UocHJvcHM6IHtcbiAgY291bnQ6IG51bWJlcixcbiAgbGV2ZWw6ICdlcnJvcicgfCAnd2FybicsXG59KTogUmVhY3QuTm9kZSB7XG4gIHJldHVybiAoXG4gICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5vdXRzaWRlfT5cbiAgICAgIHsvKiAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlXSAoPj0wLjExNC4wKSBUaGlzIHN1cHByZXNzaW9uIHdhcyBhZGRlZFxuICAgICAgICogd2hlbiBmaXhpbmcgdGhlIHR5cGUgb2YgYFN0eWxlU2hlZXQuY3JlYXRlYC4gUmVtb3ZlIHRoaXMgY29tbWVudCB0b1xuICAgICAgICogc2VlIHRoZSBlcnJvci4gKi99XG4gICAgICA8VmlldyBzdHlsZT17W3N0eWxlcy5pbnNpZGUsIHN0eWxlc1twcm9wcy5sZXZlbF1dfT5cbiAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy50ZXh0fT57cHJvcHMuY291bnQgPD0gMSA/ICchJyA6IHByb3BzLmNvdW50fTwvVGV4dD5cbiAgICAgIDwvVmlldz5cbiAgICA8L1ZpZXc+XG4gICk7XG59XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgd2Fybjoge1xuICAgIGJhY2tncm91bmRDb2xvcjogTG9nQm94U3R5bGUuZ2V0V2FybmluZ0NvbG9yKDEpLFxuICB9LFxuICBlcnJvcjoge1xuICAgIGJhY2tncm91bmRDb2xvcjogTG9nQm94U3R5bGUuZ2V0RXJyb3JDb2xvcigxKSxcbiAgfSxcbiAgb3V0c2lkZToge1xuICAgIHBhZGRpbmc6IDIsXG4gICAgYm9yZGVyUmFkaXVzOiAyNSxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZmZmJyxcbiAgICBtYXJnaW5SaWdodDogOCxcbiAgfSxcbiAgaW5zaWRlOiB7XG4gICAgbWluV2lkdGg6IDE4LFxuICAgIHBhZGRpbmdMZWZ0OiA0LFxuICAgIHBhZGRpbmdSaWdodDogNCxcbiAgICBib3JkZXJSYWRpdXM6IDI1LFxuICAgIGZvbnRXZWlnaHQ6ICc2MDAnLFxuICB9LFxuICB0ZXh0OiB7XG4gICAgY29sb3I6IExvZ0JveFN0eWxlLmdldFRleHRDb2xvcigxKSxcbiAgICBmb250U2l6ZTogMTQsXG4gICAgbGluZUhlaWdodDogMTgsXG4gICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICBmb250V2VpZ2h0OiAnNjAwJyxcbiAgICB0ZXh0U2hhZG93Q29sb3I6IExvZ0JveFN0eWxlLmdldEJhY2tncm91bmRDb2xvcigwLjQpLFxuICAgIHRleHRTaGFkb3dPZmZzZXQ6IHt3aWR0aDogMCwgaGVpZ2h0OiAwfSxcbiAgICB0ZXh0U2hhZG93UmFkaXVzOiAzLFxuICB9LFxufSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBVUEsSUFBQUEsS0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsV0FBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsS0FBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsV0FBQSxHQUFBQyx1QkFB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