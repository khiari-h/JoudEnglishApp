ff0644bbc7dcac420928a0f3eb1c70b2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ContentSection = _interopRequireDefault(require("../../../src/components/ui/ContentSection"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
describe('ContentSection', function () {
  it('renders correctly with title and content', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContentSection.default, {
      title: "Test Title",
      content: "Test Content"
    }));
    expect(_reactNative.screen.getByText('Test Title')).toBeOnTheScreen();
    expect(_reactNative.screen.getByText('Test Content')).toBeOnTheScreen();
  });
  it('renders correctly with children', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContentSection.default, {
      title: "Test Title",
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "Child Content"
      })
    }));
    expect(_reactNative.screen.getByText('Test Title')).toBeOnTheScreen();
    expect(_reactNative.screen.getByText('Child Content')).toBeOnTheScreen();
  });
  it('applies italic style when isItalic is true', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContentSection.default, {
      content: "Italic Content",
      isItalic: true
    }));
    var contentText = _reactNative.screen.getByText('Italic Content');
    expect(contentText).toBeOnTheScreen();
  });
  it('does not render icon when showIcon is false', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContentSection.default, {
      title: "No Icon",
      content: "Content",
      showIcon: false
    }));
    expect(_reactNative.screen.getByText('No Icon')).toBeOnTheScreen();
  });
  it('returns null if no content and no children are provided', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContentSection.default, {})),
      container = _render.container;
    expect(container.children.length).toBe(0);
  });
  it('applies custom containerStyle', function () {
    var customStyle = {
      borderWidth: 2,
      borderColor: 'red'
    };
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContentSection.default, {
      title: "Styled",
      content: "Content",
      containerStyle: customStyle
    }));
    expect(_reactNative.screen.getByText('Styled')).toBeOnTheScreen();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9Db250ZW50U2VjdGlvbiIsIl9yZWFjdE5hdGl2ZTIiLCJfanN4UnVudGltZSIsImRlc2NyaWJlIiwiaXQiLCJyZW5kZXIiLCJqc3giLCJkZWZhdWx0IiwidGl0bGUiLCJjb250ZW50IiwiZXhwZWN0Iiwic2NyZWVuIiwiZ2V0QnlUZXh0IiwidG9CZU9uVGhlU2NyZWVuIiwiY2hpbGRyZW4iLCJUZXh0IiwiaXNJdGFsaWMiLCJjb250ZW50VGV4dCIsInNob3dJY29uIiwiX3JlbmRlciIsImNvbnRhaW5lciIsImxlbmd0aCIsInRvQmUiLCJjdXN0b21TdHlsZSIsImJvcmRlcldpZHRoIiwiYm9yZGVyQ29sb3IiLCJjb250YWluZXJTdHlsZSJdLCJzb3VyY2VzIjpbIkNvbnRlbnRTZWN0aW9uLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgc2NyZWVuIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IENvbnRlbnRTZWN0aW9uIGZyb20gJy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3VpL0NvbnRlbnRTZWN0aW9uJztcbmltcG9ydCB7IFRleHQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuXG5kZXNjcmliZSgnQ29udGVudFNlY3Rpb24nLCAoKSA9PiB7XG4gIGl0KCdyZW5kZXJzIGNvcnJlY3RseSB3aXRoIHRpdGxlIGFuZCBjb250ZW50JywgKCkgPT4ge1xuICAgIHJlbmRlcig8Q29udGVudFNlY3Rpb24gdGl0bGU9XCJUZXN0IFRpdGxlXCIgY29udGVudD1cIlRlc3QgQ29udGVudFwiIC8+KTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnVGVzdCBUaXRsZScpKS50b0JlT25UaGVTY3JlZW4oKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnVGVzdCBDb250ZW50JykpLnRvQmVPblRoZVNjcmVlbigpO1xuICB9KTtcblxuICBpdCgncmVuZGVycyBjb3JyZWN0bHkgd2l0aCBjaGlsZHJlbicsICgpID0+IHtcbiAgICByZW5kZXIoXG4gICAgICA8Q29udGVudFNlY3Rpb24gdGl0bGU9XCJUZXN0IFRpdGxlXCI+XG4gICAgICAgIDxUZXh0PkNoaWxkIENvbnRlbnQ8L1RleHQ+XG4gICAgICA8L0NvbnRlbnRTZWN0aW9uPlxuICAgICk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ1Rlc3QgVGl0bGUnKSkudG9CZU9uVGhlU2NyZWVuKCk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0NoaWxkIENvbnRlbnQnKSkudG9CZU9uVGhlU2NyZWVuKCk7XG4gIH0pO1xuXG4gIGl0KCdhcHBsaWVzIGl0YWxpYyBzdHlsZSB3aGVuIGlzSXRhbGljIGlzIHRydWUnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxDb250ZW50U2VjdGlvbiBjb250ZW50PVwiSXRhbGljIENvbnRlbnRcIiBpc0l0YWxpYz17dHJ1ZX0gLz4pO1xuICAgIGNvbnN0IGNvbnRlbnRUZXh0ID0gc2NyZWVuLmdldEJ5VGV4dCgnSXRhbGljIENvbnRlbnQnKTtcbiAgICAvLyBOb3RlOiBUZXN0aW5nIHN0eWxlcyBkaXJlY3RseSBjYW4gYmUgYnJpdHRsZS4gQSBtb3JlIHJvYnVzdCB0ZXN0IG1pZ2h0IGNoZWNrIGZvciBhIHNwZWNpZmljIHN0eWxlIHByb3BlcnR5IGlmIGl0J3MgY3JpdGljYWwuXG4gICAgLy8gRm9yIG5vdywgd2UnbGwgYXNzdW1lIHRoZSBjb21wb25lbnQncyBpbnRlcm5hbCBsb2dpYyBjb3JyZWN0bHkgYXBwbGllcyB0aGUgc3R5bGUuXG4gICAgZXhwZWN0KGNvbnRlbnRUZXh0KS50b0JlT25UaGVTY3JlZW4oKTtcbiAgfSk7XG5cbiAgaXQoJ2RvZXMgbm90IHJlbmRlciBpY29uIHdoZW4gc2hvd0ljb24gaXMgZmFsc2UnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxDb250ZW50U2VjdGlvbiB0aXRsZT1cIk5vIEljb25cIiBjb250ZW50PVwiQ29udGVudFwiIHNob3dJY29uPXtmYWxzZX0gLz4pO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdObyBJY29uJykpLnRvQmVPblRoZVNjcmVlbigpO1xuICAgIC8vIFRoaXMgdGVzdCBpcyB0cmlja3kgd2l0aG91dCBkaXJlY3QgYWNjZXNzIHRvIHRoZSBzdHlsZSBvZiB0aGUgaWNvbkRvdC5cbiAgICAvLyBBIG1vcmUgcm9idXN0IHRlc3Qgd291bGQgaW52b2x2ZSBzbmFwc2hvdCB0ZXN0aW5nIG9yIGNoZWNraW5nIGZvciB0aGUgYWJzZW5jZSBvZiBhIHRlc3RJRC5cbiAgICAvLyBGb3Igbm93LCB3ZSdsbCByZWx5IG9uIHZpc3VhbCBpbnNwZWN0aW9uIG9yIG1vcmUgYWR2YW5jZWQgdGVzdGluZyBpZiBuZWVkZWQuXG4gIH0pO1xuXG4gIGl0KCdyZXR1cm5zIG51bGwgaWYgbm8gY29udGVudCBhbmQgbm8gY2hpbGRyZW4gYXJlIHByb3ZpZGVkJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgY29udGFpbmVyIH0gPSByZW5kZXIoPENvbnRlbnRTZWN0aW9uIC8+KTtcbiAgICBleHBlY3QoY29udGFpbmVyLmNoaWxkcmVuLmxlbmd0aCkudG9CZSgwKTtcbiAgfSk7XG5cbiAgaXQoJ2FwcGxpZXMgY3VzdG9tIGNvbnRhaW5lclN0eWxlJywgKCkgPT4ge1xuICAgIGNvbnN0IGN1c3RvbVN0eWxlID0geyBib3JkZXJXaWR0aDogMiwgYm9yZGVyQ29sb3I6ICdyZWQnIH07XG4gICAgcmVuZGVyKDxDb250ZW50U2VjdGlvbiB0aXRsZT1cIlN0eWxlZFwiIGNvbnRlbnQ9XCJDb250ZW50XCIgY29udGFpbmVyU3R5bGU9e2N1c3RvbVN0eWxlfSAvPik7XG4gICAgLy8gVGhpcyBpcyBkaWZmaWN1bHQgdG8gdGVzdCBkaXJlY3RseSB3aXRoIEB0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlIHdpdGhvdXQgc25hcHNob3QgdGVzdGluZ1xuICAgIC8vIG9yIGluc3BlY3RpbmcgdGhlIHJlbmRlcmVkIGNvbXBvbmVudCdzIHByb3BzLCB3aGljaCBpcyBnZW5lcmFsbHkgZGlzY291cmFnZWQuXG4gICAgLy8gRm9yIG5vdywgd2UgYXNzdW1lIHRoZSBwcm9wIGlzIHBhc3NlZCBjb3JyZWN0bHkuXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ1N0eWxlZCcpKS50b0JlT25UaGVTY3JlZW4oKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLGVBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLGFBQUEsR0FBQUgsT0FBQTtBQUFvQyxJQUFBSSxXQUFBLEdBQUFKLE9BQUE7QUFFcENLLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxZQUFNO0VBQy9CQyxFQUFFLENBQUMsMENBQTBDLEVBQUUsWUFBTTtJQUNuRCxJQUFBQyxtQkFBTSxFQUFDLElBQUFILFdBQUEsQ0FBQUksR0FBQSxFQUFDTixlQUFBLENBQUFPLE9BQWM7TUFBQ0MsS0FBSyxFQUFDLFlBQVk7TUFBQ0MsT0FBTyxFQUFDO0lBQWMsQ0FBRSxDQUFDLENBQUM7SUFDcEVDLE1BQU0sQ0FBQ0MsbUJBQU0sQ0FBQ0MsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUNDLGVBQWUsQ0FBQyxDQUFDO0lBQ3hESCxNQUFNLENBQUNDLG1CQUFNLENBQUNDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDQyxlQUFlLENBQUMsQ0FBQztFQUM1RCxDQUFDLENBQUM7RUFFRlQsRUFBRSxDQUFDLGlDQUFpQyxFQUFFLFlBQU07SUFDMUMsSUFBQUMsbUJBQU0sRUFDSixJQUFBSCxXQUFBLENBQUFJLEdBQUEsRUFBQ04sZUFBQSxDQUFBTyxPQUFjO01BQUNDLEtBQUssRUFBQyxZQUFZO01BQUFNLFFBQUEsRUFDaEMsSUFBQVosV0FBQSxDQUFBSSxHQUFBLEVBQUNMLGFBQUEsQ0FBQWMsSUFBSTtRQUFBRCxRQUFBLEVBQUM7TUFBYSxDQUFNO0lBQUMsQ0FDWixDQUNsQixDQUFDO0lBQ0RKLE1BQU0sQ0FBQ0MsbUJBQU0sQ0FBQ0MsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUNDLGVBQWUsQ0FBQyxDQUFDO0lBQ3hESCxNQUFNLENBQUNDLG1CQUFNLENBQUNDLFNBQVMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDQyxlQUFlLENBQUMsQ0FBQztFQUM3RCxDQUFDLENBQUM7RUFFRlQsRUFBRSxDQUFDLDRDQUE0QyxFQUFFLFlBQU07SUFDckQsSUFBQUMsbUJBQU0sRUFBQyxJQUFBSCxXQUFBLENBQUFJLEdBQUEsRUFBQ04sZUFBQSxDQUFBTyxPQUFjO01BQUNFLE9BQU8sRUFBQyxnQkFBZ0I7TUFBQ08sUUFBUSxFQUFFO0lBQUssQ0FBRSxDQUFDLENBQUM7SUFDbkUsSUFBTUMsV0FBVyxHQUFHTixtQkFBTSxDQUFDQyxTQUFTLENBQUMsZ0JBQWdCLENBQUM7SUFHdERGLE1BQU0sQ0FBQ08sV0FBVyxDQUFDLENBQUNKLGVBQWUsQ0FBQyxDQUFDO0VBQ3ZDLENBQUMsQ0FBQztFQUVGVCxFQUFFLENBQUMsNkNBQTZDLEVBQUUsWUFBTTtJQUN0RCxJQUFBQyxtQkFBTSxFQUFDLElBQUFILFdBQUEsQ0FBQUksR0FBQSxFQUFDTixlQUFBLENBQUFPLE9BQWM7TUFBQ0MsS0FBSyxFQUFDLFNBQVM7TUFBQ0MsT0FBTyxFQUFDLFNBQVM7TUFBQ1MsUUFBUSxFQUFFO0lBQU0sQ0FBRSxDQUFDLENBQUM7SUFDN0VSLE1BQU0sQ0FBQ0MsbUJBQU0sQ0FBQ0MsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUNDLGVBQWUsQ0FBQyxDQUFDO0VBSXZELENBQUMsQ0FBQztFQUVGVCxFQUFFLENBQUMseURBQXlELEVBQUUsWUFBTTtJQUNsRSxJQUFBZSxPQUFBLEdBQXNCLElBQUFkLG1CQUFNLEVBQUMsSUFBQUgsV0FBQSxDQUFBSSxHQUFBLEVBQUNOLGVBQUEsQ0FBQU8sT0FBYyxJQUFFLENBQUMsQ0FBQztNQUF4Q2EsU0FBUyxHQUFBRCxPQUFBLENBQVRDLFNBQVM7SUFDakJWLE1BQU0sQ0FBQ1UsU0FBUyxDQUFDTixRQUFRLENBQUNPLE1BQU0sQ0FBQyxDQUFDQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQzNDLENBQUMsQ0FBQztFQUVGbEIsRUFBRSxDQUFDLCtCQUErQixFQUFFLFlBQU07SUFDeEMsSUFBTW1CLFdBQVcsR0FBRztNQUFFQyxXQUFXLEVBQUUsQ0FBQztNQUFFQyxXQUFXLEVBQUU7SUFBTSxDQUFDO0lBQzFELElBQUFwQixtQkFBTSxFQUFDLElBQUFILFdBQUEsQ0FBQUksR0FBQSxFQUFDTixlQUFBLENBQUFPLE9BQWM7TUFBQ0MsS0FBSyxFQUFDLFFBQVE7TUFBQ0MsT0FBTyxFQUFDLFNBQVM7TUFBQ2lCLGNBQWMsRUFBRUg7SUFBWSxDQUFFLENBQUMsQ0FBQztJQUl4RmIsTUFBTSxDQUFDQyxtQkFBTSxDQUFDQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQ0MsZUFBZSxDQUFDLENBQUM7RUFDdEQsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119