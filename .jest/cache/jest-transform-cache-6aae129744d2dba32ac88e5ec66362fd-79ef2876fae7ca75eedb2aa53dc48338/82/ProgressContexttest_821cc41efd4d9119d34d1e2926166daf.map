{"version":3,"names":["_getJestObj","mock","setItem","jest","fn","Promise","resolve","getItem","removeItem","STORAGE_KEYS","requireActual","EXERCISES","vocabulary","grammar","phrases","writing","speaking","reading","LANGUAGE_LEVELS","BONUS_EXERCISES","RN","View","Text","Button","_ref","title","props","_objectWithoutProperties2","default","_excluded","_jsxRuntime","jsx","TouchableOpacity","Object","assign","children","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_reactNative2","_ProgressContext","_asyncStorage","_require4","TestComponent","_progress$exercises$v","_useProgress","useProgress","progress","isLoading","updateExerciseProgress","updateStats","calculateGlobalProgress","calculateLevelProgress","resetProgress","testID","jsxs","exercises","completed","stats","streak","onPress","newStat","SplitHooksTestComponent","read","useProgressRead","write","useProgressWrite","EmptyLevelTestComponent","_useProgress2","describe","beforeEach","useFakeTimers","clearAllMocks","AsyncStorage","mockResolvedValue","afterEach","runOnlyPendingTimers","useRealTimers","it","render","ProgressProvider","expect","screen","getByTestId","toBeTruthy","act","runAllTimers","queryByTestId","toBeNull","globalProgressText","join","toBe","mockProgress","createInitialProgress","total","mockResolvedValueOnce","JSON","stringify","level1ProgressText","streakDisplay","fireEvent","press","getByText","vocabCompleted","toHaveBeenCalledWith","any","String","stringContaining","toHaveBeenCalled","mockRejectedValueOnce","Error","consoleErrorSpy","spyOn","console","mockRestore","readStreak","savedProgress","parse","calls","newType","_require","TestComponentWithEmptyLevel","_useProgress3","progressText","mockImplementation","TestComponentWithNoProvider","toThrow","TestComponentWithBonusLevel","_useProgress4","newEmptyType","_require2","TestComponentWithNoExercises","_useProgress5","_require3","TestComponentWithNoLevels","_useProgress6"],"sources":["ProgressContext.test.js"],"sourcesContent":["import React from 'react';\nimport { render, screen, act, fireEvent } from '@testing-library/react-native';\nimport { Text, Button, View } from 'react-native';\nimport {\n  ProgressProvider,\n  createInitialProgress,\n  useProgress,\n  useProgressRead,\n  useProgressWrite,\n} from '../../src/contexts/ProgressContext';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n// -----------------------------------------------------------------------------\n// Mocks des dépendances externes\n// -----------------------------------------------------------------------------\n\n// Mock d'AsyncStorage pour le contrôle total de la persistance des données.\njest.mock('@react-native-async-storage/async-storage', () => ({\n  setItem: jest.fn(() => Promise.resolve()),\n  getItem: jest.fn(() => Promise.resolve(null)),\n  removeItem: jest.fn(() => Promise.resolve()),\n}));\n\n// Mock du module `constants` pour simuler les données\n// d'exercices et de niveaux.\njest.mock('../../src/utils/constants', () => ({\n  // On inclut les vraies clés de stockage pour éviter les erreurs,\n  // car elles ne causent pas de problèmes de référence.\n  STORAGE_KEYS: jest.requireActual('../../src/utils/constants').STORAGE_KEYS,\n  // Mock des exercices pour le test\n  EXERCISES: {\n    vocabulary: {},\n    grammar: {},\n    phrases: {},\n    writing: {},\n    speaking: {},\n    reading: {},\n  },\n  // Mock des niveaux pour le test\n  LANGUAGE_LEVELS: {\n    '1': {},\n    '2': {},\n    '3': {},\n    '4': {},\n    '5': {},\n    '6': {},\n    'bonus': {},\n  },\n  // Liste des exercices bonus\n  BONUS_EXERCISES: ['reading', 'phrases'],\n}));\n\n// Mock générique de 'react-native' pour éviter les erreurs liées aux\n// composants natifs (comme les animations) qui ne sont pas gérés par Jest.\njest.mock('react-native', () => {\n  const RN = jest.requireActual('react-native');\n  RN.View = RN.View || 'View';\n  RN.Text = RN.Text || 'Text';\n  RN.Button = ({ title, ...props }) => <RN.TouchableOpacity {...props}><RN.Text>{title}</RN.Text></RN.TouchableOpacity>;\n  return RN;\n});\n\n\n// -----------------------------------------------------------------------------\n// Composants de test pour utiliser les hooks\n// -----------------------------------------------------------------------------\n\n// Composant de test principal qui utilise le hook `useProgress`\nconst TestComponent = () => {\n  const {\n    progress,\n    isLoading,\n    updateExerciseProgress,\n    updateStats,\n    calculateGlobalProgress,\n    calculateLevelProgress,\n    resetProgress,\n  } = useProgress();\n\n  if (isLoading) {\n    return <Text testID=\"loading-status\">Loading...</Text>;\n  }\n\n  return (\n    <View>\n      <Text testID=\"global-progress\">Global: {calculateGlobalProgress()}%</Text>\n      <Text testID=\"level1-progress\">Level 1: {calculateLevelProgress('1')}%</Text>\n      <Text testID=\"vocab-level1-completed\">\n        Vocab Level 1 Completed: {progress.exercises.vocabulary?.['1']?.completed || 0}\n      </Text>\n      <Text testID=\"streak\">Streak: {progress.stats.streak}</Text>\n\n      <Button title=\"Update Vocab Level 1\" onPress={() => updateExerciseProgress('vocabulary', '1', 50)} />\n      <Button title=\"Update Streak\" onPress={() => updateStats({ streak: 5 })} />\n      <Button title=\"Reset Progress\" onPress={resetProgress} />\n      <Button title=\"Add New Exercise Type\" onPress={() => updateExerciseProgress('newType', '1', 25)} />\n      <Button title=\"Add New Stat\" onPress={() => updateStats({ newStat: 99 })} />\n    </View>\n  );\n};\n\n// Composant de test pour les hooks de lecture et d'écriture\nconst SplitHooksTestComponent = () => {\n  const read = useProgressRead();\n  const write = useProgressWrite();\n  const progress = read.progress;\n\n  if (read.isLoading) {\n    return <Text testID=\"loading-status\">Loading...</Text>;\n  }\n  \n  return (\n    <View>\n      <Text testID=\"read-global-progress\">Global: {read.calculateGlobalProgress()}%</Text>\n      <Text testID=\"read-streak\">Streak: {progress.stats.streak}</Text>\n      <Button testID=\"write-update-streak\" title=\"Update Streak\" onPress={() => write.updateStats({ streak: 10 })} />\n    </View>\n  );\n};\n\n// Composant de test pour un niveau vide (pour tester le cas limite)\nconst EmptyLevelTestComponent = () => {\n  const { calculateLevelProgress } = useProgress();\n  return <Text testID=\"empty-level-progress\">Empty Level: {calculateLevelProgress('empty')}%</Text>;\n};\n\n\n// -----------------------------------------------------------------------------\n// Suite de tests principale\n// -----------------------------------------------------------------------------\ndescribe('ProgressContext', () => {\n  // Les hooks Jest sont définis au niveau de la suite pour une application générale.\n  beforeEach(() => {\n    jest.useFakeTimers();\n    jest.clearAllMocks();\n    // On s'assure que par défaut, getItem ne trouve rien, simulant une première utilisation.\n    AsyncStorage.getItem.mockResolvedValue(null);\n  });\n\n  afterEach(() => {\n    jest.runOnlyPendingTimers();\n    jest.useRealTimers();\n  });\n\n  // ========== Scénario 1: Chargement initial et état par défaut ==========\n\n  it('devrait charger la progression initiale si AsyncStorage est vide', async () => {\n    render(\n      <ProgressProvider>\n        <TestComponent />\n      </ProgressProvider>\n    );\n\n    expect(screen.getByTestId('loading-status')).toBeTruthy();\n\n    await act(async () => {\n      jest.runAllTimers();\n    });\n\n    expect(screen.queryByTestId('loading-status')).toBeNull();\n    const globalProgressText = screen.getByTestId('global-progress').props.children.join('');\n    expect(globalProgressText).toBe('Global: 0%');\n  });\n\n  it('devrait charger la progression depuis AsyncStorage si des données existent', async () => {\n    const mockProgress = {\n      ...createInitialProgress(),\n      exercises: { vocabulary: { '1': { completed: 25, total: 100 } } },\n      stats: { streak: 1 },\n    };\n    AsyncStorage.getItem.mockResolvedValueOnce(JSON.stringify(mockProgress));\n\n    render(\n      <ProgressProvider>\n        <TestComponent />\n      </ProgressProvider>\n    );\n\n    await act(async () => {\n      jest.runAllTimers();\n    });\n\n    const level1ProgressText = screen.getByTestId('level1-progress').props.children.join('');\n    expect(level1ProgressText).toBe('Level 1: 4%');\n    const streakDisplay = screen.getByTestId('streak').props.children.join('');\n    expect(streakDisplay).toBe('Streak: 1');\n  });\n\n  // ========== Scénario 2: Mises à jour de la progression ==========\n\n  it('devrait mettre à jour la progression d\\'un exercice et sauvegarder', async () => {\n    render(\n      <ProgressProvider>\n        <TestComponent />\n      </ProgressProvider>\n    );\n\n    await act(async () => {\n      jest.runAllTimers();\n    });\n\n    fireEvent.press(screen.getByText('Update Vocab Level 1'));\n\n    await act(async () => {\n      jest.runAllTimers();\n    });\n\n    const vocabCompleted = screen.getByTestId('vocab-level1-completed').props.children.join('');\n    expect(vocabCompleted).toBe('Vocab Level 1 Completed: 50');\n\n    expect(AsyncStorage.setItem).toHaveBeenCalledWith(\n      expect.any(String),\n      expect.stringContaining('\"completed\":50')\n    );\n  });\n\n  it('devrait mettre à jour les statistiques et sauvegarder', async () => {\n    render(\n      <ProgressProvider>\n        <TestComponent />\n      </ProgressProvider>\n    );\n\n    await act(async () => {\n      jest.runAllTimers();\n    });\n\n    fireEvent.press(screen.getByText('Update Streak'));\n\n    await act(async () => {\n      jest.runAllTimers();\n    });\n\n    const streakDisplay = screen.getByTestId('streak').props.children.join('');\n    expect(streakDisplay).toBe('Streak: 5');\n\n    expect(AsyncStorage.setItem).toHaveBeenCalledWith(\n      expect.any(String),\n      expect.stringContaining('\"streak\":5')\n    );\n  });\n\n  it('devrait réinitialiser la progression et le stockage', async () => {\n    render(\n      <ProgressProvider>\n        <TestComponent />\n      </ProgressProvider>\n    );\n\n    await act(async () => {\n      jest.runAllTimers();\n    });\n\n    fireEvent.press(screen.getByText('Update Streak'));\n    fireEvent.press(screen.getByText('Reset Progress'));\n\n    await act(async () => {\n      await Promise.resolve();\n    });\n\n    expect(AsyncStorage.removeItem).toHaveBeenCalled();\n\n    const streakDisplay = screen.getByTestId('streak').props.children.join('');\n    expect(streakDisplay).toBe('Streak: 0');\n  });\n\n  // ========== Scénario 3: Calculs de progression ==========\n\n  it('devrait calculer correctement la progression par niveau', async () => {\n    const mockProgress = {\n      ...createInitialProgress(),\n      exercises: {\n        vocabulary: { '1': { completed: 50, total: 100 } },\n        grammar: { '1': { completed: 75, total: 100 } },\n      },\n    };\n    AsyncStorage.getItem.mockResolvedValueOnce(JSON.stringify(mockProgress));\n\n    render(\n      <ProgressProvider>\n        <TestComponent />\n      </ProgressProvider>\n    );\n\n    await act(async () => {\n      jest.runAllTimers();\n    });\n\n    const level1ProgressText = screen.getByTestId('level1-progress').props.children.join('');\n    expect(level1ProgressText).toBe('Level 1: 21%');\n  });\n\n  it('devrait calculer correctement la progression globale', async () => {\n    const mockProgress = {\n      ...createInitialProgress(),\n      exercises: {\n        vocabulary: { '1': { completed: 100 } },\n        grammar: { '2': { completed: 100 } },\n      },\n    };\n    AsyncStorage.getItem.mockResolvedValueOnce(JSON.stringify(mockProgress));\n\n    render(\n      <ProgressProvider>\n        <TestComponent />\n      </ProgressProvider>\n    );\n\n    await act(async () => {\n      jest.runAllTimers();\n    });\n\n    const globalProgressText = screen.getByTestId('global-progress').props.children.join('');\n    expect(globalProgressText).toBe('Global: 5%');\n  });\n\n  // ========== Scénario 4: Gestion des erreurs ==========\n\n  it('devrait gérer les erreurs de chargement et initialiser à 0', async () => {\n    AsyncStorage.getItem.mockRejectedValueOnce(new Error('Erreur de lecture simulée'));\n    const consoleErrorSpy = jest.spyOn(console, 'error');\n\n    render(\n      <ProgressProvider>\n        <TestComponent />\n      </ProgressProvider>\n    );\n\n    await act(async () => {\n      jest.runAllTimers();\n    });\n\n    expect(consoleErrorSpy).toHaveBeenCalledWith('Erreur chargement progression:', expect.any(Error));\n    const globalProgressText = screen.getByTestId('global-progress').props.children.join('');\n    expect(globalProgressText).toBe('Global: 0%');\n\n    consoleErrorSpy.mockRestore();\n  });\n\n  it('devrait gérer les erreurs de sauvegarde sans crasher', async () => {\n    AsyncStorage.setItem.mockRejectedValueOnce(new Error('Erreur de sauvegarde simulée'));\n    const consoleErrorSpy = jest.spyOn(console, 'error');\n\n    render(\n      <ProgressProvider>\n        <TestComponent />\n      </ProgressProvider>\n    );\n\n    await act(async () => {\n      jest.runAllTimers();\n    });\n    \n    fireEvent.press(screen.getByText('Update Streak'));\n\n    await act(async () => {\n      jest.runAllTimers();\n    });\n\n    expect(consoleErrorSpy).toHaveBeenCalledWith('Erreur sauvegarde progression:', expect.any(Error));\n    const streakDisplay = screen.getByTestId('streak').props.children.join('');\n    expect(streakDisplay).toBe('Streak: 5');\n\n    consoleErrorSpy.mockRestore();\n  });\n\n  // ========== Scénario 5: Tests des hooks de lecture/écriture séparés ==========\n\n  it('useProgressRead devrait fournir des données de lecture', async () => {\n    const mockProgress = {\n      ...createInitialProgress(),\n      stats: { streak: 50 },\n    };\n    AsyncStorage.getItem.mockResolvedValueOnce(JSON.stringify(mockProgress));\n\n    render(\n      <ProgressProvider>\n        <SplitHooksTestComponent />\n      </ProgressProvider>\n    );\n\n    await act(async () => {\n      jest.runAllTimers();\n    });\n\n    const readStreak = screen.getByTestId('read-streak').props.children.join('');\n    expect(readStreak).toBe('Streak: 50');\n\n    expect(screen.getByTestId('write-update-streak')).toBeTruthy();\n  });\n\n  it('useProgressWrite devrait permettre de modifier l\\'état', async () => {\n    render(\n      <ProgressProvider>\n        <SplitHooksTestComponent />\n      </ProgressProvider>\n    );\n\n    await act(async () => {\n      jest.runAllTimers();\n    });\n\n    fireEvent.press(screen.getByTestId('write-update-streak'));\n\n    await act(async () => {\n      jest.runAllTimers();\n    });\n\n    const readStreak = screen.getByTestId('read-streak').props.children.join('');\n    expect(readStreak).toBe('Streak: 10');\n\n    expect(AsyncStorage.setItem).toHaveBeenCalledWith(\n      expect.any(String),\n      expect.stringContaining('\"streak\":10')\n    );\n  });\n  \n  // ========== Scénario 6: Tests des branches non couvertes (corrigés) ==========\n\n  it('devrait ajouter un nouvel exercice si le type n\\'existe pas', async () => {\n    render(<ProgressProvider><TestComponent /></ProgressProvider>);\n    await act(async () => {\n      jest.runAllTimers();\n    });\n    \n    fireEvent.press(screen.getByText('Add New Exercise Type'));\n  \n    await act(async () => {\n      jest.runAllTimers();\n    });\n  \n    const savedProgress = JSON.parse(AsyncStorage.setItem.mock.calls[0][1]);\n    expect(savedProgress.exercises.newType['1'].completed).toBe(25);\n  });\n\n  it('devrait ajouter une nouvelle statistique si elle n\\'existe pas', async () => {\n    render(<ProgressProvider><TestComponent /></ProgressProvider>);\n    await act(async () => {\n      jest.runAllTimers();\n    });\n    \n    fireEvent.press(screen.getByText('Add New Stat'));\n  \n    await act(async () => {\n      jest.runAllTimers();\n    });\n  \n    const savedProgress = JSON.parse(AsyncStorage.setItem.mock.calls[0][1]);\n    expect(savedProgress.stats.newStat).toBe(99);\n  });\n\n  it('devrait gérer une erreur lors du reset de la progression', async () => {\n    AsyncStorage.removeItem.mockRejectedValueOnce(new Error('Erreur de réinitialisation simulée'));\n    const consoleErrorSpy = jest.spyOn(console, 'error');\n\n    const mockProgress = {\n      ...createInitialProgress(),\n      exercises: { vocabulary: { '1': { completed: 50, total: 100 } } }\n    };\n    AsyncStorage.getItem.mockResolvedValueOnce(JSON.stringify(mockProgress));\n    \n    render(<ProgressProvider><TestComponent /></ProgressProvider>);\n    await act(async () => {\n      jest.runAllTimers();\n    });\n    \n    fireEvent.press(screen.getByText('Reset Progress'));\n    await act(async () => {\n      await Promise.resolve();\n    });\n    \n    expect(consoleErrorSpy).toHaveBeenCalledWith('Erreur reset progression:', expect.any(Error));\n    const vocabCompleted = screen.getByTestId('vocab-level1-completed').props.children.join('');\n    expect(vocabCompleted).toBe('Vocab Level 1 Completed: 50');\n    \n    consoleErrorSpy.mockRestore();\n  });\n\n  it('devrait retourner 0 si un niveau ne contient aucun exercice', async () => {\n    // Crée un mock dynamique pour les constantes, sans réinitialiser tout le module\n    jest.mock('../../src/utils/constants', () => ({\n      ...jest.requireActual('../../src/utils/constants'),\n      LANGUAGE_LEVELS: { \n        ...jest.requireActual('../../src/utils/constants').LANGUAGE_LEVELS,\n        'empty': {} \n      },\n    }));\n    // Re-require le composant pour qu'il utilise le nouveau mock\n    const { ProgressProvider, useProgress } = require('../../src/contexts/ProgressContext');\n    \n    const TestComponentWithEmptyLevel = () => {\n      const { calculateLevelProgress } = useProgress();\n      return <Text testID=\"empty-level-progress\">Empty Level: {calculateLevelProgress('empty')}%</Text>;\n    };\n\n    render(<ProgressProvider><EmptyLevelTestComponent /></ProgressProvider>);\n    await act(async () => { jest.runAllTimers(); });\n\n    const progressText = screen.getByTestId('empty-level-progress').props.children.join('');\n    expect(progressText).toBe('Empty Level: 0%');\n\n    // Réinitialise les mocks à la fin du test\n    jest.clearAllMocks();\n  });\n\n  it('devrait lancer une erreur si useProgress est utilisé en dehors du provider', () => {\n    const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\n    const TestComponentWithNoProvider = () => {\n      useProgress();\n      return <Text>Test</Text>;\n    };\n    expect(() => render(<TestComponentWithNoProvider />)).toThrow('useProgress must be used within a ProgressProvider');\n    consoleErrorSpy.mockRestore();\n  });\n\n  it('devrait lancer une erreur si useProgressRead est utilisé en dehors du provider', () => {\n    const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\n    const TestComponentWithNoProvider = () => {\n      useProgressRead();\n      return <Text>Test</Text>;\n    };\n    expect(() => render(<TestComponentWithNoProvider />)).toThrow('useProgressRead must be used within a ProgressProvider');\n    consoleErrorSpy.mockRestore();\n  });\n\n  it('devrait lancer une erreur si useProgressWrite est utilisé en dehors du provider', () => {\n    const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\n    const TestComponentWithNoProvider = () => {\n      useProgressWrite();\n      return <Text>Test</Text>;\n    };\n    expect(() => render(<TestComponentWithNoProvider />)).toThrow('useProgressWrite must be used within a ProgressProvider');\n    consoleErrorSpy.mockRestore();\n  });\n  it('should calculate bonus level progress correctly', async () => {\n    // Mock the data to simulate a bonus level with some progress.\n    const mockProgress = {\n      ...createInitialProgress(),\n      exercises: {\n        reading: { 'bonus': { completed: 50, total: 100 } }, // 'reading' is a bonus exercise in your mock\n        phrases: { 'bonus': { completed: 25, total: 100 } }, // 'phrases' is a bonus exercise\n      },\n    };\n    AsyncStorage.getItem.mockResolvedValueOnce(JSON.stringify(mockProgress));\n\n    const TestComponentWithBonusLevel = () => {\n      const { calculateLevelProgress } = useProgress();\n      return <Text testID=\"bonus-progress\">Bonus: {calculateLevelProgress('bonus')}%</Text>;\n    };\n\n    render(\n      <ProgressProvider>\n        <TestComponentWithBonusLevel />\n      </ProgressProvider>\n    );\n\n    await act(async () => {\n      jest.runAllTimers();\n    });\n\n    // (50 + 25) / 2 exercices = 37.5% -> rounded to 38%\n    const progressText = screen.getByTestId('bonus-progress').props.children.join('');\n    expect(progressText).toBe('Bonus: 38%');\n  });\n  // ========== Tests pour atteindre 100% de couverture ==========\n\n  it('devrait retourner 0 si un niveau ne contient aucun exercice (cas réel)', async () => {\n    // Crée un mock de EXERCISES qui simule un type d'exercice vide\n    jest.mock('../../src/utils/constants', () => ({\n      ...jest.requireActual('../../src/utils/constants'),\n      EXERCISES: {\n        newEmptyType: {}, // Un type d'exercice qui ne contient rien\n      },\n    }));\n\n    // Re-require le composant pour qu'il utilise le nouveau mock\n    const { ProgressProvider, useProgress } = require('../../src/contexts/ProgressContext');\n    \n    const TestComponentWithNoExercises = () => {\n      const { calculateLevelProgress } = useProgress();\n      // On teste un niveau qui n'a pas de sous-clés dans notre mock d'exercices\n      return <Text testID=\"no-exercises-progress\">Progress: {calculateLevelProgress('1')}%</Text>;\n    };\n\n    render(<ProgressProvider><TestComponentWithNoExercises /></ProgressProvider>);\n    await act(async () => {\n      jest.runAllTimers();\n    });\n    \n    const progressText = screen.getByTestId('no-exercises-progress').props.children.join('');\n    // Le filtre va renvoyer un tableau vide, donc on couvre bien le \"if (levelExercises.length === 0)\"\n    expect(progressText).toBe('Progress: 0%');\n\n    // Réinitialise le mock\n    jest.clearAllMocks();\n  });\n\n  it('devrait retourner 0 si la liste des niveaux est vide', async () => {\n    // Mocke LANGUAGE_LEVELS pour qu'il soit un objet vide\n    jest.mock('../../src/utils/constants', () => ({\n      ...jest.requireActual('../../src/utils/constants'),\n      LANGUAGE_LEVELS: {},\n    }));\n    // Re-require le composant pour qu'il utilise le nouveau mock\n    const { ProgressProvider, useProgress } = require('../../src/contexts/ProgressContext');\n\n    const TestComponentWithNoLevels = () => {\n      const { calculateGlobalProgress } = useProgress();\n      return <Text testID=\"no-levels-progress\">Global: {calculateGlobalProgress()}%</Text>;\n    };\n\n    render(<ProgressProvider><TestComponentWithNoLevels /></ProgressProvider>);\n    await act(async () => {\n      jest.runAllTimers();\n    });\n\n    const progressText = screen.getByTestId('no-levels-progress').props.children.join('');\n    // Le \"if (allLevels.length === 0)\" sera atteint\n    expect(progressText).toBe('Global: 0%');\n    \n    // Réinitialise le mock\n    jest.clearAllMocks();\n  });\n});"],"mappings":"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","ignoreList":[]}