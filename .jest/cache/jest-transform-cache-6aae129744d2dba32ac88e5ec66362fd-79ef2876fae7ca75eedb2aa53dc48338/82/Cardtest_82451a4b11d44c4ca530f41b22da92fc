11aef2fdcbb03c5e45208d21cf1b620d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _Card = _interopRequireDefault(require("../../../src/components/ui/Card"));
var _ThemeContext = require("../../../src/contexts/ThemeContext");
var _jsxRuntime = require("react/jsx-runtime");
var mockThemeContext = {
  colors: {
    primary: '#5E60CE',
    text: '#000000',
    background: '#ffffff'
  }
};
describe('Card', function () {
  it('should render correctly with title and children', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
        value: mockThemeContext,
        children: (0, _jsxRuntime.jsx)(_Card.default, {
          title: "Test Title",
          children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
            children: "Test Children"
          })
        })
      })),
      getByText = _render.getByText;
    expect(getByText('Test Title')).toBeTruthy();
    expect(getByText('Test Children')).toBeTruthy();
  });
  it('should call onPress when the card is pressed', function () {
    var mockOnPress = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
        value: mockThemeContext,
        children: (0, _jsxRuntime.jsx)(_Card.default, {
          title: "Pressable Card",
          onPress: mockOnPress,
          children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
            children: "Content"
          })
        })
      })),
      getByText = _render2.getByText;
    _reactNative.fireEvent.press(getByText('Pressable Card'));
    expect(mockOnPress).toHaveBeenCalledTimes(1);
  });
  it('should render header icon when headerIcon is provided', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
        value: mockThemeContext,
        children: (0, _jsxRuntime.jsx)(_Card.default, {
          title: "Card with Icon",
          headerIcon: "star",
          testID: "card-with-icon",
          children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
            children: "Content"
          })
        })
      })),
      getByTestId = _render3.getByTestId;
    expect(getByTestId('card-with-icon')).toBeTruthy();
  });
  it('should render progress bar when progress is provided', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
        value: mockThemeContext,
        children: (0, _jsxRuntime.jsx)(_Card.default, {
          title: "Card with Progress",
          progress: 50,
          testID: "card-with-progress",
          children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
            children: "Content"
          })
        })
      })),
      getByTestId = _render4.getByTestId;
    expect(getByTestId('card-with-progress')).toBeTruthy();
    expect(getByTestId('progress-bar')).toBeTruthy();
  });
  it('should render footer when footer is provided', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
        value: mockThemeContext,
        children: (0, _jsxRuntime.jsx)(_Card.default, {
          title: "Card with Footer",
          footer: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
            children: "Test Footer"
          }),
          children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
            children: "Content"
          })
        })
      })),
      getByText = _render5.getByText;
    expect(getByText('Test Footer')).toBeTruthy();
  });
  it('should render overlay when showOverlay is true', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
        value: mockThemeContext,
        children: (0, _jsxRuntime.jsx)(_Card.default, {
          title: "Card with Overlay",
          showOverlay: true,
          overlayContent: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
            children: "Overlay Content"
          }),
          children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
            children: "Content"
          })
        })
      })),
      getByText = _render6.getByText;
    expect(getByText('Overlay Content')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,