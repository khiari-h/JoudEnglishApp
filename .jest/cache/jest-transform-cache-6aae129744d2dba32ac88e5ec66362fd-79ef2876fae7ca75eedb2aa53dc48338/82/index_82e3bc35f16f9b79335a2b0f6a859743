18f65c59007939995beddbfc749aded8
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _vectorIcons = require("@expo/vector-icons");
var _expoLinearGradient = require("expo-linear-gradient");
var _style = _interopRequireDefault(require("./style"));
var _jsxRuntime = require("react/jsx-runtime");
var NavigationButtons = function NavigationButtons(_ref) {
  var onNext = _ref.onNext,
    onPrevious = _ref.onPrevious,
    _ref$disablePrevious = _ref.disablePrevious,
    disablePrevious = _ref$disablePrevious === void 0 ? false : _ref$disablePrevious,
    _ref$disableNext = _ref.disableNext,
    disableNext = _ref$disableNext === void 0 ? false : _ref$disableNext,
    _ref$primaryColor = _ref.primaryColor,
    primaryColor = _ref$primaryColor === void 0 ? "#5E60CE" : _ref$primaryColor,
    _ref$buttonLabels = _ref.buttonLabels,
    buttonLabels = _ref$buttonLabels === void 0 ? {
      previous: "Précédent",
      next: "Suivant",
      finish: "Terminer"
    } : _ref$buttonLabels,
    _ref$isLast = _ref.isLast,
    isLast = _ref$isLast === void 0 ? false : _ref$isLast;
  var styles = (0, _style.default)(primaryColor);
  var prevScale = (0, _react.useRef)(new _reactNative.Animated.Value(1)).current;
  var nextScale = (0, _react.useRef)(new _reactNative.Animated.Value(1)).current;
  var handlePrevPress = (0, _react.useCallback)(function () {
    if (disablePrevious) return;
    _reactNative.Animated.sequence([_reactNative.Animated.spring(prevScale, {
      toValue: 0.96,
      tension: 400,
      friction: 10,
      useNativeDriver: true
    }), _reactNative.Animated.spring(prevScale, {
      toValue: 1,
      tension: 300,
      friction: 8,
      useNativeDriver: true
    })]).start();
    setTimeout(function () {
      return onPrevious();
    }, 60);
  }, [disablePrevious, prevScale, onPrevious]);
  var handleNextPress = (0, _react.useCallback)(function () {
    if (disableNext) return;
    _reactNative.Animated.sequence([_reactNative.Animated.spring(nextScale, {
      toValue: 0.96,
      tension: 400,
      friction: 10,
      useNativeDriver: true
    }), _reactNative.Animated.spring(nextScale, {
      toValue: 1,
      tension: 300,
      friction: 8,
      useNativeDriver: true
    })]).start();
    setTimeout(function () {
      return onNext();
    }, 60);
  }, [disableNext, nextScale, onNext]);
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: styles.container,
    children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.buttonsRow,
      children: [(0, _jsxRuntime.jsx)(PreviousButton, {
        disablePrevious: disablePrevious,
        prevScale: prevScale,
        handlePrevPress: handlePrevPress,
        buttonLabels: buttonLabels,
        primaryColor: primaryColor,
        styles: styles
      }), (0, _jsxRuntime.jsx)(NextButton, {
        disableNext: disableNext,
        nextScale: nextScale,
        handleNextPress: handleNextPress,
        isLast: isLast,
        buttonLabels: buttonLabels,
        primaryColor: primaryColor,
        styles: styles
      })]
    })
  });
};
var PreviousButton = function PreviousButton(_ref2) {
  var disablePrevious = _ref2.disablePrevious,
    prevScale = _ref2.prevScale,
    handlePrevPress = _ref2.handlePrevPress,
    buttonLabels = _ref2.buttonLabels,
    primaryColor = _ref2.primaryColor,
    styles = _ref2.styles;
  return !disablePrevious && (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
    style: {
      transform: [{
        scale: prevScale
      }]
    },
    children: (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
      style: styles.previousButton,
      onPress: handlePrevPress,
      disabled: disablePrevious,
      activeOpacity: 0.8,
      children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
        name: "chevron-back",
        size: 18,
        color: primaryColor
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [styles.previousText, {
          color: primaryColor
        }],
        children: buttonLabels.previous
      })]
    })
  });
};
var NextButton = function NextButton(_ref3) {
  var disableNext = _ref3.disableNext,
    nextScale = _ref3.nextScale,
    handleNextPress = _ref3.handleNextPress,
    isLast = _ref3.isLast,
    buttonLabels = _ref3.buttonLabels,
    primaryColor = _ref3.primaryColor,
    styles = _ref3.styles;
  return (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
    style: {
      transform: [{
        scale: nextScale
      }]
    },
    children: (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      style: styles.nextButtonContainer,
      onPress: handleNextPress,
      disabled: disableNext,
      activeOpacity: 0.9,
      children: (0, _jsxRuntime.jsxs)(_expoLinearGradient.LinearGradient, {
        colors: isLast ? ['#10B981', '#059669'] : [primaryColor, `${primaryColor}E6`],
        start: {
          x: 0,
          y: 0
        },
        end: {
          x: 1,
          y: 1
        },
        style: styles.nextButton,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.nextText,
          children: isLast ? buttonLabels.finish : buttonLabels.next
        }), (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: isLast ? "checkmark" : "chevron-forward",
          size: 18,
          color: "white",
          style: styles.nextIcon
        })]
      })
    })
  });
};
var _default = exports.default = NavigationButtons;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,