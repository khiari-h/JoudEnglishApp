{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_reactNative2","_Card","_ThemeContext","_jsxRuntime","mockThemeContext","colors","primary","text","background","describe","it","_render","render","jsx","ThemeContext","Provider","value","children","default","title","Text","getByText","expect","toBeTruthy","mockOnPress","jest","fn","_render2","onPress","fireEvent","press","toHaveBeenCalledTimes","_render3","headerIcon","testID","getByTestId","_render4","progress","_render5","footer","_render6","showOverlay","overlayContent"],"sources":["Card.test.js"],"sourcesContent":["import React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport { Text, View } from 'react-native';\nimport Card from '../../../src/components/ui/Card';\nimport { ThemeContext } from '../../../src/contexts/ThemeContext';\n\nconst mockThemeContext = {\n  colors: {\n    primary: '#5E60CE',\n    text: '#000000',\n    background: '#ffffff',\n  },\n};\n\ndescribe('Card', () => {\n  it('should render correctly with title and children', () => {\n    const { getByText } = render(\n      <ThemeContext.Provider value={mockThemeContext}>\n        <Card title=\"Test Title\">\n          <Text>Test Children</Text>\n        </Card>\n      </ThemeContext.Provider>\n    );\n    expect(getByText('Test Title')).toBeTruthy();\n    expect(getByText('Test Children')).toBeTruthy();\n  });\n\n  it('should call onPress when the card is pressed', () => {\n    const mockOnPress = jest.fn();\n    const { getByText } = render(\n      <ThemeContext.Provider value={mockThemeContext}>\n        <Card title=\"Pressable Card\" onPress={mockOnPress}>\n          <Text>Content</Text>\n        </Card>\n      </ThemeContext.Provider>\n    );\n    fireEvent.press(getByText('Pressable Card'));\n    expect(mockOnPress).toHaveBeenCalledTimes(1);\n  });\n\n  it('should render header icon when headerIcon is provided', () => {\n    const { getByTestId } = render(\n      <ThemeContext.Provider value={mockThemeContext}>\n        <Card title=\"Card with Icon\" headerIcon=\"star\" testID=\"card-with-icon\">\n          <Text>Content</Text>\n        </Card>\n      </ThemeContext.Provider>\n    );\n    expect(getByTestId('card-with-icon')).toBeTruthy(); // Check if the card itself is rendered\n    // More specific check for Ionicons might require mocking Ionicons or checking its props\n  });\n\n  it('should render progress bar when progress is provided', () => {\n    const { getByTestId } = render(\n      <ThemeContext.Provider value={mockThemeContext}>\n        <Card title=\"Card with Progress\" progress={50} testID=\"card-with-progress\">\n          <Text>Content</Text>\n        </Card>\n      </ThemeContext.Provider>\n    );\n    expect(getByTestId('card-with-progress')).toBeTruthy(); // Check if the card itself is rendered\n    expect(getByTestId('progress-bar')).toBeTruthy(); // Assuming ProgressBar has a testID 'progress-bar'\n  });\n\n  it('should render footer when footer is provided', () => {\n    const { getByText } = render(\n      <ThemeContext.Provider value={mockThemeContext}>\n        <Card title=\"Card with Footer\" footer={<Text>Test Footer</Text>}>\n          <Text>Content</Text>\n        </Card>\n      </ThemeContext.Provider>\n    );\n    expect(getByText('Test Footer')).toBeTruthy();\n  });\n\n  it('should render overlay when showOverlay is true', () => {\n    const { getByText } = render(\n      <ThemeContext.Provider value={mockThemeContext}>\n        <Card title=\"Card with Overlay\" showOverlay={true} overlayContent={<Text>Overlay Content</Text>}>\n          <Text>Content</Text>\n        </Card>\n      </ThemeContext.Provider>\n    );\n    expect(getByText('Overlay Content')).toBeTruthy();\n  });\n});\n"],"mappings":"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","ignoreList":[]}