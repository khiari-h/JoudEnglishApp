47adf5f471a67271917007395763a9f6
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    setItem: jest.fn(function () {
      return Promise.resolve();
    }),
    getItem: jest.fn(function () {
      return Promise.resolve(null);
    }),
    removeItem: jest.fn(function () {
      return Promise.resolve();
    })
  };
});
_getJestObj().mock('../../src/utils/constants', function () {
  return {
    STORAGE_KEYS: jest.requireActual('../../src/utils/constants').STORAGE_KEYS,
    EXERCISES: {
      vocabulary: {},
      grammar: {},
      phrases: {},
      writing: {},
      speaking: {},
      reading: {}
    },
    LANGUAGE_LEVELS: {
      '1': {},
      '2': {},
      '3': {},
      '4': {},
      '5': {},
      '6': {},
      'bonus': {}
    },
    BONUS_EXERCISES: ['reading', 'phrases']
  };
});
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  RN.View = RN.View || 'View';
  RN.Text = RN.Text || 'Text';
  RN.Button = function (_ref) {
    var title = _ref.title,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    return (0, _jsxRuntime.jsx)(RN.TouchableOpacity, Object.assign({}, props, {
      children: (0, _jsxRuntime.jsx)(RN.Text, {
        children: title
      })
    }));
  };
  return RN;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _ProgressContext = require("../../src/contexts/ProgressContext");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["title"];
function _getJestObj() {
  var _require4 = require("@jest/globals"),
    jest = _require4.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var TestComponent = function TestComponent() {
  var _progress$exercises$v;
  var _useProgress = (0, _ProgressContext.useProgress)(),
    progress = _useProgress.progress,
    isLoading = _useProgress.isLoading,
    updateExerciseProgress = _useProgress.updateExerciseProgress,
    updateStats = _useProgress.updateStats,
    calculateGlobalProgress = _useProgress.calculateGlobalProgress,
    calculateLevelProgress = _useProgress.calculateLevelProgress,
    resetProgress = _useProgress.resetProgress;
  if (isLoading) {
    return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "loading-status",
      children: "Loading..."
    });
  }
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    children: [(0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "global-progress",
      children: ["Global: ", calculateGlobalProgress(), "%"]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "level1-progress",
      children: ["Level 1: ", calculateLevelProgress('1'), "%"]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "vocab-level1-completed",
      children: ["Vocab Level 1 Completed: ", ((_progress$exercises$v = progress.exercises.vocabulary) == null || (_progress$exercises$v = _progress$exercises$v['1']) == null ? void 0 : _progress$exercises$v.completed) || 0]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "streak",
      children: ["Streak: ", progress.stats.streak]
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Update Vocab Level 1",
      onPress: function onPress() {
        return updateExerciseProgress('vocabulary', '1', 50);
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Update Streak",
      onPress: function onPress() {
        return updateStats({
          streak: 5
        });
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Reset Progress",
      onPress: resetProgress
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Add New Exercise Type",
      onPress: function onPress() {
        return updateExerciseProgress('newType', '1', 25);
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Add New Stat",
      onPress: function onPress() {
        return updateStats({
          newStat: 99
        });
      }
    })]
  });
};
var SplitHooksTestComponent = function SplitHooksTestComponent() {
  var read = (0, _ProgressContext.useProgressRead)();
  var write = (0, _ProgressContext.useProgressWrite)();
  var progress = read.progress;
  if (read.isLoading) {
    return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "loading-status",
      children: "Loading..."
    });
  }
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    children: [(0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "read-global-progress",
      children: ["Global: ", read.calculateGlobalProgress(), "%"]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "read-streak",
      children: ["Streak: ", progress.stats.streak]
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      testID: "write-update-streak",
      title: "Update Streak",
      onPress: function onPress() {
        return write.updateStats({
          streak: 10
        });
      }
    })]
  });
};
var EmptyLevelTestComponent = function EmptyLevelTestComponent() {
  var _useProgress2 = (0, _ProgressContext.useProgress)(),
    calculateLevelProgress = _useProgress2.calculateLevelProgress;
  return (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
    testID: "empty-level-progress",
    children: ["Empty Level: ", calculateLevelProgress('empty'), "%"]
  });
};
describe('ProgressContext', function () {
  beforeEach(function () {
    jest.useFakeTimers();
    jest.clearAllMocks();
    _asyncStorage.default.getItem.mockResolvedValue(null);
  });
  afterEach(function () {
    jest.runOnlyPendingTimers();
    jest.useRealTimers();
  });
  it('devrait charger la progression initiale si AsyncStorage est vide', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    expect(_reactNative.screen.getByTestId('loading-status')).toBeTruthy();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(_reactNative.screen.queryByTestId('loading-status')).toBeNull();
    var globalProgressText = _reactNative.screen.getByTestId('global-progress').props.children.join('');
    expect(globalProgressText).toBe('Global: 0%');
  }));
  it('devrait charger la progression depuis AsyncStorage si des données existent', (0, _asyncToGenerator2.default)(function* () {
    var mockProgress = Object.assign({}, (0, _ProgressContext.createInitialProgress)(), {
      exercises: {
        vocabulary: {
          '1': {
            completed: 25,
            total: 100
          }
        }
      },
      stats: {
        streak: 1
      }
    });
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(mockProgress));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var level1ProgressText = _reactNative.screen.getByTestId('level1-progress').props.children.join('');
    expect(level1ProgressText).toBe('Level 1: 4%');
    var streakDisplay = _reactNative.screen.getByTestId('streak').props.children.join('');
    expect(streakDisplay).toBe('Streak: 1');
  }));
  it('devrait mettre à jour la progression d\'un exercice et sauvegarder', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Vocab Level 1'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var vocabCompleted = _reactNative.screen.getByTestId('vocab-level1-completed').props.children.join('');
    expect(vocabCompleted).toBe('Vocab Level 1 Completed: 50');
    expect(_asyncStorage.default.setItem).toHaveBeenCalledWith(expect.any(String), expect.stringContaining('"completed":50'));
  }));
  it('devrait mettre à jour les statistiques et sauvegarder', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Streak'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var streakDisplay = _reactNative.screen.getByTestId('streak').props.children.join('');
    expect(streakDisplay).toBe('Streak: 5');
    expect(_asyncStorage.default.setItem).toHaveBeenCalledWith(expect.any(String), expect.stringContaining('"streak":5'));
  }));
  it('devrait réinitialiser la progression et le stockage', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Streak'));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Reset Progress'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield Promise.resolve();
    }));
    expect(_asyncStorage.default.removeItem).toHaveBeenCalled();
    var streakDisplay = _reactNative.screen.getByTestId('streak').props.children.join('');
    expect(streakDisplay).toBe('Streak: 0');
  }));
  it('devrait calculer correctement la progression par niveau', (0, _asyncToGenerator2.default)(function* () {
    var mockProgress = Object.assign({}, (0, _ProgressContext.createInitialProgress)(), {
      exercises: {
        vocabulary: {
          '1': {
            completed: 50,
            total: 100
          }
        },
        grammar: {
          '1': {
            completed: 75,
            total: 100
          }
        }
      }
    });
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(mockProgress));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var level1ProgressText = _reactNative.screen.getByTestId('level1-progress').props.children.join('');
    expect(level1ProgressText).toBe('Level 1: 21%');
  }));
  it('devrait calculer correctement la progression globale', (0, _asyncToGenerator2.default)(function* () {
    var mockProgress = Object.assign({}, (0, _ProgressContext.createInitialProgress)(), {
      exercises: {
        vocabulary: {
          '1': {
            completed: 100
          }
        },
        grammar: {
          '2': {
            completed: 100
          }
        }
      }
    });
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(mockProgress));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var globalProgressText = _reactNative.screen.getByTestId('global-progress').props.children.join('');
    expect(globalProgressText).toBe('Global: 5%');
  }));
  it('devrait gérer les erreurs de chargement et initialiser à 0', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockRejectedValueOnce(new Error('Erreur de lecture simulée'));
    var consoleErrorSpy = jest.spyOn(console, 'error');
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(consoleErrorSpy).toHaveBeenCalledWith('Erreur chargement progression:', expect.any(Error));
    var globalProgressText = _reactNative.screen.getByTestId('global-progress').props.children.join('');
    expect(globalProgressText).toBe('Global: 0%');
    consoleErrorSpy.mockRestore();
  }));
  it('devrait gérer les erreurs de sauvegarde sans crasher', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.setItem.mockRejectedValueOnce(new Error('Erreur de sauvegarde simulée'));
    var consoleErrorSpy = jest.spyOn(console, 'error');
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Update Streak'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    expect(consoleErrorSpy).toHaveBeenCalledWith('Erreur sauvegarde progression:', expect.any(Error));
    var streakDisplay = _reactNative.screen.getByTestId('streak').props.children.join('');
    expect(streakDisplay).toBe('Streak: 5');
    consoleErrorSpy.mockRestore();
  }));
  it('useProgressRead devrait fournir des données de lecture', (0, _asyncToGenerator2.default)(function* () {
    var mockProgress = Object.assign({}, (0, _ProgressContext.createInitialProgress)(), {
      stats: {
        streak: 50
      }
    });
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(mockProgress));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(SplitHooksTestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var readStreak = _reactNative.screen.getByTestId('read-streak').props.children.join('');
    expect(readStreak).toBe('Streak: 50');
    expect(_reactNative.screen.getByTestId('write-update-streak')).toBeTruthy();
  }));
  it('useProgressWrite devrait permettre de modifier l\'état', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(SplitHooksTestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByTestId('write-update-streak'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var readStreak = _reactNative.screen.getByTestId('read-streak').props.children.join('');
    expect(readStreak).toBe('Streak: 10');
    expect(_asyncStorage.default.setItem).toHaveBeenCalledWith(expect.any(String), expect.stringContaining('"streak":10'));
  }));
  it('devrait ajouter un nouvel exercice si le type n\'existe pas', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Add New Exercise Type'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var savedProgress = JSON.parse(_asyncStorage.default.setItem.mock.calls[0][1]);
    expect(savedProgress.exercises.newType['1'].completed).toBe(25);
  }));
  it('devrait ajouter une nouvelle statistique si elle n\'existe pas', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Add New Stat'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var savedProgress = JSON.parse(_asyncStorage.default.setItem.mock.calls[0][1]);
    expect(savedProgress.stats.newStat).toBe(99);
  }));
  it('devrait gérer une erreur lors du reset de la progression', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.removeItem.mockRejectedValueOnce(new Error('Erreur de réinitialisation simulée'));
    var consoleErrorSpy = jest.spyOn(console, 'error');
    var mockProgress = Object.assign({}, (0, _ProgressContext.createInitialProgress)(), {
      exercises: {
        vocabulary: {
          '1': {
            completed: 50,
            total: 100
          }
        }
      }
    });
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(mockProgress));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    _reactNative.fireEvent.press(_reactNative.screen.getByText('Reset Progress'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield Promise.resolve();
    }));
    expect(consoleErrorSpy).toHaveBeenCalledWith('Erreur reset progression:', expect.any(Error));
    var vocabCompleted = _reactNative.screen.getByTestId('vocab-level1-completed').props.children.join('');
    expect(vocabCompleted).toBe('Vocab Level 1 Completed: 50');
    consoleErrorSpy.mockRestore();
  }));
  it('devrait retourner 0 si un niveau ne contient aucun exercice', (0, _asyncToGenerator2.default)(function* () {
    _getJestObj().mock('../../src/utils/constants', function () {
      return Object.assign({}, jest.requireActual('../../src/utils/constants'), {
        LANGUAGE_LEVELS: Object.assign({}, jest.requireActual('../../src/utils/constants').LANGUAGE_LEVELS, {
          'empty': {}
        })
      });
    });
    var _require = require('../../src/contexts/ProgressContext'),
      ProgressProvider = _require.ProgressProvider,
      useProgress = _require.useProgress;
    var TestComponentWithEmptyLevel = function TestComponentWithEmptyLevel() {
      var _useProgress3 = useProgress(),
        calculateLevelProgress = _useProgress3.calculateLevelProgress;
      return (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
        testID: "empty-level-progress",
        children: ["Empty Level: ", calculateLevelProgress('empty'), "%"]
      });
    };
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(EmptyLevelTestComponent, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var progressText = _reactNative.screen.getByTestId('empty-level-progress').props.children.join('');
    expect(progressText).toBe('Empty Level: 0%');
    jest.clearAllMocks();
  }));
  it('devrait lancer une erreur si useProgress est utilisé en dehors du provider', function () {
    var consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(function () {});
    var TestComponentWithNoProvider = function TestComponentWithNoProvider() {
      (0, _ProgressContext.useProgress)();
      return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "Test"
      });
    };
    expect(function () {
      return (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestComponentWithNoProvider, {}));
    }).toThrow('useProgress must be used within a ProgressProvider');
    consoleErrorSpy.mockRestore();
  });
  it('devrait lancer une erreur si useProgressRead est utilisé en dehors du provider', function () {
    var consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(function () {});
    var TestComponentWithNoProvider = function TestComponentWithNoProvider() {
      (0, _ProgressContext.useProgressRead)();
      return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "Test"
      });
    };
    expect(function () {
      return (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestComponentWithNoProvider, {}));
    }).toThrow('useProgressRead must be used within a ProgressProvider');
    consoleErrorSpy.mockRestore();
  });
  it('devrait lancer une erreur si useProgressWrite est utilisé en dehors du provider', function () {
    var consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(function () {});
    var TestComponentWithNoProvider = function TestComponentWithNoProvider() {
      (0, _ProgressContext.useProgressWrite)();
      return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "Test"
      });
    };
    expect(function () {
      return (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestComponentWithNoProvider, {}));
    }).toThrow('useProgressWrite must be used within a ProgressProvider');
    consoleErrorSpy.mockRestore();
  });
  it('should calculate bonus level progress correctly', (0, _asyncToGenerator2.default)(function* () {
    var mockProgress = Object.assign({}, (0, _ProgressContext.createInitialProgress)(), {
      exercises: {
        reading: {
          'bonus': {
            completed: 50,
            total: 100
          }
        },
        phrases: {
          'bonus': {
            completed: 25,
            total: 100
          }
        }
      }
    });
    _asyncStorage.default.getItem.mockResolvedValueOnce(JSON.stringify(mockProgress));
    var TestComponentWithBonusLevel = function TestComponentWithBonusLevel() {
      var _useProgress4 = (0, _ProgressContext.useProgress)(),
        calculateLevelProgress = _useProgress4.calculateLevelProgress;
      return (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
        testID: "bonus-progress",
        children: ["Bonus: ", calculateLevelProgress('bonus'), "%"]
      });
    };
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponentWithBonusLevel, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var progressText = _reactNative.screen.getByTestId('bonus-progress').props.children.join('');
    expect(progressText).toBe('Bonus: 38%');
  }));
  it('devrait retourner 0 si un niveau ne contient aucun exercice (cas réel)', (0, _asyncToGenerator2.default)(function* () {
    _getJestObj().mock('../../src/utils/constants', function () {
      return Object.assign({}, jest.requireActual('../../src/utils/constants'), {
        EXERCISES: {
          newEmptyType: {}
        }
      });
    });
    var _require2 = require('../../src/contexts/ProgressContext'),
      ProgressProvider = _require2.ProgressProvider,
      useProgress = _require2.useProgress;
    var TestComponentWithNoExercises = function TestComponentWithNoExercises() {
      var _useProgress5 = useProgress(),
        calculateLevelProgress = _useProgress5.calculateLevelProgress;
      return (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
        testID: "no-exercises-progress",
        children: ["Progress: ", calculateLevelProgress('1'), "%"]
      });
    };
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponentWithNoExercises, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var progressText = _reactNative.screen.getByTestId('no-exercises-progress').props.children.join('');
    expect(progressText).toBe('Progress: 0%');
    jest.clearAllMocks();
  }));
  it('devrait retourner 0 si la liste des niveaux est vide', (0, _asyncToGenerator2.default)(function* () {
    _getJestObj().mock('../../src/utils/constants', function () {
      return Object.assign({}, jest.requireActual('../../src/utils/constants'), {
        LANGUAGE_LEVELS: {}
      });
    });
    var _require3 = require('../../src/contexts/ProgressContext'),
      ProgressProvider = _require3.ProgressProvider,
      useProgress = _require3.useProgress;
    var TestComponentWithNoLevels = function TestComponentWithNoLevels() {
      var _useProgress6 = useProgress(),
        calculateGlobalProgress = _useProgress6.calculateGlobalProgress;
      return (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
        testID: "no-levels-progress",
        children: ["Global: ", calculateGlobalProgress(), "%"]
      });
    };
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(ProgressProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponentWithNoLevels, {})
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.runAllTimers();
    }));
    var progressText = _reactNative.screen.getByTestId('no-levels-progress').props.children.join('');
    expect(progressText).toBe('Global: 0%');
    jest.clearAllMocks();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,