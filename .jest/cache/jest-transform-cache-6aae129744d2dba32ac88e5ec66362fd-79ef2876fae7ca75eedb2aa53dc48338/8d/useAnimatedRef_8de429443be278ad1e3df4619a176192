d3586026c9c4a76f22156371256b970b
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAnimatedRef = useAnimatedRef;
var _react = require("react");
var _useSharedValue = require("./useSharedValue");
var _fabricUtils = require("../fabricUtils");
var _shareables = require("../shareables");
var _shareableMappingCache = require("../shareableMappingCache");
var _reactNative = require("react-native");
var _findNodeHandle = require("../platformFunctions/findNodeHandle");
var _PlatformChecker = require("../PlatformChecker");
var IS_WEB = (0, _PlatformChecker.isWeb)();
function getComponentOrScrollable(component) {
  if ((0, _PlatformChecker.isFabric)() && component.getNativeScrollRef) {
    return component.getNativeScrollRef();
  } else if (!(0, _PlatformChecker.isFabric)() && component.getScrollableNode) {
    return component.getScrollableNode();
  }
  return component;
}
var _worklet_11891707279406_init_data = {
  code: "function useAnimatedRefTs1(){const{tag,viewName}=this.__closure;const f=function(){return tag.value;};f.viewName=viewName;return f;}",
  location: "C:\\Users\\khi_h\\Desktop\\Projets\\JoudEnglishApp\\node_modules\\react-native-reanimated\\src\\hook\\useAnimatedRef.ts",
  sourceMap: "{\"version\":3,\"names\":[\"useAnimatedRefTs1\",\"tag\",\"viewName\",\"__closure\",\"f\",\"value\"],\"sources\":[\"C:/Users/khi_h/Desktop/Projets/JoudEnglishApp/node_modules/react-native-reanimated/src/hook/useAnimatedRef.ts\"],\"mappings\":\"AAuFc,SAAAA,iBAAMA,CAAA,QAAAC,GAAA,CAAAC,QAAA,OAAAC,SAAA,CAEZ,KAAM,CAAAC,CAAkB,CAAG,QAAAA,CAAA,QAAM,CAAAH,GAAG,CAACI,KAAK,GAC1CD,CAAC,CAACF,QAAQ,CAAGA,QAAQ,CACrB,MAAO,CAAAE,CAAC,CACV\",\"ignoreList\":[]}",
  version: "3.16.7"
};
function useAnimatedRef() {
  var tag = (0, _useSharedValue.useSharedValue)(-1);
  var viewName = (0, _useSharedValue.useSharedValue)(null);
  var ref = (0, _react.useRef)();
  if (!ref.current) {
    var _fun = function fun(component) {
      if (component) {
        var getTagValueFunction = (0, _PlatformChecker.isFabric)() ? _fabricUtils.getShadowNodeWrapperFromRef : _findNodeHandle.findNodeHandle;
        var getTagOrShadowNodeWrapper = function getTagOrShadowNodeWrapper() {
          return IS_WEB ? getComponentOrScrollable(component) : getTagValueFunction(getComponentOrScrollable(component));
        };
        tag.value = getTagOrShadowNodeWrapper();
        _fun.getTag = (0, _PlatformChecker.isFabric)() ? function () {
          return (0, _findNodeHandle.findNodeHandle)(getComponentOrScrollable(component));
        } : getTagOrShadowNodeWrapper;
        _fun.current = component;
        if (_reactNative.Platform.OS === 'ios' && !(0, _PlatformChecker.isFabric)()) {
          var _viewConfig;
          viewName.value = (component == null || (_viewConfig = component.viewConfig) == null ? void 0 : _viewConfig.uiViewClassName) || 'RCTView';
        }
      }
      return tag.value;
    };
    _fun.current = null;
    var animatedRefShareableHandle = (0, _shareables.makeShareableCloneRecursive)({
      __init: function () {
        var _e = [new global.Error(), -3, -27];
        var useAnimatedRefTs1 = function useAnimatedRefTs1() {
          var f = function f() {
            return tag.value;
          };
          f.viewName = viewName;
          return f;
        };
        useAnimatedRefTs1.__closure = {
          tag: tag,
          viewName: viewName
        };
        useAnimatedRefTs1.__workletHash = 11891707279406;
        useAnimatedRefTs1.__initData = _worklet_11891707279406_init_data;
        useAnimatedRefTs1.__stackDetails = _e;
        return useAnimatedRefTs1;
      }()
    });
    _shareableMappingCache.shareableMappingCache.set(_fun, animatedRefShareableHandle);
    ref.current = _fun;
  }
  return ref.current;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,