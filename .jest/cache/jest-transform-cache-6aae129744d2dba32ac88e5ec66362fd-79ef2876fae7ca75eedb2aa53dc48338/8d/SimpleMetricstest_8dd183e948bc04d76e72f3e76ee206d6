1df50cbeae477bbf54f76ecf88cc1d05
_getJestObj().mock('../../../../src/hooks/useActivityMetrics', function () {
  return {
    __esModule: true,
    default: jest.fn()
  };
});
_getJestObj().mock('../../../../src/hooks/useDailyWords', function () {
  return {
    __esModule: true,
    default: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _SimpleMetrics = _interopRequireDefault(require("../../../../src/screens/Dashboard/components/SimpleMetrics"));
var _ThemeContext = require("../../../../src/contexts/ThemeContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('SimpleMetrics', function () {
  var mockTheme = {
    colors: {
      surface: '#FFFFFF',
      text: '#1F2937',
      textSecondary: '#6B7280'
    }
  };
  var useActivityMetrics = require('../../../../src/hooks/useActivityMetrics').default;
  var useDailyWords = require('../../../../src/hooks/useDailyWords').default;
  var renderComponent = function renderComponent() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
      value: mockTheme,
      children: (0, _jsxRuntime.jsx)(_SimpleMetrics.default, Object.assign({}, props))
    }));
  };
  beforeEach(function () {
    jest.clearAllMocks();
    useActivityMetrics.mockReturnValue({
      currentStreak: 0,
      streakTrend: null,
      formattedTime: '0min',
      refresh: jest.fn()
    });
    useDailyWords.mockReturnValue({
      wordsToday: 0,
      isLoading: false,
      refresh: jest.fn()
    });
  });
  describe('√âtat de chargement', function () {
    it('devrait afficher l\'indicateur de chargement', function () {
      useDailyWords.mockReturnValue({
        wordsToday: 0,
        isLoading: true,
        refresh: jest.fn()
      });
      var _renderComponent = renderComponent(),
        getByText = _renderComponent.getByText;
      expect(getByText('Chargement des m√©triques...')).toBeTruthy();
    });
  });
  describe('√âtat vide', function () {
    it('devrait afficher l\'√©tat vide quand aucune activit√©', function () {
      var _renderComponent2 = renderComponent(),
        getByText = _renderComponent2.getByText;
      expect(getByText('üéØ')).toBeTruthy();
      expect(getByText('Commencez votre premi√®re session !')).toBeTruthy();
      expect(getByText('Vos statistiques appara√Ætront ici')).toBeTruthy();
    });
  });
  describe('Affichage des m√©triques', function () {
    it('devrait afficher toutes les m√©triques avec activit√©', function () {
      useActivityMetrics.mockReturnValue({
        currentStreak: 5,
        streakTrend: '+1 üî•',
        formattedTime: '15min',
        refresh: jest.fn()
      });
      useDailyWords.mockReturnValue({
        wordsToday: 12,
        isLoading: false,
        refresh: jest.fn()
      });
      var _renderComponent3 = renderComponent(),
        getByText = _renderComponent3.getByText;
      expect(getByText('üìä Aujourd\'hui')).toBeTruthy();
      expect(getByText('üî•')).toBeTruthy();
      expect(getByText('üìö')).toBeTruthy();
      expect(getByText('‚è±Ô∏è')).toBeTruthy();
      expect(getByText('5')).toBeTruthy();
      expect(getByText('12')).toBeTruthy();
      expect(getByText('15min')).toBeTruthy();
      expect(getByText('Jours de suite')).toBeTruthy();
      expect(getByText('Mots aujourd\'hui')).toBeTruthy();
      expect(getByText('Temps aujourd\'hui')).toBeTruthy();
    });
    it('devrait afficher le trend pour le streak', function () {
      useActivityMetrics.mockReturnValue({
        currentStreak: 3,
        streakTrend: '+2 üí™',
        formattedTime: '10min',
        refresh: jest.fn()
      });
      useDailyWords.mockReturnValue({
        wordsToday: 8,
        isLoading: false,
        refresh: jest.fn()
      });
      var _renderComponent4 = renderComponent(),
        getByText = _renderComponent4.getByText;
      expect(getByText('+2 üí™')).toBeTruthy();
    });
  });
  describe('Syst√®me de rafra√Æchissement', function () {
    it('devrait appeler les fonctions refresh quand refreshKey change', function () {
      var mockRefreshMetrics = jest.fn();
      var mockRefreshWords = jest.fn();
      useActivityMetrics.mockReturnValue({
        currentStreak: 1,
        streakTrend: null,
        formattedTime: '5min',
        refresh: mockRefreshMetrics
      });
      useDailyWords.mockReturnValue({
        wordsToday: 3,
        isLoading: false,
        refresh: mockRefreshWords
      });
      var _renderComponent5 = renderComponent({
          refreshKey: 0
        }),
        rerender = _renderComponent5.rerender;
      rerender((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
        value: mockTheme,
        children: (0, _jsxRuntime.jsx)(_SimpleMetrics.default, {
          refreshKey: 1
        })
      }));
      expect(mockRefreshMetrics).toHaveBeenCalled();
      expect(mockRefreshWords).toHaveBeenCalled();
    });
    it('devrait g√©rer les hooks sans fonction refresh', function () {
      useActivityMetrics.mockReturnValue({
        currentStreak: 1,
        streakTrend: null,
        formattedTime: '5min'
      });
      useDailyWords.mockReturnValue({
        wordsToday: 3,
        isLoading: false
      });
      var _renderComponent6 = renderComponent({
          refreshKey: 0
        }),
        rerender = _renderComponent6.rerender;
      rerender((0, _jsxRuntime.jsx)(_ThemeContext.ThemeContext.Provider, {
        value: mockTheme,
        children: (0, _jsxRuntime.jsx)(_SimpleMetrics.default, {
          refreshKey: 1
        })
      }));
      expect(true).toBe(true);
    });
    it('ne devrait pas refresh si refreshKey est 0', function () {
      var mockRefreshMetrics = jest.fn();
      var mockRefreshWords = jest.fn();
      useActivityMetrics.mockReturnValue({
        currentStreak: 1,
        streakTrend: null,
        formattedTime: '5min',
        refresh: mockRefreshMetrics
      });
      useDailyWords.mockReturnValue({
        wordsToday: 3,
        isLoading: false,
        refresh: mockRefreshWords
      });
      renderComponent({
        refreshKey: 0
      });
      expect(mockRefreshMetrics).not.toHaveBeenCalled();
      expect(mockRefreshWords).not.toHaveBeenCalled();
    });
  });
  describe('Gestion des valeurs nulles', function () {
    it('devrait g√©rer les valeurs nulles gracieusement', function () {
      useActivityMetrics.mockReturnValue({
        currentStreak: null,
        streakTrend: null,
        formattedTime: null,
        refresh: jest.fn()
      });
      useDailyWords.mockReturnValue({
        wordsToday: null,
        isLoading: false,
        refresh: jest.fn()
      });
      var _renderComponent7 = renderComponent(),
        getByText = _renderComponent7.getByText;
      expect(getByText('Commencez votre premi√®re session !')).toBeTruthy();
    });
    it('devrait afficher 0 pour les valeurs undefined', function () {
      useActivityMetrics.mockReturnValue({
        currentStreak: undefined,
        streakTrend: null,
        formattedTime: '5min',
        refresh: jest.fn()
      });
      useDailyWords.mockReturnValue({
        wordsToday: undefined,
        isLoading: false,
        refresh: jest.fn()
      });
      var _renderComponent8 = renderComponent(),
        getByText = _renderComponent8.getByText,
        getAllByText = _renderComponent8.getAllByText;
      var zeroElements = getAllByText('0');
      expect(zeroElements.length).toBeGreaterThan(0);
      expect(getByText('5min')).toBeTruthy();
    });
  });
  describe('Couleurs et th√®me', function () {
    it('devrait utiliser la couleur d\'accent personnalis√©e', function () {
      useDailyWords.mockReturnValue({
        wordsToday: 0,
        isLoading: true,
        refresh: jest.fn()
      });
      var _renderComponent9 = renderComponent({
          accentColor: '#FF5722'
        }),
        getByText = _renderComponent9.getByText;
      expect(getByText('Chargement des m√©triques...')).toBeTruthy();
    });
    it('devrait fonctionner sans contexte de th√®me', function () {
      useActivityMetrics.mockReturnValue({
        currentStreak: 1,
        streakTrend: null,
        formattedTime: '5min',
        refresh: jest.fn()
      });
      useDailyWords.mockReturnValue({
        wordsToday: 3,
        isLoading: false,
        refresh: jest.fn()
      });
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SimpleMetrics.default, {})),
        getByText = _render.getByText;
      expect(getByText('üìä Aujourd\'hui')).toBeTruthy();
    });
  });
  describe('Cas limites', function () {
    it('devrait afficher les m√©triques avec une seule valeur non-nulle', function () {
      useDailyWords.mockReturnValue({
        wordsToday: 1,
        isLoading: false,
        refresh: jest.fn()
      });
      var _renderComponent0 = renderComponent(),
        getByText = _renderComponent0.getByText;
      expect(getByText('üìä Aujourd\'hui')).toBeTruthy();
      expect(getByText('1')).toBeTruthy();
    });
    it('devrait g√©rer les grandes valeurs', function () {
      useActivityMetrics.mockReturnValue({
        currentStreak: 365,
        streakTrend: '+1 üèÜ',
        formattedTime: '2h 45min',
        refresh: jest.fn()
      });
      useDailyWords.mockReturnValue({
        wordsToday: 100,
        isLoading: false,
        refresh: jest.fn()
      });
      var _renderComponent1 = renderComponent(),
        getByText = _renderComponent1.getByText;
      expect(getByText('365')).toBeTruthy();
      expect(getByText('100')).toBeTruthy();
      expect(getByText('2h 45min')).toBeTruthy();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,