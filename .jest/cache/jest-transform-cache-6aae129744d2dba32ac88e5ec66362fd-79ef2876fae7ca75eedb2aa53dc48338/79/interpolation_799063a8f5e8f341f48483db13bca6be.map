{"version":3,"names":["Object","defineProperty","exports","value","interpolate","clamp","Extrapolation","_errors","require","_worklet_5413376973116_init_data","code","location","sourceMap","version","getVal","_e","global","Error","type","coef","val","leftEdgeOutput","rightEdgeOutput","x","IDENTITY","CLAMP","EXTEND","__closure","__workletHash","__initData","__stackDetails","_worklet_14591500575420_init_data","isExtrapolate","_worklet_14200579615035_init_data","validateType","extrapolationConfig","extrapolateLeft","extrapolateRight","ReanimatedError","assign","_worklet_9740645922780_init_data","internalInterpolate","narrowedInput","leftEdgeInput","rightEdgeInput","progress","_worklet_10311999127907_init_data","inputRange","outputRange","length","i","_worklet_8339713177498_init_data","min","max","Math"],"sources":["interpolation.ts"],"sourcesContent":["'use strict';\n\nimport { ReanimatedError } from './errors';\n\n/**\n * Extrapolation type.\n *\n * @param IDENTITY - Returns the provided value as is.\n * @param CLAMP - Clamps the value to the edge of the output range.\n * @param EXTEND - Predicts the values beyond the output range.\n */\nexport enum Extrapolation {\n  IDENTITY = 'identity',\n  CLAMP = 'clamp',\n  EXTEND = 'extend',\n}\n\n/** Represents the possible values for extrapolation as a string. */\ntype ExtrapolationAsString = 'identity' | 'clamp' | 'extend';\n\ninterface InterpolationNarrowedInput {\n  leftEdgeInput: number;\n  rightEdgeInput: number;\n  leftEdgeOutput: number;\n  rightEdgeOutput: number;\n}\n\n/** Allows to specify extrapolation for left and right edge of the interpolation. */\nexport interface ExtrapolationConfig {\n  extrapolateLeft?: Extrapolation | string;\n  extrapolateRight?: Extrapolation | string;\n}\n\ninterface RequiredExtrapolationConfig {\n  extrapolateLeft: Extrapolation;\n  extrapolateRight: Extrapolation;\n}\n\n/** Configuration options for extrapolation. */\nexport type ExtrapolationType =\n  | ExtrapolationConfig\n  | Extrapolation\n  | ExtrapolationAsString\n  | undefined;\n\nfunction getVal(\n  type: Extrapolation,\n  coef: number,\n  val: number,\n  leftEdgeOutput: number,\n  rightEdgeOutput: number,\n  x: number\n): number {\n  'worklet';\n\n  switch (type) {\n    case Extrapolation.IDENTITY:\n      return x;\n    case Extrapolation.CLAMP:\n      if (coef * val < coef * leftEdgeOutput) {\n        return leftEdgeOutput;\n      }\n      return rightEdgeOutput;\n    case Extrapolation.EXTEND:\n    default:\n      return val;\n  }\n}\n\nfunction isExtrapolate(value: string): value is Extrapolation {\n  'worklet';\n\n  return (\n    /* eslint-disable @typescript-eslint/no-unsafe-enum-comparison */\n    value === Extrapolation.EXTEND ||\n    value === Extrapolation.CLAMP ||\n    value === Extrapolation.IDENTITY\n    /* eslint-enable @typescript-eslint/no-unsafe-enum-comparison */\n  );\n}\n\n// validates extrapolations type\n// if type is correct, converts it to ExtrapolationConfig\nfunction validateType(type: ExtrapolationType): RequiredExtrapolationConfig {\n  'worklet';\n  // initialize extrapolationConfig with default extrapolation\n  const extrapolationConfig: RequiredExtrapolationConfig = {\n    extrapolateLeft: Extrapolation.EXTEND,\n    extrapolateRight: Extrapolation.EXTEND,\n  };\n\n  if (!type) {\n    return extrapolationConfig;\n  }\n\n  if (typeof type === 'string') {\n    if (!isExtrapolate(type)) {\n      throw new ReanimatedError(\n        `Unsupported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\n        interpolate(value, [inputRange], [outputRange], \"clamp\")`\n      );\n    }\n    extrapolationConfig.extrapolateLeft = type;\n    extrapolationConfig.extrapolateRight = type;\n    return extrapolationConfig;\n  }\n\n  // otherwise type is extrapolation config object\n  if (\n    (type.extrapolateLeft && !isExtrapolate(type.extrapolateLeft)) ||\n    (type.extrapolateRight && !isExtrapolate(type.extrapolateRight))\n  ) {\n    throw new ReanimatedError(\n      `Unsupported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\n      interpolate(value, [inputRange], [outputRange], {\n        extrapolateLeft: Extrapolation.CLAMP,\n        extrapolateRight: Extrapolation.IDENTITY\n      }})`\n    );\n  }\n\n  Object.assign(extrapolationConfig, type);\n  return extrapolationConfig;\n}\n\nfunction internalInterpolate(\n  x: number,\n  narrowedInput: InterpolationNarrowedInput,\n  extrapolationConfig: RequiredExtrapolationConfig\n) {\n  'worklet';\n  const { leftEdgeInput, rightEdgeInput, leftEdgeOutput, rightEdgeOutput } =\n    narrowedInput;\n  if (rightEdgeInput - leftEdgeInput === 0) {\n    return leftEdgeOutput;\n  }\n  const progress = (x - leftEdgeInput) / (rightEdgeInput - leftEdgeInput);\n  const val = leftEdgeOutput + progress * (rightEdgeOutput - leftEdgeOutput);\n  const coef = rightEdgeOutput >= leftEdgeOutput ? 1 : -1;\n\n  if (coef * val < coef * leftEdgeOutput) {\n    return getVal(\n      extrapolationConfig.extrapolateLeft,\n      coef,\n      val,\n      leftEdgeOutput,\n      rightEdgeOutput,\n      x\n    );\n  } else if (coef * val > coef * rightEdgeOutput) {\n    return getVal(\n      extrapolationConfig.extrapolateRight,\n      coef,\n      val,\n      leftEdgeOutput,\n      rightEdgeOutput,\n      x\n    );\n  }\n\n  return val;\n}\n\n/**\n * Lets you map a value from one range to another using linear interpolation.\n *\n * @param value - A number from the `input` range that is going to be mapped to\n *   the `output` range.\n * @param inputRange - An array of numbers specifying the input range of the\n *   interpolation.\n * @param outputRange - An array of numbers specifying the output range of the\n *   interpolation.\n * @param extrapolate - Determines what happens when the `value` goes beyond the\n *   `input` range. Defaults to `Extrapolation.EXTEND` -\n *   {@link ExtrapolationType}.\n * @returns A mapped value within the output range.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/utilities/interpolate\n */\nexport function interpolate(\n  x: number,\n  inputRange: readonly number[],\n  outputRange: readonly number[],\n  type?: ExtrapolationType\n): number {\n  'worklet';\n  if (inputRange.length < 2 || outputRange.length < 2) {\n    throw new ReanimatedError(\n      'Interpolation input and output ranges should contain at least two values.'\n    );\n  }\n\n  const extrapolationConfig = validateType(type);\n  const length = inputRange.length;\n  const narrowedInput: InterpolationNarrowedInput = {\n    leftEdgeInput: inputRange[0],\n    rightEdgeInput: inputRange[1],\n    leftEdgeOutput: outputRange[0],\n    rightEdgeOutput: outputRange[1],\n  };\n  if (length > 2) {\n    if (x > inputRange[length - 1]) {\n      narrowedInput.leftEdgeInput = inputRange[length - 2];\n      narrowedInput.rightEdgeInput = inputRange[length - 1];\n      narrowedInput.leftEdgeOutput = outputRange[length - 2];\n      narrowedInput.rightEdgeOutput = outputRange[length - 1];\n    } else {\n      for (let i = 1; i < length; ++i) {\n        if (x <= inputRange[i]) {\n          narrowedInput.leftEdgeInput = inputRange[i - 1];\n          narrowedInput.rightEdgeInput = inputRange[i];\n          narrowedInput.leftEdgeOutput = outputRange[i - 1];\n          narrowedInput.rightEdgeOutput = outputRange[i];\n          break;\n        }\n      }\n    }\n  }\n\n  return internalInterpolate(x, narrowedInput, extrapolationConfig);\n}\n\n/**\n * Lets you limit a value within a specified range.\n *\n * @param value - A number that will be returned as long as the provided value\n *   is in range between `min` and `max`.\n * @param min - A number which will be returned when provided `value` is lower\n *   than `min`.\n * @param max - A number which will be returned when provided `value` is higher\n *   than `max`.\n * @returns A number between min and max bounds.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/utilities/clamp/\n */\nexport function clamp(value: number, min: number, max: number) {\n  'worklet';\n  return Math.min(Math.max(value, min), max);\n}\n"],"mappings":"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","ignoreList":[]}