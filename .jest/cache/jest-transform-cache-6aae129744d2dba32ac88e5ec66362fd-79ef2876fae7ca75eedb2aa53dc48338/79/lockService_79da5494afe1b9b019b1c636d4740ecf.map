{"version":3,"names":["_asyncStorage","_interopRequireDefault","require","STORAGE_KEYS","ENABLED","PIN_HASH","PIN_SALT","BIO_ENABLED","RECOVERY_HASH","TIMEOUT_SECONDS","LOCKOUT_UNTIL","FAILED_ATTEMPTS","simpleHash","input","hash","str","String","i","length","charCodeAt","Math","abs","toString","randomSalt","arguments","undefined","chars","out","floor","random","isEnabled","_isEnabled","apply","_asyncToGenerator2","default","enabled","AsyncStorage","getItem","enableLock","_enableLock","setItem","disableLock","_disableLock","multiRemove","setPin","_x","_setPin","pin","salt","pinHash","verifyPin","_x2","_verifyPin","lockoutUntil","Number","now","Date","ok","reason","expected","given","attempts","lockMs","min","setBiometricsEnabled","_x3","_setBiometricsEnabled","isBiometricsEnabled","_isBiometricsEnabled","v","generateRecoveryCode","code","setRecoveryCode","_x4","_setRecoveryCode","verifyRecovery","_x5","_verifyRecovery","setAutoLockTimeout","_x6","_setAutoLockTimeout","seconds","getAutoLockTimeout","_getAutoLockTimeout","emergencyReset","_emergencyReset","lockStorageKeys","exports"],"sources":["lockService.js"],"sourcesContent":["// src/services/lockService.js - Simple offline app lock service (PIN + recovery)\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nconst STORAGE_KEYS = {\r\n  ENABLED: 'app_lock.enabled',\r\n  PIN_HASH: 'app_lock.pin_hash',\r\n  PIN_SALT: 'app_lock.pin_salt',\r\n  BIO_ENABLED: 'app_lock.bio_enabled',\r\n  RECOVERY_HASH: 'app_lock.recovery_hash',\r\n  TIMEOUT_SECONDS: 'app_lock.timeout_seconds',\r\n  LOCKOUT_UNTIL: 'app_lock.lockout_until',\r\n  FAILED_ATTEMPTS: 'app_lock.failed_attempts',\r\n};\r\n\r\n// NOTE: This is not cryptographically strong. For local lock UX only.\r\nfunction simpleHash(input) {\r\n  let hash = 0;\r\n  const str = String(input);\r\n  for (let i = 0; i < str.length; i += 1) {\r\n    hash = (hash << 5) - hash + str.charCodeAt(i);\r\n    hash |= 0;\r\n  }\r\n  return Math.abs(hash).toString(16);\r\n}\r\n\r\nfunction randomSalt(length = 16) {\r\n  const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r\n  let out = '';\r\n  for (let i = 0; i < length; i += 1) out += chars[Math.floor(Math.random() * chars.length)];\r\n  return out;\r\n}\r\n\r\nexport async function isEnabled() {\r\n  const enabled = await AsyncStorage.getItem(STORAGE_KEYS.ENABLED);\r\n  return enabled === '1';\r\n}\r\n\r\nexport async function enableLock() {\r\n  await AsyncStorage.setItem(STORAGE_KEYS.ENABLED, '1');\r\n  return true;\r\n}\r\n\r\nexport async function disableLock() {\r\n  await AsyncStorage.multiRemove([\r\n    STORAGE_KEYS.ENABLED,\r\n    STORAGE_KEYS.PIN_HASH,\r\n    STORAGE_KEYS.PIN_SALT,\r\n    STORAGE_KEYS.BIO_ENABLED,\r\n    STORAGE_KEYS.RECOVERY_HASH,\r\n    STORAGE_KEYS.TIMEOUT_SECONDS,\r\n    STORAGE_KEYS.LOCKOUT_UNTIL,\r\n    STORAGE_KEYS.FAILED_ATTEMPTS,\r\n  ]);\r\n  return true;\r\n}\r\n\r\nexport async function setPin(pin) {\r\n  const salt = randomSalt();\r\n  const pinHash = simpleHash(`${salt}:${pin}`);\r\n  await AsyncStorage.setItem(STORAGE_KEYS.PIN_SALT, salt);\r\n  await AsyncStorage.setItem(STORAGE_KEYS.PIN_HASH, pinHash);\r\n  return true;\r\n}\r\n\r\nexport async function verifyPin(pin) {\r\n  const lockoutUntil = Number(await AsyncStorage.getItem(STORAGE_KEYS.LOCKOUT_UNTIL) || '0');\r\n  const now = Date.now();\r\n  if (lockoutUntil && now < lockoutUntil) {\r\n    return { ok: false, reason: 'lockout' };\r\n  }\r\n\r\n  const salt = await AsyncStorage.getItem(STORAGE_KEYS.PIN_SALT);\r\n  const expected = await AsyncStorage.getItem(STORAGE_KEYS.PIN_HASH);\r\n  if (!salt || !expected) return { ok: false };\r\n  const given = simpleHash(`${salt}:${pin}`);\r\n  const ok = given === expected;\r\n\r\n  let attempts = Number(await AsyncStorage.getItem(STORAGE_KEYS.FAILED_ATTEMPTS) || '0');\r\n  if (ok) {\r\n    await AsyncStorage.setItem(STORAGE_KEYS.FAILED_ATTEMPTS, '0');\r\n    return { ok: true };\r\n  }\r\n  attempts += 1;\r\n  await AsyncStorage.setItem(STORAGE_KEYS.FAILED_ATTEMPTS, String(attempts));\r\n  if (attempts >= 5) {\r\n    const lockMs = 30_000 * Math.min(4, attempts - 4); // 30s, 60s, 90s, 120s\r\n    await AsyncStorage.setItem(STORAGE_KEYS.LOCKOUT_UNTIL, String(now + lockMs));\r\n    return { ok: false, reason: 'lockout' };\r\n  }\r\n  return { ok: false };\r\n}\r\n\r\nexport async function setBiometricsEnabled(enabled) {\r\n  await AsyncStorage.setItem(STORAGE_KEYS.BIO_ENABLED, enabled ? '1' : '0');\r\n  return true;\r\n}\r\n\r\nexport async function isBiometricsEnabled() {\r\n  const v = await AsyncStorage.getItem(STORAGE_KEYS.BIO_ENABLED);\r\n  return v === '1';\r\n}\r\n\r\nexport function generateRecoveryCode() {\r\n  const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';\r\n  let code = '';\r\n  for (let i = 0; i < 16; i += 1) code += chars[Math.floor(Math.random() * chars.length)];\r\n  return code;\r\n}\r\n\r\nexport async function setRecoveryCode(code) {\r\n  const hash = simpleHash(code);\r\n  await AsyncStorage.setItem(STORAGE_KEYS.RECOVERY_HASH, hash);\r\n  return true;\r\n}\r\n\r\nexport async function verifyRecovery(code) {\r\n  const expected = await AsyncStorage.getItem(STORAGE_KEYS.RECOVERY_HASH);\r\n  if (!expected) return false;\r\n  return simpleHash(code) === expected;\r\n}\r\n\r\nexport async function setAutoLockTimeout(seconds) {\r\n  await AsyncStorage.setItem(STORAGE_KEYS.TIMEOUT_SECONDS, String(seconds));\r\n  return true;\r\n}\r\n\r\nexport async function getAutoLockTimeout() {\r\n  return Number(await AsyncStorage.getItem(STORAGE_KEYS.TIMEOUT_SECONDS) || '0');\r\n}\r\n\r\nexport async function emergencyReset() {\r\n  await disableLock();\r\n  return true;\r\n}\r\n\r\nexport const lockStorageKeys = STORAGE_KEYS;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]}