c812cec25c729c560b83ca5e6acd8c97
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Button = _interopRequireDefault(require("../../../src/components/ui/Button"));
var _jsxRuntime = require("react/jsx-runtime");
describe('Button', function () {
  it('devrait rendre le texte correct', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        title: "Mon Bouton",
        onPress: function onPress() {}
      })),
      getByText = _render.getByText;
    expect(getByText('Mon Bouton')).toBeTruthy();
  });
  it('devrait appeler la fonction onPress quand le bouton est pressé', function () {
    var mockOnPress = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        title: "Mon Bouton",
        onPress: mockOnPress
      })),
      getByText = _render2.getByText;
    _reactNative.fireEvent.press(getByText('Mon Bouton'));
    expect(mockOnPress).toHaveBeenCalledTimes(1);
  });
  it('ne devrait pas appeler la fonction onPress quand le bouton est désactivé', function () {
    var mockOnPress = jest.fn();
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        title: "Mon Bouton",
        onPress: mockOnPress,
        disabled: true
      })),
      getByText = _render3.getByText;
    _reactNative.fireEvent.press(getByText('Mon Bouton'));
    expect(mockOnPress).not.toHaveBeenCalled();
  });
  it('devrait afficher un indicateur de chargement si isLoading est vrai', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        title: "Mon Bouton",
        onPress: function onPress() {},
        isLoading: true
      })),
      queryByTestId = _render4.queryByTestId;
    expect(queryByTestId('activity-indicator')).toBeTruthy();
  });
  it('ne devrait pas afficher un indicateur de chargement si isLoading est faux', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        title: "Mon Bouton",
        onPress: function onPress() {},
        isLoading: false
      })),
      queryByTestId = _render5.queryByTestId;
    expect(queryByTestId('activity-indicator')).toBeNull();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9CdXR0b24iLCJfanN4UnVudGltZSIsImRlc2NyaWJlIiwiaXQiLCJfcmVuZGVyIiwicmVuZGVyIiwianN4IiwiZGVmYXVsdCIsInRpdGxlIiwib25QcmVzcyIsImdldEJ5VGV4dCIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJtb2NrT25QcmVzcyIsImplc3QiLCJmbiIsIl9yZW5kZXIyIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJfcmVuZGVyMyIsImRpc2FibGVkIiwibm90IiwidG9IYXZlQmVlbkNhbGxlZCIsIl9yZW5kZXI0IiwiaXNMb2FkaW5nIiwicXVlcnlCeVRlc3RJZCIsIl9yZW5kZXI1IiwidG9CZU51bGwiXSwic291cmNlcyI6WyJCdXR0b24udGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3VpL0J1dHRvbic7XG5cbmRlc2NyaWJlKCdCdXR0b24nLCAoKSA9PiB7XG4gIGl0KCdkZXZyYWl0IHJlbmRyZSBsZSB0ZXh0ZSBjb3JyZWN0JywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPEJ1dHRvbiB0aXRsZT1cIk1vbiBCb3V0b25cIiBvblByZXNzPXsoKSA9PiB7fX0gLz4pO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ01vbiBCb3V0b24nKSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICBpdCgnZGV2cmFpdCBhcHBlbGVyIGxhIGZvbmN0aW9uIG9uUHJlc3MgcXVhbmQgbGUgYm91dG9uIGVzdCBwcmVzc8OpJywgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tPblByZXNzID0gamVzdC5mbigpO1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPEJ1dHRvbiB0aXRsZT1cIk1vbiBCb3V0b25cIiBvblByZXNzPXttb2NrT25QcmVzc30gLz4pO1xuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ01vbiBCb3V0b24nKSk7XG4gICAgZXhwZWN0KG1vY2tPblByZXNzKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xuXG4gIGl0KCduZSBkZXZyYWl0IHBhcyBhcHBlbGVyIGxhIGZvbmN0aW9uIG9uUHJlc3MgcXVhbmQgbGUgYm91dG9uIGVzdCBkw6lzYWN0aXbDqScsICgpID0+IHtcbiAgICBjb25zdCBtb2NrT25QcmVzcyA9IGplc3QuZm4oKTtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKDxCdXR0b24gdGl0bGU9XCJNb24gQm91dG9uXCIgb25QcmVzcz17bW9ja09uUHJlc3N9IGRpc2FibGVkIC8+KTtcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCdNb24gQm91dG9uJykpO1xuICAgIGV4cGVjdChtb2NrT25QcmVzcykubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ2RldnJhaXQgYWZmaWNoZXIgdW4gaW5kaWNhdGV1ciBkZSBjaGFyZ2VtZW50IHNpIGlzTG9hZGluZyBlc3QgdnJhaScsICgpID0+IHtcbiAgICBjb25zdCB7IHF1ZXJ5QnlUZXN0SWQgfSA9IHJlbmRlcig8QnV0dG9uIHRpdGxlPVwiTW9uIEJvdXRvblwiIG9uUHJlc3M9eygpID0+IHt9fSBpc0xvYWRpbmcgLz4pO1xuICAgIGV4cGVjdChxdWVyeUJ5VGVzdElkKCdhY3Rpdml0eS1pbmRpY2F0b3InKSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICBpdCgnbmUgZGV2cmFpdCBwYXMgYWZmaWNoZXIgdW4gaW5kaWNhdGV1ciBkZSBjaGFyZ2VtZW50IHNpIGlzTG9hZGluZyBlc3QgZmF1eCcsICgpID0+IHtcbiAgICBjb25zdCB7IHF1ZXJ5QnlUZXN0SWQgfSA9IHJlbmRlcig8QnV0dG9uIHRpdGxlPVwiTW9uIEJvdXRvblwiIG9uUHJlc3M9eygpID0+IHt9fSBpc0xvYWRpbmc9e2ZhbHNlfSAvPik7XG4gICAgZXhwZWN0KHF1ZXJ5QnlUZXN0SWQoJ2FjdGl2aXR5LWluZGljYXRvcicpKS50b0JlTnVsbCgpO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsT0FBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQXVELElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUV2REksUUFBUSxDQUFDLFFBQVEsRUFBRSxZQUFNO0VBQ3ZCQyxFQUFFLENBQUMsaUNBQWlDLEVBQUUsWUFBTTtJQUMxQyxJQUFBQyxPQUFBLEdBQXNCLElBQUFDLG1CQUFNLEVBQUMsSUFBQUosV0FBQSxDQUFBSyxHQUFBLEVBQUNOLE9BQUEsQ0FBQU8sT0FBTTtRQUFDQyxLQUFLLEVBQUMsWUFBWTtRQUFDQyxPQUFPLEVBQUUsU0FBVEEsT0FBT0EsQ0FBQSxFQUFRLENBQUM7TUFBRSxDQUFFLENBQUMsQ0FBQztNQUF0RUMsU0FBUyxHQUFBTixPQUFBLENBQVRNLFNBQVM7SUFDakJDLE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0VBQzlDLENBQUMsQ0FBQztFQUVGVCxFQUFFLENBQUMsZ0VBQWdFLEVBQUUsWUFBTTtJQUN6RSxJQUFNVSxXQUFXLEdBQUdDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDN0IsSUFBQUMsUUFBQSxHQUFzQixJQUFBWCxtQkFBTSxFQUFDLElBQUFKLFdBQUEsQ0FBQUssR0FBQSxFQUFDTixPQUFBLENBQUFPLE9BQU07UUFBQ0MsS0FBSyxFQUFDLFlBQVk7UUFBQ0MsT0FBTyxFQUFFSTtNQUFZLENBQUUsQ0FBQyxDQUFDO01BQXpFSCxTQUFTLEdBQUFNLFFBQUEsQ0FBVE4sU0FBUztJQUNqQk8sc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDUixTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDeENDLE1BQU0sQ0FBQ0UsV0FBVyxDQUFDLENBQUNNLHFCQUFxQixDQUFDLENBQUMsQ0FBQztFQUM5QyxDQUFDLENBQUM7RUFFRmhCLEVBQUUsQ0FBQywwRUFBMEUsRUFBRSxZQUFNO0lBQ25GLElBQU1VLFdBQVcsR0FBR0MsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUM3QixJQUFBSyxRQUFBLEdBQXNCLElBQUFmLG1CQUFNLEVBQUMsSUFBQUosV0FBQSxDQUFBSyxHQUFBLEVBQUNOLE9BQUEsQ0FBQU8sT0FBTTtRQUFDQyxLQUFLLEVBQUMsWUFBWTtRQUFDQyxPQUFPLEVBQUVJLFdBQVk7UUFBQ1EsUUFBUTtNQUFBLENBQUUsQ0FBQyxDQUFDO01BQWxGWCxTQUFTLEdBQUFVLFFBQUEsQ0FBVFYsU0FBUztJQUNqQk8sc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDUixTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDeENDLE1BQU0sQ0FBQ0UsV0FBVyxDQUFDLENBQUNTLEdBQUcsQ0FBQ0MsZ0JBQWdCLENBQUMsQ0FBQztFQUM1QyxDQUFDLENBQUM7RUFFRnBCLEVBQUUsQ0FBQyxvRUFBb0UsRUFBRSxZQUFNO0lBQzdFLElBQUFxQixRQUFBLEdBQTBCLElBQUFuQixtQkFBTSxFQUFDLElBQUFKLFdBQUEsQ0FBQUssR0FBQSxFQUFDTixPQUFBLENBQUFPLE9BQU07UUFBQ0MsS0FBSyxFQUFDLFlBQVk7UUFBQ0MsT0FBTyxFQUFFLFNBQVRBLE9BQU9BLENBQUEsRUFBUSxDQUFDLENBQUU7UUFBQ2dCLFNBQVM7TUFBQSxDQUFFLENBQUMsQ0FBQztNQUFwRkMsYUFBYSxHQUFBRixRQUFBLENBQWJFLGFBQWE7SUFDckJmLE1BQU0sQ0FBQ2UsYUFBYSxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQ2QsVUFBVSxDQUFDLENBQUM7RUFDMUQsQ0FBQyxDQUFDO0VBRUZULEVBQUUsQ0FBQywyRUFBMkUsRUFBRSxZQUFNO0lBQ3BGLElBQUF3QixRQUFBLEdBQTBCLElBQUF0QixtQkFBTSxFQUFDLElBQUFKLFdBQUEsQ0FBQUssR0FBQSxFQUFDTixPQUFBLENBQUFPLE9BQU07UUFBQ0MsS0FBSyxFQUFDLFlBQVk7UUFBQ0MsT0FBTyxFQUFFLFNBQVRBLE9BQU9BLENBQUEsRUFBUSxDQUFDLENBQUU7UUFBQ2dCLFNBQVMsRUFBRTtNQUFNLENBQUUsQ0FBQyxDQUFDO01BQTVGQyxhQUFhLEdBQUFDLFFBQUEsQ0FBYkQsYUFBYTtJQUNyQmYsTUFBTSxDQUFDZSxhQUFhLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDRSxRQUFRLENBQUMsQ0FBQztFQUN4RCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=