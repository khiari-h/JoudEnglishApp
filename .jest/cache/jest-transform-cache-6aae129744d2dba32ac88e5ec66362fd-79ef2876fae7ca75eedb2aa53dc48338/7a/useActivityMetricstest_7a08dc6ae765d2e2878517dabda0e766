bbcb12434f792b8853406a665ea951bd
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useActivityMetrics = _interopRequireDefault(require("../../src/hooks/useActivityMetrics"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useActivityMetrics', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    jest.spyOn(Date, 'now').mockReturnValue(1640995200000);
    jest.spyOn(Date.prototype, 'toDateString').mockReturnValue('Sat Jan 01 2022');
  });
  afterEach(function () {
    jest.restoreAllMocks();
  });
  describe('Chargement initial', function () {
    it('devrait charger les m√©triques depuis AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValueOnce('5').mockResolvedValueOnce('30').mockResolvedValueOnce('Sat Jan 01 2022');
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook.result;
      yield (0, _reactNative.waitFor)(function () {
        expect(result.current.currentStreak).toBe(5);
        expect(result.current.todayMinutes).toBe(30);
        expect(result.current.formattedTime).toBe('30min');
      });
    }));
    it('devrait utiliser des valeurs par d√©faut si aucune donn√©e', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook2.result;
      yield (0, _reactNative.waitFor)(function () {
        expect(result.current.currentStreak).toBe(0);
        expect(result.current.todayMinutes).toBe(0);
        expect(result.current.formattedTime).toBe('0min');
      });
    }));
  });
  describe('Gestion des sessions', function () {
    it('devrait d√©marrer et terminer une session', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue('0');
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useActivityMetrics.default)();
        }),
        result = _renderHook3.result;
      yield (0, _reactNative.waitFor)(function () {
        expect(result.current.todayMinutes).toBe(0);
      });
      (0, _reactNative.act)(function () {
        result.current.startSession('vocabulary');
      });
      jest.spyOn(Date, 'now').mockReturnValue(1640995200000 + 120000);
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.endSession();
      }));
      expect(result.current.todayMinutes).toBe(2);
    }));
  });
  describe('Formatage du temps', function () {
    it('devrait formater correctement les minutes', function () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var testCases = [{
        minutes: 0,
        expected: '0min'
      }, {
        minutes: 30,
        expected: '30min'
      }, {
        minutes: 60,
        expected: '1h'
      }, {
        minutes: 90,
        expected: '1h30min'
      }];
      testCases.forEach(function (_ref5) {
        var minutes = _ref5.minutes,
          expected = _ref5.expected;
        _asyncStorage.default.getItem.mockResolvedValueOnce('0').mockResolvedValueOnce(minutes.toString()).mockResolvedValueOnce('Sat Jan 01 2022');
        var _renderHook4 = (0, _reactNative.renderHook)(function () {
            return (0, _useActivityMetrics.default)();
          }),
          result = _renderHook4.result;
        (0, _reactNative.waitFor)(function () {
          expect(result.current.formattedTime).toBe(expected);
        });
      });
    });
  });
  describe('Tendances de streak', function () {
    it('devrait retourner les bonnes tendances', function () {
      var testCases = [{
        streak: 0,
        expected: null
      }, {
        streak: 1,
        expected: 'üî• Continue!'
      }, {
        streak: 3,
        expected: 'üí™ En forme!'
      }, {
        streak: 7,
        expected: 'üèÜ Incroyable!'
      }];
      testCases.forEach(function (_ref6) {
        var streak = _ref6.streak,
          expected = _ref6.expected;
        _asyncStorage.default.getItem.mockResolvedValueOnce(streak.toString()).mockResolvedValueOnce('0').mockResolvedValueOnce('Sat Jan 01 2022');
        var _renderHook5 = (0, _reactNative.renderHook)(function () {
            return (0, _useActivityMetrics.default)();
          }),
          result = _renderHook5.result;
        (0, _reactNative.waitFor)(function () {
          expect(result.current.streakTrend).toBe(expected);
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJnZXRJdGVtIiwiamVzdCIsImZuIiwic2V0SXRlbSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX3JlYWN0TmF0aXZlIiwiX2FzeW5jU3RvcmFnZSIsIl91c2VBY3Rpdml0eU1ldHJpY3MiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJzcHlPbiIsIkRhdGUiLCJtb2NrUmV0dXJuVmFsdWUiLCJwcm90b3R5cGUiLCJhZnRlckVhY2giLCJyZXN0b3JlQWxsTW9ja3MiLCJpdCIsImRlZmF1bHQiLCJBc3luY1N0b3JhZ2UiLCJtb2NrUmVzb2x2ZWRWYWx1ZU9uY2UiLCJfcmVuZGVySG9vayIsInJlbmRlckhvb2siLCJ1c2VBY3Rpdml0eU1ldHJpY3MiLCJyZXN1bHQiLCJ3YWl0Rm9yIiwiZXhwZWN0IiwiY3VycmVudCIsImN1cnJlbnRTdHJlYWsiLCJ0b0JlIiwidG9kYXlNaW51dGVzIiwiZm9ybWF0dGVkVGltZSIsIm1vY2tSZXNvbHZlZFZhbHVlIiwiX3JlbmRlckhvb2syIiwiX3JlbmRlckhvb2szIiwiYWN0Iiwic3RhcnRTZXNzaW9uIiwiZW5kU2Vzc2lvbiIsInRlc3RDYXNlcyIsIm1pbnV0ZXMiLCJleHBlY3RlZCIsImZvckVhY2giLCJfcmVmNSIsInRvU3RyaW5nIiwiX3JlbmRlckhvb2s0Iiwic3RyZWFrIiwiX3JlZjYiLCJfcmVuZGVySG9vazUiLCJzdHJlYWtUcmVuZCJdLCJzb3VyY2VzIjpbInVzZUFjdGl2aXR5TWV0cmljcy50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIF9fdGVzdHNfXy9ob29rcy91c2VBY3Rpdml0eU1ldHJpY3MudGVzdC5qc1xuaW1wb3J0IHsgcmVuZGVySG9vaywgYWN0LCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IEFzeW5jU3RvcmFnZSBmcm9tICdAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZSc7XG5pbXBvcnQgdXNlQWN0aXZpdHlNZXRyaWNzIGZyb20gJy4uLy4uL3NyYy9ob29rcy91c2VBY3Rpdml0eU1ldHJpY3MnO1xuXG4vLyBNb2NrIEFzeW5jU3RvcmFnZVxuamVzdC5tb2NrKCdAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZScsICgpID0+ICh7XG4gIGdldEl0ZW06IGplc3QuZm4oKSxcbiAgc2V0SXRlbTogamVzdC5mbigpLFxufSkpO1xuXG5kZXNjcmliZSgndXNlQWN0aXZpdHlNZXRyaWNzJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICBqZXN0LnNweU9uKERhdGUsICdub3cnKS5tb2NrUmV0dXJuVmFsdWUoMTY0MDk5NTIwMDAwMCk7XG4gICAgamVzdC5zcHlPbihEYXRlLnByb3RvdHlwZSwgJ3RvRGF0ZVN0cmluZycpLm1vY2tSZXR1cm5WYWx1ZSgnU2F0IEphbiAwMSAyMDIyJyk7XG4gIH0pO1xuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgamVzdC5yZXN0b3JlQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0NoYXJnZW1lbnQgaW5pdGlhbCcsICgpID0+IHtcbiAgICBpdCgnZGV2cmFpdCBjaGFyZ2VyIGxlcyBtw6l0cmlxdWVzIGRlcHVpcyBBc3luY1N0b3JhZ2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICBBc3luY1N0b3JhZ2UuZ2V0SXRlbVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKCc1JylcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZSgnMzAnKVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKCdTYXQgSmFuIDAxIDIwMjInKTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQWN0aXZpdHlNZXRyaWNzKCkpO1xuXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmN1cnJlbnRTdHJlYWspLnRvQmUoNSk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC50b2RheU1pbnV0ZXMpLnRvQmUoMzApO1xuICAgICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZm9ybWF0dGVkVGltZSkudG9CZSgnMzBtaW4nKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldnJhaXQgdXRpbGlzZXIgZGVzIHZhbGV1cnMgcGFyIGTDqWZhdXQgc2kgYXVjdW5lIGRvbm7DqWUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBBc3luY1N0b3JhZ2UuZ2V0SXRlbS5tb2NrUmVzb2x2ZWRWYWx1ZShudWxsKTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQWN0aXZpdHlNZXRyaWNzKCkpO1xuXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmN1cnJlbnRTdHJlYWspLnRvQmUoMCk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC50b2RheU1pbnV0ZXMpLnRvQmUoMCk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5mb3JtYXR0ZWRUaW1lKS50b0JlKCcwbWluJyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0dlc3Rpb24gZGVzIHNlc3Npb25zJywgKCkgPT4ge1xuICAgIGl0KCdkZXZyYWl0IGTDqW1hcnJlciBldCB0ZXJtaW5lciB1bmUgc2Vzc2lvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIEFzeW5jU3RvcmFnZS5nZXRJdGVtLm1vY2tSZXNvbHZlZFZhbHVlKCcwJyk7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VBY3Rpdml0eU1ldHJpY3MoKSk7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQudG9kYXlNaW51dGVzKS50b0JlKDApO1xuICAgICAgfSk7XG5cbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LnN0YXJ0U2Vzc2lvbigndm9jYWJ1bGFyeScpO1xuICAgICAgfSk7XG5cbiAgICAgIGplc3Quc3B5T24oRGF0ZSwgJ25vdycpLm1vY2tSZXR1cm5WYWx1ZSgxNjQwOTk1MjAwMDAwICsgMTIwMDAwKTtcblxuICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgcmVzdWx0LmN1cnJlbnQuZW5kU2Vzc2lvbigpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC50b2RheU1pbnV0ZXMpLnRvQmUoMik7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdGb3JtYXRhZ2UgZHUgdGVtcHMnLCAoKSA9PiB7XG4gICAgaXQoJ2RldnJhaXQgZm9ybWF0ZXIgY29ycmVjdGVtZW50IGxlcyBtaW51dGVzJywgKCkgPT4ge1xuICAgICAgQXN5bmNTdG9yYWdlLmdldEl0ZW0ubW9ja1Jlc29sdmVkVmFsdWUobnVsbCk7XG4gICAgICBcbiAgICAgIGNvbnN0IHRlc3RDYXNlcyA9IFtcbiAgICAgICAgeyBtaW51dGVzOiAwLCBleHBlY3RlZDogJzBtaW4nIH0sXG4gICAgICAgIHsgbWludXRlczogMzAsIGV4cGVjdGVkOiAnMzBtaW4nIH0sXG4gICAgICAgIHsgbWludXRlczogNjAsIGV4cGVjdGVkOiAnMWgnIH0sXG4gICAgICAgIHsgbWludXRlczogOTAsIGV4cGVjdGVkOiAnMWgzMG1pbicgfVxuICAgICAgXTtcblxuICAgICAgdGVzdENhc2VzLmZvckVhY2goKHsgbWludXRlcywgZXhwZWN0ZWQgfSkgPT4ge1xuICAgICAgICBBc3luY1N0b3JhZ2UuZ2V0SXRlbVxuICAgICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoJzAnKVxuICAgICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UobWludXRlcy50b1N0cmluZygpKVxuICAgICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoJ1NhdCBKYW4gMDEgMjAyMicpO1xuXG4gICAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUFjdGl2aXR5TWV0cmljcygpKTtcbiAgICAgICAgXG4gICAgICAgIHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5mb3JtYXR0ZWRUaW1lKS50b0JlKGV4cGVjdGVkKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1RlbmRhbmNlcyBkZSBzdHJlYWsnLCAoKSA9PiB7XG4gICAgaXQoJ2RldnJhaXQgcmV0b3VybmVyIGxlcyBib25uZXMgdGVuZGFuY2VzJywgKCkgPT4ge1xuICAgICAgY29uc3QgdGVzdENhc2VzID0gW1xuICAgICAgICB7IHN0cmVhazogMCwgZXhwZWN0ZWQ6IG51bGwgfSxcbiAgICAgICAgeyBzdHJlYWs6IDEsIGV4cGVjdGVkOiAn8J+UpSBDb250aW51ZSEnIH0sXG4gICAgICAgIHsgc3RyZWFrOiAzLCBleHBlY3RlZDogJ/CfkqogRW4gZm9ybWUhJyB9LFxuICAgICAgICB7IHN0cmVhazogNywgZXhwZWN0ZWQ6ICfwn4+GIEluY3JveWFibGUhJyB9XG4gICAgICBdO1xuXG4gICAgICB0ZXN0Q2FzZXMuZm9yRWFjaCgoeyBzdHJlYWssIGV4cGVjdGVkIH0pID0+IHtcbiAgICAgICAgQXN5bmNTdG9yYWdlLmdldEl0ZW1cbiAgICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHN0cmVhay50b1N0cmluZygpKVxuICAgICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoJzAnKVxuICAgICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoJ1NhdCBKYW4gMDEgMjAyMicpO1xuXG4gICAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUFjdGl2aXR5TWV0cmljcygpKTtcbiAgICAgICAgXG4gICAgICAgIHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5zdHJlYWtUcmVuZCkudG9CZShleHBlY3RlZCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufSk7Il0sIm1hcHBpbmdzIjoiQUFNQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsMkNBQTJDLEVBQUU7RUFBQSxPQUFPO0lBQzVEQyxPQUFPLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDbEJDLE9BQU8sRUFBRUYsSUFBSSxDQUFDQyxFQUFFLENBQUM7RUFDbkIsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUFDLElBQUFFLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxrQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBUkosSUFBQUUsWUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsYUFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUksbUJBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUFvRSxTQUFBUCxZQUFBO0VBQUEsSUFBQVksUUFBQSxHQUFBTCxPQUFBO0lBQUFKLElBQUEsR0FBQVMsUUFBQSxDQUFBVCxJQUFBO0VBQUFILFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFHLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQVFwRVUsUUFBUSxDQUFDLG9CQUFvQixFQUFFLFlBQU07RUFDbkNDLFVBQVUsQ0FBQyxZQUFNO0lBQ2ZYLElBQUksQ0FBQ1ksYUFBYSxDQUFDLENBQUM7SUFDcEJaLElBQUksQ0FBQ2EsS0FBSyxDQUFDQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUNDLGVBQWUsQ0FBQyxhQUFhLENBQUM7SUFDdERmLElBQUksQ0FBQ2EsS0FBSyxDQUFDQyxJ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UUFFM0MsSUFBQXdCLFlBQUEsR0FBbUIsSUFBQXRCLHVCQUFVLEVBQUM7WUFBQSxPQUFNLElBQUFDLDJCQUFrQixFQUFDLENBQUM7VUFBQSxFQUFDO1VBQWpEQyxNQUFNLEdBQUFvQixZQUFBLENBQU5wQixNQUFNO1FBRWQsSUFBQUMsb0JBQU8sRUFBQyxZQUFNO1VBQ1pDLE1BQU0sQ0FBQ0YsTUFBTSxDQUFDRyxPQUFPLENBQUNJLGFBQWEsQ0FBQyxDQUFDRixJQUFJLENBQUNXLFFBQVEsQ0FBQztRQUNyRCxDQUFDLENBQUM7TUFDSixDQUFDLENBQUM7SUFDSixDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7RUFFRmhDLFFBQVEsQ0FBQyxxQkFBcUIsRUFBRSxZQUFNO0lBQ3BDUyxFQUFFLENBQUMsd0NBQXdDLEVBQUUsWUFBTTtNQUNqRCxJQUFNcUIsU0FBUyxHQUFHLENBQ2hCO1FBQUVPLE1BQU0sRUFBRSxDQUFDO1FBQUVMLFFBQVEsRUFBRTtNQUFLLENBQUMsRUFDN0I7UUFBRUssTUFBTSxFQUFFLENBQUM7UUFBRUwsUUFBUSxFQUFFO01BQWUsQ0FBQyxFQUN2QztRQUFFSyxNQUFNLEVBQUUsQ0FBQztRQUFFTCxRQUFRLEVBQUU7TUFBZSxDQUFDLEVBQ3ZDO1FBQUVLLE1BQU0sRUFBRSxDQUFDO1FBQUVMLFFBQVEsRUFBRTtNQUFpQixDQUFDLENBQzFDO01BRURGLFNBQVMsQ0FBQ0csT0FBTyxDQUFDLFVBQUFLLEtBQUEsRUFBMEI7UUFBQSxJQUF2QkQsTUFBTSxHQUFBQyxLQUFBLENBQU5ELE1BQU07VUFBRUwsUUFBUSxHQUFBTSxLQUFBLENBQVJOLFFBQVE7UUFDbkNyQixxQkFBWSxDQUFDdEIsT0FBTyxDQUNqQnVCLHFCQUFxQixDQUFDeUIsTUFBTSxDQUFDRixRQUFRLENBQUMsQ0FBQyxDQUFDLENBQ3hDdkIscUJBQXFCLENBQUMsR0FBRyxDQUFDLENBQzFCQSxxQkFBcUIsQ0FBQyxpQkFBaUIsQ0FBQztRQUUzQyxJQUFBMkIsWUFBQSxHQUFtQixJQUFBekIsdUJBQVUsRUFBQztZQUFBLE9BQU0sSUFBQUMsMkJBQWtCLEVBQUMsQ0FBQztVQUFBLEVBQUM7VUFBakRDLE1BQU0sR0FBQXVCLFlBQUEsQ0FBTnZCLE1BQU07UUFFZCxJQUFBQyxvQkFBTyxFQUFDLFlBQU07VUFDWkMsTUFBTSxDQUFDRixNQUFNLENBQUNHLE9BQU8sQ0FBQ3FCLFdBQVcsQ0FBQyxDQUFDbkIsSUFBSSxDQUFDVyxRQUFRLENBQUM7UUFDbkQsQ0FBQyxDQUFDO01BQ0osQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119