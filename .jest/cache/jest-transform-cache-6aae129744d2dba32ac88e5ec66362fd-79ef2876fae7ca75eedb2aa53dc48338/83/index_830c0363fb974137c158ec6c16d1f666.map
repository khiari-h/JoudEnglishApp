{"version":3,"names":["_errorCorrectionC2Full","_interopRequireDefault","require","_errorCorrectionC2Identify","_errorCorrectionC2MultipleChoice","allExercises","concat","_toConsumableArray2","default","errorCorrectionC2Full","errorCorrectionC2Identify","errorCorrectionC2MultipleChoice","sort","a","b","categoryId","typeOrder","type","errorCorrectionC2","level","totalExercises","length","statistics","full","identify","multiple_choice","byCategory","name","count","categories","id","description","exerciseCount","difficulty","color","topics","commonErrors","skillsTargeted","exercises","getExercisesByCategory","filter","exercise","getExercisesByType","getExercisesByCategoryAndType","getMasteryLevelExercises","wordCount","text","split","hasAdvancedVocab","hasSophisticatedTerms","some","term","toLowerCase","includes","getLiteraryExercises","literaryKeywords","keyword","getCulturalReferenceExercises","culturalKeywords","correctedText","getArtisticLanguageExercises","explanation","getStylisticPrecisionExercises","precisionKeywords","validateStructure","requiredFields","validTypes","every","hasRequiredFields","field","Object","prototype","hasOwnProperty","call","undefined","hasValidType","hasValidCategory","hasMasteryComplexity","hasSophisticatedVocab","hasAdvancedConcepts","hasTypeSpecificFields","choices","Array","isArray","correctChoiceIndex","choice","errorPositions","getSummary","totalErrorPositions","ex","reduce","sum","totalTextLength","masteryExercises","literaryExercises","culturalExercises","artisticExercises","focus","progression","distribution","complexity","averageTextLength","Math","round","averageWordCount","averageErrorsPerExercise","masteryExercisesPercentage","literaryFocusPercentage","culturalReferencePercentage","artisticLanguagePercentage","masteryIndicators","_default","exports"],"sources":["index.js"],"sourcesContent":["// src/data/exercises/errorCorrection/C2/index.js\r\n\r\nimport errorCorrectionC2Full from './categories/errorCorrectionC2Full';\r\nimport errorCorrectionC2Identify from './categories/errorCorrectionC2Identify';\r\nimport errorCorrectionC2MultipleChoice from './categories/errorCorrectionC2MultipleChoice';\r\n\r\n// Combine all exercises from the 3 files\r\nconst allExercises = [\r\n  ...errorCorrectionC2Full,\r\n  ...errorCorrectionC2Identify,\r\n  ...errorCorrectionC2MultipleChoice\r\n];\r\n\r\n// Sort exercises by categoryId to maintain logical order\r\nallExercises.sort((a, b) => {\r\n  if (a.categoryId !== b.categoryId) {\r\n    return a.categoryId - b.categoryId;\r\n  }\r\n  // Within same category, order by type: full, identify, multiple_choice\r\n  const typeOrder = { 'full': 1, 'identify': 2, 'multiple_choice': 3 };\r\n  return typeOrder[a.type] - typeOrder[b.type];\r\n});\r\n\r\nconst errorCorrectionC2 = {\r\n  level: \"C2\",\r\n  totalExercises: allExercises.length,\r\n\r\n  // Statistics by type\r\n  statistics: {\r\n    full: errorCorrectionC2Full.length,\r\n    identify: errorCorrectionC2Identify.length,\r\n    multiple_choice: errorCorrectionC2MultipleChoice.length,\r\n    byCategory: {\r\n      1: { name: \"Literary & Artistic Language\", count: 12 },    // 4 full + 5 identify + 3 multiple_choice\r\n      2: { name: \"Sophisticated Rhetoric\", count: 10 },         // 4 full + 4 identify + 2 multiple_choice\r\n      3: { name: \"Linguistic Mastery\", count: 10 },             // 4 full + 4 identify + 2 multiple_choice\r\n      4: { name: \"Cultural Expertise\", count: 11 },             // 4 full + 5 identify + 2 multiple_choice\r\n      5: { name: \"Advanced Stylistics\", count: 11 }             // 4 full + 4 identify + 3 multiple_choice\r\n    }\r\n  },\r\n\r\n  // Categories metadata for C2 mastery level\r\n  categories: [\r\n    {\r\n      id: 1,\r\n      name: \"Literary & Artistic Language\",\r\n      description: \"Literary devices, aesthetic expression, artistic language mastery\",\r\n      exerciseCount: 12,\r\n      difficulty: \"Mastery\",\r\n      color: \"#3b82f6\",\r\n      topics: [\"literary devices\", \"aesthetic expression\", \"artistic language\", \"poetic structures\", \"literary analysis\", \"prosody\"],\r\n      commonErrors: [\"unnecessary articles\", \"redundant modifiers\", \"overly formal language\", \"redundant literary terms\"],\r\n      skillsTargeted: [\"literary sophistication\", \"aesthetic sensitivity\", \"artistic expression\", \"cultural literacy\", \"poetic awareness\"]\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"Sophisticated Rhetoric\",\r\n      description: \"Advanced rhetorical mastery, persuasive excellence, oratory sophistication\",\r\n      exerciseCount: 10,\r\n      difficulty: \"Mastery\",\r\n      color: \"#10b981\",\r\n      topics: [\"rhetorical mastery\", \"persuasive excellence\", \"dialectical reasoning\", \"oratory sophistication\", \"argumentative artistry\"],\r\n      commonErrors: [\"wordy constructions\", \"unnecessary formality\", \"redundant phrases\", \"weak intensifiers\"],\r\n      skillsTargeted: [\"rhetorical mastery\", \"persuasive artistry\", \"oratorical excellence\", \"argumentative sophistication\", \"dialectical thinking\"]\r\n    },\r\n    {\r\n      id: 3,\r\n      name: \"Linguistic Mastery\",\r\n      description: \"Perfect command of language, semantic precision, lexical sophistication\",\r\n      exerciseCount: 10,\r\n      difficulty: \"Mastery\",\r\n      color: \"#f59e0b\",\r\n      topics: [\"semantic mastery\", \"lexical precision\", \"linguistic sophistication\", \"perfect command\", \"stylistic finesse\"],\r\n      commonErrors: [\"redundant modifiers\", \"imprecise vocabulary\", \"unnecessary intensifiers\", \"wordy expressions\"],\r\n      skillsTargeted: [\"linguistic perfection\", \"semantic precision\", \"lexical mastery\", \"expressive excellence\", \"linguistic artistry\"]\r\n    },\r\n    {\r\n      id: 4,\r\n      name: \"Cultural Expertise\",\r\n      description: \"Deep cultural knowledge, literary references, mythological sophistication\",\r\n      exerciseCount: 11,\r\n      difficulty: \"Mastery\",\r\n      color: \"#8b5cf6\",\r\n      topics: [\"cultural mastery\", \"literary allusions\", \"mythological references\", \"cross-cultural competence\", \"archetypal understanding\"],\r\n      commonErrors: [\"unnecessary elaboration\", \"redundant cultural markers\", \"over-explanation\", \"wordy constructions\"],\r\n      skillsTargeted: [\"cultural expertise\", \"literary knowledge\", \"cultural sophistication\", \"intellectual breadth\", \"mythological literacy\"]\r\n    },\r\n    {\r\n      id: 5,\r\n      name: \"Advanced Stylistics\",\r\n      description: \"Stylistic mastery, register perfection, expressive sophistication\",\r\n      exerciseCount: 11,\r\n      difficulty: \"Mastery\",\r\n      color: \"#ef4444\",\r\n      topics: [\"stylistic mastery\", \"register perfection\", \"expressive sophistication\", \"artistic communication\", \"linguistic modulation\"],\r\n      commonErrors: [\"redundant specifications\", \"unnecessary intensifiers\", \"overly complex constructions\", \"lack of economy\"],\r\n      skillsTargeted: [\"stylistic excellence\", \"expressive mastery\", \"communicative artistry\", \"linguistic elegance\", \"expressive economy\"]\r\n    }\r\n  ],\r\n\r\n  // All exercises combined and sorted\r\n  exercises: allExercises,\r\n\r\n  // Master-level helper methods for C2\r\n  getExercisesByCategory: (categoryId) => {\r\n    return allExercises.filter(exercise => exercise.categoryId === categoryId);\r\n  },\r\n\r\n  getExercisesByType: (type) => {\r\n    return allExercises.filter(exercise => exercise.type === type);\r\n  },\r\n\r\n  getExercisesByCategoryAndType: (categoryId, type) => {\r\n    return allExercises.filter(exercise => \r\n      exercise.categoryId === categoryId && exercise.type === type\r\n    );\r\n  },\r\n\r\n  // Get exercises for mastery-level skills\r\n  getMasteryLevelExercises: () => {\r\n    return allExercises.filter(exercise => {\r\n      const wordCount = exercise.text.split(' ').length;\r\n      const hasAdvancedVocab = exercise.text.length > 120;\r\n      const hasSophisticatedTerms = ['literary', 'rhetorical', 'aesthetic', 'linguistic', 'cultural']\r\n        .some(term => exercise.text.toLowerCase().includes(term));\r\n      return wordCount >= 18 && hasAdvancedVocab && hasSophisticatedTerms;\r\n    });\r\n  },\r\n\r\n  // Get exercises with literary and cultural references\r\n  getLiteraryExercises: () => {\r\n    return allExercises.filter(exercise => {\r\n      const literaryKeywords = ['literary', 'poet', 'novelist', 'prose', 'rhetoric', 'aesthetic', 'artistic'];\r\n      return literaryKeywords.some(keyword => \r\n        exercise.text.toLowerCase().includes(keyword)\r\n      );\r\n    });\r\n  },\r\n\r\n  getCulturalReferenceExercises: () => {\r\n    return allExercises.filter(exercise => {\r\n      const culturalKeywords = ['Kafkaesque', 'quixotic', 'Faustian', 'Prometheus', 'Pandora', 'archetypal', 'mythological'];\r\n      return culturalKeywords.some(keyword => \r\n        exercise.text.includes(keyword) || exercise.correctedText.includes(keyword)\r\n      );\r\n    });\r\n  },\r\n\r\n  // Get exercises focusing on linguistic artistry\r\n  getArtisticLanguageExercises: () => {\r\n    return allExercises.filter(exercise => {\r\n      return exercise.categoryId === 1 || exercise.categoryId === 5 ||\r\n             exercise.explanation.toLowerCase().includes('artistic') ||\r\n             exercise.explanation.toLowerCase().includes('sophisticated');\r\n    });\r\n  },\r\n\r\n  // Get exercises for stylistic precision\r\n  getStylisticPrecisionExercises: () => {\r\n    return allExercises.filter(exercise => {\r\n      const precisionKeywords = ['redundant', 'unnecessary', 'elegant', 'sophisticated', 'precise'];\r\n      return precisionKeywords.some(keyword => \r\n        exercise.explanation.toLowerCase().includes(keyword)\r\n      );\r\n    });\r\n  },\r\n\r\n  // Ultimate validation for C2 mastery level\r\n  validateStructure: () => {\r\n    const requiredFields = ['categoryId', 'type', 'text', 'correctedText', 'hint', 'explanation'];\r\n    const validTypes = ['full', 'identify', 'multiple_choice'];\r\n\r\n    return allExercises.every(exercise => {\r\n      // Check required fields\r\n      const hasRequiredFields = requiredFields.every(field => \r\n        Object.prototype.hasOwnProperty.call(exercise, field) && exercise[field] !== undefined\r\n      );\r\n\r\n      // Check valid type\r\n      const hasValidType = validTypes.includes(exercise.type);\r\n\r\n      // Check valid category (1-5 for C2)\r\n      const hasValidCategory = exercise.categoryId >= 1 && exercise.categoryId <= 5;\r\n\r\n      // Check C2 mastery level complexity\r\n      const hasMasteryComplexity = exercise.text.split(' ').length >= 15;\r\n      const hasSophisticatedVocab = exercise.text.length > 100;\r\n      const hasAdvancedConcepts = exercise.explanation.length > 50; // Detailed explanations\r\n\r\n      // Check type-specific fields with C2 mastery standards\r\n      let hasTypeSpecificFields = true;\r\n      if (exercise.type === 'multiple_choice') {\r\n        hasTypeSpecificFields = exercise.choices && \r\n                               Array.isArray(exercise.choices) &&\r\n                               exercise.choices.length === 4 && // C2 should have exactly 4 sophisticated choices\r\n                               exercise.correctChoiceIndex !== undefined &&\r\n                               exercise.correctChoiceIndex >= 0 &&\r\n                               exercise.correctChoiceIndex < exercise.choices.length &&\r\n                               exercise.choices.every(choice => choice.length > 3); // Sophisticated vocabulary\r\n      } else {\r\n        hasTypeSpecificFields = exercise.errorPositions && Array.isArray(exercise.errorPositions);\r\n      }\r\n\r\n      return hasRequiredFields && hasValidType && hasValidCategory && \r\n             hasMasteryComplexity && hasSophisticatedVocab && hasAdvancedConcepts && hasTypeSpecificFields;\r\n    });\r\n  },\r\n\r\n  // Comprehensive C2 mastery summary with ultimate metrics\r\n  getSummary: () => {\r\n    const totalErrorPositions = allExercises\r\n      .filter(ex => ex.errorPositions)\r\n      .reduce((sum, ex) => sum + ex.errorPositions.length, 0);\r\n\r\n    const totalTextLength = allExercises.reduce((sum, ex) => sum + ex.text.length, 0);\r\n    const masteryExercises = errorCorrectionC2.getMasteryLevelExercises().length;\r\n    const literaryExercises = errorCorrectionC2.getLiteraryExercises().length;\r\n    const culturalExercises = errorCorrectionC2.getCulturalReferenceExercises().length;\r\n    const artisticExercises = errorCorrectionC2.getArtisticLanguageExercises().length;\r\n\r\n    return {\r\n      level: \"C2\",\r\n      totalExercises: allExercises.length,\r\n      categories: errorCorrectionC2.categories.length,\r\n      difficulty: \"Mastery\",\r\n      focus: \"Perfect linguistic command, literary sophistication, cultural expertise, artistic expression\",\r\n      progression: \"Ultimate mastery: native-speaker level precision with artistic and cultural sophistication\",\r\n      distribution: {\r\n        full: errorCorrectionC2Full.length,\r\n        identify: errorCorrectionC2Identify.length,\r\n        multiple_choice: errorCorrectionC2MultipleChoice.length\r\n      },\r\n      complexity: {\r\n        averageTextLength: Math.round(totalTextLength / allExercises.length),\r\n        averageWordCount: Math.round(allExercises.reduce((sum, ex) => sum + ex.text.split(' ').length, 0) / allExercises.length),\r\n        totalErrorPositions,\r\n        averageErrorsPerExercise: Math.round(totalErrorPositions / allExercises.filter(ex => ex.errorPositions).length * 10) / 10,\r\n        masteryExercisesPercentage: Math.round((masteryExercises / allExercises.length) * 100),\r\n        literaryFocusPercentage: Math.round((literaryExercises / allExercises.length) * 100),\r\n        culturalReferencePercentage: Math.round((culturalExercises / allExercises.length) * 100),\r\n        artisticLanguagePercentage: Math.round((artisticExercises / allExercises.length) * 100)\r\n      },\r\n      masteryIndicators: [\r\n        \"Perfect linguistic precision\",\r\n        \"Literary and artistic sophistication\", \r\n        \"Advanced cultural competence\",\r\n        \"Stylistic and rhetorical mastery\",\r\n        \"Semantic and expressive perfection\"\r\n      ],\r\n      skillsTargeted: [\r\n        \"Perfect linguistic mastery\",\r\n        \"Literary and artistic sophistication\",\r\n        \"Advanced cultural competence\",\r\n        \"Stylistic and rhetorical excellence\",\r\n        \"Semantic and expressive precision\",\r\n        \"Communicative artistry\",\r\n        \"Linguistic elegance\"\r\n      ]\r\n    };\r\n  }\r\n};\r\n\r\n// Validate structure on export\r\nif (!errorCorrectionC2.validateStructure()) {\r\n  // empty: structure invalid, handle if needed\r\n} else {\r\n  // empty: structure valid, nothing to do\r\n}\r\n\r\nexport default errorCorrectionC2;\r\n"],"mappings":"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","ignoreList":[]}