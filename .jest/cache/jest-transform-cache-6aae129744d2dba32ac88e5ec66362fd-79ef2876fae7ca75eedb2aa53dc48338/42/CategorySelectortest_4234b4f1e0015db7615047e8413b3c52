7b953048d37e0a4226af731b592ea93f
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  return Object.assign({}, RN, {
    Animated: Object.assign({}, RN.Animated, {
      Value: MockAnimatedValue,
      timing: mockTiming,
      parallel: mockParallel,
      multiply: mockMultiply,
      View: RN.Animated.View
    }),
    ScrollView: RN.ScrollView,
    TouchableOpacity: RN.TouchableOpacity,
    Text: RN.Text,
    View: RN.View
  });
});
_getJestObj().mock('expo-linear-gradient', function () {
  return {
    LinearGradient: function LinearGradient(_ref) {
      var children = _ref.children,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      var _require = require('react-native'),
        View = _require.View;
      return (0, _jsxRuntime.jsx)(View, Object.assign({
        testID: "linear-gradient"
      }, props, {
        children: children
      }));
    }
  };
});
_getJestObj().mock('../../../src/components/exercise-common/CategorySelector/style', function () {
  var _require2 = require('react-native'),
    StyleSheet = _require2.StyleSheet;
  return function () {
    return StyleSheet.create({
      container: {},
      backgroundGradient: {},
      scrollView: {},
      scrollContent: {},
      categoryItemWrapper: {},
      categoryTouchable: {},
      selectedCategoryItem: {},
      selectedInner: {},
      selectedCategoryText: {
        color: '#FFFFFF'
      },
      sparkleContainer: {},
      sparkle: {},
      categoryItem: {},
      categoryInner: {},
      categoryText: {}
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _CategorySelector = _interopRequireWildcard(require("../../../src/components/exercise-common/CategorySelector"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockStart = jest.fn(function (callback) {
  if (callback) {
    setImmediate(function () {
      (0, _reactNative.act)(function () {
        callback();
      });
    });
  }
});
var mockTiming = jest.fn(function () {
  return {
    start: mockStart
  };
});
var mockParallel = jest.fn(function () {
  return {
    start: mockStart
  };
});
var mockMultiply = jest.fn(function () {
  return {
    interpolate: jest.fn(function () {
      return 1;
    })
  };
});
var MockAnimatedValue = jest.fn().mockImplementation(function (initialValue) {
  var mockValue = {
    interpolate: jest.fn(function (config) {
      return config.outputRange[initialValue];
    }),
    _value: initialValue
  };
  return mockValue;
});
describe('CategorySelector', function () {
  var categories = [{
    id: '1',
    name: 'Grammar'
  }, {
    id: '2',
    name: 'Vocabulary'
  }, {
    id: '3',
    name: 'Reading'
  }];
  beforeEach(function () {
    jest.clearAllMocks();
    MockAnimatedValue.mockClear();
    mockTiming.mockClear();
    mockParallel.mockClear();
    mockStart.mockClear();
    mockMultiply.mockClear();
  });
  describe('Basic rendering', function () {
    it('should render all categories correctly', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          onSelectCategory: function onSelectCategory() {}
        })),
        getByText = _render.getByText;
      expect(getByText('Grammar')).toBeTruthy();
      expect(getByText('Vocabulary')).toBeTruthy();
      expect(getByText('Reading')).toBeTruthy();
    });
    it('should display sparkle for selected category', function () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: function onSelectCategory() {}
        })),
        getByText = _render2.getByText;
      expect(getByText('âœ¨')).toBeTruthy();
    });
  });
  describe('User interactions', function () {
    it('should call onSelectCategory when category is pressed', (0, _asyncToGenerator2.default)(function* () {
      var onSelectCategory = jest.fn();
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          onSelectCategory: onSelectCategory
        })),
        getByText = _render3.getByText;
      _reactNative.fireEvent.press(getByText('Vocabulary'));
      yield (0, _reactNative.waitFor)(function () {
        expect(onSelectCategory).toHaveBeenCalledWith('2');
      });
    }));
    it('should not call onSelectCategory for already selected category', function () {
      var onSelectCategory = jest.fn();
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        })),
        getByText = _render4.getByText;
      _reactNative.fireEvent.press(getByText('Grammar'));
      expect(onSelectCategory).not.toHaveBeenCalled();
    });
  });
  describe('Animations', function () {
    it('should trigger parallel animations when selectedCategory changes', (0, _asyncToGenerator2.default)(function* () {
      var onSelectCategory = jest.fn();
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        })),
        rerender = _render5.rerender;
      mockTiming.mockClear();
      mockParallel.mockClear();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "2",
          onSelectCategory: onSelectCategory
        }));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockParallel).toHaveBeenCalledTimes(1);
        expect(mockTiming).toHaveBeenCalledTimes(2);
      });
    }));
    it('should prevent animation conflicts with isAnimatingRef', (0, _asyncToGenerator2.default)(function* () {
      var onSelectCategory = jest.fn();
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        })),
        rerender = _render6.rerender,
        getByText = _render6.getByText;
      mockParallel.mockClear();
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "2",
        onSelectCategory: onSelectCategory
      }));
      rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
        categories: categories,
        selectedCategory: "3",
        onSelectCategory: onSelectCategory
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockParallel).toHaveBeenCalledTimes(1);
      });
      expect(mockParallel).toHaveBeenCalledTimes(1);
    }));
  });
  describe('Dynamic category management', function () {
    it('should handle category addition without crashing', (0, _asyncToGenerator2.default)(function* () {
      var onSelectCategory = jest.fn();
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        })),
        rerender = _render7.rerender;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: [].concat(categories, [{
            id: '4',
            name: 'Writing'
          }]),
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        }));
      }));
      expect(function () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: [].concat(categories, [{
            id: '4',
            name: 'Writing'
          }]),
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        }));
      }).not.toThrow();
    }));
    it('should handle category removal without crashing', (0, _asyncToGenerator2.default)(function* () {
      var onSelectCategory = jest.fn();
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: categories,
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        })),
        rerender = _render8.rerender;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: [categories[0]],
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        }));
      }));
      expect(function () {
        rerender((0, _jsxRuntime.jsx)(_CategorySelector.default, {
          categories: [categories[0]],
          selectedCategory: "1",
          onSelectCategory: onSelectCategory
        }));
      }).not.toThrow();
    }));
  });
  describe('areEqual memoization', function () {
    it('should return true for identical props', function () {
      var props = {
        selectedCategory: '1',
        primaryColor: '#000',
        categories: [{
          id: '1',
          name: 'Cat1'
        }]
      };
      expect((0, _CategorySelector.areEqual)(props, props)).toBe(true);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJSTiIsImplc3QiLCJyZXF1aXJlQWN0dWFsIiwiT2JqZWN0IiwiYXNzaWduIiwiQW5pbWF0ZWQiLCJWYWx1ZSIsIk1vY2tBbmltYXRlZFZhbHVlIiwidGltaW5nIiwibW9ja1RpbWluZyIsInBhcmFsbGVsIiwibW9ja1BhcmFsbGVsIiwibXVsdGlwbHkiLCJtb2NrTXVsdGlwbHkiLCJWaWV3IiwiU2Nyb2xsVmlldyIsIlRvdWNoYWJsZU9wYWNpdHkiLCJUZXh0IiwiTGluZWFyR3JhZGllbnQiLCJfcmVmIiwiY2hpbGRyZW4iLCJwcm9wcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllczIiLCJkZWZhdWx0IiwiX2V4Y2x1ZGVkIiwiX3JlcXVpcmUiLCJyZXF1aXJlIiwiX2pzeFJ1bnRpbWUiLCJqc3giLCJ0ZXN0SUQiLCJfcmVxdWlyZTIiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiY29udGFpbmVyIiwiYmFja2dyb3VuZEdyYWRpZW50Iiwic2Nyb2xsVmlldyIsInNjcm9sbENvbnRlbnQiLCJjYXRlZ29yeUl0ZW1XcmFwcGVyIiwiY2F0ZWdvcnlUb3VjaGFibGUiLCJzZWxlY3RlZENhdGVnb3J5SXRlbSIsInNlbGVjdGVkSW5uZXIiLCJzZWxlY3RlZENhdGVnb3J5VGV4dCIsImNvbG9yIiwic3BhcmtsZUNvbnRhaW5lciIsInNwYXJrbGUiLCJjYXRlZ29yeUl0ZW0iLCJjYXRlZ29yeUlubmVyIiwiY2F0ZWdvcnlUZXh0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9DYXRlZ29yeVNlbGVjdG9yIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJoYXMiLCJnZXQiLCJzZXQiLCJfdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX3JlcXVpcmUzIiwibW9ja1N0YXJ0IiwiZm4iLCJjYWxsYmFjayIsInNldEltbWVkaWF0ZSIsImFjdCIsInN0YXJ0IiwiaW50ZXJwb2xhdGUiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJpbml0aWFsVmFsdWUiLCJtb2NrVmFsdWUiLCJjb25maWciLCJvdXRwdXRSYW5nZSIsIl92YWx1ZSIsImRlc2NyaWJlIiwiY2F0ZWdvcmllcyIsImlkIiwibmFtZSIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwibW9ja0NsZWFyIiwiaXQiLCJfcmVuZGVyIiwicmVuZGVyIiwib25TZWxlY3RDYXRlZ29yeSIsImdldEJ5VGV4dCIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJfcmVuZGVyMiIsInNlbGVjdGVkQ2F0ZWdvcnkiLCJfcmVuZGVyMyIsImZpcmVFdmVudCIsInByZXNzIiwid2FpdEZvciIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiX3JlbmRlcjQiLCJub3QiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwiX3JlbmRlcjUiLCJyZXJlbmRlciIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsIl9yZW5kZXI2IiwiX3JlbmRlcjciLCJjb25jYXQiLCJ0b1Rocm93IiwiX3JlbmRlcjgiLCJwcmltYXJ5Q29sb3IiLCJhcmVFcXVhbCIsInRvQmUiXSwic291cmNlcyI6WyJDYXRlZ29yeVNlbGVjdG9yLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gX190ZXN0c19fL2NvbXBvbmVudHMvZXhlcmNpc2UtY29tbW9uL0NhdGVnb3J5U2VsZWN0b3IudGVzdC5qc1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCBhY3QsIHdhaXRGb3IgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgQ2F0ZWdvcnlTZWxlY3RvciwgeyBhcmVFcXVhbCB9IGZyb20gJy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2V4ZXJjaXNlLWNvbW1vbi9DYXRlZ29yeVNlbGVjdG9yJztcblxuLy8g8J+UpSBNb2NrcyBvcHRpbWlzw6lzIHBvdXIgbGEgbm91dmVsbGUgdmVyc2lvblxuY29uc3QgbW9ja1N0YXJ0ID0gamVzdC5mbigoY2FsbGJhY2spID0+IHtcbiAgLy8gRXjDqWN1dGlvbiBzeW5jaHJvbmUgcG91ciBsZXMgdGVzdHNcbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgc2V0SW1tZWRpYXRlKCgpID0+IHtcbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbmNvbnN0IG1vY2tUaW1pbmcgPSBqZXN0LmZuKCgpID0+ICh7IHN0YXJ0OiBtb2NrU3RhcnQgfSkpO1xuY29uc3QgbW9ja1BhcmFsbGVsID0gamVzdC5mbigoKSA9PiAoeyBzdGFydDogbW9ja1N0YXJ0IH0pKTtcbmNvbnN0IG1vY2tNdWx0aXBseSA9IGplc3QuZm4oKCkgPT4gKHsgaW50ZXJwb2xhdGU6IGplc3QuZm4oKCkgPT4gMSkgfSkpO1xuXG5jb25zdCBNb2NrQW5pbWF0ZWRWYWx1ZSA9IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKGluaXRpYWxWYWx1ZSkgPT4ge1xuICBjb25zdCBtb2NrVmFsdWUgPSB7XG4gICAgaW50ZXJwb2xhdGU6IGplc3QuZm4oKGNvbmZpZykgPT4ge1xuICAgICAgcmV0dXJuIGNvbmZpZy5vdXRwdXRSYW5nZVtpbml0aWFsVmFsdWVdO1xuICAgIH0pLFxuICAgIF92YWx1ZTogaW5pdGlhbFZhbHVlLFxuICB9O1xuICByZXR1cm4gbW9ja1ZhbHVlO1xufSk7XG5cbmplc3QubW9jaygncmVhY3QtbmF0aXZlJywgKCkgPT4ge1xuICBjb25zdCBSTiA9IGplc3QucmVxdWlyZUFjdHVhbCgncmVhY3QtbmF0aXZlJyk7XG4gIHJldHVybiB7XG4gICAgLi4uUk4sXG4gICAgQW5pbWF0ZWQ6IHtcbiAgICAgIC4uLlJOLkFuaW1hdGVkLFxuICAgICAgVmFsdWU6IE1vY2tBbmltYXRlZFZhbHVlLFxuICAgICAgdGltaW5nOiBtb2NrVGltaW5nLFxuICAgICAgcGFyYWxsZWw6IG1vY2tQYXJhbGxlbCxcbiAgICAgIG11bHRpcGx5OiBtb2NrTXVsdGlwbHksXG4gICAgICBWaWV3OiBSTi5BbmltYXRlZC5WaWV3LCAvLyBVdGlsaXNlciBSTi5BbmltYXRlZC5WaWV3IHBvdXIgbGEgY29tcGF0aWJpbGl0w6lcbiAgICB9LFxuICAgIFNjcm9sbFZpZXc6IFJOLlNjcm9sbFZpZXcsXG4gICAgVG91Y2hhYmxlT3BhY2l0eTogUk4uVG91Y2hhYmxlT3BhY2l0eSxcbiAgICBUZXh0OiBSTi5UZXh0LFxuICAgIFZpZXc6IFJOLlZpZXcsXG4gIH07XG59KTtcblxuamVzdC5tb2NrKCdleHBvLWxpbmVhci1ncmFkaWVudCcsICgpID0+ICh7XG4gIExpbmVhckdyYWRpZW50OiAoeyBjaGlsZHJlbiwgLi4ucHJvcHMgfSkgPT4ge1xuICAgIGNvbnN0IHsgVmlldyB9ID0gcmVxdWlyZSgncmVhY3QtbmF0aXZlJyk7XG4gICAgcmV0dXJuIDxWaWV3IHRlc3RJRD1cImxpbmVhci1ncmFkaWVudFwiIHsuLi5wcm9wc30+e2NoaWxkcmVufTwvVmlldz47XG4gIH0sXG59KSk7XG5cbmplc3QubW9jaygnLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvZXhlcmNpc2UtY29tbW9uL0NhdGVnb3J5U2VsZWN0b3Ivc3R5bGUnLCAoKSA9PiB7XG4gIGNvbnN0IHsgU3R5bGVTaGVldCB9ID0gcmVxdWlyZSgncmVhY3QtbmF0aXZlJyk7XG4gIHJldHVybiAoKSA9PiBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gICAgY29udGFpbmVyOiB7fSxcbiAgICBiYWNrZ3JvdW5kR3JhZGllbnQ6IHt9LFxuICAgIHNjcm9sbFZpZXc6IHt9LFxuICAgIHNjcm9sbENvbnRlbnQ6IHt9LFxuICAgIGNhdGVnb3J5SXRlbVdyYXBwZXI6IHt9LFxuICAgIGNhdGVnb3J5VG91Y2hhYmxlOiB7fSxcbiAgICBzZWxlY3RlZENhdGVnb3J5SXRlbToge30sXG4gICAgc2VsZWN0ZWRJbm5lcjoge30sXG4gICAgc2VsZWN0ZWRDYXRlZ29yeVRleHQ6IHsgY29sb3I6ICcjRkZGRkZGJyB9LFxuICAgIHNwYXJrbGVDb250YWluZXI6IHt9LFxuICAgIHNwYXJrbGU6IHt9LFxuICAgIGNhdGVnb3J5SXRlbToge30sXG4gICAgY2F0ZWdvcnlJbm5lcjoge30sXG4gICAgY2F0ZWdvcnlUZXh0OiB7fSxcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ0NhdGVnb3J5U2VsZWN0b3InLCAoKSA9PiB7XG4gIGNvbnN0IGNhdGVnb3JpZXMgPSBbXG4gICAgeyBpZDogJzEnLCBuYW1lOiAnR3JhbW1hcicgfSxcbiAgICB7IGlkOiAnMicsIG5hbWU6ICdWb2NhYnVsYXJ5JyB9LFxuICAgIHsgaWQ6ICczJywgbmFtZTogJ1JlYWRpbmcnIH0sXG4gIF07XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gICAgTW9ja0FuaW1hdGVkVmFsdWUubW9ja0NsZWFyKCk7XG4gICAgbW9ja1RpbWluZy5tb2NrQ2xlYXIoKTtcbiAgICBtb2NrUGFyYWxsZWwubW9ja0NsZWFyKCk7XG4gICAgbW9ja1N0YXJ0Lm1vY2tDbGVhcigpO1xuICAgIG1vY2tNdWx0aXBseS5tb2NrQ2xlYXIoKTtcbiAgfSk7XG5cbiAgLy8g4pyFIFRlc3RzIGRlIGJhc2VcbiAgZGVzY3JpYmUoJ0Jhc2ljIHJlbmRlcmluZycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJlbmRlciBhbGwgY2F0ZWdvcmllcyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgICA8Q2F0ZWdvcnlTZWxlY3RvciBcbiAgICAgICAgICBjYXRlZ29yaWVzPXtjYXRlZ29yaWVzfSBcbiAgICAgICAgICBvblNlbGVjdENhdGVnb3J5PXsoKSA9PiB7fX1cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgICBleHBlY3QoZ2V0QnlUZXh0KCdHcmFtbWFyJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgIGV4cGVjdChnZXRCeVRleHQoJ1ZvY2FidWxhcnknKSkudG9CZVRydXRoeSgpO1xuICAgICAgZXhwZWN0KGdldEJ5VGV4dCgnUmVhZGluZycpKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGRpc3BsYXkgc3BhcmtsZSBmb3Igc2VsZWN0ZWQgY2F0ZWdvcnknLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgICA8Q2F0ZWdvcnlTZWxlY3RvclxuICAgICAgICAgIGNhdGVnb3JpZXM9e2NhdGVnb3JpZXN9XG4gICAgICAgICAgc2VsZWN0ZWRDYXRlZ29yeT1cIjFcIlxuICAgICAgICAgIG9uU2VsZWN0Q2F0ZWdvcnk9eygpID0+IHt9fVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICAgIGV4cGVjdChnZXRCeVRleHQoJ+KcqCcpKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIPCflKUgVGVzdHMgZCdpbnRlcmFjdGlvbiB1dGlsaXNhdGV1clxuICBkZXNjcmliZSgnVXNlciBpbnRlcmFjdGlvbnMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBjYWxsIG9uU2VsZWN0Q2F0ZWdvcnkgd2hlbiBjYXRlZ29yeSBpcyBwcmVzc2VkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgb25TZWxlY3RDYXRlZ29yeSA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICAgIDxDYXRlZ29yeVNlbGVjdG9yXG4gICAgICAgICAgY2F0ZWdvcmllcz17Y2F0ZWdvcmllc31cbiAgICAgICAgICBvblNlbGVjdENhdGVnb3J5PXtvblNlbGVjdENhdGVnb3J5fVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ1ZvY2FidWxhcnknKSk7XG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KG9uU2VsZWN0Q2F0ZWdvcnkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcyJyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbm90IGNhbGwgb25TZWxlY3RDYXRlZ29yeSBmb3IgYWxyZWFkeSBzZWxlY3RlZCBjYXRlZ29yeScsICgpID0+IHtcbiAgICAgIGNvbnN0IG9uU2VsZWN0Q2F0ZWdvcnkgPSBqZXN0LmZuKCk7XG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgICA8Q2F0ZWdvcnlTZWxlY3RvclxuICAgICAgICAgIGNhdGVnb3JpZXM9e2NhdGVnb3JpZXN9XG4gICAgICAgICAgc2VsZWN0ZWRDYXRlZ29yeT1cIjFcIlxuICAgICAgICAgIG9uU2VsZWN0Q2F0ZWdvcnk9e29uU2VsZWN0Q2F0ZWdvcnl9XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgnR3JhbW1hcicpKTtcbiAgICAgIGV4cGVjdChvblNlbGVjdENhdGVnb3J5KS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyDwn46vIFRlc3RzIGQnYW5pbWF0aW9uc1xuICBkZXNjcmliZSgnQW5pbWF0aW9ucycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHRyaWdnZXIgcGFyYWxsZWwgYW5pbWF0aW9ucyB3aGVuIHNlbGVjdGVkQ2F0ZWdvcnkgY2hhbmdlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG9uU2VsZWN0Q2F0ZWdvcnkgPSBqZXN0LmZuKCk7XG4gICAgICBjb25zdCB7IHJlcmVuZGVyIH0gPSByZW5kZXIoXG4gICAgICAgIDxDYXRlZ29yeVNlbGVjdG9yXG4gICAgICAgICAgY2F0ZWdvcmllcz17Y2F0ZWdvcmllc31cbiAgICAgICAgICBzZWxlY3RlZENhdGVnb3J5PVwiMVwiXG4gICAgICAgICAgb25TZWxlY3RDYXRlZ29yeT17b25TZWxlY3RDYXRlZ29yeX1cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgICBtb2NrVGltaW5nLm1vY2tDbGVhcigpO1xuICAgICAgbW9ja1BhcmFsbGVsLm1vY2tDbGVhcigpO1xuICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgcmVyZW5kZXIoXG4gICAgICAgICAgPENhdGVnb3J5U2VsZWN0b3JcbiAgICAgICAgICAgIGNhdGVnb3JpZXM9e2NhdGVnb3JpZXN9XG4gICAgICAgICAgICBzZWxlY3RlZENhdGVnb3J5PVwiMlwiXG4gICAgICAgICAgICBvblNlbGVjdENhdGVnb3J5PXtvblNlbGVjdENhdGVnb3J5fVxuICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QobW9ja1BhcmFsbGVsKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgICAgIGV4cGVjdChtb2NrVGltaW5nKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMik7IC8vIETDqXPDqWxlY3Rpb24gKyBTw6lsZWN0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcHJldmVudCBhbmltYXRpb24gY29uZmxpY3RzIHdpdGggaXNBbmltYXRpbmdSZWYnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBvblNlbGVjdENhdGVnb3J5ID0gamVzdC5mbigpO1xuICAgICAgY29uc3QgeyByZXJlbmRlciwgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICAgIDxDYXRlZ29yeVNlbGVjdG9yXG4gICAgICAgICAgY2F0ZWdvcmllcz17Y2F0ZWdvcmllc31cbiAgICAgICAgICBzZWxlY3RlZENhdGVnb3J5PVwiMVwiXG4gICAgICAgICAgb25TZWxlY3RDYXRlZ29yeT17b25TZWxlY3RDYXRlZ29yeX1cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgICBtb2NrUGFyYWxsZWwubW9ja0NsZWFyKCk7XG4gICAgICAvLyBQcmVtaWVyIGNoYW5nZW1lbnQgKGTDqWNsZW5jaGUgdW5lIGFuaW1hdGlvbilcbiAgICAgIHJlcmVuZGVyKFxuICAgICAgICA8Q2F0ZWdvcnlTZWxlY3RvclxuICAgICAgICAgIGNhdGVnb3JpZXM9e2NhdGVnb3JpZXN9XG4gICAgICAgICAgc2VsZWN0ZWRDYXRlZ29yeT1cIjJcIlxuICAgICAgICAgIG9uU2VsZWN0Q2F0ZWdvcnk9e29uU2VsZWN0Q2F0ZWdvcnl9XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgICAgLy8gRGV1eGnDqG1lIGNoYW5nZW1lbnQgdHLDqHMgcmFwaWRlIChkZXZyYWl0IMOqdHJlIGJsb3F1w6kpXG4gICAgICByZXJlbmRlcihcbiAgICAgICAgPENhdGVnb3J5U2VsZWN0b3JcbiAgICAgICAgICBjYXRlZ29yaWVzPXtjYXRlZ29yaWVzfVxuICAgICAgICAgIHNlbGVjdGVkQ2F0ZWdvcnk9XCIzXCJcbiAgICAgICAgICBvblNlbGVjdENhdGVnb3J5PXtvblNlbGVjdENhdGVnb3J5fVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICAgIC8vIEF0dGVuZHJlIGxhIGZpbiBkZSBsYSBwcmVtacOocmUgYW5pbWF0aW9uXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KG1vY2tQYXJhbGxlbCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgICAgfSk7XG4gICAgICAvLyBMZSBkZXV4acOobWUgYXBwZWwgbidhIHBhcyBkw6ljbGVuY2jDqSBkJ2FuaW1hdGlvbiBzdXBwbMOpbWVudGFpcmVcbiAgICAgIGV4cGVjdChtb2NrUGFyYWxsZWwpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8g8J+UhCBUZXN0cyBkZSBnZXN0aW9uIGR5bmFtaXF1ZSBkZXMgY2F0w6lnb3JpZXNcbiAgZGVzY3JpYmUoJ0R5bmFtaWMgY2F0ZWdvcnkgbWFuYWdlbWVudCcsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBjYXRlZ29yeSBhZGRpdGlvbiB3aXRob3V0IGNyYXNoaW5nJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgb25TZWxlY3RDYXRlZ29yeSA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IHsgcmVyZW5kZXIgfSA9IHJlbmRlcihcbiAgICAgICAgPENhdGVnb3J5U2VsZWN0b3JcbiAgICAgICAgICBjYXRlZ29yaWVzPXtjYXRlZ29yaWVzfVxuICAgICAgICAgIHNlbGVjdGVkQ2F0ZWdvcnk9XCIxXCJcbiAgICAgICAgICBvblNlbGVjdENhdGVnb3J5PXtvblNlbGVjdENhdGVnb3J5fVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIHJlcmVuZGVyKFxuICAgICAgICAgIDxDYXRlZ29yeVNlbGVjdG9yXG4gICAgICAgICAgICBjYXRlZ29yaWVzPXtbLi4uY2F0ZWdvcmllcywgeyBpZDogJzQnLCBuYW1lOiAnV3JpdGluZycgfV19XG4gICAgICAgICAgICBzZWxlY3RlZENhdGVnb3J5PVwiMVwiXG4gICAgICAgICAgICBvblNlbGVjdENhdGVnb3J5PXtvblNlbGVjdENhdGVnb3J5fVxuICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgIHJlcmVuZGVyKFxuICAgICAgICAgIDxDYXRlZ29yeVNlbGVjdG9yXG4gICAgICAgICAgICBjYXRlZ29yaWVzPXtbLi4uY2F0ZWdvcmllcywgeyBpZDogJzQnLCBuYW1lOiAnV3JpdGluZycgfV19XG4gICAgICAgICAgICBzZWxlY3RlZENhdGVnb3J5PVwiMVwiXG4gICAgICAgICAgICBvblNlbGVjdENhdGVnb3J5PXtvblNlbGVjdENhdGVnb3J5fVxuICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgICB9KS5ub3QudG9UaHJvdygpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgY2F0ZWdvcnkgcmVtb3ZhbCB3aXRob3V0IGNyYXNoaW5nJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgb25TZWxlY3RDYXRlZ29yeSA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IHsgcmVyZW5kZXIgfSA9IHJlbmRlcihcbiAgICAgICAgPENhdGVnb3J5U2VsZWN0b3JcbiAgICAgICAgICBjYXRlZ29yaWVzPXtjYXRlZ29yaWVzfVxuICAgICAgICAgIHNlbGVjdGVkQ2F0ZWdvcnk9XCIxXCJcbiAgICAgICAgICBvblNlbGVjdENhdGVnb3J5PXtvblNlbGVjdENhdGVnb3J5fVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIHJlcmVuZGVyKFxuICAgICAgICAgIDxDYXRlZ29yeVNlbGVjdG9yXG4gICAgICAgICAgICBjYXRlZ29yaWVzPXtbY2F0ZWdvcmllc1swXV19XG4gICAgICAgICAgICBzZWxlY3RlZENhdGVnb3J5PVwiMVwiXG4gICAgICAgICAgICBvblNlbGVjdENhdGVnb3J5PXtvblNlbGVjdENhdGVnb3J5fVxuICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgIHJlcmVuZGVyKFxuICAgICAgICAgIDxDYXRlZ29yeVNlbGVjdG9yXG4gICAgICAgICAgICBjYXRlZ29yaWVzPXtbY2F0ZWdvcmllc1swXV19XG4gICAgICAgICAgICBzZWxlY3RlZENhdGVnb3J5PVwiMVwiXG4gICAgICAgICAgICBvblNlbGVjdENhdGVnb3J5PXtvblNlbGVjdENhdGVnb3J5fVxuICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgICB9KS5ub3QudG9UaHJvdygpO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyDinIUgVGVzdHMgYXJlRXF1YWxcbiAgZGVzY3JpYmUoJ2FyZUVxdWFsIG1lbW9pemF0aW9uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIHRydWUgZm9yIGlkZW50aWNhbCBwcm9wcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHByb3BzID0geyBzZWxlY3RlZENhdGVnb3J5OiAnMScsIHByaW1hcnlDb2xvcjogJyMwMDAnLCBjYXRlZ29yaWVzOiBbeyBpZDogJzEnLCBuYW1lOiAnQ2F0MScgfV0gfTtcbiAgICAgIGV4cGVjdChhcmVFcXVhbChwcm9wcywgcHJvcHMpKS50b0JlKHRydWUpO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJtYXBwaW5ncyI6IkFBK0JBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxjQUFjLEVBQUUsWUFBTTtFQUM5QixJQUFNQyxFQUFFLEdBQUdDLElBQUksQ0FBQ0MsYUFBYSxDQUFDLGNBQWMsQ0FBQztFQUM3QyxPQUFBQyxNQUFBLENBQUFDLE1BQUEsS0FDS0osRUFBRTtJQUNMSyxRQUFRLEVBQUFGLE1BQUEsQ0FBQUMsTUFBQSxLQUNISixFQUFFLENBQUNLLFFBQVE7TUFDZEMsS0FBSyxFQUFFQyxpQkFBaUI7TUFDeEJDLE1BQU0sRUFBRUMsVUFBVTtNQUNsQkMsUUFBUSxFQUFFQyxZQUFZO01BQ3RCQyxRQUFRLEVBQUVDLFlBQVk7TUFDdEJDLElBQUksRUFBRWQsRUFBRSxDQUFDSyxRQUFRLENBQUNTO0lBQUksRUFDdkI7SUFDREMsVUFBVSxFQUFFZixFQUFFLENBQUNlLFVBQVU7SUFDekJDLGdCQUFnQixFQUFFaEIsRUFBRSxDQUFDZ0IsZ0JBQWdCO0lBQ3JDQyxJQUFJLEVBQUVqQixFQUFFLENBQUNpQixJQUFJO0lBQ2JILElBQUksRUFBRWQsRUFBRSxDQUFDYztFQUFJO0FBRWpCLENBQUMsQ0FBQztBQUVGaEIsV0FBQSxHQUFLQyxJQUFJLENBQUMsc0JBQXNCLEVBQUU7RUFBQSxPQUFPO0lBQ3ZDbUIsY0FBYyxFQUFFLFNBQWhCQSxjQUFjQSxDQUFBQyxJQUFBLEVBQThCO01BQUEsSUFBekJDLFFBQVEsR0FBQUQsSUFBQSxDQUFSQyxRQUFRO1FBQUtD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