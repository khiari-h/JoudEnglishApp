45d4ae863ecd715acb796d139cf86c59
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var useErrorCorrection = function useErrorCorrection(errorCorrectionData, level) {
  var handleStorageError = function handleStorageError(error, operation) {
    var fallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    console.warn(`Error correction storage error in ${operation}:`, error);
    return fallback;
  };
  var STORAGE_KEY = `errorCorrection_${level}`;
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    selectedCategory = _useState2[0],
    setSelectedCategory = _useState2[1];
  var _useState3 = (0, _react.useState)(0),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    currentExerciseIndex = _useState4[0],
    setCurrentExerciseIndex = _useState4[1];
  var _useState5 = (0, _react.useState)('full'),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    correctionMode = _useState6[0],
    setCorrectionMode = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    showFeedback = _useState8[0],
    setShowFeedback = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    isCorrect = _useState0[0],
    setIsCorrect = _useState0[1];
  var _useState1 = (0, _react.useState)(false),
    _useState10 = (0, _slicedToArray2.default)(_useState1, 2),
    showResults = _useState10[0],
    setShowResults = _useState10[1];
  var _useState11 = (0, _react.useState)(false),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    isFinished = _useState12[0],
    setIsFinished = _useState12[1];
  var _useState13 = (0, _react.useState)({}),
    _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
    completedExercises = _useState14[0],
    setCompletedExercises = _useState14[1];
  var _useState15 = (0, _react.useState)(false),
    _useState16 = (0, _slicedToArray2.default)(_useState15, 2),
    loaded = _useState16[0],
    setLoaded = _useState16[1];
  var _useState17 = (0, _react.useState)(false),
    _useState18 = (0, _slicedToArray2.default)(_useState17, 2),
    showDetailedProgress = _useState18[0],
    setShowDetailedProgress = _useState18[1];
  var _useState19 = (0, _react.useState)(''),
    _useState20 = (0, _slicedToArray2.default)(_useState19, 2),
    userCorrection = _useState20[0],
    setUserCorrection = _useState20[1];
  var _useState21 = (0, _react.useState)([]),
    _useState22 = (0, _slicedToArray2.default)(_useState21, 2),
    selectedErrorIndices = _useState22[0],
    setSelectedErrorIndices = _useState22[1];
  var _useState23 = (0, _react.useState)(null),
    _useState24 = (0, _slicedToArray2.default)(_useState23, 2),
    selectedChoiceIndex = _useState24[0],
    setSelectedChoiceIndex = _useState24[1];
  var _useState25 = (0, _react.useState)(0),
    _useState26 = (0, _slicedToArray2.default)(_useState25, 2),
    score = _useState26[0],
    setScore = _useState26[1];
  var _useState27 = (0, _react.useState)(false),
    _useState28 = (0, _slicedToArray2.default)(_useState27, 2),
    showHint = _useState28[0],
    setShowHint = _useState28[1];
  var isInitialized = (0, _react.useRef)(false);
  var categories = (errorCorrectionData == null ? void 0 : errorCorrectionData.categories) || [];
  var exercises = (errorCorrectionData == null ? void 0 : errorCorrectionData.exercises) || [];
  var currentExercises = exercises.filter(function (ex) {
    return ex.categoryId === selectedCategory;
  });
  var currentExercise = currentExercises[currentExerciseIndex];
  var totalCategories = categories.length;
  var totalExercisesInCategory = currentExercises.length;
  var currentCategory = categories.find(function (cat) {
    return cat.id === selectedCategory;
  });
  (0, _react.useEffect)(function () {
    var loadData = function () {
      var _ref = (0, _asyncToGenerator2.default)(function* () {
        try {
          var saved = yield _asyncStorage.default.getItem(STORAGE_KEY);
          if (saved) {
            var _JSON$parse = JSON.parse(saved),
              savedCompleted = _JSON$parse.completedExercises,
              lastPosition = _JSON$parse.lastPosition;
            setCompletedExercises(savedCompleted || {});
            if (lastPosition) {
              setSelectedCategory(lastPosition.categoryId || null);
              setCurrentExerciseIndex(lastPosition.exerciseIndex || 0);
            }
          }
        } catch (error) {
          handleStorageError(error, 'loadData');
        } finally {
          setLoaded(true);
        }
      });
      return function loadData() {
        return _ref.apply(this, arguments);
      };
    }();
    loadData();
  }, [STORAGE_KEY]);
  var saveData = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      var dataToSave = {
        completedExercises: completedExercises,
        lastPosition: {
          categoryId: selectedCategory,
          exerciseIndex: currentExerciseIndex
        }
      };
      yield _asyncStorage.default.setItem(STORAGE_KEY, JSON.stringify(dataToSave));
    } catch (error) {
      handleStorageError(error, 'saveData');
    }
  }), [completedExercises, selectedCategory, currentExerciseIndex, STORAGE_KEY]);
  (0, _react.useEffect)(function () {
    if (loaded) saveData();
  }, [saveData, loaded]);
  (0, _react.useEffect)(function () {
    if (loaded && errorCorrectionData && !isInitialized.current) {
      var newCompletedExercises = Object.assign({}, completedExercises);
      categories.forEach(function (category) {
        if (!newCompletedExercises[category.id]) {
          newCompletedExercises[category.id] = [];
        }
      });
      setCompletedExercises(newCompletedExercises);
      isInitialized.current = true;
    }
  }, [loaded, errorCorrectionData, categories, completedExercises]);
  (0, _react.useEffect)(function () {
    if (loaded && categories.length > 0 && !selectedCategory) {
      setSelectedCategory(categories[0].id);
    }
  }, [loaded, categories, selectedCategory]);
  var resetExerciseState = (0, _react.useCallback)(function () {
    setSelectedErrorIndices([]);
    setShowFeedback(false);
    setIsCorrect(false);
    setShowHint(false);
    setUserCorrection('');
  }, []);
  var changeCategory = (0, _react.useCallback)(function (newCategoryId) {
    setSelectedCategory(newCategoryId);
    setCurrentExerciseIndex(0);
    resetExerciseState();
  }, [resetExerciseState]);
  var startExercise = (0, _react.useCallback)(function () {
    var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'full';
    setCorrectionMode(mode);
    resetExerciseState();
    setShowResults(false);
    setScore(0);
    if (currentExercises.length > 0) {
      var firstExercise = currentExercises[0];
      switch (mode) {
        case 'full':
          setUserCorrection(firstExercise.text || '');
          break;
        case 'identify':
          setSelectedErrorIndices([]);
          break;
        case 'multiple_choice':
          setSelectedChoiceIndex(null);
          break;
        default:
          break;
      }
    }
  }, [currentExercises, resetExerciseState]);
  var toggleDetailedProgress = (0, _react.useCallback)(function () {
    setShowDetailedProgress(function (prev) {
      return !prev;
    });
  }, []);
  var handleWordPress = (0, _react.useCallback)(function (wordIndex) {
    if (showFeedback || correctionMode !== 'identify') return;
    setSelectedErrorIndices(function (prev) {
      return prev.includes(wordIndex) ? prev.filter(function (i) {
        return i !== wordIndex;
      }) : [].concat((0, _toConsumableArray2.default)(prev), [wordIndex]);
    });
  }, [showFeedback, correctionMode]);
  var handleChoiceSelect = (0, _react.useCallback)(function (choiceIndex) {
    if (showFeedback) return;
    setSelectedChoiceIndex(choiceIndex);
  }, [showFeedback]);
  var markExerciseAsCompleted = (0, _react.useCallback)(function (catId, exIndex) {
    setCompletedExercises(function (prev) {
      var categoryCompleted = prev[catId] || [];
      if (!categoryCompleted.includes(exIndex)) {
        return Object.assign({}, prev, (0, _defineProperty2.default)({}, catId, [].concat((0, _toConsumableArray2.default)(categoryCompleted), [exIndex])));
      }
      return prev;
    });
  }, []);
  var findNextUncompletedCategory = (0, _react.useCallback)(function () {
    var numCategories = categories.length;
    var _loop = function _loop() {
        var _errorCorrectionData$, _completedExercises$n;
        var nextIndex = (categories.findIndex(function (cat) {
          return cat.id === selectedCategory;
        }) + i) % numCategories;
        var nextCategory = categories[nextIndex];
        var exercisesInCategory = (errorCorrectionData == null || (_errorCorrectionData$ = errorCorrectionData.exercises) == null || (_errorCorrectionData$ = _errorCorrectionData$.filter(function (ex) {
          return ex.categoryId === nextCategory.id;
        })) == null ? void 0 : _errorCorrectionData$.length) || 0;
        var completedInCategory = ((_completedExercises$n = completedExercises[nextCategory.id]) == null ? void 0 : _completedExercises$n.length) || 0;
        if (completedInCategory < exercisesInCategory) {
          return {
            v: nextCategory.id
          };
        }
      },
      _ret;
    for (var i = 1; i <= numCategories; i++) {
      _ret = _loop();
      if (_ret) return _ret.v;
    }
    return null;
  }, [categories, selectedCategory, completedExercises, errorCorrectionData]);
  var checkAnswer = (0, _react.useCallback)(function () {
    if (showFeedback) return false;
    var answerCorrect = false;
    switch (correctionMode) {
      case 'full':
        if (!userCorrection.trim()) return false;
        answerCorrect = userCorrection.trim().toLowerCase() === (currentExercise.correctedText || '').trim().toLowerCase();
        break;
      case 'identify':
        {
          var errorPositions = currentExercise.errorPositions || [];
          answerCorrect = selectedErrorIndices.length === errorPositions.length && selectedErrorIndices.every(function (index) {
            return errorPositions.includes(index);
          });
          break;
        }
      case 'multiple_choice':
        answerCorrect = selectedChoiceIndex === currentExercise.correctChoiceIndex;
        break;
      default:
        return false;
    }
    setIsCorrect(answerCorrect);
    setShowFeedback(true);
    if (answerCorrect) {
      setScore(function (prev) {
        return prev + 1;
      });
    }
    return answerCorrect;
  }, [showFeedback, correctionMode, userCorrection, selectedErrorIndices, selectedChoiceIndex, currentExercise]);
  var handleNext = (0, _react.useCallback)(function () {
    markExerciseAsCompleted(selectedCategory, currentExerciseIndex);
    if (currentExerciseIndex < totalExercisesInCategory - 1) {
      var nextIndex = currentExerciseIndex + 1;
      setCurrentExerciseIndex(nextIndex);
      resetExerciseState();
      var nextExercise = currentExercises[nextIndex];
      switch (correctionMode) {
        case 'full':
          setUserCorrection(nextExercise.text || '');
          break;
        case 'identify':
          setSelectedErrorIndices([]);
          break;
        case 'multiple_choice':
          setSelectedChoiceIndex(null);
          break;
        default:
          break;
      }
    } else {
      var nextCategoryId = findNextUncompletedCategory();
      if (nextCategoryId === null) {
        setIsFinished(true);
        var completionMessage = `Félicitations ! Vous avez terminé tous les exercices de correction d'erreurs ${level} !`;
        _reactNative.Alert.alert("Félicitations", completionMessage);
        return {
          completed: true
        };
      } else {
        changeCategory(nextCategoryId);
      }
    }
    return {
      completed: false
    };
  }, [selectedCategory, currentExerciseIndex, totalExercisesInCategory, markExerciseAsCompleted, resetExerciseState, currentExercises, correctionMode, findNextUncompletedCategory, changeCategory, level]);
  var handlePrevious = (0, _react.useCallback)(function () {
    if (currentExerciseIndex > 0) {
      var prevIndex = currentExerciseIndex - 1;
      setCurrentExerciseIndex(prevIndex);
      resetExerciseState();
      var prevExercise = currentExercises[prevIndex];
      switch (correctionMode) {
        case 'full':
          setUserCorrection(prevExercise.text || '');
          break;
        case 'identify':
          setSelectedErrorIndices([]);
          break;
        case 'multiple_choice':
          setSelectedChoiceIndex(null);
          break;
        default:
          break;
      }
      return;
    }
    var currentCategoryIndex = categories.findIndex(function (cat) {
      return cat.id === selectedCategory;
    });
    if (currentCategoryIndex > 0) {
      var _errorCorrectionData$2;
      var previousCategory = categories[currentCategoryIndex - 1];
      var exercisesInPreviousCategory = (errorCorrectionData == null || (_errorCorrectionData$2 = errorCorrectionData.exercises) == null ? void 0 : _errorCorrectionData$2.filter(function (ex) {
        return ex.categoryId === previousCategory.id;
      })) || [];
      var lastExerciseIndex = exercisesInPreviousCategory.length - 1;
      changeCategory(previousCategory.id);
      setCurrentExerciseIndex(lastExerciseIndex);
    }
  }, [currentExerciseIndex, currentExercises, correctionMode, resetExerciseState, categories, selectedCategory, errorCorrectionData, changeCategory]);
  var getStats = (0, _react.useCallback)(function () {
    var _completedExercises$s;
    var totalExercises = categories.reduce(function (sum, cat) {
      var _errorCorrectionData$3;
      var exercisesInCat = (errorCorrectionData == null || (_errorCorrectionData$3 = errorCorrectionData.exercises) == null || (_errorCorrectionData$3 = _errorCorrectionData$3.filter(function (ex) {
        return ex.categoryId === cat.id;
      })) == null ? void 0 : _errorCorrectionData$3.length) || 0;
      return sum + exercisesInCat;
    }, 0);
    var completedExercisesCount = Object.values(completedExercises).reduce(function (sum, completed) {
      return sum + ((completed == null ? void 0 : completed.length) || 0);
    }, 0);
    var totalProgress = totalExercises > 0 ? Math.round(completedExercisesCount / totalExercises * 100) : 0;
    return {
      totalExercises: totalExercises,
      completedExercisesCount: completedExercisesCount,
      totalProgress: totalProgress,
      completedInCurrentCategory: ((_completedExercises$s = completedExercises[selectedCategory]) == null ? void 0 : _completedExercises$s.length) || 0,
      totalInCurrentCategory: totalExercisesInCategory,
      completedExercises: completedExercises,
      score: score
    };
  }, [categories, errorCorrectionData, completedExercises, selectedCategory, totalExercisesInCategory, score]);
  var getDisplayData = (0, _react.useCallback)(function () {
    var exerciseCounter = `${currentExerciseIndex + 1} / ${totalExercisesInCategory}`;
    var categoryNames = categories.map(function (cat) {
      return cat.name;
    });
    return {
      exerciseCounter: exerciseCounter,
      categories: categoryNames,
      currentExercise: currentExercise,
      currentCategory: currentCategory
    };
  }, [currentExerciseIndex, totalExercisesInCategory, categories, currentExercise, currentCategory]);
  var canGoToPrevious = (0, _react.useCallback)(function () {
    if (currentExerciseIndex > 0) return true;
    var currentCategoryIndex = categories.findIndex(function (cat) {
      return cat.id === selectedCategory;
    });
    if (currentCategoryIndex > 0) {
      var _errorCorrectionData$4;
      var previousCategory = categories[currentCategoryIndex - 1];
      var exercisesInPreviousCategory = (errorCorrectionData == null || (_errorCorrectionData$4 = errorCorrectionData.exercises) == null ? void 0 : _errorCorrectionData$4.filter(function (ex) {
        return ex.categoryId === previousCategory.id;
      })) || [];
      return exercisesInPreviousCategory.length > 0;
    }
    return false;
  }, [currentExerciseIndex, categories, selectedCategory, errorCorrectionData]);
  var isLastExerciseInCategory = (0, _react.useCallback)(function () {
    return currentExerciseIndex === totalExercisesInCategory - 1;
  }, [currentExerciseIndex, totalExercisesInCategory]);
  var hasValidData = (errorCorrectionData == null ? void 0 : errorCorrectionData.categories) && Array.isArray(errorCorrectionData.categories) && errorCorrectionData.categories.length > 0;
  return {
    selectedCategory: selectedCategory,
    currentExerciseIndex: currentExerciseIndex,
    correctionMode: correctionMode,
    showFeedback: showFeedback,
    isCorrect: isCorrect,
    showResults: showResults,
    isFinished: isFinished,
    completedExercises: completedExercises,
    loaded: loaded,
    showDetailedProgress: showDetailedProgress,
    userCorrection: userCorrection,
    selectedErrorIndices: selectedErrorIndices,
    selectedChoiceIndex: selectedChoiceIndex,
    score: score,
    showHint: showHint,
    currentExercise: currentExercise,
    currentCategory: currentCategory,
    totalCategories: totalCategories,
    totalExercisesInCategory: totalExercisesInCategory,
    exercises: exercises,
    changeCategory: changeCategory,
    startExercise: startExercise,
    resetExerciseState: resetExerciseState,
    toggleDetailedProgress: toggleDetailedProgress,
    handleNext: handleNext,
    handlePrevious: handlePrevious,
    checkAnswer: checkAnswer,
    handleWordPress: handleWordPress,
    handleChoiceSelect: handleChoiceSelect,
    setUserCorrection: setUserCorrection,
    setShowHint: setShowHint,
    setShowResults: setShowResults,
    canGoToPrevious: canGoToPrevious(),
    isLastExerciseInCategory: isLastExerciseInCategory(),
    hasValidData: hasValidData,
    stats: getStats(),
    display: getDisplayData()
  };
};
var _default = exports.default = useErrorCorrection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,