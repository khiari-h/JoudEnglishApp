{"version":3,"names":["_react","require","_reactNative","_asyncStorage","_interopRequireDefault","useErrorCorrection","errorCorrectionData","level","handleStorageError","error","operation","fallback","arguments","length","undefined","console","warn","STORAGE_KEY","_useState","useState","_useState2","_slicedToArray2","default","selectedCategory","setSelectedCategory","_useState3","_useState4","currentExerciseIndex","setCurrentExerciseIndex","_useState5","_useState6","correctionMode","setCorrectionMode","_useState7","_useState8","showFeedback","setShowFeedback","_useState9","_useState0","isCorrect","setIsCorrect","_useState1","_useState10","showResults","setShowResults","_useState11","_useState12","isFinished","setIsFinished","_useState13","_useState14","completedExercises","setCompletedExercises","_useState15","_useState16","loaded","setLoaded","_useState17","_useState18","showDetailedProgress","setShowDetailedProgress","_useState19","_useState20","userCorrection","setUserCorrection","_useState21","_useState22","selectedErrorIndices","setSelectedErrorIndices","_useState23","_useState24","selectedChoiceIndex","setSelectedChoiceIndex","_useState25","_useState26","score","setScore","_useState27","_useState28","showHint","setShowHint","isInitialized","useRef","categories","exercises","currentExercises","filter","ex","categoryId","currentExercise","totalCategories","totalExercisesInCategory","currentCategory","find","cat","id","useEffect","loadData","_ref","_asyncToGenerator2","saved","AsyncStorage","getItem","_JSON$parse","JSON","parse","savedCompleted","lastPosition","exerciseIndex","apply","saveData","useCallback","dataToSave","setItem","stringify","current","newCompletedExercises","Object","assign","forEach","category","resetExerciseState","changeCategory","newCategoryId","startExercise","mode","firstExercise","text","toggleDetailedProgress","prev","handleWordPress","wordIndex","includes","i","concat","_toConsumableArray2","handleChoiceSelect","choiceIndex","markExerciseAsCompleted","catId","exIndex","categoryCompleted","_defineProperty2","findNextUncompletedCategory","numCategories","_loop","_errorCorrectionData$","_completedExercises$n","nextIndex","findIndex","nextCategory","exercisesInCategory","completedInCategory","v","_ret","checkAnswer","answerCorrect","trim","toLowerCase","correctedText","errorPositions","every","index","correctChoiceIndex","handleNext","nextExercise","nextCategoryId","completionMessage","Alert","alert","completed","handlePrevious","prevIndex","prevExercise","currentCategoryIndex","_errorCorrectionData$2","previousCategory","exercisesInPreviousCategory","lastExerciseIndex","getStats","_completedExercises$s","totalExercises","reduce","sum","_errorCorrectionData$3","exercisesInCat","completedExercisesCount","values","totalProgress","Math","round","completedInCurrentCategory","totalInCurrentCategory","getDisplayData","exerciseCounter","categoryNames","map","name","canGoToPrevious","_errorCorrectionData$4","isLastExerciseInCategory","hasValidData","Array","isArray","stats","display","_default","exports"],"sources":["useErrorCorrection.js"],"sourcesContent":["// src/screens/exercises/errorCorrection/hooks/useErrorCorrection.js - VERSION CORRIGÃ‰E\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { Alert } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n/**\n * ðŸŽ¯ Hook unifiÃ© pour Error Correction Exercise\n * Remplace useErrorCorrectionExerciseState + useErrorCorrectionProgress\n * Simple, efficace, maintenable - pattern identique Ã  useVocabulary\n */\nconst useErrorCorrection = (errorCorrectionData, level) => {\n  // =================== ERROR HANDLING HELPER ===================\n  const handleStorageError = (error, operation, fallback = null) => {\n    console.warn(`Error correction storage error in ${operation}:`, error);\n    return fallback;\n  };\n\n  // =================== STORAGE KEY ===================\n  const STORAGE_KEY = `errorCorrection_${level}`;\n\n  // =================== STATE ===================\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [currentExerciseIndex, setCurrentExerciseIndex] = useState(0);\n  const [correctionMode, setCorrectionMode] = useState('full'); // 'full', 'identify', 'multiple_choice'\n  const [showFeedback, setShowFeedback] = useState(false);\n  const [isCorrect, setIsCorrect] = useState(false);\n  const [showResults, setShowResults] = useState(false);\n  const [isFinished, setIsFinished] = useState(false);\n  const [completedExercises, setCompletedExercises] = useState({});\n  const [loaded, setLoaded] = useState(false);\n  const [showDetailedProgress, setShowDetailedProgress] = useState(false);\n\n  // =================== MODE-SPECIFIC STATE ===================\n  const [userCorrection, setUserCorrection] = useState('');\n  const [selectedErrorIndices, setSelectedErrorIndices] = useState([]);\n  const [selectedChoiceIndex, setSelectedChoiceIndex] = useState(null);\n  const [score, setScore] = useState(0);\n  const [showHint, setShowHint] = useState(false);\n\n  // =================== REFS ===================\n  const isInitialized = useRef(false);\n\n  // =================== COMPUTED VALUES ===================\n  const categories = errorCorrectionData?.categories || [];\n  const exercises = errorCorrectionData?.exercises || [];\n  const currentExercises = exercises.filter(ex => ex.categoryId === selectedCategory);\n  const currentExercise = currentExercises[currentExerciseIndex];\n  const totalCategories = categories.length;\n  const totalExercisesInCategory = currentExercises.length;\n  \n  // âœ… AJOUTÃ‰ : DÃ©finition manquante de currentCategory\n  const currentCategory = categories.find(cat => cat.id === selectedCategory);\n  \n  // =================== PERSISTENCE ===================\n  // âœ… Variable lastPosition supprimÃ©e car inutilisÃ©e\n\n  // Load data from storage\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const saved = await AsyncStorage.getItem(STORAGE_KEY);\n        if (saved) {\n          const { completedExercises: savedCompleted, lastPosition } = JSON.parse(saved);\n          setCompletedExercises(savedCompleted || {});\n          if (lastPosition) {\n            setSelectedCategory(lastPosition.categoryId || null);\n            setCurrentExerciseIndex(lastPosition.exerciseIndex || 0);\n          }\n        }\n      } catch (error) {\n        // âœ… Gestion d'erreur appropriÃ©e\n        handleStorageError(error, 'loadData');\n        // Fallback: utiliser les valeurs par dÃ©faut\n      } finally {\n        setLoaded(true);\n      }\n    };\n    loadData();\n  }, [STORAGE_KEY]); // DÃ©pendance plus explicite et cohÃ©rente\n\n  // Save data to storage\n  const saveData = useCallback(async () => {\n    try {\n      const dataToSave = {\n        completedExercises,\n        lastPosition: {\n          categoryId: selectedCategory,\n          exerciseIndex: currentExerciseIndex\n        }\n      };\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(dataToSave));\n    } catch (error) {\n      // âœ… Gestion d'erreur appropriÃ©e\n      handleStorageError(error, 'saveData');\n      // Fallback: continuer sans sauvegarde\n    }\n  }, [completedExercises, selectedCategory, currentExerciseIndex, STORAGE_KEY]);\n\n  // Auto-save when data changes\n  useEffect(() => {\n    if (loaded) saveData();\n  }, [saveData, loaded]);\n\n  // Initialize progress for new categories\n  useEffect(() => {\n    if (loaded && errorCorrectionData && !isInitialized.current) {\n      const newCompletedExercises = { ...completedExercises };\n      categories.forEach((category) => {\n        if (!newCompletedExercises[category.id]) {\n          newCompletedExercises[category.id] = [];\n        }\n      });\n      setCompletedExercises(newCompletedExercises);\n      isInitialized.current = true;\n    }\n  }, [loaded, errorCorrectionData, categories, completedExercises]);\n\n  // Initialize first category\n  useEffect(() => {\n    if (loaded && categories.length > 0 && !selectedCategory) {\n      setSelectedCategory(categories[0].id);\n    }\n  }, [loaded, categories, selectedCategory]);\n\n  // =================== NAVIGATION ACTIONS ===================\n  const resetExerciseState = useCallback(() => {\n    setSelectedErrorIndices([]);\n    setShowFeedback(false);\n    setIsCorrect(false);\n    setShowHint(false);\n    setUserCorrection('');\n  }, []);\n\n  const changeCategory = useCallback((newCategoryId) => {\n    setSelectedCategory(newCategoryId);\n    setCurrentExerciseIndex(0);\n    resetExerciseState();\n  }, [resetExerciseState]);\n\n  const startExercise = useCallback((mode = 'full') => {\n    setCorrectionMode(mode);\n    resetExerciseState();\n    setShowResults(false);\n    setScore(0);\n\n    // Initialize based on mode\n    if (currentExercises.length > 0) {\n      const firstExercise = currentExercises[0];\n      switch(mode) {\n        case 'full':\n          setUserCorrection(firstExercise.text || '');\n          break;\n        case 'identify':\n          setSelectedErrorIndices([]);\n          break;\n        case 'multiple_choice':\n          setSelectedChoiceIndex(null);\n          break;\n        default:\n          // No default action needed\n          break;\n      }\n    }\n  }, [currentExercises, resetExerciseState]);\n\n  const toggleDetailedProgress = useCallback(() => {\n    setShowDetailedProgress(prev => !prev);\n  }, []);\n\n  // =================== MODE-SPECIFIC ACTIONS ===================\n  const handleWordPress = useCallback((wordIndex) => {\n    if (showFeedback || correctionMode !== 'identify') return;\n\n    setSelectedErrorIndices(prev => \n      prev.includes(wordIndex) \n        ? prev.filter(i => i !== wordIndex)\n        : [...prev, wordIndex]\n    );\n  }, [showFeedback, correctionMode]);\n\n  const handleChoiceSelect = useCallback((choiceIndex) => {\n    if (showFeedback) return;\n    setSelectedChoiceIndex(choiceIndex);\n  }, [showFeedback]);\n\n  // =================== COMPLETION LOGIC ===================\n  const markExerciseAsCompleted = useCallback((catId, exIndex) => {\n    setCompletedExercises(prev => {\n      const categoryCompleted = prev[catId] || [];\n      if (!categoryCompleted.includes(exIndex)) {\n        return {\n          ...prev,\n          [catId]: [...categoryCompleted, exIndex]\n        };\n      }\n      return prev;\n    });\n  }, []);\n\n  // Find next uncompleted category\n  const findNextUncompletedCategory = useCallback(() => {\n    const numCategories = categories.length;\n    for (let i = 1; i <= numCategories; i++) {\n      const nextIndex = (categories.findIndex(cat => cat.id === selectedCategory) + i) % numCategories;\n      const nextCategory = categories[nextIndex];\n      const exercisesInCategory = errorCorrectionData?.exercises?.filter(\n        ex => ex.categoryId === nextCategory.id\n      )?.length || 0;\n      const completedInCategory = completedExercises[nextCategory.id]?.length || 0;\n      \n      if (completedInCategory < exercisesInCategory) {\n        return nextCategory.id;\n      }\n    }\n    return null;\n  }, [categories, selectedCategory, completedExercises, errorCorrectionData]);\n\n  // =================== ANSWER CHECKING ===================\n  const checkAnswer = useCallback(() => {\n    if (showFeedback) return false;\n\n    let answerCorrect = false;\n\n    switch(correctionMode) {\n      case 'full':\n        if (!userCorrection.trim()) return false;\n        answerCorrect = userCorrection.trim().toLowerCase() === \n                       (currentExercise.correctedText || '').trim().toLowerCase();\n        break;\n\n      case 'identify': {\n        const errorPositions = currentExercise.errorPositions || [];\n        answerCorrect = selectedErrorIndices.length === errorPositions.length &&\n          selectedErrorIndices.every(index => errorPositions.includes(index));\n        break;\n      }\n\n      case 'multiple_choice':\n        answerCorrect = selectedChoiceIndex === currentExercise.correctChoiceIndex;\n        break;\n\n      default:\n        return false;\n    }\n\n    setIsCorrect(answerCorrect);\n    setShowFeedback(true);\n\n    if (answerCorrect) {\n      setScore(prev => prev + 1);\n    }\n\n    return answerCorrect;\n  }, [showFeedback, correctionMode, userCorrection, selectedErrorIndices, selectedChoiceIndex, currentExercise]);\n\n  // =================== MAIN NAVIGATION ===================\n  const handleNext = useCallback(() => {\n    // Mark current exercise as completed\n    markExerciseAsCompleted(selectedCategory, currentExerciseIndex);\n\n    // Check if there are more exercises in current category\n    if (currentExerciseIndex < totalExercisesInCategory - 1) {\n      const nextIndex = currentExerciseIndex + 1;\n      setCurrentExerciseIndex(nextIndex);\n      resetExerciseState();\n\n      // Initialize next exercise based on mode\n      const nextExercise = currentExercises[nextIndex];\n      switch(correctionMode) {\n        case 'full':\n          setUserCorrection(nextExercise.text || '');\n          break;\n        case 'identify':\n          setSelectedErrorIndices([]);\n          break;\n        case 'multiple_choice':\n          setSelectedChoiceIndex(null);\n          break;\n        default:\n          // No default action needed\n          break;\n      }\n    } else {\n      // End of category - find next uncompleted category\n      const nextCategoryId = findNextUncompletedCategory();\n      if (nextCategoryId === null) {\n        // All done!\n        setIsFinished(true);\n        const completionMessage = `FÃ©licitations ! Vous avez terminÃ© tous les exercices de correction d'erreurs ${level} !`;\n        Alert.alert(\"FÃ©licitations\", completionMessage);\n        return { completed: true };\n      } else {\n        changeCategory(nextCategoryId);\n      }\n    }\n    return { completed: false };\n  }, [selectedCategory, currentExerciseIndex, totalExercisesInCategory, markExerciseAsCompleted, \n      resetExerciseState, currentExercises, correctionMode, findNextUncompletedCategory, changeCategory, level]);\n\n  const handlePrevious = useCallback(() => {\n    // Case 1: Not first exercise in category\n    if (currentExerciseIndex > 0) {\n      const prevIndex = currentExerciseIndex - 1;\n      setCurrentExerciseIndex(prevIndex);\n      resetExerciseState();\n\n      // Initialize previous exercise based on mode\n      const prevExercise = currentExercises[prevIndex];\n      switch(correctionMode) {\n        case 'full':\n          setUserCorrection(prevExercise.text || '');\n          break;\n        case 'identify':\n          setSelectedErrorIndices([]);\n          break;\n        case 'multiple_choice':\n          setSelectedChoiceIndex(null);\n          break;\n        default:\n          // No default action needed\n          break;\n      }\n      return;\n    }\n    \n    // Case 2: First exercise in category - go to previous category\n    const currentCategoryIndex = categories.findIndex(cat => cat.id === selectedCategory);\n    if (currentCategoryIndex > 0) {\n      const previousCategory = categories[currentCategoryIndex - 1];\n      const exercisesInPreviousCategory = errorCorrectionData?.exercises?.filter(\n        ex => ex.categoryId === previousCategory.id\n      ) || [];\n      const lastExerciseIndex = exercisesInPreviousCategory.length - 1;\n      \n      changeCategory(previousCategory.id);\n      setCurrentExerciseIndex(lastExerciseIndex);\n    }\n  }, [currentExerciseIndex, currentExercises, correctionMode, resetExerciseState, \n      categories, selectedCategory, errorCorrectionData, changeCategory]);\n\n  // =================== COMPUTED STATS ===================\n  const getStats = useCallback(() => {\n    const totalExercises = categories.reduce((sum, cat) => {\n      const exercisesInCat = errorCorrectionData?.exercises?.filter(\n        ex => ex.categoryId === cat.id\n      )?.length || 0;\n      return sum + exercisesInCat;\n    }, 0);\n    \n    const completedExercisesCount = Object.values(completedExercises).reduce(\n      (sum, completed) => sum + (completed?.length || 0), 0\n    );\n    \n    const totalProgress = totalExercises > 0 ? Math.round((completedExercisesCount / totalExercises) * 100) : 0;\n\n    return {\n      totalExercises,\n      completedExercisesCount,\n      totalProgress,\n      completedInCurrentCategory: completedExercises[selectedCategory]?.length || 0,\n      totalInCurrentCategory: totalExercisesInCategory,\n      completedExercises,\n      score\n    };\n  }, [categories, errorCorrectionData, completedExercises, selectedCategory, totalExercisesInCategory, score]);\n\n  // =================== COMPUTED DISPLAY ===================\n  const getDisplayData = useCallback(() => {\n    const exerciseCounter = `${currentExerciseIndex + 1} / ${totalExercisesInCategory}`;\n    const categoryNames = categories.map(cat => cat.name);\n    \n    return {\n      exerciseCounter,\n      categories: categoryNames,\n      currentExercise,\n      currentCategory\n    };\n  }, [currentExerciseIndex, totalExercisesInCategory, categories, currentExercise, currentCategory]);\n\n  // =================== VALIDATION ===================\n  const canGoToPrevious = useCallback(() => {\n    if (currentExerciseIndex > 0) return true;\n    const currentCategoryIndex = categories.findIndex(cat => cat.id === selectedCategory);\n    if (currentCategoryIndex > 0) {\n      const previousCategory = categories[currentCategoryIndex - 1];\n      const exercisesInPreviousCategory = errorCorrectionData?.exercises?.filter(\n        ex => ex.categoryId === previousCategory.id\n      ) || [];\n      return exercisesInPreviousCategory.length > 0;\n    }\n    return false;\n  }, [currentExerciseIndex, categories, selectedCategory, errorCorrectionData]);\n\n  const isLastExerciseInCategory = useCallback(() => {\n    return currentExerciseIndex === totalExercisesInCategory - 1;\n  }, [currentExerciseIndex, totalExercisesInCategory]);\n\n  const hasValidData = errorCorrectionData?.categories && \n                      Array.isArray(errorCorrectionData.categories) && \n                      errorCorrectionData.categories.length > 0;\n\n  return {\n    // State\n    selectedCategory,\n    currentExerciseIndex,\n    correctionMode,\n    showFeedback,\n    isCorrect,\n    showResults,\n    isFinished,\n    completedExercises,\n    loaded,\n    showDetailedProgress,\n    \n    // Mode-specific state\n    userCorrection,\n    selectedErrorIndices,\n    selectedChoiceIndex,\n    score,\n    showHint,\n    \n    // Data\n    currentExercise,\n    currentCategory,\n    totalCategories,\n    totalExercisesInCategory,\n    exercises,\n    \n    // Actions\n    changeCategory,\n    startExercise,\n    resetExerciseState,\n    toggleDetailedProgress,\n    handleNext,\n    handlePrevious,\n    checkAnswer,\n    handleWordPress,\n    handleChoiceSelect,\n    setUserCorrection,\n    setShowHint,\n    setShowResults,\n    \n    // Computed\n    canGoToPrevious: canGoToPrevious(),\n    isLastExerciseInCategory: isLastExerciseInCategory(),\n    hasValidData,\n    stats: getStats(),\n    display: getDisplayData(),\n  };\n};\n\nexport default useErrorCorrection;"],"mappings":"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","ignoreList":[]}