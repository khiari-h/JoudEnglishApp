c2e1b3571c4684a1e9dc9af8e238bb06
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    multiGet: jest.fn(),
    clear: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _storageUtils = require("../../src/utils/storageUtils");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('storageUtils', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('isStorageAvailable', function () {
    it('devrait retourner true si AsyncStorage fonctionne', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.setItem.mockResolvedValue();
      _asyncStorage.default.removeItem.mockResolvedValue();
      var result = yield (0, _storageUtils.isStorageAvailable)();
      expect(result).toBe(true);
    }));
    it('devrait retourner false si AsyncStorage échoue', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.setItem.mockRejectedValue(new Error('Storage error'));
      var result = yield (0, _storageUtils.isStorageAvailable)();
      expect(result).toBe(false);
    }));
  });
  describe('storeData', function () {
    it('devrait stocker des données avec succès', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.setItem.mockResolvedValue();
      var result = yield (0, _storageUtils.storeData)('test-key', {
        data: 'test'
      });
      expect(result).toBe(true);
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('test-key', '{"data":"test"}');
    }));
    it('devrait retourner false en cas d\'erreur', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.setItem.mockRejectedValue(new Error('Storage error'));
      var result = yield (0, _storageUtils.storeData)('test-key', {
        data: 'test'
      });
      expect(result).toBe(false);
    }));
    it('devrait gérer différents types de données', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.setItem.mockResolvedValue();
      yield (0, _storageUtils.storeData)('string', 'hello');
      yield (0, _storageUtils.storeData)('number', 42);
      yield (0, _storageUtils.storeData)('boolean', true);
      yield (0, _storageUtils.storeData)('array', [1, 2, 3]);
      yield (0, _storageUtils.storeData)('object', {
        key: 'value'
      });
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('string', '"hello"');
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('number', '42');
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('boolean', 'true');
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('array', '[1,2,3]');
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('object', '{"key":"value"}');
    }));
  });
  describe('getData', function () {
    it('devrait récupérer des données stockées', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue('{"data":"test"}');
      var result = yield (0, _storageUtils.getData)('test-key');
      expect(result).toEqual({
        data: 'test'
      });
      expect(_asyncStorage.default.getItem).toHaveBeenCalledWith('test-key');
    }));
    it('devrait retourner null si aucune donnée', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var result = yield (0, _storageUtils.getData)('test-key');
      expect(result).toBeNull();
    }));
    it('devrait retourner null en cas d\'erreur', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockRejectedValue(new Error('Storage error'));
      var result = yield (0, _storageUtils.getData)('test-key');
      expect(result).toBeNull();
    }));
    it('devrait gérer les données JSON invalides', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue('invalid json');
      var result = yield (0, _storageUtils.getData)('test-key');
      expect(result).toBeNull();
    }));
  });
  describe('removeData', function () {
    it('devrait supprimer des données avec succès', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.removeItem.mockResolvedValue();
      var result = yield (0, _storageUtils.removeData)('test-key');
      expect(result).toBe(true);
      expect(_asyncStorage.default.removeItem).toHaveBeenCalledWith('test-key');
    }));
    it('devrait retourner false en cas d\'erreur', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.removeItem.mockRejectedValue(new Error('Storage error'));
      var result = yield (0, _storageUtils.removeData)('test-key');
      expect(result).toBe(false);
    }));
  });
  describe('getMultipleData', function () {
    it('devrait récupérer plusieurs données', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.multiGet.mockResolvedValue([['key1', '{"data":"value1"}'], ['key2', '{"data":"value2"}'], ['key3', null]]);
      var result = yield (0, _storageUtils.getMultipleData)(['key1', 'key2', 'key3']);
      expect(result).toEqual({
        key1: {
          data: 'value1'
        },
        key2: {
          data: 'value2'
        },
        key3: null
      });
    }));
    it('devrait retourner un objet vide en cas d\'erreur', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.multiGet.mockRejectedValue(new Error('Storage error'));
      var result = yield (0, _storageUtils.getMultipleData)(['key1', 'key2']);
      expect(result).toEqual({});
    }));
  });
  describe('clearAllData', function () {
    it('devrait effacer toutes les données', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.clear.mockResolvedValue();
      var result = yield (0, _storageUtils.clearAllData)();
      expect(result).toBe(true);
      expect(_asyncStorage.default.clear).toHaveBeenCalled();
    }));
    it('devrait retourner false en cas d\'erreur', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.clear.mockRejectedValue(new Error('Storage error'));
      var result = yield (0, _storageUtils.clearAllData)();
      expect(result).toBe(false);
    }));
  });
  describe('storageService', function () {
    describe('saveProgress et getProgress', function () {
      it('devrait sauvegarder et récupérer la progression', (0, _asyncToGenerator2.default)(function* () {
        _asyncStorage.default.setItem.mockResolvedValue();
        _asyncStorage.default.getItem.mockResolvedValue('{"level":2,"score":85}');
        var progressData = {
          level: 2,
          score: 85
        };
        var saveResult = yield _storageUtils.storageService.saveProgress(progressData);
        var getResult = yield _storageUtils.storageService.getProgress();
        expect(saveResult).toBe(true);
        expect(getResult).toEqual(progressData);
      }));
    });
    describe('saveSettings et getSettings', function () {
      it('devrait sauvegarder et récupérer les paramètres', (0, _asyncToGenerator2.default)(function* () {
        _asyncStorage.default.setItem.mockResolvedValue();
        _asyncStorage.default.getItem.mockResolvedValue('{"theme":"dark","language":"fr"}');
        var settings = {
          theme: 'dark',
          language: 'fr'
        };
        var saveResult = yield _storageUtils.storageService.saveSettings(settings);
        var getResult = yield _storageUtils.storageService.getSettings();
        expect(saveResult).toBe(true);
        expect(getResult).toEqual(settings);
      }));
    });
    describe('markExerciseCompleted et isExerciseCompleted', function () {
      it('devrait marquer un exercice comme complété', (0, _asyncToGenerator2.default)(function* () {
        _asyncStorage.default.getItem.mockResolvedValue('{}');
        _asyncStorage.default.setItem.mockResolvedValue();
        var result = yield _storageUtils.storageService.markExerciseCompleted('vocab-1', 'level-1', 90);
        expect(result).toBe(true);
        expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('completedExercises', expect.stringContaining('"vocab-1"'));
      }));
      it('devrait vérifier si un exercice est complété', (0, _asyncToGenerator2.default)(function* () {
        _asyncStorage.default.getItem.mockResolvedValue('{"vocab-1":{"level":"level-1","score":90}}');
        var result = yield _storageUtils.storageService.isExerciseCompleted('vocab-1');
        expect(result).toBe(true);
      }));
      it('devrait retourner false pour un exercice non complété', (0, _asyncToGenerator2.default)(function* () {
        _asyncStorage.default.getItem.mockResolvedValue('{}');
        var result = yield _storageUtils.storageService.isExerciseCompleted('vocab-2');
        expect(result).toBe(false);
      }));
    });
    describe('updateStreak et getStreak', function () {
      beforeEach(function () {
        jest.spyOn(Date, 'now').mockReturnValue(1640995200000);
        jest.spyOn(global, 'Date').mockImplementation(function () {
          return {
            getFullYear: function getFullYear() {
              return 2022;
            },
            getMonth: function getMonth() {
              return 0;
            },
            getDate: function getDate() {
              return 1;
            }
          };
        });
      });
      afterEach(function () {
        jest.restoreAllMocks();
      });
      it('devrait initialiser une nouvelle streak', (0, _asyncToGenerator2.default)(function* () {
        _asyncStorage.default.getItem.mockResolvedValue(null);
        _asyncStorage.default.setItem.mockResolvedValue();
        var result = yield _storageUtils.storageService.updateStreak();
        expect(result.currentStreak).toBe(1);
        expect(result.maxStreak).toBe(1);
      }));
      it('devrait récupérer les données de streak', (0, _asyncToGenerator2.default)(function* () {
        _asyncStorage.default.getItem.mockResolvedValue('{"currentStreak":5,"maxStreak":10}');
        var result = yield _storageUtils.storageService.getStreak();
        expect(result.currentStreak).toBe(5);
        expect(result.maxStreak).toBe(10);
      }));
    });
    describe('resetAllData', function () {
      it('devrait réinitialiser toutes les données', (0, _asyncToGenerator2.default)(function* () {
        _asyncStorage.default.clear.mockResolvedValue();
        var result = yield _storageUtils.storageService.resetAllData();
        expect(result).toBe(true);
        expect(_asyncStorage.default.clear).toHaveBeenCalled();
      }));
    });
  });
  describe('Fonctions métier spécifiques', function () {
    describe('readFromStorage', function () {
      it('devrait lire des données avec validation', (0, _asyncToGenerator2.default)(function* () {
        _asyncStorage.default.setItem.mockResolvedValue();
        _asyncStorage.default.removeItem.mockResolvedValue();
        _asyncStorage.default.getItem.mockResolvedValue('{"version":"2.0","data":{"vocabulary":100},"lastModified":1640995200000}');
        var result = yield (0, _storageUtils.readFromStorage)();
        expect(result).toBeDefined();
        expect(result.version).toBe('2.0');
      }));
      it('devrait retourner null si storage indisponible', (0, _asyncToGenerator2.default)(function* () {
        _asyncStorage.default.setItem.mockRejectedValue(new Error('Storage error'));
        var result = yield (0, _storageUtils.readFromStorage)();
        expect(result).toBeNull();
      }));
    });
    describe('getStorageInfo', function () {
      it('devrait retourner les infos de stockage', (0, _asyncToGenerator2.default)(function* () {
        _asyncStorage.default.setItem.mockResolvedValue();
        _asyncStorage.default.removeItem.mockResolvedValue();
        _asyncStorage.default.getItem.mockResolvedValue('{"version":"2.0","lastModified":1640995200000}');
        var result = yield (0, _storageUtils.getStorageInfo)();
        expect(result.available).toBe(true);
        expect(result.hasData).toBe(true);
      }));
    });
  });
  describe('Gestion des erreurs et edge cases', function () {
    it('devrait gérer les données null et undefined', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.setItem.mockResolvedValue();
      yield (0, _storageUtils.storeData)('null-test', null);
      yield (0, _storageUtils.storeData)('undefined-test', undefined);
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('null-test', 'null');
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('undefined-test', undefined);
    }));
    it('devrait gérer les objets circulaires', (0, _asyncToGenerator2.default)(function* () {
      var circularObj = {
        name: 'test'
      };
      circularObj.self = circularObj;
      var result = yield (0, _storageUtils.storeData)('circular', circularObj);
      expect(result).toBe(false);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,