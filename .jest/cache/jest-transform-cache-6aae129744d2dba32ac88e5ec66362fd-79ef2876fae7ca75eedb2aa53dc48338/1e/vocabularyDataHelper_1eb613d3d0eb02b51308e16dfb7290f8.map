{"version":3,"names":["_","_interopRequireDefault","require","_2","_3","_4","_5","_6","_bonus","_7","_8","_9","_0","_1","_10","_bonus2","formatVocabularyList","exports","data","arguments","length","undefined","map","entry","word","translation","convertFastVocabToExercises","fastVocab","words","exercises","title","getVocabularyData","level","mode","fastDataMap","fastVocab1","fastVocab2","fastVocab3","fastVocab4","fastVocab5","fastVocab6","fastVocabBonus","classicDataMap","vocabulary1Data","vocabulary2Data","vocabulary3Data","vocabulary4Data","vocabulary5Data","vocabulary6Data","vocabularyBonusData","getAvailableLevels","getLevelColor","colors","getLevelDisplayName","displayNames","getLevelDescription","descriptions","getLevelIcon","icons","isBonusLevel","getVocabularyStats","totalWords","totalExercises","reduce","sum","exercise","averageWordsPerExercise","Math","round"],"sources":["vocabularyDataHelper.js"],"sourcesContent":["/**\n * Formate une liste de mots pour garantir la présence des clés word et translation\n * @param {Array} data\n * @returns {Array}\n */\nexport const formatVocabularyList = (data = []) => {\n  return data.map(entry => ({\n    word: entry.word,\n    translation: entry.translation\n  }));\n};\n// src/utils/vocabulary/vocabularyDataHelper.js\n\n// Import des données de vocabulaire par niveau (6 niveaux + bonus)\nimport vocabulary1Data from \"../../data/vocabulary/1\";\nimport vocabulary2Data from \"../../data/vocabulary/2\";\nimport vocabulary3Data from \"../../data/vocabulary/3\";\nimport vocabulary4Data from \"../../data/vocabulary/4\";\nimport vocabulary5Data from \"../../data/vocabulary/5\";\nimport vocabulary6Data from \"../../data/vocabulary/6\";\nimport vocabularyBonusData from \"../../data/vocabulary/bonus\";\n\n// Import des données Fast Vocabulary (exports nommés, pas default)\nimport { vocab as fastVocab1 } from \"../../data/fastVocabulary/1\";\nimport { vocab as fastVocab2 } from \"../../data/fastVocabulary/2\";\nimport { vocab as fastVocab3 } from \"../../data/fastVocabulary/3\";\nimport { vocab as fastVocab4 } from \"../../data/fastVocabulary/4\";\nimport { vocab as fastVocab5 } from \"../../data/fastVocabulary/5\";\nimport { vocab as fastVocab6 } from \"../../data/fastVocabulary/6\";\nimport { vocab as fastVocabBonus } from \"../../data/fastVocabulary/bonus\";\n\n/**\n * Fonction pour convertir la structure Fast vers la structure attendue\n * @param {Object} fastVocab - Données fast vocabulary\n * @returns {Object} Structure convertie pour l'app\n */\nconst convertFastVocabToExercises = (fastVocab) => {\n  if (!fastVocab || !fastVocab.words) {\n    return { exercises: [] };\n  }\n\n  return {\n    exercises: [\n      {\n        title: fastVocab.title || \"Vocabulaire Fast\",\n        words: fastVocab.words,\n      },\n    ],\n  };\n};\n\n/**\n * Récupère les données de vocabulaire en fonction du niveau et du mode\n * @param {string} level - Le niveau de langue (1, 2, 3, 4, 5, 6, bonus)\n * @param {string} mode - Le mode ('classic' ou 'fast')\n * @returns {Object} Les données de vocabulaire pour le niveau et mode spécifiés\n */\nexport const getVocabularyData = (level, mode = \"classic\") => {\n  if (mode === \"fast\") {\n    const fastDataMap = {\n      \"1\": convertFastVocabToExercises(fastVocab1),\n      \"2\": convertFastVocabToExercises(fastVocab2),\n      \"3\": convertFastVocabToExercises(fastVocab3),\n      \"4\": convertFastVocabToExercises(fastVocab4),\n      \"5\": convertFastVocabToExercises(fastVocab5),\n      \"6\": convertFastVocabToExercises(fastVocab6),\n      \"bonus\": convertFastVocabToExercises(fastVocabBonus),\n    };\n\n    return fastDataMap[level] || convertFastVocabToExercises(fastVocab1);\n  }\n\n  // Mode classic (6 niveaux standards + bonus)\n  const classicDataMap = {\n    \"1\": vocabulary1Data,\n    \"2\": vocabulary2Data,\n    \"3\": vocabulary3Data,\n    \"4\": vocabulary4Data,\n    \"5\": vocabulary5Data,\n    \"6\": vocabulary6Data,\n    \"bonus\": vocabularyBonusData,\n  };\n\n  return classicDataMap[level] || vocabulary1Data;\n};\n\n/**\n * Récupère la liste des niveaux disponibles selon le mode\n * @param {string} mode - Le mode ('classic' ou 'fast')\n * @returns {Array} Liste des niveaux disponibles\n */\nexport const getAvailableLevels = () => {\n  return [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"bonus\"];\n};\n\n/**\n * Récupère la couleur associée à un niveau de langue\n * @param {string} level - Le niveau de langue (1, 2, 3, 4, 5, 6, bonus)\n * @returns {string} Code couleur hexadécimal pour le niveau\n */\nexport const getLevelColor = (level) => {\n  const colors = {\n    \"1\": \"#3b82f6\", // Bleu - Niveau 1\n    \"2\": \"#8b5cf6\", // Violet - Niveau 2\n    \"3\": \"#10b981\", // Vert - Niveau 3\n    \"4\": \"#f59e0b\", // Orange - Niveau 4\n    \"5\": \"#ef4444\", // Rouge - Niveau 5\n    \"6\": \"#6366f1\", // Indigo - Niveau 6\n    \"bonus\": \"#9333EA\", // Violet premium - Bonus\n  };\n  return colors[level] || \"#5E60CE\"; // Couleur par défaut\n};\n\n/**\n * Récupère le nom d'affichage d'un niveau\n * @param {string} level - Le niveau de langue\n * @returns {string} Nom d'affichage du niveau\n */\nexport const getLevelDisplayName = (level) => {\n  const displayNames = {\n    \"1\": \"Niveau 1\",\n    \"2\": \"Niveau 2\", \n    \"3\": \"Niveau 3\",\n    \"4\": \"Niveau 4\",\n    \"5\": \"Niveau 5\",\n    \"6\": \"Niveau 6\",\n    \"bonus\": \"Bonus\",\n  };\n  return displayNames[level] || `Niveau ${level}`;\n};\n\n/**\n * Récupère la description d'un niveau\n * @param {string} level - Le niveau de langue\n * @returns {string} Description du niveau\n */\nexport const getLevelDescription = (level) => {\n  const descriptions = {\n    \"1\": \"Communication basique, expressions simples du quotidien\",\n    \"2\": \"Expressions simples, conversations courantes\",\n    \"3\": \"Communication claire sur des sujets familiers\",\n    \"4\": \"Communication complexe, discussions techniques\",\n    \"5\": \"Expression fluide, sujets complexes\",\n    \"6\": \"Niveau proche du locuteur natif, maîtrise de la langue\",\n    \"bonus\": \"Contenu exclusif et avancé\",\n  };\n  return descriptions[level] || \"Niveau de langue\";\n};\n\n/**\n * Récupère l'icône associée à un niveau\n * @param {string} level - Le niveau de langue\n * @returns {string} Emoji icône pour le niveau\n */\nexport const getLevelIcon = (level) => {\n  const icons = {\n    \"1\": \"🌱\",\n    \"2\": \"🌿\",\n    \"3\": \"🌳\",\n    \"4\": \"🚀\",\n    \"5\": \"💎\",\n    \"6\": \"🏆\",\n    \"bonus\": \"🔥\",\n  };\n  return icons[level] || \"📚\";\n};\n\n/**\n * Vérifie si un niveau est un niveau bonus\n * @param {string} level - Le niveau à vérifier\n * @returns {boolean} True si c'est un niveau bonus\n */\nexport const isBonusLevel = (level) => {\n  return level === \"bonus\";\n};\n\n/**\n * Récupère les statistiques d'un niveau de vocabulaire\n * @param {string} level - Le niveau de langue\n * @param {string} mode - Le mode ('classic' ou 'fast')\n * @returns {Object} Statistiques du niveau\n */\nexport const getVocabularyStats = (level, mode = \"classic\") => {\n  const data = getVocabularyData(level, mode);\n  \n  if (!data || !data.exercises) {\n    return { totalWords: 0, totalExercises: 0 };\n  }\n\n  const totalExercises = data.exercises.length;\n  const totalWords = data.exercises.reduce((sum, exercise) => {\n    return sum + (exercise.words ? exercise.words.length : 0);\n  }, 0);\n\n  return {\n    totalWords,\n    totalExercises,\n    averageWordsPerExercise: totalExercises > 0 ? Math.round(totalWords / totalExercises) : 0,\n  };\n};"],"mappings":"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","ignoreList":[]}