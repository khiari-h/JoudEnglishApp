967fc5ae17ff13fe34430b89e05a8d21
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var ProgressBar = function ProgressBar(_ref) {
  var progress = _ref.progress,
    goal = _ref.goal,
    colors = _ref.colors;
  var percentage = Math.min(progress / goal * 100, 100);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.progressContainer,
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [styles.progressTrack, {
        backgroundColor: colors.surface
      }],
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.progressFill, {
          backgroundColor: colors.primary,
          width: `${percentage}%`
        }]
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
      style: [styles.progressText, {
        color: colors.textSecondary
      }],
      children: [progress, " / ", goal]
    })]
  });
};
var EmptyState = function EmptyState(_ref2) {
  var type = _ref2.type,
    message = _ref2.message,
    onAction = _ref2.onAction,
    colors = _ref2.colors,
    localStyles = _ref2.localStyles,
    progress = _ref2.progress,
    goal = _ref2.goal;
  var config = {
    locked: {
      emoji: 'üîí',
      title: 'R√©vision Verrouill√©e',
      buttonText: 'Retour'
    },
    loading: {
      emoji: 'üîÑ',
      title: 'Chargement...',
      buttonText: null
    },
    error: {
      emoji: '‚ö†Ô∏è',
      title: 'Erreur',
      buttonText: 'Retour'
    },
    noWords: {
      emoji: 'üìö',
      title: 'Aucun mot disponible',
      buttonText: 'Retour'
    }
  };
  var _ref3 = config[type] || config.error,
    emoji = _ref3.emoji,
    title = _ref3.title,
    buttonText = _ref3.buttonText;
  var lockedMessage = `Apprenez ${goal} mots pour d√©bloquer le mode r√©vision et tester vos connaissances !`;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: localStyles.emptyContainer,
    testID: type === 'loading' ? 'loading-indicator' : undefined,
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: localStyles.emptyEmoji,
      children: emoji
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [localStyles.emptyTitle, {
        color: colors.text
      }],
      children: title
    }), type === 'locked' && (0, _jsxRuntime.jsx)(ProgressBar, {
      progress: progress,
      goal: goal,
      colors: colors
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [localStyles.emptyMessage, {
        color: colors.textSecondary
      }],
      children: type === 'locked' ? lockedMessage : message
    }), buttonText && onAction && (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      style: [localStyles.emptyButton, {
        backgroundColor: colors.primary
      }],
      onPress: onAction,
      activeOpacity: 0.8,
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: localStyles.emptyButtonText,
        children: buttonText
      })
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  progressContainer: {
    width: '80%',
    alignItems: 'center',
    marginVertical: 16
  },
  progressTrack: {
    width: '100%',
    height: 10,
    borderRadius: 5,
    marginBottom: 8
  },
  progressFill: {
    height: '100%',
    borderRadius: 5
  },
  progressText: {
    fontWeight: '600'
  }
});
var _default = exports.default = EmptyState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,