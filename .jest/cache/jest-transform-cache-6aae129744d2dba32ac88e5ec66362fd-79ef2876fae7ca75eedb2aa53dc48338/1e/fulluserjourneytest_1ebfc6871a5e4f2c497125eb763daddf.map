{"version":3,"names":["_getJestObj","mock","router","push","mockRouterPush","replace","jest","fn","back","Redirect","_ref","href","Stack","_ref2","children","_jsxRuntime","jsx","Fragment","Tabs","_ref3","require","_interopRequireDefault","_asyncToGenerator2","_react","_reactNative","_layout","_asyncStorage","_require","describe","beforeEach","default","AsyncStorage","clear","mockClear","it","_render","render","getByText","findByText","queryByText","waitFor","expect","toHaveBeenCalledWith","assessmentTitle","toBeTruthy","fireEvent","press","dashboardTitle","setItem","levelDisplay","dailyGoal"],"sources":["full-user-journey.test.js"],"sourcesContent":["\nimport React from 'react';\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\nimport App from '../../app/_layout';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n// Mock des modules natifs et des dépendances\njest.mock('expo-font');\njest.mock('expo-asset');\n\n// Mock expo-router pour contrôler la navigation\nconst mockRouterPush = jest.fn();\njest.mock('expo-router', () => ({\n  router: {\n    push: mockRouterPush,\n    replace: jest.fn(),\n    back: jest.fn(),\n  },\n  Redirect: ({ href }) => {\n    mockRouterPush(href);\n    return null;\n  },\n  Stack: ({ children }) => <>{children}</>, // Mock simple pour le Stack Navigator\n  Tabs: ({ children }) => <>{children}</>, // Mock simple pour le Tabs Navigator\n}));\n\n// Mock @react-native-async-storage/async-storage\njest.mock('@react-native-async-storage/async-storage', () =>\n  require('@react-native-async-storage/async-storage/jest/async-storage-mock')\n);\n\ndescribe('Full User Journey Integration Test', () => {\n  beforeEach(async () => {\n    // Nettoyer AsyncStorage avant chaque test pour simuler un nouvel utilisateur\n    await AsyncStorage.clear();\n    mockRouterPush.mockClear(); // Réinitialiser le mock de navigation\n  });\n\n  it('simulates a complete user flow from assessment to advanced usage', async () => {\n    const { getByText, findByText, queryByText } = render(<App />);\n\n    // 1. Évaluation initiale et redirection\n    // L'utilisateur est nouveau, il devrait être redirigé vers l'évaluation\n    // On s'attend à ce que le router.push soit appelé avec le chemin de l'évaluation\n    await waitFor(() => {\n      expect(mockRouterPush).toHaveBeenCalledWith('/tabs/levelAssessment');\n    });\n\n    // Simuler l'affichage de l'écran d'évaluation\n    const assessmentTitle = await findByText(/Évaluation de niveau/i);\n    expect(assessmentTitle).toBeTruthy();\n\n    // Simuler le début de l'évaluation\n    fireEvent.press(getByText(/Commencer l'évaluation/i));\n\n    // Pour l'instant, nous allons simuler la fin de l'évaluation\n    // et la redirection vers le tableau de bord.\n    // Dans un test plus complet, on simulerait les réponses aux questions.\n    // Pour ce test d'intégration, nous allons directement simuler la navigation vers le dashboard\n    // après une \"complétion\" de l'évaluation.\n    // En réalité, le composant LevelAssessment appellerait router.push('/tabs/dashboard')\n    // après avoir sauvegardé les résultats.\n    mockRouterPush('/tabs/dashboard'); // Simuler la redirection après évaluation\n\n    // 2. Vérification du tableau de bord après évaluation\n    await waitFor(() => {\n      expect(mockRouterPush).toHaveBeenCalledWith('/tabs/dashboard');\n    });\n\n    const dashboardTitle = await findByText(/Tableau de bord/i);\n    expect(dashboardTitle).toBeTruthy();\n\n    // Simuler que le niveau A1 est défini après l'évaluation\n    await AsyncStorage.setItem('user_active_level', '1'); // '1' correspond à A1\n    const levelDisplay = await findByText(/Niveau : A1/i);\n    expect(levelDisplay).toBeTruthy();\n\n    // 3. Compléter un exercice (simplifié pour le test d'intégration)\n    fireEvent.press(getByText(/Niveaux/i)); // Onglet de sélection de niveau\n    await findByText(/Leçon 1/i); // Attendre que la leçon 1 soit visible\n    fireEvent.press(getByText(/Leçon 1/i)); // Choisir une leçon\n\n    // Simuler la navigation vers un exercice\n    mockRouterPush('/tabs/vocabularyExercise'); // Simuler la navigation vers un exercice\n\n    // Simuler la complétion de l'exercice et le retour au tableau de bord\n    mockRouterPush('/tabs/dashboard');\n\n    // 4. Vérifier la mise à jour du tableau de bord (simplifié)\n    await waitFor(() => {\n      expect(mockRouterPush).toHaveBeenCalledWith('/tabs/dashboard');\n    });\n    // Pour un test réel, on vérifierait des éléments spécifiques du tableau de bord\n    // qui indiquent la progression, par exemple un texte \"Progrès : X%\"\n    // Pour l'instant, on se contente de vérifier que le dashboard est là.\n    expect(queryByText(/Progrès : \\d+%?/i)).toBeTruthy(); // Vérifier qu'un texte de progrès est présent\n\n    // 5. Utiliser la révision de vocabulaire (simplifié)\n    // Simuler la navigation vers la révision de vocabulaire\n    fireEvent.press(getByText(/Exercices/i)); // Onglet Exercices\n    await findByText(/Révision de vocabulaire/i);\n    fireEvent.press(getByText(/Révision de vocabulaire/i));\n    mockRouterPush('/tabs/vocabularyRevision');\n    mockRouterPush('/tabs/dashboard'); // Retour au dashboard après révision\n\n    // 6. Modifier les paramètres\n    fireEvent.press(getByText(/Réglages/i));\n    await findByText(/Objectif quotidien/i);\n    fireEvent.press(getByText(/Objectif quotidien/i));\n    // Simuler la modification de l'objectif (par exemple, via un input ou un sélecteur)\n    // Pour ce test, nous allons juste simuler que l'action a eu lieu et que le paramètre est sauvegardé.\n    await AsyncStorage.setItem('daily_goal', '20'); // Simuler la sauvegarde de l'objectif\n\n    // Vérifier que le changement est appliqué en retournant au tableau de bord\n    fireEvent.press(getByText(/Accueil/i));\n    await waitFor(() => {\n      expect(mockRouterPush).toHaveBeenCalledWith('/tabs/dashboard');\n    });\n    const dailyGoal = await findByText(/Objectif : 20 mots/i);\n    expect(dailyGoal).toBeTruthy();\n  });\n});\n"],"mappings":"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","ignoreList":[]}