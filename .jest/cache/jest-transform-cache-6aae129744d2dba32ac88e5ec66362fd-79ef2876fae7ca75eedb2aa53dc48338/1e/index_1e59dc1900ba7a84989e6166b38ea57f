a79074aa32e7ee9029a55d9ee2aa0f2d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _react = require("react");
var _style = _interopRequireDefault(require("./style"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
var QuestionIndicators = function QuestionIndicators(_ref) {
  var totalQuestions = _ref.totalQuestions,
    currentQuestionIndex = _ref.currentQuestionIndex,
    _ref$completedQuestio = _ref.completedQuestions,
    completedQuestions = _ref$completedQuestio === void 0 ? [] : _ref$completedQuestio,
    onSelectQuestion = _ref.onSelectQuestion,
    levelColor = _ref.levelColor;
  var getIndicatorColor = function getIndicatorColor(index) {
    if (currentQuestionIndex === index) return levelColor;
    if (completedQuestions.includes(index)) return `${levelColor}50`;
    return "#e5e7eb";
  };
  var getIndicatorSize = function getIndicatorSize(index) {
    return currentQuestionIndex === index ? 12 : 8;
  };
  var handleSelectQuestion = (0, _react.useCallback)(function (index) {
    return function () {
      onSelectQuestion(index);
    };
  }, [onSelectQuestion]);
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: _style.default.container,
    children: Array.from({
      length: totalQuestions
    }).map(function (_, index) {
      return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        onPress: handleSelectQuestion(index),
        children: (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [_style.default.indicator, {
            backgroundColor: getIndicatorColor(index),
            width: getIndicatorSize(index),
            height: getIndicatorSize(index)
          }]
        })
      }, `indicator-${index}-${currentQuestionIndex === index ? 'current' : 'other'}`);
    })
  });
};
QuestionIndicators.propTypes = {
  totalQuestions: _propTypes.default.number.isRequired,
  currentQuestionIndex: _propTypes.default.number.isRequired,
  completedQuestions: _propTypes.default.arrayOf(_propTypes.default.number),
  onSelectQuestion: _propTypes.default.func.isRequired,
  levelColor: _propTypes.default.string
};
var _default = exports.default = QuestionIndicators;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX3JlYWN0IiwiX3N0eWxlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9wcm9wVHlwZXMiLCJfanN4UnVudGltZSIsIlF1ZXN0aW9uSW5kaWNhdG9ycyIsIl9yZWYiLCJ0b3RhbFF1ZXN0aW9ucyIsImN1cnJlbnRRdWVzdGlvbkluZGV4IiwiX3JlZiRjb21wbGV0ZWRRdWVzdGlvIiwiY29tcGxldGVkUXVlc3Rpb25zIiwib25TZWxlY3RRdWVzdGlvbiIsImxldmVsQ29sb3IiLCJnZXRJbmRpY2F0b3JDb2xvciIsImluZGV4IiwiaW5jbHVkZXMiLCJnZXRJbmRpY2F0b3JTaXplIiwiaGFuZGxlU2VsZWN0UXVlc3Rpb24iLCJ1c2VDYWxsYmFjayIsImpzeCIsIlZpZXciLCJzdHlsZSIsInN0eWxlcyIsImNvbnRhaW5lciIsImNoaWxkcmVuIiwiQXJyYXkiLCJmcm9tIiwibGVuZ3RoIiwibWFwIiwiXyIsIlRvdWNoYWJsZU9wYWNpdHkiLCJvblByZXNzIiwiaW5kaWNhdG9yIiwiYmFja2dyb3VuZENvbG9yIiwid2lkdGgiLCJoZWlnaHQiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJudW1iZXIiLCJpc1JlcXVpcmVkIiwiYXJyYXlPZiIsImZ1bmMiLCJzdHJpbmciLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2NvbXBvbmVudHMvc2NyZWVucy9leGVyY2lzZXMvcmVhZGluZy9RdWVzdGlvbkluZGljYXRvcnMvaW5kZXguanNcclxuaW1wb3J0IHsgVmlldywgVG91Y2hhYmxlT3BhY2l0eSB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcclxuaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHN0eWxlcyBmcm9tIFwiLi9zdHlsZVwiO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5cclxuLyoqXHJcbiAqIEluZGljYXRldXJzIHZpc3VlbHMgcG91ciBuYXZpZ3VlciBlbnRyZSBsZXMgcXVlc3Rpb25zXHJcbiAqL1xyXG5jb25zdCBRdWVzdGlvbkluZGljYXRvcnMgPSAoe1xyXG4gIHRvdGFsUXVlc3Rpb25zLFxyXG4gIGN1cnJlbnRRdWVzdGlvbkluZGV4LFxyXG4gIGNvbXBsZXRlZFF1ZXN0aW9ucyA9IFtdLFxyXG4gIG9uU2VsZWN0UXVlc3Rpb24sXHJcbiAgbGV2ZWxDb2xvcixcclxufSkgPT4ge1xyXG4gIC8vIOKchSBFeHRyYWN0aW9uIGRlIGxhIGxvZ2lxdWUgY29uZGl0aW9ubmVsbGUgcG91ciBhbcOpbGlvcmVyIGxhIGxpc2liaWxpdMOpXHJcbiAgXHJcblxyXG4gIC8vIETDqXRlcm1pbmVyIGxhIGNvdWxldXIgZGUgbCdpbmRpY2F0ZXVyXHJcbiAgY29uc3QgZ2V0SW5kaWNhdG9yQ29sb3IgPSAoaW5kZXgpID0+IHtcclxuICAgIGlmIChjdXJyZW50UXVlc3Rpb25JbmRleCA9PT0gaW5kZXgpIHJldHVybiBsZXZlbENvbG9yO1xyXG4gICAgaWYgKGNvbXBsZXRlZFF1ZXN0aW9ucy5pbmNsdWRlcyhpbmRleCkpIHJldHVybiBgJHtsZXZlbENvbG9yfTUwYDtcclxuICAgIHJldHVybiBcIiNlNWU3ZWJcIjtcclxuICB9O1xyXG4gIFxyXG4gIC8vIETDqXRlcm1pbmVyIGxhIHRhaWxsZSBkZSBsJ2luZGljYXRldXJcclxuICBjb25zdCBnZXRJbmRpY2F0b3JTaXplID0gKGluZGV4KSA9PiB7XHJcbiAgICByZXR1cm4gY3VycmVudFF1ZXN0aW9uSW5kZXggPT09IGluZGV4ID8gMTIgOiA4O1xyXG4gIH07XHJcblxyXG4gIC8vIEhhbmRsZXIgc3RhYmxlIHBvdXIgbGEgc8OpbGVjdGlvbiBkJ3VuZSBxdWVzdGlvblxyXG4gIGNvbnN0IGhhbmRsZVNlbGVjdFF1ZXN0aW9uID0gdXNlQ2FsbGJhY2soXHJcbiAgICAoaW5kZXgpID0+ICgpID0+IHtcclxuICAgICAgb25TZWxlY3RRdWVzdGlvbihpbmRleCk7XHJcbiAgICB9LFxyXG4gICAgW29uU2VsZWN0UXVlc3Rpb25dXHJcbiAgKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfT5cclxuICAgICAge0FycmF5LmZyb20oeyBsZW5ndGg6IHRvdGFsUXVlc3Rpb25zIH0pLm1hcCgoXywgaW5kZXgpID0+IChcclxuICAgICAgICA8VG91Y2hhYmxlT3BhY2l0eVxyXG4gICAgICAgICAga2V5PXtgaW5kaWNhdG9yLSR7aW5kZXh9LSR7Y3VycmVudFF1ZXN0aW9uSW5kZXggPT09IGluZGV4ID8gJ2N1cnJlbnQnIDogJ290aGVyJ31gfVxyXG4gICAgICAgICAgb25QcmVzcz17aGFuZGxlU2VsZWN0UXVlc3Rpb24oaW5kZXgpfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxWaWV3XHJcbiAgICAgICAgICAgIHN0eWxlPXtbXHJcbiAgICAgICAgICAgICAgc3R5bGVzLmluZGljYXRvcixcclxuICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGdldEluZGljYXRvckNvbG9yKGluZGV4KSxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiBnZXRJbmRpY2F0b3JTaXplKGluZGV4KSxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogZ2V0SW5kaWNhdG9yU2l6ZShpbmRleCksXHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXX1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxyXG4gICAgICApKX1cclxuICAgIDwvVmlldz5cclxuICApO1xyXG59O1xyXG5cclxuLy8g4pyFIETDqWZpbml0aW9uIGRlIFByb3BUeXBlcyBwb3VyIGxhIHZhbGlkYXRpb24gZGVzIHByb3BzXHJcblF1ZXN0aW9uSW5kaWNhdG9ycy5wcm9wVHlwZXMgPSB7XHJcbiAgLy8gJ3RvdGFsUXVlc3Rpb25zJyBlc3QgbWFucXVhbnQgZGFucyBsYSB2YWxpZGF0aW9uXHJcbiAgdG90YWxRdWVzdGlvbnM6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcclxuICAvLyAnY3VycmVudFF1ZXN0aW9uSW5kZXgnIGVzdCBtYW5xdWFudCBkYW5zIGxhIHZhbGlkYXRpb25cclxuICBjdXJyZW50UXVlc3Rpb25JbmRleDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxyXG4gIC8vICdjb21wbGV0ZWRRdWVzdGlvbnMnIGVzdCBtYW5xdWFudCBkYW5zIGxhIHZhbGlkYXRpb25cclxuICBjb21wbGV0ZWRRdWVzdGlvbnM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5udW1iZXIpLFxyXG4gIC8vICdvblNlbGVjdFF1ZXN0aW9uJyBlc3QgbWFucXVhbnQgZGFucyBsYSB2YWxpZGF0aW9uXHJcbiAgb25TZWxlY3RRdWVzdGlvbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuICAvLyAnbGV2ZWxDb2xvcicgZXN0IG1hbnF1YW50IGRhbnMgbGEgdmFsaWRhdGlvblxyXG4gIGxldmVsQ29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBRdWVzdGlvbkluZGljYXRvcnM7Il0sIm1hcHBpbmdzIjoiOzs7OztBQUNBLElBQUFBLFlBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLE1BQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUgsT0FBQTtBQUNBLElBQUFJLFVBQUEsR0FBQUQsc0JBQUEsQ0FBQUgsT0FBQTtBQUFtQyxJQUFBSyxXQUFBLEdBQUFMLE9BQUE7QUFLbkMsSUFBTU0sa0JBQWtCLEdBQUcsU0FBckJBLGtCQUFrQkEsQ0FBQUMsSUFBQSxFQU1sQjtFQUFBLElBTEpDLGNBQWMsR0FBQUQsSUFBQSxDQUFkQyxjQUFjO0lBQ2RDLG9CQUFvQixHQUFBRixJQUFBLENBQXBCRSxvQkFBb0I7SUFBQUMscUJB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