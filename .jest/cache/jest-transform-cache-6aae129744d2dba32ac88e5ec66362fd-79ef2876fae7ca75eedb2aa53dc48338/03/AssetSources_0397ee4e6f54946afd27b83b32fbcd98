739e4c302a1f9d15af60bb28b70bcee6
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveUri = resolveUri;
exports.selectAssetSource = selectAssetSource;
var _expoModulesCore = require("expo-modules-core");
var _reactNative = require("react-native");
var _AssetSourceResolver = _interopRequireDefault(require("./AssetSourceResolver"));
var _PlatformUtils = require("./PlatformUtils");
function selectAssetSource(meta) {
  var _meta$fileHashes$inde, _meta$fileUris$index, _manifest2$extra;
  var scale = _AssetSourceResolver.default.pickScale(meta.scales, _reactNative.PixelRatio.get());
  var index = meta.scales.findIndex(function (s) {
    return s === scale;
  });
  var hash = meta.fileHashes ? (_meta$fileHashes$inde = meta.fileHashes[index]) != null ? _meta$fileHashes$inde : meta.fileHashes[0] : meta.hash;
  var uri = meta.fileUris ? (_meta$fileUris$index = meta.fileUris[index]) != null ? _meta$fileUris$index : meta.fileUris[0] : meta.uri;
  if (uri) {
    return {
      uri: resolveUri(uri),
      hash: hash
    };
  }
  var fileScale = scale === 1 ? '' : `@${scale}x`;
  var fileExtension = meta.type ? `.${encodeURIComponent(meta.type)}` : '';
  var suffix = `/${encodeURIComponent(meta.name)}${fileScale}${fileExtension}`;
  var params = new URLSearchParams({
    platform: _expoModulesCore.Platform.OS,
    hash: meta.hash
  });
  if (/^https?:\/\//.test(meta.httpServerLocation)) {
    var _uri = meta.httpServerLocation + suffix + '?' + params;
    return {
      uri: _uri,
      hash: hash
    };
  }
  var manifest2 = (0, _PlatformUtils.getManifest2)();
  var devServerUrl = manifest2 != null && (_manifest2$extra = manifest2.extra) != null && (_manifest2$extra = _manifest2$extra.expoGo) != null && _manifest2$extra.developer ? 'http://' + manifest2.extra.expoGo.debuggerHost : null;
  if (devServerUrl) {
    var baseUrl = new URL(meta.httpServerLocation + suffix, devServerUrl);
    baseUrl.searchParams.set('platform', _expoModulesCore.Platform.OS);
    baseUrl.searchParams.set('hash', meta.hash);
    return {
      uri: baseUrl.href,
      hash: hash
    };
  }
  if (_reactNative.NativeModules.ExponentKernel) {
    return {
      uri: `https://classic-assets.eascdn.net/~assets/${encodeURIComponent(hash)}`,
      hash: hash
    };
  }
  return {
    uri: '',
    hash: hash
  };
}
function resolveUri(uri) {
  return _PlatformUtils.manifestBaseUrl ? new URL(uri, _PlatformUtils.manifestBaseUrl).href : uri;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,