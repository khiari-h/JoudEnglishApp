0f038ae0fe70eacc25254dded16f1b5d
_getJestObj().mock('expo-linear-gradient', function () {
  var _require = require('react-native'),
    View = _require.View;
  return {
    LinearGradient: function LinearGradient(props) {
      return (0, _jsxRuntime.jsx)(View, Object.assign({}, props));
    }
  };
});
_getJestObj().mock('@expo/vector-icons', function () {
  var _require2 = require('react-native'),
    Text = _require2.Text;
  return {
    Ionicons: function Ionicons(_ref) {
      var name = _ref.name;
      return (0, _jsxRuntime.jsx)(Text, {
        testID: `icon-${name}`,
        children: name
      });
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ResultsScreen = _interopRequireDefault(require("../../../src/components/exercise-common/ResultsScreen"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ResultsScreen', function () {
  beforeAll(function () {
    jest.useFakeTimers();
  });
  afterAll(function () {
    jest.useRealTimers();
  });
  var mockRetry = jest.fn();
  var mockContinue = jest.fn();
  var baseProps = {
    totalQuestions: 10,
    correctAnswers: 8,
    incorrectAnswers: 1,
    skippedAnswers: 1,
    timeTaken: '01:30',
    exerciseType: 'Vocabulary',
    level: 'B1',
    levelColor: '#3B82F6',
    feedback: '',
    onRetry: mockRetry,
    onContinue: mockContinue,
    showDetailedResults: false,
    detailedResults: []
  };
  beforeEach(function () {
    jest.clearAllMocks();
    _reactNative2.Share.share = jest.fn().mockResolvedValue({});
  });
  it('affiche les statistiques principales', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, baseProps))),
      getByText = _render.getByText;
    expect(getByText('80%')).toBeTruthy();
    expect(getByText('8/10')).toBeTruthy();
    expect(getByText('Correctes')).toBeTruthy();
    expect(getByText('8')).toBeTruthy();
    expect(getByText('Incorrectes')).toBeTruthy();
    expect(getByText('1')).toBeTruthy();
    expect(getByText('Passées')).toBeTruthy();
    expect(getByText('1')).toBeTruthy();
    expect(getByText('Temps')).toBeTruthy();
    expect(getByText('01:30')).toBeTruthy();
  });
  it('affiche le message de feedback si fourni', function () {
    var props = Object.assign({}, baseProps, {
      feedback: 'Très bien !'
    });
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, props))),
      getByText = _render2.getByText;
    expect(getByText('Conseils pour progresser')).toBeTruthy();
    expect(getByText('Très bien !')).toBeTruthy();
  });
  it('n\'affiche pas la section de feedback si vide', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, baseProps))),
      queryByText = _render3.queryByText;
    expect(queryByText('Conseils pour progresser')).toBeNull();
  });
  it('affiche le détail des réponses si demandé', function () {
    var detailed = [{
      question: 'Quel est le mot ?',
      userAnswer: 'Chien',
      correctAnswer: 'Dog',
      isCorrect: false,
      isSkipped: false
    }];
    var props = Object.assign({}, baseProps, {
      showDetailedResults: true,
      detailedResults: detailed
    });
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, props))),
      getByText = _render4.getByText;
    expect(getByText('Détail des réponses')).toBeTruthy();
    expect(getByText('Question 1')).toBeTruthy();
    expect(getByText('Quel est le mot ?')).toBeTruthy();
    expect(getByText('Votre réponse:')).toBeTruthy();
    expect(getByText('Chien')).toBeTruthy();
    expect(getByText('Réponse correcte:')).toBeTruthy();
    expect(getByText('Dog')).toBeTruthy();
  });
  it('n\'affiche pas le détail si désactivé', function () {
    var detailed = [{
      question: 'Q',
      userAnswer: 'A',
      correctAnswer: 'B',
      isCorrect: false,
      isSkipped: false
    }];
    var props = Object.assign({}, baseProps, {
      showDetailedResults: false,
      detailedResults: detailed
    });
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, props))),
      queryByText = _render5.queryByText;
    expect(queryByText('Détail des réponses')).toBeNull();
  });
  it('affiche "Excellent!" si score >= 80%', function () {
    var props = Object.assign({}, baseProps, {
      correctAnswers: 8
    });
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, props))),
      getByText = _render6.getByText,
      getByTestId = _render6.getByTestId;
    expect(getByText('Excellent!')).toBeTruthy();
    expect(getByTestId('icon-trophy')).toBeTruthy();
  });
  it('affiche "Bien joué!" si score >= 60%', function () {
    var props = Object.assign({}, baseProps, {
      correctAnswers: 6
    });
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, props))),
      getByText = _render7.getByText,
      getByTestId = _render7.getByTestId;
    expect(getByText('Bien joué!')).toBeTruthy();
    expect(getByTestId('icon-thumbs-up')).toBeTruthy();
  });
  it('affiche "Pas mal!" si score >= 40%', function () {
    var props = Object.assign({}, baseProps, {
      correctAnswers: 4
    });
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, props))),
      getByText = _render8.getByText,
      getByTestId = _render8.getByTestId;
    expect(getByText('Pas mal!')).toBeTruthy();
    expect(getByTestId('icon-fitness')).toBeTruthy();
  });
  it('affiche "Continuez vos efforts" si score < 40%', function () {
    var props = Object.assign({}, baseProps, {
      correctAnswers: 2
    });
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, props))),
      getByText = _render9.getByText,
      getByTestId = _render9.getByTestId;
    expect(getByText('Continuez vos efforts')).toBeTruthy();
    expect(getByTestId('icon-school')).toBeTruthy();
  });
  it('déclenche onRetry quand bouton Réessayer est pressé', function () {
    var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, baseProps))),
      getByText = _render0.getByText;
    _reactNative.fireEvent.press(getByText('Réessayer'));
    expect(mockRetry).toHaveBeenCalledTimes(1);
  });
  it('déclenche onContinue quand bouton Continuer est pressé', function () {
    var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, baseProps))),
      getByText = _render1.getByText;
    _reactNative.fireEvent.press(getByText('Continuer'));
    expect(mockContinue).toHaveBeenCalledTimes(1);
  });
  it('déclenche Share.share avec les bonnes données quand bouton Partager est pressé', (0, _asyncToGenerator2.default)(function* () {
    var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ResultsScreen.default, Object.assign({}, baseProps))),
      getByText = _render10.getByText;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(getByText('Partager'));
    }));
    expect(_reactNative2.Share.share).toHaveBeenCalledWith({
      message: "J'ai obtenu 8/10 (80%) dans mon exercice de Vocabulary niveau B1 sur l'application JOUD English!",
      title: "Mes résultats d'apprentissage"
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,