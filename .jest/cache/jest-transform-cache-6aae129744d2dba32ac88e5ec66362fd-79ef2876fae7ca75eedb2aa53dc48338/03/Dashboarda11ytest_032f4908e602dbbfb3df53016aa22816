9ec320b621ad5c2b89590671d2a479cd
_getJestObj().mock('expo-router', function () {
  return {
    useFocusEffect: jest.fn(function () {}),
    router: {
      push: jest.fn(),
      back: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Dashboard = _interopRequireDefault(require("../../src/screens/Dashboard"));
var _ProgressContext = require("../../src/contexts/ProgressContext");
var _ThemeContext = require("../../src/contexts/ThemeContext");
var _CurrentLevelContext = require("../../src/contexts/CurrentLevelContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Dashboard accessibility', function () {
  it('should expose accessible buttons for actions/levels', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ProgressContext.ProgressProvider, {
          children: (0, _jsxRuntime.jsx)(_CurrentLevelContext.CurrentLevelProvider, {
            children: (0, _jsxRuntime.jsx)(_Dashboard.default, {})
          })
        })
      })),
      getAllByRole = _render.getAllByRole;
    yield (0, _reactNative.waitFor)(function () {
      var buttons = getAllByRole('button');
      expect(buttons.length).toBeGreaterThan(0);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VGb2N1c0VmZmVjdCIsImplc3QiLCJmbiIsInJvdXRlciIsInB1c2giLCJiYWNrIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfRGFzaGJvYXJkIiwiX1Byb2dyZXNzQ29udGV4dCIsIl9UaGVtZUNvbnRleHQiLCJfQ3VycmVudExldmVsQ29udGV4dCIsIl9qc3hSdW50aW1lIiwiX3JlcXVpcmUiLCJkZXNjcmliZSIsIml0IiwiZGVmYXVsdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJUaGVtZVByb3ZpZGVyIiwiY2hpbGRyZW4iLCJQcm9ncmVzc1Byb3ZpZGVyIiwiQ3VycmVudExldmVsUHJvdmlkZXIiLCJnZXRBbGxCeVJvbGUiLCJ3YWl0Rm9yIiwiYnV0dG9ucyIsImV4cGVjdCIsImxlbmd0aCIsInRvQmVHcmVhdGVyVGhhbiJdLCJzb3VyY2VzIjpbIkRhc2hib2FyZC5hMTF5LnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgcmVuZGVyLCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgRGFzaGJvYXJkIGZyb20gJy4uLy4uL3NyYy9zY3JlZW5zL0Rhc2hib2FyZCc7XHJcbmltcG9ydCB7IFByb2dyZXNzUHJvdmlkZXIgfSBmcm9tICcuLi8uLi9zcmMvY29udGV4dHMvUHJvZ3Jlc3NDb250ZXh0JztcclxuaW1wb3J0IHsgVGhlbWVQcm92aWRlciB9IGZyb20gJy4uLy4uL3NyYy9jb250ZXh0cy9UaGVtZUNvbnRleHQnO1xyXG5pbXBvcnQgeyBDdXJyZW50TGV2ZWxQcm92aWRlciB9IGZyb20gJy4uLy4uL3NyYy9jb250ZXh0cy9DdXJyZW50TGV2ZWxDb250ZXh0JztcclxuXHJcbmplc3QubW9jaygnZXhwby1yb3V0ZXInLCAoKSA9PiAoe1xyXG4gIHVzZUZvY3VzRWZmZWN0OiBqZXN0LmZuKCgpID0+IHt9KSxcclxuICByb3V0ZXI6IHsgcHVzaDogamVzdC5mbigpLCBiYWNrOiBqZXN0LmZuKCkgfSxcclxufSkpO1xyXG5cclxuZGVzY3JpYmUoJ0Rhc2hib2FyZCBhY2Nlc3NpYmlsaXR5JywgKCkgPT4ge1xyXG4gIGl0KCdzaG91bGQgZXhwb3NlIGFjY2Vzc2libGUgYnV0dG9ucyBmb3IgYWN0aW9ucy9sZXZlbHMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEFsbEJ5Um9sZSB9ID0gcmVuZGVyKFxyXG4gICAgICA8VGhlbWVQcm92aWRlcj5cclxuICAgICAgICA8UHJvZ3Jlc3NQcm92aWRlcj5cclxuICAgICAgICAgIDxDdXJyZW50TGV2ZWxQcm92aWRlcj5cclxuICAgICAgICAgICAgPERhc2hib2FyZCAvPlxyXG4gICAgICAgICAgPC9DdXJyZW50TGV2ZWxQcm92aWRlcj5cclxuICAgICAgICA8L1Byb2dyZXNzUHJvdmlkZXI+XHJcbiAgICAgIDwvVGhlbWVQcm92aWRlcj5cclxuICAgICk7XHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgY29uc3QgYnV0dG9ucyA9IGdldEFsbEJ5Um9sZSgnYnV0dG9uJyk7XHJcbiAgICAgIGV4cGVjdChidXR0b25zLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuXHJcbiJdLCJtYXBwaW5ncyI6IkFBT0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLGFBQWEsRUFBRTtFQUFBLE9BQU87SUFDOUJDLGNBQWMsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsWUFBTSxDQUFDLENBQUMsQ0FBQztJQUNqQ0MsTUFBTSxFQUFFO01BQUVDLElBQUksRUFBRUgsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUFFRyxJQUFJLEVBQUVKLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0lBQUU7RUFDN0MsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUFDLElBQUFJLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxrQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBVkosSUFBQUUsTUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsWUFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksVUFBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUssZ0JBQUEsR0FBQUwsT0FBQTtBQUNBLElBQUFNLGFBQUEsR0FBQU4sT0FBQTtBQUNBLElBQUFPLG9CQUFBLEdBQUFQLE9BQUE7QUFBOEUsSUFBQVEsV0FBQSxHQUFBUixPQUFBO0FBQUEsU0FBQVQsWUFBQTtFQUFBLElBQUFrQixRQUFBLEdBQUFULE9BQUE7SUFBQU4sSUFBQSxHQUFBZSxRQUFBLENBQUFmLElBQUE7RUFBQUgsV0FBQSxZQUFBQSxZQUFBO0lBQUEsT0FBQUcsSUFBQTtFQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBTzlFZ0IsUUFBUSxDQUFDLHlCQUF5QixFQUFFLFlBQU07RUFDeENDLEVBQUUsQ0FBQyxxREFBcUQsTUFBQVYsa0JBQUEsQ0FBQVcsT0FBQSxFQUFFLGFBQVk7SUFDcEUsSUFBQUMsT0FBQSxHQUF5QixJQUFBQyxtQkFBTSxFQUM3QixJQUFBTixXQUFBLENBQUFPLEdBQUEsRUFBQ1QsYUFBQSxDQUFBVSxhQUFhO1FBQUFDLFFBQUEsRUFDWixJQUFBVCxXQUFBLENBQUFPLEdBQUEsRUFBQ1YsZ0JBQUEsQ0FBQWEsZ0JBQWdCO1VBQUFELFFBQUEsRUFDZixJQUFBVCxXQUFBLENBQUFPLEdBQUEsRUFBQ1Isb0JBQUEsQ0FBQVksb0JBQW9CO1lBQUFGLFFBQUEsRUFDbkIsSUFBQVQsV0FBQSxDQUFBTyxHQUFBLEVBQUNYLFVBQUEsQ0FBQVEsT0FBUyxJQUFFO1VBQUMsQ0FDTztRQUFDLENBQ1A7TUFBQyxDQUNOLENBQ2pCLENBQUM7TUFST1EsWUFBWSxHQUFBUCxPQUFBLENBQVpPLFlBQVk7SUFTcEIsTUFBTSxJQUFBQyxvQkFBTyxFQUFDLFlBQU07TUFDbEIsSUFBTUMsT0FBTyxHQUFHRixZQUFZLENBQUMsUUFBUSxDQUFDO01BQ3RDRyxNQUFNLENBQUNELE9BQU8sQ0FBQ0UsTUFBTSxDQUFDLENBQUNDLGVBQWUsQ0FBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxFQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119