{"version":3,"names":["calculateTotalExercises","exercises","arguments","length","undefined","cov_2n5n6lq2jg","b","f","s","calculateExercisesInCategory","categoryId","filter","ex","calculateCompletedExercisesCount","completedExercises","Object","keys","reduce","count","_completedExercises$c","calculateTotalProgress","totalExercises","totalCompleted","Math","min","round","calculateCategoryProgress","categories","map","category","_completedExercises$c2","exercisesInCategory","id","completedInCategory","progress","title","name","calculateCategoryProgressById","_completedExercises$c3","getCategoryStats","_completedExercises$c4","find","cat","remainingExercises","isCompleted","calculateGlobalStats","completedExercisesCount","totalProgress","exercisesByType","acc","exercise","type","completedCategories","stats","totalCategories","averageProgressPerCategory","getRecommendedCategory","incompleteCategories","sort","a","isAllCompleted"],"sources":["errorCorrectionStats.js"],"sourcesContent":["// utils/errorCorrection/errorCorrectionStats.js\n\n/**\n * ðŸŽ¯ Utilitaires de calcul pour Error Correction Exercise\n * Pattern identique Ã  vocabularyStats.js\n */\n\n/**\n * Calcule le nombre total d'exercices dans toutes les catÃ©gories\n * @param {Array} categories - Liste des catÃ©gories  \n * @param {Array} exercises - Liste de tous les exercices\n * @returns {number} Nombre total d'exercices\n */\nexport const calculateTotalExercises = (exercises = []) => {\n  return exercises.length;\n};\n\n/**\n * Calcule le nombre total d'exercices dans une catÃ©gorie spÃ©cifique\n * @param {string} categoryId - ID de la catÃ©gorie\n * @param {Array} exercises - Liste de tous les exercices\n * @returns {number} Nombre d'exercices dans la catÃ©gorie\n */\nexport const calculateExercisesInCategory = (categoryId, exercises = []) => {\n  return exercises.filter(ex => ex.categoryId === categoryId).length;\n};\n\n/**\n * Calcule le nombre total d'exercices complÃ©tÃ©s\n * @param {Object} completedExercises - { categoryId: [0, 2, 4] }\n * @returns {number} Nombre total d'exercices complÃ©tÃ©s\n */\nexport const calculateCompletedExercisesCount = (completedExercises = {}) => {\n  return Object.keys(completedExercises).reduce(\n    (count, categoryId) => count + (completedExercises[categoryId]?.length || 0),\n    0\n  );\n};\n\n/**\n * Calcule la progression totale (tous exercices confondus)\n * @param {Array} exercises - Liste de tous les exercices  \n * @param {Object} completedExercises - Exercices complÃ©tÃ©s par catÃ©gorie\n * @returns {number} Pourcentage de progression (0-100)\n */\nexport const calculateTotalProgress = (exercises = [], completedExercises = {}) => {\n  const totalExercises = calculateTotalExercises(exercises);\n  const totalCompleted = calculateCompletedExercisesCount(completedExercises);\n  \n  return totalExercises > 0\n    ? Math.min(100, Math.round((totalCompleted / totalExercises) * 100))\n    : 0;\n};\n\n/**\n * Calcule la progression par catÃ©gorie (pour ProgressCard)\n * @param {Array} categories - Liste des catÃ©gories\n * @param {Array} exercises - Liste de tous les exercices\n * @param {Object} completedExercises - Exercices complÃ©tÃ©s par catÃ©gorie\n * @returns {Array} Progression par catÃ©gorie\n */\nexport const calculateCategoryProgress = (categories = [], exercises = [], completedExercises = {}) => {\n  return categories.map((category) => {\n    const exercisesInCategory = calculateExercisesInCategory(category.id, exercises);\n    const completedInCategory = completedExercises[category.id]?.length || 0;\n    const progress = exercisesInCategory > 0 \n      ? Math.min(100, Math.round((completedInCategory / exercisesInCategory) * 100))\n      : 0;\n\n    return {\n      title: category.name || `CatÃ©gorie ${category.id}`,\n      totalExercises: exercisesInCategory,\n      completedExercises: completedInCategory,\n      progress\n    };\n  });\n};\n\n/**\n * Calcule la progression dans une catÃ©gorie spÃ©cifique\n * @param {string} categoryId - ID de la catÃ©gorie\n * @param {Array} exercises - Liste de tous les exercices\n * @param {Object} completedExercises - Exercices complÃ©tÃ©s par catÃ©gorie\n * @returns {number} Pourcentage de progression dans la catÃ©gorie (0-100)\n */\nexport const calculateCategoryProgressById = (categoryId, exercises = [], completedExercises = {}) => {\n  const exercisesInCategory = calculateExercisesInCategory(categoryId, exercises);\n  const completedInCategory = completedExercises[categoryId]?.length || 0;\n  \n  return exercisesInCategory > 0\n    ? Math.min(100, Math.round((completedInCategory / exercisesInCategory) * 100))\n    : 0;\n};\n\n/**\n * Obtient les statistiques dÃ©taillÃ©es pour une catÃ©gorie\n * @param {string} categoryId - ID de la catÃ©gorie\n * @param {Array} categories - Liste des catÃ©gories\n * @param {Array} exercises - Liste de tous les exercices\n * @param {Object} completedExercises - Exercices complÃ©tÃ©s par catÃ©gorie\n * @returns {Object} Statistiques dÃ©taillÃ©es de la catÃ©gorie\n */\nexport const getCategoryStats = (categoryId, categories = [], exercises = [], completedExercises = {}) => {\n  const category = categories.find(cat => cat.id === categoryId);\n  const exercisesInCategory = calculateExercisesInCategory(categoryId, exercises);\n  const completedInCategory = completedExercises[categoryId]?.length || 0;\n  const progress = calculateCategoryProgressById(categoryId, exercises, completedExercises);\n  \n  return {\n    category,\n    totalExercises: exercisesInCategory,\n    completedExercises: completedInCategory,\n    remainingExercises: exercisesInCategory - completedInCategory,\n    progress,\n    isCompleted: completedInCategory >= exercisesInCategory\n  };\n};\n\n/**\n * Calcule les statistiques globales pour le dashboard\n * @param {Array} categories - Liste des catÃ©gories\n * @param {Array} exercises - Liste de tous les exercices\n * @param {Object} completedExercises - Exercices complÃ©tÃ©s par catÃ©gorie\n * @returns {Object} Statistiques globales\n */\nexport const calculateGlobalStats = (categories = [], exercises = [], completedExercises = {}) => {\n  const totalExercises = calculateTotalExercises(exercises);\n  const completedExercisesCount = calculateCompletedExercisesCount(completedExercises);\n  const totalProgress = calculateTotalProgress(exercises, completedExercises);\n  \n  // Calcul des exercices par type\n  const exercisesByType = exercises.reduce((acc, exercise) => {\n    const type = exercise.type || 'unknown';\n    acc[type] = (acc[type] || 0) + 1;\n    return acc;\n  }, {});\n  \n  // CatÃ©gories complÃ©tÃ©es\n  const completedCategories = categories.filter(category => {\n    const stats = getCategoryStats(category.id, categories, exercises, completedExercises);\n    return stats.isCompleted;\n  }).length;\n  \n  return {\n    totalExercises,\n    completedExercisesCount,\n    remainingExercises: totalExercises - completedExercisesCount,\n    totalProgress,\n    totalCategories: categories.length,\n    completedCategories,\n    exercisesByType,\n    averageProgressPerCategory: categories.length > 0 \n      ? Math.round(totalProgress / categories.length) \n      : 0\n  };\n};\n\n/**\n * Trouve la prochaine catÃ©gorie recommandÃ©e (non terminÃ©e avec le moins de progression)\n * @param {Array} categories - Liste des catÃ©gories\n * @param {Array} exercises - Liste de tous les exercices\n * @param {Object} completedExercises - Exercices complÃ©tÃ©s par catÃ©gorie\n * @returns {Object|null} Prochaine catÃ©gorie recommandÃ©e ou null\n */\nexport const getRecommendedCategory = (categories = [], exercises = [], completedExercises = {}) => {\n  const incompleteCategories = categories\n    .map(category => getCategoryStats(category.id, categories, exercises, completedExercises))\n    .filter(stats => !stats.isCompleted && stats.totalExercises > 0)\n    .sort((a, b) => a.progress - b.progress); // Trier par progression croissante\n  \n  return incompleteCategories.length > 0 ? incompleteCategories[0] : null;\n};\n\n/**\n * VÃ©rifie si tous les exercices sont terminÃ©s\n * @param {Array} exercises - Liste de tous les exercices\n * @param {Object} completedExercises - Exercices complÃ©tÃ©s par catÃ©gorie\n * @returns {boolean} True si tout est terminÃ©\n */\nexport const isAllCompleted = (exercises = [], completedExercises = {}) => {\n  const totalExercises = calculateTotalExercises(exercises);\n  const completedExercisesCount = calculateCompletedExercisesCount(completedExercises);\n  \n  return totalExercises > 0 && completedExercisesCount >= totalExercises;\n};"],"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","ignoreList":[]}