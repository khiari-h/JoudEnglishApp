d70e8df57f742320c9d7e91cd063438f
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return require('@react-native-async-storage/async-storage/jest/async-storage-mock');
});
_getJestObj().mock('expo-font', function () {
  return {
    useFonts: function useFonts() {
      return [true];
    },
    isLoaded: function isLoaded() {
      return true;
    }
  };
});
_getJestObj().mock('expo-haptics', function () {
  return {
    impactAsync: jest.fn()
  };
});
_getJestObj().mock('react-native-reanimated', function () {
  var Reanimated = require('react-native-reanimated/mock');
  Reanimated.default.call = function () {};
  return Reanimated;
});
_getJestObj().mock('react-native/Libraries/Settings/Settings', function () {
  return {
    get: jest.fn(function () {
      return 'light';
    }),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn()
  };
});
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  RN.Animated = Object.assign({}, RN.Animated, {
    Value: jest.fn(function () {
      return {
        interpolate: jest.fn(function (config) {
          return config.outputRange[0];
        }),
        addListener: jest.fn(),
        removeListener: jest.fn(),
        removeAllListeners: jest.fn(),
        stopAnimation: jest.fn(),
        resetAnimation: jest.fn(),
        setValue: jest.fn()
      };
    }),
    timing: jest.fn(function () {
      return {
        start: jest.fn(function (callback) {
          if (callback) {
            callback({
              finished: true
            });
          }
        })
      };
    })
  });
  RN.StatusBar = {
    setBarStyle: jest.fn(),
    setBackgroundColor: jest.fn()
  };
  return RN;
});
var _reactNative = require("react-native");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
_reactNative.NativeModules.SettingsManager = _reactNative.NativeModules.SettingsManager || {
  settings: {
    AppleLocale: 'en_US'
  }
};
if (typeof setImmediate === 'undefined') {
  global.setImmediate = function (fn) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return setTimeout.apply(void 0, [fn, 0].concat(args));
  };
}
if (typeof clearImmediate === 'undefined') {
  global.clearImmediate = function (id) {
    return clearTimeout(id);
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJyZXF1aXJlIiwidXNlRm9udHMiLCJpc0xvYWRlZCIsImltcGFjdEFzeW5jIiwiamVzdCIsImZuIiwiUmVhbmltYXRlZCIsImRlZmF1bHQiLCJjYWxsIiwiZ2V0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJSTiIsInJlcXVpcmVBY3R1YWwiLCJBbmltYXRlZCIsIk9iamVjdCIsImFzc2lnbiIsIlZhbHVlIiwiaW50ZXJwb2xhdGUiLCJjb25maWciLCJvdXRwdXRSYW5nZSIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJzdG9wQW5pbWF0aW9uIiwicmVzZXRBbmltYXRpb24iLCJzZXRWYWx1ZSIsInRpbWluZyIsInN0YXJ0IiwiY2FsbGJhY2siLCJmaW5pc2hlZCIsIlN0YXR1c0JhciIsInNldEJhclN0eWxlIiwic2V0QmFja2dyb3VuZENvbG9yIiwiX3JlYWN0TmF0aXZlIiwiX3JlcXVpcmUiLCJOYXRpdmVNb2R1bGVzIiwiU2V0dGluZ3NNYW5hZ2VyIiwic2V0dGluZ3MiLCJBcHBsZUxvY2FsZSIsInNldEltbWVkaWF0ZSIsImdsb2JhbCIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcmdzIiwiQXJyYXkiLCJfa2V5Iiwic2V0VGltZW91dCIsImFwcGx5IiwiY29uY2F0IiwiY2xlYXJJbW1lZGlhdGUiLCJpZCIsImNsZWFyVGltZW91dCJdLCJzb3VyY2VzIjpbImplc3Quc2V0dXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXG4vLyBqZXN0LnNldHVwLmpzXG5cbi8vIExpZ25lIHN1cHByaW3DqWUgY2FyIGNlIG1vZHVsZSBuJ2V4aXN0ZSBwbHVzIC8gY2Fzc2UgSmVzdCA6XG4vLyBqZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvQW5pbWF0ZWQvTmF0aXZlQW5pbWF0ZWRIZWxwZXInLCAoKSA9PiAoe30pKTtcblxuaW1wb3J0IHsgTmF0aXZlTW9kdWxlcyB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbi8vIE1vY2sgQXN5bmNTdG9yYWdlICh0csOocyB1dGlsaXPDqSBkYW5zIFJOKVxuamVzdC5tb2NrKCdAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZScsICgpID0+XG4gIHJlcXVpcmUoJ0ByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlL2plc3QvYXN5bmMtc3RvcmFnZS1tb2NrJylcbik7XG5cbi8vIE1vY2sgRXhwbyBmb250IChzaSB0dSB1dGlsaXNlcyBleHBvLWZvbnQsIHNpbm9uIHR1IHBldXggcmV0aXJlcilcbmplc3QubW9jaygnZXhwby1mb250JywgKCkgPT4gKHtcbiAgdXNlRm9udHM6ICgpID0+IFt0cnVlXSxcbiAgaXNMb2FkZWQ6ICgpID0+IHRydWUsXG59KSk7XG5cbi8vIE1vY2sgRXhwbyBoYXB0aWNzICh2aWJyYXRpb24pXG5qZXN0Lm1vY2soJ2V4cG8taGFwdGljcycsICgpID0+ICh7XG4gIGltcGFjdEFzeW5jOiBqZXN0LmZuKCksXG59KSk7XG5cbi8vIE1vY2sgcmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWQgcG91ciDDqXZpdGVyIGxlcyBlcnJldXJzIGRhbnMgbGVzIHRlc3RzXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS1yZWFuaW1hdGVkJywgKCkgPT4ge1xuICBjb25zdCBSZWFuaW1hdGVkID0gcmVxdWlyZSgncmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWQvbW9jaycpO1xuXG4gIC8vIFBhdGNoIHBvdXIgw6l2aXRlciBkZXMgZXJyZXVycyBzdXBwbMOpbWVudGFpcmVzXG4gIFJlYW5pbWF0ZWQuZGVmYXVsdC5jYWxsID0gKCkgPT4ge307XG5cbiAgcmV0dXJuIFJlYW5pbWF0ZWQ7XG59KTtcblxuLy8gTW9jayBkZXMgU2V0dGluZ3MgbmF0aXZlcyAocG91ciDDqXZpdGVyIGVycmV1cnMgVHVyYm9Nb2R1bGVSZWdpc3RyeSlcbmplc3QubW9jaygncmVhY3QtbmF0aXZlL0xpYnJhcmllcy9TZXR0aW5ncy9TZXR0aW5ncycsICgpID0+ICh7XG4gIGdldDogamVzdC5mbigoKSA9PiAnbGlnaHQnKSxcbiAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICByZW1vdmVFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXG59KSk7XG5cbi8vIE1vY2sgTmF0aXZlTW9kdWxlcy5TZXR0aW5nc01hbmFnZXIgKHNpbXVsZSBsb2NhbGUpXG5OYXRpdmVNb2R1bGVzLlNldHRpbmdzTWFuYWdlciA9IE5hdGl2ZU1vZHVsZXMuU2V0dGluZ3NNYW5hZ2VyIHx8IHtcbiAgc2V0dGluZ3M6IHsgQXBwbGVMb2NhbGU6ICdlbl9VUycgfSxcbn07XHJcblxyXG4vLyBQb2x5ZmlsbCBnbG9iYWwgcG91ciBzZXRJbW1lZGlhdGUgLyBjbGVhckltbWVkaWF0ZSAocGFyZm9pcyBtYW5xdWFudClcclxuaWYgKHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgZ2xvYmFsLnNldEltbWVkaWF0ZSA9IChmbiwgLi4uYXJncykgPT4gc2V0VGltZW91dChmbiwgMCwgLi4uYXJncyk7XHJcbn1cclxuaWYgKHR5cGVvZiBjbGVhckltbWVkaWF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICBnbG9iYWwuY2xlYXJJbW1lZGlhdGUgPSAoaWQpID0+IGNsZWFyVGltZW91dChpZCk7XHJcbn1cclxuXHJcbi8vIE1vY2sgY29tcGxldCBldCByb2J1c3RlIGR1IG1vZHVsZSBBbmltYXRlZCBldCBTdGF0dXNCYXJcclxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUnLCAoKSA9PiB7XHJcbiAgY29uc3QgUk4gPSBqZXN0LnJlcXVpcmVBY3R1YWwoJ3JlYWN0LW5hdGl2ZScpO1xyXG5cclxuICAvLyBNb2NrIEFuaW1hdGVkXHJcbiAgUk4uQW5pbWF0ZWQgPSB7XHJcbiAgICAuLi5STi5BbmltYXRlZCxcclxuICAgIFZhbHVlOiBqZXN0LmZuKCgpID0+ICh7XHJcbiAgICAgIGludGVycG9sYXRlOiBqZXN0LmZuKGNvbmZpZyA9PiBjb25maWcub3V0cHV0UmFuZ2VbMF0pLFxyXG4gICAgICBhZGRMaXN0ZW5lcjogamVzdC5mbigpLFxyXG4gICAgICByZW1vdmVMaXN0ZW5lcjogamVzdC5mbigpLFxyXG4gICAgICByZW1vdmVBbGxMaXN0ZW5lcnM6IGplc3QuZm4oKSxcclxuICAgICAgc3RvcEFuaW1hdGlvbjogamVzdC5mbigpLFxyXG4gICAgICByZXNldEFuaW1hdGlvbjogamVzdC5mbigpLFxyXG4gICAgICBzZXRWYWx1ZTogamVzdC5mbigpLFxyXG4gICAgfSkpLFxyXG4gICAgdGltaW5nOiBqZXN0LmZuKCgpID0+ICh7XHJcbiAgICAgIHN0YXJ0OiBqZXN0LmZuKGNhbGxiYWNrID0+IHtcclxuICAgICAgICBpZiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgIGNhbGxiYWNrKHsgZmluaXNoZWQ6IHRydWUgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KSxcclxuICAgIH0pKSxcclxuICB9O1xyXG5cclxuICAvLyBNb2NrIFN0YXR1c0JhclxyXG4gIFJOLlN0YXR1c0JhciA9IHtcclxuICAgIHNldEJhclN0eWxlOiBqZXN0LmZuKCksXHJcbiAgICBzZXRCYWNrZ3JvdW5kQ29sb3I6IGplc3QuZm4oKSxcclxuICB9O1xyXG5cclxuICByZXR1cm4gUk47XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiJBQVNBQSxXQUFBLEdBQUtDLElBQUksQ0FBQywyQ0FBMkMsRUFBRTtFQUFBLE9BQ3JEQyxPQUFPLENBQUMsbUVBQW1FLENBQUM7QUFBQSxDQUM5RSxDQUFDO0FBR0RGLFdBQUEsR0FBS0MsSUFBSSxDQUFDLFdBQVcsRUFBRTtFQUFBLE9BQU87SUFDNUJFLFFBQVEsRUFBRSxTQUFWQSxRQUFRQSxDQUFBO01BQUEsT0FBUSxDQUFDLElBQUksQ0FBQztJQUFBO0lBQ3RCQyxRQUFRLEVBQUUsU0FBVkEsUUFBUUEsQ0FBQTtNQUFBLE9BQVEsSUFBSTtJQUFBO0VBQ3RCLENB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